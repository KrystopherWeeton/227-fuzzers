; ModuleID = '../../third_party/icu/source/common/ucnvmbcs.cpp'
source_filename = "../../third_party/icu/source/common/ucnvmbcs.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.UConverterImpl = type { i32, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)*, void (%struct.UConverterSharedData*)*, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)*, void (%struct.UConverter*)*, void (%struct.UConverter*, i32)*, void (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, i32*)*, i32 (%struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverter*, i8*, i32*)*, i8* (%struct.UConverter*)*, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)*, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)*, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)*, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)*, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* }
%struct.UConverterSharedData = type { i32, i32, i8*, %struct.UConverterStaticData*, i8, i8, %struct.UConverterImpl*, i32, %struct.UConverterMBCSTable }
%struct.UConverterStaticData = type { i32, [60 x i8], i32, i8, i8, i8, i8, [4 x i8], i8, i8, i8, i8, i8, [19 x i8] }
%struct.UConverterMBCSTable = type { i8, i8, i8, i32, [256 x i32]*, [256 x i32]*, i16*, %struct._MBCSToUFallback*, i16*, i16*, [64 x i16], i8*, i8*, i32, i8, i8, i8, i16, i32, i8*, i8*, %struct.UConverterSharedData*, i32* }
%struct._MBCSToUFallback = type { i32, i32 }
%struct.UConverterLoadArgs = type { i32, i32, i8, i8, i16, i32, i8*, i8*, i8* }
%struct.UConverter = type { void (i8*, %struct.UConverterFromUnicodeArgs*, i16*, i32, i32, i32, i32*)*, void (i8*, %struct.UConverterToUnicodeArgs*, i8*, i32, i32, i32*)*, i8*, i8*, i8*, i8*, %struct.UConverterSharedData*, i32, i8, i8, i8, i8, i8, [7 x i8], i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i8], [32 x i8], [2 x i16], [2 x i16], [32 x i16], i32, [19 x i16], [31 x i8], i8, i8, i8, i32 }
%struct.UConverterFromUnicodeArgs = type { i16, i8, %struct.UConverter*, i16*, i16*, i8*, i8*, i32* }
%struct.UConverterToUnicodeArgs = type { i16, i8, %struct.UConverter*, i8*, i8*, i16*, i16*, i32* }
%struct.USetAdder = type { %struct.USet*, void (%struct.USet*, i32)*, void (%struct.USet*, i32, i32)*, void (%struct.USet*, i16*, i32)*, void (%struct.USet*, i32)*, void (%struct.USet*, i32, i32)* }
%struct.USet = type opaque
%struct.UDataInfo = type { i16, i16, i8, i8, i8, i8, [4 x i8], [4 x i8], [4 x i8] }
%struct.UDataMemory = type opaque
%"class.icu_69::UMutex" = type { [40 x i8], %"struct.std::__1::atomic", %"class.icu_69::UMutex"* }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { %"class.std::__1::mutex"* }
%"class.std::__1::mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }

@_ZL9_MBCSImpl = internal constant %struct.UConverterImpl { i32 2, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)* @_ZL13ucnv_MBCSLoadP20UConverterSharedDataP18UConverterLoadArgsPKhP10UErrorCode, void (%struct.UConverterSharedData*)* @_ZL15ucnv_MBCSUnloadP20UConverterSharedData, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)* @_ZL13ucnv_MBCSOpenP10UConverterP18UConverterLoadArgsP10UErrorCode, void (%struct.UConverter*)* null, void (%struct.UConverter*, i32)* null, void (%struct.UConverterToUnicodeArgs*, i32*)* @ucnv_MBCSToUnicodeWithOffsets_69, void (%struct.UConverterToUnicodeArgs*, i32*)* @ucnv_MBCSToUnicodeWithOffsets_69, void (%struct.UConverterFromUnicodeArgs*, i32*)* @ucnv_MBCSFromUnicodeWithOffsets_69, void (%struct.UConverterFromUnicodeArgs*, i32*)* @ucnv_MBCSFromUnicodeWithOffsets_69, i32 (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL21ucnv_MBCSGetNextUCharP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverter*, i8*, i32*)* @_ZL20ucnv_MBCSGetStartersPK10UConverterPaP10UErrorCode, i8* (%struct.UConverter*)* @_ZL16ucnv_MBCSGetNamePK10UConverter, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)* @_ZL17ucnv_MBCSWriteSubP25UConverterFromUnicodeArgsiP10UErrorCode, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)* null, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)* @_ZL22ucnv_MBCSGetUnicodeSetPK10UConverterPK9USetAdder20UConverterUnicodeSetP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* null, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* null }, align 8
@_MBCSData_69 = hidden local_unnamed_addr constant %struct.UConverterSharedData { i32 296, i32 1, i8* null, %struct.UConverterStaticData* null, i8 0, i8 1, %struct.UConverterImpl* @_ZL9_MBCSImpl, i32 0, %struct.UConverterMBCSTable zeroinitializer }, align 8
@_ZL13_SBCSUTF8Impl = internal constant %struct.UConverterImpl { i32 2, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)* @_ZL13ucnv_MBCSLoadP20UConverterSharedDataP18UConverterLoadArgsPKhP10UErrorCode, void (%struct.UConverterSharedData*)* @_ZL15ucnv_MBCSUnloadP20UConverterSharedData, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)* @_ZL13ucnv_MBCSOpenP10UConverterP18UConverterLoadArgsP10UErrorCode, void (%struct.UConverter*)* null, void (%struct.UConverter*, i32)* null, void (%struct.UConverterToUnicodeArgs*, i32*)* @ucnv_MBCSToUnicodeWithOffsets_69, void (%struct.UConverterToUnicodeArgs*, i32*)* @ucnv_MBCSToUnicodeWithOffsets_69, void (%struct.UConverterFromUnicodeArgs*, i32*)* @ucnv_MBCSFromUnicodeWithOffsets_69, void (%struct.UConverterFromUnicodeArgs*, i32*)* @ucnv_MBCSFromUnicodeWithOffsets_69, i32 (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL21ucnv_MBCSGetNextUCharP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverter*, i8*, i32*)* @_ZL20ucnv_MBCSGetStartersPK10UConverterPaP10UErrorCode, i8* (%struct.UConverter*)* @_ZL16ucnv_MBCSGetNamePK10UConverter, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)* @_ZL17ucnv_MBCSWriteSubP25UConverterFromUnicodeArgsiP10UErrorCode, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)* null, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)* @_ZL22ucnv_MBCSGetUnicodeSetPK10UConverterPK9USetAdder20UConverterUnicodeSetP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* null, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* @_ZL17ucnv_SBCSFromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCode }, align 8
@_ZL13_DBCSUTF8Impl = internal constant %struct.UConverterImpl { i32 2, void (%struct.UConverterSharedData*, %struct.UConverterLoadArgs*, i8*, i32*)* @_ZL13ucnv_MBCSLoadP20UConverterSharedDataP18UConverterLoadArgsPKhP10UErrorCode, void (%struct.UConverterSharedData*)* @_ZL15ucnv_MBCSUnloadP20UConverterSharedData, void (%struct.UConverter*, %struct.UConverterLoadArgs*, i32*)* @_ZL13ucnv_MBCSOpenP10UConverterP18UConverterLoadArgsP10UErrorCode, void (%struct.UConverter*)* null, void (%struct.UConverter*, i32)* null, void (%struct.UConverterToUnicodeArgs*, i32*)* @ucnv_MBCSToUnicodeWithOffsets_69, void (%struct.UConverterToUnicodeArgs*, i32*)* @ucnv_MBCSToUnicodeWithOffsets_69, void (%struct.UConverterFromUnicodeArgs*, i32*)* @ucnv_MBCSFromUnicodeWithOffsets_69, void (%struct.UConverterFromUnicodeArgs*, i32*)* @ucnv_MBCSFromUnicodeWithOffsets_69, i32 (%struct.UConverterToUnicodeArgs*, i32*)* @_ZL21ucnv_MBCSGetNextUCharP23UConverterToUnicodeArgsP10UErrorCode, void (%struct.UConverter*, i8*, i32*)* @_ZL20ucnv_MBCSGetStartersPK10UConverterPaP10UErrorCode, i8* (%struct.UConverter*)* @_ZL16ucnv_MBCSGetNamePK10UConverter, void (%struct.UConverterFromUnicodeArgs*, i32, i32*)* @_ZL17ucnv_MBCSWriteSubP25UConverterFromUnicodeArgsiP10UErrorCode, %struct.UConverter* (%struct.UConverter*, i8*, i32*, i32*)* null, void (%struct.UConverter*, %struct.USetAdder*, i32, i32*)* @_ZL22ucnv_MBCSGetUnicodeSetPK10UConverterPK9USetAdder20UConverterUnicodeSetP10UErrorCode, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* null, void (%struct.UConverterFromUnicodeArgs*, %struct.UConverterToUnicodeArgs*, i32*)* @_ZL17ucnv_DBCSFromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCode }, align 8
@.str = private unnamed_addr constant [17 x i8] c" 000000000000\1000\00", align 1
@_ZL12utf8_offsets = internal unnamed_addr constant [5 x i32] [i32 0, i32 0, i32 12416, i32 925824, i32 63447168], align 16
@_ZZL17ucnv_SBCSFromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCodeE3nul = internal constant i16 0, align 2
@.str.1 = private unnamed_addr constant [17 x i8] c"\00\00\00\00\00\00\00\00\1E\0F\0F\0F\00\00\00\00\00", align 1
@_ZZL17ucnv_DBCSFromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCodeE3nul = internal constant i16 0, align 2
@.str.2 = private unnamed_addr constant [6 x i8] c"18030\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"gb18030\00", align 1
@.str.4 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"KEIS\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"keis\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"JEF\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"jef\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"JIPS\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"jips\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c",swaplfnl\00", align 1
@_ZL13gb18030Ranges = internal unnamed_addr constant [14 x [4 x i32]] [[4 x i32] [i32 65536, i32 1114111, i32 1876218, i32 2924793], [4 x i32] [i32 40870, i32 55295, i32 1706261, i32 1720686], [4 x i32] [i32 1106, i32 7742, i32 1688038, i32 1694674], [4 x i32] [i32 7744, i32 8207, i32 1694676, i32 1695139], [4 x i32] [i32 59493, i32 63787, i32 1720768, i32 1725062], [4 x i32] [i32 9795, i32 11904, i32 1696437, i32 1698546], [4 x i32] [i32 64042, i32 65071, i32 1725296, i32 1726325], [4 x i32] [i32 15585, i32 16469, i32 1701916, i32 1702800], [4 x i32] [i32 13851, i32 14615, i32 1700191, i32 1700955], [4 x i32] [i32 18872, i32 19574, i32 1705179, i32 1705881], [4 x i32] [i32 16736, i32 17206, i32 1703065, i32 1703535], [4 x i32] [i32 18318, i32 18758, i32 1704636, i32 1705076], [4 x i32] [i32 17623, i32 17995, i32 1703947, i32 1704319], [4 x i32] [i32 65510, i32 65535, i32 1726612, i32 1726637]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @ucnv_MBCSGetFilteredUnicodeSetForUnicode_69(%struct.UConverterSharedData*, %struct.USetAdder*, i32, i32, i32*) local_unnamed_addr #0 {
  %6 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 8
  %7 = load i16*, i16** %6, align 8
  %8 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 15
  %9 = load i8, i8* %8, align 1
  %10 = and i8 %9, 1
  %11 = icmp eq i8 %10, 0
  %12 = select i1 %11, i32 64, i32 1088
  %13 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 14
  %14 = load i8, i8* %13, align 4
  %15 = icmp eq i8 %14, 0
  %16 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 11
  br i1 %15, label %17, label %71

17:                                               ; preds = %5
  %18 = bitcast i8** %16 to i16**
  %19 = load i16*, i16** %18, align 8
  %20 = icmp eq i32 %2, 0
  %21 = select i1 %20, i32 3840, i32 2048
  %22 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 1
  %23 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 0
  br label %24

24:                                               ; preds = %17, %66
  %25 = phi i32 [ 0, %17 ], [ %67, %66 ]
  %26 = phi i16 [ 0, %17 ], [ %68, %66 ]
  %27 = zext i16 %26 to i64
  %28 = getelementptr inbounds i16, i16* %7, i64 %27
  %29 = load i16, i16* %28, align 2
  %30 = zext i16 %29 to i32
  %31 = icmp ult i32 %12, %30
  br i1 %31, label %32, label %64

32:                                               ; preds = %24
  %33 = zext i16 %29 to i64
  %34 = getelementptr inbounds i16, i16* %7, i64 %33
  br label %35

35:                                               ; preds = %60, %32
  %36 = phi i64 [ 0, %32 ], [ %62, %60 ]
  %37 = phi i32 [ %25, %32 ], [ %61, %60 ]
  %38 = getelementptr inbounds i16, i16* %34, i64 %36
  %39 = load i16, i16* %38, align 2
  %40 = icmp eq i16 %39, 0
  br i1 %40, label %58, label %41

41:                                               ; preds = %35
  %42 = zext i16 %39 to i64
  %43 = getelementptr inbounds i16, i16* %19, i64 %42
  br label %44

44:                                               ; preds = %54, %41
  %45 = phi i32 [ %37, %41 ], [ %55, %54 ]
  %46 = phi i16* [ %43, %41 ], [ %47, %54 ]
  %47 = getelementptr inbounds i16, i16* %46, i64 1
  %48 = load i16, i16* %46, align 2
  %49 = zext i16 %48 to i32
  %50 = icmp ugt i32 %21, %49
  br i1 %50, label %54, label %51

51:                                               ; preds = %44
  %52 = load void (%struct.USet*, i32)*, void (%struct.USet*, i32)** %22, align 8
  %53 = load %struct.USet*, %struct.USet** %23, align 8
  tail call void %52(%struct.USet* %53, i32 %45) #11
  br label %54

54:                                               ; preds = %44, %51
  %55 = add nsw i32 %45, 1
  %56 = and i32 %55, 15
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %60, label %44

58:                                               ; preds = %35
  %59 = add nsw i32 %37, 16
  br label %60

60:                                               ; preds = %54, %58
  %61 = phi i32 [ %59, %58 ], [ %55, %54 ]
  %62 = add nuw nsw i64 %36, 1
  %63 = icmp eq i64 %62, 64
  br i1 %63, label %66, label %35

64:                                               ; preds = %24
  %65 = add nsw i32 %25, 1024
  br label %66

66:                                               ; preds = %60, %64
  %67 = phi i32 [ %65, %64 ], [ %61, %60 ]
  %68 = add i16 %26, 1
  %69 = zext i16 %68 to i32
  %70 = icmp ugt i32 %12, %69
  br i1 %70, label %24, label %272

71:                                               ; preds = %5
  %72 = load i8*, i8** %16, align 8
  %73 = icmp eq i32 %2, 1
  switch i8 %14, label %75 [
    i8 2, label %76
    i8 9, label %76
    i8 3, label %74
  ]

74:                                               ; preds = %71
  br label %76

75:                                               ; preds = %71
  br label %76

76:                                               ; preds = %71, %71, %75, %74
  %77 = phi i32 [ 2, %75 ], [ 4, %74 ], [ 3, %71 ], [ 3, %71 ]
  %78 = lshr exact i32 %12, 1
  %79 = bitcast i16* %7 to i32*
  %80 = shl nuw nsw i32 %77, 4
  %81 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 1
  %82 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 0
  %83 = zext i32 %77 to i64
  br label %84

84:                                               ; preds = %76, %267
  %85 = phi i32 [ 0, %76 ], [ %268, %267 ]
  %86 = phi i16 [ 0, %76 ], [ %269, %267 ]
  %87 = zext i16 %86 to i64
  %88 = getelementptr inbounds i16, i16* %7, i64 %87
  %89 = load i16, i16* %88, align 2
  %90 = zext i16 %89 to i32
  %91 = icmp ult i32 %78, %90
  br i1 %91, label %92, label %265

92:                                               ; preds = %84
  %93 = zext i16 %89 to i64
  %94 = getelementptr inbounds i32, i32* %79, i64 %93
  br label %95

95:                                               ; preds = %261, %92
  %96 = phi i64 [ 0, %92 ], [ %263, %261 ]
  %97 = phi i32 [ %85, %92 ], [ %262, %261 ]
  %98 = getelementptr inbounds i32, i32* %94, i64 %96
  %99 = load i32, i32* %98, align 4
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %259, label %101

101:                                              ; preds = %95
  %102 = and i32 %99, 65535
  %103 = mul nuw nsw i32 %80, %102
  %104 = zext i32 %103 to i64
  %105 = getelementptr inbounds i8, i8* %72, i64 %104
  %106 = lshr i32 %99, 16
  switch i32 %3, label %258 [
    i32 0, label %107
    i32 1, label %147
    i32 2, label %167
    i32 3, label %187
    i32 4, label %208
    i32 5, label %233
  ]

107:                                              ; preds = %101, %141
  %108 = phi i32 [ %143, %141 ], [ %106, %101 ]
  %109 = phi i32 [ %144, %141 ], [ %97, %101 ]
  %110 = phi i8* [ %142, %141 ], [ %105, %101 ]
  %111 = and i32 %108, 1
  %112 = icmp eq i32 %111, 0
  br i1 %112, label %117, label %113

113:                                              ; preds = %107
  %114 = load void (%struct.USet*, i32)*, void (%struct.USet*, i32)** %81, align 8
  %115 = load %struct.USet*, %struct.USet** %82, align 8
  tail call void %114(%struct.USet* %115, i32 %109) #11
  %116 = getelementptr inbounds i8, i8* %110, i64 %83
  br label %141

117:                                              ; preds = %107
  br i1 %73, label %118, label %141

118:                                              ; preds = %117
  switch i32 %77, label %141 [
    i32 4, label %119
    i32 3, label %122
    i32 2, label %128
  ]

119:                                              ; preds = %118
  %120 = getelementptr inbounds i8, i8* %110, i64 1
  %121 = load i8, i8* %110, align 1
  br label %122

122:                                              ; preds = %118, %119
  %123 = phi i8* [ %110, %118 ], [ %120, %119 ]
  %124 = phi i8 [ 0, %118 ], [ %121, %119 ]
  %125 = getelementptr inbounds i8, i8* %123, i64 1
  %126 = load i8, i8* %123, align 1
  %127 = or i8 %126, %124
  br label %128

128:                                              ; preds = %122, %118
  %129 = phi i8* [ %110, %118 ], [ %125, %122 ]
  %130 = phi i8 [ 0, %118 ], [ %127, %122 ]
  %131 = load i8, i8* %129, align 1
  %132 = getelementptr inbounds i8, i8* %129, i64 1
  %133 = load i8, i8* %132, align 1
  %134 = or i8 %131, %130
  %135 = or i8 %134, %133
  %136 = getelementptr inbounds i8, i8* %129, i64 2
  %137 = icmp eq i8 %135, 0
  br i1 %137, label %141, label %138

138:                                              ; preds = %128
  %139 = load void (%struct.USet*, i32)*, void (%struct.USet*, i32)** %81, align 8
  %140 = load %struct.USet*, %struct.USet** %82, align 8
  tail call void %139(%struct.USet* %140, i32 %109) #11
  br label %141

141:                                              ; preds = %118, %138, %128, %117, %113
  %142 = phi i8* [ %116, %113 ], [ %110, %117 ], [ %136, %128 ], [ %136, %138 ], [ %110, %118 ]
  %143 = lshr i32 %108, 1
  %144 = add nsw i32 %109, 1
  %145 = and i32 %144, 15
  %146 = icmp eq i32 %145, 0
  br i1 %146, label %261, label %107

147:                                              ; preds = %101, %161
  %148 = phi i32 [ %162, %161 ], [ %106, %101 ]
  %149 = phi i32 [ %164, %161 ], [ %97, %101 ]
  %150 = phi i8* [ %163, %161 ], [ %105, %101 ]
  %151 = and i32 %148, 1
  %152 = icmp ne i32 %151, 0
  %153 = or i1 %73, %152
  br i1 %153, label %154, label %161

154:                                              ; preds = %147
  %155 = bitcast i8* %150 to i16*
  %156 = load i16, i16* %155, align 2
  %157 = icmp ugt i16 %156, 255
  br i1 %157, label %158, label %161

158:                                              ; preds = %154
  %159 = load void (%struct.USet*, i32)*, void (%struct.USet*, i32)** %81, align 8
  %160 = load %struct.USet*, %struct.USet** %82, align 8
  tail call void %159(%struct.USet* %160, i32 %149) #11
  br label %161

161:                                              ; preds = %147, %158, %154
  %162 = lshr i32 %148, 1
  %163 = getelementptr inbounds i8, i8* %150, i64 2
  %164 = add nsw i32 %149, 1
  %165 = and i32 %164, 15
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %261, label %147

167:                                              ; preds = %101, %181
  %168 = phi i32 [ %182, %181 ], [ %106, %101 ]
  %169 = phi i32 [ %184, %181 ], [ %97, %101 ]
  %170 = phi i8* [ %183, %181 ], [ %105, %101 ]
  %171 = and i32 %168, 1
  %172 = icmp ne i32 %171, 0
  %173 = or i1 %73, %172
  br i1 %173, label %174, label %181

174:                                              ; preds = %167
  %175 = load i8, i8* %170, align 1
  %176 = add i8 %175, 127
  %177 = icmp ult i8 %176, 2
  br i1 %177, label %178, label %181

178:                                              ; preds = %174
  %179 = load void (%struct.USet*, i32)*, void (%struct.USet*, i32)** %81, align 8
  %180 = load %struct.USet*, %struct.USet** %82, align 8
  tail call void %179(%struct.USet* %180, i32 %169) #11
  br label %181

181:                                              ; preds = %174, %167, %178
  %182 = lshr i32 %168, 1
  %183 = getelementptr inbounds i8, i8* %170, i64 3
  %184 = add nsw i32 %169, 1
  %185 = and i32 %184, 15
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %261, label %167

187:                                              ; preds = %101, %202
  %188 = phi i32 [ %203, %202 ], [ %106, %101 ]
  %189 = phi i32 [ %205, %202 ], [ %97, %101 ]
  %190 = phi i8* [ %204, %202 ], [ %105, %101 ]
  %191 = and i32 %188, 1
  %192 = icmp ne i32 %191, 0
  %193 = or i1 %73, %192
  br i1 %193, label %194, label %202

194:                                              ; preds = %187
  %195 = bitcast i8* %190 to i16*
  %196 = load i16, i16* %195, align 2
  %197 = add i16 %196, 32448
  %198 = icmp ult i16 %197, 28349
  br i1 %198, label %199, label %202

199:                                              ; preds = %194
  %200 = load void (%struct.USet*, i32)*, void (%struct.USet*, i32)** %81, align 8
  %201 = load %struct.USet*, %struct.USet** %82, align 8
  tail call void %200(%struct.USet* %201, i32 %189) #11
  br label %202

202:                                              ; preds = %187, %199, %194
  %203 = lshr i32 %188, 1
  %204 = getelementptr inbounds i8, i8* %190, i64 2
  %205 = add nsw i32 %189, 1
  %206 = and i32 %205, 15
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %261, label %187

208:                                              ; preds = %101, %227
  %209 = phi i32 [ %228, %227 ], [ %106, %101 ]
  %210 = phi i32 [ %230, %227 ], [ %97, %101 ]
  %211 = phi i8* [ %229, %227 ], [ %105, %101 ]
  %212 = and i32 %209, 1
  %213 = icmp ne i32 %212, 0
  %214 = or i1 %73, %213
  br i1 %214, label %215, label %227

215:                                              ; preds = %208
  %216 = bitcast i8* %211 to i16*
  %217 = load i16, i16* %216, align 2
  %218 = add i16 %217, 24159
  %219 = icmp ult i16 %218, 23902
  br i1 %219, label %220, label %227

220:                                              ; preds = %215
  %221 = add nuw nsw i16 %217, 95
  %222 = and i16 %221, 254
  %223 = icmp ult i16 %222, 94
  br i1 %223, label %224, label %227

224:                                              ; preds = %220
  %225 = load void (%struct.USet*, i32)*, void (%struct.USet*, i32)** %81, align 8
  %226 = load %struct.USet*, %struct.USet** %82, align 8
  tail call void %225(%struct.USet* %226, i32 %210) #11
  br label %227

227:                                              ; preds = %208, %224, %220, %215
  %228 = lshr i32 %209, 1
  %229 = getelementptr inbounds i8, i8* %211, i64 2
  %230 = add nsw i32 %210, 1
  %231 = and i32 %230, 15
  %232 = icmp eq i32 %231, 0
  br i1 %232, label %261, label %208

233:                                              ; preds = %101, %252
  %234 = phi i32 [ %253, %252 ], [ %106, %101 ]
  %235 = phi i32 [ %255, %252 ], [ %97, %101 ]
  %236 = phi i8* [ %254, %252 ], [ %105, %101 ]
  %237 = and i32 %234, 1
  %238 = icmp ne i32 %237, 0
  %239 = or i1 %73, %238
  br i1 %239, label %240, label %252

240:                                              ; preds = %233
  %241 = bitcast i8* %236 to i16*
  %242 = load i16, i16* %241, align 2
  %243 = add i16 %242, 24159
  %244 = icmp ult i16 %243, 23646
  br i1 %244, label %245, label %252

245:                                              ; preds = %240
  %246 = add nuw nsw i16 %242, 95
  %247 = and i16 %246, 254
  %248 = icmp ult i16 %247, 94
  br i1 %248, label %249, label %252

249:                                              ; preds = %245
  %250 = load void (%struct.USet*, i32)*, void (%struct.USet*, i32)** %81, align 8
  %251 = load %struct.USet*, %struct.USet** %82, align 8
  tail call void %250(%struct.USet* %251, i32 %235) #11
  br label %252

252:                                              ; preds = %233, %249, %245, %240
  %253 = lshr i32 %234, 1
  %254 = getelementptr inbounds i8, i8* %236, i64 2
  %255 = add nsw i32 %235, 1
  %256 = and i32 %255, 15
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %261, label %233

258:                                              ; preds = %101
  store i32 5, i32* %4, align 4
  br label %273

259:                                              ; preds = %95
  %260 = add nsw i32 %97, 16
  br label %261

261:                                              ; preds = %252, %227, %202, %181, %161, %141, %259
  %262 = phi i32 [ %260, %259 ], [ %144, %141 ], [ %164, %161 ], [ %184, %181 ], [ %205, %202 ], [ %230, %227 ], [ %255, %252 ]
  %263 = add nuw nsw i64 %96, 1
  %264 = icmp eq i64 %263, 64
  br i1 %264, label %267, label %95

265:                                              ; preds = %84
  %266 = add nsw i32 %85, 1024
  br label %267

267:                                              ; preds = %261, %265
  %268 = phi i32 [ %266, %265 ], [ %262, %261 ]
  %269 = add i16 %86, 1
  %270 = zext i16 %269 to i32
  %271 = icmp ugt i32 %12, %270
  br i1 %271, label %84, label %272

272:                                              ; preds = %267, %66
  tail call void @ucnv_extGetUnicodeSet_69(%struct.UConverterSharedData* %0, %struct.USetAdder* %1, i32 %2, i32 %3, i32* %4) #11
  br label %273

273:                                              ; preds = %258, %272
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @ucnv_extGetUnicodeSet_69(%struct.UConverterSharedData*, %struct.USetAdder*, i32, i32, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @ucnv_MBCSGetUnicodeSetForUnicode_69(%struct.UConverterSharedData*, %struct.USetAdder*, i32, i32*) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 14
  %6 = load i8, i8* %5, align 4
  %7 = icmp eq i8 %6, -37
  %8 = zext i1 %7 to i32
  tail call void @ucnv_MBCSGetFilteredUnicodeSetForUnicode_69(%struct.UConverterSharedData* %0, %struct.USetAdder* %1, i32 %2, i32 %8, i32* %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @ucnv_MBCSToUnicodeWithOffsets_69(%struct.UConverterToUnicodeArgs*, i32*) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i16*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i16*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i16*, align 8
  %11 = alloca i32*, align 8
  %12 = bitcast i8** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #11
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %9, align 8
  %13 = bitcast i16** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #11
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %10, align 8
  %14 = bitcast i32** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #11
  store i32* inttoptr (i64 -6148914691236517206 to i32*), i32** %11, align 8
  %15 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 2
  %16 = load %struct.UConverter*, %struct.UConverter** %15, align 8
  %17 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 35
  %18 = load i8, i8* %17, align 2
  %19 = icmp sgt i8 %18, 0
  br i1 %19, label %20, label %26

20:                                               ; preds = %2
  tail call void @ucnv_extContinueMatchToU_69(%struct.UConverter* %16, %struct.UConverterToUnicodeArgs* %0, i32 -1, i32* %1) #11
  %21 = load i32, i32* %1, align 4
  %22 = icmp slt i32 %21, 1
  br i1 %22, label %23, label %1269

23:                                               ; preds = %20
  %24 = load i8, i8* %17, align 2
  %25 = icmp slt i8 %24, 0
  br i1 %25, label %1269, label %26

26:                                               ; preds = %23, %2
  %27 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 6
  %28 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %27, align 8
  %29 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %28, i64 0, i32 8, i32 0
  %30 = load i8, i8* %29, align 8
  %31 = icmp eq i8 %30, 1
  br i1 %31, label %32, label %680

32:                                               ; preds = %26
  %33 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %28, i64 0, i32 8, i32 15
  %34 = load i8, i8* %33, align 1
  %35 = and i8 %34, 1
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %528

37:                                               ; preds = %32
  %38 = bitcast i8** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #11
  %39 = bitcast i16** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #11
  %40 = bitcast i32** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #11
  %41 = load %struct.UConverter*, %struct.UConverter** %15, align 8
  %42 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 3
  %43 = bitcast i8** %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = bitcast i8** %6 to i64*
  store i64 %44, i64* %45, align 8
  %46 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 4
  %47 = load i8*, i8** %46, align 8
  %48 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 5
  %49 = bitcast i16** %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = bitcast i16** %7 to i64*
  store i64 %50, i64* %51, align 8
  %52 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 6
  %53 = bitcast i16** %52 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = sub i64 %54, %50
  %56 = lshr exact i64 %55, 1
  %57 = trunc i64 %56 to i32
  %58 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 7
  %59 = bitcast i32** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = bitcast i32** %8 to i64*
  store i64 %60, i64* %61, align 8
  %62 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %41, i64 0, i32 7
  %63 = load i32, i32* %62, align 8
  %64 = and i32 %63, 16
  %65 = icmp eq i32 %64, 0
  %66 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %41, i64 0, i32 6
  %67 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %66, align 8
  %68 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %67, i64 0, i32 8, i32 5
  %69 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %67, i64 0, i32 8, i32 4
  %70 = select i1 %65, [256 x i32]** %69, [256 x i32]** %68
  %71 = load [256 x i32]*, [256 x i32]** %70, align 8
  %72 = inttoptr i64 %44 to i8*
  %73 = ptrtoint i8* %47 to i64
  %74 = sub i64 %73, %44
  %75 = trunc i64 %74 to i32
  %76 = icmp slt i32 %75, %57
  %77 = select i1 %76, i32 %75, i32 %57
  %78 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %41, i64 0, i32 13, i64 0
  %79 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 1
  %80 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %41, i64 0, i32 12
  br label %81

81:                                               ; preds = %448, %37
  %82 = phi i64 [ %50, %37 ], [ %451, %448 ]
  %83 = phi i8* [ %72, %37 ], [ %449, %448 ]
  %84 = phi i8* [ %72, %37 ], [ %425, %448 ]
  %85 = phi i32 [ %77, %37 ], [ %458, %448 ]
  %86 = phi i32 [ 0, %37 ], [ %445, %448 ]
  %87 = icmp sgt i32 %85, 15
  br i1 %87, label %88, label %330

88:                                               ; preds = %81
  %89 = inttoptr i64 %82 to i16*
  %90 = lshr i32 %85, 4
  br label %91

91:                                               ; preds = %261, %88
  %92 = phi i16* [ %89, %88 ], [ %263, %261 ]
  %93 = phi i8* [ %83, %88 ], [ %262, %261 ]
  %94 = phi i32 [ %90, %88 ], [ %259, %261 ]
  %95 = getelementptr inbounds i8, i8* %93, i64 1
  store i8* %95, i8** %6, align 8
  %96 = load i8, i8* %93, align 1
  %97 = zext i8 %96 to i64
  %98 = getelementptr inbounds [256 x i32], [256 x i32]* %71, i64 0, i64 %97
  %99 = load i32, i32* %98, align 4
  %100 = trunc i32 %99 to i16
  %101 = getelementptr inbounds i16, i16* %92, i64 1
  store i16* %101, i16** %7, align 8
  store i16 %100, i16* %92, align 2
  %102 = load i8*, i8** %6, align 8
  %103 = getelementptr inbounds i8, i8* %102, i64 1
  store i8* %103, i8** %6, align 8
  %104 = load i8, i8* %102, align 1
  %105 = zext i8 %104 to i64
  %106 = getelementptr inbounds [256 x i32], [256 x i32]* %71, i64 0, i64 %105
  %107 = load i32, i32* %106, align 4
  %108 = or i32 %107, %99
  %109 = trunc i32 %107 to i16
  %110 = load i16*, i16** %7, align 8
  %111 = getelementptr inbounds i16, i16* %110, i64 1
  store i16* %111, i16** %7, align 8
  store i16 %109, i16* %110, align 2
  %112 = load i8*, i8** %6, align 8
  %113 = getelementptr inbounds i8, i8* %112, i64 1
  store i8* %113, i8** %6, align 8
  %114 = load i8, i8* %112, align 1
  %115 = zext i8 %114 to i64
  %116 = getelementptr inbounds [256 x i32], [256 x i32]* %71, i64 0, i64 %115
  %117 = load i32, i32* %116, align 4
  %118 = or i32 %108, %117
  %119 = trunc i32 %117 to i16
  %120 = load i16*, i16** %7, align 8
  %121 = getelementptr inbounds i16, i16* %120, i64 1
  store i16* %121, i16** %7, align 8
  store i16 %119, i16* %120, align 2
  %122 = load i8*, i8** %6, align 8
  %123 = getelementptr inbounds i8, i8* %122, i64 1
  store i8* %123, i8** %6, align 8
  %124 = load i8, i8* %122, align 1
  %125 = zext i8 %124 to i64
  %126 = getelementptr inbounds [256 x i32], [256 x i32]* %71, i64 0, i64 %125
  %127 = load i32, i32* %126, align 4
  %128 = or i32 %118, %127
  %129 = trunc i32 %127 to i16
  %130 = load i16*, i16** %7, align 8
  %131 = getelementptr inbounds i16, i16* %130, i64 1
  store i16* %131, i16** %7, align 8
  store i16 %129, i16* %130, align 2
  %132 = load i8*, i8** %6, align 8
  %133 = getelementptr inbounds i8, i8* %132, i64 1
  store i8* %133, i8** %6, align 8
  %134 = load i8, i8* %132, align 1
  %135 = zext i8 %134 to i64
  %136 = getelementptr inbounds [256 x i32], [256 x i32]* %71, i64 0, i64 %135
  %137 = load i32, i32* %136, align 4
  %138 = or i32 %128, %137
  %139 = trunc i32 %137 to i16
  %140 = load i16*, i16** %7, align 8
  %141 = getelementptr inbounds i16, i16* %140, i64 1
  store i16* %141, i16** %7, align 8
  store i16 %139, i16* %140, align 2
  %142 = load i8*, i8** %6, align 8
  %143 = getelementptr inbounds i8, i8* %142, i64 1
  store i8* %143, i8** %6, align 8
  %144 = load i8, i8* %142, align 1
  %145 = zext i8 %144 to i64
  %146 = getelementptr inbounds [256 x i32], [256 x i32]* %71, i64 0, i64 %145
  %147 = load i32, i32* %146, align 4
  %148 = or i32 %138, %147
  %149 = trunc i32 %147 to i16
  %150 = load i16*, i16** %7, align 8
  %151 = getelementptr inbounds i16, i16* %150, i64 1
  store i16* %151, i16** %7, align 8
  store i16 %149, i16* %150, align 2
  %152 = load i8*, i8** %6, align 8
  %153 = getelementptr inbounds i8, i8* %152, i64 1
  store i8* %153, i8** %6, align 8
  %154 = load i8, i8* %152, align 1
  %155 = zext i8 %154 to i64
  %156 = getelementptr inbounds [256 x i32], [256 x i32]* %71, i64 0, i64 %155
  %157 = load i32, i32* %156, align 4
  %158 = or i32 %148, %157
  %159 = trunc i32 %157 to i16
  %160 = load i16*, i16** %7, align 8
  %161 = getelementptr inbounds i16, i16* %160, i64 1
  store i16* %161, i16** %7, align 8
  store i16 %159, i16* %160, align 2
  %162 = load i8*, i8** %6, align 8
  %163 = getelementptr inbounds i8, i8* %162, i64 1
  store i8* %163, i8** %6, align 8
  %164 = load i8, i8* %162, align 1
  %165 = zext i8 %164 to i64
  %166 = getelementptr inbounds [256 x i32], [256 x i32]* %71, i64 0, i64 %165
  %167 = load i32, i32* %166, align 4
  %168 = or i32 %158, %167
  %169 = trunc i32 %167 to i16
  %170 = load i16*, i16** %7, align 8
  %171 = getelementptr inbounds i16, i16* %170, i64 1
  store i16* %171, i16** %7, align 8
  store i16 %169, i16* %170, align 2
  %172 = load i8*, i8** %6, align 8
  %173 = getelementptr inbounds i8, i8* %172, i64 1
  store i8* %173, i8** %6, align 8
  %174 = load i8, i8* %172, align 1
  %175 = zext i8 %174 to i64
  %176 = getelementptr inbounds [256 x i32], [256 x i32]* %71, i64 0, i64 %175
  %177 = load i32, i32* %176, align 4
  %178 = or i32 %168, %177
  %179 = trunc i32 %177 to i16
  %180 = load i16*, i16** %7, align 8
  %181 = getelementptr inbounds i16, i16* %180, i64 1
  store i16* %181, i16** %7, align 8
  store i16 %179, i16* %180, align 2
  %182 = load i8*, i8** %6, align 8
  %183 = getelementptr inbounds i8, i8* %182, i64 1
  store i8* %183, i8** %6, align 8
  %184 = load i8, i8* %182, align 1
  %185 = zext i8 %184 to i64
  %186 = getelementptr inbounds [256 x i32], [256 x i32]* %71, i64 0, i64 %185
  %187 = load i32, i32* %186, align 4
  %188 = or i32 %178, %187
  %189 = trunc i32 %187 to i16
  %190 = load i16*, i16** %7, align 8
  %191 = getelementptr inbounds i16, i16* %190, i64 1
  store i16* %191, i16** %7, align 8
  store i16 %189, i16* %190, align 2
  %192 = load i8*, i8** %6, align 8
  %193 = getelementptr inbounds i8, i8* %192, i64 1
  store i8* %193, i8** %6, align 8
  %194 = load i8, i8* %192, align 1
  %195 = zext i8 %194 to i64
  %196 = getelementptr inbounds [256 x i32], [256 x i32]* %71, i64 0, i64 %195
  %197 = load i32, i32* %196, align 4
  %198 = or i32 %188, %197
  %199 = trunc i32 %197 to i16
  %200 = load i16*, i16** %7, align 8
  %201 = getelementptr inbounds i16, i16* %200, i64 1
  store i16* %201, i16** %7, align 8
  store i16 %199, i16* %200, align 2
  %202 = load i8*, i8** %6, align 8
  %203 = getelementptr inbounds i8, i8* %202, i64 1
  store i8* %203, i8** %6, align 8
  %204 = load i8, i8* %202, align 1
  %205 = zext i8 %204 to i64
  %206 = getelementptr inbounds [256 x i32], [256 x i32]* %71, i64 0, i64 %205
  %207 = load i32, i32* %206, align 4
  %208 = or i32 %198, %207
  %209 = trunc i32 %207 to i16
  %210 = load i16*, i16** %7, align 8
  %211 = getelementptr inbounds i16, i16* %210, i64 1
  store i16* %211, i16** %7, align 8
  store i16 %209, i16* %210, align 2
  %212 = load i8*, i8** %6, align 8
  %213 = getelementptr inbounds i8, i8* %212, i64 1
  store i8* %213, i8** %6, align 8
  %214 = load i8, i8* %212, align 1
  %215 = zext i8 %214 to i64
  %216 = getelementptr inbounds [256 x i32], [256 x i32]* %71, i64 0, i64 %215
  %217 = load i32, i32* %216, align 4
  %218 = or i32 %208, %217
  %219 = trunc i32 %217 to i16
  %220 = load i16*, i16** %7, align 8
  %221 = getelementptr inbounds i16, i16* %220, i64 1
  store i16* %221, i16** %7, align 8
  store i16 %219, i16* %220, align 2
  %222 = load i8*, i8** %6, align 8
  %223 = getelementptr inbounds i8, i8* %222, i64 1
  store i8* %223, i8** %6, align 8
  %224 = load i8, i8* %222, align 1
  %225 = zext i8 %224 to i64
  %226 = getelementptr inbounds [256 x i32], [256 x i32]* %71, i64 0, i64 %225
  %227 = load i32, i32* %226, align 4
  %228 = or i32 %218, %227
  %229 = trunc i32 %227 to i16
  %230 = load i16*, i16** %7, align 8
  %231 = getelementptr inbounds i16, i16* %230, i64 1
  store i16* %231, i16** %7, align 8
  store i16 %229, i16* %230, align 2
  %232 = load i8*, i8** %6, align 8
  %233 = getelementptr inbounds i8, i8* %232, i64 1
  store i8* %233, i8** %6, align 8
  %234 = load i8, i8* %232, align 1
  %235 = zext i8 %234 to i64
  %236 = getelementptr inbounds [256 x i32], [256 x i32]* %71, i64 0, i64 %235
  %237 = load i32, i32* %236, align 4
  %238 = or i32 %228, %237
  %239 = trunc i32 %237 to i16
  %240 = load i16*, i16** %7, align 8
  %241 = getelementptr inbounds i16, i16* %240, i64 1
  store i16* %241, i16** %7, align 8
  store i16 %239, i16* %240, align 2
  %242 = load i8*, i8** %6, align 8
  %243 = getelementptr inbounds i8, i8* %242, i64 1
  store i8* %243, i8** %6, align 8
  %244 = load i8, i8* %242, align 1
  %245 = zext i8 %244 to i64
  %246 = getelementptr inbounds [256 x i32], [256 x i32]* %71, i64 0, i64 %245
  %247 = load i32, i32* %246, align 4
  %248 = or i32 %238, %247
  %249 = trunc i32 %247 to i16
  %250 = load i16*, i16** %7, align 8
  %251 = getelementptr inbounds i16, i16* %250, i64 1
  store i16* %251, i16** %7, align 8
  store i16 %249, i16* %250, align 2
  %252 = icmp slt i32 %248, -2146435072
  br i1 %252, label %258, label %253

253:                                              ; preds = %91
  %254 = load i8*, i8** %6, align 8
  %255 = getelementptr inbounds i8, i8* %254, i64 -16
  store i8* %255, i8** %6, align 8
  %256 = load i16*, i16** %7, align 8
  %257 = getelementptr inbounds i16, i16* %256, i64 -16
  store i16* %257, i16** %7, align 8
  br label %264

258:                                              ; preds = %91
  %259 = add nsw i32 %94, -1
  %260 = icmp sgt i32 %259, 0
  br i1 %260, label %261, label %264

261:                                              ; preds = %258
  %262 = load i8*, i8** %6, align 8
  %263 = load i16*, i16** %7, align 8
  br label %91

264:                                              ; preds = %258, %253
  %265 = phi i32 [ %94, %253 ], [ %259, %258 ]
  %266 = sub nsw i32 %90, %265
  %267 = shl nsw i32 %266, 4
  %268 = sub nsw i32 %85, %267
  %269 = load i32*, i32** %8, align 8
  %270 = icmp eq i32* %269, null
  br i1 %270, label %330, label %271

271:                                              ; preds = %264
  %272 = sext i32 %267 to i64
  %273 = getelementptr inbounds i8, i8* %84, i64 %272
  %274 = icmp sgt i32 %266, 0
  br i1 %274, label %275, label %330

275:                                              ; preds = %271, %328
  %276 = phi i32* [ %329, %328 ], [ %269, %271 ]
  %277 = phi i32 [ %326, %328 ], [ %266, %271 ]
  %278 = phi i32 [ %323, %328 ], [ %86, %271 ]
  %279 = add nsw i32 %278, 1
  %280 = getelementptr inbounds i32, i32* %276, i64 1
  store i32* %280, i32** %8, align 8
  store i32 %278, i32* %276, align 4
  %281 = add nsw i32 %278, 2
  %282 = load i32*, i32** %8, align 8
  %283 = getelementptr inbounds i32, i32* %282, i64 1
  store i32* %283, i32** %8, align 8
  store i32 %279, i32* %282, align 4
  %284 = add nsw i32 %278, 3
  %285 = load i32*, i32** %8, align 8
  %286 = getelementptr inbounds i32, i32* %285, i64 1
  store i32* %286, i32** %8, align 8
  store i32 %281, i32* %285, align 4
  %287 = add nsw i32 %278, 4
  %288 = load i32*, i32** %8, align 8
  %289 = getelementptr inbounds i32, i32* %288, i64 1
  store i32* %289, i32** %8, align 8
  store i32 %284, i32* %288, align 4
  %290 = add nsw i32 %278, 5
  %291 = load i32*, i32** %8, align 8
  %292 = getelementptr inbounds i32, i32* %291, i64 1
  store i32* %292, i32** %8, align 8
  store i32 %287, i32* %291, align 4
  %293 = add nsw i32 %278, 6
  %294 = load i32*, i32** %8, align 8
  %295 = getelementptr inbounds i32, i32* %294, i64 1
  store i32* %295, i32** %8, align 8
  store i32 %290, i32* %294, align 4
  %296 = add nsw i32 %278, 7
  %297 = load i32*, i32** %8, align 8
  %298 = getelementptr inbounds i32, i32* %297, i64 1
  store i32* %298, i32** %8, align 8
  store i32 %293, i32* %297, align 4
  %299 = add nsw i32 %278, 8
  %300 = load i32*, i32** %8, align 8
  %301 = getelementptr inbounds i32, i32* %300, i64 1
  store i32* %301, i32** %8, align 8
  store i32 %296, i32* %300, align 4
  %302 = add nsw i32 %278, 9
  %303 = load i32*, i32** %8, align 8
  %304 = getelementptr inbounds i32, i32* %303, i64 1
  store i32* %304, i32** %8, align 8
  store i32 %299, i32* %303, align 4
  %305 = add nsw i32 %278, 10
  %306 = load i32*, i32** %8, align 8
  %307 = getelementptr inbounds i32, i32* %306, i64 1
  store i32* %307, i32** %8, align 8
  store i32 %302, i32* %306, align 4
  %308 = add nsw i32 %278, 11
  %309 = load i32*, i32** %8, align 8
  %310 = getelementptr inbounds i32, i32* %309, i64 1
  store i32* %310, i32** %8, align 8
  store i32 %305, i32* %309, align 4
  %311 = add nsw i32 %278, 12
  %312 = load i32*, i32** %8, align 8
  %313 = getelementptr inbounds i32, i32* %312, i64 1
  store i32* %313, i32** %8, align 8
  store i32 %308, i32* %312, align 4
  %314 = add nsw i32 %278, 13
  %315 = load i32*, i32** %8, align 8
  %316 = getelementptr inbounds i32, i32* %315, i64 1
  store i32* %316, i32** %8, align 8
  store i32 %311, i32* %315, align 4
  %317 = add nsw i32 %278, 14
  %318 = load i32*, i32** %8, align 8
  %319 = getelementptr inbounds i32, i32* %318, i64 1
  store i32* %319, i32** %8, align 8
  store i32 %314, i32* %318, align 4
  %320 = add nsw i32 %278, 15
  %321 = load i32*, i32** %8, align 8
  %322 = getelementptr inbounds i32, i32* %321, i64 1
  store i32* %322, i32** %8, align 8
  store i32 %317, i32* %321, align 4
  %323 = add nsw i32 %278, 16
  %324 = load i32*, i32** %8, align 8
  %325 = getelementptr inbounds i32, i32* %324, i64 1
  store i32* %325, i32** %8, align 8
  store i32 %320, i32* %324, align 4
  %326 = add nsw i32 %277, -1
  %327 = icmp sgt i32 %326, 0
  br i1 %327, label %328, label %330

328:                                              ; preds = %275
  %329 = load i32*, i32** %8, align 8
  br label %275

330:                                              ; preds = %275, %271, %264, %81
  %331 = phi i8* [ %84, %81 ], [ %84, %264 ], [ %273, %271 ], [ %273, %275 ]
  %332 = phi i32 [ %85, %81 ], [ %268, %264 ], [ %268, %271 ], [ %268, %275 ]
  %333 = phi i32 [ %86, %81 ], [ %86, %264 ], [ %86, %271 ], [ %323, %275 ]
  br label %334

334:                                              ; preds = %352, %330
  %335 = phi i32 [ %332, %330 ], [ %353, %352 ]
  %336 = icmp sgt i32 %335, 0
  br label %337

337:                                              ; preds = %354, %334
  %338 = load i8*, i8** %6, align 8
  %339 = icmp ult i8* %338, %47
  %340 = and i1 %336, %339
  br i1 %340, label %341, label %459

341:                                              ; preds = %337
  %342 = getelementptr inbounds i8, i8* %338, i64 1
  store i8* %342, i8** %6, align 8
  %343 = load i8, i8* %338, align 1
  %344 = zext i8 %343 to i64
  %345 = getelementptr inbounds [256 x i32], [256 x i32]* %71, i64 0, i64 %344
  %346 = load i32, i32* %345, align 4
  %347 = icmp slt i32 %346, -2146435072
  br i1 %347, label %348, label %354

348:                                              ; preds = %341
  %349 = trunc i32 %346 to i16
  %350 = load i16*, i16** %7, align 8
  %351 = getelementptr inbounds i16, i16* %350, i64 1
  store i16* %351, i16** %7, align 8
  store i16 %349, i16* %350, align 2
  br label %352

352:                                              ; preds = %357, %348
  %353 = add nsw i32 %335, -1
  br label %334

354:                                              ; preds = %341
  %355 = lshr i32 %346, 20
  %356 = and i32 %355, 15
  switch i32 %356, label %337 [
    i32 2, label %357
    i32 6, label %362
    i32 7, label %361
  ]

357:                                              ; preds = %354
  %358 = trunc i32 %346 to i16
  %359 = load i16*, i16** %7, align 8
  %360 = getelementptr inbounds i16, i16* %359, i64 1
  store i16* %360, i16** %7, align 8
  store i16 %358, i16* %359, align 2
  br label %352

361:                                              ; preds = %354
  store i32 12, i32* %1, align 4
  br label %362

362:                                              ; preds = %354, %361
  %363 = load i32*, i32** %8, align 8
  %364 = icmp eq i32* %363, null
  br i1 %364, label %418, label %365

365:                                              ; preds = %362
  %366 = getelementptr inbounds i8, i8* %338, i64 1
  %367 = ptrtoint i8* %366 to i64
  %368 = ptrtoint i8* %331 to i64
  %369 = sub i64 %367, %368
  %370 = trunc i64 %369 to i32
  %371 = icmp sgt i32 %370, 1
  br i1 %371, label %372, label %418

372:                                              ; preds = %365
  %373 = add nsw i32 %333, 1
  %374 = getelementptr inbounds i32, i32* %363, i64 1
  store i32* %374, i32** %8, align 8
  store i32 %333, i32* %363, align 4
  %375 = add nsw i32 %370, -2
  %376 = icmp sgt i32 %375, 0
  br i1 %376, label %377, label %418

377:                                              ; preds = %372
  %378 = trunc i64 %367 to i32
  %379 = add i32 %378, 2
  %380 = trunc i64 %368 to i32
  %381 = sub i32 %379, %380
  %382 = add i32 %378, -3
  %383 = sub i32 %382, %380
  %384 = and i32 %381, 3
  %385 = icmp eq i32 %384, 0
  br i1 %385, label %396, label %386

386:                                              ; preds = %377, %386
  %387 = phi i32 [ %393, %386 ], [ %375, %377 ]
  %388 = phi i32 [ %391, %386 ], [ %373, %377 ]
  %389 = phi i32 [ %394, %386 ], [ %384, %377 ]
  %390 = load i32*, i32** %8, align 8
  %391 = add nsw i32 %388, 1
  %392 = getelementptr inbounds i32, i32* %390, i64 1
  store i32* %392, i32** %8, align 8
  store i32 %388, i32* %390, align 4
  %393 = add nsw i32 %387, -1
  %394 = add i32 %389, -1
  %395 = icmp eq i32 %394, 0
  br i1 %395, label %396, label %386, !llvm.loop !2

396:                                              ; preds = %386, %377
  %397 = phi i32 [ %375, %377 ], [ %393, %386 ]
  %398 = phi i32 [ %373, %377 ], [ %391, %386 ]
  %399 = phi i32 [ undef, %377 ], [ %391, %386 ]
  %400 = icmp ult i32 %383, 3
  br i1 %400, label %418, label %401

401:                                              ; preds = %396, %401
  %402 = phi i32 [ %416, %401 ], [ %397, %396 ]
  %403 = phi i32 [ %414, %401 ], [ %398, %396 ]
  %404 = load i32*, i32** %8, align 8
  %405 = add nsw i32 %403, 1
  %406 = getelementptr inbounds i32, i32* %404, i64 1
  store i32* %406, i32** %8, align 8
  store i32 %403, i32* %404, align 4
  %407 = load i32*, i32** %8, align 8
  %408 = add nsw i32 %403, 2
  %409 = getelementptr inbounds i32, i32* %407, i64 1
  store i32* %409, i32** %8, align 8
  store i32 %405, i32* %407, align 4
  %410 = load i32*, i32** %8, align 8
  %411 = add nsw i32 %403, 3
  %412 = getelementptr inbounds i32, i32* %410, i64 1
  store i32* %412, i32** %8, align 8
  store i32 %408, i32* %410, align 4
  %413 = load i32*, i32** %8, align 8
  %414 = add nsw i32 %403, 4
  %415 = getelementptr inbounds i32, i32* %413, i64 1
  store i32* %415, i32** %8, align 8
  store i32 %411, i32* %413, align 4
  %416 = add nsw i32 %402, -4
  %417 = icmp sgt i32 %416, 0
  br i1 %417, label %401, label %418

418:                                              ; preds = %396, %401, %372, %365, %362
  %419 = phi i32 [ %333, %362 ], [ %333, %365 ], [ %373, %372 ], [ %399, %396 ], [ %414, %401 ]
  %420 = load i32, i32* %1, align 4
  %421 = icmp slt i32 %420, 1
  br i1 %421, label %424, label %422

422:                                              ; preds = %418
  %423 = load i64, i64* %45, align 8
  br label %470

424:                                              ; preds = %418
  %425 = load i8*, i8** %6, align 8
  %426 = getelementptr inbounds i8, i8* %425, i64 -1
  %427 = load i8, i8* %426, align 1
  store i8 %427, i8* %78, align 1
  %428 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %66, align 8
  %429 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %428, i64 0, i32 8, i32 22
  %430 = load i32*, i32** %429, align 8
  %431 = icmp eq i32* %430, null
  br i1 %431, label %437, label %432

432:                                              ; preds = %424
  %433 = load i8, i8* %79, align 2
  %434 = load i16*, i16** %52, align 8
  %435 = call signext i8 @ucnv_extInitialMatchToU_69(%struct.UConverter* %41, i32* nonnull %430, i32 1, i8** nonnull %6, i8* %47, i16** nonnull %7, i16* %434, i32** nonnull %8, i32 %419, i8 signext %433, i32* %1) #11
  %436 = icmp eq i8 %435, 0
  br i1 %436, label %437, label %438

437:                                              ; preds = %432, %424
  store i32 10, i32* %1, align 4
  br label %438

438:                                              ; preds = %437, %432
  %439 = phi i8 [ 1, %437 ], [ 0, %432 ]
  store i8 %439, i8* %80, align 8
  %440 = load i64, i64* %45, align 8
  %441 = ptrtoint i8* %425 to i64
  %442 = sub i64 %440, %441
  %443 = trunc i64 %442 to i32
  %444 = add i32 %419, 1
  %445 = add i32 %444, %443
  %446 = load i32, i32* %1, align 4
  %447 = icmp slt i32 %446, 1
  br i1 %447, label %448, label %470

448:                                              ; preds = %438
  %449 = inttoptr i64 %440 to i8*
  %450 = load i64, i64* %53, align 8
  %451 = load i64, i64* %51, align 8
  %452 = sub i64 %450, %451
  %453 = lshr exact i64 %452, 1
  %454 = trunc i64 %453 to i32
  %455 = sub i64 %73, %440
  %456 = trunc i64 %455 to i32
  %457 = icmp slt i32 %456, %454
  %458 = select i1 %457, i32 %456, i32 %454
  br label %81

459:                                              ; preds = %337
  %460 = load i32, i32* %1, align 4
  %461 = icmp slt i32 %460, 1
  %462 = icmp ult i8* %338, %47
  %463 = and i1 %461, %462
  %464 = ptrtoint i8* %338 to i64
  br i1 %463, label %465, label %470

465:                                              ; preds = %459
  %466 = load i16*, i16** %7, align 8
  %467 = load i16*, i16** %52, align 8
  %468 = icmp ult i16* %466, %467
  br i1 %468, label %470, label %469

469:                                              ; preds = %465
  store i32 15, i32* %1, align 4
  br label %470

470:                                              ; preds = %438, %422, %469, %465, %459
  %471 = phi i64 [ %464, %459 ], [ %464, %465 ], [ %464, %469 ], [ %423, %422 ], [ %440, %438 ]
  %472 = phi i32 [ %333, %459 ], [ %333, %465 ], [ %333, %469 ], [ %419, %422 ], [ %445, %438 ]
  %473 = phi i8* [ %331, %459 ], [ %331, %465 ], [ %331, %469 ], [ %331, %422 ], [ %425, %438 ]
  %474 = load i32*, i32** %8, align 8
  %475 = icmp eq i32* %474, null
  %476 = ptrtoint i32* %474 to i64
  br i1 %475, label %524, label %477

477:                                              ; preds = %470
  %478 = ptrtoint i8* %473 to i64
  %479 = sub i64 %471, %478
  %480 = icmp eq i64 %479, 0
  br i1 %480, label %524, label %481

481:                                              ; preds = %477
  %482 = getelementptr inbounds i32, i32* %474, i64 1
  store i32* %482, i32** %8, align 8
  store i32 %472, i32* %474, align 4
  %483 = add i64 %479, -1
  %484 = icmp eq i64 %483, 0
  br i1 %484, label %521, label %485

485:                                              ; preds = %481
  %486 = add i64 %471, -2
  %487 = sub i64 %486, %478
  %488 = and i64 %483, 3
  %489 = icmp eq i64 %488, 0
  br i1 %489, label %500, label %490

490:                                              ; preds = %485, %490
  %491 = phi i64 [ %497, %490 ], [ %483, %485 ]
  %492 = phi i32 [ %494, %490 ], [ %472, %485 ]
  %493 = phi i64 [ %498, %490 ], [ %488, %485 ]
  %494 = add nsw i32 %492, 1
  %495 = load i32*, i32** %8, align 8
  %496 = getelementptr inbounds i32, i32* %495, i64 1
  store i32* %496, i32** %8, align 8
  store i32 %494, i32* %495, align 4
  %497 = add i64 %491, -1
  %498 = add i64 %493, -1
  %499 = icmp eq i64 %498, 0
  br i1 %499, label %500, label %490, !llvm.loop !4

500:                                              ; preds = %490, %485
  %501 = phi i64 [ %483, %485 ], [ %497, %490 ]
  %502 = phi i32 [ %472, %485 ], [ %494, %490 ]
  %503 = icmp ult i64 %487, 3
  br i1 %503, label %521, label %504

504:                                              ; preds = %500, %504
  %505 = phi i64 [ %519, %504 ], [ %501, %500 ]
  %506 = phi i32 [ %516, %504 ], [ %502, %500 ]
  %507 = add nsw i32 %506, 1
  %508 = load i32*, i32** %8, align 8
  %509 = getelementptr inbounds i32, i32* %508, i64 1
  store i32* %509, i32** %8, align 8
  store i32 %507, i32* %508, align 4
  %510 = add nsw i32 %506, 2
  %511 = load i32*, i32** %8, align 8
  %512 = getelementptr inbounds i32, i32* %511, i64 1
  store i32* %512, i32** %8, align 8
  store i32 %510, i32* %511, align 4
  %513 = add nsw i32 %506, 3
  %514 = load i32*, i32** %8, align 8
  %515 = getelementptr inbounds i32, i32* %514, i64 1
  store i32* %515, i32** %8, align 8
  store i32 %513, i32* %514, align 4
  %516 = add nsw i32 %506, 4
  %517 = load i32*, i32** %8, align 8
  %518 = getelementptr inbounds i32, i32* %517, i64 1
  store i32* %518, i32** %8, align 8
  store i32 %516, i32* %517, align 4
  %519 = add i64 %505, -4
  %520 = icmp eq i64 %519, 0
  br i1 %520, label %521, label %504

521:                                              ; preds = %500, %504, %481
  %522 = load i64, i64* %45, align 8
  %523 = load i64, i64* %61, align 8
  br label %524

524:                                              ; preds = %470, %477, %521
  %525 = phi i64 [ %523, %521 ], [ %476, %477 ], [ %476, %470 ]
  %526 = phi i64 [ %522, %521 ], [ %471, %477 ], [ %471, %470 ]
  store i64 %526, i64* %43, align 8
  %527 = load i64, i64* %51, align 8
  store i64 %527, i64* %49, align 8
  store i64 %525, i64* %59, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #11
  br label %1269

528:                                              ; preds = %32
  %529 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %529) #11
  %530 = bitcast i16** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %530) #11
  %531 = bitcast i32** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %531) #11
  %532 = load %struct.UConverter*, %struct.UConverter** %15, align 8
  %533 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 3
  %534 = bitcast i8** %533 to i64*
  %535 = load i64, i64* %534, align 8
  %536 = bitcast i8** %3 to i64*
  store i64 %535, i64* %536, align 8
  %537 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 4
  %538 = load i8*, i8** %537, align 8
  %539 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 5
  %540 = bitcast i16** %539 to i64*
  %541 = load i64, i64* %540, align 8
  %542 = bitcast i16** %4 to i64*
  store i64 %541, i64* %542, align 8
  %543 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 6
  %544 = load i16*, i16** %543, align 8
  %545 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 7
  %546 = bitcast i32** %545 to i64*
  %547 = load i64, i64* %546, align 8
  %548 = bitcast i32** %5 to i64*
  store i64 %547, i64* %548, align 8
  %549 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %532, i64 0, i32 7
  %550 = load i32, i32* %549, align 8
  %551 = and i32 %550, 16
  %552 = icmp eq i32 %551, 0
  %553 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %532, i64 0, i32 6
  %554 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %553, align 8
  %555 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %554, i64 0, i32 8, i32 5
  %556 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %554, i64 0, i32 8, i32 4
  %557 = select i1 %552, [256 x i32]** %556, [256 x i32]** %555
  %558 = load [256 x i32]*, [256 x i32]** %557, align 8
  %559 = inttoptr i64 %535 to i8*
  %560 = icmp ugt i8* %538, %559
  br i1 %560, label %561, label %676

561:                                              ; preds = %528
  %562 = inttoptr i64 %541 to i16*
  %563 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %532, i64 0, i32 13, i64 0
  %564 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 1
  %565 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %532, i64 0, i32 12
  %566 = icmp ugt i16* %544, %562
  br i1 %566, label %573, label %570

567:                                              ; preds = %597
  %568 = ptrtoint i8* %595 to i64
  %569 = ptrtoint i16* %598 to i64
  br label %570

570:                                              ; preds = %567, %561
  %571 = phi i64 [ %569, %567 ], [ %541, %561 ]
  %572 = phi i64 [ %568, %567 ], [ %535, %561 ]
  store i32 15, i32* %1, align 4
  br label %676

573:                                              ; preds = %561, %597
  %574 = phi i32 [ %594, %597 ], [ 0, %561 ]
  %575 = phi i8* [ %595, %597 ], [ %559, %561 ]
  %576 = phi i16* [ %598, %597 ], [ %562, %561 ]
  %577 = getelementptr inbounds i8, i8* %575, i64 1
  store i8* %577, i8** %3, align 8
  %578 = load i8, i8* %575, align 1
  %579 = zext i8 %578 to i64
  %580 = getelementptr inbounds [256 x i32], [256 x i32]* %558, i64 0, i64 %579
  %581 = load i32, i32* %580, align 4
  %582 = icmp slt i32 %581, -2146435072
  %583 = ptrtoint i8* %577 to i64
  br i1 %582, label %584, label %600

584:                                              ; preds = %573
  %585 = trunc i32 %581 to i16
  %586 = getelementptr inbounds i16, i16* %576, i64 1
  store i16* %586, i16** %4, align 8
  store i16 %585, i16* %576, align 2
  %587 = load i32*, i32** %5, align 8
  %588 = icmp eq i32* %587, null
  br i1 %588, label %591, label %589

589:                                              ; preds = %584
  %590 = getelementptr inbounds i32, i32* %587, i64 1
  store i32* %590, i32** %5, align 8
  store i32 %574, i32* %587, align 4
  br label %591

591:                                              ; preds = %589, %584
  %592 = add nsw i32 %574, 1
  br label %593

593:                                              ; preds = %659, %643, %639, %630, %591
  %594 = phi i32 [ %592, %591 ], [ %631, %630 ], [ %640, %639 ], [ %666, %659 ], [ %644, %643 ]
  %595 = load i8*, i8** %3, align 8
  %596 = icmp ult i8* %595, %538
  br i1 %596, label %597, label %669

597:                                              ; preds = %593
  %598 = load i16*, i16** %4, align 8
  %599 = icmp ult i16* %598, %544
  br i1 %599, label %573, label %567

600:                                              ; preds = %573
  %601 = lshr i32 %581, 20
  %602 = and i32 %601, 15
  switch i32 %602, label %643 [
    i32 1, label %603
    i32 3, label %603
    i32 2, label %632
    i32 6, label %645
    i32 7, label %641
  ]

603:                                              ; preds = %600, %600
  %604 = lshr i32 %581, 10
  %605 = trunc i32 %604 to i16
  %606 = and i16 %605, 1023
  %607 = or i16 %606, -10240
  %608 = getelementptr inbounds i16, i16* %576, i64 1
  store i16* %608, i16** %4, align 8
  store i16 %607, i16* %576, align 2
  %609 = load i32*, i32** %5, align 8
  %610 = icmp eq i32* %609, null
  br i1 %610, label %613, label %611

611:                                              ; preds = %603
  %612 = getelementptr inbounds i32, i32* %609, i64 1
  store i32* %612, i32** %5, align 8
  store i32 %574, i32* %609, align 4
  br label %613

613:                                              ; preds = %611, %603
  %614 = trunc i32 %581 to i16
  %615 = and i16 %614, 1023
  %616 = or i16 %615, -9216
  %617 = load i16*, i16** %4, align 8
  %618 = icmp ult i16* %617, %544
  br i1 %618, label %619, label %625

619:                                              ; preds = %613
  %620 = getelementptr inbounds i16, i16* %617, i64 1
  store i16* %620, i16** %4, align 8
  store i16 %616, i16* %617, align 2
  %621 = load i32*, i32** %5, align 8
  %622 = icmp eq i32* %621, null
  br i1 %622, label %630, label %623

623:                                              ; preds = %619
  %624 = getelementptr inbounds i32, i32* %621, i64 1
  store i32* %624, i32** %5, align 8
  store i32 %574, i32* %621, align 4
  br label %630

625:                                              ; preds = %613
  %626 = ptrtoint i16* %617 to i64
  %627 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %532, i64 0, i32 30, i64 0
  store i16 %616, i16* %627, align 8
  %628 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %532, i64 0, i32 23
  store i8 1, i8* %628, align 1
  store i32 15, i32* %1, align 4
  %629 = load i64, i64* %536, align 8
  br label %676

630:                                              ; preds = %623, %619
  %631 = add nsw i32 %574, 1
  br label %593

632:                                              ; preds = %600
  %633 = trunc i32 %581 to i16
  %634 = getelementptr inbounds i16, i16* %576, i64 1
  store i16* %634, i16** %4, align 8
  store i16 %633, i16* %576, align 2
  %635 = load i32*, i32** %5, align 8
  %636 = icmp eq i32* %635, null
  br i1 %636, label %639, label %637

637:                                              ; preds = %632
  %638 = getelementptr inbounds i32, i32* %635, i64 1
  store i32* %638, i32** %5, align 8
  store i32 %574, i32* %635, align 4
  br label %639

639:                                              ; preds = %637, %632
  %640 = add nsw i32 %574, 1
  br label %593

641:                                              ; preds = %600
  %642 = ptrtoint i8* %577 to i64
  store i32 12, i32* %1, align 4
  br label %673

643:                                              ; preds = %600
  %644 = add nsw i32 %574, 1
  br label %593

645:                                              ; preds = %600
  %646 = load i32, i32* %1, align 4
  %647 = icmp slt i32 %646, 1
  br i1 %647, label %648, label %671

648:                                              ; preds = %645
  store i64 %583, i64* %534, align 8
  %649 = load i8, i8* %575, align 1
  store i8 %649, i8* %563, align 1
  %650 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %553, align 8
  %651 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %650, i64 0, i32 8, i32 22
  %652 = load i32*, i32** %651, align 8
  %653 = icmp eq i32* %652, null
  br i1 %653, label %658, label %654

654:                                              ; preds = %648
  %655 = load i8, i8* %564, align 2
  %656 = call signext i8 @ucnv_extInitialMatchToU_69(%struct.UConverter* %532, i32* nonnull %652, i32 1, i8** nonnull %3, i8* %538, i16** nonnull %4, i16* %544, i32** nonnull %5, i32 %574, i8 signext %655, i32* %1) #11
  %657 = icmp eq i8 %656, 0
  br i1 %657, label %658, label %659

658:                                              ; preds = %654, %648
  store i32 10, i32* %1, align 4
  br label %659

659:                                              ; preds = %658, %654
  %660 = phi i8 [ 1, %658 ], [ 0, %654 ]
  store i8 %660, i8* %565, align 8
  %661 = load i64, i64* %536, align 8
  %662 = load i64, i64* %534, align 8
  %663 = sub i64 %661, %662
  %664 = trunc i64 %663 to i32
  %665 = add i32 %574, 1
  %666 = add i32 %665, %664
  %667 = load i32, i32* %1, align 4
  %668 = icmp slt i32 %667, 1
  br i1 %668, label %593, label %673

669:                                              ; preds = %593
  %670 = ptrtoint i8* %595 to i64
  br label %673

671:                                              ; preds = %645
  %672 = ptrtoint i8* %577 to i64
  br label %673

673:                                              ; preds = %659, %671, %669, %641
  %674 = phi i64 [ %642, %641 ], [ %670, %669 ], [ %672, %671 ], [ %661, %659 ]
  %675 = load i64, i64* %542, align 8
  br label %676

676:                                              ; preds = %528, %570, %625, %673
  %677 = phi i64 [ %675, %673 ], [ %541, %528 ], [ %626, %625 ], [ %571, %570 ]
  %678 = phi i64 [ %674, %673 ], [ %535, %528 ], [ %629, %625 ], [ %572, %570 ]
  store i64 %678, i64* %534, align 8
  store i64 %677, i64* %540, align 8
  %679 = load i64, i64* %548, align 8
  store i64 %679, i64* %546, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %531) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %530) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %529) #11
  br label %1269

680:                                              ; preds = %26
  %681 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 3
  %682 = bitcast i8** %681 to i64*
  %683 = load i64, i64* %682, align 8
  %684 = bitcast i8** %9 to i64*
  store i64 %683, i64* %684, align 8
  %685 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 4
  %686 = load i8*, i8** %685, align 8
  %687 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 5
  %688 = bitcast i16** %687 to i64*
  %689 = load i64, i64* %688, align 8
  %690 = bitcast i16** %10 to i64*
  store i64 %689, i64* %690, align 8
  %691 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 6
  %692 = load i16*, i16** %691, align 8
  %693 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 7
  %694 = bitcast i32** %693 to i64*
  %695 = load i64, i64* %694, align 8
  %696 = bitcast i32** %11 to i64*
  store i64 %695, i64* %696, align 8
  %697 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 7
  %698 = load i32, i32* %697, align 8
  %699 = and i32 %698, 16
  %700 = icmp eq i32 %699, 0
  %701 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %28, i64 0, i32 8, i32 5
  %702 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %28, i64 0, i32 8, i32 4
  %703 = select i1 %700, [256 x i32]** %702, [256 x i32]** %701
  %704 = load [256 x i32]*, [256 x i32]** %703, align 8
  %705 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %28, i64 0, i32 8, i32 6
  %706 = load i16*, i16** %705, align 8
  %707 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 14
  %708 = load i32, i32* %707, align 8
  %709 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 12
  %710 = load i8, i8* %709, align 8
  %711 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 13, i64 0
  %712 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 15
  %713 = load i32, i32* %712, align 4
  %714 = trunc i32 %713 to i8
  %715 = and i32 %713, 255
  %716 = icmp eq i32 %715, 0
  %717 = inttoptr i64 %683 to i8*
  %718 = inttoptr i64 %689 to i16*
  br i1 %716, label %719, label %722

719:                                              ; preds = %680
  %720 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %28, i64 0, i32 8, i32 1
  %721 = load i8, i8* %720, align 1
  br label %722

722:                                              ; preds = %719, %680
  %723 = phi i8 [ %721, %719 ], [ %714, %680 ]
  %724 = icmp ugt i8* %686, %717
  br i1 %724, label %725, label %1261

725:                                              ; preds = %722
  %726 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 1
  %727 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 13, i64 1
  %728 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 13, i64 2
  %729 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 13, i64 3
  %730 = icmp ugt i16* %692, %718
  br i1 %730, label %731, label %734

731:                                              ; preds = %725
  %732 = icmp ne i8 %710, 0
  %733 = sext i1 %732 to i32
  br label %738

734:                                              ; preds = %925, %725
  %735 = phi i8 [ %710, %725 ], [ %920, %925 ]
  %736 = phi i8 [ %723, %725 ], [ %919, %925 ]
  %737 = phi i32 [ %708, %725 ], [ %918, %925 ]
  store i32 15, i32* %1, align 4
  br label %1261

738:                                              ; preds = %731, %925
  %739 = phi i32 [ %708, %731 ], [ %918, %925 ]
  %740 = phi i8 [ %723, %731 ], [ %919, %925 ]
  %741 = phi i8 [ %710, %731 ], [ %920, %925 ]
  %742 = phi i32 [ %733, %731 ], [ %921, %925 ]
  %743 = phi i32 [ 0, %731 ], [ %922, %925 ]
  %744 = phi i8* [ %717, %731 ], [ %923, %925 ]
  %745 = phi i16* [ %718, %731 ], [ %926, %925 ]
  %746 = icmp eq i8 %741, 0
  br i1 %746, label %747, label %893

747:                                              ; preds = %738
  %748 = load i32*, i32** %11, align 8
  %749 = icmp eq i32* %748, null
  br i1 %749, label %750, label %805

750:                                              ; preds = %747, %792
  %751 = phi i16* [ %802, %792 ], [ %745, %747 ]
  %752 = phi i8* [ %800, %792 ], [ %744, %747 ]
  %753 = phi i32 [ %794, %792 ], [ %739, %747 ]
  %754 = phi i8 [ %799, %792 ], [ %740, %747 ]
  %755 = zext i8 %754 to i64
  %756 = load i8, i8* %752, align 1
  %757 = zext i8 %756 to i64
  %758 = getelementptr inbounds [256 x i32], [256 x i32]* %704, i64 %755, i64 %757
  %759 = load i32, i32* %758, align 4
  %760 = icmp sgt i32 %759, -1
  br i1 %760, label %761, label %787

761:                                              ; preds = %750
  %762 = lshr i32 %759, 24
  %763 = and i32 %759, 16777215
  %764 = getelementptr inbounds i8, i8* %752, i64 1
  store i8* %764, i8** %9, align 8
  %765 = icmp ult i8* %764, %686
  br i1 %765, label %766, label %783

766:                                              ; preds = %761
  %767 = zext i32 %762 to i64
  %768 = load i8, i8* %764, align 1
  %769 = zext i8 %768 to i64
  %770 = getelementptr inbounds [256 x i32], [256 x i32]* %704, i64 %767, i64 %769
  %771 = load i32, i32* %770, align 4
  %772 = and i32 %771, -2131755008
  %773 = icmp eq i32 %772, -2143289344
  br i1 %773, label %774, label %783

774:                                              ; preds = %766
  %775 = and i32 %771, 65535
  %776 = add nuw nsw i32 %775, %763
  %777 = zext i32 %776 to i64
  %778 = getelementptr inbounds i16, i16* %706, i64 %777
  %779 = load i16, i16* %778, align 2
  %780 = icmp ult i16 %779, -2
  br i1 %780, label %781, label %783

781:                                              ; preds = %774
  %782 = getelementptr inbounds i8, i8* %752, i64 2
  store i8* %782, i8** %9, align 8
  br label %792

783:                                              ; preds = %774, %766, %761
  %784 = phi i32 [ %771, %774 ], [ %771, %766 ], [ %759, %761 ]
  %785 = trunc i32 %762 to i8
  %786 = load i8, i8* %752, align 1
  store i8 %786, i8* %711, align 1
  br label %875

787:                                              ; preds = %750
  %788 = icmp slt i32 %759, -2146435072
  br i1 %788, label %789, label %875

789:                                              ; preds = %787
  %790 = getelementptr inbounds i8, i8* %752, i64 1
  store i8* %790, i8** %9, align 8
  %791 = trunc i32 %759 to i16
  br label %792

792:                                              ; preds = %781, %789
  %793 = phi i16 [ %791, %789 ], [ %779, %781 ]
  %794 = phi i32 [ %753, %789 ], [ 0, %781 ]
  %795 = phi i32 [ %759, %789 ], [ %771, %781 ]
  %796 = getelementptr inbounds i16, i16* %751, i64 1
  store i16* %796, i16** %10, align 8
  store i16 %793, i16* %751, align 2
  %797 = lshr i32 %795, 24
  %798 = trunc i32 %797 to i8
  %799 = and i8 %798, 127
  %800 = load i8*, i8** %9, align 8
  %801 = icmp ult i8* %800, %686
  %802 = load i16*, i16** %10, align 8
  %803 = icmp ult i16* %802, %692
  %804 = and i1 %801, %803
  br i1 %804, label %750, label %875

805:                                              ; preds = %747, %862
  %806 = phi i16* [ %872, %862 ], [ %745, %747 ]
  %807 = phi i8* [ %870, %862 ], [ %744, %747 ]
  %808 = phi i32 [ %863, %862 ], [ %739, %747 ]
  %809 = phi i8 [ %869, %862 ], [ %740, %747 ]
  %810 = phi i32 [ %865, %862 ], [ %742, %747 ]
  %811 = phi i32 [ %866, %862 ], [ %743, %747 ]
  %812 = zext i8 %809 to i64
  %813 = load i8, i8* %807, align 1
  %814 = zext i8 %813 to i64
  %815 = getelementptr inbounds [256 x i32], [256 x i32]* %704, i64 %812, i64 %814
  %816 = load i32, i32* %815, align 4
  %817 = icmp sgt i32 %816, -1
  br i1 %817, label %818, label %851

818:                                              ; preds = %805
  %819 = lshr i32 %816, 24
  %820 = and i32 %816, 16777215
  %821 = getelementptr inbounds i8, i8* %807, i64 1
  store i8* %821, i8** %9, align 8
  %822 = icmp ult i8* %821, %686
  br i1 %822, label %823, label %846

823:                                              ; preds = %818
  %824 = zext i32 %819 to i64
  %825 = load i8, i8* %821, align 1
  %826 = zext i8 %825 to i64
  %827 = getelementptr inbounds [256 x i32], [256 x i32]* %704, i64 %824, i64 %826
  %828 = load i32, i32* %827, align 4
  %829 = and i32 %828, -2131755008
  %830 = icmp eq i32 %829, -2143289344
  br i1 %830, label %831, label %846

831:                                              ; preds = %823
  %832 = and i32 %828, 65535
  %833 = add nuw nsw i32 %832, %820
  %834 = zext i32 %833 to i64
  %835 = getelementptr inbounds i16, i16* %706, i64 %834
  %836 = load i16, i16* %835, align 2
  %837 = icmp ult i16 %836, -2
  br i1 %837, label %838, label %846

838:                                              ; preds = %831
  %839 = getelementptr inbounds i8, i8* %807, i64 2
  store i8* %839, i8** %9, align 8
  %840 = getelementptr inbounds i16, i16* %806, i64 1
  store i16* %840, i16** %10, align 8
  store i16 %836, i16* %806, align 2
  %841 = load i32*, i32** %11, align 8
  %842 = icmp eq i32* %841, null
  br i1 %842, label %862, label %843

843:                                              ; preds = %838
  %844 = getelementptr inbounds i32, i32* %841, i64 1
  store i32* %844, i32** %11, align 8
  store i32 %810, i32* %841, align 4
  %845 = add nsw i32 %811, 2
  br label %862

846:                                              ; preds = %831, %823, %818
  %847 = phi i32 [ %828, %831 ], [ %828, %823 ], [ %816, %818 ]
  %848 = trunc i32 %819 to i8
  %849 = add nsw i32 %811, 1
  %850 = load i8, i8* %807, align 1
  store i8 %850, i8* %711, align 1
  br label %875

851:                                              ; preds = %805
  %852 = icmp slt i32 %816, -2146435072
  br i1 %852, label %853, label %875

853:                                              ; preds = %851
  %854 = getelementptr inbounds i8, i8* %807, i64 1
  store i8* %854, i8** %9, align 8
  %855 = trunc i32 %816 to i16
  %856 = getelementptr inbounds i16, i16* %806, i64 1
  store i16* %856, i16** %10, align 8
  store i16 %855, i16* %806, align 2
  %857 = load i32*, i32** %11, align 8
  %858 = icmp eq i32* %857, null
  br i1 %858, label %862, label %859

859:                                              ; preds = %853
  %860 = getelementptr inbounds i32, i32* %857, i64 1
  store i32* %860, i32** %11, align 8
  store i32 %810, i32* %857, align 4
  %861 = add nsw i32 %811, 1
  br label %862

862:                                              ; preds = %859, %853, %843, %838
  %863 = phi i32 [ 0, %838 ], [ 0, %843 ], [ %808, %853 ], [ %808, %859 ]
  %864 = phi i32 [ %828, %838 ], [ %828, %843 ], [ %816, %853 ], [ %816, %859 ]
  %865 = phi i32 [ %810, %838 ], [ %845, %843 ], [ %810, %853 ], [ %861, %859 ]
  %866 = phi i32 [ %811, %838 ], [ %845, %843 ], [ %811, %853 ], [ %861, %859 ]
  %867 = lshr i32 %864, 24
  %868 = trunc i32 %867 to i8
  %869 = and i8 %868, 127
  %870 = load i8*, i8** %9, align 8
  %871 = icmp ult i8* %870, %686
  %872 = load i16*, i16** %10, align 8
  %873 = icmp ult i16* %872, %692
  %874 = and i1 %871, %873
  br i1 %874, label %805, label %875

875:                                              ; preds = %862, %851, %792, %787, %846, %783
  %876 = phi i16* [ %751, %783 ], [ %806, %846 ], [ %751, %787 ], [ %802, %792 ], [ %806, %851 ], [ %872, %862 ]
  %877 = phi i8* [ %764, %783 ], [ %821, %846 ], [ %752, %787 ], [ %800, %792 ], [ %807, %851 ], [ %870, %862 ]
  %878 = phi i32 [ %763, %783 ], [ %820, %846 ], [ %753, %787 ], [ %794, %792 ], [ %808, %851 ], [ %863, %862 ]
  %879 = phi i8 [ %785, %783 ], [ %848, %846 ], [ %754, %787 ], [ %799, %792 ], [ %809, %851 ], [ %869, %862 ]
  %880 = phi i8 [ 1, %783 ], [ 1, %846 ], [ 0, %787 ], [ 0, %792 ], [ 0, %851 ], [ 0, %862 ]
  %881 = phi i32 [ %742, %783 ], [ %810, %846 ], [ %742, %787 ], [ %742, %792 ], [ %810, %851 ], [ %865, %862 ]
  %882 = phi i32 [ %743, %783 ], [ %849, %846 ], [ %743, %787 ], [ %743, %792 ], [ %811, %851 ], [ %866, %862 ]
  %883 = phi i32 [ %784, %783 ], [ %847, %846 ], [ %759, %787 ], [ %795, %792 ], [ %816, %851 ], [ %864, %862 ]
  %884 = icmp ult i8* %877, %686
  br i1 %884, label %885, label %1261

885:                                              ; preds = %875
  %886 = icmp ult i16* %876, %692
  br i1 %886, label %888, label %887

887:                                              ; preds = %885
  store i32 15, i32* %1, align 4
  br label %1261

888:                                              ; preds = %885
  %889 = getelementptr inbounds i8, i8* %877, i64 1
  store i8* %889, i8** %9, align 8
  %890 = load i8, i8* %877, align 1
  %891 = zext i8 %880 to i64
  %892 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 13, i64 %891
  store i8 %890, i8* %892, align 1
  br label %902

893:                                              ; preds = %738
  %894 = zext i8 %740 to i64
  %895 = getelementptr inbounds i8, i8* %744, i64 1
  store i8* %895, i8** %9, align 8
  %896 = load i8, i8* %744, align 1
  %897 = sext i8 %741 to i64
  %898 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 13, i64 %897
  store i8 %896, i8* %898, align 1
  %899 = zext i8 %896 to i64
  %900 = getelementptr inbounds [256 x i32], [256 x i32]* %704, i64 %894, i64 %899
  %901 = load i32, i32* %900, align 4
  br label %902

902:                                              ; preds = %893, %888
  %903 = phi i32 [ %878, %888 ], [ %739, %893 ]
  %904 = phi i8 [ %879, %888 ], [ %740, %893 ]
  %905 = phi i8 [ %880, %888 ], [ %741, %893 ]
  %906 = phi i32 [ %881, %888 ], [ %742, %893 ]
  %907 = phi i32 [ %882, %888 ], [ %743, %893 ]
  %908 = phi i32 [ %883, %888 ], [ %901, %893 ]
  %909 = add nsw i32 %907, 1
  %910 = add i8 %905, 1
  %911 = icmp sgt i32 %908, -1
  br i1 %911, label %912, label %928

912:                                              ; preds = %902
  %913 = lshr i32 %908, 24
  %914 = trunc i32 %913 to i8
  %915 = and i32 %908, 16777215
  %916 = add i32 %915, %903
  br label %917

917:                                              ; preds = %1253, %1098, %1036, %1032, %1078, %1074, %942, %947, %984, %990, %993, %999, %1009, %1014, %1044, %1052, %1083, %1089, %1095, %928, %912
  %918 = phi i32 [ %916, %912 ], [ 0, %928 ], [ 0, %1095 ], [ 0, %1089 ], [ 0, %1083 ], [ 0, %1052 ], [ 0, %1044 ], [ 0, %1014 ], [ 0, %1009 ], [ 0, %999 ], [ 0, %993 ], [ 0, %990 ], [ 0, %984 ], [ 0, %947 ], [ 0, %942 ], [ 0, %1074 ], [ 0, %1078 ], [ 0, %1032 ], [ 0, %1036 ], [ 0, %1098 ], [ 0, %1253 ]
  %919 = phi i8 [ %914, %912 ], [ %932, %928 ], [ %932, %1095 ], [ %932, %1089 ], [ %932, %1083 ], [ %932, %1052 ], [ %932, %1044 ], [ %932, %1014 ], [ %932, %1009 ], [ %932, %999 ], [ %932, %993 ], [ %932, %990 ], [ %932, %984 ], [ %932, %947 ], [ %932, %942 ], [ %932, %1074 ], [ %932, %1078 ], [ %932, %1032 ], [ %932, %1036 ], [ %1099, %1098 ], [ %1099, %1253 ]
  %920 = phi i8 [ %910, %912 ], [ 0, %928 ], [ 0, %1095 ], [ 0, %1089 ], [ 0, %1083 ], [ 0, %1052 ], [ 0, %1044 ], [ 0, %1014 ], [ 0, %1009 ], [ 0, %999 ], [ 0, %993 ], [ 0, %990 ], [ 0, %984 ], [ 0, %947 ], [ 0, %942 ], [ 0, %1074 ], [ 0, %1078 ], [ 0, %1032 ], [ 0, %1036 ], [ 0, %1098 ], [ 0, %1253 ]
  %921 = phi i32 [ %906, %912 ], [ %909, %928 ], [ %909, %1095 ], [ %909, %1089 ], [ %909, %1083 ], [ %909, %1052 ], [ %909, %1044 ], [ %909, %1014 ], [ %909, %1009 ], [ %909, %999 ], [ %909, %993 ], [ %909, %990 ], [ %909, %984 ], [ %909, %947 ], [ %909, %942 ], [ %909, %1074 ], [ %909, %1078 ], [ %909, %1032 ], [ %909, %1036 ], [ %909, %1098 ], [ %1259, %1253 ]
  %922 = phi i32 [ %909, %912 ], [ %909, %928 ], [ %909, %1095 ], [ %909, %1089 ], [ %909, %1083 ], [ %909, %1052 ], [ %909, %1044 ], [ %909, %1014 ], [ %909, %1009 ], [ %909, %999 ], [ %909, %993 ], [ %909, %990 ], [ %909, %984 ], [ %909, %947 ], [ %909, %942 ], [ %909, %1074 ], [ %909, %1078 ], [ %909, %1032 ], [ %909, %1036 ], [ %909, %1098 ], [ %1259, %1253 ]
  %923 = load i8*, i8** %9, align 8
  %924 = icmp ult i8* %923, %686
  br i1 %924, label %925, label %1261

925:                                              ; preds = %917
  %926 = load i16*, i16** %10, align 8
  %927 = icmp ult i16* %926, %692
  br i1 %927, label %738, label %734

928:                                              ; preds = %902
  %929 = zext i8 %904 to i32
  store i32 %929, i32* %712, align 4
  %930 = lshr i32 %908, 24
  %931 = trunc i32 %930 to i8
  %932 = and i8 %931, 127
  %933 = lshr i32 %908, 20
  %934 = and i32 %933, 15
  switch i32 %934, label %917 [
    i32 4, label %935
    i32 0, label %993
    i32 5, label %1001
    i32 1, label %1057
    i32 3, label %1057
    i32 8, label %1083
    i32 2, label %1089
    i32 6, label %1098
    i32 7, label %1097
  ]

935:                                              ; preds = %928
  %936 = and i32 %908, 65535
  %937 = add i32 %936, %903
  %938 = zext i32 %937 to i64
  %939 = getelementptr inbounds i16, i16* %706, i64 %938
  %940 = load i16, i16* %939, align 2
  %941 = icmp ult i16 %940, -2
  br i1 %941, label %942, label %949

942:                                              ; preds = %935
  %943 = load i16*, i16** %10, align 8
  %944 = getelementptr inbounds i16, i16* %943, i64 1
  store i16* %944, i16** %10, align 8
  store i16 %940, i16* %943, align 2
  %945 = load i32*, i32** %11, align 8
  %946 = icmp eq i32* %945, null
  br i1 %946, label %917, label %947

947:                                              ; preds = %942
  %948 = getelementptr inbounds i32, i32* %945, i64 1
  store i32* %948, i32** %11, align 8
  store i32 %906, i32* %945, align 4
  br label %917

949:                                              ; preds = %935
  %950 = icmp eq i16 %940, -2
  br i1 %950, label %951, label %992

951:                                              ; preds = %949
  %952 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %27, align 8
  %953 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %952, i64 0, i32 8, i32 3
  %954 = load i32, i32* %953, align 4
  %955 = icmp eq i32 %954, 0
  br i1 %955, label %1098, label %956

956:                                              ; preds = %951
  %957 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %952, i64 0, i32 8, i32 7
  %958 = load %struct._MBCSToUFallback*, %struct._MBCSToUFallback** %957, align 8
  %959 = icmp eq i32 %954, 1
  br i1 %959, label %975, label %960

960:                                              ; preds = %956, %960
  %961 = phi i32 [ %970, %960 ], [ %954, %956 ]
  %962 = phi i32 [ %969, %960 ], [ 0, %956 ]
  %963 = add i32 %962, %961
  %964 = lshr i32 %963, 1
  %965 = zext i32 %964 to i64
  %966 = getelementptr inbounds %struct._MBCSToUFallback, %struct._MBCSToUFallback* %958, i64 %965, i32 0
  %967 = load i32, i32* %966, align 4
  %968 = icmp ugt i32 %967, %937
  %969 = select i1 %968, i32 %962, i32 %964
  %970 = select i1 %968, i32 %964, i32 %961
  %971 = add i32 %970, -1
  %972 = icmp ult i32 %969, %971
  br i1 %972, label %960, label %973

973:                                              ; preds = %960
  %974 = zext i32 %969 to i64
  br label %975

975:                                              ; preds = %973, %956
  %976 = phi i64 [ 0, %956 ], [ %974, %973 ]
  %977 = getelementptr inbounds %struct._MBCSToUFallback, %struct._MBCSToUFallback* %958, i64 %976, i32 0
  %978 = load i32, i32* %977, align 4
  %979 = icmp eq i32 %978, %937
  br i1 %979, label %980, label %1098

980:                                              ; preds = %975
  %981 = getelementptr inbounds %struct._MBCSToUFallback, %struct._MBCSToUFallback* %958, i64 %976, i32 1
  %982 = load i32, i32* %981, align 4
  %983 = icmp eq i32 %982, 65534
  br i1 %983, label %1098, label %984

984:                                              ; preds = %980
  %985 = trunc i32 %982 to i16
  %986 = load i16*, i16** %10, align 8
  %987 = getelementptr inbounds i16, i16* %986, i64 1
  store i16* %987, i16** %10, align 8
  store i16 %985, i16* %986, align 2
  %988 = load i32*, i32** %11, align 8
  %989 = icmp eq i32* %988, null
  br i1 %989, label %917, label %990

990:                                              ; preds = %984
  %991 = getelementptr inbounds i32, i32* %988, i64 1
  store i32* %991, i32** %11, align 8
  store i32 %906, i32* %988, align 4
  br label %917

992:                                              ; preds = %949
  store i32 12, i32* %1, align 4
  br label %1098

993:                                              ; preds = %928
  %994 = trunc i32 %908 to i16
  %995 = load i16*, i16** %10, align 8
  %996 = getelementptr inbounds i16, i16* %995, i64 1
  store i16* %996, i16** %10, align 8
  store i16 %994, i16* %995, align 2
  %997 = load i32*, i32** %11, align 8
  %998 = icmp eq i32* %997, null
  br i1 %998, label %917, label %999

999:                                              ; preds = %993
  %1000 = getelementptr inbounds i32, i32* %997, i64 1
  store i32* %1000, i32** %11, align 8
  store i32 %906, i32* %997, align 4
  br label %917

1001:                                             ; preds = %928
  %1002 = and i32 %908, 65535
  %1003 = add i32 %1002, %903
  %1004 = add i32 %1003, 1
  %1005 = zext i32 %1003 to i64
  %1006 = getelementptr inbounds i16, i16* %706, i64 %1005
  %1007 = load i16, i16* %1006, align 2
  %1008 = icmp ult i16 %1007, -10240
  br i1 %1008, label %1009, label %1016

1009:                                             ; preds = %1001
  %1010 = load i16*, i16** %10, align 8
  %1011 = getelementptr inbounds i16, i16* %1010, i64 1
  store i16* %1011, i16** %10, align 8
  store i16 %1007, i16* %1010, align 2
  %1012 = load i32*, i32** %11, align 8
  %1013 = icmp eq i32* %1012, null
  br i1 %1013, label %917, label %1014

1014:                                             ; preds = %1009
  %1015 = getelementptr inbounds i32, i32* %1012, i64 1
  store i32* %1015, i32** %11, align 8
  store i32 %906, i32* %1012, align 4
  br label %917

1016:                                             ; preds = %1001
  %1017 = icmp ult i16 %1007, -8192
  br i1 %1017, label %1018, label %1041

1018:                                             ; preds = %1016
  %1019 = and i16 %1007, -9217
  %1020 = load i16*, i16** %10, align 8
  %1021 = getelementptr inbounds i16, i16* %1020, i64 1
  store i16* %1021, i16** %10, align 8
  store i16 %1019, i16* %1020, align 2
  %1022 = load i32*, i32** %11, align 8
  %1023 = icmp eq i32* %1022, null
  br i1 %1023, label %1026, label %1024

1024:                                             ; preds = %1018
  %1025 = getelementptr inbounds i32, i32* %1022, i64 1
  store i32* %1025, i32** %11, align 8
  store i32 %906, i32* %1022, align 4
  br label %1026

1026:                                             ; preds = %1018, %1024
  %1027 = load i16*, i16** %10, align 8
  %1028 = icmp ult i16* %1027, %692
  %1029 = zext i32 %1004 to i64
  %1030 = getelementptr inbounds i16, i16* %706, i64 %1029
  %1031 = load i16, i16* %1030, align 2
  br i1 %1028, label %1032, label %1038

1032:                                             ; preds = %1026
  %1033 = getelementptr inbounds i16, i16* %1027, i64 1
  store i16* %1033, i16** %10, align 8
  store i16 %1031, i16* %1027, align 2
  %1034 = load i32*, i32** %11, align 8
  %1035 = icmp eq i32* %1034, null
  br i1 %1035, label %917, label %1036

1036:                                             ; preds = %1032
  %1037 = getelementptr inbounds i32, i32* %1034, i64 1
  store i32* %1037, i32** %11, align 8
  store i32 %906, i32* %1034, align 4
  br label %917

1038:                                             ; preds = %1026
  %1039 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 30, i64 0
  store i16 %1031, i16* %1039, align 8
  %1040 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 23
  store i8 1, i8* %1040, align 1
  store i32 15, i32* %1, align 4
  br label %1261

1041:                                             ; preds = %1016
  %1042 = and i16 %1007, -2
  %1043 = icmp eq i16 %1042, -8192
  br i1 %1043, label %1044, label %1054

1044:                                             ; preds = %1041
  %1045 = zext i32 %1004 to i64
  %1046 = getelementptr inbounds i16, i16* %706, i64 %1045
  %1047 = load i16, i16* %1046, align 2
  %1048 = load i16*, i16** %10, align 8
  %1049 = getelementptr inbounds i16, i16* %1048, i64 1
  store i16* %1049, i16** %10, align 8
  store i16 %1047, i16* %1048, align 2
  %1050 = load i32*, i32** %11, align 8
  %1051 = icmp eq i32* %1050, null
  br i1 %1051, label %917, label %1052

1052:                                             ; preds = %1044
  %1053 = getelementptr inbounds i32, i32* %1050, i64 1
  store i32* %1053, i32** %11, align 8
  store i32 %906, i32* %1050, align 4
  br label %917

1054:                                             ; preds = %1041
  %1055 = icmp eq i16 %1007, -1
  br i1 %1055, label %1056, label %1098

1056:                                             ; preds = %1054
  store i32 12, i32* %1, align 4
  br label %1098

1057:                                             ; preds = %928, %928
  %1058 = lshr i32 %908, 10
  %1059 = trunc i32 %1058 to i16
  %1060 = and i16 %1059, 1023
  %1061 = or i16 %1060, -10240
  %1062 = load i16*, i16** %10, align 8
  %1063 = getelementptr inbounds i16, i16* %1062, i64 1
  store i16* %1063, i16** %10, align 8
  store i16 %1061, i16* %1062, align 2
  %1064 = load i32*, i32** %11, align 8
  %1065 = icmp eq i32* %1064, null
  br i1 %1065, label %1068, label %1066

1066:                                             ; preds = %1057
  %1067 = getelementptr inbounds i32, i32* %1064, i64 1
  store i32* %1067, i32** %11, align 8
  store i32 %906, i32* %1064, align 4
  br label %1068

1068:                                             ; preds = %1057, %1066
  %1069 = trunc i32 %908 to i16
  %1070 = and i16 %1069, 1023
  %1071 = or i16 %1070, -9216
  %1072 = load i16*, i16** %10, align 8
  %1073 = icmp ult i16* %1072, %692
  br i1 %1073, label %1074, label %1080

1074:                                             ; preds = %1068
  %1075 = getelementptr inbounds i16, i16* %1072, i64 1
  store i16* %1075, i16** %10, align 8
  store i16 %1071, i16* %1072, align 2
  %1076 = load i32*, i32** %11, align 8
  %1077 = icmp eq i32* %1076, null
  br i1 %1077, label %917, label %1078

1078:                                             ; preds = %1074
  %1079 = getelementptr inbounds i32, i32* %1076, i64 1
  store i32* %1079, i32** %11, align 8
  store i32 %906, i32* %1076, align 4
  br label %917

1080:                                             ; preds = %1068
  %1081 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 30, i64 0
  store i16 %1071, i16* %1081, align 8
  %1082 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 23
  store i8 1, i8* %1082, align 1
  store i32 15, i32* %1, align 4
  br label %1261

1083:                                             ; preds = %928
  %1084 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %27, align 8
  %1085 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %1084, i64 0, i32 8, i32 1
  %1086 = load i8, i8* %1085, align 1
  %1087 = icmp eq i8 %1086, 0
  br i1 %1087, label %917, label %1088

1088:                                             ; preds = %1083
  store i32 12, i32* %1, align 4
  br label %1098

1089:                                             ; preds = %928
  %1090 = trunc i32 %908 to i16
  %1091 = load i16*, i16** %10, align 8
  %1092 = getelementptr inbounds i16, i16* %1091, i64 1
  store i16* %1092, i16** %10, align 8
  store i16 %1090, i16* %1091, align 2
  %1093 = load i32*, i32** %11, align 8
  %1094 = icmp eq i32* %1093, null
  br i1 %1094, label %917, label %1095

1095:                                             ; preds = %1089
  %1096 = getelementptr inbounds i32, i32* %1093, i64 1
  store i32* %1096, i32** %11, align 8
  store i32 %906, i32* %1093, align 4
  br label %917

1097:                                             ; preds = %928
  store i32 12, i32* %1, align 4
  br label %1098

1098:                                             ; preds = %975, %951, %928, %980, %1097, %1088, %1056, %1054, %992
  %1099 = phi i8 [ %932, %980 ], [ %932, %992 ], [ %932, %1056 ], [ %932, %1054 ], [ %904, %1088 ], [ %932, %1097 ], [ %932, %928 ], [ %932, %951 ], [ %932, %975 ]
  %1100 = icmp eq i8 %910, 0
  br i1 %1100, label %917, label %1101

1101:                                             ; preds = %1098
  %1102 = load i32, i32* %1, align 4
  %1103 = icmp slt i32 %1102, 1
  br i1 %1103, label %1161, label %1104

1104:                                             ; preds = %1101
  %1105 = icmp sgt i8 %910, 1
  br i1 %1105, label %1106, label %1261

1106:                                             ; preds = %1104
  %1107 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %27, align 8
  %1108 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %1107, i64 0, i32 8, i32 1
  %1109 = load i8, i8* %1108, align 1
  %1110 = icmp ne i8 %1109, 0
  %1111 = zext i8 %1099 to i64
  %1112 = zext i8 %910 to i64
  br label %1113

1113:                                             ; preds = %1136, %1106
  %1114 = phi i64 [ 1, %1106 ], [ %1137, %1136 ]
  %1115 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 13, i64 %1114
  %1116 = load i8, i8* %1115, align 1
  %1117 = zext i8 %1116 to i64
  %1118 = getelementptr inbounds [256 x i32], [256 x i32]* %704, i64 %1111, i64 %1117
  %1119 = load i32, i32* %1118, align 4
  %1120 = icmp sgt i32 %1119, -1
  br i1 %1120, label %1121, label %1125

1121:                                             ; preds = %1113
  %1122 = lshr i32 %1119, 24
  %1123 = trunc i32 %1122 to i8
  %1124 = call fastcc signext i8 @_ZL18hasValidTrailBytesPA256_Kih([256 x i32]* %704, i8 zeroext %1123) #11
  br label %1133

1125:                                             ; preds = %1113
  %1126 = lshr i32 %1119, 20
  %1127 = and i32 %1126, 15
  %1128 = icmp eq i32 %1127, 8
  %1129 = and i1 %1110, %1128
  %1130 = icmp ne i32 %1127, 7
  %1131 = xor i1 %1130, %1129
  %1132 = zext i1 %1131 to i8
  br label %1133

1133:                                             ; preds = %1121, %1125
  %1134 = phi i8 [ %1124, %1121 ], [ %1132, %1125 ]
  %1135 = icmp eq i8 %1134, 0
  br i1 %1135, label %1136, label %1139

1136:                                             ; preds = %1133
  %1137 = add nuw nsw i64 %1114, 1
  %1138 = icmp eq i64 %1137, %1112
  br i1 %1138, label %1261, label %1113

1139:                                             ; preds = %1133
  %1140 = trunc i64 %1114 to i8
  %1141 = sub i8 %910, %1140
  %1142 = load i8*, i8** %9, align 8
  %1143 = load i64, i64* %682, align 8
  %1144 = ptrtoint i8* %1142 to i64
  %1145 = sub i64 %1144, %1143
  %1146 = trunc i64 %1145 to i32
  %1147 = sext i8 %1141 to i32
  %1148 = icmp slt i32 %1146, %1147
  br i1 %1148, label %1153, label %1149

1149:                                             ; preds = %1139
  %1150 = sext i8 %1141 to i64
  %1151 = sub nsw i64 0, %1150
  %1152 = getelementptr inbounds i8, i8* %1142, i64 %1151
  store i8* %1152, i8** %9, align 8
  br label %1261

1153:                                             ; preds = %1139
  %1154 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 13, i64 %1114
  %1155 = trunc i64 %1145 to i8
  %1156 = sub i8 %1155, %1141
  store i8 %1156, i8* %17, align 2
  %1157 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %16, i64 0, i32 33, i64 0
  %1158 = sext i8 %1156 to i64
  %1159 = sub nsw i64 0, %1158
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %1157, i8* align 1 %1154, i64 %1159, i1 false)
  %1160 = load i64, i64* %682, align 8
  store i64 %1160, i64* %684, align 8
  br label %1261

1161:                                             ; preds = %1101
  %1162 = load i64, i64* %684, align 8
  store i64 %1162, i64* %682, align 8
  %1163 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %27, align 8
  %1164 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %1163, i64 0, i32 8, i32 22
  %1165 = load i32*, i32** %1164, align 8
  %1166 = icmp eq i32* %1165, null
  br i1 %1166, label %1172, label %1167

1167:                                             ; preds = %1161
  %1168 = load i8, i8* %726, align 2
  %1169 = sext i8 %910 to i32
  %1170 = call signext i8 @ucnv_extInitialMatchToU_69(%struct.UConverter* %16, i32* nonnull %1165, i32 %1169, i8** nonnull %9, i8* %686, i16** nonnull %10, i16* %692, i32** nonnull %11, i32 %906, i8 signext %1168, i32* %1) #11
  %1171 = icmp eq i8 %1170, 0
  br i1 %1171, label %1172, label %1253

1172:                                             ; preds = %1167, %1161
  %1173 = icmp eq i8 %910, 4
  br i1 %1173, label %1174, label %1205

1174:                                             ; preds = %1172
  %1175 = load i32, i32* %697, align 8
  %1176 = trunc i32 %1175 to i16
  %1177 = icmp slt i16 %1176, 0
  br i1 %1177, label %1178, label %1205

1178:                                             ; preds = %1174
  %1179 = load i8, i8* %711, align 1
  %1180 = zext i8 %1179 to i32
  %1181 = mul nuw nsw i32 %1180, 10
  %1182 = load i8, i8* %727, align 1
  %1183 = zext i8 %1182 to i32
  %1184 = add nuw nsw i32 %1181, %1183
  %1185 = mul nuw nsw i32 %1184, 126
  %1186 = load i8, i8* %728, align 1
  %1187 = zext i8 %1186 to i32
  %1188 = add nuw nsw i32 %1185, %1187
  %1189 = mul nuw nsw i32 %1188, 10
  %1190 = load i8, i8* %729, align 1
  %1191 = zext i8 %1190 to i32
  %1192 = add nuw nsw i32 %1189, %1191
  %1193 = icmp ult i32 %1192, 1876218
  br i1 %1193, label %1203, label %1194

1194:                                             ; preds = %1178
  %1195 = icmp ugt i32 %1192, 2924793
  br i1 %1195, label %1205, label %1196

1196:                                             ; preds = %1250, %1247, %1245, %1241, %1237, %1232, %1230, %1226, %1222, %1218, %1214, %1210, %1206, %1194
  %1197 = phi i32* [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 0, i64 0), %1194 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 1, i64 0), %1206 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 2, i64 0), %1210 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 3, i64 0), %1214 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 4, i64 0), %1218 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 5, i64 0), %1222 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 6, i64 0), %1226 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 7, i64 0), %1230 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 9, i64 0), %1237 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 10, i64 0), %1241 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 11, i64 0), %1245 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 8, i64 0), %1232 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 12, i64 0), %1247 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 13, i64 0), %1250 ]
  %1198 = getelementptr inbounds i32, i32* %1197, i64 2
  store i32 0, i32* %1, align 4
  %1199 = load i32, i32* %1197, align 4
  %1200 = load i32, i32* %1198, align 4
  %1201 = add i32 %1199, %1192
  %1202 = sub i32 %1201, %1200
  call void @ucnv_toUWriteCodePoint_69(%struct.UConverter* %16, i32 %1202, i16** nonnull %10, i16* %692, i32** nonnull %11, i32 %906, i32* %1) #11
  br label %1253

1203:                                             ; preds = %1178
  %1204 = icmp ult i32 %1192, 1706261
  br i1 %1204, label %1208, label %1206

1205:                                             ; preds = %1172, %1174, %1194, %1208, %1212, %1216, %1220, %1224, %1232, %1237, %1239, %1245, %1247, %1250
  store i32 10, i32* %1, align 4
  br label %1261

1206:                                             ; preds = %1203
  %1207 = icmp ugt i32 %1192, 1720686
  br i1 %1207, label %1216, label %1196

1208:                                             ; preds = %1203
  %1209 = icmp ult i32 %1192, 1688038
  br i1 %1209, label %1205, label %1210

1210:                                             ; preds = %1208
  %1211 = icmp ugt i32 %1192, 1694674
  br i1 %1211, label %1212, label %1196

1212:                                             ; preds = %1210
  %1213 = icmp eq i32 %1192, 1694675
  br i1 %1213, label %1205, label %1214

1214:                                             ; preds = %1212
  %1215 = icmp ugt i32 %1192, 1695139
  br i1 %1215, label %1220, label %1196

1216:                                             ; preds = %1206
  %1217 = icmp ult i32 %1192, 1720768
  br i1 %1217, label %1205, label %1218

1218:                                             ; preds = %1216
  %1219 = icmp ugt i32 %1192, 1725062
  br i1 %1219, label %1224, label %1196

1220:                                             ; preds = %1214
  %1221 = icmp ult i32 %1192, 1696437
  br i1 %1221, label %1205, label %1222

1222:                                             ; preds = %1220
  %1223 = icmp ugt i32 %1192, 1698546
  br i1 %1223, label %1228, label %1196

1224:                                             ; preds = %1218
  %1225 = icmp ult i32 %1192, 1725296
  br i1 %1225, label %1205, label %1226

1226:                                             ; preds = %1224
  %1227 = icmp ugt i32 %1192, 1726325
  br i1 %1227, label %1250, label %1196

1228:                                             ; preds = %1222
  %1229 = icmp ult i32 %1192, 1701916
  br i1 %1229, label %1232, label %1230

1230:                                             ; preds = %1228
  %1231 = icmp ugt i32 %1192, 1702800
  br i1 %1231, label %1235, label %1196

1232:                                             ; preds = %1228
  %1233 = add nsw i32 %1192, -1700191
  %1234 = icmp ugt i32 %1233, 764
  br i1 %1234, label %1205, label %1196

1235:                                             ; preds = %1230
  %1236 = icmp ult i32 %1192, 1705179
  br i1 %1236, label %1239, label %1237

1237:                                             ; preds = %1235
  %1238 = icmp ugt i32 %1192, 1705881
  br i1 %1238, label %1205, label %1196

1239:                                             ; preds = %1235
  %1240 = icmp ult i32 %1192, 1703065
  br i1 %1240, label %1205, label %1241

1241:                                             ; preds = %1239
  %1242 = icmp ugt i32 %1192, 1703535
  br i1 %1242, label %1243, label %1196

1243:                                             ; preds = %1241
  %1244 = icmp ult i32 %1192, 1704636
  br i1 %1244, label %1247, label %1245

1245:                                             ; preds = %1243
  %1246 = icmp ugt i32 %1192, 1705076
  br i1 %1246, label %1205, label %1196

1247:                                             ; preds = %1243
  %1248 = add nsw i32 %1192, -1703947
  %1249 = icmp ugt i32 %1248, 372
  br i1 %1249, label %1205, label %1196

1250:                                             ; preds = %1226
  %1251 = add nsw i32 %1192, -1726612
  %1252 = icmp ugt i32 %1251, 25
  br i1 %1252, label %1205, label %1196

1253:                                             ; preds = %1167, %1196
  %1254 = load i32, i32* %1, align 4
  %1255 = load i64, i64* %684, align 8
  %1256 = load i64, i64* %682, align 8
  %1257 = sub i64 %1255, %1256
  %1258 = trunc i64 %1257 to i32
  %1259 = add nsw i32 %909, %1258
  %1260 = icmp slt i32 %1254, 1
  br i1 %1260, label %917, label %1261

1261:                                             ; preds = %917, %1253, %875, %1136, %1205, %722, %1153, %1149, %1104, %1080, %1038, %887, %734
  %1262 = phi i32 [ %737, %734 ], [ %878, %887 ], [ 0, %1104 ], [ 0, %1038 ], [ 0, %1080 ], [ 0, %1149 ], [ 0, %1153 ], [ %708, %722 ], [ 0, %1205 ], [ 0, %1136 ], [ %918, %917 ], [ 0, %1253 ], [ %878, %875 ]
  %1263 = phi i8 [ %736, %734 ], [ %879, %887 ], [ %1099, %1104 ], [ %932, %1038 ], [ %932, %1080 ], [ %1099, %1149 ], [ %1099, %1153 ], [ %723, %722 ], [ %1099, %1205 ], [ %1099, %1136 ], [ %919, %917 ], [ %1099, %1253 ], [ %879, %875 ]
  %1264 = phi i8 [ %735, %734 ], [ %880, %887 ], [ %910, %1104 ], [ 0, %1038 ], [ 0, %1080 ], [ %1140, %1149 ], [ %1140, %1153 ], [ %710, %722 ], [ %910, %1205 ], [ %910, %1136 ], [ %920, %917 ], [ 0, %1253 ], [ %880, %875 ]
  store i32 %1262, i32* %707, align 8
  %1265 = zext i8 %1263 to i32
  store i32 %1265, i32* %712, align 4
  store i8 %1264, i8* %709, align 8
  %1266 = load i64, i64* %684, align 8
  store i64 %1266, i64* %682, align 8
  %1267 = load i64, i64* %690, align 8
  store i64 %1267, i64* %688, align 8
  %1268 = load i64, i64* %696, align 8
  store i64 %1268, i64* %694, align 8
  br label %1269

1269:                                             ; preds = %524, %676, %23, %20, %1261
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #11
  ret void
}

declare void @ucnv_extContinueMatchToU_69(%struct.UConverter*, %struct.UConverterToUnicodeArgs*, i32, i32*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ucnv_MBCSSimpleGetNextUChar_69(%struct.UConverterSharedData* nocapture readonly, i8*, i32, i8 signext) local_unnamed_addr #0 {
  %5 = icmp slt i32 %2, 1
  br i1 %5, label %126, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 4
  %8 = load [256 x i32]*, [256 x i32]** %7, align 8
  %9 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 6
  %10 = load i16*, i16** %9, align 8
  %11 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 1
  %12 = load i8, i8* %11, align 1
  %13 = zext i32 %2 to i64
  br label %14

14:                                               ; preds = %26, %6
  %15 = phi i64 [ %19, %26 ], [ 0, %6 ]
  %16 = phi i32 [ %30, %26 ], [ 0, %6 ]
  %17 = phi i8 [ %28, %26 ], [ %12, %6 ]
  %18 = zext i8 %17 to i64
  %19 = add nuw nsw i64 %15, 1
  %20 = getelementptr inbounds i8, i8* %1, i64 %15
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i64
  %23 = getelementptr inbounds [256 x i32], [256 x i32]* %8, i64 %18, i64 %22
  %24 = load i32, i32* %23, align 4
  %25 = icmp sgt i32 %24, -1
  br i1 %25, label %26, label %32

26:                                               ; preds = %14
  %27 = lshr i32 %24, 24
  %28 = trunc i32 %27 to i8
  %29 = and i32 %24, 16777215
  %30 = add i32 %29, %16
  %31 = icmp eq i64 %19, %13
  br i1 %31, label %126, label %14

32:                                               ; preds = %14
  %33 = trunc i64 %19 to i32
  %34 = lshr i32 %24, 20
  %35 = and i32 %34, 15
  switch i32 %35, label %126 [
    i32 4, label %36
    i32 0, label %75
    i32 5, label %77
    i32 1, label %107
    i32 2, label %110
    i32 3, label %112
    i32 6, label %115
  ]

36:                                               ; preds = %32
  %37 = and i32 %24, 65535
  %38 = add i32 %37, %16
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i16, i16* %10, i64 %39
  %41 = load i16, i16* %40, align 2
  %42 = zext i16 %41 to i32
  %43 = icmp eq i16 %41, -2
  br i1 %43, label %44, label %115

44:                                               ; preds = %36
  %45 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 3
  %46 = load i32, i32* %45, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %115, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 7
  %50 = load %struct._MBCSToUFallback*, %struct._MBCSToUFallback** %49, align 8
  %51 = icmp eq i32 %46, 1
  br i1 %51, label %67, label %52

52:                                               ; preds = %48, %52
  %53 = phi i32 [ %62, %52 ], [ %46, %48 ]
  %54 = phi i32 [ %61, %52 ], [ 0, %48 ]
  %55 = add i32 %54, %53
  %56 = lshr i32 %55, 1
  %57 = zext i32 %56 to i64
  %58 = getelementptr inbounds %struct._MBCSToUFallback, %struct._MBCSToUFallback* %50, i64 %57, i32 0
  %59 = load i32, i32* %58, align 4
  %60 = icmp ugt i32 %59, %38
  %61 = select i1 %60, i32 %54, i32 %56
  %62 = select i1 %60, i32 %56, i32 %53
  %63 = add i32 %62, -1
  %64 = icmp ult i32 %61, %63
  br i1 %64, label %52, label %65

65:                                               ; preds = %52
  %66 = zext i32 %61 to i64
  br label %67

67:                                               ; preds = %65, %48
  %68 = phi i64 [ 0, %48 ], [ %66, %65 ]
  %69 = getelementptr inbounds %struct._MBCSToUFallback, %struct._MBCSToUFallback* %50, i64 %68, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = icmp eq i32 %70, %38
  br i1 %71, label %72, label %115

72:                                               ; preds = %67
  %73 = getelementptr inbounds %struct._MBCSToUFallback, %struct._MBCSToUFallback* %50, i64 %68, i32 1
  %74 = load i32, i32* %73, align 4
  br label %115

75:                                               ; preds = %32
  %76 = and i32 %24, 65535
  br label %115

77:                                               ; preds = %32
  %78 = and i32 %24, 65535
  %79 = add i32 %78, %16
  %80 = add i32 %79, 1
  %81 = zext i32 %79 to i64
  %82 = getelementptr inbounds i16, i16* %10, i64 %81
  %83 = load i16, i16* %82, align 2
  %84 = zext i16 %83 to i32
  %85 = icmp ult i16 %83, -10240
  br i1 %85, label %115, label %86

86:                                               ; preds = %77
  %87 = icmp ult i16 %83, -8192
  br i1 %87, label %88, label %97

88:                                               ; preds = %86
  %89 = shl nuw nsw i32 %84, 10
  %90 = and i32 %89, 1047552
  %91 = zext i32 %80 to i64
  %92 = getelementptr inbounds i16, i16* %10, i64 %91
  %93 = load i16, i16* %92, align 2
  %94 = zext i16 %93 to i32
  %95 = add nuw nsw i32 %90, 9216
  %96 = add nuw nsw i32 %95, %94
  br label %115

97:                                               ; preds = %86
  %98 = and i32 %84, 65534
  %99 = icmp eq i32 %98, 57344
  br i1 %99, label %100, label %105

100:                                              ; preds = %97
  %101 = zext i32 %80 to i64
  %102 = getelementptr inbounds i16, i16* %10, i64 %101
  %103 = load i16, i16* %102, align 2
  %104 = zext i16 %103 to i32
  br label %115

105:                                              ; preds = %97
  %106 = icmp eq i16 %83, -1
  br i1 %106, label %126, label %115

107:                                              ; preds = %32
  %108 = and i32 %24, 1048575
  %109 = add nuw nsw i32 %108, 65536
  br label %115

110:                                              ; preds = %32
  %111 = and i32 %24, 65535
  br label %115

112:                                              ; preds = %32
  %113 = and i32 %24, 1048575
  %114 = add nuw nsw i32 %113, 65536
  br label %115

115:                                              ; preds = %72, %67, %44, %32, %105, %36, %77, %100, %88, %112, %110, %107, %75
  %116 = phi i32 [ %42, %36 ], [ %76, %75 ], [ %84, %77 ], [ %96, %88 ], [ %104, %100 ], [ %109, %107 ], [ %111, %110 ], [ %114, %112 ], [ 65534, %105 ], [ 65534, %32 ], [ %74, %72 ], [ 65534, %44 ], [ 65534, %67 ]
  %117 = icmp eq i32 %33, %2
  br i1 %117, label %118, label %126

118:                                              ; preds = %115
  %119 = icmp eq i32 %116, 65534
  br i1 %119, label %120, label %126

120:                                              ; preds = %118
  %121 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 22
  %122 = load i32*, i32** %121, align 8
  %123 = icmp eq i32* %122, null
  br i1 %123, label %126, label %124

124:                                              ; preds = %120
  %125 = tail call i32 @ucnv_extSimpleMatchToU_69(i32* nonnull %122, i8* %1, i32 %2, i8 signext %3) #11
  br label %126

126:                                              ; preds = %26, %120, %118, %124, %115, %32, %105, %4
  %127 = phi i32 [ %125, %124 ], [ 65535, %4 ], [ 65535, %105 ], [ 65535, %32 ], [ 65535, %115 ], [ %116, %118 ], [ 65534, %120 ], [ 65535, %26 ]
  ret i32 %127
}

declare i32 @ucnv_extSimpleMatchToU_69(i32*, i8*, i32, i8 signext) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @ucnv_MBCSFromUnicodeWithOffsets_69(%struct.UConverterFromUnicodeArgs*, i32*) #0 {
  %3 = alloca i16*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i16*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i16*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i32*, align 8
  %12 = alloca i16*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i32*, align 8
  %15 = bitcast i16** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #11
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %12, align 8
  %16 = bitcast i8** %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #11
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %13, align 8
  %17 = bitcast i32** %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #11
  store i32* inttoptr (i64 -6148914691236517206 to i32*), i32** %14, align 8
  %18 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 2
  %19 = load %struct.UConverter*, %struct.UConverter** %18, align 8
  %20 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %19, i64 0, i32 31
  %21 = load i32, i32* %20, align 8
  %22 = icmp sgt i32 %21, -1
  br i1 %22, label %23, label %30

23:                                               ; preds = %2
  tail call void @ucnv_extContinueMatchFromU_69(%struct.UConverter* %19, %struct.UConverterFromUnicodeArgs* %0, i32 -1, i32* %1) #11
  %24 = load i32, i32* %1, align 4
  %25 = icmp slt i32 %24, 1
  br i1 %25, label %26, label %1544

26:                                               ; preds = %23
  %27 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %19, i64 0, i32 34
  %28 = load i8, i8* %27, align 1
  %29 = icmp slt i8 %28, 0
  br i1 %29, label %1544, label %30

30:                                               ; preds = %26, %2
  %31 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %19, i64 0, i32 6
  %32 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %31, align 8
  %33 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %32, i64 0, i32 8, i32 14
  %34 = load i8, i8* %33, align 4
  %35 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %32, i64 0, i32 8, i32 15
  %36 = load i8, i8* %35, align 1
  switch i8 %34, label %798 [
    i8 0, label %37
    i8 1, label %521
  ]

37:                                               ; preds = %30
  %38 = zext i8 %36 to i32
  %39 = and i32 %38, 2
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %798

41:                                               ; preds = %37
  %42 = and i32 %38, 1
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %356

44:                                               ; preds = %41
  %45 = bitcast i16** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #11
  %46 = bitcast i8** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #11
  %47 = bitcast i32** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #11
  %48 = load %struct.UConverter*, %struct.UConverter** %18, align 8
  %49 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 3
  %50 = bitcast i16** %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = bitcast i16** %9 to i64*
  store i64 %51, i64* %52, align 8
  %53 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 4
  %54 = load i16*, i16** %53, align 8
  %55 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 5
  %56 = bitcast i8** %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = bitcast i8** %10 to i64*
  store i64 %57, i64* %58, align 8
  %59 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 6
  %60 = bitcast i8** %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = sub i64 %61, %57
  %63 = trunc i64 %62 to i32
  %64 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 7
  %65 = bitcast i32** %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = bitcast i32** %11 to i64*
  store i64 %66, i64* %67, align 8
  %68 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %48, i64 0, i32 6
  %69 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %68, align 8
  %70 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %69, i64 0, i32 8, i32 8
  %71 = load i16*, i16** %70, align 8
  %72 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %48, i64 0, i32 7
  %73 = load i32, i32* %72, align 8
  %74 = and i32 %73, 16
  %75 = icmp eq i32 %74, 0
  %76 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %69, i64 0, i32 8, i32 12
  %77 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %69, i64 0, i32 8, i32 11
  %78 = select i1 %75, i8** %77, i8** %76
  %79 = bitcast i8** %78 to i16**
  %80 = load i16*, i16** %79, align 8
  %81 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %69, i64 0, i32 8, i32 18
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %48, i64 0, i32 11
  %84 = load i8, i8* %83, align 1
  %85 = icmp eq i8 %84, 0
  %86 = select i1 %85, i32 3072, i32 2048
  %87 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %48, i64 0, i32 17
  %88 = load i32, i32* %87, align 4
  %89 = icmp ne i32 %88, 0
  %90 = sext i1 %89 to i32
  %91 = inttoptr i64 %51 to i16*
  %92 = ptrtoint i16* %54 to i64
  %93 = sub i64 %92, %51
  %94 = lshr exact i64 %93, 1
  %95 = trunc i64 %94 to i32
  %96 = icmp slt i32 %95, %63
  %97 = select i1 %96, i32 %95, i32 %63
  %98 = icmp sgt i32 %97, 0
  %99 = and i1 %98, %89
  br i1 %99, label %160, label %100

100:                                              ; preds = %265, %44
  %101 = phi i64 [ %51, %44 ], [ %257, %265 ]
  %102 = phi i16* [ %91, %44 ], [ %256, %265 ]
  %103 = phi i32 [ %97, %44 ], [ %274, %265 ]
  %104 = phi i32 [ %88, %44 ], [ %255, %265 ]
  %105 = phi i32 [ %90, %44 ], [ %262, %265 ]
  %106 = icmp sgt i32 %103, 0
  br i1 %106, label %107, label %277

107:                                              ; preds = %100, %123
  %108 = phi i16* [ %126, %123 ], [ %102, %100 ]
  %109 = phi i32 [ %124, %123 ], [ %103, %100 ]
  %110 = getelementptr inbounds i16, i16* %108, i64 1
  store i16* %110, i16** %9, align 8
  %111 = load i16, i16* %108, align 2
  %112 = zext i16 %111 to i32
  %113 = icmp ult i16 %111, 128
  br i1 %113, label %114, label %127

114:                                              ; preds = %107
  %115 = lshr i32 %112, 2
  %116 = shl i32 1, %115
  %117 = and i32 %116, %82
  %118 = icmp eq i32 %117, 0
  br i1 %118, label %127, label %119

119:                                              ; preds = %114
  %120 = trunc i16 %111 to i8
  %121 = load i8*, i8** %10, align 8
  %122 = getelementptr inbounds i8, i8* %121, i64 1
  store i8* %122, i8** %10, align 8
  store i8 %120, i8* %121, align 1
  br label %123

123:                                              ; preds = %147, %119
  %124 = add nsw i32 %109, -1
  %125 = icmp sgt i32 %124, 0
  %126 = load i16*, i16** %9, align 8
  br i1 %125, label %107, label %275

127:                                              ; preds = %114, %107
  %128 = lshr i32 %112, 10
  %129 = zext i32 %128 to i64
  %130 = getelementptr inbounds i16, i16* %71, i64 %129
  %131 = load i16, i16* %130, align 2
  %132 = zext i16 %131 to i32
  %133 = lshr i32 %112, 4
  %134 = and i32 %133, 63
  %135 = add nuw nsw i32 %134, %132
  %136 = zext i32 %135 to i64
  %137 = getelementptr inbounds i16, i16* %71, i64 %136
  %138 = load i16, i16* %137, align 2
  %139 = zext i16 %138 to i32
  %140 = and i32 %112, 15
  %141 = add nuw nsw i32 %140, %139
  %142 = zext i32 %141 to i64
  %143 = getelementptr inbounds i16, i16* %80, i64 %142
  %144 = load i16, i16* %143, align 2
  %145 = zext i16 %144 to i32
  %146 = icmp ugt i32 %86, %145
  br i1 %146, label %151, label %147

147:                                              ; preds = %127
  %148 = trunc i16 %144 to i8
  %149 = load i8*, i8** %10, align 8
  %150 = getelementptr inbounds i8, i8* %149, i64 1
  store i8* %150, i8** %10, align 8
  store i8 %148, i8* %149, align 1
  br label %123

151:                                              ; preds = %127
  %152 = getelementptr inbounds i16, i16* %108, i64 1
  %153 = zext i16 %111 to i32
  %154 = ptrtoint i16* %152 to i64
  %155 = and i32 %153, 63488
  %156 = icmp eq i32 %155, 55296
  br i1 %156, label %157, label %185

157:                                              ; preds = %151
  %158 = and i32 %153, 1024
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %160, label %184

160:                                              ; preds = %157, %44
  %161 = phi i64 [ %51, %44 ], [ %154, %157 ]
  %162 = phi i16* [ %91, %44 ], [ %152, %157 ]
  %163 = phi i16* [ %91, %44 ], [ %102, %157 ]
  %164 = phi i32 [ %88, %44 ], [ %153, %157 ]
  %165 = phi i32 [ %90, %44 ], [ %105, %157 ]
  %166 = icmp ult i16* %162, %54
  br i1 %166, label %167, label %179

167:                                              ; preds = %160
  %168 = load i16, i16* %162, align 2
  %169 = zext i16 %168 to i32
  %170 = and i32 %169, 64512
  %171 = icmp eq i32 %170, 56320
  br i1 %171, label %173, label %172

172:                                              ; preds = %167
  store i32 12, i32* %1, align 4
  br label %277

173:                                              ; preds = %167
  %174 = getelementptr inbounds i16, i16* %162, i64 1
  store i16* %174, i16** %9, align 8
  %175 = shl i32 %164, 10
  %176 = add i32 %175, -56613888
  %177 = add i32 %176, %169
  %178 = ptrtoint i16* %174 to i64
  br label %185

179:                                              ; preds = %160
  %180 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 1
  %181 = load i8, i8* %180, align 2
  %182 = icmp eq i8 %181, 0
  br i1 %182, label %277, label %183

183:                                              ; preds = %179
  store i32 11, i32* %1, align 4
  br label %277

184:                                              ; preds = %157
  store i32 12, i32* %1, align 4
  br label %277

185:                                              ; preds = %173, %151
  %186 = phi i64 [ %178, %173 ], [ %154, %151 ]
  %187 = phi i16* [ %163, %173 ], [ %102, %151 ]
  %188 = phi i32 [ %177, %173 ], [ %153, %151 ]
  %189 = phi i32 [ %165, %173 ], [ %105, %151 ]
  %190 = icmp ult i32 %188, 65536
  %191 = select i1 %190, i32 1, i32 2
  %192 = load i32*, i32** %11, align 8
  %193 = icmp eq i32* %192, null
  br i1 %193, label %248, label %194

194:                                              ; preds = %185
  %195 = ptrtoint i16* %187 to i64
  %196 = sub i64 %186, %195
  %197 = lshr exact i64 %196, 1
  %198 = trunc i64 %197 to i32
  %199 = sub nsw i32 %198, %191
  %200 = icmp sgt i32 %199, 0
  br i1 %200, label %201, label %248

201:                                              ; preds = %194
  %202 = add nsw i32 %189, 1
  %203 = getelementptr inbounds i32, i32* %192, i64 1
  store i32* %203, i32** %11, align 8
  store i32 %189, i32* %192, align 4
  %204 = add nsw i32 %199, -1
  %205 = icmp sgt i32 %204, 0
  br i1 %205, label %206, label %245

206:                                              ; preds = %201
  %207 = xor i32 %191, 3
  %208 = add i32 %207, %198
  %209 = add i32 %198, -2
  %210 = sub i32 %209, %191
  %211 = and i32 %208, 3
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %223, label %213

213:                                              ; preds = %206, %213
  %214 = phi i32 [ %220, %213 ], [ %204, %206 ]
  %215 = phi i32 [ %218, %213 ], [ %202, %206 ]
  %216 = phi i32 [ %221, %213 ], [ %211, %206 ]
  %217 = load i32*, i32** %11, align 8
  %218 = add nsw i32 %215, 1
  %219 = getelementptr inbounds i32, i32* %217, i64 1
  store i32* %219, i32** %11, align 8
  store i32 %215, i32* %217, align 4
  %220 = add nsw i32 %214, -1
  %221 = add i32 %216, -1
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %223, label %213, !llvm.loop !5

223:                                              ; preds = %213, %206
  %224 = phi i32 [ %204, %206 ], [ %220, %213 ]
  %225 = phi i32 [ %202, %206 ], [ %218, %213 ]
  %226 = phi i32 [ undef, %206 ], [ %218, %213 ]
  %227 = icmp ult i32 %210, 3
  br i1 %227, label %245, label %228

228:                                              ; preds = %223, %228
  %229 = phi i32 [ %243, %228 ], [ %224, %223 ]
  %230 = phi i32 [ %241, %228 ], [ %225, %223 ]
  %231 = load i32*, i32** %11, align 8
  %232 = add nsw i32 %230, 1
  %233 = getelementptr inbounds i32, i32* %231, i64 1
  store i32* %233, i32** %11, align 8
  store i32 %230, i32* %231, align 4
  %234 = load i32*, i32** %11, align 8
  %235 = add nsw i32 %230, 2
  %236 = getelementptr inbounds i32, i32* %234, i64 1
  store i32* %236, i32** %11, align 8
  store i32 %232, i32* %234, align 4
  %237 = load i32*, i32** %11, align 8
  %238 = add nsw i32 %230, 3
  %239 = getelementptr inbounds i32, i32* %237, i64 1
  store i32* %239, i32** %11, align 8
  store i32 %235, i32* %237, align 4
  %240 = load i32*, i32** %11, align 8
  %241 = add nsw i32 %230, 4
  %242 = getelementptr inbounds i32, i32* %240, i64 1
  store i32* %242, i32** %11, align 8
  store i32 %238, i32* %240, align 4
  %243 = add nsw i32 %229, -4
  %244 = icmp sgt i32 %243, 0
  br i1 %244, label %228, label %245

245:                                              ; preds = %223, %228, %201
  %246 = phi i32 [ %202, %201 ], [ %226, %223 ], [ %241, %228 ]
  %247 = load i64, i64* %52, align 8
  br label %248

248:                                              ; preds = %245, %194, %185
  %249 = phi i64 [ %186, %185 ], [ %186, %194 ], [ %247, %245 ]
  %250 = phi i32 [ %189, %185 ], [ %189, %194 ], [ %246, %245 ]
  %251 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %68, align 8
  %252 = load i8*, i8** %59, align 8
  %253 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 1
  %254 = load i8, i8* %253, align 2
  %255 = call fastcc i32 @_ZL9_extFromUP10UConverterPK20UConverterSharedDataiPPKDsS5_PPhPKhPPiiaP10UErrorCode(%struct.UConverter* %48, %struct.UConverterSharedData* %251, i32 %188, i16** nonnull %9, i16* %54, i8** nonnull %10, i8* %252, i32** nonnull %11, i32 %250, i8 signext %254, i32* %1) #11
  %256 = load i16*, i16** %9, align 8
  %257 = ptrtoint i16* %256 to i64
  %258 = sub i64 %257, %249
  %259 = lshr exact i64 %258, 1
  %260 = trunc i64 %259 to i32
  %261 = add i32 %250, %191
  %262 = add i32 %261, %260
  %263 = load i32, i32* %1, align 4
  %264 = icmp slt i32 %263, 1
  br i1 %264, label %265, label %277

265:                                              ; preds = %248
  %266 = load i64, i64* %60, align 8
  %267 = load i64, i64* %58, align 8
  %268 = sub i64 %266, %267
  %269 = trunc i64 %268 to i32
  %270 = sub i64 %92, %257
  %271 = lshr exact i64 %270, 1
  %272 = trunc i64 %271 to i32
  %273 = icmp slt i32 %272, %269
  %274 = select i1 %273, i32 %272, i32 %269
  br label %100

275:                                              ; preds = %123
  %276 = ptrtoint i16* %126 to i64
  br label %277

277:                                              ; preds = %275, %248, %184, %183, %179, %172, %100
  %278 = phi i64 [ %257, %248 ], [ %154, %184 ], [ %161, %183 ], [ %161, %179 ], [ %161, %172 ], [ %101, %100 ], [ %276, %275 ]
  %279 = phi i16* [ %256, %248 ], [ %152, %184 ], [ %162, %183 ], [ %162, %179 ], [ %162, %172 ], [ %102, %100 ], [ %126, %275 ]
  %280 = phi i16* [ %256, %248 ], [ %102, %184 ], [ %163, %183 ], [ %163, %179 ], [ %163, %172 ], [ %102, %100 ], [ %102, %275 ]
  %281 = phi i32 [ %255, %248 ], [ %153, %184 ], [ %164, %183 ], [ %164, %179 ], [ %164, %172 ], [ %104, %100 ], [ 0, %275 ]
  %282 = phi i32 [ %262, %248 ], [ %105, %184 ], [ %165, %183 ], [ %165, %179 ], [ %165, %172 ], [ %105, %100 ], [ %105, %275 ]
  %283 = load i32, i32* %1, align 4
  %284 = icmp slt i32 %283, 1
  %285 = icmp ult i16* %279, %54
  %286 = and i1 %285, %284
  br i1 %286, label %287, label %292

287:                                              ; preds = %277
  %288 = load i8*, i8** %10, align 8
  %289 = load i8*, i8** %59, align 8
  %290 = icmp ult i8* %288, %289
  br i1 %290, label %292, label %291

291:                                              ; preds = %287
  store i32 15, i32* %1, align 4
  br label %292

292:                                              ; preds = %291, %287, %277
  %293 = phi i32 [ %283, %277 ], [ %283, %287 ], [ 15, %291 ]
  %294 = load i32*, i32** %11, align 8
  %295 = icmp eq i32* %294, null
  %296 = ptrtoint i32* %294 to i64
  br i1 %295, label %352, label %297

297:                                              ; preds = %292
  %298 = ptrtoint i16* %280 to i64
  %299 = sub i64 %278, %298
  %300 = icmp eq i64 %299, 0
  br i1 %300, label %352, label %301

301:                                              ; preds = %297
  %302 = ashr exact i64 %299, 1
  %303 = icmp eq i32 %293, 11
  %304 = zext i1 %303 to i64
  %305 = sub nsw i64 %302, %304
  %306 = icmp eq i64 %305, 0
  br i1 %306, label %352, label %307

307:                                              ; preds = %301
  %308 = getelementptr inbounds i32, i32* %294, i64 1
  store i32* %308, i32** %11, align 8
  store i32 %282, i32* %294, align 4
  %309 = add nsw i64 %305, -1
  %310 = icmp eq i64 %309, 0
  br i1 %310, label %349, label %311

311:                                              ; preds = %307
  %312 = xor i64 %304, 3
  %313 = add nsw i64 %302, %312
  %314 = add nsw i64 %302, -2
  %315 = sub i64 %314, %304
  %316 = and i64 %313, 3
  %317 = icmp eq i64 %316, 0
  br i1 %317, label %328, label %318

318:                                              ; preds = %311, %318
  %319 = phi i64 [ %325, %318 ], [ %309, %311 ]
  %320 = phi i32 [ %322, %318 ], [ %282, %311 ]
  %321 = phi i64 [ %326, %318 ], [ %316, %311 ]
  %322 = add nsw i32 %320, 1
  %323 = load i32*, i32** %11, align 8
  %324 = getelementptr inbounds i32, i32* %323, i64 1
  store i32* %324, i32** %11, align 8
  store i32 %322, i32* %323, align 4
  %325 = add i64 %319, -1
  %326 = add i64 %321, -1
  %327 = icmp eq i64 %326, 0
  br i1 %327, label %328, label %318, !llvm.loop !6

328:                                              ; preds = %318, %311
  %329 = phi i64 [ %309, %311 ], [ %325, %318 ]
  %330 = phi i32 [ %282, %311 ], [ %322, %318 ]
  %331 = icmp ult i64 %315, 3
  br i1 %331, label %349, label %332

332:                                              ; preds = %328, %332
  %333 = phi i64 [ %347, %332 ], [ %329, %328 ]
  %334 = phi i32 [ %344, %332 ], [ %330, %328 ]
  %335 = add nsw i32 %334, 1
  %336 = load i32*, i32** %11, align 8
  %337 = getelementptr inbounds i32, i32* %336, i64 1
  store i32* %337, i32** %11, align 8
  store i32 %335, i32* %336, align 4
  %338 = add nsw i32 %334, 2
  %339 = load i32*, i32** %11, align 8
  %340 = getelementptr inbounds i32, i32* %339, i64 1
  store i32* %340, i32** %11, align 8
  store i32 %338, i32* %339, align 4
  %341 = add nsw i32 %334, 3
  %342 = load i32*, i32** %11, align 8
  %343 = getelementptr inbounds i32, i32* %342, i64 1
  store i32* %343, i32** %11, align 8
  store i32 %341, i32* %342, align 4
  %344 = add nsw i32 %334, 4
  %345 = load i32*, i32** %11, align 8
  %346 = getelementptr inbounds i32, i32* %345, i64 1
  store i32* %346, i32** %11, align 8
  store i32 %344, i32* %345, align 4
  %347 = add i64 %333, -4
  %348 = icmp eq i64 %347, 0
  br i1 %348, label %349, label %332

349:                                              ; preds = %328, %332, %307
  %350 = load i64, i64* %52, align 8
  %351 = load i64, i64* %67, align 8
  br label %352

352:                                              ; preds = %292, %297, %301, %349
  %353 = phi i64 [ %351, %349 ], [ %296, %301 ], [ %296, %292 ], [ %296, %297 ]
  %354 = phi i64 [ %350, %349 ], [ %278, %301 ], [ %278, %292 ], [ %278, %297 ]
  store i32 %281, i32* %87, align 4
  store i64 %354, i64* %50, align 8
  %355 = load i64, i64* %58, align 8
  store i64 %355, i64* %56, align 8
  store i64 %353, i64* %65, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #11
  br label %1544

356:                                              ; preds = %41
  %357 = bitcast i16** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %357) #11
  %358 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %358) #11
  %359 = bitcast i32** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %359) #11
  %360 = load %struct.UConverter*, %struct.UConverter** %18, align 8
  %361 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 3
  %362 = bitcast i16** %361 to i64*
  %363 = load i64, i64* %362, align 8
  %364 = bitcast i16** %6 to i64*
  store i64 %363, i64* %364, align 8
  %365 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 4
  %366 = load i16*, i16** %365, align 8
  %367 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 5
  %368 = bitcast i8** %367 to i64*
  %369 = load i64, i64* %368, align 8
  %370 = bitcast i8** %7 to i64*
  store i64 %369, i64* %370, align 8
  %371 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 6
  %372 = bitcast i8** %371 to i64*
  %373 = load i64, i64* %372, align 8
  %374 = sub i64 %373, %369
  %375 = trunc i64 %374 to i32
  %376 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 7
  %377 = bitcast i32** %376 to i64*
  %378 = load i64, i64* %377, align 8
  %379 = bitcast i32** %8 to i64*
  store i64 %378, i64* %379, align 8
  %380 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %360, i64 0, i32 6
  %381 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %380, align 8
  %382 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %381, i64 0, i32 8, i32 8
  %383 = load i16*, i16** %382, align 8
  %384 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %360, i64 0, i32 7
  %385 = load i32, i32* %384, align 8
  %386 = and i32 %385, 16
  %387 = icmp eq i32 %386, 0
  %388 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %381, i64 0, i32 8, i32 12
  %389 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %381, i64 0, i32 8, i32 11
  %390 = select i1 %387, i8** %389, i8** %388
  %391 = bitcast i8** %390 to i16**
  %392 = load i16*, i16** %391, align 8
  %393 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %360, i64 0, i32 11
  %394 = load i8, i8* %393, align 1
  %395 = icmp eq i8 %394, 0
  %396 = select i1 %395, i32 3072, i32 2048
  %397 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %381, i64 0, i32 8, i32 15
  %398 = load i8, i8* %397, align 1
  %399 = and i8 %398, 1
  %400 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %360, i64 0, i32 17
  %401 = load i32, i32* %400, align 4
  %402 = icmp ne i32 %401, 0
  %403 = sext i1 %402 to i32
  %404 = icmp sgt i32 %375, 0
  %405 = and i1 %404, %402
  %406 = inttoptr i64 %363 to i16*
  br i1 %405, label %428, label %407

407:                                              ; preds = %509, %484, %356
  %408 = phi i64 [ %501, %509 ], [ %487, %484 ], [ %363, %356 ]
  %409 = phi i16* [ %510, %509 ], [ %486, %484 ], [ %406, %356 ]
  %410 = phi i32 [ %514, %509 ], [ %485, %484 ], [ %375, %356 ]
  %411 = phi i32 [ %500, %509 ], [ 0, %484 ], [ %401, %356 ]
  %412 = phi i32 [ %506, %509 ], [ %456, %484 ], [ %403, %356 ]
  %413 = phi i32 [ %506, %509 ], [ %456, %484 ], [ 0, %356 ]
  %414 = icmp ult i16* %409, %366
  br i1 %414, label %415, label %516

415:                                              ; preds = %407
  %416 = icmp sgt i32 %410, 0
  br i1 %416, label %417, label %515

417:                                              ; preds = %415
  %418 = getelementptr inbounds i16, i16* %409, i64 1
  store i16* %418, i16** %6, align 8
  %419 = load i16, i16* %409, align 2
  %420 = zext i16 %419 to i32
  %421 = add nsw i32 %413, 1
  %422 = and i32 %420, 63488
  %423 = icmp eq i32 %422, 55296
  %424 = ptrtoint i16* %418 to i64
  br i1 %423, label %425, label %451

425:                                              ; preds = %417
  %426 = and i32 %420, 1024
  %427 = icmp eq i32 %426, 0
  br i1 %427, label %428, label %450

428:                                              ; preds = %425, %356
  %429 = phi i64 [ %363, %356 ], [ %424, %425 ]
  %430 = phi i16* [ %406, %356 ], [ %418, %425 ]
  %431 = phi i32 [ %375, %356 ], [ %410, %425 ]
  %432 = phi i32 [ %401, %356 ], [ %420, %425 ]
  %433 = phi i32 [ %403, %356 ], [ %412, %425 ]
  %434 = phi i32 [ 0, %356 ], [ %421, %425 ]
  %435 = icmp ult i16* %430, %366
  br i1 %435, label %436, label %516

436:                                              ; preds = %428
  %437 = load i16, i16* %430, align 2
  %438 = zext i16 %437 to i32
  %439 = and i32 %438, 64512
  %440 = icmp eq i32 %439, 56320
  br i1 %440, label %441, label %449

441:                                              ; preds = %436
  %442 = getelementptr inbounds i16, i16* %430, i64 1
  store i16* %442, i16** %6, align 8
  %443 = add nsw i32 %434, 1
  %444 = shl i32 %432, 10
  %445 = add i32 %444, -56613888
  %446 = add i32 %445, %438
  %447 = icmp eq i8 %399, 0
  %448 = ptrtoint i16* %442 to i64
  br i1 %447, label %488, label %451

449:                                              ; preds = %436
  store i32 12, i32* %1, align 4
  br label %516

450:                                              ; preds = %425
  store i32 12, i32* %1, align 4
  br label %516

451:                                              ; preds = %441, %417
  %452 = phi i64 [ %424, %417 ], [ %448, %441 ]
  %453 = phi i32 [ %410, %417 ], [ %431, %441 ]
  %454 = phi i32 [ %420, %417 ], [ %446, %441 ]
  %455 = phi i32 [ %412, %417 ], [ %433, %441 ]
  %456 = phi i32 [ %421, %417 ], [ %443, %441 ]
  %457 = ashr i32 %454, 10
  %458 = sext i32 %457 to i64
  %459 = getelementptr inbounds i16, i16* %383, i64 %458
  %460 = load i16, i16* %459, align 2
  %461 = zext i16 %460 to i32
  %462 = lshr i32 %454, 4
  %463 = and i32 %462, 63
  %464 = add nuw nsw i32 %463, %461
  %465 = zext i32 %464 to i64
  %466 = getelementptr inbounds i16, i16* %383, i64 %465
  %467 = load i16, i16* %466, align 2
  %468 = zext i16 %467 to i32
  %469 = and i32 %454, 15
  %470 = add nuw nsw i32 %469, %468
  %471 = zext i32 %470 to i64
  %472 = getelementptr inbounds i16, i16* %392, i64 %471
  %473 = load i16, i16* %472, align 2
  %474 = zext i16 %473 to i32
  %475 = icmp ugt i32 %396, %474
  br i1 %475, label %488, label %476

476:                                              ; preds = %451
  %477 = trunc i16 %473 to i8
  %478 = load i8*, i8** %7, align 8
  %479 = getelementptr inbounds i8, i8* %478, i64 1
  store i8* %479, i8** %7, align 8
  store i8 %477, i8* %478, align 1
  %480 = load i32*, i32** %8, align 8
  %481 = icmp eq i32* %480, null
  br i1 %481, label %484, label %482

482:                                              ; preds = %476
  %483 = getelementptr inbounds i32, i32* %480, i64 1
  store i32* %483, i32** %8, align 8
  store i32 %455, i32* %480, align 4
  br label %484

484:                                              ; preds = %482, %476
  %485 = add nsw i32 %453, -1
  %486 = load i16*, i16** %6, align 8
  %487 = ptrtoint i16* %486 to i64
  br label %407

488:                                              ; preds = %451, %441
  %489 = phi i64 [ %452, %451 ], [ %448, %441 ]
  %490 = phi i32 [ %453, %451 ], [ %431, %441 ]
  %491 = phi i32 [ %454, %451 ], [ %446, %441 ]
  %492 = phi i32 [ %455, %451 ], [ %433, %441 ]
  %493 = phi i32 [ %456, %451 ], [ %443, %441 ]
  store i64 %489, i64* %362, align 8
  %494 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %380, align 8
  %495 = load i8*, i8** %7, align 8
  %496 = sext i32 %490 to i64
  %497 = getelementptr inbounds i8, i8* %495, i64 %496
  %498 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 1
  %499 = load i8, i8* %498, align 2
  %500 = call fastcc i32 @_ZL9_extFromUP10UConverterPK20UConverterSharedDataiPPKDsS5_PPhPKhPPiiaP10UErrorCode(%struct.UConverter* %360, %struct.UConverterSharedData* %494, i32 %491, i16** nonnull %6, i16* %366, i8** nonnull %7, i8* %497, i32** nonnull %8, i32 %492, i8 signext %499, i32* %1) #11
  %501 = load i64, i64* %364, align 8
  %502 = load i64, i64* %362, align 8
  %503 = sub i64 %501, %502
  %504 = lshr exact i64 %503, 1
  %505 = trunc i64 %504 to i32
  %506 = add nsw i32 %493, %505
  %507 = load i32, i32* %1, align 4
  %508 = icmp slt i32 %507, 1
  br i1 %508, label %509, label %516

509:                                              ; preds = %488
  %510 = inttoptr i64 %501 to i16*
  %511 = load i64, i64* %372, align 8
  %512 = load i64, i64* %370, align 8
  %513 = sub i64 %511, %512
  %514 = trunc i64 %513 to i32
  br label %407

515:                                              ; preds = %415
  store i32 15, i32* %1, align 4
  br label %516

516:                                              ; preds = %407, %428, %449, %450, %488, %515
  %517 = phi i64 [ %501, %488 ], [ %424, %450 ], [ %408, %515 ], [ %408, %407 ], [ %429, %428 ], [ %429, %449 ]
  %518 = phi i32 [ %500, %488 ], [ %420, %450 ], [ %411, %515 ], [ %411, %407 ], [ %432, %428 ], [ %432, %449 ]
  store i32 %518, i32* %400, align 4
  store i64 %517, i64* %362, align 8
  %519 = load i64, i64* %370, align 8
  store i64 %519, i64* %368, align 8
  %520 = load i64, i64* %379, align 8
  store i64 %520, i64* %377, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %359) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %358) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %357) #11
  br label %1544

521:                                              ; preds = %30
  %522 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %32, i64 0, i32 8, i32 16
  %523 = load i8, i8* %522, align 2
  %524 = icmp eq i8 %523, 0
  br i1 %524, label %798, label %525

525:                                              ; preds = %521
  %526 = bitcast i16** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %526) #11
  %527 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %527) #11
  %528 = bitcast i32** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %528) #11
  %529 = load %struct.UConverter*, %struct.UConverter** %18, align 8
  %530 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %529, i64 0, i32 6
  %531 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %530, align 8
  %532 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %531, i64 0, i32 8, i32 15
  %533 = load i8, i8* %532, align 1
  %534 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 3
  %535 = bitcast i16** %534 to i64*
  %536 = load i64, i64* %535, align 8
  %537 = bitcast i16** %3 to i64*
  store i64 %536, i64* %537, align 8
  %538 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 4
  %539 = load i16*, i16** %538, align 8
  %540 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 5
  %541 = bitcast i8** %540 to i64*
  %542 = load i64, i64* %541, align 8
  %543 = bitcast i8** %4 to i64*
  store i64 %542, i64* %543, align 8
  %544 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 6
  %545 = bitcast i8** %544 to i64*
  %546 = load i64, i64* %545, align 8
  %547 = sub i64 %546, %542
  %548 = trunc i64 %547 to i32
  %549 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 7
  %550 = bitcast i32** %549 to i64*
  %551 = load i64, i64* %550, align 8
  %552 = bitcast i32** %5 to i64*
  store i64 %551, i64* %552, align 8
  %553 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %531, i64 0, i32 8, i32 8
  %554 = load i16*, i16** %553, align 8
  %555 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %531, i64 0, i32 8, i32 9
  %556 = load i16*, i16** %555, align 8
  %557 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %529, i64 0, i32 7
  %558 = load i32, i32* %557, align 8
  %559 = and i32 %558, 16
  %560 = icmp eq i32 %559, 0
  %561 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %531, i64 0, i32 8, i32 12
  %562 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %531, i64 0, i32 8, i32 11
  %563 = select i1 %560, i8** %562, i8** %561
  %564 = load i8*, i8** %563, align 8
  %565 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %531, i64 0, i32 8, i32 18
  %566 = load i32, i32* %565, align 4
  %567 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %529, i64 0, i32 17
  %568 = load i32, i32* %567, align 4
  %569 = icmp ne i32 %568, 0
  %570 = sext i1 %569 to i32
  %571 = icmp sgt i32 %548, 0
  %572 = and i1 %571, %569
  %573 = inttoptr i64 %536 to i16*
  br i1 %572, label %647, label %574

574:                                              ; preds = %781, %735, %525
  %575 = phi i64 [ %536, %525 ], [ %785, %781 ], [ %727, %735 ]
  %576 = phi i16* [ %573, %525 ], [ %784, %781 ], [ %736, %735 ]
  %577 = phi i32 [ %548, %525 ], [ %783, %781 ], [ %740, %735 ]
  %578 = phi i32 [ %568, %525 ], [ 0, %781 ], [ %726, %735 ]
  %579 = phi i32 [ %570, %525 ], [ %744, %781 ], [ %732, %735 ]
  %580 = phi i32 [ 0, %525 ], [ %744, %781 ], [ %732, %735 ]
  %581 = icmp ult i16* %576, %539
  br i1 %581, label %582, label %793

582:                                              ; preds = %574
  %583 = icmp sgt i32 %577, 0
  br i1 %583, label %586, label %788

584:                                              ; preds = %609
  %585 = icmp sgt i32 %611, 0
  br i1 %585, label %586, label %786

586:                                              ; preds = %582, %584
  %587 = phi i32 [ %611, %584 ], [ %577, %582 ]
  %588 = phi i32 [ %610, %584 ], [ %579, %582 ]
  %589 = phi i32 [ %593, %584 ], [ %580, %582 ]
  %590 = phi i16* [ %612, %584 ], [ %576, %582 ]
  %591 = getelementptr inbounds i16, i16* %590, i64 1
  store i16* %591, i16** %3, align 8
  %592 = load i16, i16* %590, align 2
  %593 = add nsw i32 %589, 1
  %594 = icmp ult i16 %592, 128
  br i1 %594, label %595, label %614

595:                                              ; preds = %586
  %596 = lshr i16 %592, 2
  %597 = zext i16 %596 to i32
  %598 = shl i32 1, %597
  %599 = and i32 %598, %566
  %600 = icmp eq i32 %599, 0
  br i1 %600, label %619, label %601

601:                                              ; preds = %595
  %602 = trunc i16 %592 to i8
  %603 = load i8*, i8** %4, align 8
  %604 = getelementptr inbounds i8, i8* %603, i64 1
  store i8* %604, i8** %4, align 8
  store i8 %602, i8* %603, align 1
  %605 = load i32*, i32** %5, align 8
  %606 = icmp eq i32* %605, null
  br i1 %606, label %609, label %607

607:                                              ; preds = %601
  %608 = getelementptr inbounds i32, i32* %605, i64 1
  store i32* %608, i32** %5, align 8
  store i32 %588, i32* %605, align 4
  br label %609

609:                                              ; preds = %607, %601
  %610 = phi i32 [ %593, %607 ], [ %588, %601 ]
  %611 = add nsw i32 %587, -1
  %612 = load i16*, i16** %3, align 8
  %613 = icmp ult i16* %612, %539
  br i1 %613, label %584, label %791

614:                                              ; preds = %586
  %615 = getelementptr inbounds i16, i16* %590, i64 1
  %616 = ptrtoint i16* %615 to i64
  %617 = zext i16 %592 to i32
  %618 = icmp ult i16 %592, -10240
  br i1 %618, label %623, label %638

619:                                              ; preds = %595
  %620 = getelementptr inbounds i16, i16* %590, i64 1
  %621 = ptrtoint i16* %620 to i64
  %622 = zext i16 %592 to i32
  br label %623

623:                                              ; preds = %619, %614
  %624 = phi i64 [ %621, %619 ], [ %616, %614 ]
  %625 = phi i32 [ %622, %619 ], [ %617, %614 ]
  %626 = bitcast i8* %564 to i16*
  %627 = lshr i32 %625, 6
  %628 = zext i32 %627 to i64
  %629 = getelementptr inbounds i16, i16* %556, i64 %628
  %630 = load i16, i16* %629, align 2
  %631 = zext i16 %630 to i32
  %632 = and i32 %625, 63
  %633 = add nuw nsw i32 %632, %631
  %634 = zext i32 %633 to i64
  %635 = getelementptr inbounds i16, i16* %626, i64 %634
  %636 = load i16, i16* %635, align 2
  %637 = icmp eq i16 %636, 0
  br i1 %637, label %714, label %741

638:                                              ; preds = %614
  %639 = and i32 %617, 63488
  %640 = icmp eq i32 %639, 55296
  %641 = and i8 %533, 2
  %642 = icmp eq i8 %641, 0
  %643 = and i1 %642, %640
  br i1 %643, label %644, label %671

644:                                              ; preds = %638
  %645 = and i32 %617, 1024
  %646 = icmp eq i32 %645, 0
  br i1 %646, label %647, label %670

647:                                              ; preds = %644, %525
  %648 = phi i64 [ %536, %525 ], [ %616, %644 ]
  %649 = phi i16* [ %573, %525 ], [ %615, %644 ]
  %650 = phi i32 [ %548, %525 ], [ %587, %644 ]
  %651 = phi i32 [ %568, %525 ], [ %617, %644 ]
  %652 = phi i32 [ %570, %525 ], [ %588, %644 ]
  %653 = phi i32 [ 0, %525 ], [ %593, %644 ]
  %654 = icmp ult i16* %649, %539
  br i1 %654, label %655, label %793

655:                                              ; preds = %647
  %656 = load i16, i16* %649, align 2
  %657 = zext i16 %656 to i32
  %658 = and i32 %657, 64512
  %659 = icmp eq i32 %658, 56320
  br i1 %659, label %660, label %669

660:                                              ; preds = %655
  %661 = getelementptr inbounds i16, i16* %649, i64 1
  store i16* %661, i16** %3, align 8
  %662 = add nsw i32 %653, 1
  %663 = shl i32 %651, 10
  %664 = add i32 %663, -56613888
  %665 = add i32 %664, %657
  %666 = and i8 %533, 1
  %667 = icmp eq i8 %666, 0
  %668 = ptrtoint i16* %661 to i64
  br i1 %667, label %714, label %671

669:                                              ; preds = %655
  store i32 12, i32* %1, align 4
  br label %793

670:                                              ; preds = %644
  store i32 12, i32* %1, align 4
  br label %793

671:                                              ; preds = %660, %638
  %672 = phi i64 [ %616, %638 ], [ %668, %660 ]
  %673 = phi i32 [ %587, %638 ], [ %650, %660 ]
  %674 = phi i32 [ %617, %638 ], [ %665, %660 ]
  %675 = phi i32 [ %588, %638 ], [ %652, %660 ]
  %676 = phi i32 [ %593, %638 ], [ %662, %660 ]
  %677 = bitcast i16* %554 to i32*
  %678 = ashr i32 %674, 10
  %679 = sext i32 %678 to i64
  %680 = getelementptr inbounds i16, i16* %554, i64 %679
  %681 = load i16, i16* %680, align 2
  %682 = zext i16 %681 to i32
  %683 = lshr i32 %674, 4
  %684 = and i32 %683, 63
  %685 = add nuw nsw i32 %684, %682
  %686 = zext i32 %685 to i64
  %687 = getelementptr inbounds i32, i32* %677, i64 %686
  %688 = load i32, i32* %687, align 4
  %689 = bitcast i8* %564 to i16*
  %690 = shl i32 %688, 4
  %691 = and i32 %690, 1048560
  %692 = and i32 %674, 15
  %693 = or i32 %691, %692
  %694 = zext i32 %693 to i64
  %695 = getelementptr inbounds i16, i16* %689, i64 %694
  %696 = load i16, i16* %695, align 2
  %697 = or i32 %692, 16
  %698 = shl i32 1, %697
  %699 = and i32 %688, %698
  %700 = icmp eq i32 %699, 0
  br i1 %700, label %701, label %741

701:                                              ; preds = %671
  %702 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %529, i64 0, i32 11
  %703 = load i8, i8* %702, align 1
  %704 = icmp ne i8 %703, 0
  %705 = add nsw i32 %674, -57344
  %706 = icmp ult i32 %705, 6400
  %707 = or i1 %706, %704
  %708 = add nsw i32 %674, -983040
  %709 = icmp ult i32 %708, 131072
  %710 = or i1 %709, %707
  %711 = xor i1 %710, true
  %712 = icmp eq i16 %696, 0
  %713 = or i1 %712, %711
  br i1 %713, label %714, label %741

714:                                              ; preds = %701, %660, %623
  %715 = phi i64 [ %668, %660 ], [ %624, %623 ], [ %672, %701 ]
  %716 = phi i32 [ %650, %660 ], [ %587, %623 ], [ %673, %701 ]
  %717 = phi i32 [ %665, %660 ], [ %625, %623 ], [ %674, %701 ]
  %718 = phi i32 [ %652, %660 ], [ %588, %623 ], [ %675, %701 ]
  %719 = phi i32 [ %662, %660 ], [ %593, %623 ], [ %676, %701 ]
  store i64 %715, i64* %535, align 8
  %720 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %530, align 8
  %721 = load i8*, i8** %4, align 8
  %722 = sext i32 %716 to i64
  %723 = getelementptr inbounds i8, i8* %721, i64 %722
  %724 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 1
  %725 = load i8, i8* %724, align 2
  %726 = call fastcc i32 @_ZL9_extFromUP10UConverterPK20UConverterSharedDataiPPKDsS5_PPhPKhPPiiaP10UErrorCode(%struct.UConverter* %529, %struct.UConverterSharedData* %720, i32 %717, i16** nonnull %3, i16* %539, i8** nonnull %4, i8* %723, i32** nonnull %5, i32 %718, i8 signext %725, i32* %1) #11
  %727 = load i64, i64* %537, align 8
  %728 = load i64, i64* %535, align 8
  %729 = sub i64 %727, %728
  %730 = lshr exact i64 %729, 1
  %731 = trunc i64 %730 to i32
  %732 = add nsw i32 %719, %731
  %733 = load i32, i32* %1, align 4
  %734 = icmp slt i32 %733, 1
  br i1 %734, label %735, label %793

735:                                              ; preds = %714
  %736 = inttoptr i64 %727 to i16*
  %737 = load i64, i64* %545, align 8
  %738 = load i64, i64* %543, align 8
  %739 = sub i64 %737, %738
  %740 = trunc i64 %739 to i32
  br label %574

741:                                              ; preds = %701, %671, %623
  %742 = phi i32 [ %587, %623 ], [ %673, %701 ], [ %673, %671 ]
  %743 = phi i32 [ %588, %623 ], [ %675, %701 ], [ %675, %671 ]
  %744 = phi i32 [ %593, %623 ], [ %676, %701 ], [ %676, %671 ]
  %745 = phi i16 [ %636, %623 ], [ %696, %701 ], [ %696, %671 ]
  %746 = icmp ult i16 %745, 256
  br i1 %746, label %747, label %755

747:                                              ; preds = %741
  %748 = trunc i16 %745 to i8
  %749 = load i8*, i8** %4, align 8
  %750 = getelementptr inbounds i8, i8* %749, i64 1
  store i8* %750, i8** %4, align 8
  store i8 %748, i8* %749, align 1
  %751 = load i32*, i32** %5, align 8
  %752 = icmp eq i32* %751, null
  br i1 %752, label %781, label %753

753:                                              ; preds = %747
  %754 = getelementptr inbounds i32, i32* %751, i64 1
  store i32* %754, i32** %5, align 8
  store i32 %743, i32* %751, align 4
  br label %781

755:                                              ; preds = %741
  %756 = lshr i16 %745, 8
  %757 = trunc i16 %756 to i8
  %758 = load i8*, i8** %4, align 8
  %759 = getelementptr inbounds i8, i8* %758, i64 1
  store i8* %759, i8** %4, align 8
  store i8 %757, i8* %758, align 1
  %760 = icmp sgt i32 %742, 1
  br i1 %760, label %761, label %771

761:                                              ; preds = %755
  %762 = trunc i16 %745 to i8
  %763 = load i8*, i8** %4, align 8
  %764 = getelementptr inbounds i8, i8* %763, i64 1
  store i8* %764, i8** %4, align 8
  store i8 %762, i8* %763, align 1
  %765 = load i32*, i32** %5, align 8
  %766 = icmp eq i32* %765, null
  br i1 %766, label %781, label %767

767:                                              ; preds = %761
  %768 = getelementptr inbounds i32, i32* %765, i64 1
  store i32* %768, i32** %5, align 8
  store i32 %743, i32* %765, align 4
  %769 = load i32*, i32** %5, align 8
  %770 = getelementptr inbounds i32, i32* %769, i64 1
  store i32* %770, i32** %5, align 8
  store i32 %743, i32* %769, align 4
  br label %781

771:                                              ; preds = %755
  %772 = load i32*, i32** %5, align 8
  %773 = icmp eq i32* %772, null
  br i1 %773, label %776, label %774

774:                                              ; preds = %771
  %775 = getelementptr inbounds i32, i32* %772, i64 1
  store i32* %775, i32** %5, align 8
  store i32 %743, i32* %772, align 4
  br label %776

776:                                              ; preds = %774, %771
  %777 = trunc i16 %745 to i8
  %778 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %529, i64 0, i32 27, i64 0
  store i8 %777, i8* %778, align 8
  %779 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %529, i64 0, i32 21
  store i8 1, i8* %779, align 1
  store i32 15, i32* %1, align 4
  %780 = load i64, i64* %537, align 8
  br label %793

781:                                              ; preds = %761, %767, %747, %753
  %782 = phi i32 [ -1, %753 ], [ -1, %747 ], [ -2, %767 ], [ -2, %761 ]
  %783 = add nsw i32 %742, %782
  %784 = load i16*, i16** %3, align 8
  %785 = ptrtoint i16* %784 to i64
  br label %574

786:                                              ; preds = %584
  %787 = ptrtoint i16* %612 to i64
  br label %788

788:                                              ; preds = %786, %582
  %789 = phi i64 [ %575, %582 ], [ %787, %786 ]
  %790 = phi i32 [ %578, %582 ], [ 0, %786 ]
  store i32 15, i32* %1, align 4
  br label %793

791:                                              ; preds = %609
  %792 = ptrtoint i16* %612 to i64
  br label %793

793:                                              ; preds = %791, %574, %647, %669, %670, %714, %776, %788
  %794 = phi i64 [ %727, %714 ], [ %780, %776 ], [ %616, %670 ], [ %789, %788 ], [ %648, %647 ], [ %648, %669 ], [ %575, %574 ], [ %792, %791 ]
  %795 = phi i32 [ %726, %714 ], [ 0, %776 ], [ %617, %670 ], [ %790, %788 ], [ %651, %647 ], [ %651, %669 ], [ %578, %574 ], [ 0, %791 ]
  store i32 %795, i32* %567, align 4
  store i64 %794, i64* %535, align 8
  %796 = load i64, i64* %543, align 8
  store i64 %796, i64* %541, align 8
  %797 = load i64, i64* %552, align 8
  store i64 %797, i64* %550, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %528) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %527) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %526) #11
  br label %1544

798:                                              ; preds = %37, %30, %521
  %799 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 3
  %800 = bitcast i16** %799 to i64*
  %801 = load i64, i64* %800, align 8
  %802 = bitcast i16** %12 to i64*
  store i64 %801, i64* %802, align 8
  %803 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 4
  %804 = load i16*, i16** %803, align 8
  %805 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 5
  %806 = bitcast i8** %805 to i64*
  %807 = load i64, i64* %806, align 8
  %808 = bitcast i8** %13 to i64*
  store i64 %807, i64* %808, align 8
  %809 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 6
  %810 = bitcast i8** %809 to i64*
  %811 = load i64, i64* %810, align 8
  %812 = sub i64 %811, %807
  %813 = trunc i64 %812 to i32
  %814 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 7
  %815 = bitcast i32** %814 to i64*
  %816 = load i64, i64* %815, align 8
  %817 = bitcast i32** %14 to i64*
  store i64 %816, i64* %817, align 8
  %818 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %32, i64 0, i32 8, i32 8
  %819 = load i16*, i16** %818, align 8
  %820 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %32, i64 0, i32 8, i32 16
  %821 = load i8, i8* %820, align 2
  %822 = icmp eq i8 %821, 0
  %823 = inttoptr i64 %801 to i16*
  br i1 %822, label %827, label %824

824:                                              ; preds = %798
  %825 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %32, i64 0, i32 8, i32 9
  %826 = load i16*, i16** %825, align 8
  br label %827

827:                                              ; preds = %798, %824
  %828 = phi i16* [ %826, %824 ], [ null, %798 ]
  %829 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %19, i64 0, i32 7
  %830 = load i32, i32* %829, align 8
  %831 = and i32 %830, 16
  %832 = icmp eq i32 %831, 0
  %833 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %32, i64 0, i32 8, i32 12
  %834 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %32, i64 0, i32 8, i32 11
  %835 = select i1 %832, i8** %834, i8** %833
  %836 = load i8*, i8** %835, align 8
  %837 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %32, i64 0, i32 8, i32 18
  %838 = load i32, i32* %837, align 4
  %839 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %19, i64 0, i32 17
  %840 = load i32, i32* %839, align 4
  %841 = icmp eq i8 %34, 12
  br i1 %841, label %842, label %847

842:                                              ; preds = %827
  %843 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %19, i64 0, i32 16
  %844 = load i32, i32* %843, align 8
  %845 = icmp eq i32 %844, 0
  %846 = select i1 %845, i32 1, i32 %844
  br label %847

847:                                              ; preds = %827, %842
  %848 = phi i32 [ %846, %842 ], [ 0, %827 ]
  %849 = icmp ne i32 %840, 0
  %850 = sext i1 %849 to i32
  %851 = and i32 %830, 4096
  %852 = icmp eq i32 %851, 0
  br i1 %852, label %853, label %868

853:                                              ; preds = %847
  %854 = and i32 %830, 8192
  %855 = icmp eq i32 %854, 0
  br i1 %855, label %856, label %868

856:                                              ; preds = %853
  %857 = and i32 %830, 16384
  %858 = icmp eq i32 %857, 0
  %859 = select i1 %858, i8 0, i8 113
  %860 = select i1 %858, i8 15, i8 26
  %861 = select i1 %858, i32 1, i32 2
  %862 = trunc i32 %861 to i8
  %863 = and i32 %830, 16384
  %864 = icmp eq i32 %863, 0
  %865 = select i1 %864, i8 0, i8 112
  %866 = select i1 %864, i8 14, i8 26
  %867 = select i1 %864, i32 1, i32 2
  br label %868

868:                                              ; preds = %853, %847, %856
  %869 = phi i8 [ %862, %856 ], [ 2, %847 ], [ 1, %853 ]
  %870 = phi i32 [ %861, %856 ], [ 2, %847 ], [ 1, %853 ]
  %871 = phi i8 [ %860, %856 ], [ 10, %847 ], [ 41, %853 ]
  %872 = phi i8 [ %859, %856 ], [ 65, %847 ], [ 0, %853 ]
  %873 = phi i8 [ %865, %856 ], [ 66, %847 ], [ 0, %853 ]
  %874 = phi i8 [ %866, %856 ], [ 10, %847 ], [ 40, %853 ]
  %875 = phi i32 [ %867, %856 ], [ 2, %847 ], [ 1, %853 ]
  %876 = icmp sgt i32 %813, 0
  %877 = and i1 %876, %849
  br i1 %877, label %1098, label %878

878:                                              ; preds = %1365, %1435, %868
  %879 = phi i16* [ %823, %868 ], [ %1441, %1435 ], [ %1366, %1365 ]
  %880 = phi i32 [ %813, %868 ], [ %1436, %1435 ], [ %1370, %1365 ]
  %881 = phi i32 [ %840, %868 ], [ 0, %1435 ], [ %1354, %1365 ]
  %882 = phi i32 [ -1, %868 ], [ %1439, %1435 ], [ %1373, %1365 ]
  %883 = phi i32 [ %850, %868 ], [ %1440, %1435 ], [ %1374, %1365 ]
  %884 = phi i32 [ 0, %868 ], [ %1379, %1435 ], [ %1360, %1365 ]
  %885 = phi i32 [ 0, %868 ], [ %1381, %1435 ], [ %1347, %1365 ]
  %886 = phi i32 [ %848, %868 ], [ %1382, %1435 ], [ %1362, %1365 ]
  %887 = icmp ult i16* %879, %804
  br i1 %887, label %888, label %1493

888:                                              ; preds = %878
  %889 = icmp sgt i32 %880, 0
  br i1 %889, label %892, label %1489

890:                                              ; preds = %916
  %891 = icmp sgt i32 %919, 0
  br i1 %891, label %892, label %1489

892:                                              ; preds = %888, %890
  %893 = phi i32 [ %919, %890 ], [ %880, %888 ]
  %894 = phi i32 [ %917, %890 ], [ %882, %888 ]
  %895 = phi i32 [ %918, %890 ], [ %883, %888 ]
  %896 = phi i32 [ %900, %890 ], [ %884, %888 ]
  %897 = phi i16* [ %920, %890 ], [ %879, %888 ]
  %898 = getelementptr inbounds i16, i16* %897, i64 1
  store i16* %898, i16** %12, align 8
  %899 = load i16, i16* %897, align 2
  %900 = add nsw i32 %896, 1
  %901 = icmp ult i16 %899, 128
  br i1 %901, label %902, label %922

902:                                              ; preds = %892
  %903 = lshr i16 %899, 2
  %904 = zext i16 %903 to i32
  %905 = shl i32 1, %904
  %906 = and i32 %905, %838
  %907 = icmp eq i32 %906, 0
  br i1 %907, label %922, label %908

908:                                              ; preds = %902
  %909 = trunc i16 %899 to i8
  %910 = load i8*, i8** %13, align 8
  %911 = getelementptr inbounds i8, i8* %910, i64 1
  store i8* %911, i8** %13, align 8
  store i8 %909, i8* %910, align 1
  %912 = load i32*, i32** %14, align 8
  %913 = icmp eq i32* %912, null
  br i1 %913, label %916, label %914

914:                                              ; preds = %908
  %915 = getelementptr inbounds i32, i32* %912, i64 1
  store i32* %915, i32** %14, align 8
  store i32 %895, i32* %912, align 4
  br label %916

916:                                              ; preds = %908, %914
  %917 = phi i32 [ %895, %914 ], [ %894, %908 ]
  %918 = phi i32 [ %900, %914 ], [ %895, %908 ]
  %919 = add nsw i32 %893, -1
  %920 = load i16*, i16** %12, align 8
  %921 = icmp ult i16* %920, %804
  br i1 %921, label %890, label %1493

922:                                              ; preds = %902, %892
  %923 = getelementptr inbounds i16, i16* %897, i64 1
  %924 = ptrtoint i16* %923 to i64
  %925 = zext i16 %899 to i32
  %926 = icmp ult i16 %899, -10240
  %927 = icmp ne i16* %828, null
  %928 = and i1 %927, %926
  br i1 %928, label %929, label %1089

929:                                              ; preds = %922
  %930 = lshr i32 %925, 6
  %931 = zext i32 %930 to i64
  %932 = getelementptr inbounds i16, i16* %828, i64 %931
  %933 = load i16, i16* %932, align 2
  %934 = zext i16 %933 to i32
  switch i8 %34, label %1375 [
    i8 1, label %935
    i8 12, label %946
    i8 -37, label %987
    i8 2, label %997
    i8 3, label %1021
    i8 8, label %1036
    i8 9, label %1057
  ]

935:                                              ; preds = %929
  %936 = bitcast i8* %836 to i16*
  %937 = and i32 %925, 63
  %938 = add nuw nsw i32 %937, %934
  %939 = zext i32 %938 to i64
  %940 = getelementptr inbounds i16, i16* %936, i64 %939
  %941 = load i16, i16* %940, align 2
  %942 = zext i16 %941 to i32
  %943 = icmp ult i16 %941, 256
  br i1 %943, label %944, label %1375

944:                                              ; preds = %935
  %945 = icmp eq i16 %941, 0
  br i1 %945, label %1340, label %1375

946:                                              ; preds = %929
  %947 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %19, i64 0, i32 16
  store i32 %886, i32* %947, align 8
  %948 = bitcast i8* %836 to i16*
  %949 = and i32 %925, 63
  %950 = add nuw nsw i32 %949, %934
  %951 = zext i32 %950 to i64
  %952 = getelementptr inbounds i16, i16* %948, i64 %951
  %953 = load i16, i16* %952, align 2
  %954 = zext i16 %953 to i32
  %955 = icmp ult i16 %953, 256
  br i1 %955, label %956, label %973

956:                                              ; preds = %946
  %957 = icmp eq i16 %953, 0
  br i1 %957, label %1340, label %958

958:                                              ; preds = %956
  %959 = icmp slt i32 %886, 2
  br i1 %959, label %1375, label %960

960:                                              ; preds = %958
  %961 = trunc i32 %870 to i8
  switch i8 %961, label %1375 [
    i8 1, label %962
    i8 2, label %966
  ]

962:                                              ; preds = %960
  %963 = zext i8 %871 to i32
  %964 = shl nuw nsw i32 %963, 8
  %965 = or i32 %964, %954
  br label %1375

966:                                              ; preds = %960
  %967 = zext i8 %872 to i32
  %968 = shl nuw nsw i32 %967, 8
  %969 = zext i8 %871 to i32
  %970 = shl nuw nsw i32 %969, 16
  %971 = or i32 %968, %970
  %972 = or i32 %971, %954
  br label %1375

973:                                              ; preds = %946
  %974 = icmp eq i32 %886, 2
  br i1 %974, label %1375, label %975

975:                                              ; preds = %973
  switch i32 %875, label %1375 [
    i32 1, label %976
    i32 2, label %980
  ]

976:                                              ; preds = %975
  %977 = zext i8 %874 to i32
  %978 = shl nuw nsw i32 %977, 16
  %979 = or i32 %978, %954
  br label %1375

980:                                              ; preds = %975
  %981 = zext i8 %873 to i32
  %982 = shl nuw nsw i32 %981, 16
  %983 = zext i8 %874 to i32
  %984 = shl nuw nsw i32 %983, 24
  %985 = or i32 %984, %982
  %986 = or i32 %985, %954
  br label %1375

987:                                              ; preds = %929
  %988 = bitcast i8* %836 to i16*
  %989 = and i32 %925, 63
  %990 = add nuw nsw i32 %989, %934
  %991 = zext i32 %990 to i64
  %992 = getelementptr inbounds i16, i16* %988, i64 %991
  %993 = load i16, i16* %992, align 2
  %994 = icmp ult i16 %993, 256
  br i1 %994, label %1340, label %995

995:                                              ; preds = %987
  %996 = zext i16 %993 to i32
  br label %1375

997:                                              ; preds = %929
  %998 = and i32 %925, 63
  %999 = add nuw nsw i32 %998, %934
  %1000 = mul nuw nsw i32 %999, 3
  %1001 = zext i32 %1000 to i64
  %1002 = getelementptr inbounds i8, i8* %836, i64 %1001
  %1003 = load i8, i8* %1002, align 1
  %1004 = zext i8 %1003 to i32
  %1005 = shl nuw nsw i32 %1004, 16
  %1006 = getelementptr inbounds i8, i8* %1002, i64 1
  %1007 = load i8, i8* %1006, align 1
  %1008 = zext i8 %1007 to i32
  %1009 = shl nuw nsw i32 %1008, 8
  %1010 = or i32 %1009, %1005
  %1011 = getelementptr inbounds i8, i8* %1002, i64 2
  %1012 = load i8, i8* %1011, align 1
  %1013 = zext i8 %1012 to i32
  %1014 = or i32 %1010, %1013
  %1015 = icmp ult i32 %1014, 256
  br i1 %1015, label %1016, label %1018

1016:                                             ; preds = %997
  %1017 = icmp eq i32 %1014, 0
  br i1 %1017, label %1340, label %1375

1018:                                             ; preds = %997
  %1019 = icmp ult i32 %1014, 65536
  %1020 = select i1 %1019, i32 2, i32 3
  br label %1375

1021:                                             ; preds = %929
  %1022 = bitcast i8* %836 to i32*
  %1023 = and i32 %925, 63
  %1024 = add nuw nsw i32 %1023, %934
  %1025 = zext i32 %1024 to i64
  %1026 = getelementptr inbounds i32, i32* %1022, i64 %1025
  %1027 = load i32, i32* %1026, align 4
  %1028 = icmp ult i32 %1027, 256
  br i1 %1028, label %1029, label %1031

1029:                                             ; preds = %1021
  %1030 = icmp eq i32 %1027, 0
  br i1 %1030, label %1340, label %1375

1031:                                             ; preds = %1021
  %1032 = icmp ult i32 %1027, 65536
  br i1 %1032, label %1375, label %1033

1033:                                             ; preds = %1031
  %1034 = icmp ult i32 %1027, 16777216
  %1035 = select i1 %1034, i32 3, i32 4
  br label %1375

1036:                                             ; preds = %929
  %1037 = bitcast i8* %836 to i16*
  %1038 = and i32 %925, 63
  %1039 = add nuw nsw i32 %1038, %934
  %1040 = zext i32 %1039 to i64
  %1041 = getelementptr inbounds i16, i16* %1037, i64 %1040
  %1042 = load i16, i16* %1041, align 2
  %1043 = zext i16 %1042 to i32
  %1044 = icmp ult i16 %1042, 256
  br i1 %1044, label %1045, label %1047

1045:                                             ; preds = %1036
  %1046 = icmp eq i16 %1042, 0
  br i1 %1046, label %1340, label %1375

1047:                                             ; preds = %1036
  %1048 = icmp sgt i16 %1042, -1
  br i1 %1048, label %1049, label %1051

1049:                                             ; preds = %1047
  %1050 = or i32 %1043, 9338880
  br label %1375

1051:                                             ; preds = %1047
  %1052 = trunc i16 %1042 to i8
  %1053 = icmp sgt i8 %1052, -1
  %1054 = or i32 %1043, 9371776
  %1055 = select i1 %1053, i32 %1054, i32 %1043
  %1056 = select i1 %1053, i32 3, i32 2
  br label %1375

1057:                                             ; preds = %929
  %1058 = and i32 %925, 63
  %1059 = add nuw nsw i32 %1058, %934
  %1060 = mul nuw nsw i32 %1059, 3
  %1061 = zext i32 %1060 to i64
  %1062 = getelementptr inbounds i8, i8* %836, i64 %1061
  %1063 = load i8, i8* %1062, align 1
  %1064 = zext i8 %1063 to i32
  %1065 = shl nuw nsw i32 %1064, 16
  %1066 = getelementptr inbounds i8, i8* %1062, i64 1
  %1067 = load i8, i8* %1066, align 1
  %1068 = zext i8 %1067 to i32
  %1069 = shl nuw nsw i32 %1068, 8
  %1070 = or i32 %1069, %1065
  %1071 = getelementptr inbounds i8, i8* %1062, i64 2
  %1072 = load i8, i8* %1071, align 1
  %1073 = zext i8 %1072 to i32
  %1074 = or i32 %1070, %1073
  %1075 = icmp ult i32 %1074, 256
  br i1 %1075, label %1076, label %1078

1076:                                             ; preds = %1057
  %1077 = icmp eq i32 %1074, 0
  br i1 %1077, label %1340, label %1375

1078:                                             ; preds = %1057
  %1079 = icmp ult i32 %1074, 65536
  br i1 %1079, label %1375, label %1080

1080:                                             ; preds = %1078
  %1081 = icmp sgt i8 %1063, -1
  br i1 %1081, label %1082, label %1084

1082:                                             ; preds = %1080
  %1083 = or i32 %1074, -1904214016
  br label %1375

1084:                                             ; preds = %1080
  %1085 = icmp sgt i8 %1067, -1
  %1086 = or i32 %1074, -1895792640
  %1087 = select i1 %1085, i32 %1086, i32 %1074
  %1088 = select i1 %1085, i32 4, i32 3
  br label %1375

1089:                                             ; preds = %922
  %1090 = and i32 %925, 63488
  %1091 = icmp eq i32 %1090, 55296
  %1092 = and i8 %36, 2
  %1093 = icmp eq i8 %1092, 0
  %1094 = and i1 %1093, %1091
  br i1 %1094, label %1095, label %1128

1095:                                             ; preds = %1089
  %1096 = and i32 %925, 1024
  %1097 = icmp eq i32 %1096, 0
  br i1 %1097, label %1098, label %1127

1098:                                             ; preds = %1095, %868
  %1099 = phi i16* [ %823, %868 ], [ %923, %1095 ]
  %1100 = phi i32 [ %813, %868 ], [ %893, %1095 ]
  %1101 = phi i32 [ %840, %868 ], [ %925, %1095 ]
  %1102 = phi i32 [ -1, %868 ], [ %894, %1095 ]
  %1103 = phi i32 [ %850, %868 ], [ %895, %1095 ]
  %1104 = phi i32 [ 0, %868 ], [ %900, %1095 ]
  %1105 = phi i32 [ 0, %868 ], [ %885, %1095 ]
  %1106 = phi i32 [ %848, %868 ], [ %886, %1095 ]
  %1107 = icmp ult i16* %1099, %804
  br i1 %1107, label %1108, label %1493

1108:                                             ; preds = %1098
  %1109 = load i16, i16* %1099, align 2
  %1110 = zext i16 %1109 to i32
  %1111 = and i32 %1110, 64512
  %1112 = icmp eq i32 %1111, 56320
  br i1 %1112, label %1113, label %1124

1113:                                             ; preds = %1108
  %1114 = getelementptr inbounds i16, i16* %1099, i64 1
  store i16* %1114, i16** %12, align 8
  %1115 = add nsw i32 %1104, 1
  %1116 = shl i32 %1101, 10
  %1117 = add i32 %1116, -56613888
  %1118 = add i32 %1117, %1110
  %1119 = and i8 %36, 1
  %1120 = icmp eq i8 %1119, 0
  %1121 = ptrtoint i16* %1114 to i64
  br i1 %1120, label %1122, label %1125

1122:                                             ; preds = %1113
  %1123 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %19, i64 0, i32 16
  store i32 %1106, i32* %1123, align 8
  br label %1125

1124:                                             ; preds = %1108
  store i32 12, i32* %1, align 4
  br label %1493

1125:                                             ; preds = %1113, %1122
  %1126 = phi i32 [ 6, %1122 ], [ 0, %1113 ]
  switch i32 %1126, label %1544 [
    i32 0, label %1128
    i32 4, label %1493
    i32 6, label %1340
  ]

1127:                                             ; preds = %1095
  store i32 12, i32* %1, align 4
  br label %1493

1128:                                             ; preds = %1125, %1089
  %1129 = phi i64 [ %924, %1089 ], [ %1121, %1125 ]
  %1130 = phi i32 [ %893, %1089 ], [ %1100, %1125 ]
  %1131 = phi i32 [ %925, %1089 ], [ %1118, %1125 ]
  %1132 = phi i32 [ %894, %1089 ], [ %1102, %1125 ]
  %1133 = phi i32 [ %895, %1089 ], [ %1103, %1125 ]
  %1134 = phi i32 [ %900, %1089 ], [ %1115, %1125 ]
  %1135 = phi i32 [ %885, %1089 ], [ %1105, %1125 ]
  %1136 = phi i32 [ %886, %1089 ], [ %1106, %1125 ]
  %1137 = bitcast i16* %819 to i32*
  %1138 = ashr i32 %1131, 10
  %1139 = sext i32 %1138 to i64
  %1140 = getelementptr inbounds i16, i16* %819, i64 %1139
  %1141 = load i16, i16* %1140, align 2
  %1142 = zext i16 %1141 to i32
  %1143 = lshr i32 %1131, 4
  %1144 = and i32 %1143, 63
  %1145 = add nuw nsw i32 %1144, %1142
  %1146 = zext i32 %1145 to i64
  %1147 = getelementptr inbounds i32, i32* %1137, i64 %1146
  %1148 = load i32, i32* %1147, align 4
  switch i8 %34, label %1149 [
    i8 1, label %1151
    i8 12, label %1163
    i8 -37, label %1211
    i8 2, label %1225
    i8 3, label %1249
    i8 8, label %1264
    i8 9, label %1285
  ]

1149:                                             ; preds = %1128
  %1150 = and i32 %1131, 15
  br label %1317

1151:                                             ; preds = %1128
  %1152 = bitcast i8* %836 to i16*
  %1153 = shl i32 %1148, 4
  %1154 = and i32 %1153, 1048560
  %1155 = and i32 %1131, 15
  %1156 = or i32 %1154, %1155
  %1157 = zext i32 %1156 to i64
  %1158 = getelementptr inbounds i16, i16* %1152, i64 %1157
  %1159 = load i16, i16* %1158, align 2
  %1160 = zext i16 %1159 to i32
  %1161 = icmp ult i16 %1159, 256
  %1162 = select i1 %1161, i32 1, i32 2
  br label %1317

1163:                                             ; preds = %1128
  %1164 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %19, i64 0, i32 16
  store i32 %1136, i32* %1164, align 8
  %1165 = bitcast i8* %836 to i16*
  %1166 = shl i32 %1148, 4
  %1167 = and i32 %1166, 1048560
  %1168 = and i32 %1131, 15
  %1169 = or i32 %1167, %1168
  %1170 = zext i32 %1169 to i64
  %1171 = getelementptr inbounds i16, i16* %1165, i64 %1170
  %1172 = load i16, i16* %1171, align 2
  %1173 = zext i16 %1172 to i32
  %1174 = icmp ult i16 %1172, 256
  br i1 %1174, label %1175, label %1197

1175:                                             ; preds = %1163
  %1176 = icmp eq i16 %1172, 0
  br i1 %1176, label %1177, label %1182

1177:                                             ; preds = %1175
  %1178 = or i32 %1168, 16
  %1179 = shl i32 1, %1178
  %1180 = and i32 %1148, %1179
  %1181 = icmp eq i32 %1180, 0
  br i1 %1181, label %1317, label %1182

1182:                                             ; preds = %1177, %1175
  %1183 = icmp slt i32 %1136, 2
  br i1 %1183, label %1317, label %1184

1184:                                             ; preds = %1182
  %1185 = trunc i32 %870 to i8
  switch i8 %1185, label %1317 [
    i8 1, label %1186
    i8 2, label %1190
  ]

1186:                                             ; preds = %1184
  %1187 = zext i8 %871 to i32
  %1188 = shl nuw nsw i32 %1187, 8
  %1189 = or i32 %1188, %1173
  br label %1317

1190:                                             ; preds = %1184
  %1191 = zext i8 %872 to i32
  %1192 = shl nuw nsw i32 %1191, 8
  %1193 = zext i8 %871 to i32
  %1194 = shl nuw nsw i32 %1193, 16
  %1195 = or i32 %1192, %1194
  %1196 = or i32 %1195, %1173
  br label %1317

1197:                                             ; preds = %1163
  %1198 = icmp eq i32 %1136, 2
  br i1 %1198, label %1317, label %1199

1199:                                             ; preds = %1197
  switch i32 %875, label %1317 [
    i32 1, label %1200
    i32 2, label %1204
  ]

1200:                                             ; preds = %1199
  %1201 = zext i8 %874 to i32
  %1202 = shl nuw nsw i32 %1201, 16
  %1203 = or i32 %1202, %1173
  br label %1317

1204:                                             ; preds = %1199
  %1205 = zext i8 %873 to i32
  %1206 = shl nuw nsw i32 %1205, 16
  %1207 = zext i8 %874 to i32
  %1208 = shl nuw nsw i32 %1207, 24
  %1209 = or i32 %1208, %1206
  %1210 = or i32 %1209, %1173
  br label %1317

1211:                                             ; preds = %1128
  %1212 = bitcast i8* %836 to i16*
  %1213 = shl i32 %1148, 4
  %1214 = and i32 %1213, 1048560
  %1215 = and i32 %1131, 15
  %1216 = or i32 %1214, %1215
  %1217 = zext i32 %1216 to i64
  %1218 = getelementptr inbounds i16, i16* %1212, i64 %1217
  %1219 = load i16, i16* %1218, align 2
  %1220 = icmp ult i16 %1219, 256
  %1221 = select i1 %1220, i32 0, i32 %1148
  %1222 = select i1 %1220, i16 0, i16 %1219
  %1223 = zext i16 %1222 to i32
  %1224 = select i1 %1220, i32 0, i32 2
  br label %1317

1225:                                             ; preds = %1128
  %1226 = shl i32 %1148, 4
  %1227 = and i32 %1226, 1048560
  %1228 = and i32 %1131, 15
  %1229 = or i32 %1227, %1228
  %1230 = mul nuw nsw i32 %1229, 3
  %1231 = zext i32 %1230 to i64
  %1232 = getelementptr inbounds i8, i8* %836, i64 %1231
  %1233 = load i8, i8* %1232, align 1
  %1234 = zext i8 %1233 to i32
  %1235 = shl nuw nsw i32 %1234, 16
  %1236 = getelementptr inbounds i8, i8* %1232, i64 1
  %1237 = load i8, i8* %1236, align 1
  %1238 = zext i8 %1237 to i32
  %1239 = shl nuw nsw i32 %1238, 8
  %1240 = or i32 %1239, %1235
  %1241 = getelementptr inbounds i8, i8* %1232, i64 2
  %1242 = load i8, i8* %1241, align 1
  %1243 = zext i8 %1242 to i32
  %1244 = or i32 %1240, %1243
  %1245 = icmp ult i32 %1244, 256
  br i1 %1245, label %1317, label %1246

1246:                                             ; preds = %1225
  %1247 = icmp ult i32 %1244, 65536
  %1248 = select i1 %1247, i32 2, i32 3
  br label %1317

1249:                                             ; preds = %1128
  %1250 = bitcast i8* %836 to i32*
  %1251 = shl i32 %1148, 4
  %1252 = and i32 %1251, 1048560
  %1253 = and i32 %1131, 15
  %1254 = or i32 %1252, %1253
  %1255 = zext i32 %1254 to i64
  %1256 = getelementptr inbounds i32, i32* %1250, i64 %1255
  %1257 = load i32, i32* %1256, align 4
  %1258 = icmp ult i32 %1257, 256
  br i1 %1258, label %1317, label %1259

1259:                                             ; preds = %1249
  %1260 = icmp ult i32 %1257, 65536
  br i1 %1260, label %1317, label %1261

1261:                                             ; preds = %1259
  %1262 = icmp ult i32 %1257, 16777216
  %1263 = select i1 %1262, i32 3, i32 4
  br label %1317

1264:                                             ; preds = %1128
  %1265 = bitcast i8* %836 to i16*
  %1266 = shl i32 %1148, 4
  %1267 = and i32 %1266, 1048560
  %1268 = and i32 %1131, 15
  %1269 = or i32 %1267, %1268
  %1270 = zext i32 %1269 to i64
  %1271 = getelementptr inbounds i16, i16* %1265, i64 %1270
  %1272 = load i16, i16* %1271, align 2
  %1273 = zext i16 %1272 to i32
  %1274 = icmp ult i16 %1272, 256
  br i1 %1274, label %1317, label %1275

1275:                                             ; preds = %1264
  %1276 = icmp sgt i16 %1272, -1
  br i1 %1276, label %1277, label %1279

1277:                                             ; preds = %1275
  %1278 = or i32 %1273, 9338880
  br label %1317

1279:                                             ; preds = %1275
  %1280 = trunc i16 %1272 to i8
  %1281 = icmp sgt i8 %1280, -1
  %1282 = or i32 %1273, 9371776
  %1283 = select i1 %1281, i32 %1282, i32 %1273
  %1284 = select i1 %1281, i32 3, i32 2
  br label %1317

1285:                                             ; preds = %1128
  %1286 = shl i32 %1148, 4
  %1287 = and i32 %1286, 1048560
  %1288 = and i32 %1131, 15
  %1289 = or i32 %1287, %1288
  %1290 = mul nuw nsw i32 %1289, 3
  %1291 = zext i32 %1290 to i64
  %1292 = getelementptr inbounds i8, i8* %836, i64 %1291
  %1293 = load i8, i8* %1292, align 1
  %1294 = zext i8 %1293 to i32
  %1295 = shl nuw nsw i32 %1294, 16
  %1296 = getelementptr inbounds i8, i8* %1292, i64 1
  %1297 = load i8, i8* %1296, align 1
  %1298 = zext i8 %1297 to i32
  %1299 = shl nuw nsw i32 %1298, 8
  %1300 = or i32 %1299, %1295
  %1301 = getelementptr inbounds i8, i8* %1292, i64 2
  %1302 = load i8, i8* %1301, align 1
  %1303 = zext i8 %1302 to i32
  %1304 = or i32 %1300, %1303
  %1305 = icmp ult i32 %1304, 256
  br i1 %1305, label %1317, label %1306

1306:                                             ; preds = %1285
  %1307 = icmp ult i32 %1304, 65536
  br i1 %1307, label %1317, label %1308

1308:                                             ; preds = %1306
  %1309 = icmp sgt i8 %1293, -1
  br i1 %1309, label %1310, label %1312

1310:                                             ; preds = %1308
  %1311 = or i32 %1304, -1904214016
  br label %1317

1312:                                             ; preds = %1308
  %1313 = icmp sgt i8 %1297, -1
  %1314 = or i32 %1304, -1895792640
  %1315 = select i1 %1313, i32 %1314, i32 %1304
  %1316 = select i1 %1313, i32 4, i32 3
  br label %1317

1317:                                             ; preds = %1149, %1312, %1279, %1211, %1306, %1285, %1264, %1261, %1259, %1249, %1246, %1225, %1200, %1204, %1199, %1197, %1186, %1190, %1184, %1182, %1177, %1151, %1310, %1277
  %1318 = phi i32 [ %1150, %1149 ], [ %1288, %1312 ], [ %1268, %1279 ], [ %1215, %1211 ], [ %1288, %1306 ], [ %1288, %1285 ], [ %1268, %1264 ], [ %1253, %1261 ], [ %1253, %1259 ], [ %1253, %1249 ], [ %1228, %1246 ], [ %1228, %1225 ], [ %1168, %1200 ], [ %1168, %1204 ], [ %1168, %1199 ], [ %1168, %1197 ], [ %1168, %1186 ], [ %1168, %1190 ], [ %1168, %1184 ], [ %1168, %1182 ], [ %1168, %1177 ], [ %1155, %1151 ], [ %1288, %1310 ], [ %1268, %1277 ]
  %1319 = phi i32 [ 0, %1149 ], [ %1148, %1312 ], [ %1148, %1279 ], [ %1221, %1211 ], [ %1148, %1306 ], [ %1148, %1285 ], [ %1148, %1264 ], [ %1148, %1261 ], [ %1148, %1259 ], [ %1148, %1249 ], [ %1148, %1246 ], [ %1148, %1225 ], [ %1148, %1200 ], [ %1148, %1204 ], [ %1148, %1199 ], [ %1148, %1197 ], [ %1148, %1186 ], [ %1148, %1190 ], [ %1148, %1184 ], [ %1148, %1182 ], [ %1148, %1177 ], [ %1148, %1151 ], [ %1148, %1310 ], [ %1148, %1277 ]
  %1320 = phi i32 [ 0, %1149 ], [ %1315, %1312 ], [ %1283, %1279 ], [ %1223, %1211 ], [ %1304, %1306 ], [ %1304, %1285 ], [ %1273, %1264 ], [ %1257, %1261 ], [ %1257, %1259 ], [ %1257, %1249 ], [ %1244, %1246 ], [ %1244, %1225 ], [ %1203, %1200 ], [ %1210, %1204 ], [ %1173, %1199 ], [ %1173, %1197 ], [ %1189, %1186 ], [ %1196, %1190 ], [ %1173, %1184 ], [ %1173, %1182 ], [ 0, %1177 ], [ %1160, %1151 ], [ %1311, %1310 ], [ %1278, %1277 ]
  %1321 = phi i32 [ 0, %1149 ], [ %1316, %1312 ], [ %1284, %1279 ], [ %1224, %1211 ], [ 2, %1306 ], [ 1, %1285 ], [ 1, %1264 ], [ %1263, %1261 ], [ 2, %1259 ], [ 1, %1249 ], [ %1248, %1246 ], [ 1, %1225 ], [ 3, %1200 ], [ 4, %1204 ], [ %1135, %1199 ], [ 2, %1197 ], [ 2, %1186 ], [ 3, %1190 ], [ %1135, %1184 ], [ 1, %1182 ], [ 0, %1177 ], [ %1162, %1151 ], [ 4, %1310 ], [ 3, %1277 ]
  %1322 = phi i32 [ %1136, %1149 ], [ %1136, %1312 ], [ %1136, %1279 ], [ %1136, %1211 ], [ %1136, %1306 ], [ %1136, %1285 ], [ %1136, %1264 ], [ %1136, %1261 ], [ %1136, %1259 ], [ %1136, %1249 ], [ %1136, %1246 ], [ %1136, %1225 ], [ 2, %1200 ], [ 2, %1204 ], [ 2, %1199 ], [ 2, %1197 ], [ 1, %1186 ], [ 1, %1190 ], [ 1, %1184 ], [ %1136, %1182 ], [ %1136, %1177 ], [ %1136, %1151 ], [ %1136, %1310 ], [ %1136, %1277 ]
  %1323 = or i32 %1318, 16
  %1324 = shl i32 1, %1323
  %1325 = and i32 %1319, %1324
  %1326 = icmp eq i32 %1325, 0
  br i1 %1326, label %1327, label %1375

1327:                                             ; preds = %1317
  %1328 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %19, i64 0, i32 11
  %1329 = load i8, i8* %1328, align 1
  %1330 = icmp ne i8 %1329, 0
  %1331 = add nsw i32 %1131, -57344
  %1332 = icmp ult i32 %1331, 6400
  %1333 = or i1 %1332, %1330
  %1334 = add nsw i32 %1131, -983040
  %1335 = icmp ult i32 %1334, 131072
  %1336 = or i1 %1335, %1333
  %1337 = xor i1 %1336, true
  %1338 = icmp eq i32 %1320, 0
  %1339 = or i1 %1338, %1337
  br i1 %1339, label %1340, label %1375

1340:                                             ; preds = %1327, %1076, %1045, %1029, %1016, %987, %956, %944, %1125
  %1341 = phi i64 [ %1121, %1125 ], [ %924, %1076 ], [ %924, %1045 ], [ %924, %1029 ], [ %924, %1016 ], [ %924, %987 ], [ %924, %956 ], [ %924, %944 ], [ %1129, %1327 ]
  %1342 = phi i32 [ %1100, %1125 ], [ %893, %1076 ], [ %893, %1045 ], [ %893, %1029 ], [ %893, %1016 ], [ %893, %987 ], [ %893, %956 ], [ %893, %944 ], [ %1130, %1327 ]
  %1343 = phi i32 [ %1118, %1125 ], [ %925, %1076 ], [ %925, %1045 ], [ %925, %1029 ], [ %925, %1016 ], [ %925, %987 ], [ %925, %956 ], [ %925, %944 ], [ %1131, %1327 ]
  %1344 = phi i32 [ %1102, %1125 ], [ %894, %1076 ], [ %894, %1045 ], [ %894, %1029 ], [ %894, %1016 ], [ %894, %987 ], [ %894, %956 ], [ %894, %944 ], [ %1132, %1327 ]
  %1345 = phi i32 [ %1103, %1125 ], [ %895, %1076 ], [ %895, %1045 ], [ %895, %1029 ], [ %895, %1016 ], [ %895, %987 ], [ %895, %956 ], [ %895, %944 ], [ %1133, %1327 ]
  %1346 = phi i32 [ %1115, %1125 ], [ %900, %1076 ], [ %900, %1045 ], [ %900, %1029 ], [ %900, %1016 ], [ %900, %987 ], [ %900, %956 ], [ %900, %944 ], [ %1134, %1327 ]
  %1347 = phi i32 [ %1105, %1125 ], [ %885, %1076 ], [ %885, %1045 ], [ %885, %1029 ], [ %885, %1016 ], [ %885, %987 ], [ %885, %956 ], [ %885, %944 ], [ %1321, %1327 ]
  store i64 %1341, i64* %800, align 8
  %1348 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %31, align 8
  %1349 = load i8*, i8** %13, align 8
  %1350 = sext i32 %1342 to i64
  %1351 = getelementptr inbounds i8, i8* %1349, i64 %1350
  %1352 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 1
  %1353 = load i8, i8* %1352, align 2
  %1354 = call fastcc i32 @_ZL9_extFromUP10UConverterPK20UConverterSharedDataiPPKDsS5_PPhPKhPPiiaP10UErrorCode(%struct.UConverter* %19, %struct.UConverterSharedData* %1348, i32 %1343, i16** nonnull %12, i16* %804, i8** nonnull %13, i8* %1351, i32** nonnull %14, i32 %1345, i8 signext %1353, i32* %1)
  %1355 = load i64, i64* %802, align 8
  %1356 = load i64, i64* %800, align 8
  %1357 = sub i64 %1355, %1356
  %1358 = lshr exact i64 %1357, 1
  %1359 = trunc i64 %1358 to i32
  %1360 = add nsw i32 %1346, %1359
  %1361 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %19, i64 0, i32 16
  %1362 = load i32, i32* %1361, align 8
  %1363 = load i32, i32* %1, align 4
  %1364 = icmp slt i32 %1363, 1
  br i1 %1364, label %1365, label %1493

1365:                                             ; preds = %1340
  %1366 = inttoptr i64 %1355 to i16*
  %1367 = load i64, i64* %810, align 8
  %1368 = load i64, i64* %808, align 8
  %1369 = sub i64 %1367, %1368
  %1370 = trunc i64 %1369 to i32
  %1371 = load i32*, i32** %14, align 8
  %1372 = icmp eq i32* %1371, null
  %1373 = select i1 %1372, i32 %1344, i32 %1345
  %1374 = select i1 %1372, i32 %1345, i32 %1360
  br label %878

1375:                                             ; preds = %1084, %1051, %1317, %1327, %995, %1049, %1082, %944, %935, %958, %960, %966, %962, %973, %975, %980, %976, %1016, %1018, %1029, %1031, %1033, %1045, %1076, %1078, %929
  %1376 = phi i32 [ %893, %929 ], [ %893, %1078 ], [ %893, %1076 ], [ %893, %1045 ], [ %893, %1033 ], [ %893, %1031 ], [ %893, %1029 ], [ %893, %1018 ], [ %893, %1016 ], [ %893, %976 ], [ %893, %980 ], [ %893, %975 ], [ %893, %973 ], [ %893, %962 ], [ %893, %966 ], [ %893, %960 ], [ %893, %958 ], [ %893, %935 ], [ %893, %944 ], [ %893, %1082 ], [ %893, %1049 ], [ %893, %995 ], [ %1130, %1327 ], [ %1130, %1317 ], [ %893, %1051 ], [ %893, %1084 ]
  %1377 = phi i32 [ %894, %929 ], [ %894, %1078 ], [ %894, %1076 ], [ %894, %1045 ], [ %894, %1033 ], [ %894, %1031 ], [ %894, %1029 ], [ %894, %1018 ], [ %894, %1016 ], [ %894, %976 ], [ %894, %980 ], [ %894, %975 ], [ %894, %973 ], [ %894, %962 ], [ %894, %966 ], [ %894, %960 ], [ %894, %958 ], [ %894, %935 ], [ %894, %944 ], [ %894, %1082 ], [ %894, %1049 ], [ %894, %995 ], [ %1132, %1327 ], [ %1132, %1317 ], [ %894, %1051 ], [ %894, %1084 ]
  %1378 = phi i32 [ %895, %929 ], [ %895, %1078 ], [ %895, %1076 ], [ %895, %1045 ], [ %895, %1033 ], [ %895, %1031 ], [ %895, %1029 ], [ %895, %1018 ], [ %895, %1016 ], [ %895, %976 ], [ %895, %980 ], [ %895, %975 ], [ %895, %973 ], [ %895, %962 ], [ %895, %966 ], [ %895, %960 ], [ %895, %958 ], [ %895, %935 ], [ %895, %944 ], [ %895, %1082 ], [ %895, %1049 ], [ %895, %995 ], [ %1133, %1327 ], [ %1133, %1317 ], [ %895, %1051 ], [ %895, %1084 ]
  %1379 = phi i32 [ %900, %929 ], [ %900, %1078 ], [ %900, %1076 ], [ %900, %1045 ], [ %900, %1033 ], [ %900, %1031 ], [ %900, %1029 ], [ %900, %1018 ], [ %900, %1016 ], [ %900, %976 ], [ %900, %980 ], [ %900, %975 ], [ %900, %973 ], [ %900, %962 ], [ %900, %966 ], [ %900, %960 ], [ %900, %958 ], [ %900, %935 ], [ %900, %944 ], [ %900, %1082 ], [ %900, %1049 ], [ %900, %995 ], [ %1134, %1327 ], [ %1134, %1317 ], [ %900, %1051 ], [ %900, %1084 ]
  %1380 = phi i32 [ 0, %929 ], [ %1074, %1078 ], [ %1074, %1076 ], [ %1043, %1045 ], [ %1027, %1033 ], [ %1027, %1031 ], [ %1027, %1029 ], [ %1014, %1018 ], [ %1014, %1016 ], [ %979, %976 ], [ %986, %980 ], [ %954, %975 ], [ %954, %973 ], [ %965, %962 ], [ %972, %966 ], [ %954, %960 ], [ %954, %958 ], [ %942, %935 ], [ %942, %944 ], [ %1083, %1082 ], [ %1050, %1049 ], [ %996, %995 ], [ %1320, %1327 ], [ %1320, %1317 ], [ %1055, %1051 ], [ %1087, %1084 ]
  %1381 = phi i32 [ 0, %929 ], [ 2, %1078 ], [ 1, %1076 ], [ 1, %1045 ], [ %1035, %1033 ], [ 2, %1031 ], [ 1, %1029 ], [ %1020, %1018 ], [ 1, %1016 ], [ 3, %976 ], [ 4, %980 ], [ %885, %975 ], [ 2, %973 ], [ 2, %962 ], [ 3, %966 ], [ %885, %960 ], [ 1, %958 ], [ 2, %935 ], [ 1, %944 ], [ 4, %1082 ], [ 3, %1049 ], [ 2, %995 ], [ %1321, %1327 ], [ %1321, %1317 ], [ %1056, %1051 ], [ %1088, %1084 ]
  %1382 = phi i32 [ %886, %929 ], [ %886, %1078 ], [ %886, %1076 ], [ %886, %1045 ], [ %886, %1033 ], [ %886, %1031 ], [ %886, %1029 ], [ %886, %1018 ], [ %886, %1016 ], [ 2, %976 ], [ 2, %980 ], [ 2, %975 ], [ 2, %973 ], [ 1, %962 ], [ 1, %966 ], [ 1, %960 ], [ %886, %958 ], [ %886, %935 ], [ %886, %944 ], [ %886, %1082 ], [ %886, %1049 ], [ %886, %995 ], [ %1322, %1327 ], [ %1322, %1317 ], [ %886, %1051 ], [ %886, %1084 ]
  %1383 = icmp sgt i32 %1381, %1376
  br i1 %1383, label %1442, label %1384

1384:                                             ; preds = %1375
  %1385 = load i32*, i32** %14, align 8
  %1386 = icmp eq i32* %1385, null
  br i1 %1386, label %1387, label %1407

1387:                                             ; preds = %1384
  switch i32 %1381, label %1435 [
    i32 4, label %1388
    i32 3, label %1393
    i32 2, label %1398
    i32 1, label %1403
  ]

1388:                                             ; preds = %1387
  %1389 = lshr i32 %1380, 24
  %1390 = trunc i32 %1389 to i8
  %1391 = load i8*, i8** %13, align 8
  %1392 = getelementptr inbounds i8, i8* %1391, i64 1
  store i8* %1392, i8** %13, align 8
  store i8 %1390, i8* %1391, align 1
  br label %1393

1393:                                             ; preds = %1387, %1388
  %1394 = lshr i32 %1380, 16
  %1395 = trunc i32 %1394 to i8
  %1396 = load i8*, i8** %13, align 8
  %1397 = getelementptr inbounds i8, i8* %1396, i64 1
  store i8* %1397, i8** %13, align 8
  store i8 %1395, i8* %1396, align 1
  br label %1398

1398:                                             ; preds = %1387, %1393
  %1399 = lshr i32 %1380, 8
  %1400 = trunc i32 %1399 to i8
  %1401 = load i8*, i8** %13, align 8
  %1402 = getelementptr inbounds i8, i8* %1401, i64 1
  store i8* %1402, i8** %13, align 8
  store i8 %1400, i8* %1401, align 1
  br label %1403

1403:                                             ; preds = %1387, %1398
  %1404 = trunc i32 %1380 to i8
  %1405 = load i8*, i8** %13, align 8
  %1406 = getelementptr inbounds i8, i8* %1405, i64 1
  store i8* %1406, i8** %13, align 8
  store i8 %1404, i8* %1405, align 1
  br label %1435

1407:                                             ; preds = %1384
  switch i32 %1381, label %1435 [
    i32 4, label %1408
    i32 3, label %1415
    i32 2, label %1422
    i32 1, label %1429
  ]

1408:                                             ; preds = %1407
  %1409 = lshr i32 %1380, 24
  %1410 = trunc i32 %1409 to i8
  %1411 = load i8*, i8** %13, align 8
  %1412 = getelementptr inbounds i8, i8* %1411, i64 1
  store i8* %1412, i8** %13, align 8
  store i8 %1410, i8* %1411, align 1
  %1413 = load i32*, i32** %14, align 8
  %1414 = getelementptr inbounds i32, i32* %1413, i64 1
  store i32* %1414, i32** %14, align 8
  store i32 %1378, i32* %1413, align 4
  br label %1415

1415:                                             ; preds = %1407, %1408
  %1416 = lshr i32 %1380, 16
  %1417 = trunc i32 %1416 to i8
  %1418 = load i8*, i8** %13, align 8
  %1419 = getelementptr inbounds i8, i8* %1418, i64 1
  store i8* %1419, i8** %13, align 8
  store i8 %1417, i8* %1418, align 1
  %1420 = load i32*, i32** %14, align 8
  %1421 = getelementptr inbounds i32, i32* %1420, i64 1
  store i32* %1421, i32** %14, align 8
  store i32 %1378, i32* %1420, align 4
  br label %1422

1422:                                             ; preds = %1407, %1415
  %1423 = lshr i32 %1380, 8
  %1424 = trunc i32 %1423 to i8
  %1425 = load i8*, i8** %13, align 8
  %1426 = getelementptr inbounds i8, i8* %1425, i64 1
  store i8* %1426, i8** %13, align 8
  store i8 %1424, i8* %1425, align 1
  %1427 = load i32*, i32** %14, align 8
  %1428 = getelementptr inbounds i32, i32* %1427, i64 1
  store i32* %1428, i32** %14, align 8
  store i32 %1378, i32* %1427, align 4
  br label %1429

1429:                                             ; preds = %1407, %1422
  %1430 = trunc i32 %1380 to i8
  %1431 = load i8*, i8** %13, align 8
  %1432 = getelementptr inbounds i8, i8* %1431, i64 1
  store i8* %1432, i8** %13, align 8
  store i8 %1430, i8* %1431, align 1
  %1433 = load i32*, i32** %14, align 8
  %1434 = getelementptr inbounds i32, i32* %1433, i64 1
  store i32* %1434, i32** %14, align 8
  store i32 %1378, i32* %1433, align 4
  br label %1435

1435:                                             ; preds = %1407, %1429, %1387, %1403
  %1436 = sub nsw i32 %1376, %1381
  %1437 = load i32*, i32** %14, align 8
  %1438 = icmp eq i32* %1437, null
  %1439 = select i1 %1438, i32 %1377, i32 %1378
  %1440 = select i1 %1438, i32 %1378, i32 %1379
  %1441 = load i16*, i16** %12, align 8
  br label %878

1442:                                             ; preds = %1375
  %1443 = sub nsw i32 %1381, %1376
  %1444 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %19, i64 0, i32 27, i64 0
  switch i32 %1443, label %1457 [
    i32 3, label %1445
    i32 2, label %1449
    i32 1, label %1454
  ]

1445:                                             ; preds = %1442
  %1446 = lshr i32 %1380, 16
  %1447 = trunc i32 %1446 to i8
  %1448 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %19, i64 0, i32 27, i64 1
  store i8 %1447, i8* %1444, align 1
  br label %1449

1449:                                             ; preds = %1442, %1445
  %1450 = phi i8* [ %1444, %1442 ], [ %1448, %1445 ]
  %1451 = lshr i32 %1380, 8
  %1452 = trunc i32 %1451 to i8
  %1453 = getelementptr inbounds i8, i8* %1450, i64 1
  store i8 %1452, i8* %1450, align 1
  br label %1454

1454:                                             ; preds = %1442, %1449
  %1455 = phi i8* [ %1444, %1442 ], [ %1453, %1449 ]
  %1456 = trunc i32 %1380 to i8
  store i8 %1456, i8* %1455, align 1
  br label %1457

1457:                                             ; preds = %1454, %1442
  %1458 = trunc i32 %1443 to i8
  %1459 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %19, i64 0, i32 21
  store i8 %1458, i8* %1459, align 1
  %1460 = shl nsw i32 %1443, 3
  %1461 = lshr i32 %1380, %1460
  switch i32 %1376, label %1488 [
    i32 3, label %1462
    i32 2, label %1471
    i32 1, label %1480
  ]

1462:                                             ; preds = %1457
  %1463 = lshr i32 %1461, 16
  %1464 = trunc i32 %1463 to i8
  %1465 = load i8*, i8** %13, align 8
  %1466 = getelementptr inbounds i8, i8* %1465, i64 1
  store i8* %1466, i8** %13, align 8
  store i8 %1464, i8* %1465, align 1
  %1467 = load i32*, i32** %14, align 8
  %1468 = icmp eq i32* %1467, null
  br i1 %1468, label %1471, label %1469

1469:                                             ; preds = %1462
  %1470 = getelementptr inbounds i32, i32* %1467, i64 1
  store i32* %1470, i32** %14, align 8
  store i32 %1378, i32* %1467, align 4
  br label %1471

1471:                                             ; preds = %1462, %1469, %1457
  %1472 = lshr i32 %1461, 8
  %1473 = trunc i32 %1472 to i8
  %1474 = load i8*, i8** %13, align 8
  %1475 = getelementptr inbounds i8, i8* %1474, i64 1
  store i8* %1475, i8** %13, align 8
  store i8 %1473, i8* %1474, align 1
  %1476 = load i32*, i32** %14, align 8
  %1477 = icmp eq i32* %1476, null
  br i1 %1477, label %1480, label %1478

1478:                                             ; preds = %1471
  %1479 = getelementptr inbounds i32, i32* %1476, i64 1
  store i32* %1479, i32** %14, align 8
  store i32 %1378, i32* %1476, align 4
  br label %1480

1480:                                             ; preds = %1471, %1478, %1457
  %1481 = trunc i32 %1461 to i8
  %1482 = load i8*, i8** %13, align 8
  %1483 = getelementptr inbounds i8, i8* %1482, i64 1
  store i8* %1483, i8** %13, align 8
  store i8 %1481, i8* %1482, align 1
  %1484 = load i32*, i32** %14, align 8
  %1485 = icmp eq i32* %1484, null
  br i1 %1485, label %1488, label %1486

1486:                                             ; preds = %1480
  %1487 = getelementptr inbounds i32, i32* %1484, i64 1
  store i32* %1487, i32** %14, align 8
  store i32 %1378, i32* %1484, align 4
  br label %1488

1488:                                             ; preds = %1480, %1457, %1486
  store i32 15, i32* %1, align 4
  br label %1493

1489:                                             ; preds = %890, %888
  %1490 = phi i32 [ %882, %888 ], [ %917, %890 ]
  %1491 = phi i32 [ %881, %888 ], [ 0, %890 ]
  %1492 = phi i32 [ %880, %888 ], [ %919, %890 ]
  store i32 15, i32* %1, align 4
  br label %1493

1493:                                             ; preds = %916, %878, %1124, %1340, %1098, %1489, %1488, %1127, %1125
  %1494 = phi i32 [ %1342, %1340 ], [ 0, %1488 ], [ %893, %1127 ], [ %1492, %1489 ], [ %1100, %1125 ], [ %1100, %1098 ], [ %1100, %1124 ], [ %880, %878 ], [ %919, %916 ]
  %1495 = phi i32 [ %1354, %1340 ], [ 0, %1488 ], [ %925, %1127 ], [ %1491, %1489 ], [ %1118, %1125 ], [ %1101, %1098 ], [ %1101, %1124 ], [ %881, %878 ], [ 0, %916 ]
  %1496 = phi i32 [ %1344, %1340 ], [ %1377, %1488 ], [ %894, %1127 ], [ %1490, %1489 ], [ %1102, %1125 ], [ %1102, %1098 ], [ %1102, %1124 ], [ %882, %878 ], [ %917, %916 ]
  %1497 = phi i32 [ %1362, %1340 ], [ %1382, %1488 ], [ %886, %1127 ], [ %886, %1489 ], [ %1106, %1125 ], [ %1106, %1098 ], [ %1106, %1124 ], [ %886, %878 ], [ %886, %916 ]
  %1498 = load i32, i32* %1, align 4
  %1499 = icmp slt i32 %1498, 1
  %1500 = icmp eq i32 %1497, 2
  %1501 = and i1 %841, %1500
  %1502 = and i1 %1499, %1501
  br i1 %1502, label %1503, label %1538

1503:                                             ; preds = %1493
  %1504 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 1
  %1505 = load i8, i8* %1504, align 2
  %1506 = icmp eq i8 %1505, 0
  br i1 %1506, label %1538, label %1507

1507:                                             ; preds = %1503
  %1508 = load i16*, i16** %12, align 8
  %1509 = icmp uge i16* %1508, %804
  %1510 = icmp eq i32 %1495, 0
  %1511 = and i1 %1510, %1509
  br i1 %1511, label %1512, label %1538

1512:                                             ; preds = %1507
  %1513 = icmp sgt i32 %1494, 0
  br i1 %1513, label %1514, label %1531

1514:                                             ; preds = %1512
  %1515 = load i8*, i8** %13, align 8
  %1516 = getelementptr inbounds i8, i8* %1515, i64 1
  store i8* %1516, i8** %13, align 8
  store i8 %871, i8* %1515, align 1
  %1517 = icmp eq i32 %870, 2
  br i1 %1517, label %1518, label %1526

1518:                                             ; preds = %1514
  %1519 = icmp slt i32 %1494, 2
  br i1 %1519, label %1520, label %1523

1520:                                             ; preds = %1518
  %1521 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %19, i64 0, i32 27, i64 0
  store i8 %872, i8* %1521, align 8
  %1522 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %19, i64 0, i32 21
  store i8 1, i8* %1522, align 1
  store i32 15, i32* %1, align 4
  br label %1526

1523:                                             ; preds = %1518
  %1524 = load i8*, i8** %13, align 8
  %1525 = getelementptr inbounds i8, i8* %1524, i64 1
  store i8* %1525, i8** %13, align 8
  store i8 %872, i8* %1524, align 1
  br label %1526

1526:                                             ; preds = %1520, %1523, %1514
  %1527 = load i32*, i32** %14, align 8
  %1528 = icmp eq i32* %1527, null
  br i1 %1528, label %1538, label %1529

1529:                                             ; preds = %1526
  %1530 = getelementptr inbounds i32, i32* %1527, i64 1
  store i32* %1530, i32** %14, align 8
  store i32 %1496, i32* %1527, align 4
  br label %1538

1531:                                             ; preds = %1512
  %1532 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %19, i64 0, i32 27, i64 0
  store i8 %871, i8* %1532, align 8
  %1533 = icmp eq i32 %870, 2
  br i1 %1533, label %1534, label %1536

1534:                                             ; preds = %1531
  %1535 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %19, i64 0, i32 27, i64 1
  store i8 %872, i8* %1535, align 1
  br label %1536

1536:                                             ; preds = %1534, %1531
  %1537 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %19, i64 0, i32 21
  store i8 %869, i8* %1537, align 1
  store i32 15, i32* %1, align 4
  br label %1538

1538:                                             ; preds = %1536, %1529, %1526, %1493, %1503, %1507
  %1539 = phi i32 [ 2, %1507 ], [ 2, %1503 ], [ %1497, %1493 ], [ 1, %1526 ], [ 1, %1529 ], [ 1, %1536 ]
  store i32 %1495, i32* %839, align 4
  %1540 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %19, i64 0, i32 16
  store i32 %1539, i32* %1540, align 8
  %1541 = load i64, i64* %802, align 8
  store i64 %1541, i64* %800, align 8
  %1542 = load i64, i64* %808, align 8
  store i64 %1542, i64* %806, align 8
  %1543 = load i64, i64* %817, align 8
  store i64 %1543, i64* %815, align 8
  br label %1544

1544:                                             ; preds = %352, %516, %26, %23, %1538, %1125, %793
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #11
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #11
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @ucnv_extContinueMatchFromU_69(%struct.UConverter*, %struct.UConverterFromUnicodeArgs*, i32, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZL9_extFromUP10UConverterPK20UConverterSharedDataiPPKDsS5_PPhPKhPPiiaP10UErrorCode(%struct.UConverter*, %struct.UConverterSharedData* nocapture readonly, i32, i16**, i16*, i8**, i8*, i32**, i32, i8 signext, i32*) unnamed_addr #0 {
  %12 = alloca i32, align 4
  %13 = bitcast i32* %12 to [4 x i8]*
  %14 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 25
  store i8 0, i8* %14, align 1
  %15 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %1, i64 0, i32 8, i32 22
  %16 = load i32*, i32** %15, align 8
  %17 = icmp eq i32* %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %11
  %19 = tail call signext i8 @ucnv_extInitialMatchFromU_69(%struct.UConverter* %0, i32* nonnull %16, i32 %2, i16** %3, i16* %4, i8** %5, i8* %6, i32** %7, i32 %8, i8 signext %9, i32* %10) #11
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %59

21:                                               ; preds = %18, %11
  %22 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %23 = load i32, i32* %22, align 8
  %24 = trunc i32 %23 to i16
  %25 = icmp slt i16 %24, 0
  br i1 %25, label %26, label %58

26:                                               ; preds = %21
  %27 = icmp ult i32 %2, 65536
  br i1 %27, label %56, label %28

28:                                               ; preds = %26
  %29 = icmp ugt i32 %2, 1114111
  br i1 %29, label %58, label %30

30:                                               ; preds = %102, %95, %88, %81, %78, %71, %100, %93, %86, %76, %69, %65, %61, %28
  %31 = phi i32* [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 0, i64 0), %28 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 1, i64 0), %61 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 2, i64 0), %65 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 3, i64 0), %69 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 5, i64 0), %76 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 8, i64 0), %86 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 10, i64 0), %93 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 12, i64 0), %100 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 4, i64 0), %71 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 6, i64 0), %78 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 7, i64 0), %81 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 9, i64 0), %88 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 11, i64 0), %95 ], [ getelementptr inbounds ([14 x [4 x i32]], [14 x [4 x i32]]* @_ZL13gb18030Ranges, i64 0, i64 13, i64 0), %102 ]
  %32 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #11
  %33 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 0, i64 1
  %34 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 0, i64 2
  %35 = getelementptr inbounds [4 x i8], [4 x i8]* %13, i64 0, i64 3
  %36 = getelementptr inbounds i32, i32* %31, i64 2
  %37 = load i32, i32* %36, align 4
  %38 = add i32 %37, -1687218
  %39 = load i32, i32* %31, align 4
  %40 = sub i32 %2, %39
  %41 = add i32 %38, %40
  %42 = urem i32 %41, 10
  %43 = trunc i32 %42 to i8
  %44 = or i8 %43, 48
  store i8 %44, i8* %35, align 1
  %45 = udiv i32 %41, 10
  %46 = urem i32 %45, 126
  %47 = trunc i32 %46 to i8
  %48 = add nuw nsw i8 %47, -127
  store i8 %48, i8* %34, align 2
  %49 = udiv i32 %41, 1260
  %50 = urem i32 %49, 10
  %51 = trunc i32 %50 to i8
  %52 = or i8 %51, 48
  store i8 %52, i8* %33, align 1
  %53 = udiv i32 %41, 12600
  %54 = trunc i32 %53 to i8
  %55 = add i8 %54, -127
  store i8 %55, i8* %32, align 4
  call void @ucnv_fromUWriteBytes_69(%struct.UConverter* %0, i8* nonnull %32, i32 4, i8** %5, i8* %6, i32** %7, i32 %8, i32* %10) #11
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #11
  br label %59

56:                                               ; preds = %26
  %57 = icmp ult i32 %2, 40870
  br i1 %57, label %63, label %61

58:                                               ; preds = %28, %91, %67, %63, %74, %84, %98, %102, %21
  store i32 10, i32* %10, align 4
  br label %59

59:                                               ; preds = %30, %18, %58
  %60 = phi i32 [ %2, %58 ], [ 0, %18 ], [ 0, %30 ]
  ret i32 %60

61:                                               ; preds = %56
  %62 = icmp ugt i32 %2, 55295
  br i1 %62, label %71, label %30

63:                                               ; preds = %56
  %64 = icmp ult i32 %2, 1106
  br i1 %64, label %58, label %65

65:                                               ; preds = %63
  %66 = icmp ugt i32 %2, 7742
  br i1 %66, label %67, label %30

67:                                               ; preds = %65
  %68 = icmp eq i32 %2, 7743
  br i1 %68, label %58, label %69

69:                                               ; preds = %67
  %70 = icmp ugt i32 %2, 8207
  br i1 %70, label %71, label %30

71:                                               ; preds = %61, %69
  %72 = add i32 %2, -59493
  %73 = icmp ugt i32 %72, 4294
  br i1 %73, label %74, label %30

74:                                               ; preds = %71
  %75 = icmp ult i32 %2, 9795
  br i1 %75, label %58, label %76

76:                                               ; preds = %74
  %77 = icmp ugt i32 %2, 11904
  br i1 %77, label %78, label %30

78:                                               ; preds = %76
  %79 = add i32 %2, -64042
  %80 = icmp ugt i32 %79, 1029
  br i1 %80, label %81, label %30

81:                                               ; preds = %78
  %82 = add i32 %2, -15585
  %83 = icmp ugt i32 %82, 884
  br i1 %83, label %84, label %30

84:                                               ; preds = %81
  %85 = icmp ult i32 %2, 13851
  br i1 %85, label %58, label %86

86:                                               ; preds = %84
  %87 = icmp ugt i32 %2, 14615
  br i1 %87, label %88, label %30

88:                                               ; preds = %86
  %89 = add i32 %2, -18872
  %90 = icmp ugt i32 %89, 702
  br i1 %90, label %91, label %30

91:                                               ; preds = %88
  %92 = icmp ult i32 %2, 16736
  br i1 %92, label %58, label %93

93:                                               ; preds = %91
  %94 = icmp ugt i32 %2, 17206
  br i1 %94, label %95, label %30

95:                                               ; preds = %93
  %96 = add i32 %2, -18318
  %97 = icmp ugt i32 %96, 440
  br i1 %97, label %98, label %30

98:                                               ; preds = %95
  %99 = icmp ult i32 %2, 17623
  br i1 %99, label %58, label %100

100:                                              ; preds = %98
  %101 = icmp ugt i32 %2, 17995
  br i1 %101, label %102, label %30

102:                                              ; preds = %100
  %103 = add i32 %2, -65510
  %104 = icmp ugt i32 %103, 25
  br i1 %104, label %58, label %30
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ucnv_MBCSFromUChar32_69(%struct.UConverterSharedData* nocapture readonly, i32, i32*, i8 signext) local_unnamed_addr #0 {
  %5 = icmp slt i32 %1, 65536
  br i1 %5, label %11, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 15
  %8 = load i8, i8* %7, align 1
  %9 = and i8 %8, 1
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %90, label %11

11:                                               ; preds = %6, %4
  %12 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 8
  %13 = load i16*, i16** %12, align 8
  %14 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 14
  %15 = load i8, i8* %14, align 4
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %46

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 11
  %19 = bitcast i8** %18 to i16**
  %20 = load i16*, i16** %19, align 8
  %21 = ashr i32 %1, 10
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i16, i16* %13, i64 %22
  %24 = load i16, i16* %23, align 2
  %25 = zext i16 %24 to i32
  %26 = lshr i32 %1, 4
  %27 = and i32 %26, 63
  %28 = add nuw nsw i32 %27, %25
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds i16, i16* %13, i64 %29
  %31 = load i16, i16* %30, align 2
  %32 = zext i16 %31 to i32
  %33 = and i32 %1, 15
  %34 = add nuw nsw i32 %33, %32
  %35 = zext i32 %34 to i64
  %36 = getelementptr inbounds i16, i16* %20, i64 %35
  %37 = load i16, i16* %36, align 2
  %38 = icmp eq i8 %3, 0
  br i1 %38, label %41, label %39

39:                                               ; preds = %17
  %40 = icmp ugt i16 %37, 2047
  br i1 %40, label %43, label %90

41:                                               ; preds = %17
  %42 = icmp ugt i16 %37, 3071
  br i1 %42, label %43, label %90

43:                                               ; preds = %41, %39
  %44 = and i16 %37, 255
  %45 = zext i16 %44 to i32
  store i32 %45, i32* %2, align 4
  br label %99

46:                                               ; preds = %11
  %47 = bitcast i16* %13 to i32*
  %48 = ashr i32 %1, 10
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds i16, i16* %13, i64 %49
  %51 = load i16, i16* %50, align 2
  %52 = zext i16 %51 to i32
  %53 = lshr i32 %1, 4
  %54 = and i32 %53, 63
  %55 = add nuw nsw i32 %54, %52
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds i32, i32* %47, i64 %56
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i8 %15, 1
  br i1 %59, label %60, label %99

60:                                               ; preds = %46
  %61 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 11
  %62 = bitcast i8** %61 to i16**
  %63 = load i16*, i16** %62, align 8
  %64 = shl i32 %58, 4
  %65 = and i32 %64, 1048560
  %66 = and i32 %1, 15
  %67 = or i32 %65, %66
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds i16, i16* %63, i64 %68
  %70 = load i16, i16* %69, align 2
  %71 = zext i16 %70 to i32
  %72 = icmp ult i16 %70, 256
  %73 = select i1 %72, i32 1, i32 2
  %74 = or i32 %66, 16
  %75 = shl i32 1, %74
  %76 = and i32 %58, %75
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %89

78:                                               ; preds = %60
  %79 = icmp ne i8 %3, 0
  %80 = add nsw i32 %1, -57344
  %81 = icmp ult i32 %80, 6400
  %82 = or i1 %81, %79
  %83 = add nsw i32 %1, -983040
  %84 = icmp ult i32 %83, 131072
  %85 = or i1 %84, %82
  %86 = xor i1 %85, true
  %87 = icmp eq i16 %70, 0
  %88 = or i1 %87, %86
  br i1 %88, label %90, label %89

89:                                               ; preds = %78, %60
  store i32 %71, i32* %2, align 4
  br label %99

90:                                               ; preds = %78, %6, %41, %39
  %91 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 22
  %92 = load i32*, i32** %91, align 8
  %93 = icmp eq i32* %92, null
  br i1 %93, label %99, label %94

94:                                               ; preds = %90
  %95 = tail call i32 @ucnv_extSimpleMatchFromU_69(i32* nonnull %92, i32 %1, i32* %2, i8 signext %3) #11
  %96 = icmp slt i32 %95, 0
  %97 = sub nsw i32 0, %95
  %98 = select i1 %96, i32 %97, i32 %95
  br label %99

99:                                               ; preds = %90, %46, %94, %89, %43
  %100 = phi i32 [ 1, %43 ], [ %98, %94 ], [ %73, %89 ], [ -1, %46 ], [ 0, %90 ]
  ret i32 %100
}

declare i32 @ucnv_extSimpleMatchFromU_69(i32*, i32, i32*, i8 signext) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden signext i8 @ucnv_MBCSIsLeadByte_69(%struct.UConverterSharedData* nocapture readonly, i8 signext) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 4
  %4 = load [256 x i32]*, [256 x i32]** %3, align 8
  %5 = zext i8 %1 to i64
  %6 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %5
  %7 = load i32, i32* %6, align 4
  %8 = lshr i32 %7, 31
  %9 = trunc i32 %8 to i8
  %10 = xor i8 %9, 1
  ret i8 %10
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @ucnv_MBCSGetType_69(%struct.UConverter* nocapture readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 6
  %3 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %2, align 8
  %4 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %3, i64 0, i32 8, i32 0
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 1
  br i1 %6, label %22, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %3, i64 0, i32 8, i32 14
  %9 = load i8, i8* %8, align 4
  %10 = icmp eq i8 %9, 12
  br i1 %10, label %22, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %3, i64 0, i32 3
  %13 = load %struct.UConverterStaticData*, %struct.UConverterStaticData** %12, align 8
  %14 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %13, i64 0, i32 5
  %15 = load i8, i8* %14, align 2
  %16 = icmp eq i8 %15, 2
  br i1 %16, label %17, label %21

17:                                               ; preds = %11
  %18 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %13, i64 0, i32 6
  %19 = load i8, i8* %18, align 1
  %20 = icmp eq i8 %19, 2
  br i1 %20, label %22, label %21

21:                                               ; preds = %17, %11
  br label %22

22:                                               ; preds = %17, %7, %1, %21
  %23 = phi i32 [ 2, %21 ], [ 0, %1 ], [ 9, %7 ], [ 1, %17 ]
  ret i32 %23
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL13ucnv_MBCSLoadP20UConverterSharedDataP18UConverterLoadArgsPKhP10UErrorCode(%struct.UConverterSharedData*, %struct.UConverterLoadArgs* nocapture readonly, i8*, i32*) #0 {
  %5 = alloca [128 x i8], align 16
  %6 = alloca %struct.UDataInfo, align 2
  %7 = alloca %struct.UConverterLoadArgs, align 8
  %8 = bitcast %struct.UDataInfo* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %8) #11
  %9 = getelementptr inbounds %struct.UDataInfo, %struct.UDataInfo* %6, i64 0, i32 0
  %10 = getelementptr inbounds %struct.UDataInfo, %struct.UDataInfo* %6, i64 0, i32 7, i64 0
  %11 = getelementptr inbounds %struct.UDataInfo, %struct.UDataInfo* %6, i64 0, i32 7, i64 1
  %12 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8
  %13 = bitcast %struct.UDataInfo* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 2 %13, i8 -86, i64 20, i1 false)
  %14 = load i8, i8* %2, align 4
  switch i8 %14, label %32 [
    i8 4, label %33
    i8 5, label %15
  ]

15:                                               ; preds = %4
  %16 = getelementptr inbounds i8, i8* %2, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = icmp ugt i8 %17, 2
  br i1 %18, label %19, label %32

19:                                               ; preds = %15
  %20 = getelementptr inbounds i8, i8* %2, i64 32
  %21 = bitcast i8* %20 to i32*
  %22 = load i32, i32* %21, align 4
  %23 = and i32 %22, 65408
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %32

25:                                               ; preds = %19
  %26 = lshr i32 %22, 6
  %27 = trunc i32 %26 to i8
  %28 = and i8 %27, 1
  %29 = shl i32 %22, 2
  %30 = and i32 %29, 252
  %31 = zext i32 %30 to i64
  br label %33

32:                                               ; preds = %4, %19, %15
  store i32 13, i32* %3, align 4
  br label %671

33:                                               ; preds = %4, %25
  %34 = phi i64 [ %31, %25 ], [ 32, %4 ]
  %35 = phi i8 [ %28, %25 ], [ 0, %4 ]
  %36 = getelementptr inbounds i8, i8* %2, i64 24
  %37 = bitcast i8* %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = trunc i32 %38 to i8
  %40 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 14
  store i8 %39, i8* %40, align 4
  %41 = icmp ne i8 %35, 0
  %42 = and i32 %38, 255
  %43 = icmp eq i32 %42, 0
  %44 = and i1 %41, %43
  br i1 %44, label %45, label %46

45:                                               ; preds = %33
  store i32 13, i32* %3, align 4
  br label %671

46:                                               ; preds = %33
  %47 = load i32, i32* %37, align 4
  %48 = lshr i32 %47, 8
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %55, label %50

50:                                               ; preds = %46
  %51 = zext i32 %48 to i64
  %52 = getelementptr inbounds i8, i8* %2, i64 %51
  %53 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 22
  %54 = bitcast i32** %53 to i8**
  store i8* %52, i8** %54, align 8
  br label %55

55:                                               ; preds = %46, %50
  switch i8 %39, label %361 [
    i8 14, label %56
    i8 0, label %362
    i8 1, label %362
    i8 2, label %362
    i8 3, label %362
    i8 8, label %362
    i8 9, label %362
    i8 12, label %362
  ]

56:                                               ; preds = %55
  %57 = bitcast %struct.UConverterLoadArgs* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %57) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %57, i8 0, i64 40, i1 false)
  %58 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %7, i64 0, i32 0
  store i32 40, i32* %58, align 8
  %59 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 22
  %60 = load i32*, i32** %59, align 8
  %61 = icmp eq i32* %60, null
  br i1 %61, label %62, label %63

62:                                               ; preds = %56
  store i32 13, i32* %3, align 4
  br label %360

63:                                               ; preds = %56
  %64 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %1, i64 0, i32 1
  %65 = load i32, i32* %64, align 4
  %66 = icmp eq i32 %65, 1
  br i1 %66, label %68, label %67

67:                                               ; preds = %63
  store i32 14, i32* %3, align 4
  br label %360

68:                                               ; preds = %63
  %69 = getelementptr inbounds i8, i8* %2, i64 %34
  %70 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 3
  %71 = load %struct.UConverterStaticData*, %struct.UConverterStaticData** %70, align 8
  %72 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %71, i64 0, i32 1, i64 0
  %73 = tail call i32 @strcmp(i8* %69, i8* %72) #12
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %75, label %76

75:                                               ; preds = %68
  store i32 13, i32* %3, align 4
  br label %360

76:                                               ; preds = %68
  store i32 40, i32* %58, align 8
  %77 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %7, i64 0, i32 1
  store i32 2, i32* %77, align 4
  %78 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %1, i64 0, i32 2
  %79 = load i8, i8* %78, align 8
  %80 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %7, i64 0, i32 2
  store i8 %79, i8* %80, align 8
  %81 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %1, i64 0, i32 4
  %82 = load i16, i16* %81, align 2
  %83 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %7, i64 0, i32 4
  store i16 %82, i16* %83, align 2
  %84 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %1, i64 0, i32 5
  %85 = load i32, i32* %84, align 4
  %86 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %7, i64 0, i32 5
  store i32 %85, i32* %86, align 4
  %87 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %1, i64 0, i32 6
  %88 = bitcast i8** %87 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %7, i64 0, i32 6
  %91 = bitcast i8** %90 to i64*
  store i64 %89, i64* %91, align 8
  %92 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %7, i64 0, i32 7
  store i8* %69, i8** %92, align 8
  %93 = call %struct.UConverterSharedData* @ucnv_load_69(%struct.UConverterLoadArgs* nonnull %7, i32* %3) #11
  %94 = load i32, i32* %3, align 4
  %95 = icmp slt i32 %94, 1
  br i1 %95, label %96, label %360

96:                                               ; preds = %76
  %97 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %93, i64 0, i32 3
  %98 = load %struct.UConverterStaticData*, %struct.UConverterStaticData** %97, align 8
  %99 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %98, i64 0, i32 4
  %100 = load i8, i8* %99, align 1
  %101 = icmp eq i8 %100, 2
  br i1 %101, label %102, label %106

102:                                              ; preds = %96
  %103 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %93, i64 0, i32 8, i32 21
  %104 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %103, align 8
  %105 = icmp eq %struct.UConverterSharedData* %104, null
  br i1 %105, label %107, label %106

106:                                              ; preds = %102, %96
  call void @ucnv_unload_69(%struct.UConverterSharedData* %93) #11
  store i32 13, i32* %3, align 4
  br label %360

107:                                              ; preds = %102
  %108 = load i8, i8* %78, align 8
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %111, label %110

110:                                              ; preds = %107
  call void @ucnv_unload_69(%struct.UConverterSharedData* %93) #11
  br label %360

111:                                              ; preds = %107
  %112 = getelementptr inbounds %struct.UConverterMBCSTable, %struct.UConverterMBCSTable* %12, i64 0, i32 0
  %113 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %93, i64 0, i32 8, i32 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %112, i8* align 8 %113, i64 216, i1 false)
  %114 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 21
  store %struct.UConverterSharedData* %93, %struct.UConverterSharedData** %114, align 8
  store i32* %60, i32** %59, align 8
  %115 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 5
  store [256 x i32]* null, [256 x i32]** %115, align 8
  %116 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 12
  store i8* null, i8** %116, align 8
  %117 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 19
  %118 = bitcast i8** %117 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %118, i8 0, i64 16, i1 false)
  %119 = load %struct.UConverterStaticData*, %struct.UConverterStaticData** %70, align 8
  %120 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %119, i64 0, i32 4
  %121 = load i8, i8* %120, align 1
  switch i8 %121, label %359 [
    i8 1, label %126
    i8 2, label %122
  ]

122:                                              ; preds = %111
  %123 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %119, i64 0, i32 5
  %124 = load i8, i8* %123, align 2
  %125 = icmp sgt i8 %124, 1
  br i1 %125, label %126, label %359

126:                                              ; preds = %111, %122
  %127 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %93, i64 0, i32 8, i32 14
  %128 = load i8, i8* %127, align 4
  %129 = icmp eq i8 %128, 12
  br i1 %129, label %130, label %144

130:                                              ; preds = %126
  %131 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 4
  %132 = load [256 x i32]*, [256 x i32]** %131, align 8
  %133 = getelementptr inbounds [256 x i32], [256 x i32]* %132, i64 0, i64 14
  %134 = load i32, i32* %133, align 4
  %135 = and i32 %134, -2131755008
  %136 = icmp eq i32 %135, -2139095040
  br i1 %136, label %137, label %359

137:                                              ; preds = %130
  %138 = lshr i32 %134, 24
  %139 = and i32 %138, 127
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %359, label %141

141:                                              ; preds = %137
  %142 = trunc i32 %139 to i8
  %143 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 1
  store i8 %142, i8* %143, align 1
  store i8 -37, i8* %40, align 4
  br label %359

144:                                              ; preds = %126
  %145 = load %struct.UConverterStaticData*, %struct.UConverterStaticData** %97, align 8
  %146 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %145, i64 0, i32 4
  %147 = load i8, i8* %146, align 1
  %148 = icmp eq i8 %147, 2
  br i1 %148, label %149, label %359

149:                                              ; preds = %144
  %150 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %145, i64 0, i32 5
  %151 = load i8, i8* %150, align 2
  %152 = icmp eq i8 %151, 1
  br i1 %152, label %153, label %359

153:                                              ; preds = %149
  %154 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %145, i64 0, i32 6
  %155 = load i8, i8* %154, align 1
  %156 = icmp eq i8 %155, 2
  br i1 %156, label %157, label %359

157:                                              ; preds = %153
  %158 = load i8, i8* %112, align 8
  %159 = zext i8 %158 to i32
  %160 = icmp sgt i8 %158, -1
  br i1 %160, label %161, label %359

161:                                              ; preds = %157
  %162 = add nuw nsw i32 %159, 1
  %163 = shl nuw nsw i32 %162, 10
  %164 = zext i32 %163 to i64
  %165 = call noalias i8* @uprv_malloc_69(i64 %164) #13
  %166 = bitcast i8* %165 to [256 x i32]*
  %167 = icmp eq i8* %165, null
  br i1 %167, label %358, label %168

168:                                              ; preds = %161
  %169 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 4
  %170 = bitcast [256 x i32]** %169 to i8**
  %171 = load i8*, i8** %170, align 8
  %172 = shl nuw nsw i32 %159, 10
  %173 = zext i32 %172 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %165, i8* align 4 %171, i64 %173, i1 false)
  %174 = bitcast i8* %165 to i32*
  %175 = shl nuw i32 %159, 24
  br label %176

176:                                              ; preds = %223, %168
  %177 = phi i64 [ 0, %168 ], [ %224, %223 ]
  %178 = getelementptr inbounds i32, i32* %174, i64 %177
  %179 = bitcast i32* %178 to <4 x i32>*
  %180 = load <4 x i32>, <4 x i32>* %179, align 4
  %181 = getelementptr inbounds i32, i32* %178, i64 4
  %182 = bitcast i32* %181 to <4 x i32>*
  %183 = load <4 x i32>, <4 x i32>* %182, align 4
  %184 = icmp slt <4 x i32> %180, zeroinitializer
  %185 = icmp slt <4 x i32> %183, zeroinitializer
  %186 = extractelement <4 x i1> %184, i32 0
  br i1 %186, label %187, label %188

187:                                              ; preds = %176
  store i32 %175, i32* %178, align 4
  br label %188

188:                                              ; preds = %187, %176
  %189 = extractelement <4 x i1> %184, i32 1
  br i1 %189, label %190, label %193

190:                                              ; preds = %188
  %191 = or i64 %177, 1
  %192 = getelementptr inbounds i32, i32* %174, i64 %191
  store i32 %175, i32* %192, align 4
  br label %193

193:                                              ; preds = %190, %188
  %194 = extractelement <4 x i1> %184, i32 2
  br i1 %194, label %195, label %198

195:                                              ; preds = %193
  %196 = or i64 %177, 2
  %197 = getelementptr inbounds i32, i32* %174, i64 %196
  store i32 %175, i32* %197, align 4
  br label %198

198:                                              ; preds = %195, %193
  %199 = extractelement <4 x i1> %184, i32 3
  br i1 %199, label %200, label %203

200:                                              ; preds = %198
  %201 = or i64 %177, 3
  %202 = getelementptr inbounds i32, i32* %174, i64 %201
  store i32 %175, i32* %202, align 4
  br label %203

203:                                              ; preds = %200, %198
  %204 = extractelement <4 x i1> %185, i32 0
  br i1 %204, label %205, label %208

205:                                              ; preds = %203
  %206 = or i64 %177, 4
  %207 = getelementptr inbounds i32, i32* %174, i64 %206
  store i32 %175, i32* %207, align 4
  br label %208

208:                                              ; preds = %205, %203
  %209 = extractelement <4 x i1> %185, i32 1
  br i1 %209, label %210, label %213

210:                                              ; preds = %208
  %211 = or i64 %177, 5
  %212 = getelementptr inbounds i32, i32* %174, i64 %211
  store i32 %175, i32* %212, align 4
  br label %213

213:                                              ; preds = %210, %208
  %214 = extractelement <4 x i1> %185, i32 2
  br i1 %214, label %215, label %218

215:                                              ; preds = %213
  %216 = or i64 %177, 6
  %217 = getelementptr inbounds i32, i32* %174, i64 %216
  store i32 %175, i32* %217, align 4
  br label %218

218:                                              ; preds = %215, %213
  %219 = extractelement <4 x i1> %185, i32 3
  br i1 %219, label %220, label %223

220:                                              ; preds = %218
  %221 = or i64 %177, 7
  %222 = getelementptr inbounds i32, i32* %174, i64 %221
  store i32 %175, i32* %222, align 4
  br label %223

223:                                              ; preds = %220, %218
  %224 = add i64 %177, 8
  %225 = icmp eq i64 %224, 256
  br i1 %225, label %226, label %176, !llvm.loop !7

226:                                              ; preds = %223
  %227 = zext i8 %158 to i64
  %228 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 0
  %229 = bitcast i32* %228 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %229, align 4
  %230 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 4
  %231 = bitcast i32* %230 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %231, align 4
  %232 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 8
  %233 = bitcast i32* %232 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %233, align 4
  %234 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 12
  %235 = bitcast i32* %234 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %235, align 4
  %236 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 16
  %237 = bitcast i32* %236 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %237, align 4
  %238 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 20
  %239 = bitcast i32* %238 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %239, align 4
  %240 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 24
  %241 = bitcast i32* %240 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %241, align 4
  %242 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 28
  %243 = bitcast i32* %242 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %243, align 4
  %244 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 32
  %245 = bitcast i32* %244 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %245, align 4
  %246 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 36
  %247 = bitcast i32* %246 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %247, align 4
  %248 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 40
  %249 = bitcast i32* %248 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %249, align 4
  %250 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 44
  %251 = bitcast i32* %250 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %251, align 4
  %252 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 48
  %253 = bitcast i32* %252 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %253, align 4
  %254 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 52
  %255 = bitcast i32* %254 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %255, align 4
  %256 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 56
  %257 = bitcast i32* %256 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %257, align 4
  %258 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 60
  %259 = bitcast i32* %258 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %259, align 4
  %260 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 64
  %261 = bitcast i32* %260 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %261, align 4
  %262 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 68
  %263 = bitcast i32* %262 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %263, align 4
  %264 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 72
  %265 = bitcast i32* %264 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %265, align 4
  %266 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 76
  %267 = bitcast i32* %266 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %267, align 4
  %268 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 80
  %269 = bitcast i32* %268 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %269, align 4
  %270 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 84
  %271 = bitcast i32* %270 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %271, align 4
  %272 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 88
  %273 = bitcast i32* %272 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %273, align 4
  %274 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 92
  %275 = bitcast i32* %274 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %275, align 4
  %276 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 96
  %277 = bitcast i32* %276 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %277, align 4
  %278 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 100
  %279 = bitcast i32* %278 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %279, align 4
  %280 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 104
  %281 = bitcast i32* %280 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %281, align 4
  %282 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 108
  %283 = bitcast i32* %282 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %283, align 4
  %284 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 112
  %285 = bitcast i32* %284 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %285, align 4
  %286 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 116
  %287 = bitcast i32* %286 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %287, align 4
  %288 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 120
  %289 = bitcast i32* %288 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %289, align 4
  %290 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 124
  %291 = bitcast i32* %290 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %291, align 4
  %292 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 128
  %293 = bitcast i32* %292 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %293, align 4
  %294 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 132
  %295 = bitcast i32* %294 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %295, align 4
  %296 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 136
  %297 = bitcast i32* %296 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %297, align 4
  %298 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 140
  %299 = bitcast i32* %298 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %299, align 4
  %300 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 144
  %301 = bitcast i32* %300 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %301, align 4
  %302 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 148
  %303 = bitcast i32* %302 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %303, align 4
  %304 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 152
  %305 = bitcast i32* %304 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %305, align 4
  %306 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 156
  %307 = bitcast i32* %306 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %307, align 4
  %308 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 160
  %309 = bitcast i32* %308 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %309, align 4
  %310 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 164
  %311 = bitcast i32* %310 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %311, align 4
  %312 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 168
  %313 = bitcast i32* %312 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %313, align 4
  %314 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 172
  %315 = bitcast i32* %314 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %315, align 4
  %316 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 176
  %317 = bitcast i32* %316 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %317, align 4
  %318 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 180
  %319 = bitcast i32* %318 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %319, align 4
  %320 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 184
  %321 = bitcast i32* %320 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %321, align 4
  %322 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 188
  %323 = bitcast i32* %322 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %323, align 4
  %324 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 192
  %325 = bitcast i32* %324 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %325, align 4
  %326 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 196
  %327 = bitcast i32* %326 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %327, align 4
  %328 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 200
  %329 = bitcast i32* %328 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %329, align 4
  %330 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 204
  %331 = bitcast i32* %330 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %331, align 4
  %332 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 208
  %333 = bitcast i32* %332 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %333, align 4
  %334 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 212
  %335 = bitcast i32* %334 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %335, align 4
  %336 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 216
  %337 = bitcast i32* %336 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %337, align 4
  %338 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 220
  %339 = bitcast i32* %338 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %339, align 4
  %340 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 224
  %341 = bitcast i32* %340 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %341, align 4
  %342 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 228
  %343 = bitcast i32* %342 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %343, align 4
  %344 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 232
  %345 = bitcast i32* %344 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %345, align 4
  %346 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 236
  %347 = bitcast i32* %346 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %347, align 4
  %348 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 240
  %349 = bitcast i32* %348 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %349, align 4
  %350 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 244
  %351 = bitcast i32* %350 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %351, align 4
  %352 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 248
  %353 = bitcast i32* %352 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %353, align 4
  %354 = getelementptr inbounds [256 x i32], [256 x i32]* %166, i64 %227, i64 252
  %355 = bitcast i32* %354 to <4 x i32>*
  store <4 x i32> <i32 -2140143616, i32 -2140143616, i32 -2140143616, i32 -2140143616>, <4 x i32>* %355, align 4
  store i8* %165, i8** %170, align 8
  %356 = trunc i32 %162 to i8
  store i8 %356, i8* %112, align 8
  %357 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 2
  store i8 1, i8* %357, align 2
  store i8 -37, i8* %40, align 4
  br label %359

358:                                              ; preds = %161
  call void @ucnv_unload_69(%struct.UConverterSharedData* %93) #11
  store i32 7, i32* %3, align 4
  br label %360

359:                                              ; preds = %226, %130, %141, %137, %111, %157, %153, %149, %144, %122
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %57) #11
  br label %650

360:                                              ; preds = %358, %76, %110, %106, %75, %67, %62
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %57) #11
  br label %671

361:                                              ; preds = %55
  store i32 13, i32* %3, align 4
  br label %671

362:                                              ; preds = %55, %55, %55, %55, %55, %55, %55
  %363 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %1, i64 0, i32 2
  %364 = load i8, i8* %363, align 8
  %365 = icmp eq i8 %364, 0
  br i1 %365, label %366, label %671

366:                                              ; preds = %362
  %367 = getelementptr inbounds i8, i8* %2, i64 4
  %368 = bitcast i8* %367 to i32*
  %369 = load i32, i32* %368, align 4
  %370 = trunc i32 %369 to i8
  %371 = getelementptr inbounds %struct.UConverterMBCSTable, %struct.UConverterMBCSTable* %12, i64 0, i32 0
  store i8 %370, i8* %371, align 8
  %372 = getelementptr inbounds i8, i8* %2, i64 8
  %373 = bitcast i8* %372 to i32*
  %374 = load i32, i32* %373, align 4
  %375 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 3
  store i32 %374, i32* %375, align 4
  %376 = getelementptr inbounds i8, i8* %2, i64 %34
  %377 = bitcast i8* %376 to [256 x i32]*
  %378 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 4
  %379 = bitcast [256 x i32]** %378 to i8**
  store i8* %376, i8** %379, align 8
  %380 = load i32, i32* %368, align 4
  %381 = zext i32 %380 to i64
  %382 = getelementptr inbounds [256 x i32], [256 x i32]* %377, i64 %381
  %383 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 7
  %384 = bitcast %struct._MBCSToUFallback** %383 to [256 x i32]**
  store [256 x i32]* %382, [256 x i32]** %384, align 8
  %385 = getelementptr inbounds i8, i8* %2, i64 12
  %386 = bitcast i8* %385 to i32*
  %387 = load i32, i32* %386, align 4
  %388 = zext i32 %387 to i64
  %389 = getelementptr inbounds i8, i8* %2, i64 %388
  %390 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 6
  %391 = bitcast i16** %390 to i8**
  store i8* %389, i8** %391, align 8
  %392 = getelementptr inbounds i8, i8* %2, i64 16
  %393 = bitcast i8* %392 to i32*
  %394 = load i32, i32* %393, align 4
  %395 = zext i32 %394 to i64
  %396 = getelementptr inbounds i8, i8* %2, i64 %395
  %397 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 8
  %398 = bitcast i16** %397 to i8**
  store i8* %396, i8** %398, align 8
  %399 = getelementptr inbounds i8, i8* %2, i64 20
  %400 = bitcast i8* %399 to i32*
  %401 = load i32, i32* %400, align 4
  %402 = zext i32 %401 to i64
  %403 = getelementptr inbounds i8, i8* %2, i64 %402
  %404 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 11
  store i8* %403, i8** %404, align 8
  %405 = getelementptr inbounds i8, i8* %2, i64 28
  %406 = bitcast i8* %405 to i32*
  %407 = load i32, i32* %406, align 4
  %408 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 13
  store i32 %407, i32* %408, align 8
  store i16 20, i16* %9, align 2
  %409 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 2
  %410 = bitcast i8** %409 to %struct.UDataMemory**
  %411 = load %struct.UDataMemory*, %struct.UDataMemory** %410, align 8
  call void @udata_getInfo_69(%struct.UDataMemory* %411, %struct.UDataInfo* nonnull %6) #11
  %412 = load i8, i8* %10, align 2
  %413 = icmp ugt i8 %412, 6
  br i1 %413, label %419, label %414

414:                                              ; preds = %366
  %415 = icmp ne i8 %412, 6
  %416 = load i8, i8* %11, align 1
  %417 = icmp eq i8 %416, 0
  %418 = or i1 %415, %417
  br i1 %418, label %428, label %419

419:                                              ; preds = %414, %366
  %420 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 3
  %421 = load %struct.UConverterStaticData*, %struct.UConverterStaticData** %420, align 8
  %422 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %421, i64 0, i32 11
  %423 = load i8, i8* %422, align 1
  %424 = and i8 %423, 3
  %425 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 15
  store i8 %424, i8* %425, align 1
  %426 = and i8 %423, 2
  %427 = icmp eq i8 %426, 0
  br label %430

428:                                              ; preds = %414
  %429 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 15
  store i8 3, i8* %429, align 1
  br label %430

430:                                              ; preds = %428, %419
  %431 = phi i1 [ false, %428 ], [ %427, %419 ]
  %432 = getelementptr inbounds i8, i8* %2, i64 1
  %433 = load i8, i8* %432, align 1
  %434 = icmp ugt i8 %433, 2
  %435 = and i1 %434, %431
  br i1 %435, label %436, label %493

436:                                              ; preds = %430
  %437 = load i8, i8* %371, align 8
  %438 = icmp eq i8 %437, 1
  %439 = getelementptr inbounds i8, i8* %2, i64 2
  %440 = load i8, i8* %439, align 2
  br i1 %438, label %441, label %443

441:                                              ; preds = %436
  %442 = icmp ugt i8 %440, 14
  br i1 %442, label %445, label %493

443:                                              ; preds = %436
  %444 = icmp ugt i8 %440, -42
  br i1 %444, label %477, label %493

445:                                              ; preds = %441
  %446 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 16
  store i8 1, i8* %446, align 2
  %447 = load i16*, i16** %397, align 8
  br label %448

448:                                              ; preds = %448, %445
  %449 = phi i64 [ 0, %445 ], [ %473, %448 ]
  %450 = lshr i64 %449, 4
  %451 = and i64 %450, 268435455
  %452 = getelementptr inbounds i16, i16* %447, i64 %451
  %453 = load i16, i16* %452, align 2
  %454 = zext i16 %453 to i64
  %455 = shl i64 %449, 2
  %456 = and i64 %455, 56
  %457 = add nuw nsw i64 %456, %454
  %458 = getelementptr inbounds i16, i16* %447, i64 %457
  %459 = load i16, i16* %458, align 2
  %460 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 10, i64 %449
  store i16 %459, i16* %460, align 2
  %461 = or i64 %449, 1
  %462 = lshr i64 %449, 4
  %463 = and i64 %462, 268435455
  %464 = getelementptr inbounds i16, i16* %447, i64 %463
  %465 = load i16, i16* %464, align 2
  %466 = zext i16 %465 to i64
  %467 = shl i64 %461, 2
  %468 = and i64 %467, 60
  %469 = add nuw nsw i64 %468, %466
  %470 = getelementptr inbounds i16, i16* %447, i64 %469
  %471 = load i16, i16* %470, align 2
  %472 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 10, i64 %461
  store i16 %471, i16* %472, align 2
  %473 = add nuw nsw i64 %449, 2
  %474 = icmp eq i64 %473, 64
  br i1 %474, label %475, label %448

475:                                              ; preds = %448
  %476 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 17
  store i16 4095, i16* %476, align 8
  br label %493

477:                                              ; preds = %443
  %478 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 16
  store i8 1, i8* %478, align 2
  %479 = load i8*, i8** %404, align 8
  br i1 %41, label %483, label %480

480:                                              ; preds = %477
  %481 = load i32, i32* %408, align 8
  %482 = zext i32 %481 to i64
  br label %483

483:                                              ; preds = %477, %480
  %484 = phi i64 [ %482, %480 ], [ 0, %477 ]
  %485 = getelementptr inbounds i8, i8* %479, i64 %484
  %486 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 9
  %487 = bitcast i16** %486 to i8**
  store i8* %485, i8** %487, align 8
  %488 = load i8, i8* %439, align 2
  %489 = zext i8 %488 to i16
  %490 = shl nuw i16 %489, 8
  %491 = or i16 %490, 255
  %492 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 17
  store i16 %491, i16* %492, align 8
  br label %493

493:                                              ; preds = %475, %483, %443, %441, %430
  %494 = load [256 x i32]*, [256 x i32]** %378, align 8
  br label %495

495:                                              ; preds = %495, %493
  %496 = phi i64 [ 0, %493 ], [ %521, %495 ]
  %497 = phi <4 x i32> [ <i32 -1, i32 -1, i32 -1, i32 -1>, %493 ], [ %518, %495 ]
  %498 = phi <4 x i32> [ <i32 -1, i32 -1, i32 -1, i32 -1>, %493 ], [ %520, %495 ]
  %499 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %493 ], [ %522, %495 ]
  %500 = getelementptr inbounds [256 x i32], [256 x i32]* %494, i64 0, i64 %496
  %501 = bitcast i32* %500 to <4 x i32>*
  %502 = load <4 x i32>, <4 x i32>* %501, align 4
  %503 = getelementptr inbounds i32, i32* %500, i64 4
  %504 = bitcast i32* %503 to <4 x i32>*
  %505 = load <4 x i32>, <4 x i32>* %504, align 4
  %506 = add <4 x i32> %499, <i32 4, i32 4, i32 4, i32 4>
  %507 = or <4 x i32> %499, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %508 = or <4 x i32> %506, <i32 -2147483648, i32 -2147483648, i32 -2147483648, i32 -2147483648>
  %509 = icmp eq <4 x i32> %502, %507
  %510 = icmp eq <4 x i32> %505, %508
  %511 = lshr <4 x i32> %499, <i32 2, i32 2, i32 2, i32 2>
  %512 = lshr <4 x i32> %506, <i32 2, i32 2, i32 2, i32 2>
  %513 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %511
  %514 = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %512
  %515 = xor <4 x i32> %513, <i32 -1, i32 -1, i32 -1, i32 -1>
  %516 = xor <4 x i32> %514, <i32 -1, i32 -1, i32 -1, i32 -1>
  %517 = select <4 x i1> %509, <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, <4 x i32> %515
  %518 = and <4 x i32> %497, %517
  %519 = select <4 x i1> %510, <4 x i32> <i32 -1, i32 -1, i32 -1, i32 -1>, <4 x i32> %516
  %520 = and <4 x i32> %498, %519
  %521 = add i64 %496, 8
  %522 = add <4 x i32> %499, <i32 8, i32 8, i32 8, i32 8>
  %523 = icmp eq i64 %521, 128
  br i1 %523, label %524, label %495, !llvm.loop !9

524:                                              ; preds = %495
  %525 = and <4 x i32> %520, %518
  %526 = shufflevector <4 x i32> %525, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %527 = and <4 x i32> %525, %526
  %528 = shufflevector <4 x i32> %527, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %529 = and <4 x i32> %527, %528
  %530 = extractelement <4 x i32> %529, i32 0
  %531 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 18
  store i32 %530, i32* %531, align 4
  br i1 %41, label %532, label %650

532:                                              ; preds = %524
  %533 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 15
  %534 = load i8, i8* %533, align 1
  %535 = and i8 %534, 1
  %536 = icmp eq i8 %535, 0
  %537 = select i1 %536, i32 64, i32 1088
  %538 = load i32, i32* %400, align 4
  %539 = load i32, i32* %393, align 4
  %540 = sub i32 %538, %539
  %541 = lshr i32 %540, 2
  %542 = lshr exact i32 %537, 1
  %543 = sub nsw i32 %541, %542
  %544 = getelementptr inbounds i8, i8* %2, i64 36
  %545 = bitcast i8* %544 to i32*
  %546 = load i32, i32* %545, align 4
  %547 = shl nuw nsw i32 %537, 1
  %548 = shl i32 %546, 2
  %549 = add i32 %548, %547
  %550 = load i32, i32* %408, align 8
  %551 = add i32 %549, %550
  %552 = zext i32 %551 to i64
  %553 = call noalias i8* @uprv_malloc_69(i64 %552) #13
  %554 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 19
  store i8* %553, i8** %554, align 8
  %555 = icmp eq i8* %553, null
  br i1 %555, label %556, label %557

556:                                              ; preds = %532
  store i32 7, i32* %3, align 4
  br label %650

557:                                              ; preds = %532
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %553, i8 0, i64 %552, i1 false) #11
  %558 = bitcast i8* %553 to i16*
  %559 = load i8*, i8** %398, align 8
  %560 = zext i32 %547 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %553, i8* align 2 %559, i64 %560, i1 false) #11
  %561 = zext i32 %537 to i64
  %562 = getelementptr inbounds i16, i16* %558, i64 %561
  %563 = bitcast i16* %562 to i32*
  %564 = sub i32 %546, %543
  %565 = zext i32 %564 to i64
  %566 = getelementptr inbounds i32, i32* %563, i64 %565
  %567 = bitcast i32* %566 to i8*
  %568 = bitcast i8* %559 to i16*
  %569 = getelementptr inbounds i16, i16* %568, i64 %561
  %570 = bitcast i16* %569 to i8*
  %571 = shl i32 %543, 2
  %572 = zext i32 %571 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %567, i8* align 2 %570, i64 %572, i1 false) #11
  store i8* %553, i8** %398, align 8
  %573 = zext i32 %546 to i64
  %574 = getelementptr inbounds i32, i32* %563, i64 %573
  %575 = bitcast i8** %404 to i32**
  store i32* %574, i32** %575, align 8
  %576 = bitcast i8* %553 to i32*
  %577 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 17
  %578 = load i16, i16* %577, align 8
  %579 = zext i16 %578 to i32
  %580 = add nuw nsw i32 %579, 1
  %581 = lshr i32 %580, 6
  %582 = icmp eq i32 %581, 0
  br i1 %582, label %629, label %583

583:                                              ; preds = %557
  %584 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 9
  br label %585

585:                                              ; preds = %625, %583
  %586 = phi i64 [ 0, %583 ], [ %627, %625 ]
  %587 = phi i32 [ 0, %583 ], [ %626, %625 ]
  %588 = getelementptr inbounds i16, i16* %558, i64 %586
  %589 = load i16, i16* %588, align 2
  %590 = zext i16 %589 to i32
  %591 = icmp eq i32 %542, %590
  br i1 %591, label %621, label %592

592:                                              ; preds = %585
  %593 = zext i16 %589 to i64
  %594 = sext i32 %587 to i64
  %595 = load i16*, i16** %584, align 8
  br label %596

596:                                              ; preds = %617, %592
  %597 = phi i64 [ %594, %592 ], [ %600, %617 ]
  %598 = phi i64 [ %593, %592 ], [ %618, %617 ]
  %599 = phi i32 [ 0, %592 ], [ %619, %617 ]
  %600 = add nsw i64 %597, 1
  %601 = getelementptr inbounds i16, i16* %595, i64 %597
  %602 = load i16, i16* %601, align 2
  %603 = icmp eq i16 %602, 0
  br i1 %603, label %617, label %604

604:                                              ; preds = %596
  %605 = lshr i16 %602, 4
  %606 = zext i16 %605 to i32
  %607 = add nuw nsw i32 %606, 1
  %608 = add nuw nsw i64 %598, 1
  %609 = getelementptr inbounds i32, i32* %576, i64 %598
  store i32 %606, i32* %609, align 4
  %610 = add nuw nsw i32 %606, 2
  %611 = add nuw nsw i64 %598, 2
  %612 = getelementptr inbounds i32, i32* %576, i64 %608
  store i32 %607, i32* %612, align 4
  %613 = add nuw nsw i32 %606, 3
  %614 = add nuw nsw i64 %598, 3
  %615 = getelementptr inbounds i32, i32* %576, i64 %611
  store i32 %610, i32* %615, align 4
  %616 = getelementptr inbounds i32, i32* %576, i64 %614
  store i32 %613, i32* %616, align 4
  br label %617

617:                                              ; preds = %604, %596
  %618 = add nuw nsw i64 %598, 4
  %619 = add nuw nsw i32 %599, 1
  %620 = icmp eq i32 %619, 16
  br i1 %620, label %623, label %596

621:                                              ; preds = %585
  %622 = add nsw i32 %587, 16
  br label %625

623:                                              ; preds = %617
  %624 = trunc i64 %600 to i32
  br label %625

625:                                              ; preds = %623, %621
  %626 = phi i32 [ %622, %621 ], [ %624, %623 ]
  %627 = add nuw i64 %586, 1
  %628 = icmp slt i32 %626, %581
  br i1 %628, label %585, label %629

629:                                              ; preds = %625, %557
  %630 = getelementptr inbounds [128 x i8], [128 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %630) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %630, i8 -1, i64 128, i1 false) #11
  %631 = load [256 x i32]*, [256 x i32]** %378, align 8
  call fastcc void @_ZL12getStatePropPA256_KiPai([256 x i32]* %631, i8* nonnull %630, i32 0) #11
  %632 = load i8, i8* %371, align 8
  %633 = icmp eq i8 %632, 0
  br i1 %633, label %649, label %634

634:                                              ; preds = %629, %644
  %635 = phi i8 [ %645, %644 ], [ %632, %629 ]
  %636 = phi i64 [ %646, %644 ], [ 0, %629 ]
  %637 = getelementptr inbounds [128 x i8], [128 x i8]* %5, i64 0, i64 %636
  %638 = load i8, i8* %637, align 1
  %639 = icmp sgt i8 %638, 63
  br i1 %639, label %640, label %644

640:                                              ; preds = %634
  %641 = trunc i64 %636 to i32
  %642 = call fastcc signext i8 @_ZL7enumToUP19UConverterMBCSTablePaijjPFaPKvjPiES3_P10UErrorCode(%struct.UConverterMBCSTable* %12, i8* nonnull %630, i32 %641, i32 0, i32 0, i8* %371) #11
  %643 = load i8, i8* %371, align 8
  br label %644

644:                                              ; preds = %640, %634
  %645 = phi i8 [ %635, %634 ], [ %643, %640 ]
  %646 = add nuw nsw i64 %636, 1
  %647 = zext i8 %645 to i64
  %648 = icmp ult i64 %646, %647
  br i1 %648, label %634, label %649

649:                                              ; preds = %644, %629
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %630) #11
  br label %650

650:                                              ; preds = %649, %556, %359, %524
  %651 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 16
  %652 = load i8, i8* %651, align 2
  %653 = icmp eq i8 %652, 0
  br i1 %653, label %665, label %654

654:                                              ; preds = %650
  %655 = getelementptr inbounds %struct.UConverterMBCSTable, %struct.UConverterMBCSTable* %12, i64 0, i32 0
  %656 = load i8, i8* %655, align 8
  %657 = icmp eq i8 %656, 1
  br i1 %657, label %658, label %660

658:                                              ; preds = %654
  %659 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 6
  store %struct.UConverterImpl* @_ZL13_SBCSUTF8Impl, %struct.UConverterImpl** %659, align 8
  br label %665

660:                                              ; preds = %654
  %661 = load i8, i8* %40, align 4
  %662 = icmp eq i8 %661, 1
  br i1 %662, label %663, label %667

663:                                              ; preds = %660
  %664 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 6
  store %struct.UConverterImpl* @_ZL13_DBCSUTF8Impl, %struct.UConverterImpl** %664, align 8
  br label %671

665:                                              ; preds = %658, %650
  %666 = load i8, i8* %40, align 4
  br label %667

667:                                              ; preds = %665, %660
  %668 = phi i8 [ %666, %665 ], [ %661, %660 ]
  switch i8 %668, label %671 [
    i8 -37, label %669
    i8 12, label %669
  ]

669:                                              ; preds = %667, %667
  %670 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 18
  store i32 0, i32* %670, align 4
  br label %671

671:                                              ; preds = %663, %360, %669, %667, %362, %361, %45, %32
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %8) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL15ucnv_MBCSUnloadP20UConverterSharedData(%struct.UConverterSharedData* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 5
  %3 = load [256 x i32]*, [256 x i32]** %2, align 8
  %4 = icmp eq [256 x i32]* %3, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = bitcast [256 x i32]* %3 to i8*
  tail call void @uprv_free_69(i8* nonnull %6) #11
  br label %7

7:                                                ; preds = %1, %5
  %8 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 2
  %9 = load i8, i8* %8, align 2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %15, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 4
  %13 = bitcast [256 x i32]** %12 to i8**
  %14 = load i8*, i8** %13, align 8
  tail call void @uprv_free_69(i8* %14) #11
  br label %15

15:                                               ; preds = %7, %11
  %16 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 21
  %17 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %16, align 8
  %18 = icmp eq %struct.UConverterSharedData* %17, null
  br i1 %18, label %20, label %19

19:                                               ; preds = %15
  tail call void @ucnv_unload_69(%struct.UConverterSharedData* nonnull %17) #11
  br label %20

20:                                               ; preds = %15, %19
  %21 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %0, i64 0, i32 8, i32 19
  %22 = load i8*, i8** %21, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %25, label %24

24:                                               ; preds = %20
  tail call void @uprv_free_69(i8* nonnull %22) #11
  br label %25

25:                                               ; preds = %20, %24
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL13ucnv_MBCSOpenP10UConverterP18UConverterLoadArgsP10UErrorCode(%struct.UConverter* nocapture, %struct.UConverterLoadArgs* nocapture, i32* nocapture) #0 {
  %4 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %1, i64 0, i32 2
  %5 = load i8, i8* %4, align 8
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %255

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 6
  %9 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %8, align 8
  %10 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %9, i64 0, i32 8, i32 14
  %11 = load i8, i8* %10, align 4
  %12 = icmp eq i8 %11, -37
  br i1 %12, label %13, label %18

13:                                               ; preds = %7
  %14 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %1, i64 0, i32 5
  %15 = load i32, i32* %14, align 4
  %16 = and i32 %15, -17
  store i32 %16, i32* %14, align 4
  %17 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  store i32 %16, i32* %17, align 8
  br label %18

18:                                               ; preds = %13, %7
  %19 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %1, i64 0, i32 5
  %20 = load i32, i32* %19, align 4
  %21 = and i32 %20, 16
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %192, label %23

23:                                               ; preds = %18
  tail call void @umtx_lock_69(%"class.icu_69::UMutex"* null) #11
  %24 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %9, i64 0, i32 8, i32 5
  %25 = load [256 x i32]*, [256 x i32]** %24, align 8
  %26 = icmp eq [256 x i32]* %25, null
  tail call void @umtx_unlock_69(%"class.icu_69::UMutex"* null) #11
  br i1 %26, label %27, label %192

27:                                               ; preds = %23
  %28 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %8, align 8
  %29 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %28, i64 0, i32 8, i32 8
  %30 = load i16*, i16** %29, align 8
  %31 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %28, i64 0, i32 8, i32 11
  %32 = load i8*, i8** %31, align 8
  %33 = bitcast i8* %32 to i16*
  %34 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %28, i64 0, i32 8, i32 14
  %35 = load i8, i8* %34, align 4
  switch i8 %35, label %185 [
    i8 0, label %36
    i8 12, label %36
  ]

36:                                               ; preds = %27, %27
  %37 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %28, i64 0, i32 8, i32 4
  %38 = load [256 x i32]*, [256 x i32]** %37, align 8
  %39 = getelementptr inbounds [256 x i32], [256 x i32]* %38, i64 0, i64 37
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, -2147483638
  br i1 %41, label %42, label %185

42:                                               ; preds = %36
  %43 = getelementptr inbounds [256 x i32], [256 x i32]* %38, i64 0, i64 21
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %44, -2147483515
  br i1 %45, label %46, label %185

46:                                               ; preds = %42
  %47 = icmp eq i8 %35, 0
  br i1 %47, label %48, label %67

48:                                               ; preds = %46
  %49 = load i16, i16* %30, align 2
  %50 = zext i16 %49 to i64
  %51 = getelementptr inbounds i16, i16* %30, i64 %50
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i64
  %54 = add nuw nsw i64 %53, 10
  %55 = getelementptr inbounds i16, i16* %33, i64 %54
  %56 = load i16, i16* %55, align 2
  %57 = icmp eq i16 %56, 3877
  br i1 %57, label %58, label %185

58:                                               ; preds = %48
  %59 = add nuw nsw i64 %50, 8
  %60 = getelementptr inbounds i16, i16* %30, i64 %59
  %61 = load i16, i16* %60, align 2
  %62 = zext i16 %61 to i64
  %63 = add nuw nsw i64 %62, 5
  %64 = getelementptr inbounds i16, i16* %33, i64 %63
  %65 = load i16, i16* %64, align 2
  %66 = icmp eq i16 %65, 3861
  br i1 %66, label %97, label %185

67:                                               ; preds = %46
  %68 = bitcast i16* %30 to i32*
  %69 = load i16, i16* %30, align 2
  %70 = zext i16 %69 to i64
  %71 = getelementptr inbounds i32, i32* %68, i64 %70
  %72 = load i32, i32* %71, align 4
  %73 = and i32 %72, 67108864
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %185, label %75

75:                                               ; preds = %67
  %76 = shl i32 %72, 4
  %77 = and i32 %76, 1048560
  %78 = or i32 %77, 10
  %79 = zext i32 %78 to i64
  %80 = getelementptr inbounds i16, i16* %33, i64 %79
  %81 = load i16, i16* %80, align 2
  %82 = icmp eq i16 %81, 37
  br i1 %82, label %83, label %185

83:                                               ; preds = %75
  %84 = add nuw nsw i64 %70, 8
  %85 = getelementptr inbounds i32, i32* %68, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = and i32 %86, 2097152
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %185, label %89

89:                                               ; preds = %83
  %90 = shl i32 %86, 4
  %91 = and i32 %90, 1048560
  %92 = or i32 %91, 5
  %93 = zext i32 %92 to i64
  %94 = getelementptr inbounds i16, i16* %33, i64 %93
  %95 = load i16, i16* %94, align 2
  %96 = icmp eq i16 %95, 21
  br i1 %96, label %97, label %185

97:                                               ; preds = %89, %58
  %98 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %28, i64 0, i32 8, i32 13
  %99 = load i32, i32* %98, align 8
  %100 = icmp eq i32 %99, 0
  br i1 %100, label %111, label %101

101:                                              ; preds = %97
  %102 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %28, i64 0, i32 8, i32 0
  %103 = load i8, i8* %102, align 8
  %104 = zext i8 %103 to i32
  %105 = shl nuw nsw i32 %104, 10
  %106 = add i32 %99, 80
  %107 = add i32 %106, %105
  %108 = zext i32 %107 to i64
  %109 = tail call noalias i8* @uprv_malloc_69(i64 %108) #13
  %110 = icmp eq i8* %109, null
  br i1 %110, label %112, label %113

111:                                              ; preds = %97
  store i32 3, i32* %2, align 4
  br label %255

112:                                              ; preds = %101
  store i32 7, i32* %2, align 4
  br label %255

113:                                              ; preds = %101
  %114 = bitcast i8* %109 to [256 x i32]*
  %115 = bitcast [256 x i32]** %37 to i8**
  %116 = load i8*, i8** %115, align 8
  %117 = load i8, i8* %102, align 8
  %118 = zext i8 %117 to i64
  %119 = shl nuw nsw i64 %118, 10
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %109, i8* align 4 %116, i64 %119, i1 false) #11
  %120 = getelementptr inbounds i8, i8* %109, i64 148
  %121 = bitcast i8* %120 to i32*
  store i32 -2147483515, i32* %121, align 4
  %122 = getelementptr inbounds i8, i8* %109, i64 84
  %123 = bitcast i8* %122 to i32*
  store i32 -2147483638, i32* %123, align 4
  %124 = getelementptr inbounds [256 x i32], [256 x i32]* %114, i64 %118, i64 0
  %125 = bitcast i32* %124 to i16*
  %126 = bitcast i32* %124 to i8*
  %127 = zext i32 %99 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %126, i8* align 1 %32, i64 %127, i1 false) #11
  %128 = load i8, i8* %34, align 4
  %129 = icmp eq i8 %128, 0
  br i1 %129, label %130, label %145

130:                                              ; preds = %113
  %131 = load i16, i16* %30, align 2
  %132 = zext i16 %131 to i64
  %133 = getelementptr inbounds i16, i16* %30, i64 %132
  %134 = load i16, i16* %133, align 2
  %135 = zext i16 %134 to i64
  %136 = add nuw nsw i64 %135, 10
  %137 = getelementptr inbounds i16, i16* %125, i64 %136
  store i16 3861, i16* %137, align 2
  %138 = load i16, i16* %30, align 2
  %139 = zext i16 %138 to i64
  %140 = add nuw nsw i64 %139, 8
  %141 = getelementptr inbounds i16, i16* %30, i64 %140
  %142 = load i16, i16* %141, align 2
  %143 = zext i16 %142 to i64
  %144 = add nuw nsw i64 %143, 5
  br label %165

145:                                              ; preds = %113
  %146 = bitcast i16* %30 to i32*
  %147 = load i16, i16* %30, align 2
  %148 = zext i16 %147 to i64
  %149 = getelementptr inbounds i32, i32* %146, i64 %148
  %150 = load i32, i32* %149, align 4
  %151 = shl i32 %150, 4
  %152 = and i32 %151, 1048560
  %153 = or i32 %152, 10
  %154 = zext i32 %153 to i64
  %155 = getelementptr inbounds i16, i16* %125, i64 %154
  store i16 21, i16* %155, align 2
  %156 = load i16, i16* %30, align 2
  %157 = zext i16 %156 to i64
  %158 = add nuw nsw i64 %157, 8
  %159 = getelementptr inbounds i32, i32* %146, i64 %158
  %160 = load i32, i32* %159, align 4
  %161 = shl i32 %160, 4
  %162 = and i32 %161, 1048560
  %163 = or i32 %162, 5
  %164 = zext i32 %163 to i64
  br label %165

165:                                              ; preds = %145, %130
  %166 = phi i64 [ %164, %145 ], [ %144, %130 ]
  %167 = phi i16 [ 37, %145 ], [ 3877, %130 ]
  %168 = getelementptr inbounds i16, i16* %125, i64 %166
  store i16 %167, i16* %168, align 2
  %169 = getelementptr inbounds i8, i8* %126, i64 %127
  %170 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %28, i64 0, i32 3
  %171 = load %struct.UConverterStaticData*, %struct.UConverterStaticData** %170, align 8
  %172 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %171, i64 0, i32 1, i64 0
  %173 = tail call i8* @strcpy(i8* %169, i8* %172) #11
  %174 = tail call i64 @strlen(i8* %169) #11
  %175 = getelementptr i8, i8* %169, i64 %174
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %175, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i64 10, i1 false) #11
  tail call void @umtx_lock_69(%"class.icu_69::UMutex"* null) #11
  %176 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %28, i64 0, i32 8, i32 5
  %177 = load [256 x i32]*, [256 x i32]** %176, align 8
  %178 = icmp eq [256 x i32]* %177, null
  br i1 %178, label %179, label %184

179:                                              ; preds = %165
  %180 = bitcast [256 x i32]** %176 to i8**
  store i8* %109, i8** %180, align 8
  %181 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %28, i64 0, i32 8, i32 12
  %182 = bitcast i8** %181 to i32**
  store i32* %124, i32** %182, align 8
  %183 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %28, i64 0, i32 8, i32 20
  store i8* %169, i8** %183, align 8
  tail call void @umtx_unlock_69(%"class.icu_69::UMutex"* null) #11
  br label %192

184:                                              ; preds = %165
  tail call void @umtx_unlock_69(%"class.icu_69::UMutex"* null) #11
  tail call void @uprv_free_69(i8* nonnull %109) #11
  br label %192

185:                                              ; preds = %27, %42, %36, %58, %48, %67, %75, %83, %89
  %186 = load i32, i32* %2, align 4
  %187 = icmp slt i32 %186, 1
  br i1 %187, label %188, label %255

188:                                              ; preds = %185
  %189 = load i32, i32* %19, align 4
  %190 = and i32 %189, -17
  store i32 %190, i32* %19, align 4
  %191 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  store i32 %190, i32* %191, align 8
  br label %192

192:                                              ; preds = %184, %179, %23, %188, %18
  %193 = getelementptr inbounds %struct.UConverterLoadArgs, %struct.UConverterLoadArgs* %1, i64 0, i32 7
  %194 = load i8*, i8** %193, align 8
  %195 = tail call i8* @strstr(i8* %194, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0)) #12
  %196 = icmp eq i8* %195, null
  br i1 %196, label %207, label %197

197:                                              ; preds = %192
  %198 = tail call i8* @strstr(i8* %194, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0)) #12
  %199 = icmp eq i8* %198, null
  br i1 %199, label %200, label %203

200:                                              ; preds = %197
  %201 = tail call i8* @strstr(i8* %194, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.4, i64 0, i64 0)) #12
  %202 = icmp eq i8* %201, null
  br i1 %202, label %237, label %203

203:                                              ; preds = %200, %197
  %204 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %205 = load i32, i32* %204, align 8
  %206 = or i32 %205, 32768
  store i32 %206, i32* %204, align 8
  br label %237

207:                                              ; preds = %192
  %208 = tail call i8* @strstr(i8* %194, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0)) #12
  %209 = icmp eq i8* %208, null
  br i1 %209, label %210, label %213

210:                                              ; preds = %207
  %211 = tail call i8* @strstr(i8* %194, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0)) #12
  %212 = icmp eq i8* %211, null
  br i1 %212, label %217, label %213

213:                                              ; preds = %210, %207
  %214 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %215 = load i32, i32* %214, align 8
  %216 = or i32 %215, 4096
  store i32 %216, i32* %214, align 8
  br label %237

217:                                              ; preds = %210
  %218 = tail call i8* @strstr(i8* %194, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0)) #12
  %219 = icmp eq i8* %218, null
  br i1 %219, label %220, label %223

220:                                              ; preds = %217
  %221 = tail call i8* @strstr(i8* %194, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)) #12
  %222 = icmp eq i8* %221, null
  br i1 %222, label %227, label %223

223:                                              ; preds = %220, %217
  %224 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %225 = load i32, i32* %224, align 8
  %226 = or i32 %225, 8192
  store i32 %226, i32* %224, align 8
  br label %237

227:                                              ; preds = %220
  %228 = tail call i8* @strstr(i8* %194, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0)) #12
  %229 = icmp eq i8* %228, null
  br i1 %229, label %230, label %233

230:                                              ; preds = %227
  %231 = tail call i8* @strstr(i8* %194, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0)) #12
  %232 = icmp eq i8* %231, null
  br i1 %232, label %237, label %233

233:                                              ; preds = %230, %227
  %234 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %235 = load i32, i32* %234, align 8
  %236 = or i32 %235, 16384
  store i32 %236, i32* %234, align 8
  br label %237

237:                                              ; preds = %200, %230, %213, %233, %223, %203
  %238 = icmp eq i8 %11, 12
  br i1 %238, label %239, label %241

239:                                              ; preds = %237
  %240 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 18
  store i8 3, i8* %240, align 8
  br label %241

241:                                              ; preds = %239, %237
  %242 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %9, i64 0, i32 8, i32 22
  %243 = load i32*, i32** %242, align 8
  %244 = icmp eq i32* %243, null
  br i1 %244, label %255, label %245

245:                                              ; preds = %241
  %246 = getelementptr inbounds i32, i32* %243, i64 17
  %247 = load i32, i32* %246, align 4
  %248 = trunc i32 %247 to i8
  %249 = zext i1 %238 to i8
  %250 = add i8 %248, %249
  %251 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 18
  %252 = load i8, i8* %251, align 8
  %253 = icmp sgt i8 %250, %252
  br i1 %253, label %254, label %255

254:                                              ; preds = %245
  store i8 %250, i8* %251, align 8
  br label %255

255:                                              ; preds = %111, %112, %185, %254, %245, %241, %3
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal i32 @_ZL21ucnv_MBCSGetNextUCharP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterToUnicodeArgs* nocapture, i32* nocapture) #4 {
  %3 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 2
  %4 = load %struct.UConverter*, %struct.UConverter** %3, align 8
  %5 = bitcast %struct.UConverter* %4 to i8*
  %6 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 35
  %7 = load i8, i8* %6, align 2
  %8 = icmp sgt i8 %7, 0
  br i1 %8, label %427, label %9

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 6
  %11 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %10, align 8
  %12 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %11, i64 0, i32 8, i32 15
  %13 = load i8, i8* %12, align 1
  %14 = and i8 %13, 2
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %16, label %427

16:                                               ; preds = %9
  %17 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %11, i64 0, i32 8, i32 0
  %18 = load i8, i8* %17, align 8
  %19 = icmp eq i8 %18, 1
  %20 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 3
  %21 = load i8*, i8** %20, align 8
  %22 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %0, i64 0, i32 4
  %23 = load i8*, i8** %22, align 8
  %24 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 7
  %25 = load i32, i32* %24, align 8
  %26 = and i32 %25, 16
  %27 = icmp eq i32 %26, 0
  %28 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %11, i64 0, i32 8, i32 5
  %29 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %11, i64 0, i32 8, i32 4
  %30 = select i1 %27, [256 x i32]** %29, [256 x i32]** %28
  %31 = load [256 x i32]*, [256 x i32]** %30, align 8
  br i1 %19, label %32, label %58

32:                                               ; preds = %16, %44
  %33 = phi i8* [ %36, %44 ], [ %21, %16 ]
  %34 = icmp ult i8* %33, %23
  br i1 %34, label %35, label %57

35:                                               ; preds = %32
  %36 = getelementptr inbounds i8, i8* %33, i64 1
  %37 = load i8, i8* %33, align 1
  %38 = zext i8 %37 to i64
  %39 = getelementptr inbounds [256 x i32], [256 x i32]* %31, i64 0, i64 %38
  %40 = load i32, i32* %39, align 4
  store i8* %36, i8** %20, align 8
  %41 = icmp slt i32 %40, -2146435072
  br i1 %41, label %42, label %44

42:                                               ; preds = %35
  %43 = and i32 %40, 65535
  br label %427

44:                                               ; preds = %35
  %45 = lshr i32 %40, 20
  %46 = and i32 %45, 15
  switch i32 %46, label %32 [
    i32 1, label %47
    i32 3, label %47
    i32 2, label %50
    i32 6, label %53
    i32 7, label %52
  ]

47:                                               ; preds = %44, %44
  %48 = and i32 %40, 1048575
  %49 = add nuw nsw i32 %48, 65536
  br label %427

50:                                               ; preds = %44
  %51 = and i32 %40, 65535
  br label %427

52:                                               ; preds = %44
  store i32 12, i32* %1, align 4
  br label %57

53:                                               ; preds = %44
  %54 = load i32, i32* %1, align 4
  %55 = icmp slt i32 %54, 1
  br i1 %55, label %56, label %57

56:                                               ; preds = %53
  store i8* %33, i8** %20, align 8
  br label %427

57:                                               ; preds = %32, %53, %52
  store i32 8, i32* %1, align 4
  br label %427

58:                                               ; preds = %16
  %59 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %11, i64 0, i32 8, i32 6
  %60 = load i16*, i16** %59, align 8
  %61 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 14
  %62 = load i32, i32* %61, align 8
  %63 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 15
  %64 = load i32, i32* %63, align 4
  %65 = trunc i32 %64 to i8
  %66 = and i32 %64, 255
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %71

68:                                               ; preds = %58
  %69 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %11, i64 0, i32 8, i32 1
  %70 = load i8, i8* %69, align 1
  br label %71

71:                                               ; preds = %68, %58
  %72 = phi i8 [ %65, %58 ], [ %70, %68 ]
  br label %73

73:                                               ; preds = %71, %123
  %74 = phi i8* [ %128, %123 ], [ %21, %71 ]
  %75 = phi i32 [ 0, %123 ], [ %62, %71 ]
  %76 = phi i8 [ %133, %123 ], [ %72, %71 ]
  %77 = phi i32 [ %124, %123 ], [ -1, %71 ]
  %78 = icmp ult i8* %74, %23
  br i1 %78, label %79, label %243

79:                                               ; preds = %73
  %80 = zext i8 %76 to i64
  %81 = getelementptr inbounds i8, i8* %74, i64 1
  %82 = load i8, i8* %74, align 1
  %83 = zext i8 %82 to i64
  %84 = getelementptr inbounds [256 x i32], [256 x i32]* %31, i64 %80, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = icmp sgt i32 %85, -1
  br i1 %86, label %87, label %123

87:                                               ; preds = %79, %227
  %88 = phi i32 [ %236, %227 ], [ %85, %79 ]
  %89 = phi i8* [ %232, %227 ], [ %81, %79 ]
  %90 = phi i64 [ %231, %227 ], [ 1, %79 ]
  %91 = phi i64 [ %90, %227 ], [ 0, %79 ]
  %92 = phi i32 [ %96, %227 ], [ %75, %79 ]
  %93 = phi i32 [ %228, %227 ], [ %77, %79 ]
  %94 = lshr i32 %88, 24
  %95 = and i32 %88, 16777215
  %96 = add i32 %95, %92
  %97 = icmp ult i8* %89, %23
  br i1 %97, label %98, label %241

98:                                               ; preds = %87
  %99 = zext i32 %94 to i64
  %100 = load i8, i8* %89, align 1
  %101 = zext i8 %100 to i64
  %102 = getelementptr inbounds [256 x i32], [256 x i32]* %31, i64 %99, i64 %101
  %103 = load i32, i32* %102, align 4
  %104 = and i32 %103, -2131755008
  %105 = icmp eq i32 %104, -2143289344
  br i1 %105, label %106, label %227

106:                                              ; preds = %98
  %107 = and i32 %103, 65535
  %108 = add i32 %107, %96
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds i16, i16* %60, i64 %109
  %111 = load i16, i16* %110, align 2
  %112 = zext i16 %111 to i32
  %113 = icmp ult i16 %111, -2
  br i1 %113, label %114, label %227

114:                                              ; preds = %106
  %115 = getelementptr inbounds i8, i8* %74, i64 %91
  %116 = zext i16 %111 to i32
  %117 = getelementptr inbounds i8, i8* %115, i64 2
  %118 = lshr i32 %103, 24
  %119 = trunc i32 %118 to i8
  %120 = and i8 %119, 127
  br label %422

121:                                              ; preds = %227
  %122 = trunc i32 %94 to i8
  br label %123

123:                                              ; preds = %121, %79
  %124 = phi i32 [ %77, %79 ], [ %228, %121 ]
  %125 = phi i8 [ %76, %79 ], [ %122, %121 ]
  %126 = phi i32 [ %75, %79 ], [ %96, %121 ]
  %127 = phi i64 [ 1, %79 ], [ %231, %121 ]
  %128 = phi i8* [ %81, %79 ], [ %232, %121 ]
  %129 = phi i32 [ %85, %79 ], [ %236, %121 ]
  %130 = zext i8 %125 to i32
  store i32 %130, i32* %63, align 4
  %131 = lshr i32 %129, 24
  %132 = trunc i32 %131 to i8
  %133 = and i8 %132, 127
  %134 = lshr i32 %129, 20
  %135 = and i32 %134, 15
  switch i32 %135, label %73 [
    i32 0, label %136
    i32 4, label %138
    i32 5, label %180
    i32 1, label %210
    i32 3, label %210
    i32 8, label %213
    i32 2, label %218
    i32 6, label %221
    i32 7, label %220
  ]

136:                                              ; preds = %123
  %137 = and i32 %129, 65535
  br label %422

138:                                              ; preds = %123
  %139 = and i32 %129, 65535
  %140 = add i32 %139, %126
  %141 = zext i32 %140 to i64
  %142 = getelementptr inbounds i16, i16* %60, i64 %141
  %143 = load i16, i16* %142, align 2
  %144 = zext i16 %143 to i32
  %145 = icmp ult i16 %143, -2
  br i1 %145, label %422, label %146

146:                                              ; preds = %138
  %147 = icmp eq i16 %143, -2
  br i1 %147, label %148, label %238

148:                                              ; preds = %146
  %149 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %11, i64 0, i32 8, i32 3
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %221, label %152

152:                                              ; preds = %148
  %153 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %11, i64 0, i32 8, i32 7
  %154 = load %struct._MBCSToUFallback*, %struct._MBCSToUFallback** %153, align 8
  %155 = icmp eq i32 %150, 1
  br i1 %155, label %171, label %156

156:                                              ; preds = %152, %156
  %157 = phi i32 [ %166, %156 ], [ %150, %152 ]
  %158 = phi i32 [ %165, %156 ], [ 0, %152 ]
  %159 = add i32 %158, %157
  %160 = lshr i32 %159, 1
  %161 = zext i32 %160 to i64
  %162 = getelementptr inbounds %struct._MBCSToUFallback, %struct._MBCSToUFallback* %154, i64 %161, i32 0
  %163 = load i32, i32* %162, align 4
  %164 = icmp ugt i32 %163, %140
  %165 = select i1 %164, i32 %158, i32 %160
  %166 = select i1 %164, i32 %160, i32 %157
  %167 = add i32 %166, -1
  %168 = icmp ult i32 %165, %167
  br i1 %168, label %156, label %169

169:                                              ; preds = %156
  %170 = zext i32 %165 to i64
  br label %171

171:                                              ; preds = %169, %152
  %172 = phi i64 [ 0, %152 ], [ %170, %169 ]
  %173 = getelementptr inbounds %struct._MBCSToUFallback, %struct._MBCSToUFallback* %154, i64 %172, i32 0
  %174 = load i32, i32* %173, align 4
  %175 = icmp eq i32 %174, %140
  br i1 %175, label %176, label %221

176:                                              ; preds = %171
  %177 = getelementptr inbounds %struct._MBCSToUFallback, %struct._MBCSToUFallback* %154, i64 %172, i32 1
  %178 = load i32, i32* %177, align 4
  %179 = icmp eq i32 %178, 65534
  br i1 %179, label %221, label %243

180:                                              ; preds = %123
  %181 = and i32 %129, 65535
  %182 = add i32 %181, %126
  %183 = add i32 %182, 1
  %184 = zext i32 %182 to i64
  %185 = getelementptr inbounds i16, i16* %60, i64 %184
  %186 = load i16, i16* %185, align 2
  %187 = zext i16 %186 to i32
  %188 = icmp ult i16 %186, -10240
  br i1 %188, label %422, label %189

189:                                              ; preds = %180
  %190 = icmp ult i16 %186, -8192
  br i1 %190, label %191, label %200

191:                                              ; preds = %189
  %192 = shl nuw nsw i32 %187, 10
  %193 = and i32 %192, 1047552
  %194 = zext i32 %183 to i64
  %195 = getelementptr inbounds i16, i16* %60, i64 %194
  %196 = load i16, i16* %195, align 2
  %197 = zext i16 %196 to i32
  %198 = add nuw nsw i32 %193, 9216
  %199 = add nuw nsw i32 %198, %197
  br label %422

200:                                              ; preds = %189
  %201 = and i32 %187, 65534
  %202 = icmp eq i32 %201, 57344
  br i1 %202, label %203, label %208

203:                                              ; preds = %200
  %204 = zext i32 %183 to i64
  %205 = getelementptr inbounds i16, i16* %60, i64 %204
  %206 = load i16, i16* %205, align 2
  %207 = zext i16 %206 to i32
  br label %422

208:                                              ; preds = %200
  %209 = icmp eq i16 %186, -1
  br i1 %209, label %238, label %221

210:                                              ; preds = %123, %123
  %211 = and i32 %129, 1048575
  %212 = add nuw nsw i32 %211, 65536
  br label %422

213:                                              ; preds = %123
  %214 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %11, i64 0, i32 8, i32 1
  %215 = load i8, i8* %214, align 1
  %216 = icmp eq i8 %215, 0
  br i1 %216, label %221, label %217

217:                                              ; preds = %213
  store i32 12, i32* %1, align 4
  br label %243

218:                                              ; preds = %123
  %219 = and i32 %129, 65535
  br label %422

220:                                              ; preds = %123
  store i32 12, i32* %1, align 4
  br label %243

221:                                              ; preds = %123, %171, %148, %176, %213, %208
  %222 = phi i32 [ 65534, %171 ], [ 65534, %148 ], [ %124, %213 ], [ %187, %208 ], [ 65534, %176 ], [ %124, %123 ]
  %223 = load i32, i32* %1, align 4
  %224 = icmp slt i32 %223, 1
  br i1 %224, label %225, label %243

225:                                              ; preds = %221
  store i32 0, i32* %61, align 8
  %226 = zext i8 %133 to i32
  store i32 %226, i32* %63, align 4
  store i8* %74, i8** %20, align 8
  br label %427

227:                                              ; preds = %98, %106
  %228 = phi i32 [ %112, %106 ], [ %93, %98 ]
  %229 = getelementptr inbounds i8, i8* %74, i64 %90
  %230 = zext i32 %94 to i64
  %231 = add nuw nsw i64 %90, 1
  %232 = getelementptr inbounds i8, i8* %74, i64 %231
  %233 = load i8, i8* %229, align 1
  %234 = zext i8 %233 to i64
  %235 = getelementptr inbounds [256 x i32], [256 x i32]* %31, i64 %230, i64 %234
  %236 = load i32, i32* %235, align 4
  %237 = icmp sgt i32 %236, -1
  br i1 %237, label %87, label %121

238:                                              ; preds = %208, %146
  %239 = phi i32 [ %144, %146 ], [ 65535, %208 ]
  store i32 12, i32* %1, align 4
  %240 = getelementptr inbounds i8, i8* %74, i64 %127
  br label %422

241:                                              ; preds = %87
  %242 = trunc i32 %94 to i8
  br label %243

243:                                              ; preds = %73, %241, %217, %220, %176, %221
  %244 = phi i64 [ %127, %176 ], [ %127, %221 ], [ %127, %220 ], [ %127, %217 ], [ %90, %241 ], [ 0, %73 ]
  %245 = phi i8 [ %133, %176 ], [ %133, %221 ], [ %133, %220 ], [ %125, %217 ], [ %242, %241 ], [ %76, %73 ]
  %246 = phi i32 [ %178, %176 ], [ %222, %221 ], [ %124, %220 ], [ %124, %217 ], [ %93, %241 ], [ %77, %73 ]
  %247 = ptrtoint i8* %74 to i64
  %248 = getelementptr inbounds i8, i8* %74, i64 %244
  %249 = icmp slt i32 %246, 0
  br i1 %249, label %250, label %422

250:                                              ; preds = %243
  %251 = load i32, i32* %1, align 4
  %252 = icmp slt i32 %251, 1
  %253 = icmp eq i8* %248, %23
  %254 = and i1 %253, %252
  %255 = icmp sgt i64 %244, 0
  %256 = and i1 %255, %254
  br i1 %256, label %257, label %371

257:                                              ; preds = %250
  %258 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  %259 = trunc i64 %244 to i8
  %260 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  store i8 %259, i8* %260, align 8
  %261 = getelementptr i8, i8* %74, i64 1
  %262 = icmp ugt i8* %23, %261
  %263 = select i1 %262, i8* %23, i8* %261
  %264 = ptrtoint i8* %263 to i64
  %265 = sub i64 %264, %247
  %266 = icmp ult i64 %265, 32
  br i1 %266, label %360, label %267

267:                                              ; preds = %257
  %268 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  %269 = getelementptr i8, i8* %74, i64 1
  %270 = icmp ugt i8* %23, %269
  %271 = select i1 %270, i8* %23, i8* %269
  %272 = sub i64 65, %247
  %273 = getelementptr i8, i8* %271, i64 %272
  %274 = ptrtoint i8* %273 to i64
  %275 = getelementptr i8, i8* %5, i64 %274
  %276 = icmp ult i8* %268, %271
  %277 = icmp ult i8* %74, %275
  %278 = and i1 %276, %277
  br i1 %278, label %360, label %279

279:                                              ; preds = %267
  %280 = and i64 %265, -32
  %281 = getelementptr i8, i8* %74, i64 %280
  %282 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %280
  %283 = add i64 %280, -32
  %284 = lshr exact i64 %283, 5
  %285 = add nuw nsw i64 %284, 1
  %286 = and i64 %285, 3
  %287 = icmp ult i64 %283, 96
  br i1 %287, label %339, label %288

288:                                              ; preds = %279
  %289 = sub nsw i64 %285, %286
  br label %290

290:                                              ; preds = %290, %288
  %291 = phi i64 [ 0, %288 ], [ %336, %290 ]
  %292 = phi i64 [ %289, %288 ], [ %337, %290 ]
  %293 = getelementptr i8, i8* %74, i64 %291
  %294 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %291
  %295 = bitcast i8* %293 to <16 x i8>*
  %296 = load <16 x i8>, <16 x i8>* %295, align 1, !alias.scope !10
  %297 = getelementptr i8, i8* %293, i64 16
  %298 = bitcast i8* %297 to <16 x i8>*
  %299 = load <16 x i8>, <16 x i8>* %298, align 1, !alias.scope !10
  %300 = bitcast i8* %294 to <16 x i8>*
  store <16 x i8> %296, <16 x i8>* %300, align 1, !alias.scope !13, !noalias !10
  %301 = getelementptr i8, i8* %294, i64 16
  %302 = bitcast i8* %301 to <16 x i8>*
  store <16 x i8> %299, <16 x i8>* %302, align 1, !alias.scope !13, !noalias !10
  %303 = or i64 %291, 32
  %304 = getelementptr i8, i8* %74, i64 %303
  %305 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %303
  %306 = bitcast i8* %304 to <16 x i8>*
  %307 = load <16 x i8>, <16 x i8>* %306, align 1, !alias.scope !10
  %308 = getelementptr i8, i8* %304, i64 16
  %309 = bitcast i8* %308 to <16 x i8>*
  %310 = load <16 x i8>, <16 x i8>* %309, align 1, !alias.scope !10
  %311 = bitcast i8* %305 to <16 x i8>*
  store <16 x i8> %307, <16 x i8>* %311, align 1, !alias.scope !13, !noalias !10
  %312 = getelementptr i8, i8* %305, i64 16
  %313 = bitcast i8* %312 to <16 x i8>*
  store <16 x i8> %310, <16 x i8>* %313, align 1, !alias.scope !13, !noalias !10
  %314 = or i64 %291, 64
  %315 = getelementptr i8, i8* %74, i64 %314
  %316 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %314
  %317 = bitcast i8* %315 to <16 x i8>*
  %318 = load <16 x i8>, <16 x i8>* %317, align 1, !alias.scope !10
  %319 = getelementptr i8, i8* %315, i64 16
  %320 = bitcast i8* %319 to <16 x i8>*
  %321 = load <16 x i8>, <16 x i8>* %320, align 1, !alias.scope !10
  %322 = bitcast i8* %316 to <16 x i8>*
  store <16 x i8> %318, <16 x i8>* %322, align 1, !alias.scope !13, !noalias !10
  %323 = getelementptr i8, i8* %316, i64 16
  %324 = bitcast i8* %323 to <16 x i8>*
  store <16 x i8> %321, <16 x i8>* %324, align 1, !alias.scope !13, !noalias !10
  %325 = or i64 %291, 96
  %326 = getelementptr i8, i8* %74, i64 %325
  %327 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %325
  %328 = bitcast i8* %326 to <16 x i8>*
  %329 = load <16 x i8>, <16 x i8>* %328, align 1, !alias.scope !10
  %330 = getelementptr i8, i8* %326, i64 16
  %331 = bitcast i8* %330 to <16 x i8>*
  %332 = load <16 x i8>, <16 x i8>* %331, align 1, !alias.scope !10
  %333 = bitcast i8* %327 to <16 x i8>*
  store <16 x i8> %329, <16 x i8>* %333, align 1, !alias.scope !13, !noalias !10
  %334 = getelementptr i8, i8* %327, i64 16
  %335 = bitcast i8* %334 to <16 x i8>*
  store <16 x i8> %332, <16 x i8>* %335, align 1, !alias.scope !13, !noalias !10
  %336 = add i64 %291, 128
  %337 = add i64 %292, -4
  %338 = icmp eq i64 %337, 0
  br i1 %338, label %339, label %290, !llvm.loop !15

339:                                              ; preds = %290, %279
  %340 = phi i64 [ 0, %279 ], [ %336, %290 ]
  %341 = icmp eq i64 %286, 0
  br i1 %341, label %358, label %342

342:                                              ; preds = %339, %342
  %343 = phi i64 [ %355, %342 ], [ %340, %339 ]
  %344 = phi i64 [ %356, %342 ], [ %286, %339 ]
  %345 = getelementptr i8, i8* %74, i64 %343
  %346 = getelementptr %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 %343
  %347 = bitcast i8* %345 to <16 x i8>*
  %348 = load <16 x i8>, <16 x i8>* %347, align 1, !alias.scope !10
  %349 = getelementptr i8, i8* %345, i64 16
  %350 = bitcast i8* %349 to <16 x i8>*
  %351 = load <16 x i8>, <16 x i8>* %350, align 1, !alias.scope !10
  %352 = bitcast i8* %346 to <16 x i8>*
  store <16 x i8> %348, <16 x i8>* %352, align 1, !alias.scope !13, !noalias !10
  %353 = getelementptr i8, i8* %346, i64 16
  %354 = bitcast i8* %353 to <16 x i8>*
  store <16 x i8> %351, <16 x i8>* %354, align 1, !alias.scope !13, !noalias !10
  %355 = add i64 %343, 32
  %356 = add i64 %344, -1
  %357 = icmp eq i64 %356, 0
  br i1 %357, label %358, label %342, !llvm.loop !16

358:                                              ; preds = %342, %339
  %359 = icmp eq i64 %265, %280
  br i1 %359, label %370, label %360

360:                                              ; preds = %358, %267, %257
  %361 = phi i8* [ %74, %267 ], [ %74, %257 ], [ %281, %358 ]
  %362 = phi i8* [ %258, %267 ], [ %258, %257 ], [ %282, %358 ]
  br label %363

363:                                              ; preds = %360, %363
  %364 = phi i8* [ %366, %363 ], [ %361, %360 ]
  %365 = phi i8* [ %368, %363 ], [ %362, %360 ]
  %366 = getelementptr inbounds i8, i8* %364, i64 1
  %367 = load i8, i8* %364, align 1
  %368 = getelementptr inbounds i8, i8* %365, i64 1
  store i8 %367, i8* %365, align 1
  %369 = icmp ult i8* %366, %23
  br i1 %369, label %363, label %370, !llvm.loop !17

370:                                              ; preds = %363, %358
  store i32 11, i32* %1, align 4
  br label %422

371:                                              ; preds = %250
  br i1 %252, label %421, label %372

372:                                              ; preds = %371
  %373 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %10, align 8
  %374 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %373, i64 0, i32 8, i32 1
  %375 = load i8, i8* %374, align 1
  %376 = icmp ne i8 %375, 0
  %377 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 0
  %378 = getelementptr inbounds i8, i8* %74, i64 1
  %379 = load i8, i8* %74, align 1
  store i8 %379, i8* %377, align 1
  %380 = icmp eq i64 %244, 1
  br i1 %380, label %381, label %383

381:                                              ; preds = %372
  %382 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  store i8 1, i8* %382, align 8
  br label %422

383:                                              ; preds = %372
  %384 = icmp sgt i64 %244, 1
  br i1 %384, label %385, label %417

385:                                              ; preds = %383
  %386 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 13, i64 1
  %387 = zext i8 %245 to i64
  br label %388

388:                                              ; preds = %385, %412
  %389 = phi i8 [ 1, %385 ], [ %415, %412 ]
  %390 = phi i8* [ %386, %385 ], [ %414, %412 ]
  %391 = phi i8* [ %378, %385 ], [ %413, %412 ]
  %392 = load i8, i8* %391, align 1
  %393 = zext i8 %392 to i64
  %394 = getelementptr inbounds [256 x i32], [256 x i32]* %31, i64 %387, i64 %393
  %395 = load i32, i32* %394, align 4
  %396 = icmp sgt i32 %395, -1
  br i1 %396, label %397, label %401

397:                                              ; preds = %388
  %398 = lshr i32 %395, 24
  %399 = trunc i32 %398 to i8
  %400 = tail call fastcc signext i8 @_ZL18hasValidTrailBytesPA256_Kih([256 x i32]* %31, i8 zeroext %399) #11
  br label %409

401:                                              ; preds = %388
  %402 = lshr i32 %395, 20
  %403 = and i32 %402, 15
  %404 = icmp eq i32 %403, 8
  %405 = and i1 %376, %404
  %406 = icmp ne i32 %403, 7
  %407 = xor i1 %406, %405
  %408 = zext i1 %407 to i8
  br label %409

409:                                              ; preds = %397, %401
  %410 = phi i8 [ %400, %397 ], [ %408, %401 ]
  %411 = icmp eq i8 %410, 0
  br i1 %411, label %412, label %417

412:                                              ; preds = %409
  %413 = getelementptr inbounds i8, i8* %391, i64 1
  %414 = getelementptr inbounds i8, i8* %390, i64 1
  store i8 %392, i8* %390, align 1
  %415 = add i8 %389, 1
  %416 = icmp ult i8* %413, %248
  br i1 %416, label %388, label %417

417:                                              ; preds = %409, %412, %383
  %418 = phi i8* [ %378, %383 ], [ %413, %412 ], [ %391, %409 ]
  %419 = phi i8 [ 1, %383 ], [ %415, %412 ], [ %389, %409 ]
  %420 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %4, i64 0, i32 12
  store i8 %419, i8* %420, align 8
  br label %422

421:                                              ; preds = %371
  store i32 8, i32* %1, align 4
  br label %422

422:                                              ; preds = %238, %218, %210, %203, %191, %180, %138, %136, %114, %370, %421, %417, %381, %243
  %423 = phi i8 [ %245, %243 ], [ %245, %370 ], [ %245, %421 ], [ %245, %381 ], [ %245, %417 ], [ %133, %218 ], [ %133, %210 ], [ %133, %203 ], [ %133, %191 ], [ %133, %180 ], [ %133, %138 ], [ %133, %136 ], [ %120, %114 ], [ %133, %238 ]
  %424 = phi i8* [ %248, %243 ], [ %23, %370 ], [ %248, %421 ], [ %248, %381 ], [ %418, %417 ], [ %128, %218 ], [ %128, %210 ], [ %128, %203 ], [ %128, %191 ], [ %128, %180 ], [ %128, %138 ], [ %128, %136 ], [ %117, %114 ], [ %240, %238 ]
  %425 = phi i32 [ %246, %243 ], [ 65535, %370 ], [ 65535, %421 ], [ 65535, %381 ], [ 65535, %417 ], [ %219, %218 ], [ %212, %210 ], [ %207, %203 ], [ %199, %191 ], [ %187, %180 ], [ %144, %138 ], [ %137, %136 ], [ %116, %114 ], [ %239, %238 ]
  store i32 0, i32* %61, align 8
  %426 = zext i8 %423 to i32
  store i32 %426, i32* %63, align 4
  store i8* %424, i8** %20, align 8
  br label %427

427:                                              ; preds = %57, %56, %50, %47, %42, %9, %2, %422, %225
  %428 = phi i32 [ %425, %422 ], [ -9, %225 ], [ -9, %2 ], [ -9, %9 ], [ %43, %42 ], [ %49, %47 ], [ %51, %50 ], [ 65535, %57 ], [ -9, %56 ]
  ret i32 %428
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZL20ucnv_MBCSGetStartersPK10UConverterPaP10UErrorCode(%struct.UConverter* nocapture readonly, i8* nocapture, i32* nocapture readnone) #5 {
  %4 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 6
  %5 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %4, align 8
  %6 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %5, i64 0, i32 8, i32 4
  %7 = load [256 x i32]*, [256 x i32]** %6, align 8
  %8 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %5, i64 0, i32 8, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i64
  %11 = getelementptr i8, i8* %1, i64 256
  %12 = getelementptr [256 x i32], [256 x i32]* %7, i64 %10, i64 0
  %13 = bitcast i32* %12 to i8*
  %14 = add nuw nsw i64 %10, 1
  %15 = getelementptr [256 x i32], [256 x i32]* %7, i64 %14, i64 0
  %16 = bitcast i32* %15 to i8*
  %17 = icmp ugt i8* %16, %1
  %18 = icmp ugt i8* %11, %13
  %19 = and i1 %17, %18
  br i1 %19, label %57, label %20

20:                                               ; preds = %3, %20
  %21 = phi i64 [ %55, %20 ], [ 0, %3 ]
  %22 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 %10, i64 %21
  %23 = bitcast i32* %22 to <4 x i32>*
  %24 = load <4 x i32>, <4 x i32>* %23, align 4, !alias.scope !18
  %25 = getelementptr inbounds i32, i32* %22, i64 4
  %26 = bitcast i32* %25 to <4 x i32>*
  %27 = load <4 x i32>, <4 x i32>* %26, align 4, !alias.scope !18
  %28 = lshr <4 x i32> %24, <i32 31, i32 31, i32 31, i32 31>
  %29 = lshr <4 x i32> %27, <i32 31, i32 31, i32 31, i32 31>
  %30 = trunc <4 x i32> %28 to <4 x i8>
  %31 = trunc <4 x i32> %29 to <4 x i8>
  %32 = xor <4 x i8> %30, <i8 1, i8 1, i8 1, i8 1>
  %33 = xor <4 x i8> %31, <i8 1, i8 1, i8 1, i8 1>
  %34 = getelementptr inbounds i8, i8* %1, i64 %21
  %35 = bitcast i8* %34 to <4 x i8>*
  store <4 x i8> %32, <4 x i8>* %35, align 1, !alias.scope !21, !noalias !18
  %36 = getelementptr inbounds i8, i8* %34, i64 4
  %37 = bitcast i8* %36 to <4 x i8>*
  store <4 x i8> %33, <4 x i8>* %37, align 1, !alias.scope !21, !noalias !18
  %38 = or i64 %21, 8
  %39 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 %10, i64 %38
  %40 = bitcast i32* %39 to <4 x i32>*
  %41 = load <4 x i32>, <4 x i32>* %40, align 4, !alias.scope !18
  %42 = getelementptr inbounds i32, i32* %39, i64 4
  %43 = bitcast i32* %42 to <4 x i32>*
  %44 = load <4 x i32>, <4 x i32>* %43, align 4, !alias.scope !18
  %45 = lshr <4 x i32> %41, <i32 31, i32 31, i32 31, i32 31>
  %46 = lshr <4 x i32> %44, <i32 31, i32 31, i32 31, i32 31>
  %47 = trunc <4 x i32> %45 to <4 x i8>
  %48 = trunc <4 x i32> %46 to <4 x i8>
  %49 = xor <4 x i8> %47, <i8 1, i8 1, i8 1, i8 1>
  %50 = xor <4 x i8> %48, <i8 1, i8 1, i8 1, i8 1>
  %51 = getelementptr inbounds i8, i8* %1, i64 %38
  %52 = bitcast i8* %51 to <4 x i8>*
  store <4 x i8> %49, <4 x i8>* %52, align 1, !alias.scope !21, !noalias !18
  %53 = getelementptr inbounds i8, i8* %51, i64 4
  %54 = bitcast i8* %53 to <4 x i8>*
  store <4 x i8> %50, <4 x i8>* %54, align 1, !alias.scope !21, !noalias !18
  %55 = add nuw nsw i64 %21, 16
  %56 = icmp eq i64 %55, 256
  br i1 %56, label %74, label %20, !llvm.loop !23

57:                                               ; preds = %3, %57
  %58 = phi i64 [ %72, %57 ], [ 0, %3 ]
  %59 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 %10, i64 %58
  %60 = load i32, i32* %59, align 4
  %61 = lshr i32 %60, 31
  %62 = trunc i32 %61 to i8
  %63 = xor i8 %62, 1
  %64 = getelementptr inbounds i8, i8* %1, i64 %58
  store i8 %63, i8* %64, align 1
  %65 = or i64 %58, 1
  %66 = getelementptr inbounds [256 x i32], [256 x i32]* %7, i64 %10, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = lshr i32 %67, 31
  %69 = trunc i32 %68 to i8
  %70 = xor i8 %69, 1
  %71 = getelementptr inbounds i8, i8* %1, i64 %65
  store i8 %70, i8* %71, align 1
  %72 = add nuw nsw i64 %58, 2
  %73 = icmp eq i64 %72, 256
  br i1 %73, label %74, label %57, !llvm.loop !24

74:                                               ; preds = %20, %57
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i8* @_ZL16ucnv_MBCSGetNamePK10UConverter(%struct.UConverter* nocapture readonly) #3 {
  %2 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %3 = load i32, i32* %2, align 8
  %4 = and i32 %3, 16
  %5 = icmp eq i32 %4, 0
  %6 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 6
  %7 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %6, align 8
  br i1 %5, label %12, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %7, i64 0, i32 8, i32 20
  %10 = load i8*, i8** %9, align 8
  %11 = icmp eq i8* %10, null
  br i1 %11, label %12, label %16

12:                                               ; preds = %1, %8
  %13 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %7, i64 0, i32 3
  %14 = load %struct.UConverterStaticData*, %struct.UConverterStaticData** %13, align 8
  %15 = getelementptr inbounds %struct.UConverterStaticData, %struct.UConverterStaticData* %14, i64 0, i32 1, i64 0
  br label %16

16:                                               ; preds = %8, %12
  %17 = phi i8* [ %15, %12 ], [ %10, %8 ]
  ret i8* %17
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL17ucnv_MBCSWriteSubP25UConverterFromUnicodeArgsiP10UErrorCode(%struct.UConverterFromUnicodeArgs*, i32, i32*) #0 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to [4 x i8]*
  %6 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 2
  %7 = load %struct.UConverter*, %struct.UConverter** %6, align 8
  %8 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #11
  %9 = getelementptr inbounds [4 x i8], [4 x i8]* %5, i64 0, i64 1
  %10 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %7, i64 0, i32 24
  store i32 -1431655766, i32* %4, align 4
  %11 = load i8, i8* %10, align 2
  %12 = icmp eq i8 %11, 0
  %13 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %7, i64 0, i32 6
  %14 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %13, align 8
  br i1 %12, label %31, label %15

15:                                               ; preds = %3
  %16 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %14, i64 0, i32 8, i32 22
  %17 = load i32*, i32** %16, align 8
  %18 = icmp eq i32* %17, null
  br i1 %18, label %23, label %19

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %7, i64 0, i32 25
  %21 = load i8, i8* %20, align 1
  %22 = sext i8 %21 to i32
  br label %28

23:                                               ; preds = %15
  %24 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %7, i64 0, i32 29, i64 0
  %25 = load i16, i16* %24, align 4
  %26 = icmp ult i16 %25, 256
  %27 = zext i1 %26 to i32
  br label %28

28:                                               ; preds = %23, %19
  %29 = phi i32 [ %22, %19 ], [ %27, %23 ]
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %37

31:                                               ; preds = %3, %28
  %32 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %7, i64 0, i32 5
  %33 = load i8*, i8** %32, align 8
  %34 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %7, i64 0, i32 19
  %35 = load i8, i8* %34, align 1
  %36 = sext i8 %35 to i32
  br label %37

37:                                               ; preds = %28, %31
  %38 = phi i8* [ %33, %31 ], [ %10, %28 ]
  %39 = phi i32 [ %36, %31 ], [ 1, %28 ]
  %40 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %7, i64 0, i32 25
  store i8 0, i8* %40, align 1
  %41 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %14, i64 0, i32 8, i32 14
  %42 = load i8, i8* %41, align 4
  %43 = icmp eq i8 %42, 12
  br i1 %43, label %44, label %74

44:                                               ; preds = %37
  switch i32 %39, label %64 [
    i32 1, label %45
    i32 2, label %53
  ]

45:                                               ; preds = %44
  %46 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %7, i64 0, i32 16
  %47 = load i32, i32* %46, align 8
  %48 = icmp eq i32 %47, 2
  br i1 %48, label %49, label %50

49:                                               ; preds = %45
  store i32 1, i32* %46, align 8
  store i8 15, i8* %8, align 4
  br label %50

50:                                               ; preds = %49, %45
  %51 = phi i8* [ %9, %49 ], [ %8, %45 ]
  %52 = getelementptr inbounds i8, i8* %51, i64 1
  br label %65

53:                                               ; preds = %44
  %54 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %7, i64 0, i32 16
  %55 = load i32, i32* %54, align 8
  %56 = icmp ult i32 %55, 2
  br i1 %56, label %57, label %58

57:                                               ; preds = %53
  store i32 2, i32* %54, align 8
  store i8 14, i8* %8, align 4
  br label %58

58:                                               ; preds = %57, %53
  %59 = phi i8* [ %9, %57 ], [ %8, %53 ]
  %60 = load i8, i8* %38, align 1
  %61 = getelementptr inbounds i8, i8* %59, i64 1
  store i8 %60, i8* %59, align 1
  %62 = getelementptr inbounds i8, i8* %38, i64 1
  %63 = getelementptr inbounds i8, i8* %59, i64 2
  br label %65

64:                                               ; preds = %44
  store i32 1, i32* %2, align 4
  br label %77

65:                                               ; preds = %58, %50
  %66 = phi i8* [ %61, %58 ], [ %51, %50 ]
  %67 = phi i8* [ %62, %58 ], [ %38, %50 ]
  %68 = phi i8* [ %63, %58 ], [ %52, %50 ]
  %69 = load i8, i8* %67, align 1
  store i8 %69, i8* %66, align 1
  %70 = ptrtoint i8* %68 to i64
  %71 = ptrtoint i32* %4 to i64
  %72 = sub i64 %70, %71
  %73 = trunc i64 %72 to i32
  br label %74

74:                                               ; preds = %65, %37
  %75 = phi i8* [ %8, %65 ], [ %38, %37 ]
  %76 = phi i32 [ %73, %65 ], [ %39, %37 ]
  call void @ucnv_cbFromUWriteBytes_69(%struct.UConverterFromUnicodeArgs* %0, i8* %75, i32 %76, i32 %1, i32* %2) #11
  br label %77

77:                                               ; preds = %74, %64
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL22ucnv_MBCSGetUnicodeSetPK10UConverterPK9USetAdder20UConverterUnicodeSetP10UErrorCode(%struct.UConverter* nocapture readonly, %struct.USetAdder*, i32, i32*) #0 {
  %5 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 7
  %6 = load i32, i32* %5, align 8
  %7 = trunc i32 %6 to i16
  %8 = icmp slt i16 %7, 0
  br i1 %8, label %9, label %16

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 2
  %11 = load void (%struct.USet*, i32, i32)*, void (%struct.USet*, i32, i32)** %10, align 8
  %12 = getelementptr inbounds %struct.USetAdder, %struct.USetAdder* %1, i64 0, i32 0
  %13 = load %struct.USet*, %struct.USet** %12, align 8
  tail call void %11(%struct.USet* %13, i32 0, i32 55295) #11
  %14 = load void (%struct.USet*, i32, i32)*, void (%struct.USet*, i32, i32)** %10, align 8
  %15 = load %struct.USet*, %struct.USet** %12, align 8
  tail call void %14(%struct.USet* %15, i32 57344, i32 1114111) #11
  br label %23

16:                                               ; preds = %4
  %17 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %0, i64 0, i32 6
  %18 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %17, align 8
  %19 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %18, i64 0, i32 8, i32 14
  %20 = load i8, i8* %19, align 4
  %21 = icmp eq i8 %20, -37
  %22 = zext i1 %21 to i32
  tail call void @ucnv_MBCSGetFilteredUnicodeSetForUnicode_69(%struct.UConverterSharedData* %18, %struct.USetAdder* %1, i32 %2, i32 %22, i32* %3) #11
  br label %23

23:                                               ; preds = %16, %9
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #6

declare %struct.UConverterSharedData* @ucnv_load_69(%struct.UConverterLoadArgs*, i32*) local_unnamed_addr #2

declare void @ucnv_unload_69(%struct.UConverterSharedData*) local_unnamed_addr #2

; Function Attrs: allocsize(0)
declare noalias i8* @uprv_malloc_69(i64) local_unnamed_addr #7

declare void @udata_getInfo_69(%struct.UDataMemory*, %struct.UDataInfo*) local_unnamed_addr #2

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc void @_ZL12getStatePropPA256_KiPai([256 x i32]* readonly, i8*, i32) unnamed_addr #4 {
  %4 = sext i32 %2 to i64
  %5 = getelementptr inbounds i8, i8* %1, i64 %4
  store i8 0, i8* %5, align 1
  br label %6

6:                                                ; preds = %28, %3
  %7 = phi i64 [ %29, %28 ], [ 0, %3 ]
  %8 = getelementptr inbounds [256 x i32], [256 x i32]* %0, i64 %4, i64 %7
  %9 = load i32, i32* %8, align 4
  %10 = lshr i32 %9, 24
  %11 = and i32 %10, 127
  %12 = zext i32 %11 to i64
  %13 = getelementptr inbounds i8, i8* %1, i64 %12
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i8 %14, -1
  br i1 %15, label %16, label %17

16:                                               ; preds = %6
  tail call fastcc void @_ZL12getStatePropPA256_KiPai([256 x i32]* %0, i8* %1, i32 %11)
  br label %17

17:                                               ; preds = %16, %6
  %18 = icmp sgt i32 %9, -1
  br i1 %18, label %19, label %22

19:                                               ; preds = %17
  %20 = load i8, i8* %13, align 1
  %21 = icmp sgt i8 %20, -1
  br i1 %21, label %30, label %25

22:                                               ; preds = %17
  %23 = and i32 %9, 14680064
  %24 = icmp ult i32 %23, 6291456
  br i1 %24, label %30, label %25

25:                                               ; preds = %22, %19
  %26 = icmp eq i64 %7, 255
  br i1 %26, label %27, label %28

27:                                               ; preds = %25
  store i8 -64, i8* %5, align 1
  br label %105

28:                                               ; preds = %25
  %29 = add nuw nsw i64 %7, 1
  br label %6

30:                                               ; preds = %22, %19
  %31 = trunc i64 %7 to i32
  %32 = lshr i32 %31, 5
  %33 = shl nuw nsw i32 %32, 3
  %34 = load i8, i8* %5, align 1
  %35 = trunc i32 %33 to i8
  %36 = or i8 %34, %35
  store i8 %36, i8* %5, align 1
  %37 = icmp ult i32 %31, 255
  br i1 %37, label %38, label %71

38:                                               ; preds = %30
  %39 = and i64 %7, 4294967295
  br label %40

40:                                               ; preds = %38, %60
  %41 = phi i64 [ 255, %38 ], [ %61, %60 ]
  %42 = phi i32 [ 255, %38 ], [ %62, %60 ]
  %43 = getelementptr inbounds [256 x i32], [256 x i32]* %0, i64 %4, i64 %41
  %44 = load i32, i32* %43, align 4
  %45 = lshr i32 %44, 24
  %46 = and i32 %45, 127
  %47 = zext i32 %46 to i64
  %48 = getelementptr inbounds i8, i8* %1, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = icmp eq i8 %49, -1
  br i1 %50, label %51, label %52

51:                                               ; preds = %40
  tail call fastcc void @_ZL12getStatePropPA256_KiPai([256 x i32]* %0, i8* %1, i32 %46)
  br label %52

52:                                               ; preds = %51, %40
  %53 = icmp sgt i32 %44, -1
  br i1 %53, label %54, label %57

54:                                               ; preds = %52
  %55 = load i8, i8* %48, align 1
  %56 = icmp sgt i8 %55, -1
  br i1 %56, label %66, label %60

57:                                               ; preds = %52
  %58 = and i32 %44, 14680064
  %59 = icmp ult i32 %58, 6291456
  br i1 %59, label %64, label %60

60:                                               ; preds = %54, %57
  %61 = add nsw i64 %41, -1
  %62 = add nsw i32 %42, -1
  %63 = icmp ult i64 %39, %61
  br i1 %63, label %40, label %68

64:                                               ; preds = %57
  %65 = trunc i64 %41 to i32
  br label %68

66:                                               ; preds = %54
  %67 = trunc i64 %41 to i32
  br label %68

68:                                               ; preds = %60, %66, %64
  %69 = phi i32 [ %65, %64 ], [ %67, %66 ], [ %62, %60 ]
  %70 = load i8, i8* %5, align 1
  br label %71

71:                                               ; preds = %68, %30
  %72 = phi i8 [ %36, %30 ], [ %70, %68 ]
  %73 = phi i32 [ 255, %30 ], [ %69, %68 ]
  %74 = lshr i32 %73, 5
  %75 = trunc i32 %74 to i8
  %76 = or i8 %72, %75
  store i8 %76, i8* %5, align 1
  %77 = icmp slt i32 %73, %31
  br i1 %77, label %105, label %78

78:                                               ; preds = %71
  %79 = and i64 %7, 4294967295
  %80 = zext i32 %73 to i64
  br label %81

81:                                               ; preds = %78, %102
  %82 = phi i64 [ %79, %78 ], [ %103, %102 ]
  %83 = getelementptr inbounds [256 x i32], [256 x i32]* %0, i64 %4, i64 %82
  %84 = load i32, i32* %83, align 4
  %85 = lshr i32 %84, 24
  %86 = and i32 %85, 127
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds i8, i8* %1, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = icmp eq i8 %89, -1
  br i1 %90, label %91, label %92

91:                                               ; preds = %81
  tail call fastcc void @_ZL12getStatePropPA256_KiPai([256 x i32]* %0, i8* %1, i32 %86)
  br label %92

92:                                               ; preds = %91, %81
  %93 = icmp slt i32 %84, 0
  br i1 %93, label %94, label %102

94:                                               ; preds = %92
  %95 = load i8, i8* %88, align 1
  %96 = or i8 %95, 64
  store i8 %96, i8* %88, align 1
  %97 = and i32 %84, 12582912
  %98 = icmp eq i32 %97, 0
  br i1 %98, label %99, label %102

99:                                               ; preds = %94
  %100 = load i8, i8* %5, align 1
  %101 = or i8 %100, 64
  store i8 %101, i8* %5, align 1
  br label %102

102:                                              ; preds = %94, %99, %92
  %103 = add nuw nsw i64 %82, 1
  %104 = icmp ult i64 %82, %80
  br i1 %104, label %81, label %105

105:                                              ; preds = %102, %71, %27
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc signext i8 @_ZL7enumToUP19UConverterMBCSTablePaijjPFaPKvjPiES3_P10UErrorCode(%struct.UConverterMBCSTable* nocapture readonly, i8* nocapture readonly, i32, i32, i32, i8* nocapture readonly) unnamed_addr #0 {
  %7 = alloca [32 x i32], align 16
  %8 = bitcast [32 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %8) #11
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 128, i1 false)
  %9 = getelementptr inbounds %struct.UConverterMBCSTable, %struct.UConverterMBCSTable* %0, i64 0, i32 4
  %10 = load [256 x i32]*, [256 x i32]** %9, align 8
  %11 = sext i32 %2 to i64
  %12 = getelementptr inbounds %struct.UConverterMBCSTable, %struct.UConverterMBCSTable* %0, i64 0, i32 6
  %13 = load i16*, i16** %12, align 8
  %14 = shl i32 %4, 8
  %15 = getelementptr inbounds i8, i8* %1, i64 %11
  %16 = load i8, i8* %15, align 1
  %17 = sext i8 %16 to i32
  %18 = shl nsw i32 %17, 2
  %19 = and i32 %18, 224
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %30

21:                                               ; preds = %6
  %22 = icmp sgt i8 %16, 63
  br i1 %22, label %28, label %23

23:                                               ; preds = %21
  %24 = and i8 %16, 7
  %25 = add nuw nsw i8 %24, 1
  %26 = zext i8 %25 to i32
  %27 = shl nuw nsw i32 %26, 5
  br label %37

28:                                               ; preds = %21
  %29 = getelementptr inbounds [32 x i32], [32 x i32]* %7, i64 0, i64 0
  store i32 -1, i32* %29, align 16
  br label %30

30:                                               ; preds = %28, %6
  %31 = phi i32 [ 1, %28 ], [ %19, %6 ]
  %32 = and i8 %16, 7
  %33 = add nuw nsw i8 %32, 1
  %34 = zext i8 %33 to i32
  %35 = shl nuw nsw i32 %34, 5
  %36 = icmp ult i32 %31, %35
  br i1 %36, label %37, label %208

37:                                               ; preds = %23, %30
  %38 = phi i32 [ %27, %23 ], [ %35, %30 ]
  %39 = phi i32 [ 0, %23 ], [ %31, %30 ]
  %40 = getelementptr inbounds i8, i8* %5, i64 40
  %41 = bitcast i8* %40 to i16**
  %42 = getelementptr inbounds i8, i8* %5, i64 184
  %43 = bitcast i8* %42 to i8**
  %44 = getelementptr inbounds i8, i8* %5, i64 204
  %45 = zext i32 %39 to i64
  %46 = zext i32 %38 to i64
  br label %47

47:                                               ; preds = %205, %37
  %48 = phi i64 [ %45, %37 ], [ %120, %205 ]
  %49 = phi i32 [ -1, %37 ], [ %206, %205 ]
  %50 = getelementptr inbounds [256 x i32], [256 x i32]* %10, i64 %11, i64 %48
  %51 = load i32, i32* %50, align 4
  %52 = icmp sgt i32 %51, -1
  br i1 %52, label %53, label %69

53:                                               ; preds = %47
  %54 = lshr i32 %51, 24
  %55 = zext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %1, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = icmp sgt i8 %57, -1
  br i1 %58, label %59, label %66

59:                                               ; preds = %53
  %60 = and i32 %51, 16777215
  %61 = add i32 %60, %3
  %62 = trunc i64 %48 to i32
  %63 = or i32 %14, %62
  %64 = tail call fastcc signext i8 @_ZL7enumToUP19UConverterMBCSTablePaijjPFaPKvjPiES3_P10UErrorCode(%struct.UConverterMBCSTable* %0, i8* %1, i32 %54, i32 %61, i32 %63, i8* %5)
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %208, label %66

66:                                               ; preds = %53, %59
  %67 = and i64 %48, 31
  %68 = getelementptr inbounds [32 x i32], [32 x i32]* %7, i64 0, i64 %67
  store i32 -1, i32* %68, align 4
  br label %118

69:                                               ; preds = %47
  %70 = lshr i32 %51, 20
  %71 = and i32 %70, 15
  switch i32 %71, label %113 [
    i32 0, label %72
    i32 4, label %74
    i32 5, label %83
    i32 1, label %110
  ]

72:                                               ; preds = %69
  %73 = and i32 %51, 65535
  br label %113

74:                                               ; preds = %69
  %75 = and i32 %51, 65535
  %76 = add i32 %75, %3
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i16, i16* %13, i64 %77
  %79 = load i16, i16* %78, align 2
  %80 = zext i16 %79 to i32
  %81 = icmp ult i16 %79, -2
  %82 = select i1 %81, i32 %80, i32 -1
  br label %113

83:                                               ; preds = %69
  %84 = and i32 %51, 65535
  %85 = add i32 %84, %3
  %86 = add nsw i32 %85, 1
  %87 = sext i32 %85 to i64
  %88 = getelementptr inbounds i16, i16* %13, i64 %87
  %89 = load i16, i16* %88, align 2
  %90 = zext i16 %89 to i32
  %91 = icmp ult i16 %89, -10240
  br i1 %91, label %113, label %92

92:                                               ; preds = %83
  %93 = icmp ult i16 %89, -9216
  br i1 %93, label %94, label %103

94:                                               ; preds = %92
  %95 = shl nuw nsw i32 %90, 10
  %96 = and i32 %95, 1047552
  %97 = sext i32 %86 to i64
  %98 = getelementptr inbounds i16, i16* %13, i64 %97
  %99 = load i16, i16* %98, align 2
  %100 = zext i16 %99 to i32
  %101 = add nuw nsw i32 %96, 9216
  %102 = add nuw nsw i32 %101, %100
  br label %113

103:                                              ; preds = %92
  %104 = icmp eq i16 %89, -8192
  br i1 %104, label %105, label %113

105:                                              ; preds = %103
  %106 = sext i32 %86 to i64
  %107 = getelementptr inbounds i16, i16* %13, i64 %106
  %108 = load i16, i16* %107, align 2
  %109 = zext i16 %108 to i32
  br label %113

110:                                              ; preds = %69
  %111 = and i32 %51, 1048575
  %112 = add nuw nsw i32 %111, 65536
  br label %113

113:                                              ; preds = %69, %83, %105, %94, %103, %74, %110, %72
  %114 = phi i32 [ %73, %72 ], [ %82, %74 ], [ %112, %110 ], [ %90, %83 ], [ %102, %94 ], [ %109, %105 ], [ -1, %103 ], [ -1, %69 ]
  %115 = and i64 %48, 31
  %116 = getelementptr inbounds [32 x i32], [32 x i32]* %7, i64 0, i64 %115
  store i32 %114, i32* %116, align 4
  %117 = and i32 %114, %49
  br label %118

118:                                              ; preds = %66, %113
  %119 = phi i32 [ %117, %113 ], [ %49, %66 ]
  %120 = add nuw nsw i64 %48, 1
  %121 = and i64 %120, 31
  %122 = icmp eq i64 %121, 0
  %123 = icmp sgt i32 %119, -1
  %124 = and i1 %122, %123
  br i1 %124, label %125, label %205

125:                                              ; preds = %118
  %126 = trunc i64 %48 to i32
  %127 = add i32 %126, -31
  %128 = or i32 %127, %14
  %129 = load i16*, i16** %41, align 8
  %130 = load i8*, i8** %43, align 8
  %131 = load i8, i8* %44, align 4
  switch i8 %131, label %148 [
    i8 8, label %132
    i8 9, label %140
  ]

132:                                              ; preds = %125
  %133 = icmp ult i32 %128, 65536
  br i1 %133, label %148, label %134

134:                                              ; preds = %132
  %135 = icmp ult i32 %128, 9371648
  br i1 %135, label %136, label %138

136:                                              ; preds = %134
  %137 = and i32 %128, 32767
  br label %148

138:                                              ; preds = %134
  %139 = and i32 %128, 65407
  br label %148

140:                                              ; preds = %125
  %141 = icmp ult i32 %128, 16777216
  br i1 %141, label %148, label %142

142:                                              ; preds = %140
  %143 = icmp ult i32 %128, -1895825408
  br i1 %143, label %144, label %146

144:                                              ; preds = %142
  %145 = and i32 %128, 8388607
  br label %148

146:                                              ; preds = %142
  %147 = and i32 %128, 16744447
  br label %148

148:                                              ; preds = %146, %144, %140, %138, %136, %132, %125
  %149 = phi i32 [ %128, %125 ], [ %128, %140 ], [ %145, %144 ], [ %147, %146 ], [ %128, %132 ], [ %137, %136 ], [ %139, %138 ]
  %150 = bitcast i16* %129 to i32*
  %151 = bitcast i8* %130 to i32*
  %152 = bitcast i8* %130 to i16*
  br label %153

153:                                              ; preds = %201, %148
  %154 = phi i64 [ 0, %148 ], [ %203, %201 ]
  %155 = phi i32 [ %149, %148 ], [ %202, %201 ]
  %156 = getelementptr inbounds [32 x i32], [32 x i32]* %7, i64 0, i64 %154
  %157 = load i32, i32* %156, align 4
  %158 = icmp slt i32 %157, 0
  br i1 %158, label %201, label %159

159:                                              ; preds = %153
  %160 = lshr i32 %157, 10
  %161 = zext i32 %160 to i64
  %162 = getelementptr inbounds i16, i16* %129, i64 %161
  %163 = load i16, i16* %162, align 2
  %164 = zext i16 %163 to i64
  %165 = getelementptr inbounds i32, i32* %150, i64 %164
  %166 = lshr i32 %157, 4
  %167 = and i32 %166, 63
  %168 = zext i32 %167 to i64
  %169 = getelementptr inbounds i32, i32* %165, i64 %168
  %170 = load i32, i32* %169, align 4
  %171 = shl i32 %170, 4
  %172 = and i32 %171, 1048560
  %173 = and i32 %157, 15
  %174 = or i32 %172, %173
  %175 = load i8, i8* %44, align 4
  switch i8 %175, label %190 [
    i8 2, label %176
    i8 9, label %176
    i8 3, label %187
  ]

176:                                              ; preds = %159, %159
  %177 = mul nuw nsw i32 %174, 3
  %178 = zext i32 %177 to i64
  %179 = getelementptr inbounds i8, i8* %130, i64 %178
  %180 = lshr i32 %155, 16
  %181 = trunc i32 %180 to i8
  store i8 %181, i8* %179, align 1
  %182 = lshr i32 %155, 8
  %183 = trunc i32 %182 to i8
  %184 = getelementptr inbounds i8, i8* %179, i64 1
  store i8 %183, i8* %184, align 1
  %185 = trunc i32 %155 to i8
  %186 = getelementptr inbounds i8, i8* %179, i64 2
  store i8 %185, i8* %186, align 1
  br label %194

187:                                              ; preds = %159
  %188 = zext i32 %174 to i64
  %189 = getelementptr inbounds i32, i32* %151, i64 %188
  store i32 %155, i32* %189, align 4
  br label %194

190:                                              ; preds = %159
  %191 = trunc i32 %155 to i16
  %192 = zext i32 %174 to i64
  %193 = getelementptr inbounds i16, i16* %152, i64 %192
  store i16 %191, i16* %193, align 2
  br label %194

194:                                              ; preds = %190, %187, %176
  %195 = or i32 %173, 16
  %196 = zext i32 %195 to i64
  %197 = shl i64 1, %196
  %198 = load i32, i32* %169, align 4
  %199 = trunc i64 %197 to i32
  %200 = or i32 %198, %199
  store i32 %200, i32* %169, align 4
  br label %201

201:                                              ; preds = %194, %153
  %202 = add i32 %155, 1
  %203 = add nuw nsw i64 %154, 1
  %204 = icmp eq i64 %203, 32
  br i1 %204, label %205, label %153

205:                                              ; preds = %201, %118
  %206 = phi i32 [ %119, %118 ], [ -1, %201 ]
  %207 = icmp eq i64 %120, %46
  br i1 %207, label %208, label %47

208:                                              ; preds = %59, %205, %30
  %209 = phi i8 [ 1, %30 ], [ 0, %59 ], [ 1, %205 ]
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %8) #11
  ret i8 %209
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL17ucnv_SBCSFromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterFromUnicodeArgs* nocapture, %struct.UConverterToUnicodeArgs* nocapture, i32*) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i16*, align 8
  %6 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #11
  %7 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 2
  %8 = load %struct.UConverter*, %struct.UConverter** %7, align 8
  %9 = bitcast %struct.UConverter* %8 to i8*
  %10 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 2
  %11 = load %struct.UConverter*, %struct.UConverter** %10, align 8
  %12 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 3
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 4
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 5
  %17 = bitcast i8** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast i8** %4 to i64*
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 6
  %21 = bitcast i8** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %22, %18
  %24 = trunc i64 %23 to i32
  %25 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %11, i64 0, i32 6
  %26 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %25, align 8
  %27 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %26, i64 0, i32 8, i32 8
  %28 = load i16*, i16** %27, align 8
  %29 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %26, i64 0, i32 8, i32 10, i64 0
  %30 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %11, i64 0, i32 7
  %31 = load i32, i32* %30, align 8
  %32 = and i32 %31, 16
  %33 = icmp eq i32 %32, 0
  %34 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %26, i64 0, i32 8, i32 12
  %35 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %26, i64 0, i32 8, i32 11
  %36 = select i1 %33, i8** %35, i8** %34
  %37 = bitcast i8** %36 to i16**
  %38 = load i16*, i16** %37, align 8
  %39 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %26, i64 0, i32 8, i32 18
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %11, i64 0, i32 11
  %42 = load i8, i8* %41, align 1
  %43 = icmp eq i8 %42, 0
  %44 = select i1 %43, i32 3072, i32 2048
  %45 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %26, i64 0, i32 8, i32 15
  %46 = load i8, i8* %45, align 1
  %47 = and i8 %46, 1
  %48 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 12
  %49 = load i8, i8* %48, align 8
  %50 = icmp sgt i8 %49, 0
  br i1 %50, label %51, label %57

51:                                               ; preds = %3
  %52 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 15
  %53 = load i32, i32* %52, align 4
  %54 = trunc i32 %53 to i8
  %55 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 14
  %56 = load i32, i32* %55, align 8
  br label %57

57:                                               ; preds = %3, %51
  %58 = phi i8 [ %49, %51 ], [ 0, %3 ]
  %59 = phi i8 [ %54, %51 ], [ 0, %3 ]
  %60 = phi i32 [ %56, %51 ], [ 0, %3 ]
  %61 = ptrtoint i8* %15 to i64
  %62 = ptrtoint i8* %13 to i64
  %63 = sub i64 %61, %62
  %64 = trunc i64 %63 to i32
  %65 = sext i8 %59 to i32
  %66 = sext i8 %58 to i32
  %67 = sub nsw i32 %66, %65
  %68 = add i32 %67, %64
  %69 = icmp sgt i32 %68, 0
  br i1 %69, label %70, label %99

70:                                               ; preds = %57
  %71 = getelementptr inbounds i8, i8* %15, i64 -1
  %72 = load i8, i8* %71, align 1
  %73 = icmp sgt i8 %72, -1
  br i1 %73, label %99, label %74

74:                                               ; preds = %70
  %75 = icmp slt i8 %72, -64
  %76 = icmp sgt i32 %68, 1
  %77 = and i1 %76, %75
  br i1 %77, label %78, label %95

78:                                               ; preds = %74
  %79 = getelementptr inbounds i8, i8* %15, i64 -2
  %80 = load i8, i8* %79, align 1
  %81 = and i8 %80, -16
  %82 = icmp eq i8 %81, -32
  br i1 %82, label %83, label %99

83:                                               ; preds = %78
  %84 = and i8 %80, 15
  %85 = zext i8 %84 to i64
  %86 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = sext i8 %87 to i32
  %89 = lshr i8 %72, 5
  %90 = zext i8 %89 to i32
  %91 = shl i32 1, %90
  %92 = and i32 %91, %88
  %93 = icmp eq i32 %92, 0
  %94 = select i1 %93, i8* %15, i8* %79
  br label %99

95:                                               ; preds = %74
  %96 = add nsw i8 %72, 62
  %97 = icmp ult i8 %96, 46
  %98 = select i1 %97, i8* %71, i8* %15
  br label %99

99:                                               ; preds = %95, %83, %70, %78, %57
  %100 = phi i8* [ %15, %57 ], [ %15, %70 ], [ %15, %78 ], [ %94, %83 ], [ %98, %95 ]
  %101 = icmp ne i32 %60, 0
  %102 = icmp sgt i32 %24, 0
  %103 = and i1 %102, %101
  br i1 %103, label %108, label %104

104:                                              ; preds = %630, %654, %99
  %105 = phi i8* [ %13, %99 ], [ %624, %654 ], [ %624, %630 ]
  %106 = phi i32 [ %24, %99 ], [ %658, %654 ], [ %634, %630 ]
  %107 = icmp ult i8* %105, %100
  br i1 %107, label %110, label %660

108:                                              ; preds = %99
  %109 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 14
  store i32 0, i32* %109, align 8
  store i8 0, i8* %48, align 8
  br label %218

110:                                              ; preds = %104, %127
  %111 = phi i32 [ %129, %127 ], [ %106, %104 ]
  %112 = phi i8* [ %128, %127 ], [ %105, %104 ]
  %113 = icmp sgt i32 %111, 0
  br i1 %113, label %114, label %659

114:                                              ; preds = %110
  %115 = getelementptr inbounds i8, i8* %112, i64 1
  %116 = load i8, i8* %112, align 1
  %117 = zext i8 %116 to i32
  %118 = icmp sgt i8 %116, -1
  br i1 %118, label %119, label %139

119:                                              ; preds = %114
  %120 = lshr i32 %117, 2
  %121 = shl i32 1, %120
  %122 = and i32 %121, %40
  %123 = icmp eq i32 %122, 0
  br i1 %123, label %131, label %124

124:                                              ; preds = %119
  %125 = load i8*, i8** %4, align 8
  %126 = getelementptr inbounds i8, i8* %125, i64 1
  store i8* %126, i8** %4, align 8
  store i8 %116, i8* %125, align 1
  br label %127

127:                                              ; preds = %124, %161, %190
  %128 = phi i8* [ %115, %124 ], [ %150, %161 ], [ %179, %190 ]
  %129 = add nsw i32 %111, -1
  %130 = icmp ult i8* %128, %100
  br i1 %130, label %110, label %660

131:                                              ; preds = %119
  %132 = zext i8 %116 to i32
  %133 = load i16, i16* %29, align 2
  %134 = zext i16 %133 to i32
  %135 = add nuw nsw i32 %134, %132
  %136 = zext i32 %135 to i64
  %137 = getelementptr inbounds i16, i16* %38, i64 %136
  %138 = load i16, i16* %137, align 2
  br label %623

139:                                              ; preds = %114
  %140 = icmp ult i8 %116, -32
  br i1 %140, label %141, label %165

141:                                              ; preds = %139
  %142 = icmp ugt i8 %116, -63
  br i1 %142, label %143, label %216

143:                                              ; preds = %141
  %144 = load i8, i8* %115, align 1
  %145 = xor i8 %144, -128
  %146 = zext i8 %145 to i32
  %147 = icmp ult i8 %145, 64
  br i1 %147, label %148, label %207

148:                                              ; preds = %143
  %149 = and i32 %117, 31
  %150 = getelementptr inbounds i8, i8* %112, i64 2
  %151 = zext i32 %149 to i64
  %152 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %26, i64 0, i32 8, i32 10, i64 %151
  %153 = load i16, i16* %152, align 2
  %154 = zext i16 %153 to i32
  %155 = add nuw nsw i32 %154, %146
  %156 = zext i32 %155 to i64
  %157 = getelementptr inbounds i16, i16* %38, i64 %156
  %158 = load i16, i16* %157, align 2
  %159 = zext i16 %158 to i32
  %160 = icmp ugt i32 %44, %159
  br i1 %160, label %196, label %161

161:                                              ; preds = %148
  %162 = trunc i16 %158 to i8
  %163 = load i8*, i8** %4, align 8
  %164 = getelementptr inbounds i8, i8* %163, i64 1
  store i8* %164, i8** %4, align 8
  store i8 %162, i8* %163, align 1
  br label %127

165:                                              ; preds = %139
  %166 = icmp eq i8 %116, -32
  br i1 %166, label %167, label %203

167:                                              ; preds = %165
  %168 = load i8, i8* %115, align 1
  %169 = xor i8 %168, -128
  %170 = and i8 %169, -32
  %171 = icmp eq i8 %170, 32
  br i1 %171, label %172, label %207

172:                                              ; preds = %167
  %173 = getelementptr inbounds i8, i8* %112, i64 2
  %174 = load i8, i8* %173, align 1
  %175 = xor i8 %174, -128
  %176 = zext i8 %175 to i32
  %177 = icmp ult i8 %175, 64
  br i1 %177, label %178, label %207

178:                                              ; preds = %172
  %179 = getelementptr inbounds i8, i8* %112, i64 3
  %180 = zext i8 %169 to i64
  %181 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %26, i64 0, i32 8, i32 10, i64 %180
  %182 = load i16, i16* %181, align 2
  %183 = zext i16 %182 to i32
  %184 = add nuw nsw i32 %183, %176
  %185 = zext i32 %184 to i64
  %186 = getelementptr inbounds i16, i16* %38, i64 %185
  %187 = load i16, i16* %186, align 2
  %188 = zext i16 %187 to i32
  %189 = icmp ugt i32 %44, %188
  br i1 %189, label %194, label %190

190:                                              ; preds = %178
  %191 = trunc i16 %187 to i8
  %192 = load i8*, i8** %4, align 8
  %193 = getelementptr inbounds i8, i8* %192, i64 1
  store i8* %193, i8** %4, align 8
  store i8 %191, i8* %192, align 1
  br label %127

194:                                              ; preds = %178
  %195 = zext i8 %169 to i32
  br label %196

196:                                              ; preds = %148, %194
  %197 = phi i32 [ %195, %194 ], [ %149, %148 ]
  %198 = phi i32 [ %176, %194 ], [ %146, %148 ]
  %199 = phi i8* [ %179, %194 ], [ %150, %148 ]
  %200 = phi i16 [ %187, %194 ], [ %158, %148 ]
  %201 = shl nuw nsw i32 %197, 6
  %202 = or i32 %201, %198
  br label %623

203:                                              ; preds = %165
  %204 = zext i8 %116 to i32
  %205 = add nsw i8 %116, 62
  %206 = icmp ult i8 %205, 51
  br i1 %206, label %209, label %218

207:                                              ; preds = %143, %172, %167
  %208 = zext i8 %116 to i32
  br label %209

209:                                              ; preds = %207, %203
  %210 = phi i32 [ %208, %207 ], [ %204, %203 ]
  %211 = icmp ugt i8 %116, -33
  %212 = zext i1 %211 to i8
  %213 = icmp ugt i8 %116, -17
  %214 = select i1 %213, i8 3, i8 2
  %215 = add nuw nsw i8 %214, %212
  br label %218

216:                                              ; preds = %141
  %217 = zext i8 %116 to i32
  br label %218

218:                                              ; preds = %209, %203, %216, %108
  %219 = phi i8* [ %13, %108 ], [ %115, %216 ], [ %115, %203 ], [ %115, %209 ]
  %220 = phi i32 [ %24, %108 ], [ %111, %216 ], [ %111, %203 ], [ %111, %209 ]
  %221 = phi i8 [ %58, %108 ], [ 0, %216 ], [ 0, %203 ], [ 0, %209 ]
  %222 = phi i8 [ %58, %108 ], [ 1, %216 ], [ 1, %203 ], [ 1, %209 ]
  %223 = phi i8 [ %59, %108 ], [ 0, %216 ], [ 0, %203 ], [ %215, %209 ]
  %224 = phi i32 [ %60, %108 ], [ %217, %216 ], [ %204, %203 ], [ %210, %209 ]
  %225 = sext i8 %222 to i32
  %226 = sext i8 %223 to i32
  %227 = icmp slt i8 %222, %223
  br i1 %227, label %228, label %437

228:                                              ; preds = %218
  %229 = load i8*, i8** %14, align 8
  %230 = icmp slt i8 %223, 3
  %231 = icmp eq i8 %223, 3
  %232 = zext i8 %223 to i32
  br label %233

233:                                              ; preds = %269, %228
  %234 = phi i32 [ %225, %228 ], [ %271, %269 ]
  %235 = phi i32 [ %224, %228 ], [ %275, %269 ]
  %236 = phi i8 [ %222, %228 ], [ %272, %269 ]
  %237 = phi i8* [ %219, %228 ], [ %270, %269 ]
  %238 = icmp ult i8* %237, %229
  br i1 %238, label %239, label %277

239:                                              ; preds = %233
  %240 = load i8, i8* %237, align 1
  %241 = icmp ugt i32 %234, 1
  %242 = or i1 %230, %241
  br i1 %242, label %243, label %246

243:                                              ; preds = %239
  %244 = icmp slt i8 %240, -64
  %245 = zext i1 %244 to i8
  br label %266

246:                                              ; preds = %239
  br i1 %231, label %247, label %257

247:                                              ; preds = %246
  %248 = and i32 %235, 15
  %249 = zext i32 %248 to i64
  %250 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %249
  %251 = load i8, i8* %250, align 1
  %252 = lshr i8 %240, 5
  %253 = zext i8 %252 to i32
  %254 = shl i32 1, %253
  %255 = trunc i32 %254 to i8
  %256 = and i8 %251, %255
  br label %266

257:                                              ; preds = %246
  %258 = lshr i8 %240, 4
  %259 = zext i8 %258 to i64
  %260 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.1, i64 0, i64 %259
  %261 = load i8, i8* %260, align 1
  %262 = and i32 %235, 7
  %263 = shl i32 1, %262
  %264 = trunc i32 %263 to i8
  %265 = and i8 %261, %264
  br label %266

266:                                              ; preds = %243, %247, %257
  %267 = phi i8 [ %245, %243 ], [ %256, %247 ], [ %265, %257 ]
  %268 = icmp eq i8 %267, 0
  br i1 %268, label %435, label %269

269:                                              ; preds = %266
  %270 = getelementptr inbounds i8, i8* %237, i64 1
  %271 = add nuw nsw i32 %234, 1
  %272 = add nuw nsw i8 %236, 1
  %273 = shl i32 %235, 6
  %274 = zext i8 %240 to i32
  %275 = add nsw i32 %273, %274
  %276 = icmp eq i32 %271, %232
  br i1 %276, label %437, label %233

277:                                              ; preds = %233
  %278 = trunc i32 %234 to i8
  %279 = sext i8 %221 to i32
  %280 = sub nsw i32 %279, %234
  %281 = sext i32 %280 to i64
  %282 = getelementptr inbounds i8, i8* %237, i64 %281
  %283 = icmp slt i8 %221, %278
  br i1 %283, label %284, label %430

284:                                              ; preds = %277
  %285 = zext i8 %221 to i64
  %286 = and i32 %234, 255
  %287 = zext i32 %286 to i64
  %288 = sub nsw i64 %287, %285
  %289 = icmp ult i64 %288, 32
  br i1 %289, label %387, label %290

290:                                              ; preds = %284
  %291 = add nuw nsw i64 %285, 65
  %292 = getelementptr i8, i8* %9, i64 %291
  %293 = add nuw nsw i64 %287, 65
  %294 = getelementptr i8, i8* %9, i64 %293
  %295 = zext i32 %234 to i64
  %296 = sub nsw i64 %287, %295
  %297 = getelementptr i8, i8* %237, i64 %296
  %298 = icmp ult i8* %292, %297
  %299 = icmp ult i8* %282, %294
  %300 = and i1 %298, %299
  br i1 %300, label %387, label %301

301:                                              ; preds = %290
  %302 = and i64 %288, -32
  %303 = add nsw i64 %302, %285
  %304 = getelementptr i8, i8* %282, i64 %302
  %305 = add nsw i64 %302, -32
  %306 = lshr exact i64 %305, 5
  %307 = add nuw nsw i64 %306, 1
  %308 = and i64 %307, 3
  %309 = icmp ult i64 %305, 96
  br i1 %309, label %365, label %310

310:                                              ; preds = %301
  %311 = sub nsw i64 %307, %308
  br label %312

312:                                              ; preds = %312, %310
  %313 = phi i64 [ 0, %310 ], [ %362, %312 ]
  %314 = phi i64 [ %311, %310 ], [ %363, %312 ]
  %315 = add i64 %313, %285
  %316 = getelementptr i8, i8* %282, i64 %313
  %317 = bitcast i8* %316 to <16 x i8>*
  %318 = load <16 x i8>, <16 x i8>* %317, align 1, !alias.scope !25
  %319 = getelementptr i8, i8* %316, i64 16
  %320 = bitcast i8* %319 to <16 x i8>*
  %321 = load <16 x i8>, <16 x i8>* %320, align 1, !alias.scope !25
  %322 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %315
  %323 = bitcast i8* %322 to <16 x i8>*
  store <16 x i8> %318, <16 x i8>* %323, align 1, !alias.scope !28, !noalias !25
  %324 = getelementptr inbounds i8, i8* %322, i64 16
  %325 = bitcast i8* %324 to <16 x i8>*
  store <16 x i8> %321, <16 x i8>* %325, align 1, !alias.scope !28, !noalias !25
  %326 = or i64 %313, 32
  %327 = add i64 %326, %285
  %328 = getelementptr i8, i8* %282, i64 %326
  %329 = bitcast i8* %328 to <16 x i8>*
  %330 = load <16 x i8>, <16 x i8>* %329, align 1, !alias.scope !25
  %331 = getelementptr i8, i8* %328, i64 16
  %332 = bitcast i8* %331 to <16 x i8>*
  %333 = load <16 x i8>, <16 x i8>* %332, align 1, !alias.scope !25
  %334 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %327
  %335 = bitcast i8* %334 to <16 x i8>*
  store <16 x i8> %330, <16 x i8>* %335, align 1, !alias.scope !28, !noalias !25
  %336 = getelementptr inbounds i8, i8* %334, i64 16
  %337 = bitcast i8* %336 to <16 x i8>*
  store <16 x i8> %333, <16 x i8>* %337, align 1, !alias.scope !28, !noalias !25
  %338 = or i64 %313, 64
  %339 = add i64 %338, %285
  %340 = getelementptr i8, i8* %282, i64 %338
  %341 = bitcast i8* %340 to <16 x i8>*
  %342 = load <16 x i8>, <16 x i8>* %341, align 1, !alias.scope !25
  %343 = getelementptr i8, i8* %340, i64 16
  %344 = bitcast i8* %343 to <16 x i8>*
  %345 = load <16 x i8>, <16 x i8>* %344, align 1, !alias.scope !25
  %346 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %339
  %347 = bitcast i8* %346 to <16 x i8>*
  store <16 x i8> %342, <16 x i8>* %347, align 1, !alias.scope !28, !noalias !25
  %348 = getelementptr inbounds i8, i8* %346, i64 16
  %349 = bitcast i8* %348 to <16 x i8>*
  store <16 x i8> %345, <16 x i8>* %349, align 1, !alias.scope !28, !noalias !25
  %350 = or i64 %313, 96
  %351 = add i64 %350, %285
  %352 = getelementptr i8, i8* %282, i64 %350
  %353 = bitcast i8* %352 to <16 x i8>*
  %354 = load <16 x i8>, <16 x i8>* %353, align 1, !alias.scope !25
  %355 = getelementptr i8, i8* %352, i64 16
  %356 = bitcast i8* %355 to <16 x i8>*
  %357 = load <16 x i8>, <16 x i8>* %356, align 1, !alias.scope !25
  %358 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %351
  %359 = bitcast i8* %358 to <16 x i8>*
  store <16 x i8> %354, <16 x i8>* %359, align 1, !alias.scope !28, !noalias !25
  %360 = getelementptr inbounds i8, i8* %358, i64 16
  %361 = bitcast i8* %360 to <16 x i8>*
  store <16 x i8> %357, <16 x i8>* %361, align 1, !alias.scope !28, !noalias !25
  %362 = add i64 %313, 128
  %363 = add i64 %314, -4
  %364 = icmp eq i64 %363, 0
  br i1 %364, label %365, label %312, !llvm.loop !30

365:                                              ; preds = %312, %301
  %366 = phi i64 [ 0, %301 ], [ %362, %312 ]
  %367 = icmp eq i64 %308, 0
  br i1 %367, label %385, label %368

368:                                              ; preds = %365, %368
  %369 = phi i64 [ %382, %368 ], [ %366, %365 ]
  %370 = phi i64 [ %383, %368 ], [ %308, %365 ]
  %371 = add i64 %369, %285
  %372 = getelementptr i8, i8* %282, i64 %369
  %373 = bitcast i8* %372 to <16 x i8>*
  %374 = load <16 x i8>, <16 x i8>* %373, align 1, !alias.scope !25
  %375 = getelementptr i8, i8* %372, i64 16
  %376 = bitcast i8* %375 to <16 x i8>*
  %377 = load <16 x i8>, <16 x i8>* %376, align 1, !alias.scope !25
  %378 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %371
  %379 = bitcast i8* %378 to <16 x i8>*
  store <16 x i8> %374, <16 x i8>* %379, align 1, !alias.scope !28, !noalias !25
  %380 = getelementptr inbounds i8, i8* %378, i64 16
  %381 = bitcast i8* %380 to <16 x i8>*
  store <16 x i8> %377, <16 x i8>* %381, align 1, !alias.scope !28, !noalias !25
  %382 = add i64 %369, 32
  %383 = add i64 %370, -1
  %384 = icmp eq i64 %383, 0
  br i1 %384, label %385, label %368, !llvm.loop !31

385:                                              ; preds = %368, %365
  %386 = icmp eq i64 %288, %302
  br i1 %386, label %430, label %387

387:                                              ; preds = %385, %290, %284
  %388 = phi i64 [ %285, %290 ], [ %285, %284 ], [ %303, %385 ]
  %389 = phi i8* [ %282, %290 ], [ %282, %284 ], [ %304, %385 ]
  %390 = sub nsw i64 %287, %388
  %391 = xor i64 %388, -1
  %392 = add nsw i64 %391, %287
  %393 = and i64 %390, 3
  %394 = icmp eq i64 %393, 0
  br i1 %394, label %405, label %395

395:                                              ; preds = %387, %395
  %396 = phi i64 [ %401, %395 ], [ %388, %387 ]
  %397 = phi i8* [ %399, %395 ], [ %389, %387 ]
  %398 = phi i64 [ %403, %395 ], [ %393, %387 ]
  %399 = getelementptr inbounds i8, i8* %397, i64 1
  %400 = load i8, i8* %397, align 1
  %401 = add nuw nsw i64 %396, 1
  %402 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %396
  store i8 %400, i8* %402, align 1
  %403 = add i64 %398, -1
  %404 = icmp eq i64 %403, 0
  br i1 %404, label %405, label %395, !llvm.loop !32

405:                                              ; preds = %395, %387
  %406 = phi i8* [ undef, %387 ], [ %399, %395 ]
  %407 = phi i64 [ %388, %387 ], [ %401, %395 ]
  %408 = phi i8* [ %389, %387 ], [ %399, %395 ]
  %409 = icmp ult i64 %392, 3
  br i1 %409, label %430, label %410

410:                                              ; preds = %405, %410
  %411 = phi i64 [ %427, %410 ], [ %407, %405 ]
  %412 = phi i8* [ %425, %410 ], [ %408, %405 ]
  %413 = getelementptr inbounds i8, i8* %412, i64 1
  %414 = load i8, i8* %412, align 1
  %415 = add nuw nsw i64 %411, 1
  %416 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %411
  store i8 %414, i8* %416, align 1
  %417 = getelementptr inbounds i8, i8* %412, i64 2
  %418 = load i8, i8* %413, align 1
  %419 = add nuw nsw i64 %411, 2
  %420 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %415
  store i8 %418, i8* %420, align 1
  %421 = getelementptr inbounds i8, i8* %412, i64 3
  %422 = load i8, i8* %417, align 1
  %423 = add nuw nsw i64 %411, 3
  %424 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %419
  store i8 %422, i8* %424, align 1
  %425 = getelementptr inbounds i8, i8* %412, i64 4
  %426 = load i8, i8* %421, align 1
  %427 = add nuw nsw i64 %411, 4
  %428 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %423
  store i8 %426, i8* %428, align 1
  %429 = icmp eq i64 %427, %287
  br i1 %429, label %430, label %410, !llvm.loop !33

430:                                              ; preds = %405, %410, %385, %277
  %431 = phi i8* [ %282, %277 ], [ %304, %385 ], [ %406, %405 ], [ %425, %410 ]
  %432 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 14
  store i32 %235, i32* %432, align 8
  store i8 %278, i8* %48, align 8
  %433 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 15
  store i32 %226, i32* %433, align 4
  store i8* %431, i8** %12, align 8
  %434 = load i64, i64* %19, align 8
  store i64 %434, i64* %17, align 8
  br label %711

435:                                              ; preds = %266
  %436 = trunc i32 %234 to i8
  br label %437

437:                                              ; preds = %269, %435, %218
  %438 = phi i8* [ %219, %218 ], [ %237, %435 ], [ %270, %269 ]
  %439 = phi i8 [ %222, %218 ], [ %436, %435 ], [ %272, %269 ]
  %440 = phi i32 [ %224, %218 ], [ %235, %435 ], [ %275, %269 ]
  %441 = phi i32 [ %225, %218 ], [ %234, %435 ], [ %232, %269 ]
  %442 = icmp eq i8 %439, %223
  br i1 %442, label %443, label %451

443:                                              ; preds = %437
  %444 = sext i8 %223 to i64
  %445 = getelementptr inbounds [5 x i32], [5 x i32]* @_ZL12utf8_offsets, i64 0, i64 %444
  %446 = load i32, i32* %445, align 4
  %447 = sub nsw i32 %440, %446
  %448 = icmp sgt i8 %223, 3
  %449 = icmp eq i8 %47, 0
  %450 = and i1 %448, %449
  br i1 %450, label %623, label %605

451:                                              ; preds = %437
  %452 = sext i8 %221 to i32
  %453 = sub nsw i32 %452, %441
  %454 = sext i32 %453 to i64
  %455 = getelementptr inbounds i8, i8* %438, i64 %454
  %456 = icmp slt i8 %221, %439
  br i1 %456, label %457, label %602

457:                                              ; preds = %451
  %458 = zext i8 %221 to i64
  %459 = zext i8 %439 to i64
  %460 = sub nsw i64 %459, %458
  %461 = icmp ult i64 %460, 32
  br i1 %461, label %559, label %462

462:                                              ; preds = %457
  %463 = add nuw nsw i64 %458, 65
  %464 = getelementptr i8, i8* %9, i64 %463
  %465 = add nuw nsw i64 %459, 65
  %466 = getelementptr i8, i8* %9, i64 %465
  %467 = zext i32 %441 to i64
  %468 = sub nsw i64 %459, %467
  %469 = getelementptr i8, i8* %438, i64 %468
  %470 = icmp ult i8* %464, %469
  %471 = icmp ult i8* %455, %466
  %472 = and i1 %470, %471
  br i1 %472, label %559, label %473

473:                                              ; preds = %462
  %474 = and i64 %460, -32
  %475 = add nsw i64 %474, %458
  %476 = getelementptr i8, i8* %455, i64 %474
  %477 = add nsw i64 %474, -32
  %478 = lshr exact i64 %477, 5
  %479 = add nuw nsw i64 %478, 1
  %480 = and i64 %479, 3
  %481 = icmp ult i64 %477, 96
  br i1 %481, label %537, label %482

482:                                              ; preds = %473
  %483 = sub nsw i64 %479, %480
  br label %484

484:                                              ; preds = %484, %482
  %485 = phi i64 [ 0, %482 ], [ %534, %484 ]
  %486 = phi i64 [ %483, %482 ], [ %535, %484 ]
  %487 = add i64 %485, %458
  %488 = getelementptr i8, i8* %455, i64 %485
  %489 = bitcast i8* %488 to <16 x i8>*
  %490 = load <16 x i8>, <16 x i8>* %489, align 1, !alias.scope !34
  %491 = getelementptr i8, i8* %488, i64 16
  %492 = bitcast i8* %491 to <16 x i8>*
  %493 = load <16 x i8>, <16 x i8>* %492, align 1, !alias.scope !34
  %494 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %487
  %495 = bitcast i8* %494 to <16 x i8>*
  store <16 x i8> %490, <16 x i8>* %495, align 1, !alias.scope !37, !noalias !34
  %496 = getelementptr inbounds i8, i8* %494, i64 16
  %497 = bitcast i8* %496 to <16 x i8>*
  store <16 x i8> %493, <16 x i8>* %497, align 1, !alias.scope !37, !noalias !34
  %498 = or i64 %485, 32
  %499 = add i64 %498, %458
  %500 = getelementptr i8, i8* %455, i64 %498
  %501 = bitcast i8* %500 to <16 x i8>*
  %502 = load <16 x i8>, <16 x i8>* %501, align 1, !alias.scope !34
  %503 = getelementptr i8, i8* %500, i64 16
  %504 = bitcast i8* %503 to <16 x i8>*
  %505 = load <16 x i8>, <16 x i8>* %504, align 1, !alias.scope !34
  %506 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %499
  %507 = bitcast i8* %506 to <16 x i8>*
  store <16 x i8> %502, <16 x i8>* %507, align 1, !alias.scope !37, !noalias !34
  %508 = getelementptr inbounds i8, i8* %506, i64 16
  %509 = bitcast i8* %508 to <16 x i8>*
  store <16 x i8> %505, <16 x i8>* %509, align 1, !alias.scope !37, !noalias !34
  %510 = or i64 %485, 64
  %511 = add i64 %510, %458
  %512 = getelementptr i8, i8* %455, i64 %510
  %513 = bitcast i8* %512 to <16 x i8>*
  %514 = load <16 x i8>, <16 x i8>* %513, align 1, !alias.scope !34
  %515 = getelementptr i8, i8* %512, i64 16
  %516 = bitcast i8* %515 to <16 x i8>*
  %517 = load <16 x i8>, <16 x i8>* %516, align 1, !alias.scope !34
  %518 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %511
  %519 = bitcast i8* %518 to <16 x i8>*
  store <16 x i8> %514, <16 x i8>* %519, align 1, !alias.scope !37, !noalias !34
  %520 = getelementptr inbounds i8, i8* %518, i64 16
  %521 = bitcast i8* %520 to <16 x i8>*
  store <16 x i8> %517, <16 x i8>* %521, align 1, !alias.scope !37, !noalias !34
  %522 = or i64 %485, 96
  %523 = add i64 %522, %458
  %524 = getelementptr i8, i8* %455, i64 %522
  %525 = bitcast i8* %524 to <16 x i8>*
  %526 = load <16 x i8>, <16 x i8>* %525, align 1, !alias.scope !34
  %527 = getelementptr i8, i8* %524, i64 16
  %528 = bitcast i8* %527 to <16 x i8>*
  %529 = load <16 x i8>, <16 x i8>* %528, align 1, !alias.scope !34
  %530 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %523
  %531 = bitcast i8* %530 to <16 x i8>*
  store <16 x i8> %526, <16 x i8>* %531, align 1, !alias.scope !37, !noalias !34
  %532 = getelementptr inbounds i8, i8* %530, i64 16
  %533 = bitcast i8* %532 to <16 x i8>*
  store <16 x i8> %529, <16 x i8>* %533, align 1, !alias.scope !37, !noalias !34
  %534 = add i64 %485, 128
  %535 = add i64 %486, -4
  %536 = icmp eq i64 %535, 0
  br i1 %536, label %537, label %484, !llvm.loop !39

537:                                              ; preds = %484, %473
  %538 = phi i64 [ 0, %473 ], [ %534, %484 ]
  %539 = icmp eq i64 %480, 0
  br i1 %539, label %557, label %540

540:                                              ; preds = %537, %540
  %541 = phi i64 [ %554, %540 ], [ %538, %537 ]
  %542 = phi i64 [ %555, %540 ], [ %480, %537 ]
  %543 = add i64 %541, %458
  %544 = getelementptr i8, i8* %455, i64 %541
  %545 = bitcast i8* %544 to <16 x i8>*
  %546 = load <16 x i8>, <16 x i8>* %545, align 1, !alias.scope !34
  %547 = getelementptr i8, i8* %544, i64 16
  %548 = bitcast i8* %547 to <16 x i8>*
  %549 = load <16 x i8>, <16 x i8>* %548, align 1, !alias.scope !34
  %550 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %543
  %551 = bitcast i8* %550 to <16 x i8>*
  store <16 x i8> %546, <16 x i8>* %551, align 1, !alias.scope !37, !noalias !34
  %552 = getelementptr inbounds i8, i8* %550, i64 16
  %553 = bitcast i8* %552 to <16 x i8>*
  store <16 x i8> %549, <16 x i8>* %553, align 1, !alias.scope !37, !noalias !34
  %554 = add i64 %541, 32
  %555 = add i64 %542, -1
  %556 = icmp eq i64 %555, 0
  br i1 %556, label %557, label %540, !llvm.loop !40

557:                                              ; preds = %540, %537
  %558 = icmp eq i64 %460, %474
  br i1 %558, label %602, label %559

559:                                              ; preds = %557, %462, %457
  %560 = phi i64 [ %458, %462 ], [ %458, %457 ], [ %475, %557 ]
  %561 = phi i8* [ %455, %462 ], [ %455, %457 ], [ %476, %557 ]
  %562 = sub nsw i64 %459, %560
  %563 = xor i64 %560, -1
  %564 = add nsw i64 %563, %459
  %565 = and i64 %562, 3
  %566 = icmp eq i64 %565, 0
  br i1 %566, label %577, label %567

567:                                              ; preds = %559, %567
  %568 = phi i64 [ %573, %567 ], [ %560, %559 ]
  %569 = phi i8* [ %571, %567 ], [ %561, %559 ]
  %570 = phi i64 [ %575, %567 ], [ %565, %559 ]
  %571 = getelementptr inbounds i8, i8* %569, i64 1
  %572 = load i8, i8* %569, align 1
  %573 = add nuw nsw i64 %568, 1
  %574 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %568
  store i8 %572, i8* %574, align 1
  %575 = add i64 %570, -1
  %576 = icmp eq i64 %575, 0
  br i1 %576, label %577, label %567, !llvm.loop !41

577:                                              ; preds = %567, %559
  %578 = phi i8* [ undef, %559 ], [ %571, %567 ]
  %579 = phi i64 [ %560, %559 ], [ %573, %567 ]
  %580 = phi i8* [ %561, %559 ], [ %571, %567 ]
  %581 = icmp ult i64 %564, 3
  br i1 %581, label %602, label %582

582:                                              ; preds = %577, %582
  %583 = phi i64 [ %599, %582 ], [ %579, %577 ]
  %584 = phi i8* [ %597, %582 ], [ %580, %577 ]
  %585 = getelementptr inbounds i8, i8* %584, i64 1
  %586 = load i8, i8* %584, align 1
  %587 = add nuw nsw i64 %583, 1
  %588 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %583
  store i8 %586, i8* %588, align 1
  %589 = getelementptr inbounds i8, i8* %584, i64 2
  %590 = load i8, i8* %585, align 1
  %591 = add nuw nsw i64 %583, 2
  %592 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %587
  store i8 %590, i8* %592, align 1
  %593 = getelementptr inbounds i8, i8* %584, i64 3
  %594 = load i8, i8* %589, align 1
  %595 = add nuw nsw i64 %583, 3
  %596 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %591
  store i8 %594, i8* %596, align 1
  %597 = getelementptr inbounds i8, i8* %584, i64 4
  %598 = load i8, i8* %593, align 1
  %599 = add nuw nsw i64 %583, 4
  %600 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %595
  store i8 %598, i8* %600, align 1
  %601 = icmp eq i64 %599, %459
  br i1 %601, label %602, label %582, !llvm.loop !42

602:                                              ; preds = %577, %582, %557, %451
  %603 = phi i8* [ %455, %451 ], [ %476, %557 ], [ %578, %577 ], [ %597, %582 ]
  store i8 %439, i8* %48, align 8
  store i8* %603, i8** %12, align 8
  %604 = load i64, i64* %19, align 8
  store i64 %604, i64* %17, align 8
  store i32 12, i32* %2, align 4
  br label %711

605:                                              ; preds = %443
  %606 = ashr i32 %447, 10
  %607 = sext i32 %606 to i64
  %608 = getelementptr inbounds i16, i16* %28, i64 %607
  %609 = load i16, i16* %608, align 2
  %610 = zext i16 %609 to i32
  %611 = lshr i32 %447, 4
  %612 = and i32 %611, 63
  %613 = add nuw nsw i32 %612, %610
  %614 = zext i32 %613 to i64
  %615 = getelementptr inbounds i16, i16* %28, i64 %614
  %616 = load i16, i16* %615, align 2
  %617 = zext i16 %616 to i32
  %618 = and i32 %447, 15
  %619 = add nuw nsw i32 %618, %617
  %620 = zext i32 %619 to i64
  %621 = getelementptr inbounds i16, i16* %38, i64 %620
  %622 = load i16, i16* %621, align 2
  br label %623

623:                                              ; preds = %443, %196, %605, %131
  %624 = phi i8* [ %115, %131 ], [ %199, %196 ], [ %438, %605 ], [ %438, %443 ]
  %625 = phi i32 [ %111, %131 ], [ %111, %196 ], [ %220, %605 ], [ %220, %443 ]
  %626 = phi i32 [ %132, %131 ], [ %202, %196 ], [ %447, %605 ], [ %447, %443 ]
  %627 = phi i16 [ %138, %131 ], [ %200, %196 ], [ %622, %605 ], [ 0, %443 ]
  %628 = zext i16 %627 to i32
  %629 = icmp ugt i32 %44, %628
  br i1 %629, label %635, label %630

630:                                              ; preds = %623
  %631 = trunc i16 %627 to i8
  %632 = load i8*, i8** %4, align 8
  %633 = getelementptr inbounds i8, i8* %632, i64 1
  store i8* %633, i8** %4, align 8
  store i8 %631, i8* %632, align 1
  %634 = add nsw i32 %625, -1
  br label %104

635:                                              ; preds = %623
  %636 = bitcast i16** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %636) #11
  store i16* @_ZZL17ucnv_SBCSFromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCodeE3nul, i16** %5, align 8
  %637 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %25, align 8
  %638 = load i8*, i8** %4, align 8
  %639 = sext i32 %625 to i64
  %640 = getelementptr inbounds i8, i8* %638, i64 %639
  %641 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 1
  %642 = load i8, i8* %641, align 2
  %643 = call fastcc i32 @_ZL9_extFromUP10UConverterPK20UConverterSharedDataiPPKDsS5_PPhPKhPPiiaP10UErrorCode(%struct.UConverter* %11, %struct.UConverterSharedData* %637, i32 %626, i16** nonnull %5, i16* nonnull @_ZZL17ucnv_SBCSFromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCodeE3nul, i8** nonnull %4, i8* %640, i32** null, i32 -1, i8 signext %642, i32* %2)
  %644 = load i32, i32* %2, align 4
  %645 = icmp slt i32 %644, 1
  br i1 %645, label %648, label %646

646:                                              ; preds = %635
  %647 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %11, i64 0, i32 17
  store i32 %643, i32* %647, align 4
  br label %653

648:                                              ; preds = %635
  %649 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %11, i64 0, i32 31
  %650 = load i32, i32* %649, align 8
  %651 = icmp sgt i32 %650, -1
  br i1 %651, label %652, label %654

652:                                              ; preds = %648
  store i32 -127, i32* %2, align 4
  br label %653

653:                                              ; preds = %646, %652
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %636) #11
  br label %660

654:                                              ; preds = %648
  %655 = load i64, i64* %21, align 8
  %656 = load i64, i64* %19, align 8
  %657 = sub i64 %655, %656
  %658 = trunc i64 %657 to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %636) #11
  br label %104

659:                                              ; preds = %110
  store i32 15, i32* %2, align 4
  br label %708

660:                                              ; preds = %127, %104, %653
  %661 = phi i8* [ %105, %104 ], [ %624, %653 ], [ %128, %127 ]
  %662 = load i32, i32* %2, align 4
  %663 = icmp sgt i32 %662, 0
  br i1 %663, label %708, label %664

664:                                              ; preds = %660
  %665 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %11, i64 0, i32 31
  %666 = load i32, i32* %665, align 8
  %667 = icmp slt i32 %666, 0
  br i1 %667, label %668, label %708

668:                                              ; preds = %664
  %669 = load i8*, i8** %14, align 8
  %670 = icmp ult i8* %661, %669
  br i1 %670, label %671, label %708

671:                                              ; preds = %668
  %672 = load i8, i8* %661, align 1
  %673 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 0
  store i8 %672, i8* %673, align 1
  %674 = zext i8 %672 to i32
  %675 = icmp sgt i8 %672, -1
  br i1 %675, label %685, label %676

676:                                              ; preds = %671
  %677 = add nsw i8 %672, 62
  %678 = icmp ult i8 %677, 51
  br i1 %678, label %679, label %685

679:                                              ; preds = %676
  %680 = icmp ugt i8 %672, -33
  %681 = zext i1 %680 to i32
  %682 = icmp ugt i8 %672, -17
  %683 = select i1 %682, i32 3, i32 2
  %684 = add nuw nsw i32 %683, %681
  br label %685

685:                                              ; preds = %679, %676, %671
  %686 = phi i32 [ 1, %671 ], [ %684, %679 ], [ 0, %676 ]
  %687 = getelementptr inbounds i8, i8* %661, i64 1
  %688 = icmp ult i8* %687, %669
  br i1 %688, label %689, label %702

689:                                              ; preds = %685, %689
  %690 = phi i8* [ %700, %689 ], [ %687, %685 ]
  %691 = phi i32 [ %699, %689 ], [ %674, %685 ]
  %692 = phi i8 [ %694, %689 ], [ 1, %685 ]
  %693 = load i8, i8* %690, align 1
  %694 = add i8 %692, 1
  %695 = sext i8 %692 to i64
  %696 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %695
  store i8 %693, i8* %696, align 1
  %697 = shl i32 %691, 6
  %698 = zext i8 %693 to i32
  %699 = add nsw i32 %697, %698
  %700 = getelementptr inbounds i8, i8* %690, i64 1
  %701 = icmp eq i8* %700, %669
  br i1 %701, label %702, label %689

702:                                              ; preds = %689, %685
  %703 = phi i8 [ 1, %685 ], [ %694, %689 ]
  %704 = phi i32 [ %674, %685 ], [ %699, %689 ]
  %705 = phi i8* [ %687, %685 ], [ %669, %689 ]
  %706 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 14
  store i32 %704, i32* %706, align 8
  store i8 %703, i8* %48, align 8
  %707 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 15
  store i32 %686, i32* %707, align 4
  br label %708

708:                                              ; preds = %659, %660, %702, %668, %664
  %709 = phi i8* [ %705, %702 ], [ %661, %668 ], [ %661, %664 ], [ %661, %660 ], [ %112, %659 ]
  store i8* %709, i8** %12, align 8
  %710 = load i64, i64* %19, align 8
  store i64 %710, i64* %17, align 8
  br label %711

711:                                              ; preds = %708, %602, %430
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL17ucnv_DBCSFromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCode(%struct.UConverterFromUnicodeArgs* nocapture, %struct.UConverterToUnicodeArgs* nocapture, i32*) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i16*, align 8
  %6 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #11
  %7 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 2
  %8 = load %struct.UConverter*, %struct.UConverter** %7, align 8
  %9 = bitcast %struct.UConverter* %8 to i8*
  %10 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 2
  %11 = load %struct.UConverter*, %struct.UConverter** %10, align 8
  %12 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 3
  %13 = load i8*, i8** %12, align 8
  %14 = getelementptr inbounds %struct.UConverterToUnicodeArgs, %struct.UConverterToUnicodeArgs* %1, i64 0, i32 4
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 5
  %17 = bitcast i8** %16 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = bitcast i8** %4 to i64*
  store i64 %18, i64* %19, align 8
  %20 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 6
  %21 = bitcast i8** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %22, %18
  %24 = trunc i64 %23 to i32
  %25 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %11, i64 0, i32 6
  %26 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %25, align 8
  %27 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %26, i64 0, i32 8, i32 8
  %28 = load i16*, i16** %27, align 8
  %29 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %26, i64 0, i32 8, i32 9
  %30 = load i16*, i16** %29, align 8
  %31 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %11, i64 0, i32 7
  %32 = load i32, i32* %31, align 8
  %33 = and i32 %32, 16
  %34 = icmp eq i32 %33, 0
  %35 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %26, i64 0, i32 8, i32 12
  %36 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %26, i64 0, i32 8, i32 11
  %37 = select i1 %34, i8** %36, i8** %35
  %38 = bitcast i8** %37 to i16**
  %39 = load i16*, i16** %38, align 8
  %40 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %26, i64 0, i32 8, i32 18
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds %struct.UConverterSharedData, %struct.UConverterSharedData* %26, i64 0, i32 8, i32 15
  %43 = load i8, i8* %42, align 1
  %44 = and i8 %43, 1
  %45 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 12
  %46 = load i8, i8* %45, align 8
  %47 = icmp sgt i8 %46, 0
  br i1 %47, label %48, label %54

48:                                               ; preds = %3
  %49 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 15
  %50 = load i32, i32* %49, align 4
  %51 = trunc i32 %50 to i8
  %52 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 14
  %53 = load i32, i32* %52, align 8
  br label %54

54:                                               ; preds = %3, %48
  %55 = phi i8 [ %46, %48 ], [ 0, %3 ]
  %56 = phi i8 [ %51, %48 ], [ 0, %3 ]
  %57 = phi i32 [ %53, %48 ], [ 0, %3 ]
  %58 = ptrtoint i8* %15 to i64
  %59 = ptrtoint i8* %13 to i64
  %60 = sub i64 %58, %59
  %61 = trunc i64 %60 to i32
  %62 = sext i8 %56 to i32
  %63 = sext i8 %55 to i32
  %64 = sub nsw i32 %63, %62
  %65 = add i32 %64, %61
  %66 = icmp sgt i32 %65, 0
  br i1 %66, label %67, label %96

67:                                               ; preds = %54
  %68 = getelementptr inbounds i8, i8* %15, i64 -1
  %69 = load i8, i8* %68, align 1
  %70 = icmp sgt i8 %69, -1
  br i1 %70, label %96, label %71

71:                                               ; preds = %67
  %72 = icmp slt i8 %69, -64
  %73 = icmp sgt i32 %65, 1
  %74 = and i1 %73, %72
  br i1 %74, label %75, label %92

75:                                               ; preds = %71
  %76 = getelementptr inbounds i8, i8* %15, i64 -2
  %77 = load i8, i8* %76, align 1
  %78 = and i8 %77, -16
  %79 = icmp eq i8 %78, -32
  br i1 %79, label %80, label %96

80:                                               ; preds = %75
  %81 = and i8 %77, 15
  %82 = zext i8 %81 to i64
  %83 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %82
  %84 = load i8, i8* %83, align 1
  %85 = sext i8 %84 to i32
  %86 = lshr i8 %69, 5
  %87 = zext i8 %86 to i32
  %88 = shl i32 1, %87
  %89 = and i32 %88, %85
  %90 = icmp eq i32 %89, 0
  %91 = select i1 %90, i8* %15, i8* %76
  br label %96

92:                                               ; preds = %71
  %93 = add nsw i8 %69, 62
  %94 = icmp ult i8 %93, 46
  %95 = select i1 %94, i8* %68, i8* %15
  br label %96

96:                                               ; preds = %92, %80, %67, %75, %54
  %97 = phi i8* [ %15, %54 ], [ %15, %67 ], [ %15, %75 ], [ %91, %80 ], [ %95, %92 ]
  %98 = icmp ne i32 %57, 0
  %99 = icmp sgt i32 %24, 0
  %100 = and i1 %99, %98
  br i1 %100, label %101, label %679

101:                                              ; preds = %96
  %102 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 14
  store i32 0, i32* %102, align 8
  store i8 0, i8* %45, align 8
  br label %201

103:                                              ; preds = %679, %117
  %104 = phi i32 [ %120, %117 ], [ %681, %679 ]
  %105 = phi i8* [ %108, %117 ], [ %680, %679 ]
  %106 = icmp sgt i32 %104, 0
  br i1 %106, label %107, label %683

107:                                              ; preds = %103
  %108 = getelementptr inbounds i8, i8* %105, i64 1
  %109 = load i8, i8* %105, align 1
  %110 = icmp sgt i8 %109, -1
  br i1 %110, label %111, label %131

111:                                              ; preds = %107
  %112 = lshr i8 %109, 2
  %113 = zext i8 %112 to i32
  %114 = shl i32 1, %113
  %115 = and i32 %114, %41
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %122, label %117

117:                                              ; preds = %111
  %118 = load i8*, i8** %4, align 8
  %119 = getelementptr inbounds i8, i8* %118, i64 1
  store i8* %119, i8** %4, align 8
  store i8 %109, i8* %118, align 1
  %120 = add nsw i32 %104, -1
  %121 = icmp eq i8* %108, %97
  br i1 %121, label %684, label %103

122:                                              ; preds = %111
  %123 = zext i8 %109 to i32
  %124 = load i16, i16* %30, align 2
  %125 = zext i16 %124 to i32
  %126 = add nuw nsw i32 %125, %123
  %127 = zext i32 %126 to i64
  %128 = getelementptr inbounds i16, i16* %39, i64 %127
  %129 = load i16, i16* %128, align 2
  %130 = icmp eq i16 %129, 0
  br i1 %130, label %652, label %627

131:                                              ; preds = %107
  %132 = zext i8 %109 to i32
  %133 = icmp ugt i8 %109, -33
  br i1 %133, label %134, label %171

134:                                              ; preds = %131
  %135 = icmp ult i8 %109, -18
  br i1 %135, label %136, label %193

136:                                              ; preds = %134
  %137 = and i32 %132, 15
  %138 = zext i32 %137 to i64
  %139 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %138
  %140 = load i8, i8* %139, align 1
  %141 = sext i8 %140 to i32
  %142 = load i8, i8* %108, align 1
  %143 = zext i8 %142 to i32
  %144 = lshr i32 %143, 5
  %145 = shl i32 1, %144
  %146 = and i32 %145, %141
  %147 = icmp eq i32 %146, 0
  br i1 %147, label %196, label %148

148:                                              ; preds = %136
  %149 = getelementptr inbounds i8, i8* %105, i64 2
  %150 = load i8, i8* %149, align 1
  %151 = xor i8 %150, -128
  %152 = zext i8 %151 to i32
  %153 = icmp ult i8 %151, 64
  br i1 %153, label %154, label %196

154:                                              ; preds = %148
  %155 = shl nuw nsw i32 %137, 6
  %156 = and i32 %143, 63
  %157 = or i32 %156, %155
  %158 = getelementptr inbounds i8, i8* %105, i64 3
  %159 = zext i32 %157 to i64
  %160 = getelementptr inbounds i16, i16* %30, i64 %159
  %161 = load i16, i16* %160, align 2
  %162 = zext i16 %161 to i32
  %163 = add nuw nsw i32 %162, %152
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds i16, i16* %39, i64 %164
  %166 = load i16, i16* %165, align 2
  %167 = icmp eq i16 %166, 0
  br i1 %167, label %168, label %627

168:                                              ; preds = %154
  %169 = shl nuw nsw i32 %157, 6
  %170 = or i32 %169, %152
  br label %652

171:                                              ; preds = %131
  %172 = icmp ugt i8 %109, -63
  br i1 %172, label %173, label %201

173:                                              ; preds = %171
  %174 = load i8, i8* %108, align 1
  %175 = xor i8 %174, -128
  %176 = zext i8 %175 to i32
  %177 = icmp ult i8 %175, 64
  br i1 %177, label %178, label %196

178:                                              ; preds = %173
  %179 = and i32 %132, 31
  %180 = getelementptr inbounds i8, i8* %105, i64 2
  %181 = zext i32 %179 to i64
  %182 = getelementptr inbounds i16, i16* %30, i64 %181
  %183 = load i16, i16* %182, align 2
  %184 = zext i16 %183 to i32
  %185 = add nuw nsw i32 %184, %176
  %186 = zext i32 %185 to i64
  %187 = getelementptr inbounds i16, i16* %39, i64 %186
  %188 = load i16, i16* %187, align 2
  %189 = icmp eq i16 %188, 0
  br i1 %189, label %190, label %627

190:                                              ; preds = %178
  %191 = shl nuw nsw i32 %179, 6
  %192 = or i32 %191, %176
  br label %652

193:                                              ; preds = %134
  %194 = add nsw i8 %109, 62
  %195 = icmp ult i8 %194, 51
  br i1 %195, label %196, label %201

196:                                              ; preds = %173, %148, %136, %193
  %197 = zext i1 %133 to i8
  %198 = icmp ugt i8 %109, -17
  %199 = select i1 %198, i8 3, i8 2
  %200 = add nuw nsw i8 %199, %197
  br label %201

201:                                              ; preds = %196, %193, %171, %101
  %202 = phi i8* [ %13, %101 ], [ %108, %171 ], [ %108, %193 ], [ %108, %196 ]
  %203 = phi i32 [ %24, %101 ], [ %104, %171 ], [ %104, %193 ], [ %104, %196 ]
  %204 = phi i8 [ %55, %101 ], [ 0, %171 ], [ 0, %193 ], [ 0, %196 ]
  %205 = phi i8 [ %55, %101 ], [ 1, %171 ], [ 1, %193 ], [ 1, %196 ]
  %206 = phi i8 [ %56, %101 ], [ 0, %171 ], [ 0, %193 ], [ %200, %196 ]
  %207 = phi i32 [ %57, %101 ], [ %132, %171 ], [ %132, %193 ], [ %132, %196 ]
  %208 = sext i8 %205 to i32
  %209 = sext i8 %206 to i32
  %210 = icmp slt i8 %205, %206
  br i1 %210, label %211, label %420

211:                                              ; preds = %201
  %212 = load i8*, i8** %14, align 8
  %213 = icmp slt i8 %206, 3
  %214 = icmp eq i8 %206, 3
  %215 = zext i8 %206 to i32
  br label %216

216:                                              ; preds = %252, %211
  %217 = phi i32 [ %208, %211 ], [ %254, %252 ]
  %218 = phi i32 [ %207, %211 ], [ %258, %252 ]
  %219 = phi i8 [ %205, %211 ], [ %255, %252 ]
  %220 = phi i8* [ %202, %211 ], [ %253, %252 ]
  %221 = icmp ult i8* %220, %212
  br i1 %221, label %222, label %260

222:                                              ; preds = %216
  %223 = load i8, i8* %220, align 1
  %224 = icmp ugt i32 %217, 1
  %225 = or i1 %213, %224
  br i1 %225, label %226, label %229

226:                                              ; preds = %222
  %227 = icmp slt i8 %223, -64
  %228 = zext i1 %227 to i8
  br label %249

229:                                              ; preds = %222
  br i1 %214, label %230, label %240

230:                                              ; preds = %229
  %231 = and i32 %218, 15
  %232 = zext i32 %231 to i64
  %233 = getelementptr inbounds [17 x i8], [17 x i8]* @.str, i64 0, i64 %232
  %234 = load i8, i8* %233, align 1
  %235 = lshr i8 %223, 5
  %236 = zext i8 %235 to i32
  %237 = shl i32 1, %236
  %238 = trunc i32 %237 to i8
  %239 = and i8 %234, %238
  br label %249

240:                                              ; preds = %229
  %241 = lshr i8 %223, 4
  %242 = zext i8 %241 to i64
  %243 = getelementptr inbounds [17 x i8], [17 x i8]* @.str.1, i64 0, i64 %242
  %244 = load i8, i8* %243, align 1
  %245 = and i32 %218, 7
  %246 = shl i32 1, %245
  %247 = trunc i32 %246 to i8
  %248 = and i8 %244, %247
  br label %249

249:                                              ; preds = %226, %230, %240
  %250 = phi i8 [ %228, %226 ], [ %239, %230 ], [ %248, %240 ]
  %251 = icmp eq i8 %250, 0
  br i1 %251, label %418, label %252

252:                                              ; preds = %249
  %253 = getelementptr inbounds i8, i8* %220, i64 1
  %254 = add nuw nsw i32 %217, 1
  %255 = add nuw nsw i8 %219, 1
  %256 = shl i32 %218, 6
  %257 = zext i8 %223 to i32
  %258 = add nsw i32 %256, %257
  %259 = icmp eq i32 %254, %215
  br i1 %259, label %420, label %216

260:                                              ; preds = %216
  %261 = trunc i32 %217 to i8
  %262 = sext i8 %204 to i32
  %263 = sub nsw i32 %262, %217
  %264 = sext i32 %263 to i64
  %265 = getelementptr inbounds i8, i8* %220, i64 %264
  %266 = icmp slt i8 %204, %261
  br i1 %266, label %267, label %413

267:                                              ; preds = %260
  %268 = zext i8 %204 to i64
  %269 = and i32 %217, 255
  %270 = zext i32 %269 to i64
  %271 = sub nsw i64 %270, %268
  %272 = icmp ult i64 %271, 32
  br i1 %272, label %370, label %273

273:                                              ; preds = %267
  %274 = add nuw nsw i64 %268, 65
  %275 = getelementptr i8, i8* %9, i64 %274
  %276 = add nuw nsw i64 %270, 65
  %277 = getelementptr i8, i8* %9, i64 %276
  %278 = zext i32 %217 to i64
  %279 = sub nsw i64 %270, %278
  %280 = getelementptr i8, i8* %220, i64 %279
  %281 = icmp ult i8* %275, %280
  %282 = icmp ult i8* %265, %277
  %283 = and i1 %281, %282
  br i1 %283, label %370, label %284

284:                                              ; preds = %273
  %285 = and i64 %271, -32
  %286 = add nsw i64 %285, %268
  %287 = getelementptr i8, i8* %265, i64 %285
  %288 = add nsw i64 %285, -32
  %289 = lshr exact i64 %288, 5
  %290 = add nuw nsw i64 %289, 1
  %291 = and i64 %290, 3
  %292 = icmp ult i64 %288, 96
  br i1 %292, label %348, label %293

293:                                              ; preds = %284
  %294 = sub nsw i64 %290, %291
  br label %295

295:                                              ; preds = %295, %293
  %296 = phi i64 [ 0, %293 ], [ %345, %295 ]
  %297 = phi i64 [ %294, %293 ], [ %346, %295 ]
  %298 = add i64 %296, %268
  %299 = getelementptr i8, i8* %265, i64 %296
  %300 = bitcast i8* %299 to <16 x i8>*
  %301 = load <16 x i8>, <16 x i8>* %300, align 1, !alias.scope !43
  %302 = getelementptr i8, i8* %299, i64 16
  %303 = bitcast i8* %302 to <16 x i8>*
  %304 = load <16 x i8>, <16 x i8>* %303, align 1, !alias.scope !43
  %305 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %298
  %306 = bitcast i8* %305 to <16 x i8>*
  store <16 x i8> %301, <16 x i8>* %306, align 1, !alias.scope !46, !noalias !43
  %307 = getelementptr inbounds i8, i8* %305, i64 16
  %308 = bitcast i8* %307 to <16 x i8>*
  store <16 x i8> %304, <16 x i8>* %308, align 1, !alias.scope !46, !noalias !43
  %309 = or i64 %296, 32
  %310 = add i64 %309, %268
  %311 = getelementptr i8, i8* %265, i64 %309
  %312 = bitcast i8* %311 to <16 x i8>*
  %313 = load <16 x i8>, <16 x i8>* %312, align 1, !alias.scope !43
  %314 = getelementptr i8, i8* %311, i64 16
  %315 = bitcast i8* %314 to <16 x i8>*
  %316 = load <16 x i8>, <16 x i8>* %315, align 1, !alias.scope !43
  %317 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %310
  %318 = bitcast i8* %317 to <16 x i8>*
  store <16 x i8> %313, <16 x i8>* %318, align 1, !alias.scope !46, !noalias !43
  %319 = getelementptr inbounds i8, i8* %317, i64 16
  %320 = bitcast i8* %319 to <16 x i8>*
  store <16 x i8> %316, <16 x i8>* %320, align 1, !alias.scope !46, !noalias !43
  %321 = or i64 %296, 64
  %322 = add i64 %321, %268
  %323 = getelementptr i8, i8* %265, i64 %321
  %324 = bitcast i8* %323 to <16 x i8>*
  %325 = load <16 x i8>, <16 x i8>* %324, align 1, !alias.scope !43
  %326 = getelementptr i8, i8* %323, i64 16
  %327 = bitcast i8* %326 to <16 x i8>*
  %328 = load <16 x i8>, <16 x i8>* %327, align 1, !alias.scope !43
  %329 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %322
  %330 = bitcast i8* %329 to <16 x i8>*
  store <16 x i8> %325, <16 x i8>* %330, align 1, !alias.scope !46, !noalias !43
  %331 = getelementptr inbounds i8, i8* %329, i64 16
  %332 = bitcast i8* %331 to <16 x i8>*
  store <16 x i8> %328, <16 x i8>* %332, align 1, !alias.scope !46, !noalias !43
  %333 = or i64 %296, 96
  %334 = add i64 %333, %268
  %335 = getelementptr i8, i8* %265, i64 %333
  %336 = bitcast i8* %335 to <16 x i8>*
  %337 = load <16 x i8>, <16 x i8>* %336, align 1, !alias.scope !43
  %338 = getelementptr i8, i8* %335, i64 16
  %339 = bitcast i8* %338 to <16 x i8>*
  %340 = load <16 x i8>, <16 x i8>* %339, align 1, !alias.scope !43
  %341 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %334
  %342 = bitcast i8* %341 to <16 x i8>*
  store <16 x i8> %337, <16 x i8>* %342, align 1, !alias.scope !46, !noalias !43
  %343 = getelementptr inbounds i8, i8* %341, i64 16
  %344 = bitcast i8* %343 to <16 x i8>*
  store <16 x i8> %340, <16 x i8>* %344, align 1, !alias.scope !46, !noalias !43
  %345 = add i64 %296, 128
  %346 = add i64 %297, -4
  %347 = icmp eq i64 %346, 0
  br i1 %347, label %348, label %295, !llvm.loop !48

348:                                              ; preds = %295, %284
  %349 = phi i64 [ 0, %284 ], [ %345, %295 ]
  %350 = icmp eq i64 %291, 0
  br i1 %350, label %368, label %351

351:                                              ; preds = %348, %351
  %352 = phi i64 [ %365, %351 ], [ %349, %348 ]
  %353 = phi i64 [ %366, %351 ], [ %291, %348 ]
  %354 = add i64 %352, %268
  %355 = getelementptr i8, i8* %265, i64 %352
  %356 = bitcast i8* %355 to <16 x i8>*
  %357 = load <16 x i8>, <16 x i8>* %356, align 1, !alias.scope !43
  %358 = getelementptr i8, i8* %355, i64 16
  %359 = bitcast i8* %358 to <16 x i8>*
  %360 = load <16 x i8>, <16 x i8>* %359, align 1, !alias.scope !43
  %361 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %354
  %362 = bitcast i8* %361 to <16 x i8>*
  store <16 x i8> %357, <16 x i8>* %362, align 1, !alias.scope !46, !noalias !43
  %363 = getelementptr inbounds i8, i8* %361, i64 16
  %364 = bitcast i8* %363 to <16 x i8>*
  store <16 x i8> %360, <16 x i8>* %364, align 1, !alias.scope !46, !noalias !43
  %365 = add i64 %352, 32
  %366 = add i64 %353, -1
  %367 = icmp eq i64 %366, 0
  br i1 %367, label %368, label %351, !llvm.loop !49

368:                                              ; preds = %351, %348
  %369 = icmp eq i64 %271, %285
  br i1 %369, label %413, label %370

370:                                              ; preds = %368, %273, %267
  %371 = phi i64 [ %268, %273 ], [ %268, %267 ], [ %286, %368 ]
  %372 = phi i8* [ %265, %273 ], [ %265, %267 ], [ %287, %368 ]
  %373 = sub nsw i64 %270, %371
  %374 = xor i64 %371, -1
  %375 = add nsw i64 %374, %270
  %376 = and i64 %373, 3
  %377 = icmp eq i64 %376, 0
  br i1 %377, label %388, label %378

378:                                              ; preds = %370, %378
  %379 = phi i64 [ %384, %378 ], [ %371, %370 ]
  %380 = phi i8* [ %382, %378 ], [ %372, %370 ]
  %381 = phi i64 [ %386, %378 ], [ %376, %370 ]
  %382 = getelementptr inbounds i8, i8* %380, i64 1
  %383 = load i8, i8* %380, align 1
  %384 = add nuw nsw i64 %379, 1
  %385 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %379
  store i8 %383, i8* %385, align 1
  %386 = add i64 %381, -1
  %387 = icmp eq i64 %386, 0
  br i1 %387, label %388, label %378, !llvm.loop !50

388:                                              ; preds = %378, %370
  %389 = phi i8* [ undef, %370 ], [ %382, %378 ]
  %390 = phi i64 [ %371, %370 ], [ %384, %378 ]
  %391 = phi i8* [ %372, %370 ], [ %382, %378 ]
  %392 = icmp ult i64 %375, 3
  br i1 %392, label %413, label %393

393:                                              ; preds = %388, %393
  %394 = phi i64 [ %410, %393 ], [ %390, %388 ]
  %395 = phi i8* [ %408, %393 ], [ %391, %388 ]
  %396 = getelementptr inbounds i8, i8* %395, i64 1
  %397 = load i8, i8* %395, align 1
  %398 = add nuw nsw i64 %394, 1
  %399 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %394
  store i8 %397, i8* %399, align 1
  %400 = getelementptr inbounds i8, i8* %395, i64 2
  %401 = load i8, i8* %396, align 1
  %402 = add nuw nsw i64 %394, 2
  %403 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %398
  store i8 %401, i8* %403, align 1
  %404 = getelementptr inbounds i8, i8* %395, i64 3
  %405 = load i8, i8* %400, align 1
  %406 = add nuw nsw i64 %394, 3
  %407 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %402
  store i8 %405, i8* %407, align 1
  %408 = getelementptr inbounds i8, i8* %395, i64 4
  %409 = load i8, i8* %404, align 1
  %410 = add nuw nsw i64 %394, 4
  %411 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %406
  store i8 %409, i8* %411, align 1
  %412 = icmp eq i64 %410, %270
  br i1 %412, label %413, label %393, !llvm.loop !51

413:                                              ; preds = %388, %393, %368, %260
  %414 = phi i8* [ %265, %260 ], [ %287, %368 ], [ %389, %388 ], [ %408, %393 ]
  %415 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 14
  store i32 %218, i32* %415, align 8
  store i8 %261, i8* %45, align 8
  %416 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 15
  store i32 %209, i32* %416, align 4
  store i8* %414, i8** %12, align 8
  %417 = load i64, i64* %19, align 8
  store i64 %417, i64* %17, align 8
  br label %735

418:                                              ; preds = %249
  %419 = trunc i32 %217 to i8
  br label %420

420:                                              ; preds = %252, %418, %201
  %421 = phi i8* [ %202, %201 ], [ %220, %418 ], [ %253, %252 ]
  %422 = phi i8 [ %205, %201 ], [ %419, %418 ], [ %255, %252 ]
  %423 = phi i32 [ %207, %201 ], [ %218, %418 ], [ %258, %252 ]
  %424 = phi i32 [ %208, %201 ], [ %217, %418 ], [ %215, %252 ]
  %425 = icmp eq i8 %422, %206
  br i1 %425, label %426, label %434

426:                                              ; preds = %420
  %427 = sext i8 %206 to i64
  %428 = getelementptr inbounds [5 x i32], [5 x i32]* @_ZL12utf8_offsets, i64 0, i64 %427
  %429 = load i32, i32* %428, align 4
  %430 = sub nsw i32 %423, %429
  %431 = icmp sgt i8 %206, 3
  %432 = icmp eq i8 %44, 0
  %433 = and i1 %431, %432
  br i1 %433, label %601, label %588

434:                                              ; preds = %420
  %435 = sext i8 %204 to i32
  %436 = sub nsw i32 %435, %424
  %437 = sext i32 %436 to i64
  %438 = getelementptr inbounds i8, i8* %421, i64 %437
  %439 = icmp slt i8 %204, %422
  br i1 %439, label %440, label %585

440:                                              ; preds = %434
  %441 = zext i8 %204 to i64
  %442 = zext i8 %422 to i64
  %443 = sub nsw i64 %442, %441
  %444 = icmp ult i64 %443, 32
  br i1 %444, label %542, label %445

445:                                              ; preds = %440
  %446 = add nuw nsw i64 %441, 65
  %447 = getelementptr i8, i8* %9, i64 %446
  %448 = add nuw nsw i64 %442, 65
  %449 = getelementptr i8, i8* %9, i64 %448
  %450 = zext i32 %424 to i64
  %451 = sub nsw i64 %442, %450
  %452 = getelementptr i8, i8* %421, i64 %451
  %453 = icmp ult i8* %447, %452
  %454 = icmp ult i8* %438, %449
  %455 = and i1 %453, %454
  br i1 %455, label %542, label %456

456:                                              ; preds = %445
  %457 = and i64 %443, -32
  %458 = add nsw i64 %457, %441
  %459 = getelementptr i8, i8* %438, i64 %457
  %460 = add nsw i64 %457, -32
  %461 = lshr exact i64 %460, 5
  %462 = add nuw nsw i64 %461, 1
  %463 = and i64 %462, 3
  %464 = icmp ult i64 %460, 96
  br i1 %464, label %520, label %465

465:                                              ; preds = %456
  %466 = sub nsw i64 %462, %463
  br label %467

467:                                              ; preds = %467, %465
  %468 = phi i64 [ 0, %465 ], [ %517, %467 ]
  %469 = phi i64 [ %466, %465 ], [ %518, %467 ]
  %470 = add i64 %468, %441
  %471 = getelementptr i8, i8* %438, i64 %468
  %472 = bitcast i8* %471 to <16 x i8>*
  %473 = load <16 x i8>, <16 x i8>* %472, align 1, !alias.scope !52
  %474 = getelementptr i8, i8* %471, i64 16
  %475 = bitcast i8* %474 to <16 x i8>*
  %476 = load <16 x i8>, <16 x i8>* %475, align 1, !alias.scope !52
  %477 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %470
  %478 = bitcast i8* %477 to <16 x i8>*
  store <16 x i8> %473, <16 x i8>* %478, align 1, !alias.scope !55, !noalias !52
  %479 = getelementptr inbounds i8, i8* %477, i64 16
  %480 = bitcast i8* %479 to <16 x i8>*
  store <16 x i8> %476, <16 x i8>* %480, align 1, !alias.scope !55, !noalias !52
  %481 = or i64 %468, 32
  %482 = add i64 %481, %441
  %483 = getelementptr i8, i8* %438, i64 %481
  %484 = bitcast i8* %483 to <16 x i8>*
  %485 = load <16 x i8>, <16 x i8>* %484, align 1, !alias.scope !52
  %486 = getelementptr i8, i8* %483, i64 16
  %487 = bitcast i8* %486 to <16 x i8>*
  %488 = load <16 x i8>, <16 x i8>* %487, align 1, !alias.scope !52
  %489 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %482
  %490 = bitcast i8* %489 to <16 x i8>*
  store <16 x i8> %485, <16 x i8>* %490, align 1, !alias.scope !55, !noalias !52
  %491 = getelementptr inbounds i8, i8* %489, i64 16
  %492 = bitcast i8* %491 to <16 x i8>*
  store <16 x i8> %488, <16 x i8>* %492, align 1, !alias.scope !55, !noalias !52
  %493 = or i64 %468, 64
  %494 = add i64 %493, %441
  %495 = getelementptr i8, i8* %438, i64 %493
  %496 = bitcast i8* %495 to <16 x i8>*
  %497 = load <16 x i8>, <16 x i8>* %496, align 1, !alias.scope !52
  %498 = getelementptr i8, i8* %495, i64 16
  %499 = bitcast i8* %498 to <16 x i8>*
  %500 = load <16 x i8>, <16 x i8>* %499, align 1, !alias.scope !52
  %501 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %494
  %502 = bitcast i8* %501 to <16 x i8>*
  store <16 x i8> %497, <16 x i8>* %502, align 1, !alias.scope !55, !noalias !52
  %503 = getelementptr inbounds i8, i8* %501, i64 16
  %504 = bitcast i8* %503 to <16 x i8>*
  store <16 x i8> %500, <16 x i8>* %504, align 1, !alias.scope !55, !noalias !52
  %505 = or i64 %468, 96
  %506 = add i64 %505, %441
  %507 = getelementptr i8, i8* %438, i64 %505
  %508 = bitcast i8* %507 to <16 x i8>*
  %509 = load <16 x i8>, <16 x i8>* %508, align 1, !alias.scope !52
  %510 = getelementptr i8, i8* %507, i64 16
  %511 = bitcast i8* %510 to <16 x i8>*
  %512 = load <16 x i8>, <16 x i8>* %511, align 1, !alias.scope !52
  %513 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %506
  %514 = bitcast i8* %513 to <16 x i8>*
  store <16 x i8> %509, <16 x i8>* %514, align 1, !alias.scope !55, !noalias !52
  %515 = getelementptr inbounds i8, i8* %513, i64 16
  %516 = bitcast i8* %515 to <16 x i8>*
  store <16 x i8> %512, <16 x i8>* %516, align 1, !alias.scope !55, !noalias !52
  %517 = add i64 %468, 128
  %518 = add i64 %469, -4
  %519 = icmp eq i64 %518, 0
  br i1 %519, label %520, label %467, !llvm.loop !57

520:                                              ; preds = %467, %456
  %521 = phi i64 [ 0, %456 ], [ %517, %467 ]
  %522 = icmp eq i64 %463, 0
  br i1 %522, label %540, label %523

523:                                              ; preds = %520, %523
  %524 = phi i64 [ %537, %523 ], [ %521, %520 ]
  %525 = phi i64 [ %538, %523 ], [ %463, %520 ]
  %526 = add i64 %524, %441
  %527 = getelementptr i8, i8* %438, i64 %524
  %528 = bitcast i8* %527 to <16 x i8>*
  %529 = load <16 x i8>, <16 x i8>* %528, align 1, !alias.scope !52
  %530 = getelementptr i8, i8* %527, i64 16
  %531 = bitcast i8* %530 to <16 x i8>*
  %532 = load <16 x i8>, <16 x i8>* %531, align 1, !alias.scope !52
  %533 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %526
  %534 = bitcast i8* %533 to <16 x i8>*
  store <16 x i8> %529, <16 x i8>* %534, align 1, !alias.scope !55, !noalias !52
  %535 = getelementptr inbounds i8, i8* %533, i64 16
  %536 = bitcast i8* %535 to <16 x i8>*
  store <16 x i8> %532, <16 x i8>* %536, align 1, !alias.scope !55, !noalias !52
  %537 = add i64 %524, 32
  %538 = add i64 %525, -1
  %539 = icmp eq i64 %538, 0
  br i1 %539, label %540, label %523, !llvm.loop !58

540:                                              ; preds = %523, %520
  %541 = icmp eq i64 %443, %457
  br i1 %541, label %585, label %542

542:                                              ; preds = %540, %445, %440
  %543 = phi i64 [ %441, %445 ], [ %441, %440 ], [ %458, %540 ]
  %544 = phi i8* [ %438, %445 ], [ %438, %440 ], [ %459, %540 ]
  %545 = sub nsw i64 %442, %543
  %546 = xor i64 %543, -1
  %547 = add nsw i64 %546, %442
  %548 = and i64 %545, 3
  %549 = icmp eq i64 %548, 0
  br i1 %549, label %560, label %550

550:                                              ; preds = %542, %550
  %551 = phi i64 [ %556, %550 ], [ %543, %542 ]
  %552 = phi i8* [ %554, %550 ], [ %544, %542 ]
  %553 = phi i64 [ %558, %550 ], [ %548, %542 ]
  %554 = getelementptr inbounds i8, i8* %552, i64 1
  %555 = load i8, i8* %552, align 1
  %556 = add nuw nsw i64 %551, 1
  %557 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %551
  store i8 %555, i8* %557, align 1
  %558 = add i64 %553, -1
  %559 = icmp eq i64 %558, 0
  br i1 %559, label %560, label %550, !llvm.loop !59

560:                                              ; preds = %550, %542
  %561 = phi i8* [ undef, %542 ], [ %554, %550 ]
  %562 = phi i64 [ %543, %542 ], [ %556, %550 ]
  %563 = phi i8* [ %544, %542 ], [ %554, %550 ]
  %564 = icmp ult i64 %547, 3
  br i1 %564, label %585, label %565

565:                                              ; preds = %560, %565
  %566 = phi i64 [ %582, %565 ], [ %562, %560 ]
  %567 = phi i8* [ %580, %565 ], [ %563, %560 ]
  %568 = getelementptr inbounds i8, i8* %567, i64 1
  %569 = load i8, i8* %567, align 1
  %570 = add nuw nsw i64 %566, 1
  %571 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %566
  store i8 %569, i8* %571, align 1
  %572 = getelementptr inbounds i8, i8* %567, i64 2
  %573 = load i8, i8* %568, align 1
  %574 = add nuw nsw i64 %566, 2
  %575 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %570
  store i8 %573, i8* %575, align 1
  %576 = getelementptr inbounds i8, i8* %567, i64 3
  %577 = load i8, i8* %572, align 1
  %578 = add nuw nsw i64 %566, 3
  %579 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %574
  store i8 %577, i8* %579, align 1
  %580 = getelementptr inbounds i8, i8* %567, i64 4
  %581 = load i8, i8* %576, align 1
  %582 = add nuw nsw i64 %566, 4
  %583 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %578
  store i8 %581, i8* %583, align 1
  %584 = icmp eq i64 %582, %442
  br i1 %584, label %585, label %565, !llvm.loop !60

585:                                              ; preds = %560, %565, %540, %434
  %586 = phi i8* [ %438, %434 ], [ %459, %540 ], [ %561, %560 ], [ %580, %565 ]
  store i8 %422, i8* %45, align 8
  store i8* %586, i8** %12, align 8
  %587 = load i64, i64* %19, align 8
  store i64 %587, i64* %17, align 8
  store i32 12, i32* %2, align 4
  br label %735

588:                                              ; preds = %426
  %589 = bitcast i16* %28 to i32*
  %590 = ashr i32 %430, 10
  %591 = sext i32 %590 to i64
  %592 = getelementptr inbounds i16, i16* %28, i64 %591
  %593 = load i16, i16* %592, align 2
  %594 = zext i16 %593 to i32
  %595 = lshr i32 %430, 4
  %596 = and i32 %595, 63
  %597 = add nuw nsw i32 %596, %594
  %598 = zext i32 %597 to i64
  %599 = getelementptr inbounds i32, i32* %589, i64 %598
  %600 = load i32, i32* %599, align 4
  br label %601

601:                                              ; preds = %426, %588
  %602 = phi i32 [ %600, %588 ], [ 0, %426 ]
  %603 = shl i32 %602, 4
  %604 = and i32 %603, 1048560
  %605 = and i32 %430, 15
  %606 = or i32 %604, %605
  %607 = zext i32 %606 to i64
  %608 = getelementptr inbounds i16, i16* %39, i64 %607
  %609 = load i16, i16* %608, align 2
  %610 = or i32 %605, 16
  %611 = shl i32 1, %610
  %612 = and i32 %602, %611
  %613 = icmp eq i32 %612, 0
  br i1 %613, label %614, label %627

614:                                              ; preds = %601
  %615 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %11, i64 0, i32 11
  %616 = load i8, i8* %615, align 1
  %617 = icmp ne i8 %616, 0
  %618 = add nsw i32 %430, -57344
  %619 = icmp ult i32 %618, 6400
  %620 = or i1 %619, %617
  %621 = add nsw i32 %430, -983040
  %622 = icmp ult i32 %621, 131072
  %623 = or i1 %622, %620
  %624 = xor i1 %623, true
  %625 = icmp eq i16 %609, 0
  %626 = or i1 %625, %624
  br i1 %626, label %652, label %627

627:                                              ; preds = %154, %178, %614, %601, %122
  %628 = phi i8* [ %108, %122 ], [ %421, %614 ], [ %421, %601 ], [ %158, %154 ], [ %180, %178 ]
  %629 = phi i32 [ %104, %122 ], [ %203, %614 ], [ %203, %601 ], [ %104, %154 ], [ %104, %178 ]
  %630 = phi i16 [ %129, %122 ], [ %609, %614 ], [ %609, %601 ], [ %166, %154 ], [ %188, %178 ]
  %631 = icmp ult i16 %630, 256
  br i1 %631, label %632, label %636

632:                                              ; preds = %627
  %633 = trunc i16 %630 to i8
  %634 = load i8*, i8** %4, align 8
  %635 = getelementptr inbounds i8, i8* %634, i64 1
  store i8* %635, i8** %4, align 8
  store i8 %633, i8* %634, align 1
  br label %649

636:                                              ; preds = %627
  %637 = lshr i16 %630, 8
  %638 = trunc i16 %637 to i8
  %639 = load i8*, i8** %4, align 8
  %640 = getelementptr inbounds i8, i8* %639, i64 1
  store i8* %640, i8** %4, align 8
  store i8 %638, i8* %639, align 1
  %641 = icmp sgt i32 %629, 1
  %642 = trunc i16 %630 to i8
  br i1 %641, label %643, label %646

643:                                              ; preds = %636
  %644 = load i8*, i8** %4, align 8
  %645 = getelementptr inbounds i8, i8* %644, i64 1
  store i8* %645, i8** %4, align 8
  store i8 %642, i8* %644, align 1
  br label %649

646:                                              ; preds = %636
  %647 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %11, i64 0, i32 27, i64 0
  store i8 %642, i8* %647, align 8
  %648 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %11, i64 0, i32 21
  store i8 1, i8* %648, align 1
  store i32 15, i32* %2, align 4
  br label %732

649:                                              ; preds = %643, %632
  %650 = phi i32 [ -2, %643 ], [ -1, %632 ]
  %651 = add nsw i32 %629, %650
  br label %679

652:                                              ; preds = %614, %122, %190, %168
  %653 = phi i8* [ %158, %168 ], [ %180, %190 ], [ %108, %122 ], [ %421, %614 ]
  %654 = phi i32 [ %104, %168 ], [ %104, %190 ], [ %104, %122 ], [ %203, %614 ]
  %655 = phi i32 [ %170, %168 ], [ %192, %190 ], [ %123, %122 ], [ %430, %614 ]
  %656 = bitcast i16** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %656) #11
  store i16* @_ZZL17ucnv_DBCSFromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCodeE3nul, i16** %5, align 8
  %657 = load %struct.UConverterSharedData*, %struct.UConverterSharedData** %25, align 8
  %658 = load i8*, i8** %4, align 8
  %659 = sext i32 %654 to i64
  %660 = getelementptr inbounds i8, i8* %658, i64 %659
  %661 = getelementptr inbounds %struct.UConverterFromUnicodeArgs, %struct.UConverterFromUnicodeArgs* %0, i64 0, i32 1
  %662 = load i8, i8* %661, align 2
  %663 = call fastcc i32 @_ZL9_extFromUP10UConverterPK20UConverterSharedDataiPPKDsS5_PPhPKhPPiiaP10UErrorCode(%struct.UConverter* %11, %struct.UConverterSharedData* %657, i32 %655, i16** nonnull %5, i16* nonnull @_ZZL17ucnv_DBCSFromUTF8P25UConverterFromUnicodeArgsP23UConverterToUnicodeArgsP10UErrorCodeE3nul, i8** nonnull %4, i8* %660, i32** null, i32 -1, i8 signext %662, i32* %2)
  %664 = load i32, i32* %2, align 4
  %665 = icmp slt i32 %664, 1
  br i1 %665, label %668, label %666

666:                                              ; preds = %652
  %667 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %11, i64 0, i32 17
  store i32 %663, i32* %667, align 4
  br label %673

668:                                              ; preds = %652
  %669 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %11, i64 0, i32 31
  %670 = load i32, i32* %669, align 8
  %671 = icmp sgt i32 %670, -1
  br i1 %671, label %672, label %674

672:                                              ; preds = %668
  store i32 -127, i32* %2, align 4
  br label %673

673:                                              ; preds = %666, %672
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %656) #11
  br label %684

674:                                              ; preds = %668
  %675 = load i64, i64* %21, align 8
  %676 = load i64, i64* %19, align 8
  %677 = sub i64 %675, %676
  %678 = trunc i64 %677 to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %656) #11
  br label %679

679:                                              ; preds = %649, %96, %674
  %680 = phi i8* [ %13, %96 ], [ %653, %674 ], [ %628, %649 ]
  %681 = phi i32 [ %24, %96 ], [ %678, %674 ], [ %651, %649 ]
  %682 = icmp ult i8* %680, %97
  br i1 %682, label %103, label %684

683:                                              ; preds = %103
  store i32 15, i32* %2, align 4
  br label %732

684:                                              ; preds = %117, %679, %673
  %685 = phi i8* [ %680, %679 ], [ %653, %673 ], [ %97, %117 ]
  %686 = load i32, i32* %2, align 4
  %687 = icmp sgt i32 %686, 0
  br i1 %687, label %732, label %688

688:                                              ; preds = %684
  %689 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %11, i64 0, i32 31
  %690 = load i32, i32* %689, align 8
  %691 = icmp slt i32 %690, 0
  br i1 %691, label %692, label %732

692:                                              ; preds = %688
  %693 = load i8*, i8** %14, align 8
  %694 = icmp ult i8* %685, %693
  br i1 %694, label %695, label %732

695:                                              ; preds = %692
  %696 = load i8, i8* %685, align 1
  %697 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 0
  store i8 %696, i8* %697, align 1
  %698 = zext i8 %696 to i32
  %699 = icmp sgt i8 %696, -1
  br i1 %699, label %709, label %700

700:                                              ; preds = %695
  %701 = add nsw i8 %696, 62
  %702 = icmp ult i8 %701, 51
  br i1 %702, label %703, label %709

703:                                              ; preds = %700
  %704 = icmp ugt i8 %696, -33
  %705 = zext i1 %704 to i32
  %706 = icmp ugt i8 %696, -17
  %707 = select i1 %706, i32 3, i32 2
  %708 = add nuw nsw i32 %707, %705
  br label %709

709:                                              ; preds = %703, %700, %695
  %710 = phi i32 [ 1, %695 ], [ %708, %703 ], [ 0, %700 ]
  %711 = getelementptr inbounds i8, i8* %685, i64 1
  %712 = icmp ult i8* %711, %693
  br i1 %712, label %713, label %726

713:                                              ; preds = %709, %713
  %714 = phi i8* [ %724, %713 ], [ %711, %709 ]
  %715 = phi i32 [ %723, %713 ], [ %698, %709 ]
  %716 = phi i8 [ %718, %713 ], [ 1, %709 ]
  %717 = load i8, i8* %714, align 1
  %718 = add i8 %716, 1
  %719 = sext i8 %716 to i64
  %720 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 13, i64 %719
  store i8 %717, i8* %720, align 1
  %721 = shl i32 %715, 6
  %722 = zext i8 %717 to i32
  %723 = add nsw i32 %721, %722
  %724 = getelementptr inbounds i8, i8* %714, i64 1
  %725 = icmp eq i8* %724, %693
  br i1 %725, label %726, label %713

726:                                              ; preds = %713, %709
  %727 = phi i8 [ 1, %709 ], [ %718, %713 ]
  %728 = phi i32 [ %698, %709 ], [ %723, %713 ]
  %729 = phi i8* [ %711, %709 ], [ %693, %713 ]
  %730 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 14
  store i32 %728, i32* %730, align 8
  store i8 %727, i8* %45, align 8
  %731 = getelementptr inbounds %struct.UConverter, %struct.UConverter* %8, i64 0, i32 15
  store i32 %710, i32* %731, align 4
  br label %732

732:                                              ; preds = %646, %683, %684, %726, %692, %688
  %733 = phi i8* [ %729, %726 ], [ %685, %692 ], [ %685, %688 ], [ %685, %684 ], [ %628, %646 ], [ %105, %683 ]
  store i8* %733, i8** %12, align 8
  %734 = load i64, i64* %19, align 8
  store i64 %734, i64* %17, align 8
  br label %735

735:                                              ; preds = %732, %585, %413
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #11
  ret void
}

declare void @uprv_free_69(i8*) local_unnamed_addr #2

declare void @umtx_lock_69(%"class.icu_69::UMutex"*) local_unnamed_addr #2

declare void @umtx_unlock_69(%"class.icu_69::UMutex"*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i8* @strstr(i8*, i8* nocapture) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare i8* @strcpy(i8* returned, i8* nocapture readonly) local_unnamed_addr #8

declare void @ucnv_cbFromUWriteBytes_69(%struct.UConverterFromUnicodeArgs*, i8*, i32, i32, i32*) local_unnamed_addr #2

; Function Attrs: nounwind readonly ssp uwtable
define internal fastcc signext i8 @_ZL18hasValidTrailBytesPA256_Kih([256 x i32]* nocapture readonly, i8 zeroext) unnamed_addr #9 {
  %3 = zext i8 %1 to i64
  %4 = getelementptr inbounds [256 x i32], [256 x i32]* %0, i64 %3, i64 161
  %5 = load i32, i32* %4, align 4
  %6 = icmp sgt i32 %5, -1
  %7 = and i32 %5, 15728640
  %8 = icmp eq i32 %7, 7340032
  %9 = or i1 %6, %8
  br i1 %9, label %10, label %47

10:                                               ; preds = %2
  %11 = getelementptr inbounds [256 x i32], [256 x i32]* %0, i64 %3, i64 65
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %12, -1
  %14 = and i32 %12, 15728640
  %15 = icmp eq i32 %14, 7340032
  %16 = or i1 %13, %15
  br i1 %16, label %26, label %47

17:                                               ; preds = %26
  %18 = or i64 %27, 1
  %19 = getelementptr inbounds [256 x i32], [256 x i32]* %0, i64 %3, i64 %18
  %20 = load i32, i32* %19, align 4
  %21 = icmp sgt i32 %20, -1
  %22 = and i32 %20, 15728640
  %23 = icmp eq i32 %22, 7340032
  %24 = or i1 %21, %23
  %25 = add nuw nsw i64 %27, 2
  br i1 %24, label %49, label %47

26:                                               ; preds = %10, %49
  %27 = phi i64 [ %25, %49 ], [ 0, %10 ]
  %28 = getelementptr inbounds [256 x i32], [256 x i32]* %0, i64 %3, i64 %27
  %29 = load i32, i32* %28, align 4
  %30 = icmp sgt i32 %29, -1
  %31 = and i32 %29, 15728640
  %32 = icmp eq i32 %31, 7340032
  %33 = or i1 %30, %32
  br i1 %33, label %17, label %47

34:                                               ; preds = %49, %44
  %35 = phi i64 [ %45, %44 ], [ 0, %49 ]
  %36 = getelementptr inbounds [256 x i32], [256 x i32]* %0, i64 %3, i64 %35
  %37 = load i32, i32* %36, align 4
  %38 = icmp sgt i32 %37, -1
  br i1 %38, label %39, label %44

39:                                               ; preds = %34
  %40 = lshr i32 %37, 24
  %41 = trunc i32 %40 to i8
  %42 = tail call fastcc signext i8 @_ZL18hasValidTrailBytesPA256_Kih([256 x i32]* %0, i8 zeroext %41)
  %43 = icmp eq i8 %42, 0
  br i1 %43, label %44, label %47

44:                                               ; preds = %39, %34
  %45 = add nuw nsw i64 %35, 1
  %46 = icmp eq i64 %45, 256
  br i1 %46, label %47, label %34

47:                                               ; preds = %26, %17, %39, %44, %10, %2
  %48 = phi i8 [ 1, %2 ], [ 1, %10 ], [ 0, %44 ], [ 1, %39 ], [ 1, %17 ], [ 1, %26 ]
  ret i8 %48

49:                                               ; preds = %17
  %50 = icmp eq i64 %25, 256
  br i1 %50, label %34, label %26
}

declare signext i8 @ucnv_extInitialMatchToU_69(%struct.UConverter*, i32*, i32, i8**, i8*, i16**, i16*, i32**, i32, i8 signext, i32*) local_unnamed_addr #2

declare void @ucnv_toUWriteCodePoint_69(%struct.UConverter*, i32, i16**, i16*, i32**, i32, i32*) local_unnamed_addr #2

declare signext i8 @ucnv_extInitialMatchFromU_69(%struct.UConverter*, i32*, i32, i16**, i16*, i8**, i8*, i32**, i32, i8 signext, i32*) local_unnamed_addr #2

declare void @ucnv_fromUWriteBytes_69(%struct.UConverter*, i8*, i32, i8**, i8*, i32**, i32, i32*) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #10

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { argmemonly nofree nounwind readonly }
attributes #11 = { nounwind }
attributes #12 = { nounwind readonly }
attributes #13 = { nounwind allocsize(0) }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.isvectorized", i32 1}
!9 = distinct !{!9, !8}
!10 = !{!11}
!11 = distinct !{!11, !12}
!12 = distinct !{!12, !"LVerDomain"}
!13 = !{!14}
!14 = distinct !{!14, !12}
!15 = distinct !{!15, !8}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !8}
!18 = !{!19}
!19 = distinct !{!19, !20}
!20 = distinct !{!20, !"LVerDomain"}
!21 = !{!22}
!22 = distinct !{!22, !20}
!23 = distinct !{!23, !8}
!24 = distinct !{!24, !8}
!25 = !{!26}
!26 = distinct !{!26, !27}
!27 = distinct !{!27, !"LVerDomain"}
!28 = !{!29}
!29 = distinct !{!29, !27}
!30 = distinct !{!30, !8}
!31 = distinct !{!31, !3}
!32 = distinct !{!32, !3}
!33 = distinct !{!33, !8}
!34 = !{!35}
!35 = distinct !{!35, !36}
!36 = distinct !{!36, !"LVerDomain"}
!37 = !{!38}
!38 = distinct !{!38, !36}
!39 = distinct !{!39, !8}
!40 = distinct !{!40, !3}
!41 = distinct !{!41, !3}
!42 = distinct !{!42, !8}
!43 = !{!44}
!44 = distinct !{!44, !45}
!45 = distinct !{!45, !"LVerDomain"}
!46 = !{!47}
!47 = distinct !{!47, !45}
!48 = distinct !{!48, !8}
!49 = distinct !{!49, !3}
!50 = distinct !{!50, !3}
!51 = distinct !{!51, !8}
!52 = !{!53}
!53 = distinct !{!53, !54}
!54 = distinct !{!54, !"LVerDomain"}
!55 = !{!56}
!56 = distinct !{!56, !54}
!57 = distinct !{!57, !8}
!58 = distinct !{!58, !3}
!59 = distinct !{!59, !3}
!60 = distinct !{!60, !8}
