; ModuleID = '../../third_party/pdfium/core/fxge/dib/cfx_dibbase.cpp'
source_filename = "../../third_party/pdfium/core/fxge/dib/cfx_dibbase.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_ImageTransformer = type { %"class.fxcrt::RetainPtr.9", %class.CFX_Matrix, %struct.FX_RECT, %struct.FX_RECT, %class.CFX_Matrix, %"class.std::__1::unique_ptr.15", %class.CFX_BitmapStorer, %struct.FXDIB_ResampleOptions, i32 }
%"class.fxcrt::RetainPtr.9" = type { %"class.std::__1::unique_ptr.10" }
%"class.std::__1::unique_ptr.10" = type { %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %class.CFX_DIBBase* }
%class.CFX_DIBBase = type { %"class.fxcrt::Retainable", i16, i32, i32, i32, %"class.fxcrt::RetainPtr", %"class.std::__1::vector" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.CFX_DIBitmap* }
%class.CFX_DIBitmap = type { %class.CFX_DIBBase, %"class.fxcrt::MaybeOwned" }
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.4", %"class.fxcrt::UnownedPtr" }
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { i8* }
%"class.fxcrt::UnownedPtr" = type { i8* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i32* }
%struct.FX_RECT = type { i32, i32, i32, i32 }
%class.CFX_Matrix = type { float, float, float, float, float, float }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %class.CFX_ImageStretcher* }
%class.CFX_ImageStretcher = type <{ %"class.fxcrt::UnownedPtr.18", %"class.fxcrt::RetainPtr.9", %"class.std::__1::unique_ptr.19", %struct.FXDIB_ResampleOptions, i32, i32, %struct.FX_RECT, i16, [2 x i8] }>
%"class.fxcrt::UnownedPtr.18" = type { %class.ScanlineComposerIface* }
%class.ScanlineComposerIface = type { i32 (...)** }
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %class.CStretchEngine* }
%class.CStretchEngine = type opaque
%class.CFX_BitmapStorer = type { %class.ScanlineComposerIface, %"class.fxcrt::RetainPtr" }
%struct.FXDIB_ResampleOptions = type { i8, i8, i8, i8 }
%class.PauseIndicatorIface = type opaque
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.8", i64 }
%"class.fxcrt::UnownedPtr.8" = type { i32* }
%class.CFX_ClipRgn = type { i8, %struct.FX_RECT, %"class.fxcrt::RetainPtr" }
%"struct.std::__1::pair" = type { i32, i32 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIj16FxAllocAllocatorIjEE6assignIPKjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_ = comdat any

$_ZNSt3__16vectorIj16FxAllocAllocatorIjEE8__appendEm = comdat any

@_ZTV11CFX_DIBBase = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CFX_DIBBase*)* @_ZN11CFX_DIBBaseD2Ev to i8*), i8* bitcast (void (%class.CFX_DIBBase*)* @_ZN11CFX_DIBBaseD0Ev to i8*), i8* bitcast (i8* (%class.CFX_DIBBase*)* @_ZNK11CFX_DIBBase9GetBufferEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (i1 (%class.CFX_DIBBase*, i32, %class.PauseIndicatorIface*)* @_ZNK11CFX_DIBBase14SkipToScanlineEiP19PauseIndicatorIface to i8*)] }, align 8
@.ref.tmp = private constant [2 x i32] [i32 -16777216, i32 -1], align 4
@__const._ZN11CFX_DIBBase11TransformToERK10CFX_MatrixPiS3_.transformer = private unnamed_addr constant %class.CFX_ImageTransformer { %"class.fxcrt::RetainPtr.9" { %"class.std::__1::unique_ptr.10" { %"class.std::__1::__compressed_pair.11" { %"struct.std::__1::__compressed_pair_elem.12" { %class.CFX_DIBBase* inttoptr (i64 -6148914691236517206 to %class.CFX_DIBBase*) } } } }, %class.CFX_Matrix { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %struct.FX_RECT { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %struct.FX_RECT { i32 -1431655766, i32 -1431655766, i32 -1431655766, i32 -1431655766 }, %class.CFX_Matrix { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, %"class.std::__1::unique_ptr.15" { %"class.std::__1::__compressed_pair.16" { %"struct.std::__1::__compressed_pair_elem.17" { %class.CFX_ImageStretcher* inttoptr (i64 -6148914691236517206 to %class.CFX_ImageStretcher*) } } }, %class.CFX_BitmapStorer { %class.ScanlineComposerIface { i32 (...)** inttoptr (i64 -6148914691236517206 to i32 (...)**) }, %"class.fxcrt::RetainPtr" { %"class.std::__1::unique_ptr" { %"class.std::__1::__compressed_pair" { %"struct.std::__1::__compressed_pair_elem" { %class.CFX_DIBitmap* inttoptr (i64 -6148914691236517206 to %class.CFX_DIBitmap*) } } } } }, %struct.FXDIB_ResampleOptions { i8 -86, i8 -86, i8 -86, i8 -86 }, i32 -1431655766 }, align 8

@_ZN11CFX_DIBBaseD1Ev = hidden unnamed_addr alias void (%class.CFX_DIBBase*), void (%class.CFX_DIBBase*)* @_ZN11CFX_DIBBaseD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11CFX_DIBBaseC2Ev(%class.CFX_DIBBase* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 0, i32 0
  %3 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 0, i32 1
  store i64 0, i64* %3, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV11CFX_DIBBase, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %4 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 1
  store i16 0, i16* %4, align 8
  %5 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 2
  %6 = bitcast i32* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %6, i8 0, i64 44, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11CFX_DIBBaseD2Ev(%class.CFX_DIBBase* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTV11CFX_DIBBase, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 6, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = icmp eq i32* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %1
  %7 = ptrtoint i32* %4 to i64
  %8 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 6, i32 0, i32 1
  %9 = bitcast i32** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast i32* %4 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %10) #13
  br label %11

11:                                               ; preds = %1, %6
  %12 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %13 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %12, align 8
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %12, align 8
  %14 = icmp eq %class.CFX_DIBitmap* %13, null
  br i1 %14, label %26, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %13, i64 0, i32 0, i32 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = add nsw i64 %17, -1
  store i64 %18, i64* %16, align 8
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %20, label %26

20:                                               ; preds = %15
  %21 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %13, i64 0, i32 0, i32 0
  %22 = bitcast %class.CFX_DIBitmap* %13 to void (%"class.fxcrt::Retainable"*)***
  %23 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %22, align 8
  %24 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %23, i64 1
  %25 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %24, align 8
  tail call void %25(%"class.fxcrt::Retainable"* nonnull %21) #13
  br label %26

26:                                               ; preds = %11, %15, %20
  ret void
}

; Function Attrs: noreturn nounwind ssp uwtable
define hidden void @_ZN11CFX_DIBBaseD0Ev(%class.CFX_DIBBase* nocapture readnone) unnamed_addr #1 align 2 {
  tail call void @llvm.trap() #14
  unreachable
}

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden noalias i8* @_ZNK11CFX_DIBBase9GetBufferEv(%class.CFX_DIBBase* nocapture readnone) unnamed_addr #3 align 2 {
  ret i8* null
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK11CFX_DIBBase14SkipToScanlineEiP19PauseIndicatorIface(%class.CFX_DIBBase* nocapture readnone, i32, %class.PauseIndicatorIface* nocapture readnone) unnamed_addr #3 align 2 {
  ret i1 false
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK11CFX_DIBBase5CloneEPK7FX_RECT(%"class.fxcrt::RetainPtr"* noalias nocapture sret, %class.CFX_DIBBase*, %struct.FX_RECT*) local_unnamed_addr #0 align 2 {
  %4 = alloca %struct.FX_RECT, align 4
  %5 = alloca %"class.fxcrt::RetainPtr.9", align 8
  %6 = bitcast %struct.FX_RECT* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #13
  %7 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %4, i64 0, i32 0
  %8 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %4, i64 0, i32 1
  %9 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %4, i64 0, i32 2
  %10 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %4, i64 0, i32 3
  %11 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 3
  %14 = load i32, i32* %13, align 8
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  store i32 %12, i32* %9, align 4
  store i32 %14, i32* %10, align 4
  %15 = icmp eq %struct.FX_RECT* %2, null
  br i1 %15, label %26, label %16

16:                                               ; preds = %3
  call void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT* nonnull %4, %struct.FX_RECT* nonnull dereferenceable(16) %2) #13
  %17 = load i32, i32* %9, align 4
  %18 = load i32, i32* %7, align 4
  %19 = icmp sgt i32 %17, %18
  br i1 %19, label %20, label %24

20:                                               ; preds = %16
  %21 = load i32, i32* %10, align 4
  %22 = load i32, i32* %8, align 4
  %23 = icmp sgt i32 %21, %22
  br i1 %23, label %26, label %24

24:                                               ; preds = %20, %16
  %25 = bitcast %"class.fxcrt::RetainPtr"* %0 to i64*
  store i64 0, i64* %25, align 8
  br label %317

26:                                               ; preds = %20, %3
  %27 = call i8* @_Znwm(i64 80) #15, !noalias !2
  %28 = bitcast i8* %27 to %class.CFX_DIBitmap*
  call void @_ZN12CFX_DIBitmapC1Ev(%class.CFX_DIBitmap* nonnull %28) #13, !noalias !2
  %29 = ptrtoint i8* %27 to i64
  %30 = getelementptr inbounds i8, i8* %27, i64 8
  %31 = bitcast i8* %30 to i64*
  %32 = load i64, i64* %31, align 8, !noalias !2
  %33 = add nsw i64 %32, 1
  store i64 %33, i64* %31, align 8, !noalias !2
  %34 = load i32, i32* %9, align 4
  %35 = load i32, i32* %7, align 4
  %36 = sub nsw i32 %34, %35
  %37 = load i32, i32* %10, align 4
  %38 = load i32, i32* %8, align 4
  %39 = sub nsw i32 %37, %38
  %40 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 1
  %41 = load i16, i16* %40, align 8
  %42 = call zeroext i1 @_ZN12CFX_DIBitmap6CreateEii12FXDIB_Format(%class.CFX_DIBitmap* nonnull %28, i32 %36, i32 %39, i16 zeroext %41) #13
  br i1 %42, label %43, label %306

43:                                               ; preds = %26
  %44 = bitcast i8* %27 to %class.CFX_DIBBase*
  %45 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 6
  %46 = bitcast %"class.std::__1::vector"* %45 to i64*
  %47 = load i64, i64* %46, align 8, !noalias !5
  %48 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 6, i32 0, i32 1
  %49 = bitcast i32** %48 to i64*
  %50 = load i64, i64* %49, align 8, !noalias !5
  %51 = sub i64 %50, %47
  %52 = ashr exact i64 %51, 2
  %53 = icmp eq i64 %51, 0
  br i1 %53, label %60, label %54

54:                                               ; preds = %43
  %55 = getelementptr inbounds i8, i8* %27, i64 16
  %56 = bitcast i8* %55 to i16*
  %57 = load i16, i16* %56, align 8
  %58 = and i16 %57, 255
  %59 = icmp ugt i16 %58, 8
  br i1 %59, label %60, label %66

60:                                               ; preds = %54, %43
  %61 = getelementptr inbounds i8, i8* %27, i64 40
  %62 = bitcast i8* %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds i8, i8* %27, i64 48
  %65 = bitcast i8* %64 to i64*
  store i64 %63, i64* %65, align 8
  br label %95

66:                                               ; preds = %54
  %67 = zext i16 %58 to i32
  %68 = shl i32 1, %67
  %69 = getelementptr inbounds i8, i8* %27, i64 40
  %70 = bitcast i8* %69 to i32**
  %71 = load i32*, i32** %70, align 8
  %72 = getelementptr inbounds i8, i8* %27, i64 48
  %73 = bitcast i8* %72 to i32**
  %74 = load i32*, i32** %73, align 8
  %75 = icmp eq i32* %71, %74
  br i1 %75, label %76, label %79

76:                                               ; preds = %66
  %77 = bitcast i8* %69 to %"class.std::__1::vector"*
  %78 = zext i32 %68 to i64
  call void @_ZNSt3__16vectorIj16FxAllocAllocatorIjEE8__appendEm(%"class.std::__1::vector"* %77, i64 %78) #13
  br label %79

79:                                               ; preds = %76, %66
  %80 = icmp ult i32 %68, 256
  %81 = select i1 %80, i32 %68, i32 256
  %82 = zext i32 %81 to i64
  %83 = inttoptr i64 %47 to i32*
  br label %84

84:                                               ; preds = %88, %79
  %85 = phi i64 [ 0, %79 ], [ %93, %88 ]
  %86 = icmp eq i64 %85, %52
  br i1 %86, label %87, label %88, !prof !8

87:                                               ; preds = %84
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !9
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !10
  unreachable

88:                                               ; preds = %84
  %89 = getelementptr inbounds i32, i32* %83, i64 %85
  %90 = load i32, i32* %89, align 4
  %91 = load i32*, i32** %70, align 8
  %92 = getelementptr inbounds i32, i32* %91, i64 %85
  store i32 %90, i32* %92, align 4
  %93 = add nuw nsw i64 %85, 1
  %94 = icmp ult i64 %93, %82
  br i1 %94, label %84, label %95

95:                                               ; preds = %88, %60
  %96 = bitcast %"class.fxcrt::RetainPtr.9"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %96) #13
  %97 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %98 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %97, align 8
  %99 = ptrtoint %class.CFX_DIBitmap* %98 to i64
  %100 = bitcast %"class.fxcrt::RetainPtr.9"* %5 to i64*
  store i64 %99, i64* %100, align 8
  %101 = icmp eq %class.CFX_DIBitmap* %98, null
  br i1 %101, label %106, label %102

102:                                              ; preds = %95
  %103 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %98, i64 0, i32 0, i32 0, i32 1
  %104 = load i64, i64* %103, align 8
  %105 = add nsw i64 %104, 1
  store i64 %105, i64* %103, align 8
  br label %106

106:                                              ; preds = %95, %102
  %107 = call zeroext i1 @_ZN11CFX_DIBBase12SetAlphaMaskERKN5fxcrt9RetainPtrIS_EEPK7FX_RECT(%class.CFX_DIBBase* nonnull %44, %"class.fxcrt::RetainPtr.9"* nonnull dereferenceable(8) %5, %struct.FX_RECT* %2)
  %108 = getelementptr inbounds %"class.fxcrt::RetainPtr.9", %"class.fxcrt::RetainPtr.9"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  store %class.CFX_DIBBase* null, %class.CFX_DIBBase** %108, align 8
  %109 = icmp eq %class.CFX_DIBitmap* %98, null
  br i1 %109, label %121, label %110

110:                                              ; preds = %106
  %111 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %98, i64 0, i32 0, i32 0, i32 1
  %112 = load i64, i64* %111, align 8
  %113 = add nsw i64 %112, -1
  store i64 %113, i64* %111, align 8
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %115, label %121

115:                                              ; preds = %110
  %116 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %98, i64 0, i32 0, i32 0
  %117 = bitcast %class.CFX_DIBitmap* %98 to void (%"class.fxcrt::Retainable"*)***
  %118 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %117, align 8
  %119 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %118, i64 1
  %120 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %119, align 8
  call void %120(%"class.fxcrt::Retainable"* nonnull %116) #13
  br label %121

121:                                              ; preds = %106, %110, %115
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %96) #13
  %122 = load i16, i16* %40, align 8
  %123 = and i16 %122, 255
  %124 = icmp eq i16 %123, 1
  br i1 %124, label %125, label %258

125:                                              ; preds = %121
  %126 = load i32, i32* %7, align 4
  %127 = and i32 %126, 7
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %258, label %129

129:                                              ; preds = %125
  %130 = srem i32 %126, 32
  %131 = sub nsw i32 32, %130
  %132 = getelementptr inbounds i8, i8* %27, i64 28
  %133 = bitcast i8* %132 to i32*
  %134 = load i32, i32* %133, align 4
  %135 = lshr i32 %134, 2
  %136 = load i32, i32* %8, align 4
  %137 = load i32, i32* %10, align 4
  %138 = icmp slt i32 %136, %137
  br i1 %138, label %139, label %304

139:                                              ; preds = %129
  %140 = bitcast %class.CFX_DIBBase* %1 to i8* (%class.CFX_DIBBase*, i32)***
  %141 = bitcast i8* %27 to i8* (%class.CFX_DIBBase*, i32)***
  %142 = icmp eq i32 %135, 0
  %143 = zext i32 %135 to i64
  %144 = and i32 %134, -4
  %145 = zext i32 %144 to i64
  %146 = add nuw nsw i64 %145, 4
  %147 = icmp ult i32 %134, 32
  %148 = and i64 %143, 1073741816
  %149 = insertelement <4 x i32> undef, i32 %130, i32 0
  %150 = shufflevector <4 x i32> %149, <4 x i32> undef, <4 x i32> zeroinitializer
  %151 = insertelement <4 x i32> undef, i32 %130, i32 0
  %152 = shufflevector <4 x i32> %151, <4 x i32> undef, <4 x i32> zeroinitializer
  %153 = insertelement <4 x i32> undef, i32 %131, i32 0
  %154 = shufflevector <4 x i32> %153, <4 x i32> undef, <4 x i32> zeroinitializer
  %155 = insertelement <4 x i32> undef, i32 %131, i32 0
  %156 = shufflevector <4 x i32> %155, <4 x i32> undef, <4 x i32> zeroinitializer
  %157 = icmp eq i64 %148, %143
  %158 = and i64 %143, 1
  %159 = icmp eq i64 %158, 0
  %160 = sub nsw i64 0, %143
  br label %161

161:                                              ; preds = %139, %233
  %162 = phi i32 [ %136, %139 ], [ %234, %233 ]
  %163 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %140, align 8
  %164 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %163, i64 3
  %165 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %164, align 8
  %166 = call i8* %165(%class.CFX_DIBBase* %1, i32 %162) #13
  %167 = bitcast i8* %166 to i32*
  %168 = load i32, i32* %7, align 4
  %169 = sdiv i32 %168, 32
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds i32, i32* %167, i64 %170
  %172 = load i32, i32* %8, align 4
  %173 = sub nsw i32 %162, %172
  %174 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %141, align 8
  %175 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %174, i64 3
  %176 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %175, align 8
  %177 = call i8* %176(%class.CFX_DIBBase* nonnull %44, i32 %173) #13
  %178 = bitcast i8* %177 to i32*
  br i1 %142, label %233, label %179

179:                                              ; preds = %161
  br i1 %147, label %180, label %196

180:                                              ; preds = %232, %196, %179
  %181 = phi i64 [ 0, %196 ], [ 0, %179 ], [ %148, %232 ]
  %182 = xor i64 %181, -1
  br i1 %159, label %193, label %183

183:                                              ; preds = %180
  %184 = getelementptr inbounds i32, i32* %171, i64 %181
  %185 = load i32, i32* %184, align 4
  %186 = shl i32 %185, %130
  %187 = or i64 %181, 1
  %188 = getelementptr inbounds i32, i32* %171, i64 %187
  %189 = load i32, i32* %188, align 4
  %190 = lshr i32 %189, %131
  %191 = or i32 %190, %186
  %192 = getelementptr inbounds i32, i32* %178, i64 %181
  store i32 %191, i32* %192, align 4
  br label %193

193:                                              ; preds = %183, %180
  %194 = phi i64 [ %187, %183 ], [ %181, %180 ]
  %195 = icmp eq i64 %182, %160
  br i1 %195, label %233, label %237

196:                                              ; preds = %179
  %197 = getelementptr i8, i8* %177, i64 %145
  %198 = shl nsw i64 %170, 2
  %199 = getelementptr i8, i8* %166, i64 %198
  %200 = getelementptr i8, i8* %166, i64 %146
  %201 = getelementptr i8, i8* %200, i64 %198
  %202 = icmp ult i8* %177, %201
  %203 = icmp ult i8* %199, %197
  %204 = and i1 %202, %203
  br i1 %204, label %180, label %205

205:                                              ; preds = %196, %205
  %206 = phi i64 [ %230, %205 ], [ 0, %196 ]
  %207 = getelementptr inbounds i32, i32* %171, i64 %206
  %208 = bitcast i32* %207 to <4 x i32>*
  %209 = load <4 x i32>, <4 x i32>* %208, align 4, !alias.scope !11
  %210 = getelementptr inbounds i32, i32* %207, i64 4
  %211 = bitcast i32* %210 to <4 x i32>*
  %212 = load <4 x i32>, <4 x i32>* %211, align 4, !alias.scope !11
  %213 = shl <4 x i32> %209, %150
  %214 = shl <4 x i32> %212, %152
  %215 = or i64 %206, 1
  %216 = getelementptr inbounds i32, i32* %171, i64 %215
  %217 = bitcast i32* %216 to <4 x i32>*
  %218 = load <4 x i32>, <4 x i32>* %217, align 4, !alias.scope !11
  %219 = getelementptr inbounds i32, i32* %216, i64 4
  %220 = bitcast i32* %219 to <4 x i32>*
  %221 = load <4 x i32>, <4 x i32>* %220, align 4, !alias.scope !11
  %222 = lshr <4 x i32> %218, %154
  %223 = lshr <4 x i32> %221, %156
  %224 = or <4 x i32> %222, %213
  %225 = or <4 x i32> %223, %214
  %226 = getelementptr inbounds i32, i32* %178, i64 %206
  %227 = bitcast i32* %226 to <4 x i32>*
  store <4 x i32> %224, <4 x i32>* %227, align 4, !alias.scope !14, !noalias !11
  %228 = getelementptr inbounds i32, i32* %226, i64 4
  %229 = bitcast i32* %228 to <4 x i32>*
  store <4 x i32> %225, <4 x i32>* %229, align 4, !alias.scope !14, !noalias !11
  %230 = add i64 %206, 8
  %231 = icmp eq i64 %230, %148
  br i1 %231, label %232, label %205, !llvm.loop !16

232:                                              ; preds = %205
  br i1 %157, label %233, label %180

233:                                              ; preds = %193, %237, %232, %161
  %234 = add nsw i32 %162, 1
  %235 = load i32, i32* %10, align 4
  %236 = icmp slt i32 %234, %235
  br i1 %236, label %161, label %304

237:                                              ; preds = %193, %237
  %238 = phi i64 [ %251, %237 ], [ %194, %193 ]
  %239 = getelementptr inbounds i32, i32* %171, i64 %238
  %240 = load i32, i32* %239, align 4
  %241 = shl i32 %240, %130
  %242 = add nuw nsw i64 %238, 1
  %243 = getelementptr inbounds i32, i32* %171, i64 %242
  %244 = load i32, i32* %243, align 4
  %245 = lshr i32 %244, %131
  %246 = or i32 %245, %241
  %247 = getelementptr inbounds i32, i32* %178, i64 %238
  store i32 %246, i32* %247, align 4
  %248 = getelementptr inbounds i32, i32* %171, i64 %242
  %249 = load i32, i32* %248, align 4
  %250 = shl i32 %249, %130
  %251 = add nuw nsw i64 %238, 2
  %252 = getelementptr inbounds i32, i32* %171, i64 %251
  %253 = load i32, i32* %252, align 4
  %254 = lshr i32 %253, %131
  %255 = or i32 %254, %250
  %256 = getelementptr inbounds i32, i32* %178, i64 %242
  store i32 %255, i32* %256, align 4
  %257 = icmp eq i64 %251, %143
  br i1 %257, label %233, label %237, !llvm.loop !18

258:                                              ; preds = %125, %121
  %259 = getelementptr inbounds i8, i8* %27, i64 20
  %260 = bitcast i8* %259 to i32*
  %261 = load i32, i32* %260, align 4
  %262 = getelementptr inbounds i8, i8* %27, i64 16
  %263 = bitcast i8* %262 to i16*
  %264 = load i16, i16* %263, align 8
  %265 = and i16 %264, 255
  %266 = zext i16 %265 to i32
  %267 = mul nsw i32 %261, %266
  %268 = add nsw i32 %267, 7
  %269 = sdiv i32 %268, 8
  %270 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 4
  %271 = load i32, i32* %270, align 4
  %272 = load i32, i32* %8, align 4
  %273 = load i32, i32* %10, align 4
  %274 = icmp slt i32 %272, %273
  br i1 %274, label %275, label %304

275:                                              ; preds = %258
  %276 = icmp ult i32 %271, %269
  %277 = select i1 %276, i32 %271, i32 %269
  %278 = bitcast %class.CFX_DIBBase* %1 to i8* (%class.CFX_DIBBase*, i32)***
  %279 = bitcast i8* %27 to i8* (%class.CFX_DIBBase*, i32)***
  %280 = sext i32 %277 to i64
  br label %281

281:                                              ; preds = %275, %281
  %282 = phi i32 [ %272, %275 ], [ %301, %281 ]
  %283 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %278, align 8
  %284 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %283, i64 3
  %285 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %284, align 8
  %286 = call i8* %285(%class.CFX_DIBBase* %1, i32 %282) #13
  %287 = load i32, i32* %7, align 4
  %288 = load i16, i16* %40, align 8
  %289 = and i16 %288, 255
  %290 = zext i16 %289 to i32
  %291 = mul nsw i32 %287, %290
  %292 = sdiv i32 %291, 8
  %293 = sext i32 %292 to i64
  %294 = getelementptr inbounds i8, i8* %286, i64 %293
  %295 = load i32, i32* %8, align 4
  %296 = sub nsw i32 %282, %295
  %297 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %279, align 8
  %298 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %297, i64 3
  %299 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %298, align 8
  %300 = call i8* %299(%class.CFX_DIBBase* nonnull %44, i32 %296) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %300, i8* align 1 %294, i64 %280, i1 false)
  %301 = add nsw i32 %282, 1
  %302 = load i32, i32* %10, align 4
  %303 = icmp slt i32 %301, %302
  br i1 %303, label %281, label %304

304:                                              ; preds = %233, %281, %129, %258
  %305 = bitcast %"class.fxcrt::RetainPtr"* %0 to i64*
  store i64 %29, i64* %305, align 8
  br label %317

306:                                              ; preds = %26
  %307 = bitcast %"class.fxcrt::RetainPtr"* %0 to i64*
  store i64 0, i64* %307, align 8
  %308 = load i64, i64* %31, align 8
  %309 = add nsw i64 %308, -1
  store i64 %309, i64* %31, align 8
  %310 = icmp eq i64 %309, 0
  br i1 %310, label %311, label %317

311:                                              ; preds = %306
  %312 = bitcast i8* %27 to %"class.fxcrt::Retainable"*
  %313 = bitcast i8* %27 to void (%"class.fxcrt::Retainable"*)***
  %314 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %313, align 8
  %315 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %314, i64 1
  %316 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %315, align 8
  call void %316(%"class.fxcrt::Retainable"* nonnull %312) #13
  br label %317

317:                                              ; preds = %311, %306, %304, %24
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #13
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT*, %struct.FX_RECT* dereferenceable(16)) local_unnamed_addr #5

declare zeroext i1 @_ZN12CFX_DIBitmap6CreateEii12FXDIB_Format(%class.CFX_DIBitmap*, i32, i32, i16 zeroext) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11CFX_DIBBase10SetPaletteEN6pdfium4spanIKjEE(%class.CFX_DIBBase*, %"class.pdfium::span"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %11, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 1
  %8 = load i16, i16* %7, align 8
  %9 = and i16 %8, 255
  %10 = icmp ugt i16 %9, 8
  br i1 %10, label %11, label %17

11:                                               ; preds = %6, %2
  %12 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 6
  %13 = bitcast %"class.std::__1::vector"* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 6, i32 0, i32 1
  %16 = bitcast i32** %15 to i64*
  store i64 %14, i64* %16, align 8
  br label %57

17:                                               ; preds = %6
  %18 = zext i16 %9 to i32
  %19 = shl i32 1, %18
  %20 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 6
  %21 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %20, i64 0, i32 0, i32 0
  %22 = load i32*, i32** %21, align 8
  %23 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 6, i32 0, i32 1
  %24 = load i32*, i32** %23, align 8
  %25 = icmp eq i32* %22, %24
  br i1 %25, label %26, label %39

26:                                               ; preds = %17
  %27 = ptrtoint i32* %22 to i64
  %28 = ptrtoint i32* %24 to i64
  %29 = zext i32 %19 to i64
  %30 = sub i64 %28, %27
  %31 = ashr exact i64 %30, 2
  %32 = icmp ult i64 %31, %29
  br i1 %32, label %33, label %35

33:                                               ; preds = %26
  %34 = sub nsw i64 %29, %31
  tail call void @_ZNSt3__16vectorIj16FxAllocAllocatorIjEE8__appendEm(%"class.std::__1::vector"* %20, i64 %34) #13
  br label %39

35:                                               ; preds = %26
  %36 = icmp ugt i64 %31, %29
  br i1 %36, label %37, label %39

37:                                               ; preds = %35
  %38 = getelementptr inbounds i32, i32* %22, i64 %29
  store i32* %38, i32** %23, align 8
  br label %39

39:                                               ; preds = %37, %35, %33, %17
  %40 = icmp ult i32 %19, 256
  %41 = select i1 %40, i32 %19, i32 256
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %1, i64 0, i32 0, i32 0
  br label %44

44:                                               ; preds = %39, %49
  %45 = phi i64 [ 0, %39 ], [ %55, %49 ]
  %46 = load i64, i64* %3, align 8
  %47 = icmp ugt i64 %46, %45
  br i1 %47, label %49, label %48, !prof !19

48:                                               ; preds = %44
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !9
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !10
  unreachable

49:                                               ; preds = %44
  %50 = load i32*, i32** %43, align 8
  %51 = getelementptr inbounds i32, i32* %50, i64 %45
  %52 = load i32, i32* %51, align 4
  %53 = load i32*, i32** %21, align 8
  %54 = getelementptr inbounds i32, i32* %53, i64 %45
  store i32 %52, i32* %54, align 4
  %55 = add nuw nsw i64 %45, 1
  %56 = icmp ult i64 %55, %42
  br i1 %56, label %44, label %57

57:                                               ; preds = %49, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11CFX_DIBBase12SetAlphaMaskERKN5fxcrt9RetainPtrIS_EEPK7FX_RECT(%class.CFX_DIBBase* nocapture readonly, %"class.fxcrt::RetainPtr.9"* nocapture readonly dereferenceable(8), %struct.FX_RECT*) local_unnamed_addr #0 align 2 {
  %4 = alloca %struct.FX_RECT, align 4
  %5 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 1
  %6 = load i16, i16* %5, align 8
  %7 = and i16 %6, 512
  %8 = icmp eq i16 %7, 0
  %9 = icmp eq i16 %6, 544
  %10 = or i1 %9, %8
  br i1 %10, label %90, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.fxcrt::RetainPtr.9", %"class.fxcrt::RetainPtr.9"* %1, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %12, align 8
  %14 = icmp eq %class.CFX_DIBBase* %13, null
  br i1 %14, label %15, label %18

15:                                               ; preds = %11
  %16 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %17 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %16, align 8
  tail call void @_ZN12CFX_DIBitmap5ClearEj(%class.CFX_DIBitmap* %17, i32 -16777216) #13
  br label %90

18:                                               ; preds = %11
  %19 = bitcast %struct.FX_RECT* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #13
  %20 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %4, i64 0, i32 0
  %21 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %4, i64 0, i32 1
  %22 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %4, i64 0, i32 2
  %23 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %4, i64 0, i32 3
  %24 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %13, i64 0, i32 2
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %13, i64 0, i32 3
  %27 = load i32, i32* %26, align 8
  store i32 0, i32* %20, align 4
  store i32 0, i32* %21, align 4
  store i32 %25, i32* %22, align 4
  store i32 %27, i32* %23, align 4
  %28 = icmp eq %struct.FX_RECT* %2, null
  br i1 %28, label %47, label %29

29:                                               ; preds = %18
  call void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT* nonnull %4, %struct.FX_RECT* nonnull dereferenceable(16) %2) #13
  %30 = load i32, i32* %22, align 4
  %31 = load i32, i32* %20, align 4
  %32 = icmp sgt i32 %30, %31
  br i1 %32, label %33, label %88

33:                                               ; preds = %29
  %34 = load i32, i32* %23, align 4
  %35 = load i32, i32* %21, align 4
  %36 = icmp sgt i32 %34, %35
  br i1 %36, label %37, label %88

37:                                               ; preds = %33
  %38 = sub nsw i32 %30, %31
  %39 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 2
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %38, %40
  br i1 %41, label %42, label %88

42:                                               ; preds = %37
  %43 = sub nsw i32 %34, %35
  %44 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 3
  %45 = load i32, i32* %44, align 8
  %46 = icmp eq i32 %43, %45
  br i1 %46, label %55, label %88

47:                                               ; preds = %18
  %48 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 2
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %25, %49
  br i1 %50, label %51, label %88

51:                                               ; preds = %47
  %52 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 3
  %53 = load i32, i32* %52, align 8
  %54 = icmp eq i32 %27, %53
  br i1 %54, label %55, label %88

55:                                               ; preds = %42, %51
  %56 = phi i32 [ %43, %42 ], [ %27, %51 ]
  %57 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 3
  %58 = icmp sgt i32 %56, 0
  br i1 %58, label %59, label %88

59:                                               ; preds = %55
  %60 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  br label %61

61:                                               ; preds = %59, %61
  %62 = phi i32 [ 0, %59 ], [ %85, %61 ]
  %63 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %60, align 8
  %64 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %63, i64 0, i32 0
  %65 = bitcast %class.CFX_DIBitmap* %63 to i8* (%class.CFX_DIBBase*, i32)***
  %66 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %65, align 8
  %67 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %66, i64 3
  %68 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %67, align 8
  %69 = call i8* %68(%class.CFX_DIBBase* %64, i32 %62) #13
  %70 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %12, align 8
  %71 = load i32, i32* %21, align 4
  %72 = add nsw i32 %71, %62
  %73 = bitcast %class.CFX_DIBBase* %70 to i8* (%class.CFX_DIBBase*, i32)***
  %74 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %73, align 8
  %75 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %74, i64 3
  %76 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %75, align 8
  %77 = call i8* %76(%class.CFX_DIBBase* %70, i32 %72) #13
  %78 = load i32, i32* %20, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i8, i8* %77, i64 %79
  %81 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %60, align 8
  %82 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %81, i64 0, i32 0, i32 4
  %83 = load i32, i32* %82, align 4
  %84 = zext i32 %83 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %69, i8* align 1 %80, i64 %84, i1 false)
  %85 = add nuw nsw i32 %62, 1
  %86 = load i32, i32* %57, align 8
  %87 = icmp slt i32 %85, %86
  br i1 %87, label %61, label %88

88:                                               ; preds = %61, %55, %33, %29, %47, %51, %37, %42
  %89 = phi i1 [ false, %42 ], [ false, %37 ], [ false, %33 ], [ false, %51 ], [ false, %47 ], [ false, %29 ], [ true, %55 ], [ true, %61 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #13
  br label %90

90:                                               ; preds = %3, %88, %15
  %91 = phi i1 [ %89, %88 ], [ true, %15 ], [ false, %3 ]
  ret i1 %91
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11CFX_DIBBase12BuildPaletteEv(%class.CFX_DIBBase*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 6, i32 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 6, i32 0, i32 1
  %5 = load i32*, i32** %4, align 8
  %6 = icmp eq i32* %3, %5
  %7 = ptrtoint i32* %5 to i64
  %8 = ptrtoint i32* %3 to i64
  br i1 %6, label %9, label %53

9:                                                ; preds = %1
  %10 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 1
  %11 = load i16, i16* %10, align 8
  %12 = trunc i16 %11 to i8
  switch i8 %12, label %53 [
    i8 1, label %13
    i8 8, label %15
  ]

13:                                               ; preds = %9
  %14 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 6
  tail call void @_ZNSt3__16vectorIj16FxAllocAllocatorIjEE6assignIPKjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_(%"class.std::__1::vector"* %14, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.ref.tmp, i64 0, i64 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.ref.tmp, i64 1, i64 0)) #13
  br label %53

15:                                               ; preds = %9
  %16 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 6
  %17 = sub i64 %7, %8
  %18 = ashr exact i64 %17, 2
  %19 = icmp ult i64 %18, 256
  br i1 %19, label %20, label %22

20:                                               ; preds = %15
  %21 = sub nuw nsw i64 256, %18
  tail call void @_ZNSt3__16vectorIj16FxAllocAllocatorIjEE8__appendEm(%"class.std::__1::vector"* %16, i64 %21) #13
  br label %26

22:                                               ; preds = %15
  %23 = icmp eq i64 %17, 1024
  br i1 %23, label %26, label %24

24:                                               ; preds = %22
  %25 = getelementptr inbounds i32, i32* %3, i64 256
  store i32* %25, i32** %4, align 8
  br label %26

26:                                               ; preds = %22, %20, %24
  %27 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %16, i64 0, i32 0, i32 0
  br label %28

28:                                               ; preds = %28, %26
  %29 = phi i64 [ 0, %26 ], [ %50, %28 ]
  %30 = phi i32 [ 0, %26 ], [ %51, %28 ]
  %31 = shl i32 %30, 8
  %32 = trunc i64 %29 to i32
  %33 = or i32 %31, %32
  %34 = trunc i64 %29 to i32
  %35 = shl i32 %34, 16
  %36 = or i32 %33, %35
  %37 = or i32 %36, -16777216
  %38 = load i32*, i32** %27, align 8
  %39 = getelementptr inbounds i32, i32* %38, i64 %29
  store i32 %37, i32* %39, align 4
  %40 = or i64 %29, 1
  %41 = shl i32 %30, 8
  %42 = trunc i64 %40 to i32
  %43 = or i32 %41, %42
  %44 = trunc i64 %40 to i32
  %45 = shl i32 %44, 16
  %46 = or i32 %43, %45
  %47 = or i32 %46, -16776960
  %48 = load i32*, i32** %27, align 8
  %49 = getelementptr inbounds i32, i32* %48, i64 %40
  store i32 %47, i32* %49, align 4
  %50 = add nuw nsw i64 %29, 2
  %51 = add nuw nsw i32 %30, 2
  %52 = icmp eq i64 %50, 256
  br i1 %52, label %53, label %28

53:                                               ; preds = %28, %1, %9, %13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11CFX_DIBBase14BuildAlphaMaskEv(%class.CFX_DIBBase* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 5
  %3 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %2, i64 0, i32 0, i32 0, i32 0, i32 0
  %4 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %3, align 8
  %5 = icmp eq %class.CFX_DIBitmap* %4, null
  br i1 %5, label %6, label %62

6:                                                ; preds = %1
  %7 = tail call i8* @_Znwm(i64 80) #15, !noalias !20
  %8 = bitcast i8* %7 to %class.CFX_DIBitmap*
  tail call void @_ZN12CFX_DIBitmapC1Ev(%class.CFX_DIBitmap* nonnull %8) #13, !noalias !20
  %9 = ptrtoint i8* %7 to i64
  %10 = getelementptr inbounds i8, i8* %7, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 8, !noalias !20
  %13 = add nsw i64 %12, 1
  store i64 %13, i64* %11, align 8, !noalias !20
  %14 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %3, align 8
  %15 = bitcast %"class.fxcrt::RetainPtr"* %2 to i64*
  store i64 %9, i64* %15, align 8
  %16 = icmp eq %class.CFX_DIBitmap* %14, null
  br i1 %16, label %28, label %17

17:                                               ; preds = %6
  %18 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %14, i64 0, i32 0, i32 0, i32 1
  %19 = load i64, i64* %18, align 8
  %20 = add nsw i64 %19, -1
  store i64 %20, i64* %18, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %22, label %28

22:                                               ; preds = %17
  %23 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %14, i64 0, i32 0, i32 0
  %24 = bitcast %class.CFX_DIBitmap* %14 to void (%"class.fxcrt::Retainable"*)***
  %25 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %25, i64 1
  %27 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %26, align 8
  tail call void %27(%"class.fxcrt::Retainable"* nonnull %23) #13
  br label %28

28:                                               ; preds = %22, %17, %6
  %29 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %3, align 8
  %30 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 2
  %31 = load i32, i32* %30, align 4
  %32 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 3
  %33 = load i32, i32* %32, align 8
  %34 = tail call zeroext i1 @_ZN12CFX_DIBitmap6CreateEii12FXDIB_Format(%class.CFX_DIBitmap* %29, i32 %31, i32 %33, i16 zeroext 264) #13
  %35 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %3, align 8
  br i1 %34, label %49, label %36

36:                                               ; preds = %28
  store %class.CFX_DIBitmap* null, %class.CFX_DIBitmap** %3, align 8
  %37 = icmp eq %class.CFX_DIBitmap* %35, null
  br i1 %37, label %62, label %38

38:                                               ; preds = %36
  %39 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %35, i64 0, i32 0, i32 0, i32 1
  %40 = load i64, i64* %39, align 8
  %41 = add nsw i64 %40, -1
  store i64 %41, i64* %39, align 8
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %43, label %62

43:                                               ; preds = %38
  %44 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %35, i64 0, i32 0, i32 0
  %45 = bitcast %class.CFX_DIBitmap* %35 to void (%"class.fxcrt::Retainable"*)***
  %46 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %45, align 8
  %47 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %46, i64 1
  %48 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %47, align 8
  tail call void %48(%"class.fxcrt::Retainable"* nonnull %44) #13
  br label %62

49:                                               ; preds = %28
  %50 = bitcast %class.CFX_DIBitmap* %35 to i8* (%class.CFX_DIBitmap*)***
  %51 = load i8* (%class.CFX_DIBitmap*)**, i8* (%class.CFX_DIBitmap*)*** %50, align 8
  %52 = getelementptr inbounds i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %51, i64 2
  %53 = load i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %52, align 8
  %54 = tail call i8* %53(%class.CFX_DIBitmap* %35) #13
  %55 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %3, align 8
  %56 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %55, i64 0, i32 0, i32 3
  %57 = load i32, i32* %56, align 8
  %58 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %55, i64 0, i32 0, i32 4
  %59 = load i32, i32* %58, align 4
  %60 = mul i32 %59, %57
  %61 = zext i32 %60 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %54, i8 -1, i64 %61, i1 false)
  br label %62

62:                                               ; preds = %1, %43, %38, %36, %49
  %63 = phi i1 [ true, %49 ], [ true, %1 ], [ false, %36 ], [ false, %38 ], [ false, %43 ]
  ret i1 %63
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK11CFX_DIBBase22GetRequiredPaletteSizeEv(%class.CFX_DIBBase* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 1
  %3 = load i16, i16* %2, align 8
  %4 = and i16 %3, 256
  %5 = icmp eq i16 %4, 0
  br i1 %5, label %6, label %12

6:                                                ; preds = %1
  %7 = and i16 %3, 255
  %8 = icmp eq i16 %7, 8
  %9 = select i1 %8, i64 256, i64 0
  %10 = icmp eq i16 %7, 1
  %11 = select i1 %10, i64 2, i64 %9
  br label %12

12:                                               ; preds = %1, %6
  %13 = phi i64 [ 0, %1 ], [ %11, %6 ]
  ret i64 %13
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK11CFX_DIBBase14GetPaletteArgbEi(%class.CFX_DIBBase* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 6, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 6, i32 0, i32 1
  %6 = load i32*, i32** %5, align 8
  %7 = icmp eq i32* %4, %6
  br i1 %7, label %19, label %8

8:                                                ; preds = %2
  %9 = ptrtoint i32* %6 to i64
  %10 = ptrtoint i32* %4 to i64
  %11 = sub i64 %9, %10
  %12 = ashr exact i64 %11, 2
  %13 = sext i32 %1 to i64
  %14 = icmp ugt i64 %12, %13
  br i1 %14, label %16, label %15, !prof !19

15:                                               ; preds = %8
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !9
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !10
  unreachable

16:                                               ; preds = %8
  %17 = getelementptr inbounds i32, i32* %4, i64 %13
  %18 = load i32, i32* %17, align 4
  br label %33

19:                                               ; preds = %2
  %20 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 1
  %21 = load i16, i16* %20, align 8
  %22 = and i16 %21, 255
  %23 = icmp eq i16 %22, 1
  br i1 %23, label %24, label %27

24:                                               ; preds = %19
  %25 = icmp eq i32 %1, 0
  %26 = select i1 %25, i32 -16777216, i32 -1
  br label %33

27:                                               ; preds = %19
  %28 = shl i32 %1, 16
  %29 = shl i32 %1, 8
  %30 = or i32 %29, %1
  %31 = or i32 %30, %28
  %32 = or i32 %31, -16777216
  br label %33

33:                                               ; preds = %27, %24, %16
  %34 = phi i32 [ %18, %16 ], [ %26, %24 ], [ %32, %27 ]
  ret i32 %34
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11CFX_DIBBase14SetPaletteArgbEij(%class.CFX_DIBBase*, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 6, i32 0, i32 0
  %5 = load i32*, i32** %4, align 8
  %6 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 6, i32 0, i32 1
  %7 = load i32*, i32** %6, align 8
  %8 = icmp eq i32* %5, %7
  %9 = ptrtoint i32* %7 to i64
  %10 = ptrtoint i32* %5 to i64
  br i1 %8, label %11, label %53

11:                                               ; preds = %3
  %12 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 1
  %13 = load i16, i16* %12, align 8
  %14 = trunc i16 %13 to i8
  switch i8 %14, label %53 [
    i8 1, label %15
    i8 8, label %17
  ]

15:                                               ; preds = %11
  %16 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 6
  tail call void @_ZNSt3__16vectorIj16FxAllocAllocatorIjEE6assignIPKjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_(%"class.std::__1::vector"* %16, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.ref.tmp, i64 0, i64 0), i32* getelementptr inbounds ([2 x i32], [2 x i32]* @.ref.tmp, i64 1, i64 0)) #13
  br label %53

17:                                               ; preds = %11
  %18 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 6
  %19 = sub i64 %9, %10
  %20 = ashr exact i64 %19, 2
  %21 = icmp ult i64 %20, 256
  br i1 %21, label %22, label %24

22:                                               ; preds = %17
  %23 = sub nuw nsw i64 256, %20
  tail call void @_ZNSt3__16vectorIj16FxAllocAllocatorIjEE8__appendEm(%"class.std::__1::vector"* %18, i64 %23) #13
  br label %28

24:                                               ; preds = %17
  %25 = icmp eq i64 %19, 1024
  br i1 %25, label %28, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds i32, i32* %5, i64 256
  store i32* %27, i32** %6, align 8
  br label %28

28:                                               ; preds = %26, %24, %22
  %29 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %18, i64 0, i32 0, i32 0
  br label %30

30:                                               ; preds = %30, %28
  %31 = phi i64 [ 0, %28 ], [ %50, %30 ]
  %32 = phi i32 [ 0, %28 ], [ %51, %30 ]
  %33 = shl i32 %32, 8
  %34 = trunc i64 %31 to i32
  %35 = shl i32 %34, 16
  %36 = or i32 %33, %34
  %37 = or i32 %36, %35
  %38 = or i32 %37, -16777216
  %39 = load i32*, i32** %29, align 8
  %40 = getelementptr inbounds i32, i32* %39, i64 %31
  store i32 %38, i32* %40, align 4
  %41 = or i64 %31, 1
  %42 = shl i32 %32, 8
  %43 = trunc i64 %41 to i32
  %44 = shl i32 %43, 16
  %45 = or i32 %42, %43
  %46 = or i32 %45, %44
  %47 = or i32 %46, -16776960
  %48 = load i32*, i32** %29, align 8
  %49 = getelementptr inbounds i32, i32* %48, i64 %41
  store i32 %47, i32* %49, align 4
  %50 = add nuw nsw i64 %31, 2
  %51 = add nuw nsw i32 %32, 2
  %52 = icmp eq i64 %50, 256
  br i1 %52, label %53, label %30

53:                                               ; preds = %30, %3, %11, %15
  %54 = sext i32 %1 to i64
  %55 = load i32*, i32** %4, align 8
  %56 = getelementptr inbounds i32, i32* %55, i64 %54
  store i32 %2, i32* %56, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK11CFX_DIBBase11FindPaletteEj(%class.CFX_DIBBase* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 6, i32 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 6, i32 0, i32 1
  %6 = load i32*, i32** %5, align 8
  %7 = icmp eq i32* %4, %6
  %8 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = and i16 %9, 255
  br i1 %7, label %32, label %11

11:                                               ; preds = %2
  %12 = ptrtoint i32* %6 to i64
  %13 = ptrtoint i32* %4 to i64
  %14 = sub i64 %12, %13
  %15 = ashr exact i64 %14, 2
  %16 = icmp eq i16 %10, 31
  br i1 %16, label %40, label %17

17:                                               ; preds = %11
  %18 = zext i16 %10 to i32
  %19 = shl i32 1, %18
  %20 = sext i32 %19 to i64
  br label %21

21:                                               ; preds = %17, %29
  %22 = phi i64 [ 0, %17 ], [ %30, %29 ]
  %23 = icmp eq i64 %22, %15
  br i1 %23, label %24, label %25, !prof !8

24:                                               ; preds = %21
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !9
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !10
  unreachable

25:                                               ; preds = %21
  %26 = getelementptr inbounds i32, i32* %4, i64 %22
  %27 = load i32, i32* %26, align 4
  %28 = icmp eq i32 %27, %1
  br i1 %28, label %38, label %29

29:                                               ; preds = %25
  %30 = add nuw nsw i64 %22, 1
  %31 = icmp slt i64 %30, %20
  br i1 %31, label %21, label %40

32:                                               ; preds = %2
  %33 = icmp eq i16 %10, 1
  %34 = and i32 %1, 255
  br i1 %33, label %35, label %40

35:                                               ; preds = %32
  %36 = icmp eq i32 %34, 255
  %37 = zext i1 %36 to i32
  br label %40

38:                                               ; preds = %25
  %39 = trunc i64 %22 to i32
  br label %40

40:                                               ; preds = %29, %38, %11, %32, %35
  %41 = phi i32 [ %37, %35 ], [ %34, %32 ], [ -1, %11 ], [ %39, %38 ], [ -1, %29 ]
  ret i32 %41
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK11CFX_DIBBase14GetOverlapRectERiS0_S0_S0_iiS0_S0_PK11CFX_ClipRgn(%class.CFX_DIBBase* nocapture readonly, i32* nocapture dereferenceable(4), i32* nocapture dereferenceable(4), i32* nocapture dereferenceable(4), i32* nocapture dereferenceable(4), i32, i32, i32* nocapture dereferenceable(4), i32* nocapture dereferenceable(4), %class.CFX_ClipRgn*) local_unnamed_addr #0 align 2 {
  %11 = alloca %struct.FX_RECT, align 4
  %12 = alloca %struct.FX_RECT, align 4
  %13 = alloca %struct.FX_RECT, align 4
  %14 = alloca %struct.FX_RECT, align 4
  %15 = load i32, i32* %3, align 4
  %16 = icmp eq i32 %15, 0
  %17 = load i32, i32* %4, align 4
  %18 = icmp eq i32 %17, 0
  %19 = or i1 %16, %18
  br i1 %19, label %123, label %20

20:                                               ; preds = %10
  %21 = load i32, i32* %1, align 4
  %22 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = icmp sgt i32 %21, %23
  br i1 %24, label %123, label %25

25:                                               ; preds = %20
  %26 = load i32, i32* %2, align 4
  %27 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 3
  %28 = load i32, i32* %27, align 8
  %29 = icmp sgt i32 %26, %28
  br i1 %29, label %123, label %30

30:                                               ; preds = %25
  %31 = load i32, i32* %7, align 4
  %32 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %31, i32 %15) #13
  %33 = extractvalue { i32, i1 } %32, 1
  %34 = extractvalue { i32, i1 } %32, 0
  br i1 %33, label %123, label %35

35:                                               ; preds = %30
  %36 = load i32, i32* %8, align 4
  %37 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %36, i32 %17) #13
  %38 = extractvalue { i32, i1 } %37, 1
  br i1 %38, label %123, label %39

39:                                               ; preds = %35
  %40 = extractvalue { i32, i1 } %37, 0
  %41 = bitcast %struct.FX_RECT* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %41) #13
  %42 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %11, i64 0, i32 0
  %43 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %11, i64 0, i32 1
  %44 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %11, i64 0, i32 2
  %45 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %11, i64 0, i32 3
  store i32 %31, i32* %42, align 4
  store i32 %36, i32* %43, align 4
  store i32 %34, i32* %44, align 4
  store i32 %40, i32* %45, align 4
  %46 = bitcast %struct.FX_RECT* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %46) #13
  %47 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %12, i64 0, i32 0
  %48 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %12, i64 0, i32 1
  %49 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %12, i64 0, i32 2
  %50 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %12, i64 0, i32 3
  store i32 0, i32* %47, align 4
  store i32 0, i32* %48, align 4
  store i32 %5, i32* %49, align 4
  store i32 %6, i32* %50, align 4
  call void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT* nonnull %11, %struct.FX_RECT* nonnull dereferenceable(16) %12) #13
  %51 = load i32, i32* %1, align 4
  %52 = load i32, i32* %7, align 4
  %53 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %51, i32 %52) #13
  %54 = extractvalue { i32, i1 } %53, 1
  %55 = extractvalue { i32, i1 } %53, 0
  br i1 %54, label %121, label %56

56:                                               ; preds = %39
  %57 = load i32, i32* %2, align 4
  %58 = load i32, i32* %8, align 4
  %59 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %57, i32 %58) #13
  %60 = extractvalue { i32, i1 } %59, 1
  %61 = extractvalue { i32, i1 } %59, 0
  br i1 %60, label %121, label %62

62:                                               ; preds = %56
  %63 = load i32, i32* %42, align 4
  %64 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %55, i32 %63) #13
  %65 = extractvalue { i32, i1 } %64, 1
  %66 = extractvalue { i32, i1 } %64, 0
  br i1 %65, label %121, label %67

67:                                               ; preds = %62
  %68 = load i32, i32* %43, align 4
  %69 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %61, i32 %68) #13
  %70 = extractvalue { i32, i1 } %69, 1
  %71 = extractvalue { i32, i1 } %69, 0
  br i1 %70, label %121, label %72

72:                                               ; preds = %67
  %73 = load i32, i32* %44, align 4
  %74 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %55, i32 %73) #13
  %75 = extractvalue { i32, i1 } %74, 1
  %76 = extractvalue { i32, i1 } %74, 0
  br i1 %75, label %121, label %77

77:                                               ; preds = %72
  %78 = load i32, i32* %45, align 4
  %79 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %61, i32 %78) #13
  %80 = extractvalue { i32, i1 } %79, 1
  br i1 %80, label %121, label %81

81:                                               ; preds = %77
  %82 = extractvalue { i32, i1 } %79, 0
  %83 = bitcast %struct.FX_RECT* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %83) #13
  %84 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %13, i64 0, i32 0
  %85 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %13, i64 0, i32 1
  %86 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %13, i64 0, i32 2
  %87 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %13, i64 0, i32 3
  store i32 %66, i32* %84, align 4
  store i32 %71, i32* %85, align 4
  store i32 %76, i32* %86, align 4
  store i32 %82, i32* %87, align 4
  %88 = bitcast %struct.FX_RECT* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %88) #13
  %89 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %14, i64 0, i32 0
  %90 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %14, i64 0, i32 1
  %91 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %14, i64 0, i32 2
  %92 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %14, i64 0, i32 3
  %93 = load i32, i32* %22, align 4
  %94 = load i32, i32* %27, align 8
  store i32 0, i32* %89, align 4
  store i32 0, i32* %90, align 4
  store i32 %93, i32* %91, align 4
  store i32 %94, i32* %92, align 4
  call void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT* nonnull %13, %struct.FX_RECT* nonnull dereferenceable(16) %14) #13
  %95 = icmp eq %class.CFX_ClipRgn* %9, null
  br i1 %95, label %98, label %96

96:                                               ; preds = %81
  %97 = getelementptr inbounds %class.CFX_ClipRgn, %class.CFX_ClipRgn* %9, i64 0, i32 1
  call void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT* nonnull %13, %struct.FX_RECT* dereferenceable(16) %97) #13
  br label %98

98:                                               ; preds = %81, %96
  %99 = load i32, i32* %84, align 4
  store i32 %99, i32* %1, align 4
  %100 = load i32, i32* %85, align 4
  store i32 %100, i32* %2, align 4
  %101 = load i32, i32* %1, align 4
  %102 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %101, i32 %55) #13
  %103 = extractvalue { i32, i1 } %102, 1
  br i1 %103, label %119, label %104

104:                                              ; preds = %98
  %105 = extractvalue { i32, i1 } %102, 0
  store i32 %105, i32* %7, align 4
  %106 = load i32, i32* %2, align 4
  %107 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %106, i32 %61) #13
  %108 = extractvalue { i32, i1 } %107, 1
  br i1 %108, label %119, label %109

109:                                              ; preds = %104
  %110 = extractvalue { i32, i1 } %107, 0
  store i32 %110, i32* %8, align 4
  %111 = load i32, i32* %86, align 4
  %112 = icmp sle i32 %111, %99
  %113 = load i32, i32* %87, align 4
  %114 = icmp sle i32 %113, %100
  %115 = or i1 %112, %114
  br i1 %115, label %119, label %116

116:                                              ; preds = %109
  %117 = sub nsw i32 %111, %99
  store i32 %117, i32* %3, align 4
  %118 = sub nsw i32 %113, %100
  store i32 %118, i32* %4, align 4
  br label %119

119:                                              ; preds = %104, %98, %109, %116
  %120 = phi i1 [ false, %98 ], [ true, %116 ], [ false, %104 ], [ false, %109 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %88) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %83) #13
  br label %121

121:                                              ; preds = %77, %72, %67, %62, %56, %39, %119
  %122 = phi i1 [ false, %39 ], [ false, %56 ], [ false, %62 ], [ false, %67 ], [ false, %72 ], [ %120, %119 ], [ false, %77 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %46) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %41) #13
  br label %123

123:                                              ; preds = %35, %30, %121, %20, %25, %10
  %124 = phi i1 [ false, %10 ], [ false, %25 ], [ false, %20 ], [ false, %30 ], [ %122, %121 ], [ false, %35 ]
  ret i1 %124
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK11CFX_DIBBase10GetPaletteEPji(%class.CFX_DIBBase* nocapture readonly, i32* nocapture, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 1
  %5 = load i16, i16* %4, align 8
  %6 = and i16 %5, 255
  %7 = icmp eq i16 %6, 1
  %8 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 6, i32 0, i32 0
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 6, i32 0, i32 1
  %11 = load i32*, i32** %10, align 8
  %12 = icmp ne i32* %9, %11
  %13 = ptrtoint i32* %9 to i64
  %14 = ptrtoint i32* %11 to i64
  br i1 %7, label %15, label %45

15:                                               ; preds = %3
  br i1 %12, label %18, label %16

16:                                               ; preds = %15
  %17 = shl i32 %2, 24
  br label %23

18:                                               ; preds = %15
  %19 = load i32, i32* %9, align 4
  %20 = and i32 %19, 16777215
  %21 = shl i32 %2, 24
  %22 = or i32 %20, %21
  br label %23

23:                                               ; preds = %16, %18
  %24 = phi i32 [ %17, %16 ], [ %22, %18 ]
  %25 = phi i32 [ %17, %16 ], [ %21, %18 ]
  store i32 %24, i32* %1, align 4
  %26 = load i32*, i32** %8, align 8
  %27 = load i32*, i32** %10, align 8
  %28 = icmp eq i32* %26, %27
  br i1 %28, label %42, label %29

29:                                               ; preds = %23
  %30 = ptrtoint i32* %27 to i64
  %31 = ptrtoint i32* %26 to i64
  %32 = sub i64 %30, %31
  %33 = ashr exact i64 %32, 2
  %34 = icmp ugt i64 %33, 1
  br i1 %34, label %36, label %35, !prof !19

35:                                               ; preds = %29
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !9
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !10
  unreachable

36:                                               ; preds = %29
  %37 = getelementptr inbounds i32, i32* %26, i64 1
  %38 = load i32, i32* %37, align 4
  %39 = and i32 %38, 16777215
  %40 = or i32 %39, %25
  %41 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %40, i32* %41, align 4
  br label %95

42:                                               ; preds = %23
  %43 = or i32 %25, 16777215
  %44 = getelementptr inbounds i32, i32* %1, i64 1
  store i32 %43, i32* %44, align 4
  br label %95

45:                                               ; preds = %3
  br i1 %12, label %79, label %46

46:                                               ; preds = %45
  %47 = shl i32 %2, 24
  %48 = insertelement <4 x i32> undef, i32 %47, i32 0
  %49 = shufflevector <4 x i32> %48, <4 x i32> undef, <4 x i32> zeroinitializer
  %50 = insertelement <4 x i32> undef, i32 %47, i32 0
  %51 = shufflevector <4 x i32> %50, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %52

52:                                               ; preds = %52, %46
  %53 = phi i64 [ 0, %46 ], [ %74, %52 ]
  %54 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %46 ], [ %75, %52 ]
  %55 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %46 ], [ %76, %52 ]
  %56 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %46 ], [ %77, %52 ]
  %57 = add <4 x i32> %54, <i32 4, i32 4, i32 4, i32 4>
  %58 = or <4 x i32> %49, %54
  %59 = or <4 x i32> %51, %57
  %60 = shl <4 x i32> %55, <i32 16, i32 16, i32 16, i32 16>
  %61 = shl <4 x i32> %55, <i32 16, i32 16, i32 16, i32 16>
  %62 = add <4 x i32> %61, <i32 262144, i32 262144, i32 262144, i32 262144>
  %63 = or <4 x i32> %58, %60
  %64 = or <4 x i32> %59, %62
  %65 = shl <4 x i32> %56, <i32 8, i32 8, i32 8, i32 8>
  %66 = shl <4 x i32> %56, <i32 8, i32 8, i32 8, i32 8>
  %67 = add <4 x i32> %66, <i32 1024, i32 1024, i32 1024, i32 1024>
  %68 = or <4 x i32> %63, %65
  %69 = or <4 x i32> %64, %67
  %70 = getelementptr inbounds i32, i32* %1, i64 %53
  %71 = bitcast i32* %70 to <4 x i32>*
  store <4 x i32> %68, <4 x i32>* %71, align 4
  %72 = getelementptr inbounds i32, i32* %70, i64 4
  %73 = bitcast i32* %72 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %73, align 4
  %74 = add i64 %53, 8
  %75 = add <4 x i32> %54, <i32 8, i32 8, i32 8, i32 8>
  %76 = add <4 x i32> %55, <i32 8, i32 8, i32 8, i32 8>
  %77 = add <4 x i32> %56, <i32 8, i32 8, i32 8, i32 8>
  %78 = icmp eq i64 %74, 256
  br i1 %78, label %95, label %52, !llvm.loop !23

79:                                               ; preds = %45
  %80 = sub i64 %14, %13
  %81 = ashr exact i64 %80, 2
  %82 = shl i32 %2, 24
  br label %83

83:                                               ; preds = %96, %79
  %84 = phi i64 [ 0, %79 ], [ %102, %96 ]
  %85 = icmp eq i64 %84, %81
  br i1 %85, label %86, label %87, !prof !8

86:                                               ; preds = %87, %83
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !9
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !10
  unreachable

87:                                               ; preds = %83
  %88 = getelementptr inbounds i32, i32* %9, i64 %84
  %89 = load i32, i32* %88, align 4
  %90 = and i32 %89, 16777215
  %91 = or i32 %90, %82
  %92 = getelementptr inbounds i32, i32* %1, i64 %84
  store i32 %91, i32* %92, align 4
  %93 = or i64 %84, 1
  %94 = icmp eq i64 %93, %81
  br i1 %94, label %86, label %96, !prof !8

95:                                               ; preds = %52, %96, %42, %36
  ret void

96:                                               ; preds = %87
  %97 = getelementptr inbounds i32, i32* %9, i64 %93
  %98 = load i32, i32* %97, align 4
  %99 = and i32 %98, 16777215
  %100 = or i32 %99, %82
  %101 = getelementptr inbounds i32, i32* %1, i64 %93
  store i32 %100, i32* %101, align 4
  %102 = add nuw nsw i64 %84, 2
  %103 = icmp eq i64 %102, 256
  br i1 %103, label %95, label %83
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK11CFX_DIBBase17GetAlphaMaskPitchEv(%class.CFX_DIBBase* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %3 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %2, align 8
  %4 = icmp eq %class.CFX_DIBitmap* %3, null
  br i1 %4, label %8, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %3, i64 0, i32 0, i32 4
  %7 = load i32, i32* %6, align 4
  br label %8

8:                                                ; preds = %1, %5
  %9 = phi i32 [ %7, %5 ], [ 0, %1 ]
  ret i32 %9
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZNK11CFX_DIBBase20GetAlphaMaskScanlineEi(%class.CFX_DIBBase* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %4 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %3, align 8
  %5 = icmp eq %class.CFX_DIBitmap* %4, null
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = bitcast %class.CFX_DIBitmap* %4 to i8* (%class.CFX_DIBitmap*, i32)***
  %8 = load i8* (%class.CFX_DIBitmap*, i32)**, i8* (%class.CFX_DIBitmap*, i32)*** %7, align 8
  %9 = getelementptr inbounds i8* (%class.CFX_DIBitmap*, i32)*, i8* (%class.CFX_DIBitmap*, i32)** %8, i64 3
  %10 = load i8* (%class.CFX_DIBitmap*, i32)*, i8* (%class.CFX_DIBitmap*, i32)** %9, align 8
  %11 = tail call i8* %10(%class.CFX_DIBitmap* nonnull %4, i32 %1) #13
  br label %12

12:                                               ; preds = %2, %6
  %13 = phi i8* [ %11, %6 ], [ null, %2 ]
  ret i8* %13
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN11CFX_DIBBase28GetWritableAlphaMaskScanlineEi(%class.CFX_DIBBase* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %4 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %3, align 8
  %5 = icmp eq %class.CFX_DIBitmap* %4, null
  br i1 %5, label %13, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %4, i64 0, i32 0
  %8 = bitcast %class.CFX_DIBitmap* %4 to i8* (%class.CFX_DIBBase*, i32)***
  %9 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %8, align 8
  %10 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %9, i64 3
  %11 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %10, align 8
  %12 = tail call i8* %11(%class.CFX_DIBBase* %7, i32 %1) #13
  br label %13

13:                                               ; preds = %2, %6
  %14 = phi i8* [ %12, %6 ], [ null, %2 ]
  ret i8* %14
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @_ZN11CFX_DIBBase18GetAlphaMaskBufferEv(%class.CFX_DIBBase* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %3 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %2, align 8
  %4 = icmp eq %class.CFX_DIBitmap* %3, null
  br i1 %4, label %11, label %5

5:                                                ; preds = %1
  %6 = bitcast %class.CFX_DIBitmap* %3 to i8* (%class.CFX_DIBitmap*)***
  %7 = load i8* (%class.CFX_DIBitmap*)**, i8* (%class.CFX_DIBitmap*)*** %6, align 8
  %8 = getelementptr inbounds i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %7, i64 2
  %9 = load i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %8, align 8
  %10 = tail call i8* %9(%class.CFX_DIBitmap* nonnull %3) #13
  br label %11

11:                                               ; preds = %1, %5
  %12 = phi i8* [ %10, %5 ], [ null, %1 ]
  ret i8* %12
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN11CFX_DIBBase12GetAlphaMaskEv(%"class.fxcrt::RetainPtr"* noalias nocapture sret, %class.CFX_DIBBase* nocapture readonly) local_unnamed_addr #7 align 2 {
  %3 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %4 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %3, align 8
  %5 = ptrtoint %class.CFX_DIBitmap* %4 to i64
  %6 = bitcast %"class.fxcrt::RetainPtr"* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = icmp eq %class.CFX_DIBitmap* %4, null
  br i1 %7, label %12, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %4, i64 0, i32 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = add nsw i64 %10, 1
  store i64 %11, i64* %9, align 8
  br label %12

12:                                               ; preds = %2, %8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK11CFX_DIBBase14CloneAlphaMaskEv(%"class.fxcrt::RetainPtr"* noalias nocapture sret, %class.CFX_DIBBase*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 3
  %6 = load i32, i32* %5, align 8
  %7 = tail call i8* @_Znwm(i64 80) #15, !noalias !24
  %8 = bitcast i8* %7 to %class.CFX_DIBitmap*
  tail call void @_ZN12CFX_DIBitmapC1Ev(%class.CFX_DIBitmap* nonnull %8) #13, !noalias !24
  %9 = ptrtoint i8* %7 to i64
  %10 = getelementptr inbounds i8, i8* %7, i64 8
  %11 = bitcast i8* %10 to i64*
  %12 = load i64, i64* %11, align 8, !noalias !24
  %13 = add nsw i64 %12, 1
  store i64 %13, i64* %11, align 8, !noalias !24
  %14 = tail call zeroext i1 @_ZN12CFX_DIBitmap6CreateEii12FXDIB_Format(%class.CFX_DIBitmap* nonnull %8, i32 %4, i32 %6, i16 zeroext 264) #13
  br i1 %14, label %15, label %128

15:                                               ; preds = %2
  %16 = icmp sgt i32 %6, 0
  br i1 %16, label %17, label %36

17:                                               ; preds = %15
  %18 = bitcast %class.CFX_DIBBase* %1 to i8* (%class.CFX_DIBBase*, i32)***
  %19 = bitcast i8* %7 to %class.CFX_DIBBase*
  %20 = bitcast i8* %7 to i8* (%class.CFX_DIBBase*, i32)***
  %21 = icmp sgt i32 %4, 0
  %22 = add i32 %4, -1
  %23 = zext i32 %22 to i64
  %24 = add nuw nsw i64 %23, 1
  %25 = zext i32 %22 to i64
  %26 = add nuw nsw i64 %25, 1
  %27 = shl nuw nsw i64 %25, 2
  %28 = add nuw nsw i64 %27, 4
  %29 = icmp ult i64 %24, 17
  %30 = and i64 %24, 15
  %31 = icmp eq i64 %30, 0
  %32 = select i1 %31, i64 16, i64 %30
  %33 = sub nsw i64 %24, %32
  %34 = trunc i64 %33 to i32
  %35 = shl nsw i64 %33, 2
  br label %38

36:                                               ; preds = %95, %15
  %37 = bitcast %"class.fxcrt::RetainPtr"* %0 to i64*
  store i64 %9, i64* %37, align 8
  br label %139

38:                                               ; preds = %95, %17
  %39 = phi i32 [ 0, %17 ], [ %96, %95 ]
  %40 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %18, align 8
  %41 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %40, i64 3
  %42 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %41, align 8
  %43 = tail call i8* %42(%class.CFX_DIBBase* %1, i32 %39) #13
  %44 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %20, align 8
  %45 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %44, i64 3
  %46 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %45, align 8
  %47 = tail call i8* %46(%class.CFX_DIBBase* nonnull %19, i32 %39) #13
  br i1 %21, label %48, label %95

48:                                               ; preds = %38
  %49 = getelementptr inbounds i8, i8* %43, i64 3
  br i1 %29, label %50, label %75

50:                                               ; preds = %84, %75, %48
  %51 = phi i32 [ 0, %75 ], [ 0, %48 ], [ %34, %84 ]
  %52 = phi i8* [ %47, %75 ], [ %47, %48 ], [ %82, %84 ]
  %53 = phi i8* [ %49, %75 ], [ %49, %48 ], [ %83, %84 ]
  %54 = sub i32 %4, %51
  %55 = xor i32 %51, -1
  %56 = add i32 %4, %55
  %57 = and i32 %54, 7
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %70, label %59

59:                                               ; preds = %50, %59
  %60 = phi i32 [ %67, %59 ], [ %51, %50 ]
  %61 = phi i8* [ %65, %59 ], [ %52, %50 ]
  %62 = phi i8* [ %66, %59 ], [ %53, %50 ]
  %63 = phi i32 [ %68, %59 ], [ %57, %50 ]
  %64 = load i8, i8* %62, align 1
  %65 = getelementptr inbounds i8, i8* %61, i64 1
  store i8 %64, i8* %61, align 1
  %66 = getelementptr inbounds i8, i8* %62, i64 4
  %67 = add nuw nsw i32 %60, 1
  %68 = add i32 %63, -1
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %59, !llvm.loop !27

70:                                               ; preds = %59, %50
  %71 = phi i32 [ %51, %50 ], [ %67, %59 ]
  %72 = phi i8* [ %52, %50 ], [ %65, %59 ]
  %73 = phi i8* [ %53, %50 ], [ %66, %59 ]
  %74 = icmp ult i32 %56, 7
  br i1 %74, label %95, label %98

75:                                               ; preds = %48
  %76 = getelementptr i8, i8* %47, i64 %26
  %77 = getelementptr i8, i8* %43, i64 %28
  %78 = icmp ult i8* %47, %77
  %79 = icmp ult i8* %49, %76
  %80 = and i1 %78, %79
  br i1 %80, label %50, label %81

81:                                               ; preds = %75
  %82 = getelementptr i8, i8* %47, i64 %33
  %83 = getelementptr i8, i8* %49, i64 %35
  br label %84

84:                                               ; preds = %84, %81
  %85 = phi i64 [ 0, %81 ], [ %93, %84 ]
  %86 = getelementptr i8, i8* %47, i64 %85
  %87 = shl i64 %85, 2
  %88 = getelementptr i8, i8* %49, i64 %87
  %89 = bitcast i8* %88 to <64 x i8>*
  %90 = load <64 x i8>, <64 x i8>* %89, align 1
  %91 = shufflevector <64 x i8> %90, <64 x i8> undef, <16 x i32> <i32 0, i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 36, i32 40, i32 44, i32 48, i32 52, i32 56, i32 60>
  %92 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %91, <16 x i8>* %92, align 1, !alias.scope !29, !noalias !32
  %93 = add i64 %85, 16
  %94 = icmp eq i64 %93, %33
  br i1 %94, label %50, label %84, !llvm.loop !34

95:                                               ; preds = %70, %98, %38
  %96 = add nuw nsw i32 %39, 1
  %97 = icmp eq i32 %96, %6
  br i1 %97, label %36, label %38

98:                                               ; preds = %70, %98
  %99 = phi i32 [ %126, %98 ], [ %71, %70 ]
  %100 = phi i8* [ %124, %98 ], [ %72, %70 ]
  %101 = phi i8* [ %125, %98 ], [ %73, %70 ]
  %102 = load i8, i8* %101, align 1
  %103 = getelementptr inbounds i8, i8* %100, i64 1
  store i8 %102, i8* %100, align 1
  %104 = getelementptr inbounds i8, i8* %101, i64 4
  %105 = load i8, i8* %104, align 1
  %106 = getelementptr inbounds i8, i8* %100, i64 2
  store i8 %105, i8* %103, align 1
  %107 = getelementptr inbounds i8, i8* %101, i64 8
  %108 = load i8, i8* %107, align 1
  %109 = getelementptr inbounds i8, i8* %100, i64 3
  store i8 %108, i8* %106, align 1
  %110 = getelementptr inbounds i8, i8* %101, i64 12
  %111 = load i8, i8* %110, align 1
  %112 = getelementptr inbounds i8, i8* %100, i64 4
  store i8 %111, i8* %109, align 1
  %113 = getelementptr inbounds i8, i8* %101, i64 16
  %114 = load i8, i8* %113, align 1
  %115 = getelementptr inbounds i8, i8* %100, i64 5
  store i8 %114, i8* %112, align 1
  %116 = getelementptr inbounds i8, i8* %101, i64 20
  %117 = load i8, i8* %116, align 1
  %118 = getelementptr inbounds i8, i8* %100, i64 6
  store i8 %117, i8* %115, align 1
  %119 = getelementptr inbounds i8, i8* %101, i64 24
  %120 = load i8, i8* %119, align 1
  %121 = getelementptr inbounds i8, i8* %100, i64 7
  store i8 %120, i8* %118, align 1
  %122 = getelementptr inbounds i8, i8* %101, i64 28
  %123 = load i8, i8* %122, align 1
  %124 = getelementptr inbounds i8, i8* %100, i64 8
  store i8 %123, i8* %121, align 1
  %125 = getelementptr inbounds i8, i8* %101, i64 32
  %126 = add nuw nsw i32 %99, 8
  %127 = icmp eq i32 %126, %4
  br i1 %127, label %95, label %98, !llvm.loop !35

128:                                              ; preds = %2
  %129 = bitcast %"class.fxcrt::RetainPtr"* %0 to i64*
  store i64 0, i64* %129, align 8
  %130 = load i64, i64* %11, align 8
  %131 = add nsw i64 %130, -1
  store i64 %131, i64* %11, align 8
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %139

133:                                              ; preds = %128
  %134 = bitcast i8* %7 to %"class.fxcrt::Retainable"*
  %135 = bitcast i8* %7 to void (%"class.fxcrt::Retainable"*)***
  %136 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %135, align 8
  %137 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %136, i64 1
  %138 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %137, align 8
  tail call void %138(%"class.fxcrt::Retainable"* nonnull %134) #13
  br label %139

139:                                              ; preds = %36, %128, %133
  ret void
}

declare void @_ZN12CFX_DIBitmap5ClearEj(%class.CFX_DIBitmap*, i32) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK11CFX_DIBBase9FlipImageEbb(%"class.fxcrt::RetainPtr"* noalias nocapture sret, %class.CFX_DIBBase*, i1 zeroext, i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = tail call i8* @_Znwm(i64 80) #15, !noalias !36
  %6 = bitcast i8* %5 to %class.CFX_DIBitmap*
  tail call void @_ZN12CFX_DIBitmapC1Ev(%class.CFX_DIBitmap* nonnull %6) #13, !noalias !36
  %7 = ptrtoint i8* %5 to i64
  %8 = getelementptr inbounds i8, i8* %5, i64 8
  %9 = bitcast i8* %8 to i64*
  %10 = load i64, i64* %9, align 8, !noalias !36
  %11 = add nsw i64 %10, 1
  store i64 %11, i64* %9, align 8, !noalias !36
  %12 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 3
  %15 = load i32, i32* %14, align 8
  %16 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 1
  %17 = load i16, i16* %16, align 8
  %18 = tail call zeroext i1 @_ZN12CFX_DIBitmap6CreateEii12FXDIB_Format(%class.CFX_DIBitmap* nonnull %6, i32 %13, i32 %15, i16 zeroext %17) #13
  br i1 %18, label %19, label %251

19:                                               ; preds = %4
  %20 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 6
  %21 = bitcast %"class.std::__1::vector"* %20 to i64*
  %22 = load i64, i64* %21, align 8, !noalias !39
  %23 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 6, i32 0, i32 1
  %24 = bitcast i32** %23 to i64*
  %25 = load i64, i64* %24, align 8, !noalias !39
  %26 = sub i64 %25, %22
  %27 = ashr exact i64 %26, 2
  %28 = icmp eq i64 %26, 0
  br i1 %28, label %35, label %29

29:                                               ; preds = %19
  %30 = getelementptr inbounds i8, i8* %5, i64 16
  %31 = bitcast i8* %30 to i16*
  %32 = load i16, i16* %31, align 8
  %33 = and i16 %32, 255
  %34 = icmp ugt i16 %33, 8
  br i1 %34, label %35, label %41

35:                                               ; preds = %29, %19
  %36 = getelementptr inbounds i8, i8* %5, i64 40
  %37 = bitcast i8* %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = getelementptr inbounds i8, i8* %5, i64 48
  %40 = bitcast i8* %39 to i64*
  store i64 %38, i64* %40, align 8
  br label %70

41:                                               ; preds = %29
  %42 = zext i16 %33 to i32
  %43 = shl i32 1, %42
  %44 = getelementptr inbounds i8, i8* %5, i64 40
  %45 = bitcast i8* %44 to i32**
  %46 = load i32*, i32** %45, align 8
  %47 = getelementptr inbounds i8, i8* %5, i64 48
  %48 = bitcast i8* %47 to i32**
  %49 = load i32*, i32** %48, align 8
  %50 = icmp eq i32* %46, %49
  br i1 %50, label %51, label %54

51:                                               ; preds = %41
  %52 = bitcast i8* %44 to %"class.std::__1::vector"*
  %53 = zext i32 %43 to i64
  tail call void @_ZNSt3__16vectorIj16FxAllocAllocatorIjEE8__appendEm(%"class.std::__1::vector"* %52, i64 %53) #13
  br label %54

54:                                               ; preds = %51, %41
  %55 = icmp ult i32 %43, 256
  %56 = select i1 %55, i32 %43, i32 256
  %57 = zext i32 %56 to i64
  %58 = inttoptr i64 %22 to i32*
  br label %59

59:                                               ; preds = %63, %54
  %60 = phi i64 [ 0, %54 ], [ %68, %63 ]
  %61 = icmp eq i64 %60, %27
  br i1 %61, label %62, label %63, !prof !8

62:                                               ; preds = %59
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !9
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !10
  unreachable

63:                                               ; preds = %59
  %64 = getelementptr inbounds i32, i32* %58, i64 %60
  %65 = load i32, i32* %64, align 4
  %66 = load i32*, i32** %45, align 8
  %67 = getelementptr inbounds i32, i32* %66, i64 %60
  store i32 %65, i32* %67, align 4
  %68 = add nuw nsw i64 %60, 1
  %69 = icmp ult i64 %68, %57
  br i1 %69, label %59, label %70

70:                                               ; preds = %63, %35
  %71 = bitcast i8* %5 to i8* (%class.CFX_DIBitmap*)***
  %72 = load i8* (%class.CFX_DIBitmap*)**, i8* (%class.CFX_DIBitmap*)*** %71, align 8
  %73 = getelementptr inbounds i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %72, i64 2
  %74 = load i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %73, align 8
  %75 = tail call i8* %74(%class.CFX_DIBitmap* nonnull %6) #13
  %76 = load i16, i16* %16, align 8
  %77 = lshr i16 %76, 3
  %78 = and i16 %77, 31
  %79 = zext i16 %78 to i32
  %80 = load i32, i32* %14, align 8
  %81 = icmp sgt i32 %80, 0
  br i1 %81, label %82, label %87

82:                                               ; preds = %70
  %83 = bitcast %class.CFX_DIBBase* %1 to i8* (%class.CFX_DIBBase*, i32)***
  %84 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 4
  %85 = trunc i16 %76 to i8
  %86 = and i8 %85, -8
  br label %91

87:                                               ; preds = %190, %70
  %88 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %89 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %88, align 8
  %90 = icmp eq %class.CFX_DIBitmap* %89, null
  br i1 %90, label %249, label %194

91:                                               ; preds = %82, %190
  %92 = phi i32 [ 0, %82 ], [ %191, %190 ]
  %93 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %83, align 8
  %94 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %93, i64 3
  %95 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %94, align 8
  %96 = tail call i8* %95(%class.CFX_DIBBase* %1, i32 %92) #13
  %97 = load i32, i32* %84, align 4
  br i1 %3, label %98, label %102

98:                                               ; preds = %91
  %99 = load i32, i32* %14, align 8
  %100 = xor i32 %92, -1
  %101 = add i32 %99, %100
  br label %102

102:                                              ; preds = %91, %98
  %103 = phi i32 [ %101, %98 ], [ %92, %91 ]
  %104 = mul i32 %103, %97
  %105 = zext i32 %104 to i64
  %106 = getelementptr inbounds i8, i8* %75, i64 %105
  br i1 %2, label %109, label %107

107:                                              ; preds = %102
  %108 = zext i32 %97 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %106, i8* align 1 %96, i64 %108, i1 false)
  br label %190

109:                                              ; preds = %102
  %110 = load i16, i16* %16, align 8
  %111 = and i16 %110, 255
  %112 = icmp eq i16 %111, 1
  br i1 %112, label %113, label %147

113:                                              ; preds = %109
  %114 = zext i32 %97 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %106, i8 0, i64 %114, i1 false)
  %115 = load i32, i32* %12, align 4
  %116 = icmp sgt i32 %115, 0
  br i1 %116, label %117, label %190

117:                                              ; preds = %113, %143
  %118 = phi i32 [ %144, %143 ], [ %115, %113 ]
  %119 = phi i32 [ %145, %143 ], [ 0, %113 ]
  %120 = lshr i32 %119, 3
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds i8, i8* %96, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = zext i8 %123 to i32
  %125 = and i32 %119, 7
  %126 = xor i32 %125, 7
  %127 = shl i32 1, %126
  %128 = and i32 %127, %124
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %143, label %130

130:                                              ; preds = %117
  %131 = xor i32 %119, -1
  %132 = add i32 %118, %131
  %133 = srem i32 %132, 8
  %134 = sub nsw i32 7, %133
  %135 = shl i32 1, %134
  %136 = sdiv i32 %132, 8
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds i8, i8* %106, i64 %137
  %139 = load i8, i8* %138, align 1
  %140 = trunc i32 %135 to i8
  %141 = or i8 %139, %140
  store i8 %141, i8* %138, align 1
  %142 = load i32, i32* %12, align 4
  br label %143

143:                                              ; preds = %117, %130
  %144 = phi i32 [ %118, %117 ], [ %142, %130 ]
  %145 = add nuw nsw i32 %119, 1
  %146 = icmp sgt i32 %144, %145
  br i1 %146, label %117, label %190

147:                                              ; preds = %109
  %148 = load i32, i32* %12, align 4
  %149 = add nsw i32 %148, -1
  %150 = mul nsw i32 %149, %79
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds i8, i8* %106, i64 %151
  switch i8 %86, label %157 [
    i8 8, label %155
    i8 24, label %153
  ]

153:                                              ; preds = %147
  %154 = icmp sgt i32 %148, 0
  br i1 %154, label %169, label %190

155:                                              ; preds = %147
  %156 = icmp sgt i32 %148, 0
  br i1 %156, label %159, label %190

157:                                              ; preds = %147
  %158 = icmp sgt i32 %148, 0
  br i1 %158, label %178, label %190

159:                                              ; preds = %155, %159
  %160 = phi i32 [ %166, %159 ], [ 0, %155 ]
  %161 = phi i8* [ %164, %159 ], [ %152, %155 ]
  %162 = phi i8* [ %165, %159 ], [ %96, %155 ]
  %163 = load i8, i8* %162, align 1
  store i8 %163, i8* %161, align 1
  %164 = getelementptr inbounds i8, i8* %161, i64 -1
  %165 = getelementptr inbounds i8, i8* %162, i64 1
  %166 = add nuw nsw i32 %160, 1
  %167 = load i32, i32* %12, align 4
  %168 = icmp slt i32 %166, %167
  br i1 %168, label %159, label %190

169:                                              ; preds = %153, %169
  %170 = phi i32 [ %175, %169 ], [ 0, %153 ]
  %171 = phi i8* [ %173, %169 ], [ %152, %153 ]
  %172 = phi i8* [ %174, %169 ], [ %96, %153 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %171, i8* align 1 %172, i64 3, i1 false)
  %173 = getelementptr inbounds i8, i8* %171, i64 -3
  %174 = getelementptr inbounds i8, i8* %172, i64 3
  %175 = add nuw nsw i32 %170, 1
  %176 = load i32, i32* %12, align 4
  %177 = icmp slt i32 %175, %176
  br i1 %177, label %169, label %190

178:                                              ; preds = %157, %178
  %179 = phi i32 [ %187, %178 ], [ 0, %157 ]
  %180 = phi i8* [ %185, %178 ], [ %152, %157 ]
  %181 = phi i8* [ %186, %178 ], [ %96, %157 ]
  %182 = bitcast i8* %181 to i32*
  %183 = bitcast i8* %180 to i32*
  %184 = load i32, i32* %182, align 4
  store i32 %184, i32* %183, align 4
  %185 = getelementptr inbounds i8, i8* %180, i64 -4
  %186 = getelementptr inbounds i8, i8* %181, i64 4
  %187 = add nuw nsw i32 %179, 1
  %188 = load i32, i32* %12, align 4
  %189 = icmp slt i32 %187, %188
  br i1 %189, label %178, label %190

190:                                              ; preds = %169, %159, %178, %143, %153, %155, %157, %113, %107
  %191 = add nuw nsw i32 %92, 1
  %192 = load i32, i32* %14, align 8
  %193 = icmp slt i32 %191, %192
  br i1 %193, label %91, label %87

194:                                              ; preds = %87
  %195 = getelementptr inbounds i8, i8* %5, i64 32
  %196 = bitcast i8* %195 to %class.CFX_DIBitmap**
  %197 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %196, align 8
  %198 = bitcast %class.CFX_DIBitmap* %197 to i8* (%class.CFX_DIBitmap*)***
  %199 = load i8* (%class.CFX_DIBitmap*)**, i8* (%class.CFX_DIBitmap*)*** %198, align 8
  %200 = getelementptr inbounds i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %199, i64 2
  %201 = load i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %200, align 8
  %202 = tail call i8* %201(%class.CFX_DIBitmap* %197) #13
  %203 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %196, align 8
  %204 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %203, i64 0, i32 0, i32 4
  %205 = load i32, i32* %204, align 4
  %206 = load i32, i32* %14, align 8
  %207 = icmp sgt i32 %206, 0
  br i1 %207, label %208, label %249

208:                                              ; preds = %194
  %209 = zext i32 %205 to i64
  br label %210

210:                                              ; preds = %208, %245
  %211 = phi i32 [ 0, %208 ], [ %246, %245 ]
  %212 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %88, align 8
  %213 = bitcast %class.CFX_DIBitmap* %212 to i8* (%class.CFX_DIBitmap*, i32)***
  %214 = load i8* (%class.CFX_DIBitmap*, i32)**, i8* (%class.CFX_DIBitmap*, i32)*** %213, align 8
  %215 = getelementptr inbounds i8* (%class.CFX_DIBitmap*, i32)*, i8* (%class.CFX_DIBitmap*, i32)** %214, i64 3
  %216 = load i8* (%class.CFX_DIBitmap*, i32)*, i8* (%class.CFX_DIBitmap*, i32)** %215, align 8
  %217 = tail call i8* %216(%class.CFX_DIBitmap* %212, i32 %211) #13
  br i1 %3, label %218, label %222

218:                                              ; preds = %210
  %219 = load i32, i32* %14, align 8
  %220 = xor i32 %211, -1
  %221 = add i32 %219, %220
  br label %222

222:                                              ; preds = %210, %218
  %223 = phi i32 [ %221, %218 ], [ %211, %210 ]
  %224 = mul i32 %223, %205
  %225 = zext i32 %224 to i64
  %226 = getelementptr inbounds i8, i8* %202, i64 %225
  br i1 %2, label %228, label %227

227:                                              ; preds = %222
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %226, i8* align 1 %217, i64 %209, i1 false)
  br label %245

228:                                              ; preds = %222
  %229 = load i32, i32* %12, align 4
  %230 = icmp sgt i32 %229, 0
  br i1 %230, label %231, label %245

231:                                              ; preds = %228
  %232 = add nsw i32 %229, -1
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds i8, i8* %226, i64 %233
  br label %235

235:                                              ; preds = %231, %235
  %236 = phi i32 [ %242, %235 ], [ 0, %231 ]
  %237 = phi i8* [ %240, %235 ], [ %234, %231 ]
  %238 = phi i8* [ %241, %235 ], [ %217, %231 ]
  %239 = load i8, i8* %238, align 1
  store i8 %239, i8* %237, align 1
  %240 = getelementptr inbounds i8, i8* %237, i64 -1
  %241 = getelementptr inbounds i8, i8* %238, i64 1
  %242 = add nuw nsw i32 %236, 1
  %243 = load i32, i32* %12, align 4
  %244 = icmp slt i32 %242, %243
  br i1 %244, label %235, label %245

245:                                              ; preds = %235, %228, %227
  %246 = add nuw nsw i32 %211, 1
  %247 = load i32, i32* %14, align 8
  %248 = icmp slt i32 %246, %247
  br i1 %248, label %210, label %249

249:                                              ; preds = %245, %194, %87
  %250 = bitcast %"class.fxcrt::RetainPtr"* %0 to i64*
  store i64 %7, i64* %250, align 8
  br label %262

251:                                              ; preds = %4
  %252 = bitcast %"class.fxcrt::RetainPtr"* %0 to i64*
  store i64 0, i64* %252, align 8
  %253 = load i64, i64* %9, align 8
  %254 = add nsw i64 %253, -1
  store i64 %254, i64* %9, align 8
  %255 = icmp eq i64 %254, 0
  br i1 %255, label %256, label %262

256:                                              ; preds = %251
  %257 = bitcast i8* %5 to %"class.fxcrt::Retainable"*
  %258 = bitcast i8* %5 to void (%"class.fxcrt::Retainable"*)***
  %259 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %258, align 8
  %260 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %259, i64 1
  %261 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %260, align 8
  tail call void %261(%"class.fxcrt::Retainable"* nonnull %257) #13
  br label %262

262:                                              ; preds = %249, %251, %256
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11CFX_DIBBase12CloneConvertE12FXDIB_Format(%"class.fxcrt::RetainPtr"* noalias nocapture sret, %class.CFX_DIBBase*, i16 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.fxcrt::RetainPtr", align 8
  %5 = alloca %"class.fxcrt::RetainPtr.9", align 8
  %6 = alloca %"class.fxcrt::RetainPtr.9", align 8
  %7 = alloca %"class.std::__1::vector", align 8
  %8 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 1
  %9 = load i16, i16* %8, align 8
  %10 = icmp eq i16 %9, %2
  br i1 %10, label %11, label %12

11:                                               ; preds = %3
  tail call void @_ZNK11CFX_DIBBase5CloneEPK7FX_RECT(%"class.fxcrt::RetainPtr"* sret %0, %class.CFX_DIBBase* %1, %struct.FX_RECT* null)
  br label %291

12:                                               ; preds = %3
  %13 = tail call i8* @_Znwm(i64 80) #15, !noalias !42
  %14 = bitcast i8* %13 to %class.CFX_DIBitmap*
  tail call void @_ZN12CFX_DIBitmapC1Ev(%class.CFX_DIBitmap* nonnull %14) #13, !noalias !42
  %15 = ptrtoint i8* %13 to i64
  %16 = getelementptr inbounds i8, i8* %13, i64 8
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 8, !noalias !42
  %19 = add nsw i64 %18, 1
  store i64 %19, i64* %17, align 8, !noalias !42
  %20 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 2
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 3
  %23 = load i32, i32* %22, align 8
  %24 = tail call zeroext i1 @_ZN12CFX_DIBitmap6CreateEii12FXDIB_Format(%class.CFX_DIBitmap* nonnull %14, i32 %21, i32 %23, i16 zeroext %2) #13
  br i1 %24, label %25, label %272

25:                                               ; preds = %12
  %26 = load i16, i16* %8, align 8
  %27 = and i16 %26, 512
  %28 = icmp eq i16 %27, 0
  br i1 %28, label %48, label %29

29:                                               ; preds = %25
  %30 = bitcast %"class.fxcrt::RetainPtr"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #13
  %31 = icmp eq i16 %26, 544
  br i1 %31, label %32, label %35

32:                                               ; preds = %29
  call void @_ZNK11CFX_DIBBase14CloneAlphaMaskEv(%"class.fxcrt::RetainPtr"* nonnull sret %4, %class.CFX_DIBBase* %1)
  %33 = bitcast %"class.fxcrt::RetainPtr"* %4 to i64*
  %34 = load i64, i64* %33, align 8
  br label %45

35:                                               ; preds = %29
  %36 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %37 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %36, align 8
  %38 = ptrtoint %class.CFX_DIBitmap* %37 to i64
  %39 = bitcast %"class.fxcrt::RetainPtr"* %4 to i64*
  store i64 %38, i64* %39, align 8
  %40 = icmp eq %class.CFX_DIBitmap* %37, null
  br i1 %40, label %45, label %41

41:                                               ; preds = %35
  %42 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %37, i64 0, i32 0, i32 0, i32 1
  %43 = load i64, i64* %42, align 8
  %44 = add nsw i64 %43, 1
  store i64 %44, i64* %42, align 8
  br label %45

45:                                               ; preds = %41, %35, %32
  %46 = phi i64 [ %38, %41 ], [ %38, %35 ], [ %34, %32 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #13
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %272, label %48

48:                                               ; preds = %45, %25
  %49 = phi i64 [ %46, %45 ], [ 0, %25 ]
  %50 = and i16 %2, 512
  %51 = icmp eq i16 %50, 0
  br i1 %51, label %159, label %52

52:                                               ; preds = %48
  %53 = icmp eq i16 %2, 544
  %54 = icmp eq i64 %49, 0
  br i1 %53, label %55, label %81

55:                                               ; preds = %52
  br i1 %54, label %56, label %58

56:                                               ; preds = %55
  %57 = tail call zeroext i1 @_ZN12CFX_DIBitmap21SetUniformOpaqueAlphaEv(%class.CFX_DIBitmap* nonnull %14) #13
  br i1 %57, label %159, label %157

58:                                               ; preds = %55
  %59 = inttoptr i64 %49 to %class.CFX_DIBitmap*
  %60 = bitcast %"class.fxcrt::RetainPtr.9"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %60) #13
  %61 = bitcast %"class.fxcrt::RetainPtr.9"* %5 to i64*
  store i64 %49, i64* %61, align 8
  %62 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %59, i64 0, i32 0, i32 0, i32 1
  %63 = load i64, i64* %62, align 8
  %64 = add nsw i64 %63, 1
  store i64 %64, i64* %62, align 8
  %65 = call zeroext i1 @_ZN12CFX_DIBitmap18SetAlphaFromBitmapERKN5fxcrt9RetainPtrI11CFX_DIBBaseEE(%class.CFX_DIBitmap* nonnull %14, %"class.fxcrt::RetainPtr.9"* nonnull dereferenceable(8) %5) #13
  %66 = getelementptr inbounds %"class.fxcrt::RetainPtr.9", %"class.fxcrt::RetainPtr.9"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %67 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %66, align 8
  store %class.CFX_DIBBase* null, %class.CFX_DIBBase** %66, align 8
  %68 = icmp eq %class.CFX_DIBBase* %67, null
  br i1 %68, label %80, label %69

69:                                               ; preds = %58
  %70 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %67, i64 0, i32 0, i32 1
  %71 = load i64, i64* %70, align 8
  %72 = add nsw i64 %71, -1
  store i64 %72, i64* %70, align 8
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %80

74:                                               ; preds = %69
  %75 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %67, i64 0, i32 0
  %76 = bitcast %class.CFX_DIBBase* %67 to void (%"class.fxcrt::Retainable"*)***
  %77 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %76, align 8
  %78 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %77, i64 1
  %79 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %78, align 8
  call void %79(%"class.fxcrt::Retainable"* nonnull %75) #13
  br label %80

80:                                               ; preds = %58, %69, %74
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %60) #13
  br i1 %65, label %159, label %157

81:                                               ; preds = %52
  br i1 %54, label %87, label %82

82:                                               ; preds = %81
  %83 = inttoptr i64 %49 to %class.CFX_DIBitmap*
  %84 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %83, i64 0, i32 0, i32 0, i32 1
  %85 = load i64, i64* %84, align 8
  %86 = add nsw i64 %85, 1
  store i64 %86, i64* %84, align 8
  br label %87

87:                                               ; preds = %81, %82
  %88 = getelementptr inbounds i8, i8* %13, i64 16
  %89 = bitcast i8* %88 to i16*
  %90 = load i16, i16* %89, align 8
  %91 = and i16 %90, 512
  %92 = icmp eq i16 %91, 0
  %93 = icmp eq i16 %90, 544
  %94 = or i1 %93, %92
  %95 = inttoptr i64 %49 to %class.CFX_DIBBase*
  br i1 %94, label %141, label %96

96:                                               ; preds = %87
  br i1 %54, label %97, label %101

97:                                               ; preds = %96
  %98 = getelementptr inbounds i8, i8* %13, i64 32
  %99 = bitcast i8* %98 to %class.CFX_DIBitmap**
  %100 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %99, align 8
  tail call void @_ZN12CFX_DIBitmap5ClearEj(%class.CFX_DIBitmap* %100, i32 -16777216) #13
  br label %159

101:                                              ; preds = %96
  %102 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %95, i64 0, i32 2
  %103 = load i32, i32* %102, align 4
  %104 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %95, i64 0, i32 3
  %105 = load i32, i32* %104, align 8
  %106 = getelementptr inbounds i8, i8* %13, i64 20
  %107 = bitcast i8* %106 to i32*
  %108 = load i32, i32* %107, align 4
  %109 = icmp eq i32 %103, %108
  br i1 %109, label %110, label %143

110:                                              ; preds = %101
  %111 = getelementptr inbounds i8, i8* %13, i64 24
  %112 = bitcast i8* %111 to i32*
  %113 = load i32, i32* %112, align 8
  %114 = icmp eq i32 %105, %113
  br i1 %114, label %115, label %143

115:                                              ; preds = %110
  %116 = icmp sgt i32 %105, 0
  br i1 %116, label %117, label %143

117:                                              ; preds = %115
  %118 = getelementptr inbounds i8, i8* %13, i64 32
  %119 = bitcast i8* %118 to %class.CFX_DIBitmap**
  %120 = inttoptr i64 %49 to i8* (%class.CFX_DIBBase*, i32)***
  br label %121

121:                                              ; preds = %121, %117
  %122 = phi i32 [ 0, %117 ], [ %138, %121 ]
  %123 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %119, align 8
  %124 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %123, i64 0, i32 0
  %125 = bitcast %class.CFX_DIBitmap* %123 to i8* (%class.CFX_DIBBase*, i32)***
  %126 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %125, align 8
  %127 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %126, i64 3
  %128 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %127, align 8
  %129 = tail call i8* %128(%class.CFX_DIBBase* %124, i32 %122) #13
  %130 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %120, align 8
  %131 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %130, i64 3
  %132 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %131, align 8
  %133 = tail call i8* %132(%class.CFX_DIBBase* %95, i32 %122) #13
  %134 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %119, align 8
  %135 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %134, i64 0, i32 0, i32 4
  %136 = load i32, i32* %135, align 4
  %137 = zext i32 %136 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %129, i8* align 1 %133, i64 %137, i1 false) #13
  %138 = add nuw nsw i32 %122, 1
  %139 = load i32, i32* %112, align 8
  %140 = icmp slt i32 %138, %139
  br i1 %140, label %121, label %141

141:                                              ; preds = %121, %87
  %142 = phi i1 [ false, %87 ], [ true, %121 ]
  br i1 %54, label %155, label %143

143:                                              ; preds = %115, %110, %101, %141
  %144 = phi i1 [ %142, %141 ], [ true, %115 ], [ false, %110 ], [ false, %101 ]
  %145 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %95, i64 0, i32 0, i32 1
  %146 = load i64, i64* %145, align 8
  %147 = add nsw i64 %146, -1
  store i64 %147, i64* %145, align 8
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %149, label %155

149:                                              ; preds = %143
  %150 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %95, i64 0, i32 0
  %151 = inttoptr i64 %49 to void (%"class.fxcrt::Retainable"*)***
  %152 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %151, align 8
  %153 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %152, i64 1
  %154 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %153, align 8
  tail call void %154(%"class.fxcrt::Retainable"* nonnull %150) #13
  br i1 %144, label %159, label %157

155:                                              ; preds = %143, %141
  %156 = phi i1 [ %144, %143 ], [ %142, %141 ]
  br i1 %156, label %159, label %157

157:                                              ; preds = %149, %56, %80, %155
  %158 = bitcast %"class.fxcrt::RetainPtr"* %0 to i64*
  store i64 0, i64* %158, align 8
  br label %257

159:                                              ; preds = %97, %48, %149, %56, %80, %155
  %160 = bitcast %"class.fxcrt::RetainPtr.9"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %160) #13
  %161 = getelementptr inbounds %"class.fxcrt::RetainPtr.9", %"class.fxcrt::RetainPtr.9"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %162 = ptrtoint %class.CFX_DIBBase* %1 to i64
  %163 = bitcast %"class.fxcrt::RetainPtr.9"* %6 to i64*
  store i64 %162, i64* %163, align 8
  %164 = icmp eq %class.CFX_DIBBase* %1, null
  br i1 %164, label %169, label %165

165:                                              ; preds = %159
  %166 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 0, i32 1
  %167 = load i64, i64* %166, align 8
  %168 = add nsw i64 %167, 1
  store i64 %168, i64* %166, align 8
  br label %169

169:                                              ; preds = %159, %165
  %170 = bitcast %"class.std::__1::vector"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %170) #13
  %171 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 0
  %172 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %7, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %170, i8 0, i64 24, i1 false) #13
  %173 = bitcast i8* %13 to i8* (%class.CFX_DIBitmap*)***
  %174 = load i8* (%class.CFX_DIBitmap*)**, i8* (%class.CFX_DIBitmap*)*** %173, align 8
  %175 = getelementptr inbounds i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %174, i64 2
  %176 = load i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %175, align 8
  %177 = call i8* %176(%class.CFX_DIBitmap* nonnull %14) #13
  %178 = getelementptr inbounds i8, i8* %13, i64 28
  %179 = bitcast i8* %178 to i32*
  %180 = load i32, i32* %179, align 4
  %181 = load i32, i32* %20, align 4
  %182 = load i32, i32* %22, align 8
  %183 = call zeroext i1 @_ZN11CFX_DIBBase13ConvertBufferE12FXDIB_FormatPhiiiRKN5fxcrt9RetainPtrIS_EEiiPNSt3__16vectorIj16FxAllocAllocatorIjEEE(i16 zeroext %2, i8* %177, i32 %180, i32 %181, i32 %182, %"class.fxcrt::RetainPtr.9"* nonnull dereferenceable(8) %6, i32 0, i32 0, %"class.std::__1::vector"* nonnull %7)
  br i1 %183, label %184, label %234

184:                                              ; preds = %169
  %185 = load i32*, i32** %171, align 8
  %186 = load i32*, i32** %172, align 8
  %187 = icmp eq i32* %185, %186
  br i1 %187, label %234, label %188

188:                                              ; preds = %184
  %189 = ptrtoint i32* %186 to i64
  %190 = ptrtoint i32* %185 to i64
  %191 = sub i64 %189, %190
  %192 = ashr exact i64 %191, 2
  %193 = icmp eq i64 %191, 0
  br i1 %193, label %200, label %194

194:                                              ; preds = %188
  %195 = getelementptr inbounds i8, i8* %13, i64 16
  %196 = bitcast i8* %195 to i16*
  %197 = load i16, i16* %196, align 8
  %198 = and i16 %197, 255
  %199 = icmp ugt i16 %198, 8
  br i1 %199, label %200, label %206

200:                                              ; preds = %194, %188
  %201 = getelementptr inbounds i8, i8* %13, i64 40
  %202 = bitcast i8* %201 to i64*
  %203 = load i64, i64* %202, align 8
  %204 = getelementptr inbounds i8, i8* %13, i64 48
  %205 = bitcast i8* %204 to i64*
  store i64 %203, i64* %205, align 8
  br label %234

206:                                              ; preds = %194
  %207 = zext i16 %198 to i32
  %208 = shl i32 1, %207
  %209 = getelementptr inbounds i8, i8* %13, i64 40
  %210 = bitcast i8* %209 to i32**
  %211 = load i32*, i32** %210, align 8
  %212 = getelementptr inbounds i8, i8* %13, i64 48
  %213 = bitcast i8* %212 to i32**
  %214 = load i32*, i32** %213, align 8
  %215 = icmp eq i32* %211, %214
  br i1 %215, label %216, label %219

216:                                              ; preds = %206
  %217 = bitcast i8* %209 to %"class.std::__1::vector"*
  %218 = zext i32 %208 to i64
  call void @_ZNSt3__16vectorIj16FxAllocAllocatorIjEE8__appendEm(%"class.std::__1::vector"* %217, i64 %218) #13
  br label %219

219:                                              ; preds = %216, %206
  %220 = icmp ult i32 %208, 256
  %221 = select i1 %220, i32 %208, i32 256
  %222 = zext i32 %221 to i64
  br label %223

223:                                              ; preds = %227, %219
  %224 = phi i64 [ 0, %219 ], [ %232, %227 ]
  %225 = icmp eq i64 %224, %192
  br i1 %225, label %226, label %227, !prof !8

226:                                              ; preds = %223
  call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !9
  call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !10
  unreachable

227:                                              ; preds = %223
  %228 = getelementptr inbounds i32, i32* %185, i64 %224
  %229 = load i32, i32* %228, align 4
  %230 = load i32*, i32** %210, align 8
  %231 = getelementptr inbounds i32, i32* %230, i64 %224
  store i32 %229, i32* %231, align 4
  %232 = add nuw nsw i64 %224, 1
  %233 = icmp ult i64 %232, %222
  br i1 %233, label %223, label %234

234:                                              ; preds = %227, %184, %200, %169
  %235 = phi i64 [ 0, %169 ], [ %15, %200 ], [ %15, %184 ], [ %15, %227 ]
  %236 = phi i64 [ %15, %169 ], [ 0, %200 ], [ 0, %184 ], [ 0, %227 ]
  %237 = bitcast %"class.fxcrt::RetainPtr"* %0 to i64*
  store i64 %235, i64* %237, align 8
  %238 = load i32*, i32** %171, align 8
  %239 = icmp eq i32* %238, null
  br i1 %239, label %244, label %240

240:                                              ; preds = %234
  %241 = ptrtoint i32* %238 to i64
  %242 = bitcast i32** %172 to i64*
  store i64 %241, i64* %242, align 8
  %243 = bitcast i32* %238 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %243) #13
  br label %244

244:                                              ; preds = %234, %240
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %170) #13
  store %class.CFX_DIBBase* null, %class.CFX_DIBBase** %161, align 8
  br i1 %164, label %256, label %245

245:                                              ; preds = %244
  %246 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 0, i32 1
  %247 = load i64, i64* %246, align 8
  %248 = add nsw i64 %247, -1
  store i64 %248, i64* %246, align 8
  %249 = icmp eq i64 %248, 0
  br i1 %249, label %250, label %256

250:                                              ; preds = %245
  %251 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 0
  %252 = bitcast %class.CFX_DIBBase* %1 to void (%"class.fxcrt::Retainable"*)***
  %253 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %252, align 8
  %254 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %253, i64 1
  %255 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %254, align 8
  call void %255(%"class.fxcrt::Retainable"* nonnull %251) #13
  br label %256

256:                                              ; preds = %244, %245, %250
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %160) #13
  br label %257

257:                                              ; preds = %157, %256
  %258 = phi i64 [ %236, %256 ], [ %15, %157 ]
  %259 = inttoptr i64 %49 to %class.CFX_DIBitmap*
  %260 = icmp eq i64 %49, 0
  br i1 %260, label %275, label %261

261:                                              ; preds = %257
  %262 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %259, i64 0, i32 0, i32 0, i32 1
  %263 = load i64, i64* %262, align 8
  %264 = add nsw i64 %263, -1
  store i64 %264, i64* %262, align 8
  %265 = icmp eq i64 %264, 0
  br i1 %265, label %266, label %275

266:                                              ; preds = %261
  %267 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %259, i64 0, i32 0, i32 0
  %268 = inttoptr i64 %49 to void (%"class.fxcrt::Retainable"*)***
  %269 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %268, align 8
  %270 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %269, i64 1
  %271 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %270, align 8
  call void %271(%"class.fxcrt::Retainable"* nonnull %267) #13
  br label %275

272:                                              ; preds = %45, %12
  %273 = bitcast %"class.fxcrt::RetainPtr"* %0 to i64*
  store i64 0, i64* %273, align 8
  %274 = bitcast i8* %13 to %class.CFX_DIBitmap*
  br label %278

275:                                              ; preds = %266, %261, %257
  %276 = inttoptr i64 %258 to %class.CFX_DIBitmap*
  %277 = icmp eq i64 %258, 0
  br i1 %277, label %291, label %278

278:                                              ; preds = %272, %275
  %279 = phi %class.CFX_DIBitmap* [ %274, %272 ], [ %276, %275 ]
  %280 = phi i64 [ %15, %272 ], [ %258, %275 ]
  %281 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %279, i64 0, i32 0, i32 0, i32 1
  %282 = load i64, i64* %281, align 8
  %283 = add nsw i64 %282, -1
  store i64 %283, i64* %281, align 8
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %285, label %291

285:                                              ; preds = %278
  %286 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %279, i64 0, i32 0, i32 0
  %287 = inttoptr i64 %280 to void (%"class.fxcrt::Retainable"*)***
  %288 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %287, align 8
  %289 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %288, i64 1
  %290 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %289, align 8
  call void %290(%"class.fxcrt::Retainable"* nonnull %286) #13
  br label %291

291:                                              ; preds = %285, %278, %275, %11
  ret void
}

declare zeroext i1 @_ZN12CFX_DIBitmap18SetAlphaFromBitmapERKN5fxcrt9RetainPtrI11CFX_DIBBaseEE(%class.CFX_DIBitmap*, %"class.fxcrt::RetainPtr.9"* dereferenceable(8)) local_unnamed_addr #5

declare zeroext i1 @_ZN12CFX_DIBitmap21SetUniformOpaqueAlphaEv(%class.CFX_DIBitmap*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN11CFX_DIBBase13ConvertBufferE12FXDIB_FormatPhiiiRKN5fxcrt9RetainPtrIS_EEiiPNSt3__16vectorIj16FxAllocAllocatorIjEEE(i16 zeroext, i8* nocapture, i32, i32, i32, %"class.fxcrt::RetainPtr.9"* nocapture readonly dereferenceable(8), i32, i32, %"class.std::__1::vector"*) local_unnamed_addr #0 align 2 {
  %10 = alloca [256 x i32], align 16
  %11 = getelementptr inbounds %"class.fxcrt::RetainPtr.9", %"class.fxcrt::RetainPtr.9"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %11, align 8
  %13 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %12, i64 0, i32 1
  %14 = load i16, i16* %13, align 8
  %15 = and i16 %14, 255
  %16 = zext i16 %15 to i32
  switch i16 %0, label %976 [
    i16 264, label %17
    i16 8, label %19
    i16 24, label %398
    i16 544, label %696
    i16 32, label %696
  ]

17:                                               ; preds = %9
  %18 = tail call fastcc zeroext i1 @_ZN12_GLOBAL__N_122ConvertBuffer_8bppMaskEiPhiiiRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEii(i32 %16, i8* %1, i32 %2, i32 %3, i32 %4, %"class.fxcrt::RetainPtr.9"* dereferenceable(8) %5, i32 %6, i32 %7)
  br label %976

19:                                               ; preds = %9
  %20 = trunc i16 %14 to i8
  switch i8 %20, label %29 [
    i8 8, label %21
    i8 1, label %21
  ]

21:                                               ; preds = %19, %19
  %22 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %12, i64 0, i32 6, i32 0, i32 0
  %23 = load i32*, i32** %22, align 8
  %24 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %12, i64 0, i32 6, i32 0, i32 1
  %25 = load i32*, i32** %24, align 8
  %26 = icmp eq i32* %23, %25
  br i1 %26, label %27, label %29

27:                                               ; preds = %21
  %28 = tail call fastcc zeroext i1 @_ZN12_GLOBAL__N_122ConvertBuffer_8bppMaskEiPhiiiRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEii(i32 %16, i8* %1, i32 %2, i32 %3, i32 %4, %"class.fxcrt::RetainPtr.9"* dereferenceable(8) %5, i32 %6, i32 %7) #13
  br label %976

29:                                               ; preds = %21, %19
  %30 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 1
  %31 = bitcast i32** %30 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = bitcast %"class.std::__1::vector"* %8 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = sub i64 %32, %34
  %36 = ashr exact i64 %35, 2
  %37 = icmp ult i64 %36, 256
  %38 = inttoptr i64 %34 to i32*
  br i1 %37, label %39, label %41

39:                                               ; preds = %29
  %40 = sub nuw nsw i64 256, %36
  tail call void @_ZNSt3__16vectorIj16FxAllocAllocatorIjEE8__appendEm(%"class.std::__1::vector"* %8, i64 %40) #13
  br label %45

41:                                               ; preds = %29
  %42 = icmp eq i64 %35, 1024
  br i1 %42, label %45, label %43

43:                                               ; preds = %41
  %44 = getelementptr inbounds i32, i32* %38, i64 256
  store i32* %44, i32** %30, align 8
  br label %45

45:                                               ; preds = %41, %39, %43
  switch i8 %20, label %170 [
    i8 8, label %46
    i8 1, label %46
  ]

46:                                               ; preds = %45, %45
  %47 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %11, align 8
  %48 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %47, i64 0, i32 6, i32 0, i32 0
  %49 = load i32*, i32** %48, align 8
  %50 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %47, i64 0, i32 6, i32 0, i32 1
  %51 = load i32*, i32** %50, align 8
  %52 = icmp eq i32* %49, %51
  br i1 %52, label %976, label %53

53:                                               ; preds = %46
  %54 = load i64, i64* %33, align 8
  %55 = load i64, i64* %31, align 8
  %56 = sub i64 %55, %54
  %57 = ashr exact i64 %56, 2
  %58 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %47, i64 0, i32 1
  %59 = load i16, i16* %58, align 8
  %60 = and i16 %59, 255
  %61 = icmp eq i16 %60, 1
  %62 = icmp sgt i32 %4, 0
  br i1 %61, label %76, label %63

63:                                               ; preds = %53
  br i1 %62, label %64, label %131

64:                                               ; preds = %63
  %65 = sext i32 %6 to i64
  %66 = sext i32 %3 to i64
  %67 = sext i32 %2 to i64
  %68 = zext i32 %4 to i64
  %69 = bitcast %class.CFX_DIBBase* %47 to i8* (%class.CFX_DIBBase*, i32)***
  %70 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %69, align 8
  %71 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %70, i64 3
  %72 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %71, align 8
  %73 = tail call i8* %72(%class.CFX_DIBBase* %47, i32 %7) #13
  %74 = getelementptr inbounds i8, i8* %73, i64 %65
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %74, i64 %66, i1 false) #13
  %75 = icmp eq i32 %4, 1
  br i1 %75, label %131, label %116

76:                                               ; preds = %53
  br i1 %62, label %77, label %131

77:                                               ; preds = %76
  %78 = sext i32 %3 to i64
  %79 = add nsw i32 %6, %3
  %80 = icmp sgt i32 %3, 0
  %81 = sext i32 %2 to i64
  %82 = zext i32 %4 to i64
  br label %83

83:                                               ; preds = %95, %77
  %84 = phi i64 [ 0, %77 ], [ %96, %95 ]
  %85 = mul nsw i64 %84, %81
  %86 = getelementptr inbounds i8, i8* %1, i64 %85
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %86, i8 -1, i64 %78, i1 false) #13
  %87 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %11, align 8
  %88 = bitcast %class.CFX_DIBBase* %87 to i8* (%class.CFX_DIBBase*, i32)***
  %89 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %88, align 8
  %90 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %89, i64 3
  %91 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %90, align 8
  %92 = trunc i64 %84 to i32
  %93 = add i32 %92, %7
  %94 = tail call i8* %91(%class.CFX_DIBBase* %87, i32 %93) #13
  br i1 %80, label %98, label %95

95:                                               ; preds = %112, %83
  %96 = add nuw nsw i64 %84, 1
  %97 = icmp eq i64 %96, %82
  br i1 %97, label %131, label %83

98:                                               ; preds = %83, %112
  %99 = phi i32 [ %114, %112 ], [ %6, %83 ]
  %100 = phi i8* [ %113, %112 ], [ %86, %83 ]
  %101 = sdiv i32 %99, 8
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds i8, i8* %94, i64 %102
  %104 = load i8, i8* %103, align 1
  %105 = zext i8 %104 to i32
  %106 = srem i32 %99, 8
  %107 = sub nsw i32 7, %106
  %108 = shl i32 1, %107
  %109 = and i32 %108, %105
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %112, label %111

111:                                              ; preds = %98
  store i8 0, i8* %100, align 1
  br label %112

112:                                              ; preds = %111, %98
  %113 = getelementptr inbounds i8, i8* %100, i64 1
  %114 = add nsw i32 %99, 1
  %115 = icmp slt i32 %114, %79
  br i1 %115, label %98, label %95

116:                                              ; preds = %64, %116
  %117 = phi i64 [ %129, %116 ], [ 1, %64 ]
  %118 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %11, align 8
  %119 = mul nsw i64 %117, %67
  %120 = getelementptr inbounds i8, i8* %1, i64 %119
  %121 = bitcast %class.CFX_DIBBase* %118 to i8* (%class.CFX_DIBBase*, i32)***
  %122 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %121, align 8
  %123 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %122, i64 3
  %124 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %123, align 8
  %125 = trunc i64 %117 to i32
  %126 = add i32 %125, %7
  %127 = tail call i8* %124(%class.CFX_DIBBase* %118, i32 %126) #13
  %128 = getelementptr inbounds i8, i8* %127, i64 %65
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %120, i8* align 1 %128, i64 %66, i1 false) #13
  %129 = add nuw nsw i64 %117, 1
  %130 = icmp eq i64 %129, %68
  br i1 %130, label %131, label %116

131:                                              ; preds = %116, %95, %76, %64, %63
  %132 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %11, align 8
  %133 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %132, i64 0, i32 1
  %134 = load i16, i16* %133, align 8
  %135 = and i16 %134, 256
  %136 = icmp eq i16 %135, 0
  br i1 %136, label %137, label %143

137:                                              ; preds = %131
  %138 = and i16 %134, 255
  %139 = icmp eq i16 %138, 8
  %140 = select i1 %139, i64 256, i64 0
  %141 = icmp eq i16 %138, 1
  %142 = select i1 %141, i64 2, i64 %140
  br label %143

143:                                              ; preds = %137, %131
  %144 = phi i64 [ 0, %131 ], [ %142, %137 ]
  %145 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %132, i64 0, i32 6
  %146 = bitcast %"class.std::__1::vector"* %145 to i64*
  %147 = load i64, i64* %146, align 8, !noalias !45
  %148 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %132, i64 0, i32 6, i32 0, i32 1
  %149 = bitcast i32** %148 to i64*
  %150 = load i64, i64* %149, align 8, !noalias !45
  %151 = sub i64 %150, %147
  %152 = ashr exact i64 %151, 2
  %153 = icmp ugt i64 %144, %152
  br i1 %153, label %154, label %155, !prof !8

154:                                              ; preds = %143
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !48
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !49
  unreachable

155:                                              ; preds = %143
  %156 = inttoptr i64 %147 to i32*
  %157 = icmp eq i64 %144, 0
  br i1 %157, label %976, label %158

158:                                              ; preds = %155
  %159 = inttoptr i64 %54 to i32*
  br label %160

160:                                              ; preds = %158, %164
  %161 = phi i64 [ %168, %164 ], [ 0, %158 ]
  %162 = icmp eq i64 %161, %57
  br i1 %162, label %163, label %164, !prof !8

163:                                              ; preds = %160
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !9
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !10
  unreachable

164:                                              ; preds = %160
  %165 = getelementptr inbounds i32, i32* %156, i64 %161
  %166 = load i32, i32* %165, align 4
  %167 = getelementptr inbounds i32, i32* %159, i64 %161
  store i32 %166, i32* %167, align 4
  %168 = add nuw nsw i64 %161, 1
  %169 = icmp eq i64 %168, %144
  br i1 %169, label %976, label %160

170:                                              ; preds = %45
  %171 = icmp ugt i16 %15, 23
  br i1 %171, label %172, label %976

172:                                              ; preds = %170
  %173 = load i64, i64* %33, align 8
  %174 = load i64, i64* %31, align 8
  %175 = sub i64 %174, %173
  %176 = ashr exact i64 %175, 2
  %177 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %11, align 8
  %178 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %177, i64 0, i32 1
  %179 = load i16, i16* %178, align 8
  %180 = lshr i16 %179, 3
  %181 = and i16 %180, 31
  %182 = zext i16 %181 to i64
  %183 = tail call i8* @_Znwm(i64 1024) #15
  %184 = bitcast i8* %183 to i32*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %183, i8 0, i64 1024, i1 false) #13
  %185 = tail call i8* @_Znwm(i64 32768) #15
  %186 = bitcast i8* %185 to %"struct.std::__1::pair"*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %185, i8 0, i64 32768, i1 false) #13
  %187 = load i16, i16* %178, align 8
  %188 = lshr i16 %187, 3
  %189 = and i16 %188, 31
  %190 = zext i16 %189 to i64
  %191 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %177, i64 0, i32 2
  %192 = load i32, i32* %191, align 4
  %193 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %177, i64 0, i32 3
  %194 = load i32, i32* %193, align 8
  %195 = icmp sgt i32 %194, 0
  br i1 %195, label %197, label %196

196:                                              ; preds = %208, %172
  br label %265

197:                                              ; preds = %172
  %198 = icmp sgt i32 %192, 0
  %199 = zext i32 %192 to i64
  br label %200

200:                                              ; preds = %211, %197
  %201 = phi %class.CFX_DIBBase* [ %177, %197 ], [ %212, %211 ]
  %202 = phi i32 [ 0, %197 ], [ %209, %211 ]
  %203 = bitcast %class.CFX_DIBBase* %201 to i8* (%class.CFX_DIBBase*, i32)***
  %204 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %203, align 8
  %205 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %204, i64 3
  %206 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %205, align 8
  %207 = tail call i8* %206(%class.CFX_DIBBase* %201, i32 %202) #13
  br i1 %198, label %213, label %208

208:                                              ; preds = %213, %200
  %209 = add nuw nsw i32 %202, 1
  %210 = icmp eq i32 %209, %194
  br i1 %210, label %196, label %211

211:                                              ; preds = %208
  %212 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %11, align 8
  br label %200

213:                                              ; preds = %200, %213
  %214 = phi i64 [ %234, %213 ], [ 0, %200 ]
  %215 = mul i64 %214, %190
  %216 = and i64 %215, 4294967295
  %217 = getelementptr inbounds i8, i8* %207, i64 %216
  %218 = load i8, i8* %217, align 1
  %219 = getelementptr inbounds i8, i8* %217, i64 1
  %220 = load i8, i8* %219, align 1
  %221 = and i8 %220, -16
  %222 = getelementptr inbounds i8, i8* %217, i64 2
  %223 = load i8, i8* %222, align 1
  %224 = and i8 %223, -16
  %225 = zext i8 %224 to i64
  %226 = shl nuw nsw i64 %225, 4
  %227 = lshr i8 %218, 4
  %228 = or i8 %221, %227
  %229 = zext i8 %228 to i64
  %230 = or i64 %226, %229
  %231 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %186, i64 %230, i32 0
  %232 = load i32, i32* %231, align 4
  %233 = add i32 %232, 1
  store i32 %233, i32* %231, align 4
  %234 = add nuw nsw i64 %214, 1
  %235 = icmp eq i64 %234, %199
  br i1 %235, label %208, label %213

236:                                              ; preds = %1002
  %237 = sext i32 %1003 to i64
  %238 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %186, i64 %237
  tail call fastcc void @"_ZNSt3__16__sortIRZN12_GLOBAL__N_111CFX_PaletteC1ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEEE3$_0PNS_4pairIjjEEEEvT0_SE_T_"(%"struct.std::__1::pair"* nonnull %186, %"struct.std::__1::pair"* %238) #13
  br label %239

239:                                              ; preds = %239, %236
  %240 = phi i64 [ 0, %236 ], [ %262, %239 ]
  %241 = phi i32 [ 0, %236 ], [ %263, %239 ]
  %242 = xor i32 %241, -1
  %243 = add i32 %1003, %242
  %244 = icmp slt i32 %243, 0
  %245 = add nsw i32 %243, 256
  %246 = select i1 %244, i32 %245, i32 %243
  %247 = sext i32 %246 to i64
  %248 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %186, i64 %247, i32 1
  %249 = load i32, i32* %248, align 4
  %250 = shl i32 %249, 4
  %251 = shl i32 %249, 12
  %252 = and i32 %251, 15728640
  %253 = shl i32 %249, 8
  %254 = and i32 %253, 61440
  %255 = and i32 %250, 240
  %256 = or i32 %252, %254
  %257 = or i32 %256, %255
  %258 = or i32 %257, -16777216
  %259 = getelementptr inbounds i32, i32* %184, i64 %240
  store i32 %258, i32* %259, align 4
  %260 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %186, i64 %247, i32 0
  %261 = trunc i64 %240 to i32
  store i32 %261, i32* %260, align 4
  %262 = add nuw nsw i64 %240, 1
  %263 = add nuw nsw i32 %241, 1
  %264 = icmp eq i64 %262, 256
  br i1 %264, label %283, label %239

265:                                              ; preds = %1002, %196
  %266 = phi i32 [ 0, %196 ], [ %1003, %1002 ]
  %267 = phi i64 [ 0, %196 ], [ %1004, %1002 ]
  %268 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %186, i64 %267, i32 0
  %269 = load i32, i32* %268, align 4
  %270 = icmp eq i32 %269, 0
  br i1 %270, label %277, label %271

271:                                              ; preds = %265
  %272 = sext i32 %266 to i64
  %273 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %186, i64 %272, i32 0
  store i32 %269, i32* %273, align 4
  %274 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %186, i64 %272, i32 1
  %275 = trunc i64 %267 to i32
  store i32 %275, i32* %274, align 4
  %276 = add nsw i32 %266, 1
  br label %277

277:                                              ; preds = %271, %265
  %278 = phi i32 [ %266, %265 ], [ %276, %271 ]
  %279 = or i64 %267, 1
  %280 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %186, i64 %279, i32 0
  %281 = load i32, i32* %280, align 4
  %282 = icmp eq i32 %281, 0
  br i1 %282, label %1002, label %996

283:                                              ; preds = %239
  %284 = icmp sgt i32 %1003, 256
  br i1 %284, label %285, label %326

285:                                              ; preds = %283
  %286 = add nsw i32 %1003, -256
  %287 = zext i32 %286 to i64
  br label %288

288:                                              ; preds = %297, %285
  %289 = phi i64 [ 0, %285 ], [ %299, %297 ]
  %290 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %186, i64 %289, i32 1
  %291 = load i32, i32* %290, align 4
  %292 = lshr i32 %291, 4
  %293 = and i32 %292, 240
  %294 = and i32 %291, 240
  %295 = shl i32 %291, 4
  %296 = and i32 %295, 240
  br label %301

297:                                              ; preds = %301
  %298 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %186, i64 %289, i32 0
  store i32 %322, i32* %298, align 4
  %299 = add nuw nsw i64 %289, 1
  %300 = icmp eq i64 %299, %287
  br i1 %300, label %326, label %288

301:                                              ; preds = %301, %288
  %302 = phi i64 [ 0, %288 ], [ %324, %301 ]
  %303 = phi i32 [ 1000000, %288 ], [ %323, %301 ]
  %304 = phi i32 [ 0, %288 ], [ %322, %301 ]
  %305 = getelementptr inbounds i32, i32* %184, i64 %302
  %306 = load i32, i32* %305, align 4
  %307 = lshr i32 %306, 16
  %308 = and i32 %307, 255
  %309 = sub nsw i32 %293, %308
  %310 = lshr i32 %306, 8
  %311 = and i32 %310, 255
  %312 = sub nsw i32 %294, %311
  %313 = and i32 %306, 255
  %314 = sub nsw i32 %296, %313
  %315 = mul nsw i32 %309, %309
  %316 = mul nsw i32 %312, %312
  %317 = mul nsw i32 %314, %314
  %318 = add nuw nsw i32 %316, %317
  %319 = add nuw nsw i32 %318, %315
  %320 = icmp slt i32 %319, %303
  %321 = trunc i64 %302 to i32
  %322 = select i1 %320, i32 %321, i32 %304
  %323 = select i1 %320, i32 %319, i32 %303
  %324 = add nuw nsw i64 %302, 1
  %325 = icmp eq i64 %324, 256
  br i1 %325, label %297, label %301

326:                                              ; preds = %297, %283
  %327 = icmp sgt i32 %4, 0
  br i1 %327, label %328, label %334

328:                                              ; preds = %326
  %329 = sext i32 %6 to i64
  %330 = icmp sgt i32 %3, 0
  %331 = sext i32 %2 to i64
  %332 = zext i32 %4 to i64
  %333 = zext i32 %3 to i64
  br label %336

334:                                              ; preds = %349, %326
  %335 = inttoptr i64 %173 to i32*
  br label %387

336:                                              ; preds = %349, %328
  %337 = phi i64 [ 0, %328 ], [ %350, %349 ]
  %338 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %11, align 8
  %339 = bitcast %class.CFX_DIBBase* %338 to i8* (%class.CFX_DIBBase*, i32)***
  %340 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %339, align 8
  %341 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %340, i64 3
  %342 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %341, align 8
  %343 = trunc i64 %337 to i32
  %344 = add i32 %343, %7
  %345 = tail call i8* %342(%class.CFX_DIBBase* %338, i32 %344) #13
  %346 = getelementptr inbounds i8, i8* %345, i64 %329
  %347 = mul nsw i64 %337, %331
  %348 = getelementptr inbounds i8, i8* %1, i64 %347
  br i1 %330, label %352, label %349

349:                                              ; preds = %384, %336
  %350 = add nuw nsw i64 %337, 1
  %351 = icmp eq i64 %350, %332
  br i1 %351, label %334, label %336

352:                                              ; preds = %336, %384
  %353 = phi i64 [ %385, %384 ], [ 0, %336 ]
  %354 = mul i64 %353, %182
  %355 = and i64 %354, 4294967295
  %356 = getelementptr inbounds i8, i8* %346, i64 %355
  %357 = getelementptr inbounds i8, i8* %356, i64 2
  %358 = load i8, i8* %357, align 1
  %359 = and i8 %358, -16
  %360 = zext i8 %359 to i32
  %361 = getelementptr inbounds i8, i8* %356, i64 1
  %362 = load i8, i8* %361, align 1
  %363 = and i8 %362, -16
  %364 = zext i8 %363 to i32
  %365 = load i8, i8* %356, align 1
  %366 = shl nuw nsw i32 %360, 4
  %367 = or i32 %366, %364
  %368 = lshr i8 %365, 4
  %369 = zext i8 %368 to i32
  %370 = or i32 %367, %369
  br label %371

371:                                              ; preds = %375, %352
  %372 = phi i64 [ %373, %375 ], [ %237, %352 ]
  %373 = add nsw i64 %372, -1
  %374 = icmp sgt i64 %372, 0
  br i1 %374, label %375, label %384

375:                                              ; preds = %371
  %376 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %186, i64 %373, i32 1
  %377 = load i32, i32* %376, align 4
  %378 = icmp eq i32 %370, %377
  br i1 %378, label %379, label %371

379:                                              ; preds = %375
  %380 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %186, i64 %373, i32 0
  %381 = load i32, i32* %380, align 4
  %382 = trunc i32 %381 to i8
  %383 = getelementptr inbounds i8, i8* %348, i64 %353
  store i8 %382, i8* %383, align 1
  br label %384

384:                                              ; preds = %371, %379
  %385 = add nuw nsw i64 %353, 1
  %386 = icmp eq i64 %385, %333
  br i1 %386, label %349, label %352

387:                                              ; preds = %990, %334
  %388 = phi i64 [ 0, %334 ], [ %994, %990 ]
  %389 = icmp eq i64 %388, %176
  br i1 %389, label %390, label %391, !prof !8

390:                                              ; preds = %984, %978, %391, %387
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !9
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !10
  unreachable

391:                                              ; preds = %387
  %392 = getelementptr inbounds i32, i32* %184, i64 %388
  %393 = load i32, i32* %392, align 4
  %394 = getelementptr inbounds i32, i32* %335, i64 %388
  store i32 %393, i32* %394, align 4
  %395 = or i64 %388, 1
  %396 = icmp eq i64 %395, %176
  br i1 %396, label %390, label %978, !prof !8

397:                                              ; preds = %990
  tail call void @_ZdlPv(i8* nonnull %185) #15
  tail call void @_ZdlPv(i8* nonnull %183) #15
  br label %976

398:                                              ; preds = %9
  %399 = trunc i16 %14 to i8
  switch i8 %399, label %976 [
    i8 1, label %400
    i8 8, label %449
    i8 24, label %608
    i8 32, label %639
  ]

400:                                              ; preds = %398
  %401 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %12, i64 0, i32 6, i32 0, i32 0
  %402 = load i32*, i32** %401, align 8
  %403 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %12, i64 0, i32 6, i32 0, i32 1
  %404 = load i32*, i32** %403, align 8
  %405 = icmp eq i32* %402, %404
  br i1 %405, label %407, label %406

406:                                              ; preds = %400
  tail call fastcc void @_ZN12_GLOBAL__N_125ConvertBuffer_1bppPlt2RgbE12FXDIB_FormatPhiiiRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEii(i16 zeroext 24, i8* %1, i32 %2, i32 %3, i32 %4, %"class.fxcrt::RetainPtr.9"* dereferenceable(8) %5, i32 %6, i32 %7) #13
  br label %976

407:                                              ; preds = %400
  %408 = icmp sgt i32 %4, 0
  br i1 %408, label %409, label %976

409:                                              ; preds = %407
  %410 = add nsw i32 %6, %3
  %411 = icmp sgt i32 %3, 0
  %412 = sext i32 %2 to i64
  %413 = zext i32 %4 to i64
  br label %414

414:                                              ; preds = %430, %409
  %415 = phi %class.CFX_DIBBase* [ %12, %409 ], [ %431, %430 ]
  %416 = phi i64 [ 0, %409 ], [ %428, %430 ]
  %417 = bitcast %class.CFX_DIBBase* %415 to i8* (%class.CFX_DIBBase*, i32)***
  %418 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %417, align 8
  %419 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %418, i64 3
  %420 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %419, align 8
  %421 = trunc i64 %416 to i32
  %422 = add i32 %421, %7
  %423 = tail call i8* %420(%class.CFX_DIBBase* %415, i32 %422) #13
  br i1 %411, label %424, label %427

424:                                              ; preds = %414
  %425 = mul nsw i64 %416, %412
  %426 = getelementptr inbounds i8, i8* %1, i64 %425
  br label %432

427:                                              ; preds = %432, %414
  %428 = add nuw nsw i64 %416, 1
  %429 = icmp eq i64 %428, %413
  br i1 %429, label %976, label %430

430:                                              ; preds = %427
  %431 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %11, align 8
  br label %414

432:                                              ; preds = %432, %424
  %433 = phi i32 [ %447, %432 ], [ %6, %424 ]
  %434 = phi i8* [ %446, %432 ], [ %426, %424 ]
  %435 = sdiv i32 %433, 8
  %436 = sext i32 %435 to i64
  %437 = getelementptr inbounds i8, i8* %423, i64 %436
  %438 = load i8, i8* %437, align 1
  %439 = zext i8 %438 to i32
  %440 = srem i32 %433, 8
  %441 = sub nsw i32 7, %440
  %442 = shl i32 1, %441
  %443 = and i32 %442, %439
  %444 = icmp ne i32 %443, 0
  %445 = sext i1 %444 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %434, i8 %445, i64 3, i1 false) #13
  %446 = getelementptr inbounds i8, i8* %434, i64 3
  %447 = add nsw i32 %433, 1
  %448 = icmp slt i32 %447, %410
  br i1 %448, label %432, label %427

449:                                              ; preds = %398
  %450 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %12, i64 0, i32 6, i32 0, i32 0
  %451 = load i32*, i32** %450, align 8
  %452 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %12, i64 0, i32 6, i32 0, i32 1
  %453 = load i32*, i32** %452, align 8
  %454 = icmp eq i32* %451, %453
  br i1 %454, label %535, label %455

455:                                              ; preds = %449
  %456 = ptrtoint i32* %453 to i64
  %457 = ptrtoint i32* %451 to i64
  %458 = sub i64 %456, %457
  %459 = ashr exact i64 %458, 2
  %460 = bitcast [256 x i32]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %460) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %460, i8 -86, i64 1024, i1 false) #13
  br label %472

461:                                              ; preds = %1006
  %462 = icmp sgt i32 %4, 0
  br i1 %462, label %463, label %534

463:                                              ; preds = %461
  %464 = sext i32 %6 to i64
  %465 = icmp sgt i32 %3, 0
  %466 = sext i32 %2 to i64
  %467 = zext i32 %4 to i64
  %468 = and i32 %3, 1
  %469 = icmp eq i32 %3, 1
  %470 = sub i32 %3, %468
  %471 = icmp eq i32 %468, 0
  br label %491

472:                                              ; preds = %1006, %455
  %473 = phi i64 [ 0, %455 ], [ %1020, %1006 ]
  %474 = phi i8* [ %460, %455 ], [ %1019, %1006 ]
  %475 = icmp eq i64 %473, %459
  br i1 %475, label %476, label %477, !prof !8

476:                                              ; preds = %477, %472
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !9
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !10
  unreachable

477:                                              ; preds = %472
  %478 = getelementptr inbounds i32, i32* %451, i64 %473
  %479 = load i32, i32* %478, align 4
  %480 = trunc i32 %479 to i8
  %481 = getelementptr inbounds i8, i8* %474, i64 1
  store i8 %480, i8* %474, align 1
  %482 = load i32, i32* %478, align 4
  %483 = lshr i32 %482, 8
  %484 = trunc i32 %483 to i8
  %485 = getelementptr inbounds i8, i8* %474, i64 2
  store i8 %484, i8* %481, align 1
  %486 = load i32, i32* %478, align 4
  %487 = lshr i32 %486, 16
  %488 = trunc i32 %487 to i8
  store i8 %488, i8* %485, align 1
  %489 = or i64 %473, 1
  %490 = icmp eq i64 %489, %459
  br i1 %490, label %476, label %1006, !prof !8

491:                                              ; preds = %513, %463
  %492 = phi i64 [ 0, %463 ], [ %514, %513 ]
  %493 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %11, align 8
  %494 = bitcast %class.CFX_DIBBase* %493 to i8* (%class.CFX_DIBBase*, i32)***
  %495 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %494, align 8
  %496 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %495, i64 3
  %497 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %496, align 8
  %498 = trunc i64 %492 to i32
  %499 = add i32 %498, %7
  %500 = tail call i8* %497(%class.CFX_DIBBase* %493, i32 %499) #13
  br i1 %465, label %501, label %513

501:                                              ; preds = %491
  %502 = getelementptr inbounds i8, i8* %500, i64 %464
  %503 = mul nsw i64 %492, %466
  %504 = getelementptr inbounds i8, i8* %1, i64 %503
  br i1 %469, label %505, label %516

505:                                              ; preds = %516, %501
  %506 = phi i8* [ %502, %501 ], [ %526, %516 ]
  %507 = phi i8* [ %504, %501 ], [ %531, %516 ]
  br i1 %471, label %513, label %508

508:                                              ; preds = %505
  %509 = load i8, i8* %506, align 1
  %510 = zext i8 %509 to i64
  %511 = mul nuw nsw i64 %510, 3
  %512 = getelementptr inbounds i8, i8* %460, i64 %511
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %507, i8* align 1 %512, i64 3, i1 false) #13
  br label %513

513:                                              ; preds = %508, %505, %491
  %514 = add nuw nsw i64 %492, 1
  %515 = icmp eq i64 %514, %467
  br i1 %515, label %534, label %491

516:                                              ; preds = %501, %516
  %517 = phi i8* [ %526, %516 ], [ %502, %501 ]
  %518 = phi i8* [ %531, %516 ], [ %504, %501 ]
  %519 = phi i32 [ %532, %516 ], [ %470, %501 ]
  %520 = getelementptr inbounds i8, i8* %517, i64 1
  %521 = load i8, i8* %517, align 1
  %522 = zext i8 %521 to i64
  %523 = mul nuw nsw i64 %522, 3
  %524 = getelementptr inbounds i8, i8* %460, i64 %523
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %518, i8* align 1 %524, i64 3, i1 false) #13
  %525 = getelementptr inbounds i8, i8* %518, i64 3
  %526 = getelementptr inbounds i8, i8* %517, i64 2
  %527 = load i8, i8* %520, align 1
  %528 = zext i8 %527 to i64
  %529 = mul nuw nsw i64 %528, 3
  %530 = getelementptr inbounds i8, i8* %460, i64 %529
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %525, i8* align 1 %530, i64 3, i1 false) #13
  %531 = getelementptr inbounds i8, i8* %518, i64 6
  %532 = add i32 %519, -2
  %533 = icmp eq i32 %532, 0
  br i1 %533, label %505, label %516

534:                                              ; preds = %513, %461
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %460) #13
  br label %976

535:                                              ; preds = %449
  %536 = icmp sgt i32 %4, 0
  br i1 %536, label %537, label %976

537:                                              ; preds = %535
  %538 = sext i32 %6 to i64
  %539 = icmp sgt i32 %3, 0
  %540 = sext i32 %2 to i64
  %541 = zext i32 %4 to i64
  %542 = add i32 %3, -1
  %543 = and i32 %3, 7
  %544 = icmp ult i32 %542, 7
  %545 = sub i32 %3, %543
  %546 = icmp eq i32 %543, 0
  br label %547

547:                                              ; preds = %576, %537
  %548 = phi %class.CFX_DIBBase* [ %12, %537 ], [ %577, %576 ]
  %549 = phi i64 [ 0, %537 ], [ %574, %576 ]
  %550 = bitcast %class.CFX_DIBBase* %548 to i8* (%class.CFX_DIBBase*, i32)***
  %551 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %550, align 8
  %552 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %551, i64 3
  %553 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %552, align 8
  %554 = trunc i64 %549 to i32
  %555 = add i32 %554, %7
  %556 = tail call i8* %553(%class.CFX_DIBBase* %548, i32 %555) #13
  br i1 %539, label %557, label %573

557:                                              ; preds = %547
  %558 = getelementptr inbounds i8, i8* %556, i64 %538
  %559 = mul nsw i64 %549, %540
  %560 = getelementptr inbounds i8, i8* %1, i64 %559
  br i1 %544, label %561, label %578

561:                                              ; preds = %578, %557
  %562 = phi i8* [ %558, %557 ], [ %605, %578 ]
  %563 = phi i8* [ %560, %557 ], [ %604, %578 ]
  br i1 %546, label %573, label %564

564:                                              ; preds = %561, %564
  %565 = phi i8* [ %570, %564 ], [ %562, %561 ]
  %566 = phi i8* [ %569, %564 ], [ %563, %561 ]
  %567 = phi i32 [ %571, %564 ], [ %543, %561 ]
  %568 = load i8, i8* %565, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %566, i8 %568, i64 3, i1 false) #13
  %569 = getelementptr inbounds i8, i8* %566, i64 3
  %570 = getelementptr inbounds i8, i8* %565, i64 1
  %571 = add i32 %567, -1
  %572 = icmp eq i32 %571, 0
  br i1 %572, label %573, label %564, !llvm.loop !50

573:                                              ; preds = %561, %564, %547
  %574 = add nuw nsw i64 %549, 1
  %575 = icmp eq i64 %574, %541
  br i1 %575, label %976, label %576

576:                                              ; preds = %573
  %577 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %11, align 8
  br label %547

578:                                              ; preds = %557, %578
  %579 = phi i8* [ %605, %578 ], [ %558, %557 ]
  %580 = phi i8* [ %604, %578 ], [ %560, %557 ]
  %581 = phi i32 [ %606, %578 ], [ %545, %557 ]
  %582 = load i8, i8* %579, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %580, i8 %582, i64 3, i1 false) #13
  %583 = getelementptr inbounds i8, i8* %580, i64 3
  %584 = getelementptr inbounds i8, i8* %579, i64 1
  %585 = load i8, i8* %584, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %583, i8 %585, i64 3, i1 false) #13
  %586 = getelementptr inbounds i8, i8* %580, i64 6
  %587 = getelementptr inbounds i8, i8* %579, i64 2
  %588 = load i8, i8* %587, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %586, i8 %588, i64 3, i1 false) #13
  %589 = getelementptr inbounds i8, i8* %580, i64 9
  %590 = getelementptr inbounds i8, i8* %579, i64 3
  %591 = load i8, i8* %590, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %589, i8 %591, i64 3, i1 false) #13
  %592 = getelementptr inbounds i8, i8* %580, i64 12
  %593 = getelementptr inbounds i8, i8* %579, i64 4
  %594 = load i8, i8* %593, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %592, i8 %594, i64 3, i1 false) #13
  %595 = getelementptr inbounds i8, i8* %580, i64 15
  %596 = getelementptr inbounds i8, i8* %579, i64 5
  %597 = load i8, i8* %596, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %595, i8 %597, i64 3, i1 false) #13
  %598 = getelementptr inbounds i8, i8* %580, i64 18
  %599 = getelementptr inbounds i8, i8* %579, i64 6
  %600 = load i8, i8* %599, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %598, i8 %600, i64 3, i1 false) #13
  %601 = getelementptr inbounds i8, i8* %580, i64 21
  %602 = getelementptr inbounds i8, i8* %579, i64 7
  %603 = load i8, i8* %602, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %601, i8 %603, i64 3, i1 false) #13
  %604 = getelementptr inbounds i8, i8* %580, i64 24
  %605 = getelementptr inbounds i8, i8* %579, i64 8
  %606 = add i32 %581, -8
  %607 = icmp eq i32 %606, 0
  br i1 %607, label %561, label %578

608:                                              ; preds = %398
  %609 = icmp sgt i32 %4, 0
  br i1 %609, label %610, label %976

610:                                              ; preds = %608
  %611 = mul nsw i32 %6, 3
  %612 = sext i32 %611 to i64
  %613 = mul nsw i32 %3, 3
  %614 = sext i32 %613 to i64
  %615 = sext i32 %2 to i64
  %616 = zext i32 %4 to i64
  %617 = bitcast %class.CFX_DIBBase* %12 to i8* (%class.CFX_DIBBase*, i32)***
  %618 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %617, align 8
  %619 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %618, i64 3
  %620 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %619, align 8
  %621 = tail call i8* %620(%class.CFX_DIBBase* %12, i32 %7) #13
  %622 = getelementptr inbounds i8, i8* %621, i64 %612
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %622, i64 %614, i1 false) #13
  %623 = icmp eq i32 %4, 1
  br i1 %623, label %976, label %624

624:                                              ; preds = %610, %624
  %625 = phi i64 [ %637, %624 ], [ 1, %610 ]
  %626 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %11, align 8
  %627 = mul nsw i64 %625, %615
  %628 = getelementptr inbounds i8, i8* %1, i64 %627
  %629 = bitcast %class.CFX_DIBBase* %626 to i8* (%class.CFX_DIBBase*, i32)***
  %630 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %629, align 8
  %631 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %630, i64 3
  %632 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %631, align 8
  %633 = trunc i64 %625 to i32
  %634 = add i32 %633, %7
  %635 = tail call i8* %632(%class.CFX_DIBBase* %626, i32 %634) #13
  %636 = getelementptr inbounds i8, i8* %635, i64 %612
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %628, i8* align 1 %636, i64 %614, i1 false) #13
  %637 = add nuw nsw i64 %625, 1
  %638 = icmp eq i64 %637, %616
  br i1 %638, label %976, label %624

639:                                              ; preds = %398
  %640 = icmp sgt i32 %4, 0
  br i1 %640, label %641, label %976

641:                                              ; preds = %639
  %642 = shl nsw i32 %6, 2
  %643 = sext i32 %642 to i64
  %644 = icmp sgt i32 %3, 0
  %645 = sext i32 %2 to i64
  %646 = zext i32 %4 to i64
  %647 = add i32 %3, -1
  %648 = and i32 %3, 3
  %649 = icmp ult i32 %647, 3
  %650 = sub i32 %3, %648
  %651 = icmp eq i32 %648, 0
  br label %652

652:                                              ; preds = %680, %641
  %653 = phi %class.CFX_DIBBase* [ %12, %641 ], [ %681, %680 ]
  %654 = phi i64 [ 0, %641 ], [ %678, %680 ]
  %655 = bitcast %class.CFX_DIBBase* %653 to i8* (%class.CFX_DIBBase*, i32)***
  %656 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %655, align 8
  %657 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %656, i64 3
  %658 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %657, align 8
  %659 = trunc i64 %654 to i32
  %660 = add i32 %659, %7
  %661 = tail call i8* %658(%class.CFX_DIBBase* %653, i32 %660) #13
  br i1 %644, label %662, label %677

662:                                              ; preds = %652
  %663 = getelementptr inbounds i8, i8* %661, i64 %643
  %664 = mul nsw i64 %654, %645
  %665 = getelementptr inbounds i8, i8* %1, i64 %664
  br i1 %649, label %666, label %682

666:                                              ; preds = %682, %662
  %667 = phi i8* [ %663, %662 ], [ %693, %682 ]
  %668 = phi i8* [ %665, %662 ], [ %692, %682 ]
  br i1 %651, label %677, label %669

669:                                              ; preds = %666, %669
  %670 = phi i8* [ %674, %669 ], [ %667, %666 ]
  %671 = phi i8* [ %673, %669 ], [ %668, %666 ]
  %672 = phi i32 [ %675, %669 ], [ %648, %666 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %671, i8* align 1 %670, i64 3, i1 false) #13
  %673 = getelementptr inbounds i8, i8* %671, i64 3
  %674 = getelementptr inbounds i8, i8* %670, i64 4
  %675 = add i32 %672, -1
  %676 = icmp eq i32 %675, 0
  br i1 %676, label %677, label %669, !llvm.loop !51

677:                                              ; preds = %666, %669, %652
  %678 = add nuw nsw i64 %654, 1
  %679 = icmp eq i64 %678, %646
  br i1 %679, label %976, label %680

680:                                              ; preds = %677
  %681 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %11, align 8
  br label %652

682:                                              ; preds = %662, %682
  %683 = phi i8* [ %693, %682 ], [ %663, %662 ]
  %684 = phi i8* [ %692, %682 ], [ %665, %662 ]
  %685 = phi i32 [ %694, %682 ], [ %650, %662 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %684, i8* align 1 %683, i64 3, i1 false) #13
  %686 = getelementptr inbounds i8, i8* %684, i64 3
  %687 = getelementptr inbounds i8, i8* %683, i64 4
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %686, i8* align 1 %687, i64 3, i1 false) #13
  %688 = getelementptr inbounds i8, i8* %684, i64 6
  %689 = getelementptr inbounds i8, i8* %683, i64 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %688, i8* align 1 %689, i64 3, i1 false) #13
  %690 = getelementptr inbounds i8, i8* %684, i64 9
  %691 = getelementptr inbounds i8, i8* %683, i64 12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %690, i8* align 1 %691, i64 3, i1 false) #13
  %692 = getelementptr inbounds i8, i8* %684, i64 12
  %693 = getelementptr inbounds i8, i8* %683, i64 16
  %694 = add i32 %685, -4
  %695 = icmp eq i32 %694, 0
  br i1 %695, label %666, label %682

696:                                              ; preds = %9, %9
  %697 = trunc i16 %14 to i8
  switch i8 %697, label %976 [
    i8 1, label %698
    i8 8, label %750
    i8 24, label %915
    i8 32, label %915
  ]

698:                                              ; preds = %696
  %699 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %12, i64 0, i32 6, i32 0, i32 0
  %700 = load i32*, i32** %699, align 8
  %701 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %12, i64 0, i32 6, i32 0, i32 1
  %702 = load i32*, i32** %701, align 8
  %703 = icmp eq i32* %700, %702
  br i1 %703, label %705, label %704

704:                                              ; preds = %698
  tail call fastcc void @_ZN12_GLOBAL__N_125ConvertBuffer_1bppPlt2RgbE12FXDIB_FormatPhiiiRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEii(i16 zeroext %0, i8* %1, i32 %2, i32 %3, i32 %4, %"class.fxcrt::RetainPtr.9"* dereferenceable(8) %5, i32 %6, i32 %7) #13
  br label %976

705:                                              ; preds = %698
  %706 = icmp sgt i32 %4, 0
  br i1 %706, label %707, label %976

707:                                              ; preds = %705
  %708 = lshr i16 %0, 3
  %709 = and i16 %708, 31
  %710 = add nsw i32 %6, %3
  %711 = icmp sgt i32 %3, 0
  %712 = zext i16 %709 to i64
  %713 = sext i32 %2 to i64
  %714 = zext i32 %4 to i64
  br label %715

715:                                              ; preds = %731, %707
  %716 = phi %class.CFX_DIBBase* [ %12, %707 ], [ %732, %731 ]
  %717 = phi i64 [ 0, %707 ], [ %729, %731 ]
  %718 = bitcast %class.CFX_DIBBase* %716 to i8* (%class.CFX_DIBBase*, i32)***
  %719 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %718, align 8
  %720 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %719, i64 3
  %721 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %720, align 8
  %722 = trunc i64 %717 to i32
  %723 = add i32 %722, %7
  %724 = tail call i8* %721(%class.CFX_DIBBase* %716, i32 %723) #13
  br i1 %711, label %725, label %728

725:                                              ; preds = %715
  %726 = mul nsw i64 %717, %713
  %727 = getelementptr inbounds i8, i8* %1, i64 %726
  br label %733

728:                                              ; preds = %733, %715
  %729 = add nuw nsw i64 %717, 1
  %730 = icmp eq i64 %729, %714
  br i1 %730, label %976, label %731

731:                                              ; preds = %728
  %732 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %11, align 8
  br label %715

733:                                              ; preds = %733, %725
  %734 = phi i32 [ %748, %733 ], [ %6, %725 ]
  %735 = phi i8* [ %747, %733 ], [ %727, %725 ]
  %736 = sdiv i32 %734, 8
  %737 = sext i32 %736 to i64
  %738 = getelementptr inbounds i8, i8* %724, i64 %737
  %739 = load i8, i8* %738, align 1
  %740 = zext i8 %739 to i32
  %741 = srem i32 %734, 8
  %742 = sub nsw i32 7, %741
  %743 = shl i32 1, %742
  %744 = and i32 %743, %740
  %745 = icmp ne i32 %744, 0
  %746 = sext i1 %745 to i8
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %735, i8 %746, i64 3, i1 false) #13
  %747 = getelementptr inbounds i8, i8* %735, i64 %712
  %748 = add nsw i32 %734, 1
  %749 = icmp slt i32 %748, %710
  br i1 %749, label %733, label %728

750:                                              ; preds = %696
  %751 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %12, i64 0, i32 6, i32 0, i32 0
  %752 = load i32*, i32** %751, align 8
  %753 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %12, i64 0, i32 6, i32 0, i32 1
  %754 = load i32*, i32** %753, align 8
  %755 = icmp eq i32* %752, %754
  br i1 %755, label %839, label %756

756:                                              ; preds = %750
  %757 = ptrtoint i32* %754 to i64
  %758 = ptrtoint i32* %752 to i64
  %759 = lshr i16 %0, 3
  %760 = and i16 %759, 31
  %761 = sub i64 %757, %758
  %762 = ashr exact i64 %761, 2
  %763 = bitcast [256 x i32]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %763) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %763, i8 -86, i64 1024, i1 false) #13
  br label %776

764:                                              ; preds = %1022
  %765 = icmp sgt i32 %4, 0
  br i1 %765, label %766, label %838

766:                                              ; preds = %764
  %767 = sext i32 %6 to i64
  %768 = icmp sgt i32 %3, 0
  %769 = zext i16 %760 to i64
  %770 = sext i32 %2 to i64
  %771 = zext i32 %4 to i64
  %772 = and i32 %3, 1
  %773 = icmp eq i32 %3, 1
  %774 = sub i32 %3, %772
  %775 = icmp eq i32 %772, 0
  br label %795

776:                                              ; preds = %1022, %756
  %777 = phi i64 [ 0, %756 ], [ %1036, %1022 ]
  %778 = phi i8* [ %763, %756 ], [ %1035, %1022 ]
  %779 = icmp eq i64 %777, %762
  br i1 %779, label %780, label %781, !prof !8

780:                                              ; preds = %781, %776
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !9
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !10
  unreachable

781:                                              ; preds = %776
  %782 = getelementptr inbounds i32, i32* %752, i64 %777
  %783 = load i32, i32* %782, align 4
  %784 = trunc i32 %783 to i8
  %785 = getelementptr inbounds i8, i8* %778, i64 1
  store i8 %784, i8* %778, align 1
  %786 = load i32, i32* %782, align 4
  %787 = lshr i32 %786, 8
  %788 = trunc i32 %787 to i8
  %789 = getelementptr inbounds i8, i8* %778, i64 2
  store i8 %788, i8* %785, align 1
  %790 = load i32, i32* %782, align 4
  %791 = lshr i32 %790, 16
  %792 = trunc i32 %791 to i8
  store i8 %792, i8* %789, align 1
  %793 = or i64 %777, 1
  %794 = icmp eq i64 %793, %762
  br i1 %794, label %780, label %1022, !prof !8

795:                                              ; preds = %817, %766
  %796 = phi i64 [ 0, %766 ], [ %818, %817 ]
  %797 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %11, align 8
  %798 = bitcast %class.CFX_DIBBase* %797 to i8* (%class.CFX_DIBBase*, i32)***
  %799 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %798, align 8
  %800 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %799, i64 3
  %801 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %800, align 8
  %802 = trunc i64 %796 to i32
  %803 = add i32 %802, %7
  %804 = tail call i8* %801(%class.CFX_DIBBase* %797, i32 %803) #13
  br i1 %768, label %805, label %817

805:                                              ; preds = %795
  %806 = getelementptr inbounds i8, i8* %804, i64 %767
  %807 = mul nsw i64 %796, %770
  %808 = getelementptr inbounds i8, i8* %1, i64 %807
  br i1 %773, label %809, label %820

809:                                              ; preds = %820, %805
  %810 = phi i8* [ %806, %805 ], [ %830, %820 ]
  %811 = phi i8* [ %808, %805 ], [ %835, %820 ]
  br i1 %775, label %817, label %812

812:                                              ; preds = %809
  %813 = load i8, i8* %810, align 1
  %814 = zext i8 %813 to i64
  %815 = mul nuw nsw i64 %814, 3
  %816 = getelementptr inbounds i8, i8* %763, i64 %815
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %811, i8* align 1 %816, i64 3, i1 false) #13
  br label %817

817:                                              ; preds = %812, %809, %795
  %818 = add nuw nsw i64 %796, 1
  %819 = icmp eq i64 %818, %771
  br i1 %819, label %838, label %795

820:                                              ; preds = %805, %820
  %821 = phi i8* [ %830, %820 ], [ %806, %805 ]
  %822 = phi i8* [ %835, %820 ], [ %808, %805 ]
  %823 = phi i32 [ %836, %820 ], [ %774, %805 ]
  %824 = getelementptr inbounds i8, i8* %821, i64 1
  %825 = load i8, i8* %821, align 1
  %826 = zext i8 %825 to i64
  %827 = mul nuw nsw i64 %826, 3
  %828 = getelementptr inbounds i8, i8* %763, i64 %827
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %822, i8* align 1 %828, i64 3, i1 false) #13
  %829 = getelementptr inbounds i8, i8* %822, i64 %769
  %830 = getelementptr inbounds i8, i8* %821, i64 2
  %831 = load i8, i8* %824, align 1
  %832 = zext i8 %831 to i64
  %833 = mul nuw nsw i64 %832, 3
  %834 = getelementptr inbounds i8, i8* %763, i64 %833
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %829, i8* align 1 %834, i64 3, i1 false) #13
  %835 = getelementptr inbounds i8, i8* %829, i64 %769
  %836 = add i32 %823, -2
  %837 = icmp eq i32 %836, 0
  br i1 %837, label %809, label %820

838:                                              ; preds = %817, %764
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %763) #13
  br label %976

839:                                              ; preds = %750
  %840 = icmp sgt i32 %4, 0
  br i1 %840, label %841, label %976

841:                                              ; preds = %839
  %842 = lshr i16 %0, 3
  %843 = and i16 %842, 31
  %844 = sext i32 %6 to i64
  %845 = icmp sgt i32 %3, 0
  %846 = zext i16 %843 to i64
  %847 = sext i32 %2 to i64
  %848 = zext i32 %4 to i64
  %849 = add i32 %3, -1
  %850 = and i32 %3, 7
  %851 = icmp ult i32 %849, 7
  %852 = sub i32 %3, %850
  %853 = icmp eq i32 %850, 0
  br label %854

854:                                              ; preds = %883, %841
  %855 = phi %class.CFX_DIBBase* [ %12, %841 ], [ %884, %883 ]
  %856 = phi i64 [ 0, %841 ], [ %881, %883 ]
  %857 = bitcast %class.CFX_DIBBase* %855 to i8* (%class.CFX_DIBBase*, i32)***
  %858 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %857, align 8
  %859 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %858, i64 3
  %860 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %859, align 8
  %861 = trunc i64 %856 to i32
  %862 = add i32 %861, %7
  %863 = tail call i8* %860(%class.CFX_DIBBase* %855, i32 %862) #13
  br i1 %845, label %864, label %880

864:                                              ; preds = %854
  %865 = getelementptr inbounds i8, i8* %863, i64 %844
  %866 = mul nsw i64 %856, %847
  %867 = getelementptr inbounds i8, i8* %1, i64 %866
  br i1 %851, label %868, label %885

868:                                              ; preds = %885, %864
  %869 = phi i8* [ %865, %864 ], [ %912, %885 ]
  %870 = phi i8* [ %867, %864 ], [ %911, %885 ]
  br i1 %853, label %880, label %871

871:                                              ; preds = %868, %871
  %872 = phi i8* [ %877, %871 ], [ %869, %868 ]
  %873 = phi i8* [ %876, %871 ], [ %870, %868 ]
  %874 = phi i32 [ %878, %871 ], [ %850, %868 ]
  %875 = load i8, i8* %872, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %873, i8 %875, i64 3, i1 false) #13
  %876 = getelementptr inbounds i8, i8* %873, i64 %846
  %877 = getelementptr inbounds i8, i8* %872, i64 1
  %878 = add i32 %874, -1
  %879 = icmp eq i32 %878, 0
  br i1 %879, label %880, label %871, !llvm.loop !52

880:                                              ; preds = %868, %871, %854
  %881 = add nuw nsw i64 %856, 1
  %882 = icmp eq i64 %881, %848
  br i1 %882, label %976, label %883

883:                                              ; preds = %880
  %884 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %11, align 8
  br label %854

885:                                              ; preds = %864, %885
  %886 = phi i8* [ %912, %885 ], [ %865, %864 ]
  %887 = phi i8* [ %911, %885 ], [ %867, %864 ]
  %888 = phi i32 [ %913, %885 ], [ %852, %864 ]
  %889 = load i8, i8* %886, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %887, i8 %889, i64 3, i1 false) #13
  %890 = getelementptr inbounds i8, i8* %887, i64 %846
  %891 = getelementptr inbounds i8, i8* %886, i64 1
  %892 = load i8, i8* %891, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %890, i8 %892, i64 3, i1 false) #13
  %893 = getelementptr inbounds i8, i8* %890, i64 %846
  %894 = getelementptr inbounds i8, i8* %886, i64 2
  %895 = load i8, i8* %894, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %893, i8 %895, i64 3, i1 false) #13
  %896 = getelementptr inbounds i8, i8* %893, i64 %846
  %897 = getelementptr inbounds i8, i8* %886, i64 3
  %898 = load i8, i8* %897, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %896, i8 %898, i64 3, i1 false) #13
  %899 = getelementptr inbounds i8, i8* %896, i64 %846
  %900 = getelementptr inbounds i8, i8* %886, i64 4
  %901 = load i8, i8* %900, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %899, i8 %901, i64 3, i1 false) #13
  %902 = getelementptr inbounds i8, i8* %899, i64 %846
  %903 = getelementptr inbounds i8, i8* %886, i64 5
  %904 = load i8, i8* %903, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %902, i8 %904, i64 3, i1 false) #13
  %905 = getelementptr inbounds i8, i8* %902, i64 %846
  %906 = getelementptr inbounds i8, i8* %886, i64 6
  %907 = load i8, i8* %906, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %905, i8 %907, i64 3, i1 false) #13
  %908 = getelementptr inbounds i8, i8* %905, i64 %846
  %909 = getelementptr inbounds i8, i8* %886, i64 7
  %910 = load i8, i8* %909, align 1
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %908, i8 %910, i64 3, i1 false) #13
  %911 = getelementptr inbounds i8, i8* %908, i64 %846
  %912 = getelementptr inbounds i8, i8* %886, i64 8
  %913 = add i32 %888, -8
  %914 = icmp eq i32 %913, 0
  br i1 %914, label %868, label %885

915:                                              ; preds = %696, %696
  %916 = lshr i16 %14, 3
  %917 = and i16 %916, 31
  %918 = icmp sgt i32 %4, 0
  br i1 %918, label %919, label %976

919:                                              ; preds = %915
  %920 = zext i16 %917 to i32
  %921 = mul nsw i32 %920, %6
  %922 = sext i32 %921 to i64
  %923 = icmp sgt i32 %3, 0
  %924 = zext i16 %917 to i64
  %925 = sext i32 %2 to i64
  %926 = zext i32 %4 to i64
  %927 = add i32 %3, -1
  %928 = and i32 %3, 3
  %929 = icmp ult i32 %927, 3
  %930 = sub i32 %3, %928
  %931 = icmp eq i32 %928, 0
  br label %932

932:                                              ; preds = %960, %919
  %933 = phi %class.CFX_DIBBase* [ %12, %919 ], [ %961, %960 ]
  %934 = phi i64 [ 0, %919 ], [ %958, %960 ]
  %935 = bitcast %class.CFX_DIBBase* %933 to i8* (%class.CFX_DIBBase*, i32)***
  %936 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %935, align 8
  %937 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %936, i64 3
  %938 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %937, align 8
  %939 = trunc i64 %934 to i32
  %940 = add i32 %939, %7
  %941 = tail call i8* %938(%class.CFX_DIBBase* %933, i32 %940) #13
  br i1 %923, label %942, label %957

942:                                              ; preds = %932
  %943 = getelementptr inbounds i8, i8* %941, i64 %922
  %944 = mul nsw i64 %934, %925
  %945 = getelementptr inbounds i8, i8* %1, i64 %944
  br i1 %929, label %946, label %962

946:                                              ; preds = %962, %942
  %947 = phi i8* [ %943, %942 ], [ %973, %962 ]
  %948 = phi i8* [ %945, %942 ], [ %972, %962 ]
  br i1 %931, label %957, label %949

949:                                              ; preds = %946, %949
  %950 = phi i8* [ %954, %949 ], [ %947, %946 ]
  %951 = phi i8* [ %953, %949 ], [ %948, %946 ]
  %952 = phi i32 [ %955, %949 ], [ %928, %946 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %951, i8* align 1 %950, i64 3, i1 false) #13
  %953 = getelementptr inbounds i8, i8* %951, i64 4
  %954 = getelementptr inbounds i8, i8* %950, i64 %924
  %955 = add i32 %952, -1
  %956 = icmp eq i32 %955, 0
  br i1 %956, label %957, label %949, !llvm.loop !53

957:                                              ; preds = %946, %949, %932
  %958 = add nuw nsw i64 %934, 1
  %959 = icmp eq i64 %958, %926
  br i1 %959, label %976, label %960

960:                                              ; preds = %957
  %961 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %11, align 8
  br label %932

962:                                              ; preds = %942, %962
  %963 = phi i8* [ %973, %962 ], [ %943, %942 ]
  %964 = phi i8* [ %972, %962 ], [ %945, %942 ]
  %965 = phi i32 [ %974, %962 ], [ %930, %942 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %964, i8* align 1 %963, i64 3, i1 false) #13
  %966 = getelementptr inbounds i8, i8* %964, i64 4
  %967 = getelementptr inbounds i8, i8* %963, i64 %924
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %966, i8* align 1 %967, i64 3, i1 false) #13
  %968 = getelementptr inbounds i8, i8* %964, i64 8
  %969 = getelementptr inbounds i8, i8* %967, i64 %924
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %968, i8* align 1 %969, i64 3, i1 false) #13
  %970 = getelementptr inbounds i8, i8* %964, i64 12
  %971 = getelementptr inbounds i8, i8* %969, i64 %924
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %970, i8* align 1 %971, i64 3, i1 false) #13
  %972 = getelementptr inbounds i8, i8* %964, i64 16
  %973 = getelementptr inbounds i8, i8* %971, i64 %924
  %974 = add i32 %965, -4
  %975 = icmp eq i32 %974, 0
  br i1 %975, label %946, label %962

976:                                              ; preds = %957, %880, %728, %677, %624, %573, %427, %164, %610, %46, %915, %839, %838, %705, %704, %696, %639, %608, %535, %534, %407, %406, %398, %155, %9, %27, %397, %170, %17
  %977 = phi i1 [ %18, %17 ], [ true, %397 ], [ %28, %27 ], [ false, %170 ], [ false, %9 ], [ true, %155 ], [ true, %406 ], [ true, %534 ], [ false, %398 ], [ true, %407 ], [ true, %535 ], [ true, %608 ], [ true, %639 ], [ true, %704 ], [ true, %838 ], [ false, %696 ], [ true, %705 ], [ true, %839 ], [ true, %915 ], [ false, %46 ], [ true, %610 ], [ true, %164 ], [ true, %427 ], [ true, %573 ], [ true, %624 ], [ true, %677 ], [ true, %728 ], [ true, %880 ], [ true, %957 ]
  ret i1 %977

978:                                              ; preds = %391
  %979 = getelementptr inbounds i32, i32* %184, i64 %395
  %980 = load i32, i32* %979, align 4
  %981 = getelementptr inbounds i32, i32* %335, i64 %395
  store i32 %980, i32* %981, align 4
  %982 = or i64 %388, 2
  %983 = icmp eq i64 %982, %176
  br i1 %983, label %390, label %984, !prof !8

984:                                              ; preds = %978
  %985 = getelementptr inbounds i32, i32* %184, i64 %982
  %986 = load i32, i32* %985, align 4
  %987 = getelementptr inbounds i32, i32* %335, i64 %982
  store i32 %986, i32* %987, align 4
  %988 = or i64 %388, 3
  %989 = icmp eq i64 %988, %176
  br i1 %989, label %390, label %990, !prof !8

990:                                              ; preds = %984
  %991 = getelementptr inbounds i32, i32* %184, i64 %988
  %992 = load i32, i32* %991, align 4
  %993 = getelementptr inbounds i32, i32* %335, i64 %988
  store i32 %992, i32* %993, align 4
  %994 = add nuw nsw i64 %388, 4
  %995 = icmp eq i64 %994, 256
  br i1 %995, label %397, label %387

996:                                              ; preds = %277
  %997 = sext i32 %278 to i64
  %998 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %186, i64 %997, i32 0
  store i32 %281, i32* %998, align 4
  %999 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %186, i64 %997, i32 1
  %1000 = trunc i64 %279 to i32
  store i32 %1000, i32* %999, align 4
  %1001 = add nsw i32 %278, 1
  br label %1002

1002:                                             ; preds = %996, %277
  %1003 = phi i32 [ %278, %277 ], [ %1001, %996 ]
  %1004 = add nuw nsw i64 %267, 2
  %1005 = icmp eq i64 %1004, 4096
  br i1 %1005, label %236, label %265

1006:                                             ; preds = %477
  %1007 = getelementptr inbounds i8, i8* %474, i64 3
  %1008 = getelementptr inbounds i32, i32* %451, i64 %489
  %1009 = load i32, i32* %1008, align 4
  %1010 = trunc i32 %1009 to i8
  %1011 = getelementptr inbounds i8, i8* %474, i64 4
  store i8 %1010, i8* %1007, align 1
  %1012 = load i32, i32* %1008, align 4
  %1013 = lshr i32 %1012, 8
  %1014 = trunc i32 %1013 to i8
  %1015 = getelementptr inbounds i8, i8* %474, i64 5
  store i8 %1014, i8* %1011, align 1
  %1016 = load i32, i32* %1008, align 4
  %1017 = lshr i32 %1016, 16
  %1018 = trunc i32 %1017 to i8
  %1019 = getelementptr inbounds i8, i8* %474, i64 6
  store i8 %1018, i8* %1015, align 1
  %1020 = add nuw nsw i64 %473, 2
  %1021 = icmp eq i64 %1020, 256
  br i1 %1021, label %461, label %472

1022:                                             ; preds = %781
  %1023 = getelementptr inbounds i8, i8* %778, i64 3
  %1024 = getelementptr inbounds i32, i32* %752, i64 %793
  %1025 = load i32, i32* %1024, align 4
  %1026 = trunc i32 %1025 to i8
  %1027 = getelementptr inbounds i8, i8* %778, i64 4
  store i8 %1026, i8* %1023, align 1
  %1028 = load i32, i32* %1024, align 4
  %1029 = lshr i32 %1028, 8
  %1030 = trunc i32 %1029 to i8
  %1031 = getelementptr inbounds i8, i8* %778, i64 5
  store i8 %1030, i8* %1027, align 1
  %1032 = load i32, i32* %1024, align 4
  %1033 = lshr i32 %1032, 16
  %1034 = trunc i32 %1033 to i8
  %1035 = getelementptr inbounds i8, i8* %778, i64 6
  store i8 %1034, i8* %1031, align 1
  %1036 = add nuw nsw i64 %777, 2
  %1037 = icmp eq i64 %1036, 256
  br i1 %1037, label %764, label %776
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK11CFX_DIBBase6SwapXYEbb(%"class.fxcrt::RetainPtr"* noalias nocapture sret, %class.CFX_DIBBase*, i1 zeroext, i1 zeroext) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 3
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %6, 1
  %10 = icmp slt i32 %8, 1
  %11 = or i1 %9, %10
  br i1 %11, label %12, label %14

12:                                               ; preds = %4
  %13 = bitcast %"class.fxcrt::RetainPtr"* %0 to i64*
  store i64 0, i64* %13, align 8
  br label %459

14:                                               ; preds = %4
  %15 = tail call i8* @_Znwm(i64 80) #15, !noalias !54
  %16 = bitcast i8* %15 to %class.CFX_DIBitmap*
  tail call void @_ZN12CFX_DIBitmapC1Ev(%class.CFX_DIBitmap* nonnull %16) #13, !noalias !54
  %17 = ptrtoint i8* %15 to i64
  %18 = getelementptr inbounds i8, i8* %15, i64 8
  %19 = bitcast i8* %18 to i64*
  %20 = load i64, i64* %19, align 8, !noalias !54
  %21 = add nsw i64 %20, 1
  store i64 %21, i64* %19, align 8, !noalias !54
  %22 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 1
  %23 = load i16, i16* %22, align 8
  %24 = tail call zeroext i1 @_ZN12CFX_DIBitmap6CreateEii12FXDIB_Format(%class.CFX_DIBitmap* nonnull %16, i32 %6, i32 %8, i16 zeroext %23) #13
  br i1 %24, label %25, label %448

25:                                               ; preds = %14
  %26 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 6
  %27 = bitcast %"class.std::__1::vector"* %26 to i64*
  %28 = load i64, i64* %27, align 8, !noalias !57
  %29 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 6, i32 0, i32 1
  %30 = bitcast i32** %29 to i64*
  %31 = load i64, i64* %30, align 8, !noalias !57
  %32 = sub i64 %31, %28
  %33 = ashr exact i64 %32, 2
  %34 = icmp eq i64 %32, 0
  br i1 %34, label %41, label %35

35:                                               ; preds = %25
  %36 = getelementptr inbounds i8, i8* %15, i64 16
  %37 = bitcast i8* %36 to i16*
  %38 = load i16, i16* %37, align 8
  %39 = and i16 %38, 255
  %40 = icmp ugt i16 %39, 8
  br i1 %40, label %41, label %47

41:                                               ; preds = %35, %25
  %42 = getelementptr inbounds i8, i8* %15, i64 40
  %43 = bitcast i8* %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds i8, i8* %15, i64 48
  %46 = bitcast i8* %45 to i64*
  store i64 %44, i64* %46, align 8
  br label %76

47:                                               ; preds = %35
  %48 = zext i16 %39 to i32
  %49 = shl i32 1, %48
  %50 = getelementptr inbounds i8, i8* %15, i64 40
  %51 = bitcast i8* %50 to i32**
  %52 = load i32*, i32** %51, align 8
  %53 = getelementptr inbounds i8, i8* %15, i64 48
  %54 = bitcast i8* %53 to i32**
  %55 = load i32*, i32** %54, align 8
  %56 = icmp eq i32* %52, %55
  br i1 %56, label %57, label %60

57:                                               ; preds = %47
  %58 = bitcast i8* %50 to %"class.std::__1::vector"*
  %59 = zext i32 %49 to i64
  tail call void @_ZNSt3__16vectorIj16FxAllocAllocatorIjEE8__appendEm(%"class.std::__1::vector"* %58, i64 %59) #13
  br label %60

60:                                               ; preds = %57, %47
  %61 = icmp ult i32 %49, 256
  %62 = select i1 %61, i32 %49, i32 256
  %63 = zext i32 %62 to i64
  %64 = inttoptr i64 %28 to i32*
  br label %65

65:                                               ; preds = %69, %60
  %66 = phi i64 [ 0, %60 ], [ %74, %69 ]
  %67 = icmp eq i64 %66, %33
  br i1 %67, label %68, label %69, !prof !8

68:                                               ; preds = %65
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !9
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !10
  unreachable

69:                                               ; preds = %65
  %70 = getelementptr inbounds i32, i32* %64, i64 %66
  %71 = load i32, i32* %70, align 4
  %72 = load i32*, i32** %51, align 8
  %73 = getelementptr inbounds i32, i32* %72, i64 %66
  store i32 %71, i32* %73, align 4
  %74 = add nuw nsw i64 %66, 1
  %75 = icmp ult i64 %74, %63
  br i1 %75, label %65, label %76

76:                                               ; preds = %69, %41
  %77 = getelementptr inbounds i8, i8* %15, i64 28
  %78 = bitcast i8* %77 to i32*
  %79 = load i32, i32* %78, align 4
  %80 = bitcast i8* %15 to i8* (%class.CFX_DIBitmap*)***
  %81 = load i8* (%class.CFX_DIBitmap*)**, i8* (%class.CFX_DIBitmap*)*** %80, align 8
  %82 = getelementptr inbounds i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %81, i64 2
  %83 = load i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %82, align 8
  %84 = tail call i8* %83(%class.CFX_DIBitmap* nonnull %16) #13
  br i1 %2, label %85, label %88

85:                                               ; preds = %76
  %86 = load i32, i32* %5, align 8
  %87 = sub nsw i32 %86, %6
  br label %88

88:                                               ; preds = %76, %85
  %89 = phi i32 [ %87, %85 ], [ 0, %76 ]
  %90 = phi i32 [ %86, %85 ], [ %6, %76 ]
  br i1 %3, label %91, label %94

91:                                               ; preds = %88
  %92 = load i32, i32* %7, align 4
  %93 = sub nsw i32 %92, %8
  br label %94

94:                                               ; preds = %88, %91
  %95 = phi i32 [ %93, %91 ], [ 0, %88 ]
  %96 = phi i32 [ %92, %91 ], [ %8, %88 ]
  %97 = load i16, i16* %22, align 8
  %98 = and i16 %97, 255
  %99 = icmp eq i16 %98, 1
  br i1 %99, label %100, label %157

100:                                              ; preds = %94
  %101 = mul nsw i32 %79, %8
  %102 = sext i32 %101 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %84, i8 -1, i64 %102, i1 false)
  %103 = icmp slt i32 %89, %90
  br i1 %103, label %104, label %349

104:                                              ; preds = %100
  %105 = bitcast %class.CFX_DIBBase* %1 to i8* (%class.CFX_DIBBase*, i32)***
  %106 = add i32 %6, -1
  %107 = add i32 %106, %89
  %108 = add nsw i32 %8, -1
  %109 = mul nsw i32 %79, %108
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i8, i8* %84, i64 %110
  %112 = sub nsw i32 0, %79
  %113 = select i1 %3, i32 %112, i32 %79
  %114 = icmp sgt i32 %96, %95
  %115 = sext i32 %113 to i64
  %116 = select i1 %3, i8* %111, i8* %84
  br label %117

117:                                              ; preds = %133, %104
  %118 = phi i32 [ %89, %104 ], [ %134, %133 ]
  %119 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %105, align 8
  %120 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %119, i64 3
  %121 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %120, align 8
  %122 = tail call i8* %121(%class.CFX_DIBBase* %1, i32 %118) #13
  %123 = sub i32 %107, %118
  %124 = select i1 %2, i32 %123, i32 %118
  br i1 %114, label %125, label %133

125:                                              ; preds = %117
  %126 = srem i32 %124, 8
  %127 = sub nsw i32 7, %126
  %128 = shl i32 1, %127
  %129 = sdiv i32 %124, 8
  %130 = sext i32 %129 to i64
  %131 = trunc i32 %128 to i8
  %132 = xor i8 %131, -1
  br label %136

133:                                              ; preds = %153, %117
  %134 = add i32 %118, 1
  %135 = icmp eq i32 %134, %90
  br i1 %135, label %349, label %117

136:                                              ; preds = %153, %125
  %137 = phi i32 [ %95, %125 ], [ %155, %153 ]
  %138 = phi i8* [ %116, %125 ], [ %154, %153 ]
  %139 = sdiv i32 %137, 8
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds i8, i8* %122, i64 %140
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i32
  %144 = srem i32 %137, 8
  %145 = sub nsw i32 7, %144
  %146 = shl i32 1, %145
  %147 = and i32 %146, %143
  %148 = icmp eq i32 %147, 0
  br i1 %148, label %149, label %153

149:                                              ; preds = %136
  %150 = getelementptr inbounds i8, i8* %138, i64 %130
  %151 = load i8, i8* %150, align 1
  %152 = and i8 %151, %132
  store i8 %152, i8* %150, align 1
  br label %153

153:                                              ; preds = %136, %149
  %154 = getelementptr inbounds i8, i8* %138, i64 %115
  %155 = add nsw i32 %137, 1
  %156 = icmp eq i32 %155, %96
  br i1 %156, label %133, label %136

157:                                              ; preds = %94
  %158 = lshr i16 %97, 3
  %159 = and i16 %158, 31
  %160 = zext i16 %159 to i32
  %161 = sub nsw i32 0, %79
  %162 = select i1 %3, i32 %161, i32 %79
  %163 = and i16 %97, 248
  %164 = icmp eq i16 %163, 24
  %165 = add nsw i32 %162, -2
  %166 = select i1 %164, i32 %165, i32 %162
  %167 = icmp slt i32 %89, %90
  br i1 %167, label %168, label %349

168:                                              ; preds = %157
  %169 = add i32 %6, -1
  %170 = add i32 %169, %89
  %171 = add nsw i32 %8, -1
  %172 = mul nsw i32 %79, %171
  %173 = sext i32 %172 to i64
  %174 = icmp eq i16 %163, 32
  %175 = bitcast %class.CFX_DIBBase* %1 to i8* (%class.CFX_DIBBase*, i32)***
  %176 = mul nsw i32 %95, %160
  %177 = sext i32 %176 to i64
  %178 = icmp eq i16 %163, 8
  %179 = icmp sgt i32 %96, %95
  %180 = add nsw i32 %166, 2
  %181 = sext i32 %180 to i64
  %182 = sext i32 %166 to i64
  %183 = sext i32 %95 to i64
  %184 = sub i32 %96, %95
  %185 = xor i32 %95, -1
  %186 = add i32 %96, %185
  %187 = and i32 %184, 3
  %188 = icmp eq i32 %187, 0
  %189 = icmp ult i32 %186, 3
  %190 = and i32 %184, 7
  %191 = icmp eq i32 %190, 0
  %192 = icmp ult i32 %186, 7
  %193 = and i32 %184, 7
  %194 = icmp eq i32 %193, 0
  %195 = icmp ult i32 %186, 7
  br label %196

196:                                              ; preds = %346, %168
  %197 = phi i32 [ %89, %168 ], [ %347, %346 ]
  %198 = sub i32 %170, %197
  %199 = select i1 %2, i32 %198, i32 %197
  %200 = mul nsw i32 %199, %160
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds i8, i8* %84, i64 %201
  %203 = getelementptr inbounds i8, i8* %202, i64 %173
  %204 = select i1 %3, i8* %203, i8* %202
  %205 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %175, align 8
  %206 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %205, i64 3
  %207 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %206, align 8
  %208 = tail call i8* %207(%class.CFX_DIBBase* %1, i32 %197) #13
  br i1 %174, label %209, label %267

209:                                              ; preds = %196
  br i1 %179, label %210, label %346

210:                                              ; preds = %209
  %211 = bitcast i8* %208 to i32*
  %212 = getelementptr inbounds i32, i32* %211, i64 %183
  br i1 %194, label %225, label %213

213:                                              ; preds = %210, %213
  %214 = phi i32 [ %222, %213 ], [ %95, %210 ]
  %215 = phi i32* [ %219, %213 ], [ %212, %210 ]
  %216 = phi i8* [ %221, %213 ], [ %204, %210 ]
  %217 = phi i32 [ %223, %213 ], [ %193, %210 ]
  %218 = bitcast i8* %216 to i32*
  %219 = getelementptr inbounds i32, i32* %215, i64 1
  %220 = load i32, i32* %215, align 4
  store i32 %220, i32* %218, align 4
  %221 = getelementptr inbounds i8, i8* %216, i64 %182
  %222 = add nsw i32 %214, 1
  %223 = add i32 %217, -1
  %224 = icmp eq i32 %223, 0
  br i1 %224, label %225, label %213, !llvm.loop !60

225:                                              ; preds = %213, %210
  %226 = phi i32 [ %95, %210 ], [ %222, %213 ]
  %227 = phi i32* [ %212, %210 ], [ %219, %213 ]
  %228 = phi i8* [ %204, %210 ], [ %221, %213 ]
  br i1 %195, label %346, label %229

229:                                              ; preds = %225, %229
  %230 = phi i32 [ %265, %229 ], [ %226, %225 ]
  %231 = phi i32* [ %262, %229 ], [ %227, %225 ]
  %232 = phi i8* [ %264, %229 ], [ %228, %225 ]
  %233 = bitcast i8* %232 to i32*
  %234 = getelementptr inbounds i32, i32* %231, i64 1
  %235 = load i32, i32* %231, align 4
  store i32 %235, i32* %233, align 4
  %236 = getelementptr inbounds i8, i8* %232, i64 %182
  %237 = bitcast i8* %236 to i32*
  %238 = getelementptr inbounds i32, i32* %231, i64 2
  %239 = load i32, i32* %234, align 4
  store i32 %239, i32* %237, align 4
  %240 = getelementptr inbounds i8, i8* %236, i64 %182
  %241 = bitcast i8* %240 to i32*
  %242 = getelementptr inbounds i32, i32* %231, i64 3
  %243 = load i32, i32* %238, align 4
  store i32 %243, i32* %241, align 4
  %244 = getelementptr inbounds i8, i8* %240, i64 %182
  %245 = bitcast i8* %244 to i32*
  %246 = getelementptr inbounds i32, i32* %231, i64 4
  %247 = load i32, i32* %242, align 4
  store i32 %247, i32* %245, align 4
  %248 = getelementptr inbounds i8, i8* %244, i64 %182
  %249 = bitcast i8* %248 to i32*
  %250 = getelementptr inbounds i32, i32* %231, i64 5
  %251 = load i32, i32* %246, align 4
  store i32 %251, i32* %249, align 4
  %252 = getelementptr inbounds i8, i8* %248, i64 %182
  %253 = bitcast i8* %252 to i32*
  %254 = getelementptr inbounds i32, i32* %231, i64 6
  %255 = load i32, i32* %250, align 4
  store i32 %255, i32* %253, align 4
  %256 = getelementptr inbounds i8, i8* %252, i64 %182
  %257 = bitcast i8* %256 to i32*
  %258 = getelementptr inbounds i32, i32* %231, i64 7
  %259 = load i32, i32* %254, align 4
  store i32 %259, i32* %257, align 4
  %260 = getelementptr inbounds i8, i8* %256, i64 %182
  %261 = bitcast i8* %260 to i32*
  %262 = getelementptr inbounds i32, i32* %231, i64 8
  %263 = load i32, i32* %258, align 4
  store i32 %263, i32* %261, align 4
  %264 = getelementptr inbounds i8, i8* %260, i64 %182
  %265 = add nsw i32 %230, 8
  %266 = icmp eq i32 %265, %96
  br i1 %266, label %346, label %229

267:                                              ; preds = %196
  %268 = getelementptr inbounds i8, i8* %208, i64 %177
  br i1 %178, label %285, label %269

269:                                              ; preds = %267
  br i1 %179, label %270, label %346

270:                                              ; preds = %269
  br i1 %188, label %281, label %271

271:                                              ; preds = %270, %271
  %272 = phi i32 [ %278, %271 ], [ %95, %270 ]
  %273 = phi i8* [ %277, %271 ], [ %268, %270 ]
  %274 = phi i8* [ %276, %271 ], [ %204, %270 ]
  %275 = phi i32 [ %279, %271 ], [ %187, %270 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %274, i8* align 1 %273, i64 3, i1 false)
  %276 = getelementptr inbounds i8, i8* %274, i64 %181
  %277 = getelementptr inbounds i8, i8* %273, i64 3
  %278 = add nsw i32 %272, 1
  %279 = add i32 %275, -1
  %280 = icmp eq i32 %279, 0
  br i1 %280, label %281, label %271, !llvm.loop !61

281:                                              ; preds = %271, %270
  %282 = phi i32 [ %95, %270 ], [ %278, %271 ]
  %283 = phi i8* [ %268, %270 ], [ %277, %271 ]
  %284 = phi i8* [ %204, %270 ], [ %276, %271 ]
  br i1 %189, label %346, label %332

285:                                              ; preds = %267
  br i1 %179, label %286, label %346

286:                                              ; preds = %285
  br i1 %191, label %298, label %287

287:                                              ; preds = %286, %287
  %288 = phi i32 [ %295, %287 ], [ %95, %286 ]
  %289 = phi i8* [ %292, %287 ], [ %268, %286 ]
  %290 = phi i8* [ %294, %287 ], [ %204, %286 ]
  %291 = phi i32 [ %296, %287 ], [ %190, %286 ]
  %292 = getelementptr inbounds i8, i8* %289, i64 1
  %293 = load i8, i8* %289, align 1
  store i8 %293, i8* %290, align 1
  %294 = getelementptr inbounds i8, i8* %290, i64 %182
  %295 = add nsw i32 %288, 1
  %296 = add i32 %291, -1
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %298, label %287, !llvm.loop !62

298:                                              ; preds = %287, %286
  %299 = phi i32 [ %95, %286 ], [ %295, %287 ]
  %300 = phi i8* [ %268, %286 ], [ %292, %287 ]
  %301 = phi i8* [ %204, %286 ], [ %294, %287 ]
  br i1 %192, label %346, label %302

302:                                              ; preds = %298, %302
  %303 = phi i32 [ %330, %302 ], [ %299, %298 ]
  %304 = phi i8* [ %327, %302 ], [ %300, %298 ]
  %305 = phi i8* [ %329, %302 ], [ %301, %298 ]
  %306 = getelementptr inbounds i8, i8* %304, i64 1
  %307 = load i8, i8* %304, align 1
  store i8 %307, i8* %305, align 1
  %308 = getelementptr inbounds i8, i8* %305, i64 %182
  %309 = getelementptr inbounds i8, i8* %304, i64 2
  %310 = load i8, i8* %306, align 1
  store i8 %310, i8* %308, align 1
  %311 = getelementptr inbounds i8, i8* %308, i64 %182
  %312 = getelementptr inbounds i8, i8* %304, i64 3
  %313 = load i8, i8* %309, align 1
  store i8 %313, i8* %311, align 1
  %314 = getelementptr inbounds i8, i8* %311, i64 %182
  %315 = getelementptr inbounds i8, i8* %304, i64 4
  %316 = load i8, i8* %312, align 1
  store i8 %316, i8* %314, align 1
  %317 = getelementptr inbounds i8, i8* %314, i64 %182
  %318 = getelementptr inbounds i8, i8* %304, i64 5
  %319 = load i8, i8* %315, align 1
  store i8 %319, i8* %317, align 1
  %320 = getelementptr inbounds i8, i8* %317, i64 %182
  %321 = getelementptr inbounds i8, i8* %304, i64 6
  %322 = load i8, i8* %318, align 1
  store i8 %322, i8* %320, align 1
  %323 = getelementptr inbounds i8, i8* %320, i64 %182
  %324 = getelementptr inbounds i8, i8* %304, i64 7
  %325 = load i8, i8* %321, align 1
  store i8 %325, i8* %323, align 1
  %326 = getelementptr inbounds i8, i8* %323, i64 %182
  %327 = getelementptr inbounds i8, i8* %304, i64 8
  %328 = load i8, i8* %324, align 1
  store i8 %328, i8* %326, align 1
  %329 = getelementptr inbounds i8, i8* %326, i64 %182
  %330 = add nsw i32 %303, 8
  %331 = icmp eq i32 %330, %96
  br i1 %331, label %346, label %302

332:                                              ; preds = %281, %332
  %333 = phi i32 [ %344, %332 ], [ %282, %281 ]
  %334 = phi i8* [ %343, %332 ], [ %283, %281 ]
  %335 = phi i8* [ %342, %332 ], [ %284, %281 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %335, i8* align 1 %334, i64 3, i1 false)
  %336 = getelementptr inbounds i8, i8* %335, i64 %181
  %337 = getelementptr inbounds i8, i8* %334, i64 3
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %336, i8* align 1 %337, i64 3, i1 false)
  %338 = getelementptr inbounds i8, i8* %336, i64 %181
  %339 = getelementptr inbounds i8, i8* %334, i64 6
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %338, i8* align 1 %339, i64 3, i1 false)
  %340 = getelementptr inbounds i8, i8* %338, i64 %181
  %341 = getelementptr inbounds i8, i8* %334, i64 9
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %340, i8* align 1 %341, i64 3, i1 false)
  %342 = getelementptr inbounds i8, i8* %340, i64 %181
  %343 = getelementptr inbounds i8, i8* %334, i64 12
  %344 = add nsw i32 %333, 4
  %345 = icmp eq i32 %344, %96
  br i1 %345, label %346, label %332

346:                                              ; preds = %281, %332, %298, %302, %225, %229, %269, %285, %209
  %347 = add i32 %197, 1
  %348 = icmp eq i32 %347, %90
  br i1 %348, label %349, label %196

349:                                              ; preds = %346, %133, %157, %100
  %350 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %351 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %350, align 8
  %352 = icmp eq %class.CFX_DIBitmap* %351, null
  br i1 %352, label %446, label %353

353:                                              ; preds = %349
  %354 = getelementptr inbounds i8, i8* %15, i64 32
  %355 = bitcast i8* %354 to %class.CFX_DIBitmap**
  %356 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %355, align 8
  %357 = getelementptr inbounds %class.CFX_DIBitmap, %class.CFX_DIBitmap* %356, i64 0, i32 0, i32 4
  %358 = load i32, i32* %357, align 4
  %359 = bitcast %class.CFX_DIBitmap* %356 to i8* (%class.CFX_DIBitmap*)***
  %360 = load i8* (%class.CFX_DIBitmap*)**, i8* (%class.CFX_DIBitmap*)*** %359, align 8
  %361 = getelementptr inbounds i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %360, i64 2
  %362 = load i8* (%class.CFX_DIBitmap*)*, i8* (%class.CFX_DIBitmap*)** %361, align 8
  %363 = tail call i8* %362(%class.CFX_DIBitmap* %356) #13
  %364 = icmp slt i32 %89, %90
  br i1 %364, label %365, label %446

365:                                              ; preds = %353
  %366 = sub nsw i32 0, %358
  %367 = select i1 %3, i32 %366, i32 %358
  %368 = add i32 %6, -1
  %369 = add i32 %368, %89
  %370 = add nsw i32 %8, -1
  %371 = mul nsw i32 %358, %370
  %372 = sext i32 %371 to i64
  %373 = sext i32 %95 to i64
  %374 = icmp sgt i32 %96, %95
  %375 = sext i32 %367 to i64
  %376 = sub i32 %96, %95
  %377 = xor i32 %95, -1
  %378 = add i32 %96, %377
  %379 = and i32 %376, 7
  %380 = icmp eq i32 %379, 0
  %381 = icmp ult i32 %378, 7
  br label %382

382:                                              ; preds = %413, %365
  %383 = phi i32 [ %89, %365 ], [ %414, %413 ]
  %384 = sub i32 %369, %383
  %385 = select i1 %2, i32 %384, i32 %383
  %386 = sext i32 %385 to i64
  %387 = getelementptr inbounds i8, i8* %363, i64 %386
  %388 = load %class.CFX_DIBitmap*, %class.CFX_DIBitmap** %350, align 8
  %389 = bitcast %class.CFX_DIBitmap* %388 to i8* (%class.CFX_DIBitmap*, i32)***
  %390 = load i8* (%class.CFX_DIBitmap*, i32)**, i8* (%class.CFX_DIBitmap*, i32)*** %389, align 8
  %391 = getelementptr inbounds i8* (%class.CFX_DIBitmap*, i32)*, i8* (%class.CFX_DIBitmap*, i32)** %390, i64 3
  %392 = load i8* (%class.CFX_DIBitmap*, i32)*, i8* (%class.CFX_DIBitmap*, i32)** %391, align 8
  %393 = tail call i8* %392(%class.CFX_DIBitmap* %388, i32 %383) #13
  br i1 %374, label %394, label %413

394:                                              ; preds = %382
  %395 = getelementptr inbounds i8, i8* %393, i64 %373
  %396 = getelementptr inbounds i8, i8* %387, i64 %372
  %397 = select i1 %3, i8* %396, i8* %387
  br i1 %380, label %409, label %398

398:                                              ; preds = %394, %398
  %399 = phi i32 [ %406, %398 ], [ %95, %394 ]
  %400 = phi i8* [ %403, %398 ], [ %395, %394 ]
  %401 = phi i8* [ %405, %398 ], [ %397, %394 ]
  %402 = phi i32 [ %407, %398 ], [ %379, %394 ]
  %403 = getelementptr inbounds i8, i8* %400, i64 1
  %404 = load i8, i8* %400, align 1
  store i8 %404, i8* %401, align 1
  %405 = getelementptr inbounds i8, i8* %401, i64 %375
  %406 = add nsw i32 %399, 1
  %407 = add i32 %402, -1
  %408 = icmp eq i32 %407, 0
  br i1 %408, label %409, label %398, !llvm.loop !63

409:                                              ; preds = %398, %394
  %410 = phi i32 [ %95, %394 ], [ %406, %398 ]
  %411 = phi i8* [ %395, %394 ], [ %403, %398 ]
  %412 = phi i8* [ %397, %394 ], [ %405, %398 ]
  br i1 %381, label %413, label %416

413:                                              ; preds = %409, %416, %382
  %414 = add i32 %383, 1
  %415 = icmp eq i32 %414, %90
  br i1 %415, label %446, label %382

416:                                              ; preds = %409, %416
  %417 = phi i32 [ %444, %416 ], [ %410, %409 ]
  %418 = phi i8* [ %441, %416 ], [ %411, %409 ]
  %419 = phi i8* [ %443, %416 ], [ %412, %409 ]
  %420 = getelementptr inbounds i8, i8* %418, i64 1
  %421 = load i8, i8* %418, align 1
  store i8 %421, i8* %419, align 1
  %422 = getelementptr inbounds i8, i8* %419, i64 %375
  %423 = getelementptr inbounds i8, i8* %418, i64 2
  %424 = load i8, i8* %420, align 1
  store i8 %424, i8* %422, align 1
  %425 = getelementptr inbounds i8, i8* %422, i64 %375
  %426 = getelementptr inbounds i8, i8* %418, i64 3
  %427 = load i8, i8* %423, align 1
  store i8 %427, i8* %425, align 1
  %428 = getelementptr inbounds i8, i8* %425, i64 %375
  %429 = getelementptr inbounds i8, i8* %418, i64 4
  %430 = load i8, i8* %426, align 1
  store i8 %430, i8* %428, align 1
  %431 = getelementptr inbounds i8, i8* %428, i64 %375
  %432 = getelementptr inbounds i8, i8* %418, i64 5
  %433 = load i8, i8* %429, align 1
  store i8 %433, i8* %431, align 1
  %434 = getelementptr inbounds i8, i8* %431, i64 %375
  %435 = getelementptr inbounds i8, i8* %418, i64 6
  %436 = load i8, i8* %432, align 1
  store i8 %436, i8* %434, align 1
  %437 = getelementptr inbounds i8, i8* %434, i64 %375
  %438 = getelementptr inbounds i8, i8* %418, i64 7
  %439 = load i8, i8* %435, align 1
  store i8 %439, i8* %437, align 1
  %440 = getelementptr inbounds i8, i8* %437, i64 %375
  %441 = getelementptr inbounds i8, i8* %418, i64 8
  %442 = load i8, i8* %438, align 1
  store i8 %442, i8* %440, align 1
  %443 = getelementptr inbounds i8, i8* %440, i64 %375
  %444 = add nsw i32 %417, 8
  %445 = icmp eq i32 %444, %96
  br i1 %445, label %413, label %416

446:                                              ; preds = %413, %353, %349
  %447 = bitcast %"class.fxcrt::RetainPtr"* %0 to i64*
  store i64 %17, i64* %447, align 8
  br label %459

448:                                              ; preds = %14
  %449 = bitcast %"class.fxcrt::RetainPtr"* %0 to i64*
  store i64 0, i64* %449, align 8
  %450 = load i64, i64* %19, align 8
  %451 = add nsw i64 %450, -1
  store i64 %451, i64* %19, align 8
  %452 = icmp eq i64 %451, 0
  br i1 %452, label %453, label %459

453:                                              ; preds = %448
  %454 = bitcast i8* %15 to %"class.fxcrt::Retainable"*
  %455 = bitcast i8* %15 to void (%"class.fxcrt::Retainable"*)***
  %456 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %455, align 8
  %457 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %456, i64 1
  %458 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %457, align 8
  tail call void %458(%"class.fxcrt::Retainable"* nonnull %454) #13
  br label %459

459:                                              ; preds = %453, %448, %446, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11CFX_DIBBase11TransformToERK10CFX_MatrixPiS3_(%"class.fxcrt::RetainPtr"* noalias sret, %class.CFX_DIBBase*, %class.CFX_Matrix* dereferenceable(24), i32* nocapture, i32* nocapture) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.fxcrt::RetainPtr.9", align 8
  %7 = alloca %class.CFX_ImageTransformer, align 8
  %8 = alloca %struct.FXDIB_ResampleOptions, align 1
  %9 = bitcast %"class.fxcrt::RetainPtr.9"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #13
  %10 = getelementptr inbounds %"class.fxcrt::RetainPtr.9", %"class.fxcrt::RetainPtr.9"* %6, i64 0, i32 0, i32 0, i32 0, i32 0
  %11 = ptrtoint %class.CFX_DIBBase* %1 to i64
  %12 = bitcast %"class.fxcrt::RetainPtr.9"* %6 to i64*
  store i64 %11, i64* %12, align 8
  %13 = icmp eq %class.CFX_DIBBase* %1, null
  br i1 %13, label %18, label %14

14:                                               ; preds = %5
  %15 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = add nsw i64 %16, 1
  store i64 %17, i64* %15, align 8
  br label %18

18:                                               ; preds = %5, %14
  %19 = bitcast %class.CFX_ImageTransformer* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 120, i8* nonnull %19) #13
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %19, i8* align 8 bitcast (%class.CFX_ImageTransformer* @__const._ZN11CFX_DIBBase11TransformToERK10CFX_MatrixPiS3_.transformer to i8*), i64 120, i1 false)
  %20 = getelementptr inbounds %struct.FXDIB_ResampleOptions, %struct.FXDIB_ResampleOptions* %8, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %20) #13
  call void @_ZN21FXDIB_ResampleOptionsC1Ev(%struct.FXDIB_ResampleOptions* nonnull %8) #13
  call void @_ZN20CFX_ImageTransformerC1ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEERK10CFX_MatrixRK21FXDIB_ResampleOptionsPK7FX_RECT(%class.CFX_ImageTransformer* nonnull %7, %"class.fxcrt::RetainPtr.9"* nonnull dereferenceable(8) %6, %class.CFX_Matrix* dereferenceable(24) %2, %struct.FXDIB_ResampleOptions* nonnull dereferenceable(4) %8, %struct.FX_RECT* null) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %20) #13
  %21 = call zeroext i1 @_ZN20CFX_ImageTransformer8ContinueEP19PauseIndicatorIface(%class.CFX_ImageTransformer* nonnull %7, %class.PauseIndicatorIface* null) #13
  %22 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %7, i64 0, i32 3, i32 0
  %23 = load i32, i32* %22, align 8
  store i32 %23, i32* %3, align 4
  %24 = getelementptr inbounds %class.CFX_ImageTransformer, %class.CFX_ImageTransformer* %7, i64 0, i32 3, i32 1
  %25 = load i32, i32* %24, align 4
  store i32 %25, i32* %4, align 4
  call void @_ZN20CFX_ImageTransformer12DetachBitmapEv(%"class.fxcrt::RetainPtr"* sret %0, %class.CFX_ImageTransformer* nonnull %7) #13
  call void @_ZN20CFX_ImageTransformerD1Ev(%class.CFX_ImageTransformer* nonnull %7) #13
  call void @llvm.lifetime.end.p0i8(i64 120, i8* nonnull %19) #13
  %26 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %10, align 8
  store %class.CFX_DIBBase* null, %class.CFX_DIBBase** %10, align 8
  %27 = icmp eq %class.CFX_DIBBase* %26, null
  br i1 %27, label %39, label %28

28:                                               ; preds = %18
  %29 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %26, i64 0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = add nsw i64 %30, -1
  store i64 %31, i64* %29, align 8
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %33, label %39

33:                                               ; preds = %28
  %34 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %26, i64 0, i32 0
  %35 = bitcast %class.CFX_DIBBase* %26 to void (%"class.fxcrt::Retainable"*)***
  %36 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %35, align 8
  %37 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %36, i64 1
  %38 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %37, align 8
  call void %38(%"class.fxcrt::Retainable"* nonnull %34) #13
  br label %39

39:                                               ; preds = %18, %28, %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #13
  ret void
}

declare void @_ZN21FXDIB_ResampleOptionsC1Ev(%struct.FXDIB_ResampleOptions*) unnamed_addr #5

declare void @_ZN20CFX_ImageTransformerC1ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEERK10CFX_MatrixRK21FXDIB_ResampleOptionsPK7FX_RECT(%class.CFX_ImageTransformer*, %"class.fxcrt::RetainPtr.9"* dereferenceable(8), %class.CFX_Matrix* dereferenceable(24), %struct.FXDIB_ResampleOptions* dereferenceable(4), %struct.FX_RECT*) unnamed_addr #5

declare zeroext i1 @_ZN20CFX_ImageTransformer8ContinueEP19PauseIndicatorIface(%class.CFX_ImageTransformer*, %class.PauseIndicatorIface*) local_unnamed_addr #5

declare void @_ZN20CFX_ImageTransformer12DetachBitmapEv(%"class.fxcrt::RetainPtr"* sret, %class.CFX_ImageTransformer*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN20CFX_ImageTransformerD1Ev(%class.CFX_ImageTransformer*) unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11CFX_DIBBase9StretchToEiiRK21FXDIB_ResampleOptionsPK7FX_RECT(%"class.fxcrt::RetainPtr"* noalias sret, %class.CFX_DIBBase*, i32, i32, %struct.FXDIB_ResampleOptions* dereferenceable(4), %struct.FX_RECT*) local_unnamed_addr #0 align 2 {
  %7 = alloca %"class.fxcrt::RetainPtr.9", align 8
  %8 = alloca %struct.FX_RECT, align 4
  %9 = alloca %class.CFX_BitmapStorer, align 8
  %10 = alloca %class.CFX_ImageStretcher, align 8
  %11 = bitcast %"class.fxcrt::RetainPtr.9"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #13
  %12 = getelementptr inbounds %"class.fxcrt::RetainPtr.9", %"class.fxcrt::RetainPtr.9"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = ptrtoint %class.CFX_DIBBase* %1 to i64
  %14 = bitcast %"class.fxcrt::RetainPtr.9"* %7 to i64*
  store i64 %13, i64* %14, align 8
  %15 = icmp eq %class.CFX_DIBBase* %1, null
  br i1 %15, label %20, label %16

16:                                               ; preds = %6
  %17 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 0, i32 1
  %18 = load i64, i64* %17, align 8
  %19 = add nsw i64 %18, 1
  store i64 %19, i64* %17, align 8
  br label %20

20:                                               ; preds = %6, %16
  %21 = bitcast %struct.FX_RECT* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %21) #13
  %22 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %8, i64 0, i32 0
  %23 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %8, i64 0, i32 1
  %24 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %8, i64 0, i32 2
  %25 = getelementptr inbounds %struct.FX_RECT, %struct.FX_RECT* %8, i64 0, i32 3
  %26 = icmp slt i32 %2, 0
  %27 = sub nsw i32 0, %2
  %28 = select i1 %26, i32 %27, i32 %2
  %29 = icmp slt i32 %3, 0
  %30 = sub nsw i32 0, %3
  %31 = select i1 %29, i32 %30, i32 %3
  store i32 0, i32* %22, align 4
  store i32 0, i32* %23, align 4
  store i32 %28, i32* %24, align 4
  store i32 %31, i32* %25, align 4
  %32 = icmp eq %struct.FX_RECT* %5, null
  br i1 %32, label %36, label %33

33:                                               ; preds = %20
  call void @_ZN7FX_RECT9IntersectERKS_(%struct.FX_RECT* nonnull %8, %struct.FX_RECT* nonnull dereferenceable(16) %5) #13
  %34 = load i32, i32* %24, align 4
  %35 = load i32, i32* %22, align 4
  br label %36

36:                                               ; preds = %20, %33
  %37 = phi i32 [ 0, %20 ], [ %35, %33 ]
  %38 = phi i32 [ %28, %20 ], [ %34, %33 ]
  %39 = icmp sgt i32 %38, %37
  br i1 %39, label %40, label %44

40:                                               ; preds = %36
  %41 = load i32, i32* %25, align 4
  %42 = load i32, i32* %23, align 4
  %43 = icmp sgt i32 %41, %42
  br i1 %43, label %46, label %44

44:                                               ; preds = %40, %36
  %45 = bitcast %"class.fxcrt::RetainPtr"* %0 to i64*
  store i64 0, i64* %45, align 8
  br label %64

46:                                               ; preds = %40
  %47 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 2
  %48 = load i32, i32* %47, align 4
  %49 = icmp eq i32 %48, %2
  br i1 %49, label %50, label %55

50:                                               ; preds = %46
  %51 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %1, i64 0, i32 3
  %52 = load i32, i32* %51, align 8
  %53 = icmp eq i32 %52, %3
  br i1 %53, label %54, label %55

54:                                               ; preds = %50
  call void @_ZNK11CFX_DIBBase5CloneEPK7FX_RECT(%"class.fxcrt::RetainPtr"* sret %0, %class.CFX_DIBBase* %1, %struct.FX_RECT* nonnull %8)
  br label %64

55:                                               ; preds = %50, %46
  %56 = bitcast %class.CFX_BitmapStorer* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %56) #13
  %57 = bitcast %class.CFX_BitmapStorer* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %57, i8 -86, i64 16, i1 false)
  call void @_ZN16CFX_BitmapStorerC1Ev(%class.CFX_BitmapStorer* nonnull %9) #13
  %58 = bitcast %class.CFX_ImageStretcher* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %58) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %58, i8 -86, i64 56, i1 false)
  %59 = getelementptr inbounds %class.CFX_BitmapStorer, %class.CFX_BitmapStorer* %9, i64 0, i32 0
  call void @_ZN18CFX_ImageStretcherC1EP21ScanlineComposerIfaceRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEiiRK7FX_RECTRK21FXDIB_ResampleOptions(%class.CFX_ImageStretcher* nonnull %10, %class.ScanlineComposerIface* nonnull %59, %"class.fxcrt::RetainPtr.9"* nonnull dereferenceable(8) %7, i32 %2, i32 %3, %struct.FX_RECT* nonnull dereferenceable(16) %8, %struct.FXDIB_ResampleOptions* dereferenceable(4) %4) #13
  %60 = call zeroext i1 @_ZN18CFX_ImageStretcher5StartEv(%class.CFX_ImageStretcher* nonnull %10) #13
  br i1 %60, label %61, label %63

61:                                               ; preds = %55
  %62 = call zeroext i1 @_ZN18CFX_ImageStretcher8ContinueEP19PauseIndicatorIface(%class.CFX_ImageStretcher* nonnull %10, %class.PauseIndicatorIface* null) #13
  br label %63

63:                                               ; preds = %61, %55
  call void @_ZN16CFX_BitmapStorer6DetachEv(%"class.fxcrt::RetainPtr"* sret %0, %class.CFX_BitmapStorer* nonnull %9) #13
  call void @_ZN18CFX_ImageStretcherD1Ev(%class.CFX_ImageStretcher* nonnull %10) #13
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %58) #13
  call void @_ZN16CFX_BitmapStorerD1Ev(%class.CFX_BitmapStorer* nonnull %9) #13
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %56) #13
  br label %64

64:                                               ; preds = %63, %54, %44
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %21) #13
  %65 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %12, align 8
  store %class.CFX_DIBBase* null, %class.CFX_DIBBase** %12, align 8
  %66 = icmp eq %class.CFX_DIBBase* %65, null
  br i1 %66, label %78, label %67

67:                                               ; preds = %64
  %68 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %65, i64 0, i32 0, i32 1
  %69 = load i64, i64* %68, align 8
  %70 = add nsw i64 %69, -1
  store i64 %70, i64* %68, align 8
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %72, label %78

72:                                               ; preds = %67
  %73 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %65, i64 0, i32 0
  %74 = bitcast %class.CFX_DIBBase* %65 to void (%"class.fxcrt::Retainable"*)***
  %75 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %74, align 8
  %76 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %75, i64 1
  %77 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %76, align 8
  call void %77(%"class.fxcrt::Retainable"* nonnull %73) #13
  br label %78

78:                                               ; preds = %64, %67, %72
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #13
  ret void
}

declare void @_ZN16CFX_BitmapStorerC1Ev(%class.CFX_BitmapStorer*) unnamed_addr #5

declare void @_ZN18CFX_ImageStretcherC1EP21ScanlineComposerIfaceRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEiiRK7FX_RECTRK21FXDIB_ResampleOptions(%class.CFX_ImageStretcher*, %class.ScanlineComposerIface*, %"class.fxcrt::RetainPtr.9"* dereferenceable(8), i32, i32, %struct.FX_RECT* dereferenceable(16), %struct.FXDIB_ResampleOptions* dereferenceable(4)) unnamed_addr #5

declare zeroext i1 @_ZN18CFX_ImageStretcher5StartEv(%class.CFX_ImageStretcher*) local_unnamed_addr #5

declare zeroext i1 @_ZN18CFX_ImageStretcher8ContinueEP19PauseIndicatorIface(%class.CFX_ImageStretcher*, %class.PauseIndicatorIface*) local_unnamed_addr #5

declare void @_ZN16CFX_BitmapStorer6DetachEv(%"class.fxcrt::RetainPtr"* sret, %class.CFX_BitmapStorer*) local_unnamed_addr #5

; Function Attrs: nounwind
declare void @_ZN18CFX_ImageStretcherD1Ev(%class.CFX_ImageStretcher*) unnamed_addr #8

; Function Attrs: nounwind
declare void @_ZN16CFX_BitmapStorerD1Ev(%class.CFX_BitmapStorer*) unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN12_GLOBAL__N_122ConvertBuffer_8bppMaskEiPhiiiRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEii(i32, i8* nocapture, i32, i32, i32, %"class.fxcrt::RetainPtr.9"* nocapture readonly dereferenceable(8), i32, i32) unnamed_addr #0 {
  %9 = alloca [256 x i8], align 16
  switch i32 %0, label %340 [
    i32 1, label %10
    i32 8, label %139
    i32 24, label %282
    i32 32, label %282
  ]

10:                                               ; preds = %8
  %11 = getelementptr inbounds %"class.fxcrt::RetainPtr.9", %"class.fxcrt::RetainPtr.9"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %12 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %11, align 8
  %13 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %12, i64 0, i32 6, i32 0, i32 0
  %14 = load i32*, i32** %13, align 8
  %15 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %12, i64 0, i32 6, i32 0, i32 1
  %16 = load i32*, i32** %15, align 8
  %17 = icmp eq i32* %14, %16
  br i1 %17, label %98, label %18

18:                                               ; preds = %10
  %19 = ptrtoint i32* %16 to i64
  %20 = ptrtoint i32* %14 to i64
  %21 = sub i64 %19, %20
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %23, label %24, !prof !8

23:                                               ; preds = %18
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !9
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !10
  unreachable

24:                                               ; preds = %18
  %25 = ashr exact i64 %21, 2
  %26 = load i32, i32* %14, align 4
  %27 = icmp ugt i64 %25, 1
  br i1 %27, label %29, label %28, !prof !19

28:                                               ; preds = %24
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !9
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !10
  unreachable

29:                                               ; preds = %24
  %30 = lshr i32 %26, 8
  %31 = lshr i32 %26, 16
  %32 = getelementptr inbounds i32, i32* %14, i64 1
  %33 = load i32, i32* %32, align 4
  %34 = lshr i32 %33, 16
  %35 = lshr i32 %33, 8
  %36 = and i32 %26, 255
  %37 = mul nuw nsw i32 %36, 11
  %38 = and i32 %30, 255
  %39 = mul nuw nsw i32 %38, 59
  %40 = add nuw nsw i32 %39, %37
  %41 = and i32 %31, 255
  %42 = mul nuw nsw i32 %41, 30
  %43 = add nuw nsw i32 %40, %42
  %44 = trunc i32 %43 to i16
  %45 = udiv i16 %44, 100
  %46 = trunc i16 %45 to i8
  %47 = and i32 %33, 255
  %48 = mul nuw nsw i32 %47, 11
  %49 = and i32 %35, 255
  %50 = mul nuw nsw i32 %49, 59
  %51 = add nuw nsw i32 %50, %48
  %52 = and i32 %34, 255
  %53 = mul nuw nsw i32 %52, 30
  %54 = add nuw nsw i32 %51, %53
  %55 = trunc i32 %54 to i16
  %56 = udiv i16 %55, 100
  %57 = trunc i16 %56 to i8
  %58 = icmp sgt i32 %4, 0
  br i1 %58, label %59, label %340

59:                                               ; preds = %29
  %60 = sext i32 %3 to i64
  %61 = add nsw i32 %6, %3
  %62 = icmp sgt i32 %3, 0
  %63 = sext i32 %2 to i64
  %64 = zext i32 %4 to i64
  br label %65

65:                                               ; preds = %77, %59
  %66 = phi i64 [ 0, %59 ], [ %78, %77 ]
  %67 = mul nsw i64 %66, %63
  %68 = getelementptr inbounds i8, i8* %1, i64 %67
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %68, i8 %46, i64 %60, i1 false) #13
  %69 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %11, align 8
  %70 = bitcast %class.CFX_DIBBase* %69 to i8* (%class.CFX_DIBBase*, i32)***
  %71 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %70, align 8
  %72 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %71, i64 3
  %73 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %72, align 8
  %74 = trunc i64 %66 to i32
  %75 = add i32 %74, %7
  %76 = tail call i8* %73(%class.CFX_DIBBase* %69, i32 %75) #13
  br i1 %62, label %80, label %77

77:                                               ; preds = %94, %65
  %78 = add nuw nsw i64 %66, 1
  %79 = icmp eq i64 %78, %64
  br i1 %79, label %340, label %65

80:                                               ; preds = %65, %94
  %81 = phi i32 [ %96, %94 ], [ %6, %65 ]
  %82 = phi i8* [ %95, %94 ], [ %68, %65 ]
  %83 = sdiv i32 %81, 8
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %76, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = srem i32 %81, 8
  %89 = sub nsw i32 7, %88
  %90 = shl i32 1, %89
  %91 = and i32 %90, %87
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %94, label %93

93:                                               ; preds = %80
  store i8 %57, i8* %82, align 1
  br label %94

94:                                               ; preds = %93, %80
  %95 = getelementptr inbounds i8, i8* %82, i64 1
  %96 = add nsw i32 %81, 1
  %97 = icmp slt i32 %96, %61
  br i1 %97, label %80, label %77

98:                                               ; preds = %10
  %99 = icmp sgt i32 %4, 0
  br i1 %99, label %100, label %340

100:                                              ; preds = %98
  %101 = sext i32 %3 to i64
  %102 = add nsw i32 %6, %3
  %103 = icmp sgt i32 %3, 0
  %104 = sext i32 %2 to i64
  %105 = zext i32 %4 to i64
  br label %106

106:                                              ; preds = %118, %100
  %107 = phi i64 [ 0, %100 ], [ %119, %118 ]
  %108 = mul nsw i64 %107, %104
  %109 = getelementptr inbounds i8, i8* %1, i64 %108
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %109, i8 0, i64 %101, i1 false) #13
  %110 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %11, align 8
  %111 = bitcast %class.CFX_DIBBase* %110 to i8* (%class.CFX_DIBBase*, i32)***
  %112 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %111, align 8
  %113 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %112, i64 3
  %114 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %113, align 8
  %115 = trunc i64 %107 to i32
  %116 = add i32 %115, %7
  %117 = tail call i8* %114(%class.CFX_DIBBase* %110, i32 %116) #13
  br i1 %103, label %121, label %118

118:                                              ; preds = %135, %106
  %119 = add nuw nsw i64 %107, 1
  %120 = icmp eq i64 %119, %105
  br i1 %120, label %340, label %106

121:                                              ; preds = %106, %135
  %122 = phi i32 [ %137, %135 ], [ %6, %106 ]
  %123 = phi i8* [ %136, %135 ], [ %109, %106 ]
  %124 = sdiv i32 %122, 8
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds i8, i8* %117, i64 %125
  %127 = load i8, i8* %126, align 1
  %128 = zext i8 %127 to i32
  %129 = srem i32 %122, 8
  %130 = sub nsw i32 7, %129
  %131 = shl i32 1, %130
  %132 = and i32 %131, %128
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %135, label %134

134:                                              ; preds = %121
  store i8 -1, i8* %123, align 1
  br label %135

135:                                              ; preds = %134, %121
  %136 = getelementptr inbounds i8, i8* %123, i64 1
  %137 = add nsw i32 %122, 1
  %138 = icmp slt i32 %137, %102
  br i1 %138, label %121, label %118

139:                                              ; preds = %8
  %140 = getelementptr inbounds %"class.fxcrt::RetainPtr.9", %"class.fxcrt::RetainPtr.9"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %141 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %140, align 8
  %142 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %141, i64 0, i32 6, i32 0, i32 0
  %143 = load i32*, i32** %142, align 8
  %144 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %141, i64 0, i32 6, i32 0, i32 1
  %145 = load i32*, i32** %144, align 8
  %146 = icmp eq i32* %143, %145
  br i1 %146, label %253, label %147

147:                                              ; preds = %139
  %148 = ptrtoint i32* %145 to i64
  %149 = ptrtoint i32* %143 to i64
  %150 = sub i64 %148, %149
  %151 = ashr exact i64 %150, 2
  %152 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %152) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %152, i8 -86, i64 256, i1 false) #13
  br label %165

153:                                              ; preds = %169
  %154 = icmp sgt i32 %4, 0
  br i1 %154, label %155, label %252

155:                                              ; preds = %153
  %156 = sext i32 %6 to i64
  %157 = icmp sgt i32 %3, 0
  %158 = sext i32 %2 to i64
  %159 = zext i32 %4 to i64
  %160 = add i32 %3, -1
  %161 = and i32 %3, 3
  %162 = icmp ult i32 %160, 3
  %163 = sub i32 %3, %161
  %164 = icmp eq i32 %161, 0
  br label %188

165:                                              ; preds = %169, %147
  %166 = phi i64 [ 0, %147 ], [ %186, %169 ]
  %167 = icmp eq i64 %166, %151
  br i1 %167, label %168, label %169, !prof !8

168:                                              ; preds = %165
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !9
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !10
  unreachable

169:                                              ; preds = %165
  %170 = getelementptr inbounds i32, i32* %143, i64 %166
  %171 = load i32, i32* %170, align 4
  %172 = and i32 %171, 255
  %173 = mul nuw nsw i32 %172, 11
  %174 = lshr i32 %171, 8
  %175 = and i32 %174, 255
  %176 = mul nuw nsw i32 %175, 59
  %177 = add nuw nsw i32 %176, %173
  %178 = lshr i32 %171, 16
  %179 = and i32 %178, 255
  %180 = mul nuw nsw i32 %179, 30
  %181 = add nuw nsw i32 %177, %180
  %182 = trunc i32 %181 to i16
  %183 = udiv i16 %182, 100
  %184 = trunc i16 %183 to i8
  %185 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %166
  store i8 %184, i8* %185, align 1
  %186 = add nuw nsw i64 %166, 1
  %187 = icmp eq i64 %186, 256
  br i1 %187, label %153, label %165

188:                                              ; preds = %220, %155
  %189 = phi %class.CFX_DIBBase* [ %141, %155 ], [ %221, %220 ]
  %190 = phi i64 [ 0, %155 ], [ %218, %220 ]
  %191 = bitcast %class.CFX_DIBBase* %189 to i8* (%class.CFX_DIBBase*, i32)***
  %192 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %191, align 8
  %193 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %192, i64 3
  %194 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %193, align 8
  %195 = trunc i64 %190 to i32
  %196 = add i32 %195, %7
  %197 = tail call i8* %194(%class.CFX_DIBBase* %189, i32 %196) #13
  br i1 %157, label %198, label %217

198:                                              ; preds = %188
  %199 = getelementptr inbounds i8, i8* %197, i64 %156
  %200 = mul nsw i64 %190, %158
  %201 = getelementptr inbounds i8, i8* %1, i64 %200
  br i1 %162, label %202, label %222

202:                                              ; preds = %222, %198
  %203 = phi i8* [ %199, %198 ], [ %244, %222 ]
  %204 = phi i8* [ %201, %198 ], [ %249, %222 ]
  br i1 %164, label %217, label %205

205:                                              ; preds = %202, %205
  %206 = phi i8* [ %209, %205 ], [ %203, %202 ]
  %207 = phi i8* [ %214, %205 ], [ %204, %202 ]
  %208 = phi i32 [ %215, %205 ], [ %161, %202 ]
  %209 = getelementptr inbounds i8, i8* %206, i64 1
  %210 = load i8, i8* %206, align 1
  %211 = zext i8 %210 to i64
  %212 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %211
  %213 = load i8, i8* %212, align 1
  %214 = getelementptr inbounds i8, i8* %207, i64 1
  store i8 %213, i8* %207, align 1
  %215 = add i32 %208, -1
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %217, label %205, !llvm.loop !64

217:                                              ; preds = %202, %205, %188
  %218 = add nuw nsw i64 %190, 1
  %219 = icmp eq i64 %218, %159
  br i1 %219, label %252, label %220

220:                                              ; preds = %217
  %221 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %140, align 8
  br label %188

222:                                              ; preds = %198, %222
  %223 = phi i8* [ %244, %222 ], [ %199, %198 ]
  %224 = phi i8* [ %249, %222 ], [ %201, %198 ]
  %225 = phi i32 [ %250, %222 ], [ %163, %198 ]
  %226 = getelementptr inbounds i8, i8* %223, i64 1
  %227 = load i8, i8* %223, align 1
  %228 = zext i8 %227 to i64
  %229 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %228
  %230 = load i8, i8* %229, align 1
  %231 = getelementptr inbounds i8, i8* %224, i64 1
  store i8 %230, i8* %224, align 1
  %232 = getelementptr inbounds i8, i8* %223, i64 2
  %233 = load i8, i8* %226, align 1
  %234 = zext i8 %233 to i64
  %235 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %234
  %236 = load i8, i8* %235, align 1
  %237 = getelementptr inbounds i8, i8* %224, i64 2
  store i8 %236, i8* %231, align 1
  %238 = getelementptr inbounds i8, i8* %223, i64 3
  %239 = load i8, i8* %232, align 1
  %240 = zext i8 %239 to i64
  %241 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %240
  %242 = load i8, i8* %241, align 1
  %243 = getelementptr inbounds i8, i8* %224, i64 3
  store i8 %242, i8* %237, align 1
  %244 = getelementptr inbounds i8, i8* %223, i64 4
  %245 = load i8, i8* %238, align 1
  %246 = zext i8 %245 to i64
  %247 = getelementptr inbounds [256 x i8], [256 x i8]* %9, i64 0, i64 %246
  %248 = load i8, i8* %247, align 1
  %249 = getelementptr inbounds i8, i8* %224, i64 4
  store i8 %248, i8* %243, align 1
  %250 = add i32 %225, -4
  %251 = icmp eq i32 %250, 0
  br i1 %251, label %202, label %222

252:                                              ; preds = %217, %153
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %152) #13
  br label %340

253:                                              ; preds = %139
  %254 = icmp sgt i32 %4, 0
  br i1 %254, label %255, label %340

255:                                              ; preds = %253
  %256 = sext i32 %6 to i64
  %257 = sext i32 %3 to i64
  %258 = sext i32 %2 to i64
  %259 = zext i32 %4 to i64
  %260 = bitcast %class.CFX_DIBBase* %141 to i8* (%class.CFX_DIBBase*, i32)***
  %261 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %260, align 8
  %262 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %261, i64 3
  %263 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %262, align 8
  %264 = tail call i8* %263(%class.CFX_DIBBase* %141, i32 %7) #13
  %265 = getelementptr inbounds i8, i8* %264, i64 %256
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %265, i64 %257, i1 false) #13
  %266 = icmp eq i32 %4, 1
  br i1 %266, label %340, label %267

267:                                              ; preds = %255, %267
  %268 = phi i64 [ %280, %267 ], [ 1, %255 ]
  %269 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %140, align 8
  %270 = mul nsw i64 %268, %258
  %271 = getelementptr inbounds i8, i8* %1, i64 %270
  %272 = bitcast %class.CFX_DIBBase* %269 to i8* (%class.CFX_DIBBase*, i32)***
  %273 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %272, align 8
  %274 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %273, i64 3
  %275 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %274, align 8
  %276 = trunc i64 %268 to i32
  %277 = add i32 %276, %7
  %278 = tail call i8* %275(%class.CFX_DIBBase* %269, i32 %277) #13
  %279 = getelementptr inbounds i8, i8* %278, i64 %256
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %271, i8* align 1 %279, i64 %257, i1 false) #13
  %280 = add nuw nsw i64 %268, 1
  %281 = icmp eq i64 %280, %259
  br i1 %281, label %340, label %267

282:                                              ; preds = %8, %8
  %283 = getelementptr inbounds %"class.fxcrt::RetainPtr.9", %"class.fxcrt::RetainPtr.9"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %284 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %283, align 8
  %285 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %284, i64 0, i32 1
  %286 = load i16, i16* %285, align 8
  %287 = lshr i16 %286, 3
  %288 = and i16 %287, 31
  %289 = icmp sgt i32 %4, 0
  br i1 %289, label %290, label %340

290:                                              ; preds = %282
  %291 = zext i16 %288 to i32
  %292 = mul nsw i32 %291, %6
  %293 = sext i32 %292 to i64
  %294 = icmp sgt i32 %3, 0
  %295 = zext i16 %288 to i64
  %296 = sext i32 %2 to i64
  %297 = zext i32 %4 to i64
  br label %298

298:                                              ; preds = %315, %290
  %299 = phi %class.CFX_DIBBase* [ %284, %290 ], [ %316, %315 ]
  %300 = phi i64 [ 0, %290 ], [ %313, %315 ]
  %301 = bitcast %class.CFX_DIBBase* %299 to i8* (%class.CFX_DIBBase*, i32)***
  %302 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %301, align 8
  %303 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %302, i64 3
  %304 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %303, align 8
  %305 = trunc i64 %300 to i32
  %306 = add i32 %305, %7
  %307 = tail call i8* %304(%class.CFX_DIBBase* %299, i32 %306) #13
  br i1 %294, label %308, label %312

308:                                              ; preds = %298
  %309 = getelementptr inbounds i8, i8* %307, i64 %293
  %310 = mul nsw i64 %300, %296
  %311 = getelementptr inbounds i8, i8* %1, i64 %310
  br label %317

312:                                              ; preds = %317, %298
  %313 = add nuw nsw i64 %300, 1
  %314 = icmp eq i64 %313, %297
  br i1 %314, label %340, label %315

315:                                              ; preds = %312
  %316 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %283, align 8
  br label %298

317:                                              ; preds = %317, %308
  %318 = phi i32 [ %338, %317 ], [ 0, %308 ]
  %319 = phi i8* [ %337, %317 ], [ %309, %308 ]
  %320 = phi i8* [ %336, %317 ], [ %311, %308 ]
  %321 = load i8, i8* %319, align 1
  %322 = zext i8 %321 to i16
  %323 = mul nuw nsw i16 %322, 11
  %324 = getelementptr inbounds i8, i8* %319, i64 1
  %325 = load i8, i8* %324, align 1
  %326 = zext i8 %325 to i16
  %327 = mul nuw nsw i16 %326, 59
  %328 = add nuw nsw i16 %327, %323
  %329 = getelementptr inbounds i8, i8* %319, i64 2
  %330 = load i8, i8* %329, align 1
  %331 = zext i8 %330 to i16
  %332 = mul nuw nsw i16 %331, 30
  %333 = add nuw nsw i16 %328, %332
  %334 = udiv i16 %333, 100
  %335 = trunc i16 %334 to i8
  %336 = getelementptr inbounds i8, i8* %320, i64 1
  store i8 %335, i8* %320, align 1
  %337 = getelementptr inbounds i8, i8* %319, i64 %295
  %338 = add nuw nsw i32 %318, 1
  %339 = icmp eq i32 %338, %3
  br i1 %339, label %312, label %317

340:                                              ; preds = %312, %267, %77, %118, %255, %282, %253, %98, %29, %8, %252
  %341 = phi i1 [ true, %252 ], [ false, %8 ], [ true, %29 ], [ true, %98 ], [ true, %253 ], [ true, %282 ], [ true, %255 ], [ true, %118 ], [ true, %77 ], [ true, %267 ], [ true, %312 ]
  ret i1 %341
}

declare void @__cxa_pure_virtual() unnamed_addr

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #10

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #10

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #11

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #12

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @"_ZNSt3__16__sortIRZN12_GLOBAL__N_111CFX_PaletteC1ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEEE3$_0PNS_4pairIjjEEEEvT0_SE_T_"(%"struct.std::__1::pair"*, %"struct.std::__1::pair"*) unnamed_addr #0 {
  br label %3

3:                                                ; preds = %405, %2
  %4 = phi %"struct.std::__1::pair"* [ %1, %2 ], [ %383, %405 ]
  %5 = phi %"struct.std::__1::pair"* [ %0, %2 ], [ %20, %405 ]
  %6 = ptrtoint %"struct.std::__1::pair"* %4 to i64
  %7 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %4, i64 -1
  %8 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %7, i64 0, i32 0
  %9 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %4, i64 -1, i32 1
  %10 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %4, i64 -1, i32 1
  %11 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %4, i64 -1, i32 1
  %12 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %7, i64 0, i32 0
  %13 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %4, i64 -1, i32 1
  %14 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %7, i64 0, i32 0
  %15 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %4, i64 -1, i32 1
  %16 = ptrtoint %"struct.std::__1::pair"* %4 to i64
  br label %17

17:                                               ; preds = %414, %3
  %18 = phi %"struct.std::__1::pair"* [ %5, %3 ], [ %415, %414 ]
  br label %19

19:                                               ; preds = %323, %17
  %20 = phi %"struct.std::__1::pair"* [ %18, %17 ], [ %310, %323 ]
  %21 = ptrtoint %"struct.std::__1::pair"* %20 to i64
  %22 = sub i64 %6, %21
  %23 = ashr exact i64 %22, 3
  switch i64 %23, label %114 [
    i64 0, label %418
    i64 1, label %418
    i64 2, label %24
    i64 3, label %35
    i64 4, label %74
    i64 5, label %79
  ]

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %4, i64 -1, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 0
  %28 = load i32, i32* %27, align 4
  %29 = icmp ult i32 %26, %28
  br i1 %29, label %30, label %418

30:                                               ; preds = %24
  store i32 %26, i32* %27, align 4
  store i32 %28, i32* %25, align 4
  %31 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 1
  %32 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %4, i64 -1, i32 1
  %33 = load i32, i32* %31, align 4
  %34 = load i32, i32* %32, align 4
  store i32 %34, i32* %31, align 4
  store i32 %33, i32* %32, align 4
  br label %418

35:                                               ; preds = %19
  %36 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 1, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = icmp ult i32 %37, %39
  %41 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %4, i64 -1, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = icmp ult i32 %42, %37
  br i1 %40, label %57, label %44

44:                                               ; preds = %35
  br i1 %43, label %45, label %418

45:                                               ; preds = %44
  store i32 %42, i32* %36, align 4
  store i32 %37, i32* %41, align 4
  %46 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 1, i32 1
  %47 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %4, i64 -1, i32 1
  %48 = load i32, i32* %46, align 4
  %49 = load i32, i32* %47, align 4
  store i32 %49, i32* %46, align 4
  store i32 %48, i32* %47, align 4
  %50 = load i32, i32* %36, align 4
  %51 = load i32, i32* %38, align 4
  %52 = icmp ult i32 %50, %51
  br i1 %52, label %53, label %418

53:                                               ; preds = %45
  store i32 %50, i32* %38, align 4
  store i32 %51, i32* %36, align 4
  %54 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 1
  %55 = load i32, i32* %54, align 4
  %56 = load i32, i32* %46, align 4
  store i32 %56, i32* %54, align 4
  store i32 %55, i32* %46, align 4
  br label %418

57:                                               ; preds = %35
  br i1 %43, label %58, label %63

58:                                               ; preds = %57
  store i32 %42, i32* %38, align 4
  store i32 %39, i32* %41, align 4
  %59 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 1
  %60 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %4, i64 -1, i32 1
  %61 = load i32, i32* %59, align 4
  %62 = load i32, i32* %60, align 4
  store i32 %62, i32* %59, align 4
  store i32 %61, i32* %60, align 4
  br label %418

63:                                               ; preds = %57
  store i32 %37, i32* %38, align 4
  store i32 %39, i32* %36, align 4
  %64 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 1
  %65 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 1, i32 1
  %66 = load i32, i32* %64, align 4
  %67 = load i32, i32* %65, align 4
  store i32 %67, i32* %64, align 4
  store i32 %66, i32* %65, align 4
  %68 = load i32, i32* %41, align 4
  %69 = icmp ult i32 %68, %39
  br i1 %69, label %70, label %418

70:                                               ; preds = %63
  store i32 %68, i32* %36, align 4
  store i32 %39, i32* %41, align 4
  %71 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %4, i64 -1, i32 1
  %72 = load i32, i32* %65, align 4
  %73 = load i32, i32* %71, align 4
  store i32 %73, i32* %65, align 4
  store i32 %72, i32* %71, align 4
  br label %418

74:                                               ; preds = %19
  %75 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 1
  %76 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 2
  %77 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %4, i64 -1
  %78 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN12_GLOBAL__N_111CFX_PaletteC1ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEEE3$_0PNS_4pairIjjEEEEjT0_SE_SE_SE_T_"(%"struct.std::__1::pair"* %20, %"struct.std::__1::pair"* %75, %"struct.std::__1::pair"* %76, %"struct.std::__1::pair"* %77)
  br label %418

79:                                               ; preds = %19
  %80 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 1
  %81 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 2
  %82 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 3
  %83 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN12_GLOBAL__N_111CFX_PaletteC1ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEEE3$_0PNS_4pairIjjEEEEjT0_SE_SE_SE_T_"(%"struct.std::__1::pair"* %20, %"struct.std::__1::pair"* %80, %"struct.std::__1::pair"* %81, %"struct.std::__1::pair"* %82) #13
  %84 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %4, i64 -1, i32 0
  %85 = load i32, i32* %84, align 4
  %86 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %82, i64 0, i32 0
  %87 = load i32, i32* %86, align 4
  %88 = icmp ult i32 %85, %87
  br i1 %88, label %89, label %418

89:                                               ; preds = %79
  store i32 %85, i32* %86, align 4
  store i32 %87, i32* %84, align 4
  %90 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 3, i32 1
  %91 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %4, i64 -1, i32 1
  %92 = load i32, i32* %90, align 4
  %93 = load i32, i32* %91, align 4
  store i32 %93, i32* %90, align 4
  store i32 %92, i32* %91, align 4
  %94 = load i32, i32* %86, align 4
  %95 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %81, i64 0, i32 0
  %96 = load i32, i32* %95, align 4
  %97 = icmp ult i32 %94, %96
  br i1 %97, label %98, label %418

98:                                               ; preds = %89
  store i32 %94, i32* %95, align 4
  store i32 %96, i32* %86, align 4
  %99 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 2, i32 1
  %100 = load i32, i32* %99, align 4
  %101 = load i32, i32* %90, align 4
  store i32 %101, i32* %99, align 4
  store i32 %100, i32* %90, align 4
  %102 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %80, i64 0, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = icmp ult i32 %94, %103
  br i1 %104, label %105, label %418

105:                                              ; preds = %98
  store i32 %94, i32* %102, align 4
  store i32 %103, i32* %95, align 4
  %106 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 1, i32 1
  %107 = load i32, i32* %106, align 4
  store i32 %101, i32* %106, align 4
  store i32 %107, i32* %99, align 4
  %108 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 0
  %109 = load i32, i32* %108, align 4
  %110 = icmp ult i32 %94, %109
  br i1 %110, label %111, label %418

111:                                              ; preds = %105
  store i32 %94, i32* %108, align 4
  store i32 %109, i32* %102, align 4
  %112 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 1
  %113 = load i32, i32* %112, align 4
  store i32 %101, i32* %112, align 4
  store i32 %113, i32* %106, align 4
  br label %418

114:                                              ; preds = %19
  %115 = icmp slt i64 %22, 56
  br i1 %115, label %116, label %191

116:                                              ; preds = %114
  %117 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 2
  %118 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 1, i32 0
  %119 = load i32, i32* %118, align 4
  %120 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 0
  %121 = load i32, i32* %120, align 4
  %122 = icmp ult i32 %119, %121
  %123 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %117, i64 0, i32 0
  %124 = load i32, i32* %123, align 4
  %125 = icmp ult i32 %124, %119
  br i1 %122, label %136, label %126

126:                                              ; preds = %116
  br i1 %125, label %127, label %151

127:                                              ; preds = %126
  store i32 %124, i32* %118, align 4
  store i32 %119, i32* %123, align 4
  %128 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 1, i32 1
  %129 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 2, i32 1
  %130 = load i32, i32* %128, align 4
  %131 = load i32, i32* %129, align 4
  store i32 %131, i32* %128, align 4
  store i32 %130, i32* %129, align 4
  %132 = icmp ult i32 %124, %121
  br i1 %132, label %133, label %151

133:                                              ; preds = %127
  store i32 %124, i32* %120, align 4
  store i32 %121, i32* %118, align 4
  %134 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 1
  %135 = load i32, i32* %134, align 4
  store i32 %131, i32* %134, align 4
  store i32 %135, i32* %128, align 4
  br label %151

136:                                              ; preds = %116
  br i1 %125, label %137, label %142

137:                                              ; preds = %136
  store i32 %124, i32* %120, align 4
  store i32 %121, i32* %123, align 4
  %138 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 1
  %139 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 2, i32 1
  %140 = load i32, i32* %138, align 4
  %141 = load i32, i32* %139, align 4
  store i32 %141, i32* %138, align 4
  store i32 %140, i32* %139, align 4
  br label %151

142:                                              ; preds = %136
  store i32 %119, i32* %120, align 4
  store i32 %121, i32* %118, align 4
  %143 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 1
  %144 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 1, i32 1
  %145 = load i32, i32* %143, align 4
  %146 = load i32, i32* %144, align 4
  store i32 %146, i32* %143, align 4
  store i32 %145, i32* %144, align 4
  %147 = icmp ult i32 %124, %121
  br i1 %147, label %148, label %151

148:                                              ; preds = %142
  store i32 %124, i32* %118, align 4
  store i32 %121, i32* %123, align 4
  %149 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 2, i32 1
  %150 = load i32, i32* %149, align 4
  store i32 %150, i32* %144, align 4
  store i32 %145, i32* %149, align 4
  br label %151

151:                                              ; preds = %148, %142, %137, %133, %127, %126
  %152 = phi i32 [ %124, %126 ], [ %119, %127 ], [ %119, %133 ], [ %121, %137 ], [ %124, %142 ], [ %121, %148 ]
  %153 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 3
  %154 = icmp eq %"struct.std::__1::pair"* %153, %4
  br i1 %154, label %418, label %155

155:                                              ; preds = %151, %189
  %156 = phi i32 [ %190, %189 ], [ %152, %151 ]
  %157 = phi %"struct.std::__1::pair"* [ %187, %189 ], [ %153, %151 ]
  %158 = phi %"struct.std::__1::pair"* [ %157, %189 ], [ %117, %151 ]
  %159 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %157, i64 0, i32 0
  %160 = load i32, i32* %159, align 4
  %161 = icmp ult i32 %160, %156
  br i1 %161, label %162, label %186

162:                                              ; preds = %155
  %163 = bitcast %"struct.std::__1::pair"* %157 to i64*
  %164 = load i64, i64* %163, align 4
  %165 = trunc i64 %164 to i32
  %166 = lshr i64 %164, 32
  %167 = trunc i64 %166 to i32
  br label %168

168:                                              ; preds = %177, %162
  %169 = phi i32 [ %156, %162 ], [ %180, %177 ]
  %170 = phi %"struct.std::__1::pair"* [ %157, %162 ], [ %171, %177 ]
  %171 = phi %"struct.std::__1::pair"* [ %158, %162 ], [ %178, %177 ]
  %172 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %170, i64 0, i32 0
  store i32 %169, i32* %172, align 4
  %173 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %171, i64 0, i32 1
  %174 = load i32, i32* %173, align 4
  %175 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %170, i64 0, i32 1
  store i32 %174, i32* %175, align 4
  %176 = icmp eq %"struct.std::__1::pair"* %171, %20
  br i1 %176, label %182, label %177

177:                                              ; preds = %168
  %178 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %171, i64 -1
  %179 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %178, i64 0, i32 0
  %180 = load i32, i32* %179, align 4
  %181 = icmp ugt i32 %180, %165
  br i1 %181, label %168, label %182

182:                                              ; preds = %177, %168
  %183 = phi %"struct.std::__1::pair"* [ %20, %168 ], [ %171, %177 ]
  %184 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %183, i64 0, i32 0
  %185 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %183, i64 0, i32 1
  store i32 %165, i32* %184, align 4
  store i32 %167, i32* %185, align 4
  br label %186

186:                                              ; preds = %182, %155
  %187 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %157, i64 1
  %188 = icmp eq %"struct.std::__1::pair"* %187, %4
  br i1 %188, label %418, label %189

189:                                              ; preds = %186
  %190 = load i32, i32* %159, align 4
  br label %155

191:                                              ; preds = %114
  %192 = icmp sgt i64 %22, 7992
  %193 = sdiv i64 %23, 2
  %194 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 %193
  br i1 %192, label %195, label %236

195:                                              ; preds = %191
  %196 = sdiv i64 %23, 4
  %197 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 %196
  %198 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %194, i64 %196
  %199 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN12_GLOBAL__N_111CFX_PaletteC1ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEEE3$_0PNS_4pairIjjEEEEjT0_SE_SE_SE_T_"(%"struct.std::__1::pair"* %20, %"struct.std::__1::pair"* %197, %"struct.std::__1::pair"* %194, %"struct.std::__1::pair"* %198) #13
  %200 = load i32, i32* %12, align 4
  %201 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %198, i64 0, i32 0
  %202 = load i32, i32* %201, align 4
  %203 = icmp ult i32 %200, %202
  br i1 %203, label %204, label %271

204:                                              ; preds = %195
  store i32 %200, i32* %201, align 4
  store i32 %202, i32* %12, align 4
  %205 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %198, i64 0, i32 1
  %206 = load i32, i32* %205, align 4
  %207 = load i32, i32* %13, align 4
  store i32 %207, i32* %205, align 4
  store i32 %206, i32* %13, align 4
  %208 = add i32 %199, 1
  %209 = load i32, i32* %201, align 4
  %210 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %194, i64 0, i32 0
  %211 = load i32, i32* %210, align 4
  %212 = icmp ult i32 %209, %211
  br i1 %212, label %213, label %271

213:                                              ; preds = %204
  store i32 %209, i32* %210, align 4
  store i32 %211, i32* %201, align 4
  %214 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 %193, i32 1
  %215 = load i32, i32* %214, align 4
  %216 = load i32, i32* %205, align 4
  store i32 %216, i32* %214, align 4
  store i32 %215, i32* %205, align 4
  %217 = add i32 %199, 2
  %218 = load i32, i32* %210, align 4
  %219 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %197, i64 0, i32 0
  %220 = load i32, i32* %219, align 4
  %221 = icmp ult i32 %218, %220
  br i1 %221, label %222, label %271

222:                                              ; preds = %213
  store i32 %218, i32* %219, align 4
  store i32 %220, i32* %210, align 4
  %223 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 %196, i32 1
  %224 = load i32, i32* %223, align 4
  %225 = load i32, i32* %214, align 4
  store i32 %225, i32* %223, align 4
  store i32 %224, i32* %214, align 4
  %226 = add i32 %199, 3
  %227 = load i32, i32* %219, align 4
  %228 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 0
  %229 = load i32, i32* %228, align 4
  %230 = icmp ult i32 %227, %229
  br i1 %230, label %231, label %271

231:                                              ; preds = %222
  store i32 %227, i32* %228, align 4
  store i32 %229, i32* %219, align 4
  %232 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 1
  %233 = load i32, i32* %232, align 4
  %234 = load i32, i32* %223, align 4
  store i32 %234, i32* %232, align 4
  store i32 %233, i32* %223, align 4
  %235 = add i32 %199, 4
  br label %271

236:                                              ; preds = %191
  %237 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %194, i64 0, i32 0
  %238 = load i32, i32* %237, align 4
  %239 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 0
  %240 = load i32, i32* %239, align 4
  %241 = icmp ult i32 %238, %240
  %242 = load i32, i32* %8, align 4
  %243 = icmp ult i32 %242, %238
  br i1 %241, label %256, label %244

244:                                              ; preds = %236
  br i1 %243, label %245, label %271

245:                                              ; preds = %244
  store i32 %242, i32* %237, align 4
  store i32 %238, i32* %8, align 4
  %246 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 %193, i32 1
  %247 = load i32, i32* %246, align 4
  %248 = load i32, i32* %9, align 4
  store i32 %248, i32* %246, align 4
  store i32 %247, i32* %9, align 4
  %249 = load i32, i32* %237, align 4
  %250 = load i32, i32* %239, align 4
  %251 = icmp ult i32 %249, %250
  br i1 %251, label %252, label %271

252:                                              ; preds = %245
  store i32 %249, i32* %239, align 4
  store i32 %250, i32* %237, align 4
  %253 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 1
  %254 = load i32, i32* %253, align 4
  %255 = load i32, i32* %246, align 4
  store i32 %255, i32* %253, align 4
  store i32 %254, i32* %246, align 4
  br label %271

256:                                              ; preds = %236
  br i1 %243, label %257, label %261

257:                                              ; preds = %256
  store i32 %242, i32* %239, align 4
  store i32 %240, i32* %8, align 4
  %258 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 1
  %259 = load i32, i32* %258, align 4
  %260 = load i32, i32* %11, align 4
  store i32 %260, i32* %258, align 4
  store i32 %259, i32* %11, align 4
  br label %271

261:                                              ; preds = %256
  store i32 %238, i32* %239, align 4
  store i32 %240, i32* %237, align 4
  %262 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 1
  %263 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 %193, i32 1
  %264 = load i32, i32* %262, align 4
  %265 = load i32, i32* %263, align 4
  store i32 %265, i32* %262, align 4
  store i32 %264, i32* %263, align 4
  %266 = load i32, i32* %8, align 4
  %267 = icmp ult i32 %266, %240
  br i1 %267, label %268, label %271

268:                                              ; preds = %261
  store i32 %266, i32* %237, align 4
  store i32 %240, i32* %8, align 4
  %269 = load i32, i32* %263, align 4
  %270 = load i32, i32* %10, align 4
  store i32 %270, i32* %263, align 4
  store i32 %269, i32* %10, align 4
  br label %271

271:                                              ; preds = %268, %261, %257, %252, %245, %244, %231, %222, %213, %204, %195
  %272 = phi i32 [ %235, %231 ], [ %226, %222 ], [ %217, %213 ], [ %208, %204 ], [ %199, %195 ], [ 1, %257 ], [ 0, %244 ], [ 2, %252 ], [ 1, %245 ], [ 2, %268 ], [ 1, %261 ]
  %273 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 0
  %274 = load i32, i32* %273, align 4
  %275 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %194, i64 0, i32 0
  %276 = load i32, i32* %275, align 4
  %277 = icmp ult i32 %274, %276
  br i1 %277, label %342, label %278

278:                                              ; preds = %271, %331
  %279 = phi %"struct.std::__1::pair"* [ %280, %331 ], [ %7, %271 ]
  %280 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %279, i64 -1
  %281 = icmp eq %"struct.std::__1::pair"* %20, %280
  br i1 %281, label %282, label %331

282:                                              ; preds = %278
  %283 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 1
  %284 = load i32, i32* %14, align 4
  %285 = icmp ult i32 %274, %284
  br i1 %285, label %302, label %286

286:                                              ; preds = %282
  %287 = icmp eq %"struct.std::__1::pair"* %283, %7
  br i1 %287, label %418, label %288

288:                                              ; preds = %286, %299
  %289 = phi %"struct.std::__1::pair"* [ %300, %299 ], [ %283, %286 ]
  %290 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %289, i64 0, i32 0
  %291 = load i32, i32* %290, align 4
  %292 = icmp ult i32 %274, %291
  br i1 %292, label %293, label %299

293:                                              ; preds = %288
  %294 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %289, i64 0, i32 0
  store i32 %284, i32* %294, align 4
  store i32 %291, i32* %14, align 4
  %295 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %289, i64 0, i32 1
  %296 = load i32, i32* %295, align 4
  %297 = load i32, i32* %15, align 4
  store i32 %297, i32* %295, align 4
  store i32 %296, i32* %15, align 4
  %298 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %289, i64 1
  br label %302

299:                                              ; preds = %288
  %300 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %289, i64 1
  %301 = icmp eq %"struct.std::__1::pair"* %300, %7
  br i1 %301, label %418, label %288

302:                                              ; preds = %293, %282
  %303 = phi %"struct.std::__1::pair"* [ %283, %282 ], [ %298, %293 ]
  %304 = icmp eq %"struct.std::__1::pair"* %303, %7
  br i1 %304, label %418, label %305

305:                                              ; preds = %302, %325
  %306 = phi %"struct.std::__1::pair"* [ %314, %325 ], [ %303, %302 ]
  %307 = phi %"struct.std::__1::pair"* [ %319, %325 ], [ %7, %302 ]
  %308 = load i32, i32* %273, align 4
  br label %309

309:                                              ; preds = %309, %305
  %310 = phi %"struct.std::__1::pair"* [ %306, %305 ], [ %314, %309 ]
  %311 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %310, i64 0, i32 0
  %312 = load i32, i32* %311, align 4
  %313 = icmp ult i32 %308, %312
  %314 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %310, i64 1
  br i1 %313, label %315, label %309

315:                                              ; preds = %309
  %316 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %310, i64 0, i32 0
  br label %317

317:                                              ; preds = %315, %317
  %318 = phi %"struct.std::__1::pair"* [ %319, %317 ], [ %307, %315 ]
  %319 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %318, i64 -1
  %320 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %319, i64 0, i32 0
  %321 = load i32, i32* %320, align 4
  %322 = icmp ult i32 %308, %321
  br i1 %322, label %317, label %323

323:                                              ; preds = %317
  %324 = icmp ult %"struct.std::__1::pair"* %310, %319
  br i1 %324, label %325, label %19

325:                                              ; preds = %323
  %326 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %319, i64 0, i32 0
  store i32 %321, i32* %316, align 4
  store i32 %312, i32* %326, align 4
  %327 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %310, i64 0, i32 1
  %328 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %318, i64 -1, i32 1
  %329 = load i32, i32* %327, align 4
  %330 = load i32, i32* %328, align 4
  store i32 %330, i32* %327, align 4
  store i32 %329, i32* %328, align 4
  br label %305

331:                                              ; preds = %278
  %332 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %280, i64 0, i32 0
  %333 = load i32, i32* %332, align 4
  %334 = icmp ult i32 %333, %276
  br i1 %334, label %335, label %278

335:                                              ; preds = %331
  %336 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %280, i64 0, i32 0
  store i32 %333, i32* %273, align 4
  store i32 %274, i32* %336, align 4
  %337 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 0, i32 1
  %338 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %279, i64 -1, i32 1
  %339 = load i32, i32* %337, align 4
  %340 = load i32, i32* %338, align 4
  store i32 %340, i32* %337, align 4
  store i32 %339, i32* %338, align 4
  %341 = add i32 %272, 1
  br label %342

342:                                              ; preds = %271, %335
  %343 = phi i32 [ %341, %335 ], [ %272, %271 ]
  %344 = phi %"struct.std::__1::pair"* [ %280, %335 ], [ %7, %271 ]
  %345 = ptrtoint %"struct.std::__1::pair"* %20 to i64
  %346 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %20, i64 1
  %347 = icmp ult %"struct.std::__1::pair"* %346, %344
  br i1 %347, label %348, label %380

348:                                              ; preds = %342, %371
  %349 = phi %"struct.std::__1::pair"* [ %379, %371 ], [ %194, %342 ]
  %350 = phi i32 [ %377, %371 ], [ %343, %342 ]
  %351 = phi %"struct.std::__1::pair"* [ %360, %371 ], [ %346, %342 ]
  %352 = phi %"struct.std::__1::pair"* [ %365, %371 ], [ %344, %342 ]
  %353 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %349, i64 0, i32 0
  %354 = load i32, i32* %353, align 4
  br label %355

355:                                              ; preds = %355, %348
  %356 = phi %"struct.std::__1::pair"* [ %351, %348 ], [ %360, %355 ]
  %357 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %356, i64 0, i32 0
  %358 = load i32, i32* %357, align 4
  %359 = icmp ult i32 %358, %354
  %360 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %356, i64 1
  br i1 %359, label %355, label %361

361:                                              ; preds = %355
  %362 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %356, i64 0, i32 0
  br label %363

363:                                              ; preds = %361, %363
  %364 = phi %"struct.std::__1::pair"* [ %365, %363 ], [ %352, %361 ]
  %365 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %364, i64 -1
  %366 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %365, i64 0, i32 0
  %367 = load i32, i32* %366, align 4
  %368 = icmp ult i32 %367, %354
  br i1 %368, label %369, label %363

369:                                              ; preds = %363
  %370 = icmp ugt %"struct.std::__1::pair"* %356, %365
  br i1 %370, label %380, label %371

371:                                              ; preds = %369
  %372 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %365, i64 0, i32 0
  store i32 %367, i32* %362, align 4
  store i32 %358, i32* %372, align 4
  %373 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %356, i64 0, i32 1
  %374 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %364, i64 -1, i32 1
  %375 = load i32, i32* %373, align 4
  %376 = load i32, i32* %374, align 4
  store i32 %376, i32* %373, align 4
  store i32 %375, i32* %374, align 4
  %377 = add i32 %350, 1
  %378 = icmp eq %"struct.std::__1::pair"* %349, %356
  %379 = select i1 %378, %"struct.std::__1::pair"* %365, %"struct.std::__1::pair"* %349
  br label %348

380:                                              ; preds = %369, %342
  %381 = phi %"struct.std::__1::pair"* [ %194, %342 ], [ %349, %369 ]
  %382 = phi i32 [ %343, %342 ], [ %350, %369 ]
  %383 = phi %"struct.std::__1::pair"* [ %346, %342 ], [ %356, %369 ]
  %384 = icmp eq %"struct.std::__1::pair"* %383, %381
  br i1 %384, label %397, label %385

385:                                              ; preds = %380
  %386 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %381, i64 0, i32 0
  %387 = load i32, i32* %386, align 4
  %388 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %383, i64 0, i32 0
  %389 = load i32, i32* %388, align 4
  %390 = icmp ult i32 %387, %389
  br i1 %390, label %391, label %397

391:                                              ; preds = %385
  store i32 %387, i32* %388, align 4
  store i32 %389, i32* %386, align 4
  %392 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %383, i64 0, i32 1
  %393 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %381, i64 0, i32 1
  %394 = load i32, i32* %392, align 4
  %395 = load i32, i32* %393, align 4
  store i32 %395, i32* %392, align 4
  store i32 %394, i32* %393, align 4
  %396 = add i32 %382, 1
  br label %397

397:                                              ; preds = %380, %391, %385
  %398 = phi i32 [ %396, %391 ], [ %382, %385 ], [ %382, %380 ]
  %399 = icmp eq i32 %398, 0
  br i1 %399, label %400, label %407

400:                                              ; preds = %397
  %401 = tail call fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZN12_GLOBAL__N_111CFX_PaletteC1ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEEE3$_0PNS_4pairIjjEEEEbT0_SE_T_"(%"struct.std::__1::pair"* %20, %"struct.std::__1::pair"* %383)
  %402 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %383, i64 1
  %403 = tail call fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZN12_GLOBAL__N_111CFX_PaletteC1ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEEE3$_0PNS_4pairIjjEEEEbT0_SE_T_"(%"struct.std::__1::pair"* %402, %"struct.std::__1::pair"* %4)
  br i1 %403, label %404, label %406

404:                                              ; preds = %400
  br i1 %401, label %418, label %405

405:                                              ; preds = %404, %416
  br label %3

406:                                              ; preds = %400
  br i1 %401, label %414, label %407

407:                                              ; preds = %406, %397
  %408 = ptrtoint %"struct.std::__1::pair"* %383 to i64
  %409 = sub i64 %408, %345
  %410 = sub i64 %16, %408
  %411 = icmp slt i64 %409, %410
  br i1 %411, label %412, label %416

412:                                              ; preds = %407
  tail call fastcc void @"_ZNSt3__16__sortIRZN12_GLOBAL__N_111CFX_PaletteC1ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEEE3$_0PNS_4pairIjjEEEEvT0_SE_T_"(%"struct.std::__1::pair"* %20, %"struct.std::__1::pair"* %383)
  %413 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %383, i64 1
  br label %414

414:                                              ; preds = %412, %406
  %415 = phi %"struct.std::__1::pair"* [ %402, %406 ], [ %413, %412 ]
  br label %17

416:                                              ; preds = %407
  %417 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %383, i64 1
  tail call fastcc void @"_ZNSt3__16__sortIRZN12_GLOBAL__N_111CFX_PaletteC1ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEEE3$_0PNS_4pairIjjEEEEvT0_SE_T_"(%"struct.std::__1::pair"* %417, %"struct.std::__1::pair"* %4)
  br label %405

418:                                              ; preds = %404, %302, %19, %19, %286, %299, %186, %151, %111, %105, %98, %89, %79, %70, %63, %58, %53, %45, %44, %24, %30, %74
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc i32 @"_ZNSt3__17__sort4IRZN12_GLOBAL__N_111CFX_PaletteC1ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEEE3$_0PNS_4pairIjjEEEEjT0_SE_SE_SE_T_"(%"struct.std::__1::pair"* nocapture, %"struct.std::__1::pair"* nocapture, %"struct.std::__1::pair"* nocapture, %"struct.std::__1::pair"* nocapture) unnamed_addr #7 {
  %5 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp ult i32 %6, %8
  %10 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %2, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp ult i32 %11, %6
  br i1 %9, label %26, label %13

13:                                               ; preds = %4
  br i1 %12, label %14, label %44

14:                                               ; preds = %13
  store i32 %11, i32* %5, align 4
  store i32 %6, i32* %10, align 4
  %15 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 0, i32 1
  %16 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %2, i64 0, i32 1
  %17 = load i32, i32* %15, align 4
  %18 = load i32, i32* %16, align 4
  store i32 %18, i32* %15, align 4
  store i32 %17, i32* %16, align 4
  %19 = load i32, i32* %5, align 4
  %20 = load i32, i32* %7, align 4
  %21 = icmp ult i32 %19, %20
  br i1 %21, label %22, label %44

22:                                               ; preds = %14
  store i32 %19, i32* %7, align 4
  store i32 %20, i32* %5, align 4
  %23 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = load i32, i32* %15, align 4
  store i32 %25, i32* %23, align 4
  store i32 %24, i32* %15, align 4
  br label %44

26:                                               ; preds = %4
  br i1 %12, label %27, label %32

27:                                               ; preds = %26
  store i32 %11, i32* %7, align 4
  store i32 %8, i32* %10, align 4
  %28 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  %29 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %2, i64 0, i32 1
  %30 = load i32, i32* %28, align 4
  %31 = load i32, i32* %29, align 4
  store i32 %31, i32* %28, align 4
  store i32 %30, i32* %29, align 4
  br label %44

32:                                               ; preds = %26
  store i32 %6, i32* %7, align 4
  store i32 %8, i32* %5, align 4
  %33 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  %34 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 0, i32 1
  %35 = load i32, i32* %33, align 4
  %36 = load i32, i32* %34, align 4
  store i32 %36, i32* %33, align 4
  store i32 %35, i32* %34, align 4
  %37 = load i32, i32* %10, align 4
  %38 = load i32, i32* %5, align 4
  %39 = icmp ult i32 %37, %38
  br i1 %39, label %40, label %44

40:                                               ; preds = %32
  store i32 %37, i32* %5, align 4
  store i32 %38, i32* %10, align 4
  %41 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %2, i64 0, i32 1
  %42 = load i32, i32* %34, align 4
  %43 = load i32, i32* %41, align 4
  store i32 %43, i32* %34, align 4
  store i32 %42, i32* %41, align 4
  br label %44

44:                                               ; preds = %13, %14, %22, %27, %32, %40
  %45 = phi i32 [ 1, %27 ], [ 0, %13 ], [ 2, %22 ], [ 1, %14 ], [ 2, %40 ], [ 1, %32 ]
  %46 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %3, i64 0, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = load i32, i32* %10, align 4
  %49 = icmp ult i32 %47, %48
  br i1 %49, label %50, label %72

50:                                               ; preds = %44
  store i32 %47, i32* %10, align 4
  store i32 %48, i32* %46, align 4
  %51 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %2, i64 0, i32 1
  %52 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %3, i64 0, i32 1
  %53 = load i32, i32* %51, align 4
  %54 = load i32, i32* %52, align 4
  store i32 %54, i32* %51, align 4
  store i32 %53, i32* %52, align 4
  %55 = add nuw nsw i32 %45, 1
  %56 = load i32, i32* %10, align 4
  %57 = load i32, i32* %5, align 4
  %58 = icmp ult i32 %56, %57
  br i1 %58, label %59, label %72

59:                                               ; preds = %50
  store i32 %56, i32* %5, align 4
  store i32 %57, i32* %10, align 4
  %60 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = load i32, i32* %51, align 4
  store i32 %62, i32* %60, align 4
  store i32 %61, i32* %51, align 4
  %63 = add nuw nsw i32 %45, 2
  %64 = load i32, i32* %5, align 4
  %65 = load i32, i32* %7, align 4
  %66 = icmp ult i32 %64, %65
  br i1 %66, label %67, label %72

67:                                               ; preds = %59
  store i32 %64, i32* %7, align 4
  store i32 %65, i32* %5, align 4
  %68 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  %69 = load i32, i32* %68, align 4
  %70 = load i32, i32* %60, align 4
  store i32 %70, i32* %68, align 4
  store i32 %69, i32* %60, align 4
  %71 = add nuw nsw i32 %45, 3
  br label %72

72:                                               ; preds = %50, %67, %59, %44
  %73 = phi i32 [ %71, %67 ], [ %63, %59 ], [ %55, %50 ], [ %45, %44 ]
  ret i32 %73
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @"_ZNSt3__127__insertion_sort_incompleteIRZN12_GLOBAL__N_111CFX_PaletteC1ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEEE3$_0PNS_4pairIjjEEEEbT0_SE_T_"(%"struct.std::__1::pair"*, %"struct.std::__1::pair"*) unnamed_addr #0 {
  %3 = ptrtoint %"struct.std::__1::pair"* %1 to i64
  %4 = ptrtoint %"struct.std::__1::pair"* %0 to i64
  %5 = sub i64 %3, %4
  %6 = ashr exact i64 %5, 3
  switch i64 %6, label %97 [
    i64 0, label %180
    i64 1, label %180
    i64 2, label %7
    i64 3, label %18
    i64 4, label %57
    i64 5, label %62
  ]

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 -1, i32 0
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0
  %11 = load i32, i32* %10, align 4
  %12 = icmp ult i32 %9, %11
  br i1 %12, label %13, label %180

13:                                               ; preds = %7
  store i32 %9, i32* %10, align 4
  store i32 %11, i32* %8, align 4
  %14 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  %15 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 -1, i32 1
  %16 = load i32, i32* %14, align 4
  %17 = load i32, i32* %15, align 4
  store i32 %17, i32* %14, align 4
  store i32 %16, i32* %15, align 4
  br label %180

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 1, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0
  %22 = load i32, i32* %21, align 4
  %23 = icmp ult i32 %20, %22
  %24 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 -1, i32 0
  %25 = load i32, i32* %24, align 4
  %26 = icmp ult i32 %25, %20
  br i1 %23, label %40, label %27

27:                                               ; preds = %18
  br i1 %26, label %28, label %180

28:                                               ; preds = %27
  store i32 %25, i32* %19, align 4
  store i32 %20, i32* %24, align 4
  %29 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 1, i32 1
  %30 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 -1, i32 1
  %31 = load i32, i32* %29, align 4
  %32 = load i32, i32* %30, align 4
  store i32 %32, i32* %29, align 4
  store i32 %31, i32* %30, align 4
  %33 = load i32, i32* %19, align 4
  %34 = load i32, i32* %21, align 4
  %35 = icmp ult i32 %33, %34
  br i1 %35, label %36, label %180

36:                                               ; preds = %28
  store i32 %33, i32* %21, align 4
  store i32 %34, i32* %19, align 4
  %37 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = load i32, i32* %29, align 4
  store i32 %39, i32* %37, align 4
  store i32 %38, i32* %29, align 4
  br label %180

40:                                               ; preds = %18
  br i1 %26, label %41, label %46

41:                                               ; preds = %40
  store i32 %25, i32* %21, align 4
  store i32 %22, i32* %24, align 4
  %42 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  %43 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 -1, i32 1
  %44 = load i32, i32* %42, align 4
  %45 = load i32, i32* %43, align 4
  store i32 %45, i32* %42, align 4
  store i32 %44, i32* %43, align 4
  br label %180

46:                                               ; preds = %40
  store i32 %20, i32* %21, align 4
  store i32 %22, i32* %19, align 4
  %47 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  %48 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 1, i32 1
  %49 = load i32, i32* %47, align 4
  %50 = load i32, i32* %48, align 4
  store i32 %50, i32* %47, align 4
  store i32 %49, i32* %48, align 4
  %51 = load i32, i32* %24, align 4
  %52 = icmp ult i32 %51, %22
  br i1 %52, label %53, label %180

53:                                               ; preds = %46
  store i32 %51, i32* %19, align 4
  store i32 %22, i32* %24, align 4
  %54 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 -1, i32 1
  %55 = load i32, i32* %48, align 4
  %56 = load i32, i32* %54, align 4
  store i32 %56, i32* %48, align 4
  store i32 %55, i32* %54, align 4
  br label %180

57:                                               ; preds = %2
  %58 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 1
  %59 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 2
  %60 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 -1
  %61 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN12_GLOBAL__N_111CFX_PaletteC1ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEEE3$_0PNS_4pairIjjEEEEjT0_SE_SE_SE_T_"(%"struct.std::__1::pair"* %0, %"struct.std::__1::pair"* %58, %"struct.std::__1::pair"* %59, %"struct.std::__1::pair"* %60)
  br label %180

62:                                               ; preds = %2
  %63 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 1
  %64 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 2
  %65 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 3
  %66 = tail call fastcc i32 @"_ZNSt3__17__sort4IRZN12_GLOBAL__N_111CFX_PaletteC1ERKN5fxcrt9RetainPtrI11CFX_DIBBaseEEE3$_0PNS_4pairIjjEEEEjT0_SE_SE_SE_T_"(%"struct.std::__1::pair"* %0, %"struct.std::__1::pair"* %63, %"struct.std::__1::pair"* %64, %"struct.std::__1::pair"* %65) #13
  %67 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 -1, i32 0
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %65, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  %71 = icmp ult i32 %68, %70
  br i1 %71, label %72, label %180

72:                                               ; preds = %62
  store i32 %68, i32* %69, align 4
  store i32 %70, i32* %67, align 4
  %73 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 3, i32 1
  %74 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %1, i64 -1, i32 1
  %75 = load i32, i32* %73, align 4
  %76 = load i32, i32* %74, align 4
  store i32 %76, i32* %73, align 4
  store i32 %75, i32* %74, align 4
  %77 = load i32, i32* %69, align 4
  %78 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %64, i64 0, i32 0
  %79 = load i32, i32* %78, align 4
  %80 = icmp ult i32 %77, %79
  br i1 %80, label %81, label %180

81:                                               ; preds = %72
  store i32 %77, i32* %78, align 4
  store i32 %79, i32* %69, align 4
  %82 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 2, i32 1
  %83 = load i32, i32* %82, align 4
  %84 = load i32, i32* %73, align 4
  store i32 %84, i32* %82, align 4
  store i32 %83, i32* %73, align 4
  %85 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %63, i64 0, i32 0
  %86 = load i32, i32* %85, align 4
  %87 = icmp ult i32 %77, %86
  br i1 %87, label %88, label %180

88:                                               ; preds = %81
  store i32 %77, i32* %85, align 4
  store i32 %86, i32* %78, align 4
  %89 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 1, i32 1
  %90 = load i32, i32* %89, align 4
  store i32 %84, i32* %89, align 4
  store i32 %90, i32* %82, align 4
  %91 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0
  %92 = load i32, i32* %91, align 4
  %93 = icmp ult i32 %77, %92
  br i1 %93, label %94, label %180

94:                                               ; preds = %88
  store i32 %77, i32* %91, align 4
  store i32 %92, i32* %85, align 4
  %95 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  %96 = load i32, i32* %95, align 4
  store i32 %84, i32* %95, align 4
  store i32 %96, i32* %89, align 4
  br label %180

97:                                               ; preds = %2
  %98 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 2
  %99 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 1, i32 0
  %100 = load i32, i32* %99, align 4
  %101 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 0
  %102 = load i32, i32* %101, align 4
  %103 = icmp ult i32 %100, %102
  %104 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %98, i64 0, i32 0
  %105 = load i32, i32* %104, align 4
  %106 = icmp ult i32 %105, %100
  br i1 %103, label %117, label %107

107:                                              ; preds = %97
  br i1 %106, label %108, label %132

108:                                              ; preds = %107
  store i32 %105, i32* %99, align 4
  store i32 %100, i32* %104, align 4
  %109 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 1, i32 1
  %110 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 2, i32 1
  %111 = load i32, i32* %109, align 4
  %112 = load i32, i32* %110, align 4
  store i32 %112, i32* %109, align 4
  store i32 %111, i32* %110, align 4
  %113 = icmp ult i32 %105, %102
  br i1 %113, label %114, label %132

114:                                              ; preds = %108
  store i32 %105, i32* %101, align 4
  store i32 %102, i32* %99, align 4
  %115 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  %116 = load i32, i32* %115, align 4
  store i32 %112, i32* %115, align 4
  store i32 %116, i32* %109, align 4
  br label %132

117:                                              ; preds = %97
  br i1 %106, label %118, label %123

118:                                              ; preds = %117
  store i32 %105, i32* %101, align 4
  store i32 %102, i32* %104, align 4
  %119 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  %120 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 2, i32 1
  %121 = load i32, i32* %119, align 4
  %122 = load i32, i32* %120, align 4
  store i32 %122, i32* %119, align 4
  store i32 %121, i32* %120, align 4
  br label %132

123:                                              ; preds = %117
  store i32 %100, i32* %101, align 4
  store i32 %102, i32* %99, align 4
  %124 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 0, i32 1
  %125 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 1, i32 1
  %126 = load i32, i32* %124, align 4
  %127 = load i32, i32* %125, align 4
  store i32 %127, i32* %124, align 4
  store i32 %126, i32* %125, align 4
  %128 = icmp ult i32 %105, %102
  br i1 %128, label %129, label %132

129:                                              ; preds = %123
  store i32 %105, i32* %99, align 4
  store i32 %102, i32* %104, align 4
  %130 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 2, i32 1
  %131 = load i32, i32* %130, align 4
  store i32 %131, i32* %125, align 4
  store i32 %126, i32* %130, align 4
  br label %132

132:                                              ; preds = %107, %108, %114, %118, %123, %129
  %133 = phi i32 [ %105, %107 ], [ %100, %108 ], [ %100, %114 ], [ %102, %118 ], [ %105, %123 ], [ %102, %129 ]
  %134 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %0, i64 3
  %135 = icmp eq %"struct.std::__1::pair"* %134, %1
  br i1 %135, label %180, label %136

136:                                              ; preds = %132, %174
  %137 = phi i32 [ %176, %174 ], [ %133, %132 ]
  %138 = phi %"struct.std::__1::pair"* [ %172, %174 ], [ %134, %132 ]
  %139 = phi i32 [ %171, %174 ], [ 0, %132 ]
  %140 = phi %"struct.std::__1::pair"* [ %138, %174 ], [ %98, %132 ]
  %141 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %138, i64 0, i32 0
  %142 = load i32, i32* %141, align 4
  %143 = icmp ult i32 %142, %137
  br i1 %143, label %144, label %170

144:                                              ; preds = %136
  %145 = bitcast %"struct.std::__1::pair"* %138 to i64*
  %146 = load i64, i64* %145, align 4
  %147 = trunc i64 %146 to i32
  %148 = lshr i64 %146, 32
  %149 = trunc i64 %148 to i32
  br label %150

150:                                              ; preds = %159, %144
  %151 = phi i32 [ %137, %144 ], [ %162, %159 ]
  %152 = phi %"struct.std::__1::pair"* [ %138, %144 ], [ %153, %159 ]
  %153 = phi %"struct.std::__1::pair"* [ %140, %144 ], [ %160, %159 ]
  %154 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %152, i64 0, i32 0
  store i32 %151, i32* %154, align 4
  %155 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %153, i64 0, i32 1
  %156 = load i32, i32* %155, align 4
  %157 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %152, i64 0, i32 1
  store i32 %156, i32* %157, align 4
  %158 = icmp eq %"struct.std::__1::pair"* %153, %0
  br i1 %158, label %164, label %159

159:                                              ; preds = %150
  %160 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %153, i64 -1
  %161 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %160, i64 0, i32 0
  %162 = load i32, i32* %161, align 4
  %163 = icmp ugt i32 %162, %147
  br i1 %163, label %150, label %164

164:                                              ; preds = %150, %159
  %165 = phi %"struct.std::__1::pair"* [ %0, %150 ], [ %153, %159 ]
  %166 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %165, i64 0, i32 0
  %167 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %165, i64 0, i32 1
  store i32 %147, i32* %166, align 4
  store i32 %149, i32* %167, align 4
  %168 = add i32 %139, 1
  %169 = icmp eq i32 %168, 8
  br i1 %169, label %177, label %170

170:                                              ; preds = %164, %136
  %171 = phi i32 [ %168, %164 ], [ %139, %136 ]
  %172 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %138, i64 1
  %173 = icmp eq %"struct.std::__1::pair"* %172, %1
  br i1 %173, label %180, label %174

174:                                              ; preds = %170
  %175 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %138, i64 0, i32 0
  %176 = load i32, i32* %175, align 4
  br label %136

177:                                              ; preds = %164
  %178 = getelementptr inbounds %"struct.std::__1::pair", %"struct.std::__1::pair"* %138, i64 1
  %179 = icmp eq %"struct.std::__1::pair"* %178, %1
  br label %180

180:                                              ; preds = %170, %177, %132, %94, %88, %81, %72, %62, %53, %46, %41, %36, %28, %27, %7, %13, %2, %2, %57
  %181 = phi i1 [ true, %57 ], [ true, %2 ], [ true, %2 ], [ true, %13 ], [ true, %7 ], [ true, %27 ], [ true, %28 ], [ true, %36 ], [ true, %41 ], [ true, %46 ], [ true, %53 ], [ true, %62 ], [ true, %72 ], [ true, %81 ], [ true, %88 ], [ true, %94 ], [ true, %132 ], [ %179, %177 ], [ true, %170 ]
  ret i1 %181
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_125ConvertBuffer_1bppPlt2RgbE12FXDIB_FormatPhiiiRKN5fxcrt9RetainPtrI11CFX_DIBBaseEEii(i16 zeroext, i8* nocapture, i32, i32, i32, %"class.fxcrt::RetainPtr.9"* nocapture readonly dereferenceable(8), i32, i32) unnamed_addr #0 {
  %9 = alloca [2 x i32], align 4
  %10 = lshr i16 %0, 3
  %11 = and i16 %10, 31
  %12 = getelementptr inbounds %"class.fxcrt::RetainPtr.9", %"class.fxcrt::RetainPtr.9"* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %13 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %12, align 8
  %14 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %13, i64 0, i32 6
  %15 = bitcast %"class.std::__1::vector"* %14 to i64*
  %16 = load i64, i64* %15, align 8, !noalias !65
  %17 = getelementptr inbounds %class.CFX_DIBBase, %class.CFX_DIBBase* %13, i64 0, i32 6, i32 0, i32 1
  %18 = bitcast i32** %17 to i64*
  %19 = load i64, i64* %18, align 8, !noalias !65
  %20 = sub i64 %19, %16
  %21 = bitcast [2 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #13
  %22 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 0
  store i32 -1431655766, i32* %22, align 4
  %23 = getelementptr inbounds [2 x i32], [2 x i32]* %9, i64 0, i64 1
  store i32 -1431655766, i32* %23, align 4
  %24 = icmp eq i64 %20, 0
  br i1 %24, label %25, label %26, !prof !8

25:                                               ; preds = %8
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !9
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !10
  unreachable

26:                                               ; preds = %8
  %27 = ashr exact i64 %20, 2
  %28 = inttoptr i64 %16 to i32*
  %29 = load i32, i32* %28, align 4
  %30 = trunc i32 %29 to i8
  store i8 %30, i8* %21, align 4
  %31 = load i32, i32* %28, align 4
  %32 = lshr i32 %31, 8
  %33 = trunc i32 %32 to i8
  %34 = getelementptr inbounds i8, i8* %21, i64 1
  store i8 %33, i8* %34, align 1
  %35 = load i32, i32* %28, align 4
  %36 = lshr i32 %35, 16
  %37 = trunc i32 %36 to i8
  %38 = getelementptr inbounds i8, i8* %21, i64 2
  store i8 %37, i8* %38, align 2
  %39 = icmp ugt i64 %27, 1
  br i1 %39, label %41, label %40, !prof !19

40:                                               ; preds = %26
  tail call void asm sideeffect "int3", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !9
  tail call void asm sideeffect "ud2", "~{dirflag},~{fpsr},~{flags}"() #13, !srcloc !10
  unreachable

41:                                               ; preds = %26
  %42 = getelementptr inbounds i32, i32* %28, i64 1
  %43 = load i32, i32* %42, align 4
  %44 = trunc i32 %43 to i8
  %45 = getelementptr inbounds i8, i8* %21, i64 3
  store i8 %44, i8* %45, align 1
  %46 = lshr i32 %43, 8
  %47 = trunc i32 %46 to i8
  %48 = bitcast i32* %23 to i8*
  store i8 %47, i8* %48, align 4
  %49 = load i32, i32* %42, align 4
  %50 = lshr i32 %49, 16
  %51 = trunc i32 %50 to i8
  %52 = getelementptr inbounds i8, i8* %21, i64 5
  store i8 %51, i8* %52, align 1
  %53 = icmp sgt i32 %4, 0
  br i1 %53, label %54, label %60

54:                                               ; preds = %41
  %55 = add nsw i32 %6, %3
  %56 = icmp sgt i32 %3, 0
  %57 = zext i16 %11 to i64
  %58 = sext i32 %2 to i64
  %59 = zext i32 %4 to i64
  br label %61

60:                                               ; preds = %74, %41
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #13
  ret void

61:                                               ; preds = %77, %54
  %62 = phi %class.CFX_DIBBase* [ %13, %54 ], [ %78, %77 ]
  %63 = phi i64 [ 0, %54 ], [ %75, %77 ]
  %64 = bitcast %class.CFX_DIBBase* %62 to i8* (%class.CFX_DIBBase*, i32)***
  %65 = load i8* (%class.CFX_DIBBase*, i32)**, i8* (%class.CFX_DIBBase*, i32)*** %64, align 8
  %66 = getelementptr inbounds i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %65, i64 3
  %67 = load i8* (%class.CFX_DIBBase*, i32)*, i8* (%class.CFX_DIBBase*, i32)** %66, align 8
  %68 = trunc i64 %63 to i32
  %69 = add i32 %68, %7
  %70 = tail call i8* %67(%class.CFX_DIBBase* %62, i32 %69) #13
  br i1 %56, label %71, label %74

71:                                               ; preds = %61
  %72 = mul nsw i64 %63, %58
  %73 = getelementptr inbounds i8, i8* %1, i64 %72
  br label %79

74:                                               ; preds = %79, %61
  %75 = add nuw nsw i64 %63, 1
  %76 = icmp eq i64 %75, %59
  br i1 %76, label %60, label %77

77:                                               ; preds = %74
  %78 = load %class.CFX_DIBBase*, %class.CFX_DIBBase** %12, align 8
  br label %61

79:                                               ; preds = %71, %79
  %80 = phi i32 [ %95, %79 ], [ %6, %71 ]
  %81 = phi i8* [ %94, %79 ], [ %73, %71 ]
  %82 = sdiv i32 %80, 8
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i8, i8* %70, i64 %83
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = srem i32 %80, 8
  %88 = sub nsw i32 7, %87
  %89 = shl i32 1, %88
  %90 = and i32 %89, %86
  %91 = icmp eq i32 %90, 0
  %92 = select i1 %91, i64 0, i64 3
  %93 = getelementptr inbounds i8, i8* %21, i64 %92
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %81, i8* align 1 %93, i64 3, i1 false)
  %94 = getelementptr inbounds i8, i8* %81, i64 %57
  %95 = add nsw i32 %80, 1
  %96 = icmp slt i32 %95, %55
  br i1 %96, label %79, label %74
}

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #5

declare void @_ZN12CFX_DIBitmapC1Ev(%class.CFX_DIBitmap*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIj16FxAllocAllocatorIjEE6assignIPKjEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIjNS_15iterator_traitsIS8_E9referenceEEE5valueEvE4typeES8_S8_(%"class.std::__1::vector"*, i32*, i32*) local_unnamed_addr #0 comdat align 2 {
  %4 = bitcast i32* %1 to i8*
  %5 = ptrtoint i32* %1 to i64
  %6 = ptrtoint i32* %2 to i64
  %7 = sub i64 %6, %5
  %8 = ashr exact i64 %7, 2
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.std::__1::vector"* %0 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = sub i64 %11, %13
  %15 = ashr exact i64 %14, 2
  %16 = icmp ugt i64 %8, %15
  %17 = inttoptr i64 %13 to i32*
  br i1 %16, label %203, label %18

18:                                               ; preds = %3
  %19 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %20 = bitcast i32** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %21, %13
  %23 = ashr exact i64 %22, 2
  %24 = icmp ugt i64 %8, %23
  %25 = getelementptr inbounds i32, i32* %1, i64 %23
  %26 = select i1 %24, i32* %25, i32* %2
  %27 = ptrtoint i32* %26 to i64
  %28 = sub i64 %27, %5
  %29 = ashr exact i64 %28, 2
  %30 = icmp eq i64 %28, 0
  br i1 %30, label %33, label %31

31:                                               ; preds = %18
  %32 = inttoptr i64 %13 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %32, i8* align 4 %4, i64 %28, i1 false) #13
  br label %33

33:                                               ; preds = %18, %31
  br i1 %24, label %34, label %201

34:                                               ; preds = %33
  %35 = load i64, i64* %20, align 8
  %36 = icmp eq i32* %26, %2
  br i1 %36, label %199, label %37

37:                                               ; preds = %34
  %38 = inttoptr i64 %35 to i32*
  %39 = xor i64 %23, -1
  %40 = getelementptr i32, i32* %2, i64 %39
  %41 = ptrtoint i32* %40 to i64
  %42 = sub i64 %41, %5
  %43 = lshr i64 %42, 2
  %44 = add nuw nsw i64 %43, 1
  %45 = icmp ult i64 %44, 8
  br i1 %45, label %143, label %46

46:                                               ; preds = %37
  %47 = inttoptr i64 %35 to i8*
  %48 = xor i64 %23, -1
  %49 = getelementptr i32, i32* %2, i64 %48
  %50 = ptrtoint i32* %49 to i64
  %51 = sub i64 %50, %5
  %52 = lshr i64 %51, 2
  %53 = add nuw nsw i64 %52, 1
  %54 = getelementptr i32, i32* %38, i64 %53
  %55 = add nsw i64 %23, %52
  %56 = add i64 %55, 1
  %57 = getelementptr i32, i32* %1, i64 %56
  %58 = bitcast i32* %57 to i8*
  %59 = icmp ult i8* %47, %58
  %60 = icmp ult i32* %25, %54
  %61 = and i1 %59, %60
  br i1 %61, label %143, label %62

62:                                               ; preds = %46
  %63 = and i64 %44, 9223372036854775800
  %64 = getelementptr i32, i32* %38, i64 %63
  %65 = getelementptr i32, i32* %25, i64 %63
  %66 = add nsw i64 %63, -8
  %67 = lshr exact i64 %66, 3
  %68 = add nuw nsw i64 %67, 1
  %69 = and i64 %68, 3
  %70 = icmp ult i64 %66, 24
  br i1 %70, label %122, label %71

71:                                               ; preds = %62
  %72 = sub nsw i64 %68, %69
  br label %73

73:                                               ; preds = %73, %71
  %74 = phi i64 [ 0, %71 ], [ %119, %73 ]
  %75 = phi i64 [ %72, %71 ], [ %120, %73 ]
  %76 = getelementptr i32, i32* %38, i64 %74
  %77 = getelementptr i32, i32* %25, i64 %74
  %78 = bitcast i32* %77 to <4 x i32>*
  %79 = load <4 x i32>, <4 x i32>* %78, align 4, !alias.scope !68
  %80 = getelementptr i32, i32* %77, i64 4
  %81 = bitcast i32* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 4, !alias.scope !68
  %83 = bitcast i32* %76 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %83, align 4, !alias.scope !71, !noalias !68
  %84 = getelementptr i32, i32* %76, i64 4
  %85 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> %82, <4 x i32>* %85, align 4, !alias.scope !71, !noalias !68
  %86 = or i64 %74, 8
  %87 = getelementptr i32, i32* %38, i64 %86
  %88 = getelementptr i32, i32* %25, i64 %86
  %89 = bitcast i32* %88 to <4 x i32>*
  %90 = load <4 x i32>, <4 x i32>* %89, align 4, !alias.scope !68
  %91 = getelementptr i32, i32* %88, i64 4
  %92 = bitcast i32* %91 to <4 x i32>*
  %93 = load <4 x i32>, <4 x i32>* %92, align 4, !alias.scope !68
  %94 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %90, <4 x i32>* %94, align 4, !alias.scope !71, !noalias !68
  %95 = getelementptr i32, i32* %87, i64 4
  %96 = bitcast i32* %95 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %96, align 4, !alias.scope !71, !noalias !68
  %97 = or i64 %74, 16
  %98 = getelementptr i32, i32* %38, i64 %97
  %99 = getelementptr i32, i32* %25, i64 %97
  %100 = bitcast i32* %99 to <4 x i32>*
  %101 = load <4 x i32>, <4 x i32>* %100, align 4, !alias.scope !68
  %102 = getelementptr i32, i32* %99, i64 4
  %103 = bitcast i32* %102 to <4 x i32>*
  %104 = load <4 x i32>, <4 x i32>* %103, align 4, !alias.scope !68
  %105 = bitcast i32* %98 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %105, align 4, !alias.scope !71, !noalias !68
  %106 = getelementptr i32, i32* %98, i64 4
  %107 = bitcast i32* %106 to <4 x i32>*
  store <4 x i32> %104, <4 x i32>* %107, align 4, !alias.scope !71, !noalias !68
  %108 = or i64 %74, 24
  %109 = getelementptr i32, i32* %38, i64 %108
  %110 = getelementptr i32, i32* %25, i64 %108
  %111 = bitcast i32* %110 to <4 x i32>*
  %112 = load <4 x i32>, <4 x i32>* %111, align 4, !alias.scope !68
  %113 = getelementptr i32, i32* %110, i64 4
  %114 = bitcast i32* %113 to <4 x i32>*
  %115 = load <4 x i32>, <4 x i32>* %114, align 4, !alias.scope !68
  %116 = bitcast i32* %109 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %116, align 4, !alias.scope !71, !noalias !68
  %117 = getelementptr i32, i32* %109, i64 4
  %118 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %115, <4 x i32>* %118, align 4, !alias.scope !71, !noalias !68
  %119 = add i64 %74, 32
  %120 = add i64 %75, -4
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %73, !llvm.loop !73

122:                                              ; preds = %73, %62
  %123 = phi i64 [ 0, %62 ], [ %119, %73 ]
  %124 = icmp eq i64 %69, 0
  br i1 %124, label %141, label %125

125:                                              ; preds = %122, %125
  %126 = phi i64 [ %138, %125 ], [ %123, %122 ]
  %127 = phi i64 [ %139, %125 ], [ %69, %122 ]
  %128 = getelementptr i32, i32* %38, i64 %126
  %129 = getelementptr i32, i32* %25, i64 %126
  %130 = bitcast i32* %129 to <4 x i32>*
  %131 = load <4 x i32>, <4 x i32>* %130, align 4, !alias.scope !68
  %132 = getelementptr i32, i32* %129, i64 4
  %133 = bitcast i32* %132 to <4 x i32>*
  %134 = load <4 x i32>, <4 x i32>* %133, align 4, !alias.scope !68
  %135 = bitcast i32* %128 to <4 x i32>*
  store <4 x i32> %131, <4 x i32>* %135, align 4, !alias.scope !71, !noalias !68
  %136 = getelementptr i32, i32* %128, i64 4
  %137 = bitcast i32* %136 to <4 x i32>*
  store <4 x i32> %134, <4 x i32>* %137, align 4, !alias.scope !71, !noalias !68
  %138 = add i64 %126, 8
  %139 = add i64 %127, -1
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %125, !llvm.loop !74

141:                                              ; preds = %125, %122
  %142 = icmp eq i64 %44, %63
  br i1 %142, label %196, label %143

143:                                              ; preds = %141, %46, %37
  %144 = phi i32* [ %38, %46 ], [ %38, %37 ], [ %64, %141 ]
  %145 = phi i32* [ %25, %46 ], [ %25, %37 ], [ %65, %141 ]
  %146 = ptrtoint i32* %145 to i64
  %147 = getelementptr i32, i32* %2, i64 -1
  %148 = ptrtoint i32* %147 to i64
  %149 = sub i64 %148, %146
  %150 = lshr i64 %149, 2
  %151 = add nuw nsw i64 %150, 1
  %152 = and i64 %151, 7
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %163, label %154

154:                                              ; preds = %143, %154
  %155 = phi i32* [ %160, %154 ], [ %144, %143 ]
  %156 = phi i32* [ %159, %154 ], [ %145, %143 ]
  %157 = phi i64 [ %161, %154 ], [ %152, %143 ]
  %158 = load i32, i32* %156, align 4
  store i32 %158, i32* %155, align 4
  %159 = getelementptr inbounds i32, i32* %156, i64 1
  %160 = getelementptr inbounds i32, i32* %155, i64 1
  %161 = add i64 %157, -1
  %162 = icmp eq i64 %161, 0
  br i1 %162, label %163, label %154, !llvm.loop !75

163:                                              ; preds = %154, %143
  %164 = phi i32* [ undef, %143 ], [ %160, %154 ]
  %165 = phi i32* [ %144, %143 ], [ %160, %154 ]
  %166 = phi i32* [ %145, %143 ], [ %159, %154 ]
  %167 = icmp ult i64 %149, 28
  br i1 %167, label %196, label %168

168:                                              ; preds = %163, %168
  %169 = phi i32* [ %194, %168 ], [ %165, %163 ]
  %170 = phi i32* [ %193, %168 ], [ %166, %163 ]
  %171 = load i32, i32* %170, align 4
  store i32 %171, i32* %169, align 4
  %172 = getelementptr inbounds i32, i32* %170, i64 1
  %173 = getelementptr inbounds i32, i32* %169, i64 1
  %174 = load i32, i32* %172, align 4
  store i32 %174, i32* %173, align 4
  %175 = getelementptr inbounds i32, i32* %170, i64 2
  %176 = getelementptr inbounds i32, i32* %169, i64 2
  %177 = load i32, i32* %175, align 4
  store i32 %177, i32* %176, align 4
  %178 = getelementptr inbounds i32, i32* %170, i64 3
  %179 = getelementptr inbounds i32, i32* %169, i64 3
  %180 = load i32, i32* %178, align 4
  store i32 %180, i32* %179, align 4
  %181 = getelementptr inbounds i32, i32* %170, i64 4
  %182 = getelementptr inbounds i32, i32* %169, i64 4
  %183 = load i32, i32* %181, align 4
  store i32 %183, i32* %182, align 4
  %184 = getelementptr inbounds i32, i32* %170, i64 5
  %185 = getelementptr inbounds i32, i32* %169, i64 5
  %186 = load i32, i32* %184, align 4
  store i32 %186, i32* %185, align 4
  %187 = getelementptr inbounds i32, i32* %170, i64 6
  %188 = getelementptr inbounds i32, i32* %169, i64 6
  %189 = load i32, i32* %187, align 4
  store i32 %189, i32* %188, align 4
  %190 = getelementptr inbounds i32, i32* %170, i64 7
  %191 = getelementptr inbounds i32, i32* %169, i64 7
  %192 = load i32, i32* %190, align 4
  store i32 %192, i32* %191, align 4
  %193 = getelementptr inbounds i32, i32* %170, i64 8
  %194 = getelementptr inbounds i32, i32* %169, i64 8
  %195 = icmp eq i32* %193, %2
  br i1 %195, label %196, label %168, !llvm.loop !76

196:                                              ; preds = %163, %168, %141
  %197 = phi i32* [ %64, %141 ], [ %164, %163 ], [ %194, %168 ]
  %198 = ptrtoint i32* %197 to i64
  br label %199

199:                                              ; preds = %34, %196
  %200 = phi i64 [ %35, %34 ], [ %198, %196 ]
  store i64 %200, i64* %20, align 8
  br label %396

201:                                              ; preds = %33
  %202 = getelementptr inbounds i32, i32* %17, i64 %29
  store i32* %202, i32** %19, align 8
  br label %396

203:                                              ; preds = %3
  %204 = icmp eq i64 %13, 0
  br i1 %204, label %210, label %205

205:                                              ; preds = %203
  %206 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %207 = bitcast i32** %206 to i64*
  store i64 %13, i64* %207, align 8
  %208 = inttoptr i64 %13 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %208) #13
  %209 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %209, i8 0, i64 24, i1 false) #13
  br label %210

210:                                              ; preds = %203, %205
  %211 = phi i64 [ %11, %203 ], [ 0, %205 ]
  %212 = icmp ugt i64 %8, 4611686018427387903
  br i1 %212, label %213, label %215

213:                                              ; preds = %210
  %214 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %214) #14
  unreachable

215:                                              ; preds = %210
  %216 = ashr exact i64 %211, 2
  %217 = icmp ult i64 %216, 2305843009213693951
  br i1 %217, label %218, label %225

218:                                              ; preds = %215
  %219 = ashr exact i64 %211, 1
  %220 = icmp ult i64 %219, %8
  br i1 %220, label %225, label %221

221:                                              ; preds = %218
  %222 = icmp ugt i64 %219, 4611686018427387903
  br i1 %222, label %223, label %225

223:                                              ; preds = %221
  %224 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %224) #14
  unreachable

225:                                              ; preds = %218, %215, %221
  %226 = phi i64 [ %219, %221 ], [ 4611686018427387903, %215 ], [ %8, %218 ]
  %227 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %226, i64 4) #13
  %228 = bitcast i8* %227 to i32*
  %229 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %230 = bitcast i32** %229 to i8**
  store i8* %227, i8** %230, align 8
  %231 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %227, i8** %231, align 8
  %232 = getelementptr inbounds i32, i32* %228, i64 %226
  store i32* %232, i32** %9, align 8
  %233 = bitcast i32** %229 to i64*
  %234 = ptrtoint i8* %227 to i64
  %235 = icmp eq i32* %1, %2
  br i1 %235, label %394, label %236

236:                                              ; preds = %225
  %237 = getelementptr i32, i32* %2, i64 -1
  %238 = ptrtoint i32* %237 to i64
  %239 = sub i64 %238, %5
  %240 = lshr i64 %239, 2
  %241 = add nuw nsw i64 %240, 1
  %242 = icmp ult i64 %241, 8
  br i1 %242, label %338, label %243

243:                                              ; preds = %236
  %244 = getelementptr i32, i32* %2, i64 -1
  %245 = ptrtoint i32* %244 to i64
  %246 = sub i64 %245, %5
  %247 = lshr i64 %246, 2
  %248 = add i64 %246, 4
  %249 = and i64 %248, -4
  %250 = getelementptr i8, i8* %227, i64 %249
  %251 = add nuw nsw i64 %247, 1
  %252 = getelementptr i32, i32* %1, i64 %251
  %253 = bitcast i32* %252 to i8*
  %254 = icmp ult i8* %227, %253
  %255 = icmp ugt i8* %250, %4
  %256 = and i1 %254, %255
  br i1 %256, label %338, label %257

257:                                              ; preds = %243
  %258 = and i64 %241, 9223372036854775800
  %259 = getelementptr i32, i32* %228, i64 %258
  %260 = getelementptr i32, i32* %1, i64 %258
  %261 = add nsw i64 %258, -8
  %262 = lshr exact i64 %261, 3
  %263 = add nuw nsw i64 %262, 1
  %264 = and i64 %263, 3
  %265 = icmp ult i64 %261, 24
  br i1 %265, label %317, label %266

266:                                              ; preds = %257
  %267 = sub nsw i64 %263, %264
  br label %268

268:                                              ; preds = %268, %266
  %269 = phi i64 [ 0, %266 ], [ %314, %268 ]
  %270 = phi i64 [ %267, %266 ], [ %315, %268 ]
  %271 = getelementptr i32, i32* %228, i64 %269
  %272 = getelementptr i32, i32* %1, i64 %269
  %273 = bitcast i32* %272 to <4 x i32>*
  %274 = load <4 x i32>, <4 x i32>* %273, align 4, !alias.scope !77
  %275 = getelementptr i32, i32* %272, i64 4
  %276 = bitcast i32* %275 to <4 x i32>*
  %277 = load <4 x i32>, <4 x i32>* %276, align 4, !alias.scope !77
  %278 = bitcast i32* %271 to <4 x i32>*
  store <4 x i32> %274, <4 x i32>* %278, align 4, !alias.scope !80, !noalias !77
  %279 = getelementptr i32, i32* %271, i64 4
  %280 = bitcast i32* %279 to <4 x i32>*
  store <4 x i32> %277, <4 x i32>* %280, align 4, !alias.scope !80, !noalias !77
  %281 = or i64 %269, 8
  %282 = getelementptr i32, i32* %228, i64 %281
  %283 = getelementptr i32, i32* %1, i64 %281
  %284 = bitcast i32* %283 to <4 x i32>*
  %285 = load <4 x i32>, <4 x i32>* %284, align 4, !alias.scope !77
  %286 = getelementptr i32, i32* %283, i64 4
  %287 = bitcast i32* %286 to <4 x i32>*
  %288 = load <4 x i32>, <4 x i32>* %287, align 4, !alias.scope !77
  %289 = bitcast i32* %282 to <4 x i32>*
  store <4 x i32> %285, <4 x i32>* %289, align 4, !alias.scope !80, !noalias !77
  %290 = getelementptr i32, i32* %282, i64 4
  %291 = bitcast i32* %290 to <4 x i32>*
  store <4 x i32> %288, <4 x i32>* %291, align 4, !alias.scope !80, !noalias !77
  %292 = or i64 %269, 16
  %293 = getelementptr i32, i32* %228, i64 %292
  %294 = getelementptr i32, i32* %1, i64 %292
  %295 = bitcast i32* %294 to <4 x i32>*
  %296 = load <4 x i32>, <4 x i32>* %295, align 4, !alias.scope !77
  %297 = getelementptr i32, i32* %294, i64 4
  %298 = bitcast i32* %297 to <4 x i32>*
  %299 = load <4 x i32>, <4 x i32>* %298, align 4, !alias.scope !77
  %300 = bitcast i32* %293 to <4 x i32>*
  store <4 x i32> %296, <4 x i32>* %300, align 4, !alias.scope !80, !noalias !77
  %301 = getelementptr i32, i32* %293, i64 4
  %302 = bitcast i32* %301 to <4 x i32>*
  store <4 x i32> %299, <4 x i32>* %302, align 4, !alias.scope !80, !noalias !77
  %303 = or i64 %269, 24
  %304 = getelementptr i32, i32* %228, i64 %303
  %305 = getelementptr i32, i32* %1, i64 %303
  %306 = bitcast i32* %305 to <4 x i32>*
  %307 = load <4 x i32>, <4 x i32>* %306, align 4, !alias.scope !77
  %308 = getelementptr i32, i32* %305, i64 4
  %309 = bitcast i32* %308 to <4 x i32>*
  %310 = load <4 x i32>, <4 x i32>* %309, align 4, !alias.scope !77
  %311 = bitcast i32* %304 to <4 x i32>*
  store <4 x i32> %307, <4 x i32>* %311, align 4, !alias.scope !80, !noalias !77
  %312 = getelementptr i32, i32* %304, i64 4
  %313 = bitcast i32* %312 to <4 x i32>*
  store <4 x i32> %310, <4 x i32>* %313, align 4, !alias.scope !80, !noalias !77
  %314 = add i64 %269, 32
  %315 = add i64 %270, -4
  %316 = icmp eq i64 %315, 0
  br i1 %316, label %317, label %268, !llvm.loop !82

317:                                              ; preds = %268, %257
  %318 = phi i64 [ 0, %257 ], [ %314, %268 ]
  %319 = icmp eq i64 %264, 0
  br i1 %319, label %336, label %320

320:                                              ; preds = %317, %320
  %321 = phi i64 [ %333, %320 ], [ %318, %317 ]
  %322 = phi i64 [ %334, %320 ], [ %264, %317 ]
  %323 = getelementptr i32, i32* %228, i64 %321
  %324 = getelementptr i32, i32* %1, i64 %321
  %325 = bitcast i32* %324 to <4 x i32>*
  %326 = load <4 x i32>, <4 x i32>* %325, align 4, !alias.scope !77
  %327 = getelementptr i32, i32* %324, i64 4
  %328 = bitcast i32* %327 to <4 x i32>*
  %329 = load <4 x i32>, <4 x i32>* %328, align 4, !alias.scope !77
  %330 = bitcast i32* %323 to <4 x i32>*
  store <4 x i32> %326, <4 x i32>* %330, align 4, !alias.scope !80, !noalias !77
  %331 = getelementptr i32, i32* %323, i64 4
  %332 = bitcast i32* %331 to <4 x i32>*
  store <4 x i32> %329, <4 x i32>* %332, align 4, !alias.scope !80, !noalias !77
  %333 = add i64 %321, 8
  %334 = add i64 %322, -1
  %335 = icmp eq i64 %334, 0
  br i1 %335, label %336, label %320, !llvm.loop !83

336:                                              ; preds = %320, %317
  %337 = icmp eq i64 %241, %258
  br i1 %337, label %391, label %338

338:                                              ; preds = %336, %243, %236
  %339 = phi i32* [ %228, %243 ], [ %228, %236 ], [ %259, %336 ]
  %340 = phi i32* [ %1, %243 ], [ %1, %236 ], [ %260, %336 ]
  %341 = ptrtoint i32* %340 to i64
  %342 = getelementptr i32, i32* %2, i64 -1
  %343 = ptrtoint i32* %342 to i64
  %344 = sub i64 %343, %341
  %345 = lshr i64 %344, 2
  %346 = add nuw nsw i64 %345, 1
  %347 = and i64 %346, 7
  %348 = icmp eq i64 %347, 0
  br i1 %348, label %358, label %349

349:                                              ; preds = %338, %349
  %350 = phi i32* [ %355, %349 ], [ %339, %338 ]
  %351 = phi i32* [ %354, %349 ], [ %340, %338 ]
  %352 = phi i64 [ %356, %349 ], [ %347, %338 ]
  %353 = load i32, i32* %351, align 4
  store i32 %353, i32* %350, align 4
  %354 = getelementptr inbounds i32, i32* %351, i64 1
  %355 = getelementptr inbounds i32, i32* %350, i64 1
  %356 = add i64 %352, -1
  %357 = icmp eq i64 %356, 0
  br i1 %357, label %358, label %349, !llvm.loop !84

358:                                              ; preds = %349, %338
  %359 = phi i32* [ undef, %338 ], [ %355, %349 ]
  %360 = phi i32* [ %339, %338 ], [ %355, %349 ]
  %361 = phi i32* [ %340, %338 ], [ %354, %349 ]
  %362 = icmp ult i64 %344, 28
  br i1 %362, label %391, label %363

363:                                              ; preds = %358, %363
  %364 = phi i32* [ %389, %363 ], [ %360, %358 ]
  %365 = phi i32* [ %388, %363 ], [ %361, %358 ]
  %366 = load i32, i32* %365, align 4
  store i32 %366, i32* %364, align 4
  %367 = getelementptr inbounds i32, i32* %365, i64 1
  %368 = getelementptr inbounds i32, i32* %364, i64 1
  %369 = load i32, i32* %367, align 4
  store i32 %369, i32* %368, align 4
  %370 = getelementptr inbounds i32, i32* %365, i64 2
  %371 = getelementptr inbounds i32, i32* %364, i64 2
  %372 = load i32, i32* %370, align 4
  store i32 %372, i32* %371, align 4
  %373 = getelementptr inbounds i32, i32* %365, i64 3
  %374 = getelementptr inbounds i32, i32* %364, i64 3
  %375 = load i32, i32* %373, align 4
  store i32 %375, i32* %374, align 4
  %376 = getelementptr inbounds i32, i32* %365, i64 4
  %377 = getelementptr inbounds i32, i32* %364, i64 4
  %378 = load i32, i32* %376, align 4
  store i32 %378, i32* %377, align 4
  %379 = getelementptr inbounds i32, i32* %365, i64 5
  %380 = getelementptr inbounds i32, i32* %364, i64 5
  %381 = load i32, i32* %379, align 4
  store i32 %381, i32* %380, align 4
  %382 = getelementptr inbounds i32, i32* %365, i64 6
  %383 = getelementptr inbounds i32, i32* %364, i64 6
  %384 = load i32, i32* %382, align 4
  store i32 %384, i32* %383, align 4
  %385 = getelementptr inbounds i32, i32* %365, i64 7
  %386 = getelementptr inbounds i32, i32* %364, i64 7
  %387 = load i32, i32* %385, align 4
  store i32 %387, i32* %386, align 4
  %388 = getelementptr inbounds i32, i32* %365, i64 8
  %389 = getelementptr inbounds i32, i32* %364, i64 8
  %390 = icmp eq i32* %388, %2
  br i1 %390, label %391, label %363, !llvm.loop !85

391:                                              ; preds = %358, %363, %336
  %392 = phi i32* [ %259, %336 ], [ %359, %358 ], [ %389, %363 ]
  %393 = ptrtoint i32* %392 to i64
  br label %394

394:                                              ; preds = %225, %391
  %395 = phi i64 [ %234, %225 ], [ %393, %391 ]
  store i64 %395, i64* %233, align 8
  br label %396

396:                                              ; preds = %199, %201, %394
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #4

declare i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64, i64) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIj16FxAllocAllocatorIjEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #13
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %227

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #14
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %47

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %51, label %47

47:                                               ; preds = %38, %42
  %48 = phi i64 [ %45, %42 ], [ 4611686018427387903, %38 ]
  %49 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %48, i64 4) #13
  %50 = bitcast i8* %49 to i32*
  br label %51

51:                                               ; preds = %47, %42
  %52 = phi i64 [ %48, %47 ], [ 0, %42 ]
  %53 = phi i32* [ %50, %47 ], [ null, %42 ]
  %54 = getelementptr inbounds i32, i32* %53, i64 %33
  %55 = bitcast i32* %54 to i8*
  %56 = getelementptr inbounds i32, i32* %53, i64 %52
  %57 = getelementptr inbounds i32, i32* %54, i64 %1
  %58 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %55, i8 0, i64 %58, i1 false) #13
  %59 = ptrtoint i32* %56 to i64
  %60 = ptrtoint i32* %57 to i64
  %61 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %62 = load i32*, i32** %61, align 8
  %63 = ptrtoint i32* %62 to i64
  %64 = load i32*, i32** %6, align 8
  %65 = icmp eq i32* %64, %62
  br i1 %65, label %220, label %66

66:                                               ; preds = %51
  %67 = getelementptr i32, i32* %64, i64 -1
  %68 = ptrtoint i32* %67 to i64
  %69 = sub i64 %68, %63
  %70 = lshr i64 %69, 2
  %71 = add nuw nsw i64 %70, 1
  %72 = icmp ult i64 %71, 8
  br i1 %72, label %165, label %73

73:                                               ; preds = %66
  %74 = getelementptr i32, i32* %64, i64 -1
  %75 = ptrtoint i32* %74 to i64
  %76 = sub i64 %75, %63
  %77 = lshr i64 %76, 2
  %78 = xor i64 %77, -1
  %79 = add nsw i64 %33, %78
  %80 = getelementptr i32, i32* %53, i64 %79
  %81 = xor i64 %77, -1
  %82 = getelementptr i32, i32* %64, i64 %81
  %83 = icmp ult i32* %80, %64
  %84 = icmp ult i32* %82, %54
  %85 = and i1 %83, %84
  br i1 %85, label %165, label %86

86:                                               ; preds = %73
  %87 = and i64 %71, 9223372036854775800
  %88 = sub nsw i64 0, %87
  %89 = getelementptr i32, i32* %54, i64 %88
  %90 = sub nsw i64 0, %87
  %91 = getelementptr i32, i32* %64, i64 %90
  %92 = add nsw i64 %87, -8
  %93 = lshr exact i64 %92, 3
  %94 = add nuw nsw i64 %93, 1
  %95 = and i64 %94, 1
  %96 = icmp eq i64 %92, 0
  br i1 %96, label %143, label %97

97:                                               ; preds = %86
  %98 = sub nuw nsw i64 %94, %95
  %99 = getelementptr i32, i32* %54, i64 -1
  %100 = getelementptr i32, i32* %64, i64 -1
  %101 = getelementptr i32, i32* %54, i64 -1
  %102 = getelementptr i32, i32* %64, i64 -1
  br label %103

103:                                              ; preds = %103, %97
  %104 = phi i64 [ 0, %97 ], [ %138, %103 ]
  %105 = phi i64 [ %98, %97 ], [ %139, %103 ]
  %106 = sub i64 0, %104
  %107 = sub i64 0, %104
  %108 = getelementptr inbounds i32, i32* %99, i64 %106
  %109 = getelementptr inbounds i32, i32* %100, i64 %107
  %110 = getelementptr inbounds i32, i32* %109, i64 -3
  %111 = bitcast i32* %110 to <4 x i32>*
  %112 = load <4 x i32>, <4 x i32>* %111, align 4, !alias.scope !86
  %113 = getelementptr inbounds i32, i32* %109, i64 -4
  %114 = getelementptr inbounds i32, i32* %113, i64 -3
  %115 = bitcast i32* %114 to <4 x i32>*
  %116 = load <4 x i32>, <4 x i32>* %115, align 4, !alias.scope !86
  %117 = getelementptr inbounds i32, i32* %108, i64 -3
  %118 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> %112, <4 x i32>* %118, align 4, !alias.scope !89, !noalias !86
  %119 = getelementptr inbounds i32, i32* %108, i64 -4
  %120 = getelementptr inbounds i32, i32* %119, i64 -3
  %121 = bitcast i32* %120 to <4 x i32>*
  store <4 x i32> %116, <4 x i32>* %121, align 4, !alias.scope !89, !noalias !86
  %122 = sub nuw nsw i64 -8, %104
  %123 = sub nuw nsw i64 -8, %104
  %124 = getelementptr inbounds i32, i32* %101, i64 %122
  %125 = getelementptr inbounds i32, i32* %102, i64 %123
  %126 = getelementptr inbounds i32, i32* %125, i64 -3
  %127 = bitcast i32* %126 to <4 x i32>*
  %128 = load <4 x i32>, <4 x i32>* %127, align 4, !alias.scope !86
  %129 = getelementptr inbounds i32, i32* %125, i64 -4
  %130 = getelementptr inbounds i32, i32* %129, i64 -3
  %131 = bitcast i32* %130 to <4 x i32>*
  %132 = load <4 x i32>, <4 x i32>* %131, align 4, !alias.scope !86
  %133 = getelementptr inbounds i32, i32* %124, i64 -3
  %134 = bitcast i32* %133 to <4 x i32>*
  store <4 x i32> %128, <4 x i32>* %134, align 4, !alias.scope !89, !noalias !86
  %135 = getelementptr inbounds i32, i32* %124, i64 -4
  %136 = getelementptr inbounds i32, i32* %135, i64 -3
  %137 = bitcast i32* %136 to <4 x i32>*
  store <4 x i32> %132, <4 x i32>* %137, align 4, !alias.scope !89, !noalias !86
  %138 = add i64 %104, 16
  %139 = add i64 %105, -2
  %140 = icmp eq i64 %139, 0
  br i1 %140, label %141, label %103, !llvm.loop !91

141:                                              ; preds = %103
  %142 = sub nuw nsw i64 -16, %104
  br label %143

143:                                              ; preds = %141, %86
  %144 = phi i64 [ 0, %86 ], [ %142, %141 ]
  %145 = icmp eq i64 %95, 0
  br i1 %145, label %163, label %146

146:                                              ; preds = %143
  %147 = getelementptr i32, i32* %54, i64 -1
  %148 = getelementptr i32, i32* %64, i64 -1
  %149 = getelementptr inbounds i32, i32* %147, i64 %144
  %150 = getelementptr inbounds i32, i32* %148, i64 %144
  %151 = getelementptr inbounds i32, i32* %150, i64 -3
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 4, !alias.scope !86
  %154 = getelementptr inbounds i32, i32* %150, i64 -4
  %155 = getelementptr inbounds i32, i32* %154, i64 -3
  %156 = bitcast i32* %155 to <4 x i32>*
  %157 = load <4 x i32>, <4 x i32>* %156, align 4, !alias.scope !86
  %158 = getelementptr inbounds i32, i32* %149, i64 -3
  %159 = bitcast i32* %158 to <4 x i32>*
  store <4 x i32> %153, <4 x i32>* %159, align 4, !alias.scope !89, !noalias !86
  %160 = getelementptr inbounds i32, i32* %149, i64 -4
  %161 = getelementptr inbounds i32, i32* %160, i64 -3
  %162 = bitcast i32* %161 to <4 x i32>*
  store <4 x i32> %157, <4 x i32>* %162, align 4, !alias.scope !89, !noalias !86
  br label %163

163:                                              ; preds = %143, %146
  %164 = icmp eq i64 %71, %87
  br i1 %164, label %217, label %165

165:                                              ; preds = %163, %73, %66
  %166 = phi i32* [ %54, %73 ], [ %54, %66 ], [ %89, %163 ]
  %167 = phi i32* [ %64, %73 ], [ %64, %66 ], [ %91, %163 ]
  %168 = getelementptr i32, i32* %167, i64 -1
  %169 = ptrtoint i32* %168 to i64
  %170 = sub i64 %169, %63
  %171 = lshr i64 %170, 2
  %172 = add nuw nsw i64 %171, 1
  %173 = and i64 %172, 7
  %174 = icmp eq i64 %173, 0
  br i1 %174, label %184, label %175

175:                                              ; preds = %165, %175
  %176 = phi i32* [ %179, %175 ], [ %166, %165 ]
  %177 = phi i32* [ %180, %175 ], [ %167, %165 ]
  %178 = phi i64 [ %182, %175 ], [ %173, %165 ]
  %179 = getelementptr inbounds i32, i32* %176, i64 -1
  %180 = getelementptr inbounds i32, i32* %177, i64 -1
  %181 = load i32, i32* %180, align 4
  store i32 %181, i32* %179, align 4
  %182 = add i64 %178, -1
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %184, label %175, !llvm.loop !92

184:                                              ; preds = %175, %165
  %185 = phi i32* [ undef, %165 ], [ %179, %175 ]
  %186 = phi i32* [ %166, %165 ], [ %179, %175 ]
  %187 = phi i32* [ %167, %165 ], [ %180, %175 ]
  %188 = icmp ult i64 %170, 28
  br i1 %188, label %217, label %189

189:                                              ; preds = %184, %189
  %190 = phi i32* [ %213, %189 ], [ %186, %184 ]
  %191 = phi i32* [ %214, %189 ], [ %187, %184 ]
  %192 = getelementptr inbounds i32, i32* %190, i64 -1
  %193 = getelementptr inbounds i32, i32* %191, i64 -1
  %194 = load i32, i32* %193, align 4
  store i32 %194, i32* %192, align 4
  %195 = getelementptr inbounds i32, i32* %190, i64 -2
  %196 = getelementptr inbounds i32, i32* %191, i64 -2
  %197 = load i32, i32* %196, align 4
  store i32 %197, i32* %195, align 4
  %198 = getelementptr inbounds i32, i32* %190, i64 -3
  %199 = getelementptr inbounds i32, i32* %191, i64 -3
  %200 = load i32, i32* %199, align 4
  store i32 %200, i32* %198, align 4
  %201 = getelementptr inbounds i32, i32* %190, i64 -4
  %202 = getelementptr inbounds i32, i32* %191, i64 -4
  %203 = load i32, i32* %202, align 4
  store i32 %203, i32* %201, align 4
  %204 = getelementptr inbounds i32, i32* %190, i64 -5
  %205 = getelementptr inbounds i32, i32* %191, i64 -5
  %206 = load i32, i32* %205, align 4
  store i32 %206, i32* %204, align 4
  %207 = getelementptr inbounds i32, i32* %190, i64 -6
  %208 = getelementptr inbounds i32, i32* %191, i64 -6
  %209 = load i32, i32* %208, align 4
  store i32 %209, i32* %207, align 4
  %210 = getelementptr inbounds i32, i32* %190, i64 -7
  %211 = getelementptr inbounds i32, i32* %191, i64 -7
  %212 = load i32, i32* %211, align 4
  store i32 %212, i32* %210, align 4
  %213 = getelementptr inbounds i32, i32* %190, i64 -8
  %214 = getelementptr inbounds i32, i32* %191, i64 -8
  %215 = load i32, i32* %214, align 4
  store i32 %215, i32* %213, align 4
  %216 = icmp eq i32* %214, %62
  br i1 %216, label %217, label %189, !llvm.loop !93

217:                                              ; preds = %184, %189, %163
  %218 = phi i32* [ %89, %163 ], [ %185, %184 ], [ %213, %189 ]
  %219 = load i64, i64* %30, align 8
  br label %220

220:                                              ; preds = %51, %217
  %221 = phi i32* [ %218, %217 ], [ %54, %51 ]
  %222 = phi i64 [ %219, %217 ], [ %63, %51 ]
  %223 = ptrtoint i32* %221 to i64
  store i64 %223, i64* %30, align 8
  store i64 %60, i64* %7, align 8
  store i64 %59, i64* %4, align 8
  %224 = icmp eq i64 %222, 0
  br i1 %224, label %227, label %225

225:                                              ; preds = %220
  %226 = inttoptr i64 %222 to i8*
  tail call void @_Z7FX_FreePv(i8* nonnull %226) #13
  br label %227

227:                                              ; preds = %225, %220, %27
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold noreturn nounwind }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone speculatable }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }
attributes #15 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6pdfium10MakeRetainI12CFX_DIBitmapJEEEN5fxcrt9RetainPtrIT_EEDpOT0_: argument 0"}
!4 = distinct !{!4, !"_ZN6pdfium10MakeRetainI12CFX_DIBitmapJEEEN5fxcrt9RetainPtrIT_EEDpOT0_"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZNK11CFX_DIBBase14GetPaletteSpanEv: argument 0"}
!7 = distinct !{!7, !"_ZNK11CFX_DIBBase14GetPaletteSpanEv"}
!8 = !{!"branch_weights", i32 1, i32 2000}
!9 = !{i32 -2143777698}
!10 = !{i32 -2143777677}
!11 = !{!12}
!12 = distinct !{!12, !13}
!13 = distinct !{!13, !"LVerDomain"}
!14 = !{!15}
!15 = distinct !{!15, !13}
!16 = distinct !{!16, !17}
!17 = !{!"llvm.loop.isvectorized", i32 1}
!18 = distinct !{!18, !17}
!19 = !{!"branch_weights", i32 2000, i32 1}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZN6pdfium10MakeRetainI12CFX_DIBitmapJEEEN5fxcrt9RetainPtrIT_EEDpOT0_: argument 0"}
!22 = distinct !{!22, !"_ZN6pdfium10MakeRetainI12CFX_DIBitmapJEEEN5fxcrt9RetainPtrIT_EEDpOT0_"}
!23 = distinct !{!23, !17}
!24 = !{!25}
!25 = distinct !{!25, !26, !"_ZN6pdfium10MakeRetainI12CFX_DIBitmapJEEEN5fxcrt9RetainPtrIT_EEDpOT0_: argument 0"}
!26 = distinct !{!26, !"_ZN6pdfium10MakeRetainI12CFX_DIBitmapJEEEN5fxcrt9RetainPtrIT_EEDpOT0_"}
!27 = distinct !{!27, !28}
!28 = !{!"llvm.loop.unroll.disable"}
!29 = !{!30}
!30 = distinct !{!30, !31}
!31 = distinct !{!31, !"LVerDomain"}
!32 = !{!33}
!33 = distinct !{!33, !31}
!34 = distinct !{!34, !17}
!35 = distinct !{!35, !17}
!36 = !{!37}
!37 = distinct !{!37, !38, !"_ZN6pdfium10MakeRetainI12CFX_DIBitmapJEEEN5fxcrt9RetainPtrIT_EEDpOT0_: argument 0"}
!38 = distinct !{!38, !"_ZN6pdfium10MakeRetainI12CFX_DIBitmapJEEEN5fxcrt9RetainPtrIT_EEDpOT0_"}
!39 = !{!40}
!40 = distinct !{!40, !41, !"_ZNK11CFX_DIBBase14GetPaletteSpanEv: argument 0"}
!41 = distinct !{!41, !"_ZNK11CFX_DIBBase14GetPaletteSpanEv"}
!42 = !{!43}
!43 = distinct !{!43, !44, !"_ZN6pdfium10MakeRetainI12CFX_DIBitmapJEEEN5fxcrt9RetainPtrIT_EEDpOT0_: argument 0"}
!44 = distinct !{!44, !"_ZN6pdfium10MakeRetainI12CFX_DIBitmapJEEEN5fxcrt9RetainPtrIT_EEDpOT0_"}
!45 = !{!46}
!46 = distinct !{!46, !47, !"_ZNK11CFX_DIBBase14GetPaletteSpanEv: argument 0"}
!47 = distinct !{!47, !"_ZNK11CFX_DIBBase14GetPaletteSpanEv"}
!48 = !{i32 -2142559027}
!49 = !{i32 -2142559006}
!50 = distinct !{!50, !28}
!51 = distinct !{!51, !28}
!52 = distinct !{!52, !28}
!53 = distinct !{!53, !28}
!54 = !{!55}
!55 = distinct !{!55, !56, !"_ZN6pdfium10MakeRetainI12CFX_DIBitmapJEEEN5fxcrt9RetainPtrIT_EEDpOT0_: argument 0"}
!56 = distinct !{!56, !"_ZN6pdfium10MakeRetainI12CFX_DIBitmapJEEEN5fxcrt9RetainPtrIT_EEDpOT0_"}
!57 = !{!58}
!58 = distinct !{!58, !59, !"_ZNK11CFX_DIBBase14GetPaletteSpanEv: argument 0"}
!59 = distinct !{!59, !"_ZNK11CFX_DIBBase14GetPaletteSpanEv"}
!60 = distinct !{!60, !28}
!61 = distinct !{!61, !28}
!62 = distinct !{!62, !28}
!63 = distinct !{!63, !28}
!64 = distinct !{!64, !28}
!65 = !{!66}
!66 = distinct !{!66, !67, !"_ZNK11CFX_DIBBase14GetPaletteSpanEv: argument 0"}
!67 = distinct !{!67, !"_ZNK11CFX_DIBBase14GetPaletteSpanEv"}
!68 = !{!69}
!69 = distinct !{!69, !70}
!70 = distinct !{!70, !"LVerDomain"}
!71 = !{!72}
!72 = distinct !{!72, !70}
!73 = distinct !{!73, !17}
!74 = distinct !{!74, !28}
!75 = distinct !{!75, !28}
!76 = distinct !{!76, !17}
!77 = !{!78}
!78 = distinct !{!78, !79}
!79 = distinct !{!79, !"LVerDomain"}
!80 = !{!81}
!81 = distinct !{!81, !79}
!82 = distinct !{!82, !17}
!83 = distinct !{!83, !28}
!84 = distinct !{!84, !28}
!85 = distinct !{!85, !17}
!86 = !{!87}
!87 = distinct !{!87, !88}
!88 = distinct !{!88, !"LVerDomain"}
!89 = !{!90}
!90 = distinct !{!90, !88}
!91 = distinct !{!91, !17}
!92 = distinct !{!92, !28}
!93 = distinct !{!93, !17}
