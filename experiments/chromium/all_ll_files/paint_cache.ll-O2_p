; ModuleID = '../../ui/compositor/paint_cache.cc'
source_filename = "../../ui/compositor/paint_cache.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.ui::PaintCache" = type <{ %class.sk_sp, float, [4 x i8] }>
%class.sk_sp = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%"class.ui::PaintContext" = type <{ %"class.cc::DisplayItemList"*, float, %"class.gfx::Rect", %"class.gfx::Vector2d", i8, [3 x i8] }>
%"class.cc::DisplayItemList" = type <{ %"class.base::RefCountedThreadSafe", [4 x i8], %"class.cc::RTree", %"class.cc::DiscardableImageMap", %"class.cc::PaintOpBuffer", %"class.std::__1::vector.68", %"class.std::__1::vector.75", %"class.std::__1::vector.82", i32, [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"class.cc::RTree" = type <{ i64, %"struct.cc::RTree<unsigned long>::Branch", %"class.std::__1::vector", i8, [7 x i8] }>
%"struct.cc::RTree<unsigned long>::Branch" = type { %"struct.cc::RTree<unsigned long>::Node"*, i64, %"class.gfx::Rect" }
%"struct.cc::RTree<unsigned long>::Node" = type opaque
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.cc::RTree<unsigned long>::Node"*, %"struct.cc::RTree<unsigned long>::Node"*, %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"struct.cc::RTree<unsigned long>::Node"* }
%"class.cc::DiscardableImageMap" = type { %"class.base::flat_map", %"class.std::__1::vector.12", %"class.base::flat_map.26", i8, i8, [6 x i8], %"class.cc::RTree.36", %"class.std::__1::vector.60" }
%"class.base::flat_map" = type { %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.5" }
%"class.std::__1::vector.5" = type { %"class.std::__1::__vector_base.6" }
%"class.std::__1::__vector_base.6" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.7" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"struct.std::__1::pair"* }
%"class.std::__1::vector.12" = type { %"class.std::__1::__vector_base.13" }
%"class.std::__1::__vector_base.13" = type { %"struct.cc::DiscardableImageMap::AnimatedImageMetadata"*, %"struct.cc::DiscardableImageMap::AnimatedImageMetadata"*, %"class.std::__1::__compressed_pair.21" }
%"struct.cc::DiscardableImageMap::AnimatedImageMetadata" = type { i32, i32, %"class.std::__1::vector.14", i32, i32 }
%"class.std::__1::vector.14" = type { %"class.std::__1::__vector_base.15" }
%"class.std::__1::__vector_base.15" = type { %"struct.cc::FrameMetadata"*, %"struct.cc::FrameMetadata"*, %"class.std::__1::__compressed_pair.16" }
%"struct.cc::FrameMetadata" = type { i8, %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.cc::FrameMetadata"* }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"struct.cc::DiscardableImageMap::AnimatedImageMetadata"* }
%"class.base::flat_map.26" = type { %"class.base::internal::flat_tree.27" }
%"class.base::internal::flat_tree.27" = type { %"class.std::__1::vector.28" }
%"class.std::__1::vector.28" = type { %"class.std::__1::__vector_base.29" }
%"class.std::__1::__vector_base.29" = type { %"struct.std::__1::pair.30"*, %"struct.std::__1::pair.30"*, %"class.std::__1::__compressed_pair.31" }
%"struct.std::__1::pair.30" = type { i32, i32 }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.std::__1::pair.30"* }
%"class.cc::RTree.36" = type <{ i64, %"struct.cc::RTree<cc::DrawImage>::Branch", %"class.std::__1::vector.52", i8, [7 x i8] }>
%"struct.cc::RTree<cc::DrawImage>::Branch" = type { %"struct.cc::RTree<cc::DrawImage>::Node"*, %"class.cc::DrawImage", %"class.gfx::Rect" }
%"struct.cc::RTree<cc::DrawImage>::Node" = type opaque
%"class.cc::DrawImage" = type <{ %"class.cc::PaintImage", i8, [3 x i8], %struct.SkIRect, i32, %struct.SkSize, i8, [7 x i8], %"class.absl::optional", %"class.absl::optional.47", float, [4 x i8] }>
%"class.cc::PaintImage" = type { %class.sk_sp.37, %class.sk_sp, %"class.gfx::Rect", i32, %class.sk_sp.44, %class.sk_sp.45, i32, i32, i32, i32, i8, i8, i32, i32, %class.sk_sp.37, %class.scoped_refptr }
%class.sk_sp.44 = type { %"class.cc::PaintImageGenerator"* }
%"class.cc::PaintImageGenerator" = type opaque
%class.sk_sp.45 = type { %"class.cc::TextureBacking"* }
%"class.cc::TextureBacking" = type opaque
%class.sk_sp.37 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.38, i32, i32 }
%class.sk_sp.38 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.39" }
%"struct.std::__1::atomic.39" = type { %"struct.std::__1::__atomic_base.40" }
%"struct.std::__1::__atomic_base.40" = type { %"struct.std::__1::__atomic_base.41" }
%"struct.std::__1::__atomic_base.41" = type { %"struct.std::__1::__cxx_atomic_impl.42" }
%"struct.std::__1::__cxx_atomic_impl.42" = type { %"struct.std::__1::__cxx_atomic_base_impl.43" }
%"struct.std::__1::__cxx_atomic_base_impl.43" = type { i8 }
%struct.SkISize = type { i32, i32 }
%class.scoped_refptr = type { %"class.cc::PaintWorkletInput"* }
%"class.cc::PaintWorkletInput" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe.46", [4 x i8] }>
%"class.base::RefCountedThreadSafe.46" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%struct.SkIRect = type { i32, i32, i32, i32 }
%struct.SkSize = type { float, float }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i64 }
%"class.absl::optional.47" = type { %"class.absl::optional_internal::optional_data.48" }
%"class.absl::optional_internal::optional_data.48" = type { %"class.absl::optional_internal::optional_data_base.49" }
%"class.absl::optional_internal::optional_data_base.49" = type { %"class.absl::optional_internal::optional_data_dtor_base.50" }
%"class.absl::optional_internal::optional_data_dtor_base.50" = type { i8, %union.anon.51 }
%union.anon.51 = type { %"class.gfx::ColorSpace" }
%"class.gfx::ColorSpace" = type { i8, i8, i8, i8, [9 x float], [7 x float] }
%"class.std::__1::vector.52" = type { %"class.std::__1::__vector_base.53" }
%"class.std::__1::__vector_base.53" = type { %"struct.cc::RTree<cc::DrawImage>::Node"*, %"struct.cc::RTree<cc::DrawImage>::Node"*, %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"struct.cc::RTree<cc::DrawImage>::Node"* }
%"class.std::__1::vector.60" = type { %"class.std::__1::__vector_base.61" }
%"class.std::__1::__vector_base.61" = type { %"struct.std::__1::pair.62"*, %"struct.std::__1::pair.62"*, %"class.std::__1::__compressed_pair.63" }
%"struct.std::__1::pair.62" = type opaque
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.64" }
%"struct.std::__1::__compressed_pair_elem.64" = type { %"struct.std::__1::pair.62"* }
%"class.std::__1::vector.68" = type { %"class.std::__1::__vector_base.69" }
%"class.std::__1::__vector_base.69" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"class.gfx::Rect"* }
%"class.std::__1::vector.75" = type { %"class.std::__1::__vector_base.76" }
%"class.std::__1::__vector_base.76" = type { i64*, i64*, %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { i64* }
%"class.std::__1::vector.82" = type { %"class.std::__1::__vector_base.83" }
%"class.std::__1::__vector_base.83" = type { %"struct.cc::DisplayItemList::PairedBeginInfo"*, %"struct.cc::DisplayItemList::PairedBeginInfo"*, %"class.std::__1::__compressed_pair.84" }
%"struct.cc::DisplayItemList::PairedBeginInfo" = type { i64, i64 }
%"class.std::__1::__compressed_pair.84" = type { %"struct.std::__1::__compressed_pair_elem.85" }
%"struct.std::__1::__compressed_pair_elem.85" = type { %"struct.cc::DisplayItemList::PairedBeginInfo"* }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::Vector2d" = type { i32, i32 }
%class.sk_sp.91 = type { %"class.cc::PaintOpBuffer"* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.cc::DrawRecordOp" = type { %"class.cc::PaintOp", %class.sk_sp.91 }
%"class.cc::PaintOp" = type { i32 }

$_ZNSt3__16vectorIN3gfx4RectENS_9allocatorIS2_EEE8__appendEmRKS2_ = comdat any

$_ZN2cc13PaintOpBuffer14AnalyzeAddedOpINS_12DrawRecordOpEEEvPKT_ = comdat any

@_ZN2ui10PaintCacheC1Ev = hidden unnamed_addr alias void (%"class.ui::PaintCache"*), void (%"class.ui::PaintCache"*)* @_ZN2ui10PaintCacheC2Ev
@_ZN2ui10PaintCacheD1Ev = hidden unnamed_addr alias void (%"class.ui::PaintCache"*), void (%"class.ui::PaintCache"*)* @_ZN2ui10PaintCacheD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN2ui10PaintCacheC2Ev(%"class.ui::PaintCache"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.ui::PaintCache", %"class.ui::PaintCache"* %0, i64 0, i32 0, i32 0
  store %"class.cc::PaintOpBuffer"* null, %"class.cc::PaintOpBuffer"** %2, align 8
  %3 = getelementptr inbounds %"class.ui::PaintCache", %"class.ui::PaintCache"* %0, i64 0, i32 1
  store float 0.000000e+00, float* %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui10PaintCacheD2Ev(%"class.ui::PaintCache"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.ui::PaintCache", %"class.ui::PaintCache"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.cc::PaintOpBuffer"*, %"class.cc::PaintOpBuffer"** %2, align 8
  %4 = icmp eq %"class.cc::PaintOpBuffer"* %3, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.cc::PaintOpBuffer", %"class.cc::PaintOpBuffer"* %3, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = atomicrmw add i32* %6, i32 -1 acq_rel
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %15

9:                                                ; preds = %5
  %10 = bitcast %"class.cc::PaintOpBuffer"* %3 to %class.SkRefCntBase*
  %11 = bitcast %"class.cc::PaintOpBuffer"* %3 to void (%class.SkRefCntBase*)***
  %12 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %11, align 8
  %13 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %12, i64 2
  %14 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %13, align 8
  tail call void %14(%class.SkRefCntBase* nonnull %10) #8
  br label %15

15:                                               ; preds = %1, %5, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2ui10PaintCache8UseCacheERKNS_12PaintContextERKN3gfx4SizeE(%"class.ui::PaintCache"* nocapture readonly, %"class.ui::PaintContext"* dereferenceable(40), %"class.gfx::Size"* dereferenceable(8)) local_unnamed_addr #1 align 2 {
  %4 = alloca %class.sk_sp.91, align 8
  %5 = alloca { i64, i64 }, align 8
  %6 = bitcast { i64, i64 }* %5 to %"class.gfx::Rect"*
  %7 = getelementptr inbounds %"class.ui::PaintCache", %"class.ui::PaintCache"* %0, i64 0, i32 0, i32 0
  %8 = load %"class.cc::PaintOpBuffer"*, %"class.cc::PaintOpBuffer"** %7, align 8
  %9 = icmp eq %"class.cc::PaintOpBuffer"* %8, null
  br i1 %9, label %163, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %1, i64 0, i32 1
  %12 = load float, float* %11, align 8
  %13 = getelementptr inbounds %"class.ui::PaintCache", %"class.ui::PaintCache"* %0, i64 0, i32 1
  %14 = load float, float* %13, align 8
  %15 = fcmp une float %12, %14
  br i1 %15, label %163, label %16

16:                                               ; preds = %10
  %17 = getelementptr inbounds %"class.ui::PaintContext", %"class.ui::PaintContext"* %1, i64 0, i32 0
  %18 = load %"class.cc::DisplayItemList"*, %"class.cc::DisplayItemList"** %17, align 8
  %19 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %18, i64 0, i32 4
  %20 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %18, i64 0, i32 4, i32 3
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %18, i64 0, i32 8
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %93

25:                                               ; preds = %16
  %26 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %18, i64 0, i32 6
  %27 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %18, i64 0, i32 6, i32 0, i32 1
  %28 = load i64*, i64** %27, align 8
  %29 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %18, i64 0, i32 6, i32 0, i32 2, i32 0, i32 0
  %30 = load i64*, i64** %29, align 8
  %31 = icmp eq i64* %28, %30
  %32 = ptrtoint i64* %30 to i64
  br i1 %31, label %37, label %33

33:                                               ; preds = %25
  store i64 %21, i64* %28, align 8
  %34 = getelementptr inbounds i64, i64* %28, i64 1
  %35 = ptrtoint i64* %34 to i64
  %36 = bitcast i64** %27 to i64*
  store i64 %35, i64* %36, align 8
  br label %93

37:                                               ; preds = %25
  %38 = ptrtoint i64* %28 to i64
  %39 = bitcast i64** %27 to i64*
  %40 = bitcast %"class.std::__1::vector.75"* %26 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = sub i64 %38, %41
  %43 = ashr exact i64 %42, 3
  %44 = add nsw i64 %43, 1
  %45 = icmp ugt i64 %44, 2305843009213693951
  br i1 %45, label %46, label %48

46:                                               ; preds = %37
  %47 = bitcast %"class.std::__1::vector.75"* %26 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %47) #9
  unreachable

48:                                               ; preds = %37
  %49 = bitcast i64** %29 to i64*
  %50 = sub i64 %32, %41
  %51 = ashr exact i64 %50, 3
  %52 = icmp ult i64 %51, 1152921504606846975
  br i1 %52, label %53, label %61

53:                                               ; preds = %48
  %54 = ashr exact i64 %50, 2
  %55 = icmp ult i64 %54, %44
  %56 = select i1 %55, i64 %44, i64 %54
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %66, label %58

58:                                               ; preds = %53
  %59 = icmp ugt i64 %56, 2305843009213693951
  br i1 %59, label %60, label %61

60:                                               ; preds = %58
  tail call void @abort() #9
  unreachable

61:                                               ; preds = %58, %48
  %62 = phi i64 [ %56, %58 ], [ 2305843009213693951, %48 ]
  %63 = shl i64 %62, 3
  %64 = tail call i8* @_Znwm(i64 %63) #10
  %65 = bitcast i8* %64 to i64*
  br label %66

66:                                               ; preds = %61, %53
  %67 = phi i64 [ %62, %61 ], [ 0, %53 ]
  %68 = phi i64* [ %65, %61 ], [ null, %53 ]
  %69 = getelementptr inbounds i64, i64* %68, i64 %43
  %70 = getelementptr inbounds i64, i64* %68, i64 %67
  %71 = ptrtoint i64* %70 to i64
  store i64 %21, i64* %69, align 8
  %72 = getelementptr inbounds i64, i64* %69, i64 1
  %73 = ptrtoint i64* %72 to i64
  %74 = getelementptr inbounds %"class.std::__1::vector.75", %"class.std::__1::vector.75"* %26, i64 0, i32 0, i32 0
  %75 = load i64*, i64** %74, align 8
  %76 = load i64, i64* %39, align 8
  %77 = ptrtoint i64* %75 to i64
  %78 = sub i64 %76, %77
  %79 = ashr exact i64 %78, 3
  %80 = sub nsw i64 0, %79
  %81 = getelementptr inbounds i64, i64* %69, i64 %80
  %82 = ptrtoint i64* %81 to i64
  %83 = icmp sgt i64 %78, 0
  br i1 %83, label %84, label %88

84:                                               ; preds = %66
  %85 = bitcast i64* %81 to i8*
  %86 = bitcast i64* %75 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %85, i8* align 8 %86, i64 %78, i1 false) #8
  %87 = load i64*, i64** %74, align 8
  br label %88

88:                                               ; preds = %84, %66
  %89 = phi i64* [ %75, %66 ], [ %87, %84 ]
  store i64 %82, i64* %40, align 8
  store i64 %73, i64* %39, align 8
  store i64 %71, i64* %49, align 8
  %90 = icmp eq i64* %89, null
  br i1 %90, label %93, label %91

91:                                               ; preds = %88
  %92 = bitcast i64* %89 to i8*
  tail call void @_ZdlPv(i8* %92) #10
  br label %93

93:                                               ; preds = %91, %88, %33, %16
  %94 = bitcast %class.sk_sp.91* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %94)
  %95 = tail call i8* @_ZN2cc13PaintOpBuffer15AllocatePaintOpEm(%"class.cc::PaintOpBuffer"* %19, i64 16) #8
  %96 = bitcast i8* %95 to %"class.cc::DrawRecordOp"*
  %97 = getelementptr inbounds %class.sk_sp.91, %class.sk_sp.91* %4, i64 0, i32 0
  %98 = load %"class.cc::PaintOpBuffer"*, %"class.cc::PaintOpBuffer"** %7, align 8
  %99 = icmp eq %"class.cc::PaintOpBuffer"* %98, null
  br i1 %99, label %103, label %100

100:                                              ; preds = %93
  %101 = getelementptr inbounds %"class.cc::PaintOpBuffer", %"class.cc::PaintOpBuffer"* %98, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %102 = atomicrmw add i32* %101, i32 1 monotonic
  br label %103

103:                                              ; preds = %100, %93
  store %"class.cc::PaintOpBuffer"* %98, %"class.cc::PaintOpBuffer"** %97, align 8
  call void @_ZN2cc12DrawRecordOpC1E5sk_spIKNS_13PaintOpBufferEE(%"class.cc::DrawRecordOp"* %96, %class.sk_sp.91* nonnull %4) #8
  %104 = load %"class.cc::PaintOpBuffer"*, %"class.cc::PaintOpBuffer"** %97, align 8
  %105 = icmp eq %"class.cc::PaintOpBuffer"* %104, null
  br i1 %105, label %116, label %106

106:                                              ; preds = %103
  %107 = getelementptr inbounds %"class.cc::PaintOpBuffer", %"class.cc::PaintOpBuffer"* %104, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %108 = atomicrmw add i32* %107, i32 -1 acq_rel
  %109 = icmp eq i32 %108, 1
  br i1 %109, label %110, label %116

110:                                              ; preds = %106
  %111 = bitcast %"class.cc::PaintOpBuffer"* %104 to %class.SkRefCntBase*
  %112 = bitcast %"class.cc::PaintOpBuffer"* %104 to void (%class.SkRefCntBase*)***
  %113 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %112, align 8
  %114 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %113, i64 2
  %115 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %114, align 8
  call void %115(%class.SkRefCntBase* nonnull %111) #8
  br label %116

116:                                              ; preds = %103, %106, %110
  %117 = bitcast i8* %95 to i32*
  %118 = load i32, i32* %117, align 8
  %119 = and i32 %118, 255
  %120 = or i32 %119, 4096
  store i32 %120, i32* %117, align 8
  call void @_ZN2cc13PaintOpBuffer14AnalyzeAddedOpINS_12DrawRecordOpEEEvPKT_(%"class.cc::PaintOpBuffer"* %19, %"class.cc::DrawRecordOp"* %96) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94)
  %121 = bitcast { i64, i64 }* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %121) #8
  %122 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  %123 = call { i64, i64 } @_ZNK2ui12PaintContext18ToLayerSpaceBoundsERKN3gfx4SizeE(%"class.ui::PaintContext"* %1, %"class.gfx::Size"* dereferenceable(8) %2) #8
  %124 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 0
  %125 = extractvalue { i64, i64 } %123, 0
  store i64 %125, i64* %124, align 8
  %126 = extractvalue { i64, i64 } %123, 1
  store i64 %126, i64* %122, align 8
  %127 = load %"class.cc::DisplayItemList"*, %"class.cc::DisplayItemList"** %17, align 8
  %128 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %127, i64 0, i32 8
  %129 = load i32, i32* %128, align 8
  %130 = icmp eq i32 %129, 1
  br i1 %130, label %162, label %131

131:                                              ; preds = %116
  %132 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %127, i64 0, i32 5
  %133 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %127, i64 0, i32 4, i32 5
  %134 = load i64, i64* %133, align 8
  %135 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %127, i64 0, i32 5, i32 0, i32 1
  %136 = bitcast %"class.gfx::Rect"** %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = bitcast %"class.std::__1::vector.68"* %132 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = sub i64 %137, %139
  %141 = ashr exact i64 %140, 4
  %142 = icmp ugt i64 %134, %141
  %143 = inttoptr i64 %139 to %"class.gfx::Rect"*
  br i1 %142, label %144, label %146

144:                                              ; preds = %131
  %145 = sub i64 %134, %141
  call void @_ZNSt3__16vectorIN3gfx4RectENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.68"* %132, i64 %145, %"class.gfx::Rect"* nonnull dereferenceable(16) %6) #8
  br label %150

146:                                              ; preds = %131
  %147 = icmp ult i64 %134, %141
  br i1 %147, label %148, label %150

148:                                              ; preds = %146
  %149 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %143, i64 %134
  store %"class.gfx::Rect"* %149, %"class.gfx::Rect"** %135, align 8
  br label %150

150:                                              ; preds = %148, %146, %144
  %151 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %127, i64 0, i32 7, i32 0, i32 0
  %152 = load %"struct.cc::DisplayItemList::PairedBeginInfo"*, %"struct.cc::DisplayItemList::PairedBeginInfo"** %151, align 8
  %153 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %127, i64 0, i32 7, i32 0, i32 1
  %154 = load %"struct.cc::DisplayItemList::PairedBeginInfo"*, %"struct.cc::DisplayItemList::PairedBeginInfo"** %153, align 8
  %155 = icmp eq %"struct.cc::DisplayItemList::PairedBeginInfo"* %152, %154
  br i1 %155, label %162, label %156

156:                                              ; preds = %150
  %157 = getelementptr inbounds %"struct.cc::DisplayItemList::PairedBeginInfo", %"struct.cc::DisplayItemList::PairedBeginInfo"* %154, i64 -1, i32 0
  %158 = load i64, i64* %157, align 8
  %159 = getelementptr inbounds %"class.cc::DisplayItemList", %"class.cc::DisplayItemList"* %127, i64 0, i32 5, i32 0, i32 0
  %160 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %159, align 8
  %161 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %160, i64 %158
  call void @_ZN3gfx4Rect5UnionERKS0_(%"class.gfx::Rect"* %161, %"class.gfx::Rect"* nonnull dereferenceable(16) %6) #8
  br label %162

162:                                              ; preds = %116, %150, %156
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %121) #8
  br label %163

163:                                              ; preds = %3, %10, %162
  %164 = phi i1 [ true, %162 ], [ false, %10 ], [ false, %3 ]
  ret i1 %164
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare { i64, i64 } @_ZNK2ui12PaintContext18ToLayerSpaceBoundsERKN3gfx4SizeE(%"class.ui::PaintContext"*, %"class.gfx::Size"* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2ui10PaintCache16SetPaintOpBufferE5sk_spIN2cc13PaintOpBufferEEf(%"class.ui::PaintCache"* nocapture, %class.sk_sp* nocapture, float) local_unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %1, i64 0, i32 0
  %5 = bitcast %class.sk_sp* %1 to i64*
  %6 = load i64, i64* %5, align 8
  store %"class.cc::PaintOpBuffer"* null, %"class.cc::PaintOpBuffer"** %4, align 8
  %7 = getelementptr inbounds %"class.ui::PaintCache", %"class.ui::PaintCache"* %0, i64 0, i32 0, i32 0
  %8 = load %"class.cc::PaintOpBuffer"*, %"class.cc::PaintOpBuffer"** %7, align 8
  %9 = bitcast %"class.ui::PaintCache"* %0 to i64*
  store i64 %6, i64* %9, align 8
  %10 = icmp eq %"class.cc::PaintOpBuffer"* %8, null
  br i1 %10, label %21, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %"class.cc::PaintOpBuffer", %"class.cc::PaintOpBuffer"* %8, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = atomicrmw add i32* %12, i32 -1 acq_rel
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %21

15:                                               ; preds = %11
  %16 = bitcast %"class.cc::PaintOpBuffer"* %8 to %class.SkRefCntBase*
  %17 = bitcast %"class.cc::PaintOpBuffer"* %8 to void (%class.SkRefCntBase*)***
  %18 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %17, align 8
  %19 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %18, i64 2
  %20 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %19, align 8
  tail call void %20(%class.SkRefCntBase* nonnull %16) #8
  br label %21

21:                                               ; preds = %3, %11, %15
  %22 = getelementptr inbounds %"class.ui::PaintCache", %"class.ui::PaintCache"* %0, i64 0, i32 1
  store float %2, float* %22, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3gfx4RectENS_9allocatorIS2_EEE8__appendEmRKS2_(%"class.std::__1::vector.68"*, i64, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #1 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.68", %"class.std::__1::vector.68"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast %"class.gfx::Rect"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.68", %"class.std::__1::vector.68"* %0, i64 0, i32 0, i32 1
  %8 = bitcast %"class.gfx::Rect"** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = ashr exact i64 %10, 4
  %12 = icmp ult i64 %11, %1
  br i1 %12, label %50, label %13

13:                                               ; preds = %3
  %14 = inttoptr i64 %9 to %"class.gfx::Rect"*
  %15 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %14, i64 %1
  %16 = icmp eq i64 %1, 0
  br i1 %16, label %48, label %17

17:                                               ; preds = %13
  %18 = bitcast %"class.gfx::Rect"* %2 to i8*
  %19 = shl nsw i64 %1, 4
  %20 = add i64 %19, -16
  %21 = lshr exact i64 %20, 4
  %22 = add nuw nsw i64 %21, 1
  %23 = and i64 %22, 3
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %17, %25
  %26 = phi %"class.gfx::Rect"* [ %29, %25 ], [ %14, %17 ]
  %27 = phi i64 [ %30, %25 ], [ %23, %17 ]
  %28 = bitcast %"class.gfx::Rect"* %26 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %28, i8* align 4 %18, i64 16, i1 false) #8
  %29 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %26, i64 1
  %30 = add i64 %27, -1
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %32, label %25, !llvm.loop !2

32:                                               ; preds = %25, %17
  %33 = phi %"class.gfx::Rect"* [ %14, %17 ], [ %29, %25 ]
  %34 = icmp ult i64 %20, 48
  br i1 %34, label %35, label %37

35:                                               ; preds = %37, %32
  %36 = ptrtoint %"class.gfx::Rect"* %15 to i64
  br label %48

37:                                               ; preds = %32, %37
  %38 = phi %"class.gfx::Rect"* [ %46, %37 ], [ %33, %32 ]
  %39 = bitcast %"class.gfx::Rect"* %38 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %39, i8* align 4 %18, i64 16, i1 false) #8
  %40 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %38, i64 1
  %41 = bitcast %"class.gfx::Rect"* %40 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* align 4 %18, i64 16, i1 false) #8
  %42 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %38, i64 2
  %43 = bitcast %"class.gfx::Rect"* %42 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %43, i8* align 4 %18, i64 16, i1 false) #8
  %44 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %38, i64 3
  %45 = bitcast %"class.gfx::Rect"* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %45, i8* align 4 %18, i64 16, i1 false) #8
  %46 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %38, i64 4
  %47 = icmp eq %"class.gfx::Rect"* %46, %15
  br i1 %47, label %35, label %37

48:                                               ; preds = %13, %35
  %49 = phi i64 [ %36, %35 ], [ %9, %13 ]
  store i64 %49, i64* %8, align 8
  br label %132

50:                                               ; preds = %3
  %51 = bitcast %"class.std::__1::vector.68"* %0 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = sub i64 %9, %52
  %54 = ashr exact i64 %53, 4
  %55 = add i64 %54, %1
  %56 = icmp ugt i64 %55, 1152921504606846975
  br i1 %56, label %57, label %59

57:                                               ; preds = %50
  %58 = bitcast %"class.std::__1::vector.68"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %58) #9
  unreachable

59:                                               ; preds = %50
  %60 = sub i64 %6, %52
  %61 = ashr exact i64 %60, 4
  %62 = icmp ult i64 %61, 576460752303423487
  br i1 %62, label %63, label %71

63:                                               ; preds = %59
  %64 = ashr exact i64 %60, 3
  %65 = icmp ult i64 %64, %55
  %66 = select i1 %65, i64 %55, i64 %64
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %76, label %68

68:                                               ; preds = %63
  %69 = icmp ugt i64 %66, 1152921504606846975
  br i1 %69, label %70, label %71

70:                                               ; preds = %68
  tail call void @abort() #9
  unreachable

71:                                               ; preds = %59, %68
  %72 = phi i64 [ %66, %68 ], [ 1152921504606846975, %59 ]
  %73 = shl i64 %72, 4
  %74 = tail call i8* @_Znwm(i64 %73) #10
  %75 = bitcast i8* %74 to %"class.gfx::Rect"*
  br label %76

76:                                               ; preds = %71, %63
  %77 = phi i64 [ %72, %71 ], [ 0, %63 ]
  %78 = phi %"class.gfx::Rect"* [ %75, %71 ], [ null, %63 ]
  %79 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %78, i64 %54
  %80 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %78, i64 %77
  %81 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %79, i64 %1
  %82 = bitcast %"class.gfx::Rect"* %2 to i8*
  %83 = shl nsw i64 %1, 4
  %84 = add i64 %83, -16
  %85 = lshr exact i64 %84, 4
  %86 = add nuw nsw i64 %85, 1
  %87 = and i64 %86, 3
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %96, label %89

89:                                               ; preds = %76, %89
  %90 = phi %"class.gfx::Rect"* [ %93, %89 ], [ %79, %76 ]
  %91 = phi i64 [ %94, %89 ], [ %87, %76 ]
  %92 = bitcast %"class.gfx::Rect"* %90 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %92, i8* align 4 %82, i64 16, i1 false) #8
  %93 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %90, i64 1
  %94 = add i64 %91, -1
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %89, !llvm.loop !4

96:                                               ; preds = %89, %76
  %97 = phi %"class.gfx::Rect"* [ %79, %76 ], [ %93, %89 ]
  %98 = icmp ult i64 %84, 48
  br i1 %98, label %110, label %99

99:                                               ; preds = %96, %99
  %100 = phi %"class.gfx::Rect"* [ %108, %99 ], [ %97, %96 ]
  %101 = bitcast %"class.gfx::Rect"* %100 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %101, i8* align 4 %82, i64 16, i1 false) #8
  %102 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %100, i64 1
  %103 = bitcast %"class.gfx::Rect"* %102 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %103, i8* align 4 %82, i64 16, i1 false) #8
  %104 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %100, i64 2
  %105 = bitcast %"class.gfx::Rect"* %104 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %105, i8* align 4 %82, i64 16, i1 false) #8
  %106 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %100, i64 3
  %107 = bitcast %"class.gfx::Rect"* %106 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %107, i8* align 4 %82, i64 16, i1 false) #8
  %108 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %100, i64 4
  %109 = icmp eq %"class.gfx::Rect"* %81, %108
  br i1 %109, label %110, label %99

110:                                              ; preds = %99, %96
  %111 = ptrtoint %"class.gfx::Rect"* %80 to i64
  %112 = ptrtoint %"class.gfx::Rect"* %81 to i64
  %113 = getelementptr inbounds %"class.std::__1::vector.68", %"class.std::__1::vector.68"* %0, i64 0, i32 0, i32 0
  %114 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %113, align 8
  %115 = load i64, i64* %8, align 8
  %116 = ptrtoint %"class.gfx::Rect"* %114 to i64
  %117 = sub i64 %115, %116
  %118 = ashr exact i64 %117, 4
  %119 = sub nsw i64 0, %118
  %120 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %79, i64 %119
  %121 = ptrtoint %"class.gfx::Rect"* %120 to i64
  %122 = icmp sgt i64 %117, 0
  br i1 %122, label %123, label %127

123:                                              ; preds = %110
  %124 = bitcast %"class.gfx::Rect"* %120 to i8*
  %125 = bitcast %"class.gfx::Rect"* %114 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %124, i8* align 4 %125, i64 %117, i1 false) #8
  %126 = load %"class.gfx::Rect"*, %"class.gfx::Rect"** %113, align 8
  br label %127

127:                                              ; preds = %110, %123
  %128 = phi %"class.gfx::Rect"* [ %114, %110 ], [ %126, %123 ]
  store i64 %121, i64* %51, align 8
  store i64 %112, i64* %8, align 8
  store i64 %111, i64* %5, align 8
  %129 = icmp eq %"class.gfx::Rect"* %128, null
  br i1 %129, label %132, label %130

130:                                              ; preds = %127
  %131 = bitcast %"class.gfx::Rect"* %128 to i8*
  tail call void @_ZdlPv(i8* %131) #10
  br label %132

132:                                              ; preds = %130, %127, %48
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #4

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

declare void @_ZN3gfx4Rect5UnionERKS0_(%"class.gfx::Rect"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #3

declare i8* @_ZN2cc13PaintOpBuffer15AllocatePaintOpEm(%"class.cc::PaintOpBuffer"*, i64) local_unnamed_addr #3

declare void @_ZN2cc12DrawRecordOpC1E5sk_spIKNS_13PaintOpBufferEE(%"class.cc::DrawRecordOp"*, %class.sk_sp.91*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2cc13PaintOpBuffer14AnalyzeAddedOpINS_12DrawRecordOpEEEvPKT_(%"class.cc::PaintOpBuffer"*, %"class.cc::DrawRecordOp"*) local_unnamed_addr #1 comdat align 2 {
  %3 = getelementptr inbounds %"class.cc::DrawRecordOp", %"class.cc::DrawRecordOp"* %1, i64 0, i32 0
  %4 = getelementptr inbounds %"class.cc::PaintOpBuffer", %"class.cc::PaintOpBuffer"* %0, i64 0, i32 8
  %5 = tail call i32 @_ZNK2cc12DrawRecordOp14CountSlowPathsEv(%"class.cc::DrawRecordOp"* %1) #8
  %6 = load i32, i32* %4, align 8
  %7 = add nsw i32 %6, %5
  store i32 %7, i32* %4, align 8
  %8 = tail call zeroext i1 @_ZNK2cc12DrawRecordOp13HasNonAAPaintEv(%"class.cc::DrawRecordOp"* %1) #8
  %9 = zext i1 %8 to i8
  %10 = getelementptr inbounds %"class.cc::PaintOpBuffer", %"class.cc::PaintOpBuffer"* %0, i64 0, i32 9
  %11 = load i8, i8* %10, align 4
  %12 = and i8 %11, 1
  %13 = or i8 %12, %9
  %14 = and i8 %11, -2
  %15 = or i8 %13, %14
  store i8 %15, i8* %10, align 4
  %16 = tail call zeroext i1 @_ZNK2cc12DrawRecordOp20HasDiscardableImagesEv(%"class.cc::DrawRecordOp"* %1) #8
  %17 = zext i1 %16 to i8
  %18 = load i8, i8* %10, align 4
  %19 = shl nuw nsw i8 %17, 1
  %20 = and i8 %18, 2
  %21 = or i8 %20, %19
  %22 = and i8 %18, -3
  %23 = or i8 %21, %22
  store i8 %23, i8* %10, align 4
  %24 = tail call i64 @_ZNK2cc12DrawRecordOp19AdditionalBytesUsedEv(%"class.cc::DrawRecordOp"* %1) #8
  %25 = getelementptr inbounds %"class.cc::PaintOpBuffer", %"class.cc::PaintOpBuffer"* %0, i64 0, i32 6
  %26 = load i64, i64* %25, align 8
  %27 = add i64 %26, %24
  store i64 %27, i64* %25, align 8
  %28 = tail call i64 @_ZNK2cc12DrawRecordOp17AdditionalOpCountEv(%"class.cc::DrawRecordOp"* %1) #8
  %29 = getelementptr inbounds %"class.cc::PaintOpBuffer", %"class.cc::PaintOpBuffer"* %0, i64 0, i32 7
  %30 = load i64, i64* %29, align 8
  %31 = add i64 %30, %28
  store i64 %31, i64* %29, align 8
  %32 = tail call zeroext i1 @_ZNK2cc7PaintOp8IsDrawOpEv(%"class.cc::PaintOp"* %3) #8
  %33 = zext i1 %32 to i8
  %34 = load i8, i8* %10, align 4
  %35 = shl nuw nsw i8 %33, 2
  %36 = and i8 %34, 4
  %37 = or i8 %36, %35
  %38 = and i8 %34, -5
  %39 = or i8 %37, %38
  store i8 %39, i8* %10, align 4
  %40 = tail call zeroext i1 @_ZNK2cc12DrawRecordOp14HasDrawTextOpsEv(%"class.cc::DrawRecordOp"* %1) #8
  %41 = zext i1 %40 to i8
  %42 = load i8, i8* %10, align 4
  %43 = shl nuw nsw i8 %41, 3
  %44 = and i8 %42, 8
  %45 = or i8 %44, %43
  %46 = and i8 %42, -9
  %47 = or i8 %45, %46
  store i8 %47, i8* %10, align 4
  %48 = tail call zeroext i1 @_ZNK2cc12DrawRecordOp20HasSaveLayerAlphaOpsEv(%"class.cc::DrawRecordOp"* %1) #8
  %49 = zext i1 %48 to i8
  %50 = load i8, i8* %10, align 4
  %51 = shl nuw nsw i8 %49, 4
  %52 = and i8 %50, 16
  %53 = or i8 %52, %51
  %54 = and i8 %50, -17
  %55 = or i8 %53, %54
  store i8 %55, i8* %10, align 4
  %56 = tail call zeroext i1 @_ZNK2cc12DrawRecordOp44HasEffectsPreventingLCDTextForSaveLayerAlphaEv(%"class.cc::DrawRecordOp"* %1) #8
  %57 = zext i1 %56 to i8
  %58 = load i8, i8* %10, align 4
  %59 = shl nuw nsw i8 %57, 5
  %60 = and i8 %58, 32
  %61 = or i8 %60, %59
  %62 = and i8 %58, -33
  %63 = or i8 %61, %62
  store i8 %63, i8* %10, align 4
  ret void
}

declare i32 @_ZNK2cc12DrawRecordOp14CountSlowPathsEv(%"class.cc::DrawRecordOp"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK2cc12DrawRecordOp13HasNonAAPaintEv(%"class.cc::DrawRecordOp"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK2cc12DrawRecordOp20HasDiscardableImagesEv(%"class.cc::DrawRecordOp"*) local_unnamed_addr #3

declare i64 @_ZNK2cc12DrawRecordOp19AdditionalBytesUsedEv(%"class.cc::DrawRecordOp"*) local_unnamed_addr #3

declare i64 @_ZNK2cc12DrawRecordOp17AdditionalOpCountEv(%"class.cc::DrawRecordOp"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK2cc7PaintOp8IsDrawOpEv(%"class.cc::PaintOp"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK2cc12DrawRecordOp14HasDrawTextOpsEv(%"class.cc::DrawRecordOp"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK2cc12DrawRecordOp20HasSaveLayerAlphaOpsEv(%"class.cc::DrawRecordOp"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK2cc12DrawRecordOp44HasEffectsPreventingLCDTextForSaveLayerAlphaEv(%"class.cc::DrawRecordOp"*) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
