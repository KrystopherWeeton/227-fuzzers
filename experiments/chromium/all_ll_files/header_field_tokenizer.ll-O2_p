; ModuleID = '../../third_party/blink/renderer/platform/network/header_field_tokenizer.cc'
source_filename = "../../third_party/blink/renderer/platform/network/header_field_tokenizer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::HeaderFieldTokenizer" = type { i32, %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringBuilder" = type <{ %"class.WTF::String", %union.anon, i32, i8, i8, [2 x i8] }>
%union.anon = type { %"class.WTF::Vector" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [16 x i8] }
%"class.WTF::VectorBufferBase" = type { i8*, i32, i32 }
%"class.WTF::Vector.1" = type { %"class.WTF::VectorBuffer.2" }
%"class.WTF::VectorBuffer.2" = type { %"class.WTF::VectorBufferBase.3", [16 x i8] }
%"class.WTF::VectorBufferBase.3" = type { i16*, i32, i32 }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.WTF::Vector.6" = type { %"class.WTF::VectorBuffer.7" }
%"class.WTF::VectorBuffer.7" = type { %"class.WTF::VectorBufferBase" }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.10 }
%union.anon.10 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZN3WTF13StringBuilder6AppendEDs = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_ = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm = comdat any

$_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_ = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj = comdat any

$_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm = comdat any

$_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs = comdat any

@.str = private unnamed_addr constant [33 x i8] c"expanded_capacity > old_capacity\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.4 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv = private unnamed_addr constant [61 x i8] c"const char *WTF::GetStringWithTypeName() [T = unsigned char]\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv = private unnamed_addr constant [56 x i8] c"const char *WTF::GetStringWithTypeName() [T = char16_t]\00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8

@_ZN5blink20HeaderFieldTokenizerC1ERKN3WTF6StringE = hidden unnamed_addr alias void (%"class.blink::HeaderFieldTokenizer"*, %"class.WTF::String"*), void (%"class.blink::HeaderFieldTokenizer"*, %"class.WTF::String"*)* @_ZN5blink20HeaderFieldTokenizerC2ERKN3WTF6StringE
@_ZN5blink20HeaderFieldTokenizerC1EOS0_ = hidden unnamed_addr alias void (%"class.blink::HeaderFieldTokenizer"*, %"class.blink::HeaderFieldTokenizer"*), void (%"class.blink::HeaderFieldTokenizer"*, %"class.blink::HeaderFieldTokenizer"*)* @_ZN5blink20HeaderFieldTokenizerC2EOS0_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20HeaderFieldTokenizerC2ERKN3WTF6StringE(%"class.blink::HeaderFieldTokenizer"* nocapture, %"class.WTF::String"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::HeaderFieldTokenizer", %"class.blink::HeaderFieldTokenizer"* %0, i64 0, i32 0
  store i32 0, i32* %3, align 8
  %4 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = getelementptr inbounds %"class.blink::HeaderFieldTokenizer", %"class.blink::HeaderFieldTokenizer"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %5, %"class.WTF::StringImpl"** %6, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %7, label %74, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = and i32 %10, 2
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %27

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 0
  %15 = load i32, i32* %14, align 4
  %16 = zext i32 %15 to i33
  %17 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %16, i33 1) #8
  %18 = extractvalue { i33, i1 } %17, 1
  %19 = extractvalue { i33, i1 } %17, 0
  %20 = icmp slt i33 %19, 0
  %21 = or i1 %18, %20
  br i1 %21, label %22, label %23, !prof !2

22:                                               ; preds = %13
  tail call void @llvm.trap() #8
  unreachable

23:                                               ; preds = %13
  %24 = trunc i33 %19 to i32
  store i32 %24, i32* %14, align 4
  %25 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %26 = icmp eq %"class.WTF::StringImpl"* %25, null
  br i1 %26, label %74, label %27

27:                                               ; preds = %8, %23
  %28 = phi %"class.WTF::StringImpl"* [ %25, %23 ], [ %5, %8 ]
  %29 = load i32, i32* %3, align 8
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 1
  %31 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %28, i64 1
  %33 = bitcast %"class.WTF::StringImpl"* %32 to i8*
  %34 = bitcast %"class.WTF::StringImpl"* %32 to i16*
  %35 = load i32, i32* %30, align 4
  %36 = icmp ult i32 %29, %35
  br i1 %36, label %37, label %74

37:                                               ; preds = %27
  %38 = zext i32 %29 to i64
  br label %39

39:                                               ; preds = %37, %68
  %40 = phi i64 [ %38, %37 ], [ %69, %68 ]
  %41 = load atomic i32, i32* %31 monotonic, align 4
  %42 = and i32 %41, 1
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %48, label %44

44:                                               ; preds = %39
  %45 = getelementptr inbounds i8, i8* %33, i64 %40
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i16
  br label %51

48:                                               ; preds = %39
  %49 = getelementptr inbounds i16, i16* %34, i64 %40
  %50 = load i16, i16* %49, align 2
  br label %51

51:                                               ; preds = %48, %44
  %52 = phi i16 [ %47, %44 ], [ %50, %48 ]
  %53 = icmp eq i16 %52, 32
  br i1 %53, label %68, label %54

54:                                               ; preds = %51
  %55 = load atomic i32, i32* %31 monotonic, align 4
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %62, label %58

58:                                               ; preds = %54
  %59 = getelementptr inbounds i8, i8* %33, i64 %40
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i16
  br label %65

62:                                               ; preds = %54
  %63 = getelementptr inbounds i16, i16* %34, i64 %40
  %64 = load i16, i16* %63, align 2
  br label %65

65:                                               ; preds = %62, %58
  %66 = phi i16 [ %61, %58 ], [ %64, %62 ]
  %67 = icmp eq i16 %66, 9
  br i1 %67, label %68, label %74

68:                                               ; preds = %65, %51
  %69 = add nuw nsw i64 %40, 1
  %70 = trunc i64 %69 to i32
  store i32 %70, i32* %3, align 8
  %71 = load i32, i32* %30, align 4
  %72 = zext i32 %71 to i64
  %73 = icmp ult i64 %69, %72
  br i1 %73, label %39, label %74

74:                                               ; preds = %65, %68, %2, %27, %23
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink20HeaderFieldTokenizer22SkipOptionalWhitespaceEv(%"class.blink::HeaderFieldTokenizer"* nocapture) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::HeaderFieldTokenizer", %"class.blink::HeaderFieldTokenizer"* %0, i64 0, i32 1, i32 0, i32 0
  %3 = getelementptr inbounds %"class.blink::HeaderFieldTokenizer", %"class.blink::HeaderFieldTokenizer"* %0, i64 0, i32 0
  %4 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %5 = icmp eq %"class.WTF::StringImpl"* %4, null
  br i1 %5, label %54, label %6

6:                                                ; preds = %1
  %7 = load i32, i32* %3, align 8
  %8 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 1
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 1
  %11 = bitcast %"class.WTF::StringImpl"* %10 to i8*
  %12 = bitcast %"class.WTF::StringImpl"* %10 to i16*
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %4, i64 1
  %15 = bitcast %"class.WTF::StringImpl"* %14 to i8*
  %16 = bitcast %"class.WTF::StringImpl"* %14 to i16*
  %17 = load i32, i32* %8, align 4
  %18 = icmp ult i32 %7, %17
  br i1 %18, label %19, label %54

19:                                               ; preds = %6, %50
  %20 = phi i32 [ %51, %50 ], [ %7, %6 ]
  %21 = load atomic i32, i32* %9 monotonic, align 4
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  %24 = zext i32 %20 to i64
  br i1 %23, label %29, label %25

25:                                               ; preds = %19
  %26 = getelementptr inbounds i8, i8* %11, i64 %24
  %27 = load i8, i8* %26, align 1
  %28 = zext i8 %27 to i16
  br label %32

29:                                               ; preds = %19
  %30 = getelementptr inbounds i16, i16* %12, i64 %24
  %31 = load i16, i16* %30, align 2
  br label %32

32:                                               ; preds = %25, %29
  %33 = phi i16 [ %28, %25 ], [ %31, %29 ]
  %34 = icmp eq i16 %33, 32
  br i1 %34, label %50, label %35

35:                                               ; preds = %32
  %36 = load atomic i32, i32* %13 monotonic, align 4
  %37 = and i32 %36, 1
  %38 = icmp eq i32 %37, 0
  %39 = zext i32 %20 to i64
  br i1 %38, label %44, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds i8, i8* %15, i64 %39
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i16
  br label %47

44:                                               ; preds = %35
  %45 = getelementptr inbounds i16, i16* %16, i64 %39
  %46 = load i16, i16* %45, align 2
  br label %47

47:                                               ; preds = %40, %44
  %48 = phi i16 [ %43, %40 ], [ %46, %44 ]
  %49 = icmp eq i16 %48, 9
  br i1 %49, label %50, label %54

50:                                               ; preds = %32, %47
  %51 = add nuw i32 %20, 1
  store i32 %51, i32* %3, align 8
  %52 = load i32, i32* %8, align 4
  %53 = icmp ult i32 %51, %52
  br i1 %53, label %19, label %54

54:                                               ; preds = %50, %47, %6, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink20HeaderFieldTokenizerC2EOS0_(%"class.blink::HeaderFieldTokenizer"* nocapture, %"class.blink::HeaderFieldTokenizer"* nocapture readonly dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::HeaderFieldTokenizer", %"class.blink::HeaderFieldTokenizer"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.blink::HeaderFieldTokenizer", %"class.blink::HeaderFieldTokenizer"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  store i32 %5, i32* %3, align 8
  %6 = getelementptr inbounds %"class.blink::HeaderFieldTokenizer", %"class.blink::HeaderFieldTokenizer"* %1, i64 0, i32 1, i32 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %8 = getelementptr inbounds %"class.blink::HeaderFieldTokenizer", %"class.blink::HeaderFieldTokenizer"* %0, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %7, %"class.WTF::StringImpl"** %8, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %9, label %27, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = load atomic i32, i32* %11 monotonic, align 4
  %13 = and i32 %12, 2
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %27

15:                                               ; preds = %10
  %16 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 0
  %17 = load i32, i32* %16, align 4
  %18 = zext i32 %17 to i33
  %19 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %18, i33 1) #8
  %20 = extractvalue { i33, i1 } %19, 1
  %21 = extractvalue { i33, i1 } %19, 0
  %22 = icmp slt i33 %21, 0
  %23 = or i1 %20, %22
  br i1 %23, label %24, label %25, !prof !2

24:                                               ; preds = %15
  tail call void @llvm.trap() #8
  unreachable

25:                                               ; preds = %15
  %26 = trunc i33 %21 to i32
  store i32 %26, i32* %16, align 4
  br label %27

27:                                               ; preds = %2, %10, %25
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink20HeaderFieldTokenizer7ConsumeEc(%"class.blink::HeaderFieldTokenizer"* nocapture, i8 signext) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::HeaderFieldTokenizer", %"class.blink::HeaderFieldTokenizer"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.blink::HeaderFieldTokenizer", %"class.blink::HeaderFieldTokenizer"* %0, i64 0, i32 1, i32 0, i32 0
  %6 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %7 = icmp eq %"class.WTF::StringImpl"* %6, null
  br i1 %7, label %79, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = icmp ult i32 %4, %10
  br i1 %11, label %12, label %79

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = load atomic i32, i32* %13 monotonic, align 4
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  br i1 %16, label %24, label %18

18:                                               ; preds = %12
  %19 = bitcast %"class.WTF::StringImpl"* %17 to i8*
  %20 = zext i32 %4 to i64
  %21 = getelementptr inbounds i8, i8* %19, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = zext i8 %22 to i16
  br label %29

24:                                               ; preds = %12
  %25 = bitcast %"class.WTF::StringImpl"* %17 to i16*
  %26 = zext i32 %4 to i64
  %27 = getelementptr inbounds i16, i16* %25, i64 %26
  %28 = load i16, i16* %27, align 2
  br label %29

29:                                               ; preds = %18, %24
  %30 = phi i16 [ %23, %18 ], [ %28, %24 ]
  %31 = zext i16 %30 to i32
  %32 = sext i8 %1 to i32
  %33 = icmp eq i32 %31, %32
  br i1 %33, label %34, label %79

34:                                               ; preds = %29
  %35 = add nuw i32 %4, 1
  store i32 %35, i32* %3, align 8
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %6, i64 1
  %38 = bitcast %"class.WTF::StringImpl"* %37 to i8*
  %39 = bitcast %"class.WTF::StringImpl"* %37 to i16*
  %40 = load i32, i32* %9, align 4
  %41 = icmp ult i32 %35, %40
  br i1 %41, label %42, label %79

42:                                               ; preds = %34
  %43 = zext i32 %35 to i64
  br label %44

44:                                               ; preds = %42, %73
  %45 = phi i64 [ %43, %42 ], [ %74, %73 ]
  %46 = load atomic i32, i32* %36 monotonic, align 4
  %47 = and i32 %46, 1
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds i8, i8* %38, i64 %45
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i16
  br label %56

53:                                               ; preds = %44
  %54 = getelementptr inbounds i16, i16* %39, i64 %45
  %55 = load i16, i16* %54, align 2
  br label %56

56:                                               ; preds = %53, %49
  %57 = phi i16 [ %52, %49 ], [ %55, %53 ]
  %58 = icmp eq i16 %57, 32
  br i1 %58, label %73, label %59

59:                                               ; preds = %56
  %60 = load atomic i32, i32* %36 monotonic, align 4
  %61 = and i32 %60, 1
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %67, label %63

63:                                               ; preds = %59
  %64 = getelementptr inbounds i8, i8* %38, i64 %45
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i16
  br label %70

67:                                               ; preds = %59
  %68 = getelementptr inbounds i16, i16* %39, i64 %45
  %69 = load i16, i16* %68, align 2
  br label %70

70:                                               ; preds = %67, %63
  %71 = phi i16 [ %66, %63 ], [ %69, %67 ]
  %72 = icmp eq i16 %71, 9
  br i1 %72, label %73, label %79

73:                                               ; preds = %70, %56
  %74 = add nuw nsw i64 %45, 1
  %75 = trunc i64 %74 to i32
  store i32 %75, i32* %3, align 8
  %76 = load i32, i32* %9, align 4
  %77 = zext i32 %76 to i64
  %78 = icmp ult i64 %74, %77
  br i1 %78, label %44, label %79

79:                                               ; preds = %73, %70, %34, %8, %2, %29
  %80 = phi i1 [ false, %29 ], [ false, %8 ], [ false, %2 ], [ true, %34 ], [ true, %70 ], [ true, %73 ]
  ret i1 %80
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink20HeaderFieldTokenizer19ConsumeQuotedStringERN3WTF6StringE(%"class.blink::HeaderFieldTokenizer"* nocapture, %"class.WTF::String"* nocapture dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::StringBuilder", align 8
  %4 = bitcast %"class.WTF::StringBuilder"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %4) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 48, i1 false)
  %5 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %3, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %5, align 8
  %6 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %3, i64 0, i32 1
  %7 = bitcast %union.anon* %6 to i8*
  store i8 0, i8* %7, align 8
  %8 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %3, i64 0, i32 2
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %3, i64 0, i32 3
  store i8 1, i8* %9, align 4
  %10 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %3, i64 0, i32 4
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %"class.blink::HeaderFieldTokenizer", %"class.blink::HeaderFieldTokenizer"* %0, i64 0, i32 0
  %12 = load i32, i32* %11, align 8
  %13 = add i32 %12, 1
  store i32 %13, i32* %11, align 8
  %14 = getelementptr inbounds %"class.blink::HeaderFieldTokenizer", %"class.blink::HeaderFieldTokenizer"* %0, i64 0, i32 1, i32 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %165, label %17

17:                                               ; preds = %2, %159
  %18 = phi %"class.WTF::StringImpl"* [ %163, %159 ], [ %15, %2 ]
  %19 = phi i32 [ %162, %159 ], [ %13, %2 ]
  %20 = phi i32 [ %161, %159 ], [ %12, %2 ]
  %21 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = icmp ult i32 %19, %22
  br i1 %23, label %24, label %165

24:                                               ; preds = %17
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load atomic i32, i32* %25 monotonic, align 4
  %27 = and i32 %26, 1
  %28 = icmp eq i32 %27, 0
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 1
  br i1 %28, label %36, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.WTF::StringImpl"* %29 to i8*
  %32 = zext i32 %19 to i64
  %33 = getelementptr inbounds i8, i8* %31, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i16
  br label %41

36:                                               ; preds = %24
  %37 = bitcast %"class.WTF::StringImpl"* %29 to i16*
  %38 = zext i32 %19 to i64
  %39 = getelementptr inbounds i16, i16* %37, i64 %38
  %40 = load i16, i16* %39, align 2
  br label %41

41:                                               ; preds = %30, %36
  %42 = phi i16 [ %35, %30 ], [ %40, %36 ]
  %43 = icmp eq i16 %42, 34
  br i1 %43, label %44, label %114

44:                                               ; preds = %41
  %45 = call %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"* nonnull %3) #8
  %46 = ptrtoint %"class.WTF::StringImpl"* %45 to i64
  %47 = bitcast %"class.WTF::String"* %1 to i64*
  %48 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %1, i64 0, i32 0, i32 0
  %49 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %48, align 8
  store i64 %46, i64* %47, align 8
  %50 = icmp eq %"class.WTF::StringImpl"* %49, null
  br i1 %50, label %64, label %51

51:                                               ; preds = %44
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %49, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = load atomic i32, i32* %52 monotonic, align 4
  %54 = and i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %49, i64 0, i32 0
  %57 = load i32, i32* %56, align 4
  br i1 %55, label %58, label %60

58:                                               ; preds = %51
  %59 = add i32 %57, -1
  store i32 %59, i32* %56, align 4
  br label %60

60:                                               ; preds = %58, %51
  %61 = phi i32 [ %59, %58 ], [ %57, %51 ]
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %60
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %49) #8
  br label %64

64:                                               ; preds = %63, %60, %44
  %65 = load i32, i32* %11, align 8
  %66 = add i32 %65, 1
  store i32 %66, i32* %11, align 8
  %67 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %68 = icmp eq %"class.WTF::StringImpl"* %67, null
  br i1 %68, label %165, label %69

69:                                               ; preds = %64
  %70 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 1
  %71 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %67, i64 1
  %73 = bitcast %"class.WTF::StringImpl"* %72 to i8*
  %74 = bitcast %"class.WTF::StringImpl"* %72 to i16*
  %75 = load i32, i32* %70, align 4
  %76 = icmp ult i32 %66, %75
  br i1 %76, label %77, label %165

77:                                               ; preds = %69
  %78 = zext i32 %66 to i64
  br label %79

79:                                               ; preds = %77, %108
  %80 = phi i64 [ %78, %77 ], [ %109, %108 ]
  %81 = load atomic i32, i32* %71 monotonic, align 4
  %82 = and i32 %81, 1
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %88, label %84

84:                                               ; preds = %79
  %85 = getelementptr inbounds i8, i8* %73, i64 %80
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i16
  br label %91

88:                                               ; preds = %79
  %89 = getelementptr inbounds i16, i16* %74, i64 %80
  %90 = load i16, i16* %89, align 2
  br label %91

91:                                               ; preds = %88, %84
  %92 = phi i16 [ %87, %84 ], [ %90, %88 ]
  %93 = icmp eq i16 %92, 32
  br i1 %93, label %108, label %94

94:                                               ; preds = %91
  %95 = load atomic i32, i32* %71 monotonic, align 4
  %96 = and i32 %95, 1
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %102, label %98

98:                                               ; preds = %94
  %99 = getelementptr inbounds i8, i8* %73, i64 %80
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i16
  br label %105

102:                                              ; preds = %94
  %103 = getelementptr inbounds i16, i16* %74, i64 %80
  %104 = load i16, i16* %103, align 2
  br label %105

105:                                              ; preds = %102, %98
  %106 = phi i16 [ %101, %98 ], [ %104, %102 ]
  %107 = icmp eq i16 %106, 9
  br i1 %107, label %108, label %165

108:                                              ; preds = %105, %91
  %109 = add nuw nsw i64 %80, 1
  %110 = trunc i64 %109 to i32
  store i32 %110, i32* %11, align 8
  %111 = load i32, i32* %70, align 4
  %112 = zext i32 %111 to i64
  %113 = icmp ult i64 %109, %112
  br i1 %113, label %79, label %165

114:                                              ; preds = %41
  %115 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %116 = load atomic i32, i32* %115 monotonic, align 4
  %117 = and i32 %116, 1
  %118 = icmp eq i32 %117, 0
  %119 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 1
  br i1 %118, label %126, label %120

120:                                              ; preds = %114
  %121 = bitcast %"class.WTF::StringImpl"* %119 to i8*
  %122 = zext i32 %19 to i64
  %123 = getelementptr inbounds i8, i8* %121, i64 %122
  %124 = load i8, i8* %123, align 1
  %125 = zext i8 %124 to i16
  br label %131

126:                                              ; preds = %114
  %127 = bitcast %"class.WTF::StringImpl"* %119 to i16*
  %128 = zext i32 %19 to i64
  %129 = getelementptr inbounds i16, i16* %127, i64 %128
  %130 = load i16, i16* %129, align 2
  br label %131

131:                                              ; preds = %120, %126
  %132 = phi i16 [ %125, %120 ], [ %130, %126 ]
  %133 = icmp eq i16 %132, 92
  br i1 %133, label %134, label %138

134:                                              ; preds = %131
  %135 = add i32 %20, 2
  store i32 %135, i32* %11, align 8
  %136 = load i32, i32* %21, align 4
  %137 = icmp ult i32 %135, %136
  br i1 %137, label %138, label %165

138:                                              ; preds = %131, %134
  %139 = phi i32 [ %22, %131 ], [ %136, %134 ]
  %140 = phi i32 [ %19, %131 ], [ %135, %134 ]
  %141 = icmp ugt i32 %139, %140
  br i1 %141, label %142, label %159

142:                                              ; preds = %138
  %143 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %144 = load atomic i32, i32* %143 monotonic, align 4
  %145 = and i32 %144, 1
  %146 = icmp eq i32 %145, 0
  %147 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %18, i64 1
  br i1 %146, label %154, label %148

148:                                              ; preds = %142
  %149 = bitcast %"class.WTF::StringImpl"* %147 to i8*
  %150 = zext i32 %140 to i64
  %151 = getelementptr inbounds i8, i8* %149, i64 %150
  %152 = load i8, i8* %151, align 1
  %153 = zext i8 %152 to i16
  br label %159

154:                                              ; preds = %142
  %155 = bitcast %"class.WTF::StringImpl"* %147 to i16*
  %156 = zext i32 %140 to i64
  %157 = getelementptr inbounds i16, i16* %155, i64 %156
  %158 = load i16, i16* %157, align 2
  br label %159

159:                                              ; preds = %138, %148, %154
  %160 = phi i16 [ 0, %138 ], [ %153, %148 ], [ %158, %154 ]
  call void @_ZN3WTF13StringBuilder6AppendEDs(%"class.WTF::StringBuilder"* nonnull %3, i16 zeroext %160)
  %161 = load i32, i32* %11, align 8
  %162 = add i32 %161, 1
  store i32 %162, i32* %11, align 8
  %163 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %164 = icmp eq %"class.WTF::StringImpl"* %163, null
  br i1 %164, label %165, label %17

165:                                              ; preds = %159, %17, %134, %108, %105, %2, %69, %64
  %166 = phi i1 [ true, %64 ], [ true, %69 ], [ false, %2 ], [ true, %105 ], [ true, %108 ], [ false, %134 ], [ false, %17 ], [ false, %159 ]
  call void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"* nonnull %3) #8
  %167 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %5, align 8
  %168 = icmp eq %"class.WTF::StringImpl"* %167, null
  br i1 %168, label %182, label %169

169:                                              ; preds = %165
  %170 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %167, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %171 = load atomic i32, i32* %170 monotonic, align 4
  %172 = and i32 %171, 2
  %173 = icmp eq i32 %172, 0
  %174 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %167, i64 0, i32 0
  %175 = load i32, i32* %174, align 4
  br i1 %173, label %176, label %178

176:                                              ; preds = %169
  %177 = add i32 %175, -1
  store i32 %177, i32* %174, align 4
  br label %178

178:                                              ; preds = %176, %169
  %179 = phi i32 [ %177, %176 ], [ %175, %169 ]
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %181, label %182

181:                                              ; preds = %178
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %167) #8
  br label %182

182:                                              ; preds = %165, %178, %181
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %4) #8
  ret i1 %166
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare %"class.WTF::StringImpl"* @_ZN3WTF13StringBuilder8ToStringEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF13StringBuilder6AppendEDs(%"class.WTF::StringBuilder"*, i16 zeroext) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca i8, align 1
  %4 = alloca i16, align 2
  store i16 %1, i16* %4, align 2
  %5 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 3
  %6 = load i8, i8* %5, align 4, !range !3
  %7 = icmp ne i8 %6, 0
  %8 = icmp ult i16 %1, 256
  %9 = and i1 %8, %7
  br i1 %9, label %10, label %35

10:                                               ; preds = %2
  %11 = trunc i16 %1 to i8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3)
  store i8 %11, i8* %3, align 1
  %12 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %13 = load i8, i8* %12, align 1, !range !3
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %15, label %16

15:                                               ; preds = %10
  tail call void @_ZN3WTF13StringBuilder13CreateBuffer8Ej(%"class.WTF::StringBuilder"* %0, i32 1) #8
  br label %16

16:                                               ; preds = %15, %10
  %17 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0
  %18 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %19, %21
  br i1 %22, label %30, label %23, !prof !2

23:                                               ; preds = %16
  %24 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %17, i64 0, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = zext i32 %19 to i64
  %27 = getelementptr inbounds i8, i8* %25, i64 %26
  store i8 %11, i8* %27, align 1
  %28 = load i32, i32* %18, align 4
  %29 = add i32 %28, 1
  store i32 %29, i32* %18, align 4
  br label %31

30:                                               ; preds = %16
  call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_(%"class.WTF::Vector"* %17, i8* nonnull dereferenceable(1) %3) #8
  br label %31

31:                                               ; preds = %23, %30
  %32 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %33 = load i32, i32* %32, align 8
  %34 = add i32 %33, 1
  store i32 %34, i32* %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3)
  br label %62

35:                                               ; preds = %2
  %36 = icmp eq i8 %6, 0
  br i1 %36, label %37, label %41

37:                                               ; preds = %35
  %38 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 4
  %39 = load i8, i8* %38, align 1, !range !3
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %37, %35
  tail call void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"* %0, i32 1) #8
  br label %42

42:                                               ; preds = %37, %41
  %43 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1
  %44 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %47 = load i32, i32* %46, align 8
  %48 = icmp eq i32 %45, %47
  br i1 %48, label %56, label %49, !prof !2

49:                                               ; preds = %42
  %50 = bitcast %union.anon* %43 to i16**
  %51 = load i16*, i16** %50, align 8
  %52 = zext i32 %45 to i64
  %53 = getelementptr inbounds i16, i16* %51, i64 %52
  store i16 %1, i16* %53, align 2
  %54 = load i32, i32* %44, align 4
  %55 = add i32 %54, 1
  store i32 %55, i32* %44, align 4
  br label %58

56:                                               ; preds = %42
  %57 = bitcast %union.anon* %43 to %"class.WTF::Vector.1"*
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.1"* %57, i16* nonnull dereferenceable(2) %4) #8
  br label %58

58:                                               ; preds = %49, %56
  %59 = getelementptr inbounds %"class.WTF::StringBuilder", %"class.WTF::StringBuilder"* %0, i64 0, i32 2
  %60 = load i32, i32* %59, align 8
  %61 = add i32 %60, 1
  store i32 %61, i32* %59, align 8
  br label %62

62:                                               ; preds = %58, %31
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink20HeaderFieldTokenizer12ConsumeTokenENS_34ParsedContentHeaderFieldParameters4ModeERN3WTF10StringViewE(%"class.blink::HeaderFieldTokenizer"* nocapture, i32, %"class.WTF::StringView"* nocapture dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.blink::HeaderFieldTokenizer", %"class.blink::HeaderFieldTokenizer"* %0, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.blink::HeaderFieldTokenizer", %"class.blink::HeaderFieldTokenizer"* %0, i64 0, i32 1, i32 0, i32 0
  %7 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %8 = icmp eq %"class.WTF::StringImpl"* %7, null
  br i1 %8, label %122, label %9

9:                                                ; preds = %3
  %10 = icmp eq i32 %1, 1
  %11 = zext i32 %5 to i64
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 1
  %15 = bitcast %"class.WTF::StringImpl"* %14 to i8*
  %16 = bitcast %"class.WTF::StringImpl"* %14 to i16*
  %17 = load i32, i32* %12, align 4
  %18 = icmp ult i32 %5, %17
  br i1 %18, label %19, label %43

19:                                               ; preds = %9, %37
  %20 = phi i64 [ %38, %37 ], [ %11, %9 ]
  %21 = load atomic i32, i32* %13 monotonic, align 4
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %28, label %24

24:                                               ; preds = %19
  %25 = getelementptr inbounds i8, i8* %15, i64 %20
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i16
  br label %31

28:                                               ; preds = %19
  %29 = getelementptr inbounds i16, i16* %16, i64 %20
  %30 = load i16, i16* %29, align 2
  br label %31

31:                                               ; preds = %24, %28
  %32 = phi i16 [ %27, %24 ], [ %30, %28 ]
  %33 = add i16 %32, -32
  %34 = icmp ugt i16 %33, 95
  br i1 %34, label %43, label %35

35:                                               ; preds = %31
  switch i16 %32, label %37 [
    i16 32, label %43
    i16 59, label %43
    i16 34, label %43
    i16 40, label %36
    i16 41, label %36
    i16 60, label %36
    i16 62, label %36
    i16 64, label %36
    i16 44, label %36
    i16 58, label %36
    i16 92, label %36
    i16 47, label %36
    i16 91, label %36
    i16 93, label %36
    i16 63, label %36
    i16 61, label %36
  ]

36:                                               ; preds = %35, %35, %35, %35, %35, %35, %35, %35, %35, %35, %35, %35, %35
  br i1 %10, label %37, label %43

37:                                               ; preds = %35, %36
  %38 = add nuw nsw i64 %20, 1
  %39 = trunc i64 %38 to i32
  store i32 %39, i32* %4, align 8
  %40 = load i32, i32* %12, align 4
  %41 = zext i32 %40 to i64
  %42 = icmp ult i64 %38, %41
  br i1 %42, label %19, label %43

43:                                               ; preds = %37, %35, %35, %35, %31, %36, %9
  %44 = phi i64 [ %11, %9 ], [ %38, %37 ], [ %20, %35 ], [ %20, %35 ], [ %20, %35 ], [ %20, %31 ], [ %20, %36 ]
  %45 = trunc i64 %44 to i32
  %46 = icmp eq i32 %5, %45
  br i1 %46, label %122, label %47

47:                                               ; preds = %43
  %48 = sub i32 %45, %5
  br i1 %8, label %65, label %49

49:                                               ; preds = %47
  %50 = ptrtoint %"class.WTF::StringImpl"* %7 to i64
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = load atomic i32, i32* %51 monotonic, align 4
  %53 = and i32 %52, 1
  %54 = icmp eq i32 %53, 0
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %7, i64 1
  br i1 %54, label %60, label %56

56:                                               ; preds = %49
  %57 = bitcast %"class.WTF::StringImpl"* %55 to i8*
  %58 = zext i32 %5 to i64
  %59 = getelementptr inbounds i8, i8* %57, i64 %58
  br label %67

60:                                               ; preds = %49
  %61 = bitcast %"class.WTF::StringImpl"* %55 to i16*
  %62 = zext i32 %5 to i64
  %63 = getelementptr inbounds i16, i16* %61, i64 %62
  %64 = bitcast i16* %63 to i8*
  br label %67

65:                                               ; preds = %47
  %66 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %67

67:                                               ; preds = %56, %60, %65
  %68 = phi i32 [ 0, %65 ], [ %48, %60 ], [ %48, %56 ]
  %69 = phi i8* [ null, %65 ], [ %64, %60 ], [ %59, %56 ]
  %70 = phi i64 [ %66, %65 ], [ %50, %60 ], [ %50, %56 ]
  %71 = bitcast %"class.WTF::StringView"* %2 to i64*
  store i64 %70, i64* %71, align 8
  %72 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %2, i64 0, i32 1
  store i8* %69, i8** %72, align 8
  %73 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %2, i64 0, i32 2
  store i32 %68, i32* %73, align 8
  %74 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %6, align 8
  %75 = icmp eq %"class.WTF::StringImpl"* %74, null
  br i1 %75, label %122, label %76

76:                                               ; preds = %67
  %77 = load i32, i32* %4, align 8
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 1
  %79 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %74, i64 1
  %81 = bitcast %"class.WTF::StringImpl"* %80 to i8*
  %82 = bitcast %"class.WTF::StringImpl"* %80 to i16*
  %83 = load i32, i32* %78, align 4
  %84 = icmp ult i32 %77, %83
  br i1 %84, label %85, label %122

85:                                               ; preds = %76
  %86 = zext i32 %77 to i64
  br label %87

87:                                               ; preds = %85, %116
  %88 = phi i64 [ %86, %85 ], [ %117, %116 ]
  %89 = load atomic i32, i32* %79 monotonic, align 4
  %90 = and i32 %89, 1
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %96, label %92

92:                                               ; preds = %87
  %93 = getelementptr inbounds i8, i8* %81, i64 %88
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i16
  br label %99

96:                                               ; preds = %87
  %97 = getelementptr inbounds i16, i16* %82, i64 %88
  %98 = load i16, i16* %97, align 2
  br label %99

99:                                               ; preds = %96, %92
  %100 = phi i16 [ %95, %92 ], [ %98, %96 ]
  %101 = icmp eq i16 %100, 32
  br i1 %101, label %116, label %102

102:                                              ; preds = %99
  %103 = load atomic i32, i32* %79 monotonic, align 4
  %104 = and i32 %103, 1
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %110, label %106

106:                                              ; preds = %102
  %107 = getelementptr inbounds i8, i8* %81, i64 %88
  %108 = load i8, i8* %107, align 1
  %109 = zext i8 %108 to i16
  br label %113

110:                                              ; preds = %102
  %111 = getelementptr inbounds i16, i16* %82, i64 %88
  %112 = load i16, i16* %111, align 2
  br label %113

113:                                              ; preds = %110, %106
  %114 = phi i16 [ %109, %106 ], [ %112, %110 ]
  %115 = icmp eq i16 %114, 9
  br i1 %115, label %116, label %122

116:                                              ; preds = %113, %99
  %117 = add nuw nsw i64 %88, 1
  %118 = trunc i64 %117 to i32
  store i32 %118, i32* %4, align 8
  %119 = load i32, i32* %78, align 4
  %120 = zext i32 %119 to i64
  %121 = icmp ult i64 %117, %120
  br i1 %121, label %87, label %122

122:                                              ; preds = %116, %113, %3, %76, %67, %43
  %123 = phi i1 [ false, %43 ], [ true, %67 ], [ true, %76 ], [ false, %3 ], [ true, %113 ], [ true, %116 ]
  ret i1 %123
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink20HeaderFieldTokenizer26ConsumeTokenOrQuotedStringENS_34ParsedContentHeaderFieldParameters4ModeERN3WTF6StringE(%"class.blink::HeaderFieldTokenizer"* nocapture, i32, %"class.WTF::String"* nocapture dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = getelementptr inbounds %"class.blink::HeaderFieldTokenizer", %"class.blink::HeaderFieldTokenizer"* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %"class.blink::HeaderFieldTokenizer", %"class.blink::HeaderFieldTokenizer"* %0, i64 0, i32 1, i32 0, i32 0
  %8 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  %9 = icmp eq %"class.WTF::StringImpl"* %8, null
  br i1 %9, label %66, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp ult i32 %6, %12
  br i1 %13, label %14, label %66

14:                                               ; preds = %10
  %15 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = load atomic i32, i32* %15 monotonic, align 4
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %8, i64 1
  br i1 %18, label %26, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.WTF::StringImpl"* %19 to i8*
  %22 = zext i32 %6 to i64
  %23 = getelementptr inbounds i8, i8* %21, i64 %22
  %24 = load i8, i8* %23, align 1
  %25 = zext i8 %24 to i16
  br label %31

26:                                               ; preds = %14
  %27 = bitcast %"class.WTF::StringImpl"* %19 to i16*
  %28 = zext i32 %6 to i64
  %29 = getelementptr inbounds i16, i16* %27, i64 %28
  %30 = load i16, i16* %29, align 2
  br label %31

31:                                               ; preds = %20, %26
  %32 = phi i16 [ %25, %20 ], [ %30, %26 ]
  %33 = icmp eq i16 %32, 34
  br i1 %33, label %34, label %36

34:                                               ; preds = %31
  %35 = tail call zeroext i1 @_ZN5blink20HeaderFieldTokenizer19ConsumeQuotedStringERN3WTF6StringE(%"class.blink::HeaderFieldTokenizer"* %0, %"class.WTF::String"* dereferenceable(8) %2)
  br label %66

36:                                               ; preds = %31
  %37 = bitcast %"class.WTF::StringView"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %37) #8
  %38 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  %39 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  %40 = bitcast %"class.WTF::StringView"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %40, i8 -86, i64 24, i1 false)
  store i32 0, i32* %39, align 8
  store i8* null, i8** %38, align 8
  %41 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %42 = bitcast %"class.WTF::StringView"* %4 to i64*
  store i64 %41, i64* %42, align 8
  %43 = call zeroext i1 @_ZN5blink20HeaderFieldTokenizer12ConsumeTokenENS_34ParsedContentHeaderFieldParameters4ModeERN3WTF10StringViewE(%"class.blink::HeaderFieldTokenizer"* %0, i32 %1, %"class.WTF::StringView"* nonnull dereferenceable(24) %4)
  br i1 %43, label %44, label %64

44:                                               ; preds = %36
  %45 = call %"class.WTF::StringImpl"* @_ZNK3WTF10StringView8ToStringEv(%"class.WTF::StringView"* nonnull %4) #8
  %46 = ptrtoint %"class.WTF::StringImpl"* %45 to i64
  %47 = bitcast %"class.WTF::String"* %2 to i64*
  %48 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %49 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %48, align 8
  store i64 %46, i64* %47, align 8
  %50 = icmp eq %"class.WTF::StringImpl"* %49, null
  br i1 %50, label %64, label %51

51:                                               ; preds = %44
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %49, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = load atomic i32, i32* %52 monotonic, align 4
  %54 = and i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %49, i64 0, i32 0
  %57 = load i32, i32* %56, align 4
  br i1 %55, label %58, label %60

58:                                               ; preds = %51
  %59 = add i32 %57, -1
  store i32 %59, i32* %56, align 4
  br label %60

60:                                               ; preds = %58, %51
  %61 = phi i32 [ %59, %58 ], [ %57, %51 ]
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %64

63:                                               ; preds = %60
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %49) #8
  br label %64

64:                                               ; preds = %44, %60, %63, %36
  %65 = phi i1 [ false, %36 ], [ true, %63 ], [ true, %60 ], [ true, %44 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %37) #8
  br label %66

66:                                               ; preds = %10, %3, %64, %34
  %67 = phi i1 [ %35, %34 ], [ %65, %64 ], [ false, %10 ], [ false, %3 ]
  ret i1 %67
}

declare %"class.WTF::StringImpl"* @_ZNK3WTF10StringView8ToStringEv(%"class.WTF::StringView"*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN5blink20HeaderFieldTokenizer25ConsumeBeforeAnyCharMatchEN3WTF6VectorIhLj0ENS1_18PartitionAllocatorEEE(%"class.blink::HeaderFieldTokenizer"* nocapture, %"class.WTF::Vector.6"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.blink::HeaderFieldTokenizer", %"class.blink::HeaderFieldTokenizer"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.blink::HeaderFieldTokenizer", %"class.blink::HeaderFieldTokenizer"* %0, i64 0, i32 1, i32 0, i32 0
  %5 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %4, align 8
  %6 = icmp eq %"class.WTF::StringImpl"* %5, null
  br i1 %6, label %52, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %1, i64 0, i32 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.WTF::Vector.6", %"class.WTF::Vector.6"* %1, i64 0, i32 0, i32 0, i32 2
  %10 = load i32, i32* %3, align 8
  %11 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %5, i64 1
  %14 = bitcast %"class.WTF::StringImpl"* %13 to i8*
  %15 = bitcast %"class.WTF::StringImpl"* %13 to i16*
  %16 = load i32, i32* %11, align 4
  %17 = icmp ult i32 %10, %16
  br i1 %17, label %18, label %52

18:                                               ; preds = %7, %48
  %19 = phi i32 [ %49, %48 ], [ %10, %7 ]
  %20 = load i8*, i8** %8, align 8
  %21 = load i32, i32* %9, align 4
  %22 = zext i32 %21 to i64
  %23 = getelementptr inbounds i8, i8* %20, i64 %22
  %24 = icmp eq i32 %21, 0
  br i1 %24, label %48, label %25

25:                                               ; preds = %18
  %26 = zext i32 %19 to i64
  %27 = getelementptr inbounds i8, i8* %14, i64 %26
  %28 = getelementptr inbounds i16, i16* %15, i64 %26
  br label %31

29:                                               ; preds = %43
  %30 = icmp eq i8* %47, %23
  br i1 %30, label %48, label %31

31:                                               ; preds = %25, %29
  %32 = phi i8* [ %20, %25 ], [ %47, %29 ]
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = load atomic i32, i32* %12 monotonic, align 4
  %36 = and i32 %35, 1
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %31
  %39 = load i8, i8* %27, align 1
  %40 = zext i8 %39 to i16
  br label %43

41:                                               ; preds = %31
  %42 = load i16, i16* %28, align 2
  br label %43

43:                                               ; preds = %38, %41
  %44 = phi i16 [ %40, %38 ], [ %42, %41 ]
  %45 = zext i16 %44 to i32
  %46 = icmp eq i32 %34, %45
  %47 = getelementptr inbounds i8, i8* %32, i64 1
  br i1 %46, label %52, label %29

48:                                               ; preds = %29, %18
  %49 = add i32 %19, 1
  store i32 %49, i32* %3, align 8
  %50 = load i32, i32* %11, align 4
  %51 = icmp ult i32 %49, %50
  br i1 %51, label %18, label %52

52:                                               ; preds = %48, %43, %7, %2
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #5

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #3

declare void @_ZN3WTF13StringBuilder13CreateBuffer8Ej(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14AppendSlowCaseIRhEEvOT_(%"class.WTF::Vector"*, i8* dereferenceable(1)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ugt i8* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i8, i8* %7, i64 %10
  %12 = icmp ugt i8* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"* %0, i32 %5) #8
  %14 = load i8*, i8** %6, align 8
  br label %21

15:                                               ; preds = %9
  %16 = ptrtoint i8* %1 to i64
  %17 = ptrtoint i8* %7 to i64
  %18 = sub i64 %16, %17
  tail call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"* %0, i32 %5) #8
  %19 = load i8*, i8** %6, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 %18
  br label %21

21:                                               ; preds = %13, %15
  %22 = phi i8* [ %14, %13 ], [ %19, %15 ]
  %23 = phi i8* [ %1, %13 ], [ %20, %15 ]
  %24 = load i32, i32* %3, align 4
  %25 = zext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %22, i64 %25
  %27 = load i8, i8* %23, align 1
  store i8 %27, i8* %26, align 1
  %28 = load i32, i32* %3, align 4
  %29 = add i32 %28, 1
  store i32 %29, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #8
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #8
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i8* %15, i8* %16) #8
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #8
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #8
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #8
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %50, !prof !4

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %34, label %49

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 16
  br i1 %35, label %36, label %43

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %37) #8
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #8
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = trunc i64 %38 to i32
  br label %47

43:                                               ; preds = %34
  %44 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %45 = ptrtoint i8* %44 to i64
  %46 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %45, i64* %46 monotonic, align 8
  br label %47

47:                                               ; preds = %43, %36
  %48 = phi i32 [ 16, %43 ], [ %42, %36 ]
  store i32 %48, i32* %6, align 8
  br label %50

49:                                               ; preds = %30
  call void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %27) #8
  br label %50

50:                                               ; preds = %23, %47, %49
  ret void
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #3

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #7

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #3

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIhLj16ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ult i32 %1, 17
  br i1 %3, label %4, label %26

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = icmp eq i8* %8, %6
  %10 = or i1 %7, %9
  br i1 %10, label %11, label %15

11:                                               ; preds = %4
  %12 = ptrtoint i8* %8 to i64
  %13 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %12, i64* %13 monotonic, align 8
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 16, i32* %14, align 8
  br label %51

15:                                               ; preds = %4
  %16 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0
  %19 = ptrtoint i8* %8 to i64
  %20 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %19, i64* %20 monotonic, align 8
  %21 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 16, i32* %21, align 8
  %22 = icmp eq i8* %8, null
  br i1 %22, label %25, label %23, !prof !2

23:                                               ; preds = %15
  %24 = zext i32 %17 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %8, i8* nonnull align 1 %6, i64 %24, i1 false) #8
  br label %25

25:                                               ; preds = %23, %15
  tail call void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer"* %18, i8* nonnull %6) #8
  br label %51

26:                                               ; preds = %2
  %27 = zext i32 %1 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64 %27) #8
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIhEEPKcv, i64 0, i64 0)) #8
  %30 = ptrtoint i8* %29 to i64
  %31 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp ne i8* %29, null
  %34 = icmp ne i8* %32, null
  %35 = and i1 %33, %34
  br i1 %35, label %36, label %41, !prof !4

36:                                               ; preds = %26
  %37 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %38 = load i32, i32* %37, align 4
  %39 = zext i32 %38 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %29, i8* nonnull align 1 %32, i64 %39, i1 false) #8
  %40 = load i8*, i8** %31, align 8
  br label %41

41:                                               ; preds = %26, %36
  %42 = phi i8* [ %32, %26 ], [ %40, %36 ]
  %43 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 1, i64 0
  %44 = icmp eq i8* %43, %42
  br i1 %44, label %47, label %45, !prof !4

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer"* %46, i8* %42) #8
  br label %47

47:                                               ; preds = %41, %45
  %48 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %48 monotonic, align 8
  %49 = trunc i64 %28 to i32
  %50 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %49, i32* %50, align 8
  br label %51

51:                                               ; preds = %25, %47, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIhEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #8
  ret i64 %20
}

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #3

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #3

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIhLj16ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPh(%"class.WTF::VectorBuffer"*, i8*) local_unnamed_addr #6 comdat align 2 {
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %1) #8
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #3

declare void @_ZN3WTF13StringBuilder14CreateBuffer16Ej(%"class.WTF::StringBuilder"*, i32) local_unnamed_addr #3

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14AppendSlowCaseIRDsEEvOT_(%"class.WTF::Vector.1"*, i16* dereferenceable(2)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load i16*, i16** %6, align 8
  %8 = icmp ugt i16* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds i16, i16* %7, i64 %10
  %12 = icmp ugt i16* %11, %1
  br i1 %12, label %15, label %13

13:                                               ; preds = %9, %2
  tail call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.1"* %0, i32 %5) #8
  %14 = load i16*, i16** %6, align 8
  br label %22

15:                                               ; preds = %9
  %16 = ptrtoint i16* %1 to i64
  %17 = ptrtoint i16* %7 to i64
  %18 = sub i64 %16, %17
  %19 = ashr exact i64 %18, 1
  tail call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.1"* %0, i32 %5) #8
  %20 = load i16*, i16** %6, align 8
  %21 = getelementptr inbounds i16, i16* %20, i64 %19
  br label %22

22:                                               ; preds = %13, %15
  %23 = phi i16* [ %14, %13 ], [ %20, %15 ]
  %24 = phi i16* [ %1, %13 ], [ %21, %15 ]
  %25 = load i32, i32* %3, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i16, i16* %23, i64 %26
  %28 = load i16, i16* %24, align 2
  store i16 %28, i16* %27, align 2
  %29 = load i32, i32* %3, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %3, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE14ExpandCapacityEj(%"class.WTF::Vector.1"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = shl i32 %7, 1
  %9 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #8
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i32 %8, %7
  br i1 %12, label %13, label %14

13:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %10, align 8
  br label %23

14:                                               ; preds = %2
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %8) #8
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %7) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i8* %15, i8* %16) #8
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %10, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1715, %"class.logging::CheckOpResult"* nonnull %4) #8
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #8
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #8
  %24 = icmp ugt i32 %8, 4
  %25 = select i1 %24, i32 %8, i32 4
  %26 = icmp ugt i32 %25, %1
  %27 = select i1 %26, i32 %25, i32 %1
  %28 = load i32, i32* %6, align 8
  %29 = icmp ult i32 %28, %27
  br i1 %29, label %30, label %51, !prof !4

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i16*, i16** %31, align 8
  %33 = icmp eq i16* %32, null
  br i1 %33, label %34, label %50

34:                                               ; preds = %30
  %35 = icmp ugt i32 %27, 8
  br i1 %35, label %36, label %44

36:                                               ; preds = %34
  %37 = zext i32 %27 to i64
  %38 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %37) #8
  %39 = call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %38, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #8
  %40 = ptrtoint i8* %39 to i64
  %41 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %40, i64* %41 monotonic, align 8
  %42 = lshr i64 %38, 1
  %43 = trunc i64 %42 to i32
  br label %48

44:                                               ; preds = %34
  %45 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 1, i64 0
  %46 = ptrtoint i8* %45 to i64
  %47 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %46, i64* %47 monotonic, align 8
  br label %48

48:                                               ; preds = %44, %36
  %49 = phi i32 [ 8, %44 ], [ %43, %36 ]
  store i32 %49, i32* %6, align 8
  br label %51

50:                                               ; preds = %30
  call void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.1"* %0, i32 %27) #8
  br label %51

51:                                               ; preds = %23, %48, %50
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIDsLj8ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector.1"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp ult i32 %1, 9
  br i1 %3, label %4, label %29

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load i16*, i16** %5, align 8
  %7 = icmp eq i16* %6, null
  %8 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 1, i64 0
  %9 = bitcast i8* %8 to i16*
  %10 = icmp eq i16* %6, %9
  %11 = or i1 %10, %7
  br i1 %11, label %12, label %16

12:                                               ; preds = %4
  %13 = ptrtoint i8* %8 to i64
  %14 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %13, i64* %14 monotonic, align 8
  %15 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %15, align 8
  br label %58

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 2
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0
  %20 = ptrtoint i8* %8 to i64
  %21 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %20, i64* %21 monotonic, align 8
  %22 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 8, i32* %22, align 8
  %23 = icmp eq i8* %8, null
  br i1 %23, label %28, label %24, !prof !2

24:                                               ; preds = %16
  %25 = zext i32 %18 to i64
  %26 = bitcast i16* %6 to i8*
  %27 = shl nuw nsw i64 %25, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %8, i8* nonnull align 2 %26, i64 %27, i1 false) #8
  br label %28

28:                                               ; preds = %24, %16
  tail call void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.2"* %19, i16* nonnull %6) #8
  br label %58

29:                                               ; preds = %2
  %30 = zext i32 %1 to i64
  %31 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64 %30) #8
  %32 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %31, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIDsEEPKcv, i64 0, i64 0)) #8
  %33 = lshr i64 %31, 1
  %34 = ptrtoint i8* %32 to i64
  %35 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 0
  %36 = load i16*, i16** %35, align 8
  %37 = icmp ne i8* %32, null
  %38 = icmp ne i16* %36, null
  %39 = and i1 %37, %38
  br i1 %39, label %40, label %47, !prof !4

40:                                               ; preds = %29
  %41 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = bitcast i16* %36 to i8*
  %45 = shl nuw nsw i64 %43, 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 2 %32, i8* nonnull align 2 %44, i64 %45, i1 false) #8
  %46 = load i16*, i16** %35, align 8
  br label %47

47:                                               ; preds = %29, %40
  %48 = phi i16* [ %36, %29 ], [ %46, %40 ]
  %49 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 1, i64 0
  %50 = bitcast i8* %49 to i16*
  %51 = icmp eq i16* %48, %50
  br i1 %51, label %54, label %52, !prof !4

52:                                               ; preds = %47
  %53 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0
  tail call void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.2"* %53, i16* %48) #8
  br label %54

54:                                               ; preds = %47, %52
  %55 = bitcast %"class.WTF::Vector.1"* %0 to i64*
  store atomic i64 %34, i64* %55 monotonic, align 8
  %56 = trunc i64 %33 to i32
  %57 = getelementptr inbounds %"class.WTF::Vector.1", %"class.WTF::Vector.1"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %56, i32* %57, align 8
  br label %58

58:                                               ; preds = %28, %54, %12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIDsEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #8
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 1072693248
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #8
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 1072693248) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0), i8* %11, i8* %12) #8
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.4, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #8
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #8
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #8
  %20 = shl i64 %0, 1
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #8
  ret i64 %21
}

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIDsLj8ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPDs(%"class.WTF::VectorBuffer.2"*, i16*) local_unnamed_addr #6 comdat align 2 {
  %3 = bitcast i16* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #8
  ret void
}

declare void @_ZN3WTF13StringBuilder5ClearEv(%"class.WTF::StringBuilder"*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { cold noreturn nounwind }
attributes #6 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 2000, i32 1}
