; ModuleID = '../../third_party/webrtc/modules/audio_processing/aec3/reverb_model_estimator.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/aec3/reverb_model_estimator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.webrtc::ReverbModelEstimator" = type { %"class.std::__1::vector", %"class.std::__1::vector.11" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"*, %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.webrtc::ReverbDecayEstimator"* }
%"class.webrtc::ReverbDecayEstimator" = type <{ i32, i32, i8, [3 x i8], %"class.webrtc::ReverbDecayEstimator::LateReverbLinearRegressor", %"class.webrtc::ReverbDecayEstimator::EarlyReverbLengthEstimator", i32, i32, i32, i32, i8, [7 x i8], %"class.std::__1::vector.0", float, float, float, [4 x i8] }>
%"class.webrtc::ReverbDecayEstimator::LateReverbLinearRegressor" = type { float, float, float, i32, i32 }
%"class.webrtc::ReverbDecayEstimator::EarlyReverbLengthEstimator" = type <{ %"class.std::__1::vector.0", %"class.std::__1::vector.0", i32, i32, i32, [4 x i8] }>
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { float*, float*, %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { float* }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.std::__1::unique_ptr"* }
%"class.std::__1::vector.11" = type { %"class.std::__1::__vector_base.12" }
%"class.std::__1::__vector_base.12" = type { %"class.webrtc::ReverbFrequencyResponse"*, %"class.webrtc::ReverbFrequencyResponse"*, %"class.std::__1::__compressed_pair.13" }
%"class.webrtc::ReverbFrequencyResponse" = type { float, %"struct.std::__1::array" }
%"struct.std::__1::array" = type { [65 x float] }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.webrtc::ReverbFrequencyResponse"* }
%"struct.webrtc::EchoCanceller3Config" = type { %"struct.webrtc::EchoCanceller3Config::Buffering", %"struct.webrtc::EchoCanceller3Config::Delay", %"struct.webrtc::EchoCanceller3Config::Filter", %"struct.webrtc::EchoCanceller3Config::Erle", %"struct.webrtc::EchoCanceller3Config::EpStrength", %"struct.webrtc::EchoCanceller3Config::EchoAudibility", %"struct.webrtc::EchoCanceller3Config::RenderLevels", %"struct.webrtc::EchoCanceller3Config::EchoRemovalControl", [6 x i8], %"struct.webrtc::EchoCanceller3Config::EchoModel", %"struct.webrtc::EchoCanceller3Config::ComfortNoise", [4 x i8], %"struct.webrtc::EchoCanceller3Config::Suppressor" }
%"struct.webrtc::EchoCanceller3Config::Buffering" = type { i64, i64 }
%"struct.webrtc::EchoCanceller3Config::Delay" = type { i64, i64, i64, i64, i64, i64, float, float, float, %"struct.webrtc::EchoCanceller3Config::Delay::DelaySelectionThresholds", i8, i8, %"struct.webrtc::EchoCanceller3Config::Delay::AlignmentMixing", %"struct.webrtc::EchoCanceller3Config::Delay::AlignmentMixing" }
%"struct.webrtc::EchoCanceller3Config::Delay::DelaySelectionThresholds" = type { i32, i32 }
%"struct.webrtc::EchoCanceller3Config::Delay::AlignmentMixing" = type { i8, i8, float, i8 }
%"struct.webrtc::EchoCanceller3Config::Filter" = type <{ %"struct.webrtc::EchoCanceller3Config::Filter::RefinedConfiguration", %"struct.webrtc::EchoCanceller3Config::Filter::CoarseConfiguration", %"struct.webrtc::EchoCanceller3Config::Filter::RefinedConfiguration", %"struct.webrtc::EchoCanceller3Config::Filter::CoarseConfiguration", i64, float, i32, i8, i8, i8, i8, i8, [3 x i8] }>
%"struct.webrtc::EchoCanceller3Config::Filter::RefinedConfiguration" = type { i64, float, float, float, float, float }
%"struct.webrtc::EchoCanceller3Config::Filter::CoarseConfiguration" = type { i64, float, float }
%"struct.webrtc::EchoCanceller3Config::Erle" = type <{ float, float, float, i8, [3 x i8], i64, i8, i8, [6 x i8] }>
%"struct.webrtc::EchoCanceller3Config::EpStrength" = type <{ float, float, i8, i8, i8, i8 }>
%"struct.webrtc::EchoCanceller3Config::EchoAudibility" = type <{ float, float, float, float, float, float, i8, i8, [2 x i8] }>
%"struct.webrtc::EchoCanceller3Config::RenderLevels" = type { float, float, float, float }
%"struct.webrtc::EchoCanceller3Config::EchoRemovalControl" = type { i8, i8 }
%"struct.webrtc::EchoCanceller3Config::EchoModel" = type <{ i64, float, float, float, float, i64, i64, i8, [7 x i8] }>
%"struct.webrtc::EchoCanceller3Config::ComfortNoise" = type { float }
%"struct.webrtc::EchoCanceller3Config::Suppressor" = type <{ i64, %"struct.webrtc::EchoCanceller3Config::Suppressor::Tuning", %"struct.webrtc::EchoCanceller3Config::Suppressor::Tuning", %"struct.webrtc::EchoCanceller3Config::Suppressor::DominantNearendDetection", %"struct.webrtc::EchoCanceller3Config::Suppressor::SubbandNearendDetection", i8, [3 x i8], %"struct.webrtc::EchoCanceller3Config::Suppressor::HighBandsSuppression", float, i8, [7 x i8] }>
%"struct.webrtc::EchoCanceller3Config::Suppressor::Tuning" = type { %"struct.webrtc::EchoCanceller3Config::Suppressor::MaskingThresholds", %"struct.webrtc::EchoCanceller3Config::Suppressor::MaskingThresholds", float, float }
%"struct.webrtc::EchoCanceller3Config::Suppressor::MaskingThresholds" = type { float, float, float }
%"struct.webrtc::EchoCanceller3Config::Suppressor::DominantNearendDetection" = type <{ float, float, float, i32, i32, i8, [3 x i8] }>
%"struct.webrtc::EchoCanceller3Config::Suppressor::SubbandNearendDetection" = type { i64, %"struct.webrtc::EchoCanceller3Config::Suppressor::SubbandNearendDetection::SubbandRegion", %"struct.webrtc::EchoCanceller3Config::Suppressor::SubbandNearendDetection::SubbandRegion", float, float }
%"struct.webrtc::EchoCanceller3Config::Suppressor::SubbandNearendDetection::SubbandRegion" = type { i64, i64 }
%"struct.webrtc::EchoCanceller3Config::Suppressor::HighBandsSuppression" = type { float, float, float, float }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { %"struct.std::__1::array"*, %"struct.std::__1::array"*, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"struct.std::__1::array"* }
%"class.rtc::ArrayView.21" = type { %"class.rtc::impl::ArrayViewBase.22" }
%"class.rtc::impl::ArrayViewBase.22" = type { %"class.absl::optional"*, i64 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { float }
%"class.rtc::ArrayView.23" = type { %"class.rtc::impl::ArrayViewBase.24" }
%"class.rtc::impl::ArrayViewBase.24" = type { i32*, i64 }
%"class.std::__1::vector.25" = type { i64*, i64, %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { i64 }

@_ZN6webrtc20ReverbModelEstimatorC1ERKNS_20EchoCanceller3ConfigEm = hidden unnamed_addr alias void (%"class.webrtc::ReverbModelEstimator"*, %"struct.webrtc::EchoCanceller3Config"*, i64), void (%"class.webrtc::ReverbModelEstimator"*, %"struct.webrtc::EchoCanceller3Config"*, i64)* @_ZN6webrtc20ReverbModelEstimatorC2ERKNS_20EchoCanceller3ConfigEm
@_ZN6webrtc20ReverbModelEstimatorD1Ev = hidden unnamed_addr alias void (%"class.webrtc::ReverbModelEstimator"*), void (%"class.webrtc::ReverbModelEstimator"*)* @_ZN6webrtc20ReverbModelEstimatorD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc20ReverbModelEstimatorC2ERKNS_20EchoCanceller3ConfigEm(%"class.webrtc::ReverbModelEstimator"*, %"struct.webrtc::EchoCanceller3Config"* dereferenceable(560), i64) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.webrtc::ReverbModelEstimator"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #7
  %5 = icmp eq i64 %2, 0
  br i1 %5, label %6, label %9

6:                                                ; preds = %3
  %7 = getelementptr inbounds %"class.webrtc::ReverbModelEstimator", %"class.webrtc::ReverbModelEstimator"* %0, i64 0, i32 1
  %8 = bitcast %"class.std::__1::vector.11"* %7 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %8, i8 0, i64 24, i1 false) #7
  br label %59

9:                                                ; preds = %3
  %10 = icmp ugt i64 %2, 2305843009213693951
  br i1 %10, label %11, label %13

11:                                               ; preds = %9
  %12 = bitcast %"class.webrtc::ReverbModelEstimator"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %12) #8
  unreachable

13:                                               ; preds = %9
  %14 = shl i64 %2, 3
  %15 = tail call i8* @_Znwm(i64 %14) #9
  %16 = bitcast i8* %15 to %"class.std::__1::unique_ptr"*
  %17 = getelementptr inbounds %"class.webrtc::ReverbModelEstimator", %"class.webrtc::ReverbModelEstimator"* %0, i64 0, i32 0, i32 0, i32 1
  %18 = bitcast %"class.webrtc::ReverbModelEstimator"* %0 to i8**
  store i8* %15, i8** %18, align 8
  %19 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %16, i64 %2
  %20 = getelementptr inbounds %"class.webrtc::ReverbModelEstimator", %"class.webrtc::ReverbModelEstimator"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store %"class.std::__1::unique_ptr"* %19, %"class.std::__1::unique_ptr"** %20, align 8
  %21 = bitcast %"class.std::__1::unique_ptr"** %17 to i64*
  %22 = ptrtoint i8* %15 to i64
  %23 = add nsw i64 %2, -1
  %24 = getelementptr %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %16, i64 %23, i32 0, i32 0, i32 0
  %25 = ptrtoint %"class.webrtc::ReverbDecayEstimator"** %24 to i64
  %26 = sub i64 8, %22
  %27 = add i64 %26, %25
  %28 = and i64 %27, -8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 0, i64 %28, i1 false) #7
  %29 = ptrtoint %"class.std::__1::unique_ptr"* %19 to i64
  store i64 %29, i64* %21, align 8
  %30 = getelementptr inbounds %"class.webrtc::ReverbModelEstimator", %"class.webrtc::ReverbModelEstimator"* %0, i64 0, i32 1
  %31 = bitcast %"class.std::__1::vector.11"* %30 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 24, i1 false) #7
  %32 = icmp ugt i64 %2, 69874030582233150
  br i1 %32, label %33, label %35

33:                                               ; preds = %13
  %34 = bitcast %"class.std::__1::vector.11"* %30 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %34) #8
  unreachable

35:                                               ; preds = %13
  %36 = mul i64 %2, 264
  %37 = tail call i8* @_Znwm(i64 %36) #9
  %38 = bitcast i8* %37 to %"class.webrtc::ReverbFrequencyResponse"*
  %39 = getelementptr inbounds %"class.webrtc::ReverbModelEstimator", %"class.webrtc::ReverbModelEstimator"* %0, i64 0, i32 1, i32 0, i32 1
  %40 = bitcast %"class.webrtc::ReverbFrequencyResponse"** %39 to i8**
  store i8* %37, i8** %40, align 8
  %41 = bitcast %"class.std::__1::vector.11"* %30 to i8**
  store i8* %37, i8** %41, align 8
  %42 = getelementptr inbounds %"class.webrtc::ReverbFrequencyResponse", %"class.webrtc::ReverbFrequencyResponse"* %38, i64 %2
  %43 = getelementptr inbounds %"class.webrtc::ReverbModelEstimator", %"class.webrtc::ReverbModelEstimator"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  store %"class.webrtc::ReverbFrequencyResponse"* %42, %"class.webrtc::ReverbFrequencyResponse"** %43, align 8
  br label %44

44:                                               ; preds = %44, %35
  %45 = phi %"class.webrtc::ReverbFrequencyResponse"* [ %46, %44 ], [ %38, %35 ]
  tail call void @_ZN6webrtc23ReverbFrequencyResponseC1Ev(%"class.webrtc::ReverbFrequencyResponse"* %45) #7
  %46 = getelementptr inbounds %"class.webrtc::ReverbFrequencyResponse", %"class.webrtc::ReverbFrequencyResponse"* %45, i64 1
  %47 = icmp eq %"class.webrtc::ReverbFrequencyResponse"* %46, %42
  br i1 %47, label %48, label %44

48:                                               ; preds = %44
  %49 = bitcast %"class.webrtc::ReverbFrequencyResponse"** %39 to i64*
  %50 = ptrtoint %"class.webrtc::ReverbFrequencyResponse"* %42 to i64
  store i64 %50, i64* %49, align 8
  %51 = load i64, i64* %21, align 8
  %52 = bitcast %"class.webrtc::ReverbModelEstimator"* %0 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %"class.webrtc::ReverbModelEstimator", %"class.webrtc::ReverbModelEstimator"* %0, i64 0, i32 0, i32 0, i32 1
  %55 = bitcast %"class.std::__1::unique_ptr"** %54 to i64*
  %56 = icmp eq i64 %51, %53
  br i1 %56, label %59, label %57

57:                                               ; preds = %48
  %58 = getelementptr inbounds %"class.webrtc::ReverbModelEstimator", %"class.webrtc::ReverbModelEstimator"* %0, i64 0, i32 0, i32 0, i32 0
  br label %60

59:                                               ; preds = %73, %6, %48
  ret void

60:                                               ; preds = %57, %73
  %61 = phi i64 [ 0, %57 ], [ %74, %73 ]
  %62 = tail call i8* @_Znwm(i64 160) #9
  %63 = bitcast i8* %62 to %"class.webrtc::ReverbDecayEstimator"*
  tail call void @_ZN6webrtc20ReverbDecayEstimatorC1ERKNS_20EchoCanceller3ConfigE(%"class.webrtc::ReverbDecayEstimator"* nonnull %63, %"struct.webrtc::EchoCanceller3Config"* dereferenceable(560) %1) #7
  %64 = ptrtoint i8* %62 to i64
  %65 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %58, align 8
  %66 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %65, i64 %61
  %67 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %66, i64 0, i32 0, i32 0, i32 0
  %68 = load %"class.webrtc::ReverbDecayEstimator"*, %"class.webrtc::ReverbDecayEstimator"** %67, align 8
  %69 = bitcast %"class.std::__1::unique_ptr"* %66 to i64*
  store i64 %64, i64* %69, align 8
  %70 = icmp eq %"class.webrtc::ReverbDecayEstimator"* %68, null
  br i1 %70, label %73, label %71

71:                                               ; preds = %60
  tail call void @_ZN6webrtc20ReverbDecayEstimatorD1Ev(%"class.webrtc::ReverbDecayEstimator"* nonnull %68) #7
  %72 = bitcast %"class.webrtc::ReverbDecayEstimator"* %68 to i8*
  tail call void @_ZdlPv(i8* %72) #9
  br label %73

73:                                               ; preds = %71, %60
  %74 = add nuw i64 %61, 1
  %75 = load i64, i64* %55, align 8
  %76 = load i64, i64* %52, align 8
  %77 = sub i64 %75, %76
  %78 = ashr exact i64 %77, 3
  %79 = icmp ult i64 %74, %78
  br i1 %79, label %60, label %59
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc20ReverbModelEstimatorD2Ev(%"class.webrtc::ReverbModelEstimator"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.webrtc::ReverbModelEstimator", %"class.webrtc::ReverbModelEstimator"* %0, i64 0, i32 1
  %3 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.webrtc::ReverbFrequencyResponse"*, %"class.webrtc::ReverbFrequencyResponse"** %3, align 8
  %5 = icmp eq %"class.webrtc::ReverbFrequencyResponse"* %4, null
  br i1 %5, label %20, label %6

6:                                                ; preds = %1
  %7 = bitcast %"class.webrtc::ReverbFrequencyResponse"* %4 to i8*
  %8 = getelementptr inbounds %"class.webrtc::ReverbModelEstimator", %"class.webrtc::ReverbModelEstimator"* %0, i64 0, i32 1, i32 0, i32 1
  %9 = load %"class.webrtc::ReverbFrequencyResponse"*, %"class.webrtc::ReverbFrequencyResponse"** %8, align 8
  %10 = icmp eq %"class.webrtc::ReverbFrequencyResponse"* %9, %4
  br i1 %10, label %18, label %11

11:                                               ; preds = %6, %11
  %12 = phi %"class.webrtc::ReverbFrequencyResponse"* [ %13, %11 ], [ %9, %6 ]
  %13 = getelementptr inbounds %"class.webrtc::ReverbFrequencyResponse", %"class.webrtc::ReverbFrequencyResponse"* %12, i64 -1
  tail call void @_ZN6webrtc23ReverbFrequencyResponseD1Ev(%"class.webrtc::ReverbFrequencyResponse"* %13) #7
  %14 = icmp eq %"class.webrtc::ReverbFrequencyResponse"* %13, %4
  br i1 %14, label %15, label %11

15:                                               ; preds = %11
  %16 = bitcast %"class.std::__1::vector.11"* %2 to i8**
  %17 = load i8*, i8** %16, align 8
  br label %18

18:                                               ; preds = %15, %6
  %19 = phi i8* [ %17, %15 ], [ %7, %6 ]
  store %"class.webrtc::ReverbFrequencyResponse"* %4, %"class.webrtc::ReverbFrequencyResponse"** %8, align 8
  tail call void @_ZdlPv(i8* %19) #9
  br label %20

20:                                               ; preds = %1, %18
  %21 = getelementptr inbounds %"class.webrtc::ReverbModelEstimator", %"class.webrtc::ReverbModelEstimator"* %0, i64 0, i32 0, i32 0, i32 0
  %22 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %21, align 8
  %23 = icmp eq %"class.std::__1::unique_ptr"* %22, null
  br i1 %23, label %44, label %24

24:                                               ; preds = %20
  %25 = bitcast %"class.std::__1::unique_ptr"* %22 to i8*
  %26 = getelementptr inbounds %"class.webrtc::ReverbModelEstimator", %"class.webrtc::ReverbModelEstimator"* %0, i64 0, i32 0, i32 0, i32 1
  %27 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %26, align 8
  %28 = icmp eq %"class.std::__1::unique_ptr"* %27, %22
  br i1 %28, label %42, label %29

29:                                               ; preds = %24, %37
  %30 = phi %"class.std::__1::unique_ptr"* [ %31, %37 ], [ %27, %24 ]
  %31 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %30, i64 -1
  %32 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %31, i64 0, i32 0, i32 0, i32 0
  %33 = load %"class.webrtc::ReverbDecayEstimator"*, %"class.webrtc::ReverbDecayEstimator"** %32, align 8
  store %"class.webrtc::ReverbDecayEstimator"* null, %"class.webrtc::ReverbDecayEstimator"** %32, align 8
  %34 = icmp eq %"class.webrtc::ReverbDecayEstimator"* %33, null
  br i1 %34, label %37, label %35

35:                                               ; preds = %29
  tail call void @_ZN6webrtc20ReverbDecayEstimatorD1Ev(%"class.webrtc::ReverbDecayEstimator"* nonnull %33) #7
  %36 = bitcast %"class.webrtc::ReverbDecayEstimator"* %33 to i8*
  tail call void @_ZdlPv(i8* %36) #9
  br label %37

37:                                               ; preds = %35, %29
  %38 = icmp eq %"class.std::__1::unique_ptr"* %31, %22
  br i1 %38, label %39, label %29

39:                                               ; preds = %37
  %40 = bitcast %"class.webrtc::ReverbModelEstimator"* %0 to i8**
  %41 = load i8*, i8** %40, align 8
  br label %42

42:                                               ; preds = %39, %24
  %43 = phi i8* [ %41, %39 ], [ %25, %24 ]
  store %"class.std::__1::unique_ptr"* %22, %"class.std::__1::unique_ptr"** %26, align 8
  tail call void @_ZdlPv(i8* %43) #9
  br label %44

44:                                               ; preds = %20, %42
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc20ReverbModelEstimator6UpdateEN3rtc9ArrayViewIKNSt3__16vectorIfNS3_9allocatorIfEEEELln4711EEENS2_IKNS4_INS3_5arrayIfLm65EEENS5_ISB_EEEELln4711EEENS2_IKN4absl8optionalIfEELln4711EEENS2_IKiLln4711EEERKNS4_IbNS5_IbEEEEb(%"class.webrtc::ReverbModelEstimator"* nocapture readonly, %"class.std::__1::vector.0"*, i64, %"class.std::__1::vector.20"*, i64, %"class.rtc::ArrayView.21"* nocapture readonly byval(%"class.rtc::ArrayView.21") align 8, %"class.rtc::ArrayView.23"* nocapture readonly byval(%"class.rtc::ArrayView.23") align 8, %"class.std::__1::vector.25"* nocapture readonly dereferenceable(24), i1 zeroext) local_unnamed_addr #0 align 2 {
  %10 = getelementptr inbounds %"class.webrtc::ReverbModelEstimator", %"class.webrtc::ReverbModelEstimator"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = bitcast %"class.std::__1::unique_ptr"** %10 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.webrtc::ReverbModelEstimator"* %0 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %12, %14
  %16 = ashr exact i64 %15, 3
  %17 = icmp eq i64 %15, 0
  br i1 %17, label %26, label %18

18:                                               ; preds = %9
  %19 = getelementptr inbounds %"class.webrtc::ReverbModelEstimator", %"class.webrtc::ReverbModelEstimator"* %0, i64 0, i32 1, i32 0, i32 0
  %20 = getelementptr inbounds %"class.rtc::ArrayView.23", %"class.rtc::ArrayView.23"* %6, i64 0, i32 0, i32 0
  %21 = load i32*, i32** %20, align 8
  %22 = getelementptr inbounds %"class.rtc::ArrayView.21", %"class.rtc::ArrayView.21"* %5, i64 0, i32 0, i32 0
  %23 = load %"class.absl::optional"*, %"class.absl::optional"** %22, align 8
  %24 = getelementptr inbounds %"class.webrtc::ReverbModelEstimator", %"class.webrtc::ReverbModelEstimator"* %0, i64 0, i32 0, i32 0, i32 0
  %25 = getelementptr inbounds %"class.std::__1::vector.25", %"class.std::__1::vector.25"* %7, i64 0, i32 0
  br label %27

26:                                               ; preds = %27, %9
  ret void

27:                                               ; preds = %18, %27
  %28 = phi i64 [ 0, %18 ], [ %57, %27 ]
  %29 = load %"class.webrtc::ReverbFrequencyResponse"*, %"class.webrtc::ReverbFrequencyResponse"** %19, align 8
  %30 = getelementptr inbounds %"class.webrtc::ReverbFrequencyResponse", %"class.webrtc::ReverbFrequencyResponse"* %29, i64 %28
  %31 = getelementptr inbounds %"class.std::__1::vector.20", %"class.std::__1::vector.20"* %3, i64 %28
  %32 = getelementptr inbounds i32, i32* %21, i64 %28
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %23, i64 %28
  tail call void @_ZN6webrtc23ReverbFrequencyResponse6UpdateERKNSt3__16vectorINS1_5arrayIfLm65EEENS1_9allocatorIS4_EEEEiRKN4absl8optionalIfEEb(%"class.webrtc::ReverbFrequencyResponse"* %30, %"class.std::__1::vector.20"* %31, i32 %33, %"class.absl::optional"* %34, i1 zeroext %8) #7
  %35 = load %"class.std::__1::unique_ptr"*, %"class.std::__1::unique_ptr"** %24, align 8
  %36 = getelementptr inbounds %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr"* %35, i64 %28, i32 0, i32 0, i32 0
  %37 = load %"class.webrtc::ReverbDecayEstimator"*, %"class.webrtc::ReverbDecayEstimator"** %36, align 8
  %38 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1, i64 %28, i32 0, i32 0
  %39 = load float*, float** %38, align 8
  %40 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1, i64 %28, i32 0, i32 1
  %41 = bitcast float** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = ptrtoint float* %39 to i64
  %44 = sub i64 %42, %43
  %45 = ashr exact i64 %44, 2
  %46 = icmp eq i64 %44, 0
  %47 = select i1 %46, float* null, float* %39
  %48 = load i32, i32* %32, align 4
  %49 = load i64*, i64** %25, align 8
  %50 = lshr i64 %28, 6
  %51 = getelementptr inbounds i64, i64* %49, i64 %50
  %52 = and i64 %28, 63
  %53 = shl i64 1, %52
  %54 = load i64, i64* %51, align 8
  %55 = and i64 %54, %53
  %56 = icmp ne i64 %55, 0
  tail call void @_ZN6webrtc20ReverbDecayEstimator6UpdateEN3rtc9ArrayViewIKfLln4711EEERKN4absl8optionalIfEEibb(%"class.webrtc::ReverbDecayEstimator"* %37, float* %47, i64 %45, %"class.absl::optional"* %34, i32 %48, i1 zeroext %56, i1 zeroext %8) #7
  %57 = add nuw i64 %28, 1
  %58 = icmp ult i64 %57, %16
  br i1 %58, label %27, label %26
}

declare void @_ZN6webrtc23ReverbFrequencyResponse6UpdateERKNSt3__16vectorINS1_5arrayIfLm65EEENS1_9allocatorIS4_EEEEiRKN4absl8optionalIfEEb(%"class.webrtc::ReverbFrequencyResponse"*, %"class.std::__1::vector.20"*, i32, %"class.absl::optional"*, i1 zeroext) local_unnamed_addr #1

declare void @_ZN6webrtc20ReverbDecayEstimator6UpdateEN3rtc9ArrayViewIKfLln4711EEERKN4absl8optionalIfEEibb(%"class.webrtc::ReverbDecayEstimator"*, float*, i64, %"class.absl::optional"*, i32, i1 zeroext, i1 zeroext) local_unnamed_addr #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

declare void @_ZN6webrtc23ReverbFrequencyResponseC1Ev(%"class.webrtc::ReverbFrequencyResponse"*) unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN6webrtc23ReverbFrequencyResponseD1Ev(%"class.webrtc::ReverbFrequencyResponse"*) unnamed_addr #5

declare void @_ZN6webrtc20ReverbDecayEstimatorC1ERKNS_20EchoCanceller3ConfigE(%"class.webrtc::ReverbDecayEstimator"*, %"struct.webrtc::EchoCanceller3Config"* dereferenceable(560)) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN6webrtc20ReverbDecayEstimatorD1Ev(%"class.webrtc::ReverbDecayEstimator"*) unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind }
attributes #8 = { noreturn nounwind }
attributes #9 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
