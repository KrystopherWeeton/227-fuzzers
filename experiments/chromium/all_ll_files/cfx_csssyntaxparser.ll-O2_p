; ModuleID = '../../third_party/pdfium/core/fxcrt/css/cfx_csssyntaxparser.cpp'
source_filename = "../../third_party/pdfium/core/fxcrt/css/cfx_csssyntaxparser.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_CSSSyntaxParser = type { i8, i8, %class.CFX_CSSOutputTextBuf, %class.CFX_CSSInputTextBuf, %"class.std::__1::stack" }
%class.CFX_CSSOutputTextBuf = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%class.CFX_CSSInputTextBuf = type { %"class.fxcrt::StringViewTemplate", i64 }
%"class.fxcrt::StringViewTemplate" = type { %"class.pdfium::span" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i32* }
%"class.std::__1::stack" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.4" }
%"struct.std::__1::__split_buffer" = type { i8**, i8**, i8**, %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i8** }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { i64 }
%"struct.std::__1::__split_buffer.10" = type { i8**, i8**, i8**, %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.2", %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.std::__1::allocator"* }
%"class.std::__1::allocator" = type { i8 }

$_ZNSt3__15dequeIN19CFX_CSSSyntaxParser4ModeENS_9allocatorIS2_EEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIPN19CFX_CSSSyntaxParser4ModeENS_9allocatorIS3_EEE9push_backEOS3_ = comdat any

$_ZNSt3__114__split_bufferIPN19CFX_CSSSyntaxParser4ModeENS_9allocatorIS3_EEE10push_frontEOS3_ = comdat any

$_ZNSt3__114__split_bufferIPN19CFX_CSSSyntaxParser4ModeERNS_9allocatorIS3_EEE10push_frontERKS3_ = comdat any

@_ZN19CFX_CSSSyntaxParserC1EN5fxcrt18StringViewTemplateIwEE = hidden unnamed_addr alias void (%class.CFX_CSSSyntaxParser*, %"class.fxcrt::StringViewTemplate"*), void (%class.CFX_CSSSyntaxParser*, %"class.fxcrt::StringViewTemplate"*)* @_ZN19CFX_CSSSyntaxParserC2EN5fxcrt18StringViewTemplateIwEE
@_ZN19CFX_CSSSyntaxParserD1Ev = hidden unnamed_addr alias void (%class.CFX_CSSSyntaxParser*), void (%class.CFX_CSSSyntaxParser*)* @_ZN19CFX_CSSSyntaxParserD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19CFX_CSSSyntaxParserC2EN5fxcrt18StringViewTemplateIwEE(%class.CFX_CSSSyntaxParser*, %"class.fxcrt::StringViewTemplate"* nocapture readonly) unnamed_addr #0 align 2 {
  %3 = alloca %"class.fxcrt::StringViewTemplate", align 8
  %4 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 0
  store i8 0, i8* %4, align 8
  %5 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 1
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 2
  tail call void @_ZN20CFX_CSSOutputTextBufC1Ev(%class.CFX_CSSOutputTextBuf* %6) #9
  %7 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 3
  %8 = bitcast %"class.fxcrt::StringViewTemplate"* %3 to i8*
  %9 = bitcast %"class.fxcrt::StringViewTemplate"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %8, i8* align 8 %9, i64 16, i1 false)
  call void @_ZN19CFX_CSSInputTextBufC1EN5fxcrt18StringViewTemplateIwEE(%class.CFX_CSSInputTextBuf* %7, %"class.fxcrt::StringViewTemplate"* nonnull %3) #9
  %10 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 4
  %11 = bitcast %"class.std::__1::stack"* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 48, i1 false) #9
  ret void
}

declare void @_ZN20CFX_CSSOutputTextBufC1Ev(%class.CFX_CSSOutputTextBuf*) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN19CFX_CSSInputTextBufC1EN5fxcrt18StringViewTemplateIwEE(%class.CFX_CSSInputTextBuf*, %"class.fxcrt::StringViewTemplate"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19CFX_CSSSyntaxParserD2Ev(%class.CFX_CSSSyntaxParser*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1
  %3 = load i8**, i8*** %2, align 8
  %4 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = lshr i64 %5, 12
  %7 = getelementptr inbounds i8*, i8** %3, i64 %6
  %8 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 2
  %9 = load i8**, i8*** %8, align 8
  %10 = icmp eq i8** %9, %3
  %11 = ptrtoint i8** %9 to i64
  %12 = ptrtoint i8** %3 to i64
  br i1 %10, label %13, label %15

13:                                               ; preds = %1
  %14 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 0, i32 0
  br label %28

15:                                               ; preds = %1
  %16 = load i8*, i8** %7, align 8
  %17 = and i64 %5, 4095
  %18 = getelementptr inbounds i8, i8* %16, i64 %17
  %19 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 0, i32 0
  %20 = load i64, i64* %19, align 8
  %21 = add i64 %20, %5
  %22 = lshr i64 %21, 12
  %23 = getelementptr inbounds i8*, i8** %3, i64 %22
  %24 = load i8*, i8** %23, align 8
  %25 = and i64 %21, 4095
  %26 = getelementptr inbounds i8, i8* %24, i64 %25
  %27 = icmp eq i8* %26, %18
  br i1 %27, label %28, label %34

28:                                               ; preds = %47, %15, %13
  %29 = phi i64* [ %14, %13 ], [ %19, %15 ], [ %19, %47 ]
  store i64 0, i64* %29, align 8
  %30 = bitcast i8*** %8 to i64*
  %31 = sub i64 %11, %12
  %32 = ashr exact i64 %31, 3
  %33 = icmp ugt i64 %32, 2
  br i1 %33, label %52, label %64

34:                                               ; preds = %15, %47
  %35 = phi i8* [ %50, %47 ], [ %18, %15 ]
  %36 = phi i8** [ %49, %47 ], [ %7, %15 ]
  %37 = getelementptr inbounds i8, i8* %35, i64 1
  %38 = ptrtoint i8* %37 to i64
  %39 = bitcast i8** %36 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = icmp eq i64 %41, 4096
  br i1 %42, label %43, label %47

43:                                               ; preds = %34
  %44 = getelementptr inbounds i8*, i8** %36, i64 1
  %45 = bitcast i8** %44 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %43, %34
  %48 = phi i64 [ %46, %43 ], [ %38, %34 ]
  %49 = phi i8** [ %44, %43 ], [ %36, %34 ]
  %50 = inttoptr i64 %48 to i8*
  %51 = icmp eq i8* %26, %50
  br i1 %51, label %28, label %34

52:                                               ; preds = %28, %52
  %53 = phi i8** [ %56, %52 ], [ %3, %28 ]
  %54 = load i8*, i8** %53, align 8
  tail call void @_ZdlPv(i8* %54) #10
  %55 = load i8**, i8*** %2, align 8
  %56 = getelementptr inbounds i8*, i8** %55, i64 1
  store i8** %56, i8*** %2, align 8
  %57 = load i64, i64* %30, align 8
  %58 = ptrtoint i8** %56 to i64
  %59 = sub i64 %57, %58
  %60 = ashr exact i64 %59, 3
  %61 = icmp ugt i64 %60, 2
  br i1 %61, label %52, label %62

62:                                               ; preds = %52
  %63 = inttoptr i64 %57 to i8**
  br label %64

64:                                               ; preds = %62, %28
  %65 = phi i8** [ %9, %28 ], [ %63, %62 ]
  %66 = phi i8** [ %3, %28 ], [ %56, %62 ]
  %67 = phi i64 [ %32, %28 ], [ %60, %62 ]
  switch i64 %67, label %71 [
    i64 1, label %69
    i64 2, label %68
  ]

68:                                               ; preds = %64
  br label %69

69:                                               ; preds = %64, %68
  %70 = phi i64 [ 4096, %68 ], [ 2048, %64 ]
  store i64 %70, i64* %4, align 8
  br label %71

71:                                               ; preds = %69, %64
  %72 = icmp eq i8** %66, %65
  br i1 %72, label %90, label %73

73:                                               ; preds = %71, %73
  %74 = phi i8** [ %76, %73 ], [ %66, %71 ]
  %75 = load i8*, i8** %74, align 8
  tail call void @_ZdlPv(i8* %75) #10
  %76 = getelementptr inbounds i8*, i8** %74, i64 1
  %77 = icmp eq i8** %76, %65
  br i1 %77, label %78, label %73

78:                                               ; preds = %73
  %79 = load i8**, i8*** %2, align 8
  %80 = load i8**, i8*** %8, align 8
  %81 = icmp eq i8** %80, %79
  br i1 %81, label %90, label %82

82:                                               ; preds = %78
  %83 = ptrtoint i8** %79 to i64
  %84 = getelementptr i8*, i8** %80, i64 -1
  %85 = ptrtoint i8** %84 to i64
  %86 = sub i64 %85, %83
  %87 = lshr i64 %86, 3
  %88 = xor i64 %87, -1
  %89 = getelementptr i8*, i8** %80, i64 %88
  store i8** %89, i8*** %8, align 8
  br label %90

90:                                               ; preds = %82, %78, %71
  %91 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 0
  %92 = load i8**, i8*** %91, align 8
  %93 = icmp eq i8** %92, null
  br i1 %93, label %96, label %94

94:                                               ; preds = %90
  %95 = bitcast i8** %92 to i8*
  tail call void @_ZdlPv(i8* %95) #10
  br label %96

96:                                               ; preds = %90, %94
  %97 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 3
  tail call void @_ZN19CFX_CSSInputTextBufD1Ev(%class.CFX_CSSInputTextBuf* %97) #9
  %98 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 2
  tail call void @_ZN20CFX_CSSOutputTextBufD1Ev(%class.CFX_CSSOutputTextBuf* %98) #9
  ret void
}

; Function Attrs: nounwind
declare void @_ZN19CFX_CSSInputTextBufD1Ev(%class.CFX_CSSInputTextBuf*) unnamed_addr #3

; Function Attrs: nounwind
declare void @_ZN20CFX_CSSOutputTextBufD1Ev(%class.CFX_CSSOutputTextBuf*) unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN19CFX_CSSSyntaxParser24SetParseOnlyDeclarationsEv(%class.CFX_CSSSyntaxParser* nocapture) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 1
  store i8 3, i8* %2, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i8 @_ZN19CFX_CSSSyntaxParser13DoSyntaxParseEv(%class.CFX_CSSSyntaxParser*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 2
  %3 = bitcast %class.CFX_CSSOutputTextBuf* %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %6 = bitcast i32** %5 to i64*
  store i64 %4, i64* %6, align 8
  %7 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 0
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %387

10:                                               ; preds = %1
  %11 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 3, i32 1
  %12 = load i64, i64* %11, align 8
  %13 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %14 = load i64, i64* %13, align 8
  %15 = icmp ult i64 %12, %14
  br i1 %15, label %16, label %377

16:                                               ; preds = %10
  %17 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %18 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 1
  %19 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 0, i32 0
  %20 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %21 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1
  %22 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 2
  %23 = bitcast i8*** %22 to i64*
  %24 = bitcast i8*** %21 to i64*
  %25 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 4, i32 0
  %26 = getelementptr inbounds %class.CFX_CSSOutputTextBuf, %class.CFX_CSSOutputTextBuf* %2, i64 0, i32 0, i32 0, i32 0
  br label %27

27:                                               ; preds = %16, %373
  %28 = phi i64 [ %14, %16 ], [ %375, %373 ]
  %29 = phi i64 [ %12, %16 ], [ %374, %373 ]
  %30 = load i32*, i32** %17, align 8
  %31 = getelementptr inbounds i32, i32* %30, i64 %29
  %32 = load i32, i32* %31, align 4
  %33 = load i8, i8* %18, align 1
  switch i8 %33, label %373 [
    i8 0, label %34
    i8 2, label %95
    i8 3, label %189
    i8 4, label %273
    i8 1, label %325
  ]

34:                                               ; preds = %27
  switch i32 %32, label %78 [
    i32 125, label %35
    i32 47, label %36
  ]

35:                                               ; preds = %34
  store i8 1, i8* %7, align 8
  br label %387

36:                                               ; preds = %34
  %37 = add nuw i64 %29, 1
  %38 = icmp ult i64 %37, %28
  br i1 %38, label %39, label %85

39:                                               ; preds = %36
  %40 = getelementptr inbounds i32, i32* %30, i64 %37
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 42
  br i1 %42, label %43, label %85

43:                                               ; preds = %39
  %44 = load i64, i64* %23, align 8
  %45 = load i64, i64* %24, align 8
  %46 = sub i64 %44, %45
  %47 = icmp eq i64 %46, 0
  %48 = shl i64 %46, 9
  %49 = add i64 %48, -1
  %50 = select i1 %47, i64 0, i64 %49
  %51 = load i64, i64* %20, align 8
  %52 = load i64, i64* %19, align 8
  %53 = add i64 %52, %51
  %54 = icmp eq i64 %50, %53
  %55 = inttoptr i64 %45 to i8**
  %56 = inttoptr i64 %44 to i8**
  br i1 %54, label %57, label %63

57:                                               ; preds = %43
  tail call void @_ZNSt3__15dequeIN19CFX_CSSSyntaxParser4ModeENS_9allocatorIS2_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %25) #9
  %58 = load i64, i64* %19, align 8
  %59 = load i64, i64* %20, align 8
  %60 = load i8**, i8*** %21, align 8
  %61 = load i8**, i8*** %22, align 8
  %62 = add i64 %59, %58
  br label %63

63:                                               ; preds = %57, %43
  %64 = phi i64 [ %62, %57 ], [ %53, %43 ]
  %65 = phi i8** [ %61, %57 ], [ %56, %43 ]
  %66 = phi i8** [ %60, %57 ], [ %55, %43 ]
  %67 = icmp eq i8** %65, %66
  br i1 %67, label %74, label %68

68:                                               ; preds = %63
  %69 = lshr i64 %64, 12
  %70 = getelementptr inbounds i8*, i8** %66, i64 %69
  %71 = load i8*, i8** %70, align 8
  %72 = and i64 %64, 4095
  %73 = getelementptr inbounds i8, i8* %71, i64 %72
  br label %74

74:                                               ; preds = %63, %68
  %75 = phi i8* [ %73, %68 ], [ null, %63 ]
  store i8 0, i8* %75, align 1
  %76 = load i64, i64* %19, align 8
  %77 = add i64 %76, 1
  store i64 %77, i64* %19, align 8
  store i8 1, i8* %18, align 1
  br label %373

78:                                               ; preds = %34
  %79 = icmp slt i32 %32, 33
  br i1 %79, label %80, label %82

80:                                               ; preds = %78
  %81 = add nuw i64 %29, 1
  store i64 %81, i64* %11, align 8
  br label %373

82:                                               ; preds = %78
  switch i32 %32, label %83 [
    i32 46, label %93
    i32 42, label %93
    i32 35, label %93
  ]

83:                                               ; preds = %82
  %84 = icmp ult i32 %32, 128
  br i1 %84, label %85, label %94

85:                                               ; preds = %36, %39, %83
  %86 = tail call i16** @__ctype_b_loc() #11
  %87 = load i16*, i16** %86, align 8
  %88 = sext i32 %32 to i64
  %89 = getelementptr inbounds i16, i16* %87, i64 %88
  %90 = load i16, i16* %89, align 2
  %91 = and i16 %90, 1024
  %92 = icmp eq i16 %91, 0
  br i1 %92, label %94, label %93

93:                                               ; preds = %85, %82, %82, %82
  store i8 2, i8* %18, align 1
  br label %387

94:                                               ; preds = %85, %83
  store i8 1, i8* %7, align 8
  br label %387

95:                                               ; preds = %27
  switch i32 %32, label %186 [
    i32 44, label %96
    i32 123, label %101
    i32 47, label %141
  ]

96:                                               ; preds = %95
  %97 = add nuw i64 %29, 1
  store i64 %97, i64* %11, align 8
  %98 = load i32*, i32** %26, align 8
  %99 = load i32*, i32** %5, align 8
  %100 = icmp eq i32* %98, %99
  br i1 %100, label %373, label %387

101:                                              ; preds = %95
  %102 = load i32*, i32** %26, align 8
  %103 = load i32*, i32** %5, align 8
  %104 = icmp eq i32* %102, %103
  br i1 %104, label %105, label %387

105:                                              ; preds = %101
  %106 = add nuw i64 %29, 1
  store i64 %106, i64* %11, align 8
  %107 = load i64, i64* %23, align 8
  %108 = load i64, i64* %24, align 8
  %109 = sub i64 %107, %108
  %110 = icmp eq i64 %109, 0
  %111 = shl i64 %109, 9
  %112 = add i64 %111, -1
  %113 = select i1 %110, i64 0, i64 %112
  %114 = load i64, i64* %20, align 8
  %115 = load i64, i64* %19, align 8
  %116 = add i64 %115, %114
  %117 = icmp eq i64 %113, %116
  %118 = inttoptr i64 %108 to i8**
  %119 = inttoptr i64 %107 to i8**
  br i1 %117, label %120, label %126

120:                                              ; preds = %105
  tail call void @_ZNSt3__15dequeIN19CFX_CSSSyntaxParser4ModeENS_9allocatorIS2_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %25) #9
  %121 = load i64, i64* %19, align 8
  %122 = load i64, i64* %20, align 8
  %123 = load i8**, i8*** %21, align 8
  %124 = load i8**, i8*** %22, align 8
  %125 = add i64 %122, %121
  br label %126

126:                                              ; preds = %120, %105
  %127 = phi i64 [ %125, %120 ], [ %116, %105 ]
  %128 = phi i8** [ %124, %120 ], [ %119, %105 ]
  %129 = phi i8** [ %123, %120 ], [ %118, %105 ]
  %130 = icmp eq i8** %128, %129
  br i1 %130, label %137, label %131

131:                                              ; preds = %126
  %132 = lshr i64 %127, 12
  %133 = getelementptr inbounds i8*, i8** %129, i64 %132
  %134 = load i8*, i8** %133, align 8
  %135 = and i64 %127, 4095
  %136 = getelementptr inbounds i8, i8* %134, i64 %135
  br label %137

137:                                              ; preds = %126, %131
  %138 = phi i8* [ %136, %131 ], [ null, %126 ]
  store i8 0, i8* %138, align 1
  %139 = load i64, i64* %19, align 8
  %140 = add i64 %139, 1
  store i64 %140, i64* %19, align 8
  store i8 3, i8* %18, align 1
  br label %387

141:                                              ; preds = %95
  %142 = add nuw i64 %29, 1
  %143 = icmp ult i64 %142, %28
  br i1 %143, label %144, label %186

144:                                              ; preds = %141
  %145 = getelementptr inbounds i32, i32* %30, i64 %142
  %146 = load i32, i32* %145, align 4
  %147 = icmp eq i32 %146, 42
  br i1 %147, label %148, label %186

148:                                              ; preds = %144
  %149 = load i64, i64* %23, align 8
  %150 = load i64, i64* %24, align 8
  %151 = sub i64 %149, %150
  %152 = icmp eq i64 %151, 0
  %153 = shl i64 %151, 9
  %154 = add i64 %153, -1
  %155 = select i1 %152, i64 0, i64 %154
  %156 = load i64, i64* %20, align 8
  %157 = load i64, i64* %19, align 8
  %158 = add i64 %157, %156
  %159 = icmp eq i64 %155, %158
  %160 = inttoptr i64 %150 to i8**
  %161 = inttoptr i64 %149 to i8**
  br i1 %159, label %162, label %168

162:                                              ; preds = %148
  tail call void @_ZNSt3__15dequeIN19CFX_CSSSyntaxParser4ModeENS_9allocatorIS2_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %25) #9
  %163 = load i64, i64* %19, align 8
  %164 = load i64, i64* %20, align 8
  %165 = load i8**, i8*** %21, align 8
  %166 = load i8**, i8*** %22, align 8
  %167 = add i64 %164, %163
  br label %168

168:                                              ; preds = %162, %148
  %169 = phi i64 [ %167, %162 ], [ %158, %148 ]
  %170 = phi i8** [ %166, %162 ], [ %161, %148 ]
  %171 = phi i8** [ %165, %162 ], [ %160, %148 ]
  %172 = icmp eq i8** %170, %171
  br i1 %172, label %179, label %173

173:                                              ; preds = %168
  %174 = lshr i64 %169, 12
  %175 = getelementptr inbounds i8*, i8** %171, i64 %174
  %176 = load i8*, i8** %175, align 8
  %177 = and i64 %169, 4095
  %178 = getelementptr inbounds i8, i8* %176, i64 %177
  br label %179

179:                                              ; preds = %168, %173
  %180 = phi i8* [ %178, %173 ], [ null, %168 ]
  store i8 2, i8* %180, align 1
  %181 = load i64, i64* %19, align 8
  %182 = add i64 %181, 1
  store i64 %182, i64* %19, align 8
  store i8 1, i8* %18, align 1
  %183 = load i32*, i32** %26, align 8
  %184 = load i32*, i32** %5, align 8
  %185 = icmp eq i32* %183, %184
  br i1 %185, label %373, label %387

186:                                              ; preds = %141, %144, %95
  tail call void @_ZN20CFX_CSSOutputTextBuf27AppendCharIfNotLeadingBlankEw(%class.CFX_CSSOutputTextBuf* %2, i32 signext %32) #9
  %187 = load i64, i64* %11, align 8
  %188 = add i64 %187, 1
  store i64 %188, i64* %11, align 8
  br label %373

189:                                              ; preds = %27
  switch i32 %32, label %270 [
    i32 58, label %190
    i32 125, label %192
    i32 47, label %225
  ]

190:                                              ; preds = %189
  %191 = add nuw i64 %29, 1
  store i64 %191, i64* %11, align 8
  store i8 4, i8* %18, align 1
  br label %387

192:                                              ; preds = %189
  %193 = add nuw i64 %29, 1
  store i64 %193, i64* %11, align 8
  %194 = load i64, i64* %19, align 8
  %195 = icmp eq i64 %194, 0
  br i1 %195, label %224, label %196

196:                                              ; preds = %192
  %197 = load i64, i64* %20, align 8
  %198 = add i64 %194, -1
  %199 = add i64 %197, %198
  %200 = load i8**, i8*** %21, align 8
  %201 = lshr i64 %199, 12
  %202 = getelementptr inbounds i8*, i8** %200, i64 %201
  %203 = load i8*, i8** %202, align 8
  %204 = and i64 %199, 4095
  %205 = getelementptr inbounds i8, i8* %203, i64 %204
  %206 = load i8, i8* %205, align 1
  store i8 %206, i8* %18, align 1
  store i64 %198, i64* %19, align 8
  %207 = load i64, i64* %23, align 8
  %208 = ptrtoint i8** %200 to i64
  %209 = sub i64 %207, %208
  %210 = icmp eq i64 %209, 0
  %211 = shl i64 %209, 9
  %212 = add i64 %211, -1
  %213 = select i1 %210, i64 0, i64 %212
  %214 = sub i64 1, %194
  %215 = sub i64 %214, %197
  %216 = add i64 %215, %213
  %217 = icmp ult i64 %216, 8192
  br i1 %217, label %387, label %218

218:                                              ; preds = %196
  %219 = inttoptr i64 %207 to i8**
  %220 = getelementptr inbounds i8*, i8** %219, i64 -1
  %221 = load i8*, i8** %220, align 8
  tail call void @_ZdlPv(i8* %221) #10
  %222 = load i8**, i8*** %22, align 8
  %223 = getelementptr i8*, i8** %222, i64 -1
  store i8** %223, i8*** %22, align 8
  br label %387

224:                                              ; preds = %192
  store i8 1, i8* %7, align 8
  br label %387

225:                                              ; preds = %189
  %226 = add nuw i64 %29, 1
  %227 = icmp ult i64 %226, %28
  br i1 %227, label %228, label %270

228:                                              ; preds = %225
  %229 = getelementptr inbounds i32, i32* %30, i64 %226
  %230 = load i32, i32* %229, align 4
  %231 = icmp eq i32 %230, 42
  br i1 %231, label %232, label %270

232:                                              ; preds = %228
  %233 = load i64, i64* %23, align 8
  %234 = load i64, i64* %24, align 8
  %235 = sub i64 %233, %234
  %236 = icmp eq i64 %235, 0
  %237 = shl i64 %235, 9
  %238 = add i64 %237, -1
  %239 = select i1 %236, i64 0, i64 %238
  %240 = load i64, i64* %20, align 8
  %241 = load i64, i64* %19, align 8
  %242 = add i64 %241, %240
  %243 = icmp eq i64 %239, %242
  %244 = inttoptr i64 %234 to i8**
  %245 = inttoptr i64 %233 to i8**
  br i1 %243, label %246, label %252

246:                                              ; preds = %232
  tail call void @_ZNSt3__15dequeIN19CFX_CSSSyntaxParser4ModeENS_9allocatorIS2_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %25) #9
  %247 = load i64, i64* %19, align 8
  %248 = load i64, i64* %20, align 8
  %249 = load i8**, i8*** %21, align 8
  %250 = load i8**, i8*** %22, align 8
  %251 = add i64 %248, %247
  br label %252

252:                                              ; preds = %246, %232
  %253 = phi i64 [ %251, %246 ], [ %242, %232 ]
  %254 = phi i8** [ %250, %246 ], [ %245, %232 ]
  %255 = phi i8** [ %249, %246 ], [ %244, %232 ]
  %256 = icmp eq i8** %254, %255
  br i1 %256, label %263, label %257

257:                                              ; preds = %252
  %258 = lshr i64 %253, 12
  %259 = getelementptr inbounds i8*, i8** %255, i64 %258
  %260 = load i8*, i8** %259, align 8
  %261 = and i64 %253, 4095
  %262 = getelementptr inbounds i8, i8* %260, i64 %261
  br label %263

263:                                              ; preds = %252, %257
  %264 = phi i8* [ %262, %257 ], [ null, %252 ]
  store i8 3, i8* %264, align 1
  %265 = load i64, i64* %19, align 8
  %266 = add i64 %265, 1
  store i64 %266, i64* %19, align 8
  store i8 1, i8* %18, align 1
  %267 = load i32*, i32** %26, align 8
  %268 = load i32*, i32** %5, align 8
  %269 = icmp eq i32* %267, %268
  br i1 %269, label %373, label %387

270:                                              ; preds = %225, %228, %189
  tail call void @_ZN20CFX_CSSOutputTextBuf27AppendCharIfNotLeadingBlankEw(%class.CFX_CSSOutputTextBuf* %2, i32 signext %32) #9
  %271 = load i64, i64* %11, align 8
  %272 = add i64 %271, 1
  store i64 %272, i64* %11, align 8
  br label %373

273:                                              ; preds = %27
  switch i32 %32, label %322 [
    i32 59, label %274
    i32 125, label %276
    i32 47, label %277
  ]

274:                                              ; preds = %273
  %275 = add nuw i64 %29, 1
  store i64 %275, i64* %11, align 8
  br label %276

276:                                              ; preds = %273, %274
  store i8 3, i8* %18, align 1
  br label %387

277:                                              ; preds = %273
  %278 = add nuw i64 %29, 1
  %279 = icmp ult i64 %278, %28
  br i1 %279, label %280, label %322

280:                                              ; preds = %277
  %281 = getelementptr inbounds i32, i32* %30, i64 %278
  %282 = load i32, i32* %281, align 4
  %283 = icmp eq i32 %282, 42
  br i1 %283, label %284, label %322

284:                                              ; preds = %280
  %285 = load i64, i64* %23, align 8
  %286 = load i64, i64* %24, align 8
  %287 = sub i64 %285, %286
  %288 = icmp eq i64 %287, 0
  %289 = shl i64 %287, 9
  %290 = add i64 %289, -1
  %291 = select i1 %288, i64 0, i64 %290
  %292 = load i64, i64* %20, align 8
  %293 = load i64, i64* %19, align 8
  %294 = add i64 %293, %292
  %295 = icmp eq i64 %291, %294
  %296 = inttoptr i64 %286 to i8**
  %297 = inttoptr i64 %285 to i8**
  br i1 %295, label %298, label %304

298:                                              ; preds = %284
  tail call void @_ZNSt3__15dequeIN19CFX_CSSSyntaxParser4ModeENS_9allocatorIS2_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %25) #9
  %299 = load i64, i64* %19, align 8
  %300 = load i64, i64* %20, align 8
  %301 = load i8**, i8*** %21, align 8
  %302 = load i8**, i8*** %22, align 8
  %303 = add i64 %300, %299
  br label %304

304:                                              ; preds = %298, %284
  %305 = phi i64 [ %303, %298 ], [ %294, %284 ]
  %306 = phi i8** [ %302, %298 ], [ %297, %284 ]
  %307 = phi i8** [ %301, %298 ], [ %296, %284 ]
  %308 = icmp eq i8** %306, %307
  br i1 %308, label %315, label %309

309:                                              ; preds = %304
  %310 = lshr i64 %305, 12
  %311 = getelementptr inbounds i8*, i8** %307, i64 %310
  %312 = load i8*, i8** %311, align 8
  %313 = and i64 %305, 4095
  %314 = getelementptr inbounds i8, i8* %312, i64 %313
  br label %315

315:                                              ; preds = %304, %309
  %316 = phi i8* [ %314, %309 ], [ null, %304 ]
  store i8 4, i8* %316, align 1
  %317 = load i64, i64* %19, align 8
  %318 = add i64 %317, 1
  store i64 %318, i64* %19, align 8
  store i8 1, i8* %18, align 1
  %319 = load i32*, i32** %26, align 8
  %320 = load i32*, i32** %5, align 8
  %321 = icmp eq i32* %319, %320
  br i1 %321, label %373, label %387

322:                                              ; preds = %277, %280, %273
  tail call void @_ZN20CFX_CSSOutputTextBuf27AppendCharIfNotLeadingBlankEw(%class.CFX_CSSOutputTextBuf* %2, i32 signext %32) #9
  %323 = load i64, i64* %11, align 8
  %324 = add i64 %323, 1
  store i64 %324, i64* %11, align 8
  br label %373

325:                                              ; preds = %27
  %326 = icmp eq i32 %32, 42
  br i1 %326, label %327, label %370

327:                                              ; preds = %325
  %328 = add nuw i64 %29, 1
  %329 = icmp ult i64 %328, %28
  br i1 %329, label %330, label %370

330:                                              ; preds = %327
  %331 = getelementptr inbounds i32, i32* %30, i64 %328
  %332 = load i32, i32* %331, align 4
  %333 = icmp eq i32 %332, 47
  br i1 %333, label %334, label %370

334:                                              ; preds = %330
  %335 = load i64, i64* %19, align 8
  %336 = icmp eq i64 %335, 0
  br i1 %336, label %367, label %337

337:                                              ; preds = %334
  %338 = load i64, i64* %20, align 8
  %339 = add i64 %335, -1
  %340 = add i64 %338, %339
  %341 = load i8**, i8*** %21, align 8
  %342 = lshr i64 %340, 12
  %343 = getelementptr inbounds i8*, i8** %341, i64 %342
  %344 = load i8*, i8** %343, align 8
  %345 = and i64 %340, 4095
  %346 = getelementptr inbounds i8, i8* %344, i64 %345
  %347 = load i8, i8* %346, align 1
  store i8 %347, i8* %18, align 1
  store i64 %339, i64* %19, align 8
  %348 = load i64, i64* %23, align 8
  %349 = ptrtoint i8** %341 to i64
  %350 = sub i64 %348, %349
  %351 = icmp eq i64 %350, 0
  %352 = shl i64 %350, 9
  %353 = add i64 %352, -1
  %354 = select i1 %351, i64 0, i64 %353
  %355 = sub i64 1, %335
  %356 = sub i64 %355, %338
  %357 = add i64 %356, %354
  %358 = icmp ult i64 %357, 8192
  br i1 %358, label %368, label %359

359:                                              ; preds = %337
  %360 = inttoptr i64 %348 to i8**
  %361 = getelementptr inbounds i8*, i8** %360, i64 -1
  %362 = load i8*, i8** %361, align 8
  tail call void @_ZdlPv(i8* %362) #10
  %363 = load i8**, i8*** %22, align 8
  %364 = getelementptr i8*, i8** %363, i64 -1
  store i8** %364, i8*** %22, align 8
  %365 = load i64, i64* %11, align 8
  %366 = add i64 %365, 1
  br label %368

367:                                              ; preds = %334
  store i8 1, i8* %7, align 8
  br label %387

368:                                              ; preds = %337, %359
  %369 = phi i64 [ %328, %337 ], [ %366, %359 ]
  store i64 %369, i64* %11, align 8
  br label %370

370:                                              ; preds = %327, %368, %330, %325
  %371 = phi i64 [ %29, %327 ], [ %369, %368 ], [ %29, %330 ], [ %29, %325 ]
  %372 = add i64 %371, 1
  store i64 %372, i64* %11, align 8
  br label %373

373:                                              ; preds = %370, %80, %74, %179, %96, %186, %263, %270, %315, %322, %27
  %374 = load i64, i64* %11, align 8
  %375 = load i64, i64* %13, align 8
  %376 = icmp ult i64 %374, %375
  br i1 %376, label %27, label %377

377:                                              ; preds = %373, %10
  %378 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 1
  %379 = load i8, i8* %378, align 1
  %380 = icmp eq i8 %379, 4
  br i1 %380, label %381, label %386

381:                                              ; preds = %377
  %382 = getelementptr inbounds %class.CFX_CSSOutputTextBuf, %class.CFX_CSSOutputTextBuf* %2, i64 0, i32 0, i32 0, i32 0
  %383 = load i32*, i32** %382, align 8
  %384 = load i32*, i32** %5, align 8
  %385 = icmp eq i32* %383, %384
  br i1 %385, label %386, label %387

386:                                              ; preds = %381, %377
  br label %387

387:                                              ; preds = %315, %263, %179, %96, %224, %196, %218, %367, %101, %35, %94, %93, %137, %190, %276, %381, %1, %386
  %388 = phi i8 [ 1, %386 ], [ 0, %1 ], [ 8, %381 ], [ 6, %218 ], [ 6, %196 ], [ 0, %224 ], [ 0, %367 ], [ 4, %101 ], [ 0, %35 ], [ 0, %94 ], [ 3, %93 ], [ 5, %137 ], [ 7, %190 ], [ 8, %276 ], [ 4, %96 ], [ 4, %179 ], [ 7, %263 ], [ 8, %315 ]
  ret i8 %388
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19CFX_CSSSyntaxParser8SaveModeENS_4ModeE(%class.CFX_CSSSyntaxParser*, i8 zeroext) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 2
  %4 = bitcast i8*** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1
  %7 = bitcast i8*** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp eq i64 %9, 0
  %11 = shl i64 %9, 9
  %12 = add i64 %11, -1
  %13 = select i1 %10, i64 0, i64 %12
  %14 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = add i64 %17, %15
  %19 = icmp eq i64 %13, %18
  %20 = inttoptr i64 %8 to i8**
  %21 = inttoptr i64 %5 to i8**
  br i1 %19, label %22, label %29

22:                                               ; preds = %2
  %23 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 4, i32 0
  tail call void @_ZNSt3__15dequeIN19CFX_CSSSyntaxParser4ModeENS_9allocatorIS2_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %23) #9
  %24 = load i64, i64* %16, align 8
  %25 = load i64, i64* %14, align 8
  %26 = load i8**, i8*** %6, align 8
  %27 = load i8**, i8*** %3, align 8
  %28 = add i64 %25, %24
  br label %29

29:                                               ; preds = %22, %2
  %30 = phi i64 [ %28, %22 ], [ %18, %2 ]
  %31 = phi i8** [ %27, %22 ], [ %21, %2 ]
  %32 = phi i8** [ %26, %22 ], [ %20, %2 ]
  %33 = icmp eq i8** %31, %32
  br i1 %33, label %40, label %34

34:                                               ; preds = %29
  %35 = lshr i64 %30, 12
  %36 = getelementptr inbounds i8*, i8** %32, i64 %35
  %37 = load i8*, i8** %36, align 8
  %38 = and i64 %30, 4095
  %39 = getelementptr inbounds i8, i8* %37, i64 %38
  br label %40

40:                                               ; preds = %29, %34
  %41 = phi i8* [ %39, %34 ], [ null, %29 ]
  store i8 %1, i8* %41, align 1
  %42 = load i64, i64* %16, align 8
  %43 = add i64 %42, 1
  store i64 %43, i64* %16, align 8
  ret void
}

declare void @_ZN20CFX_CSSOutputTextBuf27AppendCharIfNotLeadingBlankEw(%class.CFX_CSSOutputTextBuf*, i32 signext) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN19CFX_CSSSyntaxParser11RestoreModeEv(%class.CFX_CSSSyntaxParser* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 0, i32 0
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 0
  store i8 1, i8* %6, align 8
  br label %40

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = add i64 %3, -1
  %11 = add i64 %9, %10
  %12 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1
  %13 = load i8**, i8*** %12, align 8
  %14 = lshr i64 %11, 12
  %15 = getelementptr inbounds i8*, i8** %13, i64 %14
  %16 = load i8*, i8** %15, align 8
  %17 = and i64 %11, 4095
  %18 = getelementptr inbounds i8, i8* %16, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 1
  store i8 %19, i8* %20, align 1
  store i64 %10, i64* %2, align 8
  %21 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 2
  %22 = bitcast i8*** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = ptrtoint i8** %13 to i64
  %25 = sub i64 %23, %24
  %26 = icmp eq i64 %25, 0
  %27 = shl i64 %25, 9
  %28 = add i64 %27, -1
  %29 = select i1 %26, i64 0, i64 %28
  %30 = sub i64 1, %3
  %31 = sub i64 %30, %9
  %32 = add i64 %31, %29
  %33 = icmp ult i64 %32, 8192
  br i1 %33, label %40, label %34

34:                                               ; preds = %7
  %35 = inttoptr i64 %23 to i8**
  %36 = getelementptr inbounds i8*, i8** %35, i64 -1
  %37 = load i8*, i8** %36, align 8
  tail call void @_ZdlPv(i8* %37) #10
  %38 = load i8**, i8*** %21, align 8
  %39 = getelementptr i8*, i8** %38, i64 -1
  store i8** %39, i8*** %21, align 8
  br label %40

40:                                               ; preds = %34, %7, %5
  %41 = phi i1 [ false, %5 ], [ true, %7 ], [ true, %34 ]
  ret i1 %41
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK19CFX_CSSSyntaxParser16GetCurrentStringEv(%"class.fxcrt::StringViewTemplate"* noalias sret, %class.CFX_CSSSyntaxParser*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %class.CFX_CSSSyntaxParser, %class.CFX_CSSSyntaxParser* %1, i64 0, i32 2
  tail call void @_ZNK20CFX_CSSOutputTextBuf29GetTrailingBlankTrimmedStringEv(%"class.fxcrt::StringViewTemplate"* sret %0, %class.CFX_CSSOutputTextBuf* %3) #9
  ret void
}

declare void @_ZNK20CFX_CSSOutputTextBuf29GetTrailingBlankTrimmedStringEv(%"class.fxcrt::StringViewTemplate"* sret, %class.CFX_CSSOutputTextBuf*) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIN19CFX_CSSSyntaxParser4ModeENS_9allocatorIS2_EEE19__add_back_capacityEv(%"class.std::__1::deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca %"struct.std::__1::__split_buffer.10", align 8
  %5 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, 4095
  br i1 %7, label %8, label %162

8:                                                ; preds = %1
  %9 = add i64 %6, -4096
  store i64 %9, i64* %5, align 8
  %10 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i8**, i8*** %10, align 8
  %12 = bitcast i8** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds i8*, i8** %11, i64 1
  store i8** %14, i8*** %10, align 8
  %15 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %16 = load i8**, i8*** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %18 = load i8**, i8*** %17, align 8
  %19 = icmp eq i8** %16, %18
  %20 = ptrtoint i8** %18 to i64
  %21 = bitcast i8** %16 to i64*
  br i1 %19, label %22, label %158

22:                                               ; preds = %8
  %23 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i8**, i8*** %23, align 8
  %25 = icmp ugt i8** %14, %24
  %26 = ptrtoint i8** %24 to i64
  br i1 %25, label %27, label %47

27:                                               ; preds = %22
  %28 = ptrtoint i8** %14 to i64
  %29 = sub i64 %28, %26
  %30 = ashr exact i64 %29, 3
  %31 = add nsw i64 %30, 1
  %32 = sdiv i64 %31, -2
  %33 = getelementptr inbounds i8*, i8** %14, i64 %32
  %34 = ptrtoint i8** %16 to i64
  %35 = sub i64 %34, %28
  %36 = ashr exact i64 %35, 3
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %27
  %39 = bitcast i8** %33 to i8*
  %40 = bitcast i8** %14 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 %35, i1 false) #9
  %41 = load i8**, i8*** %10, align 8
  br label %42

42:                                               ; preds = %38, %27
  %43 = phi i8** [ %14, %27 ], [ %41, %38 ]
  %44 = getelementptr inbounds i8*, i8** %33, i64 %36
  store i8** %44, i8*** %15, align 8
  %45 = getelementptr inbounds i8*, i8** %43, i64 %32
  store i8** %45, i8*** %10, align 8
  %46 = bitcast i8** %44 to i64*
  br label %158

47:                                               ; preds = %22
  %48 = bitcast i8*** %17 to i64*
  %49 = bitcast %"class.std::__1::deque"* %0 to i64*
  %50 = sub i64 %20, %26
  %51 = ashr exact i64 %50, 2
  %52 = icmp eq i64 %50, 0
  %53 = select i1 %52, i64 1, i64 %51
  %54 = icmp ugt i64 %53, 2305843009213693951
  br i1 %54, label %55, label %56

55:                                               ; preds = %47
  tail call void @abort() #12
  unreachable

56:                                               ; preds = %47
  %57 = lshr i64 %53, 2
  %58 = shl i64 %53, 3
  %59 = tail call i8* @_Znwm(i64 %58) #10
  %60 = bitcast i8* %59 to i8**
  %61 = ptrtoint i8* %59 to i64
  %62 = getelementptr inbounds i8*, i8** %60, i64 %57
  %63 = ptrtoint i8** %62 to i64
  %64 = getelementptr inbounds i8*, i8** %60, i64 %53
  %65 = ptrtoint i8** %64 to i64
  %66 = ptrtoint i8** %14 to i64
  %67 = ptrtoint i8** %16 to i64
  %68 = sub i64 %67, %66
  %69 = ashr exact i64 %68, 3
  %70 = getelementptr inbounds i8*, i8** %62, i64 %69
  %71 = icmp eq i64 %68, 0
  br i1 %71, label %147, label %72

72:                                               ; preds = %56
  %73 = add i64 %68, -8
  %74 = lshr i64 %73, 3
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 7
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %93, label %78

78:                                               ; preds = %72, %78
  %79 = phi i8** [ %86, %78 ], [ %62, %72 ]
  %80 = phi i64 [ %87, %78 ], [ %63, %72 ]
  %81 = phi i8** [ %88, %78 ], [ %14, %72 ]
  %82 = phi i64 [ %89, %78 ], [ %76, %72 ]
  %83 = bitcast i8** %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = inttoptr i64 %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds i8*, i8** %79, i64 1
  %87 = ptrtoint i8** %86 to i64
  %88 = getelementptr inbounds i8*, i8** %81, i64 1
  %89 = add i64 %82, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %78, !llvm.loop !3

91:                                               ; preds = %78
  %92 = ptrtoint i8** %86 to i64
  br label %93

93:                                               ; preds = %72, %91
  %94 = phi i8** [ %62, %72 ], [ %86, %91 ]
  %95 = phi i64 [ %63, %72 ], [ %92, %91 ]
  %96 = phi i8** [ %14, %72 ], [ %88, %91 ]
  %97 = icmp ult i64 %73, 56
  br i1 %97, label %144, label %98

98:                                               ; preds = %93, %98
  %99 = phi i8** [ %140, %98 ], [ %94, %93 ]
  %100 = phi i64 [ %141, %98 ], [ %95, %93 ]
  %101 = phi i8** [ %142, %98 ], [ %96, %93 ]
  %102 = bitcast i8** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds i8*, i8** %99, i64 1
  %106 = getelementptr inbounds i8*, i8** %101, i64 1
  %107 = bitcast i8** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast i8** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds i8*, i8** %99, i64 2
  %111 = getelementptr inbounds i8*, i8** %101, i64 2
  %112 = bitcast i8** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast i8** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds i8*, i8** %99, i64 3
  %116 = getelementptr inbounds i8*, i8** %101, i64 3
  %117 = bitcast i8** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast i8** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds i8*, i8** %99, i64 4
  %121 = getelementptr inbounds i8*, i8** %101, i64 4
  %122 = bitcast i8** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast i8** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds i8*, i8** %99, i64 5
  %126 = getelementptr inbounds i8*, i8** %101, i64 5
  %127 = bitcast i8** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast i8** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds i8*, i8** %99, i64 6
  %131 = getelementptr inbounds i8*, i8** %101, i64 6
  %132 = bitcast i8** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast i8** %130 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds i8*, i8** %99, i64 7
  %136 = getelementptr inbounds i8*, i8** %101, i64 7
  %137 = bitcast i8** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast i8** %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds i8*, i8** %99, i64 8
  %141 = ptrtoint i8** %140 to i64
  %142 = getelementptr inbounds i8*, i8** %101, i64 8
  %143 = icmp eq i8** %70, %140
  br i1 %143, label %144, label %98

144:                                              ; preds = %98, %93
  %145 = ptrtoint i8** %70 to i64
  %146 = load i8**, i8*** %23, align 8
  br label %147

147:                                              ; preds = %144, %56
  %148 = phi i8** [ %146, %144 ], [ %24, %56 ]
  %149 = phi i64 [ %145, %144 ], [ %63, %56 ]
  store i64 %61, i64* %49, align 8
  %150 = bitcast i8*** %10 to i64*
  store i64 %63, i64* %150, align 8
  %151 = bitcast i8*** %15 to i64*
  store i64 %149, i64* %151, align 8
  store i64 %65, i64* %48, align 8
  %152 = icmp eq i8** %148, null
  %153 = inttoptr i64 %149 to i64*
  br i1 %152, label %158, label %154

154:                                              ; preds = %147
  %155 = bitcast i8** %148 to i8*
  tail call void @_ZdlPv(i8* %155) #10
  %156 = bitcast i8*** %15 to i64**
  %157 = load i64*, i64** %156, align 8
  br label %158

158:                                              ; preds = %8, %42, %147, %154
  %159 = phi i64* [ %157, %154 ], [ %153, %147 ], [ %46, %42 ], [ %21, %8 ]
  store i64 %13, i64* %159, align 8
  %160 = load i8**, i8*** %15, align 8
  %161 = getelementptr inbounds i8*, i8** %160, i64 1
  store i8** %161, i8*** %15, align 8
  br label %458

162:                                              ; preds = %1
  %163 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %165 = bitcast i8*** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %168 = bitcast i8*** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = sub i64 %166, %169
  %171 = ashr exact i64 %170, 3
  %172 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %173 = bitcast i8*** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = bitcast %"class.std::__1::deque"* %0 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %174, %176
  %178 = ashr exact i64 %177, 3
  %179 = icmp ult i64 %171, %178
  %180 = inttoptr i64 %166 to i8**
  %181 = inttoptr i64 %169 to i8**
  br i1 %179, label %182, label %335

182:                                              ; preds = %162
  %183 = icmp eq i64 %174, %166
  br i1 %183, label %187, label %184

184:                                              ; preds = %182
  %185 = bitcast i8** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #9
  %186 = tail call i8* @_Znwm(i64 4096) #10
  store i8* %186, i8** %2, align 8
  call void @_ZNSt3__114__split_bufferIPN19CFX_CSSSyntaxParser4ModeENS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer"* %163, i8** nonnull dereferenceable(8) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #9
  br label %458

187:                                              ; preds = %182
  %188 = bitcast i8** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %188) #9
  %189 = tail call i8* @_Znwm(i64 4096) #10
  store i8* %189, i8** %3, align 8
  call void @_ZNSt3__114__split_bufferIPN19CFX_CSSSyntaxParser4ModeENS_9allocatorIS3_EEE10push_frontEOS3_(%"struct.std::__1::__split_buffer"* %163, i8** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %188) #9
  %190 = load i8**, i8*** %167, align 8
  %191 = bitcast i8** %190 to i64*
  %192 = load i64, i64* %191, align 8
  %193 = getelementptr inbounds i8*, i8** %190, i64 1
  store i8** %193, i8*** %167, align 8
  %194 = load i8**, i8*** %164, align 8
  %195 = load i8**, i8*** %172, align 8
  %196 = icmp eq i8** %194, %195
  %197 = ptrtoint i8** %195 to i64
  %198 = bitcast i8** %194 to i64*
  br i1 %196, label %199, label %331

199:                                              ; preds = %187
  %200 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %201 = load i8**, i8*** %200, align 8
  %202 = icmp ugt i8** %193, %201
  %203 = ptrtoint i8** %201 to i64
  br i1 %202, label %204, label %224

204:                                              ; preds = %199
  %205 = ptrtoint i8** %193 to i64
  %206 = sub i64 %205, %203
  %207 = ashr exact i64 %206, 3
  %208 = add nsw i64 %207, 1
  %209 = sdiv i64 %208, -2
  %210 = getelementptr inbounds i8*, i8** %193, i64 %209
  %211 = ptrtoint i8** %194 to i64
  %212 = sub i64 %211, %205
  %213 = ashr exact i64 %212, 3
  %214 = icmp eq i64 %212, 0
  br i1 %214, label %219, label %215

215:                                              ; preds = %204
  %216 = bitcast i8** %210 to i8*
  %217 = bitcast i8** %193 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %216, i8* align 8 %217, i64 %212, i1 false) #9
  %218 = load i8**, i8*** %167, align 8
  br label %219

219:                                              ; preds = %215, %204
  %220 = phi i8** [ %193, %204 ], [ %218, %215 ]
  %221 = getelementptr inbounds i8*, i8** %210, i64 %213
  store i8** %221, i8*** %164, align 8
  %222 = getelementptr inbounds i8*, i8** %220, i64 %209
  store i8** %222, i8*** %167, align 8
  %223 = bitcast i8** %221 to i64*
  br label %331

224:                                              ; preds = %199
  %225 = sub i64 %197, %203
  %226 = ashr exact i64 %225, 2
  %227 = icmp eq i64 %225, 0
  %228 = select i1 %227, i64 1, i64 %226
  %229 = icmp ugt i64 %228, 2305843009213693951
  br i1 %229, label %230, label %231

230:                                              ; preds = %224
  call void @abort() #12
  unreachable

231:                                              ; preds = %224
  %232 = lshr i64 %228, 2
  %233 = shl i64 %228, 3
  %234 = call i8* @_Znwm(i64 %233) #10
  %235 = bitcast i8* %234 to i8**
  %236 = ptrtoint i8* %234 to i64
  %237 = getelementptr inbounds i8*, i8** %235, i64 %232
  %238 = ptrtoint i8** %237 to i64
  %239 = getelementptr inbounds i8*, i8** %235, i64 %228
  %240 = ptrtoint i8** %239 to i64
  %241 = ptrtoint i8** %193 to i64
  %242 = ptrtoint i8** %194 to i64
  %243 = sub i64 %242, %241
  %244 = ashr exact i64 %243, 3
  %245 = getelementptr inbounds i8*, i8** %237, i64 %244
  %246 = icmp eq i64 %243, 0
  br i1 %246, label %322, label %247

247:                                              ; preds = %231
  %248 = add i64 %243, -8
  %249 = lshr i64 %248, 3
  %250 = add nuw nsw i64 %249, 1
  %251 = and i64 %250, 7
  %252 = icmp eq i64 %251, 0
  br i1 %252, label %268, label %253

253:                                              ; preds = %247, %253
  %254 = phi i8** [ %261, %253 ], [ %237, %247 ]
  %255 = phi i64 [ %262, %253 ], [ %238, %247 ]
  %256 = phi i8** [ %263, %253 ], [ %193, %247 ]
  %257 = phi i64 [ %264, %253 ], [ %251, %247 ]
  %258 = bitcast i8** %256 to i64*
  %259 = load i64, i64* %258, align 8
  %260 = inttoptr i64 %255 to i64*
  store i64 %259, i64* %260, align 8
  %261 = getelementptr inbounds i8*, i8** %254, i64 1
  %262 = ptrtoint i8** %261 to i64
  %263 = getelementptr inbounds i8*, i8** %256, i64 1
  %264 = add i64 %257, -1
  %265 = icmp eq i64 %264, 0
  br i1 %265, label %266, label %253, !llvm.loop !5

266:                                              ; preds = %253
  %267 = ptrtoint i8** %261 to i64
  br label %268

268:                                              ; preds = %247, %266
  %269 = phi i8** [ %237, %247 ], [ %261, %266 ]
  %270 = phi i64 [ %238, %247 ], [ %267, %266 ]
  %271 = phi i8** [ %193, %247 ], [ %263, %266 ]
  %272 = icmp ult i64 %248, 56
  br i1 %272, label %319, label %273

273:                                              ; preds = %268, %273
  %274 = phi i8** [ %315, %273 ], [ %269, %268 ]
  %275 = phi i64 [ %316, %273 ], [ %270, %268 ]
  %276 = phi i8** [ %317, %273 ], [ %271, %268 ]
  %277 = bitcast i8** %276 to i64*
  %278 = load i64, i64* %277, align 8
  %279 = inttoptr i64 %275 to i64*
  store i64 %278, i64* %279, align 8
  %280 = getelementptr inbounds i8*, i8** %274, i64 1
  %281 = getelementptr inbounds i8*, i8** %276, i64 1
  %282 = bitcast i8** %281 to i64*
  %283 = load i64, i64* %282, align 8
  %284 = bitcast i8** %280 to i64*
  store i64 %283, i64* %284, align 8
  %285 = getelementptr inbounds i8*, i8** %274, i64 2
  %286 = getelementptr inbounds i8*, i8** %276, i64 2
  %287 = bitcast i8** %286 to i64*
  %288 = load i64, i64* %287, align 8
  %289 = bitcast i8** %285 to i64*
  store i64 %288, i64* %289, align 8
  %290 = getelementptr inbounds i8*, i8** %274, i64 3
  %291 = getelementptr inbounds i8*, i8** %276, i64 3
  %292 = bitcast i8** %291 to i64*
  %293 = load i64, i64* %292, align 8
  %294 = bitcast i8** %290 to i64*
  store i64 %293, i64* %294, align 8
  %295 = getelementptr inbounds i8*, i8** %274, i64 4
  %296 = getelementptr inbounds i8*, i8** %276, i64 4
  %297 = bitcast i8** %296 to i64*
  %298 = load i64, i64* %297, align 8
  %299 = bitcast i8** %295 to i64*
  store i64 %298, i64* %299, align 8
  %300 = getelementptr inbounds i8*, i8** %274, i64 5
  %301 = getelementptr inbounds i8*, i8** %276, i64 5
  %302 = bitcast i8** %301 to i64*
  %303 = load i64, i64* %302, align 8
  %304 = bitcast i8** %300 to i64*
  store i64 %303, i64* %304, align 8
  %305 = getelementptr inbounds i8*, i8** %274, i64 6
  %306 = getelementptr inbounds i8*, i8** %276, i64 6
  %307 = bitcast i8** %306 to i64*
  %308 = load i64, i64* %307, align 8
  %309 = bitcast i8** %305 to i64*
  store i64 %308, i64* %309, align 8
  %310 = getelementptr inbounds i8*, i8** %274, i64 7
  %311 = getelementptr inbounds i8*, i8** %276, i64 7
  %312 = bitcast i8** %311 to i64*
  %313 = load i64, i64* %312, align 8
  %314 = bitcast i8** %310 to i64*
  store i64 %313, i64* %314, align 8
  %315 = getelementptr inbounds i8*, i8** %274, i64 8
  %316 = ptrtoint i8** %315 to i64
  %317 = getelementptr inbounds i8*, i8** %276, i64 8
  %318 = icmp eq i8** %245, %315
  br i1 %318, label %319, label %273

319:                                              ; preds = %273, %268
  %320 = ptrtoint i8** %245 to i64
  %321 = load i8**, i8*** %200, align 8
  br label %322

322:                                              ; preds = %319, %231
  %323 = phi i8** [ %321, %319 ], [ %201, %231 ]
  %324 = phi i64 [ %320, %319 ], [ %238, %231 ]
  store i64 %236, i64* %175, align 8
  store i64 %238, i64* %168, align 8
  store i64 %324, i64* %165, align 8
  store i64 %240, i64* %173, align 8
  %325 = icmp eq i8** %323, null
  %326 = inttoptr i64 %324 to i64*
  br i1 %325, label %331, label %327

327:                                              ; preds = %322
  %328 = bitcast i8** %323 to i8*
  call void @_ZdlPv(i8* %328) #10
  %329 = bitcast i8*** %164 to i64**
  %330 = load i64*, i64** %329, align 8
  br label %331

331:                                              ; preds = %187, %219, %322, %327
  %332 = phi i64* [ %330, %327 ], [ %326, %322 ], [ %223, %219 ], [ %198, %187 ]
  store i64 %192, i64* %332, align 8
  %333 = load i8**, i8*** %164, align 8
  %334 = getelementptr inbounds i8*, i8** %333, i64 1
  store i8** %334, i8*** %164, align 8
  br label %458

335:                                              ; preds = %162
  %336 = bitcast %"struct.std::__1::__split_buffer.10"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %336) #9
  %337 = getelementptr inbounds %"struct.std::__1::__split_buffer.10", %"struct.std::__1::__split_buffer.10"* %4, i64 0, i32 1
  %338 = getelementptr inbounds %"struct.std::__1::__split_buffer.10", %"struct.std::__1::__split_buffer.10"* %4, i64 0, i32 2
  %339 = getelementptr inbounds %"struct.std::__1::__split_buffer.10", %"struct.std::__1::__split_buffer.10"* %4, i64 0, i32 3, i32 0, i32 0
  %340 = getelementptr inbounds %"struct.std::__1::__split_buffer.10", %"struct.std::__1::__split_buffer.10"* %4, i64 0, i32 3, i32 1, i32 0
  %341 = ashr exact i64 %177, 2
  %342 = icmp eq i64 %177, 0
  %343 = select i1 %342, i64 1, i64 %341
  %344 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3
  %345 = bitcast %"struct.std::__1::__split_buffer.10"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %345, i8 -86, i64 24, i1 false)
  store i8** null, i8*** %339, align 8
  %346 = bitcast %"class.std::__1::allocator"** %340 to %"class.std::__1::__compressed_pair.1"**
  store %"class.std::__1::__compressed_pair.1"* %344, %"class.std::__1::__compressed_pair.1"** %346, align 8
  %347 = icmp ugt i64 %343, 2305843009213693951
  br i1 %347, label %348, label %349

348:                                              ; preds = %335
  tail call void @abort() #12
  unreachable

349:                                              ; preds = %335
  %350 = shl i64 %343, 3
  %351 = tail call i8* @_Znwm(i64 %350) #10
  %352 = bitcast i8* %351 to i8**
  %353 = bitcast %"struct.std::__1::__split_buffer.10"* %4 to i8**
  store i8* %351, i8** %353, align 8
  %354 = getelementptr inbounds i8*, i8** %352, i64 %171
  store i8** %354, i8*** %338, align 8
  store i8** %354, i8*** %337, align 8
  %355 = getelementptr inbounds i8*, i8** %352, i64 %343
  store i8** %355, i8*** %339, align 8
  %356 = tail call i8* @_Znwm(i64 4096) #10
  %357 = ptrtoint i8* %356 to i64
  %358 = icmp eq i64 %171, %343
  %359 = ptrtoint i8** %355 to i64
  %360 = ptrtoint i8* %351 to i64
  %361 = ptrtoint i8** %354 to i64
  br i1 %358, label %362, label %396

362:                                              ; preds = %349
  %363 = icmp ugt i8** %354, %352
  br i1 %363, label %364, label %371

364:                                              ; preds = %362
  %365 = sub i64 %361, %360
  %366 = ashr exact i64 %365, 3
  %367 = add nsw i64 %366, 1
  %368 = sdiv i64 %367, -2
  %369 = getelementptr inbounds i8*, i8** %354, i64 %368
  store i8** %369, i8*** %338, align 8
  store i8** %369, i8*** %337, align 8
  %370 = ptrtoint i8** %369 to i64
  br label %396

371:                                              ; preds = %362
  %372 = sub i64 %359, %360
  %373 = ashr exact i64 %372, 2
  %374 = icmp eq i64 %372, 0
  %375 = select i1 %374, i64 1, i64 %373
  %376 = icmp ugt i64 %375, 2305843009213693951
  br i1 %376, label %377, label %378

377:                                              ; preds = %371
  tail call void @abort() #12
  unreachable

378:                                              ; preds = %371
  %379 = bitcast %"struct.std::__1::__split_buffer.10"* %4 to i64*
  %380 = bitcast i8*** %339 to i64*
  %381 = lshr i64 %375, 2
  %382 = shl i64 %375, 3
  %383 = tail call i8* @_Znwm(i64 %382) #10
  %384 = bitcast i8* %383 to i8**
  %385 = ptrtoint i8* %383 to i64
  %386 = getelementptr inbounds i8*, i8** %384, i64 %381
  %387 = ptrtoint i8** %386 to i64
  %388 = getelementptr inbounds i8*, i8** %384, i64 %375
  %389 = ptrtoint i8** %388 to i64
  store i64 %385, i64* %379, align 8
  %390 = bitcast i8*** %337 to i64*
  store i64 %387, i64* %390, align 8
  %391 = bitcast i8*** %338 to i64*
  store i64 %387, i64* %391, align 8
  store i64 %389, i64* %380, align 8
  tail call void @_ZdlPv(i8* nonnull %351) #10
  %392 = load i8**, i8*** %164, align 8
  %393 = load i8**, i8*** %167, align 8
  %394 = ptrtoint i8** %393 to i64
  %395 = ptrtoint i8** %392 to i64
  br label %396

396:                                              ; preds = %349, %364, %378
  %397 = phi i64 [ %389, %378 ], [ %359, %364 ], [ %359, %349 ]
  %398 = phi i64 [ %395, %378 ], [ %166, %364 ], [ %166, %349 ]
  %399 = phi i64 [ %387, %378 ], [ %370, %364 ], [ %361, %349 ]
  %400 = phi i64 [ %394, %378 ], [ %169, %364 ], [ %169, %349 ]
  %401 = phi i64 [ %385, %378 ], [ %360, %364 ], [ %360, %349 ]
  %402 = phi i8** [ %393, %378 ], [ %181, %364 ], [ %181, %349 ]
  %403 = phi i8** [ %392, %378 ], [ %180, %364 ], [ %180, %349 ]
  %404 = phi i8** [ %386, %378 ], [ %369, %364 ], [ %354, %349 ]
  %405 = bitcast i8** %404 to i64*
  store i64 %357, i64* %405, align 8
  %406 = getelementptr inbounds i8*, i8** %404, i64 1
  store i8** %406, i8*** %338, align 8
  %407 = icmp eq i8** %403, %402
  br i1 %407, label %408, label %453

408:                                              ; preds = %396
  %409 = ptrtoint i8** %406 to i64
  %410 = bitcast %"struct.std::__1::__split_buffer.10"* %4 to i64*
  %411 = bitcast i8*** %337 to i64*
  %412 = bitcast i8*** %338 to i64*
  %413 = bitcast i8*** %339 to i64*
  br label %425

414:                                              ; preds = %453
  %415 = ptrtoint i8** %456 to i64
  %416 = bitcast %"struct.std::__1::__split_buffer.10"* %4 to i64*
  %417 = load i64, i64* %416, align 8
  %418 = bitcast i8*** %337 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = load i64, i64* %165, align 8
  %421 = bitcast i8*** %338 to i64*
  %422 = load i64, i64* %421, align 8
  %423 = bitcast i8*** %339 to i64*
  %424 = load i64, i64* %423, align 8
  br label %425

425:                                              ; preds = %408, %414
  %426 = phi i64* [ %413, %408 ], [ %423, %414 ]
  %427 = phi i64* [ %412, %408 ], [ %421, %414 ]
  %428 = phi i64* [ %411, %408 ], [ %418, %414 ]
  %429 = phi i64* [ %410, %408 ], [ %416, %414 ]
  %430 = phi i64 [ %397, %408 ], [ %424, %414 ]
  %431 = phi i64 [ %409, %408 ], [ %422, %414 ]
  %432 = phi i64 [ %398, %408 ], [ %420, %414 ]
  %433 = phi i64 [ %399, %408 ], [ %419, %414 ]
  %434 = phi i64 [ %400, %408 ], [ %415, %414 ]
  %435 = phi i64 [ %401, %408 ], [ %417, %414 ]
  %436 = load i64, i64* %175, align 8
  store i64 %435, i64* %175, align 8
  store i64 %436, i64* %429, align 8
  store i64 %433, i64* %168, align 8
  store i64 %434, i64* %428, align 8
  store i64 %431, i64* %165, align 8
  store i64 %432, i64* %427, align 8
  %437 = load i64, i64* %173, align 8
  store i64 %430, i64* %173, align 8
  store i64 %437, i64* %426, align 8
  %438 = inttoptr i64 %434 to i8**
  %439 = inttoptr i64 %432 to i8**
  %440 = icmp eq i8** %439, %438
  br i1 %440, label %448, label %441

441:                                              ; preds = %425
  %442 = getelementptr i8*, i8** %439, i64 -1
  %443 = ptrtoint i8** %442 to i64
  %444 = sub i64 %443, %434
  %445 = lshr i64 %444, 3
  %446 = xor i64 %445, -1
  %447 = getelementptr i8*, i8** %439, i64 %446
  store i8** %447, i8*** %338, align 8
  br label %448

448:                                              ; preds = %441, %425
  %449 = icmp eq i64 %436, 0
  br i1 %449, label %452, label %450

450:                                              ; preds = %448
  %451 = inttoptr i64 %436 to i8*
  call void @_ZdlPv(i8* %451) #10
  br label %452

452:                                              ; preds = %448, %450
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %336) #9
  br label %458

453:                                              ; preds = %396, %453
  %454 = phi i8** [ %455, %453 ], [ %403, %396 ]
  %455 = getelementptr inbounds i8*, i8** %454, i64 -1
  call void @_ZNSt3__114__split_bufferIPN19CFX_CSSSyntaxParser4ModeERNS_9allocatorIS3_EEE10push_frontERKS3_(%"struct.std::__1::__split_buffer.10"* nonnull %4, i8** dereferenceable(8) %455)
  %456 = load i8**, i8*** %167, align 8
  %457 = icmp eq i8** %455, %456
  br i1 %457, label %414, label %453

458:                                              ; preds = %452, %331, %184, %158
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN19CFX_CSSSyntaxParser4ModeENS_9allocatorIS3_EEE9push_backEOS3_(%"struct.std::__1::__split_buffer"*, i8** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load i8**, i8*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load i8**, i8*** %5, align 8
  %7 = icmp eq i8** %4, %6
  %8 = ptrtoint i8** %6 to i64
  %9 = bitcast i8** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load i8**, i8*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load i8**, i8*** %13, align 8
  %15 = icmp ugt i8** %12, %14
  %16 = ptrtoint i8** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint i8** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds i8*, i8** %12, i64 %22
  %24 = ptrtoint i8** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast i8** %23 to i8*
  %30 = bitcast i8** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #9
  %31 = load i8**, i8*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi i8** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds i8*, i8** %23, i64 %26
  store i8** %34, i8*** %3, align 8
  %35 = getelementptr inbounds i8*, i8** %33, i64 %22
  store i8** %35, i8*** %11, align 8
  %36 = bitcast i8** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast i8*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #12
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #10
  %50 = bitcast i8* %49 to i8**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds i8*, i8** %50, i64 %47
  %53 = ptrtoint i8** %52 to i64
  %54 = getelementptr inbounds i8*, i8** %50, i64 %43
  %55 = ptrtoint i8** %54 to i64
  %56 = ptrtoint i8** %12 to i64
  %57 = ptrtoint i8** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds i8*, i8** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi i8** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi i8** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast i8** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds i8*, i8** %69, i64 1
  %77 = ptrtoint i8** %76 to i64
  %78 = getelementptr inbounds i8*, i8** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !6

81:                                               ; preds = %68
  %82 = ptrtoint i8** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi i8** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi i8** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi i8** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi i8** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast i8** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds i8*, i8** %89, i64 1
  %96 = getelementptr inbounds i8*, i8** %91, i64 1
  %97 = bitcast i8** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast i8** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds i8*, i8** %89, i64 2
  %101 = getelementptr inbounds i8*, i8** %91, i64 2
  %102 = bitcast i8** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast i8** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds i8*, i8** %89, i64 3
  %106 = getelementptr inbounds i8*, i8** %91, i64 3
  %107 = bitcast i8** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast i8** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds i8*, i8** %89, i64 4
  %111 = getelementptr inbounds i8*, i8** %91, i64 4
  %112 = bitcast i8** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast i8** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds i8*, i8** %89, i64 5
  %116 = getelementptr inbounds i8*, i8** %91, i64 5
  %117 = bitcast i8** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast i8** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds i8*, i8** %89, i64 6
  %121 = getelementptr inbounds i8*, i8** %91, i64 6
  %122 = bitcast i8** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast i8** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds i8*, i8** %89, i64 7
  %126 = getelementptr inbounds i8*, i8** %91, i64 7
  %127 = bitcast i8** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast i8** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds i8*, i8** %89, i64 8
  %131 = ptrtoint i8** %130 to i64
  %132 = getelementptr inbounds i8*, i8** %91, i64 8
  %133 = icmp eq i8** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint i8** %60 to i64
  %136 = load i8**, i8*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi i8** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast i8*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast i8*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq i8** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast i8** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #10
  %146 = bitcast i8*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast i8** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load i8**, i8*** %3, align 8
  %153 = getelementptr inbounds i8*, i8** %152, i64 1
  store i8** %153, i8*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN19CFX_CSSSyntaxParser4ModeENS_9allocatorIS3_EEE10push_frontEOS3_(%"struct.std::__1::__split_buffer"*, i8** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load i8**, i8*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load i8**, i8*** %5, align 8
  %7 = icmp eq i8** %4, %6
  %8 = ptrtoint i8** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load i8**, i8*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load i8**, i8*** %12, align 8
  %14 = icmp ult i8** %11, %13
  %15 = bitcast i8*** %12 to i64*
  %16 = ptrtoint i8** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint i8** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds i8*, i8** %11, i64 %22
  %24 = ptrtoint i8** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds i8*, i8** %23, i64 %29
  %31 = bitcast i8** %30 to i8*
  %32 = bitcast i8** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #9
  %33 = load i8**, i8*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi i8** [ %33, %27 ], [ %11, %17 ]
  %36 = phi i8** [ %30, %27 ], [ %23, %17 ]
  store i8** %36, i8*** %3, align 8
  %37 = getelementptr inbounds i8*, i8** %35, i64 %22
  store i8** %37, i8*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #12
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #10
  %51 = bitcast i8* %50 to i8**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds i8*, i8** %51, i64 %48
  %54 = ptrtoint i8** %53 to i64
  %55 = getelementptr inbounds i8*, i8** %51, i64 %43
  %56 = ptrtoint i8** %55 to i64
  %57 = ptrtoint i8** %4 to i64
  %58 = ptrtoint i8** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds i8*, i8** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi i8** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi i8** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast i8** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds i8*, i8** %70, i64 1
  %78 = ptrtoint i8** %77 to i64
  %79 = getelementptr inbounds i8*, i8** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !7

82:                                               ; preds = %69
  %83 = ptrtoint i8** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi i8** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi i8** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi i8** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi i8** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast i8** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds i8*, i8** %90, i64 1
  %97 = getelementptr inbounds i8*, i8** %92, i64 1
  %98 = bitcast i8** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast i8** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds i8*, i8** %90, i64 2
  %102 = getelementptr inbounds i8*, i8** %92, i64 2
  %103 = bitcast i8** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast i8** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds i8*, i8** %90, i64 3
  %107 = getelementptr inbounds i8*, i8** %92, i64 3
  %108 = bitcast i8** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast i8** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds i8*, i8** %90, i64 4
  %112 = getelementptr inbounds i8*, i8** %92, i64 4
  %113 = bitcast i8** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast i8** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds i8*, i8** %90, i64 5
  %117 = getelementptr inbounds i8*, i8** %92, i64 5
  %118 = bitcast i8** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast i8** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds i8*, i8** %90, i64 6
  %122 = getelementptr inbounds i8*, i8** %92, i64 6
  %123 = bitcast i8** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast i8** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds i8*, i8** %90, i64 7
  %127 = getelementptr inbounds i8*, i8** %92, i64 7
  %128 = bitcast i8** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast i8** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds i8*, i8** %90, i64 8
  %132 = ptrtoint i8** %131 to i64
  %133 = getelementptr inbounds i8*, i8** %92, i64 8
  %134 = icmp eq i8** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint i8** %61 to i64
  %137 = load i8**, i8*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi i8** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast i8*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast i8*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq i8** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast i8** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #10
  %146 = load i8**, i8*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi i8** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds i8*, i8** %148, i64 -1
  %150 = bitcast i8** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast i8** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load i8**, i8*** %3, align 8
  %154 = getelementptr inbounds i8*, i8** %153, i64 -1
  store i8** %154, i8*** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPN19CFX_CSSSyntaxParser4ModeERNS_9allocatorIS3_EEE10push_frontERKS3_(%"struct.std::__1::__split_buffer.10"*, i8** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.10", %"struct.std::__1::__split_buffer.10"* %0, i64 0, i32 1
  %4 = load i8**, i8*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.10", %"struct.std::__1::__split_buffer.10"* %0, i64 0, i32 0
  %6 = load i8**, i8*** %5, align 8
  %7 = icmp eq i8** %4, %6
  %8 = ptrtoint i8** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.10", %"struct.std::__1::__split_buffer.10"* %0, i64 0, i32 2
  %11 = load i8**, i8*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.10", %"struct.std::__1::__split_buffer.10"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load i8**, i8*** %12, align 8
  %14 = icmp ult i8** %11, %13
  %15 = bitcast i8*** %12 to i64*
  %16 = ptrtoint i8** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint i8** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds i8*, i8** %11, i64 %22
  %24 = ptrtoint i8** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds i8*, i8** %23, i64 %29
  %31 = bitcast i8** %30 to i8*
  %32 = bitcast i8** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #9
  %33 = load i8**, i8*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi i8** [ %33, %27 ], [ %11, %17 ]
  %36 = phi i8** [ %30, %27 ], [ %23, %17 ]
  store i8** %36, i8*** %3, align 8
  %37 = getelementptr inbounds i8*, i8** %35, i64 %22
  store i8** %37, i8*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.10"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #12
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #10
  %51 = bitcast i8* %50 to i8**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds i8*, i8** %51, i64 %48
  %54 = ptrtoint i8** %53 to i64
  %55 = getelementptr inbounds i8*, i8** %51, i64 %43
  %56 = ptrtoint i8** %55 to i64
  %57 = ptrtoint i8** %4 to i64
  %58 = ptrtoint i8** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds i8*, i8** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi i8** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi i8** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast i8** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds i8*, i8** %70, i64 1
  %78 = ptrtoint i8** %77 to i64
  %79 = getelementptr inbounds i8*, i8** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !8

82:                                               ; preds = %69
  %83 = ptrtoint i8** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi i8** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi i8** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi i8** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi i8** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast i8** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds i8*, i8** %90, i64 1
  %97 = getelementptr inbounds i8*, i8** %92, i64 1
  %98 = bitcast i8** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast i8** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds i8*, i8** %90, i64 2
  %102 = getelementptr inbounds i8*, i8** %92, i64 2
  %103 = bitcast i8** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast i8** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds i8*, i8** %90, i64 3
  %107 = getelementptr inbounds i8*, i8** %92, i64 3
  %108 = bitcast i8** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast i8** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds i8*, i8** %90, i64 4
  %112 = getelementptr inbounds i8*, i8** %92, i64 4
  %113 = bitcast i8** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast i8** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds i8*, i8** %90, i64 5
  %117 = getelementptr inbounds i8*, i8** %92, i64 5
  %118 = bitcast i8** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast i8** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds i8*, i8** %90, i64 6
  %122 = getelementptr inbounds i8*, i8** %92, i64 6
  %123 = bitcast i8** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast i8** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds i8*, i8** %90, i64 7
  %127 = getelementptr inbounds i8*, i8** %92, i64 7
  %128 = bitcast i8** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast i8** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds i8*, i8** %90, i64 8
  %132 = ptrtoint i8** %131 to i64
  %133 = getelementptr inbounds i8*, i8** %92, i64 8
  %134 = icmp eq i8** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint i8** %61 to i64
  %137 = load i8**, i8*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi i8** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast i8*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast i8*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq i8** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast i8** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #10
  %146 = load i8**, i8*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi i8** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds i8*, i8** %148, i64 -1
  %150 = bitcast i8** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast i8** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load i8**, i8*** %3, align 8
  %154 = getelementptr inbounds i8*, i8** %153, i64 -1
  store i8** %154, i8*** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { nounwind readnone }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = distinct !{!5, !4}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !4}
!8 = distinct !{!8, !4}
