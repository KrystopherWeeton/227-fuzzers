; ModuleID = '../../third_party/blink/renderer/platform/graphics/stroke_data.cc'
source_filename = "../../third_party/blink/renderer/platform/graphics/stroke_data.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::StrokeData" = type { i32, float, i32, i32, float, %class.sk_sp }
%class.sk_sp = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { float*, i32, i32 }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%"class.cc::PaintFlags" = type <{ %class.sk_sp, %class.sk_sp.2, %class.sk_sp.43, %class.sk_sp.44, %class.sk_sp.45, %class.sk_sp.46, i32, float, float, i32, %union.anon.47, [4 x i8] }>
%class.sk_sp.2 = type { %"class.cc::PaintShader"* }
%"class.cc::PaintShader" = type <{ %class.SkRefCnt.base, i8, [3 x i8], i32, float, float, i32, i32, i32, i8, [3 x i8], %"class.absl::optional", %struct.SkPoint, %struct.SkRect, %struct.SkPoint, %struct.SkPoint, float, float, %"class.cc::PaintImage", %class.sk_sp.10, i32, %"class.absl::optional.20", %"class.std::__1::vector.25", %"class.std::__1::vector.32", %class.sk_sp.38, %class.sk_sp.3, i32, [4 x i8] }>
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %class.SkMatrix }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }
%"class.cc::PaintImage" = type { %class.sk_sp.3, %class.sk_sp.10, %"class.gfx::Rect", i32, %class.sk_sp.15, %class.sk_sp.19, i32, i32, i32, i32, i8, i8, i32, i32, %class.sk_sp.3, %class.scoped_refptr }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%class.sk_sp.15 = type { %"class.cc::PaintImageGenerator"* }
%"class.cc::PaintImageGenerator" = type { %class.SkRefCnt.base, %struct.SkImageInfo, i32, %"class.std::__1::vector" }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.4, i32, i32 }
%class.sk_sp.4 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.5" }
%"struct.std::__1::atomic.5" = type { %"struct.std::__1::__atomic_base.6" }
%"struct.std::__1::__atomic_base.6" = type { %"struct.std::__1::__atomic_base.7" }
%"struct.std::__1::__atomic_base.7" = type { %"struct.std::__1::__cxx_atomic_impl.8" }
%"struct.std::__1::__cxx_atomic_impl.8" = type { %"struct.std::__1::__cxx_atomic_base_impl.9" }
%"struct.std::__1::__cxx_atomic_base_impl.9" = type { i8 }
%struct.SkISize = type { i32, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.cc::FrameMetadata"*, %"struct.cc::FrameMetadata"*, %"class.std::__1::__compressed_pair.16" }
%"struct.cc::FrameMetadata" = type { i8, %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %"struct.cc::FrameMetadata"* }
%class.sk_sp.19 = type { %"class.cc::TextureBacking"* }
%"class.cc::TextureBacking" = type { %class.SkRefCnt.base, [4 x i8] }
%class.scoped_refptr = type { %"class.cc::PaintWorkletInput"* }
%"class.cc::PaintWorkletInput" = type <{ i32 (...)**, %"class.base::RefCountedThreadSafe", [4 x i8] }>
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%class.sk_sp.10 = type { %"class.cc::PaintOpBuffer"* }
%"class.cc::PaintOpBuffer" = type <{ %class.SkRefCnt.base, [4 x i8], %"class.std::__1::unique_ptr.11", i64, i64, i64, i64, i64, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { i8* }
%"class.absl::optional.20" = type { %"class.absl::optional_internal::optional_data.21" }
%"class.absl::optional_internal::optional_data.21" = type { %"class.absl::optional_internal::optional_data_base.22" }
%"class.absl::optional_internal::optional_data_base.22" = type { %"class.absl::optional_internal::optional_data_dtor_base.23" }
%"class.absl::optional_internal::optional_data_dtor_base.23" = type { i8, %union.anon.24 }
%union.anon.24 = type { %"class.gfx::SizeF" }
%"class.gfx::SizeF" = type { float, float }
%"class.std::__1::vector.25" = type { %"class.std::__1::__vector_base.26" }
%"class.std::__1::__vector_base.26" = type { i32*, i32*, %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { i32* }
%"class.std::__1::vector.32" = type { %"class.std::__1::__vector_base.33" }
%"class.std::__1::__vector_base.33" = type { float*, float*, %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%class.sk_sp.38 = type { %class.SkPicture* }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.39", [7 x i8] }>
%"struct.std::__1::atomic.39" = type { %"struct.std::__1::__atomic_base.40" }
%"struct.std::__1::__atomic_base.40" = type { %"struct.std::__1::__cxx_atomic_impl.41" }
%"struct.std::__1::__cxx_atomic_impl.41" = type { %"struct.std::__1::__cxx_atomic_base_impl.42" }
%"struct.std::__1::__cxx_atomic_base_impl.42" = type { i8 }
%class.sk_sp.3 = type { %class.SkImage* }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%class.sk_sp.43 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.44 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.45 = type { %class.SkDrawLooper* }
%class.SkDrawLooper = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.46 = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type opaque
%union.anon.47 = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.50 }
%union.anon.50 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj = comdat any

@.str = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10StrokeData11SetLineDashERKN3WTF6VectorIfLj0ENS1_18PartitionAllocatorEEEf(%"class.blink::StrokeData"* nocapture, %"class.WTF::Vector"* dereferenceable(16), float) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.sk_sp, align 8
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %1, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = zext i32 %6 to i64
  %8 = icmp eq i32 %6, 0
  br i1 %8, label %9, label %24

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.blink::StrokeData", %"class.blink::StrokeData"* %0, i64 0, i32 0
  store i32 1, i32* %10, align 8
  %11 = getelementptr inbounds %"class.blink::StrokeData", %"class.blink::StrokeData"* %0, i64 0, i32 5, i32 0
  %12 = load %class.SkPathEffect*, %class.SkPathEffect** %11, align 8
  store %class.SkPathEffect* null, %class.SkPathEffect** %11, align 8
  %13 = icmp eq %class.SkPathEffect* %12, null
  br i1 %13, label %78, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %12, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = atomicrmw add i32* %15, i32 -1 acq_rel
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %18, label %78

18:                                               ; preds = %14
  %19 = bitcast %class.SkPathEffect* %12 to %class.SkRefCntBase*
  %20 = bitcast %class.SkPathEffect* %12 to void (%class.SkRefCntBase*)***
  %21 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %20, align 8
  %22 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %21, i64 2
  %23 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %22, align 8
  tail call void %23(%class.SkRefCntBase* nonnull %19) #9
  br label %78

24:                                               ; preds = %3
  %25 = and i64 %7, 1
  %26 = shl nuw nsw i64 %7, %25
  %27 = shl nuw nsw i64 %26, 2
  %28 = tail call i8* @_Znam(i64 %27) #10
  %29 = bitcast i8* %28 to float*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %28, i8 0, i64 %27, i1 false) #9
  %30 = icmp eq i64 %26, 0
  br i1 %30, label %31, label %66

31:                                               ; preds = %66, %24
  %32 = bitcast %class.sk_sp* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #9
  %33 = trunc i64 %26 to i32
  call void @_ZN16SkDashPathEffect4MakeEPKfif(%class.sk_sp* nonnull sret %4, float* nonnull %29, i32 %33, float %2) #9
  %34 = getelementptr inbounds %"class.blink::StrokeData", %"class.blink::StrokeData"* %0, i64 0, i32 5
  %35 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %4, i64 0, i32 0
  %36 = bitcast %class.sk_sp* %4 to i64*
  %37 = load i64, i64* %36, align 8
  store %class.SkPathEffect* null, %class.SkPathEffect** %35, align 8
  %38 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %34, i64 0, i32 0
  %39 = load %class.SkPathEffect*, %class.SkPathEffect** %38, align 8
  %40 = bitcast %class.sk_sp* %34 to i64*
  store i64 %37, i64* %40, align 8
  %41 = icmp eq %class.SkPathEffect* %39, null
  br i1 %41, label %52, label %42

42:                                               ; preds = %31
  %43 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %39, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = atomicrmw add i32* %43, i32 -1 acq_rel
  %45 = icmp eq i32 %44, 1
  br i1 %45, label %46, label %52

46:                                               ; preds = %42
  %47 = bitcast %class.SkPathEffect* %39 to %class.SkRefCntBase*
  %48 = bitcast %class.SkPathEffect* %39 to void (%class.SkRefCntBase*)***
  %49 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %48, align 8
  %50 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %49, i64 2
  %51 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %50, align 8
  call void %51(%class.SkRefCntBase* nonnull %47) #9
  br label %52

52:                                               ; preds = %31, %42, %46
  %53 = load %class.SkPathEffect*, %class.SkPathEffect** %35, align 8
  %54 = icmp eq %class.SkPathEffect* %53, null
  br i1 %54, label %65, label %55

55:                                               ; preds = %52
  %56 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %53, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %57 = atomicrmw add i32* %56, i32 -1 acq_rel
  %58 = icmp eq i32 %57, 1
  br i1 %58, label %59, label %65

59:                                               ; preds = %55
  %60 = bitcast %class.SkPathEffect* %53 to %class.SkRefCntBase*
  %61 = bitcast %class.SkPathEffect* %53 to void (%class.SkRefCntBase*)***
  %62 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %61, align 8
  %63 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %62, i64 2
  %64 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %63, align 8
  call void %64(%class.SkRefCntBase* nonnull %60) #9
  br label %65

65:                                               ; preds = %52, %55, %59
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %32) #9
  call void @_ZdaPv(i8* nonnull %28) #10
  br label %78

66:                                               ; preds = %24, %66
  %67 = phi i64 [ %76, %66 ], [ 0, %24 ]
  %68 = phi i32 [ %75, %66 ], [ 0, %24 ]
  %69 = urem i32 %68, %6
  %70 = tail call dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %1, i32 %69) #9
  %71 = bitcast float* %70 to i32*
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds float, float* %29, i64 %67
  %74 = bitcast float* %73 to i32*
  store i32 %72, i32* %74, align 4
  %75 = add i32 %68, 1
  %76 = zext i32 %75 to i64
  %77 = icmp ugt i64 %26, %76
  br i1 %77, label %66, label %31

78:                                               ; preds = %18, %14, %9, %65
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN16SkDashPathEffect4MakeEPKfif(%class.sk_sp* sret, float*, i32, float) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink10StrokeData10SetupPaintEPN2cc10PaintFlagsEii(%"class.blink::StrokeData"* nocapture readonly, %"class.cc::PaintFlags"* nocapture, i32, i32) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 10
  %6 = bitcast %union.anon.47* %5 to i16*
  %7 = load i16, i16* %6, align 8
  %8 = and i16 %7, -193
  %9 = or i16 %8, 64
  store i16 %9, i16* %6, align 8
  %10 = getelementptr inbounds %"class.blink::StrokeData", %"class.blink::StrokeData"* %0, i64 0, i32 1
  %11 = bitcast float* %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 7
  %14 = bitcast float* %13 to i32*
  store i32 %12, i32* %14, align 4
  %15 = getelementptr inbounds %"class.blink::StrokeData", %"class.blink::StrokeData"* %0, i64 0, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = trunc i32 %16 to i16
  %18 = shl i16 %17, 2
  %19 = and i16 %18, 12
  %20 = and i16 %9, -141
  %21 = or i16 %19, %20
  store i16 %21, i16* %6, align 8
  %22 = getelementptr inbounds %"class.blink::StrokeData", %"class.blink::StrokeData"* %0, i64 0, i32 3
  %23 = load i32, i32* %22, align 4
  %24 = trunc i32 %23 to i16
  %25 = shl i16 %24, 4
  %26 = and i16 %25, 48
  %27 = and i16 %21, -177
  %28 = or i16 %27, %26
  store i16 %28, i16* %6, align 8
  %29 = getelementptr inbounds %"class.blink::StrokeData", %"class.blink::StrokeData"* %0, i64 0, i32 4
  %30 = bitcast float* %29 to i32*
  %31 = load i32, i32* %30, align 8
  %32 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 8
  %33 = bitcast float* %32 to i32*
  store i32 %31, i32* %33, align 8
  tail call void @_ZNK5blink10StrokeData24SetupPaintDashPathEffectEPN2cc10PaintFlagsEii(%"class.blink::StrokeData"* %0, %"class.cc::PaintFlags"* %1, i32 %2, i32 %3)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink10StrokeData24SetupPaintDashPathEffectEPN2cc10PaintFlagsEii(%"class.blink::StrokeData"* nocapture readonly, %"class.cc::PaintFlags"* nocapture, i32, i32) local_unnamed_addr #0 align 2 {
  %5 = alloca [2 x float], align 4
  %6 = alloca %class.sk_sp, align 8
  %7 = alloca [2 x float], align 4
  %8 = alloca %class.sk_sp, align 8
  %9 = alloca [2 x float], align 4
  %10 = alloca %class.sk_sp, align 8
  %11 = alloca [2 x float], align 4
  %12 = alloca %class.sk_sp, align 8
  %13 = icmp eq i32 %3, 0
  br i1 %13, label %16, label %14

14:                                               ; preds = %4
  %15 = sitofp i32 %3 to float
  br label %19

16:                                               ; preds = %4
  %17 = getelementptr inbounds %"class.blink::StrokeData", %"class.blink::StrokeData"* %0, i64 0, i32 1
  %18 = load float, float* %17, align 4
  br label %19

19:                                               ; preds = %16, %14
  %20 = phi float [ %15, %14 ], [ %18, %16 ]
  %21 = fptosi float %20 to i32
  %22 = getelementptr inbounds %"class.blink::StrokeData", %"class.blink::StrokeData"* %0, i64 0, i32 5, i32 0
  %23 = load %class.SkPathEffect*, %class.SkPathEffect** %22, align 8
  %24 = icmp eq %class.SkPathEffect* %23, null
  br i1 %24, label %43, label %25

25:                                               ; preds = %19
  %26 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %23, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %27 = atomicrmw add i32* %26, i32 1 monotonic
  %28 = ptrtoint %class.SkPathEffect* %23 to i64
  %29 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 0, i32 0
  %30 = load %class.SkPathEffect*, %class.SkPathEffect** %29, align 8
  %31 = bitcast %"class.cc::PaintFlags"* %1 to i64*
  store i64 %28, i64* %31, align 8
  %32 = icmp eq %class.SkPathEffect* %30, null
  br i1 %32, label %310, label %33

33:                                               ; preds = %25
  %34 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %30, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = atomicrmw add i32* %34, i32 -1 acq_rel
  %36 = icmp eq i32 %35, 1
  br i1 %36, label %37, label %310

37:                                               ; preds = %33
  %38 = bitcast %class.SkPathEffect* %30 to %class.SkRefCntBase*
  %39 = bitcast %class.SkPathEffect* %30 to void (%class.SkRefCntBase*)***
  %40 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %39, align 8
  %41 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %40, i64 2
  %42 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %41, align 8
  tail call void %42(%class.SkRefCntBase* nonnull %38) #9
  br label %310

43:                                               ; preds = %19
  %44 = sitofp i32 %21 to float
  %45 = getelementptr inbounds %"class.blink::StrokeData", %"class.blink::StrokeData"* %0, i64 0, i32 0
  %46 = load i32, i32* %45, align 8
  %47 = icmp eq i32 %46, 3
  br i1 %47, label %52, label %48

48:                                               ; preds = %43
  %49 = icmp eq i32 %46, 2
  %50 = icmp slt i32 %21, 4
  %51 = and i1 %50, %49
  br i1 %51, label %58, label %185

52:                                               ; preds = %43
  %53 = icmp sgt i32 %21, 2
  %54 = select i1 %53, float 2.000000e+00, float 3.000000e+00
  %55 = fmul float %54, %44
  %56 = select i1 %53, float 1.000000e+00, float 2.000000e+00
  %57 = fmul float %56, %44
  br label %58

58:                                               ; preds = %48, %52
  %59 = phi float [ %57, %52 ], [ %44, %48 ]
  %60 = phi float [ %55, %52 ], [ %44, %48 ]
  %61 = sitofp i32 %2 to float
  %62 = fmul float %60, 2.000000e+00
  %63 = fcmp ult float %62, %61
  br i1 %63, label %79, label %64

64:                                               ; preds = %58
  %65 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 0, i32 0
  %66 = load %class.SkPathEffect*, %class.SkPathEffect** %65, align 8
  %67 = bitcast %"class.cc::PaintFlags"* %1 to i64*
  store i64 0, i64* %67, align 8
  %68 = icmp eq %class.SkPathEffect* %66, null
  br i1 %68, label %310, label %69

69:                                               ; preds = %64
  %70 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %66, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %71 = atomicrmw add i32* %70, i32 -1 acq_rel
  %72 = icmp eq i32 %71, 1
  br i1 %72, label %73, label %310

73:                                               ; preds = %69
  %74 = bitcast %class.SkPathEffect* %66 to %class.SkRefCntBase*
  %75 = bitcast %class.SkPathEffect* %66 to void (%class.SkRefCntBase*)***
  %76 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %75, align 8
  %77 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %76, i64 2
  %78 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %77, align 8
  tail call void %78(%class.SkRefCntBase* nonnull %74) #9
  br label %310

79:                                               ; preds = %58
  %80 = fadd float %59, %62
  %81 = fcmp ult float %80, %61
  br i1 %81, label %120, label %82

82:                                               ; preds = %79
  %83 = fdiv float %61, %80
  %84 = bitcast [2 x float]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %84) #9
  %85 = getelementptr inbounds [2 x float], [2 x float]* %5, i64 0, i64 0
  %86 = getelementptr inbounds [2 x float], [2 x float]* %5, i64 0, i64 1
  %87 = fmul float %60, %83
  store float %87, float* %85, align 4
  %88 = fmul float %59, %83
  store float %88, float* %86, align 4
  call void @_ZN16SkDashPathEffect4MakeEPKfif(%class.sk_sp* nonnull sret %6, float* nonnull %85, i32 2, float 0.000000e+00) #9
  %89 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %6, i64 0, i32 0
  %90 = bitcast %class.sk_sp* %6 to i64*
  %91 = load i64, i64* %90, align 8
  store %class.SkPathEffect* null, %class.SkPathEffect** %89, align 8
  %92 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 0, i32 0
  %93 = load %class.SkPathEffect*, %class.SkPathEffect** %92, align 8
  %94 = bitcast %"class.cc::PaintFlags"* %1 to i64*
  store i64 %91, i64* %94, align 8
  %95 = icmp eq %class.SkPathEffect* %93, null
  br i1 %95, label %106, label %96

96:                                               ; preds = %82
  %97 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %93, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %98 = atomicrmw add i32* %97, i32 -1 acq_rel
  %99 = icmp eq i32 %98, 1
  br i1 %99, label %100, label %106

100:                                              ; preds = %96
  %101 = bitcast %class.SkPathEffect* %93 to %class.SkRefCntBase*
  %102 = bitcast %class.SkPathEffect* %93 to void (%class.SkRefCntBase*)***
  %103 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %102, align 8
  %104 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %103, i64 2
  %105 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %104, align 8
  call void %105(%class.SkRefCntBase* nonnull %101) #9
  br label %106

106:                                              ; preds = %82, %96, %100
  %107 = load %class.SkPathEffect*, %class.SkPathEffect** %89, align 8
  %108 = icmp eq %class.SkPathEffect* %107, null
  br i1 %108, label %119, label %109

109:                                              ; preds = %106
  %110 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %107, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %111 = atomicrmw add i32* %110, i32 -1 acq_rel
  %112 = icmp eq i32 %111, 1
  br i1 %112, label %113, label %119

113:                                              ; preds = %109
  %114 = bitcast %class.SkPathEffect* %107 to %class.SkRefCntBase*
  %115 = bitcast %class.SkPathEffect* %107 to void (%class.SkRefCntBase*)***
  %116 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %115, align 8
  %117 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %116, i64 2
  %118 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %117, align 8
  call void %118(%class.SkRefCntBase* nonnull %114) #9
  br label %119

119:                                              ; preds = %106, %109, %113
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %84) #9
  br label %310

120:                                              ; preds = %79
  br i1 %47, label %121, label %149

121:                                              ; preds = %120
  %122 = fadd float %59, %61
  %123 = fadd float %59, %60
  %124 = fdiv float %122, %123
  %125 = tail call float @llvm.floor.f32(float %124) #9
  %126 = fadd float %125, 1.000000e+00
  %127 = insertelement <2 x float> undef, float %60, i32 0
  %128 = shufflevector <2 x float> %127, <2 x float> undef, <2 x i32> zeroinitializer
  %129 = insertelement <2 x float> undef, float %125, i32 0
  %130 = insertelement <2 x float> %129, float %126, i32 1
  %131 = fmul <2 x float> %128, %130
  %132 = insertelement <2 x float> undef, float %61, i32 0
  %133 = shufflevector <2 x float> %132, <2 x float> undef, <2 x i32> zeroinitializer
  %134 = fsub <2 x float> %133, %131
  %135 = fadd <2 x float> %130, <float -1.000000e+00, float -1.000000e+00>
  %136 = fdiv <2 x float> %134, %135
  %137 = extractelement <2 x float> %136, i32 1
  %138 = fcmp ugt float %137, 0.000000e+00
  %139 = extractelement <2 x float> %136, i32 0
  br i1 %138, label %140, label %149

140:                                              ; preds = %121
  %141 = insertelement <2 x float> undef, float %59, i32 0
  %142 = shufflevector <2 x float> %141, <2 x float> undef, <2 x i32> zeroinitializer
  %143 = fsub <2 x float> %136, %142
  %144 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %143)
  %145 = extractelement <2 x float> %144, i32 0
  %146 = extractelement <2 x float> %144, i32 1
  %147 = fcmp olt float %145, %146
  br i1 %147, label %149, label %148

148:                                              ; preds = %140
  br label %149

149:                                              ; preds = %148, %140, %121, %120
  %150 = phi float [ %59, %120 ], [ %137, %148 ], [ %139, %121 ], [ %139, %140 ]
  %151 = bitcast [2 x float]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %151) #9
  %152 = getelementptr inbounds [2 x float], [2 x float]* %7, i64 0, i64 0
  %153 = getelementptr inbounds [2 x float], [2 x float]* %7, i64 0, i64 1
  store float %60, float* %152, align 4
  store float %150, float* %153, align 4
  call void @_ZN16SkDashPathEffect4MakeEPKfif(%class.sk_sp* nonnull sret %8, float* nonnull %152, i32 2, float 0.000000e+00) #9
  %154 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %8, i64 0, i32 0
  %155 = bitcast %class.sk_sp* %8 to i64*
  %156 = load i64, i64* %155, align 8
  store %class.SkPathEffect* null, %class.SkPathEffect** %154, align 8
  %157 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 0, i32 0
  %158 = load %class.SkPathEffect*, %class.SkPathEffect** %157, align 8
  %159 = bitcast %"class.cc::PaintFlags"* %1 to i64*
  store i64 %156, i64* %159, align 8
  %160 = icmp eq %class.SkPathEffect* %158, null
  br i1 %160, label %171, label %161

161:                                              ; preds = %149
  %162 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %158, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %163 = atomicrmw add i32* %162, i32 -1 acq_rel
  %164 = icmp eq i32 %163, 1
  br i1 %164, label %165, label %171

165:                                              ; preds = %161
  %166 = bitcast %class.SkPathEffect* %158 to %class.SkRefCntBase*
  %167 = bitcast %class.SkPathEffect* %158 to void (%class.SkRefCntBase*)***
  %168 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %167, align 8
  %169 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %168, i64 2
  %170 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %169, align 8
  call void %170(%class.SkRefCntBase* nonnull %166) #9
  br label %171

171:                                              ; preds = %149, %161, %165
  %172 = load %class.SkPathEffect*, %class.SkPathEffect** %154, align 8
  %173 = icmp eq %class.SkPathEffect* %172, null
  br i1 %173, label %184, label %174

174:                                              ; preds = %171
  %175 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %172, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %176 = atomicrmw add i32* %175, i32 -1 acq_rel
  %177 = icmp eq i32 %176, 1
  br i1 %177, label %178, label %184

178:                                              ; preds = %174
  %179 = bitcast %class.SkPathEffect* %172 to %class.SkRefCntBase*
  %180 = bitcast %class.SkPathEffect* %172 to void (%class.SkRefCntBase*)***
  %181 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %180, align 8
  %182 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %181, i64 2
  %183 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %182, align 8
  call void %183(%class.SkRefCntBase* nonnull %179) #9
  br label %184

184:                                              ; preds = %171, %174, %178
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %151) #9
  br label %310

185:                                              ; preds = %48
  br i1 %49, label %186, label %295

186:                                              ; preds = %185
  %187 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 10
  %188 = bitcast %union.anon.47* %187 to i16*
  %189 = load i16, i16* %188, align 8
  %190 = and i16 %189, -13
  %191 = or i16 %190, 4
  store i16 %191, i16* %188, align 8
  %192 = shl nsw i32 %21, 1
  %193 = sitofp i32 %192 to float
  %194 = sitofp i32 %2 to float
  %195 = fcmp olt float %194, %193
  br i1 %195, label %196, label %231

196:                                              ; preds = %186
  %197 = bitcast [2 x float]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %197) #9
  %198 = getelementptr inbounds [2 x float], [2 x float]* %9, i64 0, i64 0
  %199 = getelementptr inbounds [2 x float], [2 x float]* %9, i64 0, i64 1
  store float 0.000000e+00, float* %198, align 4
  store float %193, float* %199, align 4
  call void @_ZN16SkDashPathEffect4MakeEPKfif(%class.sk_sp* nonnull sret %10, float* nonnull %198, i32 2, float 0.000000e+00) #9
  %200 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %10, i64 0, i32 0
  %201 = bitcast %class.sk_sp* %10 to i64*
  %202 = load i64, i64* %201, align 8
  store %class.SkPathEffect* null, %class.SkPathEffect** %200, align 8
  %203 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 0, i32 0
  %204 = load %class.SkPathEffect*, %class.SkPathEffect** %203, align 8
  %205 = bitcast %"class.cc::PaintFlags"* %1 to i64*
  store i64 %202, i64* %205, align 8
  %206 = icmp eq %class.SkPathEffect* %204, null
  br i1 %206, label %217, label %207

207:                                              ; preds = %196
  %208 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %204, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %209 = atomicrmw add i32* %208, i32 -1 acq_rel
  %210 = icmp eq i32 %209, 1
  br i1 %210, label %211, label %217

211:                                              ; preds = %207
  %212 = bitcast %class.SkPathEffect* %204 to %class.SkRefCntBase*
  %213 = bitcast %class.SkPathEffect* %204 to void (%class.SkRefCntBase*)***
  %214 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %213, align 8
  %215 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %214, i64 2
  %216 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %215, align 8
  call void %216(%class.SkRefCntBase* nonnull %212) #9
  br label %217

217:                                              ; preds = %196, %207, %211
  %218 = load %class.SkPathEffect*, %class.SkPathEffect** %200, align 8
  %219 = icmp eq %class.SkPathEffect* %218, null
  br i1 %219, label %230, label %220

220:                                              ; preds = %217
  %221 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %218, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %222 = atomicrmw add i32* %221, i32 -1 acq_rel
  %223 = icmp eq i32 %222, 1
  br i1 %223, label %224, label %230

224:                                              ; preds = %220
  %225 = bitcast %class.SkPathEffect* %218 to %class.SkRefCntBase*
  %226 = bitcast %class.SkPathEffect* %218 to void (%class.SkRefCntBase*)***
  %227 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %226, align 8
  %228 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %227, i64 2
  %229 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %228, align 8
  call void %229(%class.SkRefCntBase* nonnull %225) #9
  br label %230

230:                                              ; preds = %217, %220, %224
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %197) #9
  br label %310

231:                                              ; preds = %186
  %232 = fadd float %194, %44
  %233 = fadd float %44, %44
  %234 = fdiv float %232, %233
  %235 = tail call float @llvm.floor.f32(float %234) #9
  %236 = fadd float %235, 1.000000e+00
  %237 = insertelement <2 x float> undef, float %235, i32 0
  %238 = insertelement <2 x float> %237, float %236, i32 1
  %239 = insertelement <2 x float> undef, float %44, i32 0
  %240 = shufflevector <2 x float> %239, <2 x float> undef, <2 x i32> zeroinitializer
  %241 = fmul <2 x float> %238, %240
  %242 = insertelement <2 x float> undef, float %194, i32 0
  %243 = shufflevector <2 x float> %242, <2 x float> undef, <2 x i32> zeroinitializer
  %244 = fsub <2 x float> %243, %241
  %245 = fadd <2 x float> %238, <float -1.000000e+00, float -1.000000e+00>
  %246 = fdiv <2 x float> %244, %245
  %247 = extractelement <2 x float> %246, i32 1
  %248 = fcmp ugt float %247, 0.000000e+00
  %249 = extractelement <2 x float> %246, i32 0
  br i1 %248, label %250, label %257

250:                                              ; preds = %231
  %251 = fsub <2 x float> %246, %240
  %252 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %251)
  %253 = extractelement <2 x float> %252, i32 0
  %254 = extractelement <2 x float> %252, i32 1
  %255 = fcmp olt float %253, %254
  br i1 %255, label %257, label %256

256:                                              ; preds = %250
  br label %257

257:                                              ; preds = %231, %250, %256
  %258 = phi float [ %247, %256 ], [ %249, %231 ], [ %249, %250 ]
  %259 = bitcast [2 x float]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %259) #9
  %260 = getelementptr inbounds [2 x float], [2 x float]* %11, i64 0, i64 0
  %261 = getelementptr inbounds [2 x float], [2 x float]* %11, i64 0, i64 1
  store float 0.000000e+00, float* %260, align 4
  %262 = fadd float %258, %44
  %263 = fadd float %262, 0xBF847AE140000000
  store float %263, float* %261, align 4
  call void @_ZN16SkDashPathEffect4MakeEPKfif(%class.sk_sp* nonnull sret %12, float* nonnull %260, i32 2, float 0.000000e+00) #9
  %264 = getelementptr inbounds %class.sk_sp, %class.sk_sp* %12, i64 0, i32 0
  %265 = bitcast %class.sk_sp* %12 to i64*
  %266 = load i64, i64* %265, align 8
  store %class.SkPathEffect* null, %class.SkPathEffect** %264, align 8
  %267 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 0, i32 0
  %268 = load %class.SkPathEffect*, %class.SkPathEffect** %267, align 8
  %269 = bitcast %"class.cc::PaintFlags"* %1 to i64*
  store i64 %266, i64* %269, align 8
  %270 = icmp eq %class.SkPathEffect* %268, null
  br i1 %270, label %281, label %271

271:                                              ; preds = %257
  %272 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %268, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %273 = atomicrmw add i32* %272, i32 -1 acq_rel
  %274 = icmp eq i32 %273, 1
  br i1 %274, label %275, label %281

275:                                              ; preds = %271
  %276 = bitcast %class.SkPathEffect* %268 to %class.SkRefCntBase*
  %277 = bitcast %class.SkPathEffect* %268 to void (%class.SkRefCntBase*)***
  %278 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %277, align 8
  %279 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %278, i64 2
  %280 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %279, align 8
  call void %280(%class.SkRefCntBase* nonnull %276) #9
  br label %281

281:                                              ; preds = %257, %271, %275
  %282 = load %class.SkPathEffect*, %class.SkPathEffect** %264, align 8
  %283 = icmp eq %class.SkPathEffect* %282, null
  br i1 %283, label %294, label %284

284:                                              ; preds = %281
  %285 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %282, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %286 = atomicrmw add i32* %285, i32 -1 acq_rel
  %287 = icmp eq i32 %286, 1
  br i1 %287, label %288, label %294

288:                                              ; preds = %284
  %289 = bitcast %class.SkPathEffect* %282 to %class.SkRefCntBase*
  %290 = bitcast %class.SkPathEffect* %282 to void (%class.SkRefCntBase*)***
  %291 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %290, align 8
  %292 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %291, i64 2
  %293 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %292, align 8
  call void %293(%class.SkRefCntBase* nonnull %289) #9
  br label %294

294:                                              ; preds = %281, %284, %288
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %259) #9
  br label %310

295:                                              ; preds = %185
  %296 = getelementptr inbounds %"class.cc::PaintFlags", %"class.cc::PaintFlags"* %1, i64 0, i32 0, i32 0
  %297 = load %class.SkPathEffect*, %class.SkPathEffect** %296, align 8
  %298 = bitcast %"class.cc::PaintFlags"* %1 to i64*
  store i64 0, i64* %298, align 8
  %299 = icmp eq %class.SkPathEffect* %297, null
  br i1 %299, label %310, label %300

300:                                              ; preds = %295
  %301 = getelementptr inbounds %class.SkPathEffect, %class.SkPathEffect* %297, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %302 = atomicrmw add i32* %301, i32 -1 acq_rel
  %303 = icmp eq i32 %302, 1
  br i1 %303, label %304, label %310

304:                                              ; preds = %300
  %305 = bitcast %class.SkPathEffect* %297 to %class.SkRefCntBase*
  %306 = bitcast %class.SkPathEffect* %297 to void (%class.SkRefCntBase*)***
  %307 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %306, align 8
  %308 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %307, i64 2
  %309 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %308, align 8
  tail call void %309(%class.SkRefCntBase* nonnull %305) #9
  br label %310

310:                                              ; preds = %295, %300, %304, %64, %69, %73, %25, %33, %37, %119, %184, %294, %230
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZN5blink10StrokeData14StrokeIsDashedEfNS_11StrokeStyleE(float, i32) local_unnamed_addr #3 align 2 {
  %3 = icmp eq i32 %1, 3
  br i1 %3, label %8, label %4

4:                                                ; preds = %2
  %5 = icmp eq i32 %1, 2
  %6 = fcmp ole float %0, 3.000000e+00
  %7 = and i1 %6, %5
  br label %8

8:                                                ; preds = %4, %2
  %9 = phi i1 [ true, %2 ], [ %7, %4 ]
  ret i1 %9
}

; Function Attrs: nounwind readnone ssp uwtable
define hidden float @_ZN5blink10StrokeData17SelectBestDashGapEfff(float, float, float) local_unnamed_addr #4 align 2 {
  %4 = fadd float %0, %2
  %5 = fadd float %1, %2
  %6 = fdiv float %4, %5
  %7 = tail call float @llvm.floor.f32(float %6)
  %8 = fadd float %7, 1.000000e+00
  %9 = insertelement <2 x float> undef, float %7, i32 0
  %10 = insertelement <2 x float> %9, float %8, i32 1
  %11 = insertelement <2 x float> undef, float %1, i32 0
  %12 = shufflevector <2 x float> %11, <2 x float> undef, <2 x i32> zeroinitializer
  %13 = fmul <2 x float> %10, %12
  %14 = insertelement <2 x float> undef, float %0, i32 0
  %15 = shufflevector <2 x float> %14, <2 x float> undef, <2 x i32> zeroinitializer
  %16 = fsub <2 x float> %15, %13
  %17 = fadd <2 x float> %10, <float -1.000000e+00, float -1.000000e+00>
  %18 = fdiv <2 x float> %16, %17
  %19 = extractelement <2 x float> %18, i32 1
  %20 = fcmp ugt float %19, 0.000000e+00
  %21 = extractelement <2 x float> %18, i32 0
  br i1 %20, label %22, label %31

22:                                               ; preds = %3
  %23 = insertelement <2 x float> undef, float %2, i32 0
  %24 = shufflevector <2 x float> %23, <2 x float> undef, <2 x i32> zeroinitializer
  %25 = fsub <2 x float> %18, %24
  %26 = call <2 x float> @llvm.fabs.v2f32(<2 x float> %25)
  %27 = extractelement <2 x float> %26, i32 0
  %28 = extractelement <2 x float> %26, i32 1
  %29 = fcmp olt float %27, %28
  br i1 %29, label %31, label %30

30:                                               ; preds = %22
  br label %31

31:                                               ; preds = %22, %3, %30
  %32 = phi float [ %19, %30 ], [ %21, %3 ], [ %21, %22 ]
  ret float %32
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(4) float* @_ZNK3WTF6VectorIfLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #9
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #9
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #9
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #9
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #9
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #9
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #9
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #9
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load float*, float** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds float, float* %24, i64 %25
  ret float* %26
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare <2 x float> @llvm.fabs.v2f32(<2 x float>) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
