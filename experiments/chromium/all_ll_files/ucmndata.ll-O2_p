; ModuleID = '../../third_party/icu/source/common/ucmndata.cpp'
source_filename = "../../third_party/icu/source/common/ucmndata.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.commonDataFuncs = type { %struct.DataHeader* (%struct.UDataMemory*, i8*, i32*, i32*)*, i32 (%struct.UDataMemory*)* }
%struct.DataHeader = type { %struct.MappedData, %struct.UDataInfo }
%struct.MappedData = type { i16, i8, i8 }
%struct.UDataInfo = type { i16, i16, i8, i8, i8, i8, [4 x i8], [4 x i8], [4 x i8] }
%struct.UDataMemory = type { %struct.commonDataFuncs*, %struct.DataHeader*, i8*, i8, i8*, i8*, i32 }
%struct.UDataOffsetTOCEntry = type { i32, i32 }
%struct.UDataOffsetTOC = type { i32, [1 x %struct.UDataOffsetTOCEntry] }
%struct.PointerTOCEntry = type { i8*, %struct.DataHeader* }
%struct.PointerTOC = type { i32, i32, [1 x %struct.PointerTOCEntry] }

@_ZL9CmnDFuncs = internal constant %struct.commonDataFuncs { %struct.DataHeader* (%struct.UDataMemory*, i8*, i32*, i32*)* @_ZL17offsetTOCLookupFnPK11UDataMemoryPKcPiP10UErrorCode, i32 (%struct.UDataMemory*)* @_ZL19offsetTOCEntryCountPK11UDataMemory }, align 8
@_ZL9ToCPFuncs = internal constant %struct.commonDataFuncs { %struct.DataHeader* (%struct.UDataMemory*, i8*, i32*, i32*)* @_ZL18pointerTOCLookupFnPK11UDataMemoryPKcPiP10UErrorCode, i32 (%struct.UDataMemory*)* @_ZL20pointerTOCEntryCountPK11UDataMemory }, align 8

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i16 @udata_getHeaderSize_69(%struct.DataHeader* readonly) local_unnamed_addr #0 {
  %2 = icmp eq %struct.DataHeader* %0, null
  br i1 %2, label %11, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.DataHeader, %struct.DataHeader* %0, i64 0, i32 1, i32 2
  %5 = load i8, i8* %4, align 2
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.DataHeader, %struct.DataHeader* %0, i64 0, i32 0, i32 0
  %8 = load i16, i16* %7, align 2
  %9 = tail call i16 @llvm.bswap.i16(i16 %8)
  %10 = select i1 %6, i16 %8, i16 %9
  ret i16 %10

11:                                               ; preds = %1
  ret i16 0
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i16 @udata_getInfoSize_69(%struct.UDataInfo* readonly) local_unnamed_addr #0 {
  %2 = icmp eq %struct.UDataInfo* %0, null
  br i1 %2, label %11, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.UDataInfo, %struct.UDataInfo* %0, i64 0, i32 2
  %5 = load i8, i8* %4, align 2
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %struct.UDataInfo, %struct.UDataInfo* %0, i64 0, i32 0
  %8 = load i16, i16* %7, align 2
  %9 = tail call i16 @llvm.bswap.i16(i16 %8)
  %10 = select i1 %6, i16 %8, i16 %9
  ret i16 %10

11:                                               ; preds = %1
  ret i16 0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @udata_checkCommonData_69(%struct.UDataMemory*, i32* nocapture) local_unnamed_addr #1 {
  %3 = load i32, i32* %1, align 4
  %4 = icmp slt i32 %3, 1
  br i1 %4, label %5, label %88

5:                                                ; preds = %2
  %6 = icmp eq %struct.UDataMemory* %0, null
  br i1 %6, label %86, label %7

7:                                                ; preds = %5
  %8 = getelementptr inbounds %struct.UDataMemory, %struct.UDataMemory* %0, i64 0, i32 1
  %9 = load %struct.DataHeader*, %struct.DataHeader** %8, align 8
  %10 = icmp eq %struct.DataHeader* %9, null
  br i1 %10, label %86, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.DataHeader, %struct.DataHeader* %9, i64 0, i32 0, i32 1
  %13 = load i8, i8* %12, align 2
  %14 = icmp eq i8 %13, -38
  br i1 %14, label %15, label %86

15:                                               ; preds = %11
  %16 = getelementptr inbounds %struct.DataHeader, %struct.DataHeader* %9, i64 0, i32 0, i32 2
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 39
  br i1 %18, label %19, label %86

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.DataHeader, %struct.DataHeader* %9, i64 0, i32 1, i32 2
  %21 = load i8, i8* %20, align 2
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %86

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.DataHeader, %struct.DataHeader* %9, i64 0, i32 1, i32 3
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %86

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.DataHeader, %struct.DataHeader* %9, i64 0, i32 1, i32 6, i64 0
  %29 = load i8, i8* %28, align 2
  switch i8 %29, label %86 [
    i8 67, label %30
    i8 84, label %54
  ]

30:                                               ; preds = %27
  %31 = getelementptr inbounds %struct.DataHeader, %struct.DataHeader* %9, i64 0, i32 1, i32 6, i64 1
  %32 = load i8, i8* %31, align 1
  %33 = icmp eq i8 %32, 109
  br i1 %33, label %34, label %86

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.DataHeader, %struct.DataHeader* %9, i64 0, i32 1, i32 6, i64 2
  %36 = load i8, i8* %35, align 2
  %37 = icmp eq i8 %36, 110
  br i1 %37, label %38, label %86

38:                                               ; preds = %34
  %39 = getelementptr inbounds %struct.DataHeader, %struct.DataHeader* %9, i64 0, i32 1, i32 6, i64 3
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 68
  br i1 %41, label %42, label %86

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.DataHeader, %struct.DataHeader* %9, i64 0, i32 1, i32 7, i64 0
  %44 = load i8, i8* %43, align 2
  %45 = icmp eq i8 %44, 1
  br i1 %45, label %46, label %86

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.UDataMemory, %struct.UDataMemory* %0, i64 0, i32 0
  store %struct.commonDataFuncs* @_ZL9CmnDFuncs, %struct.commonDataFuncs** %47, align 8
  %48 = load i8, i8* %20, align 2
  %49 = icmp eq i8 %48, 0
  %50 = getelementptr inbounds %struct.DataHeader, %struct.DataHeader* %9, i64 0, i32 0, i32 0
  %51 = load i16, i16* %50, align 2
  %52 = tail call i16 @llvm.bswap.i16(i16 %51) #6
  %53 = select i1 %49, i16 %51, i16 %52
  br label %78

54:                                               ; preds = %27
  %55 = getelementptr inbounds %struct.DataHeader, %struct.DataHeader* %9, i64 0, i32 1, i32 6, i64 1
  %56 = load i8, i8* %55, align 1
  %57 = icmp eq i8 %56, 111
  br i1 %57, label %58, label %86

58:                                               ; preds = %54
  %59 = getelementptr inbounds %struct.DataHeader, %struct.DataHeader* %9, i64 0, i32 1, i32 6, i64 2
  %60 = load i8, i8* %59, align 2
  %61 = icmp eq i8 %60, 67
  br i1 %61, label %62, label %86

62:                                               ; preds = %58
  %63 = getelementptr inbounds %struct.DataHeader, %struct.DataHeader* %9, i64 0, i32 1, i32 6, i64 3
  %64 = load i8, i8* %63, align 1
  %65 = icmp eq i8 %64, 80
  br i1 %65, label %66, label %86

66:                                               ; preds = %62
  %67 = getelementptr inbounds %struct.DataHeader, %struct.DataHeader* %9, i64 0, i32 1, i32 7, i64 0
  %68 = load i8, i8* %67, align 2
  %69 = icmp eq i8 %68, 1
  br i1 %69, label %70, label %86

70:                                               ; preds = %66
  %71 = getelementptr inbounds %struct.UDataMemory, %struct.UDataMemory* %0, i64 0, i32 0
  store %struct.commonDataFuncs* @_ZL9ToCPFuncs, %struct.commonDataFuncs** %71, align 8
  %72 = load i8, i8* %20, align 2
  %73 = icmp eq i8 %72, 0
  %74 = getelementptr inbounds %struct.DataHeader, %struct.DataHeader* %9, i64 0, i32 0, i32 0
  %75 = load i16, i16* %74, align 2
  %76 = tail call i16 @llvm.bswap.i16(i16 %75) #6
  %77 = select i1 %73, i16 %75, i16 %76
  br label %78

78:                                               ; preds = %70, %46
  %79 = phi i16 [ %77, %70 ], [ %53, %46 ]
  %80 = bitcast %struct.DataHeader* %9 to i8*
  %81 = zext i16 %79 to i64
  %82 = getelementptr inbounds i8, i8* %80, i64 %81
  %83 = getelementptr inbounds %struct.UDataMemory, %struct.UDataMemory* %0, i64 0, i32 2
  store i8* %82, i8** %83, align 8
  %84 = load i32, i32* %1, align 4
  %85 = icmp slt i32 %84, 1
  br i1 %85, label %88, label %87

86:                                               ; preds = %54, %58, %62, %66, %42, %38, %34, %30, %27, %11, %15, %19, %23, %5, %7
  store i32 3, i32* %1, align 4
  br label %87

87:                                               ; preds = %86, %78
  tail call void @udata_close_69(%struct.UDataMemory* %0) #6
  br label %88

88:                                               ; preds = %78, %2, %87
  ret void
}

declare void @udata_close_69(%struct.UDataMemory*) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal %struct.DataHeader* @_ZL17offsetTOCLookupFnPK11UDataMemoryPKcPiP10UErrorCode(%struct.UDataMemory* nocapture readonly, i8* nocapture readonly, i32* nocapture, i32* nocapture readnone) #3 {
  %5 = getelementptr inbounds %struct.UDataMemory, %struct.UDataMemory* %0, i64 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  br i1 %7, label %138, label %8

8:                                                ; preds = %4
  %9 = bitcast i8* %6 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds i8, i8* %6, i64 4
  %12 = bitcast i8* %11 to %struct.UDataOffsetTOCEntry*
  %13 = icmp eq i32 %10, 0
  br i1 %13, label %141, label %14

14:                                               ; preds = %8
  %15 = bitcast i8* %11 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = zext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %6, i64 %17
  br label %19

19:                                               ; preds = %19, %14
  %20 = phi i32 [ 0, %14 ], [ %36, %19 ]
  %21 = phi i8* [ %18, %14 ], [ %26, %19 ]
  %22 = phi i8* [ %1, %14 ], [ %23, %19 ]
  %23 = getelementptr inbounds i8, i8* %22, i64 1
  %24 = load i8, i8* %22, align 1
  %25 = zext i8 %24 to i32
  %26 = getelementptr inbounds i8, i8* %21, i64 1
  %27 = load i8, i8* %21, align 1
  %28 = zext i8 %27 to i32
  %29 = sub nsw i32 %25, %28
  %30 = icmp ne i32 %29, 0
  %31 = icmp eq i8 %24, 0
  %32 = or i1 %31, %30
  %33 = or i1 %31, %30
  %34 = xor i1 %33, true
  %35 = zext i1 %34 to i32
  %36 = add nuw nsw i32 %20, %35
  br i1 %32, label %37, label %19

37:                                               ; preds = %19
  %38 = icmp eq i32 %29, 0
  br i1 %38, label %118, label %39

39:                                               ; preds = %37
  %40 = add nsw i32 %10, -1
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds %struct.UDataOffsetTOCEntry, %struct.UDataOffsetTOCEntry* %12, i64 %41, i32 0
  %43 = load i32, i32* %42, align 4
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %6, i64 %44
  br label %46

46:                                               ; preds = %46, %39
  %47 = phi i32 [ 0, %39 ], [ %63, %46 ]
  %48 = phi i8* [ %45, %39 ], [ %53, %46 ]
  %49 = phi i8* [ %1, %39 ], [ %50, %46 ]
  %50 = getelementptr inbounds i8, i8* %49, i64 1
  %51 = load i8, i8* %49, align 1
  %52 = zext i8 %51 to i32
  %53 = getelementptr inbounds i8, i8* %48, i64 1
  %54 = load i8, i8* %48, align 1
  %55 = zext i8 %54 to i32
  %56 = sub nsw i32 %52, %55
  %57 = icmp ne i32 %56, 0
  %58 = icmp eq i8 %51, 0
  %59 = or i1 %58, %57
  %60 = or i1 %58, %57
  %61 = xor i1 %60, true
  %62 = zext i1 %61 to i32
  %63 = add nuw nsw i32 %47, %62
  br i1 %59, label %64, label %46

64:                                               ; preds = %46
  %65 = icmp eq i32 %56, 0
  br i1 %65, label %115, label %66

66:                                               ; preds = %64
  %67 = icmp sgt i32 %40, 1
  br i1 %67, label %68, label %141

68:                                               ; preds = %66, %109
  %69 = phi i32 [ %113, %109 ], [ %40, %66 ]
  %70 = phi i32 [ %112, %109 ], [ 1, %66 ]
  %71 = phi i32 [ %111, %109 ], [ %63, %66 ]
  %72 = phi i32 [ %110, %109 ], [ %36, %66 ]
  %73 = add nsw i32 %70, %69
  %74 = sdiv i32 %73, 2
  %75 = icmp slt i32 %72, %71
  %76 = select i1 %75, i32 %72, i32 %71
  %77 = sext i32 %74 to i64
  %78 = getelementptr inbounds %struct.UDataOffsetTOCEntry, %struct.UDataOffsetTOCEntry* %12, i64 %77, i32 0
  %79 = load i32, i32* %78, align 4
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds i8, i8* %6, i64 %80
  %82 = sext i32 %76 to i64
  %83 = getelementptr inbounds i8, i8* %1, i64 %82
  %84 = getelementptr inbounds i8, i8* %81, i64 %82
  br label %85

85:                                               ; preds = %85, %68
  %86 = phi i32 [ %76, %68 ], [ %102, %85 ]
  %87 = phi i8* [ %84, %68 ], [ %92, %85 ]
  %88 = phi i8* [ %83, %68 ], [ %89, %85 ]
  %89 = getelementptr inbounds i8, i8* %88, i64 1
  %90 = load i8, i8* %88, align 1
  %91 = zext i8 %90 to i32
  %92 = getelementptr inbounds i8, i8* %87, i64 1
  %93 = load i8, i8* %87, align 1
  %94 = zext i8 %93 to i32
  %95 = sub nsw i32 %91, %94
  %96 = icmp ne i32 %95, 0
  %97 = icmp eq i8 %90, 0
  %98 = or i1 %97, %96
  %99 = or i1 %97, %96
  %100 = xor i1 %99, true
  %101 = zext i1 %100 to i32
  %102 = add nsw i32 %86, %101
  br i1 %98, label %103, label %85

103:                                              ; preds = %85
  %104 = icmp slt i32 %95, 0
  br i1 %104, label %109, label %105

105:                                              ; preds = %103
  %106 = icmp eq i32 %95, 0
  br i1 %106, label %115, label %107

107:                                              ; preds = %105
  %108 = add nsw i32 %74, 1
  br label %109

109:                                              ; preds = %107, %103
  %110 = phi i32 [ %102, %107 ], [ %72, %103 ]
  %111 = phi i32 [ %71, %107 ], [ %102, %103 ]
  %112 = phi i32 [ %108, %107 ], [ %70, %103 ]
  %113 = phi i32 [ %69, %107 ], [ %74, %103 ]
  %114 = icmp slt i32 %112, %113
  br i1 %114, label %68, label %141

115:                                              ; preds = %105, %64
  %116 = phi i32 [ %40, %64 ], [ %74, %105 ]
  %117 = icmp sgt i32 %116, -1
  br i1 %117, label %118, label %141

118:                                              ; preds = %37, %115
  %119 = phi i32 [ %116, %115 ], [ 0, %37 ]
  %120 = sext i32 %119 to i64
  %121 = add nuw nsw i32 %119, 1
  %122 = icmp slt i32 %121, %10
  br i1 %122, label %123, label %131

123:                                              ; preds = %118
  %124 = getelementptr inbounds %struct.UDataOffsetTOCEntry, %struct.UDataOffsetTOCEntry* %12, i64 %120
  %125 = getelementptr inbounds %struct.UDataOffsetTOCEntry, %struct.UDataOffsetTOCEntry* %124, i64 1
  %126 = getelementptr inbounds %struct.UDataOffsetTOCEntry, %struct.UDataOffsetTOCEntry* %125, i64 0, i32 1
  %127 = load i32, i32* %126, align 4
  %128 = getelementptr inbounds %struct.UDataOffsetTOCEntry, %struct.UDataOffsetTOCEntry* %12, i64 %120, i32 1
  %129 = load i32, i32* %128, align 4
  %130 = sub i32 %127, %129
  br label %131

131:                                              ; preds = %118, %123
  %132 = phi i32 [ %130, %123 ], [ -1, %118 ]
  store i32 %132, i32* %2, align 4
  %133 = getelementptr inbounds %struct.UDataOffsetTOCEntry, %struct.UDataOffsetTOCEntry* %12, i64 %120, i32 1
  %134 = load i32, i32* %133, align 4
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds i8, i8* %6, i64 %135
  %137 = bitcast i8* %136 to %struct.DataHeader*
  br label %141

138:                                              ; preds = %4
  %139 = getelementptr inbounds %struct.UDataMemory, %struct.UDataMemory* %0, i64 0, i32 1
  %140 = load %struct.DataHeader*, %struct.DataHeader** %139, align 8
  br label %141

141:                                              ; preds = %109, %66, %8, %131, %115, %138
  %142 = phi %struct.DataHeader* [ %140, %138 ], [ %137, %131 ], [ null, %115 ], [ null, %8 ], [ null, %66 ], [ null, %109 ]
  ret %struct.DataHeader* %142
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @_ZL19offsetTOCEntryCountPK11UDataMemory(%struct.UDataMemory* nocapture readonly) #4 {
  %2 = getelementptr inbounds %struct.UDataMemory, %struct.UDataMemory* %0, i64 0, i32 2
  %3 = bitcast i8** %2 to %struct.UDataOffsetTOC**
  %4 = load %struct.UDataOffsetTOC*, %struct.UDataOffsetTOC** %3, align 8
  %5 = icmp eq %struct.UDataOffsetTOC* %4, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.UDataOffsetTOC, %struct.UDataOffsetTOC* %4, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  br label %9

9:                                                ; preds = %1, %6
  %10 = phi i32 [ %8, %6 ], [ 0, %1 ]
  ret i32 %10
}

; Function Attrs: nounwind ssp uwtable
define internal %struct.DataHeader* @_ZL18pointerTOCLookupFnPK11UDataMemoryPKcPiP10UErrorCode(%struct.UDataMemory* nocapture readonly, i8* nocapture readonly, i32* nocapture, i32* nocapture readnone) #1 {
  %5 = getelementptr inbounds %struct.UDataMemory, %struct.UDataMemory* %0, i64 0, i32 2
  %6 = load i8*, i8** %5, align 8
  %7 = icmp eq i8* %6, null
  br i1 %7, label %120, label %8

8:                                                ; preds = %4
  %9 = bitcast i8* %6 to i32*
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds i8, i8* %6, i64 8
  %12 = bitcast i8* %11 to %struct.PointerTOCEntry*
  %13 = icmp eq i32 %10, 0
  br i1 %13, label %123, label %14

14:                                               ; preds = %8
  %15 = bitcast i8* %11 to i8**
  %16 = load i8*, i8** %15, align 8
  br label %17

17:                                               ; preds = %17, %14
  %18 = phi i32 [ 0, %14 ], [ %34, %17 ]
  %19 = phi i8* [ %16, %14 ], [ %24, %17 ]
  %20 = phi i8* [ %1, %14 ], [ %21, %17 ]
  %21 = getelementptr inbounds i8, i8* %20, i64 1
  %22 = load i8, i8* %20, align 1
  %23 = zext i8 %22 to i32
  %24 = getelementptr inbounds i8, i8* %19, i64 1
  %25 = load i8, i8* %19, align 1
  %26 = zext i8 %25 to i32
  %27 = sub nsw i32 %23, %26
  %28 = icmp ne i32 %27, 0
  %29 = icmp eq i8 %22, 0
  %30 = or i1 %29, %28
  %31 = or i1 %29, %28
  %32 = xor i1 %31, true
  %33 = zext i1 %32 to i32
  %34 = add nuw nsw i32 %18, %33
  br i1 %30, label %35, label %17

35:                                               ; preds = %17
  %36 = icmp eq i32 %27, 0
  br i1 %36, label %112, label %37

37:                                               ; preds = %35
  %38 = add nsw i32 %10, -1
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds %struct.PointerTOCEntry, %struct.PointerTOCEntry* %12, i64 %39, i32 0
  %41 = load i8*, i8** %40, align 8
  br label %42

42:                                               ; preds = %42, %37
  %43 = phi i32 [ 0, %37 ], [ %59, %42 ]
  %44 = phi i8* [ %41, %37 ], [ %49, %42 ]
  %45 = phi i8* [ %1, %37 ], [ %46, %42 ]
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  %47 = load i8, i8* %45, align 1
  %48 = zext i8 %47 to i32
  %49 = getelementptr inbounds i8, i8* %44, i64 1
  %50 = load i8, i8* %44, align 1
  %51 = zext i8 %50 to i32
  %52 = sub nsw i32 %48, %51
  %53 = icmp ne i32 %52, 0
  %54 = icmp eq i8 %47, 0
  %55 = or i1 %54, %53
  %56 = or i1 %54, %53
  %57 = xor i1 %56, true
  %58 = zext i1 %57 to i32
  %59 = add nuw nsw i32 %43, %58
  br i1 %55, label %60, label %42

60:                                               ; preds = %42
  %61 = icmp eq i32 %52, 0
  br i1 %61, label %109, label %62

62:                                               ; preds = %60
  %63 = icmp sgt i32 %38, 1
  br i1 %63, label %64, label %123

64:                                               ; preds = %62, %103
  %65 = phi i32 [ %107, %103 ], [ %38, %62 ]
  %66 = phi i32 [ %106, %103 ], [ 1, %62 ]
  %67 = phi i32 [ %105, %103 ], [ %59, %62 ]
  %68 = phi i32 [ %104, %103 ], [ %34, %62 ]
  %69 = add nsw i32 %66, %65
  %70 = sdiv i32 %69, 2
  %71 = icmp slt i32 %68, %67
  %72 = select i1 %71, i32 %68, i32 %67
  %73 = sext i32 %70 to i64
  %74 = getelementptr inbounds %struct.PointerTOCEntry, %struct.PointerTOCEntry* %12, i64 %73, i32 0
  %75 = load i8*, i8** %74, align 8
  %76 = sext i32 %72 to i64
  %77 = getelementptr inbounds i8, i8* %1, i64 %76
  %78 = getelementptr inbounds i8, i8* %75, i64 %76
  br label %79

79:                                               ; preds = %79, %64
  %80 = phi i32 [ %72, %64 ], [ %96, %79 ]
  %81 = phi i8* [ %78, %64 ], [ %86, %79 ]
  %82 = phi i8* [ %77, %64 ], [ %83, %79 ]
  %83 = getelementptr inbounds i8, i8* %82, i64 1
  %84 = load i8, i8* %82, align 1
  %85 = zext i8 %84 to i32
  %86 = getelementptr inbounds i8, i8* %81, i64 1
  %87 = load i8, i8* %81, align 1
  %88 = zext i8 %87 to i32
  %89 = sub nsw i32 %85, %88
  %90 = icmp ne i32 %89, 0
  %91 = icmp eq i8 %84, 0
  %92 = or i1 %91, %90
  %93 = or i1 %91, %90
  %94 = xor i1 %93, true
  %95 = zext i1 %94 to i32
  %96 = add nsw i32 %80, %95
  br i1 %92, label %97, label %79

97:                                               ; preds = %79
  %98 = icmp slt i32 %89, 0
  br i1 %98, label %103, label %99

99:                                               ; preds = %97
  %100 = icmp eq i32 %89, 0
  br i1 %100, label %109, label %101

101:                                              ; preds = %99
  %102 = add nsw i32 %70, 1
  br label %103

103:                                              ; preds = %101, %97
  %104 = phi i32 [ %96, %101 ], [ %68, %97 ]
  %105 = phi i32 [ %67, %101 ], [ %96, %97 ]
  %106 = phi i32 [ %102, %101 ], [ %66, %97 ]
  %107 = phi i32 [ %65, %101 ], [ %70, %97 ]
  %108 = icmp slt i32 %106, %107
  br i1 %108, label %64, label %123

109:                                              ; preds = %99, %60
  %110 = phi i32 [ %38, %60 ], [ %70, %99 ]
  %111 = icmp sgt i32 %110, -1
  br i1 %111, label %112, label %123

112:                                              ; preds = %35, %109
  %113 = phi i32 [ %110, %109 ], [ 0, %35 ]
  %114 = bitcast i8* %11 to [1 x %struct.PointerTOCEntry]*
  store i32 -1, i32* %2, align 4
  %115 = sext i32 %113 to i64
  %116 = getelementptr inbounds [1 x %struct.PointerTOCEntry], [1 x %struct.PointerTOCEntry]* %114, i64 0, i64 %115, i32 1
  %117 = bitcast %struct.DataHeader** %116 to i8**
  %118 = load i8*, i8** %117, align 8
  %119 = tail call %struct.DataHeader* @UDataMemory_normalizeDataPointer_69(i8* %118) #6
  br label %123

120:                                              ; preds = %4
  %121 = getelementptr inbounds %struct.UDataMemory, %struct.UDataMemory* %0, i64 0, i32 1
  %122 = load %struct.DataHeader*, %struct.DataHeader** %121, align 8
  br label %123

123:                                              ; preds = %103, %62, %8, %112, %109, %120
  %124 = phi %struct.DataHeader* [ %122, %120 ], [ %119, %112 ], [ null, %109 ], [ null, %8 ], [ null, %62 ], [ null, %103 ]
  ret %struct.DataHeader* %124
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @_ZL20pointerTOCEntryCountPK11UDataMemory(%struct.UDataMemory* nocapture readonly) #4 {
  %2 = getelementptr inbounds %struct.UDataMemory, %struct.UDataMemory* %0, i64 0, i32 2
  %3 = bitcast i8** %2 to %struct.PointerTOC**
  %4 = load %struct.PointerTOC*, %struct.PointerTOC** %3, align 8
  %5 = icmp eq %struct.PointerTOC* %4, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %struct.PointerTOC, %struct.PointerTOC* %4, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  br label %9

9:                                                ; preds = %1, %6
  %10 = phi i32 [ %8, %6 ], [ 0, %1 ]
  ret i32 %10
}

declare %struct.DataHeader* @UDataMemory_normalizeDataPointer_69(i8*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #5

attributes #0 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
