; ModuleID = '../../third_party/blink/renderer/platform/text/character_property_data_generator.cc'
source_filename = "../../third_party/blink/renderer/platform/text/character_property_data_generator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%struct.UCPTrie = type { i16*, %union.UCPTrieData, i32, i32, i32, i16, i8, i8, i32, i16, i16, i32, i32 }
%union.UCPTrieData = type { i8* }
%"class.std::__1::basic_ostream" = type opaque
%struct.UMutableCPTrie = type opaque

@stdout = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@_ZN5blinkL29kIsCJKIdeographOrSymbolRangesE = internal constant [136 x i32] [i32 9877, i32 9878, i32 11904, i32 12255, i32 12736, i32 12783, i32 13312, i32 19903, i32 19968, i32 40959, i32 63744, i32 64255, i32 131072, i32 196607, i32 8534, i32 8538, i32 8544, i32 8555, i32 8560, i32 8571, i32 8986, i32 8987, i32 9193, i32 9196, i32 9150, i32 9164, i32 9312, i32 9362, i32 9372, i32 9471, i32 9678, i32 9683, i32 9698, i32 9702, i32 9725, i32 9726, i32 9728, i32 9731, i32 9824, i32 9839, i32 9748, i32 9749, i32 9800, i32 9811, i32 9898, i32 9899, i32 9924, i32 9925, i32 9970, i32 9971, i32 10067, i32 10071, i32 10083, i32 10084, i32 9842, i32 9853, i32 10102, i32 10111, i32 10133, i32 10135, i32 9994, i32 9997, i32 12272, i32 12333, i32 12337, i32 12591, i32 12688, i32 12735, i32 12800, i32 13311, i32 19904, i32 19967, i32 63584, i32 63586, i32 65072, i32 65135, i32 65280, i32 65292, i32 65294, i32 65306, i32 65311, i32 65519, i32 94176, i32 94207, i32 94208, i32 100351, i32 100352, i32 101119, i32 110592, i32 110847, i32 110848, i32 110895, i32 110960, i32 111359, i32 127248, i32 127273, i32 127280, i32 127305, i32 127312, i32 127337, i32 127344, i32 127369, i32 127377, i32 127386, i32 127462, i32 127487, i32 127488, i32 128767, i32 127995, i32 127999, i32 128992, i32 129003, i32 129280, i32 129295, i32 129296, i32 129304, i32 129305, i32 129407, i32 129408, i32 129471, i32 129472, i32 129535, i32 129648, i32 129652, i32 129656, i32 129658, i32 129664, i32 129670, i32 129680, i32 129704, i32 129712, i32 129718, i32 129728, i32 129730, i32 129744, i32 129750], align 16
@_ZN5blinkL28kIsCJKIdeographOrSymbolArrayE = internal constant [103 x i32] [i32 711, i32 714, i32 715, i32 729, i32 8224, i32 8225, i32 8240, i32 8251, i32 8252, i32 8258, i32 8263, i32 8264, i32 8265, i32 8273, i32 8413, i32 8414, i32 8448, i32 8451, i32 8453, i32 8457, i32 8458, i32 8467, i32 8470, i32 8481, i32 8491, i32 8507, i32 8528, i32 8529, i32 8530, i32 8575, i32 8585, i32 8967, i32 9200, i32 9203, i32 8978, i32 9166, i32 9251, i32 9632, i32 9633, i32 9634, i32 9642, i32 9643, i32 9649, i32 9650, i32 9651, i32 9654, i32 9655, i32 9660, i32 9661, i32 9664, i32 9665, i32 9670, i32 9671, i32 9673, i32 9675, i32 9676, i32 9711, i32 9733, i32 9734, i32 9742, i32 9750, i32 9751, i32 9757, i32 9792, i32 9794, i32 9855, i32 9875, i32 9888, i32 9889, i32 9917, i32 9918, i32 9934, i32 9940, i32 9962, i32 9973, i32 9977, i32 9978, i32 9981, i32 9989, i32 9992, i32 10003, i32 10010, i32 10024, i32 10047, i32 10048, i32 10060, i32 10062, i32 10160, i32 10175, i32 11034, i32 11035, i32 11036, i32 11088, i32 11093, i32 65040, i32 65041, i32 65042, i32 65049, i32 65309, i32 127232, i32 126980, i32 127183, i32 127374], align 16
@_ZN5blinkL39kIsPotentialCustomElementNameCharRangesE = internal constant [30 x i32] [i32 48, i32 57, i32 97, i32 122, i32 192, i32 214, i32 216, i32 246, i32 248, i32 767, i32 768, i32 893, i32 895, i32 8191, i32 8204, i32 8205, i32 8255, i32 8256, i32 8304, i32 8591, i32 11264, i32 12271, i32 12289, i32 55295, i32 63744, i32 64975, i32 65008, i32 65533, i32 65536, i32 983039], align 16
@.str.1 = private unnamed_addr constant [84 x i8] c"../../third_party/blink/renderer/platform/text/character_property_data_generator.cc\00", align 1
@.str.2 = private unnamed_addr constant [52 x i8] c"!(reinterpret_cast<intptr_t>(serialized.get()) % 4)\00", align 1
@.str.3 = private unnamed_addr constant [158 x i8] c"#include <cstdint>\0A\0Anamespace blink {\0A\0Aextern const int32_t kSerializedCharacterDataSize = %d;\0Aalignas(4) extern const uint8_t kSerializedCharacterData[] = {\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"\0A   \00", align 1
@.str.5 = private unnamed_addr constant [9 x i8] c" 0x%02X,\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"\0A};\0A\0A} // namespace blink\0A\00", align 1

; Function Attrs: norecurse nounwind ssp uwtable
define hidden i32 @main(i32, i8** nocapture readonly) local_unnamed_addr #0 {
  %3 = icmp slt i32 %0, 2
  br i1 %3, label %4, label %6

4:                                                ; preds = %2
  %5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  tail call fastcc void @_ZN5blink12_GLOBAL__N_129GenerateCharacterPropertyDataEP8_IO_FILE(%struct._IO_FILE* %5)
  br label %11

6:                                                ; preds = %2
  %7 = getelementptr inbounds i8*, i8** %1, i64 1
  %8 = load i8*, i8** %7, align 8
  %9 = tail call %struct._IO_FILE* @fopen64(i8* %8, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  tail call fastcc void @_ZN5blink12_GLOBAL__N_129GenerateCharacterPropertyDataEP8_IO_FILE(%struct._IO_FILE* %9)
  %10 = tail call i32 @fclose(%struct._IO_FILE* %9)
  br label %11

11:                                               ; preds = %6, %4
  ret i32 0
}

; Function Attrs: norecurse nounwind ssp uwtable
define internal fastcc void @_ZN5blink12_GLOBAL__N_129GenerateCharacterPropertyDataEP8_IO_FILE(%struct._IO_FILE* nocapture) unnamed_addr #0 {
  %2 = alloca i32, align 4
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = tail call i8* @_Znam(i64 1114112) #8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %4, i8 0, i64 1114112, i1 false)
  br label %5

5:                                                ; preds = %13, %1
  %6 = phi i32* [ %14, %13 ], [ getelementptr inbounds ([136 x i32], [136 x i32]* @_ZN5blinkL29kIsCJKIdeographOrSymbolRangesE, i64 0, i64 0), %1 ]
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds i32, i32* %6, i64 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %7, %9
  br i1 %10, label %13, label %11

11:                                               ; preds = %5
  %12 = sext i32 %7 to i64
  br label %16

13:                                               ; preds = %16, %5
  %14 = getelementptr inbounds i32, i32* %6, i64 2
  %15 = icmp eq i32* %14, getelementptr inbounds ([136 x i32], [136 x i32]* @_ZN5blinkL29kIsCJKIdeographOrSymbolRangesE, i64 1, i64 0)
  br i1 %15, label %25, label %5

16:                                               ; preds = %16, %11
  %17 = phi i64 [ %12, %11 ], [ %21, %16 ]
  %18 = getelementptr inbounds i8, i8* %4, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = or i8 %19, 1
  store i8 %20, i8* %18, align 1
  %21 = add nsw i64 %17, 1
  %22 = load i32, i32* %8, align 4
  %23 = sext i32 %22 to i64
  %24 = icmp slt i64 %17, %23
  br i1 %24, label %16, label %13

25:                                               ; preds = %13, %467
  %26 = phi i32* [ %473, %467 ], [ getelementptr inbounds ([103 x i32], [103 x i32]* @_ZN5blinkL28kIsCJKIdeographOrSymbolArrayE, i64 0, i64 0), %13 ]
  %27 = load i32, i32* %26, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i8, i8* %4, i64 %28
  %30 = load i8, i8* %29, align 1
  %31 = or i8 %30, 1
  store i8 %31, i8* %29, align 1
  %32 = getelementptr inbounds i32, i32* %26, i64 1
  %33 = load i32, i32* %32, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %4, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = or i8 %36, 1
  store i8 %37, i8* %35, align 1
  %38 = getelementptr inbounds i32, i32* %26, i64 2
  %39 = load i32, i32* %38, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %4, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = or i8 %42, 1
  store i8 %43, i8* %41, align 1
  %44 = getelementptr inbounds i32, i32* %26, i64 3
  %45 = icmp eq i32* %44, getelementptr inbounds ([103 x i32], [103 x i32]* @_ZN5blinkL28kIsCJKIdeographOrSymbolArrayE, i64 1, i64 0)
  br i1 %45, label %46, label %467

46:                                               ; preds = %25, %54
  %47 = phi i32* [ %55, %54 ], [ getelementptr inbounds ([30 x i32], [30 x i32]* @_ZN5blinkL39kIsPotentialCustomElementNameCharRangesE, i64 0, i64 0), %25 ]
  %48 = load i32, i32* %47, align 4
  %49 = getelementptr inbounds i32, i32* %47, i64 1
  %50 = load i32, i32* %49, align 4
  %51 = icmp sgt i32 %48, %50
  br i1 %51, label %54, label %52

52:                                               ; preds = %46
  %53 = sext i32 %48 to i64
  br label %57

54:                                               ; preds = %57, %46
  %55 = getelementptr inbounds i32, i32* %47, i64 2
  %56 = icmp eq i32* %55, getelementptr inbounds ([30 x i32], [30 x i32]* @_ZN5blinkL39kIsPotentialCustomElementNameCharRangesE, i64 1, i64 0)
  br i1 %56, label %66, label %46

57:                                               ; preds = %57, %52
  %58 = phi i64 [ %53, %52 ], [ %62, %57 ]
  %59 = getelementptr inbounds i8, i8* %4, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = or i8 %60, 4
  store i8 %61, i8* %59, align 1
  %62 = add nsw i64 %58, 1
  %63 = load i32, i32* %49, align 4
  %64 = sext i32 %63 to i64
  %65 = icmp slt i64 %58, %64
  br i1 %65, label %57, label %54

66:                                               ; preds = %54
  %67 = getelementptr inbounds i8, i8* %4, i64 45
  %68 = load i8, i8* %67, align 1
  %69 = or i8 %68, 4
  store i8 %69, i8* %67, align 1
  %70 = getelementptr inbounds i8, i8* %4, i64 46
  %71 = load i8, i8* %70, align 1
  %72 = or i8 %71, 4
  store i8 %72, i8* %70, align 1
  %73 = getelementptr inbounds i8, i8* %4, i64 95
  %74 = load i8, i8* %73, align 1
  %75 = or i8 %74, 4
  store i8 %75, i8* %73, align 1
  %76 = getelementptr inbounds i8, i8* %4, i64 183
  %77 = load i8, i8* %76, align 1
  %78 = or i8 %77, 4
  store i8 %78, i8* %76, align 1
  %79 = getelementptr inbounds i8, i8* %4, i64 8234
  %80 = load i8, i8* %79, align 1
  %81 = or i8 %80, 8
  store i8 %81, i8* %79, align 1
  %82 = getelementptr inbounds i8, i8* %4, i64 8235
  %83 = load i8, i8* %82, align 1
  %84 = or i8 %83, 8
  store i8 %84, i8* %82, align 1
  %85 = getelementptr inbounds i8, i8* %4, i64 8236
  %86 = load i8, i8* %85, align 1
  %87 = or i8 %86, 8
  store i8 %87, i8* %85, align 1
  %88 = getelementptr inbounds i8, i8* %4, i64 8237
  %89 = load i8, i8* %88, align 1
  %90 = or i8 %89, 8
  store i8 %90, i8* %88, align 1
  %91 = getelementptr inbounds i8, i8* %4, i64 8238
  %92 = load i8, i8* %91, align 1
  %93 = or i8 %92, 8
  store i8 %93, i8* %91, align 1
  %94 = getelementptr inbounds i8, i8* %4, i64 8294
  %95 = load i8, i8* %94, align 1
  %96 = or i8 %95, 8
  store i8 %96, i8* %94, align 1
  %97 = getelementptr inbounds i8, i8* %4, i64 8295
  %98 = load i8, i8* %97, align 1
  %99 = or i8 %98, 8
  store i8 %99, i8* %97, align 1
  %100 = getelementptr inbounds i8, i8* %4, i64 8296
  %101 = load i8, i8* %100, align 1
  %102 = or i8 %101, 8
  store i8 %102, i8* %100, align 1
  %103 = getelementptr inbounds i8, i8* %4, i64 8297
  %104 = load i8, i8* %103, align 1
  %105 = or i8 %104, 8
  store i8 %105, i8* %103, align 1
  %106 = getelementptr inbounds i8, i8* %4, i64 1564
  %107 = load i8, i8* %106, align 1
  %108 = or i8 %107, 8
  store i8 %108, i8* %106, align 1
  %109 = getelementptr inbounds i8, i8* %4, i64 8206
  %110 = load i8, i8* %109, align 1
  %111 = or i8 %110, 8
  store i8 %111, i8* %109, align 1
  %112 = getelementptr inbounds i8, i8* %4, i64 8207
  %113 = load i8, i8* %112, align 1
  %114 = or i8 %113, 8
  store i8 %114, i8* %112, align 1
  %115 = getelementptr inbounds i8, i8* %4, i64 4352
  %116 = bitcast i8* %115 to <16 x i8>*
  %117 = load <16 x i8>, <16 x i8>* %116, align 1
  %118 = getelementptr inbounds i8, i8* %4, i64 4368
  %119 = bitcast i8* %118 to <16 x i8>*
  %120 = load <16 x i8>, <16 x i8>* %119, align 1
  %121 = or <16 x i8> %117, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %122 = or <16 x i8> %120, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %123 = bitcast i8* %115 to <16 x i8>*
  store <16 x i8> %121, <16 x i8>* %123, align 1
  %124 = bitcast i8* %118 to <16 x i8>*
  store <16 x i8> %122, <16 x i8>* %124, align 1
  %125 = getelementptr inbounds i8, i8* %4, i64 4384
  %126 = bitcast i8* %125 to <16 x i8>*
  %127 = load <16 x i8>, <16 x i8>* %126, align 1
  %128 = getelementptr inbounds i8, i8* %4, i64 4400
  %129 = bitcast i8* %128 to <16 x i8>*
  %130 = load <16 x i8>, <16 x i8>* %129, align 1
  %131 = or <16 x i8> %127, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %132 = or <16 x i8> %130, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %133 = bitcast i8* %125 to <16 x i8>*
  store <16 x i8> %131, <16 x i8>* %133, align 1
  %134 = bitcast i8* %128 to <16 x i8>*
  store <16 x i8> %132, <16 x i8>* %134, align 1
  %135 = getelementptr inbounds i8, i8* %4, i64 4416
  %136 = bitcast i8* %135 to <16 x i8>*
  %137 = load <16 x i8>, <16 x i8>* %136, align 1
  %138 = getelementptr inbounds i8, i8* %4, i64 4432
  %139 = bitcast i8* %138 to <16 x i8>*
  %140 = load <16 x i8>, <16 x i8>* %139, align 1
  %141 = or <16 x i8> %137, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %142 = or <16 x i8> %140, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %143 = bitcast i8* %135 to <16 x i8>*
  store <16 x i8> %141, <16 x i8>* %143, align 1
  %144 = bitcast i8* %138 to <16 x i8>*
  store <16 x i8> %142, <16 x i8>* %144, align 1
  %145 = getelementptr inbounds i8, i8* %4, i64 4448
  %146 = bitcast i8* %145 to <16 x i8>*
  %147 = load <16 x i8>, <16 x i8>* %146, align 1
  %148 = getelementptr inbounds i8, i8* %4, i64 4464
  %149 = bitcast i8* %148 to <16 x i8>*
  %150 = load <16 x i8>, <16 x i8>* %149, align 1
  %151 = or <16 x i8> %147, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %152 = or <16 x i8> %150, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %153 = bitcast i8* %145 to <16 x i8>*
  store <16 x i8> %151, <16 x i8>* %153, align 1
  %154 = bitcast i8* %148 to <16 x i8>*
  store <16 x i8> %152, <16 x i8>* %154, align 1
  %155 = getelementptr inbounds i8, i8* %4, i64 4480
  %156 = bitcast i8* %155 to <16 x i8>*
  %157 = load <16 x i8>, <16 x i8>* %156, align 1
  %158 = getelementptr inbounds i8, i8* %4, i64 4496
  %159 = bitcast i8* %158 to <16 x i8>*
  %160 = load <16 x i8>, <16 x i8>* %159, align 1
  %161 = or <16 x i8> %157, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %162 = or <16 x i8> %160, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %163 = bitcast i8* %155 to <16 x i8>*
  store <16 x i8> %161, <16 x i8>* %163, align 1
  %164 = bitcast i8* %158 to <16 x i8>*
  store <16 x i8> %162, <16 x i8>* %164, align 1
  %165 = getelementptr inbounds i8, i8* %4, i64 4512
  %166 = bitcast i8* %165 to <16 x i8>*
  %167 = load <16 x i8>, <16 x i8>* %166, align 1
  %168 = getelementptr inbounds i8, i8* %4, i64 4528
  %169 = bitcast i8* %168 to <16 x i8>*
  %170 = load <16 x i8>, <16 x i8>* %169, align 1
  %171 = or <16 x i8> %167, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %172 = or <16 x i8> %170, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %173 = bitcast i8* %165 to <16 x i8>*
  store <16 x i8> %171, <16 x i8>* %173, align 1
  %174 = bitcast i8* %168 to <16 x i8>*
  store <16 x i8> %172, <16 x i8>* %174, align 1
  %175 = getelementptr inbounds i8, i8* %4, i64 4544
  %176 = bitcast i8* %175 to <16 x i8>*
  %177 = load <16 x i8>, <16 x i8>* %176, align 1
  %178 = getelementptr inbounds i8, i8* %4, i64 4560
  %179 = bitcast i8* %178 to <16 x i8>*
  %180 = load <16 x i8>, <16 x i8>* %179, align 1
  %181 = or <16 x i8> %177, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %182 = or <16 x i8> %180, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %183 = bitcast i8* %175 to <16 x i8>*
  store <16 x i8> %181, <16 x i8>* %183, align 1
  %184 = bitcast i8* %178 to <16 x i8>*
  store <16 x i8> %182, <16 x i8>* %184, align 1
  %185 = getelementptr inbounds i8, i8* %4, i64 4576
  %186 = bitcast i8* %185 to <16 x i8>*
  %187 = load <16 x i8>, <16 x i8>* %186, align 1
  %188 = getelementptr inbounds i8, i8* %4, i64 4592
  %189 = bitcast i8* %188 to <16 x i8>*
  %190 = load <16 x i8>, <16 x i8>* %189, align 1
  %191 = or <16 x i8> %187, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %192 = or <16 x i8> %190, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %193 = bitcast i8* %185 to <16 x i8>*
  store <16 x i8> %191, <16 x i8>* %193, align 1
  %194 = bitcast i8* %188 to <16 x i8>*
  store <16 x i8> %192, <16 x i8>* %194, align 1
  %195 = getelementptr inbounds i8, i8* %4, i64 12592
  %196 = bitcast i8* %195 to <16 x i8>*
  %197 = load <16 x i8>, <16 x i8>* %196, align 1
  %198 = or <16 x i8> %197, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %199 = bitcast i8* %195 to <16 x i8>*
  store <16 x i8> %198, <16 x i8>* %199, align 1
  %200 = getelementptr inbounds i8, i8* %4, i64 12608
  %201 = bitcast i8* %200 to <16 x i8>*
  %202 = load <16 x i8>, <16 x i8>* %201, align 1
  %203 = or <16 x i8> %202, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %204 = bitcast i8* %200 to <16 x i8>*
  store <16 x i8> %203, <16 x i8>* %204, align 1
  %205 = getelementptr inbounds i8, i8* %4, i64 12624
  %206 = bitcast i8* %205 to <16 x i8>*
  %207 = load <16 x i8>, <16 x i8>* %206, align 1
  %208 = or <16 x i8> %207, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %209 = bitcast i8* %205 to <16 x i8>*
  store <16 x i8> %208, <16 x i8>* %209, align 1
  %210 = getelementptr inbounds i8, i8* %4, i64 12640
  %211 = bitcast i8* %210 to <16 x i8>*
  %212 = load <16 x i8>, <16 x i8>* %211, align 1
  %213 = or <16 x i8> %212, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %214 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> %213, <16 x i8>* %214, align 1
  %215 = getelementptr inbounds i8, i8* %4, i64 12656
  %216 = bitcast i8* %215 to <16 x i8>*
  %217 = load <16 x i8>, <16 x i8>* %216, align 1
  %218 = or <16 x i8> %217, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %219 = bitcast i8* %215 to <16 x i8>*
  store <16 x i8> %218, <16 x i8>* %219, align 1
  %220 = getelementptr inbounds i8, i8* %4, i64 12672
  %221 = bitcast i8* %220 to <16 x i8>*
  %222 = load <16 x i8>, <16 x i8>* %221, align 1
  %223 = or <16 x i8> %222, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %224 = bitcast i8* %220 to <16 x i8>*
  store <16 x i8> %223, <16 x i8>* %224, align 1
  %225 = getelementptr inbounds i8, i8* %4, i64 43360
  %226 = bitcast i8* %225 to <16 x i8>*
  %227 = load <16 x i8>, <16 x i8>* %226, align 1
  %228 = or <16 x i8> %227, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %229 = bitcast i8* %225 to <16 x i8>*
  store <16 x i8> %228, <16 x i8>* %229, align 1
  %230 = getelementptr inbounds i8, i8* %4, i64 43376
  %231 = bitcast i8* %230 to <16 x i8>*
  %232 = load <16 x i8>, <16 x i8>* %231, align 1
  %233 = or <16 x i8> %232, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %234 = bitcast i8* %230 to <16 x i8>*
  store <16 x i8> %233, <16 x i8>* %234, align 1
  br label %308

235:                                              ; preds = %264, %323
  %236 = phi i64 [ %267, %264 ], [ 1, %323 ]
  %237 = phi i32 [ %265, %264 ], [ 0, %323 ]
  %238 = phi i8 [ %266, %264 ], [ %453, %323 ]
  %239 = icmp ult i64 %236, 1114112
  br i1 %239, label %240, label %244

240:                                              ; preds = %235
  %241 = getelementptr inbounds i8, i8* %4, i64 %236
  %242 = load i8, i8* %241, align 1
  %243 = icmp eq i8 %242, %238
  br i1 %243, label %264, label %244

244:                                              ; preds = %240, %235
  %245 = icmp eq i8 %238, 0
  br i1 %245, label %250, label %246

246:                                              ; preds = %244
  %247 = zext i8 %238 to i32
  %248 = trunc i64 %236 to i32
  %249 = add i32 %248, -1
  call void @umutablecptrie_setRange_69(%struct.UMutableCPTrie* %452, i32 %237, i32 %249, i32 %247, i32* nonnull %2) #9
  br label %250

250:                                              ; preds = %244, %246
  %251 = icmp ugt i64 %236, 1114111
  br i1 %251, label %252, label %260

252:                                              ; preds = %250
  %253 = call %struct.UCPTrie* @umutablecptrie_buildImmutable_69(%struct.UMutableCPTrie* %452, i32 0, i32 0, i32* nonnull %2) #9
  %254 = call i32 @ucptrie_toBinary_69(%struct.UCPTrie* %253, i8* null, i32 0, i32* nonnull %2) #9
  store i32 0, i32* %2, align 4
  %255 = sext i32 %254 to i64
  %256 = call i8* @_Znam(i64 %255) #8
  %257 = ptrtoint i8* %256 to i64
  %258 = and i64 %257, 3
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %271, label %268

260:                                              ; preds = %250
  %261 = getelementptr inbounds i8, i8* %4, i64 %236
  %262 = load i8, i8* %261, align 1
  %263 = trunc i64 %236 to i32
  br label %264

264:                                              ; preds = %240, %260
  %265 = phi i32 [ %237, %240 ], [ %263, %260 ]
  %266 = phi i8 [ %238, %240 ], [ %262, %260 ]
  %267 = add nuw nsw i64 %236, 1
  br label %235

268:                                              ; preds = %252
  %269 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %269) #9
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([84 x i8], [84 x i8]* @.str.1, i64 0, i64 0), i32 119, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0)) #9
  %270 = call %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #9
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %269) #9
  br label %271

271:                                              ; preds = %252, %268
  %272 = call i32 @ucptrie_toBinary_69(%struct.UCPTrie* %253, i8* nonnull %256, i32 %254, i32* nonnull %2) #9
  %273 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([158 x i8], [158 x i8]* @.str.3, i64 0, i64 0), i32 %272) #9
  %274 = icmp sgt i32 %272, 0
  br i1 %274, label %275, label %300

275:                                              ; preds = %271
  %276 = sext i32 %272 to i64
  br label %282

277:                                              ; preds = %288
  %278 = trunc i64 %296 to i32
  br label %279

279:                                              ; preds = %282, %277
  %280 = phi i32 [ %283, %282 ], [ %278, %277 ]
  %281 = icmp slt i32 %280, %272
  br i1 %281, label %282, label %300

282:                                              ; preds = %279, %275
  %283 = phi i32 [ %280, %279 ], [ 0, %275 ]
  %284 = call i64 @fwrite(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i64 4, i64 1, %struct._IO_FILE* %0) #9
  %285 = icmp slt i32 %283, %272
  br i1 %285, label %286, label %279

286:                                              ; preds = %282
  %287 = sext i32 %283 to i64
  br label %288

288:                                              ; preds = %288, %286
  %289 = phi i64 [ %287, %286 ], [ %296, %288 ]
  %290 = phi i32 [ 0, %286 ], [ %295, %288 ]
  %291 = getelementptr inbounds i8, i8* %256, i64 %289
  %292 = load i8, i8* %291, align 1
  %293 = zext i8 %292 to i32
  %294 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.5, i64 0, i64 0), i32 %293) #9
  %295 = add nuw nsw i32 %290, 1
  %296 = add nsw i64 %289, 1
  %297 = icmp ult i32 %295, 16
  %298 = icmp slt i64 %296, %276
  %299 = and i1 %298, %297
  br i1 %299, label %288, label %277

300:                                              ; preds = %279, %271
  %301 = call i64 @fwrite(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0), i64 26, i64 1, %struct._IO_FILE* %0) #9
  call void @_ZdaPv(i8* nonnull %256) #8
  %302 = icmp eq %struct.UCPTrie* %253, null
  br i1 %302, label %304, label %303

303:                                              ; preds = %300
  call void @ucptrie_close_69(%struct.UCPTrie* nonnull %253) #9
  br label %304

304:                                              ; preds = %300, %303
  %305 = icmp eq %struct.UMutableCPTrie* %452, null
  br i1 %305, label %307, label %306

306:                                              ; preds = %304
  call void @umutablecptrie_close_69(%struct.UMutableCPTrie* nonnull %452) #9
  br label %307

307:                                              ; preds = %304, %306
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %451) #9
  call void @_ZdaPv(i8* nonnull %4) #8
  ret void

308:                                              ; preds = %454, %66
  %309 = phi i64 [ 0, %66 ], [ %466, %454 ]
  %310 = add nuw nsw i64 %309, 44032
  %311 = getelementptr inbounds i8, i8* %4, i64 %310
  %312 = bitcast i8* %311 to <16 x i8>*
  %313 = load <16 x i8>, <16 x i8>* %312, align 1
  %314 = getelementptr inbounds i8, i8* %311, i64 16
  %315 = bitcast i8* %314 to <16 x i8>*
  %316 = load <16 x i8>, <16 x i8>* %315, align 1
  %317 = or <16 x i8> %313, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %318 = or <16 x i8> %316, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %319 = bitcast i8* %311 to <16 x i8>*
  store <16 x i8> %317, <16 x i8>* %319, align 1
  %320 = bitcast i8* %314 to <16 x i8>*
  store <16 x i8> %318, <16 x i8>* %320, align 1
  %321 = or i64 %309, 32
  %322 = icmp eq i64 %321, 11168
  br i1 %322, label %323, label %454, !llvm.loop !2

323:                                              ; preds = %308
  %324 = getelementptr inbounds i8, i8* %4, i64 55200
  %325 = load i8, i8* %324, align 1
  %326 = or i8 %325, 16
  store i8 %326, i8* %324, align 1
  %327 = getelementptr inbounds i8, i8* %4, i64 55201
  %328 = load i8, i8* %327, align 1
  %329 = or i8 %328, 16
  store i8 %329, i8* %327, align 1
  %330 = getelementptr inbounds i8, i8* %4, i64 55202
  %331 = load i8, i8* %330, align 1
  %332 = or i8 %331, 16
  store i8 %332, i8* %330, align 1
  %333 = getelementptr inbounds i8, i8* %4, i64 55203
  %334 = load i8, i8* %333, align 1
  %335 = or i8 %334, 16
  store i8 %335, i8* %333, align 1
  %336 = getelementptr inbounds i8, i8* %4, i64 55204
  %337 = load i8, i8* %336, align 1
  %338 = or i8 %337, 16
  store i8 %338, i8* %336, align 1
  %339 = getelementptr inbounds i8, i8* %4, i64 55205
  %340 = load i8, i8* %339, align 1
  %341 = or i8 %340, 16
  store i8 %341, i8* %339, align 1
  %342 = getelementptr inbounds i8, i8* %4, i64 55206
  %343 = load i8, i8* %342, align 1
  %344 = or i8 %343, 16
  store i8 %344, i8* %342, align 1
  %345 = getelementptr inbounds i8, i8* %4, i64 55207
  %346 = load i8, i8* %345, align 1
  %347 = or i8 %346, 16
  store i8 %347, i8* %345, align 1
  %348 = getelementptr inbounds i8, i8* %4, i64 55208
  %349 = load i8, i8* %348, align 1
  %350 = or i8 %349, 16
  store i8 %350, i8* %348, align 1
  %351 = getelementptr inbounds i8, i8* %4, i64 55209
  %352 = load i8, i8* %351, align 1
  %353 = or i8 %352, 16
  store i8 %353, i8* %351, align 1
  %354 = getelementptr inbounds i8, i8* %4, i64 55210
  %355 = load i8, i8* %354, align 1
  %356 = or i8 %355, 16
  store i8 %356, i8* %354, align 1
  %357 = getelementptr inbounds i8, i8* %4, i64 55211
  %358 = load i8, i8* %357, align 1
  %359 = or i8 %358, 16
  store i8 %359, i8* %357, align 1
  %360 = getelementptr inbounds i8, i8* %4, i64 55212
  %361 = load i8, i8* %360, align 1
  %362 = or i8 %361, 16
  store i8 %362, i8* %360, align 1
  %363 = getelementptr inbounds i8, i8* %4, i64 55213
  %364 = load i8, i8* %363, align 1
  %365 = or i8 %364, 16
  store i8 %365, i8* %363, align 1
  %366 = getelementptr inbounds i8, i8* %4, i64 55214
  %367 = load i8, i8* %366, align 1
  %368 = or i8 %367, 16
  store i8 %368, i8* %366, align 1
  %369 = getelementptr inbounds i8, i8* %4, i64 55215
  %370 = load i8, i8* %369, align 1
  %371 = or i8 %370, 16
  store i8 %371, i8* %369, align 1
  %372 = getelementptr inbounds i8, i8* %4, i64 55216
  %373 = bitcast i8* %372 to <16 x i8>*
  %374 = load <16 x i8>, <16 x i8>* %373, align 1
  %375 = or <16 x i8> %374, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %376 = bitcast i8* %372 to <16 x i8>*
  store <16 x i8> %375, <16 x i8>* %376, align 1
  %377 = getelementptr inbounds i8, i8* %4, i64 55232
  %378 = bitcast i8* %377 to <16 x i8>*
  %379 = load <16 x i8>, <16 x i8>* %378, align 1
  %380 = or <16 x i8> %379, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %381 = bitcast i8* %377 to <16 x i8>*
  store <16 x i8> %380, <16 x i8>* %381, align 1
  %382 = getelementptr inbounds i8, i8* %4, i64 55248
  %383 = bitcast i8* %382 to <16 x i8>*
  %384 = load <16 x i8>, <16 x i8>* %383, align 1
  %385 = or <16 x i8> %384, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %386 = bitcast i8* %382 to <16 x i8>*
  store <16 x i8> %385, <16 x i8>* %386, align 1
  %387 = getelementptr inbounds i8, i8* %4, i64 55264
  %388 = bitcast i8* %387 to <16 x i8>*
  %389 = load <16 x i8>, <16 x i8>* %388, align 1
  %390 = or <16 x i8> %389, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %391 = bitcast i8* %387 to <16 x i8>*
  store <16 x i8> %390, <16 x i8>* %391, align 1
  %392 = getelementptr inbounds i8, i8* %4, i64 55280
  %393 = bitcast i8* %392 to <16 x i8>*
  %394 = load <16 x i8>, <16 x i8>* %393, align 1
  %395 = or <16 x i8> %394, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %396 = bitcast i8* %392 to <16 x i8>*
  store <16 x i8> %395, <16 x i8>* %396, align 1
  %397 = getelementptr inbounds i8, i8* %4, i64 65440
  %398 = bitcast i8* %397 to <16 x i8>*
  %399 = load <16 x i8>, <16 x i8>* %398, align 1
  %400 = or <16 x i8> %399, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %401 = bitcast i8* %397 to <16 x i8>*
  store <16 x i8> %400, <16 x i8>* %401, align 1
  %402 = getelementptr inbounds i8, i8* %4, i64 65456
  %403 = bitcast i8* %402 to <16 x i8>*
  %404 = load <16 x i8>, <16 x i8>* %403, align 1
  %405 = or <16 x i8> %404, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %406 = bitcast i8* %402 to <16 x i8>*
  store <16 x i8> %405, <16 x i8>* %406, align 1
  %407 = getelementptr inbounds i8, i8* %4, i64 65472
  %408 = bitcast i8* %407 to <16 x i8>*
  %409 = load <16 x i8>, <16 x i8>* %408, align 1
  %410 = or <16 x i8> %409, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %411 = bitcast i8* %407 to <16 x i8>*
  store <16 x i8> %410, <16 x i8>* %411, align 1
  %412 = getelementptr inbounds i8, i8* %4, i64 65488
  %413 = load i8, i8* %412, align 1
  %414 = or i8 %413, 16
  store i8 %414, i8* %412, align 1
  %415 = getelementptr inbounds i8, i8* %4, i64 65489
  %416 = load i8, i8* %415, align 1
  %417 = or i8 %416, 16
  store i8 %417, i8* %415, align 1
  %418 = getelementptr inbounds i8, i8* %4, i64 65490
  %419 = load i8, i8* %418, align 1
  %420 = or i8 %419, 16
  store i8 %420, i8* %418, align 1
  %421 = getelementptr inbounds i8, i8* %4, i64 65491
  %422 = load i8, i8* %421, align 1
  %423 = or i8 %422, 16
  store i8 %423, i8* %421, align 1
  %424 = getelementptr inbounds i8, i8* %4, i64 65492
  %425 = load i8, i8* %424, align 1
  %426 = or i8 %425, 16
  store i8 %426, i8* %424, align 1
  %427 = getelementptr inbounds i8, i8* %4, i64 65493
  %428 = load i8, i8* %427, align 1
  %429 = or i8 %428, 16
  store i8 %429, i8* %427, align 1
  %430 = getelementptr inbounds i8, i8* %4, i64 65494
  %431 = load i8, i8* %430, align 1
  %432 = or i8 %431, 16
  store i8 %432, i8* %430, align 1
  %433 = getelementptr inbounds i8, i8* %4, i64 65495
  %434 = load i8, i8* %433, align 1
  %435 = or i8 %434, 16
  store i8 %435, i8* %433, align 1
  %436 = getelementptr inbounds i8, i8* %4, i64 65496
  %437 = load i8, i8* %436, align 1
  %438 = or i8 %437, 16
  store i8 %438, i8* %436, align 1
  %439 = getelementptr inbounds i8, i8* %4, i64 65497
  %440 = load i8, i8* %439, align 1
  %441 = or i8 %440, 16
  store i8 %441, i8* %439, align 1
  %442 = getelementptr inbounds i8, i8* %4, i64 65498
  %443 = load i8, i8* %442, align 1
  %444 = or i8 %443, 16
  store i8 %444, i8* %442, align 1
  %445 = getelementptr inbounds i8, i8* %4, i64 65499
  %446 = load i8, i8* %445, align 1
  %447 = or i8 %446, 16
  store i8 %447, i8* %445, align 1
  %448 = getelementptr inbounds i8, i8* %4, i64 65500
  %449 = load i8, i8* %448, align 1
  %450 = or i8 %449, 16
  store i8 %450, i8* %448, align 1
  %451 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %451) #9
  store i32 0, i32* %2, align 4
  %452 = call %struct.UMutableCPTrie* @umutablecptrie_open_69(i32 0, i32 0, i32* nonnull %2) #9
  %453 = load i8, i8* %4, align 1
  br label %235

454:                                              ; preds = %308
  %455 = add nuw nsw i64 %309, 44064
  %456 = getelementptr inbounds i8, i8* %4, i64 %455
  %457 = bitcast i8* %456 to <16 x i8>*
  %458 = load <16 x i8>, <16 x i8>* %457, align 1
  %459 = getelementptr inbounds i8, i8* %456, i64 16
  %460 = bitcast i8* %459 to <16 x i8>*
  %461 = load <16 x i8>, <16 x i8>* %460, align 1
  %462 = or <16 x i8> %458, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %463 = or <16 x i8> %461, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %464 = bitcast i8* %456 to <16 x i8>*
  store <16 x i8> %462, <16 x i8>* %464, align 1
  %465 = bitcast i8* %459 to <16 x i8>*
  store <16 x i8> %463, <16 x i8>* %465, align 1
  %466 = add nuw nsw i64 %309, 64
  br label %308

467:                                              ; preds = %25
  %468 = load i32, i32* %44, align 4
  %469 = sext i32 %468 to i64
  %470 = getelementptr inbounds i8, i8* %4, i64 %469
  %471 = load i8, i8* %470, align 1
  %472 = or i8 %471, 1
  store i8 %472, i8* %470, align 1
  %473 = getelementptr inbounds i32, i32* %26, i64 4
  br label %25
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare noalias %struct._IO_FILE* @fopen64(i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znam(i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare %struct.UMutableCPTrie* @umutablecptrie_open_69(i32, i32, i32*) local_unnamed_addr #4

declare void @umutablecptrie_close_69(%struct.UMutableCPTrie*) local_unnamed_addr #4

declare void @umutablecptrie_setRange_69(%struct.UMutableCPTrie*, i32, i32, i32, i32*) local_unnamed_addr #4

declare %struct.UCPTrie* @umutablecptrie_buildImmutable_69(%struct.UMutableCPTrie*, i32, i32, i32*) local_unnamed_addr #4

declare void @ucptrie_close_69(%struct.UCPTrie*) local_unnamed_addr #4

declare i32 @ucptrie_toBinary_69(%struct.UCPTrie*, i8*, i32, i32*) local_unnamed_addr #4

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #4

declare %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

; Function Attrs: nofree nounwind
declare i32 @fprintf(%struct._IO_FILE* nocapture, i8* nocapture readonly, ...) local_unnamed_addr #2

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #6

; Function Attrs: nofree nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #7

attributes #0 = { norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
