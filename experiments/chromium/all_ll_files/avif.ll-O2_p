; ModuleID = '../../third_party/libavif/src/src/avif.c'
source_filename = "../../third_party/libavif/src/src/avif.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.avifPixelFormatInfo = type { i32, i32, i32 }
%struct.avifImage = type { i32, i32, i32, i32, i32, i32, [3 x i8*], [3 x i32], i32, i32, i8*, i32, i32, i32, %struct.avifRWData, i16, i16, i16, i32, %struct.avifPixelAspectRatioBox, %struct.avifCleanApertureBox, %struct.avifImageRotation, %struct.avifImageMirror, %struct.avifRWData, %struct.avifRWData }
%struct.avifPixelAspectRatioBox = type { i32, i32 }
%struct.avifCleanApertureBox = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.avifImageRotation = type { i8 }
%struct.avifImageMirror = type { i8 }
%struct.avifRWData = type { i8*, i64 }
%struct.avifCodec = type { %struct.avifCodecSpecificOptions*, %struct.avifCodecInternal*, %struct.avifDiagnostics*, i32 (%struct.avifCodec*, %struct.avifDecoder*)*, i32 (%struct.avifCodec*, %struct.avifDecodeSample*, i32, %struct.avifImage*)*, i32 (%struct.avifCodec*, %struct.avifEncoder*, %struct.avifImage*, i32, i32, %struct.avifCodecEncodeOutput*)*, i32 (%struct.avifCodec*, %struct.avifCodecEncodeOutput*)*, {}* }
%struct.avifCodecSpecificOptions = type { %struct.avifCodecSpecificOption*, i32, i32, i32 }
%struct.avifCodecSpecificOption = type { i8*, i8* }
%struct.avifCodecInternal = type opaque
%struct.avifDiagnostics = type { [256 x i8] }
%struct.avifDecoder = type { i32, i32, i32, %struct.avifImage*, i32, i32, %struct.avifImageTiming, i64, double, i64, i32, i32, i32, i32, i32, %struct.avifIOStats, %struct.avifIO*, %struct.avifDiagnostics, %struct.avifDecoderData* }
%struct.avifImageTiming = type { i64, double, i64, double, i64 }
%struct.avifIOStats = type { i64, i64 }
%struct.avifIO = type { void (%struct.avifIO*)*, i32 (%struct.avifIO*, i32, i64, i64, %struct.avifROData*)*, i32 (%struct.avifIO*, i32, i64, i8*, i64)*, i64, i32, i8* }
%struct.avifROData = type { i8*, i64 }
%struct.avifDecoderData = type opaque
%struct.avifDecodeSample = type { %struct.avifROData, i32, i32, i32, i64, i64, i32 }
%struct.avifEncoder = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, %struct.avifIOStats, %struct.avifDiagnostics, %struct.avifEncoderData*, %struct.avifCodecSpecificOptions* }
%struct.avifEncoderData = type opaque
%struct.avifCodecEncodeOutput = type { %struct.avifEncodeSampleArray }
%struct.avifEncodeSampleArray = type { %struct.avifEncodeSample*, i32, i32, i32 }
%struct.avifEncodeSample = type { %struct.avifRWData, i32 }
%struct.avifRGBImage = type { i32, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.avifCropRect = type { i32, i32, i32, i32 }

@.str = private unnamed_addr constant [6 x i8] c"0.9.1\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"YUV444\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"YUV420\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"YUV422\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"YUV400\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"Unknown\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"OK\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"Invalid ftyp\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"No content\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"No YUV format selected\00", align 1
@.str.10 = private unnamed_addr constant [16 x i8] c"Reformat failed\00", align 1
@.str.11 = private unnamed_addr constant [18 x i8] c"Unsupported depth\00", align 1
@.str.12 = private unnamed_addr constant [32 x i8] c"Encoding of color planes failed\00", align 1
@.str.13 = private unnamed_addr constant [31 x i8] c"Encoding of alpha plane failed\00", align 1
@.str.14 = private unnamed_addr constant [20 x i8] c"BMFF parsing failed\00", align 1
@.str.15 = private unnamed_addr constant [19 x i8] c"No AV1 items found\00", align 1
@.str.16 = private unnamed_addr constant [32 x i8] c"Decoding of color planes failed\00", align 1
@.str.17 = private unnamed_addr constant [31 x i8] c"Decoding of alpha plane failed\00", align 1
@.str.18 = private unnamed_addr constant [37 x i8] c"Color and alpha planes size mismatch\00", align 1
@.str.19 = private unnamed_addr constant [36 x i8] c"Plane sizes don't match ispe values\00", align 1
@.str.20 = private unnamed_addr constant [19 x i8] c"No codec available\00", align 1
@.str.21 = private unnamed_addr constant [20 x i8] c"No images remaining\00", align 1
@.str.22 = private unnamed_addr constant [21 x i8] c"Invalid Exif payload\00", align 1
@.str.23 = private unnamed_addr constant [19 x i8] c"Invalid image grid\00", align 1
@.str.24 = private unnamed_addr constant [30 x i8] c"Invalid codec-specific option\00", align 1
@.str.25 = private unnamed_addr constant [15 x i8] c"Truncated data\00", align 1
@.str.26 = private unnamed_addr constant [11 x i8] c"IO not set\00", align 1
@.str.27 = private unnamed_addr constant [9 x i8] c"IO Error\00", align 1
@.str.28 = private unnamed_addr constant [14 x i8] c"Waiting on IO\00", align 1
@.str.29 = private unnamed_addr constant [17 x i8] c"Invalid argument\00", align 1
@.str.30 = private unnamed_addr constant [16 x i8] c"Not implemented\00", align 1
@.str.31 = private unnamed_addr constant [14 x i8] c"Unknown Error\00", align 1
@.str.32 = private unnamed_addr constant [67 x i8] c"[Strict] clap contains a denominator that is not strictly positive\00", align 1
@.str.33 = private unnamed_addr constant [38 x i8] c"[Strict] clap width is not an integer\00", align 1
@.str.34 = private unnamed_addr constant [39 x i8] c"[Strict] clap height is not an integer\00", align 1
@.str.35 = private unnamed_addr constant [52 x i8] c"[Strict] calculated crop X offset is not an integer\00", align 1
@.str.36 = private unnamed_addr constant [52 x i8] c"[Strict] calculated crop Y offset is not an integer\00", align 1
@.str.37 = private unnamed_addr constant [50 x i8] c"[Strict] at least one crop offset is not positive\00", align 1
@.str.41 = private unnamed_addr constant [7 x i8] c" [dec]\00", align 1
@.str.43 = private unnamed_addr constant [52 x i8] c"[Strict] crop rect width and height must be nonzero\00", align 1
@.str.44 = private unnamed_addr constant [48 x i8] c"[Strict] crop rect is out of the image's bounds\00", align 1
@.str.45 = private unnamed_addr constant [92 x i8] c"[Strict] crop rect X offset and width must both be even due to this image's YUV subsampling\00", align 1
@.str.46 = private unnamed_addr constant [93 x i8] c"[Strict] crop rect Y offset and height must both be even due to this image's YUV subsampling\00", align 1
@.str.47 = private unnamed_addr constant [6 x i8] c"dav1d\00", align 1
@switch.table.avifPixelFormatToString = private unnamed_addr constant [4 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0)], align 8
@switch.table.avifResultToString = private unnamed_addr constant [26 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.17, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.25, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.26, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.27, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.30, i64 0, i64 0)], align 8

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @avifVersion() local_unnamed_addr #0 {
  ret i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @avifPixelFormatToString(i32) local_unnamed_addr #0 {
  %2 = add i32 %0, -1
  %3 = icmp ult i32 %2, 4
  br i1 %3, label %4, label %8

4:                                                ; preds = %1
  %5 = sext i32 %2 to i64
  %6 = getelementptr inbounds [4 x i8*], [4 x i8*]* @switch.table.avifPixelFormatToString, i64 0, i64 %5
  %7 = load i8*, i8** %6, align 8
  ret i8* %7

8:                                                ; preds = %1
  ret i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define hidden void @avifGetPixelFormatInfo(i32, %struct.avifPixelFormatInfo* nocapture) local_unnamed_addr #1 {
  %3 = bitcast %struct.avifPixelFormatInfo* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %3, i8 0, i64 12, i1 false)
  switch i32 %0, label %17 [
    i32 1, label %4
    i32 2, label %7
    i32 3, label %10
    i32 4, label %13
  ]

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %1, i64 0, i32 1
  store i32 0, i32* %5, align 4
  %6 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %1, i64 0, i32 2
  store i32 0, i32* %6, align 4
  br label %17

7:                                                ; preds = %2
  %8 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %1, i64 0, i32 1
  store i32 1, i32* %8, align 4
  %9 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %1, i64 0, i32 2
  store i32 0, i32* %9, align 4
  br label %17

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %1, i64 0, i32 1
  store i32 1, i32* %11, align 4
  %12 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %1, i64 0, i32 2
  store i32 1, i32* %12, align 4
  br label %17

13:                                               ; preds = %2
  %14 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %1, i64 0, i32 1
  store i32 1, i32* %14, align 4
  %15 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %1, i64 0, i32 2
  store i32 1, i32* %15, align 4
  %16 = getelementptr inbounds %struct.avifPixelFormatInfo, %struct.avifPixelFormatInfo* %1, i64 0, i32 0
  store i32 1, i32* %16, align 4
  br label %17

17:                                               ; preds = %2, %13, %10, %7, %4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i8* @avifResultToString(i32) local_unnamed_addr #0 {
  %2 = icmp ult i32 %0, 26
  br i1 %2, label %3, label %7

3:                                                ; preds = %1
  %4 = sext i32 %0 to i64
  %5 = getelementptr inbounds [26 x i8*], [26 x i8*]* @switch.table.avifResultToString, i64 0, i64 %4
  %6 = load i8*, i8** %5, align 8
  ret i8* %6

7:                                                ; preds = %1
  ret i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.31, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.avifImage* @avifImageCreate(i32, i32, i32, i32) local_unnamed_addr #1 {
  %5 = tail call i8* @avifAlloc(i64 200) #9
  %6 = bitcast i8* %5 to %struct.avifImage*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 200, i1 false) #9
  %7 = getelementptr inbounds i8, i8* %5, i64 16
  %8 = bitcast i8* %7 to i32*
  store i32 1, i32* %8, align 8
  %9 = getelementptr inbounds i8, i8* %5, i64 64
  %10 = bitcast i8* %9 to i32*
  store i32 1, i32* %10, align 8
  %11 = getelementptr inbounds i8, i8* %5, i64 112
  %12 = bitcast i8* %11 to i16*
  store i16 2, i16* %12, align 8
  %13 = getelementptr inbounds i8, i8* %5, i64 114
  %14 = bitcast i8* %13 to i16*
  store i16 2, i16* %14, align 2
  %15 = getelementptr inbounds i8, i8* %5, i64 116
  %16 = bitcast i8* %15 to i16*
  store i16 2, i16* %16, align 4
  %17 = bitcast i8* %5 to i32*
  store i32 %0, i32* %17, align 8
  %18 = getelementptr inbounds i8, i8* %5, i64 4
  %19 = bitcast i8* %18 to i32*
  store i32 %1, i32* %19, align 4
  %20 = getelementptr inbounds i8, i8* %5, i64 8
  %21 = bitcast i8* %20 to i32*
  store i32 %2, i32* %21, align 8
  %22 = getelementptr inbounds i8, i8* %5, i64 12
  %23 = bitcast i8* %22 to i32*
  store i32 %3, i32* %23, align 4
  ret %struct.avifImage* %6
}

declare i8* @avifAlloc(i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden %struct.avifImage* @avifImageCreateEmpty() local_unnamed_addr #1 {
  %1 = tail call i8* @avifAlloc(i64 200) #9
  %2 = bitcast i8* %1 to %struct.avifImage*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 200, i1 false) #9
  %3 = getelementptr inbounds i8, i8* %1, i64 16
  %4 = bitcast i8* %3 to i32*
  store i32 1, i32* %4, align 8
  %5 = getelementptr inbounds i8, i8* %1, i64 64
  %6 = bitcast i8* %5 to i32*
  store i32 1, i32* %6, align 8
  %7 = getelementptr inbounds i8, i8* %1, i64 112
  %8 = bitcast i8* %7 to i16*
  store i16 2, i16* %8, align 8
  %9 = getelementptr inbounds i8, i8* %1, i64 114
  %10 = bitcast i8* %9 to i16*
  store i16 2, i16* %10, align 2
  %11 = getelementptr inbounds i8, i8* %1, i64 116
  %12 = bitcast i8* %11 to i16*
  store i16 2, i16* %12, align 4
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 16, i1 false)
  ret %struct.avifImage* %2
}

; Function Attrs: nounwind ssp uwtable
define hidden void @avifImageCopy(%struct.avifImage*, %struct.avifImage* readonly, i32) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %21, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 8
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %18, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 0
  %13 = load i8*, i8** %12, align 8
  tail call void @avifFree(i8* %13) #9
  %14 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 1
  %15 = load i8*, i8** %14, align 8
  tail call void @avifFree(i8* %15) #9
  %16 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 2
  %17 = load i8*, i8** %16, align 8
  tail call void @avifFree(i8* %17) #9
  br label %18

18:                                               ; preds = %11, %7
  %19 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 0
  %20 = bitcast i8** %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 40, i1 false) #9
  br label %21

21:                                               ; preds = %18, %3
  %22 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 12
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %28, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 10
  %27 = load i8*, i8** %26, align 8
  tail call void @avifFree(i8* %27) #9
  br label %28

28:                                               ; preds = %21, %25
  %29 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 10
  %30 = bitcast i8** %29 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %30, i8 0, i64 16, i1 false) #9
  %31 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 0
  %32 = load i32, i32* %31, align 8
  %33 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 0
  store i32 %32, i32* %33, align 8
  %34 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 1
  %35 = load i32, i32* %34, align 4
  %36 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 1
  store i32 %35, i32* %36, align 4
  %37 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 2
  %38 = load i32, i32* %37, align 8
  %39 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 2
  store i32 %38, i32* %39, align 8
  %40 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 3
  %41 = load i32, i32* %40, align 4
  store i32 %41, i32* %4, align 4
  %42 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 4
  %43 = load i32, i32* %42, align 8
  %44 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 4
  store i32 %43, i32* %44, align 8
  %45 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 5
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 5
  store i32 %46, i32* %47, align 4
  %48 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 9
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 9
  store i32 %49, i32* %50, align 8
  %51 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 13
  %52 = load i32, i32* %51, align 8
  %53 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 13
  store i32 %52, i32* %53, align 8
  %54 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 15
  %55 = load i16, i16* %54, align 8
  %56 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 15
  store i16 %55, i16* %56, align 8
  %57 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 16
  %58 = load i16, i16* %57, align 2
  %59 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 16
  store i16 %58, i16* %59, align 2
  %60 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 17
  %61 = load i16, i16* %60, align 4
  %62 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 17
  store i16 %61, i16* %62, align 4
  %63 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 18
  %64 = load i32, i32* %63, align 8
  %65 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 18
  store i32 %64, i32* %65, align 8
  %66 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 19
  %67 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 19
  %68 = bitcast %struct.avifPixelAspectRatioBox* %67 to i64*
  %69 = bitcast %struct.avifPixelAspectRatioBox* %66 to i64*
  %70 = load i64, i64* %68, align 4
  store i64 %70, i64* %69, align 4
  %71 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 20
  %72 = bitcast %struct.avifCleanApertureBox* %71 to i8*
  %73 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 20
  %74 = bitcast %struct.avifCleanApertureBox* %73 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %72, i8* align 4 %74, i64 32, i1 false)
  %75 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 21, i32 0
  %76 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 21, i32 0
  %77 = load i8, i8* %76, align 4
  store i8 %77, i8* %75, align 4
  %78 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 22, i32 0
  %79 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 22, i32 0
  %80 = load i8, i8* %79, align 1
  store i8 %80, i8* %78, align 1
  %81 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 14, i32 0
  %82 = load i8*, i8** %81, align 8
  %83 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 14, i32 1
  %84 = load i64, i64* %83, align 8
  %85 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 14
  tail call void @avifRWDataSet(%struct.avifRWData* %85, i8* %82, i64 %84) #9
  %86 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 23, i32 0
  %87 = load i8*, i8** %86, align 8
  %88 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 23, i32 1
  %89 = load i64, i64* %88, align 8
  %90 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 23
  tail call void @avifRWDataSet(%struct.avifRWData* %90, i8* %87, i64 %89) #9
  %91 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 24, i32 0
  %92 = load i8*, i8** %91, align 8
  %93 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 24, i32 1
  %94 = load i64, i64* %93, align 8
  %95 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 24
  tail call void @avifRWDataSet(%struct.avifRWData* %95, i8* %92, i64 %94) #9
  %96 = and i32 %2, 1
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %178, label %98

98:                                               ; preds = %28
  %99 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 0
  %100 = load i8*, i8** %99, align 8
  %101 = icmp eq i8* %100, null
  br i1 %101, label %178, label %102

102:                                              ; preds = %98
  tail call void @avifImageAllocatePlanes(%struct.avifImage* %0, i32 1)
  %103 = load i32, i32* %40, align 4
  switch i32 %103, label %106 [
    i32 4, label %105
    i32 3, label %104
  ]

104:                                              ; preds = %102
  br label %106

105:                                              ; preds = %102
  br label %106

106:                                              ; preds = %102, %104, %105
  %107 = phi i32 [ 1, %105 ], [ 1, %104 ], [ 0, %102 ]
  %108 = load i32, i32* %36, align 4
  %109 = add i32 %108, %107
  %110 = lshr i32 %109, %107
  %111 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 0
  %112 = load i32, i32* %111, align 4
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %130, label %114

114:                                              ; preds = %106
  %115 = icmp eq i32 %108, 0
  br i1 %115, label %243, label %116

116:                                              ; preds = %114
  %117 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 0
  %118 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 0
  %119 = load i8*, i8** %99, align 8
  %120 = load i8*, i8** %117, align 8
  %121 = load i32, i32* %118, align 4
  %122 = zext i32 %121 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %120, i8* align 1 %119, i64 %122, i1 false)
  %123 = icmp eq i32 %108, 1
  br i1 %123, label %243, label %124

124:                                              ; preds = %116
  %125 = add i32 %108, -1
  %126 = and i32 %125, 1
  %127 = icmp eq i32 %108, 2
  br i1 %127, label %228, label %128

128:                                              ; preds = %124
  %129 = sub i32 %125, %126
  br label %134

130:                                              ; preds = %106
  %131 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 0
  %132 = load i8*, i8** %131, align 8
  tail call void @avifFree(i8* %132) #9
  store i8* null, i8** %131, align 8
  %133 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 0
  store i32 0, i32* %133, align 4
  br label %243

134:                                              ; preds = %134, %128
  %135 = phi i32 [ 1, %128 ], [ %160, %134 ]
  %136 = phi i32 [ %129, %128 ], [ %161, %134 ]
  %137 = load i32, i32* %111, align 4
  %138 = load i8*, i8** %99, align 8
  %139 = mul i32 %137, %135
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds i8, i8* %138, i64 %140
  %142 = load i8*, i8** %117, align 8
  %143 = load i32, i32* %118, align 4
  %144 = mul i32 %143, %135
  %145 = zext i32 %144 to i64
  %146 = getelementptr inbounds i8, i8* %142, i64 %145
  %147 = zext i32 %143 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %146, i8* align 1 %141, i64 %147, i1 false)
  %148 = add nuw i32 %135, 1
  %149 = load i32, i32* %111, align 4
  %150 = load i8*, i8** %99, align 8
  %151 = mul i32 %149, %148
  %152 = zext i32 %151 to i64
  %153 = getelementptr inbounds i8, i8* %150, i64 %152
  %154 = load i8*, i8** %117, align 8
  %155 = load i32, i32* %118, align 4
  %156 = mul i32 %155, %148
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds i8, i8* %154, i64 %157
  %159 = zext i32 %155 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %158, i8* align 1 %153, i64 %159, i1 false)
  %160 = add nuw i32 %135, 2
  %161 = add i32 %136, -2
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %228, label %134

163:                                              ; preds = %333, %327
  %164 = phi i32 [ 1, %327 ], [ %359, %333 ]
  %165 = icmp eq i32 %329, 0
  br i1 %165, label %178, label %166

166:                                              ; preds = %163
  %167 = load i32, i32* %313, align 4
  %168 = load i8*, i8** %319, align 8
  %169 = mul i32 %167, %164
  %170 = zext i32 %169 to i64
  %171 = getelementptr inbounds i8, i8* %168, i64 %170
  %172 = load i8*, i8** %320, align 8
  %173 = load i32, i32* %321, align 4
  %174 = mul i32 %173, %164
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds i8, i8* %172, i64 %175
  %177 = zext i32 %173 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %176, i8* align 1 %171, i64 %177, i1 false)
  br label %178

178:                                              ; preds = %166, %163, %318, %316, %362, %98, %28
  %179 = and i32 %2, 2
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %227, label %181

181:                                              ; preds = %178
  %182 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 10
  %183 = load i8*, i8** %182, align 8
  %184 = icmp eq i8* %183, null
  br i1 %184, label %227, label %185

185:                                              ; preds = %181
  %186 = load i32, i32* %39, align 8
  %187 = icmp ult i32 %186, 9
  %188 = select i1 %187, i32 1, i32 2
  %189 = load i32, i32* %33, align 8
  %190 = mul i32 %188, %189
  %191 = load i8*, i8** %29, align 8
  %192 = icmp eq i8* %191, null
  br i1 %192, label %193, label %199

193:                                              ; preds = %185
  %194 = load i32, i32* %36, align 4
  %195 = mul i32 %194, %190
  %196 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 11
  store i32 %190, i32* %196, align 8
  %197 = sext i32 %195 to i64
  %198 = tail call i8* @avifAlloc(i64 %197) #9
  store i8* %198, i8** %29, align 8
  br label %199

199:                                              ; preds = %185, %193
  %200 = phi i8* [ %191, %185 ], [ %198, %193 ]
  store i32 1, i32* %22, align 4
  %201 = load i32, i32* %36, align 4
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %227, label %203

203:                                              ; preds = %199
  %204 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 11
  %205 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 11
  %206 = load i8*, i8** %182, align 8
  %207 = load i32, i32* %205, align 8
  %208 = zext i32 %207 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %200, i8* align 1 %206, i64 %208, i1 false)
  %209 = load i32, i32* %36, align 4
  %210 = icmp ugt i32 %209, 1
  br i1 %210, label %211, label %227

211:                                              ; preds = %203, %211
  %212 = phi i32 [ %224, %211 ], [ 1, %203 ]
  %213 = load i8*, i8** %29, align 8
  %214 = load i8*, i8** %182, align 8
  %215 = load i32, i32* %204, align 8
  %216 = mul i32 %215, %212
  %217 = zext i32 %216 to i64
  %218 = getelementptr inbounds i8, i8* %214, i64 %217
  %219 = load i32, i32* %205, align 8
  %220 = mul i32 %219, %212
  %221 = zext i32 %220 to i64
  %222 = getelementptr inbounds i8, i8* %213, i64 %221
  %223 = zext i32 %219 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %222, i8* align 1 %218, i64 %223, i1 false)
  %224 = add nuw i32 %212, 1
  %225 = load i32, i32* %36, align 4
  %226 = icmp ult i32 %224, %225
  br i1 %226, label %211, label %227

227:                                              ; preds = %211, %203, %199, %181, %178
  ret void

228:                                              ; preds = %134, %124
  %229 = phi i32 [ 1, %124 ], [ %160, %134 ]
  %230 = icmp eq i32 %126, 0
  br i1 %230, label %243, label %231

231:                                              ; preds = %228
  %232 = load i32, i32* %111, align 4
  %233 = load i8*, i8** %99, align 8
  %234 = mul i32 %232, %229
  %235 = zext i32 %234 to i64
  %236 = getelementptr inbounds i8, i8* %233, i64 %235
  %237 = load i8*, i8** %117, align 8
  %238 = load i32, i32* %118, align 4
  %239 = mul i32 %238, %229
  %240 = zext i32 %239 to i64
  %241 = getelementptr inbounds i8, i8* %237, i64 %240
  %242 = zext i32 %238 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %241, i8* align 1 %236, i64 %242, i1 false)
  br label %243

243:                                              ; preds = %231, %228, %116, %130, %114
  %244 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 1
  %245 = load i32, i32* %244, align 4
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %293, label %247

247:                                              ; preds = %243
  %248 = icmp eq i32 %110, 0
  br i1 %248, label %312, label %249

249:                                              ; preds = %247
  %250 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 1
  %251 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 1
  %252 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 1
  %253 = load i8*, i8** %250, align 8
  %254 = load i8*, i8** %251, align 8
  %255 = load i32, i32* %252, align 4
  %256 = zext i32 %255 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %254, i8* align 1 %253, i64 %256, i1 false)
  %257 = icmp eq i32 %110, 1
  br i1 %257, label %312, label %258

258:                                              ; preds = %249
  %259 = add i32 %110, -1
  %260 = and i32 %259, 1
  %261 = icmp eq i32 %110, 2
  br i1 %261, label %297, label %262

262:                                              ; preds = %258
  %263 = sub i32 %259, %260
  br label %264

264:                                              ; preds = %264, %262
  %265 = phi i32 [ 1, %262 ], [ %290, %264 ]
  %266 = phi i32 [ %263, %262 ], [ %291, %264 ]
  %267 = load i32, i32* %244, align 4
  %268 = load i8*, i8** %250, align 8
  %269 = mul i32 %267, %265
  %270 = zext i32 %269 to i64
  %271 = getelementptr inbounds i8, i8* %268, i64 %270
  %272 = load i8*, i8** %251, align 8
  %273 = load i32, i32* %252, align 4
  %274 = mul i32 %273, %265
  %275 = zext i32 %274 to i64
  %276 = getelementptr inbounds i8, i8* %272, i64 %275
  %277 = zext i32 %273 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %276, i8* align 1 %271, i64 %277, i1 false)
  %278 = add nuw i32 %265, 1
  %279 = load i32, i32* %244, align 4
  %280 = load i8*, i8** %250, align 8
  %281 = mul i32 %279, %278
  %282 = zext i32 %281 to i64
  %283 = getelementptr inbounds i8, i8* %280, i64 %282
  %284 = load i8*, i8** %251, align 8
  %285 = load i32, i32* %252, align 4
  %286 = mul i32 %285, %278
  %287 = zext i32 %286 to i64
  %288 = getelementptr inbounds i8, i8* %284, i64 %287
  %289 = zext i32 %285 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %288, i8* align 1 %283, i64 %289, i1 false)
  %290 = add nuw i32 %265, 2
  %291 = add i32 %266, -2
  %292 = icmp eq i32 %291, 0
  br i1 %292, label %297, label %264

293:                                              ; preds = %243
  %294 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 1
  %295 = load i8*, i8** %294, align 8
  tail call void @avifFree(i8* %295) #9
  store i8* null, i8** %294, align 8
  %296 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 1
  store i32 0, i32* %296, align 4
  br label %312

297:                                              ; preds = %264, %258
  %298 = phi i32 [ 1, %258 ], [ %290, %264 ]
  %299 = icmp eq i32 %260, 0
  br i1 %299, label %312, label %300

300:                                              ; preds = %297
  %301 = load i32, i32* %244, align 4
  %302 = load i8*, i8** %250, align 8
  %303 = mul i32 %301, %298
  %304 = zext i32 %303 to i64
  %305 = getelementptr inbounds i8, i8* %302, i64 %304
  %306 = load i8*, i8** %251, align 8
  %307 = load i32, i32* %252, align 4
  %308 = mul i32 %307, %298
  %309 = zext i32 %308 to i64
  %310 = getelementptr inbounds i8, i8* %306, i64 %309
  %311 = zext i32 %307 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %310, i8* align 1 %305, i64 %311, i1 false)
  br label %312

312:                                              ; preds = %300, %297, %249, %247, %293
  %313 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 2
  %314 = load i32, i32* %313, align 4
  %315 = icmp eq i32 %314, 0
  br i1 %315, label %362, label %316

316:                                              ; preds = %312
  %317 = icmp eq i32 %110, 0
  br i1 %317, label %178, label %318

318:                                              ; preds = %316
  %319 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 2
  %320 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 2
  %321 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 2
  %322 = load i8*, i8** %319, align 8
  %323 = load i8*, i8** %320, align 8
  %324 = load i32, i32* %321, align 4
  %325 = zext i32 %324 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %323, i8* align 1 %322, i64 %325, i1 false)
  %326 = icmp eq i32 %110, 1
  br i1 %326, label %178, label %327

327:                                              ; preds = %318
  %328 = add i32 %110, -1
  %329 = and i32 %328, 1
  %330 = icmp eq i32 %110, 2
  br i1 %330, label %163, label %331

331:                                              ; preds = %327
  %332 = sub i32 %328, %329
  br label %333

333:                                              ; preds = %333, %331
  %334 = phi i32 [ 1, %331 ], [ %359, %333 ]
  %335 = phi i32 [ %332, %331 ], [ %360, %333 ]
  %336 = load i32, i32* %313, align 4
  %337 = load i8*, i8** %319, align 8
  %338 = mul i32 %336, %334
  %339 = zext i32 %338 to i64
  %340 = getelementptr inbounds i8, i8* %337, i64 %339
  %341 = load i8*, i8** %320, align 8
  %342 = load i32, i32* %321, align 4
  %343 = mul i32 %342, %334
  %344 = zext i32 %343 to i64
  %345 = getelementptr inbounds i8, i8* %341, i64 %344
  %346 = zext i32 %342 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %345, i8* align 1 %340, i64 %346, i1 false)
  %347 = add nuw i32 %334, 1
  %348 = load i32, i32* %313, align 4
  %349 = load i8*, i8** %319, align 8
  %350 = mul i32 %348, %347
  %351 = zext i32 %350 to i64
  %352 = getelementptr inbounds i8, i8* %349, i64 %351
  %353 = load i8*, i8** %320, align 8
  %354 = load i32, i32* %321, align 4
  %355 = mul i32 %354, %347
  %356 = zext i32 %355 to i64
  %357 = getelementptr inbounds i8, i8* %353, i64 %356
  %358 = zext i32 %354 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %357, i8* align 1 %352, i64 %358, i1 false)
  %359 = add nuw i32 %334, 2
  %360 = add i32 %335, -2
  %361 = icmp eq i32 %360, 0
  br i1 %361, label %163, label %333

362:                                              ; preds = %312
  %363 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 2
  %364 = load i8*, i8** %363, align 8
  tail call void @avifFree(i8* %364) #9
  store i8* null, i8** %363, align 8
  %365 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 2
  store i32 0, i32* %365, align 4
  br label %178
}

; Function Attrs: nounwind ssp uwtable
define hidden void @avifImageFreePlanes(%struct.avifImage* nocapture, i32) local_unnamed_addr #1 {
  %3 = and i32 %1, 1
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %23, label %5

5:                                                ; preds = %2
  %6 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 3
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %23, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 8
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %20, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 0
  %15 = load i8*, i8** %14, align 8
  tail call void @avifFree(i8* %15) #9
  %16 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 1
  %17 = load i8*, i8** %16, align 8
  tail call void @avifFree(i8* %17) #9
  %18 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 2
  %19 = load i8*, i8** %18, align 8
  tail call void @avifFree(i8* %19) #9
  br label %20

20:                                               ; preds = %9, %13
  %21 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 0
  %22 = bitcast i8** %21 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 40, i1 false)
  br label %23

23:                                               ; preds = %5, %2, %20
  %24 = and i32 %1, 2
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %36, label %26

26:                                               ; preds = %23
  %27 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 12
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 10
  %32 = load i8*, i8** %31, align 8
  tail call void @avifFree(i8* %32) #9
  br label %33

33:                                               ; preds = %26, %30
  %34 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 10
  %35 = bitcast i8** %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 16, i1 false)
  br label %36

36:                                               ; preds = %23, %33
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @avifImageSetProfileICC(%struct.avifImage*, i8*, i64) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 14
  tail call void @avifRWDataSet(%struct.avifRWData* %4, i8* %1, i64 %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @avifImageSetMetadataExif(%struct.avifImage*, i8*, i64) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 23
  tail call void @avifRWDataSet(%struct.avifRWData* %4, i8* %1, i64 %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @avifImageSetMetadataXMP(%struct.avifImage*, i8*, i64) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 24
  tail call void @avifRWDataSet(%struct.avifRWData* %4, i8* %1, i64 %2) #9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @avifImageAllocatePlanes(%struct.avifImage* nocapture, i32) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp ult i32 %4, 9
  %6 = select i1 %5, i32 1, i32 2
  %7 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = mul i32 %6, %8
  %10 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = mul i32 %9, %11
  %13 = and i32 %1, 1
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %59, label %15

15:                                               ; preds = %2
  %16 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 3
  %17 = load i32, i32* %16, align 4
  switch i32 %17, label %21 [
    i32 0, label %59
    i32 4, label %20
    i32 2, label %18
    i32 3, label %19
  ]

18:                                               ; preds = %15
  br label %21

19:                                               ; preds = %15
  br label %21

20:                                               ; preds = %15
  br label %21

21:                                               ; preds = %15, %18, %19, %20
  %22 = phi i32 [ 1, %20 ], [ 1, %19 ], [ 1, %18 ], [ 0, %15 ]
  %23 = phi i32 [ 1, %20 ], [ 1, %19 ], [ 0, %18 ], [ 0, %15 ]
  %24 = add i32 %22, %8
  %25 = lshr i32 %24, %22
  %26 = add i32 %23, %11
  %27 = lshr i32 %26, %23
  %28 = mul nsw i32 %25, %6
  %29 = mul nsw i32 %28, %27
  %30 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 0
  %31 = load i8*, i8** %30, align 8
  %32 = icmp eq i8* %31, null
  br i1 %32, label %33, label %38

33:                                               ; preds = %21
  %34 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 0
  store i32 %9, i32* %34, align 8
  %35 = sext i32 %12 to i64
  %36 = tail call i8* @avifAlloc(i64 %35) #9
  store i8* %36, i8** %30, align 8
  %37 = load i32, i32* %16, align 4
  br label %38

38:                                               ; preds = %21, %33
  %39 = phi i32 [ %17, %21 ], [ %37, %33 ]
  %40 = icmp eq i32 %39, 4
  br i1 %40, label %57, label %41

41:                                               ; preds = %38
  %42 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 1
  %43 = load i8*, i8** %42, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %45, label %49

45:                                               ; preds = %41
  %46 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 1
  store i32 %28, i32* %46, align 4
  %47 = sext i32 %29 to i64
  %48 = tail call i8* @avifAlloc(i64 %47) #9
  store i8* %48, i8** %42, align 8
  br label %49

49:                                               ; preds = %41, %45
  %50 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 2
  %51 = load i8*, i8** %50, align 8
  %52 = icmp eq i8* %51, null
  br i1 %52, label %53, label %57

53:                                               ; preds = %49
  %54 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 2
  store i32 %28, i32* %54, align 8
  %55 = sext i32 %29 to i64
  %56 = tail call i8* @avifAlloc(i64 %55) #9
  store i8* %56, i8** %50, align 8
  br label %57

57:                                               ; preds = %49, %38, %53
  %58 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 8
  store i32 1, i32* %58, align 4
  br label %59

59:                                               ; preds = %15, %2, %57
  %60 = and i32 %1, 2
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %72, label %62

62:                                               ; preds = %59
  %63 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 10
  %64 = load i8*, i8** %63, align 8
  %65 = icmp eq i8* %64, null
  br i1 %65, label %66, label %70

66:                                               ; preds = %62
  %67 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 11
  store i32 %9, i32* %67, align 8
  %68 = sext i32 %12 to i64
  %69 = tail call i8* @avifAlloc(i64 %68) #9
  store i8* %69, i8** %63, align 8
  br label %70

70:                                               ; preds = %62, %66
  %71 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 12
  store i32 1, i32* %71, align 4
  br label %72

72:                                               ; preds = %59, %70
  ret void
}

declare void @avifFree(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @avifImageDestroy(%struct.avifImage*) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %19, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 8
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %16, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 0
  %11 = load i8*, i8** %10, align 8
  tail call void @avifFree(i8* %11) #9
  %12 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 1
  %13 = load i8*, i8** %12, align 8
  tail call void @avifFree(i8* %13) #9
  %14 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 2
  %15 = load i8*, i8** %14, align 8
  tail call void @avifFree(i8* %15) #9
  br label %16

16:                                               ; preds = %9, %5
  %17 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 0
  %18 = bitcast i8** %17 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %18, i8 0, i64 40, i1 false) #9
  br label %19

19:                                               ; preds = %16, %1
  %20 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 12
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 10
  %25 = load i8*, i8** %24, align 8
  tail call void @avifFree(i8* %25) #9
  br label %26

26:                                               ; preds = %19, %23
  %27 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 10
  %28 = bitcast i8** %27 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %28, i8 0, i64 16, i1 false) #9
  %29 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 14
  tail call void @avifRWDataFree(%struct.avifRWData* %29) #9
  %30 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 23
  tail call void @avifRWDataFree(%struct.avifRWData* %30) #9
  %31 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 24
  tail call void @avifRWDataFree(%struct.avifRWData* %31) #9
  %32 = bitcast %struct.avifImage* %0 to i8*
  tail call void @avifFree(i8* %32) #9
  ret void
}

declare void @avifRWDataFree(%struct.avifRWData*) local_unnamed_addr #3

declare void @avifRWDataSet(%struct.avifRWData*, i8*, i64) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @avifImageUsesU16(%struct.avifImage* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 8
  %4 = icmp ugt i32 %3, 8
  %5 = zext i1 %4 to i32
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define hidden void @avifImageStealPlanes(%struct.avifImage* nocapture, %struct.avifImage* nocapture, i32) local_unnamed_addr #1 {
  %4 = and i32 %2, 1
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %24, label %6

6:                                                ; preds = %3
  %7 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %24, label %10

10:                                               ; preds = %6
  %11 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 8
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %21, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 0
  %16 = load i8*, i8** %15, align 8
  tail call void @avifFree(i8* %16) #9
  %17 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 1
  %18 = load i8*, i8** %17, align 8
  tail call void @avifFree(i8* %18) #9
  %19 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 2
  %20 = load i8*, i8** %19, align 8
  tail call void @avifFree(i8* %20) #9
  br label %21

21:                                               ; preds = %14, %10
  %22 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 0
  %23 = bitcast i8** %22 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 40, i1 false) #9
  br label %24

24:                                               ; preds = %21, %6, %3
  %25 = and i32 %2, 2
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %37, label %27

27:                                               ; preds = %24
  %28 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 12
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %34, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 10
  %33 = load i8*, i8** %32, align 8
  tail call void @avifFree(i8* %33) #9
  br label %34

34:                                               ; preds = %31, %27
  %35 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 10
  %36 = bitcast i8** %35 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %36, i8 0, i64 16, i1 false) #9
  br label %37

37:                                               ; preds = %24, %34
  br i1 %5, label %70, label %38

38:                                               ; preds = %37
  %39 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6
  %40 = bitcast [3 x i8*]* %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6
  %43 = bitcast [3 x i8*]* %42 to i64*
  store i64 %41, i64* %43, align 8
  %44 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 0
  %45 = load i32, i32* %44, align 8
  %46 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 0
  store i32 %45, i32* %46, align 8
  %47 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 1
  %48 = bitcast i8** %47 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 1
  %51 = bitcast i8** %50 to i64*
  store i64 %49, i64* %51, align 8
  %52 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 1
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 1
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 6, i64 2
  %56 = bitcast i8** %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 6, i64 2
  %59 = bitcast i8** %58 to i64*
  store i64 %57, i64* %59, align 8
  %60 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 7, i64 2
  %61 = load i32, i32* %60, align 8
  %62 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 7, i64 2
  store i32 %61, i32* %62, align 8
  %63 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 3
  %64 = bitcast [3 x i8*]* %39 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %64, i8 0, i64 36, i1 false)
  %65 = load i32, i32* %63, align 4
  %66 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 3
  store i32 %65, i32* %66, align 4
  %67 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 8
  %68 = load i32, i32* %67, align 4
  %69 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 8
  store i32 %68, i32* %69, align 4
  store i32 0, i32* %67, align 4
  br label %70

70:                                               ; preds = %37, %38
  br i1 %26, label %83, label %71

71:                                               ; preds = %70
  %72 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 10
  %73 = bitcast i8** %72 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 10
  %76 = bitcast i8** %75 to i64*
  store i64 %74, i64* %76, align 8
  %77 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 11
  %78 = load i32, i32* %77, align 8
  %79 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 11
  store i32 %78, i32* %79, align 8
  store i8* null, i8** %72, align 8
  store i32 0, i32* %77, align 8
  %80 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 12
  %81 = load i32, i32* %80, align 4
  %82 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %0, i64 0, i32 12
  store i32 %81, i32* %82, align 4
  store i32 0, i32* %80, align 4
  br label %83

83:                                               ; preds = %70, %71
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @avifCodecDestroy(%struct.avifCodec*) local_unnamed_addr #1 {
  %2 = icmp eq %struct.avifCodec* %0, null
  br i1 %2, label %9, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.avifCodec, %struct.avifCodec* %0, i64 0, i32 7
  %5 = bitcast {}** %4 to void (%struct.avifCodec*)**
  %6 = load void (%struct.avifCodec*)*, void (%struct.avifCodec*)** %5, align 8
  %7 = icmp eq void (%struct.avifCodec*)* %6, null
  br i1 %7, label %9, label %8

8:                                                ; preds = %3
  tail call void %6(%struct.avifCodec* nonnull %0) #9
  br label %9

9:                                                ; preds = %3, %1, %8
  %10 = bitcast %struct.avifCodec* %0 to i8*
  tail call void @avifFree(i8* %10) #9
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @avifRGBFormatHasAlpha(i32) local_unnamed_addr #0 {
  %2 = icmp ne i32 %0, 0
  %3 = icmp ne i32 %0, 3
  %4 = and i1 %2, %3
  %5 = zext i1 %4 to i32
  ret i32 %5
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden i32 @avifRGBFormatChannelCount(i32) local_unnamed_addr #0 {
  %2 = icmp eq i32 %0, 0
  %3 = icmp eq i32 %0, 3
  %4 = or i1 %3, %2
  %5 = select i1 %4, i32 3, i32 4
  ret i32 %5
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @avifRGBImagePixelSize(%struct.avifRGBImage* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  %5 = icmp eq i32 %3, 3
  %6 = or i1 %5, %4
  %7 = select i1 %6, i32 3, i32 4
  %8 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %0, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = icmp ugt i32 %9, 8
  %11 = select i1 %10, i32 2, i32 1
  %12 = mul nuw nsw i32 %7, %11
  ret i32 %12
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @avifRGBImageSetDefaults(%struct.avifRGBImage* nocapture, %struct.avifImage* nocapture readonly) local_unnamed_addr #5 {
  %3 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %0, i64 0, i32 0
  store i32 %4, i32* %5, align 8
  %6 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %0, i64 0, i32 1
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds %struct.avifImage, %struct.avifImage* %1, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %0, i64 0, i32 2
  store i32 %10, i32* %11, align 8
  %12 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %0, i64 0, i32 3
  %13 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %0, i64 0, i32 7
  store i8* null, i8** %13, align 8
  %14 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %0, i64 0, i32 8
  store i32 0, i32* %14, align 8
  %15 = bitcast i32* %12 to <4 x i32>*
  store <4 x i32> <i32 1, i32 0, i32 0, i32 0>, <4 x i32>* %15, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @avifRGBImageAllocatePixels(%struct.avifRGBImage* nocapture) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %0, i64 0, i32 7
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @avifFree(i8* nonnull %3) #9
  br label %6

6:                                                ; preds = %1, %5
  %7 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %0, i64 0, i32 3
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %10, 0
  %12 = icmp eq i32 %10, 3
  %13 = or i1 %12, %11
  %14 = select i1 %13, i32 3, i32 4
  %15 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %0, i64 0, i32 2
  %16 = load i32, i32* %15, align 8
  %17 = icmp ugt i32 %16, 8
  %18 = select i1 %17, i32 2, i32 1
  %19 = mul i32 %18, %8
  %20 = mul i32 %19, %14
  %21 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %0, i64 0, i32 8
  store i32 %20, i32* %21, align 8
  %22 = zext i32 %20 to i64
  %23 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %0, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = zext i32 %24 to i64
  %26 = mul nuw i64 %22, %25
  %27 = tail call i8* @avifAlloc(i64 %26) #9
  store i8* %27, i8** %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @avifRGBImageFreePixels(%struct.avifRGBImage* nocapture) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %0, i64 0, i32 7
  %3 = load i8*, i8** %2, align 8
  %4 = icmp eq i8* %3, null
  br i1 %4, label %6, label %5

5:                                                ; preds = %1
  tail call void @avifFree(i8* nonnull %3) #9
  br label %6

6:                                                ; preds = %1, %5
  store i8* null, i8** %2, align 8
  %7 = getelementptr inbounds %struct.avifRGBImage, %struct.avifRGBImage* %0, i64 0, i32 8
  store i32 0, i32* %7, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @avifCropRectConvertCleanApertureBox(%struct.avifCropRect* nocapture, %struct.avifCleanApertureBox* nocapture readonly, i32, i32, i32, %struct.avifDiagnostics*) local_unnamed_addr #1 {
  %7 = getelementptr inbounds %struct.avifCleanApertureBox, %struct.avifCleanApertureBox* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.avifCleanApertureBox, %struct.avifCleanApertureBox* %1, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %struct.avifCleanApertureBox, %struct.avifCleanApertureBox* %1, i64 0, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.avifCleanApertureBox, %struct.avifCleanApertureBox* %1, i64 0, i32 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.avifCleanApertureBox, %struct.avifCleanApertureBox* %1, i64 0, i32 4
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %struct.avifCleanApertureBox, %struct.avifCleanApertureBox* %1, i64 0, i32 5
  %18 = load i32, i32* %17, align 4
  %19 = getelementptr inbounds %struct.avifCleanApertureBox, %struct.avifCleanApertureBox* %1, i64 0, i32 6
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %struct.avifCleanApertureBox, %struct.avifCleanApertureBox* %1, i64 0, i32 7
  %22 = load i32, i32* %21, align 4
  %23 = icmp slt i32 %10, 1
  %24 = icmp slt i32 %14, 1
  %25 = or i1 %23, %24
  %26 = icmp slt i32 %18, 1
  %27 = or i1 %25, %26
  %28 = icmp slt i32 %22, 1
  %29 = or i1 %27, %28
  br i1 %29, label %30, label %31

30:                                               ; preds = %6
  tail call void (%struct.avifDiagnostics*, i8*, ...) @avifDiagnosticsPrintf(%struct.avifDiagnostics* %5, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.32, i64 0, i64 0)) #9
  br label %110

31:                                               ; preds = %6
  %32 = srem i32 %8, %10
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %35, label %34

34:                                               ; preds = %31
  tail call void (%struct.avifDiagnostics*, i8*, ...) @avifDiagnosticsPrintf(%struct.avifDiagnostics* %5, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.33, i64 0, i64 0)) #9
  br label %110

35:                                               ; preds = %31
  %36 = srem i32 %12, %14
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %39, label %38

38:                                               ; preds = %35
  tail call void (%struct.avifDiagnostics*, i8*, ...) @avifDiagnosticsPrintf(%struct.avifDiagnostics* %5, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.34, i64 0, i64 0)) #9
  br label %110

39:                                               ; preds = %35
  %40 = ashr i32 %2, 1
  %41 = srem i32 %2, 2
  %42 = icmp eq i32 %41, 1
  %43 = or i32 %2, 1
  %44 = select i1 %42, i32 %43, i32 %40
  %45 = select i1 %42, i64 8589934592, i64 4294967296
  %46 = zext i32 %44 to i64
  %47 = or i64 %45, %46
  %48 = srem i32 %3, 2
  %49 = icmp eq i32 %48, 1
  %50 = zext i32 %18 to i64
  %51 = shl nuw i64 %50, 32
  %52 = zext i32 %16 to i64
  %53 = or i64 %51, %52
  %54 = tail call fastcc i64 @clapFractionAdd(i64 %47, i64 %53)
  %55 = shl nsw i32 %10, 1
  %56 = zext i32 %55 to i64
  %57 = shl nuw i64 %56, 32
  %58 = zext i32 %8 to i64
  %59 = or i64 %57, %58
  %60 = tail call fastcc i64 @clapFractionSub(i64 %54, i64 %59)
  %61 = trunc i64 %60 to i32
  %62 = lshr i64 %60, 32
  %63 = trunc i64 %62 to i32
  %64 = srem i32 %61, %63
  %65 = sdiv i32 %61, %63
  %66 = icmp eq i32 %64, 0
  br i1 %66, label %68, label %67

67:                                               ; preds = %39
  tail call void (%struct.avifDiagnostics*, i8*, ...) @avifDiagnosticsPrintf(%struct.avifDiagnostics* %5, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.35, i64 0, i64 0)) #9
  br label %110

68:                                               ; preds = %39
  %69 = select i1 %49, i64 8589934592, i64 4294967296
  %70 = or i32 %3, 1
  %71 = ashr i32 %3, 1
  %72 = select i1 %49, i32 %70, i32 %71
  %73 = zext i32 %72 to i64
  %74 = or i64 %69, %73
  %75 = zext i32 %22 to i64
  %76 = shl nuw i64 %75, 32
  %77 = zext i32 %20 to i64
  %78 = or i64 %76, %77
  %79 = tail call fastcc i64 @clapFractionAdd(i64 %74, i64 %78)
  %80 = shl nsw i32 %14, 1
  %81 = zext i32 %80 to i64
  %82 = shl nuw i64 %81, 32
  %83 = zext i32 %12 to i64
  %84 = or i64 %82, %83
  %85 = tail call fastcc i64 @clapFractionSub(i64 %79, i64 %84)
  %86 = trunc i64 %85 to i32
  %87 = lshr i64 %85, 32
  %88 = trunc i64 %87 to i32
  %89 = srem i32 %86, %88
  %90 = sdiv i32 %86, %88
  %91 = icmp eq i32 %89, 0
  br i1 %91, label %93, label %92

92:                                               ; preds = %68
  tail call void (%struct.avifDiagnostics*, i8*, ...) @avifDiagnosticsPrintf(%struct.avifDiagnostics* %5, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.36, i64 0, i64 0)) #9
  br label %110

93:                                               ; preds = %68
  %94 = or i64 %85, %60
  %95 = trunc i64 %94 to i32
  %96 = icmp slt i32 %95, 0
  br i1 %96, label %97, label %98

97:                                               ; preds = %93
  tail call void (%struct.avifDiagnostics*, i8*, ...) @avifDiagnosticsPrintf(%struct.avifDiagnostics* %5, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.37, i64 0, i64 0)) #9
  br label %110

98:                                               ; preds = %93
  %99 = getelementptr inbounds %struct.avifCropRect, %struct.avifCropRect* %0, i64 0, i32 0
  store i32 %65, i32* %99, align 4
  %100 = getelementptr inbounds %struct.avifCropRect, %struct.avifCropRect* %0, i64 0, i32 1
  store i32 %90, i32* %100, align 4
  %101 = load i32, i32* %7, align 4
  %102 = load i32, i32* %9, align 4
  %103 = udiv i32 %101, %102
  %104 = getelementptr inbounds %struct.avifCropRect, %struct.avifCropRect* %0, i64 0, i32 2
  store i32 %103, i32* %104, align 4
  %105 = load i32, i32* %11, align 4
  %106 = load i32, i32* %13, align 4
  %107 = udiv i32 %105, %106
  %108 = getelementptr inbounds %struct.avifCropRect, %struct.avifCropRect* %0, i64 0, i32 3
  store i32 %107, i32* %108, align 4
  %109 = tail call fastcc i32 @avifCropRectIsValid(%struct.avifCropRect* %0, i32 %2, i32 %3, i32 %4, %struct.avifDiagnostics* %5)
  br label %110

110:                                              ; preds = %67, %98, %97, %92, %38, %34, %30
  %111 = phi i32 [ 0, %30 ], [ 0, %34 ], [ 0, %38 ], [ 0, %67 ], [ 0, %92 ], [ 0, %97 ], [ %109, %98 ]
  ret i32 %111
}

declare void @avifDiagnosticsPrintf(%struct.avifDiagnostics*, i8*, ...) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal fastcc i64 @clapFractionAdd(i64, i64) unnamed_addr #0 {
  %3 = trunc i64 %0 to i32
  %4 = lshr i64 %0, 32
  %5 = trunc i64 %4 to i32
  %6 = trunc i64 %1 to i32
  %7 = lshr i64 %1, 32
  %8 = trunc i64 %7 to i32
  %9 = icmp slt i32 %3, 0
  %10 = sub nsw i32 0, %3
  %11 = select i1 %9, i32 %10, i32 %3
  %12 = icmp slt i32 %5, 0
  %13 = sub nsw i32 0, %5
  %14 = select i1 %12, i32 %13, i32 %5
  %15 = icmp sgt i32 %11, 0
  br i1 %15, label %16, label %24

16:                                               ; preds = %2, %16
  %17 = phi i32 [ %22, %16 ], [ %11, %2 ]
  %18 = phi i32 [ %20, %16 ], [ %14, %2 ]
  %19 = icmp slt i32 %17, %18
  %20 = select i1 %19, i32 %17, i32 %18
  %21 = select i1 %19, i32 %18, i32 %17
  %22 = sub nsw i32 %21, %20
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %16, label %24

24:                                               ; preds = %16, %2
  %25 = phi i32 [ %14, %2 ], [ %20, %16 ]
  %26 = icmp sgt i32 %25, 1
  br i1 %26, label %27, label %30

27:                                               ; preds = %24
  %28 = sdiv i32 %3, %25
  %29 = sdiv i32 %5, %25
  br label %30

30:                                               ; preds = %27, %24
  %31 = phi i32 [ %29, %27 ], [ %5, %24 ]
  %32 = phi i32 [ %28, %27 ], [ %3, %24 ]
  %33 = icmp slt i32 %6, 0
  %34 = sub nsw i32 0, %6
  %35 = select i1 %33, i32 %34, i32 %6
  %36 = icmp slt i32 %8, 0
  %37 = sub nsw i32 0, %8
  %38 = select i1 %36, i32 %37, i32 %8
  %39 = icmp sgt i32 %35, 0
  br i1 %39, label %40, label %48

40:                                               ; preds = %30, %40
  %41 = phi i32 [ %46, %40 ], [ %35, %30 ]
  %42 = phi i32 [ %44, %40 ], [ %38, %30 ]
  %43 = icmp slt i32 %41, %42
  %44 = select i1 %43, i32 %41, i32 %42
  %45 = select i1 %43, i32 %42, i32 %41
  %46 = sub nsw i32 %45, %44
  %47 = icmp sgt i32 %46, 0
  br i1 %47, label %40, label %48

48:                                               ; preds = %40, %30
  %49 = phi i32 [ %38, %30 ], [ %44, %40 ]
  %50 = icmp sgt i32 %49, 1
  br i1 %50, label %51, label %54

51:                                               ; preds = %48
  %52 = sdiv i32 %6, %49
  %53 = sdiv i32 %8, %49
  br label %54

54:                                               ; preds = %51, %48
  %55 = phi i32 [ %52, %51 ], [ %6, %48 ]
  %56 = phi i32 [ %53, %51 ], [ %8, %48 ]
  %57 = icmp eq i32 %31, %56
  br i1 %57, label %62, label %58

58:                                               ; preds = %54
  %59 = mul nsw i32 %56, %32
  %60 = mul nsw i32 %31, %56
  %61 = mul nsw i32 %31, %55
  br label %62

62:                                               ; preds = %54, %58
  %63 = phi i32 [ %31, %54 ], [ %60, %58 ]
  %64 = phi i32 [ %32, %54 ], [ %59, %58 ]
  %65 = phi i32 [ %55, %54 ], [ %61, %58 ]
  %66 = add nsw i32 %65, %64
  %67 = icmp slt i32 %66, 0
  %68 = sub nsw i32 0, %66
  %69 = select i1 %67, i32 %68, i32 %66
  %70 = icmp slt i32 %63, 0
  %71 = sub nsw i32 0, %63
  %72 = select i1 %70, i32 %71, i32 %63
  %73 = icmp sgt i32 %69, 0
  br i1 %73, label %74, label %82

74:                                               ; preds = %62, %74
  %75 = phi i32 [ %80, %74 ], [ %69, %62 ]
  %76 = phi i32 [ %78, %74 ], [ %72, %62 ]
  %77 = icmp slt i32 %75, %76
  %78 = select i1 %77, i32 %75, i32 %76
  %79 = select i1 %77, i32 %76, i32 %75
  %80 = sub nsw i32 %79, %78
  %81 = icmp sgt i32 %80, 0
  br i1 %81, label %74, label %82

82:                                               ; preds = %74, %62
  %83 = phi i32 [ %72, %62 ], [ %78, %74 ]
  %84 = icmp sgt i32 %83, 1
  br i1 %84, label %85, label %88

85:                                               ; preds = %82
  %86 = sdiv i32 %66, %83
  %87 = sdiv i32 %63, %83
  br label %88

88:                                               ; preds = %82, %85
  %89 = phi i32 [ %87, %85 ], [ %63, %82 ]
  %90 = phi i32 [ %86, %85 ], [ %66, %82 ]
  %91 = zext i32 %89 to i64
  %92 = shl nuw i64 %91, 32
  %93 = zext i32 %90 to i64
  %94 = or i64 %92, %93
  ret i64 %94
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal fastcc i64 @clapFractionSub(i64, i64) unnamed_addr #0 {
  %3 = trunc i64 %0 to i32
  %4 = lshr i64 %0, 32
  %5 = trunc i64 %4 to i32
  %6 = trunc i64 %1 to i32
  %7 = lshr i64 %1, 32
  %8 = trunc i64 %7 to i32
  %9 = icmp slt i32 %3, 0
  %10 = sub nsw i32 0, %3
  %11 = select i1 %9, i32 %10, i32 %3
  %12 = icmp slt i32 %5, 0
  %13 = sub nsw i32 0, %5
  %14 = select i1 %12, i32 %13, i32 %5
  %15 = icmp sgt i32 %11, 0
  br i1 %15, label %16, label %24

16:                                               ; preds = %2, %16
  %17 = phi i32 [ %22, %16 ], [ %11, %2 ]
  %18 = phi i32 [ %20, %16 ], [ %14, %2 ]
  %19 = icmp slt i32 %17, %18
  %20 = select i1 %19, i32 %17, i32 %18
  %21 = select i1 %19, i32 %18, i32 %17
  %22 = sub nsw i32 %21, %20
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %16, label %24

24:                                               ; preds = %16, %2
  %25 = phi i32 [ %14, %2 ], [ %20, %16 ]
  %26 = icmp sgt i32 %25, 1
  br i1 %26, label %27, label %30

27:                                               ; preds = %24
  %28 = sdiv i32 %3, %25
  %29 = sdiv i32 %5, %25
  br label %30

30:                                               ; preds = %27, %24
  %31 = phi i32 [ %29, %27 ], [ %5, %24 ]
  %32 = phi i32 [ %28, %27 ], [ %3, %24 ]
  %33 = icmp slt i32 %6, 0
  %34 = sub nsw i32 0, %6
  %35 = select i1 %33, i32 %34, i32 %6
  %36 = icmp slt i32 %8, 0
  %37 = sub nsw i32 0, %8
  %38 = select i1 %36, i32 %37, i32 %8
  %39 = icmp sgt i32 %35, 0
  br i1 %39, label %40, label %48

40:                                               ; preds = %30, %40
  %41 = phi i32 [ %46, %40 ], [ %35, %30 ]
  %42 = phi i32 [ %44, %40 ], [ %38, %30 ]
  %43 = icmp slt i32 %41, %42
  %44 = select i1 %43, i32 %41, i32 %42
  %45 = select i1 %43, i32 %42, i32 %41
  %46 = sub nsw i32 %45, %44
  %47 = icmp sgt i32 %46, 0
  br i1 %47, label %40, label %48

48:                                               ; preds = %40, %30
  %49 = phi i32 [ %38, %30 ], [ %44, %40 ]
  %50 = icmp sgt i32 %49, 1
  br i1 %50, label %51, label %54

51:                                               ; preds = %48
  %52 = sdiv i32 %6, %49
  %53 = sdiv i32 %8, %49
  br label %54

54:                                               ; preds = %51, %48
  %55 = phi i32 [ %52, %51 ], [ %6, %48 ]
  %56 = phi i32 [ %53, %51 ], [ %8, %48 ]
  %57 = icmp eq i32 %31, %56
  br i1 %57, label %62, label %58

58:                                               ; preds = %54
  %59 = mul nsw i32 %56, %32
  %60 = mul nsw i32 %31, %56
  %61 = mul nsw i32 %31, %55
  br label %62

62:                                               ; preds = %54, %58
  %63 = phi i32 [ %31, %54 ], [ %60, %58 ]
  %64 = phi i32 [ %32, %54 ], [ %59, %58 ]
  %65 = phi i32 [ %55, %54 ], [ %61, %58 ]
  %66 = sub nsw i32 %64, %65
  %67 = icmp slt i32 %66, 0
  %68 = sub nsw i32 0, %66
  %69 = select i1 %67, i32 %68, i32 %66
  %70 = icmp slt i32 %63, 0
  %71 = sub nsw i32 0, %63
  %72 = select i1 %70, i32 %71, i32 %63
  %73 = icmp sgt i32 %69, 0
  br i1 %73, label %74, label %82

74:                                               ; preds = %62, %74
  %75 = phi i32 [ %80, %74 ], [ %69, %62 ]
  %76 = phi i32 [ %78, %74 ], [ %72, %62 ]
  %77 = icmp slt i32 %75, %76
  %78 = select i1 %77, i32 %75, i32 %76
  %79 = select i1 %77, i32 %76, i32 %75
  %80 = sub nsw i32 %79, %78
  %81 = icmp sgt i32 %80, 0
  br i1 %81, label %74, label %82

82:                                               ; preds = %74, %62
  %83 = phi i32 [ %72, %62 ], [ %78, %74 ]
  %84 = icmp sgt i32 %83, 1
  br i1 %84, label %85, label %88

85:                                               ; preds = %82
  %86 = sdiv i32 %66, %83
  %87 = sdiv i32 %63, %83
  br label %88

88:                                               ; preds = %82, %85
  %89 = phi i32 [ %87, %85 ], [ %63, %82 ]
  %90 = phi i32 [ %86, %85 ], [ %66, %82 ]
  %91 = zext i32 %89 to i64
  %92 = shl nuw i64 %91, 32
  %93 = zext i32 %90 to i64
  %94 = or i64 %92, %93
  ret i64 %94
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @avifCropRectIsValid(%struct.avifCropRect* nocapture readonly, i32, i32, i32, %struct.avifDiagnostics*) unnamed_addr #1 {
  %6 = getelementptr inbounds %struct.avifCropRect, %struct.avifCropRect* %0, i64 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %13, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.avifCropRect, %struct.avifCropRect* %0, i64 0, i32 3
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %9, %5
  tail call void (%struct.avifDiagnostics*, i8*, ...) @avifDiagnosticsPrintf(%struct.avifDiagnostics* %4, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.43, i64 0, i64 0)) #9
  br label %40

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.avifCropRect, %struct.avifCropRect* %0, i64 0, i32 0
  %16 = load i32, i32* %15, align 4
  %17 = add i32 %16, %7
  %18 = icmp ugt i32 %17, %1
  br i1 %18, label %24, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %struct.avifCropRect, %struct.avifCropRect* %0, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = add i32 %21, %11
  %23 = icmp ugt i32 %22, %2
  br i1 %23, label %24, label %25

24:                                               ; preds = %19, %14
  tail call void (%struct.avifDiagnostics*, i8*, ...) @avifDiagnosticsPrintf(%struct.avifDiagnostics* %4, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.44, i64 0, i64 0)) #9
  br label %40

25:                                               ; preds = %19
  %26 = icmp eq i32 %3, 3
  %27 = or i32 %3, 1
  %28 = icmp eq i32 %27, 3
  br i1 %28, label %29, label %34

29:                                               ; preds = %25
  %30 = or i32 %16, %7
  %31 = and i32 %30, 1
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %34, label %33

33:                                               ; preds = %29
  tail call void (%struct.avifDiagnostics*, i8*, ...) @avifDiagnosticsPrintf(%struct.avifDiagnostics* %4, i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.45, i64 0, i64 0)) #9
  br label %40

34:                                               ; preds = %29, %25
  br i1 %26, label %35, label %40

35:                                               ; preds = %34
  %36 = or i32 %21, %11
  %37 = and i32 %36, 1
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %40, label %39

39:                                               ; preds = %35
  tail call void (%struct.avifDiagnostics*, i8*, ...) @avifDiagnosticsPrintf(%struct.avifDiagnostics* %4, i8* getelementptr inbounds ([93 x i8], [93 x i8]* @.str.46, i64 0, i64 0)) #9
  br label %40

40:                                               ; preds = %35, %34, %39, %33, %24, %13
  %41 = phi i32 [ 0, %13 ], [ 0, %24 ], [ 0, %33 ], [ 0, %39 ], [ 1, %34 ], [ 1, %35 ]
  ret i32 %41
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @avifCleanApertureBoxConvertCropRect(%struct.avifCleanApertureBox* nocapture, %struct.avifCropRect* nocapture readonly, i32, i32, i32, %struct.avifDiagnostics*) local_unnamed_addr #1 {
  %7 = tail call fastcc i32 @avifCropRectIsValid(%struct.avifCropRect* %1, i32 %2, i32 %3, i32 %4, %struct.avifDiagnostics* %5)
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %75, label %9

9:                                                ; preds = %6
  %10 = ashr i32 %2, 1
  %11 = srem i32 %2, 2
  %12 = icmp eq i32 %11, 1
  %13 = or i32 %2, 1
  %14 = select i1 %12, i32 %13, i32 %10
  %15 = select i1 %12, i64 8589934592, i64 4294967296
  %16 = zext i32 %14 to i64
  %17 = or i64 %15, %16
  %18 = ashr i32 %3, 1
  %19 = srem i32 %3, 2
  %20 = icmp eq i32 %19, 1
  %21 = or i32 %3, 1
  %22 = select i1 %20, i32 %21, i32 %18
  %23 = select i1 %20, i64 8589934592, i64 4294967296
  %24 = zext i32 %22 to i64
  %25 = or i64 %23, %24
  %26 = getelementptr inbounds %struct.avifCropRect, %struct.avifCropRect* %1, i64 0, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = ashr i32 %27, 1
  %29 = srem i32 %27, 2
  %30 = icmp eq i32 %29, 1
  %31 = or i32 %27, 1
  %32 = select i1 %30, i32 %31, i32 %28
  %33 = select i1 %30, i64 8589934592, i64 4294967296
  %34 = lshr exact i64 %33, 32
  %35 = trunc i64 %34 to i32
  %36 = getelementptr inbounds %struct.avifCropRect, %struct.avifCropRect* %1, i64 0, i32 0
  %37 = load i32, i32* %36, align 4
  %38 = mul i32 %37, %35
  %39 = add i32 %38, %32
  %40 = getelementptr inbounds %struct.avifCropRect, %struct.avifCropRect* %1, i64 0, i32 3
  %41 = load i32, i32* %40, align 4
  %42 = ashr i32 %41, 1
  %43 = srem i32 %41, 2
  %44 = icmp eq i32 %43, 1
  %45 = or i32 %41, 1
  %46 = select i1 %44, i32 %45, i32 %42
  %47 = select i1 %44, i64 8589934592, i64 4294967296
  %48 = lshr exact i64 %47, 32
  %49 = trunc i64 %48 to i32
  %50 = getelementptr inbounds %struct.avifCropRect, %struct.avifCropRect* %1, i64 0, i32 1
  %51 = load i32, i32* %50, align 4
  %52 = mul i32 %51, %49
  %53 = add i32 %52, %46
  %54 = zext i32 %39 to i64
  %55 = or i64 %33, %54
  %56 = tail call fastcc i64 @clapFractionSub(i64 %55, i64 %17)
  %57 = trunc i64 %56 to i32
  %58 = lshr i64 %56, 32
  %59 = trunc i64 %58 to i32
  %60 = zext i32 %53 to i64
  %61 = or i64 %47, %60
  %62 = tail call fastcc i64 @clapFractionSub(i64 %61, i64 %25)
  %63 = trunc i64 %62 to i32
  %64 = lshr i64 %62, 32
  %65 = trunc i64 %64 to i32
  %66 = getelementptr inbounds %struct.avifCleanApertureBox, %struct.avifCleanApertureBox* %0, i64 0, i32 0
  store i32 %27, i32* %66, align 4
  %67 = getelementptr inbounds %struct.avifCleanApertureBox, %struct.avifCleanApertureBox* %0, i64 0, i32 1
  store i32 1, i32* %67, align 4
  %68 = load i32, i32* %40, align 4
  %69 = getelementptr inbounds %struct.avifCleanApertureBox, %struct.avifCleanApertureBox* %0, i64 0, i32 2
  store i32 %68, i32* %69, align 4
  %70 = getelementptr inbounds %struct.avifCleanApertureBox, %struct.avifCleanApertureBox* %0, i64 0, i32 3
  store i32 1, i32* %70, align 4
  %71 = getelementptr inbounds %struct.avifCleanApertureBox, %struct.avifCleanApertureBox* %0, i64 0, i32 4
  store i32 %57, i32* %71, align 4
  %72 = getelementptr inbounds %struct.avifCleanApertureBox, %struct.avifCleanApertureBox* %0, i64 0, i32 5
  store i32 %59, i32* %72, align 4
  %73 = getelementptr inbounds %struct.avifCleanApertureBox, %struct.avifCleanApertureBox* %0, i64 0, i32 6
  store i32 %63, i32* %73, align 4
  %74 = getelementptr inbounds %struct.avifCleanApertureBox, %struct.avifCleanApertureBox* %0, i64 0, i32 7
  store i32 %65, i32* %74, align 4
  br label %75

75:                                               ; preds = %6, %9
  %76 = phi i32 [ 1, %9 ], [ 0, %6 ]
  ret i32 %76
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.avifCodecSpecificOptions* @avifCodecSpecificOptionsCreate() local_unnamed_addr #1 {
  %1 = tail call i8* @avifAlloc(i64 24) #9
  %2 = bitcast i8* %1 to %struct.avifCodecSpecificOptions*
  tail call void @avifArrayCreate(i8* %1, i32 16, i32 4) #9
  ret %struct.avifCodecSpecificOptions* %2
}

declare void @avifArrayCreate(i8*, i32, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @avifCodecSpecificOptionsDestroy(%struct.avifCodecSpecificOptions*) local_unnamed_addr #1 {
  %2 = icmp eq %struct.avifCodecSpecificOptions* %0, null
  br i1 %2, label %22, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.avifCodecSpecificOptions, %struct.avifCodecSpecificOptions* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.avifCodecSpecificOptions, %struct.avifCodecSpecificOptions* %0, i64 0, i32 0
  br label %11

9:                                                ; preds = %11, %3
  %10 = bitcast %struct.avifCodecSpecificOptions* %0 to i8*
  tail call void @avifArrayDestroy(i8* nonnull %10) #9
  tail call void @avifFree(i8* nonnull %10) #9
  br label %22

11:                                               ; preds = %7, %11
  %12 = phi i64 [ 0, %7 ], [ %18, %11 ]
  %13 = load %struct.avifCodecSpecificOption*, %struct.avifCodecSpecificOption** %8, align 8
  %14 = getelementptr inbounds %struct.avifCodecSpecificOption, %struct.avifCodecSpecificOption* %13, i64 %12, i32 0
  %15 = load i8*, i8** %14, align 8
  tail call void @avifFree(i8* %15) #9
  %16 = getelementptr inbounds %struct.avifCodecSpecificOption, %struct.avifCodecSpecificOption* %13, i64 %12, i32 1
  %17 = load i8*, i8** %16, align 8
  tail call void @avifFree(i8* %17) #9
  %18 = add nuw nsw i64 %12, 1
  %19 = load i32, i32* %4, align 4
  %20 = zext i32 %19 to i64
  %21 = icmp ult i64 %18, %20
  br i1 %21, label %11, label %9

22:                                               ; preds = %1, %9
  ret void
}

declare void @avifArrayDestroy(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @avifCodecSpecificOptionsSet(%struct.avifCodecSpecificOptions*, i8* nocapture readonly, i8* readonly) local_unnamed_addr #1 {
  %4 = getelementptr inbounds %struct.avifCodecSpecificOptions, %struct.avifCodecSpecificOptions* %0, i64 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %50, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.avifCodecSpecificOptions, %struct.avifCodecSpecificOptions* %0, i64 0, i32 0
  %9 = load %struct.avifCodecSpecificOption*, %struct.avifCodecSpecificOption** %8, align 8
  %10 = zext i32 %5 to i64
  br label %11

11:                                               ; preds = %7, %47
  %12 = phi i64 [ 0, %7 ], [ %48, %47 ]
  %13 = getelementptr inbounds %struct.avifCodecSpecificOption, %struct.avifCodecSpecificOption* %9, i64 %12, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = tail call i32 @strcmp(i8* %14, i8* %1) #10
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %47

17:                                               ; preds = %11
  %18 = trunc i64 %12 to i32
  %19 = and i64 %12, 4294967295
  %20 = icmp eq i8* %2, null
  br i1 %20, label %27, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.avifCodecSpecificOption, %struct.avifCodecSpecificOption* %9, i64 %19, i32 1
  %23 = load i8*, i8** %22, align 8
  tail call void @avifFree(i8* %23) #9
  %24 = tail call i64 @strlen(i8* nonnull %2) #10
  %25 = add i64 %24, 1
  %26 = tail call i8* @avifAlloc(i64 %25) #9
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %26, i8* nonnull align 1 %2, i64 %25, i1 false) #9
  store i8* %26, i8** %22, align 8
  br label %62

27:                                               ; preds = %17
  tail call void @avifFree(i8* %14) #9
  %28 = getelementptr inbounds %struct.avifCodecSpecificOption, %struct.avifCodecSpecificOption* %9, i64 %19, i32 1
  %29 = load i8*, i8** %28, align 8
  tail call void @avifFree(i8* %29) #9
  %30 = load i32, i32* %4, align 4
  %31 = add i32 %30, -1
  store i32 %31, i32* %4, align 4
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %62, label %33

33:                                               ; preds = %27
  %34 = load %struct.avifCodecSpecificOption*, %struct.avifCodecSpecificOption** %8, align 8
  %35 = getelementptr inbounds %struct.avifCodecSpecificOption, %struct.avifCodecSpecificOption* %34, i64 %19
  %36 = bitcast %struct.avifCodecSpecificOption* %35 to i8*
  %37 = add nuw i64 %12, 1
  %38 = and i64 %37, 4294967295
  %39 = getelementptr inbounds %struct.avifCodecSpecificOption, %struct.avifCodecSpecificOption* %34, i64 %38
  %40 = bitcast %struct.avifCodecSpecificOption* %39 to i8*
  %41 = sub i32 %31, %18
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds %struct.avifCodecSpecificOptions, %struct.avifCodecSpecificOptions* %0, i64 0, i32 1
  %44 = load i32, i32* %43, align 8
  %45 = zext i32 %44 to i64
  %46 = mul nuw i64 %45, %42
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %36, i8* align 8 %40, i64 %46, i1 false)
  br label %62

47:                                               ; preds = %11
  %48 = add nuw nsw i64 %12, 1
  %49 = icmp ult i64 %48, %10
  br i1 %49, label %11, label %50

50:                                               ; preds = %47, %3
  %51 = bitcast %struct.avifCodecSpecificOptions* %0 to i8*
  %52 = tail call i8* @avifArrayPushPtr(i8* %51) #9
  %53 = tail call i64 @strlen(i8* %1) #10
  %54 = add i64 %53, 1
  %55 = tail call i8* @avifAlloc(i64 %54) #9
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %55, i8* align 1 %1, i64 %54, i1 false) #9
  %56 = bitcast i8* %52 to i8**
  store i8* %55, i8** %56, align 8
  %57 = tail call i64 @strlen(i8* %2) #10
  %58 = add i64 %57, 1
  %59 = tail call i8* @avifAlloc(i64 %58) #9
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %2, i64 %58, i1 false) #9
  %60 = getelementptr inbounds i8, i8* %52, i64 8
  %61 = bitcast i8* %60 to i8**
  store i8* %59, i8** %61, align 8
  br label %62

62:                                               ; preds = %21, %33, %27, %50
  ret void
}

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

declare i8* @avifArrayPushPtr(i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i8* @avifCodecName(i32, i32) local_unnamed_addr #4 {
  %3 = and i32 %0, -3
  %4 = icmp eq i32 %3, 0
  %5 = icmp ult i32 %1, 2
  %6 = and i1 %4, %5
  %7 = select i1 %6, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47, i64 0, i64 0), i8* null
  ret i8* %7
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i32 @avifCodecChoiceFromName(i8* nocapture readonly) local_unnamed_addr #7 {
  %2 = tail call i32 @strcmp(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47, i64 0, i64 0), i8* %0) #10
  %3 = icmp eq i32 %2, 0
  %4 = select i1 %3, i32 2, i32 0
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.avifCodec* @avifCodecCreate(i32, i32) local_unnamed_addr #1 {
  %3 = and i32 %0, -3
  %4 = icmp eq i32 %3, 0
  %5 = icmp ult i32 %1, 2
  %6 = and i1 %4, %5
  br i1 %6, label %7, label %9

7:                                                ; preds = %2
  %8 = tail call %struct.avifCodec* @avifCodecCreateDav1d() #9
  br label %9

9:                                                ; preds = %2, %7
  %10 = phi %struct.avifCodec* [ %8, %7 ], [ null, %2 ]
  ret %struct.avifCodec* %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @avifCodecVersions(i8*) local_unnamed_addr #1 {
  store i8 0, i8* %0, align 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str.47, i64 0, i64 0), i64 5, i1 false) #9
  %2 = getelementptr inbounds i8, i8* %0, i64 5
  store i8 0, i8* %2, align 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 1 getelementptr inbounds ([7 x i8], [7 x i8]* @.str.41, i64 0, i64 0), i64 6, i1 false) #9
  %3 = getelementptr inbounds i8, i8* %0, i64 11
  store i8 58, i8* %3, align 1
  %4 = getelementptr inbounds i8, i8* %0, i64 12
  store i8 0, i8* %4, align 1
  %5 = tail call i8* @avifCodecVersionDav1d() #9
  %6 = tail call i64 @strlen(i8* %5) #10
  %7 = icmp ult i64 %6, 243
  %8 = select i1 %7, i64 %6, i64 243
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %4, i8* align 1 %5, i64 %8, i1 false) #9
  %9 = getelementptr inbounds i8, i8* %4, i64 %8
  store i8 0, i8* %9, align 1
  ret void
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #8

declare i8* @avifCodecVersionDav1d() local_unnamed_addr #3

declare %struct.avifCodec* @avifCodecCreateDav1d() local_unnamed_addr #3

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
