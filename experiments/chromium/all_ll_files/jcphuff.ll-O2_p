; ModuleID = '../../third_party/libjpeg_turbo/jcphuff.c'
source_filename = "../../third_party/libjpeg_turbo/jcphuff.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.jpeg_compress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_destination_mgr*, i32, i32, i32, i32, double, i32, i32, i32, %struct.jpeg_component_info*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], [16 x i8], [16 x i8], [16 x i8], i32, %struct.jpeg_scan_info*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i16, i16, i32, i32, i32, i32, i32, i32, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, %struct.jpeg_comp_master*, %struct.jpeg_c_main_controller*, %struct.jpeg_c_prep_controller*, %struct.jpeg_c_coef_controller*, %struct.jpeg_marker_writer*, %struct.jpeg_color_converter*, %struct.jpeg_downsampler*, %struct.jpeg_forward_dct*, %struct.jpeg_entropy_encoder*, %struct.jpeg_scan_info*, i32 }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%struct.jpeg_destination_mgr = type { i8*, i64, {}*, i32 (%struct.jpeg_compress_struct*)*, {}* }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_comp_master = type { {}*, {}*, {}*, i32, i32 }
%struct.jpeg_c_main_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32)* }
%struct.jpeg_c_prep_controller = type { void (%struct.jpeg_compress_struct*, i32)*, void (%struct.jpeg_compress_struct*, i8**, i32*, i32, i8***, i32*, i32)* }
%struct.jpeg_c_coef_controller = type { void (%struct.jpeg_compress_struct*, i32)*, i32 (%struct.jpeg_compress_struct*, i8***)* }
%struct.jpeg_marker_writer = type { {}*, {}*, {}*, {}*, {}*, void (%struct.jpeg_compress_struct*, i32, i32)*, void (%struct.jpeg_compress_struct*, i32)* }
%struct.jpeg_color_converter = type { {}*, void (%struct.jpeg_compress_struct*, i8**, i8***, i32, i32)* }
%struct.jpeg_downsampler = type { {}*, void (%struct.jpeg_compress_struct*, i8***, i32, i8***, i32)*, i32 }
%struct.jpeg_forward_dct = type { {}*, void (%struct.jpeg_compress_struct*, %struct.jpeg_component_info*, i8**, [64 x i16]*, i32, i32, i32)* }
%struct.jpeg_entropy_encoder = type { void (%struct.jpeg_compress_struct*, i32)*, i32 (%struct.jpeg_compress_struct*, [64 x i16]**)*, {}* }
%struct.jpeg_scan_info = type { i32, [4 x i32], i32, i32, i32, i32 }
%struct.phuff_entropy_encoder = type { %struct.jpeg_entropy_encoder, void (i16*, i32*, i32, i32, i16*, i64*)*, i32 (i16*, i32*, i32, i32, i16*, i64*)*, i32, i8*, i64, i64, i32, %struct.jpeg_compress_struct*, [4 x i32], i32, i32, i32, i8*, i32, i32, [4 x %struct.c_derived_tbl*], [4 x i64*] }
%struct.c_derived_tbl = type { [256 x i32], [256 x i8] }

@jpeg_nbits_table = external local_unnamed_addr constant [65536 x i8], align 16
@jpeg_natural_order = external constant [0 x i32], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @jinit_phuff_encoder(%struct.jpeg_compress_struct*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 1
  %3 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %2, align 8
  %4 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %3, i64 0, i32 0
  %5 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %4, align 8
  %6 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  %7 = tail call i8* %5(%struct.jpeg_common_struct* %6, i32 1, i64 200) #5
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 62
  %9 = bitcast %struct.jpeg_entropy_encoder** %8 to i8**
  store i8* %7, i8** %9, align 8
  %10 = bitcast i8* %7 to void (%struct.jpeg_compress_struct*, i32)**
  store void (%struct.jpeg_compress_struct*, i32)* @start_pass_phuff, void (%struct.jpeg_compress_struct*, i32)** %10, align 8
  %11 = getelementptr inbounds i8, i8* %7, i64 136
  %12 = getelementptr inbounds i8, i8* %7, i64 120
  %13 = bitcast i8* %12 to i8**
  store i8* null, i8** %13, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 64, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal void @start_pass_phuff(%struct.jpeg_compress_struct*, i32) #0 {
  %3 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 62
  %4 = bitcast %struct.jpeg_entropy_encoder** %3 to %struct.phuff_entropy_encoder**
  %5 = load %struct.phuff_entropy_encoder*, %struct.phuff_entropy_encoder** %4, align 8
  %6 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 8
  store %struct.jpeg_compress_struct* %0, %struct.jpeg_compress_struct** %6, align 8
  %7 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 3
  store i32 %1, i32* %7, align 8
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 50
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  %11 = zext i1 %10 to i32
  %12 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 52
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  %15 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 0, i32 1
  br i1 %14, label %16, label %23

16:                                               ; preds = %2
  %17 = select i1 %10, i32 (%struct.jpeg_compress_struct*, [64 x i16]**)* @encode_mcu_DC_first, i32 (%struct.jpeg_compress_struct*, [64 x i16]**)* @encode_mcu_AC_first
  store i32 (%struct.jpeg_compress_struct*, [64 x i16]**)* %17, i32 (%struct.jpeg_compress_struct*, [64 x i16]**)** %15, align 8
  %18 = tail call i32 @jsimd_can_encode_mcu_AC_first_prepare() #5
  %19 = icmp eq i32 %18, 0
  %20 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 1
  br i1 %19, label %22, label %21

21:                                               ; preds = %16
  store void (i16*, i32*, i32, i32, i16*, i64*)* @jsimd_encode_mcu_AC_first_prepare, void (i16*, i32*, i32, i32, i16*, i64*)** %20, align 8
  br label %40

22:                                               ; preds = %16
  store void (i16*, i32*, i32, i32, i16*, i64*)* @encode_mcu_AC_first_prepare, void (i16*, i32*, i32, i32, i16*, i64*)** %20, align 8
  br label %40

23:                                               ; preds = %2
  br i1 %10, label %24, label %25

24:                                               ; preds = %23
  store i32 (%struct.jpeg_compress_struct*, [64 x i16]**)* @encode_mcu_DC_refine, i32 (%struct.jpeg_compress_struct*, [64 x i16]**)** %15, align 8
  br label %40

25:                                               ; preds = %23
  store i32 (%struct.jpeg_compress_struct*, [64 x i16]**)* @encode_mcu_AC_refine, i32 (%struct.jpeg_compress_struct*, [64 x i16]**)** %15, align 8
  %26 = tail call i32 @jsimd_can_encode_mcu_AC_refine_prepare() #5
  %27 = icmp eq i32 %26, 0
  %28 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 2
  %29 = select i1 %27, i32 (i16*, i32*, i32, i32, i16*, i64*)* @encode_mcu_AC_refine_prepare, i32 (i16*, i32*, i32, i32, i16*, i64*)* @jsimd_encode_mcu_AC_refine_prepare
  store i32 (i16*, i32*, i32, i32, i16*, i64*)* %29, i32 (i16*, i32*, i32, i32, i16*, i64*)** %28, align 8
  %30 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 13
  %31 = load i8*, i8** %30, align 8
  %32 = icmp eq i8* %31, null
  br i1 %32, label %33, label %40

33:                                               ; preds = %25
  %34 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 1
  %35 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %34, align 8
  %36 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %35, i64 0, i32 0
  %37 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %36, align 8
  %38 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  %39 = tail call i8* %37(%struct.jpeg_common_struct* %38, i32 1, i64 1000) #5
  store i8* %39, i8** %30, align 8
  br label %40

40:                                               ; preds = %24, %33, %25, %21, %22
  %41 = icmp ne i32 %1, 0
  %42 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 0, i32 2
  %43 = bitcast {}** %42 to void (%struct.jpeg_compress_struct*)**
  %44 = select i1 %41, void (%struct.jpeg_compress_struct*)* @finish_pass_gather_phuff, void (%struct.jpeg_compress_struct*)* @finish_pass_phuff
  store void (%struct.jpeg_compress_struct*)* %44, void (%struct.jpeg_compress_struct*)** %43, align 8
  %45 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 44
  %46 = load i32, i32* %45, align 4
  %47 = icmp sgt i32 %46, 0
  br i1 %47, label %48, label %102

48:                                               ; preds = %40
  %49 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 10
  %50 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %51 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  %52 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 1
  br label %53

53:                                               ; preds = %48, %97
  %54 = phi i64 [ 0, %48 ], [ %98, %97 ]
  %55 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 45, i64 %54
  %56 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %55, align 8
  %57 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 9, i64 %54
  store i32 0, i32* %57, align 4
  br i1 %10, label %58, label %64

58:                                               ; preds = %53
  %59 = load i32, i32* %12, align 4
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %97

61:                                               ; preds = %58
  %62 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %56, i64 0, i32 5
  %63 = load i32, i32* %62, align 4
  br label %67

64:                                               ; preds = %53
  %65 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %56, i64 0, i32 6
  %66 = load i32, i32* %65, align 8
  store i32 %66, i32* %49, align 8
  br label %67

67:                                               ; preds = %64, %61
  %68 = phi i32 [ %63, %61 ], [ %66, %64 ]
  br i1 %41, label %69, label %94

69:                                               ; preds = %67
  %70 = icmp ugt i32 %68, 3
  br i1 %70, label %71, label %79

71:                                               ; preds = %69
  %72 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %50, align 8
  %73 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %72, i64 0, i32 5
  store i32 50, i32* %73, align 8
  %74 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %50, align 8
  %75 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %74, i64 0, i32 6, i32 0, i64 0
  store i32 %68, i32* %75, align 4
  %76 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %50, align 8
  %77 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %76, i64 0, i32 0
  %78 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %77, align 8
  tail call void %78(%struct.jpeg_common_struct* %51) #5
  br label %79

79:                                               ; preds = %69, %71
  %80 = sext i32 %68 to i64
  %81 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 17, i64 %80
  %82 = load i64*, i64** %81, align 8
  %83 = icmp eq i64* %82, null
  br i1 %83, label %86, label %84

84:                                               ; preds = %79
  %85 = bitcast i64* %82 to i8*
  br label %92

86:                                               ; preds = %79
  %87 = load %struct.jpeg_memory_mgr*, %struct.jpeg_memory_mgr** %52, align 8
  %88 = getelementptr inbounds %struct.jpeg_memory_mgr, %struct.jpeg_memory_mgr* %87, i64 0, i32 0
  %89 = load i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)** %88, align 8
  %90 = tail call i8* %89(%struct.jpeg_common_struct* %51, i32 1, i64 2056) #5
  %91 = bitcast i64** %81 to i8**
  store i8* %90, i8** %91, align 8
  br label %92

92:                                               ; preds = %84, %86
  %93 = phi i8* [ %90, %86 ], [ %85, %84 ]
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %93, i8 0, i64 2056, i1 false)
  br label %97

94:                                               ; preds = %67
  %95 = sext i32 %68 to i64
  %96 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 16, i64 %95
  tail call void @jpeg_make_c_derived_tbl(%struct.jpeg_compress_struct* %0, i32 %11, i32 %68, %struct.c_derived_tbl** %96) #5
  br label %97

97:                                               ; preds = %58, %92, %94
  %98 = add nuw nsw i64 %54, 1
  %99 = load i32, i32* %45, align 4
  %100 = sext i32 %99 to i64
  %101 = icmp slt i64 %98, %100
  br i1 %101, label %53, label %102

102:                                              ; preds = %97, %40
  %103 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 11
  store i32 0, i32* %103, align 4
  %104 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 12
  store i32 0, i32* %104, align 8
  %105 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 6
  store i64 0, i64* %105, align 8
  %106 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 7
  store i32 0, i32* %106, align 8
  %107 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 30
  %108 = load i32, i32* %107, align 8
  %109 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 14
  store i32 %108, i32* %109, align 8
  %110 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 15
  store i32 0, i32* %110, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @encode_mcu_DC_first(%struct.jpeg_compress_struct*, [64 x i16]** nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 62
  %4 = bitcast %struct.jpeg_entropy_encoder** %3 to %struct.phuff_entropy_encoder**
  %5 = load %struct.phuff_entropy_encoder*, %struct.phuff_entropy_encoder** %4, align 8
  %6 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 53
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 6
  %9 = bitcast %struct.jpeg_destination_mgr** %8 to i64**
  %10 = load i64*, i64** %9, align 8
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 4
  %13 = bitcast i8** %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load %struct.jpeg_destination_mgr*, %struct.jpeg_destination_mgr** %8, align 8
  %15 = getelementptr inbounds %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %14, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 5
  store i64 %16, i64* %17, align 8
  %18 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 30
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %28, label %21

21:                                               ; preds = %2
  %22 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 14
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 15
  %27 = load i32, i32* %26, align 4
  tail call fastcc void @emit_restart(%struct.phuff_entropy_encoder* %5, i32 %27)
  br label %28

28:                                               ; preds = %2, %21, %25
  %29 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 48
  %30 = load i32, i32* %29, align 8
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %32, label %97

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %34 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  %35 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 3
  br label %36

36:                                               ; preds = %32, %92
  %37 = phi i64 [ 0, %32 ], [ %93, %92 ]
  %38 = getelementptr inbounds [64 x i16]*, [64 x i16]** %1, i64 %37
  %39 = load [64 x i16]*, [64 x i16]** %38, align 8
  %40 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 49, i64 %37
  %41 = load i32, i32* %40, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 45, i64 %42
  %44 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %43, align 8
  %45 = getelementptr inbounds [64 x i16], [64 x i16]* %39, i64 0, i64 0
  %46 = load i16, i16* %45, align 2
  %47 = sext i16 %46 to i32
  %48 = ashr i32 %47, %7
  %49 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 9, i64 %42
  %50 = load i32, i32* %49, align 4
  %51 = sub nsw i32 %48, %50
  store i32 %48, i32* %49, align 4
  %52 = ashr i32 %51, 31
  %53 = xor i32 %52, %51
  %54 = sub nsw i32 %53, %52
  %55 = xor i32 %54, %52
  %56 = sext i32 %54 to i64
  %57 = getelementptr inbounds [65536 x i8], [65536 x i8]* @jpeg_nbits_table, i64 0, i64 %56
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i32
  %60 = icmp ugt i8 %58, 11
  br i1 %60, label %61, label %67

61:                                               ; preds = %36
  %62 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %33, align 8
  %63 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %62, i64 0, i32 5
  store i32 6, i32* %63, align 8
  %64 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %33, align 8
  %65 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %64, i64 0, i32 0
  %66 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %65, align 8
  tail call void %66(%struct.jpeg_common_struct* %34) #5
  br label %67

67:                                               ; preds = %61, %36
  %68 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %44, i64 0, i32 5
  %69 = load i32, i32* %68, align 4
  %70 = load i32, i32* %35, align 8
  %71 = icmp eq i32 %70, 0
  %72 = sext i32 %69 to i64
  br i1 %71, label %80, label %73

73:                                               ; preds = %67
  %74 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 17, i64 %72
  %75 = load i64*, i64** %74, align 8
  %76 = zext i8 %58 to i64
  %77 = getelementptr inbounds i64, i64* %75, i64 %76
  %78 = load i64, i64* %77, align 8
  %79 = add nsw i64 %78, 1
  store i64 %79, i64* %77, align 8
  br label %89

80:                                               ; preds = %67
  %81 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 16, i64 %72
  %82 = load %struct.c_derived_tbl*, %struct.c_derived_tbl** %81, align 8
  %83 = zext i8 %58 to i64
  %84 = getelementptr inbounds %struct.c_derived_tbl, %struct.c_derived_tbl* %82, i64 0, i32 0, i64 %83
  %85 = load i32, i32* %84, align 4
  %86 = getelementptr inbounds %struct.c_derived_tbl, %struct.c_derived_tbl* %82, i64 0, i32 1, i64 %83
  %87 = load i8, i8* %86, align 1
  %88 = sext i8 %87 to i32
  tail call fastcc void @emit_bits(%struct.phuff_entropy_encoder* %5, i32 %85, i32 %88) #5
  br label %89

89:                                               ; preds = %73, %80
  %90 = icmp eq i8 %58, 0
  br i1 %90, label %92, label %91

91:                                               ; preds = %89
  tail call fastcc void @emit_bits(%struct.phuff_entropy_encoder* %5, i32 %55, i32 %59)
  br label %92

92:                                               ; preds = %89, %91
  %93 = add nuw nsw i64 %37, 1
  %94 = load i32, i32* %29, align 8
  %95 = sext i32 %94 to i64
  %96 = icmp slt i64 %93, %95
  br i1 %96, label %36, label %97

97:                                               ; preds = %92, %28
  %98 = load i64, i64* %13, align 8
  %99 = load i64*, i64** %9, align 8
  store i64 %98, i64* %99, align 8
  %100 = load i64, i64* %17, align 8
  %101 = load %struct.jpeg_destination_mgr*, %struct.jpeg_destination_mgr** %8, align 8
  %102 = getelementptr inbounds %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %101, i64 0, i32 1
  store i64 %100, i64* %102, align 8
  %103 = load i32, i32* %18, align 8
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %117, label %105

105:                                              ; preds = %97
  %106 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 14
  %107 = load i32, i32* %106, align 8
  %108 = icmp eq i32 %107, 0
  br i1 %108, label %109, label %114

109:                                              ; preds = %105
  store i32 %103, i32* %106, align 8
  %110 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 15
  %111 = load i32, i32* %110, align 4
  %112 = add nsw i32 %111, 1
  %113 = and i32 %112, 7
  store i32 %113, i32* %110, align 4
  br label %114

114:                                              ; preds = %109, %105
  %115 = phi i32 [ %103, %109 ], [ %107, %105 ]
  %116 = add i32 %115, -1
  store i32 %116, i32* %106, align 8
  br label %117

117:                                              ; preds = %97, %114
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @encode_mcu_AC_first(%struct.jpeg_compress_struct*, [64 x i16]** nocapture readonly) #0 {
  %3 = alloca [143 x i16], align 16
  %4 = alloca [1 x i64], align 8
  %5 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 62
  %6 = bitcast %struct.jpeg_entropy_encoder** %5 to %struct.phuff_entropy_encoder**
  %7 = load %struct.phuff_entropy_encoder*, %struct.phuff_entropy_encoder** %6, align 8
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 51
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 50
  %11 = load i32, i32* %10, align 4
  %12 = sub nsw i32 %9, %11
  %13 = add nsw i32 %12, 1
  %14 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 53
  %15 = load i32, i32* %14, align 8
  %16 = bitcast [143 x i16]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 286, i8* nonnull %16) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 286, i1 false)
  %17 = bitcast [1 x i64]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #5
  %18 = getelementptr inbounds [1 x i64], [1 x i64]* %4, i64 0, i64 0
  store i64 -6148914691236517206, i64* %18, align 8
  %19 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 6
  %20 = bitcast %struct.jpeg_destination_mgr** %19 to i64**
  %21 = load i64*, i64** %20, align 8
  %22 = load i64, i64* %21, align 8
  %23 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 4
  %24 = bitcast i8** %23 to i64*
  store i64 %22, i64* %24, align 8
  %25 = load %struct.jpeg_destination_mgr*, %struct.jpeg_destination_mgr** %19, align 8
  %26 = getelementptr inbounds %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %25, i64 0, i32 1
  %27 = load i64, i64* %26, align 8
  %28 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 5
  store i64 %27, i64* %28, align 8
  %29 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 30
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %39, label %32

32:                                               ; preds = %2
  %33 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 14
  %34 = load i32, i32* %33, align 8
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %39

36:                                               ; preds = %32
  %37 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 15
  %38 = load i32, i32* %37, align 4
  tail call fastcc void @emit_restart(%struct.phuff_entropy_encoder* %7, i32 %38)
  br label %39

39:                                               ; preds = %2, %32, %36
  %40 = getelementptr inbounds [143 x i16], [143 x i16]* %3, i64 0, i64 0
  %41 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 1
  %42 = load void (i16*, i32*, i32, i32, i16*, i64*)*, void (i16*, i32*, i32, i32, i16*, i64*)** %41, align 8
  %43 = load [64 x i16]*, [64 x i16]** %1, align 8
  %44 = getelementptr inbounds [64 x i16], [64 x i16]* %43, i64 0, i64 0
  %45 = load i32, i32* %10, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [0 x i32], [0 x i32]* @jpeg_natural_order, i64 0, i64 %46
  call void %42(i16* %44, i32* %47, i32 %13, i32 %15, i16* nonnull %40, i64* nonnull %18) #5
  %48 = load i64, i64* %18, align 8
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %137, label %50

50:                                               ; preds = %39
  %51 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 11
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %55, label %54

54:                                               ; preds = %50
  call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %7)
  br label %55

55:                                               ; preds = %54, %50
  %56 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 10
  %57 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 3
  %58 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 0
  %59 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  br label %60

60:                                               ; preds = %55, %133
  %61 = phi i16* [ %40, %55 ], [ %134, %133 ]
  %62 = phi i64 [ %48, %55 ], [ %135, %133 ]
  %63 = call i64 @llvm.cttz.i64(i64 %62, i1 true) #5, !range !2
  %64 = trunc i64 %63 to i32
  %65 = lshr i64 %62, %63
  %66 = getelementptr inbounds i16, i16* %61, i64 %63
  %67 = load i16, i16* %66, align 2
  %68 = getelementptr inbounds i16, i16* %66, i64 64
  %69 = load i16, i16* %68, align 2
  %70 = sext i16 %69 to i32
  %71 = icmp ugt i32 %64, 15
  br i1 %71, label %72, label %97

72:                                               ; preds = %60, %92
  %73 = phi i32 [ %93, %92 ], [ %64, %60 ]
  %74 = load i32, i32* %56, align 8
  %75 = load i32, i32* %57, align 8
  %76 = icmp eq i32 %75, 0
  %77 = sext i32 %74 to i64
  br i1 %76, label %84, label %78

78:                                               ; preds = %72
  %79 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 17, i64 %77
  %80 = load i64*, i64** %79, align 8
  %81 = getelementptr inbounds i64, i64* %80, i64 240
  %82 = load i64, i64* %81, align 8
  %83 = add nsw i64 %82, 1
  store i64 %83, i64* %81, align 8
  br label %92

84:                                               ; preds = %72
  %85 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 16, i64 %77
  %86 = load %struct.c_derived_tbl*, %struct.c_derived_tbl** %85, align 8
  %87 = getelementptr inbounds %struct.c_derived_tbl, %struct.c_derived_tbl* %86, i64 0, i32 0, i64 240
  %88 = load i32, i32* %87, align 4
  %89 = getelementptr inbounds %struct.c_derived_tbl, %struct.c_derived_tbl* %86, i64 0, i32 1, i64 240
  %90 = load i8, i8* %89, align 1
  %91 = sext i8 %90 to i32
  call fastcc void @emit_bits(%struct.phuff_entropy_encoder* %7, i32 %88, i32 %91) #5
  br label %92

92:                                               ; preds = %78, %84
  %93 = add nsw i32 %73, -16
  %94 = icmp sgt i32 %93, 15
  br i1 %94, label %72, label %95

95:                                               ; preds = %92
  %96 = and i32 %64, 15
  br label %97

97:                                               ; preds = %95, %60
  %98 = phi i32 [ %64, %60 ], [ %96, %95 ]
  %99 = sext i16 %67 to i64
  %100 = getelementptr inbounds [65536 x i8], [65536 x i8]* @jpeg_nbits_table, i64 0, i64 %99
  %101 = load i8, i8* %100, align 1
  %102 = zext i8 %101 to i32
  %103 = icmp ugt i8 %101, 10
  br i1 %103, label %104, label %110

104:                                              ; preds = %97
  %105 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %58, align 8
  %106 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %105, i64 0, i32 5
  store i32 6, i32* %106, align 8
  %107 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %58, align 8
  %108 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %107, i64 0, i32 0
  %109 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %108, align 8
  call void %109(%struct.jpeg_common_struct* %59) #5
  br label %110

110:                                              ; preds = %104, %97
  %111 = load i32, i32* %56, align 8
  %112 = shl nsw i32 %98, 4
  %113 = add nuw nsw i32 %112, %102
  %114 = load i32, i32* %57, align 8
  %115 = icmp eq i32 %114, 0
  %116 = sext i32 %111 to i64
  br i1 %115, label %124, label %117

117:                                              ; preds = %110
  %118 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 17, i64 %116
  %119 = load i64*, i64** %118, align 8
  %120 = sext i32 %113 to i64
  %121 = getelementptr inbounds i64, i64* %119, i64 %120
  %122 = load i64, i64* %121, align 8
  %123 = add nsw i64 %122, 1
  store i64 %123, i64* %121, align 8
  br label %133

124:                                              ; preds = %110
  %125 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 16, i64 %116
  %126 = load %struct.c_derived_tbl*, %struct.c_derived_tbl** %125, align 8
  %127 = sext i32 %113 to i64
  %128 = getelementptr inbounds %struct.c_derived_tbl, %struct.c_derived_tbl* %126, i64 0, i32 0, i64 %127
  %129 = load i32, i32* %128, align 4
  %130 = getelementptr inbounds %struct.c_derived_tbl, %struct.c_derived_tbl* %126, i64 0, i32 1, i64 %127
  %131 = load i8, i8* %130, align 1
  %132 = sext i8 %131 to i32
  call fastcc void @emit_bits(%struct.phuff_entropy_encoder* %7, i32 %129, i32 %132) #5
  br label %133

133:                                              ; preds = %117, %124
  call fastcc void @emit_bits(%struct.phuff_entropy_encoder* %7, i32 %70, i32 %102)
  %134 = getelementptr inbounds i16, i16* %66, i64 1
  %135 = lshr i64 %65, 1
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %60

137:                                              ; preds = %133, %39
  %138 = phi i16* [ %40, %39 ], [ %134, %133 ]
  %139 = sext i32 %13 to i64
  %140 = getelementptr inbounds [143 x i16], [143 x i16]* %3, i64 0, i64 %139
  %141 = icmp ult i16* %138, %140
  br i1 %141, label %142, label %148

142:                                              ; preds = %137
  %143 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 11
  %144 = load i32, i32* %143, align 4
  %145 = add i32 %144, 1
  store i32 %145, i32* %143, align 4
  %146 = icmp eq i32 %145, 32767
  br i1 %146, label %147, label %148

147:                                              ; preds = %142
  call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %7)
  br label %148

148:                                              ; preds = %142, %147, %137
  %149 = load i64, i64* %24, align 8
  %150 = load i64*, i64** %20, align 8
  store i64 %149, i64* %150, align 8
  %151 = load i64, i64* %28, align 8
  %152 = load %struct.jpeg_destination_mgr*, %struct.jpeg_destination_mgr** %19, align 8
  %153 = getelementptr inbounds %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %152, i64 0, i32 1
  store i64 %151, i64* %153, align 8
  %154 = load i32, i32* %29, align 8
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %168, label %156

156:                                              ; preds = %148
  %157 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 14
  %158 = load i32, i32* %157, align 8
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %160, label %165

160:                                              ; preds = %156
  store i32 %154, i32* %157, align 8
  %161 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 15
  %162 = load i32, i32* %161, align 4
  %163 = add nsw i32 %162, 1
  %164 = and i32 %163, 7
  store i32 %164, i32* %161, align 4
  br label %165

165:                                              ; preds = %160, %156
  %166 = phi i32 [ %154, %160 ], [ %158, %156 ]
  %167 = add i32 %166, -1
  store i32 %167, i32* %157, align 8
  br label %168

168:                                              ; preds = %148, %165
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #5
  call void @llvm.lifetime.end.p0i8(i64 286, i8* nonnull %16) #5
  ret i32 1
}

declare i32 @jsimd_can_encode_mcu_AC_first_prepare() local_unnamed_addr #2

declare void @jsimd_encode_mcu_AC_first_prepare(i16*, i32*, i32, i32, i16*, i64*) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @encode_mcu_AC_first_prepare(i16* nocapture readonly, i32* nocapture readonly, i32, i32, i16* nocapture, i64* nocapture) #3 {
  %7 = icmp sgt i32 %2, 0
  br i1 %7, label %8, label %39

8:                                                ; preds = %6
  %9 = zext i32 %2 to i64
  br label %10

10:                                               ; preds = %35, %8
  %11 = phi i64 [ 0, %8 ], [ %37, %35 ]
  %12 = phi i64 [ 0, %8 ], [ %36, %35 ]
  %13 = getelementptr inbounds i32, i32* %1, i64 %11
  %14 = load i32, i32* %13, align 4
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds i16, i16* %0, i64 %15
  %17 = load i16, i16* %16, align 2
  %18 = sext i16 %17 to i32
  %19 = icmp eq i16 %17, 0
  br i1 %19, label %35, label %20

20:                                               ; preds = %10
  %21 = ashr i32 %18, 31
  %22 = xor i32 %21, %18
  %23 = sub nsw i32 %22, %21
  %24 = ashr i32 %23, %3
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %35, label %26

26:                                               ; preds = %20
  %27 = xor i32 %24, %21
  %28 = trunc i32 %24 to i16
  %29 = getelementptr inbounds i16, i16* %4, i64 %11
  store i16 %28, i16* %29, align 2
  %30 = trunc i32 %27 to i16
  %31 = add nuw nsw i64 %11, 64
  %32 = getelementptr inbounds i16, i16* %4, i64 %31
  store i16 %30, i16* %32, align 2
  %33 = shl i64 1, %11
  %34 = or i64 %33, %12
  br label %35

35:                                               ; preds = %20, %10, %26
  %36 = phi i64 [ %12, %10 ], [ %12, %20 ], [ %34, %26 ]
  %37 = add nuw nsw i64 %11, 1
  %38 = icmp eq i64 %37, %9
  br i1 %38, label %39, label %10

39:                                               ; preds = %35, %6
  %40 = phi i64 [ 0, %6 ], [ %36, %35 ]
  store i64 %40, i64* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @encode_mcu_DC_refine(%struct.jpeg_compress_struct* nocapture readonly, [64 x i16]** nocapture readonly) #0 {
  %3 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 62
  %4 = bitcast %struct.jpeg_entropy_encoder** %3 to %struct.phuff_entropy_encoder**
  %5 = load %struct.phuff_entropy_encoder*, %struct.phuff_entropy_encoder** %4, align 8
  %6 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 53
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 6
  %9 = bitcast %struct.jpeg_destination_mgr** %8 to i64**
  %10 = load i64*, i64** %9, align 8
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 4
  %13 = bitcast i8** %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = load %struct.jpeg_destination_mgr*, %struct.jpeg_destination_mgr** %8, align 8
  %15 = getelementptr inbounds %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %14, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 5
  store i64 %16, i64* %17, align 8
  %18 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 30
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %28, label %21

21:                                               ; preds = %2
  %22 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 14
  %23 = load i32, i32* %22, align 8
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 15
  %27 = load i32, i32* %26, align 4
  tail call fastcc void @emit_restart(%struct.phuff_entropy_encoder* %5, i32 %27)
  br label %28

28:                                               ; preds = %2, %21, %25
  %29 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 48
  %30 = load i32, i32* %29, align 8
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %32, label %44

32:                                               ; preds = %28, %32
  %33 = phi i64 [ %40, %32 ], [ 0, %28 ]
  %34 = getelementptr inbounds [64 x i16]*, [64 x i16]** %1, i64 %33
  %35 = load [64 x i16]*, [64 x i16]** %34, align 8
  %36 = getelementptr inbounds [64 x i16], [64 x i16]* %35, i64 0, i64 0
  %37 = load i16, i16* %36, align 2
  %38 = sext i16 %37 to i32
  %39 = ashr i32 %38, %7
  tail call fastcc void @emit_bits(%struct.phuff_entropy_encoder* %5, i32 %39, i32 1)
  %40 = add nuw nsw i64 %33, 1
  %41 = load i32, i32* %29, align 8
  %42 = sext i32 %41 to i64
  %43 = icmp slt i64 %40, %42
  br i1 %43, label %32, label %44

44:                                               ; preds = %32, %28
  %45 = load i64, i64* %13, align 8
  %46 = load i64*, i64** %9, align 8
  store i64 %45, i64* %46, align 8
  %47 = load i64, i64* %17, align 8
  %48 = load %struct.jpeg_destination_mgr*, %struct.jpeg_destination_mgr** %8, align 8
  %49 = getelementptr inbounds %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %48, i64 0, i32 1
  store i64 %47, i64* %49, align 8
  %50 = load i32, i32* %18, align 8
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %64, label %52

52:                                               ; preds = %44
  %53 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 14
  %54 = load i32, i32* %53, align 8
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %61

56:                                               ; preds = %52
  store i32 %50, i32* %53, align 8
  %57 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 15
  %58 = load i32, i32* %57, align 4
  %59 = add nsw i32 %58, 1
  %60 = and i32 %59, 7
  store i32 %60, i32* %57, align 4
  br label %61

61:                                               ; preds = %56, %52
  %62 = phi i32 [ %50, %56 ], [ %54, %52 ]
  %63 = add i32 %62, -1
  store i32 %63, i32* %53, align 8
  br label %64

64:                                               ; preds = %44, %61
  ret i32 1
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @encode_mcu_AC_refine(%struct.jpeg_compress_struct* nocapture readonly, [64 x i16]** nocapture readonly) #0 {
  %3 = alloca [79 x i16], align 16
  %4 = alloca [2 x i64], align 16
  %5 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 62
  %6 = bitcast %struct.jpeg_entropy_encoder** %5 to %struct.phuff_entropy_encoder**
  %7 = load %struct.phuff_entropy_encoder*, %struct.phuff_entropy_encoder** %6, align 8
  %8 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 51
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 50
  %11 = load i32, i32* %10, align 4
  %12 = sub nsw i32 %9, %11
  %13 = add nsw i32 %12, 1
  %14 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 53
  %15 = load i32, i32* %14, align 8
  %16 = bitcast [79 x i16]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 158, i8* nonnull %16) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 158, i1 false)
  %17 = bitcast [2 x i64]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #5
  %18 = getelementptr inbounds [2 x i64], [2 x i64]* %4, i64 0, i64 0
  %19 = getelementptr inbounds [2 x i64], [2 x i64]* %4, i64 0, i64 1
  %20 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 6
  %21 = bitcast %struct.jpeg_destination_mgr** %20 to i64**
  %22 = bitcast [2 x i64]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -86, i64 16, i1 false)
  %23 = load i64*, i64** %21, align 8
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 4
  %26 = bitcast i8** %25 to i64*
  store i64 %24, i64* %26, align 8
  %27 = load %struct.jpeg_destination_mgr*, %struct.jpeg_destination_mgr** %20, align 8
  %28 = getelementptr inbounds %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %27, i64 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 5
  store i64 %29, i64* %30, align 8
  %31 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 30
  %32 = load i32, i32* %31, align 8
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %41, label %34

34:                                               ; preds = %2
  %35 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 14
  %36 = load i32, i32* %35, align 8
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %41

38:                                               ; preds = %34
  %39 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 15
  %40 = load i32, i32* %39, align 4
  tail call fastcc void @emit_restart(%struct.phuff_entropy_encoder* %7, i32 %40)
  br label %41

41:                                               ; preds = %2, %34, %38
  %42 = getelementptr inbounds [79 x i16], [79 x i16]* %3, i64 0, i64 0
  %43 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 2
  %44 = load i32 (i16*, i32*, i32, i32, i16*, i64*)*, i32 (i16*, i32*, i32, i32, i16*, i64*)** %43, align 8
  %45 = load [64 x i16]*, [64 x i16]** %1, align 8
  %46 = getelementptr inbounds [64 x i16], [64 x i16]* %45, i64 0, i64 0
  %47 = load i32, i32* %10, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds [0 x i32], [0 x i32]* @jpeg_natural_order, i64 0, i64 %48
  %50 = call i32 %44(i16* %46, i32* %49, i32 %13, i32 %15, i16* nonnull %42, i64* nonnull %18) #5
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [79 x i16], [79 x i16]* %3, i64 0, i64 %51
  %53 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 13
  %54 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 12
  %55 = load i64, i64* %18, align 16
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %180, label %57

57:                                               ; preds = %41
  %58 = load i64, i64* %19, align 8
  %59 = load i8*, i8** %53, align 8
  %60 = load i32, i32* %54, align 8
  %61 = zext i32 %60 to i64
  %62 = getelementptr inbounds i8, i8* %59, i64 %61
  %63 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 10
  %64 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 3
  br label %65

65:                                               ; preds = %57, %133
  %66 = phi i64 [ %58, %57 ], [ %137, %133 ]
  %67 = phi i16* [ %42, %57 ], [ %124, %133 ]
  %68 = phi i32 [ 0, %57 ], [ %136, %133 ]
  %69 = phi i8* [ %62, %57 ], [ %135, %133 ]
  %70 = phi i32 [ 0, %57 ], [ %134, %133 ]
  %71 = phi i64 [ %55, %57 ], [ %138, %133 ]
  %72 = call i64 @llvm.cttz.i64(i64 %71, i1 true) #5, !range !2
  %73 = trunc i64 %72 to i32
  %74 = lshr i64 %71, %72
  %75 = add nsw i32 %70, %73
  %76 = getelementptr inbounds i16, i16* %67, i64 %72
  %77 = lshr i64 %66, %72
  %78 = icmp slt i32 %75, 16
  %79 = icmp ugt i16* %76, %52
  %80 = or i1 %79, %78
  br i1 %80, label %120, label %81

81:                                               ; preds = %65, %117
  %82 = phi i32 [ 0, %117 ], [ %68, %65 ]
  %83 = phi i8* [ %118, %117 ], [ %69, %65 ]
  %84 = phi i32 [ %104, %117 ], [ %75, %65 ]
  call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %7)
  %85 = load i32, i32* %63, align 8
  %86 = load i32, i32* %64, align 8
  %87 = icmp eq i32 %86, 0
  %88 = sext i32 %85 to i64
  br i1 %87, label %95, label %89

89:                                               ; preds = %81
  %90 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 17, i64 %88
  %91 = load i64*, i64** %90, align 8
  %92 = getelementptr inbounds i64, i64* %91, i64 240
  %93 = load i64, i64* %92, align 8
  %94 = add nsw i64 %93, 1
  store i64 %94, i64* %92, align 8
  br label %103

95:                                               ; preds = %81
  %96 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 16, i64 %88
  %97 = load %struct.c_derived_tbl*, %struct.c_derived_tbl** %96, align 8
  %98 = getelementptr inbounds %struct.c_derived_tbl, %struct.c_derived_tbl* %97, i64 0, i32 0, i64 240
  %99 = load i32, i32* %98, align 4
  %100 = getelementptr inbounds %struct.c_derived_tbl, %struct.c_derived_tbl* %97, i64 0, i32 1, i64 240
  %101 = load i8, i8* %100, align 1
  %102 = sext i8 %101 to i32
  call fastcc void @emit_bits(%struct.phuff_entropy_encoder* %7, i32 %99, i32 %102) #5
  br label %103

103:                                              ; preds = %89, %95
  %104 = add nsw i32 %84, -16
  %105 = load i32, i32* %64, align 8
  %106 = icmp ne i32 %105, 0
  %107 = icmp eq i32 %82, 0
  %108 = or i1 %107, %106
  br i1 %108, label %117, label %109

109:                                              ; preds = %103, %109
  %110 = phi i32 [ %115, %109 ], [ %82, %103 ]
  %111 = phi i8* [ %114, %109 ], [ %83, %103 ]
  %112 = load i8, i8* %111, align 1
  %113 = sext i8 %112 to i32
  call fastcc void @emit_bits(%struct.phuff_entropy_encoder* %7, i32 %113, i32 1) #5
  %114 = getelementptr inbounds i8, i8* %111, i64 1
  %115 = add i32 %110, -1
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %109

117:                                              ; preds = %109, %103
  %118 = load i8*, i8** %53, align 8
  %119 = icmp slt i32 %104, 16
  br i1 %119, label %120, label %81

120:                                              ; preds = %117, %65
  %121 = phi i32 [ %75, %65 ], [ %104, %117 ]
  %122 = phi i8* [ %69, %65 ], [ %118, %117 ]
  %123 = phi i32 [ %68, %65 ], [ 0, %117 ]
  %124 = getelementptr inbounds i16, i16* %76, i64 1
  %125 = load i16, i16* %76, align 2
  %126 = icmp sgt i16 %125, 1
  br i1 %126, label %127, label %140

127:                                              ; preds = %120
  %128 = trunc i16 %125 to i8
  %129 = and i8 %128, 1
  %130 = add i32 %123, 1
  %131 = zext i32 %123 to i64
  %132 = getelementptr inbounds i8, i8* %122, i64 %131
  store i8 %129, i8* %132, align 1
  br label %133

133:                                              ; preds = %127, %178
  %134 = phi i32 [ %121, %127 ], [ 0, %178 ]
  %135 = phi i8* [ %122, %127 ], [ %179, %178 ]
  %136 = phi i32 [ %130, %127 ], [ 0, %178 ]
  %137 = lshr i64 %77, 1
  %138 = lshr i64 %74, 1
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %180, label %65

140:                                              ; preds = %120
  call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %7)
  %141 = load i32, i32* %63, align 8
  %142 = shl i32 %121, 4
  %143 = or i32 %142, 1
  %144 = load i32, i32* %64, align 8
  %145 = icmp eq i32 %144, 0
  %146 = sext i32 %141 to i64
  br i1 %145, label %154, label %147

147:                                              ; preds = %140
  %148 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 17, i64 %146
  %149 = load i64*, i64** %148, align 8
  %150 = sext i32 %143 to i64
  %151 = getelementptr inbounds i64, i64* %149, i64 %150
  %152 = load i64, i64* %151, align 8
  %153 = add nsw i64 %152, 1
  store i64 %153, i64* %151, align 8
  br label %163

154:                                              ; preds = %140
  %155 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 16, i64 %146
  %156 = load %struct.c_derived_tbl*, %struct.c_derived_tbl** %155, align 8
  %157 = sext i32 %143 to i64
  %158 = getelementptr inbounds %struct.c_derived_tbl, %struct.c_derived_tbl* %156, i64 0, i32 0, i64 %157
  %159 = load i32, i32* %158, align 4
  %160 = getelementptr inbounds %struct.c_derived_tbl, %struct.c_derived_tbl* %156, i64 0, i32 1, i64 %157
  %161 = load i8, i8* %160, align 1
  %162 = sext i8 %161 to i32
  call fastcc void @emit_bits(%struct.phuff_entropy_encoder* %7, i32 %159, i32 %162) #5
  br label %163

163:                                              ; preds = %147, %154
  %164 = trunc i64 %77 to i32
  %165 = and i32 %164, 1
  call fastcc void @emit_bits(%struct.phuff_entropy_encoder* %7, i32 %165, i32 1)
  %166 = load i32, i32* %64, align 8
  %167 = icmp ne i32 %166, 0
  %168 = icmp eq i32 %123, 0
  %169 = or i1 %168, %167
  br i1 %169, label %178, label %170

170:                                              ; preds = %163, %170
  %171 = phi i32 [ %176, %170 ], [ %123, %163 ]
  %172 = phi i8* [ %175, %170 ], [ %122, %163 ]
  %173 = load i8, i8* %172, align 1
  %174 = sext i8 %173 to i32
  call fastcc void @emit_bits(%struct.phuff_entropy_encoder* %7, i32 %174, i32 1) #5
  %175 = getelementptr inbounds i8, i8* %172, i64 1
  %176 = add i32 %171, -1
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %178, label %170

178:                                              ; preds = %170, %163
  %179 = load i8*, i8** %53, align 8
  br label %133

180:                                              ; preds = %133, %41
  %181 = phi i32 [ 0, %41 ], [ %134, %133 ]
  %182 = phi i32 [ 0, %41 ], [ %136, %133 ]
  %183 = phi i16* [ %42, %41 ], [ %124, %133 ]
  %184 = sext i32 %13 to i64
  %185 = getelementptr inbounds [79 x i16], [79 x i16]* %3, i64 0, i64 %184
  %186 = ptrtoint i16* %185 to i64
  %187 = ptrtoint i16* %183 to i64
  %188 = sub i64 %186, %187
  %189 = lshr exact i64 %188, 1
  %190 = trunc i64 %189 to i32
  %191 = or i32 %181, %190
  %192 = icmp sgt i32 %191, 0
  %193 = icmp ne i32 %182, 0
  %194 = or i1 %193, %192
  br i1 %194, label %195, label %205

195:                                              ; preds = %180
  %196 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 11
  %197 = load i32, i32* %196, align 4
  %198 = add i32 %197, 1
  store i32 %198, i32* %196, align 4
  %199 = load i32, i32* %54, align 8
  %200 = add i32 %199, %182
  store i32 %200, i32* %54, align 8
  %201 = icmp eq i32 %198, 32767
  %202 = icmp ugt i32 %200, 937
  %203 = or i1 %201, %202
  br i1 %203, label %204, label %205

204:                                              ; preds = %195
  call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %7)
  br label %205

205:                                              ; preds = %195, %204, %180
  %206 = load i64, i64* %26, align 8
  %207 = load i64*, i64** %21, align 8
  store i64 %206, i64* %207, align 8
  %208 = load i64, i64* %30, align 8
  %209 = load %struct.jpeg_destination_mgr*, %struct.jpeg_destination_mgr** %20, align 8
  %210 = getelementptr inbounds %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %209, i64 0, i32 1
  store i64 %208, i64* %210, align 8
  %211 = load i32, i32* %31, align 8
  %212 = icmp eq i32 %211, 0
  br i1 %212, label %225, label %213

213:                                              ; preds = %205
  %214 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 14
  %215 = load i32, i32* %214, align 8
  %216 = icmp eq i32 %215, 0
  br i1 %216, label %217, label %222

217:                                              ; preds = %213
  store i32 %211, i32* %214, align 8
  %218 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %7, i64 0, i32 15
  %219 = load i32, i32* %218, align 4
  %220 = add nsw i32 %219, 1
  %221 = and i32 %220, 7
  store i32 %221, i32* %218, align 4
  br label %222

222:                                              ; preds = %217, %213
  %223 = phi i32 [ %211, %217 ], [ %215, %213 ]
  %224 = add i32 %223, -1
  store i32 %224, i32* %214, align 8
  br label %225

225:                                              ; preds = %205, %222
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #5
  call void @llvm.lifetime.end.p0i8(i64 158, i8* nonnull %16) #5
  ret i32 1
}

declare i32 @jsimd_can_encode_mcu_AC_refine_prepare() local_unnamed_addr #2

declare i32 @jsimd_encode_mcu_AC_refine_prepare(i16*, i32*, i32, i32, i16*, i64*) #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @encode_mcu_AC_refine_prepare(i16* nocapture readonly, i32* nocapture readonly, i32, i32, i16* nocapture, i64* nocapture) #3 {
  %7 = icmp sgt i32 %2, 0
  br i1 %7, label %8, label %43

8:                                                ; preds = %6
  %9 = zext i32 %2 to i64
  br label %10

10:                                               ; preds = %33, %8
  %11 = phi i64 [ 0, %8 ], [ %41, %33 ]
  %12 = phi i64 [ 0, %8 ], [ %35, %33 ]
  %13 = phi i64 [ 0, %8 ], [ %34, %33 ]
  %14 = phi i32 [ 0, %8 ], [ %40, %33 ]
  %15 = getelementptr inbounds i32, i32* %1, i64 %11
  %16 = load i32, i32* %15, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i16, i16* %0, i64 %17
  %19 = load i16, i16* %18, align 2
  %20 = sext i16 %19 to i32
  %21 = ashr i32 %20, 31
  %22 = xor i32 %21, %20
  %23 = sub nsw i32 %22, %21
  %24 = ashr i32 %23, %3
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %33, label %26

26:                                               ; preds = %10
  %27 = shl i64 1, %11
  %28 = or i64 %13, %27
  %29 = add nsw i32 %21, 1
  %30 = sext i32 %29 to i64
  %31 = shl i64 %30, %11
  %32 = or i64 %31, %12
  br label %33

33:                                               ; preds = %10, %26
  %34 = phi i64 [ %28, %26 ], [ %13, %10 ]
  %35 = phi i64 [ %32, %26 ], [ %12, %10 ]
  %36 = trunc i32 %24 to i16
  %37 = getelementptr inbounds i16, i16* %4, i64 %11
  store i16 %36, i16* %37, align 2
  %38 = icmp eq i32 %24, 1
  %39 = trunc i64 %11 to i32
  %40 = select i1 %38, i32 %39, i32 %14
  %41 = add nuw nsw i64 %11, 1
  %42 = icmp eq i64 %41, %9
  br i1 %42, label %43, label %10

43:                                               ; preds = %33, %6
  %44 = phi i32 [ 0, %6 ], [ %40, %33 ]
  %45 = phi i64 [ 0, %6 ], [ %34, %33 ]
  %46 = phi i64 [ 0, %6 ], [ %35, %33 ]
  store i64 %45, i64* %5, align 8
  %47 = getelementptr inbounds i64, i64* %5, i64 1
  store i64 %46, i64* %47, align 8
  ret i32 %44
}

; Function Attrs: nounwind ssp uwtable
define internal void @finish_pass_gather_phuff(%struct.jpeg_compress_struct*) #0 {
  %2 = alloca [4 x i32], align 16
  %3 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 62
  %4 = bitcast %struct.jpeg_entropy_encoder** %3 to %struct.phuff_entropy_encoder**
  %5 = load %struct.phuff_entropy_encoder*, %struct.phuff_entropy_encoder** %4, align 8
  %6 = bitcast [4 x i32]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #5
  tail call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %5)
  %7 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 50
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 0, i64 16, i1 false)
  %10 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 44
  %11 = load i32, i32* %10, align 4
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %53

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 52
  %15 = bitcast %struct.jpeg_compress_struct* %0 to %struct.jpeg_common_struct*
  br label %16

16:                                               ; preds = %13, %48
  %17 = phi i32 [ %11, %13 ], [ %49, %48 ]
  %18 = phi i64 [ 0, %13 ], [ %50, %48 ]
  %19 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 45, i64 %18
  %20 = load %struct.jpeg_component_info*, %struct.jpeg_component_info** %19, align 8
  br i1 %9, label %21, label %26

21:                                               ; preds = %16
  %22 = load i32, i32* %14, align 4
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %48

24:                                               ; preds = %21
  %25 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %20, i64 0, i32 5
  br label %28

26:                                               ; preds = %16
  %27 = getelementptr inbounds %struct.jpeg_component_info, %struct.jpeg_component_info* %20, i64 0, i32 6
  br label %28

28:                                               ; preds = %26, %24
  %29 = phi i32* [ %25, %24 ], [ %27, %26 ]
  %30 = load i32, i32* %29, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 %31
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %48

35:                                               ; preds = %28
  %36 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 17, i64 %31
  %37 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 18, i64 %31
  %38 = select i1 %9, %struct.JHUFF_TBL** %36, %struct.JHUFF_TBL** %37
  %39 = load %struct.JHUFF_TBL*, %struct.JHUFF_TBL** %38, align 8
  %40 = icmp eq %struct.JHUFF_TBL* %39, null
  br i1 %40, label %41, label %43

41:                                               ; preds = %35
  %42 = tail call %struct.JHUFF_TBL* @jpeg_alloc_huff_table(%struct.jpeg_common_struct* %15) #5
  store %struct.JHUFF_TBL* %42, %struct.JHUFF_TBL** %38, align 8
  br label %43

43:                                               ; preds = %41, %35
  %44 = phi %struct.JHUFF_TBL* [ %42, %41 ], [ %39, %35 ]
  %45 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %5, i64 0, i32 17, i64 %31
  %46 = load i64*, i64** %45, align 8
  tail call void @jpeg_gen_optimal_table(%struct.jpeg_compress_struct* %0, %struct.JHUFF_TBL* %44, i64* %46) #5
  store i32 1, i32* %32, align 4
  %47 = load i32, i32* %10, align 4
  br label %48

48:                                               ; preds = %21, %28, %43
  %49 = phi i32 [ %17, %21 ], [ %17, %28 ], [ %47, %43 ]
  %50 = add nuw nsw i64 %18, 1
  %51 = sext i32 %49 to i64
  %52 = icmp slt i64 %50, %51
  br i1 %52, label %16, label %53

53:                                               ; preds = %48, %1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @finish_pass_phuff(%struct.jpeg_compress_struct* nocapture readonly) #0 {
  %2 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 62
  %3 = bitcast %struct.jpeg_entropy_encoder** %2 to %struct.phuff_entropy_encoder**
  %4 = load %struct.phuff_entropy_encoder*, %struct.phuff_entropy_encoder** %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %0, i64 0, i32 6
  %6 = bitcast %struct.jpeg_destination_mgr** %5 to i64**
  %7 = load i64*, i64** %6, align 8
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %4, i64 0, i32 4
  %10 = bitcast i8** %9 to i64*
  store i64 %8, i64* %10, align 8
  %11 = load %struct.jpeg_destination_mgr*, %struct.jpeg_destination_mgr** %5, align 8
  %12 = getelementptr inbounds %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %11, i64 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %4, i64 0, i32 5
  store i64 %13, i64* %14, align 8
  tail call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %4)
  tail call fastcc void @emit_bits(%struct.phuff_entropy_encoder* %4, i32 127, i32 7) #5
  %15 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %4, i64 0, i32 6
  store i64 0, i64* %15, align 8
  %16 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %4, i64 0, i32 7
  store i32 0, i32* %16, align 8
  %17 = load i64, i64* %10, align 8
  %18 = load i64*, i64** %6, align 8
  store i64 %17, i64* %18, align 8
  %19 = load i64, i64* %14, align 8
  %20 = load %struct.jpeg_destination_mgr*, %struct.jpeg_destination_mgr** %5, align 8
  %21 = getelementptr inbounds %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %20, i64 0, i32 1
  store i64 %19, i64* %21, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @jpeg_make_c_derived_tbl(%struct.jpeg_compress_struct*, i32, i32, %struct.c_derived_tbl**) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @emit_restart(%struct.phuff_entropy_encoder* nocapture, i32) unnamed_addr #0 {
  tail call fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* %0)
  %3 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 3
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %6, label %79

6:                                                ; preds = %2
  tail call fastcc void @emit_bits(%struct.phuff_entropy_encoder* %0, i32 127, i32 7) #5
  %7 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 6
  store i64 0, i64* %7, align 8
  %8 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 7
  store i32 0, i32* %8, align 8
  %9 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 4
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 1
  store i8* %11, i8** %9, align 8
  store i8 -1, i8* %10, align 1
  %12 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 5
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %13, -1
  store i64 %14, i64* %12, align 8
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %18, label %16

16:                                               ; preds = %6
  %17 = load i8*, i8** %9, align 8
  br label %45

18:                                               ; preds = %6
  %19 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 8
  %20 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %19, align 8
  %21 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %20, i64 0, i32 6
  %22 = load %struct.jpeg_destination_mgr*, %struct.jpeg_destination_mgr** %21, align 8
  %23 = getelementptr inbounds %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %22, i64 0, i32 3
  %24 = load i32 (%struct.jpeg_compress_struct*)*, i32 (%struct.jpeg_compress_struct*)** %23, align 8
  %25 = tail call i32 %24(%struct.jpeg_compress_struct* %20) #5
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %38

27:                                               ; preds = %18
  %28 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %19, align 8
  %29 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %28, i64 0, i32 0
  %30 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %29, align 8
  %31 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %30, i64 0, i32 5
  store i32 24, i32* %31, align 8
  %32 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %19, align 8
  %33 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %32, i64 0, i32 0
  %34 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %33, align 8
  %35 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %34, i64 0, i32 0
  %36 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %35, align 8
  %37 = bitcast %struct.jpeg_compress_struct* %32 to %struct.jpeg_common_struct*
  tail call void %36(%struct.jpeg_common_struct* %37) #5
  br label %38

38:                                               ; preds = %18, %27
  %39 = bitcast %struct.jpeg_destination_mgr* %22 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = bitcast i8** %9 to i64*
  store i64 %40, i64* %41, align 8
  %42 = getelementptr inbounds %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %22, i64 0, i32 1
  %43 = load i64, i64* %42, align 8
  store i64 %43, i64* %12, align 8
  %44 = inttoptr i64 %40 to i8*
  br label %45

45:                                               ; preds = %16, %38
  %46 = phi i8* [ %17, %16 ], [ %44, %38 ]
  %47 = trunc i32 %1 to i8
  %48 = add i8 %47, -48
  %49 = getelementptr inbounds i8, i8* %46, i64 1
  store i8* %49, i8** %9, align 8
  store i8 %48, i8* %46, align 1
  %50 = load i64, i64* %12, align 8
  %51 = add i64 %50, -1
  store i64 %51, i64* %12, align 8
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %53, label %79

53:                                               ; preds = %45
  %54 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 8
  %55 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %54, align 8
  %56 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %55, i64 0, i32 6
  %57 = load %struct.jpeg_destination_mgr*, %struct.jpeg_destination_mgr** %56, align 8
  %58 = getelementptr inbounds %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %57, i64 0, i32 3
  %59 = load i32 (%struct.jpeg_compress_struct*)*, i32 (%struct.jpeg_compress_struct*)** %58, align 8
  %60 = tail call i32 %59(%struct.jpeg_compress_struct* %55) #5
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %73

62:                                               ; preds = %53
  %63 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %54, align 8
  %64 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %63, i64 0, i32 0
  %65 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %64, align 8
  %66 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %65, i64 0, i32 5
  store i32 24, i32* %66, align 8
  %67 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %54, align 8
  %68 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %67, i64 0, i32 0
  %69 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %68, align 8
  %70 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %69, i64 0, i32 0
  %71 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %70, align 8
  %72 = bitcast %struct.jpeg_compress_struct* %67 to %struct.jpeg_common_struct*
  tail call void %71(%struct.jpeg_common_struct* %72) #5
  br label %73

73:                                               ; preds = %53, %62
  %74 = bitcast %struct.jpeg_destination_mgr* %57 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = bitcast i8** %9 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %57, i64 0, i32 1
  %78 = load i64, i64* %77, align 8
  store i64 %78, i64* %12, align 8
  br label %79

79:                                               ; preds = %2, %45, %73
  %80 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 8
  %81 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %80, align 8
  %82 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %81, i64 0, i32 50
  %83 = load i32, i32* %82, align 4
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %85, label %96

85:                                               ; preds = %79
  %86 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %81, i64 0, i32 44
  %87 = load i32, i32* %86, align 4
  %88 = icmp sgt i32 %87, 0
  br i1 %88, label %89, label %99

89:                                               ; preds = %85, %89
  %90 = phi i64 [ %92, %89 ], [ 0, %85 ]
  %91 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 9, i64 %90
  store i32 0, i32* %91, align 4
  %92 = add nuw nsw i64 %90, 1
  %93 = load i32, i32* %86, align 4
  %94 = sext i32 %93 to i64
  %95 = icmp slt i64 %92, %94
  br i1 %95, label %89, label %99

96:                                               ; preds = %79
  %97 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 11
  store i32 0, i32* %97, align 4
  %98 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 12
  store i32 0, i32* %98, align 8
  br label %99

99:                                               ; preds = %89, %85, %96
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @emit_bits(%struct.phuff_entropy_encoder* nocapture, i32, i32) unnamed_addr #0 {
  %4 = zext i32 %1 to i64
  %5 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 7
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %2, 0
  br i1 %7, label %8, label %20

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 8
  %10 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %9, align 8
  %11 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %10, i64 0, i32 0
  %12 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %11, align 8
  %13 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %12, i64 0, i32 5
  store i32 40, i32* %13, align 8
  %14 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %9, align 8
  %15 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %14, i64 0, i32 0
  %16 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8
  %17 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %16, i64 0, i32 0
  %18 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %17, align 8
  %19 = bitcast %struct.jpeg_compress_struct* %14 to %struct.jpeg_common_struct*
  tail call void %18(%struct.jpeg_common_struct* %19) #5
  br label %20

20:                                               ; preds = %8, %3
  %21 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 3
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %118

24:                                               ; preds = %20
  %25 = zext i32 %2 to i64
  %26 = shl nsw i64 -1, %25
  %27 = xor i64 %26, 4294967295
  %28 = and i64 %27, %4
  %29 = add i32 %6, %2
  %30 = sub nsw i32 24, %29
  %31 = zext i32 %30 to i64
  %32 = shl i64 %28, %31
  %33 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 6
  %34 = load i64, i64* %33, align 8
  %35 = or i64 %34, %32
  %36 = icmp sgt i32 %29, 7
  br i1 %36, label %37, label %115

37:                                               ; preds = %24
  %38 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 4
  %39 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 5
  %40 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 8
  %41 = bitcast i8** %38 to i64*
  br label %42

42:                                               ; preds = %37, %109
  %43 = phi i32 [ %29, %37 ], [ %111, %109 ]
  %44 = phi i64 [ %35, %37 ], [ %110, %109 ]
  %45 = lshr i64 %44, 16
  %46 = trunc i64 %45 to i8
  %47 = load i8*, i8** %38, align 8
  %48 = getelementptr inbounds i8, i8* %47, i64 1
  store i8* %48, i8** %38, align 8
  store i8 %46, i8* %47, align 1
  %49 = load i64, i64* %39, align 8
  %50 = add i64 %49, -1
  store i64 %50, i64* %39, align 8
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %52, label %76

52:                                               ; preds = %42
  %53 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %40, align 8
  %54 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %53, i64 0, i32 6
  %55 = load %struct.jpeg_destination_mgr*, %struct.jpeg_destination_mgr** %54, align 8
  %56 = getelementptr inbounds %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %55, i64 0, i32 3
  %57 = load i32 (%struct.jpeg_compress_struct*)*, i32 (%struct.jpeg_compress_struct*)** %56, align 8
  %58 = tail call i32 %57(%struct.jpeg_compress_struct* %53) #5
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %71

60:                                               ; preds = %52
  %61 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %40, align 8
  %62 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %61, i64 0, i32 0
  %63 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %62, align 8
  %64 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %63, i64 0, i32 5
  store i32 24, i32* %64, align 8
  %65 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %40, align 8
  %66 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %65, i64 0, i32 0
  %67 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %66, align 8
  %68 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %67, i64 0, i32 0
  %69 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %68, align 8
  %70 = bitcast %struct.jpeg_compress_struct* %65 to %struct.jpeg_common_struct*
  tail call void %69(%struct.jpeg_common_struct* %70) #5
  br label %71

71:                                               ; preds = %52, %60
  %72 = bitcast %struct.jpeg_destination_mgr* %55 to i64*
  %73 = load i64, i64* %72, align 8
  store i64 %73, i64* %41, align 8
  %74 = getelementptr inbounds %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %55, i64 0, i32 1
  %75 = load i64, i64* %74, align 8
  store i64 %75, i64* %39, align 8
  br label %76

76:                                               ; preds = %71, %42
  %77 = and i64 %44, 16711680
  %78 = icmp eq i64 %77, 16711680
  br i1 %78, label %79, label %109

79:                                               ; preds = %76
  %80 = load i8*, i8** %38, align 8
  %81 = getelementptr inbounds i8, i8* %80, i64 1
  store i8* %81, i8** %38, align 8
  store i8 0, i8* %80, align 1
  %82 = load i64, i64* %39, align 8
  %83 = add i64 %82, -1
  store i64 %83, i64* %39, align 8
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %85, label %109

85:                                               ; preds = %79
  %86 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %40, align 8
  %87 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %86, i64 0, i32 6
  %88 = load %struct.jpeg_destination_mgr*, %struct.jpeg_destination_mgr** %87, align 8
  %89 = getelementptr inbounds %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %88, i64 0, i32 3
  %90 = load i32 (%struct.jpeg_compress_struct*)*, i32 (%struct.jpeg_compress_struct*)** %89, align 8
  %91 = tail call i32 %90(%struct.jpeg_compress_struct* %86) #5
  %92 = icmp eq i32 %91, 0
  br i1 %92, label %93, label %104

93:                                               ; preds = %85
  %94 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %40, align 8
  %95 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %94, i64 0, i32 0
  %96 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %95, align 8
  %97 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %96, i64 0, i32 5
  store i32 24, i32* %97, align 8
  %98 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %40, align 8
  %99 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %98, i64 0, i32 0
  %100 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %99, align 8
  %101 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %100, i64 0, i32 0
  %102 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %101, align 8
  %103 = bitcast %struct.jpeg_compress_struct* %98 to %struct.jpeg_common_struct*
  tail call void %102(%struct.jpeg_common_struct* %103) #5
  br label %104

104:                                              ; preds = %85, %93
  %105 = bitcast %struct.jpeg_destination_mgr* %88 to i64*
  %106 = load i64, i64* %105, align 8
  store i64 %106, i64* %41, align 8
  %107 = getelementptr inbounds %struct.jpeg_destination_mgr, %struct.jpeg_destination_mgr* %88, i64 0, i32 1
  %108 = load i64, i64* %107, align 8
  store i64 %108, i64* %39, align 8
  br label %109

109:                                              ; preds = %79, %104, %76
  %110 = shl i64 %44, 8
  %111 = add nsw i32 %43, -8
  %112 = icmp sgt i32 %111, 7
  br i1 %112, label %42, label %113

113:                                              ; preds = %109
  %114 = and i32 %29, 7
  br label %115

115:                                              ; preds = %113, %24
  %116 = phi i64 [ %35, %24 ], [ %110, %113 ]
  %117 = phi i32 [ %29, %24 ], [ %114, %113 ]
  store i64 %116, i64* %33, align 8
  store i32 %117, i32* %5, align 8
  br label %118

118:                                              ; preds = %20, %115
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @emit_eobrun(%struct.phuff_entropy_encoder* nocapture) unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 11
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %71, label %5

5:                                                ; preds = %1
  %6 = sext i32 %3 to i64
  %7 = getelementptr inbounds [65536 x i8], [65536 x i8]* @jpeg_nbits_table, i64 0, i64 %6
  %8 = load i8, i8* %7, align 1
  %9 = zext i8 %8 to i32
  %10 = add nsw i32 %9, -1
  %11 = icmp sgt i32 %10, 14
  br i1 %11, label %12, label %24

12:                                               ; preds = %5
  %13 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 8
  %14 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %13, align 8
  %15 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %14, i64 0, i32 0
  %16 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %15, align 8
  %17 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %16, i64 0, i32 5
  store i32 40, i32* %17, align 8
  %18 = load %struct.jpeg_compress_struct*, %struct.jpeg_compress_struct** %13, align 8
  %19 = getelementptr inbounds %struct.jpeg_compress_struct, %struct.jpeg_compress_struct* %18, i64 0, i32 0
  %20 = load %struct.jpeg_error_mgr*, %struct.jpeg_error_mgr** %19, align 8
  %21 = getelementptr inbounds %struct.jpeg_error_mgr, %struct.jpeg_error_mgr* %20, i64 0, i32 0
  %22 = load void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*)** %21, align 8
  %23 = bitcast %struct.jpeg_compress_struct* %18 to %struct.jpeg_common_struct*
  tail call void %22(%struct.jpeg_common_struct* %23) #5
  br label %24

24:                                               ; preds = %12, %5
  %25 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 10
  %26 = load i32, i32* %25, align 8
  %27 = shl nsw i32 %10, 4
  %28 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 3
  %29 = load i32, i32* %28, align 8
  %30 = icmp eq i32 %29, 0
  %31 = sext i32 %26 to i64
  br i1 %30, label %39, label %32

32:                                               ; preds = %24
  %33 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 17, i64 %31
  %34 = load i64*, i64** %33, align 8
  %35 = sext i32 %27 to i64
  %36 = getelementptr inbounds i64, i64* %34, i64 %35
  %37 = load i64, i64* %36, align 8
  %38 = add nsw i64 %37, 1
  store i64 %38, i64* %36, align 8
  br label %48

39:                                               ; preds = %24
  %40 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 16, i64 %31
  %41 = load %struct.c_derived_tbl*, %struct.c_derived_tbl** %40, align 8
  %42 = sext i32 %27 to i64
  %43 = getelementptr inbounds %struct.c_derived_tbl, %struct.c_derived_tbl* %41, i64 0, i32 0, i64 %42
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds %struct.c_derived_tbl, %struct.c_derived_tbl* %41, i64 0, i32 1, i64 %42
  %46 = load i8, i8* %45, align 1
  %47 = sext i8 %46 to i32
  tail call fastcc void @emit_bits(%struct.phuff_entropy_encoder* %0, i32 %44, i32 %47) #5
  br label %48

48:                                               ; preds = %32, %39
  %49 = icmp eq i32 %10, 0
  br i1 %49, label %52, label %50

50:                                               ; preds = %48
  %51 = load i32, i32* %2, align 4
  tail call fastcc void @emit_bits(%struct.phuff_entropy_encoder* %0, i32 %51, i32 %10)
  br label %52

52:                                               ; preds = %48, %50
  store i32 0, i32* %2, align 4
  %53 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 12
  %54 = load i32, i32* %53, align 8
  %55 = load i32, i32* %28, align 8
  %56 = icmp ne i32 %55, 0
  %57 = icmp eq i32 %54, 0
  %58 = or i1 %57, %56
  br i1 %58, label %70, label %59

59:                                               ; preds = %52
  %60 = getelementptr inbounds %struct.phuff_entropy_encoder, %struct.phuff_entropy_encoder* %0, i64 0, i32 13
  %61 = load i8*, i8** %60, align 8
  br label %62

62:                                               ; preds = %59, %62
  %63 = phi i32 [ %68, %62 ], [ %54, %59 ]
  %64 = phi i8* [ %67, %62 ], [ %61, %59 ]
  %65 = load i8, i8* %64, align 1
  %66 = sext i8 %65 to i32
  tail call fastcc void @emit_bits(%struct.phuff_entropy_encoder* %0, i32 %66, i32 1) #5
  %67 = getelementptr inbounds i8, i8* %64, i64 1
  %68 = add i32 %63, -1
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %62

70:                                               ; preds = %62, %52
  store i32 0, i32* %53, align 8
  br label %71

71:                                               ; preds = %1, %70
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i64 @llvm.cttz.i64(i64, i1 immarg) #4

declare %struct.JHUFF_TBL* @jpeg_alloc_huff_table(%struct.jpeg_common_struct*) local_unnamed_addr #2

declare void @jpeg_gen_optimal_table(%struct.jpeg_compress_struct*, %struct.JHUFF_TBL*, i64*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i64 0, i64 65}
