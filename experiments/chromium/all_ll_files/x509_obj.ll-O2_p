; ModuleID = '../../third_party/boringssl/src/crypto/x509/x509_obj.c'
source_filename = "../../third_party/boringssl/src/crypto/x509/x509_obj.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.buf_mem_st = type { i64, i8*, i64 }
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }

@X509_NAME_oneline.hex = internal unnamed_addr constant [17 x i8] c"0123456789ABCDEF\00", align 16
@.str = private unnamed_addr constant [13 x i8] c"NO X509_NAME\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"../../third_party/boringssl/src/crypto/x509/x509_obj.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i8* @X509_NAME_oneline(%struct.X509_name_st* readonly, i8*, i32) local_unnamed_addr #0 {
  %4 = alloca <4 x i32>, align 16
  %5 = alloca [80 x i8], align 16
  %6 = bitcast <4 x i32>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #4
  %7 = getelementptr inbounds <4 x i32>, <4 x i32>* %4, i64 0, i64 0
  %8 = getelementptr inbounds <4 x i32>, <4 x i32>* %4, i64 0, i64 1
  %9 = getelementptr inbounds <4 x i32>, <4 x i32>* %4, i64 0, i64 2
  %10 = getelementptr inbounds [80 x i8], [80 x i8]* %5, i64 0, i64 0
  %11 = bitcast <4 x i32>* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 80, i1 false)
  %12 = icmp eq i8* %1, null
  br i1 %12, label %13, label %22

13:                                               ; preds = %3
  %14 = tail call %struct.buf_mem_st* @BUF_MEM_new() #4
  %15 = icmp eq %struct.buf_mem_st* %14, null
  br i1 %15, label %329, label %16

16:                                               ; preds = %13
  %17 = tail call i64 @BUF_MEM_grow(%struct.buf_mem_st* nonnull %14, i64 200) #4
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %329, label %19

19:                                               ; preds = %16
  %20 = getelementptr inbounds %struct.buf_mem_st, %struct.buf_mem_st* %14, i64 0, i32 1
  %21 = load i8*, i8** %20, align 8
  store i8 0, i8* %21, align 1
  br label %24

22:                                               ; preds = %3
  %23 = icmp slt i32 %2, 1
  br i1 %23, label %333, label %24

24:                                               ; preds = %22, %19
  %25 = phi i32 [ 200, %19 ], [ %2, %22 ]
  %26 = phi %struct.buf_mem_st* [ %14, %19 ], [ null, %22 ]
  %27 = icmp eq %struct.X509_name_st* %0, null
  br i1 %27, label %38, label %28

28:                                               ; preds = %24
  %29 = bitcast %struct.X509_name_st* %0 to %struct.stack_st**
  %30 = load %struct.stack_st*, %struct.stack_st** %29, align 8
  %31 = call i64 @sk_num(%struct.stack_st* %30) #4
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %317, label %33

33:                                               ; preds = %28
  %34 = icmp eq %struct.buf_mem_st* %26, null
  %35 = getelementptr inbounds %struct.buf_mem_st, %struct.buf_mem_st* %26, i64 0, i32 1
  %36 = bitcast <4 x i32>* %4 to i8*
  %37 = getelementptr inbounds <4 x i32>, <4 x i32>* %4, i64 0, i64 0
  br label %48

38:                                               ; preds = %24
  %39 = icmp eq %struct.buf_mem_st* %26, null
  br i1 %39, label %44, label %40

40:                                               ; preds = %38
  %41 = getelementptr inbounds %struct.buf_mem_st, %struct.buf_mem_st* %26, i64 0, i32 1
  %42 = load i8*, i8** %41, align 8
  %43 = bitcast %struct.buf_mem_st* %26 to i8*
  tail call void @OPENSSL_free(i8* nonnull %43) #4
  br label %44

44:                                               ; preds = %38, %40
  %45 = phi i8* [ %42, %40 ], [ %1, %38 ]
  %46 = sext i32 %25 to i64
  %47 = tail call i64 @OPENSSL_strlcpy(i8* %45, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i64 %46) #4
  br label %333

48:                                               ; preds = %33, %311
  %49 = phi i32 [ 0, %33 ], [ %249, %311 ]
  %50 = phi i64 [ 0, %33 ], [ %313, %311 ]
  %51 = load %struct.stack_st*, %struct.stack_st** %29, align 8
  %52 = call i8* @sk_value(%struct.stack_st* %51, i64 %50) #4
  %53 = bitcast i8* %52 to %struct.asn1_object_st**
  %54 = load %struct.asn1_object_st*, %struct.asn1_object_st** %53, align 8
  %55 = call i32 @OBJ_obj2nid(%struct.asn1_object_st* %54) #4
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %60, label %57

57:                                               ; preds = %48
  %58 = call i8* @OBJ_nid2sn(i32 %55) #4
  %59 = icmp eq i8* %58, null
  br i1 %59, label %60, label %63

60:                                               ; preds = %57, %48
  %61 = load %struct.asn1_object_st*, %struct.asn1_object_st** %53, align 8
  %62 = call i32 @i2t_ASN1_OBJECT(i8* nonnull %10, i32 80, %struct.asn1_object_st* %61) #4
  br label %63

63:                                               ; preds = %60, %57
  %64 = phi i8* [ %10, %60 ], [ %58, %57 ]
  %65 = call i64 @strlen(i8* %64) #5
  %66 = trunc i64 %65 to i32
  %67 = getelementptr inbounds i8, i8* %52, i64 8
  %68 = bitcast i8* %67 to %struct.asn1_string_st**
  %69 = load %struct.asn1_string_st*, %struct.asn1_string_st** %68, align 8
  %70 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %69, i64 0, i32 0
  %71 = load i32, i32* %70, align 8
  %72 = icmp sgt i32 %71, 1048576
  br i1 %72, label %73, label %74

73:                                               ; preds = %63
  call void @ERR_put_error(i32 11, i32 0, i32 135, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 122) #4
  br label %331

74:                                               ; preds = %63
  %75 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %69, i64 0, i32 1
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %69, i64 0, i32 2
  %78 = load i8*, i8** %77, align 8
  %79 = icmp eq i32 %76, 27
  %80 = and i32 %71, 3
  %81 = icmp eq i32 %80, 0
  %82 = and i1 %81, %79
  br i1 %82, label %83, label %193

83:                                               ; preds = %74
  %84 = icmp sgt i32 %71, 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %36, i8 0, i64 16, i1 false)
  br i1 %84, label %85, label %184

85:                                               ; preds = %83
  %86 = zext i32 %71 to i64
  %87 = icmp ult i32 %71, 8
  %88 = add nsw i64 %86, -1
  %89 = icmp ugt i64 %88, 3
  %90 = or i1 %87, %89
  br i1 %90, label %151, label %91

91:                                               ; preds = %85
  %92 = and i64 %86, 4294967288
  br label %93

93:                                               ; preds = %145, %91
  %94 = phi i64 [ 0, %91 ], [ %146, %145 ]
  %95 = phi <4 x i64> [ <i64 0, i64 1, i64 2, i64 3>, %91 ], [ %147, %145 ]
  %96 = getelementptr inbounds i8, i8* %78, i64 %94
  %97 = bitcast i8* %96 to <4 x i8>*
  %98 = load <4 x i8>, <4 x i8>* %97, align 1
  %99 = getelementptr inbounds i8, i8* %96, i64 4
  %100 = bitcast i8* %99 to <4 x i8>*
  %101 = load <4 x i8>, <4 x i8>* %100, align 1
  %102 = icmp ne <4 x i8> %98, zeroinitializer
  %103 = icmp ne <4 x i8> %101, zeroinitializer
  %104 = and <4 x i64> %95, <i64 3, i64 3, i64 3, i64 3>
  %105 = and <4 x i64> %95, <i64 3, i64 3, i64 3, i64 3>
  %106 = extractelement <4 x i1> %102, i32 0
  br i1 %106, label %107, label %110

107:                                              ; preds = %93
  %108 = extractelement <4 x i64> %104, i32 0
  %109 = getelementptr inbounds <4 x i32>, <4 x i32>* %4, i64 0, i64 %108
  store i32 1, i32* %109, align 4
  br label %110

110:                                              ; preds = %107, %93
  %111 = extractelement <4 x i1> %102, i32 1
  br i1 %111, label %112, label %115

112:                                              ; preds = %110
  %113 = extractelement <4 x i64> %104, i32 1
  %114 = getelementptr inbounds <4 x i32>, <4 x i32>* %4, i64 0, i64 %113
  store i32 1, i32* %114, align 4
  br label %115

115:                                              ; preds = %112, %110
  %116 = extractelement <4 x i1> %102, i32 2
  br i1 %116, label %117, label %120

117:                                              ; preds = %115
  %118 = extractelement <4 x i64> %104, i32 2
  %119 = getelementptr inbounds <4 x i32>, <4 x i32>* %4, i64 0, i64 %118
  store i32 1, i32* %119, align 4
  br label %120

120:                                              ; preds = %117, %115
  %121 = extractelement <4 x i1> %102, i32 3
  br i1 %121, label %122, label %125

122:                                              ; preds = %120
  %123 = extractelement <4 x i64> %104, i32 3
  %124 = getelementptr inbounds <4 x i32>, <4 x i32>* %4, i64 0, i64 %123
  store i32 1, i32* %124, align 4
  br label %125

125:                                              ; preds = %122, %120
  %126 = extractelement <4 x i1> %103, i32 0
  br i1 %126, label %127, label %130

127:                                              ; preds = %125
  %128 = extractelement <4 x i64> %105, i32 0
  %129 = getelementptr inbounds <4 x i32>, <4 x i32>* %4, i64 0, i64 %128
  store i32 1, i32* %129, align 4
  br label %130

130:                                              ; preds = %127, %125
  %131 = extractelement <4 x i1> %103, i32 1
  br i1 %131, label %132, label %135

132:                                              ; preds = %130
  %133 = extractelement <4 x i64> %105, i32 1
  %134 = getelementptr inbounds <4 x i32>, <4 x i32>* %4, i64 0, i64 %133
  store i32 1, i32* %134, align 4
  br label %135

135:                                              ; preds = %132, %130
  %136 = extractelement <4 x i1> %103, i32 2
  br i1 %136, label %137, label %140

137:                                              ; preds = %135
  %138 = extractelement <4 x i64> %105, i32 2
  %139 = getelementptr inbounds <4 x i32>, <4 x i32>* %4, i64 0, i64 %138
  store i32 1, i32* %139, align 4
  br label %140

140:                                              ; preds = %137, %135
  %141 = extractelement <4 x i1> %103, i32 3
  br i1 %141, label %142, label %145

142:                                              ; preds = %140
  %143 = extractelement <4 x i64> %105, i32 3
  %144 = getelementptr inbounds <4 x i32>, <4 x i32>* %4, i64 0, i64 %143
  store i32 1, i32* %144, align 4
  br label %145

145:                                              ; preds = %142, %140
  %146 = add i64 %94, 8
  %147 = add <4 x i64> %95, <i64 8, i64 8, i64 8, i64 8>
  %148 = icmp eq i64 %146, %92
  br i1 %148, label %149, label %93, !llvm.loop !2

149:                                              ; preds = %145
  %150 = icmp eq i64 %92, %86
  br i1 %150, label %180, label %151

151:                                              ; preds = %149, %85
  %152 = phi i64 [ 0, %85 ], [ %92, %149 ]
  %153 = xor i64 %152, -1
  %154 = and i64 %86, 1
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %163, label %156

156:                                              ; preds = %151
  %157 = getelementptr inbounds i8, i8* %78, i64 %152
  %158 = load i8, i8* %157, align 1
  %159 = icmp eq i8 %158, 0
  br i1 %159, label %161, label %160

160:                                              ; preds = %156
  store i32 1, i32* %37, align 16
  br label %161

161:                                              ; preds = %160, %156
  %162 = or i64 %152, 1
  br label %163

163:                                              ; preds = %161, %151
  %164 = phi i64 [ %162, %161 ], [ %152, %151 ]
  %165 = sub nsw i64 0, %86
  %166 = icmp eq i64 %153, %165
  br i1 %166, label %180, label %167

167:                                              ; preds = %163, %338
  %168 = phi i64 [ %339, %338 ], [ %164, %163 ]
  %169 = getelementptr inbounds i8, i8* %78, i64 %168
  %170 = load i8, i8* %169, align 1
  %171 = icmp eq i8 %170, 0
  br i1 %171, label %175, label %172

172:                                              ; preds = %167
  %173 = and i64 %168, 3
  %174 = getelementptr inbounds <4 x i32>, <4 x i32>* %4, i64 0, i64 %173
  store i32 1, i32* %174, align 4
  br label %175

175:                                              ; preds = %167, %172
  %176 = add nuw nsw i64 %168, 1
  %177 = getelementptr inbounds i8, i8* %78, i64 %176
  %178 = load i8, i8* %177, align 1
  %179 = icmp eq i8 %178, 0
  br i1 %179, label %338, label %335

180:                                              ; preds = %163, %338, %149
  %181 = load i32, i32* %7, align 16
  %182 = load i32, i32* %8, align 4
  %183 = load i32, i32* %9, align 8
  br label %184

184:                                              ; preds = %180, %83
  %185 = phi i32 [ %183, %180 ], [ 0, %83 ]
  %186 = phi i32 [ %182, %180 ], [ 0, %83 ]
  %187 = phi i32 [ %181, %180 ], [ 0, %83 ]
  %188 = or i32 %186, %187
  %189 = or i32 %188, %185
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %192, label %191

191:                                              ; preds = %184
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %4, align 16
  br label %194

192:                                              ; preds = %184
  store <4 x i32> <i32 0, i32 0, i32 0, i32 1>, <4 x i32>* %4, align 16
  br label %194

193:                                              ; preds = %74
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %4, align 16
  br label %194

194:                                              ; preds = %191, %192, %193
  %195 = icmp sgt i32 %71, 0
  br i1 %195, label %196, label %245

196:                                              ; preds = %194
  %197 = zext i32 %71 to i64
  %198 = and i64 %197, 1
  %199 = icmp eq i32 %71, 1
  br i1 %199, label %226, label %200

200:                                              ; preds = %196
  %201 = sub nsw i64 %197, %198
  br label %202

202:                                              ; preds = %350, %200
  %203 = phi i64 [ 0, %200 ], [ %352, %350 ]
  %204 = phi i32 [ 0, %200 ], [ %351, %350 ]
  %205 = phi i64 [ %201, %200 ], [ %353, %350 ]
  %206 = and i64 %203, 2
  %207 = getelementptr inbounds <4 x i32>, <4 x i32>* %4, i64 0, i64 %206
  %208 = load i32, i32* %207, align 8
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %219, label %210

210:                                              ; preds = %202
  %211 = getelementptr inbounds i8, i8* %78, i64 %203
  %212 = load i8, i8* %211, align 1
  %213 = icmp ult i8 %212, 32
  br i1 %213, label %217, label %214

214:                                              ; preds = %210
  %215 = add nsw i32 %204, 1
  %216 = icmp ugt i8 %212, 126
  br i1 %216, label %217, label %219

217:                                              ; preds = %214, %210
  %218 = add nsw i32 %204, 4
  br label %219

219:                                              ; preds = %202, %214, %217
  %220 = phi i32 [ %218, %217 ], [ %215, %214 ], [ %204, %202 ]
  %221 = or i64 %203, 1
  %222 = and i64 %221, 3
  %223 = getelementptr inbounds <4 x i32>, <4 x i32>* %4, i64 0, i64 %222
  %224 = load i32, i32* %223, align 4
  %225 = icmp eq i32 %224, 0
  br i1 %225, label %350, label %341

226:                                              ; preds = %350, %196
  %227 = phi i32 [ undef, %196 ], [ %351, %350 ]
  %228 = phi i64 [ 0, %196 ], [ %352, %350 ]
  %229 = phi i32 [ 0, %196 ], [ %351, %350 ]
  %230 = icmp eq i64 %198, 0
  br i1 %230, label %245, label %231

231:                                              ; preds = %226
  %232 = and i64 %228, 3
  %233 = getelementptr inbounds <4 x i32>, <4 x i32>* %4, i64 0, i64 %232
  %234 = load i32, i32* %233, align 4
  %235 = icmp eq i32 %234, 0
  br i1 %235, label %245, label %236

236:                                              ; preds = %231
  %237 = getelementptr inbounds i8, i8* %78, i64 %228
  %238 = load i8, i8* %237, align 1
  %239 = icmp ult i8 %238, 32
  br i1 %239, label %243, label %240

240:                                              ; preds = %236
  %241 = add nsw i32 %229, 1
  %242 = icmp ugt i8 %238, 126
  br i1 %242, label %243, label %245

243:                                              ; preds = %240, %236
  %244 = add nsw i32 %229, 4
  br label %245

245:                                              ; preds = %226, %231, %240, %243, %194
  %246 = phi i32 [ 0, %194 ], [ %227, %226 ], [ %244, %243 ], [ %241, %240 ], [ %229, %231 ]
  %247 = add i32 %49, 2
  %248 = add i32 %247, %66
  %249 = add i32 %248, %246
  %250 = icmp sgt i32 %249, 1048576
  br i1 %250, label %251, label %252

251:                                              ; preds = %245
  call void @ERR_put_error(i32 11, i32 0, i32 135, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 153) #4
  br label %331

252:                                              ; preds = %245
  br i1 %34, label %260, label %253

253:                                              ; preds = %252
  %254 = add nsw i32 %249, 1
  %255 = sext i32 %254 to i64
  %256 = call i64 @BUF_MEM_grow(%struct.buf_mem_st* nonnull %26, i64 %255) #4
  %257 = icmp eq i64 %256, 0
  br i1 %257, label %329, label %258

258:                                              ; preds = %253
  %259 = load i8*, i8** %35, align 8
  br label %262

260:                                              ; preds = %252
  %261 = icmp slt i32 %249, %25
  br i1 %261, label %262, label %324

262:                                              ; preds = %260, %258
  %263 = phi i8* [ %259, %258 ], [ %1, %260 ]
  %264 = sext i32 %49 to i64
  %265 = getelementptr inbounds i8, i8* %263, i64 %264
  %266 = getelementptr inbounds i8, i8* %265, i64 1
  store i8 47, i8* %265, align 1
  %267 = and i64 %65, 4294967295
  %268 = icmp eq i64 %267, 0
  br i1 %268, label %270, label %269

269:                                              ; preds = %262
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %266, i8* align 1 %64, i64 %267, i1 false) #4
  br label %270

270:                                              ; preds = %262, %269
  %271 = shl i64 %65, 32
  %272 = ashr exact i64 %271, 32
  %273 = getelementptr inbounds i8, i8* %266, i64 %272
  %274 = getelementptr inbounds i8, i8* %273, i64 1
  store i8 61, i8* %273, align 1
  %275 = load %struct.asn1_string_st*, %struct.asn1_string_st** %68, align 8
  %276 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %275, i64 0, i32 2
  %277 = load i8*, i8** %276, align 8
  br i1 %195, label %278, label %311

278:                                              ; preds = %270
  %279 = zext i32 %71 to i64
  br label %280

280:                                              ; preds = %307, %278
  %281 = phi i64 [ 0, %278 ], [ %309, %307 ]
  %282 = phi i8* [ %274, %278 ], [ %308, %307 ]
  %283 = and i64 %281, 3
  %284 = getelementptr inbounds <4 x i32>, <4 x i32>* %4, i64 0, i64 %283
  %285 = load i32, i32* %284, align 4
  %286 = icmp eq i32 %285, 0
  br i1 %286, label %307, label %287

287:                                              ; preds = %280
  %288 = getelementptr inbounds i8, i8* %277, i64 %281
  %289 = load i8, i8* %288, align 1
  %290 = zext i8 %289 to i32
  %291 = add i8 %289, -32
  %292 = icmp ugt i8 %291, 94
  %293 = getelementptr inbounds i8, i8* %282, i64 1
  br i1 %292, label %294, label %306

294:                                              ; preds = %287
  store i8 92, i8* %282, align 1
  %295 = getelementptr inbounds i8, i8* %282, i64 2
  store i8 120, i8* %293, align 1
  %296 = lshr i32 %290, 4
  %297 = zext i32 %296 to i64
  %298 = getelementptr inbounds [17 x i8], [17 x i8]* @X509_NAME_oneline.hex, i64 0, i64 %297
  %299 = load i8, i8* %298, align 1
  %300 = getelementptr inbounds i8, i8* %282, i64 3
  store i8 %299, i8* %295, align 1
  %301 = and i32 %290, 15
  %302 = zext i32 %301 to i64
  %303 = getelementptr inbounds [17 x i8], [17 x i8]* @X509_NAME_oneline.hex, i64 0, i64 %302
  %304 = load i8, i8* %303, align 1
  %305 = getelementptr inbounds i8, i8* %282, i64 4
  store i8 %304, i8* %300, align 1
  br label %307

306:                                              ; preds = %287
  store i8 %289, i8* %282, align 1
  br label %307

307:                                              ; preds = %280, %294, %306
  %308 = phi i8* [ %305, %294 ], [ %293, %306 ], [ %282, %280 ]
  %309 = add nuw nsw i64 %281, 1
  %310 = icmp eq i64 %309, %279
  br i1 %310, label %311, label %280

311:                                              ; preds = %307, %270
  %312 = phi i8* [ %274, %270 ], [ %308, %307 ]
  store i8 0, i8* %312, align 1
  %313 = add nuw i64 %50, 1
  %314 = load %struct.stack_st*, %struct.stack_st** %29, align 8
  %315 = call i64 @sk_num(%struct.stack_st* %314) #4
  %316 = icmp ult i64 %313, %315
  br i1 %316, label %48, label %317

317:                                              ; preds = %311, %28
  %318 = phi i64 [ 0, %28 ], [ %313, %311 ]
  %319 = icmp eq %struct.buf_mem_st* %26, null
  br i1 %319, label %324, label %320

320:                                              ; preds = %317
  %321 = getelementptr inbounds %struct.buf_mem_st, %struct.buf_mem_st* %26, i64 0, i32 1
  %322 = load i8*, i8** %321, align 8
  %323 = bitcast %struct.buf_mem_st* %26 to i8*
  call void @OPENSSL_free(i8* nonnull %323) #4
  br label %324

324:                                              ; preds = %260, %317, %320
  %325 = phi i64 [ %318, %320 ], [ %318, %317 ], [ %50, %260 ]
  %326 = phi i8* [ %322, %320 ], [ %1, %317 ], [ %1, %260 ]
  %327 = icmp eq i64 %325, 0
  br i1 %327, label %328, label %333

328:                                              ; preds = %324
  store i8 0, i8* %326, align 1
  br label %333

329:                                              ; preds = %253, %16, %13
  %330 = phi %struct.buf_mem_st* [ null, %13 ], [ %14, %16 ], [ %26, %253 ]
  call void @ERR_put_error(i32 11, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 194) #4
  br label %331

331:                                              ; preds = %329, %251, %73
  %332 = phi %struct.buf_mem_st* [ %330, %329 ], [ %26, %73 ], [ %26, %251 ]
  call void @BUF_MEM_free(%struct.buf_mem_st* %332) #4
  br label %333

333:                                              ; preds = %324, %328, %22, %331, %44
  %334 = phi i8* [ null, %331 ], [ %45, %44 ], [ null, %22 ], [ %326, %328 ], [ %326, %324 ]
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %10) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #4
  ret i8* %334

335:                                              ; preds = %175
  %336 = and i64 %176, 3
  %337 = getelementptr inbounds <4 x i32>, <4 x i32>* %4, i64 0, i64 %336
  store i32 1, i32* %337, align 4
  br label %338

338:                                              ; preds = %335, %175
  %339 = add nuw nsw i64 %168, 2
  %340 = icmp eq i64 %339, %86
  br i1 %340, label %180, label %167, !llvm.loop !4

341:                                              ; preds = %219
  %342 = getelementptr inbounds i8, i8* %78, i64 %221
  %343 = load i8, i8* %342, align 1
  %344 = icmp ult i8 %343, 32
  br i1 %344, label %348, label %345

345:                                              ; preds = %341
  %346 = add nsw i32 %220, 1
  %347 = icmp ugt i8 %343, 126
  br i1 %347, label %348, label %350

348:                                              ; preds = %345, %341
  %349 = add nsw i32 %220, 4
  br label %350

350:                                              ; preds = %348, %345, %219
  %351 = phi i32 [ %349, %348 ], [ %346, %345 ], [ %220, %219 ]
  %352 = add nuw nsw i64 %203, 2
  %353 = add i64 %205, -2
  %354 = icmp eq i64 %353, 0
  br i1 %354, label %226, label %202
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare %struct.buf_mem_st* @BUF_MEM_new() local_unnamed_addr #2

declare i64 @BUF_MEM_grow(%struct.buf_mem_st*, i64) local_unnamed_addr #2

declare void @OPENSSL_free(i8*) local_unnamed_addr #2

declare i64 @OPENSSL_strlcpy(i8*, i8*, i64) local_unnamed_addr #2

declare i32 @OBJ_obj2nid(%struct.asn1_object_st*) local_unnamed_addr #2

declare i8* @OBJ_nid2sn(i32) local_unnamed_addr #2

declare i32 @i2t_ASN1_OBJECT(i8*, i32, %struct.asn1_object_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #3

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #2

declare void @BUF_MEM_free(%struct.buf_mem_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i64 @sk_num(%struct.stack_st*) local_unnamed_addr #2

declare i8* @sk_value(%struct.stack_st*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
