; ModuleID = '../../third_party/skia/modules/sksg/src/SkSGPaint.cpp'
source_filename = "../../third_party/skia/modules/sksg/src/SkSGPaint.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkPaint = type <{ %class.sk_sp, %class.sk_sp.1, %class.sk_sp.2, %class.sk_sp.3, %class.sk_sp.4, %struct.SkRGBA4f, float, float, %union.anon.5, [4 x i8] }>
%class.sk_sp = type { %class.SkPathEffect* }
%class.SkPathEffect = type opaque
%class.sk_sp.1 = type { %class.SkShader* }
%class.SkShader = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.2 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type opaque
%class.sk_sp.3 = type { %class.SkColorFilter* }
%class.SkColorFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.sk_sp.4 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%struct.SkRGBA4f = type { float, float, float, float }
%union.anon.5 = type { %struct.anon }
%struct.anon = type { i32 }
%"class.sksg::Color" = type { %"class.sksg::PaintNode", i32, [4 x i8] }
%"class.sksg::PaintNode" = type { %"class.sksg::Node.base", float, float, float, i8, i32, i8, i8, i32 }
%"class.sksg::Node.base" = type <{ %class.SkRefCnt.base, [4 x i8], %union.anon, %struct.SkRect, i16 }>
%union.anon = type { %"class.sksg::Node"* }
%"class.sksg::Node" = type <{ %class.SkRefCnt.base, [4 x i8], %union.anon, %struct.SkRect, i16, [6 x i8] }>
%struct.SkRect = type { float, float, float, float }
%"class.sksg::ShaderPaint" = type { %"class.sksg::PaintNode", %class.sk_sp.8 }
%class.sk_sp.8 = type { %"class.sksg::Shader"* }
%"class.sksg::Shader" = type { %"class.sksg::Node.base", %class.sk_sp.1 }
%class.sk_sp.6 = type { %"class.sksg::Color"* }
%"class.sksg::InvalidationController" = type opaque
%class.SkMatrix = type { [9 x float], i32 }
%class.sk_sp.7 = type { %"class.sksg::ShaderPaint"* }
%class.sk_sp.9 = type { %"class.sksg::Node"* }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>

$_ZN4sksg5ColorD0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZN4sksg9PaintNodeD0Ev = comdat any

$_ZTVN4sksg9PaintNodeE = comdat any

@_ZTVN4sksg9PaintNodeE = linkonce_odr hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sksg::Node"*)* @_ZN4sksg4NodeD2Ev to i8*), i8* bitcast (void (%"class.sksg::PaintNode"*)* @_ZN4sksg9PaintNodeD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*), i8* bitcast (void ()* @__cxa_pure_virtual to i8*)] }, comdat, align 8
@__const._ZNK4sksg9PaintNode9makePaintEv.paint = private unnamed_addr constant %class.SkPaint <{ %class.sk_sp { %class.SkPathEffect* inttoptr (i64 -6148914691236517206 to %class.SkPathEffect*) }, %class.sk_sp.1 { %class.SkShader* inttoptr (i64 -6148914691236517206 to %class.SkShader*) }, %class.sk_sp.2 { %class.SkMaskFilter* inttoptr (i64 -6148914691236517206 to %class.SkMaskFilter*) }, %class.sk_sp.3 { %class.SkColorFilter* inttoptr (i64 -6148914691236517206 to %class.SkColorFilter*) }, %class.sk_sp.4 { %class.SkImageFilter* inttoptr (i64 -6148914691236517206 to %class.SkImageFilter*) }, %struct.SkRGBA4f { float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000 }, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, %union.anon.5 { %struct.anon { i32 -1431655766 } }, [4 x i8] c"\AA\AA\AA\AA" }>, align 8
@_ZTVN4sksg5ColorE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sksg::Node"*)* @_ZN4sksg4NodeD2Ev to i8*), i8* bitcast (void (%"class.sksg::Color"*)* @_ZN4sksg5ColorD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%"class.sksg::Color"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)* @_ZN4sksg5Color12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix to i8*), i8* bitcast (void (%"class.sksg::Color"*, %class.SkPaint*)* @_ZNK4sksg5Color14onApplyToPaintEP7SkPaint to i8*)] }, align 8
@_ZTVN4sksg11ShaderPaintE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sksg::ShaderPaint"*)* @_ZN4sksg11ShaderPaintD2Ev to i8*), i8* bitcast (void (%"class.sksg::ShaderPaint"*)* @_ZN4sksg11ShaderPaintD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast ({ <2 x float>, <2 x float> } (%"class.sksg::ShaderPaint"*, %"class.sksg::InvalidationController"*, %class.SkMatrix*)* @_ZN4sksg11ShaderPaint12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix to i8*), i8* bitcast (void (%"class.sksg::ShaderPaint"*, %class.SkPaint*)* @_ZNK4sksg11ShaderPaint14onApplyToPaintEP7SkPaint to i8*)] }, align 8

@_ZN4sksg5ColorC1Ej = hidden unnamed_addr alias void (%"class.sksg::Color"*, i32), void (%"class.sksg::Color"*, i32)* @_ZN4sksg5ColorC2Ej
@_ZN4sksg11ShaderPaintC1E5sk_spINS_6ShaderEE = hidden unnamed_addr alias void (%"class.sksg::ShaderPaint"*, %class.sk_sp.8*), void (%"class.sksg::ShaderPaint"*, %class.sk_sp.8*)* @_ZN4sksg11ShaderPaintC2E5sk_spINS_6ShaderEE
@_ZN4sksg11ShaderPaintD1Ev = hidden unnamed_addr alias void (%"class.sksg::ShaderPaint"*), void (%"class.sksg::ShaderPaint"*)* @_ZN4sksg11ShaderPaintD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg9PaintNodeC2Ev(%"class.sksg::PaintNode"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.sksg::PaintNode"* %0 to %"class.sksg::Node"*
  tail call void @_ZN4sksg4NodeC2Ej(%"class.sksg::Node"* %2, i32 1) #10
  %3 = getelementptr inbounds %"class.sksg::PaintNode", %"class.sksg::PaintNode"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4sksg9PaintNodeE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %"class.sksg::PaintNode", %"class.sksg::PaintNode"* %0, i64 0, i32 1
  store float 1.000000e+00, float* %4, align 4
  %5 = getelementptr inbounds %"class.sksg::PaintNode", %"class.sksg::PaintNode"* %0, i64 0, i32 2
  store float 1.000000e+00, float* %5, align 8
  %6 = getelementptr inbounds %"class.sksg::PaintNode", %"class.sksg::PaintNode"* %0, i64 0, i32 3
  store float 4.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds %"class.sksg::PaintNode", %"class.sksg::PaintNode"* %0, i64 0, i32 4
  store i8 0, i8* %7, align 8
  %8 = getelementptr inbounds %"class.sksg::PaintNode", %"class.sksg::PaintNode"* %0, i64 0, i32 5
  store i32 3, i32* %8, align 4
  %9 = getelementptr inbounds %"class.sksg::PaintNode", %"class.sksg::PaintNode"* %0, i64 0, i32 6
  store i8 0, i8* %9, align 8
  %10 = getelementptr inbounds %"class.sksg::PaintNode", %"class.sksg::PaintNode"* %0, i64 0, i32 7
  store i8 0, i8* %10, align 1
  %11 = getelementptr inbounds %"class.sksg::PaintNode", %"class.sksg::PaintNode"* %0, i64 0, i32 8
  store i32 0, i32* %11, align 4
  ret void
}

declare void @_ZN4sksg4NodeC2Ej(%"class.sksg::Node"*, i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4sksg9PaintNode9makePaintEv(%class.SkPaint* noalias sret, %"class.sksg::PaintNode"*) local_unnamed_addr #0 align 2 {
  %3 = bitcast %class.SkPaint* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 bitcast (%class.SkPaint* @__const._ZNK4sksg9PaintNode9makePaintEv.paint to i8*), i64 72, i1 false)
  tail call void @_ZN7SkPaintC1Ev(%class.SkPaint* %0) #10
  %4 = getelementptr inbounds %"class.sksg::PaintNode", %"class.sksg::PaintNode"* %1, i64 0, i32 4
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = zext i8 %5 to i32
  %7 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %0, i64 0, i32 8, i32 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = and i32 %8, -261122
  %10 = or i32 %9, %6
  %11 = getelementptr inbounds %"class.sksg::PaintNode", %"class.sksg::PaintNode"* %1, i64 0, i32 5
  %12 = load i32, i32* %11, align 4
  %13 = shl i32 %12, 10
  %14 = and i32 %13, 261120
  %15 = or i32 %14, %10
  store i32 %15, i32* %7, align 8
  %16 = getelementptr inbounds %"class.sksg::PaintNode", %"class.sksg::PaintNode"* %1, i64 0, i32 6
  %17 = load i8, i8* %16, align 8
  tail call void @_ZN7SkPaint8setStyleENS_5StyleE(%class.SkPaint* %0, i8 zeroext %17) #10
  %18 = getelementptr inbounds %"class.sksg::PaintNode", %"class.sksg::PaintNode"* %1, i64 0, i32 2
  %19 = load float, float* %18, align 8
  tail call void @_ZN7SkPaint14setStrokeWidthEf(%class.SkPaint* %0, float %19) #10
  %20 = getelementptr inbounds %"class.sksg::PaintNode", %"class.sksg::PaintNode"* %1, i64 0, i32 3
  %21 = load float, float* %20, align 4
  tail call void @_ZN7SkPaint14setStrokeMiterEf(%class.SkPaint* %0, float %21) #10
  %22 = getelementptr inbounds %"class.sksg::PaintNode", %"class.sksg::PaintNode"* %1, i64 0, i32 7
  %23 = load i8, i8* %22, align 1
  tail call void @_ZN7SkPaint13setStrokeJoinENS_4JoinE(%class.SkPaint* %0, i8 zeroext %23) #10
  %24 = getelementptr inbounds %"class.sksg::PaintNode", %"class.sksg::PaintNode"* %1, i64 0, i32 8
  %25 = load i32, i32* %24, align 4
  tail call void @_ZN7SkPaint12setStrokeCapENS_3CapE(%class.SkPaint* %0, i32 %25) #10
  %26 = bitcast %"class.sksg::PaintNode"* %1 to void (%"class.sksg::PaintNode"*, %class.SkPaint*)***
  %27 = load void (%"class.sksg::PaintNode"*, %class.SkPaint*)**, void (%"class.sksg::PaintNode"*, %class.SkPaint*)*** %26, align 8
  %28 = getelementptr inbounds void (%"class.sksg::PaintNode"*, %class.SkPaint*)*, void (%"class.sksg::PaintNode"*, %class.SkPaint*)** %27, i64 4
  %29 = load void (%"class.sksg::PaintNode"*, %class.SkPaint*)*, void (%"class.sksg::PaintNode"*, %class.SkPaint*)** %28, align 8
  tail call void %29(%"class.sksg::PaintNode"* %1, %class.SkPaint* %0) #10
  %30 = getelementptr inbounds %class.SkPaint, %class.SkPaint* %0, i64 0, i32 5, i32 3
  %31 = load float, float* %30, align 4
  %32 = fmul float %31, 2.550000e+02
  %33 = fadd float %32, 5.000000e-01
  %34 = tail call float @llvm.floor.f32(float %33) #10
  %35 = fcmp olt float %34, 0x41DFFFFFE0000000
  %36 = select i1 %35, float %34, float 0x41DFFFFFE0000000
  %37 = fcmp ogt float %36, 0xC1DFFFFFE0000000
  %38 = select i1 %37, float %36, float 0xC1DFFFFFE0000000
  %39 = fptosi float %38 to i32
  %40 = trunc i32 %39 to i8
  %41 = uitofp i8 %40 to float
  %42 = getelementptr inbounds %"class.sksg::PaintNode", %"class.sksg::PaintNode"* %1, i64 0, i32 1
  %43 = load float, float* %42, align 4
  %44 = fcmp ogt float %43, 1.000000e+00
  %45 = select i1 %44, float 1.000000e+00, float %43
  %46 = fcmp ogt float %45, 0.000000e+00
  %47 = select i1 %46, float %45, float 0.000000e+00
  %48 = fmul float %47, %41
  %49 = fadd float %48, 5.000000e-01
  %50 = tail call float @llvm.floor.f32(float %49)
  %51 = fcmp olt float %50, 0x41DFFFFFE0000000
  %52 = select i1 %51, float %50, float 0x41DFFFFFE0000000
  %53 = fcmp ogt float %52, 0xC1DFFFFFE0000000
  %54 = select i1 %53, float %52, float 0xC1DFFFFFE0000000
  %55 = fptosi float %54 to i32
  %56 = uitofp i32 %55 to float
  %57 = fmul float %56, 0x3F70101020000000
  tail call void @_ZN7SkPaint9setAlphafEf(%class.SkPaint* %0, float %57) #10
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN7SkPaintC1Ev(%class.SkPaint*) unnamed_addr #1

declare void @_ZN7SkPaint8setStyleENS_5StyleE(%class.SkPaint*, i8 zeroext) local_unnamed_addr #1

declare void @_ZN7SkPaint14setStrokeWidthEf(%class.SkPaint*, float) local_unnamed_addr #1

declare void @_ZN7SkPaint14setStrokeMiterEf(%class.SkPaint*, float) local_unnamed_addr #1

declare void @_ZN7SkPaint13setStrokeJoinENS_4JoinE(%class.SkPaint*, i8 zeroext) local_unnamed_addr #1

declare void @_ZN7SkPaint12setStrokeCapENS_3CapE(%class.SkPaint*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg5Color4MakeEj(%class.sk_sp.6* noalias nocapture sret, i32) local_unnamed_addr #0 align 2 {
  %3 = tail call i8* @_Znwm(i64 80) #11
  %4 = bitcast i8* %3 to %"class.sksg::Node"*
  tail call void @_ZN4sksg4NodeC2Ej(%"class.sksg::Node"* nonnull %4, i32 1) #10
  %5 = bitcast i8* %3 to i32 (...)***
  %6 = getelementptr inbounds i8, i8* %3, i64 44
  %7 = bitcast i8* %6 to float*
  store float 1.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds i8, i8* %3, i64 48
  %9 = bitcast i8* %8 to float*
  store float 1.000000e+00, float* %9, align 8
  %10 = getelementptr inbounds i8, i8* %3, i64 52
  %11 = bitcast i8* %10 to float*
  store float 4.000000e+00, float* %11, align 4
  %12 = getelementptr inbounds i8, i8* %3, i64 56
  store i8 0, i8* %12, align 8
  %13 = getelementptr inbounds i8, i8* %3, i64 60
  %14 = bitcast i8* %13 to i32*
  store i32 3, i32* %14, align 4
  %15 = getelementptr inbounds i8, i8* %3, i64 64
  store i8 0, i8* %15, align 8
  %16 = getelementptr inbounds i8, i8* %3, i64 65
  store i8 0, i8* %16, align 1
  %17 = getelementptr inbounds i8, i8* %3, i64 68
  %18 = bitcast i8* %17 to i32*
  store i32 0, i32* %18, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4sksg5ColorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %19 = getelementptr inbounds i8, i8* %3, i64 72
  %20 = bitcast i8* %19 to i32*
  store i32 %1, i32* %20, align 8
  %21 = bitcast %class.sk_sp.6* %0 to i8**
  store i8* %3, i8** %21, align 8
  ret void
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg5ColorC2Ej(%"class.sksg::Color"*, i32) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.sksg::Color"* %0 to %"class.sksg::Node"*
  tail call void @_ZN4sksg4NodeC2Ej(%"class.sksg::Node"* %3, i32 1) #10
  %4 = getelementptr inbounds %"class.sksg::Color", %"class.sksg::Color"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = getelementptr inbounds %"class.sksg::Color", %"class.sksg::Color"* %0, i64 0, i32 0, i32 1
  store float 1.000000e+00, float* %5, align 4
  %6 = getelementptr inbounds %"class.sksg::Color", %"class.sksg::Color"* %0, i64 0, i32 0, i32 2
  store float 1.000000e+00, float* %6, align 8
  %7 = getelementptr inbounds %"class.sksg::Color", %"class.sksg::Color"* %0, i64 0, i32 0, i32 3
  store float 4.000000e+00, float* %7, align 4
  %8 = getelementptr inbounds %"class.sksg::Color", %"class.sksg::Color"* %0, i64 0, i32 0, i32 4
  store i8 0, i8* %8, align 8
  %9 = getelementptr inbounds %"class.sksg::Color", %"class.sksg::Color"* %0, i64 0, i32 0, i32 5
  store i32 3, i32* %9, align 4
  %10 = getelementptr inbounds %"class.sksg::Color", %"class.sksg::Color"* %0, i64 0, i32 0, i32 6
  store i8 0, i8* %10, align 8
  %11 = getelementptr inbounds %"class.sksg::Color", %"class.sksg::Color"* %0, i64 0, i32 0, i32 7
  store i8 0, i8* %11, align 1
  %12 = getelementptr inbounds %"class.sksg::Color", %"class.sksg::Color"* %0, i64 0, i32 0, i32 8
  store i32 0, i32* %12, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4sksg5ColorE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8
  %13 = getelementptr inbounds %"class.sksg::Color", %"class.sksg::Color"* %0, i64 0, i32 1
  store i32 %1, i32* %13, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN4sksg5Color12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::Color"* nocapture readnone, %"class.sksg::InvalidationController"* nocapture readnone, %class.SkMatrix* nocapture readnone dereferenceable(40)) unnamed_addr #5 align 2 {
  ret { <2 x float>, <2 x float> } zeroinitializer
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4sksg5Color14onApplyToPaintEP7SkPaint(%"class.sksg::Color"* nocapture readonly, %class.SkPaint*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.sksg::Color", %"class.sksg::Color"* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 8
  tail call void @_ZN7SkPaint8setColorEj(%class.SkPaint* %1, i32 %4) #10
  ret void
}

declare void @_ZN7SkPaint8setColorEj(%class.SkPaint*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg11ShaderPaint4MakeE5sk_spINS_6ShaderEE(%class.sk_sp.7* noalias nocapture sret, %class.sk_sp.8* nocapture) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.sk_sp.9, align 8
  %4 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %1, i64 0, i32 0
  %5 = load %"class.sksg::Shader"*, %"class.sksg::Shader"** %4, align 8
  %6 = icmp eq %"class.sksg::Shader"* %5, null
  br i1 %6, label %46, label %7

7:                                                ; preds = %2
  %8 = ptrtoint %"class.sksg::Shader"* %5 to i64
  %9 = tail call i8* @_Znwm(i64 80) #11
  store %"class.sksg::Shader"* null, %"class.sksg::Shader"** %4, align 8
  %10 = bitcast i8* %9 to %"class.sksg::Node"*
  tail call void @_ZN4sksg4NodeC2Ej(%"class.sksg::Node"* nonnull %10, i32 1) #10
  %11 = bitcast i8* %9 to i32 (...)***
  %12 = getelementptr inbounds i8, i8* %9, i64 44
  %13 = bitcast i8* %12 to float*
  store float 1.000000e+00, float* %13, align 4
  %14 = getelementptr inbounds i8, i8* %9, i64 48
  %15 = bitcast i8* %14 to float*
  store float 1.000000e+00, float* %15, align 8
  %16 = getelementptr inbounds i8, i8* %9, i64 52
  %17 = bitcast i8* %16 to float*
  store float 4.000000e+00, float* %17, align 4
  %18 = getelementptr inbounds i8, i8* %9, i64 56
  store i8 0, i8* %18, align 8
  %19 = getelementptr inbounds i8, i8* %9, i64 60
  %20 = bitcast i8* %19 to i32*
  store i32 3, i32* %20, align 4
  %21 = getelementptr inbounds i8, i8* %9, i64 64
  store i8 0, i8* %21, align 8
  %22 = getelementptr inbounds i8, i8* %9, i64 65
  store i8 0, i8* %22, align 1
  %23 = getelementptr inbounds i8, i8* %9, i64 68
  %24 = bitcast i8* %23 to i32*
  store i32 0, i32* %24, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4sksg11ShaderPaintE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  %25 = getelementptr inbounds i8, i8* %9, i64 72
  %26 = bitcast i8* %25 to i64*
  store i64 %8, i64* %26, align 8
  %27 = bitcast %class.sk_sp.9* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #10
  %28 = getelementptr inbounds %"class.sksg::Shader", %"class.sksg::Shader"* %5, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = atomicrmw add i32* %28, i32 1 monotonic
  %30 = bitcast %class.sk_sp.9* %3 to %"class.sksg::Shader"**
  store %"class.sksg::Shader"* %5, %"class.sksg::Shader"** %30, align 8
  call void @_ZN4sksg4Node12observeInvalERK5sk_spIS0_E(%"class.sksg::Node"* nonnull %10, %class.sk_sp.9* nonnull dereferenceable(8) %3) #10
  %31 = getelementptr inbounds %class.sk_sp.9, %class.sk_sp.9* %3, i64 0, i32 0
  %32 = load %"class.sksg::Node"*, %"class.sksg::Node"** %31, align 8
  %33 = icmp eq %"class.sksg::Node"* %32, null
  br i1 %33, label %44, label %34

34:                                               ; preds = %7
  %35 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %32, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = atomicrmw add i32* %35, i32 -1 acq_rel
  %37 = icmp eq i32 %36, 1
  br i1 %37, label %38, label %44

38:                                               ; preds = %34
  %39 = bitcast %"class.sksg::Node"* %32 to %class.SkRefCntBase*
  %40 = bitcast %"class.sksg::Node"* %32 to void (%class.SkRefCntBase*)***
  %41 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %40, align 8
  %42 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %41, i64 2
  %43 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %42, align 8
  call void %43(%class.SkRefCntBase* nonnull %39) #10
  br label %44

44:                                               ; preds = %38, %34, %7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #10
  %45 = bitcast %class.sk_sp.7* %0 to i8**
  store i8* %9, i8** %45, align 8
  br label %48

46:                                               ; preds = %2
  %47 = getelementptr inbounds %class.sk_sp.7, %class.sk_sp.7* %0, i64 0, i32 0
  store %"class.sksg::ShaderPaint"* null, %"class.sksg::ShaderPaint"** %47, align 8
  br label %48

48:                                               ; preds = %46, %44
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg11ShaderPaintC2E5sk_spINS_6ShaderEE(%"class.sksg::ShaderPaint"*, %class.sk_sp.8* nocapture) unnamed_addr #0 align 2 {
  %3 = alloca %class.sk_sp.9, align 8
  %4 = bitcast %"class.sksg::ShaderPaint"* %0 to %"class.sksg::Node"*
  tail call void @_ZN4sksg4NodeC2Ej(%"class.sksg::Node"* %4, i32 1) #10
  %5 = getelementptr inbounds %"class.sksg::ShaderPaint", %"class.sksg::ShaderPaint"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.sksg::ShaderPaint", %"class.sksg::ShaderPaint"* %0, i64 0, i32 0, i32 1
  store float 1.000000e+00, float* %6, align 4
  %7 = getelementptr inbounds %"class.sksg::ShaderPaint", %"class.sksg::ShaderPaint"* %0, i64 0, i32 0, i32 2
  store float 1.000000e+00, float* %7, align 8
  %8 = getelementptr inbounds %"class.sksg::ShaderPaint", %"class.sksg::ShaderPaint"* %0, i64 0, i32 0, i32 3
  store float 4.000000e+00, float* %8, align 4
  %9 = getelementptr inbounds %"class.sksg::ShaderPaint", %"class.sksg::ShaderPaint"* %0, i64 0, i32 0, i32 4
  store i8 0, i8* %9, align 8
  %10 = getelementptr inbounds %"class.sksg::ShaderPaint", %"class.sksg::ShaderPaint"* %0, i64 0, i32 0, i32 5
  store i32 3, i32* %10, align 4
  %11 = getelementptr inbounds %"class.sksg::ShaderPaint", %"class.sksg::ShaderPaint"* %0, i64 0, i32 0, i32 6
  store i8 0, i8* %11, align 8
  %12 = getelementptr inbounds %"class.sksg::ShaderPaint", %"class.sksg::ShaderPaint"* %0, i64 0, i32 0, i32 7
  store i8 0, i8* %12, align 1
  %13 = getelementptr inbounds %"class.sksg::ShaderPaint", %"class.sksg::ShaderPaint"* %0, i64 0, i32 0, i32 8
  store i32 0, i32* %13, align 4
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4sksg11ShaderPaintE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %14 = getelementptr inbounds %"class.sksg::ShaderPaint", %"class.sksg::ShaderPaint"* %0, i64 0, i32 1
  %15 = getelementptr inbounds %class.sk_sp.8, %class.sk_sp.8* %1, i64 0, i32 0
  %16 = bitcast %class.sk_sp.8* %1 to i64*
  %17 = load i64, i64* %16, align 8
  store %"class.sksg::Shader"* null, %"class.sksg::Shader"** %15, align 8
  %18 = bitcast %class.sk_sp.8* %14 to i64*
  store i64 %17, i64* %18, align 8
  %19 = bitcast %class.sk_sp.9* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #10
  %20 = inttoptr i64 %17 to %"class.sksg::Shader"*
  %21 = icmp eq i64 %17, 0
  br i1 %21, label %25, label %22

22:                                               ; preds = %2
  %23 = getelementptr inbounds %"class.sksg::Shader", %"class.sksg::Shader"* %20, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = atomicrmw add i32* %23, i32 1 monotonic
  br label %25

25:                                               ; preds = %2, %22
  %26 = bitcast %class.sk_sp.9* %3 to %"class.sksg::Shader"**
  store %"class.sksg::Shader"* %20, %"class.sksg::Shader"** %26, align 8
  call void @_ZN4sksg4Node12observeInvalERK5sk_spIS0_E(%"class.sksg::Node"* %4, %class.sk_sp.9* nonnull dereferenceable(8) %3) #10
  %27 = getelementptr inbounds %class.sk_sp.9, %class.sk_sp.9* %3, i64 0, i32 0
  %28 = load %"class.sksg::Node"*, %"class.sksg::Node"** %27, align 8
  %29 = icmp eq %"class.sksg::Node"* %28, null
  br i1 %29, label %40, label %30

30:                                               ; preds = %25
  %31 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %28, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = atomicrmw add i32* %31, i32 -1 acq_rel
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %40

34:                                               ; preds = %30
  %35 = bitcast %"class.sksg::Node"* %28 to %class.SkRefCntBase*
  %36 = bitcast %"class.sksg::Node"* %28 to void (%class.SkRefCntBase*)***
  %37 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %36, align 8
  %38 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %37, i64 2
  %39 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %38, align 8
  call void %39(%class.SkRefCntBase* nonnull %35) #10
  br label %40

40:                                               ; preds = %25, %30, %34
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #10
  ret void
}

declare void @_ZN4sksg4Node12observeInvalERK5sk_spIS0_E(%"class.sksg::Node"*, %class.sk_sp.9* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg11ShaderPaintD2Ev(%"class.sksg::ShaderPaint"*) unnamed_addr #0 align 2 {
  %2 = alloca %class.sk_sp.9, align 8
  %3 = getelementptr inbounds %"class.sksg::ShaderPaint", %"class.sksg::ShaderPaint"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4sksg11ShaderPaintE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = bitcast %"class.sksg::ShaderPaint"* %0 to %"class.sksg::Node"*
  %5 = bitcast %class.sk_sp.9* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.sksg::ShaderPaint", %"class.sksg::ShaderPaint"* %0, i64 0, i32 1, i32 0
  %7 = load %"class.sksg::Shader"*, %"class.sksg::Shader"** %6, align 8
  %8 = icmp eq %"class.sksg::Shader"* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.sksg::Shader", %"class.sksg::Shader"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw add i32* %10, i32 1 monotonic
  br label %12

12:                                               ; preds = %1, %9
  %13 = bitcast %class.sk_sp.9* %2 to %"class.sksg::Shader"**
  store %"class.sksg::Shader"* %7, %"class.sksg::Shader"** %13, align 8
  call void @_ZN4sksg4Node14unobserveInvalERK5sk_spIS0_E(%"class.sksg::Node"* %4, %class.sk_sp.9* nonnull dereferenceable(8) %2) #10
  %14 = getelementptr inbounds %class.sk_sp.9, %class.sk_sp.9* %2, i64 0, i32 0
  %15 = load %"class.sksg::Node"*, %"class.sksg::Node"** %14, align 8
  %16 = icmp eq %"class.sksg::Node"* %15, null
  br i1 %16, label %27, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %15, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw add i32* %18, i32 -1 acq_rel
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %27

21:                                               ; preds = %17
  %22 = bitcast %"class.sksg::Node"* %15 to %class.SkRefCntBase*
  %23 = bitcast %"class.sksg::Node"* %15 to void (%class.SkRefCntBase*)***
  %24 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %23, align 8
  %25 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %24, i64 2
  %26 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %25, align 8
  call void %26(%class.SkRefCntBase* nonnull %22) #10
  br label %27

27:                                               ; preds = %12, %17, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %28 = load %"class.sksg::Shader"*, %"class.sksg::Shader"** %6, align 8
  %29 = icmp eq %"class.sksg::Shader"* %28, null
  br i1 %29, label %40, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.sksg::Shader", %"class.sksg::Shader"* %28, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = atomicrmw add i32* %31, i32 -1 acq_rel
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %40

34:                                               ; preds = %30
  %35 = bitcast %"class.sksg::Shader"* %28 to %class.SkRefCntBase*
  %36 = bitcast %"class.sksg::Shader"* %28 to void (%class.SkRefCntBase*)***
  %37 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %36, align 8
  %38 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %37, i64 2
  %39 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %38, align 8
  call void %39(%class.SkRefCntBase* nonnull %35) #10
  br label %40

40:                                               ; preds = %27, %30, %34
  call void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"* %4) #10
  ret void
}

declare void @_ZN4sksg4Node14unobserveInvalERK5sk_spIS0_E(%"class.sksg::Node"*, %class.sk_sp.9* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN4sksg11ShaderPaintD0Ev(%"class.sksg::ShaderPaint"*) unnamed_addr #0 align 2 {
  %2 = alloca %class.sk_sp.9, align 8
  %3 = getelementptr inbounds %"class.sksg::ShaderPaint", %"class.sksg::ShaderPaint"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN4sksg11ShaderPaintE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = bitcast %"class.sksg::ShaderPaint"* %0 to %"class.sksg::Node"*
  %5 = bitcast %class.sk_sp.9* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = getelementptr inbounds %"class.sksg::ShaderPaint", %"class.sksg::ShaderPaint"* %0, i64 0, i32 1, i32 0
  %7 = load %"class.sksg::Shader"*, %"class.sksg::Shader"** %6, align 8
  %8 = icmp eq %"class.sksg::Shader"* %7, null
  br i1 %8, label %12, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.sksg::Shader", %"class.sksg::Shader"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = atomicrmw add i32* %10, i32 1 monotonic
  br label %12

12:                                               ; preds = %9, %1
  %13 = bitcast %class.sk_sp.9* %2 to %"class.sksg::Shader"**
  store %"class.sksg::Shader"* %7, %"class.sksg::Shader"** %13, align 8
  call void @_ZN4sksg4Node14unobserveInvalERK5sk_spIS0_E(%"class.sksg::Node"* %4, %class.sk_sp.9* nonnull dereferenceable(8) %2) #10
  %14 = getelementptr inbounds %class.sk_sp.9, %class.sk_sp.9* %2, i64 0, i32 0
  %15 = load %"class.sksg::Node"*, %"class.sksg::Node"** %14, align 8
  %16 = icmp eq %"class.sksg::Node"* %15, null
  br i1 %16, label %27, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %"class.sksg::Node", %"class.sksg::Node"* %15, i64 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = atomicrmw add i32* %18, i32 -1 acq_rel
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %27

21:                                               ; preds = %17
  %22 = bitcast %"class.sksg::Node"* %15 to %class.SkRefCntBase*
  %23 = bitcast %"class.sksg::Node"* %15 to void (%class.SkRefCntBase*)***
  %24 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %23, align 8
  %25 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %24, i64 2
  %26 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %25, align 8
  call void %26(%class.SkRefCntBase* nonnull %22) #10
  br label %27

27:                                               ; preds = %21, %17, %12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  %28 = load %"class.sksg::Shader"*, %"class.sksg::Shader"** %6, align 8
  %29 = icmp eq %"class.sksg::Shader"* %28, null
  br i1 %29, label %40, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds %"class.sksg::Shader", %"class.sksg::Shader"* %28, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = atomicrmw add i32* %31, i32 -1 acq_rel
  %33 = icmp eq i32 %32, 1
  br i1 %33, label %34, label %40

34:                                               ; preds = %30
  %35 = bitcast %"class.sksg::Shader"* %28 to %class.SkRefCntBase*
  %36 = bitcast %"class.sksg::Shader"* %28 to void (%class.SkRefCntBase*)***
  %37 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %36, align 8
  %38 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %37, i64 2
  %39 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %38, align 8
  call void %39(%class.SkRefCntBase* nonnull %35) #10
  br label %40

40:                                               ; preds = %27, %30, %34
  call void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"* %4) #10
  %41 = bitcast %"class.sksg::ShaderPaint"* %0 to i8*
  call void @_ZdlPv(i8* %41) #11
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZN4sksg11ShaderPaint12onRevalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::ShaderPaint"* nocapture readonly, %"class.sksg::InvalidationController"*, %class.SkMatrix* dereferenceable(40)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.sksg::ShaderPaint", %"class.sksg::ShaderPaint"* %0, i64 0, i32 1, i32 0
  %5 = bitcast %"class.sksg::Shader"** %4 to %"class.sksg::Node"**
  %6 = load %"class.sksg::Node"*, %"class.sksg::Node"** %5, align 8
  %7 = tail call dereferenceable(16) %struct.SkRect* @_ZN4sksg4Node10revalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::Node"* %6, %"class.sksg::InvalidationController"* %1, %class.SkMatrix* dereferenceable(40) %2) #10
  %8 = bitcast %struct.SkRect* %7 to <2 x float>*
  %9 = load <2 x float>, <2 x float>* %8, align 4
  %10 = getelementptr inbounds %struct.SkRect, %struct.SkRect* %7, i64 0, i32 2
  %11 = bitcast float* %10 to <2 x float>*
  %12 = load <2 x float>, <2 x float>* %11, align 4
  %13 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %9, 0
  %14 = insertvalue { <2 x float>, <2 x float> } %13, <2 x float> %12, 1
  ret { <2 x float>, <2 x float> } %14
}

declare dereferenceable(16) %struct.SkRect* @_ZN4sksg4Node10revalidateEPNS_22InvalidationControllerERK8SkMatrix(%"class.sksg::Node"*, %"class.sksg::InvalidationController"*, %class.SkMatrix* dereferenceable(40)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK4sksg11ShaderPaint14onApplyToPaintEP7SkPaint(%"class.sksg::ShaderPaint"* nocapture readonly, %class.SkPaint*) unnamed_addr #0 align 2 {
  %3 = alloca %class.sk_sp.1, align 8
  %4 = getelementptr inbounds %"class.sksg::ShaderPaint", %"class.sksg::ShaderPaint"* %0, i64 0, i32 1, i32 0
  %5 = load %"class.sksg::Shader"*, %"class.sksg::Shader"** %4, align 8
  %6 = getelementptr inbounds %class.sk_sp.1, %class.sk_sp.1* %3, i64 0, i32 0
  %7 = getelementptr inbounds %"class.sksg::Shader", %"class.sksg::Shader"* %5, i64 0, i32 1, i32 0
  %8 = load %class.SkShader*, %class.SkShader** %7, align 8
  %9 = icmp eq %class.SkShader* %8, null
  br i1 %9, label %13, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds %class.SkShader, %class.SkShader* %8, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %12 = atomicrmw add i32* %11, i32 1 monotonic
  br label %13

13:                                               ; preds = %2, %10
  store %class.SkShader* %8, %class.SkShader** %6, align 8
  call void @_ZN7SkPaint9setShaderE5sk_spI8SkShaderE(%class.SkPaint* %1, %class.sk_sp.1* nonnull %3) #10
  %14 = load %class.SkShader*, %class.SkShader** %6, align 8
  %15 = icmp eq %class.SkShader* %14, null
  br i1 %15, label %26, label %16

16:                                               ; preds = %13
  %17 = getelementptr inbounds %class.SkShader, %class.SkShader* %14, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = atomicrmw add i32* %17, i32 -1 acq_rel
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %20, label %26

20:                                               ; preds = %16
  %21 = bitcast %class.SkShader* %14 to %class.SkRefCntBase*
  %22 = bitcast %class.SkShader* %14 to void (%class.SkRefCntBase*)***
  %23 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %22, align 8
  %24 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %23, i64 2
  %25 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %24, align 8
  call void %25(%class.SkRefCntBase* nonnull %21) #10
  br label %26

26:                                               ; preds = %13, %16, %20
  ret void
}

declare void @_ZN7SkPaint9setShaderE5sk_spI8SkShaderE(%class.SkPaint*, %class.sk_sp.1*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sksg5ColorD0Ev(%"class.sksg::Color"*) unnamed_addr #7 comdat align 2 {
  %2 = bitcast %"class.sksg::Color"* %0 to %"class.sksg::Node"*
  tail call void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"* %2) #10
  %3 = bitcast %"class.sksg::Color"* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #0 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #10
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind
declare void @_ZN4sksg4NodeD2Ev(%"class.sksg::Node"*) unnamed_addr #8

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4sksg9PaintNodeD0Ev(%"class.sksg::PaintNode"*) unnamed_addr #7 comdat align 2 {
  tail call void @llvm.trap() #12
  unreachable
}

declare void @__cxa_pure_virtual() unnamed_addr

declare void @_ZN7SkPaint9setAlphafEf(%class.SkPaint*, float) local_unnamed_addr #1

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #9

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { cold noreturn nounwind }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }
attributes #12 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
