; ModuleID = '../../third_party/icu/source/i18n/double-conversion-strtod.cpp'
source_filename = "../../third_party/icu/source/i18n/double-conversion-strtod.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.icu_69::double_conversion::DiyFp" = type <{ i64, i32, [4 x i8] }>
%"class.icu_69::double_conversion::Bignum" = type { i16, i16, [128 x i32] }

@_ZN6icu_6917double_conversionL19exact_powers_of_tenE = internal unnamed_addr constant [23 x double] [double 1.000000e+00, double 1.000000e+01, double 1.000000e+02, double 1.000000e+03, double 1.000000e+04, double 1.000000e+05, double 1.000000e+06, double 1.000000e+07, double 1.000000e+08, double 1.000000e+09, double 1.000000e+10, double 1.000000e+11, double 1.000000e+12, double 1.000000e+13, double 1.000000e+14, double 1.000000e+15, double 1.000000e+16, double 1.000000e+17, double 1.000000e+18, double 1.000000e+19, double 1.000000e+20, double 1.000000e+21, double 1.000000e+22], align 16
@switch.table._ZN6icu_6917double_conversionL12ComputeGuessENS0_6VectorIKcEEiPd = private unnamed_addr constant [7 x i32] [i32 4, i32 7, i32 10, i32 14, i32 17, i32 20, i32 24], align 4
@switch.table._ZN6icu_6917double_conversionL12ComputeGuessENS0_6VectorIKcEEiPd.1 = private unnamed_addr constant [7 x i64] [i64 2684354560, i64 3355443200, i64 4194304000, i64 2621440000, i64 3276800000, i64 4096000000, i64 2560000000], align 8

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN6icu_6917double_conversion13StrtodTrimmedENS0_6VectorIKcEEi(i8*, i32, i32) local_unnamed_addr #0 {
  %4 = alloca double, align 8
  %5 = bitcast double* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #4
  store double 0xFFFFFFFFFFFFFFFF, double* %4, align 8
  %6 = call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12ComputeGuessENS0_6VectorIKcEEiPd(i8* %0, i32 %1, i32 %2, double* nonnull %4)
  %7 = load double, double* %4, align 8
  br i1 %6, label %65, label %8

8:                                                ; preds = %3
  %9 = bitcast double %7 to i64
  %10 = and i64 %9, 9218868437227405312
  %11 = icmp eq i64 %10, 0
  %12 = shl i64 %9, 1
  %13 = and i64 %12, 9007199254740990
  %14 = or i64 %13, 9007199254740992
  %15 = select i1 %11, i64 %13, i64 %14
  %16 = or i64 %15, 1
  br i1 %11, label %22, label %17

17:                                               ; preds = %8
  %18 = lshr i64 %9, 52
  %19 = trunc i64 %18 to i32
  %20 = and i32 %19, 2047
  %21 = add nsw i32 %20, -1076
  br label %22

22:                                               ; preds = %8, %17
  %23 = phi i32 [ %21, %17 ], [ -1075, %8 ]
  %24 = tail call fastcc i32 @_ZN6icu_6917double_conversionL22CompareBufferWithDiyFpENS0_6VectorIKcEEiNS0_5DiyFpE(i8* %0, i32 %1, i32 %2, i64 %16, i32 %23)
  %25 = icmp slt i32 %24, 0
  br i1 %25, label %65, label %26

26:                                               ; preds = %22
  %27 = icmp eq i32 %24, 0
  br i1 %27, label %45, label %28

28:                                               ; preds = %26
  %29 = icmp eq i64 %9, 9218868437227405312
  br i1 %29, label %65, label %30

30:                                               ; preds = %28
  %31 = lshr i64 %9, 32
  %32 = trunc i64 %31 to i32
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %34, label %42

34:                                               ; preds = %30
  %35 = and i64 %9, 4503599627370495
  %36 = or i64 %35, 4503599627370496
  %37 = select i1 %11, i64 %35, i64 %36
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %65, label %39

39:                                               ; preds = %34
  %40 = add i64 %9, -1
  %41 = bitcast i64 %40 to double
  br label %65

42:                                               ; preds = %30
  %43 = add i64 %9, 1
  %44 = bitcast i64 %43 to double
  br label %65

45:                                               ; preds = %26
  %46 = and i64 %9, 4503599627370495
  %47 = or i64 %46, 4503599627370496
  %48 = select i1 %11, i64 %46, i64 %47
  %49 = and i64 %48, 1
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %65, label %51

51:                                               ; preds = %45
  %52 = icmp eq i64 %9, 9218868437227405312
  br i1 %52, label %65, label %53

53:                                               ; preds = %51
  %54 = lshr i64 %9, 32
  %55 = trunc i64 %54 to i32
  %56 = icmp slt i32 %55, 0
  br i1 %56, label %57, label %62

57:                                               ; preds = %53
  %58 = icmp eq i64 %48, 0
  br i1 %58, label %65, label %59

59:                                               ; preds = %57
  %60 = add i64 %9, -1
  %61 = bitcast i64 %60 to double
  br label %65

62:                                               ; preds = %53
  %63 = add i64 %9, 1
  %64 = bitcast i64 %63 to double
  br label %65

65:                                               ; preds = %3, %62, %59, %57, %51, %45, %42, %39, %34, %28, %22
  %66 = phi double [ %7, %22 ], [ %41, %39 ], [ %44, %42 ], [ 0.000000e+00, %34 ], [ 0x7FF0000000000000, %28 ], [ %7, %45 ], [ %61, %59 ], [ %64, %62 ], [ 0.000000e+00, %57 ], [ 0x7FF0000000000000, %51 ], [ %7, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #4
  ret double %66
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN6icu_6917double_conversionL12ComputeGuessENS0_6VectorIKcEEiPd(i8*, i32, i32, double* nocapture) unnamed_addr #0 {
  %5 = alloca %"class.icu_69::double_conversion::DiyFp", align 8
  %6 = alloca i32, align 4
  %7 = icmp eq i32 %1, 0
  br i1 %7, label %344, label %8

8:                                                ; preds = %4
  %9 = add nsw i32 %2, %1
  %10 = icmp sgt i32 %9, 309
  br i1 %10, label %344, label %11

11:                                               ; preds = %8
  %12 = icmp slt i32 %9, -323
  br i1 %12, label %344, label %13

13:                                               ; preds = %11
  %14 = icmp slt i32 %1, 16
  br i1 %14, label %15, label %107

15:                                               ; preds = %13
  %16 = icmp ugt i32 %2, -23
  br i1 %16, label %17, label %43

17:                                               ; preds = %15
  %18 = sub nsw i32 0, %2
  %19 = icmp sgt i32 %1, 0
  br i1 %19, label %20, label %37

20:                                               ; preds = %17
  %21 = sext i32 %1 to i64
  br label %22

22:                                               ; preds = %22, %20
  %23 = phi i64 [ 0, %20 ], [ %25, %22 ]
  %24 = phi i64 [ 0, %20 ], [ %31, %22 ]
  %25 = add nuw nsw i64 %23, 1
  %26 = getelementptr inbounds i8, i8* %0, i64 %23
  %27 = load i8, i8* %26, align 1
  %28 = sext i8 %27 to i64
  %29 = mul i64 %24, 10
  %30 = add i64 %29, -48
  %31 = add i64 %30, %28
  %32 = icmp slt i64 %25, %21
  %33 = icmp ult i64 %31, 1844674407370955161
  %34 = and i1 %32, %33
  br i1 %34, label %22, label %35

35:                                               ; preds = %22
  %36 = uitofp i64 %31 to double
  br label %37

37:                                               ; preds = %35, %17
  %38 = phi double [ 0.000000e+00, %17 ], [ %36, %35 ]
  %39 = sext i32 %18 to i64
  %40 = getelementptr inbounds [23 x double], [23 x double]* @_ZN6icu_6917double_conversionL19exact_powers_of_tenE, i64 0, i64 %39
  %41 = load double, double* %40, align 8
  %42 = fdiv double %38, %41
  br label %344

43:                                               ; preds = %15
  %44 = icmp ult i32 %2, 23
  br i1 %44, label %45, label %70

45:                                               ; preds = %43
  %46 = icmp sgt i32 %1, 0
  br i1 %46, label %47, label %64

47:                                               ; preds = %45
  %48 = sext i32 %1 to i64
  br label %49

49:                                               ; preds = %49, %47
  %50 = phi i64 [ 0, %47 ], [ %52, %49 ]
  %51 = phi i64 [ 0, %47 ], [ %58, %49 ]
  %52 = add nuw nsw i64 %50, 1
  %53 = getelementptr inbounds i8, i8* %0, i64 %50
  %54 = load i8, i8* %53, align 1
  %55 = sext i8 %54 to i64
  %56 = mul i64 %51, 10
  %57 = add i64 %56, -48
  %58 = add i64 %57, %55
  %59 = icmp slt i64 %52, %48
  %60 = icmp ult i64 %58, 1844674407370955161
  %61 = and i1 %59, %60
  br i1 %61, label %49, label %62

62:                                               ; preds = %49
  %63 = uitofp i64 %58 to double
  br label %64

64:                                               ; preds = %62, %45
  %65 = phi double [ 0.000000e+00, %45 ], [ %63, %62 ]
  %66 = sext i32 %2 to i64
  %67 = getelementptr inbounds [23 x double], [23 x double]* @_ZN6icu_6917double_conversionL19exact_powers_of_tenE, i64 0, i64 %66
  %68 = load double, double* %67, align 8
  %69 = fmul double %65, %68
  br label %344

70:                                               ; preds = %43
  %71 = icmp sgt i32 %2, -1
  %72 = sub nsw i32 15, %1
  br i1 %71, label %73, label %105

73:                                               ; preds = %70
  %74 = sub nsw i32 %2, %72
  %75 = icmp slt i32 %74, 23
  br i1 %75, label %76, label %105

76:                                               ; preds = %73
  %77 = icmp sgt i32 %1, 0
  br i1 %77, label %78, label %95

78:                                               ; preds = %76
  %79 = sext i32 %1 to i64
  br label %80

80:                                               ; preds = %80, %78
  %81 = phi i64 [ 0, %78 ], [ %83, %80 ]
  %82 = phi i64 [ 0, %78 ], [ %89, %80 ]
  %83 = add nuw nsw i64 %81, 1
  %84 = getelementptr inbounds i8, i8* %0, i64 %81
  %85 = load i8, i8* %84, align 1
  %86 = sext i8 %85 to i64
  %87 = mul i64 %82, 10
  %88 = add i64 %87, -48
  %89 = add i64 %88, %86
  %90 = icmp slt i64 %83, %79
  %91 = icmp ult i64 %89, 1844674407370955161
  %92 = and i1 %90, %91
  br i1 %92, label %80, label %93

93:                                               ; preds = %80
  %94 = uitofp i64 %89 to double
  br label %95

95:                                               ; preds = %93, %76
  %96 = phi double [ 0.000000e+00, %76 ], [ %94, %93 ]
  %97 = sext i32 %72 to i64
  %98 = getelementptr inbounds [23 x double], [23 x double]* @_ZN6icu_6917double_conversionL19exact_powers_of_tenE, i64 0, i64 %97
  %99 = load double, double* %98, align 8
  %100 = fmul double %96, %99
  %101 = sext i32 %74 to i64
  %102 = getelementptr inbounds [23 x double], [23 x double]* @_ZN6icu_6917double_conversionL19exact_powers_of_tenE, i64 0, i64 %101
  %103 = load double, double* %102, align 8
  %104 = fmul double %100, %103
  br label %344

105:                                              ; preds = %73, %70
  %106 = icmp sgt i32 %1, 0
  br i1 %106, label %107, label %124

107:                                              ; preds = %13, %105
  %108 = sext i32 %1 to i64
  br label %109

109:                                              ; preds = %109, %107
  %110 = phi i64 [ 0, %107 ], [ %112, %109 ]
  %111 = phi i64 [ 0, %107 ], [ %118, %109 ]
  %112 = add nuw nsw i64 %110, 1
  %113 = getelementptr inbounds i8, i8* %0, i64 %110
  %114 = load i8, i8* %113, align 1
  %115 = sext i8 %114 to i64
  %116 = mul i64 %111, 10
  %117 = add i64 %116, -48
  %118 = add i64 %117, %115
  %119 = icmp slt i64 %112, %108
  %120 = icmp ult i64 %118, 1844674407370955161
  %121 = and i1 %119, %120
  br i1 %121, label %109, label %122

122:                                              ; preds = %109
  %123 = trunc i64 %112 to i32
  br label %124

124:                                              ; preds = %122, %105
  %125 = phi i32 [ 0, %105 ], [ %123, %122 ]
  %126 = phi i64 [ 0, %105 ], [ %118, %122 ]
  %127 = icmp eq i32 %125, %1
  br i1 %127, label %138, label %128

128:                                              ; preds = %124
  %129 = sext i32 %125 to i64
  %130 = getelementptr inbounds i8, i8* %0, i64 %129
  %131 = load i8, i8* %130, align 1
  %132 = icmp sgt i8 %131, 52
  %133 = zext i1 %132 to i64
  %134 = add i64 %126, %133
  %135 = sub nsw i32 %1, %125
  %136 = add nsw i32 %135, %2
  %137 = icmp eq i32 %135, 0
  br i1 %137, label %138, label %141

138:                                              ; preds = %128, %124
  %139 = phi i32 [ %136, %128 ], [ %2, %124 ]
  %140 = phi i64 [ %134, %128 ], [ %126, %124 ]
  br label %141

141:                                              ; preds = %138, %128
  %142 = phi i32 [ %139, %138 ], [ %136, %128 ]
  %143 = phi i64 [ %140, %138 ], [ %134, %128 ]
  %144 = phi i64 [ 0, %138 ], [ 4, %128 ]
  %145 = icmp ult i64 %143, 18014398509481984
  br i1 %145, label %150, label %146

146:                                              ; preds = %150, %141
  %147 = phi i32 [ 0, %141 ], [ %154, %150 ]
  %148 = phi i64 [ %143, %141 ], [ %153, %150 ]
  %149 = icmp sgt i64 %148, -1
  br i1 %149, label %156, label %162

150:                                              ; preds = %141, %150
  %151 = phi i64 [ %153, %150 ], [ %143, %141 ]
  %152 = phi i32 [ %154, %150 ], [ 0, %141 ]
  %153 = shl i64 %151, 10
  %154 = add nsw i32 %152, -10
  %155 = icmp ult i64 %153, 18014398509481984
  br i1 %155, label %150, label %146

156:                                              ; preds = %146, %156
  %157 = phi i64 [ %159, %156 ], [ %148, %146 ]
  %158 = phi i32 [ %160, %156 ], [ %147, %146 ]
  %159 = shl i64 %157, 1
  %160 = add nsw i32 %158, -1
  %161 = icmp sgt i64 %159, -1
  br i1 %161, label %156, label %162

162:                                              ; preds = %156, %146
  %163 = phi i32 [ %147, %146 ], [ %160, %156 ]
  %164 = phi i64 [ %148, %146 ], [ %159, %156 ]
  %165 = sub nsw i32 0, %163
  %166 = zext i32 %165 to i64
  %167 = shl i64 %144, %166
  %168 = icmp slt i32 %142, -348
  br i1 %168, label %344, label %169

169:                                              ; preds = %162
  %170 = bitcast %"class.icu_69::double_conversion::DiyFp"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %170) #4
  %171 = getelementptr inbounds %"class.icu_69::double_conversion::DiyFp", %"class.icu_69::double_conversion::DiyFp"* %5, i64 0, i32 0
  %172 = getelementptr inbounds %"class.icu_69::double_conversion::DiyFp", %"class.icu_69::double_conversion::DiyFp"* %5, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %170, i8 -86, i64 16, i1 false) #4
  store i64 0, i64* %171, align 8
  store i32 0, i32* %172, align 8
  %173 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %173) #4
  store i32 -1431655766, i32* %6, align 4
  call void @_ZN6icu_6917double_conversion16PowersOfTenCache32GetCachedPowerForDecimalExponentEiPNS0_5DiyFpEPi(i32 %142, %"class.icu_69::double_conversion::DiyFp"* nonnull %5, i32* nonnull %6) #4
  %174 = load i32, i32* %6, align 4
  %175 = icmp eq i32 %142, %174
  br i1 %175, label %203, label %176

176:                                              ; preds = %169
  %177 = sub nsw i32 %142, %174
  %178 = add i32 %177, -1
  %179 = icmp ult i32 %178, 7
  br i1 %179, label %181, label %180

180:                                              ; preds = %176
  call void @abort() #5
  unreachable

181:                                              ; preds = %176
  %182 = sext i32 %178 to i64
  %183 = getelementptr inbounds [7 x i32], [7 x i32]* @switch.table._ZN6icu_6917double_conversionL12ComputeGuessENS0_6VectorIKcEEiPd, i64 0, i64 %182
  %184 = load i32, i32* %183, align 4
  %185 = sext i32 %178 to i64
  %186 = getelementptr inbounds [7 x i64], [7 x i64]* @switch.table._ZN6icu_6917double_conversionL12ComputeGuessENS0_6VectorIKcEEiPd.1, i64 0, i64 %185
  %187 = load i64, i64* %186, align 8
  %188 = lshr i64 %164, 32
  %189 = and i64 %164, 4294967295
  %190 = mul nuw i64 %187, %188
  %191 = mul nuw i64 %187, %189
  %192 = and i64 %191, 4294934528
  %193 = add nuw nsw i64 %192, 2147483648
  %194 = add nsw i32 %184, %163
  %195 = lshr i64 %191, 32
  %196 = add nuw i64 %195, %190
  %197 = lshr i64 %193, 32
  %198 = add nuw i64 %196, %197
  %199 = sub nsw i32 19, %1
  %200 = icmp slt i32 %199, %177
  %201 = add i64 %167, 4
  %202 = select i1 %200, i64 %201, i64 %167
  br label %203

203:                                              ; preds = %181, %169
  %204 = phi i64 [ %164, %169 ], [ %198, %181 ]
  %205 = phi i32 [ %163, %169 ], [ %194, %181 ]
  %206 = phi i64 [ %167, %169 ], [ %202, %181 ]
  %207 = lshr i64 %204, 32
  %208 = and i64 %204, 4294967295
  %209 = load i64, i64* %171, align 8
  %210 = lshr i64 %209, 32
  %211 = and i64 %209, 4294967295
  %212 = mul nuw i64 %210, %207
  %213 = mul nuw i64 %210, %208
  %214 = mul nuw i64 %211, %207
  %215 = mul nuw i64 %211, %208
  %216 = lshr i64 %215, 32
  %217 = and i64 %214, 4294967295
  %218 = and i64 %213, 4294967295
  %219 = add nuw nsw i64 %217, 2147483648
  %220 = add nuw nsw i64 %219, %216
  %221 = add nuw nsw i64 %220, %218
  %222 = load i32, i32* %172, align 8
  %223 = add i32 %205, 64
  %224 = add i32 %223, %222
  %225 = lshr i64 %214, 32
  %226 = add nuw i64 %225, %212
  %227 = lshr i64 %213, 32
  %228 = add nuw i64 %226, %227
  %229 = lshr i64 %221, 32
  %230 = add i64 %228, %229
  %231 = icmp eq i64 %206, 0
  %232 = select i1 %231, i64 8, i64 9
  %233 = add i64 %232, %206
  %234 = icmp ult i64 %230, 18014398509481984
  br i1 %234, label %239, label %235

235:                                              ; preds = %239, %203
  %236 = phi i32 [ %224, %203 ], [ %243, %239 ]
  %237 = phi i64 [ %230, %203 ], [ %242, %239 ]
  %238 = icmp sgt i64 %237, -1
  br i1 %238, label %245, label %251

239:                                              ; preds = %203, %239
  %240 = phi i64 [ %242, %239 ], [ %230, %203 ]
  %241 = phi i32 [ %243, %239 ], [ %224, %203 ]
  %242 = shl i64 %240, 10
  %243 = add nsw i32 %241, -10
  %244 = icmp ult i64 %242, 18014398509481984
  br i1 %244, label %239, label %235

245:                                              ; preds = %235, %245
  %246 = phi i64 [ %248, %245 ], [ %237, %235 ]
  %247 = phi i32 [ %249, %245 ], [ %236, %235 ]
  %248 = shl i64 %246, 1
  %249 = add nsw i32 %247, -1
  %250 = icmp sgt i64 %248, -1
  br i1 %250, label %245, label %251

251:                                              ; preds = %245, %235
  %252 = phi i32 [ %236, %235 ], [ %249, %245 ]
  %253 = phi i64 [ %237, %235 ], [ %248, %245 ]
  %254 = sub nsw i32 %224, %252
  %255 = zext i32 %254 to i64
  %256 = shl i64 %233, %255
  %257 = add nsw i32 %252, 64
  %258 = icmp sgt i32 %257, -1022
  br i1 %258, label %273, label %259

259:                                              ; preds = %251
  %260 = icmp slt i32 %257, -1073
  %261 = add nsw i32 %252, 1138
  br i1 %260, label %265, label %262

262:                                              ; preds = %259
  %263 = sub nuw nsw i32 -1074, %252
  %264 = icmp slt i32 %261, 4
  br i1 %264, label %265, label %273

265:                                              ; preds = %262, %259
  %266 = phi i32 [ %261, %262 ], [ 0, %259 ]
  %267 = sub nsw i32 4, %266
  %268 = zext i32 %267 to i64
  %269 = lshr i64 %253, %268
  %270 = add nsw i32 %267, %252
  %271 = lshr i64 %256, %268
  %272 = add nuw i64 %271, 9
  br label %273

273:                                              ; preds = %265, %262, %251
  %274 = phi i32 [ %266, %265 ], [ 4, %262 ], [ 4, %251 ]
  %275 = phi i32 [ %266, %265 ], [ %261, %262 ], [ 53, %251 ]
  %276 = phi i64 [ %269, %265 ], [ %253, %262 ], [ %253, %251 ]
  %277 = phi i32 [ %270, %265 ], [ %252, %262 ], [ %252, %251 ]
  %278 = phi i32 [ 60, %265 ], [ %263, %262 ], [ 11, %251 ]
  %279 = phi i64 [ %272, %265 ], [ %256, %262 ], [ %256, %251 ]
  %280 = zext i32 %278 to i64
  %281 = shl nsw i64 -1, %280
  %282 = xor i64 %281, 2305843009213693951
  %283 = and i64 %282, %276
  %284 = add nsw i32 %278, -1
  %285 = zext i32 %284 to i64
  %286 = shl i64 %283, 3
  %287 = shl i64 8, %285
  %288 = lshr i64 %276, %280
  %289 = add nsw i32 %278, %277
  %290 = add i64 %287, %279
  %291 = icmp ult i64 %286, %290
  br i1 %291, label %303, label %292

292:                                              ; preds = %273
  %293 = add nuw nsw i64 %288, 1
  %294 = icmp ugt i64 %288, 9007199254740990
  br i1 %294, label %295, label %303

295:                                              ; preds = %292
  %296 = icmp sgt i32 %275, 4
  %297 = select i1 %296, i32 %275, i32 4
  %298 = shl i32 %275, 1
  %299 = add i32 %252, 61
  %300 = add i32 %299, %274
  %301 = sub i32 %300, %298
  %302 = add i32 %301, %297
  br label %303

303:                                              ; preds = %295, %292, %273
  %304 = phi i64 [ %293, %292 ], [ %288, %273 ], [ 4503599627370496, %295 ]
  %305 = phi i32 [ %289, %292 ], [ %289, %273 ], [ %302, %295 ]
  %306 = icmp sgt i32 %305, 971
  br i1 %306, label %336, label %307

307:                                              ; preds = %303
  %308 = icmp slt i32 %305, -1074
  br i1 %308, label %336, label %309

309:                                              ; preds = %307
  %310 = icmp ne i32 %305, -1074
  %311 = and i64 %304, 4503599627370496
  %312 = icmp eq i64 %311, 0
  %313 = and i1 %310, %312
  br i1 %313, label %314, label %323

314:                                              ; preds = %309, %314
  %315 = phi i32 [ %318, %314 ], [ %305, %309 ]
  %316 = phi i64 [ %317, %314 ], [ %304, %309 ]
  %317 = shl i64 %316, 1
  %318 = add nsw i32 %315, -1
  %319 = icmp sgt i32 %318, -1074
  %320 = and i64 %316, 2251799813685248
  %321 = icmp eq i64 %320, 0
  %322 = and i1 %319, %321
  br i1 %322, label %314, label %323

323:                                              ; preds = %314, %309
  %324 = phi i64 [ %304, %309 ], [ %317, %314 ]
  %325 = phi i32 [ %305, %309 ], [ %318, %314 ]
  %326 = phi i1 [ %312, %309 ], [ %321, %314 ]
  %327 = icmp eq i32 %325, -1074
  %328 = and i1 %327, %326
  %329 = add nsw i32 %325, 1075
  %330 = zext i32 %329 to i64
  %331 = shl i64 %330, 52
  %332 = select i1 %328, i64 0, i64 %331
  %333 = and i64 %324, 4503599627370495
  %334 = or i64 %332, %333
  %335 = bitcast i64 %334 to double
  br label %336

336:                                              ; preds = %303, %307, %323
  %337 = phi double [ %335, %323 ], [ 0x7FF0000000000000, %303 ], [ 0.000000e+00, %307 ]
  store double %337, double* %3, align 8
  %338 = sub i64 %287, %279
  %339 = icmp ult i64 %338, %286
  %340 = and i1 %339, %291
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %173) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %170) #4
  %341 = fcmp oeq double %337, 0x7FF0000000000000
  %342 = xor i1 %340, true
  %343 = or i1 %341, %342
  ret i1 %343

344:                                              ; preds = %162, %11, %8, %4, %95, %64, %37
  %345 = phi double [ %104, %95 ], [ %69, %64 ], [ %42, %37 ], [ 0.000000e+00, %4 ], [ 0x7FF0000000000000, %8 ], [ 0.000000e+00, %11 ], [ 0.000000e+00, %162 ]
  store double %345, double* %3, align 8
  ret i1 true
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN6icu_6917double_conversionL22CompareBufferWithDiyFpENS0_6VectorIKcEEiNS0_5DiyFpE(i8*, i32, i32, i64, i32) unnamed_addr #0 {
  %6 = alloca %"class.icu_69::double_conversion::Bignum", align 4
  %7 = alloca %"class.icu_69::double_conversion::Bignum", align 4
  %8 = bitcast %"class.icu_69::double_conversion::Bignum"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 516, i8* nonnull %8) #4
  %9 = getelementptr inbounds %"class.icu_69::double_conversion::Bignum", %"class.icu_69::double_conversion::Bignum"* %6, i64 0, i32 2
  %10 = bitcast [128 x i32]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %10, i8 -86, i64 512, i1 false)
  %11 = getelementptr inbounds %"class.icu_69::double_conversion::Bignum", %"class.icu_69::double_conversion::Bignum"* %6, i64 0, i32 0
  store i16 0, i16* %11, align 4
  %12 = getelementptr inbounds %"class.icu_69::double_conversion::Bignum", %"class.icu_69::double_conversion::Bignum"* %6, i64 0, i32 1
  store i16 0, i16* %12, align 2
  %13 = bitcast %"class.icu_69::double_conversion::Bignum"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 516, i8* nonnull %13) #4
  %14 = getelementptr inbounds %"class.icu_69::double_conversion::Bignum", %"class.icu_69::double_conversion::Bignum"* %7, i64 0, i32 2
  %15 = bitcast [128 x i32]* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %15, i8 -86, i64 512, i1 false)
  %16 = getelementptr inbounds %"class.icu_69::double_conversion::Bignum", %"class.icu_69::double_conversion::Bignum"* %7, i64 0, i32 0
  store i16 0, i16* %16, align 4
  %17 = getelementptr inbounds %"class.icu_69::double_conversion::Bignum", %"class.icu_69::double_conversion::Bignum"* %7, i64 0, i32 1
  store i16 0, i16* %17, align 2
  call void @_ZN6icu_6917double_conversion6Bignum19AssignDecimalStringENS0_6VectorIKcEE(%"class.icu_69::double_conversion::Bignum"* nonnull %6, i8* %0, i32 %1) #4
  call void @_ZN6icu_6917double_conversion6Bignum12AssignUInt64Em(%"class.icu_69::double_conversion::Bignum"* nonnull %7, i64 %3) #4
  %18 = icmp sgt i32 %2, -1
  br i1 %18, label %19, label %20

19:                                               ; preds = %5
  call void @_ZN6icu_6917double_conversion6Bignum20MultiplyByPowerOfTenEi(%"class.icu_69::double_conversion::Bignum"* nonnull %6, i32 %2) #4
  br label %22

20:                                               ; preds = %5
  %21 = sub nsw i32 0, %2
  call void @_ZN6icu_6917double_conversion6Bignum20MultiplyByPowerOfTenEi(%"class.icu_69::double_conversion::Bignum"* nonnull %7, i32 %21) #4
  br label %22

22:                                               ; preds = %20, %19
  %23 = icmp sgt i32 %4, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %22
  call void @_ZN6icu_6917double_conversion6Bignum9ShiftLeftEi(%"class.icu_69::double_conversion::Bignum"* nonnull %7, i32 %4) #4
  br label %27

25:                                               ; preds = %22
  %26 = sub nsw i32 0, %4
  call void @_ZN6icu_6917double_conversion6Bignum9ShiftLeftEi(%"class.icu_69::double_conversion::Bignum"* nonnull %6, i32 %26) #4
  br label %27

27:                                               ; preds = %25, %24
  %28 = call i32 @_ZN6icu_6917double_conversion6Bignum7CompareERKS1_S3_(%"class.icu_69::double_conversion::Bignum"* nonnull dereferenceable(516) %6, %"class.icu_69::double_conversion::Bignum"* nonnull dereferenceable(516) %7) #4
  call void @llvm.lifetime.end.p0i8(i64 516, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 516, i8* nonnull %8) #4
  ret i32 %28
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZN6icu_6917double_conversion6StrtodENS0_6VectorIKcEEi(i8*, i32, i32) local_unnamed_addr #0 {
  %4 = alloca [780 x i8], align 16
  %5 = getelementptr inbounds [780 x i8], [780 x i8]* %4, i64 0, i64 0
  %6 = getelementptr inbounds [780 x i8], [780 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 780, i8* nonnull %6) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 780, i1 false)
  %7 = icmp sgt i32 %1, 0
  br i1 %7, label %8, label %23

8:                                                ; preds = %3
  %9 = zext i32 %1 to i64
  br label %10

10:                                               ; preds = %20, %8
  %11 = phi i64 [ 0, %8 ], [ %21, %20 ]
  %12 = getelementptr inbounds i8, i8* %0, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 48
  br i1 %14, label %20, label %15

15:                                               ; preds = %10
  %16 = trunc i64 %11 to i32
  %17 = and i64 %11, 4294967295
  %18 = getelementptr inbounds i8, i8* %0, i64 %17
  %19 = sub nsw i32 %1, %16
  br label %23

20:                                               ; preds = %10
  %21 = add nuw nsw i64 %11, 1
  %22 = icmp eq i64 %21, %9
  br i1 %22, label %23, label %10

23:                                               ; preds = %20, %15, %3
  %24 = phi i8* [ %18, %15 ], [ %0, %3 ], [ %0, %20 ]
  %25 = phi i32 [ %19, %15 ], [ 0, %3 ], [ 0, %20 ]
  %26 = sext i32 %25 to i64
  br label %27

27:                                               ; preds = %33, %23
  %28 = phi i64 [ %29, %33 ], [ %26, %23 ]
  %29 = add nsw i64 %28, -1
  %30 = icmp sgt i64 %28, 0
  br i1 %30, label %33, label %31

31:                                               ; preds = %27
  %32 = add nsw i32 %25, %2
  br label %46

33:                                               ; preds = %27
  %34 = getelementptr inbounds i8, i8* %24, i64 %29
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %35, 48
  br i1 %36, label %27, label %37

37:                                               ; preds = %33
  %38 = trunc i64 %28 to i32
  %39 = sub nsw i32 %25, %38
  %40 = add nsw i32 %39, %2
  %41 = icmp sgt i32 %38, 780
  br i1 %41, label %42, label %46

42:                                               ; preds = %37
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %5, i8* align 1 %24, i64 779, i1 false)
  %43 = getelementptr inbounds [780 x i8], [780 x i8]* %4, i64 0, i64 779
  store i8 49, i8* %43, align 1
  %44 = add nsw i32 %38, -780
  %45 = add nsw i32 %44, %40
  br label %46

46:                                               ; preds = %31, %37, %42
  %47 = phi i32 [ 780, %42 ], [ 0, %31 ], [ %38, %37 ]
  %48 = phi i8* [ %6, %42 ], [ %24, %31 ], [ %24, %37 ]
  %49 = phi i32 [ %45, %42 ], [ %32, %31 ], [ %40, %37 ]
  %50 = call double @_ZN6icu_6917double_conversion13StrtodTrimmedENS0_6VectorIKcEEi(i8* %48, i32 %47, i32 %49)
  call void @llvm.lifetime.end.p0i8(i64 780, i8* nonnull %6) #4
  ret double %50
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN6icu_6917double_conversion6StrtofENS0_6VectorIKcEEi(i8*, i32, i32) local_unnamed_addr #0 {
  %4 = alloca [780 x i8], align 16
  %5 = getelementptr inbounds [780 x i8], [780 x i8]* %4, i64 0, i64 0
  %6 = getelementptr inbounds [780 x i8], [780 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 780, i8* nonnull %6) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 780, i1 false)
  %7 = icmp sgt i32 %1, 0
  br i1 %7, label %8, label %23

8:                                                ; preds = %3
  %9 = zext i32 %1 to i64
  br label %10

10:                                               ; preds = %20, %8
  %11 = phi i64 [ 0, %8 ], [ %21, %20 ]
  %12 = getelementptr inbounds i8, i8* %0, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 48
  br i1 %14, label %20, label %15

15:                                               ; preds = %10
  %16 = trunc i64 %11 to i32
  %17 = and i64 %11, 4294967295
  %18 = getelementptr inbounds i8, i8* %0, i64 %17
  %19 = sub nsw i32 %1, %16
  br label %23

20:                                               ; preds = %10
  %21 = add nuw nsw i64 %11, 1
  %22 = icmp eq i64 %21, %9
  br i1 %22, label %23, label %10

23:                                               ; preds = %20, %15, %3
  %24 = phi i8* [ %18, %15 ], [ %0, %3 ], [ %0, %20 ]
  %25 = phi i32 [ %19, %15 ], [ 0, %3 ], [ 0, %20 ]
  %26 = sext i32 %25 to i64
  br label %27

27:                                               ; preds = %33, %23
  %28 = phi i64 [ %29, %33 ], [ %26, %23 ]
  %29 = add nsw i64 %28, -1
  %30 = icmp sgt i64 %28, 0
  br i1 %30, label %33, label %31

31:                                               ; preds = %27
  %32 = add nsw i32 %25, %2
  br label %46

33:                                               ; preds = %27
  %34 = getelementptr inbounds i8, i8* %24, i64 %29
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %35, 48
  br i1 %36, label %27, label %37

37:                                               ; preds = %33
  %38 = trunc i64 %28 to i32
  %39 = sub nsw i32 %25, %38
  %40 = add nsw i32 %39, %2
  %41 = icmp sgt i32 %38, 780
  br i1 %41, label %42, label %46

42:                                               ; preds = %37
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %5, i8* align 1 %24, i64 779, i1 false)
  %43 = getelementptr inbounds [780 x i8], [780 x i8]* %4, i64 0, i64 779
  store i8 49, i8* %43, align 1
  %44 = add nsw i32 %38, -780
  %45 = add nsw i32 %44, %40
  br label %46

46:                                               ; preds = %31, %37, %42
  %47 = phi i32 [ 780, %42 ], [ 0, %31 ], [ %38, %37 ]
  %48 = phi i8* [ %6, %42 ], [ %24, %31 ], [ %24, %37 ]
  %49 = phi i32 [ %45, %42 ], [ %32, %31 ], [ %40, %37 ]
  %50 = call float @_ZN6icu_6917double_conversion13StrtofTrimmedENS0_6VectorIKcEEi(i8* %48, i32 %47, i32 %49)
  call void @llvm.lifetime.end.p0i8(i64 780, i8* nonnull %6) #4
  ret float %50
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN6icu_6917double_conversion13StrtofTrimmedENS0_6VectorIKcEEi(i8*, i32, i32) local_unnamed_addr #0 {
  %4 = alloca double, align 8
  %5 = bitcast double* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #4
  store double 0xFFFFFFFFFFFFFFFF, double* %4, align 8
  %6 = call fastcc zeroext i1 @_ZN6icu_6917double_conversionL12ComputeGuessENS0_6VectorIKcEEiPd(i8* %0, i32 %1, i32 %2, double* nonnull %4)
  %7 = load double, double* %4, align 8
  %8 = fcmp ult double %7, 0x47EFFFFFE0000000
  br i1 %8, label %12, label %9

9:                                                ; preds = %3
  %10 = fcmp ult double %7, 0x47EFFFFFF0000000
  br i1 %10, label %14, label %11

11:                                               ; preds = %9
  br label %14

12:                                               ; preds = %3
  %13 = fptrunc double %7 to float
  br label %14

14:                                               ; preds = %9, %11, %12
  %15 = phi float [ 0x7FF0000000000000, %11 ], [ %13, %12 ], [ 0x47EFFFFFE0000000, %9 ]
  %16 = fpext float %15 to double
  %17 = fcmp oeq double %7, %16
  br i1 %17, label %135, label %18

18:                                               ; preds = %14
  %19 = bitcast double %7 to i64
  %20 = icmp eq i64 %19, 9218868437227405312
  br i1 %20, label %44, label %21

21:                                               ; preds = %18
  %22 = lshr i64 %19, 32
  %23 = trunc i64 %22 to i32
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %25, label %35

25:                                               ; preds = %21
  %26 = and i64 %19, 4503599627370495
  %27 = and i64 %19, 9218868437227405312
  %28 = icmp eq i64 %27, 0
  %29 = or i64 %26, 4503599627370496
  %30 = select i1 %28, i64 %26, i64 %29
  %31 = icmp eq i64 %30, 0
  br i1 %31, label %38, label %32

32:                                               ; preds = %25
  %33 = add i64 %19, -1
  %34 = bitcast i64 %33 to double
  br label %38

35:                                               ; preds = %21
  %36 = add i64 %19, 1
  %37 = bitcast i64 %36 to double
  br label %38

38:                                               ; preds = %25, %32, %35
  %39 = phi i64 [ %33, %32 ], [ %36, %35 ], [ 0, %25 ]
  %40 = phi double [ %34, %32 ], [ %37, %35 ], [ 0.000000e+00, %25 ]
  %41 = icmp eq i64 %19, -4503599627370496
  br i1 %41, label %63, label %42

42:                                               ; preds = %38
  %43 = icmp slt i32 %23, 0
  br i1 %43, label %53, label %44

44:                                               ; preds = %18, %42
  %45 = phi double [ %40, %42 ], [ 0x7FF0000000000000, %18 ]
  %46 = phi i64 [ %39, %42 ], [ 9218868437227405312, %18 ]
  %47 = and i64 %19, 4503599627370495
  %48 = and i64 %19, 9218868437227405312
  %49 = icmp eq i64 %48, 0
  %50 = or i64 %47, 4503599627370496
  %51 = select i1 %49, i64 %47, i64 %50
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %63, label %53

53:                                               ; preds = %44, %42
  %54 = phi i64 [ 1, %42 ], [ -1, %44 ]
  %55 = phi double [ %40, %42 ], [ %45, %44 ]
  %56 = phi i64 [ %39, %42 ], [ %46, %44 ]
  %57 = add i64 %54, %19
  %58 = bitcast i64 %57 to double
  %59 = fcmp ult double %58, 0x47EFFFFFE0000000
  br i1 %59, label %63, label %60

60:                                               ; preds = %53
  %61 = fcmp ult double %58, 0x47EFFFFFF0000000
  br i1 %61, label %68, label %62

62:                                               ; preds = %60
  br label %68

63:                                               ; preds = %38, %44, %53
  %64 = phi double [ %58, %53 ], [ 0xFFF0000000000000, %38 ], [ -0.000000e+00, %44 ]
  %65 = phi i64 [ %56, %53 ], [ %39, %38 ], [ %46, %44 ]
  %66 = phi double [ %55, %53 ], [ %40, %38 ], [ %45, %44 ]
  %67 = fptrunc double %64 to float
  br label %68

68:                                               ; preds = %60, %62, %63
  %69 = phi i64 [ %56, %62 ], [ %65, %63 ], [ %56, %60 ]
  %70 = phi double [ %55, %62 ], [ %66, %63 ], [ %55, %60 ]
  %71 = phi float [ 0x7FF0000000000000, %62 ], [ %67, %63 ], [ 0x47EFFFFFE0000000, %60 ]
  %72 = fcmp ult double %70, 0x47EFFFFFE0000000
  br i1 %72, label %76, label %73

73:                                               ; preds = %68
  %74 = fcmp ult double %70, 0x47EFFFFFF0000000
  br i1 %74, label %78, label %75

75:                                               ; preds = %73
  br label %78

76:                                               ; preds = %68
  %77 = fptrunc double %70 to float
  br label %78

78:                                               ; preds = %73, %75, %76
  %79 = phi float [ 0x7FF0000000000000, %75 ], [ %77, %76 ], [ 0x47EFFFFFE0000000, %73 ]
  br i1 %6, label %104, label %80

80:                                               ; preds = %78
  %81 = icmp eq i64 %69, 9218868437227405312
  br i1 %81, label %100, label %82

82:                                               ; preds = %80
  %83 = lshr i64 %69, 32
  %84 = trunc i64 %83 to i32
  %85 = icmp slt i32 %84, 0
  br i1 %85, label %86, label %93

86:                                               ; preds = %82
  %87 = and i64 %69, 4503599627370495
  %88 = and i64 %69, 9218868437227405312
  %89 = icmp eq i64 %88, 0
  %90 = or i64 %87, 4503599627370496
  %91 = select i1 %89, i64 %87, i64 %90
  %92 = icmp eq i64 %91, 0
  br i1 %92, label %101, label %93

93:                                               ; preds = %82, %86
  %94 = phi i64 [ -1, %86 ], [ 1, %82 ]
  %95 = add i64 %69, %94
  %96 = bitcast i64 %95 to double
  %97 = fcmp ult double %96, 0x47EFFFFFE0000000
  br i1 %97, label %101, label %98

98:                                               ; preds = %93
  %99 = fcmp ult double %96, 0x47EFFFFFF0000000
  br i1 %99, label %104, label %100

100:                                              ; preds = %80, %98
  br label %104

101:                                              ; preds = %86, %93
  %102 = phi double [ %96, %93 ], [ 0.000000e+00, %86 ]
  %103 = fptrunc double %102 to float
  br label %104

104:                                              ; preds = %101, %100, %98, %78
  %105 = phi float [ %79, %78 ], [ 0x7FF0000000000000, %100 ], [ %103, %101 ], [ 0x47EFFFFFE0000000, %98 ]
  %106 = fcmp oeq float %71, %105
  br i1 %106, label %135, label %107

107:                                              ; preds = %104
  %108 = fcmp oeq float %71, 0.000000e+00
  br i1 %108, label %123, label %109

109:                                              ; preds = %107
  %110 = bitcast float %71 to i32
  %111 = and i32 %110, 2139095040
  %112 = icmp eq i32 %111, 0
  %113 = shl i32 %110, 1
  %114 = and i32 %113, 16777214
  %115 = or i32 %114, 16777216
  %116 = select i1 %112, i32 %114, i32 %115
  %117 = or i32 %116, 1
  %118 = zext i32 %117 to i64
  br i1 %112, label %123, label %119

119:                                              ; preds = %109
  %120 = lshr i32 %110, 23
  %121 = and i32 %120, 255
  %122 = add nsw i32 %121, -151
  br label %123

123:                                              ; preds = %119, %109, %107
  %124 = phi i64 [ 4503599627370496, %107 ], [ %118, %109 ], [ %118, %119 ]
  %125 = phi i32 [ -202, %107 ], [ -150, %109 ], [ %122, %119 ]
  %126 = tail call fastcc i32 @_ZN6icu_6917double_conversionL22CompareBufferWithDiyFpENS0_6VectorIKcEEiNS0_5DiyFpE(i8* %0, i32 %1, i32 %2, i64 %124, i32 %125)
  %127 = icmp slt i32 %126, 0
  br i1 %127, label %135, label %128

128:                                              ; preds = %123
  %129 = icmp eq i32 %126, 0
  br i1 %129, label %130, label %135

130:                                              ; preds = %128
  %131 = bitcast float %71 to i32
  %132 = and i32 %131, 1
  %133 = icmp eq i32 %132, 0
  %134 = select i1 %133, float %71, float %105
  br label %135

135:                                              ; preds = %123, %128, %130, %104, %14
  %136 = phi float [ %15, %14 ], [ %15, %104 ], [ %71, %123 ], [ %105, %128 ], [ %134, %130 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #4
  ret float %136
}

declare void @_ZN6icu_6917double_conversion16PowersOfTenCache32GetCachedPowerForDecimalExponentEiPNS0_5DiyFpEPi(i32, %"class.icu_69::double_conversion::DiyFp"*, i32*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #3

declare void @_ZN6icu_6917double_conversion6Bignum19AssignDecimalStringENS0_6VectorIKcEE(%"class.icu_69::double_conversion::Bignum"*, i8*, i32) local_unnamed_addr #2

declare void @_ZN6icu_6917double_conversion6Bignum12AssignUInt64Em(%"class.icu_69::double_conversion::Bignum"*, i64) local_unnamed_addr #2

declare void @_ZN6icu_6917double_conversion6Bignum20MultiplyByPowerOfTenEi(%"class.icu_69::double_conversion::Bignum"*, i32) local_unnamed_addr #2

declare void @_ZN6icu_6917double_conversion6Bignum9ShiftLeftEi(%"class.icu_69::double_conversion::Bignum"*, i32) local_unnamed_addr #2

declare i32 @_ZN6icu_6917double_conversion6Bignum7CompareERKS1_S3_(%"class.icu_69::double_conversion::Bignum"* dereferenceable(516), %"class.icu_69::double_conversion::Bignum"* dereferenceable(516)) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
