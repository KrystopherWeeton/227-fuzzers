; ModuleID = '../../third_party/blink/renderer/core/animation/timing.cc'
source_filename = "../../third_party/blink/renderer/core/animation/timing.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%union.anon.13 = type { double }
%"class.WTF::ThreadSpecific" = type { %"class.blink::ThreadState"**, %"class.base::ThreadLocalStorage::Slot" }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr", i32, [4 x i8], %"class.std::__1::unique_ptr.150", %"class.std::__1::unique_ptr.150", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.160", %"class.std::__1::unique_ptr.166", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.183", %"class.std::__1::unique_ptr.189", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.196", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.19", %"class.std::__1::unique_ptr.23", %"class.std::__1::unique_ptr.29", %"class.std::__1::unique_ptr.35", %"class.std::__1::unique_ptr.41", %"class.std::__1::unique_ptr.47", %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.65", %"class.std::__1::unique_ptr.72", %"class.std::__1::unique_ptr.79", %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.86", %"class.std::__1::unique_ptr.93", %"class.std::__1::unique_ptr.100", %"class.std::__1::unique_ptr.107", %"class.std::__1::unique_ptr.130", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.19" = type { %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.29" = type { %"class.std::__1::__compressed_pair.30" }
%"class.std::__1::__compressed_pair.30" = type { %"struct.std::__1::__compressed_pair_elem.31" }
%"struct.std::__1::__compressed_pair_elem.31" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.35" = type { %"class.std::__1::__compressed_pair.36" }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.41" = type { %"class.std::__1::__compressed_pair.42" }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.50" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.50" = type { %"struct.std::__1::__atomic_base.51" }
%"struct.std::__1::__atomic_base.51" = type { %"struct.std::__1::__atomic_base.52" }
%"struct.std::__1::__atomic_base.52" = type { %"struct.std::__1::__cxx_atomic_impl.53" }
%"struct.std::__1::__cxx_atomic_impl.53" = type { %"struct.std::__1::__cxx_atomic_base_impl.54" }
%"struct.std::__1::__cxx_atomic_base_impl.54" = type { i64 }
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"class.blink::Worklist.61"* }
%"class.blink::Worklist.61" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.50" }
%"class.std::__1::unique_ptr.65" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %"class.blink::Worklist.68"* }
%"class.blink::Worklist.68" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.50" }
%"class.std::__1::unique_ptr.72" = type { %"class.std::__1::__compressed_pair.73" }
%"class.std::__1::__compressed_pair.73" = type { %"struct.std::__1::__compressed_pair_elem.74" }
%"struct.std::__1::__compressed_pair_elem.74" = type { %"class.blink::Worklist.75"* }
%"class.blink::Worklist.75" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.50" }
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem.81" }
%"struct.std::__1::__compressed_pair_elem.81" = type { %"class.blink::Worklist.82"* }
%"class.blink::Worklist.82" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.50" }
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"class.blink::Worklist.89"* }
%"class.blink::Worklist.89" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.50" }
%"class.std::__1::unique_ptr.93" = type { %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"class.blink::Worklist.96"* }
%"class.blink::Worklist.96" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.50" }
%"class.std::__1::unique_ptr.100" = type { %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"class.blink::Worklist.103"* }
%"class.blink::Worklist.103" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.50" }
%"class.std::__1::unique_ptr.107" = type { %"class.std::__1::__compressed_pair.108" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.110", %"class.std::__1::__compressed_pair.117", %"class.std::__1::__compressed_pair.122", %"class.std::__1::__compressed_pair.124", [4 x i8] }>
%"class.std::__1::unique_ptr.110" = type { %"class.std::__1::__compressed_pair.111" }
%"class.std::__1::__compressed_pair.111" = type { %"struct.std::__1::__compressed_pair_elem.112", %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.112" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.115" = type { i64 }
%"class.std::__1::__compressed_pair.117" = type { %"struct.std::__1::__compressed_pair_elem.118" }
%"struct.std::__1::__compressed_pair_elem.118" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.122" = type { %"struct.std::__1::__compressed_pair_elem.115" }
%"class.std::__1::__compressed_pair.124" = type { %"struct.std::__1::__compressed_pair_elem.125" }
%"struct.std::__1::__compressed_pair_elem.125" = type { float }
%"class.std::__1::unique_ptr.130" = type { %"class.std::__1::__compressed_pair.131" }
%"class.std::__1::__compressed_pair.131" = type { %"struct.std::__1::__compressed_pair_elem.132" }
%"struct.std::__1::__compressed_pair_elem.132" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.133", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.133" = type { %"class.std::__1::__compressed_pair.134" }
%"class.std::__1::__compressed_pair.134" = type { %"struct.std::__1::__compressed_pair_elem.135" }
%"struct.std::__1::__compressed_pair_elem.135" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.142" }
%"class.WTF::Vector.142" = type { %"class.WTF::VectorBuffer.143" }
%"class.WTF::VectorBuffer.143" = type { %"class.WTF::VectorBufferBase.144" }
%"class.WTF::VectorBufferBase.144" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.150" = type { %"class.std::__1::__compressed_pair.151" }
%"class.std::__1::__compressed_pair.151" = type { %"struct.std::__1::__compressed_pair_elem.152" }
%"struct.std::__1::__compressed_pair_elem.152" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.158" }
%"class.WTF::VectorBuffer.158" = type { %"class.WTF::VectorBufferBase.159" }
%"class.WTF::VectorBufferBase.159" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.160" = type { %"class.std::__1::__compressed_pair.161" }
%"class.std::__1::__compressed_pair.161" = type { %"struct.std::__1::__compressed_pair_elem.162" }
%"struct.std::__1::__compressed_pair_elem.162" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.166" = type { %"class.std::__1::__compressed_pair.167" }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.172" }
%"class.std::__1::unique_ptr.172" = type { %"class.std::__1::__compressed_pair.173" }
%"class.std::__1::__compressed_pair.173" = type { %"struct.std::__1::__compressed_pair_elem.174" }
%"struct.std::__1::__compressed_pair_elem.174" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.61"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.68"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.75"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.82"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.89"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.175" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.183" = type { %"class.std::__1::__compressed_pair.184" }
%"class.std::__1::__compressed_pair.184" = type { %"struct.std::__1::__compressed_pair_elem.185" }
%"struct.std::__1::__compressed_pair_elem.185" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.189" = type { %"class.std::__1::__compressed_pair.190" }
%"class.std::__1::__compressed_pair.190" = type { %"struct.std::__1::__compressed_pair_elem.191" }
%"struct.std::__1::__compressed_pair_elem.191" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.195 }
%class.scoped_refptr.195 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.196" = type { %"struct.std::__1::__atomic_base.197" }
%"struct.std::__1::__atomic_base.197" = type { %"struct.std::__1::__cxx_atomic_impl.198" }
%"struct.std::__1::__cxx_atomic_impl.198" = type { %"struct.std::__1::__cxx_atomic_base_impl.199" }
%"struct.std::__1::__cxx_atomic_base_impl.199" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.base::ThreadLocalStorage::Slot" = type { i32, i32 }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"struct.blink::Timing" = type <{ %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta", i32, [4 x i8], double, double, %"class.absl::optional", i32, [4 x i8], %class.scoped_refptr.1, i16, [6 x i8] }>
%"class.blink::AnimationTimeDelta" = type { double }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.blink::AnimationTimeDelta" }
%class.scoped_refptr.1 = type { %"class.blink::TimingFunction"* }
%"class.blink::TimingFunction" = type { i32 (...)**, %"class.WTF::ThreadSafeRefCounted", i32 }
%"class.WTF::ThreadSafeRefCounted" = type { %"class.base::RefCountedThreadSafe" }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i32 }
%"class.blink::EffectTiming" = type { %"class.blink::IDLDictionaryBase", i8, i8, i8, i8, double, %"class.WTF::String", %"class.blink::UnrestrictedDoubleOrString", %"class.WTF::String", double, %"class.WTF::String", double, double }
%"class.blink::IDLDictionaryBase" = type { i32 (...)** }
%"class.blink::UnrestrictedDoubleOrString" = type { i32, %"class.WTF::String", double }
%"class.blink::ComputedEffectTiming" = type { %"class.blink::EffectTiming", i8, i8, %"class.blink::DoubleOrCSSNumericValue", double, %"class.blink::DoubleOrCSSNumericValue", %"class.blink::DoubleOrCSSNumericValue", double }
%"class.blink::DoubleOrCSSNumericValue" = type { i32, %"class.blink::Member", double }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::CSSNumericValue"* }
%"class.blink::CSSNumericValue" = type { %"class.blink::CSSStyleValue", %"class.blink::CSSNumericValueType" }
%"class.blink::CSSStyleValue" = type { %"class.blink::ScriptWrappable", %"class.WTF::String" }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.blink::CSSNumericValueType" = type { %"class.WTF::Vector", i32, i8, i32, [4 x i8] }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer.base", [4 x i8] }
%"class.WTF::VectorBuffer.base" = type <{ %"class.WTF::VectorBufferBase", [28 x i8] }>
%"class.WTF::VectorBufferBase" = type { i32*, i32, i32 }
%"struct.blink::Timing::CalculatedTiming" = type { i32, %"class.absl::optional.9", %"class.absl::optional.9", i8, i8, i8, %"class.absl::optional", %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta" }
%"class.absl::optional.9" = type { %"class.absl::optional_internal::optional_data.10" }
%"class.absl::optional_internal::optional_data.10" = type { %"class.absl::optional_internal::optional_data_base.11" }
%"class.absl::optional_internal::optional_data_base.11" = type { %"class.absl::optional_internal::optional_data_dtor_base.12" }
%"class.absl::optional_internal::optional_data_dtor_base.12" = type { i8, %union.anon.13 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.220" }
%"class.std::__1::__compressed_pair.220" = type { %"struct.std::__1::__compressed_pair_elem.221" }
%"struct.std::__1::__compressed_pair_elem.221" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.222 }
%union.anon.222 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.logging::CheckOpResult" = type { i8* }
%"class.blink::NormalPageArena" = type { %"class.blink::BaseArena.base", [4 x i8], %"class.blink::FreeList", i8*, i64, i64 }
%"class.blink::BaseArena.base" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32 }>
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }

$_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm = comdat any

$_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv = comdat any

$_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv = comdat any

$_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv = comdat any

$_ZNK5blink18AnimationTimeDeltadvES0_ = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = comdat any

$_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = comdat any

@.str = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"forwards\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"backwards\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"both\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"auto\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"normal\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"reverse\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"alternate\00", align 1
@.str.8 = private unnamed_addr constant [18 x i8] c"alternate-reverse\00", align 1
@__const._ZNK5blink6Timing17getComputedTimingERKNS0_16CalculatedTimingEb.duration = private unnamed_addr constant { i32, [4 x i8], %"class.WTF::String", double } { i32 -1431655766, [4 x i8] c"\AA\AA\AA\AA", %"class.WTF::String" { %class.scoped_refptr { %"class.WTF::StringImpl"* inttoptr (i64 -6148914691236517206 to %"class.WTF::StringImpl"*) } }, double 0xFFFFFFFFFFFFFFFF }, align 8
@__const._ZNK5blink6Timing16CalculateTimingsEN4absl8optionalINS_18AnimationTimeDeltaEEENS2_INS0_5PhaseEEENS0_18AnimationDirectionEbNS2_IdEE.current_iteration = private unnamed_addr constant { { { { i8, [7 x i8], %union.anon.13 } } } } { { { { i8, [7 x i8], %union.anon.13 } } } { { { i8, [7 x i8], %union.anon.13 } } { { i8, [7 x i8], %union.anon.13 } { i8 -86, [7 x i8] c"\AA\AA\AA\AA\AA\AA\AA", %union.anon.13 { double 0xFFFFFFFFFFFFFFFF } } } } }, align 8
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@_ZN5blink11ThreadState16thread_specific_E = external local_unnamed_addr global %"class.WTF::ThreadSpecific"*, align 8
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv = private unnamed_addr constant [68 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::ThreadState *]\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"allocation_size > size\00", align 1
@.str.10 = private unnamed_addr constant [59 x i8] c"../../third_party/blink/renderer/platform/heap/impl/heap.h\00", align 1
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo = linkonce_odr hidden constant %"struct.blink::GCInfo" { void (%"class.blink::Visitor"*, i8*)* @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv, void (i8*)* @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv, { i8*, i8 } (i8*)* @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv, i8 1 }, comdat, align 8
@_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index = linkonce_odr hidden global { { i32 } } zeroinitializer, comdat, align 4
@.str.11 = private unnamed_addr constant [13 x i8] c"InternalNode\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8
@.str.12 = private unnamed_addr constant [71 x i8] c"../../third_party/blink/renderer/core/animation/animation_time_delta.h\00", align 1
@.str.13 = private unnamed_addr constant [13 x i8] c"!a.is_zero()\00", align 1
@.str.14 = private unnamed_addr constant [25 x i8] c"!is_inf() || !a.is_inf()\00", align 1
@.str.15 = private unnamed_addr constant [32 x i8] c"../../base/memory/ref_counted.h\00", align 1
@.str.16 = private unnamed_addr constant [27 x i8] c"ref_count_.Increment() > 0\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink6Timing14FillModeStringEN3gfx13KeyframeModel8FillModeE(i32) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::String", align 8
  switch i32 %0, label %8 [
    i32 0, label %3
    i32 1, label %4
    i32 2, label %5
    i32 3, label %6
    i32 4, label %7
  ]

3:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 4) #10
  br label %9

4:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i64 8) #10
  br label %9

5:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i64 9) #10
  br label %9

6:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i64 4) #10
  br label %9

7:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i64 4) #10
  br label %9

8:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i64 4) #10
  br label %9

9:                                                ; preds = %8, %7, %6, %5, %4, %3
  %10 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  ret %"class.WTF::StringImpl"* %11
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink6Timing16StringToFillModeERKN3WTF6StringE(%"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::StringView", align 8
  %3 = alloca %"class.WTF::StringView", align 8
  %4 = alloca %"class.WTF::StringView", align 8
  %5 = alloca %"class.WTF::StringView", align 8
  %6 = alloca %"class.WTF::StringView", align 8
  %7 = alloca %"class.WTF::StringView", align 8
  %8 = alloca %"class.WTF::StringView", align 8
  %9 = alloca %"class.WTF::StringView", align 8
  %10 = bitcast %"class.WTF::StringView"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #10
  %11 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %13 = icmp eq %"class.WTF::StringImpl"* %12, null
  br i1 %13, label %14, label %18

14:                                               ; preds = %1
  %15 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  store i8* null, i8** %15, align 8
  %16 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %17 = bitcast %"class.WTF::StringView"* %8 to i64*
  store i64 %16, i64* %17, align 8
  br label %26

18:                                               ; preds = %1
  %19 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 0
  store %"class.WTF::StringImpl"* %12, %"class.WTF::StringImpl"** %19, align 8
  %20 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %12, i64 1
  %23 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 1
  %24 = bitcast i8** %23 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %22, %"class.WTF::StringImpl"** %24, align 8
  %25 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %26

26:                                               ; preds = %18, %14
  %27 = phi i64 [ %25, %18 ], [ %16, %14 ]
  %28 = phi i32 [ %21, %18 ], [ 0, %14 ]
  %29 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %8, i64 0, i32 2
  store i32 %28, i32* %29, align 8
  %30 = bitcast %"class.WTF::StringView"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %30) #10
  %31 = bitcast %"class.WTF::StringView"* %9 to i64*
  store i64 %27, i64* %31, align 8
  %32 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8** %32, align 8
  %33 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %9, i64 0, i32 2
  store i32 4, i32* %33, align 8
  %34 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %8, %"class.WTF::StringView"* nonnull dereferenceable(24) %9) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %30) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #10
  br i1 %34, label %111, label %35

35:                                               ; preds = %26
  %36 = bitcast %"class.WTF::StringView"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %36) #10
  %37 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %38 = icmp eq %"class.WTF::StringImpl"* %37, null
  br i1 %38, label %39, label %43

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  store i8* null, i8** %40, align 8
  %41 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %42 = bitcast %"class.WTF::StringView"* %6 to i64*
  store i64 %41, i64* %42, align 8
  br label %51

43:                                               ; preds = %35
  %44 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 0
  store %"class.WTF::StringImpl"* %37, %"class.WTF::StringImpl"** %44, align 8
  %45 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 0, i32 1
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %37, i64 1
  %48 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 1
  %49 = bitcast i8** %48 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %47, %"class.WTF::StringImpl"** %49, align 8
  %50 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %51

51:                                               ; preds = %43, %39
  %52 = phi i64 [ %50, %43 ], [ %41, %39 ]
  %53 = phi i32 [ %46, %43 ], [ 0, %39 ]
  %54 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %6, i64 0, i32 2
  store i32 %53, i32* %54, align 8
  %55 = bitcast %"class.WTF::StringView"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %55) #10
  %56 = bitcast %"class.WTF::StringView"* %7 to i64*
  store i64 %52, i64* %56, align 8
  %57 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 1
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i8** %57, align 8
  %58 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %7, i64 0, i32 2
  store i32 9, i32* %58, align 8
  %59 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %6, %"class.WTF::StringView"* nonnull dereferenceable(24) %7) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %55) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %36) #10
  br i1 %59, label %111, label %60

60:                                               ; preds = %51
  %61 = bitcast %"class.WTF::StringView"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %61) #10
  %62 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %63 = icmp eq %"class.WTF::StringImpl"* %62, null
  br i1 %63, label %64, label %68

64:                                               ; preds = %60
  %65 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  store i8* null, i8** %65, align 8
  %66 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %67 = bitcast %"class.WTF::StringView"* %4 to i64*
  store i64 %66, i64* %67, align 8
  br label %76

68:                                               ; preds = %60
  %69 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 0
  store %"class.WTF::StringImpl"* %62, %"class.WTF::StringImpl"** %69, align 8
  %70 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 0, i32 1
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %62, i64 1
  %73 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 1
  %74 = bitcast i8** %73 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %72, %"class.WTF::StringImpl"** %74, align 8
  %75 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %76

76:                                               ; preds = %68, %64
  %77 = phi i64 [ %75, %68 ], [ %66, %64 ]
  %78 = phi i32 [ %71, %68 ], [ 0, %64 ]
  %79 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %4, i64 0, i32 2
  store i32 %78, i32* %79, align 8
  %80 = bitcast %"class.WTF::StringView"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %80) #10
  %81 = bitcast %"class.WTF::StringView"* %5 to i64*
  store i64 %77, i64* %81, align 8
  %82 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 1
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i8** %82, align 8
  %83 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %5, i64 0, i32 2
  store i32 4, i32* %83, align 8
  %84 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %4, %"class.WTF::StringView"* nonnull dereferenceable(24) %5) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %80) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %61) #10
  br i1 %84, label %111, label %85

85:                                               ; preds = %76
  %86 = bitcast %"class.WTF::StringView"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %86) #10
  %87 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %11, align 8
  %88 = icmp eq %"class.WTF::StringImpl"* %87, null
  br i1 %88, label %89, label %93

89:                                               ; preds = %85
  %90 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %2, i64 0, i32 1
  store i8* null, i8** %90, align 8
  %91 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  %92 = bitcast %"class.WTF::StringView"* %2 to i64*
  store i64 %91, i64* %92, align 8
  br label %101

93:                                               ; preds = %85
  %94 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %2, i64 0, i32 0
  store %"class.WTF::StringImpl"* %87, %"class.WTF::StringImpl"** %94, align 8
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %87, i64 0, i32 1
  %96 = load i32, i32* %95, align 4
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %87, i64 1
  %98 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %2, i64 0, i32 1
  %99 = bitcast i8** %98 to %"class.WTF::StringImpl"**
  store %"class.WTF::StringImpl"* %97, %"class.WTF::StringImpl"** %99, align 8
  %100 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %101

101:                                              ; preds = %93, %89
  %102 = phi i64 [ %100, %93 ], [ %91, %89 ]
  %103 = phi i32 [ %96, %93 ], [ 0, %89 ]
  %104 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %2, i64 0, i32 2
  store i32 %103, i32* %104, align 8
  %105 = bitcast %"class.WTF::StringView"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %105) #10
  %106 = bitcast %"class.WTF::StringView"* %3 to i64*
  store i64 %102, i64* %106, align 8
  %107 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 1
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i8** %107, align 8
  %108 = getelementptr inbounds %"class.WTF::StringView", %"class.WTF::StringView"* %3, i64 0, i32 2
  store i32 8, i32* %108, align 8
  %109 = call zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* nonnull dereferenceable(24) %2, %"class.WTF::StringView"* nonnull dereferenceable(24) %3) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %105) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %86) #10
  %110 = select i1 %109, i32 1, i32 4
  br label %111

111:                                              ; preds = %101, %76, %51, %26
  %112 = phi i32 [ 0, %26 ], [ 2, %51 ], [ 3, %76 ], [ %110, %101 ]
  ret i32 %112
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.WTF::StringImpl"* @_ZN5blink6Timing23PlaybackDirectionStringEN3gfx13KeyframeModel9DirectionE(i32) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::String", align 8
  switch i32 %0, label %7 [
    i32 0, label %3
    i32 1, label %4
    i32 2, label %5
    i32 3, label %6
  ]

3:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), i64 6) #10
  br label %8

4:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0), i64 7) #10
  br label %8

5:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0), i64 9) #10
  br label %8

6:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.8, i64 0, i64 0), i64 17) #10
  br label %8

7:                                                ; preds = %1
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %2, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), i64 6) #10
  br label %8

8:                                                ; preds = %7, %6, %5, %4, %3
  %9 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %2, i64 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  ret %"class.WTF::StringImpl"* %10
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink6Timing16ResolvedFillModeEb(%"struct.blink::Timing"* nocapture readonly, i1 zeroext) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 2
  %4 = load i32, i32* %3, align 8
  %5 = icmp eq i32 %4, 4
  %6 = select i1 %1, i32 0, i32 3
  %7 = select i1 %5, i32 %6, i32 %4
  ret i32 %7
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden double @_ZNK5blink6Timing17IterationDurationEv(%"struct.blink::Timing"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = alloca double, align 8
  %3 = bitcast double* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3)
  store double 0.000000e+00, double* %2, align 8
  %4 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 1, i32 0
  %8 = bitcast double* %2 to %"class.blink::AnimationTimeDelta"*
  %9 = select i1 %6, %"class.blink::AnimationTimeDelta"* %8, %"class.blink::AnimationTimeDelta"* %7
  %10 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %9, i64 0, i32 0
  %11 = load double, double* %10, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3)
  ret double %11
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind readonly ssp uwtable
define hidden double @_ZNK5blink6Timing14ActiveDurationEv(%"struct.blink::Timing"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %2 = alloca double, align 8
  %3 = bitcast double* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3)
  store double 0.000000e+00, double* %2, align 8
  %4 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  %7 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 1, i32 0
  %8 = bitcast double* %2 to %"class.blink::AnimationTimeDelta"*
  %9 = select i1 %6, %"class.blink::AnimationTimeDelta"* %8, %"class.blink::AnimationTimeDelta"* %7
  %10 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %9, i64 0, i32 0
  %11 = load double, double* %10, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3)
  %12 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 5
  %13 = load double, double* %12, align 8
  %14 = fcmp oeq double %11, 0.000000e+00
  %15 = fcmp oeq double %13, 0.000000e+00
  %16 = or i1 %14, %15
  %17 = fmul double %11, %13
  %18 = select i1 %16, double 0.000000e+00, double %17
  ret double %18
}

; Function Attrs: nounwind ssp uwtable
define hidden double @_ZNK5blink6Timing15EndTimeInternalEv(%"struct.blink::Timing"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca double, align 8
  %3 = alloca %"class.blink::AnimationTimeDelta", align 8
  %4 = alloca %"class.blink::AnimationTimeDelta", align 8
  %5 = bitcast %"class.blink::AnimationTimeDelta"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #10
  %6 = bitcast double* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6)
  store double 0.000000e+00, double* %2, align 8
  %7 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  %10 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 1, i32 0
  %11 = bitcast double* %2 to %"class.blink::AnimationTimeDelta"*
  %12 = select i1 %9, %"class.blink::AnimationTimeDelta"* %11, %"class.blink::AnimationTimeDelta"* %10
  %13 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %12, i64 0, i32 0
  %14 = load double, double* %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6)
  %15 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 5
  %16 = load double, double* %15, align 8
  %17 = fcmp oeq double %14, 0.000000e+00
  %18 = fcmp oeq double %16, 0.000000e+00
  %19 = or i1 %17, %18
  %20 = fmul double %14, %16
  %21 = select i1 %19, double 0.000000e+00, double %20
  %22 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 0, i32 0
  %23 = load double, double* %22, align 8
  %24 = fadd double %23, %21
  %25 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 1, i32 0
  %26 = load double, double* %25, align 8
  %27 = fadd double %26, %24
  %28 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %3, i64 0, i32 0
  store double %27, double* %28, align 8
  %29 = bitcast %"class.blink::AnimationTimeDelta"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #10
  %30 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %4, i64 0, i32 0
  store double 0.000000e+00, double* %30, align 8
  %31 = call zeroext i1 @_ZN5blinkltERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %3, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %4) #10
  %32 = select i1 %31, %"class.blink::AnimationTimeDelta"* %4, %"class.blink::AnimationTimeDelta"* %3
  %33 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %32, i64 0, i32 0
  %34 = load double, double* %33, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #10
  ret double %34
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::EffectTiming"* @_ZNK5blink6Timing21ConvertToEffectTimingEv(%"struct.blink::Timing"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.blink::UnrestrictedDoubleOrString", align 8
  %3 = alloca %"class.WTF::String", align 8
  %4 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64 96) #10
  %5 = bitcast i8* %4 to %"class.blink::EffectTiming"*
  tail call void @_ZN5blink12EffectTimingC1Ev(%"class.blink::EffectTiming"* %5) #10
  %6 = getelementptr inbounds i8, i8* %4, i64 -4
  %7 = bitcast i8* %6 to i16*
  %8 = load atomic i16, i16* %7 monotonic, align 2
  %9 = or i16 %8, 1
  store atomic i16 %9, i16* %7 release, align 2
  %10 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 0, i32 0
  %11 = load double, double* %10, align 8
  %12 = fmul double %11, 1.000000e+03
  %13 = getelementptr inbounds i8, i8* %4, i64 16
  %14 = bitcast i8* %13 to double*
  store double %12, double* %14, align 8
  %15 = getelementptr inbounds i8, i8* %4, i64 8
  store i8 1, i8* %15, align 8
  %16 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 1, i32 0
  %17 = load double, double* %16, align 8
  %18 = fmul double %17, 1.000000e+03
  %19 = getelementptr inbounds i8, i8* %4, i64 64
  %20 = bitcast i8* %19 to double*
  store double %18, double* %20, align 8
  %21 = getelementptr inbounds i8, i8* %4, i64 9
  store i8 1, i8* %21, align 1
  %22 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 2
  %23 = load i32, i32* %22, align 8
  %24 = tail call %"class.WTF::StringImpl"* @_ZN5blink6Timing14FillModeStringEN3gfx13KeyframeModel8FillModeE(i32 %23)
  %25 = getelementptr inbounds i8, i8* %4, i64 72
  %26 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %26, label %44, label %27

27:                                               ; preds = %1
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = and i32 %29, 2
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %44

32:                                               ; preds = %27
  %33 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %34 = load i32, i32* %33, align 4
  %35 = zext i32 %34 to i33
  %36 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %35, i33 1) #10
  %37 = extractvalue { i33, i1 } %36, 1
  %38 = extractvalue { i33, i1 } %36, 0
  %39 = icmp slt i33 %38, 0
  %40 = or i1 %37, %39
  br i1 %40, label %41, label %42, !prof !3

41:                                               ; preds = %32
  tail call void @llvm.trap() #10
  unreachable

42:                                               ; preds = %32
  %43 = trunc i33 %38 to i32
  store i32 %43, i32* %33, align 4
  br label %44

44:                                               ; preds = %42, %27, %1
  %45 = ptrtoint %"class.WTF::StringImpl"* %24 to i64
  %46 = bitcast i8* %25 to i64*
  %47 = bitcast i8* %25 to %"class.WTF::StringImpl"**
  %48 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %47, align 8
  store i64 %45, i64* %46, align 8
  %49 = icmp eq %"class.WTF::StringImpl"* %48, null
  br i1 %49, label %63, label %50

50:                                               ; preds = %44
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %48, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %52 = load atomic i32, i32* %51 monotonic, align 4
  %53 = and i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %48, i64 0, i32 0
  %56 = load i32, i32* %55, align 4
  br i1 %54, label %57, label %59

57:                                               ; preds = %50
  %58 = add i32 %56, -1
  store i32 %58, i32* %55, align 4
  br label %59

59:                                               ; preds = %57, %50
  %60 = phi i32 [ %58, %57 ], [ %56, %50 ]
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %63

62:                                               ; preds = %59
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %48) #10
  br label %63

63:                                               ; preds = %44, %59, %62
  br i1 %26, label %77, label %64

64:                                               ; preds = %63
  %65 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %66 = load atomic i32, i32* %65 monotonic, align 4
  %67 = and i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %70 = load i32, i32* %69, align 4
  br i1 %68, label %71, label %73

71:                                               ; preds = %64
  %72 = add i32 %70, -1
  store i32 %72, i32* %69, align 4
  br label %73

73:                                               ; preds = %71, %64
  %74 = phi i32 [ %72, %71 ], [ %70, %64 ]
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %77

76:                                               ; preds = %73
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %24) #10
  br label %77

77:                                               ; preds = %63, %73, %76
  %78 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 4
  %79 = bitcast double* %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds i8, i8* %4, i64 80
  %82 = bitcast i8* %81 to i64*
  store i64 %80, i64* %82, align 8
  %83 = getelementptr inbounds i8, i8* %4, i64 10
  store i8 1, i8* %83, align 2
  %84 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 5
  %85 = bitcast double* %84 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = getelementptr inbounds i8, i8* %4, i64 88
  %88 = bitcast i8* %87 to i64*
  store i64 %86, i64* %88, align 8
  %89 = getelementptr inbounds i8, i8* %4, i64 11
  store i8 1, i8* %89, align 1
  %90 = bitcast %"class.blink::UnrestrictedDoubleOrString"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %90) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %90, i8* align 8 bitcast ({ i32, [4 x i8], %"class.WTF::String", double }* @__const._ZNK5blink6Timing17getComputedTimingERKNS0_16CalculatedTimingEb.duration to i8*), i64 24, i1 false)
  call void @_ZN5blink26UnrestrictedDoubleOrStringC1Ev(%"class.blink::UnrestrictedDoubleOrString"* nonnull %2) #10
  %91 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %92 = load i8, i8* %91, align 8, !range !2
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %98, label %94

94:                                               ; preds = %77
  %95 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %96 = load double, double* %95, align 8
  %97 = fmul double %96, 1.000000e+03
  call void @_ZN5blink26UnrestrictedDoubleOrString21SetUnrestrictedDoubleEd(%"class.blink::UnrestrictedDoubleOrString"* nonnull %2, double %97) #10
  br label %117

98:                                               ; preds = %77
  %99 = bitcast %"class.WTF::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %99) #10
  call void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"* nonnull %3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i64 4) #10
  call void @_ZN5blink26UnrestrictedDoubleOrString9SetStringERKN3WTF6StringE(%"class.blink::UnrestrictedDoubleOrString"* nonnull %2, %"class.WTF::String"* nonnull dereferenceable(8) %3) #10
  %100 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %101 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %100, align 8
  %102 = icmp eq %"class.WTF::StringImpl"* %101, null
  br i1 %102, label %116, label %103

103:                                              ; preds = %98
  %104 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %101, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %105 = load atomic i32, i32* %104 monotonic, align 4
  %106 = and i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %101, i64 0, i32 0
  %109 = load i32, i32* %108, align 4
  br i1 %107, label %110, label %112

110:                                              ; preds = %103
  %111 = add i32 %109, -1
  store i32 %111, i32* %108, align 4
  br label %112

112:                                              ; preds = %110, %103
  %113 = phi i32 [ %111, %110 ], [ %109, %103 ]
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %116

115:                                              ; preds = %112
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %101) #10
  br label %116

116:                                              ; preds = %98, %112, %115
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %99) #10
  br label %117

117:                                              ; preds = %116, %94
  call void @_ZN5blink12EffectTiming11setDurationERKNS_26UnrestrictedDoubleOrStringE(%"class.blink::EffectTiming"* %5, %"class.blink::UnrestrictedDoubleOrString"* nonnull dereferenceable(24) %2) #10
  %118 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 7
  %119 = load i32, i32* %118, align 8
  %120 = call %"class.WTF::StringImpl"* @_ZN5blink6Timing23PlaybackDirectionStringEN3gfx13KeyframeModel9DirectionE(i32 %119)
  %121 = getelementptr inbounds i8, i8* %4, i64 24
  %122 = icmp eq %"class.WTF::StringImpl"* %120, null
  br i1 %122, label %140, label %123

123:                                              ; preds = %117
  %124 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %120, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %125 = load atomic i32, i32* %124 monotonic, align 4
  %126 = and i32 %125, 2
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %128, label %140

128:                                              ; preds = %123
  %129 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %120, i64 0, i32 0
  %130 = load i32, i32* %129, align 4
  %131 = zext i32 %130 to i33
  %132 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %131, i33 1) #10
  %133 = extractvalue { i33, i1 } %132, 1
  %134 = extractvalue { i33, i1 } %132, 0
  %135 = icmp slt i33 %134, 0
  %136 = or i1 %133, %135
  br i1 %136, label %137, label %138, !prof !3

137:                                              ; preds = %128
  call void @llvm.trap() #10
  unreachable

138:                                              ; preds = %128
  %139 = trunc i33 %134 to i32
  store i32 %139, i32* %129, align 4
  br label %140

140:                                              ; preds = %138, %123, %117
  %141 = ptrtoint %"class.WTF::StringImpl"* %120 to i64
  %142 = bitcast i8* %121 to i64*
  %143 = bitcast i8* %121 to %"class.WTF::StringImpl"**
  %144 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %143, align 8
  store i64 %141, i64* %142, align 8
  %145 = icmp eq %"class.WTF::StringImpl"* %144, null
  br i1 %145, label %159, label %146

146:                                              ; preds = %140
  %147 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %148 = load atomic i32, i32* %147 monotonic, align 4
  %149 = and i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %144, i64 0, i32 0
  %152 = load i32, i32* %151, align 4
  br i1 %150, label %153, label %155

153:                                              ; preds = %146
  %154 = add i32 %152, -1
  store i32 %154, i32* %151, align 4
  br label %155

155:                                              ; preds = %153, %146
  %156 = phi i32 [ %154, %153 ], [ %152, %146 ]
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %158, label %159

158:                                              ; preds = %155
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %144) #10
  br label %159

159:                                              ; preds = %140, %155, %158
  br i1 %122, label %173, label %160

160:                                              ; preds = %159
  %161 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %120, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %162 = load atomic i32, i32* %161 monotonic, align 4
  %163 = and i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %120, i64 0, i32 0
  %166 = load i32, i32* %165, align 4
  br i1 %164, label %167, label %169

167:                                              ; preds = %160
  %168 = add i32 %166, -1
  store i32 %168, i32* %165, align 4
  br label %169

169:                                              ; preds = %167, %160
  %170 = phi i32 [ %168, %167 ], [ %166, %160 ]
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %172, label %173

172:                                              ; preds = %169
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %120) #10
  br label %173

173:                                              ; preds = %159, %169, %172
  %174 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 9, i32 0
  %175 = load %"class.blink::TimingFunction"*, %"class.blink::TimingFunction"** %174, align 8
  %176 = bitcast %"class.blink::TimingFunction"* %175 to %"class.WTF::StringImpl"* (%"class.blink::TimingFunction"*)***
  %177 = load %"class.WTF::StringImpl"* (%"class.blink::TimingFunction"*)**, %"class.WTF::StringImpl"* (%"class.blink::TimingFunction"*)*** %176, align 8
  %178 = getelementptr inbounds %"class.WTF::StringImpl"* (%"class.blink::TimingFunction"*)*, %"class.WTF::StringImpl"* (%"class.blink::TimingFunction"*)** %177, i64 2
  %179 = load %"class.WTF::StringImpl"* (%"class.blink::TimingFunction"*)*, %"class.WTF::StringImpl"* (%"class.blink::TimingFunction"*)** %178, align 8
  %180 = call %"class.WTF::StringImpl"* %179(%"class.blink::TimingFunction"* %175) #10
  %181 = getelementptr inbounds i8, i8* %4, i64 56
  %182 = icmp eq %"class.WTF::StringImpl"* %180, null
  br i1 %182, label %200, label %183

183:                                              ; preds = %173
  %184 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %180, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %185 = load atomic i32, i32* %184 monotonic, align 4
  %186 = and i32 %185, 2
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %200

188:                                              ; preds = %183
  %189 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %180, i64 0, i32 0
  %190 = load i32, i32* %189, align 4
  %191 = zext i32 %190 to i33
  %192 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %191, i33 1) #10
  %193 = extractvalue { i33, i1 } %192, 1
  %194 = extractvalue { i33, i1 } %192, 0
  %195 = icmp slt i33 %194, 0
  %196 = or i1 %193, %195
  br i1 %196, label %197, label %198, !prof !3

197:                                              ; preds = %188
  call void @llvm.trap() #10
  unreachable

198:                                              ; preds = %188
  %199 = trunc i33 %194 to i32
  store i32 %199, i32* %189, align 4
  br label %200

200:                                              ; preds = %198, %183, %173
  %201 = ptrtoint %"class.WTF::StringImpl"* %180 to i64
  %202 = bitcast i8* %181 to i64*
  %203 = bitcast i8* %181 to %"class.WTF::StringImpl"**
  %204 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %203, align 8
  store i64 %201, i64* %202, align 8
  %205 = icmp eq %"class.WTF::StringImpl"* %204, null
  br i1 %205, label %219, label %206

206:                                              ; preds = %200
  %207 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %204, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %208 = load atomic i32, i32* %207 monotonic, align 4
  %209 = and i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %204, i64 0, i32 0
  %212 = load i32, i32* %211, align 4
  br i1 %210, label %213, label %215

213:                                              ; preds = %206
  %214 = add i32 %212, -1
  store i32 %214, i32* %211, align 4
  br label %215

215:                                              ; preds = %213, %206
  %216 = phi i32 [ %214, %213 ], [ %212, %206 ]
  %217 = icmp eq i32 %216, 0
  br i1 %217, label %218, label %219

218:                                              ; preds = %215
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %204) #10
  br label %219

219:                                              ; preds = %200, %215, %218
  br i1 %182, label %233, label %220

220:                                              ; preds = %219
  %221 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %180, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %222 = load atomic i32, i32* %221 monotonic, align 4
  %223 = and i32 %222, 2
  %224 = icmp eq i32 %223, 0
  %225 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %180, i64 0, i32 0
  %226 = load i32, i32* %225, align 4
  br i1 %224, label %227, label %229

227:                                              ; preds = %220
  %228 = add i32 %226, -1
  store i32 %228, i32* %225, align 4
  br label %229

229:                                              ; preds = %227, %220
  %230 = phi i32 [ %228, %227 ], [ %226, %220 ]
  %231 = icmp eq i32 %230, 0
  br i1 %231, label %232, label %233

232:                                              ; preds = %229
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %180) #10
  br label %233

233:                                              ; preds = %219, %229, %232
  call void @_ZN5blink26UnrestrictedDoubleOrStringD1Ev(%"class.blink::UnrestrictedDoubleOrString"* nonnull %2) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %90) #10
  ret %"class.blink::EffectTiming"* %5
}

declare void @_ZN5blink26UnrestrictedDoubleOrStringC1Ev(%"class.blink::UnrestrictedDoubleOrString"*) unnamed_addr #4

declare void @_ZN5blink26UnrestrictedDoubleOrString21SetUnrestrictedDoubleEd(%"class.blink::UnrestrictedDoubleOrString"*, double) local_unnamed_addr #4

declare void @_ZN5blink26UnrestrictedDoubleOrString9SetStringERKN3WTF6StringE(%"class.blink::UnrestrictedDoubleOrString"*, %"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #4

declare void @_ZN5blink12EffectTiming11setDurationERKNS_26UnrestrictedDoubleOrStringE(%"class.blink::EffectTiming"*, %"class.blink::UnrestrictedDoubleOrString"* dereferenceable(24)) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN5blink26UnrestrictedDoubleOrStringD1Ev(%"class.blink::UnrestrictedDoubleOrString"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden %"class.blink::ComputedEffectTiming"* @_ZNK5blink6Timing17getComputedTimingERKNS0_16CalculatedTimingEb(%"struct.blink::Timing"* nocapture readonly, %"struct.blink::Timing::CalculatedTiming"* nocapture readonly dereferenceable(88), i1 zeroext) local_unnamed_addr #0 align 2 {
  %4 = alloca double, align 8
  %5 = alloca double, align 8
  %6 = alloca double, align 8
  %7 = alloca %"class.blink::AnimationTimeDelta", align 8
  %8 = alloca %"class.blink::AnimationTimeDelta", align 8
  %9 = alloca %"class.blink::DoubleOrCSSNumericValue", align 8
  %10 = alloca %"class.blink::DoubleOrCSSNumericValue", align 8
  %11 = alloca %"class.blink::DoubleOrCSSNumericValue", align 8
  %12 = alloca %"class.blink::DoubleOrCSSNumericValue", align 8
  %13 = alloca %"class.blink::UnrestrictedDoubleOrString", align 8
  %14 = tail call i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64 192) #10
  %15 = bitcast i8* %14 to %"class.blink::ComputedEffectTiming"*
  tail call void @_ZN5blink20ComputedEffectTimingC1Ev(%"class.blink::ComputedEffectTiming"* %15) #10
  %16 = getelementptr inbounds i8, i8* %14, i64 -4
  %17 = bitcast i8* %16 to i16*
  %18 = load atomic i16, i16* %17 monotonic, align 2
  %19 = or i16 %18, 1
  store atomic i16 %19, i16* %17 release, align 2
  %20 = bitcast %"class.blink::DoubleOrCSSNumericValue"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %20) #10
  %21 = bitcast %"class.blink::AnimationTimeDelta"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #10
  %22 = bitcast double* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22)
  store double 0.000000e+00, double* %6, align 8
  %23 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %24 = load i8, i8* %23, align 8, !range !2
  %25 = icmp eq i8 %24, 0
  %26 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 1, i32 0
  %27 = bitcast double* %6 to %"class.blink::AnimationTimeDelta"*
  %28 = select i1 %25, %"class.blink::AnimationTimeDelta"* %27, %"class.blink::AnimationTimeDelta"* %26
  %29 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %28, i64 0, i32 0
  %30 = load double, double* %29, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22)
  %31 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 5
  %32 = load double, double* %31, align 8
  %33 = fcmp oeq double %30, 0.000000e+00
  %34 = fcmp oeq double %32, 0.000000e+00
  %35 = or i1 %33, %34
  %36 = fmul double %30, %32
  %37 = select i1 %35, double 0.000000e+00, double %36
  %38 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 0, i32 0
  %39 = load double, double* %38, align 8
  %40 = fadd double %39, %37
  %41 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 1, i32 0
  %42 = load double, double* %41, align 8
  %43 = fadd double %42, %40
  %44 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %7, i64 0, i32 0
  store double %43, double* %44, align 8
  %45 = bitcast %"class.blink::AnimationTimeDelta"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #10
  %46 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %8, i64 0, i32 0
  store double 0.000000e+00, double* %46, align 8
  %47 = call zeroext i1 @_ZN5blinkltERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %7, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %8) #10
  %48 = select i1 %47, %"class.blink::AnimationTimeDelta"* %8, %"class.blink::AnimationTimeDelta"* %7
  %49 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %48, i64 0, i32 0
  %50 = load double, double* %49, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #10
  %51 = fmul double %50, 1.000000e+03
  call void @_ZN5blink23DoubleOrCSSNumericValue10FromDoubleEd(%"class.blink::DoubleOrCSSNumericValue"* nonnull sret %9, double %51) #10
  call void @_ZN5blink20ComputedEffectTiming10setEndTimeERKNS_23DoubleOrCSSNumericValueE(%"class.blink::ComputedEffectTiming"* %15, %"class.blink::DoubleOrCSSNumericValue"* nonnull dereferenceable(24) %9) #10
  call void @_ZN5blink23DoubleOrCSSNumericValueD1Ev(%"class.blink::DoubleOrCSSNumericValue"* nonnull %9) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %20) #10
  %52 = bitcast %"class.blink::DoubleOrCSSNumericValue"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %52) #10
  %53 = bitcast double* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %53)
  store double 0.000000e+00, double* %5, align 8
  %54 = load i8, i8* %23, align 8, !range !2
  %55 = icmp eq i8 %54, 0
  %56 = bitcast double* %5 to %"class.blink::AnimationTimeDelta"*
  %57 = select i1 %55, %"class.blink::AnimationTimeDelta"* %56, %"class.blink::AnimationTimeDelta"* %26
  %58 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %57, i64 0, i32 0
  %59 = load double, double* %58, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %53)
  %60 = load double, double* %31, align 8
  %61 = fcmp oeq double %59, 0.000000e+00
  %62 = fcmp oeq double %60, 0.000000e+00
  %63 = or i1 %61, %62
  %64 = fmul double %59, %60
  %65 = fmul double %64, 1.000000e+03
  %66 = select i1 %63, double 0.000000e+00, double %65
  call void @_ZN5blink23DoubleOrCSSNumericValue10FromDoubleEd(%"class.blink::DoubleOrCSSNumericValue"* nonnull sret %10, double %66) #10
  call void @_ZN5blink20ComputedEffectTiming17setActiveDurationERKNS_23DoubleOrCSSNumericValueE(%"class.blink::ComputedEffectTiming"* %15, %"class.blink::DoubleOrCSSNumericValue"* nonnull dereferenceable(24) %10) #10
  call void @_ZN5blink23DoubleOrCSSNumericValueD1Ev(%"class.blink::DoubleOrCSSNumericValue"* nonnull %10) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %52) #10
  %67 = getelementptr inbounds %"struct.blink::Timing::CalculatedTiming", %"struct.blink::Timing::CalculatedTiming"* %1, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %68 = load i8, i8* %67, align 8, !range !2
  %69 = icmp eq i8 %68, 0
  br i1 %69, label %75, label %70

70:                                               ; preds = %3
  %71 = bitcast %"class.blink::DoubleOrCSSNumericValue"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %71) #10
  %72 = getelementptr inbounds %"struct.blink::Timing::CalculatedTiming", %"struct.blink::Timing::CalculatedTiming"* %1, i64 0, i32 6, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %73 = load double, double* %72, align 8
  %74 = fmul double %73, 1.000000e+03
  call void @_ZN5blink23DoubleOrCSSNumericValue10FromDoubleEd(%"class.blink::DoubleOrCSSNumericValue"* nonnull sret %11, double %74) #10
  br label %77

75:                                               ; preds = %3
  %76 = bitcast %"class.blink::DoubleOrCSSNumericValue"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %76) #10
  call void @_ZN5blink23DoubleOrCSSNumericValueC1Ev(%"class.blink::DoubleOrCSSNumericValue"* nonnull %12) #10
  br label %77

77:                                               ; preds = %75, %70
  %78 = phi %"class.blink::DoubleOrCSSNumericValue"* [ %12, %75 ], [ %11, %70 ]
  %79 = phi i8* [ %76, %75 ], [ %71, %70 ]
  call void @_ZN5blink20ComputedEffectTiming12setLocalTimeERKNS_23DoubleOrCSSNumericValueE(%"class.blink::ComputedEffectTiming"* %15, %"class.blink::DoubleOrCSSNumericValue"* nonnull dereferenceable(24) %78) #10
  call void @_ZN5blink23DoubleOrCSSNumericValueD1Ev(%"class.blink::DoubleOrCSSNumericValue"* nonnull %78) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %79) #10
  %80 = getelementptr inbounds %"struct.blink::Timing::CalculatedTiming", %"struct.blink::Timing::CalculatedTiming"* %1, i64 0, i32 4
  %81 = load i8, i8* %80, align 1, !range !2
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %105, label %83

83:                                               ; preds = %77
  %84 = getelementptr inbounds %"struct.blink::Timing::CalculatedTiming", %"struct.blink::Timing::CalculatedTiming"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %85 = load i8, i8* %84, align 8, !range !2
  %86 = icmp eq i8 %85, 0
  br i1 %86, label %87, label %88

87:                                               ; preds = %83
  call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #11
  unreachable

88:                                               ; preds = %83
  %89 = getelementptr inbounds %"struct.blink::Timing::CalculatedTiming", %"struct.blink::Timing::CalculatedTiming"* %1, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %90 = bitcast double* %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = getelementptr inbounds i8, i8* %14, i64 184
  %93 = bitcast i8* %92 to i64*
  store i64 %91, i64* %93, align 8
  %94 = getelementptr inbounds i8, i8* %14, i64 97
  store i8 1, i8* %94, align 1
  %95 = getelementptr inbounds %"struct.blink::Timing::CalculatedTiming", %"struct.blink::Timing::CalculatedTiming"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %96 = load i8, i8* %95, align 8, !range !2
  %97 = icmp eq i8 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %88
  call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #11
  unreachable

99:                                               ; preds = %88
  %100 = getelementptr inbounds %"struct.blink::Timing::CalculatedTiming", %"struct.blink::Timing::CalculatedTiming"* %1, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %101 = bitcast double* %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = getelementptr inbounds i8, i8* %14, i64 128
  %104 = bitcast i8* %103 to i64*
  store i64 %102, i64* %104, align 8
  br label %107

105:                                              ; preds = %77
  %106 = getelementptr inbounds i8, i8* %14, i64 97
  store i8 0, i8* %106, align 1
  br label %107

107:                                              ; preds = %105, %99
  %108 = phi i8 [ 0, %105 ], [ 1, %99 ]
  %109 = getelementptr inbounds i8, i8* %14, i64 96
  store i8 %108, i8* %109, align 8
  %110 = bitcast i8* %14 to %"class.blink::EffectTiming"*
  %111 = load double, double* %38, align 8
  %112 = fmul double %111, 1.000000e+03
  %113 = getelementptr inbounds i8, i8* %14, i64 16
  %114 = bitcast i8* %113 to double*
  store double %112, double* %114, align 8
  %115 = getelementptr inbounds i8, i8* %14, i64 8
  store i8 1, i8* %115, align 8
  %116 = load double, double* %41, align 8
  %117 = fmul double %116, 1.000000e+03
  %118 = getelementptr inbounds i8, i8* %14, i64 64
  %119 = bitcast i8* %118 to double*
  store double %117, double* %119, align 8
  %120 = getelementptr inbounds i8, i8* %14, i64 9
  store i8 1, i8* %120, align 1
  %121 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 2
  %122 = load i32, i32* %121, align 8
  %123 = icmp eq i32 %122, 4
  %124 = select i1 %2, i32 0, i32 3
  %125 = select i1 %123, i32 %124, i32 %122
  %126 = call %"class.WTF::StringImpl"* @_ZN5blink6Timing14FillModeStringEN3gfx13KeyframeModel8FillModeE(i32 %125)
  %127 = getelementptr inbounds i8, i8* %14, i64 72
  %128 = icmp eq %"class.WTF::StringImpl"* %126, null
  br i1 %128, label %146, label %129

129:                                              ; preds = %107
  %130 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %126, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %131 = load atomic i32, i32* %130 monotonic, align 4
  %132 = and i32 %131, 2
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %146

134:                                              ; preds = %129
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %126, i64 0, i32 0
  %136 = load i32, i32* %135, align 4
  %137 = zext i32 %136 to i33
  %138 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %137, i33 1) #10
  %139 = extractvalue { i33, i1 } %138, 1
  %140 = extractvalue { i33, i1 } %138, 0
  %141 = icmp slt i33 %140, 0
  %142 = or i1 %139, %141
  br i1 %142, label %143, label %144, !prof !3

143:                                              ; preds = %134
  call void @llvm.trap() #10
  unreachable

144:                                              ; preds = %134
  %145 = trunc i33 %140 to i32
  store i32 %145, i32* %135, align 4
  br label %146

146:                                              ; preds = %144, %129, %107
  %147 = ptrtoint %"class.WTF::StringImpl"* %126 to i64
  %148 = bitcast i8* %127 to i64*
  %149 = bitcast i8* %127 to %"class.WTF::StringImpl"**
  %150 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %149, align 8
  store i64 %147, i64* %148, align 8
  %151 = icmp eq %"class.WTF::StringImpl"* %150, null
  br i1 %151, label %165, label %152

152:                                              ; preds = %146
  %153 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %150, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %154 = load atomic i32, i32* %153 monotonic, align 4
  %155 = and i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %150, i64 0, i32 0
  %158 = load i32, i32* %157, align 4
  br i1 %156, label %159, label %161

159:                                              ; preds = %152
  %160 = add i32 %158, -1
  store i32 %160, i32* %157, align 4
  br label %161

161:                                              ; preds = %159, %152
  %162 = phi i32 [ %160, %159 ], [ %158, %152 ]
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %164, label %165

164:                                              ; preds = %161
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %150) #10
  br label %165

165:                                              ; preds = %146, %161, %164
  br i1 %128, label %179, label %166

166:                                              ; preds = %165
  %167 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %126, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %168 = load atomic i32, i32* %167 monotonic, align 4
  %169 = and i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %126, i64 0, i32 0
  %172 = load i32, i32* %171, align 4
  br i1 %170, label %173, label %175

173:                                              ; preds = %166
  %174 = add i32 %172, -1
  store i32 %174, i32* %171, align 4
  br label %175

175:                                              ; preds = %173, %166
  %176 = phi i32 [ %174, %173 ], [ %172, %166 ]
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %178, label %179

178:                                              ; preds = %175
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %126) #10
  br label %179

179:                                              ; preds = %165, %175, %178
  %180 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 4
  %181 = bitcast double* %180 to i64*
  %182 = load i64, i64* %181, align 8
  %183 = getelementptr inbounds i8, i8* %14, i64 80
  %184 = bitcast i8* %183 to i64*
  store i64 %182, i64* %184, align 8
  %185 = getelementptr inbounds i8, i8* %14, i64 10
  store i8 1, i8* %185, align 2
  %186 = bitcast double* %31 to i64*
  %187 = load i64, i64* %186, align 8
  %188 = getelementptr inbounds i8, i8* %14, i64 88
  %189 = bitcast i8* %188 to i64*
  store i64 %187, i64* %189, align 8
  %190 = getelementptr inbounds i8, i8* %14, i64 11
  store i8 1, i8* %190, align 1
  %191 = bitcast %"class.blink::UnrestrictedDoubleOrString"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %191) #10
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %191, i8* align 8 bitcast ({ i32, [4 x i8], %"class.WTF::String", double }* @__const._ZNK5blink6Timing17getComputedTimingERKNS0_16CalculatedTimingEb.duration to i8*), i64 24, i1 false)
  call void @_ZN5blink26UnrestrictedDoubleOrStringC1Ev(%"class.blink::UnrestrictedDoubleOrString"* nonnull %13) #10
  %192 = bitcast double* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %192)
  store double 0.000000e+00, double* %4, align 8
  %193 = load i8, i8* %23, align 8, !range !2
  %194 = icmp eq i8 %193, 0
  %195 = bitcast double* %4 to %"class.blink::AnimationTimeDelta"*
  %196 = select i1 %194, %"class.blink::AnimationTimeDelta"* %195, %"class.blink::AnimationTimeDelta"* %26
  %197 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %196, i64 0, i32 0
  %198 = load double, double* %197, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %192)
  %199 = fmul double %198, 1.000000e+03
  call void @_ZN5blink26UnrestrictedDoubleOrString21SetUnrestrictedDoubleEd(%"class.blink::UnrestrictedDoubleOrString"* nonnull %13, double %199) #10
  call void @_ZN5blink12EffectTiming11setDurationERKNS_26UnrestrictedDoubleOrStringE(%"class.blink::EffectTiming"* %110, %"class.blink::UnrestrictedDoubleOrString"* nonnull dereferenceable(24) %13) #10
  %200 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 7
  %201 = load i32, i32* %200, align 8
  %202 = call %"class.WTF::StringImpl"* @_ZN5blink6Timing23PlaybackDirectionStringEN3gfx13KeyframeModel9DirectionE(i32 %201)
  %203 = getelementptr inbounds i8, i8* %14, i64 24
  %204 = icmp eq %"class.WTF::StringImpl"* %202, null
  br i1 %204, label %222, label %205

205:                                              ; preds = %179
  %206 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %202, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %207 = load atomic i32, i32* %206 monotonic, align 4
  %208 = and i32 %207, 2
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %210, label %222

210:                                              ; preds = %205
  %211 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %202, i64 0, i32 0
  %212 = load i32, i32* %211, align 4
  %213 = zext i32 %212 to i33
  %214 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %213, i33 1) #10
  %215 = extractvalue { i33, i1 } %214, 1
  %216 = extractvalue { i33, i1 } %214, 0
  %217 = icmp slt i33 %216, 0
  %218 = or i1 %215, %217
  br i1 %218, label %219, label %220, !prof !3

219:                                              ; preds = %210
  call void @llvm.trap() #10
  unreachable

220:                                              ; preds = %210
  %221 = trunc i33 %216 to i32
  store i32 %221, i32* %211, align 4
  br label %222

222:                                              ; preds = %220, %205, %179
  %223 = ptrtoint %"class.WTF::StringImpl"* %202 to i64
  %224 = bitcast i8* %203 to i64*
  %225 = bitcast i8* %203 to %"class.WTF::StringImpl"**
  %226 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %225, align 8
  store i64 %223, i64* %224, align 8
  %227 = icmp eq %"class.WTF::StringImpl"* %226, null
  br i1 %227, label %241, label %228

228:                                              ; preds = %222
  %229 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %226, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %230 = load atomic i32, i32* %229 monotonic, align 4
  %231 = and i32 %230, 2
  %232 = icmp eq i32 %231, 0
  %233 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %226, i64 0, i32 0
  %234 = load i32, i32* %233, align 4
  br i1 %232, label %235, label %237

235:                                              ; preds = %228
  %236 = add i32 %234, -1
  store i32 %236, i32* %233, align 4
  br label %237

237:                                              ; preds = %235, %228
  %238 = phi i32 [ %236, %235 ], [ %234, %228 ]
  %239 = icmp eq i32 %238, 0
  br i1 %239, label %240, label %241

240:                                              ; preds = %237
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %226) #10
  br label %241

241:                                              ; preds = %222, %237, %240
  br i1 %204, label %255, label %242

242:                                              ; preds = %241
  %243 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %202, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %244 = load atomic i32, i32* %243 monotonic, align 4
  %245 = and i32 %244, 2
  %246 = icmp eq i32 %245, 0
  %247 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %202, i64 0, i32 0
  %248 = load i32, i32* %247, align 4
  br i1 %246, label %249, label %251

249:                                              ; preds = %242
  %250 = add i32 %248, -1
  store i32 %250, i32* %247, align 4
  br label %251

251:                                              ; preds = %249, %242
  %252 = phi i32 [ %250, %249 ], [ %248, %242 ]
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %254, label %255

254:                                              ; preds = %251
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %202) #10
  br label %255

255:                                              ; preds = %241, %251, %254
  %256 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %0, i64 0, i32 9, i32 0
  %257 = load %"class.blink::TimingFunction"*, %"class.blink::TimingFunction"** %256, align 8
  %258 = bitcast %"class.blink::TimingFunction"* %257 to %"class.WTF::StringImpl"* (%"class.blink::TimingFunction"*)***
  %259 = load %"class.WTF::StringImpl"* (%"class.blink::TimingFunction"*)**, %"class.WTF::StringImpl"* (%"class.blink::TimingFunction"*)*** %258, align 8
  %260 = getelementptr inbounds %"class.WTF::StringImpl"* (%"class.blink::TimingFunction"*)*, %"class.WTF::StringImpl"* (%"class.blink::TimingFunction"*)** %259, i64 2
  %261 = load %"class.WTF::StringImpl"* (%"class.blink::TimingFunction"*)*, %"class.WTF::StringImpl"* (%"class.blink::TimingFunction"*)** %260, align 8
  %262 = call %"class.WTF::StringImpl"* %261(%"class.blink::TimingFunction"* %257) #10
  %263 = getelementptr inbounds i8, i8* %14, i64 56
  %264 = icmp eq %"class.WTF::StringImpl"* %262, null
  br i1 %264, label %282, label %265

265:                                              ; preds = %255
  %266 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %262, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %267 = load atomic i32, i32* %266 monotonic, align 4
  %268 = and i32 %267, 2
  %269 = icmp eq i32 %268, 0
  br i1 %269, label %270, label %282

270:                                              ; preds = %265
  %271 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %262, i64 0, i32 0
  %272 = load i32, i32* %271, align 4
  %273 = zext i32 %272 to i33
  %274 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %273, i33 1) #10
  %275 = extractvalue { i33, i1 } %274, 1
  %276 = extractvalue { i33, i1 } %274, 0
  %277 = icmp slt i33 %276, 0
  %278 = or i1 %275, %277
  br i1 %278, label %279, label %280, !prof !3

279:                                              ; preds = %270
  call void @llvm.trap() #10
  unreachable

280:                                              ; preds = %270
  %281 = trunc i33 %276 to i32
  store i32 %281, i32* %271, align 4
  br label %282

282:                                              ; preds = %280, %265, %255
  %283 = ptrtoint %"class.WTF::StringImpl"* %262 to i64
  %284 = bitcast i8* %263 to i64*
  %285 = bitcast i8* %263 to %"class.WTF::StringImpl"**
  %286 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %285, align 8
  store i64 %283, i64* %284, align 8
  %287 = icmp eq %"class.WTF::StringImpl"* %286, null
  br i1 %287, label %301, label %288

288:                                              ; preds = %282
  %289 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %286, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %290 = load atomic i32, i32* %289 monotonic, align 4
  %291 = and i32 %290, 2
  %292 = icmp eq i32 %291, 0
  %293 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %286, i64 0, i32 0
  %294 = load i32, i32* %293, align 4
  br i1 %292, label %295, label %297

295:                                              ; preds = %288
  %296 = add i32 %294, -1
  store i32 %296, i32* %293, align 4
  br label %297

297:                                              ; preds = %295, %288
  %298 = phi i32 [ %296, %295 ], [ %294, %288 ]
  %299 = icmp eq i32 %298, 0
  br i1 %299, label %300, label %301

300:                                              ; preds = %297
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %286) #10
  br label %301

301:                                              ; preds = %282, %297, %300
  br i1 %264, label %315, label %302

302:                                              ; preds = %301
  %303 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %262, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %304 = load atomic i32, i32* %303 monotonic, align 4
  %305 = and i32 %304, 2
  %306 = icmp eq i32 %305, 0
  %307 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %262, i64 0, i32 0
  %308 = load i32, i32* %307, align 4
  br i1 %306, label %309, label %311

309:                                              ; preds = %302
  %310 = add i32 %308, -1
  store i32 %310, i32* %307, align 4
  br label %311

311:                                              ; preds = %309, %302
  %312 = phi i32 [ %310, %309 ], [ %308, %302 ]
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %314, label %315

314:                                              ; preds = %311
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %262) #10
  br label %315

315:                                              ; preds = %301, %311, %314
  call void @_ZN5blink26UnrestrictedDoubleOrStringD1Ev(%"class.blink::UnrestrictedDoubleOrString"* nonnull %13) #10
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %191) #10
  ret %"class.blink::ComputedEffectTiming"* %15
}

declare void @_ZN5blink20ComputedEffectTiming10setEndTimeERKNS_23DoubleOrCSSNumericValueE(%"class.blink::ComputedEffectTiming"*, %"class.blink::DoubleOrCSSNumericValue"* dereferenceable(24)) local_unnamed_addr #4

declare void @_ZN5blink23DoubleOrCSSNumericValue10FromDoubleEd(%"class.blink::DoubleOrCSSNumericValue"* sret, double) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN5blink23DoubleOrCSSNumericValueD1Ev(%"class.blink::DoubleOrCSSNumericValue"*) unnamed_addr #5

declare void @_ZN5blink20ComputedEffectTiming17setActiveDurationERKNS_23DoubleOrCSSNumericValueE(%"class.blink::ComputedEffectTiming"*, %"class.blink::DoubleOrCSSNumericValue"* dereferenceable(24)) local_unnamed_addr #4

declare void @_ZN5blink20ComputedEffectTiming12setLocalTimeERKNS_23DoubleOrCSSNumericValueE(%"class.blink::ComputedEffectTiming"*, %"class.blink::DoubleOrCSSNumericValue"* dereferenceable(24)) local_unnamed_addr #4

declare void @_ZN5blink23DoubleOrCSSNumericValueC1Ev(%"class.blink::DoubleOrCSSNumericValue"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink6Timing16CalculateTimingsEN4absl8optionalINS_18AnimationTimeDeltaEEENS2_INS0_5PhaseEEENS0_18AnimationDirectionEbNS2_IdEE(%"struct.blink::Timing::CalculatedTiming"* noalias nocapture sret, %"struct.blink::Timing"*, i8, double, i64, i32, i1 zeroext, %"class.absl::optional.9"* nocapture readonly byval(%"class.absl::optional.9") align 8) local_unnamed_addr #0 align 2 {
  %9 = alloca double, align 8
  %10 = alloca %"class.blink::AnimationTimeDelta", align 8
  %11 = alloca %"class.blink::AnimationTimeDelta", align 8
  %12 = alloca %"class.blink::AnimationTimeDelta", align 8
  %13 = alloca %"class.blink::AnimationTimeDelta", align 8
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  %17 = alloca %"class.logging::CheckError", align 8
  %18 = alloca %"class.blink::AnimationTimeDelta", align 8
  %19 = alloca %"class.blink::AnimationTimeDelta", align 8
  %20 = alloca %"class.blink::AnimationTimeDelta", align 8
  %21 = alloca %"class.blink::AnimationTimeDelta", align 8
  %22 = alloca %"class.blink::AnimationTimeDelta", align 8
  %23 = alloca %"class.blink::AnimationTimeDelta", align 8
  %24 = alloca %"class.blink::AnimationTimeDelta", align 8
  %25 = alloca %"class.blink::AnimationTimeDelta", align 8
  %26 = alloca %"class.absl::optional", align 8
  %27 = alloca double, align 8
  %28 = alloca %"class.blink::AnimationTimeDelta", align 8
  %29 = alloca %"class.blink::AnimationTimeDelta", align 8
  %30 = alloca %"class.blink::AnimationTimeDelta", align 8
  %31 = alloca %"class.blink::AnimationTimeDelta", align 8
  %32 = alloca %"class.blink::AnimationTimeDelta", align 8
  %33 = alloca %"class.absl::optional", align 8
  %34 = alloca %"class.blink::AnimationTimeDelta", align 8
  %35 = alloca %"class.blink::AnimationTimeDelta", align 8
  %36 = alloca %"class.blink::AnimationTimeDelta", align 8
  %37 = alloca %"class.blink::AnimationTimeDelta", align 8
  %38 = alloca %"class.blink::AnimationTimeDelta", align 8
  %39 = alloca %"class.blink::AnimationTimeDelta", align 8
  %40 = alloca %"class.blink::AnimationTimeDelta", align 8
  %41 = alloca %"class.blink::AnimationTimeDelta", align 8
  %42 = alloca double, align 8
  %43 = alloca [7 x i8], align 1
  %44 = alloca [7 x i8], align 1
  %45 = alloca [7 x i8], align 1
  %46 = alloca %"class.blink::AnimationTimeDelta", align 8
  %47 = alloca %"class.blink::AnimationTimeDelta", align 8
  %48 = bitcast double* %42 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %48)
  store double 0.000000e+00, double* %42, align 8
  %49 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %1, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %50 = load i8, i8* %49, align 8, !range !2
  %51 = icmp eq i8 %50, 0
  %52 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %1, i64 0, i32 6, i32 0, i32 0, i32 0, i32 1, i32 0
  %53 = bitcast double* %42 to %"class.blink::AnimationTimeDelta"*
  %54 = select i1 %51, %"class.blink::AnimationTimeDelta"* %53, %"class.blink::AnimationTimeDelta"* %52
  %55 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %54, i64 0, i32 0
  %56 = load double, double* %55, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %48)
  %57 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %1, i64 0, i32 5
  %58 = load double, double* %57, align 8
  %59 = fcmp oeq double %56, 0.000000e+00
  %60 = fcmp oeq double %58, 0.000000e+00
  %61 = or i1 %59, %60
  %62 = fmul double %56, %58
  %63 = select i1 %61, double 0.000000e+00, double %62
  %64 = getelementptr inbounds [7 x i8], [7 x i8]* %43, i64 0, i64 0
  %65 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %33, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %65)
  store i8 %2, i8* %65, align 8
  %66 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %33, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store double %3, double* %66, align 8
  %67 = trunc i64 %4 to i8
  %68 = lshr i64 %4, 32
  %69 = trunc i64 %68 to i32
  %70 = icmp eq i8 %2, 0
  br i1 %70, label %71, label %74

71:                                               ; preds = %8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %65)
  %72 = bitcast %"class.blink::AnimationTimeDelta"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %72)
  %73 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %28, i64 0, i32 0
  store double %63, double* %73, align 8
  br label %207

74:                                               ; preds = %8
  %75 = bitcast %"class.blink::AnimationTimeDelta"* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %75) #10
  %76 = bitcast %"class.blink::AnimationTimeDelta"* %35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %76) #10
  %77 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %1, i64 0, i32 0
  %78 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %1, i64 0, i32 0, i32 0
  %79 = load double, double* %78, align 8
  %80 = fadd double %63, %79
  %81 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %1, i64 0, i32 1, i32 0
  %82 = load double, double* %81, align 8
  %83 = fadd double %80, %82
  %84 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %35, i64 0, i32 0
  store double %83, double* %84, align 8
  %85 = bitcast %"class.blink::AnimationTimeDelta"* %36 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %85) #10
  %86 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %36, i64 0, i32 0
  store double 0.000000e+00, double* %86, align 8
  %87 = call zeroext i1 @_ZN5blinkltERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %35, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %36) #10
  %88 = select i1 %87, %"class.blink::AnimationTimeDelta"* %36, %"class.blink::AnimationTimeDelta"* %35
  %89 = bitcast %"class.blink::AnimationTimeDelta"* %88 to i64*
  %90 = bitcast %"class.blink::AnimationTimeDelta"* %34 to i64*
  %91 = load i64, i64* %89, align 8
  store i64 %91, i64* %90, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %85) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %76) #10
  %92 = bitcast %"class.blink::AnimationTimeDelta"* %37 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %92) #10
  %93 = call zeroext i1 @_ZN5blinkltERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %34, %"class.blink::AnimationTimeDelta"* dereferenceable(8) %77) #10
  %94 = select i1 %93, %"class.blink::AnimationTimeDelta"* %34, %"class.blink::AnimationTimeDelta"* %77
  %95 = bitcast %"class.blink::AnimationTimeDelta"* %38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %95) #10
  %96 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %38, i64 0, i32 0
  store double 0.000000e+00, double* %96, align 8
  %97 = call zeroext i1 @_ZN5blinkltERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* dereferenceable(8) %94, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %38) #10
  %98 = select i1 %97, %"class.blink::AnimationTimeDelta"* %38, %"class.blink::AnimationTimeDelta"* %94
  %99 = bitcast %"class.blink::AnimationTimeDelta"* %98 to i64*
  %100 = bitcast %"class.blink::AnimationTimeDelta"* %37 to i64*
  %101 = load i64, i64* %99, align 8
  store i64 %101, i64* %100, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %95) #10
  %102 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %33, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %103 = call zeroext i1 @_ZN5blinkltERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* dereferenceable(8) %102, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %37) #10
  br i1 %103, label %162, label %104

104:                                              ; preds = %74
  %105 = load i8, i8* %65, align 8, !range !2
  %106 = icmp eq i8 %105, 0
  br i1 %106, label %107, label %108

107:                                              ; preds = %104
  call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #11
  unreachable

108:                                              ; preds = %104
  %109 = call zeroext i1 @_ZN5blinkeqERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* dereferenceable(8) %102, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %37) #10
  %110 = icmp ne i8 %67, 0
  %111 = and i1 %110, %109
  %112 = icmp eq i32 %69, 0
  %113 = and i1 %112, %111
  br i1 %113, label %162, label %114

114:                                              ; preds = %108
  %115 = load i8, i8* %65, align 8, !range !2
  %116 = icmp eq i8 %115, 0
  br i1 %116, label %117, label %118

117:                                              ; preds = %114
  call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #11
  unreachable

118:                                              ; preds = %114
  %119 = call zeroext i1 @_ZN5blinkeqERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* dereferenceable(8) %102, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %37) #10
  %120 = icmp eq i32 %5, 1
  %121 = and i1 %120, %119
  br i1 %121, label %162, label %122

122:                                              ; preds = %118
  %123 = bitcast %"class.blink::AnimationTimeDelta"* %39 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %123) #10
  %124 = bitcast %"class.blink::AnimationTimeDelta"* %40 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %124) #10
  %125 = load double, double* %78, align 8
  %126 = fadd double %63, %125
  %127 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %40, i64 0, i32 0
  store double %126, double* %127, align 8
  %128 = call zeroext i1 @_ZN5blinkltERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %34, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %40) #10
  %129 = select i1 %128, %"class.blink::AnimationTimeDelta"* %34, %"class.blink::AnimationTimeDelta"* %40
  %130 = bitcast %"class.blink::AnimationTimeDelta"* %41 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %130) #10
  %131 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %41, i64 0, i32 0
  store double 0.000000e+00, double* %131, align 8
  %132 = call zeroext i1 @_ZN5blinkltERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %129, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %41) #10
  %133 = select i1 %132, %"class.blink::AnimationTimeDelta"* %41, %"class.blink::AnimationTimeDelta"* %129
  %134 = bitcast %"class.blink::AnimationTimeDelta"* %133 to i64*
  %135 = bitcast %"class.blink::AnimationTimeDelta"* %39 to i64*
  %136 = load i64, i64* %134, align 8
  store i64 %136, i64* %135, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %130) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %124) #10
  %137 = load i8, i8* %65, align 8, !range !2
  %138 = icmp eq i8 %137, 0
  br i1 %138, label %144, label %139

139:                                              ; preds = %122
  %140 = call zeroext i1 @_ZN5blinkgtERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* dereferenceable(8) %102, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %39) #10
  br i1 %140, label %160, label %141

141:                                              ; preds = %139
  %142 = load i8, i8* %65, align 8
  %143 = icmp eq i8 %142, 0
  br i1 %143, label %144, label %145

144:                                              ; preds = %141, %122
  call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #11
  unreachable

145:                                              ; preds = %141
  %146 = call zeroext i1 @_ZN5blinkeqERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* dereferenceable(8) %102, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %39) #10
  %147 = and i1 %110, %146
  %148 = icmp eq i32 %69, 2
  %149 = and i1 %148, %147
  br i1 %149, label %160, label %150

150:                                              ; preds = %145
  %151 = load i8, i8* %65, align 8, !range !2
  %152 = icmp eq i8 %151, 0
  br i1 %152, label %155, label %153

153:                                              ; preds = %150
  %154 = call zeroext i1 @_ZN5blinkeqERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* dereferenceable(8) %102, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %39) #10
  br label %155

155:                                              ; preds = %153, %150
  %156 = phi i1 [ %154, %153 ], [ false, %150 ]
  %157 = icmp eq i32 %5, 0
  %158 = and i1 %157, %156
  %159 = select i1 %158, i32 2, i32 1
  br label %160

160:                                              ; preds = %155, %145, %139
  %161 = phi i32 [ 2, %139 ], [ %159, %155 ], [ 2, %145 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %123) #10
  br label %162

162:                                              ; preds = %74, %108, %118, %160
  %163 = phi i32 [ %161, %160 ], [ 0, %118 ], [ 0, %74 ], [ 0, %108 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %75) #10
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %65)
  %164 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %1, i64 0, i32 2
  %165 = load i32, i32* %164, align 8
  %166 = icmp eq i32 %165, 4
  %167 = select i1 %6, i32 0, i32 3
  %168 = select i1 %166, i32 %167, i32 %165
  %169 = bitcast %"class.blink::AnimationTimeDelta"* %28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %169)
  %170 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %28, i64 0, i32 0
  store double %63, double* %170, align 8
  switch i32 %163, label %207 [
    i32 0, label %171
    i32 1, label %186
    i32 2, label %190
  ]

171:                                              ; preds = %162
  %172 = or i32 %168, 1
  %173 = icmp eq i32 %172, 3
  br i1 %173, label %174, label %207

174:                                              ; preds = %171
  %175 = bitcast %"class.blink::AnimationTimeDelta"* %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %175) #10
  %176 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %1, i64 0, i32 0, i32 0
  %177 = load double, double* %176, align 8
  %178 = fsub double %3, %177
  %179 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %29, i64 0, i32 0
  store double %178, double* %179, align 8
  %180 = bitcast %"class.blink::AnimationTimeDelta"* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %180) #10
  %181 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %30, i64 0, i32 0
  store double 0.000000e+00, double* %181, align 8
  %182 = call zeroext i1 @_ZN5blinkltERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %29, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %30) #10
  %183 = select i1 %182, %"class.blink::AnimationTimeDelta"* %30, %"class.blink::AnimationTimeDelta"* %29
  %184 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %183, i64 0, i32 0
  %185 = load double, double* %184, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %180) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %175) #10
  br label %207

186:                                              ; preds = %162
  %187 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %1, i64 0, i32 0, i32 0
  %188 = load double, double* %187, align 8
  %189 = fsub double %3, %188
  br label %207

190:                                              ; preds = %162
  %191 = or i32 %168, 2
  %192 = icmp eq i32 %191, 3
  br i1 %192, label %193, label %207

193:                                              ; preds = %190
  %194 = bitcast %"class.blink::AnimationTimeDelta"* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %194) #10
  %195 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %31, i64 0, i32 0
  store double 0.000000e+00, double* %195, align 8
  %196 = bitcast %"class.blink::AnimationTimeDelta"* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %196) #10
  %197 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %1, i64 0, i32 0, i32 0
  %198 = load double, double* %197, align 8
  %199 = fsub double %3, %198
  %200 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %32, i64 0, i32 0
  store double %199, double* %200, align 8
  %201 = call zeroext i1 @_ZN5blinkltERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %32, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %28) #10
  %202 = select i1 %201, %"class.blink::AnimationTimeDelta"* %32, %"class.blink::AnimationTimeDelta"* %28
  %203 = call zeroext i1 @_ZN5blinkltERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %31, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %202) #10
  %204 = select i1 %203, %"class.blink::AnimationTimeDelta"* %202, %"class.blink::AnimationTimeDelta"* %31
  %205 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %204, i64 0, i32 0
  %206 = load double, double* %205, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %196) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %194) #10
  br label %207

207:                                              ; preds = %71, %162, %171, %174, %186, %190, %193
  %208 = phi i8* [ %169, %193 ], [ %169, %186 ], [ %169, %174 ], [ %169, %171 ], [ %169, %190 ], [ %169, %162 ], [ %72, %71 ]
  %209 = phi i32 [ 2, %193 ], [ 1, %186 ], [ 0, %174 ], [ 0, %171 ], [ 2, %190 ], [ %163, %162 ], [ 3, %71 ]
  %210 = phi i8 [ 1, %193 ], [ 1, %186 ], [ 1, %174 ], [ 0, %171 ], [ 0, %190 ], [ 0, %162 ], [ 0, %71 ]
  %211 = phi double [ %206, %193 ], [ %189, %186 ], [ %185, %174 ], [ undef, %171 ], [ undef, %190 ], [ undef, %162 ], [ undef, %71 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %208)
  %212 = getelementptr inbounds [7 x i8], [7 x i8]* %44, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 7, i8* nonnull %212)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %212, i8* align 1 getelementptr inbounds ({ { { { i8, [7 x i8], %union.anon.13 } } } }, { { { { i8, [7 x i8], %union.anon.13 } } } }* @__const._ZNK5blink6Timing16CalculateTimingsEN4absl8optionalINS_18AnimationTimeDeltaEEENS2_INS0_5PhaseEEENS0_18AnimationDirectionEbNS2_IdEE.current_iteration, i64 0, i32 0, i32 0, i32 0, i32 1, i64 0), i64 7, i1 false)
  %213 = bitcast double* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %213)
  store double 0.000000e+00, double* %27, align 8
  %214 = load i8, i8* %49, align 8, !range !2
  %215 = icmp eq i8 %214, 0
  %216 = bitcast double* %27 to %"class.blink::AnimationTimeDelta"*
  %217 = select i1 %215, %"class.blink::AnimationTimeDelta"* %216, %"class.blink::AnimationTimeDelta"* %52
  %218 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %217, i64 0, i32 0
  %219 = load double, double* %218, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %213)
  %220 = load double, double* %57, align 8
  %221 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %1, i64 0, i32 4
  %222 = load double, double* %221, align 8
  %223 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %26, i64 0, i32 0, i32 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %223)
  store i8 %210, i8* %223, align 8
  %224 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %26, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store double %211, double* %224, align 8
  %225 = icmp eq i8 %210, 0
  br i1 %225, label %312, label %226

226:                                              ; preds = %207
  %227 = bitcast %"class.blink::AnimationTimeDelta"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %227) #10
  %228 = bitcast %"class.blink::AnimationTimeDelta"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %228) #10
  %229 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %22, i64 0, i32 0
  store double %219, double* %229, align 8
  %230 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %23, i64 0, i32 0
  store double 0.000000e+00, double* %230, align 8
  %231 = call double @llvm.fabs.f64(double %219) #12
  %232 = fcmp oeq double %231, 0x7FF0000000000000
  br i1 %232, label %233, label %235

233:                                              ; preds = %226
  %234 = call zeroext i1 @_ZN5blinkeqERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %22, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %23) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %227) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %228) #10
  br i1 %234, label %247, label %250

235:                                              ; preds = %226
  %236 = bitcast %"class.blink::AnimationTimeDelta"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %236) #10
  %237 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %24, i64 0, i32 0
  store double 0xFFFFFFFFFFFFFFFF, double* %237, align 8
  %238 = call zeroext i1 @_ZN5blinkgeERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %22, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %23) #10
  %239 = load double, double* %230, align 8
  %240 = load double, double* %229, align 8
  %241 = select i1 %238, double %239, double %240
  %242 = select i1 %238, double %240, double %239
  %243 = fsub double %242, %241
  store double %243, double* %237, align 8
  %244 = bitcast %"class.blink::AnimationTimeDelta"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %244) #10
  %245 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %25, i64 0, i32 0
  store double 0x3EB0C6F7A0B5ED8D, double* %245, align 8
  %246 = call zeroext i1 @_ZN5blinkleERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %24, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %25) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %244) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %236) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %227) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %228) #10
  br i1 %246, label %247, label %250

247:                                              ; preds = %235, %233
  %248 = icmp eq i32 %209, 0
  %249 = select i1 %248, double 0.000000e+00, double %220
  br label %257

250:                                              ; preds = %235, %233
  %251 = load i8, i8* %223, align 8, !range !2
  %252 = icmp eq i8 %251, 0
  br i1 %252, label %253, label %254

253:                                              ; preds = %250
  call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #11
  unreachable

254:                                              ; preds = %250
  %255 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %26, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %256 = call double @_ZNK5blink18AnimationTimeDeltadvES0_(%"class.blink::AnimationTimeDelta"* %255, double %219) #10
  br label %257

257:                                              ; preds = %254, %247
  %258 = phi double [ %256, %254 ], [ %249, %247 ]
  %259 = fadd double %222, %258
  %260 = load double, double* %221, align 8
  %261 = load double, double* %57, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %223)
  %262 = call double @llvm.fabs.f64(double %259) #12
  %263 = fcmp oeq double %262, 0x7FF0000000000000
  %264 = select i1 %263, double %260, double %259
  %265 = call double @fmod(double %264, double 1.000000e+00) #10
  %266 = call double @llvm.fabs.f64(double %265) #10
  %267 = fcmp ole double %266, 0x3CC0000000000000
  %268 = add nsw i32 %209, -1
  %269 = icmp ult i32 %268, 2
  %270 = and i1 %269, %267
  br i1 %270, label %271, label %299

271:                                              ; preds = %257
  %272 = bitcast %"class.blink::AnimationTimeDelta"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %272) #10
  %273 = bitcast %"class.blink::AnimationTimeDelta"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %273) #10
  %274 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %18, i64 0, i32 0
  store double %211, double* %274, align 8
  %275 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %19, i64 0, i32 0
  store double %63, double* %275, align 8
  %276 = call double @llvm.fabs.f64(double %211) #12
  %277 = fcmp oeq double %276, 0x7FF0000000000000
  %278 = call double @llvm.fabs.f64(double %63) #12
  %279 = fcmp oeq double %278, 0x7FF0000000000000
  %280 = or i1 %279, %277
  br i1 %280, label %281, label %283

281:                                              ; preds = %271
  %282 = call zeroext i1 @_ZN5blinkeqERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %18, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %19) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %272) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %273) #10
  br i1 %282, label %295, label %299

283:                                              ; preds = %271
  %284 = bitcast %"class.blink::AnimationTimeDelta"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %284) #10
  %285 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %20, i64 0, i32 0
  store double 0xFFFFFFFFFFFFFFFF, double* %285, align 8
  %286 = call zeroext i1 @_ZN5blinkgeERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %18, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %19) #10
  %287 = load double, double* %275, align 8
  %288 = load double, double* %274, align 8
  %289 = select i1 %286, double %287, double %288
  %290 = select i1 %286, double %288, double %287
  %291 = fsub double %290, %289
  store double %291, double* %285, align 8
  %292 = bitcast %"class.blink::AnimationTimeDelta"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %292) #10
  %293 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %21, i64 0, i32 0
  store double 0x3EB0C6F7A0B5ED8D, double* %293, align 8
  %294 = call zeroext i1 @_ZN5blinkleERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %20, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %21) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %292) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %284) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %272) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %273) #10
  br i1 %294, label %295, label %299

295:                                              ; preds = %283, %281
  %296 = call double @llvm.fabs.f64(double %261) #10
  %297 = fcmp ugt double %296, 0x3CC0000000000000
  br i1 %297, label %298, label %299

298:                                              ; preds = %295
  br label %299

299:                                              ; preds = %257, %298, %295, %283, %281
  %300 = phi double [ %265, %283 ], [ %265, %295 ], [ 1.000000e+00, %298 ], [ %265, %281 ], [ %265, %257 ]
  %301 = load double, double* %57, align 8
  %302 = icmp eq i32 %209, 2
  %303 = call double @llvm.fabs.f64(double %301) #12
  %304 = fcmp oeq double %303, 0x7FF0000000000000
  %305 = and i1 %302, %304
  br i1 %305, label %315, label %306

306:                                              ; preds = %299
  %307 = fcmp oeq double %300, 1.000000e+00
  %308 = call double @llvm.floor.f64(double %259) #10
  br i1 %307, label %309, label %315

309:                                              ; preds = %306
  %310 = fadd double %308, -1.000000e+00
  %311 = call double @llvm.maxnum.f64(double %310, double 0.000000e+00) #10
  br label %315

312:                                              ; preds = %207
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %223)
  %313 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %1, i64 0, i32 7
  %314 = load i32, i32* %313, align 8
  br label %325

315:                                              ; preds = %309, %299, %306
  %316 = phi double [ %308, %306 ], [ 0x7FF0000000000000, %299 ], [ %311, %309 ]
  %317 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %1, i64 0, i32 7
  %318 = load i32, i32* %317, align 8
  %319 = call double @llvm.fabs.f64(double %316) #12
  %320 = fcmp oeq double %319, 0x7FF0000000000000
  br i1 %320, label %325, label %321

321:                                              ; preds = %315
  %322 = call double @fmod(double %316, double 2.000000e+00) #10
  %323 = call double @llvm.fabs.f64(double %322) #10
  %324 = fcmp ole double %323, 0x3CC0000000000000
  br label %325

325:                                              ; preds = %312, %321, %315
  %326 = phi i1 [ true, %312 ], [ false, %321 ], [ false, %315 ]
  %327 = phi i32 [ %314, %312 ], [ %318, %321 ], [ %318, %315 ]
  %328 = phi i32* [ %313, %312 ], [ %317, %321 ], [ %317, %315 ]
  %329 = phi double [ undef, %312 ], [ %316, %321 ], [ %316, %315 ]
  %330 = phi i8 [ 0, %312 ], [ 1, %321 ], [ 1, %315 ]
  %331 = phi double [ undef, %312 ], [ %300, %321 ], [ %300, %315 ]
  %332 = phi i1 [ false, %312 ], [ %324, %321 ], [ true, %315 ]
  switch i32 %327, label %337 [
    i32 0, label %338
    i32 1, label %333
    i32 2, label %334
    i32 3, label %335
  ]

333:                                              ; preds = %325
  br label %338

334:                                              ; preds = %325
  br label %338

335:                                              ; preds = %325
  %336 = xor i1 %332, true
  br label %338

337:                                              ; preds = %325
  unreachable

338:                                              ; preds = %325, %333, %334, %335
  %339 = phi i1 [ %336, %335 ], [ %332, %334 ], [ false, %333 ], [ true, %325 ]
  %340 = load i32, i32* %328, align 8
  %341 = icmp eq i8 %330, 0
  br i1 %341, label %360, label %342

342:                                              ; preds = %338
  br i1 %326, label %350, label %343

343:                                              ; preds = %342
  %344 = call double @llvm.fabs.f64(double %329) #12
  %345 = fcmp oeq double %344, 0x7FF0000000000000
  br i1 %345, label %350, label %346

346:                                              ; preds = %343
  %347 = call double @fmod(double %329, double 2.000000e+00) #10
  %348 = call double @llvm.fabs.f64(double %347) #10
  %349 = fcmp ole double %348, 0x3CC0000000000000
  br label %350

350:                                              ; preds = %346, %343, %342
  %351 = phi i1 [ false, %342 ], [ %349, %346 ], [ true, %343 ]
  switch i32 %340, label %356 [
    i32 0, label %359
    i32 1, label %352
    i32 2, label %357
    i32 3, label %354
  ]

352:                                              ; preds = %350
  %353 = fsub double 1.000000e+00, %331
  br label %360

354:                                              ; preds = %350
  %355 = fsub double 1.000000e+00, %331
  br i1 %351, label %360, label %359

356:                                              ; preds = %350
  unreachable

357:                                              ; preds = %350
  %358 = fsub double 1.000000e+00, %331
  br i1 %351, label %359, label %360

359:                                              ; preds = %357, %354, %350
  br label %360

360:                                              ; preds = %338, %352, %354, %357, %359
  %361 = phi i8 [ 0, %338 ], [ 1, %354 ], [ 1, %352 ], [ 1, %357 ], [ 1, %359 ]
  %362 = phi double [ undef, %338 ], [ %355, %354 ], [ %353, %352 ], [ %358, %357 ], [ %331, %359 ]
  %363 = getelementptr inbounds [7 x i8], [7 x i8]* %45, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 7, i8* nonnull %363)
  %364 = getelementptr inbounds %"struct.blink::Timing", %"struct.blink::Timing"* %1, i64 0, i32 9, i32 0
  %365 = load %"class.blink::TimingFunction"*, %"class.blink::TimingFunction"** %364, align 8
  %366 = icmp eq %"class.blink::TimingFunction"* %365, null
  br i1 %366, label %374, label %367

367:                                              ; preds = %360
  %368 = getelementptr inbounds %"class.blink::TimingFunction", %"class.blink::TimingFunction"* %365, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %369 = atomicrmw add i32* %368, i32 1 monotonic
  %370 = icmp sgt i32 %369, 0
  br i1 %370, label %374, label %371

371:                                              ; preds = %367
  %372 = bitcast %"class.logging::CheckError"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %372) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %17, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.15, i64 0, i64 0), i32 211, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.16, i64 0, i64 0)) #10
  %373 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %17) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %17) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %372) #10
  br label %374

374:                                              ; preds = %360, %367, %371
  %375 = icmp eq i8 %361, 0
  br i1 %375, label %399, label %376

376:                                              ; preds = %374
  %377 = icmp eq i32 %209, 0
  %378 = icmp eq i32 %209, 2
  %379 = select i1 %339, i1 %377, i1 %378
  %380 = xor i1 %379, true
  %381 = zext i1 %380 to i32
  br i1 %378, label %382, label %392

382:                                              ; preds = %376
  br i1 %339, label %383, label %388

383:                                              ; preds = %382
  %384 = fadd double %362, -1.000000e+00
  %385 = call double @llvm.fabs.f64(double %384) #10
  %386 = fcmp ugt double %385, 0x3CC0000000000000
  br i1 %386, label %387, label %392

387:                                              ; preds = %383
  br label %392

388:                                              ; preds = %382
  %389 = call double @llvm.fabs.f64(double %362) #10
  %390 = fcmp ugt double %389, 0x3CC0000000000000
  br i1 %390, label %392, label %391

391:                                              ; preds = %388
  br label %392

392:                                              ; preds = %391, %388, %387, %383, %376
  %393 = phi double [ %362, %387 ], [ 0.000000e+00, %391 ], [ %362, %388 ], [ %362, %376 ], [ 1.000000e+00, %383 ]
  %394 = bitcast %"class.blink::TimingFunction"* %365 to double (%"class.blink::TimingFunction"*, double, i32)***
  %395 = load double (%"class.blink::TimingFunction"*, double, i32)**, double (%"class.blink::TimingFunction"*, double, i32)*** %394, align 8
  %396 = getelementptr inbounds double (%"class.blink::TimingFunction"*, double, i32)*, double (%"class.blink::TimingFunction"*, double, i32)** %395, i64 3
  %397 = load double (%"class.blink::TimingFunction"*, double, i32)*, double (%"class.blink::TimingFunction"*, double, i32)** %396, align 8
  %398 = call double %397(%"class.blink::TimingFunction"* %365, double %393, i32 %381) #10
  br label %399

399:                                              ; preds = %392, %374
  %400 = phi i8 [ 1, %392 ], [ 0, %374 ]
  %401 = phi double [ %398, %392 ], [ undef, %374 ]
  br i1 %366, label %414, label %402

402:                                              ; preds = %399
  %403 = getelementptr inbounds %"class.blink::TimingFunction", %"class.blink::TimingFunction"* %365, i64 0, i32 1, i32 0
  %404 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %403, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %405 = atomicrmw sub i32* %404, i32 1 acq_rel
  %406 = icmp eq i32 %405, 1
  br i1 %406, label %407, label %414

407:                                              ; preds = %402
  %408 = getelementptr inbounds %"class.base::RefCountedThreadSafe", %"class.base::RefCountedThreadSafe"* %403, i64 -2
  %409 = bitcast %"class.base::RefCountedThreadSafe"* %408 to %"class.blink::TimingFunction"*
  %410 = bitcast %"class.base::RefCountedThreadSafe"* %408 to void (%"class.blink::TimingFunction"*)***
  %411 = load void (%"class.blink::TimingFunction"*)**, void (%"class.blink::TimingFunction"*)*** %410, align 8
  %412 = getelementptr inbounds void (%"class.blink::TimingFunction"*)*, void (%"class.blink::TimingFunction"*)** %411, i64 1
  %413 = load void (%"class.blink::TimingFunction"*)*, void (%"class.blink::TimingFunction"*)** %412, align 8
  call void %413(%"class.blink::TimingFunction"* nonnull %409) #10
  br label %414

414:                                              ; preds = %399, %402, %407
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %212, i8* nonnull align 1 %363, i64 7, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 7, i8* nonnull %363)
  %415 = bitcast %"class.blink::AnimationTimeDelta"* %46 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %415) #10
  %416 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %46, i64 0, i32 0
  store double 0x7FF0000000000000, double* %416, align 8
  %417 = bitcast double* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %417)
  store double 0.000000e+00, double* %16, align 8
  %418 = load i8, i8* %49, align 8, !range !2
  %419 = icmp eq i8 %418, 0
  %420 = bitcast double* %16 to %"class.blink::AnimationTimeDelta"*
  %421 = select i1 %419, %"class.blink::AnimationTimeDelta"* %420, %"class.blink::AnimationTimeDelta"* %52
  %422 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %421, i64 0, i32 0
  %423 = load double, double* %422, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %417)
  %424 = fcmp oeq double %423, 0.000000e+00
  br i1 %424, label %511, label %425

425:                                              ; preds = %414
  %426 = bitcast double* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %426)
  store double 0.000000e+00, double* %15, align 8
  %427 = bitcast double* %15 to %"class.blink::AnimationTimeDelta"*
  %428 = select i1 %419, %"class.blink::AnimationTimeDelta"* %427, %"class.blink::AnimationTimeDelta"* %52
  %429 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %428, i64 0, i32 0
  %430 = load double, double* %429, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %426)
  %431 = load double, double* %221, align 8
  %432 = fcmp oeq double %430, 0.000000e+00
  %433 = fcmp oeq double %431, 0.000000e+00
  %434 = or i1 %432, %433
  %435 = fmul double %430, %431
  %436 = select i1 %434, double 0.000000e+00, double %435
  br i1 %225, label %441, label %437

437:                                              ; preds = %425
  %438 = fcmp oeq double %211, 0x7FF0000000000000
  br i1 %438, label %441, label %439

439:                                              ; preds = %437
  %440 = fadd double %211, %436
  br label %441

441:                                              ; preds = %425, %437, %439
  %442 = phi i1 [ false, %439 ], [ true, %425 ], [ false, %437 ]
  %443 = phi double [ %440, %439 ], [ undef, %425 ], [ 0x7FF0000000000000, %437 ]
  %444 = bitcast double* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %444)
  store double 0.000000e+00, double* %14, align 8
  %445 = bitcast double* %14 to %"class.blink::AnimationTimeDelta"*
  %446 = select i1 %419, %"class.blink::AnimationTimeDelta"* %445, %"class.blink::AnimationTimeDelta"* %52
  %447 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %446, i64 0, i32 0
  %448 = load double, double* %447, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %444)
  br i1 %442, label %511, label %449

449:                                              ; preds = %441
  %450 = fcmp oeq double %443, 0x7FF0000000000000
  br i1 %450, label %494, label %451

451:                                              ; preds = %449
  %452 = fsub double %443, %436
  %453 = bitcast %"class.blink::AnimationTimeDelta"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %453) #10
  %454 = bitcast %"class.blink::AnimationTimeDelta"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %454) #10
  %455 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %10, i64 0, i32 0
  store double %452, double* %455, align 8
  %456 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %11, i64 0, i32 0
  store double %63, double* %456, align 8
  %457 = call double @llvm.fabs.f64(double %452) #12
  %458 = fcmp oeq double %457, 0x7FF0000000000000
  %459 = call double @llvm.fabs.f64(double %63) #12
  %460 = fcmp oeq double %459, 0x7FF0000000000000
  %461 = or i1 %460, %458
  br i1 %461, label %462, label %464

462:                                              ; preds = %451
  %463 = call zeroext i1 @_ZN5blinkeqERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %10, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %11) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %453) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %454) #10
  br i1 %463, label %476, label %484

464:                                              ; preds = %451
  %465 = bitcast %"class.blink::AnimationTimeDelta"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %465) #10
  %466 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %12, i64 0, i32 0
  store double 0xFFFFFFFFFFFFFFFF, double* %466, align 8
  %467 = call zeroext i1 @_ZN5blinkgeERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %10, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %11) #10
  %468 = load double, double* %456, align 8
  %469 = load double, double* %455, align 8
  %470 = select i1 %467, double %468, double %469
  %471 = select i1 %467, double %469, double %468
  %472 = fsub double %471, %470
  store double %472, double* %466, align 8
  %473 = bitcast %"class.blink::AnimationTimeDelta"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %473) #10
  %474 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %13, i64 0, i32 0
  store double 0x3EB0C6F7A0B5ED8D, double* %474, align 8
  %475 = call zeroext i1 @_ZN5blinkleERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %12, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %13) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %473) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %465) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %453) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %454) #10
  br i1 %475, label %476, label %484

476:                                              ; preds = %464, %462
  %477 = load double, double* %57, align 8
  %478 = fcmp une double %477, 0.000000e+00
  br i1 %478, label %479, label %484

479:                                              ; preds = %476
  %480 = load double, double* %221, align 8
  %481 = fadd double %477, %480
  %482 = call double @fmod(double %481, double 1.000000e+00) #10
  %483 = fcmp oeq double %482, 0.000000e+00
  br i1 %483, label %494, label %484

484:                                              ; preds = %479, %476, %464, %462
  %485 = call double @fmod(double %443, double %448) #10
  %486 = fcmp une double %485, 0.000000e+00
  %487 = icmp ne i32 %209, 2
  %488 = or i1 %487, %486
  %489 = fcmp oeq double %63, 0.000000e+00
  %490 = or i1 %489, %488
  %491 = fcmp oeq double %443, 0.000000e+00
  %492 = or i1 %491, %490
  %493 = select i1 %492, double %485, double %448
  br label %494

494:                                              ; preds = %484, %479, %449
  %495 = phi double [ %493, %484 ], [ %448, %479 ], [ %448, %449 ]
  %496 = bitcast double* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %496)
  store double 0.000000e+00, double* %9, align 8
  %497 = load i8, i8* %49, align 8, !range !2
  %498 = icmp eq i8 %497, 0
  %499 = bitcast double* %9 to %"class.blink::AnimationTimeDelta"*
  %500 = select i1 %498, %"class.blink::AnimationTimeDelta"* %499, %"class.blink::AnimationTimeDelta"* %52
  %501 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %500, i64 0, i32 0
  %502 = load double, double* %501, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %496)
  %503 = fsub double %502, %495
  store double %503, double* %416, align 8
  %504 = bitcast %"class.blink::AnimationTimeDelta"* %47 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %504) #10
  br i1 %225, label %505, label %506

505:                                              ; preds = %494
  call void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() #11
  unreachable

506:                                              ; preds = %494
  %507 = fsub double %63, %211
  %508 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %47, i64 0, i32 0
  store double %507, double* %508, align 8
  %509 = call zeroext i1 @_ZN5blinkltERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %47, %"class.blink::AnimationTimeDelta"* nonnull dereferenceable(8) %46) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %504) #10
  br i1 %509, label %510, label %511

510:                                              ; preds = %506
  store double 0x7FF0000000000000, double* %416, align 8
  br label %511

511:                                              ; preds = %510, %506, %441, %414
  %512 = bitcast %"struct.blink::Timing::CalculatedTiming"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %512, i8 0, i64 64, i1 false)
  %513 = getelementptr inbounds %"struct.blink::Timing::CalculatedTiming", %"struct.blink::Timing::CalculatedTiming"* %0, i64 0, i32 0
  %514 = getelementptr inbounds %"struct.blink::Timing::CalculatedTiming", %"struct.blink::Timing::CalculatedTiming"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %515 = getelementptr inbounds %"struct.blink::Timing::CalculatedTiming", %"struct.blink::Timing::CalculatedTiming"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %516 = getelementptr inbounds %"struct.blink::Timing::CalculatedTiming", %"struct.blink::Timing::CalculatedTiming"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %517 = getelementptr inbounds %"struct.blink::Timing::CalculatedTiming", %"struct.blink::Timing::CalculatedTiming"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1, i32 0
  %518 = getelementptr inbounds %"struct.blink::Timing::CalculatedTiming", %"struct.blink::Timing::CalculatedTiming"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %518, align 8
  %519 = getelementptr inbounds %"struct.blink::Timing::CalculatedTiming", %"struct.blink::Timing::CalculatedTiming"* %0, i64 0, i32 7, i32 0
  %520 = getelementptr inbounds double, double* %517, i64 1
  %521 = bitcast double* %520 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %521, i8 0, i64 3, i1 false) #10
  %522 = bitcast double* %519 to <2 x double>*
  store <2 x double> <double 0x7FF0000000000000, double 0x7FF0000000000000>, <2 x double>* %522, align 8
  %523 = getelementptr inbounds %"struct.blink::Timing::CalculatedTiming", %"struct.blink::Timing::CalculatedTiming"* %0, i64 0, i32 9, i32 0
  store double 0x7FF0000000000000, double* %523, align 8
  store i32 %209, i32* %513, align 8
  store i8 %330, i8* %514, align 8
  %524 = getelementptr inbounds i8, i8* %512, i64 9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %524, i8* align 1 getelementptr inbounds ({ { { { i8, [7 x i8], %union.anon.13 } } } }, { { { { i8, [7 x i8], %union.anon.13 } } } }* @__const._ZNK5blink6Timing16CalculateTimingsEN4absl8optionalINS_18AnimationTimeDeltaEEENS2_INS0_5PhaseEEENS0_18AnimationDirectionEbNS2_IdEE.current_iteration, i64 0, i32 0, i32 0, i32 0, i32 1, i64 0), i64 7, i1 false)
  store double %329, double* %515, align 8
  store i8 %400, i8* %516, align 8
  %525 = getelementptr inbounds i8, i8* %512, i64 25
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %525, i8* nonnull align 1 %212, i64 7, i1 false)
  store double %401, double* %517, align 8
  %526 = getelementptr inbounds %"struct.blink::Timing::CalculatedTiming", %"struct.blink::Timing::CalculatedTiming"* %0, i64 0, i32 4
  store i8 %210, i8* %526, align 1
  %527 = icmp eq i32 %209, 1
  %528 = getelementptr inbounds %"struct.blink::Timing::CalculatedTiming", %"struct.blink::Timing::CalculatedTiming"* %0, i64 0, i32 5
  %529 = zext i1 %527 to i8
  store i8 %529, i8* %528, align 2
  br i1 %527, label %545, label %530

530:                                              ; preds = %511
  %531 = getelementptr inbounds %"class.absl::optional.9", %"class.absl::optional.9"* %7, i64 0, i32 0, i32 0, i32 0, i32 0
  %532 = load i8, i8* %531, align 8, !range !2
  %533 = icmp eq i8 %532, 0
  br i1 %533, label %545, label %534

534:                                              ; preds = %530
  %535 = getelementptr inbounds %"class.absl::optional.9", %"class.absl::optional.9"* %7, i64 0, i32 0, i32 0, i32 0, i32 1, i32 0
  %536 = load double, double* %535, align 8
  %537 = fcmp ogt double %536, 0.000000e+00
  %538 = icmp eq i32 %209, 0
  %539 = and i1 %538, %537
  br i1 %539, label %545, label %540

540:                                              ; preds = %534
  %541 = fcmp olt double %536, 0.000000e+00
  br i1 %541, label %542, label %545

542:                                              ; preds = %540
  %543 = icmp eq i32 %209, 2
  %544 = zext i1 %543 to i8
  br label %545

545:                                              ; preds = %530, %534, %540, %542, %511
  %546 = phi i8 [ 1, %511 ], [ 0, %540 ], [ %544, %542 ], [ 1, %534 ], [ 0, %530 ]
  %547 = getelementptr inbounds %"struct.blink::Timing::CalculatedTiming", %"struct.blink::Timing::CalculatedTiming"* %0, i64 0, i32 3
  store i8 %546, i8* %547, align 8
  store i8 %2, i8* %518, align 8
  %548 = getelementptr inbounds i8, i8* %512, i64 49
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %548, i8* nonnull align 1 %64, i64 7, i1 false)
  %549 = getelementptr inbounds %"struct.blink::Timing::CalculatedTiming", %"struct.blink::Timing::CalculatedTiming"* %0, i64 0, i32 6, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store double %3, double* %549, align 8
  %550 = getelementptr inbounds %"struct.blink::Timing::CalculatedTiming", %"struct.blink::Timing::CalculatedTiming"* %0, i64 0, i32 9
  %551 = bitcast %"class.blink::AnimationTimeDelta"* %46 to i64*
  %552 = bitcast %"class.blink::AnimationTimeDelta"* %550 to i64*
  %553 = load i64, i64* %551, align 8
  store i64 %553, i64* %552, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %415) #10
  call void @llvm.lifetime.end.p0i8(i64 7, i8* nonnull %212)
  ret void
}

declare zeroext i1 @_ZN5blinkltERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* dereferenceable(8), %"class.blink::AnimationTimeDelta"* dereferenceable(8)) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare void @_ZN3WTF6StringC2EPKcm(%"class.WTF::String"*, i8*, i64) unnamed_addr #4

declare zeroext i1 @_ZN3WTF15EqualStringViewERKNS_10StringViewES2_(%"class.WTF::StringView"* dereferenceable(24), %"class.WTF::StringView"* dereferenceable(24)) local_unnamed_addr #4

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare void @_ZN5blink12EffectTimingC1Ev(%"class.blink::EffectTiming"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZN5blink10ThreadHeap8AllocateINS_17IDLDictionaryBaseEEEPhm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = load %"class.WTF::ThreadSpecific"*, %"class.WTF::ThreadSpecific"** @_ZN5blink11ThreadState16thread_specific_E, align 8
  %6 = getelementptr inbounds %"class.WTF::ThreadSpecific", %"class.WTF::ThreadSpecific"* %5, i64 0, i32 1
  %7 = tail call i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"* %6) #10
  %8 = icmp eq i8* %7, null
  br i1 %8, label %9, label %11, !prof !3

9:                                                ; preds = %1
  %10 = tail call i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64 8, i8* getelementptr inbounds ([68 x i8], [68 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIPN5blink11ThreadStateEEEPKcv, i64 0, i64 0)) #10
  tail call void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"* %6, i8* %10) #10
  br label %11

11:                                               ; preds = %1, %9
  %12 = phi i8* [ %10, %9 ], [ %7, %1 ]
  %13 = bitcast i8* %12 to %"class.blink::ThreadState"**
  %14 = load %"class.blink::ThreadState"*, %"class.blink::ThreadState"** %13, align 8
  %15 = getelementptr inbounds %"class.blink::ThreadState", %"class.blink::ThreadState"* %14, i64 0, i32 0, i32 0, i32 0, i32 0
  %16 = load %"class.blink::ThreadHeap"*, %"class.blink::ThreadHeap"** %15, align 8
  %17 = icmp ult i64 %0, 64
  %18 = icmp ugt i64 %0, 31
  %19 = zext i1 %18 to i64
  %20 = icmp ult i64 %0, 128
  %21 = select i1 %20, i64 2, i64 3
  %22 = select i1 %17, i64 %19, i64 %21
  %23 = load atomic i32, i32* getelementptr inbounds ({ { i32 } }, { { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index, i64 0, i32 0, i32 0) acquire, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %25, label %28

25:                                               ; preds = %11
  %26 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %27 = tail call i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"* %26, %"struct.blink::GCInfo"* nonnull @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE7kGcInfo, %"struct.std::__1::atomic"* bitcast ({ { i32 } }* @_ZZN5blink11GCInfoTraitINS_17IDLDictionaryBaseEE5IndexEvE13gc_info_index to %"struct.std::__1::atomic"*)) #10
  br label %28

28:                                               ; preds = %11, %25
  %29 = phi i32 [ %23, %11 ], [ %27, %25 ]
  %30 = getelementptr inbounds %"class.blink::ThreadHeap", %"class.blink::ThreadHeap"* %16, i64 0, i32 19, i64 %22
  %31 = bitcast %"class.blink::BaseArena"** %30 to %"class.blink::NormalPageArena"**
  %32 = load %"class.blink::NormalPageArena"*, %"class.blink::NormalPageArena"** %31, align 8
  %33 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #10
  %34 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %34, align 8
  %35 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #10
  %36 = icmp ult i64 %0, -8
  br i1 %36, label %37, label %38

37:                                               ; preds = %28
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #10
  store i8* null, i8** %34, align 8
  br label %48

38:                                               ; preds = %28
  %39 = add nsw i64 %0, 8
  %40 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %39) #10
  %41 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #10
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0), i8* %40, i8* %41) #10
  %42 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %43 = load i8*, i8** %42, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #10
  store i8* %43, i8** %34, align 8
  %44 = icmp eq i8* %43, null
  br i1 %44, label %48, label %45

45:                                               ; preds = %38
  %46 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %46) #10
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.10, i64 0, i64 0), i32 246, %"class.logging::CheckOpResult"* nonnull %3) #10
  %47 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %46) #10
  br label %48

48:                                               ; preds = %37, %38, %45
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #10
  %49 = add i64 %0, 15
  %50 = and i64 %49, -8
  %51 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 4
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %50
  br i1 %53, label %86, label %54, !prof !3

54:                                               ; preds = %48
  %55 = getelementptr inbounds %"class.blink::NormalPageArena", %"class.blink::NormalPageArena"* %32, i64 0, i32 3
  %56 = load i8*, i8** %55, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 %50
  store i8* %57, i8** %55, align 8
  %58 = sub i64 %52, %50
  store i64 %58, i64* %51, align 8
  %59 = bitcast i8* %56 to i32*
  store i32 0, i32* %59, align 4
  %60 = getelementptr inbounds i8, i8* %56, i64 4
  %61 = bitcast i8* %60 to i16*
  %62 = trunc i32 %29 to i16
  %63 = shl i16 %62, 2
  store atomic i16 %63, i16* %61 monotonic, align 2
  %64 = lshr exact i64 %50, 1
  %65 = trunc i64 %64 to i16
  %66 = getelementptr inbounds i8, i8* %56, i64 6
  %67 = bitcast i8* %66 to i16*
  store i16 %65, i16* %67, align 2
  %68 = ptrtoint i8* %56 to i64
  %69 = and i64 %68, -131072
  %70 = inttoptr i64 %69 to i8*
  %71 = getelementptr inbounds i8, i8* %70, i64 4400
  %72 = bitcast i8* %71 to %"class.blink::PlatformAwareObjectStartBitmap"*
  %73 = bitcast i8* %71 to i64*
  %74 = load i64, i64* %73, align 16
  %75 = sub i64 %68, %74
  %76 = lshr i64 %75, 3
  %77 = lshr i64 %75, 6
  %78 = getelementptr inbounds %"class.blink::PlatformAwareObjectStartBitmap", %"class.blink::PlatformAwareObjectStartBitmap"* %72, i64 0, i32 0, i32 1, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = trunc i64 %76 to i32
  %81 = and i32 %80, 7
  %82 = shl i32 1, %81
  %83 = trunc i32 %82 to i8
  %84 = or i8 %79, %83
  store atomic i8 %84, i8* %78 release, align 1
  %85 = getelementptr inbounds i8, i8* %56, i64 8
  br label %89

86:                                               ; preds = %48
  %87 = zext i32 %29 to i64
  %88 = call i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"* %32, i64 %50, i64 %87) #10
  br label %89

89:                                               ; preds = %54, %86
  %90 = phi i8* [ %85, %54 ], [ %88, %86 ]
  ret i8* %90
}

declare i8* @_ZN3WTF10Partitions16FastZeroedMallocEmPKc(i64, i8*) local_unnamed_addr #4

declare i8* @_ZNK4base18ThreadLocalStorage4Slot3GetEv(%"class.base::ThreadLocalStorage::Slot"*) local_unnamed_addr #4

declare void @_ZN4base18ThreadLocalStorage4Slot3SetEPv(%"class.base::ThreadLocalStorage::Slot"*, i8*) local_unnamed_addr #4

declare i8* @_ZN5blink15NormalPageArena17OutOfLineAllocateEmm(%"class.blink::NormalPageArena"*, i64, i64) local_unnamed_addr #4

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink10TraceTraitINS_17IDLDictionaryBaseEE5TraceEPNS_7VisitorEPKv(%"class.blink::Visitor"*, i8*) #0 comdat align 2 {
  %3 = bitcast i8* %1 to %"class.blink::IDLDictionaryBase"*
  %4 = bitcast i8* %1 to void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)***
  %5 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)**, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %5, i64 3
  %7 = load void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)*, void (%"class.blink::IDLDictionaryBase"*, %"class.blink::Visitor"*)** %6, align 8
  tail call void %7(%"class.blink::IDLDictionaryBase"* %3, %"class.blink::Visitor"* %0) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8internal14FinalizerTraitINS_17IDLDictionaryBaseEE8FinalizeEPv(i8*) #0 comdat align 2 {
  %2 = bitcast i8* %0 to %"class.blink::IDLDictionaryBase"*
  %3 = bitcast i8* %0 to void (%"class.blink::IDLDictionaryBase"*)***
  %4 = load void (%"class.blink::IDLDictionaryBase"*)**, void (%"class.blink::IDLDictionaryBase"*)*** %3, align 8
  %5 = load void (%"class.blink::IDLDictionaryBase"*)*, void (%"class.blink::IDLDictionaryBase"*)** %4, align 8
  tail call void %5(%"class.blink::IDLDictionaryBase"* %2) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i8*, i8 } @_ZN5blink9NameTraitINS_17IDLDictionaryBaseEE7GetNameEPKv(i8*) #0 comdat align 2 {
  ret { i8*, i8 } { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0), i8 1 }
}

declare i32 @_ZN5blink11GCInfoTable17EnsureGCInfoIndexEPKNS_6GCInfoEPNSt3__16atomicIjEE(%"class.blink::GCInfoTable"*, %"struct.blink::GCInfo"*, %"struct.std::__1::atomic"*) local_unnamed_addr #4

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #7

declare void @_ZN5blink20ComputedEffectTimingC1Ev(%"class.blink::ComputedEffectTiming"*) unnamed_addr #4

; Function Attrs: noreturn
declare void @_ZN4absl17optional_internal25throw_bad_optional_accessEv() local_unnamed_addr #8

declare zeroext i1 @_ZN5blinkeqERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* dereferenceable(8), %"class.blink::AnimationTimeDelta"* dereferenceable(8)) local_unnamed_addr #4

declare zeroext i1 @_ZN5blinkgtERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* dereferenceable(8), %"class.blink::AnimationTimeDelta"* dereferenceable(8)) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden double @_ZNK5blink18AnimationTimeDeltadvES0_(%"class.blink::AnimationTimeDelta"*, double) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = fcmp oeq double %1, 0.000000e+00
  br i1 %5, label %6, label %9

6:                                                ; preds = %2
  %7 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.12, i64 0, i64 0), i32 98, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i64 0, i64 0)) #10
  %8 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #10
  br label %9

9:                                                ; preds = %2, %6
  %10 = getelementptr inbounds %"class.blink::AnimationTimeDelta", %"class.blink::AnimationTimeDelta"* %0, i64 0, i32 0
  %11 = load double, double* %10, align 8
  %12 = call double @llvm.fabs.f64(double %11) #12
  %13 = fcmp oeq double %12, 0x7FF0000000000000
  %14 = call double @llvm.fabs.f64(double %1) #12
  %15 = fcmp oeq double %14, 0x7FF0000000000000
  %16 = and i1 %15, %13
  br i1 %16, label %17, label %21

17:                                               ; preds = %9
  %18 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #10
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.12, i64 0, i64 0), i32 99, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.14, i64 0, i64 0)) #10
  %19 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #10
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #10
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #10
  %20 = load double, double* %10, align 8
  br label %21

21:                                               ; preds = %9, %17
  %22 = phi double [ %11, %9 ], [ %20, %17 ]
  %23 = fdiv double %22, %1
  ret double %23
}

declare zeroext i1 @_ZN5blinkgeERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* dereferenceable(8), %"class.blink::AnimationTimeDelta"* dereferenceable(8)) local_unnamed_addr #4

declare zeroext i1 @_ZN5blinkleERKNS_18AnimationTimeDeltaES2_(%"class.blink::AnimationTimeDelta"* dereferenceable(8), %"class.blink::AnimationTimeDelta"* dereferenceable(8)) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #7

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare double @fmod(double, double) local_unnamed_addr #9

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #7

; Function Attrs: nounwind readnone speculatable
declare double @llvm.maxnum.f64(double, double) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noreturn nounwind }
attributes #12 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!"branch_weights", i32 1, i32 2000}
