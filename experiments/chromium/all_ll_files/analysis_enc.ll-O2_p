; ModuleID = '../../third_party/libwebp/src/enc/analysis_enc.c'
source_filename = "../../third_party/libwebp/src/enc/analysis_enc.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VP8Histogram = type { i32, i32 }
%struct.VP8Encoder = type { %struct.WebPConfig*, %struct.WebPPicture*, %struct.VP8EncFilterHeader, %struct.VP8EncSegmentHeader, i32, i32, i32, i32, i32, %struct.VP8BitWriter, [8 x %struct.VP8BitWriter], %struct.VP8TBuffer, i32, i32, i8*, i32, %struct.WebPWorker, [4 x %struct.VP8SegmentInfo], i32, i32, i32, i32, i32, i32, i32, i32, %struct.VP8EncProba, [4 x i64], i64, i32, [3 x [4 x i32]], [3 x i32], i32, i32, i32, i32, i32, i32, i32, %struct.VP8MBInfo*, i8*, i32*, i8*, i8*, [4 x [64 x double]]*, [2 x [2 x i8]]* }
%struct.WebPConfig = type { i32, float, i32, i32, i32, float, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.WebPPicture = type { i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i8*, i32, [2 x i32], i32*, i32, [3 x i32], i32 (i8*, i64, %struct.WebPPicture*)*, i8*, i32, i8*, %struct.WebPAuxStats*, i32, i32 (i32, %struct.WebPPicture*)*, i8*, [3 x i32], i8*, i8*, [8 x i32], i8*, i8*, [2 x i8*] }
%struct.WebPAuxStats = type { i32, [5 x float], [3 x i32], [2 x i32], [3 x [4 x i32]], [4 x i32], [4 x i32], [4 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32] }
%struct.VP8EncFilterHeader = type { i32, i32, i32, i32 }
%struct.VP8EncSegmentHeader = type { i32, i32, i32 }
%struct.VP8BitWriter = type { i32, i32, i32, i32, i8*, i64, i64, i32 }
%struct.VP8TBuffer = type { %struct.VP8Tokens*, %struct.VP8Tokens**, i16*, i32, i32, i32 }
%struct.VP8Tokens = type opaque
%struct.WebPWorker = type { i8*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VP8SegmentInfo = type { %struct.VP8Matrix, %struct.VP8Matrix, %struct.VP8Matrix, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64 }
%struct.VP8Matrix = type { [16 x i16], [16 x i16], [16 x i32], [16 x i32], [16 x i16] }
%struct.VP8EncProba = type { [3 x i8], i8, [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i32]]]], [4 x [8 x [3 x [68 x i16]]]], [4 x [16 x [3 x i16*]]], i32, i32, i32 }
%struct.VP8MBInfo = type { i8, i8, [2 x i8] }
%struct.SegmentJob = type { %struct.WebPWorker, [256 x i32], i32, i32, %struct.VP8EncIterator, i32 }
%struct.VP8EncIterator = type { i32, i32, i8*, i8*, i8*, i8*, %struct.VP8Encoder*, %struct.VP8MBInfo*, %struct.VP8BitWriter*, i8*, i32*, [37 x i8], i8*, i32, [9 x i32], [9 x i32], [4 x [3 x i64]], i64, i64, [4 x [64 x double]]*, i32, i32, i32, i32, [2 x [2 x i8]], [2 x [2 x i8]]*, i8*, i8*, i8*, i8*, i8*, [88 x i8], [3359 x i8] }
%struct.WebPWorkerInterface = type { void (%struct.WebPWorker*)*, i32 (%struct.WebPWorker*)*, i32 (%struct.WebPWorker*)*, void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)* }

@VP8Mean16x4 = external local_unnamed_addr global void (i8*, i32*)*, align 8
@FastMBAnalyze.modes = internal constant [16 x i8] zeroinitializer, align 16
@VP8CollectHistogram = external local_unnamed_addr global void (i8*, i8*, i32, i32, %struct.VP8Histogram*)*, align 8
@VP8I16ModeOffsets = external local_unnamed_addr constant [4 x i16], align 2
@VP8UVModeOffsets = external local_unnamed_addr constant [4 x i16], align 2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @VP8EncAnalyze(%struct.VP8Encoder*) local_unnamed_addr #0 {
  %2 = alloca [4 x i32], align 16
  %3 = alloca [4 x i32], align 16
  %4 = alloca [256 x i32], align 16
  %5 = alloca [4 x i32], align 16
  %6 = alloca [4 x i32], align 16
  %7 = alloca %struct.SegmentJob, align 8
  %8 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 0
  %9 = load %struct.WebPConfig*, %struct.WebPConfig** %8, align 8
  %10 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %9, i64 0, i32 20
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %21

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 3, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = icmp sgt i32 %15, 1
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 32
  %19 = load i32, i32* %18, align 8
  %20 = icmp slt i32 %19, 2
  br i1 %20, label %21, label %614

21:                                               ; preds = %1, %13, %17
  %22 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 6
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 5
  %25 = load i32, i32* %24, align 8
  %26 = mul nsw i32 %25, %23
  %27 = tail call %struct.WebPWorkerInterface* @WebPGetWorkerInterface() #3
  %28 = bitcast %struct.SegmentJob* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4936, i8* nonnull %28) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %28, i8 -86, i64 4936, i1 false)
  %29 = tail call %struct.WebPWorkerInterface* @WebPGetWorkerInterface() #3
  %30 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %29, i64 0, i32 0
  %31 = load void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)** %30, align 8
  %32 = getelementptr inbounds %struct.SegmentJob, %struct.SegmentJob* %7, i64 0, i32 0
  call void %31(%struct.WebPWorker* nonnull %32) #3
  %33 = getelementptr inbounds %struct.SegmentJob, %struct.SegmentJob* %7, i64 0, i32 0, i32 3
  %34 = bitcast i8** %33 to %struct.SegmentJob**
  store %struct.SegmentJob* %7, %struct.SegmentJob** %34, align 8
  %35 = getelementptr inbounds %struct.SegmentJob, %struct.SegmentJob* %7, i64 0, i32 4
  %36 = getelementptr inbounds %struct.SegmentJob, %struct.SegmentJob* %7, i64 0, i32 0, i32 4
  %37 = bitcast i8** %36 to %struct.VP8EncIterator**
  store %struct.VP8EncIterator* %35, %struct.VP8EncIterator** %37, align 8
  %38 = getelementptr inbounds %struct.SegmentJob, %struct.SegmentJob* %7, i64 0, i32 0, i32 2
  store i32 (i8*, i8*)* @DoSegmentsJob, i32 (i8*, i8*)** %38, align 8
  call void @VP8IteratorInit(%struct.VP8Encoder* %0, %struct.VP8EncIterator* %35) #3
  call void @VP8IteratorSetRow(%struct.VP8EncIterator* %35, i32 0) #3
  %39 = load i32, i32* %24, align 8
  %40 = mul nsw i32 %39, %23
  call void @VP8IteratorSetCountDown(%struct.VP8EncIterator* %35, i32 %40) #3
  %41 = getelementptr inbounds %struct.SegmentJob, %struct.SegmentJob* %7, i64 0, i32 1, i64 0
  %42 = getelementptr inbounds %struct.SegmentJob, %struct.SegmentJob* %7, i64 0, i32 5
  %43 = bitcast i32* %41 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %43, i8 0, i64 1032, i1 false) #3
  store i32 20, i32* %42, align 8
  %44 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %27, i64 0, i32 4
  %45 = load void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)** %44, align 8
  call void %45(%struct.WebPWorker* nonnull %32) #3
  %46 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %27, i64 0, i32 2
  %47 = load i32 (%struct.WebPWorker*)*, i32 (%struct.WebPWorker*)** %46, align 8
  %48 = call i32 %47(%struct.WebPWorker* nonnull %32) #3
  %49 = and i32 %48, 1
  %50 = getelementptr inbounds %struct.WebPWorkerInterface, %struct.WebPWorkerInterface* %27, i64 0, i32 5
  %51 = load void (%struct.WebPWorker*)*, void (%struct.WebPWorker*)** %50, align 8
  call void %51(%struct.WebPWorker* nonnull %32) #3
  %52 = icmp eq i32 %49, 0
  br i1 %52, label %613, label %53

53:                                               ; preds = %21
  %54 = getelementptr inbounds %struct.SegmentJob, %struct.SegmentJob* %7, i64 0, i32 2
  %55 = load i32, i32* %54, align 8
  %56 = sdiv i32 %55, %26
  %57 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 19
  store i32 %56, i32* %57, align 4
  %58 = getelementptr inbounds %struct.SegmentJob, %struct.SegmentJob* %7, i64 0, i32 3
  %59 = load i32, i32* %58, align 4
  %60 = sdiv i32 %59, %26
  %61 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 20
  store i32 %60, i32* %61, align 8
  %62 = bitcast [4 x i32]* %5 to i8*
  %63 = bitcast [4 x i32]* %6 to i8*
  %64 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 3, i32 0
  %65 = load i32, i32* %64, align 8
  %66 = icmp slt i32 %65, 4
  %67 = select i1 %66, i32 %65, i32 4
  %68 = bitcast [4 x i32]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %68) #3
  %69 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 0
  %70 = bitcast [256 x i32]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %68, i8 -86, i64 16, i1 false) #3
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %70) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %70, i8 -86, i64 1024, i1 false) #3
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %62) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %62, i8 -86, i64 16, i1 false) #3
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %63) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %63, i8 -86, i64 16, i1 false) #3
  br label %71

71:                                               ; preds = %660, %53
  %72 = phi i64 [ 0, %53 ], [ %661, %660 ]
  %73 = phi i32 [ 0, %53 ], [ %662, %660 ]
  %74 = getelementptr inbounds %struct.SegmentJob, %struct.SegmentJob* %7, i64 0, i32 1, i64 %72
  %75 = load i32, i32* %74, align 8
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %77, label %82

77:                                               ; preds = %71
  %78 = or i64 %72, 1
  %79 = getelementptr inbounds %struct.SegmentJob, %struct.SegmentJob* %7, i64 0, i32 1, i64 %78
  %80 = load i32, i32* %79, align 4
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %650, label %82

82:                                               ; preds = %655, %650, %77, %71
  %83 = phi i64 [ %72, %71 ], [ %78, %77 ], [ %651, %650 ], [ %656, %655 ]
  %84 = trunc i64 %83 to i32
  br label %85

85:                                               ; preds = %660, %82
  %86 = phi i32 [ %84, %82 ], [ %662, %660 ]
  %87 = icmp slt i32 %86, 255
  br i1 %87, label %88, label %102

88:                                               ; preds = %85
  %89 = zext i32 %86 to i64
  br label %90

90:                                               ; preds = %96, %88
  %91 = phi i64 [ 255, %88 ], [ %97, %96 ]
  %92 = phi i32 [ 255, %88 ], [ %98, %96 ]
  %93 = getelementptr inbounds %struct.SegmentJob, %struct.SegmentJob* %7, i64 0, i32 1, i64 %91
  %94 = load i32, i32* %93, align 4
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %100

96:                                               ; preds = %90
  %97 = add nsw i64 %91, -1
  %98 = add nsw i32 %92, -1
  %99 = icmp ugt i64 %97, %89
  br i1 %99, label %90, label %102

100:                                              ; preds = %90
  %101 = trunc i64 %91 to i32
  br label %102

102:                                              ; preds = %96, %100, %85
  %103 = phi i32 [ 255, %85 ], [ %101, %100 ], [ %98, %96 ]
  %104 = sub nsw i32 %103, %86
  %105 = icmp sgt i32 %65, 0
  br i1 %105, label %108, label %106

106:                                              ; preds = %102
  %107 = sext i32 %67 to i64
  br label %111

108:                                              ; preds = %102
  %109 = shl nsw i32 %67, 1
  %110 = sext i32 %67 to i64
  br label %121

111:                                              ; preds = %121, %106
  %112 = phi i64 [ %107, %106 ], [ %110, %121 ]
  %113 = icmp slt i32 %103, %86
  %114 = icmp sgt i32 %67, 1
  %115 = select i1 %114, i32 %67, i32 1
  %116 = zext i32 %115 to i64
  %117 = shl nuw nsw i64 %116, 2
  %118 = zext i32 %86 to i64
  %119 = add nuw nsw i32 %103, 1
  %120 = zext i32 %119 to i64
  br label %131

121:                                              ; preds = %121, %108
  %122 = phi i64 [ 0, %108 ], [ %128, %121 ]
  %123 = phi i32 [ 1, %108 ], [ %129, %121 ]
  %124 = mul nsw i32 %123, %104
  %125 = sdiv i32 %124, %109
  %126 = add nsw i32 %125, %86
  %127 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %122
  store i32 %126, i32* %127, align 4
  %128 = add nuw nsw i64 %122, 1
  %129 = add nuw nsw i32 %123, 2
  %130 = icmp slt i64 %128, %110
  br i1 %130, label %121, label %111

131:                                              ; preds = %209, %111
  %132 = phi i32 [ 0, %111 ], [ %211, %209 ]
  br i1 %105, label %133, label %134

133:                                              ; preds = %131
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %62, i8 0, i64 %117, i1 false) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %63, i8 0, i64 %117, i1 false) #3
  br label %134

134:                                              ; preds = %133, %131
  br i1 %113, label %135, label %136

135:                                              ; preds = %175, %134
  br i1 %105, label %179, label %214

136:                                              ; preds = %134, %175
  %137 = phi i64 [ %177, %175 ], [ %118, %134 ]
  %138 = phi i32 [ %176, %175 ], [ 0, %134 ]
  %139 = getelementptr inbounds %struct.SegmentJob, %struct.SegmentJob* %7, i64 0, i32 1, i64 %137
  %140 = load i32, i32* %139, align 4
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %175, label %142

142:                                              ; preds = %136
  %143 = sext i32 %138 to i64
  %144 = trunc i64 %137 to i32
  br label %145

145:                                              ; preds = %149, %142
  %146 = phi i64 [ %143, %142 ], [ %147, %149 ]
  %147 = add nsw i64 %146, 1
  %148 = icmp slt i64 %147, %112
  br i1 %148, label %149, label %163

149:                                              ; preds = %145
  %150 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %147
  %151 = load i32, i32* %150, align 4
  %152 = sub nsw i32 %144, %151
  %153 = icmp slt i32 %152, 0
  %154 = sub nsw i32 0, %152
  %155 = select i1 %153, i32 %154, i32 %152
  %156 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %146
  %157 = load i32, i32* %156, align 4
  %158 = sub nsw i32 %144, %157
  %159 = icmp slt i32 %158, 0
  %160 = sub nsw i32 0, %158
  %161 = select i1 %159, i32 %160, i32 %158
  %162 = icmp slt i32 %155, %161
  br i1 %162, label %145, label %163

163:                                              ; preds = %149, %145
  %164 = trunc i64 %146 to i32
  %165 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %137
  store i32 %164, i32* %165, align 4
  %166 = mul nsw i32 %140, %144
  %167 = shl i64 %146, 32
  %168 = ashr exact i64 %167, 32
  %169 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %168
  %170 = load i32, i32* %169, align 4
  %171 = add nsw i32 %170, %166
  store i32 %171, i32* %169, align 4
  %172 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %168
  %173 = load i32, i32* %172, align 4
  %174 = add nsw i32 %173, %140
  store i32 %174, i32* %172, align 4
  br label %175

175:                                              ; preds = %163, %136
  %176 = phi i32 [ %164, %163 ], [ %138, %136 ]
  %177 = add nuw nsw i64 %137, 1
  %178 = icmp eq i64 %177, %120
  br i1 %178, label %135, label %136

179:                                              ; preds = %135, %203
  %180 = phi i64 [ %207, %203 ], [ 0, %135 ]
  %181 = phi i32 [ %206, %203 ], [ 0, %135 ]
  %182 = phi i32 [ %205, %203 ], [ 0, %135 ]
  %183 = phi i32 [ %204, %203 ], [ 0, %135 ]
  %184 = getelementptr inbounds [4 x i32], [4 x i32]* %5, i64 0, i64 %180
  %185 = load i32, i32* %184, align 4
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %203, label %187

187:                                              ; preds = %179
  %188 = getelementptr inbounds [4 x i32], [4 x i32]* %6, i64 0, i64 %180
  %189 = load i32, i32* %188, align 4
  %190 = sdiv i32 %185, 2
  %191 = add nsw i32 %189, %190
  %192 = sdiv i32 %191, %185
  %193 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %180
  %194 = load i32, i32* %193, align 4
  %195 = sub nsw i32 %194, %192
  %196 = icmp slt i32 %195, 0
  %197 = sub nsw i32 0, %195
  %198 = select i1 %196, i32 %197, i32 %195
  %199 = add nsw i32 %198, %182
  store i32 %192, i32* %193, align 4
  %200 = mul nsw i32 %192, %185
  %201 = add nsw i32 %200, %181
  %202 = add nsw i32 %185, %183
  br label %203

203:                                              ; preds = %187, %179
  %204 = phi i32 [ %202, %187 ], [ %183, %179 ]
  %205 = phi i32 [ %199, %187 ], [ %182, %179 ]
  %206 = phi i32 [ %201, %187 ], [ %181, %179 ]
  %207 = add nuw nsw i64 %180, 1
  %208 = icmp slt i64 %207, %112
  br i1 %208, label %179, label %209

209:                                              ; preds = %203
  %210 = icmp sgt i32 %205, 4
  %211 = add nuw nsw i32 %132, 1
  %212 = icmp ult i32 %211, 6
  %213 = and i1 %212, %210
  br i1 %213, label %131, label %214

214:                                              ; preds = %135, %209
  %215 = phi i32 [ %206, %209 ], [ 0, %135 ]
  %216 = phi i32 [ %204, %209 ], [ 0, %135 ]
  %217 = sdiv i32 %216, 2
  %218 = add nsw i32 %217, %215
  %219 = sdiv i32 %218, %216
  %220 = load i32, i32* %24, align 8
  %221 = load i32, i32* %22, align 4
  %222 = mul nsw i32 %221, %220
  %223 = icmp sgt i32 %222, 0
  br i1 %223, label %224, label %251

224:                                              ; preds = %214
  %225 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 39
  br label %226

226:                                              ; preds = %226, %224
  %227 = phi i64 [ 0, %224 ], [ %245, %226 ]
  %228 = load %struct.VP8MBInfo*, %struct.VP8MBInfo** %225, align 8
  %229 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %228, i64 %227, i32 1
  %230 = load i8, i8* %229, align 1
  %231 = zext i8 %230 to i64
  %232 = getelementptr inbounds [256 x i32], [256 x i32]* %4, i64 0, i64 %231
  %233 = load i32, i32* %232, align 4
  %234 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %228, i64 %227, i32 0
  %235 = trunc i32 %233 to i8
  %236 = load i8, i8* %234, align 4
  %237 = shl i8 %235, 5
  %238 = and i8 %237, 96
  %239 = and i8 %236, -97
  %240 = or i8 %238, %239
  store i8 %240, i8* %234, align 4
  %241 = sext i32 %233 to i64
  %242 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %241
  %243 = load i32, i32* %242, align 4
  %244 = trunc i32 %243 to i8
  store i8 %244, i8* %229, align 1
  %245 = add nuw nsw i64 %227, 1
  %246 = load i32, i32* %24, align 8
  %247 = load i32, i32* %22, align 4
  %248 = mul nsw i32 %247, %246
  %249 = sext i32 %248 to i64
  %250 = icmp slt i64 %245, %249
  br i1 %250, label %226, label %251

251:                                              ; preds = %226, %214
  %252 = phi i32 [ %220, %214 ], [ %246, %226 ]
  %253 = phi i32 [ %221, %214 ], [ %247, %226 ]
  %254 = phi i32 [ %222, %214 ], [ %248, %226 ]
  br i1 %114, label %255, label %448

255:                                              ; preds = %251
  %256 = load %struct.WebPConfig*, %struct.WebPConfig** %8, align 8
  %257 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %256, i64 0, i32 17
  %258 = load i32, i32* %257, align 4
  %259 = and i32 %258, 1
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %448, label %261

261:                                              ; preds = %255
  %262 = sext i32 %254 to i64
  %263 = call i8* @WebPSafeMalloc(i64 %262, i64 1) #3
  %264 = icmp eq i8* %263, null
  br i1 %264, label %448, label %265

265:                                              ; preds = %261
  %266 = add i32 %253, -1
  %267 = icmp sgt i32 %266, 1
  br i1 %267, label %268, label %440

268:                                              ; preds = %265
  %269 = add i32 %252, -1
  %270 = icmp sgt i32 %269, 1
  %271 = bitcast [4 x i32]* %2 to i8*
  %272 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 39
  %273 = sub nsw i32 0, %252
  %274 = xor i32 %252, -1
  %275 = sext i32 %274 to i64
  %276 = sext i32 %273 to i64
  %277 = sub i32 1, %252
  %278 = sext i32 %277 to i64
  %279 = sext i32 %269 to i64
  %280 = sext i32 %252 to i64
  %281 = add nsw i32 %252, 1
  %282 = sext i32 %281 to i64
  %283 = zext i32 %266 to i64
  %284 = zext i32 %269 to i64
  %285 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 0
  %286 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 1
  %287 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 2
  %288 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 3
  br label %289

289:                                              ; preds = %384, %268
  %290 = phi i64 [ 1, %268 ], [ %385, %384 ]
  br i1 %270, label %291, label %384

291:                                              ; preds = %289
  %292 = mul nsw i64 %290, %280
  br label %293

293:                                              ; preds = %379, %291
  %294 = phi i64 [ 1, %291 ], [ %382, %379 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %271) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %271, i8 0, i64 16, i1 false) #3
  %295 = load %struct.VP8MBInfo*, %struct.VP8MBInfo** %272, align 8
  %296 = add nsw i64 %294, %292
  %297 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %295, i64 %296
  %298 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %297, i64 0, i32 0
  %299 = load i8, i8* %298, align 4
  %300 = lshr i8 %299, 5
  %301 = and i8 %300, 3
  %302 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %297, i64 %275
  %303 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %302, i64 0, i32 0
  %304 = load i8, i8* %303, align 4
  %305 = lshr i8 %304, 5
  %306 = and i8 %305, 3
  %307 = zext i8 %306 to i64
  %308 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 %307
  %309 = load i32, i32* %308, align 4
  %310 = add nsw i32 %309, 1
  store i32 %310, i32* %308, align 4
  %311 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %297, i64 %276
  %312 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %311, i64 0, i32 0
  %313 = load i8, i8* %312, align 4
  %314 = lshr i8 %313, 5
  %315 = and i8 %314, 3
  %316 = zext i8 %315 to i64
  %317 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 %316
  %318 = load i32, i32* %317, align 4
  %319 = add nsw i32 %318, 1
  store i32 %319, i32* %317, align 4
  %320 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %297, i64 %278
  %321 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %320, i64 0, i32 0
  %322 = load i8, i8* %321, align 4
  %323 = lshr i8 %322, 5
  %324 = and i8 %323, 3
  %325 = zext i8 %324 to i64
  %326 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 %325
  %327 = load i32, i32* %326, align 4
  %328 = add nsw i32 %327, 1
  store i32 %328, i32* %326, align 4
  %329 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %297, i64 -1
  %330 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %329, i64 0, i32 0
  %331 = load i8, i8* %330, align 4
  %332 = lshr i8 %331, 5
  %333 = and i8 %332, 3
  %334 = zext i8 %333 to i64
  %335 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 %334
  %336 = load i32, i32* %335, align 4
  %337 = add nsw i32 %336, 1
  store i32 %337, i32* %335, align 4
  %338 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %297, i64 1
  %339 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %338, i64 0, i32 0
  %340 = load i8, i8* %339, align 4
  %341 = lshr i8 %340, 5
  %342 = and i8 %341, 3
  %343 = zext i8 %342 to i64
  %344 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 %343
  %345 = load i32, i32* %344, align 4
  %346 = add nsw i32 %345, 1
  store i32 %346, i32* %344, align 4
  %347 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %297, i64 %279
  %348 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %347, i64 0, i32 0
  %349 = load i8, i8* %348, align 4
  %350 = lshr i8 %349, 5
  %351 = and i8 %350, 3
  %352 = zext i8 %351 to i64
  %353 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 %352
  %354 = load i32, i32* %353, align 4
  %355 = add nsw i32 %354, 1
  store i32 %355, i32* %353, align 4
  %356 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %297, i64 %280
  %357 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %356, i64 0, i32 0
  %358 = load i8, i8* %357, align 4
  %359 = lshr i8 %358, 5
  %360 = and i8 %359, 3
  %361 = zext i8 %360 to i64
  %362 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 %361
  %363 = load i32, i32* %362, align 4
  %364 = add nsw i32 %363, 1
  store i32 %364, i32* %362, align 4
  %365 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %297, i64 %282
  %366 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %365, i64 0, i32 0
  %367 = load i8, i8* %366, align 4
  %368 = lshr i8 %367, 5
  %369 = and i8 %368, 3
  %370 = zext i8 %369 to i64
  %371 = getelementptr inbounds [4 x i32], [4 x i32]* %2, i64 0, i64 %370
  %372 = load i32, i32* %371, align 4
  %373 = add nsw i32 %372, 1
  store i32 %373, i32* %371, align 4
  %374 = load i32, i32* %285, align 16
  %375 = icmp sgt i32 %374, 4
  br i1 %375, label %379, label %376

376:                                              ; preds = %293
  %377 = load i32, i32* %286, align 4
  %378 = icmp sgt i32 %377, 4
  br i1 %378, label %379, label %441

379:                                              ; preds = %444, %441, %376, %293
  %380 = phi i8 [ 0, %293 ], [ 1, %376 ], [ 2, %441 ], [ %447, %444 ]
  %381 = getelementptr inbounds i8, i8* %263, i64 %296
  store i8 %380, i8* %381, align 1
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %271) #3
  %382 = add nuw nsw i64 %294, 1
  %383 = icmp eq i64 %382, %284
  br i1 %383, label %384, label %293

384:                                              ; preds = %379, %289
  %385 = add nuw nsw i64 %290, 1
  %386 = icmp eq i64 %385, %283
  br i1 %386, label %387, label %289

387:                                              ; preds = %384
  %388 = add nsw i64 %284, -1
  %389 = and i64 %388, 1
  %390 = icmp eq i32 %269, 2
  %391 = sub nsw i64 %388, %389
  %392 = icmp eq i64 %389, 0
  br label %393

393:                                              ; preds = %387, %437
  %394 = phi i64 [ %438, %437 ], [ 1, %387 ]
  br i1 %270, label %395, label %437

395:                                              ; preds = %393
  %396 = mul nsw i64 %394, %280
  br i1 %390, label %424, label %397

397:                                              ; preds = %395, %397
  %398 = phi i64 [ %421, %397 ], [ 1, %395 ]
  %399 = phi i64 [ %422, %397 ], [ %391, %395 ]
  %400 = load %struct.VP8MBInfo*, %struct.VP8MBInfo** %272, align 8
  %401 = add nsw i64 %398, %396
  %402 = getelementptr inbounds i8, i8* %263, i64 %401
  %403 = load i8, i8* %402, align 1
  %404 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %400, i64 %401, i32 0
  %405 = load i8, i8* %404, align 4
  %406 = shl i8 %403, 5
  %407 = and i8 %406, 96
  %408 = and i8 %405, -97
  %409 = or i8 %408, %407
  store i8 %409, i8* %404, align 4
  %410 = add nuw nsw i64 %398, 1
  %411 = load %struct.VP8MBInfo*, %struct.VP8MBInfo** %272, align 8
  %412 = add nsw i64 %410, %396
  %413 = getelementptr inbounds i8, i8* %263, i64 %412
  %414 = load i8, i8* %413, align 1
  %415 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %411, i64 %412, i32 0
  %416 = load i8, i8* %415, align 4
  %417 = shl i8 %414, 5
  %418 = and i8 %417, 96
  %419 = and i8 %416, -97
  %420 = or i8 %419, %418
  store i8 %420, i8* %415, align 4
  %421 = add nuw nsw i64 %398, 2
  %422 = add i64 %399, -2
  %423 = icmp eq i64 %422, 0
  br i1 %423, label %424, label %397

424:                                              ; preds = %397, %395
  %425 = phi i64 [ 1, %395 ], [ %421, %397 ]
  br i1 %392, label %437, label %426

426:                                              ; preds = %424
  %427 = load %struct.VP8MBInfo*, %struct.VP8MBInfo** %272, align 8
  %428 = add nsw i64 %425, %396
  %429 = getelementptr inbounds i8, i8* %263, i64 %428
  %430 = load i8, i8* %429, align 1
  %431 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %427, i64 %428, i32 0
  %432 = load i8, i8* %431, align 4
  %433 = shl i8 %430, 5
  %434 = and i8 %433, 96
  %435 = and i8 %432, -97
  %436 = or i8 %435, %434
  store i8 %436, i8* %431, align 4
  br label %437

437:                                              ; preds = %426, %424, %393
  %438 = add nuw nsw i64 %394, 1
  %439 = icmp eq i64 %438, %283
  br i1 %439, label %440, label %393

440:                                              ; preds = %437, %265
  call void @WebPSafeFree(i8* nonnull %263) #3
  br label %448

441:                                              ; preds = %376
  %442 = load i32, i32* %287, align 8
  %443 = icmp sgt i32 %442, 4
  br i1 %443, label %379, label %444

444:                                              ; preds = %441
  %445 = load i32, i32* %288, align 4
  %446 = icmp sgt i32 %445, 4
  %447 = select i1 %446, i8 3, i8 %301
  br label %379

448:                                              ; preds = %440, %261, %255, %251
  %449 = load i32, i32* %64, align 8
  %450 = load i32, i32* %69, align 16
  %451 = icmp sgt i32 %449, 1
  br i1 %451, label %452, label %578

452:                                              ; preds = %448
  %453 = zext i32 %449 to i64
  %454 = add nsw i64 %453, -1
  %455 = icmp ult i64 %454, 8
  br i1 %455, label %562, label %456

456:                                              ; preds = %452
  %457 = and i64 %454, -8
  %458 = or i64 %457, 1
  %459 = insertelement <4 x i32> undef, i32 %450, i32 0
  %460 = shufflevector <4 x i32> %459, <4 x i32> undef, <4 x i32> zeroinitializer
  %461 = insertelement <4 x i32> undef, i32 %450, i32 0
  %462 = shufflevector <4 x i32> %461, <4 x i32> undef, <4 x i32> zeroinitializer
  %463 = add nsw i64 %457, -8
  %464 = lshr exact i64 %463, 3
  %465 = add nuw nsw i64 %464, 1
  %466 = and i64 %465, 1
  %467 = icmp eq i64 %463, 0
  br i1 %467, label %512, label %468

468:                                              ; preds = %456
  %469 = sub nuw nsw i64 %465, %466
  br label %470

470:                                              ; preds = %470, %468
  %471 = phi i64 [ 0, %468 ], [ %507, %470 ]
  %472 = phi <4 x i32> [ %460, %468 ], [ %505, %470 ]
  %473 = phi <4 x i32> [ %460, %468 ], [ %506, %470 ]
  %474 = phi <4 x i32> [ %462, %468 ], [ %501, %470 ]
  %475 = phi <4 x i32> [ %462, %468 ], [ %502, %470 ]
  %476 = phi i64 [ %469, %468 ], [ %508, %470 ]
  %477 = or i64 %471, 1
  %478 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %477
  %479 = bitcast i32* %478 to <4 x i32>*
  %480 = load <4 x i32>, <4 x i32>* %479, align 4
  %481 = getelementptr inbounds i32, i32* %478, i64 4
  %482 = bitcast i32* %481 to <4 x i32>*
  %483 = load <4 x i32>, <4 x i32>* %482, align 4
  %484 = icmp sgt <4 x i32> %474, %480
  %485 = icmp sgt <4 x i32> %475, %483
  %486 = select <4 x i1> %484, <4 x i32> %480, <4 x i32> %474
  %487 = select <4 x i1> %485, <4 x i32> %483, <4 x i32> %475
  %488 = icmp slt <4 x i32> %472, %480
  %489 = icmp slt <4 x i32> %473, %483
  %490 = select <4 x i1> %488, <4 x i32> %480, <4 x i32> %472
  %491 = select <4 x i1> %489, <4 x i32> %483, <4 x i32> %473
  %492 = or i64 %471, 9
  %493 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %492
  %494 = bitcast i32* %493 to <4 x i32>*
  %495 = load <4 x i32>, <4 x i32>* %494, align 4
  %496 = getelementptr inbounds i32, i32* %493, i64 4
  %497 = bitcast i32* %496 to <4 x i32>*
  %498 = load <4 x i32>, <4 x i32>* %497, align 4
  %499 = icmp sgt <4 x i32> %486, %495
  %500 = icmp sgt <4 x i32> %487, %498
  %501 = select <4 x i1> %499, <4 x i32> %495, <4 x i32> %486
  %502 = select <4 x i1> %500, <4 x i32> %498, <4 x i32> %487
  %503 = icmp slt <4 x i32> %490, %495
  %504 = icmp slt <4 x i32> %491, %498
  %505 = select <4 x i1> %503, <4 x i32> %495, <4 x i32> %490
  %506 = select <4 x i1> %504, <4 x i32> %498, <4 x i32> %491
  %507 = add i64 %471, 16
  %508 = add i64 %476, -2
  %509 = icmp eq i64 %508, 0
  br i1 %509, label %510, label %470, !llvm.loop !2

510:                                              ; preds = %470
  %511 = or i64 %507, 1
  br label %512

512:                                              ; preds = %510, %456
  %513 = phi <4 x i32> [ undef, %456 ], [ %501, %510 ]
  %514 = phi <4 x i32> [ undef, %456 ], [ %502, %510 ]
  %515 = phi <4 x i32> [ undef, %456 ], [ %505, %510 ]
  %516 = phi <4 x i32> [ undef, %456 ], [ %506, %510 ]
  %517 = phi i64 [ 1, %456 ], [ %511, %510 ]
  %518 = phi <4 x i32> [ %460, %456 ], [ %505, %510 ]
  %519 = phi <4 x i32> [ %460, %456 ], [ %506, %510 ]
  %520 = phi <4 x i32> [ %462, %456 ], [ %501, %510 ]
  %521 = phi <4 x i32> [ %462, %456 ], [ %502, %510 ]
  %522 = icmp eq i64 %466, 0
  br i1 %522, label %538, label %523

523:                                              ; preds = %512
  %524 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %517
  %525 = bitcast i32* %524 to <4 x i32>*
  %526 = load <4 x i32>, <4 x i32>* %525, align 4
  %527 = getelementptr inbounds i32, i32* %524, i64 4
  %528 = bitcast i32* %527 to <4 x i32>*
  %529 = load <4 x i32>, <4 x i32>* %528, align 4
  %530 = icmp slt <4 x i32> %519, %529
  %531 = select <4 x i1> %530, <4 x i32> %529, <4 x i32> %519
  %532 = icmp slt <4 x i32> %518, %526
  %533 = select <4 x i1> %532, <4 x i32> %526, <4 x i32> %518
  %534 = icmp sgt <4 x i32> %521, %529
  %535 = select <4 x i1> %534, <4 x i32> %529, <4 x i32> %521
  %536 = icmp sgt <4 x i32> %520, %526
  %537 = select <4 x i1> %536, <4 x i32> %526, <4 x i32> %520
  br label %538

538:                                              ; preds = %512, %523
  %539 = phi <4 x i32> [ %513, %512 ], [ %537, %523 ]
  %540 = phi <4 x i32> [ %514, %512 ], [ %535, %523 ]
  %541 = phi <4 x i32> [ %515, %512 ], [ %533, %523 ]
  %542 = phi <4 x i32> [ %516, %512 ], [ %531, %523 ]
  %543 = icmp slt <4 x i32> %539, %540
  %544 = select <4 x i1> %543, <4 x i32> %539, <4 x i32> %540
  %545 = shufflevector <4 x i32> %544, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %546 = icmp slt <4 x i32> %544, %545
  %547 = select <4 x i1> %546, <4 x i32> %544, <4 x i32> %545
  %548 = shufflevector <4 x i32> %547, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %549 = icmp slt <4 x i32> %547, %548
  %550 = select <4 x i1> %549, <4 x i32> %547, <4 x i32> %548
  %551 = extractelement <4 x i32> %550, i32 0
  %552 = icmp sgt <4 x i32> %541, %542
  %553 = select <4 x i1> %552, <4 x i32> %541, <4 x i32> %542
  %554 = shufflevector <4 x i32> %553, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %555 = icmp sgt <4 x i32> %553, %554
  %556 = select <4 x i1> %555, <4 x i32> %553, <4 x i32> %554
  %557 = shufflevector <4 x i32> %556, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %558 = icmp sgt <4 x i32> %556, %557
  %559 = select <4 x i1> %558, <4 x i32> %556, <4 x i32> %557
  %560 = extractelement <4 x i32> %559, i32 0
  %561 = icmp eq i64 %454, %457
  br i1 %561, label %578, label %562

562:                                              ; preds = %538, %452
  %563 = phi i64 [ 1, %452 ], [ %458, %538 ]
  %564 = phi i32 [ %450, %452 ], [ %560, %538 ]
  %565 = phi i32 [ %450, %452 ], [ %551, %538 ]
  br label %566

566:                                              ; preds = %562, %566
  %567 = phi i64 [ %576, %566 ], [ %563, %562 ]
  %568 = phi i32 [ %575, %566 ], [ %564, %562 ]
  %569 = phi i32 [ %573, %566 ], [ %565, %562 ]
  %570 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %567
  %571 = load i32, i32* %570, align 4
  %572 = icmp sgt i32 %569, %571
  %573 = select i1 %572, i32 %571, i32 %569
  %574 = icmp slt i32 %568, %571
  %575 = select i1 %574, i32 %571, i32 %568
  %576 = add nuw nsw i64 %567, 1
  %577 = icmp eq i64 %576, %453
  br i1 %577, label %578, label %566, !llvm.loop !4

578:                                              ; preds = %566, %538, %448
  %579 = phi i32 [ %450, %448 ], [ %560, %538 ], [ %575, %566 ]
  %580 = phi i32 [ %450, %448 ], [ %551, %538 ], [ %573, %566 ]
  %581 = icmp sgt i32 %449, 0
  br i1 %581, label %582, label %612

582:                                              ; preds = %578
  %583 = icmp eq i32 %579, %580
  %584 = add nsw i32 %580, 1
  %585 = select i1 %583, i32 %584, i32 %579
  %586 = sub nsw i32 %585, %580
  %587 = zext i32 %449 to i64
  br label %588

588:                                              ; preds = %609, %582
  %589 = phi i32 [ %450, %582 ], [ %611, %609 ]
  %590 = phi i64 [ 0, %582 ], [ %607, %609 ]
  %591 = sub nsw i32 %589, %219
  %592 = mul nsw i32 %591, 255
  %593 = sdiv i32 %592, %586
  %594 = sub nsw i32 %589, %580
  %595 = mul nsw i32 %594, 255
  %596 = sdiv i32 %595, %586
  %597 = icmp slt i32 %593, 127
  %598 = select i1 %597, i32 %593, i32 127
  %599 = icmp sgt i32 %598, -127
  %600 = select i1 %599, i32 %598, i32 -127
  %601 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 17, i64 %590, i32 3
  store i32 %600, i32* %601, align 8
  %602 = icmp slt i32 %596, 255
  %603 = select i1 %602, i32 %596, i32 255
  %604 = icmp sgt i32 %603, 0
  %605 = select i1 %604, i32 %603, i32 0
  %606 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 17, i64 %590, i32 4
  store i32 %605, i32* %606, align 4
  %607 = add nuw nsw i64 %590, 1
  %608 = icmp eq i64 %607, %587
  br i1 %608, label %612, label %609

609:                                              ; preds = %588
  %610 = getelementptr inbounds [4 x i32], [4 x i32]* %3, i64 0, i64 %607
  %611 = load i32, i32* %610, align 4
  br label %588

612:                                              ; preds = %588, %578
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %63) #3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %62) #3
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %70) #3
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %68) #3
  br label %613

613:                                              ; preds = %21, %612
  call void @llvm.lifetime.end.p0i8(i64 4936, i8* nonnull %28) #3
  br label %648

614:                                              ; preds = %17
  %615 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 5
  %616 = load i32, i32* %615, align 8
  %617 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 6
  %618 = load i32, i32* %617, align 4
  %619 = mul nsw i32 %618, %616
  %620 = icmp sgt i32 %619, 0
  br i1 %620, label %621, label %637

621:                                              ; preds = %614
  %622 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 39
  br label %623

623:                                              ; preds = %623, %621
  %624 = phi i64 [ 0, %621 ], [ %631, %623 ]
  %625 = load %struct.VP8MBInfo*, %struct.VP8MBInfo** %622, align 8
  %626 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %625, i64 %624, i32 0
  %627 = load i8, i8* %626, align 4
  %628 = and i8 %627, -128
  %629 = or i8 %628, 1
  store i8 %629, i8* %626, align 4
  %630 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %625, i64 %624, i32 1
  store i8 0, i8* %630, align 1
  %631 = add nuw nsw i64 %624, 1
  %632 = load i32, i32* %615, align 8
  %633 = load i32, i32* %617, align 4
  %634 = mul nsw i32 %633, %632
  %635 = sext i32 %634 to i64
  %636 = icmp slt i64 %631, %635
  br i1 %636, label %623, label %637

637:                                              ; preds = %623, %614
  %638 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 17, i64 0, i32 3
  store i32 0, i32* %638, align 8
  %639 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 17, i64 0, i32 4
  store i32 0, i32* %639, align 4
  %640 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 19
  store i32 0, i32* %640, align 4
  %641 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 20
  store i32 0, i32* %641, align 8
  %642 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 1
  %643 = load %struct.WebPPicture*, %struct.WebPPicture** %642, align 8
  %644 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %0, i64 0, i32 12
  %645 = load i32, i32* %644, align 8
  %646 = add nsw i32 %645, 20
  %647 = tail call i32 @WebPReportProgress(%struct.WebPPicture* %643, i32 %646, i32* %644) #3
  br label %648

648:                                              ; preds = %637, %613
  %649 = phi i32 [ %49, %613 ], [ 1, %637 ]
  ret i32 %649

650:                                              ; preds = %77
  %651 = or i64 %72, 2
  %652 = getelementptr inbounds %struct.SegmentJob, %struct.SegmentJob* %7, i64 0, i32 1, i64 %651
  %653 = load i32, i32* %652, align 8
  %654 = icmp eq i32 %653, 0
  br i1 %654, label %655, label %82

655:                                              ; preds = %650
  %656 = or i64 %72, 3
  %657 = getelementptr inbounds %struct.SegmentJob, %struct.SegmentJob* %7, i64 0, i32 1, i64 %656
  %658 = load i32, i32* %657, align 4
  %659 = icmp eq i32 %658, 0
  br i1 %659, label %660, label %82

660:                                              ; preds = %655
  %661 = add nuw nsw i64 %72, 4
  %662 = add nuw nsw i32 %73, 4
  %663 = icmp eq i64 %661, 256
  br i1 %663, label %85, label %71
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.WebPWorkerInterface* @WebPGetWorkerInterface() local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @DoSegmentsJob(i8* nocapture, i8*) #0 {
  %3 = alloca %struct.VP8Histogram, align 4
  %4 = alloca %struct.VP8Histogram, align 4
  %5 = alloca [16 x i32], align 16
  %6 = alloca [63 x i8], align 16
  %7 = bitcast i8* %1 to %struct.VP8EncIterator*
  %8 = tail call i32 @VP8IteratorIsDone(%struct.VP8EncIterator* %7) #3
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %251

10:                                               ; preds = %2
  %11 = getelementptr inbounds [63 x i8], [63 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 63, i8* nonnull %11) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 63, i1 false)
  %12 = ptrtoint [63 x i8]* %6 to i64
  %13 = add i64 %12, 31
  %14 = and i64 %13, -32
  %15 = inttoptr i64 %14 to i8*
  %16 = getelementptr inbounds i8, i8* %0, i64 48
  %17 = bitcast i8* %16 to i32*
  %18 = getelementptr inbounds i8, i8* %0, i64 1072
  %19 = bitcast i8* %18 to i32*
  %20 = getelementptr inbounds i8, i8* %0, i64 1076
  %21 = bitcast i8* %20 to i32*
  %22 = getelementptr inbounds i8, i8* %1, i64 40
  %23 = bitcast i8* %22 to %struct.VP8Encoder**
  %24 = bitcast %struct.VP8Histogram* %4 to i8*
  %25 = getelementptr inbounds %struct.VP8Histogram, %struct.VP8Histogram* %4, i64 0, i32 0
  %26 = getelementptr inbounds %struct.VP8Histogram, %struct.VP8Histogram* %4, i64 0, i32 1
  %27 = getelementptr inbounds i8, i8* %1, i64 8
  %28 = bitcast i8* %27 to i8**
  %29 = getelementptr inbounds i8, i8* %1, i64 32
  %30 = bitcast i8* %29 to i8**
  %31 = load i16, i16* getelementptr inbounds ([4 x i16], [4 x i16]* @VP8I16ModeOffsets, i64 0, i64 0), align 2
  %32 = zext i16 %31 to i64
  %33 = load i16, i16* getelementptr inbounds ([4 x i16], [4 x i16]* @VP8I16ModeOffsets, i64 0, i64 1), align 2
  %34 = zext i16 %33 to i64
  %35 = bitcast [16 x i32]* %5 to i8*
  %36 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 0
  %37 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 4
  %38 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 8
  %39 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 12
  %40 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 1
  %41 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 2
  %42 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 3
  %43 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 5
  %44 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 6
  %45 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 7
  %46 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 9
  %47 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 10
  %48 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 11
  %49 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 13
  %50 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 14
  %51 = getelementptr inbounds [16 x i32], [16 x i32]* %5, i64 0, i64 15
  %52 = bitcast %struct.VP8Histogram* %3 to i8*
  %53 = getelementptr inbounds %struct.VP8Histogram, %struct.VP8Histogram* %3, i64 0, i32 0
  %54 = getelementptr inbounds %struct.VP8Histogram, %struct.VP8Histogram* %3, i64 0, i32 1
  %55 = load i16, i16* getelementptr inbounds ([4 x i16], [4 x i16]* @VP8UVModeOffsets, i64 0, i64 0), align 2
  %56 = zext i16 %55 to i64
  %57 = load i16, i16* getelementptr inbounds ([4 x i16], [4 x i16]* @VP8UVModeOffsets, i64 0, i64 1), align 2
  %58 = zext i16 %57 to i64
  %59 = getelementptr inbounds i8, i8* %1, i64 48
  %60 = bitcast i8* %59 to %struct.VP8MBInfo**
  %61 = getelementptr inbounds i8, i8* %0, i64 4928
  %62 = bitcast i8* %61 to i32*
  br label %63

63:                                               ; preds = %247, %10
  call void @VP8IteratorImport(%struct.VP8EncIterator* %7, i8* %15) #3
  %64 = load %struct.VP8Encoder*, %struct.VP8Encoder** %23, align 8
  call void @VP8SetIntra16Mode(%struct.VP8EncIterator* %7, i32 0) #3
  call void @VP8SetSkip(%struct.VP8EncIterator* %7, i32 0) #3
  call void @VP8SetSegment(%struct.VP8EncIterator* %7, i32 0) #3
  %65 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %64, i64 0, i32 32
  %66 = load i32, i32* %65, align 8
  %67 = icmp slt i32 %66, 2
  br i1 %67, label %68, label %157

68:                                               ; preds = %63
  %69 = load %struct.VP8Encoder*, %struct.VP8Encoder** %23, align 8
  %70 = getelementptr inbounds %struct.VP8Encoder, %struct.VP8Encoder* %69, i64 0, i32 0
  %71 = load %struct.WebPConfig*, %struct.WebPConfig** %70, align 8
  %72 = getelementptr inbounds %struct.WebPConfig, %struct.WebPConfig* %71, i64 0, i32 1
  %73 = load float, float* %72, align 4
  %74 = fptosi float %73 to i32
  %75 = mul nsw i32 %74, 9
  %76 = sdiv i32 %75, 100
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %35) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %35, i8 -86, i64 64, i1 false) #3
  %77 = load void (i8*, i32*)*, void (i8*, i32*)** @VP8Mean16x4, align 8
  %78 = load i8*, i8** %28, align 8
  call void %77(i8* %78, i32* nonnull %36) #3
  %79 = load void (i8*, i32*)*, void (i8*, i32*)** @VP8Mean16x4, align 8
  %80 = load i8*, i8** %28, align 8
  %81 = getelementptr inbounds i8, i8* %80, i64 128
  call void %79(i8* %81, i32* %37) #3
  %82 = load void (i8*, i32*)*, void (i8*, i32*)** @VP8Mean16x4, align 8
  %83 = load i8*, i8** %28, align 8
  %84 = getelementptr inbounds i8, i8* %83, i64 256
  call void %82(i8* %84, i32* %38) #3
  %85 = load void (i8*, i32*)*, void (i8*, i32*)** @VP8Mean16x4, align 8
  %86 = load i8*, i8** %28, align 8
  %87 = getelementptr inbounds i8, i8* %86, i64 384
  call void %85(i8* %87, i32* %39) #3
  %88 = add nsw i32 %76, 8
  %89 = load i32, i32* %36, align 16
  %90 = mul i32 %89, %89
  %91 = load i32, i32* %40, align 4
  %92 = add i32 %91, %89
  %93 = mul i32 %91, %91
  %94 = add i32 %93, %90
  %95 = load i32, i32* %41, align 8
  %96 = add i32 %92, %95
  %97 = mul i32 %95, %95
  %98 = add i32 %94, %97
  %99 = load i32, i32* %42, align 4
  %100 = add i32 %96, %99
  %101 = mul i32 %99, %99
  %102 = add i32 %98, %101
  %103 = load i32, i32* %37, align 16
  %104 = add i32 %100, %103
  %105 = mul i32 %103, %103
  %106 = add i32 %102, %105
  %107 = load i32, i32* %43, align 4
  %108 = add i32 %104, %107
  %109 = mul i32 %107, %107
  %110 = add i32 %106, %109
  %111 = load i32, i32* %44, align 8
  %112 = add i32 %108, %111
  %113 = mul i32 %111, %111
  %114 = add i32 %110, %113
  %115 = load i32, i32* %45, align 4
  %116 = add i32 %112, %115
  %117 = mul i32 %115, %115
  %118 = add i32 %114, %117
  %119 = load i32, i32* %38, align 16
  %120 = add i32 %116, %119
  %121 = mul i32 %119, %119
  %122 = add i32 %118, %121
  %123 = load i32, i32* %46, align 4
  %124 = add i32 %120, %123
  %125 = mul i32 %123, %123
  %126 = add i32 %122, %125
  %127 = load i32, i32* %47, align 8
  %128 = add i32 %124, %127
  %129 = mul i32 %127, %127
  %130 = add i32 %126, %129
  %131 = load i32, i32* %48, align 4
  %132 = add i32 %128, %131
  %133 = mul i32 %131, %131
  %134 = add i32 %130, %133
  %135 = load i32, i32* %39, align 16
  %136 = add i32 %132, %135
  %137 = mul i32 %135, %135
  %138 = add i32 %134, %137
  %139 = load i32, i32* %49, align 4
  %140 = add i32 %136, %139
  %141 = mul i32 %139, %139
  %142 = add i32 %138, %141
  %143 = load i32, i32* %50, align 8
  %144 = add i32 %140, %143
  %145 = mul i32 %143, %143
  %146 = add i32 %142, %145
  %147 = load i32, i32* %51, align 4
  %148 = add i32 %144, %147
  %149 = mul i32 %147, %147
  %150 = add i32 %146, %149
  %151 = mul i32 %150, %88
  %152 = mul i32 %148, %148
  %153 = icmp ult i32 %151, %152
  br i1 %153, label %154, label %155

154:                                              ; preds = %68
  call void @VP8SetIntra16Mode(%struct.VP8EncIterator* %7, i32 0) #3
  br label %156

155:                                              ; preds = %68
  call void @VP8SetIntra4Mode(%struct.VP8EncIterator* %7, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @FastMBAnalyze.modes, i64 0, i64 0)) #3
  br label %156

156:                                              ; preds = %155, %154
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %35) #3
  br label %190

157:                                              ; preds = %63
  call void @VP8MakeLuma16Preds(%struct.VP8EncIterator* %7) #3
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #3
  store i32 0, i32* %25, align 4
  store i32 1, i32* %26, align 4
  %158 = load void (i8*, i8*, i32, i32, %struct.VP8Histogram*)*, void (i8*, i8*, i32, i32, %struct.VP8Histogram*)** @VP8CollectHistogram, align 8
  %159 = load i8*, i8** %28, align 8
  %160 = load i8*, i8** %30, align 8
  %161 = getelementptr inbounds i8, i8* %160, i64 %32
  call void %158(i8* %159, i8* %161, i32 0, i32 16, %struct.VP8Histogram* nonnull %4) #3
  %162 = load i32, i32* %25, align 4
  %163 = icmp sgt i32 %162, 1
  br i1 %163, label %164, label %169

164:                                              ; preds = %157
  %165 = load i32, i32* %26, align 4
  %166 = mul nsw i32 %165, 510
  %167 = sdiv i32 %166, %162
  %168 = icmp sgt i32 %167, -1
  br i1 %168, label %169, label %171

169:                                              ; preds = %164, %157
  %170 = phi i32 [ %167, %164 ], [ 0, %157 ]
  br label %171

171:                                              ; preds = %169, %164
  %172 = phi i32 [ %170, %169 ], [ -1, %164 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #3
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #3
  store i32 0, i32* %25, align 4
  store i32 1, i32* %26, align 4
  %173 = load void (i8*, i8*, i32, i32, %struct.VP8Histogram*)*, void (i8*, i8*, i32, i32, %struct.VP8Histogram*)** @VP8CollectHistogram, align 8
  %174 = load i8*, i8** %28, align 8
  %175 = load i8*, i8** %30, align 8
  %176 = getelementptr inbounds i8, i8* %175, i64 %34
  call void %173(i8* %174, i8* %176, i32 0, i32 16, %struct.VP8Histogram* nonnull %4) #3
  %177 = load i32, i32* %25, align 4
  %178 = icmp sgt i32 %177, 1
  br i1 %178, label %179, label %183

179:                                              ; preds = %171
  %180 = load i32, i32* %26, align 4
  %181 = mul nsw i32 %180, 510
  %182 = sdiv i32 %181, %177
  br label %183

183:                                              ; preds = %179, %171
  %184 = phi i32 [ %182, %179 ], [ 0, %171 ]
  %185 = icmp sgt i32 %184, %172
  %186 = select i1 %185, i32 %184, i32 %172
  %187 = zext i1 %185 to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #3
  call void @VP8SetIntra16Mode(%struct.VP8EncIterator* %7, i32 %187) #3
  %188 = mul i32 %186, 3
  %189 = add i32 %188, 2
  br label %190

190:                                              ; preds = %183, %156
  %191 = phi i32 [ 2, %156 ], [ %189, %183 ]
  call void @VP8MakeChroma8Preds(%struct.VP8EncIterator* %7) #3
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #3
  store i32 0, i32* %53, align 4
  store i32 1, i32* %54, align 4
  %192 = load void (i8*, i8*, i32, i32, %struct.VP8Histogram*)*, void (i8*, i8*, i32, i32, %struct.VP8Histogram*)** @VP8CollectHistogram, align 8
  %193 = load i8*, i8** %28, align 8
  %194 = getelementptr inbounds i8, i8* %193, i64 16
  %195 = load i8*, i8** %30, align 8
  %196 = getelementptr inbounds i8, i8* %195, i64 %56
  call void %192(i8* %194, i8* %196, i32 16, i32 24, %struct.VP8Histogram* nonnull %3) #3
  %197 = load i32, i32* %53, align 4
  %198 = icmp sgt i32 %197, 1
  br i1 %198, label %199, label %204

199:                                              ; preds = %190
  %200 = load i32, i32* %54, align 4
  %201 = mul nsw i32 %200, 510
  %202 = sdiv i32 %201, %197
  %203 = icmp sgt i32 %202, -1
  br i1 %203, label %204, label %206

204:                                              ; preds = %199, %190
  %205 = phi i32 [ %202, %199 ], [ 0, %190 ]
  br label %206

206:                                              ; preds = %204, %199
  %207 = phi i32 [ %205, %204 ], [ %202, %199 ]
  %208 = phi i32 [ %205, %204 ], [ -1, %199 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #3
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #3
  store i32 0, i32* %53, align 4
  store i32 1, i32* %54, align 4
  %209 = load void (i8*, i8*, i32, i32, %struct.VP8Histogram*)*, void (i8*, i8*, i32, i32, %struct.VP8Histogram*)** @VP8CollectHistogram, align 8
  %210 = load i8*, i8** %28, align 8
  %211 = getelementptr inbounds i8, i8* %210, i64 16
  %212 = load i8*, i8** %30, align 8
  %213 = getelementptr inbounds i8, i8* %212, i64 %58
  call void %209(i8* %211, i8* %213, i32 16, i32 24, %struct.VP8Histogram* nonnull %3) #3
  %214 = load i32, i32* %53, align 4
  %215 = icmp sgt i32 %214, 1
  br i1 %215, label %216, label %220

216:                                              ; preds = %206
  %217 = load i32, i32* %54, align 4
  %218 = mul nsw i32 %217, 510
  %219 = sdiv i32 %218, %214
  br label %220

220:                                              ; preds = %206, %216
  %221 = phi i32 [ %219, %216 ], [ 0, %206 ]
  %222 = icmp sgt i32 %221, %208
  %223 = select i1 %222, i32 %221, i32 %208
  %224 = icmp slt i32 %221, %207
  %225 = zext i1 %224 to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #3
  call void @VP8SetIntraUVMode(%struct.VP8EncIterator* %7, i32 %225) #3
  %226 = add i32 %223, %191
  %227 = ashr i32 %226, 2
  %228 = sub nsw i32 255, %227
  %229 = icmp slt i32 %228, 255
  %230 = select i1 %229, i32 %228, i32 255
  %231 = icmp sgt i32 %230, 0
  %232 = select i1 %231, i32 %230, i32 0
  %233 = zext i32 %232 to i64
  %234 = getelementptr inbounds i32, i32* %17, i64 %233
  %235 = load i32, i32* %234, align 4
  %236 = add nsw i32 %235, 1
  store i32 %236, i32* %234, align 4
  %237 = trunc i32 %232 to i8
  %238 = load %struct.VP8MBInfo*, %struct.VP8MBInfo** %60, align 8
  %239 = getelementptr inbounds %struct.VP8MBInfo, %struct.VP8MBInfo* %238, i64 0, i32 1
  store i8 %237, i8* %239, align 1
  %240 = load i32, i32* %19, align 4
  %241 = add nsw i32 %232, %240
  store i32 %241, i32* %19, align 4
  %242 = load i32, i32* %21, align 4
  %243 = add nsw i32 %242, %223
  store i32 %243, i32* %21, align 4
  %244 = load i32, i32* %62, align 8
  %245 = call i32 @VP8IteratorProgress(%struct.VP8EncIterator* %7, i32 %244) #3
  %246 = icmp eq i32 %245, 0
  br i1 %246, label %250, label %247

247:                                              ; preds = %220
  %248 = call i32 @VP8IteratorNext(%struct.VP8EncIterator* %7) #3
  %249 = icmp eq i32 %248, 0
  br i1 %249, label %250, label %63

250:                                              ; preds = %247, %220
  call void @llvm.lifetime.end.p0i8(i64 63, i8* nonnull %11) #3
  br label %251

251:                                              ; preds = %2, %250
  %252 = phi i32 [ 1, %2 ], [ %245, %250 ]
  ret i32 %252
}

declare void @VP8IteratorInit(%struct.VP8Encoder*, %struct.VP8EncIterator*) local_unnamed_addr #2

declare void @VP8IteratorSetRow(%struct.VP8EncIterator*, i32) local_unnamed_addr #2

declare void @VP8IteratorSetCountDown(%struct.VP8EncIterator*, i32) local_unnamed_addr #2

declare i32 @VP8IteratorIsDone(%struct.VP8EncIterator*) local_unnamed_addr #2

declare void @VP8IteratorImport(%struct.VP8EncIterator*, i8*) local_unnamed_addr #2

declare i32 @VP8IteratorProgress(%struct.VP8EncIterator*, i32) local_unnamed_addr #2

declare i32 @VP8IteratorNext(%struct.VP8EncIterator*) local_unnamed_addr #2

declare void @VP8SetIntra16Mode(%struct.VP8EncIterator*, i32) local_unnamed_addr #2

declare void @VP8SetSkip(%struct.VP8EncIterator*, i32) local_unnamed_addr #2

declare void @VP8SetSegment(%struct.VP8EncIterator*, i32) local_unnamed_addr #2

declare void @VP8SetIntra4Mode(%struct.VP8EncIterator*, i8*) local_unnamed_addr #2

declare void @VP8MakeLuma16Preds(%struct.VP8EncIterator*) local_unnamed_addr #2

declare void @VP8MakeChroma8Preds(%struct.VP8EncIterator*) local_unnamed_addr #2

declare void @VP8SetIntraUVMode(%struct.VP8EncIterator*, i32) local_unnamed_addr #2

declare i8* @WebPSafeMalloc(i64, i64) local_unnamed_addr #2

declare void @WebPSafeFree(i8*) local_unnamed_addr #2

declare i32 @WebPReportProgress(%struct.WebPPicture*, i32, i32*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
