; ModuleID = '../../third_party/boringssl/src/ssl/d1_srtp.cc'
source_filename = "../../third_party/boringssl/src/ssl/d1_srtp.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.srtp_protection_profile_st = type { i8*, i64 }
%struct.ssl_ctx_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"struct.bssl::SSL_X509_METHOD"*, %union.crypto_mutex_st, i16, i16, [4 x i8], %struct.ssl_quic_method_st*, %"class.std::__1::unique_ptr.0", %struct.x509_store_st*, %struct.lhash_st_SSL_SESSION*, i64, %struct.ssl_session_st*, %struct.ssl_session_st*, i32, i32, i32, i32, i32 (%struct.ssl_st*, %struct.ssl_session_st*)*, void (%struct.ssl_ctx_st*, %struct.ssl_session_st*)*, %struct.ssl_session_st* (%struct.ssl_st*, i8*, i32, i32*)*, i32, [4 x i8], i32 (%struct.x509_store_ctx_st*, i8*)*, i8*, i32 (%struct.ssl_st*, i8*)*, i32 (i8*, i32, i32, i8*)*, i8*, i32 (%struct.ssl_st*, %struct.x509_st**, %struct.evp_pkey_st**)*, void (%struct.ssl_st*, %struct.evp_pkey_st**)*, %struct.crypto_ex_data_st, void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.17", %struct.stack_st_X509_NAME*, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.9", void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], i32 (i32, %struct.x509_store_ctx_st*)*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.ssl_early_callback_ctx*)*, i32 (%struct.ssl_early_callback_ctx*)*, i8, i8, i16, [4 x i8], i32 (%struct.ssl_st*, i32*, i8*)*, i8*, %"class.std::__1::unique_ptr.111", %"class.std::__1::unique_ptr.111", i32 (%struct.ssl_st*, i8*, i8*, %struct.evp_cipher_ctx_st*, %struct.hmac_ctx_st*, i32)*, %"class.std::__1::unique_ptr.23", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*, i8**, i32*, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, i32 (%struct.ssl_st*, i8**, i8*, i8*, i32, i8*)*, i8*, %"class.bssl::Array", %"class.std::__1::unique_ptr.77", %"class.bssl::GrowableArray.116", %"class.bssl::Array.49", %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.56", void (%struct.ssl_st*, i8*)*, void (%struct.ssl_st*, %struct.timeval*)*, %struct.crypto_buffer_pool_st*, %struct.ssl_ticket_aead_method_st*, i32 (%struct.ssl_st*, i8*)*, i8*, %"class.bssl::Array.49", i16, [6 x i8] }>
%"struct.bssl::SSL_PROTOCOL_METHOD" = type { i8, i1 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %"struct.bssl::SSLMessage"*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, %"class.bssl::Span"*, i64*, i8*, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, i32 (%struct.ssl_st*)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %struct.cbb_st*, i8)*, i1 (%struct.ssl_st*, %struct.cbb_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*, %"class.bssl::Array"*)*, i1 (%struct.ssl_st*)*, i32 (%struct.ssl_st*)*, void (%struct.ssl_st*)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)*, i1 (%struct.ssl_st*, i32, %"class.bssl::SSLAEADContext"*, i8*, i64)* }
%struct.ssl_st = type <{ %"struct.bssl::SSL_PROTOCOL_METHOD"*, %"class.std::__1::unique_ptr", i16, i16, [4 x i8], %"class.std::__1::unique_ptr.84", %"class.std::__1::unique_ptr.84", i32 (%"struct.bssl::SSL_HANDSHAKE"*)*, %"struct.bssl::SSL3_STATE"*, %"struct.bssl::DTLS1_STATE"*, void (i32, i32, i32, i8*, i64, %struct.ssl_st*, i8*)*, i8*, i32, [4 x i8], %"class.std::__1::unique_ptr.51", void (%struct.ssl_st*, i32, i32)*, %"class.std::__1::unique_ptr.105", %"class.std::__1::unique_ptr.105", %struct.crypto_ex_data_st, i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.23", %struct.ssl_quic_method_st*, i32, i8, [3 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.bssl::SSL_CONFIG"* }
%"struct.bssl::SSL_CONFIG" = type <{ %struct.ssl_st*, i16, i16, [4 x i8], %struct.X509_VERIFY_PARAM_st*, %"class.std::__1::unique_ptr.0", %"class.std::__1::unique_ptr.9", i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.ssl_st*, i8*)*, %"class.std::__1::unique_ptr.23", i32 (%struct.ssl_st*, i8*, i8*, i32, i8*, i32)*, i32 (%struct.ssl_st*, i8*, i8*, i32)*, %"class.std::__1::unique_ptr.17", %struct.stack_st_X509_NAME*, %"class.bssl::Array.49", %"class.std::__1::unique_ptr.12", %"class.bssl::Array", %"class.bssl::GrowableArray.75", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.49", %"class.std::__1::unique_ptr.77", i8, i16, [5 x i8] }>
%"class.bssl::GrowableArray.75" = type { i64, %"class.bssl::Array.76" }
%"class.bssl::Array.76" = type { %"struct.bssl::ALPSConfig"*, i64 }
%"struct.bssl::ALPSConfig" = type { %"class.bssl::Array", %"class.bssl::Array" }
%"class.std::__1::unique_ptr.84" = type { %"class.std::__1::__compressed_pair.85" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %struct.bio_st* }
%struct.bio_st = type { %struct.bio_method_st*, i32, i32, i32, i32, i32, i32, i8*, %struct.bio_st*, i64, i64 }
%struct.bio_method_st = type { i32, i8*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*, i32)*, i32 (%struct.bio_st*, i8*)*, i32 (%struct.bio_st*, i8*, i32)*, i64 (%struct.bio_st*, i32, i64, i8*)*, i32 (%struct.bio_st*)*, i32 (%struct.bio_st*)*, i64 (%struct.bio_st*, i32, i64 (%struct.bio_st*, i32, i8*, i32, i64, i64)*)* }
%"struct.bssl::SSL_HANDSHAKE" = type <{ %struct.ssl_st*, %"struct.bssl::SSL_CONFIG"*, i32, i32, i32, i16, i16, i64, [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], [48 x i8], %union.anon.33, i16, [2 x i8], %"class.std::__1::unique_ptr.34", [2 x %"class.std::__1::unique_ptr.39"], %"class.bssl::SSLTranscript", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array.49", %"class.bssl::Array.49", %"class.bssl::Array.49", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::internal::StackAllocated.50", %"class.bssl::Array", %"class.std::__1::unique_ptr.23", %"class.std::__1::unique_ptr.17", %struct.stack_st_X509_NAME*, %"class.bssl::Array", %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.51", %"class.std::__1::unique_ptr.51", %"class.std::__1::unique_ptr.56", %struct.ssl_cipher_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.63", i32, i16, i16, i16, i8, [32 x i8], i8, [6 x i8], [6 x i8] }>
%union.anon.33 = type { i32 }
%"class.std::__1::unique_ptr.34" = type { %"class.std::__1::__compressed_pair.35" }
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %struct.err_save_state_st* }
%struct.err_save_state_st = type opaque
%"class.std::__1::unique_ptr.39" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"class.bssl::SSLKeyShare"* }
%"class.bssl::SSLKeyShare" = type { i32 (...)** }
%"class.bssl::SSLTranscript" = type { %"class.std::__1::unique_ptr.44", %"class.bssl::internal::StackAllocated" }
%"class.std::__1::unique_ptr.44" = type { %"class.std::__1::__compressed_pair.45" }
%"class.std::__1::__compressed_pair.45" = type { %"struct.std::__1::__compressed_pair_elem.46" }
%"struct.std::__1::__compressed_pair_elem.46" = type { %struct.buf_mem_st* }
%struct.buf_mem_st = type { i64, i8*, i64 }
%"class.bssl::internal::StackAllocated" = type { %struct.env_md_ctx_st }
%struct.env_md_ctx_st = type { %struct.env_md_st*, i8*, %struct.evp_pkey_ctx_st*, %struct.evp_md_pctx_ops* }
%struct.env_md_st = type opaque
%struct.evp_pkey_ctx_st = type opaque
%struct.evp_md_pctx_ops = type opaque
%"class.bssl::internal::StackAllocated.50" = type { %struct.evp_hpke_ctx_st }
%struct.evp_hpke_ctx_st = type { %struct.evp_hpke_aead_st*, %struct.evp_hpke_kdf_st*, %struct.evp_aead_ctx_st, [24 x i8], [64 x i8], i64, i32 }
%struct.evp_hpke_aead_st = type opaque
%struct.evp_hpke_kdf_st = type opaque
%struct.evp_aead_ctx_st = type { %struct.evp_aead_st*, %union.evp_aead_ctx_st_state, i8 }
%struct.evp_aead_st = type opaque
%union.evp_aead_ctx_st_state = type { i64, [576 x i8] }
%struct.ssl_cipher_st = type { i8*, i8*, i32, i32, i32, i32, i32, i32 }
%"class.std::__1::unique_ptr.63" = type { %"class.std::__1::__compressed_pair.64" }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"struct.bssl::SSL_HANDSHAKE_HINTS"* }
%"struct.bssl::SSL_HANDSHAKE_HINTS" = type <{ %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", i16, [6 x i8], %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, [7 x i8] }>
%"struct.bssl::SSL3_STATE" = type <{ [8 x i8], [8 x i8], [32 x i8], [32 x i8], %"class.bssl::SSLBuffer", %"class.bssl::SSLBuffer", %"class.bssl::Span", i32, i32, i32, i32, i8*, i32, i32, %"class.std::__1::unique_ptr.34", i32, i32, i32, i32, i16, i8, i8, i8, i16, i8, %"class.std::__1::unique_ptr.44", %"class.std::__1::unique_ptr.44", %"class.std::__1::unique_ptr.44", i32, i32, i32, [4 x i8], %"class.std::__1::unique_ptr.89", %"class.std::__1::unique_ptr.89", %"class.std::__1::unique_ptr.95", [48 x i8], [48 x i8], [48 x i8], i8, i8, i8, [12 x i8], i8, i8, [12 x i8], [2 x i8], i8, %"class.std::__1::unique_ptr.51", %"class.bssl::Array", %"class.bssl::Array", %"class.std::__1::unique_ptr.23", [64 x i8], %"class.bssl::Array", %struct.srtp_protection_profile_st* }>
%"class.bssl::SSLBuffer" = type <{ i8*, i16, i16, i16, [5 x i8], i8, [4 x i8] }>
%"class.bssl::Span" = type { i8*, i64 }
%"class.std::__1::unique_ptr.89" = type { %"class.std::__1::__compressed_pair.90" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.91" }
%"struct.std::__1::__compressed_pair_elem.91" = type { %"class.bssl::SSLAEADContext"* }
%"class.bssl::SSLAEADContext" = type <{ %struct.ssl_cipher_st*, %"class.bssl::internal::StackAllocated.92", [12 x i8], i8, i8, i16, i8, i8, [6 x i8] }>
%"class.bssl::internal::StackAllocated.92" = type { %struct.evp_aead_ctx_st }
%"class.std::__1::unique_ptr.95" = type { %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { %"struct.bssl::SSL_HANDSHAKE"* }
%"struct.bssl::DTLS1_STATE" = type <{ i8, [256 x i8], [7 x i8], i64, i16, i16, [4 x i8], %"struct.bssl::DTLS1_BITMAP", i16, i16, [8 x i8], [4 x i8], %"class.std::__1::unique_ptr.89", [7 x %"class.std::__1::unique_ptr.100"], [7 x %"struct.bssl::DTLS_OUTGOING_MESSAGE"], i8, i8, [2 x i8], i32, i32, i32, %"struct.bssl::OPENSSL_timeval", i32, [4 x i8] }>
%"struct.bssl::DTLS1_BITMAP" = type { i64, i64 }
%"class.std::__1::unique_ptr.100" = type { %"class.std::__1::__compressed_pair.101" }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"struct.bssl::hm_fragment"* }
%"struct.bssl::hm_fragment" = type { i8, i16, i32, i8*, i8* }
%"struct.bssl::DTLS_OUTGOING_MESSAGE" = type <{ i8*, i32, i16, i8, i8 }>
%"struct.bssl::OPENSSL_timeval" = type { i64, i32 }
%"class.std::__1::unique_ptr.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %struct.ssl_session_st* }
%"class.std::__1::unique_ptr.105" = type { %"class.std::__1::__compressed_pair.106" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.107" }
%"struct.std::__1::__compressed_pair_elem.107" = type { %struct.ssl_ctx_st* }
%"struct.bssl::SSLMessage" = type { i8, i8, %struct.cbs_st, %struct.cbs_st }
%struct.cbs_st = type { i8*, i64 }
%struct.cbb_st = type { %struct.cbb_buffer_st*, %struct.cbb_st*, i64, i8, i8, i8 }
%struct.cbb_buffer_st = type { i8*, i64, i64, i8, i8 }
%"struct.bssl::SSL_X509_METHOD" = type { i1 (%struct.stack_st_CRYPTO_BUFFER*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*, %"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, void (%"struct.bssl::CERT"*)*, i1 (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %struct.ssl_session_st*)*, void (%struct.ssl_session_st*)*, i1 (%struct.ssl_session_st*, %"struct.bssl::SSL_HANDSHAKE"*, i8*)*, void (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, void (%"struct.bssl::SSL_CONFIG"*)*, i1 (%"struct.bssl::SSL_HANDSHAKE"*)*, i1 (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)*, void (%struct.ssl_ctx_st*)* }
%struct.stack_st_CRYPTO_BUFFER = type opaque
%"struct.bssl::CERT" = type { %"class.std::__1::unique_ptr.12", %"class.std::__1::unique_ptr.17", %struct.stack_st_X509*, %struct.x509_st*, %struct.x509_st*, %struct.ssl_private_key_method_st*, %"struct.bssl::SSL_X509_METHOD"*, %"class.bssl::Array.49", i32 (%struct.ssl_st*, i8*)*, i8*, %struct.x509_store_st*, %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", i8, [32 x i8], %"class.std::__1::unique_ptr.68", %"class.std::__1::unique_ptr.12", %struct.ssl_private_key_method_st* }
%struct.stack_st_X509 = type opaque
%struct.x509_st = type { %struct.x509_cinf_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, %struct.crypto_ex_data_st, i64, i64, i64, i64, i64, i64, %struct.asn1_string_st*, %struct.AUTHORITY_KEYID_st*, %struct.X509_POLICY_CACHE_st*, %struct.stack_st_DIST_POINT*, %struct.stack_st_GENERAL_NAME*, %struct.NAME_CONSTRAINTS_st*, [20 x i8], %struct.x509_cert_aux_st*, %struct.crypto_buffer_st*, %union.crypto_mutex_st }
%struct.x509_cinf_st = type { %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.X509_val_st*, %struct.X509_name_st*, %struct.X509_pubkey_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.X509_val_st = type opaque
%struct.X509_name_st = type { %struct.stack_st_X509_NAME_ENTRY*, i32, %struct.buf_mem_st*, i8*, i32 }
%struct.stack_st_X509_NAME_ENTRY = type opaque
%struct.X509_pubkey_st = type opaque
%struct.stack_st_X509_EXTENSION = type opaque
%struct.ASN1_ENCODING_st = type { i8*, i64, i32, i8 }
%struct.X509_algor_st = type { %struct.asn1_object_st*, %struct.asn1_type_st* }
%struct.asn1_object_st = type { i8*, i8*, i32, i32, i8*, i32 }
%struct.asn1_type_st = type { i32, %union.anon.22 }
%union.anon.22 = type { i8* }
%struct.asn1_string_st = type { i32, i32, i8*, i64 }
%struct.AUTHORITY_KEYID_st = type opaque
%struct.X509_POLICY_CACHE_st = type opaque
%struct.stack_st_DIST_POINT = type opaque
%struct.stack_st_GENERAL_NAME = type opaque
%struct.NAME_CONSTRAINTS_st = type opaque
%struct.x509_cert_aux_st = type opaque
%struct.crypto_buffer_st = type opaque
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %struct.crypto_buffer_st* }
%"class.std::__1::unique_ptr.68" = type { %"class.std::__1::__compressed_pair.69" }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"struct.bssl::DC"* }
%"struct.bssl::DC" = type { %"class.std::__1::unique_ptr.28", i16, %"class.std::__1::unique_ptr.12" }
%struct.ssl_private_key_method_st = type { i32 (%struct.ssl_st*, i8*, i64*, i64, i16, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64)* }
%union.crypto_mutex_st = type { double, [48 x i8] }
%struct.ssl_quic_method_st = type { i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, %struct.ssl_cipher_st*, i8*, i64)*, i32 (%struct.ssl_st*, i32, i8*, i64)*, i32 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i32, i8)* }
%"class.std::__1::unique_ptr.0" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.bssl::SSLCipherPreferenceList"* }
%"struct.bssl::SSLCipherPreferenceList" = type { %"class.std::__1::unique_ptr.3", i8* }
%"class.std::__1::unique_ptr.3" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %struct.stack_st_SSL_CIPHER* }
%struct.stack_st_SSL_CIPHER = type opaque
%struct.x509_store_st = type { i32, %struct.stack_st_X509_OBJECT*, %union.crypto_mutex_st, %struct.stack_st_X509*, %struct.stack_st_X509_LOOKUP*, %struct.X509_VERIFY_PARAM_st*, i32 (%struct.x509_store_ctx_st*)*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, i32 (%struct.x509_store_ctx_st*)*, i32 }
%struct.stack_st_X509_OBJECT = type opaque
%struct.stack_st_X509_LOOKUP = type opaque
%struct.x509_store_ctx_st = type { %struct.x509_store_st*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509_CRL*, %struct.X509_VERIFY_PARAM_st*, i8*, {}*, i32 (i32, %struct.x509_store_ctx_st*)*, i32 (%struct.x509_st**, %struct.x509_store_ctx_st*, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.x509_st*, %struct.x509_st*)*, {}*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st**, %struct.x509_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*)*, i32 (%struct.x509_store_ctx_st*, %struct.X509_crl_st*, %struct.x509_st*)*, {}*, %struct.stack_st_X509* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, %struct.stack_st_X509_CRL* (%struct.x509_store_ctx_st*, %struct.X509_name_st*)*, {}*, i32, i32, %struct.stack_st_X509*, %struct.X509_POLICY_TREE_st*, i32, i32, i32, %struct.x509_st*, %struct.x509_st*, %struct.X509_crl_st*, i32, i32, %struct.x509_store_ctx_st*, %struct.crypto_ex_data_st }
%struct.stack_st_X509_CRL = type opaque
%struct.X509_POLICY_TREE_st = type opaque
%struct.X509_crl_st = type { %struct.X509_crl_info_st*, %struct.X509_algor_st*, %struct.asn1_string_st*, i32, i32, %struct.AUTHORITY_KEYID_st*, %struct.ISSUING_DIST_POINT_st*, i32, i32, %struct.asn1_string_st*, %struct.asn1_string_st*, [20 x i8], %struct.stack_st_GENERAL_NAMES*, %struct.x509_crl_method_st*, i8* }
%struct.X509_crl_info_st = type { %struct.asn1_string_st*, %struct.X509_algor_st*, %struct.X509_name_st*, %struct.asn1_string_st*, %struct.asn1_string_st*, %struct.stack_st_X509_REVOKED*, %struct.stack_st_X509_EXTENSION*, %struct.ASN1_ENCODING_st }
%struct.stack_st_X509_REVOKED = type opaque
%struct.ISSUING_DIST_POINT_st = type opaque
%struct.stack_st_GENERAL_NAMES = type opaque
%struct.x509_crl_method_st = type opaque
%struct.lhash_st_SSL_SESSION = type opaque
%struct.ssl_session_st = type { i32, i16, i16, i16, i32, [48 x i8], i32, [32 x i8], i8, [32 x i8], %"class.std::__1::unique_ptr.23", %"class.std::__1::unique_ptr.17", %"struct.bssl::SSL_X509_METHOD"*, %struct.x509_st*, %struct.stack_st_X509*, %struct.stack_st_X509*, i64, i32, i32, i64, %struct.ssl_cipher_st*, %struct.crypto_ex_data_st, %struct.ssl_session_st*, %struct.ssl_session_st*, %"class.bssl::Array", %"class.std::__1::unique_ptr.28", %"class.std::__1::unique_ptr.28", [32 x i8], [64 x i8], i8, i32, i32, i32, %"class.bssl::Array", %"class.bssl::Array", %"class.bssl::Array", i8, %"class.bssl::Array" }
%struct.evp_pkey_st = type { i32, i32, %union.anon, %struct.evp_pkey_asn1_method_st* }
%union.anon = type { i8* }
%struct.evp_pkey_asn1_method_st = type opaque
%struct.crypto_ex_data_st = type { %struct.stack_st_void* }
%struct.stack_st_void = type opaque
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %struct.stack_st_CRYPTO_BUFFER* }
%struct.stack_st_X509_NAME = type opaque
%"class.std::__1::unique_ptr.9" = type { %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.bssl::CERT"* }
%struct.X509_VERIFY_PARAM_st = type { i8*, i64, i64, i64, i32, i32, i32, %struct.stack_st_ASN1_OBJECT*, %struct.X509_VERIFY_PARAM_ID_st* }
%struct.stack_st_ASN1_OBJECT = type opaque
%struct.X509_VERIFY_PARAM_ID_st = type opaque
%struct.ssl_early_callback_ctx = type { %struct.ssl_st*, i8*, i64, i16, i8*, i64, i8*, i64, i8*, i64, i8*, i64, i8*, i64 }
%"class.std::__1::unique_ptr.111" = type { %"class.std::__1::__compressed_pair.112" }
%"class.std::__1::__compressed_pair.112" = type { %"struct.std::__1::__compressed_pair_elem.113" }
%"struct.std::__1::__compressed_pair_elem.113" = type { %"struct.bssl::TicketKey"* }
%"struct.bssl::TicketKey" = type { [16 x i8], [16 x i8], [16 x i8], i64 }
%struct.evp_cipher_ctx_st = type { %struct.evp_cipher_st*, i8*, i8*, i32, i32, i32, [16 x i8], [16 x i8], [32 x i8], i32, i32, i32, [32 x i8] }
%struct.evp_cipher_st = type { i32, i32, i32, i32, i32, i32, i8*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i32)*, i32 (%struct.evp_cipher_ctx_st*, i8*, i8*, i64)*, void (%struct.evp_cipher_ctx_st*)*, i32 (%struct.evp_cipher_ctx_st*, i32, i32, i8*)* }
%struct.hmac_ctx_st = type { %struct.env_md_st*, %struct.env_md_ctx_st, %struct.env_md_ctx_st, %struct.env_md_ctx_st }
%"class.std::__1::unique_ptr.23" = type { %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25" }
%"struct.std::__1::__compressed_pair_elem.25" = type { i8* }
%"class.bssl::Array" = type { i8*, i64 }
%"class.std::__1::unique_ptr.77" = type { %"class.std::__1::__compressed_pair.78" }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %struct.stack_st_SRTP_PROTECTION_PROFILE* }
%struct.stack_st_SRTP_PROTECTION_PROFILE = type opaque
%"class.bssl::GrowableArray.116" = type { i64, %"class.bssl::Array.117" }
%"class.bssl::Array.117" = type { %"struct.bssl::CertCompressionAlg"*, i64 }
%"struct.bssl::CertCompressionAlg" = type <{ i32 (%struct.ssl_st*, %struct.cbb_st*, i8*, i64)*, i32 (%struct.ssl_st*, %struct.crypto_buffer_st**, i64, i8*, i64)*, i16, [6 x i8] }>
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %struct.evp_pkey_st* }
%"class.std::__1::unique_ptr.56" = type { %"class.std::__1::__compressed_pair.57" }
%"class.std::__1::__compressed_pair.57" = type { %"struct.std::__1::__compressed_pair_elem.58" }
%"struct.std::__1::__compressed_pair_elem.58" = type { %struct.ssl_ech_server_config_list_st* }
%struct.ssl_ech_server_config_list_st = type <{ %"class.bssl::GrowableArray", i32, [4 x i8] }>
%"class.bssl::GrowableArray" = type { i64, %"class.bssl::Array.59" }
%"class.bssl::Array.59" = type { %"class.std::__1::unique_ptr.60"*, i64 }
%"class.std::__1::unique_ptr.60" = type opaque
%struct.timeval = type { i64, i64 }
%struct.crypto_buffer_pool_st = type opaque
%struct.ssl_ticket_aead_method_st = type { i64 (%struct.ssl_st*)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)*, i32 (%struct.ssl_st*, i8*, i64*, i64, i8*, i64)* }
%"class.bssl::Array.49" = type { i16*, i64 }
%struct.stack_st = type { i64, i8**, i32, i64, i32 (i8**, i8**)* }

@.str = private unnamed_addr constant [47 x i8] c"../../third_party/boringssl/src/ssl/d1_srtp.cc\00", align 1
@_ZL13kSRTPProfiles = internal constant [5 x %struct.srtp_protection_profile_st] [%struct.srtp_protection_profile_st { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i32 0, i32 0), i64 1 }, %struct.srtp_protection_profile_st { i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i32 0, i32 0), i64 2 }, %struct.srtp_protection_profile_st { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i32 0, i32 0), i64 7 }, %struct.srtp_protection_profile_st { i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i32 0, i32 0), i64 8 }, %struct.srtp_protection_profile_st zeroinitializer], align 16
@.str.1 = private unnamed_addr constant [23 x i8] c"SRTP_AES128_CM_SHA1_80\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"SRTP_AES128_CM_SHA1_32\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"SRTP_AEAD_AES_128_GCM\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c"SRTP_AEAD_AES_256_GCM\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_CTX_set_srtp_profiles(%struct.ssl_ctx_st* nocapture, i8*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 65
  %4 = tail call fastcc i32 @_ZL21ssl_ctx_make_profilesPKcPNSt3__110unique_ptrI32stack_st_SRTP_PROTECTION_PROFILEN4bssl8internal7DeleterIS3_EEEE(i8* %1, %"class.std::__1::unique_ptr.77"* %3)
  ret i32 %4
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZL21ssl_ctx_make_profilesPKcPNSt3__110unique_ptrI32stack_st_SRTP_PROTECTION_PROFILEN4bssl8internal7DeleterIS3_EEEE(i8*, %"class.std::__1::unique_ptr.77"* nocapture) unnamed_addr #0 {
  %3 = tail call %struct.stack_st* @sk_new_null() #5
  %4 = ptrtoint %struct.stack_st* %3 to i64
  %5 = icmp eq %struct.stack_st* %3, null
  br i1 %5, label %6, label %7

6:                                                ; preds = %2
  tail call void @ERR_put_error(i32 16, i32 0, i32 211, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 167) #5
  br label %47

7:                                                ; preds = %2, %36
  %8 = phi i8* [ %37, %36 ], [ %0, %2 ]
  %9 = tail call i8* @strchr(i8* %8, i32 58) #6
  %10 = icmp ne i8* %9, null
  br i1 %10, label %11, label %15

11:                                               ; preds = %7
  %12 = ptrtoint i8* %9 to i64
  %13 = ptrtoint i8* %8 to i64
  %14 = sub i64 %12, %13
  br label %17

15:                                               ; preds = %7
  %16 = tail call i64 @strlen(i8* %8) #6
  br label %17

17:                                               ; preds = %15, %11
  %18 = phi i64 [ %14, %11 ], [ %16, %15 ]
  switch i64 %18, label %31 [
    i64 22, label %19
    i64 21, label %25
  ]

19:                                               ; preds = %17
  %20 = tail call i32 @strncmp(i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* %8, i64 22) #6
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %32, label %22

22:                                               ; preds = %19
  %23 = tail call i32 @strncmp(i8* nonnull getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0), i8* %8, i64 22) #6
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %32, label %31

25:                                               ; preds = %17
  %26 = tail call i32 @strncmp(i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i8* %8, i64 21) #6
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %25
  %29 = tail call i32 @strncmp(i8* nonnull getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* %8, i64 21) #6
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %32, label %31

31:                                               ; preds = %28, %22, %17
  tail call void @ERR_put_error(i32 16, i32 0, i32 212, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 179) #5
  br label %45

32:                                               ; preds = %28, %25, %22, %19
  %33 = phi i8* [ bitcast ([5 x %struct.srtp_protection_profile_st]* @_ZL13kSRTPProfiles to i8*), %19 ], [ bitcast (%struct.srtp_protection_profile_st* getelementptr inbounds ([5 x %struct.srtp_protection_profile_st], [5 x %struct.srtp_protection_profile_st]* @_ZL13kSRTPProfiles, i64 0, i64 1) to i8*), %22 ], [ bitcast (%struct.srtp_protection_profile_st* getelementptr inbounds ([5 x %struct.srtp_protection_profile_st], [5 x %struct.srtp_protection_profile_st]* @_ZL13kSRTPProfiles, i64 0, i64 2) to i8*), %25 ], [ bitcast (%struct.srtp_protection_profile_st* getelementptr inbounds ([5 x %struct.srtp_protection_profile_st], [5 x %struct.srtp_protection_profile_st]* @_ZL13kSRTPProfiles, i64 0, i64 3) to i8*), %28 ]
  %34 = tail call i64 @sk_push(%struct.stack_st* nonnull %3, i8* nonnull %33) #5
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %45, label %36

36:                                               ; preds = %32
  %37 = getelementptr inbounds i8, i8* %9, i64 1
  br i1 %10, label %7, label %38

38:                                               ; preds = %36
  %39 = getelementptr inbounds %"class.std::__1::unique_ptr.77", %"class.std::__1::unique_ptr.77"* %1, i64 0, i32 0, i32 0, i32 0
  %40 = load %struct.stack_st_SRTP_PROTECTION_PROFILE*, %struct.stack_st_SRTP_PROTECTION_PROFILE** %39, align 8
  %41 = bitcast %"class.std::__1::unique_ptr.77"* %1 to i64*
  store i64 %4, i64* %41, align 8
  %42 = icmp eq %struct.stack_st_SRTP_PROTECTION_PROFILE* %40, null
  br i1 %42, label %47, label %43

43:                                               ; preds = %38
  %44 = bitcast %struct.stack_st_SRTP_PROTECTION_PROFILE* %40 to %struct.stack_st*
  tail call void @sk_free(%struct.stack_st* nonnull %44) #5
  br label %47

45:                                               ; preds = %32, %31
  br i1 %5, label %47, label %46

46:                                               ; preds = %45
  tail call void @sk_free(%struct.stack_st* nonnull %3) #5
  br label %47

47:                                               ; preds = %6, %43, %38, %45, %46
  %48 = phi i32 [ 0, %45 ], [ 0, %46 ], [ 1, %38 ], [ 1, %43 ], [ 0, %6 ]
  ret i32 %48
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_set_srtp_profiles(%struct.ssl_st* nocapture readonly, i8*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %3, align 8
  %5 = icmp eq %"struct.bssl::SSL_CONFIG"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %4, i64 0, i32 21
  %8 = tail call fastcc i32 @_ZL21ssl_ctx_make_profilesPKcPNSt3__110unique_ptrI32stack_st_SRTP_PROTECTION_PROFILEN4bssl8internal7DeleterIS3_EEEE(i8* %1, %"class.std::__1::unique_ptr.77"* %7)
  %9 = icmp ne i32 %8, 0
  %10 = zext i1 %9 to i32
  br label %11

11:                                               ; preds = %2, %6
  %12 = phi i32 [ 0, %2 ], [ %10, %6 ]
  ret i32 %12
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %struct.stack_st_SRTP_PROTECTION_PROFILE* @SSL_get_srtp_profiles(%struct.ssl_st* readonly) local_unnamed_addr #1 {
  %2 = icmp eq %struct.ssl_st* %0, null
  br i1 %2, label %16, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %5 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %4, align 8
  %6 = icmp eq %"struct.bssl::SSL_CONFIG"* %5, null
  br i1 %6, label %16, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %5, i64 0, i32 21, i32 0, i32 0, i32 0
  %9 = load %struct.stack_st_SRTP_PROTECTION_PROFILE*, %struct.stack_st_SRTP_PROTECTION_PROFILE** %8, align 8
  %10 = icmp eq %struct.stack_st_SRTP_PROTECTION_PROFILE* %9, null
  br i1 %10, label %11, label %16

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 16, i32 0, i32 0, i32 0
  %13 = load %struct.ssl_ctx_st*, %struct.ssl_ctx_st** %12, align 8
  %14 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %13, i64 0, i32 65, i32 0, i32 0, i32 0
  %15 = load %struct.stack_st_SRTP_PROTECTION_PROFILE*, %struct.stack_st_SRTP_PROTECTION_PROFILE** %14, align 8
  br label %16

16:                                               ; preds = %7, %11, %3, %1
  %17 = phi %struct.stack_st_SRTP_PROTECTION_PROFILE* [ null, %1 ], [ null, %3 ], [ %15, %11 ], [ %9, %7 ]
  ret %struct.stack_st_SRTP_PROTECTION_PROFILE* %17
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden %struct.srtp_protection_profile_st* @SSL_get_selected_srtp_profile(%struct.ssl_st* nocapture readonly) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 8
  %3 = load %"struct.bssl::SSL3_STATE"*, %"struct.bssl::SSL3_STATE"** %2, align 8
  %4 = getelementptr inbounds %"struct.bssl::SSL3_STATE", %"struct.bssl::SSL3_STATE"* %3, i64 0, i32 53
  %5 = load %struct.srtp_protection_profile_st*, %struct.srtp_protection_profile_st** %4, align 8
  ret %struct.srtp_protection_profile_st* %5
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_CTX_set_tlsext_use_srtp(%struct.ssl_ctx_st* nocapture, i8*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.ssl_ctx_st, %struct.ssl_ctx_st* %0, i64 0, i32 65
  %4 = tail call fastcc i32 @_ZL21ssl_ctx_make_profilesPKcPNSt3__110unique_ptrI32stack_st_SRTP_PROTECTION_PROFILEN4bssl8internal7DeleterIS3_EEEE(i8* %1, %"class.std::__1::unique_ptr.77"* %3) #5
  %5 = icmp eq i32 %4, 0
  %6 = zext i1 %5 to i32
  ret i32 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @SSL_set_tlsext_use_srtp(%struct.ssl_st* nocapture readonly, i8*) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.ssl_st, %struct.ssl_st* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %4 = load %"struct.bssl::SSL_CONFIG"*, %"struct.bssl::SSL_CONFIG"** %3, align 8
  %5 = icmp eq %"struct.bssl::SSL_CONFIG"* %4, null
  br i1 %5, label %11, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.bssl::SSL_CONFIG", %"struct.bssl::SSL_CONFIG"* %4, i64 0, i32 21
  %8 = tail call fastcc i32 @_ZL21ssl_ctx_make_profilesPKcPNSt3__110unique_ptrI32stack_st_SRTP_PROTECTION_PROFILEN4bssl8internal7DeleterIS3_EEEE(i8* %1, %"class.std::__1::unique_ptr.77"* %7) #5
  %9 = icmp eq i32 %8, 0
  %10 = zext i1 %9 to i32
  br label %11

11:                                               ; preds = %2, %6
  %12 = phi i32 [ 1, %2 ], [ %10, %6 ]
  ret i32 %12
}

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i8* @strchr(i8*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

declare %struct.stack_st* @sk_new_null() local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @strncmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #3

declare i64 @sk_push(%struct.stack_st*, i8*) local_unnamed_addr #2

declare void @sk_free(%struct.stack_st*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
