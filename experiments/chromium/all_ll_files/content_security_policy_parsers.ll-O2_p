; ModuleID = '../../third_party/blink/renderer/platform/network/content_security_policy_parsers.cc'
source_filename = "../../third_party/blink/renderer/platform/network/content_security_policy_parsers.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink30MatchesTheSerializedCSPGrammarERKN3WTF6StringE(%"class.WTF::String"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %0, i64 0, i32 0, i32 0
  %3 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %2, align 8
  %4 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %5 = load atomic i32, i32* %4 monotonic, align 4
  %6 = and i32 %5, 1
  %7 = icmp eq i32 %6, 0
  %8 = icmp eq %"class.WTF::StringImpl"* %3, null
  %9 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 1
  br i1 %7, label %101, label %10

10:                                               ; preds = %1
  %11 = bitcast %"class.WTF::StringImpl"* %9 to i8*
  br i1 %8, label %186, label %12

12:                                               ; preds = %10
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  %15 = zext i32 %14 to i64
  %16 = getelementptr inbounds i8, i8* %11, i64 %15
  %17 = icmp eq i32 %14, 0
  br i1 %17, label %186, label %18

18:                                               ; preds = %12, %26
  %19 = phi i8* [ %27, %26 ], [ %11, %12 ]
  %20 = load i8, i8* %19, align 1
  %21 = icmp ult i8 %20, 33
  br i1 %21, label %22, label %28

22:                                               ; preds = %18
  switch i8 %20, label %28 [
    i8 32, label %23
    i8 13, label %23
    i8 12, label %23
    i8 11, label %23
    i8 10, label %23
    i8 9, label %23
  ]

23:                                               ; preds = %22, %22, %22, %22, %22, %22
  %24 = getelementptr inbounds i8, i8* %19, i64 1
  %25 = icmp eq i8* %24, %16
  br i1 %25, label %186, label %26

26:                                               ; preds = %23, %99
  %27 = phi i8* [ %24, %23 ], [ %97, %99 ]
  br label %18

28:                                               ; preds = %22, %18
  %29 = icmp ult i8* %19, %16
  br i1 %29, label %30, label %84

30:                                               ; preds = %28, %46
  %31 = phi i8 [ %47, %46 ], [ %20, %28 ]
  %32 = phi i1 [ true, %46 ], [ false, %28 ]
  %33 = phi i8* [ %44, %46 ], [ %19, %28 ]
  %34 = zext i8 %31 to i16
  %35 = add nsw i16 %34, -48
  %36 = icmp ult i16 %35, 10
  br i1 %36, label %43, label %37

37:                                               ; preds = %30
  %38 = or i16 %34, 32
  %39 = add nsw i16 %38, -97
  %40 = icmp ult i16 %39, 26
  %41 = icmp eq i8 %31, 45
  %42 = or i1 %41, %40
  br i1 %42, label %43, label %48

43:                                               ; preds = %37, %30
  %44 = getelementptr inbounds i8, i8* %33, i64 1
  %45 = icmp eq i8* %44, %16
  br i1 %45, label %186, label %46

46:                                               ; preds = %43
  %47 = load i8, i8* %44, align 1
  br label %30

48:                                               ; preds = %37
  %49 = icmp ult i8* %33, %16
  %50 = and i1 %32, %49
  %51 = icmp ult i8 %31, 33
  %52 = and i1 %51, %50
  br i1 %52, label %56, label %84

53:                                               ; preds = %60
  %54 = load i8, i8* %61, align 1
  %55 = icmp ult i8 %54, 33
  br i1 %55, label %56, label %63

56:                                               ; preds = %48, %53
  %57 = phi i8 [ %54, %53 ], [ %31, %48 ]
  %58 = phi i8* [ %61, %53 ], [ %33, %48 ]
  %59 = phi i1 [ true, %53 ], [ false, %48 ]
  switch i8 %57, label %63 [
    i8 32, label %60
    i8 13, label %60
    i8 12, label %60
    i8 11, label %60
    i8 10, label %60
    i8 9, label %60
  ]

60:                                               ; preds = %56, %56, %56, %56, %56, %56
  %61 = getelementptr inbounds i8, i8* %58, i64 1
  %62 = icmp eq i8* %61, %16
  br i1 %62, label %186, label %53

63:                                               ; preds = %56, %53
  %64 = phi i8 [ %54, %53 ], [ %57, %56 ]
  %65 = phi i1 [ true, %53 ], [ %59, %56 ]
  %66 = phi i8* [ %61, %53 ], [ %58, %56 ]
  %67 = icmp ult i8* %66, %16
  %68 = and i1 %65, %67
  br i1 %68, label %69, label %84

69:                                               ; preds = %63, %82
  %70 = phi i8 [ %83, %82 ], [ %64, %63 ]
  %71 = phi i8* [ %80, %82 ], [ %66, %63 ]
  %72 = zext i8 %70 to i16
  %73 = icmp ult i8 %70, 33
  br i1 %73, label %74, label %75

74:                                               ; preds = %69
  switch i8 %70, label %75 [
    i8 32, label %79
    i8 13, label %79
    i8 12, label %79
    i8 11, label %79
    i8 10, label %79
    i8 9, label %79
  ]

75:                                               ; preds = %74, %69
  %76 = add nsw i16 %72, -32
  %77 = icmp ult i16 %76, 95
  br i1 %77, label %78, label %84

78:                                               ; preds = %75
  switch i8 %70, label %79 [
    i8 59, label %84
    i8 44, label %84
  ]

79:                                               ; preds = %78, %74, %74, %74, %74, %74, %74
  %80 = getelementptr inbounds i8, i8* %71, i64 1
  %81 = icmp eq i8* %80, %16
  br i1 %81, label %186, label %82

82:                                               ; preds = %79
  %83 = load i8, i8* %80, align 1
  br label %69

84:                                               ; preds = %78, %78, %75, %63, %48, %28
  %85 = phi i8 [ %31, %48 ], [ %64, %63 ], [ %20, %28 ], [ %70, %75 ], [ %70, %78 ], [ %70, %78 ]
  %86 = phi i8* [ %33, %48 ], [ %66, %63 ], [ %19, %28 ], [ %71, %75 ], [ %71, %78 ], [ %71, %78 ]
  %87 = icmp eq i8* %86, %16
  br i1 %87, label %186, label %88

88:                                               ; preds = %84
  %89 = icmp ult i8* %86, %16
  %90 = icmp eq i8 %85, 59
  %91 = and i1 %90, %89
  br i1 %91, label %95, label %186

92:                                               ; preds = %95
  %93 = load i8, i8* %97, align 1
  %94 = icmp eq i8 %93, 59
  br i1 %94, label %95, label %99

95:                                               ; preds = %88, %92
  %96 = phi i8* [ %97, %92 ], [ %86, %88 ]
  %97 = getelementptr inbounds i8, i8* %96, i64 1
  %98 = icmp eq i8* %97, %16
  br i1 %98, label %186, label %92

99:                                               ; preds = %92
  %100 = icmp ult i8* %97, %16
  br i1 %100, label %26, label %186

101:                                              ; preds = %1
  %102 = bitcast %"class.WTF::StringImpl"* %9 to i16*
  br i1 %8, label %186, label %103

103:                                              ; preds = %101
  %104 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %3, i64 0, i32 1
  %105 = load i32, i32* %104, align 4
  %106 = zext i32 %105 to i64
  %107 = getelementptr inbounds i16, i16* %102, i64 %106
  %108 = icmp eq i32 %105, 0
  br i1 %108, label %186, label %109

109:                                              ; preds = %103, %117
  %110 = phi i16* [ %118, %117 ], [ %102, %103 ]
  %111 = load i16, i16* %110, align 2
  %112 = icmp ult i16 %111, 33
  br i1 %112, label %113, label %119

113:                                              ; preds = %109
  switch i16 %111, label %119 [
    i16 32, label %114
    i16 13, label %114
    i16 12, label %114
    i16 11, label %114
    i16 10, label %114
    i16 9, label %114
  ]

114:                                              ; preds = %113, %113, %113, %113, %113, %113
  %115 = getelementptr inbounds i16, i16* %110, i64 1
  %116 = icmp ult i16* %115, %107
  br i1 %116, label %117, label %119

117:                                              ; preds = %179, %114
  %118 = phi i16* [ %115, %114 ], [ %184, %179 ]
  br label %109

119:                                              ; preds = %114, %113, %109
  %120 = phi i16* [ %110, %113 ], [ %110, %109 ], [ %115, %114 ]
  %121 = icmp ult i16* %120, %107
  br i1 %121, label %122, label %171

122:                                              ; preds = %119, %134
  %123 = phi i1 [ true, %134 ], [ false, %119 ]
  %124 = phi i16* [ %135, %134 ], [ %120, %119 ]
  %125 = load i16, i16* %124, align 2
  %126 = add i16 %125, -48
  %127 = icmp ult i16 %126, 10
  br i1 %127, label %134, label %128

128:                                              ; preds = %122
  %129 = or i16 %125, 32
  %130 = add i16 %129, -97
  %131 = icmp ult i16 %130, 26
  %132 = icmp eq i16 %125, 45
  %133 = or i1 %132, %131
  br i1 %133, label %134, label %137

134:                                              ; preds = %128, %122
  %135 = getelementptr inbounds i16, i16* %124, i64 1
  %136 = icmp ult i16* %135, %107
  br i1 %136, label %122, label %138

137:                                              ; preds = %128
  br i1 %123, label %138, label %171

138:                                              ; preds = %134, %137
  %139 = phi i16* [ %124, %137 ], [ %135, %134 ]
  %140 = icmp ult i16* %139, %107
  br i1 %140, label %141, label %171

141:                                              ; preds = %138
  %142 = load i16, i16* %139, align 2
  %143 = icmp ult i16 %142, 33
  br i1 %143, label %147, label %171

144:                                              ; preds = %151
  %145 = load i16, i16* %152, align 2
  %146 = icmp ult i16 %145, 33
  br i1 %146, label %147, label %154

147:                                              ; preds = %141, %144
  %148 = phi i16 [ %145, %144 ], [ %142, %141 ]
  %149 = phi i16* [ %152, %144 ], [ %139, %141 ]
  %150 = phi i1 [ true, %144 ], [ false, %141 ]
  switch i16 %148, label %154 [
    i16 32, label %151
    i16 13, label %151
    i16 12, label %151
    i16 11, label %151
    i16 10, label %151
    i16 9, label %151
  ]

151:                                              ; preds = %147, %147, %147, %147, %147, %147
  %152 = getelementptr inbounds i16, i16* %149, i64 1
  %153 = icmp ult i16* %152, %107
  br i1 %153, label %144, label %154

154:                                              ; preds = %151, %147, %144
  %155 = phi i16* [ %152, %144 ], [ %149, %147 ], [ %152, %151 ]
  %156 = phi i1 [ true, %144 ], [ %150, %147 ], [ true, %151 ]
  %157 = icmp ult i16* %155, %107
  %158 = and i1 %156, %157
  br i1 %158, label %159, label %171

159:                                              ; preds = %154, %168
  %160 = phi i16* [ %169, %168 ], [ %155, %154 ]
  %161 = load i16, i16* %160, align 2
  %162 = icmp ult i16 %161, 33
  br i1 %162, label %163, label %164

163:                                              ; preds = %159
  switch i16 %161, label %164 [
    i16 32, label %168
    i16 13, label %168
    i16 12, label %168
    i16 11, label %168
    i16 10, label %168
    i16 9, label %168
  ]

164:                                              ; preds = %163, %159
  %165 = add i16 %161, -32
  %166 = icmp ult i16 %165, 95
  br i1 %166, label %167, label %171

167:                                              ; preds = %164
  switch i16 %161, label %168 [
    i16 59, label %171
    i16 44, label %171
  ]

168:                                              ; preds = %167, %163, %163, %163, %163, %163, %163
  %169 = getelementptr inbounds i16, i16* %160, i64 1
  %170 = icmp ult i16* %169, %107
  br i1 %170, label %159, label %171

171:                                              ; preds = %168, %167, %167, %164, %154, %141, %138, %137, %119
  %172 = phi i16* [ %124, %137 ], [ %155, %154 ], [ %120, %119 ], [ %139, %138 ], [ %139, %141 ], [ %169, %168 ], [ %160, %164 ], [ %160, %167 ], [ %160, %167 ]
  %173 = icmp eq i16* %172, %107
  br i1 %173, label %186, label %174

174:                                              ; preds = %171
  %175 = icmp ult i16* %172, %107
  br i1 %175, label %176, label %186

176:                                              ; preds = %174
  %177 = load i16, i16* %172, align 2
  %178 = icmp eq i16 %177, 59
  br i1 %178, label %182, label %186

179:                                              ; preds = %182
  %180 = load i16, i16* %184, align 2
  %181 = icmp eq i16 %180, 59
  br i1 %181, label %182, label %117

182:                                              ; preds = %176, %179
  %183 = phi i16* [ %184, %179 ], [ %172, %176 ]
  %184 = getelementptr inbounds i16, i16* %183, i64 1
  %185 = icmp ult i16* %184, %107
  br i1 %185, label %179, label %186

186:                                              ; preds = %88, %84, %99, %23, %43, %60, %79, %95, %176, %174, %171, %182, %101, %10, %103, %12
  %187 = phi i1 [ true, %103 ], [ true, %12 ], [ true, %10 ], [ true, %101 ], [ true, %182 ], [ false, %176 ], [ false, %174 ], [ true, %171 ], [ true, %95 ], [ true, %79 ], [ true, %60 ], [ true, %43 ], [ false, %88 ], [ true, %84 ], [ true, %99 ], [ true, %23 ]
  ret i1 %187
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
