; ModuleID = '../../third_party/fontconfig/src/src/fcfreetype.c'
source_filename = "../../third_party/fontconfig/src/src/fcfreetype.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.anon = type { i8, [6 x i8] }
%struct._FcStringConst = type { i8*, i32 }
%struct.FcFtEncoding = type { i16, i16, [12 x i8] }
%struct.FcMacRomanFake = type { i16, [12 x i8] }
%struct.FcFtLanguage = type { i16, i16, [8 x i8] }
%struct._FcPattern = type { i32, i32, i64, %struct._FcRef }
%struct._FcRef = type { i32 }
%struct._FcBlanks = type opaque
%struct._FcFontSet = type { i32, i32, %struct._FcPattern** }
%struct.FT_FaceRec_ = type { i64, i64, i64, i64, i64, i8*, i8*, i32, %struct.FT_Bitmap_Size_*, i32, %struct.FT_CharMapRec_**, %struct.FT_Generic_, %struct.FT_BBox_, i16, i16, i16, i16, i16, i16, i16, i16, %struct.FT_GlyphSlotRec_*, %struct.FT_SizeRec_*, %struct.FT_CharMapRec_*, %struct.FT_DriverRec_*, %struct.FT_MemoryRec_*, %struct.FT_StreamRec_*, %struct.FT_ListRec_, %struct.FT_Generic_, i8*, %struct.FT_Face_InternalRec_* }
%struct.FT_Bitmap_Size_ = type { i16, i16, i64, i64, i64 }
%struct.FT_BBox_ = type { i64, i64, i64, i64 }
%struct.FT_GlyphSlotRec_ = type { %struct.FT_LibraryRec_*, %struct.FT_FaceRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Generic_, %struct.FT_Glyph_Metrics_, i64, i64, %struct.FT_Vector_, i32, %struct.FT_Bitmap_, i32, i32, %struct.FT_Outline_, i32, %struct.FT_SubGlyphRec_*, i8*, i64, i64, i64, i8*, %struct.FT_Slot_InternalRec_* }
%struct.FT_LibraryRec_ = type opaque
%struct.FT_Glyph_Metrics_ = type { i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.FT_Vector_ = type { i64, i64 }
%struct.FT_Bitmap_ = type { i32, i32, i32, i8*, i16, i8, i8, i8* }
%struct.FT_Outline_ = type { i16, i16, %struct.FT_Vector_*, i8*, i16*, i32 }
%struct.FT_SubGlyphRec_ = type opaque
%struct.FT_Slot_InternalRec_ = type opaque
%struct.FT_SizeRec_ = type { %struct.FT_FaceRec_*, %struct.FT_Generic_, %struct.FT_Size_Metrics_, %struct.FT_Size_InternalRec_* }
%struct.FT_Size_Metrics_ = type { i16, i16, i64, i64, i64, i64, i64, i64 }
%struct.FT_Size_InternalRec_ = type opaque
%struct.FT_CharMapRec_ = type { %struct.FT_FaceRec_*, i32, i16, i16 }
%struct.FT_DriverRec_ = type opaque
%struct.FT_MemoryRec_ = type { i8*, i8* (%struct.FT_MemoryRec_*, i64)*, void (%struct.FT_MemoryRec_*, i8*)*, i8* (%struct.FT_MemoryRec_*, i64, i64, i8*)* }
%struct.FT_StreamRec_ = type { i8*, i64, i64, %union.FT_StreamDesc_, %union.FT_StreamDesc_, i64 (%struct.FT_StreamRec_*, i64, i8*, i64)*, void (%struct.FT_StreamRec_*)*, %struct.FT_MemoryRec_*, i8*, i8* }
%union.FT_StreamDesc_ = type { i64 }
%struct.FT_ListRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_* }
%struct.FT_ListNodeRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_*, i8* }
%struct.FT_Generic_ = type { i8*, void (i8*)* }
%struct.FT_Face_InternalRec_ = type opaque
%struct._FcCharSet = type { %struct._FcRef, i32, i64, i64 }
%struct._FcLangSet = type opaque
%struct.FcNameMapping = type { i32, i32, i32, i32, i32 }
%struct._FcPatternIter = type { i8*, i8* }
%struct.BDF_PropertyRec_ = type { i32, %union.anon }
%union.anon = type { i8* }
%struct.FT_MM_Var_ = type { i32, i32, i32, %struct.FT_Var_Axis_*, %struct.FT_Var_Named_Style_* }
%struct.FT_Var_Axis_ = type { i8*, i64, i64, i64, i64, i32 }
%struct.FT_Var_Named_Style_ = type { i64*, i32, i32 }
%struct.PS_FontInfoRec_ = type { i8*, i8*, i8*, i8*, i8*, i64, i8, i16, i16 }
%struct.FT_SfntName_ = type { i16, i16, i16, i16, i8*, i32 }
%struct._FcStrBuf = type { i8*, i32, i32, i32, i32, [128 x i8] }
%struct._FcRange = type { double, double }
%struct._FcValueList = type { %struct._FcValueList*, %struct._FcValue, i32 }
%struct._FcValue = type { i32, %union.anon.0 }
%union.anon.0 = type { i8* }
%struct._FcCharLeaf = type { [8 x i32] }

@FcCodePageRange = internal constant [4 x %struct.anon] [%struct.anon { i8 17, [6 x i8] c"ja\00\00\00\00" }, %struct.anon { i8 18, [6 x i8] c"zh-cn\00" }, %struct.anon { i8 19, [6 x i8] c"ko\00\00\00\00" }, %struct.anon { i8 20, [6 x i8] c"zh-tw\00" }], align 16
@fcFontEncodings = internal unnamed_addr constant [2 x i32] [i32 1970170211, i32 1937337698], align 4
@FcDebugVal = external hidden local_unnamed_addr global i32, align 4
@platform_order = internal unnamed_addr constant [4 x i16] [i16 3, i16 0, i16 1, i16 2], align 2
@nameid_order = internal unnamed_addr constant [10 x i16] [i16 21, i16 16, i16 1, i16 18, i16 4, i16 22, i16 17, i16 2, i16 7, i16 8], align 16
@.str.2 = private unnamed_addr constant [40 x i8] c"found family (n %2d p %d e %d l 0x%04x)\00", align 1
@.str.3 = private unnamed_addr constant [40 x i8] c"found full   (n %2d p %d e %d l 0x%04x)\00", align 1
@.str.4 = private unnamed_addr constant [41 x i8] c"found style  (n %2d p %d e %d l 0x%04x) \00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"(null)\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"und\00", align 1
@.str.8 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.9 = private unnamed_addr constant [28 x i8] c"using FreeType family \22%s\22\0A\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"en\00", align 1
@.str.11 = private unnamed_addr constant [27 x i8] c"using FreeType style \22%s\22\0A\00", align 1
@.str.12 = private unnamed_addr constant [30 x i8] c"using filename for family %s\0A\00", align 1
@FcFreeTypeQueryFaceInternal.exclusive_chars = internal constant [16 x i8] c"\04()/<>[]{}\09\0C\0D\0A \00", align 16
@.str.13 = private unnamed_addr constant [54 x i8] c"\09os2 weight class %d multiplier %g maps to weight %g\0A\00", align 1
@.str.14 = private unnamed_addr constant [52 x i8] c"\09os2 width class %d multiplier %g maps to width %g\0A\00", align 1
@weightConsts = internal unnamed_addr constant [23 x %struct._FcStringConst] [%struct._FcStringConst { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.78, i32 0, i32 0), i32 0 }, %struct._FcStringConst { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.79, i32 0, i32 0), i32 40 }, %struct._FcStringConst { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.80, i32 0, i32 0), i32 40 }, %struct._FcStringConst { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.81, i32 0, i32 0), i32 55 }, %struct._FcStringConst { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.82, i32 0, i32 0), i32 55 }, %struct._FcStringConst { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.83, i32 0, i32 0), i32 50 }, %struct._FcStringConst { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.84, i32 0, i32 0), i32 75 }, %struct._FcStringConst { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.85, i32 0, i32 0), i32 80 }, %struct._FcStringConst { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.86, i32 0, i32 0), i32 80 }, %struct._FcStringConst { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.87, i32 0, i32 0), i32 100 }, %struct._FcStringConst { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.88, i32 0, i32 0), i32 180 }, %struct._FcStringConst { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.89, i32 0, i32 0), i32 180 }, %struct._FcStringConst { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.90, i32 0, i32 0), i32 180 }, %struct._FcStringConst { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.91, i32 0, i32 0), i32 205 }, %struct._FcStringConst { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.92, i32 0, i32 0), i32 205 }, %struct._FcStringConst { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.93, i32 0, i32 0), i32 205 }, %struct._FcStringConst { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.94, i32 0, i32 0), i32 200 }, %struct._FcStringConst { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.95, i32 0, i32 0), i32 215 }, %struct._FcStringConst { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.96, i32 0, i32 0), i32 215 }, %struct._FcStringConst { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.97, i32 0, i32 0), i32 215 }, %struct._FcStringConst { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.98, i32 0, i32 0), i32 205 }, %struct._FcStringConst { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.99, i32 0, i32 0), i32 210 }, %struct._FcStringConst { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.100, i32 0, i32 0), i32 210 }], align 16
@.str.15 = private unnamed_addr constant [29 x i8] c"\09Type1 weight %s maps to %g\0A\00", align 1
@.str.16 = private unnamed_addr constant [8 x i8] c"FOUNDRY\00", align 1
@.str.17 = private unnamed_addr constant [18 x i8] c"RELATIVE_SETWIDTH\00", align 1
@.str.18 = private unnamed_addr constant [14 x i8] c"SETWIDTH_NAME\00", align 1
@widthConsts = internal unnamed_addr constant [10 x %struct._FcStringConst] [%struct._FcStringConst { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.101, i32 0, i32 0), i32 50 }, %struct._FcStringConst { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.102, i32 0, i32 0), i32 63 }, %struct._FcStringConst { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.103, i32 0, i32 0), i32 87 }, %struct._FcStringConst { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.104, i32 0, i32 0), i32 75 }, %struct._FcStringConst { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.86, i32 0, i32 0), i32 100 }, %struct._FcStringConst { i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.105, i32 0, i32 0), i32 113 }, %struct._FcStringConst { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.106, i32 0, i32 0), i32 150 }, %struct._FcStringConst { i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.107, i32 0, i32 0), i32 200 }, %struct._FcStringConst { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.108, i32 0, i32 0), i32 125 }, %struct._FcStringConst { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.109, i32 0, i32 0), i32 125 }], align 16
@.str.19 = private unnamed_addr constant [25 x i8] c"\09setwidth %s maps to %g\0A\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c"style\00", align 1
@.str.21 = private unnamed_addr constant [29 x i8] c"\09Style %s maps to weight %g\0A\00", align 1
@.str.22 = private unnamed_addr constant [28 x i8] c"\09Style %s maps to width %g\0A\00", align 1
@slantConsts = internal unnamed_addr constant [3 x %struct._FcStringConst] [%struct._FcStringConst { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.110, i32 0, i32 0), i32 100 }, %struct._FcStringConst { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.111, i32 0, i32 0), i32 100 }, %struct._FcStringConst { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.112, i32 0, i32 0), i32 110 }], align 16
@.str.23 = private unnamed_addr constant [28 x i8] c"\09Style %s maps to slant %d\0A\00", align 1
@decorativeConsts = internal unnamed_addr constant [6 x %struct._FcStringConst] [%struct._FcStringConst { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.113, i32 0, i32 0), i32 1 }, %struct._FcStringConst { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.114, i32 0, i32 0), i32 1 }, %struct._FcStringConst { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.115, i32 0, i32 0), i32 1 }, %struct._FcStringConst { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.116, i32 0, i32 0), i32 1 }, %struct._FcStringConst { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.117, i32 0, i32 0), i32 1 }, %struct._FcStringConst { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.118, i32 0, i32 0), i32 1 }], align 16
@.str.24 = private unnamed_addr constant [33 x i8] c"\09Style %s maps to decorative %d\0A\00", align 1
@.str.25 = private unnamed_addr constant [8 x i8] c"unknown\00", align 1
@.str.26 = private unnamed_addr constant [8 x i8] c"SPACING\00", align 1
@.str.27 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.28 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.29 = private unnamed_addr constant [2 x i8] c"m\00", align 1
@.str.30 = private unnamed_addr constant [2 x i8] c"M\00", align 1
@.str.31 = private unnamed_addr constant [2 x i8] c"p\00", align 1
@.str.32 = private unnamed_addr constant [2 x i8] c"P\00", align 1
@.str.33 = private unnamed_addr constant [11 x i8] c"PIXEL_SIZE\00", align 1
@fcFtEncoding = internal constant [14 x %struct.FcFtEncoding] [%struct.FcFtEncoding { i16 0, i16 -1, [12 x i8] c"UTF-16BE\00\00\00\00" }, %struct.FcFtEncoding { i16 1, i16 0, [12 x i8] c"MACINTOSH\00\00\00" }, %struct.FcFtEncoding { i16 1, i16 1, [12 x i8] c"SJIS\00\00\00\00\00\00\00\00" }, %struct.FcFtEncoding { i16 3, i16 0, [12 x i8] c"UTF-16BE\00\00\00\00" }, %struct.FcFtEncoding { i16 3, i16 1, [12 x i8] c"UTF-16BE\00\00\00\00" }, %struct.FcFtEncoding { i16 3, i16 2, [12 x i8] c"SJIS-WIN\00\00\00\00" }, %struct.FcFtEncoding { i16 3, i16 3, [12 x i8] c"GB2312\00\00\00\00\00\00" }, %struct.FcFtEncoding { i16 3, i16 4, [12 x i8] c"BIG-5\00\00\00\00\00\00\00" }, %struct.FcFtEncoding { i16 3, i16 5, [12 x i8] c"Wansung\00\00\00\00\00" }, %struct.FcFtEncoding { i16 3, i16 6, [12 x i8] c"Johab\00\00\00\00\00\00\00" }, %struct.FcFtEncoding { i16 3, i16 10, [12 x i8] c"UTF-16BE\00\00\00\00" }, %struct.FcFtEncoding { i16 2, i16 0, [12 x i8] c"ASCII\00\00\00\00\00\00\00" }, %struct.FcFtEncoding { i16 2, i16 1, [12 x i8] c"UTF-16BE\00\00\00\00" }, %struct.FcFtEncoding { i16 2, i16 2, [12 x i8] c"ISO-8859-1\00\00" }], align 16
@.str.34 = private unnamed_addr constant [10 x i8] c"MACINTOSH\00", align 1
@.str.35 = private unnamed_addr constant [5 x i8] c"SJIS\00", align 1
@fcMacRomanFake = internal constant [2 x %struct.FcMacRomanFake] [%struct.FcMacRomanFake { i16 1041, [12 x i8] c"SJIS-WIN\00\00\00\00" }, %struct.FcMacRomanFake { i16 1033, [12 x i8] c"ASCII\00\00\00\00\00\00\00" }], align 16
@.str.36 = private unnamed_addr constant [8 x i8] c"UCS-2BE\00", align 1
@.str.37 = private unnamed_addr constant [9 x i8] c"UTF-16BE\00", align 1
@.str.38 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@.str.39 = private unnamed_addr constant [11 x i8] c"ISO-8859-1\00", align 1
@fcMacRomanNonASCIIToUnicode = internal unnamed_addr constant [128 x i16] [i16 196, i16 197, i16 199, i16 201, i16 209, i16 214, i16 220, i16 225, i16 224, i16 226, i16 228, i16 227, i16 229, i16 231, i16 233, i16 232, i16 234, i16 235, i16 237, i16 236, i16 238, i16 239, i16 241, i16 243, i16 242, i16 244, i16 246, i16 245, i16 250, i16 249, i16 251, i16 252, i16 8224, i16 176, i16 162, i16 163, i16 167, i16 8226, i16 182, i16 223, i16 174, i16 169, i16 8482, i16 180, i16 168, i16 8800, i16 198, i16 216, i16 8734, i16 177, i16 8804, i16 8805, i16 165, i16 181, i16 8706, i16 8721, i16 8719, i16 960, i16 8747, i16 170, i16 186, i16 937, i16 230, i16 248, i16 191, i16 161, i16 172, i16 8730, i16 402, i16 8776, i16 8710, i16 171, i16 187, i16 8230, i16 160, i16 192, i16 195, i16 213, i16 338, i16 339, i16 8211, i16 8212, i16 8220, i16 8221, i16 8216, i16 8217, i16 247, i16 9674, i16 255, i16 376, i16 8260, i16 8364, i16 8249, i16 8250, i16 -1279, i16 -1278, i16 8225, i16 183, i16 8218, i16 8222, i16 8240, i16 194, i16 202, i16 193, i16 203, i16 200, i16 205, i16 206, i16 207, i16 204, i16 211, i16 212, i16 -1793, i16 210, i16 218, i16 219, i16 217, i16 305, i16 710, i16 732, i16 175, i16 728, i16 729, i16 730, i16 184, i16 733, i16 731, i16 711], align 16
@FcNoticeFoundries = internal unnamed_addr constant [18 x [2 x i8*]] [[2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.40, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.41, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.42, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.43, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.44, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.45, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.46, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.47, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.48, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.47, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.49, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.50, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.51, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.52, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.53, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.54, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.55, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.56, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.57, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.58, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.59, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.58, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.60, i32 0, i32 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.61, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.62, i32 0, i32 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.63, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.64, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.65, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.66, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.67, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.68, i32 0, i32 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.69, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.70, i32 0, i32 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.71, i32 0, i32 0)], [2 x i8*] [i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.72, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.73, i32 0, i32 0)]], align 16
@.str.40 = private unnamed_addr constant [6 x i8] c"Adobe\00", align 1
@.str.41 = private unnamed_addr constant [6 x i8] c"adobe\00", align 1
@.str.42 = private unnamed_addr constant [8 x i8] c"Bigelow\00", align 1
@.str.43 = private unnamed_addr constant [4 x i8] c"b&h\00", align 1
@.str.44 = private unnamed_addr constant [10 x i8] c"Bitstream\00", align 1
@.str.45 = private unnamed_addr constant [10 x i8] c"bitstream\00", align 1
@.str.46 = private unnamed_addr constant [5 x i8] c"Gnat\00", align 1
@.str.47 = private unnamed_addr constant [7 x i8] c"culmus\00", align 1
@.str.48 = private unnamed_addr constant [6 x i8] c"Iorsh\00", align 1
@.str.49 = private unnamed_addr constant [15 x i8] c"HanYang System\00", align 1
@.str.50 = private unnamed_addr constant [8 x i8] c"hanyang\00", align 1
@.str.51 = private unnamed_addr constant [7 x i8] c"Font21\00", align 1
@.str.52 = private unnamed_addr constant [5 x i8] c"hwan\00", align 1
@.str.53 = private unnamed_addr constant [4 x i8] c"IBM\00", align 1
@.str.54 = private unnamed_addr constant [4 x i8] c"ibm\00", align 1
@.str.55 = private unnamed_addr constant [35 x i8] c"International Typeface Corporation\00", align 1
@.str.56 = private unnamed_addr constant [4 x i8] c"itc\00", align 1
@.str.57 = private unnamed_addr constant [9 x i8] c"Linotype\00", align 1
@.str.58 = private unnamed_addr constant [9 x i8] c"linotype\00", align 1
@.str.59 = private unnamed_addr constant [14 x i8] c"LINOTYPE-HELL\00", align 1
@.str.60 = private unnamed_addr constant [10 x i8] c"Microsoft\00", align 1
@.str.61 = private unnamed_addr constant [10 x i8] c"microsoft\00", align 1
@.str.62 = private unnamed_addr constant [9 x i8] c"Monotype\00", align 1
@.str.63 = private unnamed_addr constant [9 x i8] c"monotype\00", align 1
@.str.64 = private unnamed_addr constant [6 x i8] c"Omega\00", align 1
@.str.65 = private unnamed_addr constant [6 x i8] c"omega\00", align 1
@.str.66 = private unnamed_addr constant [15 x i8] c"Tiro Typeworks\00", align 1
@.str.67 = private unnamed_addr constant [5 x i8] c"tiro\00", align 1
@.str.68 = private unnamed_addr constant [4 x i8] c"URW\00", align 1
@.str.69 = private unnamed_addr constant [4 x i8] c"urw\00", align 1
@.str.70 = private unnamed_addr constant [8 x i8] c"XFree86\00", align 1
@.str.71 = private unnamed_addr constant [8 x i8] c"xfree86\00", align 1
@.str.72 = private unnamed_addr constant [5 x i8] c"Xorg\00", align 1
@.str.73 = private unnamed_addr constant [5 x i8] c"xorg\00", align 1
@fcFtLanguage = internal constant [335 x %struct.FcFtLanguage] [%struct.FcFtLanguage { i16 0, i16 -1, [8 x i8] zeroinitializer }, %struct.FcFtLanguage { i16 1, i16 0, [8 x i8] c"en\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 1, [8 x i8] c"fr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 2, [8 x i8] c"de\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 3, [8 x i8] c"it\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 4, [8 x i8] c"nl\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 5, [8 x i8] c"sv\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 6, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 7, [8 x i8] c"da\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 8, [8 x i8] c"pt\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 9, [8 x i8] c"no\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 10, [8 x i8] c"he\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 11, [8 x i8] c"ja\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 12, [8 x i8] c"ar\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 13, [8 x i8] c"fi\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 14, [8 x i8] c"el\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 15, [8 x i8] c"is\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 16, [8 x i8] c"mt\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 17, [8 x i8] c"tr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 18, [8 x i8] c"hr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 19, [8 x i8] c"zh-tw\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 20, [8 x i8] c"ur\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 21, [8 x i8] c"hi\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 22, [8 x i8] c"th\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 23, [8 x i8] c"ko\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 24, [8 x i8] c"lt\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 25, [8 x i8] c"pl\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 26, [8 x i8] c"hu\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 27, [8 x i8] c"et\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 28, [8 x i8] c"lv\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 30, [8 x i8] c"fo\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 31, [8 x i8] c"fa\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 32, [8 x i8] c"ru\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 33, [8 x i8] c"zh-cn\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 34, [8 x i8] c"nl\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 35, [8 x i8] c"ga\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 36, [8 x i8] c"sq\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 37, [8 x i8] c"ro\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 38, [8 x i8] c"cs\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 39, [8 x i8] c"sk\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 40, [8 x i8] c"sl\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 41, [8 x i8] c"yi\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 42, [8 x i8] c"sr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 43, [8 x i8] c"mk\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 44, [8 x i8] c"bg\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 45, [8 x i8] c"uk\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 46, [8 x i8] c"be\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 47, [8 x i8] c"uz\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 48, [8 x i8] c"kk\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 49, [8 x i8] c"az\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 49, [8 x i8] c"az\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 50, [8 x i8] c"ar\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 51, [8 x i8] c"hy\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 52, [8 x i8] c"ka\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 53, [8 x i8] c"mo\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 54, [8 x i8] c"ky\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 55, [8 x i8] c"tg\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 56, [8 x i8] c"tk\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 57, [8 x i8] c"mn\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 57, [8 x i8] c"mn\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 58, [8 x i8] c"mn\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 59, [8 x i8] c"ps\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 60, [8 x i8] c"ku\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 61, [8 x i8] c"ks\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 62, [8 x i8] c"sd\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 63, [8 x i8] c"bo\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 64, [8 x i8] c"ne\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 65, [8 x i8] c"sa\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 66, [8 x i8] c"mr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 67, [8 x i8] c"bn\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 68, [8 x i8] c"as\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 69, [8 x i8] c"gu\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 70, [8 x i8] c"pa\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 71, [8 x i8] c"or\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 72, [8 x i8] c"ml\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 73, [8 x i8] c"kn\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 74, [8 x i8] c"ta\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 75, [8 x i8] c"te\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 76, [8 x i8] c"si\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 77, [8 x i8] c"my\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 78, [8 x i8] c"km\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 79, [8 x i8] c"lo\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 80, [8 x i8] c"vi\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 81, [8 x i8] c"id\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 82, [8 x i8] c"tl\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 83, [8 x i8] c"ms\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 84, [8 x i8] c"ms\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 85, [8 x i8] c"am\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 86, [8 x i8] c"ti\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 87, [8 x i8] c"om\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 88, [8 x i8] c"so\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 89, [8 x i8] c"sw\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 90, [8 x i8] c"rw\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 91, [8 x i8] c"rn\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 92, [8 x i8] c"ny\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 93, [8 x i8] c"mg\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 94, [8 x i8] c"eo\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 128, [8 x i8] c"cy\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 129, [8 x i8] c"eu\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 130, [8 x i8] c"ca\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 131, [8 x i8] c"la\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 132, [8 x i8] c"qu\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 133, [8 x i8] c"gn\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 134, [8 x i8] c"ay\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 135, [8 x i8] c"tt\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 136, [8 x i8] c"ug\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 137, [8 x i8] c"dz\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 138, [8 x i8] c"jw\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 139, [8 x i8] c"su\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 140, [8 x i8] c"gl\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 141, [8 x i8] c"af\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 142, [8 x i8] c"br\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 143, [8 x i8] c"iu\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 144, [8 x i8] c"gd\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 145, [8 x i8] c"gv\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 146, [8 x i8] c"ga\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 147, [8 x i8] c"to\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 148, [8 x i8] c"el\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 149, [8 x i8] c"ik\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 1, i16 150, [8 x i8] c"az\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1025, [8 x i8] c"ar\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2049, [8 x i8] c"ar\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 3073, [8 x i8] c"ar\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 4097, [8 x i8] c"ar\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 5121, [8 x i8] c"ar\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 6145, [8 x i8] c"ar\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 7169, [8 x i8] c"ar\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 8193, [8 x i8] c"ar\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 9217, [8 x i8] c"ar\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 10241, [8 x i8] c"ar\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 11265, [8 x i8] c"ar\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 12289, [8 x i8] c"ar\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 13313, [8 x i8] c"ar\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 14337, [8 x i8] c"ar\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 15361, [8 x i8] c"ar\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 16385, [8 x i8] c"ar\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1026, [8 x i8] c"bg\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1027, [8 x i8] c"ca\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1028, [8 x i8] c"zh-tw\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2052, [8 x i8] c"zh-cn\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 3076, [8 x i8] c"zh-hk\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 4100, [8 x i8] c"zh-sg\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 5124, [8 x i8] c"zh-mo\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1029, [8 x i8] c"cs\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1030, [8 x i8] c"da\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1031, [8 x i8] c"de\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2055, [8 x i8] c"de\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 3079, [8 x i8] c"de\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 4103, [8 x i8] c"de\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 5127, [8 x i8] c"de\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1032, [8 x i8] c"el\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1033, [8 x i8] c"en\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2057, [8 x i8] c"en\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 3081, [8 x i8] c"en\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 4105, [8 x i8] c"en\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 5129, [8 x i8] c"en\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 6153, [8 x i8] c"en\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 7177, [8 x i8] c"en\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 8201, [8 x i8] c"en\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 9225, [8 x i8] c"en\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 10249, [8 x i8] c"en\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 11273, [8 x i8] c"en\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 12297, [8 x i8] c"en\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 13321, [8 x i8] c"en\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1034, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2058, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 3082, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 4106, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 5130, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 6154, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 7178, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 8202, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 9226, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 10250, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 11274, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 12298, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 13322, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 14346, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 15370, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 16394, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 17418, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 18442, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 19466, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 20490, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1035, [8 x i8] c"fi\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1036, [8 x i8] c"fr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2060, [8 x i8] c"fr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 3084, [8 x i8] c"fr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 4108, [8 x i8] c"fr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 5132, [8 x i8] c"fr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 6156, [8 x i8] c"fr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1037, [8 x i8] c"he\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1038, [8 x i8] c"hu\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1039, [8 x i8] c"is\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1040, [8 x i8] c"it\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2064, [8 x i8] c"it\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1041, [8 x i8] c"ja\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1042, [8 x i8] c"ko\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2066, [8 x i8] c"ko\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1043, [8 x i8] c"nl\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2067, [8 x i8] c"nl\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1044, [8 x i8] c"no\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2068, [8 x i8] c"nn\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1045, [8 x i8] c"pl\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1046, [8 x i8] c"pt\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2070, [8 x i8] c"pt\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1047, [8 x i8] c"rm\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1048, [8 x i8] c"ro\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2072, [8 x i8] c"mo\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1049, [8 x i8] c"ru\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2073, [8 x i8] c"ru\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1050, [8 x i8] c"hr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2074, [8 x i8] c"sr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 3098, [8 x i8] c"sr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1051, [8 x i8] c"sk\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1052, [8 x i8] c"sq\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1053, [8 x i8] c"sv\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2077, [8 x i8] c"sv\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1054, [8 x i8] c"th\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1055, [8 x i8] c"tr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1056, [8 x i8] c"ur\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1057, [8 x i8] c"id\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1058, [8 x i8] c"uk\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1059, [8 x i8] c"be\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1060, [8 x i8] c"sl\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1061, [8 x i8] c"et\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1062, [8 x i8] c"lv\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1063, [8 x i8] c"lt\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2087, [8 x i8] c"lt\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1153, [8 x i8] c"mi\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1065, [8 x i8] c"fa\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1066, [8 x i8] c"vi\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1067, [8 x i8] c"hy\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1068, [8 x i8] c"az\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2092, [8 x i8] c"az\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1069, [8 x i8] c"eu\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1070, [8 x i8] c"wen\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1071, [8 x i8] c"mk\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1072, [8 x i8] c"st\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1073, [8 x i8] c"ts\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1074, [8 x i8] c"tn\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1075, [8 x i8] c"ven\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1076, [8 x i8] c"xh\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1077, [8 x i8] c"zu\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1078, [8 x i8] c"af\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1079, [8 x i8] c"ka\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1080, [8 x i8] c"fo\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1081, [8 x i8] c"hi\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1082, [8 x i8] c"mt\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1083, [8 x i8] c"se\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2108, [8 x i8] c"gd\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1084, [8 x i8] c"ga\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1086, [8 x i8] c"ms\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2110, [8 x i8] c"ms\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1087, [8 x i8] c"kk\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1089, [8 x i8] c"sw\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1091, [8 x i8] c"uz\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2115, [8 x i8] c"uz\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1092, [8 x i8] c"tt\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1093, [8 x i8] c"bn\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1094, [8 x i8] c"pa\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1095, [8 x i8] c"gu\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1096, [8 x i8] c"or\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1097, [8 x i8] c"ta\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1098, [8 x i8] c"te\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1099, [8 x i8] c"kn\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1100, [8 x i8] c"ml\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1101, [8 x i8] c"as\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1102, [8 x i8] c"mr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1103, [8 x i8] c"sa\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1111, [8 x i8] c"kok\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1, [8 x i8] c"ar\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 4, [8 x i8] c"zh\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 9, [8 x i8] c"en\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 7180, [8 x i8] c"fr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 8204, [8 x i8] c"fr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 9228, [8 x i8] c"fr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 10252, [8 x i8] c"fr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 11276, [8 x i8] c"fr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 12300, [8 x i8] c"fr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 13324, [8 x i8] c"fr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 5146, [8 x i8] c"bs\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2080, [8 x i8] c"ur\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1064, [8 x i8] c"tg\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1085, [8 x i8] c"yi\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1088, [8 x i8] c"ky\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1090, [8 x i8] c"tk\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1104, [8 x i8] c"mn\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2129, [8 x i8] c"bo\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1105, [8 x i8] c"bo\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2129, [8 x i8] c"dz\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1106, [8 x i8] c"cy\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1107, [8 x i8] c"km\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1108, [8 x i8] c"lo\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1109, [8 x i8] c"my\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1110, [8 x i8] c"gl\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1112, [8 x i8] c"mni\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1113, [8 x i8] c"sd\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1120, [8 x i8] c"ks\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2144, [8 x i8] c"ks\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1121, [8 x i8] c"ne\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2145, [8 x i8] c"ne\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1122, [8 x i8] c"fy\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 15369, [8 x i8] c"en\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 16393, [8 x i8] c"en\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 17417, [8 x i8] c"en\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 18441, [8 x i8] c"en\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1114, [8 x i8] c"syr\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1115, [8 x i8] c"si\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1116, [8 x i8] c"chr\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1117, [8 x i8] c"iu\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1118, [8 x i8] c"am\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1123, [8 x i8] c"ps\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1124, [8 x i8] c"phi\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1125, [8 x i8] c"div\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1138, [8 x i8] c"om\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1139, [8 x i8] c"ti\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2163, [8 x i8] c"ti\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 21514, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 -7158, [8 x i8] c"es\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 -7156, [8 x i8] c"fr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 14348, [8 x i8] c"fr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 15372, [8 x i8] c"fr\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2117, [8 x i8] c"bn\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2118, [8 x i8] c"ar\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 2128, [8 x i8] c"mn\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1128, [8 x i8] c"ha\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1130, [8 x i8] c"yo\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1136, [8 x i8] c"ibo\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1137, [8 x i8] c"kau\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1140, [8 x i8] c"gn\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1141, [8 x i8] c"haw\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1142, [8 x i8] c"la\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1143, [8 x i8] c"so\00\00\00\00\00\00" }, %struct.FcFtLanguage { i16 3, i16 1145, [8 x i8] c"pap\00\00\00\00\00" }], align 16
@.str.74 = private unnamed_addr constant [13 x i8] c"ttable:Silf \00", align 1
@.str.75 = private unnamed_addr constant [36 x i8] c"complex_ features in this font: %s\0A\00", align 1
@.str.77 = private unnamed_addr constant [10 x i8] c"otlayout:\00", align 1
@.str.78 = private unnamed_addr constant [5 x i8] c"thin\00", align 1
@.str.79 = private unnamed_addr constant [11 x i8] c"extralight\00", align 1
@.str.80 = private unnamed_addr constant [11 x i8] c"ultralight\00", align 1
@.str.81 = private unnamed_addr constant [10 x i8] c"demilight\00", align 1
@.str.82 = private unnamed_addr constant [10 x i8] c"semilight\00", align 1
@.str.83 = private unnamed_addr constant [6 x i8] c"light\00", align 1
@.str.84 = private unnamed_addr constant [5 x i8] c"book\00", align 1
@.str.85 = private unnamed_addr constant [8 x i8] c"regular\00", align 1
@.str.86 = private unnamed_addr constant [7 x i8] c"normal\00", align 1
@.str.87 = private unnamed_addr constant [7 x i8] c"medium\00", align 1
@.str.88 = private unnamed_addr constant [9 x i8] c"demibold\00", align 1
@.str.89 = private unnamed_addr constant [5 x i8] c"demi\00", align 1
@.str.90 = private unnamed_addr constant [9 x i8] c"semibold\00", align 1
@.str.91 = private unnamed_addr constant [10 x i8] c"extrabold\00", align 1
@.str.92 = private unnamed_addr constant [10 x i8] c"superbold\00", align 1
@.str.93 = private unnamed_addr constant [10 x i8] c"ultrabold\00", align 1
@.str.94 = private unnamed_addr constant [5 x i8] c"bold\00", align 1
@.str.95 = private unnamed_addr constant [11 x i8] c"ultrablack\00", align 1
@.str.96 = private unnamed_addr constant [11 x i8] c"superblack\00", align 1
@.str.97 = private unnamed_addr constant [11 x i8] c"extrablack\00", align 1
@.str.98 = private unnamed_addr constant [7 x i8] c"<ultra\00", align 1
@.str.99 = private unnamed_addr constant [6 x i8] c"black\00", align 1
@.str.100 = private unnamed_addr constant [6 x i8] c"heavy\00", align 1
@.str.101 = private unnamed_addr constant [15 x i8] c"ultracondensed\00", align 1
@.str.102 = private unnamed_addr constant [15 x i8] c"extracondensed\00", align 1
@.str.103 = private unnamed_addr constant [14 x i8] c"semicondensed\00", align 1
@.str.104 = private unnamed_addr constant [10 x i8] c"condensed\00", align 1
@.str.105 = private unnamed_addr constant [13 x i8] c"semiexpanded\00", align 1
@.str.106 = private unnamed_addr constant [14 x i8] c"extraexpanded\00", align 1
@.str.107 = private unnamed_addr constant [14 x i8] c"ultraexpanded\00", align 1
@.str.108 = private unnamed_addr constant [9 x i8] c"expanded\00", align 1
@.str.109 = private unnamed_addr constant [9 x i8] c"extended\00", align 1
@.str.110 = private unnamed_addr constant [7 x i8] c"italic\00", align 1
@.str.111 = private unnamed_addr constant [7 x i8] c"kursiv\00", align 1
@.str.112 = private unnamed_addr constant [8 x i8] c"oblique\00", align 1
@.str.113 = private unnamed_addr constant [7 x i8] c"shadow\00", align 1
@.str.114 = private unnamed_addr constant [5 x i8] c"caps\00", align 1
@.str.115 = private unnamed_addr constant [8 x i8] c"antiqua\00", align 1
@.str.116 = private unnamed_addr constant [8 x i8] c"romansc\00", align 1
@.str.117 = private unnamed_addr constant [8 x i8] c"embosed\00", align 1
@.str.118 = private unnamed_addr constant [8 x i8] c"dunhill\00", align 1
@switch.table.FcFreeTypeQueryFaceInternal.119 = private unnamed_addr constant [9 x double] [double 5.000000e+01, double 6.300000e+01, double 7.500000e+01, double 8.700000e+01, double 1.000000e+02, double 1.130000e+02, double 1.250000e+02, double 1.500000e+02, double 2.000000e+02], align 8

@FcFreeTypeQuery = hidden alias %struct._FcPattern* (i8*, i32, %struct._FcBlanks*, i32*), %struct._FcPattern* (i8*, i32, %struct._FcBlanks*, i32*)* @IA__FcFreeTypeQuery
@FcFreeTypeQueryAll = hidden alias i32 (i8*, i32, %struct._FcBlanks*, i32*, %struct._FcFontSet*), i32 (i8*, i32, %struct._FcBlanks*, i32*, %struct._FcFontSet*)* @IA__FcFreeTypeQueryAll
@FcFreeTypeCharIndex = hidden alias i32 (%struct.FT_FaceRec_*, i32), i32 (%struct.FT_FaceRec_*, i32)* @IA__FcFreeTypeCharIndex
@FcFreeTypeCharSetAndSpacing = hidden alias %struct._FcCharSet* (%struct.FT_FaceRec_*, %struct._FcBlanks*, i32*), %struct._FcCharSet* (%struct.FT_FaceRec_*, %struct._FcBlanks*, i32*)* @IA__FcFreeTypeCharSetAndSpacing
@FcFreeTypeCharSet = hidden alias %struct._FcCharSet* (%struct.FT_FaceRec_*, %struct._FcBlanks*), %struct._FcCharSet* (%struct.FT_FaceRec_*, %struct._FcBlanks*)* @IA__FcFreeTypeCharSet
@FcFreeTypeQueryFace = hidden alias %struct._FcPattern* (%struct.FT_FaceRec_*, i8*, i32, %struct._FcBlanks*), %struct._FcPattern* (%struct.FT_FaceRec_*, i8*, i32, %struct._FcBlanks*)* @IA__FcFreeTypeQueryFace

; Function Attrs: nounwind ssp uwtable
define hidden i32 @FcFreeTypeIsExclusiveLang(i8*) local_unnamed_addr #0 {
  %2 = tail call i32 @FcLangCompare(i8* %0, i8* getelementptr inbounds ([4 x %struct.anon], [4 x %struct.anon]* @FcCodePageRange, i64 0, i64 0, i32 1, i64 0)) #13
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %7, label %4

4:                                                ; preds = %1
  %5 = tail call i32 @FcLangCompare(i8* %0, i8* getelementptr inbounds ([4 x %struct.anon], [4 x %struct.anon]* @FcCodePageRange, i64 0, i64 1, i32 1, i64 0)) #13
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %7, label %8

7:                                                ; preds = %8, %4, %1
  ret i32 1

8:                                                ; preds = %4
  %9 = tail call i32 @FcLangCompare(i8* %0, i8* getelementptr inbounds ([4 x %struct.anon], [4 x %struct.anon]* @FcCodePageRange, i64 0, i64 2, i32 1, i64 0)) #13
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %7, label %11

11:                                               ; preds = %8
  %12 = tail call i32 @FcLangCompare(i8* %0, i8* getelementptr inbounds ([4 x %struct.anon], [4 x %struct.anon]* @FcCodePageRange, i64 0, i64 3, i32 1, i64 0)) #13
  %13 = icmp eq i32 %12, 0
  %14 = zext i1 %13 to i32
  ret i32 %14
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare hidden i32 @FcLangCompare(i8*, i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %struct._FcPattern* @IA__FcFreeTypeQueryFace(%struct.FT_FaceRec_*, i8*, i32, %struct._FcBlanks* nocapture readnone) #0 {
  %5 = tail call fastcc %struct._FcPattern* @FcFreeTypeQueryFaceInternal(%struct.FT_FaceRec_* %0, i8* %1, i32 %2, %struct._FcCharSet** null, %struct._FcLangSet** null, %struct.FcNameMapping** null)
  ret %struct._FcPattern* %5
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %struct._FcPattern* @FcFreeTypeQueryFaceInternal(%struct.FT_FaceRec_*, i8*, i32, %struct._FcCharSet**, %struct._FcLangSet**, %struct.FcNameMapping**) unnamed_addr #0 {
  %7 = alloca i64, align 8
  %8 = alloca i64*, align 8
  %9 = alloca i64*, align 8
  %10 = alloca %struct._FcPatternIter, align 8
  %11 = alloca %struct.BDF_PropertyRec_, align 8
  %12 = alloca %struct.FT_MM_Var_*, align 8
  %13 = alloca %struct.PS_FontInfoRec_, align 8
  %14 = alloca %struct.BDF_PropertyRec_, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i8*, align 8
  %22 = alloca %struct.FT_SfntName_, align 8
  %23 = alloca %struct.FT_SfntName_, align 8
  %24 = alloca i8*, align 8
  %25 = alloca i8*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca %struct._FcStrBuf, align 8
  %28 = alloca [256 x i8], align 16
  %29 = alloca i8*, align 8
  %30 = alloca i8*, align 8
  %31 = bitcast %struct.FT_MM_Var_** %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #13
  store %struct.FT_MM_Var_* null, %struct.FT_MM_Var_** %12, align 8
  %32 = bitcast %struct.PS_FontInfoRec_* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %32) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 -86, i64 56, i1 false)
  %33 = bitcast %struct.BDF_PropertyRec_* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %33) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %33, i8 -86, i64 16, i1 false)
  %34 = bitcast i32* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %34)
  store i32 0, i32* %15, align 4
  %35 = bitcast i32* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %35)
  store i32 0, i32* %16, align 4
  %36 = bitcast i32* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %36)
  store i32 0, i32* %17, align 4
  %37 = bitcast i32* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %37)
  store i32 0, i32* %18, align 4
  %38 = bitcast i32* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %38)
  store i32 0, i32* %19, align 4
  %39 = bitcast i32* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %39)
  store i32 0, i32* %20, align 4
  %40 = bitcast i8** %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #13
  store i8* null, i8** %21, align 8
  tail call void @FcInitDebug() #13
  %41 = tail call %struct._FcPattern* @IA__FcPatternCreate() #13
  %42 = icmp eq %struct._FcPattern* %41, null
  br i1 %42, label %1522, label %43

43:                                               ; preds = %6
  %44 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %0, i64 0, i32 2
  %45 = load i64, i64* %44, align 8
  %46 = and i64 %45, 1
  %47 = trunc i64 %46 to i32
  %48 = tail call i32 @FcPatternObjectAddBool(%struct._FcPattern* nonnull %41, i32 24, i32 %47) #13
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %1518, label %50

50:                                               ; preds = %43
  %51 = load i64, i64* %44, align 8
  %52 = and i64 %51, 16384
  %53 = lshr exact i64 %52, 14
  %54 = trunc i64 %53 to i32
  %55 = tail call i32 @FcPatternObjectAddBool(%struct._FcPattern* nonnull %41, i32 47, i32 %54) #13
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %1518, label %57

57:                                               ; preds = %50
  %58 = or i64 %52, %46
  %59 = icmp ne i64 %58, 0
  %60 = zext i1 %59 to i32
  %61 = tail call i32 @FcPatternObjectAddBool(%struct._FcPattern* nonnull %41, i32 25, i32 %60) #13
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %1518, label %63

63:                                               ; preds = %57
  %64 = lshr i32 %2, 16
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %194, label %66

66:                                               ; preds = %63
  %67 = call i32 @FT_Get_MM_Var(%struct.FT_FaceRec_* %0, %struct.FT_MM_Var_** nonnull %12) #13
  %68 = icmp eq i32 %67, 0
  br i1 %68, label %69, label %1518

69:                                               ; preds = %66
  %70 = icmp eq i32 %64, 32768
  br i1 %70, label %71, label %141

71:                                               ; preds = %69
  %72 = load %struct.FT_MM_Var_*, %struct.FT_MM_Var_** %12, align 8
  %73 = getelementptr inbounds %struct.FT_MM_Var_, %struct.FT_MM_Var_* %72, i64 0, i32 0
  %74 = load i32, i32* %73, align 8
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %1518, label %76

76:                                               ; preds = %71, %125
  %77 = phi %struct.FT_MM_Var_* [ %126, %125 ], [ %72, %71 ]
  %78 = phi i64 [ %133, %125 ], [ 0, %71 ]
  %79 = phi i32 [ %127, %125 ], [ 0, %71 ]
  %80 = phi i32 [ %128, %125 ], [ 0, %71 ]
  %81 = phi i32 [ %129, %125 ], [ 0, %71 ]
  %82 = phi i32 [ %130, %125 ], [ 0, %71 ]
  %83 = phi double [ %131, %125 ], [ -1.000000e+00, %71 ]
  %84 = phi double [ %132, %125 ], [ -1.000000e+00, %71 ]
  %85 = getelementptr inbounds %struct.FT_MM_Var_, %struct.FT_MM_Var_* %77, i64 0, i32 3
  %86 = load %struct.FT_Var_Axis_*, %struct.FT_Var_Axis_** %85, align 8
  %87 = getelementptr inbounds %struct.FT_Var_Axis_, %struct.FT_Var_Axis_* %86, i64 %78, i32 1
  %88 = load i64, i64* %87, align 8
  %89 = sitofp i64 %88 to double
  %90 = fmul double %89, 0x3EF0000000000000
  %91 = getelementptr inbounds %struct.FT_Var_Axis_, %struct.FT_Var_Axis_* %86, i64 %78, i32 2
  %92 = load i64, i64* %91, align 8
  %93 = sitofp i64 %92 to double
  %94 = fmul double %93, 0x3EF0000000000000
  %95 = getelementptr inbounds %struct.FT_Var_Axis_, %struct.FT_Var_Axis_* %86, i64 %78, i32 3
  %96 = load i64, i64* %95, align 8
  %97 = sitofp i64 %96 to double
  %98 = fmul double %97, 0x3EF0000000000000
  %99 = fcmp ogt double %90, %94
  %100 = fcmp ogt double %94, %98
  %101 = or i1 %99, %100
  %102 = fcmp oeq double %90, %98
  %103 = or i1 %102, %101
  br i1 %103, label %125, label %104

104:                                              ; preds = %76
  %105 = getelementptr inbounds %struct.FT_Var_Axis_, %struct.FT_Var_Axis_* %86, i64 %78, i32 4
  %106 = load i64, i64* %105, align 8
  switch i64 %106, label %125 [
    i64 2003265652, label %107
    i64 2003072104, label %111
    i64 1869640570, label %110
  ]

107:                                              ; preds = %104
  %108 = call double @IA__FcWeightFromOpenTypeDouble(double %90) #13
  %109 = call double @IA__FcWeightFromOpenTypeDouble(double %98) #13
  br label %111

110:                                              ; preds = %104
  br label %111

111:                                              ; preds = %104, %110, %107
  %112 = phi double [ 0.000000e+00, %107 ], [ %84, %110 ], [ %84, %104 ]
  %113 = phi double [ %83, %107 ], [ %83, %110 ], [ 0.000000e+00, %104 ]
  %114 = phi i32 [ 1, %107 ], [ %81, %110 ], [ %81, %104 ]
  %115 = phi i32 [ %80, %107 ], [ %80, %110 ], [ 1, %104 ]
  %116 = phi i32 [ %79, %107 ], [ 1, %110 ], [ %79, %104 ]
  %117 = phi double [ %108, %107 ], [ %90, %110 ], [ %90, %104 ]
  %118 = phi double [ %109, %107 ], [ %98, %110 ], [ %98, %104 ]
  %119 = phi i32 [ 8, %107 ], [ 10, %110 ], [ 9, %104 ]
  %120 = call %struct._FcRange* @IA__FcRangeCreateDouble(double %117, double %118) #13
  %121 = call i32 @FcPatternObjectAddRange(%struct._FcPattern* %41, i32 %119, %struct._FcRange* %120) #13
  %122 = icmp eq i32 %121, 0
  call void @IA__FcRangeDestroy(%struct._FcRange* %120) #13
  br i1 %122, label %1518, label %123

123:                                              ; preds = %111
  %124 = load %struct.FT_MM_Var_*, %struct.FT_MM_Var_** %12, align 8
  br label %125

125:                                              ; preds = %123, %104, %76
  %126 = phi %struct.FT_MM_Var_* [ %77, %76 ], [ %124, %123 ], [ %77, %104 ]
  %127 = phi i32 [ %79, %76 ], [ %116, %123 ], [ %79, %104 ]
  %128 = phi i32 [ %80, %76 ], [ %115, %123 ], [ %80, %104 ]
  %129 = phi i32 [ %81, %76 ], [ %114, %123 ], [ %81, %104 ]
  %130 = phi i32 [ %82, %76 ], [ 1, %123 ], [ %82, %104 ]
  %131 = phi double [ %83, %76 ], [ %113, %123 ], [ %83, %104 ]
  %132 = phi double [ %84, %76 ], [ %112, %123 ], [ %84, %104 ]
  %133 = add nuw nsw i64 %78, 1
  %134 = getelementptr inbounds %struct.FT_MM_Var_, %struct.FT_MM_Var_* %126, i64 0, i32 0
  %135 = load i32, i32* %134, align 8
  %136 = zext i32 %135 to i64
  %137 = icmp ult i64 %133, %136
  br i1 %137, label %76, label %138

138:                                              ; preds = %125
  %139 = icmp eq i32 %130, 0
  %140 = and i32 %2, 65535
  br i1 %139, label %1518, label %194

141:                                              ; preds = %69
  %142 = add nsw i32 %64, -1
  %143 = load %struct.FT_MM_Var_*, %struct.FT_MM_Var_** %12, align 8
  %144 = getelementptr inbounds %struct.FT_MM_Var_, %struct.FT_MM_Var_* %143, i64 0, i32 2
  %145 = load i32, i32* %144, align 8
  %146 = icmp ult i32 %142, %145
  br i1 %146, label %147, label %1518

147:                                              ; preds = %141
  %148 = getelementptr inbounds %struct.FT_MM_Var_, %struct.FT_MM_Var_* %143, i64 0, i32 4
  %149 = load %struct.FT_Var_Named_Style_*, %struct.FT_Var_Named_Style_** %148, align 8
  %150 = zext i32 %142 to i64
  %151 = getelementptr inbounds %struct.FT_Var_Named_Style_, %struct.FT_Var_Named_Style_* %149, i64 %150
  %152 = getelementptr inbounds %struct.FT_MM_Var_, %struct.FT_MM_Var_* %143, i64 0, i32 0
  %153 = load i32, i32* %152, align 8
  %154 = icmp eq i32 %153, 0
  br i1 %154, label %194, label %155

155:                                              ; preds = %147
  %156 = getelementptr inbounds %struct.FT_Var_Named_Style_, %struct.FT_Var_Named_Style_* %151, i64 0, i32 0
  br label %157

157:                                              ; preds = %155, %185
  %158 = phi %struct.FT_MM_Var_* [ %143, %155 ], [ %186, %185 ]
  %159 = phi i64 [ 0, %155 ], [ %189, %185 ]
  %160 = phi double [ 1.000000e+00, %155 ], [ %188, %185 ]
  %161 = phi double [ 1.000000e+00, %155 ], [ %187, %185 ]
  %162 = load i64*, i64** %156, align 8
  %163 = getelementptr inbounds i64, i64* %162, i64 %159
  %164 = load i64, i64* %163, align 8
  %165 = sitofp i64 %164 to double
  %166 = fmul double %165, 0x3EF0000000000000
  %167 = getelementptr inbounds %struct.FT_MM_Var_, %struct.FT_MM_Var_* %158, i64 0, i32 3
  %168 = load %struct.FT_Var_Axis_*, %struct.FT_Var_Axis_** %167, align 8
  %169 = getelementptr inbounds %struct.FT_Var_Axis_, %struct.FT_Var_Axis_* %168, i64 %159, i32 2
  %170 = load i64, i64* %169, align 8
  %171 = sitofp i64 %170 to double
  %172 = fmul double %171, 0x3EF0000000000000
  %173 = fcmp une double %172, 0.000000e+00
  %174 = fdiv double %166, %172
  %175 = select i1 %173, double %174, double 1.000000e+00
  %176 = getelementptr inbounds %struct.FT_Var_Axis_, %struct.FT_Var_Axis_* %168, i64 %159, i32 4
  %177 = load i64, i64* %176, align 8
  switch i64 %177, label %185 [
    i64 2003265652, label %178
    i64 2003072104, label %179
    i64 1869640570, label %180
  ]

178:                                              ; preds = %157
  br label %185

179:                                              ; preds = %157
  br label %185

180:                                              ; preds = %157
  %181 = call i32 @FcPatternObjectAddDouble(%struct._FcPattern* %41, i32 10, double %166) #13
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %1518, label %183

183:                                              ; preds = %180
  %184 = load %struct.FT_MM_Var_*, %struct.FT_MM_Var_** %12, align 8
  br label %185

185:                                              ; preds = %183, %178, %179, %157
  %186 = phi %struct.FT_MM_Var_* [ %158, %157 ], [ %184, %183 ], [ %158, %179 ], [ %158, %178 ]
  %187 = phi double [ %161, %157 ], [ %161, %183 ], [ %161, %179 ], [ %175, %178 ]
  %188 = phi double [ %160, %157 ], [ %160, %183 ], [ %175, %179 ], [ %160, %178 ]
  %189 = add nuw nsw i64 %159, 1
  %190 = getelementptr inbounds %struct.FT_MM_Var_, %struct.FT_MM_Var_* %186, i64 0, i32 0
  %191 = load i32, i32* %190, align 8
  %192 = zext i32 %191 to i64
  %193 = icmp ult i64 %189, %192
  br i1 %193, label %157, label %194

194:                                              ; preds = %185, %147, %138, %63
  %195 = phi double [ -1.000000e+00, %63 ], [ %132, %138 ], [ -1.000000e+00, %147 ], [ -1.000000e+00, %185 ]
  %196 = phi double [ -1.000000e+00, %63 ], [ %131, %138 ], [ -1.000000e+00, %147 ], [ -1.000000e+00, %185 ]
  %197 = phi i32 [ 0, %63 ], [ %130, %138 ], [ 0, %147 ], [ 0, %185 ]
  %198 = phi i32 [ 0, %63 ], [ %129, %138 ], [ 0, %147 ], [ 0, %185 ]
  %199 = phi i32 [ 0, %63 ], [ %128, %138 ], [ 0, %147 ], [ 0, %185 ]
  %200 = phi i32 [ 0, %63 ], [ %127, %138 ], [ 0, %147 ], [ 0, %185 ]
  %201 = phi %struct.FT_Var_Named_Style_* [ null, %63 ], [ null, %138 ], [ %151, %147 ], [ %151, %185 ]
  %202 = phi double [ 1.000000e+00, %63 ], [ 1.000000e+00, %138 ], [ 1.000000e+00, %147 ], [ %187, %185 ]
  %203 = phi double [ 1.000000e+00, %63 ], [ 1.000000e+00, %138 ], [ 1.000000e+00, %147 ], [ %188, %185 ]
  %204 = phi i32 [ %2, %63 ], [ %140, %138 ], [ %2, %147 ], [ %2, %185 ]
  %205 = call i32 @FcPatternObjectAddBool(%struct._FcPattern* %41, i32 50, i32 %197) #13
  %206 = icmp eq i32 %205, 0
  br i1 %206, label %1518, label %207

207:                                              ; preds = %194
  %208 = call i8* @FT_Get_Sfnt_Table(%struct.FT_FaceRec_* %0, i32 2) #13
  %209 = icmp ne i8* %208, null
  br i1 %209, label %210, label %225

210:                                              ; preds = %207
  %211 = bitcast i8* %208 to i16*
  %212 = load i16, i16* %211, align 8
  switch i16 %212, label %213 [
    i16 0, label %225
    i16 -1, label %225
  ]

213:                                              ; preds = %210
  %214 = getelementptr inbounds i8, i8* %208, i64 80
  %215 = icmp eq i8* %214, null
  br i1 %215, label %225, label %216

216:                                              ; preds = %213
  %217 = load i8, i8* %214, align 8
  %218 = icmp eq i8 %217, 0
  br i1 %218, label %225, label %219

219:                                              ; preds = %216
  %220 = call noalias i8* @malloc(i64 5) #13
  %221 = bitcast i8* %214 to i32*
  %222 = bitcast i8* %220 to i32*
  %223 = load i32, i32* %221, align 8
  store i32 %223, i32* %222, align 1
  %224 = getelementptr inbounds i8, i8* %220, i64 4
  store i8 0, i8* %224, align 1
  br label %225

225:                                              ; preds = %210, %210, %216, %213, %219, %207
  %226 = phi i8* [ %220, %219 ], [ null, %216 ], [ null, %213 ], [ null, %210 ], [ null, %207 ], [ null, %210 ]
  %227 = load i32, i32* @FcDebugVal, align 4
  %228 = and i32 %227, 256
  %229 = icmp eq i32 %228, 0
  br i1 %229, label %232, label %230

230:                                              ; preds = %225
  %231 = call i32 @putchar(i32 10)
  br label %232

232:                                              ; preds = %225, %230
  %233 = call i32 @FT_Get_Sfnt_Name_Count(%struct.FT_FaceRec_* %0) #13
  %234 = icmp ne %struct.FcNameMapping** %5, null
  br i1 %234, label %235, label %241

235:                                              ; preds = %232
  %236 = load %struct.FcNameMapping*, %struct.FcNameMapping** %5, align 8
  %237 = icmp eq %struct.FcNameMapping* %236, null
  br i1 %237, label %241, label %238

238:                                              ; preds = %235
  %239 = bitcast %struct.FcNameMapping* %236 to i8*
  %240 = sext i32 %233 to i64
  br label %274

241:                                              ; preds = %232, %235
  %242 = sext i32 %233 to i64
  %243 = mul nsw i64 %242, 20
  %244 = call noalias i8* @malloc(i64 %243) #13
  %245 = bitcast i8* %244 to %struct.FcNameMapping*
  %246 = icmp eq i8* %244, null
  %247 = select i1 %246, i32 0, i32 %233
  %248 = icmp sgt i32 %247, 0
  br i1 %248, label %249, label %270

249:                                              ; preds = %241
  %250 = bitcast %struct.FT_SfntName_* %22 to i8*
  %251 = zext i32 %247 to i64
  %252 = bitcast %struct.FT_SfntName_* %22 to <4 x i16>*
  br label %253

253:                                              ; preds = %262, %249
  %254 = phi i64 [ 0, %249 ], [ %268, %262 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %250) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %250, i8 -86, i64 24, i1 false)
  %255 = trunc i64 %254 to i32
  %256 = call i32 @FT_Get_Sfnt_Name(%struct.FT_FaceRec_* %0, i32 %255, %struct.FT_SfntName_* nonnull %22) #13
  %257 = icmp eq i32 %256, 0
  br i1 %257, label %258, label %262

258:                                              ; preds = %253
  %259 = load <4 x i16>, <4 x i16>* %252, align 8
  %260 = shufflevector <4 x i16> %259, <4 x i16> undef, <4 x i32> <i32 0, i32 3, i32 1, i32 2>
  %261 = zext <4 x i16> %260 to <4 x i32>
  br label %262

262:                                              ; preds = %253, %258
  %263 = phi i32 [ %255, %258 ], [ -1, %253 ]
  %264 = phi <4 x i32> [ %261, %258 ], [ <i32 -1, i32 -1, i32 -1, i32 -1>, %253 ]
  %265 = getelementptr inbounds %struct.FcNameMapping, %struct.FcNameMapping* %245, i64 %254, i32 4
  store i32 %263, i32* %265, align 4
  %266 = getelementptr inbounds %struct.FcNameMapping, %struct.FcNameMapping* %245, i64 %254, i32 0
  %267 = bitcast i32* %266 to <4 x i32>*
  store <4 x i32> %264, <4 x i32>* %267, align 4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %250) #13
  %268 = add nuw nsw i64 %254, 1
  %269 = icmp eq i64 %268, %251
  br i1 %269, label %270, label %253

270:                                              ; preds = %262, %241
  %271 = sext i32 %247 to i64
  call void @qsort(i8* %244, i64 %271, i64 20, i32 (i8*, i8*)* nonnull @name_mapping_cmp) #13
  br i1 %234, label %272, label %274

272:                                              ; preds = %270
  %273 = bitcast %struct.FcNameMapping** %5 to i8**
  store i8* %244, i8** %273, align 8
  br label %274

274:                                              ; preds = %238, %270, %272
  %275 = phi i64 [ %240, %238 ], [ %271, %270 ], [ %271, %272 ]
  %276 = phi i8* [ %239, %238 ], [ %244, %270 ], [ %244, %272 ]
  %277 = phi %struct.FcNameMapping* [ %236, %238 ], [ %245, %270 ], [ %245, %272 ]
  %278 = phi i32 [ %233, %238 ], [ %247, %270 ], [ %247, %272 ]
  %279 = bitcast %struct.FT_SfntName_* %23 to i8*
  %280 = icmp eq %struct.FT_Var_Named_Style_* %201, null
  %281 = getelementptr inbounds %struct.FT_Var_Named_Style_, %struct.FT_Var_Named_Style_* %201, i64 0, i32 1
  %282 = getelementptr inbounds %struct.FT_SfntName_, %struct.FT_SfntName_* %23, i64 0, i32 3
  %283 = icmp slt i32 %278, 1
  %284 = add nsw i32 %278, -1
  %285 = getelementptr inbounds %struct.FT_SfntName_, %struct.FT_SfntName_* %23, i64 0, i32 0
  %286 = icmp eq i32 %197, 0
  %287 = getelementptr inbounds %struct.FT_SfntName_, %struct.FT_SfntName_* %23, i64 0, i32 1
  %288 = getelementptr inbounds %struct.FT_SfntName_, %struct.FT_SfntName_* %23, i64 0, i32 2
  %289 = getelementptr inbounds %struct.FT_SfntName_, %struct.FT_SfntName_* %23, i64 0, i32 5
  %290 = getelementptr inbounds %struct.FT_SfntName_, %struct.FT_SfntName_* %23, i64 0, i32 4
  %291 = bitcast %struct._FcPatternIter* %10 to i8*
  br label %292

292:                                              ; preds = %647, %274
  %293 = phi i64 [ 0, %274 ], [ %648, %647 ]
  %294 = phi i8* [ %226, %274 ], [ %643, %647 ]
  %295 = getelementptr inbounds [4 x i16], [4 x i16]* @platform_order, i64 0, i64 %293
  %296 = load i16, i16* %295, align 2
  %297 = zext i16 %296 to i32
  br label %298

298:                                              ; preds = %642, %292
  %299 = phi i64 [ 0, %292 ], [ %644, %642 ]
  %300 = phi i8* [ %294, %292 ], [ %643, %642 ]
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %279) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %279, i8 -86, i64 24, i1 false)
  %301 = getelementptr inbounds [10 x i16], [10 x i16]* @nameid_order, i64 0, i64 %299
  %302 = load i16, i16* %301, align 2
  %303 = zext i16 %302 to i32
  br i1 %280, label %308, label %304

304:                                              ; preds = %298
  %305 = trunc i64 %299 to i32
  switch i32 %305, label %308 [
    i32 6, label %642
    i32 5, label %642
    i32 4, label %642
    i32 7, label %306
  ]

306:                                              ; preds = %304
  %307 = load i32, i32* %281, align 8
  br label %308

308:                                              ; preds = %304, %298, %306
  %309 = phi i32 [ %307, %306 ], [ %303, %298 ], [ %303, %304 ]
  br i1 %283, label %642, label %310

310:                                              ; preds = %308, %355
  %311 = phi i32 [ %357, %355 ], [ %284, %308 ]
  %312 = phi i32 [ %356, %355 ], [ 0, %308 ]
  %313 = add nsw i32 %312, %311
  %314 = sdiv i32 %313, 2
  %315 = sext i32 %314 to i64
  %316 = getelementptr inbounds %struct.FcNameMapping, %struct.FcNameMapping* %277, i64 %315, i32 4
  %317 = load i32, i32* %316, align 4
  %318 = call i32 @FT_Get_Sfnt_Name(%struct.FT_FaceRec_* %0, i32 %317, %struct.FT_SfntName_* nonnull %23) #13
  %319 = icmp eq i32 %318, 0
  br i1 %319, label %320, label %362

320:                                              ; preds = %310
  %321 = load i16, i16* %285, align 8
  %322 = icmp ugt i16 %321, %296
  br i1 %322, label %344, label %323

323:                                              ; preds = %320
  %324 = icmp eq i16 %321, %296
  br i1 %324, label %325, label %346

325:                                              ; preds = %323
  %326 = load i16, i16* %282, align 2
  %327 = zext i16 %326 to i32
  %328 = icmp ult i32 %309, %327
  br i1 %328, label %344, label %329

329:                                              ; preds = %325
  %330 = icmp eq i32 %309, %327
  %331 = add i32 %313, 1
  %332 = icmp ugt i32 %331, 2
  %333 = and i1 %332, %330
  br i1 %333, label %334, label %346

334:                                              ; preds = %329
  %335 = add nsw i32 %314, -1
  %336 = sext i32 %335 to i64
  %337 = getelementptr inbounds %struct.FcNameMapping, %struct.FcNameMapping* %277, i64 %336, i32 0
  %338 = load i32, i32* %337, align 4
  %339 = icmp eq i32 %338, %297
  br i1 %339, label %340, label %346

340:                                              ; preds = %334
  %341 = getelementptr inbounds %struct.FcNameMapping, %struct.FcNameMapping* %277, i64 %336, i32 1
  %342 = load i32, i32* %341, align 4
  %343 = icmp eq i32 %342, %309
  br i1 %343, label %344, label %346

344:                                              ; preds = %340, %325, %320
  %345 = add nsw i32 %314, -1
  br label %355

346:                                              ; preds = %340, %334, %329, %323
  %347 = icmp ult i16 %321, %296
  br i1 %347, label %353, label %348

348:                                              ; preds = %346
  br i1 %324, label %349, label %359

349:                                              ; preds = %348
  %350 = load i16, i16* %282, align 2
  %351 = zext i16 %350 to i32
  %352 = icmp ugt i32 %309, %351
  br i1 %352, label %353, label %359

353:                                              ; preds = %349, %346
  %354 = add nsw i32 %314, 1
  br label %355

355:                                              ; preds = %353, %344
  %356 = phi i32 [ %312, %344 ], [ %354, %353 ]
  %357 = phi i32 [ %345, %344 ], [ %311, %353 ]
  %358 = icmp sgt i32 %356, %357
  br i1 %358, label %642, label %310

359:                                              ; preds = %348, %349
  %360 = add i32 %313, 3
  %361 = icmp ult i32 %360, 2
  br i1 %361, label %642, label %362

362:                                              ; preds = %310, %359
  %363 = phi i32 [ %314, %359 ], [ 0, %310 ]
  %364 = sext i32 %363 to i64
  br label %365

365:                                              ; preds = %362, %638
  %366 = phi i64 [ %364, %362 ], [ %628, %638 ]
  %367 = phi i8* [ %300, %362 ], [ %627, %638 ]
  %368 = phi i32* [ null, %362 ], [ %626, %638 ]
  %369 = phi i32* [ null, %362 ], [ %625, %638 ]
  %370 = phi i32 [ 0, %362 ], [ %624, %638 ]
  %371 = phi i32 [ 0, %362 ], [ %623, %638 ]
  switch i16 %302, label %421 [
    i16 21, label %372
    i16 16, label %372
    i16 1, label %372
    i16 18, label %386
    i16 4, label %386
    i16 22, label %401
    i16 17, label %401
    i16 2, label %401
    i16 7, label %416
    i16 8, label %416
  ]

372:                                              ; preds = %365, %365, %365
  %373 = load i32, i32* @FcDebugVal, align 4
  %374 = and i32 %373, 256
  %375 = icmp eq i32 %374, 0
  br i1 %375, label %424, label %376

376:                                              ; preds = %372
  %377 = load i16, i16* %282, align 2
  %378 = zext i16 %377 to i32
  %379 = load i16, i16* %285, align 8
  %380 = zext i16 %379 to i32
  %381 = load i16, i16* %287, align 2
  %382 = zext i16 %381 to i32
  %383 = load i16, i16* %288, align 4
  %384 = zext i16 %383 to i32
  %385 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2, i64 0, i64 0), i32 %378, i32 %380, i32 %382, i32 %384)
  br label %424

386:                                              ; preds = %365, %365
  br i1 %286, label %387, label %421

387:                                              ; preds = %386
  %388 = load i32, i32* @FcDebugVal, align 4
  %389 = and i32 %388, 256
  %390 = icmp eq i32 %389, 0
  br i1 %390, label %424, label %391

391:                                              ; preds = %387
  %392 = load i16, i16* %282, align 2
  %393 = zext i16 %392 to i32
  %394 = load i16, i16* %285, align 8
  %395 = zext i16 %394 to i32
  %396 = load i16, i16* %287, align 2
  %397 = zext i16 %396 to i32
  %398 = load i16, i16* %288, align 4
  %399 = zext i16 %398 to i32
  %400 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.3, i64 0, i64 0), i32 %393, i32 %395, i32 %397, i32 %399)
  br label %424

401:                                              ; preds = %365, %365, %365
  br i1 %286, label %402, label %421

402:                                              ; preds = %401
  %403 = load i32, i32* @FcDebugVal, align 4
  %404 = and i32 %403, 256
  %405 = icmp eq i32 %404, 0
  br i1 %405, label %424, label %406

406:                                              ; preds = %402
  %407 = load i16, i16* %282, align 2
  %408 = zext i16 %407 to i32
  %409 = load i16, i16* %285, align 8
  %410 = zext i16 %409 to i32
  %411 = load i16, i16* %287, align 2
  %412 = zext i16 %411 to i32
  %413 = load i16, i16* %288, align 4
  %414 = zext i16 %413 to i32
  %415 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.4, i64 0, i64 0), i32 %408, i32 %410, i32 %412, i32 %414)
  br label %424

416:                                              ; preds = %365, %365
  %417 = icmp eq i8* %367, null
  br i1 %417, label %418, label %421

418:                                              ; preds = %416
  %419 = call fastcc i8* @FcSfntNameTranscode(%struct.FT_SfntName_* nonnull %23)
  %420 = call fastcc i8* @FcNoticeFoundry(i8* %419)
  call void @free(i8* %419) #13
  br label %421

421:                                              ; preds = %386, %401, %416, %418, %365
  %422 = phi i8* [ %367, %365 ], [ %367, %416 ], [ %420, %418 ], [ %367, %401 ], [ %367, %386 ]
  %423 = icmp eq i32 %370, 0
  br i1 %423, label %622, label %424

424:                                              ; preds = %406, %402, %391, %387, %376, %372, %421
  %425 = phi i32 [ %371, %421 ], [ 4, %406 ], [ 4, %402 ], [ 6, %391 ], [ 6, %387 ], [ 2, %376 ], [ 2, %372 ]
  %426 = phi i32 [ %370, %421 ], [ 3, %406 ], [ 3, %402 ], [ 5, %391 ], [ 5, %387 ], [ 1, %376 ], [ 1, %372 ]
  %427 = phi i32* [ %369, %421 ], [ %18, %406 ], [ %18, %402 ], [ %20, %391 ], [ %20, %387 ], [ %16, %376 ], [ %16, %372 ]
  %428 = phi i32* [ %368, %421 ], [ %17, %406 ], [ %17, %402 ], [ %19, %391 ], [ %19, %387 ], [ %15, %376 ], [ %15, %372 ]
  %429 = phi i8* [ %422, %421 ], [ %367, %406 ], [ %367, %402 ], [ %367, %391 ], [ %367, %387 ], [ %367, %376 ], [ %367, %372 ]
  %430 = call fastcc i8* @FcSfntNameTranscode(%struct.FT_SfntName_* nonnull %23)
  %431 = load i16, i16* %285, align 8
  %432 = load i16, i16* %288, align 4
  %433 = icmp eq i16 %431, 1
  %434 = load i16, i16* %287, align 2
  %435 = icmp eq i16 %434, 0
  %436 = and i1 %433, %435
  br i1 %436, label %437, label %520

437:                                              ; preds = %424
  %438 = load i32, i32* %289, align 8
  %439 = icmp sgt i32 %438, 0
  br i1 %439, label %440, label %515

440:                                              ; preds = %437
  %441 = load i8*, i8** %290, align 8
  %442 = add nsw i32 %438, -1
  %443 = zext i32 %442 to i64
  %444 = add nuw nsw i64 %443, 1
  %445 = icmp ult i64 %444, 8
  br i1 %445, label %491, label %446

446:                                              ; preds = %440
  %447 = and i64 %444, 8589934584
  %448 = trunc i64 %447 to i32
  %449 = sub i32 %438, %448
  %450 = getelementptr i8, i8* %441, i64 %447
  br label %451

451:                                              ; preds = %451, %446
  %452 = phi i64 [ 0, %446 ], [ %475, %451 ]
  %453 = phi <4 x i32> [ zeroinitializer, %446 ], [ %473, %451 ]
  %454 = phi <4 x i32> [ zeroinitializer, %446 ], [ %474, %451 ]
  %455 = phi <4 x i32> [ zeroinitializer, %446 ], [ %467, %451 ]
  %456 = phi <4 x i32> [ zeroinitializer, %446 ], [ %468, %451 ]
  %457 = getelementptr i8, i8* %441, i64 %452
  %458 = bitcast i8* %457 to <4 x i8>*
  %459 = load <4 x i8>, <4 x i8>* %458, align 1
  %460 = getelementptr i8, i8* %457, i64 4
  %461 = bitcast i8* %460 to <4 x i8>*
  %462 = load <4 x i8>, <4 x i8>* %461, align 1
  %463 = lshr <4 x i8> %459, <i8 7, i8 7, i8 7, i8 7>
  %464 = lshr <4 x i8> %462, <i8 7, i8 7, i8 7, i8 7>
  %465 = zext <4 x i8> %463 to <4 x i32>
  %466 = zext <4 x i8> %464 to <4 x i32>
  %467 = add nuw nsw <4 x i32> %455, %465
  %468 = add nuw nsw <4 x i32> %456, %466
  %469 = xor <4 x i8> %463, <i8 1, i8 1, i8 1, i8 1>
  %470 = xor <4 x i8> %464, <i8 1, i8 1, i8 1, i8 1>
  %471 = zext <4 x i8> %469 to <4 x i32>
  %472 = zext <4 x i8> %470 to <4 x i32>
  %473 = add nuw nsw <4 x i32> %453, %471
  %474 = add nuw nsw <4 x i32> %454, %472
  %475 = add i64 %452, 8
  %476 = icmp eq i64 %475, %447
  br i1 %476, label %477, label %451, !llvm.loop !2

477:                                              ; preds = %451
  %478 = add nuw <4 x i32> %468, %467
  %479 = shufflevector <4 x i32> %478, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %480 = add <4 x i32> %478, %479
  %481 = shufflevector <4 x i32> %480, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %482 = add <4 x i32> %480, %481
  %483 = extractelement <4 x i32> %482, i32 0
  %484 = add nuw <4 x i32> %474, %473
  %485 = shufflevector <4 x i32> %484, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %486 = add <4 x i32> %484, %485
  %487 = shufflevector <4 x i32> %486, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %488 = add <4 x i32> %486, %487
  %489 = extractelement <4 x i32> %488, i32 0
  %490 = icmp eq i64 %444, %447
  br i1 %490, label %511, label %491

491:                                              ; preds = %477, %440
  %492 = phi i32 [ 0, %440 ], [ %489, %477 ]
  %493 = phi i32 [ 0, %440 ], [ %483, %477 ]
  %494 = phi i32 [ %438, %440 ], [ %449, %477 ]
  %495 = phi i8* [ %441, %440 ], [ %450, %477 ]
  br label %496

496:                                              ; preds = %491, %496
  %497 = phi i32 [ %509, %496 ], [ %492, %491 ]
  %498 = phi i32 [ %506, %496 ], [ %493, %491 ]
  %499 = phi i32 [ %501, %496 ], [ %494, %491 ]
  %500 = phi i8* [ %502, %496 ], [ %495, %491 ]
  %501 = add nsw i32 %499, -1
  %502 = getelementptr inbounds i8, i8* %500, i64 1
  %503 = load i8, i8* %500, align 1
  %504 = lshr i8 %503, 7
  %505 = zext i8 %504 to i32
  %506 = add nuw nsw i32 %498, %505
  %507 = xor i8 %504, 1
  %508 = zext i8 %507 to i32
  %509 = add nuw nsw i32 %497, %508
  %510 = icmp sgt i32 %501, 0
  br i1 %510, label %496, label %511, !llvm.loop !4

511:                                              ; preds = %496, %477
  %512 = phi i32 [ %483, %477 ], [ %506, %496 ]
  %513 = phi i32 [ %489, %477 ], [ %509, %496 ]
  %514 = shl nuw i32 %512, 1
  br label %515

515:                                              ; preds = %511, %437
  %516 = phi i32 [ 0, %437 ], [ %514, %511 ]
  %517 = phi i32 [ 0, %437 ], [ %513, %511 ]
  %518 = icmp sgt i32 %516, %517
  %519 = select i1 %518, i16 11, i16 %432
  br label %520

520:                                              ; preds = %515, %424
  %521 = phi i16 [ %432, %424 ], [ %519, %515 ]
  br label %522

522:                                              ; preds = %1589, %520
  %523 = phi i64 [ 0, %520 ], [ %1590, %1589 ]
  %524 = getelementptr inbounds [335 x %struct.FcFtLanguage], [335 x %struct.FcFtLanguage]* @fcFtLanguage, i64 0, i64 %523, i32 0
  %525 = load i16, i16* %524, align 8
  %526 = icmp eq i16 %525, %431
  br i1 %526, label %527, label %537

527:                                              ; preds = %522
  %528 = icmp eq i64 %523, 0
  br i1 %528, label %540, label %529

529:                                              ; preds = %527
  %530 = getelementptr inbounds [335 x %struct.FcFtLanguage], [335 x %struct.FcFtLanguage]* @fcFtLanguage, i64 0, i64 %523, i32 1
  %531 = load i16, i16* %530, align 2
  %532 = icmp eq i16 %531, %521
  br i1 %532, label %533, label %537

533:                                              ; preds = %1585, %529
  %534 = phi i64 [ %523, %529 ], [ %538, %1585 ]
  %535 = and i64 %534, 4294967295
  %536 = getelementptr inbounds [335 x %struct.FcFtLanguage], [335 x %struct.FcFtLanguage]* @fcFtLanguage, i64 0, i64 %535, i32 2, i64 0
  br label %540

537:                                              ; preds = %529, %522
  %538 = or i64 %523, 1
  %539 = icmp eq i64 %538, 335
  br i1 %539, label %540, label %1581

540:                                              ; preds = %527, %537, %533
  %541 = phi i8* [ %536, %533 ], [ null, %537 ], [ null, %527 ]
  %542 = load i32, i32* @FcDebugVal, align 4
  %543 = and i32 %542, 256
  %544 = icmp eq i32 %543, 0
  br i1 %544, label %549, label %545

545:                                              ; preds = %540
  %546 = icmp eq i8* %430, null
  %547 = select i1 %546, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0), i8* %430
  %548 = call i32 @puts(i8* %547)
  br label %549

549:                                              ; preds = %540, %545
  %550 = icmp eq i8* %430, null
  br i1 %550, label %622, label %551

551:                                              ; preds = %549, %551
  %552 = phi i8* [ %555, %551 ], [ %430, %549 ]
  %553 = load i8, i8* %552, align 1
  %554 = icmp eq i8 %553, 32
  %555 = getelementptr inbounds i8, i8* %552, i64 1
  br i1 %554, label %551, label %556

556:                                              ; preds = %551
  %557 = call i64 @strlen(i8* %552) #14
  %558 = add i64 %557, 1
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %430, i8* align 1 %552, i64 %558, i1 false)
  %559 = getelementptr inbounds i8, i8* %430, i64 %557
  br label %560

560:                                              ; preds = %563, %556
  %561 = phi i8* [ %559, %556 ], [ %564, %563 ]
  %562 = icmp ugt i8* %561, %430
  br i1 %562, label %563, label %567

563:                                              ; preds = %560
  %564 = getelementptr inbounds i8, i8* %561, i64 -1
  %565 = load i8, i8* %564, align 1
  %566 = icmp eq i8 %565, 32
  br i1 %566, label %560, label %567

567:                                              ; preds = %560, %563
  store i8 0, i8* %561, align 1
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %291) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %291, i8 -86, i64 16, i1 false) #13
  call void @IA__FcPatternIterStart(%struct._FcPattern* %41, %struct._FcPatternIter* nonnull %10) #13
  %568 = call i32 @FcPatternFindObjectIter(%struct._FcPattern* %41, %struct._FcPatternIter* nonnull %10, i32 %426) #13
  %569 = icmp eq i32 %568, 0
  br i1 %569, label %596, label %570

570:                                              ; preds = %567
  %571 = call %struct._FcValueList* @FcPatternIterGetValues(%struct._FcPattern* %41, %struct._FcPatternIter* nonnull %10) #13
  %572 = icmp eq %struct._FcValueList* %571, null
  br i1 %572, label %596, label %573

573:                                              ; preds = %570, %583
  %574 = phi %struct._FcValueList* [ %593, %583 ], [ %571, %570 ]
  %575 = getelementptr inbounds %struct._FcValueList, %struct._FcValueList* %574, i64 0, i32 1
  %576 = call { i32, i8* } @FcValueCanonicalize(%struct._FcValue* %575) #13
  %577 = extractvalue { i32, i8* } %576, 0
  %578 = icmp eq i32 %577, 3
  br i1 %578, label %579, label %596

579:                                              ; preds = %573
  %580 = extractvalue { i32, i8* } %576, 1
  %581 = call i32 @FcStrCmpIgnoreBlanksAndCase(i8* %580, i8* nonnull %430) #13
  %582 = icmp eq i32 %581, 0
  br i1 %582, label %595, label %583

583:                                              ; preds = %579
  %584 = getelementptr inbounds %struct._FcValueList, %struct._FcValueList* %574, i64 0, i32 0
  %585 = load %struct._FcValueList*, %struct._FcValueList** %584, align 8
  %586 = ptrtoint %struct._FcValueList* %585 to i64
  %587 = and i64 %586, 1
  %588 = icmp eq i64 %587, 0
  %589 = ptrtoint %struct._FcValueList* %574 to i64
  %590 = and i64 %586, -2
  %591 = add nsw i64 %590, %589
  %592 = inttoptr i64 %591 to %struct._FcValueList*
  %593 = select i1 %588, %struct._FcValueList* %585, %struct._FcValueList* %592
  %594 = icmp eq %struct._FcValueList* %593, null
  br i1 %594, label %596, label %573

595:                                              ; preds = %579
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %291) #13
  call void @free(i8* %430) #13
  br label %622

596:                                              ; preds = %573, %583, %567, %570
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %291) #13
  %597 = call i32 @FcPatternObjectAddString(%struct._FcPattern* %41, i32 %426, i8* nonnull %430) #13
  %598 = icmp eq i32 %597, 0
  call void @free(i8* %430) #13
  br i1 %598, label %646, label %599

599:                                              ; preds = %596
  %600 = icmp eq i8* %541, null
  br i1 %600, label %619, label %601

601:                                              ; preds = %599
  %602 = load i32, i32* %427, align 4
  %603 = load i32, i32* %428, align 4
  %604 = icmp slt i32 %602, %603
  br i1 %604, label %605, label %613

605:                                              ; preds = %601, %608
  %606 = call i32 @FcPatternObjectAddString(%struct._FcPattern* %41, i32 %425, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0)) #13
  %607 = icmp eq i32 %606, 0
  br i1 %607, label %646, label %608

608:                                              ; preds = %605
  %609 = load i32, i32* %427, align 4
  %610 = add nsw i32 %609, 1
  store i32 %610, i32* %427, align 4
  %611 = load i32, i32* %428, align 4
  %612 = icmp slt i32 %610, %611
  br i1 %612, label %605, label %613

613:                                              ; preds = %608, %601
  %614 = call i32 @FcPatternObjectAddString(%struct._FcPattern* %41, i32 %425, i8* nonnull %541) #13
  %615 = icmp eq i32 %614, 0
  br i1 %615, label %646, label %616

616:                                              ; preds = %613
  %617 = load i32, i32* %427, align 4
  %618 = add nsw i32 %617, 1
  store i32 %618, i32* %427, align 4
  br label %619

619:                                              ; preds = %599, %616
  %620 = load i32, i32* %428, align 4
  %621 = add nsw i32 %620, 1
  store i32 %621, i32* %428, align 4
  br label %622

622:                                              ; preds = %595, %619, %549, %421
  %623 = phi i32 [ %371, %421 ], [ %425, %549 ], [ %425, %619 ], [ %425, %595 ]
  %624 = phi i32 [ 0, %421 ], [ %426, %549 ], [ %426, %619 ], [ %426, %595 ]
  %625 = phi i32* [ %369, %421 ], [ %427, %549 ], [ %427, %619 ], [ %427, %595 ]
  %626 = phi i32* [ %368, %421 ], [ %428, %549 ], [ %428, %619 ], [ %428, %595 ]
  %627 = phi i8* [ %422, %421 ], [ %429, %549 ], [ %429, %619 ], [ %429, %595 ]
  %628 = add nsw i64 %366, 1
  %629 = icmp slt i64 %628, %275
  br i1 %629, label %630, label %642

630:                                              ; preds = %622
  %631 = getelementptr inbounds %struct.FcNameMapping, %struct.FcNameMapping* %277, i64 %628, i32 4
  %632 = load i32, i32* %631, align 4
  %633 = call i32 @FT_Get_Sfnt_Name(%struct.FT_FaceRec_* %0, i32 %632, %struct.FT_SfntName_* nonnull %23) #13
  %634 = icmp eq i32 %633, 0
  %635 = load i16, i16* %285, align 8
  %636 = icmp eq i16 %296, %635
  %637 = and i1 %634, %636
  br i1 %637, label %638, label %642

638:                                              ; preds = %630
  %639 = load i16, i16* %282, align 2
  %640 = zext i16 %639 to i32
  %641 = icmp eq i32 %309, %640
  br i1 %641, label %365, label %642

642:                                              ; preds = %355, %622, %630, %638, %308, %304, %304, %304, %359
  %643 = phi i8* [ %300, %359 ], [ %300, %304 ], [ %300, %304 ], [ %300, %304 ], [ %300, %308 ], [ %627, %638 ], [ %627, %630 ], [ %627, %622 ], [ %300, %355 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %279) #13
  %644 = add nuw nsw i64 %299, 1
  %645 = icmp eq i64 %644, 10
  br i1 %645, label %647, label %298

646:                                              ; preds = %613, %596, %605
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %279) #13
  br label %1519

647:                                              ; preds = %642
  %648 = add nuw nsw i64 %293, 1
  %649 = icmp eq i64 %648, 4
  br i1 %649, label %650, label %292

650:                                              ; preds = %647
  br i1 %234, label %652, label %651

651:                                              ; preds = %650
  call void @free(i8* %276) #13
  br label %652

652:                                              ; preds = %651, %650
  %653 = load i32, i32* %15, align 4
  %654 = icmp eq i32 %653, 0
  br i1 %654, label %655, label %677

655:                                              ; preds = %652
  %656 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %0, i64 0, i32 5
  %657 = load i8*, i8** %656, align 8
  %658 = icmp eq i8* %657, null
  br i1 %658, label %677, label %659

659:                                              ; preds = %655
  %660 = call i32 @FcStrCmpIgnoreBlanksAndCase(i8* nonnull %657, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0)) #13
  %661 = icmp eq i32 %660, 0
  br i1 %661, label %677, label %662

662:                                              ; preds = %659
  %663 = load i32, i32* @FcDebugVal, align 4
  %664 = and i32 %663, 256
  %665 = icmp eq i32 %664, 0
  br i1 %665, label %669, label %666

666:                                              ; preds = %662
  %667 = load i8*, i8** %656, align 8
  %668 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0), i8* %667)
  br label %669

669:                                              ; preds = %662, %666
  %670 = load i8*, i8** %656, align 8
  %671 = call i32 @FcPatternObjectAddString(%struct._FcPattern* %41, i32 1, i8* %670) #13
  %672 = icmp eq i32 %671, 0
  br i1 %672, label %1519, label %673

673:                                              ; preds = %669
  %674 = call i32 @FcPatternObjectAddString(%struct._FcPattern* %41, i32 2, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0)) #13
  %675 = icmp eq i32 %674, 0
  br i1 %675, label %1519, label %676

676:                                              ; preds = %673
  store i32 1, i32* %15, align 4
  br label %677

677:                                              ; preds = %659, %655, %652, %676
  %678 = phi i32 [ 0, %659 ], [ 0, %655 ], [ %653, %652 ], [ 1, %676 ]
  %679 = load i32, i32* %17, align 4
  %680 = or i32 %679, %197
  %681 = icmp eq i32 %680, 0
  br i1 %681, label %682, label %705

682:                                              ; preds = %677
  %683 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %0, i64 0, i32 6
  %684 = load i8*, i8** %683, align 8
  %685 = icmp eq i8* %684, null
  br i1 %685, label %705, label %686

686:                                              ; preds = %682
  %687 = call i32 @FcStrCmpIgnoreBlanksAndCase(i8* nonnull %684, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0)) #13
  %688 = icmp eq i32 %687, 0
  br i1 %688, label %705, label %689

689:                                              ; preds = %686
  %690 = load i32, i32* @FcDebugVal, align 4
  %691 = and i32 %690, 256
  %692 = icmp eq i32 %691, 0
  br i1 %692, label %696, label %693

693:                                              ; preds = %689
  %694 = load i8*, i8** %683, align 8
  %695 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.11, i64 0, i64 0), i8* %694)
  br label %696

696:                                              ; preds = %689, %693
  %697 = load i8*, i8** %683, align 8
  %698 = call i32 @FcPatternObjectAddString(%struct._FcPattern* %41, i32 3, i8* %697) #13
  %699 = icmp eq i32 %698, 0
  br i1 %699, label %1519, label %700

700:                                              ; preds = %696
  %701 = call i32 @FcPatternObjectAddString(%struct._FcPattern* %41, i32 4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0)) #13
  %702 = icmp eq i32 %701, 0
  br i1 %702, label %1519, label %703

703:                                              ; preds = %700
  %704 = add nsw i32 %679, 1
  store i32 %704, i32* %17, align 4
  br label %705

705:                                              ; preds = %686, %682, %677, %703
  %706 = icmp eq i32 %678, 0
  %707 = icmp ne i8* %1, null
  %708 = and i1 %707, %706
  br i1 %708, label %709, label %740

709:                                              ; preds = %705
  %710 = load i8, i8* %1, align 1
  %711 = icmp eq i8 %710, 0
  br i1 %711, label %740, label %712

712:                                              ; preds = %709
  %713 = call i8* @strrchr(i8* nonnull %1, i32 47) #14
  %714 = icmp eq i8* %713, null
  %715 = getelementptr inbounds i8, i8* %713, i64 1
  %716 = select i1 %714, i8* %1, i8* %715
  %717 = call i8* @strrchr(i8* %716, i32 46) #14
  %718 = icmp eq i8* %717, null
  br i1 %718, label %719, label %722

719:                                              ; preds = %712
  %720 = call i64 @strlen(i8* %716) #14
  %721 = getelementptr inbounds i8, i8* %716, i64 %720
  br label %722

722:                                              ; preds = %712, %719
  %723 = phi i8* [ %717, %712 ], [ %721, %719 ]
  %724 = ptrtoint i8* %723 to i64
  %725 = ptrtoint i8* %716 to i64
  %726 = sub i64 %724, %725
  %727 = add nsw i64 %726, 1
  %728 = call noalias i8* @malloc(i64 %727) #13
  %729 = call i8* @strncpy(i8* %728, i8* %716, i64 %726) #13
  %730 = getelementptr inbounds i8, i8* %728, i64 %726
  store i8 0, i8* %730, align 1
  %731 = load i32, i32* @FcDebugVal, align 4
  %732 = and i32 %731, 256
  %733 = icmp eq i32 %732, 0
  br i1 %733, label %736, label %734

734:                                              ; preds = %722
  %735 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.12, i64 0, i64 0), i8* %728)
  br label %736

736:                                              ; preds = %722, %734
  %737 = call i32 @FcPatternObjectAddString(%struct._FcPattern* %41, i32 1, i8* %728) #13
  %738 = icmp eq i32 %737, 0
  call void @free(i8* %728) #13
  br i1 %738, label %1519, label %739

739:                                              ; preds = %736
  store i32 1, i32* %15, align 4
  br label %740

740:                                              ; preds = %739, %709, %705
  %741 = load i32, i32* %19, align 4
  %742 = or i32 %741, %197
  %743 = icmp eq i32 %742, 0
  br i1 %743, label %744, label %822

744:                                              ; preds = %740
  %745 = bitcast i8** %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %745) #13
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %24, align 8
  %746 = bitcast i8** %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %746) #13
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %25, align 8
  %747 = bitcast i8** %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %747) #13
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %26, align 8
  %748 = bitcast %struct._FcStrBuf* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 152, i8* nonnull %748) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %748, i8 -86, i64 152, i1 false)
  %749 = call i32 @FcPatternObjectGetString(%struct._FcPattern* %41, i32 2, i32 0, i8** nonnull %26) #13
  %750 = icmp eq i32 %749, 0
  br i1 %750, label %751, label %760

751:                                              ; preds = %744, %756
  %752 = phi i32 [ %757, %756 ], [ 0, %744 ]
  %753 = load i8*, i8** %26, align 8
  %754 = call i32 @IA__FcStrCmp(i8* %753, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0)) #13
  %755 = icmp eq i32 %754, 0
  br i1 %755, label %760, label %756

756:                                              ; preds = %751
  %757 = add nuw nsw i32 %752, 1
  store i8* null, i8** %26, align 8
  %758 = call i32 @FcPatternObjectGetString(%struct._FcPattern* %41, i32 2, i32 %757, i8** nonnull %26) #13
  %759 = icmp eq i32 %758, 0
  br i1 %759, label %751, label %760

760:                                              ; preds = %756, %751, %744
  %761 = phi i32 [ 0, %744 ], [ %752, %751 ], [ %757, %756 ]
  %762 = load i8*, i8** %26, align 8
  %763 = icmp eq i8* %762, null
  %764 = select i1 %763, i32 0, i32 %761
  %765 = call i32 @FcPatternObjectGetString(%struct._FcPattern* %41, i32 1, i32 %764, i8** nonnull %24) #13
  %766 = icmp eq i32 %765, 0
  br i1 %766, label %767, label %819

767:                                              ; preds = %760
  %768 = load i8*, i8** %24, align 8
  %769 = call i64 @strlen(i8* %768) #14
  %770 = icmp eq i64 %769, 0
  br i1 %770, label %786, label %771

771:                                              ; preds = %767
  %772 = tail call i16** @__ctype_b_loc() #15
  %773 = load i16*, i16** %772, align 8
  br label %774

774:                                              ; preds = %771, %783
  %775 = phi i64 [ %769, %771 ], [ %784, %783 ]
  %776 = getelementptr inbounds i8, i8* %768, i64 %775
  %777 = load i8, i8* %776, align 1
  %778 = zext i8 %777 to i64
  %779 = getelementptr inbounds i16, i16* %773, i64 %778
  %780 = load i16, i16* %779, align 2
  %781 = and i16 %780, 8192
  %782 = icmp eq i16 %781, 0
  br i1 %782, label %786, label %783

783:                                              ; preds = %774
  %784 = add i64 %775, -1
  %785 = icmp eq i64 %784, 0
  br i1 %785, label %786, label %774

786:                                              ; preds = %783, %774, %767
  %787 = phi i64 [ 0, %767 ], [ %775, %774 ], [ 0, %783 ]
  %788 = getelementptr inbounds i8, i8* %768, i64 %787
  store i8 0, i8* %788, align 1
  %789 = call i32 @FcPatternObjectGetString(%struct._FcPattern* %41, i32 4, i32 %764, i8** nonnull %26) #13
  %790 = icmp eq i32 %789, 0
  br i1 %790, label %791, label %800

791:                                              ; preds = %786, %796
  %792 = phi i32 [ %797, %796 ], [ %764, %786 ]
  %793 = load i8*, i8** %26, align 8
  %794 = call i32 @IA__FcStrCmp(i8* %793, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0)) #13
  %795 = icmp eq i32 %794, 0
  br i1 %795, label %800, label %796

796:                                              ; preds = %791
  %797 = add nuw nsw i32 %792, 1
  store i8* null, i8** %26, align 8
  %798 = call i32 @FcPatternObjectGetString(%struct._FcPattern* %41, i32 4, i32 %797, i8** nonnull %26) #13
  %799 = icmp eq i32 %798, 0
  br i1 %799, label %791, label %800

800:                                              ; preds = %796, %791, %786
  %801 = phi i32 [ %764, %786 ], [ %792, %791 ], [ %797, %796 ]
  %802 = load i8*, i8** %26, align 8
  %803 = icmp eq i8* %802, null
  %804 = select i1 %803, i32 0, i32 %801
  %805 = call i32 @FcPatternObjectGetString(%struct._FcPattern* %41, i32 3, i32 %804, i8** nonnull %25) #13
  %806 = icmp eq i32 %805, 0
  br i1 %806, label %807, label %819

807:                                              ; preds = %800
  call void @FcStrBufInit(%struct._FcStrBuf* nonnull %27, i8* null, i32 0) #13
  %808 = load i8*, i8** %24, align 8
  %809 = call i32 @FcStrBufString(%struct._FcStrBuf* nonnull %27, i8* %808) #13
  %810 = call i32 @FcStrBufChar(%struct._FcStrBuf* nonnull %27, i8 zeroext 32) #13
  %811 = load i8*, i8** %25, align 8
  %812 = call i32 @FcStrBufString(%struct._FcStrBuf* nonnull %27, i8* %811) #13
  %813 = call i8* @FcStrBufDoneStatic(%struct._FcStrBuf* nonnull %27) #13
  %814 = call i32 @FcPatternObjectAddString(%struct._FcPattern* %41, i32 5, i8* %813) #13
  %815 = icmp eq i32 %814, 0
  call void @FcStrBufDestroy(%struct._FcStrBuf* nonnull %27) #13
  br i1 %815, label %819, label %816

816:                                              ; preds = %807
  %817 = call i32 @FcPatternObjectAddString(%struct._FcPattern* %41, i32 6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0)) #13
  %818 = icmp eq i32 %817, 0
  br i1 %818, label %819, label %820

819:                                              ; preds = %760, %800, %807, %816
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %748) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %747) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %746) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %745) #13
  br label %1519

820:                                              ; preds = %816
  %821 = add nsw i32 %741, 1
  store i32 %821, i32* %19, align 4
  call void @llvm.lifetime.end.p0i8(i64 152, i8* nonnull %748) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %747) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %746) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %745) #13
  br label %822

822:                                              ; preds = %820, %740
  br i1 %286, label %823, label %879

823:                                              ; preds = %822
  %824 = getelementptr inbounds [256 x i8], [256 x i8]* %28, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %824) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %824, i8 -86, i64 256, i1 false)
  %825 = call i8* @FT_Get_Postscript_Name(%struct.FT_FaceRec_* %0) #13
  %826 = icmp eq i8* %825, null
  br i1 %826, label %827, label %871

827:                                              ; preds = %823
  %828 = bitcast i8** %29 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %828) #13
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %29, align 8
  %829 = bitcast i8** %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %829) #13
  store i8* null, i8** %30, align 8
  %830 = call i32 @FcPatternObjectGetString(%struct._FcPattern* %41, i32 2, i32 0, i8** nonnull %30) #13
  %831 = icmp eq i32 %830, 0
  br i1 %831, label %832, label %841

832:                                              ; preds = %827, %837
  %833 = phi i32 [ %838, %837 ], [ 0, %827 ]
  %834 = load i8*, i8** %30, align 8
  %835 = call i32 @IA__FcStrCmp(i8* %834, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0)) #13
  %836 = icmp eq i32 %835, 0
  br i1 %836, label %841, label %837

837:                                              ; preds = %832
  %838 = add nuw nsw i32 %833, 1
  store i8* null, i8** %30, align 8
  %839 = call i32 @FcPatternObjectGetString(%struct._FcPattern* %41, i32 2, i32 %838, i8** nonnull %30) #13
  %840 = icmp eq i32 %839, 0
  br i1 %840, label %832, label %841

841:                                              ; preds = %837, %832, %827
  %842 = phi i32 [ 0, %827 ], [ %833, %832 ], [ %838, %837 ]
  %843 = load i8*, i8** %30, align 8
  %844 = icmp eq i8* %843, null
  %845 = select i1 %844, i32 0, i32 %842
  %846 = call i32 @FcPatternObjectGetString(%struct._FcPattern* %41, i32 1, i32 %845, i8** nonnull %29) #13
  %847 = icmp eq i32 %846, 0
  br i1 %847, label %848, label %870

848:                                              ; preds = %841
  %849 = load i8*, i8** %29, align 8
  %850 = call i64 @strlen(i8* %849) #14
  %851 = icmp eq i64 %850, 0
  br i1 %851, label %867, label %852

852:                                              ; preds = %848, %852
  %853 = phi i64 [ %861, %852 ], [ 0, %848 ]
  %854 = getelementptr inbounds i8, i8* %849, i64 %853
  %855 = load i8, i8* %854, align 1
  %856 = zext i8 %855 to i32
  %857 = call i8* @memchr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @FcFreeTypeQueryFaceInternal.exclusive_chars, i64 0, i64 0), i32 %856, i64 16)
  %858 = icmp eq i8* %857, null
  %859 = getelementptr inbounds [256 x i8], [256 x i8]* %28, i64 0, i64 %853
  %860 = select i1 %858, i8 %855, i8 45
  store i8 %860, i8* %859, align 1
  %861 = add nuw nsw i64 %853, 1
  %862 = icmp ugt i64 %850, %861
  %863 = icmp ult i64 %861, 255
  %864 = and i1 %863, %862
  br i1 %864, label %852, label %865

865:                                              ; preds = %852
  %866 = and i64 %861, 4294967295
  br label %867

867:                                              ; preds = %848, %865
  %868 = phi i64 [ %866, %865 ], [ 0, %848 ]
  %869 = getelementptr inbounds [256 x i8], [256 x i8]* %28, i64 0, i64 %868
  store i8 0, i8* %869, align 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %829) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %828) #13
  br label %874

870:                                              ; preds = %841
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %829) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %828) #13
  br label %877

871:                                              ; preds = %823
  %872 = call i8* @strncpy(i8* nonnull %824, i8* nonnull %825, i64 255) #13
  %873 = getelementptr inbounds [256 x i8], [256 x i8]* %28, i64 0, i64 255
  store i8 0, i8* %873, align 1
  br label %874

874:                                              ; preds = %867, %871
  %875 = call i32 @FcPatternObjectAddString(%struct._FcPattern* %41, i32 46, i8* nonnull %824) #13
  %876 = icmp eq i32 %875, 0
  br i1 %876, label %877, label %878

877:                                              ; preds = %870, %874
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %824) #13
  br label %1519

878:                                              ; preds = %874
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %824) #13
  br label %879

879:                                              ; preds = %878, %822
  br i1 %707, label %880, label %886

880:                                              ; preds = %879
  %881 = load i8, i8* %1, align 1
  %882 = icmp eq i8 %881, 0
  br i1 %882, label %886, label %883

883:                                              ; preds = %880
  %884 = call i32 @FcPatternObjectAddString(%struct._FcPattern* %41, i32 21, i8* nonnull %1) #13
  %885 = icmp eq i32 %884, 0
  br i1 %885, label %1519, label %886

886:                                              ; preds = %883, %880, %879
  %887 = call i32 @FcPatternObjectAddInteger(%struct._FcPattern* %41, i32 22, i32 %204) #13
  %888 = icmp eq i32 %887, 0
  br i1 %888, label %1519, label %889

889:                                              ; preds = %886
  %890 = call i8* @FT_Get_Sfnt_Table(%struct.FT_FaceRec_* %0, i32 0) #13
  %891 = icmp eq i8* %890, null
  br i1 %891, label %899, label %892

892:                                              ; preds = %889
  %893 = getelementptr inbounds i8, i8* %890, i64 8
  %894 = bitcast i8* %893 to i64*
  %895 = load i64, i64* %894, align 8
  %896 = trunc i64 %895 to i32
  %897 = call i32 @FcPatternObjectAddInteger(%struct._FcPattern* %41, i32 35, i32 %896) #13
  %898 = icmp eq i32 %897, 0
  br i1 %898, label %1519, label %902

899:                                              ; preds = %889
  %900 = call i32 @FcPatternObjectAddInteger(%struct._FcPattern* %41, i32 35, i32 0) #13
  %901 = icmp eq i32 %900, 0
  br i1 %901, label %1519, label %902

902:                                              ; preds = %892, %899
  br i1 %209, label %903, label %1039

903:                                              ; preds = %902
  %904 = bitcast i8* %208 to i16*
  %905 = load i16, i16* %904, align 8
  switch i16 %905, label %906 [
    i16 -1, label %956
    i16 0, label %918
  ]

906:                                              ; preds = %903
  %907 = getelementptr inbounds i8, i8* %208, i64 104
  %908 = bitcast i8* %907 to i64*
  %909 = load i64, i64* %908, align 8
  %910 = and i64 %909, 131072
  %911 = icmp eq i64 %910, 0
  %912 = select i1 %911, i8* null, i8* getelementptr inbounds ([4 x %struct.anon], [4 x %struct.anon]* @FcCodePageRange, i64 0, i64 0, i32 1, i64 0)
  %913 = and i64 %909, 262144
  %914 = icmp eq i64 %913, 0
  %915 = and i64 %909, 393216
  %916 = icmp eq i64 %915, 393216
  %917 = select i1 %914, i8* %912, i8* getelementptr inbounds ([4 x %struct.anon], [4 x %struct.anon]* @FcCodePageRange, i64 0, i64 1, i32 1, i64 0)
  br i1 %916, label %918, label %1569

918:                                              ; preds = %906, %903, %1578, %1574, %1572
  %919 = phi i8* [ null, %1572 ], [ %1580, %1578 ], [ %1575, %1574 ], [ null, %903 ], [ null, %906 ]
  %920 = getelementptr inbounds i8, i8* %208, i64 4
  %921 = bitcast i8* %920 to i16*
  %922 = load i16, i16* %921, align 4
  %923 = uitofp i16 %922 to double
  %924 = fmul double %202, %923
  %925 = call double @IA__FcWeightFromOpenTypeDouble(double %924) #13
  %926 = load i32, i32* @FcDebugVal, align 4
  %927 = and i32 %926, 256
  %928 = icmp ne i32 %927, 0
  %929 = fcmp une double %925, -1.000000e+00
  %930 = and i1 %929, %928
  br i1 %930, label %931, label %935

931:                                              ; preds = %918
  %932 = load i16, i16* %921, align 4
  %933 = zext i16 %932 to i32
  %934 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.13, i64 0, i64 0), i32 %933, double %202, double %925)
  br label %935

935:                                              ; preds = %931, %918
  %936 = getelementptr inbounds i8, i8* %208, i64 6
  %937 = bitcast i8* %936 to i16*
  %938 = load i16, i16* %937, align 2
  %939 = add i16 %938, -1
  %940 = icmp ult i16 %939, 9
  br i1 %940, label %941, label %945

941:                                              ; preds = %935
  %942 = sext i16 %939 to i64
  %943 = getelementptr inbounds [9 x double], [9 x double]* @switch.table.FcFreeTypeQueryFaceInternal.119, i64 0, i64 %942
  %944 = load double, double* %943, align 8
  br label %945

945:                                              ; preds = %941, %935
  %946 = phi double [ %196, %935 ], [ %944, %941 ]
  %947 = fmul double %203, %946
  %948 = load i32, i32* @FcDebugVal, align 4
  %949 = and i32 %948, 256
  %950 = icmp ne i32 %949, 0
  %951 = fcmp une double %947, -1.000000e+00
  %952 = and i1 %951, %950
  br i1 %952, label %953, label %956

953:                                              ; preds = %945
  %954 = zext i16 %938 to i32
  %955 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14, i64 0, i64 0), i32 %954, double %203, double %947)
  br label %956

956:                                              ; preds = %903, %945, %953
  %957 = phi i8* [ %919, %945 ], [ %919, %953 ], [ null, %903 ]
  %958 = phi double [ %925, %945 ], [ %925, %953 ], [ %195, %903 ]
  %959 = phi double [ %947, %945 ], [ %947, %953 ], [ %196, %903 ]
  %960 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %960) #13
  store i64 0, i64* %7, align 8
  %961 = bitcast i64** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %961) #13
  store i64* null, i64** %8, align 8
  %962 = bitcast i64** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %962) #13
  store i64* null, i64** %9, align 8
  %963 = call i32 @FT_Load_Sfnt_Table(%struct.FT_FaceRec_* %0, i64 1399417958, i64 0, i8* null, i64* nonnull %7) #13
  %964 = icmp eq i32 %963, 0
  %965 = call fastcc i32 @GetScriptTags(%struct.FT_FaceRec_* %0, i64 1196445523, i64** nonnull %9) #13
  %966 = call fastcc i32 @GetScriptTags(%struct.FT_FaceRec_* %0, i64 1196643650, i64** nonnull %8) #13
  %967 = or i32 %966, %965
  %968 = trunc i32 %967 to i16
  %969 = icmp ne i16 %968, 0
  %970 = or i1 %964, %969
  br i1 %970, label %971, label %1029

971:                                              ; preds = %956
  %972 = and i32 %965, 65535
  %973 = and i32 %966, 65535
  %974 = add nuw nsw i32 %973, %972
  %975 = mul nuw nsw i32 %974, 14
  %976 = zext i32 %975 to i64
  %977 = select i1 %964, i64 13, i64 0
  %978 = add nuw nsw i64 %977, %976
  %979 = call noalias i8* @malloc(i64 %978) #13
  %980 = icmp eq i8* %979, null
  br i1 %980, label %1029, label %981

981:                                              ; preds = %971
  store i8 0, i8* %979, align 1
  br i1 %964, label %982, label %983

982:                                              ; preds = %981
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %979, i8* align 1 getelementptr inbounds ([13 x i8], [13 x i8]* @.str.74, i64 0, i64 0), i64 13, i1 false) #13
  br label %983

983:                                              ; preds = %982, %981
  %984 = and i32 %967, 65535
  %985 = icmp eq i32 %984, 0
  br i1 %985, label %1023, label %986

986:                                              ; preds = %983
  %987 = load i64*, i64** %8, align 8
  %988 = load i64*, i64** %9, align 8
  br label %989

989:                                              ; preds = %1017, %986
  %990 = phi i32 [ 0, %986 ], [ %1019, %1017 ]
  %991 = phi i32 [ 0, %986 ], [ %1018, %1017 ]
  %992 = icmp eq i32 %991, %973
  br i1 %992, label %993, label %998

993:                                              ; preds = %989
  %994 = sext i32 %990 to i64
  %995 = getelementptr inbounds i64, i64* %988, i64 %994
  %996 = load i64, i64* %995, align 8
  call fastcc void @addtag(i8* nonnull %979, i64 %996) #13
  %997 = add nsw i32 %990, 1
  br label %1017

998:                                              ; preds = %989
  %999 = icmp eq i32 %990, %972
  %1000 = sext i32 %991 to i64
  %1001 = getelementptr inbounds i64, i64* %987, i64 %1000
  %1002 = load i64, i64* %1001, align 8
  br i1 %999, label %1008, label %1003

1003:                                             ; preds = %998
  %1004 = sext i32 %990 to i64
  %1005 = getelementptr inbounds i64, i64* %988, i64 %1004
  %1006 = load i64, i64* %1005, align 8
  %1007 = icmp ult i64 %1002, %1006
  br i1 %1007, label %1008, label %1010

1008:                                             ; preds = %1003, %998
  call fastcc void @addtag(i8* nonnull %979, i64 %1002) #13
  %1009 = add nsw i32 %991, 1
  br label %1017

1010:                                             ; preds = %1003
  %1011 = icmp eq i64 %1002, %1006
  br i1 %1011, label %1012, label %1015

1012:                                             ; preds = %1010
  call fastcc void @addtag(i8* nonnull %979, i64 %1002) #13
  %1013 = add nsw i32 %991, 1
  %1014 = add nsw i32 %990, 1
  br label %1017

1015:                                             ; preds = %1010
  call fastcc void @addtag(i8* nonnull %979, i64 %1006) #13
  %1016 = add nsw i32 %990, 1
  br label %1017

1017:                                             ; preds = %1015, %1012, %1008, %993
  %1018 = phi i32 [ %973, %993 ], [ %1009, %1008 ], [ %1013, %1012 ], [ %991, %1015 ]
  %1019 = phi i32 [ %997, %993 ], [ %990, %1008 ], [ %1014, %1012 ], [ %1016, %1015 ]
  %1020 = icmp slt i32 %1018, %973
  %1021 = icmp slt i32 %1019, %972
  %1022 = or i1 %1020, %1021
  br i1 %1022, label %989, label %1023

1023:                                             ; preds = %1017, %983
  %1024 = load i32, i32* @FcDebugVal, align 4
  %1025 = and i32 %1024, 256
  %1026 = icmp eq i32 %1025, 0
  br i1 %1026, label %1029, label %1027

1027:                                             ; preds = %1023
  %1028 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.75, i64 0, i64 0), i8* nonnull %979) #13
  br label %1029

1029:                                             ; preds = %956, %971, %1023, %1027
  %1030 = phi i8* [ %979, %1027 ], [ %979, %1023 ], [ null, %971 ], [ null, %956 ]
  %1031 = bitcast i64** %8 to i8**
  %1032 = load i8*, i8** %1031, align 8
  call void @free(i8* %1032) #13
  %1033 = bitcast i64** %9 to i8**
  %1034 = load i8*, i8** %1033, align 8
  call void @free(i8* %1034) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %962) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %961) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %960) #13
  %1035 = icmp eq i8* %1030, null
  br i1 %1035, label %1039, label %1036

1036:                                             ; preds = %1029
  %1037 = call i32 @FcPatternObjectAddString(%struct._FcPattern* %41, i32 36, i8* nonnull %1030) #13
  %1038 = icmp eq i32 %1037, 0
  call void @free(i8* nonnull %1030) #13
  br i1 %1038, label %1519, label %1039

1039:                                             ; preds = %902, %1036, %1029
  %1040 = phi double [ %959, %1036 ], [ %959, %1029 ], [ %196, %902 ]
  %1041 = phi double [ %958, %1036 ], [ %958, %1029 ], [ %195, %902 ]
  %1042 = phi i8* [ %957, %1036 ], [ %957, %1029 ], [ null, %902 ]
  %1043 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %0, i64 0, i32 26
  %1044 = load %struct.FT_StreamRec_*, %struct.FT_StreamRec_** %1043, align 8
  %1045 = icmp eq %struct.FT_StreamRec_* %1044, null
  br i1 %1045, label %1050, label %1046

1046:                                             ; preds = %1039
  %1047 = call i32 @ftglue_face_goto_table(%struct.FT_FaceRec_* %0, i64 1886545264, %struct.FT_StreamRec_* nonnull %1044) #13
  %1048 = icmp eq i32 %1047, 0
  %1049 = zext i1 %1048 to i32
  br label %1050

1050:                                             ; preds = %1039, %1046
  %1051 = phi i32 [ 0, %1039 ], [ %1049, %1046 ]
  %1052 = call i32 @FcPatternObjectAddBool(%struct._FcPattern* %41, i32 51, i32 %1051) #13
  %1053 = icmp eq i32 %1052, 0
  br i1 %1053, label %1519, label %1054

1054:                                             ; preds = %1050
  %1055 = icmp eq i32 %200, 0
  %1056 = and i1 %1055, %209
  br i1 %1056, label %1057, label %1081

1057:                                             ; preds = %1054
  %1058 = bitcast i8* %208 to i16*
  %1059 = load i16, i16* %1058, align 8
  switch i16 %1059, label %1060 [
    i16 -1, label %1081
    i16 4, label %1081
    i16 3, label %1081
    i16 2, label %1081
    i16 1, label %1081
    i16 0, label %1081
  ]

1060:                                             ; preds = %1057
  %1061 = getelementptr inbounds i8, i8* %208, i64 130
  %1062 = bitcast i8* %1061 to i16*
  %1063 = load i16, i16* %1062, align 2
  %1064 = uitofp i16 %1063 to x86_fp80
  %1065 = fdiv x86_fp80 %1064, 0xK4003A000000000000000
  %1066 = fptrunc x86_fp80 %1065 to double
  %1067 = getelementptr inbounds i8, i8* %208, i64 132
  %1068 = bitcast i8* %1067 to i16*
  %1069 = load i16, i16* %1068, align 4
  %1070 = uitofp i16 %1069 to x86_fp80
  %1071 = fdiv x86_fp80 %1070, 0xK4003A000000000000000
  %1072 = fptrunc x86_fp80 %1071 to double
  %1073 = fcmp oeq double %1066, %1072
  br i1 %1073, label %1074, label %1077

1074:                                             ; preds = %1060
  %1075 = call i32 @FcPatternObjectAddDouble(%struct._FcPattern* %41, i32 10, double %1066) #13
  %1076 = icmp eq i32 %1075, 0
  br i1 %1076, label %1519, label %1081

1077:                                             ; preds = %1060
  %1078 = call %struct._FcRange* @IA__FcRangeCreateDouble(double %1066, double %1072) #13
  %1079 = call i32 @FcPatternObjectAddRange(%struct._FcPattern* %41, i32 10, %struct._FcRange* %1078) #13
  %1080 = icmp eq i32 %1079, 0
  call void @IA__FcRangeDestroy(%struct._FcRange* %1078) #13
  br i1 %1080, label %1519, label %1081

1081:                                             ; preds = %1074, %1077, %1057, %1057, %1057, %1057, %1057, %1057, %1054
  %1082 = call i32 @FT_Get_PS_Font_Info(%struct.FT_FaceRec_* %0, %struct.PS_FontInfoRec_* nonnull %13) #13
  %1083 = icmp eq i32 %1082, 0
  br i1 %1083, label %1084, label %1119

1084:                                             ; preds = %1081
  %1085 = fcmp oeq double %1041, -1.000000e+00
  br i1 %1085, label %1086, label %1112

1086:                                             ; preds = %1084
  %1087 = getelementptr inbounds %struct.PS_FontInfoRec_, %struct.PS_FontInfoRec_* %13, i64 0, i32 4
  %1088 = load i8*, i8** %1087, align 8
  %1089 = icmp eq i8* %1088, null
  br i1 %1089, label %1112, label %1092

1090:                                             ; preds = %1092
  %1091 = icmp eq i64 %1098, 23
  br i1 %1091, label %1103, label %1092

1092:                                             ; preds = %1086, %1090
  %1093 = phi i64 [ %1098, %1090 ], [ 0, %1086 ]
  %1094 = getelementptr inbounds [23 x %struct._FcStringConst], [23 x %struct._FcStringConst]* @weightConsts, i64 0, i64 %1093, i32 0
  %1095 = load i8*, i8** %1094, align 16
  %1096 = call i32 @FcStrCmpIgnoreBlanksAndCase(i8* nonnull %1088, i8* %1095) #13
  %1097 = icmp eq i32 %1096, 0
  %1098 = add nuw nsw i64 %1093, 1
  br i1 %1097, label %1099, label %1090

1099:                                             ; preds = %1092
  %1100 = and i64 %1093, 4294967295
  %1101 = getelementptr inbounds [23 x %struct._FcStringConst], [23 x %struct._FcStringConst]* @weightConsts, i64 0, i64 %1100, i32 1
  %1102 = load i32, i32* %1101, align 8
  br label %1103

1103:                                             ; preds = %1090, %1099
  %1104 = phi i32 [ %1102, %1099 ], [ -1, %1090 ]
  %1105 = sitofp i32 %1104 to double
  %1106 = load i32, i32* @FcDebugVal, align 4
  %1107 = and i32 %1106, 256
  %1108 = icmp eq i32 %1107, 0
  br i1 %1108, label %1112, label %1109

1109:                                             ; preds = %1103
  %1110 = load i8*, i8** %1087, align 8
  %1111 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i64 0, i64 0), i8* %1110, double %1105)
  br label %1112

1112:                                             ; preds = %1103, %1086, %1109, %1084
  %1113 = phi double [ %1105, %1109 ], [ %1105, %1103 ], [ -1.000000e+00, %1086 ], [ %1041, %1084 ]
  %1114 = icmp eq i8* %643, null
  br i1 %1114, label %1115, label %1133

1115:                                             ; preds = %1112
  %1116 = getelementptr inbounds %struct.PS_FontInfoRec_, %struct.PS_FontInfoRec_* %13, i64 0, i32 1
  %1117 = load i8*, i8** %1116, align 8
  %1118 = call fastcc i8* @FcNoticeFoundry(i8* %1117)
  br label %1119

1119:                                             ; preds = %1115, %1081
  %1120 = phi double [ %1113, %1115 ], [ %1041, %1081 ]
  %1121 = phi i8* [ %1118, %1115 ], [ %643, %1081 ]
  %1122 = icmp eq i8* %1121, null
  br i1 %1122, label %1123, label %1133

1123:                                             ; preds = %1119
  %1124 = call i32 @FT_Get_BDF_Property(%struct.FT_FaceRec_* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16, i64 0, i64 0), %struct.BDF_PropertyRec_* nonnull %14) #13
  %1125 = icmp eq i32 %1124, 0
  br i1 %1125, label %1126, label %1133

1126:                                             ; preds = %1123
  %1127 = getelementptr inbounds %struct.BDF_PropertyRec_, %struct.BDF_PropertyRec_* %14, i64 0, i32 0
  %1128 = load i32, i32* %1127, align 8
  %1129 = icmp eq i32 %1128, 1
  br i1 %1129, label %1130, label %1133

1130:                                             ; preds = %1126
  %1131 = getelementptr inbounds %struct.BDF_PropertyRec_, %struct.BDF_PropertyRec_* %14, i64 0, i32 1, i32 0
  %1132 = load i8*, i8** %1131, align 8
  br label %1133

1133:                                             ; preds = %1112, %1123, %1126, %1130, %1119
  %1134 = phi double [ %1120, %1119 ], [ %1120, %1130 ], [ %1120, %1126 ], [ %1120, %1123 ], [ %1113, %1112 ]
  %1135 = phi i8* [ %1121, %1119 ], [ %1132, %1130 ], [ null, %1126 ], [ null, %1123 ], [ %643, %1112 ]
  %1136 = fcmp oeq double %1040, -1.000000e+00
  br i1 %1136, label %1137, label %1187

1137:                                             ; preds = %1133
  %1138 = call i32 @FT_Get_BDF_Property(%struct.FT_FaceRec_* %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.17, i64 0, i64 0), %struct.BDF_PropertyRec_* nonnull %14) #13
  %1139 = icmp eq i32 %1138, 0
  br i1 %1139, label %1140, label %1153

1140:                                             ; preds = %1137
  %1141 = getelementptr inbounds %struct.BDF_PropertyRec_, %struct.BDF_PropertyRec_* %14, i64 0, i32 0
  %1142 = load i32, i32* %1141, align 8
  %1143 = and i32 %1142, -2
  %1144 = icmp eq i32 %1143, 2
  br i1 %1144, label %1145, label %1153

1145:                                             ; preds = %1140
  %1146 = getelementptr inbounds %struct.BDF_PropertyRec_, %struct.BDF_PropertyRec_* %14, i64 0, i32 1
  %1147 = bitcast %union.anon* %1146 to i32*
  %1148 = load i32, i32* %1147, align 8
  %1149 = add nsw i32 %1148, 5
  %1150 = sdiv i32 %1149, 10
  %1151 = add nsw i32 %1150, -1
  %1152 = icmp ult i32 %1151, 9
  br i1 %1152, label %1183, label %1153

1153:                                             ; preds = %1145, %1137, %1140
  %1154 = call i32 @FT_Get_BDF_Property(%struct.FT_FaceRec_* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.18, i64 0, i64 0), %struct.BDF_PropertyRec_* nonnull %14) #13
  %1155 = icmp eq i32 %1154, 0
  br i1 %1155, label %1156, label %1187

1156:                                             ; preds = %1153
  %1157 = getelementptr inbounds %struct.BDF_PropertyRec_, %struct.BDF_PropertyRec_* %14, i64 0, i32 0
  %1158 = load i32, i32* %1157, align 8
  %1159 = icmp eq i32 %1158, 1
  br i1 %1159, label %1160, label %1187

1160:                                             ; preds = %1156
  %1161 = getelementptr inbounds %struct.BDF_PropertyRec_, %struct.BDF_PropertyRec_* %14, i64 0, i32 1, i32 0
  %1162 = load i8*, i8** %1161, align 8
  %1163 = icmp eq i8* %1162, null
  br i1 %1163, label %1187, label %1164

1164:                                             ; preds = %1160
  %1165 = call i32 @FcStrCmpIgnoreBlanksAndCase(i8* nonnull %1162, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.101, i64 0, i64 0)) #13
  %1166 = icmp eq i32 %1165, 0
  br i1 %1166, label %1170, label %1167

1167:                                             ; preds = %1164
  %1168 = call i32 @FcStrCmpIgnoreBlanksAndCase(i8* nonnull %1162, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.102, i64 0, i64 0)) #13
  %1169 = icmp eq i32 %1168, 0
  br i1 %1169, label %1170, label %1545

1170:                                             ; preds = %1566, %1563, %1560, %1557, %1554, %1551, %1548, %1545, %1167, %1164
  %1171 = phi i64 [ 0, %1164 ], [ 1, %1167 ], [ 2, %1545 ], [ 3, %1548 ], [ 4, %1551 ], [ 5, %1554 ], [ 6, %1557 ], [ 7, %1560 ], [ 8, %1563 ], [ 9, %1566 ]
  %1172 = getelementptr inbounds [10 x %struct._FcStringConst], [10 x %struct._FcStringConst]* @widthConsts, i64 0, i64 %1171, i32 1
  %1173 = load i32, i32* %1172, align 8
  br label %1174

1174:                                             ; preds = %1566, %1170
  %1175 = phi i32 [ %1173, %1170 ], [ -1, %1566 ]
  %1176 = sitofp i32 %1175 to double
  %1177 = load i32, i32* @FcDebugVal, align 4
  %1178 = and i32 %1177, 256
  %1179 = icmp eq i32 %1178, 0
  br i1 %1179, label %1187, label %1180

1180:                                             ; preds = %1174
  %1181 = load i8*, i8** %1161, align 8
  %1182 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.19, i64 0, i64 0), i8* %1181, double %1176)
  br label %1187

1183:                                             ; preds = %1145
  %1184 = sext i32 %1151 to i64
  %1185 = getelementptr inbounds [9 x double], [9 x double]* @switch.table.FcFreeTypeQueryFaceInternal.119, i64 0, i64 %1184
  %1186 = load double, double* %1185, align 8
  br label %1187

1187:                                             ; preds = %1183, %1174, %1160, %1153, %1156, %1180, %1133
  %1188 = phi double [ %1176, %1180 ], [ %1176, %1174 ], [ -1.000000e+00, %1160 ], [ -1.000000e+00, %1156 ], [ -1.000000e+00, %1153 ], [ %1040, %1133 ], [ %1186, %1183 ]
  %1189 = call i32 @IA__FcPatternGetString(%struct._FcPattern* %41, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i64 0, i64 0), i32 0, i8** nonnull %21) #13
  %1190 = icmp eq i32 %1189, 0
  br i1 %1190, label %1191, label %1310

1191:                                             ; preds = %1187, %1303
  %1192 = phi i32 [ %1283, %1303 ], [ -1, %1187 ]
  %1193 = phi i32 [ %1305, %1303 ], [ 0, %1187 ]
  %1194 = phi i32 [ %1304, %1303 ], [ 0, %1187 ]
  %1195 = phi double [ %1264, %1303 ], [ %1188, %1187 ]
  %1196 = phi double [ %1230, %1303 ], [ %1134, %1187 ]
  %1197 = fcmp oeq double %1196, -1.000000e+00
  br i1 %1197, label %1198, label %1229

1198:                                             ; preds = %1191
  %1199 = load i8*, i8** %21, align 8
  br label %1200

1200:                                             ; preds = %1213, %1198
  %1201 = phi i64 [ 0, %1198 ], [ %1214, %1213 ]
  %1202 = getelementptr inbounds [23 x %struct._FcStringConst], [23 x %struct._FcStringConst]* @weightConsts, i64 0, i64 %1201, i32 0
  %1203 = load i8*, i8** %1202, align 16
  %1204 = load i8, i8* %1203, align 1
  %1205 = icmp eq i8 %1204, 60
  br i1 %1205, label %1206, label %1210

1206:                                             ; preds = %1200
  %1207 = getelementptr inbounds i8, i8* %1203, i64 1
  %1208 = call i8* @FcStrContainsWord(i8* %1199, i8* %1207) #13
  %1209 = icmp eq i8* %1208, null
  br i1 %1209, label %1213, label %1216

1210:                                             ; preds = %1200
  %1211 = call i8* @FcStrContainsIgnoreBlanksAndCase(i8* %1199, i8* %1203) #13
  %1212 = icmp eq i8* %1211, null
  br i1 %1212, label %1213, label %1216

1213:                                             ; preds = %1210, %1206
  %1214 = add nuw nsw i64 %1201, 1
  %1215 = icmp eq i64 %1214, 23
  br i1 %1215, label %1220, label %1200

1216:                                             ; preds = %1210, %1206
  %1217 = and i64 %1201, 4294967295
  %1218 = getelementptr inbounds [23 x %struct._FcStringConst], [23 x %struct._FcStringConst]* @weightConsts, i64 0, i64 %1217, i32 1
  %1219 = load i32, i32* %1218, align 8
  br label %1220

1220:                                             ; preds = %1213, %1216
  %1221 = phi i32 [ %1219, %1216 ], [ -1, %1213 ]
  %1222 = sitofp i32 %1221 to double
  %1223 = load i32, i32* @FcDebugVal, align 4
  %1224 = and i32 %1223, 256
  %1225 = icmp eq i32 %1224, 0
  br i1 %1225, label %1229, label %1226

1226:                                             ; preds = %1220
  %1227 = load i8*, i8** %21, align 8
  %1228 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.21, i64 0, i64 0), i8* %1227, double %1222)
  br label %1229

1229:                                             ; preds = %1220, %1226, %1191
  %1230 = phi double [ %1222, %1226 ], [ %1222, %1220 ], [ %1196, %1191 ]
  %1231 = fcmp oeq double %1195, -1.000000e+00
  br i1 %1231, label %1232, label %1263

1232:                                             ; preds = %1229
  %1233 = load i8*, i8** %21, align 8
  br label %1234

1234:                                             ; preds = %1247, %1232
  %1235 = phi i64 [ 0, %1232 ], [ %1248, %1247 ]
  %1236 = getelementptr inbounds [10 x %struct._FcStringConst], [10 x %struct._FcStringConst]* @widthConsts, i64 0, i64 %1235, i32 0
  %1237 = load i8*, i8** %1236, align 16
  %1238 = load i8, i8* %1237, align 1
  %1239 = icmp eq i8 %1238, 60
  br i1 %1239, label %1240, label %1244

1240:                                             ; preds = %1234
  %1241 = getelementptr inbounds i8, i8* %1237, i64 1
  %1242 = call i8* @FcStrContainsWord(i8* %1233, i8* %1241) #13
  %1243 = icmp eq i8* %1242, null
  br i1 %1243, label %1247, label %1250

1244:                                             ; preds = %1234
  %1245 = call i8* @FcStrContainsIgnoreBlanksAndCase(i8* %1233, i8* %1237) #13
  %1246 = icmp eq i8* %1245, null
  br i1 %1246, label %1247, label %1250

1247:                                             ; preds = %1244, %1240
  %1248 = add nuw nsw i64 %1235, 1
  %1249 = icmp eq i64 %1248, 10
  br i1 %1249, label %1254, label %1234

1250:                                             ; preds = %1244, %1240
  %1251 = and i64 %1235, 4294967295
  %1252 = getelementptr inbounds [10 x %struct._FcStringConst], [10 x %struct._FcStringConst]* @widthConsts, i64 0, i64 %1251, i32 1
  %1253 = load i32, i32* %1252, align 8
  br label %1254

1254:                                             ; preds = %1247, %1250
  %1255 = phi i32 [ %1253, %1250 ], [ -1, %1247 ]
  %1256 = sitofp i32 %1255 to double
  %1257 = load i32, i32* @FcDebugVal, align 4
  %1258 = and i32 %1257, 256
  %1259 = icmp eq i32 %1258, 0
  br i1 %1259, label %1263, label %1260

1260:                                             ; preds = %1254
  %1261 = load i8*, i8** %21, align 8
  %1262 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.22, i64 0, i64 0), i8* %1261, double %1256)
  br label %1263

1263:                                             ; preds = %1254, %1260, %1229
  %1264 = phi double [ %1256, %1260 ], [ %1256, %1254 ], [ %1195, %1229 ]
  %1265 = icmp eq i32 %1192, -1
  br i1 %1265, label %1266, label %1282

1266:                                             ; preds = %1263
  %1267 = load i8*, i8** %21, align 8
  %1268 = call i8* @FcStrContainsIgnoreBlanksAndCase(i8* %1267, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.110, i64 0, i64 0)) #13
  %1269 = icmp eq i8* %1268, null
  br i1 %1269, label %1524, label %1270

1270:                                             ; preds = %1527, %1524, %1266
  %1271 = phi i64 [ 0, %1266 ], [ 1, %1524 ], [ 2, %1527 ]
  %1272 = getelementptr inbounds [3 x %struct._FcStringConst], [3 x %struct._FcStringConst]* @slantConsts, i64 0, i64 %1271, i32 1
  %1273 = load i32, i32* %1272, align 8
  br label %1274

1274:                                             ; preds = %1527, %1270
  %1275 = phi i32 [ %1273, %1270 ], [ -1, %1527 ]
  %1276 = load i32, i32* @FcDebugVal, align 4
  %1277 = and i32 %1276, 256
  %1278 = icmp eq i32 %1277, 0
  br i1 %1278, label %1282, label %1279

1279:                                             ; preds = %1274
  %1280 = load i8*, i8** %21, align 8
  %1281 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.23, i64 0, i64 0), i8* %1280, i32 %1275)
  br label %1282

1282:                                             ; preds = %1274, %1279, %1263
  %1283 = phi i32 [ %1275, %1279 ], [ %1275, %1274 ], [ %1192, %1263 ]
  %1284 = icmp eq i32 %1194, 0
  br i1 %1284, label %1285, label %1303

1285:                                             ; preds = %1282
  %1286 = load i8*, i8** %21, align 8
  %1287 = call i8* @FcStrContainsIgnoreBlanksAndCase(i8* %1286, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.113, i64 0, i64 0)) #13
  %1288 = icmp eq i8* %1287, null
  br i1 %1288, label %1530, label %1289

1289:                                             ; preds = %1542, %1539, %1536, %1533, %1530, %1285
  %1290 = phi i64 [ 0, %1285 ], [ 1, %1530 ], [ 2, %1533 ], [ 3, %1536 ], [ 4, %1539 ], [ 5, %1542 ]
  %1291 = getelementptr inbounds [6 x %struct._FcStringConst], [6 x %struct._FcStringConst]* @decorativeConsts, i64 0, i64 %1290, i32 1
  %1292 = load i32, i32* %1291, align 8
  br label %1293

1293:                                             ; preds = %1542, %1289
  %1294 = phi i32 [ %1292, %1289 ], [ -1, %1542 ]
  %1295 = icmp sgt i32 %1294, 0
  %1296 = zext i1 %1295 to i32
  %1297 = load i32, i32* @FcDebugVal, align 4
  %1298 = and i32 %1297, 256
  %1299 = icmp eq i32 %1298, 0
  br i1 %1299, label %1303, label %1300

1300:                                             ; preds = %1293
  %1301 = load i8*, i8** %21, align 8
  %1302 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.24, i64 0, i64 0), i8* %1301, i32 %1296)
  br label %1303

1303:                                             ; preds = %1293, %1282, %1300
  %1304 = phi i32 [ %1296, %1300 ], [ %1296, %1293 ], [ %1194, %1282 ]
  %1305 = add nuw nsw i32 %1193, 1
  %1306 = call i32 @IA__FcPatternGetString(%struct._FcPattern* %41, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i64 0, i64 0), i32 %1305, i8** nonnull %21) #13
  %1307 = icmp eq i32 %1306, 0
  br i1 %1307, label %1191, label %1308

1308:                                             ; preds = %1303
  %1309 = icmp eq i32 %1283, -1
  br i1 %1309, label %1310, label %1319

1310:                                             ; preds = %1187, %1308
  %1311 = phi i32 [ %1304, %1308 ], [ 0, %1187 ]
  %1312 = phi double [ %1264, %1308 ], [ %1188, %1187 ]
  %1313 = phi double [ %1230, %1308 ], [ %1134, %1187 ]
  %1314 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %0, i64 0, i32 3
  %1315 = load i64, i64* %1314, align 8
  %1316 = and i64 %1315, 1
  %1317 = icmp eq i64 %1316, 0
  %1318 = select i1 %1317, i32 0, i32 100
  br label %1319

1319:                                             ; preds = %1310, %1308
  %1320 = phi i32 [ %1311, %1310 ], [ %1304, %1308 ]
  %1321 = phi double [ %1312, %1310 ], [ %1264, %1308 ]
  %1322 = phi double [ %1313, %1310 ], [ %1230, %1308 ]
  %1323 = phi i32 [ %1318, %1310 ], [ %1283, %1308 ]
  %1324 = fcmp oeq double %1322, -1.000000e+00
  br i1 %1324, label %1325, label %1331

1325:                                             ; preds = %1319
  %1326 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %0, i64 0, i32 3
  %1327 = load i64, i64* %1326, align 8
  %1328 = and i64 %1327, 2
  %1329 = icmp eq i64 %1328, 0
  %1330 = select i1 %1329, double 1.000000e+02, double 2.000000e+02
  br label %1331

1331:                                             ; preds = %1325, %1319
  %1332 = phi double [ %1330, %1325 ], [ %1322, %1319 ]
  %1333 = fcmp oeq double %1321, -1.000000e+00
  %1334 = select i1 %1333, double 1.000000e+02, double %1321
  %1335 = icmp eq i8* %1135, null
  %1336 = select i1 %1335, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.25, i64 0, i64 0), i8* %1135
  %1337 = call i32 @FcPatternObjectAddInteger(%struct._FcPattern* %41, i32 7, i32 %1323) #13
  %1338 = icmp eq i32 %1337, 0
  br i1 %1338, label %1519, label %1339

1339:                                             ; preds = %1331
  %1340 = icmp eq i32 %198, 0
  br i1 %1340, label %1341, label %1344

1341:                                             ; preds = %1339
  %1342 = call i32 @FcPatternObjectAddDouble(%struct._FcPattern* %41, i32 8, double %1332) #13
  %1343 = icmp eq i32 %1342, 0
  br i1 %1343, label %1519, label %1344

1344:                                             ; preds = %1341, %1339
  %1345 = icmp eq i32 %199, 0
  br i1 %1345, label %1346, label %1349

1346:                                             ; preds = %1344
  %1347 = call i32 @FcPatternObjectAddDouble(%struct._FcPattern* %41, i32 9, double %1334) #13
  %1348 = icmp eq i32 %1347, 0
  br i1 %1348, label %1519, label %1349

1349:                                             ; preds = %1346, %1344
  %1350 = call i32 @FcPatternObjectAddString(%struct._FcPattern* %41, i32 14, i8* %1336) #13
  %1351 = icmp eq i32 %1350, 0
  br i1 %1351, label %1519, label %1352

1352:                                             ; preds = %1349
  %1353 = call i32 @FcPatternObjectAddBool(%struct._FcPattern* %41, i32 40, i32 %1320) #13
  %1354 = icmp eq i32 %1353, 0
  br i1 %1354, label %1519, label %1355

1355:                                             ; preds = %1352
  %1356 = icmp eq %struct._FcCharSet** %3, null
  br i1 %1356, label %1362, label %1357

1357:                                             ; preds = %1355
  %1358 = load %struct._FcCharSet*, %struct._FcCharSet** %3, align 8
  %1359 = icmp eq %struct._FcCharSet* %1358, null
  br i1 %1359, label %1364, label %1360

1360:                                             ; preds = %1357
  %1361 = call %struct._FcCharSet* @IA__FcCharSetCopy(%struct._FcCharSet* nonnull %1358) #13
  br label %1367

1362:                                             ; preds = %1355
  %1363 = call %struct._FcCharSet* @IA__FcFreeTypeCharSet(%struct.FT_FaceRec_* %0, %struct._FcBlanks* undef)
  br label %1367

1364:                                             ; preds = %1357
  %1365 = call %struct._FcCharSet* @IA__FcFreeTypeCharSet(%struct.FT_FaceRec_* %0, %struct._FcBlanks* undef)
  %1366 = call %struct._FcCharSet* @IA__FcCharSetCopy(%struct._FcCharSet* %1365) #13
  store %struct._FcCharSet* %1366, %struct._FcCharSet** %3, align 8
  br label %1367

1367:                                             ; preds = %1362, %1364, %1360
  %1368 = phi %struct._FcCharSet* [ %1361, %1360 ], [ %1365, %1364 ], [ %1363, %1362 ]
  %1369 = icmp eq %struct._FcCharSet* %1368, null
  br i1 %1369, label %1519, label %1370

1370:                                             ; preds = %1367
  %1371 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %0, i64 0, i32 23
  %1372 = load %struct.FT_CharMapRec_*, %struct.FT_CharMapRec_** %1371, align 8
  %1373 = icmp eq %struct.FT_CharMapRec_* %1372, null
  br i1 %1373, label %1378, label %1374

1374:                                             ; preds = %1370
  %1375 = getelementptr inbounds %struct.FT_CharMapRec_, %struct.FT_CharMapRec_* %1372, i64 0, i32 1
  %1376 = load i32, i32* %1375, align 8
  %1377 = icmp eq i32 %1376, 1937337698
  br label %1378

1378:                                             ; preds = %1370, %1374
  %1379 = phi i1 [ false, %1370 ], [ %1377, %1374 ]
  %1380 = zext i1 %1379 to i32
  %1381 = call i32 @FcPatternObjectAddBool(%struct._FcPattern* %41, i32 48, i32 %1380) #13
  %1382 = icmp eq i32 %1381, 0
  br i1 %1382, label %1519, label %1383

1383:                                             ; preds = %1378
  %1384 = call fastcc i32 @FcFreeTypeSpacing(%struct.FT_FaceRec_* %0)
  %1385 = call i32 @FT_Get_BDF_Property(%struct.FT_FaceRec_* %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.26, i64 0, i64 0), %struct.BDF_PropertyRec_* nonnull %14) #13
  %1386 = icmp eq i32 %1385, 0
  br i1 %1386, label %1387, label %1414

1387:                                             ; preds = %1383
  %1388 = getelementptr inbounds %struct.BDF_PropertyRec_, %struct.BDF_PropertyRec_* %14, i64 0, i32 0
  %1389 = load i32, i32* %1388, align 8
  %1390 = icmp eq i32 %1389, 1
  br i1 %1390, label %1391, label %1414

1391:                                             ; preds = %1387
  %1392 = getelementptr inbounds %struct.BDF_PropertyRec_, %struct.BDF_PropertyRec_* %14, i64 0, i32 1, i32 0
  %1393 = load i8*, i8** %1392, align 8
  %1394 = icmp eq i8* %1393, null
  br i1 %1394, label %1414, label %1395

1395:                                             ; preds = %1391
  %1396 = call i32 @strcmp(i8* nonnull %1393, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.27, i64 0, i64 0)) #14
  %1397 = icmp eq i32 %1396, 0
  br i1 %1397, label %1414, label %1398

1398:                                             ; preds = %1395
  %1399 = call i32 @strcmp(i8* nonnull %1393, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #14
  %1400 = icmp eq i32 %1399, 0
  br i1 %1400, label %1414, label %1401

1401:                                             ; preds = %1398
  %1402 = call i32 @strcmp(i8* nonnull %1393, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.29, i64 0, i64 0)) #14
  %1403 = icmp eq i32 %1402, 0
  br i1 %1403, label %1414, label %1404

1404:                                             ; preds = %1401
  %1405 = call i32 @strcmp(i8* nonnull %1393, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30, i64 0, i64 0)) #14
  %1406 = icmp eq i32 %1405, 0
  br i1 %1406, label %1414, label %1407

1407:                                             ; preds = %1404
  %1408 = call i32 @strcmp(i8* nonnull %1393, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i64 0, i64 0)) #14
  %1409 = icmp eq i32 %1408, 0
  br i1 %1409, label %1413, label %1410

1410:                                             ; preds = %1407
  %1411 = call i32 @strcmp(i8* nonnull %1393, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)) #14
  %1412 = icmp eq i32 %1411, 0
  br i1 %1412, label %1413, label %1414

1413:                                             ; preds = %1410, %1407
  br label %1414

1414:                                             ; preds = %1401, %1404, %1395, %1398, %1410, %1391, %1413, %1387, %1383
  %1415 = phi i32 [ %1384, %1410 ], [ 0, %1413 ], [ %1384, %1391 ], [ %1384, %1387 ], [ %1384, %1383 ], [ 110, %1398 ], [ 110, %1395 ], [ 100, %1404 ], [ 100, %1401 ]
  %1416 = call i32 @IA__FcCharSetCount(%struct._FcCharSet* nonnull %1368) #13
  %1417 = icmp eq i32 %1416, 0
  br i1 %1417, label %1418, label %1421

1418:                                             ; preds = %1414
  %1419 = call i32 @FT_Get_BDF_Property(%struct.FT_FaceRec_* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.33, i64 0, i64 0), %struct.BDF_PropertyRec_* nonnull %14) #13
  %1420 = icmp eq i32 %1419, 0
  br i1 %1420, label %1517, label %1421

1421:                                             ; preds = %1418, %1414
  %1422 = call i32 @FcPatternObjectAddCharSet(%struct._FcPattern* %41, i32 33, %struct._FcCharSet* nonnull %1368) #13
  %1423 = icmp eq i32 %1422, 0
  br i1 %1423, label %1517, label %1424

1424:                                             ; preds = %1421
  br i1 %1379, label %1440, label %1425

1425:                                             ; preds = %1424
  %1426 = icmp eq %struct._FcLangSet** %4, null
  br i1 %1426, label %1432, label %1427

1427:                                             ; preds = %1425
  %1428 = load %struct._FcLangSet*, %struct._FcLangSet** %4, align 8
  %1429 = icmp eq %struct._FcLangSet* %1428, null
  br i1 %1429, label %1434, label %1430

1430:                                             ; preds = %1427
  %1431 = call %struct._FcLangSet* @IA__FcLangSetCopy(%struct._FcLangSet* nonnull %1428) #13
  br label %1437

1432:                                             ; preds = %1425
  %1433 = call %struct._FcLangSet* @FcFreeTypeLangSet(%struct._FcCharSet* nonnull %1368, i8* %1042) #13
  br label %1437

1434:                                             ; preds = %1427
  %1435 = call %struct._FcLangSet* @FcFreeTypeLangSet(%struct._FcCharSet* nonnull %1368, i8* %1042) #13
  %1436 = call %struct._FcLangSet* @IA__FcLangSetCopy(%struct._FcLangSet* %1435) #13
  store %struct._FcLangSet* %1436, %struct._FcLangSet** %4, align 8
  br label %1437

1437:                                             ; preds = %1432, %1434, %1430
  %1438 = phi %struct._FcLangSet* [ %1431, %1430 ], [ %1435, %1434 ], [ %1433, %1432 ]
  %1439 = icmp eq %struct._FcLangSet* %1438, null
  br i1 %1439, label %1517, label %1442

1440:                                             ; preds = %1424
  %1441 = call %struct._FcLangSet* @IA__FcLangSetCreate() #13
  br label %1442

1442:                                             ; preds = %1437, %1440
  %1443 = phi %struct._FcLangSet* [ %1441, %1440 ], [ %1438, %1437 ]
  %1444 = call i32 @FcPatternObjectAddLangSet(%struct._FcPattern* %41, i32 34, %struct._FcLangSet* %1443) #13
  %1445 = icmp eq i32 %1444, 0
  call void @IA__FcLangSetDestroy(%struct._FcLangSet* %1443) #13
  br i1 %1445, label %1517, label %1446

1446:                                             ; preds = %1442
  %1447 = icmp eq i32 %1415, 0
  br i1 %1447, label %1451, label %1448

1448:                                             ; preds = %1446
  %1449 = call i32 @FcPatternObjectAddInteger(%struct._FcPattern* %41, i32 13, i32 %1415) #13
  %1450 = icmp eq i32 %1449, 0
  br i1 %1450, label %1517, label %1451

1451:                                             ; preds = %1448, %1446
  %1452 = load i64, i64* %44, align 8
  %1453 = and i64 %1452, 1
  %1454 = icmp eq i64 %1453, 0
  br i1 %1454, label %1455, label %1497

1455:                                             ; preds = %1451
  %1456 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %0, i64 0, i32 7
  %1457 = load i32, i32* %1456, align 8
  %1458 = icmp sgt i32 %1457, 0
  br i1 %1458, label %1459, label %1494

1459:                                             ; preds = %1455
  %1460 = bitcast %struct.BDF_PropertyRec_* %11 to i8*
  %1461 = getelementptr inbounds %struct.BDF_PropertyRec_, %struct.BDF_PropertyRec_* %11, i64 0, i32 0
  %1462 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %0, i64 0, i32 8
  %1463 = getelementptr inbounds %struct.BDF_PropertyRec_, %struct.BDF_PropertyRec_* %11, i64 0, i32 1
  %1464 = bitcast %union.anon* %1463 to i32*
  br label %1469

1465:                                             ; preds = %1489
  %1466 = load i32, i32* %1456, align 8
  %1467 = sext i32 %1466 to i64
  %1468 = icmp slt i64 %1493, %1467
  br i1 %1468, label %1469, label %1494

1469:                                             ; preds = %1459, %1465
  %1470 = phi i64 [ 0, %1459 ], [ %1493, %1465 ]
  %1471 = phi i32 [ %1457, %1459 ], [ %1466, %1465 ]
  %1472 = icmp eq i32 %1471, 1
  br i1 %1472, label %1473, label %1483

1473:                                             ; preds = %1469
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %1460) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1460, i8 -86, i64 16, i1 false) #13
  %1474 = call i32 @FT_Get_BDF_Property(%struct.FT_FaceRec_* %0, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.33, i64 0, i64 0), %struct.BDF_PropertyRec_* nonnull %11) #13
  %1475 = icmp eq i32 %1474, 0
  %1476 = load i32, i32* %1461, align 8
  %1477 = icmp eq i32 %1476, 2
  %1478 = and i1 %1475, %1477
  br i1 %1478, label %1480, label %1479

1479:                                             ; preds = %1473
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1460) #13
  br label %1483

1480:                                             ; preds = %1473
  %1481 = load i32, i32* %1464, align 8
  %1482 = sitofp i32 %1481 to double
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %1460) #13
  br label %1489

1483:                                             ; preds = %1479, %1469
  %1484 = load %struct.FT_Bitmap_Size_*, %struct.FT_Bitmap_Size_** %1462, align 8
  %1485 = getelementptr inbounds %struct.FT_Bitmap_Size_, %struct.FT_Bitmap_Size_* %1484, i64 %1470, i32 4
  %1486 = load i64, i64* %1485, align 8
  %1487 = sitofp i64 %1486 to double
  %1488 = fmul double %1487, 1.562500e-02
  br label %1489

1489:                                             ; preds = %1480, %1483
  %1490 = phi double [ %1488, %1483 ], [ %1482, %1480 ]
  %1491 = call i32 @FcPatternObjectAddDouble(%struct._FcPattern* %41, i32 12, double %1490) #13
  %1492 = icmp eq i32 %1491, 0
  %1493 = add nuw nsw i64 %1470, 1
  br i1 %1492, label %1517, label %1465

1494:                                             ; preds = %1465, %1455
  %1495 = call i32 @FcPatternObjectAddBool(%struct._FcPattern* %41, i32 15, i32 0) #13
  %1496 = icmp eq i32 %1495, 0
  br i1 %1496, label %1517, label %1497

1497:                                             ; preds = %1494, %1451
  %1498 = call i8* @FT_Get_X11_Font_Format(%struct.FT_FaceRec_* %0) #13
  %1499 = icmp eq i8* %1498, null
  br i1 %1499, label %1503, label %1500

1500:                                             ; preds = %1497
  %1501 = call i32 @FcPatternObjectAddString(%struct._FcPattern* %41, i32 37, i8* nonnull %1498) #13
  %1502 = icmp eq i32 %1501, 0
  br i1 %1502, label %1517, label %1503

1503:                                             ; preds = %1497, %1500
  call void @IA__FcCharSetDestroy(%struct._FcCharSet* nonnull %1368) #13
  %1504 = icmp eq i8* %226, null
  br i1 %1504, label %1506, label %1505

1505:                                             ; preds = %1503
  call void @free(i8* nonnull %226) #13
  br label %1506

1506:                                             ; preds = %1503, %1505
  %1507 = load %struct.FT_MM_Var_*, %struct.FT_MM_Var_** %12, align 8
  %1508 = icmp eq %struct.FT_MM_Var_* %1507, null
  br i1 %1508, label %1522, label %1509

1509:                                             ; preds = %1506
  %1510 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %0, i64 0, i32 21
  %1511 = load %struct.FT_GlyphSlotRec_*, %struct.FT_GlyphSlotRec_** %1510, align 8
  %1512 = icmp eq %struct.FT_GlyphSlotRec_* %1511, null
  br i1 %1512, label %1522, label %1513

1513:                                             ; preds = %1509
  %1514 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %1511, i64 0, i32 0
  %1515 = load %struct.FT_LibraryRec_*, %struct.FT_LibraryRec_** %1514, align 8
  %1516 = call i32 @FT_Done_MM_Var(%struct.FT_LibraryRec_* %1515, %struct.FT_MM_Var_* nonnull %1507) #13
  br label %1522

1517:                                             ; preds = %1489, %1494, %1500, %1448, %1442, %1437, %1421, %1418
  call void @IA__FcCharSetDestroy(%struct._FcCharSet* nonnull %1368) #13
  br label %1519

1518:                                             ; preds = %180, %111, %71, %66, %194, %141, %43, %50, %57, %138
  call void @IA__FcPatternDestroy(%struct._FcPattern* %41) #13
  br label %1522

1519:                                             ; preds = %1077, %1074, %877, %819, %736, %646, %673, %669, %700, %696, %883, %892, %1036, %1378, %1367, %1352, %1349, %1346, %1341, %1331, %1050, %899, %886, %1517
  call void @IA__FcPatternDestroy(%struct._FcPattern* %41) #13
  %1520 = icmp eq i8* %226, null
  br i1 %1520, label %1522, label %1521

1521:                                             ; preds = %1519
  call void @free(i8* nonnull %226) #13
  br label %1522

1522:                                             ; preds = %1518, %1521, %6, %1519, %1513, %1506, %1509
  %1523 = phi %struct._FcPattern* [ %41, %1509 ], [ %41, %1506 ], [ %41, %1513 ], [ null, %1519 ], [ null, %6 ], [ null, %1521 ], [ null, %1518 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %39)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %38)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %37)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %36)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %35)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %34)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %33) #13
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %32) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #13
  ret %struct._FcPattern* %1523

1524:                                             ; preds = %1266
  %1525 = call i8* @FcStrContainsIgnoreBlanksAndCase(i8* %1267, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.111, i64 0, i64 0)) #13
  %1526 = icmp eq i8* %1525, null
  br i1 %1526, label %1527, label %1270

1527:                                             ; preds = %1524
  %1528 = call i8* @FcStrContainsIgnoreBlanksAndCase(i8* %1267, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.112, i64 0, i64 0)) #13
  %1529 = icmp eq i8* %1528, null
  br i1 %1529, label %1274, label %1270

1530:                                             ; preds = %1285
  %1531 = call i8* @FcStrContainsIgnoreBlanksAndCase(i8* %1286, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.114, i64 0, i64 0)) #13
  %1532 = icmp eq i8* %1531, null
  br i1 %1532, label %1533, label %1289

1533:                                             ; preds = %1530
  %1534 = call i8* @FcStrContainsIgnoreBlanksAndCase(i8* %1286, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.115, i64 0, i64 0)) #13
  %1535 = icmp eq i8* %1534, null
  br i1 %1535, label %1536, label %1289

1536:                                             ; preds = %1533
  %1537 = call i8* @FcStrContainsIgnoreBlanksAndCase(i8* %1286, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.116, i64 0, i64 0)) #13
  %1538 = icmp eq i8* %1537, null
  br i1 %1538, label %1539, label %1289

1539:                                             ; preds = %1536
  %1540 = call i8* @FcStrContainsIgnoreBlanksAndCase(i8* %1286, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.117, i64 0, i64 0)) #13
  %1541 = icmp eq i8* %1540, null
  br i1 %1541, label %1542, label %1289

1542:                                             ; preds = %1539
  %1543 = call i8* @FcStrContainsIgnoreBlanksAndCase(i8* %1286, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.118, i64 0, i64 0)) #13
  %1544 = icmp eq i8* %1543, null
  br i1 %1544, label %1293, label %1289

1545:                                             ; preds = %1167
  %1546 = call i32 @FcStrCmpIgnoreBlanksAndCase(i8* nonnull %1162, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.103, i64 0, i64 0)) #13
  %1547 = icmp eq i32 %1546, 0
  br i1 %1547, label %1170, label %1548

1548:                                             ; preds = %1545
  %1549 = call i32 @FcStrCmpIgnoreBlanksAndCase(i8* nonnull %1162, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.104, i64 0, i64 0)) #13
  %1550 = icmp eq i32 %1549, 0
  br i1 %1550, label %1170, label %1551

1551:                                             ; preds = %1548
  %1552 = call i32 @FcStrCmpIgnoreBlanksAndCase(i8* nonnull %1162, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.86, i64 0, i64 0)) #13
  %1553 = icmp eq i32 %1552, 0
  br i1 %1553, label %1170, label %1554

1554:                                             ; preds = %1551
  %1555 = call i32 @FcStrCmpIgnoreBlanksAndCase(i8* nonnull %1162, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.105, i64 0, i64 0)) #13
  %1556 = icmp eq i32 %1555, 0
  br i1 %1556, label %1170, label %1557

1557:                                             ; preds = %1554
  %1558 = call i32 @FcStrCmpIgnoreBlanksAndCase(i8* nonnull %1162, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.106, i64 0, i64 0)) #13
  %1559 = icmp eq i32 %1558, 0
  br i1 %1559, label %1170, label %1560

1560:                                             ; preds = %1557
  %1561 = call i32 @FcStrCmpIgnoreBlanksAndCase(i8* nonnull %1162, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.107, i64 0, i64 0)) #13
  %1562 = icmp eq i32 %1561, 0
  br i1 %1562, label %1170, label %1563

1563:                                             ; preds = %1560
  %1564 = call i32 @FcStrCmpIgnoreBlanksAndCase(i8* nonnull %1162, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.108, i64 0, i64 0)) #13
  %1565 = icmp eq i32 %1564, 0
  br i1 %1565, label %1170, label %1566

1566:                                             ; preds = %1563
  %1567 = call i32 @FcStrCmpIgnoreBlanksAndCase(i8* nonnull %1162, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.109, i64 0, i64 0)) #13
  %1568 = icmp eq i32 %1567, 0
  br i1 %1568, label %1170, label %1174

1569:                                             ; preds = %906
  %1570 = and i64 %909, 524288
  %1571 = icmp eq i64 %1570, 0
  br i1 %1571, label %1574, label %1572

1572:                                             ; preds = %1569
  %1573 = icmp eq i8* %917, null
  br i1 %1573, label %1574, label %918

1574:                                             ; preds = %1572, %1569
  %1575 = phi i8* [ getelementptr inbounds ([4 x %struct.anon], [4 x %struct.anon]* @FcCodePageRange, i64 0, i64 2, i32 1, i64 0), %1572 ], [ %917, %1569 ]
  %1576 = and i64 %909, 1048576
  %1577 = icmp eq i64 %1576, 0
  br i1 %1577, label %918, label %1578

1578:                                             ; preds = %1574
  %1579 = icmp eq i8* %1575, null
  %1580 = select i1 %1579, i8* getelementptr inbounds ([4 x %struct.anon], [4 x %struct.anon]* @FcCodePageRange, i64 0, i64 3, i32 1, i64 0), i8* null
  br label %918

1581:                                             ; preds = %537
  %1582 = getelementptr inbounds [335 x %struct.FcFtLanguage], [335 x %struct.FcFtLanguage]* @fcFtLanguage, i64 0, i64 %538, i32 0
  %1583 = load i16, i16* %1582, align 4
  %1584 = icmp eq i16 %1583, %431
  br i1 %1584, label %1585, label %1589

1585:                                             ; preds = %1581
  %1586 = getelementptr inbounds [335 x %struct.FcFtLanguage], [335 x %struct.FcFtLanguage]* @fcFtLanguage, i64 0, i64 %538, i32 1
  %1587 = load i16, i16* %1586, align 2
  %1588 = icmp eq i16 %1587, %521
  br i1 %1588, label %533, label %1589

1589:                                             ; preds = %1585, %1581
  %1590 = add nuw nsw i64 %523, 2
  br label %522
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct._FcPattern* @IA__FcFreeTypeQuery(i8*, i32, %struct._FcBlanks* nocapture readnone, i32*) #0 {
  %5 = alloca %struct.FT_FaceRec_*, align 8
  %6 = alloca %struct.FT_LibraryRec_*, align 8
  %7 = bitcast %struct.FT_FaceRec_** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #13
  store %struct.FT_FaceRec_* inttoptr (i64 -6148914691236517206 to %struct.FT_FaceRec_*), %struct.FT_FaceRec_** %5, align 8
  %8 = bitcast %struct.FT_LibraryRec_** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #13
  store %struct.FT_LibraryRec_* inttoptr (i64 -6148914691236517206 to %struct.FT_LibraryRec_*), %struct.FT_LibraryRec_** %6, align 8
  %9 = call i32 @FT_Init_FreeType(%struct.FT_LibraryRec_** nonnull %6) #13
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %32

11:                                               ; preds = %4
  %12 = load %struct.FT_LibraryRec_*, %struct.FT_LibraryRec_** %6, align 8
  %13 = and i32 %1, 2147483647
  %14 = zext i32 %13 to i64
  %15 = call i32 @FT_New_Face(%struct.FT_LibraryRec_* %12, i8* %0, i64 %14, %struct.FT_FaceRec_** nonnull %5) #13
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %28

17:                                               ; preds = %11
  %18 = icmp eq i32* %3, null
  %19 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %5, align 8
  br i1 %18, label %24, label %20

20:                                               ; preds = %17
  %21 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %19, i64 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = trunc i64 %22 to i32
  store i32 %23, i32* %3, align 4
  br label %24

24:                                               ; preds = %17, %20
  %25 = call fastcc %struct._FcPattern* @FcFreeTypeQueryFaceInternal(%struct.FT_FaceRec_* %19, i8* %0, i32 %1, %struct._FcCharSet** null, %struct._FcLangSet** null, %struct.FcNameMapping** null)
  %26 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %5, align 8
  %27 = call i32 @FT_Done_Face(%struct.FT_FaceRec_* %26) #13
  br label %28

28:                                               ; preds = %11, %24
  %29 = phi %struct._FcPattern* [ null, %11 ], [ %25, %24 ]
  %30 = load %struct.FT_LibraryRec_*, %struct.FT_LibraryRec_** %6, align 8
  %31 = call i32 @FT_Done_FreeType(%struct.FT_LibraryRec_* %30) #13
  br label %32

32:                                               ; preds = %4, %28
  %33 = phi %struct._FcPattern* [ %29, %28 ], [ null, %4 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #13
  ret %struct._FcPattern* %33
}

declare i32 @FT_Init_FreeType(%struct.FT_LibraryRec_**) local_unnamed_addr #2

declare i32 @FT_New_Face(%struct.FT_LibraryRec_*, i8*, i64, %struct.FT_FaceRec_**) local_unnamed_addr #2

declare i32 @FT_Done_Face(%struct.FT_FaceRec_*) local_unnamed_addr #2

declare i32 @FT_Done_FreeType(%struct.FT_LibraryRec_*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @IA__FcFreeTypeQueryAll(i8*, i32, %struct._FcBlanks* nocapture readnone, i32*, %struct._FcFontSet*) #0 {
  %6 = alloca %struct.FT_FaceRec_*, align 8
  %7 = alloca %struct.FT_LibraryRec_*, align 8
  %8 = alloca %struct._FcCharSet*, align 8
  %9 = alloca %struct._FcLangSet*, align 8
  %10 = alloca %struct.FcNameMapping*, align 8
  %11 = alloca %struct.FT_MM_Var_*, align 8
  %12 = bitcast %struct.FT_FaceRec_** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12) #13
  store %struct.FT_FaceRec_* null, %struct.FT_FaceRec_** %6, align 8
  %13 = bitcast %struct.FT_LibraryRec_** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #13
  store %struct.FT_LibraryRec_* null, %struct.FT_LibraryRec_** %7, align 8
  %14 = bitcast %struct._FcCharSet** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #13
  store %struct._FcCharSet* null, %struct._FcCharSet** %8, align 8
  %15 = bitcast %struct._FcLangSet** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15) #13
  store %struct._FcLangSet* null, %struct._FcLangSet** %9, align 8
  %16 = bitcast %struct.FcNameMapping** %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #13
  store %struct.FcNameMapping* null, %struct.FcNameMapping** %10, align 8
  %17 = bitcast %struct.FT_MM_Var_** %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #13
  store %struct.FT_MM_Var_* null, %struct.FT_MM_Var_** %11, align 8
  %18 = icmp ne i32 %1, -1
  %19 = and i32 %1, 65535
  %20 = select i1 %18, i32 %19, i32 0
  %21 = lshr i32 %1, 16
  %22 = select i1 %18, i32 %21, i32 0
  %23 = icmp ne i32* %3, null
  br i1 %23, label %24, label %25

24:                                               ; preds = %5
  store i32 0, i32* %3, align 4
  br label %25

25:                                               ; preds = %24, %5
  %26 = call i32 @FT_Init_FreeType(%struct.FT_LibraryRec_** nonnull %7) #13
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %165

28:                                               ; preds = %25
  %29 = load %struct.FT_LibraryRec_*, %struct.FT_LibraryRec_** %7, align 8
  %30 = zext i32 %20 to i64
  %31 = call i32 @FT_New_Face(%struct.FT_LibraryRec_* %29, i8* %0, i64 %30, %struct.FT_FaceRec_** nonnull %6) #13
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %151

33:                                               ; preds = %28
  %34 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %6, align 8
  %35 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %34, i64 0, i32 0
  %36 = load i64, i64* %35, align 8
  %37 = trunc i64 %36 to i32
  %38 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %34, i64 0, i32 3
  %39 = load i64, i64* %38, align 8
  %40 = lshr i64 %39, 16
  %41 = trunc i64 %40 to i32
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %52, label %43

43:                                               ; preds = %33
  %44 = xor i1 %18, true
  %45 = icmp ne i32 %22, 0
  %46 = or i1 %45, %44
  br i1 %46, label %47, label %52

47:                                               ; preds = %43
  %48 = call i32 @FT_Get_MM_Var(%struct.FT_FaceRec_* %34, %struct.FT_MM_Var_** nonnull %11) #13
  %49 = load %struct.FT_MM_Var_*, %struct.FT_MM_Var_** %11, align 8
  %50 = icmp eq %struct.FT_MM_Var_* %49, null
  %51 = select i1 %50, i32 0, i32 %41
  br label %52

52:                                               ; preds = %47, %33, %43
  %53 = phi i32 [ %41, %43 ], [ 0, %33 ], [ %51, %47 ]
  br i1 %23, label %54, label %55

54:                                               ; preds = %52
  store i32 %37, i32* %3, align 4
  br label %55

55:                                               ; preds = %54, %52
  %56 = icmp eq %struct._FcFontSet* %4, null
  %57 = xor i1 %18, true
  %58 = bitcast %struct.FcNameMapping** %10 to i8**
  br label %59

59:                                               ; preds = %144, %55
  %60 = phi i32 [ %20, %55 ], [ %139, %144 ]
  %61 = phi i32 [ %22, %55 ], [ %140, %144 ]
  %62 = phi i32 [ 0, %55 ], [ %115, %144 ]
  %63 = icmp eq i32 %61, 32768
  %64 = icmp ugt i32 %61, %53
  %65 = or i1 %63, %64
  br i1 %65, label %66, label %69

66:                                               ; preds = %59
  %67 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %6, align 8
  %68 = call i32 @FT_Set_Var_Design_Coordinates(%struct.FT_FaceRec_* %67, i32 0, i64* null) #13
  br label %99

69:                                               ; preds = %59
  %70 = icmp eq i32 %61, 0
  br i1 %70, label %99, label %71

71:                                               ; preds = %69
  %72 = load %struct.FT_MM_Var_*, %struct.FT_MM_Var_** %11, align 8
  %73 = getelementptr inbounds %struct.FT_MM_Var_, %struct.FT_MM_Var_* %72, i64 0, i32 4
  %74 = load %struct.FT_Var_Named_Style_*, %struct.FT_Var_Named_Style_** %73, align 8
  %75 = add i32 %61, -1
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds %struct.FT_Var_Named_Style_, %struct.FT_Var_Named_Style_* %74, i64 %76, i32 0
  %78 = load i64*, i64** %77, align 8
  %79 = getelementptr inbounds %struct.FT_MM_Var_, %struct.FT_MM_Var_* %72, i64 0, i32 0
  %80 = load i32, i32* %79, align 8
  %81 = icmp eq i32 %80, 0
  br i1 %81, label %114, label %82

82:                                               ; preds = %71
  %83 = getelementptr inbounds %struct.FT_MM_Var_, %struct.FT_MM_Var_* %72, i64 0, i32 3
  %84 = load %struct.FT_Var_Axis_*, %struct.FT_Var_Axis_** %83, align 8
  %85 = zext i32 %80 to i64
  br label %88

86:                                               ; preds = %88
  %87 = icmp ult i64 %95, %85
  br i1 %87, label %88, label %114

88:                                               ; preds = %82, %86
  %89 = phi i64 [ 0, %82 ], [ %95, %86 ]
  %90 = getelementptr inbounds i64, i64* %78, i64 %89
  %91 = load i64, i64* %90, align 8
  %92 = getelementptr inbounds %struct.FT_Var_Axis_, %struct.FT_Var_Axis_* %84, i64 %89, i32 2
  %93 = load i64, i64* %92, align 8
  %94 = icmp eq i64 %91, %93
  %95 = add nuw nsw i64 %89, 1
  br i1 %94, label %86, label %96

96:                                               ; preds = %88
  %97 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %6, align 8
  %98 = call i32 @FT_Set_Var_Design_Coordinates(%struct.FT_FaceRec_* %97, i32 %80, i64* %78) #13
  br label %99

99:                                               ; preds = %96, %69, %66
  %100 = shl i32 %61, 16
  %101 = add i32 %100, %60
  %102 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %6, align 8
  %103 = call fastcc %struct._FcPattern* @FcFreeTypeQueryFaceInternal(%struct.FT_FaceRec_* %102, i8* %0, i32 %101, %struct._FcCharSet** nonnull %8, %struct._FcLangSet** nonnull %9, %struct.FcNameMapping** nonnull %10)
  %104 = icmp eq %struct._FcPattern* %103, null
  br i1 %104, label %111, label %105

105:                                              ; preds = %99
  %106 = add i32 %62, 1
  br i1 %56, label %110, label %107

107:                                              ; preds = %105
  %108 = call i32 @IA__FcFontSetAdd(%struct._FcFontSet* nonnull %4, %struct._FcPattern* nonnull %103) #13
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %114

110:                                              ; preds = %107, %105
  call void @IA__FcPatternDestroy(%struct._FcPattern* nonnull %103) #13
  br label %114

111:                                              ; preds = %99
  %112 = xor i1 %63, true
  %113 = zext i1 %112 to i32
  br label %114

114:                                              ; preds = %86, %71, %111, %107, %110
  %115 = phi i32 [ %106, %107 ], [ %106, %110 ], [ %62, %111 ], [ %62, %71 ], [ %62, %86 ]
  %116 = phi i32 [ 0, %107 ], [ 0, %110 ], [ %113, %111 ], [ 0, %71 ], [ 0, %86 ]
  %117 = icmp ult i32 %61, %53
  %118 = and i1 %117, %57
  br i1 %118, label %119, label %121

119:                                              ; preds = %114
  %120 = add nuw i32 %61, 1
  br label %135

121:                                              ; preds = %114
  %122 = icmp eq i32 %61, %53
  %123 = and i1 %122, %57
  br i1 %123, label %135, label %124

124:                                              ; preds = %121
  %125 = load i8*, i8** %58, align 8
  call void @free(i8* %125) #13
  store %struct.FcNameMapping* null, %struct.FcNameMapping** %10, align 8
  %126 = load %struct._FcLangSet*, %struct._FcLangSet** %9, align 8
  call void @IA__FcLangSetDestroy(%struct._FcLangSet* %126) #13
  store %struct._FcLangSet* null, %struct._FcLangSet** %9, align 8
  %127 = load %struct._FcCharSet*, %struct._FcCharSet** %8, align 8
  call void @IA__FcCharSetDestroy(%struct._FcCharSet* %127) #13
  store %struct._FcCharSet* null, %struct._FcCharSet** %8, align 8
  %128 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %6, align 8
  %129 = call i32 @FT_Done_Face(%struct.FT_FaceRec_* %128) #13
  store %struct.FT_FaceRec_* null, %struct.FT_FaceRec_** %6, align 8
  %130 = add i32 %60, 1
  %131 = load %struct.FT_LibraryRec_*, %struct.FT_LibraryRec_** %7, align 8
  %132 = zext i32 %130 to i64
  %133 = call i32 @FT_New_Face(%struct.FT_LibraryRec_* %131, i8* %0, i64 %132, %struct.FT_FaceRec_** nonnull %6) #13
  %134 = icmp eq i32 %133, 0
  br i1 %134, label %135, label %138

135:                                              ; preds = %121, %124, %119
  %136 = phi i32 [ %130, %124 ], [ %60, %119 ], [ %60, %121 ]
  %137 = phi i32 [ %22, %124 ], [ %120, %119 ], [ 32768, %121 ]
  br label %138

138:                                              ; preds = %124, %135
  %139 = phi i32 [ %136, %135 ], [ %130, %124 ]
  %140 = phi i32 [ %137, %135 ], [ %22, %124 ]
  %141 = phi i32 [ 0, %135 ], [ 3, %124 ]
  %142 = or i32 %141, %116
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %149

144:                                              ; preds = %138
  %145 = icmp eq i32 %139, %20
  %146 = or i1 %145, %57
  %147 = icmp ult i32 %139, %37
  %148 = and i1 %147, %146
  br i1 %148, label %59, label %149

149:                                              ; preds = %138, %144
  %150 = load %struct.FT_MM_Var_*, %struct.FT_MM_Var_** %11, align 8
  br label %151

151:                                              ; preds = %149, %28
  %152 = phi %struct.FT_MM_Var_* [ null, %28 ], [ %150, %149 ]
  %153 = phi i32 [ 0, %28 ], [ %115, %149 ]
  %154 = load %struct.FT_LibraryRec_*, %struct.FT_LibraryRec_** %7, align 8
  %155 = call i32 @FT_Done_MM_Var(%struct.FT_LibraryRec_* %154, %struct.FT_MM_Var_* %152) #13
  %156 = load %struct._FcLangSet*, %struct._FcLangSet** %9, align 8
  call void @IA__FcLangSetDestroy(%struct._FcLangSet* %156) #13
  %157 = load %struct._FcCharSet*, %struct._FcCharSet** %8, align 8
  call void @IA__FcCharSetDestroy(%struct._FcCharSet* %157) #13
  %158 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %6, align 8
  %159 = icmp eq %struct.FT_FaceRec_* %158, null
  br i1 %159, label %162, label %160

160:                                              ; preds = %151
  %161 = call i32 @FT_Done_Face(%struct.FT_FaceRec_* nonnull %158) #13
  br label %162

162:                                              ; preds = %151, %160
  %163 = load %struct.FT_LibraryRec_*, %struct.FT_LibraryRec_** %7, align 8
  %164 = call i32 @FT_Done_FreeType(%struct.FT_LibraryRec_* %163) #13
  br label %165

165:                                              ; preds = %25, %162
  %166 = phi i32 [ %153, %162 ], [ 0, %25 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12) #13
  ret i32 %166
}

declare i32 @FT_Get_MM_Var(%struct.FT_FaceRec_*, %struct.FT_MM_Var_**) local_unnamed_addr #2

declare i32 @FT_Set_Var_Design_Coordinates(%struct.FT_FaceRec_*, i32, i64*) local_unnamed_addr #2

declare hidden i32 @IA__FcFontSetAdd(%struct._FcFontSet*, %struct._FcPattern*) local_unnamed_addr #2

declare hidden void @IA__FcPatternDestroy(%struct._FcPattern*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

declare hidden void @IA__FcLangSetDestroy(%struct._FcLangSet*) local_unnamed_addr #2

declare hidden void @IA__FcCharSetDestroy(%struct._FcCharSet*) local_unnamed_addr #2

declare i32 @FT_Done_MM_Var(%struct.FT_LibraryRec_*, %struct.FT_MM_Var_*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @IA__FcFreeTypeCharIndex(%struct.FT_FaceRec_*, i32) #0 {
  %3 = icmp eq %struct.FT_FaceRec_* %0, null
  br i1 %3, label %70, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %0, i64 0, i32 23
  %6 = load %struct.FT_CharMapRec_*, %struct.FT_CharMapRec_** %5, align 8
  %7 = icmp eq %struct.FT_CharMapRec_* %6, null
  br i1 %7, label %22, label %8

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.FT_CharMapRec_, %struct.FT_CharMapRec_* %6, i64 0, i32 1
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 1937337698
  %12 = zext i1 %11 to i32
  %13 = zext i32 %1 to i64
  %14 = add nuw nsw i64 %13, 61440
  %15 = icmp ult i32 %1, 256
  %16 = getelementptr inbounds %struct.FT_CharMapRec_, %struct.FT_CharMapRec_* %6, i64 0, i32 1
  %17 = load i32, i32* %16, align 8
  %18 = zext i1 %11 to i64
  %19 = getelementptr inbounds [2 x i32], [2 x i32]* @fcFontEncodings, i64 0, i64 %18
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %17, %20
  br i1 %21, label %34, label %26

22:                                               ; preds = %4
  %23 = zext i32 %1 to i64
  %24 = add nuw nsw i64 %23, 61440
  %25 = icmp ult i32 %1, 256
  br label %26

26:                                               ; preds = %22, %8
  %27 = phi i1 [ %25, %22 ], [ %15, %8 ]
  %28 = phi i64 [ %24, %22 ], [ %14, %8 ]
  %29 = phi i64 [ %23, %22 ], [ %13, %8 ]
  %30 = phi i32 [ 0, %22 ], [ %12, %8 ]
  %31 = phi i32 [ 1970170211, %22 ], [ %20, %8 ]
  %32 = tail call i32 @FT_Select_Charmap(%struct.FT_FaceRec_* nonnull %0, i32 %31) #13
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %34, label %54

34:                                               ; preds = %8, %26
  %35 = phi i1 [ %15, %8 ], [ %27, %26 ]
  %36 = phi i64 [ %14, %8 ], [ %28, %26 ]
  %37 = phi i64 [ %13, %8 ], [ %29, %26 ]
  %38 = phi i32 [ %12, %8 ], [ %30, %26 ]
  %39 = tail call i32 @FT_Get_Char_Index(%struct.FT_FaceRec_* nonnull %0, i64 %37) #13
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %70

41:                                               ; preds = %34
  br i1 %35, label %42, label %54

42:                                               ; preds = %41
  %43 = load %struct.FT_CharMapRec_*, %struct.FT_CharMapRec_** %5, align 8
  %44 = icmp eq %struct.FT_CharMapRec_* %43, null
  br i1 %44, label %45, label %47

45:                                               ; preds = %42
  %46 = xor i32 %38, 1
  br label %62

47:                                               ; preds = %42
  %48 = getelementptr inbounds %struct.FT_CharMapRec_, %struct.FT_CharMapRec_* %43, i64 0, i32 1
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, 1937337698
  br i1 %50, label %51, label %54

51:                                               ; preds = %47
  %52 = tail call i32 @FT_Get_Char_Index(%struct.FT_FaceRec_* nonnull %0, i64 %36) #13
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %54, label %70

54:                                               ; preds = %51, %26, %41, %47
  %55 = phi i1 [ true, %47 ], [ false, %41 ], [ %27, %26 ], [ true, %51 ]
  %56 = phi i64 [ %36, %47 ], [ %36, %41 ], [ %28, %26 ], [ %36, %51 ]
  %57 = phi i64 [ %37, %47 ], [ %37, %41 ], [ %29, %26 ], [ %37, %51 ]
  %58 = phi i32 [ %38, %47 ], [ %38, %41 ], [ %30, %26 ], [ %38, %51 ]
  %59 = load %struct.FT_CharMapRec_*, %struct.FT_CharMapRec_** %5, align 8
  %60 = xor i32 %58, 1
  %61 = icmp eq %struct.FT_CharMapRec_* %59, null
  br i1 %61, label %62, label %72

62:                                               ; preds = %45, %54
  %63 = phi i32 [ %46, %45 ], [ %60, %54 ]
  %64 = phi i64 [ %37, %45 ], [ %57, %54 ]
  %65 = phi i64 [ %36, %45 ], [ %56, %54 ]
  %66 = phi i1 [ true, %45 ], [ %55, %54 ]
  %67 = zext i32 %63 to i64
  %68 = getelementptr inbounds [2 x i32], [2 x i32]* @fcFontEncodings, i64 0, i64 %67
  %69 = load i32, i32* %68, align 4
  br label %79

70:                                               ; preds = %51, %34, %86, %100, %103, %2
  %71 = phi i32 [ 0, %2 ], [ %39, %34 ], [ %52, %51 ], [ %90, %86 ], [ %101, %100 ], [ 0, %103 ]
  ret i32 %71

72:                                               ; preds = %54
  %73 = getelementptr inbounds %struct.FT_CharMapRec_, %struct.FT_CharMapRec_* %59, i64 0, i32 1
  %74 = load i32, i32* %73, align 8
  %75 = zext i32 %60 to i64
  %76 = getelementptr inbounds [2 x i32], [2 x i32]* @fcFontEncodings, i64 0, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = icmp eq i32 %74, %77
  br i1 %78, label %86, label %79

79:                                               ; preds = %62, %72
  %80 = phi i64 [ %64, %62 ], [ %57, %72 ]
  %81 = phi i64 [ %65, %62 ], [ %56, %72 ]
  %82 = phi i1 [ %66, %62 ], [ %55, %72 ]
  %83 = phi i32 [ %69, %62 ], [ %77, %72 ]
  %84 = tail call i32 @FT_Select_Charmap(%struct.FT_FaceRec_* nonnull %0, i32 %83) #13
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %103

86:                                               ; preds = %79, %72
  %87 = phi i64 [ %80, %79 ], [ %57, %72 ]
  %88 = phi i64 [ %81, %79 ], [ %56, %72 ]
  %89 = phi i1 [ %82, %79 ], [ %55, %72 ]
  %90 = tail call i32 @FT_Get_Char_Index(%struct.FT_FaceRec_* nonnull %0, i64 %87) #13
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %70

92:                                               ; preds = %86
  br i1 %89, label %93, label %103

93:                                               ; preds = %92
  %94 = load %struct.FT_CharMapRec_*, %struct.FT_CharMapRec_** %5, align 8
  %95 = icmp eq %struct.FT_CharMapRec_* %94, null
  br i1 %95, label %103, label %96

96:                                               ; preds = %93
  %97 = getelementptr inbounds %struct.FT_CharMapRec_, %struct.FT_CharMapRec_* %94, i64 0, i32 1
  %98 = load i32, i32* %97, align 8
  %99 = icmp eq i32 %98, 1937337698
  br i1 %99, label %100, label %103

100:                                              ; preds = %96
  %101 = tail call i32 @FT_Get_Char_Index(%struct.FT_FaceRec_* nonnull %0, i64 %88) #13
  %102 = icmp eq i32 %101, 0
  br i1 %102, label %103, label %70

103:                                              ; preds = %100, %96, %93, %92, %79
  br label %70
}

declare i32 @FT_Select_Charmap(%struct.FT_FaceRec_*, i32) local_unnamed_addr #2

declare i32 @FT_Get_Char_Index(%struct.FT_FaceRec_*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct._FcCharSet* @IA__FcFreeTypeCharSet(%struct.FT_FaceRec_*, %struct._FcBlanks* nocapture readnone) #0 {
  %3 = alloca i32, align 4
  %4 = tail call %struct._FcCharSet* @IA__FcCharSetCreate() #13
  %5 = icmp eq %struct._FcCharSet* %4, null
  br i1 %5, label %77, label %6

6:                                                ; preds = %2
  %7 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #13
  store i32 -1431655766, i32* %3, align 4
  %8 = tail call i32 @FT_Select_Charmap(%struct.FT_FaceRec_* %0, i32 1970170211) #13
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %74

10:                                               ; preds = %74, %6
  %11 = phi i32 [ 0, %6 ], [ 1, %74 ]
  %12 = call i64 @FT_Get_First_Char(%struct.FT_FaceRec_* %0, i32* nonnull %3) #13
  %13 = load i32, i32* %3, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %60, label %15

15:                                               ; preds = %10
  %16 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %0, i64 0, i32 21
  br label %17

17:                                               ; preds = %15, %53
  %18 = phi i32 [ %13, %15 ], [ %58, %53 ]
  %19 = phi i64 [ %12, %15 ], [ %57, %53 ]
  %20 = phi %struct._FcCharLeaf* [ null, %15 ], [ %55, %53 ]
  %21 = phi i32 [ -1, %15 ], [ %54, %53 ]
  %22 = trunc i64 %19 to i32
  %23 = icmp ult i32 %22, 32
  br i1 %23, label %24, label %36

24:                                               ; preds = %17
  %25 = call i32 @FT_Load_Glyph(%struct.FT_FaceRec_* %0, i32 %18, i32 515) #13
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %53

27:                                               ; preds = %24
  %28 = load %struct.FT_GlyphSlotRec_*, %struct.FT_GlyphSlotRec_** %16, align 8
  %29 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %28, i64 0, i32 9
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, 1869968492
  br i1 %31, label %32, label %36

32:                                               ; preds = %27
  %33 = getelementptr inbounds %struct.FT_GlyphSlotRec_, %struct.FT_GlyphSlotRec_* %28, i64 0, i32 13, i32 0
  %34 = load i16, i16* %33, align 8
  %35 = icmp eq i16 %34, 0
  br i1 %35, label %53, label %36

36:                                               ; preds = %17, %32, %27
  %37 = call i32 @IA__FcCharSetAddChar(%struct._FcCharSet* nonnull %4, i32 %22) #13
  %38 = lshr i32 %22, 8
  %39 = icmp eq i32 %38, %21
  br i1 %39, label %43, label %40

40:                                               ; preds = %36
  %41 = call %struct._FcCharLeaf* @FcCharSetFindLeafCreate(%struct._FcCharSet* nonnull %4, i32 %22) #13
  %42 = icmp eq %struct._FcCharLeaf* %41, null
  br i1 %42, label %73, label %43

43:                                               ; preds = %40, %36
  %44 = phi i32 [ %38, %40 ], [ %21, %36 ]
  %45 = phi %struct._FcCharLeaf* [ %41, %40 ], [ %20, %36 ]
  %46 = and i32 %22, 31
  %47 = shl i32 1, %46
  %48 = lshr i64 %19, 5
  %49 = and i64 %48, 7
  %50 = getelementptr inbounds %struct._FcCharLeaf, %struct._FcCharLeaf* %45, i64 0, i32 0, i64 %49
  %51 = load i32, i32* %50, align 4
  %52 = or i32 %51, %47
  store i32 %52, i32* %50, align 4
  br label %53

53:                                               ; preds = %43, %24, %32
  %54 = phi i32 [ %44, %43 ], [ %21, %24 ], [ %21, %32 ]
  %55 = phi %struct._FcCharLeaf* [ %45, %43 ], [ %20, %24 ], [ %20, %32 ]
  %56 = and i64 %19, 4294967295
  %57 = call i64 @FT_Get_Next_Char(%struct.FT_FaceRec_* %0, i64 %56, i32* nonnull %3) #13
  %58 = load i32, i32* %3, align 4
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %17

60:                                               ; preds = %53, %10
  %61 = icmp eq i32 %11, 1
  br i1 %61, label %62, label %72

62:                                               ; preds = %60, %69
  %63 = phi i32 [ %70, %69 ], [ 61440, %60 ]
  %64 = call i32 @IA__FcCharSetHasChar(%struct._FcCharSet* nonnull %4, i32 %63) #13
  %65 = icmp eq i32 %64, 0
  br i1 %65, label %69, label %66

66:                                               ; preds = %62
  %67 = add nsw i32 %63, -61440
  %68 = call i32 @IA__FcCharSetAddChar(%struct._FcCharSet* nonnull %4, i32 %67) #13
  br label %69

69:                                               ; preds = %62, %66
  %70 = add nuw nsw i32 %63, 1
  %71 = icmp eq i32 %70, 61696
  br i1 %71, label %72, label %62

72:                                               ; preds = %69, %60
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #13
  br label %78

73:                                               ; preds = %40
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #13
  br label %77

74:                                               ; preds = %6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #13
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #13
  store i32 -1431655766, i32* %3, align 4
  %75 = tail call i32 @FT_Select_Charmap(%struct.FT_FaceRec_* %0, i32 1937337698) #13
  %76 = icmp eq i32 %75, 0
  br i1 %76, label %10, label %80

77:                                               ; preds = %73, %2
  call void @IA__FcCharSetDestroy(%struct._FcCharSet* %4) #13
  br label %78

78:                                               ; preds = %80, %72, %77
  %79 = phi %struct._FcCharSet* [ null, %77 ], [ %4, %72 ], [ %4, %80 ]
  ret %struct._FcCharSet* %79

80:                                               ; preds = %74
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #13
  br label %78
}

declare hidden %struct._FcCharSet* @IA__FcCharSetCreate() local_unnamed_addr #2

declare i64 @FT_Get_First_Char(%struct.FT_FaceRec_*, i32*) local_unnamed_addr #2

declare i32 @FT_Load_Glyph(%struct.FT_FaceRec_*, i32, i32) local_unnamed_addr #2

declare hidden i32 @IA__FcCharSetAddChar(%struct._FcCharSet*, i32) local_unnamed_addr #2

declare hidden %struct._FcCharLeaf* @FcCharSetFindLeafCreate(%struct._FcCharSet*, i32) local_unnamed_addr #2

declare i64 @FT_Get_Next_Char(%struct.FT_FaceRec_*, i64, i32*) local_unnamed_addr #2

declare hidden i32 @IA__FcCharSetHasChar(%struct._FcCharSet*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct._FcCharSet* @IA__FcFreeTypeCharSetAndSpacing(%struct.FT_FaceRec_*, %struct._FcBlanks* nocapture readnone, i32*) #0 {
  %4 = icmp eq i32* %2, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %3
  %6 = tail call fastcc i32 @FcFreeTypeSpacing(%struct.FT_FaceRec_* %0)
  store i32 %6, i32* %2, align 4
  br label %7

7:                                                ; preds = %3, %5
  %8 = tail call %struct._FcCharSet* @IA__FcFreeTypeCharSet(%struct.FT_FaceRec_* %0, %struct._FcBlanks* undef)
  ret %struct._FcCharSet* %8
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @FcFreeTypeSpacing(%struct.FT_FaceRec_*) unnamed_addr #0 {
  %2 = alloca [3 x i64], align 16
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  %5 = bitcast [3 x i64]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %5, i8 0, i64 24, i1 false)
  %6 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %0, i64 0, i32 2
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, 1
  %9 = icmp eq i64 %8, 0
  %10 = select i1 %9, i32 515, i32 523
  br i1 %9, label %11, label %51

11:                                               ; preds = %1
  %12 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %0, i64 0, i32 7
  %13 = load i32, i32* %12, align 8
  %14 = icmp sgt i32 %13, 0
  br i1 %14, label %15, label %51

15:                                               ; preds = %11
  %16 = tail call i8* @FT_Get_Sfnt_Table(%struct.FT_FaceRec_* %0, i32 0) #13
  %17 = icmp eq i8* %16, null
  br i1 %17, label %51, label %18

18:                                               ; preds = %15
  %19 = load i32, i32* %12, align 8
  %20 = icmp sgt i32 %19, 1
  br i1 %20, label %21, label %48

21:                                               ; preds = %18
  %22 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %0, i64 0, i32 8
  %23 = load %struct.FT_Bitmap_Size_*, %struct.FT_Bitmap_Size_** %22, align 8
  %24 = sext i32 %19 to i64
  br label %25

25:                                               ; preds = %21, %25
  %26 = phi i64 [ 1, %21 ], [ %46, %25 ]
  %27 = phi i32 [ 0, %21 ], [ %45, %25 ]
  %28 = getelementptr inbounds %struct.FT_Bitmap_Size_, %struct.FT_Bitmap_Size_* %23, i64 %26, i32 0
  %29 = load i16, i16* %28, align 8
  %30 = sext i16 %29 to i32
  %31 = add nsw i32 %30, -16
  %32 = icmp slt i32 %31, 0
  %33 = sub nsw i32 16, %30
  %34 = select i1 %32, i32 %33, i32 %31
  %35 = sext i32 %27 to i64
  %36 = getelementptr inbounds %struct.FT_Bitmap_Size_, %struct.FT_Bitmap_Size_* %23, i64 %35, i32 0
  %37 = load i16, i16* %36, align 8
  %38 = sext i16 %37 to i32
  %39 = add nsw i32 %38, -16
  %40 = icmp slt i32 %39, 0
  %41 = sub nsw i32 16, %38
  %42 = select i1 %40, i32 %41, i32 %39
  %43 = icmp slt i32 %34, %42
  %44 = trunc i64 %26 to i32
  %45 = select i1 %43, i32 %44, i32 %27
  %46 = add nuw nsw i64 %26, 1
  %47 = icmp slt i64 %46, %24
  br i1 %47, label %25, label %48

48:                                               ; preds = %25, %18
  %49 = phi i32 [ 0, %18 ], [ %45, %25 ]
  %50 = tail call i32 @FT_Select_Size(%struct.FT_FaceRec_* %0, i32 %49) #13
  br label %51

51:                                               ; preds = %15, %1, %48, %11
  %52 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %52) #13
  store i32 -1431655766, i32* %3, align 4
  %53 = tail call i32 @FT_Select_Charmap(%struct.FT_FaceRec_* %0, i32 1970170211) #13
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %117

55:                                               ; preds = %117, %51
  %56 = call i64 @FT_Get_First_Char(%struct.FT_FaceRec_* %0, i32* nonnull %3) #13
  %57 = load i32, i32* %3, align 4
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %60

59:                                               ; preds = %55
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #13
  br label %151

60:                                               ; preds = %55
  %61 = bitcast i64* %4 to i8*
  br label %62

62:                                               ; preds = %60, %109
  %63 = phi i32 [ %57, %60 ], [ %113, %109 ]
  %64 = phi i64 [ %56, %60 ], [ %112, %109 ]
  %65 = phi i32 [ 0, %60 ], [ %110, %109 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %61) #13
  store i64 0, i64* %4, align 8
  %66 = call i32 @FT_Get_Advance(%struct.FT_FaceRec_* %0, i32 %63, i32 %10, i64* nonnull %4) #13
  %67 = icmp eq i32 %66, 0
  %68 = load i64, i64* %4, align 8
  %69 = icmp ne i64 %68, 0
  %70 = and i1 %67, %69
  br i1 %70, label %71, label %109

71:                                               ; preds = %62
  %72 = trunc i64 %68 to i32
  %73 = icmp eq i32 %65, 0
  br i1 %73, label %102, label %74

74:                                               ; preds = %71
  %75 = icmp slt i32 %72, 0
  %76 = sub nsw i32 0, %72
  %77 = select i1 %75, i32 %76, i32 %72
  %78 = zext i32 %65 to i64
  br label %79

79:                                               ; preds = %96, %74
  %80 = phi i64 [ 0, %74 ], [ %97, %96 ]
  %81 = phi i32 [ 0, %74 ], [ %98, %96 ]
  %82 = getelementptr inbounds [3 x i64], [3 x i64]* %2, i64 0, i64 %80
  %83 = load i64, i64* %82, align 8
  %84 = trunc i64 %83 to i32
  %85 = sub nsw i32 %72, %84
  %86 = icmp slt i32 %85, 0
  %87 = sub nsw i32 0, %85
  %88 = select i1 %86, i32 %87, i32 %85
  %89 = mul nsw i32 %88, 33
  %90 = icmp slt i32 %84, 0
  %91 = sub nsw i32 0, %84
  %92 = select i1 %90, i32 %91, i32 %84
  %93 = icmp slt i32 %77, %92
  %94 = select i1 %93, i32 %92, i32 %77
  %95 = icmp sgt i32 %89, %94
  br i1 %95, label %96, label %100

96:                                               ; preds = %79
  %97 = add nuw nsw i64 %80, 1
  %98 = add nuw i32 %81, 1
  %99 = icmp eq i64 %97, %78
  br i1 %99, label %102, label %79

100:                                              ; preds = %79
  %101 = trunc i64 %80 to i32
  br label %102

102:                                              ; preds = %96, %100, %71
  %103 = phi i32 [ 0, %71 ], [ %101, %100 ], [ %98, %96 ]
  %104 = icmp eq i32 %103, %65
  br i1 %104, label %105, label %109

105:                                              ; preds = %102
  %106 = add i32 %65, 1
  %107 = zext i32 %65 to i64
  %108 = getelementptr inbounds [3 x i64], [3 x i64]* %2, i64 0, i64 %107
  store i64 %68, i64* %108, align 8
  br label %109

109:                                              ; preds = %102, %105, %62
  %110 = phi i32 [ %65, %62 ], [ %106, %105 ], [ %65, %102 ]
  %111 = and i64 %64, 4294967295
  %112 = call i64 @FT_Get_Next_Char(%struct.FT_FaceRec_* %0, i64 %111, i32* nonnull %3) #13
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %61) #13
  %113 = load i32, i32* %3, align 4
  %114 = icmp ne i32 %113, 0
  %115 = icmp ult i32 %110, 3
  %116 = and i1 %115, %114
  br i1 %116, label %62, label %120

117:                                              ; preds = %51
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #13
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %52) #13
  store i32 -1431655766, i32* %3, align 4
  %118 = tail call i32 @FT_Select_Charmap(%struct.FT_FaceRec_* %0, i32 1937337698) #13
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %55, label %153

120:                                              ; preds = %109
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #13
  %121 = icmp ult i32 %110, 2
  br i1 %121, label %151, label %122

122:                                              ; preds = %120
  %123 = icmp eq i32 %110, 2
  br i1 %123, label %124, label %150

124:                                              ; preds = %122
  %125 = getelementptr inbounds [3 x i64], [3 x i64]* %2, i64 0, i64 0
  %126 = load i64, i64* %125, align 16
  %127 = trunc i64 %126 to i32
  %128 = getelementptr inbounds [3 x i64], [3 x i64]* %2, i64 0, i64 1
  %129 = load i64, i64* %128, align 8
  %130 = trunc i64 %129 to i32
  %131 = icmp sgt i32 %127, %130
  %132 = select i1 %131, i32 %130, i32 %127
  %133 = shl nsw i32 %132, 1
  %134 = icmp slt i32 %127, %130
  %135 = select i1 %134, i32 %130, i32 %127
  %136 = sub nsw i32 %133, %135
  %137 = icmp slt i32 %136, 0
  %138 = sub nsw i32 0, %136
  %139 = select i1 %137, i32 %138, i32 %136
  %140 = mul nsw i32 %139, 33
  %141 = icmp slt i32 %133, 0
  %142 = sub nsw i32 0, %133
  %143 = select i1 %141, i32 %142, i32 %133
  %144 = icmp slt i32 %135, 0
  %145 = sub nsw i32 0, %135
  %146 = select i1 %144, i32 %145, i32 %135
  %147 = icmp slt i32 %143, %146
  %148 = select i1 %147, i32 %146, i32 %143
  %149 = icmp sgt i32 %140, %148
  br i1 %149, label %150, label %151

150:                                              ; preds = %124, %122
  br label %151

151:                                              ; preds = %59, %153, %124, %120, %150
  %152 = phi i32 [ 0, %150 ], [ 100, %120 ], [ 90, %124 ], [ 100, %153 ], [ 100, %59 ]
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #13
  ret i32 %152

153:                                              ; preds = %117
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %52) #13
  br label %151
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare hidden void @FcInitDebug() local_unnamed_addr #2

declare hidden %struct._FcPattern* @IA__FcPatternCreate() local_unnamed_addr #2

declare hidden i32 @FcPatternObjectAddBool(%struct._FcPattern*, i32, i32) local_unnamed_addr #2

declare hidden double @IA__FcWeightFromOpenTypeDouble(double) local_unnamed_addr #2

declare hidden %struct._FcRange* @IA__FcRangeCreateDouble(double, double) local_unnamed_addr #2

declare hidden i32 @FcPatternObjectAddRange(%struct._FcPattern*, i32, %struct._FcRange*) local_unnamed_addr #2

declare hidden void @IA__FcRangeDestroy(%struct._FcRange*) local_unnamed_addr #2

declare hidden i32 @FcPatternObjectAddDouble(%struct._FcPattern*, i32, double) local_unnamed_addr #2

declare i8* @FT_Get_Sfnt_Table(%struct.FT_FaceRec_*, i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #4

declare i32 @FT_Get_Sfnt_Name_Count(%struct.FT_FaceRec_*) local_unnamed_addr #2

declare i32 @FT_Get_Sfnt_Name(%struct.FT_FaceRec_*, i32, %struct.FT_SfntName_*) local_unnamed_addr #2

; Function Attrs: nofree
declare void @qsort(i8*, i64, i64, i32 (i8*, i8*)* nocapture) local_unnamed_addr #5

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @name_mapping_cmp(i8* nocapture readonly, i8* nocapture readonly) #6 {
  %3 = bitcast i8* %0 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = bitcast i8* %1 to i32*
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = sub nsw i32 %4, %6
  br label %59

10:                                               ; preds = %2
  %11 = getelementptr inbounds i8, i8* %0, i64 4
  %12 = bitcast i8* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds i8, i8* %1, i64 4
  %15 = bitcast i8* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %13, %16
  br i1 %17, label %20, label %18

18:                                               ; preds = %10
  %19 = sub nsw i32 %13, %16
  br label %59

20:                                               ; preds = %10
  %21 = getelementptr inbounds i8, i8* %0, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds i8, i8* %1, i64 8
  %25 = bitcast i8* %24 to i32*
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %23, %26
  br i1 %27, label %30, label %28

28:                                               ; preds = %20
  %29 = sub nsw i32 %23, %26
  br label %59

30:                                               ; preds = %20
  %31 = getelementptr inbounds i8, i8* %0, i64 12
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds i8, i8* %1, i64 12
  %35 = bitcast i8* %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = icmp eq i32 %33, %36
  br i1 %37, label %49, label %38

38:                                               ; preds = %30
  switch i32 %4, label %47 [
    i32 1, label %41
    i32 3, label %39
  ]

39:                                               ; preds = %38
  %40 = icmp eq i32 %33, 1033
  br i1 %40, label %59, label %43

41:                                               ; preds = %38
  %42 = icmp eq i32 %33, 0
  br i1 %42, label %59, label %45

43:                                               ; preds = %39
  %44 = icmp eq i32 %36, 1033
  br i1 %44, label %59, label %47

45:                                               ; preds = %41
  %46 = icmp eq i32 %36, 0
  br i1 %46, label %59, label %47

47:                                               ; preds = %38, %43, %45
  %48 = sub nsw i32 %33, %36
  br label %59

49:                                               ; preds = %30
  %50 = getelementptr inbounds i8, i8* %0, i64 16
  %51 = bitcast i8* %50 to i32*
  %52 = load i32, i32* %51, align 4
  %53 = getelementptr inbounds i8, i8* %1, i64 16
  %54 = bitcast i8* %53 to i32*
  %55 = load i32, i32* %54, align 4
  %56 = icmp eq i32 %52, %55
  %57 = sub nsw i32 %52, %55
  %58 = select i1 %56, i32 0, i32 %57
  ret i32 %58

59:                                               ; preds = %43, %39, %45, %41, %47, %28, %18, %8
  %60 = phi i32 [ %9, %8 ], [ %19, %18 ], [ %29, %28 ], [ -1, %41 ], [ %48, %47 ], [ 1, %45 ], [ -1, %39 ], [ 1, %43 ]
  ret i32 %60
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i8* @FcSfntNameTranscode(%struct.FT_SfntName_* nocapture readonly) unnamed_addr #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %struct.FT_SfntName_, %struct.FT_SfntName_* %0, i64 0, i32 0
  %6 = load i16, i16* %5, align 8
  %7 = getelementptr inbounds %struct.FT_SfntName_, %struct.FT_SfntName_* %0, i64 0, i32 1
  br label %8

8:                                                ; preds = %250, %1
  %9 = phi i64 [ 0, %1 ], [ %251, %250 ]
  %10 = getelementptr inbounds [14 x %struct.FcFtEncoding], [14 x %struct.FcFtEncoding]* @fcFtEncoding, i64 0, i64 %9, i32 0
  %11 = load i16, i16* %10, align 16
  %12 = icmp eq i16 %11, %6
  br i1 %12, label %13, label %20

13:                                               ; preds = %8
  %14 = icmp eq i64 %9, 0
  br i1 %14, label %25, label %15

15:                                               ; preds = %13
  %16 = getelementptr inbounds [14 x %struct.FcFtEncoding], [14 x %struct.FcFtEncoding]* @fcFtEncoding, i64 0, i64 %9, i32 1
  %17 = load i16, i16* %16, align 2
  %18 = load i16, i16* %7, align 2
  %19 = icmp eq i16 %17, %18
  br i1 %19, label %25, label %20

20:                                               ; preds = %8, %15
  %21 = or i64 %9, 1
  %22 = getelementptr inbounds [14 x %struct.FcFtEncoding], [14 x %struct.FcFtEncoding]* @fcFtEncoding, i64 0, i64 %21, i32 0
  %23 = load i16, i16* %22, align 16
  %24 = icmp eq i16 %23, %6
  br i1 %24, label %245, label %250

25:                                               ; preds = %245, %15, %13
  %26 = phi i64 [ %9, %15 ], [ %9, %13 ], [ %21, %245 ]
  %27 = and i64 %26, 4294967295
  %28 = getelementptr inbounds [14 x %struct.FcFtEncoding], [14 x %struct.FcFtEncoding]* @fcFtEncoding, i64 0, i64 %27, i32 2, i64 0
  %29 = tail call i32 @strcmp(i8* %28, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.34, i64 0, i64 0)) #14
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %124

31:                                               ; preds = %25
  %32 = getelementptr inbounds %struct.FT_SfntName_, %struct.FT_SfntName_* %0, i64 0, i32 2
  %33 = load i16, i16* %32, align 4
  %34 = icmp eq i16 %33, 0
  br i1 %34, label %35, label %116

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.FT_SfntName_, %struct.FT_SfntName_* %0, i64 0, i32 5
  %37 = load i32, i32* %36, align 8
  %38 = icmp sgt i32 %37, 0
  br i1 %38, label %39, label %124

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.FT_SfntName_, %struct.FT_SfntName_* %0, i64 0, i32 4
  %41 = load i8*, i8** %40, align 8
  %42 = add nsw i32 %37, -1
  %43 = zext i32 %42 to i64
  %44 = add nuw nsw i64 %43, 1
  %45 = icmp ult i64 %44, 8
  br i1 %45, label %91, label %46

46:                                               ; preds = %39
  %47 = and i64 %44, 8589934584
  %48 = trunc i64 %47 to i32
  %49 = sub i32 %37, %48
  %50 = getelementptr i8, i8* %41, i64 %47
  br label %51

51:                                               ; preds = %51, %46
  %52 = phi i64 [ 0, %46 ], [ %75, %51 ]
  %53 = phi <4 x i32> [ zeroinitializer, %46 ], [ %73, %51 ]
  %54 = phi <4 x i32> [ zeroinitializer, %46 ], [ %74, %51 ]
  %55 = phi <4 x i32> [ zeroinitializer, %46 ], [ %67, %51 ]
  %56 = phi <4 x i32> [ zeroinitializer, %46 ], [ %68, %51 ]
  %57 = getelementptr i8, i8* %41, i64 %52
  %58 = bitcast i8* %57 to <4 x i8>*
  %59 = load <4 x i8>, <4 x i8>* %58, align 1
  %60 = getelementptr i8, i8* %57, i64 4
  %61 = bitcast i8* %60 to <4 x i8>*
  %62 = load <4 x i8>, <4 x i8>* %61, align 1
  %63 = lshr <4 x i8> %59, <i8 7, i8 7, i8 7, i8 7>
  %64 = lshr <4 x i8> %62, <i8 7, i8 7, i8 7, i8 7>
  %65 = zext <4 x i8> %63 to <4 x i32>
  %66 = zext <4 x i8> %64 to <4 x i32>
  %67 = add nuw nsw <4 x i32> %55, %65
  %68 = add nuw nsw <4 x i32> %56, %66
  %69 = xor <4 x i8> %63, <i8 1, i8 1, i8 1, i8 1>
  %70 = xor <4 x i8> %64, <i8 1, i8 1, i8 1, i8 1>
  %71 = zext <4 x i8> %69 to <4 x i32>
  %72 = zext <4 x i8> %70 to <4 x i32>
  %73 = add nuw nsw <4 x i32> %53, %71
  %74 = add nuw nsw <4 x i32> %54, %72
  %75 = add i64 %52, 8
  %76 = icmp eq i64 %75, %47
  br i1 %76, label %77, label %51, !llvm.loop !6

77:                                               ; preds = %51
  %78 = add nuw <4 x i32> %68, %67
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %80 = add <4 x i32> %78, %79
  %81 = shufflevector <4 x i32> %80, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %82 = add <4 x i32> %80, %81
  %83 = extractelement <4 x i32> %82, i32 0
  %84 = add nuw <4 x i32> %74, %73
  %85 = shufflevector <4 x i32> %84, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %86 = add <4 x i32> %84, %85
  %87 = shufflevector <4 x i32> %86, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %88 = add <4 x i32> %86, %87
  %89 = extractelement <4 x i32> %88, i32 0
  %90 = icmp eq i64 %44, %47
  br i1 %90, label %111, label %91

91:                                               ; preds = %77, %39
  %92 = phi i32 [ 0, %39 ], [ %89, %77 ]
  %93 = phi i32 [ 0, %39 ], [ %83, %77 ]
  %94 = phi i32 [ %37, %39 ], [ %49, %77 ]
  %95 = phi i8* [ %41, %39 ], [ %50, %77 ]
  br label %96

96:                                               ; preds = %91, %96
  %97 = phi i32 [ %109, %96 ], [ %92, %91 ]
  %98 = phi i32 [ %106, %96 ], [ %93, %91 ]
  %99 = phi i32 [ %101, %96 ], [ %94, %91 ]
  %100 = phi i8* [ %102, %96 ], [ %95, %91 ]
  %101 = add nsw i32 %99, -1
  %102 = getelementptr inbounds i8, i8* %100, i64 1
  %103 = load i8, i8* %100, align 1
  %104 = lshr i8 %103, 7
  %105 = zext i8 %104 to i32
  %106 = add nuw nsw i32 %98, %105
  %107 = xor i8 %104, 1
  %108 = zext i8 %107 to i32
  %109 = add nuw nsw i32 %97, %108
  %110 = icmp sgt i32 %101, 0
  br i1 %110, label %96, label %111, !llvm.loop !7

111:                                              ; preds = %96, %77
  %112 = phi i32 [ %83, %77 ], [ %106, %96 ]
  %113 = phi i32 [ %89, %77 ], [ %109, %96 ]
  %114 = shl nuw i32 %112, 1
  %115 = icmp sgt i32 %114, %113
  br i1 %115, label %124, label %116

116:                                              ; preds = %111, %31
  %117 = icmp ugt i16 %33, 255
  br i1 %117, label %118, label %124

118:                                              ; preds = %116
  switch i16 %33, label %243 [
    i16 1041, label %120
    i16 1033, label %119
  ]

119:                                              ; preds = %118
  br label %120

120:                                              ; preds = %118, %119
  %121 = phi i64 [ 0, %118 ], [ 1, %119 ]
  %122 = getelementptr inbounds [2 x %struct.FcMacRomanFake], [2 x %struct.FcMacRomanFake]* @fcMacRomanFake, i64 0, i64 %121, i32 1, i64 0
  %123 = icmp eq i8* %122, null
  br i1 %123, label %243, label %124

124:                                              ; preds = %111, %120, %35, %25, %116
  %125 = phi i8* [ %28, %25 ], [ %122, %120 ], [ %28, %116 ], [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0), %111 ], [ %28, %35 ]
  %126 = tail call i32 @strcmp(i8* %125, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.36, i64 0, i64 0)) #14
  %127 = icmp eq i32 %126, 0
  br i1 %127, label %131, label %128

128:                                              ; preds = %124
  %129 = tail call i32 @strcmp(i8* %125, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.37, i64 0, i64 0)) #14
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %168

131:                                              ; preds = %128, %124
  %132 = getelementptr inbounds %struct.FT_SfntName_, %struct.FT_SfntName_* %0, i64 0, i32 4
  %133 = load i8*, i8** %132, align 8
  %134 = getelementptr inbounds %struct.FT_SfntName_, %struct.FT_SfntName_* %0, i64 0, i32 5
  %135 = load i32, i32* %134, align 8
  %136 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %136) #13
  store i32 -1431655766, i32* %2, align 4
  %137 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %137) #13
  store i32 -1431655766, i32* %3, align 4
  %138 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %138) #13
  store i32 -1431655766, i32* %4, align 4
  %139 = call i32 @IA__FcUtf16Len(i8* %133, i32 0, i32 %135, i32* nonnull %2, i32* nonnull %3) #13
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %165, label %141

141:                                              ; preds = %131
  %142 = load i32, i32* %2, align 4
  %143 = mul nsw i32 %142, 6
  %144 = or i32 %143, 1
  %145 = sext i32 %144 to i64
  %146 = call noalias i8* @malloc(i64 %145) #13
  %147 = icmp eq i8* %146, null
  br i1 %147, label %165, label %148

148:                                              ; preds = %141
  %149 = call i32 @IA__FcUtf16ToUcs4(i8* %133, i32 0, i32* nonnull %4, i32 %135) #13
  %150 = icmp sgt i32 %149, 0
  br i1 %150, label %151, label %166

151:                                              ; preds = %148, %151
  %152 = phi i32 [ %163, %151 ], [ %149, %148 ]
  %153 = phi i8* [ %162, %151 ], [ %146, %148 ]
  %154 = phi i32 [ %156, %151 ], [ %135, %148 ]
  %155 = phi i8* [ %158, %151 ], [ %133, %148 ]
  %156 = sub nsw i32 %154, %152
  %157 = sext i32 %152 to i64
  %158 = getelementptr inbounds i8, i8* %155, i64 %157
  %159 = load i32, i32* %4, align 4
  %160 = call i32 @IA__FcUcs4ToUtf8(i32 %159, i8* %153) #13
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds i8, i8* %153, i64 %161
  %163 = call i32 @IA__FcUtf16ToUcs4(i8* %158, i32 0, i32* nonnull %4, i32 %156) #13
  %164 = icmp sgt i32 %163, 0
  br i1 %164, label %151, label %166

165:                                              ; preds = %131, %141
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %138) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %137) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %136) #13
  br label %243

166:                                              ; preds = %151, %148
  %167 = phi i8* [ %146, %148 ], [ %162, %151 ]
  store i8 0, i8* %167, align 1
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %138) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %137) #13
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %136) #13
  br label %238

168:                                              ; preds = %128
  %169 = tail call i32 @strcmp(i8* %125, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.38, i64 0, i64 0)) #14
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %174, label %171

171:                                              ; preds = %168
  %172 = tail call i32 @strcmp(i8* %125, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.39, i64 0, i64 0)) #14
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %200

174:                                              ; preds = %171, %168
  %175 = getelementptr inbounds %struct.FT_SfntName_, %struct.FT_SfntName_* %0, i64 0, i32 4
  %176 = load i8*, i8** %175, align 8
  %177 = getelementptr inbounds %struct.FT_SfntName_, %struct.FT_SfntName_* %0, i64 0, i32 5
  %178 = load i32, i32* %177, align 8
  %179 = shl nsw i32 %178, 1
  %180 = or i32 %179, 1
  %181 = sext i32 %180 to i64
  %182 = tail call noalias i8* @malloc(i64 %181) #13
  %183 = icmp eq i8* %182, null
  br i1 %183, label %243, label %184

184:                                              ; preds = %174
  %185 = icmp sgt i32 %178, 0
  br i1 %185, label %186, label %198

186:                                              ; preds = %184, %186
  %187 = phi i8* [ %196, %186 ], [ %182, %184 ]
  %188 = phi i32 [ %193, %186 ], [ %178, %184 ]
  %189 = phi i8* [ %190, %186 ], [ %176, %184 ]
  %190 = getelementptr inbounds i8, i8* %189, i64 1
  %191 = load i8, i8* %189, align 1
  %192 = zext i8 %191 to i32
  %193 = add nsw i32 %188, -1
  %194 = tail call i32 @IA__FcUcs4ToUtf8(i32 %192, i8* %187) #13
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds i8, i8* %187, i64 %195
  %197 = icmp sgt i32 %193, 0
  br i1 %197, label %186, label %198

198:                                              ; preds = %186, %184
  %199 = phi i8* [ %182, %184 ], [ %196, %186 ]
  store i8 0, i8* %199, align 1
  br label %238

200:                                              ; preds = %171
  %201 = tail call i32 @strcmp(i8* %125, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.34, i64 0, i64 0)) #14
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %203, label %243

203:                                              ; preds = %200
  %204 = getelementptr inbounds %struct.FT_SfntName_, %struct.FT_SfntName_* %0, i64 0, i32 4
  %205 = load i8*, i8** %204, align 8
  %206 = getelementptr inbounds %struct.FT_SfntName_, %struct.FT_SfntName_* %0, i64 0, i32 5
  %207 = load i32, i32* %206, align 8
  %208 = mul nsw i32 %207, 3
  %209 = add nsw i32 %208, 1
  %210 = sext i32 %209 to i64
  %211 = tail call noalias i8* @malloc(i64 %210) #13
  %212 = icmp eq i8* %211, null
  br i1 %212, label %243, label %213

213:                                              ; preds = %203
  %214 = icmp sgt i32 %207, 0
  br i1 %214, label %215, label %236

215:                                              ; preds = %213, %229
  %216 = phi i8* [ %234, %229 ], [ %211, %213 ]
  %217 = phi i32 [ %231, %229 ], [ %207, %213 ]
  %218 = phi i8* [ %219, %229 ], [ %205, %213 ]
  %219 = getelementptr inbounds i8, i8* %218, i64 1
  %220 = load i8, i8* %218, align 1
  %221 = zext i8 %220 to i32
  %222 = icmp slt i8 %220, 0
  br i1 %222, label %223, label %229

223:                                              ; preds = %215
  %224 = add nsw i32 %221, -128
  %225 = zext i32 %224 to i64
  %226 = getelementptr inbounds [128 x i16], [128 x i16]* @fcMacRomanNonASCIIToUnicode, i64 0, i64 %225
  %227 = load i16, i16* %226, align 2
  %228 = zext i16 %227 to i32
  br label %229

229:                                              ; preds = %223, %215
  %230 = phi i32 [ %228, %223 ], [ %221, %215 ]
  %231 = add nsw i32 %217, -1
  %232 = tail call i32 @IA__FcUcs4ToUtf8(i32 %230, i8* %216) #13
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds i8, i8* %216, i64 %233
  %235 = icmp sgt i32 %231, 0
  br i1 %235, label %215, label %236

236:                                              ; preds = %229, %213
  %237 = phi i8* [ %211, %213 ], [ %234, %229 ]
  store i8 0, i8* %237, align 1
  br label %238

238:                                              ; preds = %166, %236, %198
  %239 = phi i8* [ %146, %166 ], [ %182, %198 ], [ %211, %236 ]
  %240 = call i32 @FcStrCmpIgnoreBlanksAndCase(i8* %239, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.8, i64 0, i64 0)) #13
  %241 = icmp eq i32 %240, 0
  br i1 %241, label %242, label %243

242:                                              ; preds = %238
  call void @free(i8* %239) #13
  br label %243

243:                                              ; preds = %250, %118, %120, %165, %238, %200, %203, %174, %242
  %244 = phi i8* [ null, %242 ], [ null, %120 ], [ null, %174 ], [ null, %203 ], [ null, %200 ], [ %239, %238 ], [ null, %165 ], [ null, %118 ], [ null, %250 ]
  ret i8* %244

245:                                              ; preds = %20
  %246 = getelementptr inbounds [14 x %struct.FcFtEncoding], [14 x %struct.FcFtEncoding]* @fcFtEncoding, i64 0, i64 %21, i32 1
  %247 = load i16, i16* %246, align 2
  %248 = load i16, i16* %7, align 2
  %249 = icmp eq i16 %247, %248
  br i1 %249, label %25, label %250

250:                                              ; preds = %245, %20
  %251 = add nuw nsw i64 %9, 2
  %252 = icmp eq i64 %251, 14
  br i1 %252, label %243, label %8
}

; Function Attrs: nounwind readonly ssp uwtable
define internal fastcc i8* @FcNoticeFoundry(i8* readonly) unnamed_addr #7 {
  %2 = icmp eq i8* %0, null
  br i1 %2, label %13, label %3

3:                                                ; preds = %1
  %4 = tail call i8* @strstr(i8* nonnull %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.40, i64 0, i64 0)) #14
  %5 = icmp eq i8* %4, null
  br i1 %5, label %6, label %9

6:                                                ; preds = %3
  %7 = tail call i8* @strstr(i8* nonnull %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.42, i64 0, i64 0)) #14
  %8 = icmp eq i8* %7, null
  br i1 %8, label %15, label %9

9:                                                ; preds = %60, %57, %54, %51, %48, %45, %42, %39, %36, %33, %30, %27, %24, %21, %18, %15, %6, %3
  %10 = phi i64 [ 0, %3 ], [ 1, %6 ], [ 2, %15 ], [ 3, %18 ], [ 4, %21 ], [ 5, %24 ], [ 6, %27 ], [ 7, %30 ], [ 8, %33 ], [ 9, %36 ], [ 10, %39 ], [ 11, %42 ], [ 12, %45 ], [ 13, %48 ], [ 14, %51 ], [ 15, %54 ], [ 16, %57 ], [ 17, %60 ]
  %11 = getelementptr inbounds [18 x [2 x i8*]], [18 x [2 x i8*]]* @FcNoticeFoundries, i64 0, i64 %10, i64 1
  %12 = load i8*, i8** %11, align 8
  br label %13

13:                                               ; preds = %60, %9, %1
  %14 = phi i8* [ %12, %9 ], [ null, %1 ], [ null, %60 ]
  ret i8* %14

15:                                               ; preds = %6
  %16 = tail call i8* @strstr(i8* nonnull %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.44, i64 0, i64 0)) #14
  %17 = icmp eq i8* %16, null
  br i1 %17, label %18, label %9

18:                                               ; preds = %15
  %19 = tail call i8* @strstr(i8* nonnull %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.46, i64 0, i64 0)) #14
  %20 = icmp eq i8* %19, null
  br i1 %20, label %21, label %9

21:                                               ; preds = %18
  %22 = tail call i8* @strstr(i8* nonnull %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.48, i64 0, i64 0)) #14
  %23 = icmp eq i8* %22, null
  br i1 %23, label %24, label %9

24:                                               ; preds = %21
  %25 = tail call i8* @strstr(i8* nonnull %0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.49, i64 0, i64 0)) #14
  %26 = icmp eq i8* %25, null
  br i1 %26, label %27, label %9

27:                                               ; preds = %24
  %28 = tail call i8* @strstr(i8* nonnull %0, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.51, i64 0, i64 0)) #14
  %29 = icmp eq i8* %28, null
  br i1 %29, label %30, label %9

30:                                               ; preds = %27
  %31 = tail call i8* @strstr(i8* nonnull %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.53, i64 0, i64 0)) #14
  %32 = icmp eq i8* %31, null
  br i1 %32, label %33, label %9

33:                                               ; preds = %30
  %34 = tail call i8* @strstr(i8* nonnull %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.55, i64 0, i64 0)) #14
  %35 = icmp eq i8* %34, null
  br i1 %35, label %36, label %9

36:                                               ; preds = %33
  %37 = tail call i8* @strstr(i8* nonnull %0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.57, i64 0, i64 0)) #14
  %38 = icmp eq i8* %37, null
  br i1 %38, label %39, label %9

39:                                               ; preds = %36
  %40 = tail call i8* @strstr(i8* nonnull %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.59, i64 0, i64 0)) #14
  %41 = icmp eq i8* %40, null
  br i1 %41, label %42, label %9

42:                                               ; preds = %39
  %43 = tail call i8* @strstr(i8* nonnull %0, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.60, i64 0, i64 0)) #14
  %44 = icmp eq i8* %43, null
  br i1 %44, label %45, label %9

45:                                               ; preds = %42
  %46 = tail call i8* @strstr(i8* nonnull %0, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.62, i64 0, i64 0)) #14
  %47 = icmp eq i8* %46, null
  br i1 %47, label %48, label %9

48:                                               ; preds = %45
  %49 = tail call i8* @strstr(i8* nonnull %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.64, i64 0, i64 0)) #14
  %50 = icmp eq i8* %49, null
  br i1 %50, label %51, label %9

51:                                               ; preds = %48
  %52 = tail call i8* @strstr(i8* nonnull %0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.66, i64 0, i64 0)) #14
  %53 = icmp eq i8* %52, null
  br i1 %53, label %54, label %9

54:                                               ; preds = %51
  %55 = tail call i8* @strstr(i8* nonnull %0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.68, i64 0, i64 0)) #14
  %56 = icmp eq i8* %55, null
  br i1 %56, label %57, label %9

57:                                               ; preds = %54
  %58 = tail call i8* @strstr(i8* nonnull %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.70, i64 0, i64 0)) #14
  %59 = icmp eq i8* %58, null
  br i1 %59, label %60, label %9

60:                                               ; preds = %57
  %61 = tail call i8* @strstr(i8* nonnull %0, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.72, i64 0, i64 0)) #14
  %62 = icmp eq i8* %61, null
  br i1 %62, label %13, label %9
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #8

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare hidden i32 @FcPatternObjectAddString(%struct._FcPattern*, i32, i8*) local_unnamed_addr #2

declare hidden i32 @FcStrCmpIgnoreBlanksAndCase(i8*, i8*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i8* @strrchr(i8*, i32) local_unnamed_addr #9

; Function Attrs: nofree nounwind
declare i8* @strncpy(i8* returned, i8* nocapture readonly, i64) local_unnamed_addr #4

declare hidden i32 @FcPatternObjectGetString(%struct._FcPattern*, i32, i32, i8**) local_unnamed_addr #2

declare hidden i32 @IA__FcStrCmp(i8*, i8*) local_unnamed_addr #2

; Function Attrs: nounwind readnone
declare i16** @__ctype_b_loc() local_unnamed_addr #10

declare hidden void @FcStrBufInit(%struct._FcStrBuf*, i8*, i32) local_unnamed_addr #2

declare hidden i32 @FcStrBufString(%struct._FcStrBuf*, i8*) local_unnamed_addr #2

declare hidden i32 @FcStrBufChar(%struct._FcStrBuf*, i8 zeroext) local_unnamed_addr #2

declare hidden i8* @FcStrBufDoneStatic(%struct._FcStrBuf*) local_unnamed_addr #2

declare hidden void @FcStrBufDestroy(%struct._FcStrBuf*) local_unnamed_addr #2

declare i8* @FT_Get_Postscript_Name(%struct.FT_FaceRec_*) local_unnamed_addr #2

declare hidden i32 @FcPatternObjectAddInteger(%struct._FcPattern*, i32, i32) local_unnamed_addr #2

declare i32 @FT_Get_PS_Font_Info(%struct.FT_FaceRec_*, %struct.PS_FontInfoRec_*) local_unnamed_addr #2

declare i32 @FT_Get_BDF_Property(%struct.FT_FaceRec_*, i8*, %struct.BDF_PropertyRec_*) local_unnamed_addr #2

declare hidden i32 @IA__FcPatternGetString(%struct._FcPattern*, i8*, i32, i8**) local_unnamed_addr #2

declare hidden %struct._FcCharSet* @IA__FcCharSetCopy(%struct._FcCharSet*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #9

declare hidden i32 @IA__FcCharSetCount(%struct._FcCharSet*) local_unnamed_addr #2

declare hidden i32 @FcPatternObjectAddCharSet(%struct._FcPattern*, i32, %struct._FcCharSet*) local_unnamed_addr #2

declare hidden %struct._FcLangSet* @IA__FcLangSetCopy(%struct._FcLangSet*) local_unnamed_addr #2

declare hidden %struct._FcLangSet* @FcFreeTypeLangSet(%struct._FcCharSet*, i8*) local_unnamed_addr #2

declare hidden %struct._FcLangSet* @IA__FcLangSetCreate() local_unnamed_addr #2

declare hidden i32 @FcPatternObjectAddLangSet(%struct._FcPattern*, i32, %struct._FcLangSet*) local_unnamed_addr #2

declare i8* @FT_Get_X11_Font_Format(%struct.FT_FaceRec_*) local_unnamed_addr #2

declare hidden i32 @IA__FcUtf16Len(i8*, i32, i32, i32*, i32*) local_unnamed_addr #2

declare hidden i32 @IA__FcUtf16ToUcs4(i8*, i32, i32*, i32) local_unnamed_addr #2

declare hidden i32 @IA__FcUcs4ToUtf8(i32, i8*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i8* @strstr(i8*, i8* nocapture) local_unnamed_addr #9

declare hidden void @IA__FcPatternIterStart(%struct._FcPattern*, %struct._FcPatternIter*) local_unnamed_addr #2

declare hidden i32 @FcPatternFindObjectIter(%struct._FcPattern*, %struct._FcPatternIter*, i32) local_unnamed_addr #2

declare hidden %struct._FcValueList* @FcPatternIterGetValues(%struct._FcPattern*, %struct._FcPatternIter*) local_unnamed_addr #2

declare hidden { i32, i8* } @FcValueCanonicalize(%struct._FcValue*) local_unnamed_addr #2

declare i32 @FT_Load_Sfnt_Table(%struct.FT_FaceRec_*, i64, i64, i8*, i64*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @GetScriptTags(%struct.FT_FaceRec_*, i64, i64** nocapture) unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %0, i64 0, i32 26
  %5 = load %struct.FT_StreamRec_*, %struct.FT_StreamRec_** %4, align 8
  %6 = icmp eq %struct.FT_StreamRec_* %5, null
  br i1 %6, label %108, label %7

7:                                                ; preds = %3
  %8 = tail call i32 @ftglue_face_goto_table(%struct.FT_FaceRec_* %0, i64 %1, %struct.FT_StreamRec_* nonnull %5) #13
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %108

10:                                               ; preds = %7
  %11 = tail call i64 @ftglue_stream_pos(%struct.FT_StreamRec_* nonnull %5) #13
  %12 = add i64 %11, 4
  %13 = tail call i32 @ftglue_stream_seek(%struct.FT_StreamRec_* nonnull %5, i64 %12) #13
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %108

15:                                               ; preds = %10
  %16 = tail call i32 @ftglue_stream_frame_enter(%struct.FT_StreamRec_* nonnull %5, i64 2) #13
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %108

18:                                               ; preds = %15
  %19 = getelementptr inbounds %struct.FT_StreamRec_, %struct.FT_StreamRec_* %5, i64 0, i32 8
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 2
  store i8* %21, i8** %19, align 8
  %22 = load i8, i8* %20, align 1
  %23 = zext i8 %22 to i64
  %24 = shl nuw nsw i64 %23, 8
  %25 = getelementptr inbounds i8, i8* %20, i64 1
  %26 = load i8, i8* %25, align 1
  %27 = zext i8 %26 to i64
  %28 = or i64 %24, %27
  %29 = add i64 %28, %11
  tail call void @ftglue_stream_frame_exit(%struct.FT_StreamRec_* nonnull %5) #13
  %30 = tail call i64 @ftglue_stream_pos(%struct.FT_StreamRec_* nonnull %5) #13
  %31 = tail call i32 @ftglue_stream_seek(%struct.FT_StreamRec_* nonnull %5, i64 %29) #13
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %33, label %108

33:                                               ; preds = %18
  %34 = tail call i64 @ftglue_stream_pos(%struct.FT_StreamRec_* nonnull %5) #13
  %35 = tail call i32 @ftglue_stream_frame_enter(%struct.FT_StreamRec_* nonnull %5, i64 2) #13
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %108

37:                                               ; preds = %33
  %38 = load i8*, i8** %19, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 2
  store i8* %39, i8** %19, align 8
  %40 = load i8, i8* %38, align 1
  %41 = zext i8 %40 to i32
  %42 = shl nuw nsw i32 %41, 8
  %43 = getelementptr inbounds i8, i8* %38, i64 1
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  %46 = or i32 %42, %45
  tail call void @ftglue_stream_frame_exit(%struct.FT_StreamRec_* nonnull %5) #13
  %47 = zext i32 %46 to i64
  %48 = shl nuw nsw i32 %46, 3
  %49 = zext i32 %48 to i64
  %50 = tail call noalias i8* @malloc(i64 %49) #13
  %51 = bitcast i64** %2 to i8**
  store i8* %50, i8** %51, align 8
  %52 = icmp eq i8* %50, null
  br i1 %52, label %108, label %53

53:                                               ; preds = %37
  %54 = icmp eq i32 %46, 0
  br i1 %54, label %106, label %55

55:                                               ; preds = %53, %60
  %56 = phi i16 [ %97, %60 ], [ 0, %53 ]
  %57 = phi i16 [ %99, %60 ], [ 0, %53 ]
  %58 = tail call i32 @ftglue_stream_frame_enter(%struct.FT_StreamRec_* nonnull %5, i64 6) #13
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %106

60:                                               ; preds = %55
  %61 = load i8*, i8** %19, align 8
  %62 = getelementptr inbounds i8, i8* %61, i64 4
  store i8* %62, i8** %19, align 8
  %63 = load i8, i8* %61, align 1
  %64 = zext i8 %63 to i64
  %65 = shl nuw nsw i64 %64, 24
  %66 = getelementptr inbounds i8, i8* %61, i64 1
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i64
  %69 = shl nuw nsw i64 %68, 16
  %70 = or i64 %69, %65
  %71 = getelementptr inbounds i8, i8* %61, i64 2
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i64
  %74 = shl nuw nsw i64 %73, 8
  %75 = or i64 %70, %74
  %76 = getelementptr inbounds i8, i8* %61, i64 3
  %77 = load i8, i8* %76, align 1
  %78 = zext i8 %77 to i64
  %79 = or i64 %75, %78
  %80 = load i64*, i64** %2, align 8
  %81 = zext i16 %56 to i64
  %82 = getelementptr inbounds i64, i64* %80, i64 %81
  store i64 %79, i64* %82, align 8
  %83 = load i8*, i8** %19, align 8
  %84 = getelementptr inbounds i8, i8* %83, i64 2
  store i8* %84, i8** %19, align 8
  %85 = load i8, i8* %83, align 1
  %86 = zext i8 %85 to i64
  %87 = shl nuw nsw i64 %86, 8
  %88 = getelementptr inbounds i8, i8* %83, i64 1
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i64
  %91 = or i64 %87, %90
  %92 = add i64 %91, %34
  tail call void @ftglue_stream_frame_exit(%struct.FT_StreamRec_* nonnull %5) #13
  %93 = tail call i64 @ftglue_stream_pos(%struct.FT_StreamRec_* nonnull %5) #13
  %94 = tail call i32 @ftglue_stream_seek(%struct.FT_StreamRec_* nonnull %5, i64 %92) #13
  %95 = icmp eq i32 %94, 0
  %96 = zext i1 %95 to i16
  %97 = add i16 %56, %96
  %98 = tail call i32 @ftglue_stream_seek(%struct.FT_StreamRec_* nonnull %5, i64 %93) #13
  %99 = add i16 %57, 1
  %100 = zext i16 %99 to i32
  %101 = icmp ugt i32 %46, %100
  br i1 %101, label %55, label %102

102:                                              ; preds = %60
  %103 = icmp eq i16 %97, 0
  br i1 %103, label %106, label %104

104:                                              ; preds = %102
  %105 = load i8*, i8** %51, align 8
  tail call void @qsort(i8* %105, i64 %47, i64 8, i32 (i8*, i8*)* nonnull @compareulong) #13
  br label %108

106:                                              ; preds = %55, %53, %102
  %107 = load i8*, i8** %51, align 8
  tail call void @free(i8* %107) #13
  store i64* null, i64** %2, align 8
  br label %108

108:                                              ; preds = %37, %33, %18, %10, %15, %7, %3, %106, %104
  %109 = phi i32 [ 0, %106 ], [ %46, %104 ], [ 0, %3 ], [ 0, %7 ], [ 0, %15 ], [ 0, %10 ], [ 0, %18 ], [ 0, %33 ], [ 0, %37 ]
  ret i32 %109
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @addtag(i8*, i64) unnamed_addr #0 {
  %3 = alloca [5 x i8], align 1
  %4 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 5, i8* nonnull %4) #13
  %5 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 1
  %6 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 2
  %7 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 3
  %8 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 4
  %9 = lshr i64 %1, 24
  %10 = trunc i64 %9 to i8
  store i8 %10, i8* %4, align 1
  %11 = lshr i64 %1, 16
  %12 = trunc i64 %11 to i8
  store i8 %12, i8* %5, align 1
  %13 = lshr i64 %1, 8
  %14 = trunc i64 %13 to i8
  store i8 %14, i8* %6, align 1
  %15 = trunc i64 %1 to i8
  store i8 %15, i8* %7, align 1
  store i8 0, i8* %8, align 1
  %16 = and i8 %10, -33
  %17 = add i8 %16, -65
  %18 = icmp ult i8 %17, 26
  br i1 %18, label %24, label %19

19:                                               ; preds = %2
  %20 = add i8 %10, -48
  %21 = icmp ult i8 %20, 10
  %22 = icmp eq i8 %10, 32
  %23 = or i1 %22, %21
  br i1 %23, label %24, label %62

24:                                               ; preds = %19, %2
  %25 = and i8 %12, -33
  %26 = add i8 %25, -65
  %27 = icmp ult i8 %26, 26
  br i1 %27, label %33, label %28

28:                                               ; preds = %24
  %29 = add i8 %12, -48
  %30 = icmp ult i8 %29, 10
  %31 = icmp eq i8 %12, 32
  %32 = or i1 %31, %30
  br i1 %32, label %33, label %62

33:                                               ; preds = %28, %24
  %34 = and i8 %14, -33
  %35 = add i8 %34, -65
  %36 = icmp ult i8 %35, 26
  br i1 %36, label %42, label %37

37:                                               ; preds = %33
  %38 = add i8 %14, -48
  %39 = icmp ult i8 %38, 10
  %40 = icmp eq i8 %14, 32
  %41 = or i1 %40, %39
  br i1 %41, label %42, label %62

42:                                               ; preds = %37, %33
  %43 = and i8 %15, -33
  %44 = add i8 %43, -65
  %45 = icmp ult i8 %44, 26
  br i1 %45, label %51, label %46

46:                                               ; preds = %42
  %47 = add i8 %15, -48
  %48 = icmp ult i8 %47, 10
  %49 = icmp eq i8 %15, 32
  %50 = or i1 %49, %48
  br i1 %50, label %51, label %62

51:                                               ; preds = %46, %42
  %52 = load i8, i8* %0, align 1
  %53 = icmp eq i8 %52, 0
  br i1 %53, label %58, label %54

54:                                               ; preds = %51
  %55 = tail call i64 @strlen(i8* %0)
  %56 = getelementptr i8, i8* %0, i64 %55
  %57 = bitcast i8* %56 to i16*
  store i16 32, i16* %57, align 1
  br label %58

58:                                               ; preds = %51, %54
  %59 = tail call i64 @strlen(i8* %0)
  %60 = getelementptr i8, i8* %0, i64 %59
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %60, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @.str.77, i64 0, i64 0), i64 10, i1 false)
  %61 = call i8* @strcat(i8* %0, i8* nonnull %4) #13
  br label %62

62:                                               ; preds = %19, %28, %37, %46, %58
  call void @llvm.lifetime.end.p0i8(i64 5, i8* nonnull %4) #13
  ret void
}

declare hidden i32 @ftglue_face_goto_table(%struct.FT_FaceRec_*, i64, %struct.FT_StreamRec_*) local_unnamed_addr #2

declare hidden i64 @ftglue_stream_pos(%struct.FT_StreamRec_*) local_unnamed_addr #2

declare hidden i32 @ftglue_stream_seek(%struct.FT_StreamRec_*, i64) local_unnamed_addr #2

declare hidden i32 @ftglue_stream_frame_enter(%struct.FT_StreamRec_*, i64) local_unnamed_addr #2

declare hidden void @ftglue_stream_frame_exit(%struct.FT_StreamRec_*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal i32 @compareulong(i8* nocapture readonly, i8* nocapture readonly) #6 {
  %3 = bitcast i8* %0 to i64*
  %4 = bitcast i8* %1 to i64*
  %5 = load i64, i64* %3, align 8
  %6 = load i64, i64* %4, align 8
  %7 = sub i64 %5, %6
  %8 = trunc i64 %7 to i32
  ret i32 %8
}

; Function Attrs: nofree nounwind
declare i8* @strcat(i8* returned, i8* nocapture readonly) local_unnamed_addr #4

declare hidden i8* @FcStrContainsWord(i8*, i8*) local_unnamed_addr #2

declare hidden i8* @FcStrContainsIgnoreBlanksAndCase(i8*, i8*) local_unnamed_addr #2

declare i32 @FT_Select_Size(%struct.FT_FaceRec_*, i32) local_unnamed_addr #2

declare i32 @FT_Get_Advance(%struct.FT_FaceRec_*, i32, i32, i64*) local_unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #11

; Function Attrs: nofree nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #12

; Function Attrs: nofree nounwind
declare i32 @putchar(i32) local_unnamed_addr #12

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nofree nounwind readonly }
attributes #12 = { nofree nounwind }
attributes #13 = { nounwind }
attributes #14 = { nounwind readonly }
attributes #15 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !5, !3}
