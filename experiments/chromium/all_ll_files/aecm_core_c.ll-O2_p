; ModuleID = '../../third_party/webrtc/modules/audio_processing/aecm/aecm_core_c.cc'
source_filename = "../../third_party/webrtc/modules/audio_processing/aecm/aecm_core_c.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.webrtc::AecmCore" = type { i32, i32, i32, i32, i32, %struct.RingBuffer*, %struct.RingBuffer*, %struct.RingBuffer*, %struct.RingBuffer*, [256 x i16], i16, i32, i8*, i8*, i16, [6500 x i16], i32, [100 x i32], i16, i16, i32, i16, i16, i16, i16, [64 x i16], i16, [64 x i16], [64 x i16], [73 x i16], [73 x i16], [73 x i32], [144 x i16], [144 x i16], [144 x i16], [72 x i16], i16*, i16*, i32*, i16*, i16*, i16*, i16*, [65 x i32], [65 x i16], [65 x i32], [65 x i32], [65 x i32], i16, i16, i32, i32, i32, i16, i16, i16, i16, i16, i32, i16, i16, i16, i16, i16, i16, i16, i16, i16, %struct.RealFFT* }
%struct.RingBuffer = type { i64, i64, i64, i64, i32, i8* }
%struct.RealFFT = type opaque
%"struct.webrtc::ComplexInt16" = type { i16, i16 }

@WebRtcSpl_MaxAbsValueW16 = external local_unnamed_addr constant i16 (i16*, i64)*, align 8
@_ZN6webrtc12_GLOBAL__N_123WebRtcAecm_kSqrtHanningE = internal unnamed_addr constant [65 x i16] [i16 0, i16 399, i16 798, i16 1196, i16 1594, i16 1990, i16 2386, i16 2780, i16 3172, i16 3562, i16 3951, i16 4337, i16 4720, i16 5101, i16 5478, i16 5853, i16 6224, i16 6591, i16 6954, i16 7313, i16 7668, i16 8019, i16 8364, i16 8705, i16 9040, i16 9370, i16 9695, i16 10013, i16 10326, i16 10633, i16 10933, i16 11227, i16 11514, i16 11795, i16 12068, i16 12335, i16 12594, i16 12845, i16 13089, i16 13325, i16 13553, i16 13773, i16 13985, i16 14189, i16 14384, i16 14571, i16 14749, i16 14918, i16 15079, i16 15231, i16 15373, i16 15506, i16 15631, i16 15746, i16 15851, i16 15947, i16 16034, i16 16111, i16 16179, i16 16237, i16 16286, i16 16325, i16 16354, i16 16373, i16 16384], align 8
@_ZN6webrtc20WebRtcAecm_kCosTableE = external local_unnamed_addr constant [0 x i16], align 2
@_ZN6webrtc20WebRtcAecm_kSinTableE = external local_unnamed_addr constant [0 x i16], align 2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc23WebRtcAecm_ProcessBlockEPNS_8AecmCoreEPKsS3_S3_Ps(%"struct.webrtc::AecmCore"*, i16* nocapture readonly, i16* nocapture readonly, i16* readonly, i16* nocapture) local_unnamed_addr #0 {
  %6 = alloca [64 x i16], align 16
  %7 = alloca [65 x i16], align 16
  %8 = bitcast [65 x i16]* %7 to i8*
  %9 = alloca [65 x i16], align 16
  %10 = bitcast [65 x i16]* %9 to i8*
  %11 = alloca [65 x i16], align 16
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca [65 x i16], align 16
  %16 = alloca [65 x i16], align 16
  %17 = alloca [65 x i16], align 16
  %18 = alloca [274 x i16], align 16
  %19 = alloca [73 x i32], align 16
  %20 = alloca [136 x i32], align 16
  %21 = alloca [136 x i32], align 16
  %22 = alloca [65 x i16], align 16
  %23 = alloca i32, align 4
  %24 = bitcast i32* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #4
  store i32 -1431655766, i32* %12, align 4
  %25 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25) #4
  store i32 -1431655766, i32* %13, align 4
  %26 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %26) #4
  store i32 -1431655766, i32* %14, align 4
  %27 = bitcast [65 x i16]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 130, i8* nonnull %27) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 -86, i64 130, i1 false)
  %28 = bitcast [65 x i16]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 130, i8* nonnull %28) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %28, i8 -86, i64 130, i1 false)
  %29 = bitcast [65 x i16]* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 130, i8* nonnull %29) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %29, i8 -86, i64 130, i1 false)
  %30 = getelementptr inbounds [65 x i16], [65 x i16]* %17, i64 0, i64 0
  %31 = bitcast [274 x i16]* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 548, i8* nonnull %31) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %31, i8 -86, i64 548, i1 false)
  %32 = bitcast [73 x i32]* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 292, i8* nonnull %32) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %32, i8 -86, i64 292, i1 false)
  %33 = bitcast [136 x i32]* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 544, i8* nonnull %33) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %33, i8 -86, i64 544, i1 false)
  %34 = bitcast [136 x i32]* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 544, i8* nonnull %34) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %34, i8 -86, i64 544, i1 false)
  %35 = ptrtoint [274 x i16]* %18 to i64
  %36 = add i64 %35, 31
  %37 = and i64 %36, -32
  %38 = inttoptr i64 %37 to i16*
  %39 = ptrtoint [73 x i32]* %19 to i64
  %40 = add i64 %39, 31
  %41 = and i64 %40, -32
  %42 = inttoptr i64 %41 to i32*
  %43 = ptrtoint [136 x i32]* %20 to i64
  %44 = add i64 %43, 31
  %45 = and i64 %44, -32
  %46 = inttoptr i64 %45 to %"struct.webrtc::ComplexInt16"*
  %47 = ptrtoint [136 x i32]* %21 to i64
  %48 = add i64 %47, 31
  %49 = and i64 %48, -32
  %50 = inttoptr i64 %49 to %"struct.webrtc::ComplexInt16"*
  %51 = inttoptr i64 %49 to i8*
  %52 = bitcast [65 x i16]* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 130, i8* nonnull %52) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %52, i8 -86, i64 130, i1 false)
  %53 = bitcast i32* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %53) #4
  store i32 -1431655766, i32* %23, align 4
  %54 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 60
  %55 = load i16, i16* %54, align 2
  %56 = icmp slt i16 %55, 2
  br i1 %56, label %57, label %65

57:                                               ; preds = %5
  %58 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 20
  %59 = load i32, i32* %58, align 4
  %60 = icmp ugt i32 %59, 511
  %61 = zext i1 %60 to i16
  %62 = icmp ugt i32 %59, 1023
  %63 = zext i1 %62 to i16
  %64 = add nuw nsw i16 %61, %63
  store i16 %64, i16* %54, align 2
  br label %65

65:                                               ; preds = %57, %5
  %66 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 39
  %67 = load i16*, i16** %66, align 8
  %68 = getelementptr inbounds i16, i16* %67, i64 64
  %69 = bitcast i16* %68 to i8*
  %70 = bitcast i16* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %69, i8* align 2 %70, i64 128, i1 false)
  %71 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 41
  %72 = load i16*, i16** %71, align 8
  %73 = getelementptr inbounds i16, i16* %72, i64 64
  %74 = bitcast i16* %73 to i8*
  %75 = bitcast i16* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %74, i8* align 2 %75, i64 128, i1 false)
  %76 = icmp eq i16* %3, null
  br i1 %76, label %83, label %77

77:                                               ; preds = %65
  %78 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 40
  %79 = load i16*, i16** %78, align 8
  %80 = getelementptr inbounds i16, i16* %79, i64 64
  %81 = bitcast i16* %80 to i8*
  %82 = bitcast i16* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %81, i8* nonnull align 2 %82, i64 128, i1 false)
  br label %83

83:                                               ; preds = %65, %77
  %84 = load i16*, i16** %66, align 8
  %85 = getelementptr inbounds [65 x i16], [65 x i16]* %15, i64 0, i64 0
  %86 = call fastcc i32 @_ZN6webrtc12_GLOBAL__N_121TimeToFrequencyDomainEPNS_8AecmCoreEPKsPNS_12ComplexInt16EPtPj(%"struct.webrtc::AecmCore"* %0, i16* %84, %"struct.webrtc::ComplexInt16"* %46, i16* nonnull %85, i32* nonnull %12)
  store i32 %86, i32* %23, align 4
  %87 = load i16*, i16** %71, align 8
  %88 = getelementptr inbounds [65 x i16], [65 x i16]* %16, i64 0, i64 0
  %89 = call fastcc i32 @_ZN6webrtc12_GLOBAL__N_121TimeToFrequencyDomainEPNS_8AecmCoreEPKsPNS_12ComplexInt16EPtPj(%"struct.webrtc::AecmCore"* %0, i16* %87, %"struct.webrtc::ComplexInt16"* %46, i16* nonnull %88, i32* nonnull %13)
  %90 = trunc i32 %89 to i16
  %91 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 23
  %92 = load i16, i16* %91, align 4
  %93 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 24
  store i16 %92, i16* %93, align 2
  store i16 %90, i16* %91, align 4
  br i1 %76, label %94, label %98

94:                                               ; preds = %83
  %95 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 22
  store i16 %92, i16* %95, align 2
  %96 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 21
  store i16 %90, i16* %96, align 8
  %97 = load i32, i32* %13, align 4
  store i32 %97, i32* %14, align 4
  br label %106

98:                                               ; preds = %83
  %99 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 40
  %100 = load i16*, i16** %99, align 8
  %101 = call fastcc i32 @_ZN6webrtc12_GLOBAL__N_121TimeToFrequencyDomainEPNS_8AecmCoreEPKsPNS_12ComplexInt16EPtPj(%"struct.webrtc::AecmCore"* %0, i16* %100, %"struct.webrtc::ComplexInt16"* %46, i16* nonnull %30, i32* nonnull %14)
  %102 = trunc i32 %101 to i16
  %103 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 21
  %104 = load i16, i16* %103, align 8
  %105 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 22
  store i16 %104, i16* %105, align 2
  store i16 %102, i16* %103, align 8
  br label %106

106:                                              ; preds = %98, %94
  %107 = phi i16* [ %88, %94 ], [ %30, %98 ]
  %108 = load i32, i32* %23, align 4
  call void @_ZN6webrtc27WebRtcAecm_UpdateFarHistoryEPNS_8AecmCoreEPti(%"struct.webrtc::AecmCore"* %0, i16* nonnull %85, i32 %108) #4
  %109 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 12
  %110 = load i8*, i8** %109, align 8
  %111 = load i32, i32* %23, align 4
  %112 = call i32 @_ZN6webrtc24WebRtc_AddFarSpectrumFixEPvPKtii(i8* %110, i16* nonnull %85, i32 65, i32 %111) #4
  %113 = icmp eq i32 %112, -1
  br i1 %113, label %917, label %114

114:                                              ; preds = %106
  %115 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 13
  %116 = load i8*, i8** %115, align 8
  %117 = shl i32 %89, 16
  %118 = ashr exact i32 %117, 16
  %119 = call i32 @_ZN6webrtc31WebRtc_DelayEstimatorProcessFixEPvPKtii(i8* %116, i16* nonnull %88, i32 65, i32 %118) #4
  switch i32 %119, label %121 [
    i32 -1, label %917
    i32 -2, label %120
  ]

120:                                              ; preds = %114
  br label %121

121:                                              ; preds = %114, %120
  %122 = phi i32 [ 0, %120 ], [ %119, %114 ]
  %123 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 19
  %124 = load i16, i16* %123, align 2
  %125 = icmp sgt i16 %124, -1
  %126 = sext i16 %124 to i32
  %127 = select i1 %125, i32 %126, i32 %122
  %128 = call i16* @_ZN6webrtc24WebRtcAecm_AlignedFarendEPNS_8AecmCoreEPii(%"struct.webrtc::AecmCore"* %0, i32* nonnull %23, i32 %127) #4
  %129 = load i32, i32* %23, align 4
  %130 = trunc i32 %129 to i16
  %131 = icmp eq i16* %128, null
  br i1 %131, label %917, label %132

132:                                              ; preds = %121
  %133 = load i32, i32* %13, align 4
  call void @_ZN6webrtc23WebRtcAecm_CalcEnergiesEPNS_8AecmCoreEPKtsjPi(%"struct.webrtc::AecmCore"* %0, i16* nonnull %128, i16 signext %130, i32 %133, i32* %42) #4
  %134 = call signext i16 @_ZN6webrtc23WebRtcAecm_CalcStepSizeEPNS_8AecmCoreE(%"struct.webrtc::AecmCore"* %0) #4
  %135 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 20
  %136 = load i32, i32* %135, align 4
  %137 = add i32 %136, 1
  store i32 %137, i32* %135, align 4
  call void @_ZN6webrtc24WebRtcAecm_UpdateChannelEPNS_8AecmCoreEPKtsS3_sPi(%"struct.webrtc::AecmCore"* %0, i16* nonnull %128, i16 signext %130, i16* nonnull %88, i16 signext %134, i32* %42) #4
  %138 = call signext i16 @_ZN6webrtc30WebRtcAecm_CalcSuppressionGainEPNS_8AecmCoreE(%"struct.webrtc::AecmCore"* %0) #4
  %139 = icmp eq i16 %138, 0
  %140 = ashr i16 %138, 15
  %141 = xor i16 %140, %138
  %142 = sext i16 %141 to i32
  %143 = call i32 @llvm.ctlz.i32(i32 %142, i1 false) #4, !range !2
  %144 = trunc i32 %143 to i16
  %145 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 21
  %146 = sext i16 %138 to i32
  %147 = zext i16 %138 to i32
  %148 = sub i16 -6, %130
  %149 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 22
  %150 = add nsw i16 %144, -16
  %151 = select i1 %139, i16 1, i16 %150
  br label %152

152:                                              ; preds = %312, %132
  %153 = phi i64 [ 0, %132 ], [ %317, %312 ]
  %154 = phi i16 [ 0, %132 ], [ %316, %312 ]
  %155 = getelementptr inbounds i32, i32* %42, i64 %153
  %156 = load i32, i32* %155, align 4
  %157 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 43, i64 %153
  %158 = load i32, i32* %157, align 4
  %159 = sub nsw i32 %156, %158
  %160 = sext i32 %159 to i64
  %161 = mul nsw i64 %160, 50
  %162 = ashr i64 %161, 8
  %163 = trunc i64 %162 to i32
  %164 = add nsw i32 %158, %163
  store i32 %164, i32* %157, align 4
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %172, label %166

166:                                              ; preds = %152
  %167 = ashr i32 %164, 31
  %168 = xor i32 %167, %164
  %169 = call i32 @llvm.ctlz.i32(i32 %168, i1 false) #4, !range !2
  %170 = trunc i32 %169 to i16
  %171 = add nsw i16 %170, -1
  br label %172

172:                                              ; preds = %152, %166
  %173 = phi i16 [ %171, %166 ], [ 0, %152 ]
  %174 = add nsw i16 %173, 1
  %175 = add nsw i16 %174, %151
  %176 = icmp sgt i16 %175, 16
  br i1 %176, label %177, label %181

177:                                              ; preds = %172
  %178 = mul i32 %164, %147
  %179 = load i16, i16* %145, align 8
  %180 = add i16 %148, %179
  br label %197

181:                                              ; preds = %172
  %182 = sub nsw i16 16, %173
  %183 = sub nsw i16 %182, %151
  %184 = sext i16 %183 to i32
  %185 = add nsw i16 %183, -6
  %186 = load i16, i16* %145, align 8
  %187 = sub i16 %186, %130
  %188 = add i16 %185, %187
  %189 = icmp slt i16 %173, %183
  br i1 %189, label %194, label %190

190:                                              ; preds = %181
  %191 = ashr i32 %146, %184
  %192 = and i32 %191, 65535
  %193 = mul i32 %192, %164
  br label %197

194:                                              ; preds = %181
  %195 = ashr i32 %164, %184
  %196 = mul nsw i32 %195, %146
  br label %197

197:                                              ; preds = %190, %194, %177
  %198 = phi i16 [ %179, %177 ], [ %186, %190 ], [ %186, %194 ]
  %199 = phi i32 [ %178, %177 ], [ %193, %190 ], [ %196, %194 ]
  %200 = phi i16 [ %180, %177 ], [ %188, %190 ], [ %188, %194 ]
  %201 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 44, i64 %153
  %202 = load i16, i16* %201, align 2
  %203 = icmp eq i16 %202, 0
  br i1 %203, label %204, label %208

204:                                              ; preds = %197
  %205 = load i16, i16* %149, align 2
  %206 = sub i16 %198, %205
  %207 = sext i16 %206 to i32
  br label %233

208:                                              ; preds = %197
  %209 = ashr i16 %202, 15
  %210 = xor i16 %209, %202
  %211 = sext i16 %210 to i32
  %212 = call i32 @llvm.ctlz.i32(i32 %211, i1 false) #4, !range !2
  %213 = trunc i32 %212 to i16
  %214 = add nsw i16 %213, -17
  %215 = load i16, i16* %149, align 2
  %216 = sub i16 %198, %215
  %217 = sext i16 %214 to i32
  %218 = sext i16 %216 to i32
  %219 = icmp sge i16 %214, %216
  %220 = or i1 %203, %219
  br i1 %220, label %233, label %221

221:                                              ; preds = %208
  %222 = sext i16 %202 to i32
  %223 = shl i32 %222, %217
  %224 = sub nsw i32 %217, %218
  %225 = getelementptr inbounds i16, i16* %107, i64 %153
  %226 = load i16, i16* %225, align 2
  %227 = zext i16 %226 to i32
  %228 = shl i32 %224, 16
  %229 = ashr exact i32 %228, 16
  %230 = sub nsw i32 0, %229
  %231 = lshr i32 %227, %230
  %232 = trunc i32 %231 to i16
  br label %244

233:                                              ; preds = %204, %208
  %234 = phi i32 [ %207, %204 ], [ %218, %208 ]
  %235 = phi i16 [ %206, %204 ], [ %216, %208 ]
  %236 = icmp slt i16 %235, 0
  %237 = sext i16 %202 to i32
  %238 = sub nsw i32 0, %234
  %239 = ashr i32 %237, %238
  %240 = shl i32 %237, %234
  %241 = select i1 %236, i32 %239, i32 %240
  %242 = getelementptr inbounds i16, i16* %107, i64 %153
  %243 = load i16, i16* %242, align 2
  br label %244

244:                                              ; preds = %233, %221
  %245 = phi i32 [ %223, %221 ], [ %241, %233 ]
  %246 = phi i16 [ %232, %221 ], [ %243, %233 ]
  %247 = phi i32 [ %224, %221 ], [ 0, %233 ]
  %248 = sext i16 %246 to i32
  %249 = shl i32 %245, 16
  %250 = ashr exact i32 %249, 16
  %251 = sub nsw i32 %248, %250
  %252 = ashr i32 %251, 4
  %253 = add nsw i32 %252, %250
  %254 = trunc i32 %253 to i16
  %255 = icmp eq i16 %254, 0
  br i1 %255, label %262, label %256

256:                                              ; preds = %244
  %257 = ashr i16 %254, 15
  %258 = xor i16 %257, %254
  %259 = sext i16 %258 to i32
  %260 = call i32 @llvm.ctlz.i32(i32 %259, i1 false) #4, !range !2
  %261 = add nsw i32 %260, -17
  br label %262

262:                                              ; preds = %244, %256
  %263 = phi i32 [ %261, %256 ], [ 0, %244 ]
  %264 = shl i32 %253, 16
  %265 = ashr exact i32 %264, 16
  %266 = shl i32 %247, 16
  %267 = ashr exact i32 %266, 16
  %268 = sub nsw i32 0, %267
  %269 = icmp slt i32 %263, %268
  %270 = zext i1 %269 to i32
  %271 = and i32 %265, %270
  %272 = icmp eq i32 %271, 0
  br i1 %272, label %273, label %279

273:                                              ; preds = %262
  %274 = icmp slt i32 %266, 0
  %275 = shl i32 %265, %268
  %276 = ashr i32 %265, %267
  %277 = select i1 %274, i32 %275, i32 %276
  %278 = trunc i32 %277 to i16
  br label %279

279:                                              ; preds = %262, %273
  %280 = phi i16 [ %278, %273 ], [ 32767, %262 ]
  store i16 %280, i16* %201, align 2
  %281 = icmp eq i32 %199, 0
  br i1 %281, label %282, label %284

282:                                              ; preds = %279
  %283 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 %153
  store i16 16384, i16* %283, align 2
  br label %312

284:                                              ; preds = %279
  %285 = icmp eq i16 %280, 0
  br i1 %285, label %286, label %288

286:                                              ; preds = %284
  %287 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 %153
  store i16 0, i16* %287, align 2
  br label %312

288:                                              ; preds = %284
  %289 = ashr i16 %280, 1
  %290 = sext i16 %289 to i32
  %291 = add i32 %199, %290
  %292 = call i32 @WebRtcSpl_DivU32U16(i32 %291, i16 zeroext %280) #4
  %293 = sext i16 %200 to i32
  %294 = icmp sgt i16 %200, -1
  %295 = shl i32 %292, %293
  %296 = sub nsw i32 0, %293
  %297 = lshr i32 %292, %296
  %298 = select i1 %294, i32 %295, i32 %297
  %299 = icmp sgt i32 %298, 16384
  br i1 %299, label %300, label %302

300:                                              ; preds = %288
  %301 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 %153
  store i16 0, i16* %301, align 2
  br label %312

302:                                              ; preds = %288
  %303 = icmp slt i32 %298, 0
  br i1 %303, label %304, label %306

304:                                              ; preds = %302
  %305 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 %153
  store i16 16384, i16* %305, align 2
  br label %312

306:                                              ; preds = %302
  %307 = trunc i32 %298 to i16
  %308 = sub nuw nsw i16 16384, %307
  %309 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 %153
  %310 = icmp sgt i16 %308, 0
  %311 = select i1 %310, i16 %308, i16 0
  store i16 %311, i16* %309, align 2
  br label %312

312:                                              ; preds = %306, %286, %304, %300, %282
  %313 = phi i16 [ %311, %306 ], [ 0, %286 ], [ 16384, %304 ], [ 0, %300 ], [ 16384, %282 ]
  %314 = icmp ne i16 %313, 0
  %315 = zext i1 %314 to i16
  %316 = add i16 %154, %315
  %317 = add nuw nsw i64 %153, 1
  %318 = icmp eq i64 %317, 65
  br i1 %318, label %319, label %152

319:                                              ; preds = %312
  %320 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 10
  %321 = load i16, i16* %320, align 8
  %322 = icmp eq i16 %321, 2
  br i1 %322, label %323, label %493

323:                                              ; preds = %319
  %324 = bitcast [65 x i16]* %22 to <8 x i16>*
  %325 = load <8 x i16>, <8 x i16>* %324, align 16
  %326 = sext <8 x i16> %325 to <8 x i32>
  %327 = mul nsw <8 x i32> %326, %326
  %328 = lshr <8 x i32> %327, <i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14>
  %329 = trunc <8 x i32> %328 to <8 x i16>
  %330 = bitcast [65 x i16]* %22 to <8 x i16>*
  store <8 x i16> %329, <8 x i16>* %330, align 16
  %331 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 8
  %332 = bitcast i16* %331 to <8 x i16>*
  %333 = load <8 x i16>, <8 x i16>* %332, align 16
  %334 = sext <8 x i16> %333 to <8 x i32>
  %335 = mul nsw <8 x i32> %334, %334
  %336 = lshr <8 x i32> %335, <i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14>
  %337 = trunc <8 x i32> %336 to <8 x i16>
  %338 = bitcast i16* %331 to <8 x i16>*
  store <8 x i16> %337, <8 x i16>* %338, align 16
  %339 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 16
  %340 = bitcast i16* %339 to <8 x i16>*
  %341 = load <8 x i16>, <8 x i16>* %340, align 16
  %342 = sext <8 x i16> %341 to <8 x i32>
  %343 = mul nsw <8 x i32> %342, %342
  %344 = lshr <8 x i32> %343, <i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14>
  %345 = trunc <8 x i32> %344 to <8 x i16>
  %346 = bitcast i16* %339 to <8 x i16>*
  store <8 x i16> %345, <8 x i16>* %346, align 16
  %347 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 24
  %348 = bitcast i16* %347 to <8 x i16>*
  %349 = load <8 x i16>, <8 x i16>* %348, align 16
  %350 = sext <8 x i16> %349 to <8 x i32>
  %351 = mul nsw <8 x i32> %350, %350
  %352 = lshr <8 x i32> %351, <i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14>
  %353 = trunc <8 x i32> %352 to <8 x i16>
  %354 = bitcast i16* %347 to <8 x i16>*
  store <8 x i16> %353, <8 x i16>* %354, align 16
  %355 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 32
  %356 = bitcast i16* %355 to <8 x i16>*
  %357 = load <8 x i16>, <8 x i16>* %356, align 16
  %358 = sext <8 x i16> %357 to <8 x i32>
  %359 = mul nsw <8 x i32> %358, %358
  %360 = lshr <8 x i32> %359, <i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14>
  %361 = trunc <8 x i32> %360 to <8 x i16>
  %362 = bitcast i16* %355 to <8 x i16>*
  store <8 x i16> %361, <8 x i16>* %362, align 16
  %363 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 40
  %364 = bitcast i16* %363 to <8 x i16>*
  %365 = load <8 x i16>, <8 x i16>* %364, align 16
  %366 = sext <8 x i16> %365 to <8 x i32>
  %367 = mul nsw <8 x i32> %366, %366
  %368 = lshr <8 x i32> %367, <i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14>
  %369 = trunc <8 x i32> %368 to <8 x i16>
  %370 = bitcast i16* %363 to <8 x i16>*
  store <8 x i16> %369, <8 x i16>* %370, align 16
  %371 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 48
  %372 = bitcast i16* %371 to <8 x i16>*
  %373 = load <8 x i16>, <8 x i16>* %372, align 16
  %374 = sext <8 x i16> %373 to <8 x i32>
  %375 = mul nsw <8 x i32> %374, %374
  %376 = lshr <8 x i32> %375, <i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14>
  %377 = trunc <8 x i32> %376 to <8 x i16>
  %378 = bitcast i16* %371 to <8 x i16>*
  store <8 x i16> %377, <8 x i16>* %378, align 16
  %379 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 56
  %380 = bitcast i16* %379 to <8 x i16>*
  %381 = load <8 x i16>, <8 x i16>* %380, align 16
  %382 = sext <8 x i16> %381 to <8 x i32>
  %383 = mul nsw <8 x i32> %382, %382
  %384 = lshr <8 x i32> %383, <i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14>
  %385 = trunc <8 x i32> %384 to <8 x i16>
  %386 = bitcast i16* %379 to <8 x i16>*
  store <8 x i16> %385, <8 x i16>* %386, align 16
  %387 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 64
  %388 = load i16, i16* %387, align 16
  %389 = sext i16 %388 to i32
  %390 = mul nsw i32 %389, %389
  %391 = lshr i32 %390, 14
  %392 = trunc i32 %391 to i16
  store i16 %392, i16* %387, align 16
  %393 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 4
  %394 = load i16, i16* %393, align 8
  %395 = sext i16 %394 to i32
  %396 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 5
  %397 = load i16, i16* %396, align 2
  %398 = sext i16 %397 to i32
  %399 = add nsw i32 %395, %398
  %400 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 6
  %401 = load i16, i16* %400, align 4
  %402 = sext i16 %401 to i32
  %403 = add nsw i32 %399, %402
  %404 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 7
  %405 = load i16, i16* %404, align 2
  %406 = sext i16 %405 to i32
  %407 = add nsw i32 %403, %406
  %408 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 8
  %409 = load i16, i16* %408, align 16
  %410 = sext i16 %409 to i32
  %411 = add nsw i32 %407, %410
  %412 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 9
  %413 = load i16, i16* %412, align 2
  %414 = sext i16 %413 to i32
  %415 = add nsw i32 %411, %414
  %416 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 10
  %417 = load i16, i16* %416, align 4
  %418 = sext i16 %417 to i32
  %419 = add nsw i32 %415, %418
  %420 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 11
  %421 = load i16, i16* %420, align 2
  %422 = sext i16 %421 to i32
  %423 = add nsw i32 %419, %422
  %424 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 12
  %425 = load i16, i16* %424, align 8
  %426 = sext i16 %425 to i32
  %427 = add nsw i32 %423, %426
  %428 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 13
  %429 = load i16, i16* %428, align 2
  %430 = sext i16 %429 to i32
  %431 = add nsw i32 %427, %430
  %432 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 14
  %433 = load i16, i16* %432, align 4
  %434 = sext i16 %433 to i32
  %435 = add nsw i32 %431, %434
  %436 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 15
  %437 = load i16, i16* %436, align 2
  %438 = sext i16 %437 to i32
  %439 = add nsw i32 %435, %438
  %440 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 16
  %441 = load i16, i16* %440, align 16
  %442 = sext i16 %441 to i32
  %443 = add nsw i32 %439, %442
  %444 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 17
  %445 = load i16, i16* %444, align 2
  %446 = sext i16 %445 to i32
  %447 = add nsw i32 %443, %446
  %448 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 18
  %449 = load i16, i16* %448, align 4
  %450 = sext i16 %449 to i32
  %451 = add nsw i32 %447, %450
  %452 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 19
  %453 = load i16, i16* %452, align 2
  %454 = sext i16 %453 to i32
  %455 = add nsw i32 %451, %454
  %456 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 20
  %457 = load i16, i16* %456, align 8
  %458 = sext i16 %457 to i32
  %459 = add nsw i32 %455, %458
  %460 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 21
  %461 = load i16, i16* %460, align 2
  %462 = sext i16 %461 to i32
  %463 = add nsw i32 %459, %462
  %464 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 22
  %465 = load i16, i16* %464, align 4
  %466 = sext i16 %465 to i32
  %467 = add nsw i32 %463, %466
  %468 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 23
  %469 = load i16, i16* %468, align 2
  %470 = sext i16 %469 to i32
  %471 = add nsw i32 %467, %470
  %472 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 24
  %473 = load i16, i16* %472, align 16
  %474 = sext i16 %473 to i32
  %475 = add nsw i32 %471, %474
  %476 = sdiv i32 %475, 21
  %477 = shl i32 %476, 16
  %478 = ashr exact i32 %477, 16
  %479 = trunc i32 %476 to i16
  br label %480

480:                                              ; preds = %490, %323
  %481 = phi i16 [ %473, %323 ], [ %492, %490 ]
  %482 = phi i64 [ 24, %323 ], [ %488, %490 ]
  %483 = sext i16 %481 to i32
  %484 = icmp slt i32 %478, %483
  br i1 %484, label %485, label %487

485:                                              ; preds = %480
  %486 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 %482
  store i16 %479, i16* %486, align 2
  br label %487

487:                                              ; preds = %480, %485
  %488 = add nuw nsw i64 %482, 1
  %489 = icmp eq i64 %488, 65
  br i1 %489, label %493, label %490

490:                                              ; preds = %487
  %491 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 %488
  %492 = load i16, i16* %491, align 2
  br label %480

493:                                              ; preds = %487, %319
  %494 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 18
  %495 = load i16, i16* %494, align 8
  %496 = icmp eq i16 %495, 0
  br i1 %496, label %540, label %497

497:                                              ; preds = %493
  %498 = icmp slt i16 %316, 3
  %499 = select i1 %498, i32 0, i32 16384
  %500 = xor i1 %498, true
  br label %501

501:                                              ; preds = %510, %497
  %502 = phi i64 [ 0, %497 ], [ %538, %510 ]
  %503 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 %502
  %504 = load i16, i16* %503, align 2
  %505 = icmp sgt i16 %504, 16384
  br i1 %505, label %508, label %506

506:                                              ; preds = %501
  %507 = icmp slt i16 %504, 3277
  br i1 %507, label %508, label %510

508:                                              ; preds = %506, %501
  %509 = phi i16 [ 16384, %501 ], [ 0, %506 ]
  store i16 %509, i16* %503, align 2
  br label %510

510:                                              ; preds = %508, %506
  %511 = phi i16 [ %504, %506 ], [ %509, %508 ]
  %512 = icmp eq i16 %511, 16384
  %513 = and i1 %512, %500
  %514 = sext i16 %511 to i32
  %515 = mul nsw i32 %499, %514
  %516 = lshr exact i32 %515, 14
  %517 = trunc i32 %516 to i16
  %518 = select i1 %513, i16 16384, i16 %517
  store i16 %518, i16* %503, align 2
  %519 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %46, i64 %502, i32 0
  %520 = load i16, i16* %519, align 4
  %521 = sext i16 %520 to i32
  %522 = sext i16 %518 to i32
  %523 = mul nsw i32 %522, %521
  %524 = add nsw i32 %523, 8192
  %525 = lshr i32 %524, 14
  %526 = trunc i32 %525 to i16
  %527 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %50, i64 %502, i32 0
  store i16 %526, i16* %527, align 4
  %528 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %46, i64 %502, i32 1
  %529 = load i16, i16* %528, align 2
  %530 = sext i16 %529 to i32
  %531 = load i16, i16* %503, align 2
  %532 = sext i16 %531 to i32
  %533 = mul nsw i32 %532, %530
  %534 = add nsw i32 %533, 8192
  %535 = lshr i32 %534, 14
  %536 = trunc i32 %535 to i16
  %537 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %50, i64 %502, i32 1
  store i16 %536, i16* %537, align 2
  %538 = add nuw nsw i64 %502, 1
  %539 = icmp eq i64 %538, 65
  br i1 %539, label %565, label %501

540:                                              ; preds = %493, %540
  %541 = phi i64 [ %563, %540 ], [ 0, %493 ]
  %542 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %46, i64 %541, i32 0
  %543 = load i16, i16* %542, align 4
  %544 = sext i16 %543 to i32
  %545 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 %541
  %546 = load i16, i16* %545, align 2
  %547 = sext i16 %546 to i32
  %548 = mul nsw i32 %547, %544
  %549 = add nsw i32 %548, 8192
  %550 = lshr i32 %549, 14
  %551 = trunc i32 %550 to i16
  %552 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %50, i64 %541, i32 0
  store i16 %551, i16* %552, align 4
  %553 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %46, i64 %541, i32 1
  %554 = load i16, i16* %553, align 2
  %555 = sext i16 %554 to i32
  %556 = load i16, i16* %545, align 2
  %557 = sext i16 %556 to i32
  %558 = mul nsw i32 %557, %555
  %559 = add nsw i32 %558, 8192
  %560 = lshr i32 %559, 14
  %561 = trunc i32 %560 to i16
  %562 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %50, i64 %541, i32 1
  store i16 %561, i16* %562, align 2
  %563 = add nuw nsw i64 %541, 1
  %564 = icmp eq i64 %563, 65
  br i1 %564, label %565, label %540

565:                                              ; preds = %510, %540
  %566 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 49
  %567 = load i16, i16* %566, align 2
  %568 = icmp eq i16 %567, 1
  br i1 %568, label %569, label %809

569:                                              ; preds = %565
  %570 = bitcast [64 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %570) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %570, i8 -86, i64 128, i1 false) #4
  call void @llvm.lifetime.start.p0i8(i64 130, i8* nonnull %8) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 130, i1 false) #4
  call void @llvm.lifetime.start.p0i8(i64 130, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 130, i1 false) #4
  %571 = bitcast [65 x i16]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 130, i8* nonnull %571) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %571, i8 -86, i64 130, i1 false) #4
  %572 = load i16, i16* %145, align 8
  %573 = sub i16 15, %572
  %574 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 48
  %575 = load i16, i16* %574, align 4
  %576 = icmp slt i16 %575, 100
  br i1 %576, label %577, label %579

577:                                              ; preds = %569
  %578 = add nsw i16 %575, 1
  store i16 %578, i16* %574, align 4
  br label %579

579:                                              ; preds = %577, %569
  %580 = phi i32 [ 6, %577 ], [ 9, %569 ]
  %581 = sext i16 %573 to i32
  %582 = shl i32 1, %580
  br label %627

583:                                              ; preds = %670
  %584 = shl i32 32767, %581
  %585 = insertelement <4 x i32> undef, i32 %581, i32 0
  %586 = shufflevector <4 x i32> %585, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %587

587:                                              ; preds = %611, %583
  %588 = phi i64 [ 0, %583 ], [ %625, %611 ]
  %589 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 45, i64 %588
  %590 = bitcast i32* %589 to <4 x i32>*
  %591 = load <4 x i32>, <4 x i32>* %590, align 4
  %592 = ashr <4 x i32> %591, %586
  %593 = icmp sgt <4 x i32> %592, <i32 32767, i32 32767, i32 32767, i32 32767>
  %594 = extractelement <4 x i1> %593, i32 0
  br i1 %594, label %595, label %596

595:                                              ; preds = %587
  store i32 %584, i32* %589, align 4
  br label %596

596:                                              ; preds = %595, %587
  %597 = extractelement <4 x i1> %593, i32 1
  br i1 %597, label %598, label %601

598:                                              ; preds = %596
  %599 = or i64 %588, 1
  %600 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 45, i64 %599
  store i32 %584, i32* %600, align 4
  br label %601

601:                                              ; preds = %598, %596
  %602 = extractelement <4 x i1> %593, i32 2
  br i1 %602, label %603, label %606

603:                                              ; preds = %601
  %604 = or i64 %588, 2
  %605 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 45, i64 %604
  store i32 %584, i32* %605, align 4
  br label %606

606:                                              ; preds = %603, %601
  %607 = extractelement <4 x i1> %593, i32 3
  br i1 %607, label %608, label %611

608:                                              ; preds = %606
  %609 = or i64 %588, 3
  %610 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 45, i64 %609
  store i32 %584, i32* %610, align 4
  br label %611

611:                                              ; preds = %608, %606
  %612 = getelementptr inbounds [65 x i16], [65 x i16]* %11, i64 0, i64 %588
  %613 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 %588
  %614 = bitcast i16* %613 to <4 x i16>*
  %615 = load <4 x i16>, <4 x i16>* %614, align 8
  %616 = sub <4 x i16> <i16 16384, i16 16384, i16 16384, i16 16384>, %615
  %617 = sext <4 x i16> %616 to <4 x i32>
  %618 = shl <4 x i32> %592, <i32 16, i32 16, i32 16, i32 16>
  %619 = ashr exact <4 x i32> %618, <i32 16, i32 16, i32 16, i32 16>
  %620 = select <4 x i1> %593, <4 x i32> <i32 32767, i32 32767, i32 32767, i32 32767>, <4 x i32> %619
  %621 = mul nsw <4 x i32> %620, %617
  %622 = lshr <4 x i32> %621, <i32 14, i32 14, i32 14, i32 14>
  %623 = trunc <4 x i32> %622 to <4 x i16>
  %624 = bitcast i16* %612 to <4 x i16>*
  store <4 x i16> %623, <4 x i16>* %624, align 8
  %625 = add i64 %588, 4
  %626 = icmp eq i64 %625, 64
  br i1 %626, label %673, label %587, !llvm.loop !3

627:                                              ; preds = %670, %579
  %628 = phi i64 [ 0, %579 ], [ %671, %670 ]
  %629 = getelementptr inbounds i16, i16* %107, i64 %628
  %630 = load i16, i16* %629, align 2
  %631 = zext i16 %630 to i32
  %632 = shl i32 %631, %581
  %633 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 45, i64 %628
  %634 = load i32, i32* %633, align 4
  %635 = icmp sgt i32 %634, %632
  br i1 %635, label %636, label %650

636:                                              ; preds = %627
  %637 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 46, i64 %628
  store i32 0, i32* %637, align 4
  %638 = icmp slt i32 %634, %582
  br i1 %638, label %639, label %646

639:                                              ; preds = %636
  %640 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 47, i64 %628
  %641 = load i32, i32* %640, align 4
  %642 = add nsw i32 %641, 1
  store i32 %642, i32* %640, align 4
  %643 = icmp sgt i32 %641, 3
  br i1 %643, label %644, label %670

644:                                              ; preds = %639
  %645 = add nsw i32 %634, -1
  store i32 %645, i32* %633, align 4
  store i32 0, i32* %640, align 4
  br label %670

646:                                              ; preds = %636
  %647 = sub nsw i32 %634, %632
  %648 = ashr i32 %647, %580
  %649 = sub nsw i32 %634, %648
  store i32 %649, i32* %633, align 4
  br label %670

650:                                              ; preds = %627
  %651 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 47, i64 %628
  store i32 0, i32* %651, align 4
  %652 = icmp sgt i32 %634, 524287
  br i1 %652, label %653, label %656

653:                                              ; preds = %650
  %654 = lshr i32 %634, 11
  %655 = mul nsw i32 %654, 2049
  store i32 %655, i32* %633, align 4
  br label %670

656:                                              ; preds = %650
  %657 = icmp sgt i32 %634, 2047
  br i1 %657, label %658, label %661

658:                                              ; preds = %656
  %659 = mul nsw i32 %634, 2049
  %660 = ashr i32 %659, 11
  store i32 %660, i32* %633, align 4
  br label %670

661:                                              ; preds = %656
  %662 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 46, i64 %628
  %663 = load i32, i32* %662, align 4
  %664 = add nsw i32 %663, 1
  store i32 %664, i32* %662, align 4
  %665 = icmp sgt i32 %663, 3
  br i1 %665, label %666, label %670

666:                                              ; preds = %661
  %667 = ashr i32 %634, 9
  %668 = add nsw i32 %634, 1
  %669 = add i32 %668, %667
  store i32 %669, i32* %633, align 4
  store i32 0, i32* %662, align 4
  br label %670

670:                                              ; preds = %666, %661, %658, %653, %646, %644, %639
  %671 = add nuw nsw i64 %628, 1
  %672 = icmp eq i64 %671, 65
  br i1 %672, label %583, label %627

673:                                              ; preds = %611
  %674 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 45, i64 64
  %675 = load i32, i32* %674, align 4
  %676 = ashr i32 %675, %581
  %677 = icmp sgt i32 %676, 32767
  br i1 %677, label %678, label %679

678:                                              ; preds = %673
  store i32 %584, i32* %674, align 4
  br label %679

679:                                              ; preds = %678, %673
  %680 = phi i32 [ 32767, %678 ], [ %676, %673 ]
  %681 = getelementptr inbounds [65 x i16], [65 x i16]* %11, i64 0, i64 64
  %682 = getelementptr inbounds [65 x i16], [65 x i16]* %22, i64 0, i64 64
  %683 = load i16, i16* %682, align 16
  %684 = sub i16 16384, %683
  %685 = sext i16 %684 to i32
  %686 = shl i32 %680, 16
  %687 = ashr exact i32 %686, 16
  %688 = mul nsw i32 %687, %685
  %689 = lshr i32 %688, 14
  %690 = trunc i32 %689 to i16
  store i16 %690, i16* %681, align 16
  %691 = getelementptr inbounds [64 x i16], [64 x i16]* %6, i64 0, i64 0
  %692 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 11
  %693 = call signext i16 @WebRtcSpl_RandUArray(i16* nonnull %691, i16 signext 64, i32* %692) #4
  %694 = getelementptr inbounds [65 x i16], [65 x i16]* %7, i64 0, i64 0
  store i16 0, i16* %694, align 16
  %695 = getelementptr inbounds [65 x i16], [65 x i16]* %9, i64 0, i64 0
  store i16 0, i16* %695, align 16
  br label %696

696:                                              ; preds = %696, %679
  %697 = phi i64 [ 1, %679 ], [ %725, %696 ]
  %698 = add nsw i64 %697, -1
  %699 = getelementptr inbounds [64 x i16], [64 x i16]* %6, i64 0, i64 %698
  %700 = load i16, i16* %699, align 2
  %701 = sext i16 %700 to i32
  %702 = mul nsw i32 %701, 359
  %703 = ashr i32 %702, 15
  %704 = zext i32 %703 to i64
  %705 = getelementptr inbounds [65 x i16], [65 x i16]* %11, i64 0, i64 %697
  %706 = load i16, i16* %705, align 2
  %707 = sext i16 %706 to i32
  %708 = shl i64 %704, 48
  %709 = ashr exact i64 %708, 48
  %710 = getelementptr inbounds [0 x i16], [0 x i16]* @_ZN6webrtc20WebRtcAecm_kCosTableE, i64 0, i64 %709
  %711 = load i16, i16* %710, align 2
  %712 = sext i16 %711 to i32
  %713 = mul nsw i32 %712, %707
  %714 = lshr i32 %713, 13
  %715 = trunc i32 %714 to i16
  %716 = getelementptr inbounds [65 x i16], [65 x i16]* %7, i64 0, i64 %697
  store i16 %715, i16* %716, align 2
  %717 = getelementptr inbounds [0 x i16], [0 x i16]* @_ZN6webrtc20WebRtcAecm_kSinTableE, i64 0, i64 %709
  %718 = load i16, i16* %717, align 2
  %719 = sext i16 %718 to i32
  %720 = mul nsw i32 %707, %719
  %721 = sub nsw i32 0, %720
  %722 = lshr i32 %721, 13
  %723 = trunc i32 %722 to i16
  %724 = getelementptr inbounds [65 x i16], [65 x i16]* %9, i64 0, i64 %697
  store i16 %723, i16* %724, align 2
  %725 = add nuw nsw i64 %697, 1
  %726 = icmp eq i64 %725, 65
  br i1 %726, label %727, label %696

727:                                              ; preds = %696
  %728 = getelementptr inbounds [65 x i16], [65 x i16]* %9, i64 0, i64 64
  store i16 0, i16* %728, align 16
  %729 = getelementptr %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %50, i64 65
  %730 = getelementptr inbounds [65 x i16], [65 x i16]* %7, i64 1, i64 0
  %731 = bitcast i16* %730 to i8*
  %732 = getelementptr inbounds [65 x i16], [65 x i16]* %9, i64 1, i64 0
  %733 = bitcast i16* %732 to i8*
  %734 = icmp ult i8* %51, %731
  %735 = bitcast %"struct.webrtc::ComplexInt16"* %729 to [65 x i16]*
  %736 = icmp ult [65 x i16]* %7, %735
  %737 = and i1 %734, %736
  %738 = icmp ult i8* %51, %733
  %739 = bitcast %"struct.webrtc::ComplexInt16"* %729 to [65 x i16]*
  %740 = icmp ult [65 x i16]* %9, %739
  %741 = and i1 %738, %740
  %742 = or i1 %737, %741
  br i1 %742, label %778, label %743

743:                                              ; preds = %727, %743
  %744 = phi i64 [ %776, %743 ], [ 0, %727 ]
  %745 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %50, i64 %744, i32 0
  %746 = bitcast i16* %745 to <16 x i16>*
  %747 = load <16 x i16>, <16 x i16>* %746, align 32
  %748 = shufflevector <16 x i16> %747, <16 x i16> undef, <8 x i32> <i32 0, i32 2, i32 4, i32 6, i32 8, i32 10, i32 12, i32 14>
  %749 = shufflevector <16 x i16> %747, <16 x i16> undef, <8 x i32> <i32 1, i32 3, i32 5, i32 7, i32 9, i32 11, i32 13, i32 15>
  %750 = getelementptr inbounds [65 x i16], [65 x i16]* %7, i64 0, i64 %744
  %751 = bitcast i16* %750 to <8 x i16>*
  %752 = load <8 x i16>, <8 x i16>* %751, align 16, !alias.scope !5
  %753 = sext <8 x i16> %748 to <8 x i32>
  %754 = sext <8 x i16> %752 to <8 x i32>
  %755 = add nsw <8 x i32> %754, %753
  %756 = icmp sgt <8 x i32> %755, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %757 = select <8 x i1> %756, <8 x i32> %755, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %758 = icmp slt <8 x i32> %757, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %759 = select <8 x i1> %758, <8 x i32> %757, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %760 = trunc <8 x i32> %759 to <8 x i16>
  %761 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %50, i64 %744, i32 1
  %762 = getelementptr inbounds [65 x i16], [65 x i16]* %9, i64 0, i64 %744
  %763 = bitcast i16* %762 to <8 x i16>*
  %764 = load <8 x i16>, <8 x i16>* %763, align 16, !alias.scope !8
  %765 = sext <8 x i16> %749 to <8 x i32>
  %766 = sext <8 x i16> %764 to <8 x i32>
  %767 = add nsw <8 x i32> %766, %765
  %768 = icmp sgt <8 x i32> %767, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %769 = select <8 x i1> %768, <8 x i32> %767, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %770 = icmp slt <8 x i32> %769, <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %771 = select <8 x i1> %770, <8 x i32> %769, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>
  %772 = trunc <8 x i32> %771 to <8 x i16>
  %773 = getelementptr inbounds i16, i16* %761, i64 -1
  %774 = bitcast i16* %773 to <16 x i16>*
  %775 = shufflevector <8 x i16> %760, <8 x i16> %772, <16 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11, i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  store <16 x i16> %775, <16 x i16>* %774, align 2
  %776 = add i64 %744, 8
  %777 = icmp eq i64 %776, 64
  br i1 %777, label %778, label %743, !llvm.loop !10

778:                                              ; preds = %743, %727
  %779 = phi i64 [ 0, %727 ], [ 64, %743 ]
  br label %780

780:                                              ; preds = %778, %780
  %781 = phi i64 [ %806, %780 ], [ %779, %778 ]
  %782 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %50, i64 %781, i32 0
  %783 = load i16, i16* %782, align 4
  %784 = getelementptr inbounds [65 x i16], [65 x i16]* %7, i64 0, i64 %781
  %785 = load i16, i16* %784, align 2
  %786 = sext i16 %783 to i32
  %787 = sext i16 %785 to i32
  %788 = add nsw i32 %787, %786
  %789 = icmp sgt i32 %788, -32768
  %790 = select i1 %789, i32 %788, i32 -32768
  %791 = icmp slt i32 %790, 32767
  %792 = select i1 %791, i32 %790, i32 32767
  %793 = trunc i32 %792 to i16
  store i16 %793, i16* %782, align 4
  %794 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %50, i64 %781, i32 1
  %795 = load i16, i16* %794, align 2
  %796 = getelementptr inbounds [65 x i16], [65 x i16]* %9, i64 0, i64 %781
  %797 = load i16, i16* %796, align 2
  %798 = sext i16 %795 to i32
  %799 = sext i16 %797 to i32
  %800 = add nsw i32 %799, %798
  %801 = icmp sgt i32 %800, -32768
  %802 = select i1 %801, i32 %800, i32 -32768
  %803 = icmp slt i32 %802, 32767
  %804 = select i1 %803, i32 %802, i32 32767
  %805 = trunc i32 %804 to i16
  store i16 %805, i16* %794, align 2
  %806 = add nuw nsw i64 %781, 1
  %807 = icmp eq i64 %806, 65
  br i1 %807, label %808, label %780, !llvm.loop !11

808:                                              ; preds = %780
  call void @llvm.lifetime.end.p0i8(i64 130, i8* nonnull %571) #4
  call void @llvm.lifetime.end.p0i8(i64 130, i8* nonnull %10) #4
  call void @llvm.lifetime.end.p0i8(i64 130, i8* nonnull %8) #4
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %570) #4
  br label %809

809:                                              ; preds = %808, %565
  br label %810

810:                                              ; preds = %919, %809
  %811 = phi i64 [ 1, %809 ], [ %928, %919 ]
  %812 = phi i64 [ 2, %809 ], [ %929, %919 ]
  %813 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %50, i64 %811, i32 0
  %814 = load i16, i16* %813, align 4
  %815 = getelementptr inbounds i16, i16* %38, i64 %812
  store i16 %814, i16* %815, align 4
  %816 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %50, i64 %811, i32 1
  %817 = load i16, i16* %816, align 2
  %818 = sub i16 0, %817
  %819 = or i64 %812, 1
  %820 = getelementptr inbounds i16, i16* %38, i64 %819
  store i16 %818, i16* %820, align 2
  %821 = add nuw nsw i64 %811, 1
  %822 = add nuw nsw i64 %812, 2
  %823 = icmp eq i64 %821, 64
  br i1 %823, label %824, label %919

824:                                              ; preds = %810
  %825 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %50, i64 0, i32 0
  %826 = load i16, i16* %825, align 32
  store i16 %826, i16* %38, align 32
  %827 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %50, i64 0, i32 1
  %828 = load i16, i16* %827, align 2
  %829 = sub i16 0, %828
  %830 = getelementptr inbounds i16, i16* %38, i64 1
  store i16 %829, i16* %830, align 2
  %831 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %50, i64 64, i32 0
  %832 = load i16, i16* %831, align 32
  %833 = getelementptr inbounds i16, i16* %38, i64 128
  store i16 %832, i16* %833, align 32
  %834 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %50, i64 64, i32 1
  %835 = load i16, i16* %834, align 2
  %836 = sub i16 0, %835
  %837 = getelementptr inbounds i16, i16* %38, i64 129
  store i16 %836, i16* %837, align 2
  %838 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 68
  %839 = load %struct.RealFFT*, %struct.RealFFT** %838, align 8
  %840 = call i32 @WebRtcSpl_RealInverseFFT(%struct.RealFFT* %839, i16* %38, i16* %825) #4
  %841 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 42
  br label %842

842:                                              ; preds = %842, %824
  %843 = phi i64 [ 0, %824 ], [ %900, %842 ]
  %844 = getelementptr inbounds i16, i16* %825, i64 %843
  %845 = load i16, i16* %844, align 2
  %846 = sext i16 %845 to i32
  %847 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN6webrtc12_GLOBAL__N_123WebRtcAecm_kSqrtHanningE, i64 0, i64 %843
  %848 = load i16, i16* %847, align 2
  %849 = sext i16 %848 to i32
  %850 = mul nsw i32 %849, %846
  %851 = add nsw i32 %850, 8192
  %852 = lshr i32 %851, 14
  %853 = trunc i32 %852 to i16
  store i16 %853, i16* %844, align 2
  %854 = load i16, i16* %145, align 8
  %855 = sext i16 %854 to i32
  %856 = sub nsw i32 %840, %855
  %857 = icmp sgt i32 %856, -1
  %858 = shl i32 %852, 16
  %859 = ashr exact i32 %858, 16
  %860 = shl i32 %859, %856
  %861 = sub nsw i32 0, %856
  %862 = ashr i32 %859, %861
  %863 = select i1 %857, i32 %860, i32 %862
  %864 = load i16*, i16** %841, align 8
  %865 = getelementptr inbounds i16, i16* %864, i64 %843
  %866 = load i16, i16* %865, align 2
  %867 = sext i16 %866 to i32
  %868 = add nsw i32 %863, %867
  %869 = icmp sgt i32 %868, -32768
  %870 = select i1 %869, i32 %868, i32 -32768
  %871 = icmp slt i32 %870, 32767
  %872 = select i1 %871, i32 %870, i32 32767
  %873 = trunc i32 %872 to i16
  %874 = getelementptr inbounds i16, i16* %4, i64 %843
  store i16 %873, i16* %874, align 2
  %875 = add nuw nsw i64 %843, 64
  %876 = getelementptr inbounds i16, i16* %825, i64 %875
  %877 = load i16, i16* %876, align 2
  %878 = sext i16 %877 to i32
  %879 = sub nuw nsw i64 64, %843
  %880 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN6webrtc12_GLOBAL__N_123WebRtcAecm_kSqrtHanningE, i64 0, i64 %879
  %881 = load i16, i16* %880, align 2
  %882 = sext i16 %881 to i32
  %883 = mul nsw i32 %882, %878
  %884 = ashr i32 %883, 14
  %885 = load i16, i16* %145, align 8
  %886 = sext i16 %885 to i32
  %887 = sub nsw i32 %840, %886
  %888 = icmp sgt i32 %887, -1
  %889 = shl i32 %884, %887
  %890 = sub nsw i32 0, %887
  %891 = ashr i32 %884, %890
  %892 = select i1 %888, i32 %889, i32 %891
  %893 = icmp sgt i32 %892, -32768
  %894 = select i1 %893, i32 %892, i32 -32768
  %895 = icmp slt i32 %894, 32767
  %896 = select i1 %895, i32 %894, i32 32767
  %897 = trunc i32 %896 to i16
  %898 = load i16*, i16** %841, align 8
  %899 = getelementptr inbounds i16, i16* %898, i64 %843
  store i16 %897, i16* %899, align 2
  %900 = add nuw nsw i64 %843, 1
  %901 = icmp eq i64 %900, 64
  br i1 %901, label %902, label %842

902:                                              ; preds = %842
  %903 = load i16*, i16** %66, align 8
  %904 = bitcast i16* %903 to i8*
  %905 = getelementptr inbounds i16, i16* %903, i64 64
  %906 = bitcast i16* %905 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %904, i8* align 2 %906, i64 128, i1 false) #4
  %907 = load i16*, i16** %71, align 8
  %908 = bitcast i16* %907 to i8*
  %909 = getelementptr inbounds i16, i16* %907, i64 64
  %910 = bitcast i16* %909 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %908, i8* align 2 %910, i64 128, i1 false) #4
  br i1 %76, label %917, label %911

911:                                              ; preds = %902
  %912 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 40
  %913 = load i16*, i16** %912, align 8
  %914 = bitcast i16* %913 to i8*
  %915 = getelementptr inbounds i16, i16* %913, i64 64
  %916 = bitcast i16* %915 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %914, i8* align 2 %916, i64 128, i1 false) #4
  br label %917

917:                                              ; preds = %911, %902, %121, %114, %106
  %918 = phi i32 [ -1, %106 ], [ %119, %114 ], [ -1, %121 ], [ 0, %902 ], [ 0, %911 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %53) #4
  call void @llvm.lifetime.end.p0i8(i64 130, i8* nonnull %52) #4
  call void @llvm.lifetime.end.p0i8(i64 544, i8* nonnull %34) #4
  call void @llvm.lifetime.end.p0i8(i64 544, i8* nonnull %33) #4
  call void @llvm.lifetime.end.p0i8(i64 292, i8* nonnull %32) #4
  call void @llvm.lifetime.end.p0i8(i64 548, i8* nonnull %31) #4
  call void @llvm.lifetime.end.p0i8(i64 130, i8* nonnull %29) #4
  call void @llvm.lifetime.end.p0i8(i64 130, i8* nonnull %28) #4
  call void @llvm.lifetime.end.p0i8(i64 130, i8* nonnull %27) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %26) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #4
  ret i32 %918

919:                                              ; preds = %810
  %920 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %50, i64 %821, i32 0
  %921 = load i16, i16* %920, align 4
  %922 = getelementptr inbounds i16, i16* %38, i64 %822
  store i16 %921, i16* %922, align 4
  %923 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %50, i64 %821, i32 1
  %924 = load i16, i16* %923, align 2
  %925 = sub i16 0, %924
  %926 = or i64 %822, 1
  %927 = getelementptr inbounds i16, i16* %38, i64 %926
  store i16 %925, i16* %927, align 2
  %928 = add nuw nsw i64 %811, 2
  %929 = add nuw nsw i64 %812, 4
  br label %810
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZN6webrtc12_GLOBAL__N_121TimeToFrequencyDomainEPNS_8AecmCoreEPKsPNS_12ComplexInt16EPtPj(%"struct.webrtc::AecmCore"* nocapture readonly, i16*, %"struct.webrtc::ComplexInt16"*, i16* nocapture, i32* nocapture) unnamed_addr #0 {
  %6 = alloca [272 x i16], align 16
  %7 = bitcast [272 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 544, i8* nonnull %7) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %7, i8 -86, i64 544, i1 false)
  %8 = ptrtoint [272 x i16]* %6 to i64
  %9 = add i64 %8, 31
  %10 = and i64 %9, -32
  %11 = inttoptr i64 %10 to i16*
  %12 = inttoptr i64 %10 to i8*
  %13 = load i16 (i16*, i64)*, i16 (i16*, i64)** @WebRtcSpl_MaxAbsValueW16, align 8
  %14 = call signext i16 %13(i16* %1, i64 128) #4
  %15 = icmp eq i16 %14, 0
  br i1 %15, label %22, label %16

16:                                               ; preds = %5
  %17 = ashr i16 %14, 15
  %18 = xor i16 %17, %14
  %19 = sext i16 %18 to i32
  %20 = call i32 @llvm.ctlz.i32(i32 %19, i1 false) #4, !range !2
  %21 = add nsw i32 %20, -17
  br label %22

22:                                               ; preds = %16, %5
  %23 = phi i32 [ %21, %16 ], [ 0, %5 ]
  %24 = getelementptr i16, i16* %11, i64 128
  %25 = getelementptr i16, i16* %1, i64 128
  %26 = bitcast i16* %25 to i8*
  %27 = icmp ult i8* %12, %26
  %28 = icmp ugt i16* %24, %1
  %29 = and i1 %27, %28
  %30 = icmp ult i8* %12, bitcast (i16* getelementptr inbounds ([65 x i16], [65 x i16]* @_ZN6webrtc12_GLOBAL__N_123WebRtcAecm_kSqrtHanningE, i64 1, i64 0) to i8*)
  %31 = icmp ugt i16* %24, getelementptr inbounds ([65 x i16], [65 x i16]* @_ZN6webrtc12_GLOBAL__N_123WebRtcAecm_kSqrtHanningE, i64 0, i64 0)
  %32 = and i1 %30, %31
  %33 = or i1 %29, %32
  br i1 %33, label %77, label %34

34:                                               ; preds = %22
  %35 = insertelement <8 x i32> undef, i32 %23, i32 0
  %36 = shufflevector <8 x i32> %35, <8 x i32> undef, <8 x i32> zeroinitializer
  br label %37

37:                                               ; preds = %37, %34
  %38 = phi i64 [ 0, %34 ], [ %75, %37 ]
  %39 = getelementptr inbounds i16, i16* %1, i64 %38
  %40 = bitcast i16* %39 to <8 x i16>*
  %41 = load <8 x i16>, <8 x i16>* %40, align 2, !alias.scope !12
  %42 = sext <8 x i16> %41 to <8 x i32>
  %43 = shl <8 x i32> %42, %36
  %44 = shl <8 x i32> %43, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %45 = ashr exact <8 x i32> %44, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %46 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN6webrtc12_GLOBAL__N_123WebRtcAecm_kSqrtHanningE, i64 0, i64 %38
  %47 = bitcast i16* %46 to <8 x i16>*
  %48 = load <8 x i16>, <8 x i16>* %47, align 8, !alias.scope !15
  %49 = sext <8 x i16> %48 to <8 x i32>
  %50 = mul nsw <8 x i32> %45, %49
  %51 = lshr <8 x i32> %50, <i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14>
  %52 = trunc <8 x i32> %51 to <8 x i16>
  %53 = getelementptr inbounds i16, i16* %11, i64 %38
  %54 = bitcast i16* %53 to <8 x i16>*
  store <8 x i16> %52, <8 x i16>* %54, align 16, !alias.scope !17, !noalias !19
  %55 = add nuw nsw i64 %38, 64
  %56 = getelementptr inbounds i16, i16* %1, i64 %55
  %57 = bitcast i16* %56 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2, !alias.scope !12
  %59 = sext <8 x i16> %58 to <8 x i32>
  %60 = shl <8 x i32> %59, %36
  %61 = shl <8 x i32> %60, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %62 = ashr exact <8 x i32> %61, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %63 = sub nuw nsw i64 64, %38
  %64 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN6webrtc12_GLOBAL__N_123WebRtcAecm_kSqrtHanningE, i64 0, i64 %63
  %65 = getelementptr inbounds i16, i16* %64, i64 -7
  %66 = bitcast i16* %65 to <8 x i16>*
  %67 = load <8 x i16>, <8 x i16>* %66, align 2, !alias.scope !15
  %68 = shufflevector <8 x i16> %67, <8 x i16> undef, <8 x i32> <i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1, i32 0>
  %69 = sext <8 x i16> %68 to <8 x i32>
  %70 = mul nsw <8 x i32> %62, %69
  %71 = lshr <8 x i32> %70, <i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14, i32 14>
  %72 = trunc <8 x i32> %71 to <8 x i16>
  %73 = getelementptr inbounds i16, i16* %11, i64 %55
  %74 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %74, align 16, !alias.scope !17, !noalias !19
  %75 = add i64 %38, 8
  %76 = icmp eq i64 %75, 64
  br i1 %76, label %109, label %37, !llvm.loop !20

77:                                               ; preds = %22, %77
  %78 = phi i64 [ %107, %77 ], [ 0, %22 ]
  %79 = getelementptr inbounds i16, i16* %1, i64 %78
  %80 = load i16, i16* %79, align 2
  %81 = sext i16 %80 to i32
  %82 = shl i32 %81, %23
  %83 = shl i32 %82, 16
  %84 = ashr exact i32 %83, 16
  %85 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN6webrtc12_GLOBAL__N_123WebRtcAecm_kSqrtHanningE, i64 0, i64 %78
  %86 = load i16, i16* %85, align 2
  %87 = sext i16 %86 to i32
  %88 = mul nsw i32 %84, %87
  %89 = lshr i32 %88, 14
  %90 = trunc i32 %89 to i16
  %91 = getelementptr inbounds i16, i16* %11, i64 %78
  store i16 %90, i16* %91, align 2
  %92 = add nuw nsw i64 %78, 64
  %93 = getelementptr inbounds i16, i16* %1, i64 %92
  %94 = load i16, i16* %93, align 2
  %95 = sext i16 %94 to i32
  %96 = shl i32 %95, %23
  %97 = shl i32 %96, 16
  %98 = ashr exact i32 %97, 16
  %99 = sub nuw nsw i64 64, %78
  %100 = getelementptr inbounds [65 x i16], [65 x i16]* @_ZN6webrtc12_GLOBAL__N_123WebRtcAecm_kSqrtHanningE, i64 0, i64 %99
  %101 = load i16, i16* %100, align 2
  %102 = sext i16 %101 to i32
  %103 = mul nsw i32 %98, %102
  %104 = lshr i32 %103, 14
  %105 = trunc i32 %104 to i16
  %106 = getelementptr inbounds i16, i16* %11, i64 %92
  store i16 %105, i16* %106, align 2
  %107 = add nuw nsw i64 %78, 1
  %108 = icmp eq i64 %107, 64
  br i1 %108, label %109, label %77, !llvm.loop !21

109:                                              ; preds = %37, %77
  %110 = getelementptr inbounds %"struct.webrtc::AecmCore", %"struct.webrtc::AecmCore"* %0, i64 0, i32 68
  %111 = load %struct.RealFFT*, %struct.RealFFT** %110, align 8
  %112 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %2, i64 0, i32 0
  %113 = call i32 @WebRtcSpl_RealForwardFFT(%struct.RealFFT* %111, i16* %11, i16* %112) #4
  br label %114

114:                                              ; preds = %114, %109
  %115 = phi i64 [ 0, %109 ], [ %131, %114 ]
  %116 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %2, i64 %115, i32 1
  %117 = load i16, i16* %116, align 2
  %118 = sub i16 0, %117
  store i16 %118, i16* %116, align 2
  %119 = or i64 %115, 1
  %120 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %2, i64 %119, i32 1
  %121 = load i16, i16* %120, align 2
  %122 = sub i16 0, %121
  store i16 %122, i16* %120, align 2
  %123 = or i64 %115, 2
  %124 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %2, i64 %123, i32 1
  %125 = load i16, i16* %124, align 2
  %126 = sub i16 0, %125
  store i16 %126, i16* %124, align 2
  %127 = or i64 %115, 3
  %128 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %2, i64 %127, i32 1
  %129 = load i16, i16* %128, align 2
  %130 = sub i16 0, %129
  store i16 %130, i16* %128, align 2
  %131 = add nuw nsw i64 %115, 4
  %132 = icmp eq i64 %131, 64
  br i1 %132, label %133, label %114

133:                                              ; preds = %114
  %134 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %2, i64 0, i32 1
  store i16 0, i16* %134, align 2
  %135 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %2, i64 64, i32 1
  store i16 0, i16* %135, align 2
  %136 = load i16, i16* %112, align 2
  %137 = icmp slt i16 %136, 0
  %138 = sub i16 0, %136
  %139 = select i1 %137, i16 %138, i16 %136
  store i16 %139, i16* %3, align 2
  %140 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %2, i64 64, i32 0
  %141 = load i16, i16* %140, align 2
  %142 = icmp slt i16 %141, 0
  %143 = sub i16 0, %141
  %144 = select i1 %142, i16 %143, i16 %141
  %145 = getelementptr inbounds i16, i16* %3, i64 64
  store i16 %144, i16* %145, align 2
  %146 = zext i16 %139 to i32
  %147 = zext i16 %144 to i32
  %148 = add nuw nsw i32 %147, %146
  store i32 %148, i32* %4, align 4
  br label %149

149:                                              ; preds = %180, %133
  %150 = phi i64 [ 1, %133 ], [ %186, %180 ]
  %151 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %2, i64 %150, i32 0
  %152 = load i16, i16* %151, align 2
  %153 = icmp eq i16 %152, 0
  %154 = getelementptr inbounds %"struct.webrtc::ComplexInt16", %"struct.webrtc::ComplexInt16"* %2, i64 %150, i32 1
  %155 = load i16, i16* %154, align 2
  br i1 %153, label %156, label %160

156:                                              ; preds = %149
  %157 = icmp slt i16 %155, 0
  %158 = sub i16 0, %155
  %159 = select i1 %157, i16 %158, i16 %155
  br label %180

160:                                              ; preds = %149
  %161 = icmp eq i16 %155, 0
  %162 = icmp slt i16 %152, 0
  %163 = sub i16 0, %152
  %164 = select i1 %162, i16 %163, i16 %152
  br i1 %161, label %180, label %165

165:                                              ; preds = %160
  %166 = icmp slt i16 %155, 0
  %167 = sub i16 0, %155
  %168 = select i1 %166, i16 %167, i16 %155
  %169 = sext i16 %164 to i32
  %170 = mul nsw i32 %169, %169
  %171 = sext i16 %168 to i32
  %172 = mul nsw i32 %171, %171
  %173 = add nuw i32 %172, %170
  %174 = icmp sgt i32 %173, -1
  %175 = icmp slt i32 %173, 0
  %176 = select i1 %175, i32 2147483647, i32 -2147483648
  %177 = select i1 %174, i32 %173, i32 %176
  %178 = call i32 @WebRtcSpl_SqrtFloor(i32 %177) #4
  %179 = trunc i32 %178 to i16
  br label %180

180:                                              ; preds = %160, %165, %156
  %181 = phi i16 [ %179, %165 ], [ %159, %156 ], [ %164, %160 ]
  %182 = getelementptr inbounds i16, i16* %3, i64 %150
  store i16 %181, i16* %182, align 2
  %183 = zext i16 %181 to i32
  %184 = load i32, i32* %4, align 4
  %185 = add i32 %184, %183
  store i32 %185, i32* %4, align 4
  %186 = add nuw nsw i64 %150, 1
  %187 = icmp eq i64 %186, 64
  br i1 %187, label %188, label %149

188:                                              ; preds = %180
  call void @llvm.lifetime.end.p0i8(i64 544, i8* nonnull %7) #4
  ret i32 %23
}

declare void @_ZN6webrtc27WebRtcAecm_UpdateFarHistoryEPNS_8AecmCoreEPti(%"struct.webrtc::AecmCore"*, i16*, i32) local_unnamed_addr #2

declare i32 @_ZN6webrtc24WebRtc_AddFarSpectrumFixEPvPKtii(i8*, i16*, i32, i32) local_unnamed_addr #2

declare i32 @_ZN6webrtc31WebRtc_DelayEstimatorProcessFixEPvPKtii(i8*, i16*, i32, i32) local_unnamed_addr #2

declare i16* @_ZN6webrtc24WebRtcAecm_AlignedFarendEPNS_8AecmCoreEPii(%"struct.webrtc::AecmCore"*, i32*, i32) local_unnamed_addr #2

declare void @_ZN6webrtc23WebRtcAecm_CalcEnergiesEPNS_8AecmCoreEPKtsjPi(%"struct.webrtc::AecmCore"*, i16*, i16 signext, i32, i32*) local_unnamed_addr #2

declare signext i16 @_ZN6webrtc23WebRtcAecm_CalcStepSizeEPNS_8AecmCoreE(%"struct.webrtc::AecmCore"*) local_unnamed_addr #2

declare void @_ZN6webrtc24WebRtcAecm_UpdateChannelEPNS_8AecmCoreEPKtsS3_sPi(%"struct.webrtc::AecmCore"*, i16*, i16 signext, i16*, i16 signext, i32*) local_unnamed_addr #2

declare signext i16 @_ZN6webrtc30WebRtcAecm_CalcSuppressionGainEPNS_8AecmCoreE(%"struct.webrtc::AecmCore"*) local_unnamed_addr #2

declare i32 @WebRtcSpl_DivU32U16(i32, i16 zeroext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @WebRtcSpl_SqrtFloor(i32) local_unnamed_addr #2

declare i32 @WebRtcSpl_RealForwardFFT(%struct.RealFFT*, i16*, i16*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #3

declare signext i16 @WebRtcSpl_RandUArray(i16*, i16 signext, i32*) local_unnamed_addr #2

declare i32 @WebRtcSpl_RealInverseFFT(%struct.RealFFT*, i16*, i16*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = !{!6}
!6 = distinct !{!6, !7}
!7 = distinct !{!7, !"LVerDomain"}
!8 = !{!9}
!9 = distinct !{!9, !7}
!10 = distinct !{!10, !4}
!11 = distinct !{!11, !4}
!12 = !{!13}
!13 = distinct !{!13, !14}
!14 = distinct !{!14, !"LVerDomain"}
!15 = !{!16}
!16 = distinct !{!16, !14}
!17 = !{!18}
!18 = distinct !{!18, !14}
!19 = !{!13, !16}
!20 = distinct !{!20, !4}
!21 = distinct !{!21, !4}
