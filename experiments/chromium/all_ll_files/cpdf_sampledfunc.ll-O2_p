; ModuleID = '../../third_party/pdfium/core/fpdfapi/page/cpdf_sampledfunc.cpp'
source_filename = "../../third_party/pdfium/core/fpdfapi/page/cpdf_sampledfunc.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CFX_FixedBufGrow = type { %"class.std::__1::unique_ptr.79", [16 x float] }
%"class.std::__1::unique_ptr.79" = type { %"class.std::__1::__compressed_pair.80" }
%"class.std::__1::__compressed_pair.80" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { float* }
%class.CPDF_SampledFunc = type { %class.CPDF_Function, %"class.std::__1::vector.1", %"class.std::__1::vector.8", i32, i32, %"class.fxcrt::RetainPtr" }
%class.CPDF_Function = type { i32 (...)**, i32, i32, i32, %"class.std::__1::vector", %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { float*, float*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { %"struct.CPDF_SampledFunc::SampleEncodeInfo"*, %"struct.CPDF_SampledFunc::SampleEncodeInfo"*, %"class.std::__1::__compressed_pair.3" }
%"struct.CPDF_SampledFunc::SampleEncodeInfo" = type { float, float, i32 }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.CPDF_SampledFunc::SampleEncodeInfo"* }
%"class.std::__1::vector.8" = type { %"class.std::__1::__vector_base.9" }
%"class.std::__1::__vector_base.9" = type { %"struct.CPDF_SampledFunc::SampleDecodeInfo"*, %"struct.CPDF_SampledFunc::SampleDecodeInfo"*, %"class.std::__1::__compressed_pair.10" }
%"struct.CPDF_SampledFunc::SampleDecodeInfo" = type { float, float }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.11" }
%"struct.std::__1::__compressed_pair_elem.11" = type { %"struct.CPDF_SampledFunc::SampleDecodeInfo"* }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %class.CPDF_StreamAcc* }
%class.CPDF_StreamAcc = type { %"class.fxcrt::Retainable", %"class.fxcrt::MaybeOwned", i32, %"class.fxcrt::ByteString", %"class.fxcrt::RetainPtr.26", %"class.fxcrt::RetainPtr.46" }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.17", %"class.fxcrt::UnownedPtr" }
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { i8* }
%"class.fxcrt::UnownedPtr" = type { i8* }
%"class.fxcrt::ByteString" = type { %"class.fxcrt::RetainPtr.21" }
%"class.fxcrt::RetainPtr.21" = type { %"class.std::__1::unique_ptr.22" }
%"class.std::__1::unique_ptr.22" = type { %"class.std::__1::__compressed_pair.23" }
%"class.std::__1::__compressed_pair.23" = type { %"struct.std::__1::__compressed_pair_elem.24" }
%"struct.std::__1::__compressed_pair_elem.24" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i8], [7 x i8] }>
%"class.fxcrt::RetainPtr.26" = type { %"class.std::__1::unique_ptr.27" }
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %class.CPDF_Dictionary* }
%class.CPDF_Dictionary = type { %class.CPDF_Object, i32, %"class.fxcrt::WeakPtr", %"class.std::__1::map" }
%class.CPDF_Object = type { %"class.fxcrt::Retainable", i32, i32 }
%"class.fxcrt::WeakPtr" = type { %"class.fxcrt::RetainPtr.30" }
%"class.fxcrt::RetainPtr.30" = type { %"class.std::__1::unique_ptr.31" }
%"class.std::__1::unique_ptr.31" = type { %"class.std::__1::__compressed_pair.32" }
%"class.std::__1::__compressed_pair.32" = type { %"struct.std::__1::__compressed_pair_elem.33" }
%"struct.std::__1::__compressed_pair_elem.33" = type { %"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle"* }
%"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle" = type { i64, %"class.std::__1::unique_ptr.90" }
%"class.std::__1::unique_ptr.90" = type { %"class.std::__1::__compressed_pair.91" }
%"class.std::__1::__compressed_pair.91" = type { %"struct.std::__1::__compressed_pair_elem.92" }
%"struct.std::__1::__compressed_pair_elem.92" = type { %"class.fxcrt::StringPoolTemplate"* }
%"class.fxcrt::StringPoolTemplate" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.93", %"class.std::__1::__compressed_pair.101", %"class.std::__1::__compressed_pair.106", %"class.std::__1::__compressed_pair.108", [4 x i8] }>
%"class.std::__1::unique_ptr.93" = type { %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95", %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.95" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.96" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.97" }
%"class.std::__1::__compressed_pair.97" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { i64 }
%"class.std::__1::__compressed_pair.101" = type { %"struct.std::__1::__compressed_pair_elem.102" }
%"struct.std::__1::__compressed_pair_elem.102" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.106" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { float }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.36", %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"class.fxcrt::RetainPtr.46" = type { %"class.std::__1::unique_ptr.47" }
%"class.std::__1::unique_ptr.47" = type { %"class.std::__1::__compressed_pair.48" }
%"class.std::__1::__compressed_pair.48" = type { %"struct.std::__1::__compressed_pair_elem.49" }
%"struct.std::__1::__compressed_pair_elem.49" = type { %class.CPDF_Stream* }
%class.CPDF_Stream = type { %class.CPDF_Object, i8, i32, %"class.fxcrt::RetainPtr.50", %"class.std::__1::unique_ptr.17", %"class.fxcrt::RetainPtr.56" }
%"class.fxcrt::RetainPtr.50" = type { %"class.std::__1::unique_ptr.51" }
%"class.std::__1::unique_ptr.51" = type { %"class.std::__1::__compressed_pair.52" }
%"class.std::__1::__compressed_pair.52" = type { %"struct.std::__1::__compressed_pair_elem.53" }
%"struct.std::__1::__compressed_pair_elem.53" = type { %class.CPDF_Dictionary* }
%"class.fxcrt::RetainPtr.56" = type { %"class.std::__1::unique_ptr.57" }
%"class.std::__1::unique_ptr.57" = type { %"class.std::__1::__compressed_pair.58" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %class.IFX_SeekableReadStream* }
%class.IFX_SeekableReadStream = type { %class.IFX_StreamWithSize, %"class.fxcrt::Retainable" }
%class.IFX_StreamWithSize = type { i32 (...)** }
%"class.std::__1::set" = type opaque
%class.CPDF_Array = type <{ %class.CPDF_Object, %"class.std::__1::vector.66", %"class.fxcrt::WeakPtr", i32, [4 x i8] }>
%"class.std::__1::vector.66" = type { %"class.std::__1::__vector_base.67" }
%"class.std::__1::__vector_base.67" = type { %"class.fxcrt::RetainPtr.68"*, %"class.fxcrt::RetainPtr.68"*, %"class.std::__1::__compressed_pair.74" }
%"class.fxcrt::RetainPtr.68" = type { %"class.std::__1::unique_ptr.69" }
%"class.std::__1::unique_ptr.69" = type { %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %class.CPDF_Object* }
%"class.std::__1::__compressed_pair.74" = type { %"struct.std::__1::__compressed_pair_elem.75" }
%"struct.std::__1::__compressed_pair_elem.75" = type { %"class.fxcrt::RetainPtr.68"* }
%class.CFX_FixedBufGrow.81 = type { %"class.std::__1::unique_ptr.82", [32 x i32] }
%"class.std::__1::unique_ptr.82" = type { %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { i32* }
%"class.pdfium::span.89" = type { %"class.fxcrt::UnownedPtr", i64 }
%class.CFX_BitStream = type { i32, i32, %"class.fxcrt::UnownedPtr.88" }
%"class.fxcrt::UnownedPtr.88" = type { i8* }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.88", i64 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIN16CPDF_SampledFunc16SampleEncodeInfoENS_9allocatorIS2_EEE8__appendEm = comdat any

$_ZNSt3__16vectorIN16CPDF_SampledFunc16SampleDecodeInfoENS_9allocatorIS2_EEE8__appendEm = comdat any

@_ZTV16CPDF_SampledFunc = hidden unnamed_addr constant { [6 x i8*] } { [6 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CPDF_SampledFunc*)* @_ZN16CPDF_SampledFuncD2Ev to i8*), i8* bitcast (void (%class.CPDF_SampledFunc*)* @_ZN16CPDF_SampledFuncD0Ev to i8*), i8* bitcast (i1 (%class.CPDF_SampledFunc*, %class.CPDF_Object*, %"class.std::__1::set"*)* @_ZN16CPDF_SampledFunc6v_InitEPK11CPDF_ObjectPNSt3__13setIS2_NS3_4lessIS2_EENS3_9allocatorIS2_EEEE to i8*), i8* bitcast (i1 (%class.CPDF_SampledFunc*, float*, float*)* @_ZNK16CPDF_SampledFunc6v_CallEPKfPf to i8*)] }, align 8
@.str = private unnamed_addr constant [5 x i8] c"Size\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"BitsPerSample\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"Encode\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"Decode\00", align 1
@__const._ZNK16CPDF_SampledFunc6v_CallEPKfPf.encoded_input_buf = private unnamed_addr constant %class.CFX_FixedBufGrow { %"class.std::__1::unique_ptr.79" { %"class.std::__1::__compressed_pair.80" { %"struct.std::__1::__compressed_pair_elem" { float* inttoptr (i64 -6148914691236517206 to float*) } } }, [16 x float] [float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000, float 0xFFFFFFFFE0000000] }, align 8

@_ZN16CPDF_SampledFuncC1Ev = hidden unnamed_addr alias void (%class.CPDF_SampledFunc*), void (%class.CPDF_SampledFunc*)* @_ZN16CPDF_SampledFuncC2Ev
@_ZN16CPDF_SampledFuncD1Ev = hidden unnamed_addr alias void (%class.CPDF_SampledFunc*), void (%class.CPDF_SampledFunc*)* @_ZN16CPDF_SampledFuncD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16CPDF_SampledFuncC2Ev(%class.CPDF_SampledFunc*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 0
  tail call void @_ZN13CPDF_FunctionC2ENS_4TypeE(%class.CPDF_Function* %2, i32 0) #9
  %3 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV16CPDF_SampledFunc, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 1
  %5 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 5
  %6 = bitcast %"class.fxcrt::RetainPtr"* %5 to i64*
  store i64 0, i64* %6, align 8
  %7 = bitcast %"class.std::__1::vector.1"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 48, i1 false)
  ret void
}

declare void @_ZN13CPDF_FunctionC2ENS_4TypeE(%class.CPDF_Function*, i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16CPDF_SampledFuncD2Ev(%class.CPDF_SampledFunc*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV16CPDF_SampledFunc, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %4 = load %class.CPDF_StreamAcc*, %class.CPDF_StreamAcc** %3, align 8
  store %class.CPDF_StreamAcc* null, %class.CPDF_StreamAcc** %3, align 8
  %5 = icmp eq %class.CPDF_StreamAcc* %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.CPDF_StreamAcc, %class.CPDF_StreamAcc* %4, i64 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = add nsw i64 %8, -1
  store i64 %9, i64* %7, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr inbounds %class.CPDF_StreamAcc, %class.CPDF_StreamAcc* %4, i64 0, i32 0
  %13 = bitcast %class.CPDF_StreamAcc* %4 to void (%"class.fxcrt::Retainable"*)***
  %14 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %14, i64 1
  %16 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %15, align 8
  tail call void %16(%"class.fxcrt::Retainable"* nonnull %12) #9
  br label %17

17:                                               ; preds = %1, %6, %11
  %18 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 2, i32 0, i32 0
  %19 = load %"struct.CPDF_SampledFunc::SampleDecodeInfo"*, %"struct.CPDF_SampledFunc::SampleDecodeInfo"** %18, align 8
  %20 = icmp eq %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %17
  %22 = ptrtoint %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %19 to i64
  %23 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 2, i32 0, i32 1
  %24 = bitcast %"struct.CPDF_SampledFunc::SampleDecodeInfo"** %23 to i64*
  store i64 %22, i64* %24, align 8
  %25 = bitcast %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %19 to i8*
  tail call void @_ZdlPv(i8* %25) #10
  br label %26

26:                                               ; preds = %17, %21
  %27 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 1, i32 0, i32 0
  %28 = load %"struct.CPDF_SampledFunc::SampleEncodeInfo"*, %"struct.CPDF_SampledFunc::SampleEncodeInfo"** %27, align 8
  %29 = icmp eq %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %28, null
  br i1 %29, label %35, label %30

30:                                               ; preds = %26
  %31 = ptrtoint %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %28 to i64
  %32 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 1, i32 0, i32 1
  %33 = bitcast %"struct.CPDF_SampledFunc::SampleEncodeInfo"** %32 to i64*
  store i64 %31, i64* %33, align 8
  %34 = bitcast %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %28 to i8*
  tail call void @_ZdlPv(i8* %34) #10
  br label %35

35:                                               ; preds = %26, %30
  %36 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 0
  tail call void @_ZN13CPDF_FunctionD2Ev(%class.CPDF_Function* %36) #9
  ret void
}

; Function Attrs: nounwind
declare void @_ZN13CPDF_FunctionD2Ev(%class.CPDF_Function*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN16CPDF_SampledFuncD0Ev(%class.CPDF_SampledFunc*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [6 x i8*] }, { [6 x i8*] }* @_ZTV16CPDF_SampledFunc, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %4 = load %class.CPDF_StreamAcc*, %class.CPDF_StreamAcc** %3, align 8
  store %class.CPDF_StreamAcc* null, %class.CPDF_StreamAcc** %3, align 8
  %5 = icmp eq %class.CPDF_StreamAcc* %4, null
  br i1 %5, label %17, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %class.CPDF_StreamAcc, %class.CPDF_StreamAcc* %4, i64 0, i32 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = add nsw i64 %8, -1
  store i64 %9, i64* %7, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %11, label %17

11:                                               ; preds = %6
  %12 = getelementptr inbounds %class.CPDF_StreamAcc, %class.CPDF_StreamAcc* %4, i64 0, i32 0
  %13 = bitcast %class.CPDF_StreamAcc* %4 to void (%"class.fxcrt::Retainable"*)***
  %14 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %14, i64 1
  %16 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %15, align 8
  tail call void %16(%"class.fxcrt::Retainable"* nonnull %12) #9
  br label %17

17:                                               ; preds = %11, %6, %1
  %18 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 2, i32 0, i32 0
  %19 = load %"struct.CPDF_SampledFunc::SampleDecodeInfo"*, %"struct.CPDF_SampledFunc::SampleDecodeInfo"** %18, align 8
  %20 = icmp eq %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %19, null
  br i1 %20, label %26, label %21

21:                                               ; preds = %17
  %22 = ptrtoint %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %19 to i64
  %23 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 2, i32 0, i32 1
  %24 = bitcast %"struct.CPDF_SampledFunc::SampleDecodeInfo"** %23 to i64*
  store i64 %22, i64* %24, align 8
  %25 = bitcast %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %19 to i8*
  tail call void @_ZdlPv(i8* %25) #10
  br label %26

26:                                               ; preds = %21, %17
  %27 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 1, i32 0, i32 0
  %28 = load %"struct.CPDF_SampledFunc::SampleEncodeInfo"*, %"struct.CPDF_SampledFunc::SampleEncodeInfo"** %27, align 8
  %29 = icmp eq %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %28, null
  br i1 %29, label %35, label %30

30:                                               ; preds = %26
  %31 = ptrtoint %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %28 to i64
  %32 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 1, i32 0, i32 1
  %33 = bitcast %"struct.CPDF_SampledFunc::SampleEncodeInfo"** %32 to i64*
  store i64 %31, i64* %33, align 8
  %34 = bitcast %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %28 to i8*
  tail call void @_ZdlPv(i8* %34) #10
  br label %35

35:                                               ; preds = %26, %30
  %36 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 0
  tail call void @_ZN13CPDF_FunctionD2Ev(%class.CPDF_Function* %36) #9
  %37 = bitcast %class.CPDF_SampledFunc* %0 to i8*
  tail call void @_ZdlPv(i8* %37) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN16CPDF_SampledFunc6v_InitEPK11CPDF_ObjectPNSt3__13setIS2_NS3_4lessIS2_EENS3_9allocatorIS2_EEEE(%class.CPDF_SampledFunc*, %class.CPDF_Object*, %"class.std::__1::set"* nocapture readnone) unnamed_addr #0 align 2 {
  %4 = alloca %"class.fxcrt::ByteString", align 8
  %5 = alloca %"class.fxcrt::ByteString", align 8
  %6 = alloca %"class.fxcrt::ByteString", align 8
  %7 = alloca %"class.fxcrt::ByteString", align 8
  %8 = bitcast %class.CPDF_Object* %1 to %class.CPDF_Stream* (%class.CPDF_Object*)***
  %9 = load %class.CPDF_Stream* (%class.CPDF_Object*)**, %class.CPDF_Stream* (%class.CPDF_Object*)*** %8, align 8
  %10 = getelementptr inbounds %class.CPDF_Stream* (%class.CPDF_Object*)*, %class.CPDF_Stream* (%class.CPDF_Object*)** %9, i64 36
  %11 = load %class.CPDF_Stream* (%class.CPDF_Object*)*, %class.CPDF_Stream* (%class.CPDF_Object*)** %10, align 8
  %12 = tail call %class.CPDF_Stream* %11(%class.CPDF_Object* %1) #9
  %13 = icmp eq %class.CPDF_Stream* %12, null
  br i1 %13, label %232, label %14

14:                                               ; preds = %3
  %15 = tail call %class.CPDF_Dictionary* @_ZNK11CPDF_Stream7GetDictEv(%class.CPDF_Stream* nonnull %12) #9
  %16 = bitcast %"class.fxcrt::ByteString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #9
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0)) #9
  %17 = call %class.CPDF_Array* @_ZNK15CPDF_Dictionary11GetArrayForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %15, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %4) #9
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %4) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #9
  %18 = icmp eq %class.CPDF_Array* %17, null
  br i1 %18, label %232, label %19

19:                                               ; preds = %14
  %20 = getelementptr inbounds %class.CPDF_Array, %class.CPDF_Array* %17, i64 0, i32 1, i32 0, i32 0
  %21 = load %"class.fxcrt::RetainPtr.68"*, %"class.fxcrt::RetainPtr.68"** %20, align 8
  %22 = getelementptr inbounds %class.CPDF_Array, %class.CPDF_Array* %17, i64 0, i32 1, i32 0, i32 1
  %23 = load %"class.fxcrt::RetainPtr.68"*, %"class.fxcrt::RetainPtr.68"** %22, align 8
  %24 = icmp eq %"class.fxcrt::RetainPtr.68"* %21, %23
  br i1 %24, label %232, label %25

25:                                               ; preds = %19
  %26 = bitcast %"class.fxcrt::ByteString"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #9
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %5, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0)) #9
  %27 = call i32 @_ZNK15CPDF_Dictionary13GetIntegerForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %15, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %5) #9
  %28 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 3
  store i32 %27, i32* %28, align 8
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %5) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #9
  %29 = load i32, i32* %28, align 8
  switch i32 %29, label %232 [
    i32 1, label %30
    i32 2, label %30
    i32 4, label %30
    i32 8, label %30
    i32 12, label %30
    i32 16, label %30
    i32 24, label %30
    i32 32, label %30
  ]

30:                                               ; preds = %25, %25, %25, %25, %25, %25, %25, %25
  %31 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 0, i32 3
  %32 = load i32, i32* %31, align 8
  %33 = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %29, i32 %32) #9
  %34 = extractvalue { i32, i1 } %33, 1
  %35 = extractvalue { i32, i1 } %33, 0
  %36 = xor i1 %34, true
  %37 = zext i1 %36 to i8
  %38 = bitcast %"class.fxcrt::ByteString"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #9
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %6, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0)) #9
  %39 = call %class.CPDF_Array* @_ZNK15CPDF_Dictionary11GetArrayForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %15, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %6) #9
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %6) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #9
  %40 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 1
  %41 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i64
  %44 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 1, i32 0, i32 1
  %45 = bitcast %"struct.CPDF_SampledFunc::SampleEncodeInfo"** %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = bitcast %"class.std::__1::vector.1"* %40 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = sub i64 %46, %48
  %50 = sdiv exact i64 %49, 12
  %51 = icmp ult i64 %50, %43
  %52 = inttoptr i64 %48 to %"struct.CPDF_SampledFunc::SampleEncodeInfo"*
  br i1 %51, label %53, label %56

53:                                               ; preds = %30
  %54 = sub nsw i64 %43, %50
  call void @_ZNSt3__16vectorIN16CPDF_SampledFunc16SampleEncodeInfoENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.1"* %40, i64 %54) #9
  %55 = load i32, i32* %41, align 4
  br label %60

56:                                               ; preds = %30
  %57 = icmp ugt i64 %50, %43
  br i1 %57, label %58, label %60

58:                                               ; preds = %56
  %59 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleEncodeInfo", %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %52, i64 %43
  store %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %59, %"struct.CPDF_SampledFunc::SampleEncodeInfo"** %44, align 8
  br label %60

60:                                               ; preds = %53, %56, %58
  %61 = phi i32 [ %55, %53 ], [ %42, %56 ], [ %42, %58 ]
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %116, label %63

63:                                               ; preds = %60
  %64 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %40, i64 0, i32 0, i32 0
  %65 = icmp eq %class.CPDF_Array* %39, null
  br label %66

66:                                               ; preds = %63, %108
  %67 = phi i64 [ 0, %63 ], [ %112, %108 ]
  %68 = phi i8 [ %37, %63 ], [ %87, %108 ]
  %69 = phi i32 [ %35, %63 ], [ %86, %108 ]
  %70 = call i32 @_ZNK10CPDF_Array12GetIntegerAtEm(%class.CPDF_Array* nonnull %17, i64 %67) #9
  %71 = icmp slt i32 %70, 1
  br i1 %71, label %232, label %72

72:                                               ; preds = %66
  %73 = load %"struct.CPDF_SampledFunc::SampleEncodeInfo"*, %"struct.CPDF_SampledFunc::SampleEncodeInfo"** %64, align 8
  %74 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleEncodeInfo", %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %73, i64 %67, i32 2
  store i32 %70, i32* %74, align 4
  %75 = load %"struct.CPDF_SampledFunc::SampleEncodeInfo"*, %"struct.CPDF_SampledFunc::SampleEncodeInfo"** %64, align 8
  %76 = icmp eq i8 %68, 0
  br i1 %76, label %85, label %77

77:                                               ; preds = %72
  %78 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleEncodeInfo", %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %75, i64 %67, i32 2
  %79 = load i32, i32* %78, align 4
  %80 = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %69, i32 %79) #9
  %81 = extractvalue { i32, i1 } %80, 1
  %82 = extractvalue { i32, i1 } %80, 0
  %83 = xor i1 %81, true
  %84 = zext i1 %83 to i8
  br label %85

85:                                               ; preds = %72, %77
  %86 = phi i32 [ %82, %77 ], [ 0, %72 ]
  %87 = phi i8 [ %84, %77 ], [ 0, %72 ]
  br i1 %65, label %99, label %88

88:                                               ; preds = %85
  %89 = trunc i64 %67 to i32
  %90 = shl i32 %89, 1
  %91 = zext i32 %90 to i64
  %92 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %39, i64 %91) #9
  %93 = load %"struct.CPDF_SampledFunc::SampleEncodeInfo"*, %"struct.CPDF_SampledFunc::SampleEncodeInfo"** %64, align 8
  %94 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleEncodeInfo", %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %93, i64 %67, i32 1
  store float %92, float* %94, align 4
  %95 = or i32 %90, 1
  %96 = zext i32 %95 to i64
  %97 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %39, i64 %96) #9
  %98 = load %"struct.CPDF_SampledFunc::SampleEncodeInfo"*, %"struct.CPDF_SampledFunc::SampleEncodeInfo"** %64, align 8
  br label %108

99:                                               ; preds = %85
  %100 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleEncodeInfo", %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %75, i64 %67, i32 1
  store float 0.000000e+00, float* %100, align 4
  %101 = load %"struct.CPDF_SampledFunc::SampleEncodeInfo"*, %"struct.CPDF_SampledFunc::SampleEncodeInfo"** %64, align 8
  %102 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleEncodeInfo", %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %101, i64 %67, i32 2
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 1
  %105 = add i32 %103, -1
  %106 = select i1 %104, i32 1, i32 %105
  %107 = uitofp i32 %106 to float
  br label %108

108:                                              ; preds = %99, %88
  %109 = phi %"struct.CPDF_SampledFunc::SampleEncodeInfo"* [ %101, %99 ], [ %98, %88 ]
  %110 = phi float [ %107, %99 ], [ %97, %88 ]
  %111 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleEncodeInfo", %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %109, i64 %67, i32 0
  store float %110, float* %111, align 4
  %112 = add nuw nsw i64 %67, 1
  %113 = load i32, i32* %41, align 4
  %114 = zext i32 %113 to i64
  %115 = icmp ult i64 %112, %114
  br i1 %115, label %66, label %116

116:                                              ; preds = %108, %60
  %117 = phi i32 [ %35, %60 ], [ %86, %108 ]
  %118 = phi i8 [ %37, %60 ], [ %87, %108 ]
  %119 = icmp eq i8 %118, 0
  br i1 %119, label %232, label %120

120:                                              ; preds = %116
  %121 = zext i32 %117 to i33
  %122 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %121, i33 7) #9
  %123 = extractvalue { i33, i1 } %122, 1
  %124 = extractvalue { i33, i1 } %122, 0
  %125 = icmp slt i33 %124, 0
  %126 = or i1 %123, %125
  %127 = zext i33 %124 to i64
  %128 = shl nuw nsw i64 %127, 29
  %129 = and i64 %128, 2305843004918726656
  br i1 %126, label %232, label %130

130:                                              ; preds = %120
  %131 = lshr exact i64 %129, 32
  %132 = trunc i64 %131 to i32
  %133 = icmp eq i64 %129, 0
  br i1 %133, label %232, label %134

134:                                              ; preds = %130
  %135 = load i32, i32* %28, align 8
  %136 = sub i32 32, %135
  %137 = lshr i32 -1, %136
  %138 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 4
  store i32 %137, i32* %138, align 4
  %139 = call i8* @_Znwm(i64 64) #10, !noalias !2
  %140 = bitcast i8* %139 to %class.CPDF_StreamAcc*
  call void @_ZN14CPDF_StreamAccC1EPK11CPDF_Stream(%class.CPDF_StreamAcc* nonnull %140, %class.CPDF_Stream* nonnull %12) #9, !noalias !2
  %141 = ptrtoint i8* %139 to i64
  %142 = getelementptr inbounds i8, i8* %139, i64 8
  %143 = bitcast i8* %142 to i64*
  %144 = load i64, i64* %143, align 8, !noalias !2
  %145 = add nsw i64 %144, 1
  store i64 %145, i64* %143, align 8, !noalias !2
  %146 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 5
  %147 = getelementptr inbounds %"class.fxcrt::RetainPtr", %"class.fxcrt::RetainPtr"* %146, i64 0, i32 0, i32 0, i32 0, i32 0
  %148 = load %class.CPDF_StreamAcc*, %class.CPDF_StreamAcc** %147, align 8
  %149 = bitcast %"class.fxcrt::RetainPtr"* %146 to i64*
  store i64 %141, i64* %149, align 8
  %150 = icmp eq %class.CPDF_StreamAcc* %148, null
  br i1 %150, label %162, label %151

151:                                              ; preds = %134
  %152 = getelementptr inbounds %class.CPDF_StreamAcc, %class.CPDF_StreamAcc* %148, i64 0, i32 0, i32 1
  %153 = load i64, i64* %152, align 8
  %154 = add nsw i64 %153, -1
  store i64 %154, i64* %152, align 8
  %155 = icmp eq i64 %154, 0
  br i1 %155, label %156, label %162

156:                                              ; preds = %151
  %157 = getelementptr inbounds %class.CPDF_StreamAcc, %class.CPDF_StreamAcc* %148, i64 0, i32 0
  %158 = bitcast %class.CPDF_StreamAcc* %148 to void (%"class.fxcrt::Retainable"*)***
  %159 = load void (%"class.fxcrt::Retainable"*)**, void (%"class.fxcrt::Retainable"*)*** %158, align 8
  %160 = getelementptr inbounds void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %159, i64 1
  %161 = load void (%"class.fxcrt::Retainable"*)*, void (%"class.fxcrt::Retainable"*)** %160, align 8
  call void %161(%"class.fxcrt::Retainable"* nonnull %157) #9
  br label %162

162:                                              ; preds = %134, %151, %156
  %163 = load %class.CPDF_StreamAcc*, %class.CPDF_StreamAcc** %147, align 8
  call void @_ZN14CPDF_StreamAcc19LoadAllDataFilteredEv(%class.CPDF_StreamAcc* %163) #9
  %164 = load %class.CPDF_StreamAcc*, %class.CPDF_StreamAcc** %147, align 8
  %165 = call i32 @_ZNK14CPDF_StreamAcc7GetSizeEv(%class.CPDF_StreamAcc* %164) #9
  %166 = icmp ult i32 %165, %132
  br i1 %166, label %232, label %167

167:                                              ; preds = %162
  %168 = bitcast %"class.fxcrt::ByteString"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %168) #9
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %7, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0)) #9
  %169 = call %class.CPDF_Array* @_ZNK15CPDF_Dictionary11GetArrayForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %15, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %7) #9
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %7) #9
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %168) #9
  %170 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 2
  %171 = load i32, i32* %31, align 8
  %172 = zext i32 %171 to i64
  %173 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 2, i32 0, i32 1
  %174 = bitcast %"struct.CPDF_SampledFunc::SampleDecodeInfo"** %173 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = bitcast %"class.std::__1::vector.8"* %170 to i64*
  %177 = load i64, i64* %176, align 8
  %178 = sub i64 %175, %177
  %179 = ashr exact i64 %178, 3
  %180 = icmp ult i64 %179, %172
  %181 = inttoptr i64 %177 to %"struct.CPDF_SampledFunc::SampleDecodeInfo"*
  br i1 %180, label %182, label %185

182:                                              ; preds = %167
  %183 = sub nsw i64 %172, %179
  call void @_ZNSt3__16vectorIN16CPDF_SampledFunc16SampleDecodeInfoENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.8"* %170, i64 %183) #9
  %184 = load i32, i32* %31, align 8
  br label %189

185:                                              ; preds = %167
  %186 = icmp ugt i64 %179, %172
  br i1 %186, label %187, label %189

187:                                              ; preds = %185
  %188 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleDecodeInfo", %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %181, i64 %172
  store %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %188, %"struct.CPDF_SampledFunc::SampleDecodeInfo"** %173, align 8
  br label %189

189:                                              ; preds = %182, %185, %187
  %190 = phi i32 [ %184, %182 ], [ %171, %185 ], [ %171, %187 ]
  %191 = icmp eq i32 %190, 0
  br i1 %191, label %232, label %192

192:                                              ; preds = %189
  %193 = icmp eq %class.CPDF_Array* %169, null
  %194 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %170, i64 0, i32 0, i32 0
  %195 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 0, i32 5, i32 0, i32 0
  br label %196

196:                                              ; preds = %192, %227
  %197 = phi i64 [ 0, %192 ], [ %228, %227 ]
  %198 = trunc i64 %197 to i32
  %199 = shl i32 %198, 1
  %200 = zext i32 %199 to i64
  br i1 %193, label %210, label %201

201:                                              ; preds = %196
  %202 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %169, i64 %200) #9
  %203 = load %"struct.CPDF_SampledFunc::SampleDecodeInfo"*, %"struct.CPDF_SampledFunc::SampleDecodeInfo"** %194, align 8
  %204 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleDecodeInfo", %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %203, i64 %197, i32 1
  store float %202, float* %204, align 4
  %205 = or i32 %199, 1
  %206 = zext i32 %205 to i64
  %207 = call float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array* nonnull %169, i64 %206) #9
  %208 = load %"struct.CPDF_SampledFunc::SampleDecodeInfo"*, %"struct.CPDF_SampledFunc::SampleDecodeInfo"** %194, align 8
  %209 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleDecodeInfo", %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %208, i64 %197, i32 0
  store float %207, float* %209, align 4
  br label %227

210:                                              ; preds = %196
  %211 = load float*, float** %195, align 8
  %212 = getelementptr inbounds float, float* %211, i64 %200
  %213 = bitcast float* %212 to i32*
  %214 = load i32, i32* %213, align 4
  %215 = load %"struct.CPDF_SampledFunc::SampleDecodeInfo"*, %"struct.CPDF_SampledFunc::SampleDecodeInfo"** %194, align 8
  %216 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleDecodeInfo", %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %215, i64 %197, i32 1
  %217 = bitcast float* %216 to i32*
  store i32 %214, i32* %217, align 4
  %218 = or i32 %199, 1
  %219 = zext i32 %218 to i64
  %220 = load float*, float** %195, align 8
  %221 = getelementptr inbounds float, float* %220, i64 %219
  %222 = bitcast float* %221 to i32*
  %223 = load i32, i32* %222, align 4
  %224 = load %"struct.CPDF_SampledFunc::SampleDecodeInfo"*, %"struct.CPDF_SampledFunc::SampleDecodeInfo"** %194, align 8
  %225 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleDecodeInfo", %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %224, i64 %197
  %226 = bitcast %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %225 to i32*
  store i32 %223, i32* %226, align 4
  br label %227

227:                                              ; preds = %201, %210
  %228 = add nuw nsw i64 %197, 1
  %229 = load i32, i32* %31, align 8
  %230 = zext i32 %229 to i64
  %231 = icmp ult i64 %228, %230
  br i1 %231, label %196, label %232

232:                                              ; preds = %66, %227, %116, %120, %189, %130, %162, %25, %14, %19, %3
  %233 = phi i1 [ false, %3 ], [ false, %14 ], [ false, %19 ], [ false, %25 ], [ false, %130 ], [ false, %162 ], [ true, %189 ], [ false, %120 ], [ false, %116 ], [ true, %227 ], [ false, %66 ]
  ret i1 %233
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

declare %class.CPDF_Dictionary* @_ZNK11CPDF_Stream7GetDictEv(%class.CPDF_Stream*) unnamed_addr #1

declare %class.CPDF_Array* @_ZNK15CPDF_Dictionary11GetArrayForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary*, %"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #1

declare void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"*, i8*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"*) unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare i32 @_ZNK15CPDF_Dictionary13GetIntegerForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary*, %"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #4

declare i32 @_ZNK10CPDF_Array12GetIntegerAtEm(%class.CPDF_Array*, i64) local_unnamed_addr #1

declare float @_ZNK10CPDF_Array11GetNumberAtEm(%class.CPDF_Array*, i64) local_unnamed_addr #1

declare void @_ZN14CPDF_StreamAcc19LoadAllDataFilteredEv(%class.CPDF_StreamAcc*) local_unnamed_addr #1

declare i32 @_ZNK14CPDF_StreamAcc7GetSizeEv(%class.CPDF_StreamAcc*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK16CPDF_SampledFunc6v_CallEPKfPf(%class.CPDF_SampledFunc*, float* nocapture readonly, float* nocapture) unnamed_addr #0 align 2 {
  %4 = alloca %class.CFX_FixedBufGrow, align 8
  %5 = alloca %class.CFX_FixedBufGrow.81, align 8
  %6 = alloca %"class.pdfium::span.89", align 8
  %7 = alloca %class.CFX_BitStream, align 8
  %8 = alloca %"class.pdfium::span", align 8
  %9 = alloca %class.CFX_BitStream, align 8
  %10 = alloca %"class.pdfium::span", align 8
  %11 = bitcast %class.CFX_FixedBufGrow* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %11) #9
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %11, i8* align 8 bitcast (%class.CFX_FixedBufGrow* @__const._ZNK16CPDF_SampledFunc6v_CallEPKfPf.encoded_input_buf to i8*), i64 72, i1 false)
  %12 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 0
  %13 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = bitcast %class.CFX_FixedBufGrow* %4 to i64*
  store i64 0, i64* %15, align 8
  %16 = icmp ugt i32 %14, 16
  br i1 %16, label %17, label %23

17:                                               ; preds = %3
  %18 = zext i32 %14 to i64
  %19 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 %18, i64 4) #9
  %20 = bitcast %class.CFX_FixedBufGrow* %4 to i8**
  store i8* %19, i8** %20, align 8
  %21 = bitcast i8* %19 to float*
  %22 = load i32, i32* %13, align 4
  br label %26

23:                                               ; preds = %3
  %24 = getelementptr inbounds %class.CFX_FixedBufGrow, %class.CFX_FixedBufGrow* %4, i64 0, i32 1, i64 0
  %25 = bitcast float* %24 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %25, i8 0, i64 64, i1 false) #9
  br label %26

26:                                               ; preds = %17, %23
  %27 = phi i32 [ %22, %17 ], [ %14, %23 ]
  %28 = phi float* [ %21, %17 ], [ null, %23 ]
  %29 = getelementptr inbounds %class.CFX_FixedBufGrow, %class.CFX_FixedBufGrow* %4, i64 0, i32 0, i32 0, i32 0, i32 0
  %30 = icmp eq float* %28, null
  %31 = getelementptr inbounds %class.CFX_FixedBufGrow, %class.CFX_FixedBufGrow* %4, i64 0, i32 1, i64 0
  %32 = select i1 %30, float* %31, float* %28
  %33 = bitcast %class.CFX_FixedBufGrow.81* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 136, i8* nonnull %33) #9
  %34 = getelementptr inbounds %class.CFX_FixedBufGrow.81, %class.CFX_FixedBufGrow.81* %5, i64 0, i32 1
  %35 = bitcast [32 x i32]* %34 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 -86, i64 128, i1 false)
  %36 = shl i32 %27, 1
  %37 = bitcast %class.CFX_FixedBufGrow.81* %5 to i64*
  store i64 0, i64* %37, align 8
  %38 = icmp ugt i32 %36, 32
  br i1 %38, label %39, label %45

39:                                               ; preds = %26
  %40 = zext i32 %36 to i64
  %41 = tail call i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64 %40, i64 4) #9
  %42 = bitcast %class.CFX_FixedBufGrow.81* %5 to i8**
  store i8* %41, i8** %42, align 8
  %43 = bitcast i8* %41 to i32*
  %44 = load i32, i32* %13, align 4
  br label %48

45:                                               ; preds = %26
  %46 = getelementptr inbounds %class.CFX_FixedBufGrow.81, %class.CFX_FixedBufGrow.81* %5, i64 0, i32 1, i64 0
  %47 = bitcast i32* %46 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %47, i8 0, i64 128, i1 false) #9
  br label %48

48:                                               ; preds = %39, %45
  %49 = phi i32 [ %44, %39 ], [ %27, %45 ]
  %50 = phi i32* [ %43, %39 ], [ null, %45 ]
  %51 = getelementptr inbounds %class.CFX_FixedBufGrow.81, %class.CFX_FixedBufGrow.81* %5, i64 0, i32 0, i32 0, i32 0, i32 0
  %52 = icmp eq i32* %50, null
  %53 = getelementptr inbounds %class.CFX_FixedBufGrow.81, %class.CFX_FixedBufGrow.81* %5, i64 0, i32 1, i64 0
  %54 = select i1 %52, i32* %53, i32* %50
  %55 = zext i32 %49 to i64
  %56 = getelementptr inbounds i32, i32* %54, i64 %55
  %57 = icmp eq i32 %49, 0
  br i1 %57, label %61, label %58

58:                                               ; preds = %48
  %59 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 1, i32 0, i32 0
  %60 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 0, i32 4, i32 0, i32 0
  br label %81

61:                                               ; preds = %97, %48
  %62 = phi i32 [ 0, %48 ], [ %128, %97 ]
  %63 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 0, i32 3
  %64 = load i32, i32* %63, align 8
  %65 = lshr i32 %64, 31
  %66 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 3
  %67 = icmp eq i32 %65, 1
  br i1 %67, label %283, label %68

68:                                               ; preds = %61
  %69 = load i32, i32* %66, align 8
  %70 = icmp slt i32 %64, 0
  %71 = sub i32 0, %64
  %72 = select i1 %70, i32 %71, i32 %64
  %73 = tail call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %72, i32 %69) #9
  %74 = extractvalue { i32, i1 } %73, 1
  %75 = extractvalue { i32, i1 } %73, 0
  %76 = add nuw nsw i32 %65, 2147483647
  %77 = icmp ugt i32 %75, %76
  %78 = or i1 %74, %77
  %79 = sub i32 0, %75
  %80 = select i1 %70, i32 %79, i32 %75
  br i1 %78, label %283, label %133

81:                                               ; preds = %58, %97
  %82 = phi i64 [ 0, %58 ], [ %129, %97 ]
  %83 = phi i32 [ 0, %58 ], [ %128, %97 ]
  %84 = icmp eq i64 %82, 0
  br i1 %84, label %85, label %86

85:                                               ; preds = %81
  store i32 1, i32* %56, align 4
  br label %97

86:                                               ; preds = %81
  %87 = trunc i64 %82 to i32
  %88 = add nuw i64 %82, 4294967295
  %89 = and i64 %88, 4294967295
  %90 = getelementptr inbounds i32, i32* %56, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = load %"struct.CPDF_SampledFunc::SampleEncodeInfo"*, %"struct.CPDF_SampledFunc::SampleEncodeInfo"** %59, align 8
  %93 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleEncodeInfo", %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %92, i64 %89, i32 2
  %94 = load i32, i32* %93, align 4
  %95 = mul i32 %94, %91
  %96 = getelementptr inbounds i32, i32* %56, i64 %82
  store i32 %95, i32* %96, align 4
  br label %97

97:                                               ; preds = %86, %85
  %98 = phi i32 [ %87, %86 ], [ 0, %85 ]
  %99 = getelementptr inbounds float, float* %1, i64 %82
  %100 = load float, float* %99, align 4
  %101 = shl i32 %98, 1
  %102 = zext i32 %101 to i64
  %103 = load float*, float** %60, align 8
  %104 = getelementptr inbounds float, float* %103, i64 %102
  %105 = load float, float* %104, align 4
  %106 = or i32 %101, 1
  %107 = zext i32 %106 to i64
  %108 = getelementptr inbounds float, float* %103, i64 %107
  %109 = load float, float* %108, align 4
  %110 = load %"struct.CPDF_SampledFunc::SampleEncodeInfo"*, %"struct.CPDF_SampledFunc::SampleEncodeInfo"** %59, align 8
  %111 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleEncodeInfo", %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %110, i64 %82, i32 1
  %112 = load float, float* %111, align 4
  %113 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleEncodeInfo", %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %110, i64 %82, i32 0
  %114 = load float, float* %113, align 4
  %115 = tail call float @_ZNK13CPDF_Function11InterpolateEfffff(%class.CPDF_Function* %12, float %100, float %105, float %109, float %112, float %114) #9
  %116 = getelementptr inbounds float, float* %32, i64 %82
  store float %115, float* %116, align 4
  %117 = fptoui float %115 to i32
  %118 = load %"struct.CPDF_SampledFunc::SampleEncodeInfo"*, %"struct.CPDF_SampledFunc::SampleEncodeInfo"** %59, align 8
  %119 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleEncodeInfo", %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %118, i64 %82, i32 2
  %120 = load i32, i32* %119, align 4
  %121 = add i32 %120, -1
  %122 = icmp ult i32 %121, %117
  %123 = select i1 %122, i32 %121, i32 %117
  %124 = getelementptr inbounds i32, i32* %54, i64 %82
  store i32 %123, i32* %124, align 4
  %125 = getelementptr inbounds i32, i32* %56, i64 %82
  %126 = load i32, i32* %125, align 4
  %127 = mul i32 %123, %126
  %128 = add i32 %127, %83
  %129 = add nuw nsw i64 %82, 1
  %130 = load i32, i32* %13, align 4
  %131 = zext i32 %130 to i64
  %132 = icmp ult i64 %129, %131
  br i1 %132, label %81, label %61

133:                                              ; preds = %68
  %134 = tail call { i32, i1 } @llvm.smul.with.overflow.i32(i32 %62, i32 %80) #9
  %135 = extractvalue { i32, i1 } %134, 1
  %136 = extractvalue { i32, i1 } %134, 0
  %137 = icmp slt i32 %136, 0
  %138 = or i1 %135, %137
  br i1 %138, label %283, label %139, !prof !5

139:                                              ; preds = %133
  %140 = tail call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %136, i32 %80) #9
  %141 = extractvalue { i32, i1 } %140, 1
  br i1 %141, label %283, label %142

142:                                              ; preds = %139
  %143 = bitcast %"class.pdfium::span.89"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %143) #9
  %144 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %145 = load %class.CPDF_StreamAcc*, %class.CPDF_StreamAcc** %144, align 8
  call void @_ZN14CPDF_StreamAcc7GetSpanEv(%"class.pdfium::span.89"* nonnull sret %6, %class.CPDF_StreamAcc* %145) #9
  %146 = bitcast %"class.pdfium::span.89"* %6 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = getelementptr inbounds %"class.pdfium::span.89", %"class.pdfium::span.89"* %6, i64 0, i32 1
  %149 = load i64, i64* %148, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %143) #9
  %150 = icmp eq i64 %149, 0
  br i1 %150, label %283, label %151

151:                                              ; preds = %142
  %152 = bitcast %class.CFX_BitStream* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %152) #9
  %153 = getelementptr inbounds %class.CFX_BitStream, %class.CFX_BitStream* %7, i64 0, i32 0
  %154 = bitcast %"class.pdfium::span"* %8 to i64*
  %155 = bitcast %class.CFX_BitStream* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %155, i8 -86, i64 16, i1 false)
  store i64 %147, i64* %154, align 8
  %156 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %8, i64 0, i32 1
  store i64 %149, i64* %156, align 8
  call void @_ZN13CFX_BitStreamC1EN6pdfium4spanIKhEE(%class.CFX_BitStream* nonnull %7, %"class.pdfium::span"* nonnull %8) #9
  %157 = load i32, i32* %153, align 8
  %158 = add i32 %157, %136
  store i32 %158, i32* %153, align 8
  %159 = load i32, i32* %63, align 8
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %281, label %161

161:                                              ; preds = %151
  %162 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 1, i32 0, i32 0
  %163 = bitcast %class.CFX_BitStream* %9 to i8*
  %164 = getelementptr inbounds %class.CFX_BitStream, %class.CFX_BitStream* %9, i64 0, i32 0
  %165 = bitcast %"class.pdfium::span"* %10 to i64*
  %166 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %10, i64 0, i32 1
  %167 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 4
  %168 = getelementptr inbounds %class.CPDF_SampledFunc, %class.CPDF_SampledFunc* %0, i64 0, i32 2, i32 0, i32 0
  %169 = bitcast %class.CFX_BitStream* %9 to i8*
  br label %170

170:                                              ; preds = %161, %266
  %171 = phi i64 [ 0, %161 ], [ %277, %266 ]
  %172 = load i32, i32* %66, align 8
  %173 = call i32 @_ZN13CFX_BitStream7GetBitsEj(%class.CFX_BitStream* nonnull %7, i32 %172) #9
  %174 = uitofp i32 %173 to float
  %175 = load i32, i32* %13, align 4
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %266, label %177

177:                                              ; preds = %170
  %178 = trunc i64 %171 to i33
  br label %179

179:                                              ; preds = %177, %260
  %180 = phi i32 [ %175, %177 ], [ %261, %260 ]
  %181 = phi i64 [ 0, %177 ], [ %263, %260 ]
  %182 = phi float [ %174, %177 ], [ %262, %260 ]
  %183 = getelementptr inbounds i32, i32* %54, i64 %181
  %184 = load i32, i32* %183, align 4
  %185 = load %"struct.CPDF_SampledFunc::SampleEncodeInfo"*, %"struct.CPDF_SampledFunc::SampleEncodeInfo"** %162, align 8
  %186 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleEncodeInfo", %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %185, i64 %181, i32 2
  %187 = load i32, i32* %186, align 4
  %188 = add i32 %187, -1
  %189 = icmp eq i32 %184, %188
  br i1 %189, label %190, label %196

190:                                              ; preds = %179
  %191 = icmp eq i32 %184, 0
  br i1 %191, label %192, label %260

192:                                              ; preds = %190
  %193 = getelementptr inbounds float, float* %32, i64 %181
  %194 = load float, float* %193, align 4
  %195 = fmul float %194, %174
  br label %260

196:                                              ; preds = %179
  %197 = getelementptr inbounds i32, i32* %56, i64 %181
  %198 = load i32, i32* %197, align 4
  %199 = icmp slt i32 %198, 0
  br i1 %199, label %281, label %200

200:                                              ; preds = %196
  %201 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %198, i32 %62) #9
  %202 = extractvalue { i32, i1 } %201, 1
  %203 = extractvalue { i32, i1 } %201, 0
  br i1 %202, label %281, label %204

204:                                              ; preds = %200
  %205 = load i32, i32* %63, align 8
  %206 = icmp slt i32 %203, 0
  %207 = sub i32 0, %203
  %208 = select i1 %206, i32 %207, i32 %203
  %209 = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %208, i32 %205) #9
  %210 = extractvalue { i32, i1 } %209, 1
  %211 = extractvalue { i32, i1 } %209, 0
  %212 = lshr i32 %203, 31
  %213 = add nuw i32 %212, 2147483647
  %214 = icmp ugt i32 %211, %213
  %215 = or i1 %210, %214
  br i1 %215, label %281, label %216

216:                                              ; preds = %204
  %217 = sub i32 0, %211
  %218 = select i1 %206, i32 %217, i32 %211
  %219 = sext i32 %218 to i33
  %220 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %219, i33 %178) #9
  %221 = extractvalue { i33, i1 } %220, 1
  %222 = extractvalue { i33, i1 } %220, 0
  %223 = add i33 %222, 2147483648
  %224 = icmp slt i33 %223, 0
  %225 = or i1 %221, %224
  %226 = trunc i33 %222 to i32
  br i1 %225, label %281, label %227

227:                                              ; preds = %216
  %228 = load i32, i32* %66, align 8
  %229 = icmp slt i32 %226, 0
  %230 = sub i32 0, %226
  %231 = select i1 %229, i32 %230, i32 %226
  %232 = call { i32, i1 } @llvm.umul.with.overflow.i32(i32 %231, i32 %228) #9
  %233 = extractvalue { i32, i1 } %232, 1
  %234 = extractvalue { i32, i1 } %232, 0
  %235 = lshr i33 %222, 31
  %236 = trunc i33 %235 to i32
  %237 = and i32 %236, 1
  %238 = add nuw i32 %237, 2147483647
  %239 = icmp ugt i32 %234, %238
  %240 = or i1 %233, %239
  %241 = sub i32 0, %234
  %242 = select i1 %229, i32 %241, i32 %234
  %243 = icmp slt i32 %242, 0
  %244 = or i1 %243, %240
  br i1 %244, label %281, label %245, !prof !6

245:                                              ; preds = %227
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %163) #9
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %169, i8 -86, i64 16, i1 false)
  store i64 %147, i64* %165, align 8
  store i64 %149, i64* %166, align 8
  call void @_ZN13CFX_BitStreamC1EN6pdfium4spanIKhEE(%class.CFX_BitStream* nonnull %9, %"class.pdfium::span"* nonnull %10) #9
  %246 = load i32, i32* %164, align 8
  %247 = add i32 %246, %242
  store i32 %247, i32* %164, align 8
  %248 = load i32, i32* %66, align 8
  %249 = call i32 @_ZN13CFX_BitStream7GetBitsEj(%class.CFX_BitStream* nonnull %9, i32 %248) #9
  %250 = uitofp i32 %249 to float
  %251 = getelementptr inbounds float, float* %32, i64 %181
  %252 = load float, float* %251, align 4
  %253 = load i32, i32* %183, align 4
  %254 = uitofp i32 %253 to float
  %255 = fsub float %252, %254
  %256 = fsub float %250, %174
  %257 = fmul float %256, %255
  %258 = fadd float %182, %257
  call void @_ZN13CFX_BitStreamD1Ev(%class.CFX_BitStream* nonnull %9) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %163) #9
  %259 = load i32, i32* %13, align 4
  br label %260

260:                                              ; preds = %245, %192, %190
  %261 = phi i32 [ %180, %192 ], [ %180, %190 ], [ %259, %245 ]
  %262 = phi float [ %195, %192 ], [ %182, %190 ], [ %258, %245 ]
  %263 = add nuw nsw i64 %181, 1
  %264 = zext i32 %261 to i64
  %265 = icmp ult i64 %263, %264
  br i1 %265, label %179, label %266

266:                                              ; preds = %260, %170
  %267 = phi float [ %174, %170 ], [ %262, %260 ]
  %268 = load i32, i32* %167, align 4
  %269 = uitofp i32 %268 to float
  %270 = load %"struct.CPDF_SampledFunc::SampleDecodeInfo"*, %"struct.CPDF_SampledFunc::SampleDecodeInfo"** %168, align 8
  %271 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleDecodeInfo", %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %270, i64 %171, i32 1
  %272 = load float, float* %271, align 4
  %273 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleDecodeInfo", %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %270, i64 %171, i32 0
  %274 = load float, float* %273, align 4
  %275 = call float @_ZNK13CPDF_Function11InterpolateEfffff(%class.CPDF_Function* %12, float %267, float 0.000000e+00, float %269, float %272, float %274) #9
  %276 = getelementptr inbounds float, float* %2, i64 %171
  store float %275, float* %276, align 4
  %277 = add nuw nsw i64 %171, 1
  %278 = load i32, i32* %63, align 8
  %279 = zext i32 %278 to i64
  %280 = icmp ult i64 %277, %279
  br i1 %280, label %170, label %281

281:                                              ; preds = %266, %196, %200, %204, %216, %227, %151
  %282 = phi i1 [ true, %151 ], [ false, %227 ], [ false, %216 ], [ false, %204 ], [ false, %200 ], [ false, %196 ], [ true, %266 ]
  call void @_ZN13CFX_BitStreamD1Ev(%class.CFX_BitStream* nonnull %7) #9
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %152) #9
  br label %283

283:                                              ; preds = %68, %61, %139, %133, %281, %142
  %284 = phi i1 [ false, %68 ], [ %282, %281 ], [ false, %142 ], [ false, %139 ], [ false, %133 ], [ false, %61 ]
  %285 = load i32*, i32** %51, align 8
  store i32* null, i32** %51, align 8
  %286 = icmp eq i32* %285, null
  br i1 %286, label %289, label %287

287:                                              ; preds = %283
  %288 = bitcast i32* %285 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %288) #9
  br label %289

289:                                              ; preds = %283, %287
  call void @llvm.lifetime.end.p0i8(i64 136, i8* nonnull %33) #9
  %290 = load float*, float** %29, align 8
  store float* null, float** %29, align 8
  %291 = icmp eq float* %290, null
  br i1 %291, label %294, label %292

292:                                              ; preds = %289
  %293 = bitcast float* %290 to i8*
  call void @_Z7FX_FreePv(i8* nonnull %293) #9
  br label %294

294:                                              ; preds = %289, %292
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %11) #9
  ret i1 %284
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare float @_ZNK13CPDF_Function11InterpolateEfffff(%class.CPDF_Function*, float, float, float, float, float) local_unnamed_addr #1

declare void @_ZN14CPDF_StreamAcc7GetSpanEv(%"class.pdfium::span.89"* sret, %class.CPDF_StreamAcc*) local_unnamed_addr #1

declare void @_ZN13CFX_BitStreamC1EN6pdfium4spanIKhEE(%class.CFX_BitStream*, %"class.pdfium::span"*) unnamed_addr #1

declare i32 @_ZN13CFX_BitStream7GetBitsEj(%class.CFX_BitStream*, i32) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN13CFX_BitStreamD1Ev(%class.CFX_BitStream*) unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.umul.with.overflow.i32(i32, i32) #5

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.smul.with.overflow.i32(i32, i32) #5

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #5

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN16CPDF_SampledFunc16SampleEncodeInfoENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.1"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.CPDF_SampledFunc::SampleEncodeInfo"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.CPDF_SampledFunc::SampleEncodeInfo"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 12
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %30, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.CPDF_SampledFunc::SampleEncodeInfo"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %28, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleEncodeInfo", %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"struct.CPDF_SampledFunc::SampleEncodeInfo", %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %13, i64 %18, i32 0
  %20 = bitcast float* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = urem i64 %23, 12
  %25 = add i64 %23, 12
  %26 = sub i64 %25, %24
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %26, i1 false) #9
  %27 = ptrtoint %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %16 to i64
  br label %28

28:                                               ; preds = %12, %15
  %29 = phi i64 [ %27, %15 ], [ %8, %12 ]
  store i64 %29, i64* %7, align 8
  br label %85

30:                                               ; preds = %2
  %31 = bitcast %"class.std::__1::vector.1"* %0 to i64*
  %32 = load i64, i64* %31, align 8
  %33 = sub i64 %8, %32
  %34 = sdiv exact i64 %33, 12
  %35 = add i64 %34, %1
  %36 = icmp ugt i64 %35, 1537228672809129301
  br i1 %36, label %37, label %39

37:                                               ; preds = %30
  %38 = bitcast %"class.std::__1::vector.1"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %38) #11
  unreachable

39:                                               ; preds = %30
  %40 = sub i64 %5, %32
  %41 = sdiv exact i64 %40, 12
  %42 = icmp ult i64 %41, 768614336404564650
  br i1 %42, label %43, label %48

43:                                               ; preds = %39
  %44 = shl nsw i64 %41, 1
  %45 = icmp ult i64 %44, %35
  %46 = select i1 %45, i64 %35, i64 %44
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %39, %43
  %49 = phi i64 [ %46, %43 ], [ 1537228672809129301, %39 ]
  %50 = mul i64 %49, 12
  %51 = tail call i8* @_Znwm(i64 %50) #10
  %52 = bitcast i8* %51 to %"struct.CPDF_SampledFunc::SampleEncodeInfo"*
  br label %53

53:                                               ; preds = %43, %48
  %54 = phi i64 [ %49, %48 ], [ 0, %43 ]
  %55 = phi %"struct.CPDF_SampledFunc::SampleEncodeInfo"* [ %52, %48 ], [ null, %43 ]
  %56 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleEncodeInfo", %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %55, i64 %34
  %57 = bitcast %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %56 to i8*
  %58 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleEncodeInfo", %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %55, i64 %54
  %59 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleEncodeInfo", %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %56, i64 %1
  %60 = mul nsw i64 %1, 12
  %61 = add i64 %60, -12
  %62 = urem i64 %61, 12
  %63 = sub i64 %61, %62
  %64 = add i64 %63, 12
  call void @llvm.memset.p0i8.i64(i8* align 4 %57, i8 0, i64 %64, i1 false)
  %65 = ptrtoint %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %58 to i64
  %66 = ptrtoint %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %59 to i64
  %67 = getelementptr inbounds %"class.std::__1::vector.1", %"class.std::__1::vector.1"* %0, i64 0, i32 0, i32 0
  %68 = load %"struct.CPDF_SampledFunc::SampleEncodeInfo"*, %"struct.CPDF_SampledFunc::SampleEncodeInfo"** %67, align 8
  %69 = load i64, i64* %7, align 8
  %70 = ptrtoint %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %68 to i64
  %71 = sub i64 %69, %70
  %72 = sdiv exact i64 %71, -12
  %73 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleEncodeInfo", %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %56, i64 %72
  %74 = ptrtoint %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %73 to i64
  %75 = icmp sgt i64 %71, 0
  br i1 %75, label %76, label %80

76:                                               ; preds = %53
  %77 = bitcast %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %73 to i8*
  %78 = bitcast %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %77, i8* align 4 %78, i64 %71, i1 false) #9
  %79 = load %"struct.CPDF_SampledFunc::SampleEncodeInfo"*, %"struct.CPDF_SampledFunc::SampleEncodeInfo"** %67, align 8
  br label %80

80:                                               ; preds = %53, %76
  %81 = phi %"struct.CPDF_SampledFunc::SampleEncodeInfo"* [ %68, %53 ], [ %79, %76 ]
  store i64 %74, i64* %31, align 8
  store i64 %66, i64* %7, align 8
  store i64 %65, i64* %4, align 8
  %82 = icmp eq %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %81, null
  br i1 %82, label %85, label %83

83:                                               ; preds = %80
  %84 = bitcast %"struct.CPDF_SampledFunc::SampleEncodeInfo"* %81 to i8*
  tail call void @_ZdlPv(i8* %84) #10
  br label %85

85:                                               ; preds = %83, %80, %28
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #6

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #8

declare void @_ZN14CPDF_StreamAccC1EPK11CPDF_Stream(%class.CPDF_StreamAcc*, %class.CPDF_Stream*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN16CPDF_SampledFunc16SampleDecodeInfoENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.8"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.CPDF_SampledFunc::SampleDecodeInfo"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.CPDF_SampledFunc::SampleDecodeInfo"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 3
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.CPDF_SampledFunc::SampleDecodeInfo"*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleDecodeInfo", %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr %"struct.CPDF_SampledFunc::SampleDecodeInfo", %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %13, i64 %18, i32 0
  %20 = bitcast float* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 8
  %25 = and i64 %24, -8
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #9
  %26 = ptrtoint %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector.8"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 3
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 2305843009213693951
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector.8"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #11
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 3
  %41 = icmp ult i64 %40, 1152921504606846975
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 2
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 2305843009213693951
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #11
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 2305843009213693951, %38 ]
  %52 = shl i64 %51, 3
  %53 = tail call i8* @_Znwm(i64 %52) #10
  %54 = bitcast i8* %53 to %"struct.CPDF_SampledFunc::SampleDecodeInfo"*
  br label %55

55:                                               ; preds = %42, %50
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi %"struct.CPDF_SampledFunc::SampleDecodeInfo"* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleDecodeInfo", %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %57, i64 %33
  %59 = bitcast %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %58 to i8*
  %60 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleDecodeInfo", %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %57, i64 %56
  %61 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleDecodeInfo", %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %58, i64 %1
  %62 = shl nsw i64 %1, 3
  call void @llvm.memset.p0i8.i64(i8* align 4 %59, i8 0, i64 %62, i1 false)
  %63 = ptrtoint %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %60 to i64
  %64 = ptrtoint %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %61 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.8", %"class.std::__1::vector.8"* %0, i64 0, i32 0, i32 0
  %66 = load %"struct.CPDF_SampledFunc::SampleDecodeInfo"*, %"struct.CPDF_SampledFunc::SampleDecodeInfo"** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 3
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds %"struct.CPDF_SampledFunc::SampleDecodeInfo", %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %58, i64 %71
  %73 = ptrtoint %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %72 to i8*
  %77 = bitcast %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #9
  %78 = load %"struct.CPDF_SampledFunc::SampleDecodeInfo"*, %"struct.CPDF_SampledFunc::SampleDecodeInfo"** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi %"struct.CPDF_SampledFunc::SampleDecodeInfo"* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast %"struct.CPDF_SampledFunc::SampleDecodeInfo"* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #10
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

declare i8* @_ZN6pdfium8internal11CallocOrDieEmm(i64, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN6pdfium10MakeRetainI14CPDF_StreamAccJRPK11CPDF_StreamEEEN5fxcrt9RetainPtrIT_EEDpOT0_: argument 0"}
!4 = distinct !{!4, !"_ZN6pdfium10MakeRetainI14CPDF_StreamAccJRPK11CPDF_StreamEEEN5fxcrt9RetainPtrIT_EEDpOT0_"}
!5 = !{!"branch_weights", i32 6004, i32 2000}
!6 = !{!"branch_weights", i32 2002, i32 2000}
