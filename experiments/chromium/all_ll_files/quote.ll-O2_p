; ModuleID = '../../third_party/nasm/asm/quote.c'
source_filename = "../../third_party/nasm/asm/quote.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [35 x i8] c"../../third_party/nasm/asm/quote.c\00", align 1
@.str.1 = private unnamed_addr constant [27 x i8] c"(size_t)(q-nstr) == qlen+2\00", align 1
@.str.2 = private unnamed_addr constant [45 x i8] c"control character in string not allowed here\00", align 1
@nasm_ctype_tab = external local_unnamed_addr global [256 x i16], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i8* @nasm_quote(i8* readonly, i64* nocapture) local_unnamed_addr #0 {
  %3 = load i64, i64* %1, align 8
  %4 = getelementptr inbounds i8, i8* %0, i64 %3
  %5 = icmp sgt i64 %3, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %2
  %7 = add nsw i64 %3, 3
  %8 = tail call noalias i8* @nasm_malloc(i64 %7) #6
  br label %64

9:                                                ; preds = %2, %48
  %10 = phi i64 [ %51, %48 ], [ 0, %2 ]
  %11 = phi i8 [ %50, %48 ], [ 1, %2 ]
  %12 = phi i8 [ %49, %48 ], [ 1, %2 ]
  %13 = phi i8* [ %52, %48 ], [ %0, %2 ]
  %14 = load i8, i8* %13, align 1
  %15 = sext i8 %14 to i32
  switch i32 %15, label %22 [
    i32 39, label %16
    i32 34, label %18
    i32 96, label %20
    i32 92, label %20
  ]

16:                                               ; preds = %9
  %17 = add i64 %10, 1
  br label %48

18:                                               ; preds = %9
  %19 = add i64 %10, 1
  br label %48

20:                                               ; preds = %9, %9
  %21 = add i64 %10, 2
  br label %48

22:                                               ; preds = %9
  %23 = icmp slt i8 %14, 32
  %24 = icmp eq i8 %14, 127
  %25 = or i1 %23, %24
  br i1 %25, label %26, label %46

26:                                               ; preds = %22
  switch i32 %15, label %29 [
    i32 7, label %27
    i32 8, label %27
    i32 9, label %27
    i32 10, label %27
    i32 11, label %27
    i32 12, label %27
    i32 13, label %27
    i32 27, label %27
  ]

27:                                               ; preds = %26, %26, %26, %26, %26, %26, %26, %26
  %28 = add i64 %10, 2
  br label %48

29:                                               ; preds = %26
  %30 = getelementptr inbounds i8, i8* %13, i64 1
  %31 = icmp ult i8* %30, %4
  br i1 %31, label %32, label %34

32:                                               ; preds = %29
  %33 = load i8, i8* %30, align 1
  br label %34

34:                                               ; preds = %29, %32
  %35 = phi i8 [ %33, %32 ], [ 0, %29 ]
  %36 = and i8 %35, -8
  %37 = icmp eq i8 %36, 48
  %38 = select i1 %37, i8 -1, i8 %14
  %39 = icmp ugt i8 %38, 63
  %40 = zext i1 %39 to i64
  %41 = icmp ugt i8 %38, 7
  %42 = zext i1 %41 to i64
  %43 = add i64 %10, 2
  %44 = add i64 %43, %40
  %45 = add i64 %44, %42
  br label %48

46:                                               ; preds = %22
  %47 = add i64 %10, 1
  br label %48

48:                                               ; preds = %16, %18, %20, %27, %34, %46
  %49 = phi i8 [ 0, %34 ], [ 0, %27 ], [ %12, %46 ], [ %12, %20 ], [ %12, %18 ], [ 0, %16 ]
  %50 = phi i8 [ 0, %34 ], [ 0, %27 ], [ %11, %46 ], [ %11, %20 ], [ 0, %18 ], [ %11, %16 ]
  %51 = phi i64 [ %45, %34 ], [ %28, %27 ], [ %47, %46 ], [ %21, %20 ], [ %19, %18 ], [ %17, %16 ]
  %52 = getelementptr inbounds i8, i8* %13, i64 1
  %53 = icmp ult i8* %52, %4
  br i1 %53, label %9, label %54

54:                                               ; preds = %48
  %55 = and i8 %49, 1
  %56 = icmp ne i8 %55, 0
  %57 = xor i1 %56, true
  %58 = and i8 %50, 1
  %59 = icmp eq i8 %58, 0
  %60 = and i1 %59, %57
  br i1 %60, label %76, label %61

61:                                               ; preds = %54
  %62 = add i64 %3, 3
  %63 = tail call noalias i8* @nasm_malloc(i64 %62) #6
  br i1 %56, label %64, label %66

64:                                               ; preds = %6, %61
  %65 = phi i8* [ %8, %6 ], [ %63, %61 ]
  br label %66

66:                                               ; preds = %61, %64
  %67 = phi i8* [ %65, %64 ], [ %63, %61 ]
  %68 = phi i8 [ 39, %64 ], [ 34, %61 ]
  %69 = add i64 %3, 1
  %70 = getelementptr inbounds i8, i8* %67, i64 %69
  store i8 %68, i8* %70, align 1
  store i8 %68, i8* %67, align 1
  %71 = add i64 %3, 2
  %72 = getelementptr inbounds i8, i8* %67, i64 %71
  %73 = icmp eq i64 %3, 0
  br i1 %73, label %160, label %74

74:                                               ; preds = %66
  %75 = getelementptr inbounds i8, i8* %67, i64 1
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %75, i8* align 1 %0, i64 %3, i1 false)
  br label %160

76:                                               ; preds = %54
  %77 = add i64 %51, 3
  %78 = tail call noalias i8* @nasm_malloc(i64 %77) #6
  %79 = getelementptr inbounds i8, i8* %78, i64 1
  store i8 96, i8* %78, align 1
  br i1 %5, label %80, label %151

80:                                               ; preds = %76, %147
  %81 = phi i8* [ %148, %147 ], [ %79, %76 ]
  %82 = phi i8* [ %149, %147 ], [ %0, %76 ]
  %83 = load i8, i8* %82, align 1
  %84 = sext i8 %83 to i32
  switch i32 %84, label %112 [
    i32 96, label %85
    i32 92, label %85
    i32 7, label %88
    i32 8, label %91
    i32 9, label %94
    i32 10, label %97
    i32 11, label %100
    i32 12, label %103
    i32 13, label %106
    i32 27, label %109
  ]

85:                                               ; preds = %80, %80
  %86 = getelementptr inbounds i8, i8* %81, i64 1
  store i8 92, i8* %81, align 1
  %87 = getelementptr inbounds i8, i8* %81, i64 2
  store i8 %83, i8* %86, align 1
  br label %147

88:                                               ; preds = %80
  %89 = getelementptr inbounds i8, i8* %81, i64 1
  store i8 92, i8* %81, align 1
  %90 = getelementptr inbounds i8, i8* %81, i64 2
  store i8 97, i8* %89, align 1
  br label %147

91:                                               ; preds = %80
  %92 = getelementptr inbounds i8, i8* %81, i64 1
  store i8 92, i8* %81, align 1
  %93 = getelementptr inbounds i8, i8* %81, i64 2
  store i8 98, i8* %92, align 1
  br label %147

94:                                               ; preds = %80
  %95 = getelementptr inbounds i8, i8* %81, i64 1
  store i8 92, i8* %81, align 1
  %96 = getelementptr inbounds i8, i8* %81, i64 2
  store i8 116, i8* %95, align 1
  br label %147

97:                                               ; preds = %80
  %98 = getelementptr inbounds i8, i8* %81, i64 1
  store i8 92, i8* %81, align 1
  %99 = getelementptr inbounds i8, i8* %81, i64 2
  store i8 110, i8* %98, align 1
  br label %147

100:                                              ; preds = %80
  %101 = getelementptr inbounds i8, i8* %81, i64 1
  store i8 92, i8* %81, align 1
  %102 = getelementptr inbounds i8, i8* %81, i64 2
  store i8 118, i8* %101, align 1
  br label %147

103:                                              ; preds = %80
  %104 = getelementptr inbounds i8, i8* %81, i64 1
  store i8 92, i8* %81, align 1
  %105 = getelementptr inbounds i8, i8* %81, i64 2
  store i8 102, i8* %104, align 1
  br label %147

106:                                              ; preds = %80
  %107 = getelementptr inbounds i8, i8* %81, i64 1
  store i8 92, i8* %81, align 1
  %108 = getelementptr inbounds i8, i8* %81, i64 2
  store i8 114, i8* %107, align 1
  br label %147

109:                                              ; preds = %80
  %110 = getelementptr inbounds i8, i8* %81, i64 1
  store i8 92, i8* %81, align 1
  %111 = getelementptr inbounds i8, i8* %81, i64 2
  store i8 101, i8* %110, align 1
  br label %147

112:                                              ; preds = %80
  %113 = icmp slt i8 %83, 32
  %114 = icmp eq i8 %83, 127
  %115 = or i1 %113, %114
  br i1 %115, label %116, label %145

116:                                              ; preds = %112
  %117 = getelementptr inbounds i8, i8* %82, i64 1
  %118 = icmp ult i8* %117, %4
  br i1 %118, label %119, label %121

119:                                              ; preds = %116
  %120 = load i8, i8* %117, align 1
  br label %121

121:                                              ; preds = %116, %119
  %122 = phi i8 [ %120, %119 ], [ 0, %116 ]
  %123 = and i8 %122, -8
  %124 = icmp eq i8 %123, 48
  %125 = select i1 %124, i8 -1, i8 %83
  %126 = getelementptr inbounds i8, i8* %81, i64 1
  store i8 92, i8* %81, align 1
  %127 = icmp ugt i8 %125, 63
  br i1 %127, label %128, label %132

128:                                              ; preds = %121
  %129 = lshr i8 %83, 6
  %130 = or i8 %129, 48
  %131 = getelementptr inbounds i8, i8* %81, i64 2
  store i8 %130, i8* %126, align 1
  br label %134

132:                                              ; preds = %121
  %133 = icmp ugt i8 %125, 7
  br i1 %133, label %134, label %140

134:                                              ; preds = %128, %132
  %135 = phi i8* [ %131, %128 ], [ %126, %132 ]
  %136 = lshr i8 %83, 3
  %137 = and i8 %136, 7
  %138 = or i8 %137, 48
  %139 = getelementptr inbounds i8, i8* %135, i64 1
  store i8 %138, i8* %135, align 1
  br label %140

140:                                              ; preds = %134, %132
  %141 = phi i8* [ %139, %134 ], [ %126, %132 ]
  %142 = and i8 %83, 7
  %143 = or i8 %142, 48
  %144 = getelementptr inbounds i8, i8* %141, i64 1
  store i8 %143, i8* %141, align 1
  br label %147

145:                                              ; preds = %112
  %146 = getelementptr inbounds i8, i8* %81, i64 1
  store i8 %83, i8* %81, align 1
  br label %147

147:                                              ; preds = %85, %88, %91, %94, %97, %100, %103, %106, %109, %140, %145
  %148 = phi i8* [ %144, %140 ], [ %146, %145 ], [ %111, %109 ], [ %108, %106 ], [ %105, %103 ], [ %102, %100 ], [ %99, %97 ], [ %96, %94 ], [ %93, %91 ], [ %90, %88 ], [ %87, %85 ]
  %149 = getelementptr inbounds i8, i8* %82, i64 1
  %150 = icmp ult i8* %149, %4
  br i1 %150, label %80, label %151

151:                                              ; preds = %147, %76
  %152 = phi i8* [ %79, %76 ], [ %148, %147 ]
  %153 = getelementptr inbounds i8, i8* %152, i64 1
  store i8 96, i8* %152, align 1
  %154 = ptrtoint i8* %153 to i64
  %155 = ptrtoint i8* %78 to i64
  %156 = sub i64 %154, %155
  %157 = add i64 %51, 2
  %158 = icmp eq i64 %156, %157
  br i1 %158, label %160, label %159, !prof !2

159:                                              ; preds = %151
  tail call void @nasm_assert_failed(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i32 183, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0)) #7
  unreachable

160:                                              ; preds = %66, %151, %74
  %161 = phi i8* [ %72, %74 ], [ %72, %66 ], [ %153, %151 ]
  %162 = phi i8* [ %67, %74 ], [ %67, %66 ], [ %78, %151 ]
  store i8 0, i8* %161, align 1
  %163 = ptrtoint i8* %161 to i64
  %164 = ptrtoint i8* %162 to i64
  %165 = sub i64 %163, %164
  store i64 %165, i64* %1, align 8
  ret i8* %162
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: allocsize(0)
declare noalias i8* @nasm_malloc(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: cold noreturn
declare void @nasm_assert_failed(i8*, i32, i8*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i8* @nasm_quote_cstr(i8* readonly, i64*) local_unnamed_addr #0 {
  %3 = alloca i64, align 8
  %4 = bitcast i64* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #8
  %5 = tail call i64 @strlen(i8* %0) #9
  store i64 %5, i64* %3, align 8
  %6 = call i8* @nasm_quote(i8* %0, i64* nonnull %3)
  %7 = icmp eq i64* %1, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %2
  %9 = load i64, i64* %3, align 8
  store i64 %9, i64* %1, align 8
  br label %10

10:                                               ; preds = %2, %8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #8
  ret i8* %6
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden i64 @nasm_unquote(i8*, i8**) local_unnamed_addr #0 {
  %3 = tail call fastcc i64 @nasm_unquote_common(i8* %0, i8** %1, i32 0)
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @nasm_unquote_common(i8*, i8**, i32) unnamed_addr #0 {
  %4 = getelementptr inbounds i8, i8* %0, i64 1
  %5 = load i8, i8* %0, align 1
  switch i8 %5, label %6 [
    i8 0, label %271
    i8 39, label %10
    i8 34, label %10
    i8 96, label %37
  ]

6:                                                ; preds = %3
  %7 = getelementptr inbounds i8, i8* %0, i64 2
  %8 = load i8, i8* %4, align 1
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %256, label %237

10:                                               ; preds = %3, %3
  %11 = getelementptr inbounds i8, i8* %0, i64 2
  %12 = load i8, i8* %4, align 1
  %13 = icmp eq i8 %12, 0
  %14 = icmp eq i8 %12, %5
  %15 = or i1 %13, %14
  br i1 %15, label %256, label %16

16:                                               ; preds = %10, %30
  %17 = phi i8 [ %33, %30 ], [ %12, %10 ]
  %18 = phi i8* [ %32, %30 ], [ %11, %10 ]
  %19 = phi i32 [ %25, %30 ], [ 0, %10 ]
  %20 = phi i8* [ %31, %30 ], [ %0, %10 ]
  %21 = zext i8 %17 to i32
  %22 = icmp ult i8 %17, 32
  %23 = shl i32 1, %21
  %24 = select i1 %22, i32 %23, i32 0, !prof !3
  %25 = or i32 %24, %19
  %26 = and i32 %25, %2
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %16
  %29 = getelementptr inbounds i8, i8* %20, i64 1
  store i8 %17, i8* %20, align 1
  br label %30

30:                                               ; preds = %16, %28
  %31 = phi i8* [ %20, %16 ], [ %29, %28 ]
  %32 = getelementptr inbounds i8, i8* %18, i64 1
  %33 = load i8, i8* %18, align 1
  %34 = icmp eq i8 %33, 0
  %35 = icmp eq i8 %33, %5
  %36 = or i1 %34, %35
  br i1 %36, label %256, label %16

37:                                               ; preds = %3, %228
  %38 = phi i32 [ %235, %228 ], [ 0, %3 ]
  %39 = phi i32 [ %234, %228 ], [ 0, %3 ]
  %40 = phi i32 [ %233, %228 ], [ 0, %3 ]
  %41 = phi i32 [ %232, %228 ], [ 0, %3 ]
  %42 = phi i8* [ %231, %228 ], [ %0, %3 ]
  %43 = phi i8* [ %230, %228 ], [ null, %3 ]
  %44 = phi i8* [ %229, %228 ], [ %4, %3 ]
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  %46 = load i8, i8* %44, align 1
  switch i32 %40, label %227 [
    i32 0, label %47
    i32 1, label %58
    i32 3, label %86
    i32 2, label %110
    i32 4, label %110
  ]

47:                                               ; preds = %37
  switch i8 %46, label %48 [
    i8 92, label %228
    i8 96, label %256
    i8 0, label %256
  ]

48:                                               ; preds = %47
  %49 = zext i8 %46 to i32
  %50 = icmp ult i8 %46, 32
  %51 = shl i32 1, %49
  %52 = select i1 %50, i32 %51, i32 0, !prof !3
  %53 = or i32 %52, %41
  %54 = and i32 %53, %2
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %228

56:                                               ; preds = %48
  %57 = getelementptr inbounds i8, i8* %42, i64 1
  store i8 %46, i8* %42, align 1
  br label %228

58:                                               ; preds = %37
  %59 = zext i8 %46 to i32
  switch i8 %46, label %71 [
    i8 97, label %73
    i8 98, label %60
    i8 101, label %61
    i8 102, label %62
    i8 110, label %63
    i8 114, label %64
    i8 116, label %65
    i8 117, label %228
    i8 85, label %66
    i8 118, label %67
    i8 120, label %68
    i8 88, label %68
    i8 48, label %69
    i8 49, label %69
    i8 50, label %69
    i8 51, label %69
    i8 52, label %69
    i8 53, label %69
    i8 54, label %69
    i8 55, label %69
    i8 0, label %76
  ]

60:                                               ; preds = %58
  br label %73

61:                                               ; preds = %58
  br label %73

62:                                               ; preds = %58
  br label %73

63:                                               ; preds = %58
  br label %73

64:                                               ; preds = %58
  br label %73

65:                                               ; preds = %58
  br label %73

66:                                               ; preds = %58
  br label %228

67:                                               ; preds = %58
  br label %73

68:                                               ; preds = %58, %58
  br label %228

69:                                               ; preds = %58, %58, %58, %58, %58, %58, %58, %58
  %70 = add nsw i32 %59, -48
  br label %228

71:                                               ; preds = %58
  %72 = icmp ult i8 %46, 32
  br i1 %72, label %73, label %76

73:                                               ; preds = %67, %65, %64, %63, %62, %61, %60, %58, %71
  %74 = phi i32 [ %59, %71 ], [ 11, %67 ], [ 9, %65 ], [ 13, %64 ], [ 10, %63 ], [ 12, %62 ], [ 27, %61 ], [ 8, %60 ], [ 7, %58 ]
  %75 = shl i32 1, %74
  br label %76

76:                                               ; preds = %58, %71, %73
  %77 = phi i32 [ %74, %73 ], [ %59, %71 ], [ 92, %58 ]
  %78 = phi i8* [ %45, %73 ], [ %45, %71 ], [ %44, %58 ]
  %79 = phi i32 [ %75, %73 ], [ 0, %71 ], [ 0, %58 ]
  %80 = or i32 %79, %41
  %81 = and i32 %80, %2
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %228

83:                                               ; preds = %76
  %84 = trunc i32 %77 to i8
  %85 = getelementptr inbounds i8, i8* %42, i64 1
  store i8 %84, i8* %42, align 1
  br label %228

86:                                               ; preds = %37
  %87 = and i8 %46, -8
  %88 = icmp eq i8 %87, 48
  br i1 %88, label %89, label %96

89:                                               ; preds = %86
  %90 = zext i8 %46 to i32
  %91 = shl i32 %38, 3
  %92 = add i32 %91, -48
  %93 = add i32 %92, %90
  %94 = add nsw i32 %39, -1
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %96, label %228

96:                                               ; preds = %86, %89
  %97 = phi i8* [ %45, %89 ], [ %44, %86 ]
  %98 = phi i32 [ 0, %89 ], [ %39, %86 ]
  %99 = phi i32 [ %93, %89 ], [ %38, %86 ]
  %100 = and i32 %99, 255
  %101 = icmp ult i32 %100, 32
  %102 = shl i32 1, %100
  %103 = select i1 %101, i32 %102, i32 0, !prof !3
  %104 = or i32 %103, %41
  %105 = and i32 %104, %2
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %228

107:                                              ; preds = %96
  %108 = trunc i32 %99 to i8
  %109 = getelementptr inbounds i8, i8* %42, i64 1
  store i8 %108, i8* %42, align 1
  br label %228

110:                                              ; preds = %37, %37
  %111 = zext i8 %46 to i64
  %112 = getelementptr inbounds [256 x i16], [256 x i16]* @nasm_ctype_tab, i64 0, i64 %111
  %113 = load i16, i16* %112, align 2
  %114 = and i16 %113, 64
  %115 = icmp eq i16 %114, 0
  br i1 %115, label %126, label %116

116:                                              ; preds = %110
  %117 = shl i32 %38, 4
  %118 = or i8 %46, 32
  %119 = zext i8 %118 to i32
  %120 = icmp ugt i8 %118, 96
  %121 = select i1 %120, i32 -87, i32 -48
  %122 = add i32 %117, %119
  %123 = add i32 %122, %121
  %124 = add nsw i32 %39, -1
  %125 = icmp eq i32 %124, 0
  br i1 %125, label %126, label %228

126:                                              ; preds = %110, %116
  %127 = phi i8* [ %45, %116 ], [ %44, %110 ]
  %128 = phi i32 [ 0, %116 ], [ %39, %110 ]
  %129 = phi i32 [ %123, %116 ], [ %38, %110 ]
  %130 = icmp ugt i8* %127, %43
  br i1 %130, label %143, label %131, !prof !2

131:                                              ; preds = %126
  %132 = getelementptr inbounds i8, i8* %43, i64 -1
  %133 = load i8, i8* %132, align 1
  %134 = zext i8 %133 to i32
  %135 = icmp ult i8 %133, 32
  %136 = shl i32 1, %134
  %137 = select i1 %135, i32 %136, i32 0, !prof !3
  %138 = or i32 %137, %41
  %139 = and i32 %138, %2
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %228

141:                                              ; preds = %131
  %142 = getelementptr inbounds i8, i8* %42, i64 1
  store i8 %133, i8* %42, align 1
  br label %228

143:                                              ; preds = %126
  %144 = icmp eq i32 %40, 4
  br i1 %144, label %145, label %216

145:                                              ; preds = %143
  %146 = icmp ult i32 %129, 32
  %147 = shl i32 1, %129
  %148 = select i1 %146, i32 %147, i32 0, !prof !3
  %149 = or i32 %148, %41
  %150 = and i32 %149, %2
  %151 = icmp eq i32 %150, 0
  br i1 %151, label %152, label %228

152:                                              ; preds = %145
  %153 = icmp ult i32 %129, 128
  br i1 %153, label %154, label %157

154:                                              ; preds = %152
  %155 = trunc i32 %129 to i8
  %156 = getelementptr inbounds i8, i8* %42, i64 1
  store i8 %155, i8* %42, align 1
  br label %228

157:                                              ; preds = %152
  %158 = lshr i32 %129, 6
  %159 = icmp ult i32 %129, 2048
  br i1 %159, label %160, label %163

160:                                              ; preds = %157
  %161 = trunc i32 %158 to i8
  %162 = add i8 %161, -64
  store i8 %162, i8* %42, align 1
  br label %209

163:                                              ; preds = %157
  %164 = lshr i32 %129, 12
  %165 = icmp ult i32 %129, 65536
  br i1 %165, label %166, label %170

166:                                              ; preds = %163
  %167 = trunc i32 %164 to i8
  %168 = add i8 %167, -32
  %169 = getelementptr inbounds i8, i8* %42, i64 1
  store i8 %168, i8* %42, align 1
  br label %204

170:                                              ; preds = %163
  %171 = lshr i32 %129, 18
  %172 = icmp ult i32 %129, 2097152
  br i1 %172, label %173, label %176

173:                                              ; preds = %170
  %174 = trunc i32 %171 to i8
  %175 = add i8 %174, -16
  store i8 %175, i8* %42, align 1
  br label %197

176:                                              ; preds = %170
  %177 = lshr i32 %129, 24
  %178 = icmp ult i32 %129, 67108864
  br i1 %178, label %179, label %183

179:                                              ; preds = %176
  %180 = trunc i32 %177 to i8
  %181 = add i8 %180, -8
  %182 = getelementptr inbounds i8, i8* %42, i64 1
  store i8 %181, i8* %42, align 1
  br label %192

183:                                              ; preds = %176
  %184 = lshr i32 %129, 30
  %185 = trunc i32 %184 to i8
  %186 = or i8 %185, -4
  %187 = getelementptr inbounds i8, i8* %42, i64 1
  store i8 %186, i8* %42, align 1
  %188 = trunc i32 %177 to i8
  %189 = and i8 %188, 63
  %190 = or i8 %189, -128
  %191 = getelementptr inbounds i8, i8* %42, i64 2
  store i8 %190, i8* %187, align 1
  br label %192

192:                                              ; preds = %183, %179
  %193 = phi i8* [ %182, %179 ], [ %191, %183 ]
  %194 = trunc i32 %171 to i8
  %195 = and i8 %194, 63
  %196 = or i8 %195, -128
  store i8 %196, i8* %193, align 1
  br label %197

197:                                              ; preds = %192, %173
  %198 = phi i8* [ %42, %173 ], [ %193, %192 ]
  %199 = getelementptr inbounds i8, i8* %198, i64 1
  %200 = trunc i32 %164 to i8
  %201 = and i8 %200, 63
  %202 = or i8 %201, -128
  %203 = getelementptr inbounds i8, i8* %198, i64 2
  store i8 %202, i8* %199, align 1
  br label %204

204:                                              ; preds = %197, %166
  %205 = phi i8* [ %169, %166 ], [ %203, %197 ]
  %206 = trunc i32 %158 to i8
  %207 = and i8 %206, 63
  %208 = or i8 %207, -128
  store i8 %208, i8* %205, align 1
  br label %209

209:                                              ; preds = %204, %160
  %210 = phi i8* [ %42, %160 ], [ %205, %204 ]
  %211 = getelementptr inbounds i8, i8* %210, i64 1
  %212 = trunc i32 %129 to i8
  %213 = and i8 %212, 63
  %214 = or i8 %213, -128
  %215 = getelementptr inbounds i8, i8* %210, i64 2
  store i8 %214, i8* %211, align 1
  br label %228

216:                                              ; preds = %143
  %217 = and i32 %129, 255
  %218 = icmp ult i32 %217, 32
  %219 = shl i32 1, %217
  %220 = select i1 %218, i32 %219, i32 0, !prof !3
  %221 = or i32 %220, %41
  %222 = and i32 %221, %2
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %224, label %228

224:                                              ; preds = %216
  %225 = trunc i32 %129 to i8
  %226 = getelementptr inbounds i8, i8* %42, i64 1
  store i8 %225, i8* %42, align 1
  br label %228

227:                                              ; preds = %37
  tail call void @nasm_panic_from_macro(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i32 451) #7
  unreachable

228:                                              ; preds = %58, %209, %154, %66, %68, %69, %131, %141, %145, %216, %224, %107, %96, %83, %76, %56, %48, %47, %89, %116
  %229 = phi i8* [ %45, %116 ], [ %45, %89 ], [ %45, %47 ], [ %45, %48 ], [ %45, %56 ], [ %78, %76 ], [ %78, %83 ], [ %97, %96 ], [ %97, %107 ], [ %127, %224 ], [ %127, %216 ], [ %127, %145 ], [ %127, %141 ], [ %127, %131 ], [ %45, %69 ], [ %45, %68 ], [ %45, %66 ], [ %127, %154 ], [ %127, %209 ], [ %45, %58 ]
  %230 = phi i8* [ %43, %116 ], [ %43, %89 ], [ %43, %47 ], [ %43, %48 ], [ %43, %56 ], [ %45, %76 ], [ %45, %83 ], [ %43, %96 ], [ %43, %107 ], [ %43, %224 ], [ %43, %216 ], [ %43, %145 ], [ %43, %141 ], [ %43, %131 ], [ %45, %69 ], [ %45, %68 ], [ %45, %66 ], [ %43, %154 ], [ %43, %209 ], [ %45, %58 ]
  %231 = phi i8* [ %42, %116 ], [ %42, %89 ], [ %42, %47 ], [ %42, %48 ], [ %57, %56 ], [ %42, %76 ], [ %85, %83 ], [ %42, %96 ], [ %109, %107 ], [ %226, %224 ], [ %42, %216 ], [ %42, %145 ], [ %142, %141 ], [ %42, %131 ], [ %42, %69 ], [ %42, %68 ], [ %42, %66 ], [ %156, %154 ], [ %215, %209 ], [ %42, %58 ]
  %232 = phi i32 [ %41, %116 ], [ %41, %89 ], [ %41, %47 ], [ %53, %48 ], [ %53, %56 ], [ %80, %76 ], [ %80, %83 ], [ %104, %96 ], [ %104, %107 ], [ %221, %224 ], [ %221, %216 ], [ %149, %145 ], [ %138, %141 ], [ %138, %131 ], [ %41, %69 ], [ %41, %68 ], [ %41, %66 ], [ %149, %154 ], [ %149, %209 ], [ %41, %58 ]
  %233 = phi i32 [ %40, %116 ], [ 3, %89 ], [ 1, %47 ], [ 0, %48 ], [ 0, %56 ], [ 0, %76 ], [ 0, %83 ], [ 0, %96 ], [ 0, %107 ], [ 0, %224 ], [ 0, %216 ], [ 0, %145 ], [ 0, %141 ], [ 0, %131 ], [ 3, %69 ], [ 2, %68 ], [ 4, %66 ], [ 0, %154 ], [ 0, %209 ], [ 4, %58 ]
  %234 = phi i32 [ %124, %116 ], [ %94, %89 ], [ %39, %47 ], [ %39, %48 ], [ %39, %56 ], [ %39, %76 ], [ %39, %83 ], [ %98, %96 ], [ %98, %107 ], [ %128, %224 ], [ %128, %216 ], [ %128, %145 ], [ %128, %141 ], [ %128, %131 ], [ 2, %69 ], [ 2, %68 ], [ 8, %66 ], [ %128, %154 ], [ %128, %209 ], [ 4, %58 ]
  %235 = phi i32 [ %123, %116 ], [ %93, %89 ], [ %38, %47 ], [ %38, %48 ], [ %38, %56 ], [ %77, %76 ], [ %77, %83 ], [ %99, %96 ], [ %99, %107 ], [ %129, %224 ], [ %129, %216 ], [ %129, %145 ], [ %129, %141 ], [ %129, %131 ], [ %70, %69 ], [ 0, %68 ], [ 0, %66 ], [ %129, %154 ], [ %129, %209 ], [ 0, %58 ]
  %236 = icmp eq i32 %233, 5
  br i1 %236, label %256, label %37

237:                                              ; preds = %6, %251
  %238 = phi i8 [ %254, %251 ], [ %8, %6 ]
  %239 = phi i8* [ %253, %251 ], [ %7, %6 ]
  %240 = phi i32 [ %246, %251 ], [ 0, %6 ]
  %241 = phi i8* [ %252, %251 ], [ %0, %6 ]
  %242 = zext i8 %238 to i32
  %243 = icmp ult i8 %238, 32
  %244 = shl i32 1, %242
  %245 = select i1 %243, i32 %244, i32 0, !prof !3
  %246 = or i32 %245, %240
  %247 = and i32 %246, %2
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %249, label %251

249:                                              ; preds = %237
  %250 = getelementptr inbounds i8, i8* %241, i64 1
  store i8 %238, i8* %241, align 1
  br label %251

251:                                              ; preds = %237, %249
  %252 = phi i8* [ %241, %237 ], [ %250, %249 ]
  %253 = getelementptr inbounds i8, i8* %239, i64 1
  %254 = load i8, i8* %239, align 1
  %255 = icmp eq i8 %254, 0
  br i1 %255, label %256, label %237

256:                                              ; preds = %47, %47, %228, %30, %251, %10, %6
  %257 = phi i8* [ %7, %6 ], [ %11, %10 ], [ %253, %251 ], [ %32, %30 ], [ %45, %47 ], [ %45, %47 ], [ %229, %228 ]
  %258 = phi i8* [ %0, %6 ], [ %0, %10 ], [ %252, %251 ], [ %31, %30 ], [ %42, %47 ], [ %42, %47 ], [ %231, %228 ]
  %259 = phi i32 [ 0, %6 ], [ 0, %10 ], [ %246, %251 ], [ %25, %30 ], [ %41, %47 ], [ %41, %47 ], [ %232, %228 ]
  store i8 0, i8* %258, align 1
  %260 = and i32 %259, %2
  %261 = icmp eq i32 %260, 0
  br i1 %261, label %263, label %262

262:                                              ; preds = %256
  tail call void (i8*, ...) @nasm_nonfatal(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.2, i64 0, i64 0)) #8
  br label %263

263:                                              ; preds = %256, %262
  %264 = icmp eq i8** %1, null
  br i1 %264, label %267, label %265

265:                                              ; preds = %263
  %266 = getelementptr inbounds i8, i8* %257, i64 -1
  store i8* %266, i8** %1, align 8
  br label %267

267:                                              ; preds = %263, %265
  %268 = ptrtoint i8* %258 to i64
  %269 = ptrtoint i8* %0 to i64
  %270 = sub i64 %268, %269
  br label %271

271:                                              ; preds = %3, %267
  %272 = phi i64 [ %270, %267 ], [ 0, %3 ]
  ret i64 %272
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @nasm_unquote_cstr(i8*, i8**) local_unnamed_addr #0 {
  %3 = tail call fastcc i64 @nasm_unquote_common(i8* %0, i8** %1, i32 -134218625)
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define hidden i8* @nasm_skip_string(i8* readonly) local_unnamed_addr #0 {
  %2 = load i8, i8* %0, align 1
  %3 = getelementptr inbounds i8, i8* %0, i64 1
  %4 = sext i8 %2 to i32
  switch i32 %4, label %25 [
    i32 39, label %5
    i32 34, label %5
    i32 96, label %13
  ]

5:                                                ; preds = %1, %1
  br label %6

6:                                                ; preds = %5, %6
  %7 = phi i8* [ %8, %6 ], [ %3, %5 ]
  %8 = getelementptr inbounds i8, i8* %7, i64 1
  %9 = load i8, i8* %7, align 1
  %10 = icmp eq i8 %9, 0
  %11 = icmp eq i8 %9, %2
  %12 = or i1 %10, %11
  br i1 %12, label %25, label %6

13:                                               ; preds = %1, %23
  %14 = phi i1 [ %24, %23 ], [ true, %1 ]
  %15 = phi i8* [ %16, %23 ], [ %3, %1 ]
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  %17 = load i8, i8* %15, align 1
  br i1 %14, label %18, label %21

18:                                               ; preds = %13
  %19 = sext i8 %17 to i32
  switch i32 %19, label %23 [
    i32 92, label %20
    i32 96, label %25
    i32 0, label %25
  ]

20:                                               ; preds = %18
  br label %23

21:                                               ; preds = %13
  %22 = icmp eq i8 %17, 0
  br i1 %22, label %25, label %23

23:                                               ; preds = %21, %20, %18
  %24 = phi i1 [ true, %21 ], [ true, %18 ], [ false, %20 ]
  br label %13

25:                                               ; preds = %21, %18, %18, %6, %1
  %26 = phi i8* [ null, %1 ], [ %7, %6 ], [ %15, %18 ], [ %15, %18 ], [ %15, %21 ]
  ret i8* %26
}

; Function Attrs: cold noreturn
declare void @nasm_panic_from_macro(i8*, i32) local_unnamed_addr #3

declare void @nasm_nonfatal(i8*, ...) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { cold noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind allocsize(0) }
attributes #7 = { cold noreturn nounwind }
attributes #8 = { nounwind }
attributes #9 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{!"branch_weights", i32 1, i32 2000}
