; ModuleID = '../../net/third_party/quiche/src/quic/core/crypto/channel_id.cc'
source_filename = "../../net/third_party/quiche/src/quic/core/crypto/channel_id.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.ecdsa_sig_st = type { %struct.bignum_st*, %struct.bignum_st* }
%struct.bignum_st = type { i64*, i32, i32, i32, i32 }
%struct.sha256_state_st = type { [8 x i32], i32, i32, [64 x i8], i32, i32 }
%struct.ec_group_st = type opaque
%struct.ec_point_st = type opaque
%struct.bignum_ctx = type opaque
%struct.ec_key_st = type opaque

@_ZN4quic17ChannelIDVerifier11kContextStrE = hidden constant [15 x i8] c"QUIC ChannelID\00", align 1
@_ZN4quic17ChannelIDVerifier18kClientToServerStrE = hidden constant [17 x i8] c"client -> server\00", align 16

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4quic17ChannelIDVerifier6VerifyEN4absl11string_viewES2_S2_(i8*, i64, i8*, i64, i8*, i64) local_unnamed_addr #0 align 2 {
  %7 = tail call zeroext i1 @_ZN4quic17ChannelIDVerifier9VerifyRawEN4absl11string_viewES2_S2_b(i8* %0, i64 %1, i8* %2, i64 %3, i8* %4, i64 %5, i1 zeroext true)
  ret i1 %7
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN4quic17ChannelIDVerifier9VerifyRawEN4absl11string_viewES2_S2_b(i8*, i64, i8*, i64, i8*, i64, i1 zeroext) local_unnamed_addr #0 align 2 {
  %8 = alloca %struct.ecdsa_sig_st, align 8
  %9 = alloca %struct.sha256_state_st, align 4
  %10 = alloca [32 x i8], align 16
  %11 = icmp eq i64 %1, 64
  %12 = icmp eq i64 %5, 64
  %13 = and i1 %11, %12
  br i1 %13, label %14, label %83

14:                                               ; preds = %7
  %15 = tail call %struct.ec_group_st* @EC_GROUP_new_by_curve_name(i32 415) #3
  %16 = icmp eq %struct.ec_group_st* %15, null
  br i1 %16, label %83, label %17

17:                                               ; preds = %14
  %18 = tail call %struct.bignum_st* @BN_new() #3
  %19 = tail call %struct.bignum_st* @BN_new() #3
  %20 = tail call %struct.bignum_st* @BN_new() #3
  %21 = tail call %struct.bignum_st* @BN_new() #3
  %22 = bitcast %struct.ecdsa_sig_st* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #3
  %23 = getelementptr inbounds %struct.ecdsa_sig_st, %struct.ecdsa_sig_st* %8, i64 0, i32 0
  %24 = getelementptr inbounds %struct.ecdsa_sig_st, %struct.ecdsa_sig_st* %8, i64 0, i32 1
  store %struct.bignum_st* %20, %struct.bignum_st** %23, align 8
  store %struct.bignum_st* %21, %struct.bignum_st** %24, align 8
  %25 = tail call %struct.bignum_st* @BN_bin2bn(i8* %0, i64 32, %struct.bignum_st* %18) #3
  %26 = icmp eq %struct.bignum_st* %25, null
  br i1 %26, label %69, label %27

27:                                               ; preds = %17
  %28 = getelementptr inbounds i8, i8* %0, i64 32
  %29 = tail call %struct.bignum_st* @BN_bin2bn(i8* %28, i64 32, %struct.bignum_st* %19) #3
  %30 = icmp eq %struct.bignum_st* %29, null
  br i1 %30, label %69, label %31

31:                                               ; preds = %27
  %32 = tail call %struct.bignum_st* @BN_bin2bn(i8* %4, i64 32, %struct.bignum_st* %20) #3
  %33 = icmp eq %struct.bignum_st* %32, null
  br i1 %33, label %69, label %34

34:                                               ; preds = %31
  %35 = getelementptr inbounds i8, i8* %4, i64 32
  %36 = tail call %struct.bignum_st* @BN_bin2bn(i8* %35, i64 32, %struct.bignum_st* %21) #3
  %37 = icmp eq %struct.bignum_st* %36, null
  br i1 %37, label %69, label %38

38:                                               ; preds = %34
  %39 = tail call %struct.ec_point_st* @EC_POINT_new(%struct.ec_group_st* nonnull %15) #3
  %40 = icmp eq %struct.ec_point_st* %39, null
  br i1 %40, label %69, label %41

41:                                               ; preds = %38
  %42 = tail call i32 @EC_POINT_set_affine_coordinates_GFp(%struct.ec_group_st* nonnull %15, %struct.ec_point_st* nonnull %39, %struct.bignum_st* %18, %struct.bignum_st* %19, %struct.bignum_ctx* null) #3
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %67, label %44

44:                                               ; preds = %41
  %45 = tail call %struct.ec_key_st* @EC_KEY_new() #3
  %46 = icmp eq %struct.ec_key_st* %45, null
  br i1 %46, label %67, label %47

47:                                               ; preds = %44
  %48 = tail call i32 @EC_KEY_set_group(%struct.ec_key_st* nonnull %45, %struct.ec_group_st* nonnull %15) #3
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %65, label %50

50:                                               ; preds = %47
  %51 = tail call i32 @EC_KEY_set_public_key(%struct.ec_key_st* nonnull %45, %struct.ec_point_st* nonnull %39) #3
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %65, label %53

53:                                               ; preds = %50
  %54 = bitcast %struct.sha256_state_st* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %54) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %54, i8 -86, i64 112, i1 false)
  %55 = call i32 @SHA256_Init(%struct.sha256_state_st* nonnull %9) #3
  br i1 %6, label %56, label %59

56:                                               ; preds = %53
  %57 = call i32 @SHA256_Update(%struct.sha256_state_st* nonnull %9, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @_ZN4quic17ChannelIDVerifier11kContextStrE, i64 0, i64 0), i64 15) #3
  %58 = call i32 @SHA256_Update(%struct.sha256_state_st* nonnull %9, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @_ZN4quic17ChannelIDVerifier18kClientToServerStrE, i64 0, i64 0), i64 17) #3
  br label %59

59:                                               ; preds = %56, %53
  %60 = call i32 @SHA256_Update(%struct.sha256_state_st* nonnull %9, i8* %2, i64 %3) #3
  %61 = getelementptr inbounds [32 x i8], [32 x i8]* %10, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %61) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %61, i8 -86, i64 32, i1 false)
  %62 = call i32 @SHA256_Final(i8* nonnull %61, %struct.sha256_state_st* nonnull %9) #3
  %63 = call i32 @ECDSA_do_verify(i8* nonnull %61, i64 32, %struct.ecdsa_sig_st* nonnull %8, %struct.ec_key_st* nonnull %45) #3
  %64 = icmp eq i32 %63, 1
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %61) #3
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %54) #3
  br label %65

65:                                               ; preds = %47, %50, %59
  %66 = phi i1 [ false, %47 ], [ false, %50 ], [ %64, %59 ]
  call void @EC_KEY_free(%struct.ec_key_st* nonnull %45) #3
  br label %67

67:                                               ; preds = %65, %44, %41
  %68 = phi i1 [ false, %44 ], [ %66, %65 ], [ false, %41 ]
  call void @EC_POINT_free(%struct.ec_point_st* nonnull %39) #3
  br label %69

69:                                               ; preds = %67, %38, %17, %27, %31, %34
  %70 = phi i1 [ false, %34 ], [ false, %31 ], [ false, %27 ], [ false, %17 ], [ %68, %67 ], [ false, %38 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #3
  %71 = icmp eq %struct.bignum_st* %21, null
  br i1 %71, label %73, label %72

72:                                               ; preds = %69
  call void @BN_free(%struct.bignum_st* nonnull %21) #3
  br label %73

73:                                               ; preds = %69, %72
  %74 = icmp eq %struct.bignum_st* %20, null
  br i1 %74, label %76, label %75

75:                                               ; preds = %73
  call void @BN_free(%struct.bignum_st* nonnull %20) #3
  br label %76

76:                                               ; preds = %73, %75
  %77 = icmp eq %struct.bignum_st* %19, null
  br i1 %77, label %79, label %78

78:                                               ; preds = %76
  call void @BN_free(%struct.bignum_st* nonnull %19) #3
  br label %79

79:                                               ; preds = %76, %78
  %80 = icmp eq %struct.bignum_st* %18, null
  br i1 %80, label %82, label %81

81:                                               ; preds = %79
  call void @BN_free(%struct.bignum_st* nonnull %18) #3
  br label %82

82:                                               ; preds = %81, %79
  call void @EC_GROUP_free(%struct.ec_group_st* nonnull %15) #3
  br label %83

83:                                               ; preds = %82, %14, %7
  %84 = phi i1 [ false, %7 ], [ %70, %82 ], [ false, %14 ]
  ret i1 %84
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %struct.ec_group_st* @EC_GROUP_new_by_curve_name(i32) local_unnamed_addr #2

declare %struct.bignum_st* @BN_new() local_unnamed_addr #2

declare %struct.bignum_st* @BN_bin2bn(i8*, i64, %struct.bignum_st*) local_unnamed_addr #2

declare %struct.ec_point_st* @EC_POINT_new(%struct.ec_group_st*) local_unnamed_addr #2

declare i32 @EC_POINT_set_affine_coordinates_GFp(%struct.ec_group_st*, %struct.ec_point_st*, %struct.bignum_st*, %struct.bignum_st*, %struct.bignum_ctx*) local_unnamed_addr #2

declare %struct.ec_key_st* @EC_KEY_new() local_unnamed_addr #2

declare i32 @EC_KEY_set_group(%struct.ec_key_st*, %struct.ec_group_st*) local_unnamed_addr #2

declare i32 @EC_KEY_set_public_key(%struct.ec_key_st*, %struct.ec_point_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare i32 @SHA256_Init(%struct.sha256_state_st*) local_unnamed_addr #2

declare i32 @SHA256_Update(%struct.sha256_state_st*, i8*, i64) local_unnamed_addr #2

declare i32 @SHA256_Final(i8*, %struct.sha256_state_st*) local_unnamed_addr #2

declare i32 @ECDSA_do_verify(i8*, i64, %struct.ecdsa_sig_st*, %struct.ec_key_st*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @EC_KEY_free(%struct.ec_key_st*) local_unnamed_addr #2

declare void @EC_GROUP_free(%struct.ec_group_st*) local_unnamed_addr #2

declare void @BN_free(%struct.bignum_st*) local_unnamed_addr #2

declare void @EC_POINT_free(%struct.ec_point_st*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
