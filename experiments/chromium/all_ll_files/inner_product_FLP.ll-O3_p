; ModuleID = '../../third_party/opus/src/silk/float/inner_product_FLP.c'
source_filename = "../../third_party/opus/src/silk/float/inner_product_FLP.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden double @silk_inner_product_FLP(float* nocapture readonly, float* nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = add nsw i32 %2, -3
  %5 = icmp sgt i32 %4, 0
  br i1 %5, label %6, label %10

6:                                                ; preds = %3
  %7 = sext i32 %4 to i64
  br label %36

8:                                                ; preds = %36
  %9 = and i32 %2, -4
  br label %10

10:                                               ; preds = %8, %3
  %11 = phi i32 [ 0, %3 ], [ %9, %8 ]
  %12 = phi double [ 0.000000e+00, %3 ], [ %69, %8 ]
  %13 = icmp slt i32 %11, %2
  br i1 %13, label %14, label %94

14:                                               ; preds = %10
  %15 = zext i32 %11 to i64
  %16 = zext i32 %2 to i64
  %17 = xor i64 %15, -1
  %18 = and i64 %16, 1
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %30, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds float, float* %0, i64 %15
  %22 = load float, float* %21, align 4
  %23 = fpext float %22 to double
  %24 = getelementptr inbounds float, float* %1, i64 %15
  %25 = load float, float* %24, align 4
  %26 = fpext float %25 to double
  %27 = fmul double %23, %26
  %28 = fadd double %12, %27
  %29 = or i64 %15, 1
  br label %30

30:                                               ; preds = %14, %20
  %31 = phi double [ undef, %14 ], [ %28, %20 ]
  %32 = phi i64 [ %15, %14 ], [ %29, %20 ]
  %33 = phi double [ %12, %14 ], [ %28, %20 ]
  %34 = sub nsw i64 0, %16
  %35 = icmp eq i64 %17, %34
  br i1 %35, label %94, label %72

36:                                               ; preds = %6, %36
  %37 = phi i64 [ 0, %6 ], [ %70, %36 ]
  %38 = phi double [ 0.000000e+00, %6 ], [ %69, %36 ]
  %39 = getelementptr inbounds float, float* %0, i64 %37
  %40 = load float, float* %39, align 4
  %41 = fpext float %40 to double
  %42 = getelementptr inbounds float, float* %1, i64 %37
  %43 = load float, float* %42, align 4
  %44 = fpext float %43 to double
  %45 = fmul double %41, %44
  %46 = or i64 %37, 1
  %47 = getelementptr inbounds float, float* %0, i64 %46
  %48 = load float, float* %47, align 4
  %49 = fpext float %48 to double
  %50 = getelementptr inbounds float, float* %1, i64 %46
  %51 = load float, float* %50, align 4
  %52 = fpext float %51 to double
  %53 = fmul double %49, %52
  %54 = fadd double %45, %53
  %55 = or i64 %37, 2
  %56 = getelementptr inbounds float, float* %0, i64 %55
  %57 = getelementptr inbounds float, float* %1, i64 %55
  %58 = bitcast float* %56 to <2 x float>*
  %59 = load <2 x float>, <2 x float>* %58, align 4
  %60 = fpext <2 x float> %59 to <2 x double>
  %61 = bitcast float* %57 to <2 x float>*
  %62 = load <2 x float>, <2 x float>* %61, align 4
  %63 = fpext <2 x float> %62 to <2 x double>
  %64 = fmul <2 x double> %60, %63
  %65 = extractelement <2 x double> %64, i32 0
  %66 = fadd double %54, %65
  %67 = extractelement <2 x double> %64, i32 1
  %68 = fadd double %66, %67
  %69 = fadd double %38, %68
  %70 = add nuw nsw i64 %37, 4
  %71 = icmp slt i64 %70, %7
  br i1 %71, label %36, label %8

72:                                               ; preds = %30, %72
  %73 = phi i64 [ %92, %72 ], [ %32, %30 ]
  %74 = phi double [ %91, %72 ], [ %33, %30 ]
  %75 = getelementptr inbounds float, float* %0, i64 %73
  %76 = load float, float* %75, align 4
  %77 = fpext float %76 to double
  %78 = getelementptr inbounds float, float* %1, i64 %73
  %79 = load float, float* %78, align 4
  %80 = fpext float %79 to double
  %81 = fmul double %77, %80
  %82 = fadd double %74, %81
  %83 = add nuw nsw i64 %73, 1
  %84 = getelementptr inbounds float, float* %0, i64 %83
  %85 = load float, float* %84, align 4
  %86 = fpext float %85 to double
  %87 = getelementptr inbounds float, float* %1, i64 %83
  %88 = load float, float* %87, align 4
  %89 = fpext float %88 to double
  %90 = fmul double %86, %89
  %91 = fadd double %82, %90
  %92 = add nuw nsw i64 %73, 2
  %93 = icmp eq i64 %92, %16
  br i1 %93, label %94, label %72

94:                                               ; preds = %30, %72, %10
  %95 = phi double [ %12, %10 ], [ %31, %30 ], [ %91, %72 ]
  ret double %95
}

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
