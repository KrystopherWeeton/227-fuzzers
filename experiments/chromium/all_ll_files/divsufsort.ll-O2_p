; ModuleID = '../../courgette/third_party/divsufsort/divsufsort.cc'
source_filename = "../../courgette/third_party/divsufsort/divsufsort.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.courgette::PagedArray" = type { i32**, i64, i64 }
%"class.courgette::PagedArray_iterator" = type { %"class.courgette::PagedArray"*, i64 }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6divsuf10divsufsortEPKhN9courgette19PagedArray_iteratorINS2_10PagedArrayIiLi18EEEiEEi(i8*, %"class.courgette::PagedArray"*, i64, i32) local_unnamed_addr #0 {
  %5 = alloca %"class.courgette::PagedArray_iterator", align 8
  %6 = alloca %"class.courgette::PagedArray_iterator", align 8
  %7 = icmp eq i8* %0, null
  br i1 %7, label %761, label %8

8:                                                ; preds = %4
  %9 = icmp eq i64 %2, 0
  %10 = icmp eq %"class.courgette::PagedArray"* %1, null
  %11 = and i1 %10, %9
  %12 = icmp slt i32 %3, 0
  %13 = or i1 %11, %12
  br i1 %13, label %761, label %14

14:                                               ; preds = %8
  switch i32 %3, label %46 [
    i32 0, label %761
    i32 1, label %15
    i32 2, label %23
  ]

15:                                               ; preds = %14
  %16 = lshr i64 %2, 18
  %17 = and i64 %2, 262143
  %18 = getelementptr inbounds %"class.courgette::PagedArray", %"class.courgette::PagedArray"* %1, i64 0, i32 0
  %19 = load i32**, i32*** %18, align 8
  %20 = getelementptr inbounds i32*, i32** %19, i64 %16
  %21 = load i32*, i32** %20, align 8
  %22 = getelementptr inbounds i32, i32* %21, i64 %17
  store i32 0, i32* %22, align 4
  br label %761

23:                                               ; preds = %14
  %24 = load i8, i8* %0, align 1
  %25 = getelementptr inbounds i8, i8* %0, i64 1
  %26 = load i8, i8* %25, align 1
  %27 = icmp ult i8 %24, %26
  %28 = xor i1 %27, true
  %29 = zext i1 %28 to i64
  %30 = add i64 %29, %2
  %31 = lshr i64 %30, 18
  %32 = and i64 %30, 262143
  %33 = getelementptr inbounds %"class.courgette::PagedArray", %"class.courgette::PagedArray"* %1, i64 0, i32 0
  %34 = load i32**, i32*** %33, align 8
  %35 = getelementptr inbounds i32*, i32** %34, i64 %31
  %36 = load i32*, i32** %35, align 8
  %37 = getelementptr inbounds i32, i32* %36, i64 %32
  store i32 0, i32* %37, align 4
  %38 = zext i1 %27 to i64
  %39 = add i64 %38, %2
  %40 = lshr i64 %39, 18
  %41 = and i64 %39, 262143
  %42 = load i32**, i32*** %33, align 8
  %43 = getelementptr inbounds i32*, i32** %42, i64 %40
  %44 = load i32*, i32** %43, align 8
  %45 = getelementptr inbounds i32, i32* %44, i64 %41
  store i32 1, i32* %45, align 4
  br label %761

46:                                               ; preds = %14
  %47 = tail call noalias i8* @malloc(i64 1024) #5
  %48 = bitcast i8* %47 to i32*
  %49 = tail call noalias i8* @malloc(i64 262144) #5
  %50 = bitcast i8* %49 to i32*
  %51 = icmp ne i8* %47, null
  %52 = icmp ne i8* %49, null
  %53 = and i1 %51, %52
  br i1 %53, label %54, label %759

54:                                               ; preds = %46
  %55 = bitcast %"class.courgette::PagedArray_iterator"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %55)
  %56 = bitcast %"class.courgette::PagedArray_iterator"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %56)
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %47, i8 0, i64 1024, i1 false) #5
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %49, i8 0, i64 262144, i1 false) #5
  %57 = add nsw i32 %3, -1
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %0, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i32
  %62 = getelementptr inbounds %"class.courgette::PagedArray", %"class.courgette::PagedArray"* %1, i64 0, i32 0
  br label %63

63:                                               ; preds = %124, %54
  %64 = phi i32 [ %57, %54 ], [ %128, %124 ]
  %65 = phi i32 [ %3, %54 ], [ %126, %124 ]
  %66 = phi i32 [ %61, %54 ], [ %125, %124 ]
  %67 = sext i32 %64 to i64
  br label %68

68:                                               ; preds = %77, %63
  %69 = phi i64 [ %67, %63 ], [ %75, %77 ]
  %70 = phi i32 [ %66, %63 ], [ %80, %77 ]
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i32, i32* %48, i64 %71
  %73 = load i32, i32* %72, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %72, align 4
  %75 = add nsw i64 %69, -1
  %76 = icmp sgt i64 %69, 0
  br i1 %76, label %77, label %124

77:                                               ; preds = %68
  %78 = getelementptr inbounds i8, i8* %0, i64 %75
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = icmp sgt i32 %70, %80
  br i1 %81, label %82, label %68

82:                                               ; preds = %77
  %83 = zext i8 %79 to i32
  %84 = trunc i64 %69 to i32
  %85 = trunc i64 %75 to i32
  %86 = shl nuw nsw i32 %83, 8
  %87 = or i32 %86, %70
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i32, i32* %50, i64 %88
  %90 = load i32, i32* %89, align 4
  %91 = add nsw i32 %90, 1
  store i32 %91, i32* %89, align 4
  %92 = add nsw i32 %65, -1
  %93 = sext i32 %92 to i64
  %94 = add i64 %93, %2
  %95 = lshr i64 %94, 18
  %96 = and i64 %94, 262143
  %97 = load i32**, i32*** %62, align 8
  %98 = getelementptr inbounds i32*, i32** %97, i64 %95
  %99 = load i32*, i32** %98, align 8
  %100 = getelementptr inbounds i32, i32* %99, i64 %96
  store i32 %85, i32* %100, align 4
  %101 = add i32 %84, -2
  %102 = icmp sgt i32 %101, -1
  br i1 %102, label %103, label %130

103:                                              ; preds = %82
  %104 = sext i32 %101 to i64
  br label %105

105:                                              ; preds = %112, %103
  %106 = phi i64 [ %104, %103 ], [ %119, %112 ]
  %107 = phi i32 [ %83, %103 ], [ %110, %112 ]
  %108 = getelementptr inbounds i8, i8* %0, i64 %106
  %109 = load i8, i8* %108, align 1
  %110 = zext i8 %109 to i32
  %111 = icmp ult i32 %107, %110
  br i1 %111, label %121, label %112

112:                                              ; preds = %105
  %113 = shl nuw nsw i32 %107, 8
  %114 = or i32 %113, %110
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds i32, i32* %50, i64 %115
  %117 = load i32, i32* %116, align 4
  %118 = add nsw i32 %117, 1
  store i32 %118, i32* %116, align 4
  %119 = add nsw i64 %106, -1
  %120 = icmp sgt i64 %106, 0
  br i1 %120, label %105, label %121

121:                                              ; preds = %112, %105
  %122 = phi i64 [ %119, %112 ], [ %106, %105 ]
  %123 = zext i8 %109 to i32
  br label %124

124:                                              ; preds = %68, %121
  %125 = phi i32 [ %123, %121 ], [ %70, %68 ]
  %126 = phi i32 [ %92, %121 ], [ %65, %68 ]
  %127 = phi i64 [ %122, %121 ], [ %75, %68 ]
  %128 = trunc i64 %127 to i32
  %129 = icmp sgt i32 %128, -1
  br i1 %129, label %63, label %130

130:                                              ; preds = %124, %82
  %131 = phi i32 [ %92, %82 ], [ %126, %124 ]
  br label %136

132:                                              ; preds = %176, %183, %136
  %133 = phi i32 [ %139, %136 ], [ %177, %176 ], [ %203, %183 ]
  %134 = phi i32 [ %152, %136 ], [ %178, %176 ], [ %209, %183 ]
  %135 = icmp eq i64 %153, 256
  br i1 %135, label %212, label %136

136:                                              ; preds = %132, %130
  %137 = phi i64 [ 0, %130 ], [ %153, %132 ]
  %138 = phi i32 [ 0, %130 ], [ %134, %132 ]
  %139 = phi i32 [ 0, %130 ], [ %133, %132 ]
  %140 = phi i32 [ 0, %130 ], [ %154, %132 ]
  %141 = trunc i64 %137 to i32
  %142 = getelementptr inbounds i32, i32* %48, i64 %137
  %143 = load i32, i32* %142, align 4
  %144 = add nsw i32 %143, %138
  %145 = add nsw i32 %139, %138
  store i32 %145, i32* %142, align 4
  %146 = shl i32 %140, 8
  %147 = trunc i64 %137 to i32
  %148 = or i32 %146, %147
  %149 = sext i32 %148 to i64
  %150 = getelementptr inbounds i32, i32* %50, i64 %149
  %151 = load i32, i32* %150, align 4
  %152 = add nsw i32 %144, %151
  %153 = add nuw nsw i64 %137, 1
  %154 = add nuw nsw i32 %140, 1
  %155 = icmp ult i64 %153, 256
  br i1 %155, label %156, label %132

156:                                              ; preds = %136
  %157 = trunc i64 %137 to i32
  %158 = sub i32 1, %157
  %159 = trunc i64 %153 to i32
  %160 = shl i32 %147, 8
  %161 = and i32 %158, 1
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %176, label %163

163:                                              ; preds = %156
  %164 = or i32 %160, %159
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds i32, i32* %50, i64 %165
  %167 = load i32, i32* %166, align 4
  %168 = add nsw i32 %167, %139
  store i32 %168, i32* %166, align 4
  %169 = shl i32 %159, 8
  %170 = or i32 %169, %147
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds i32, i32* %50, i64 %171
  %173 = load i32, i32* %172, align 4
  %174 = add nsw i32 %173, %152
  %175 = add nuw nsw i32 %159, 1
  br label %176

176:                                              ; preds = %163, %156
  %177 = phi i32 [ %168, %163 ], [ undef, %156 ]
  %178 = phi i32 [ %174, %163 ], [ undef, %156 ]
  %179 = phi i32 [ %174, %163 ], [ %152, %156 ]
  %180 = phi i32 [ %168, %163 ], [ %139, %156 ]
  %181 = phi i32 [ %175, %163 ], [ %159, %156 ]
  %182 = icmp eq i32 %141, 254
  br i1 %182, label %132, label %183

183:                                              ; preds = %176, %183
  %184 = phi i32 [ %209, %183 ], [ %179, %176 ]
  %185 = phi i32 [ %203, %183 ], [ %180, %176 ]
  %186 = phi i32 [ %210, %183 ], [ %181, %176 ]
  %187 = or i32 %186, %160
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i32, i32* %50, i64 %188
  %190 = load i32, i32* %189, align 4
  %191 = add nsw i32 %190, %185
  store i32 %191, i32* %189, align 4
  %192 = shl i32 %186, 8
  %193 = or i32 %192, %147
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds i32, i32* %50, i64 %194
  %196 = load i32, i32* %195, align 4
  %197 = add nsw i32 %196, %184
  %198 = add nuw nsw i32 %186, 1
  %199 = or i32 %198, %160
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds i32, i32* %50, i64 %200
  %202 = load i32, i32* %201, align 4
  %203 = add nsw i32 %202, %191
  store i32 %203, i32* %201, align 4
  %204 = shl i32 %198, 8
  %205 = or i32 %204, %147
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds i32, i32* %50, i64 %206
  %208 = load i32, i32* %207, align 4
  %209 = add nsw i32 %208, %197
  %210 = add nuw nsw i32 %186, 2
  %211 = icmp eq i32 %210, 256
  br i1 %211, label %132, label %183

212:                                              ; preds = %132
  %213 = sub nsw i32 %3, %131
  %214 = icmp sgt i32 %213, 0
  br i1 %214, label %218, label %215

215:                                              ; preds = %212
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %55)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %56)
  %216 = sext i32 %3 to i64
  %217 = add i64 %216, %2
  br label %678

218:                                              ; preds = %212
  %219 = sext i32 %3 to i64
  %220 = add i64 %219, %2
  %221 = sext i32 %213 to i64
  %222 = sub i64 %220, %221
  %223 = add i64 %221, %2
  %224 = icmp eq i32 %213, 1
  br i1 %224, label %263, label %225

225:                                              ; preds = %218
  %226 = add i32 %3, -2
  %227 = sub i32 %226, %131
  %228 = sext i32 %227 to i64
  br label %229

229:                                              ; preds = %229, %225
  %230 = phi i64 [ %228, %225 ], [ %261, %229 ]
  %231 = add i64 %230, %222
  %232 = lshr i64 %231, 18
  %233 = and i64 %231, 262143
  %234 = load i32**, i32*** %62, align 8
  %235 = getelementptr inbounds i32*, i32** %234, i64 %232
  %236 = load i32*, i32** %235, align 8
  %237 = getelementptr inbounds i32, i32* %236, i64 %233
  %238 = load i32, i32* %237, align 4
  %239 = sext i32 %238 to i64
  %240 = getelementptr inbounds i8, i8* %0, i64 %239
  %241 = load i8, i8* %240, align 1
  %242 = zext i8 %241 to i64
  %243 = add nsw i32 %238, 1
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds i8, i8* %0, i64 %244
  %246 = load i8, i8* %245, align 1
  %247 = zext i8 %246 to i64
  %248 = shl nuw nsw i64 %242, 8
  %249 = or i64 %248, %247
  %250 = getelementptr inbounds i32, i32* %50, i64 %249
  %251 = load i32, i32* %250, align 4
  %252 = add nsw i32 %251, -1
  store i32 %252, i32* %250, align 4
  %253 = sext i32 %252 to i64
  %254 = add i64 %253, %2
  %255 = lshr i64 %254, 18
  %256 = and i64 %254, 262143
  %257 = getelementptr inbounds i32*, i32** %234, i64 %255
  %258 = load i32*, i32** %257, align 8
  %259 = getelementptr inbounds i32, i32* %258, i64 %256
  %260 = trunc i64 %230 to i32
  store i32 %260, i32* %259, align 4
  %261 = add nsw i64 %230, -1
  %262 = icmp sgt i64 %230, 0
  br i1 %262, label %229, label %263

263:                                              ; preds = %229, %218
  %264 = add nsw i32 %213, -1
  %265 = sext i32 %264 to i64
  %266 = add i64 %222, %265
  %267 = lshr i64 %266, 18
  %268 = and i64 %266, 262143
  %269 = load i32**, i32*** %62, align 8
  %270 = getelementptr inbounds i32*, i32** %269, i64 %267
  %271 = load i32*, i32** %270, align 8
  %272 = getelementptr inbounds i32, i32* %271, i64 %268
  %273 = load i32, i32* %272, align 4
  %274 = sext i32 %273 to i64
  %275 = getelementptr inbounds i8, i8* %0, i64 %274
  %276 = load i8, i8* %275, align 1
  %277 = zext i8 %276 to i64
  %278 = add nsw i32 %273, 1
  %279 = sext i32 %278 to i64
  %280 = getelementptr inbounds i8, i8* %0, i64 %279
  %281 = load i8, i8* %280, align 1
  %282 = zext i8 %281 to i64
  %283 = shl nuw nsw i64 %277, 8
  %284 = or i64 %283, %282
  %285 = getelementptr inbounds i32, i32* %50, i64 %284
  %286 = load i32, i32* %285, align 4
  %287 = add nsw i32 %286, -1
  store i32 %287, i32* %285, align 4
  %288 = sext i32 %287 to i64
  %289 = add i64 %288, %2
  %290 = lshr i64 %289, 18
  %291 = and i64 %289, 262143
  %292 = getelementptr inbounds i32*, i32** %269, i64 %290
  %293 = load i32*, i32** %292, align 8
  %294 = getelementptr inbounds i32, i32* %293, i64 %291
  store i32 %264, i32* %294, align 4
  %295 = shl nsw i32 %213, 1
  %296 = sub nsw i32 %3, %295
  %297 = getelementptr inbounds %"class.courgette::PagedArray_iterator", %"class.courgette::PagedArray_iterator"* %5, i64 0, i32 0
  %298 = getelementptr inbounds %"class.courgette::PagedArray_iterator", %"class.courgette::PagedArray_iterator"* %5, i64 0, i32 1
  %299 = getelementptr inbounds %"class.courgette::PagedArray_iterator", %"class.courgette::PagedArray_iterator"* %6, i64 0, i32 0
  %300 = getelementptr inbounds %"class.courgette::PagedArray_iterator", %"class.courgette::PagedArray_iterator"* %6, i64 0, i32 1
  br label %301

301:                                              ; preds = %333, %263
  %302 = phi i32 [ %213, %263 ], [ %334, %333 ]
  %303 = phi i32 [ 254, %263 ], [ %335, %333 ]
  %304 = icmp slt i32 %303, 255
  br i1 %304, label %305, label %333

305:                                              ; preds = %301
  %306 = shl i32 %303, 8
  br label %307

307:                                              ; preds = %330, %305
  %308 = phi i32 [ %302, %305 ], [ %313, %330 ]
  %309 = phi i32 [ 255, %305 ], [ %331, %330 ]
  %310 = or i32 %309, %306
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds i32, i32* %50, i64 %311
  %313 = load i32, i32* %312, align 4
  %314 = sub nsw i32 %308, %313
  %315 = icmp sgt i32 %314, 1
  br i1 %315, label %316, label %330

316:                                              ; preds = %307
  %317 = sext i32 %313 to i64
  %318 = add i64 %317, %2
  %319 = sext i32 %308 to i64
  %320 = add i64 %319, %2
  store %"class.courgette::PagedArray"* %1, %"class.courgette::PagedArray"** %297, align 8
  store i64 %320, i64* %298, align 8
  store %"class.courgette::PagedArray"* %1, %"class.courgette::PagedArray"** %299, align 8
  store i64 %223, i64* %300, align 8
  %321 = lshr i64 %318, 18
  %322 = and i64 %318, 262143
  %323 = load i32**, i32*** %62, align 8
  %324 = getelementptr inbounds i32*, i32** %323, i64 %321
  %325 = load i32*, i32** %324, align 8
  %326 = getelementptr inbounds i32, i32* %325, i64 %322
  %327 = load i32, i32* %326, align 4
  %328 = icmp eq i32 %327, %264
  %329 = zext i1 %328 to i32
  tail call void @_ZN6divsuf6sssortEPKhN9courgette19PagedArray_iteratorIKNS2_10PagedArrayIiLi18EEEKiEENS3_IS5_iEES9_S9_iiii(i8* nonnull %0, %"class.courgette::PagedArray"* %1, i64 %222, %"class.courgette::PagedArray"* %1, i64 %318, %"class.courgette::PagedArray_iterator"* nonnull byval(%"class.courgette::PagedArray_iterator") align 8 %5, %"class.courgette::PagedArray_iterator"* nonnull byval(%"class.courgette::PagedArray_iterator") align 8 %6, i32 %296, i32 2, i32 %3, i32 %329) #5
  br label %330

330:                                              ; preds = %316, %307
  %331 = add nsw i32 %309, -1
  %332 = icmp slt i32 %303, %331
  br i1 %332, label %307, label %333

333:                                              ; preds = %330, %301
  %334 = phi i32 [ %302, %301 ], [ %313, %330 ]
  %335 = add nsw i32 %303, -1
  %336 = icmp sgt i32 %334, 0
  br i1 %336, label %301, label %337

337:                                              ; preds = %333, %427
  %338 = phi i32 [ %436, %427 ], [ %264, %333 ]
  %339 = sext i32 %338 to i64
  %340 = add i64 %339, %2
  %341 = lshr i64 %340, 18
  %342 = and i64 %340, 262143
  %343 = load i32**, i32*** %62, align 8
  %344 = getelementptr inbounds i32*, i32** %343, i64 %341
  %345 = load i32*, i32** %344, align 8
  %346 = getelementptr inbounds i32, i32* %345, i64 %342
  %347 = load i32, i32* %346, align 4
  %348 = icmp sgt i32 %347, -1
  br i1 %348, label %349, label %394

349:                                              ; preds = %337, %371
  %350 = phi i32** [ %375, %371 ], [ %343, %337 ]
  %351 = phi i64 [ %367, %371 ], [ %339, %337 ]
  %352 = add i64 %351, %2
  %353 = lshr i64 %352, 18
  %354 = and i64 %352, 262143
  %355 = getelementptr inbounds i32*, i32** %350, i64 %353
  %356 = load i32*, i32** %355, align 8
  %357 = getelementptr inbounds i32, i32* %356, i64 %354
  %358 = load i32, i32* %357, align 4
  %359 = sext i32 %358 to i64
  %360 = add i64 %223, %359
  %361 = lshr i64 %360, 18
  %362 = and i64 %360, 262143
  %363 = getelementptr inbounds i32*, i32** %350, i64 %361
  %364 = load i32*, i32** %363, align 8
  %365 = getelementptr inbounds i32, i32* %364, i64 %362
  %366 = trunc i64 %351 to i32
  store i32 %366, i32* %365, align 4
  %367 = add nsw i64 %351, -1
  %368 = icmp sgt i64 %351, 0
  br i1 %368, label %371, label %369

369:                                              ; preds = %349
  %370 = load i32**, i32*** %62, align 8
  br label %381

371:                                              ; preds = %349
  %372 = add i64 %367, %2
  %373 = lshr i64 %372, 18
  %374 = and i64 %372, 262143
  %375 = load i32**, i32*** %62, align 8
  %376 = getelementptr inbounds i32*, i32** %375, i64 %373
  %377 = load i32*, i32** %376, align 8
  %378 = getelementptr inbounds i32, i32* %377, i64 %374
  %379 = load i32, i32* %378, align 4
  %380 = icmp sgt i32 %379, -1
  br i1 %380, label %349, label %381

381:                                              ; preds = %371, %369
  %382 = phi i32** [ %370, %369 ], [ %375, %371 ]
  %383 = trunc i64 %351 to i32
  %384 = trunc i64 %367 to i32
  %385 = sub nsw i32 %384, %338
  %386 = getelementptr inbounds i32*, i32** %382, i64 %353
  %387 = load i32*, i32** %386, align 8
  %388 = getelementptr inbounds i32, i32* %387, i64 %354
  store i32 %385, i32* %388, align 4
  %389 = icmp slt i32 %383, 2
  br i1 %389, label %438, label %390

390:                                              ; preds = %381
  %391 = load i32**, i32*** %62, align 8
  %392 = shl i64 %367, 32
  %393 = ashr exact i64 %392, 32
  br label %394

394:                                              ; preds = %390, %337
  %395 = phi i64 [ %393, %390 ], [ %339, %337 ]
  %396 = phi i32** [ %391, %390 ], [ %343, %337 ]
  %397 = phi i32 [ %384, %390 ], [ %338, %337 ]
  br label %398

398:                                              ; preds = %398, %394
  %399 = phi i32** [ %421, %398 ], [ %396, %394 ]
  %400 = phi i64 [ %417, %398 ], [ %395, %394 ]
  %401 = add i64 %400, %2
  %402 = lshr i64 %401, 18
  %403 = and i64 %401, 262143
  %404 = getelementptr inbounds i32*, i32** %399, i64 %402
  %405 = load i32*, i32** %404, align 8
  %406 = getelementptr inbounds i32, i32* %405, i64 %403
  %407 = load i32, i32* %406, align 4
  %408 = xor i32 %407, -1
  store i32 %408, i32* %406, align 4
  %409 = sext i32 %408 to i64
  %410 = add i64 %223, %409
  %411 = lshr i64 %410, 18
  %412 = and i64 %410, 262143
  %413 = load i32**, i32*** %62, align 8
  %414 = getelementptr inbounds i32*, i32** %413, i64 %411
  %415 = load i32*, i32** %414, align 8
  %416 = getelementptr inbounds i32, i32* %415, i64 %412
  store i32 %397, i32* %416, align 4
  %417 = add i64 %400, -1
  %418 = add i64 %417, %2
  %419 = lshr i64 %418, 18
  %420 = and i64 %418, 262143
  %421 = load i32**, i32*** %62, align 8
  %422 = getelementptr inbounds i32*, i32** %421, i64 %419
  %423 = load i32*, i32** %422, align 8
  %424 = getelementptr inbounds i32, i32* %423, i64 %420
  %425 = load i32, i32* %424, align 4
  %426 = icmp slt i32 %425, 0
  br i1 %426, label %398, label %427

427:                                              ; preds = %398
  %428 = trunc i64 %400 to i32
  %429 = sext i32 %425 to i64
  %430 = add i64 %223, %429
  %431 = lshr i64 %430, 18
  %432 = and i64 %430, 262143
  %433 = getelementptr inbounds i32*, i32** %421, i64 %431
  %434 = load i32*, i32** %433, align 8
  %435 = getelementptr inbounds i32, i32* %434, i64 %432
  store i32 %397, i32* %435, align 4
  %436 = add nsw i32 %428, -2
  %437 = icmp sgt i32 %436, -1
  br i1 %437, label %337, label %438

438:                                              ; preds = %381, %427
  tail call void @_ZN6divsuf6trsortEN9courgette19PagedArray_iteratorINS0_10PagedArrayIiLi18EEEiEES4_ii(%"class.courgette::PagedArray"* %1, i64 %223, %"class.courgette::PagedArray"* %1, i64 %2, i32 %213, i32 1) #5
  %439 = load i8, i8* %59, align 1
  %440 = zext i8 %439 to i32
  br label %441

441:                                              ; preds = %508, %438
  %442 = phi i32 [ %511, %508 ], [ %57, %438 ]
  %443 = phi i32 [ %510, %508 ], [ %213, %438 ]
  %444 = phi i32 [ %509, %508 ], [ %440, %438 ]
  %445 = sext i32 %442 to i64
  br label %446

446:                                              ; preds = %451, %441
  %447 = phi i64 [ %445, %441 ], [ %449, %451 ]
  %448 = phi i32 [ %444, %441 ], [ %454, %451 ]
  %449 = add nsw i64 %447, -1
  %450 = icmp sgt i64 %447, 0
  br i1 %450, label %451, label %506

451:                                              ; preds = %446
  %452 = getelementptr inbounds i8, i8* %0, i64 %449
  %453 = load i8, i8* %452, align 1
  %454 = zext i8 %453 to i32
  %455 = icmp sgt i32 %448, %454
  br i1 %455, label %456, label %446

456:                                              ; preds = %451
  %457 = zext i8 %453 to i32
  %458 = trunc i64 %447 to i32
  %459 = trunc i64 %449 to i32
  %460 = add i32 %458, -2
  %461 = icmp sgt i32 %460, -1
  br i1 %461, label %462, label %480

462:                                              ; preds = %456
  %463 = sext i32 %460 to i64
  br label %464

464:                                              ; preds = %471, %462
  %465 = phi i64 [ %463, %462 ], [ %472, %471 ]
  %466 = phi i32 [ %457, %462 ], [ %469, %471 ]
  %467 = getelementptr inbounds i8, i8* %0, i64 %465
  %468 = load i8, i8* %467, align 1
  %469 = zext i8 %468 to i32
  %470 = icmp ult i32 %466, %469
  br i1 %470, label %474, label %471

471:                                              ; preds = %464
  %472 = add nsw i64 %465, -1
  %473 = icmp sgt i64 %465, 0
  br i1 %473, label %464, label %477

474:                                              ; preds = %464
  %475 = zext i8 %468 to i32
  %476 = trunc i64 %465 to i32
  br label %480

477:                                              ; preds = %471
  %478 = zext i8 %468 to i32
  %479 = trunc i64 %472 to i32
  br label %480

480:                                              ; preds = %477, %474, %456
  %481 = phi i32 [ %476, %474 ], [ %479, %477 ], [ %460, %456 ]
  %482 = phi i32 [ %475, %474 ], [ %478, %477 ], [ %457, %456 ]
  %483 = icmp eq i32 %459, 0
  %484 = sub nsw i32 %459, %481
  %485 = icmp sgt i32 %484, 1
  %486 = or i1 %483, %485
  %487 = sub i32 0, %458
  %488 = select i1 %486, i32 %459, i32 %487
  %489 = add nsw i32 %443, -1
  %490 = sext i32 %489 to i64
  %491 = add i64 %223, %490
  %492 = lshr i64 %491, 18
  %493 = and i64 %491, 262143
  %494 = load i32**, i32*** %62, align 8
  %495 = getelementptr inbounds i32*, i32** %494, i64 %492
  %496 = load i32*, i32** %495, align 8
  %497 = getelementptr inbounds i32, i32* %496, i64 %493
  %498 = load i32, i32* %497, align 4
  %499 = sext i32 %498 to i64
  %500 = add i64 %499, %2
  %501 = lshr i64 %500, 18
  %502 = and i64 %500, 262143
  %503 = getelementptr inbounds i32*, i32** %494, i64 %501
  %504 = load i32*, i32** %503, align 8
  %505 = getelementptr inbounds i32, i32* %504, i64 %502
  store i32 %488, i32* %505, align 4
  br label %508

506:                                              ; preds = %446
  %507 = trunc i64 %449 to i32
  br label %508

508:                                              ; preds = %506, %480
  %509 = phi i32 [ %482, %480 ], [ %448, %506 ]
  %510 = phi i32 [ %489, %480 ], [ %443, %506 ]
  %511 = phi i32 [ %481, %480 ], [ %507, %506 ]
  %512 = icmp sgt i32 %511, -1
  br i1 %512, label %441, label %513

513:                                              ; preds = %508
  %514 = getelementptr inbounds i8, i8* %49, i64 262140
  %515 = bitcast i8* %514 to i32*
  store i32 %3, i32* %515, align 4
  br label %516

516:                                              ; preds = %574, %513
  %517 = phi i64 [ 254, %513 ], [ %586, %574 ]
  %518 = phi i32 [ %264, %513 ], [ %569, %574 ]
  %519 = phi i32 [ 254, %513 ], [ %587, %574 ]
  %520 = add nuw nsw i64 %517, 1
  %521 = getelementptr inbounds i32, i32* %48, i64 %520
  %522 = load i32, i32* %521, align 4
  %523 = add nsw i32 %522, -1
  %524 = trunc i64 %517 to i32
  %525 = shl i32 %524, 8
  br label %526

526:                                              ; preds = %568, %516
  %527 = phi i32 [ %523, %516 ], [ %570, %568 ]
  %528 = phi i32 [ %518, %516 ], [ %569, %568 ]
  %529 = phi i32 [ 255, %516 ], [ %571, %568 ]
  %530 = shl i32 %529, 8
  %531 = or i32 %530, %524
  %532 = sext i32 %531 to i64
  %533 = getelementptr inbounds i32, i32* %50, i64 %532
  %534 = load i32, i32* %533, align 4
  %535 = sub i32 %527, %534
  store i32 %527, i32* %533, align 4
  %536 = or i32 %529, %525
  %537 = sext i32 %536 to i64
  %538 = getelementptr inbounds i32, i32* %50, i64 %537
  %539 = load i32, i32* %538, align 4
  %540 = icmp sgt i32 %539, %528
  br i1 %540, label %568, label %541

541:                                              ; preds = %526
  %542 = sext i32 %535 to i64
  %543 = sext i32 %528 to i64
  %544 = sext i32 %539 to i64
  br label %545

545:                                              ; preds = %545, %541
  %546 = phi i64 [ %543, %541 ], [ %563, %545 ]
  %547 = phi i64 [ %542, %541 ], [ %562, %545 ]
  %548 = add i64 %546, %2
  %549 = lshr i64 %548, 18
  %550 = and i64 %548, 262143
  %551 = load i32**, i32*** %62, align 8
  %552 = getelementptr inbounds i32*, i32** %551, i64 %549
  %553 = load i32*, i32** %552, align 8
  %554 = getelementptr inbounds i32, i32* %553, i64 %550
  %555 = load i32, i32* %554, align 4
  %556 = add i64 %547, %2
  %557 = lshr i64 %556, 18
  %558 = and i64 %556, 262143
  %559 = getelementptr inbounds i32*, i32** %551, i64 %557
  %560 = load i32*, i32** %559, align 8
  %561 = getelementptr inbounds i32, i32* %560, i64 %558
  store i32 %555, i32* %561, align 4
  %562 = add nsw i64 %547, -1
  %563 = add nsw i64 %546, -1
  %564 = icmp sgt i64 %546, %544
  br i1 %564, label %545, label %565

565:                                              ; preds = %545
  %566 = trunc i64 %563 to i32
  %567 = trunc i64 %562 to i32
  br label %568

568:                                              ; preds = %565, %526
  %569 = phi i32 [ %528, %526 ], [ %566, %565 ]
  %570 = phi i32 [ %535, %526 ], [ %567, %565 ]
  %571 = add nsw i32 %529, -1
  %572 = zext i32 %571 to i64
  %573 = icmp ult i64 %517, %572
  br i1 %573, label %526, label %574

574:                                              ; preds = %568
  %575 = add nuw nsw i32 %519, 1
  %576 = shl i32 %519, 8
  %577 = or i32 %576, %524
  %578 = sext i32 %577 to i64
  %579 = getelementptr inbounds i32, i32* %50, i64 %578
  %580 = load i32, i32* %579, align 4
  %581 = add i32 %570, 1
  %582 = sub i32 %581, %580
  %583 = or i32 %575, %525
  %584 = sext i32 %583 to i64
  %585 = getelementptr inbounds i32, i32* %50, i64 %584
  store i32 %582, i32* %585, align 4
  store i32 %570, i32* %579, align 4
  %586 = add nsw i64 %517, -1
  %587 = add nsw i32 %519, -1
  %588 = icmp eq i64 %517, 0
  br i1 %588, label %589, label %516

589:                                              ; preds = %574
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %55)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %56)
  %590 = add i64 %2, -1
  br label %591

591:                                              ; preds = %674, %589
  %592 = phi i64 [ 254, %589 ], [ %675, %674 ]
  %593 = phi i32 [ 254, %589 ], [ %676, %674 ]
  %594 = add nuw nsw i64 %592, 1
  %595 = add nuw nsw i32 %593, 1
  %596 = trunc i64 %592 to i32
  %597 = shl i32 %596, 8
  %598 = or i32 %597, %595
  %599 = sext i32 %598 to i64
  %600 = getelementptr inbounds i32, i32* %50, i64 %599
  %601 = load i32, i32* %600, align 4
  %602 = sext i32 %601 to i64
  %603 = add i64 %602, %2
  %604 = getelementptr inbounds i32, i32* %48, i64 %594
  %605 = load i32, i32* %604, align 4
  %606 = sext i32 %605 to i64
  %607 = add i64 %590, %606
  %608 = icmp ugt i64 %603, %607
  br i1 %608, label %674, label %609

609:                                              ; preds = %591, %668
  %610 = phi i64 [ %672, %668 ], [ %607, %591 ]
  %611 = phi i32 [ %671, %668 ], [ -1, %591 ]
  %612 = phi %"class.courgette::PagedArray"* [ %670, %668 ], [ null, %591 ]
  %613 = phi i64 [ %669, %668 ], [ 0, %591 ]
  %614 = lshr i64 %610, 18
  %615 = and i64 %610, 262143
  %616 = load i32**, i32*** %62, align 8
  %617 = getelementptr inbounds i32*, i32** %616, i64 %614
  %618 = load i32*, i32** %617, align 8
  %619 = getelementptr inbounds i32, i32* %618, i64 %615
  %620 = load i32, i32* %619, align 4
  %621 = icmp sgt i32 %620, 0
  %622 = xor i32 %620, -1
  store i32 %622, i32* %619, align 4
  br i1 %621, label %623, label %668

623:                                              ; preds = %609
  %624 = add nsw i32 %620, -1
  %625 = sext i32 %624 to i64
  %626 = getelementptr inbounds i8, i8* %0, i64 %625
  %627 = load i8, i8* %626, align 1
  %628 = zext i8 %627 to i32
  %629 = icmp sgt i32 %624, 0
  br i1 %629, label %630, label %638

630:                                              ; preds = %623
  %631 = add nsw i32 %620, -2
  %632 = sext i32 %631 to i64
  %633 = getelementptr inbounds i8, i8* %0, i64 %632
  %634 = load i8, i8* %633, align 1
  %635 = icmp ugt i8 %634, %627
  %636 = sub nsw i32 0, %620
  %637 = select i1 %635, i32 %636, i32 %624
  br label %638

638:                                              ; preds = %630, %623
  %639 = phi i32 [ 0, %623 ], [ %637, %630 ]
  %640 = icmp eq i32 %611, %628
  br i1 %640, label %656, label %641

641:                                              ; preds = %638
  %642 = icmp sgt i32 %611, -1
  br i1 %642, label %643, label %649

643:                                              ; preds = %641
  %644 = sub i64 %613, %2
  %645 = trunc i64 %644 to i32
  %646 = or i32 %611, %597
  %647 = sext i32 %646 to i64
  %648 = getelementptr inbounds i32, i32* %50, i64 %647
  store i32 %645, i32* %648, align 4
  br label %649

649:                                              ; preds = %643, %641
  %650 = or i32 %597, %628
  %651 = sext i32 %650 to i64
  %652 = getelementptr inbounds i32, i32* %50, i64 %651
  %653 = load i32, i32* %652, align 4
  %654 = sext i32 %653 to i64
  %655 = add i64 %654, %2
  br label %656

656:                                              ; preds = %649, %638
  %657 = phi i64 [ %613, %638 ], [ %655, %649 ]
  %658 = phi %"class.courgette::PagedArray"* [ %612, %638 ], [ %1, %649 ]
  %659 = phi i32 [ %611, %638 ], [ %628, %649 ]
  %660 = add i64 %657, -1
  %661 = lshr i64 %657, 18
  %662 = and i64 %657, 262143
  %663 = getelementptr inbounds %"class.courgette::PagedArray", %"class.courgette::PagedArray"* %658, i64 0, i32 0
  %664 = load i32**, i32*** %663, align 8
  %665 = getelementptr inbounds i32*, i32** %664, i64 %661
  %666 = load i32*, i32** %665, align 8
  %667 = getelementptr inbounds i32, i32* %666, i64 %662
  store i32 %639, i32* %667, align 4
  br label %668

668:                                              ; preds = %656, %609
  %669 = phi i64 [ %660, %656 ], [ %613, %609 ]
  %670 = phi %"class.courgette::PagedArray"* [ %658, %656 ], [ %612, %609 ]
  %671 = phi i32 [ %659, %656 ], [ %611, %609 ]
  %672 = add i64 %610, -1
  %673 = icmp ugt i64 %603, %672
  br i1 %673, label %674, label %609

674:                                              ; preds = %668, %591
  %675 = add nsw i64 %592, -1
  %676 = add nsw i32 %593, -1
  %677 = icmp eq i64 %592, 0
  br i1 %677, label %678, label %591

678:                                              ; preds = %674, %215
  %679 = phi i64 [ %217, %215 ], [ %220, %674 ]
  %680 = load i8, i8* %59, align 1
  %681 = zext i8 %680 to i64
  %682 = getelementptr inbounds i32, i32* %48, i64 %681
  %683 = load i32, i32* %682, align 4
  %684 = sext i32 %683 to i64
  %685 = add i64 %684, %2
  %686 = add nsw i32 %3, -2
  %687 = sext i32 %686 to i64
  %688 = getelementptr inbounds i8, i8* %0, i64 %687
  %689 = load i8, i8* %688, align 1
  %690 = icmp ult i8 %689, %680
  %691 = sub i32 0, %3
  %692 = select i1 %690, i32 %691, i32 %57
  %693 = lshr i64 %685, 18
  %694 = and i64 %685, 262143
  %695 = load i32**, i32*** %62, align 8
  %696 = getelementptr inbounds i32*, i32** %695, i64 %693
  %697 = load i32*, i32** %696, align 8
  %698 = getelementptr inbounds i32, i32* %697, i64 %694
  store i32 %692, i32* %698, align 4
  %699 = icmp ugt i64 %679, %2
  br i1 %699, label %700, label %759

700:                                              ; preds = %678
  %701 = add i64 %685, 1
  %702 = zext i8 %680 to i32
  br label %703

703:                                              ; preds = %754, %700
  %704 = phi i32 [ %702, %700 ], [ %756, %754 ]
  %705 = phi i64 [ %2, %700 ], [ %757, %754 ]
  %706 = phi i64 [ %701, %700 ], [ %755, %754 ]
  %707 = lshr i64 %705, 18
  %708 = and i64 %705, 262143
  %709 = load i32**, i32*** %62, align 8
  %710 = getelementptr inbounds i32*, i32** %709, i64 %707
  %711 = load i32*, i32** %710, align 8
  %712 = getelementptr inbounds i32, i32* %711, i64 %708
  %713 = load i32, i32* %712, align 4
  %714 = icmp sgt i32 %713, 0
  br i1 %714, label %715, label %752

715:                                              ; preds = %703
  %716 = add nsw i32 %713, -1
  %717 = sext i32 %716 to i64
  %718 = getelementptr inbounds i8, i8* %0, i64 %717
  %719 = load i8, i8* %718, align 1
  %720 = zext i8 %719 to i32
  %721 = icmp eq i32 %716, 0
  br i1 %721, label %728, label %722

722:                                              ; preds = %715
  %723 = add nsw i32 %713, -2
  %724 = sext i32 %723 to i64
  %725 = getelementptr inbounds i8, i8* %0, i64 %724
  %726 = load i8, i8* %725, align 1
  %727 = icmp ult i8 %726, %719
  br i1 %727, label %728, label %730

728:                                              ; preds = %722, %715
  %729 = sub nsw i32 0, %713
  br label %730

730:                                              ; preds = %728, %722
  %731 = phi i32 [ %729, %728 ], [ %716, %722 ]
  %732 = icmp eq i32 %704, %720
  br i1 %732, label %743, label %733

733:                                              ; preds = %730
  %734 = sub i64 %706, %2
  %735 = trunc i64 %734 to i32
  %736 = sext i32 %704 to i64
  %737 = getelementptr inbounds i32, i32* %48, i64 %736
  store i32 %735, i32* %737, align 4
  %738 = zext i8 %719 to i64
  %739 = getelementptr inbounds i32, i32* %48, i64 %738
  %740 = load i32, i32* %739, align 4
  %741 = sext i32 %740 to i64
  %742 = add i64 %741, %2
  br label %743

743:                                              ; preds = %733, %730
  %744 = phi i64 [ %706, %730 ], [ %742, %733 ]
  %745 = phi i32 [ %704, %730 ], [ %720, %733 ]
  %746 = add i64 %744, 1
  %747 = lshr i64 %744, 18
  %748 = and i64 %744, 262143
  %749 = getelementptr inbounds i32*, i32** %709, i64 %747
  %750 = load i32*, i32** %749, align 8
  %751 = getelementptr inbounds i32, i32* %750, i64 %748
  store i32 %731, i32* %751, align 4
  br label %754

752:                                              ; preds = %703
  %753 = xor i32 %713, -1
  store i32 %753, i32* %712, align 4
  br label %754

754:                                              ; preds = %752, %743
  %755 = phi i64 [ %746, %743 ], [ %706, %752 ]
  %756 = phi i32 [ %745, %743 ], [ %704, %752 ]
  %757 = add nuw i64 %705, 1
  %758 = icmp eq i64 %757, %679
  br i1 %758, label %759, label %703

759:                                              ; preds = %754, %678, %46
  %760 = phi i32 [ -2, %46 ], [ 0, %678 ], [ 0, %754 ]
  tail call void @free(i8* %49) #5
  tail call void @free(i8* %47) #5
  br label %761

761:                                              ; preds = %14, %4, %8, %759, %23, %15
  %762 = phi i32 [ 0, %15 ], [ 0, %23 ], [ %760, %759 ], [ -1, %8 ], [ -1, %4 ], [ %3, %14 ]
  ret i32 %762
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6divsuf24divsufsort_include_emptyEPKhN9courgette19PagedArray_iteratorINS2_10PagedArrayIiLi18EEEiEEi(i8*, %"class.courgette::PagedArray"*, i64, i32) local_unnamed_addr #0 {
  %5 = lshr i64 %2, 18
  %6 = and i64 %2, 262143
  %7 = getelementptr inbounds %"class.courgette::PagedArray", %"class.courgette::PagedArray"* %1, i64 0, i32 0
  %8 = load i32**, i32*** %7, align 8
  %9 = getelementptr inbounds i32*, i32** %8, i64 %5
  %10 = load i32*, i32** %9, align 8
  %11 = getelementptr inbounds i32, i32* %10, i64 %6
  store i32 %3, i32* %11, align 4
  %12 = add i64 %2, 1
  %13 = tail call i32 @_ZN6divsuf10divsufsortEPKhN9courgette19PagedArray_iteratorINS2_10PagedArrayIiLi18EEEiEEi(i8* %0, %"class.courgette::PagedArray"* %1, i64 %12, i32 %3)
  ret i32 %13
}

declare void @_ZN6divsuf6sssortEPKhN9courgette19PagedArray_iteratorIKNS2_10PagedArrayIiLi18EEEKiEENS3_IS5_iEES9_S9_iiii(i8*, %"class.courgette::PagedArray"*, i64, %"class.courgette::PagedArray"*, i64, %"class.courgette::PagedArray_iterator"* byval(%"class.courgette::PagedArray_iterator") align 8, %"class.courgette::PagedArray_iterator"* byval(%"class.courgette::PagedArray_iterator") align 8, i32, i32, i32, i32) local_unnamed_addr #4

declare void @_ZN6divsuf6trsortEN9courgette19PagedArray_iteratorINS0_10PagedArrayIiLi18EEEiEES4_ii(%"class.courgette::PagedArray"*, i64, %"class.courgette::PagedArray"*, i64, i32, i32) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
