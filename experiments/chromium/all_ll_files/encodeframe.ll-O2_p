; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/encoder/encodeframe.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/encoder/encodeframe.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.block = type { i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16, i8**, i32, i32 }
%struct.blockd = type { i16*, i16*, i8*, i16*, i32, i8*, %union.b_mode_info }
%union.b_mode_info = type { i32 }
%struct.VP8_COMP = type { [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], %struct.macroblock, %struct.VP8Common, [9 x %struct.BOOL_CODER], %struct.VP8_CONFIG, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.TOKENEXTRA*, i32, i32, i32, i32, i32, i32, [20 x i32], [20 x i32], i32, i32, %struct.CODING_CONTEXT, i64, i64, i32, i32, [2 x i32], double, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, [5 x i32], i32, i32, i32, i32, double, i64, i64, i64, i32, i32, i32, i32, i64, i32, double, double, i64, i64, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x [2 x i32]]]]], i32, i32, i32, i32, %struct.vpx_codec_pkt_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], [4 x i32], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i8*, i8*, [2 x [4 x i8]], [4 x i32], i8*, i32, i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_atomic_int*, i32, %struct.vpx_atomic_int, i32, i32, i64*, i64, %struct.MB_ROW_COMP*, %struct.ENCODETHREAD_DATA*, %struct.LPFTHREAD_DATA, %union.sem_t*, %union.sem_t*, %union.sem_t, %union.sem_t, %struct.TOKENLIST*, [9 x i32], [9 x i8*], [9 x i8*], i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)*, [5 x %struct.variance_vtable], i64, i64, i64, i64, [128 x i32], %struct.frame_contexts, %struct.frame_contexts, %struct.frame_contexts, %struct.twopass_rc, i32, i32, i32*, i8*, i32, i32, %union.int_mv*, i32*, i32*, i32, i32, i32, i32, %struct.vp8_denoiser, i32, [5 x %struct.LAYER_CONTEXT], [5 x i64], [5 x i64], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], i32, i8, [4 x i32], i32, %struct.rd_costs_struct, i32, i32, [12 x i8] }
%struct.macroblock = type { [400 x i16], [400 x i16], [256 x i8], i8*, [25 x %struct.block], %struct.yv12_buffer_config, %struct.macroblockd, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, [4 x i32], %struct.search_site*, i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32, i32, [2 x i32*], [2 x i32*], [10 x i32]*, [10 x i32]*, [10 x [10 x i32]]*, i32*, [8 x [3 x [12 x i32]]]*, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.mv_context*, i32, i32, i32, i32, i32, i32, %union.int_mv, i32, i32, i8, i32, [4 x [8 x [3 x [12 x i32]]]], [2 x [2047 x i32]], [5 x i32], [4 x i32], i64, i64, [4 x i32], [20 x i32], [20 x i32], i32, [20 x i32], i32, i32, i32, i32, i32, [1024 x i32], void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (%struct.block*, %struct.blockd*)*, i32, i32, [8 x i8] }
%struct.macroblockd = type { [384 x i8], [400 x i16], [400 x i16], [25 x i8], [7 x i8], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [25 x %struct.blockd], i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.modeinfo*, i32, i32, i32, i32, [3 x i8*], [3 x i8*], [2 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES*, i8, i8, i8, i8, [3 x i8], [2 x [4 x i8]], i8, i8, [4 x i8], [4 x i8], [4 x i8], [4 x i8], i32, i32, i32, i32, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, i8*, i32, %struct.vpx_internal_error_info, [16 x i8], [704 x i8] }
%struct.modeinfo = type { %struct.MB_MODE_INFO, [16 x %union.b_mode_info] }
%struct.MB_MODE_INFO = type { i8, i8, i8, i8, %union.int_mv, i8, i8, i8, i8 }
%struct.ENTROPY_CONTEXT_PLANES = type { [4 x i8], [2 x i8], [2 x i8], i8 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.PARTITION_INFO = type { i32, [16 x %struct.anon] }
%struct.anon = type { i32, %union.int_mv }
%struct.search_site = type { %struct.MV, i32 }
%struct.MV = type { i16, i16 }
%struct.mv_context = type { [19 x i8] }
%union.int_mv = type { i32 }
%struct.VP8Common = type { %struct.vpx_internal_error_info, [8 x i8], [128 x [2 x i16]], [128 x [2 x i16]], [128 x [2 x i16]], i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, [4 x %struct.yv12_buffer_config], [4 x i32], i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.modeinfo*, %struct.modeinfo*, %struct.modeinfo*, i32, [12 x i8], %struct.loop_filter_info_n, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES, %struct.frame_contexts, %struct.frame_contexts, i32, i32, i32, i32, %struct.postproc_state, i32, [12 x i8] }
%struct.loop_filter_info_n = type { [64 x [16 x i8]], [64 x [16 x i8]], [64 x [16 x i8]], [4 x [16 x i8]], [4 x [4 x [4 x i8]]], [2 x [64 x i8]], [10 x i8], [6 x i8] }
%struct.postproc_state = type { i32, i32, i32, i32, i32, i8* }
%struct.BOOL_CODER = type { i32, i32, i32, i32, i8*, i8*, %struct.vpx_internal_error_info* }
%struct.VP8_CONFIG = type { i32, i32, i32, %struct.vpx_rational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, %struct.vpx_codec_pkt_list*, i32, i32, [16 x i32], [16 x i32], i32, [16 x i32], i32, i32, %struct.vpx_rational, i8* }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.vpx_rational = type { i32, i32 }
%struct.lookahead_ctx = type opaque
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TOKENEXTRA = type { i8*, i16, i8, i8 }
%struct.CODING_CONTEXT = type { i32, i32, i32, i32, i32, [4 x i32], [2 x %struct.mv_context], [2 x [2048 x i32]], [4 x i8], [3 x i8], [4 x i8], [3 x i8], [5 x i32], [4 x i32], [4 x i32], i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon }
%union.anon = type { %struct.anon.0, [40 x i8] }
%struct.anon.0 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, [20 x i32], i32, i32, i32, i32, i32, i32 }
%struct.vpx_atomic_int = type { i32 }
%struct.MB_ROW_COMP = type { %struct.macroblock, [4 x i32], i32, [12 x i8] }
%struct.ENCODETHREAD_DATA = type { i32, i8*, i8* }
%struct.LPFTHREAD_DATA = type { i32, i8* }
%union.sem_t = type { i64, [24 x i8] }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA* }
%struct.variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32)* }
%struct.frame_contexts = type { [9 x i8], [4 x i8], [3 x i8], [3 x i8], [4 x [8 x [3 x [11 x i8]]]], [2 x %struct.mv_context] }
%struct.twopass_rc = type { i32, double, i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS, i32, i64, i64, double, double, double, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, double }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%struct.vp8_denoiser = type { [4 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, %struct.yv12_buffer_config, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.denoise_params }
%struct.denoise_params = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { double, i32, i64, i64, i64, i64, i64, i64, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, double, double, i32, i32, i64, i32, i32, i32, i32, [4 x i32], [2 x i32] }
%struct.rd_costs_struct = type { [2 x [2048 x i32]], [2 x [512 x i32]], [2 x [10 x i32]], [2 x [10 x i32]], [10 x [10 x [10 x i32]]], [14 x i32], [4 x [8 x [3 x [12 x i32]]]] }
%struct.vpx_usec_timer = type { %struct.timeval, %struct.timeval }
%struct.timeval = type { i64, i64 }

@vp8_sixtap_predict4x4 = external local_unnamed_addr global void (i8*, i32, i32, i32, i8*, i32)*, align 8
@vp8_sixtap_predict8x4 = external local_unnamed_addr global void (i8*, i32, i32, i32, i8*, i32)*, align 8
@vp8_sixtap_predict8x8 = external local_unnamed_addr global void (i8*, i32, i32, i32, i8*, i32)*, align 8
@vp8_sixtap_predict16x16 = external local_unnamed_addr global void (i8*, i32, i32, i32, i8*, i32)*, align 8
@vp8_bilinear_predict8x8 = external local_unnamed_addr global void (i8*, i32, i32, i32, i8*, i32)*, align 8
@vp8_bilinear_predict16x16 = external local_unnamed_addr global void (i8*, i32, i32, i32, i8*, i32)*, align 8
@vp8_fast_quantize_b = external local_unnamed_addr global void (%struct.block*, %struct.blockd*)*, align 8
@vp8_regular_quantize_b = external local_unnamed_addr global void (%struct.block*, %struct.blockd*)*, align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp8_activity_masking(%struct.VP8_COMP* nocapture readonly, %struct.macroblock* nocapture) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 19
  %4 = load i32*, i32** %3, align 16
  %5 = load i32, i32* %4, align 4
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 188
  %8 = load i32, i32* %7, align 4
  %9 = shl i32 %8, 1
  %10 = zext i32 %9 to i64
  %11 = add nuw nsw i64 %10, %6
  %12 = shl nuw nsw i64 %6, 1
  %13 = zext i32 %8 to i64
  %14 = add nuw nsw i64 %12, %13
  %15 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 18
  %16 = load i32, i32* %15, align 8
  %17 = sext i32 %16 to i64
  %18 = mul nsw i64 %14, %17
  %19 = lshr i64 %11, 1
  %20 = add nsw i64 %19, %18
  %21 = sdiv i64 %20, %11
  %22 = trunc i64 %21 to i32
  store i32 %22, i32* %15, align 8
  %23 = mul nsw i32 %22, 100
  %24 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 17
  %25 = load i32, i32* %24, align 4
  %26 = mul nsw i32 %25, 110
  %27 = sdiv i32 %23, %26
  %28 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 14
  %29 = icmp eq i32 %27, 0
  %30 = zext i1 %29 to i32
  %31 = add nsw i32 %27, %30
  store i32 %31, i32* %28, align 8
  %32 = load i32, i32* %4, align 4
  %33 = zext i32 %32 to i64
  %34 = load i32, i32* %7, align 4
  %35 = shl i32 %34, 2
  %36 = zext i32 %35 to i64
  %37 = add nuw nsw i64 %36, %33
  %38 = shl nuw nsw i64 %33, 2
  %39 = zext i32 %34 to i64
  %40 = add nuw nsw i64 %38, %39
  %41 = icmp ugt i32 %32, %34
  br i1 %41, label %42, label %48

42:                                               ; preds = %2
  %43 = lshr i64 %37, 1
  %44 = add nuw nsw i64 %43, %40
  %45 = udiv i64 %44, %37
  %46 = trunc i64 %45 to i32
  %47 = add nsw i32 %46, -1
  br label %54

48:                                               ; preds = %2
  %49 = lshr i64 %40, 1
  %50 = add nuw nsw i64 %37, %49
  %51 = udiv i64 %50, %40
  %52 = trunc i64 %51 to i32
  %53 = sub nsw i32 1, %52
  br label %54

54:                                               ; preds = %42, %48
  %55 = phi i32 [ %53, %48 ], [ %47, %42 ]
  %56 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 21
  store i32 %55, i32* %56, align 32
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_encode_frame(%struct.VP8_COMP*) local_unnamed_addr #2 {
  %2 = alloca %struct.TOKENEXTRA*, align 8
  %3 = alloca <4 x i32>, align 16
  %4 = alloca i32, align 4
  %5 = alloca %struct.vpx_usec_timer, align 8
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18
  %7 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19
  %8 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6
  %9 = bitcast %struct.TOKENEXTRA** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #7
  %10 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 38
  %11 = bitcast %struct.TOKENEXTRA** %10 to i64*
  %12 = load i64, i64* %11, align 32
  %13 = bitcast %struct.TOKENEXTRA** %2 to i64*
  store i64 %12, i64* %13, align 8
  %14 = bitcast <4 x i32>* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #7
  %15 = getelementptr inbounds <4 x i32>, <4 x i32>* %3, i64 0, i64 0
  %16 = getelementptr inbounds <4 x i32>, <4 x i32>* %3, i64 0, i64 1
  %17 = getelementptr inbounds <4 x i32>, <4 x i32>* %3, i64 0, i64 2
  %18 = getelementptr inbounds <4 x i32>, <4 x i32>* %3, i64 0, i64 3
  %19 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %19) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 0, i64 16, i1 false)
  store i32 0, i32* %4, align 4
  %20 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 114
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 2
  br i1 %22, label %23, label %31

23:                                               ; preds = %1
  %24 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 7
  %25 = load i32, i32* %24, align 8
  %26 = icmp slt i32 %25, 0
  br i1 %26, label %27, label %30

27:                                               ; preds = %23
  %28 = sub nsw i32 0, %25
  %29 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 113
  store i32 %28, i32* %29, align 16
  br label %31

30:                                               ; preds = %23
  tail call void @vp8_auto_select_speed(%struct.VP8_COMP* %0) #7
  br label %31

31:                                               ; preds = %27, %30, %1
  %32 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 32
  %33 = load i32, i32* %32, align 8
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %42

35:                                               ; preds = %31
  %36 = load i64, i64* bitcast (void (i8*, i32, i32, i32, i8*, i32)** @vp8_sixtap_predict4x4 to i64*), align 8
  %37 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 39
  %38 = bitcast void (i8*, i32, i32, i32, i8*, i32)** %37 to i64*
  store i64 %36, i64* %38, align 8
  %39 = load i64, i64* bitcast (void (i8*, i32, i32, i32, i8*, i32)** @vp8_sixtap_predict8x4 to i64*), align 8
  %40 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 40
  %41 = bitcast void (i8*, i32, i32, i32, i8*, i32)** %40 to i64*
  store i64 %39, i64* %41, align 32
  br label %45

42:                                               ; preds = %31
  %43 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 39
  %44 = bitcast void (i8*, i32, i32, i32, i8*, i32)** %43 to <2 x void (i8*, i32, i32, i32, i8*, i32)*>*
  store <2 x void (i8*, i32, i32, i32, i8*, i32)*> <void (i8*, i32, i32, i32, i8*, i32)* @vp8_bilinear_predict4x4_sse2, void (i8*, i32, i32, i32, i8*, i32)* @vp8_bilinear_predict8x4_sse2>, <2 x void (i8*, i32, i32, i32, i8*, i32)*>* %44, align 8
  br label %45

45:                                               ; preds = %42, %35
  %46 = phi i64* [ bitcast (void (i8*, i32, i32, i32, i8*, i32)** @vp8_bilinear_predict8x8 to i64*), %42 ], [ bitcast (void (i8*, i32, i32, i32, i8*, i32)** @vp8_sixtap_predict8x8 to i64*), %35 ]
  %47 = phi i64* [ bitcast (void (i8*, i32, i32, i32, i8*, i32)** @vp8_bilinear_predict16x16 to i64*), %42 ], [ bitcast (void (i8*, i32, i32, i32, i8*, i32)** @vp8_sixtap_predict16x16 to i64*), %35 ]
  %48 = load i64, i64* %46, align 8
  %49 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 41
  %50 = bitcast void (i8*, i32, i32, i32, i8*, i32)** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load i64, i64* %47, align 8
  %52 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 42
  %53 = bitcast void (i8*, i32, i32, i32, i8*, i32)** %52 to i64*
  store i64 %51, i64* %53, align 16
  %54 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 49
  store i32 0, i32* %54, align 8
  %55 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 39
  store i32 0, i32* %55, align 8
  %56 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 41
  %57 = bitcast %struct.modeinfo** %56 to i64*
  %58 = load i64, i64* %57, align 16
  %59 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 13
  %60 = bitcast %struct.modeinfo** %59 to i64*
  store i64 %58, i64* %60, align 32
  %61 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 51
  %62 = bitcast [2 x [2047 x i32]]* %61 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %62, i8 0, i64 16376, i1 false)
  tail call void @vp8cx_frame_init_quantizer(%struct.VP8_COMP* %0) #7
  %63 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 34
  %64 = load i32, i32* %63, align 16
  %65 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 35
  %66 = load i32, i32* %65, align 4
  %67 = tail call i32 @vp8_dc_quant(i32 %64, i32 %66) #7
  tail call void @vp8_initialize_rd_consts(%struct.VP8_COMP* %0, %struct.macroblock* %6, i32 %67) #7
  %68 = load i32, i32* %63, align 16
  tail call void @vp8cx_initialize_me_consts(%struct.VP8_COMP* %0, i32 %68) #7
  %69 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 51
  %70 = load i32, i32* %69, align 8
  %71 = icmp eq i32 %70, 1
  br i1 %71, label %72, label %157

72:                                               ; preds = %45
  tail call fastcc void @init_encode_frame_mb_context(%struct.VP8_COMP* %0)
  %73 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 13
  %74 = load i32, i32* %73, align 16
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %75
  %77 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 27
  %78 = load i32, i32* %77, align 4
  %79 = icmp sgt i32 %78, 0
  br i1 %79, label %80, label %155

80:                                               ; preds = %72
  %81 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %75, i32 4
  %82 = load i32, i32* %81, align 8
  %83 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 16
  %84 = shl i32 %82, 4
  %85 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %86 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %75, i32 13
  %87 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 12, i32 13
  %88 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 17
  %89 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 5, i32 13
  %90 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 5, i32 4
  %91 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 2, i64 0
  %92 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 19
  %93 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 12, i32 14
  %94 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 12, i32 15
  br label %95

95:                                               ; preds = %137, %80
  %96 = phi i32 [ 0, %80 ], [ %154, %137 ]
  %97 = phi i32 [ 0, %80 ], [ %151, %137 ]
  %98 = icmp ne i32 %97, 0
  %99 = zext i1 %98 to i32
  store i32 %99, i32* %83, align 16
  %100 = load i32, i32* %85, align 8
  %101 = icmp sgt i32 %100, 0
  br i1 %101, label %104, label %102

102:                                              ; preds = %95
  %103 = load i8*, i8** %89, align 8
  br label %137

104:                                              ; preds = %95
  %105 = sext i32 %96 to i64
  %106 = icmp eq i32 %97, 0
  %107 = load i8*, i8** %89, align 8
  br label %108

108:                                              ; preds = %124, %104
  %109 = phi i8* [ %107, %104 ], [ %133, %124 ]
  %110 = phi i64 [ %105, %104 ], [ %116, %124 ]
  %111 = phi i32 [ 0, %104 ], [ %134, %124 ]
  %112 = load i8*, i8** %86, align 8
  %113 = getelementptr inbounds i8, i8* %112, i64 %110
  store i8* %113, i8** %87, align 8
  %114 = icmp ne i32 %111, 0
  %115 = zext i1 %114 to i32
  store i32 %115, i32* %88, align 4
  %116 = add nsw i64 %110, 16
  %117 = load i32, i32* %90, align 16
  tail call void @vp8_copy_mem16x16_sse2(i8* %109, i32 %117, i8* %91, i32 16) #7
  %118 = or i32 %111, %97
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %124, label %120

120:                                              ; preds = %108
  %121 = icmp eq i32 %111, 0
  %122 = or i1 %106, %121
  %123 = zext i1 %122 to i32
  br label %124

124:                                              ; preds = %120, %108
  %125 = phi i32 [ 0, %108 ], [ %123, %120 ]
  %126 = tail call i32 @vp8_encode_intra(%struct.VP8_COMP* %0, %struct.macroblock* %6, i32 %125) #7
  %127 = icmp ugt i32 %126, 64
  %128 = select i1 %127, i32 %126, i32 64
  %129 = load i32*, i32** %92, align 16
  store i32 %128, i32* %129, align 4
  %130 = load i32*, i32** %92, align 16
  %131 = getelementptr inbounds i32, i32* %130, i64 1
  store i32* %131, i32** %92, align 16
  %132 = load i8*, i8** %89, align 8
  %133 = getelementptr inbounds i8, i8* %132, i64 16
  store i8* %133, i8** %89, align 8
  %134 = add nuw nsw i32 %111, 1
  %135 = load i32, i32* %85, align 8
  %136 = icmp slt i32 %134, %135
  br i1 %136, label %108, label %137

137:                                              ; preds = %124, %102
  %138 = phi i8* [ %103, %102 ], [ %133, %124 ]
  %139 = phi i32 [ %100, %102 ], [ %135, %124 ]
  %140 = load i32, i32* %90, align 16
  %141 = sub i32 %140, %139
  %142 = shl i32 %141, 4
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds i8, i8* %138, i64 %143
  store i8* %144, i8** %89, align 8
  %145 = load i8*, i8** %87, align 8
  %146 = getelementptr inbounds i8, i8* %145, i64 16
  %147 = load i8*, i8** %93, align 32
  %148 = getelementptr inbounds i8, i8* %147, i64 8
  %149 = load i8*, i8** %94, align 8
  %150 = getelementptr inbounds i8, i8* %149, i64 8
  tail call void @vp8_extend_mb_row(%struct.yv12_buffer_config* %76, i8* %146, i8* %148, i8* %150) #7
  %151 = add nuw nsw i32 %97, 1
  %152 = load i32, i32* %77, align 4
  %153 = icmp slt i32 %151, %152
  %154 = add i32 %96, %84
  br i1 %153, label %95, label %155

155:                                              ; preds = %137, %72
  %156 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 188
  store i32 100000, i32* %156, align 4
  br label %157

157:                                              ; preds = %155, %45
  tail call fastcc void @init_encode_frame_mb_context(%struct.VP8_COMP* %0)
  %158 = bitcast %struct.vpx_usec_timer* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %158) #7
  %159 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %5, i64 0, i32 0, i32 0
  %160 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %5, i64 0, i32 0, i32 1
  %161 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %5, i64 0, i32 1, i32 0
  %162 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %5, i64 0, i32 1, i32 1
  %163 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %5, i64 0, i32 0
  %164 = bitcast %struct.vpx_usec_timer* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %164, i8 -86, i64 32, i1 false)
  %165 = call i32 @gettimeofday(%struct.timeval* nonnull %163, i8* null) #7
  %166 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 157, i32 0
  %167 = load atomic volatile i32, i32* %166 acquire, align 4
  %168 = icmp eq i32 %167, 0
  br i1 %168, label %169, label %181

169:                                              ; preds = %157
  %170 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 27
  %171 = load i32, i32* %170, align 4
  %172 = icmp sgt i32 %171, 0
  br i1 %172, label %173, label %627

173:                                              ; preds = %169
  %174 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 57, i32 0, i64 0
  %175 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 5, i32 4
  %176 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %177 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 5, i32 13
  %178 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 5, i32 9
  %179 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 5, i32 14
  %180 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 5, i32 15
  br label %607

181:                                              ; preds = %157
  %182 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 162
  %183 = load %struct.MB_ROW_COMP*, %struct.MB_ROW_COMP** %182, align 8
  %184 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 158
  %185 = load i32, i32* %184, align 32
  tail call void @vp8cx_init_mbrthread_data(%struct.VP8_COMP* %0, %struct.macroblock* %6, %struct.MB_ROW_COMP* %183, i32 %185) #7
  %186 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 27
  %187 = load i32, i32* %186, align 4
  %188 = icmp sgt i32 %187, 0
  br i1 %188, label %189, label %191

189:                                              ; preds = %181
  %190 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 155
  br label %197

191:                                              ; preds = %197, %181
  %192 = phi i32 [ %187, %181 ], [ %202, %197 ]
  %193 = load i32, i32* %184, align 32
  %194 = icmp sgt i32 %193, 0
  br i1 %194, label %195, label %207

195:                                              ; preds = %191
  %196 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 165
  br label %223

197:                                              ; preds = %189, %197
  %198 = phi i64 [ 0, %189 ], [ %201, %197 ]
  %199 = load %struct.vpx_atomic_int*, %struct.vpx_atomic_int** %190, align 16
  %200 = getelementptr inbounds %struct.vpx_atomic_int, %struct.vpx_atomic_int* %199, i64 %198, i32 0
  store atomic volatile i32 -1, i32* %200 release, align 4
  %201 = add nuw nsw i64 %198, 1
  %202 = load i32, i32* %186, align 4
  %203 = sext i32 %202 to i64
  %204 = icmp slt i64 %201, %203
  br i1 %204, label %197, label %191

205:                                              ; preds = %223
  %206 = load i32, i32* %186, align 4
  br label %207

207:                                              ; preds = %205, %191
  %208 = phi i32 [ %229, %205 ], [ %193, %191 ]
  %209 = phi i32 [ %206, %205 ], [ %192, %191 ]
  %210 = icmp sgt i32 %209, 0
  br i1 %210, label %211, label %232

211:                                              ; preds = %207
  %212 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 57, i32 0, i64 0
  %213 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %214 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 5, i32 4
  %215 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 5, i32 13
  %216 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 5, i32 9
  %217 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 5, i32 14
  %218 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 5, i32 15
  %219 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 14
  %220 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 7
  %221 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 36
  %222 = load i32, i32* %213, align 8
  br label %238

223:                                              ; preds = %195, %223
  %224 = phi i64 [ 0, %195 ], [ %228, %223 ]
  %225 = load %union.sem_t*, %union.sem_t** %196, align 8
  %226 = getelementptr inbounds %union.sem_t, %union.sem_t* %225, i64 %224
  %227 = tail call i32 @sem_post(%union.sem_t* %226) #7
  %228 = add nuw nsw i64 %224, 1
  %229 = load i32, i32* %184, align 32
  %230 = sext i32 %229 to i64
  %231 = icmp slt i64 %228, %230
  br i1 %231, label %223, label %205

232:                                              ; preds = %238, %207
  %233 = phi i32 [ %209, %207 ], [ %279, %238 ]
  %234 = phi i32 [ %208, %207 ], [ %248, %238 ]
  %235 = icmp sgt i32 %234, 0
  br i1 %235, label %236, label %283

236:                                              ; preds = %232
  %237 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 166
  br label %296

238:                                              ; preds = %211, %238
  %239 = phi i32 [ %222, %211 ], [ %251, %238 ]
  %240 = phi i32 [ 0, %211 ], [ %278, %238 ]
  call void @llvm.memset.p0i8.i64(i8* align 16 %212, i8 0, i64 9, i1 false)
  %241 = load %struct.TOKENEXTRA*, %struct.TOKENEXTRA** %10, align 32
  %242 = mul i32 %240, 384
  %243 = mul i32 %242, %239
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds %struct.TOKENEXTRA, %struct.TOKENEXTRA* %241, i64 %244
  store %struct.TOKENEXTRA* %245, %struct.TOKENEXTRA** %2, align 8
  call fastcc void @encode_mb_row(%struct.VP8_COMP* %0, %struct.VP8Common* %7, i32 %240, %struct.macroblock* %6, %struct.macroblockd* %8, %struct.TOKENEXTRA** nonnull %2, i32* nonnull %15, i32* nonnull %4)
  %246 = load i32, i32* %214, align 16
  %247 = shl i32 %246, 4
  %248 = load i32, i32* %184, align 32
  %249 = add nsw i32 %248, 1
  %250 = mul nsw i32 %247, %249
  %251 = load i32, i32* %213, align 8
  %252 = shl nsw i32 %251, 4
  %253 = sub nsw i32 %250, %252
  %254 = load i8*, i8** %215, align 8
  %255 = sext i32 %253 to i64
  %256 = getelementptr inbounds i8, i8* %254, i64 %255
  store i8* %256, i8** %215, align 8
  %257 = load i32, i32* %216, align 4
  %258 = shl i32 %249, 3
  %259 = mul i32 %258, %257
  %260 = shl nsw i32 %251, 3
  %261 = sub nsw i32 %259, %260
  %262 = load i8*, i8** %217, align 32
  %263 = sext i32 %261 to i64
  %264 = getelementptr inbounds i8, i8* %262, i64 %263
  store i8* %264, i8** %217, align 32
  %265 = load i8*, i8** %218, align 8
  %266 = getelementptr inbounds i8, i8* %265, i64 %263
  store i8* %266, i8** %218, align 8
  %267 = load i32, i32* %219, align 8
  %268 = mul nsw i32 %267, %248
  %269 = load %struct.modeinfo*, %struct.modeinfo** %59, align 32
  %270 = sext i32 %268 to i64
  %271 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %269, i64 %270
  store %struct.modeinfo* %271, %struct.modeinfo** %59, align 32
  %272 = load %struct.PARTITION_INFO*, %struct.PARTITION_INFO** %220, align 32
  %273 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %272, i64 %270
  store %struct.PARTITION_INFO* %273, %struct.PARTITION_INFO** %220, align 32
  %274 = mul nsw i32 %251, %248
  %275 = load i8*, i8** %221, align 8
  %276 = sext i32 %274 to i64
  %277 = getelementptr inbounds i8, i8* %275, i64 %276
  store i8* %277, i8** %221, align 8
  %278 = add nsw i32 %249, %240
  %279 = load i32, i32* %186, align 4
  %280 = icmp slt i32 %278, %279
  br i1 %280, label %238, label %232

281:                                              ; preds = %296
  %282 = load i32, i32* %186, align 4
  br label %283

283:                                              ; preds = %281, %232
  %284 = phi i32 [ %233, %232 ], [ %282, %281 ]
  %285 = phi i32 [ %234, %232 ], [ %302, %281 ]
  %286 = icmp sgt i32 %284, 0
  br i1 %286, label %287, label %348

287:                                              ; preds = %283
  %288 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 169
  %289 = load %struct.TOKENLIST*, %struct.TOKENLIST** %288, align 8
  %290 = load i32, i32* %55, align 8
  %291 = sext i32 %284 to i64
  %292 = and i64 %291, 1
  %293 = icmp eq i32 %284, 1
  br i1 %293, label %333, label %294

294:                                              ; preds = %287
  %295 = sub nsw i64 %291, %292
  br label %305

296:                                              ; preds = %236, %296
  %297 = phi i64 [ 0, %236 ], [ %301, %296 ]
  %298 = load %union.sem_t*, %union.sem_t** %237, align 32
  %299 = getelementptr inbounds %union.sem_t, %union.sem_t* %298, i64 %297
  %300 = call i32 @sem_wait(%union.sem_t* %299) #7
  %301 = add nuw nsw i64 %297, 1
  %302 = load i32, i32* %184, align 32
  %303 = sext i32 %302 to i64
  %304 = icmp slt i64 %301, %303
  br i1 %304, label %296, label %281

305:                                              ; preds = %305, %294
  %306 = phi i32 [ %290, %294 ], [ %329, %305 ]
  %307 = phi i64 [ 0, %294 ], [ %330, %305 ]
  %308 = phi i64 [ %295, %294 ], [ %331, %305 ]
  %309 = getelementptr inbounds %struct.TOKENLIST, %struct.TOKENLIST* %289, i64 %307, i32 1
  %310 = bitcast %struct.TOKENEXTRA** %309 to i64*
  %311 = load i64, i64* %310, align 8
  %312 = getelementptr inbounds %struct.TOKENLIST, %struct.TOKENLIST* %289, i64 %307, i32 0
  %313 = bitcast %struct.TOKENEXTRA** %312 to i64*
  %314 = load i64, i64* %313, align 8
  %315 = sub i64 %311, %314
  %316 = lshr exact i64 %315, 4
  %317 = trunc i64 %316 to i32
  %318 = add i32 %306, %317
  store i32 %318, i32* %55, align 8
  %319 = or i64 %307, 1
  %320 = getelementptr inbounds %struct.TOKENLIST, %struct.TOKENLIST* %289, i64 %319, i32 1
  %321 = bitcast %struct.TOKENEXTRA** %320 to i64*
  %322 = load i64, i64* %321, align 8
  %323 = getelementptr inbounds %struct.TOKENLIST, %struct.TOKENLIST* %289, i64 %319, i32 0
  %324 = bitcast %struct.TOKENEXTRA** %323 to i64*
  %325 = load i64, i64* %324, align 8
  %326 = sub i64 %322, %325
  %327 = lshr exact i64 %326, 4
  %328 = trunc i64 %327 to i32
  %329 = add i32 %318, %328
  store i32 %329, i32* %55, align 8
  %330 = add nuw nsw i64 %307, 2
  %331 = add i64 %308, -2
  %332 = icmp eq i64 %331, 0
  br i1 %332, label %333, label %305

333:                                              ; preds = %305, %287
  %334 = phi i32 [ %290, %287 ], [ %329, %305 ]
  %335 = phi i64 [ 0, %287 ], [ %330, %305 ]
  %336 = icmp eq i64 %292, 0
  br i1 %336, label %348, label %337

337:                                              ; preds = %333
  %338 = getelementptr inbounds %struct.TOKENLIST, %struct.TOKENLIST* %289, i64 %335, i32 1
  %339 = bitcast %struct.TOKENEXTRA** %338 to i64*
  %340 = load i64, i64* %339, align 8
  %341 = getelementptr inbounds %struct.TOKENLIST, %struct.TOKENLIST* %289, i64 %335, i32 0
  %342 = bitcast %struct.TOKENEXTRA** %341 to i64*
  %343 = load i64, i64* %342, align 8
  %344 = sub i64 %340, %343
  %345 = lshr exact i64 %344, 4
  %346 = trunc i64 %345 to i32
  %347 = add i32 %334, %346
  store i32 %347, i32* %55, align 8
  br label %348

348:                                              ; preds = %337, %333, %283
  %349 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 23
  %350 = load i8, i8* %349, align 32
  %351 = icmp ne i8 %350, 0
  %352 = icmp sgt i32 %285, 0
  %353 = and i1 %351, %352
  br i1 %353, label %354, label %407

354:                                              ; preds = %348
  %355 = load %struct.MB_ROW_COMP*, %struct.MB_ROW_COMP** %182, align 8
  %356 = zext i32 %285 to i64
  %357 = load <4 x i32>, <4 x i32>* %3, align 16
  %358 = add nsw i64 %356, -1
  %359 = and i64 %356, 3
  %360 = icmp ult i64 %358, 3
  br i1 %360, label %389, label %361

361:                                              ; preds = %354
  %362 = sub nsw i64 %356, %359
  br label %363

363:                                              ; preds = %363, %361
  %364 = phi i64 [ 0, %361 ], [ %386, %363 ]
  %365 = phi <4 x i32> [ %357, %361 ], [ %385, %363 ]
  %366 = phi i64 [ %362, %361 ], [ %387, %363 ]
  %367 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %355, i64 %364, i32 1, i64 0
  %368 = bitcast i32* %367 to <4 x i32>*
  %369 = load <4 x i32>, <4 x i32>* %368, align 4
  %370 = add nsw <4 x i32> %365, %369
  %371 = or i64 %364, 1
  %372 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %355, i64 %371, i32 1, i64 0
  %373 = bitcast i32* %372 to <4 x i32>*
  %374 = load <4 x i32>, <4 x i32>* %373, align 4
  %375 = add nsw <4 x i32> %370, %374
  %376 = or i64 %364, 2
  %377 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %355, i64 %376, i32 1, i64 0
  %378 = bitcast i32* %377 to <4 x i32>*
  %379 = load <4 x i32>, <4 x i32>* %378, align 4
  %380 = add nsw <4 x i32> %375, %379
  %381 = or i64 %364, 3
  %382 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %355, i64 %381, i32 1, i64 0
  %383 = bitcast i32* %382 to <4 x i32>*
  %384 = load <4 x i32>, <4 x i32>* %383, align 4
  %385 = add nsw <4 x i32> %380, %384
  %386 = add nuw nsw i64 %364, 4
  %387 = add i64 %366, -4
  %388 = icmp eq i64 %387, 0
  br i1 %388, label %389, label %363

389:                                              ; preds = %363, %354
  %390 = phi <4 x i32> [ undef, %354 ], [ %385, %363 ]
  %391 = phi i64 [ 0, %354 ], [ %386, %363 ]
  %392 = phi <4 x i32> [ %357, %354 ], [ %385, %363 ]
  %393 = icmp eq i64 %359, 0
  br i1 %393, label %405, label %394

394:                                              ; preds = %389, %394
  %395 = phi i64 [ %402, %394 ], [ %391, %389 ]
  %396 = phi <4 x i32> [ %401, %394 ], [ %392, %389 ]
  %397 = phi i64 [ %403, %394 ], [ %359, %389 ]
  %398 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %355, i64 %395, i32 1, i64 0
  %399 = bitcast i32* %398 to <4 x i32>*
  %400 = load <4 x i32>, <4 x i32>* %399, align 4
  %401 = add nsw <4 x i32> %396, %400
  %402 = add nuw nsw i64 %395, 1
  %403 = add i64 %397, -1
  %404 = icmp eq i64 %403, 0
  br i1 %404, label %405, label %394, !llvm.loop !2

405:                                              ; preds = %394, %389
  %406 = phi <4 x i32> [ %390, %389 ], [ %401, %394 ]
  store <4 x i32> %406, <4 x i32>* %3, align 16
  br label %407

407:                                              ; preds = %405, %348
  br i1 %352, label %408, label %634

408:                                              ; preds = %407
  %409 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 54
  %410 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 55
  %411 = load i32, i32* %4, align 4
  %412 = load i32, i32* %54, align 8
  %413 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 52, i64 0
  %414 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 52, i64 1
  %415 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 52, i64 2
  %416 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 52, i64 3
  %417 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 52, i64 4
  %418 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 53, i64 0
  %419 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 53, i64 1
  %420 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 53, i64 2
  %421 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 53, i64 3
  %422 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 56, i64 0
  %423 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 56, i64 1
  %424 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 56, i64 2
  %425 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 56, i64 3
  br label %426

426:                                              ; preds = %408, %601
  %427 = phi i32 [ %412, %408 ], [ %435, %601 ]
  %428 = phi i64 [ 0, %408 ], [ %603, %601 ]
  %429 = phi i32 [ %411, %408 ], [ %602, %601 ]
  %430 = load %struct.MB_ROW_COMP*, %struct.MB_ROW_COMP** %182, align 8
  %431 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %430, i64 %428, i32 2
  %432 = load i32, i32* %431, align 16
  %433 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %430, i64 %428, i32 0, i32 49
  %434 = load i32, i32* %433, align 8
  %435 = add nsw i32 %427, %434
  store i32 %435, i32* %54, align 8
  %436 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %430, i64 %428, i32 0, i32 52, i64 0
  %437 = load i32, i32* %436, align 4
  %438 = load i32, i32* %413, align 4
  %439 = add nsw i32 %438, %437
  store i32 %439, i32* %413, align 4
  %440 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %430, i64 %428, i32 0, i32 52, i64 1
  %441 = load i32, i32* %440, align 4
  %442 = load i32, i32* %414, align 4
  %443 = add nsw i32 %442, %441
  store i32 %443, i32* %414, align 4
  %444 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %430, i64 %428, i32 0, i32 52, i64 2
  %445 = load i32, i32* %444, align 4
  %446 = load i32, i32* %415, align 4
  %447 = add nsw i32 %446, %445
  store i32 %447, i32* %415, align 4
  %448 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %430, i64 %428, i32 0, i32 52, i64 3
  %449 = load i32, i32* %448, align 4
  %450 = load i32, i32* %416, align 4
  %451 = add nsw i32 %450, %449
  store i32 %451, i32* %416, align 4
  %452 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %430, i64 %428, i32 0, i32 52, i64 4
  %453 = load i32, i32* %452, align 4
  %454 = load i32, i32* %417, align 4
  %455 = add nsw i32 %454, %453
  store i32 %455, i32* %417, align 4
  %456 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %430, i64 %428, i32 0, i32 53, i64 0
  %457 = load i32, i32* %456, align 4
  %458 = load i32, i32* %418, align 4
  %459 = add nsw i32 %458, %457
  store i32 %459, i32* %418, align 4
  %460 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %430, i64 %428, i32 0, i32 53, i64 1
  %461 = load i32, i32* %460, align 4
  %462 = load i32, i32* %419, align 4
  %463 = add nsw i32 %462, %461
  store i32 %463, i32* %419, align 4
  %464 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %430, i64 %428, i32 0, i32 53, i64 2
  %465 = load i32, i32* %464, align 4
  %466 = load i32, i32* %420, align 4
  %467 = add nsw i32 %466, %465
  store i32 %467, i32* %420, align 4
  %468 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %430, i64 %428, i32 0, i32 53, i64 3
  %469 = load i32, i32* %468, align 4
  %470 = load i32, i32* %421, align 4
  %471 = add nsw i32 %470, %469
  store i32 %471, i32* %421, align 4
  br label %472

472:                                              ; preds = %472, %426
  %473 = phi i64 [ 0, %426 ], [ %486, %472 ]
  %474 = phi %struct.MB_ROW_COMP* [ %430, %426 ], [ %487, %472 ]
  %475 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %474, i64 %428, i32 0, i32 51, i64 0, i64 %473
  %476 = load i32, i32* %475, align 4
  %477 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 51, i64 0, i64 %473
  %478 = load i32, i32* %477, align 4
  %479 = add i32 %478, %476
  store i32 %479, i32* %477, align 4
  %480 = load %struct.MB_ROW_COMP*, %struct.MB_ROW_COMP** %182, align 8
  %481 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %480, i64 %428, i32 0, i32 51, i64 1, i64 %473
  %482 = load i32, i32* %481, align 4
  %483 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 51, i64 1, i64 %473
  %484 = load i32, i32* %483, align 4
  %485 = add i32 %484, %482
  store i32 %485, i32* %483, align 4
  %486 = add nuw nsw i64 %473, 1
  %487 = load %struct.MB_ROW_COMP*, %struct.MB_ROW_COMP** %182, align 8
  %488 = icmp eq i64 %486, 2047
  br i1 %488, label %489, label %472

489:                                              ; preds = %472
  %490 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %487, i64 %428, i32 0, i32 54
  %491 = load i64, i64* %490, align 8
  %492 = load i64, i64* %409, align 8
  %493 = add nsw i64 %492, %491
  store i64 %493, i64* %409, align 8
  %494 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %487, i64 %428, i32 0, i32 55
  %495 = load i64, i64* %494, align 16
  %496 = load i64, i64* %410, align 16
  %497 = add nsw i64 %496, %495
  store i64 %497, i64* %410, align 16
  %498 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %487, i64 %428, i32 0, i32 56, i64 0
  %499 = load i32, i32* %498, align 4
  %500 = load i32, i32* %422, align 4
  %501 = add nsw i32 %500, %499
  store i32 %501, i32* %422, align 4
  %502 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %487, i64 %428, i32 0, i32 56, i64 1
  %503 = load i32, i32* %502, align 4
  %504 = load i32, i32* %423, align 4
  %505 = add nsw i32 %504, %503
  store i32 %505, i32* %423, align 4
  %506 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %487, i64 %428, i32 0, i32 56, i64 2
  %507 = load i32, i32* %506, align 4
  %508 = load i32, i32* %424, align 4
  %509 = add nsw i32 %508, %507
  store i32 %509, i32* %424, align 4
  %510 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %487, i64 %428, i32 0, i32 56, i64 3
  %511 = load i32, i32* %510, align 4
  %512 = load i32, i32* %425, align 4
  %513 = add nsw i32 %512, %511
  store i32 %513, i32* %425, align 4
  br label %514

514:                                              ; preds = %514, %489
  %515 = phi i64 [ 0, %489 ], [ %529, %514 ]
  %516 = phi %struct.MB_ROW_COMP* [ %487, %489 ], [ %530, %514 ]
  %517 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %516, i64 %428, i32 0, i32 66, i64 %515
  %518 = load i32, i32* %517, align 4
  %519 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 66, i64 %515
  %520 = load i32, i32* %519, align 4
  %521 = add nsw i32 %520, %518
  store i32 %521, i32* %519, align 4
  %522 = or i64 %515, 1
  %523 = load %struct.MB_ROW_COMP*, %struct.MB_ROW_COMP** %182, align 8
  %524 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %523, i64 %428, i32 0, i32 66, i64 %522
  %525 = load i32, i32* %524, align 4
  %526 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 66, i64 %522
  %527 = load i32, i32* %526, align 4
  %528 = add nsw i32 %527, %525
  store i32 %528, i32* %526, align 4
  %529 = add nuw nsw i64 %515, 2
  %530 = load %struct.MB_ROW_COMP*, %struct.MB_ROW_COMP** %182, align 8
  %531 = icmp eq i64 %529, 1024
  br i1 %531, label %532, label %514

532:                                              ; preds = %514, %598
  %533 = phi i64 [ %599, %598 ], [ 0, %514 ]
  br label %534

534:                                              ; preds = %595, %532
  %535 = phi i64 [ %596, %595 ], [ 0, %532 ]
  br label %536

536:                                              ; preds = %536, %534
  %537 = phi i64 [ %593, %536 ], [ 0, %534 ]
  %538 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %530, i64 %428, i32 0, i32 50, i64 %533, i64 %535, i64 %537, i64 0
  %539 = load i32, i32* %538, align 4
  %540 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 50, i64 %533, i64 %535, i64 %537, i64 0
  %541 = load i32, i32* %540, align 4
  %542 = add i32 %541, %539
  store i32 %542, i32* %540, align 4
  %543 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %530, i64 %428, i32 0, i32 50, i64 %533, i64 %535, i64 %537, i64 1
  %544 = load i32, i32* %543, align 4
  %545 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 50, i64 %533, i64 %535, i64 %537, i64 1
  %546 = load i32, i32* %545, align 4
  %547 = add i32 %546, %544
  store i32 %547, i32* %545, align 4
  %548 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %530, i64 %428, i32 0, i32 50, i64 %533, i64 %535, i64 %537, i64 2
  %549 = load i32, i32* %548, align 4
  %550 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 50, i64 %533, i64 %535, i64 %537, i64 2
  %551 = load i32, i32* %550, align 4
  %552 = add i32 %551, %549
  store i32 %552, i32* %550, align 4
  %553 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %530, i64 %428, i32 0, i32 50, i64 %533, i64 %535, i64 %537, i64 3
  %554 = load i32, i32* %553, align 4
  %555 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 50, i64 %533, i64 %535, i64 %537, i64 3
  %556 = load i32, i32* %555, align 4
  %557 = add i32 %556, %554
  store i32 %557, i32* %555, align 4
  %558 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %530, i64 %428, i32 0, i32 50, i64 %533, i64 %535, i64 %537, i64 4
  %559 = load i32, i32* %558, align 4
  %560 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 50, i64 %533, i64 %535, i64 %537, i64 4
  %561 = load i32, i32* %560, align 4
  %562 = add i32 %561, %559
  store i32 %562, i32* %560, align 4
  %563 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %530, i64 %428, i32 0, i32 50, i64 %533, i64 %535, i64 %537, i64 5
  %564 = load i32, i32* %563, align 4
  %565 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 50, i64 %533, i64 %535, i64 %537, i64 5
  %566 = load i32, i32* %565, align 4
  %567 = add i32 %566, %564
  store i32 %567, i32* %565, align 4
  %568 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %530, i64 %428, i32 0, i32 50, i64 %533, i64 %535, i64 %537, i64 6
  %569 = load i32, i32* %568, align 4
  %570 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 50, i64 %533, i64 %535, i64 %537, i64 6
  %571 = load i32, i32* %570, align 4
  %572 = add i32 %571, %569
  store i32 %572, i32* %570, align 4
  %573 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %530, i64 %428, i32 0, i32 50, i64 %533, i64 %535, i64 %537, i64 7
  %574 = load i32, i32* %573, align 4
  %575 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 50, i64 %533, i64 %535, i64 %537, i64 7
  %576 = load i32, i32* %575, align 4
  %577 = add i32 %576, %574
  store i32 %577, i32* %575, align 4
  %578 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %530, i64 %428, i32 0, i32 50, i64 %533, i64 %535, i64 %537, i64 8
  %579 = load i32, i32* %578, align 4
  %580 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 50, i64 %533, i64 %535, i64 %537, i64 8
  %581 = load i32, i32* %580, align 4
  %582 = add i32 %581, %579
  store i32 %582, i32* %580, align 4
  %583 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %530, i64 %428, i32 0, i32 50, i64 %533, i64 %535, i64 %537, i64 9
  %584 = load i32, i32* %583, align 4
  %585 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 50, i64 %533, i64 %535, i64 %537, i64 9
  %586 = load i32, i32* %585, align 4
  %587 = add i32 %586, %584
  store i32 %587, i32* %585, align 4
  %588 = getelementptr inbounds %struct.MB_ROW_COMP, %struct.MB_ROW_COMP* %530, i64 %428, i32 0, i32 50, i64 %533, i64 %535, i64 %537, i64 10
  %589 = load i32, i32* %588, align 4
  %590 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 50, i64 %533, i64 %535, i64 %537, i64 10
  %591 = load i32, i32* %590, align 4
  %592 = add i32 %591, %589
  store i32 %592, i32* %590, align 4
  %593 = add nuw nsw i64 %537, 1
  %594 = icmp eq i64 %593, 3
  br i1 %594, label %595, label %536

595:                                              ; preds = %536
  %596 = add nuw nsw i64 %535, 1
  %597 = icmp eq i64 %596, 8
  br i1 %597, label %598, label %534

598:                                              ; preds = %595
  %599 = add nuw nsw i64 %533, 1
  %600 = icmp eq i64 %599, 4
  br i1 %600, label %601, label %532

601:                                              ; preds = %598
  %602 = add nsw i32 %429, %432
  %603 = add nuw nsw i64 %428, 1
  %604 = load i32, i32* %184, align 32
  %605 = sext i32 %604 to i64
  %606 = icmp slt i64 %603, %605
  br i1 %606, label %426, label %633

607:                                              ; preds = %173, %607
  %608 = phi i32 [ 0, %173 ], [ %624, %607 ]
  call void @llvm.memset.p0i8.i64(i8* align 16 %174, i8 0, i64 9, i1 false)
  call fastcc void @encode_mb_row(%struct.VP8_COMP* %0, %struct.VP8Common* %7, i32 %608, %struct.macroblock* %6, %struct.macroblockd* %8, %struct.TOKENEXTRA** nonnull %2, i32* nonnull %15, i32* nonnull %4)
  %609 = load i32, i32* %175, align 16
  %610 = load i32, i32* %176, align 8
  %611 = sub i32 %609, %610
  %612 = shl i32 %611, 4
  %613 = load i8*, i8** %177, align 8
  %614 = sext i32 %612 to i64
  %615 = getelementptr inbounds i8, i8* %613, i64 %614
  store i8* %615, i8** %177, align 8
  %616 = load i32, i32* %178, align 4
  %617 = sub i32 %616, %610
  %618 = shl i32 %617, 3
  %619 = load i8*, i8** %179, align 32
  %620 = sext i32 %618 to i64
  %621 = getelementptr inbounds i8, i8* %619, i64 %620
  store i8* %621, i8** %179, align 32
  %622 = load i8*, i8** %180, align 8
  %623 = getelementptr inbounds i8, i8* %622, i64 %620
  store i8* %623, i8** %180, align 8
  %624 = add nuw nsw i32 %608, 1
  %625 = load i32, i32* %170, align 4
  %626 = icmp slt i32 %624, %625
  br i1 %626, label %607, label %627

627:                                              ; preds = %607, %169
  %628 = load i64, i64* %13, align 8
  %629 = load i64, i64* %11, align 32
  %630 = sub i64 %628, %629
  %631 = lshr exact i64 %630, 4
  %632 = trunc i64 %631 to i32
  store i32 %632, i32* %55, align 8
  br label %634

633:                                              ; preds = %601
  store i32 %602, i32* %4, align 4
  br label %634

634:                                              ; preds = %407, %633, %627
  %635 = getelementptr inbounds %struct.vpx_usec_timer, %struct.vpx_usec_timer* %5, i64 0, i32 1
  %636 = call i32 @gettimeofday(%struct.timeval* %635, i8* null) #7
  %637 = load i64, i64* %161, align 8
  %638 = load i64, i64* %159, align 8
  %639 = sub i64 %637, %638
  %640 = load i64, i64* %162, align 8
  %641 = load i64, i64* %160, align 8
  %642 = sub nsw i64 %640, %641
  %643 = icmp slt i64 %642, 0
  %644 = add nsw i64 %642, 1000000
  %645 = select i1 %643, i64 %644, i64 %642
  %646 = ashr i64 %642, 63
  %647 = add nsw i64 %639, %646
  %648 = mul nsw i64 %647, 1000000
  %649 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 181
  %650 = load i64, i64* %649, align 8
  %651 = add i64 %645, %650
  %652 = add i64 %651, %648
  store i64 %652, i64* %649, align 8
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %158) #7
  %653 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 23
  %654 = load i8, i8* %653, align 32
  %655 = icmp eq i8 %654, 0
  br i1 %655, label %694, label %656

656:                                              ; preds = %634
  %657 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 24
  %658 = load i8, i8* %657, align 1
  %659 = icmp eq i8 %658, 0
  br i1 %659, label %694, label %660

660:                                              ; preds = %656
  %661 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 27, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 4 %661, i8 -1, i64 3, i1 false)
  %662 = load i32, i32* %15, align 16
  %663 = load i32, i32* %16, align 4
  %664 = add nsw i32 %663, %662
  %665 = load i32, i32* %17, align 8
  %666 = load i32, i32* %18, align 4
  %667 = add i32 %666, %665
  %668 = add i32 %667, %664
  %669 = icmp eq i32 %668, 0
  br i1 %669, label %694, label %670

670:                                              ; preds = %660
  %671 = mul nsw i32 %664, 255
  %672 = sdiv i32 %671, %668
  %673 = trunc i32 %672 to i8
  store i8 %673, i8* %661, align 4
  %674 = icmp sgt i32 %664, 0
  br i1 %674, label %675, label %680

675:                                              ; preds = %670
  %676 = mul nsw i32 %662, 255
  %677 = sdiv i32 %676, %664
  %678 = trunc i32 %677 to i8
  %679 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 27, i64 1
  store i8 %678, i8* %679, align 1
  br label %680

680:                                              ; preds = %675, %670
  %681 = phi i8 [ %678, %675 ], [ -1, %670 ]
  %682 = icmp sgt i32 %667, 0
  br i1 %682, label %683, label %688

683:                                              ; preds = %680
  %684 = mul nsw i32 %665, 255
  %685 = sdiv i32 %684, %667
  %686 = trunc i32 %685 to i8
  %687 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 27, i64 2
  store i8 %686, i8* %687, align 2
  br label %688

688:                                              ; preds = %683, %680
  %689 = phi i8 [ %686, %683 ], [ -1, %680 ]
  %690 = icmp eq i8 %673, 0
  br i1 %690, label %691, label %692

691:                                              ; preds = %688
  store i8 1, i8* %661, align 1
  br label %692

692:                                              ; preds = %688, %691
  %693 = icmp eq i8 %681, 0
  br i1 %693, label %721, label %723

694:                                              ; preds = %723, %725, %660, %656, %634
  %695 = load i32, i32* %4, align 4
  %696 = ashr i32 %695, 8
  %697 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 53
  store i32 %696, i32* %697, align 4
  %698 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 23
  %699 = load i32, i32* %698, align 4
  %700 = icmp eq i32 %699, 0
  br i1 %700, label %717, label %701

701:                                              ; preds = %694
  %702 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 56, i64 0
  %703 = load i32, i32* %702, align 8
  %704 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 56, i64 1
  %705 = load i32, i32* %704, align 4
  %706 = add nsw i32 %705, %703
  %707 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 56, i64 2
  %708 = load i32, i32* %707, align 8
  %709 = add nsw i32 %706, %708
  %710 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 56, i64 3
  %711 = load i32, i32* %710, align 4
  %712 = add nsw i32 %709, %711
  %713 = icmp eq i32 %712, 0
  br i1 %713, label %720, label %714

714:                                              ; preds = %701
  %715 = mul nsw i32 %703, 100
  %716 = sdiv i32 %715, %712
  br label %717

717:                                              ; preds = %694, %714
  %718 = phi i32 [ %716, %714 ], [ 100, %694 ]
  %719 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 127
  store i32 %718, i32* %719, align 4
  br label %720

720:                                              ; preds = %717, %701
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %19) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #7
  ret void

721:                                              ; preds = %692
  %722 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 27, i64 1
  store i8 1, i8* %722, align 1
  br label %723

723:                                              ; preds = %721, %692
  %724 = icmp eq i8 %689, 0
  br i1 %724, label %725, label %694

725:                                              ; preds = %723
  %726 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 27, i64 2
  store i8 1, i8* %726, align 1
  br label %694
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @vp8_auto_select_speed(%struct.VP8_COMP*) local_unnamed_addr #3

declare void @vp8_bilinear_predict4x4_sse2(i8*, i32, i32, i32, i8*, i32) #3

declare void @vp8_bilinear_predict8x4_sse2(i8*, i32, i32, i32, i8*, i32) #3

declare void @vp8cx_frame_init_quantizer(%struct.VP8_COMP*) local_unnamed_addr #3

declare void @vp8_initialize_rd_consts(%struct.VP8_COMP*, %struct.macroblock*, i32) local_unnamed_addr #3

declare i32 @vp8_dc_quant(i32, i32) local_unnamed_addr #3

declare void @vp8cx_initialize_me_consts(%struct.VP8_COMP*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @init_encode_frame_mb_context(%struct.VP8_COMP*) unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18
  %3 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 190
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 16
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 36
  %7 = bitcast i8** %6 to i64*
  store i64 %5, i64* %7, align 8
  %8 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 189
  %9 = bitcast i32** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 19
  %12 = bitcast i32** %11 to i64*
  store i64 %10, i64* %12, align 16
  %13 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 21
  store i32 0, i32* %13, align 32
  %14 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 8
  %15 = bitcast %struct.PARTITION_INFO** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 7
  %18 = bitcast %struct.PARTITION_INFO** %17 to i64*
  store i64 %16, i64* %18, align 32
  %19 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 41
  %20 = bitcast %struct.modeinfo** %19 to i64*
  %21 = load i64, i64* %20, align 16
  %22 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 13
  %23 = bitcast %struct.modeinfo** %22 to i64*
  store i64 %21, i64* %23, align 32
  %24 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 29
  %25 = load i32, i32* %24, align 4
  %26 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 14
  store i32 %25, i32* %26, align 8
  %27 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 23
  %28 = load i32, i32* %27, align 4
  %29 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 15
  store i32 %28, i32* %29, align 4
  %30 = icmp eq i32 %28, 0
  br i1 %30, label %31, label %33

31:                                               ; preds = %1
  %32 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19
  tail call void @vp8_init_mbmode_probs(%struct.VP8Common* %32) #7
  br label %33

33:                                               ; preds = %31, %1
  %34 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 5
  %35 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 26
  %36 = bitcast %struct.yv12_buffer_config** %35 to i8**
  %37 = load i8*, i8** %36, align 8
  %38 = bitcast %struct.yv12_buffer_config* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %38, i8* align 8 %37, i64 160, i1 false)
  %39 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 11
  %40 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 14
  %41 = load i32, i32* %40, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %42
  %44 = bitcast %struct.yv12_buffer_config* %39 to i8*
  %45 = bitcast %struct.yv12_buffer_config* %43 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %44, i8* align 16 %45, i64 160, i1 false)
  %46 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 12
  %47 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 13
  %48 = load i32, i32* %47, align 16
  %49 = sext i32 %48 to i64
  %50 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %49
  %51 = bitcast %struct.yv12_buffer_config* %46 to i8*
  %52 = bitcast %struct.yv12_buffer_config* %50 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %51, i8* align 16 %52, i64 160, i1 false)
  tail call void @vp8_setup_intra_recon(%struct.yv12_buffer_config* %50) #7
  tail call void @vp8_build_block_offsets(%struct.macroblock* %2)
  %53 = load %struct.modeinfo*, %struct.modeinfo** %22, align 32
  %54 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %53, i64 0, i32 0, i32 0
  store i8 0, i8* %54, align 4
  %55 = load %struct.modeinfo*, %struct.modeinfo** %22, align 32
  %56 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %55, i64 0, i32 0, i32 1
  store i8 0, i8* %56, align 1
  %57 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 57
  %58 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 22
  store %struct.ENTROPY_CONTEXT_PLANES* %57, %struct.ENTROPY_CONTEXT_PLANES** %58, align 8
  %59 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 59, i32 5, i64 0
  %60 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 38
  store %struct.mv_context* %59, %struct.mv_context** %60, align 8
  %61 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 56
  %62 = bitcast %struct.ENTROPY_CONTEXT_PLANES** %61 to i8**
  %63 = load i8*, i8** %62, align 8
  %64 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %65 = load i32, i32* %64, align 8
  %66 = sext i32 %65 to i64
  %67 = mul nsw i64 %66, 9
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %63, i8 0, i64 %67, i1 false)
  %68 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 129
  %69 = load i32, i32* %68, align 4
  %70 = icmp eq i32 %69, 1
  br i1 %70, label %71, label %75

71:                                               ; preds = %33
  %72 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 10, i64 0
  %73 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 120
  %74 = load i32, i32* %73, align 4
  tail call void @vp8_calc_ref_frame_costs(i32* %72, i32 %74, i32 255, i32 128) #7
  br label %97

75:                                               ; preds = %33
  %76 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 52
  %77 = load i32, i32* %76, align 4
  %78 = icmp ugt i32 %77, 1
  %79 = icmp eq i32 %69, 2
  %80 = and i1 %79, %78
  br i1 %80, label %81, label %85

81:                                               ; preds = %75
  %82 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 10, i64 0
  %83 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 120
  %84 = load i32, i32* %83, align 4
  tail call void @vp8_calc_ref_frame_costs(i32* %82, i32 %84, i32 1, i32 255) #7
  br label %97

85:                                               ; preds = %75
  %86 = icmp eq i32 %69, 4
  %87 = and i1 %86, %78
  %88 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 10, i64 0
  %89 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 120
  %90 = load i32, i32* %89, align 4
  br i1 %87, label %91, label %92

91:                                               ; preds = %85
  tail call void @vp8_calc_ref_frame_costs(i32* %88, i32 %90, i32 1, i32 1) #7
  br label %97

92:                                               ; preds = %85
  %93 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 121
  %94 = load i32, i32* %93, align 16
  %95 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 122
  %96 = load i32, i32* %95, align 4
  tail call void @vp8_calc_ref_frame_costs(i32* %88, i32 %90, i32 %94, i32 %96) #7
  br label %97

97:                                               ; preds = %81, %92, %91, %71
  %98 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 6, i32 10
  %99 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 33
  %100 = load i32, i32* %99, align 4
  %101 = icmp eq i32 %100, 0
  %102 = select i1 %101, i32 -1, i32 -8
  store i32 %102, i32* %98, align 8
  %103 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 50
  %104 = bitcast [4 x [8 x [3 x [12 x i32]]]]* %103 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %104, i8 0, i64 4608, i1 false)
  %105 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 52
  %106 = bitcast [5 x i32]* %105 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %106, i8 0, i64 68, i1 false)
  ret void
}

declare void @vp8cx_init_mbrthread_data(%struct.VP8_COMP*, %struct.macroblock*, %struct.MB_ROW_COMP*, i32) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @sem_post(%union.sem_t*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @encode_mb_row(%struct.VP8_COMP*, %struct.VP8Common*, i32, %struct.macroblock*, %struct.macroblockd* nocapture, %struct.TOKENEXTRA**, i32* nocapture, i32* nocapture) unnamed_addr #2 {
  %9 = alloca i32, align 4
  %10 = bitcast i32* %9 to %struct.vpx_atomic_int*
  %11 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %1, i64 0, i32 14
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %1, i64 0, i32 13
  %14 = load i32, i32* %13, align 16
  %15 = sext i32 %12 to i64
  %16 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %1, i64 0, i32 11, i64 %15, i32 4
  %17 = load i32, i32* %16, align 16
  %18 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %1, i64 0, i32 11, i64 %15, i32 9
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %21 = load i32, i32* %20, align 8
  %22 = mul nsw i32 %21, %2
  %23 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 156
  %24 = load i32, i32* %23, align 8
  %25 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25)
  store i32 -1431655766, i32* %9, align 4
  %26 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %1, i64 0, i32 28
  %27 = load i32, i32* %26, align 8
  %28 = add nsw i32 %27, %24
  store volatile i32 %28, i32* %9, align 4
  %29 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 157, i32 0
  %30 = load atomic volatile i32, i32* %29 acquire, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %37, label %32

32:                                               ; preds = %8
  %33 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 155
  %34 = load %struct.vpx_atomic_int*, %struct.vpx_atomic_int** %33, align 16
  %35 = sext i32 %2 to i64
  %36 = getelementptr inbounds %struct.vpx_atomic_int, %struct.vpx_atomic_int* %34, i64 %35
  br label %37

37:                                               ; preds = %8, %32
  %38 = phi %struct.vpx_atomic_int* [ %36, %32 ], [ null, %8 ]
  %39 = load atomic volatile i32, i32* %29 acquire, align 4
  %40 = icmp ne i32 %39, 0
  %41 = icmp ne i32 %2, 0
  %42 = and i1 %41, %40
  br i1 %42, label %43, label %49

43:                                               ; preds = %37
  %44 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 155
  %45 = load %struct.vpx_atomic_int*, %struct.vpx_atomic_int** %44, align 16
  %46 = add nsw i32 %2, -1
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds %struct.vpx_atomic_int, %struct.vpx_atomic_int* %45, i64 %47
  br label %49

49:                                               ; preds = %37, %43
  %50 = phi %struct.vpx_atomic_int* [ %48, %43 ], [ %10, %37 ]
  %51 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %1, i64 0, i32 56
  %52 = bitcast %struct.ENTROPY_CONTEXT_PLANES** %51 to i64*
  %53 = load i64, i64* %52, align 8
  %54 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 21
  %55 = bitcast %struct.ENTROPY_CONTEXT_PLANES** %54 to i64*
  store i64 %53, i64* %55, align 16
  %56 = zext i1 %41 to i32
  %57 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 16
  store i32 %56, i32* %57, align 16
  %58 = bitcast %struct.TOKENEXTRA** %5 to i64*
  %59 = load i64, i64* %58, align 8
  %60 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 169
  %61 = load %struct.TOKENLIST*, %struct.TOKENLIST** %60, align 8
  %62 = sext i32 %2 to i64
  %63 = getelementptr inbounds %struct.TOKENLIST, %struct.TOKENLIST* %61, i64 %62
  %64 = bitcast %struct.TOKENLIST* %63 to i64*
  store i64 %59, i64* %64, align 8
  %65 = shl i32 %2, 4
  %66 = shl i32 %2, 7
  %67 = sub nsw i32 0, %66
  %68 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 37
  store i32 %67, i32* %68, align 4
  %69 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %1, i64 0, i32 27
  %70 = load i32, i32* %69, align 4
  %71 = xor i32 %2, 33554431
  %72 = add i32 %70, %71
  %73 = shl i32 %72, 7
  %74 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 38
  store i32 %73, i32* %74, align 16
  %75 = sub nuw nsw i32 -16, %65
  %76 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 32
  store i32 %75, i32* %76, align 8
  %77 = load i32, i32* %69, align 4
  %78 = xor i32 %2, 268435455
  %79 = add i32 %77, %78
  %80 = shl i32 %79, 4
  %81 = add nsw i32 %80, 16
  %82 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 33
  store i32 %81, i32* %82, align 4
  %83 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 189
  %84 = load i32*, i32** %83, align 8
  %85 = sext i32 %22 to i64
  %86 = getelementptr inbounds i32, i32* %84, i64 %85
  %87 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 19
  store i32* %86, i32** %87, align 16
  %88 = load i32, i32* %26, align 8
  %89 = icmp sgt i32 %88, 0
  br i1 %89, label %92, label %90

90:                                               ; preds = %49
  %91 = sext i32 %14 to i64
  br label %387

92:                                               ; preds = %49
  %93 = shl i32 %2, 3
  %94 = mul i32 %93, %19
  %95 = mul i32 %65, %17
  %96 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 35
  %97 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 36
  %98 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 30
  %99 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 31
  %100 = sext i32 %14 to i64
  %101 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %1, i64 0, i32 11, i64 %100, i32 13
  %102 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 12, i32 13
  %103 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %1, i64 0, i32 11, i64 %100, i32 14
  %104 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 12, i32 14
  %105 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %1, i64 0, i32 11, i64 %100, i32 15
  %106 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 12, i32 15
  %107 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 17
  %108 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 48
  %109 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 17
  %110 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 47
  %111 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 18
  %112 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 5, i32 13
  %113 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 5, i32 4
  %114 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 2, i64 0
  %115 = getelementptr inbounds %struct.vpx_atomic_int, %struct.vpx_atomic_int* %38, i64 0, i32 0
  %116 = add nsw i32 %24, -1
  %117 = getelementptr inbounds %struct.vpx_atomic_int, %struct.vpx_atomic_int* %50, i64 0, i32 0
  %118 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 51
  %119 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 188
  %120 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 14
  %121 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 21
  %122 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 23
  %123 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 134
  %124 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 13
  %125 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 137
  %126 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 37
  %127 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %1, i64 0, i32 23
  %128 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 201
  %129 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 144
  %130 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 145
  %131 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 72
  %132 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 139
  %133 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 143
  %134 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 36
  %135 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 5, i32 15
  %136 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 7
  %137 = sext i32 %95 to i64
  %138 = sext i32 %94 to i64
  %139 = bitcast i8** %112 to <2 x i8*>*
  %140 = bitcast i8** %112 to <2 x i8*>*
  br label %141

141:                                              ; preds = %92, %355
  %142 = phi i64 [ %138, %92 ], [ %369, %355 ]
  %143 = phi i64 [ 0, %92 ], [ %383, %355 ]
  %144 = phi i64 [ %137, %92 ], [ %368, %355 ]
  %145 = trunc i64 %143 to i32
  %146 = shl nsw i32 %145, 4
  %147 = shl i32 %145, 7
  %148 = sub nsw i32 0, %147
  store i32 %148, i32* %96, align 4
  %149 = load i32, i32* %26, align 8
  %150 = xor i32 %145, 33554431
  %151 = add i32 %149, %150
  %152 = shl i32 %151, 7
  store i32 %152, i32* %97, align 8
  %153 = sub nuw nsw i32 -16, %146
  store i32 %153, i32* %98, align 16
  %154 = load i32, i32* %26, align 8
  %155 = xor i32 %145, 268435455
  %156 = add i32 %154, %155
  %157 = shl i32 %156, 4
  %158 = add nsw i32 %157, 16
  store i32 %158, i32* %99, align 4
  %159 = load i8*, i8** %101, align 8
  %160 = getelementptr inbounds i8, i8* %159, i64 %144
  store i8* %160, i8** %102, align 8
  %161 = load i8*, i8** %103, align 16
  %162 = getelementptr inbounds i8, i8* %161, i64 %142
  store i8* %162, i8** %104, align 32
  %163 = load i8*, i8** %105, align 8
  %164 = getelementptr inbounds i8, i8* %163, i64 %142
  store i8* %164, i8** %106, align 8
  %165 = icmp ne i64 %143, 0
  %166 = zext i1 %165 to i32
  store i32 %166, i32* %107, align 4
  %167 = load i32, i32* %108, align 4
  store i32 %167, i32* %109, align 4
  %168 = load i32, i32* %110, align 32
  store i32 %168, i32* %111, align 8
  %169 = load i8*, i8** %112, align 8
  %170 = load i32, i32* %113, align 16
  tail call void @vp8_copy_mem16x16_sse2(i8* %169, i32 %170, i8* %114, i32 16) #7
  %171 = load atomic volatile i32, i32* %29 acquire, align 4
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %193, label %173

173:                                              ; preds = %141
  %174 = trunc i64 %143 to i32
  %175 = add i32 %174, -1
  %176 = srem i32 %175, %24
  %177 = icmp eq i32 %176, 0
  br i1 %177, label %178, label %179

178:                                              ; preds = %173
  store atomic volatile i32 %175, i32* %115 release, align 4
  br label %179

179:                                              ; preds = %178, %173
  %180 = and i32 %116, %145
  %181 = icmp eq i32 %180, 0
  %182 = and i1 %41, %181
  br i1 %182, label %183, label %193

183:                                              ; preds = %179
  %184 = load atomic volatile i32, i32* %117 acquire, align 4
  %185 = sub nsw i32 %184, %24
  %186 = sext i32 %185 to i64
  %187 = icmp sgt i64 %143, %186
  br i1 %187, label %188, label %193

188:                                              ; preds = %183, %188
  tail call void asm sideeffect "pause \0A\09", "~{dirflag},~{fpsr},~{flags}"() #7, !srcloc !4
  %189 = load atomic volatile i32, i32* %117 acquire, align 4
  %190 = sub nsw i32 %189, %24
  %191 = sext i32 %190 to i64
  %192 = icmp sgt i64 %143, %191
  br i1 %192, label %188, label %193

193:                                              ; preds = %188, %183, %141, %179
  %194 = load i32, i32* %118, align 8
  %195 = icmp eq i32 %194, 1
  br i1 %195, label %196, label %245

196:                                              ; preds = %193
  %197 = load i32*, i32** %87, align 16
  %198 = load i32, i32* %197, align 4
  %199 = zext i32 %198 to i64
  %200 = load i32, i32* %119, align 4
  %201 = shl i32 %200, 1
  %202 = zext i32 %201 to i64
  %203 = add nuw nsw i64 %202, %199
  %204 = shl nuw nsw i64 %199, 1
  %205 = zext i32 %200 to i64
  %206 = add nuw nsw i64 %204, %205
  %207 = load i32, i32* %111, align 8
  %208 = sext i32 %207 to i64
  %209 = mul nsw i64 %206, %208
  %210 = lshr i64 %203, 1
  %211 = add nsw i64 %210, %209
  %212 = sdiv i64 %211, %203
  %213 = trunc i64 %212 to i32
  store i32 %213, i32* %111, align 8
  %214 = mul nsw i32 %213, 100
  %215 = load i32, i32* %109, align 4
  %216 = mul nsw i32 %215, 110
  %217 = sdiv i32 %214, %216
  %218 = icmp eq i32 %217, 0
  %219 = zext i1 %218 to i32
  %220 = add nsw i32 %217, %219
  store i32 %220, i32* %120, align 8
  %221 = load i32, i32* %197, align 4
  %222 = zext i32 %221 to i64
  %223 = load i32, i32* %119, align 4
  %224 = shl i32 %223, 2
  %225 = zext i32 %224 to i64
  %226 = add nuw nsw i64 %225, %222
  %227 = shl nuw nsw i64 %222, 2
  %228 = zext i32 %223 to i64
  %229 = add nuw nsw i64 %227, %228
  %230 = icmp ugt i32 %221, %223
  br i1 %230, label %231, label %237

231:                                              ; preds = %196
  %232 = lshr i64 %226, 1
  %233 = add nuw nsw i64 %232, %229
  %234 = udiv i64 %233, %226
  %235 = trunc i64 %234 to i32
  %236 = add nsw i32 %235, -1
  br label %243

237:                                              ; preds = %196
  %238 = lshr i64 %229, 1
  %239 = add nuw nsw i64 %226, %238
  %240 = udiv i64 %239, %229
  %241 = trunc i64 %240 to i32
  %242 = sub nsw i32 1, %241
  br label %243

243:                                              ; preds = %231, %237
  %244 = phi i32 [ %242, %237 ], [ %236, %231 ]
  store i32 %244, i32* %121, align 32
  br label %245

245:                                              ; preds = %243, %193
  %246 = load i8, i8* %122, align 32
  %247 = icmp eq i8 %246, 0
  br i1 %247, label %257, label %248

248:                                              ; preds = %245
  %249 = load i8*, i8** %123, align 16
  %250 = add nsw i64 %143, %85
  %251 = getelementptr inbounds i8, i8* %249, i64 %250
  %252 = load i8, i8* %251, align 1
  %253 = icmp ult i8 %252, 4
  %254 = load %struct.modeinfo*, %struct.modeinfo** %124, align 32
  %255 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %254, i64 0, i32 0, i32 8
  %256 = select i1 %253, i8 %252, i8 0
  store i8 %256, i8* %255, align 1
  tail call void @vp8cx_mb_init_quantizer(%struct.VP8_COMP* %0, %struct.macroblock* %3, i32 1) #7
  br label %260

257:                                              ; preds = %245
  %258 = load %struct.modeinfo*, %struct.modeinfo** %124, align 32
  %259 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %258, i64 0, i32 0, i32 8
  store i8 0, i8* %259, align 1
  br label %260

260:                                              ; preds = %257, %248
  %261 = load i8*, i8** %125, align 16
  %262 = getelementptr inbounds i8, i8* %261, i64 %85
  %263 = getelementptr inbounds i8, i8* %262, i64 %143
  store i8* %263, i8** %126, align 16
  %264 = load i32, i32* %127, align 4
  %265 = icmp eq i32 %264, 0
  br i1 %265, label %266, label %270

266:                                              ; preds = %260
  %267 = tail call i32 @vp8cx_encode_intra_macroblock(%struct.VP8_COMP* %0, %struct.macroblock* %3, %struct.TOKENEXTRA** %5)
  %268 = load i32, i32* %7, align 4
  %269 = add nsw i32 %268, %267
  store i32 %269, i32* %7, align 4
  br label %355

270:                                              ; preds = %260
  %271 = trunc i64 %144 to i32
  %272 = trunc i64 %142 to i32
  %273 = tail call i32 @vp8cx_encode_inter_macroblock(%struct.VP8_COMP* %0, %struct.macroblock* %3, %struct.TOKENEXTRA** %5, i32 %271, i32 %272, i32 %2, i32 %145)
  %274 = load i32, i32* %7, align 4
  %275 = add nsw i32 %274, %273
  store i32 %275, i32* %7, align 4
  %276 = load i32, i32* %128, align 8
  %277 = icmp eq i32 %276, 0
  br i1 %277, label %278, label %355

278:                                              ; preds = %270
  %279 = load %struct.modeinfo*, %struct.modeinfo** %124, align 32
  %280 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %279, i64 0, i32 0, i32 0
  %281 = load i8, i8* %280, align 4
  %282 = icmp eq i8 %281, 7
  br i1 %282, label %283, label %302

283:                                              ; preds = %278
  %284 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %279, i64 0, i32 0, i32 2
  %285 = load i8, i8* %284, align 2
  %286 = icmp eq i8 %285, 1
  br i1 %286, label %287, label %302

287:                                              ; preds = %283
  %288 = load i8*, i8** %129, align 8
  %289 = add nsw i64 %143, %85
  %290 = getelementptr inbounds i8, i8* %288, i64 %289
  %291 = load i8, i8* %290, align 1
  %292 = icmp eq i8 %291, -1
  br i1 %292, label %295, label %293

293:                                              ; preds = %287
  %294 = add nuw i8 %291, 1
  store i8 %294, i8* %290, align 1
  br label %295

295:                                              ; preds = %287, %293
  %296 = load i8*, i8** %130, align 32
  %297 = getelementptr inbounds i8, i8* %296, i64 %289
  %298 = load i8, i8* %297, align 1
  %299 = icmp eq i8 %298, -1
  br i1 %299, label %308, label %300

300:                                              ; preds = %295
  %301 = add nuw i8 %298, 1
  store i8 %301, i8* %297, align 1
  br label %308

302:                                              ; preds = %283, %278
  %303 = load i8*, i8** %129, align 8
  %304 = add nsw i64 %143, %85
  %305 = getelementptr inbounds i8, i8* %303, i64 %304
  store i8 0, i8* %305, align 1
  %306 = load i8*, i8** %130, align 32
  %307 = getelementptr inbounds i8, i8* %306, i64 %304
  store i8 0, i8* %307, align 1
  br label %308

308:                                              ; preds = %295, %300, %302
  %309 = load i32, i32* %131, align 4
  %310 = icmp eq i32 %309, 0
  br i1 %310, label %315, label %311

311:                                              ; preds = %308
  %312 = load i8*, i8** %130, align 32
  %313 = add nsw i64 %143, %85
  %314 = getelementptr inbounds i8, i8* %312, i64 %313
  store i8 0, i8* %314, align 1
  br label %315

315:                                              ; preds = %308, %311
  %316 = load i32, i32* %128, align 8
  %317 = icmp eq i32 %316, 0
  br i1 %317, label %318, label %355

318:                                              ; preds = %315
  %319 = load i32, i32* %132, align 4
  %320 = icmp eq i32 %319, 0
  br i1 %320, label %355, label %321

321:                                              ; preds = %318
  %322 = load i8, i8* %122, align 32
  %323 = icmp eq i8 %322, 0
  br i1 %323, label %355, label %324

324:                                              ; preds = %321
  %325 = load %struct.modeinfo*, %struct.modeinfo** %124, align 32
  %326 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %325, i64 0, i32 0, i32 8
  %327 = load i8, i8* %326, align 1
  %328 = load i8*, i8** %123, align 16
  %329 = add nsw i64 %143, %85
  %330 = getelementptr inbounds i8, i8* %328, i64 %329
  store i8 %327, i8* %330, align 1
  %331 = load %struct.modeinfo*, %struct.modeinfo** %124, align 32
  %332 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %331, i64 0, i32 0, i32 8
  %333 = load i8, i8* %332, align 1
  %334 = icmp eq i8 %333, 0
  br i1 %334, label %338, label %335

335:                                              ; preds = %324
  %336 = load i8*, i8** %133, align 16
  %337 = getelementptr inbounds i8, i8* %336, i64 %329
  store i8 -1, i8* %337, align 1
  br label %355

338:                                              ; preds = %324
  %339 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %331, i64 0, i32 0, i32 0
  %340 = load i8, i8* %339, align 4
  %341 = icmp eq i8 %340, 7
  br i1 %341, label %342, label %352

342:                                              ; preds = %338
  %343 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %331, i64 0, i32 0, i32 2
  %344 = load i8, i8* %343, align 2
  %345 = icmp eq i8 %344, 1
  br i1 %345, label %346, label %352

346:                                              ; preds = %342
  %347 = load i8*, i8** %133, align 16
  %348 = getelementptr inbounds i8, i8* %347, i64 %329
  %349 = load i8, i8* %348, align 1
  %350 = icmp eq i8 %349, 1
  br i1 %350, label %351, label %355

351:                                              ; preds = %346
  store i8 0, i8* %348, align 1
  br label %355

352:                                              ; preds = %342, %338
  %353 = load i8*, i8** %133, align 16
  %354 = getelementptr inbounds i8, i8* %353, i64 %329
  store i8 1, i8* %354, align 1
  br label %355

355:                                              ; preds = %270, %321, %318, %315, %352, %351, %346, %335, %266
  %356 = load i64, i64* %58, align 8
  %357 = load %struct.TOKENLIST*, %struct.TOKENLIST** %60, align 8
  %358 = getelementptr inbounds %struct.TOKENLIST, %struct.TOKENLIST* %357, i64 %62, i32 1
  %359 = bitcast %struct.TOKENEXTRA** %358 to i64*
  store i64 %356, i64* %359, align 8
  %360 = load i8*, i8** %134, align 8
  %361 = getelementptr inbounds i8, i8* %360, i64 1
  store i8* %361, i8** %134, align 8
  %362 = load i32*, i32** %87, align 16
  %363 = getelementptr inbounds i32, i32* %362, i64 1
  store i32* %363, i32** %87, align 16
  %364 = load <2 x i8*>, <2 x i8*>* %139, align 8
  %365 = getelementptr i8, <2 x i8*> %364, <2 x i64> <i64 16, i64 8>
  store <2 x i8*> %365, <2 x i8*>* %140, align 8
  %366 = load i8*, i8** %135, align 8
  %367 = getelementptr inbounds i8, i8* %366, i64 8
  store i8* %367, i8** %135, align 8
  %368 = add nsw i64 %144, 16
  %369 = add nsw i64 %142, 8
  %370 = load %struct.modeinfo*, %struct.modeinfo** %124, align 32
  %371 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %370, i64 0, i32 0, i32 8
  %372 = load i8, i8* %371, align 1
  %373 = zext i8 %372 to i64
  %374 = getelementptr inbounds i32, i32* %6, i64 %373
  %375 = load i32, i32* %374, align 4
  %376 = add nsw i32 %375, 1
  store i32 %376, i32* %374, align 4
  %377 = load %struct.modeinfo*, %struct.modeinfo** %124, align 32
  %378 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %377, i64 1
  store %struct.modeinfo* %378, %struct.modeinfo** %124, align 32
  %379 = load %struct.PARTITION_INFO*, %struct.PARTITION_INFO** %136, align 32
  %380 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %379, i64 1
  store %struct.PARTITION_INFO* %380, %struct.PARTITION_INFO** %136, align 32
  %381 = load %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES** %54, align 16
  %382 = getelementptr inbounds %struct.ENTROPY_CONTEXT_PLANES, %struct.ENTROPY_CONTEXT_PLANES* %381, i64 1
  store %struct.ENTROPY_CONTEXT_PLANES* %382, %struct.ENTROPY_CONTEXT_PLANES** %54, align 16
  %383 = add nuw nsw i64 %143, 1
  %384 = load i32, i32* %26, align 8
  %385 = sext i32 %384 to i64
  %386 = icmp slt i64 %383, %385
  br i1 %386, label %141, label %387

387:                                              ; preds = %355, %90
  %388 = phi i64 [ %91, %90 ], [ %100, %355 ]
  %389 = getelementptr inbounds %struct.VP8Common, %struct.VP8Common* %1, i64 0, i32 11, i64 %388
  %390 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 12, i32 13
  %391 = load i8*, i8** %390, align 8
  %392 = getelementptr inbounds i8, i8* %391, i64 16
  %393 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 12, i32 14
  %394 = load i8*, i8** %393, align 32
  %395 = getelementptr inbounds i8, i8* %394, i64 8
  %396 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 12, i32 15
  %397 = load i8*, i8** %396, align 8
  %398 = getelementptr inbounds i8, i8* %397, i64 8
  tail call void @vp8_extend_mb_row(%struct.yv12_buffer_config* %389, i8* %392, i8* %395, i8* %398) #7
  %399 = load atomic volatile i32, i32* %29 acquire, align 4
  %400 = icmp eq i32 %399, 0
  br i1 %400, label %404, label %401

401:                                              ; preds = %387
  %402 = load atomic volatile i32, i32* %9 acquire, align 4
  %403 = getelementptr inbounds %struct.vpx_atomic_int, %struct.vpx_atomic_int* %38, i64 0, i32 0
  store atomic volatile i32 %402, i32* %403 release, align 4
  br label %404

404:                                              ; preds = %387, %401
  %405 = getelementptr inbounds %struct.macroblockd, %struct.macroblockd* %4, i64 0, i32 13
  %406 = load %struct.modeinfo*, %struct.modeinfo** %405, align 32
  %407 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %406, i64 1
  store %struct.modeinfo* %407, %struct.modeinfo** %405, align 32
  %408 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %3, i64 0, i32 7
  %409 = load %struct.PARTITION_INFO*, %struct.PARTITION_INFO** %408, align 32
  %410 = getelementptr inbounds %struct.PARTITION_INFO, %struct.PARTITION_INFO* %409, i64 1
  store %struct.PARTITION_INFO* %410, %struct.PARTITION_INFO** %408, align 32
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25)
  ret void
}

declare i32 @sem_wait(%union.sem_t*) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @vp8_setup_block_ptrs(%struct.macroblock*) local_unnamed_addr #5 {
  %2 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 0
  %3 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 0, i32 0
  store i16* %2, i16** %3, align 8
  %4 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 4
  %5 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 1, i32 0
  store i16* %4, i16** %5, align 8
  %6 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 8
  %7 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 2, i32 0
  store i16* %6, i16** %7, align 8
  %8 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 12
  %9 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 3, i32 0
  store i16* %8, i16** %9, align 8
  %10 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 64
  %11 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 4, i32 0
  store i16* %10, i16** %11, align 8
  %12 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 68
  %13 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 5, i32 0
  store i16* %12, i16** %13, align 8
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 72
  %15 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 6, i32 0
  store i16* %14, i16** %15, align 8
  %16 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 76
  %17 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 7, i32 0
  store i16* %16, i16** %17, align 8
  %18 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 128
  %19 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 8, i32 0
  store i16* %18, i16** %19, align 8
  %20 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 132
  %21 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 9, i32 0
  store i16* %20, i16** %21, align 8
  %22 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 136
  %23 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 10, i32 0
  store i16* %22, i16** %23, align 8
  %24 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 140
  %25 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 11, i32 0
  store i16* %24, i16** %25, align 8
  %26 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 192
  %27 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 12, i32 0
  store i16* %26, i16** %27, align 8
  %28 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 196
  %29 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 13, i32 0
  store i16* %28, i16** %29, align 8
  %30 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 200
  %31 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 14, i32 0
  store i16* %30, i16** %31, align 8
  %32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 204
  %33 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 15, i32 0
  store i16* %32, i16** %33, align 8
  %34 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 256
  %35 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 16, i32 0
  store i16* %34, i16** %35, align 8
  %36 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 260
  %37 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 17, i32 0
  store i16* %36, i16** %37, align 8
  %38 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 288
  %39 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 18, i32 0
  store i16* %38, i16** %39, align 8
  %40 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 292
  %41 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 19, i32 0
  store i16* %40, i16** %41, align 8
  %42 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 320
  %43 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 20, i32 0
  store i16* %42, i16** %43, align 8
  %44 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 324
  %45 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 21, i32 0
  store i16* %44, i16** %45, align 8
  %46 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 352
  %47 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 22, i32 0
  store i16* %46, i16** %47, align 8
  %48 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 356
  %49 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 23, i32 0
  store i16* %48, i16** %49, align 8
  %50 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 0, i64 384
  %51 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 24, i32 0
  store i16* %50, i16** %51, align 8
  %52 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 0
  %53 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 0, i32 1
  store i16* %52, i16** %53, align 8
  %54 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 16
  %55 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 1, i32 1
  store i16* %54, i16** %55, align 8
  %56 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 32
  %57 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 2, i32 1
  store i16* %56, i16** %57, align 8
  %58 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 48
  %59 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 3, i32 1
  store i16* %58, i16** %59, align 8
  %60 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 64
  %61 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 4, i32 1
  store i16* %60, i16** %61, align 8
  %62 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 80
  %63 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 5, i32 1
  store i16* %62, i16** %63, align 8
  %64 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 96
  %65 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 6, i32 1
  store i16* %64, i16** %65, align 8
  %66 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 112
  %67 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 7, i32 1
  store i16* %66, i16** %67, align 8
  %68 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 128
  %69 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 8, i32 1
  store i16* %68, i16** %69, align 8
  %70 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 144
  %71 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 9, i32 1
  store i16* %70, i16** %71, align 8
  %72 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 160
  %73 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 10, i32 1
  store i16* %72, i16** %73, align 8
  %74 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 176
  %75 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 11, i32 1
  store i16* %74, i16** %75, align 8
  %76 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 192
  %77 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 12, i32 1
  store i16* %76, i16** %77, align 8
  %78 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 208
  %79 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 13, i32 1
  store i16* %78, i16** %79, align 8
  %80 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 224
  %81 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 14, i32 1
  store i16* %80, i16** %81, align 8
  %82 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 240
  %83 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 15, i32 1
  store i16* %82, i16** %83, align 8
  %84 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 256
  %85 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 16, i32 1
  store i16* %84, i16** %85, align 8
  %86 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 272
  %87 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 17, i32 1
  store i16* %86, i16** %87, align 8
  %88 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 288
  %89 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 18, i32 1
  store i16* %88, i16** %89, align 8
  %90 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 304
  %91 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 19, i32 1
  store i16* %90, i16** %91, align 8
  %92 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 320
  %93 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 20, i32 1
  store i16* %92, i16** %93, align 8
  %94 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 336
  %95 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 21, i32 1
  store i16* %94, i16** %95, align 8
  %96 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 352
  %97 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 22, i32 1
  store i16* %96, i16** %97, align 8
  %98 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 368
  %99 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 23, i32 1
  store i16* %98, i16** %99, align 8
  %100 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 1, i64 384
  %101 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 24, i32 1
  store i16* %100, i16** %101, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_build_block_offsets(%struct.macroblock*) local_unnamed_addr #2 {
  %2 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 6
  tail call void @vp8_build_block_doffsets(%struct.macroblockd* %2) #7
  %3 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 2, i64 0
  %4 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 3
  store i8* %3, i8** %4, align 32
  %5 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 0, i32 9
  store i8** %4, i8*** %5, align 8
  %6 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 0, i32 11
  store i32 16, i32* %6, align 4
  %7 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 0, i32 10
  store i32 0, i32* %7, align 8
  %8 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 1, i32 9
  store i8** %4, i8*** %8, align 8
  %9 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 1, i32 11
  store i32 16, i32* %9, align 4
  %10 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 1, i32 10
  store i32 4, i32* %10, align 8
  %11 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 2, i32 9
  store i8** %4, i8*** %11, align 8
  %12 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 2, i32 11
  store i32 16, i32* %12, align 4
  %13 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 2, i32 10
  store i32 8, i32* %13, align 8
  %14 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 3, i32 9
  store i8** %4, i8*** %14, align 8
  %15 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 3, i32 11
  store i32 16, i32* %15, align 4
  %16 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 3, i32 10
  store i32 12, i32* %16, align 8
  %17 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 4, i32 9
  store i8** %4, i8*** %17, align 8
  %18 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 4, i32 11
  store i32 16, i32* %18, align 4
  %19 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 4, i32 10
  store i32 64, i32* %19, align 8
  %20 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 5, i32 9
  store i8** %4, i8*** %20, align 8
  %21 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 5, i32 11
  store i32 16, i32* %21, align 4
  %22 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 5, i32 10
  store i32 68, i32* %22, align 8
  %23 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 6, i32 9
  store i8** %4, i8*** %23, align 8
  %24 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 6, i32 11
  store i32 16, i32* %24, align 4
  %25 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 6, i32 10
  store i32 72, i32* %25, align 8
  %26 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 7, i32 9
  store i8** %4, i8*** %26, align 8
  %27 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 7, i32 11
  store i32 16, i32* %27, align 4
  %28 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 7, i32 10
  store i32 76, i32* %28, align 8
  %29 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 8, i32 9
  store i8** %4, i8*** %29, align 8
  %30 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 8, i32 11
  store i32 16, i32* %30, align 4
  %31 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 8, i32 10
  store i32 128, i32* %31, align 8
  %32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 9, i32 9
  store i8** %4, i8*** %32, align 8
  %33 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 9, i32 11
  store i32 16, i32* %33, align 4
  %34 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 9, i32 10
  store i32 132, i32* %34, align 8
  %35 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 10, i32 9
  store i8** %4, i8*** %35, align 8
  %36 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 10, i32 11
  store i32 16, i32* %36, align 4
  %37 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 10, i32 10
  store i32 136, i32* %37, align 8
  %38 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 11, i32 9
  store i8** %4, i8*** %38, align 8
  %39 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 11, i32 11
  store i32 16, i32* %39, align 4
  %40 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 11, i32 10
  store i32 140, i32* %40, align 8
  %41 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 12, i32 9
  store i8** %4, i8*** %41, align 8
  %42 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 12, i32 11
  store i32 16, i32* %42, align 4
  %43 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 12, i32 10
  store i32 192, i32* %43, align 8
  %44 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 13, i32 9
  store i8** %4, i8*** %44, align 8
  %45 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 13, i32 11
  store i32 16, i32* %45, align 4
  %46 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 13, i32 10
  store i32 196, i32* %46, align 8
  %47 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 14, i32 9
  store i8** %4, i8*** %47, align 8
  %48 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 14, i32 11
  store i32 16, i32* %48, align 4
  %49 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 14, i32 10
  store i32 200, i32* %49, align 8
  %50 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 15, i32 9
  store i8** %4, i8*** %50, align 8
  %51 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 15, i32 11
  store i32 16, i32* %51, align 4
  %52 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 15, i32 10
  store i32 204, i32* %52, align 8
  %53 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 5, i32 14
  %54 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 5, i32 9
  %55 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 16, i32 9
  store i8** %53, i8*** %55, align 8
  %56 = load i32, i32* %54, align 4
  %57 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 16, i32 11
  store i32 %56, i32* %57, align 4
  %58 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 16, i32 10
  store i32 0, i32* %58, align 8
  %59 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 17, i32 9
  store i8** %53, i8*** %59, align 8
  %60 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 17, i32 11
  store i32 %56, i32* %60, align 4
  %61 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 17, i32 10
  store i32 4, i32* %61, align 8
  %62 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 18, i32 9
  store i8** %53, i8*** %62, align 8
  %63 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 18, i32 11
  store i32 %56, i32* %63, align 4
  %64 = shl i32 %56, 2
  %65 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 18, i32 10
  store i32 %64, i32* %65, align 8
  %66 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 19, i32 9
  store i8** %53, i8*** %66, align 8
  %67 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 19, i32 11
  store i32 %56, i32* %67, align 4
  %68 = shl i32 %56, 2
  %69 = add i32 %68, 4
  %70 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 19, i32 10
  store i32 %69, i32* %70, align 8
  %71 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 5, i32 15
  %72 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 20, i32 9
  store i8** %71, i8*** %72, align 8
  %73 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 20, i32 11
  store i32 %56, i32* %73, align 4
  %74 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 20, i32 10
  store i32 0, i32* %74, align 8
  %75 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 21, i32 9
  store i8** %71, i8*** %75, align 8
  %76 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 21, i32 11
  store i32 %56, i32* %76, align 4
  %77 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 21, i32 10
  store i32 4, i32* %77, align 8
  %78 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 22, i32 9
  store i8** %71, i8*** %78, align 8
  %79 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 22, i32 11
  store i32 %56, i32* %79, align 4
  %80 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 22, i32 10
  store i32 %64, i32* %80, align 8
  %81 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 23, i32 9
  store i8** %71, i8*** %81, align 8
  %82 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 23, i32 11
  store i32 %56, i32* %82, align 4
  %83 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %0, i64 0, i32 4, i64 23, i32 10
  store i32 %69, i32* %83, align 8
  ret void
}

declare void @vp8_build_block_doffsets(%struct.macroblockd*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8cx_encode_intra_macroblock(%struct.VP8_COMP*, %struct.macroblock*, %struct.TOKENEXTRA**) local_unnamed_addr #2 {
  %4 = alloca i32, align 4
  %5 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %5) #7
  store i32 -1431655766, i32* %4, align 4
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 0
  %7 = load i32, i32* %6, align 16
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %14, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 114
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 2
  br i1 %12, label %14, label %13

13:                                               ; preds = %9
  call void @vp8_rd_pick_intra_mode(%struct.macroblock* %1, i32* nonnull %4) #7
  br label %15

14:                                               ; preds = %9, %3
  call void @vp8_pick_intra_mode(%struct.macroblock* %1, i32* nonnull %4) #7
  br label %15

15:                                               ; preds = %14, %13
  %16 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 51
  %17 = load i32, i32* %16, align 8
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %48

19:                                               ; preds = %15
  %20 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 19
  %21 = load i32*, i32** %20, align 16
  %22 = load i32, i32* %21, align 4
  %23 = zext i32 %22 to i64
  %24 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 188
  %25 = load i32, i32* %24, align 4
  %26 = shl i32 %25, 2
  %27 = zext i32 %26 to i64
  %28 = add nuw nsw i64 %27, %23
  %29 = shl nuw nsw i64 %23, 2
  %30 = zext i32 %25 to i64
  %31 = add nuw nsw i64 %29, %30
  %32 = icmp ugt i32 %22, %25
  br i1 %32, label %33, label %39

33:                                               ; preds = %19
  %34 = lshr i64 %28, 1
  %35 = add nuw nsw i64 %34, %31
  %36 = udiv i64 %35, %28
  %37 = trunc i64 %36 to i32
  %38 = add nsw i32 %37, -1
  br label %45

39:                                               ; preds = %19
  %40 = lshr i64 %31, 1
  %41 = add nuw nsw i64 %28, %40
  %42 = udiv i64 %41, %31
  %43 = trunc i64 %42 to i32
  %44 = sub nsw i32 1, %43
  br label %45

45:                                               ; preds = %33, %39
  %46 = phi i32 [ %44, %39 ], [ %38, %33 ]
  %47 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 21
  store i32 %46, i32* %47, align 32
  call void @vp8_update_zbin_extra(%struct.VP8_COMP* %0, %struct.macroblock* %1) #7
  br label %48

48:                                               ; preds = %45, %15
  %49 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 13
  %50 = load %struct.modeinfo*, %struct.modeinfo** %49, align 32
  %51 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %50, i64 0, i32 0, i32 0
  %52 = load i8, i8* %51, align 4
  %53 = icmp eq i8 %52, 4
  br i1 %53, label %54, label %55

54:                                               ; preds = %48
  call void @vp8_encode_intra4x4mby(%struct.macroblock* %1) #7
  br label %56

55:                                               ; preds = %48
  call void @vp8_encode_intra16x16mby(%struct.macroblock* %1) #7
  br label %56

56:                                               ; preds = %55, %54
  call void @vp8_encode_intra16x16mbuv(%struct.macroblock* %1) #7
  %57 = load %struct.modeinfo*, %struct.modeinfo** %49, align 32
  %58 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %57, i64 0, i32 0, i32 0
  %59 = load i8, i8* %58, align 4
  %60 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %57, i64 0, i32 0, i32 1
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %59 to i64
  %63 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 52, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = add nsw i32 %64, 1
  store i32 %65, i32* %63, align 4
  %66 = zext i8 %61 to i64
  %67 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 53, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %67, align 4
  call void @vp8_tokenize_mb(%struct.VP8_COMP* %0, %struct.macroblock* %1, %struct.TOKENEXTRA** %2) #7
  %70 = load %struct.modeinfo*, %struct.modeinfo** %49, align 32
  %71 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %70, i64 0, i32 0, i32 0
  %72 = load i8, i8* %71, align 4
  %73 = icmp eq i8 %72, 4
  br i1 %73, label %112, label %74

74:                                               ; preds = %56
  %75 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 5, i64 0
  %76 = icmp eq i8 %72, 9
  br i1 %76, label %104, label %77

77:                                               ; preds = %74
  %78 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 24
  %79 = load i8, i8* %78, align 8
  %80 = icmp sgt i8 %79, 1
  %81 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 24, i32 1
  %82 = load i16*, i16** %81, align 8
  %83 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 1, i64 0
  br i1 %80, label %84, label %85

84:                                               ; preds = %77
  call void @vp8_short_inv_walsh4x4_sse2(i16* %82, i16* %83) #7
  br label %86

85:                                               ; preds = %77
  call void @vp8_short_inv_walsh4x4_1_c(i16* %82, i16* %83) #7
  br label %86

86:                                               ; preds = %85, %84
  br label %87

87:                                               ; preds = %128, %86
  %88 = phi i64 [ 0, %86 ], [ %130, %128 ]
  %89 = phi i16* [ %83, %86 ], [ %129, %128 ]
  %90 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 %88
  %91 = load i8, i8* %90, align 1
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %93, label %97

93:                                               ; preds = %87
  %94 = load i16, i16* %89, align 2
  %95 = icmp eq i16 %94, 0
  br i1 %95, label %97, label %96

96:                                               ; preds = %93
  store i8 1, i8* %90, align 1
  br label %97

97:                                               ; preds = %96, %93, %87
  %98 = or i64 %88, 1
  %99 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = icmp eq i8 %100, 0
  br i1 %101, label %123, label %128

102:                                              ; preds = %128
  %103 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 6, i64 0
  br label %104

104:                                              ; preds = %74, %102
  %105 = phi i16* [ %103, %102 ], [ %75, %74 ]
  %106 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 1, i64 0
  %107 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 12, i32 13
  %108 = load i8*, i8** %107, align 8
  %109 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 12, i32 4
  %110 = load i32, i32* %109, align 16
  %111 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 0
  call void @vp8_dequant_idct_add_y_block_sse2(i16* %106, i16* %105, i8* %108, i32 %110, i8* %111) #7
  br label %112

112:                                              ; preds = %56, %104
  %113 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 1, i64 256
  %114 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 8, i64 0
  %115 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 12, i32 14
  %116 = load i8*, i8** %115, align 32
  %117 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 12, i32 15
  %118 = load i8*, i8** %117, align 8
  %119 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 12, i32 9
  %120 = load i32, i32* %119, align 4
  %121 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 16
  call void @vp8_dequant_idct_add_uv_block_sse2(i16* %113, i16* %114, i8* %116, i8* %118, i32 %120, i8* %121) #7
  %122 = load i32, i32* %4, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %5) #7
  ret i32 %122

123:                                              ; preds = %97
  %124 = getelementptr inbounds i16, i16* %89, i64 16
  %125 = load i16, i16* %124, align 2
  %126 = icmp eq i16 %125, 0
  br i1 %126, label %128, label %127

127:                                              ; preds = %123
  store i8 1, i8* %99, align 1
  br label %128

128:                                              ; preds = %127, %123, %97
  %129 = getelementptr inbounds i16, i16* %89, i64 32
  %130 = add nuw nsw i64 %88, 2
  %131 = icmp eq i64 %130, 16
  br i1 %131, label %102, label %87
}

declare void @vp8_rd_pick_intra_mode(%struct.macroblock*, i32*) local_unnamed_addr #3

declare void @vp8_pick_intra_mode(%struct.macroblock*, i32*) local_unnamed_addr #3

declare void @vp8_update_zbin_extra(%struct.VP8_COMP*, %struct.macroblock*) local_unnamed_addr #3

declare void @vp8_encode_intra4x4mby(%struct.macroblock*) local_unnamed_addr #3

declare void @vp8_encode_intra16x16mby(%struct.macroblock*) local_unnamed_addr #3

declare void @vp8_encode_intra16x16mbuv(%struct.macroblock*) local_unnamed_addr #3

declare void @vp8_tokenize_mb(%struct.VP8_COMP*, %struct.macroblock*, %struct.TOKENEXTRA**) local_unnamed_addr #3

declare void @vp8_dequant_idct_add_uv_block_sse2(i16*, i16*, i8*, i8*, i32, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8cx_encode_inter_macroblock(%struct.VP8_COMP*, %struct.macroblock*, %struct.TOKENEXTRA**, i32, i32, i32, i32) local_unnamed_addr #2 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6
  %12 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #7
  store i32 0, i32* %8, align 4
  %13 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #7
  store i32 -1431655766, i32* %9, align 4
  %14 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %14) #7
  store i32 -1431655766, i32* %10, align 4
  %15 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 34
  store i32 0, i32* %15, align 32
  %16 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 23
  %17 = load i8, i8* %16, align 32
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %26, label %19

19:                                               ; preds = %7
  %20 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 13
  %21 = load %struct.modeinfo*, %struct.modeinfo** %20, align 32
  %22 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %21, i64 0, i32 0, i32 8
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i64
  %25 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 136, i64 %24
  br label %28

26:                                               ; preds = %7
  %27 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 44
  br label %28

28:                                               ; preds = %26, %19
  %29 = phi i32* [ %27, %26 ], [ %25, %19 ]
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 35
  store i32 %30, i32* %31, align 4
  %32 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 44
  %33 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 0
  %34 = bitcast i32* %32 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %34, i8 0, i64 17, i1 false)
  %35 = load i32, i32* %33, align 16
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %56, label %37

37:                                               ; preds = %28
  %38 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 61
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 13
  %41 = load i32, i32* %40, align 16
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %47, label %43

43:                                               ; preds = %37
  %44 = load i64, i64* bitcast (void (%struct.block*, %struct.blockd*)** @vp8_fast_quantize_b to i64*), align 8
  %45 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 70
  %46 = bitcast void (%struct.block*, %struct.blockd*)** %45 to i64*
  store i64 %44, i64* %46, align 8
  store i32 0, i32* %38, align 4
  br label %47

47:                                               ; preds = %37, %43
  call void @vp8_rd_pick_inter_mode(%struct.VP8_COMP* %0, %struct.macroblock* %1, i32 %3, i32 %4, i32* nonnull %9, i32* nonnull %10, i32* nonnull %8, i32 %5, i32 %6) #7
  %48 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 2
  %49 = load i32, i32* %48, align 8
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %55, label %51

51:                                               ; preds = %47
  %52 = load i64, i64* bitcast (void (%struct.block*, %struct.blockd*)** @vp8_regular_quantize_b to i64*), align 8
  %53 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 70
  %54 = bitcast void (%struct.block*, %struct.blockd*)** %53 to i64*
  store i64 %52, i64* %54, align 8
  br label %55

55:                                               ; preds = %47, %51
  store i32 %39, i32* %38, align 4
  br label %57

56:                                               ; preds = %28
  call void @vp8_pick_inter_mode(%struct.VP8_COMP* %0, %struct.macroblock* %1, i32 %3, i32 %4, i32* nonnull %9, i32* nonnull %10, i32* nonnull %8, i32 %5, i32 %6) #7
  br label %57

57:                                               ; preds = %56, %55
  %58 = load i32, i32* %10, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 54
  %61 = load i64, i64* %60, align 8
  %62 = add nsw i64 %61, %59
  store i64 %62, i64* %60, align 8
  %63 = load i32, i32* %8, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 55
  %66 = load i64, i64* %65, align 16
  %67 = add nsw i64 %66, %64
  store i64 %67, i64* %65, align 16
  %68 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 51
  %69 = load i32, i32* %68, align 8
  %70 = icmp eq i32 %69, 1
  br i1 %70, label %71, label %100

71:                                               ; preds = %57
  %72 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 19
  %73 = load i32*, i32** %72, align 16
  %74 = load i32, i32* %73, align 4
  %75 = zext i32 %74 to i64
  %76 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 188
  %77 = load i32, i32* %76, align 4
  %78 = shl i32 %77, 2
  %79 = zext i32 %78 to i64
  %80 = add nuw nsw i64 %79, %75
  %81 = shl nuw nsw i64 %75, 2
  %82 = zext i32 %77 to i64
  %83 = add nuw nsw i64 %81, %82
  %84 = icmp ugt i32 %74, %77
  br i1 %84, label %85, label %91

85:                                               ; preds = %71
  %86 = lshr i64 %80, 1
  %87 = add nuw nsw i64 %86, %83
  %88 = udiv i64 %87, %80
  %89 = trunc i64 %88 to i32
  %90 = add nsw i32 %89, -1
  br label %97

91:                                               ; preds = %71
  %92 = lshr i64 %83, 1
  %93 = add nuw nsw i64 %80, %92
  %94 = udiv i64 %93, %83
  %95 = trunc i64 %94 to i32
  %96 = sub nsw i32 1, %95
  br label %97

97:                                               ; preds = %85, %91
  %98 = phi i32 [ %96, %91 ], [ %90, %85 ]
  %99 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 21
  store i32 %98, i32* %99, align 32
  br label %100

100:                                              ; preds = %97, %57
  %101 = load i8, i8* %16, align 32
  %102 = icmp eq i8 %101, 0
  br i1 %102, label %126, label %103

103:                                              ; preds = %100
  %104 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 201
  %105 = load i32, i32* %104, align 8
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %126

107:                                              ; preds = %103
  %108 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 139
  %109 = load i32, i32* %108, align 4
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %126, label %111

111:                                              ; preds = %107
  %112 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 13
  %113 = load %struct.modeinfo*, %struct.modeinfo** %112, align 32
  %114 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %113, i64 0, i32 0, i32 8
  %115 = load i8, i8* %114, align 1
  %116 = icmp eq i8 %115, 1
  br i1 %116, label %117, label %126

117:                                              ; preds = %111
  %118 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %113, i64 0, i32 0, i32 2
  %119 = load i8, i8* %118, align 2
  %120 = icmp eq i8 %119, 1
  br i1 %120, label %121, label %125

121:                                              ; preds = %117
  %122 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %113, i64 0, i32 0, i32 0
  %123 = load i8, i8* %122, align 4
  %124 = icmp eq i8 %123, 7
  br i1 %124, label %126, label %125

125:                                              ; preds = %121, %117
  store i8 0, i8* %114, align 1
  call void @vp8cx_mb_init_quantizer(%struct.VP8_COMP* %0, %struct.macroblock* %1, i32 1) #7
  br label %126

126:                                              ; preds = %121, %107, %100, %103, %125, %111
  %127 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 62
  store i32 0, i32* %127, align 32
  %128 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 61
  %129 = load i32, i32* %128, align 4
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %150, label %131

131:                                              ; preds = %126
  %132 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 13
  %133 = load %struct.modeinfo*, %struct.modeinfo** %132, align 32
  %134 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %133, i64 0, i32 0, i32 2
  %135 = load i8, i8* %134, align 2
  %136 = icmp eq i8 %135, 0
  br i1 %136, label %150, label %137

137:                                              ; preds = %131
  %138 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %133, i64 0, i32 0, i32 0
  %139 = load i8, i8* %138, align 4
  switch i8 %139, label %149 [
    i8 7, label %140
    i8 9, label %148
  ]

140:                                              ; preds = %137
  %141 = icmp eq i8 %135, 1
  br i1 %141, label %147, label %142

142:                                              ; preds = %140
  %143 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 52
  %144 = load i32, i32* %143, align 4
  %145 = icmp eq i32 %144, 1
  br i1 %145, label %146, label %147

146:                                              ; preds = %142
  store i32 12, i32* %127, align 32
  br label %150

147:                                              ; preds = %140, %142
  store i32 6, i32* %127, align 32
  br label %150

148:                                              ; preds = %137
  store i32 0, i32* %127, align 32
  br label %150

149:                                              ; preds = %137
  store i32 4, i32* %127, align 32
  br label %150

150:                                              ; preds = %131, %126, %148, %149, %146, %147
  %151 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 2
  %152 = load i32, i32* %151, align 8
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %155, label %154

154:                                              ; preds = %150
  call void @vp8_update_zbin_extra(%struct.VP8_COMP* %0, %struct.macroblock* %1) #7
  br label %155

155:                                              ; preds = %150, %154
  %156 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 13
  %157 = load %struct.modeinfo*, %struct.modeinfo** %156, align 32
  %158 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %157, i64 0, i32 0, i32 2
  %159 = load i8, i8* %158, align 2
  %160 = zext i8 %159 to i64
  %161 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 56, i64 %160
  %162 = load i32, i32* %161, align 4
  %163 = add nsw i32 %162, 1
  store i32 %163, i32* %161, align 4
  %164 = load i8, i8* %158, align 2
  switch i8 %164, label %190 [
    i8 0, label %165
    i8 1, label %186
    i8 2, label %188
  ]

165:                                              ; preds = %155
  call void @vp8_encode_intra16x16mbuv(%struct.macroblock* %1) #7
  %166 = load %struct.modeinfo*, %struct.modeinfo** %156, align 32
  %167 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %166, i64 0, i32 0, i32 0
  %168 = load i8, i8* %167, align 4
  %169 = icmp eq i8 %168, 4
  br i1 %169, label %170, label %171

170:                                              ; preds = %165
  call void @vp8_encode_intra4x4mby(%struct.macroblock* %1) #7
  br label %172

171:                                              ; preds = %165
  call void @vp8_encode_intra16x16mby(%struct.macroblock* %1) #7
  br label %172

172:                                              ; preds = %171, %170
  %173 = load %struct.modeinfo*, %struct.modeinfo** %156, align 32
  %174 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %173, i64 0, i32 0, i32 0
  %175 = load i8, i8* %174, align 4
  %176 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %173, i64 0, i32 0, i32 1
  %177 = load i8, i8* %176, align 1
  %178 = zext i8 %175 to i64
  %179 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 52, i64 %178
  %180 = load i32, i32* %179, align 4
  %181 = add nsw i32 %180, 1
  store i32 %181, i32* %179, align 4
  %182 = zext i8 %177 to i64
  %183 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 53, i64 %182
  %184 = load i32, i32* %183, align 4
  %185 = add nsw i32 %184, 1
  store i32 %185, i32* %183, align 4
  br label %224

186:                                              ; preds = %155
  %187 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 14
  br label %192

188:                                              ; preds = %155
  %189 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 15
  br label %192

190:                                              ; preds = %155
  %191 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 16
  br label %192

192:                                              ; preds = %188, %190, %186
  %193 = phi i32* [ %187, %186 ], [ %189, %188 ], [ %191, %190 ]
  %194 = load i32, i32* %193, align 4
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %195, i32 13
  %197 = load i8*, i8** %196, align 8
  %198 = sext i32 %3 to i64
  %199 = getelementptr inbounds i8, i8* %197, i64 %198
  %200 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 11, i32 13
  store i8* %199, i8** %200, align 8
  %201 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %195, i32 14
  %202 = load i8*, i8** %201, align 16
  %203 = sext i32 %4 to i64
  %204 = getelementptr inbounds i8, i8* %202, i64 %203
  %205 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 11, i32 14
  store i8* %204, i8** %205, align 32
  %206 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 11, i64 %195, i32 15
  %207 = load i8*, i8** %206, align 8
  %208 = getelementptr inbounds i8, i8* %207, i64 %203
  %209 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 11, i32 15
  store i8* %208, i8** %209, align 8
  %210 = load i32, i32* %15, align 32
  %211 = icmp eq i32 %210, 0
  br i1 %211, label %212, label %213

212:                                              ; preds = %192
  call void @vp8_encode_inter16x16(%struct.macroblock* %1) #7
  br label %224

213:                                              ; preds = %192
  %214 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 12, i32 13
  %215 = load i8*, i8** %214, align 8
  %216 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 12, i32 14
  %217 = load i8*, i8** %216, align 32
  %218 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 12, i32 15
  %219 = load i8*, i8** %218, align 8
  %220 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 12, i32 4
  %221 = load i32, i32* %220, align 16
  %222 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 12, i32 9
  %223 = load i32, i32* %222, align 4
  call void @vp8_build_inter16x16_predictors_mb(%struct.macroblockd* %11, i8* %215, i8* %217, i8* %219, i32 %221, i32 %223) #7
  br label %224

224:                                              ; preds = %212, %213, %172
  %225 = load i32, i32* %15, align 32
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %227, label %280

227:                                              ; preds = %224
  call void @vp8_tokenize_mb(%struct.VP8_COMP* %0, %struct.macroblock* %1, %struct.TOKENEXTRA** %2) #7
  %228 = load %struct.modeinfo*, %struct.modeinfo** %156, align 32
  %229 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %228, i64 0, i32 0, i32 0
  %230 = load i8, i8* %229, align 4
  %231 = icmp eq i8 %230, 4
  br i1 %231, label %270, label %232

232:                                              ; preds = %227
  %233 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 5, i64 0
  %234 = icmp eq i8 %230, 9
  br i1 %234, label %262, label %235

235:                                              ; preds = %232
  %236 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 24
  %237 = load i8, i8* %236, align 8
  %238 = icmp sgt i8 %237, 1
  %239 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 9, i64 24, i32 1
  %240 = load i16*, i16** %239, align 8
  %241 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 1, i64 0
  br i1 %238, label %242, label %243

242:                                              ; preds = %235
  call void @vp8_short_inv_walsh4x4_sse2(i16* %240, i16* %241) #7
  br label %244

243:                                              ; preds = %235
  call void @vp8_short_inv_walsh4x4_1_c(i16* %240, i16* %241) #7
  br label %244

244:                                              ; preds = %243, %242
  br label %245

245:                                              ; preds = %298, %244
  %246 = phi i64 [ 0, %244 ], [ %300, %298 ]
  %247 = phi i16* [ %241, %244 ], [ %299, %298 ]
  %248 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 %246
  %249 = load i8, i8* %248, align 1
  %250 = icmp eq i8 %249, 0
  br i1 %250, label %251, label %255

251:                                              ; preds = %245
  %252 = load i16, i16* %247, align 2
  %253 = icmp eq i16 %252, 0
  br i1 %253, label %255, label %254

254:                                              ; preds = %251
  store i8 1, i8* %248, align 1
  br label %255

255:                                              ; preds = %254, %251, %245
  %256 = or i64 %246, 1
  %257 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 %256
  %258 = load i8, i8* %257, align 1
  %259 = icmp eq i8 %258, 0
  br i1 %259, label %293, label %298

260:                                              ; preds = %298
  %261 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 6, i64 0
  br label %262

262:                                              ; preds = %232, %260
  %263 = phi i16* [ %261, %260 ], [ %233, %232 ]
  %264 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 1, i64 0
  %265 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 12, i32 13
  %266 = load i8*, i8** %265, align 8
  %267 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 12, i32 4
  %268 = load i32, i32* %267, align 16
  %269 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 0
  call void @vp8_dequant_idct_add_y_block_sse2(i16* %264, i16* %263, i8* %266, i32 %268, i8* %269) #7
  br label %270

270:                                              ; preds = %227, %262
  %271 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 1, i64 256
  %272 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 8, i64 0
  %273 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 12, i32 14
  %274 = load i8*, i8** %273, align 32
  %275 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 12, i32 15
  %276 = load i8*, i8** %275, align 8
  %277 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 12, i32 9
  %278 = load i32, i32* %277, align 4
  %279 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 6, i32 3, i64 16
  call void @vp8_dequant_idct_add_uv_block_sse2(i16* %271, i16* %272, i8* %274, i8* %276, i32 %278, i8* %279) #7
  br label %291

280:                                              ; preds = %224
  %281 = load %struct.modeinfo*, %struct.modeinfo** %156, align 32
  %282 = getelementptr inbounds %struct.modeinfo, %struct.modeinfo* %281, i64 0, i32 0, i32 6
  store i8 1, i8* %282, align 1
  %283 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 30
  %284 = load i32, i32* %283, align 32
  %285 = icmp eq i32 %284, 0
  br i1 %285, label %290, label %286

286:                                              ; preds = %280
  %287 = getelementptr inbounds %struct.macroblock, %struct.macroblock* %1, i64 0, i32 49
  %288 = load i32, i32* %287, align 8
  %289 = add nsw i32 %288, 1
  store i32 %289, i32* %287, align 8
  call void @vp8_fix_contexts(%struct.macroblockd* %11) #7
  br label %291

290:                                              ; preds = %280
  call void @vp8_stuff_mb(%struct.VP8_COMP* %0, %struct.macroblock* %1, %struct.TOKENEXTRA** %2) #7
  br label %291

291:                                              ; preds = %286, %290, %270
  %292 = load i32, i32* %9, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %14) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #7
  ret i32 %292

293:                                              ; preds = %255
  %294 = getelementptr inbounds i16, i16* %247, i64 16
  %295 = load i16, i16* %294, align 2
  %296 = icmp eq i16 %295, 0
  br i1 %296, label %298, label %297

297:                                              ; preds = %293
  store i8 1, i8* %257, align 1
  br label %298

298:                                              ; preds = %297, %293, %255
  %299 = getelementptr inbounds i16, i16* %247, i64 32
  %300 = add nuw nsw i64 %246, 2
  %301 = icmp eq i64 %300, 16
  br i1 %301, label %260, label %245
}

declare void @vp8_rd_pick_inter_mode(%struct.VP8_COMP*, %struct.macroblock*, i32, i32, i32*, i32*, i32*, i32, i32) local_unnamed_addr #3

declare void @vp8_pick_inter_mode(%struct.VP8_COMP*, %struct.macroblock*, i32, i32, i32*, i32*, i32*, i32, i32) local_unnamed_addr #3

declare void @vp8cx_mb_init_quantizer(%struct.VP8_COMP*, %struct.macroblock*, i32) local_unnamed_addr #3

declare void @vp8_encode_inter16x16(%struct.macroblock*) local_unnamed_addr #3

declare void @vp8_build_inter16x16_predictors_mb(%struct.macroblockd*, i8*, i8*, i8*, i32, i32) local_unnamed_addr #3

declare void @vp8_fix_contexts(%struct.macroblockd*) local_unnamed_addr #3

declare void @vp8_stuff_mb(%struct.VP8_COMP*, %struct.macroblock*, %struct.TOKENEXTRA**) local_unnamed_addr #3

declare void @vp8_init_mbmode_probs(%struct.VP8Common*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @vp8_setup_intra_recon(%struct.yv12_buffer_config*) local_unnamed_addr #3

declare void @vp8_calc_ref_frame_costs(i32*, i32, i32, i32) local_unnamed_addr #3

declare void @vp8_copy_mem16x16_sse2(i8*, i32, i8*, i32) local_unnamed_addr #3

declare void @vp8_extend_mb_row(%struct.yv12_buffer_config*, i8*, i8*, i8*) local_unnamed_addr #3

declare i32 @vp8_encode_intra(%struct.VP8_COMP*, %struct.macroblock*, i32) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare i32 @gettimeofday(%struct.timeval* nocapture, i8* nocapture) local_unnamed_addr #6

declare void @vp8_short_inv_walsh4x4_sse2(i16*, i16*) local_unnamed_addr #3

declare void @vp8_short_inv_walsh4x4_1_c(i16*, i16*) local_unnamed_addr #3

declare void @vp8_dequant_idct_add_y_block_sse2(i16*, i16*, i8*, i32, i8*) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{i32 -2146179450, i32 -2146179441}
