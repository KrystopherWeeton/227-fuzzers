; ModuleID = '../../third_party/webrtc/modules/audio_mixer/audio_frame_manipulator.cc'
source_filename = "../../third_party/webrtc/modules/audio_mixer/audio_frame_manipulator.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.webrtc::AudioFrame" = type { i32, i64, i64, i64, i32, i64, i32, i32, i32, i64, %"class.webrtc::RtpPacketInfos", [7680 x i16], i8, %"class.absl::optional.9" }
%"class.webrtc::RtpPacketInfos" = type { %"class.rtc::scoped_refptr" }
%"class.rtc::scoped_refptr" = type { %"class.webrtc::RtpPacketInfos::Data"* }
%"class.webrtc::RtpPacketInfos::Data" = type { %"class.rtc::RefCountedBase.base", %"class.std::__1::vector" }
%"class.rtc::RefCountedBase.base" = type <{ i32 (...)**, %"class.webrtc::webrtc_impl::RefCounter" }>
%"class.webrtc::webrtc_impl::RefCounter" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.webrtc::RtpPacketInfo"*, %"class.webrtc::RtpPacketInfo"*, %"class.std::__1::__compressed_pair.14" }
%"class.webrtc::RtpPacketInfo" = type { i32, %"class.std::__1::vector.1", i32, %"class.absl::optional", %"class.absl::optional.4", %"class.absl::optional.9", %"class.webrtc::Timestamp" }
%"class.std::__1::vector.1" = type { %"class.std::__1::__vector_base.2" }
%"class.std::__1::__vector_base.2" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { i8 }
%"class.absl::optional.4" = type { %"class.absl::optional_internal::optional_data.5" }
%"class.absl::optional_internal::optional_data.5" = type { %"class.absl::optional_internal::optional_data_base.6" }
%"class.absl::optional_internal::optional_data_base.6" = type { %"class.absl::optional_internal::optional_data_dtor_base.7" }
%"class.absl::optional_internal::optional_data_dtor_base.7" = type { i8, %union.anon.8 }
%union.anon.8 = type { %"struct.webrtc::AbsoluteCaptureTime" }
%"struct.webrtc::AbsoluteCaptureTime" = type { i64, %"class.absl::optional.9" }
%"class.webrtc::Timestamp" = type { %"class.webrtc::rtc_units_impl::UnitBase" }
%"class.webrtc::rtc_units_impl::UnitBase" = type { i64 }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"class.webrtc::RtpPacketInfo"* }
%"class.absl::optional.9" = type { %"class.absl::optional_internal::optional_data.10" }
%"class.absl::optional_internal::optional_data.10" = type { %"class.absl::optional_internal::optional_data_base.11" }
%"class.absl::optional_internal::optional_data_base.11" = type { %"class.absl::optional_internal::optional_data_dtor_base.12" }
%"class.absl::optional_internal::optional_data_dtor_base.12" = type { i8, %union.anon.13 }
%union.anon.13 = type { i64 }
%"class.webrtc::ChannelMixer" = type <{ i32, i32, i64, i64, %"class.std::__1::vector.19", %"class.std::__1::unique_ptr", i64, i8, [7 x i8] }>
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { %"class.std::__1::vector.21"*, %"class.std::__1::vector.21"*, %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::vector.21" = type opaque
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.std::__1::vector.21"* }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.27" }
%"class.std::__1::__compressed_pair.27" = type { %"struct.std::__1::__compressed_pair_elem.28" }
%"struct.std::__1::__compressed_pair_elem.28" = type { i16* }

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN6webrtc25AudioMixerCalculateEnergyERKNS_10AudioFrameE(%"class.webrtc::AudioFrame"* dereferenceable(15464)) local_unnamed_addr #0 {
  %2 = tail call zeroext i1 @_ZNK6webrtc10AudioFrame5mutedEv(%"class.webrtc::AudioFrame"* %0) #4
  br i1 %2, label %98, label %3

3:                                                ; preds = %1
  %4 = tail call i16* @_ZNK6webrtc10AudioFrame4dataEv(%"class.webrtc::AudioFrame"* %0) #4
  %5 = getelementptr inbounds %"class.webrtc::AudioFrame", %"class.webrtc::AudioFrame"* %0, i64 0, i32 3
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.webrtc::AudioFrame", %"class.webrtc::AudioFrame"* %0, i64 0, i32 5
  %8 = load i64, i64* %7, align 8
  %9 = mul i64 %8, %6
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %98, label %11

11:                                               ; preds = %3
  %12 = icmp ult i64 %9, 8
  br i1 %12, label %85, label %13

13:                                               ; preds = %11
  %14 = and i64 %9, -8
  %15 = add i64 %14, -8
  %16 = lshr exact i64 %15, 3
  %17 = add nuw nsw i64 %16, 1
  %18 = and i64 %17, 1
  %19 = icmp eq i64 %15, 0
  br i1 %19, label %55, label %20

20:                                               ; preds = %13
  %21 = sub nuw nsw i64 %17, %18
  br label %22

22:                                               ; preds = %22, %20
  %23 = phi i64 [ 0, %20 ], [ %52, %22 ]
  %24 = phi <4 x i32> [ zeroinitializer, %20 ], [ %50, %22 ]
  %25 = phi <4 x i32> [ zeroinitializer, %20 ], [ %51, %22 ]
  %26 = phi i64 [ %21, %20 ], [ %53, %22 ]
  %27 = getelementptr inbounds i16, i16* %4, i64 %23
  %28 = bitcast i16* %27 to <4 x i16>*
  %29 = load <4 x i16>, <4 x i16>* %28, align 2
  %30 = getelementptr inbounds i16, i16* %27, i64 4
  %31 = bitcast i16* %30 to <4 x i16>*
  %32 = load <4 x i16>, <4 x i16>* %31, align 2
  %33 = sext <4 x i16> %29 to <4 x i32>
  %34 = sext <4 x i16> %32 to <4 x i32>
  %35 = mul nsw <4 x i32> %33, %33
  %36 = mul nsw <4 x i32> %34, %34
  %37 = add <4 x i32> %35, %24
  %38 = add <4 x i32> %36, %25
  %39 = or i64 %23, 8
  %40 = getelementptr inbounds i16, i16* %4, i64 %39
  %41 = bitcast i16* %40 to <4 x i16>*
  %42 = load <4 x i16>, <4 x i16>* %41, align 2
  %43 = getelementptr inbounds i16, i16* %40, i64 4
  %44 = bitcast i16* %43 to <4 x i16>*
  %45 = load <4 x i16>, <4 x i16>* %44, align 2
  %46 = sext <4 x i16> %42 to <4 x i32>
  %47 = sext <4 x i16> %45 to <4 x i32>
  %48 = mul nsw <4 x i32> %46, %46
  %49 = mul nsw <4 x i32> %47, %47
  %50 = add <4 x i32> %48, %37
  %51 = add <4 x i32> %49, %38
  %52 = add i64 %23, 16
  %53 = add i64 %26, -2
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %22, !llvm.loop !2

55:                                               ; preds = %22, %13
  %56 = phi <4 x i32> [ undef, %13 ], [ %50, %22 ]
  %57 = phi <4 x i32> [ undef, %13 ], [ %51, %22 ]
  %58 = phi i64 [ 0, %13 ], [ %52, %22 ]
  %59 = phi <4 x i32> [ zeroinitializer, %13 ], [ %50, %22 ]
  %60 = phi <4 x i32> [ zeroinitializer, %13 ], [ %51, %22 ]
  %61 = icmp eq i64 %18, 0
  br i1 %61, label %75, label %62

62:                                               ; preds = %55
  %63 = getelementptr inbounds i16, i16* %4, i64 %58
  %64 = bitcast i16* %63 to <4 x i16>*
  %65 = load <4 x i16>, <4 x i16>* %64, align 2
  %66 = getelementptr inbounds i16, i16* %63, i64 4
  %67 = bitcast i16* %66 to <4 x i16>*
  %68 = load <4 x i16>, <4 x i16>* %67, align 2
  %69 = sext <4 x i16> %65 to <4 x i32>
  %70 = sext <4 x i16> %68 to <4 x i32>
  %71 = mul nsw <4 x i32> %70, %70
  %72 = add <4 x i32> %71, %60
  %73 = mul nsw <4 x i32> %69, %69
  %74 = add <4 x i32> %73, %59
  br label %75

75:                                               ; preds = %55, %62
  %76 = phi <4 x i32> [ %56, %55 ], [ %74, %62 ]
  %77 = phi <4 x i32> [ %57, %55 ], [ %72, %62 ]
  %78 = add <4 x i32> %77, %76
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %80 = add <4 x i32> %78, %79
  %81 = shufflevector <4 x i32> %80, <4 x i32> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %82 = add <4 x i32> %80, %81
  %83 = extractelement <4 x i32> %82, i32 0
  %84 = icmp eq i64 %9, %14
  br i1 %84, label %98, label %85

85:                                               ; preds = %75, %11
  %86 = phi i64 [ 0, %11 ], [ %14, %75 ]
  %87 = phi i32 [ 0, %11 ], [ %83, %75 ]
  br label %88

88:                                               ; preds = %85, %88
  %89 = phi i64 [ %96, %88 ], [ %86, %85 ]
  %90 = phi i32 [ %95, %88 ], [ %87, %85 ]
  %91 = getelementptr inbounds i16, i16* %4, i64 %89
  %92 = load i16, i16* %91, align 2
  %93 = sext i16 %92 to i32
  %94 = mul nsw i32 %93, %93
  %95 = add i32 %94, %90
  %96 = add nuw i64 %89, 1
  %97 = icmp ult i64 %96, %9
  br i1 %97, label %88, label %98, !llvm.loop !4

98:                                               ; preds = %88, %75, %3, %1
  %99 = phi i32 [ 0, %1 ], [ 0, %3 ], [ %83, %75 ], [ %95, %88 ]
  ret i32 %99
}

declare zeroext i1 @_ZNK6webrtc10AudioFrame5mutedEv(%"class.webrtc::AudioFrame"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i16* @_ZNK6webrtc10AudioFrame4dataEv(%"class.webrtc::AudioFrame"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc4RampEffPNS_10AudioFrameE(float, float, %"class.webrtc::AudioFrame"*) local_unnamed_addr #0 {
  %4 = fcmp oeq float %0, %1
  br i1 %4, label %41, label %5

5:                                                ; preds = %3
  %6 = tail call zeroext i1 @_ZNK6webrtc10AudioFrame5mutedEv(%"class.webrtc::AudioFrame"* %2) #4
  br i1 %6, label %41, label %7

7:                                                ; preds = %5
  %8 = getelementptr inbounds %"class.webrtc::AudioFrame", %"class.webrtc::AudioFrame"* %2, i64 0, i32 3
  %9 = load i64, i64* %8, align 8
  %10 = fsub float %1, %0
  %11 = uitofp i64 %9 to float
  %12 = fdiv float %10, %11
  %13 = tail call i16* @_ZN6webrtc10AudioFrame12mutable_dataEv(%"class.webrtc::AudioFrame"* %2) #4
  %14 = icmp eq i64 %9, 0
  br i1 %14, label %41, label %15

15:                                               ; preds = %7
  %16 = getelementptr inbounds %"class.webrtc::AudioFrame", %"class.webrtc::AudioFrame"* %2, i64 0, i32 5
  %17 = load i64, i64* %16, align 8
  br label %18

18:                                               ; preds = %23, %15
  %19 = phi i64 [ %17, %15 ], [ %24, %23 ]
  %20 = phi i64 [ 0, %15 ], [ %26, %23 ]
  %21 = phi float [ %0, %15 ], [ %25, %23 ]
  %22 = icmp eq i64 %19, 0
  br i1 %22, label %23, label %28

23:                                               ; preds = %28, %18
  %24 = phi i64 [ 0, %18 ], [ %39, %28 ]
  %25 = fadd float %12, %21
  %26 = add nuw i64 %20, 1
  %27 = icmp eq i64 %26, %9
  br i1 %27, label %41, label %18

28:                                               ; preds = %18, %28
  %29 = phi i64 [ %39, %28 ], [ %19, %18 ]
  %30 = phi i64 [ %38, %28 ], [ 0, %18 ]
  %31 = mul i64 %29, %20
  %32 = add i64 %31, %30
  %33 = getelementptr inbounds i16, i16* %13, i64 %32
  %34 = load i16, i16* %33, align 2
  %35 = sitofp i16 %34 to float
  %36 = fmul float %21, %35
  %37 = fptosi float %36 to i16
  store i16 %37, i16* %33, align 2
  %38 = add nuw i64 %30, 1
  %39 = load i64, i64* %16, align 8
  %40 = icmp ult i64 %38, %39
  br i1 %40, label %28, label %23

41:                                               ; preds = %23, %7, %3, %5
  ret void
}

declare i16* @_ZN6webrtc10AudioFrame12mutable_dataEv(%"class.webrtc::AudioFrame"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc10RemixFrameEmPNS_10AudioFrameE(i64, %"class.webrtc::AudioFrame"*) local_unnamed_addr #0 {
  %3 = alloca %"class.webrtc::ChannelMixer", align 8
  %4 = getelementptr inbounds %"class.webrtc::AudioFrame", %"class.webrtc::AudioFrame"* %1, i64 0, i32 5
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, %0
  br i1 %6, label %22, label %7

7:                                                ; preds = %2
  %8 = icmp ult i64 %0, 3
  %9 = icmp ult i64 %5, 3
  %10 = and i1 %8, %9
  br i1 %10, label %11, label %15

11:                                               ; preds = %7
  %12 = icmp ugt i64 %5, %0
  br i1 %12, label %13, label %14

13:                                               ; preds = %11
  tail call void @_ZN6webrtc20AudioFrameOperations15DownmixChannelsEmPNS_10AudioFrameE(i64 %0, %"class.webrtc::AudioFrame"* %1) #4
  br label %22

14:                                               ; preds = %11
  tail call void @_ZN6webrtc20AudioFrameOperations13UpmixChannelsEmPNS_10AudioFrameE(i64 %0, %"class.webrtc::AudioFrame"* %1) #4
  br label %22

15:                                               ; preds = %7
  %16 = trunc i64 %0 to i32
  %17 = tail call i32 @_ZN6webrtc18GuessChannelLayoutEi(i32 %16) #4
  %18 = bitcast %"class.webrtc::ChannelMixer"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %18) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 72, i1 false)
  %19 = load i64, i64* %4, align 8
  %20 = trunc i64 %19 to i32
  %21 = tail call i32 @_ZN6webrtc18GuessChannelLayoutEi(i32 %20) #4
  call void @_ZN6webrtc12ChannelMixerC1ENS_13ChannelLayoutES1_(%"class.webrtc::ChannelMixer"* nonnull %3, i32 %21, i32 %17) #4
  call void @_ZN6webrtc12ChannelMixer9TransformEPNS_10AudioFrameE(%"class.webrtc::ChannelMixer"* nonnull %3, %"class.webrtc::AudioFrame"* %1) #4
  call void @_ZN6webrtc12ChannelMixerD1Ev(%"class.webrtc::ChannelMixer"* nonnull %3) #4
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %18) #4
  br label %22

22:                                               ; preds = %13, %14, %2, %15
  ret void
}

declare void @_ZN6webrtc20AudioFrameOperations15DownmixChannelsEmPNS_10AudioFrameE(i64, %"class.webrtc::AudioFrame"*) local_unnamed_addr #1

declare void @_ZN6webrtc20AudioFrameOperations13UpmixChannelsEmPNS_10AudioFrameE(i64, %"class.webrtc::AudioFrame"*) local_unnamed_addr #1

declare i32 @_ZN6webrtc18GuessChannelLayoutEi(i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN6webrtc12ChannelMixerC1ENS_13ChannelLayoutES1_(%"class.webrtc::ChannelMixer"*, i32, i32) unnamed_addr #1

declare void @_ZN6webrtc12ChannelMixer9TransformEPNS_10AudioFrameE(%"class.webrtc::ChannelMixer"*, %"class.webrtc::AudioFrame"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN6webrtc12ChannelMixerD1Ev(%"class.webrtc::ChannelMixer"*) unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5, !3}
!5 = !{!"llvm.loop.unroll.runtime.disable"}
