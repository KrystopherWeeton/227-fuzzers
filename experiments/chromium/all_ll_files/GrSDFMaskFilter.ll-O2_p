; ModuleID = '../../third_party/skia/src/gpu/text/GrSDFMaskFilter.cpp'
source_filename = "../../third_party/skia/src/gpu/text/GrSDFMaskFilter.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.GrSDFMaskFilterImpl = type { %class.SkMaskFilterBase.base, [4 x i8] }
%class.SkMaskFilterBase.base = type { %class.SkMaskFilter.base }
%class.SkMaskFilter.base = type { %class.SkFlattenable.base }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkMask = type <{ i8*, %struct.SkIRect, i32, i8, [3 x i8] }>
%struct.SkIRect = type { i32, i32, i32, i32 }
%class.SkMatrix = type { [9 x float], i32 }
%struct.SkIPoint = type { i32, i32 }
%struct.SkRect = type { float, float, float, float }
%class.sk_sp.9 = type { %class.SkFlattenable* }
%class.SkFlattenable = type { %class.SkRefCnt.base, [4 x i8] }
%class.SkReadBuffer = type <{ i8*, i8*, i8*, %class.SkTHashMap, i32, [4 x i8], %class.sk_sp*, i32, [4 x i8], {}**, i32, [4 x i8], %struct.SkDeserialProcs, i8, [7 x i8] }>
%class.SkTHashMap = type { %class.SkTHashTable }
%class.SkTHashTable = type { i32, i32, %class.SkAutoTArray }
%class.SkAutoTArray = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot"* }
%"struct.SkTHashTable<SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair, unsigned int, SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair>::Slot" = type <{ %"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair", i32, [4 x i8] }>
%"struct.SkTHashMap<unsigned int, sk_sp<SkFlattenable> (*)(SkReadBuffer &), SkGoodHash>::Pair" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, void (%class.sk_sp.9*, %class.SkReadBuffer*)* }
%class.sk_sp = type { %class.SkTypeface* }
%class.SkTypeface = type <{ %class.SkWeakRefCnt, i32, %class.SkFontStyle, %struct.SkRect, %class.SkOnce, i8, [6 x i8] }>
%class.SkWeakRefCnt = type { %class.SkRefCnt.base, %"struct.std::__1::atomic" }
%class.SkFontStyle = type { i32 }
%class.SkOnce = type { %"struct.std::__1::atomic.2" }
%"struct.std::__1::atomic.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__cxx_atomic_impl.5" }
%"struct.std::__1::__cxx_atomic_impl.5" = type { %"struct.std::__1::__cxx_atomic_base_impl.6" }
%"struct.std::__1::__cxx_atomic_base_impl.6" = type { i8 }
%struct.SkDeserialProcs = type { {}*, i8*, {}*, i8*, void (%class.sk_sp*, i8*, i64, i8*)*, i8* }
%class.sk_sp.10 = type { %class.SkMaskFilter* }
%class.SkMaskFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkRefCntBase = type <{ i32 (...)**, %"struct.std::__1::atomic", [4 x i8] }>
%class.SkWriteBuffer = type { i32 (...)**, %struct.SkSerialProcs }
%struct.SkSerialProcs = type { void (%class.sk_sp.15*, %class.SkPicture*, i8*)*, i8*, void (%class.sk_sp.15*, %class.SkImage*, i8*)*, i8*, void (%class.sk_sp.15*, %class.SkTypeface*, i8*)*, i8* }
%class.sk_sp.15 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkPicture = type <{ %class.SkRefCnt.base, i32, %"struct.std::__1::atomic.11", [7 x i8] }>
%"struct.std::__1::atomic.11" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__cxx_atomic_impl.13" }
%"struct.std::__1::__cxx_atomic_impl.13" = type { %"struct.std::__1::__cxx_atomic_base_impl.14" }
%"struct.std::__1::__cxx_atomic_base_impl.14" = type { i8 }
%class.SkImage = type <{ %class.SkRefCnt.base, [4 x i8], %struct.SkImageInfo, i32, [4 x i8] }>
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp.16, i32, i32 }
%class.sk_sp.16 = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt.17, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt.17 = type { %"struct.std::__1::atomic" }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%struct.SkISize = type { i32, i32 }
%class.SkMaskFilterBase = type { %class.SkMaskFilter.base, [4 x i8] }
%class.GrStyledShape = type opaque
%class.GrRecordingContext = type opaque
%class.GrSurfaceDrawContext = type opaque
%class.GrPaint = type opaque
%class.GrClip = type opaque
%"struct.SkMaskFilterBase::BlurRec" = type { float, i32 }
%"class.SkMaskFilterBase::NinePatch" = type { %struct.SkMask, %struct.SkIRect, %struct.SkIPoint, %class.SkCachedData* }
%class.SkCachedData = type opaque
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkPoint = type { float, float }

$_ZN19GrSDFMaskFilterImplD0Ev = comdat any

$_ZNK12SkRefCntBase16internal_disposeEv = comdat any

$_ZNK19GrSDFMaskFilterImpl10getFactoryEv = comdat any

$_ZNK19GrSDFMaskFilterImpl11getTypeNameEv = comdat any

$_ZNK13SkFlattenable7flattenER13SkWriteBuffer = comdat any

$_ZNK12SkMaskFilter18getFlattenableTypeEv = comdat any

$_ZN12SkRefCntBaseD2Ev = comdat any

@_ZTV19GrSDFMaskFilterImpl = hidden unnamed_addr constant { [20 x i8*] } { [20 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.SkRefCntBase*)* @_ZN12SkRefCntBaseD2Ev to i8*), i8* bitcast (void (%class.GrSDFMaskFilterImpl*)* @_ZN19GrSDFMaskFilterImplD0Ev to i8*), i8* bitcast (void (%class.SkRefCntBase*)* @_ZNK12SkRefCntBase16internal_disposeEv to i8*), i8* bitcast (void (%class.sk_sp.9*, %class.SkReadBuffer*)* (%class.GrSDFMaskFilterImpl*)* @_ZNK19GrSDFMaskFilterImpl10getFactoryEv to i8*), i8* bitcast (i8* (%class.GrSDFMaskFilterImpl*)* @_ZNK19GrSDFMaskFilterImpl11getTypeNameEv to i8*), i8* bitcast (void (%class.SkFlattenable*, %class.SkWriteBuffer*)* @_ZNK13SkFlattenable7flattenER13SkWriteBuffer to i8*), i8* bitcast (i32 (%class.SkMaskFilter*)* @_ZNK12SkMaskFilter18getFlattenableTypeEv to i8*), i8* bitcast (i8 (%class.GrSDFMaskFilterImpl*)* @_ZNK19GrSDFMaskFilterImpl9getFormatEv to i8*), i8* bitcast (i1 (%class.GrSDFMaskFilterImpl*, %struct.SkMask*, %struct.SkMask*, %class.SkMatrix*, %struct.SkIPoint*)* @_ZNK19GrSDFMaskFilterImpl10filterMaskEP6SkMaskRKS0_RK8SkMatrixP8SkIPoint to i8*), i8* bitcast (i1 (%class.SkMaskFilterBase*, %class.GrStyledShape*, %struct.SkIRect*, %struct.SkIRect*, %class.SkMatrix*, %struct.SkIRect*)* @_ZNK16SkMaskFilterBase16canFilterMaskGPUERK13GrStyledShapeRK7SkIRectS5_RK8SkMatrixPS3_ to i8*), i8* bitcast (i1 (%class.SkMaskFilterBase*, %class.GrRecordingContext*, %class.GrSurfaceDrawContext*, %class.GrPaint*, %class.GrClip*, %class.SkMatrix*, %class.GrStyledShape*)* @_ZNK16SkMaskFilterBase19directFilterMaskGPUEP18GrRecordingContextP20GrSurfaceDrawContextO7GrPaintPK6GrClipRK8SkMatrixRK13GrStyledShape to i8*), i8* bitcast (void ()* @_ZNK16SkMaskFilterBase13filterMaskGPUEP18GrRecordingContext18GrSurfaceProxyView11GrColorType11SkAlphaTypeRK8SkMatrixRK7SkIRect to i8*), i8* bitcast (void (%class.GrSDFMaskFilterImpl*, %struct.SkRect*, %struct.SkRect*)* @_ZNK19GrSDFMaskFilterImpl17computeFastBoundsERK6SkRectPS0_ to i8*), i8* bitcast (i1 (%class.SkMaskFilterBase*, %"struct.SkMaskFilterBase::BlurRec"*)* @_ZNK16SkMaskFilterBase7asABlurEPNS_7BlurRecE to i8*), i8* bitcast (void ()* @_ZNK16SkMaskFilterBase21onAsFragmentProcessorERK8GrFPArgs to i8*), i8* bitcast (i1 (%class.SkMaskFilterBase*)* @_ZNK16SkMaskFilterBase22onHasFragmentProcessorEv to i8*), i8* bitcast (i32 (%class.SkMaskFilterBase*, %struct.SkRect*, i32, %class.SkMatrix*, %struct.SkIRect*, %"class.SkMaskFilterBase::NinePatch"*)* @_ZNK16SkMaskFilterBase17filterRectsToNineEPK6SkRectiRK8SkMatrixRK7SkIRectPNS_9NinePatchE to i8*), i8* bitcast (i32 (%class.SkMaskFilterBase*, %class.SkRRect*, %class.SkMatrix*, %struct.SkIRect*, %"class.SkMaskFilterBase::NinePatch"*)* @_ZNK16SkMaskFilterBase17filterRRectToNineERK7SkRRectRK8SkMatrixRK7SkIRectPNS_9NinePatchE to i8*)] }, align 8
@.str = private unnamed_addr constant [20 x i8] c"GrSDFMaskFilterImpl\00", align 1

@_ZN19GrSDFMaskFilterImplC1Ev = hidden unnamed_addr alias void (%class.GrSDFMaskFilterImpl*), void (%class.GrSDFMaskFilterImpl*)* @_ZN19GrSDFMaskFilterImplC2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN19GrSDFMaskFilterImplC2Ev(%class.GrSDFMaskFilterImpl* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.GrSDFMaskFilterImpl, %class.GrSDFMaskFilterImpl* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 1, i32* %2, align 4
  %3 = getelementptr inbounds %class.GrSDFMaskFilterImpl, %class.GrSDFMaskFilterImpl* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV19GrSDFMaskFilterImpl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i8 @_ZNK19GrSDFMaskFilterImpl9getFormatEv(%class.GrSDFMaskFilterImpl* nocapture readnone) unnamed_addr #1 align 2 {
  ret i8 5
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK19GrSDFMaskFilterImpl10filterMaskEP6SkMaskRKS0_RK8SkMatrixP8SkIPoint(%class.GrSDFMaskFilterImpl* nocapture readnone, %struct.SkMask* nocapture, %struct.SkMask* dereferenceable(32), %class.SkMatrix* nocapture readnone dereferenceable(40), %struct.SkIPoint*) unnamed_addr #2 align 2 {
  %6 = alloca %struct.SkMask, align 8
  %7 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 3
  %8 = load i8, i8* %7, align 4
  switch i8 %8, label %65 [
    i8 1, label %9
    i8 0, label %9
    i8 4, label %9
  ]

9:                                                ; preds = %5, %5, %5
  %10 = bitcast %struct.SkMask* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #10
  call void @_ZN6SkMask18PrepareDestinationEiiRKS_(%struct.SkMask* nonnull sret %6, i32 4, i32 4, %struct.SkMask* dereferenceable(32) %2) #10
  %11 = bitcast %struct.SkMask* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* nonnull align 8 %10, i64 29, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #10
  %12 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 3
  store i8 5, i8* %12, align 4
  %13 = icmp eq %struct.SkIPoint* %4, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %9
  %15 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %4, i64 0, i32 0
  store i32 4, i32* %15, align 4
  %16 = getelementptr inbounds %struct.SkIPoint, %struct.SkIPoint* %4, i64 0, i32 1
  store i32 4, i32* %16, align 4
  br label %17

17:                                               ; preds = %9, %14
  %18 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %65, label %21

21:                                               ; preds = %17
  %22 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 0
  %23 = load i8*, i8** %22, align 8
  %24 = icmp eq i8* %23, null
  br i1 %24, label %25, label %28

25:                                               ; preds = %21
  %26 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %1, i64 0, i32 1
  %27 = bitcast %struct.SkIRect* %26 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %27, i8 0, i64 16, i1 false) #10
  br label %65

28:                                               ; preds = %21
  %29 = load i8, i8* %7, align 4
  %30 = icmp eq i8 %29, 1
  br i1 %30, label %31, label %46

31:                                               ; preds = %28
  %32 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1, i32 2
  %33 = load i32, i32* %32, align 4
  %34 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1, i32 0
  %35 = load i32, i32* %34, align 4
  %36 = sub i32 %33, %35
  %37 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1, i32 3
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1, i32 1
  %40 = load i32, i32* %39, align 4
  %41 = sub i32 %38, %40
  %42 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 2
  %43 = load i32, i32* %42, align 8
  %44 = zext i32 %43 to i64
  %45 = call zeroext i1 @_Z34SkGenerateDistanceFieldFromA8ImagePhPKhiim(i8* nonnull %23, i8* nonnull %19, i32 %36, i32 %41, i64 %44) #10
  br label %65

46:                                               ; preds = %28
  %47 = icmp eq i8 %29, 4
  %48 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1, i32 2
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1, i32 0
  %51 = load i32, i32* %50, align 4
  %52 = sub i32 %49, %51
  %53 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1, i32 3
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 1, i32 1
  %56 = load i32, i32* %55, align 4
  %57 = sub i32 %54, %56
  %58 = getelementptr inbounds %struct.SkMask, %struct.SkMask* %2, i64 0, i32 2
  %59 = load i32, i32* %58, align 8
  %60 = zext i32 %59 to i64
  br i1 %47, label %61, label %63

61:                                               ; preds = %46
  %62 = call zeroext i1 @_Z36SkGenerateDistanceFieldFromLCD16MaskPhPKhiim(i8* nonnull %23, i8* nonnull %19, i32 %52, i32 %57, i64 %60) #10
  br label %65

63:                                               ; preds = %46
  %64 = call zeroext i1 @_Z34SkGenerateDistanceFieldFromBWImagePhPKhiim(i8* nonnull %23, i8* nonnull %19, i32 %52, i32 %57, i64 %60) #10
  br label %65

65:                                               ; preds = %17, %5, %63, %61, %31, %25
  %66 = phi i1 [ false, %25 ], [ %45, %31 ], [ %62, %61 ], [ %64, %63 ], [ false, %5 ], [ true, %17 ]
  ret i1 %66
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN6SkMask18PrepareDestinationEiiRKS_(%struct.SkMask* sret, i32, i32, %struct.SkMask* dereferenceable(32)) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare zeroext i1 @_Z34SkGenerateDistanceFieldFromA8ImagePhPKhiim(i8*, i8*, i32, i32, i64) local_unnamed_addr #4

declare zeroext i1 @_Z36SkGenerateDistanceFieldFromLCD16MaskPhPKhiim(i8*, i8*, i32, i32, i64) local_unnamed_addr #4

declare zeroext i1 @_Z34SkGenerateDistanceFieldFromBWImagePhPKhiim(i8*, i8*, i32, i32, i64) local_unnamed_addr #4

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK19GrSDFMaskFilterImpl17computeFastBoundsERK6SkRectPS0_(%class.GrSDFMaskFilterImpl* nocapture readnone, %struct.SkRect* nocapture readonly dereferenceable(16), %struct.SkRect* nocapture) unnamed_addr #5 align 2 {
  %4 = bitcast %struct.SkRect* %1 to <4 x float>*
  %5 = load <4 x float>, <4 x float>* %4, align 4
  %6 = fadd <4 x float> %5, <float -4.000000e+00, float -4.000000e+00, float 4.000000e+00, float 4.000000e+00>
  %7 = bitcast %struct.SkRect* %2 to <4 x float>*
  store <4 x float> %6, <4 x float>* %7, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN19GrSDFMaskFilterImpl10CreateProcER12SkReadBuffer(%class.sk_sp.9* noalias nocapture sret, %class.SkReadBuffer* nocapture readnone dereferenceable(136)) #2 align 2 {
  %3 = tail call i8* @_Znwm(i64 16) #11, !noalias !2
  %4 = getelementptr inbounds i8, i8* %3, i64 8
  %5 = bitcast i8* %4 to i32*
  store i32 1, i32* %5, align 4, !noalias !2
  %6 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV19GrSDFMaskFilterImpl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %6, align 8, !noalias !2
  %7 = ptrtoint i8* %3 to i64
  %8 = bitcast %class.sk_sp.9* %0 to i64*
  store i64 %7, i64* %8, align 8
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN15GrSDFMaskFilter4MakeEv(%class.sk_sp.10* noalias nocapture sret) local_unnamed_addr #6 align 2 {
  %2 = tail call i8* @_Znwm(i64 16) #11
  %3 = getelementptr inbounds i8, i8* %2, i64 8
  %4 = bitcast i8* %3 to i32*
  store i32 1, i32* %4, align 4
  %5 = bitcast i8* %2 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [20 x i8*] }, { [20 x i8*] }* @_ZTV19GrSDFMaskFilterImpl, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = bitcast %class.sk_sp.10* %0 to i8**
  store i8* %2, i8** %6, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_Z37gr_register_sdf_maskfilter_createprocv() local_unnamed_addr #2 {
  tail call void @_ZN13SkFlattenable8RegisterEPKcPF5sk_spIS_ER12SkReadBufferE(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), void (%class.sk_sp.9*, %class.SkReadBuffer*)* nonnull @_ZN19GrSDFMaskFilterImpl10CreateProcER12SkReadBuffer) #10
  ret void
}

declare void @_ZN13SkFlattenable8RegisterEPKcPF5sk_spIS_ER12SkReadBufferE(i8*, void (%class.sk_sp.9*, %class.SkReadBuffer*)*) local_unnamed_addr #4

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #7

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN19GrSDFMaskFilterImplD0Ev(%class.GrSDFMaskFilterImpl*) unnamed_addr #8 comdat align 2 {
  %2 = bitcast %class.GrSDFMaskFilterImpl* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK12SkRefCntBase16internal_disposeEv(%class.SkRefCntBase*) unnamed_addr #2 comdat align 2 {
  %2 = icmp eq %class.SkRefCntBase* %0, null
  br i1 %2, label %8, label %3

3:                                                ; preds = %1
  %4 = bitcast %class.SkRefCntBase* %0 to void (%class.SkRefCntBase*)***
  %5 = load void (%class.SkRefCntBase*)**, void (%class.SkRefCntBase*)*** %4, align 8
  %6 = getelementptr inbounds void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %5, i64 1
  %7 = load void (%class.SkRefCntBase*)*, void (%class.SkRefCntBase*)** %6, align 8
  tail call void %7(%class.SkRefCntBase* nonnull %0) #10
  br label %8

8:                                                ; preds = %3, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void (%class.sk_sp.9*, %class.SkReadBuffer*)* @_ZNK19GrSDFMaskFilterImpl10getFactoryEv(%class.GrSDFMaskFilterImpl*) unnamed_addr #2 comdat align 2 {
  ret void (%class.sk_sp.9*, %class.SkReadBuffer*)* @_ZN19GrSDFMaskFilterImpl10CreateProcER12SkReadBuffer
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNK19GrSDFMaskFilterImpl11getTypeNameEv(%class.GrSDFMaskFilterImpl*) unnamed_addr #2 comdat align 2 {
  ret i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0)
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK13SkFlattenable7flattenER13SkWriteBuffer(%class.SkFlattenable*, %class.SkWriteBuffer* dereferenceable(56)) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK12SkMaskFilter18getFlattenableTypeEv(%class.SkMaskFilter*) unnamed_addr #2 comdat align 2 {
  ret i32 4
}

declare zeroext i1 @_ZNK16SkMaskFilterBase16canFilterMaskGPUERK13GrStyledShapeRK7SkIRectS5_RK8SkMatrixPS3_(%class.SkMaskFilterBase*, %class.GrStyledShape*, %struct.SkIRect* dereferenceable(16), %struct.SkIRect* dereferenceable(16), %class.SkMatrix* dereferenceable(40), %struct.SkIRect*) unnamed_addr #4

declare zeroext i1 @_ZNK16SkMaskFilterBase19directFilterMaskGPUEP18GrRecordingContextP20GrSurfaceDrawContextO7GrPaintPK6GrClipRK8SkMatrixRK13GrStyledShape(%class.SkMaskFilterBase*, %class.GrRecordingContext*, %class.GrSurfaceDrawContext*, %class.GrPaint*, %class.GrClip*, %class.SkMatrix* dereferenceable(40), %class.GrStyledShape*) unnamed_addr #4

declare void @_ZNK16SkMaskFilterBase13filterMaskGPUEP18GrRecordingContext18GrSurfaceProxyView11GrColorType11SkAlphaTypeRK8SkMatrixRK7SkIRect() unnamed_addr

declare zeroext i1 @_ZNK16SkMaskFilterBase7asABlurEPNS_7BlurRecE(%class.SkMaskFilterBase*, %"struct.SkMaskFilterBase::BlurRec"*) unnamed_addr #4

declare void @_ZNK16SkMaskFilterBase21onAsFragmentProcessorERK8GrFPArgs() unnamed_addr

declare zeroext i1 @_ZNK16SkMaskFilterBase22onHasFragmentProcessorEv(%class.SkMaskFilterBase*) unnamed_addr #4

declare i32 @_ZNK16SkMaskFilterBase17filterRectsToNineEPK6SkRectiRK8SkMatrixRK7SkIRectPNS_9NinePatchE(%class.SkMaskFilterBase*, %struct.SkRect*, i32, %class.SkMatrix* dereferenceable(40), %struct.SkIRect* dereferenceable(16), %"class.SkMaskFilterBase::NinePatch"*) unnamed_addr #4

declare i32 @_ZNK16SkMaskFilterBase17filterRRectToNineERK7SkRRectRK8SkMatrixRK7SkIRectPNS_9NinePatchE(%class.SkMaskFilterBase*, %class.SkRRect* dereferenceable(52), %class.SkMatrix* dereferenceable(40), %struct.SkIRect* dereferenceable(16), %"class.SkMaskFilterBase::NinePatch"*) unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN12SkRefCntBaseD2Ev(%class.SkRefCntBase*) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN15GrSDFMaskFilter4MakeEv: argument 0"}
!4 = distinct !{!4, !"_ZN15GrSDFMaskFilter4MakeEv"}
