; ModuleID = '../../third_party/blink/renderer/core/loader/resource/multipart_image_resource_parser.cc'
source_filename = "../../third_party/blink/renderer/core/loader/resource/multipart_image_resource_parser.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::GCInfoTable" = type { %"struct.blink::GCInfo"**, i32, i32, %"class.WTF::Mutex" }
%"struct.blink::GCInfo" = type { void (%"class.blink::Visitor"*, i8*)*, void (i8*)*, { i8*, i8 } (i8*)*, i8 }
%"class.blink::Visitor" = type { i32 (...)**, %"class.blink::ThreadState"* }
%"class.blink::ThreadState" = type <{ %"class.std::__1::unique_ptr.55", i32, [4 x i8], %"class.std::__1::unique_ptr.193", %"class.std::__1::unique_ptr.193", i8**, i8, i8, i8, i8, i8, i8, [2 x i8], i64, i64, i32, i32, i32, [4 x i8], %"class.WTF::Deque", %"class.v8::Isolate"*, void (%"class.v8::Isolate"*, %"class.v8::EmbedderGraph"*, i8*)*, %"class.std::__1::unique_ptr.203", %"class.std::__1::unique_ptr.209", %"struct.blink::ThreadState::GCData", %"class.std::__1::unique_ptr.221", %"class.std::__1::unique_ptr.227", %"class.base::JobHandle", %"class.base::JobHandle", %"struct.std::__1::atomic.234", [7 x i8], i64, i8, [7 x i8], i64, %"class.base::TimeTicks", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %"class.blink::ThreadHeap"* }
%"class.blink::ThreadHeap" = type { %"class.blink::ThreadState"*, %"class.std::__1::unique_ptr.58", %"class.std::__1::unique_ptr.64", %"class.std::__1::unique_ptr.70", %"class.std::__1::unique_ptr.76", %"class.std::__1::unique_ptr.82", %"class.std::__1::unique_ptr.88", %"class.std::__1::unique_ptr.99", %"class.std::__1::unique_ptr.106", %"class.std::__1::unique_ptr.106", %"class.std::__1::unique_ptr.113", %"class.std::__1::unique_ptr.120", %"class.std::__1::unique_ptr.127", %"class.std::__1::unique_ptr.127", %"class.std::__1::unique_ptr.134", %"class.std::__1::unique_ptr.141", %"class.std::__1::unique_ptr.148", %"class.std::__1::unique_ptr.173", %"struct.blink::ThreadHeap::LastAllocatedRegion", [9 x %"class.blink::BaseArena"*], i64, i64 }
%"class.std::__1::unique_ptr.58" = type { %"class.std::__1::__compressed_pair.59" }
%"class.std::__1::__compressed_pair.59" = type { %"struct.std::__1::__compressed_pair_elem.60" }
%"struct.std::__1::__compressed_pair_elem.60" = type { %"class.blink::ThreadHeapStatsCollector"* }
%"class.blink::ThreadHeapStatsCollector" = type opaque
%"class.std::__1::unique_ptr.64" = type { %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"class.blink::RegionTree"* }
%"class.blink::RegionTree" = type opaque
%"class.std::__1::unique_ptr.70" = type { %"class.std::__1::__compressed_pair.71" }
%"class.std::__1::__compressed_pair.71" = type { %"struct.std::__1::__compressed_pair_elem.72" }
%"struct.std::__1::__compressed_pair_elem.72" = type { %"class.blink::PageBloomFilter"* }
%"class.blink::PageBloomFilter" = type opaque
%"class.std::__1::unique_ptr.76" = type { %"class.std::__1::__compressed_pair.77" }
%"class.std::__1::__compressed_pair.77" = type { %"struct.std::__1::__compressed_pair_elem.78" }
%"struct.std::__1::__compressed_pair_elem.78" = type { %"class.blink::PagePool"* }
%"class.blink::PagePool" = type opaque
%"class.std::__1::unique_ptr.82" = type { %"class.std::__1::__compressed_pair.83" }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"class.blink::ProcessHeapReporter"* }
%"class.blink::ProcessHeapReporter" = type opaque
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"class.blink::Worklist"* }
%"class.blink::Worklist" = type { [4 x %"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::TraceDescriptor, 512, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment" = type { %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, i64, [512 x %"struct.blink::TraceDescriptor"] }
%"struct.blink::TraceDescriptor" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::Segment"*, %"struct.std::__1::atomic.91" }
%"class.base::Lock" = type { %"class.base::internal::LockImpl" }
%"class.base::internal::LockImpl" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"struct.std::__1::atomic.91" = type { %"struct.std::__1::__atomic_base.92" }
%"struct.std::__1::__atomic_base.92" = type { %"struct.std::__1::__atomic_base.93" }
%"struct.std::__1::__atomic_base.93" = type { %"struct.std::__1::__cxx_atomic_impl.94" }
%"struct.std::__1::__cxx_atomic_impl.94" = type { %"struct.std::__1::__cxx_atomic_base_impl.95" }
%"struct.std::__1::__cxx_atomic_base_impl.95" = type { i64 }
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"class.blink::Worklist.102"* }
%"class.blink::Worklist.102" = type { [4 x %"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::Segment"*, %"struct.std::__1::atomic.91" }
%"class.std::__1::unique_ptr.106" = type { %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"class.blink::Worklist.109"* }
%"class.blink::Worklist.109" = type { [4 x %"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"class.blink::Worklist<const void *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *, 16, 4>::Segment" = type { %"class.blink::Worklist<const void *, 16, 4>::Segment"*, i64, [16 x i8*] }
%"class.blink::Worklist<const void *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *, 16, 4>::Segment"*, %"struct.std::__1::atomic.91" }
%"class.std::__1::unique_ptr.113" = type { %"class.std::__1::__compressed_pair.114" }
%"class.std::__1::__compressed_pair.114" = type { %"struct.std::__1::__compressed_pair_elem.115" }
%"struct.std::__1::__compressed_pair_elem.115" = type { %"class.blink::Worklist.116"* }
%"class.blink::Worklist.116" = type { [4 x %"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::CustomCallbackItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.91" }
%"class.std::__1::unique_ptr.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { %"class.blink::Worklist.123"* }
%"class.blink::Worklist.123" = type { [4 x %"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" }
%"struct.blink::Worklist<const void *const *, 256, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const void *const *, 256, 4>::Segment" = type opaque
%"class.blink::Worklist<const void *const *, 256, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const void *const *, 256, 4>::Segment"*, %"struct.std::__1::atomic.91" }
%"class.std::__1::unique_ptr.127" = type { %"class.std::__1::__compressed_pair.128" }
%"class.std::__1::__compressed_pair.128" = type { %"struct.std::__1::__compressed_pair_elem.129" }
%"struct.std::__1::__compressed_pair_elem.129" = type { %"class.blink::Worklist.130"* }
%"class.blink::Worklist.130" = type { [4 x %"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::EphemeronPairItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment" = type opaque
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.91" }
%"class.std::__1::unique_ptr.134" = type { %"class.std::__1::__compressed_pair.135" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"class.blink::Worklist.137"* }
%"class.blink::Worklist.137" = type { [4 x %"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" }
%"struct.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment" = type opaque
%"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<const blink::TraceWrapperV8Reference<v8::Value> *, 16, 4>::Segment"*, %"struct.std::__1::atomic.91" }
%"class.std::__1::unique_ptr.141" = type { %"class.std::__1::__compressed_pair.142" }
%"class.std::__1::__compressed_pair.142" = type { %"struct.std::__1::__compressed_pair_elem.143" }
%"struct.std::__1::__compressed_pair_elem.143" = type { %"class.blink::Worklist.144"* }
%"class.blink::Worklist.144" = type { [4 x %"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder"], %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" }
%"struct.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::PrivateSegmentHolder" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, [64 x i8] }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment" = type { %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, i64, [64 x %"struct.blink::NotSafeToConcurrentlyTraceItem"] }
%"struct.blink::NotSafeToConcurrentlyTraceItem" = type { %"struct.blink::TraceDescriptor", i64 }
%"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::GlobalPool" = type { %"class.base::Lock", %"class.blink::Worklist<blink::NotSafeToConcurrentlyTraceItem, 64, 4>::Segment"*, %"struct.std::__1::atomic.91" }
%"class.std::__1::unique_ptr.148" = type { %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.blink::WeakContainersWorklist"* }
%"class.blink::WeakContainersWorklist" = type { %"class.WTF::Mutex", %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.151", %"class.std::__1::__compressed_pair.160", %"class.std::__1::__compressed_pair.165", %"class.std::__1::__compressed_pair.167", [4 x i8] }>
%"class.std::__1::unique_ptr.151" = type { %"class.std::__1::__compressed_pair.152" }
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.153", %"struct.std::__1::__compressed_pair_elem.154" }
%"struct.std::__1::__compressed_pair_elem.153" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.154" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.155" }
%"class.std::__1::__compressed_pair.155" = type { %"struct.std::__1::__compressed_pair_elem.156" }
%"struct.std::__1::__compressed_pair_elem.156" = type { i64 }
%"class.std::__1::__compressed_pair.160" = type { %"struct.std::__1::__compressed_pair_elem.161" }
%"struct.std::__1::__compressed_pair_elem.161" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.165" = type { %"struct.std::__1::__compressed_pair_elem.156" }
%"class.std::__1::__compressed_pair.167" = type { %"struct.std::__1::__compressed_pair_elem.168" }
%"struct.std::__1::__compressed_pair_elem.168" = type { float }
%"class.std::__1::unique_ptr.173" = type { %"class.std::__1::__compressed_pair.174" }
%"class.std::__1::__compressed_pair.174" = type { %"struct.std::__1::__compressed_pair_elem.175" }
%"struct.std::__1::__compressed_pair_elem.175" = type { %"class.blink::HeapCompact"* }
%"class.blink::HeapCompact" = type <{ %"class.blink::ThreadHeap"*, %"class.std::__1::unique_ptr.176", i8, [7 x i8], i64, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.176" = type { %"class.std::__1::__compressed_pair.177" }
%"class.std::__1::__compressed_pair.177" = type { %"struct.std::__1::__compressed_pair_elem.178" }
%"struct.std::__1::__compressed_pair_elem.178" = type { %"class.blink::HeapCompact::MovableObjectFixups"* }
%"class.blink::HeapCompact::MovableObjectFixups" = type opaque
%"struct.blink::ThreadHeap::LastAllocatedRegion" = type { i8*, i64 }
%"class.blink::BaseArena" = type <{ i32 (...)**, %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::PageStackThreadSafe", %"class.blink::ThreadState"*, i32, [4 x i8] }>
%"class.blink::PageStackThreadSafe" = type { %"class.blink::PageStack", %"class.WTF::Mutex" }
%"class.blink::PageStack" = type { %"class.WTF::Vector.185" }
%"class.WTF::Vector.185" = type { %"class.WTF::VectorBuffer.186" }
%"class.WTF::VectorBuffer.186" = type { %"class.WTF::VectorBufferBase.187" }
%"class.WTF::VectorBufferBase.187" = type { %"class.blink::BasePage"**, i32, i32 }
%"class.blink::BasePage" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8, [5 x i8] }>
%"class.blink::PageMemory" = type opaque
%"class.std::__1::unique_ptr.193" = type { %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.blink::PersistentRegion"* }
%"class.blink::PersistentRegion" = type { %"class.blink::PersistentRegionBase" }
%"class.blink::PersistentRegionBase" = type { %"class.blink::PersistentNode"*, %"struct.blink::PersistentNodeSlots"* }
%"class.blink::PersistentNode" = type { i8*, void (%"class.blink::Visitor"*, i8*)* }
%"struct.blink::PersistentNodeSlots" = type { %"struct.blink::PersistentNodeSlots"*, [256 x %"class.blink::PersistentNode"] }
%"class.WTF::Deque" = type { %"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer", i32, i32 }
%"class.WTF::Deque<std::__1::pair<void *, bool (*)(const blink::LivenessBroker &, void *)>, 0, WTF::PartitionAllocator>::BackingBuffer" = type { %"class.WTF::VectorBuffer.201" }
%"class.WTF::VectorBuffer.201" = type { %"class.WTF::VectorBufferBase.202" }
%"class.WTF::VectorBufferBase.202" = type { %"struct.std::__1::pair"*, i32, i32 }
%"struct.std::__1::pair" = type { i8*, i1 (%"class.blink::LivenessBroker"*, i8*)* }
%"class.blink::LivenessBroker" = type { i8 }
%"class.v8::Isolate" = type { i8 }
%"class.v8::EmbedderGraph" = type opaque
%"class.std::__1::unique_ptr.203" = type { %"class.std::__1::__compressed_pair.204" }
%"class.std::__1::__compressed_pair.204" = type { %"struct.std::__1::__compressed_pair_elem.205" }
%"struct.std::__1::__compressed_pair_elem.205" = type { %"class.blink::UnifiedHeapController"* }
%"class.blink::UnifiedHeapController" = type opaque
%"class.std::__1::unique_ptr.209" = type { %"class.std::__1::__compressed_pair.210" }
%"class.std::__1::__compressed_pair.210" = type { %"struct.std::__1::__compressed_pair_elem.211" }
%"struct.std::__1::__compressed_pair_elem.211" = type { %"class.v8::EmbedderRootsHandler"* }
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"struct.blink::ThreadState::GCData" = type { i32, i32, i32, i32, %"class.std::__1::unique_ptr.215" }
%"class.std::__1::unique_ptr.215" = type { %"class.std::__1::__compressed_pair.216" }
%"class.std::__1::__compressed_pair.216" = type { %"struct.std::__1::__compressed_pair_elem.217" }
%"struct.std::__1::__compressed_pair_elem.217" = type { %"class.blink::MarkingVisitor"* }
%"class.blink::MarkingVisitor" = type { %"class.blink::MarkingVisitorBase", %"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" }
%"class.blink::MarkingVisitorBase" = type { %"class.blink::Visitor", %"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View", %"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View", %"class.blink::Worklist<const void *, 16, 4>::View", %"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View", %"class.blink::Worklist<const void *const *, 256, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View", %"class.blink::WeakContainersWorklist"*, i64, i32, i32 }
%"class.blink::Worklist<blink::TraceDescriptor, 512, 4>::View" = type <{ %"class.blink::Worklist"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::HeapObjectHeader *, 64, 4>::View" = type <{ %"class.blink::Worklist.102"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *, 16, 4>::View" = type <{ %"class.blink::Worklist.109"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::CustomCallbackItem, 64, 4>::View" = type <{ %"class.blink::Worklist.116"*, i32, [4 x i8] }>
%"class.blink::Worklist<const void *const *, 256, 4>::View" = type <{ %"class.blink::Worklist.123"*, i32, [4 x i8] }>
%"class.blink::Worklist<blink::EphemeronPairItem, 64, 4>::View" = type <{ %"class.blink::Worklist.130"*, i32, [4 x i8] }>
%"class.blink::MarkingVisitor::RecentlyRetracedWeakContainers" = type { %"class.std::__1::vector", i64 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.blink::HeapObjectHeader"**, %"class.blink::HeapObjectHeader"**, %"class.std::__1::__compressed_pair.239" }
%"class.blink::HeapObjectHeader" = type { i32, i16, i16 }
%"class.std::__1::__compressed_pair.239" = type { %"struct.std::__1::__compressed_pair_elem.240" }
%"struct.std::__1::__compressed_pair_elem.240" = type { %"class.blink::HeapObjectHeader"** }
%"class.std::__1::unique_ptr.221" = type { %"class.std::__1::__compressed_pair.222" }
%"class.std::__1::__compressed_pair.222" = type { %"struct.std::__1::__compressed_pair_elem.223" }
%"struct.std::__1::__compressed_pair_elem.223" = type { %"class.blink::ThreadState::IncrementalMarkingScheduler"* }
%"class.blink::ThreadState::IncrementalMarkingScheduler" = type opaque
%"class.std::__1::unique_ptr.227" = type { %"class.std::__1::__compressed_pair.228" }
%"class.std::__1::__compressed_pair.228" = type { %"struct.std::__1::__compressed_pair_elem.229" }
%"struct.std::__1::__compressed_pair_elem.229" = type { %"class.blink::MarkingSchedulingOracle"* }
%"class.blink::MarkingSchedulingOracle" = type opaque
%"class.base::JobHandle" = type { %class.scoped_refptr.233 }
%class.scoped_refptr.233 = type { %"class.base::internal::JobTaskSource"* }
%"class.base::internal::JobTaskSource" = type opaque
%"struct.std::__1::atomic.234" = type { %"struct.std::__1::__atomic_base.235" }
%"struct.std::__1::__atomic_base.235" = type { %"struct.std::__1::__cxx_atomic_impl.236" }
%"struct.std::__1::__cxx_atomic_impl.236" = type { %"struct.std::__1::__cxx_atomic_base_impl.237" }
%"struct.std::__1::__cxx_atomic_base_impl.237" = type { i8 }
%"class.base::TimeTicks" = type { %"class.base::time_internal::TimeBase.238" }
%"class.base::time_internal::TimeBase.238" = type { i64 }
%"class.WTF::Mutex" = type { %"class.WTF::MutexBase" }
%"class.WTF::MutexBase" = type { %"struct.WTF::PlatformMutex" }
%"struct.WTF::PlatformMutex" = type { %union.pthread_mutex_t }
%"class.blink::MultipartImageResourceParser" = type <{ %"class.blink::ResourceResponse", %"class.WTF::Vector.50", %"class.blink::Member", %"class.WTF::Vector.50", i8, i8, i8, i8, [4 x i8] }>
%"class.blink::ResourceResponse" = type { %"class.blink::KURL", %"class.WTF::AtomicString", i64, %"class.WTF::AtomicString", i32, i32, %"class.WTF::AtomicString", %"class.blink::HTTPHeaderMap", %"class.net::IPEndPoint", i32, i8, i8, i8, i8, i8, i8, i8, i8, i32, i8, i8, i8, %"class.base::Time", i8, i8, i32, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i32, i64, i8, i32, i32, %"class.absl::optional", %class.scoped_refptr.14, %class.scoped_refptr.15, %"struct.blink::CacheControlHeader", %"class.absl::optional.16", %"class.absl::optional.21", %"class.absl::optional.21", %"class.absl::optional.21", i64, %"class.blink::KURL", %"class.WTF::Vector.26", %"class.WTF::String", %"class.WTF::Vector", %"class.base::Time", %"class.WTF::AtomicString", i32, i8, i64, i64, i64, %"class.absl::optional.31", %"class.WTF::Vector", %"class.blink::KURL", %"class.absl::optional.36" }
%"class.blink::HTTPHeaderMap" = type { %"class.WTF::HashMap" }
%"class.WTF::HashMap" = type { %"class.WTF::HashTable" }
%"class.WTF::HashTable" = type <{ %"struct.WTF::KeyValuePair"*, i32, i32, i32, [4 x i8] }>
%"struct.WTF::KeyValuePair" = type { %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.net::IPEndPoint" = type { %"class.net::IPAddress", i16 }
%"class.net::IPAddress" = type { %"class.net::IPAddressBytes" }
%"class.net::IPAddressBytes" = type { %"struct.std::__1::array", i8 }
%"struct.std::__1::array" = type { [16 x i8] }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"struct.blink::ResourceResponse::SecurityDetails" }
%"struct.blink::ResourceResponse::SecurityDetails" = type { %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::Vector", %"class.WTF::String", i64, i64, %"class.WTF::Vector.4", %"class.WTF::Vector.9" }
%"class.WTF::Vector.4" = type { %"class.WTF::VectorBuffer.5" }
%"class.WTF::VectorBuffer.5" = type { %"class.WTF::VectorBufferBase.6" }
%"class.WTF::VectorBufferBase.6" = type { %"class.WTF::AtomicString"*, i32, i32 }
%"class.WTF::Vector.9" = type { %"class.WTF::VectorBuffer.10" }
%"class.WTF::VectorBuffer.10" = type { %"class.WTF::VectorBufferBase.11" }
%"class.WTF::VectorBufferBase.11" = type { %"class.blink::ResourceResponse::SignedCertificateTimestamp"*, i32, i32 }
%"class.blink::ResourceResponse::SignedCertificateTimestamp" = type { %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i64, %"class.WTF::String", %"class.WTF::String", %"class.WTF::String" }
%class.scoped_refptr.14 = type { %"class.blink::ResourceLoadTiming"* }
%"class.blink::ResourceLoadTiming" = type opaque
%class.scoped_refptr.15 = type { %"struct.blink::ResourceLoadInfo"* }
%"struct.blink::ResourceLoadInfo" = type opaque
%"struct.blink::CacheControlHeader" = type { i8, %"class.absl::optional.16", %"class.absl::optional.16" }
%"class.absl::optional.16" = type { %"class.absl::optional_internal::optional_data.17" }
%"class.absl::optional_internal::optional_data.17" = type { %"class.absl::optional_internal::optional_data_base.18" }
%"class.absl::optional_internal::optional_data_base.18" = type { %"class.absl::optional_internal::optional_data_dtor_base.19" }
%"class.absl::optional_internal::optional_data_dtor_base.19" = type { i8, %union.anon.20 }
%union.anon.20 = type { %"class.base::TimeDelta" }
%"class.base::TimeDelta" = type { i64 }
%"class.absl::optional.21" = type { %"class.absl::optional_internal::optional_data.22" }
%"class.absl::optional_internal::optional_data.22" = type { %"class.absl::optional_internal::optional_data_base.23" }
%"class.absl::optional_internal::optional_data_base.23" = type { %"class.absl::optional_internal::optional_data_dtor_base.24" }
%"class.absl::optional_internal::optional_data_dtor_base.24" = type { i8, %union.anon.25 }
%union.anon.25 = type { %"class.base::Time" }
%"class.WTF::Vector.26" = type { %"class.WTF::VectorBuffer.27" }
%"class.WTF::VectorBuffer.27" = type { %"class.WTF::VectorBufferBase.28" }
%"class.WTF::VectorBufferBase.28" = type { %"class.blink::KURL"*, i32, i32 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.absl::optional.31" = type { %"class.absl::optional_internal::optional_data.32" }
%"class.absl::optional_internal::optional_data.32" = type { %"class.absl::optional_internal::optional_data_base.33" }
%"class.absl::optional_internal::optional_data_base.33" = type { %"class.absl::optional_internal::optional_data_dtor_base.34" }
%"class.absl::optional_internal::optional_data_dtor_base.34" = type { i8, %union.anon.35 }
%union.anon.35 = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.WTF::String"*, i32, i32 }
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::KURL"* }
%"class.absl::optional.36" = type { %"class.absl::optional_internal::optional_data.37" }
%"class.absl::optional_internal::optional_data.37" = type { %"class.absl::optional_internal::optional_data_base.38" }
%"class.absl::optional_internal::optional_data_base.38" = type { %"class.absl::optional_internal::optional_data_dtor_base.39" }
%"class.absl::optional_internal::optional_data_dtor_base.39" = type { i8, %union.anon.40 }
%union.anon.40 = type { %"class.net::AuthChallengeInfo" }
%"class.net::AuthChallengeInfo" = type { i8, %"class.url::Origin", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.url::Origin" = type { %"class.url::SchemeHostPort", %"class.absl::optional.45" }
%"class.url::SchemeHostPort" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", i16, [6 x i8] }>
%"class.absl::optional.45" = type { %"class.absl::optional_internal::optional_data.46" }
%"class.absl::optional_internal::optional_data.46" = type { %"class.absl::optional_internal::optional_data_base.47" }
%"class.absl::optional_internal::optional_data_base.47" = type { %"class.absl::optional_internal::optional_data_dtor_base.48" }
%"class.absl::optional_internal::optional_data_dtor_base.48" = type { i8, %union.anon.49 }
%union.anon.49 = type { %"class.url::Origin::Nonce" }
%"class.url::Origin::Nonce" = type { %"class.base::UnguessableToken" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.41" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.42" }
%"struct.std::__1::__compressed_pair_elem.42" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.43 }
%union.anon.43 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::MultipartImageResourceParser::Client"* }
%"class.WTF::Vector.50" = type { %"class.WTF::VectorBuffer.51" }
%"class.WTF::VectorBuffer.51" = type { %"class.WTF::VectorBufferBase.52" }
%"class.WTF::VectorBufferBase.52" = type { i8*, i32, i32 }
%"class.blink::MultipartImageResourceParser::Client" = type { %"class.blink::GarbageCollectedMixin" }
%"class.blink::GarbageCollectedMixin" = type { i32 (...)** }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::NormalPage" = type { %"class.blink::BasePage.base", %"class.blink::NormalPage::CardTable", %"class.blink::PlatformAwareObjectStartBitmap", %"class.WTF::Vector.254", %"class.blink::FreeList", %"class.WTF::Vector.259" }
%"class.blink::BasePage.base" = type <{ i32 (...)**, %"class.blink::PageMemory"*, %"class.blink::BaseArena"*, %"class.blink::ThreadState"*, i64, i8, i8, i8 }>
%"class.blink::NormalPage::CardTable" = type { %"struct.std::__1::array.253" }
%"struct.std::__1::array.253" = type { [256 x i8] }
%"class.blink::PlatformAwareObjectStartBitmap" = type { %"class.blink::ObjectStartBitmap" }
%"class.blink::ObjectStartBitmap" = type { i8*, [2048 x i8] }
%"class.WTF::Vector.254" = type { %"class.WTF::VectorBuffer.255" }
%"class.WTF::VectorBuffer.255" = type { %"class.WTF::VectorBufferBase.256" }
%"class.WTF::VectorBufferBase.256" = type { %"struct.blink::NormalPage::ToBeFinalizedObject"*, i32, i32 }
%"struct.blink::NormalPage::ToBeFinalizedObject" = type { %"class.blink::HeapObjectHeader"* }
%"class.blink::FreeList" = type <{ [17 x %"class.blink::FreeListEntry"*], [17 x %"class.blink::FreeListEntry"*], i32, [4 x i8] }>
%"class.blink::FreeListEntry" = type { %"class.blink::HeapObjectHeader", %"class.blink::FreeListEntry"* }
%"class.WTF::Vector.259" = type { %"class.WTF::VectorBuffer.260" }
%"class.WTF::VectorBuffer.260" = type { %"class.WTF::VectorBufferBase.261" }
%"class.WTF::VectorBufferBase.261" = type { %"struct.blink::NormalPage::FutureFreelistEntry"*, i32, i32 }
%"struct.blink::NormalPage::FutureFreelistEntry" = type { i8*, i64 }

$_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j = comdat any

$_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEEaSERKS2_ = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm = comdat any

$_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6insertIcEEvjPKT_j = comdat any

$_ZNK3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj = comdat any

@.str = private unnamed_addr constant [3 x i8] c"--\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.2 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.3 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.5 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"position <= size()\00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"new_size >= size_\00", align 1
@.str.9 = private unnamed_addr constant [28 x i8] c"position + length <= size()\00", align 1
@_ZN5blink11GCInfoTable13global_table_E = external local_unnamed_addr global %"class.blink::GCInfoTable"*, align 8

@_ZN5blink28MultipartImageResourceParserC1ERKNS_16ResourceResponseERKN3WTF6VectorIcLj0ENS4_18PartitionAllocatorEEEPNS0_6ClientE = hidden unnamed_addr alias void (%"class.blink::MultipartImageResourceParser"*, %"class.blink::ResourceResponse"*, %"class.WTF::Vector.50"*, %"class.blink::MultipartImageResourceParser::Client"*), void (%"class.blink::MultipartImageResourceParser"*, %"class.blink::ResourceResponse"*, %"class.WTF::Vector.50"*, %"class.blink::MultipartImageResourceParser::Client"*)* @_ZN5blink28MultipartImageResourceParserC2ERKNS_16ResourceResponseERKN3WTF6VectorIcLj0ENS4_18PartitionAllocatorEEEPNS0_6ClientE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink28MultipartImageResourceParserC2ERKNS_16ResourceResponseERKN3WTF6VectorIcLj0ENS4_18PartitionAllocatorEEEPNS0_6ClientE(%"class.blink::MultipartImageResourceParser"*, %"class.blink::ResourceResponse"* dereferenceable(1072), %"class.WTF::Vector.50"* nocapture readonly dereferenceable(16), %"class.blink::MultipartImageResourceParser::Client"*) unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 0
  tail call void @_ZN5blink16ResourceResponseC1ERKS0_(%"class.blink::ResourceResponse"* %5, %"class.blink::ResourceResponse"* dereferenceable(1072) %1) #6
  %6 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %2, i64 0, i32 0, i32 0, i32 1
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %6, i64 0, i32 0, i32 0, i32 0
  store i8* null, i8** %9, align 8
  %10 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  store i32 0, i32* %10, align 8
  %11 = icmp eq i32 %8, 0
  br i1 %11, label %19, label %12

12:                                               ; preds = %4
  %13 = zext i32 %8 to i64
  %14 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %13) #6
  %15 = tail call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %14) #6
  %16 = ptrtoint i8* %15 to i64
  %17 = bitcast %"class.WTF::Vector.50"* %6 to i64*
  store atomic i64 %16, i64* %17 monotonic, align 8
  %18 = trunc i64 %14 to i32
  store i32 %18, i32* %10, align 8
  br label %19

19:                                               ; preds = %12, %4
  %20 = phi i8* [ null, %4 ], [ %15, %12 ]
  %21 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %2, i64 0, i32 0, i32 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  store i32 %22, i32* %23, align 4
  %24 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %2, i64 0, i32 0, i32 0, i32 0
  %25 = load i8*, i8** %24, align 8
  %26 = icmp ne i8* %20, null
  %27 = icmp ne i8* %25, null
  %28 = and i1 %26, %27
  br i1 %28, label %29, label %33, !prof !2

29:                                               ; preds = %19
  %30 = load i32, i32* %21, align 4
  %31 = zext i32 %30 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %20, i8* nonnull align 1 %25, i64 %31, i1 false) #6
  %32 = load i32, i32* %23, align 4
  br label %33

33:                                               ; preds = %19, %29
  %34 = phi i32 [ %22, %19 ], [ %32, %29 ]
  %35 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 2, i32 0, i32 0
  store %"class.blink::MultipartImageResourceParser::Client"* %3, %"class.blink::MultipartImageResourceParser::Client"** %35, align 8
  %36 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 3
  %37 = bitcast %"class.WTF::Vector.50"* %36 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 16, i1 false) #6
  %38 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 4
  store i8 1, i8* %38, align 8
  %39 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 5
  store i8 0, i8* %39, align 1
  %40 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 6
  store i8 0, i8* %40, align 2
  %41 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 7
  store i8 0, i8* %41, align 1
  %42 = icmp ult i32 %34, 2
  br i1 %42, label %51, label %43

43:                                               ; preds = %33
  %44 = tail call dereferenceable(1) i8* @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.50"* %6, i32 0) #6
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 45
  br i1 %46, label %47, label %51

47:                                               ; preds = %43
  %48 = tail call dereferenceable(1) i8* @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.50"* %6, i32 1) #6
  %49 = load i8, i8* %48, align 1
  %50 = icmp eq i8 %49, 45
  br i1 %50, label %52, label %51

51:                                               ; preds = %47, %43, %33
  tail call void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6insertIcEEvjPKT_j(%"class.WTF::Vector.50"* %6, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 2) #6
  br label %52

52:                                               ; preds = %47, %51
  ret void
}

declare void @_ZN5blink16ResourceResponseC1ERKS0_(%"class.blink::ResourceResponse"*, %"class.blink::ResourceResponse"* dereferenceable(1072)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink28MultipartImageResourceParser10AppendDataEPKcj(%"class.blink::MultipartImageResourceParser"*, i8*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckOpResult", align 8
  %9 = alloca %"class.logging::CheckError", align 8
  %10 = alloca %"class.logging::CheckOpResult", align 8
  %11 = alloca %"class.logging::CheckOpResult", align 8
  %12 = alloca %"class.logging::CheckError", align 8
  %13 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 6
  %14 = load i8, i8* %13, align 2, !range !3
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %16, label %258

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 3
  tail call void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j(%"class.WTF::Vector.50"* %17, i8* %1, i32 %2)
  %18 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 4
  %19 = load i8, i8* %18, align 8, !range !3
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %100, label %21

21:                                               ; preds = %16
  %22 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %23 = load i32, i32* %22, align 4
  %24 = icmp ult i32 %23, 2
  br i1 %24, label %35, label %25

25:                                               ; preds = %21
  %26 = tail call dereferenceable(1) i8* @_ZNK3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.50"* %17, i32 0) #6
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %27, 13
  br i1 %28, label %29, label %33

29:                                               ; preds = %25
  %30 = tail call dereferenceable(1) i8* @_ZNK3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.50"* %17, i32 1) #6
  %31 = load i8, i8* %30, align 1
  %32 = icmp eq i8 %31, 10
  br i1 %32, label %43, label %33

33:                                               ; preds = %25, %29
  %34 = load i32, i32* %22, align 4
  br label %35

35:                                               ; preds = %33, %21
  %36 = phi i32 [ %34, %33 ], [ %23, %21 ]
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %35
  %39 = tail call dereferenceable(1) i8* @_ZNK3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.50"* %17, i32 0) #6
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 10
  br i1 %41, label %43, label %42

42:                                               ; preds = %38, %35
  br label %43

43:                                               ; preds = %29, %38, %42
  %44 = phi i32 [ 0, %42 ], [ 2, %29 ], [ 1, %38 ]
  %45 = load i32, i32* %22, align 4
  %46 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %47 = load i32, i32* %46, align 4
  %48 = add nuw nsw i32 %44, 2
  %49 = add i32 %48, %47
  %50 = icmp ult i32 %45, %49
  br i1 %50, label %258, label %51

51:                                               ; preds = %43
  %52 = icmp eq i32 %44, 0
  br i1 %52, label %87, label %53

53:                                               ; preds = %51
  %54 = bitcast %"class.logging::CheckOpResult"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %54) #6
  %55 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %11, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %55, align 8
  %56 = bitcast %"class.logging::CheckOpResult"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %56) #6
  %57 = icmp ugt i32 %44, %45
  br i1 %57, label %59, label %58

58:                                               ; preds = %53
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #6
  store i8* null, i8** %55, align 8
  br label %68

59:                                               ; preds = %53
  %60 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %44) #6
  %61 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %45) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %10, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0), i8* %60, i8* %61) #6
  %62 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %10, i64 0, i32 0
  %63 = load i8*, i8** %62, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %56) #6
  store i8* %63, i8** %55, align 8
  %64 = icmp eq i8* %63, null
  br i1 %64, label %68, label %65

65:                                               ; preds = %59
  %66 = bitcast %"class.logging::CheckError"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %66) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %12, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 2085, %"class.logging::CheckOpResult"* nonnull %11) #6
  %67 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %12) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %12) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %66) #6
  br label %68

68:                                               ; preds = %65, %59, %58
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %54) #6
  %69 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %17, i64 0, i32 0, i32 0, i32 0
  %70 = load i8*, i8** %69, align 8
  %71 = zext i32 %44 to i64
  %72 = getelementptr inbounds i8, i8* %70, i64 %71
  %73 = icmp ne i8* %70, null
  %74 = icmp ne i8* %72, null
  %75 = and i1 %73, %74
  br i1 %75, label %76, label %83, !prof !2

76:                                               ; preds = %68
  %77 = load i32, i32* %22, align 4
  %78 = zext i32 %77 to i64
  %79 = getelementptr inbounds i8, i8* %70, i64 %78
  %80 = ptrtoint i8* %79 to i64
  %81 = ptrtoint i8* %72 to i64
  %82 = sub i64 %80, %81
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %70, i8* nonnull align 1 %72, i64 %82, i1 false) #6
  br label %83

83:                                               ; preds = %68, %76
  %84 = load i32, i32* %22, align 4
  %85 = sub i32 %84, %44
  store i32 %85, i32* %22, align 4
  %86 = load i32, i32* %46, align 4
  br label %87

87:                                               ; preds = %51, %83
  %88 = phi i32 [ %47, %51 ], [ %86, %83 ]
  %89 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %17, i64 0, i32 0, i32 0, i32 0
  %90 = load i8*, i8** %89, align 8
  %91 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %92 = load i8*, i8** %91, align 8
  %93 = zext i32 %88 to i64
  %94 = call i32 @bcmp(i8* %90, i8* %92, i64 %93)
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %99, label %96

96:                                               ; preds = %87
  call void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6insertIcEEvjPKT_j(%"class.WTF::Vector.50"* %17, i32 0, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i32 1) #6
  %97 = load i8*, i8** %91, align 8
  %98 = load i32, i32* %46, align 4
  call void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6insertIcEEvjPKT_j(%"class.WTF::Vector.50"* %17, i32 0, i8* %97, i32 %98) #6
  br label %99

99:                                               ; preds = %87, %96
  store i8 0, i8* %18, align 8
  br label %100

100:                                              ; preds = %99, %16
  %101 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 5
  %102 = load i8, i8* %101, align 1, !range !3
  %103 = icmp eq i8 %102, 0
  br i1 %103, label %110, label %104

104:                                              ; preds = %100
  %105 = call zeroext i1 @_ZN5blink28MultipartImageResourceParser12ParseHeadersEv(%"class.blink::MultipartImageResourceParser"* %0)
  br i1 %105, label %106, label %258

106:                                              ; preds = %104
  store i8 0, i8* %101, align 1
  %107 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 7
  %108 = load i8, i8* %107, align 1, !range !3
  %109 = icmp eq i8 %108, 0
  br i1 %109, label %110, label %258

110:                                              ; preds = %106, %100
  %111 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 1
  %112 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 2, i32 0, i32 0
  %113 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %17, i64 0, i32 0, i32 0, i32 0
  %114 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 7
  %115 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 1, i32 0, i32 0, i32 2
  %116 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %117 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  %118 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  %119 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  %120 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %121 = bitcast %"class.logging::CheckError"* %6 to i8*
  br label %122

122:                                              ; preds = %204, %110
  %123 = call i32 @_ZN5blink28MultipartImageResourceParser12FindBoundaryERKN3WTF6VectorIcLj0ENS1_18PartitionAllocatorEEEPS4_(%"class.WTF::Vector.50"* dereferenceable(16) %17, %"class.WTF::Vector.50"* %111)
  switch i32 %123, label %124 [
    i32 -1, label %207
    i32 0, label %151
  ]

124:                                              ; preds = %122
  %125 = add i32 %123, -1
  %126 = call dereferenceable(1) i8* @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.50"* %17, i32 %125) #6
  %127 = load i8, i8* %126, align 1
  %128 = icmp eq i8 %127, 10
  br i1 %128, label %129, label %140

129:                                              ; preds = %124
  %130 = icmp ugt i32 %123, 1
  br i1 %130, label %131, label %137

131:                                              ; preds = %129
  %132 = add i32 %123, -2
  %133 = call dereferenceable(1) i8* @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.50"* %17, i32 %132) #6
  %134 = load i8, i8* %133, align 1
  %135 = icmp eq i8 %134, 13
  %136 = select i1 %135, i32 %132, i32 %125
  br label %137

137:                                              ; preds = %131, %129
  %138 = phi i32 [ %125, %129 ], [ %136, %131 ]
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %151, label %140

140:                                              ; preds = %124, %137
  %141 = phi i32 [ %138, %137 ], [ %123, %124 ]
  %142 = load %"class.blink::MultipartImageResourceParser::Client"*, %"class.blink::MultipartImageResourceParser::Client"** %112, align 8
  %143 = load i8*, i8** %113, align 8
  %144 = zext i32 %141 to i64
  %145 = bitcast %"class.blink::MultipartImageResourceParser::Client"* %142 to void (%"class.blink::MultipartImageResourceParser::Client"*, i8*, i64)***
  %146 = load void (%"class.blink::MultipartImageResourceParser::Client"*, i8*, i64)**, void (%"class.blink::MultipartImageResourceParser::Client"*, i8*, i64)*** %145, align 8
  %147 = getelementptr inbounds void (%"class.blink::MultipartImageResourceParser::Client"*, i8*, i64)*, void (%"class.blink::MultipartImageResourceParser::Client"*, i8*, i64)** %146, i64 4
  %148 = load void (%"class.blink::MultipartImageResourceParser::Client"*, i8*, i64)*, void (%"class.blink::MultipartImageResourceParser::Client"*, i8*, i64)** %147, align 8
  call void %148(%"class.blink::MultipartImageResourceParser::Client"* %142, i8* %143, i64 %144) #6
  %149 = load i8, i8* %114, align 1, !range !3
  %150 = icmp eq i8 %149, 0
  br i1 %150, label %151, label %258

151:                                              ; preds = %140, %122, %137
  %152 = load i32, i32* %115, align 4
  %153 = add i32 %152, %123
  %154 = load i32, i32* %116, align 4
  %155 = icmp ult i32 %153, %154
  br i1 %155, label %156, label %171

156:                                              ; preds = %151
  %157 = call dereferenceable(1) i8* @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.50"* %17, i32 %153) #6
  %158 = load i8, i8* %157, align 1
  %159 = icmp eq i8 %158, 45
  br i1 %159, label %160, label %171

160:                                              ; preds = %156
  store i8 1, i8* %13, align 2
  %161 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %162 = load i32, i32* %161, align 8
  %163 = icmp eq i32 %162, 0
  br i1 %163, label %258, label %164

164:                                              ; preds = %160
  %165 = load i32, i32* %116, align 4
  %166 = icmp eq i32 %165, 0
  br i1 %166, label %168, label %167

167:                                              ; preds = %164
  store i32 0, i32* %116, align 4
  br label %168

168:                                              ; preds = %167, %164
  %169 = load i8*, i8** %113, align 8
  %170 = bitcast %"class.WTF::Vector.50"* %17 to i64*
  store atomic i64 0, i64* %170 monotonic, align 8
  store i32 0, i32* %161, align 8
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %169) #6
  br label %258

171:                                              ; preds = %156, %151
  %172 = icmp eq i32 %153, 0
  br i1 %172, label %201, label %173

173:                                              ; preds = %171
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %117) #6
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %118, align 8
  %174 = load i32, i32* %116, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %119) #6
  %175 = icmp ugt i32 %153, %174
  br i1 %175, label %177, label %176

176:                                              ; preds = %173
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %119) #6
  store i8* null, i8** %118, align 8
  br label %184

177:                                              ; preds = %173
  %178 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %153) #6
  %179 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %174) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0), i8* %178, i8* %179) #6
  %180 = load i8*, i8** %120, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %119) #6
  store i8* %180, i8** %118, align 8
  %181 = icmp eq i8* %180, null
  br i1 %181, label %184, label %182

182:                                              ; preds = %177
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %121) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 2085, %"class.logging::CheckOpResult"* nonnull %5) #6
  %183 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %121) #6
  br label %184

184:                                              ; preds = %182, %177, %176
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %117) #6
  %185 = load i8*, i8** %113, align 8
  %186 = zext i32 %153 to i64
  %187 = getelementptr inbounds i8, i8* %185, i64 %186
  %188 = icmp ne i8* %185, null
  %189 = icmp ne i8* %187, null
  %190 = and i1 %188, %189
  br i1 %190, label %191, label %198, !prof !2

191:                                              ; preds = %184
  %192 = load i32, i32* %116, align 4
  %193 = zext i32 %192 to i64
  %194 = getelementptr inbounds i8, i8* %185, i64 %193
  %195 = ptrtoint i8* %194 to i64
  %196 = ptrtoint i8* %187 to i64
  %197 = sub i64 %195, %196
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %185, i8* nonnull align 1 %187, i64 %197, i1 false) #6
  br label %198

198:                                              ; preds = %191, %184
  %199 = load i32, i32* %116, align 4
  %200 = sub i32 %199, %153
  store i32 %200, i32* %116, align 4
  br label %201

201:                                              ; preds = %171, %198
  %202 = call zeroext i1 @_ZN5blink28MultipartImageResourceParser12ParseHeadersEv(%"class.blink::MultipartImageResourceParser"* %0)
  br i1 %202, label %204, label %203

203:                                              ; preds = %201
  store i8 1, i8* %101, align 1
  br label %258

204:                                              ; preds = %201
  %205 = load i8, i8* %114, align 1, !range !3
  %206 = icmp eq i8 %205, 0
  br i1 %206, label %122, label %258

207:                                              ; preds = %122
  %208 = load i8, i8* %101, align 1
  %209 = icmp eq i8 %208, 0
  br i1 %209, label %210, label %258

210:                                              ; preds = %207
  %211 = load i32, i32* %116, align 4
  %212 = load i32, i32* %115, align 4
  %213 = add i32 %212, 2
  %214 = icmp ugt i32 %211, %213
  br i1 %214, label %215, label %258

215:                                              ; preds = %210
  %216 = sub i32 %211, %212
  %217 = add i32 %216, -2
  %218 = load %"class.blink::MultipartImageResourceParser::Client"*, %"class.blink::MultipartImageResourceParser::Client"** %112, align 8
  %219 = load i8*, i8** %113, align 8
  %220 = zext i32 %217 to i64
  %221 = bitcast %"class.blink::MultipartImageResourceParser::Client"* %218 to void (%"class.blink::MultipartImageResourceParser::Client"*, i8*, i64)***
  %222 = load void (%"class.blink::MultipartImageResourceParser::Client"*, i8*, i64)**, void (%"class.blink::MultipartImageResourceParser::Client"*, i8*, i64)*** %221, align 8
  %223 = getelementptr inbounds void (%"class.blink::MultipartImageResourceParser::Client"*, i8*, i64)*, void (%"class.blink::MultipartImageResourceParser::Client"*, i8*, i64)** %222, i64 4
  %224 = load void (%"class.blink::MultipartImageResourceParser::Client"*, i8*, i64)*, void (%"class.blink::MultipartImageResourceParser::Client"*, i8*, i64)** %223, align 8
  call void %224(%"class.blink::MultipartImageResourceParser::Client"* %218, i8* %219, i64 %220) #6
  %225 = icmp eq i32 %217, 0
  br i1 %225, label %258, label %226

226:                                              ; preds = %215
  %227 = bitcast %"class.logging::CheckOpResult"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %227) #6
  %228 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %8, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %228, align 8
  %229 = load i32, i32* %116, align 4
  %230 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %230) #6
  %231 = icmp ugt i32 %217, %229
  br i1 %231, label %233, label %232

232:                                              ; preds = %226
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %230) #6
  store i8* null, i8** %228, align 8
  br label %242

233:                                              ; preds = %226
  %234 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %217) #6
  %235 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %229) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %7, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0), i8* %234, i8* %235) #6
  %236 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  %237 = load i8*, i8** %236, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %230) #6
  store i8* %237, i8** %228, align 8
  %238 = icmp eq i8* %237, null
  br i1 %238, label %242, label %239

239:                                              ; preds = %233
  %240 = bitcast %"class.logging::CheckError"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %240) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %9, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 2085, %"class.logging::CheckOpResult"* nonnull %8) #6
  %241 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %9) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %240) #6
  br label %242

242:                                              ; preds = %239, %233, %232
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %227) #6
  %243 = load i8*, i8** %113, align 8
  %244 = getelementptr inbounds i8, i8* %243, i64 %220
  %245 = icmp ne i8* %243, null
  %246 = icmp ne i8* %244, null
  %247 = and i1 %245, %246
  br i1 %247, label %248, label %255, !prof !2

248:                                              ; preds = %242
  %249 = load i32, i32* %116, align 4
  %250 = zext i32 %249 to i64
  %251 = getelementptr inbounds i8, i8* %243, i64 %250
  %252 = ptrtoint i8* %251 to i64
  %253 = ptrtoint i8* %244 to i64
  %254 = sub i64 %252, %253
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %243, i8* nonnull align 1 %244, i64 %254, i1 false) #6
  br label %255

255:                                              ; preds = %248, %242
  %256 = load i32, i32* %116, align 4
  %257 = sub i32 %256, %217
  store i32 %257, i32* %116, align 4
  br label %258

258:                                              ; preds = %140, %204, %106, %168, %160, %255, %215, %203, %207, %210, %43, %3, %104
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j(%"class.WTF::Vector.50"*, i8*, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = add i32 %8, %2
  %10 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i32, i32* %10, align 8
  %12 = icmp ugt i32 %9, %11
  br i1 %12, label %13, label %87

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %0, i64 0, i32 0, i32 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = icmp ugt i8* %15, %1
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = zext i32 %8 to i64
  %19 = getelementptr inbounds i8, i8* %15, i64 %18
  %20 = icmp ugt i8* %19, %1
  br i1 %20, label %52, label %21

21:                                               ; preds = %17, %13
  %22 = lshr i32 %11, 2
  %23 = add nuw i32 %11, 1
  %24 = add i32 %23, %22
  %25 = icmp ugt i32 %24, 4
  %26 = select i1 %25, i32 %24, i32 4
  %27 = icmp ugt i32 %26, %9
  %28 = select i1 %27, i32 %26, i32 %9
  %29 = icmp ult i32 %11, %28
  br i1 %29, label %30, label %87, !prof !2

30:                                               ; preds = %21
  %31 = icmp eq i8* %15, null
  %32 = zext i32 %28 to i64
  %33 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %32) #6
  %34 = tail call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %33) #6
  %35 = ptrtoint i8* %34 to i64
  br i1 %31, label %36, label %39

36:                                               ; preds = %30
  %37 = bitcast %"class.WTF::Vector.50"* %0 to i64*
  store atomic i64 %35, i64* %37 monotonic, align 8
  %38 = trunc i64 %33 to i32
  store i32 %38, i32* %10, align 8
  br label %87

39:                                               ; preds = %30
  %40 = load i8*, i8** %14, align 8
  %41 = icmp ne i8* %34, null
  %42 = icmp ne i8* %40, null
  %43 = and i1 %41, %42
  br i1 %43, label %44, label %48, !prof !2

44:                                               ; preds = %39
  %45 = load i32, i32* %7, align 4
  %46 = zext i32 %45 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %34, i8* nonnull align 1 %40, i64 %46, i1 false) #6
  %47 = load i8*, i8** %14, align 8
  br label %48

48:                                               ; preds = %44, %39
  %49 = phi i8* [ %40, %39 ], [ %47, %44 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %49) #6
  %50 = bitcast %"class.WTF::Vector.50"* %0 to i64*
  store atomic i64 %35, i64* %50 monotonic, align 8
  %51 = trunc i64 %33 to i32
  store i32 %51, i32* %10, align 8
  br label %87

52:                                               ; preds = %17
  %53 = ptrtoint i8* %1 to i64
  %54 = ptrtoint i8* %15 to i64
  %55 = sub i64 %53, %54
  %56 = lshr i32 %11, 2
  %57 = add nuw i32 %11, 1
  %58 = add i32 %57, %56
  %59 = icmp ugt i32 %58, 4
  %60 = select i1 %59, i32 %58, i32 4
  %61 = icmp ugt i32 %60, %9
  %62 = select i1 %61, i32 %60, i32 %9
  %63 = icmp ult i32 %11, %62
  br i1 %63, label %64, label %84, !prof !2

64:                                               ; preds = %52
  %65 = icmp eq i8* %15, null
  %66 = zext i32 %62 to i64
  %67 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %66) #6
  %68 = tail call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %67) #6
  %69 = ptrtoint i8* %68 to i64
  br i1 %65, label %81, label %70

70:                                               ; preds = %64
  %71 = load i8*, i8** %14, align 8
  %72 = icmp ne i8* %68, null
  %73 = icmp ne i8* %71, null
  %74 = and i1 %72, %73
  br i1 %74, label %75, label %79, !prof !2

75:                                               ; preds = %70
  %76 = load i32, i32* %7, align 4
  %77 = zext i32 %76 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %68, i8* nonnull align 1 %71, i64 %77, i1 false) #6
  %78 = load i8*, i8** %14, align 8
  br label %79

79:                                               ; preds = %75, %70
  %80 = phi i8* [ %71, %70 ], [ %78, %75 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %80) #6
  br label %81

81:                                               ; preds = %64, %79
  %82 = bitcast %"class.WTF::Vector.50"* %0 to i64*
  store atomic i64 %69, i64* %82 monotonic, align 8
  %83 = trunc i64 %67 to i32
  store i32 %83, i32* %10, align 8
  br label %84

84:                                               ; preds = %81, %52
  %85 = phi i8* [ %15, %52 ], [ %68, %81 ]
  %86 = getelementptr inbounds i8, i8* %85, i64 %55
  br label %87

87:                                               ; preds = %84, %21, %36, %48, %3
  %88 = phi i8* [ %1, %3 ], [ %86, %84 ], [ %1, %21 ], [ %1, %36 ], [ %1, %48 ]
  %89 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %89) #6
  %90 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %90, align 8
  %91 = load i32, i32* %7, align 4
  %92 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %92)
  %93 = icmp ult i32 %9, %91
  br i1 %93, label %95, label %94

94:                                               ; preds = %87
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92)
  store i8* null, i8** %90, align 8
  br label %104

95:                                               ; preds = %87
  %96 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #6
  %97 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %91) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0), i8* %96, i8* %97) #6
  %98 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %99 = load i8*, i8** %98, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %92)
  store i8* %99, i8** %90, align 8
  %100 = icmp eq i8* %99, null
  br i1 %100, label %104, label %101

101:                                              ; preds = %95
  %102 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %102) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 1907, %"class.logging::CheckOpResult"* nonnull %5) #6
  %103 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %102) #6
  br label %104

104:                                              ; preds = %94, %95, %101
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %89) #6
  %105 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %0, i64 0, i32 0, i32 0, i32 0
  %106 = load i8*, i8** %105, align 8
  %107 = load i32, i32* %7, align 4
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds i8, i8* %106, i64 %108
  %110 = icmp ne i8* %109, null
  %111 = icmp ne i8* %88, null
  %112 = and i1 %111, %110
  br i1 %112, label %113, label %115, !prof !2

113:                                              ; preds = %104
  %114 = zext i32 %2 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %109, i8* nonnull align 1 %88, i64 %114, i1 false) #6
  br label %115

115:                                              ; preds = %104, %113
  store i32 %9, i32* %7, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink28MultipartImageResourceParser15SkippableLengthERKN3WTF6VectorIcLj0ENS1_18PartitionAllocatorEEEj(%"class.WTF::Vector.50"* dereferenceable(16), i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %1, 2
  %6 = icmp ult i32 %4, %5
  br i1 %6, label %16, label %7

7:                                                ; preds = %2
  %8 = tail call dereferenceable(1) i8* @_ZNK3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.50"* %0, i32 %1) #6
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %9, 13
  br i1 %10, label %11, label %16

11:                                               ; preds = %7
  %12 = add i32 %1, 1
  %13 = tail call dereferenceable(1) i8* @_ZNK3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.50"* %0, i32 %12) #6
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i8 %14, 10
  br i1 %15, label %25, label %16

16:                                               ; preds = %2, %11, %7
  %17 = load i32, i32* %3, align 4
  %18 = add i32 %1, 1
  %19 = icmp ult i32 %17, %18
  br i1 %19, label %24, label %20

20:                                               ; preds = %16
  %21 = tail call dereferenceable(1) i8* @_ZNK3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.50"* %0, i32 %1) #6
  %22 = load i8, i8* %21, align 1
  %23 = icmp eq i8 %22, 10
  br i1 %23, label %25, label %24

24:                                               ; preds = %16, %20
  br label %25

25:                                               ; preds = %20, %11, %24
  %26 = phi i32 [ 0, %24 ], [ 2, %11 ], [ 1, %20 ]
  ret i32 %26
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN5blink28MultipartImageResourceParser12ParseHeadersEv(%"class.blink::MultipartImageResourceParser"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = alloca %"class.blink::ResourceResponse", align 8
  %6 = alloca i32, align 4
  %7 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 3
  %8 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = icmp ult i32 %9, 2
  br i1 %10, label %21, label %11

11:                                               ; preds = %1
  %12 = tail call dereferenceable(1) i8* @_ZNK3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.50"* %7, i32 0) #6
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 13
  br i1 %14, label %15, label %19

15:                                               ; preds = %11
  %16 = tail call dereferenceable(1) i8* @_ZNK3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.50"* %7, i32 1) #6
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 10
  br i1 %18, label %29, label %19

19:                                               ; preds = %11, %15
  %20 = load i32, i32* %8, align 4
  br label %21

21:                                               ; preds = %19, %1
  %22 = phi i32 [ %20, %19 ], [ %9, %1 ]
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %28, label %24

24:                                               ; preds = %21
  %25 = tail call dereferenceable(1) i8* @_ZNK3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.50"* %7, i32 0) #6
  %26 = load i8, i8* %25, align 1
  %27 = icmp eq i8 %26, 10
  br i1 %27, label %29, label %28

28:                                               ; preds = %24, %21
  br label %29

29:                                               ; preds = %15, %24, %28
  %30 = phi i32 [ 0, %28 ], [ 2, %15 ], [ 1, %24 ]
  %31 = getelementptr inbounds %"class.blink::ResourceResponse", %"class.blink::ResourceResponse"* %5, i64 0, i32 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 1072, i8* nonnull %31) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %31, i8 -86, i64 1072, i1 false)
  %32 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 0
  %33 = tail call dereferenceable(112) %"class.blink::KURL"* @_ZNK5blink16ResourceResponse17CurrentRequestUrlEv(%"class.blink::ResourceResponse"* %32) #6
  call void @_ZN5blink16ResourceResponseC1ERKNS_4KURLE(%"class.blink::ResourceResponse"* nonnull %5, %"class.blink::KURL"* dereferenceable(112) %33) #6
  %34 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 0, i32 24
  %35 = load i8, i8* %34, align 1, !range !3
  %36 = getelementptr inbounds %"class.blink::ResourceResponse", %"class.blink::ResourceResponse"* %5, i64 0, i32 24
  store i8 %35, i8* %36, align 1
  %37 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 0, i32 36
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %"class.blink::ResourceResponse", %"class.blink::ResourceResponse"* %5, i64 0, i32 36
  store i32 %38, i32* %39, align 4
  %40 = call dereferenceable(24) %"class.blink::HTTPHeaderMap"* @_ZNK5blink16ResourceResponse16HttpHeaderFieldsEv(%"class.blink::ResourceResponse"* %32) #6
  %41 = getelementptr inbounds %"class.blink::HTTPHeaderMap", %"class.blink::HTTPHeaderMap"* %40, i64 0, i32 0, i32 0, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 0
  %44 = getelementptr inbounds %"class.blink::HTTPHeaderMap", %"class.blink::HTTPHeaderMap"* %40, i64 0, i32 0, i32 0, i32 0
  %45 = load %"struct.WTF::KeyValuePair"*, %"struct.WTF::KeyValuePair"** %44, align 8
  %46 = getelementptr inbounds %"class.blink::HTTPHeaderMap", %"class.blink::HTTPHeaderMap"* %40, i64 0, i32 0, i32 0, i32 1
  %47 = load i32, i32* %46, align 8
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %45, i64 %48
  br i1 %43, label %62, label %50

50:                                               ; preds = %29
  %51 = icmp eq i32 %47, 0
  br i1 %51, label %59, label %52

52:                                               ; preds = %50, %56
  %53 = phi %"struct.WTF::KeyValuePair"* [ %57, %56 ], [ %45, %50 ]
  %54 = bitcast %"struct.WTF::KeyValuePair"* %53 to i64*
  %55 = load i64, i64* %54, align 8
  switch i64 %55, label %59 [
    i64 -1, label %56
    i64 0, label %56
  ]

56:                                               ; preds = %52, %52
  %57 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %53, i64 1
  %58 = icmp eq %"struct.WTF::KeyValuePair"* %57, %49
  br i1 %58, label %62, label %52

59:                                               ; preds = %52, %50
  %60 = phi %"struct.WTF::KeyValuePair"* [ %45, %50 ], [ %53, %52 ]
  %61 = icmp eq %"struct.WTF::KeyValuePair"* %60, %49
  br i1 %61, label %62, label %71

62:                                               ; preds = %56, %71, %84, %81, %29, %59
  %63 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %63) #6
  store i32 0, i32* %6, align 4
  %64 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %7, i64 0, i32 0, i32 0, i32 0
  %65 = load i8*, i8** %64, align 8
  %66 = zext i32 %30 to i64
  %67 = getelementptr inbounds i8, i8* %65, i64 %66
  %68 = load i32, i32* %8, align 4
  %69 = sub i32 %68, %30
  %70 = call zeroext i1 @_ZN5blink29ParseMultipartHeadersFromBodyEPKcjPNS_16ResourceResponseEPj(i8* %67, i32 %69, %"class.blink::ResourceResponse"* nonnull %5, i32* nonnull %6) #6
  br i1 %70, label %86, label %130

71:                                               ; preds = %59, %84
  %72 = phi %"struct.WTF::KeyValuePair"* [ %78, %84 ], [ %60, %59 ]
  %73 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %72, i64 0, i32 0
  %74 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %72, i64 0, i32 1
  call void @_ZN5blink16ResourceResponse18AddHttpHeaderFieldERKN3WTF12AtomicStringES4_(%"class.blink::ResourceResponse"* nonnull %5, %"class.WTF::AtomicString"* dereferenceable(8) %73, %"class.WTF::AtomicString"* dereferenceable(8) %74) #6
  %75 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %72, i64 1
  %76 = icmp eq %"struct.WTF::KeyValuePair"* %75, %49
  br i1 %76, label %62, label %77

77:                                               ; preds = %71, %81
  %78 = phi %"struct.WTF::KeyValuePair"* [ %82, %81 ], [ %75, %71 ]
  %79 = bitcast %"struct.WTF::KeyValuePair"* %78 to i64*
  %80 = load i64, i64* %79, align 8
  switch i64 %80, label %84 [
    i64 -1, label %81
    i64 0, label %81
  ]

81:                                               ; preds = %77, %77
  %82 = getelementptr inbounds %"struct.WTF::KeyValuePair", %"struct.WTF::KeyValuePair"* %78, i64 1
  %83 = icmp eq %"struct.WTF::KeyValuePair"* %82, %49
  br i1 %83, label %62, label %77

84:                                               ; preds = %77
  %85 = icmp eq %"struct.WTF::KeyValuePair"* %78, %49
  br i1 %85, label %62, label %71

86:                                               ; preds = %62
  %87 = load i32, i32* %6, align 4
  %88 = add i32 %87, %30
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %123, label %90

90:                                               ; preds = %86
  %91 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %91) #6
  %92 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %92, align 8
  %93 = load i32, i32* %8, align 4
  %94 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %94) #6
  %95 = icmp ugt i32 %88, %93
  br i1 %95, label %97, label %96

96:                                               ; preds = %90
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #6
  store i8* null, i8** %92, align 8
  br label %106

97:                                               ; preds = %90
  %98 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %88) #6
  %99 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %93) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0), i8* %98, i8* %99) #6
  %100 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %101 = load i8*, i8** %100, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #6
  store i8* %101, i8** %92, align 8
  %102 = icmp eq i8* %101, null
  br i1 %102, label %106, label %103

103:                                              ; preds = %97
  %104 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %104) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 2085, %"class.logging::CheckOpResult"* nonnull %3) #6
  %105 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %104) #6
  br label %106

106:                                              ; preds = %103, %97, %96
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %91) #6
  %107 = load i8*, i8** %64, align 8
  %108 = zext i32 %88 to i64
  %109 = getelementptr inbounds i8, i8* %107, i64 %108
  %110 = icmp ne i8* %107, null
  %111 = icmp ne i8* %109, null
  %112 = and i1 %110, %111
  br i1 %112, label %113, label %120, !prof !2

113:                                              ; preds = %106
  %114 = load i32, i32* %8, align 4
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds i8, i8* %107, i64 %115
  %117 = ptrtoint i8* %116 to i64
  %118 = ptrtoint i8* %109 to i64
  %119 = sub i64 %117, %118
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %107, i8* nonnull align 1 %109, i64 %119, i1 false) #6
  br label %120

120:                                              ; preds = %113, %106
  %121 = load i32, i32* %8, align 4
  %122 = sub i32 %121, %88
  store i32 %122, i32* %8, align 4
  br label %123

123:                                              ; preds = %86, %120
  %124 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 2, i32 0, i32 0
  %125 = load %"class.blink::MultipartImageResourceParser::Client"*, %"class.blink::MultipartImageResourceParser::Client"** %124, align 8
  %126 = bitcast %"class.blink::MultipartImageResourceParser::Client"* %125 to void (%"class.blink::MultipartImageResourceParser::Client"*, %"class.blink::ResourceResponse"*)***
  %127 = load void (%"class.blink::MultipartImageResourceParser::Client"*, %"class.blink::ResourceResponse"*)**, void (%"class.blink::MultipartImageResourceParser::Client"*, %"class.blink::ResourceResponse"*)*** %126, align 8
  %128 = getelementptr inbounds void (%"class.blink::MultipartImageResourceParser::Client"*, %"class.blink::ResourceResponse"*)*, void (%"class.blink::MultipartImageResourceParser::Client"*, %"class.blink::ResourceResponse"*)** %127, i64 3
  %129 = load void (%"class.blink::MultipartImageResourceParser::Client"*, %"class.blink::ResourceResponse"*)*, void (%"class.blink::MultipartImageResourceParser::Client"*, %"class.blink::ResourceResponse"*)** %128, align 8
  call void %129(%"class.blink::MultipartImageResourceParser::Client"* %125, %"class.blink::ResourceResponse"* nonnull dereferenceable(1072) %5) #6
  br label %130

130:                                              ; preds = %62, %123
  %131 = phi i1 [ true, %123 ], [ false, %62 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %63) #6
  call void @_ZN5blink16ResourceResponseD1Ev(%"class.blink::ResourceResponse"* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 1072, i8* nonnull %31) #6
  ret i1 %131
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZN5blink28MultipartImageResourceParser12FindBoundaryERKN3WTF6VectorIcLj0ENS1_18PartitionAllocatorEEEPS4_(%"class.WTF::Vector.50"* dereferenceable(16), %"class.WTF::Vector.50"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.WTF::Vector.50", align 8
  %4 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %0, i64 0, i32 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = zext i32 %7 to i64
  %9 = getelementptr inbounds i8, i8* %5, i64 %8
  %10 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %1, i64 0, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %1, i64 0, i32 0, i32 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = zext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %11, i64 %14
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %47, label %17

17:                                               ; preds = %2
  %18 = icmp ult i32 %7, %13
  br i1 %18, label %88, label %19

19:                                               ; preds = %17
  %20 = sub nsw i64 1, %14
  %21 = getelementptr inbounds i8, i8* %9, i64 %20
  %22 = icmp eq i8* %21, %5
  br i1 %22, label %88, label %23

23:                                               ; preds = %19
  %24 = load i8, i8* %11, align 1
  br label %25

25:                                               ; preds = %32, %23
  %26 = phi i8* [ %5, %23 ], [ %33, %32 ]
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %27, %24
  br i1 %28, label %34, label %29

29:                                               ; preds = %25
  %30 = getelementptr inbounds i8, i8* %26, i64 1
  %31 = icmp eq i8* %30, %21
  br i1 %31, label %88, label %32

32:                                               ; preds = %29, %44
  %33 = phi i8* [ %30, %29 ], [ %45, %44 ]
  br label %25

34:                                               ; preds = %25, %39
  %35 = phi i8* [ %40, %39 ], [ %26, %25 ]
  %36 = phi i8* [ %37, %39 ], [ %11, %25 ]
  %37 = getelementptr inbounds i8, i8* %36, i64 1
  %38 = icmp eq i8* %37, %15
  br i1 %38, label %47, label %39

39:                                               ; preds = %34
  %40 = getelementptr inbounds i8, i8* %35, i64 1
  %41 = load i8, i8* %40, align 1
  %42 = load i8, i8* %37, align 1
  %43 = icmp eq i8 %41, %42
  br i1 %43, label %34, label %44

44:                                               ; preds = %39
  %45 = getelementptr inbounds i8, i8* %26, i64 1
  %46 = icmp eq i8* %45, %21
  br i1 %46, label %88, label %32

47:                                               ; preds = %34, %2
  %48 = phi i8* [ %5, %2 ], [ %26, %34 ]
  %49 = icmp eq i8* %48, %9
  br i1 %49, label %88, label %50

50:                                               ; preds = %47
  %51 = ptrtoint i8* %48 to i64
  %52 = ptrtoint i8* %5 to i64
  %53 = sub i64 %51, %52
  %54 = trunc i64 %53 to i32
  %55 = icmp ugt i32 %54, 1
  br i1 %55, label %56, label %88

56:                                               ; preds = %50
  %57 = add i32 %54, -1
  %58 = tail call dereferenceable(1) i8* @_ZNK3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.50"* %0, i32 %57) #6
  %59 = load i8, i8* %58, align 1
  %60 = icmp eq i8 %59, 45
  br i1 %60, label %61, label %88

61:                                               ; preds = %56
  %62 = add i32 %54, -2
  %63 = tail call dereferenceable(1) i8* @_ZNK3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.50"* %0, i32 %62) #6
  %64 = load i8, i8* %63, align 1
  %65 = icmp eq i8 %64, 45
  br i1 %65, label %66, label %88

66:                                               ; preds = %61
  %67 = bitcast %"class.WTF::Vector.50"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %67) #6
  %68 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %3, i64 0, i32 0, i32 0, i32 0
  %69 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %3, i64 0, i32 0, i32 0, i32 1
  %70 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %3, i64 0, i32 0, i32 0, i32 2
  %71 = tail call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 2) #6
  %72 = tail call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %71) #6
  %73 = ptrtoint i8* %72 to i64
  %74 = bitcast %"class.WTF::Vector.50"* %3 to i64*
  store atomic i64 %73, i64* %74 monotonic, align 8
  %75 = trunc i64 %71 to i32
  store i32 %75, i32* %69, align 8
  store i32 2, i32* %70, align 4
  %76 = bitcast i8* %72 to i16*
  store i16 11565, i16* %76, align 1
  %77 = load i8*, i8** %10, align 8
  %78 = load i32, i32* %12, align 4
  call void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6AppendIcEEvPKT_j(%"class.WTF::Vector.50"* nonnull %3, i8* %77, i32 %78) #6
  %79 = call dereferenceable(16) %"class.WTF::Vector.50"* @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEEaSERKS2_(%"class.WTF::Vector.50"* %1, %"class.WTF::Vector.50"* nonnull dereferenceable(16) %3)
  %80 = load i8*, i8** %68, align 8
  %81 = icmp eq i8* %80, null
  br i1 %81, label %87, label %82, !prof !2

82:                                               ; preds = %66
  %83 = load i32, i32* %70, align 4
  %84 = icmp eq i32 %83, 0
  br i1 %84, label %86, label %85, !prof !4

85:                                               ; preds = %82
  store i32 0, i32* %70, align 4
  br label %86

86:                                               ; preds = %85, %82
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* nonnull %80) #6
  store i8* null, i8** %68, align 8
  br label %87

87:                                               ; preds = %66, %86
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %67) #6
  br label %88

88:                                               ; preds = %44, %29, %19, %17, %50, %87, %61, %56, %47
  %89 = phi i32 [ -1, %47 ], [ %62, %87 ], [ %54, %61 ], [ %54, %56 ], [ %54, %50 ], [ -1, %17 ], [ -1, %19 ], [ -1, %29 ], [ -1, %44 ]
  ret i32 %89
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink28MultipartImageResourceParser6FinishEv(%"class.blink::MultipartImageResourceParser"* nocapture) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 6
  %3 = load i8, i8* %2, align 2, !range !3
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %5, label %38

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 5
  %7 = load i8, i8* %6, align 1, !range !3
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %23

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %23, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 2, i32 0, i32 0
  %15 = load %"class.blink::MultipartImageResourceParser::Client"*, %"class.blink::MultipartImageResourceParser::Client"** %14, align 8
  %16 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 3, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = zext i32 %11 to i64
  %19 = bitcast %"class.blink::MultipartImageResourceParser::Client"* %15 to void (%"class.blink::MultipartImageResourceParser::Client"*, i8*, i64)***
  %20 = load void (%"class.blink::MultipartImageResourceParser::Client"*, i8*, i64)**, void (%"class.blink::MultipartImageResourceParser::Client"*, i8*, i64)*** %19, align 8
  %21 = getelementptr inbounds void (%"class.blink::MultipartImageResourceParser::Client"*, i8*, i64)*, void (%"class.blink::MultipartImageResourceParser::Client"*, i8*, i64)** %20, i64 4
  %22 = load void (%"class.blink::MultipartImageResourceParser::Client"*, i8*, i64)*, void (%"class.blink::MultipartImageResourceParser::Client"*, i8*, i64)** %21, align 8
  tail call void %22(%"class.blink::MultipartImageResourceParser::Client"* %15, i8* %17, i64 %18) #6
  br label %23

23:                                               ; preds = %5, %13, %9
  %24 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 3
  %25 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 3, i32 0, i32 0, i32 1
  %26 = load i32, i32* %25, align 8
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %37, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 3, i32 0, i32 0, i32 2
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %33, label %32

32:                                               ; preds = %28
  store i32 0, i32* %29, align 4
  br label %33

33:                                               ; preds = %32, %28
  %34 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %24, i64 0, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = bitcast %"class.WTF::Vector.50"* %24 to i64*
  store atomic i64 0, i64* %36 monotonic, align 8
  store i32 0, i32* %25, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %35) #6
  br label %37

37:                                               ; preds = %23, %33
  store i8 1, i8* %2, align 2
  br label %38

38:                                               ; preds = %1, %37
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dereferenceable(112) %"class.blink::KURL"* @_ZNK5blink16ResourceResponse17CurrentRequestUrlEv(%"class.blink::ResourceResponse"*) local_unnamed_addr #1

declare void @_ZN5blink16ResourceResponseC1ERKNS_4KURLE(%"class.blink::ResourceResponse"*, %"class.blink::KURL"* dereferenceable(112)) unnamed_addr #1

declare dereferenceable(24) %"class.blink::HTTPHeaderMap"* @_ZNK5blink16ResourceResponse16HttpHeaderFieldsEv(%"class.blink::ResourceResponse"*) local_unnamed_addr #1

declare void @_ZN5blink16ResourceResponse18AddHttpHeaderFieldERKN3WTF12AtomicStringES4_(%"class.blink::ResourceResponse"*, %"class.WTF::AtomicString"* dereferenceable(8), %"class.WTF::AtomicString"* dereferenceable(8)) local_unnamed_addr #1

declare zeroext i1 @_ZN5blink29ParseMultipartHeadersFromBodyEPKcjPNS_16ResourceResponseEPj(i8*, i32, %"class.blink::ResourceResponse"*, i32*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5blink16ResourceResponseD1Ev(%"class.blink::ResourceResponse"*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.WTF::Vector.50"* @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEEaSERKS2_(%"class.WTF::Vector.50"*, %"class.WTF::Vector.50"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq %"class.WTF::Vector.50"* %1, %0
  br i1 %3, label %79, label %4, !prof !4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %0, i64 0, i32 0, i32 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %1, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp ugt i32 %6, %8
  br i1 %9, label %10, label %11

10:                                               ; preds = %4
  store i32 %8, i32* %5, align 4
  br label %54

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %0, i64 0, i32 0, i32 0, i32 1
  %13 = load i32, i32* %12, align 8
  %14 = icmp ugt i32 %8, %13
  br i1 %14, label %15, label %54

15:                                               ; preds = %11
  %16 = icmp eq i32 %13, 0
  br i1 %16, label %26, label %17

17:                                               ; preds = %15
  %18 = icmp eq i32 %6, 0
  br i1 %18, label %20, label %19

19:                                               ; preds = %17
  store i32 0, i32* %5, align 4
  br label %20

20:                                               ; preds = %19, %17
  %21 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %0, i64 0, i32 0, i32 0, i32 0
  %22 = load i8*, i8** %21, align 8
  %23 = bitcast %"class.WTF::Vector.50"* %0 to i64*
  store atomic i64 0, i64* %23 monotonic, align 8
  store i32 0, i32* %12, align 8
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %22) #6
  %24 = load i32, i32* %7, align 4
  %25 = load i32, i32* %12, align 8
  br label %26

26:                                               ; preds = %15, %20
  %27 = phi i32 [ 0, %15 ], [ %25, %20 ]
  %28 = phi i32 [ %8, %15 ], [ %24, %20 ]
  %29 = icmp ult i32 %27, %28
  br i1 %29, label %30, label %54, !prof !2

30:                                               ; preds = %26
  %31 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %0, i64 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  %34 = zext i32 %28 to i64
  %35 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %34) #6
  %36 = tail call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %35) #6
  %37 = ptrtoint i8* %36 to i64
  br i1 %33, label %38, label %41

38:                                               ; preds = %30
  %39 = bitcast %"class.WTF::Vector.50"* %0 to i64*
  store atomic i64 %37, i64* %39 monotonic, align 8
  %40 = trunc i64 %35 to i32
  store i32 %40, i32* %12, align 8
  br label %54

41:                                               ; preds = %30
  %42 = load i8*, i8** %31, align 8
  %43 = icmp ne i8* %36, null
  %44 = icmp ne i8* %42, null
  %45 = and i1 %43, %44
  br i1 %45, label %46, label %50, !prof !2

46:                                               ; preds = %41
  %47 = load i32, i32* %5, align 4
  %48 = zext i32 %47 to i64
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %36, i8* nonnull align 1 %42, i64 %48, i1 false) #6
  %49 = load i8*, i8** %31, align 8
  br label %50

50:                                               ; preds = %46, %41
  %51 = phi i8* [ %42, %41 ], [ %49, %46 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %51) #6
  %52 = bitcast %"class.WTF::Vector.50"* %0 to i64*
  store atomic i64 %37, i64* %52 monotonic, align 8
  %53 = trunc i64 %35 to i32
  store i32 %53, i32* %12, align 8
  br label %54

54:                                               ; preds = %50, %38, %26, %11, %10
  %55 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %1, i64 0, i32 0, i32 0, i32 0
  %56 = load i8*, i8** %55, align 8
  %57 = load i32, i32* %5, align 4
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %0, i64 0, i32 0, i32 0, i32 0
  %60 = load i8*, i8** %59, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %60, i8* align 1 %56, i64 %58, i1 false) #6
  %61 = load i8*, i8** %55, align 8
  %62 = load i32, i32* %5, align 4
  %63 = zext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %61, i64 %63
  %65 = load i8*, i8** %59, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 %63
  %67 = icmp ne i8* %66, null
  %68 = icmp ne i8* %64, null
  %69 = and i1 %68, %67
  br i1 %69, label %70, label %77, !prof !2

70:                                               ; preds = %54
  %71 = load i32, i32* %7, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %61, i64 %72
  %74 = ptrtoint i8* %73 to i64
  %75 = ptrtoint i8* %64 to i64
  %76 = sub i64 %74, %75
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %66, i8* nonnull align 1 %64, i64 %76, i1 false) #6
  br label %77

77:                                               ; preds = %54, %70
  %78 = load i32, i32* %7, align 4
  store i32 %78, i32* %5, align 4
  br label %79

79:                                               ; preds = %2, %77
  ret %"class.WTF::Vector.50"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink28MultipartImageResourceParser5TraceEPNS_7VisitorE(%"class.blink::MultipartImageResourceParser"* nocapture readonly, %"class.blink::Visitor"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::MultipartImageResourceParser", %"class.blink::MultipartImageResourceParser"* %0, i64 0, i32 2
  %4 = bitcast %"class.blink::Member"* %3 to i64*
  %5 = load atomic i64, i64* %4 monotonic, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %73, label %7

7:                                                ; preds = %2
  %8 = inttoptr i64 %5 to i8*
  %9 = and i64 %5, -131072
  %10 = inttoptr i64 %9 to i8*
  %11 = getelementptr inbounds i8, i8* %10, i64 4138
  %12 = load i8, i8* %11, align 2
  %13 = icmp eq i8 %12, 1
  br i1 %13, label %14, label %16

14:                                               ; preds = %7
  %15 = getelementptr inbounds i8, i8* %10, i64 4160
  br label %54

16:                                               ; preds = %7
  %17 = getelementptr inbounds i8, i8* %10, i64 4096
  %18 = bitcast i8* %17 to %"class.blink::NormalPage"*
  %19 = getelementptr inbounds i8, i8* %10, i64 4400
  %20 = bitcast i8* %19 to i8**
  %21 = bitcast i8* %19 to i64*
  %22 = load i64, i64* %21, align 16
  %23 = sub i64 %5, %22
  %24 = lshr i64 %23, 3
  %25 = lshr i64 %23, 6
  %26 = getelementptr inbounds %"class.blink::NormalPage", %"class.blink::NormalPage"* %18, i64 0, i32 2, i32 0, i32 1, i64 %25
  %27 = load atomic i8, i8* %26 acquire, align 1
  %28 = trunc i64 %24 to i32
  %29 = and i32 %28, 7
  %30 = shl i32 2, %29
  %31 = trunc i32 %30 to i8
  %32 = add i8 %31, -1
  %33 = and i8 %32, %27
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %41

35:                                               ; preds = %16, %35
  %36 = phi i64 [ %37, %35 ], [ %25, %16 ]
  %37 = add i64 %36, -1
  %38 = getelementptr inbounds %"class.blink::NormalPage", %"class.blink::NormalPage"* %18, i64 0, i32 2, i32 0, i32 1, i64 %37
  %39 = load atomic i8, i8* %38 acquire, align 1
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %35, label %41

41:                                               ; preds = %35, %16
  %42 = phi i64 [ %25, %16 ], [ %37, %35 ]
  %43 = phi i8 [ %33, %16 ], [ %39, %35 ]
  %44 = zext i8 %43 to i32
  %45 = tail call i32 @llvm.ctlz.i32(i32 %44, i1 true) #6, !range !5
  %46 = add nsw i32 %45, -24
  %47 = shl i64 %42, 3
  %48 = or i64 %47, 7
  %49 = sext i32 %46 to i64
  %50 = sub i64 %48, %49
  %51 = shl i64 %50, 3
  %52 = load i8*, i8** %20, align 16
  %53 = getelementptr inbounds i8, i8* %52, i64 %51
  br label %54

54:                                               ; preds = %41, %14
  %55 = phi i8* [ %15, %14 ], [ %53, %41 ]
  %56 = getelementptr inbounds i8, i8* %55, i64 8
  %57 = getelementptr inbounds i8, i8* %55, i64 4
  %58 = bitcast i8* %57 to i16*
  %59 = load atomic i16, i16* %58 acquire, align 2
  %60 = lshr i16 %59, 2
  %61 = load %"class.blink::GCInfoTable"*, %"class.blink::GCInfoTable"** @_ZN5blink11GCInfoTable13global_table_E, align 8
  %62 = getelementptr inbounds %"class.blink::GCInfoTable", %"class.blink::GCInfoTable"* %61, i64 0, i32 0
  %63 = load %"struct.blink::GCInfo"**, %"struct.blink::GCInfo"*** %62, align 8
  %64 = zext i16 %60 to i64
  %65 = getelementptr inbounds %"struct.blink::GCInfo"*, %"struct.blink::GCInfo"** %63, i64 %64
  %66 = load %"struct.blink::GCInfo"*, %"struct.blink::GCInfo"** %65, align 8
  %67 = getelementptr inbounds %"struct.blink::GCInfo", %"struct.blink::GCInfo"* %66, i64 0, i32 0
  %68 = load void (%"class.blink::Visitor"*, i8*)*, void (%"class.blink::Visitor"*, i8*)** %67, align 8
  %69 = bitcast %"class.blink::Visitor"* %1 to void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)***
  %70 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)**, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*** %69, align 8
  %71 = getelementptr inbounds void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %70, i64 5
  %72 = load void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)*, void (%"class.blink::Visitor"*, i8*, i8*, void (%"class.blink::Visitor"*, i8*)*)** %71, align 8
  tail call void %72(%"class.blink::Visitor"* %1, i8* nonnull %8, i8* %56, void (%"class.blink::Visitor"*, i8*)* %68) #6
  br label %73

73:                                               ; preds = %2, %54
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #1

declare i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #6
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 2145386496
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #6
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 2145386496) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #6
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #6
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #6
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #6
  %20 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %0) #6
  ret i64 %20
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #1

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) i8* @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.50"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #6
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #6
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i8* %14, i8* %15) #6
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #6
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #6
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #6
  %23 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds i8, i8* %24, i64 %25
  ret i8* %26
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIcLj0ENS_18PartitionAllocatorEE6insertIcEEvjPKT_j(%"class.WTF::Vector.50"*, i32, i8*, i32) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = alloca %"class.logging::CheckOpResult", align 8
  %10 = alloca %"class.logging::CheckError", align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #6
  %12 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %12, align 8
  %13 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %0, i64 0, i32 0, i32 0, i32 2
  %14 = load i32, i32* %13, align 4
  %15 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %15)
  %16 = icmp ult i32 %14, %1
  br i1 %16, label %18, label %17

17:                                               ; preds = %4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15)
  store i8* null, i8** %12, align 8
  br label %27

18:                                               ; preds = %4
  %19 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #6
  %20 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %14) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %5, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0), i8* %19, i8* %20) #6
  %21 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  %22 = load i8*, i8** %21, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %15)
  store i8* %22, i8** %12, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %27, label %24

24:                                               ; preds = %18
  %25 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 1990, %"class.logging::CheckOpResult"* nonnull %7) #6
  %26 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #6
  br label %27

27:                                               ; preds = %17, %18, %24
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #6
  %28 = load i32, i32* %13, align 4
  %29 = add i32 %28, %3
  %30 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %0, i64 0, i32 0, i32 0, i32 1
  %31 = load i32, i32* %30, align 8
  %32 = icmp ugt i32 %29, %31
  br i1 %32, label %33, label %107

33:                                               ; preds = %27
  %34 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %0, i64 0, i32 0, i32 0, i32 0
  %35 = load i8*, i8** %34, align 8
  %36 = icmp ugt i8* %35, %2
  br i1 %36, label %41, label %37

37:                                               ; preds = %33
  %38 = zext i32 %28 to i64
  %39 = getelementptr inbounds i8, i8* %35, i64 %38
  %40 = icmp ugt i8* %39, %2
  br i1 %40, label %72, label %41

41:                                               ; preds = %37, %33
  %42 = lshr i32 %31, 2
  %43 = add nuw i32 %31, 1
  %44 = add i32 %43, %42
  %45 = icmp ugt i32 %44, 4
  %46 = select i1 %45, i32 %44, i32 4
  %47 = icmp ugt i32 %46, %29
  %48 = select i1 %47, i32 %46, i32 %29
  %49 = icmp ult i32 %31, %48
  br i1 %49, label %50, label %107, !prof !2

50:                                               ; preds = %41
  %51 = icmp eq i8* %35, null
  %52 = zext i32 %48 to i64
  %53 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %52) #6
  %54 = call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %53) #6
  %55 = ptrtoint i8* %54 to i64
  br i1 %51, label %56, label %59

56:                                               ; preds = %50
  %57 = bitcast %"class.WTF::Vector.50"* %0 to i64*
  store atomic i64 %55, i64* %57 monotonic, align 8
  %58 = trunc i64 %53 to i32
  store i32 %58, i32* %30, align 8
  br label %107

59:                                               ; preds = %50
  %60 = load i8*, i8** %34, align 8
  %61 = icmp ne i8* %54, null
  %62 = icmp ne i8* %60, null
  %63 = and i1 %61, %62
  br i1 %63, label %64, label %68, !prof !2

64:                                               ; preds = %59
  %65 = load i32, i32* %13, align 4
  %66 = zext i32 %65 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %54, i8* nonnull align 1 %60, i64 %66, i1 false) #6
  %67 = load i8*, i8** %34, align 8
  br label %68

68:                                               ; preds = %64, %59
  %69 = phi i8* [ %60, %59 ], [ %67, %64 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %69) #6
  %70 = bitcast %"class.WTF::Vector.50"* %0 to i64*
  store atomic i64 %55, i64* %70 monotonic, align 8
  %71 = trunc i64 %53 to i32
  store i32 %71, i32* %30, align 8
  br label %107

72:                                               ; preds = %37
  %73 = ptrtoint i8* %2 to i64
  %74 = ptrtoint i8* %35 to i64
  %75 = sub i64 %73, %74
  %76 = lshr i32 %31, 2
  %77 = add nuw i32 %31, 1
  %78 = add i32 %77, %76
  %79 = icmp ugt i32 %78, 4
  %80 = select i1 %79, i32 %78, i32 4
  %81 = icmp ugt i32 %80, %29
  %82 = select i1 %81, i32 %80, i32 %29
  %83 = icmp ult i32 %31, %82
  br i1 %83, label %84, label %104, !prof !2

84:                                               ; preds = %72
  %85 = icmp eq i8* %35, null
  %86 = zext i32 %82 to i64
  %87 = call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIcEEmm(i64 %86) #6
  %88 = call i8* @_ZN3WTF18PartitionAllocator21AllocateVectorBackingIcEEPT_m(i64 %87) #6
  %89 = ptrtoint i8* %88 to i64
  br i1 %85, label %101, label %90

90:                                               ; preds = %84
  %91 = load i8*, i8** %34, align 8
  %92 = icmp ne i8* %88, null
  %93 = icmp ne i8* %91, null
  %94 = and i1 %92, %93
  br i1 %94, label %95, label %99, !prof !2

95:                                               ; preds = %90
  %96 = load i32, i32* %13, align 4
  %97 = zext i32 %96 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %88, i8* nonnull align 1 %91, i64 %97, i1 false) #6
  %98 = load i8*, i8** %34, align 8
  br label %99

99:                                               ; preds = %95, %90
  %100 = phi i8* [ %91, %90 ], [ %98, %95 ]
  call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %100) #6
  br label %101

101:                                              ; preds = %84, %99
  %102 = bitcast %"class.WTF::Vector.50"* %0 to i64*
  store atomic i64 %89, i64* %102 monotonic, align 8
  %103 = trunc i64 %87 to i32
  store i32 %103, i32* %30, align 8
  br label %104

104:                                              ; preds = %101, %72
  %105 = phi i8* [ %35, %72 ], [ %88, %101 ]
  %106 = getelementptr inbounds i8, i8* %105, i64 %75
  br label %107

107:                                              ; preds = %104, %41, %56, %68, %27
  %108 = phi i8* [ %2, %27 ], [ %106, %104 ], [ %2, %41 ], [ %2, %56 ], [ %2, %68 ]
  %109 = bitcast %"class.logging::CheckOpResult"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %109) #6
  %110 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %9, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %110, align 8
  %111 = load i32, i32* %13, align 4
  %112 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %112)
  %113 = icmp ult i32 %29, %111
  br i1 %113, label %115, label %114

114:                                              ; preds = %107
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %112)
  store i8* null, i8** %110, align 8
  br label %124

115:                                              ; preds = %107
  %116 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %29) #6
  %117 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %111) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %6, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0), i8* %116, i8* %117) #6
  %118 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  %119 = load i8*, i8** %118, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %112)
  store i8* %119, i8** %110, align 8
  %120 = icmp eq i8* %119, null
  br i1 %120, label %124, label %121

121:                                              ; preds = %115
  %122 = bitcast %"class.logging::CheckError"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %122) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %10, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 1996, %"class.logging::CheckOpResult"* nonnull %9) #6
  %123 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %10) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %10) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %122) #6
  br label %124

124:                                              ; preds = %114, %115, %121
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %109) #6
  %125 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %0, i64 0, i32 0, i32 0, i32 0
  %126 = load i8*, i8** %125, align 8
  %127 = zext i32 %1 to i64
  %128 = getelementptr inbounds i8, i8* %126, i64 %127
  %129 = zext i32 %3 to i64
  %130 = getelementptr inbounds i8, i8* %128, i64 %129
  %131 = icmp ne i8* %130, null
  %132 = icmp ne i8* %128, null
  %133 = and i1 %132, %131
  br i1 %133, label %134, label %141, !prof !2

134:                                              ; preds = %124
  %135 = load i32, i32* %13, align 4
  %136 = zext i32 %135 to i64
  %137 = getelementptr inbounds i8, i8* %126, i64 %136
  %138 = ptrtoint i8* %137 to i64
  %139 = ptrtoint i8* %128 to i64
  %140 = sub i64 %138, %139
  call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 1 %130, i8* nonnull align 1 %128, i64 %140, i1 false) #6
  br label %141

141:                                              ; preds = %124, %134
  %142 = icmp ne i8* %108, null
  %143 = and i1 %142, %132
  br i1 %143, label %144, label %145, !prof !2

144:                                              ; preds = %141
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %128, i8* nonnull align 1 %108, i64 %129, i1 false) #6
  br label %145

145:                                              ; preds = %141, %144
  store i32 %29, i32* %13, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(1) i8* @_ZNK3WTF6VectorIcLj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector.50"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #6
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #6
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #6
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i8* %14, i8* %15) #6
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #6
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.5, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #6
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #6
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #6
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #6
  %23 = getelementptr inbounds %"class.WTF::Vector.50", %"class.WTF::Vector.50"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds i8, i8* %24, i64 %25
  ret i8* %26
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nofree nounwind readonly }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 2000, i32 1}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 1, i32 2000}
!5 = !{i32 24, i32 33}
