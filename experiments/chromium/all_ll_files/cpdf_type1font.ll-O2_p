; ModuleID = '../../third_party/pdfium/core/fpdfapi/font/cpdf_type1font.cpp'
source_filename = "../../third_party/pdfium/core/fpdfapi/font/cpdf_type1font.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.CPDF_Type1Font = type <{ %class.CPDF_SimpleFont, %"class.pdfium::Optional", [6 x i8] }>
%class.CPDF_SimpleFont = type { %class.CPDF_Font, %class.CPDF_FontEncoding, i32, i8, %"class.std::__1::vector.105", [256 x i16], [256 x i16], [256 x %struct.FX_RECT] }
%class.CPDF_Font = type { %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.fxcrt::UnownedPtr", %class.CFX_Font, %"class.std::__1::vector.46", %"class.fxcrt::RetainPtr.54", %"class.fxcrt::RetainPtr.93", %"class.fxcrt::ByteString", %"class.std::__1::unique_ptr.99", i8, i32, i32, i32, i32, i32, %struct.FX_RECT }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.fxcrt::Observable" = type { %"class.std::__1::set" }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type opaque
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.fxcrt::UnownedPtr" = type { %class.CPDF_Document* }
%class.CFX_Font = type <{ %"class.fxcrt::RetainPtr", %"class.std::__1::unique_ptr.7", %"class.fxcrt::RetainPtr.11", %"class.fxcrt::RetainPtr.27", %"class.std::__1::unique_ptr.33", %"class.std::__1::unique_ptr.39", %"class.std::__1::vector", %"class.pdfium::span", i8, i8, [6 x i8] }>
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %class.IFX_SeekableReadStream* }
%class.IFX_SeekableReadStream = type opaque
%"class.std::__1::unique_ptr.7" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %struct.FT_StreamRec_* }
%struct.FT_StreamRec_ = type { i8*, i64, i64, %union.FT_StreamDesc_, %union.FT_StreamDesc_, i64 (%struct.FT_StreamRec_*, i64, i8*, i64)*, void (%struct.FT_StreamRec_*)*, %struct.FT_MemoryRec_*, i8*, i8* }
%union.FT_StreamDesc_ = type { i64 }
%struct.FT_MemoryRec_ = type { i8*, i8* (%struct.FT_MemoryRec_*, i64)*, void (%struct.FT_MemoryRec_*, i8*)*, i8* (%struct.FT_MemoryRec_*, i64, i64, i8*)* }
%"class.fxcrt::RetainPtr.11" = type { %"class.std::__1::unique_ptr.12" }
%"class.std::__1::unique_ptr.12" = type { %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %class.CFX_Face* }
%class.CFX_Face = type { %"class.fxcrt::Retainable", %"class.fxcrt::Observable", %"class.std::__1::unique_ptr.15", %"class.fxcrt::RetainPtr.19" }
%"class.std::__1::unique_ptr.15" = type { %"class.std::__1::__compressed_pair.16" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17" }
%"struct.std::__1::__compressed_pair_elem.17" = type { %struct.FT_FaceRec_* }
%struct.FT_FaceRec_ = type { i64, i64, i64, i64, i64, i8*, i8*, i32, %struct.FT_Bitmap_Size_*, i32, %struct.FT_CharMapRec_**, %struct.FT_Generic_, %struct.FT_BBox_, i16, i16, i16, i16, i16, i16, i16, i16, %struct.FT_GlyphSlotRec_*, %struct.FT_SizeRec_*, %struct.FT_CharMapRec_*, %struct.FT_DriverRec_*, %struct.FT_MemoryRec_*, %struct.FT_StreamRec_*, %struct.FT_ListRec_, %struct.FT_Generic_, i8*, %struct.FT_Face_InternalRec_* }
%struct.FT_Bitmap_Size_ = type { i16, i16, i64, i64, i64 }
%struct.FT_BBox_ = type { i64, i64, i64, i64 }
%struct.FT_GlyphSlotRec_ = type { %struct.FT_LibraryRec_*, %struct.FT_FaceRec_*, %struct.FT_GlyphSlotRec_*, i32, %struct.FT_Generic_, %struct.FT_Glyph_Metrics_, i64, i64, %struct.FT_Vector_, i32, %struct.FT_Bitmap_, i32, i32, %struct.FT_Outline_, i32, %struct.FT_SubGlyphRec_*, i8*, i64, i64, i64, i8*, %struct.FT_Slot_InternalRec_* }
%struct.FT_LibraryRec_ = type opaque
%struct.FT_Glyph_Metrics_ = type { i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.FT_Vector_ = type { i64, i64 }
%struct.FT_Bitmap_ = type { i32, i32, i32, i8*, i16, i8, i8, i8* }
%struct.FT_Outline_ = type { i16, i16, %struct.FT_Vector_*, i8*, i16*, i32 }
%struct.FT_SubGlyphRec_ = type opaque
%struct.FT_Slot_InternalRec_ = type opaque
%struct.FT_SizeRec_ = type { %struct.FT_FaceRec_*, %struct.FT_Generic_, %struct.FT_Size_Metrics_, %struct.FT_Size_InternalRec_* }
%struct.FT_Size_Metrics_ = type { i16, i16, i64, i64, i64, i64, i64, i64 }
%struct.FT_Size_InternalRec_ = type opaque
%struct.FT_CharMapRec_ = type { %struct.FT_FaceRec_*, i32, i16, i16 }
%struct.FT_DriverRec_ = type opaque
%struct.FT_ListRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_* }
%struct.FT_ListNodeRec_ = type { %struct.FT_ListNodeRec_*, %struct.FT_ListNodeRec_*, i8* }
%struct.FT_Generic_ = type { i8*, void (i8*)* }
%struct.FT_Face_InternalRec_ = type opaque
%"class.fxcrt::RetainPtr.19" = type { %"class.std::__1::unique_ptr.20" }
%"class.std::__1::unique_ptr.20" = type { %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"class.fxcrt::Retainable"* }
%"class.fxcrt::RetainPtr.27" = type { %"class.std::__1::unique_ptr.28" }
%"class.std::__1::unique_ptr.28" = type { %"class.std::__1::__compressed_pair.29" }
%"class.std::__1::__compressed_pair.29" = type { %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.30" = type { %class.CFX_GlyphCache* }
%class.CFX_GlyphCache = type opaque
%"class.std::__1::unique_ptr.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %class.CFX_SubstFont* }
%class.CFX_SubstFont = type opaque
%"class.std::__1::unique_ptr.39" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { i8* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair.43" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr.45", i64 }
%"class.fxcrt::UnownedPtr.45" = type { i8* }
%"class.std::__1::vector.46" = type { %"class.std::__1::__vector_base.47" }
%"class.std::__1::__vector_base.47" = type { %"class.std::__1::unique_ptr.48"*, %"class.std::__1::unique_ptr.48"*, %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::unique_ptr.48" = type opaque
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.std::__1::unique_ptr.48"* }
%"class.fxcrt::RetainPtr.54" = type { %"class.std::__1::unique_ptr.55" }
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.56" }
%"class.std::__1::__compressed_pair.56" = type { %"struct.std::__1::__compressed_pair_elem.57" }
%"struct.std::__1::__compressed_pair_elem.57" = type { %class.CPDF_StreamAcc* }
%class.CPDF_StreamAcc = type { %"class.fxcrt::Retainable", %"class.fxcrt::MaybeOwned", i32, %"class.fxcrt::ByteString", %"class.fxcrt::RetainPtr.64", %"class.fxcrt::RetainPtr.85" }
%"class.fxcrt::MaybeOwned" = type { %"class.std::__1::unique_ptr.39", %"class.fxcrt::UnownedPtr.45" }
%"class.fxcrt::RetainPtr.64" = type { %"class.std::__1::unique_ptr.65" }
%"class.std::__1::unique_ptr.65" = type { %"class.std::__1::__compressed_pair.66" }
%"class.std::__1::__compressed_pair.66" = type { %"struct.std::__1::__compressed_pair_elem.67" }
%"struct.std::__1::__compressed_pair_elem.67" = type { %class.CPDF_Dictionary* }
%"class.fxcrt::RetainPtr.85" = type { %"class.std::__1::unique_ptr.86" }
%"class.std::__1::unique_ptr.86" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %class.CPDF_Stream* }
%class.CPDF_Stream = type opaque
%"class.fxcrt::RetainPtr.93" = type { %"class.std::__1::unique_ptr.94" }
%"class.std::__1::unique_ptr.94" = type { %"class.std::__1::__compressed_pair.95" }
%"class.std::__1::__compressed_pair.95" = type { %"struct.std::__1::__compressed_pair_elem.96" }
%"struct.std::__1::__compressed_pair_elem.96" = type { %class.CPDF_Dictionary* }
%"class.fxcrt::ByteString" = type { %"class.fxcrt::RetainPtr.58" }
%"class.fxcrt::RetainPtr.58" = type { %"class.std::__1::unique_ptr.59" }
%"class.std::__1::unique_ptr.59" = type { %"class.std::__1::__compressed_pair.60" }
%"class.std::__1::__compressed_pair.60" = type { %"struct.std::__1::__compressed_pair_elem.61" }
%"struct.std::__1::__compressed_pair_elem.61" = type { %"class.fxcrt::StringDataTemplate"* }
%"class.fxcrt::StringDataTemplate" = type <{ i64, i64, i64, [1 x i8], [7 x i8] }>
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %class.CPDF_ToUnicodeMap* }
%class.CPDF_ToUnicodeMap = type opaque
%struct.FX_RECT = type { i32, i32, i32, i32 }
%class.CPDF_FontEncoding = type { [256 x i32] }
%"class.std::__1::vector.105" = type { %"class.std::__1::__vector_base.106" }
%"class.std::__1::__vector_base.106" = type { %"class.fxcrt::ByteString"*, %"class.fxcrt::ByteString"*, %"class.std::__1::__compressed_pair.107" }
%"class.std::__1::__compressed_pair.107" = type { %"struct.std::__1::__compressed_pair_elem.108" }
%"struct.std::__1::__compressed_pair_elem.108" = type { %"class.fxcrt::ByteString"* }
%"class.pdfium::Optional" = type { %"class.pdfium::internal::OptionalBase" }
%"class.pdfium::internal::OptionalBase" = type { %"struct.pdfium::internal::OptionalStorage" }
%"struct.pdfium::internal::OptionalStorage" = type { %"struct.pdfium::internal::OptionalStorageBase" }
%"struct.pdfium::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { %"struct.pdfium::internal::DummyUnionMember" }
%"struct.pdfium::internal::DummyUnionMember" = type { i8 }
%class.CPDF_Document = type opaque
%class.CPDF_Dictionary = type { %class.CPDF_Object, i32, %"class.fxcrt::WeakPtr", %"class.std::__1::map" }
%class.CPDF_Object = type { %"class.fxcrt::Retainable", i32, i32 }
%"class.fxcrt::WeakPtr" = type { %"class.fxcrt::RetainPtr.68" }
%"class.fxcrt::RetainPtr.68" = type { %"class.std::__1::unique_ptr.69" }
%"class.std::__1::unique_ptr.69" = type { %"class.std::__1::__compressed_pair.70" }
%"class.std::__1::__compressed_pair.70" = type { %"struct.std::__1::__compressed_pair_elem.71" }
%"struct.std::__1::__compressed_pair_elem.71" = type { %"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle"* }
%"class.fxcrt::WeakPtr<fxcrt::StringPoolTemplate<fxcrt::ByteString>, std::__1::default_delete<fxcrt::StringPoolTemplate<fxcrt::ByteString> > >::Handle" = type { i64, %"class.std::__1::unique_ptr.122" }
%"class.std::__1::unique_ptr.122" = type { %"class.std::__1::__compressed_pair.123" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"class.fxcrt::StringPoolTemplate"* }
%"class.fxcrt::StringPoolTemplate" = type { %"class.std::__1::unordered_set" }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.125", %"class.std::__1::__compressed_pair.133", %"class.std::__1::__compressed_pair.138", %"class.std::__1::__compressed_pair.140", [4 x i8] }>
%"class.std::__1::unique_ptr.125" = type { %"class.std::__1::__compressed_pair.126" }
%"class.std::__1::__compressed_pair.126" = type { %"struct.std::__1::__compressed_pair_elem.127", %"struct.std::__1::__compressed_pair_elem.128" }
%"struct.std::__1::__compressed_pair_elem.127" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.128" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.129" }
%"class.std::__1::__compressed_pair.129" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.133" = type { %"struct.std::__1::__compressed_pair_elem.134" }
%"struct.std::__1::__compressed_pair_elem.134" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.138" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::__compressed_pair.140" = type { %"struct.std::__1::__compressed_pair_elem.141" }
%"struct.std::__1::__compressed_pair_elem.141" = type { float }
%"class.std::__1::map" = type { %"class.std::__1::__tree.74" }
%"class.std::__1::__tree.74" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.75", %"class.std::__1::__compressed_pair.79" }
%"class.std::__1::__compressed_pair.75" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.79" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%class.CPDF_TrueTypeFont = type opaque
%class.CPDF_Type3Font = type opaque
%class.CPDF_CIDFont = type opaque
%"class.fxcrt::StringViewTemplate" = type { %"class.pdfium::span.112" }
%"class.pdfium::span.112" = type { %"class.fxcrt::UnownedPtr.113", i64 }
%"class.fxcrt::UnownedPtr.113" = type { i8* }
%"class.fxcrt::WideString" = type { %"class.fxcrt::RetainPtr.114" }
%"class.fxcrt::RetainPtr.114" = type { %"class.std::__1::unique_ptr.115" }
%"class.std::__1::unique_ptr.115" = type { %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"class.fxcrt::StringDataTemplate.118"* }
%"class.fxcrt::StringDataTemplate.118" = type <{ i64, i64, i64, [1 x i32], [4 x i8] }>

@_ZTV14CPDF_Type1Font = hidden unnamed_addr constant { [30 x i8*] } { [30 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CPDF_Type1Font*)* @_ZN14CPDF_Type1FontD2Ev to i8*), i8* bitcast (void (%class.CPDF_Type1Font*)* @_ZN14CPDF_Type1FontD0Ev to i8*), i8* bitcast (i1 (%class.CPDF_Type1Font*)* @_ZNK14CPDF_Type1Font11IsType1FontEv to i8*), i8* bitcast (i1 (%class.CPDF_Font*)* @_ZNK9CPDF_Font14IsTrueTypeFontEv to i8*), i8* bitcast (i1 (%class.CPDF_Font*)* @_ZNK9CPDF_Font11IsType3FontEv to i8*), i8* bitcast (i1 (%class.CPDF_Font*)* @_ZNK9CPDF_Font9IsCIDFontEv to i8*), i8* bitcast (%class.CPDF_Type1Font* (%class.CPDF_Type1Font*)* @_ZNK14CPDF_Type1Font11AsType1FontEv to i8*), i8* bitcast (%class.CPDF_Type1Font* (%class.CPDF_Type1Font*)* @_ZN14CPDF_Type1Font11AsType1FontEv to i8*), i8* bitcast (%class.CPDF_TrueTypeFont* (%class.CPDF_Font*)* @_ZNK9CPDF_Font14AsTrueTypeFontEv to i8*), i8* bitcast (%class.CPDF_TrueTypeFont* (%class.CPDF_Font*)* @_ZN9CPDF_Font14AsTrueTypeFontEv to i8*), i8* bitcast (%class.CPDF_Type3Font* (%class.CPDF_Font*)* @_ZNK9CPDF_Font11AsType3FontEv to i8*), i8* bitcast (%class.CPDF_Type3Font* (%class.CPDF_Font*)* @_ZN9CPDF_Font11AsType3FontEv to i8*), i8* bitcast (%class.CPDF_CIDFont* (%class.CPDF_Font*)* @_ZNK9CPDF_Font9AsCIDFontEv to i8*), i8* bitcast (%class.CPDF_CIDFont* (%class.CPDF_Font*)* @_ZN9CPDF_Font9AsCIDFontEv to i8*), i8* bitcast (void (%class.CPDF_Font*)* @_ZN9CPDF_Font15WillBeDestroyedEv to i8*), i8* bitcast (i1 (%class.CPDF_Font*)* @_ZNK9CPDF_Font13IsVertWritingEv to i8*), i8* bitcast (i1 (%class.CPDF_SimpleFont*)* @_ZNK15CPDF_SimpleFont19IsUnicodeCompatibleEv to i8*), i8* bitcast (i32 (%class.CPDF_Font*, %"class.fxcrt::StringViewTemplate"*, i64*)* @_ZNK9CPDF_Font11GetNextCharEN5fxcrt18StringViewTemplateIcEEPm to i8*), i8* bitcast (i64 (%class.CPDF_Font*, %"class.fxcrt::StringViewTemplate"*)* @_ZNK9CPDF_Font9CountCharEN5fxcrt18StringViewTemplateIcEE to i8*), i8* bitcast (i32 (%class.CPDF_Font*, i8*, i32)* @_ZNK9CPDF_Font10AppendCharEPcj to i8*), i8* bitcast (i32 (%class.CPDF_SimpleFont*, i32, i8*)* @_ZN15CPDF_SimpleFont17GlyphFromCharCodeEjPb to i8*), i8* bitcast (void (%"class.fxcrt::WideString"*, %class.CPDF_SimpleFont*, i32)* @_ZNK15CPDF_SimpleFont19UnicodeFromCharCodeEj to i8*), i8* bitcast (i32 (%class.CPDF_SimpleFont*, i32)* @_ZNK15CPDF_SimpleFont19CharCodeFromUnicodeEw to i8*), i8* bitcast (i1 (%class.CPDF_SimpleFont*)* @_ZNK15CPDF_SimpleFont13HasFontWidthsEv to i8*), i8* bitcast (i32 (%class.CPDF_SimpleFont*, i32)* @_ZN15CPDF_SimpleFont13GetCharWidthFEj to i8*), i8* bitcast ({ i64, i64 } (%class.CPDF_SimpleFont*, i32)* @_ZN15CPDF_SimpleFont11GetCharBBoxEj to i8*), i8* bitcast (i1 (%class.CPDF_Type1Font*)* @_ZN14CPDF_Type1Font4LoadEv to i8*), i8* bitcast (void (%class.CPDF_Type1Font*)* @_ZN14CPDF_Type1Font12LoadGlyphMapEv to i8*)] }, align 8
@.str = private unnamed_addr constant [15 x i8] c"FontDescriptor\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"Flags\00", align 1
@_ZZN14CPDF_Type1Font12LoadGlyphMapEvE6prefix = internal unnamed_addr constant [4 x i8] c"\00\F0\F1\F2", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c".notdef\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"space\00", align 1

@_ZN14CPDF_Type1FontC1EP13CPDF_DocumentP15CPDF_Dictionary = hidden unnamed_addr alias void (%class.CPDF_Type1Font*, %class.CPDF_Document*, %class.CPDF_Dictionary*), void (%class.CPDF_Type1Font*, %class.CPDF_Document*, %class.CPDF_Dictionary*)* @_ZN14CPDF_Type1FontC2EP13CPDF_DocumentP15CPDF_Dictionary
@_ZN14CPDF_Type1FontD1Ev = hidden unnamed_addr alias void (%class.CPDF_Type1Font*), void (%class.CPDF_Type1Font*)* @_ZN14CPDF_Type1FontD2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CPDF_Type1FontC2EP13CPDF_DocumentP15CPDF_Dictionary(%class.CPDF_Type1Font*, %class.CPDF_Document*, %class.CPDF_Dictionary*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0
  tail call void @_ZN15CPDF_SimpleFontC2EP13CPDF_DocumentP15CPDF_Dictionary(%class.CPDF_SimpleFont* %4, %class.CPDF_Document* %1, %class.CPDF_Dictionary* %2) #7
  %5 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [30 x i8*] }, { [30 x i8*] }* @_ZTV14CPDF_Type1Font, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %6, align 1
  ret void
}

declare void @_ZN15CPDF_SimpleFontC2EP13CPDF_DocumentP15CPDF_Dictionary(%class.CPDF_SimpleFont*, %class.CPDF_Document*, %class.CPDF_Dictionary*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN15CPDF_SimpleFontD2Ev(%class.CPDF_SimpleFont*) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CPDF_Type1FontD2Ev(%class.CPDF_Type1Font*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0
  tail call void @_ZN15CPDF_SimpleFontD2Ev(%class.CPDF_SimpleFont* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CPDF_Type1FontD0Ev(%class.CPDF_Type1Font*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0
  tail call void @_ZN15CPDF_SimpleFontD2Ev(%class.CPDF_SimpleFont* %2) #7
  %3 = bitcast %class.CPDF_Type1Font* %0 to i8*
  tail call void @_ZdlPv(i8* %3) #8
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden zeroext i1 @_ZNK14CPDF_Type1Font11IsType1FontEv(%class.CPDF_Type1Font* nocapture readnone) unnamed_addr #4 align 2 {
  ret i1 true
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %class.CPDF_Type1Font* @_ZNK14CPDF_Type1Font11AsType1FontEv(%class.CPDF_Type1Font* readnone returned) unnamed_addr #4 align 2 {
  ret %class.CPDF_Type1Font* %0
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden %class.CPDF_Type1Font* @_ZN14CPDF_Type1Font11AsType1FontEv(%class.CPDF_Type1Font* readnone returned) unnamed_addr #4 align 2 {
  ret %class.CPDF_Type1Font* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN14CPDF_Type1Font4LoadEv(%class.CPDF_Type1Font*) unnamed_addr #0 align 2 {
  %2 = alloca %"class.fxcrt::ByteString", align 8
  %3 = alloca %"class.fxcrt::ByteString", align 8
  %4 = alloca %"class.fxcrt::ByteString", align 8
  %5 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 0, i32 7
  %6 = tail call i16 @_ZN14CFX_FontMapper19GetStandardFontNameEPN5fxcrt10ByteStringE(%"class.fxcrt::ByteString"* %5) #7
  %7 = trunc i16 %6 to i8
  %8 = lshr i16 %6, 8
  %9 = trunc i16 %8 to i8
  %10 = icmp eq i8 %7, 0
  %11 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %12 = load i8, i8* %11, align 1, !range !2
  %13 = icmp eq i8 %12, 0
  br i1 %10, label %16, label %14

14:                                               ; preds = %1
  br i1 %13, label %15, label %21

15:                                               ; preds = %14
  store i8 1, i8* %11, align 1
  br label %21

16:                                               ; preds = %1
  br i1 %13, label %18, label %17

17:                                               ; preds = %16
  store i8 0, i8* %11, align 1
  br label %18

18:                                               ; preds = %16, %17
  %19 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0
  %20 = tail call zeroext i1 @_ZN15CPDF_SimpleFont10LoadCommonEv(%class.CPDF_SimpleFont* %19) #7
  br label %139

21:                                               ; preds = %15, %14
  %22 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  store i8 %9, i8* %22, align 1
  %23 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %24 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %25 = load %class.CPDF_Dictionary*, %class.CPDF_Dictionary** %24, align 8
  %26 = bitcast %"class.fxcrt::ByteString"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #7
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %2, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0)) #7
  %27 = call %class.CPDF_Dictionary* @_ZN15CPDF_Dictionary10GetDictForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* %25, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %2) #7
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %2) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #7
  %28 = icmp eq %class.CPDF_Dictionary* %27, null
  br i1 %28, label %36, label %29

29:                                               ; preds = %21
  %30 = bitcast %"class.fxcrt::ByteString"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #7
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %3, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0)) #7
  %31 = call zeroext i1 @_ZNK15CPDF_Dictionary8KeyExistERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* nonnull %27, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %3) #7
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #7
  br i1 %31, label %32, label %36

32:                                               ; preds = %29
  %33 = bitcast %"class.fxcrt::ByteString"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #7
  call void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"* nonnull %4, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0)) #7
  %34 = call i32 @_ZNK15CPDF_Dictionary13GetIntegerForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary* nonnull %27, %"class.fxcrt::ByteString"* nonnull dereferenceable(8) %4) #7
  %35 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 0, i32 10
  store i32 %34, i32* %35, align 4
  call void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #7
  br label %49

36:                                               ; preds = %21, %29
  %37 = load i8, i8* %23, align 1, !range !2
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %41

39:                                               ; preds = %36
  %40 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 0, i32 10
  br label %47

41:                                               ; preds = %36
  %42 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %43 = load i8, i8* %42, align 1
  %44 = call zeroext i1 @_ZN14CFX_FontMapper14IsSymbolicFontENS_12StandardFontE(i8 zeroext %43) #7
  %45 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 0, i32 10
  br i1 %44, label %46, label %47

46:                                               ; preds = %41
  store i32 4, i32* %45, align 4
  br label %49

47:                                               ; preds = %39, %41
  %48 = phi i32* [ %40, %39 ], [ %45, %41 ]
  store i32 32, i32* %48, align 4
  br label %49

49:                                               ; preds = %46, %47, %32
  %50 = load i8, i8* %23, align 1, !range !2
  %51 = icmp eq i8 %50, 0
  br i1 %51, label %128, label %52

52:                                               ; preds = %49
  %53 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %54 = load i8, i8* %53, align 1
  %55 = call zeroext i1 @_ZN14CFX_FontMapper11IsFixedFontENS_12StandardFontE(i8 zeroext %54) #7
  br i1 %55, label %56, label %121

56:                                               ; preds = %52
  %57 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 0
  %58 = bitcast i16* %57 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %58, align 2
  %59 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 8
  %60 = bitcast i16* %59 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %60, align 2
  %61 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 16
  %62 = bitcast i16* %61 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %62, align 2
  %63 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 24
  %64 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %64, align 2
  %65 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 32
  %66 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %66, align 2
  %67 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 40
  %68 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %68, align 2
  %69 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 48
  %70 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %70, align 2
  %71 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 56
  %72 = bitcast i16* %71 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %72, align 2
  %73 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 64
  %74 = bitcast i16* %73 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %74, align 2
  %75 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 72
  %76 = bitcast i16* %75 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %76, align 2
  %77 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 80
  %78 = bitcast i16* %77 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %78, align 2
  %79 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 88
  %80 = bitcast i16* %79 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %80, align 2
  %81 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 96
  %82 = bitcast i16* %81 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %82, align 2
  %83 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 104
  %84 = bitcast i16* %83 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %84, align 2
  %85 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 112
  %86 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %86, align 2
  %87 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 120
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %88, align 2
  %89 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 128
  %90 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %90, align 2
  %91 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 136
  %92 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %92, align 2
  %93 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 144
  %94 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %94, align 2
  %95 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 152
  %96 = bitcast i16* %95 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %96, align 2
  %97 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 160
  %98 = bitcast i16* %97 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %98, align 2
  %99 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 168
  %100 = bitcast i16* %99 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %100, align 2
  %101 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 176
  %102 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %102, align 2
  %103 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 184
  %104 = bitcast i16* %103 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %104, align 2
  %105 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 192
  %106 = bitcast i16* %105 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %106, align 2
  %107 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 200
  %108 = bitcast i16* %107 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %108, align 2
  %109 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 208
  %110 = bitcast i16* %109 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %110, align 2
  %111 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 216
  %112 = bitcast i16* %111 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %112, align 2
  %113 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 224
  %114 = bitcast i16* %113 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %114, align 2
  %115 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 232
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %116, align 2
  %117 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 240
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %118, align 2
  %119 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 6, i64 248
  %120 = bitcast i16* %119 to <8 x i16>*
  store <8 x i16> <i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600, i16 600>, <8 x i16>* %120, align 2
  br label %121

121:                                              ; preds = %56, %52
  %122 = load i8, i8* %11, align 1
  %123 = icmp eq i8 %122, 0
  br i1 %123, label %128, label %124

124:                                              ; preds = %121
  %125 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %126 = load i8, i8* %125, align 1
  switch i8 %126, label %128 [
    i8 12, label %133
    i8 13, label %127
  ]

127:                                              ; preds = %124
  br label %133

128:                                              ; preds = %124, %49, %121
  %129 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 0, i32 10
  %130 = load i32, i32* %129, align 4
  %131 = and i32 %130, 32
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %136, label %133

133:                                              ; preds = %128, %124, %127
  %134 = phi i32 [ 6, %127 ], [ 5, %124 ], [ 4, %128 ]
  %135 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 2
  store i32 %134, i32* %135, align 8
  br label %136

136:                                              ; preds = %133, %128
  %137 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0
  %138 = call zeroext i1 @_ZN15CPDF_SimpleFont10LoadCommonEv(%class.CPDF_SimpleFont* %137) #7
  br label %139

139:                                              ; preds = %136, %18
  %140 = phi i1 [ %138, %136 ], [ %20, %18 ]
  ret i1 %140
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

declare i16 @_ZN14CFX_FontMapper19GetStandardFontNameEPN5fxcrt10ByteStringE(%"class.fxcrt::ByteString"*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

declare zeroext i1 @_ZN15CPDF_SimpleFont10LoadCommonEv(%class.CPDF_SimpleFont*) local_unnamed_addr #1

declare %class.CPDF_Dictionary* @_ZN15CPDF_Dictionary10GetDictForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary*, %"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #1

declare void @_ZN5fxcrt10ByteStringC1EPKc(%"class.fxcrt::ByteString"*, i8*) unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN5fxcrt10ByteStringD1Ev(%"class.fxcrt::ByteString"*) unnamed_addr #2

declare zeroext i1 @_ZNK15CPDF_Dictionary8KeyExistERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary*, %"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #1

declare i32 @_ZNK15CPDF_Dictionary13GetIntegerForERKN5fxcrt10ByteStringE(%class.CPDF_Dictionary*, %"class.fxcrt::ByteString"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK14CPDF_Type1Font14IsSymbolicFontEv(%class.CPDF_Type1Font* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 1, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %7 = load i8, i8* %6, align 1
  %8 = tail call zeroext i1 @_ZN14CFX_FontMapper14IsSymbolicFontENS_12StandardFontE(i8 zeroext %7) #7
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i1 [ false, %1 ], [ %8, %5 ]
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK14CPDF_Type1Font11IsFixedFontEv(%class.CPDF_Type1Font* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %3 = load i8, i8* %2, align 1, !range !2
  %4 = icmp eq i8 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %7 = load i8, i8* %6, align 1
  %8 = tail call zeroext i1 @_ZN14CFX_FontMapper11IsFixedFontENS_12StandardFontE(i8 zeroext %7) #7
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i1 [ false, %1 ], [ %8, %5 ]
  ret i1 %10
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN14CPDF_Type1Font12LoadGlyphMapEv(%class.CPDF_Type1Font*) unnamed_addr #0 align 2 {
  %2 = alloca [256 x i8], align 16
  %3 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 0, i32 3
  %4 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 0, i32 3, i32 2, i32 0, i32 0, i32 0, i32 0
  %5 = load %class.CFX_Face*, %class.CFX_Face** %4, align 8
  %6 = icmp eq %class.CFX_Face* %5, null
  br i1 %6, label %288, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %5, i64 0, i32 2, i32 0, i32 0, i32 0
  %9 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %8, align 8
  %10 = icmp eq %struct.FT_FaceRec_* %9, null
  br i1 %10, label %288, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 0
  %13 = bitcast %class.CPDF_Type1Font* %0 to i1 (%class.CPDF_Font*)***
  %14 = load i1 (%class.CPDF_Font*)**, i1 (%class.CPDF_Font*)*** %13, align 8
  %15 = getelementptr inbounds i1 (%class.CPDF_Font*)*, i1 (%class.CPDF_Font*)** %14, i64 4
  %16 = load i1 (%class.CPDF_Font*)*, i1 (%class.CPDF_Font*)** %15, align 8
  %17 = tail call zeroext i1 %16(%class.CPDF_Font* %12) #7
  br i1 %17, label %130, label %18

18:                                               ; preds = %11
  %19 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0
  %20 = load %class.CPDF_StreamAcc*, %class.CPDF_StreamAcc** %19, align 8
  %21 = icmp eq %class.CPDF_StreamAcc* %20, null
  br i1 %21, label %22, label %130

22:                                               ; preds = %18
  %23 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %24 = load i8, i8* %23, align 1, !range !2
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %30, label %26

26:                                               ; preds = %22
  %27 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0, i32 0
  %28 = load i8, i8* %27, align 1
  %29 = tail call zeroext i1 @_ZN14CFX_FontMapper14IsSymbolicFontENS_12StandardFontE(i8 zeroext %28) #7
  br i1 %29, label %130, label %30

30:                                               ; preds = %22, %26
  %31 = tail call zeroext i1 @_ZNK8CFX_Font8IsTTFontEv(%class.CFX_Font* %3) #7
  br i1 %31, label %32, label %130

32:                                               ; preds = %30
  %33 = load %class.CFX_Face*, %class.CFX_Face** %4, align 8
  %34 = icmp eq %class.CFX_Face* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %32
  %36 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %33, i64 0, i32 2, i32 0, i32 0, i32 0
  %37 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %36, align 8
  br label %38

38:                                               ; preds = %32, %35
  %39 = phi %struct.FT_FaceRec_* [ %37, %35 ], [ null, %32 ]
  %40 = tail call zeroext i1 @_ZN9CPDF_Font15FT_UseTTCharmapEP11FT_FaceRec_ii(%struct.FT_FaceRec_* %39, i32 3, i32 0) #7
  br i1 %40, label %41, label %74

41:                                               ; preds = %38, %71
  %42 = phi i64 [ %72, %71 ], [ 0, %38 ]
  %43 = phi i8 [ %67, %71 ], [ 0, %38 ]
  %44 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 5, i64 %42
  br label %48

45:                                               ; preds = %71
  %46 = and i8 %67, 1
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %74, label %288

48:                                               ; preds = %61, %41
  %49 = phi i64 [ %68, %61 ], [ 0, %41 ]
  %50 = phi i8 [ %67, %61 ], [ %43, %41 ]
  %51 = getelementptr inbounds [4 x i8], [4 x i8]* @_ZZN14CPDF_Type1Font12LoadGlyphMapEvE6prefix, i64 0, i64 %49
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i64
  %54 = shl nuw nsw i64 %53, 8
  %55 = add nuw i64 %54, %42
  %56 = load %class.CFX_Face*, %class.CFX_Face** %4, align 8
  %57 = icmp eq %class.CFX_Face* %56, null
  br i1 %57, label %61, label %58

58:                                               ; preds = %48
  %59 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %56, i64 0, i32 2, i32 0, i32 0, i32 0
  %60 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %59, align 8
  br label %61

61:                                               ; preds = %48, %58
  %62 = phi %struct.FT_FaceRec_* [ %60, %58 ], [ null, %48 ]
  %63 = and i64 %55, 65535
  %64 = tail call i32 @FT_Get_Char_Index(%struct.FT_FaceRec_* %62, i64 %63) #7
  %65 = trunc i32 %64 to i16
  store i16 %65, i16* %44, align 2
  %66 = icmp eq i16 %65, 0
  %67 = select i1 %66, i8 %50, i8 1
  %68 = add nuw nsw i64 %49, 1
  %69 = icmp ult i64 %68, 4
  %70 = and i1 %66, %69
  br i1 %70, label %48, label %71

71:                                               ; preds = %61
  %72 = add nuw nsw i64 %42, 1
  %73 = icmp eq i64 %72, 256
  br i1 %73, label %45, label %41

74:                                               ; preds = %45, %38
  %75 = load %class.CFX_Face*, %class.CFX_Face** %4, align 8
  %76 = icmp eq %class.CFX_Face* %75, null
  br i1 %76, label %80, label %77

77:                                               ; preds = %74
  %78 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %75, i64 0, i32 2, i32 0, i32 0, i32 0
  %79 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %78, align 8
  br label %80

80:                                               ; preds = %74, %77
  %81 = phi %struct.FT_FaceRec_* [ %79, %77 ], [ null, %74 ]
  %82 = tail call i32 @FT_Select_Charmap(%struct.FT_FaceRec_* %81, i32 1970170211) #7
  %83 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 2
  %84 = load i32, i32* %83, align 8
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %87

86:                                               ; preds = %80
  store i32 4, i32* %83, align 8
  br label %87

87:                                               ; preds = %86, %80
  %88 = phi i32 [ 4, %86 ], [ %84, %80 ]
  %89 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 4
  br label %90

90:                                               ; preds = %128, %87
  %91 = phi i32 [ %88, %87 ], [ %129, %128 ]
  %92 = phi i64 [ 0, %87 ], [ %126, %128 ]
  %93 = trunc i64 %92 to i32
  %94 = tail call i8* @_ZN9CPDF_Font16GetAdobeCharNameEiRKNSt3__16vectorIN5fxcrt10ByteStringENS0_9allocatorIS3_EEEEj(i32 %91, %"class.std::__1::vector.105"* dereferenceable(24) %89, i32 %93) #7
  %95 = icmp eq i8* %94, null
  br i1 %95, label %125, label %96

96:                                               ; preds = %90
  %97 = tail call signext i32 @_Z24PDF_UnicodeFromAdobeNamePKc(i8* nonnull %94) #7
  %98 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 1, i32 0, i64 %92
  store i32 %97, i32* %98, align 4
  %99 = load %class.CFX_Face*, %class.CFX_Face** %4, align 8
  %100 = icmp eq %class.CFX_Face* %99, null
  br i1 %100, label %104, label %101

101:                                              ; preds = %96
  %102 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %99, i64 0, i32 2, i32 0, i32 0, i32 0
  %103 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %102, align 8
  br label %104

104:                                              ; preds = %96, %101
  %105 = phi %struct.FT_FaceRec_* [ %103, %101 ], [ null, %96 ]
  %106 = sext i32 %97 to i64
  %107 = tail call i32 @FT_Get_Char_Index(%struct.FT_FaceRec_* %105, i64 %106) #7
  %108 = trunc i32 %107 to i16
  %109 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 5, i64 %92
  store i16 %108, i16* %109, align 2
  %110 = and i32 %107, 65535
  %111 = icmp eq i32 %110, 0
  br i1 %111, label %112, label %125

112:                                              ; preds = %104
  %113 = tail call i32 @strcmp(i8* nonnull %94, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0)) #9
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %125

115:                                              ; preds = %112
  store i32 32, i32* %98, align 4
  %116 = load %class.CFX_Face*, %class.CFX_Face** %4, align 8
  %117 = icmp eq %class.CFX_Face* %116, null
  br i1 %117, label %121, label %118

118:                                              ; preds = %115
  %119 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %116, i64 0, i32 2, i32 0, i32 0, i32 0
  %120 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %119, align 8
  br label %121

121:                                              ; preds = %115, %118
  %122 = phi %struct.FT_FaceRec_* [ %120, %118 ], [ null, %115 ]
  %123 = tail call i32 @FT_Get_Char_Index(%struct.FT_FaceRec_* %122, i64 32) #7
  %124 = trunc i32 %123 to i16
  store i16 %124, i16* %109, align 2
  br label %125

125:                                              ; preds = %104, %112, %121, %90
  %126 = add nuw nsw i64 %92, 1
  %127 = icmp eq i64 %126, 256
  br i1 %127, label %288, label %128

128:                                              ; preds = %125
  %129 = load i32, i32* %83, align 8
  br label %90

130:                                              ; preds = %18, %11, %30, %26
  %131 = load %class.CFX_Face*, %class.CFX_Face** %4, align 8
  %132 = icmp eq %class.CFX_Face* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %130
  %134 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %131, i64 0, i32 2, i32 0, i32 0, i32 0
  %135 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %134, align 8
  br label %136

136:                                              ; preds = %130, %133
  %137 = phi %struct.FT_FaceRec_* [ %135, %133 ], [ null, %130 ]
  %138 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %137, i64 0, i32 9
  %139 = load i32, i32* %138, align 8
  switch i32 %139, label %147 [
    i32 0, label %161
    i32 1, label %140
  ]

140:                                              ; preds = %136
  %141 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %137, i64 0, i32 10
  %142 = load %struct.FT_CharMapRec_**, %struct.FT_CharMapRec_*** %141, align 8
  %143 = load %struct.FT_CharMapRec_*, %struct.FT_CharMapRec_** %142, align 8
  %144 = getelementptr inbounds %struct.FT_CharMapRec_, %struct.FT_CharMapRec_* %143, i64 0, i32 1
  %145 = load i32, i32* %144, align 8
  %146 = icmp eq i32 %145, 1970170211
  br i1 %146, label %161, label %158

147:                                              ; preds = %136
  %148 = getelementptr inbounds %struct.FT_FaceRec_, %struct.FT_FaceRec_* %137, i64 0, i32 10
  %149 = load %struct.FT_CharMapRec_**, %struct.FT_CharMapRec_*** %148, align 8
  %150 = load %struct.FT_CharMapRec_*, %struct.FT_CharMapRec_** %149, align 8
  %151 = getelementptr inbounds %struct.FT_CharMapRec_, %struct.FT_CharMapRec_* %150, i64 0, i32 1
  %152 = load i32, i32* %151, align 8
  %153 = icmp eq i32 %152, 1970170211
  br i1 %153, label %154, label %158

154:                                              ; preds = %147
  %155 = getelementptr inbounds %struct.FT_CharMapRec_*, %struct.FT_CharMapRec_** %149, i64 1
  %156 = load %struct.FT_CharMapRec_*, %struct.FT_CharMapRec_** %155, align 8
  %157 = tail call i32 @FT_Set_Charmap(%struct.FT_FaceRec_* %137, %struct.FT_CharMapRec_* %156) #7
  br label %161

158:                                              ; preds = %147, %140
  %159 = phi %struct.FT_CharMapRec_* [ %150, %147 ], [ %143, %140 ]
  %160 = tail call i32 @FT_Set_Charmap(%struct.FT_FaceRec_* %137, %struct.FT_CharMapRec_* %159) #7
  br label %161

161:                                              ; preds = %136, %140, %154, %158
  %162 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 0, i32 10
  %163 = load i32, i32* %162, align 4
  %164 = and i32 %163, 4
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %228, label %166

166:                                              ; preds = %161
  %167 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 2
  %168 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 4
  %169 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 0
  %170 = getelementptr inbounds [256 x i8], [256 x i8]* %2, i64 0, i64 255
  br label %171

171:                                              ; preds = %225, %166
  %172 = phi i64 [ 0, %166 ], [ %226, %225 ]
  %173 = load i32, i32* %167, align 8
  %174 = trunc i64 %172 to i32
  %175 = call i8* @_ZN9CPDF_Font16GetAdobeCharNameEiRKNSt3__16vectorIN5fxcrt10ByteStringENS0_9allocatorIS3_EEEEj(i32 %173, %"class.std::__1::vector.105"* dereferenceable(24) %168, i32 %174) #7
  %176 = icmp eq i8* %175, null
  br i1 %176, label %190, label %177

177:                                              ; preds = %171
  %178 = call signext i32 @_Z24PDF_UnicodeFromAdobeNamePKc(i8* nonnull %175) #7
  %179 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 1, i32 0, i64 %172
  store i32 %178, i32* %179, align 4
  %180 = load %class.CFX_Face*, %class.CFX_Face** %4, align 8
  %181 = icmp eq %class.CFX_Face* %180, null
  br i1 %181, label %185, label %182

182:                                              ; preds = %177
  %183 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %180, i64 0, i32 2, i32 0, i32 0, i32 0
  %184 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %183, align 8
  br label %185

185:                                              ; preds = %177, %182
  %186 = phi %struct.FT_FaceRec_* [ %184, %182 ], [ null, %177 ]
  %187 = call i32 @FT_Get_Name_Index(%struct.FT_FaceRec_* %186, i8* nonnull %175) #7
  %188 = trunc i32 %187 to i16
  %189 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 5, i64 %172
  store i16 %188, i16* %189, align 2
  br label %225

190:                                              ; preds = %171
  %191 = load %class.CFX_Face*, %class.CFX_Face** %4, align 8
  %192 = icmp eq %class.CFX_Face* %191, null
  br i1 %192, label %196, label %193

193:                                              ; preds = %190
  %194 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %191, i64 0, i32 2, i32 0, i32 0, i32 0
  %195 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %194, align 8
  br label %196

196:                                              ; preds = %190, %193
  %197 = phi %struct.FT_FaceRec_* [ %195, %193 ], [ null, %190 ]
  %198 = call i32 @FT_Get_Char_Index(%struct.FT_FaceRec_* %197, i64 %172) #7
  %199 = trunc i32 %198 to i16
  %200 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 5, i64 %172
  store i16 %199, i16* %200, align 2
  %201 = icmp eq i16 %199, 0
  br i1 %201, label %225, label %202

202:                                              ; preds = %196
  %203 = call signext i32 @_Z22FT_UnicodeFromCharCodeij(i32 4, i32 %174) #7
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %205, label %222

205:                                              ; preds = %202
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %169) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %169, i8 0, i64 256, i1 false)
  %206 = load %class.CFX_Face*, %class.CFX_Face** %4, align 8
  %207 = icmp eq %class.CFX_Face* %206, null
  br i1 %207, label %211, label %208

208:                                              ; preds = %205
  %209 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %206, i64 0, i32 2, i32 0, i32 0, i32 0
  %210 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %209, align 8
  br label %211

211:                                              ; preds = %205, %208
  %212 = phi %struct.FT_FaceRec_* [ %210, %208 ], [ null, %205 ]
  %213 = load i16, i16* %200, align 2
  %214 = zext i16 %213 to i32
  %215 = call i32 @FT_Get_Glyph_Name(%struct.FT_FaceRec_* %212, i32 %214, i8* nonnull %169, i32 256) #7
  store i8 0, i8* %170, align 1
  %216 = load i8, i8* %169, align 16
  %217 = icmp eq i8 %216, 0
  br i1 %217, label %220, label %218

218:                                              ; preds = %211
  %219 = call signext i32 @_Z24PDF_UnicodeFromAdobeNamePKc(i8* nonnull %169) #7
  br label %220

220:                                              ; preds = %211, %218
  %221 = phi i32 [ %219, %218 ], [ 0, %211 ]
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %169) #7
  br label %222

222:                                              ; preds = %220, %202
  %223 = phi i32 [ %221, %220 ], [ %203, %202 ]
  %224 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 1, i32 0, i64 %172
  store i32 %223, i32* %224, align 4
  br label %225

225:                                              ; preds = %196, %222, %185
  %226 = add nuw nsw i64 %172, 1
  %227 = icmp eq i64 %226, 256
  br i1 %227, label %288, label %171

228:                                              ; preds = %161
  %229 = load %class.CFX_Face*, %class.CFX_Face** %4, align 8
  %230 = icmp eq %class.CFX_Face* %229, null
  br i1 %230, label %234, label %231

231:                                              ; preds = %228
  %232 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %229, i64 0, i32 2, i32 0, i32 0, i32 0
  %233 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %232, align 8
  br label %234

234:                                              ; preds = %228, %231
  %235 = phi %struct.FT_FaceRec_* [ %233, %231 ], [ null, %228 ]
  %236 = tail call i32 @FT_Select_Charmap(%struct.FT_FaceRec_* %235, i32 1970170211) #7
  %237 = icmp eq i32 %236, 0
  %238 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 2
  %239 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 4
  br label %240

240:                                              ; preds = %285, %234
  %241 = phi i64 [ 0, %234 ], [ %286, %285 ]
  %242 = load i32, i32* %238, align 8
  %243 = trunc i64 %241 to i32
  %244 = tail call i8* @_ZN9CPDF_Font16GetAdobeCharNameEiRKNSt3__16vectorIN5fxcrt10ByteStringENS0_9allocatorIS3_EEEEj(i32 %242, %"class.std::__1::vector.105"* dereferenceable(24) %239, i32 %243) #7
  %245 = icmp eq i8* %244, null
  br i1 %245, label %285, label %246

246:                                              ; preds = %240
  %247 = tail call signext i32 @_Z24PDF_UnicodeFromAdobeNamePKc(i8* nonnull %244) #7
  %248 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 1, i32 0, i64 %241
  store i32 %247, i32* %248, align 4
  %249 = load %class.CFX_Face*, %class.CFX_Face** %4, align 8
  %250 = icmp eq %class.CFX_Face* %249, null
  br i1 %250, label %254, label %251

251:                                              ; preds = %246
  %252 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %249, i64 0, i32 2, i32 0, i32 0, i32 0
  %253 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %252, align 8
  br label %254

254:                                              ; preds = %246, %251
  %255 = phi %struct.FT_FaceRec_* [ %253, %251 ], [ null, %246 ]
  %256 = tail call i32 @FT_Get_Name_Index(%struct.FT_FaceRec_* %255, i8* nonnull %244) #7
  %257 = trunc i32 %256 to i16
  %258 = getelementptr inbounds %class.CPDF_Type1Font, %class.CPDF_Type1Font* %0, i64 0, i32 0, i32 5, i64 %241
  store i16 %257, i16* %258, align 2
  %259 = and i32 %256, 65535
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %261, label %285

261:                                              ; preds = %254
  %262 = tail call i32 @strcmp(i8* nonnull %244, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0)) #9
  %263 = icmp eq i32 %262, 0
  br i1 %263, label %282, label %264

264:                                              ; preds = %261
  %265 = tail call i32 @strcmp(i8* nonnull %244, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0)) #9
  %266 = icmp eq i32 %265, 0
  br i1 %266, label %282, label %267

267:                                              ; preds = %264
  %268 = load %class.CFX_Face*, %class.CFX_Face** %4, align 8
  %269 = icmp eq %class.CFX_Face* %268, null
  br i1 %269, label %273, label %270

270:                                              ; preds = %267
  %271 = getelementptr inbounds %class.CFX_Face, %class.CFX_Face* %268, i64 0, i32 2, i32 0, i32 0, i32 0
  %272 = load %struct.FT_FaceRec_*, %struct.FT_FaceRec_** %271, align 8
  br label %273

273:                                              ; preds = %267, %270
  %274 = phi %struct.FT_FaceRec_* [ %272, %270 ], [ null, %267 ]
  br i1 %237, label %275, label %277

275:                                              ; preds = %273
  %276 = load i32, i32* %248, align 4
  br label %277

277:                                              ; preds = %273, %275
  %278 = phi i32 [ %276, %275 ], [ %243, %273 ]
  %279 = sext i32 %278 to i64
  %280 = tail call i32 @FT_Get_Char_Index(%struct.FT_FaceRec_* %274, i64 %279) #7
  %281 = trunc i32 %280 to i16
  br label %283

282:                                              ; preds = %264, %261
  store i32 32, i32* %248, align 4
  br label %283

283:                                              ; preds = %282, %277
  %284 = phi i16 [ -1, %282 ], [ %281, %277 ]
  store i16 %284, i16* %258, align 2
  br label %285

285:                                              ; preds = %254, %240, %283
  %286 = add nuw nsw i64 %241, 1
  %287 = icmp eq i64 %286, 256
  br i1 %287, label %288, label %240

288:                                              ; preds = %125, %225, %285, %1, %7, %45
  ret void
}

declare zeroext i1 @_ZNK8CFX_Font8IsTTFontEv(%class.CFX_Font*) local_unnamed_addr #1

declare zeroext i1 @_ZN9CPDF_Font15FT_UseTTCharmapEP11FT_FaceRec_ii(%struct.FT_FaceRec_*, i32, i32) local_unnamed_addr #1

declare i32 @FT_Get_Char_Index(%struct.FT_FaceRec_*, i64) local_unnamed_addr #1

declare i32 @FT_Select_Charmap(%struct.FT_FaceRec_*, i32) local_unnamed_addr #1

declare i8* @_ZN9CPDF_Font16GetAdobeCharNameEiRKNSt3__16vectorIN5fxcrt10ByteStringENS0_9allocatorIS3_EEEEj(i32, %"class.std::__1::vector.105"* dereferenceable(24), i32) local_unnamed_addr #1

declare signext i32 @_Z24PDF_UnicodeFromAdobeNamePKc(i8*) local_unnamed_addr #1

; Function Attrs: nofree nounwind readonly
declare i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #6

declare i32 @FT_Get_Name_Index(%struct.FT_FaceRec_*, i8*) local_unnamed_addr #1

declare signext i32 @_Z22FT_UnicodeFromCharCodeij(i32, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

declare i32 @FT_Get_Glyph_Name(%struct.FT_FaceRec_*, i32, i8*, i32) local_unnamed_addr #1

declare zeroext i1 @_ZN14CFX_FontMapper14IsSymbolicFontENS_12StandardFontE(i8 zeroext) local_unnamed_addr #1

declare zeroext i1 @_ZN14CFX_FontMapper11IsFixedFontENS_12StandardFontE(i8 zeroext) local_unnamed_addr #1

declare zeroext i1 @_ZNK9CPDF_Font14IsTrueTypeFontEv(%class.CPDF_Font*) unnamed_addr #1

declare zeroext i1 @_ZNK9CPDF_Font11IsType3FontEv(%class.CPDF_Font*) unnamed_addr #1

declare zeroext i1 @_ZNK9CPDF_Font9IsCIDFontEv(%class.CPDF_Font*) unnamed_addr #1

declare %class.CPDF_TrueTypeFont* @_ZNK9CPDF_Font14AsTrueTypeFontEv(%class.CPDF_Font*) unnamed_addr #1

declare %class.CPDF_TrueTypeFont* @_ZN9CPDF_Font14AsTrueTypeFontEv(%class.CPDF_Font*) unnamed_addr #1

declare %class.CPDF_Type3Font* @_ZNK9CPDF_Font11AsType3FontEv(%class.CPDF_Font*) unnamed_addr #1

declare %class.CPDF_Type3Font* @_ZN9CPDF_Font11AsType3FontEv(%class.CPDF_Font*) unnamed_addr #1

declare %class.CPDF_CIDFont* @_ZNK9CPDF_Font9AsCIDFontEv(%class.CPDF_Font*) unnamed_addr #1

declare %class.CPDF_CIDFont* @_ZN9CPDF_Font9AsCIDFontEv(%class.CPDF_Font*) unnamed_addr #1

declare void @_ZN9CPDF_Font15WillBeDestroyedEv(%class.CPDF_Font*) unnamed_addr #1

declare zeroext i1 @_ZNK9CPDF_Font13IsVertWritingEv(%class.CPDF_Font*) unnamed_addr #1

declare zeroext i1 @_ZNK15CPDF_SimpleFont19IsUnicodeCompatibleEv(%class.CPDF_SimpleFont*) unnamed_addr #1

declare i32 @_ZNK9CPDF_Font11GetNextCharEN5fxcrt18StringViewTemplateIcEEPm(%class.CPDF_Font*, %"class.fxcrt::StringViewTemplate"*, i64*) unnamed_addr #1

declare i64 @_ZNK9CPDF_Font9CountCharEN5fxcrt18StringViewTemplateIcEE(%class.CPDF_Font*, %"class.fxcrt::StringViewTemplate"*) unnamed_addr #1

declare i32 @_ZNK9CPDF_Font10AppendCharEPcj(%class.CPDF_Font*, i8*, i32) unnamed_addr #1

declare i32 @_ZN15CPDF_SimpleFont17GlyphFromCharCodeEjPb(%class.CPDF_SimpleFont*, i32, i8*) unnamed_addr #1

declare void @_ZNK15CPDF_SimpleFont19UnicodeFromCharCodeEj(%"class.fxcrt::WideString"* sret, %class.CPDF_SimpleFont*, i32) unnamed_addr #1

declare i32 @_ZNK15CPDF_SimpleFont19CharCodeFromUnicodeEw(%class.CPDF_SimpleFont*, i32 signext) unnamed_addr #1

declare zeroext i1 @_ZNK15CPDF_SimpleFont13HasFontWidthsEv(%class.CPDF_SimpleFont*) unnamed_addr #1

declare i32 @_ZN15CPDF_SimpleFont13GetCharWidthFEj(%class.CPDF_SimpleFont*, i32) unnamed_addr #1

declare { i64, i64 } @_ZN15CPDF_SimpleFont11GetCharBBoxEj(%class.CPDF_SimpleFont*, i32) unnamed_addr #1

declare i32 @FT_Set_Charmap(%struct.FT_FaceRec_*, %struct.FT_CharMapRec_*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }
attributes #9 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
