; ModuleID = '../../third_party/libjxl/src/lib/jxl/enc_cluster.cc'
source_filename = "../../third_party/libjxl/src/lib/jxl/enc_cluster.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.jxl::Histogram" = type <{ %"class.std::__1::vector", i64, float, [4 x i8] }>
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i32*, i32*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i32* }
%"struct.hwy::ChosenTarget" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.34" }
%"struct.std::__1::__atomic_base.34" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.std::__1::vector.4" = type { %"class.std::__1::__vector_base.5" }
%"class.std::__1::__vector_base.5" = type { %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"*, %"class.std::__1::__compressed_pair.6" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"struct.jxl::Histogram"* }
%"class.std::__1::vector.11" = type { %"class.std::__1::__vector_base.12" }
%"class.std::__1::__vector_base.12" = type { i32*, i32*, %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { i32* }
%"class.std::__1::vector.18" = type { %"class.std::__1::__vector_base.19" }
%"class.std::__1::__vector_base.19" = type { float*, float*, %"class.std::__1::__compressed_pair.20" }
%"class.std::__1::__compressed_pair.20" = type { %"struct.std::__1::__compressed_pair_elem.21" }
%"struct.std::__1::__compressed_pair_elem.21" = type { float* }
%"class.std::__1::__vector_base_common" = type { i8 }
%"struct.jxl::HistogramParams" = type <{ i32, i32, i32, i32, %"class.std::__1::vector.35", i64, i8, [7 x i8] }>
%"class.std::__1::vector.35" = type { %"class.std::__1::__vector_base.36" }
%"class.std::__1::__vector_base.36" = type { i64*, i64*, %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { i64* }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.53", %"class.std::__1::__compressed_pair.58" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { i64 }
%"class.std::__1::priority_queue" = type <{ %"class.std::__1::vector.42", %"struct.std::__1::less", [7 x i8] }>
%"class.std::__1::vector.42" = type { %"class.std::__1::__vector_base.43" }
%"class.std::__1::__vector_base.43" = type { %struct.HistogramPair*, %struct.HistogramPair*, %"class.std::__1::__compressed_pair.44" }
%struct.HistogramPair = type { float, i32, i32, i32 }
%"class.std::__1::__compressed_pair.44" = type { %"struct.std::__1::__compressed_pair_elem.45" }
%"struct.std::__1::__compressed_pair_elem.45" = type { %struct.HistogramPair* }
%"struct.std::__1::less" = type { i8 }
%"class.std::__1::__tree_node" = type { %"class.std::__1::__tree_node_base.base", %"struct.std::__1::__value_type", [4 x i8] }
%"class.std::__1::__tree_node_base.base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8 }>
%"struct.std::__1::__value_type" = type { %"struct.std::__1::pair" }
%"struct.std::__1::pair" = type { i32, i32 }

$_ZNSt3__16vectorIN3jxl9HistogramENS_9allocatorIS2_EEE7reserveEm = comdat any

$_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm = comdat any

$_ZNSt3__16vectorIiNS_9allocatorIiEEE6assignIPiEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_ = comdat any

$_ZNSt3__16vectorIN3jxl9HistogramENS_9allocatorIS2_EEEC2ERKS5_ = comdat any

$_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_ = comdat any

$_ZNSt3__16__treeINS_12__value_typeIiiEENS_19__map_value_compareIiS2_NS_4lessIiEELb1EEENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE = comdat any

$_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj = comdat any

$_ZNSt3__16vectorIN3jxl9HistogramENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_ = comdat any

$_ZNSt3__16vectorIN3jxl9HistogramENS_9allocatorIS2_EEE8__appendEm = comdat any

@_ZN3jxlL36HistogramEntropyHighwayDispatchTableE = internal unnamed_addr constant [12 x void (%"struct.jxl::Histogram"*)*] [void (%"struct.jxl::Histogram"*)* @_ZN3hwy13FunctionCacheIvJRKN3jxl9HistogramEEE13ChooseAndCallIXadL_ZNS1_L36HistogramEntropyHighwayDispatchTableEEEEEvS4_, void (%"struct.jxl::Histogram"*)* null, void (%"struct.jxl::Histogram"*)* null, void (%"struct.jxl::Histogram"*)* null, void (%"struct.jxl::Histogram"*)* @_ZN3jxl6N_AVX316HistogramEntropyERKNS_9HistogramE, void (%"struct.jxl::Histogram"*)* @_ZN3jxl6N_AVX216HistogramEntropyERKNS_9HistogramE, void (%"struct.jxl::Histogram"*)* null, void (%"struct.jxl::Histogram"*)* @_ZN3jxl6N_SSE416HistogramEntropyERKNS_9HistogramE, void (%"struct.jxl::Histogram"*)* null, void (%"struct.jxl::Histogram"*)* null, void (%"struct.jxl::Histogram"*)* null, void (%"struct.jxl::Histogram"*)* @_ZN3jxl8N_SCALAR16HistogramEntropyERKNS_9HistogramE], align 16
@_ZN3hwy13chosen_targetE = external global %"struct.hwy::ChosenTarget", align 4
@_ZN3jxlL41FastClusterHistogramsHighwayDispatchTableE = internal unnamed_addr constant [12 x void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)*] [void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)* @_ZN3hwy13FunctionCacheIvJRKNSt3__16vectorIN3jxl9HistogramENS1_9allocatorIS4_EEEEmmfPS7_PNS2_IjNS5_IjEEEEEE13ChooseAndCallIXadL_ZNS3_L41FastClusterHistogramsHighwayDispatchTableEEEEEvS9_mmfSA_SD_, void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)* null, void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)* null, void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)* null, void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)* @_ZN3jxl6N_AVX321FastClusterHistogramsERKNSt3__16vectorINS_9HistogramENS1_9allocatorIS3_EEEEmmfPS6_PNS2_IjNS4_IjEEEE, void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)* @_ZN3jxl6N_AVX221FastClusterHistogramsERKNSt3__16vectorINS_9HistogramENS1_9allocatorIS3_EEEEmmfPS6_PNS2_IjNS4_IjEEEE, void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)* null, void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)* @_ZN3jxl6N_SSE421FastClusterHistogramsERKNSt3__16vectorINS_9HistogramENS1_9allocatorIS3_EEEEmmfPS6_PNS2_IjNS4_IjEEEE, void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)* null, void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)* null, void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)* null, void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)* @_ZN3jxl8N_SCALAR21FastClusterHistogramsERKNSt3__16vectorINS_9HistogramENS1_9allocatorIS3_EEEEmmfPS6_PNS2_IjNS4_IjEEEE], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE416HistogramEntropyERKNS_9HistogramE(%"struct.jxl::Histogram"* nocapture dereferenceable(40)) #0 {
  %2 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 2
  store float 0.000000e+00, float* %2, align 8
  %3 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %69, label %6

6:                                                ; preds = %1
  %7 = uitofp i64 %4 to float
  %8 = fdiv float 1.000000e+00, %7
  %9 = insertelement <4 x float> undef, float %8, i32 0
  %10 = shufflevector <4 x float> %9, <4 x float> undef, <4 x i32> zeroinitializer
  %11 = insertelement <4 x float> undef, float %7, i32 0
  %12 = shufflevector <4 x float> %11, <4 x float> undef, <4 x i32> zeroinitializer
  %13 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 0, i32 0, i32 1
  %14 = bitcast i32** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"struct.jxl::Histogram"* %0 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %15, %17
  br i1 %18, label %21, label %30

19:                                               ; preds = %30
  %20 = load float, float* %2, align 8
  br label %21

21:                                               ; preds = %19, %6
  %22 = phi float [ 0.000000e+00, %6 ], [ %20, %19 ]
  %23 = phi <4 x float> [ zeroinitializer, %6 ], [ %62, %19 ]
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %25 = fadd <4 x float> %23, %24
  %26 = shufflevector <4 x float> %25, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %27 = fadd <4 x float> %25, %26
  %28 = extractelement <4 x float> %27, i32 0
  %29 = fadd float %28, %22
  store float %29, float* %2, align 8
  br label %69

30:                                               ; preds = %6, %30
  %31 = phi i64 [ %65, %30 ], [ %17, %6 ]
  %32 = phi i64 [ %63, %30 ], [ 0, %6 ]
  %33 = phi <4 x float> [ %62, %30 ], [ zeroinitializer, %6 ]
  %34 = inttoptr i64 %31 to i32*
  %35 = getelementptr inbounds i32, i32* %34, i64 %32
  %36 = bitcast i32* %35 to <4 x i32>*
  %37 = load <4 x i32>, <4 x i32>* %36, align 1, !alias.scope !2
  %38 = sitofp <4 x i32> %37 to <4 x float>
  %39 = fcmp une <4 x float> %12, %38
  %40 = fmul <4 x float> %10, %38
  %41 = bitcast <4 x float> %40 to <4 x i32>
  %42 = add <4 x i32> %41, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %43 = ashr <4 x i32> %42, <i32 23, i32 23, i32 23, i32 23>
  %44 = and <4 x i32> %42, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %45 = sub <4 x i32> %41, %44
  %46 = bitcast <4 x i32> %45 to <4 x float>
  %47 = sitofp <4 x i32> %43 to <4 x float>
  %48 = fadd <4 x float> %46, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %49 = fmul <4 x float> %48, <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>
  %50 = fadd <4 x float> %49, <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>
  %51 = fmul <4 x float> %48, <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>
  %52 = fadd <4 x float> %51, <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %53 = fmul <4 x float> %48, %50
  %54 = fadd <4 x float> %53, <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>
  %55 = fmul <4 x float> %48, %52
  %56 = fadd <4 x float> %55, <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %57 = fdiv <4 x float> %54, %56
  %58 = fadd <4 x float> %57, %47
  %59 = fmul <4 x float> %58, %38
  %60 = fsub <4 x float> zeroinitializer, %59
  %61 = select <4 x i1> %39, <4 x float> %60, <4 x float> zeroinitializer
  %62 = fadd <4 x float> %33, %61
  %63 = add i64 %32, 4
  %64 = load i64, i64* %14, align 8
  %65 = load i64, i64* %16, align 8
  %66 = sub i64 %64, %65
  %67 = ashr exact i64 %66, 2
  %68 = icmp ult i64 %63, %67
  br i1 %68, label %30, label %19

69:                                               ; preds = %1, %21
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN3jxl6N_SSE417HistogramDistanceERKNS_9HistogramES3_(%"struct.jxl::Histogram"* nocapture readonly dereferenceable(40), %"struct.jxl::Histogram"* nocapture readonly dereferenceable(40)) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %109, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %109, label %10

10:                                               ; preds = %6
  %11 = add i64 %8, %4
  %12 = uitofp i64 %11 to float
  %13 = fdiv float 1.000000e+00, %12
  %14 = insertelement <4 x float> undef, float %13, i32 0
  %15 = shufflevector <4 x float> %14, <4 x float> undef, <4 x i32> zeroinitializer
  %16 = insertelement <4 x float> undef, float %12, i32 0
  %17 = shufflevector <4 x float> %16, <4 x float> undef, <4 x i32> zeroinitializer
  %18 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 0, i32 0, i32 1
  %19 = bitcast i32** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"struct.jxl::Histogram"* %0 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %20, %22
  %24 = ashr exact i64 %23, 2
  %25 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1, i64 0, i32 0, i32 0, i32 1
  %26 = bitcast i32** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %"struct.jxl::Histogram"* %1 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %27, %29
  %31 = ashr exact i64 %30, 2
  %32 = icmp ult i64 %24, %31
  %33 = select i1 %32, i64 %31, i64 %24
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %48

35:                                               ; preds = %69, %10
  %36 = phi <4 x float> [ zeroinitializer, %10 ], [ %96, %69 ]
  %37 = shufflevector <4 x float> %36, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %38 = fadd <4 x float> %36, %37
  %39 = shufflevector <4 x float> %38, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %40 = fadd <4 x float> %38, %39
  %41 = extractelement <4 x float> %40, i32 0
  %42 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 2
  %43 = load float, float* %42, align 8
  %44 = fsub float %41, %43
  %45 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1, i64 0, i32 2
  %46 = load float, float* %45, align 8
  %47 = fsub float %44, %46
  br label %109

48:                                               ; preds = %10, %69
  %49 = phi i64 [ %103, %69 ], [ %29, %10 ]
  %50 = phi i64 [ %99, %69 ], [ %22, %10 ]
  %51 = phi i64 [ %105, %69 ], [ %31, %10 ]
  %52 = phi i64 [ %101, %69 ], [ %24, %10 ]
  %53 = phi i64 [ %97, %69 ], [ 0, %10 ]
  %54 = phi <4 x float> [ %96, %69 ], [ zeroinitializer, %10 ]
  %55 = inttoptr i64 %49 to i32*
  %56 = icmp ugt i64 %52, %53
  br i1 %56, label %57, label %62

57:                                               ; preds = %48
  %58 = inttoptr i64 %50 to i32*
  %59 = getelementptr inbounds i32, i32* %58, i64 %53
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 1, !alias.scope !5
  br label %62

62:                                               ; preds = %48, %57
  %63 = phi <4 x i32> [ %61, %57 ], [ zeroinitializer, %48 ]
  %64 = icmp ugt i64 %51, %53
  br i1 %64, label %65, label %69

65:                                               ; preds = %62
  %66 = getelementptr inbounds i32, i32* %55, i64 %53
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 1, !alias.scope !8
  br label %69

69:                                               ; preds = %62, %65
  %70 = phi <4 x i32> [ %68, %65 ], [ zeroinitializer, %62 ]
  %71 = add <4 x i32> %70, %63
  %72 = sitofp <4 x i32> %71 to <4 x float>
  %73 = fcmp une <4 x float> %17, %72
  %74 = fmul <4 x float> %15, %72
  %75 = bitcast <4 x float> %74 to <4 x i32>
  %76 = add <4 x i32> %75, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %77 = ashr <4 x i32> %76, <i32 23, i32 23, i32 23, i32 23>
  %78 = and <4 x i32> %76, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %79 = sub <4 x i32> %75, %78
  %80 = bitcast <4 x i32> %79 to <4 x float>
  %81 = sitofp <4 x i32> %77 to <4 x float>
  %82 = fadd <4 x float> %80, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %83 = fmul <4 x float> %82, <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>
  %84 = fadd <4 x float> %83, <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>
  %85 = fmul <4 x float> %82, <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>
  %86 = fadd <4 x float> %85, <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %87 = fmul <4 x float> %82, %84
  %88 = fadd <4 x float> %87, <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>
  %89 = fmul <4 x float> %82, %86
  %90 = fadd <4 x float> %89, <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %91 = fdiv <4 x float> %88, %90
  %92 = fadd <4 x float> %91, %81
  %93 = fmul <4 x float> %92, %72
  %94 = fsub <4 x float> zeroinitializer, %93
  %95 = select <4 x i1> %73, <4 x float> %94, <4 x float> zeroinitializer
  %96 = fadd <4 x float> %54, %95
  %97 = add i64 %53, 4
  %98 = load i64, i64* %19, align 8
  %99 = load i64, i64* %21, align 8
  %100 = sub i64 %98, %99
  %101 = ashr exact i64 %100, 2
  %102 = load i64, i64* %26, align 8
  %103 = load i64, i64* %28, align 8
  %104 = sub i64 %102, %103
  %105 = ashr exact i64 %104, 2
  %106 = icmp ult i64 %101, %105
  %107 = select i1 %106, i64 %105, i64 %101
  %108 = icmp ult i64 %97, %107
  br i1 %108, label %48, label %35

109:                                              ; preds = %2, %6, %35
  %110 = phi float [ %47, %35 ], [ 0.000000e+00, %6 ], [ 0.000000e+00, %2 ]
  ret float %110
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_SSE421FastClusterHistogramsERKNSt3__16vectorINS_9HistogramENS1_9allocatorIS3_EEEEmmfPS6_PNS2_IjNS4_IjEEEE(%"class.std::__1::vector.4"* nocapture readonly dereferenceable(24), i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*) #0 {
  %7 = alloca %"class.std::__1::vector.18", align 8
  %8 = alloca i32, align 4
  %9 = alloca float, align 4
  %10 = icmp eq i64 %1, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 0
  %13 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %12, align 8
  br label %150

14:                                               ; preds = %222, %6
  %15 = phi i64 [ 0, %6 ], [ %229, %222 ]
  %16 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %4, i64 0, i32 0, i32 0
  %17 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %4, i64 0, i32 0, i32 1
  %19 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %18, align 8
  %20 = icmp eq %"struct.jxl::Histogram"* %19, %17
  br i1 %20, label %34, label %21

21:                                               ; preds = %14, %32
  %22 = phi %"struct.jxl::Histogram"* [ %23, %32 ], [ %19, %14 ]
  %23 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %22, i64 -1
  %24 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %23, i64 0, i32 0, i32 0, i32 0
  %25 = load i32*, i32** %24, align 8
  %26 = icmp eq i32* %25, null
  br i1 %26, label %32, label %27

27:                                               ; preds = %21
  %28 = ptrtoint i32* %25 to i64
  %29 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %22, i64 -1, i32 0, i32 0, i32 1
  %30 = bitcast i32** %29 to i64*
  store i64 %28, i64* %30, align 8
  %31 = bitcast i32* %25 to i8*
  tail call void @_ZdlPv(i8* %31) #12
  br label %32

32:                                               ; preds = %27, %21
  %33 = icmp eq %"struct.jxl::Histogram"* %23, %17
  br i1 %33, label %34, label %21

34:                                               ; preds = %32, %14
  store %"struct.jxl::Histogram"* %17, %"struct.jxl::Histogram"** %18, align 8
  tail call void @_ZNSt3__16vectorIN3jxl9HistogramENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.4"* %4, i64 %2)
  %35 = bitcast %"class.std::__1::vector.18"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %35) #13
  %36 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %7, i64 0, i32 0, i32 0
  %37 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %7, i64 0, i32 0, i32 1
  %38 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 24, i1 false) #13
  br i1 %10, label %135, label %39

39:                                               ; preds = %34
  %40 = icmp ugt i64 %1, 4611686018427387903
  br i1 %40, label %41, label %43

41:                                               ; preds = %39
  %42 = bitcast %"class.std::__1::vector.18"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %42) #14
  unreachable

43:                                               ; preds = %39
  %44 = shl i64 %1, 2
  %45 = tail call i8* @_Znwm(i64 %44) #12
  %46 = bitcast i8* %45 to float*
  %47 = bitcast float** %37 to i8**
  store i8* %45, i8** %47, align 8
  %48 = bitcast %"class.std::__1::vector.18"* %7 to i8**
  store i8* %45, i8** %48, align 8
  %49 = getelementptr inbounds float, float* %46, i64 %1
  store float* %49, float** %38, align 8
  %50 = shl nsw i64 %1, 2
  %51 = add i64 %50, -4
  %52 = lshr exact i64 %51, 2
  %53 = add nuw nsw i64 %52, 1
  %54 = icmp ult i64 %53, 8
  br i1 %54, label %125, label %55

55:                                               ; preds = %43
  %56 = and i64 %53, 9223372036854775800
  %57 = getelementptr float, float* %46, i64 %56
  %58 = add nsw i64 %56, -8
  %59 = lshr exact i64 %58, 3
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 7
  %62 = icmp ult i64 %58, 56
  br i1 %62, label %110, label %63

63:                                               ; preds = %55
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %107, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %108, %65 ]
  %68 = getelementptr float, float* %46, i64 %66
  %69 = bitcast float* %68 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %69, align 4
  %70 = getelementptr float, float* %68, i64 4
  %71 = bitcast float* %70 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %71, align 4
  %72 = or i64 %66, 8
  %73 = getelementptr float, float* %46, i64 %72
  %74 = bitcast float* %73 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %74, align 4
  %75 = getelementptr float, float* %73, i64 4
  %76 = bitcast float* %75 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %76, align 4
  %77 = or i64 %66, 16
  %78 = getelementptr float, float* %46, i64 %77
  %79 = bitcast float* %78 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %79, align 4
  %80 = getelementptr float, float* %78, i64 4
  %81 = bitcast float* %80 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %81, align 4
  %82 = or i64 %66, 24
  %83 = getelementptr float, float* %46, i64 %82
  %84 = bitcast float* %83 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %84, align 4
  %85 = getelementptr float, float* %83, i64 4
  %86 = bitcast float* %85 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %86, align 4
  %87 = or i64 %66, 32
  %88 = getelementptr float, float* %46, i64 %87
  %89 = bitcast float* %88 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %89, align 4
  %90 = getelementptr float, float* %88, i64 4
  %91 = bitcast float* %90 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %91, align 4
  %92 = or i64 %66, 40
  %93 = getelementptr float, float* %46, i64 %92
  %94 = bitcast float* %93 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %94, align 4
  %95 = getelementptr float, float* %93, i64 4
  %96 = bitcast float* %95 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %96, align 4
  %97 = or i64 %66, 48
  %98 = getelementptr float, float* %46, i64 %97
  %99 = bitcast float* %98 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %99, align 4
  %100 = getelementptr float, float* %98, i64 4
  %101 = bitcast float* %100 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %101, align 4
  %102 = or i64 %66, 56
  %103 = getelementptr float, float* %46, i64 %102
  %104 = bitcast float* %103 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %104, align 4
  %105 = getelementptr float, float* %103, i64 4
  %106 = bitcast float* %105 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %106, align 4
  %107 = add i64 %66, 64
  %108 = add i64 %67, -8
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %65, !llvm.loop !11

110:                                              ; preds = %65, %55
  %111 = phi i64 [ 0, %55 ], [ %107, %65 ]
  %112 = icmp eq i64 %61, 0
  br i1 %112, label %123, label %113

113:                                              ; preds = %110, %113
  %114 = phi i64 [ %120, %113 ], [ %111, %110 ]
  %115 = phi i64 [ %121, %113 ], [ %61, %110 ]
  %116 = getelementptr float, float* %46, i64 %114
  %117 = bitcast float* %116 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %117, align 4
  %118 = getelementptr float, float* %116, i64 4
  %119 = bitcast float* %118 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %119, align 4
  %120 = add i64 %114, 8
  %121 = add i64 %115, -1
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %113, !llvm.loop !13

123:                                              ; preds = %113, %110
  %124 = icmp eq i64 %53, %56
  br i1 %124, label %132, label %125

125:                                              ; preds = %123, %43
  %126 = phi float* [ %46, %43 ], [ %57, %123 ]
  br label %127

127:                                              ; preds = %125, %127
  %128 = phi float* [ %130, %127 ], [ %126, %125 ]
  %129 = bitcast float* %128 to i32*
  store i32 2139095039, i32* %129, align 4
  %130 = getelementptr inbounds float, float* %128, i64 1
  %131 = icmp eq float* %130, %49
  br i1 %131, label %132, label %127, !llvm.loop !15

132:                                              ; preds = %127, %123
  %133 = bitcast float** %37 to i64*
  %134 = ptrtoint float* %49 to i64
  store i64 %134, i64* %133, align 8
  br label %135

135:                                              ; preds = %34, %132
  %136 = bitcast %"class.std::__1::vector.11"* %5 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %5, i64 0, i32 0, i32 1
  %139 = bitcast i32** %138 to i64*
  store i64 %137, i64* %139, align 8
  %140 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %140) #13
  %141 = trunc i64 %2 to i32
  store i32 %141, i32* %8, align 4
  br i1 %10, label %143, label %142

142:                                              ; preds = %135
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj(%"class.std::__1::vector.11"* %5, i64 %1, i32* nonnull dereferenceable(4) %8) #13
  br label %143

143:                                              ; preds = %135, %142
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %140) #13
  %144 = bitcast %"struct.jxl::Histogram"** %18 to i64*
  %145 = bitcast %"class.std::__1::vector.4"* %4 to i64*
  %146 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %5, i64 0, i32 0, i32 0
  %147 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 0
  %148 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %149 = bitcast float* %9 to i8*
  br label %232

150:                                              ; preds = %222, %11
  %151 = phi %"struct.jxl::Histogram"* [ %13, %11 ], [ %223, %222 ]
  %152 = phi i64 [ 0, %11 ], [ %230, %222 ]
  %153 = phi i64 [ 0, %11 ], [ %229, %222 ]
  %154 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %151, i64 %152, i32 2
  store float 0.000000e+00, float* %154, align 8
  %155 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %151, i64 %152, i32 1
  %156 = load i64, i64* %155, align 8
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %222, label %158

158:                                              ; preds = %150
  %159 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %151, i64 %152
  %160 = uitofp i64 %156 to float
  %161 = fdiv float 1.000000e+00, %160
  %162 = insertelement <4 x float> undef, float %161, i32 0
  %163 = shufflevector <4 x float> %162, <4 x float> undef, <4 x i32> zeroinitializer
  %164 = insertelement <4 x float> undef, float %160, i32 0
  %165 = shufflevector <4 x float> %164, <4 x float> undef, <4 x i32> zeroinitializer
  %166 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %151, i64 %152, i32 0, i32 0, i32 1
  %167 = bitcast i32** %166 to i64*
  %168 = load i64, i64* %167, align 8
  %169 = bitcast %"struct.jxl::Histogram"* %159 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = icmp eq i64 %168, %170
  br i1 %171, label %174, label %183

172:                                              ; preds = %183
  %173 = load float, float* %154, align 8
  br label %174

174:                                              ; preds = %172, %158
  %175 = phi float [ 0.000000e+00, %158 ], [ %173, %172 ]
  %176 = phi <4 x float> [ zeroinitializer, %158 ], [ %215, %172 ]
  %177 = shufflevector <4 x float> %176, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %178 = fadd <4 x float> %176, %177
  %179 = shufflevector <4 x float> %178, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %180 = fadd <4 x float> %178, %179
  %181 = extractelement <4 x float> %180, i32 0
  %182 = fadd float %175, %181
  store float %182, float* %154, align 8
  br label %222

183:                                              ; preds = %158, %183
  %184 = phi i64 [ %218, %183 ], [ %170, %158 ]
  %185 = phi i64 [ %216, %183 ], [ 0, %158 ]
  %186 = phi <4 x float> [ %215, %183 ], [ zeroinitializer, %158 ]
  %187 = inttoptr i64 %184 to i32*
  %188 = getelementptr inbounds i32, i32* %187, i64 %185
  %189 = bitcast i32* %188 to <4 x i32>*
  %190 = load <4 x i32>, <4 x i32>* %189, align 1, !alias.scope !17
  %191 = sitofp <4 x i32> %190 to <4 x float>
  %192 = fcmp une <4 x float> %165, %191
  %193 = fmul <4 x float> %163, %191
  %194 = bitcast <4 x float> %193 to <4 x i32>
  %195 = add <4 x i32> %194, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %196 = ashr <4 x i32> %195, <i32 23, i32 23, i32 23, i32 23>
  %197 = and <4 x i32> %195, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %198 = sub <4 x i32> %194, %197
  %199 = bitcast <4 x i32> %198 to <4 x float>
  %200 = sitofp <4 x i32> %196 to <4 x float>
  %201 = fadd <4 x float> %199, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %202 = fmul <4 x float> %201, <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>
  %203 = fadd <4 x float> %202, <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>
  %204 = fmul <4 x float> %201, <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>
  %205 = fadd <4 x float> %204, <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %206 = fmul <4 x float> %201, %203
  %207 = fadd <4 x float> %206, <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>
  %208 = fmul <4 x float> %201, %205
  %209 = fadd <4 x float> %208, <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %210 = fdiv <4 x float> %207, %209
  %211 = fadd <4 x float> %210, %200
  %212 = fmul <4 x float> %211, %191
  %213 = fsub <4 x float> zeroinitializer, %212
  %214 = select <4 x i1> %192, <4 x float> %213, <4 x float> zeroinitializer
  %215 = fadd <4 x float> %186, %214
  %216 = add i64 %185, 4
  %217 = load i64, i64* %167, align 8
  %218 = load i64, i64* %169, align 8
  %219 = sub i64 %217, %218
  %220 = ashr exact i64 %219, 2
  %221 = icmp ult i64 %216, %220
  br i1 %221, label %183, label %172

222:                                              ; preds = %150, %174
  %223 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %12, align 8
  %224 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %223, i64 %152, i32 1
  %225 = load i64, i64* %224, align 8
  %226 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %223, i64 %153, i32 1
  %227 = load i64, i64* %226, align 8
  %228 = icmp ugt i64 %225, %227
  %229 = select i1 %228, i64 %152, i64 %153
  %230 = add nuw i64 %152, 1
  %231 = icmp eq i64 %230, %1
  br i1 %231, label %14, label %150

232:                                              ; preds = %296, %143
  %233 = phi i64 [ %15, %143 ], [ %438, %296 ]
  %234 = load i64, i64* %144, align 8
  %235 = load i64, i64* %145, align 8
  %236 = sub i64 %234, %235
  %237 = sdiv exact i64 %236, 40
  %238 = icmp ult i64 %237, %2
  %239 = icmp ult i64 %237, %1
  %240 = and i1 %238, %239
  br i1 %240, label %241, label %441

241:                                              ; preds = %232
  %242 = trunc i64 %237 to i32
  %243 = load i32*, i32** %146, align 8
  %244 = getelementptr inbounds i32, i32* %243, i64 %233
  store i32 %242, i32* %244, align 4
  %245 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %147, align 8
  %246 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %245, i64 %233
  %247 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %18, align 8
  %248 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %148, align 8
  %249 = icmp eq %"struct.jxl::Histogram"* %247, %248
  br i1 %249, label %295, label %250

250:                                              ; preds = %241
  %251 = bitcast %"struct.jxl::Histogram"* %247 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %251, i8 0, i64 24, i1 false) #13
  %252 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %245, i64 %233, i32 0, i32 0, i32 1
  %253 = bitcast i32** %252 to i64*
  %254 = load i64, i64* %253, align 8
  %255 = bitcast %"struct.jxl::Histogram"* %246 to i64*
  %256 = load i64, i64* %255, align 8
  %257 = sub i64 %254, %256
  %258 = ashr exact i64 %257, 2
  %259 = icmp eq i64 %257, 0
  br i1 %259, label %287, label %260

260:                                              ; preds = %250
  %261 = icmp ugt i64 %258, 4611686018427387903
  br i1 %261, label %262, label %264

262:                                              ; preds = %260
  %263 = bitcast %"struct.jxl::Histogram"* %247 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %263) #14
  unreachable

264:                                              ; preds = %260
  %265 = call i8* @_Znwm(i64 %257) #12
  %266 = bitcast i8* %265 to i32*
  %267 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %247, i64 0, i32 0, i32 0, i32 1
  %268 = bitcast i32** %267 to i8**
  store i8* %265, i8** %268, align 8
  %269 = bitcast %"struct.jxl::Histogram"* %247 to i8**
  store i8* %265, i8** %269, align 8
  %270 = getelementptr inbounds i32, i32* %266, i64 %258
  %271 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %247, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store i32* %270, i32** %271, align 8
  %272 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %246, i64 0, i32 0, i32 0, i32 0
  %273 = load i32*, i32** %272, align 8
  %274 = load i64, i64* %253, align 8
  %275 = bitcast i32** %267 to i64*
  %276 = ptrtoint i8* %265 to i64
  %277 = ptrtoint i32* %273 to i64
  %278 = sub i64 %274, %277
  %279 = icmp sgt i64 %278, 0
  br i1 %279, label %280, label %285

280:                                              ; preds = %264
  %281 = lshr exact i64 %278, 2
  %282 = bitcast i32* %273 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %265, i8* align 4 %282, i64 %278, i1 false) #13
  %283 = getelementptr inbounds i32, i32* %266, i64 %281
  %284 = ptrtoint i32* %283 to i64
  br label %285

285:                                              ; preds = %280, %264
  %286 = phi i64 [ %284, %280 ], [ %276, %264 ]
  store i64 %286, i64* %275, align 8
  br label %287

287:                                              ; preds = %285, %250
  %288 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %247, i64 0, i32 1
  %289 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %245, i64 %233, i32 1
  %290 = bitcast i64* %288 to i8*
  %291 = bitcast i64* %289 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %290, i8* align 8 %291, i64 12, i1 false) #13
  %292 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %247, i64 1
  %293 = ptrtoint %"struct.jxl::Histogram"* %292 to i64
  store i64 %293, i64* %144, align 8
  br label %294

294:                                              ; preds = %295, %287
  br label %301

295:                                              ; preds = %241
  call void @_ZNSt3__16vectorIN3jxl9HistogramENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector.4"* %4, %"struct.jxl::Histogram"* dereferenceable(40) %246) #13
  br label %294

296:                                              ; preds = %437
  %297 = load float*, float** %36, align 8
  %298 = getelementptr inbounds float, float* %297, i64 %438
  %299 = load float, float* %298, align 4
  %300 = fcmp olt float %299, %3
  br i1 %300, label %441, label %232

301:                                              ; preds = %294, %437
  %302 = phi i64 [ %439, %437 ], [ 0, %294 ]
  %303 = phi i64 [ %438, %437 ], [ 0, %294 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %149)
  %304 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %147, align 8
  %305 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %304, i64 %302
  %306 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %18, align 8
  %307 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %306, i64 -1
  %308 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %304, i64 %302, i32 1
  %309 = load i64, i64* %308, align 8
  %310 = icmp eq i64 %309, 0
  br i1 %310, label %414, label %311

311:                                              ; preds = %301
  %312 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %306, i64 -1, i32 1
  %313 = load i64, i64* %312, align 8
  %314 = icmp eq i64 %313, 0
  br i1 %314, label %414, label %315

315:                                              ; preds = %311
  %316 = add i64 %313, %309
  %317 = uitofp i64 %316 to float
  %318 = fdiv float 1.000000e+00, %317
  %319 = insertelement <4 x float> undef, float %318, i32 0
  %320 = shufflevector <4 x float> %319, <4 x float> undef, <4 x i32> zeroinitializer
  %321 = insertelement <4 x float> undef, float %317, i32 0
  %322 = shufflevector <4 x float> %321, <4 x float> undef, <4 x i32> zeroinitializer
  %323 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %304, i64 %302, i32 0, i32 0, i32 1
  %324 = bitcast i32** %323 to i64*
  %325 = load i64, i64* %324, align 8
  %326 = bitcast %"struct.jxl::Histogram"* %305 to i64*
  %327 = load i64, i64* %326, align 8
  %328 = sub i64 %325, %327
  %329 = ashr exact i64 %328, 2
  %330 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %306, i64 -1, i32 0, i32 0, i32 1
  %331 = bitcast i32** %330 to i64*
  %332 = load i64, i64* %331, align 8
  %333 = bitcast %"struct.jxl::Histogram"* %307 to i64*
  %334 = load i64, i64* %333, align 8
  %335 = sub i64 %332, %334
  %336 = ashr exact i64 %335, 2
  %337 = icmp ult i64 %329, %336
  %338 = select i1 %337, i64 %336, i64 %329
  %339 = icmp eq i64 %338, 0
  br i1 %339, label %340, label %353

340:                                              ; preds = %374, %315
  %341 = phi <4 x float> [ zeroinitializer, %315 ], [ %401, %374 ]
  %342 = shufflevector <4 x float> %341, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %343 = fadd <4 x float> %341, %342
  %344 = shufflevector <4 x float> %343, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %345 = fadd <4 x float> %343, %344
  %346 = extractelement <4 x float> %345, i32 0
  %347 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %304, i64 %302, i32 2
  %348 = load float, float* %347, align 8
  %349 = fsub float %346, %348
  %350 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %306, i64 -1, i32 2
  %351 = load float, float* %350, align 8
  %352 = fsub float %349, %351
  br label %414

353:                                              ; preds = %315, %374
  %354 = phi i64 [ %408, %374 ], [ %334, %315 ]
  %355 = phi i64 [ %404, %374 ], [ %327, %315 ]
  %356 = phi i64 [ %410, %374 ], [ %336, %315 ]
  %357 = phi i64 [ %406, %374 ], [ %329, %315 ]
  %358 = phi i64 [ %402, %374 ], [ 0, %315 ]
  %359 = phi <4 x float> [ %401, %374 ], [ zeroinitializer, %315 ]
  %360 = inttoptr i64 %354 to i32*
  %361 = icmp ugt i64 %357, %358
  br i1 %361, label %362, label %367

362:                                              ; preds = %353
  %363 = inttoptr i64 %355 to i32*
  %364 = getelementptr inbounds i32, i32* %363, i64 %358
  %365 = bitcast i32* %364 to <4 x i32>*
  %366 = load <4 x i32>, <4 x i32>* %365, align 1, !alias.scope !20
  br label %367

367:                                              ; preds = %362, %353
  %368 = phi <4 x i32> [ %366, %362 ], [ zeroinitializer, %353 ]
  %369 = icmp ugt i64 %356, %358
  br i1 %369, label %370, label %374

370:                                              ; preds = %367
  %371 = getelementptr inbounds i32, i32* %360, i64 %358
  %372 = bitcast i32* %371 to <4 x i32>*
  %373 = load <4 x i32>, <4 x i32>* %372, align 1, !alias.scope !23
  br label %374

374:                                              ; preds = %370, %367
  %375 = phi <4 x i32> [ %373, %370 ], [ zeroinitializer, %367 ]
  %376 = add <4 x i32> %375, %368
  %377 = sitofp <4 x i32> %376 to <4 x float>
  %378 = fcmp une <4 x float> %322, %377
  %379 = fmul <4 x float> %320, %377
  %380 = bitcast <4 x float> %379 to <4 x i32>
  %381 = add <4 x i32> %380, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %382 = ashr <4 x i32> %381, <i32 23, i32 23, i32 23, i32 23>
  %383 = and <4 x i32> %381, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %384 = sub <4 x i32> %380, %383
  %385 = bitcast <4 x i32> %384 to <4 x float>
  %386 = sitofp <4 x i32> %382 to <4 x float>
  %387 = fadd <4 x float> %385, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %388 = fmul <4 x float> %387, <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>
  %389 = fadd <4 x float> %388, <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>
  %390 = fmul <4 x float> %387, <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>
  %391 = fadd <4 x float> %390, <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %392 = fmul <4 x float> %387, %389
  %393 = fadd <4 x float> %392, <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>
  %394 = fmul <4 x float> %387, %391
  %395 = fadd <4 x float> %394, <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %396 = fdiv <4 x float> %393, %395
  %397 = fadd <4 x float> %396, %386
  %398 = fmul <4 x float> %397, %377
  %399 = fsub <4 x float> zeroinitializer, %398
  %400 = select <4 x i1> %378, <4 x float> %399, <4 x float> zeroinitializer
  %401 = fadd <4 x float> %359, %400
  %402 = add i64 %358, 4
  %403 = load i64, i64* %324, align 8
  %404 = load i64, i64* %326, align 8
  %405 = sub i64 %403, %404
  %406 = ashr exact i64 %405, 2
  %407 = load i64, i64* %331, align 8
  %408 = load i64, i64* %333, align 8
  %409 = sub i64 %407, %408
  %410 = ashr exact i64 %409, 2
  %411 = icmp ult i64 %406, %410
  %412 = select i1 %411, i64 %410, i64 %406
  %413 = icmp ult i64 %402, %412
  br i1 %413, label %353, label %340

414:                                              ; preds = %301, %311, %340
  %415 = phi float [ %352, %340 ], [ 0.000000e+00, %311 ], [ 0.000000e+00, %301 ]
  store float %415, float* %9, align 4
  %416 = load float*, float** %36, align 8
  %417 = getelementptr inbounds float, float* %416, i64 %302
  %418 = load float, float* %417, align 4
  %419 = fcmp olt float %418, %415
  %420 = select i1 %419, float* %417, float* %9
  %421 = bitcast float* %420 to i32*
  %422 = load i32, i32* %421, align 4
  %423 = bitcast float* %417 to i32*
  store i32 %422, i32* %423, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %149)
  %424 = load i32*, i32** %146, align 8
  %425 = getelementptr inbounds i32, i32* %424, i64 %302
  %426 = load i32, i32* %425, align 4
  %427 = zext i32 %426 to i64
  %428 = icmp eq i64 %427, %2
  br i1 %428, label %429, label %437

429:                                              ; preds = %414
  %430 = load float*, float** %36, align 8
  %431 = getelementptr inbounds float, float* %430, i64 %302
  %432 = load float, float* %431, align 4
  %433 = getelementptr inbounds float, float* %430, i64 %303
  %434 = load float, float* %433, align 4
  %435 = fcmp ogt float %432, %434
  br i1 %435, label %436, label %437

436:                                              ; preds = %429
  br label %437

437:                                              ; preds = %414, %429, %436
  %438 = phi i64 [ %303, %414 ], [ %302, %436 ], [ %303, %429 ]
  %439 = add nuw i64 %302, 1
  %440 = icmp eq i64 %439, %1
  br i1 %440, label %296, label %301

441:                                              ; preds = %232, %296
  br i1 %10, label %442, label %450

442:                                              ; preds = %847, %441
  %443 = load float*, float** %36, align 8
  %444 = icmp eq float* %443, null
  br i1 %444, label %449, label %445

445:                                              ; preds = %442
  %446 = ptrtoint float* %443 to i64
  %447 = bitcast float** %37 to i64*
  store i64 %446, i64* %447, align 8
  %448 = bitcast float* %443 to i8*
  call void @_ZdlPv(i8* %448) #12
  br label %449

449:                                              ; preds = %442, %445
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %35) #13
  ret void

450:                                              ; preds = %441, %847
  %451 = phi i64 [ %848, %847 ], [ 0, %441 ]
  %452 = load i32*, i32** %146, align 8
  %453 = getelementptr inbounds i32, i32* %452, i64 %451
  %454 = load i32, i32* %453, align 4
  %455 = zext i32 %454 to i64
  %456 = icmp eq i64 %455, %2
  br i1 %456, label %457, label %847

457:                                              ; preds = %450
  %458 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %147, align 8
  %459 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %458, i64 %451
  %460 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %16, align 8
  %461 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %458, i64 %451, i32 1
  %462 = load i64, i64* %461, align 8
  %463 = icmp eq i64 %462, 0
  %464 = ptrtoint %"struct.jxl::Histogram"* %460 to i64
  br i1 %463, label %572, label %465

465:                                              ; preds = %457
  %466 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %460, i64 0, i32 1
  %467 = load i64, i64* %466, align 8
  %468 = icmp eq i64 %467, 0
  br i1 %468, label %572, label %469

469:                                              ; preds = %465
  %470 = add i64 %467, %462
  %471 = uitofp i64 %470 to float
  %472 = fdiv float 1.000000e+00, %471
  %473 = insertelement <4 x float> undef, float %472, i32 0
  %474 = shufflevector <4 x float> %473, <4 x float> undef, <4 x i32> zeroinitializer
  %475 = insertelement <4 x float> undef, float %471, i32 0
  %476 = shufflevector <4 x float> %475, <4 x float> undef, <4 x i32> zeroinitializer
  %477 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %458, i64 %451, i32 0, i32 0, i32 1
  %478 = bitcast i32** %477 to i64*
  %479 = load i64, i64* %478, align 8
  %480 = bitcast %"struct.jxl::Histogram"* %459 to i64*
  %481 = load i64, i64* %480, align 8
  %482 = sub i64 %479, %481
  %483 = ashr exact i64 %482, 2
  %484 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %460, i64 0, i32 0, i32 0, i32 1
  %485 = bitcast i32** %484 to i64*
  %486 = load i64, i64* %485, align 8
  %487 = bitcast %"struct.jxl::Histogram"* %460 to i64*
  %488 = load i64, i64* %487, align 8
  %489 = sub i64 %486, %488
  %490 = ashr exact i64 %489, 2
  %491 = icmp ult i64 %483, %490
  %492 = select i1 %491, i64 %490, i64 %483
  %493 = icmp eq i64 %492, 0
  br i1 %493, label %496, label %511

494:                                              ; preds = %532
  %495 = load i64, i64* %145, align 8
  br label %496

496:                                              ; preds = %494, %469
  %497 = phi i64 [ %464, %469 ], [ %495, %494 ]
  %498 = phi <4 x float> [ zeroinitializer, %469 ], [ %559, %494 ]
  %499 = shufflevector <4 x float> %498, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %500 = fadd <4 x float> %498, %499
  %501 = shufflevector <4 x float> %500, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %502 = fadd <4 x float> %500, %501
  %503 = extractelement <4 x float> %502, i32 0
  %504 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %458, i64 %451, i32 2
  %505 = load float, float* %504, align 8
  %506 = fsub float %503, %505
  %507 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %460, i64 0, i32 2
  %508 = load float, float* %507, align 8
  %509 = fsub float %506, %508
  %510 = inttoptr i64 %497 to %"struct.jxl::Histogram"*
  br label %572

511:                                              ; preds = %469, %532
  %512 = phi i64 [ %566, %532 ], [ %488, %469 ]
  %513 = phi i64 [ %562, %532 ], [ %481, %469 ]
  %514 = phi i64 [ %568, %532 ], [ %490, %469 ]
  %515 = phi i64 [ %564, %532 ], [ %483, %469 ]
  %516 = phi i64 [ %560, %532 ], [ 0, %469 ]
  %517 = phi <4 x float> [ %559, %532 ], [ zeroinitializer, %469 ]
  %518 = inttoptr i64 %512 to i32*
  %519 = icmp ugt i64 %515, %516
  br i1 %519, label %520, label %525

520:                                              ; preds = %511
  %521 = inttoptr i64 %513 to i32*
  %522 = getelementptr inbounds i32, i32* %521, i64 %516
  %523 = bitcast i32* %522 to <4 x i32>*
  %524 = load <4 x i32>, <4 x i32>* %523, align 1, !alias.scope !26
  br label %525

525:                                              ; preds = %520, %511
  %526 = phi <4 x i32> [ %524, %520 ], [ zeroinitializer, %511 ]
  %527 = icmp ugt i64 %514, %516
  br i1 %527, label %528, label %532

528:                                              ; preds = %525
  %529 = getelementptr inbounds i32, i32* %518, i64 %516
  %530 = bitcast i32* %529 to <4 x i32>*
  %531 = load <4 x i32>, <4 x i32>* %530, align 1, !alias.scope !29
  br label %532

532:                                              ; preds = %528, %525
  %533 = phi <4 x i32> [ %531, %528 ], [ zeroinitializer, %525 ]
  %534 = add <4 x i32> %533, %526
  %535 = sitofp <4 x i32> %534 to <4 x float>
  %536 = fcmp une <4 x float> %476, %535
  %537 = fmul <4 x float> %474, %535
  %538 = bitcast <4 x float> %537 to <4 x i32>
  %539 = add <4 x i32> %538, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %540 = ashr <4 x i32> %539, <i32 23, i32 23, i32 23, i32 23>
  %541 = and <4 x i32> %539, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %542 = sub <4 x i32> %538, %541
  %543 = bitcast <4 x i32> %542 to <4 x float>
  %544 = sitofp <4 x i32> %540 to <4 x float>
  %545 = fadd <4 x float> %543, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %546 = fmul <4 x float> %545, <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>
  %547 = fadd <4 x float> %546, <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>
  %548 = fmul <4 x float> %545, <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>
  %549 = fadd <4 x float> %548, <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %550 = fmul <4 x float> %545, %547
  %551 = fadd <4 x float> %550, <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>
  %552 = fmul <4 x float> %545, %549
  %553 = fadd <4 x float> %552, <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %554 = fdiv <4 x float> %551, %553
  %555 = fadd <4 x float> %554, %544
  %556 = fmul <4 x float> %555, %535
  %557 = fsub <4 x float> zeroinitializer, %556
  %558 = select <4 x i1> %536, <4 x float> %557, <4 x float> zeroinitializer
  %559 = fadd <4 x float> %517, %558
  %560 = add i64 %516, 4
  %561 = load i64, i64* %478, align 8
  %562 = load i64, i64* %480, align 8
  %563 = sub i64 %561, %562
  %564 = ashr exact i64 %563, 2
  %565 = load i64, i64* %485, align 8
  %566 = load i64, i64* %487, align 8
  %567 = sub i64 %565, %566
  %568 = ashr exact i64 %567, 2
  %569 = icmp ult i64 %564, %568
  %570 = select i1 %569, i64 %568, i64 %564
  %571 = icmp ult i64 %560, %570
  br i1 %571, label %511, label %494

572:                                              ; preds = %457, %465, %496
  %573 = phi i64 [ %497, %496 ], [ %464, %465 ], [ %464, %457 ]
  %574 = phi %"struct.jxl::Histogram"* [ %510, %496 ], [ %460, %465 ], [ %460, %457 ]
  %575 = phi float [ %509, %496 ], [ 0.000000e+00, %465 ], [ 0.000000e+00, %457 ]
  %576 = load i64, i64* %144, align 8
  %577 = sub i64 %576, %573
  %578 = sdiv exact i64 %577, 40
  %579 = icmp ugt i64 %578, 1
  br i1 %579, label %707, label %580

580:                                              ; preds = %832, %572
  %581 = phi %"struct.jxl::Histogram"* [ %574, %572 ], [ %835, %832 ]
  %582 = phi i64 [ 0, %572 ], [ %840, %832 ]
  %583 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %581, i64 %582
  %584 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %147, align 8
  %585 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %584, i64 %451
  %586 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %584, i64 %451, i32 0, i32 0, i32 1
  %587 = bitcast i32** %586 to i64*
  %588 = load i64, i64* %587, align 8
  %589 = bitcast %"struct.jxl::Histogram"* %585 to i64*
  %590 = load i64, i64* %589, align 8
  %591 = sub i64 %588, %590
  %592 = ashr exact i64 %591, 2
  %593 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %581, i64 %582, i32 0, i32 0, i32 1
  %594 = bitcast i32** %593 to i64*
  %595 = load i64, i64* %594, align 8
  %596 = bitcast %"struct.jxl::Histogram"* %583 to i64*
  %597 = load i64, i64* %596, align 8
  %598 = sub i64 %595, %597
  %599 = ashr exact i64 %598, 2
  %600 = icmp ugt i64 %592, %599
  br i1 %600, label %601, label %606

601:                                              ; preds = %580
  %602 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %583, i64 0, i32 0
  %603 = sub nsw i64 %592, %599
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector"* %602, i64 %603) #13
  %604 = load i64, i64* %587, align 8
  %605 = load i64, i64* %589, align 8
  br label %606

606:                                              ; preds = %601, %580
  %607 = phi i64 [ %605, %601 ], [ %590, %580 ]
  %608 = phi i64 [ %604, %601 ], [ %588, %580 ]
  %609 = icmp eq i64 %608, %607
  br i1 %609, label %628, label %610

610:                                              ; preds = %606
  %611 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %583, i64 0, i32 0, i32 0, i32 0
  br label %612

612:                                              ; preds = %612, %610
  %613 = phi i64 [ %607, %610 ], [ %624, %612 ]
  %614 = phi i64 [ 0, %610 ], [ %622, %612 ]
  %615 = inttoptr i64 %613 to i32*
  %616 = getelementptr inbounds i32, i32* %615, i64 %614
  %617 = load i32, i32* %616, align 4
  %618 = load i32*, i32** %611, align 8
  %619 = getelementptr inbounds i32, i32* %618, i64 %614
  %620 = load i32, i32* %619, align 4
  %621 = add nsw i32 %620, %617
  store i32 %621, i32* %619, align 4
  %622 = add nuw i64 %614, 1
  %623 = load i64, i64* %587, align 8
  %624 = load i64, i64* %589, align 8
  %625 = sub i64 %623, %624
  %626 = ashr exact i64 %625, 2
  %627 = icmp ult i64 %622, %626
  br i1 %627, label %612, label %628

628:                                              ; preds = %612, %606
  %629 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %584, i64 %451, i32 1
  %630 = load i64, i64* %629, align 8
  %631 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %581, i64 %582, i32 1
  %632 = load i64, i64* %631, align 8
  %633 = add i64 %632, %630
  store i64 %633, i64* %631, align 8
  %634 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %16, align 8
  %635 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %634, i64 %582, i32 2
  store float 0.000000e+00, float* %635, align 8
  %636 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %634, i64 %582, i32 1
  %637 = load i64, i64* %636, align 8
  %638 = icmp eq i64 %637, 0
  br i1 %638, label %703, label %639

639:                                              ; preds = %628
  %640 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %634, i64 %582
  %641 = uitofp i64 %637 to float
  %642 = fdiv float 1.000000e+00, %641
  %643 = insertelement <4 x float> undef, float %642, i32 0
  %644 = shufflevector <4 x float> %643, <4 x float> undef, <4 x i32> zeroinitializer
  %645 = insertelement <4 x float> undef, float %641, i32 0
  %646 = shufflevector <4 x float> %645, <4 x float> undef, <4 x i32> zeroinitializer
  %647 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %634, i64 %582, i32 0, i32 0, i32 1
  %648 = bitcast i32** %647 to i64*
  %649 = load i64, i64* %648, align 8
  %650 = bitcast %"struct.jxl::Histogram"* %640 to i64*
  %651 = load i64, i64* %650, align 8
  %652 = icmp eq i64 %649, %651
  br i1 %652, label %655, label %664

653:                                              ; preds = %664
  %654 = load float, float* %635, align 8
  br label %655

655:                                              ; preds = %653, %639
  %656 = phi float [ 0.000000e+00, %639 ], [ %654, %653 ]
  %657 = phi <4 x float> [ zeroinitializer, %639 ], [ %696, %653 ]
  %658 = shufflevector <4 x float> %657, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %659 = fadd <4 x float> %657, %658
  %660 = shufflevector <4 x float> %659, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %661 = fadd <4 x float> %659, %660
  %662 = extractelement <4 x float> %661, i32 0
  %663 = fadd float %656, %662
  store float %663, float* %635, align 8
  br label %703

664:                                              ; preds = %639, %664
  %665 = phi i64 [ %699, %664 ], [ %651, %639 ]
  %666 = phi i64 [ %697, %664 ], [ 0, %639 ]
  %667 = phi <4 x float> [ %696, %664 ], [ zeroinitializer, %639 ]
  %668 = inttoptr i64 %665 to i32*
  %669 = getelementptr inbounds i32, i32* %668, i64 %666
  %670 = bitcast i32* %669 to <4 x i32>*
  %671 = load <4 x i32>, <4 x i32>* %670, align 1, !alias.scope !32
  %672 = sitofp <4 x i32> %671 to <4 x float>
  %673 = fcmp une <4 x float> %646, %672
  %674 = fmul <4 x float> %644, %672
  %675 = bitcast <4 x float> %674 to <4 x i32>
  %676 = add <4 x i32> %675, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %677 = ashr <4 x i32> %676, <i32 23, i32 23, i32 23, i32 23>
  %678 = and <4 x i32> %676, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %679 = sub <4 x i32> %675, %678
  %680 = bitcast <4 x i32> %679 to <4 x float>
  %681 = sitofp <4 x i32> %677 to <4 x float>
  %682 = fadd <4 x float> %680, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %683 = fmul <4 x float> %682, <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>
  %684 = fadd <4 x float> %683, <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>
  %685 = fmul <4 x float> %682, <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>
  %686 = fadd <4 x float> %685, <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %687 = fmul <4 x float> %682, %684
  %688 = fadd <4 x float> %687, <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>
  %689 = fmul <4 x float> %682, %686
  %690 = fadd <4 x float> %689, <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %691 = fdiv <4 x float> %688, %690
  %692 = fadd <4 x float> %691, %681
  %693 = fmul <4 x float> %692, %672
  %694 = fsub <4 x float> zeroinitializer, %693
  %695 = select <4 x i1> %673, <4 x float> %694, <4 x float> zeroinitializer
  %696 = fadd <4 x float> %667, %695
  %697 = add i64 %666, 4
  %698 = load i64, i64* %648, align 8
  %699 = load i64, i64* %650, align 8
  %700 = sub i64 %698, %699
  %701 = ashr exact i64 %700, 2
  %702 = icmp ult i64 %697, %701
  br i1 %702, label %664, label %653

703:                                              ; preds = %628, %655
  %704 = trunc i64 %582 to i32
  %705 = load i32*, i32** %146, align 8
  %706 = getelementptr inbounds i32, i32* %705, i64 %451
  store i32 %704, i32* %706, align 4
  br label %847

707:                                              ; preds = %572, %832
  %708 = phi i64 [ %833, %832 ], [ %573, %572 ]
  %709 = phi i64 [ %834, %832 ], [ %576, %572 ]
  %710 = phi %"struct.jxl::Histogram"* [ %835, %832 ], [ %574, %572 ]
  %711 = phi i64 [ %836, %832 ], [ %573, %572 ]
  %712 = phi i64 [ %837, %832 ], [ %576, %572 ]
  %713 = phi %"struct.jxl::Histogram"* [ %846, %832 ], [ %574, %572 ]
  %714 = phi i64 [ %842, %832 ], [ 1, %572 ]
  %715 = phi float [ %841, %832 ], [ %575, %572 ]
  %716 = phi i64 [ %840, %832 ], [ 0, %572 ]
  %717 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %147, align 8
  %718 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %717, i64 %451
  %719 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %713, i64 %714
  %720 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %717, i64 %451, i32 1
  %721 = load i64, i64* %720, align 8
  %722 = icmp eq i64 %721, 0
  br i1 %722, label %832, label %723

723:                                              ; preds = %707
  %724 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %713, i64 %714, i32 1
  %725 = load i64, i64* %724, align 8
  %726 = icmp eq i64 %725, 0
  br i1 %726, label %832, label %727

727:                                              ; preds = %723
  %728 = add i64 %725, %721
  %729 = uitofp i64 %728 to float
  %730 = fdiv float 1.000000e+00, %729
  %731 = insertelement <4 x float> undef, float %730, i32 0
  %732 = shufflevector <4 x float> %731, <4 x float> undef, <4 x i32> zeroinitializer
  %733 = insertelement <4 x float> undef, float %729, i32 0
  %734 = shufflevector <4 x float> %733, <4 x float> undef, <4 x i32> zeroinitializer
  %735 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %717, i64 %451, i32 0, i32 0, i32 1
  %736 = bitcast i32** %735 to i64*
  %737 = load i64, i64* %736, align 8
  %738 = bitcast %"struct.jxl::Histogram"* %718 to i64*
  %739 = load i64, i64* %738, align 8
  %740 = sub i64 %737, %739
  %741 = ashr exact i64 %740, 2
  %742 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %713, i64 %714, i32 0, i32 0, i32 1
  %743 = bitcast i32** %742 to i64*
  %744 = load i64, i64* %743, align 8
  %745 = bitcast %"struct.jxl::Histogram"* %719 to i64*
  %746 = load i64, i64* %745, align 8
  %747 = sub i64 %744, %746
  %748 = ashr exact i64 %747, 2
  %749 = icmp ult i64 %741, %748
  %750 = select i1 %749, i64 %748, i64 %741
  %751 = icmp eq i64 %750, 0
  br i1 %751, label %755, label %771

752:                                              ; preds = %792
  %753 = load i64, i64* %144, align 8
  %754 = load i64, i64* %145, align 8
  br label %755

755:                                              ; preds = %752, %727
  %756 = phi i64 [ %708, %727 ], [ %754, %752 ]
  %757 = phi i64 [ %709, %727 ], [ %753, %752 ]
  %758 = phi <4 x float> [ zeroinitializer, %727 ], [ %819, %752 ]
  %759 = shufflevector <4 x float> %758, <4 x float> undef, <4 x i32> <i32 2, i32 3, i32 0, i32 1>
  %760 = fadd <4 x float> %758, %759
  %761 = shufflevector <4 x float> %760, <4 x float> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %762 = fadd <4 x float> %760, %761
  %763 = extractelement <4 x float> %762, i32 0
  %764 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %717, i64 %451, i32 2
  %765 = load float, float* %764, align 8
  %766 = fsub float %763, %765
  %767 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %713, i64 %714, i32 2
  %768 = load float, float* %767, align 8
  %769 = fsub float %766, %768
  %770 = inttoptr i64 %756 to %"struct.jxl::Histogram"*
  br label %832

771:                                              ; preds = %727, %792
  %772 = phi i64 [ %826, %792 ], [ %746, %727 ]
  %773 = phi i64 [ %822, %792 ], [ %739, %727 ]
  %774 = phi i64 [ %828, %792 ], [ %748, %727 ]
  %775 = phi i64 [ %824, %792 ], [ %741, %727 ]
  %776 = phi i64 [ %820, %792 ], [ 0, %727 ]
  %777 = phi <4 x float> [ %819, %792 ], [ zeroinitializer, %727 ]
  %778 = inttoptr i64 %772 to i32*
  %779 = icmp ugt i64 %775, %776
  br i1 %779, label %780, label %785

780:                                              ; preds = %771
  %781 = inttoptr i64 %773 to i32*
  %782 = getelementptr inbounds i32, i32* %781, i64 %776
  %783 = bitcast i32* %782 to <4 x i32>*
  %784 = load <4 x i32>, <4 x i32>* %783, align 1, !alias.scope !35
  br label %785

785:                                              ; preds = %780, %771
  %786 = phi <4 x i32> [ %784, %780 ], [ zeroinitializer, %771 ]
  %787 = icmp ugt i64 %774, %776
  br i1 %787, label %788, label %792

788:                                              ; preds = %785
  %789 = getelementptr inbounds i32, i32* %778, i64 %776
  %790 = bitcast i32* %789 to <4 x i32>*
  %791 = load <4 x i32>, <4 x i32>* %790, align 1, !alias.scope !38
  br label %792

792:                                              ; preds = %788, %785
  %793 = phi <4 x i32> [ %791, %788 ], [ zeroinitializer, %785 ]
  %794 = add <4 x i32> %793, %786
  %795 = sitofp <4 x i32> %794 to <4 x float>
  %796 = fcmp une <4 x float> %734, %795
  %797 = fmul <4 x float> %732, %795
  %798 = bitcast <4 x float> %797 to <4 x i32>
  %799 = add <4 x i32> %798, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %800 = ashr <4 x i32> %799, <i32 23, i32 23, i32 23, i32 23>
  %801 = and <4 x i32> %799, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %802 = sub <4 x i32> %798, %801
  %803 = bitcast <4 x i32> %802 to <4 x float>
  %804 = sitofp <4 x i32> %800 to <4 x float>
  %805 = fadd <4 x float> %803, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %806 = fmul <4 x float> %805, <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>
  %807 = fadd <4 x float> %806, <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>
  %808 = fmul <4 x float> %805, <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>
  %809 = fadd <4 x float> %808, <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %810 = fmul <4 x float> %805, %807
  %811 = fadd <4 x float> %810, <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>
  %812 = fmul <4 x float> %805, %809
  %813 = fadd <4 x float> %812, <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %814 = fdiv <4 x float> %811, %813
  %815 = fadd <4 x float> %814, %804
  %816 = fmul <4 x float> %815, %795
  %817 = fsub <4 x float> zeroinitializer, %816
  %818 = select <4 x i1> %796, <4 x float> %817, <4 x float> zeroinitializer
  %819 = fadd <4 x float> %777, %818
  %820 = add i64 %776, 4
  %821 = load i64, i64* %736, align 8
  %822 = load i64, i64* %738, align 8
  %823 = sub i64 %821, %822
  %824 = ashr exact i64 %823, 2
  %825 = load i64, i64* %743, align 8
  %826 = load i64, i64* %745, align 8
  %827 = sub i64 %825, %826
  %828 = ashr exact i64 %827, 2
  %829 = icmp ult i64 %824, %828
  %830 = select i1 %829, i64 %828, i64 %824
  %831 = icmp ult i64 %820, %830
  br i1 %831, label %771, label %752

832:                                              ; preds = %707, %723, %755
  %833 = phi i64 [ %756, %755 ], [ %708, %723 ], [ %708, %707 ]
  %834 = phi i64 [ %757, %755 ], [ %709, %723 ], [ %709, %707 ]
  %835 = phi %"struct.jxl::Histogram"* [ %770, %755 ], [ %710, %723 ], [ %710, %707 ]
  %836 = phi i64 [ %756, %755 ], [ %711, %723 ], [ %711, %707 ]
  %837 = phi i64 [ %757, %755 ], [ %712, %723 ], [ %712, %707 ]
  %838 = phi float [ %769, %755 ], [ 0.000000e+00, %723 ], [ 0.000000e+00, %707 ]
  %839 = fcmp olt float %838, %715
  %840 = select i1 %839, i64 %714, i64 %716
  %841 = select i1 %839, float %838, float %715
  %842 = add nuw i64 %714, 1
  %843 = sub i64 %837, %836
  %844 = sdiv exact i64 %843, 40
  %845 = icmp ult i64 %842, %844
  %846 = inttoptr i64 %836 to %"struct.jxl::Histogram"*
  br i1 %845, label %707, label %580

847:                                              ; preds = %450, %703
  %848 = add nuw i64 %451, 1
  %849 = icmp eq i64 %848, %1
  br i1 %849, label %442, label %450
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl9HistogramENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.4"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::Histogram"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.4"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 40
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"struct.jxl::Histogram"*
  br i1 %10, label %12, label %83

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"struct.jxl::Histogram"** %13 to i64*
  %15 = icmp ugt i64 %1, 461168601842738790
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #14
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = sdiv exact i64 %19, 40
  %21 = mul i64 %1, 40
  %22 = tail call i8* @_Znwm(i64 %21) #12
  %23 = bitcast i8* %22 to %"struct.jxl::Histogram"*
  %24 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %23, i64 %20
  %25 = ptrtoint %"struct.jxl::Histogram"* %24 to i64
  %26 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %23, i64 %1
  %27 = ptrtoint %"struct.jxl::Histogram"* %26 to i64
  %28 = inttoptr i64 %18 to %"struct.jxl::Histogram"*
  %29 = icmp eq %"struct.jxl::Histogram"* %28, %11
  br i1 %29, label %60, label %30

30:                                               ; preds = %17, %30
  %31 = phi %"struct.jxl::Histogram"* [ %33, %30 ], [ %24, %17 ]
  %32 = phi %"struct.jxl::Histogram"* [ %34, %30 ], [ %28, %17 ]
  %33 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %31, i64 -1
  %34 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %32, i64 -1
  %35 = bitcast %"struct.jxl::Histogram"* %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 24, i1 false) #13
  %36 = bitcast %"struct.jxl::Histogram"* %34 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = bitcast %"struct.jxl::Histogram"* %33 to i64*
  store i64 %37, i64* %38, align 8
  %39 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %32, i64 -1, i32 0, i32 0, i32 1
  %40 = bitcast i32** %39 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %31, i64 -1, i32 0, i32 0, i32 1
  %43 = bitcast i32** %42 to i64*
  store i64 %41, i64* %43, align 8
  %44 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %32, i64 -1, i32 0, i32 0, i32 2, i32 0, i32 0
  %45 = bitcast i32** %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %31, i64 -1, i32 0, i32 0, i32 2, i32 0, i32 0
  %48 = bitcast i32** %47 to i64*
  store i64 %46, i64* %48, align 8
  %49 = bitcast %"struct.jxl::Histogram"* %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %49, i8 0, i64 24, i1 false) #13
  %50 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %31, i64 -1, i32 1
  %51 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %32, i64 -1, i32 1
  %52 = bitcast i64* %50 to i8*
  %53 = bitcast i64* %51 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 12, i1 false) #13
  %54 = icmp eq %"struct.jxl::Histogram"* %34, %11
  br i1 %54, label %55, label %30

55:                                               ; preds = %30
  %56 = ptrtoint %"struct.jxl::Histogram"* %33 to i64
  %57 = load i64, i64* %6, align 8
  %58 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %13, align 8
  %59 = inttoptr i64 %57 to %"struct.jxl::Histogram"*
  br label %60

60:                                               ; preds = %17, %55
  %61 = phi %"struct.jxl::Histogram"* [ %59, %55 ], [ %28, %17 ]
  %62 = phi %"struct.jxl::Histogram"* [ %58, %55 ], [ %11, %17 ]
  %63 = phi i64 [ %56, %55 ], [ %25, %17 ]
  %64 = phi i64 [ %57, %55 ], [ %18, %17 ]
  store i64 %63, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %65 = icmp eq %"struct.jxl::Histogram"* %62, %61
  br i1 %65, label %79, label %66

66:                                               ; preds = %60, %77
  %67 = phi %"struct.jxl::Histogram"* [ %68, %77 ], [ %62, %60 ]
  %68 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %67, i64 -1
  %69 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %68, i64 0, i32 0, i32 0, i32 0
  %70 = load i32*, i32** %69, align 8
  %71 = icmp eq i32* %70, null
  br i1 %71, label %77, label %72

72:                                               ; preds = %66
  %73 = ptrtoint i32* %70 to i64
  %74 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %67, i64 -1, i32 0, i32 0, i32 1
  %75 = bitcast i32** %74 to i64*
  store i64 %73, i64* %75, align 8
  %76 = bitcast i32* %70 to i8*
  tail call void @_ZdlPv(i8* %76) #12
  br label %77

77:                                               ; preds = %72, %66
  %78 = icmp eq %"struct.jxl::Histogram"* %68, %61
  br i1 %78, label %79, label %66

79:                                               ; preds = %77, %60
  %80 = icmp eq i64 %64, 0
  br i1 %80, label %83, label %81

81:                                               ; preds = %79
  %82 = inttoptr i64 %64 to i8*
  tail call void @_ZdlPv(i8* %82) #12
  br label %83

83:                                               ; preds = %81, %79, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX216HistogramEntropyERKNS_9HistogramE(%"struct.jxl::Histogram"* nocapture dereferenceable(40)) #3 {
  %2 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 2
  store float 0.000000e+00, float* %2, align 8
  %3 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %67, label %6

6:                                                ; preds = %1
  %7 = uitofp i64 %4 to float
  %8 = fdiv float 1.000000e+00, %7
  %9 = insertelement <8 x float> undef, float %8, i32 0
  %10 = shufflevector <8 x float> %9, <8 x float> undef, <8 x i32> zeroinitializer
  %11 = insertelement <8 x float> undef, float %7, i32 0
  %12 = shufflevector <8 x float> %11, <8 x float> undef, <8 x i32> zeroinitializer
  %13 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 0, i32 0, i32 1
  %14 = bitcast i32** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"struct.jxl::Histogram"* %0 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %15, %17
  br i1 %18, label %21, label %32

19:                                               ; preds = %32
  %20 = load float, float* %2, align 8
  br label %21

21:                                               ; preds = %19, %6
  %22 = phi float [ 0.000000e+00, %6 ], [ %20, %19 ]
  %23 = phi <8 x float> [ zeroinitializer, %6 ], [ %60, %19 ]
  %24 = shufflevector <8 x float> %23, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %25 = fadd <8 x float> %23, %24
  %26 = shufflevector <8 x float> %25, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %27 = fadd <8 x float> %25, %26
  %28 = shufflevector <8 x float> %27, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %29 = fadd <8 x float> %27, %28
  %30 = extractelement <8 x float> %29, i32 0
  %31 = fadd float %30, %22
  store float %31, float* %2, align 8
  br label %67

32:                                               ; preds = %6, %32
  %33 = phi i64 [ %63, %32 ], [ %17, %6 ]
  %34 = phi i64 [ %61, %32 ], [ 0, %6 ]
  %35 = phi <8 x float> [ %60, %32 ], [ zeroinitializer, %6 ]
  %36 = inttoptr i64 %33 to i32*
  %37 = getelementptr inbounds i32, i32* %36, i64 %34
  %38 = bitcast i32* %37 to <8 x i32>*
  %39 = load <8 x i32>, <8 x i32>* %38, align 1, !alias.scope !41, !noalias !44
  %40 = sitofp <8 x i32> %39 to <8 x float>
  %41 = fcmp une <8 x float> %12, %40
  %42 = fmul <8 x float> %10, %40
  %43 = bitcast <8 x float> %42 to <8 x i32>
  %44 = add <8 x i32> %43, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %45 = ashr <8 x i32> %44, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %46 = and <8 x i32> %44, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %47 = sub <8 x i32> %43, %46
  %48 = bitcast <8 x i32> %47 to <8 x float>
  %49 = sitofp <8 x i32> %45 to <8 x float>
  %50 = fadd <8 x float> %48, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %51 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %50, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #13
  %52 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %50, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #13
  fence acq_rel
  %53 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %51, <8 x float> %50, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #13
  %54 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %52, <8 x float> %50, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #13
  fence acq_rel
  %55 = fdiv <8 x float> %53, %54
  %56 = fadd <8 x float> %55, %49
  %57 = fmul <8 x float> %56, %40
  %58 = fsub <8 x float> zeroinitializer, %57
  %59 = select <8 x i1> %41, <8 x float> %58, <8 x float> zeroinitializer
  %60 = fadd <8 x float> %35, %59
  %61 = add i64 %34, 8
  %62 = load i64, i64* %14, align 8
  %63 = load i64, i64* %16, align 8
  %64 = sub i64 %62, %63
  %65 = ashr exact i64 %64, 2
  %66 = icmp ult i64 %61, %65
  br i1 %66, label %32, label %19

67:                                               ; preds = %1, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN3jxl6N_AVX217HistogramDistanceERKNS_9HistogramES3_(%"struct.jxl::Histogram"* nocapture readonly dereferenceable(40), %"struct.jxl::Histogram"* nocapture readonly dereferenceable(40)) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %107, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %107, label %10

10:                                               ; preds = %6
  %11 = add i64 %8, %4
  %12 = uitofp i64 %11 to float
  %13 = fdiv float 1.000000e+00, %12
  %14 = insertelement <8 x float> undef, float %13, i32 0
  %15 = shufflevector <8 x float> %14, <8 x float> undef, <8 x i32> zeroinitializer
  %16 = insertelement <8 x float> undef, float %12, i32 0
  %17 = shufflevector <8 x float> %16, <8 x float> undef, <8 x i32> zeroinitializer
  %18 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 0, i32 0, i32 1
  %19 = bitcast i32** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"struct.jxl::Histogram"* %0 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %20, %22
  %24 = ashr exact i64 %23, 2
  %25 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1, i64 0, i32 0, i32 0, i32 1
  %26 = bitcast i32** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %"struct.jxl::Histogram"* %1 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %27, %29
  %31 = ashr exact i64 %30, 2
  %32 = icmp ult i64 %24, %31
  %33 = select i1 %32, i64 %31, i64 %24
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %50

35:                                               ; preds = %71, %10
  %36 = phi <8 x float> [ zeroinitializer, %10 ], [ %94, %71 ]
  %37 = shufflevector <8 x float> %36, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %38 = fadd <8 x float> %36, %37
  %39 = shufflevector <8 x float> %38, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %40 = fadd <8 x float> %38, %39
  %41 = shufflevector <8 x float> %40, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %42 = fadd <8 x float> %40, %41
  %43 = extractelement <8 x float> %42, i32 0
  %44 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 2
  %45 = load float, float* %44, align 8
  %46 = fsub float %43, %45
  %47 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1, i64 0, i32 2
  %48 = load float, float* %47, align 8
  %49 = fsub float %46, %48
  br label %107

50:                                               ; preds = %10, %71
  %51 = phi i64 [ %101, %71 ], [ %29, %10 ]
  %52 = phi i64 [ %97, %71 ], [ %22, %10 ]
  %53 = phi i64 [ %103, %71 ], [ %31, %10 ]
  %54 = phi i64 [ %99, %71 ], [ %24, %10 ]
  %55 = phi i64 [ %95, %71 ], [ 0, %10 ]
  %56 = phi <8 x float> [ %94, %71 ], [ zeroinitializer, %10 ]
  %57 = inttoptr i64 %51 to i32*
  %58 = icmp ugt i64 %54, %55
  br i1 %58, label %59, label %64

59:                                               ; preds = %50
  %60 = inttoptr i64 %52 to i32*
  %61 = getelementptr inbounds i32, i32* %60, i64 %55
  %62 = bitcast i32* %61 to <8 x i32>*
  %63 = load <8 x i32>, <8 x i32>* %62, align 1, !alias.scope !46, !noalias !49
  br label %64

64:                                               ; preds = %50, %59
  %65 = phi <8 x i32> [ %63, %59 ], [ zeroinitializer, %50 ]
  %66 = icmp ugt i64 %53, %55
  br i1 %66, label %67, label %71

67:                                               ; preds = %64
  %68 = getelementptr inbounds i32, i32* %57, i64 %55
  %69 = bitcast i32* %68 to <8 x i32>*
  %70 = load <8 x i32>, <8 x i32>* %69, align 1, !alias.scope !51, !noalias !54
  br label %71

71:                                               ; preds = %64, %67
  %72 = phi <8 x i32> [ %70, %67 ], [ zeroinitializer, %64 ]
  %73 = add <8 x i32> %72, %65
  %74 = sitofp <8 x i32> %73 to <8 x float>
  %75 = fcmp une <8 x float> %17, %74
  %76 = fmul <8 x float> %15, %74
  %77 = bitcast <8 x float> %76 to <8 x i32>
  %78 = add <8 x i32> %77, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %79 = ashr <8 x i32> %78, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %80 = and <8 x i32> %78, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %81 = sub <8 x i32> %77, %80
  %82 = bitcast <8 x i32> %81 to <8 x float>
  %83 = sitofp <8 x i32> %79 to <8 x float>
  %84 = fadd <8 x float> %82, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %85 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %84, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #13
  %86 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %84, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #13
  fence acq_rel
  %87 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %85, <8 x float> %84, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #13
  %88 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %86, <8 x float> %84, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #13
  fence acq_rel
  %89 = fdiv <8 x float> %87, %88
  %90 = fadd <8 x float> %89, %83
  %91 = fmul <8 x float> %90, %74
  %92 = fsub <8 x float> zeroinitializer, %91
  %93 = select <8 x i1> %75, <8 x float> %92, <8 x float> zeroinitializer
  %94 = fadd <8 x float> %56, %93
  %95 = add i64 %55, 8
  %96 = load i64, i64* %19, align 8
  %97 = load i64, i64* %21, align 8
  %98 = sub i64 %96, %97
  %99 = ashr exact i64 %98, 2
  %100 = load i64, i64* %26, align 8
  %101 = load i64, i64* %28, align 8
  %102 = sub i64 %100, %101
  %103 = ashr exact i64 %102, 2
  %104 = icmp ult i64 %99, %103
  %105 = select i1 %104, i64 %103, i64 %99
  %106 = icmp ult i64 %95, %105
  br i1 %106, label %50, label %35

107:                                              ; preds = %2, %6, %35
  %108 = phi float [ %49, %35 ], [ 0.000000e+00, %6 ], [ 0.000000e+00, %2 ]
  ret float %108
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX221FastClusterHistogramsERKNSt3__16vectorINS_9HistogramENS1_9allocatorIS3_EEEEmmfPS6_PNS2_IjNS4_IjEEEE(%"class.std::__1::vector.4"* nocapture readonly dereferenceable(24), i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*) #3 {
  %7 = alloca %"class.std::__1::vector.18", align 8
  %8 = alloca i32, align 4
  %9 = alloca float, align 4
  %10 = icmp eq i64 %1, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 0
  %13 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %12, align 8
  br label %150

14:                                               ; preds = %220, %6
  %15 = phi i64 [ 0, %6 ], [ %227, %220 ]
  %16 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %4, i64 0, i32 0, i32 0
  %17 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %4, i64 0, i32 0, i32 1
  %19 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %18, align 8
  %20 = icmp eq %"struct.jxl::Histogram"* %19, %17
  br i1 %20, label %34, label %21

21:                                               ; preds = %14, %32
  %22 = phi %"struct.jxl::Histogram"* [ %23, %32 ], [ %19, %14 ]
  %23 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %22, i64 -1
  %24 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %23, i64 0, i32 0, i32 0, i32 0
  %25 = load i32*, i32** %24, align 8
  %26 = icmp eq i32* %25, null
  br i1 %26, label %32, label %27

27:                                               ; preds = %21
  %28 = ptrtoint i32* %25 to i64
  %29 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %22, i64 -1, i32 0, i32 0, i32 1
  %30 = bitcast i32** %29 to i64*
  store i64 %28, i64* %30, align 8
  %31 = bitcast i32* %25 to i8*
  tail call void @_ZdlPv(i8* %31) #12
  br label %32

32:                                               ; preds = %27, %21
  %33 = icmp eq %"struct.jxl::Histogram"* %23, %17
  br i1 %33, label %34, label %21

34:                                               ; preds = %32, %14
  store %"struct.jxl::Histogram"* %17, %"struct.jxl::Histogram"** %18, align 8
  tail call void @_ZNSt3__16vectorIN3jxl9HistogramENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.4"* %4, i64 %2)
  %35 = bitcast %"class.std::__1::vector.18"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %35) #13
  %36 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %7, i64 0, i32 0, i32 0
  %37 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %7, i64 0, i32 0, i32 1
  %38 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 24, i1 false) #13
  br i1 %10, label %135, label %39

39:                                               ; preds = %34
  %40 = icmp ugt i64 %1, 4611686018427387903
  br i1 %40, label %41, label %43

41:                                               ; preds = %39
  %42 = bitcast %"class.std::__1::vector.18"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %42) #14
  unreachable

43:                                               ; preds = %39
  %44 = shl i64 %1, 2
  %45 = tail call i8* @_Znwm(i64 %44) #12
  %46 = bitcast i8* %45 to float*
  %47 = bitcast float** %37 to i8**
  store i8* %45, i8** %47, align 8
  %48 = bitcast %"class.std::__1::vector.18"* %7 to i8**
  store i8* %45, i8** %48, align 8
  %49 = getelementptr inbounds float, float* %46, i64 %1
  store float* %49, float** %38, align 8
  %50 = shl nsw i64 %1, 2
  %51 = add i64 %50, -4
  %52 = lshr exact i64 %51, 2
  %53 = add nuw nsw i64 %52, 1
  %54 = icmp ult i64 %53, 32
  br i1 %54, label %125, label %55

55:                                               ; preds = %43
  %56 = and i64 %53, 9223372036854775776
  %57 = getelementptr float, float* %46, i64 %56
  %58 = add nsw i64 %56, -32
  %59 = lshr exact i64 %58, 5
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp ult i64 %58, 96
  br i1 %62, label %106, label %63

63:                                               ; preds = %55
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %103, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %104, %65 ]
  %68 = getelementptr float, float* %46, i64 %66
  %69 = bitcast float* %68 to <8 x i32>*
  store <8 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <8 x i32>* %69, align 4
  %70 = getelementptr float, float* %68, i64 8
  %71 = bitcast float* %70 to <8 x i32>*
  store <8 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <8 x i32>* %71, align 4
  %72 = getelementptr float, float* %68, i64 16
  %73 = bitcast float* %72 to <8 x i32>*
  store <8 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <8 x i32>* %73, align 4
  %74 = getelementptr float, float* %68, i64 24
  %75 = bitcast float* %74 to <8 x i32>*
  store <8 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <8 x i32>* %75, align 4
  %76 = or i64 %66, 32
  %77 = getelementptr float, float* %46, i64 %76
  %78 = bitcast float* %77 to <8 x i32>*
  store <8 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <8 x i32>* %78, align 4
  %79 = getelementptr float, float* %77, i64 8
  %80 = bitcast float* %79 to <8 x i32>*
  store <8 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <8 x i32>* %80, align 4
  %81 = getelementptr float, float* %77, i64 16
  %82 = bitcast float* %81 to <8 x i32>*
  store <8 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <8 x i32>* %82, align 4
  %83 = getelementptr float, float* %77, i64 24
  %84 = bitcast float* %83 to <8 x i32>*
  store <8 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <8 x i32>* %84, align 4
  %85 = or i64 %66, 64
  %86 = getelementptr float, float* %46, i64 %85
  %87 = bitcast float* %86 to <8 x i32>*
  store <8 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <8 x i32>* %87, align 4
  %88 = getelementptr float, float* %86, i64 8
  %89 = bitcast float* %88 to <8 x i32>*
  store <8 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <8 x i32>* %89, align 4
  %90 = getelementptr float, float* %86, i64 16
  %91 = bitcast float* %90 to <8 x i32>*
  store <8 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <8 x i32>* %91, align 4
  %92 = getelementptr float, float* %86, i64 24
  %93 = bitcast float* %92 to <8 x i32>*
  store <8 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <8 x i32>* %93, align 4
  %94 = or i64 %66, 96
  %95 = getelementptr float, float* %46, i64 %94
  %96 = bitcast float* %95 to <8 x i32>*
  store <8 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <8 x i32>* %96, align 4
  %97 = getelementptr float, float* %95, i64 8
  %98 = bitcast float* %97 to <8 x i32>*
  store <8 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <8 x i32>* %98, align 4
  %99 = getelementptr float, float* %95, i64 16
  %100 = bitcast float* %99 to <8 x i32>*
  store <8 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <8 x i32>* %100, align 4
  %101 = getelementptr float, float* %95, i64 24
  %102 = bitcast float* %101 to <8 x i32>*
  store <8 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <8 x i32>* %102, align 4
  %103 = add i64 %66, 128
  %104 = add i64 %67, -4
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %106, label %65, !llvm.loop !56

106:                                              ; preds = %65, %55
  %107 = phi i64 [ 0, %55 ], [ %103, %65 ]
  %108 = icmp eq i64 %61, 0
  br i1 %108, label %123, label %109

109:                                              ; preds = %106, %109
  %110 = phi i64 [ %120, %109 ], [ %107, %106 ]
  %111 = phi i64 [ %121, %109 ], [ %61, %106 ]
  %112 = getelementptr float, float* %46, i64 %110
  %113 = bitcast float* %112 to <8 x i32>*
  store <8 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <8 x i32>* %113, align 4
  %114 = getelementptr float, float* %112, i64 8
  %115 = bitcast float* %114 to <8 x i32>*
  store <8 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <8 x i32>* %115, align 4
  %116 = getelementptr float, float* %112, i64 16
  %117 = bitcast float* %116 to <8 x i32>*
  store <8 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <8 x i32>* %117, align 4
  %118 = getelementptr float, float* %112, i64 24
  %119 = bitcast float* %118 to <8 x i32>*
  store <8 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <8 x i32>* %119, align 4
  %120 = add i64 %110, 32
  %121 = add i64 %111, -1
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %109, !llvm.loop !57

123:                                              ; preds = %109, %106
  %124 = icmp eq i64 %53, %56
  br i1 %124, label %132, label %125

125:                                              ; preds = %123, %43
  %126 = phi float* [ %46, %43 ], [ %57, %123 ]
  br label %127

127:                                              ; preds = %125, %127
  %128 = phi float* [ %130, %127 ], [ %126, %125 ]
  %129 = bitcast float* %128 to i32*
  store i32 2139095039, i32* %129, align 4
  %130 = getelementptr inbounds float, float* %128, i64 1
  %131 = icmp eq float* %130, %49
  br i1 %131, label %132, label %127, !llvm.loop !58

132:                                              ; preds = %127, %123
  %133 = bitcast float** %37 to i64*
  %134 = ptrtoint float* %49 to i64
  store i64 %134, i64* %133, align 8
  br label %135

135:                                              ; preds = %34, %132
  %136 = bitcast %"class.std::__1::vector.11"* %5 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %5, i64 0, i32 0, i32 1
  %139 = bitcast i32** %138 to i64*
  store i64 %137, i64* %139, align 8
  %140 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %140) #13
  %141 = trunc i64 %2 to i32
  store i32 %141, i32* %8, align 4
  br i1 %10, label %143, label %142

142:                                              ; preds = %135
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj(%"class.std::__1::vector.11"* %5, i64 %1, i32* nonnull dereferenceable(4) %8) #13
  br label %143

143:                                              ; preds = %135, %142
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %140) #13
  %144 = bitcast %"struct.jxl::Histogram"** %18 to i64*
  %145 = bitcast %"class.std::__1::vector.4"* %4 to i64*
  %146 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %5, i64 0, i32 0, i32 0
  %147 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 0
  %148 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %149 = bitcast float* %9 to i8*
  br label %230

150:                                              ; preds = %220, %11
  %151 = phi %"struct.jxl::Histogram"* [ %13, %11 ], [ %221, %220 ]
  %152 = phi i64 [ 0, %11 ], [ %228, %220 ]
  %153 = phi i64 [ 0, %11 ], [ %227, %220 ]
  %154 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %151, i64 %152, i32 2
  store float 0.000000e+00, float* %154, align 8
  %155 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %151, i64 %152, i32 1
  %156 = load i64, i64* %155, align 8
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %220, label %158

158:                                              ; preds = %150
  %159 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %151, i64 %152
  %160 = uitofp i64 %156 to float
  %161 = fdiv float 1.000000e+00, %160
  %162 = insertelement <8 x float> undef, float %161, i32 0
  %163 = shufflevector <8 x float> %162, <8 x float> undef, <8 x i32> zeroinitializer
  %164 = insertelement <8 x float> undef, float %160, i32 0
  %165 = shufflevector <8 x float> %164, <8 x float> undef, <8 x i32> zeroinitializer
  %166 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %151, i64 %152, i32 0, i32 0, i32 1
  %167 = bitcast i32** %166 to i64*
  %168 = load i64, i64* %167, align 8
  %169 = bitcast %"struct.jxl::Histogram"* %159 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = icmp eq i64 %168, %170
  br i1 %171, label %174, label %185

172:                                              ; preds = %185
  %173 = load float, float* %154, align 8
  br label %174

174:                                              ; preds = %172, %158
  %175 = phi float [ 0.000000e+00, %158 ], [ %173, %172 ]
  %176 = phi <8 x float> [ zeroinitializer, %158 ], [ %213, %172 ]
  %177 = shufflevector <8 x float> %176, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %178 = fadd <8 x float> %176, %177
  %179 = shufflevector <8 x float> %178, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %180 = fadd <8 x float> %178, %179
  %181 = shufflevector <8 x float> %180, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %182 = fadd <8 x float> %180, %181
  %183 = extractelement <8 x float> %182, i32 0
  %184 = fadd float %175, %183
  store float %184, float* %154, align 8
  br label %220

185:                                              ; preds = %158, %185
  %186 = phi i64 [ %216, %185 ], [ %170, %158 ]
  %187 = phi i64 [ %214, %185 ], [ 0, %158 ]
  %188 = phi <8 x float> [ %213, %185 ], [ zeroinitializer, %158 ]
  %189 = inttoptr i64 %186 to i32*
  %190 = getelementptr inbounds i32, i32* %189, i64 %187
  %191 = bitcast i32* %190 to <8 x i32>*
  %192 = load <8 x i32>, <8 x i32>* %191, align 1, !alias.scope !59, !noalias !62
  %193 = sitofp <8 x i32> %192 to <8 x float>
  %194 = fcmp une <8 x float> %165, %193
  %195 = fmul <8 x float> %163, %193
  %196 = bitcast <8 x float> %195 to <8 x i32>
  %197 = add <8 x i32> %196, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %198 = ashr <8 x i32> %197, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %199 = and <8 x i32> %197, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %200 = sub <8 x i32> %196, %199
  %201 = bitcast <8 x i32> %200 to <8 x float>
  %202 = sitofp <8 x i32> %198 to <8 x float>
  %203 = fadd <8 x float> %201, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %204 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %203, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #13
  %205 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %203, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #13
  fence acq_rel
  %206 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %204, <8 x float> %203, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #13
  %207 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %205, <8 x float> %203, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #13
  fence acq_rel
  %208 = fdiv <8 x float> %206, %207
  %209 = fadd <8 x float> %208, %202
  %210 = fmul <8 x float> %209, %193
  %211 = fsub <8 x float> zeroinitializer, %210
  %212 = select <8 x i1> %194, <8 x float> %211, <8 x float> zeroinitializer
  %213 = fadd <8 x float> %188, %212
  %214 = add i64 %187, 8
  %215 = load i64, i64* %167, align 8
  %216 = load i64, i64* %169, align 8
  %217 = sub i64 %215, %216
  %218 = ashr exact i64 %217, 2
  %219 = icmp ult i64 %214, %218
  br i1 %219, label %185, label %172

220:                                              ; preds = %150, %174
  %221 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %12, align 8
  %222 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %221, i64 %152, i32 1
  %223 = load i64, i64* %222, align 8
  %224 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %221, i64 %153, i32 1
  %225 = load i64, i64* %224, align 8
  %226 = icmp ugt i64 %223, %225
  %227 = select i1 %226, i64 %152, i64 %153
  %228 = add nuw i64 %152, 1
  %229 = icmp eq i64 %228, %1
  br i1 %229, label %14, label %150

230:                                              ; preds = %294, %143
  %231 = phi i64 [ %15, %143 ], [ %434, %294 ]
  %232 = load i64, i64* %144, align 8
  %233 = load i64, i64* %145, align 8
  %234 = sub i64 %232, %233
  %235 = sdiv exact i64 %234, 40
  %236 = icmp ult i64 %235, %2
  %237 = icmp ult i64 %235, %1
  %238 = and i1 %236, %237
  br i1 %238, label %239, label %437

239:                                              ; preds = %230
  %240 = trunc i64 %235 to i32
  %241 = load i32*, i32** %146, align 8
  %242 = getelementptr inbounds i32, i32* %241, i64 %231
  store i32 %240, i32* %242, align 4
  %243 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %147, align 8
  %244 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %243, i64 %231
  %245 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %18, align 8
  %246 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %148, align 8
  %247 = icmp eq %"struct.jxl::Histogram"* %245, %246
  br i1 %247, label %293, label %248

248:                                              ; preds = %239
  %249 = bitcast %"struct.jxl::Histogram"* %245 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %249, i8 0, i64 24, i1 false) #13
  %250 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %243, i64 %231, i32 0, i32 0, i32 1
  %251 = bitcast i32** %250 to i64*
  %252 = load i64, i64* %251, align 8
  %253 = bitcast %"struct.jxl::Histogram"* %244 to i64*
  %254 = load i64, i64* %253, align 8
  %255 = sub i64 %252, %254
  %256 = ashr exact i64 %255, 2
  %257 = icmp eq i64 %255, 0
  br i1 %257, label %285, label %258

258:                                              ; preds = %248
  %259 = icmp ugt i64 %256, 4611686018427387903
  br i1 %259, label %260, label %262

260:                                              ; preds = %258
  %261 = bitcast %"struct.jxl::Histogram"* %245 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %261) #14
  unreachable

262:                                              ; preds = %258
  %263 = call i8* @_Znwm(i64 %255) #12
  %264 = bitcast i8* %263 to i32*
  %265 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %245, i64 0, i32 0, i32 0, i32 1
  %266 = bitcast i32** %265 to i8**
  store i8* %263, i8** %266, align 8
  %267 = bitcast %"struct.jxl::Histogram"* %245 to i8**
  store i8* %263, i8** %267, align 8
  %268 = getelementptr inbounds i32, i32* %264, i64 %256
  %269 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %245, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store i32* %268, i32** %269, align 8
  %270 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %244, i64 0, i32 0, i32 0, i32 0
  %271 = load i32*, i32** %270, align 8
  %272 = load i64, i64* %251, align 8
  %273 = bitcast i32** %265 to i64*
  %274 = ptrtoint i8* %263 to i64
  %275 = ptrtoint i32* %271 to i64
  %276 = sub i64 %272, %275
  %277 = icmp sgt i64 %276, 0
  br i1 %277, label %278, label %283

278:                                              ; preds = %262
  %279 = lshr exact i64 %276, 2
  %280 = bitcast i32* %271 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %263, i8* align 4 %280, i64 %276, i1 false) #13
  %281 = getelementptr inbounds i32, i32* %264, i64 %279
  %282 = ptrtoint i32* %281 to i64
  br label %283

283:                                              ; preds = %278, %262
  %284 = phi i64 [ %282, %278 ], [ %274, %262 ]
  store i64 %284, i64* %273, align 8
  br label %285

285:                                              ; preds = %283, %248
  %286 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %245, i64 0, i32 1
  %287 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %243, i64 %231, i32 1
  %288 = bitcast i64* %286 to i8*
  %289 = bitcast i64* %287 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %288, i8* align 8 %289, i64 12, i1 false) #13
  %290 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %245, i64 1
  %291 = ptrtoint %"struct.jxl::Histogram"* %290 to i64
  store i64 %291, i64* %144, align 8
  br label %292

292:                                              ; preds = %293, %285
  br label %299

293:                                              ; preds = %239
  call void @_ZNSt3__16vectorIN3jxl9HistogramENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector.4"* %4, %"struct.jxl::Histogram"* dereferenceable(40) %244) #13
  br label %292

294:                                              ; preds = %433
  %295 = load float*, float** %36, align 8
  %296 = getelementptr inbounds float, float* %295, i64 %434
  %297 = load float, float* %296, align 4
  %298 = fcmp olt float %297, %3
  br i1 %298, label %437, label %230

299:                                              ; preds = %292, %433
  %300 = phi i64 [ %435, %433 ], [ 0, %292 ]
  %301 = phi i64 [ %434, %433 ], [ 0, %292 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %149)
  %302 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %147, align 8
  %303 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %302, i64 %300
  %304 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %18, align 8
  %305 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %304, i64 -1
  %306 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %302, i64 %300, i32 1
  %307 = load i64, i64* %306, align 8
  %308 = icmp eq i64 %307, 0
  br i1 %308, label %410, label %309

309:                                              ; preds = %299
  %310 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %304, i64 -1, i32 1
  %311 = load i64, i64* %310, align 8
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %410, label %313

313:                                              ; preds = %309
  %314 = add i64 %311, %307
  %315 = uitofp i64 %314 to float
  %316 = fdiv float 1.000000e+00, %315
  %317 = insertelement <8 x float> undef, float %316, i32 0
  %318 = shufflevector <8 x float> %317, <8 x float> undef, <8 x i32> zeroinitializer
  %319 = insertelement <8 x float> undef, float %315, i32 0
  %320 = shufflevector <8 x float> %319, <8 x float> undef, <8 x i32> zeroinitializer
  %321 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %302, i64 %300, i32 0, i32 0, i32 1
  %322 = bitcast i32** %321 to i64*
  %323 = load i64, i64* %322, align 8
  %324 = bitcast %"struct.jxl::Histogram"* %303 to i64*
  %325 = load i64, i64* %324, align 8
  %326 = sub i64 %323, %325
  %327 = ashr exact i64 %326, 2
  %328 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %304, i64 -1, i32 0, i32 0, i32 1
  %329 = bitcast i32** %328 to i64*
  %330 = load i64, i64* %329, align 8
  %331 = bitcast %"struct.jxl::Histogram"* %305 to i64*
  %332 = load i64, i64* %331, align 8
  %333 = sub i64 %330, %332
  %334 = ashr exact i64 %333, 2
  %335 = icmp ult i64 %327, %334
  %336 = select i1 %335, i64 %334, i64 %327
  %337 = icmp eq i64 %336, 0
  br i1 %337, label %338, label %353

338:                                              ; preds = %374, %313
  %339 = phi <8 x float> [ zeroinitializer, %313 ], [ %397, %374 ]
  %340 = shufflevector <8 x float> %339, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %341 = fadd <8 x float> %339, %340
  %342 = shufflevector <8 x float> %341, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %343 = fadd <8 x float> %341, %342
  %344 = shufflevector <8 x float> %343, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %345 = fadd <8 x float> %343, %344
  %346 = extractelement <8 x float> %345, i32 0
  %347 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %302, i64 %300, i32 2
  %348 = load float, float* %347, align 8
  %349 = fsub float %346, %348
  %350 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %304, i64 -1, i32 2
  %351 = load float, float* %350, align 8
  %352 = fsub float %349, %351
  br label %410

353:                                              ; preds = %313, %374
  %354 = phi i64 [ %404, %374 ], [ %332, %313 ]
  %355 = phi i64 [ %400, %374 ], [ %325, %313 ]
  %356 = phi i64 [ %406, %374 ], [ %334, %313 ]
  %357 = phi i64 [ %402, %374 ], [ %327, %313 ]
  %358 = phi i64 [ %398, %374 ], [ 0, %313 ]
  %359 = phi <8 x float> [ %397, %374 ], [ zeroinitializer, %313 ]
  %360 = inttoptr i64 %354 to i32*
  %361 = icmp ugt i64 %357, %358
  br i1 %361, label %362, label %367

362:                                              ; preds = %353
  %363 = inttoptr i64 %355 to i32*
  %364 = getelementptr inbounds i32, i32* %363, i64 %358
  %365 = bitcast i32* %364 to <8 x i32>*
  %366 = load <8 x i32>, <8 x i32>* %365, align 1, !alias.scope !64, !noalias !67
  br label %367

367:                                              ; preds = %362, %353
  %368 = phi <8 x i32> [ %366, %362 ], [ zeroinitializer, %353 ]
  %369 = icmp ugt i64 %356, %358
  br i1 %369, label %370, label %374

370:                                              ; preds = %367
  %371 = getelementptr inbounds i32, i32* %360, i64 %358
  %372 = bitcast i32* %371 to <8 x i32>*
  %373 = load <8 x i32>, <8 x i32>* %372, align 1, !alias.scope !69, !noalias !72
  br label %374

374:                                              ; preds = %370, %367
  %375 = phi <8 x i32> [ %373, %370 ], [ zeroinitializer, %367 ]
  %376 = add <8 x i32> %375, %368
  %377 = sitofp <8 x i32> %376 to <8 x float>
  %378 = fcmp une <8 x float> %320, %377
  %379 = fmul <8 x float> %318, %377
  %380 = bitcast <8 x float> %379 to <8 x i32>
  %381 = add <8 x i32> %380, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %382 = ashr <8 x i32> %381, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %383 = and <8 x i32> %381, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %384 = sub <8 x i32> %380, %383
  %385 = bitcast <8 x i32> %384 to <8 x float>
  %386 = sitofp <8 x i32> %382 to <8 x float>
  %387 = fadd <8 x float> %385, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %388 = call <8 x float> @llvm.fma.v8f32(<8 x float> %387, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #13
  %389 = call <8 x float> @llvm.fma.v8f32(<8 x float> %387, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #13
  fence acq_rel
  %390 = call <8 x float> @llvm.fma.v8f32(<8 x float> %388, <8 x float> %387, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #13
  %391 = call <8 x float> @llvm.fma.v8f32(<8 x float> %389, <8 x float> %387, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #13
  fence acq_rel
  %392 = fdiv <8 x float> %390, %391
  %393 = fadd <8 x float> %392, %386
  %394 = fmul <8 x float> %393, %377
  %395 = fsub <8 x float> zeroinitializer, %394
  %396 = select <8 x i1> %378, <8 x float> %395, <8 x float> zeroinitializer
  %397 = fadd <8 x float> %359, %396
  %398 = add i64 %358, 8
  %399 = load i64, i64* %322, align 8
  %400 = load i64, i64* %324, align 8
  %401 = sub i64 %399, %400
  %402 = ashr exact i64 %401, 2
  %403 = load i64, i64* %329, align 8
  %404 = load i64, i64* %331, align 8
  %405 = sub i64 %403, %404
  %406 = ashr exact i64 %405, 2
  %407 = icmp ult i64 %402, %406
  %408 = select i1 %407, i64 %406, i64 %402
  %409 = icmp ult i64 %398, %408
  br i1 %409, label %353, label %338

410:                                              ; preds = %299, %309, %338
  %411 = phi float [ %352, %338 ], [ 0.000000e+00, %309 ], [ 0.000000e+00, %299 ]
  store float %411, float* %9, align 4
  %412 = load float*, float** %36, align 8
  %413 = getelementptr inbounds float, float* %412, i64 %300
  %414 = load float, float* %413, align 4
  %415 = fcmp olt float %414, %411
  %416 = select i1 %415, float* %413, float* %9
  %417 = bitcast float* %416 to i32*
  %418 = load i32, i32* %417, align 4
  %419 = bitcast float* %413 to i32*
  store i32 %418, i32* %419, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %149)
  %420 = load i32*, i32** %146, align 8
  %421 = getelementptr inbounds i32, i32* %420, i64 %300
  %422 = load i32, i32* %421, align 4
  %423 = zext i32 %422 to i64
  %424 = icmp eq i64 %423, %2
  br i1 %424, label %425, label %433

425:                                              ; preds = %410
  %426 = load float*, float** %36, align 8
  %427 = getelementptr inbounds float, float* %426, i64 %300
  %428 = load float, float* %427, align 4
  %429 = getelementptr inbounds float, float* %426, i64 %301
  %430 = load float, float* %429, align 4
  %431 = fcmp ogt float %428, %430
  br i1 %431, label %432, label %433

432:                                              ; preds = %425
  br label %433

433:                                              ; preds = %410, %425, %432
  %434 = phi i64 [ %301, %410 ], [ %300, %432 ], [ %301, %425 ]
  %435 = add nuw i64 %300, 1
  %436 = icmp eq i64 %435, %1
  br i1 %436, label %294, label %299

437:                                              ; preds = %230, %294
  br i1 %10, label %438, label %446

438:                                              ; preds = %837, %437
  %439 = load float*, float** %36, align 8
  %440 = icmp eq float* %439, null
  br i1 %440, label %445, label %441

441:                                              ; preds = %438
  %442 = ptrtoint float* %439 to i64
  %443 = bitcast float** %37 to i64*
  store i64 %442, i64* %443, align 8
  %444 = bitcast float* %439 to i8*
  call void @_ZdlPv(i8* %444) #12
  br label %445

445:                                              ; preds = %438, %441
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %35) #13
  ret void

446:                                              ; preds = %437, %837
  %447 = phi i64 [ %838, %837 ], [ 0, %437 ]
  %448 = load i32*, i32** %146, align 8
  %449 = getelementptr inbounds i32, i32* %448, i64 %447
  %450 = load i32, i32* %449, align 4
  %451 = zext i32 %450 to i64
  %452 = icmp eq i64 %451, %2
  br i1 %452, label %453, label %837

453:                                              ; preds = %446
  %454 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %147, align 8
  %455 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %454, i64 %447
  %456 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %16, align 8
  %457 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %454, i64 %447, i32 1
  %458 = load i64, i64* %457, align 8
  %459 = icmp eq i64 %458, 0
  %460 = ptrtoint %"struct.jxl::Histogram"* %456 to i64
  br i1 %459, label %566, label %461

461:                                              ; preds = %453
  %462 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %456, i64 0, i32 1
  %463 = load i64, i64* %462, align 8
  %464 = icmp eq i64 %463, 0
  br i1 %464, label %566, label %465

465:                                              ; preds = %461
  %466 = add i64 %463, %458
  %467 = uitofp i64 %466 to float
  %468 = fdiv float 1.000000e+00, %467
  %469 = insertelement <8 x float> undef, float %468, i32 0
  %470 = shufflevector <8 x float> %469, <8 x float> undef, <8 x i32> zeroinitializer
  %471 = insertelement <8 x float> undef, float %467, i32 0
  %472 = shufflevector <8 x float> %471, <8 x float> undef, <8 x i32> zeroinitializer
  %473 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %454, i64 %447, i32 0, i32 0, i32 1
  %474 = bitcast i32** %473 to i64*
  %475 = load i64, i64* %474, align 8
  %476 = bitcast %"struct.jxl::Histogram"* %455 to i64*
  %477 = load i64, i64* %476, align 8
  %478 = sub i64 %475, %477
  %479 = ashr exact i64 %478, 2
  %480 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %456, i64 0, i32 0, i32 0, i32 1
  %481 = bitcast i32** %480 to i64*
  %482 = load i64, i64* %481, align 8
  %483 = bitcast %"struct.jxl::Histogram"* %456 to i64*
  %484 = load i64, i64* %483, align 8
  %485 = sub i64 %482, %484
  %486 = ashr exact i64 %485, 2
  %487 = icmp ult i64 %479, %486
  %488 = select i1 %487, i64 %486, i64 %479
  %489 = icmp eq i64 %488, 0
  br i1 %489, label %492, label %509

490:                                              ; preds = %530
  %491 = load i64, i64* %145, align 8
  br label %492

492:                                              ; preds = %490, %465
  %493 = phi i64 [ %460, %465 ], [ %491, %490 ]
  %494 = phi <8 x float> [ zeroinitializer, %465 ], [ %553, %490 ]
  %495 = shufflevector <8 x float> %494, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %496 = fadd <8 x float> %494, %495
  %497 = shufflevector <8 x float> %496, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %498 = fadd <8 x float> %496, %497
  %499 = shufflevector <8 x float> %498, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %500 = fadd <8 x float> %498, %499
  %501 = extractelement <8 x float> %500, i32 0
  %502 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %454, i64 %447, i32 2
  %503 = load float, float* %502, align 8
  %504 = fsub float %501, %503
  %505 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %456, i64 0, i32 2
  %506 = load float, float* %505, align 8
  %507 = fsub float %504, %506
  %508 = inttoptr i64 %493 to %"struct.jxl::Histogram"*
  br label %566

509:                                              ; preds = %465, %530
  %510 = phi i64 [ %560, %530 ], [ %484, %465 ]
  %511 = phi i64 [ %556, %530 ], [ %477, %465 ]
  %512 = phi i64 [ %562, %530 ], [ %486, %465 ]
  %513 = phi i64 [ %558, %530 ], [ %479, %465 ]
  %514 = phi i64 [ %554, %530 ], [ 0, %465 ]
  %515 = phi <8 x float> [ %553, %530 ], [ zeroinitializer, %465 ]
  %516 = inttoptr i64 %510 to i32*
  %517 = icmp ugt i64 %513, %514
  br i1 %517, label %518, label %523

518:                                              ; preds = %509
  %519 = inttoptr i64 %511 to i32*
  %520 = getelementptr inbounds i32, i32* %519, i64 %514
  %521 = bitcast i32* %520 to <8 x i32>*
  %522 = load <8 x i32>, <8 x i32>* %521, align 1, !alias.scope !74, !noalias !77
  br label %523

523:                                              ; preds = %518, %509
  %524 = phi <8 x i32> [ %522, %518 ], [ zeroinitializer, %509 ]
  %525 = icmp ugt i64 %512, %514
  br i1 %525, label %526, label %530

526:                                              ; preds = %523
  %527 = getelementptr inbounds i32, i32* %516, i64 %514
  %528 = bitcast i32* %527 to <8 x i32>*
  %529 = load <8 x i32>, <8 x i32>* %528, align 1, !alias.scope !79, !noalias !82
  br label %530

530:                                              ; preds = %526, %523
  %531 = phi <8 x i32> [ %529, %526 ], [ zeroinitializer, %523 ]
  %532 = add <8 x i32> %531, %524
  %533 = sitofp <8 x i32> %532 to <8 x float>
  %534 = fcmp une <8 x float> %472, %533
  %535 = fmul <8 x float> %470, %533
  %536 = bitcast <8 x float> %535 to <8 x i32>
  %537 = add <8 x i32> %536, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %538 = ashr <8 x i32> %537, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %539 = and <8 x i32> %537, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %540 = sub <8 x i32> %536, %539
  %541 = bitcast <8 x i32> %540 to <8 x float>
  %542 = sitofp <8 x i32> %538 to <8 x float>
  %543 = fadd <8 x float> %541, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %544 = call <8 x float> @llvm.fma.v8f32(<8 x float> %543, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #13
  %545 = call <8 x float> @llvm.fma.v8f32(<8 x float> %543, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #13
  fence acq_rel
  %546 = call <8 x float> @llvm.fma.v8f32(<8 x float> %544, <8 x float> %543, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #13
  %547 = call <8 x float> @llvm.fma.v8f32(<8 x float> %545, <8 x float> %543, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #13
  fence acq_rel
  %548 = fdiv <8 x float> %546, %547
  %549 = fadd <8 x float> %548, %542
  %550 = fmul <8 x float> %549, %533
  %551 = fsub <8 x float> zeroinitializer, %550
  %552 = select <8 x i1> %534, <8 x float> %551, <8 x float> zeroinitializer
  %553 = fadd <8 x float> %515, %552
  %554 = add i64 %514, 8
  %555 = load i64, i64* %474, align 8
  %556 = load i64, i64* %476, align 8
  %557 = sub i64 %555, %556
  %558 = ashr exact i64 %557, 2
  %559 = load i64, i64* %481, align 8
  %560 = load i64, i64* %483, align 8
  %561 = sub i64 %559, %560
  %562 = ashr exact i64 %561, 2
  %563 = icmp ult i64 %558, %562
  %564 = select i1 %563, i64 %562, i64 %558
  %565 = icmp ult i64 %554, %564
  br i1 %565, label %509, label %490

566:                                              ; preds = %453, %461, %492
  %567 = phi i64 [ %493, %492 ], [ %460, %461 ], [ %460, %453 ]
  %568 = phi %"struct.jxl::Histogram"* [ %508, %492 ], [ %456, %461 ], [ %456, %453 ]
  %569 = phi float [ %507, %492 ], [ 0.000000e+00, %461 ], [ 0.000000e+00, %453 ]
  %570 = load i64, i64* %144, align 8
  %571 = sub i64 %570, %567
  %572 = sdiv exact i64 %571, 40
  %573 = icmp ugt i64 %572, 1
  br i1 %573, label %699, label %574

574:                                              ; preds = %822, %566
  %575 = phi %"struct.jxl::Histogram"* [ %568, %566 ], [ %825, %822 ]
  %576 = phi i64 [ 0, %566 ], [ %830, %822 ]
  %577 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %575, i64 %576
  %578 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %147, align 8
  %579 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %578, i64 %447
  %580 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %578, i64 %447, i32 0, i32 0, i32 1
  %581 = bitcast i32** %580 to i64*
  %582 = load i64, i64* %581, align 8
  %583 = bitcast %"struct.jxl::Histogram"* %579 to i64*
  %584 = load i64, i64* %583, align 8
  %585 = sub i64 %582, %584
  %586 = ashr exact i64 %585, 2
  %587 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %575, i64 %576, i32 0, i32 0, i32 1
  %588 = bitcast i32** %587 to i64*
  %589 = load i64, i64* %588, align 8
  %590 = bitcast %"struct.jxl::Histogram"* %577 to i64*
  %591 = load i64, i64* %590, align 8
  %592 = sub i64 %589, %591
  %593 = ashr exact i64 %592, 2
  %594 = icmp ugt i64 %586, %593
  br i1 %594, label %595, label %600

595:                                              ; preds = %574
  %596 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %577, i64 0, i32 0
  %597 = sub nsw i64 %586, %593
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector"* %596, i64 %597) #13
  %598 = load i64, i64* %581, align 8
  %599 = load i64, i64* %583, align 8
  br label %600

600:                                              ; preds = %595, %574
  %601 = phi i64 [ %599, %595 ], [ %584, %574 ]
  %602 = phi i64 [ %598, %595 ], [ %582, %574 ]
  %603 = icmp eq i64 %602, %601
  br i1 %603, label %622, label %604

604:                                              ; preds = %600
  %605 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %577, i64 0, i32 0, i32 0, i32 0
  br label %606

606:                                              ; preds = %606, %604
  %607 = phi i64 [ %601, %604 ], [ %618, %606 ]
  %608 = phi i64 [ 0, %604 ], [ %616, %606 ]
  %609 = inttoptr i64 %607 to i32*
  %610 = getelementptr inbounds i32, i32* %609, i64 %608
  %611 = load i32, i32* %610, align 4
  %612 = load i32*, i32** %605, align 8
  %613 = getelementptr inbounds i32, i32* %612, i64 %608
  %614 = load i32, i32* %613, align 4
  %615 = add nsw i32 %614, %611
  store i32 %615, i32* %613, align 4
  %616 = add nuw i64 %608, 1
  %617 = load i64, i64* %581, align 8
  %618 = load i64, i64* %583, align 8
  %619 = sub i64 %617, %618
  %620 = ashr exact i64 %619, 2
  %621 = icmp ult i64 %616, %620
  br i1 %621, label %606, label %622

622:                                              ; preds = %606, %600
  %623 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %578, i64 %447, i32 1
  %624 = load i64, i64* %623, align 8
  %625 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %575, i64 %576, i32 1
  %626 = load i64, i64* %625, align 8
  %627 = add i64 %626, %624
  store i64 %627, i64* %625, align 8
  %628 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %16, align 8
  %629 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %628, i64 %576, i32 2
  store float 0.000000e+00, float* %629, align 8
  %630 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %628, i64 %576, i32 1
  %631 = load i64, i64* %630, align 8
  %632 = icmp eq i64 %631, 0
  br i1 %632, label %695, label %633

633:                                              ; preds = %622
  %634 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %628, i64 %576
  %635 = uitofp i64 %631 to float
  %636 = fdiv float 1.000000e+00, %635
  %637 = insertelement <8 x float> undef, float %636, i32 0
  %638 = shufflevector <8 x float> %637, <8 x float> undef, <8 x i32> zeroinitializer
  %639 = insertelement <8 x float> undef, float %635, i32 0
  %640 = shufflevector <8 x float> %639, <8 x float> undef, <8 x i32> zeroinitializer
  %641 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %628, i64 %576, i32 0, i32 0, i32 1
  %642 = bitcast i32** %641 to i64*
  %643 = load i64, i64* %642, align 8
  %644 = bitcast %"struct.jxl::Histogram"* %634 to i64*
  %645 = load i64, i64* %644, align 8
  %646 = icmp eq i64 %643, %645
  br i1 %646, label %649, label %660

647:                                              ; preds = %660
  %648 = load float, float* %629, align 8
  br label %649

649:                                              ; preds = %647, %633
  %650 = phi float [ 0.000000e+00, %633 ], [ %648, %647 ]
  %651 = phi <8 x float> [ zeroinitializer, %633 ], [ %688, %647 ]
  %652 = shufflevector <8 x float> %651, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %653 = fadd <8 x float> %651, %652
  %654 = shufflevector <8 x float> %653, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %655 = fadd <8 x float> %653, %654
  %656 = shufflevector <8 x float> %655, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %657 = fadd <8 x float> %655, %656
  %658 = extractelement <8 x float> %657, i32 0
  %659 = fadd float %650, %658
  store float %659, float* %629, align 8
  br label %695

660:                                              ; preds = %633, %660
  %661 = phi i64 [ %691, %660 ], [ %645, %633 ]
  %662 = phi i64 [ %689, %660 ], [ 0, %633 ]
  %663 = phi <8 x float> [ %688, %660 ], [ zeroinitializer, %633 ]
  %664 = inttoptr i64 %661 to i32*
  %665 = getelementptr inbounds i32, i32* %664, i64 %662
  %666 = bitcast i32* %665 to <8 x i32>*
  %667 = load <8 x i32>, <8 x i32>* %666, align 1, !alias.scope !84, !noalias !87
  %668 = sitofp <8 x i32> %667 to <8 x float>
  %669 = fcmp une <8 x float> %640, %668
  %670 = fmul <8 x float> %638, %668
  %671 = bitcast <8 x float> %670 to <8 x i32>
  %672 = add <8 x i32> %671, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %673 = ashr <8 x i32> %672, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %674 = and <8 x i32> %672, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %675 = sub <8 x i32> %671, %674
  %676 = bitcast <8 x i32> %675 to <8 x float>
  %677 = sitofp <8 x i32> %673 to <8 x float>
  %678 = fadd <8 x float> %676, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %679 = call <8 x float> @llvm.fma.v8f32(<8 x float> %678, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #13
  %680 = call <8 x float> @llvm.fma.v8f32(<8 x float> %678, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #13
  fence acq_rel
  %681 = call <8 x float> @llvm.fma.v8f32(<8 x float> %679, <8 x float> %678, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #13
  %682 = call <8 x float> @llvm.fma.v8f32(<8 x float> %680, <8 x float> %678, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #13
  fence acq_rel
  %683 = fdiv <8 x float> %681, %682
  %684 = fadd <8 x float> %683, %677
  %685 = fmul <8 x float> %684, %668
  %686 = fsub <8 x float> zeroinitializer, %685
  %687 = select <8 x i1> %669, <8 x float> %686, <8 x float> zeroinitializer
  %688 = fadd <8 x float> %663, %687
  %689 = add i64 %662, 8
  %690 = load i64, i64* %642, align 8
  %691 = load i64, i64* %644, align 8
  %692 = sub i64 %690, %691
  %693 = ashr exact i64 %692, 2
  %694 = icmp ult i64 %689, %693
  br i1 %694, label %660, label %647

695:                                              ; preds = %622, %649
  %696 = trunc i64 %576 to i32
  %697 = load i32*, i32** %146, align 8
  %698 = getelementptr inbounds i32, i32* %697, i64 %447
  store i32 %696, i32* %698, align 4
  br label %837

699:                                              ; preds = %566, %822
  %700 = phi i64 [ %823, %822 ], [ %567, %566 ]
  %701 = phi i64 [ %824, %822 ], [ %570, %566 ]
  %702 = phi %"struct.jxl::Histogram"* [ %825, %822 ], [ %568, %566 ]
  %703 = phi i64 [ %826, %822 ], [ %567, %566 ]
  %704 = phi i64 [ %827, %822 ], [ %570, %566 ]
  %705 = phi %"struct.jxl::Histogram"* [ %836, %822 ], [ %568, %566 ]
  %706 = phi i64 [ %832, %822 ], [ 1, %566 ]
  %707 = phi float [ %831, %822 ], [ %569, %566 ]
  %708 = phi i64 [ %830, %822 ], [ 0, %566 ]
  %709 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %147, align 8
  %710 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %709, i64 %447
  %711 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %705, i64 %706
  %712 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %709, i64 %447, i32 1
  %713 = load i64, i64* %712, align 8
  %714 = icmp eq i64 %713, 0
  br i1 %714, label %822, label %715

715:                                              ; preds = %699
  %716 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %705, i64 %706, i32 1
  %717 = load i64, i64* %716, align 8
  %718 = icmp eq i64 %717, 0
  br i1 %718, label %822, label %719

719:                                              ; preds = %715
  %720 = add i64 %717, %713
  %721 = uitofp i64 %720 to float
  %722 = fdiv float 1.000000e+00, %721
  %723 = insertelement <8 x float> undef, float %722, i32 0
  %724 = shufflevector <8 x float> %723, <8 x float> undef, <8 x i32> zeroinitializer
  %725 = insertelement <8 x float> undef, float %721, i32 0
  %726 = shufflevector <8 x float> %725, <8 x float> undef, <8 x i32> zeroinitializer
  %727 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %709, i64 %447, i32 0, i32 0, i32 1
  %728 = bitcast i32** %727 to i64*
  %729 = load i64, i64* %728, align 8
  %730 = bitcast %"struct.jxl::Histogram"* %710 to i64*
  %731 = load i64, i64* %730, align 8
  %732 = sub i64 %729, %731
  %733 = ashr exact i64 %732, 2
  %734 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %705, i64 %706, i32 0, i32 0, i32 1
  %735 = bitcast i32** %734 to i64*
  %736 = load i64, i64* %735, align 8
  %737 = bitcast %"struct.jxl::Histogram"* %711 to i64*
  %738 = load i64, i64* %737, align 8
  %739 = sub i64 %736, %738
  %740 = ashr exact i64 %739, 2
  %741 = icmp ult i64 %733, %740
  %742 = select i1 %741, i64 %740, i64 %733
  %743 = icmp eq i64 %742, 0
  br i1 %743, label %747, label %765

744:                                              ; preds = %786
  %745 = load i64, i64* %144, align 8
  %746 = load i64, i64* %145, align 8
  br label %747

747:                                              ; preds = %744, %719
  %748 = phi i64 [ %700, %719 ], [ %746, %744 ]
  %749 = phi i64 [ %701, %719 ], [ %745, %744 ]
  %750 = phi <8 x float> [ zeroinitializer, %719 ], [ %809, %744 ]
  %751 = shufflevector <8 x float> %750, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %752 = fadd <8 x float> %750, %751
  %753 = shufflevector <8 x float> %752, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %754 = fadd <8 x float> %752, %753
  %755 = shufflevector <8 x float> %754, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %756 = fadd <8 x float> %754, %755
  %757 = extractelement <8 x float> %756, i32 0
  %758 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %709, i64 %447, i32 2
  %759 = load float, float* %758, align 8
  %760 = fsub float %757, %759
  %761 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %705, i64 %706, i32 2
  %762 = load float, float* %761, align 8
  %763 = fsub float %760, %762
  %764 = inttoptr i64 %748 to %"struct.jxl::Histogram"*
  br label %822

765:                                              ; preds = %719, %786
  %766 = phi i64 [ %816, %786 ], [ %738, %719 ]
  %767 = phi i64 [ %812, %786 ], [ %731, %719 ]
  %768 = phi i64 [ %818, %786 ], [ %740, %719 ]
  %769 = phi i64 [ %814, %786 ], [ %733, %719 ]
  %770 = phi i64 [ %810, %786 ], [ 0, %719 ]
  %771 = phi <8 x float> [ %809, %786 ], [ zeroinitializer, %719 ]
  %772 = inttoptr i64 %766 to i32*
  %773 = icmp ugt i64 %769, %770
  br i1 %773, label %774, label %779

774:                                              ; preds = %765
  %775 = inttoptr i64 %767 to i32*
  %776 = getelementptr inbounds i32, i32* %775, i64 %770
  %777 = bitcast i32* %776 to <8 x i32>*
  %778 = load <8 x i32>, <8 x i32>* %777, align 1, !alias.scope !89, !noalias !92
  br label %779

779:                                              ; preds = %774, %765
  %780 = phi <8 x i32> [ %778, %774 ], [ zeroinitializer, %765 ]
  %781 = icmp ugt i64 %768, %770
  br i1 %781, label %782, label %786

782:                                              ; preds = %779
  %783 = getelementptr inbounds i32, i32* %772, i64 %770
  %784 = bitcast i32* %783 to <8 x i32>*
  %785 = load <8 x i32>, <8 x i32>* %784, align 1, !alias.scope !94, !noalias !97
  br label %786

786:                                              ; preds = %782, %779
  %787 = phi <8 x i32> [ %785, %782 ], [ zeroinitializer, %779 ]
  %788 = add <8 x i32> %787, %780
  %789 = sitofp <8 x i32> %788 to <8 x float>
  %790 = fcmp une <8 x float> %726, %789
  %791 = fmul <8 x float> %724, %789
  %792 = bitcast <8 x float> %791 to <8 x i32>
  %793 = add <8 x i32> %792, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %794 = ashr <8 x i32> %793, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %795 = and <8 x i32> %793, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %796 = sub <8 x i32> %792, %795
  %797 = bitcast <8 x i32> %796 to <8 x float>
  %798 = sitofp <8 x i32> %794 to <8 x float>
  %799 = fadd <8 x float> %797, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %800 = call <8 x float> @llvm.fma.v8f32(<8 x float> %799, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #13
  %801 = call <8 x float> @llvm.fma.v8f32(<8 x float> %799, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #13
  fence acq_rel
  %802 = call <8 x float> @llvm.fma.v8f32(<8 x float> %800, <8 x float> %799, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #13
  %803 = call <8 x float> @llvm.fma.v8f32(<8 x float> %801, <8 x float> %799, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #13
  fence acq_rel
  %804 = fdiv <8 x float> %802, %803
  %805 = fadd <8 x float> %804, %798
  %806 = fmul <8 x float> %805, %789
  %807 = fsub <8 x float> zeroinitializer, %806
  %808 = select <8 x i1> %790, <8 x float> %807, <8 x float> zeroinitializer
  %809 = fadd <8 x float> %771, %808
  %810 = add i64 %770, 8
  %811 = load i64, i64* %728, align 8
  %812 = load i64, i64* %730, align 8
  %813 = sub i64 %811, %812
  %814 = ashr exact i64 %813, 2
  %815 = load i64, i64* %735, align 8
  %816 = load i64, i64* %737, align 8
  %817 = sub i64 %815, %816
  %818 = ashr exact i64 %817, 2
  %819 = icmp ult i64 %814, %818
  %820 = select i1 %819, i64 %818, i64 %814
  %821 = icmp ult i64 %810, %820
  br i1 %821, label %765, label %744

822:                                              ; preds = %699, %715, %747
  %823 = phi i64 [ %748, %747 ], [ %700, %715 ], [ %700, %699 ]
  %824 = phi i64 [ %749, %747 ], [ %701, %715 ], [ %701, %699 ]
  %825 = phi %"struct.jxl::Histogram"* [ %764, %747 ], [ %702, %715 ], [ %702, %699 ]
  %826 = phi i64 [ %748, %747 ], [ %703, %715 ], [ %703, %699 ]
  %827 = phi i64 [ %749, %747 ], [ %704, %715 ], [ %704, %699 ]
  %828 = phi float [ %763, %747 ], [ 0.000000e+00, %715 ], [ 0.000000e+00, %699 ]
  %829 = fcmp olt float %828, %707
  %830 = select i1 %829, i64 %706, i64 %708
  %831 = select i1 %829, float %828, float %707
  %832 = add nuw i64 %706, 1
  %833 = sub i64 %827, %826
  %834 = sdiv exact i64 %833, 40
  %835 = icmp ult i64 %832, %834
  %836 = inttoptr i64 %826 to %"struct.jxl::Histogram"*
  br i1 %835, label %699, label %574

837:                                              ; preds = %446, %695
  %838 = add nuw i64 %447, 1
  %839 = icmp eq i64 %838, %1
  br i1 %839, label %438, label %446
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX316HistogramEntropyERKNS_9HistogramE(%"struct.jxl::Histogram"* nocapture dereferenceable(40)) #4 {
  %2 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 2
  store float 0.000000e+00, float* %2, align 8
  %3 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %67, label %6

6:                                                ; preds = %1
  %7 = uitofp i64 %4 to float
  %8 = fdiv float 1.000000e+00, %7
  %9 = insertelement <8 x float> undef, float %8, i32 0
  %10 = shufflevector <8 x float> %9, <8 x float> undef, <8 x i32> zeroinitializer
  %11 = insertelement <8 x float> undef, float %7, i32 0
  %12 = shufflevector <8 x float> %11, <8 x float> undef, <8 x i32> zeroinitializer
  %13 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 0, i32 0, i32 1
  %14 = bitcast i32** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = bitcast %"struct.jxl::Histogram"* %0 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %15, %17
  br i1 %18, label %21, label %32

19:                                               ; preds = %32
  %20 = load float, float* %2, align 8
  br label %21

21:                                               ; preds = %19, %6
  %22 = phi float [ 0.000000e+00, %6 ], [ %20, %19 ]
  %23 = phi <8 x float> [ zeroinitializer, %6 ], [ %60, %19 ]
  %24 = shufflevector <8 x float> %23, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %25 = fadd <8 x float> %23, %24
  %26 = shufflevector <8 x float> %25, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %27 = fadd <8 x float> %25, %26
  %28 = shufflevector <8 x float> %27, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %29 = fadd <8 x float> %27, %28
  %30 = extractelement <8 x float> %29, i32 0
  %31 = fadd float %30, %22
  store float %31, float* %2, align 8
  br label %67

32:                                               ; preds = %6, %32
  %33 = phi i64 [ %63, %32 ], [ %17, %6 ]
  %34 = phi i64 [ %61, %32 ], [ 0, %6 ]
  %35 = phi <8 x float> [ %60, %32 ], [ zeroinitializer, %6 ]
  %36 = inttoptr i64 %33 to i32*
  %37 = getelementptr inbounds i32, i32* %36, i64 %34
  %38 = bitcast i32* %37 to <8 x i32>*
  %39 = load <8 x i32>, <8 x i32>* %38, align 1, !alias.scope !99, !noalias !102
  %40 = sitofp <8 x i32> %39 to <8 x float>
  %41 = fcmp une <8 x float> %12, %40
  %42 = fmul <8 x float> %10, %40
  %43 = bitcast <8 x float> %42 to <8 x i32>
  %44 = add <8 x i32> %43, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %45 = ashr <8 x i32> %44, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %46 = and <8 x i32> %44, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %47 = sub <8 x i32> %43, %46
  %48 = bitcast <8 x i32> %47 to <8 x float>
  %49 = sitofp <8 x i32> %45 to <8 x float>
  %50 = fadd <8 x float> %48, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %51 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %50, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #13
  %52 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %50, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #13
  fence acq_rel
  %53 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %51, <8 x float> %50, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #13
  %54 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %52, <8 x float> %50, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #13
  fence acq_rel
  %55 = fdiv <8 x float> %53, %54
  %56 = fadd <8 x float> %55, %49
  %57 = fmul <8 x float> %56, %40
  %58 = fsub <8 x float> zeroinitializer, %57
  %59 = select <8 x i1> %41, <8 x float> %58, <8 x float> zeroinitializer
  %60 = fadd <8 x float> %35, %59
  %61 = add i64 %34, 8
  %62 = load i64, i64* %14, align 8
  %63 = load i64, i64* %16, align 8
  %64 = sub i64 %62, %63
  %65 = ashr exact i64 %64, 2
  %66 = icmp ult i64 %61, %65
  br i1 %66, label %32, label %19

67:                                               ; preds = %1, %21
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN3jxl6N_AVX317HistogramDistanceERKNS_9HistogramES3_(%"struct.jxl::Histogram"* nocapture readonly dereferenceable(40), %"struct.jxl::Histogram"* nocapture readonly dereferenceable(40)) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %107, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %107, label %10

10:                                               ; preds = %6
  %11 = add i64 %8, %4
  %12 = uitofp i64 %11 to float
  %13 = fdiv float 1.000000e+00, %12
  %14 = insertelement <8 x float> undef, float %13, i32 0
  %15 = shufflevector <8 x float> %14, <8 x float> undef, <8 x i32> zeroinitializer
  %16 = insertelement <8 x float> undef, float %12, i32 0
  %17 = shufflevector <8 x float> %16, <8 x float> undef, <8 x i32> zeroinitializer
  %18 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 0, i32 0, i32 1
  %19 = bitcast i32** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = bitcast %"struct.jxl::Histogram"* %0 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %20, %22
  %24 = ashr exact i64 %23, 2
  %25 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1, i64 0, i32 0, i32 0, i32 1
  %26 = bitcast i32** %25 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = bitcast %"struct.jxl::Histogram"* %1 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %27, %29
  %31 = ashr exact i64 %30, 2
  %32 = icmp ult i64 %24, %31
  %33 = select i1 %32, i64 %31, i64 %24
  %34 = icmp eq i64 %33, 0
  br i1 %34, label %35, label %50

35:                                               ; preds = %71, %10
  %36 = phi <8 x float> [ zeroinitializer, %10 ], [ %94, %71 ]
  %37 = shufflevector <8 x float> %36, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %38 = fadd <8 x float> %36, %37
  %39 = shufflevector <8 x float> %38, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %40 = fadd <8 x float> %38, %39
  %41 = shufflevector <8 x float> %40, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %42 = fadd <8 x float> %40, %41
  %43 = extractelement <8 x float> %42, i32 0
  %44 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 2
  %45 = load float, float* %44, align 8
  %46 = fsub float %43, %45
  %47 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1, i64 0, i32 2
  %48 = load float, float* %47, align 8
  %49 = fsub float %46, %48
  br label %107

50:                                               ; preds = %10, %71
  %51 = phi i64 [ %101, %71 ], [ %29, %10 ]
  %52 = phi i64 [ %97, %71 ], [ %22, %10 ]
  %53 = phi i64 [ %103, %71 ], [ %31, %10 ]
  %54 = phi i64 [ %99, %71 ], [ %24, %10 ]
  %55 = phi i64 [ %95, %71 ], [ 0, %10 ]
  %56 = phi <8 x float> [ %94, %71 ], [ zeroinitializer, %10 ]
  %57 = inttoptr i64 %51 to i32*
  %58 = icmp ugt i64 %54, %55
  br i1 %58, label %59, label %64

59:                                               ; preds = %50
  %60 = inttoptr i64 %52 to i32*
  %61 = getelementptr inbounds i32, i32* %60, i64 %55
  %62 = bitcast i32* %61 to <8 x i32>*
  %63 = load <8 x i32>, <8 x i32>* %62, align 1, !alias.scope !104, !noalias !107
  br label %64

64:                                               ; preds = %50, %59
  %65 = phi <8 x i32> [ %63, %59 ], [ zeroinitializer, %50 ]
  %66 = icmp ugt i64 %53, %55
  br i1 %66, label %67, label %71

67:                                               ; preds = %64
  %68 = getelementptr inbounds i32, i32* %57, i64 %55
  %69 = bitcast i32* %68 to <8 x i32>*
  %70 = load <8 x i32>, <8 x i32>* %69, align 1, !alias.scope !109, !noalias !112
  br label %71

71:                                               ; preds = %64, %67
  %72 = phi <8 x i32> [ %70, %67 ], [ zeroinitializer, %64 ]
  %73 = add <8 x i32> %72, %65
  %74 = sitofp <8 x i32> %73 to <8 x float>
  %75 = fcmp une <8 x float> %17, %74
  %76 = fmul <8 x float> %15, %74
  %77 = bitcast <8 x float> %76 to <8 x i32>
  %78 = add <8 x i32> %77, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %79 = ashr <8 x i32> %78, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %80 = and <8 x i32> %78, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %81 = sub <8 x i32> %77, %80
  %82 = bitcast <8 x i32> %81 to <8 x float>
  %83 = sitofp <8 x i32> %79 to <8 x float>
  %84 = fadd <8 x float> %82, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %85 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %84, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #13
  %86 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %84, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #13
  fence acq_rel
  %87 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %85, <8 x float> %84, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #13
  %88 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %86, <8 x float> %84, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #13
  fence acq_rel
  %89 = fdiv <8 x float> %87, %88
  %90 = fadd <8 x float> %89, %83
  %91 = fmul <8 x float> %90, %74
  %92 = fsub <8 x float> zeroinitializer, %91
  %93 = select <8 x i1> %75, <8 x float> %92, <8 x float> zeroinitializer
  %94 = fadd <8 x float> %56, %93
  %95 = add i64 %55, 8
  %96 = load i64, i64* %19, align 8
  %97 = load i64, i64* %21, align 8
  %98 = sub i64 %96, %97
  %99 = ashr exact i64 %98, 2
  %100 = load i64, i64* %26, align 8
  %101 = load i64, i64* %28, align 8
  %102 = sub i64 %100, %101
  %103 = ashr exact i64 %102, 2
  %104 = icmp ult i64 %99, %103
  %105 = select i1 %104, i64 %103, i64 %99
  %106 = icmp ult i64 %95, %105
  br i1 %106, label %50, label %35

107:                                              ; preds = %2, %6, %35
  %108 = phi float [ %49, %35 ], [ 0.000000e+00, %6 ], [ 0.000000e+00, %2 ]
  ret float %108
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl6N_AVX321FastClusterHistogramsERKNSt3__16vectorINS_9HistogramENS1_9allocatorIS3_EEEEmmfPS6_PNS2_IjNS4_IjEEEE(%"class.std::__1::vector.4"* nocapture readonly dereferenceable(24), i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*) #4 {
  %7 = alloca %"class.std::__1::vector.18", align 8
  %8 = alloca i32, align 4
  %9 = alloca float, align 4
  %10 = icmp eq i64 %1, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 0
  %13 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %12, align 8
  br label %150

14:                                               ; preds = %220, %6
  %15 = phi i64 [ 0, %6 ], [ %227, %220 ]
  %16 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %4, i64 0, i32 0, i32 0
  %17 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %4, i64 0, i32 0, i32 1
  %19 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %18, align 8
  %20 = icmp eq %"struct.jxl::Histogram"* %19, %17
  br i1 %20, label %34, label %21

21:                                               ; preds = %14, %32
  %22 = phi %"struct.jxl::Histogram"* [ %23, %32 ], [ %19, %14 ]
  %23 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %22, i64 -1
  %24 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %23, i64 0, i32 0, i32 0, i32 0
  %25 = load i32*, i32** %24, align 8
  %26 = icmp eq i32* %25, null
  br i1 %26, label %32, label %27

27:                                               ; preds = %21
  %28 = ptrtoint i32* %25 to i64
  %29 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %22, i64 -1, i32 0, i32 0, i32 1
  %30 = bitcast i32** %29 to i64*
  store i64 %28, i64* %30, align 8
  %31 = bitcast i32* %25 to i8*
  tail call void @_ZdlPv(i8* %31) #12
  br label %32

32:                                               ; preds = %27, %21
  %33 = icmp eq %"struct.jxl::Histogram"* %23, %17
  br i1 %33, label %34, label %21

34:                                               ; preds = %32, %14
  store %"struct.jxl::Histogram"* %17, %"struct.jxl::Histogram"** %18, align 8
  tail call void @_ZNSt3__16vectorIN3jxl9HistogramENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.4"* %4, i64 %2)
  %35 = bitcast %"class.std::__1::vector.18"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %35) #13
  %36 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %7, i64 0, i32 0, i32 0
  %37 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %7, i64 0, i32 0, i32 1
  %38 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 24, i1 false) #13
  br i1 %10, label %135, label %39

39:                                               ; preds = %34
  %40 = icmp ugt i64 %1, 4611686018427387903
  br i1 %40, label %41, label %43

41:                                               ; preds = %39
  %42 = bitcast %"class.std::__1::vector.18"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %42) #14
  unreachable

43:                                               ; preds = %39
  %44 = shl i64 %1, 2
  %45 = tail call i8* @_Znwm(i64 %44) #12
  %46 = bitcast i8* %45 to float*
  %47 = bitcast float** %37 to i8**
  store i8* %45, i8** %47, align 8
  %48 = bitcast %"class.std::__1::vector.18"* %7 to i8**
  store i8* %45, i8** %48, align 8
  %49 = getelementptr inbounds float, float* %46, i64 %1
  store float* %49, float** %38, align 8
  %50 = shl nsw i64 %1, 2
  %51 = add i64 %50, -4
  %52 = lshr exact i64 %51, 2
  %53 = add nuw nsw i64 %52, 1
  %54 = icmp ult i64 %53, 64
  br i1 %54, label %125, label %55

55:                                               ; preds = %43
  %56 = and i64 %53, 9223372036854775744
  %57 = getelementptr float, float* %46, i64 %56
  %58 = add nsw i64 %56, -64
  %59 = lshr exact i64 %58, 6
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 3
  %62 = icmp ult i64 %58, 192
  br i1 %62, label %106, label %63

63:                                               ; preds = %55
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %103, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %104, %65 ]
  %68 = getelementptr float, float* %46, i64 %66
  %69 = bitcast float* %68 to <16 x i32>*
  store <16 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <16 x i32>* %69, align 4
  %70 = getelementptr float, float* %68, i64 16
  %71 = bitcast float* %70 to <16 x i32>*
  store <16 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <16 x i32>* %71, align 4
  %72 = getelementptr float, float* %68, i64 32
  %73 = bitcast float* %72 to <16 x i32>*
  store <16 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <16 x i32>* %73, align 4
  %74 = getelementptr float, float* %68, i64 48
  %75 = bitcast float* %74 to <16 x i32>*
  store <16 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <16 x i32>* %75, align 4
  %76 = or i64 %66, 64
  %77 = getelementptr float, float* %46, i64 %76
  %78 = bitcast float* %77 to <16 x i32>*
  store <16 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <16 x i32>* %78, align 4
  %79 = getelementptr float, float* %77, i64 16
  %80 = bitcast float* %79 to <16 x i32>*
  store <16 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <16 x i32>* %80, align 4
  %81 = getelementptr float, float* %77, i64 32
  %82 = bitcast float* %81 to <16 x i32>*
  store <16 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <16 x i32>* %82, align 4
  %83 = getelementptr float, float* %77, i64 48
  %84 = bitcast float* %83 to <16 x i32>*
  store <16 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <16 x i32>* %84, align 4
  %85 = or i64 %66, 128
  %86 = getelementptr float, float* %46, i64 %85
  %87 = bitcast float* %86 to <16 x i32>*
  store <16 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <16 x i32>* %87, align 4
  %88 = getelementptr float, float* %86, i64 16
  %89 = bitcast float* %88 to <16 x i32>*
  store <16 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <16 x i32>* %89, align 4
  %90 = getelementptr float, float* %86, i64 32
  %91 = bitcast float* %90 to <16 x i32>*
  store <16 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <16 x i32>* %91, align 4
  %92 = getelementptr float, float* %86, i64 48
  %93 = bitcast float* %92 to <16 x i32>*
  store <16 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <16 x i32>* %93, align 4
  %94 = or i64 %66, 192
  %95 = getelementptr float, float* %46, i64 %94
  %96 = bitcast float* %95 to <16 x i32>*
  store <16 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <16 x i32>* %96, align 4
  %97 = getelementptr float, float* %95, i64 16
  %98 = bitcast float* %97 to <16 x i32>*
  store <16 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <16 x i32>* %98, align 4
  %99 = getelementptr float, float* %95, i64 32
  %100 = bitcast float* %99 to <16 x i32>*
  store <16 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <16 x i32>* %100, align 4
  %101 = getelementptr float, float* %95, i64 48
  %102 = bitcast float* %101 to <16 x i32>*
  store <16 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <16 x i32>* %102, align 4
  %103 = add i64 %66, 256
  %104 = add i64 %67, -4
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %106, label %65, !llvm.loop !114

106:                                              ; preds = %65, %55
  %107 = phi i64 [ 0, %55 ], [ %103, %65 ]
  %108 = icmp eq i64 %61, 0
  br i1 %108, label %123, label %109

109:                                              ; preds = %106, %109
  %110 = phi i64 [ %120, %109 ], [ %107, %106 ]
  %111 = phi i64 [ %121, %109 ], [ %61, %106 ]
  %112 = getelementptr float, float* %46, i64 %110
  %113 = bitcast float* %112 to <16 x i32>*
  store <16 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <16 x i32>* %113, align 4
  %114 = getelementptr float, float* %112, i64 16
  %115 = bitcast float* %114 to <16 x i32>*
  store <16 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <16 x i32>* %115, align 4
  %116 = getelementptr float, float* %112, i64 32
  %117 = bitcast float* %116 to <16 x i32>*
  store <16 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <16 x i32>* %117, align 4
  %118 = getelementptr float, float* %112, i64 48
  %119 = bitcast float* %118 to <16 x i32>*
  store <16 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <16 x i32>* %119, align 4
  %120 = add i64 %110, 64
  %121 = add i64 %111, -1
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %109, !llvm.loop !115

123:                                              ; preds = %109, %106
  %124 = icmp eq i64 %53, %56
  br i1 %124, label %132, label %125

125:                                              ; preds = %123, %43
  %126 = phi float* [ %46, %43 ], [ %57, %123 ]
  br label %127

127:                                              ; preds = %125, %127
  %128 = phi float* [ %130, %127 ], [ %126, %125 ]
  %129 = bitcast float* %128 to i32*
  store i32 2139095039, i32* %129, align 4
  %130 = getelementptr inbounds float, float* %128, i64 1
  %131 = icmp eq float* %130, %49
  br i1 %131, label %132, label %127, !llvm.loop !116

132:                                              ; preds = %127, %123
  %133 = bitcast float** %37 to i64*
  %134 = ptrtoint float* %49 to i64
  store i64 %134, i64* %133, align 8
  br label %135

135:                                              ; preds = %34, %132
  %136 = bitcast %"class.std::__1::vector.11"* %5 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %5, i64 0, i32 0, i32 1
  %139 = bitcast i32** %138 to i64*
  store i64 %137, i64* %139, align 8
  %140 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %140) #13
  %141 = trunc i64 %2 to i32
  store i32 %141, i32* %8, align 4
  br i1 %10, label %143, label %142

142:                                              ; preds = %135
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj(%"class.std::__1::vector.11"* %5, i64 %1, i32* nonnull dereferenceable(4) %8) #13
  br label %143

143:                                              ; preds = %135, %142
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %140) #13
  %144 = bitcast %"struct.jxl::Histogram"** %18 to i64*
  %145 = bitcast %"class.std::__1::vector.4"* %4 to i64*
  %146 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %5, i64 0, i32 0, i32 0
  %147 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 0
  %148 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %149 = bitcast float* %9 to i8*
  br label %230

150:                                              ; preds = %220, %11
  %151 = phi %"struct.jxl::Histogram"* [ %13, %11 ], [ %221, %220 ]
  %152 = phi i64 [ 0, %11 ], [ %228, %220 ]
  %153 = phi i64 [ 0, %11 ], [ %227, %220 ]
  %154 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %151, i64 %152, i32 2
  store float 0.000000e+00, float* %154, align 8
  %155 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %151, i64 %152, i32 1
  %156 = load i64, i64* %155, align 8
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %220, label %158

158:                                              ; preds = %150
  %159 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %151, i64 %152
  %160 = uitofp i64 %156 to float
  %161 = fdiv float 1.000000e+00, %160
  %162 = insertelement <8 x float> undef, float %161, i32 0
  %163 = shufflevector <8 x float> %162, <8 x float> undef, <8 x i32> zeroinitializer
  %164 = insertelement <8 x float> undef, float %160, i32 0
  %165 = shufflevector <8 x float> %164, <8 x float> undef, <8 x i32> zeroinitializer
  %166 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %151, i64 %152, i32 0, i32 0, i32 1
  %167 = bitcast i32** %166 to i64*
  %168 = load i64, i64* %167, align 8
  %169 = bitcast %"struct.jxl::Histogram"* %159 to i64*
  %170 = load i64, i64* %169, align 8
  %171 = icmp eq i64 %168, %170
  br i1 %171, label %174, label %185

172:                                              ; preds = %185
  %173 = load float, float* %154, align 8
  br label %174

174:                                              ; preds = %172, %158
  %175 = phi float [ 0.000000e+00, %158 ], [ %173, %172 ]
  %176 = phi <8 x float> [ zeroinitializer, %158 ], [ %213, %172 ]
  %177 = shufflevector <8 x float> %176, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %178 = fadd <8 x float> %176, %177
  %179 = shufflevector <8 x float> %178, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %180 = fadd <8 x float> %178, %179
  %181 = shufflevector <8 x float> %180, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %182 = fadd <8 x float> %180, %181
  %183 = extractelement <8 x float> %182, i32 0
  %184 = fadd float %175, %183
  store float %184, float* %154, align 8
  br label %220

185:                                              ; preds = %158, %185
  %186 = phi i64 [ %216, %185 ], [ %170, %158 ]
  %187 = phi i64 [ %214, %185 ], [ 0, %158 ]
  %188 = phi <8 x float> [ %213, %185 ], [ zeroinitializer, %158 ]
  %189 = inttoptr i64 %186 to i32*
  %190 = getelementptr inbounds i32, i32* %189, i64 %187
  %191 = bitcast i32* %190 to <8 x i32>*
  %192 = load <8 x i32>, <8 x i32>* %191, align 1, !alias.scope !117, !noalias !120
  %193 = sitofp <8 x i32> %192 to <8 x float>
  %194 = fcmp une <8 x float> %165, %193
  %195 = fmul <8 x float> %163, %193
  %196 = bitcast <8 x float> %195 to <8 x i32>
  %197 = add <8 x i32> %196, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %198 = ashr <8 x i32> %197, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %199 = and <8 x i32> %197, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %200 = sub <8 x i32> %196, %199
  %201 = bitcast <8 x i32> %200 to <8 x float>
  %202 = sitofp <8 x i32> %198 to <8 x float>
  %203 = fadd <8 x float> %201, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %204 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %203, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #13
  %205 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %203, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #13
  fence acq_rel
  %206 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %204, <8 x float> %203, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #13
  %207 = tail call <8 x float> @llvm.fma.v8f32(<8 x float> %205, <8 x float> %203, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #13
  fence acq_rel
  %208 = fdiv <8 x float> %206, %207
  %209 = fadd <8 x float> %208, %202
  %210 = fmul <8 x float> %209, %193
  %211 = fsub <8 x float> zeroinitializer, %210
  %212 = select <8 x i1> %194, <8 x float> %211, <8 x float> zeroinitializer
  %213 = fadd <8 x float> %188, %212
  %214 = add i64 %187, 8
  %215 = load i64, i64* %167, align 8
  %216 = load i64, i64* %169, align 8
  %217 = sub i64 %215, %216
  %218 = ashr exact i64 %217, 2
  %219 = icmp ult i64 %214, %218
  br i1 %219, label %185, label %172

220:                                              ; preds = %150, %174
  %221 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %12, align 8
  %222 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %221, i64 %152, i32 1
  %223 = load i64, i64* %222, align 8
  %224 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %221, i64 %153, i32 1
  %225 = load i64, i64* %224, align 8
  %226 = icmp ugt i64 %223, %225
  %227 = select i1 %226, i64 %152, i64 %153
  %228 = add nuw i64 %152, 1
  %229 = icmp eq i64 %228, %1
  br i1 %229, label %14, label %150

230:                                              ; preds = %294, %143
  %231 = phi i64 [ %15, %143 ], [ %434, %294 ]
  %232 = load i64, i64* %144, align 8
  %233 = load i64, i64* %145, align 8
  %234 = sub i64 %232, %233
  %235 = sdiv exact i64 %234, 40
  %236 = icmp ult i64 %235, %2
  %237 = icmp ult i64 %235, %1
  %238 = and i1 %236, %237
  br i1 %238, label %239, label %437

239:                                              ; preds = %230
  %240 = trunc i64 %235 to i32
  %241 = load i32*, i32** %146, align 8
  %242 = getelementptr inbounds i32, i32* %241, i64 %231
  store i32 %240, i32* %242, align 4
  %243 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %147, align 8
  %244 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %243, i64 %231
  %245 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %18, align 8
  %246 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %148, align 8
  %247 = icmp eq %"struct.jxl::Histogram"* %245, %246
  br i1 %247, label %293, label %248

248:                                              ; preds = %239
  %249 = bitcast %"struct.jxl::Histogram"* %245 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %249, i8 0, i64 24, i1 false) #13
  %250 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %243, i64 %231, i32 0, i32 0, i32 1
  %251 = bitcast i32** %250 to i64*
  %252 = load i64, i64* %251, align 8
  %253 = bitcast %"struct.jxl::Histogram"* %244 to i64*
  %254 = load i64, i64* %253, align 8
  %255 = sub i64 %252, %254
  %256 = ashr exact i64 %255, 2
  %257 = icmp eq i64 %255, 0
  br i1 %257, label %285, label %258

258:                                              ; preds = %248
  %259 = icmp ugt i64 %256, 4611686018427387903
  br i1 %259, label %260, label %262

260:                                              ; preds = %258
  %261 = bitcast %"struct.jxl::Histogram"* %245 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %261) #14
  unreachable

262:                                              ; preds = %258
  %263 = call i8* @_Znwm(i64 %255) #12
  %264 = bitcast i8* %263 to i32*
  %265 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %245, i64 0, i32 0, i32 0, i32 1
  %266 = bitcast i32** %265 to i8**
  store i8* %263, i8** %266, align 8
  %267 = bitcast %"struct.jxl::Histogram"* %245 to i8**
  store i8* %263, i8** %267, align 8
  %268 = getelementptr inbounds i32, i32* %264, i64 %256
  %269 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %245, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store i32* %268, i32** %269, align 8
  %270 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %244, i64 0, i32 0, i32 0, i32 0
  %271 = load i32*, i32** %270, align 8
  %272 = load i64, i64* %251, align 8
  %273 = bitcast i32** %265 to i64*
  %274 = ptrtoint i8* %263 to i64
  %275 = ptrtoint i32* %271 to i64
  %276 = sub i64 %272, %275
  %277 = icmp sgt i64 %276, 0
  br i1 %277, label %278, label %283

278:                                              ; preds = %262
  %279 = lshr exact i64 %276, 2
  %280 = bitcast i32* %271 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %263, i8* align 4 %280, i64 %276, i1 false) #13
  %281 = getelementptr inbounds i32, i32* %264, i64 %279
  %282 = ptrtoint i32* %281 to i64
  br label %283

283:                                              ; preds = %278, %262
  %284 = phi i64 [ %282, %278 ], [ %274, %262 ]
  store i64 %284, i64* %273, align 8
  br label %285

285:                                              ; preds = %283, %248
  %286 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %245, i64 0, i32 1
  %287 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %243, i64 %231, i32 1
  %288 = bitcast i64* %286 to i8*
  %289 = bitcast i64* %287 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %288, i8* align 8 %289, i64 12, i1 false) #13
  %290 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %245, i64 1
  %291 = ptrtoint %"struct.jxl::Histogram"* %290 to i64
  store i64 %291, i64* %144, align 8
  br label %292

292:                                              ; preds = %293, %285
  br label %299

293:                                              ; preds = %239
  call void @_ZNSt3__16vectorIN3jxl9HistogramENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector.4"* %4, %"struct.jxl::Histogram"* dereferenceable(40) %244) #13
  br label %292

294:                                              ; preds = %433
  %295 = load float*, float** %36, align 8
  %296 = getelementptr inbounds float, float* %295, i64 %434
  %297 = load float, float* %296, align 4
  %298 = fcmp olt float %297, %3
  br i1 %298, label %437, label %230

299:                                              ; preds = %292, %433
  %300 = phi i64 [ %435, %433 ], [ 0, %292 ]
  %301 = phi i64 [ %434, %433 ], [ 0, %292 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %149)
  %302 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %147, align 8
  %303 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %302, i64 %300
  %304 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %18, align 8
  %305 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %304, i64 -1
  %306 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %302, i64 %300, i32 1
  %307 = load i64, i64* %306, align 8
  %308 = icmp eq i64 %307, 0
  br i1 %308, label %410, label %309

309:                                              ; preds = %299
  %310 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %304, i64 -1, i32 1
  %311 = load i64, i64* %310, align 8
  %312 = icmp eq i64 %311, 0
  br i1 %312, label %410, label %313

313:                                              ; preds = %309
  %314 = add i64 %311, %307
  %315 = uitofp i64 %314 to float
  %316 = fdiv float 1.000000e+00, %315
  %317 = insertelement <8 x float> undef, float %316, i32 0
  %318 = shufflevector <8 x float> %317, <8 x float> undef, <8 x i32> zeroinitializer
  %319 = insertelement <8 x float> undef, float %315, i32 0
  %320 = shufflevector <8 x float> %319, <8 x float> undef, <8 x i32> zeroinitializer
  %321 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %302, i64 %300, i32 0, i32 0, i32 1
  %322 = bitcast i32** %321 to i64*
  %323 = load i64, i64* %322, align 8
  %324 = bitcast %"struct.jxl::Histogram"* %303 to i64*
  %325 = load i64, i64* %324, align 8
  %326 = sub i64 %323, %325
  %327 = ashr exact i64 %326, 2
  %328 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %304, i64 -1, i32 0, i32 0, i32 1
  %329 = bitcast i32** %328 to i64*
  %330 = load i64, i64* %329, align 8
  %331 = bitcast %"struct.jxl::Histogram"* %305 to i64*
  %332 = load i64, i64* %331, align 8
  %333 = sub i64 %330, %332
  %334 = ashr exact i64 %333, 2
  %335 = icmp ult i64 %327, %334
  %336 = select i1 %335, i64 %334, i64 %327
  %337 = icmp eq i64 %336, 0
  br i1 %337, label %338, label %353

338:                                              ; preds = %374, %313
  %339 = phi <8 x float> [ zeroinitializer, %313 ], [ %397, %374 ]
  %340 = shufflevector <8 x float> %339, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %341 = fadd <8 x float> %339, %340
  %342 = shufflevector <8 x float> %341, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %343 = fadd <8 x float> %341, %342
  %344 = shufflevector <8 x float> %343, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %345 = fadd <8 x float> %343, %344
  %346 = extractelement <8 x float> %345, i32 0
  %347 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %302, i64 %300, i32 2
  %348 = load float, float* %347, align 8
  %349 = fsub float %346, %348
  %350 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %304, i64 -1, i32 2
  %351 = load float, float* %350, align 8
  %352 = fsub float %349, %351
  br label %410

353:                                              ; preds = %313, %374
  %354 = phi i64 [ %404, %374 ], [ %332, %313 ]
  %355 = phi i64 [ %400, %374 ], [ %325, %313 ]
  %356 = phi i64 [ %406, %374 ], [ %334, %313 ]
  %357 = phi i64 [ %402, %374 ], [ %327, %313 ]
  %358 = phi i64 [ %398, %374 ], [ 0, %313 ]
  %359 = phi <8 x float> [ %397, %374 ], [ zeroinitializer, %313 ]
  %360 = inttoptr i64 %354 to i32*
  %361 = icmp ugt i64 %357, %358
  br i1 %361, label %362, label %367

362:                                              ; preds = %353
  %363 = inttoptr i64 %355 to i32*
  %364 = getelementptr inbounds i32, i32* %363, i64 %358
  %365 = bitcast i32* %364 to <8 x i32>*
  %366 = load <8 x i32>, <8 x i32>* %365, align 1, !alias.scope !122, !noalias !125
  br label %367

367:                                              ; preds = %362, %353
  %368 = phi <8 x i32> [ %366, %362 ], [ zeroinitializer, %353 ]
  %369 = icmp ugt i64 %356, %358
  br i1 %369, label %370, label %374

370:                                              ; preds = %367
  %371 = getelementptr inbounds i32, i32* %360, i64 %358
  %372 = bitcast i32* %371 to <8 x i32>*
  %373 = load <8 x i32>, <8 x i32>* %372, align 1, !alias.scope !127, !noalias !130
  br label %374

374:                                              ; preds = %370, %367
  %375 = phi <8 x i32> [ %373, %370 ], [ zeroinitializer, %367 ]
  %376 = add <8 x i32> %375, %368
  %377 = sitofp <8 x i32> %376 to <8 x float>
  %378 = fcmp une <8 x float> %320, %377
  %379 = fmul <8 x float> %318, %377
  %380 = bitcast <8 x float> %379 to <8 x i32>
  %381 = add <8 x i32> %380, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %382 = ashr <8 x i32> %381, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %383 = and <8 x i32> %381, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %384 = sub <8 x i32> %380, %383
  %385 = bitcast <8 x i32> %384 to <8 x float>
  %386 = sitofp <8 x i32> %382 to <8 x float>
  %387 = fadd <8 x float> %385, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %388 = call <8 x float> @llvm.fma.v8f32(<8 x float> %387, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #13
  %389 = call <8 x float> @llvm.fma.v8f32(<8 x float> %387, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #13
  fence acq_rel
  %390 = call <8 x float> @llvm.fma.v8f32(<8 x float> %388, <8 x float> %387, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #13
  %391 = call <8 x float> @llvm.fma.v8f32(<8 x float> %389, <8 x float> %387, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #13
  fence acq_rel
  %392 = fdiv <8 x float> %390, %391
  %393 = fadd <8 x float> %392, %386
  %394 = fmul <8 x float> %393, %377
  %395 = fsub <8 x float> zeroinitializer, %394
  %396 = select <8 x i1> %378, <8 x float> %395, <8 x float> zeroinitializer
  %397 = fadd <8 x float> %359, %396
  %398 = add i64 %358, 8
  %399 = load i64, i64* %322, align 8
  %400 = load i64, i64* %324, align 8
  %401 = sub i64 %399, %400
  %402 = ashr exact i64 %401, 2
  %403 = load i64, i64* %329, align 8
  %404 = load i64, i64* %331, align 8
  %405 = sub i64 %403, %404
  %406 = ashr exact i64 %405, 2
  %407 = icmp ult i64 %402, %406
  %408 = select i1 %407, i64 %406, i64 %402
  %409 = icmp ult i64 %398, %408
  br i1 %409, label %353, label %338

410:                                              ; preds = %299, %309, %338
  %411 = phi float [ %352, %338 ], [ 0.000000e+00, %309 ], [ 0.000000e+00, %299 ]
  store float %411, float* %9, align 4
  %412 = load float*, float** %36, align 8
  %413 = getelementptr inbounds float, float* %412, i64 %300
  %414 = load float, float* %413, align 4
  %415 = fcmp olt float %414, %411
  %416 = select i1 %415, float* %413, float* %9
  %417 = bitcast float* %416 to i32*
  %418 = load i32, i32* %417, align 4
  %419 = bitcast float* %413 to i32*
  store i32 %418, i32* %419, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %149)
  %420 = load i32*, i32** %146, align 8
  %421 = getelementptr inbounds i32, i32* %420, i64 %300
  %422 = load i32, i32* %421, align 4
  %423 = zext i32 %422 to i64
  %424 = icmp eq i64 %423, %2
  br i1 %424, label %425, label %433

425:                                              ; preds = %410
  %426 = load float*, float** %36, align 8
  %427 = getelementptr inbounds float, float* %426, i64 %300
  %428 = load float, float* %427, align 4
  %429 = getelementptr inbounds float, float* %426, i64 %301
  %430 = load float, float* %429, align 4
  %431 = fcmp ogt float %428, %430
  br i1 %431, label %432, label %433

432:                                              ; preds = %425
  br label %433

433:                                              ; preds = %410, %425, %432
  %434 = phi i64 [ %301, %410 ], [ %300, %432 ], [ %301, %425 ]
  %435 = add nuw i64 %300, 1
  %436 = icmp eq i64 %435, %1
  br i1 %436, label %294, label %299

437:                                              ; preds = %230, %294
  br i1 %10, label %438, label %446

438:                                              ; preds = %837, %437
  %439 = load float*, float** %36, align 8
  %440 = icmp eq float* %439, null
  br i1 %440, label %445, label %441

441:                                              ; preds = %438
  %442 = ptrtoint float* %439 to i64
  %443 = bitcast float** %37 to i64*
  store i64 %442, i64* %443, align 8
  %444 = bitcast float* %439 to i8*
  call void @_ZdlPv(i8* %444) #12
  br label %445

445:                                              ; preds = %438, %441
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %35) #13
  ret void

446:                                              ; preds = %437, %837
  %447 = phi i64 [ %838, %837 ], [ 0, %437 ]
  %448 = load i32*, i32** %146, align 8
  %449 = getelementptr inbounds i32, i32* %448, i64 %447
  %450 = load i32, i32* %449, align 4
  %451 = zext i32 %450 to i64
  %452 = icmp eq i64 %451, %2
  br i1 %452, label %453, label %837

453:                                              ; preds = %446
  %454 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %147, align 8
  %455 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %454, i64 %447
  %456 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %16, align 8
  %457 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %454, i64 %447, i32 1
  %458 = load i64, i64* %457, align 8
  %459 = icmp eq i64 %458, 0
  %460 = ptrtoint %"struct.jxl::Histogram"* %456 to i64
  br i1 %459, label %566, label %461

461:                                              ; preds = %453
  %462 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %456, i64 0, i32 1
  %463 = load i64, i64* %462, align 8
  %464 = icmp eq i64 %463, 0
  br i1 %464, label %566, label %465

465:                                              ; preds = %461
  %466 = add i64 %463, %458
  %467 = uitofp i64 %466 to float
  %468 = fdiv float 1.000000e+00, %467
  %469 = insertelement <8 x float> undef, float %468, i32 0
  %470 = shufflevector <8 x float> %469, <8 x float> undef, <8 x i32> zeroinitializer
  %471 = insertelement <8 x float> undef, float %467, i32 0
  %472 = shufflevector <8 x float> %471, <8 x float> undef, <8 x i32> zeroinitializer
  %473 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %454, i64 %447, i32 0, i32 0, i32 1
  %474 = bitcast i32** %473 to i64*
  %475 = load i64, i64* %474, align 8
  %476 = bitcast %"struct.jxl::Histogram"* %455 to i64*
  %477 = load i64, i64* %476, align 8
  %478 = sub i64 %475, %477
  %479 = ashr exact i64 %478, 2
  %480 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %456, i64 0, i32 0, i32 0, i32 1
  %481 = bitcast i32** %480 to i64*
  %482 = load i64, i64* %481, align 8
  %483 = bitcast %"struct.jxl::Histogram"* %456 to i64*
  %484 = load i64, i64* %483, align 8
  %485 = sub i64 %482, %484
  %486 = ashr exact i64 %485, 2
  %487 = icmp ult i64 %479, %486
  %488 = select i1 %487, i64 %486, i64 %479
  %489 = icmp eq i64 %488, 0
  br i1 %489, label %492, label %509

490:                                              ; preds = %530
  %491 = load i64, i64* %145, align 8
  br label %492

492:                                              ; preds = %490, %465
  %493 = phi i64 [ %460, %465 ], [ %491, %490 ]
  %494 = phi <8 x float> [ zeroinitializer, %465 ], [ %553, %490 ]
  %495 = shufflevector <8 x float> %494, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %496 = fadd <8 x float> %494, %495
  %497 = shufflevector <8 x float> %496, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %498 = fadd <8 x float> %496, %497
  %499 = shufflevector <8 x float> %498, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %500 = fadd <8 x float> %498, %499
  %501 = extractelement <8 x float> %500, i32 0
  %502 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %454, i64 %447, i32 2
  %503 = load float, float* %502, align 8
  %504 = fsub float %501, %503
  %505 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %456, i64 0, i32 2
  %506 = load float, float* %505, align 8
  %507 = fsub float %504, %506
  %508 = inttoptr i64 %493 to %"struct.jxl::Histogram"*
  br label %566

509:                                              ; preds = %465, %530
  %510 = phi i64 [ %560, %530 ], [ %484, %465 ]
  %511 = phi i64 [ %556, %530 ], [ %477, %465 ]
  %512 = phi i64 [ %562, %530 ], [ %486, %465 ]
  %513 = phi i64 [ %558, %530 ], [ %479, %465 ]
  %514 = phi i64 [ %554, %530 ], [ 0, %465 ]
  %515 = phi <8 x float> [ %553, %530 ], [ zeroinitializer, %465 ]
  %516 = inttoptr i64 %510 to i32*
  %517 = icmp ugt i64 %513, %514
  br i1 %517, label %518, label %523

518:                                              ; preds = %509
  %519 = inttoptr i64 %511 to i32*
  %520 = getelementptr inbounds i32, i32* %519, i64 %514
  %521 = bitcast i32* %520 to <8 x i32>*
  %522 = load <8 x i32>, <8 x i32>* %521, align 1, !alias.scope !132, !noalias !135
  br label %523

523:                                              ; preds = %518, %509
  %524 = phi <8 x i32> [ %522, %518 ], [ zeroinitializer, %509 ]
  %525 = icmp ugt i64 %512, %514
  br i1 %525, label %526, label %530

526:                                              ; preds = %523
  %527 = getelementptr inbounds i32, i32* %516, i64 %514
  %528 = bitcast i32* %527 to <8 x i32>*
  %529 = load <8 x i32>, <8 x i32>* %528, align 1, !alias.scope !137, !noalias !140
  br label %530

530:                                              ; preds = %526, %523
  %531 = phi <8 x i32> [ %529, %526 ], [ zeroinitializer, %523 ]
  %532 = add <8 x i32> %531, %524
  %533 = sitofp <8 x i32> %532 to <8 x float>
  %534 = fcmp une <8 x float> %472, %533
  %535 = fmul <8 x float> %470, %533
  %536 = bitcast <8 x float> %535 to <8 x i32>
  %537 = add <8 x i32> %536, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %538 = ashr <8 x i32> %537, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %539 = and <8 x i32> %537, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %540 = sub <8 x i32> %536, %539
  %541 = bitcast <8 x i32> %540 to <8 x float>
  %542 = sitofp <8 x i32> %538 to <8 x float>
  %543 = fadd <8 x float> %541, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %544 = call <8 x float> @llvm.fma.v8f32(<8 x float> %543, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #13
  %545 = call <8 x float> @llvm.fma.v8f32(<8 x float> %543, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #13
  fence acq_rel
  %546 = call <8 x float> @llvm.fma.v8f32(<8 x float> %544, <8 x float> %543, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #13
  %547 = call <8 x float> @llvm.fma.v8f32(<8 x float> %545, <8 x float> %543, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #13
  fence acq_rel
  %548 = fdiv <8 x float> %546, %547
  %549 = fadd <8 x float> %548, %542
  %550 = fmul <8 x float> %549, %533
  %551 = fsub <8 x float> zeroinitializer, %550
  %552 = select <8 x i1> %534, <8 x float> %551, <8 x float> zeroinitializer
  %553 = fadd <8 x float> %515, %552
  %554 = add i64 %514, 8
  %555 = load i64, i64* %474, align 8
  %556 = load i64, i64* %476, align 8
  %557 = sub i64 %555, %556
  %558 = ashr exact i64 %557, 2
  %559 = load i64, i64* %481, align 8
  %560 = load i64, i64* %483, align 8
  %561 = sub i64 %559, %560
  %562 = ashr exact i64 %561, 2
  %563 = icmp ult i64 %558, %562
  %564 = select i1 %563, i64 %562, i64 %558
  %565 = icmp ult i64 %554, %564
  br i1 %565, label %509, label %490

566:                                              ; preds = %453, %461, %492
  %567 = phi i64 [ %493, %492 ], [ %460, %461 ], [ %460, %453 ]
  %568 = phi %"struct.jxl::Histogram"* [ %508, %492 ], [ %456, %461 ], [ %456, %453 ]
  %569 = phi float [ %507, %492 ], [ 0.000000e+00, %461 ], [ 0.000000e+00, %453 ]
  %570 = load i64, i64* %144, align 8
  %571 = sub i64 %570, %567
  %572 = sdiv exact i64 %571, 40
  %573 = icmp ugt i64 %572, 1
  br i1 %573, label %699, label %574

574:                                              ; preds = %822, %566
  %575 = phi %"struct.jxl::Histogram"* [ %568, %566 ], [ %825, %822 ]
  %576 = phi i64 [ 0, %566 ], [ %830, %822 ]
  %577 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %575, i64 %576
  %578 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %147, align 8
  %579 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %578, i64 %447
  %580 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %578, i64 %447, i32 0, i32 0, i32 1
  %581 = bitcast i32** %580 to i64*
  %582 = load i64, i64* %581, align 8
  %583 = bitcast %"struct.jxl::Histogram"* %579 to i64*
  %584 = load i64, i64* %583, align 8
  %585 = sub i64 %582, %584
  %586 = ashr exact i64 %585, 2
  %587 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %575, i64 %576, i32 0, i32 0, i32 1
  %588 = bitcast i32** %587 to i64*
  %589 = load i64, i64* %588, align 8
  %590 = bitcast %"struct.jxl::Histogram"* %577 to i64*
  %591 = load i64, i64* %590, align 8
  %592 = sub i64 %589, %591
  %593 = ashr exact i64 %592, 2
  %594 = icmp ugt i64 %586, %593
  br i1 %594, label %595, label %600

595:                                              ; preds = %574
  %596 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %577, i64 0, i32 0
  %597 = sub nsw i64 %586, %593
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector"* %596, i64 %597) #13
  %598 = load i64, i64* %581, align 8
  %599 = load i64, i64* %583, align 8
  br label %600

600:                                              ; preds = %595, %574
  %601 = phi i64 [ %599, %595 ], [ %584, %574 ]
  %602 = phi i64 [ %598, %595 ], [ %582, %574 ]
  %603 = icmp eq i64 %602, %601
  br i1 %603, label %622, label %604

604:                                              ; preds = %600
  %605 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %577, i64 0, i32 0, i32 0, i32 0
  br label %606

606:                                              ; preds = %606, %604
  %607 = phi i64 [ %601, %604 ], [ %618, %606 ]
  %608 = phi i64 [ 0, %604 ], [ %616, %606 ]
  %609 = inttoptr i64 %607 to i32*
  %610 = getelementptr inbounds i32, i32* %609, i64 %608
  %611 = load i32, i32* %610, align 4
  %612 = load i32*, i32** %605, align 8
  %613 = getelementptr inbounds i32, i32* %612, i64 %608
  %614 = load i32, i32* %613, align 4
  %615 = add nsw i32 %614, %611
  store i32 %615, i32* %613, align 4
  %616 = add nuw i64 %608, 1
  %617 = load i64, i64* %581, align 8
  %618 = load i64, i64* %583, align 8
  %619 = sub i64 %617, %618
  %620 = ashr exact i64 %619, 2
  %621 = icmp ult i64 %616, %620
  br i1 %621, label %606, label %622

622:                                              ; preds = %606, %600
  %623 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %578, i64 %447, i32 1
  %624 = load i64, i64* %623, align 8
  %625 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %575, i64 %576, i32 1
  %626 = load i64, i64* %625, align 8
  %627 = add i64 %626, %624
  store i64 %627, i64* %625, align 8
  %628 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %16, align 8
  %629 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %628, i64 %576, i32 2
  store float 0.000000e+00, float* %629, align 8
  %630 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %628, i64 %576, i32 1
  %631 = load i64, i64* %630, align 8
  %632 = icmp eq i64 %631, 0
  br i1 %632, label %695, label %633

633:                                              ; preds = %622
  %634 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %628, i64 %576
  %635 = uitofp i64 %631 to float
  %636 = fdiv float 1.000000e+00, %635
  %637 = insertelement <8 x float> undef, float %636, i32 0
  %638 = shufflevector <8 x float> %637, <8 x float> undef, <8 x i32> zeroinitializer
  %639 = insertelement <8 x float> undef, float %635, i32 0
  %640 = shufflevector <8 x float> %639, <8 x float> undef, <8 x i32> zeroinitializer
  %641 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %628, i64 %576, i32 0, i32 0, i32 1
  %642 = bitcast i32** %641 to i64*
  %643 = load i64, i64* %642, align 8
  %644 = bitcast %"struct.jxl::Histogram"* %634 to i64*
  %645 = load i64, i64* %644, align 8
  %646 = icmp eq i64 %643, %645
  br i1 %646, label %649, label %660

647:                                              ; preds = %660
  %648 = load float, float* %629, align 8
  br label %649

649:                                              ; preds = %647, %633
  %650 = phi float [ 0.000000e+00, %633 ], [ %648, %647 ]
  %651 = phi <8 x float> [ zeroinitializer, %633 ], [ %688, %647 ]
  %652 = shufflevector <8 x float> %651, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %653 = fadd <8 x float> %651, %652
  %654 = shufflevector <8 x float> %653, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %655 = fadd <8 x float> %653, %654
  %656 = shufflevector <8 x float> %655, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %657 = fadd <8 x float> %655, %656
  %658 = extractelement <8 x float> %657, i32 0
  %659 = fadd float %650, %658
  store float %659, float* %629, align 8
  br label %695

660:                                              ; preds = %633, %660
  %661 = phi i64 [ %691, %660 ], [ %645, %633 ]
  %662 = phi i64 [ %689, %660 ], [ 0, %633 ]
  %663 = phi <8 x float> [ %688, %660 ], [ zeroinitializer, %633 ]
  %664 = inttoptr i64 %661 to i32*
  %665 = getelementptr inbounds i32, i32* %664, i64 %662
  %666 = bitcast i32* %665 to <8 x i32>*
  %667 = load <8 x i32>, <8 x i32>* %666, align 1, !alias.scope !142, !noalias !145
  %668 = sitofp <8 x i32> %667 to <8 x float>
  %669 = fcmp une <8 x float> %640, %668
  %670 = fmul <8 x float> %638, %668
  %671 = bitcast <8 x float> %670 to <8 x i32>
  %672 = add <8 x i32> %671, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %673 = ashr <8 x i32> %672, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %674 = and <8 x i32> %672, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %675 = sub <8 x i32> %671, %674
  %676 = bitcast <8 x i32> %675 to <8 x float>
  %677 = sitofp <8 x i32> %673 to <8 x float>
  %678 = fadd <8 x float> %676, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %679 = call <8 x float> @llvm.fma.v8f32(<8 x float> %678, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #13
  %680 = call <8 x float> @llvm.fma.v8f32(<8 x float> %678, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #13
  fence acq_rel
  %681 = call <8 x float> @llvm.fma.v8f32(<8 x float> %679, <8 x float> %678, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #13
  %682 = call <8 x float> @llvm.fma.v8f32(<8 x float> %680, <8 x float> %678, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #13
  fence acq_rel
  %683 = fdiv <8 x float> %681, %682
  %684 = fadd <8 x float> %683, %677
  %685 = fmul <8 x float> %684, %668
  %686 = fsub <8 x float> zeroinitializer, %685
  %687 = select <8 x i1> %669, <8 x float> %686, <8 x float> zeroinitializer
  %688 = fadd <8 x float> %663, %687
  %689 = add i64 %662, 8
  %690 = load i64, i64* %642, align 8
  %691 = load i64, i64* %644, align 8
  %692 = sub i64 %690, %691
  %693 = ashr exact i64 %692, 2
  %694 = icmp ult i64 %689, %693
  br i1 %694, label %660, label %647

695:                                              ; preds = %622, %649
  %696 = trunc i64 %576 to i32
  %697 = load i32*, i32** %146, align 8
  %698 = getelementptr inbounds i32, i32* %697, i64 %447
  store i32 %696, i32* %698, align 4
  br label %837

699:                                              ; preds = %566, %822
  %700 = phi i64 [ %823, %822 ], [ %567, %566 ]
  %701 = phi i64 [ %824, %822 ], [ %570, %566 ]
  %702 = phi %"struct.jxl::Histogram"* [ %825, %822 ], [ %568, %566 ]
  %703 = phi i64 [ %826, %822 ], [ %567, %566 ]
  %704 = phi i64 [ %827, %822 ], [ %570, %566 ]
  %705 = phi %"struct.jxl::Histogram"* [ %836, %822 ], [ %568, %566 ]
  %706 = phi i64 [ %832, %822 ], [ 1, %566 ]
  %707 = phi float [ %831, %822 ], [ %569, %566 ]
  %708 = phi i64 [ %830, %822 ], [ 0, %566 ]
  %709 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %147, align 8
  %710 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %709, i64 %447
  %711 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %705, i64 %706
  %712 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %709, i64 %447, i32 1
  %713 = load i64, i64* %712, align 8
  %714 = icmp eq i64 %713, 0
  br i1 %714, label %822, label %715

715:                                              ; preds = %699
  %716 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %705, i64 %706, i32 1
  %717 = load i64, i64* %716, align 8
  %718 = icmp eq i64 %717, 0
  br i1 %718, label %822, label %719

719:                                              ; preds = %715
  %720 = add i64 %717, %713
  %721 = uitofp i64 %720 to float
  %722 = fdiv float 1.000000e+00, %721
  %723 = insertelement <8 x float> undef, float %722, i32 0
  %724 = shufflevector <8 x float> %723, <8 x float> undef, <8 x i32> zeroinitializer
  %725 = insertelement <8 x float> undef, float %721, i32 0
  %726 = shufflevector <8 x float> %725, <8 x float> undef, <8 x i32> zeroinitializer
  %727 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %709, i64 %447, i32 0, i32 0, i32 1
  %728 = bitcast i32** %727 to i64*
  %729 = load i64, i64* %728, align 8
  %730 = bitcast %"struct.jxl::Histogram"* %710 to i64*
  %731 = load i64, i64* %730, align 8
  %732 = sub i64 %729, %731
  %733 = ashr exact i64 %732, 2
  %734 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %705, i64 %706, i32 0, i32 0, i32 1
  %735 = bitcast i32** %734 to i64*
  %736 = load i64, i64* %735, align 8
  %737 = bitcast %"struct.jxl::Histogram"* %711 to i64*
  %738 = load i64, i64* %737, align 8
  %739 = sub i64 %736, %738
  %740 = ashr exact i64 %739, 2
  %741 = icmp ult i64 %733, %740
  %742 = select i1 %741, i64 %740, i64 %733
  %743 = icmp eq i64 %742, 0
  br i1 %743, label %747, label %765

744:                                              ; preds = %786
  %745 = load i64, i64* %144, align 8
  %746 = load i64, i64* %145, align 8
  br label %747

747:                                              ; preds = %744, %719
  %748 = phi i64 [ %700, %719 ], [ %746, %744 ]
  %749 = phi i64 [ %701, %719 ], [ %745, %744 ]
  %750 = phi <8 x float> [ zeroinitializer, %719 ], [ %809, %744 ]
  %751 = shufflevector <8 x float> %750, <8 x float> undef, <8 x i32> <i32 4, i32 5, i32 6, i32 7, i32 0, i32 1, i32 2, i32 3>
  %752 = fadd <8 x float> %750, %751
  %753 = shufflevector <8 x float> %752, <8 x float> undef, <8 x i32> <i32 2, i32 3, i32 0, i32 1, i32 6, i32 7, i32 4, i32 5>
  %754 = fadd <8 x float> %752, %753
  %755 = shufflevector <8 x float> %754, <8 x float> undef, <8 x i32> <i32 1, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %756 = fadd <8 x float> %754, %755
  %757 = extractelement <8 x float> %756, i32 0
  %758 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %709, i64 %447, i32 2
  %759 = load float, float* %758, align 8
  %760 = fsub float %757, %759
  %761 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %705, i64 %706, i32 2
  %762 = load float, float* %761, align 8
  %763 = fsub float %760, %762
  %764 = inttoptr i64 %748 to %"struct.jxl::Histogram"*
  br label %822

765:                                              ; preds = %719, %786
  %766 = phi i64 [ %816, %786 ], [ %738, %719 ]
  %767 = phi i64 [ %812, %786 ], [ %731, %719 ]
  %768 = phi i64 [ %818, %786 ], [ %740, %719 ]
  %769 = phi i64 [ %814, %786 ], [ %733, %719 ]
  %770 = phi i64 [ %810, %786 ], [ 0, %719 ]
  %771 = phi <8 x float> [ %809, %786 ], [ zeroinitializer, %719 ]
  %772 = inttoptr i64 %766 to i32*
  %773 = icmp ugt i64 %769, %770
  br i1 %773, label %774, label %779

774:                                              ; preds = %765
  %775 = inttoptr i64 %767 to i32*
  %776 = getelementptr inbounds i32, i32* %775, i64 %770
  %777 = bitcast i32* %776 to <8 x i32>*
  %778 = load <8 x i32>, <8 x i32>* %777, align 1, !alias.scope !147, !noalias !150
  br label %779

779:                                              ; preds = %774, %765
  %780 = phi <8 x i32> [ %778, %774 ], [ zeroinitializer, %765 ]
  %781 = icmp ugt i64 %768, %770
  br i1 %781, label %782, label %786

782:                                              ; preds = %779
  %783 = getelementptr inbounds i32, i32* %772, i64 %770
  %784 = bitcast i32* %783 to <8 x i32>*
  %785 = load <8 x i32>, <8 x i32>* %784, align 1, !alias.scope !152, !noalias !155
  br label %786

786:                                              ; preds = %782, %779
  %787 = phi <8 x i32> [ %785, %782 ], [ zeroinitializer, %779 ]
  %788 = add <8 x i32> %787, %780
  %789 = sitofp <8 x i32> %788 to <8 x float>
  %790 = fcmp une <8 x float> %726, %789
  %791 = fmul <8 x float> %724, %789
  %792 = bitcast <8 x float> %791 to <8 x i32>
  %793 = add <8 x i32> %792, <i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811, i32 -1059760811>
  %794 = ashr <8 x i32> %793, <i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23, i32 23>
  %795 = and <8 x i32> %793, <i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608, i32 -8388608>
  %796 = sub <8 x i32> %792, %795
  %797 = bitcast <8 x i32> %796 to <8 x float>
  %798 = sitofp <8 x i32> %794 to <8 x float>
  %799 = fadd <8 x float> %797, <float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00, float -1.000000e+00>
  fence acq_rel
  %800 = call <8 x float> @llvm.fma.v8f32(<8 x float> %799, <8 x float> <float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000, float 0x3FE7C238E0000000>, <8 x float> <float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000, float 0x3FF6DC0560000000>) #13
  %801 = call <8 x float> @llvm.fma.v8f32(<8 x float> %799, <8 x float> <float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000, float 0x3FC648B180000000>, <8 x float> <float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000, float 0x3FF0279DA0000000>) #13
  fence acq_rel
  %802 = call <8 x float> @llvm.fma.v8f32(<8 x float> %800, <8 x float> %799, <8 x float> <float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000, float 0xBEBF0B5600000000>) #13
  %803 = call <8 x float> @llvm.fma.v8f32(<8 x float> %801, <8 x float> %799, <8 x float> <float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000, float 0x3FEFB0C4A0000000>) #13
  fence acq_rel
  %804 = fdiv <8 x float> %802, %803
  %805 = fadd <8 x float> %804, %798
  %806 = fmul <8 x float> %805, %789
  %807 = fsub <8 x float> zeroinitializer, %806
  %808 = select <8 x i1> %790, <8 x float> %807, <8 x float> zeroinitializer
  %809 = fadd <8 x float> %771, %808
  %810 = add i64 %770, 8
  %811 = load i64, i64* %728, align 8
  %812 = load i64, i64* %730, align 8
  %813 = sub i64 %811, %812
  %814 = ashr exact i64 %813, 2
  %815 = load i64, i64* %735, align 8
  %816 = load i64, i64* %737, align 8
  %817 = sub i64 %815, %816
  %818 = ashr exact i64 %817, 2
  %819 = icmp ult i64 %814, %818
  %820 = select i1 %819, i64 %818, i64 %814
  %821 = icmp ult i64 %810, %820
  br i1 %821, label %765, label %744

822:                                              ; preds = %699, %715, %747
  %823 = phi i64 [ %748, %747 ], [ %700, %715 ], [ %700, %699 ]
  %824 = phi i64 [ %749, %747 ], [ %701, %715 ], [ %701, %699 ]
  %825 = phi %"struct.jxl::Histogram"* [ %764, %747 ], [ %702, %715 ], [ %702, %699 ]
  %826 = phi i64 [ %748, %747 ], [ %703, %715 ], [ %703, %699 ]
  %827 = phi i64 [ %749, %747 ], [ %704, %715 ], [ %704, %699 ]
  %828 = phi float [ %763, %747 ], [ 0.000000e+00, %715 ], [ 0.000000e+00, %699 ]
  %829 = fcmp olt float %828, %707
  %830 = select i1 %829, i64 %706, i64 %708
  %831 = select i1 %829, float %828, float %707
  %832 = add nuw i64 %706, 1
  %833 = sub i64 %827, %826
  %834 = sdiv exact i64 %833, 40
  %835 = icmp ult i64 %832, %834
  %836 = inttoptr i64 %826 to %"struct.jxl::Histogram"*
  br i1 %835, label %699, label %574

837:                                              ; preds = %446, %695
  %838 = add nuw i64 %447, 1
  %839 = icmp eq i64 %838, %1
  br i1 %839, label %438, label %446
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR16HistogramEntropyERKNS_9HistogramE(%"struct.jxl::Histogram"* nocapture dereferenceable(40)) #2 {
  %2 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 2
  store float 0.000000e+00, float* %2, align 8
  %3 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %62, label %6

6:                                                ; preds = %1
  %7 = uitofp i64 %4 to float
  %8 = fdiv float 1.000000e+00, %7
  %9 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"struct.jxl::Histogram"* %0 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = icmp eq i64 %11, %13
  br i1 %14, label %17, label %21

15:                                               ; preds = %21
  %16 = load float, float* %2, align 8
  br label %17

17:                                               ; preds = %15, %6
  %18 = phi float [ 0.000000e+00, %6 ], [ %16, %15 ]
  %19 = phi float [ 0.000000e+00, %6 ], [ %55, %15 ]
  %20 = fadd float %19, %18
  store float %20, float* %2, align 8
  br label %62

21:                                               ; preds = %6, %21
  %22 = phi i64 [ %58, %21 ], [ %13, %6 ]
  %23 = phi i64 [ %56, %21 ], [ 0, %6 ]
  %24 = phi float [ %55, %21 ], [ 0.000000e+00, %6 ]
  %25 = inttoptr i64 %22 to i32*
  %26 = getelementptr inbounds i32, i32* %25, i64 %23
  %27 = load i32, i32* %26, align 4, !alias.scope !157
  %28 = sitofp i32 %27 to float
  %29 = fcmp une float %28, %7
  %30 = fmul float %8, %28
  %31 = bitcast float %30 to i32
  %32 = add i32 %31, -1059760811
  %33 = lshr i32 %32, 23
  %34 = ashr i32 %32, 31
  %35 = shl nsw i32 %34, 8
  %36 = or i32 %35, %33
  %37 = shl i32 %36, 23
  %38 = sub i32 %31, %37
  %39 = bitcast i32 %38 to float
  %40 = sitofp i32 %36 to float
  %41 = fadd float %39, -1.000000e+00
  fence acq_rel
  %42 = insertelement <2 x float> undef, float %41, i32 0
  %43 = shufflevector <2 x float> %42, <2 x float> undef, <2 x i32> zeroinitializer
  %44 = fmul <2 x float> %43, <float 0x3FE7C238E0000000, float 0x3FC648B180000000>
  %45 = fadd <2 x float> %44, <float 0x3FF6DC0560000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %46 = fmul <2 x float> %43, %45
  %47 = fadd <2 x float> %46, <float 0xBEBF0B5600000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %48 = extractelement <2 x float> %47, i32 0
  %49 = extractelement <2 x float> %47, i32 1
  %50 = fdiv float %48, %49
  %51 = fadd float %50, %40
  %52 = fmul float %51, %28
  %53 = fsub float 0.000000e+00, %52
  %54 = select i1 %29, float %53, float 0.000000e+00
  %55 = fadd float %24, %54
  %56 = add nuw i64 %23, 1
  %57 = load i64, i64* %10, align 8
  %58 = load i64, i64* %12, align 8
  %59 = sub i64 %57, %58
  %60 = ashr exact i64 %59, 2
  %61 = icmp ult i64 %56, %60
  br i1 %61, label %21, label %15

62:                                               ; preds = %1, %17
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZN3jxl8N_SCALAR17HistogramDistanceERKNS_9HistogramES3_(%"struct.jxl::Histogram"* nocapture readonly dereferenceable(40), %"struct.jxl::Histogram"* nocapture readonly dereferenceable(40)) local_unnamed_addr #2 {
  %3 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %101, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %101, label %10

10:                                               ; preds = %6
  %11 = add i64 %8, %4
  %12 = uitofp i64 %11 to float
  %13 = fdiv float 1.000000e+00, %12
  %14 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = bitcast i32** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %"struct.jxl::Histogram"* %0 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 2
  %21 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1, i64 0, i32 0, i32 0, i32 1
  %22 = bitcast i32** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = bitcast %"struct.jxl::Histogram"* %1 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %23, %25
  %27 = ashr exact i64 %26, 2
  %28 = icmp ult i64 %20, %27
  %29 = select i1 %28, i64 %27, i64 %20
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %31, label %39

31:                                               ; preds = %58, %10
  %32 = phi float [ 0.000000e+00, %10 ], [ %88, %58 ]
  %33 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 2
  %34 = load float, float* %33, align 8
  %35 = fsub float %32, %34
  %36 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1, i64 0, i32 2
  %37 = load float, float* %36, align 8
  %38 = fsub float %35, %37
  br label %101

39:                                               ; preds = %10, %58
  %40 = phi i64 [ %95, %58 ], [ %25, %10 ]
  %41 = phi i64 [ %91, %58 ], [ %18, %10 ]
  %42 = phi i64 [ %97, %58 ], [ %27, %10 ]
  %43 = phi i64 [ %93, %58 ], [ %20, %10 ]
  %44 = phi i64 [ %89, %58 ], [ 0, %10 ]
  %45 = phi float [ %88, %58 ], [ 0.000000e+00, %10 ]
  %46 = inttoptr i64 %40 to i32*
  %47 = icmp ugt i64 %43, %44
  br i1 %47, label %48, label %52

48:                                               ; preds = %39
  %49 = inttoptr i64 %41 to i32*
  %50 = getelementptr inbounds i32, i32* %49, i64 %44
  %51 = load i32, i32* %50, align 4, !alias.scope !162
  br label %52

52:                                               ; preds = %39, %48
  %53 = phi i32 [ %51, %48 ], [ 0, %39 ]
  %54 = icmp ugt i64 %42, %44
  br i1 %54, label %55, label %58

55:                                               ; preds = %52
  %56 = getelementptr inbounds i32, i32* %46, i64 %44
  %57 = load i32, i32* %56, align 4, !alias.scope !167
  br label %58

58:                                               ; preds = %52, %55
  %59 = phi i32 [ %57, %55 ], [ 0, %52 ]
  %60 = add i32 %59, %53
  %61 = sitofp i32 %60 to float
  %62 = fcmp une float %61, %12
  %63 = fmul float %13, %61
  %64 = bitcast float %63 to i32
  %65 = add i32 %64, -1059760811
  %66 = lshr i32 %65, 23
  %67 = ashr i32 %65, 31
  %68 = shl nsw i32 %67, 8
  %69 = or i32 %68, %66
  %70 = shl i32 %69, 23
  %71 = sub i32 %64, %70
  %72 = bitcast i32 %71 to float
  %73 = sitofp i32 %69 to float
  %74 = fadd float %72, -1.000000e+00
  fence acq_rel
  %75 = fmul float %74, 0x3FE7C238E0000000
  %76 = fadd float %75, 0x3FF6DC0560000000
  %77 = fmul float %74, 0x3FC648B180000000
  %78 = fadd float %77, 0x3FF0279DA0000000
  fence acq_rel
  %79 = fmul float %74, %76
  %80 = fadd float %79, 0xBEBF0B5600000000
  %81 = fmul float %74, %78
  %82 = fadd float %81, 0x3FEFB0C4A0000000
  fence acq_rel
  %83 = fdiv float %80, %82
  %84 = fadd float %83, %73
  %85 = fmul float %84, %61
  %86 = fsub float 0.000000e+00, %85
  %87 = select i1 %62, float %86, float 0.000000e+00
  %88 = fadd float %45, %87
  %89 = add nuw i64 %44, 1
  %90 = load i64, i64* %15, align 8
  %91 = load i64, i64* %17, align 8
  %92 = sub i64 %90, %91
  %93 = ashr exact i64 %92, 2
  %94 = load i64, i64* %22, align 8
  %95 = load i64, i64* %24, align 8
  %96 = sub i64 %94, %95
  %97 = ashr exact i64 %96, 2
  %98 = icmp ult i64 %93, %97
  %99 = select i1 %98, i64 %97, i64 %93
  %100 = icmp ult i64 %89, %99
  br i1 %100, label %39, label %31

101:                                              ; preds = %2, %6, %31
  %102 = phi float [ %38, %31 ], [ 0.000000e+00, %6 ], [ 0.000000e+00, %2 ]
  ret float %102
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl8N_SCALAR21FastClusterHistogramsERKNSt3__16vectorINS_9HistogramENS1_9allocatorIS3_EEEEmmfPS6_PNS2_IjNS4_IjEEEE(%"class.std::__1::vector.4"* nocapture readonly dereferenceable(24), i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*) #2 {
  %7 = alloca %"class.std::__1::vector.18", align 8
  %8 = alloca i32, align 4
  %9 = alloca float, align 4
  %10 = icmp eq i64 %1, 0
  br i1 %10, label %14, label %11

11:                                               ; preds = %6
  %12 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 0
  %13 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %12, align 8
  br label %150

14:                                               ; preds = %215, %6
  %15 = phi i64 [ 0, %6 ], [ %222, %215 ]
  %16 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %4, i64 0, i32 0, i32 0
  %17 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %16, align 8
  %18 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %4, i64 0, i32 0, i32 1
  %19 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %18, align 8
  %20 = icmp eq %"struct.jxl::Histogram"* %19, %17
  br i1 %20, label %34, label %21

21:                                               ; preds = %14, %32
  %22 = phi %"struct.jxl::Histogram"* [ %23, %32 ], [ %19, %14 ]
  %23 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %22, i64 -1
  %24 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %23, i64 0, i32 0, i32 0, i32 0
  %25 = load i32*, i32** %24, align 8
  %26 = icmp eq i32* %25, null
  br i1 %26, label %32, label %27

27:                                               ; preds = %21
  %28 = ptrtoint i32* %25 to i64
  %29 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %22, i64 -1, i32 0, i32 0, i32 1
  %30 = bitcast i32** %29 to i64*
  store i64 %28, i64* %30, align 8
  %31 = bitcast i32* %25 to i8*
  tail call void @_ZdlPv(i8* %31) #12
  br label %32

32:                                               ; preds = %27, %21
  %33 = icmp eq %"struct.jxl::Histogram"* %23, %17
  br i1 %33, label %34, label %21

34:                                               ; preds = %32, %14
  store %"struct.jxl::Histogram"* %17, %"struct.jxl::Histogram"** %18, align 8
  tail call void @_ZNSt3__16vectorIN3jxl9HistogramENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector.4"* %4, i64 %2)
  %35 = bitcast %"class.std::__1::vector.18"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %35) #13
  %36 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %7, i64 0, i32 0, i32 0
  %37 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %7, i64 0, i32 0, i32 1
  %38 = getelementptr inbounds %"class.std::__1::vector.18", %"class.std::__1::vector.18"* %7, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %35, i8 0, i64 24, i1 false) #13
  br i1 %10, label %135, label %39

39:                                               ; preds = %34
  %40 = icmp ugt i64 %1, 4611686018427387903
  br i1 %40, label %41, label %43

41:                                               ; preds = %39
  %42 = bitcast %"class.std::__1::vector.18"* %7 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %42) #14
  unreachable

43:                                               ; preds = %39
  %44 = shl i64 %1, 2
  %45 = tail call i8* @_Znwm(i64 %44) #12
  %46 = bitcast i8* %45 to float*
  %47 = bitcast float** %37 to i8**
  store i8* %45, i8** %47, align 8
  %48 = bitcast %"class.std::__1::vector.18"* %7 to i8**
  store i8* %45, i8** %48, align 8
  %49 = getelementptr inbounds float, float* %46, i64 %1
  store float* %49, float** %38, align 8
  %50 = shl nsw i64 %1, 2
  %51 = add i64 %50, -4
  %52 = lshr exact i64 %51, 2
  %53 = add nuw nsw i64 %52, 1
  %54 = icmp ult i64 %53, 8
  br i1 %54, label %125, label %55

55:                                               ; preds = %43
  %56 = and i64 %53, 9223372036854775800
  %57 = getelementptr float, float* %46, i64 %56
  %58 = add nsw i64 %56, -8
  %59 = lshr exact i64 %58, 3
  %60 = add nuw nsw i64 %59, 1
  %61 = and i64 %60, 7
  %62 = icmp ult i64 %58, 56
  br i1 %62, label %110, label %63

63:                                               ; preds = %55
  %64 = sub nsw i64 %60, %61
  br label %65

65:                                               ; preds = %65, %63
  %66 = phi i64 [ 0, %63 ], [ %107, %65 ]
  %67 = phi i64 [ %64, %63 ], [ %108, %65 ]
  %68 = getelementptr float, float* %46, i64 %66
  %69 = bitcast float* %68 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %69, align 4
  %70 = getelementptr float, float* %68, i64 4
  %71 = bitcast float* %70 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %71, align 4
  %72 = or i64 %66, 8
  %73 = getelementptr float, float* %46, i64 %72
  %74 = bitcast float* %73 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %74, align 4
  %75 = getelementptr float, float* %73, i64 4
  %76 = bitcast float* %75 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %76, align 4
  %77 = or i64 %66, 16
  %78 = getelementptr float, float* %46, i64 %77
  %79 = bitcast float* %78 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %79, align 4
  %80 = getelementptr float, float* %78, i64 4
  %81 = bitcast float* %80 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %81, align 4
  %82 = or i64 %66, 24
  %83 = getelementptr float, float* %46, i64 %82
  %84 = bitcast float* %83 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %84, align 4
  %85 = getelementptr float, float* %83, i64 4
  %86 = bitcast float* %85 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %86, align 4
  %87 = or i64 %66, 32
  %88 = getelementptr float, float* %46, i64 %87
  %89 = bitcast float* %88 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %89, align 4
  %90 = getelementptr float, float* %88, i64 4
  %91 = bitcast float* %90 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %91, align 4
  %92 = or i64 %66, 40
  %93 = getelementptr float, float* %46, i64 %92
  %94 = bitcast float* %93 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %94, align 4
  %95 = getelementptr float, float* %93, i64 4
  %96 = bitcast float* %95 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %96, align 4
  %97 = or i64 %66, 48
  %98 = getelementptr float, float* %46, i64 %97
  %99 = bitcast float* %98 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %99, align 4
  %100 = getelementptr float, float* %98, i64 4
  %101 = bitcast float* %100 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %101, align 4
  %102 = or i64 %66, 56
  %103 = getelementptr float, float* %46, i64 %102
  %104 = bitcast float* %103 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %104, align 4
  %105 = getelementptr float, float* %103, i64 4
  %106 = bitcast float* %105 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %106, align 4
  %107 = add i64 %66, 64
  %108 = add i64 %67, -8
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %65, !llvm.loop !172

110:                                              ; preds = %65, %55
  %111 = phi i64 [ 0, %55 ], [ %107, %65 ]
  %112 = icmp eq i64 %61, 0
  br i1 %112, label %123, label %113

113:                                              ; preds = %110, %113
  %114 = phi i64 [ %120, %113 ], [ %111, %110 ]
  %115 = phi i64 [ %121, %113 ], [ %61, %110 ]
  %116 = getelementptr float, float* %46, i64 %114
  %117 = bitcast float* %116 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %117, align 4
  %118 = getelementptr float, float* %116, i64 4
  %119 = bitcast float* %118 to <4 x i32>*
  store <4 x i32> <i32 2139095039, i32 2139095039, i32 2139095039, i32 2139095039>, <4 x i32>* %119, align 4
  %120 = add i64 %114, 8
  %121 = add i64 %115, -1
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %113, !llvm.loop !173

123:                                              ; preds = %113, %110
  %124 = icmp eq i64 %53, %56
  br i1 %124, label %132, label %125

125:                                              ; preds = %123, %43
  %126 = phi float* [ %46, %43 ], [ %57, %123 ]
  br label %127

127:                                              ; preds = %125, %127
  %128 = phi float* [ %130, %127 ], [ %126, %125 ]
  %129 = bitcast float* %128 to i32*
  store i32 2139095039, i32* %129, align 4
  %130 = getelementptr inbounds float, float* %128, i64 1
  %131 = icmp eq float* %130, %49
  br i1 %131, label %132, label %127, !llvm.loop !174

132:                                              ; preds = %127, %123
  %133 = bitcast float** %37 to i64*
  %134 = ptrtoint float* %49 to i64
  store i64 %134, i64* %133, align 8
  br label %135

135:                                              ; preds = %34, %132
  %136 = bitcast %"class.std::__1::vector.11"* %5 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %5, i64 0, i32 0, i32 1
  %139 = bitcast i32** %138 to i64*
  store i64 %137, i64* %139, align 8
  %140 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %140) #13
  %141 = trunc i64 %2 to i32
  store i32 %141, i32* %8, align 4
  br i1 %10, label %143, label %142

142:                                              ; preds = %135
  call void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj(%"class.std::__1::vector.11"* %5, i64 %1, i32* nonnull dereferenceable(4) %8) #13
  br label %143

143:                                              ; preds = %135, %142
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %140) #13
  %144 = bitcast %"struct.jxl::Histogram"** %18 to i64*
  %145 = bitcast %"class.std::__1::vector.4"* %4 to i64*
  %146 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %5, i64 0, i32 0, i32 0
  %147 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 0
  %148 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %149 = bitcast float* %9 to i8*
  br label %225

150:                                              ; preds = %215, %11
  %151 = phi %"struct.jxl::Histogram"* [ %13, %11 ], [ %216, %215 ]
  %152 = phi i64 [ 0, %11 ], [ %223, %215 ]
  %153 = phi i64 [ 0, %11 ], [ %222, %215 ]
  %154 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %151, i64 %152, i32 2
  store float 0.000000e+00, float* %154, align 8
  %155 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %151, i64 %152, i32 1
  %156 = load i64, i64* %155, align 8
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %215, label %158

158:                                              ; preds = %150
  %159 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %151, i64 %152
  %160 = uitofp i64 %156 to float
  %161 = fdiv float 1.000000e+00, %160
  %162 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %151, i64 %152, i32 0, i32 0, i32 1
  %163 = bitcast i32** %162 to i64*
  %164 = load i64, i64* %163, align 8
  %165 = bitcast %"struct.jxl::Histogram"* %159 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = icmp eq i64 %164, %166
  br i1 %167, label %170, label %174

168:                                              ; preds = %174
  %169 = load float, float* %154, align 8
  br label %170

170:                                              ; preds = %168, %158
  %171 = phi float [ 0.000000e+00, %158 ], [ %169, %168 ]
  %172 = phi float [ 0.000000e+00, %158 ], [ %208, %168 ]
  %173 = fadd float %171, %172
  store float %173, float* %154, align 8
  br label %215

174:                                              ; preds = %158, %174
  %175 = phi i64 [ %211, %174 ], [ %166, %158 ]
  %176 = phi i64 [ %209, %174 ], [ 0, %158 ]
  %177 = phi float [ %208, %174 ], [ 0.000000e+00, %158 ]
  %178 = inttoptr i64 %175 to i32*
  %179 = getelementptr inbounds i32, i32* %178, i64 %176
  %180 = load i32, i32* %179, align 4, !alias.scope !175
  %181 = sitofp i32 %180 to float
  %182 = fcmp une float %181, %160
  %183 = fmul float %161, %181
  %184 = bitcast float %183 to i32
  %185 = add i32 %184, -1059760811
  %186 = lshr i32 %185, 23
  %187 = ashr i32 %185, 31
  %188 = shl nsw i32 %187, 8
  %189 = or i32 %188, %186
  %190 = shl i32 %189, 23
  %191 = sub i32 %184, %190
  %192 = bitcast i32 %191 to float
  %193 = sitofp i32 %189 to float
  %194 = fadd float %192, -1.000000e+00
  fence acq_rel
  %195 = insertelement <2 x float> undef, float %194, i32 0
  %196 = shufflevector <2 x float> %195, <2 x float> undef, <2 x i32> zeroinitializer
  %197 = fmul <2 x float> %196, <float 0x3FE7C238E0000000, float 0x3FC648B180000000>
  %198 = fadd <2 x float> %197, <float 0x3FF6DC0560000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %199 = fmul <2 x float> %196, %198
  %200 = fadd <2 x float> %199, <float 0xBEBF0B5600000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %201 = extractelement <2 x float> %200, i32 0
  %202 = extractelement <2 x float> %200, i32 1
  %203 = fdiv float %201, %202
  %204 = fadd float %203, %193
  %205 = fmul float %204, %181
  %206 = fsub float 0.000000e+00, %205
  %207 = select i1 %182, float %206, float 0.000000e+00
  %208 = fadd float %177, %207
  %209 = add nuw i64 %176, 1
  %210 = load i64, i64* %163, align 8
  %211 = load i64, i64* %165, align 8
  %212 = sub i64 %210, %211
  %213 = ashr exact i64 %212, 2
  %214 = icmp ult i64 %209, %213
  br i1 %214, label %174, label %168

215:                                              ; preds = %150, %170
  %216 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %12, align 8
  %217 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %216, i64 %152, i32 1
  %218 = load i64, i64* %217, align 8
  %219 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %216, i64 %153, i32 1
  %220 = load i64, i64* %219, align 8
  %221 = icmp ugt i64 %218, %220
  %222 = select i1 %221, i64 %152, i64 %153
  %223 = add nuw i64 %152, 1
  %224 = icmp eq i64 %223, %1
  br i1 %224, label %14, label %150

225:                                              ; preds = %289, %143
  %226 = phi i64 [ %15, %143 ], [ %324, %289 ]
  %227 = load i64, i64* %144, align 8
  %228 = load i64, i64* %145, align 8
  %229 = sub i64 %227, %228
  %230 = sdiv exact i64 %229, 40
  %231 = icmp ult i64 %230, %2
  %232 = icmp ult i64 %230, %1
  %233 = and i1 %231, %232
  br i1 %233, label %234, label %327

234:                                              ; preds = %225
  %235 = trunc i64 %230 to i32
  %236 = load i32*, i32** %146, align 8
  %237 = getelementptr inbounds i32, i32* %236, i64 %226
  store i32 %235, i32* %237, align 4
  %238 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %147, align 8
  %239 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %238, i64 %226
  %240 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %18, align 8
  %241 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %148, align 8
  %242 = icmp eq %"struct.jxl::Histogram"* %240, %241
  br i1 %242, label %288, label %243

243:                                              ; preds = %234
  %244 = bitcast %"struct.jxl::Histogram"* %240 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %244, i8 0, i64 24, i1 false) #13
  %245 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %238, i64 %226, i32 0, i32 0, i32 1
  %246 = bitcast i32** %245 to i64*
  %247 = load i64, i64* %246, align 8
  %248 = bitcast %"struct.jxl::Histogram"* %239 to i64*
  %249 = load i64, i64* %248, align 8
  %250 = sub i64 %247, %249
  %251 = ashr exact i64 %250, 2
  %252 = icmp eq i64 %250, 0
  br i1 %252, label %280, label %253

253:                                              ; preds = %243
  %254 = icmp ugt i64 %251, 4611686018427387903
  br i1 %254, label %255, label %257

255:                                              ; preds = %253
  %256 = bitcast %"struct.jxl::Histogram"* %240 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %256) #14
  unreachable

257:                                              ; preds = %253
  %258 = call i8* @_Znwm(i64 %250) #12
  %259 = bitcast i8* %258 to i32*
  %260 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %240, i64 0, i32 0, i32 0, i32 1
  %261 = bitcast i32** %260 to i8**
  store i8* %258, i8** %261, align 8
  %262 = bitcast %"struct.jxl::Histogram"* %240 to i8**
  store i8* %258, i8** %262, align 8
  %263 = getelementptr inbounds i32, i32* %259, i64 %251
  %264 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %240, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store i32* %263, i32** %264, align 8
  %265 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %239, i64 0, i32 0, i32 0, i32 0
  %266 = load i32*, i32** %265, align 8
  %267 = load i64, i64* %246, align 8
  %268 = bitcast i32** %260 to i64*
  %269 = ptrtoint i8* %258 to i64
  %270 = ptrtoint i32* %266 to i64
  %271 = sub i64 %267, %270
  %272 = icmp sgt i64 %271, 0
  br i1 %272, label %273, label %278

273:                                              ; preds = %257
  %274 = lshr exact i64 %271, 2
  %275 = bitcast i32* %266 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %258, i8* align 4 %275, i64 %271, i1 false) #13
  %276 = getelementptr inbounds i32, i32* %259, i64 %274
  %277 = ptrtoint i32* %276 to i64
  br label %278

278:                                              ; preds = %273, %257
  %279 = phi i64 [ %277, %273 ], [ %269, %257 ]
  store i64 %279, i64* %268, align 8
  br label %280

280:                                              ; preds = %278, %243
  %281 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %240, i64 0, i32 1
  %282 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %238, i64 %226, i32 1
  %283 = bitcast i64* %281 to i8*
  %284 = bitcast i64* %282 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %283, i8* align 8 %284, i64 12, i1 false) #13
  %285 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %240, i64 1
  %286 = ptrtoint %"struct.jxl::Histogram"* %285 to i64
  store i64 %286, i64* %144, align 8
  br label %287

287:                                              ; preds = %288, %280
  br label %294

288:                                              ; preds = %234
  call void @_ZNSt3__16vectorIN3jxl9HistogramENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector.4"* %4, %"struct.jxl::Histogram"* dereferenceable(40) %239) #13
  br label %287

289:                                              ; preds = %323
  %290 = load float*, float** %36, align 8
  %291 = getelementptr inbounds float, float* %290, i64 %324
  %292 = load float, float* %291, align 4
  %293 = fcmp olt float %292, %3
  br i1 %293, label %327, label %225

294:                                              ; preds = %287, %323
  %295 = phi i64 [ %325, %323 ], [ 0, %287 ]
  %296 = phi i64 [ %324, %323 ], [ 0, %287 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %149)
  %297 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %147, align 8
  %298 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %297, i64 %295
  %299 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %18, align 8
  %300 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %299, i64 -1
  %301 = call float @_ZN3jxl8N_SCALAR17HistogramDistanceERKNS_9HistogramES3_(%"struct.jxl::Histogram"* dereferenceable(40) %298, %"struct.jxl::Histogram"* dereferenceable(40) %300)
  store float %301, float* %9, align 4
  %302 = load float*, float** %36, align 8
  %303 = getelementptr inbounds float, float* %302, i64 %295
  %304 = load float, float* %303, align 4
  %305 = fcmp olt float %304, %301
  %306 = select i1 %305, float* %303, float* %9
  %307 = bitcast float* %306 to i32*
  %308 = load i32, i32* %307, align 4
  %309 = bitcast float* %303 to i32*
  store i32 %308, i32* %309, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %149)
  %310 = load i32*, i32** %146, align 8
  %311 = getelementptr inbounds i32, i32* %310, i64 %295
  %312 = load i32, i32* %311, align 4
  %313 = zext i32 %312 to i64
  %314 = icmp eq i64 %313, %2
  br i1 %314, label %315, label %323

315:                                              ; preds = %294
  %316 = load float*, float** %36, align 8
  %317 = getelementptr inbounds float, float* %316, i64 %295
  %318 = load float, float* %317, align 4
  %319 = getelementptr inbounds float, float* %316, i64 %296
  %320 = load float, float* %319, align 4
  %321 = fcmp ogt float %318, %320
  br i1 %321, label %322, label %323

322:                                              ; preds = %315
  br label %323

323:                                              ; preds = %294, %315, %322
  %324 = phi i64 [ %296, %294 ], [ %295, %322 ], [ %296, %315 ]
  %325 = add nuw i64 %295, 1
  %326 = icmp eq i64 %325, %1
  br i1 %326, label %289, label %294

327:                                              ; preds = %225, %289
  br i1 %10, label %328, label %336

328:                                              ; preds = %495, %327
  %329 = load float*, float** %36, align 8
  %330 = icmp eq float* %329, null
  br i1 %330, label %335, label %331

331:                                              ; preds = %328
  %332 = ptrtoint float* %329 to i64
  %333 = bitcast float** %37 to i64*
  store i64 %332, i64* %333, align 8
  %334 = bitcast float* %329 to i8*
  call void @_ZdlPv(i8* %334) #12
  br label %335

335:                                              ; preds = %328, %331
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %35) #13
  ret void

336:                                              ; preds = %327, %495
  %337 = phi i64 [ %496, %495 ], [ 0, %327 ]
  %338 = load i32*, i32** %146, align 8
  %339 = getelementptr inbounds i32, i32* %338, i64 %337
  %340 = load i32, i32* %339, align 4
  %341 = zext i32 %340 to i64
  %342 = icmp eq i64 %341, %2
  br i1 %342, label %343, label %495

343:                                              ; preds = %336
  %344 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %147, align 8
  %345 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %344, i64 %337
  %346 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %16, align 8
  %347 = call float @_ZN3jxl8N_SCALAR17HistogramDistanceERKNS_9HistogramES3_(%"struct.jxl::Histogram"* dereferenceable(40) %345, %"struct.jxl::Histogram"* dereferenceable(40) %346)
  %348 = load i64, i64* %144, align 8
  %349 = load i64, i64* %145, align 8
  %350 = sub i64 %348, %349
  %351 = sdiv exact i64 %350, 40
  %352 = icmp ugt i64 %351, 1
  %353 = inttoptr i64 %349 to %"struct.jxl::Histogram"*
  br i1 %352, label %476, label %356

354:                                              ; preds = %476
  %355 = inttoptr i64 %490 to %"struct.jxl::Histogram"*
  br label %356

356:                                              ; preds = %354, %343
  %357 = phi %"struct.jxl::Histogram"* [ %353, %343 ], [ %355, %354 ]
  %358 = phi i64 [ 0, %343 ], [ %486, %354 ]
  %359 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %357, i64 %358
  %360 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %147, align 8
  %361 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %360, i64 %337
  %362 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %360, i64 %337, i32 0, i32 0, i32 1
  %363 = bitcast i32** %362 to i64*
  %364 = load i64, i64* %363, align 8
  %365 = bitcast %"struct.jxl::Histogram"* %361 to i64*
  %366 = load i64, i64* %365, align 8
  %367 = sub i64 %364, %366
  %368 = ashr exact i64 %367, 2
  %369 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %357, i64 %358, i32 0, i32 0, i32 1
  %370 = bitcast i32** %369 to i64*
  %371 = load i64, i64* %370, align 8
  %372 = bitcast %"struct.jxl::Histogram"* %359 to i64*
  %373 = load i64, i64* %372, align 8
  %374 = sub i64 %371, %373
  %375 = ashr exact i64 %374, 2
  %376 = icmp ugt i64 %368, %375
  br i1 %376, label %377, label %382

377:                                              ; preds = %356
  %378 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %359, i64 0, i32 0
  %379 = sub nsw i64 %368, %375
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector"* %378, i64 %379) #13
  %380 = load i64, i64* %363, align 8
  %381 = load i64, i64* %365, align 8
  br label %382

382:                                              ; preds = %377, %356
  %383 = phi i64 [ %381, %377 ], [ %366, %356 ]
  %384 = phi i64 [ %380, %377 ], [ %364, %356 ]
  %385 = icmp eq i64 %384, %383
  br i1 %385, label %404, label %386

386:                                              ; preds = %382
  %387 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %359, i64 0, i32 0, i32 0, i32 0
  br label %388

388:                                              ; preds = %388, %386
  %389 = phi i64 [ %383, %386 ], [ %400, %388 ]
  %390 = phi i64 [ 0, %386 ], [ %398, %388 ]
  %391 = inttoptr i64 %389 to i32*
  %392 = getelementptr inbounds i32, i32* %391, i64 %390
  %393 = load i32, i32* %392, align 4
  %394 = load i32*, i32** %387, align 8
  %395 = getelementptr inbounds i32, i32* %394, i64 %390
  %396 = load i32, i32* %395, align 4
  %397 = add nsw i32 %396, %393
  store i32 %397, i32* %395, align 4
  %398 = add nuw i64 %390, 1
  %399 = load i64, i64* %363, align 8
  %400 = load i64, i64* %365, align 8
  %401 = sub i64 %399, %400
  %402 = ashr exact i64 %401, 2
  %403 = icmp ult i64 %398, %402
  br i1 %403, label %388, label %404

404:                                              ; preds = %388, %382
  %405 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %360, i64 %337, i32 1
  %406 = load i64, i64* %405, align 8
  %407 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %357, i64 %358, i32 1
  %408 = load i64, i64* %407, align 8
  %409 = add i64 %408, %406
  store i64 %409, i64* %407, align 8
  %410 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %16, align 8
  %411 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %410, i64 %358, i32 2
  store float 0.000000e+00, float* %411, align 8
  %412 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %410, i64 %358, i32 1
  %413 = load i64, i64* %412, align 8
  %414 = icmp eq i64 %413, 0
  br i1 %414, label %472, label %415

415:                                              ; preds = %404
  %416 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %410, i64 %358
  %417 = uitofp i64 %413 to float
  %418 = fdiv float 1.000000e+00, %417
  %419 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %410, i64 %358, i32 0, i32 0, i32 1
  %420 = bitcast i32** %419 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = bitcast %"struct.jxl::Histogram"* %416 to i64*
  %423 = load i64, i64* %422, align 8
  %424 = icmp eq i64 %421, %423
  br i1 %424, label %427, label %431

425:                                              ; preds = %431
  %426 = load float, float* %411, align 8
  br label %427

427:                                              ; preds = %425, %415
  %428 = phi float [ 0.000000e+00, %415 ], [ %426, %425 ]
  %429 = phi float [ 0.000000e+00, %415 ], [ %465, %425 ]
  %430 = fadd float %428, %429
  store float %430, float* %411, align 8
  br label %472

431:                                              ; preds = %415, %431
  %432 = phi i64 [ %468, %431 ], [ %423, %415 ]
  %433 = phi i64 [ %466, %431 ], [ 0, %415 ]
  %434 = phi float [ %465, %431 ], [ 0.000000e+00, %415 ]
  %435 = inttoptr i64 %432 to i32*
  %436 = getelementptr inbounds i32, i32* %435, i64 %433
  %437 = load i32, i32* %436, align 4, !alias.scope !180
  %438 = sitofp i32 %437 to float
  %439 = fcmp une float %438, %417
  %440 = fmul float %418, %438
  %441 = bitcast float %440 to i32
  %442 = add i32 %441, -1059760811
  %443 = lshr i32 %442, 23
  %444 = ashr i32 %442, 31
  %445 = shl nsw i32 %444, 8
  %446 = or i32 %445, %443
  %447 = shl i32 %446, 23
  %448 = sub i32 %441, %447
  %449 = bitcast i32 %448 to float
  %450 = sitofp i32 %446 to float
  %451 = fadd float %449, -1.000000e+00
  fence acq_rel
  %452 = insertelement <2 x float> undef, float %451, i32 0
  %453 = shufflevector <2 x float> %452, <2 x float> undef, <2 x i32> zeroinitializer
  %454 = fmul <2 x float> %453, <float 0x3FE7C238E0000000, float 0x3FC648B180000000>
  %455 = fadd <2 x float> %454, <float 0x3FF6DC0560000000, float 0x3FF0279DA0000000>
  fence acq_rel
  %456 = fmul <2 x float> %453, %455
  %457 = fadd <2 x float> %456, <float 0xBEBF0B5600000000, float 0x3FEFB0C4A0000000>
  fence acq_rel
  %458 = extractelement <2 x float> %457, i32 0
  %459 = extractelement <2 x float> %457, i32 1
  %460 = fdiv float %458, %459
  %461 = fadd float %460, %450
  %462 = fmul float %461, %438
  %463 = fsub float 0.000000e+00, %462
  %464 = select i1 %439, float %463, float 0.000000e+00
  %465 = fadd float %434, %464
  %466 = add nuw i64 %433, 1
  %467 = load i64, i64* %420, align 8
  %468 = load i64, i64* %422, align 8
  %469 = sub i64 %467, %468
  %470 = ashr exact i64 %469, 2
  %471 = icmp ult i64 %466, %470
  br i1 %471, label %431, label %425

472:                                              ; preds = %404, %427
  %473 = trunc i64 %358 to i32
  %474 = load i32*, i32** %146, align 8
  %475 = getelementptr inbounds i32, i32* %474, i64 %337
  store i32 %473, i32* %475, align 4
  br label %495

476:                                              ; preds = %343, %476
  %477 = phi %"struct.jxl::Histogram"* [ %494, %476 ], [ %353, %343 ]
  %478 = phi i64 [ %488, %476 ], [ 1, %343 ]
  %479 = phi float [ %487, %476 ], [ %347, %343 ]
  %480 = phi i64 [ %486, %476 ], [ 0, %343 ]
  %481 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %147, align 8
  %482 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %481, i64 %337
  %483 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %477, i64 %478
  %484 = call float @_ZN3jxl8N_SCALAR17HistogramDistanceERKNS_9HistogramES3_(%"struct.jxl::Histogram"* dereferenceable(40) %482, %"struct.jxl::Histogram"* dereferenceable(40) %483)
  %485 = fcmp olt float %484, %479
  %486 = select i1 %485, i64 %478, i64 %480
  %487 = select i1 %485, float %484, float %479
  %488 = add nuw i64 %478, 1
  %489 = load i64, i64* %144, align 8
  %490 = load i64, i64* %145, align 8
  %491 = sub i64 %489, %490
  %492 = sdiv exact i64 %491, 40
  %493 = icmp ult i64 %488, %492
  %494 = inttoptr i64 %490 to %"struct.jxl::Histogram"*
  br i1 %493, label %476, label %354

495:                                              ; preds = %336, %472
  %496 = add nuw i64 %337, 1
  %497 = icmp eq i64 %496, %1
  br i1 %497, label %328, label %336
}

; Function Attrs: nounwind ssp uwtable
define hidden float @_ZNK3jxl9Histogram14ShannonEntropyEv(%"struct.jxl::Histogram"*) local_unnamed_addr #2 align 2 {
  %2 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %3 = and i32 %2, 2225
  %4 = tail call i32 @llvm.cttz.i32(i32 %3, i1 true) #13, !range !185
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds [12 x void (%"struct.jxl::Histogram"*)*], [12 x void (%"struct.jxl::Histogram"*)*]* @_ZN3jxlL36HistogramEntropyHighwayDispatchTableE, i64 0, i64 %5
  %7 = load void (%"struct.jxl::Histogram"*)*, void (%"struct.jxl::Histogram"*)** %6, align 8
  tail call void %7(%"struct.jxl::Histogram"* dereferenceable(40) %0) #13
  %8 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %0, i64 0, i32 2
  %9 = load float, float* %8, align 8
  ret float %9
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3jxl17ClusterHistogramsENS_15HistogramParamsERKNSt3__16vectorINS_9HistogramENS1_9allocatorIS3_EEEEmmPS6_PNS2_IjNS4_IjEEEE(%"struct.jxl::HistogramParams"* nocapture readonly, %"class.std::__1::vector.4"* dereferenceable(24), i64, i64, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*) local_unnamed_addr #2 {
  %7 = alloca %"class.std::__1::vector.4", align 8
  %8 = alloca %"class.std::__1::map", align 8
  %9 = alloca %"class.std::__1::vector.11", align 8
  %10 = alloca %"class.std::__1::vector.11", align 8
  %11 = alloca %"class.std::__1::priority_queue", align 8
  %12 = alloca %"struct.jxl::Histogram", align 8
  %13 = alloca %struct.HistogramPair, align 4
  %14 = alloca %"struct.jxl::Histogram", align 8
  %15 = alloca %struct.HistogramPair, align 4
  %16 = alloca %"class.std::__1::vector.11", align 8
  %17 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %0, i64 0, i32 5
  %18 = load i64, i64* %17, align 8
  %19 = icmp ult i64 %18, %3
  %20 = select i1 %19, i64 %18, i64 %3
  %21 = getelementptr inbounds %"struct.jxl::HistogramParams", %"struct.jxl::HistogramParams"* %0, i64 0, i32 0
  %22 = load i32, i32* %21, align 8
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %31

24:                                               ; preds = %6
  %25 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %26 = and i32 %25, 2225
  %27 = tail call i32 @llvm.cttz.i32(i32 %26, i1 true) #13, !range !185
  %28 = zext i32 %27 to i64
  %29 = getelementptr inbounds [12 x void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)*], [12 x void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)*]* @_ZN3jxlL41FastClusterHistogramsHighwayDispatchTableE, i64 0, i64 %28
  %30 = load void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)*, void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)** %29, align 8
  tail call void %30(%"class.std::__1::vector.4"* dereferenceable(24) %1, i64 %2, i64 4, float 6.400000e+01, %"class.std::__1::vector.4"* %4, %"class.std::__1::vector.11"* %5) #13
  br label %1073

31:                                               ; preds = %6
  %32 = icmp eq i32 %22, 1
  %33 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %34 = and i32 %33, 2225
  %35 = tail call i32 @llvm.cttz.i32(i32 %34, i1 true) #13, !range !185
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds [12 x void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)*], [12 x void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)*]* @_ZN3jxlL41FastClusterHistogramsHighwayDispatchTableE, i64 0, i64 %36
  %38 = load void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)*, void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)** %37, align 8
  br i1 %32, label %39, label %40

39:                                               ; preds = %31
  tail call void %38(%"class.std::__1::vector.4"* dereferenceable(24) %1, i64 %2, i64 %20, float 6.400000e+01, %"class.std::__1::vector.4"* %4, %"class.std::__1::vector.11"* %5) #13
  br label %1073

40:                                               ; preds = %31
  tail call void %38(%"class.std::__1::vector.4"* dereferenceable(24) %1, i64 %2, i64 %20, float 1.600000e+01, %"class.std::__1::vector.4"* %4, %"class.std::__1::vector.11"* %5) #13
  %41 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %4, i64 0, i32 0, i32 1
  %42 = bitcast %"struct.jxl::Histogram"** %41 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = bitcast %"class.std::__1::vector.4"* %4 to i64*
  %45 = load i64, i64* %44, align 8
  %46 = icmp eq i64 %43, %45
  %47 = inttoptr i64 %45 to %"struct.jxl::Histogram"*
  br i1 %46, label %52, label %48

48:                                               ; preds = %40
  %49 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %4, i64 0, i32 0, i32 0
  br label %302

50:                                               ; preds = %302
  %51 = inttoptr i64 %318 to %"struct.jxl::Histogram"*
  br label %52

52:                                               ; preds = %50, %40
  %53 = phi %"struct.jxl::Histogram"* [ %47, %40 ], [ %51, %50 ]
  %54 = phi i64 [ %45, %40 ], [ %318, %50 ]
  %55 = phi i64 [ %43, %40 ], [ %317, %50 ]
  %56 = phi i64 [ 0, %40 ], [ %319, %50 ]
  %57 = phi i64 [ 0, %40 ], [ %320, %50 ]
  %58 = bitcast %"class.std::__1::vector.11"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %58) #13
  %59 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %9, i64 0, i32 0, i32 0
  %60 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %9, i64 0, i32 0, i32 1
  %61 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %58, i8 0, i64 24, i1 false) #13
  %62 = icmp eq i64 %56, 0
  br i1 %62, label %161, label %63

63:                                               ; preds = %52
  %64 = icmp ugt i64 %57, 4611686018427387903
  br i1 %64, label %65, label %67

65:                                               ; preds = %63
  %66 = bitcast %"class.std::__1::vector.11"* %9 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %66) #14
  unreachable

67:                                               ; preds = %63
  %68 = shl nsw i64 %57, 2
  %69 = tail call i8* @_Znwm(i64 %68) #12
  %70 = bitcast i8* %69 to i32*
  %71 = bitcast i32** %60 to i8**
  store i8* %69, i8** %71, align 8
  %72 = bitcast %"class.std::__1::vector.11"* %9 to i8**
  store i8* %69, i8** %72, align 8
  %73 = getelementptr inbounds i32, i32* %70, i64 %57
  store i32* %73, i32** %61, align 8
  %74 = shl nsw i64 %57, 2
  %75 = add nsw i64 %74, -4
  %76 = lshr exact i64 %75, 2
  %77 = add nuw nsw i64 %76, 1
  %78 = icmp ult i64 %77, 8
  br i1 %78, label %149, label %79

79:                                               ; preds = %67
  %80 = and i64 %77, 9223372036854775800
  %81 = getelementptr i32, i32* %70, i64 %80
  %82 = add nsw i64 %80, -8
  %83 = lshr exact i64 %82, 3
  %84 = add nuw nsw i64 %83, 1
  %85 = and i64 %84, 7
  %86 = icmp ult i64 %82, 56
  br i1 %86, label %134, label %87

87:                                               ; preds = %79
  %88 = sub nsw i64 %84, %85
  br label %89

89:                                               ; preds = %89, %87
  %90 = phi i64 [ 0, %87 ], [ %131, %89 ]
  %91 = phi i64 [ %88, %87 ], [ %132, %89 ]
  %92 = getelementptr i32, i32* %70, i64 %90
  %93 = bitcast i32* %92 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %93, align 4
  %94 = getelementptr i32, i32* %92, i64 4
  %95 = bitcast i32* %94 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %95, align 4
  %96 = or i64 %90, 8
  %97 = getelementptr i32, i32* %70, i64 %96
  %98 = bitcast i32* %97 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %98, align 4
  %99 = getelementptr i32, i32* %97, i64 4
  %100 = bitcast i32* %99 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %100, align 4
  %101 = or i64 %90, 16
  %102 = getelementptr i32, i32* %70, i64 %101
  %103 = bitcast i32* %102 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %103, align 4
  %104 = getelementptr i32, i32* %102, i64 4
  %105 = bitcast i32* %104 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %105, align 4
  %106 = or i64 %90, 24
  %107 = getelementptr i32, i32* %70, i64 %106
  %108 = bitcast i32* %107 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %108, align 4
  %109 = getelementptr i32, i32* %107, i64 4
  %110 = bitcast i32* %109 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %110, align 4
  %111 = or i64 %90, 32
  %112 = getelementptr i32, i32* %70, i64 %111
  %113 = bitcast i32* %112 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %113, align 4
  %114 = getelementptr i32, i32* %112, i64 4
  %115 = bitcast i32* %114 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %115, align 4
  %116 = or i64 %90, 40
  %117 = getelementptr i32, i32* %70, i64 %116
  %118 = bitcast i32* %117 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %118, align 4
  %119 = getelementptr i32, i32* %117, i64 4
  %120 = bitcast i32* %119 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %120, align 4
  %121 = or i64 %90, 48
  %122 = getelementptr i32, i32* %70, i64 %121
  %123 = bitcast i32* %122 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %123, align 4
  %124 = getelementptr i32, i32* %122, i64 4
  %125 = bitcast i32* %124 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %125, align 4
  %126 = or i64 %90, 56
  %127 = getelementptr i32, i32* %70, i64 %126
  %128 = bitcast i32* %127 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %128, align 4
  %129 = getelementptr i32, i32* %127, i64 4
  %130 = bitcast i32* %129 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %130, align 4
  %131 = add i64 %90, 64
  %132 = add i64 %91, -8
  %133 = icmp eq i64 %132, 0
  br i1 %133, label %134, label %89, !llvm.loop !186

134:                                              ; preds = %89, %79
  %135 = phi i64 [ 0, %79 ], [ %131, %89 ]
  %136 = icmp eq i64 %85, 0
  br i1 %136, label %147, label %137

137:                                              ; preds = %134, %137
  %138 = phi i64 [ %144, %137 ], [ %135, %134 ]
  %139 = phi i64 [ %145, %137 ], [ %85, %134 ]
  %140 = getelementptr i32, i32* %70, i64 %138
  %141 = bitcast i32* %140 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %141, align 4
  %142 = getelementptr i32, i32* %140, i64 4
  %143 = bitcast i32* %142 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %143, align 4
  %144 = add i64 %138, 8
  %145 = add i64 %139, -1
  %146 = icmp eq i64 %145, 0
  br i1 %146, label %147, label %137, !llvm.loop !187

147:                                              ; preds = %137, %134
  %148 = icmp eq i64 %77, %80
  br i1 %148, label %155, label %149

149:                                              ; preds = %147, %67
  %150 = phi i32* [ %70, %67 ], [ %81, %147 ]
  br label %151

151:                                              ; preds = %149, %151
  %152 = phi i32* [ %153, %151 ], [ %150, %149 ]
  store i32 1, i32* %152, align 4
  %153 = getelementptr inbounds i32, i32* %152, i64 1
  %154 = icmp eq i32* %153, %73
  br i1 %154, label %155, label %151, !llvm.loop !188

155:                                              ; preds = %151, %147
  %156 = bitcast i32** %60 to i64*
  %157 = ptrtoint i32* %73 to i64
  store i64 %157, i64* %156, align 8
  %158 = load i64, i64* %42, align 8
  %159 = load i64, i64* %44, align 8
  %160 = inttoptr i64 %159 to %"struct.jxl::Histogram"*
  br label %161

161:                                              ; preds = %52, %155
  %162 = phi %"struct.jxl::Histogram"* [ %53, %52 ], [ %160, %155 ]
  %163 = phi i64 [ %54, %52 ], [ %159, %155 ]
  %164 = phi i64 [ %55, %52 ], [ %158, %155 ]
  %165 = bitcast %"class.std::__1::vector.11"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %165) #13
  %166 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %10, i64 0, i32 0, i32 0
  %167 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %10, i64 0, i32 0, i32 1
  %168 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %10, i64 0, i32 0, i32 2, i32 0, i32 0
  %169 = sub i64 %164, %163
  %170 = sdiv exact i64 %169, 40
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %165, i8 0, i64 24, i1 false) #13
  %171 = icmp eq i64 %169, 0
  br i1 %171, label %275, label %172

172:                                              ; preds = %161
  %173 = icmp ugt i64 %170, 4611686018427387903
  br i1 %173, label %174, label %176

174:                                              ; preds = %172
  %175 = bitcast %"class.std::__1::vector.11"* %10 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %175) #14
  unreachable

176:                                              ; preds = %172
  %177 = shl nsw i64 %170, 2
  %178 = tail call i8* @_Znwm(i64 %177) #12
  %179 = bitcast i8* %178 to i32*
  %180 = bitcast %"class.std::__1::vector.11"* %10 to i8**
  store i8* %178, i8** %180, align 8
  %181 = getelementptr inbounds i32, i32* %179, i64 %170
  store i32* %181, i32** %168, align 8
  %182 = bitcast i32** %167 to i64*
  %183 = ptrtoint i8* %178 to i64
  %184 = add nsw i64 %170, -1
  %185 = getelementptr i32, i32* %179, i64 %184
  %186 = ptrtoint i32* %185 to i64
  %187 = sub i64 4, %183
  %188 = add i64 %187, %186
  %189 = and i64 %188, -4
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %178, i8 0, i64 %189, i1 false) #13
  %190 = ptrtoint i32* %181 to i64
  store i64 %190, i64* %182, align 8
  %191 = icmp eq i32* %181, %179
  br i1 %191, label %275, label %192

192:                                              ; preds = %176
  %193 = shl nsw i64 %170, 2
  %194 = add nsw i64 %193, -4
  %195 = lshr exact i64 %194, 2
  %196 = add nuw nsw i64 %195, 1
  %197 = icmp ult i64 %196, 8
  br i1 %197, label %262, label %198

198:                                              ; preds = %192
  %199 = and i64 %196, 9223372036854775800
  %200 = trunc i64 %199 to i32
  %201 = getelementptr i32, i32* %179, i64 %199
  %202 = add nsw i64 %199, -8
  %203 = lshr exact i64 %202, 3
  %204 = add nuw nsw i64 %203, 1
  %205 = and i64 %204, 3
  %206 = icmp ult i64 %202, 24
  br i1 %206, label %243, label %207

207:                                              ; preds = %198
  %208 = sub nsw i64 %204, %205
  br label %209

209:                                              ; preds = %209, %207
  %210 = phi i64 [ 0, %207 ], [ %239, %209 ]
  %211 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %207 ], [ %240, %209 ]
  %212 = phi i64 [ %208, %207 ], [ %241, %209 ]
  %213 = add <4 x i32> %211, <i32 4, i32 4, i32 4, i32 4>
  %214 = getelementptr i32, i32* %179, i64 %210
  %215 = bitcast i32* %214 to <4 x i32>*
  store <4 x i32> %211, <4 x i32>* %215, align 4
  %216 = getelementptr i32, i32* %214, i64 4
  %217 = bitcast i32* %216 to <4 x i32>*
  store <4 x i32> %213, <4 x i32>* %217, align 4
  %218 = or i64 %210, 8
  %219 = add <4 x i32> %211, <i32 8, i32 8, i32 8, i32 8>
  %220 = add <4 x i32> %211, <i32 12, i32 12, i32 12, i32 12>
  %221 = getelementptr i32, i32* %179, i64 %218
  %222 = bitcast i32* %221 to <4 x i32>*
  store <4 x i32> %219, <4 x i32>* %222, align 4
  %223 = getelementptr i32, i32* %221, i64 4
  %224 = bitcast i32* %223 to <4 x i32>*
  store <4 x i32> %220, <4 x i32>* %224, align 4
  %225 = or i64 %210, 16
  %226 = add <4 x i32> %211, <i32 16, i32 16, i32 16, i32 16>
  %227 = add <4 x i32> %211, <i32 20, i32 20, i32 20, i32 20>
  %228 = getelementptr i32, i32* %179, i64 %225
  %229 = bitcast i32* %228 to <4 x i32>*
  store <4 x i32> %226, <4 x i32>* %229, align 4
  %230 = getelementptr i32, i32* %228, i64 4
  %231 = bitcast i32* %230 to <4 x i32>*
  store <4 x i32> %227, <4 x i32>* %231, align 4
  %232 = or i64 %210, 24
  %233 = add <4 x i32> %211, <i32 24, i32 24, i32 24, i32 24>
  %234 = add <4 x i32> %211, <i32 28, i32 28, i32 28, i32 28>
  %235 = getelementptr i32, i32* %179, i64 %232
  %236 = bitcast i32* %235 to <4 x i32>*
  store <4 x i32> %233, <4 x i32>* %236, align 4
  %237 = getelementptr i32, i32* %235, i64 4
  %238 = bitcast i32* %237 to <4 x i32>*
  store <4 x i32> %234, <4 x i32>* %238, align 4
  %239 = add i64 %210, 32
  %240 = add <4 x i32> %211, <i32 32, i32 32, i32 32, i32 32>
  %241 = add i64 %212, -4
  %242 = icmp eq i64 %241, 0
  br i1 %242, label %243, label %209, !llvm.loop !189

243:                                              ; preds = %209, %198
  %244 = phi i64 [ 0, %198 ], [ %239, %209 ]
  %245 = phi <4 x i32> [ <i32 0, i32 1, i32 2, i32 3>, %198 ], [ %240, %209 ]
  %246 = icmp eq i64 %205, 0
  br i1 %246, label %260, label %247

247:                                              ; preds = %243, %247
  %248 = phi i64 [ %256, %247 ], [ %244, %243 ]
  %249 = phi <4 x i32> [ %257, %247 ], [ %245, %243 ]
  %250 = phi i64 [ %258, %247 ], [ %205, %243 ]
  %251 = add <4 x i32> %249, <i32 4, i32 4, i32 4, i32 4>
  %252 = getelementptr i32, i32* %179, i64 %248
  %253 = bitcast i32* %252 to <4 x i32>*
  store <4 x i32> %249, <4 x i32>* %253, align 4
  %254 = getelementptr i32, i32* %252, i64 4
  %255 = bitcast i32* %254 to <4 x i32>*
  store <4 x i32> %251, <4 x i32>* %255, align 4
  %256 = add i64 %248, 8
  %257 = add <4 x i32> %249, <i32 8, i32 8, i32 8, i32 8>
  %258 = add i64 %250, -1
  %259 = icmp eq i64 %258, 0
  br i1 %259, label %260, label %247, !llvm.loop !190

260:                                              ; preds = %247, %243
  %261 = icmp eq i64 %196, %199
  br i1 %261, label %271, label %262

262:                                              ; preds = %260, %192
  %263 = phi i32 [ 0, %192 ], [ %200, %260 ]
  %264 = phi i32* [ %179, %192 ], [ %201, %260 ]
  br label %265

265:                                              ; preds = %262, %265
  %266 = phi i32 [ %269, %265 ], [ %263, %262 ]
  %267 = phi i32* [ %268, %265 ], [ %264, %262 ]
  store i32 %266, i32* %267, align 4
  %268 = getelementptr inbounds i32, i32* %267, i64 1
  %269 = add nuw nsw i32 %266, 1
  %270 = icmp eq i32* %268, %181
  br i1 %270, label %271, label %265, !llvm.loop !191

271:                                              ; preds = %265, %260
  %272 = load i64, i64* %42, align 8
  %273 = load i64, i64* %44, align 8
  %274 = inttoptr i64 %273 to %"struct.jxl::Histogram"*
  br label %275

275:                                              ; preds = %161, %271, %176
  %276 = phi %"struct.jxl::Histogram"* [ %274, %271 ], [ %162, %176 ], [ %162, %161 ]
  %277 = phi i64 [ %273, %271 ], [ %163, %176 ], [ %163, %161 ]
  %278 = phi i64 [ %272, %271 ], [ %164, %176 ], [ %164, %161 ]
  %279 = bitcast %"class.std::__1::priority_queue"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %279) #13
  %280 = getelementptr inbounds %"class.std::__1::priority_queue", %"class.std::__1::priority_queue"* %11, i64 0, i32 0, i32 0, i32 0
  %281 = getelementptr inbounds %"class.std::__1::priority_queue", %"class.std::__1::priority_queue"* %11, i64 0, i32 0, i32 0, i32 1
  %282 = getelementptr inbounds %"class.std::__1::priority_queue", %"class.std::__1::priority_queue"* %11, i64 0, i32 1, i32 0
  %283 = bitcast i8* %282 to i64*
  store i64 -6148914691236517206, i64* %283, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %279, i8 0, i64 24, i1 false) #13
  %284 = icmp eq i64 %278, %277
  br i1 %284, label %927, label %285

285:                                              ; preds = %275
  %286 = bitcast %"struct.jxl::Histogram"* %12 to i8*
  %287 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %12, i64 0, i32 0
  %288 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %12, i64 0, i32 0, i32 0, i32 0
  %289 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %12, i64 0, i32 0, i32 0, i32 1
  %290 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %12, i64 0, i32 1
  %291 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %12, i64 0, i32 2
  %292 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %12, i64 0, i32 3, i64 0
  %293 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %4, i64 0, i32 0, i32 0
  %294 = bitcast i32** %289 to i64*
  %295 = bitcast %"struct.jxl::Histogram"* %12 to i64*
  %296 = bitcast %struct.HistogramPair* %13 to i8*
  %297 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %13, i64 0, i32 0
  %298 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %13, i64 0, i32 1
  %299 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %13, i64 0, i32 2
  %300 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %13, i64 0, i32 3
  %301 = bitcast i8* %292 to i32*
  br label %355

302:                                              ; preds = %48, %302
  %303 = phi %"struct.jxl::Histogram"* [ %47, %48 ], [ %322, %302 ]
  %304 = phi i64 [ 0, %48 ], [ %316, %302 ]
  %305 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %303, i64 %304, i32 0, i32 0, i32 0
  %306 = load i32*, i32** %305, align 8
  %307 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %303, i64 %304, i32 0, i32 0, i32 1
  %308 = bitcast i32** %307 to i64*
  %309 = load i64, i64* %308, align 8
  %310 = ptrtoint i32* %306 to i64
  %311 = sub i64 %309, %310
  %312 = ashr exact i64 %311, 2
  %313 = tail call float @_ZN3jxl17ANSPopulationCostEPKim(i32* %306, i64 %312) #13
  %314 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %49, align 8
  %315 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %314, i64 %304, i32 2
  store float %313, float* %315, align 8
  %316 = add nuw i64 %304, 1
  %317 = load i64, i64* %42, align 8
  %318 = load i64, i64* %44, align 8
  %319 = sub i64 %317, %318
  %320 = sdiv exact i64 %319, 40
  %321 = icmp ult i64 %316, %320
  %322 = inttoptr i64 %318 to %"struct.jxl::Histogram"*
  br i1 %321, label %302, label %50

323:                                              ; preds = %483
  %324 = inttoptr i64 %487 to %"struct.jxl::Histogram"*
  br label %325

325:                                              ; preds = %323, %367
  %326 = phi %"struct.jxl::Histogram"* [ %370, %367 ], [ %324, %323 ]
  %327 = phi i64 [ %369, %367 ], [ %489, %323 ]
  %328 = phi %"struct.jxl::Histogram"* [ %356, %367 ], [ %324, %323 ]
  %329 = phi i64 [ %357, %367 ], [ %487, %323 ]
  %330 = phi i64 [ %358, %367 ], [ %486, %323 ]
  %331 = icmp ugt i64 %327, %363
  br i1 %331, label %355, label %332

332:                                              ; preds = %325
  %333 = load %struct.HistogramPair*, %struct.HistogramPair** %280, align 8
  %334 = load %struct.HistogramPair*, %struct.HistogramPair** %281, align 8
  %335 = icmp eq %struct.HistogramPair* %333, %334
  br i1 %335, label %927, label %336

336:                                              ; preds = %332
  %337 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %4, i64 0, i32 0, i32 0
  %338 = bitcast i32** %167 to i64*
  %339 = bitcast %"class.std::__1::vector.11"* %10 to i64*
  %340 = bitcast %"struct.jxl::Histogram"* %14 to i8*
  %341 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %14, i64 0, i32 0
  %342 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %14, i64 0, i32 0, i32 0, i32 0
  %343 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %14, i64 0, i32 0, i32 0, i32 1
  %344 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %14, i64 0, i32 1
  %345 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %14, i64 0, i32 2
  %346 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %14, i64 0, i32 3, i64 0
  %347 = bitcast i32** %343 to i64*
  %348 = bitcast %"struct.jxl::Histogram"* %14 to i64*
  %349 = bitcast %struct.HistogramPair* %15 to i8*
  %350 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %15, i64 0, i32 0
  %351 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %15, i64 0, i32 1
  %352 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %15, i64 0, i32 2
  %353 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %15, i64 0, i32 3
  %354 = bitcast i8* %346 to i32*
  br label %492

355:                                              ; preds = %285, %325
  %356 = phi %"struct.jxl::Histogram"* [ %276, %285 ], [ %328, %325 ]
  %357 = phi i64 [ %277, %285 ], [ %329, %325 ]
  %358 = phi i64 [ %278, %285 ], [ %330, %325 ]
  %359 = phi %"struct.jxl::Histogram"* [ %276, %285 ], [ %326, %325 ]
  %360 = phi i64 [ 0, %285 ], [ %363, %325 ]
  %361 = phi i32 [ 0, %285 ], [ %362, %325 ]
  %362 = add i32 %361, 1
  %363 = zext i32 %362 to i64
  %364 = sub i64 %358, %357
  %365 = sdiv exact i64 %364, 40
  %366 = icmp ugt i64 %365, %363
  br i1 %366, label %371, label %367

367:                                              ; preds = %355
  %368 = sub i64 %358, %357
  %369 = sdiv exact i64 %368, 40
  %370 = inttoptr i64 %357 to %"struct.jxl::Histogram"*
  br label %325

371:                                              ; preds = %355, %483
  %372 = phi %"struct.jxl::Histogram"* [ %491, %483 ], [ %359, %355 ]
  %373 = phi i64 [ %485, %483 ], [ %363, %355 ]
  %374 = phi i32 [ %484, %483 ], [ %362, %355 ]
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %286) #13
  store float 0xFFFFFFFFE0000000, float* %291, align 8
  store i32 -1431655766, i32* %301, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %286, i8 0, i64 32, i1 false) #13
  %375 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %372, i64 %360
  %376 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %372, i64 %360, i32 0, i32 0, i32 1
  %377 = bitcast i32** %376 to i64*
  %378 = load i64, i64* %377, align 8
  %379 = bitcast %"struct.jxl::Histogram"* %375 to i64*
  %380 = load i64, i64* %379, align 8
  %381 = sub i64 %378, %380
  %382 = icmp eq i64 %381, 0
  br i1 %382, label %387, label %383

383:                                              ; preds = %371
  %384 = ashr exact i64 %381, 2
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector"* nonnull %287, i64 %384) #13
  %385 = load i64, i64* %377, align 8
  %386 = load i64, i64* %379, align 8
  br label %387

387:                                              ; preds = %371, %383
  %388 = phi i64 [ %386, %383 ], [ %380, %371 ]
  %389 = phi i64 [ %385, %383 ], [ %378, %371 ]
  %390 = icmp eq i64 %389, %388
  br i1 %390, label %407, label %391

391:                                              ; preds = %387, %391
  %392 = phi i64 [ %403, %391 ], [ %388, %387 ]
  %393 = phi i64 [ %401, %391 ], [ 0, %387 ]
  %394 = inttoptr i64 %392 to i32*
  %395 = getelementptr inbounds i32, i32* %394, i64 %393
  %396 = load i32, i32* %395, align 4
  %397 = load i32*, i32** %288, align 8
  %398 = getelementptr inbounds i32, i32* %397, i64 %393
  %399 = load i32, i32* %398, align 4
  %400 = add nsw i32 %399, %396
  store i32 %400, i32* %398, align 4
  %401 = add nuw i64 %393, 1
  %402 = load i64, i64* %377, align 8
  %403 = load i64, i64* %379, align 8
  %404 = sub i64 %402, %403
  %405 = ashr exact i64 %404, 2
  %406 = icmp ult i64 %401, %405
  br i1 %406, label %391, label %407

407:                                              ; preds = %391, %387
  %408 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %372, i64 %360, i32 1
  %409 = load i64, i64* %408, align 8
  %410 = load i64, i64* %290, align 8
  %411 = add i64 %410, %409
  store i64 %411, i64* %290, align 8
  %412 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %293, align 8
  %413 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %412, i64 %373
  %414 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %412, i64 %373, i32 0, i32 0, i32 1
  %415 = bitcast i32** %414 to i64*
  %416 = load i64, i64* %415, align 8
  %417 = bitcast %"struct.jxl::Histogram"* %413 to i64*
  %418 = load i64, i64* %417, align 8
  %419 = sub i64 %416, %418
  %420 = ashr exact i64 %419, 2
  %421 = load i64, i64* %294, align 8
  %422 = load i64, i64* %295, align 8
  %423 = sub i64 %421, %422
  %424 = ashr exact i64 %423, 2
  %425 = icmp ugt i64 %420, %424
  br i1 %425, label %426, label %430

426:                                              ; preds = %407
  %427 = sub nsw i64 %420, %424
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector"* nonnull %287, i64 %427) #13
  %428 = load i64, i64* %415, align 8
  %429 = load i64, i64* %417, align 8
  br label %430

430:                                              ; preds = %426, %407
  %431 = phi i64 [ %429, %426 ], [ %418, %407 ]
  %432 = phi i64 [ %428, %426 ], [ %416, %407 ]
  %433 = icmp eq i64 %432, %431
  br i1 %433, label %450, label %434

434:                                              ; preds = %430, %434
  %435 = phi i64 [ %446, %434 ], [ %431, %430 ]
  %436 = phi i64 [ %444, %434 ], [ 0, %430 ]
  %437 = inttoptr i64 %435 to i32*
  %438 = getelementptr inbounds i32, i32* %437, i64 %436
  %439 = load i32, i32* %438, align 4
  %440 = load i32*, i32** %288, align 8
  %441 = getelementptr inbounds i32, i32* %440, i64 %436
  %442 = load i32, i32* %441, align 4
  %443 = add nsw i32 %442, %439
  store i32 %443, i32* %441, align 4
  %444 = add nuw i64 %436, 1
  %445 = load i64, i64* %415, align 8
  %446 = load i64, i64* %417, align 8
  %447 = sub i64 %445, %446
  %448 = ashr exact i64 %447, 2
  %449 = icmp ult i64 %444, %448
  br i1 %449, label %434, label %450

450:                                              ; preds = %434, %430
  %451 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %412, i64 %373, i32 1
  %452 = load i64, i64* %451, align 8
  %453 = load i64, i64* %290, align 8
  %454 = add i64 %453, %452
  store i64 %454, i64* %290, align 8
  %455 = load i32*, i32** %288, align 8
  %456 = load i64, i64* %294, align 8
  %457 = ptrtoint i32* %455 to i64
  %458 = sub i64 %456, %457
  %459 = ashr exact i64 %458, 2
  %460 = call float @_ZN3jxl17ANSPopulationCostEPKim(i32* %455, i64 %459) #13
  %461 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %293, align 8
  %462 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %461, i64 %360, i32 2
  %463 = load float, float* %462, align 8
  %464 = fsub float %460, %463
  %465 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %461, i64 %373, i32 2
  %466 = load float, float* %465, align 8
  %467 = fsub float %464, %466
  %468 = fcmp ult float %467, 0.000000e+00
  br i1 %468, label %469, label %477

469:                                              ; preds = %450
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %296) #13
  store float %467, float* %297, align 4
  store i32 %361, i32* %298, align 4
  store i32 %374, i32* %299, align 4
  %470 = load i32*, i32** %59, align 8
  %471 = getelementptr inbounds i32, i32* %470, i64 %360
  %472 = getelementptr inbounds i32, i32* %470, i64 %373
  %473 = load i32, i32* %471, align 4
  %474 = load i32, i32* %472, align 4
  %475 = icmp ult i32 %473, %474
  %476 = select i1 %475, i32 %474, i32 %473
  store i32 %476, i32* %300, align 4
  call fastcc void @_ZNSt3__114priority_queueIZN3jxl17ClusterHistogramsENS1_15HistogramParamsERKNS_6vectorINS1_9HistogramENS_9allocatorIS4_EEEEmmPS7_PNS3_IjNS5_IjEEEEE13HistogramPairNS3_ISE_NS5_ISE_EEEENS_4lessISE_EEE4pushEOSE_(%"class.std::__1::priority_queue"* nonnull %11, %struct.HistogramPair* nonnull dereferenceable(16) %13)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %296) #13
  br label %477

477:                                              ; preds = %450, %469
  %478 = load i32*, i32** %288, align 8
  %479 = icmp eq i32* %478, null
  br i1 %479, label %483, label %480

480:                                              ; preds = %477
  %481 = ptrtoint i32* %478 to i64
  store i64 %481, i64* %294, align 8
  %482 = bitcast i32* %478 to i8*
  call void @_ZdlPv(i8* %482) #12
  br label %483

483:                                              ; preds = %477, %480
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %286) #13
  %484 = add i32 %374, 1
  %485 = zext i32 %484 to i64
  %486 = load i64, i64* %42, align 8
  %487 = load i64, i64* %44, align 8
  %488 = sub i64 %486, %487
  %489 = sdiv exact i64 %488, 40
  %490 = icmp ugt i64 %489, %485
  %491 = inttoptr i64 %487 to %"struct.jxl::Histogram"*
  br i1 %490, label %371, label %323

492:                                              ; preds = %336, %918
  %493 = phi %struct.HistogramPair* [ %334, %336 ], [ %921, %918 ]
  %494 = phi %struct.HistogramPair* [ %333, %336 ], [ %920, %918 ]
  %495 = phi i32 [ 2, %336 ], [ %919, %918 ]
  %496 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %494, i64 0, i32 1
  %497 = load i32, i32* %496, align 4
  %498 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %494, i64 0, i32 2
  %499 = load i32, i32* %498, align 4
  %500 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %494, i64 0, i32 3
  %501 = load i32, i32* %500, align 4
  %502 = ptrtoint %struct.HistogramPair* %494 to i64
  %503 = ptrtoint %struct.HistogramPair* %493 to i64
  %504 = sub i64 %503, %502
  %505 = ashr exact i64 %504, 4
  %506 = icmp sgt i64 %504, 16
  br i1 %506, label %507, label %671

507:                                              ; preds = %492
  %508 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %493, i64 -1
  %509 = bitcast %struct.HistogramPair* %494 to i32*
  %510 = load i32, i32* %509, align 4
  %511 = bitcast %struct.HistogramPair* %494 to i8*
  %512 = bitcast %struct.HistogramPair* %508 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %511, i8* align 4 %512, i64 16, i1 false) #13
  %513 = bitcast %struct.HistogramPair* %508 to i32*
  store i32 %510, i32* %513, align 4
  %514 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %493, i64 -1, i32 1
  store i32 %497, i32* %514, align 4
  %515 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %493, i64 -1, i32 2
  store i32 %499, i32* %515, align 4
  %516 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %493, i64 -1, i32 3
  store i32 %501, i32* %516, align 4
  %517 = add nsw i64 %505, -1
  %518 = icmp eq i64 %504, 32
  br i1 %518, label %671, label %519

519:                                              ; preds = %507
  %520 = add nsw i64 %505, -3
  %521 = sdiv i64 %520, 2
  %522 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %494, i64 1
  %523 = ptrtoint %struct.HistogramPair* %522 to i64
  %524 = icmp sgt i64 %517, 2
  br i1 %524, label %525, label %558

525:                                              ; preds = %519
  %526 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %494, i64 2
  %527 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %494, i64 1, i32 1
  %528 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %494, i64 1, i32 2
  %529 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %494, i64 1, i32 3
  %530 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %522, i64 0, i32 0
  %531 = load float, float* %530, align 4
  %532 = load i32, i32* %527, align 4
  %533 = load i32, i32* %528, align 4
  %534 = load i32, i32* %529, align 4
  %535 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %494, i64 2, i32 1
  %536 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %494, i64 2, i32 2
  %537 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %494, i64 2, i32 3
  %538 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %526, i64 0, i32 0
  %539 = load float, float* %538, align 4
  %540 = load i32, i32* %535, align 4
  %541 = load i32, i32* %536, align 4
  %542 = load i32, i32* %537, align 4
  %543 = fcmp olt float %539, %531
  br i1 %543, label %556, label %544

544:                                              ; preds = %525
  %545 = fcmp olt float %531, %539
  br i1 %545, label %558, label %546

546:                                              ; preds = %544
  %547 = icmp ult i32 %540, %532
  br i1 %547, label %556, label %548

548:                                              ; preds = %546
  %549 = icmp ult i32 %532, %540
  br i1 %549, label %558, label %550

550:                                              ; preds = %548
  %551 = icmp ult i32 %541, %533
  br i1 %551, label %556, label %552

552:                                              ; preds = %550
  %553 = icmp uge i32 %533, %541
  %554 = icmp ult i32 %542, %534
  %555 = and i1 %553, %554
  br i1 %555, label %556, label %558

556:                                              ; preds = %552, %550, %546, %525
  %557 = ptrtoint %struct.HistogramPair* %526 to i64
  br label %558

558:                                              ; preds = %556, %552, %548, %544, %519
  %559 = phi i64 [ %557, %556 ], [ %523, %552 ], [ %523, %519 ], [ %523, %544 ], [ %523, %548 ]
  %560 = phi i64 [ 2, %556 ], [ 1, %552 ], [ 1, %519 ], [ 1, %544 ], [ 1, %548 ]
  %561 = inttoptr i64 %559 to %struct.HistogramPair*
  %562 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %561, i64 0, i32 1
  %563 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %561, i64 0, i32 2
  %564 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %561, i64 0, i32 3
  %565 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %561, i64 0, i32 0
  %566 = load float, float* %565, align 4
  %567 = load i32, i32* %562, align 4
  %568 = load i32, i32* %563, align 4
  %569 = load i32, i32* %564, align 4
  %570 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %494, i64 0, i32 0
  %571 = load float, float* %570, align 4
  %572 = load i32, i32* %496, align 4
  %573 = load i32, i32* %498, align 4
  %574 = load i32, i32* %500, align 4
  %575 = fcmp olt float %571, %566
  br i1 %575, label %671, label %576

576:                                              ; preds = %558
  %577 = fcmp olt float %566, %571
  br i1 %577, label %588, label %578

578:                                              ; preds = %576
  %579 = icmp ult i32 %572, %567
  br i1 %579, label %671, label %580

580:                                              ; preds = %578
  %581 = icmp ult i32 %567, %572
  br i1 %581, label %588, label %582

582:                                              ; preds = %580
  %583 = icmp ult i32 %573, %568
  br i1 %583, label %671, label %584

584:                                              ; preds = %582
  %585 = icmp uge i32 %568, %573
  %586 = icmp ult i32 %574, %569
  %587 = and i1 %585, %586
  br i1 %587, label %671, label %588

588:                                              ; preds = %584, %580, %576
  %589 = inttoptr i64 %559 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %511, i8* align 4 %589, i64 16, i1 false) #13
  %590 = icmp slt i64 %521, %560
  br i1 %590, label %665, label %591

591:                                              ; preds = %588, %659
  %592 = phi %struct.HistogramPair* [ %637, %659 ], [ %561, %588 ]
  %593 = phi i64 [ %636, %659 ], [ %560, %588 ]
  %594 = phi i64 [ %635, %659 ], [ %559, %588 ]
  %595 = shl nsw i64 %593, 1
  %596 = or i64 %595, 1
  %597 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %494, i64 %596
  %598 = ptrtoint %struct.HistogramPair* %597 to i64
  %599 = add nsw i64 %596, 1
  %600 = icmp slt i64 %599, %517
  br i1 %600, label %601, label %634

601:                                              ; preds = %591
  %602 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %597, i64 1
  %603 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %494, i64 %596, i32 1
  %604 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %494, i64 %596, i32 2
  %605 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %494, i64 %596, i32 3
  %606 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %597, i64 0, i32 0
  %607 = load float, float* %606, align 4
  %608 = load i32, i32* %603, align 4
  %609 = load i32, i32* %604, align 4
  %610 = load i32, i32* %605, align 4
  %611 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %602, i64 0, i32 1
  %612 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %602, i64 0, i32 2
  %613 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %602, i64 0, i32 3
  %614 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %602, i64 0, i32 0
  %615 = load float, float* %614, align 4
  %616 = load i32, i32* %611, align 4
  %617 = load i32, i32* %612, align 4
  %618 = load i32, i32* %613, align 4
  %619 = fcmp olt float %615, %607
  br i1 %619, label %632, label %620

620:                                              ; preds = %601
  %621 = fcmp olt float %607, %615
  br i1 %621, label %634, label %622

622:                                              ; preds = %620
  %623 = icmp ult i32 %616, %608
  br i1 %623, label %632, label %624

624:                                              ; preds = %622
  %625 = icmp ult i32 %608, %616
  br i1 %625, label %634, label %626

626:                                              ; preds = %624
  %627 = icmp ult i32 %617, %609
  br i1 %627, label %632, label %628

628:                                              ; preds = %626
  %629 = icmp uge i32 %609, %617
  %630 = icmp ult i32 %618, %610
  %631 = and i1 %629, %630
  br i1 %631, label %632, label %634

632:                                              ; preds = %628, %626, %622, %601
  %633 = ptrtoint %struct.HistogramPair* %602 to i64
  br label %634

634:                                              ; preds = %632, %628, %624, %620, %591
  %635 = phi i64 [ %633, %632 ], [ %598, %628 ], [ %598, %591 ], [ %598, %620 ], [ %598, %624 ]
  %636 = phi i64 [ %599, %632 ], [ %596, %628 ], [ %596, %591 ], [ %596, %620 ], [ %596, %624 ]
  %637 = inttoptr i64 %635 to %struct.HistogramPair*
  %638 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %637, i64 0, i32 1
  %639 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %637, i64 0, i32 2
  %640 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %637, i64 0, i32 3
  %641 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %637, i64 0, i32 0
  %642 = load float, float* %641, align 4
  %643 = load i32, i32* %638, align 4
  %644 = load i32, i32* %639, align 4
  %645 = load i32, i32* %640, align 4
  %646 = fcmp olt float %571, %642
  br i1 %646, label %665, label %647

647:                                              ; preds = %634
  %648 = fcmp olt float %642, %571
  br i1 %648, label %659, label %649

649:                                              ; preds = %647
  %650 = icmp ult i32 %572, %643
  br i1 %650, label %665, label %651

651:                                              ; preds = %649
  %652 = icmp ult i32 %643, %572
  br i1 %652, label %659, label %653

653:                                              ; preds = %651
  %654 = icmp ult i32 %573, %644
  br i1 %654, label %665, label %655

655:                                              ; preds = %653
  %656 = icmp uge i32 %644, %573
  %657 = icmp ult i32 %574, %645
  %658 = and i1 %656, %657
  br i1 %658, label %665, label %659

659:                                              ; preds = %655, %651, %647
  %660 = inttoptr i64 %594 to i8*
  %661 = inttoptr i64 %635 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %660, i8* align 4 %661, i64 16, i1 false) #13
  %662 = icmp slt i64 %521, %636
  br i1 %662, label %663, label %591

663:                                              ; preds = %659
  %664 = inttoptr i64 %635 to %struct.HistogramPair*
  br label %665

665:                                              ; preds = %655, %653, %649, %634, %663, %588
  %666 = phi %struct.HistogramPair* [ %561, %588 ], [ %664, %663 ], [ %592, %634 ], [ %592, %649 ], [ %592, %653 ], [ %592, %655 ]
  %667 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %666, i64 0, i32 0
  store float %571, float* %667, align 4
  %668 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %666, i64 0, i32 1
  store i32 %572, i32* %668, align 4
  %669 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %666, i64 0, i32 2
  store i32 %573, i32* %669, align 4
  %670 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %666, i64 0, i32 3
  store i32 %574, i32* %670, align 4
  br label %671

671:                                              ; preds = %492, %507, %558, %578, %582, %584, %665
  %672 = load %struct.HistogramPair*, %struct.HistogramPair** %281, align 8
  %673 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %672, i64 -1
  store %struct.HistogramPair* %673, %struct.HistogramPair** %281, align 8
  %674 = zext i32 %497 to i64
  %675 = load i32*, i32** %59, align 8
  %676 = getelementptr inbounds i32, i32* %675, i64 %674
  %677 = zext i32 %499 to i64
  %678 = getelementptr inbounds i32, i32* %675, i64 %677
  %679 = load i32, i32* %676, align 4
  %680 = load i32, i32* %678, align 4
  %681 = icmp ult i32 %679, %680
  %682 = select i1 %681, i32 %680, i32 %679
  %683 = icmp ne i32 %501, %682
  %684 = icmp eq i32 %679, 0
  %685 = or i1 %684, %683
  %686 = icmp eq i32 %680, 0
  %687 = or i1 %686, %685
  br i1 %687, label %918, label %688

688:                                              ; preds = %671
  %689 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %337, align 8
  %690 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %689, i64 %674
  %691 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %689, i64 %677
  %692 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %689, i64 %677, i32 0, i32 0, i32 1
  %693 = bitcast i32** %692 to i64*
  %694 = load i64, i64* %693, align 8
  %695 = bitcast %"struct.jxl::Histogram"* %691 to i64*
  %696 = load i64, i64* %695, align 8
  %697 = sub i64 %694, %696
  %698 = ashr exact i64 %697, 2
  %699 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %689, i64 %674, i32 0, i32 0, i32 1
  %700 = bitcast i32** %699 to i64*
  %701 = load i64, i64* %700, align 8
  %702 = bitcast %"struct.jxl::Histogram"* %690 to i64*
  %703 = load i64, i64* %702, align 8
  %704 = sub i64 %701, %703
  %705 = ashr exact i64 %704, 2
  %706 = icmp ugt i64 %698, %705
  br i1 %706, label %707, label %712

707:                                              ; preds = %688
  %708 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %690, i64 0, i32 0
  %709 = sub nsw i64 %698, %705
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector"* %708, i64 %709) #13
  %710 = load i64, i64* %693, align 8
  %711 = load i64, i64* %695, align 8
  br label %712

712:                                              ; preds = %707, %688
  %713 = phi i64 [ %711, %707 ], [ %696, %688 ]
  %714 = phi i64 [ %710, %707 ], [ %694, %688 ]
  %715 = icmp eq i64 %714, %713
  br i1 %715, label %734, label %716

716:                                              ; preds = %712
  %717 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %690, i64 0, i32 0, i32 0, i32 0
  br label %718

718:                                              ; preds = %718, %716
  %719 = phi i64 [ %713, %716 ], [ %730, %718 ]
  %720 = phi i64 [ 0, %716 ], [ %728, %718 ]
  %721 = inttoptr i64 %719 to i32*
  %722 = getelementptr inbounds i32, i32* %721, i64 %720
  %723 = load i32, i32* %722, align 4
  %724 = load i32*, i32** %717, align 8
  %725 = getelementptr inbounds i32, i32* %724, i64 %720
  %726 = load i32, i32* %725, align 4
  %727 = add nsw i32 %726, %723
  store i32 %727, i32* %725, align 4
  %728 = add nuw i64 %720, 1
  %729 = load i64, i64* %693, align 8
  %730 = load i64, i64* %695, align 8
  %731 = sub i64 %729, %730
  %732 = ashr exact i64 %731, 2
  %733 = icmp ult i64 %728, %732
  br i1 %733, label %718, label %734

734:                                              ; preds = %718, %712
  %735 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %689, i64 %677, i32 1
  %736 = load i64, i64* %735, align 8
  %737 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %689, i64 %674, i32 1
  %738 = load i64, i64* %737, align 8
  %739 = add i64 %738, %736
  store i64 %739, i64* %737, align 8
  %740 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %337, align 8
  %741 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %740, i64 %674, i32 0, i32 0, i32 0
  %742 = load i32*, i32** %741, align 8
  %743 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %740, i64 %674, i32 0, i32 0, i32 1
  %744 = bitcast i32** %743 to i64*
  %745 = load i64, i64* %744, align 8
  %746 = ptrtoint i32* %742 to i64
  %747 = sub i64 %745, %746
  %748 = ashr exact i64 %747, 2
  %749 = call float @_ZN3jxl17ANSPopulationCostEPKim(i32* %742, i64 %748) #13
  %750 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %337, align 8
  %751 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %750, i64 %674, i32 2
  store float %749, float* %751, align 8
  %752 = load i64, i64* %338, align 8
  %753 = load i64, i64* %339, align 8
  %754 = icmp eq i64 %752, %753
  br i1 %754, label %755, label %764

755:                                              ; preds = %775, %734
  %756 = load i32*, i32** %59, align 8
  %757 = getelementptr inbounds i32, i32* %756, i64 %677
  store i32 0, i32* %757, align 4
  %758 = add i32 %495, 1
  %759 = load i32*, i32** %59, align 8
  %760 = getelementptr inbounds i32, i32* %759, i64 %674
  store i32 %495, i32* %760, align 4
  %761 = load i64, i64* %42, align 8
  %762 = load i64, i64* %44, align 8
  %763 = icmp eq i64 %761, %762
  br i1 %763, label %918, label %782

764:                                              ; preds = %734, %775
  %765 = phi i64 [ %776, %775 ], [ %753, %734 ]
  %766 = phi i64 [ %777, %775 ], [ %752, %734 ]
  %767 = phi i64 [ %778, %775 ], [ 0, %734 ]
  %768 = inttoptr i64 %765 to i32*
  %769 = getelementptr inbounds i32, i32* %768, i64 %767
  %770 = load i32, i32* %769, align 4
  %771 = icmp eq i32 %770, %499
  br i1 %771, label %772, label %775

772:                                              ; preds = %764
  store i32 %497, i32* %769, align 4
  %773 = load i64, i64* %338, align 8
  %774 = load i64, i64* %339, align 8
  br label %775

775:                                              ; preds = %764, %772
  %776 = phi i64 [ %765, %764 ], [ %774, %772 ]
  %777 = phi i64 [ %766, %764 ], [ %773, %772 ]
  %778 = add nuw i64 %767, 1
  %779 = sub i64 %777, %776
  %780 = ashr exact i64 %779, 2
  %781 = icmp ult i64 %778, %780
  br i1 %781, label %764, label %755

782:                                              ; preds = %755, %910
  %783 = phi i64 [ %911, %910 ], [ %762, %755 ]
  %784 = phi i64 [ %912, %910 ], [ %761, %755 ]
  %785 = phi i64 [ %914, %910 ], [ 0, %755 ]
  %786 = phi i32 [ %913, %910 ], [ 0, %755 ]
  %787 = inttoptr i64 %783 to %"struct.jxl::Histogram"*
  %788 = icmp eq i32 %786, %497
  br i1 %788, label %910, label %789

789:                                              ; preds = %782
  %790 = load i32*, i32** %59, align 8
  %791 = getelementptr inbounds i32, i32* %790, i64 %785
  %792 = load i32, i32* %791, align 4
  %793 = icmp eq i32 %792, 0
  br i1 %793, label %910, label %794

794:                                              ; preds = %789
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %340) #13
  store float 0xFFFFFFFFE0000000, float* %345, align 8
  store i32 -1431655766, i32* %354, align 4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %340, i8 0, i64 32, i1 false) #13
  %795 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %787, i64 %674
  %796 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %787, i64 %674, i32 0, i32 0, i32 1
  %797 = bitcast i32** %796 to i64*
  %798 = load i64, i64* %797, align 8
  %799 = bitcast %"struct.jxl::Histogram"* %795 to i64*
  %800 = load i64, i64* %799, align 8
  %801 = sub i64 %798, %800
  %802 = icmp eq i64 %801, 0
  br i1 %802, label %807, label %803

803:                                              ; preds = %794
  %804 = ashr exact i64 %801, 2
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector"* nonnull %341, i64 %804) #13
  %805 = load i64, i64* %797, align 8
  %806 = load i64, i64* %799, align 8
  br label %807

807:                                              ; preds = %794, %803
  %808 = phi i64 [ %806, %803 ], [ %800, %794 ]
  %809 = phi i64 [ %805, %803 ], [ %798, %794 ]
  %810 = icmp eq i64 %809, %808
  br i1 %810, label %827, label %811

811:                                              ; preds = %807, %811
  %812 = phi i64 [ %823, %811 ], [ %808, %807 ]
  %813 = phi i64 [ %821, %811 ], [ 0, %807 ]
  %814 = inttoptr i64 %812 to i32*
  %815 = getelementptr inbounds i32, i32* %814, i64 %813
  %816 = load i32, i32* %815, align 4
  %817 = load i32*, i32** %342, align 8
  %818 = getelementptr inbounds i32, i32* %817, i64 %813
  %819 = load i32, i32* %818, align 4
  %820 = add nsw i32 %819, %816
  store i32 %820, i32* %818, align 4
  %821 = add nuw i64 %813, 1
  %822 = load i64, i64* %797, align 8
  %823 = load i64, i64* %799, align 8
  %824 = sub i64 %822, %823
  %825 = ashr exact i64 %824, 2
  %826 = icmp ult i64 %821, %825
  br i1 %826, label %811, label %827

827:                                              ; preds = %811, %807
  %828 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %787, i64 %674, i32 1
  %829 = load i64, i64* %828, align 8
  %830 = load i64, i64* %344, align 8
  %831 = add i64 %830, %829
  store i64 %831, i64* %344, align 8
  %832 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %337, align 8
  %833 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %832, i64 %785
  %834 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %832, i64 %785, i32 0, i32 0, i32 1
  %835 = bitcast i32** %834 to i64*
  %836 = load i64, i64* %835, align 8
  %837 = bitcast %"struct.jxl::Histogram"* %833 to i64*
  %838 = load i64, i64* %837, align 8
  %839 = sub i64 %836, %838
  %840 = ashr exact i64 %839, 2
  %841 = load i64, i64* %347, align 8
  %842 = load i64, i64* %348, align 8
  %843 = sub i64 %841, %842
  %844 = ashr exact i64 %843, 2
  %845 = icmp ugt i64 %840, %844
  br i1 %845, label %846, label %850

846:                                              ; preds = %827
  %847 = sub nsw i64 %840, %844
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector"* nonnull %341, i64 %847) #13
  %848 = load i64, i64* %835, align 8
  %849 = load i64, i64* %837, align 8
  br label %850

850:                                              ; preds = %846, %827
  %851 = phi i64 [ %849, %846 ], [ %838, %827 ]
  %852 = phi i64 [ %848, %846 ], [ %836, %827 ]
  %853 = icmp eq i64 %852, %851
  br i1 %853, label %870, label %854

854:                                              ; preds = %850, %854
  %855 = phi i64 [ %866, %854 ], [ %851, %850 ]
  %856 = phi i64 [ %864, %854 ], [ 0, %850 ]
  %857 = inttoptr i64 %855 to i32*
  %858 = getelementptr inbounds i32, i32* %857, i64 %856
  %859 = load i32, i32* %858, align 4
  %860 = load i32*, i32** %342, align 8
  %861 = getelementptr inbounds i32, i32* %860, i64 %856
  %862 = load i32, i32* %861, align 4
  %863 = add nsw i32 %862, %859
  store i32 %863, i32* %861, align 4
  %864 = add nuw i64 %856, 1
  %865 = load i64, i64* %835, align 8
  %866 = load i64, i64* %837, align 8
  %867 = sub i64 %865, %866
  %868 = ashr exact i64 %867, 2
  %869 = icmp ult i64 %864, %868
  br i1 %869, label %854, label %870

870:                                              ; preds = %854, %850
  %871 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %832, i64 %785, i32 1
  %872 = load i64, i64* %871, align 8
  %873 = load i64, i64* %344, align 8
  %874 = add i64 %873, %872
  store i64 %874, i64* %344, align 8
  %875 = load i32*, i32** %342, align 8
  %876 = load i64, i64* %347, align 8
  %877 = ptrtoint i32* %875 to i64
  %878 = sub i64 %876, %877
  %879 = ashr exact i64 %878, 2
  %880 = call float @_ZN3jxl17ANSPopulationCostEPKim(i32* %875, i64 %879) #13
  %881 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %337, align 8
  %882 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %881, i64 %674, i32 2
  %883 = load float, float* %882, align 8
  %884 = fsub float %880, %883
  %885 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %881, i64 %785, i32 2
  %886 = load float, float* %885, align 8
  %887 = fsub float %884, %886
  %888 = fcmp ult float %887, 0.000000e+00
  br i1 %888, label %889, label %901

889:                                              ; preds = %870
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %349) #13
  store float %887, float* %350, align 4
  %890 = icmp ult i32 %786, %497
  %891 = select i1 %890, i32 %786, i32 %497
  store i32 %891, i32* %351, align 4
  %892 = icmp ult i32 %497, %786
  %893 = select i1 %892, i32 %786, i32 %497
  store i32 %893, i32* %352, align 4
  %894 = load i32*, i32** %59, align 8
  %895 = getelementptr inbounds i32, i32* %894, i64 %674
  %896 = getelementptr inbounds i32, i32* %894, i64 %785
  %897 = load i32, i32* %895, align 4
  %898 = load i32, i32* %896, align 4
  %899 = icmp ult i32 %897, %898
  %900 = select i1 %899, i32 %898, i32 %897
  store i32 %900, i32* %353, align 4
  call fastcc void @_ZNSt3__114priority_queueIZN3jxl17ClusterHistogramsENS1_15HistogramParamsERKNS_6vectorINS1_9HistogramENS_9allocatorIS4_EEEEmmPS7_PNS3_IjNS5_IjEEEEE13HistogramPairNS3_ISE_NS5_ISE_EEEENS_4lessISE_EEE4pushEOSE_(%"class.std::__1::priority_queue"* nonnull %11, %struct.HistogramPair* nonnull dereferenceable(16) %15)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %349) #13
  br label %901

901:                                              ; preds = %870, %889
  %902 = load i32*, i32** %342, align 8
  %903 = icmp eq i32* %902, null
  br i1 %903, label %907, label %904

904:                                              ; preds = %901
  %905 = ptrtoint i32* %902 to i64
  store i64 %905, i64* %347, align 8
  %906 = bitcast i32* %902 to i8*
  call void @_ZdlPv(i8* %906) #12
  br label %907

907:                                              ; preds = %901, %904
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %340) #13
  %908 = load i64, i64* %42, align 8
  %909 = load i64, i64* %44, align 8
  br label %910

910:                                              ; preds = %907, %789, %782
  %911 = phi i64 [ %909, %907 ], [ %783, %789 ], [ %783, %782 ]
  %912 = phi i64 [ %908, %907 ], [ %784, %789 ], [ %784, %782 ]
  %913 = add i32 %786, 1
  %914 = zext i32 %913 to i64
  %915 = sub i64 %912, %911
  %916 = sdiv exact i64 %915, 40
  %917 = icmp ugt i64 %916, %914
  br i1 %917, label %782, label %918

918:                                              ; preds = %910, %755, %671
  %919 = phi i32 [ %495, %671 ], [ %758, %755 ], [ %758, %910 ]
  %920 = load %struct.HistogramPair*, %struct.HistogramPair** %280, align 8
  %921 = load %struct.HistogramPair*, %struct.HistogramPair** %281, align 8
  %922 = icmp eq %struct.HistogramPair* %920, %921
  br i1 %922, label %923, label %492

923:                                              ; preds = %918
  %924 = load i64, i64* %42, align 8
  %925 = load i64, i64* %44, align 8
  %926 = inttoptr i64 %925 to %"struct.jxl::Histogram"*
  br label %927

927:                                              ; preds = %275, %923, %332
  %928 = phi %"struct.jxl::Histogram"* [ %926, %923 ], [ %328, %332 ], [ %276, %275 ]
  %929 = phi i64 [ %925, %923 ], [ %329, %332 ], [ %277, %275 ]
  %930 = phi i64 [ %924, %923 ], [ %330, %332 ], [ %277, %275 ]
  %931 = bitcast %"class.std::__1::vector.11"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %931) #13
  %932 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %16, i64 0, i32 0, i32 0
  %933 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %16, i64 0, i32 0, i32 1
  %934 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %16, i64 0, i32 0, i32 2, i32 0, i32 0
  %935 = sub i64 %930, %929
  %936 = sdiv exact i64 %935, 40
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %931, i8 0, i64 24, i1 false) #13
  %937 = icmp eq i64 %935, 0
  br i1 %937, label %954, label %938

938:                                              ; preds = %927
  %939 = icmp ugt i64 %936, 4611686018427387903
  br i1 %939, label %940, label %942

940:                                              ; preds = %938
  %941 = bitcast %"class.std::__1::vector.11"* %16 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %941) #14
  unreachable

942:                                              ; preds = %938
  %943 = shl nsw i64 %936, 2
  %944 = call i8* @_Znwm(i64 %943) #12
  %945 = bitcast i8* %944 to i32*
  %946 = bitcast %"class.std::__1::vector.11"* %16 to i8**
  store i8* %944, i8** %946, align 8
  %947 = getelementptr inbounds i32, i32* %945, i64 %936
  store i32* %947, i32** %934, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %944, i8 -1, i64 %943, i1 false)
  %948 = bitcast i32** %933 to i64*
  %949 = ptrtoint i32* %947 to i64
  store i64 %949, i64* %948, align 8
  br label %986

950:                                              ; preds = %1015
  %951 = icmp ugt i64 %1018, %1021
  br i1 %951, label %952, label %954

952:                                              ; preds = %950
  %953 = sub i64 %1018, %1021
  call void @_ZNSt3__16vectorIN3jxl9HistogramENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.4"* %4, i64 %953) #13
  br label %979

954:                                              ; preds = %927, %950
  %955 = phi i64 [ %1017, %950 ], [ %930, %927 ]
  %956 = phi i64 [ %1021, %950 ], [ 0, %927 ]
  %957 = phi i64 [ %1018, %950 ], [ 0, %927 ]
  %958 = phi i64 [ %1016, %950 ], [ %929, %927 ]
  %959 = inttoptr i64 %955 to %"struct.jxl::Histogram"*
  %960 = icmp ult i64 %957, %956
  br i1 %960, label %961, label %979

961:                                              ; preds = %954
  %962 = inttoptr i64 %958 to %"struct.jxl::Histogram"*
  %963 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %962, i64 %957
  %964 = icmp eq %"struct.jxl::Histogram"* %963, %959
  br i1 %964, label %978, label %965

965:                                              ; preds = %961, %976
  %966 = phi %"struct.jxl::Histogram"* [ %967, %976 ], [ %959, %961 ]
  %967 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %966, i64 -1
  %968 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %967, i64 0, i32 0, i32 0, i32 0
  %969 = load i32*, i32** %968, align 8
  %970 = icmp eq i32* %969, null
  br i1 %970, label %976, label %971

971:                                              ; preds = %965
  %972 = ptrtoint i32* %969 to i64
  %973 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %966, i64 -1, i32 0, i32 0, i32 1
  %974 = bitcast i32** %973 to i64*
  store i64 %972, i64* %974, align 8
  %975 = bitcast i32* %969 to i8*
  call void @_ZdlPv(i8* %975) #12
  br label %976

976:                                              ; preds = %971, %965
  %977 = icmp eq %"struct.jxl::Histogram"* %967, %963
  br i1 %977, label %978, label %965

978:                                              ; preds = %976, %961
  store %"struct.jxl::Histogram"* %963, %"struct.jxl::Histogram"** %41, align 8
  br label %979

979:                                              ; preds = %952, %954, %978
  %980 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %5, i64 0, i32 0, i32 1
  %981 = bitcast i32** %980 to i64*
  %982 = load i64, i64* %981, align 8
  %983 = bitcast %"class.std::__1::vector.11"* %5 to i64*
  %984 = load i64, i64* %983, align 8
  %985 = icmp eq i64 %982, %984
  br i1 %985, label %1024, label %1053

986:                                              ; preds = %942, %1015
  %987 = phi i64 [ %929, %942 ], [ %1016, %1015 ]
  %988 = phi i64 [ %930, %942 ], [ %1017, %1015 ]
  %989 = phi %"struct.jxl::Histogram"* [ %928, %942 ], [ %1023, %1015 ]
  %990 = phi i64 [ 0, %942 ], [ %1019, %1015 ]
  %991 = phi i64 [ 0, %942 ], [ %1018, %1015 ]
  %992 = load i32*, i32** %59, align 8
  %993 = getelementptr inbounds i32, i32* %992, i64 %990
  %994 = load i32, i32* %993, align 4
  %995 = icmp eq i32 %994, 0
  br i1 %995, label %1015, label %996

996:                                              ; preds = %986
  %997 = add i64 %991, 1
  %998 = icmp eq i64 %991, %990
  br i1 %998, label %1005, label %999

999:                                              ; preds = %996
  %1000 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %989, i64 %991, i32 0
  %1001 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %989, i64 %990, i32 0, i32 0, i32 0
  %1002 = load i32*, i32** %1001, align 8
  %1003 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %989, i64 %990, i32 0, i32 0, i32 1
  %1004 = load i32*, i32** %1003, align 8
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE6assignIPiEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"* %1000, i32* %1002, i32* %1004) #13
  br label %1005

1005:                                             ; preds = %996, %999
  %1006 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %989, i64 %991, i32 1
  %1007 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %989, i64 %990, i32 1
  %1008 = bitcast i64* %1006 to i8*
  %1009 = bitcast i64* %1007 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1008, i8* align 8 %1009, i64 12, i1 false) #13
  %1010 = trunc i64 %991 to i32
  %1011 = load i32*, i32** %932, align 8
  %1012 = getelementptr inbounds i32, i32* %1011, i64 %990
  store i32 %1010, i32* %1012, align 4
  %1013 = load i64, i64* %42, align 8
  %1014 = load i64, i64* %44, align 8
  br label %1015

1015:                                             ; preds = %986, %1005
  %1016 = phi i64 [ %987, %986 ], [ %1014, %1005 ]
  %1017 = phi i64 [ %988, %986 ], [ %1013, %1005 ]
  %1018 = phi i64 [ %991, %986 ], [ %997, %1005 ]
  %1019 = add nuw i64 %990, 1
  %1020 = sub i64 %1017, %1016
  %1021 = sdiv exact i64 %1020, 40
  %1022 = icmp ult i64 %1019, %1021
  %1023 = inttoptr i64 %1016 to %"struct.jxl::Histogram"*
  br i1 %1022, label %986, label %950

1024:                                             ; preds = %1053, %979
  %1025 = load i32*, i32** %932, align 8
  %1026 = icmp eq i32* %1025, null
  br i1 %1026, label %1031, label %1027

1027:                                             ; preds = %1024
  %1028 = ptrtoint i32* %1025 to i64
  %1029 = bitcast i32** %933 to i64*
  store i64 %1028, i64* %1029, align 8
  %1030 = bitcast i32* %1025 to i8*
  call void @_ZdlPv(i8* %1030) #12
  br label %1031

1031:                                             ; preds = %1024, %1027
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %931) #13
  %1032 = load %struct.HistogramPair*, %struct.HistogramPair** %280, align 8
  %1033 = icmp eq %struct.HistogramPair* %1032, null
  br i1 %1033, label %1038, label %1034

1034:                                             ; preds = %1031
  %1035 = ptrtoint %struct.HistogramPair* %1032 to i64
  %1036 = bitcast %struct.HistogramPair** %281 to i64*
  store i64 %1035, i64* %1036, align 8
  %1037 = bitcast %struct.HistogramPair* %1032 to i8*
  call void @_ZdlPv(i8* %1037) #12
  br label %1038

1038:                                             ; preds = %1031, %1034
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %279) #13
  %1039 = load i32*, i32** %166, align 8
  %1040 = icmp eq i32* %1039, null
  br i1 %1040, label %1045, label %1041

1041:                                             ; preds = %1038
  %1042 = ptrtoint i32* %1039 to i64
  %1043 = bitcast i32** %167 to i64*
  store i64 %1042, i64* %1043, align 8
  %1044 = bitcast i32* %1039 to i8*
  call void @_ZdlPv(i8* %1044) #12
  br label %1045

1045:                                             ; preds = %1038, %1041
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %165) #13
  %1046 = load i32*, i32** %59, align 8
  %1047 = icmp eq i32* %1046, null
  br i1 %1047, label %1052, label %1048

1048:                                             ; preds = %1045
  %1049 = ptrtoint i32* %1046 to i64
  %1050 = bitcast i32** %60 to i64*
  store i64 %1049, i64* %1050, align 8
  %1051 = bitcast i32* %1046 to i8*
  call void @_ZdlPv(i8* %1051) #12
  br label %1052

1052:                                             ; preds = %1045, %1048
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %58) #13
  br label %1073

1053:                                             ; preds = %979, %1053
  %1054 = phi i64 [ %1069, %1053 ], [ %984, %979 ]
  %1055 = phi i64 [ %1067, %1053 ], [ 0, %979 ]
  %1056 = inttoptr i64 %1054 to i32*
  %1057 = getelementptr inbounds i32, i32* %1056, i64 %1055
  %1058 = load i32, i32* %1057, align 4
  %1059 = zext i32 %1058 to i64
  %1060 = load i32*, i32** %166, align 8
  %1061 = getelementptr inbounds i32, i32* %1060, i64 %1059
  %1062 = load i32, i32* %1061, align 4
  %1063 = zext i32 %1062 to i64
  %1064 = load i32*, i32** %932, align 8
  %1065 = getelementptr inbounds i32, i32* %1064, i64 %1063
  %1066 = load i32, i32* %1065, align 4
  store i32 %1066, i32* %1057, align 4
  %1067 = add nuw i64 %1055, 1
  %1068 = load i64, i64* %981, align 8
  %1069 = load i64, i64* %983, align 8
  %1070 = sub i64 %1068, %1069
  %1071 = ashr exact i64 %1070, 2
  %1072 = icmp ult i64 %1067, %1071
  br i1 %1072, label %1053, label %1024

1073:                                             ; preds = %39, %1052, %24
  %1074 = bitcast %"class.std::__1::vector.4"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1074) #13
  %1075 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %7, i64 0, i32 0, i32 0
  %1076 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %7, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1074, i8 -86, i64 24, i1 false) #13
  call void @_ZNSt3__16vectorIN3jxl9HistogramENS_9allocatorIS2_EEEC2ERKS5_(%"class.std::__1::vector.4"* nonnull %7, %"class.std::__1::vector.4"* dereferenceable(24) %4) #13
  %1077 = bitcast %"class.std::__1::map"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %1077) #13
  %1078 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %8, i64 0, i32 0, i32 0
  %1079 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %8, i64 0, i32 0, i32 1, i32 0, i32 0, i32 0
  %1080 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  %1081 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %8, i64 0, i32 0, i32 1, i32 0, i32 0
  %1082 = bitcast %"class.std::__1::__tree_node_base"** %1079 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1082, i8 0, i64 16, i1 false) #13
  store %"class.std::__1::__tree_end_node"* %1081, %"class.std::__1::__tree_end_node"** %1078, align 8
  %1083 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %5, i64 0, i32 0, i32 0
  %1084 = load i32*, i32** %1083, align 8
  %1085 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %5, i64 0, i32 0, i32 1
  %1086 = load i32*, i32** %1085, align 8
  %1087 = icmp eq i32* %1084, %1086
  br i1 %1087, label %1093, label %1088

1088:                                             ; preds = %1073
  %1089 = bitcast %"class.std::__1::__tree_end_node"* %1081 to %"class.std::__1::__tree_node"**
  %1090 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %1081, i64 0, i32 0
  %1091 = bitcast %"class.std::__1::map"* %8 to i64*
  %1092 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %4, i64 0, i32 0, i32 0
  br label %1135

1093:                                             ; preds = %1240, %1073
  %1094 = phi i32 [ 0, %1073 ], [ %1241, %1240 ]
  %1095 = sext i32 %1094 to i64
  %1096 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %4, i64 0, i32 0, i32 1
  %1097 = bitcast %"struct.jxl::Histogram"** %1096 to i64*
  %1098 = load i64, i64* %1097, align 8
  %1099 = bitcast %"class.std::__1::vector.4"* %4 to i64*
  %1100 = load i64, i64* %1099, align 8
  %1101 = sub i64 %1098, %1100
  %1102 = sdiv exact i64 %1101, 40
  %1103 = icmp ult i64 %1102, %1095
  %1104 = inttoptr i64 %1100 to %"struct.jxl::Histogram"*
  %1105 = inttoptr i64 %1098 to %"struct.jxl::Histogram"*
  br i1 %1103, label %1106, label %1108

1106:                                             ; preds = %1093
  %1107 = sub nsw i64 %1095, %1102
  call void @_ZNSt3__16vectorIN3jxl9HistogramENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.4"* %4, i64 %1107) #13
  br label %1127

1108:                                             ; preds = %1093
  %1109 = icmp ugt i64 %1102, %1095
  br i1 %1109, label %1110, label %1127

1110:                                             ; preds = %1108
  %1111 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1104, i64 %1095
  %1112 = icmp eq %"struct.jxl::Histogram"* %1111, %1105
  br i1 %1112, label %1126, label %1113

1113:                                             ; preds = %1110, %1124
  %1114 = phi %"struct.jxl::Histogram"* [ %1115, %1124 ], [ %1105, %1110 ]
  %1115 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1114, i64 -1
  %1116 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1115, i64 0, i32 0, i32 0, i32 0
  %1117 = load i32*, i32** %1116, align 8
  %1118 = icmp eq i32* %1117, null
  br i1 %1118, label %1124, label %1119

1119:                                             ; preds = %1113
  %1120 = ptrtoint i32* %1117 to i64
  %1121 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1114, i64 -1, i32 0, i32 0, i32 1
  %1122 = bitcast i32** %1121 to i64*
  store i64 %1120, i64* %1122, align 8
  %1123 = bitcast i32* %1117 to i8*
  call void @_ZdlPv(i8* %1123) #12
  br label %1124

1124:                                             ; preds = %1119, %1113
  %1125 = icmp eq %"struct.jxl::Histogram"* %1115, %1111
  br i1 %1125, label %1126, label %1113

1126:                                             ; preds = %1124, %1110
  store %"struct.jxl::Histogram"* %1111, %"struct.jxl::Histogram"** %1096, align 8
  br label %1127

1127:                                             ; preds = %1126, %1108, %1106
  %1128 = load i32*, i32** %1083, align 8
  %1129 = load i32*, i32** %1085, align 8
  %1130 = icmp eq i32* %1128, %1129
  %1131 = bitcast %"class.std::__1::__tree_end_node"* %1081 to %"class.std::__1::__tree_node"**
  br i1 %1130, label %1246, label %1132

1132:                                             ; preds = %1127
  %1133 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %1081, i64 0, i32 0
  %1134 = bitcast %"class.std::__1::map"* %8 to i64*
  br label %1273

1135:                                             ; preds = %1244, %1088
  %1136 = phi %"class.std::__1::__tree_node"* [ null, %1088 ], [ %1245, %1244 ]
  %1137 = phi i32 [ 0, %1088 ], [ %1241, %1244 ]
  %1138 = phi i32* [ %1084, %1088 ], [ %1242, %1244 ]
  %1139 = load i32, i32* %1138, align 4
  %1140 = icmp eq %"class.std::__1::__tree_node"* %1136, null
  br i1 %1140, label %1189, label %1141

1141:                                             ; preds = %1135, %1141
  %1142 = phi %"class.std::__1::__tree_end_node"* [ %1152, %1141 ], [ %1081, %1135 ]
  %1143 = phi %"class.std::__1::__tree_node"* [ %1153, %1141 ], [ %1136, %1135 ]
  %1144 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1143, i64 0, i32 1, i32 0, i32 0
  %1145 = load i32, i32* %1144, align 4
  %1146 = icmp slt i32 %1145, %1139
  %1147 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1143, i64 0, i32 0, i32 1
  %1148 = bitcast %"class.std::__1::__tree_node_base"** %1147 to %"class.std::__1::__tree_node"**
  %1149 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1143, i64 0, i32 0, i32 0
  %1150 = bitcast %"class.std::__1::__tree_node"* %1143 to %"class.std::__1::__tree_node"**
  %1151 = select i1 %1146, %"class.std::__1::__tree_node"** %1148, %"class.std::__1::__tree_node"** %1150
  %1152 = select i1 %1146, %"class.std::__1::__tree_end_node"* %1142, %"class.std::__1::__tree_end_node"* %1149
  %1153 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %1151, align 8
  %1154 = icmp eq %"class.std::__1::__tree_node"* %1153, null
  br i1 %1154, label %1155, label %1141

1155:                                             ; preds = %1141
  %1156 = icmp eq %"class.std::__1::__tree_end_node"* %1152, %1081
  br i1 %1156, label %1162, label %1157

1157:                                             ; preds = %1155
  %1158 = bitcast %"class.std::__1::__tree_end_node"* %1152 to %"class.std::__1::__tree_node"*
  %1159 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1158, i64 0, i32 1, i32 0, i32 0
  %1160 = load i32, i32* %1159, align 4
  %1161 = icmp slt i32 %1139, %1160
  br i1 %1161, label %1162, label %1240

1162:                                             ; preds = %1157, %1155
  br label %1163

1163:                                             ; preds = %1162, %1185
  %1164 = phi %"class.std::__1::__tree_node"* [ %1188, %1185 ], [ %1136, %1162 ]
  %1165 = phi %"class.std::__1::__tree_node_base"** [ %1187, %1185 ], [ %1079, %1162 ]
  %1166 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1164, i64 0, i32 1, i32 0, i32 0
  %1167 = load i32, i32* %1166, align 4
  %1168 = icmp slt i32 %1139, %1167
  br i1 %1168, label %1169, label %1175

1169:                                             ; preds = %1163
  %1170 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1164, i64 0, i32 0, i32 0, i32 0
  %1171 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %1170, align 8
  %1172 = icmp eq %"class.std::__1::__tree_node_base"* %1171, null
  br i1 %1172, label %1173, label %1185

1173:                                             ; preds = %1169
  %1174 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1164, i64 0, i32 0, i32 0
  br label %1189

1175:                                             ; preds = %1163
  %1176 = icmp slt i32 %1167, %1139
  br i1 %1176, label %1177, label %1183

1177:                                             ; preds = %1175
  %1178 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1164, i64 0, i32 0, i32 1
  %1179 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %1178, align 8
  %1180 = icmp eq %"class.std::__1::__tree_node_base"* %1179, null
  br i1 %1180, label %1181, label %1185

1181:                                             ; preds = %1177
  %1182 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1164, i64 0, i32 0, i32 0
  br label %1189

1183:                                             ; preds = %1175
  %1184 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1164, i64 0, i32 0, i32 0
  br label %1189

1185:                                             ; preds = %1177, %1169
  %1186 = phi %"class.std::__1::__tree_node_base"* [ %1171, %1169 ], [ %1179, %1177 ]
  %1187 = phi %"class.std::__1::__tree_node_base"** [ %1170, %1169 ], [ %1178, %1177 ]
  %1188 = bitcast %"class.std::__1::__tree_node_base"* %1186 to %"class.std::__1::__tree_node"*
  br label %1163

1189:                                             ; preds = %1183, %1181, %1173, %1135
  %1190 = phi %"class.std::__1::__tree_end_node"* [ %1174, %1173 ], [ %1182, %1181 ], [ %1184, %1183 ], [ %1081, %1135 ]
  %1191 = phi %"class.std::__1::__tree_node_base"** [ %1170, %1173 ], [ %1178, %1181 ], [ %1165, %1183 ], [ %1090, %1135 ]
  %1192 = bitcast %"class.std::__1::__tree_node_base"** %1191 to %"class.std::__1::__tree_node"**
  %1193 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %1192, align 8
  %1194 = icmp eq %"class.std::__1::__tree_node"* %1193, null
  br i1 %1194, label %1195, label %1218

1195:                                             ; preds = %1189
  %1196 = call i8* @_Znwm(i64 40) #12, !noalias !192
  %1197 = getelementptr inbounds i8, i8* %1196, i64 28
  %1198 = bitcast i8* %1197 to i32*
  store i32 %1139, i32* %1198, align 4, !noalias !192
  %1199 = getelementptr inbounds i8, i8* %1196, i64 32
  %1200 = bitcast i8* %1199 to i32*
  store i32 0, i32* %1200, align 4, !noalias !192
  %1201 = bitcast i8* %1196 to %"class.std::__1::__tree_node"*
  %1202 = bitcast i8* %1196 to %"class.std::__1::__tree_node_base"*
  %1203 = getelementptr inbounds i8, i8* %1196, i64 16
  %1204 = bitcast i8* %1203 to %"class.std::__1::__tree_end_node"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1196, i8 0, i64 16, i1 false) #13
  store %"class.std::__1::__tree_end_node"* %1190, %"class.std::__1::__tree_end_node"** %1204, align 8
  %1205 = bitcast %"class.std::__1::__tree_node_base"** %1191 to i8**
  store i8* %1196, i8** %1205, align 8
  %1206 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %1078, align 8
  %1207 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %1206, i64 0, i32 0
  %1208 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %1207, align 8
  %1209 = icmp eq %"class.std::__1::__tree_node_base"* %1208, null
  br i1 %1209, label %1213, label %1210

1210:                                             ; preds = %1195
  %1211 = ptrtoint %"class.std::__1::__tree_node_base"* %1208 to i64
  store i64 %1211, i64* %1091, align 8
  %1212 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %1191, align 8
  br label %1213

1213:                                             ; preds = %1210, %1195
  %1214 = phi %"class.std::__1::__tree_node_base"* [ %1202, %1195 ], [ %1212, %1210 ]
  %1215 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %1079, align 8
  call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %1215, %"class.std::__1::__tree_node_base"* %1214) #13
  %1216 = load i64, i64* %1080, align 8
  %1217 = add i64 %1216, 1
  store i64 %1217, i64* %1080, align 8
  br label %1218

1218:                                             ; preds = %1213, %1189
  %1219 = phi %"class.std::__1::__tree_node"* [ %1201, %1213 ], [ %1193, %1189 ]
  %1220 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1219, i64 0, i32 1, i32 0, i32 1
  store i32 %1137, i32* %1220, align 4
  %1221 = zext i32 %1139 to i64
  %1222 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %1075, align 8
  %1223 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1222, i64 %1221
  %1224 = sext i32 %1137 to i64
  %1225 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %1092, align 8
  %1226 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1225, i64 %1224
  %1227 = icmp eq %"struct.jxl::Histogram"* %1226, %1223
  br i1 %1227, label %1234, label %1228

1228:                                             ; preds = %1218
  %1229 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1226, i64 0, i32 0
  %1230 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1223, i64 0, i32 0, i32 0, i32 0
  %1231 = load i32*, i32** %1230, align 8
  %1232 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1222, i64 %1221, i32 0, i32 0, i32 1
  %1233 = load i32*, i32** %1232, align 8
  call void @_ZNSt3__16vectorIiNS_9allocatorIiEEE6assignIPiEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"* %1229, i32* %1231, i32* %1233) #13
  br label %1234

1234:                                             ; preds = %1228, %1218
  %1235 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1225, i64 %1224, i32 1
  %1236 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1222, i64 %1221, i32 1
  %1237 = bitcast i64* %1235 to i8*
  %1238 = bitcast i64* %1236 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1237, i8* align 8 %1238, i64 12, i1 false) #13
  %1239 = add nsw i32 %1137, 1
  br label %1240

1240:                                             ; preds = %1234, %1157
  %1241 = phi i32 [ %1239, %1234 ], [ %1137, %1157 ]
  %1242 = getelementptr inbounds i32, i32* %1138, i64 1
  %1243 = icmp eq i32* %1242, %1086
  br i1 %1243, label %1093, label %1244

1244:                                             ; preds = %1240
  %1245 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %1089, align 8
  br label %1135

1246:                                             ; preds = %1333, %1127
  %1247 = getelementptr inbounds %"class.std::__1::map", %"class.std::__1::map"* %8, i64 0, i32 0
  %1248 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %1131, align 8
  call void @_ZNSt3__16__treeINS_12__value_typeIiiEENS_19__map_value_compareIiS2_NS_4lessIiEELb1EEENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"* nonnull %1247, %"class.std::__1::__tree_node"* %1248) #13
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1077) #13
  %1249 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %1075, align 8
  %1250 = icmp eq %"struct.jxl::Histogram"* %1249, null
  br i1 %1250, label %1339, label %1251

1251:                                             ; preds = %1246
  %1252 = bitcast %"struct.jxl::Histogram"* %1249 to i8*
  %1253 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %1076, align 8
  %1254 = icmp eq %"struct.jxl::Histogram"* %1253, %1249
  br i1 %1254, label %1271, label %1255

1255:                                             ; preds = %1251, %1266
  %1256 = phi %"struct.jxl::Histogram"* [ %1257, %1266 ], [ %1253, %1251 ]
  %1257 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1256, i64 -1
  %1258 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1257, i64 0, i32 0, i32 0, i32 0
  %1259 = load i32*, i32** %1258, align 8
  %1260 = icmp eq i32* %1259, null
  br i1 %1260, label %1266, label %1261

1261:                                             ; preds = %1255
  %1262 = ptrtoint i32* %1259 to i64
  %1263 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1256, i64 -1, i32 0, i32 0, i32 1
  %1264 = bitcast i32** %1263 to i64*
  store i64 %1262, i64* %1264, align 8
  %1265 = bitcast i32* %1259 to i8*
  call void @_ZdlPv(i8* %1265) #12
  br label %1266

1266:                                             ; preds = %1261, %1255
  %1267 = icmp eq %"struct.jxl::Histogram"* %1257, %1249
  br i1 %1267, label %1268, label %1255

1268:                                             ; preds = %1266
  %1269 = bitcast %"class.std::__1::vector.4"* %7 to i8**
  %1270 = load i8*, i8** %1269, align 8
  br label %1271

1271:                                             ; preds = %1268, %1251
  %1272 = phi i8* [ %1270, %1268 ], [ %1252, %1251 ]
  store %"struct.jxl::Histogram"* %1249, %"struct.jxl::Histogram"** %1076, align 8
  call void @_ZdlPv(i8* %1272) #12
  br label %1339

1273:                                             ; preds = %1333, %1132
  %1274 = phi i32* [ %1128, %1132 ], [ %1337, %1333 ]
  %1275 = load i32, i32* %1274, align 4
  %1276 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %1131, align 8
  %1277 = icmp eq %"class.std::__1::__tree_node"* %1276, null
  br i1 %1277, label %1304, label %1278

1278:                                             ; preds = %1273, %1300
  %1279 = phi %"class.std::__1::__tree_node"* [ %1303, %1300 ], [ %1276, %1273 ]
  %1280 = phi %"class.std::__1::__tree_node_base"** [ %1302, %1300 ], [ %1079, %1273 ]
  %1281 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1279, i64 0, i32 1, i32 0, i32 0
  %1282 = load i32, i32* %1281, align 4
  %1283 = icmp slt i32 %1275, %1282
  br i1 %1283, label %1284, label %1290

1284:                                             ; preds = %1278
  %1285 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1279, i64 0, i32 0, i32 0, i32 0
  %1286 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %1285, align 8
  %1287 = icmp eq %"class.std::__1::__tree_node_base"* %1286, null
  br i1 %1287, label %1288, label %1300

1288:                                             ; preds = %1284
  %1289 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1279, i64 0, i32 0, i32 0
  br label %1304

1290:                                             ; preds = %1278
  %1291 = icmp slt i32 %1282, %1275
  br i1 %1291, label %1292, label %1298

1292:                                             ; preds = %1290
  %1293 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1279, i64 0, i32 0, i32 1
  %1294 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %1293, align 8
  %1295 = icmp eq %"class.std::__1::__tree_node_base"* %1294, null
  br i1 %1295, label %1296, label %1300

1296:                                             ; preds = %1292
  %1297 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1279, i64 0, i32 0, i32 0
  br label %1304

1298:                                             ; preds = %1290
  %1299 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1279, i64 0, i32 0, i32 0
  br label %1304

1300:                                             ; preds = %1292, %1284
  %1301 = phi %"class.std::__1::__tree_node_base"* [ %1286, %1284 ], [ %1294, %1292 ]
  %1302 = phi %"class.std::__1::__tree_node_base"** [ %1285, %1284 ], [ %1293, %1292 ]
  %1303 = bitcast %"class.std::__1::__tree_node_base"* %1301 to %"class.std::__1::__tree_node"*
  br label %1278

1304:                                             ; preds = %1298, %1296, %1288, %1273
  %1305 = phi %"class.std::__1::__tree_end_node"* [ %1289, %1288 ], [ %1297, %1296 ], [ %1299, %1298 ], [ %1081, %1273 ]
  %1306 = phi %"class.std::__1::__tree_node_base"** [ %1285, %1288 ], [ %1293, %1296 ], [ %1280, %1298 ], [ %1133, %1273 ]
  %1307 = bitcast %"class.std::__1::__tree_node_base"** %1306 to %"class.std::__1::__tree_node"**
  %1308 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %1307, align 8
  %1309 = icmp eq %"class.std::__1::__tree_node"* %1308, null
  br i1 %1309, label %1310, label %1333

1310:                                             ; preds = %1304
  %1311 = call i8* @_Znwm(i64 40) #12, !noalias !195
  %1312 = getelementptr inbounds i8, i8* %1311, i64 28
  %1313 = bitcast i8* %1312 to i32*
  store i32 %1275, i32* %1313, align 4, !noalias !195
  %1314 = getelementptr inbounds i8, i8* %1311, i64 32
  %1315 = bitcast i8* %1314 to i32*
  store i32 0, i32* %1315, align 4, !noalias !195
  %1316 = bitcast i8* %1311 to %"class.std::__1::__tree_node"*
  %1317 = bitcast i8* %1311 to %"class.std::__1::__tree_node_base"*
  %1318 = getelementptr inbounds i8, i8* %1311, i64 16
  %1319 = bitcast i8* %1318 to %"class.std::__1::__tree_end_node"**
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %1311, i8 0, i64 16, i1 false) #13
  store %"class.std::__1::__tree_end_node"* %1305, %"class.std::__1::__tree_end_node"** %1319, align 8
  %1320 = bitcast %"class.std::__1::__tree_node_base"** %1306 to i8**
  store i8* %1311, i8** %1320, align 8
  %1321 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %1078, align 8
  %1322 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %1321, i64 0, i32 0
  %1323 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %1322, align 8
  %1324 = icmp eq %"class.std::__1::__tree_node_base"* %1323, null
  br i1 %1324, label %1328, label %1325

1325:                                             ; preds = %1310
  %1326 = ptrtoint %"class.std::__1::__tree_node_base"* %1323 to i64
  store i64 %1326, i64* %1134, align 8
  %1327 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %1306, align 8
  br label %1328

1328:                                             ; preds = %1325, %1310
  %1329 = phi %"class.std::__1::__tree_node_base"* [ %1317, %1310 ], [ %1327, %1325 ]
  %1330 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %1079, align 8
  call void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"* %1330, %"class.std::__1::__tree_node_base"* %1329) #13
  %1331 = load i64, i64* %1080, align 8
  %1332 = add i64 %1331, 1
  store i64 %1332, i64* %1080, align 8
  br label %1333

1333:                                             ; preds = %1328, %1304
  %1334 = phi %"class.std::__1::__tree_node"* [ %1316, %1328 ], [ %1308, %1304 ]
  %1335 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1334, i64 0, i32 1, i32 0, i32 1
  %1336 = load i32, i32* %1335, align 4
  store i32 %1336, i32* %1274, align 4
  %1337 = getelementptr inbounds i32, i32* %1274, i64 1
  %1338 = icmp eq i32* %1337, %1129
  br i1 %1338, label %1246, label %1273

1339:                                             ; preds = %1246, %1271
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %1074) #13
  ret void
}

declare float @_ZN3jxl17ANSPopulationCostEPKim(i32*, i64) local_unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @_ZNSt3__114priority_queueIZN3jxl17ClusterHistogramsENS1_15HistogramParamsERKNS_6vectorINS1_9HistogramENS_9allocatorIS4_EEEEmmPS7_PNS3_IjNS5_IjEEEEE13HistogramPairNS3_ISE_NS5_ISE_EEEENS_4lessISE_EEE4pushEOSE_(%"class.std::__1::priority_queue"*, %struct.HistogramPair* nocapture readonly dereferenceable(16)) unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.std::__1::priority_queue", %"class.std::__1::priority_queue"* %0, i64 0, i32 0, i32 0, i32 1
  %4 = load %struct.HistogramPair*, %struct.HistogramPair** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::priority_queue", %"class.std::__1::priority_queue"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %6 = load %struct.HistogramPair*, %struct.HistogramPair** %5, align 8
  %7 = icmp ult %struct.HistogramPair* %4, %6
  %8 = ptrtoint %struct.HistogramPair* %6 to i64
  br i1 %7, label %9, label %15

9:                                                ; preds = %2
  %10 = bitcast %struct.HistogramPair* %4 to i8*
  %11 = bitcast %struct.HistogramPair* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %10, i8* align 4 %11, i64 16, i1 false) #13
  %12 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %4, i64 1
  %13 = ptrtoint %struct.HistogramPair* %12 to i64
  %14 = bitcast %struct.HistogramPair** %3 to i64*
  store i64 %13, i64* %14, align 8
  br label %75

15:                                               ; preds = %2
  %16 = ptrtoint %struct.HistogramPair* %4 to i64
  %17 = bitcast %struct.HistogramPair** %3 to i64*
  %18 = bitcast %"class.std::__1::priority_queue"* %0 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %16, %19
  %21 = ashr exact i64 %20, 4
  %22 = add nsw i64 %21, 1
  %23 = icmp ugt i64 %22, 1152921504606846975
  br i1 %23, label %24, label %26

24:                                               ; preds = %15
  %25 = bitcast %"class.std::__1::priority_queue"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %25) #14
  unreachable

26:                                               ; preds = %15
  %27 = bitcast %struct.HistogramPair** %5 to i64*
  %28 = sub i64 %8, %19
  %29 = ashr exact i64 %28, 4
  %30 = icmp ult i64 %29, 576460752303423487
  br i1 %30, label %31, label %39

31:                                               ; preds = %26
  %32 = ashr exact i64 %28, 3
  %33 = icmp ult i64 %32, %22
  %34 = select i1 %33, i64 %22, i64 %32
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %44, label %36

36:                                               ; preds = %31
  %37 = icmp ugt i64 %34, 1152921504606846975
  br i1 %37, label %38, label %39

38:                                               ; preds = %36
  tail call void @abort() #14
  unreachable

39:                                               ; preds = %36, %26
  %40 = phi i64 [ %34, %36 ], [ 1152921504606846975, %26 ]
  %41 = shl i64 %40, 4
  %42 = tail call i8* @_Znwm(i64 %41) #12
  %43 = bitcast i8* %42 to %struct.HistogramPair*
  br label %44

44:                                               ; preds = %39, %31
  %45 = phi i64 [ %40, %39 ], [ 0, %31 ]
  %46 = phi %struct.HistogramPair* [ %43, %39 ], [ null, %31 ]
  %47 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %46, i64 %21
  %48 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %46, i64 %45
  %49 = ptrtoint %struct.HistogramPair* %48 to i64
  %50 = bitcast %struct.HistogramPair* %47 to i8*
  %51 = bitcast %struct.HistogramPair* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %50, i8* align 4 %51, i64 16, i1 false) #13
  %52 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %47, i64 1
  %53 = ptrtoint %struct.HistogramPair* %52 to i64
  %54 = getelementptr inbounds %"class.std::__1::priority_queue", %"class.std::__1::priority_queue"* %0, i64 0, i32 0, i32 0, i32 0
  %55 = load %struct.HistogramPair*, %struct.HistogramPair** %54, align 8
  %56 = load i64, i64* %17, align 8
  %57 = ptrtoint %struct.HistogramPair* %55 to i64
  %58 = sub i64 %56, %57
  %59 = ashr exact i64 %58, 4
  %60 = sub nsw i64 0, %59
  %61 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %47, i64 %60
  %62 = ptrtoint %struct.HistogramPair* %61 to i64
  %63 = icmp sgt i64 %58, 0
  br i1 %63, label %64, label %68

64:                                               ; preds = %44
  %65 = bitcast %struct.HistogramPair* %61 to i8*
  %66 = bitcast %struct.HistogramPair* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %65, i8* align 4 %66, i64 %58, i1 false) #13
  %67 = load %struct.HistogramPair*, %struct.HistogramPair** %54, align 8
  br label %68

68:                                               ; preds = %64, %44
  %69 = phi %struct.HistogramPair* [ %55, %44 ], [ %67, %64 ]
  store i64 %62, i64* %18, align 8
  store i64 %53, i64* %17, align 8
  store i64 %49, i64* %27, align 8
  %70 = icmp eq %struct.HistogramPair* %69, null
  br i1 %70, label %75, label %71

71:                                               ; preds = %68
  %72 = bitcast %struct.HistogramPair* %69 to i8*
  tail call void @_ZdlPv(i8* %72) #12
  %73 = load %struct.HistogramPair*, %struct.HistogramPair** %3, align 8
  %74 = ptrtoint %struct.HistogramPair* %73 to i64
  br label %75

75:                                               ; preds = %9, %68, %71
  %76 = phi i64 [ %13, %9 ], [ %53, %68 ], [ %74, %71 ]
  %77 = phi %struct.HistogramPair* [ %12, %9 ], [ %52, %68 ], [ %73, %71 ]
  %78 = getelementptr inbounds %"class.std::__1::priority_queue", %"class.std::__1::priority_queue"* %0, i64 0, i32 0, i32 0, i32 0
  %79 = load %struct.HistogramPair*, %struct.HistogramPair** %78, align 8
  %80 = ptrtoint %struct.HistogramPair* %79 to i64
  %81 = sub i64 %76, %80
  %82 = ashr exact i64 %81, 4
  %83 = icmp sgt i64 %81, 16
  br i1 %83, label %84, label %160

84:                                               ; preds = %75
  %85 = add nsw i64 %82, -2
  %86 = sdiv i64 %85, 2
  %87 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %79, i64 %86
  %88 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %77, i64 -1
  %89 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %79, i64 %86, i32 1
  %90 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %79, i64 %86, i32 2
  %91 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %79, i64 %86, i32 3
  %92 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %87, i64 0, i32 0
  %93 = load float, float* %92, align 4
  %94 = load i32, i32* %89, align 4
  %95 = load i32, i32* %90, align 4
  %96 = load i32, i32* %91, align 4
  %97 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %77, i64 -1, i32 1
  %98 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %77, i64 -1, i32 2
  %99 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %77, i64 -1, i32 3
  %100 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %88, i64 0, i32 0
  %101 = load float, float* %100, align 4
  %102 = load i32, i32* %97, align 4
  %103 = load i32, i32* %98, align 4
  %104 = load i32, i32* %99, align 4
  %105 = fcmp olt float %101, %93
  br i1 %105, label %118, label %106

106:                                              ; preds = %84
  %107 = fcmp olt float %93, %101
  br i1 %107, label %160, label %108

108:                                              ; preds = %106
  %109 = icmp ult i32 %102, %94
  br i1 %109, label %118, label %110

110:                                              ; preds = %108
  %111 = icmp ult i32 %94, %102
  br i1 %111, label %160, label %112

112:                                              ; preds = %110
  %113 = icmp ult i32 %103, %95
  br i1 %113, label %118, label %114

114:                                              ; preds = %112
  %115 = icmp uge i32 %95, %103
  %116 = icmp ult i32 %104, %96
  %117 = and i1 %115, %116
  br i1 %117, label %118, label %160

118:                                              ; preds = %114, %112, %108, %84
  %119 = bitcast %struct.HistogramPair* %88 to i8*
  %120 = bitcast %struct.HistogramPair* %87 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %119, i8* align 4 %120, i64 16, i1 false) #13
  %121 = add nsw i64 %82, -1
  %122 = icmp ult i64 %121, 3
  br i1 %122, label %154, label %123

123:                                              ; preds = %118, %150
  %124 = phi %struct.HistogramPair* [ %128, %150 ], [ %87, %118 ]
  %125 = phi i64 [ %127, %150 ], [ %86, %118 ]
  %126 = add nsw i64 %125, -1
  %127 = sdiv i64 %126, 2
  %128 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %79, i64 %127
  %129 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %79, i64 %127, i32 1
  %130 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %79, i64 %127, i32 2
  %131 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %79, i64 %127, i32 3
  %132 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %128, i64 0, i32 0
  %133 = load float, float* %132, align 4
  %134 = load i32, i32* %129, align 4
  %135 = load i32, i32* %130, align 4
  %136 = load i32, i32* %131, align 4
  %137 = fcmp olt float %101, %133
  br i1 %137, label %150, label %138

138:                                              ; preds = %123
  %139 = fcmp olt float %133, %101
  br i1 %139, label %154, label %140

140:                                              ; preds = %138
  %141 = icmp ult i32 %102, %134
  br i1 %141, label %150, label %142

142:                                              ; preds = %140
  %143 = icmp ult i32 %134, %102
  br i1 %143, label %154, label %144

144:                                              ; preds = %142
  %145 = icmp ult i32 %103, %135
  br i1 %145, label %150, label %146

146:                                              ; preds = %144
  %147 = icmp uge i32 %135, %103
  %148 = icmp ult i32 %104, %136
  %149 = and i1 %147, %148
  br i1 %149, label %150, label %154

150:                                              ; preds = %146, %144, %140, %123
  %151 = bitcast %struct.HistogramPair* %124 to i8*
  %152 = bitcast %struct.HistogramPair* %128 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %151, i8* align 4 %152, i64 16, i1 false) #13
  %153 = icmp ult i64 %125, 3
  br i1 %153, label %154, label %123

154:                                              ; preds = %150, %146, %142, %138, %118
  %155 = phi %struct.HistogramPair* [ %87, %118 ], [ %124, %146 ], [ %124, %138 ], [ %124, %142 ], [ %128, %150 ]
  %156 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %155, i64 0, i32 0
  store float %101, float* %156, align 4
  %157 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %155, i64 0, i32 1
  store i32 %102, i32* %157, align 4
  %158 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %155, i64 0, i32 2
  store i32 %103, i32* %158, align 4
  %159 = getelementptr inbounds %struct.HistogramPair, %struct.HistogramPair* %155, i64 0, i32 3
  store i32 %104, i32* %159, align 4
  br label %160

160:                                              ; preds = %75, %106, %110, %114, %154
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i32** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = ashr exact i64 %9, 2
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %29, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to i32*
  %14 = icmp eq i64 %1, 0
  br i1 %14, label %27, label %15

15:                                               ; preds = %12
  %16 = getelementptr inbounds i32, i32* %13, i64 %1
  %17 = inttoptr i64 %8 to i8*
  %18 = add i64 %1, -1
  %19 = getelementptr i32, i32* %13, i64 %18
  %20 = bitcast i32* %19 to i8*
  %21 = sub i64 0, %8
  %22 = getelementptr i8, i8* %20, i64 %21
  %23 = ptrtoint i8* %22 to i64
  %24 = add i64 %23, 4
  %25 = and i64 %24, -4
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %17, i8 0, i64 %25, i1 false) #13
  %26 = ptrtoint i32* %16 to i64
  br label %27

27:                                               ; preds = %12, %15
  %28 = phi i64 [ %26, %15 ], [ %8, %12 ]
  store i64 %28, i64* %7, align 8
  br label %84

29:                                               ; preds = %2
  %30 = bitcast %"class.std::__1::vector"* %0 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = sub i64 %8, %31
  %33 = ashr exact i64 %32, 2
  %34 = add i64 %33, %1
  %35 = icmp ugt i64 %34, 4611686018427387903
  br i1 %35, label %36, label %38

36:                                               ; preds = %29
  %37 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %37) #14
  unreachable

38:                                               ; preds = %29
  %39 = sub i64 %5, %31
  %40 = ashr exact i64 %39, 2
  %41 = icmp ult i64 %40, 2305843009213693951
  br i1 %41, label %42, label %50

42:                                               ; preds = %38
  %43 = ashr exact i64 %39, 1
  %44 = icmp ult i64 %43, %34
  %45 = select i1 %44, i64 %34, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %55, label %47

47:                                               ; preds = %42
  %48 = icmp ugt i64 %45, 4611686018427387903
  br i1 %48, label %49, label %50

49:                                               ; preds = %47
  tail call void @abort() #14
  unreachable

50:                                               ; preds = %38, %47
  %51 = phi i64 [ %45, %47 ], [ 4611686018427387903, %38 ]
  %52 = shl i64 %51, 2
  %53 = tail call i8* @_Znwm(i64 %52) #12
  %54 = bitcast i8* %53 to i32*
  br label %55

55:                                               ; preds = %50, %42
  %56 = phi i64 [ %51, %50 ], [ 0, %42 ]
  %57 = phi i32* [ %54, %50 ], [ null, %42 ]
  %58 = getelementptr inbounds i32, i32* %57, i64 %33
  %59 = getelementptr inbounds i32, i32* %57, i64 %56
  %60 = getelementptr inbounds i32, i32* %58, i64 %1
  %61 = bitcast i32* %58 to i8*
  %62 = shl i64 %1, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %61, i8 0, i64 %62, i1 false) #13
  %63 = ptrtoint i32* %59 to i64
  %64 = ptrtoint i32* %60 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %66 = load i32*, i32** %65, align 8
  %67 = load i64, i64* %7, align 8
  %68 = ptrtoint i32* %66 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 2
  %71 = sub nsw i64 0, %70
  %72 = getelementptr inbounds i32, i32* %58, i64 %71
  %73 = ptrtoint i32* %72 to i64
  %74 = icmp sgt i64 %69, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %55
  %76 = bitcast i32* %72 to i8*
  %77 = bitcast i32* %66 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %69, i1 false) #13
  %78 = load i32*, i32** %65, align 8
  br label %79

79:                                               ; preds = %55, %75
  %80 = phi i32* [ %66, %55 ], [ %78, %75 ]
  store i64 %73, i64* %30, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %81 = icmp eq i32* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast i32* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #12
  br label %84

84:                                               ; preds = %82, %79, %27
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #8

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #9

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #10

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIvJRKN3jxl9HistogramEEE13ChooseAndCallIXadL_ZNS1_L36HistogramEntropyHighwayDispatchTableEEEEEvS4_(%"struct.jxl::Histogram"* dereferenceable(40)) #2 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #13
  %2 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %3 = and i32 %2, 2225
  %4 = tail call i32 @llvm.cttz.i32(i32 %3, i1 true) #13, !range !185
  %5 = zext i32 %4 to i64
  %6 = getelementptr inbounds [12 x void (%"struct.jxl::Histogram"*)*], [12 x void (%"struct.jxl::Histogram"*)*]* @_ZN3jxlL36HistogramEntropyHighwayDispatchTableE, i64 0, i64 %5
  %7 = load void (%"struct.jxl::Histogram"*)*, void (%"struct.jxl::Histogram"*)** %6, align 8
  tail call void %7(%"struct.jxl::Histogram"* dereferenceable(40) %0) #13
  ret void
}

declare void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"*) local_unnamed_addr #5

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.cttz.i32(i32, i1 immarg) #11

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN3hwy13FunctionCacheIvJRKNSt3__16vectorIN3jxl9HistogramENS1_9allocatorIS4_EEEEmmfPS7_PNS2_IjNS5_IjEEEEEE13ChooseAndCallIXadL_ZNS3_L41FastClusterHistogramsHighwayDispatchTableEEEEEvS9_mmfSA_SD_(%"class.std::__1::vector.4"* dereferenceable(24), i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*) #2 align 2 {
  tail call void @_ZN3hwy12ChosenTarget6UpdateEv(%"struct.hwy::ChosenTarget"* nonnull @_ZN3hwy13chosen_targetE) #13
  %7 = load atomic i32, i32* getelementptr inbounds (%"struct.hwy::ChosenTarget", %"struct.hwy::ChosenTarget"* @_ZN3hwy13chosen_targetE, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0) seq_cst, align 4
  %8 = and i32 %7, 2225
  %9 = tail call i32 @llvm.cttz.i32(i32 %8, i1 true) #13, !range !185
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds [12 x void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)*], [12 x void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)*]* @_ZN3jxlL41FastClusterHistogramsHighwayDispatchTableE, i64 0, i64 %10
  %12 = load void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)*, void (%"class.std::__1::vector.4"*, i64, i64, float, %"class.std::__1::vector.4"*, %"class.std::__1::vector.11"*)** %11, align 8
  tail call void %12(%"class.std::__1::vector.4"* dereferenceable(24) %0, i64 %1, i64 %2, float %3, %"class.std::__1::vector.4"* %4, %"class.std::__1::vector.11"* %5) #13
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIiNS_9allocatorIiEEE6assignIPiEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIiNS_15iterator_traitsIS7_E9referenceEEE5valueEvE4typeES7_S7_(%"class.std::__1::vector"*, i32*, i32*) local_unnamed_addr #2 comdat align 2 {
  %4 = ptrtoint i32* %2 to i64
  %5 = ptrtoint i32* %1 to i64
  %6 = sub i64 %4, %5
  %7 = ashr exact i64 %6, 2
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %9 = bitcast i32** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector"* %0 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = ashr exact i64 %13, 2
  %15 = icmp ugt i64 %7, %14
  %16 = inttoptr i64 %12 to i32*
  br i1 %15, label %49, label %17

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %19 = bitcast i32** %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %20, %12
  %22 = ashr exact i64 %21, 2
  %23 = icmp ugt i64 %7, %22
  %24 = getelementptr inbounds i32, i32* %1, i64 %22
  %25 = select i1 %23, i32* %24, i32* %2
  %26 = ptrtoint i32* %25 to i64
  %27 = sub i64 %26, %5
  %28 = ashr exact i64 %27, 2
  %29 = icmp eq i64 %27, 0
  br i1 %29, label %33, label %30

30:                                               ; preds = %17
  %31 = inttoptr i64 %12 to i8*
  %32 = bitcast i32* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 %27, i1 false) #13
  br label %33

33:                                               ; preds = %17, %30
  br i1 %23, label %34, label %47

34:                                               ; preds = %33
  %35 = load i64, i64* %19, align 8
  %36 = sub i64 %4, %26
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %34
  %39 = lshr exact i64 %36, 2
  %40 = inttoptr i64 %35 to i8*
  %41 = bitcast i32* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %41, i64 %36, i1 false) #13
  %42 = inttoptr i64 %35 to i32*
  %43 = getelementptr inbounds i32, i32* %42, i64 %39
  %44 = ptrtoint i32* %43 to i64
  br label %45

45:                                               ; preds = %34, %38
  %46 = phi i64 [ %44, %38 ], [ %35, %34 ]
  store i64 %46, i64* %19, align 8
  br label %90

47:                                               ; preds = %33
  %48 = getelementptr inbounds i32, i32* %16, i64 %28
  store i32* %48, i32** %18, align 8
  br label %90

49:                                               ; preds = %3
  %50 = icmp eq i64 %12, 0
  br i1 %50, label %56, label %51

51:                                               ; preds = %49
  %52 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %53 = bitcast i32** %52 to i64*
  store i64 %12, i64* %53, align 8
  %54 = inttoptr i64 %12 to i8*
  tail call void @_ZdlPv(i8* %54) #12
  %55 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %55, i8 0, i64 24, i1 false) #13
  br label %56

56:                                               ; preds = %49, %51
  %57 = phi i64 [ %10, %49 ], [ 0, %51 ]
  %58 = icmp ugt i64 %7, 4611686018427387903
  br i1 %58, label %59, label %61

59:                                               ; preds = %56
  %60 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %60) #14
  unreachable

61:                                               ; preds = %56
  %62 = ashr exact i64 %57, 2
  %63 = icmp ult i64 %62, 2305843009213693951
  br i1 %63, label %64, label %71

64:                                               ; preds = %61
  %65 = ashr exact i64 %57, 1
  %66 = icmp ult i64 %65, %7
  br i1 %66, label %71, label %67

67:                                               ; preds = %64
  %68 = icmp ugt i64 %65, 4611686018427387903
  br i1 %68, label %69, label %71

69:                                               ; preds = %67
  %70 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %70) #14
  unreachable

71:                                               ; preds = %64, %61, %67
  %72 = phi i64 [ %65, %67 ], [ 4611686018427387903, %61 ], [ %7, %64 ]
  %73 = shl i64 %72, 2
  %74 = tail call i8* @_Znwm(i64 %73) #12
  %75 = bitcast i8* %74 to i32*
  %76 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %77 = bitcast i32** %76 to i8**
  store i8* %74, i8** %77, align 8
  %78 = bitcast %"class.std::__1::vector"* %0 to i8**
  store i8* %74, i8** %78, align 8
  %79 = getelementptr inbounds i32, i32* %75, i64 %72
  store i32* %79, i32** %8, align 8
  %80 = bitcast i32** %76 to i64*
  %81 = ptrtoint i8* %74 to i64
  %82 = icmp sgt i64 %6, 0
  br i1 %82, label %83, label %88

83:                                               ; preds = %71
  %84 = lshr exact i64 %6, 2
  %85 = bitcast i32* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %74, i8* align 4 %85, i64 %6, i1 false) #13
  %86 = getelementptr inbounds i32, i32* %75, i64 %84
  %87 = ptrtoint i32* %86 to i64
  br label %88

88:                                               ; preds = %71, %83
  %89 = phi i64 [ %87, %83 ], [ %81, %71 ]
  store i64 %89, i64* %80, align 8
  br label %90

90:                                               ; preds = %45, %47, %88
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl9HistogramENS_9allocatorIS2_EEEC2ERKS5_(%"class.std::__1::vector.4"*, %"class.std::__1::vector.4"* dereferenceable(24)) unnamed_addr #2 comdat align 2 {
  %3 = bitcast %"class.std::__1::vector.4"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #13
  %4 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %1, i64 0, i32 0, i32 1
  %5 = bitcast %"struct.jxl::Histogram"** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %"class.std::__1::vector.4"* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = sdiv exact i64 %9, 40
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %83, label %12

12:                                               ; preds = %2
  %13 = icmp ugt i64 %10, 461168601842738790
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %"class.std::__1::vector.4"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #14
  unreachable

16:                                               ; preds = %12
  %17 = tail call i8* @_Znwm(i64 %9) #12
  %18 = bitcast i8* %17 to %"struct.jxl::Histogram"*
  %19 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 1
  %20 = bitcast %"struct.jxl::Histogram"** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = bitcast %"class.std::__1::vector.4"* %0 to i8**
  store i8* %17, i8** %21, align 8
  %22 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %18, i64 %10
  %23 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store %"struct.jxl::Histogram"* %22, %"struct.jxl::Histogram"** %23, align 8
  %24 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %1, i64 0, i32 0, i32 0
  %25 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %24, align 8
  %26 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %4, align 8
  %27 = bitcast %"struct.jxl::Histogram"** %19 to i64*
  %28 = ptrtoint i8* %17 to i64
  %29 = icmp eq %"struct.jxl::Histogram"* %25, %26
  br i1 %29, label %81, label %30

30:                                               ; preds = %16
  %31 = bitcast i8* %17 to %"struct.jxl::Histogram"*
  br label %32

32:                                               ; preds = %71, %30
  %33 = phi %"struct.jxl::Histogram"* [ %77, %71 ], [ %31, %30 ]
  %34 = phi %"struct.jxl::Histogram"* [ %76, %71 ], [ %25, %30 ]
  %35 = bitcast %"struct.jxl::Histogram"* %33 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %35, i8 0, i64 24, i1 false) #13
  %36 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %34, i64 0, i32 0, i32 0, i32 1
  %37 = bitcast i32** %36 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = bitcast %"struct.jxl::Histogram"* %34 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = sub i64 %38, %40
  %42 = ashr exact i64 %41, 2
  %43 = icmp eq i64 %41, 0
  br i1 %43, label %71, label %44

44:                                               ; preds = %32
  %45 = icmp ugt i64 %42, 4611686018427387903
  br i1 %45, label %46, label %48

46:                                               ; preds = %44
  %47 = bitcast %"struct.jxl::Histogram"* %33 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %47) #14
  unreachable

48:                                               ; preds = %44
  %49 = tail call i8* @_Znwm(i64 %41) #12
  %50 = bitcast i8* %49 to i32*
  %51 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %33, i64 0, i32 0, i32 0, i32 1
  %52 = bitcast i32** %51 to i8**
  store i8* %49, i8** %52, align 8
  %53 = bitcast %"struct.jxl::Histogram"* %33 to i8**
  store i8* %49, i8** %53, align 8
  %54 = getelementptr inbounds i32, i32* %50, i64 %42
  %55 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %33, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store i32* %54, i32** %55, align 8
  %56 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %34, i64 0, i32 0, i32 0, i32 0
  %57 = load i32*, i32** %56, align 8
  %58 = load i64, i64* %37, align 8
  %59 = bitcast i32** %51 to i64*
  %60 = ptrtoint i8* %49 to i64
  %61 = ptrtoint i32* %57 to i64
  %62 = sub i64 %58, %61
  %63 = icmp sgt i64 %62, 0
  br i1 %63, label %64, label %69

64:                                               ; preds = %48
  %65 = lshr exact i64 %62, 2
  %66 = bitcast i32* %57 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %49, i8* align 4 %66, i64 %62, i1 false) #13
  %67 = getelementptr inbounds i32, i32* %50, i64 %65
  %68 = ptrtoint i32* %67 to i64
  br label %69

69:                                               ; preds = %64, %48
  %70 = phi i64 [ %68, %64 ], [ %60, %48 ]
  store i64 %70, i64* %59, align 8
  br label %71

71:                                               ; preds = %69, %32
  %72 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %33, i64 0, i32 1
  %73 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %34, i64 0, i32 1
  %74 = bitcast i64* %72 to i8*
  %75 = bitcast i64* %73 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %74, i8* align 8 %75, i64 12, i1 false) #13
  %76 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %34, i64 1
  %77 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %33, i64 1
  %78 = icmp eq %"struct.jxl::Histogram"* %76, %26
  br i1 %78, label %79, label %32

79:                                               ; preds = %71
  %80 = ptrtoint %"struct.jxl::Histogram"* %77 to i64
  br label %81

81:                                               ; preds = %16, %79
  %82 = phi i64 [ %28, %16 ], [ %80, %79 ]
  store i64 %82, i64* %27, align 8
  br label %83

83:                                               ; preds = %2, %81
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(%"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"*) local_unnamed_addr #2 comdat {
  %3 = icmp eq %"class.std::__1::__tree_node_base"* %1, %0
  %4 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %1, i64 0, i32 3
  %5 = zext i1 %3 to i8
  store i8 %5, i8* %4, align 8
  br i1 %3, label %156, label %6

6:                                                ; preds = %2, %149
  %7 = phi %"class.std::__1::__tree_node_base"* [ %20, %149 ], [ %1, %2 ]
  %8 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %9 = bitcast %"class.std::__1::__tree_end_node"** %8 to %"class.std::__1::__tree_node_base"**
  %10 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %9, align 8
  %11 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 3
  %12 = load i8, i8* %11, align 8, !range !198
  %13 = icmp eq i8 %12, 0
  br i1 %13, label %14, label %156

14:                                               ; preds = %6
  %15 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %16 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 0, i32 0
  %18 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %17, align 8
  %19 = icmp eq %"class.std::__1::__tree_node_base"* %18, %10
  %20 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  br i1 %19, label %21, label %87

21:                                               ; preds = %14
  %22 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 1, i32 0
  %23 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %22, align 8
  %24 = icmp eq %"class.std::__1::__tree_node_base"* %23, null
  br i1 %24, label %29, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %23, i64 0, i32 3
  %27 = load i8, i8* %26, align 8, !range !198
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %149, label %29

29:                                               ; preds = %25, %21
  %30 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %31 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %32 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %33 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %32, align 8
  %34 = icmp eq %"class.std::__1::__tree_node_base"* %33, %7
  br i1 %34, label %61, label %35

35:                                               ; preds = %29
  %36 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %37 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 1
  %38 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %37, align 8
  %39 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0, i32 0
  %40 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %39, align 8
  store %"class.std::__1::__tree_node_base"* %40, %"class.std::__1::__tree_node_base"** %37, align 8
  %41 = icmp eq %"class.std::__1::__tree_node_base"* %40, null
  br i1 %41, label %47, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %44 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %40, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %43, %"class.std::__1::__tree_end_node"** %44, align 8
  %45 = bitcast %"class.std::__1::__tree_end_node"** %30 to i64*
  %46 = load i64, i64* %45, align 8
  br label %47

47:                                               ; preds = %35, %42
  %48 = phi i64 [ %46, %42 ], [ %36, %35 ]
  %49 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %50 = bitcast %"class.std::__1::__tree_end_node"** %49 to i64*
  store i64 %48, i64* %50, align 8
  %51 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %30, align 8
  %52 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 0, i32 0
  %53 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %52, align 8
  %54 = icmp eq %"class.std::__1::__tree_node_base"* %53, %10
  %55 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %51, i64 1, i32 0
  %56 = select i1 %54, %"class.std::__1::__tree_node_base"** %52, %"class.std::__1::__tree_node_base"** %55
  store %"class.std::__1::__tree_node_base"* %38, %"class.std::__1::__tree_node_base"** %56, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %39, align 8
  %57 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %57, %"class.std::__1::__tree_end_node"** %30, align 8
  %58 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %38, i64 0, i32 2
  %59 = bitcast %"class.std::__1::__tree_end_node"** %58 to %"class.std::__1::__tree_node_base"**
  %60 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %59, align 8
  br label %61

61:                                               ; preds = %47, %29
  %62 = phi %"class.std::__1::__tree_node_base"* [ %31, %29 ], [ %60, %47 ]
  %63 = phi %"class.std::__1::__tree_node_base"* [ %10, %29 ], [ %38, %47 ]
  %64 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %63, i64 0, i32 3
  store i8 1, i8* %64, align 8
  %65 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 3
  store i8 0, i8* %65, align 8
  %66 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0, i32 0
  %67 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %66, align 8
  %68 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 1
  %69 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %68, align 8
  store %"class.std::__1::__tree_node_base"* %69, %"class.std::__1::__tree_node_base"** %66, align 8
  %70 = icmp eq %"class.std::__1::__tree_node_base"* %69, null
  br i1 %70, label %74, label %71

71:                                               ; preds = %61
  %72 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 0
  %73 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %69, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %72, %"class.std::__1::__tree_end_node"** %73, align 8
  br label %74

74:                                               ; preds = %71, %61
  %75 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %62, i64 0, i32 2
  %76 = bitcast %"class.std::__1::__tree_end_node"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 2
  %79 = bitcast %"class.std::__1::__tree_end_node"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %75, align 8
  %81 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 0, i32 0
  %82 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %81, align 8
  %83 = icmp eq %"class.std::__1::__tree_node_base"* %82, %62
  %84 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %80, i64 1, i32 0
  %85 = select i1 %83, %"class.std::__1::__tree_node_base"** %81, %"class.std::__1::__tree_node_base"** %84
  store %"class.std::__1::__tree_node_base"* %67, %"class.std::__1::__tree_node_base"** %85, align 8
  store %"class.std::__1::__tree_node_base"* %62, %"class.std::__1::__tree_node_base"** %68, align 8
  %86 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %67, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %86, %"class.std::__1::__tree_end_node"** %75, align 8
  br label %156

87:                                               ; preds = %14
  %88 = icmp eq %"class.std::__1::__tree_node_base"* %18, null
  br i1 %88, label %93, label %89

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %18, i64 0, i32 3
  %91 = load i8, i8* %90, align 8, !range !198
  %92 = icmp eq i8 %91, 0
  br i1 %92, label %149, label %93

93:                                               ; preds = %89, %87
  %94 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 2
  %95 = bitcast %"class.std::__1::__tree_end_node"* %16 to %"class.std::__1::__tree_node_base"*
  %96 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %97 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %96, align 8
  %98 = icmp eq %"class.std::__1::__tree_node_base"* %97, %7
  br i1 %98, label %99, label %123

99:                                               ; preds = %93
  %100 = ptrtoint %"class.std::__1::__tree_end_node"* %16 to i64
  %101 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0, i32 0
  %102 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 1
  %103 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %102, align 8
  store %"class.std::__1::__tree_node_base"* %103, %"class.std::__1::__tree_node_base"** %101, align 8
  %104 = icmp eq %"class.std::__1::__tree_node_base"* %103, null
  br i1 %104, label %110, label %105

105:                                              ; preds = %99
  %106 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %10, i64 0, i32 0
  %107 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %103, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %106, %"class.std::__1::__tree_end_node"** %107, align 8
  %108 = bitcast %"class.std::__1::__tree_end_node"** %94 to i64*
  %109 = load i64, i64* %108, align 8
  br label %110

110:                                              ; preds = %99, %105
  %111 = phi i64 [ %109, %105 ], [ %100, %99 ]
  %112 = bitcast %"class.std::__1::__tree_end_node"** %8 to i64*
  store i64 %111, i64* %112, align 8
  %113 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %94, align 8
  %114 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 0, i32 0
  %115 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %114, align 8
  %116 = icmp eq %"class.std::__1::__tree_node_base"* %115, %10
  %117 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %113, i64 1, i32 0
  %118 = select i1 %116, %"class.std::__1::__tree_node_base"** %114, %"class.std::__1::__tree_node_base"** %117
  store %"class.std::__1::__tree_node_base"* %7, %"class.std::__1::__tree_node_base"** %118, align 8
  store %"class.std::__1::__tree_node_base"* %10, %"class.std::__1::__tree_node_base"** %102, align 8
  %119 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %119, %"class.std::__1::__tree_end_node"** %94, align 8
  %120 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %7, i64 0, i32 2
  %121 = bitcast %"class.std::__1::__tree_end_node"** %120 to %"class.std::__1::__tree_node_base"**
  %122 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %121, align 8
  br label %123

123:                                              ; preds = %93, %110
  %124 = phi %"class.std::__1::__tree_node_base"* [ %122, %110 ], [ %95, %93 ]
  %125 = phi %"class.std::__1::__tree_node_base"* [ %7, %110 ], [ %10, %93 ]
  %126 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %125, i64 0, i32 3
  store i8 1, i8* %126, align 8
  %127 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 3
  store i8 0, i8* %127, align 8
  %128 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 1
  %129 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %128, align 8
  %130 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0, i32 0
  %131 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %130, align 8
  store %"class.std::__1::__tree_node_base"* %131, %"class.std::__1::__tree_node_base"** %128, align 8
  %132 = icmp eq %"class.std::__1::__tree_node_base"* %131, null
  br i1 %132, label %136, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 0
  %135 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %131, i64 0, i32 2
  store %"class.std::__1::__tree_end_node"* %134, %"class.std::__1::__tree_end_node"** %135, align 8
  br label %136

136:                                              ; preds = %133, %123
  %137 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %124, i64 0, i32 2
  %138 = bitcast %"class.std::__1::__tree_end_node"** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 2
  %141 = bitcast %"class.std::__1::__tree_end_node"** %140 to i64*
  store i64 %139, i64* %141, align 8
  %142 = load %"class.std::__1::__tree_end_node"*, %"class.std::__1::__tree_end_node"** %137, align 8
  %143 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 0, i32 0
  %144 = load %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_node_base"** %143, align 8
  %145 = icmp eq %"class.std::__1::__tree_node_base"* %144, %124
  %146 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %142, i64 1, i32 0
  %147 = select i1 %145, %"class.std::__1::__tree_node_base"** %143, %"class.std::__1::__tree_node_base"** %146
  store %"class.std::__1::__tree_node_base"* %129, %"class.std::__1::__tree_node_base"** %147, align 8
  store %"class.std::__1::__tree_node_base"* %124, %"class.std::__1::__tree_node_base"** %130, align 8
  %148 = getelementptr inbounds %"class.std::__1::__tree_node_base", %"class.std::__1::__tree_node_base"* %129, i64 0, i32 0
  store %"class.std::__1::__tree_end_node"* %148, %"class.std::__1::__tree_end_node"** %137, align 8
  br label %156

149:                                              ; preds = %89, %25
  %150 = phi i8* [ %26, %25 ], [ %90, %89 ]
  store i8 1, i8* %11, align 8
  %151 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  %152 = getelementptr inbounds %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_end_node"* %16, i64 3
  %153 = bitcast %"class.std::__1::__tree_end_node"* %152 to i8*
  %154 = zext i1 %151 to i8
  store i8 %154, i8* %153, align 8
  store i8 1, i8* %150, align 8
  %155 = icmp eq %"class.std::__1::__tree_node_base"* %20, %0
  br i1 %155, label %156, label %6

156:                                              ; preds = %6, %149, %2, %136, %74
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__treeINS_12__value_typeIiiEENS_19__map_value_compareIiS2_NS_4lessIiEELb1EEENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"*, %"class.std::__1::__tree_node"*) local_unnamed_addr #2 comdat align 2 {
  %3 = icmp eq %"class.std::__1::__tree_node"* %1, null
  br i1 %3, label %11, label %4

4:                                                ; preds = %2
  %5 = bitcast %"class.std::__1::__tree_node"* %1 to %"class.std::__1::__tree_node"**
  %6 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %5, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeIiiEENS_19__map_value_compareIiS2_NS_4lessIiEELb1EEENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %6) #13
  %7 = getelementptr inbounds %"class.std::__1::__tree_node", %"class.std::__1::__tree_node"* %1, i64 0, i32 0, i32 1
  %8 = bitcast %"class.std::__1::__tree_node_base"** %7 to %"class.std::__1::__tree_node"**
  %9 = load %"class.std::__1::__tree_node"*, %"class.std::__1::__tree_node"** %8, align 8
  tail call void @_ZNSt3__16__treeINS_12__value_typeIiiEENS_19__map_value_compareIiS2_NS_4lessIiEELb1EEENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE(%"class.std::__1::__tree"* %0, %"class.std::__1::__tree_node"* %9) #13
  %10 = bitcast %"class.std::__1::__tree_node"* %1 to i8*
  tail call void @_ZdlPv(i8* %10) #12
  ret void

11:                                               ; preds = %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEmRKj(%"class.std::__1::vector.11"*, i64, i32* dereferenceable(4)) local_unnamed_addr #2 comdat align 2 {
  %4 = bitcast i32* %2 to i8*
  %5 = bitcast i32* %2 to i8*
  %6 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %7 = bitcast i32** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %0, i64 0, i32 0, i32 1
  %10 = bitcast i32** %9 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = sub i64 %8, %11
  %13 = ashr exact i64 %12, 2
  %14 = icmp ult i64 %13, %1
  br i1 %14, label %130, label %15

15:                                               ; preds = %3
  %16 = inttoptr i64 %11 to i32*
  %17 = inttoptr i64 %11 to i8*
  %18 = getelementptr inbounds i32, i32* %16, i64 %1
  %19 = icmp eq i64 %1, 0
  br i1 %19, label %128, label %20

20:                                               ; preds = %15
  %21 = shl nsw i64 %1, 2
  %22 = add i64 %21, -4
  %23 = lshr exact i64 %22, 2
  %24 = add nuw nsw i64 %23, 1
  %25 = icmp ult i64 %24, 8
  br i1 %25, label %26, label %47

26:                                               ; preds = %105, %47, %20
  %27 = phi i32* [ %16, %47 ], [ %16, %20 ], [ %59, %105 ]
  %28 = ptrtoint i32* %27 to i64
  %29 = add i64 %1, -1
  %30 = getelementptr i32, i32* %16, i64 %29
  %31 = ptrtoint i32* %30 to i64
  %32 = sub i64 %31, %28
  %33 = lshr i64 %32, 2
  %34 = add nuw nsw i64 %33, 1
  %35 = and i64 %34, 7
  %36 = icmp eq i64 %35, 0
  br i1 %36, label %44, label %37

37:                                               ; preds = %26, %37
  %38 = phi i32* [ %41, %37 ], [ %27, %26 ]
  %39 = phi i64 [ %42, %37 ], [ %35, %26 ]
  %40 = load i32, i32* %2, align 4
  store i32 %40, i32* %38, align 4
  %41 = getelementptr inbounds i32, i32* %38, i64 1
  %42 = add i64 %39, -1
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %37, !llvm.loop !199

44:                                               ; preds = %37, %26
  %45 = phi i32* [ %27, %26 ], [ %41, %37 ]
  %46 = icmp ult i64 %32, 28
  br i1 %46, label %107, label %109

47:                                               ; preds = %20
  %48 = shl nsw i64 %1, 2
  %49 = add i64 %48, -4
  %50 = lshr exact i64 %49, 2
  %51 = add nuw nsw i64 %50, 1
  %52 = getelementptr i32, i32* %16, i64 %51
  %53 = getelementptr i8, i8* %5, i64 1
  %54 = icmp ugt i8* %53, %17
  %55 = icmp ugt i32* %52, %2
  %56 = and i1 %54, %55
  br i1 %56, label %26, label %57

57:                                               ; preds = %47
  %58 = and i64 %24, 9223372036854775800
  %59 = getelementptr i32, i32* %16, i64 %58
  %60 = add nsw i64 %58, -8
  %61 = lshr exact i64 %60, 3
  %62 = add nuw nsw i64 %61, 1
  %63 = and i64 %62, 1
  %64 = icmp eq i64 %60, 0
  br i1 %64, label %92, label %65

65:                                               ; preds = %57
  %66 = sub nuw nsw i64 %62, %63
  %67 = load i32, i32* %2, align 4, !alias.scope !200
  %68 = insertelement <4 x i32> undef, i32 %67, i32 0
  %69 = shufflevector <4 x i32> %68, <4 x i32> undef, <4 x i32> zeroinitializer
  %70 = insertelement <4 x i32> undef, i32 %67, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = load i32, i32* %2, align 4, !alias.scope !200
  %73 = insertelement <4 x i32> undef, i32 %72, i32 0
  %74 = shufflevector <4 x i32> %73, <4 x i32> undef, <4 x i32> zeroinitializer
  %75 = insertelement <4 x i32> undef, i32 %72, i32 0
  %76 = shufflevector <4 x i32> %75, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %77

77:                                               ; preds = %77, %65
  %78 = phi i64 [ 0, %65 ], [ %89, %77 ]
  %79 = phi i64 [ %66, %65 ], [ %90, %77 ]
  %80 = getelementptr i32, i32* %16, i64 %78
  %81 = bitcast i32* %80 to <4 x i32>*
  store <4 x i32> %69, <4 x i32>* %81, align 4, !alias.scope !203, !noalias !200
  %82 = getelementptr i32, i32* %80, i64 4
  %83 = bitcast i32* %82 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %83, align 4, !alias.scope !203, !noalias !200
  %84 = or i64 %78, 8
  %85 = getelementptr i32, i32* %16, i64 %84
  %86 = bitcast i32* %85 to <4 x i32>*
  store <4 x i32> %74, <4 x i32>* %86, align 4, !alias.scope !203, !noalias !200
  %87 = getelementptr i32, i32* %85, i64 4
  %88 = bitcast i32* %87 to <4 x i32>*
  store <4 x i32> %76, <4 x i32>* %88, align 4, !alias.scope !203, !noalias !200
  %89 = add i64 %78, 16
  %90 = add i64 %79, -2
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %92, label %77, !llvm.loop !205

92:                                               ; preds = %77, %57
  %93 = phi i64 [ 0, %57 ], [ %89, %77 ]
  %94 = icmp eq i64 %63, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %92
  %96 = getelementptr i32, i32* %16, i64 %93
  %97 = load i32, i32* %2, align 4, !alias.scope !200
  %98 = insertelement <4 x i32> undef, i32 %97, i32 0
  %99 = shufflevector <4 x i32> %98, <4 x i32> undef, <4 x i32> zeroinitializer
  %100 = insertelement <4 x i32> undef, i32 %97, i32 0
  %101 = shufflevector <4 x i32> %100, <4 x i32> undef, <4 x i32> zeroinitializer
  %102 = bitcast i32* %96 to <4 x i32>*
  store <4 x i32> %99, <4 x i32>* %102, align 4, !alias.scope !203, !noalias !200
  %103 = getelementptr i32, i32* %96, i64 4
  %104 = bitcast i32* %103 to <4 x i32>*
  store <4 x i32> %101, <4 x i32>* %104, align 4, !alias.scope !203, !noalias !200
  br label %105

105:                                              ; preds = %92, %95
  %106 = icmp eq i64 %24, %58
  br i1 %106, label %107, label %26

107:                                              ; preds = %44, %109, %105
  %108 = ptrtoint i32* %18 to i64
  br label %128

109:                                              ; preds = %44, %109
  %110 = phi i32* [ %126, %109 ], [ %45, %44 ]
  %111 = load i32, i32* %2, align 4
  store i32 %111, i32* %110, align 4
  %112 = getelementptr inbounds i32, i32* %110, i64 1
  %113 = load i32, i32* %2, align 4
  store i32 %113, i32* %112, align 4
  %114 = getelementptr inbounds i32, i32* %110, i64 2
  %115 = load i32, i32* %2, align 4
  store i32 %115, i32* %114, align 4
  %116 = getelementptr inbounds i32, i32* %110, i64 3
  %117 = load i32, i32* %2, align 4
  store i32 %117, i32* %116, align 4
  %118 = getelementptr inbounds i32, i32* %110, i64 4
  %119 = load i32, i32* %2, align 4
  store i32 %119, i32* %118, align 4
  %120 = getelementptr inbounds i32, i32* %110, i64 5
  %121 = load i32, i32* %2, align 4
  store i32 %121, i32* %120, align 4
  %122 = getelementptr inbounds i32, i32* %110, i64 6
  %123 = load i32, i32* %2, align 4
  store i32 %123, i32* %122, align 4
  %124 = getelementptr inbounds i32, i32* %110, i64 7
  %125 = load i32, i32* %2, align 4
  store i32 %125, i32* %124, align 4
  %126 = getelementptr inbounds i32, i32* %110, i64 8
  %127 = icmp eq i32* %126, %18
  br i1 %127, label %107, label %109, !llvm.loop !206

128:                                              ; preds = %15, %107
  %129 = phi i64 [ %108, %107 ], [ %11, %15 ]
  store i64 %129, i64* %10, align 8
  br label %292

130:                                              ; preds = %3
  %131 = bitcast %"class.std::__1::vector.11"* %0 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = sub i64 %11, %132
  %134 = ashr exact i64 %133, 2
  %135 = add i64 %134, %1
  %136 = icmp ugt i64 %135, 4611686018427387903
  br i1 %136, label %137, label %139

137:                                              ; preds = %130
  %138 = bitcast %"class.std::__1::vector.11"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %138) #14
  unreachable

139:                                              ; preds = %130
  %140 = sub i64 %8, %132
  %141 = ashr exact i64 %140, 2
  %142 = icmp ult i64 %141, 2305843009213693951
  br i1 %142, label %143, label %151

143:                                              ; preds = %139
  %144 = ashr exact i64 %140, 1
  %145 = icmp ult i64 %144, %135
  %146 = select i1 %145, i64 %135, i64 %144
  %147 = icmp eq i64 %146, 0
  br i1 %147, label %156, label %148

148:                                              ; preds = %143
  %149 = icmp ugt i64 %146, 4611686018427387903
  br i1 %149, label %150, label %151

150:                                              ; preds = %148
  tail call void @abort() #14
  unreachable

151:                                              ; preds = %139, %148
  %152 = phi i64 [ %146, %148 ], [ 4611686018427387903, %139 ]
  %153 = shl i64 %152, 2
  %154 = tail call i8* @_Znwm(i64 %153) #12
  %155 = bitcast i8* %154 to i32*
  br label %156

156:                                              ; preds = %143, %151
  %157 = phi i64 [ %152, %151 ], [ 0, %143 ]
  %158 = phi i32* [ %155, %151 ], [ null, %143 ]
  %159 = getelementptr inbounds i32, i32* %158, i64 %134
  %160 = getelementptr inbounds i32, i32* %158, i64 %157
  %161 = getelementptr inbounds i32, i32* %159, i64 %1
  %162 = shl nsw i64 %1, 2
  %163 = add i64 %162, -4
  %164 = lshr exact i64 %163, 2
  %165 = add nuw nsw i64 %164, 1
  %166 = icmp ult i64 %165, 8
  br i1 %166, label %229, label %167

167:                                              ; preds = %156
  %168 = bitcast i32* %159 to i8*
  %169 = shl nsw i64 %1, 2
  %170 = add i64 %169, -4
  %171 = lshr exact i64 %170, 2
  %172 = add nsw i64 %134, %171
  %173 = add i64 %172, 1
  %174 = getelementptr i32, i32* %158, i64 %173
  %175 = getelementptr i8, i8* %4, i64 1
  %176 = icmp ugt i8* %175, %168
  %177 = icmp ugt i32* %174, %2
  %178 = and i1 %176, %177
  br i1 %178, label %229, label %179

179:                                              ; preds = %167
  %180 = and i64 %165, 9223372036854775800
  %181 = getelementptr i32, i32* %159, i64 %180
  %182 = add nsw i64 %180, -8
  %183 = lshr exact i64 %182, 3
  %184 = add nuw nsw i64 %183, 1
  %185 = and i64 %184, 1
  %186 = icmp eq i64 %182, 0
  br i1 %186, label %214, label %187

187:                                              ; preds = %179
  %188 = sub nuw nsw i64 %184, %185
  %189 = load i32, i32* %2, align 4, !alias.scope !207
  %190 = insertelement <4 x i32> undef, i32 %189, i32 0
  %191 = shufflevector <4 x i32> %190, <4 x i32> undef, <4 x i32> zeroinitializer
  %192 = insertelement <4 x i32> undef, i32 %189, i32 0
  %193 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> zeroinitializer
  %194 = load i32, i32* %2, align 4, !alias.scope !207
  %195 = insertelement <4 x i32> undef, i32 %194, i32 0
  %196 = shufflevector <4 x i32> %195, <4 x i32> undef, <4 x i32> zeroinitializer
  %197 = insertelement <4 x i32> undef, i32 %194, i32 0
  %198 = shufflevector <4 x i32> %197, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %199

199:                                              ; preds = %199, %187
  %200 = phi i64 [ 0, %187 ], [ %211, %199 ]
  %201 = phi i64 [ %188, %187 ], [ %212, %199 ]
  %202 = getelementptr i32, i32* %159, i64 %200
  %203 = bitcast i32* %202 to <4 x i32>*
  store <4 x i32> %191, <4 x i32>* %203, align 4, !alias.scope !210, !noalias !207
  %204 = getelementptr i32, i32* %202, i64 4
  %205 = bitcast i32* %204 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %205, align 4, !alias.scope !210, !noalias !207
  %206 = or i64 %200, 8
  %207 = getelementptr i32, i32* %159, i64 %206
  %208 = bitcast i32* %207 to <4 x i32>*
  store <4 x i32> %196, <4 x i32>* %208, align 4, !alias.scope !210, !noalias !207
  %209 = getelementptr i32, i32* %207, i64 4
  %210 = bitcast i32* %209 to <4 x i32>*
  store <4 x i32> %198, <4 x i32>* %210, align 4, !alias.scope !210, !noalias !207
  %211 = add i64 %200, 16
  %212 = add i64 %201, -2
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %214, label %199, !llvm.loop !212

214:                                              ; preds = %199, %179
  %215 = phi i64 [ 0, %179 ], [ %211, %199 ]
  %216 = icmp eq i64 %185, 0
  br i1 %216, label %227, label %217

217:                                              ; preds = %214
  %218 = getelementptr i32, i32* %159, i64 %215
  %219 = load i32, i32* %2, align 4, !alias.scope !207
  %220 = insertelement <4 x i32> undef, i32 %219, i32 0
  %221 = shufflevector <4 x i32> %220, <4 x i32> undef, <4 x i32> zeroinitializer
  %222 = insertelement <4 x i32> undef, i32 %219, i32 0
  %223 = shufflevector <4 x i32> %222, <4 x i32> undef, <4 x i32> zeroinitializer
  %224 = bitcast i32* %218 to <4 x i32>*
  store <4 x i32> %221, <4 x i32>* %224, align 4, !alias.scope !210, !noalias !207
  %225 = getelementptr i32, i32* %218, i64 4
  %226 = bitcast i32* %225 to <4 x i32>*
  store <4 x i32> %223, <4 x i32>* %226, align 4, !alias.scope !210, !noalias !207
  br label %227

227:                                              ; preds = %214, %217
  %228 = icmp eq i64 %165, %180
  br i1 %228, label %270, label %229

229:                                              ; preds = %227, %167, %156
  %230 = phi i32* [ %159, %167 ], [ %159, %156 ], [ %181, %227 ]
  %231 = ptrtoint i32* %230 to i64
  %232 = add i64 %134, %1
  %233 = add i64 %232, -1
  %234 = getelementptr i32, i32* %158, i64 %233
  %235 = ptrtoint i32* %234 to i64
  %236 = sub i64 %235, %231
  %237 = lshr i64 %236, 2
  %238 = add nuw nsw i64 %237, 1
  %239 = and i64 %238, 7
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %248, label %241

241:                                              ; preds = %229, %241
  %242 = phi i32* [ %245, %241 ], [ %230, %229 ]
  %243 = phi i64 [ %246, %241 ], [ %239, %229 ]
  %244 = load i32, i32* %2, align 4
  store i32 %244, i32* %242, align 4
  %245 = getelementptr inbounds i32, i32* %242, i64 1
  %246 = add i64 %243, -1
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %248, label %241, !llvm.loop !213

248:                                              ; preds = %241, %229
  %249 = phi i32* [ %230, %229 ], [ %245, %241 ]
  %250 = icmp ult i64 %236, 28
  br i1 %250, label %270, label %251

251:                                              ; preds = %248, %251
  %252 = phi i32* [ %268, %251 ], [ %249, %248 ]
  %253 = load i32, i32* %2, align 4
  store i32 %253, i32* %252, align 4
  %254 = getelementptr inbounds i32, i32* %252, i64 1
  %255 = load i32, i32* %2, align 4
  store i32 %255, i32* %254, align 4
  %256 = getelementptr inbounds i32, i32* %252, i64 2
  %257 = load i32, i32* %2, align 4
  store i32 %257, i32* %256, align 4
  %258 = getelementptr inbounds i32, i32* %252, i64 3
  %259 = load i32, i32* %2, align 4
  store i32 %259, i32* %258, align 4
  %260 = getelementptr inbounds i32, i32* %252, i64 4
  %261 = load i32, i32* %2, align 4
  store i32 %261, i32* %260, align 4
  %262 = getelementptr inbounds i32, i32* %252, i64 5
  %263 = load i32, i32* %2, align 4
  store i32 %263, i32* %262, align 4
  %264 = getelementptr inbounds i32, i32* %252, i64 6
  %265 = load i32, i32* %2, align 4
  store i32 %265, i32* %264, align 4
  %266 = getelementptr inbounds i32, i32* %252, i64 7
  %267 = load i32, i32* %2, align 4
  store i32 %267, i32* %266, align 4
  %268 = getelementptr inbounds i32, i32* %252, i64 8
  %269 = icmp eq i32* %161, %268
  br i1 %269, label %270, label %251, !llvm.loop !214

270:                                              ; preds = %248, %251, %227
  %271 = ptrtoint i32* %160 to i64
  %272 = ptrtoint i32* %161 to i64
  %273 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %0, i64 0, i32 0, i32 0
  %274 = load i32*, i32** %273, align 8
  %275 = load i64, i64* %10, align 8
  %276 = ptrtoint i32* %274 to i64
  %277 = sub i64 %275, %276
  %278 = ashr exact i64 %277, 2
  %279 = sub nsw i64 0, %278
  %280 = getelementptr inbounds i32, i32* %159, i64 %279
  %281 = ptrtoint i32* %280 to i64
  %282 = icmp sgt i64 %277, 0
  br i1 %282, label %283, label %287

283:                                              ; preds = %270
  %284 = bitcast i32* %280 to i8*
  %285 = bitcast i32* %274 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %284, i8* align 4 %285, i64 %277, i1 false) #13
  %286 = load i32*, i32** %273, align 8
  br label %287

287:                                              ; preds = %270, %283
  %288 = phi i32* [ %274, %270 ], [ %286, %283 ]
  store i64 %281, i64* %131, align 8
  store i64 %272, i64* %10, align 8
  store i64 %271, i64* %7, align 8
  %289 = icmp eq i32* %288, null
  br i1 %289, label %292, label %290

290:                                              ; preds = %287
  %291 = bitcast i32* %288 to i8*
  tail call void @_ZdlPv(i8* %291) #12
  br label %292

292:                                              ; preds = %290, %287, %128
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl9HistogramENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector.4"*, %"struct.jxl::Histogram"* dereferenceable(40)) local_unnamed_addr #6 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"struct.jxl::Histogram"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.4"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 40
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 461168601842738790
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.4"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #14
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"struct.jxl::Histogram"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 40
  %20 = icmp ult i64 %19, 230584300921369395
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 461168601842738790, %14 ]
  %28 = mul i64 %27, 40
  %29 = tail call i8* @_Znwm(i64 %28) #12
  %30 = bitcast i8* %29 to %"struct.jxl::Histogram"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"struct.jxl::Histogram"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %33, i64 %9
  %35 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %33, i64 %32
  %36 = ptrtoint %"struct.jxl::Histogram"* %35 to i64
  %37 = bitcast %"struct.jxl::Histogram"* %34 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %37, i8 0, i64 24, i1 false) #13
  %38 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1, i64 0, i32 0, i32 0, i32 1
  %39 = bitcast i32** %38 to i64*
  %40 = load i64, i64* %39, align 8
  %41 = bitcast %"struct.jxl::Histogram"* %1 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = sub i64 %40, %42
  %44 = ashr exact i64 %43, 2
  %45 = icmp eq i64 %43, 0
  br i1 %45, label %73, label %46

46:                                               ; preds = %31
  %47 = icmp ugt i64 %44, 4611686018427387903
  br i1 %47, label %48, label %50

48:                                               ; preds = %46
  %49 = bitcast %"struct.jxl::Histogram"* %34 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %49) #14
  unreachable

50:                                               ; preds = %46
  %51 = tail call i8* @_Znwm(i64 %43) #12
  %52 = bitcast i8* %51 to i32*
  %53 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %33, i64 %9, i32 0, i32 0, i32 1
  %54 = bitcast i32** %53 to i8**
  store i8* %51, i8** %54, align 8
  %55 = bitcast %"struct.jxl::Histogram"* %34 to i8**
  store i8* %51, i8** %55, align 8
  %56 = getelementptr inbounds i32, i32* %52, i64 %44
  %57 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %33, i64 %9, i32 0, i32 0, i32 2, i32 0, i32 0
  store i32* %56, i32** %57, align 8
  %58 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1, i64 0, i32 0, i32 0, i32 0
  %59 = load i32*, i32** %58, align 8
  %60 = load i64, i64* %39, align 8
  %61 = bitcast i32** %53 to i64*
  %62 = ptrtoint i8* %51 to i64
  %63 = ptrtoint i32* %59 to i64
  %64 = sub i64 %60, %63
  %65 = icmp sgt i64 %64, 0
  br i1 %65, label %66, label %71

66:                                               ; preds = %50
  %67 = lshr exact i64 %64, 2
  %68 = bitcast i32* %59 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %51, i8* align 4 %68, i64 %64, i1 false) #13
  %69 = getelementptr inbounds i32, i32* %52, i64 %67
  %70 = ptrtoint i32* %69 to i64
  br label %71

71:                                               ; preds = %66, %50
  %72 = phi i64 [ %70, %66 ], [ %62, %50 ]
  store i64 %72, i64* %61, align 8
  br label %73

73:                                               ; preds = %31, %71
  %74 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %33, i64 %9, i32 1
  %75 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %1, i64 0, i32 1
  %76 = bitcast i64* %74 to i8*
  %77 = bitcast i64* %75 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* align 8 %77, i64 12, i1 false) #13
  %78 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %34, i64 1
  %79 = ptrtoint %"struct.jxl::Histogram"* %78 to i64
  %80 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 0
  %81 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %80, align 8
  %82 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %3, align 8
  %83 = icmp eq %"struct.jxl::Histogram"* %82, %81
  br i1 %83, label %84, label %86

84:                                               ; preds = %73
  %85 = ptrtoint %"struct.jxl::Histogram"* %81 to i64
  br label %114

86:                                               ; preds = %73, %86
  %87 = phi %"struct.jxl::Histogram"* [ %89, %86 ], [ %34, %73 ]
  %88 = phi %"struct.jxl::Histogram"* [ %90, %86 ], [ %82, %73 ]
  %89 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %87, i64 -1
  %90 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %88, i64 -1
  %91 = bitcast %"struct.jxl::Histogram"* %89 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %91, i8 0, i64 24, i1 false) #13
  %92 = bitcast %"struct.jxl::Histogram"* %90 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = bitcast %"struct.jxl::Histogram"* %89 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %88, i64 -1, i32 0, i32 0, i32 1
  %96 = bitcast i32** %95 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %87, i64 -1, i32 0, i32 0, i32 1
  %99 = bitcast i32** %98 to i64*
  store i64 %97, i64* %99, align 8
  %100 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %88, i64 -1, i32 0, i32 0, i32 2, i32 0, i32 0
  %101 = bitcast i32** %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %87, i64 -1, i32 0, i32 0, i32 2, i32 0, i32 0
  %104 = bitcast i32** %103 to i64*
  store i64 %102, i64* %104, align 8
  %105 = bitcast %"struct.jxl::Histogram"* %90 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %105, i8 0, i64 24, i1 false) #13
  %106 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %87, i64 -1, i32 1
  %107 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %88, i64 -1, i32 1
  %108 = bitcast i64* %106 to i8*
  %109 = bitcast i64* %107 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %108, i8* align 8 %109, i64 12, i1 false) #13
  %110 = icmp eq %"struct.jxl::Histogram"* %90, %81
  br i1 %110, label %111, label %86

111:                                              ; preds = %86
  %112 = load i64, i64* %6, align 8
  %113 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %3, align 8
  br label %114

114:                                              ; preds = %84, %111
  %115 = phi %"struct.jxl::Histogram"* [ %81, %84 ], [ %113, %111 ]
  %116 = phi %"struct.jxl::Histogram"* [ %34, %84 ], [ %89, %111 ]
  %117 = phi i64 [ %85, %84 ], [ %112, %111 ]
  %118 = ptrtoint %"struct.jxl::Histogram"* %116 to i64
  store i64 %118, i64* %6, align 8
  store i64 %79, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %119 = inttoptr i64 %117 to %"struct.jxl::Histogram"*
  %120 = icmp eq %"struct.jxl::Histogram"* %115, %119
  br i1 %120, label %134, label %121

121:                                              ; preds = %114, %132
  %122 = phi %"struct.jxl::Histogram"* [ %123, %132 ], [ %115, %114 ]
  %123 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %122, i64 -1
  %124 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %123, i64 0, i32 0, i32 0, i32 0
  %125 = load i32*, i32** %124, align 8
  %126 = icmp eq i32* %125, null
  br i1 %126, label %132, label %127

127:                                              ; preds = %121
  %128 = ptrtoint i32* %125 to i64
  %129 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %122, i64 -1, i32 0, i32 0, i32 1
  %130 = bitcast i32** %129 to i64*
  store i64 %128, i64* %130, align 8
  %131 = bitcast i32* %125 to i8*
  tail call void @_ZdlPv(i8* %131) #12
  br label %132

132:                                              ; preds = %127, %121
  %133 = icmp eq %"struct.jxl::Histogram"* %123, %119
  br i1 %133, label %134, label %121

134:                                              ; preds = %132, %114
  %135 = icmp eq i64 %117, 0
  br i1 %135, label %138, label %136

136:                                              ; preds = %134
  %137 = inttoptr i64 %117 to i8*
  tail call void @_ZdlPv(i8* %137) #12
  br label %138

138:                                              ; preds = %134, %136
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare <8 x float> @llvm.fma.v8f32(<8 x float>, <8 x float>, <8 x float>) #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3jxl9HistogramENS_9allocatorIS2_EEE8__appendEm(%"class.std::__1::vector.4"*, i64) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.jxl::Histogram"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.jxl::Histogram"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 40
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %25, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.jxl::Histogram"*
  %14 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %23, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"struct.jxl::Histogram"* %14 to i64
  br label %23

18:                                               ; preds = %12, %18
  %19 = phi %"struct.jxl::Histogram"* [ %21, %18 ], [ %13, %12 ]
  %20 = bitcast %"struct.jxl::Histogram"* %19 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 32, i1 false) #13
  %21 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %19, i64 1
  %22 = icmp eq %"struct.jxl::Histogram"* %21, %14
  br i1 %22, label %16, label %18

23:                                               ; preds = %12, %16
  %24 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %24, i64* %7, align 8
  br label %123

25:                                               ; preds = %2
  %26 = bitcast %"class.std::__1::vector.4"* %0 to i64*
  %27 = load i64, i64* %26, align 8
  %28 = sub i64 %8, %27
  %29 = sdiv exact i64 %28, 40
  %30 = add i64 %29, %1
  %31 = icmp ugt i64 %30, 461168601842738790
  br i1 %31, label %32, label %34

32:                                               ; preds = %25
  %33 = bitcast %"class.std::__1::vector.4"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %33) #14
  unreachable

34:                                               ; preds = %25
  %35 = sub i64 %5, %27
  %36 = sdiv exact i64 %35, 40
  %37 = icmp ult i64 %36, 230584300921369395
  br i1 %37, label %38, label %43

38:                                               ; preds = %34
  %39 = shl nsw i64 %36, 1
  %40 = icmp ult i64 %39, %30
  %41 = select i1 %40, i64 %30, i64 %39
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %48, label %43

43:                                               ; preds = %34, %38
  %44 = phi i64 [ %41, %38 ], [ 461168601842738790, %34 ]
  %45 = mul i64 %44, 40
  %46 = tail call i8* @_Znwm(i64 %45) #12
  %47 = bitcast i8* %46 to %"struct.jxl::Histogram"*
  br label %48

48:                                               ; preds = %38, %43
  %49 = phi i64 [ %44, %43 ], [ 0, %38 ]
  %50 = phi %"struct.jxl::Histogram"* [ %47, %43 ], [ null, %38 ]
  %51 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %50, i64 %29
  %52 = ptrtoint %"struct.jxl::Histogram"* %51 to i64
  %53 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %50, i64 %49
  %54 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %51, i64 %1
  br label %55

55:                                               ; preds = %48, %55
  %56 = phi %"struct.jxl::Histogram"* [ %59, %55 ], [ %51, %48 ]
  %57 = phi i64 [ %60, %55 ], [ %52, %48 ]
  %58 = inttoptr i64 %57 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %58, i8 0, i64 32, i1 false) #13
  %59 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %56, i64 1
  %60 = ptrtoint %"struct.jxl::Histogram"* %59 to i64
  %61 = icmp eq %"struct.jxl::Histogram"* %54, %59
  br i1 %61, label %62, label %55

62:                                               ; preds = %55
  %63 = ptrtoint %"struct.jxl::Histogram"* %53 to i64
  %64 = ptrtoint %"struct.jxl::Histogram"* %54 to i64
  %65 = getelementptr inbounds %"class.std::__1::vector.4", %"class.std::__1::vector.4"* %0, i64 0, i32 0, i32 0
  %66 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %65, align 8
  %67 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %6, align 8
  %68 = icmp eq %"struct.jxl::Histogram"* %67, %66
  br i1 %68, label %69, label %71

69:                                               ; preds = %62
  %70 = ptrtoint %"struct.jxl::Histogram"* %66 to i64
  br label %100

71:                                               ; preds = %62, %71
  %72 = phi %"struct.jxl::Histogram"* [ %74, %71 ], [ %51, %62 ]
  %73 = phi %"struct.jxl::Histogram"* [ %75, %71 ], [ %67, %62 ]
  %74 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %72, i64 -1
  %75 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %73, i64 -1
  %76 = bitcast %"struct.jxl::Histogram"* %74 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %76, i8 0, i64 24, i1 false) #13
  %77 = bitcast %"struct.jxl::Histogram"* %75 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = bitcast %"struct.jxl::Histogram"* %74 to i64*
  store i64 %78, i64* %79, align 8
  %80 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %73, i64 -1, i32 0, i32 0, i32 1
  %81 = bitcast i32** %80 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %72, i64 -1, i32 0, i32 0, i32 1
  %84 = bitcast i32** %83 to i64*
  store i64 %82, i64* %84, align 8
  %85 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %73, i64 -1, i32 0, i32 0, i32 2, i32 0, i32 0
  %86 = bitcast i32** %85 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %72, i64 -1, i32 0, i32 0, i32 2, i32 0, i32 0
  %89 = bitcast i32** %88 to i64*
  store i64 %87, i64* %89, align 8
  %90 = bitcast %"struct.jxl::Histogram"* %75 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %90, i8 0, i64 24, i1 false) #13
  %91 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %72, i64 -1, i32 1
  %92 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %73, i64 -1, i32 1
  %93 = bitcast i64* %91 to i8*
  %94 = bitcast i64* %92 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %93, i8* align 8 %94, i64 12, i1 false) #13
  %95 = icmp eq %"struct.jxl::Histogram"* %75, %66
  br i1 %95, label %96, label %71

96:                                               ; preds = %71
  %97 = ptrtoint %"struct.jxl::Histogram"* %74 to i64
  %98 = load i64, i64* %26, align 8
  %99 = load %"struct.jxl::Histogram"*, %"struct.jxl::Histogram"** %6, align 8
  br label %100

100:                                              ; preds = %69, %96
  %101 = phi %"struct.jxl::Histogram"* [ %66, %69 ], [ %99, %96 ]
  %102 = phi i64 [ %52, %69 ], [ %97, %96 ]
  %103 = phi i64 [ %70, %69 ], [ %98, %96 ]
  store i64 %102, i64* %26, align 8
  store i64 %64, i64* %7, align 8
  store i64 %63, i64* %4, align 8
  %104 = inttoptr i64 %103 to %"struct.jxl::Histogram"*
  %105 = icmp eq %"struct.jxl::Histogram"* %101, %104
  br i1 %105, label %119, label %106

106:                                              ; preds = %100, %117
  %107 = phi %"struct.jxl::Histogram"* [ %108, %117 ], [ %101, %100 ]
  %108 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %107, i64 -1
  %109 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %108, i64 0, i32 0, i32 0, i32 0
  %110 = load i32*, i32** %109, align 8
  %111 = icmp eq i32* %110, null
  br i1 %111, label %117, label %112

112:                                              ; preds = %106
  %113 = ptrtoint i32* %110 to i64
  %114 = getelementptr inbounds %"struct.jxl::Histogram", %"struct.jxl::Histogram"* %107, i64 -1, i32 0, i32 0, i32 1
  %115 = bitcast i32** %114 to i64*
  store i64 %113, i64* %115, align 8
  %116 = bitcast i32* %110 to i8*
  tail call void @_ZdlPv(i8* %116) #12
  br label %117

117:                                              ; preds = %112, %106
  %118 = icmp eq %"struct.jxl::Histogram"* %108, %104
  br i1 %118, label %119, label %106

119:                                              ; preds = %117, %100
  %120 = icmp eq i64 %103, 0
  br i1 %120, label %123, label %121

121:                                              ; preds = %119
  %122 = inttoptr i64 %103 to i8*
  tail call void @_ZdlPv(i8* %122) #12
  br label %123

123:                                              ; preds = %121, %119, %23
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+avx512bw,+avx512dq,+avx512f,+avx512vl,+bmi,+bmi2,+cx8,+f16c,+fma,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readnone speculatable }
attributes #12 = { builtin nounwind }
attributes #13 = { nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!4 = distinct !{!4, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!7 = distinct !{!7, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!10 = distinct !{!10, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!11 = distinct !{!11, !12}
!12 = !{!"llvm.loop.isvectorized", i32 1}
!13 = distinct !{!13, !14}
!14 = !{!"llvm.loop.unroll.disable"}
!15 = distinct !{!15, !16, !12}
!16 = !{!"llvm.loop.unroll.runtime.disable"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!19 = distinct !{!19, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!22 = distinct !{!22, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!25 = distinct !{!25, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!26 = !{!27}
!27 = distinct !{!27, !28, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!28 = distinct !{!28, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!29 = !{!30}
!30 = distinct !{!30, !31, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!31 = distinct !{!31, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!32 = !{!33}
!33 = distinct !{!33, !34, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!34 = distinct !{!34, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!35 = !{!36}
!36 = distinct !{!36, !37, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!37 = distinct !{!37, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!38 = !{!39}
!39 = distinct !{!39, !40, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_: argument 0"}
!40 = distinct !{!40, !"_ZN3hwy6N_SSE4L5LoadUIiEENS0_6Vec128IT_XdvLi16EstS3_EEENS0_4SimdIS3_XdvLi16EstS3_EEEPKS3_"}
!41 = !{!42}
!42 = distinct !{!42, !43, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!43 = distinct !{!43, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!44 = !{!45}
!45 = distinct !{!45, !43, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!46 = !{!47}
!47 = distinct !{!47, !48, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!48 = distinct !{!48, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!49 = !{!50}
!50 = distinct !{!50, !48, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!51 = !{!52}
!52 = distinct !{!52, !53, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!53 = distinct !{!53, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!54 = !{!55}
!55 = distinct !{!55, !53, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!56 = distinct !{!56, !12}
!57 = distinct !{!57, !14}
!58 = distinct !{!58, !16, !12}
!59 = !{!60}
!60 = distinct !{!60, !61, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!61 = distinct !{!61, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!62 = !{!63}
!63 = distinct !{!63, !61, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!64 = !{!65}
!65 = distinct !{!65, !66, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!66 = distinct !{!66, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!67 = !{!68}
!68 = distinct !{!68, !66, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!69 = !{!70}
!70 = distinct !{!70, !71, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!71 = distinct !{!71, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!72 = !{!73}
!73 = distinct !{!73, !71, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!74 = !{!75}
!75 = distinct !{!75, !76, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!76 = distinct !{!76, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!77 = !{!78}
!78 = distinct !{!78, !76, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!79 = !{!80}
!80 = distinct !{!80, !81, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!81 = distinct !{!81, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!82 = !{!83}
!83 = distinct !{!83, !81, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!84 = !{!85}
!85 = distinct !{!85, !86, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!86 = distinct !{!86, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!87 = !{!88}
!88 = distinct !{!88, !86, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!89 = !{!90}
!90 = distinct !{!90, !91, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!91 = distinct !{!91, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!92 = !{!93}
!93 = distinct !{!93, !91, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!94 = !{!95}
!95 = distinct !{!95, !96, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!96 = distinct !{!96, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!97 = !{!98}
!98 = distinct !{!98, !96, !"_ZN3hwy6N_AVX2L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!99 = !{!100}
!100 = distinct !{!100, !101, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!101 = distinct !{!101, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!102 = !{!103}
!103 = distinct !{!103, !101, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!104 = !{!105}
!105 = distinct !{!105, !106, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!106 = distinct !{!106, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!107 = !{!108}
!108 = distinct !{!108, !106, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!109 = !{!110}
!110 = distinct !{!110, !111, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!111 = distinct !{!111, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!112 = !{!113}
!113 = distinct !{!113, !111, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!114 = distinct !{!114, !12}
!115 = distinct !{!115, !14}
!116 = distinct !{!116, !16, !12}
!117 = !{!118}
!118 = distinct !{!118, !119, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!119 = distinct !{!119, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!120 = !{!121}
!121 = distinct !{!121, !119, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!122 = !{!123}
!123 = distinct !{!123, !124, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!124 = distinct !{!124, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!125 = !{!126}
!126 = distinct !{!126, !124, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!127 = !{!128}
!128 = distinct !{!128, !129, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!129 = distinct !{!129, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!130 = !{!131}
!131 = distinct !{!131, !129, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!132 = !{!133}
!133 = distinct !{!133, !134, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!134 = distinct !{!134, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!135 = !{!136}
!136 = distinct !{!136, !134, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!137 = !{!138}
!138 = distinct !{!138, !139, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!139 = distinct !{!139, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!140 = !{!141}
!141 = distinct !{!141, !139, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!142 = !{!143}
!143 = distinct !{!143, !144, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!144 = distinct !{!144, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!145 = !{!146}
!146 = distinct !{!146, !144, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!147 = !{!148}
!148 = distinct !{!148, !149, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!149 = distinct !{!149, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!150 = !{!151}
!151 = distinct !{!151, !149, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!152 = !{!153}
!153 = distinct !{!153, !154, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 1"}
!154 = distinct !{!154, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_"}
!155 = !{!156}
!156 = distinct !{!156, !154, !"_ZN3hwy6N_AVX3L5LoadUIiEENS0_6Vec256IT_EENS0_4SimdIS3_XdvLi32EstS3_EEEPKS3_: argument 0"}
!157 = !{!158, !160}
!158 = distinct !{!158, !159, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!159 = distinct !{!159, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!160 = distinct !{!160, !161, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!161 = distinct !{!161, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!162 = !{!163, !165}
!163 = distinct !{!163, !164, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!164 = distinct !{!164, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!165 = distinct !{!165, !166, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!166 = distinct !{!166, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!167 = !{!168, !170}
!168 = distinct !{!168, !169, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!169 = distinct !{!169, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!170 = distinct !{!170, !171, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!171 = distinct !{!171, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!172 = distinct !{!172, !12}
!173 = distinct !{!173, !14}
!174 = distinct !{!174, !16, !12}
!175 = !{!176, !178}
!176 = distinct !{!176, !177, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!177 = distinct !{!177, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!178 = distinct !{!178, !179, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!179 = distinct !{!179, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!180 = !{!181, !183}
!181 = distinct !{!181, !182, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!182 = distinct !{!182, !"_ZN3hwy8N_SCALAR4LoadIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!183 = distinct !{!183, !184, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_: argument 0"}
!184 = distinct !{!184, !"_ZN3hwy8N_SCALAR5LoadUIiEENS0_4Vec1IT_EENS0_4SimdIS3_Lm1EEEPKS3_"}
!185 = !{i32 0, i32 33}
!186 = distinct !{!186, !12}
!187 = distinct !{!187, !14}
!188 = distinct !{!188, !16, !12}
!189 = distinct !{!189, !12}
!190 = distinct !{!190, !14}
!191 = distinct !{!191, !16, !12}
!192 = !{!193}
!193 = distinct !{!193, !194, !"_ZNSt3__16__treeINS_12__value_typeIiiEENS_19__map_value_compareIiS2_NS_4lessIiEELb1EEENS_9allocatorIS2_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJOiEEENSE_IJEEEEEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS7_ISL_EEEEEEDpOT_: argument 0"}
!194 = distinct !{!194, !"_ZNSt3__16__treeINS_12__value_typeIiiEENS_19__map_value_compareIiS2_NS_4lessIiEELb1EEENS_9allocatorIS2_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJOiEEENSE_IJEEEEEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS7_ISL_EEEEEEDpOT_"}
!195 = !{!196}
!196 = distinct !{!196, !197, !"_ZNSt3__16__treeINS_12__value_typeIiiEENS_19__map_value_compareIiS2_NS_4lessIiEELb1EEENS_9allocatorIS2_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJOiEEENSE_IJEEEEEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS7_ISL_EEEEEEDpOT_: argument 0"}
!197 = distinct !{!197, !"_ZNSt3__16__treeINS_12__value_typeIiiEENS_19__map_value_compareIiS2_NS_4lessIiEELb1EEENS_9allocatorIS2_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJOiEEENSE_IJEEEEEENS_10unique_ptrINS_11__tree_nodeIS2_PvEENS_22__tree_node_destructorINS7_ISL_EEEEEEDpOT_"}
!198 = !{i8 0, i8 2}
!199 = distinct !{!199, !14}
!200 = !{!201}
!201 = distinct !{!201, !202}
!202 = distinct !{!202, !"LVerDomain"}
!203 = !{!204}
!204 = distinct !{!204, !202}
!205 = distinct !{!205, !12}
!206 = distinct !{!206, !12}
!207 = !{!208}
!208 = distinct !{!208, !209}
!209 = distinct !{!209, !"LVerDomain"}
!210 = !{!211}
!211 = distinct !{!211, !209}
!212 = distinct !{!212, !12}
!213 = distinct !{!213, !14}
!214 = distinct !{!214, !12}
