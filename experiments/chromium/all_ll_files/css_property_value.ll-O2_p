; ModuleID = '../../third_party/blink/renderer/core/css/css_property_value.cc'
source_filename = "../../third_party/blink/renderer/core/css/css_property_value.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.blink::CSSPropertyValueMetadata" = type <{ %"class.WTF::AtomicString", i16, [6 x i8] }>
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::CSSPropertyName" = type { i32, %"class.WTF::AtomicString" }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase", [64 x i8] }
%"class.WTF::VectorBufferBase" = type { %"class.blink::StylePropertyShorthand"*, i32, i32 }
%"class.blink::StylePropertyShorthand" = type { %"class.blink::CSSProperty"**, i32, i32 }
%"class.blink::CSSProperty" = type <{ %"class.blink::CSSUnresolvedProperty", i32, i32, i8, [7 x i8] }>
%"class.blink::CSSUnresolvedProperty" = type { i32 (...)** }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }
%"class.blink::CSSPropertyValue" = type { %"struct.blink::CSSPropertyValueMetadata", %"class.blink::Member" }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::CSSValue"* }
%"class.blink::CSSValue" = type { i8, i8, i8 }

$_ZN3WTF6VectorIN5blink22StylePropertyShorthandELj4ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF12VectorBufferIN5blink22StylePropertyShorthandELj4ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_ = comdat any

@.str = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1

@_ZN5blink24CSSPropertyValueMetadataC1ERKNS_15CSSPropertyNameEbibb = hidden unnamed_addr alias void (%"struct.blink::CSSPropertyValueMetadata"*, %"class.blink::CSSPropertyName"*, i1, i32, i1, i1), void (%"struct.blink::CSSPropertyValueMetadata"*, %"class.blink::CSSPropertyName"*, i1, i32, i1, i1)* @_ZN5blink24CSSPropertyValueMetadataC2ERKNS_15CSSPropertyNameEbibb

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink24CSSPropertyValueMetadataC2ERKNS_15CSSPropertyNameEbibb(%"struct.blink::CSSPropertyValueMetadata"* nocapture, %"class.blink::CSSPropertyName"* dereferenceable(16), i1 zeroext, i32, i1 zeroext, i1 zeroext) unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %"struct.blink::CSSPropertyValueMetadata", %"struct.blink::CSSPropertyValueMetadata"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %7, align 8
  %8 = getelementptr inbounds %"struct.blink::CSSPropertyValueMetadata", %"struct.blink::CSSPropertyValueMetadata"* %0, i64 0, i32 1
  %9 = getelementptr inbounds %"class.blink::CSSPropertyName", %"class.blink::CSSPropertyName"* %1, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = trunc i32 %10 to i16
  %12 = and i16 %11, 2047
  %13 = zext i1 %2 to i16
  %14 = shl nuw nsw i16 %13, 11
  %15 = trunc i32 %3 to i16
  %16 = shl i16 %15, 12
  %17 = and i16 %16, 12288
  %18 = zext i1 %4 to i16
  %19 = shl nuw nsw i16 %18, 14
  %20 = zext i1 %5 to i16
  %21 = shl nuw i16 %20, 15
  %22 = or i16 %17, %14
  %23 = or i16 %22, %19
  %24 = or i16 %23, %21
  %25 = or i16 %24, %12
  store i16 %25, i16* %8, align 8
  %26 = load i32, i32* %9, align 8
  %27 = icmp eq i32 %26, 1
  br i1 %27, label %28, label %47

28:                                               ; preds = %6
  %29 = tail call %"class.WTF::StringImpl"* @_ZNK5blink15CSSPropertyName14ToAtomicStringEv(%"class.blink::CSSPropertyName"* %1) #8
  %30 = ptrtoint %"class.WTF::StringImpl"* %29 to i64
  %31 = bitcast %"struct.blink::CSSPropertyValueMetadata"* %0 to i64*
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %7, align 8
  store i64 %30, i64* %31, align 8
  %33 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %33, label %47, label %34

34:                                               ; preds = %28
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %36 = load atomic i32, i32* %35 monotonic, align 4
  %37 = and i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %40 = load i32, i32* %39, align 4
  br i1 %38, label %41, label %43

41:                                               ; preds = %34
  %42 = add i32 %40, -1
  store i32 %42, i32* %39, align 4
  br label %43

43:                                               ; preds = %41, %34
  %44 = phi i32 [ %42, %41 ], [ %40, %34 ]
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %47

46:                                               ; preds = %43
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %32) #8
  br label %47

47:                                               ; preds = %28, %43, %46, %6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.WTF::StringImpl"* @_ZNK5blink15CSSPropertyName14ToAtomicStringEv(%"class.blink::CSSPropertyName"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink24CSSPropertyValueMetadata11ShorthandIDEv(%"struct.blink::CSSPropertyValueMetadata"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.WTF::Vector", align 8
  %3 = getelementptr inbounds %"struct.blink::CSSPropertyValueMetadata", %"struct.blink::CSSPropertyValueMetadata"* %0, i64 0, i32 1
  %4 = load i16, i16* %3, align 8
  %5 = and i16 %4, 2048
  %6 = icmp eq i16 %5, 0
  br i1 %6, label %34, label %7

7:                                                ; preds = %1
  %8 = bitcast %"class.WTF::Vector"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %8) #8
  %9 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 1, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 64, i1 false)
  %10 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 1, i64 0
  %11 = bitcast %"class.WTF::Vector"* %2 to i8**
  store i8* %10, i8** %11, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 1
  store i32 4, i32* %12, align 8
  %13 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 2
  store i32 0, i32* %13, align 4
  %14 = and i16 %4, 2047
  %15 = zext i16 %14 to i32
  call void @_ZN5blink32getMatchingShorthandsForLonghandENS_13CSSPropertyIDEPN3WTF6VectorINS_22StylePropertyShorthandELj4ENS1_18PartitionAllocatorEEE(i32 %15, %"class.WTF::Vector"* nonnull %2) #8
  %16 = load i16, i16* %3, align 8
  %17 = lshr i16 %16, 12
  %18 = and i16 %17, 3
  %19 = zext i16 %18 to i32
  %20 = call dereferenceable(16) %"class.blink::StylePropertyShorthand"* @_ZN3WTF6VectorIN5blink22StylePropertyShorthandELj4ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* nonnull %2, i32 %19)
  %21 = getelementptr inbounds %"class.blink::StylePropertyShorthand", %"class.blink::StylePropertyShorthand"* %20, i64 0, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = load i32, i32* %13, align 4
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %26, label %25, !prof !2

25:                                               ; preds = %7
  store i32 0, i32* %13, align 4
  br label %26

26:                                               ; preds = %25, %7
  %27 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0, i32 0, i32 0
  %28 = load %"class.blink::StylePropertyShorthand"*, %"class.blink::StylePropertyShorthand"** %27, align 8
  %29 = bitcast i8* %10 to %"class.blink::StylePropertyShorthand"*
  %30 = icmp eq %"class.blink::StylePropertyShorthand"* %28, %29
  br i1 %30, label %33, label %31, !prof !3

31:                                               ; preds = %26
  %32 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %2, i64 0, i32 0
  call void @_ZN3WTF12VectorBufferIN5blink22StylePropertyShorthandELj4ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_(%"class.WTF::VectorBuffer"* nonnull %32, %"class.blink::StylePropertyShorthand"* %28) #8
  br label %33

33:                                               ; preds = %26, %31
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %8) #8
  br label %34

34:                                               ; preds = %1, %33
  %35 = phi i32 [ %22, %33 ], [ 0, %1 ]
  ret i32 %35
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @_ZN5blink32getMatchingShorthandsForLonghandENS_13CSSPropertyIDEPN3WTF6VectorINS_22StylePropertyShorthandELj4ENS1_18PartitionAllocatorEEE(i32, %"class.WTF::Vector"*) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @_ZNK5blink24CSSPropertyValueMetadata10PropertyIDEv(%"struct.blink::CSSPropertyValueMetadata"* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %"struct.blink::CSSPropertyValueMetadata", %"struct.blink::CSSPropertyValueMetadata"* %0, i64 0, i32 1
  %3 = load i16, i16* %2, align 8
  %4 = and i16 %3, 2047
  %5 = zext i16 %4 to i32
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"class.blink::StylePropertyShorthand"* @_ZN3WTF6VectorIN5blink22StylePropertyShorthandELj4ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #8
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #8
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #8
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #8
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #8
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0), i32 1172, %"class.logging::CheckOpResult"* nonnull %4) #8
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #8
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #8
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #8
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::StylePropertyShorthand"*, %"class.blink::StylePropertyShorthand"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::StylePropertyShorthand", %"class.blink::StylePropertyShorthand"* %24, i64 %25
  ret %"class.blink::StylePropertyShorthand"* %26
}

; Function Attrs: nounwind ssp uwtable
define hidden { i32, %"class.WTF::StringImpl"* } @_ZNK5blink24CSSPropertyValueMetadata4NameEv(%"struct.blink::CSSPropertyValueMetadata"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.blink::CSSPropertyValueMetadata", %"struct.blink::CSSPropertyValueMetadata"* %0, i64 0, i32 1
  %3 = load i16, i16* %2, align 8
  %4 = and i16 %3, 2047
  %5 = zext i16 %4 to i32
  %6 = icmp eq i16 %4, 1
  br i1 %6, label %7, label %28

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"struct.blink::CSSPropertyValueMetadata", %"struct.blink::CSSPropertyValueMetadata"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  %9 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %8, align 8
  %10 = icmp eq %"class.WTF::StringImpl"* %9, null
  br i1 %10, label %28, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = and i32 %13, 2
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %28

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %9, i64 0, i32 0
  %18 = load i32, i32* %17, align 4
  %19 = zext i32 %18 to i33
  %20 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %19, i33 1) #8
  %21 = extractvalue { i33, i1 } %20, 1
  %22 = extractvalue { i33, i1 } %20, 0
  %23 = icmp slt i33 %22, 0
  %24 = or i1 %21, %23
  br i1 %24, label %25, label %26, !prof !2

25:                                               ; preds = %16
  tail call void @llvm.trap() #8
  unreachable

26:                                               ; preds = %16
  %27 = trunc i33 %22 to i32
  store i32 %27, i32* %17, align 4
  br label %28

28:                                               ; preds = %26, %11, %7, %1
  %29 = phi %"class.WTF::StringImpl"* [ null, %1 ], [ null, %7 ], [ %9, %11 ], [ %9, %26 ]
  %30 = insertvalue { i32, %"class.WTF::StringImpl"* } undef, i32 %5, 0
  %31 = insertvalue { i32, %"class.WTF::StringImpl"* } %30, %"class.WTF::StringImpl"* %29, 1
  ret { i32, %"class.WTF::StringImpl"* } %31
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK5blink16CSSPropertyValueeqERKS0_(%"class.blink::CSSPropertyValue"* nocapture readonly, %"class.blink::CSSPropertyValue"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CSSPropertyValue", %"class.blink::CSSPropertyValue"* %0, i64 0, i32 1, i32 0, i32 0
  %4 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %3, align 8
  %5 = getelementptr inbounds %"class.blink::CSSPropertyValue", %"class.blink::CSSPropertyValue"* %1, i64 0, i32 1, i32 0, i32 0
  %6 = load %"class.blink::CSSValue"*, %"class.blink::CSSValue"** %5, align 8
  %7 = icmp eq %"class.blink::CSSValue"* %4, %6
  br i1 %7, label %14, label %8

8:                                                ; preds = %2
  %9 = icmp ne %"class.blink::CSSValue"* %4, null
  %10 = icmp ne %"class.blink::CSSValue"* %6, null
  %11 = and i1 %9, %10
  br i1 %11, label %12, label %24

12:                                               ; preds = %8
  %13 = tail call zeroext i1 @_ZNK5blink8CSSValueeqERKS0_(%"class.blink::CSSValue"* nonnull %4, %"class.blink::CSSValue"* nonnull dereferenceable(3) %6) #8
  br i1 %13, label %14, label %24

14:                                               ; preds = %2, %12
  %15 = getelementptr inbounds %"class.blink::CSSPropertyValue", %"class.blink::CSSPropertyValue"* %0, i64 0, i32 0, i32 1
  %16 = load i16, i16* %15, align 8
  %17 = and i16 %16, 16384
  %18 = icmp eq i16 %17, 0
  %19 = getelementptr inbounds %"class.blink::CSSPropertyValue", %"class.blink::CSSPropertyValue"* %1, i64 0, i32 0, i32 1
  %20 = load i16, i16* %19, align 8
  %21 = and i16 %20, 16384
  %22 = icmp ne i16 %21, 0
  %23 = xor i1 %18, %22
  br label %24

24:                                               ; preds = %8, %14, %12
  %25 = phi i1 [ false, %12 ], [ %23, %14 ], [ false, %8 ]
  ret i1 %25
}

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF12VectorBufferIN5blink22StylePropertyShorthandELj4ENS_18PartitionAllocatorEE22ReallyDeallocateBufferEPS2_(%"class.WTF::VectorBuffer"*, %"class.blink::StylePropertyShorthand"*) local_unnamed_addr #4 comdat align 2 {
  %3 = bitcast %"class.blink::StylePropertyShorthand"* %1 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %3) #8
  ret void
}

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #7

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare zeroext i1 @_ZNK5blink8CSSValueeqERKS0_(%"class.blink::CSSValue"*, %"class.blink::CSSValue"* dereferenceable(3)) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!"branch_weights", i32 2000, i32 1}
