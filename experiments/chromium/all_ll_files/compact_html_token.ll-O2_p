; ModuleID = '../../third_party/blink/renderer/core/html/parser/compact_html_token.cc'
source_filename = "../../third_party/blink/renderer/core/html/parser/compact_html_token.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::CompactHTMLToken" = type { i8, %"class.WTF::String", %"class.WTF::Vector", %"class.WTF::TextPosition" }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"struct.blink::CompactHTMLToken::Attribute"*, i32, i32 }
%"struct.blink::CompactHTMLToken::Attribute" = type { %"class.WTF::String", %"class.WTF::String" }
%"class.WTF::TextPosition" = type { %"class.WTF::OrdinalNumber", %"class.WTF::OrdinalNumber" }
%"class.WTF::OrdinalNumber" = type { i32 }
%"class.blink::HTMLToken" = type { i32, %"class.blink::HTMLToken::Attribute::Range", i32, %class.LiteralBuffer, i16, i8, %"class.WTF::Vector.1", %"class.blink::HTMLToken::Attribute"*, %"class.std::__1::unique_ptr" }
%"class.blink::HTMLToken::Attribute::Range" = type { i32, i32 }
%class.LiteralBuffer = type { i16*, i16*, i16*, [256 x i16] }
%"class.WTF::Vector.1" = type { %"class.WTF::VectorBuffer.2" }
%"class.WTF::VectorBuffer.2" = type { %"class.WTF::VectorBufferBase.3", [1920 x i8] }
%"class.WTF::VectorBufferBase.3" = type { %"class.blink::HTMLToken::Attribute"*, i32, i32 }
%"class.blink::HTMLToken::Attribute" = type { %class.LiteralBuffer.4, %class.LiteralBuffer.4, %"class.blink::HTMLToken::Attribute::Range", %"class.blink::HTMLToken::Attribute::Range" }
%class.LiteralBuffer.4 = type { i16*, i16*, i16*, [32 x i16] }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::DoctypeData"* }
%"class.blink::DoctypeData" = type <{ i8, i8, [6 x i8], %"class.WTF::Vector.7", %"class.WTF::Vector.7", i8, [7 x i8] }>
%"class.WTF::Vector.7" = type { %"class.WTF::VectorBuffer.8" }
%"class.WTF::VectorBuffer.8" = type { %"class.WTF::VectorBufferBase.9" }
%"class.WTF::VectorBufferBase.9" = type { i16*, i32, i32 }
%"class.blink::QualifiedName" = type { %class.scoped_refptr.13 }
%class.scoped_refptr.13 = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZNK3WTF6VectorIN5blink16CompactHTMLToken9AttributeELj0ENS_18PartitionAllocatorEE2atEj = comdat any

$_ZN3WTF6VectorIN5blink16CompactHTMLToken9AttributeELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_ = comdat any

$_ZN3WTF6VectorIN5blink16CompactHTMLToken9AttributeELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj = comdat any

$_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink16CompactHTMLToken9AttributeEEEmm = comdat any

@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1
@.str.2 = private unnamed_addr constant [44 x i8] c"count <= MaxElementCountInBackingStore<T>()\00", align 1
@.str.3 = private unnamed_addr constant [78 x i8] c"../../third_party/blink/renderer/platform/wtf/allocator/partition_allocator.h\00", align 1
@__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink16CompactHTMLToken9AttributeEEEPKcv = private unnamed_addr constant [82 x i8] c"const char *WTF::GetStringWithTypeName() [T = blink::CompactHTMLToken::Attribute]\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1

@_ZN5blink16CompactHTMLTokenC1EPKNS_9HTMLTokenERKN3WTF12TextPositionE = hidden unnamed_addr alias void (%"class.blink::CompactHTMLToken"*, %"class.blink::HTMLToken"*, %"class.WTF::TextPosition"*), void (%"class.blink::CompactHTMLToken"*, %"class.blink::HTMLToken"*, %"class.WTF::TextPosition"*)* @_ZN5blink16CompactHTMLTokenC2EPKNS_9HTMLTokenERKN3WTF12TextPositionE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink16CompactHTMLTokenC2EPKNS_9HTMLTokenERKN3WTF12TextPositionE(%"class.blink::CompactHTMLToken"*, %"class.blink::HTMLToken"* nocapture readonly, %"class.WTF::TextPosition"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %4 = alloca %"struct.blink::CompactHTMLToken::Attribute", align 8
  %5 = alloca %"struct.blink::CompactHTMLToken::Attribute", align 8
  %6 = getelementptr inbounds %"class.blink::CompactHTMLToken", %"class.blink::CompactHTMLToken"* %0, i64 0, i32 0
  %7 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %1, i64 0, i32 0
  %8 = load i32, i32* %7, align 8
  %9 = trunc i32 %8 to i8
  %10 = load i8, i8* %6, align 8
  %11 = and i8 %9, 15
  %12 = and i8 %10, -112
  %13 = or i8 %12, %11
  store i8 %13, i8* %6, align 8
  %14 = getelementptr inbounds %"class.blink::CompactHTMLToken", %"class.blink::CompactHTMLToken"* %0, i64 0, i32 1
  %15 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %14, i64 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.blink::CompactHTMLToken", %"class.blink::CompactHTMLToken"* %0, i64 0, i32 2
  %17 = getelementptr inbounds %"class.blink::CompactHTMLToken", %"class.blink::CompactHTMLToken"* %0, i64 0, i32 3
  %18 = bitcast %"class.WTF::TextPosition"* %2 to i64*
  %19 = bitcast %"class.WTF::TextPosition"* %17 to i64*
  %20 = bitcast %"class.WTF::String"* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 24, i1 false)
  %21 = load i64, i64* %18, align 4
  store i64 %21, i64* %19, align 8
  %22 = zext i8 %11 to i32
  switch i32 %22, label %432 [
    i32 5, label %393
    i32 1, label %23
    i32 4, label %393
    i32 2, label %219
    i32 3, label %386
  ]

23:                                               ; preds = %3
  %24 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %1, i64 0, i32 3, i32 0
  %25 = load i16*, i16** %24, align 8
  %26 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %1, i64 0, i32 3, i32 1
  %27 = bitcast i16** %26 to i64*
  %28 = load i64, i64* %27, align 8
  %29 = ptrtoint i16* %25 to i64
  %30 = sub i64 %28, %29
  %31 = lshr exact i64 %30, 1
  %32 = trunc i64 %31 to i32
  %33 = tail call %"class.WTF::StringImpl"* @_ZN5blink27AttemptStaticStringCreationEPKDsjNS_14CharacterWidthE(i16* %25, i32 %32, i32 0) #7
  %34 = ptrtoint %"class.WTF::StringImpl"* %33 to i64
  %35 = bitcast %"class.WTF::String"* %14 to i64*
  %36 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  store i64 %34, i64* %35, align 8
  %37 = icmp eq %"class.WTF::StringImpl"* %36, null
  br i1 %37, label %51, label %38

38:                                               ; preds = %23
  %39 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = and i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %36, i64 0, i32 0
  %44 = load i32, i32* %43, align 4
  br i1 %42, label %45, label %47

45:                                               ; preds = %38
  %46 = add i32 %44, -1
  store i32 %46, i32* %43, align 4
  br label %47

47:                                               ; preds = %45, %38
  %48 = phi i32 [ %46, %45 ], [ %44, %38 ]
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %51

50:                                               ; preds = %47
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %36) #7
  br label %51

51:                                               ; preds = %50, %47, %23
  %52 = bitcast %"struct.blink::CompactHTMLToken::Attribute"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %52) #7
  %53 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %1, i64 0, i32 8, i32 0, i32 0, i32 0
  %54 = load %"class.blink::DoctypeData"*, %"class.blink::DoctypeData"** %53, align 8
  %55 = getelementptr inbounds %"class.blink::DoctypeData", %"class.blink::DoctypeData"* %54, i64 0, i32 3, i32 0, i32 0, i32 0
  %56 = load i16*, i16** %55, align 8
  %57 = getelementptr inbounds %"class.blink::DoctypeData", %"class.blink::DoctypeData"* %54, i64 0, i32 3, i32 0, i32 0, i32 2
  %58 = load i32, i32* %57, align 4
  %59 = tail call %"class.WTF::StringImpl"* @_ZN5blink27AttemptStaticStringCreationEPKDsjNS_14CharacterWidthE(i16* %56, i32 %58, i32 0) #7
  %60 = load %"class.blink::DoctypeData"*, %"class.blink::DoctypeData"** %53, align 8
  %61 = getelementptr inbounds %"class.blink::DoctypeData", %"class.blink::DoctypeData"* %60, i64 0, i32 4, i32 0, i32 0, i32 2
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %68, label %64

64:                                               ; preds = %51
  %65 = getelementptr inbounds %"class.blink::DoctypeData", %"class.blink::DoctypeData"* %60, i64 0, i32 4, i32 0, i32 0, i32 0
  %66 = load i16*, i16** %65, align 8
  %67 = tail call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKDsj(i16* %66, i32 %62) #7
  br label %88

68:                                               ; preds = %51
  %69 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %70 = icmp eq %"class.WTF::StringImpl"* %69, null
  br i1 %70, label %88, label %71

71:                                               ; preds = %68
  %72 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %69, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = load atomic i32, i32* %72 monotonic, align 4
  %74 = and i32 %73, 2
  %75 = icmp eq i32 %74, 0
  br i1 %75, label %76, label %88

76:                                               ; preds = %71
  %77 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %69, i64 0, i32 0
  %78 = load i32, i32* %77, align 4
  %79 = zext i32 %78 to i33
  %80 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %79, i33 1) #7
  %81 = extractvalue { i33, i1 } %80, 1
  %82 = extractvalue { i33, i1 } %80, 0
  %83 = icmp slt i33 %82, 0
  %84 = or i1 %81, %83
  br i1 %84, label %85, label %86, !prof !2

85:                                               ; preds = %76
  tail call void @llvm.trap() #7
  unreachable

86:                                               ; preds = %76
  %87 = trunc i33 %82 to i32
  store i32 %87, i32* %77, align 4
  br label %88

88:                                               ; preds = %64, %68, %71, %86
  %89 = phi %"class.WTF::StringImpl"* [ null, %68 ], [ %69, %86 ], [ %69, %71 ], [ %67, %64 ]
  %90 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %4, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %59, %"class.WTF::StringImpl"** %90, align 8
  %91 = icmp eq %"class.WTF::StringImpl"* %59, null
  br i1 %91, label %109, label %92

92:                                               ; preds = %88
  %93 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %94 = load atomic i32, i32* %93 monotonic, align 4
  %95 = and i32 %94, 2
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %97, label %109

97:                                               ; preds = %92
  %98 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 0
  %99 = load i32, i32* %98, align 4
  %100 = zext i32 %99 to i33
  %101 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %100, i33 1) #7
  %102 = extractvalue { i33, i1 } %101, 1
  %103 = extractvalue { i33, i1 } %101, 0
  %104 = icmp slt i33 %103, 0
  %105 = or i1 %102, %104
  br i1 %105, label %106, label %107, !prof !2

106:                                              ; preds = %97
  tail call void @llvm.trap() #7
  unreachable

107:                                              ; preds = %97
  %108 = trunc i33 %103 to i32
  store i32 %108, i32* %98, align 4
  br label %109

109:                                              ; preds = %107, %92, %88
  %110 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %4, i64 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %89, %"class.WTF::StringImpl"** %110, align 8
  %111 = icmp eq %"class.WTF::StringImpl"* %89, null
  br i1 %111, label %129, label %112

112:                                              ; preds = %109
  %113 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %114 = load atomic i32, i32* %113 monotonic, align 4
  %115 = and i32 %114, 2
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %129

117:                                              ; preds = %112
  %118 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 0, i32 0
  %119 = load i32, i32* %118, align 4
  %120 = zext i32 %119 to i33
  %121 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %120, i33 1) #7
  %122 = extractvalue { i33, i1 } %121, 1
  %123 = extractvalue { i33, i1 } %121, 0
  %124 = icmp slt i33 %123, 0
  %125 = or i1 %122, %124
  br i1 %125, label %126, label %127, !prof !2

126:                                              ; preds = %117
  tail call void @llvm.trap() #7
  unreachable

127:                                              ; preds = %117
  %128 = trunc i33 %123 to i32
  store i32 %128, i32* %118, align 4
  br label %129

129:                                              ; preds = %109, %112, %127
  %130 = getelementptr inbounds %"class.blink::CompactHTMLToken", %"class.blink::CompactHTMLToken"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %131 = load i32, i32* %130, align 4
  %132 = getelementptr inbounds %"class.blink::CompactHTMLToken", %"class.blink::CompactHTMLToken"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %133 = load i32, i32* %132, align 8
  %134 = icmp eq i32 %131, %133
  br i1 %134, label %151, label %135, !prof !2

135:                                              ; preds = %129
  %136 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %16, i64 0, i32 0, i32 0, i32 0
  %137 = load %"struct.blink::CompactHTMLToken::Attribute"*, %"struct.blink::CompactHTMLToken::Attribute"** %136, align 8
  %138 = zext i32 %131 to i64
  %139 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %137, i64 %138
  %140 = bitcast %"struct.blink::CompactHTMLToken::Attribute"* %4 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = bitcast %"struct.blink::CompactHTMLToken::Attribute"* %139 to i64*
  store i64 %141, i64* %142, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %90, align 8
  %143 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %137, i64 %138, i32 1
  %144 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %4, i64 0, i32 1
  %145 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %144, i64 0, i32 0, i32 0
  %146 = bitcast %"class.WTF::String"* %144 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = bitcast %"class.WTF::String"* %143 to i64*
  store i64 %147, i64* %148, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %145, align 8
  %149 = load i32, i32* %130, align 4
  %150 = add i32 %149, 1
  store i32 %150, i32* %130, align 4
  br label %167

151:                                              ; preds = %129
  call void @_ZN3WTF6VectorIN5blink16CompactHTMLToken9AttributeELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_(%"class.WTF::Vector"* %16, %"struct.blink::CompactHTMLToken::Attribute"* nonnull dereferenceable(16) %4) #7
  %152 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %110, align 8
  %153 = icmp eq %"class.WTF::StringImpl"* %152, null
  br i1 %153, label %167, label %154

154:                                              ; preds = %151
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %156 = load atomic i32, i32* %155 monotonic, align 4
  %157 = and i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %152, i64 0, i32 0
  %160 = load i32, i32* %159, align 4
  br i1 %158, label %161, label %163

161:                                              ; preds = %154
  %162 = add i32 %160, -1
  store i32 %162, i32* %159, align 4
  br label %163

163:                                              ; preds = %161, %154
  %164 = phi i32 [ %162, %161 ], [ %160, %154 ]
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %163
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %152) #7
  br label %167

167:                                              ; preds = %135, %166, %163, %151
  %168 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %90, align 8
  %169 = icmp eq %"class.WTF::StringImpl"* %168, null
  br i1 %169, label %183, label %170

170:                                              ; preds = %167
  %171 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %168, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %172 = load atomic i32, i32* %171 monotonic, align 4
  %173 = and i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %168, i64 0, i32 0
  %176 = load i32, i32* %175, align 4
  br i1 %174, label %177, label %179

177:                                              ; preds = %170
  %178 = add i32 %176, -1
  store i32 %178, i32* %175, align 4
  br label %179

179:                                              ; preds = %177, %170
  %180 = phi i32 [ %178, %177 ], [ %176, %170 ]
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %182, label %183

182:                                              ; preds = %179
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %168) #7
  br label %183

183:                                              ; preds = %167, %179, %182
  br i1 %111, label %197, label %184

184:                                              ; preds = %183
  %185 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %186 = load atomic i32, i32* %185 monotonic, align 4
  %187 = and i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 0, i32 0
  %190 = load i32, i32* %189, align 4
  br i1 %188, label %191, label %193

191:                                              ; preds = %184
  %192 = add i32 %190, -1
  store i32 %192, i32* %189, align 4
  br label %193

193:                                              ; preds = %191, %184
  %194 = phi i32 [ %192, %191 ], [ %190, %184 ]
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %196, label %197

196:                                              ; preds = %193
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %89) #7
  br label %197

197:                                              ; preds = %183, %193, %196
  br i1 %91, label %211, label %198

198:                                              ; preds = %197
  %199 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %200 = load atomic i32, i32* %199 monotonic, align 4
  %201 = and i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %59, i64 0, i32 0
  %204 = load i32, i32* %203, align 4
  br i1 %202, label %205, label %207

205:                                              ; preds = %198
  %206 = add i32 %204, -1
  store i32 %206, i32* %203, align 4
  br label %207

207:                                              ; preds = %205, %198
  %208 = phi i32 [ %206, %205 ], [ %204, %198 ]
  %209 = icmp eq i32 %208, 0
  br i1 %209, label %210, label %211

210:                                              ; preds = %207
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %59) #7
  br label %211

211:                                              ; preds = %197, %207, %210
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %52) #7
  %212 = load %"class.blink::DoctypeData"*, %"class.blink::DoctypeData"** %53, align 8
  %213 = getelementptr inbounds %"class.blink::DoctypeData", %"class.blink::DoctypeData"* %212, i64 0, i32 5
  %214 = load i8, i8* %213, align 8, !range !3
  %215 = load i8, i8* %6, align 8
  %216 = shl nuw nsw i8 %214, 6
  %217 = and i8 %215, -65
  %218 = or i8 %217, %216
  store i8 %218, i8* %6, align 8
  br label %432

219:                                              ; preds = %3
  %220 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %1, i64 0, i32 6, i32 0, i32 0, i32 2
  %221 = load i32, i32* %220, align 4
  %222 = icmp eq i32 %221, 0
  br i1 %222, label %386, label %223

223:                                              ; preds = %219
  %224 = zext i32 %221 to i64
  %225 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink16CompactHTMLToken9AttributeEEEmm(i64 %224) #7
  %226 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %225, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink16CompactHTMLToken9AttributeEEEPKcv, i64 0, i64 0)) #7
  %227 = ptrtoint i8* %226 to i64
  %228 = bitcast %"class.WTF::Vector"* %16 to i64*
  store atomic i64 %227, i64* %228 monotonic, align 8
  %229 = lshr i64 %225, 4
  %230 = trunc i64 %229 to i32
  %231 = getelementptr inbounds %"class.blink::CompactHTMLToken", %"class.blink::CompactHTMLToken"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  store i32 %230, i32* %231, align 8
  %232 = load i32, i32* %220, align 4
  %233 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %1, i64 0, i32 6, i32 0, i32 0, i32 0
  %234 = load %"class.blink::HTMLToken::Attribute"*, %"class.blink::HTMLToken::Attribute"** %233, align 8
  %235 = zext i32 %232 to i64
  %236 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %234, i64 %235
  %237 = icmp eq i32 %232, 0
  br i1 %237, label %386, label %238

238:                                              ; preds = %223
  %239 = bitcast %"struct.blink::CompactHTMLToken::Attribute"* %5 to i8*
  %240 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %5, i64 0, i32 0, i32 0, i32 0
  %241 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %5, i64 0, i32 1, i32 0, i32 0
  %242 = getelementptr inbounds %"class.blink::CompactHTMLToken", %"class.blink::CompactHTMLToken"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %243 = getelementptr inbounds %"class.blink::CompactHTMLToken", %"class.blink::CompactHTMLToken"* %0, i64 0, i32 2, i32 0, i32 0, i32 1
  %244 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %16, i64 0, i32 0, i32 0, i32 0
  %245 = bitcast %"struct.blink::CompactHTMLToken::Attribute"* %5 to i64*
  %246 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %5, i64 0, i32 1
  %247 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %246, i64 0, i32 0, i32 0
  %248 = bitcast %"class.WTF::String"* %246 to i64*
  br label %249

249:                                              ; preds = %238, %383
  %250 = phi %"class.blink::HTMLToken::Attribute"* [ %234, %238 ], [ %384, %383 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %239) #7
  %251 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %250, i64 0, i32 0, i32 0
  %252 = load i16*, i16** %251, align 8
  %253 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %250, i64 0, i32 0, i32 1
  %254 = bitcast i16** %253 to i64*
  %255 = load i64, i64* %254, align 8
  %256 = ptrtoint i16* %252 to i64
  %257 = sub i64 %255, %256
  %258 = lshr exact i64 %257, 1
  %259 = trunc i64 %258 to i32
  %260 = call %"class.WTF::StringImpl"* @_ZN5blink27AttemptStaticStringCreationEPKDsjNS_14CharacterWidthE(i16* %252, i32 %259, i32 0) #7
  %261 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %250, i64 0, i32 1, i32 0
  %262 = load i16*, i16** %261, align 8
  %263 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %250, i64 0, i32 1, i32 1
  %264 = bitcast i16** %263 to i64*
  %265 = load i64, i64* %264, align 8
  %266 = ptrtoint i16* %262 to i64
  %267 = sub i64 %265, %266
  %268 = lshr exact i64 %267, 1
  %269 = trunc i64 %268 to i32
  %270 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl20Create8BitIfPossibleEPKDsj(i16* %262, i32 %269) #7
  store %"class.WTF::StringImpl"* %260, %"class.WTF::StringImpl"** %240, align 8
  %271 = icmp eq %"class.WTF::StringImpl"* %260, null
  br i1 %271, label %289, label %272

272:                                              ; preds = %249
  %273 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %260, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %274 = load atomic i32, i32* %273 monotonic, align 4
  %275 = and i32 %274, 2
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %277, label %289

277:                                              ; preds = %272
  %278 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %260, i64 0, i32 0
  %279 = load i32, i32* %278, align 4
  %280 = zext i32 %279 to i33
  %281 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %280, i33 1) #7
  %282 = extractvalue { i33, i1 } %281, 1
  %283 = extractvalue { i33, i1 } %281, 0
  %284 = icmp slt i33 %283, 0
  %285 = or i1 %282, %284
  br i1 %285, label %286, label %287, !prof !2

286:                                              ; preds = %277
  call void @llvm.trap() #7
  unreachable

287:                                              ; preds = %277
  %288 = trunc i33 %283 to i32
  store i32 %288, i32* %278, align 4
  br label %289

289:                                              ; preds = %287, %272, %249
  store %"class.WTF::StringImpl"* %270, %"class.WTF::StringImpl"** %241, align 8
  %290 = icmp eq %"class.WTF::StringImpl"* %270, null
  br i1 %290, label %308, label %291

291:                                              ; preds = %289
  %292 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %270, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %293 = load atomic i32, i32* %292 monotonic, align 4
  %294 = and i32 %293, 2
  %295 = icmp eq i32 %294, 0
  br i1 %295, label %296, label %308

296:                                              ; preds = %291
  %297 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %270, i64 0, i32 0
  %298 = load i32, i32* %297, align 4
  %299 = zext i32 %298 to i33
  %300 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %299, i33 1) #7
  %301 = extractvalue { i33, i1 } %300, 1
  %302 = extractvalue { i33, i1 } %300, 0
  %303 = icmp slt i33 %302, 0
  %304 = or i1 %301, %303
  br i1 %304, label %305, label %306, !prof !2

305:                                              ; preds = %296
  call void @llvm.trap() #7
  unreachable

306:                                              ; preds = %296
  %307 = trunc i33 %302 to i32
  store i32 %307, i32* %297, align 4
  br label %308

308:                                              ; preds = %289, %291, %306
  %309 = load i32, i32* %242, align 4
  %310 = load i32, i32* %243, align 8
  %311 = icmp eq i32 %309, %310
  br i1 %311, label %323, label %312, !prof !2

312:                                              ; preds = %308
  %313 = load %"struct.blink::CompactHTMLToken::Attribute"*, %"struct.blink::CompactHTMLToken::Attribute"** %244, align 8
  %314 = zext i32 %309 to i64
  %315 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %313, i64 %314
  %316 = load i64, i64* %245, align 8
  %317 = bitcast %"struct.blink::CompactHTMLToken::Attribute"* %315 to i64*
  store i64 %316, i64* %317, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %240, align 8
  %318 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %313, i64 %314, i32 1
  %319 = load i64, i64* %248, align 8
  %320 = bitcast %"class.WTF::String"* %318 to i64*
  store i64 %319, i64* %320, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %247, align 8
  %321 = load i32, i32* %242, align 4
  %322 = add i32 %321, 1
  store i32 %322, i32* %242, align 4
  br label %339

323:                                              ; preds = %308
  call void @_ZN3WTF6VectorIN5blink16CompactHTMLToken9AttributeELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_(%"class.WTF::Vector"* %16, %"struct.blink::CompactHTMLToken::Attribute"* nonnull dereferenceable(16) %5) #7
  %324 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %241, align 8
  %325 = icmp eq %"class.WTF::StringImpl"* %324, null
  br i1 %325, label %339, label %326

326:                                              ; preds = %323
  %327 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %324, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %328 = load atomic i32, i32* %327 monotonic, align 4
  %329 = and i32 %328, 2
  %330 = icmp eq i32 %329, 0
  %331 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %324, i64 0, i32 0
  %332 = load i32, i32* %331, align 4
  br i1 %330, label %333, label %335

333:                                              ; preds = %326
  %334 = add i32 %332, -1
  store i32 %334, i32* %331, align 4
  br label %335

335:                                              ; preds = %333, %326
  %336 = phi i32 [ %334, %333 ], [ %332, %326 ]
  %337 = icmp eq i32 %336, 0
  br i1 %337, label %338, label %339

338:                                              ; preds = %335
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %324) #7
  br label %339

339:                                              ; preds = %312, %338, %335, %323
  %340 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %240, align 8
  %341 = icmp eq %"class.WTF::StringImpl"* %340, null
  br i1 %341, label %355, label %342

342:                                              ; preds = %339
  %343 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %340, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %344 = load atomic i32, i32* %343 monotonic, align 4
  %345 = and i32 %344, 2
  %346 = icmp eq i32 %345, 0
  %347 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %340, i64 0, i32 0
  %348 = load i32, i32* %347, align 4
  br i1 %346, label %349, label %351

349:                                              ; preds = %342
  %350 = add i32 %348, -1
  store i32 %350, i32* %347, align 4
  br label %351

351:                                              ; preds = %349, %342
  %352 = phi i32 [ %350, %349 ], [ %348, %342 ]
  %353 = icmp eq i32 %352, 0
  br i1 %353, label %354, label %355

354:                                              ; preds = %351
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %340) #7
  br label %355

355:                                              ; preds = %339, %351, %354
  br i1 %290, label %369, label %356

356:                                              ; preds = %355
  %357 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %270, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %358 = load atomic i32, i32* %357 monotonic, align 4
  %359 = and i32 %358, 2
  %360 = icmp eq i32 %359, 0
  %361 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %270, i64 0, i32 0
  %362 = load i32, i32* %361, align 4
  br i1 %360, label %363, label %365

363:                                              ; preds = %356
  %364 = add i32 %362, -1
  store i32 %364, i32* %361, align 4
  br label %365

365:                                              ; preds = %363, %356
  %366 = phi i32 [ %364, %363 ], [ %362, %356 ]
  %367 = icmp eq i32 %366, 0
  br i1 %367, label %368, label %369

368:                                              ; preds = %365
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %270) #7
  br label %369

369:                                              ; preds = %355, %365, %368
  br i1 %271, label %383, label %370

370:                                              ; preds = %369
  %371 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %260, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %372 = load atomic i32, i32* %371 monotonic, align 4
  %373 = and i32 %372, 2
  %374 = icmp eq i32 %373, 0
  %375 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %260, i64 0, i32 0
  %376 = load i32, i32* %375, align 4
  br i1 %374, label %377, label %379

377:                                              ; preds = %370
  %378 = add i32 %376, -1
  store i32 %378, i32* %375, align 4
  br label %379

379:                                              ; preds = %377, %370
  %380 = phi i32 [ %378, %377 ], [ %376, %370 ]
  %381 = icmp eq i32 %380, 0
  br i1 %381, label %382, label %383

382:                                              ; preds = %379
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %260) #7
  br label %383

383:                                              ; preds = %369, %379, %382
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %239) #7
  %384 = getelementptr inbounds %"class.blink::HTMLToken::Attribute", %"class.blink::HTMLToken::Attribute"* %250, i64 1
  %385 = icmp eq %"class.blink::HTMLToken::Attribute"* %384, %236
  br i1 %385, label %386, label %249

386:                                              ; preds = %383, %219, %223, %3
  %387 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %1, i64 0, i32 5
  %388 = load i8, i8* %387, align 2, !range !3
  %389 = load i8, i8* %6, align 8
  %390 = shl nuw nsw i8 %388, 4
  %391 = and i8 %389, -17
  %392 = or i8 %391, %390
  store i8 %392, i8* %6, align 8
  br label %393

393:                                              ; preds = %3, %3, %386
  %394 = phi i8 [ %13, %3 ], [ %13, %3 ], [ %392, %386 ]
  %395 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %1, i64 0, i32 4
  %396 = load i16, i16* %395, align 8
  %397 = icmp ult i16 %396, 256
  %398 = zext i1 %397 to i8
  %399 = shl nuw nsw i8 %398, 5
  %400 = and i8 %394, -33
  %401 = or i8 %399, %400
  store i8 %401, i8* %6, align 8
  %402 = load i16, i16* %395, align 8
  %403 = icmp ult i16 %402, 256
  %404 = select i1 %403, i32 1, i32 2
  %405 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %1, i64 0, i32 3, i32 0
  %406 = load i16*, i16** %405, align 8
  %407 = getelementptr inbounds %"class.blink::HTMLToken", %"class.blink::HTMLToken"* %1, i64 0, i32 3, i32 1
  %408 = bitcast i16** %407 to i64*
  %409 = load i64, i64* %408, align 8
  %410 = ptrtoint i16* %406 to i64
  %411 = sub i64 %409, %410
  %412 = lshr exact i64 %411, 1
  %413 = trunc i64 %412 to i32
  %414 = call %"class.WTF::StringImpl"* @_ZN5blink27AttemptStaticStringCreationEPKDsjNS_14CharacterWidthE(i16* %406, i32 %413, i32 %404) #7
  %415 = ptrtoint %"class.WTF::StringImpl"* %414 to i64
  %416 = bitcast %"class.WTF::String"* %14 to i64*
  %417 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %15, align 8
  store i64 %415, i64* %416, align 8
  %418 = icmp eq %"class.WTF::StringImpl"* %417, null
  br i1 %418, label %432, label %419

419:                                              ; preds = %393
  %420 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %417, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %421 = load atomic i32, i32* %420 monotonic, align 4
  %422 = and i32 %421, 2
  %423 = icmp eq i32 %422, 0
  %424 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %417, i64 0, i32 0
  %425 = load i32, i32* %424, align 4
  br i1 %423, label %426, label %428

426:                                              ; preds = %419
  %427 = add i32 %425, -1
  store i32 %427, i32* %424, align 4
  br label %428

428:                                              ; preds = %426, %419
  %429 = phi i32 [ %427, %426 ], [ %425, %419 ]
  %430 = icmp eq i32 %429, 0
  br i1 %430, label %431, label %432

431:                                              ; preds = %428
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %417) #7
  br label %432

432:                                              ; preds = %393, %428, %431, %3, %211
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden %"struct.blink::CompactHTMLToken::Attribute"* @_ZNK5blink16CompactHTMLToken16GetAttributeItemERKNS_13QualifiedNameE(%"class.blink::CompactHTMLToken"*, %"class.blink::QualifiedName"* dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::CompactHTMLToken", %"class.blink::CompactHTMLToken"* %0, i64 0, i32 2
  %4 = getelementptr inbounds %"class.blink::CompactHTMLToken", %"class.blink::CompactHTMLToken"* %0, i64 0, i32 2, i32 0, i32 0, i32 2
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %18, label %7

7:                                                ; preds = %2, %12
  %8 = phi i32 [ %13, %12 ], [ 0, %2 ]
  %9 = tail call dereferenceable(16) %"struct.blink::CompactHTMLToken::Attribute"* @_ZNK3WTF6VectorIN5blink16CompactHTMLToken9AttributeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %3, i32 %8)
  %10 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %9, i64 0, i32 0
  %11 = tail call zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8) %10, %"class.blink::QualifiedName"* dereferenceable(8) %1) #7
  br i1 %11, label %16, label %12

12:                                               ; preds = %7
  %13 = add nuw i32 %8, 1
  %14 = load i32, i32* %4, align 4
  %15 = icmp ult i32 %13, %14
  br i1 %15, label %7, label %18

16:                                               ; preds = %7
  %17 = tail call dereferenceable(16) %"struct.blink::CompactHTMLToken::Attribute"* @_ZNK3WTF6VectorIN5blink16CompactHTMLToken9AttributeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"* %3, i32 %8)
  br label %18

18:                                               ; preds = %12, %2, %16
  %19 = phi %"struct.blink::CompactHTMLToken::Attribute"* [ %17, %16 ], [ null, %2 ], [ null, %12 ]
  ret %"struct.blink::CompactHTMLToken::Attribute"* %19
}

declare zeroext i1 @_ZN5blink15ThreadSafeMatchERKN3WTF6StringERKNS_13QualifiedNameE(%"class.WTF::String"* dereferenceable(8), %"class.blink::QualifiedName"* dereferenceable(8)) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(16) %"struct.blink::CompactHTMLToken::Attribute"* @_ZNK3WTF6VectorIN5blink16CompactHTMLToken9AttributeELj0ENS_18PartitionAllocatorEE2atEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #7
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #7
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i8* %14, i8* %15) #7
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #7
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #7
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #7
  %23 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"struct.blink::CompactHTMLToken::Attribute"*, %"struct.blink::CompactHTMLToken::Attribute"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %24, i64 %25
  ret %"struct.blink::CompactHTMLToken::Attribute"* %26
}

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #3

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #4

declare %"class.WTF::StringImpl"* @_ZN5blink27AttemptStaticStringCreationEPKDsjNS_14CharacterWidthE(i16*, i32, i32) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl20Create8BitIfPossibleEPKDsj(i16*, i32) local_unnamed_addr #2

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKDsj(i16*, i32) local_unnamed_addr #2

; Function Attrs: noinline nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink16CompactHTMLToken9AttributeELj0ENS_18PartitionAllocatorEE14AppendSlowCaseIS3_EEvOT_(%"class.WTF::Vector"*, %"struct.blink::CompactHTMLToken::Attribute"* dereferenceable(16)) local_unnamed_addr #5 comdat align 2 {
  %3 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %4 = load i32, i32* %3, align 4
  %5 = add i32 %4, 1
  %6 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %7 = load %"struct.blink::CompactHTMLToken::Attribute"*, %"struct.blink::CompactHTMLToken::Attribute"** %6, align 8
  %8 = icmp ugt %"struct.blink::CompactHTMLToken::Attribute"* %7, %1
  br i1 %8, label %13, label %9

9:                                                ; preds = %2
  %10 = zext i32 %4 to i64
  %11 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %7, i64 %10
  %12 = icmp ugt %"struct.blink::CompactHTMLToken::Attribute"* %11, %1
  br i1 %12, label %37, label %13

13:                                               ; preds = %9, %2
  %14 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %15 = load i32, i32* %14, align 8
  %16 = lshr i32 %15, 2
  %17 = add i32 %15, 1
  %18 = add i32 %17, %16
  %19 = icmp ugt i32 %18, 4
  %20 = select i1 %19, i32 %18, i32 4
  %21 = icmp ugt i32 %20, %5
  %22 = select i1 %21, i32 %20, i32 %5
  %23 = icmp ult i32 %15, %22
  br i1 %23, label %24, label %68, !prof !4

24:                                               ; preds = %13
  %25 = icmp eq %"struct.blink::CompactHTMLToken::Attribute"* %7, null
  br i1 %25, label %26, label %35

26:                                               ; preds = %24
  %27 = zext i32 %22 to i64
  %28 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink16CompactHTMLToken9AttributeEEEmm(i64 %27) #7
  %29 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %28, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink16CompactHTMLToken9AttributeEEEPKcv, i64 0, i64 0)) #7
  %30 = ptrtoint i8* %29 to i64
  %31 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %30, i64* %31 monotonic, align 8
  %32 = lshr i64 %28, 4
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %14, align 8
  %34 = bitcast i8* %29 to %"struct.blink::CompactHTMLToken::Attribute"*
  br label %68

35:                                               ; preds = %24
  tail call void @_ZN3WTF6VectorIN5blink16CompactHTMLToken9AttributeELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %22) #7
  %36 = load %"struct.blink::CompactHTMLToken::Attribute"*, %"struct.blink::CompactHTMLToken::Attribute"** %6, align 8
  br label %68

37:                                               ; preds = %9
  %38 = ptrtoint %"struct.blink::CompactHTMLToken::Attribute"* %1 to i64
  %39 = ptrtoint %"struct.blink::CompactHTMLToken::Attribute"* %7 to i64
  %40 = sub i64 %38, %39
  %41 = ashr exact i64 %40, 4
  %42 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  %43 = load i32, i32* %42, align 8
  %44 = lshr i32 %43, 2
  %45 = add i32 %43, 1
  %46 = add i32 %45, %44
  %47 = icmp ugt i32 %46, 4
  %48 = select i1 %47, i32 %46, i32 4
  %49 = icmp ugt i32 %48, %5
  %50 = select i1 %49, i32 %48, i32 %5
  %51 = icmp ult i32 %43, %50
  br i1 %51, label %52, label %65, !prof !4

52:                                               ; preds = %37
  %53 = icmp eq %"struct.blink::CompactHTMLToken::Attribute"* %7, null
  br i1 %53, label %54, label %63

54:                                               ; preds = %52
  %55 = zext i32 %50 to i64
  %56 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink16CompactHTMLToken9AttributeEEEmm(i64 %55) #7
  %57 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %56, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink16CompactHTMLToken9AttributeEEEPKcv, i64 0, i64 0)) #7
  %58 = ptrtoint i8* %57 to i64
  %59 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %58, i64* %59 monotonic, align 8
  %60 = lshr i64 %56, 4
  %61 = trunc i64 %60 to i32
  store i32 %61, i32* %42, align 8
  %62 = bitcast i8* %57 to %"struct.blink::CompactHTMLToken::Attribute"*
  br label %65

63:                                               ; preds = %52
  tail call void @_ZN3WTF6VectorIN5blink16CompactHTMLToken9AttributeELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"* %0, i32 %50) #7
  %64 = load %"struct.blink::CompactHTMLToken::Attribute"*, %"struct.blink::CompactHTMLToken::Attribute"** %6, align 8
  br label %65

65:                                               ; preds = %37, %54, %63
  %66 = phi %"struct.blink::CompactHTMLToken::Attribute"* [ %7, %37 ], [ %62, %54 ], [ %64, %63 ]
  %67 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %66, i64 %41
  br label %68

68:                                               ; preds = %35, %26, %13, %65
  %69 = phi %"struct.blink::CompactHTMLToken::Attribute"* [ %66, %65 ], [ %7, %13 ], [ %34, %26 ], [ %36, %35 ]
  %70 = phi %"struct.blink::CompactHTMLToken::Attribute"* [ %67, %65 ], [ %1, %13 ], [ %1, %26 ], [ %1, %35 ]
  %71 = load i32, i32* %3, align 4
  %72 = zext i32 %71 to i64
  %73 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %69, i64 %72
  %74 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %70, i64 0, i32 0, i32 0, i32 0
  %75 = bitcast %"struct.blink::CompactHTMLToken::Attribute"* %70 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = bitcast %"struct.blink::CompactHTMLToken::Attribute"* %73 to i64*
  store i64 %76, i64* %77, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %74, align 8
  %78 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %69, i64 %72, i32 1
  %79 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %70, i64 0, i32 1
  %80 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %79, i64 0, i32 0, i32 0
  %81 = bitcast %"class.WTF::String"* %79 to i64*
  %82 = load i64, i64* %81, align 8
  %83 = bitcast %"class.WTF::String"* %78 to i64*
  store i64 %82, i64* %83, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %80, align 8
  %84 = load i32, i32* %3, align 4
  %85 = add i32 %84, 1
  store i32 %85, i32* %3, align 4
  ret void
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #6

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3WTF6VectorIN5blink16CompactHTMLToken9AttributeELj0ENS_18PartitionAllocatorEE16ReallocateBufferEj(%"class.WTF::Vector"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %4, label %48

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %6 = load %"struct.blink::CompactHTMLToken::Attribute"*, %"struct.blink::CompactHTMLToken::Attribute"** %5, align 8
  %7 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = zext i32 %8 to i64
  %10 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %6, i64 %9
  %11 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 0, i64* %11 monotonic, align 8
  %12 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 0, i32* %12, align 8
  %13 = icmp eq i32 %8, 0
  br i1 %13, label %46, label %14

14:                                               ; preds = %4, %42
  %15 = phi %"struct.blink::CompactHTMLToken::Attribute"* [ %44, %42 ], [ %6, %4 ]
  %16 = phi %"struct.blink::CompactHTMLToken::Attribute"* [ %43, %42 ], [ null, %4 ]
  %17 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %15, i64 0, i32 0, i32 0, i32 0
  %18 = bitcast %"struct.blink::CompactHTMLToken::Attribute"* %15 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"struct.blink::CompactHTMLToken::Attribute"* %16 to i64*
  store i64 %19, i64* %20, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %17, align 8
  %21 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %16, i64 0, i32 1
  %22 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %15, i64 0, i32 1
  %23 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %22, i64 0, i32 0, i32 0
  %24 = bitcast %"class.WTF::String"* %22 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.WTF::String"* %21 to i64*
  store i64 %25, i64* %26, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %23, align 8
  %27 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %17, align 8
  %28 = icmp eq %"class.WTF::StringImpl"* %27, null
  br i1 %28, label %42, label %29

29:                                               ; preds = %14
  %30 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %27, i64 0, i32 0
  %35 = load i32, i32* %34, align 4
  br i1 %33, label %36, label %38

36:                                               ; preds = %29
  %37 = add i32 %35, -1
  store i32 %37, i32* %34, align 4
  br label %38

38:                                               ; preds = %36, %29
  %39 = phi i32 [ %37, %36 ], [ %35, %29 ]
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %42

41:                                               ; preds = %38
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %27) #7
  br label %42

42:                                               ; preds = %41, %38, %14
  %43 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %16, i64 1
  %44 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %15, i64 1
  %45 = icmp eq %"struct.blink::CompactHTMLToken::Attribute"* %44, %10
  br i1 %45, label %46, label %14

46:                                               ; preds = %42, %4
  %47 = bitcast %"struct.blink::CompactHTMLToken::Attribute"* %6 to i8*
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %47) #7
  br label %105

48:                                               ; preds = %2
  %49 = zext i32 %1 to i64
  %50 = tail call i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink16CompactHTMLToken9AttributeEEEmm(i64 %49) #7
  %51 = tail call i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64 %50, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @__PRETTY_FUNCTION__._ZN3WTF21GetStringWithTypeNameIN5blink16CompactHTMLToken9AttributeEEEPKcv, i64 0, i64 0)) #7
  %52 = lshr i64 %50, 4
  %53 = ptrtoint i8* %51 to i64
  %54 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 0
  %55 = load %"struct.blink::CompactHTMLToken::Attribute"*, %"struct.blink::CompactHTMLToken::Attribute"** %54, align 8
  %56 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 2
  %57 = load i32, i32* %56, align 4
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %55, i64 %58
  %60 = icmp eq i32 %57, 0
  br i1 %60, label %61, label %63

61:                                               ; preds = %48
  %62 = bitcast %"struct.blink::CompactHTMLToken::Attribute"* %55 to i8*
  br label %100

63:                                               ; preds = %48
  %64 = bitcast i8* %51 to %"struct.blink::CompactHTMLToken::Attribute"*
  br label %65

65:                                               ; preds = %63, %93
  %66 = phi %"struct.blink::CompactHTMLToken::Attribute"* [ %95, %93 ], [ %55, %63 ]
  %67 = phi %"struct.blink::CompactHTMLToken::Attribute"* [ %94, %93 ], [ %64, %63 ]
  %68 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %66, i64 0, i32 0, i32 0, i32 0
  %69 = bitcast %"struct.blink::CompactHTMLToken::Attribute"* %66 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = bitcast %"struct.blink::CompactHTMLToken::Attribute"* %67 to i64*
  store i64 %70, i64* %71, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %68, align 8
  %72 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %67, i64 0, i32 1
  %73 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %66, i64 0, i32 1
  %74 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %73, i64 0, i32 0, i32 0
  %75 = bitcast %"class.WTF::String"* %73 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = bitcast %"class.WTF::String"* %72 to i64*
  store i64 %76, i64* %77, align 8
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %74, align 8
  %78 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %68, align 8
  %79 = icmp eq %"class.WTF::StringImpl"* %78, null
  br i1 %79, label %93, label %80

80:                                               ; preds = %65
  %81 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %82 = load atomic i32, i32* %81 monotonic, align 4
  %83 = and i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %78, i64 0, i32 0
  %86 = load i32, i32* %85, align 4
  br i1 %84, label %87, label %89

87:                                               ; preds = %80
  %88 = add i32 %86, -1
  store i32 %88, i32* %85, align 4
  br label %89

89:                                               ; preds = %87, %80
  %90 = phi i32 [ %88, %87 ], [ %86, %80 ]
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %78) #7
  br label %93

93:                                               ; preds = %92, %89, %65
  %94 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %67, i64 1
  %95 = getelementptr inbounds %"struct.blink::CompactHTMLToken::Attribute", %"struct.blink::CompactHTMLToken::Attribute"* %66, i64 1
  %96 = icmp eq %"struct.blink::CompactHTMLToken::Attribute"* %95, %59
  br i1 %96, label %97, label %65

97:                                               ; preds = %93
  %98 = bitcast %"class.WTF::Vector"* %0 to i8**
  %99 = load i8*, i8** %98, align 8
  br label %100

100:                                              ; preds = %61, %97
  %101 = phi i8* [ %99, %97 ], [ %62, %61 ]
  tail call void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8* %101) #7
  %102 = bitcast %"class.WTF::Vector"* %0 to i64*
  store atomic i64 %53, i64* %102 monotonic, align 8
  %103 = trunc i64 %52 to i32
  %104 = getelementptr inbounds %"class.WTF::Vector", %"class.WTF::Vector"* %0, i64 0, i32 0, i32 0, i32 1
  store i32 %103, i32* %104, align 8
  br label %105

105:                                              ; preds = %100, %46
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZN3WTF18PartitionAllocator13QuantizedSizeIN5blink16CompactHTMLToken9AttributeEEEmm(i64) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #7
  %6 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %6, align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7)
  %8 = icmp ugt i64 %0, 134086656
  br i1 %8, label %10, label %9

9:                                                ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* null, i8** %6, align 8
  br label %19

10:                                               ; preds = %1
  %11 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %0) #7
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 134086656) #7
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %11, i8* %12) #7
  %13 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7)
  store i8* %14, i8** %6, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %19, label %16

16:                                               ; preds = %10
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #7
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.3, i64 0, i64 0), i32 31, %"class.logging::CheckOpResult"* nonnull %3) #7
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #7
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #7
  br label %19

19:                                               ; preds = %9, %10, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #7
  %20 = shl i64 %0, 4
  %21 = call i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64 %20) #7
  ret i64 %21
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

declare i64 @_ZN3WTF10Partitions23BufferPotentialCapacityEm(i64) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

declare i8* @_ZN3WTF18PartitionAllocator15AllocateBackingEmPKc(i64, i8*) local_unnamed_addr #2

declare void @_ZN3WTF18PartitionAllocator11FreeBackingEPv(i8*) local_unnamed_addr #2

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { cold noreturn nounwind }
attributes #5 = { noinline nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 2000, i32 1}
