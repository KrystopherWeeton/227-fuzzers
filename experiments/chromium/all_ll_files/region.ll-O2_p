; ModuleID = '../../cc/base/region.cc'
source_filename = "../../cc/base/region.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.cc::Region" = type { %class.SkRegion }
%class.SkRegion = type { %struct.SkIRect, %"struct.SkRegion::RunHead"* }
%struct.SkIRect = type { i32, i32, i32, i32 }
%"struct.SkRegion::RunHead" = type opaque
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }
%"class.gfx::Size" = type { i32, i32 }
%"class.cc::Region::Iterator" = type { %"class.SkRegion::Iterator" }
%"class.SkRegion::Iterator" = type <{ %class.SkRegion*, i32*, %struct.SkIRect, i8, [7 x i8] }>
%"class.gfx::Vector2d" = type { i32, i32 }
%class.SkPath = type opaque
%"class.cc::SimpleEnclosedRegion" = type { %"class.gfx::Rect" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.base::Value" = type { %"class.absl::variant" }
%"class.absl::variant" = type { %"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveAssignBaseNontrivial" = type { %"class.absl::variant_internal::VariantCopyBaseNontrivial" }
%"class.absl::variant_internal::VariantCopyBaseNontrivial" = type { %"class.absl::variant_internal::VariantMoveBaseNontrivial" }
%"class.absl::variant_internal::VariantMoveBaseNontrivial" = type { %"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" }
%"class.absl::variant_internal::VariantStateBaseDestructorNontrivial" = type { %"class.absl::variant_internal::VariantStateBase" }
%"class.absl::variant_internal::VariantStateBase" = type { %"union.absl::variant_internal::DestructibleUnionImpl", i64 }
%"union.absl::variant_internal::DestructibleUnionImpl" = type { %"union.absl::variant_internal::DestructibleUnionImpl.4" }
%"union.absl::variant_internal::DestructibleUnionImpl.4" = type { %"union.absl::variant_internal::DestructibleUnionImpl.5" }
%"union.absl::variant_internal::DestructibleUnionImpl.5" = type { %"union.absl::variant_internal::DestructibleUnionImpl.6" }
%"union.absl::variant_internal::DestructibleUnionImpl.6" = type { %"union.absl::variant_internal::DestructibleUnionImpl.7" }
%"union.absl::variant_internal::DestructibleUnionImpl.7" = type { %"class.std::__1::basic_string" }
%"class.base::ListValue" = type { %"class.base::Value" }
%"class.base::trace_event::TracedValue" = type { %"class.base::trace_event::ConvertableToTraceFormat", %"class.std::__1::unique_ptr.36" }
%"class.base::trace_event::ConvertableToTraceFormat" = type { i32 (...)** }
%"class.std::__1::unique_ptr.36" = type { %"class.std::__1::__compressed_pair.37" }
%"class.std::__1::__compressed_pair.37" = type { %"struct.std::__1::__compressed_pair_elem.38" }
%"struct.std::__1::__compressed_pair_elem.38" = type { %"class.base::trace_event::TracedValue::Writer"* }
%"class.base::trace_event::TracedValue::Writer" = type { i32 (...)** }

@.str = private unnamed_addr constant [4 x i8] c" | \00", align 1

@_ZN2cc6RegionC1Ev = hidden unnamed_addr alias void (%"class.cc::Region"*), void (%"class.cc::Region"*)* @_ZN2cc6RegionC2Ev
@_ZN2cc6RegionC1ERK8SkRegion = hidden unnamed_addr alias void (%"class.cc::Region"*, %class.SkRegion*), void (%"class.cc::Region"*, %class.SkRegion*)* @_ZN2cc6RegionC2ERK8SkRegion
@_ZN2cc6RegionC1ERKS0_ = hidden unnamed_addr alias void (%"class.cc::Region"*, %"class.cc::Region"*), void (%"class.cc::Region"*, %"class.cc::Region"*)* @_ZN2cc6RegionC2ERKS0_
@_ZN2cc6RegionC1ERKN3gfx4RectE = hidden unnamed_addr alias void (%"class.cc::Region"*, %"class.gfx::Rect"*), void (%"class.cc::Region"*, %"class.gfx::Rect"*)* @_ZN2cc6RegionC2ERKN3gfx4RectE
@_ZN2cc6RegionD1Ev = hidden unnamed_addr alias void (%"class.cc::Region"*), void (%"class.cc::Region"*)* @_ZN2cc6RegionD2Ev
@_ZN2cc6Region8IteratorC1ERKS0_ = hidden unnamed_addr alias void (%"class.cc::Region::Iterator"*, %"class.cc::Region"*), void (%"class.cc::Region::Iterator"*, %"class.cc::Region"*)* @_ZN2cc6Region8IteratorC2ERKS0_

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc6RegionC2Ev(%"class.cc::Region"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  tail call void @_ZN8SkRegionC1Ev(%class.SkRegion* %2) #7
  ret void
}

declare void @_ZN8SkRegionC1Ev(%class.SkRegion*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc6RegionC2ERK8SkRegion(%"class.cc::Region"*, %class.SkRegion* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  tail call void @_ZN8SkRegionC1ERKS_(%class.SkRegion* %3, %class.SkRegion* dereferenceable(24) %1) #7
  ret void
}

declare void @_ZN8SkRegionC1ERKS_(%class.SkRegion*, %class.SkRegion* dereferenceable(24)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc6RegionC2ERKS0_(%"class.cc::Region"*, %"class.cc::Region"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %1, i64 0, i32 0
  tail call void @_ZN8SkRegionC1ERKS_(%class.SkRegion* %3, %class.SkRegion* dereferenceable(24) %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc6RegionC2ERKN3gfx4RectE(%"class.cc::Region"*, %"class.gfx::Rect"* dereferenceable(16)) unnamed_addr #0 align 2 {
  %3 = alloca { i64, i64 }, align 8
  %4 = bitcast { i64, i64 }* %3 to %struct.SkIRect*
  %5 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  %6 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #7
  %7 = tail call { i64, i64 } @_ZN3gfx13RectToSkIRectERKNS_4RectE(%"class.gfx::Rect"* dereferenceable(16) %1) #7
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  %9 = extractvalue { i64, i64 } %7, 0
  store i64 %9, i64* %8, align 8
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  %11 = extractvalue { i64, i64 } %7, 1
  store i64 %11, i64* %10, align 8
  call void @_ZN8SkRegionC1ERK7SkIRect(%class.SkRegion* %5, %struct.SkIRect* nonnull dereferenceable(16) %4) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #7
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare { i64, i64 } @_ZN3gfx13RectToSkIRectERKNS_4RectE(%"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #1

declare void @_ZN8SkRegionC1ERK7SkIRect(%class.SkRegion*, %struct.SkIRect* dereferenceable(16)) unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc6RegionD2Ev(%"class.cc::Region"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  tail call void @_ZN8SkRegionD1Ev(%class.SkRegion* %2) #7
  ret void
}

; Function Attrs: nounwind
declare void @_ZN8SkRegionD1Ev(%class.SkRegion*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.cc::Region"* @_ZN2cc6RegionaSERKN3gfx4RectE(%"class.cc::Region"* returned, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.SkRegion, align 8
  %4 = alloca { i64, i64 }, align 8
  %5 = bitcast { i64, i64 }* %4 to %struct.SkIRect*
  %6 = bitcast %class.SkRegion* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #7
  %7 = bitcast { i64, i64 }* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #7
  %8 = tail call { i64, i64 } @_ZN3gfx13RectToSkIRectERKNS_4RectE(%"class.gfx::Rect"* dereferenceable(16) %1) #7
  %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 0
  %10 = extractvalue { i64, i64 } %8, 0
  store i64 %10, i64* %9, align 8
  %11 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i64 0, i32 1
  %12 = extractvalue { i64, i64 } %8, 1
  store i64 %12, i64* %11, align 8
  call void @_ZN8SkRegionC1ERK7SkIRect(%class.SkRegion* nonnull %3, %struct.SkIRect* nonnull dereferenceable(16) %5) #7
  %13 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  %14 = call dereferenceable(24) %class.SkRegion* @_ZN8SkRegionaSERKS_(%class.SkRegion* %13, %class.SkRegion* nonnull dereferenceable(24) %3) #7
  call void @_ZN8SkRegionD1Ev(%class.SkRegion* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #7
  ret %"class.cc::Region"* %0
}

declare dereferenceable(24) %class.SkRegion* @_ZN8SkRegionaSERKS_(%class.SkRegion*, %class.SkRegion* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.cc::Region"* @_ZN2cc6RegionaSERKS0_(%"class.cc::Region"* returned, %"class.cc::Region"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %1, i64 0, i32 0
  %4 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  %5 = tail call dereferenceable(24) %class.SkRegion* @_ZN8SkRegionaSERKS_(%class.SkRegion* %4, %class.SkRegion* dereferenceable(24) %3) #7
  ret %"class.cc::Region"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(24) %"class.cc::Region"* @_ZN2cc6RegionpLERKN3gfx8Vector2dE(%"class.cc::Region"* returned, %"class.gfx::Vector2d"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.gfx::Vector2d", %"class.gfx::Vector2d"* %1, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  tail call void @_ZNK8SkRegion9translateEiiPS_(%class.SkRegion* %3, i32 %5, i32 %7, %class.SkRegion* %3) #7
  ret %"class.cc::Region"* %0
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc6Region4SwapEPS0_(%"class.cc::Region"*, %"class.cc::Region"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %1, i64 0, i32 0
  %4 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  tail call void @_ZN8SkRegion4swapERS_(%class.SkRegion* %3, %class.SkRegion* dereferenceable(24) %4) #7
  ret void
}

declare void @_ZN8SkRegion4swapERS_(%class.SkRegion*, %class.SkRegion* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc6Region5ClearEv(%"class.cc::Region"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  %3 = tail call zeroext i1 @_ZN8SkRegion8setEmptyEv(%class.SkRegion* %2) #7
  ret void
}

declare zeroext i1 @_ZN8SkRegion8setEmptyEv(%class.SkRegion*) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK2cc6Region7IsEmptyEv(%"class.cc::Region"* nocapture readonly) local_unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0, i32 1
  %3 = load %"struct.SkRegion::RunHead"*, %"struct.SkRegion::RunHead"** %2, align 8
  %4 = icmp eq %"struct.SkRegion::RunHead"* %3, inttoptr (i64 -1 to %"struct.SkRegion::RunHead"*)
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK2cc6Region19GetRegionComplexityEv(%"class.cc::Region"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  %3 = tail call i32 @_ZNK8SkRegion23computeRegionComplexityEv(%class.SkRegion* %2) #7
  ret i32 %3
}

declare i32 @_ZNK8SkRegion23computeRegionComplexityEv(%class.SkRegion*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2cc6Region15GetBoundaryPathEP6SkPath(%"class.cc::Region"*, %class.SkPath*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  %4 = tail call zeroext i1 @_ZNK8SkRegion15getBoundaryPathEP6SkPath(%class.SkRegion* %3, %class.SkPath* %1) #7
  ret void
}

declare zeroext i1 @_ZNK8SkRegion15getBoundaryPathEP6SkPath(%class.SkRegion*, %class.SkPath*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2cc6Region8ContainsERKN3gfx5PointE(%"class.cc::Region"*, %"class.gfx::Point"* nocapture readonly dereferenceable(8)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %1, i64 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %"class.gfx::Point", %"class.gfx::Point"* %1, i64 0, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = tail call zeroext i1 @_ZNK8SkRegion8containsEii(%class.SkRegion* %3, i32 %5, i32 %7) #7
  ret i1 %8
}

declare zeroext i1 @_ZNK8SkRegion8containsEii(%class.SkRegion*, i32, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2cc6Region8ContainsERKN3gfx4RectE(%"class.cc::Region"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca { i64, i64 }, align 8
  %4 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %21, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %1, i64 0, i32 1, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %7
  %12 = bitcast { i64, i64 }* %3 to %struct.SkIRect*
  %13 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  %14 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #7
  %15 = tail call { i64, i64 } @_ZN3gfx13RectToSkIRectERKNS_4RectE(%"class.gfx::Rect"* dereferenceable(16) %1) #7
  %16 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  %17 = extractvalue { i64, i64 } %15, 0
  store i64 %17, i64* %16, align 8
  %18 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  %19 = extractvalue { i64, i64 } %15, 1
  store i64 %19, i64* %18, align 8
  %20 = call zeroext i1 @_ZNK8SkRegion8containsERK7SkIRect(%class.SkRegion* %13, %struct.SkIRect* nonnull dereferenceable(16) %12) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #7
  br label %21

21:                                               ; preds = %2, %7, %11
  %22 = phi i1 [ %20, %11 ], [ true, %7 ], [ true, %2 ]
  ret i1 %22
}

declare zeroext i1 @_ZNK8SkRegion8containsERK7SkIRect(%class.SkRegion*, %struct.SkIRect* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2cc6Region8ContainsERKS0_(%"class.cc::Region"*, %"class.cc::Region"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %1, i64 0, i32 0, i32 1
  %4 = load %"struct.SkRegion::RunHead"*, %"struct.SkRegion::RunHead"** %3, align 8
  %5 = icmp eq %"struct.SkRegion::RunHead"* %4, inttoptr (i64 -1 to %"struct.SkRegion::RunHead"*)
  br i1 %5, label %10, label %6

6:                                                ; preds = %2
  %7 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  %8 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %1, i64 0, i32 0
  %9 = tail call zeroext i1 @_ZNK8SkRegion8containsERKS_(%class.SkRegion* %7, %class.SkRegion* dereferenceable(24) %8) #7
  br label %10

10:                                               ; preds = %2, %6
  %11 = phi i1 [ %9, %6 ], [ true, %2 ]
  ret i1 %11
}

declare zeroext i1 @_ZNK8SkRegion8containsERKS_(%class.SkRegion*, %class.SkRegion* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2cc6Region10IntersectsERKN3gfx4RectE(%"class.cc::Region"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca { i64, i64 }, align 8
  %4 = bitcast { i64, i64 }* %3 to %struct.SkIRect*
  %5 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  %6 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #7
  %7 = tail call { i64, i64 } @_ZN3gfx13RectToSkIRectERKNS_4RectE(%"class.gfx::Rect"* dereferenceable(16) %1) #7
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  %9 = extractvalue { i64, i64 } %7, 0
  store i64 %9, i64* %8, align 8
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  %11 = extractvalue { i64, i64 } %7, 1
  store i64 %11, i64* %10, align 8
  %12 = call zeroext i1 @_ZNK8SkRegion10intersectsERK7SkIRect(%class.SkRegion* %5, %struct.SkIRect* nonnull dereferenceable(16) %4) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #7
  ret i1 %12
}

declare zeroext i1 @_ZNK8SkRegion10intersectsERK7SkIRect(%class.SkRegion*, %struct.SkIRect* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK2cc6Region10IntersectsERKS0_(%"class.cc::Region"*, %"class.cc::Region"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %1, i64 0, i32 0
  %5 = tail call zeroext i1 @_ZNK8SkRegion10intersectsERKS_(%class.SkRegion* %3, %class.SkRegion* dereferenceable(24) %4) #7
  ret i1 %5
}

declare zeroext i1 @_ZNK8SkRegion10intersectsERKS_(%class.SkRegion*, %class.SkRegion* dereferenceable(24)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc6Region8SubtractERKN3gfx4RectE(%"class.cc::Region"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca { i64, i64 }, align 8
  %4 = bitcast { i64, i64 }* %3 to %struct.SkIRect*
  %5 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  %6 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #7
  %7 = tail call { i64, i64 } @_ZN3gfx13RectToSkIRectERKNS_4RectE(%"class.gfx::Rect"* dereferenceable(16) %1) #7
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  %9 = extractvalue { i64, i64 } %7, 0
  store i64 %9, i64* %8, align 8
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  %11 = extractvalue { i64, i64 } %7, 1
  store i64 %11, i64* %10, align 8
  %12 = call zeroext i1 @_ZN8SkRegion2opERKS_RK7SkIRectNS_2OpE(%class.SkRegion* %5, %class.SkRegion* dereferenceable(24) %5, %struct.SkIRect* nonnull dereferenceable(16) %4, i32 0) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc6Region8SubtractERKS0_(%"class.cc::Region"*, %"class.cc::Region"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %1, i64 0, i32 0
  %5 = tail call zeroext i1 @_ZN8SkRegion2opERKS_S1_NS_2OpE(%class.SkRegion* %3, %class.SkRegion* dereferenceable(24) %3, %class.SkRegion* dereferenceable(24) %4, i32 0) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc6Region8SubtractERKNS_20SimpleEnclosedRegionE(%"class.cc::Region"*, %"class.cc::SimpleEnclosedRegion"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca { i64, i64 }, align 8
  %4 = bitcast { i64, i64 }* %3 to %struct.SkIRect*
  %5 = alloca { i64, i64 }, align 8
  %6 = bitcast { i64, i64 }* %5 to %"class.gfx::Rect"*
  %7 = getelementptr inbounds %"class.cc::SimpleEnclosedRegion", %"class.cc::SimpleEnclosedRegion"* %1, i64 0, i32 0, i32 1, i32 0
  %8 = getelementptr inbounds %"class.cc::SimpleEnclosedRegion", %"class.cc::SimpleEnclosedRegion"* %1, i64 0, i32 0, i32 1, i32 1
  %9 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  %10 = bitcast { i64, i64 }* %3 to i8*
  %11 = bitcast { i64, i64 }* %5 to i8*
  %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 0
  %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %5, i64 0, i32 1
  %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  br label %16

16:                                               ; preds = %28, %2
  %17 = phi i64 [ 0, %2 ], [ %36, %28 ]
  %18 = load i32, i32* %7, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %24, label %20

20:                                               ; preds = %16
  %21 = load i32, i32* %8, align 4
  %22 = icmp ne i32 %21, 0
  %23 = zext i1 %22 to i64
  br label %24

24:                                               ; preds = %16, %20
  %25 = phi i64 [ 0, %16 ], [ %23, %20 ]
  %26 = icmp ult i64 %17, %25
  br i1 %26, label %28, label %27

27:                                               ; preds = %24
  ret void

28:                                               ; preds = %24
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #7
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #7
  %29 = call { i64, i64 } @_ZNK2cc20SimpleEnclosedRegion7GetRectEm(%"class.cc::SimpleEnclosedRegion"* %1, i64 %17) #7
  %30 = extractvalue { i64, i64 } %29, 0
  store i64 %30, i64* %12, align 8
  %31 = extractvalue { i64, i64 } %29, 1
  store i64 %31, i64* %13, align 8
  %32 = call { i64, i64 } @_ZN3gfx13RectToSkIRectERKNS_4RectE(%"class.gfx::Rect"* nonnull dereferenceable(16) %6) #7
  %33 = extractvalue { i64, i64 } %32, 0
  store i64 %33, i64* %14, align 8
  %34 = extractvalue { i64, i64 } %32, 1
  store i64 %34, i64* %15, align 8
  %35 = call zeroext i1 @_ZN8SkRegion2opERKS_RK7SkIRectNS_2OpE(%class.SkRegion* %9, %class.SkRegion* dereferenceable(24) %9, %struct.SkIRect* nonnull dereferenceable(16) %4, i32 0) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #7
  %36 = add nuw nsw i64 %17, 1
  br label %16
}

declare { i64, i64 } @_ZNK2cc20SimpleEnclosedRegion7GetRectEm(%"class.cc::SimpleEnclosedRegion"*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc6Region5UnionERKN3gfx4RectE(%"class.cc::Region"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca { i64, i64 }, align 8
  %4 = bitcast { i64, i64 }* %3 to %struct.SkIRect*
  %5 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  %6 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #7
  %7 = tail call { i64, i64 } @_ZN3gfx13RectToSkIRectERKNS_4RectE(%"class.gfx::Rect"* dereferenceable(16) %1) #7
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  %9 = extractvalue { i64, i64 } %7, 0
  store i64 %9, i64* %8, align 8
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  %11 = extractvalue { i64, i64 } %7, 1
  store i64 %11, i64* %10, align 8
  %12 = call zeroext i1 @_ZN8SkRegion2opERKS_RK7SkIRectNS_2OpE(%class.SkRegion* %5, %class.SkRegion* dereferenceable(24) %5, %struct.SkIRect* nonnull dereferenceable(16) %4, i32 2) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc6Region5UnionERKS0_(%"class.cc::Region"*, %"class.cc::Region"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %1, i64 0, i32 0
  %5 = tail call zeroext i1 @_ZN8SkRegion2opERKS_S1_NS_2OpE(%class.SkRegion* %3, %class.SkRegion* dereferenceable(24) %3, %class.SkRegion* dereferenceable(24) %4, i32 2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc6Region9IntersectERKN3gfx4RectE(%"class.cc::Region"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #0 align 2 {
  %3 = alloca { i64, i64 }, align 8
  %4 = bitcast { i64, i64 }* %3 to %struct.SkIRect*
  %5 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  %6 = bitcast { i64, i64 }* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #7
  %7 = tail call { i64, i64 } @_ZN3gfx13RectToSkIRectERKNS_4RectE(%"class.gfx::Rect"* dereferenceable(16) %1) #7
  %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 0
  %9 = extractvalue { i64, i64 } %7, 0
  store i64 %9, i64* %8, align 8
  %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %3, i64 0, i32 1
  %11 = extractvalue { i64, i64 } %7, 1
  store i64 %11, i64* %10, align 8
  %12 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0, i32 1
  %13 = load %"struct.SkRegion::RunHead"*, %"struct.SkRegion::RunHead"** %12, align 8
  %14 = icmp eq %"struct.SkRegion::RunHead"* %13, null
  br i1 %14, label %15, label %20

15:                                               ; preds = %2
  %16 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0, i32 0
  %17 = call zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect* %16, %struct.SkIRect* dereferenceable(16) %16, %struct.SkIRect* nonnull dereferenceable(16) %4) #7
  br i1 %17, label %22, label %18

18:                                               ; preds = %15
  %19 = call zeroext i1 @_ZN8SkRegion8setEmptyEv(%class.SkRegion* %5) #7
  br label %22

20:                                               ; preds = %2
  %21 = call zeroext i1 @_ZN8SkRegion2opERKS_RK7SkIRectNS_2OpE(%class.SkRegion* %5, %class.SkRegion* dereferenceable(24) %5, %struct.SkIRect* nonnull dereferenceable(16) %4, i32 1) #7
  br label %22

22:                                               ; preds = %15, %18, %20
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc6Region9IntersectERKS0_(%"class.cc::Region"*, %"class.cc::Region"* dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %1, i64 0, i32 0
  %5 = tail call zeroext i1 @_ZN8SkRegion2opERKS_S1_NS_2OpE(%class.SkRegion* %3, %class.SkRegion* dereferenceable(24) %3, %class.SkRegion* dereferenceable(24) %4, i32 1) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2cc6Region8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.cc::Region"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.gfx::Rect", align 4
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = alloca %"class.cc::Region::Iterator", align 8
  %6 = alloca { i64, i64 }, align 8
  %7 = bitcast { i64, i64 }* %6 to %"class.gfx::Rect"*
  %8 = alloca %"class.std::__1::basic_string", align 8
  %9 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %1, i64 0, i32 0, i32 1
  %10 = load %"struct.SkRegion::RunHead"*, %"struct.SkRegion::RunHead"** %9, align 8
  %11 = icmp eq %"struct.SkRegion::RunHead"* %10, inttoptr (i64 -1 to %"struct.SkRegion::RunHead"*)
  br i1 %11, label %12, label %15

12:                                               ; preds = %2
  %13 = bitcast %"class.gfx::Rect"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %13) #7
  %14 = bitcast %"class.gfx::Rect"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %14, i8 0, i64 16, i1 false)
  call void @_ZNK3gfx4Rect8ToStringEv(%"class.std::__1::basic_string"* sret %0, %"class.gfx::Rect"* nonnull %3) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %13) #7
  br label %67

15:                                               ; preds = %2
  %16 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %16) #7
  %17 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %16, i8 0, i64 24, i1 false) #7
  %18 = bitcast %"class.cc::Region::Iterator"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %18) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %18, i8 -86, i64 40, i1 false)
  %19 = getelementptr inbounds %"class.cc::Region::Iterator", %"class.cc::Region::Iterator"* %5, i64 0, i32 0
  %20 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %1, i64 0, i32 0
  call void @_ZN8SkRegion8IteratorC1ERKS_(%"class.SkRegion::Iterator"* nonnull %19, %class.SkRegion* dereferenceable(24) %20) #7
  %21 = getelementptr inbounds %"class.cc::Region::Iterator", %"class.cc::Region::Iterator"* %5, i64 0, i32 0, i32 3
  %22 = load i8, i8* %21, align 8, !range !2
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %37

24:                                               ; preds = %15
  %25 = bitcast { i64, i64 }* %6 to i8*
  %26 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 1
  %27 = getelementptr inbounds %"class.cc::Region::Iterator", %"class.cc::Region::Iterator"* %5, i64 0, i32 0, i32 2
  %28 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i64 0, i32 0
  %29 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %30 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %29, i64 0, i32 1, i32 0
  %31 = bitcast %"class.std::__1::basic_string"* %8 to i8*
  %32 = bitcast %"class.std::__1::basic_string"* %8 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %33 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %32, i64 0, i32 1, i32 0
  %34 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %36 = bitcast { i64, i64 }* %6 to i8*
  br label %39

37:                                               ; preds = %64, %15
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %18) #7
  %38 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* nonnull align 8 %16, i64 24, i1 false) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %16) #7
  br label %67

39:                                               ; preds = %24, %64
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %25) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %36, i8 -86, i64 16, i1 false)
  %40 = call { i64, i64 } @_ZN3gfx13SkIRectToRectERK7SkIRect(%struct.SkIRect* dereferenceable(16) %27) #7
  %41 = extractvalue { i64, i64 } %40, 0
  store i64 %41, i64* %28, align 8
  %42 = extractvalue { i64, i64 } %40, 1
  store i64 %42, i64* %26, align 8
  %43 = load i8, i8* %30, align 1
  %44 = icmp slt i8 %43, 0
  %45 = load i64, i64* %17, align 8
  %46 = zext i8 %43 to i64
  %47 = select i1 %44, i64 %45, i64 %46
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %51, label %49

49:                                               ; preds = %39
  %50 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"* nonnull %4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0)) #7
  br label %51

51:                                               ; preds = %49, %39
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #7
  call void @_ZNK3gfx4Rect8ToStringEv(%"class.std::__1::basic_string"* nonnull sret %8, %"class.gfx::Rect"* nonnull %7) #7
  %52 = load i8, i8* %33, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %34, align 8
  %55 = load i64, i64* %35, align 8
  %56 = zext i8 %52 to i64
  %57 = select i1 %53, i8* %54, i8* %31
  %58 = select i1 %53, i64 %55, i64 %56
  %59 = call dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"* nonnull %4, i8* %57, i64 %58) #7
  %60 = load i8, i8* %33, align 1
  %61 = icmp slt i8 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %51
  %63 = load i8*, i8** %34, align 8
  call void @_ZdlPv(i8* %63) #8
  br label %64

64:                                               ; preds = %51, %62
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #7
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25) #7
  call void @_ZN8SkRegion8Iterator4nextEv(%"class.SkRegion::Iterator"* nonnull %19) #7
  %65 = load i8, i8* %21, align 8, !range !2
  %66 = icmp eq i8 %65, 0
  br i1 %66, label %39, label %37

67:                                               ; preds = %37, %12
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZNK3gfx4Rect8ToStringEv(%"class.std::__1::basic_string"* sret, %"class.gfx::Rect"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2cc6Region5beginEv(%"class.cc::Region::Iterator"* noalias sret, %"class.cc::Region"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::Region::Iterator", %"class.cc::Region::Iterator"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %1, i64 0, i32 0
  tail call void @_ZN8SkRegion8IteratorC1ERKS_(%"class.SkRegion::Iterator"* %3, %class.SkRegion* dereferenceable(24) %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.base::Value"* @_ZNK2cc6Region7AsValueEv(%"class.cc::Region"*) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.cc::Region::Iterator", align 8
  %3 = tail call i8* @_Znwm(i64 32) #8
  %4 = bitcast i8* %3 to %"class.base::ListValue"*
  tail call void @_ZN4base9ListValueC1Ev(%"class.base::ListValue"* nonnull %4) #7
  %5 = bitcast %"class.cc::Region::Iterator"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %5) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 40, i1 false)
  %6 = getelementptr inbounds %"class.cc::Region::Iterator", %"class.cc::Region::Iterator"* %2, i64 0, i32 0
  %7 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  call void @_ZN8SkRegion8IteratorC1ERKS_(%"class.SkRegion::Iterator"* nonnull %6, %class.SkRegion* dereferenceable(24) %7) #7
  %8 = getelementptr inbounds %"class.cc::Region::Iterator", %"class.cc::Region::Iterator"* %2, i64 0, i32 0, i32 3
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %1
  %12 = getelementptr inbounds %"class.cc::Region::Iterator", %"class.cc::Region::Iterator"* %2, i64 0, i32 0, i32 2
  br label %15

13:                                               ; preds = %15, %1
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %5) #7
  %14 = bitcast i8* %3 to %"class.base::Value"*
  ret %"class.base::Value"* %14

15:                                               ; preds = %11, %15
  %16 = call { i64, i64 } @_ZN3gfx13SkIRectToRectERK7SkIRect(%struct.SkIRect* dereferenceable(16) %12) #7
  %17 = extractvalue { i64, i64 } %16, 0
  %18 = trunc i64 %17 to i32
  %19 = lshr i64 %17, 32
  %20 = trunc i64 %19 to i32
  %21 = extractvalue { i64, i64 } %16, 1
  call void @_ZN4base9ListValue13AppendIntegerEi(%"class.base::ListValue"* nonnull %4, i32 %18) #7
  call void @_ZN4base9ListValue13AppendIntegerEi(%"class.base::ListValue"* nonnull %4, i32 %20) #7
  %22 = trunc i64 %21 to i32
  call void @_ZN4base9ListValue13AppendIntegerEi(%"class.base::ListValue"* nonnull %4, i32 %22) #7
  %23 = lshr i64 %21, 32
  %24 = trunc i64 %23 to i32
  call void @_ZN4base9ListValue13AppendIntegerEi(%"class.base::ListValue"* nonnull %4, i32 %24) #7
  call void @_ZN8SkRegion8Iterator4nextEv(%"class.SkRegion::Iterator"* nonnull %6) #7
  %25 = load i8, i8* %8, align 8, !range !2
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %15, label %13
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

declare void @_ZN4base9ListValueC1Ev(%"class.base::ListValue"*) unnamed_addr #1

declare void @_ZN4base9ListValue13AppendIntegerEi(%"class.base::ListValue"*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK2cc6Region11AsValueIntoEPN4base11trace_event11TracedValueE(%"class.cc::Region"*, %"class.base::trace_event::TracedValue"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.cc::Region::Iterator", align 8
  %4 = bitcast %"class.cc::Region::Iterator"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %4) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 40, i1 false)
  %5 = getelementptr inbounds %"class.cc::Region::Iterator", %"class.cc::Region::Iterator"* %3, i64 0, i32 0
  %6 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %0, i64 0, i32 0
  call void @_ZN8SkRegion8IteratorC1ERKS_(%"class.SkRegion::Iterator"* nonnull %5, %class.SkRegion* dereferenceable(24) %6) #7
  %7 = getelementptr inbounds %"class.cc::Region::Iterator", %"class.cc::Region::Iterator"* %3, i64 0, i32 0, i32 3
  %8 = load i8, i8* %7, align 8, !range !2
  %9 = icmp eq i8 %8, 0
  br i1 %9, label %10, label %12

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"class.cc::Region::Iterator", %"class.cc::Region::Iterator"* %3, i64 0, i32 0, i32 2
  br label %13

12:                                               ; preds = %13, %2
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %4) #7
  ret void

13:                                               ; preds = %10, %13
  %14 = call { i64, i64 } @_ZN3gfx13SkIRectToRectERK7SkIRect(%struct.SkIRect* dereferenceable(16) %11) #7
  %15 = extractvalue { i64, i64 } %14, 0
  %16 = trunc i64 %15 to i32
  %17 = lshr i64 %15, 32
  %18 = trunc i64 %17 to i32
  %19 = extractvalue { i64, i64 } %14, 1
  call void @_ZN4base11trace_event11TracedValue13AppendIntegerEi(%"class.base::trace_event::TracedValue"* %1, i32 %16) #7
  call void @_ZN4base11trace_event11TracedValue13AppendIntegerEi(%"class.base::trace_event::TracedValue"* %1, i32 %18) #7
  %20 = trunc i64 %19 to i32
  call void @_ZN4base11trace_event11TracedValue13AppendIntegerEi(%"class.base::trace_event::TracedValue"* %1, i32 %20) #7
  %21 = lshr i64 %19, 32
  %22 = trunc i64 %21 to i32
  call void @_ZN4base11trace_event11TracedValue13AppendIntegerEi(%"class.base::trace_event::TracedValue"* %1, i32 %22) #7
  call void @_ZN8SkRegion8Iterator4nextEv(%"class.SkRegion::Iterator"* nonnull %5) #7
  %23 = load i8, i8* %7, align 8, !range !2
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %13, label %12
}

declare void @_ZN4base11trace_event11TracedValue13AppendIntegerEi(%"class.base::trace_event::TracedValue"*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2cc6Region8IteratorC2ERKS0_(%"class.cc::Region::Iterator"*, %"class.cc::Region"* dereferenceable(24)) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.cc::Region::Iterator", %"class.cc::Region::Iterator"* %0, i64 0, i32 0
  %4 = getelementptr inbounds %"class.cc::Region", %"class.cc::Region"* %1, i64 0, i32 0
  tail call void @_ZN8SkRegion8IteratorC1ERKS_(%"class.SkRegion::Iterator"* %3, %class.SkRegion* dereferenceable(24) %4) #7
  ret void
}

declare void @_ZN8SkRegion8IteratorC1ERKS_(%"class.SkRegion::Iterator"*, %class.SkRegion* dereferenceable(24)) unnamed_addr #1

declare void @_ZNK8SkRegion9translateEiiPS_(%class.SkRegion*, i32, i32, %class.SkRegion*) local_unnamed_addr #1

declare zeroext i1 @_ZN8SkRegion2opERKS_RK7SkIRectNS_2OpE(%class.SkRegion*, %class.SkRegion* dereferenceable(24), %struct.SkIRect* dereferenceable(16), i32) local_unnamed_addr #1

declare zeroext i1 @_ZN7SkIRect9intersectERKS_S1_(%struct.SkIRect*, %struct.SkIRect* dereferenceable(16), %struct.SkIRect* dereferenceable(16)) local_unnamed_addr #1

declare zeroext i1 @_ZN8SkRegion2opERKS_S1_NS_2OpE(%class.SkRegion*, %class.SkRegion* dereferenceable(24), %class.SkRegion* dereferenceable(24), i32) local_unnamed_addr #1

declare { i64, i64 } @_ZN3gfx13SkIRectToRectERK7SkIRect(%struct.SkIRect* dereferenceable(16)) local_unnamed_addr #1

declare void @_ZN8SkRegion8Iterator4nextEv(%"class.SkRegion::Iterator"*) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc(%"class.std::__1::basic_string"*, i8*) local_unnamed_addr #1

declare dereferenceable(24) %"class.std::__1::basic_string"* @_ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(%"class.std::__1::basic_string"*, i8*, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
