; ModuleID = '../../v8/src/debug/debug-coverage.cc'
source_filename = "../../v8/src/debug/debug-coverage.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::SoleReadOnlyHeap" = type { %"class.v8::internal::ReadOnlyHeap", [587 x i64] }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.570" }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.168", i64, i64, i8, i64, i64 }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic.46", i64 }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic.46", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic.46", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic.46", i64, i64, %"struct.std::__1::atomic.46", %"struct.std::__1::atomic.56", %"class.std::__1::vector.60", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.175", %"class.std::__1::unique_ptr.175", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.190", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic.46", i64, i8, %"struct.std::__1::atomic.46", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.194", %"class.std::__1::vector.194", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.201", %"class.std::__1::unique_ptr.207", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.337", %"class.std::__1::unique_ptr.343", %"class.std::__1::unique_ptr.349", %"class.std::__1::unique_ptr.388", %"class.std::__1::unique_ptr.427", %"class.std::__1::unique_ptr.457", %"class.std::__1::unique_ptr.463", %"class.std::__1::unique_ptr.473", %"class.std::__1::unique_ptr.479", %"class.std::__1::unique_ptr.479", %"class.std::__1::unique_ptr.485", %"class.std::__1::unique_ptr.491", %"class.std::__1::unique_ptr.491", %"class.std::__1::unique_ptr.497", %"class.std::__1::unique_ptr.503", %"class.std::__1::shared_ptr.509", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.532", %"class.std::__1::unique_ptr.558", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.564", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.577", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.359", i8, [7 x i8], %"class.std::__1::unordered_map.583", %"class.std::__1::unordered_map.609", %"class.std::__1::unordered_map.583", %"class.std::__1::unordered_map.633", %"class.std::__1::vector.661", i8, %"class.std::__1::unique_ptr.668", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.27", %"class.std::__1::__compressed_pair.36", %"class.std::__1::__compressed_pair.41", %"class.std::__1::__compressed_pair.43", [4 x i8] }>
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29", %"struct.std::__1::__compressed_pair_elem.30" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.30" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { i64 }
%"class.std::__1::__compressed_pair.36" = type { %"struct.std::__1::__compressed_pair_elem.37" }
%"struct.std::__1::__compressed_pair_elem.37" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.41" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.43" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::__compressed_pair_elem.44" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.51", %"struct.std::__1::atomic.51", %"struct.std::__1::atomic.51" }
%"struct.std::__1::atomic.51" = type { %"struct.std::__1::__atomic_base.52" }
%"struct.std::__1::__atomic_base.52" = type { %"struct.std::__1::__atomic_base.53" }
%"struct.std::__1::__atomic_base.53" = type { %"struct.std::__1::__cxx_atomic_impl.54" }
%"struct.std::__1::__cxx_atomic_impl.54" = type { %"struct.std::__1::__cxx_atomic_base_impl.55" }
%"struct.std::__1::__cxx_atomic_base_impl.55" = type { i64 }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr.21", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.674", %"class.std::__1::unique_ptr.695", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.705", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.894", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.907", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.917", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.928", %"struct.std::__1::atomic.181", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.1003", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.1051"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.1058", i32, i8, i8, i32, i32, %"class.std::__1::vector.1064", %"class.std::__1::vector.1064", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.1071", i64, %"class.std::__1::unordered_map.1072", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.570", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.189", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1128", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1166", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1200", %"class.std::__1::vector.1204", %"class.std::__1::vector.1204", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle.19", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle.19" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr.21" = type { %"class.std::__1::__compressed_pair.22" }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.674" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.168", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.675", %"class.std::__1::unique_ptr.689" }
%"class.std::__1::unique_ptr.675" = type { %"class.std::__1::__compressed_pair.676" }
%"class.std::__1::__compressed_pair.676" = type { %"struct.std::__1::__compressed_pair_elem.677" }
%"struct.std::__1::__compressed_pair_elem.677" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.678" }
%"class.std::__1::vector.678" = type { %"class.std::__1::__vector_base.679" }
%"class.std::__1::__vector_base.679" = type { %"class.std::__1::unique_ptr.680"*, %"class.std::__1::unique_ptr.680"*, %"class.std::__1::__compressed_pair.681" }
%"class.std::__1::unique_ptr.680" = type { %"class.std::__1::__compressed_pair.1253" }
%"class.std::__1::__compressed_pair.1253" = type { %"struct.std::__1::__compressed_pair_elem.1254" }
%"struct.std::__1::__compressed_pair_elem.1254" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.681" = type { %"struct.std::__1::__compressed_pair_elem.682" }
%"struct.std::__1::__compressed_pair_elem.682" = type { %"class.std::__1::unique_ptr.680"* }
%"class.std::__1::unique_ptr.689" = type { %"class.std::__1::__compressed_pair.690" }
%"class.std::__1::__compressed_pair.690" = type { %"struct.std::__1::__compressed_pair_elem.691" }
%"struct.std::__1::__compressed_pair_elem.691" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::unique_ptr.695" = type { %"class.std::__1::__compressed_pair.696" }
%"class.std::__1::__compressed_pair.696" = type { %"struct.std::__1::__compressed_pair_elem.697" }
%"struct.std::__1::__compressed_pair_elem.697" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.698", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.698" = type { %"struct.std::__1::__atomic_base.699" }
%"struct.std::__1::__atomic_base.699" = type { %"struct.std::__1::__cxx_atomic_impl.700" }
%"struct.std::__1::__cxx_atomic_impl.700" = type { %"struct.std::__1::__cxx_atomic_base_impl.701" }
%"struct.std::__1::__cxx_atomic_base_impl.701" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.705" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.706", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.706" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.707", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.707" = type { %"class.std::__1::__vector_base.708" }
%"class.std::__1::__vector_base.708" = type { %"class.std::__1::unique_ptr.709"*, %"class.std::__1::unique_ptr.709"*, %"class.std::__1::__compressed_pair.710" }
%"class.std::__1::unique_ptr.709" = type opaque
%"class.std::__1::__compressed_pair.710" = type { %"struct.std::__1::__compressed_pair_elem.711" }
%"struct.std::__1::__compressed_pair_elem.711" = type { %"class.std::__1::unique_ptr.709"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.715", %"class.std::__1::unique_ptr.721", %"struct.std::__1::atomic.181", %"class.std::__1::unique_ptr.727", %"class.std::__1::unique_ptr.733", %"class.std::__1::unique_ptr.739", %"class.std::__1::unique_ptr.745", %"class.std::__1::unique_ptr.751", %"class.std::__1::set.757", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.715" = type { %"class.std::__1::__compressed_pair.716" }
%"class.std::__1::__compressed_pair.716" = type { %"struct.std::__1::__compressed_pair_elem.717" }
%"struct.std::__1::__compressed_pair_elem.717" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.721" = type { %"class.std::__1::__compressed_pair.722" }
%"class.std::__1::__compressed_pair.722" = type { %"struct.std::__1::__compressed_pair_elem.723" }
%"struct.std::__1::__compressed_pair_elem.723" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.727" = type { %"class.std::__1::__compressed_pair.728" }
%"class.std::__1::__compressed_pair.728" = type { %"struct.std::__1::__compressed_pair_elem.729" }
%"struct.std::__1::__compressed_pair_elem.729" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.733" = type { %"class.std::__1::__compressed_pair.734" }
%"class.std::__1::__compressed_pair.734" = type { %"struct.std::__1::__compressed_pair_elem.735" }
%"struct.std::__1::__compressed_pair_elem.735" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.739" = type { %"class.std::__1::__compressed_pair.740" }
%"class.std::__1::__compressed_pair.740" = type { %"struct.std::__1::__compressed_pair_elem.741" }
%"struct.std::__1::__compressed_pair_elem.741" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.745" = type { %"class.std::__1::__compressed_pair.746" }
%"class.std::__1::__compressed_pair.746" = type { %"struct.std::__1::__compressed_pair_elem.747" }
%"struct.std::__1::__compressed_pair_elem.747" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.751" = type { %"class.std::__1::__compressed_pair.752" }
%"class.std::__1::__compressed_pair.752" = type { %"struct.std::__1::__compressed_pair_elem.753" }
%"struct.std::__1::__compressed_pair_elem.753" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.757" = type { %"class.std::__1::__tree.758" }
%"class.std::__1::__tree.758" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.759", %"class.std::__1::__compressed_pair.763" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.759" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.763" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.766" }
%"class.v8::internal::TaggedImpl.766" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.765" }
%"class.v8::internal::TaggedImpl.765" = type { i32 }
%"class.v8::internal::Deoptimizer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::JSFunction", %"class.v8::internal::Code", i32, i8, i64, i32, i8, i32, i32, %"class.v8::internal::FrameDescription"*, i32, %"class.v8::internal::FrameDescription"**, i64, i64, i64, i64, i32, i64, %"class.v8::internal::TranslatedState", %"class.std::__1::vector.804", %"class.std::__1::unique_ptr.811" }
%"class.v8::internal::JSFunction" = type { %"class.v8::internal::JSFunctionOrBoundFunction" }
%"class.v8::internal::JSFunctionOrBoundFunction" = type { %"class.v8::internal::TorqueGeneratedJSFunctionOrBoundFunction" }
%"class.v8::internal::TorqueGeneratedJSFunctionOrBoundFunction" = type { %"class.v8::internal::JSObject" }
%"class.v8::internal::JSObject" = type { %"class.v8::internal::TorqueGeneratedJSObject" }
%"class.v8::internal::TorqueGeneratedJSObject" = type { %"class.v8::internal::JSReceiver" }
%"class.v8::internal::JSReceiver" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Code" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::FrameDescription" = type { i64, i32, %"class.v8::internal::RegisterValues", i64, i64, i64, i64, i64, i64, [1 x i64] }
%"class.v8::internal::RegisterValues" = type { [16 x i64], [16 x %"class.v8::internal::Float64"] }
%"class.v8::internal::Float64" = type { i64 }
%"class.v8::internal::TranslatedState" = type <{ i32, [4 x i8], %"class.std::__1::vector.767", %"class.v8::internal::Isolate"*, i64, i32, i32, %"class.std::__1::deque.791", %"class.v8::internal::Handle.803", %"class.v8::internal::FeedbackVector", %"class.v8::internal::FeedbackSlot", [4 x i8] }>
%"class.std::__1::vector.767" = type { %"class.std::__1::__vector_base.768" }
%"class.std::__1::__vector_base.768" = type { %"class.v8::internal::TranslatedFrame"*, %"class.v8::internal::TranslatedFrame"*, %"class.std::__1::__compressed_pair.786" }
%"class.v8::internal::TranslatedFrame" = type <{ i32, %"class.v8::internal::BytecodeOffset", %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::Handle.769", i32, i32, i32, [4 x i8], %"class.std::__1::deque", %"class.v8::base::Optional.781", [6 x i8] }>
%"class.v8::internal::BytecodeOffset" = type { i32 }
%"class.v8::internal::SharedFunctionInfo" = type { %"class.v8::internal::TorqueGeneratedSharedFunctionInfo" }
%"class.v8::internal::TorqueGeneratedSharedFunctionInfo" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Handle.769" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.777" }
%"struct.std::__1::__split_buffer" = type { %"class.v8::internal::TranslatedValue"**, %"class.v8::internal::TranslatedValue"**, %"class.v8::internal::TranslatedValue"**, %"class.std::__1::__compressed_pair.772" }
%"class.v8::internal::TranslatedValue" = type { i8, i8, %"class.v8::internal::TranslatedState"*, %"class.v8::internal::Handle.770", %union.anon.771 }
%"class.v8::internal::Handle.770" = type { %"class.v8::internal::HandleBase" }
%union.anon.771 = type { %"class.v8::internal::Object" }
%"class.std::__1::__compressed_pair.772" = type { %"struct.std::__1::__compressed_pair_elem.773" }
%"struct.std::__1::__compressed_pair_elem.773" = type { %"class.v8::internal::TranslatedValue"** }
%"class.std::__1::__compressed_pair.777" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.v8::base::Optional.781" = type { %"class.v8::base::internal::OptionalBase.782" }
%"class.v8::base::internal::OptionalBase.782" = type { %"struct.v8::base::internal::OptionalStorage.783" }
%"struct.v8::base::internal::OptionalStorage.783" = type { %"struct.v8::base::internal::OptionalStorageBase.784" }
%"struct.v8::base::internal::OptionalStorageBase.784" = type { i8, %union.anon.785 }
%union.anon.785 = type { i8 }
%"class.std::__1::__compressed_pair.786" = type { %"struct.std::__1::__compressed_pair_elem.787" }
%"struct.std::__1::__compressed_pair_elem.787" = type { %"class.v8::internal::TranslatedFrame"* }
%"class.std::__1::deque.791" = type { %"class.std::__1::__deque_base.792" }
%"class.std::__1::__deque_base.792" = type { %"struct.std::__1::__split_buffer.793", i64, %"class.std::__1::__compressed_pair.799" }
%"struct.std::__1::__split_buffer.793" = type { %"struct.v8::internal::TranslatedState::ObjectPosition"**, %"struct.v8::internal::TranslatedState::ObjectPosition"**, %"struct.v8::internal::TranslatedState::ObjectPosition"**, %"class.std::__1::__compressed_pair.794" }
%"struct.v8::internal::TranslatedState::ObjectPosition" = type { i32, i32 }
%"class.std::__1::__compressed_pair.794" = type { %"struct.std::__1::__compressed_pair_elem.795" }
%"struct.std::__1::__compressed_pair_elem.795" = type { %"struct.v8::internal::TranslatedState::ObjectPosition"** }
%"class.std::__1::__compressed_pair.799" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.v8::internal::Handle.803" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::FeedbackVector" = type { %"class.v8::internal::TorqueGeneratedFeedbackVector" }
%"class.v8::internal::TorqueGeneratedFeedbackVector" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::FeedbackSlot" = type { i32 }
%"class.std::__1::vector.804" = type { %"class.std::__1::__vector_base.805" }
%"class.std::__1::__vector_base.805" = type { %"struct.v8::internal::Deoptimizer::ValueToMaterialize"*, %"struct.v8::internal::Deoptimizer::ValueToMaterialize"*, %"class.std::__1::__compressed_pair.806" }
%"struct.v8::internal::Deoptimizer::ValueToMaterialize" = type { i64, %"class.v8::internal::TranslatedFrame::iterator" }
%"class.v8::internal::TranslatedFrame::iterator" = type <{ %"class.std::__1::__deque_iterator", i32, [4 x i8] }>
%"class.std::__1::__deque_iterator" = type { %"class.v8::internal::TranslatedValue"**, %"class.v8::internal::TranslatedValue"* }
%"class.std::__1::__compressed_pair.806" = type { %"struct.std::__1::__compressed_pair_elem.807" }
%"struct.std::__1::__compressed_pair_elem.807" = type { %"struct.v8::internal::Deoptimizer::ValueToMaterialize"* }
%"class.std::__1::unique_ptr.811" = type { %"class.std::__1::__compressed_pair.812" }
%"class.std::__1::__compressed_pair.812" = type { %"struct.std::__1::__compressed_pair_elem.813" }
%"struct.std::__1::__compressed_pair_elem.813" = type { %"class.v8::internal::CodeTracer::Scope"* }
%"class.v8::internal::CodeTracer::Scope" = type { %"class.v8::internal::CodeTracer"* }
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.823", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.823" = type { %"class.std::__1::__compressed_pair.824" }
%"class.std::__1::__compressed_pair.824" = type { %"struct.std::__1::__compressed_pair_elem.825" }
%"struct.std::__1::__compressed_pair_elem.825" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.829", %"class.v8::internal::DetachableVector.830", %"class.v8::internal::DetachableVector.829", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.830" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.829" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic.46", %"struct.std::__1::atomic.46", %"class.std::__1::unique_ptr.817", %"class.std::__1::unique_ptr.510" }
%"class.std::__1::unique_ptr.817" = type { %"class.std::__1::__compressed_pair.818" }
%"class.std::__1::__compressed_pair.818" = type { %"struct.std::__1::__compressed_pair_elem.819" }
%"struct.std::__1::__compressed_pair_elem.819" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.510" = type { %"class.std::__1::__compressed_pair.511" }
%"class.std::__1::__compressed_pair.511" = type { %"struct.std::__1::__compressed_pair_elem.512" }
%"struct.std::__1::__compressed_pair_elem.512" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set.513", %"class.std::__1::set.521" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set.513" = type { %"class.std::__1::__tree.514" }
%"class.std::__1::__tree.514" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.515", %"class.std::__1::__compressed_pair.519" }
%"class.std::__1::__compressed_pair.515" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"class.std::__1::__compressed_pair.519" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::set.521" = type { %"class.std::__1::__tree.522" }
%"class.std::__1::__tree.522" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.515", %"class.std::__1::__compressed_pair.523" }
%"class.std::__1::__compressed_pair.523" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.v8::internal::InnerPointerToCodeCache" = type { %"class.v8::internal::Isolate"*, [1024 x %"struct.v8::internal::InnerPointerToCodeCache::InnerPointerToCodeCacheEntry"] }
%"struct.v8::internal::InnerPointerToCodeCache::InnerPointerToCodeCacheEntry" = type { i64, %"class.v8::internal::Code", %"class.v8::internal::SafepointEntry" }
%"class.v8::internal::SafepointEntry" = type <{ i32, [4 x i8], i8*, i8*, i32, [4 x i8] }>
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.831", %"class.std::__1::vector.837", %"class.std::__1::unique_ptr.844", %"class.std::__1::vector.851", %"class.std::__1::unique_ptr.858", i64, %"class.std::__1::vector.864", %"class.std::__1::vector.872", %"class.std::__1::vector.880", i8, i8, i32 }
%"class.std::__1::unique_ptr.831" = type { %"class.std::__1::__compressed_pair.832" }
%"class.std::__1::__compressed_pair.832" = type { %"struct.std::__1::__compressed_pair_elem.833" }
%"struct.std::__1::__compressed_pair_elem.833" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.837" = type { %"class.std::__1::__vector_base.838" }
%"class.std::__1::__vector_base.838" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.839" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.839" = type { %"struct.std::__1::__compressed_pair_elem.840" }
%"struct.std::__1::__compressed_pair_elem.840" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.844" = type { %"class.std::__1::__compressed_pair.845" }
%"class.std::__1::__compressed_pair.845" = type { %"struct.std::__1::__compressed_pair_elem.846" }
%"struct.std::__1::__compressed_pair_elem.846" = type { %"class.v8::internal::GlobalHandles::NodeSpace.847"* }
%"class.v8::internal::GlobalHandles::NodeSpace.847" = type opaque
%"class.std::__1::vector.851" = type { %"class.std::__1::__vector_base.852" }
%"class.std::__1::__vector_base.852" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.853" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.853" = type { %"struct.std::__1::__compressed_pair_elem.854" }
%"struct.std::__1::__compressed_pair_elem.854" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.858" = type { %"class.std::__1::__compressed_pair.859" }
%"class.std::__1::__compressed_pair.859" = type { %"struct.std::__1::__compressed_pair_elem.860" }
%"struct.std::__1::__compressed_pair_elem.860" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.864" = type { %"class.std::__1::__vector_base.865" }
%"class.std::__1::__vector_base.865" = type { %"struct.std::__1::pair.866"*, %"struct.std::__1::pair.866"*, %"class.std::__1::__compressed_pair.867" }
%"struct.std::__1::pair.866" = type opaque
%"class.std::__1::__compressed_pair.867" = type { %"struct.std::__1::__compressed_pair_elem.868" }
%"struct.std::__1::__compressed_pair_elem.868" = type { %"struct.std::__1::pair.866"* }
%"class.std::__1::vector.872" = type { %"class.std::__1::__vector_base.873" }
%"class.std::__1::__vector_base.873" = type { %"struct.std::__1::pair.874"*, %"struct.std::__1::pair.874"*, %"class.std::__1::__compressed_pair.875" }
%"struct.std::__1::pair.874" = type opaque
%"class.std::__1::__compressed_pair.875" = type { %"struct.std::__1::__compressed_pair_elem.876" }
%"struct.std::__1::__compressed_pair_elem.876" = type { %"struct.std::__1::pair.874"* }
%"class.std::__1::vector.880" = type { %"class.std::__1::__vector_base.881" }
%"class.std::__1::__vector_base.881" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.882" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.882" = type { %"struct.std::__1::__compressed_pair_elem.883" }
%"struct.std::__1::__compressed_pair_elem.883" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.887", %"class.std::__1::vector.894" }
%"class.std::__1::vector.887" = type { %"class.std::__1::__vector_base.888" }
%"class.std::__1::__vector_base.888" = type { i64**, i64**, %"class.std::__1::__compressed_pair.889" }
%"class.std::__1::__compressed_pair.889" = type { %"struct.std::__1::__compressed_pair_elem.890" }
%"struct.std::__1::__compressed_pair_elem.890" = type { i64** }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.901" }
%"class.std::__1::unique_ptr.901" = type { %"class.std::__1::__compressed_pair.902" }
%"class.std::__1::__compressed_pair.902" = type { %"struct.std::__1::__compressed_pair_elem.903" }
%"struct.std::__1::__compressed_pair_elem.903" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.894" = type { %"class.std::__1::__vector_base.895" }
%"class.std::__1::__vector_base.895" = type { i32*, i32*, %"class.std::__1::__compressed_pair.896" }
%"class.std::__1::__compressed_pair.896" = type { %"struct.std::__1::__compressed_pair_elem.897" }
%"struct.std::__1::__compressed_pair_elem.897" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"struct.std::__1::atomic.907" = type { %"struct.std::__1::__atomic_base.908" }
%"struct.std::__1::__atomic_base.908" = type { %"struct.std::__1::__cxx_atomic_impl.909" }
%"struct.std::__1::__cxx_atomic_impl.909" = type { %"struct.std::__1::__cxx_atomic_base_impl.910" }
%"struct.std::__1::__cxx_atomic_base_impl.910" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.917" = type { %"struct.std::__1::__atomic_base.918" }
%"struct.std::__1::__atomic_base.918" = type { %"struct.std::__1::__cxx_atomic_impl.919" }
%"struct.std::__1::__cxx_atomic_impl.919" = type { %"struct.std::__1::__cxx_atomic_base_impl.920" }
%"struct.std::__1::__cxx_atomic_base_impl.920" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.922" }
%"class.std::__1::__compressed_pair.922" = type { %"struct.std::__1::__compressed_pair_elem.923" }
%"struct.std::__1::__compressed_pair_elem.923" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.924 }
%union.anon.924 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.928" = type { %"class.std::__1::__hash_table.929" }
%"class.std::__1::__hash_table.929" = type <{ %"class.std::__1::unique_ptr.930", %"class.std::__1::__compressed_pair.940", %"class.std::__1::__compressed_pair.945", %"class.std::__1::__compressed_pair.948", [4 x i8] }>
%"class.std::__1::unique_ptr.930" = type { %"class.std::__1::__compressed_pair.931" }
%"class.std::__1::__compressed_pair.931" = type { %"struct.std::__1::__compressed_pair_elem.932", %"struct.std::__1::__compressed_pair_elem.934" }
%"struct.std::__1::__compressed_pair_elem.932" = type { %"struct.std::__1::__hash_node_base.933"** }
%"struct.std::__1::__hash_node_base.933" = type { %"struct.std::__1::__hash_node_base.933"* }
%"struct.std::__1::__compressed_pair_elem.934" = type { %"class.std::__1::__bucket_list_deallocator.935" }
%"class.std::__1::__bucket_list_deallocator.935" = type { %"class.std::__1::__compressed_pair.936" }
%"class.std::__1::__compressed_pair.936" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.940" = type { %"struct.std::__1::__compressed_pair_elem.941" }
%"struct.std::__1::__compressed_pair_elem.941" = type { %"struct.std::__1::__hash_node_base.933" }
%"class.std::__1::__compressed_pair.945" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.948" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::atomic.181" = type { %"struct.std::__1::__atomic_base.182" }
%"struct.std::__1::__atomic_base.182" = type { %"struct.std::__1::__cxx_atomic_impl.183" }
%"struct.std::__1::__cxx_atomic_impl.183" = type { %"struct.std::__1::__cxx_atomic_base_impl.184" }
%"struct.std::__1::__cxx_atomic_base_impl.184" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.954", %"class.v8::internal::Handle.960", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.961", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.954" = type { %"class.std::__1::__compressed_pair.955" }
%"class.std::__1::__compressed_pair.955" = type { %"struct.std::__1::__compressed_pair_elem.956" }
%"struct.std::__1::__compressed_pair_elem.956" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.960" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.961" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.962", %"class.std::__1::vector.968", %"class.std::__1::unique_ptr.976", %"class.std::__1::unique_ptr.982", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.988", %"class.std::__1::vector.994", %"struct.std::__1::pair.1002" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::unique_ptr.962" = type { %"class.std::__1::__compressed_pair.963" }
%"class.std::__1::__compressed_pair.963" = type { %"struct.std::__1::__compressed_pair_elem.964" }
%"struct.std::__1::__compressed_pair_elem.964" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.968" = type { %"class.std::__1::__vector_base.969" }
%"class.std::__1::__vector_base.969" = type { %"class.std::__1::unique_ptr.970"*, %"class.std::__1::unique_ptr.970"*, %"class.std::__1::__compressed_pair.971" }
%"class.std::__1::unique_ptr.970" = type opaque
%"class.std::__1::__compressed_pair.971" = type { %"struct.std::__1::__compressed_pair_elem.972" }
%"struct.std::__1::__compressed_pair_elem.972" = type { %"class.std::__1::unique_ptr.970"* }
%"class.std::__1::unique_ptr.976" = type { %"class.std::__1::__compressed_pair.977" }
%"class.std::__1::__compressed_pair.977" = type { %"struct.std::__1::__compressed_pair_elem.978" }
%"struct.std::__1::__compressed_pair_elem.978" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.982" = type { %"class.std::__1::__compressed_pair.983" }
%"class.std::__1::__compressed_pair.983" = type { %"struct.std::__1::__compressed_pair_elem.984" }
%"struct.std::__1::__compressed_pair_elem.984" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.988" = type { %"class.std::__1::__compressed_pair.989" }
%"class.std::__1::__compressed_pair.989" = type { %"struct.std::__1::__compressed_pair_elem.990" }
%"struct.std::__1::__compressed_pair_elem.990" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.994" = type { %"class.std::__1::__vector_base.995" }
%"class.std::__1::__vector_base.995" = type { %"struct.std::__1::pair.996"*, %"struct.std::__1::pair.996"*, %"class.std::__1::__compressed_pair.997" }
%"struct.std::__1::pair.996" = type opaque
%"class.std::__1::__compressed_pair.997" = type { %"struct.std::__1::__compressed_pair_elem.998" }
%"struct.std::__1::__compressed_pair_elem.998" = type { %"struct.std::__1::pair.996"* }
%"struct.std::__1::pair.1002" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.20"*, i16, i8*)*, i8* }
%"class.v8::Local.20" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.1003" = type { %"class.std::__1::__compressed_pair.1004" }
%"class.std::__1::__compressed_pair.1004" = type { %"struct.std::__1::__compressed_pair_elem.1005" }
%"struct.std::__1::__compressed_pair_elem.1005" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.1006", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.1006" = type { %"class.std::__1::__hash_table.1007" }
%"class.std::__1::__hash_table.1007" = type <{ %"class.std::__1::unique_ptr.1008", %"class.std::__1::__compressed_pair.1018", %"class.std::__1::__compressed_pair.1023", %"class.std::__1::__compressed_pair.1027", [4 x i8] }>
%"class.std::__1::unique_ptr.1008" = type { %"class.std::__1::__compressed_pair.1009" }
%"class.std::__1::__compressed_pair.1009" = type { %"struct.std::__1::__compressed_pair_elem.1010", %"struct.std::__1::__compressed_pair_elem.1012" }
%"struct.std::__1::__compressed_pair_elem.1010" = type { %"struct.std::__1::__hash_node_base.1011"** }
%"struct.std::__1::__hash_node_base.1011" = type { %"struct.std::__1::__hash_node_base.1011"* }
%"struct.std::__1::__compressed_pair_elem.1012" = type { %"class.std::__1::__bucket_list_deallocator.1013" }
%"class.std::__1::__bucket_list_deallocator.1013" = type { %"class.std::__1::__compressed_pair.1014" }
%"class.std::__1::__compressed_pair.1014" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.1018" = type { %"struct.std::__1::__compressed_pair_elem.1019" }
%"struct.std::__1::__compressed_pair_elem.1019" = type { %"struct.std::__1::__hash_node_base.1011" }
%"class.std::__1::__compressed_pair.1023" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.1027" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.v8::internal::AstStringConstants" = type { %"class.v8::internal::Zone", %"class.v8::base::TemplateHashMapImpl", i64, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"*, %"class.v8::internal::AstRawString"* }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::base::TemplateHashMapImpl" = type { %"struct.v8::base::TemplateHashMapImpl<const v8::internal::AstRawString *, v8::base::NoHashMapValue, v8::internal::AstRawStringMapMatcher, v8::base::DefaultAllocationPolicy>::Impl" }
%"struct.v8::base::TemplateHashMapImpl<const v8::internal::AstRawString *, v8::base::NoHashMapValue, v8::internal::AstRawStringMapMatcher, v8::base::DefaultAllocationPolicy>::Impl" = type { %"struct.v8::base::TemplateHashMapEntry"*, i32, i32 }
%"struct.v8::base::TemplateHashMapEntry" = type <{ %union.anon.1251, i32, [4 x i8] }>
%union.anon.1251 = type { %"class.v8::internal::AstRawString"* }
%"class.v8::internal::AstRawString" = type <{ %union.anon.1035, %"class.v8::internal::Vector.1036", i32, i8, [3 x i8] }>
%union.anon.1035 = type { %"class.v8::internal::AstRawString"* }
%"class.v8::internal::Vector.1036" = type { i8*, i64 }
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque.1037" }
%"class.std::__1::deque.1037" = type { %"class.std::__1::__deque_base.1038" }
%"class.std::__1::__deque_base.1038" = type { %"struct.std::__1::__split_buffer.1039", i64, %"class.std::__1::__compressed_pair.1046" }
%"struct.std::__1::__split_buffer.1039" = type { %"struct.std::__1::pair.1040"**, %"struct.std::__1::pair.1040"**, %"struct.std::__1::pair.1040"**, %"class.std::__1::__compressed_pair.1041" }
%"struct.std::__1::pair.1040" = type opaque
%"class.std::__1::__compressed_pair.1041" = type { %"struct.std::__1::__compressed_pair_elem.1042" }
%"struct.std::__1::__compressed_pair_elem.1042" = type { %"struct.std::__1::pair.1040"** }
%"class.std::__1::__compressed_pair.1046" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.1051" = type { %"class.std::__1::__vector_base.1052" }
%"class.std::__1::__vector_base.1052" = type { %"class.v8::internal::Handle.770"*, %"class.v8::internal::Handle.770"*, %"class.std::__1::__compressed_pair.1053" }
%"class.std::__1::__compressed_pair.1053" = type { %"struct.std::__1::__compressed_pair_elem.1054" }
%"struct.std::__1::__compressed_pair_elem.1054" = type { %"class.v8::internal::Handle.770"* }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector", [128 x i8] }
%"class.v8::internal::Vector" = type { i8*, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.912", i32, %"class.v8::Local.20" }
%"class.v8::Local.912" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.1058" = type { %"class.std::__1::__compressed_pair.1059" }
%"class.std::__1::__compressed_pair.1059" = type { %"struct.std::__1::__compressed_pair_elem.1060" }
%"struct.std::__1::__compressed_pair_elem.1060" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.887", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1064" = type { %"class.std::__1::__vector_base.1065" }
%"class.std::__1::__vector_base.1065" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.1066" }
%"class.std::__1::__compressed_pair.1066" = type { %"struct.std::__1::__compressed_pair_elem.1067" }
%"struct.std::__1::__compressed_pair_elem.1067" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.1071" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.1072" = type { %"class.std::__1::__hash_table.1073" }
%"class.std::__1::__hash_table.1073" = type <{ %"class.std::__1::unique_ptr.1074", %"class.std::__1::__compressed_pair.1084", %"class.std::__1::__compressed_pair.1089", %"class.std::__1::__compressed_pair.1092", [4 x i8] }>
%"class.std::__1::unique_ptr.1074" = type { %"class.std::__1::__compressed_pair.1075" }
%"class.std::__1::__compressed_pair.1075" = type { %"struct.std::__1::__compressed_pair_elem.1076", %"struct.std::__1::__compressed_pair_elem.1078" }
%"struct.std::__1::__compressed_pair_elem.1076" = type { %"struct.std::__1::__hash_node_base.1077"** }
%"struct.std::__1::__hash_node_base.1077" = type { %"struct.std::__1::__hash_node_base.1077"* }
%"struct.std::__1::__compressed_pair_elem.1078" = type { %"class.std::__1::__bucket_list_deallocator.1079" }
%"class.std::__1::__bucket_list_deallocator.1079" = type { %"class.std::__1::__compressed_pair.1080" }
%"class.std::__1::__compressed_pair.1080" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.1084" = type { %"struct.std::__1::__compressed_pair_elem.1085" }
%"struct.std::__1::__compressed_pair_elem.1085" = type { %"struct.std::__1::__hash_node_base.1077" }
%"class.std::__1::__compressed_pair.1089" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.1092" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.189" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1096", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1125", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1126", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1096" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1121, %union.anon.1123, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1121 = type { i64 }
%union.anon.1123 = type { i64 }
%"class.std::__1::weak_ptr.1125" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic.46", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.189" }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1126" = type { %"class.v8::PersistentBase.1127" }
%"class.v8::PersistentBase.1127" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1097", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1097" = type { %"class.std::__1::__hash_table.1098" }
%"class.std::__1::__hash_table.1098" = type <{ %"class.std::__1::unique_ptr.1099", %"class.std::__1::__compressed_pair.1109", %"class.std::__1::__compressed_pair.1114", %"class.std::__1::__compressed_pair.1117", [4 x i8] }>
%"class.std::__1::unique_ptr.1099" = type { %"class.std::__1::__compressed_pair.1100" }
%"class.std::__1::__compressed_pair.1100" = type { %"struct.std::__1::__compressed_pair_elem.1101", %"struct.std::__1::__compressed_pair_elem.1103" }
%"struct.std::__1::__compressed_pair_elem.1101" = type { %"struct.std::__1::__hash_node_base.1102"** }
%"struct.std::__1::__hash_node_base.1102" = type { %"struct.std::__1::__hash_node_base.1102"* }
%"struct.std::__1::__compressed_pair_elem.1103" = type { %"class.std::__1::__bucket_list_deallocator.1104" }
%"class.std::__1::__bucket_list_deallocator.1104" = type { %"class.std::__1::__compressed_pair.1105" }
%"class.std::__1::__compressed_pair.1105" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.1109" = type { %"struct.std::__1::__compressed_pair_elem.1110" }
%"struct.std::__1::__compressed_pair_elem.1110" = type { %"struct.std::__1::__hash_node_base.1102" }
%"class.std::__1::__compressed_pair.1114" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.1117" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1128" = type { %"class.std::__1::__compressed_pair.1129" }
%"class.std::__1::__compressed_pair.1129" = type { %"struct.std::__1::__compressed_pair_elem.1130" }
%"struct.std::__1::__compressed_pair_elem.1130" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1157", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.1133", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.1137", %"class.std::__1::unique_ptr.1143", %"class.std::__1::unique_ptr.503", %"class.std::__1::vector.1149", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.1133" = type { %"struct.std::__1::__atomic_base.1134" }
%"struct.std::__1::__atomic_base.1134" = type { %"struct.std::__1::__cxx_atomic_impl.1135" }
%"struct.std::__1::__cxx_atomic_impl.1135" = type { %"struct.std::__1::__cxx_atomic_base_impl.1136" }
%"struct.std::__1::__cxx_atomic_base_impl.1136" = type { i32 }
%"class.std::__1::unique_ptr.1137" = type { %"class.std::__1::__compressed_pair.1138" }
%"class.std::__1::__compressed_pair.1138" = type { %"struct.std::__1::__compressed_pair_elem.1139" }
%"struct.std::__1::__compressed_pair_elem.1139" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.887" }
%"class.std::__1::unique_ptr.1143" = type { %"class.std::__1::__compressed_pair.1144" }
%"class.std::__1::__compressed_pair.1144" = type { %"struct.std::__1::__compressed_pair_elem.1145" }
%"struct.std::__1::__compressed_pair_elem.1145" = type { %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1149" = type { %"class.std::__1::__vector_base.1150" }
%"class.std::__1::__vector_base.1150" = type { %"struct.std::__1::pair.1151"*, %"struct.std::__1::pair.1151"*, %"class.std::__1::__compressed_pair.1152" }
%"struct.std::__1::pair.1151" = type opaque
%"class.std::__1::__compressed_pair.1152" = type { %"struct.std::__1::__compressed_pair_elem.1153" }
%"struct.std::__1::__compressed_pair_elem.1153" = type { %"struct.std::__1::pair.1151"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic.46"*, %"class.std::__1::unique_ptr.126" }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.67", %"class.std::__1::vector.67", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.67" = type { %"class.std::__1::__vector_base.68" }
%"class.std::__1::__vector_base.68" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.69" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.69" = type { %"struct.std::__1::__compressed_pair_elem.70" }
%"struct.std::__1::__compressed_pair_elem.70" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.74" }
%"class.std::__1::__hash_table.74" = type <{ %"class.std::__1::unique_ptr.75", %"class.std::__1::__compressed_pair.85", %"class.std::__1::__compressed_pair.90", %"class.std::__1::__compressed_pair.92", [4 x i8] }>
%"class.std::__1::unique_ptr.75" = type { %"class.std::__1::__compressed_pair.76" }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77", %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"struct.std::__1::__hash_node_base.78"** }
%"struct.std::__1::__hash_node_base.78" = type { %"struct.std::__1::__hash_node_base.78"* }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"class.std::__1::__bucket_list_deallocator.80" }
%"class.std::__1::__bucket_list_deallocator.80" = type { %"class.std::__1::__compressed_pair.81" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.85" = type { %"struct.std::__1::__compressed_pair_elem.86" }
%"struct.std::__1::__compressed_pair_elem.86" = type { %"struct.std::__1::__hash_node_base.78" }
%"class.std::__1::__compressed_pair.90" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.92" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic.46", %"struct.std::__1::atomic.51", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.115", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic.46"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.51", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.51", %"struct.std::__1::atomic.97", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.97" = type { %"struct.std::__1::__atomic_base.98" }
%"struct.std::__1::__atomic_base.98" = type { %"struct.std::__1::__cxx_atomic_impl.99" }
%"struct.std::__1::__cxx_atomic_impl.99" = type { %"struct.std::__1::__cxx_atomic_base_impl.100" }
%"struct.std::__1::__cxx_atomic_base_impl.100" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.101" }
%"class.std::__1::vector.101" = type { %"class.std::__1::__vector_base.102" }
%"class.std::__1::__vector_base.102" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.103" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.103" = type { %"struct.std::__1::__compressed_pair_elem.104" }
%"struct.std::__1::__compressed_pair_elem.104" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.108", %"class.std::__1::__compressed_pair.113" }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"class.std::__1::__compressed_pair.113" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::atomic.115" = type { %"struct.std::__1::__atomic_base.116" }
%"struct.std::__1::__atomic_base.116" = type { %"struct.std::__1::__cxx_atomic_impl.117" }
%"struct.std::__1::__cxx_atomic_impl.117" = type { %"struct.std::__1::__cxx_atomic_base_impl.118" }
%"struct.std::__1::__cxx_atomic_base_impl.118" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.119", i8, [7 x i8] }>
%"class.std::__1::vector.119" = type { %"class.std::__1::__vector_base.120" }
%"class.std::__1::__vector_base.120" = type { i64*, i64*, %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.122" }
%"struct.std::__1::__compressed_pair_elem.122" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.126" = type { %"class.std::__1::__compressed_pair.127" }
%"class.std::__1::__compressed_pair.127" = type { %"struct.std::__1::__compressed_pair_elem.128" }
%"struct.std::__1::__compressed_pair_elem.128" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic.46", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.std::__1::unique_ptr.1157" = type { %"class.std::__1::__compressed_pair.1158" }
%"class.std::__1::__compressed_pair.1158" = type { %"struct.std::__1::__compressed_pair_elem.1159" }
%"struct.std::__1::__compressed_pair_elem.1159" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1166" = type { %"class.std::__1::__compressed_pair.1167" }
%"class.std::__1::__compressed_pair.1167" = type { %"struct.std::__1::__compressed_pair_elem.1168" }
%"struct.std::__1::__compressed_pair_elem.1168" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.913", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.913" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1174" }
%"class.std::__1::unordered_map.1174" = type { %"class.std::__1::__hash_table.1175" }
%"class.std::__1::__hash_table.1175" = type <{ %"class.std::__1::unique_ptr.1176", %"class.std::__1::__compressed_pair.1186", %"class.std::__1::__compressed_pair.1191", %"class.std::__1::__compressed_pair.1194", [4 x i8] }>
%"class.std::__1::unique_ptr.1176" = type { %"class.std::__1::__compressed_pair.1177" }
%"class.std::__1::__compressed_pair.1177" = type { %"struct.std::__1::__compressed_pair_elem.1178", %"struct.std::__1::__compressed_pair_elem.1180" }
%"struct.std::__1::__compressed_pair_elem.1178" = type { %"struct.std::__1::__hash_node_base.1179"** }
%"struct.std::__1::__hash_node_base.1179" = type { %"struct.std::__1::__hash_node_base.1179"* }
%"struct.std::__1::__compressed_pair_elem.1180" = type { %"class.std::__1::__bucket_list_deallocator.1181" }
%"class.std::__1::__bucket_list_deallocator.1181" = type { %"class.std::__1::__compressed_pair.1182" }
%"class.std::__1::__compressed_pair.1182" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.1186" = type { %"struct.std::__1::__compressed_pair_elem.1187" }
%"struct.std::__1::__compressed_pair_elem.1187" = type { %"struct.std::__1::__hash_node_base.1179" }
%"class.std::__1::__compressed_pair.1191" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.1194" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"struct.std::__1::atomic.1200" = type { %"struct.std::__1::__atomic_base.1201" }
%"struct.std::__1::__atomic_base.1201" = type { %"struct.std::__1::__cxx_atomic_impl.1202" }
%"struct.std::__1::__cxx_atomic_impl.1202" = type { %"struct.std::__1::__cxx_atomic_base_impl.1203" }
%"struct.std::__1::__cxx_atomic_base_impl.1203" = type { %"class.std::__1::vector.1204"* }
%"class.std::__1::vector.1204" = type { %"class.std::__1::__vector_base.1205" }
%"class.std::__1::__vector_base.1205" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1206" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1206" = type { %"struct.std::__1::__compressed_pair_elem.1207" }
%"struct.std::__1::__compressed_pair_elem.1207" = type { %"struct.v8::MemoryRange"* }
%"struct.std::__1::atomic.56" = type { %"struct.std::__1::__atomic_base.57" }
%"struct.std::__1::__atomic_base.57" = type { %"struct.std::__1::__cxx_atomic_impl.58" }
%"struct.std::__1::__cxx_atomic_impl.58" = type { %"struct.std::__1::__cxx_atomic_base_impl.59" }
%"struct.std::__1::__cxx_atomic_base_impl.59" = type { i32 }
%"class.std::__1::vector.60" = type { %"class.std::__1::__vector_base.61" }
%"class.std::__1::__vector_base.61" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.62" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic.46", %"struct.std::__1::atomic.46", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.132" }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.std::__1::vector.132" = type { %"class.std::__1::__vector_base.133" }
%"class.std::__1::__vector_base.133" = type { %"struct.std::__1::pair.134"*, %"struct.std::__1::pair.134"*, %"class.std::__1::__compressed_pair.135" }
%"struct.std::__1::pair.134" = type { i32, i64 }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.136" }
%"struct.std::__1::__compressed_pair_elem.136" = type { %"struct.std::__1::pair.134"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic.46", i32, %"struct.std::__1::atomic.46", %"class.v8::base::Mutex", %"struct.std::__1::atomic.46" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.140" }
%"class.std::__1::unordered_map.140" = type { %"class.std::__1::__hash_table.141" }
%"class.std::__1::__hash_table.141" = type <{ %"class.std::__1::unique_ptr.142", %"class.std::__1::__compressed_pair.152", %"class.std::__1::__compressed_pair.157", %"class.std::__1::__compressed_pair.162", [4 x i8] }>
%"class.std::__1::unique_ptr.142" = type { %"class.std::__1::__compressed_pair.143" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144", %"struct.std::__1::__compressed_pair_elem.146" }
%"struct.std::__1::__compressed_pair_elem.144" = type { %"struct.std::__1::__hash_node_base.145"** }
%"struct.std::__1::__hash_node_base.145" = type { %"struct.std::__1::__hash_node_base.145"* }
%"struct.std::__1::__compressed_pair_elem.146" = type { %"class.std::__1::__bucket_list_deallocator.147" }
%"class.std::__1::__bucket_list_deallocator.147" = type { %"class.std::__1::__compressed_pair.148" }
%"class.std::__1::__compressed_pair.148" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.152" = type { %"struct.std::__1::__compressed_pair_elem.153" }
%"struct.std::__1::__compressed_pair_elem.153" = type { %"struct.std::__1::__hash_node_base.145" }
%"class.std::__1::__compressed_pair.157" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.162" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.175" = type { %"class.std::__1::__compressed_pair.176" }
%"class.std::__1::__compressed_pair.176" = type { %"struct.std::__1::__compressed_pair_elem.177" }
%"struct.std::__1::__compressed_pair_elem.177" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.181", %"struct.std::__1::atomic.185", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic.46" }
%"struct.std::__1::atomic.185" = type { %"struct.std::__1::__atomic_base.186" }
%"struct.std::__1::__atomic_base.186" = type { %"struct.std::__1::__cxx_atomic_impl.187" }
%"struct.std::__1::__cxx_atomic_impl.187" = type { %"struct.std::__1::__cxx_atomic_base_impl.188" }
%"struct.std::__1::__cxx_atomic_base_impl.188" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"struct.std::__1::atomic.190" = type { %"struct.std::__1::__atomic_base.191" }
%"struct.std::__1::__atomic_base.191" = type { %"struct.std::__1::__cxx_atomic_impl.192" }
%"struct.std::__1::__cxx_atomic_impl.192" = type { %"struct.std::__1::__cxx_atomic_base_impl.193" }
%"struct.std::__1::__cxx_atomic_base_impl.193" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.std::__1::vector.194" = type { %"class.std::__1::__vector_base.195" }
%"class.std::__1::__vector_base.195" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.196" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.std::__1::__compressed_pair.196" = type { %"struct.std::__1::__compressed_pair_elem.197" }
%"struct.std::__1::__compressed_pair_elem.197" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.201" = type { %"class.std::__1::__compressed_pair.202" }
%"class.std::__1::__compressed_pair.202" = type { %"struct.std::__1::__compressed_pair_elem.203" }
%"struct.std::__1::__compressed_pair_elem.203" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.207" = type { %"class.std::__1::__compressed_pair.208" }
%"class.std::__1::__compressed_pair.208" = type { %"struct.std::__1::__compressed_pair_elem.209" }
%"struct.std::__1::__compressed_pair_elem.209" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.249", %"class.std::__1::unique_ptr.255", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.309", %"class.std::__1::vector.309", %"class.std::__1::vector.309", %"class.std::__1::vector.316", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.210", %"class.std::__1::vector.211", %"class.std::__1::vector.218", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.210" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic.46" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type opaque
%"class.std::__1::vector.211" = type { %"class.std::__1::__vector_base.212" }
%"class.std::__1::__vector_base.212" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.213" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.213" = type { %"struct.std::__1::__compressed_pair_elem.214" }
%"struct.std::__1::__compressed_pair_elem.214" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.218" = type { %"class.std::__1::__vector_base.219" }
%"class.std::__1::__vector_base.219" = type { %"class.std::__1::unique_ptr.220"*, %"class.std::__1::unique_ptr.220"*, %"class.std::__1::__compressed_pair.221" }
%"class.std::__1::unique_ptr.220" = type opaque
%"class.std::__1::__compressed_pair.221" = type { %"struct.std::__1::__compressed_pair_elem.222" }
%"struct.std::__1::__compressed_pair_elem.222" = type { %"class.std::__1::unique_ptr.220"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic.46" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type opaque
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.226", %"class.v8::internal::Worklist.228", %"class.v8::internal::Worklist.228", %"class.v8::internal::Worklist.228", %"class.v8::internal::Worklist.230", %"class.v8::internal::Worklist.232", %"class.v8::internal::Worklist.234", %"class.v8::internal::Worklist.236", %"class.v8::internal::Worklist.238", %"class.v8::internal::Worklist.240" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic.46" }
%"class.v8::internal::Worklist.226" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic.46" }
%"class.v8::internal::Worklist.228" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic.46" }
%"class.v8::internal::Worklist.230" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic.46" }
%"class.v8::internal::Worklist.232" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic.46" }
%"class.v8::internal::Worklist.234" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic.46" }
%"class.v8::internal::Worklist.236" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic.46" }
%"class.v8::internal::Worklist.238" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic.46" }
%"class.v8::internal::Worklist.240" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic.46" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.242", i8, i64 }
%"class.std::__1::vector.242" = type { %"class.std::__1::__vector_base.243" }
%"class.std::__1::__vector_base.243" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.244" }
%"class.std::__1::__compressed_pair.244" = type { %"struct.std::__1::__compressed_pair_elem.245" }
%"struct.std::__1::__compressed_pair_elem.245" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.249" = type { %"class.std::__1::__compressed_pair.250" }
%"class.std::__1::__compressed_pair.250" = type { %"struct.std::__1::__compressed_pair_elem.251" }
%"struct.std::__1::__compressed_pair_elem.251" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.255" = type { %"class.std::__1::__compressed_pair.256" }
%"class.std::__1::__compressed_pair.256" = type { %"struct.std::__1::__compressed_pair_elem.257" }
%"struct.std::__1::__compressed_pair_elem.257" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.258" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.210"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.258" = type { %"class.std::__1::__hash_table.259" }
%"class.std::__1::__hash_table.259" = type <{ %"class.std::__1::unique_ptr.260", %"class.std::__1::__compressed_pair.270", %"class.std::__1::__compressed_pair.275", %"class.std::__1::__compressed_pair.278", [4 x i8] }>
%"class.std::__1::unique_ptr.260" = type { %"class.std::__1::__compressed_pair.261" }
%"class.std::__1::__compressed_pair.261" = type { %"struct.std::__1::__compressed_pair_elem.262", %"struct.std::__1::__compressed_pair_elem.264" }
%"struct.std::__1::__compressed_pair_elem.262" = type { %"struct.std::__1::__hash_node_base.263"** }
%"struct.std::__1::__hash_node_base.263" = type { %"struct.std::__1::__hash_node_base.263"* }
%"struct.std::__1::__compressed_pair_elem.264" = type { %"class.std::__1::__bucket_list_deallocator.265" }
%"class.std::__1::__bucket_list_deallocator.265" = type { %"class.std::__1::__compressed_pair.266" }
%"class.std::__1::__compressed_pair.266" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.270" = type { %"struct.std::__1::__compressed_pair_elem.271" }
%"struct.std::__1::__compressed_pair_elem.271" = type { %"struct.std::__1::__hash_node_base.263" }
%"class.std::__1::__compressed_pair.275" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.278" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.285" }
%"class.std::__1::unordered_map.285" = type { %"class.std::__1::__hash_table.286" }
%"class.std::__1::__hash_table.286" = type <{ %"class.std::__1::unique_ptr.287", %"class.std::__1::__compressed_pair.297", %"class.std::__1::__compressed_pair.302", %"class.std::__1::__compressed_pair.305", [4 x i8] }>
%"class.std::__1::unique_ptr.287" = type { %"class.std::__1::__compressed_pair.288" }
%"class.std::__1::__compressed_pair.288" = type { %"struct.std::__1::__compressed_pair_elem.289", %"struct.std::__1::__compressed_pair_elem.291" }
%"struct.std::__1::__compressed_pair_elem.289" = type { %"struct.std::__1::__hash_node_base.290"** }
%"struct.std::__1::__hash_node_base.290" = type { %"struct.std::__1::__hash_node_base.290"* }
%"struct.std::__1::__compressed_pair_elem.291" = type { %"class.std::__1::__bucket_list_deallocator.292" }
%"class.std::__1::__bucket_list_deallocator.292" = type { %"class.std::__1::__compressed_pair.293" }
%"class.std::__1::__compressed_pair.293" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.297" = type { %"struct.std::__1::__compressed_pair_elem.298" }
%"struct.std::__1::__compressed_pair_elem.298" = type { %"struct.std::__1::__hash_node_base.290" }
%"class.std::__1::__compressed_pair.302" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.305" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.std::__1::vector.309" = type { %"class.std::__1::__vector_base.310" }
%"class.std::__1::__vector_base.310" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.311" }
%"class.std::__1::__compressed_pair.311" = type { %"struct.std::__1::__compressed_pair_elem.312" }
%"struct.std::__1::__compressed_pair_elem.312" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.316" = type { %"class.std::__1::__vector_base.317" }
%"class.std::__1::__vector_base.317" = type { %"struct.std::__1::pair.318"*, %"struct.std::__1::pair.318"*, %"class.std::__1::__compressed_pair.319" }
%"struct.std::__1::pair.318" = type opaque
%"class.std::__1::__compressed_pair.319" = type { %"struct.std::__1::__compressed_pair_elem.320" }
%"struct.std::__1::__compressed_pair_elem.320" = type { %"struct.std::__1::pair.318"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.324", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.309"], [3 x %"class.std::__1::vector.309"], i8, %"struct.std::__1::atomic.181", [6 x i8], %"class.std::__1::vector.309", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.324" = type { %"class.std::__1::__compressed_pair.325" }
%"class.std::__1::__compressed_pair.325" = type { %"struct.std::__1::__compressed_pair_elem.326" }
%"struct.std::__1::__compressed_pair_elem.326" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.334"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.309", %"class.std::__1::vector.309", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.334" = type opaque
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.337" = type { %"class.std::__1::__compressed_pair.338" }
%"class.std::__1::__compressed_pair.338" = type { %"struct.std::__1::__compressed_pair_elem.339" }
%"struct.std::__1::__compressed_pair_elem.339" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.343" = type { %"class.std::__1::__compressed_pair.344" }
%"class.std::__1::__compressed_pair.344" = type { %"struct.std::__1::__compressed_pair_elem.345" }
%"struct.std::__1::__compressed_pair_elem.345" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.349" = type { %"class.std::__1::__compressed_pair.350" }
%"class.std::__1::__compressed_pair.350" = type { %"struct.std::__1::__compressed_pair_elem.351" }
%"struct.std::__1::__compressed_pair_elem.351" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic.46", %"struct.std::__1::atomic.46", %"struct.std::__1::atomic.46", %"struct.std::__1::atomic.46", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.359", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.352"], %"class.std::__1::unique_ptr.324" }
%"class.std::__1::vector.352" = type { %"class.std::__1::__vector_base.353" }
%"class.std::__1::__vector_base.353" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.354" }
%"class.std::__1::__compressed_pair.354" = type { %"struct.std::__1::__compressed_pair_elem.355" }
%"struct.std::__1::__compressed_pair_elem.355" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.388" = type { %"class.std::__1::__compressed_pair.389" }
%"class.std::__1::__compressed_pair.389" = type { %"struct.std::__1::__compressed_pair_elem.390" }
%"struct.std::__1::__compressed_pair_elem.390" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.391", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.395", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.400" }
%"struct.std::__1::atomic.391" = type { %"struct.std::__1::__atomic_base.392" }
%"struct.std::__1::__atomic_base.392" = type { %"struct.std::__1::__cxx_atomic_impl.393" }
%"struct.std::__1::__cxx_atomic_impl.393" = type { %"struct.std::__1::__cxx_atomic_base_impl.394" }
%"struct.std::__1::__cxx_atomic_base_impl.394" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.395" = type { %"struct.std::__1::__atomic_base.396" }
%"struct.std::__1::__atomic_base.396" = type { %"struct.std::__1::__cxx_atomic_impl.397" }
%"struct.std::__1::__cxx_atomic_impl.397" = type { %"struct.std::__1::__cxx_atomic_base_impl.398" }
%"struct.std::__1::__cxx_atomic_base_impl.398" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.400" = type { %"class.std::__1::__hash_table.401" }
%"class.std::__1::__hash_table.401" = type <{ %"class.std::__1::unique_ptr.402", %"class.std::__1::__compressed_pair.412", %"class.std::__1::__compressed_pair.417", %"class.std::__1::__compressed_pair.420", [4 x i8] }>
%"class.std::__1::unique_ptr.402" = type { %"class.std::__1::__compressed_pair.403" }
%"class.std::__1::__compressed_pair.403" = type { %"struct.std::__1::__compressed_pair_elem.404", %"struct.std::__1::__compressed_pair_elem.406" }
%"struct.std::__1::__compressed_pair_elem.404" = type { %"struct.std::__1::__hash_node_base.405"** }
%"struct.std::__1::__hash_node_base.405" = type { %"struct.std::__1::__hash_node_base.405"* }
%"struct.std::__1::__compressed_pair_elem.406" = type { %"class.std::__1::__bucket_list_deallocator.407" }
%"class.std::__1::__bucket_list_deallocator.407" = type { %"class.std::__1::__compressed_pair.408" }
%"class.std::__1::__compressed_pair.408" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.412" = type { %"struct.std::__1::__compressed_pair_elem.413" }
%"struct.std::__1::__compressed_pair_elem.413" = type { %"struct.std::__1::__hash_node_base.405" }
%"class.std::__1::__compressed_pair.417" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.420" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.std::__1::unique_ptr.427" = type { %"class.std::__1::__compressed_pair.428" }
%"class.std::__1::__compressed_pair.428" = type { %"struct.std::__1::__compressed_pair_elem.429" }
%"struct.std::__1::__compressed_pair_elem.429" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.324", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic.46", %"struct.std::__1::atomic.181", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.430", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.430" = type { %"class.std::__1::__hash_table.431" }
%"class.std::__1::__hash_table.431" = type <{ %"class.std::__1::unique_ptr.432", %"class.std::__1::__compressed_pair.442", %"class.std::__1::__compressed_pair.447", %"class.std::__1::__compressed_pair.450", [4 x i8] }>
%"class.std::__1::unique_ptr.432" = type { %"class.std::__1::__compressed_pair.433" }
%"class.std::__1::__compressed_pair.433" = type { %"struct.std::__1::__compressed_pair_elem.434", %"struct.std::__1::__compressed_pair_elem.436" }
%"struct.std::__1::__compressed_pair_elem.434" = type { %"struct.std::__1::__hash_node_base.435"** }
%"struct.std::__1::__hash_node_base.435" = type { %"struct.std::__1::__hash_node_base.435"* }
%"struct.std::__1::__compressed_pair_elem.436" = type { %"class.std::__1::__bucket_list_deallocator.437" }
%"class.std::__1::__bucket_list_deallocator.437" = type { %"class.std::__1::__compressed_pair.438" }
%"class.std::__1::__compressed_pair.438" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.442" = type { %"struct.std::__1::__compressed_pair_elem.443" }
%"struct.std::__1::__compressed_pair_elem.443" = type { %"struct.std::__1::__hash_node_base.435" }
%"class.std::__1::__compressed_pair.447" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.450" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.std::__1::unique_ptr.457" = type { %"class.std::__1::__compressed_pair.458" }
%"class.std::__1::__compressed_pair.458" = type { %"struct.std::__1::__compressed_pair_elem.459" }
%"struct.std::__1::__compressed_pair_elem.459" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.463" = type { %"class.std::__1::__compressed_pair.464" }
%"class.std::__1::__compressed_pair.464" = type { %"struct.std::__1::__compressed_pair_elem.465" }
%"struct.std::__1::__compressed_pair_elem.465" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.466" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.466" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::unique_ptr.473" = type { %"class.std::__1::__compressed_pair.474" }
%"class.std::__1::__compressed_pair.474" = type { %"struct.std::__1::__compressed_pair_elem.475" }
%"struct.std::__1::__compressed_pair_elem.475" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.479" = type { %"class.std::__1::__compressed_pair.480" }
%"class.std::__1::__compressed_pair.480" = type { %"struct.std::__1::__compressed_pair_elem.481" }
%"struct.std::__1::__compressed_pair_elem.481" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.485" = type { %"class.std::__1::__compressed_pair.486" }
%"class.std::__1::__compressed_pair.486" = type { %"struct.std::__1::__compressed_pair_elem.487" }
%"struct.std::__1::__compressed_pair_elem.487" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.491" = type { %"class.std::__1::__compressed_pair.492" }
%"class.std::__1::__compressed_pair.492" = type { %"struct.std::__1::__compressed_pair_elem.493" }
%"struct.std::__1::__compressed_pair_elem.493" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.497" = type { %"class.std::__1::__compressed_pair.498" }
%"class.std::__1::__compressed_pair.498" = type { %"struct.std::__1::__compressed_pair_elem.499" }
%"struct.std::__1::__compressed_pair_elem.499" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.503" = type { %"class.std::__1::__compressed_pair.504" }
%"class.std::__1::__compressed_pair.504" = type { %"struct.std::__1::__compressed_pair_elem.505" }
%"struct.std::__1::__compressed_pair_elem.505" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.509" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.528", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.510", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.528" = type { %"struct.std::__1::__atomic_base.529" }
%"struct.std::__1::__atomic_base.529" = type { %"struct.std::__1::__cxx_atomic_impl.530" }
%"struct.std::__1::__cxx_atomic_impl.530" = type { %"struct.std::__1::__cxx_atomic_base_impl.531" }
%"struct.std::__1::__cxx_atomic_base_impl.531" = type { i8* }
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.532" = type { %"class.std::__1::__hash_table.533" }
%"class.std::__1::__hash_table.533" = type <{ %"class.std::__1::unique_ptr.534", %"class.std::__1::__compressed_pair.544", %"class.std::__1::__compressed_pair.549", %"class.std::__1::__compressed_pair.552", [4 x i8] }>
%"class.std::__1::unique_ptr.534" = type { %"class.std::__1::__compressed_pair.535" }
%"class.std::__1::__compressed_pair.535" = type { %"struct.std::__1::__compressed_pair_elem.536", %"struct.std::__1::__compressed_pair_elem.538" }
%"struct.std::__1::__compressed_pair_elem.536" = type { %"struct.std::__1::__hash_node_base.537"** }
%"struct.std::__1::__hash_node_base.537" = type { %"struct.std::__1::__hash_node_base.537"* }
%"struct.std::__1::__compressed_pair_elem.538" = type { %"class.std::__1::__bucket_list_deallocator.539" }
%"class.std::__1::__bucket_list_deallocator.539" = type { %"class.std::__1::__compressed_pair.540" }
%"class.std::__1::__compressed_pair.540" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.544" = type { %"struct.std::__1::__compressed_pair_elem.545" }
%"struct.std::__1::__compressed_pair_elem.545" = type { %"struct.std::__1::__hash_node_base.537" }
%"class.std::__1::__compressed_pair.549" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.552" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.std::__1::unique_ptr.558" = type { %"class.std::__1::__compressed_pair.559" }
%"class.std::__1::__compressed_pair.559" = type { %"struct.std::__1::__compressed_pair_elem.560" }
%"struct.std::__1::__compressed_pair_elem.560" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.564" = type { %"class.std::__1::__compressed_pair.565" }
%"class.std::__1::__compressed_pair.565" = type { %"struct.std::__1::__compressed_pair_elem.566" }
%"struct.std::__1::__compressed_pair_elem.566" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.570", %"class.std::__1::vector.570" }
%"class.std::__1::unique_ptr.577" = type { %"class.std::__1::__compressed_pair.578" }
%"class.std::__1::__compressed_pair.578" = type { %"struct.std::__1::__compressed_pair_elem.579" }
%"struct.std::__1::__compressed_pair_elem.579" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set.359" = type { %"class.std::__1::__hash_table.360" }
%"class.std::__1::__hash_table.360" = type <{ %"class.std::__1::unique_ptr.361", %"class.std::__1::__compressed_pair.371", %"class.std::__1::__compressed_pair.376", %"class.std::__1::__compressed_pair.380", [4 x i8] }>
%"class.std::__1::unique_ptr.361" = type { %"class.std::__1::__compressed_pair.362" }
%"class.std::__1::__compressed_pair.362" = type { %"struct.std::__1::__compressed_pair_elem.363", %"struct.std::__1::__compressed_pair_elem.365" }
%"struct.std::__1::__compressed_pair_elem.363" = type { %"struct.std::__1::__hash_node_base.364"** }
%"struct.std::__1::__hash_node_base.364" = type { %"struct.std::__1::__hash_node_base.364"* }
%"struct.std::__1::__compressed_pair_elem.365" = type { %"class.std::__1::__bucket_list_deallocator.366" }
%"class.std::__1::__bucket_list_deallocator.366" = type { %"class.std::__1::__compressed_pair.367" }
%"class.std::__1::__compressed_pair.367" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.371" = type { %"struct.std::__1::__compressed_pair_elem.372" }
%"struct.std::__1::__compressed_pair_elem.372" = type { %"struct.std::__1::__hash_node_base.364" }
%"class.std::__1::__compressed_pair.376" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.380" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.std::__1::unordered_map.609" = type { %"class.std::__1::__hash_table.610" }
%"class.std::__1::__hash_table.610" = type <{ %"class.std::__1::unique_ptr.611", %"class.std::__1::__compressed_pair.621", %"class.std::__1::__compressed_pair.626", %"class.std::__1::__compressed_pair.629", [4 x i8] }>
%"class.std::__1::unique_ptr.611" = type { %"class.std::__1::__compressed_pair.612" }
%"class.std::__1::__compressed_pair.612" = type { %"struct.std::__1::__compressed_pair_elem.613", %"struct.std::__1::__compressed_pair_elem.615" }
%"struct.std::__1::__compressed_pair_elem.613" = type { %"struct.std::__1::__hash_node_base.614"** }
%"struct.std::__1::__hash_node_base.614" = type { %"struct.std::__1::__hash_node_base.614"* }
%"struct.std::__1::__compressed_pair_elem.615" = type { %"class.std::__1::__bucket_list_deallocator.616" }
%"class.std::__1::__bucket_list_deallocator.616" = type { %"class.std::__1::__compressed_pair.617" }
%"class.std::__1::__compressed_pair.617" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.621" = type { %"struct.std::__1::__compressed_pair_elem.622" }
%"struct.std::__1::__compressed_pair_elem.622" = type { %"struct.std::__1::__hash_node_base.614" }
%"class.std::__1::__compressed_pair.626" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.629" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.std::__1::unordered_map.583" = type { %"class.std::__1::__hash_table.584" }
%"class.std::__1::__hash_table.584" = type <{ %"class.std::__1::unique_ptr.585", %"class.std::__1::__compressed_pair.595", %"class.std::__1::__compressed_pair.600", %"class.std::__1::__compressed_pair.603", [4 x i8] }>
%"class.std::__1::unique_ptr.585" = type { %"class.std::__1::__compressed_pair.586" }
%"class.std::__1::__compressed_pair.586" = type { %"struct.std::__1::__compressed_pair_elem.587", %"struct.std::__1::__compressed_pair_elem.589" }
%"struct.std::__1::__compressed_pair_elem.587" = type { %"struct.std::__1::__hash_node_base.588"** }
%"struct.std::__1::__hash_node_base.588" = type { %"struct.std::__1::__hash_node_base.588"* }
%"struct.std::__1::__compressed_pair_elem.589" = type { %"class.std::__1::__bucket_list_deallocator.590" }
%"class.std::__1::__bucket_list_deallocator.590" = type { %"class.std::__1::__compressed_pair.591" }
%"class.std::__1::__compressed_pair.591" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.595" = type { %"struct.std::__1::__compressed_pair_elem.596" }
%"struct.std::__1::__compressed_pair_elem.596" = type { %"struct.std::__1::__hash_node_base.588" }
%"class.std::__1::__compressed_pair.600" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.603" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.std::__1::unordered_map.633" = type { %"class.std::__1::__hash_table.634" }
%"class.std::__1::__hash_table.634" = type <{ %"class.std::__1::unique_ptr.635", %"class.std::__1::__compressed_pair.645", %"class.std::__1::__compressed_pair.650", %"class.std::__1::__compressed_pair.655", [4 x i8] }>
%"class.std::__1::unique_ptr.635" = type { %"class.std::__1::__compressed_pair.636" }
%"class.std::__1::__compressed_pair.636" = type { %"struct.std::__1::__compressed_pair_elem.637", %"struct.std::__1::__compressed_pair_elem.639" }
%"struct.std::__1::__compressed_pair_elem.637" = type { %"struct.std::__1::__hash_node_base.638"** }
%"struct.std::__1::__hash_node_base.638" = type { %"struct.std::__1::__hash_node_base.638"* }
%"struct.std::__1::__compressed_pair_elem.639" = type { %"class.std::__1::__bucket_list_deallocator.640" }
%"class.std::__1::__bucket_list_deallocator.640" = type { %"class.std::__1::__compressed_pair.641" }
%"class.std::__1::__compressed_pair.641" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.645" = type { %"struct.std::__1::__compressed_pair_elem.646" }
%"struct.std::__1::__compressed_pair_elem.646" = type { %"struct.std::__1::__hash_node_base.638" }
%"class.std::__1::__compressed_pair.650" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"class.std::__1::__compressed_pair.655" = type { %"struct.std::__1::__compressed_pair_elem.44" }
%"class.std::__1::vector.661" = type { %"class.std::__1::__vector_base.662" }
%"class.std::__1::__vector_base.662" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.663" }
%"class.std::__1::__compressed_pair.663" = type { %"struct.std::__1::__compressed_pair_elem.664" }
%"struct.std::__1::__compressed_pair_elem.664" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.668" = type { %"class.std::__1::__compressed_pair.669" }
%"class.std::__1::__compressed_pair.669" = type { %"struct.std::__1::__compressed_pair_elem.670" }
%"struct.std::__1::__compressed_pair_elem.670" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"struct.std::__1::atomic.46" = type { %"struct.std::__1::__atomic_base.47" }
%"struct.std::__1::__atomic_base.47" = type { %"struct.std::__1::__atomic_base.48" }
%"struct.std::__1::__atomic_base.48" = type { %"struct.std::__1::__cxx_atomic_impl.49" }
%"struct.std::__1::__cxx_atomic_impl.49" = type { %"struct.std::__1::__cxx_atomic_base_impl.50" }
%"struct.std::__1::__cxx_atomic_base_impl.50" = type { i64 }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic.46", i64, %"struct.std::__1::atomic.46" }
%"class.std::__1::vector.168" = type { %"class.std::__1::__vector_base.169" }
%"class.std::__1::__vector_base.169" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.170" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.std::__1::__compressed_pair.170" = type { %"struct.std::__1::__compressed_pair_elem.171" }
%"struct.std::__1::__compressed_pair_elem.171" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.std::__1::vector.570" = type { %"class.std::__1::__vector_base.571" }
%"class.std::__1::__vector_base.571" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.572" }
%"class.std::__1::__compressed_pair.572" = type { %"struct.std::__1::__compressed_pair_elem.573" }
%"struct.std::__1::__compressed_pair_elem.573" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::Coverage" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.v8::internal::CoverageScript"*, %"struct.v8::internal::CoverageScript"*, %"class.std::__1::__compressed_pair.13" }
%"struct.v8::internal::CoverageScript" = type { %"class.v8::internal::Handle", %"class.std::__1::vector.0" }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"*, %"class.std::__1::__compressed_pair.8" }
%"struct.v8::internal::CoverageFunction" = type <{ i32, i32, i32, [4 x i8], %"class.v8::internal::Handle.2", %"class.std::__1::vector.3", i8, [7 x i8] }>
%"class.v8::internal::Handle.2" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::vector.3" = type { %"class.std::__1::__vector_base.4" }
%"class.std::__1::__vector_base.4" = type { %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*, %"class.std::__1::__compressed_pair.5" }
%"struct.v8::internal::CoverageBlock" = type { i32, i32, i32 }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.v8::internal::CoverageBlock"* }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.v8::internal::CoverageFunction"* }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"struct.v8::internal::CoverageScript"* }
%"class.v8::internal::CoverageInfo" = type { %"class.v8::internal::TorqueGeneratedCoverageInfo" }
%"class.v8::internal::TorqueGeneratedCoverageInfo" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator" = type <{ %"struct.v8::internal::CoverageFunction"*, %"class.std::__1::vector.3", i8, i8, [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::Handle<v8::internal::String>::ObjectRef" = type { %"class.v8::internal::String" }
%"class.v8::internal::String" = type { %"class.v8::internal::TorqueGeneratedString" }
%"class.v8::internal::TorqueGeneratedString" = type { %"class.v8::internal::Name" }
%"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef" = type { %"class.v8::internal::SharedFunctionInfo" }
%class.anon.1264 = type { %"class.v8::internal::SharedFunctionInfo"* }
%class.anon = type { i8 }
%"class.v8::internal::Script" = type { %"class.v8::internal::TorqueGeneratedScript" }
%"class.v8::internal::TorqueGeneratedScript" = type { %"class.v8::internal::Struct" }
%"class.v8::internal::Struct" = type { %"class.v8::internal::TorqueGeneratedStruct" }
%"class.v8::internal::TorqueGeneratedStruct" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::HeapObjectIterator" = type { %"class.v8::internal::Heap"*, %"class.std::__1::unique_ptr.1238", i32, %"class.v8::internal::HeapObjectsFilter"*, %"class.v8::internal::SpaceIterator"*, %"class.std::__1::unique_ptr.1244" }
%"class.std::__1::unique_ptr.1238" = type { %"class.std::__1::__compressed_pair.1239" }
%"class.std::__1::__compressed_pair.1239" = type { %"struct.std::__1::__compressed_pair_elem.1240" }
%"struct.std::__1::__compressed_pair_elem.1240" = type { %"class.v8::internal::SafepointScope"* }
%"class.v8::internal::SafepointScope" = type opaque
%"class.v8::internal::HeapObjectsFilter" = type opaque
%"class.v8::internal::SpaceIterator" = type <{ i32 (...)**, %"class.v8::internal::Heap"*, i32, [4 x i8] }>
%"class.std::__1::unique_ptr.1244" = type { %"class.std::__1::__compressed_pair.1245" }
%"class.std::__1::__compressed_pair.1245" = type { %"struct.std::__1::__compressed_pair_elem.1246" }
%"struct.std::__1::__compressed_pair_elem.1246" = type { %"class.v8::internal::ObjectIterator"* }
%"class.v8::internal::ObjectIterator" = type { i32 (...)** }
%"class.v8::internal::JavaScriptFrameIterator" = type { %"class.v8::internal::StackFrameIterator" }
%"class.v8::internal::StackFrameIterator" = type { %"class.v8::internal::StackFrameIteratorBase.base", [7 x i8] }
%"class.v8::internal::StackFrameIteratorBase.base" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::internal::EntryFrame", %"class.v8::internal::ConstructEntryFrame", %"class.v8::internal::ExitFrame", %"class.v8::internal::WasmFrame", %"class.v8::internal::WasmToJsFrame", %"class.v8::internal::JsToWasmFrame", %"class.v8::internal::WasmDebugBreakFrame", %"class.v8::internal::CWasmEntryFrame", %"class.v8::internal::WasmExitFrame", %"class.v8::internal::WasmCompileLazyFrame", %"class.v8::internal::InterpretedFrame", %"class.v8::internal::BaselineFrame", %"class.v8::internal::OptimizedFrame", %"class.v8::internal::StubFrame", %"class.v8::internal::BuiltinContinuationFrame", %"class.v8::internal::JavaScriptBuiltinContinuationFrame", %"class.v8::internal::JavaScriptBuiltinContinuationWithCatchFrame", %"class.v8::internal::InternalFrame", %"class.v8::internal::ConstructFrame", %"class.v8::internal::BuiltinFrame", %"class.v8::internal::BuiltinExitFrame", %"class.v8::internal::NativeFrame", %"class.v8::internal::StackFrame"*, %"class.v8::internal::StackHandler"*, i8 }>
%"class.v8::internal::EntryFrame" = type { %"class.v8::internal::TypedFrame" }
%"class.v8::internal::TypedFrame" = type { %"class.v8::internal::CommonFrame" }
%"class.v8::internal::CommonFrame" = type { %"class.v8::internal::StackFrame" }
%"class.v8::internal::StackFrame" = type { i32 (...)**, %"class.v8::internal::StackFrameIteratorBase"*, %"class.v8::internal::Isolate"*, %"struct.v8::internal::StackFrame::State" }
%"class.v8::internal::StackFrameIteratorBase" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::internal::EntryFrame", %"class.v8::internal::ConstructEntryFrame", %"class.v8::internal::ExitFrame", %"class.v8::internal::WasmFrame", %"class.v8::internal::WasmToJsFrame", %"class.v8::internal::JsToWasmFrame", %"class.v8::internal::WasmDebugBreakFrame", %"class.v8::internal::CWasmEntryFrame", %"class.v8::internal::WasmExitFrame", %"class.v8::internal::WasmCompileLazyFrame", %"class.v8::internal::InterpretedFrame", %"class.v8::internal::BaselineFrame", %"class.v8::internal::OptimizedFrame", %"class.v8::internal::StubFrame", %"class.v8::internal::BuiltinContinuationFrame", %"class.v8::internal::JavaScriptBuiltinContinuationFrame", %"class.v8::internal::JavaScriptBuiltinContinuationWithCatchFrame", %"class.v8::internal::InternalFrame", %"class.v8::internal::ConstructFrame", %"class.v8::internal::BuiltinFrame", %"class.v8::internal::BuiltinExitFrame", %"class.v8::internal::NativeFrame", %"class.v8::internal::StackFrame"*, %"class.v8::internal::StackHandler"*, i8, [7 x i8] }>
%"struct.v8::internal::StackFrame::State" = type { i64, i64, i64*, i64, i64*, i64* }
%"class.v8::internal::ConstructEntryFrame" = type { %"class.v8::internal::EntryFrame" }
%"class.v8::internal::ExitFrame" = type { %"class.v8::internal::TypedFrame" }
%"class.v8::internal::WasmFrame" = type { %"class.v8::internal::TypedFrame" }
%"class.v8::internal::WasmToJsFrame" = type { %"class.v8::internal::StubFrame" }
%"class.v8::internal::JsToWasmFrame" = type { %"class.v8::internal::StubFrame" }
%"class.v8::internal::WasmDebugBreakFrame" = type { %"class.v8::internal::TypedFrame" }
%"class.v8::internal::CWasmEntryFrame" = type { %"class.v8::internal::StubFrame" }
%"class.v8::internal::WasmExitFrame" = type { %"class.v8::internal::WasmFrame" }
%"class.v8::internal::WasmCompileLazyFrame" = type { %"class.v8::internal::TypedFrame" }
%"class.v8::internal::InterpretedFrame" = type { %"class.v8::internal::UnoptimizedFrame" }
%"class.v8::internal::UnoptimizedFrame" = type { %"class.v8::internal::JavaScriptFrame" }
%"class.v8::internal::JavaScriptFrame" = type { %"class.v8::internal::CommonFrameWithJSLinkage" }
%"class.v8::internal::CommonFrameWithJSLinkage" = type { %"class.v8::internal::CommonFrame" }
%"class.v8::internal::BaselineFrame" = type { %"class.v8::internal::UnoptimizedFrame" }
%"class.v8::internal::OptimizedFrame" = type { %"class.v8::internal::JavaScriptFrame" }
%"class.v8::internal::StubFrame" = type { %"class.v8::internal::TypedFrame" }
%"class.v8::internal::BuiltinContinuationFrame" = type { %"class.v8::internal::InternalFrame" }
%"class.v8::internal::JavaScriptBuiltinContinuationFrame" = type { %"class.v8::internal::TypedFrameWithJSLinkage" }
%"class.v8::internal::TypedFrameWithJSLinkage" = type { %"class.v8::internal::CommonFrameWithJSLinkage" }
%"class.v8::internal::JavaScriptBuiltinContinuationWithCatchFrame" = type { %"class.v8::internal::JavaScriptBuiltinContinuationFrame" }
%"class.v8::internal::InternalFrame" = type { %"class.v8::internal::TypedFrame" }
%"class.v8::internal::ConstructFrame" = type { %"class.v8::internal::InternalFrame" }
%"class.v8::internal::BuiltinFrame" = type { %"class.v8::internal::TypedFrameWithJSLinkage" }
%"class.v8::internal::BuiltinExitFrame" = type { %"class.v8::internal::ExitFrame" }
%"class.v8::internal::NativeFrame" = type { %"class.v8::internal::TypedFrame" }
%"class.v8::internal::StackHandler" = type { i8 }
%"class.v8::internal::SharedToCounterMap" = type { %"class.v8::base::TemplateHashMapImpl.1212" }
%"class.v8::base::TemplateHashMapImpl.1212" = type { %"struct.v8::base::TemplateHashMapImpl<v8::internal::SharedFunctionInfo, unsigned int, v8::base::KeyEqualityMatcher<v8::internal::Object>, v8::base::DefaultAllocationPolicy>::Impl" }
%"struct.v8::base::TemplateHashMapImpl<v8::internal::SharedFunctionInfo, unsigned int, v8::base::KeyEqualityMatcher<v8::internal::Object>, v8::base::DefaultAllocationPolicy>::Impl" = type { %"struct.v8::base::TemplateHashMapEntry.1213"*, i32, i32 }
%"struct.v8::base::TemplateHashMapEntry.1213" = type <{ %"class.v8::internal::SharedFunctionInfo", i32, i32, i8, [7 x i8] }>
%"class.std::__1::vector.1214" = type { %"class.std::__1::__vector_base.1215" }
%"class.std::__1::__vector_base.1215" = type { %"class.v8::internal::Handle"*, %"class.v8::internal::Handle"*, %"class.std::__1::__compressed_pair.1216" }
%"class.std::__1::__compressed_pair.1216" = type { %"struct.std::__1::__compressed_pair_elem.1217" }
%"struct.std::__1::__compressed_pair_elem.1217" = type { %"class.v8::internal::Handle"* }
%"class.v8::internal::Script::Iterator" = type { %"class.v8::internal::WeakArrayList::Iterator" }
%"class.v8::internal::WeakArrayList::Iterator" = type { i32, %"class.v8::internal::WeakArrayList" }
%"class.v8::internal::WeakArrayList" = type { %"class.v8::internal::TorqueGeneratedWeakArrayList" }
%"class.v8::internal::TorqueGeneratedWeakArrayList" = type { %"class.v8::internal::HeapObject" }
%"class.std::__1::vector.1221" = type { %"class.std::__1::__vector_base.1222" }
%"class.std::__1::__vector_base.1222" = type { %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"*, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"*, %"class.std::__1::__compressed_pair.1223" }
%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount" = type <{ %"class.v8::internal::Handle.769", i32, i32, i32, [4 x i8] }>
%"class.std::__1::__compressed_pair.1223" = type { %"struct.std::__1::__compressed_pair_elem.1224" }
%"struct.std::__1::__compressed_pair_elem.1224" = type { %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* }
%"class.v8::internal::SharedFunctionInfo::ScriptIterator" = type <{ %"class.v8::internal::Handle.1228", i32, [4 x i8] }>
%"class.v8::internal::Handle.1228" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::vector.1230" = type { %"class.std::__1::__vector_base.1231" }
%"class.std::__1::__vector_base.1231" = type { %"class.v8::internal::Handle.1232"*, %"class.v8::internal::Handle.1232"*, %"class.std::__1::__compressed_pair.1233" }
%"class.v8::internal::Handle.1232" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.1233" = type { %"struct.std::__1::__compressed_pair_elem.1234" }
%"struct.std::__1::__compressed_pair_elem.1234" = type { %"class.v8::internal::Handle.1232"* }
%"class.v8::internal::IsCompiledScope" = type <{ %"class.v8::internal::MaybeHandle", i8, [7 x i8] }>
%"class.v8::internal::MaybeHandle" = type { i64* }

$_ZN2v84base19TemplateHashMapImplINS_8internal18SharedFunctionInfoEjNS0_18KeyEqualityMatcherINS2_6ObjectEEENS0_23DefaultAllocationPolicyEE14LookupOrInsertIS3_ZNS8_14LookupOrInsertIZNS2_18SharedToCounterMap3AddES3_jEUlvE_EEPNS0_20TemplateHashMapEntryIS3_jEERKS3_jRKT_EUlvE_SC_EESF_SK_jRKT0_RKT1_ = comdat any

$_ZN2v84base19TemplateHashMapImplINS_8internal18SharedFunctionInfoEjNS0_18KeyEqualityMatcherINS2_6ObjectEEENS0_23DefaultAllocationPolicyEE6ResizeEv = comdat any

$_ZNSt3__16vectorIN2v88internal13CoverageBlockENS_9allocatorIS3_EEE8__appendEm = comdat any

$_ZNSt3__16__sortIRPFbRKN2v88internal13CoverageBlockES5_EPS3_EEvT0_SA_T_ = comdat any

$_ZNSt3__17__sort4IRPFbRKN2v88internal13CoverageBlockES5_EPS3_EEjT0_SA_SA_SA_T_ = comdat any

$_ZNSt3__118__insertion_sort_3IRPFbRKN2v88internal13CoverageBlockES5_EPS3_EEvT0_SA_T_ = comdat any

$_ZNSt3__127__insertion_sort_incompleteIRPFbRKN2v88internal13CoverageBlockES5_EPS3_EEbT0_SA_T_ = comdat any

$_ZNSt3__16vectorIN2v88internal14CoverageScriptENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRNS2_6HandleINS2_6ScriptEEEEEEvDpOT_ = comdat any

$_ZNSt3__16vectorIN2v88internal16CoverageFunctionENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRS3_EEEvDpOT_ = comdat any

$_ZN2v88internal15IsCompiledScopeC2ENS0_18SharedFunctionInfoEPNS0_7IsolateE = comdat any

$_ZNK2v88internal18SharedFunctionInfo16GetBytecodeArrayINS0_7IsolateEEENS0_13BytecodeArrayEPT_ = comdat any

@_ZN2v88internal25FLAG_trace_block_coverageE = external local_unnamed_addr global i8, align 1
@.str = private unnamed_addr constant [18 x i8] c"Check failed: %s.\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"is_compiled_scope.is_compiled()\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"Out of memory: HashMap::Initialize\00", align 1
@_ZN2v88internal42FLAG_budget_for_feedback_vector_allocationE = external local_unnamed_addr global i32, align 4
@_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E = external local_unnamed_addr global %"class.v8::internal::SoleReadOnlyHeap"*, align 8
@.str.4 = private unnamed_addr constant [91 x i8] c"Coverage for function='%s', SFI=%p, has_nonempty_source_range=%d, function_is_relevant=%d\0A\00", align 1
@.str.5 = private unnamed_addr constant [33 x i8] c"{start: %d, end: %d, count: %d}\0A\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::Coverage"* @_ZN2v88internal8Coverage14CollectPreciseEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 54, i32 0, i32 0, i32 0, i32 0
  %3 = load atomic i32, i32* %2 monotonic, align 4
  %4 = tail call %"class.v8::internal::Coverage"* @_ZN2v88internal8Coverage7CollectEPNS0_7IsolateENS_5debug12CoverageModeE(%"class.v8::internal::Isolate"* %0, i32 %3)
  %5 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 109
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %17, label %8

8:                                                ; preds = %1
  %9 = load atomic i32, i32* %2 monotonic, align 4
  %10 = icmp eq i32 %9, 2
  br i1 %10, label %14, label %11

11:                                               ; preds = %8
  %12 = load atomic i32, i32* %2 monotonic, align 4
  %13 = icmp eq i32 %12, 4
  br i1 %13, label %14, label %17

14:                                               ; preds = %11, %8
  %15 = tail call i64* @_ZN2v88internal9ArrayList3NewEPNS0_7IsolateEi(%"class.v8::internal::Isolate"* %0, i32 0) #12
  %16 = load i64, i64* %15, align 8
  tail call void @_ZN2v88internal7Isolate35SetFeedbackVectorsForProfilingToolsENS0_6ObjectE(%"class.v8::internal::Isolate"* %0, i64 %16) #12
  br label %17

17:                                               ; preds = %1, %11, %14
  ret %"class.v8::internal::Coverage"* %4
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::Coverage"* @_ZN2v88internal8Coverage7CollectEPNS0_7IsolateENS_5debug12CoverageModeE(%"class.v8::internal::Isolate"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::CoverageInfo", align 8
  %4 = alloca %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", align 8
  %5 = alloca %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", align 8
  %6 = alloca %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", align 8
  %7 = alloca i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, align 8
  %8 = alloca %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", align 8
  %9 = alloca %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", align 8
  %10 = alloca %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", align 8
  %11 = alloca %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", align 8
  %12 = alloca i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, align 8
  %13 = alloca %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", align 8
  %14 = alloca %"class.std::__1::vector.3", align 16
  %15 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %16 = alloca %"class.v8::internal::SharedFunctionInfo", align 8
  %17 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %18 = alloca %"class.v8::internal::SharedFunctionInfo", align 8
  %19 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %20 = alloca %class.anon.1264, align 8
  %21 = alloca %"class.v8::internal::SharedFunctionInfo", align 8
  %22 = alloca %class.anon, align 1
  %23 = alloca %"class.v8::internal::Script", align 8
  %24 = alloca %class.anon.1264, align 8
  %25 = alloca %"class.v8::internal::SharedFunctionInfo", align 8
  %26 = alloca %class.anon, align 1
  %27 = alloca %class.anon.1264, align 8
  %28 = alloca %"class.v8::internal::SharedFunctionInfo", align 8
  %29 = alloca %class.anon, align 1
  %30 = alloca %"class.v8::internal::HeapObjectIterator", align 8
  %31 = alloca %"class.v8::internal::JavaScriptFrameIterator", align 8
  %32 = alloca %"class.v8::internal::SharedToCounterMap", align 8
  %33 = alloca %"class.std::__1::vector.1214", align 8
  %34 = alloca %"class.v8::internal::Script::Iterator", align 8
  %35 = alloca %"class.v8::internal::Script", align 8
  %36 = alloca %"class.v8::internal::Handle", align 8
  %37 = alloca %"class.std::__1::vector.1221", align 8
  %38 = alloca %"class.v8::internal::SharedFunctionInfo::ScriptIterator", align 8
  %39 = alloca %"class.std::__1::vector.119", align 8
  %40 = alloca %"struct.v8::internal::CoverageFunction", align 8
  %41 = alloca %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", align 8
  %42 = bitcast %"class.v8::internal::SharedToCounterMap"* %32 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %42) #12
  %43 = getelementptr inbounds %"class.v8::internal::SharedToCounterMap", %"class.v8::internal::SharedToCounterMap"* %32, i64 0, i32 0, i32 0, i32 1
  %44 = bitcast i32* %43 to i64*
  store i64 0, i64* %44, align 8
  %45 = tail call noalias i8* @malloc(i64 192) #12
  %46 = getelementptr inbounds %"class.v8::internal::SharedToCounterMap", %"class.v8::internal::SharedToCounterMap"* %32, i64 0, i32 0, i32 0, i32 0
  %47 = bitcast %"class.v8::internal::SharedToCounterMap"* %32 to i8**
  store i8* %45, i8** %47, align 8
  %48 = icmp eq i8* %45, null
  br i1 %48, label %49, label %50

49:                                               ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0)) #13
  unreachable

50:                                               ; preds = %2
  store i32 8, i32* %43, align 8
  %51 = getelementptr inbounds i8, i8* %45, i64 16
  store i8 0, i8* %51, align 8
  %52 = getelementptr inbounds i8, i8* %45, i64 40
  store i8 0, i8* %52, align 8
  %53 = getelementptr inbounds i8, i8* %45, i64 64
  store i8 0, i8* %53, align 8
  %54 = getelementptr inbounds i8, i8* %45, i64 88
  store i8 0, i8* %54, align 8
  %55 = load i32, i32* %43, align 8
  %56 = icmp ugt i32 %55, 4
  br i1 %56, label %57, label %65

57:                                               ; preds = %50, %57
  %58 = phi i64 [ %61, %57 ], [ 4, %50 ]
  %59 = load %"struct.v8::base::TemplateHashMapEntry.1213"*, %"struct.v8::base::TemplateHashMapEntry.1213"** %46, align 8
  %60 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %59, i64 %58, i32 3
  store i8 0, i8* %60, align 8
  %61 = add nuw nsw i64 %58, 1
  %62 = load i32, i32* %43, align 8
  %63 = zext i32 %62 to i64
  %64 = icmp ult i64 %61, %63
  br i1 %64, label %57, label %65

65:                                               ; preds = %57, %50
  %66 = getelementptr inbounds %"class.v8::internal::SharedToCounterMap", %"class.v8::internal::SharedToCounterMap"* %32, i64 0, i32 0, i32 0, i32 2
  store i32 0, i32* %66, align 4
  %67 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 54, i32 0, i32 0, i32 0, i32 0
  %68 = load atomic i32, i32* %67 monotonic, align 4
  switch i32 %68, label %495 [
    i32 4, label %69
    i32 3, label %69
    i32 2, label %69
    i32 1, label %69
    i32 0, label %160
  ]

69:                                               ; preds = %65, %65, %65, %65
  %70 = icmp eq i32 %1, 0
  %71 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 653
  %72 = bitcast %"class.v8::internal::SharedFunctionInfo"* %21 to i8*
  %73 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %21, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %74 = getelementptr inbounds %"class.v8::internal::SharedToCounterMap", %"class.v8::internal::SharedToCounterMap"* %32, i64 0, i32 0
  %75 = getelementptr inbounds %class.anon, %class.anon* %22, i64 0, i32 0
  %76 = bitcast %class.anon.1264* %20 to i8*
  %77 = getelementptr inbounds %class.anon.1264, %class.anon.1264* %20, i64 0, i32 0
  br i1 %70, label %78, label %119

78:                                               ; preds = %69, %94
  %79 = phi i64 [ %118, %94 ], [ 0, %69 ]
  %80 = load i64, i64* %71, align 8
  %81 = add i64 %80, 3
  %82 = inttoptr i64 %81 to i32*
  %83 = load i32, i32* %82, align 4
  %84 = icmp ult i32 %83, 2
  br i1 %84, label %90, label %85

85:                                               ; preds = %78
  %86 = add i64 %80, 7
  %87 = inttoptr i64 %86 to i32*
  %88 = load atomic i32, i32* %87 monotonic, align 4
  %89 = ashr i32 %88, 1
  br label %90

90:                                               ; preds = %85, %78
  %91 = phi i32 [ %89, %85 ], [ 0, %78 ]
  %92 = sext i32 %91 to i64
  %93 = icmp slt i64 %79, %92
  br i1 %93, label %94, label %495

94:                                               ; preds = %90
  %95 = and i64 %80, -4294967296
  %96 = trunc i64 %79 to i32
  %97 = shl i32 %96, 2
  %98 = add i32 %97, 4
  %99 = sext i32 %98 to i64
  %100 = add i64 %80, 7
  %101 = add i64 %100, %99
  %102 = inttoptr i64 %101 to i32*
  %103 = load atomic i32, i32* %102 monotonic, align 4
  %104 = zext i32 %103 to i64
  %105 = or i64 %95, %104
  %106 = add i64 %105, 19
  %107 = inttoptr i64 %106 to i32*
  %108 = load i32, i32* %107, align 4
  %109 = zext i32 %108 to i64
  %110 = or i64 %95, %109
  %111 = add i64 %105, 7
  %112 = inttoptr i64 %111 to i32*
  %113 = load i32, i32* %112, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %72) #12
  store i64 %110, i64* %73, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %75) #12
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %76) #12
  store %"class.v8::internal::SharedFunctionInfo"* %21, %"class.v8::internal::SharedFunctionInfo"** %77, align 8
  %114 = call %"struct.v8::base::TemplateHashMapEntry.1213"* @_ZN2v84base19TemplateHashMapImplINS_8internal18SharedFunctionInfoEjNS0_18KeyEqualityMatcherINS2_6ObjectEEENS0_23DefaultAllocationPolicyEE14LookupOrInsertIS3_ZNS8_14LookupOrInsertIZNS2_18SharedToCounterMap3AddES3_jEUlvE_EEPNS0_20TemplateHashMapEntryIS3_jEERKS3_jRKT_EUlvE_SC_EESF_SK_jRKT0_RKT1_(%"class.v8::base::TemplateHashMapImpl.1212"* nonnull %74, %"class.v8::internal::SharedFunctionInfo"* nonnull dereferenceable(8) %21, i32 %108, %class.anon.1264* nonnull dereferenceable(8) %20, %class.anon* nonnull dereferenceable(1) %22) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %76) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %75) #12
  %115 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %114, i64 0, i32 1
  %116 = load i32, i32* %115, align 8
  %117 = call i32 @llvm.uadd.sat.i32(i32 %113, i32 %116) #12
  store i32 %117, i32* %115, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #12
  %118 = add nuw nsw i64 %79, 1
  br label %78

119:                                              ; preds = %69, %135
  %120 = phi i64 [ %159, %135 ], [ 0, %69 ]
  %121 = load i64, i64* %71, align 8
  %122 = add i64 %121, 3
  %123 = inttoptr i64 %122 to i32*
  %124 = load i32, i32* %123, align 4
  %125 = icmp ult i32 %124, 2
  br i1 %125, label %131, label %126

126:                                              ; preds = %119
  %127 = add i64 %121, 7
  %128 = inttoptr i64 %127 to i32*
  %129 = load atomic i32, i32* %128 monotonic, align 4
  %130 = ashr i32 %129, 1
  br label %131

131:                                              ; preds = %126, %119
  %132 = phi i32 [ %130, %126 ], [ 0, %119 ]
  %133 = sext i32 %132 to i64
  %134 = icmp slt i64 %120, %133
  br i1 %134, label %135, label %495

135:                                              ; preds = %131
  %136 = and i64 %121, -4294967296
  %137 = trunc i64 %120 to i32
  %138 = shl i32 %137, 2
  %139 = add i32 %138, 4
  %140 = sext i32 %139 to i64
  %141 = add i64 %121, 7
  %142 = add i64 %141, %140
  %143 = inttoptr i64 %142 to i32*
  %144 = load atomic i32, i32* %143 monotonic, align 4
  %145 = zext i32 %144 to i64
  %146 = or i64 %136, %145
  %147 = add i64 %146, 19
  %148 = inttoptr i64 %147 to i32*
  %149 = load i32, i32* %148, align 4
  %150 = zext i32 %149 to i64
  %151 = or i64 %136, %150
  %152 = add i64 %146, 7
  %153 = inttoptr i64 %152 to i32*
  %154 = load i32, i32* %153, align 4
  store i32 0, i32* %153, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %72) #12
  store i64 %151, i64* %73, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %75) #12
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %76) #12
  store %"class.v8::internal::SharedFunctionInfo"* %21, %"class.v8::internal::SharedFunctionInfo"** %77, align 8
  %155 = call %"struct.v8::base::TemplateHashMapEntry.1213"* @_ZN2v84base19TemplateHashMapImplINS_8internal18SharedFunctionInfoEjNS0_18KeyEqualityMatcherINS2_6ObjectEEENS0_23DefaultAllocationPolicyEE14LookupOrInsertIS3_ZNS8_14LookupOrInsertIZNS2_18SharedToCounterMap3AddES3_jEUlvE_EEPNS0_20TemplateHashMapEntryIS3_jEERKS3_jRKT_EUlvE_SC_EESF_SK_jRKT0_RKT1_(%"class.v8::base::TemplateHashMapImpl.1212"* nonnull %74, %"class.v8::internal::SharedFunctionInfo"* nonnull dereferenceable(8) %21, i32 %149, %class.anon.1264* nonnull dereferenceable(8) %20, %class.anon* nonnull dereferenceable(1) %22) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %76) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %75) #12
  %156 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %155, i64 0, i32 1
  %157 = load i32, i32* %156, align 8
  %158 = call i32 @llvm.uadd.sat.i32(i32 %154, i32 %157) #12
  store i32 %158, i32* %156, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #12
  %159 = add nuw nsw i64 %120, 1
  br label %119

160:                                              ; preds = %65
  %161 = bitcast %"class.v8::internal::HeapObjectIterator"* %30 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %161) #12
  %162 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 2
  call void @_ZN2v88internal18HeapObjectIteratorC1EPNS0_4HeapENS1_20HeapObjectsFilteringE(%"class.v8::internal::HeapObjectIterator"* nonnull %30, %"class.v8::internal::Heap"* %162, i32 0) #12
  %163 = call i64 @_ZN2v88internal18HeapObjectIterator4NextEv(%"class.v8::internal::HeapObjectIterator"* nonnull %30) #12
  %164 = trunc i64 %163 to i32
  %165 = icmp eq i32 %164, 0
  br i1 %165, label %175, label %166

166:                                              ; preds = %160
  %167 = bitcast %"class.v8::internal::Script"* %23 to i8*
  %168 = getelementptr inbounds %"class.v8::internal::Script", %"class.v8::internal::Script"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %169 = bitcast %"class.v8::internal::SharedFunctionInfo"* %25 to i8*
  %170 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %25, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %171 = getelementptr inbounds %"class.v8::internal::SharedToCounterMap", %"class.v8::internal::SharedToCounterMap"* %32, i64 0, i32 0
  %172 = getelementptr inbounds %class.anon, %class.anon* %26, i64 0, i32 0
  %173 = bitcast %class.anon.1264* %24 to i8*
  %174 = getelementptr inbounds %class.anon.1264, %class.anon.1264* %24, i64 0, i32 0
  br label %191

175:                                              ; preds = %432, %160
  %176 = bitcast %"class.v8::internal::JavaScriptFrameIterator"* %31 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1616, i8* nonnull %176) #12
  %177 = getelementptr inbounds %"class.v8::internal::JavaScriptFrameIterator", %"class.v8::internal::JavaScriptFrameIterator"* %31, i64 0, i32 0
  call void @_ZN2v88internal18StackFrameIteratorC1EPNS0_7IsolateE(%"class.v8::internal::StackFrameIterator"* nonnull %177, %"class.v8::internal::Isolate"* %0) #12
  %178 = getelementptr inbounds %"class.v8::internal::JavaScriptFrameIterator", %"class.v8::internal::JavaScriptFrameIterator"* %31, i64 0, i32 0, i32 0, i32 23
  %179 = load %"class.v8::internal::StackFrame"*, %"class.v8::internal::StackFrame"** %178, align 8
  %180 = icmp eq %"class.v8::internal::StackFrame"* %179, null
  br i1 %180, label %436, label %181

181:                                              ; preds = %175
  call void @_ZN2v88internal23JavaScriptFrameIterator7AdvanceEv(%"class.v8::internal::JavaScriptFrameIterator"* nonnull %31) #12
  %182 = load %"class.v8::internal::StackFrame"*, %"class.v8::internal::StackFrame"** %178, align 8
  %183 = icmp eq %"class.v8::internal::StackFrame"* %182, null
  br i1 %183, label %436, label %184

184:                                              ; preds = %181
  %185 = bitcast %"class.v8::internal::SharedFunctionInfo"* %28 to i8*
  %186 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %28, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %187 = getelementptr inbounds %"class.v8::internal::SharedToCounterMap", %"class.v8::internal::SharedToCounterMap"* %32, i64 0, i32 0
  %188 = getelementptr inbounds %class.anon, %class.anon* %29, i64 0, i32 0
  %189 = bitcast %class.anon.1264* %27 to i8*
  %190 = getelementptr inbounds %class.anon.1264, %class.anon.1264* %27, i64 0, i32 0
  br label %437

191:                                              ; preds = %432, %166
  %192 = phi i64 [ %163, %166 ], [ %433, %432 ]
  %193 = and i64 %192, -4294967296
  %194 = add i64 %192, -1
  %195 = inttoptr i64 %194 to i32*
  %196 = load atomic i32, i32* %195 monotonic, align 4
  %197 = zext i32 %196 to i64
  %198 = or i64 %193, %197
  %199 = add i64 %198, 7
  %200 = inttoptr i64 %199 to i16*
  %201 = load atomic i16, i16* %200 monotonic, align 2
  %202 = add i16 %201, -1059
  %203 = icmp ult i16 %202, 15
  br i1 %203, label %204, label %432

204:                                              ; preds = %191
  %205 = add i64 %192, 11
  %206 = inttoptr i64 %205 to i32*
  %207 = load atomic i32, i32* %206 monotonic, align 4
  %208 = zext i32 %207 to i64
  %209 = or i64 %193, %208
  %210 = add i64 %209, 3
  %211 = inttoptr i64 %210 to i32*
  %212 = load atomic i32, i32* %211 acquire, align 4
  %213 = zext i32 %212 to i64
  %214 = and i64 %213, 1
  %215 = icmp eq i64 %214, 0
  br i1 %215, label %227, label %216

216:                                              ; preds = %204
  %217 = or i64 %193, %213
  %218 = add i64 %217, -1
  %219 = inttoptr i64 %218 to i32*
  %220 = load atomic i32, i32* %219 monotonic, align 4
  %221 = zext i32 %220 to i64
  %222 = or i64 %193, %221
  %223 = add i64 %222, 7
  %224 = inttoptr i64 %223 to i16*
  %225 = load atomic i16, i16* %224 monotonic, align 2
  %226 = icmp eq i16 %225, 92
  br i1 %226, label %432, label %227

227:                                              ; preds = %216, %204
  %228 = add i64 %209, 15
  %229 = inttoptr i64 %228 to i32*
  %230 = load atomic i32, i32* %229 acquire, align 4
  %231 = zext i32 %230 to i64
  %232 = or i64 %193, %231
  %233 = add i64 %232, -1
  %234 = inttoptr i64 %233 to i32*
  %235 = load atomic i32, i32* %234 monotonic, align 4
  %236 = zext i32 %235 to i64
  %237 = or i64 %193, %236
  %238 = add i64 %237, 7
  %239 = inttoptr i64 %238 to i16*
  %240 = load atomic i16, i16* %239 monotonic, align 2
  %241 = icmp eq i16 %240, 100
  br i1 %241, label %242, label %248

242:                                              ; preds = %227
  %243 = add i64 %232, 11
  %244 = inttoptr i64 %243 to i32*
  %245 = load i32, i32* %244, align 4
  %246 = zext i32 %245 to i64
  %247 = or i64 %193, %246
  br label %248

248:                                              ; preds = %242, %227
  %249 = phi i64 [ %247, %242 ], [ %232, %227 ]
  %250 = and i64 %249, 1
  %251 = icmp eq i64 %250, 0
  br i1 %251, label %276, label %252

252:                                              ; preds = %248
  %253 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %254 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %253, null
  br i1 %254, label %261, label %255

255:                                              ; preds = %252
  %256 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %253, i64 0, i32 0, i32 1
  %257 = load i8, i8* %256, align 8, !range !2
  %258 = icmp eq i8 %257, 0
  br i1 %258, label %261, label %259

259:                                              ; preds = %255
  %260 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %253, i64 0, i32 1, i64 0
  br label %269

261:                                              ; preds = %255, %252
  %262 = and i64 %249, -262144
  %263 = or i64 %262, 16
  %264 = inttoptr i64 %263 to i64*
  %265 = load i64, i64* %264, align 16
  %266 = add i64 %265, -41416
  %267 = inttoptr i64 %266 to %"class.v8::internal::Isolate"*
  %268 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %267, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %269

269:                                              ; preds = %261, %259
  %270 = phi i64* [ %268, %261 ], [ %260, %259 ]
  %271 = getelementptr inbounds i64, i64* %270, i64 4
  %272 = load i64, i64* %271, align 8
  %273 = trunc i64 %249 to i32
  %274 = trunc i64 %272 to i32
  %275 = icmp eq i32 %273, %274
  br i1 %275, label %432, label %276

276:                                              ; preds = %269, %248
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %167) #12
  store i64 %249, i64* %168, align 8
  %277 = call zeroext i1 @_ZNK2v88internal6Script16IsUserJavaScriptEv(%"class.v8::internal::Script"* nonnull %23) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %167) #12
  br i1 %277, label %278, label %432

278:                                              ; preds = %276
  %279 = load atomic i32, i32* %206 monotonic, align 4
  %280 = zext i32 %279 to i64
  %281 = or i64 %193, %280
  %282 = add i64 %281, 3
  %283 = inttoptr i64 %282 to i32*
  %284 = load atomic i32, i32* %283 acquire, align 4
  %285 = zext i32 %284 to i64
  %286 = or i64 %193, %285
  %287 = icmp eq i32 %284, 170
  br i1 %287, label %322, label %288

288:                                              ; preds = %278
  %289 = and i64 %285, 1
  %290 = icmp eq i64 %289, 0
  br i1 %290, label %302, label %291

291:                                              ; preds = %288
  %292 = add i64 %286, -1
  %293 = inttoptr i64 %292 to i32*
  %294 = load atomic i32, i32* %293 monotonic, align 4
  %295 = zext i32 %294 to i64
  %296 = or i64 %193, %295
  %297 = add i64 %296, 7
  %298 = inttoptr i64 %297 to i16*
  %299 = load atomic i16, i16* %298 monotonic, align 2
  %300 = add i16 %299, -157
  %301 = icmp ugt i16 %300, 1
  br i1 %301, label %302, label %322

302:                                              ; preds = %291, %288
  %303 = add i64 %192, 19
  %304 = inttoptr i64 %303 to i32*
  %305 = load i32, i32* %304, align 4
  %306 = zext i32 %305 to i64
  %307 = or i64 %193, %306
  %308 = add i64 %307, 3
  %309 = inttoptr i64 %308 to i32*
  %310 = load i32, i32* %309, align 4
  %311 = zext i32 %310 to i64
  %312 = or i64 %193, %311
  %313 = add i64 %312, -1
  %314 = inttoptr i64 %313 to i32*
  %315 = load atomic i32, i32* %314 monotonic, align 4
  %316 = zext i32 %315 to i64
  %317 = or i64 %193, %316
  %318 = add i64 %317, 7
  %319 = inttoptr i64 %318 to i16*
  %320 = load atomic i16, i16* %319 monotonic, align 2
  %321 = icmp eq i16 %320, 167
  br i1 %321, label %366, label %322

322:                                              ; preds = %302, %291, %278
  %323 = load atomic i32, i32* %206 monotonic, align 4
  %324 = zext i32 %323 to i64
  %325 = or i64 %193, %324
  %326 = add i64 %325, 3
  %327 = inttoptr i64 %326 to i32*
  %328 = load atomic i32, i32* %327 acquire, align 4
  %329 = zext i32 %328 to i64
  %330 = or i64 %193, %329
  %331 = icmp eq i32 %328, 170
  br i1 %331, label %432, label %332

332:                                              ; preds = %322
  %333 = and i64 %329, 1
  %334 = icmp eq i64 %333, 0
  br i1 %334, label %346, label %335

335:                                              ; preds = %332
  %336 = add i64 %330, -1
  %337 = inttoptr i64 %336 to i32*
  %338 = load atomic i32, i32* %337 monotonic, align 4
  %339 = zext i32 %338 to i64
  %340 = or i64 %193, %339
  %341 = add i64 %340, 7
  %342 = inttoptr i64 %341 to i16*
  %343 = load atomic i16, i16* %342 monotonic, align 2
  %344 = add i16 %343, -157
  %345 = icmp ugt i16 %344, 1
  br i1 %345, label %346, label %432

346:                                              ; preds = %335, %332
  %347 = add i64 %192, 19
  %348 = inttoptr i64 %347 to i32*
  %349 = load i32, i32* %348, align 4
  %350 = zext i32 %349 to i64
  %351 = or i64 %193, %350
  %352 = add i64 %351, 3
  %353 = inttoptr i64 %352 to i32*
  %354 = load i32, i32* %353, align 4
  %355 = zext i32 %354 to i64
  %356 = or i64 %193, %355
  %357 = add i64 %356, -1
  %358 = inttoptr i64 %357 to i32*
  %359 = load atomic i32, i32* %358 monotonic, align 4
  %360 = zext i32 %359 to i64
  %361 = or i64 %193, %360
  %362 = add i64 %361, 7
  %363 = inttoptr i64 %362 to i16*
  %364 = load atomic i16, i16* %363 monotonic, align 2
  %365 = icmp eq i16 %364, 129
  br i1 %365, label %366, label %432

366:                                              ; preds = %346, %302
  %367 = load atomic i32, i32* %206 monotonic, align 4
  %368 = zext i32 %367 to i64
  %369 = or i64 %193, %368
  %370 = add i64 %369, 3
  %371 = inttoptr i64 %370 to i32*
  %372 = load atomic i32, i32* %371 acquire, align 4
  %373 = zext i32 %372 to i64
  %374 = or i64 %193, %373
  %375 = icmp eq i32 %372, 170
  br i1 %375, label %414, label %376

376:                                              ; preds = %366
  %377 = and i64 %373, 1
  %378 = icmp eq i64 %377, 0
  br i1 %378, label %390, label %379

379:                                              ; preds = %376
  %380 = add i64 %374, -1
  %381 = inttoptr i64 %380 to i32*
  %382 = load atomic i32, i32* %381 monotonic, align 4
  %383 = zext i32 %382 to i64
  %384 = or i64 %193, %383
  %385 = add i64 %384, 7
  %386 = inttoptr i64 %385 to i16*
  %387 = load atomic i16, i16* %386 monotonic, align 2
  %388 = add i16 %387, -157
  %389 = icmp ugt i16 %388, 1
  br i1 %389, label %390, label %414

390:                                              ; preds = %379, %376
  %391 = add i64 %192, 19
  %392 = inttoptr i64 %391 to i32*
  %393 = load i32, i32* %392, align 4
  %394 = zext i32 %393 to i64
  %395 = or i64 %193, %394
  %396 = add i64 %395, 3
  %397 = inttoptr i64 %396 to i32*
  %398 = load i32, i32* %397, align 4
  %399 = zext i32 %398 to i64
  %400 = or i64 %193, %399
  %401 = add i64 %400, -1
  %402 = inttoptr i64 %401 to i32*
  %403 = load atomic i32, i32* %402 monotonic, align 4
  %404 = zext i32 %403 to i64
  %405 = or i64 %193, %404
  %406 = add i64 %405, 7
  %407 = inttoptr i64 %406 to i16*
  %408 = load atomic i16, i16* %407 monotonic, align 2
  %409 = icmp eq i16 %408, 167
  br i1 %409, label %410, label %414

410:                                              ; preds = %390
  %411 = add i64 %400, 7
  %412 = inttoptr i64 %411 to i32*
  %413 = load i32, i32* %412, align 4
  br label %426

414:                                              ; preds = %390, %379, %366
  %415 = add i64 %192, 19
  %416 = inttoptr i64 %415 to i32*
  %417 = load i32, i32* %416, align 4
  %418 = zext i32 %417 to i64
  %419 = or i64 %193, %418
  %420 = add i64 %419, 7
  %421 = inttoptr i64 %420 to i32*
  %422 = load i32, i32* %421, align 4
  %423 = load i32, i32* @_ZN2v88internal42FLAG_budget_for_feedback_vector_allocationE, align 4
  %424 = icmp slt i32 %422, %423
  %425 = zext i1 %424 to i32
  br label %426

426:                                              ; preds = %414, %410
  %427 = phi i32 [ %413, %410 ], [ %425, %414 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %169) #12
  store i64 %209, i64* %170, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %172) #12
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %173) #12
  store %"class.v8::internal::SharedFunctionInfo"* %25, %"class.v8::internal::SharedFunctionInfo"** %174, align 8
  %428 = call %"struct.v8::base::TemplateHashMapEntry.1213"* @_ZN2v84base19TemplateHashMapImplINS_8internal18SharedFunctionInfoEjNS0_18KeyEqualityMatcherINS2_6ObjectEEENS0_23DefaultAllocationPolicyEE14LookupOrInsertIS3_ZNS8_14LookupOrInsertIZNS2_18SharedToCounterMap3AddES3_jEUlvE_EEPNS0_20TemplateHashMapEntryIS3_jEERKS3_jRKT_EUlvE_SC_EESF_SK_jRKT0_RKT1_(%"class.v8::base::TemplateHashMapImpl.1212"* nonnull %171, %"class.v8::internal::SharedFunctionInfo"* nonnull dereferenceable(8) %25, i32 %207, %class.anon.1264* nonnull dereferenceable(8) %24, %class.anon* nonnull dereferenceable(1) %26) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %173) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %172) #12
  %429 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %428, i64 0, i32 1
  %430 = load i32, i32* %429, align 8
  %431 = call i32 @llvm.uadd.sat.i32(i32 %427, i32 %430) #12
  store i32 %431, i32* %429, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %169) #12
  br label %432

432:                                              ; preds = %426, %346, %335, %322, %276, %269, %216, %191
  %433 = call i64 @_ZN2v88internal18HeapObjectIterator4NextEv(%"class.v8::internal::HeapObjectIterator"* nonnull %30) #12
  %434 = trunc i64 %433 to i32
  %435 = icmp eq i32 %434, 0
  br i1 %435, label %175, label %191

436:                                              ; preds = %492, %181, %175
  call void @llvm.lifetime.end.p0i8(i64 1616, i8* nonnull %176) #12
  call void @_ZN2v88internal18HeapObjectIteratorD1Ev(%"class.v8::internal::HeapObjectIterator"* nonnull %30) #12
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %161) #12
  br label %495

437:                                              ; preds = %492, %184
  %438 = phi %"class.v8::internal::StackFrame"* [ %182, %184 ], [ %493, %492 ]
  %439 = bitcast %"class.v8::internal::StackFrame"* %438 to %"class.v8::internal::JavaScriptFrame"*
  %440 = bitcast %"class.v8::internal::StackFrame"* %438 to i64 (%"class.v8::internal::JavaScriptFrame"*)***
  %441 = load i64 (%"class.v8::internal::JavaScriptFrame"*)**, i64 (%"class.v8::internal::JavaScriptFrame"*)*** %440, align 8
  %442 = getelementptr inbounds i64 (%"class.v8::internal::JavaScriptFrame"*)*, i64 (%"class.v8::internal::JavaScriptFrame"*)** %441, i64 13
  %443 = load i64 (%"class.v8::internal::JavaScriptFrame"*)*, i64 (%"class.v8::internal::JavaScriptFrame"*)** %442, align 8
  %444 = call i64 %443(%"class.v8::internal::JavaScriptFrame"* %439) #12
  %445 = add i64 %444, 11
  %446 = inttoptr i64 %445 to i32*
  %447 = load atomic i32, i32* %446 monotonic, align 4
  %448 = and i64 %444, -4294967296
  %449 = zext i32 %447 to i64
  %450 = or i64 %448, %449
  %451 = load i32, i32* %43, align 8
  %452 = add i32 %451, -1
  %453 = and i32 %452, %447
  %454 = zext i32 %453 to i64
  %455 = load %"struct.v8::base::TemplateHashMapEntry.1213"*, %"struct.v8::base::TemplateHashMapEntry.1213"** %46, align 8
  %456 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %455, i64 %454
  %457 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %455, i64 %454, i32 3
  %458 = load i8, i8* %457, align 8, !range !2
  %459 = icmp eq i8 %458, 0
  br i1 %459, label %476, label %460

460:                                              ; preds = %437
  %461 = zext i32 %452 to i64
  br label %462

462:                                              ; preds = %469, %460
  %463 = phi %"struct.v8::base::TemplateHashMapEntry.1213"* [ %456, %460 ], [ %472, %469 ]
  %464 = phi i64 [ %454, %460 ], [ %471, %469 ]
  %465 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %463, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %466 = load i64, i64* %465, align 8
  %467 = trunc i64 %466 to i32
  %468 = icmp eq i32 %447, %467
  br i1 %468, label %476, label %469

469:                                              ; preds = %462
  %470 = add nuw nsw i64 %464, 1
  %471 = and i64 %470, %461
  %472 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %455, i64 %471
  %473 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %455, i64 %471, i32 3
  %474 = load i8, i8* %473, align 8, !range !2
  %475 = icmp eq i8 %474, 0
  br i1 %475, label %476, label %462

476:                                              ; preds = %469, %462, %437
  %477 = phi %"struct.v8::base::TemplateHashMapEntry.1213"* [ %456, %437 ], [ %472, %469 ], [ %463, %462 ]
  %478 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %477, i64 0, i32 3
  %479 = load i8, i8* %478, align 8, !range !2
  %480 = icmp eq i8 %479, 0
  %481 = icmp eq %"struct.v8::base::TemplateHashMapEntry.1213"* %477, null
  %482 = or i1 %481, %480
  br i1 %482, label %487, label %483

483:                                              ; preds = %476
  %484 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %477, i64 0, i32 1
  %485 = load i32, i32* %484, align 8
  %486 = icmp eq i32 %485, 0
  br i1 %486, label %487, label %492

487:                                              ; preds = %483, %476
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #12
  store i64 %450, i64* %186, align 8
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %188) #12
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %189) #12
  store %"class.v8::internal::SharedFunctionInfo"* %28, %"class.v8::internal::SharedFunctionInfo"** %190, align 8
  %488 = call %"struct.v8::base::TemplateHashMapEntry.1213"* @_ZN2v84base19TemplateHashMapImplINS_8internal18SharedFunctionInfoEjNS0_18KeyEqualityMatcherINS2_6ObjectEEENS0_23DefaultAllocationPolicyEE14LookupOrInsertIS3_ZNS8_14LookupOrInsertIZNS2_18SharedToCounterMap3AddES3_jEUlvE_EEPNS0_20TemplateHashMapEntryIS3_jEERKS3_jRKT_EUlvE_SC_EESF_SK_jRKT0_RKT1_(%"class.v8::base::TemplateHashMapImpl.1212"* nonnull %187, %"class.v8::internal::SharedFunctionInfo"* nonnull dereferenceable(8) %28, i32 %447, %class.anon.1264* nonnull dereferenceable(8) %27, %class.anon* nonnull dereferenceable(1) %29) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %189) #12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %188) #12
  %489 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %488, i64 0, i32 1
  %490 = load i32, i32* %489, align 8
  %491 = call i32 @llvm.uadd.sat.i32(i32 %490, i32 1) #12
  store i32 %491, i32* %489, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #12
  br label %492

492:                                              ; preds = %487, %483
  call void @_ZN2v88internal23JavaScriptFrameIterator7AdvanceEv(%"class.v8::internal::JavaScriptFrameIterator"* nonnull %31) #12
  %493 = load %"class.v8::internal::StackFrame"*, %"class.v8::internal::StackFrame"** %178, align 8
  %494 = icmp eq %"class.v8::internal::StackFrame"* %493, null
  br i1 %494, label %436, label %437

495:                                              ; preds = %131, %90, %65, %436
  %496 = call i8* @_Znwm(i64 24) #14
  %497 = bitcast i8* %496 to %"class.v8::internal::Coverage"*
  %498 = bitcast %"class.std::__1::vector.1214"* %33 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %496, i8 0, i64 24, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %498) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %498, i8 0, i64 24, i1 false) #12
  %499 = bitcast %"class.v8::internal::Script::Iterator"* %34 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %499) #12
  call void @_ZN2v88internal6Script8IteratorC1EPNS0_7IsolateE(%"class.v8::internal::Script::Iterator"* nonnull %34, %"class.v8::internal::Isolate"* %0) #12
  %500 = bitcast %"class.v8::internal::Script"* %35 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %500) #12
  %501 = call i64 @_ZN2v88internal6Script8Iterator4NextEv(%"class.v8::internal::Script::Iterator"* nonnull %34) #12
  %502 = getelementptr inbounds %"class.v8::internal::Script", %"class.v8::internal::Script"* %35, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %501, i64* %502, align 8
  %503 = trunc i64 %501 to i32
  %504 = icmp eq i32 %503, 0
  br i1 %504, label %505, label %508

505:                                              ; preds = %495
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %500) #12
  %506 = getelementptr inbounds %"class.std::__1::vector.1214", %"class.std::__1::vector.1214"* %33, i64 0, i32 0, i32 0
  %507 = getelementptr inbounds %"class.std::__1::vector.1214", %"class.std::__1::vector.1214"* %33, i64 0, i32 0, i32 1
  br label %757

508:                                              ; preds = %495
  %509 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %510 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %511 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %512 = getelementptr inbounds %"class.std::__1::vector.1214", %"class.std::__1::vector.1214"* %33, i64 0, i32 0, i32 1
  %513 = getelementptr inbounds %"class.std::__1::vector.1214", %"class.std::__1::vector.1214"* %33, i64 0, i32 0, i32 2, i32 0, i32 0
  %514 = bitcast %"class.v8::internal::Handle"** %512 to i64*
  %515 = bitcast %"class.std::__1::vector.1214"* %33 to i64*
  %516 = bitcast %"class.v8::internal::Handle"** %513 to i64*
  %517 = getelementptr inbounds %"class.std::__1::vector.1214", %"class.std::__1::vector.1214"* %33, i64 0, i32 0, i32 0
  br label %679

518:                                              ; preds = %753
  %519 = load %"class.v8::internal::Handle"*, %"class.v8::internal::Handle"** %517, align 8
  %520 = load %"class.v8::internal::Handle"*, %"class.v8::internal::Handle"** %512, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %500) #12
  %521 = getelementptr inbounds %"class.std::__1::vector.1214", %"class.std::__1::vector.1214"* %33, i64 0, i32 0, i32 0
  %522 = getelementptr inbounds %"class.std::__1::vector.1214", %"class.std::__1::vector.1214"* %33, i64 0, i32 0, i32 1
  %523 = icmp eq %"class.v8::internal::Handle"* %519, %520
  br i1 %523, label %757, label %524

524:                                              ; preds = %518
  %525 = bitcast %"class.v8::internal::Handle"* %36 to i8*
  %526 = bitcast %"class.v8::internal::Handle"* %36 to i64*
  %527 = getelementptr inbounds i8, i8* %496, i64 8
  %528 = bitcast i8* %527 to %"struct.v8::internal::CoverageScript"**
  %529 = getelementptr inbounds i8, i8* %496, i64 16
  %530 = bitcast i8* %529 to %"struct.v8::internal::CoverageScript"**
  %531 = bitcast i8* %496 to %"class.std::__1::vector"*
  %532 = bitcast i8* %527 to i64*
  %533 = bitcast %"class.std::__1::vector.1221"* %37 to i8*
  %534 = bitcast %"class.v8::internal::SharedFunctionInfo::ScriptIterator"* %38 to i8*
  %535 = getelementptr inbounds %"class.v8::internal::Handle", %"class.v8::internal::Handle"* %36, i64 0, i32 0, i32 0
  %536 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %537 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %538 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %539 = getelementptr inbounds %"class.std::__1::vector.1221", %"class.std::__1::vector.1221"* %37, i64 0, i32 0, i32 1
  %540 = getelementptr inbounds %"class.std::__1::vector.1221", %"class.std::__1::vector.1221"* %37, i64 0, i32 0, i32 2, i32 0, i32 0
  %541 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"** %539 to i64*
  %542 = bitcast %"class.std::__1::vector.1221"* %37 to i64*
  %543 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"** %540 to i64*
  %544 = bitcast %"class.v8::internal::SharedFunctionInfo"* %18 to i8*
  %545 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %18, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %546 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %19 to i8*
  %547 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %19, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %548 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %19, i64 0, i32 0
  %549 = getelementptr inbounds %"class.std::__1::vector.1221", %"class.std::__1::vector.1221"* %37, i64 0, i32 0, i32 0
  %550 = bitcast %"class.v8::internal::SharedFunctionInfo"* %16 to i8*
  %551 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %16, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %552 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %17 to i8*
  %553 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %17, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %554 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %17, i64 0, i32 0
  %555 = bitcast %"class.std::__1::vector.119"* %39 to i8*
  %556 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %39, i64 0, i32 0, i32 0
  %557 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %39, i64 0, i32 0, i32 1
  %558 = bitcast %"struct.v8::internal::CoverageFunction"* %40 to i8*
  %559 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %40, i64 0, i32 0
  %560 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %40, i64 0, i32 1
  %561 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %40, i64 0, i32 2
  %562 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %40, i64 0, i32 4, i32 0, i32 0
  %563 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %40, i64 0, i32 5
  %564 = bitcast %"class.std::__1::vector.3"* %563 to i8*
  %565 = add i32 %1, -3
  %566 = icmp ult i32 %565, 2
  %567 = bitcast %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %41 to i8*
  %568 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %41, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %569 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef", %"class.v8::internal::Handle<v8::internal::SharedFunctionInfo>::ObjectRef"* %41, i64 0, i32 0
  %570 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %40, i64 0, i32 6
  %571 = bitcast %"class.std::__1::vector.3"* %14 to i8*
  %572 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %14, i64 0, i32 0, i32 1
  %573 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %14, i64 0, i32 0, i32 2, i32 0, i32 0
  %574 = bitcast %"struct.v8::internal::CoverageBlock"** %572 to i64*
  %575 = bitcast %"class.std::__1::vector.3"* %14 to i64*
  %576 = bitcast %"struct.v8::internal::CoverageBlock"** %573 to i64*
  %577 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %14, i64 0, i32 0, i32 0
  %578 = bitcast i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %12 to i8*
  %579 = getelementptr %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %563, i64 0, i32 0, i32 0
  %580 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %40, i64 0, i32 5, i32 0, i32 1
  %581 = bitcast %"struct.v8::internal::CoverageBlock"** %580 to i64*
  %582 = bitcast %"class.std::__1::vector.3"* %563 to i64*
  %583 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %40, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  %584 = bitcast %"struct.v8::internal::CoverageBlock"** %583 to i64*
  %585 = icmp eq i32 %1, 4
  %586 = bitcast %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %11 to i8*
  %587 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %11, i64 0, i32 0
  %588 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %11, i64 0, i32 1
  %589 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %11, i64 0, i32 5
  %590 = bitcast %"class.std::__1::vector.3"* %588 to i8*
  %591 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %11, i64 0, i32 6
  %592 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %11, i64 0, i32 1, i32 0, i32 0
  %593 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %11, i64 0, i32 1, i32 0, i32 1
  %594 = bitcast %"struct.v8::internal::CoverageBlock"** %593 to i64*
  %595 = bitcast %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %10 to i8*
  %596 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %10, i64 0, i32 0
  %597 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %10, i64 0, i32 1
  %598 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %10, i64 0, i32 5
  %599 = bitcast %"class.std::__1::vector.3"* %597 to i8*
  %600 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %10, i64 0, i32 6
  %601 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %10, i64 0, i32 3
  %602 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %10, i64 0, i32 1, i32 0, i32 0
  %603 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %10, i64 0, i32 1, i32 0, i32 1
  %604 = bitcast %"struct.v8::internal::CoverageBlock"** %603 to i64*
  %605 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %40, i64 0, i32 5, i32 0, i32 0
  %606 = bitcast %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %9 to i8*
  %607 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %9, i64 0, i32 0
  %608 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %9, i64 0, i32 1
  %609 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %9, i64 0, i32 5
  %610 = bitcast %"class.std::__1::vector.3"* %608 to i8*
  %611 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %9, i64 0, i32 6
  %612 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %9, i64 0, i32 3
  %613 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %9, i64 0, i32 1, i32 0, i32 0
  %614 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %9, i64 0, i32 1, i32 0, i32 1
  %615 = bitcast %"struct.v8::internal::CoverageBlock"** %614 to i64*
  %616 = bitcast %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %8 to i8*
  %617 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %8, i64 0, i32 0
  %618 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %8, i64 0, i32 1
  %619 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %8, i64 0, i32 5
  %620 = bitcast %"class.std::__1::vector.3"* %618 to i8*
  %621 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %8, i64 0, i32 6
  %622 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %8, i64 0, i32 1, i32 0, i32 1
  %623 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %8, i64 0, i32 3
  %624 = bitcast %"class.std::__1::vector.3"* %618 to i64*
  %625 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %8, i64 0, i32 1, i32 0, i32 0
  %626 = bitcast %"struct.v8::internal::CoverageBlock"** %622 to i64*
  %627 = bitcast i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %7 to i8*
  %628 = bitcast %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %6 to i8*
  %629 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %6, i64 0, i32 0
  %630 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %6, i64 0, i32 1
  %631 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %6, i64 0, i32 5
  %632 = bitcast %"class.std::__1::vector.3"* %630 to i8*
  %633 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %6, i64 0, i32 6
  %634 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %6, i64 0, i32 3
  %635 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %6, i64 0, i32 1, i32 0, i32 0
  %636 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %6, i64 0, i32 1, i32 0, i32 1
  %637 = bitcast %"struct.v8::internal::CoverageBlock"** %636 to i64*
  %638 = bitcast %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %5 to i8*
  %639 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %5, i64 0, i32 0
  %640 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %5, i64 0, i32 1
  %641 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %5, i64 0, i32 5
  %642 = bitcast %"class.std::__1::vector.3"* %640 to i8*
  %643 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %5, i64 0, i32 6
  %644 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %5, i64 0, i32 1, i32 0, i32 1
  %645 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %5, i64 0, i32 3
  %646 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %5, i64 0, i32 1, i32 0, i32 0
  %647 = bitcast %"struct.v8::internal::CoverageBlock"** %644 to i64*
  %648 = bitcast %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %4 to i8*
  %649 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %4, i64 0, i32 0
  %650 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %4, i64 0, i32 1
  %651 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %4, i64 0, i32 5
  %652 = bitcast %"class.std::__1::vector.3"* %650 to i8*
  %653 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %4, i64 0, i32 6
  %654 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %4, i64 0, i32 1, i32 0, i32 1
  %655 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %4, i64 0, i32 3
  %656 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %4, i64 0, i32 1, i32 0, i32 0
  %657 = bitcast %"struct.v8::internal::CoverageBlock"** %654 to i64*
  %658 = bitcast %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %13 to i8*
  %659 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %13, i64 0, i32 0
  %660 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %13, i64 0, i32 1
  %661 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %13, i64 0, i32 5
  %662 = bitcast %"class.std::__1::vector.3"* %660 to i8*
  %663 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %13, i64 0, i32 6
  %664 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %13, i64 0, i32 3
  %665 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %13, i64 0, i32 1, i32 0, i32 0
  %666 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %13, i64 0, i32 1, i32 0, i32 1
  %667 = bitcast %"struct.v8::internal::CoverageBlock"** %666 to i64*
  %668 = bitcast %"class.v8::internal::CoverageInfo"* %3 to i8*
  %669 = getelementptr inbounds %"class.v8::internal::CoverageInfo", %"class.v8::internal::CoverageInfo"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %670 = getelementptr inbounds %"class.std::__1::vector.119", %"class.std::__1::vector.119"* %39, i64 0, i32 0, i32 2, i32 0, i32 0
  %671 = bitcast %"class.std::__1::vector.119"* %39 to i64*
  %672 = bitcast i64** %670 to i64*
  %673 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %15 to i8*
  %674 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %15, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %675 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %15, i64 0, i32 0
  %676 = bitcast i64** %557 to i64*
  %677 = bitcast %"class.std::__1::vector.3"* %14 to <2 x i64>*
  %678 = bitcast %"class.std::__1::vector.3"* %563 to <2 x i64>*
  br label %772

679:                                              ; preds = %508, %753
  %680 = call zeroext i1 @_ZNK2v88internal6Script16IsUserJavaScriptEv(%"class.v8::internal::Script"* nonnull %35) #12
  br i1 %680, label %681, label %753

681:                                              ; preds = %679
  %682 = load i64, i64* %502, align 8
  %683 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %509, align 8
  %684 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %683, null
  br i1 %684, label %688, label %685

685:                                              ; preds = %681
  %686 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %683, i64 %682) #12
  %687 = ptrtoint i64* %686 to i64
  br label %699

688:                                              ; preds = %681
  %689 = load i64*, i64** %510, align 8
  %690 = load i64*, i64** %511, align 8
  %691 = icmp eq i64* %689, %690
  br i1 %691, label %692, label %694

692:                                              ; preds = %688
  %693 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #12
  br label %694

694:                                              ; preds = %692, %688
  %695 = phi i64* [ %693, %692 ], [ %689, %688 ]
  %696 = ptrtoint i64* %695 to i64
  %697 = add i64 %696, 8
  %698 = inttoptr i64 %697 to i64*
  store i64* %698, i64** %510, align 8
  store i64 %682, i64* %695, align 8
  br label %699

699:                                              ; preds = %685, %694
  %700 = phi i64 [ %687, %685 ], [ %696, %694 ]
  %701 = load %"class.v8::internal::Handle"*, %"class.v8::internal::Handle"** %512, align 8
  %702 = load %"class.v8::internal::Handle"*, %"class.v8::internal::Handle"** %513, align 8
  %703 = icmp ult %"class.v8::internal::Handle"* %701, %702
  %704 = ptrtoint %"class.v8::internal::Handle"* %702 to i64
  br i1 %703, label %705, label %709

705:                                              ; preds = %699
  %706 = bitcast %"class.v8::internal::Handle"* %701 to i64*
  store i64 %700, i64* %706, align 8
  %707 = getelementptr inbounds %"class.v8::internal::Handle", %"class.v8::internal::Handle"* %701, i64 1
  %708 = ptrtoint %"class.v8::internal::Handle"* %707 to i64
  store i64 %708, i64* %514, align 8
  br label %753

709:                                              ; preds = %699
  %710 = ptrtoint %"class.v8::internal::Handle"* %701 to i64
  %711 = load i64, i64* %515, align 8
  %712 = sub i64 %710, %711
  %713 = ashr exact i64 %712, 3
  %714 = add nsw i64 %713, 1
  %715 = icmp ugt i64 %714, 2305843009213693951
  br i1 %715, label %716, label %718

716:                                              ; preds = %709
  %717 = bitcast %"class.std::__1::vector.1214"* %33 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %717) #13
  unreachable

718:                                              ; preds = %709
  %719 = sub i64 %704, %711
  %720 = ashr exact i64 %719, 3
  %721 = icmp ult i64 %720, 1152921504606846975
  br i1 %721, label %722, label %730

722:                                              ; preds = %718
  %723 = ashr exact i64 %719, 2
  %724 = icmp ult i64 %723, %714
  %725 = select i1 %724, i64 %714, i64 %723
  %726 = icmp eq i64 %725, 0
  br i1 %726, label %735, label %727

727:                                              ; preds = %722
  %728 = icmp ugt i64 %725, 2305843009213693951
  br i1 %728, label %729, label %730

729:                                              ; preds = %727
  call void @abort() #13
  unreachable

730:                                              ; preds = %727, %718
  %731 = phi i64 [ %725, %727 ], [ 2305843009213693951, %718 ]
  %732 = shl i64 %731, 3
  %733 = call i8* @_Znwm(i64 %732) #14
  %734 = bitcast i8* %733 to %"class.v8::internal::Handle"*
  br label %735

735:                                              ; preds = %730, %722
  %736 = phi i64 [ %731, %730 ], [ 0, %722 ]
  %737 = phi i8* [ %733, %730 ], [ null, %722 ]
  %738 = phi %"class.v8::internal::Handle"* [ %734, %730 ], [ null, %722 ]
  %739 = getelementptr inbounds %"class.v8::internal::Handle", %"class.v8::internal::Handle"* %738, i64 %713
  %740 = getelementptr inbounds %"class.v8::internal::Handle", %"class.v8::internal::Handle"* %738, i64 %736
  %741 = ptrtoint %"class.v8::internal::Handle"* %740 to i64
  %742 = bitcast %"class.v8::internal::Handle"* %739 to i64*
  store i64 %700, i64* %742, align 8
  %743 = getelementptr inbounds %"class.v8::internal::Handle", %"class.v8::internal::Handle"* %739, i64 1
  %744 = ptrtoint %"class.v8::internal::Handle"* %743 to i64
  %745 = ptrtoint %"class.v8::internal::Handle"* %738 to i64
  %746 = icmp sgt i64 %712, 0
  br i1 %746, label %747, label %749

747:                                              ; preds = %735
  %748 = inttoptr i64 %711 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %737, i8* align 8 %748, i64 %712, i1 false) #12
  br label %749

749:                                              ; preds = %747, %735
  store i64 %745, i64* %515, align 8
  store i64 %744, i64* %514, align 8
  store i64 %741, i64* %516, align 8
  %750 = icmp eq i64 %711, 0
  br i1 %750, label %753, label %751

751:                                              ; preds = %749
  %752 = inttoptr i64 %711 to i8*
  call void @_ZdlPv(i8* %752) #14
  br label %753

753:                                              ; preds = %751, %749, %705, %679
  %754 = call i64 @_ZN2v88internal6Script8Iterator4NextEv(%"class.v8::internal::Script::Iterator"* nonnull %34) #12
  store i64 %754, i64* %502, align 8
  %755 = trunc i64 %754 to i32
  %756 = icmp eq i32 %755, 0
  br i1 %756, label %518, label %679

757:                                              ; preds = %1837, %505, %518
  %758 = phi %"class.v8::internal::Handle"** [ %507, %505 ], [ %522, %518 ], [ %522, %1837 ]
  %759 = phi %"class.v8::internal::Handle"** [ %506, %505 ], [ %521, %518 ], [ %521, %1837 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %499) #12
  %760 = load %"class.v8::internal::Handle"*, %"class.v8::internal::Handle"** %759, align 8
  %761 = icmp eq %"class.v8::internal::Handle"* %760, null
  br i1 %761, label %766, label %762

762:                                              ; preds = %757
  %763 = ptrtoint %"class.v8::internal::Handle"* %760 to i64
  %764 = bitcast %"class.v8::internal::Handle"** %758 to i64*
  store i64 %763, i64* %764, align 8
  %765 = bitcast %"class.v8::internal::Handle"* %760 to i8*
  call void @_ZdlPv(i8* %765) #14
  br label %766

766:                                              ; preds = %757, %762
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %498) #12
  %767 = load %"struct.v8::base::TemplateHashMapEntry.1213"*, %"struct.v8::base::TemplateHashMapEntry.1213"** %46, align 8
  %768 = icmp eq %"struct.v8::base::TemplateHashMapEntry.1213"* %767, null
  br i1 %768, label %771, label %769

769:                                              ; preds = %766
  %770 = bitcast %"struct.v8::base::TemplateHashMapEntry.1213"* %767 to i8*
  call void @free(i8* %770) #12
  br label %771

771:                                              ; preds = %766, %769
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %42) #12
  ret %"class.v8::internal::Coverage"* %497

772:                                              ; preds = %524, %1837
  %773 = phi %"class.v8::internal::Handle"* [ %519, %524 ], [ %1838, %1837 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %525) #12
  %774 = bitcast %"class.v8::internal::Handle"* %773 to i64*
  %775 = load i64, i64* %774, align 8
  store i64 %775, i64* %526, align 8
  %776 = load %"struct.v8::internal::CoverageScript"*, %"struct.v8::internal::CoverageScript"** %528, align 8
  %777 = load %"struct.v8::internal::CoverageScript"*, %"struct.v8::internal::CoverageScript"** %530, align 8
  %778 = icmp ult %"struct.v8::internal::CoverageScript"* %776, %777
  br i1 %778, label %779, label %785

779:                                              ; preds = %772
  %780 = bitcast %"struct.v8::internal::CoverageScript"* %776 to i64*
  store i64 %775, i64* %780, align 8
  %781 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %776, i64 0, i32 1
  %782 = bitcast %"class.std::__1::vector.0"* %781 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %782, i8 0, i64 24, i1 false) #12
  %783 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %776, i64 1
  %784 = ptrtoint %"struct.v8::internal::CoverageScript"* %783 to i64
  store i64 %784, i64* %532, align 8
  br label %787

785:                                              ; preds = %772
  call void @_ZNSt3__16vectorIN2v88internal14CoverageScriptENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRNS2_6HandleINS2_6ScriptEEEEEEvDpOT_(%"class.std::__1::vector"* nonnull %531, %"class.v8::internal::Handle"* nonnull dereferenceable(8) %36) #12
  %786 = load %"struct.v8::internal::CoverageScript"*, %"struct.v8::internal::CoverageScript"** %528, align 8
  br label %787

787:                                              ; preds = %779, %785
  %788 = phi %"struct.v8::internal::CoverageScript"* [ %783, %779 ], [ %786, %785 ]
  %789 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %788, i64 -1, i32 1
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %533) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %533, i8 0, i64 24, i1 false) #12
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %534) #12
  %790 = load i64*, i64** %535, align 8
  %791 = load i64, i64* %790, align 8
  call void @_ZN2v88internal18SharedFunctionInfo14ScriptIteratorC1EPNS0_7IsolateENS0_6ScriptE(%"class.v8::internal::SharedFunctionInfo::ScriptIterator"* nonnull %38, %"class.v8::internal::Isolate"* %0, i64 %791) #12
  %792 = call i64 @_ZN2v88internal18SharedFunctionInfo14ScriptIterator4NextEv(%"class.v8::internal::SharedFunctionInfo::ScriptIterator"* nonnull %38) #12
  %793 = trunc i64 %792 to i32
  %794 = icmp eq i32 %793, 0
  br i1 %794, label %798, label %809

795:                                              ; preds = %961
  %796 = load %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"*, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"** %549, align 8
  %797 = load %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"*, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"** %539, align 8
  br label %798

798:                                              ; preds = %795, %787
  %799 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %797, %795 ], [ null, %787 ]
  %800 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %796, %795 ], [ null, %787 ]
  call fastcc void @_ZNSt3__16__sortIRNS_6__lessIN2v88internal12_GLOBAL__N_126SharedFunctionInfoAndCountES5_EEPS5_EEvT0_S9_T_(%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %800, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %799) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %534) #12
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %555) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %555, i8 0, i64 24, i1 false) #12
  %801 = load %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"*, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"** %549, align 8
  %802 = load %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"*, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"** %539, align 8
  %803 = icmp eq %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %801, %802
  br i1 %803, label %965, label %804

804:                                              ; preds = %798
  %805 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %788, i64 -1, i32 1, i32 0, i32 1
  %806 = bitcast %"struct.v8::internal::CoverageFunction"** %805 to i64*
  %807 = bitcast %"class.std::__1::vector.0"* %789 to i64*
  %808 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %788, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  br label %971

809:                                              ; preds = %787, %961
  %810 = phi i32 [ %963, %961 ], [ %793, %787 ]
  %811 = phi i64 [ %962, %961 ], [ %792, %787 ]
  %812 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %536, align 8
  %813 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %812, null
  br i1 %813, label %816, label %814

814:                                              ; preds = %809
  %815 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %812, i64 %811) #12
  br label %827

816:                                              ; preds = %809
  %817 = load i64*, i64** %537, align 8
  %818 = load i64*, i64** %538, align 8
  %819 = icmp eq i64* %817, %818
  br i1 %819, label %820, label %822

820:                                              ; preds = %816
  %821 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #12
  br label %822

822:                                              ; preds = %820, %816
  %823 = phi i64* [ %821, %820 ], [ %817, %816 ]
  %824 = ptrtoint i64* %823 to i64
  %825 = add i64 %824, 8
  %826 = inttoptr i64 %825 to i64*
  store i64* %826, i64** %537, align 8
  store i64 %811, i64* %823, align 8
  br label %827

827:                                              ; preds = %814, %822
  %828 = phi i64* [ %815, %814 ], [ %823, %822 ]
  %829 = load i32, i32* %43, align 8
  %830 = add i32 %829, -1
  %831 = and i32 %830, %810
  %832 = zext i32 %831 to i64
  %833 = load %"struct.v8::base::TemplateHashMapEntry.1213"*, %"struct.v8::base::TemplateHashMapEntry.1213"** %46, align 8
  %834 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %833, i64 %832
  %835 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %833, i64 %832, i32 3
  %836 = load i8, i8* %835, align 8, !range !2
  %837 = icmp eq i8 %836, 0
  br i1 %837, label %854, label %838

838:                                              ; preds = %827
  %839 = zext i32 %830 to i64
  br label %840

840:                                              ; preds = %847, %838
  %841 = phi %"struct.v8::base::TemplateHashMapEntry.1213"* [ %834, %838 ], [ %850, %847 ]
  %842 = phi i64 [ %832, %838 ], [ %849, %847 ]
  %843 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %841, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %844 = load i64, i64* %843, align 8
  %845 = trunc i64 %844 to i32
  %846 = icmp eq i32 %810, %845
  br i1 %846, label %854, label %847

847:                                              ; preds = %840
  %848 = add nuw nsw i64 %842, 1
  %849 = and i64 %848, %839
  %850 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %833, i64 %849
  %851 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %833, i64 %849, i32 3
  %852 = load i8, i8* %851, align 8, !range !2
  %853 = icmp eq i8 %852, 0
  br i1 %853, label %854, label %840

854:                                              ; preds = %847, %840, %827
  %855 = phi %"struct.v8::base::TemplateHashMapEntry.1213"* [ %834, %827 ], [ %841, %840 ], [ %850, %847 ]
  %856 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %855, i64 0, i32 3
  %857 = load i8, i8* %856, align 8, !range !2
  %858 = icmp eq i8 %857, 0
  %859 = icmp eq %"struct.v8::base::TemplateHashMapEntry.1213"* %855, null
  %860 = or i1 %859, %858
  br i1 %860, label %864, label %861

861:                                              ; preds = %854
  %862 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %855, i64 0, i32 1
  %863 = load i32, i32* %862, align 8
  br label %864

864:                                              ; preds = %854, %861
  %865 = phi i32 [ %863, %861 ], [ 0, %854 ]
  %866 = load %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"*, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"** %539, align 8
  %867 = load %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"*, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"** %540, align 8
  %868 = icmp ult %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %866, %867
  %869 = ptrtoint %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %867 to i64
  br i1 %868, label %870, label %894

870:                                              ; preds = %864
  %871 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %866 to i64*
  %872 = ptrtoint i64* %828 to i64
  store i64 %872, i64* %871, align 8
  %873 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %866, i64 0, i32 1
  store i32 %865, i32* %873, align 8
  %874 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %866, i64 0, i32 2
  %875 = load i64, i64* %828, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %550) #12
  store i64 %875, i64* %551, align 8
  %876 = add i64 %875, 23
  %877 = inttoptr i64 %876 to i16*
  %878 = load i16, i16* %877, align 2
  %879 = icmp eq i16 %878, -1
  br i1 %879, label %885, label %880

880:                                              ; preds = %870
  %881 = zext i16 %878 to i32
  %882 = call i32 @_ZNK2v88internal18SharedFunctionInfo13StartPositionEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %16) #12
  %883 = sub nsw i32 %882, %881
  %884 = icmp eq i32 %883, -1
  br i1 %884, label %885, label %887

885:                                              ; preds = %880, %870
  %886 = call i32 @_ZNK2v88internal18SharedFunctionInfo13StartPositionEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %16) #12
  br label %887

887:                                              ; preds = %885, %880
  %888 = phi i32 [ %886, %885 ], [ %883, %880 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %550) #12
  store i32 %888, i32* %874, align 4
  %889 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %866, i64 0, i32 3
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %552) #12
  %890 = load i64, i64* %828, align 8
  store i64 %890, i64* %553, align 8
  %891 = call i32 @_ZNK2v88internal18SharedFunctionInfo11EndPositionEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %554) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %552) #12
  store i32 %891, i32* %889, align 8
  %892 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %866, i64 1
  %893 = ptrtoint %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %892 to i64
  store i64 %893, i64* %541, align 8
  br label %961

894:                                              ; preds = %864
  %895 = ptrtoint %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %866 to i64
  %896 = load i64, i64* %542, align 8
  %897 = sub i64 %895, %896
  %898 = sdiv exact i64 %897, 24
  %899 = add nsw i64 %898, 1
  %900 = icmp ugt i64 %899, 768614336404564650
  br i1 %900, label %901, label %903

901:                                              ; preds = %894
  %902 = bitcast %"class.std::__1::vector.1221"* %37 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %902) #13
  unreachable

903:                                              ; preds = %894
  %904 = sub i64 %869, %896
  %905 = sdiv exact i64 %904, 24
  %906 = icmp ult i64 %905, 384307168202282325
  br i1 %906, label %907, label %912

907:                                              ; preds = %903
  %908 = shl nsw i64 %905, 1
  %909 = icmp ult i64 %908, %899
  %910 = select i1 %909, i64 %899, i64 %908
  %911 = icmp eq i64 %910, 0
  br i1 %911, label %917, label %912

912:                                              ; preds = %907, %903
  %913 = phi i64 [ %910, %907 ], [ 768614336404564650, %903 ]
  %914 = mul i64 %913, 24
  %915 = call i8* @_Znwm(i64 %914) #14
  %916 = bitcast i8* %915 to %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"*
  br label %917

917:                                              ; preds = %912, %907
  %918 = phi i64 [ %913, %912 ], [ 0, %907 ]
  %919 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %916, %912 ], [ null, %907 ]
  %920 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %919, i64 %898
  %921 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %919, i64 %918
  %922 = ptrtoint %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %921 to i64
  %923 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %920 to i64*
  %924 = ptrtoint i64* %828 to i64
  store i64 %924, i64* %923, align 8
  %925 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %919, i64 %898, i32 1
  store i32 %865, i32* %925, align 8
  %926 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %919, i64 %898, i32 2
  %927 = load i64, i64* %828, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %544) #12
  store i64 %927, i64* %545, align 8
  %928 = add i64 %927, 23
  %929 = inttoptr i64 %928 to i16*
  %930 = load i16, i16* %929, align 2
  %931 = icmp eq i16 %930, -1
  br i1 %931, label %937, label %932

932:                                              ; preds = %917
  %933 = zext i16 %930 to i32
  %934 = call i32 @_ZNK2v88internal18SharedFunctionInfo13StartPositionEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %18) #12
  %935 = sub nsw i32 %934, %933
  %936 = icmp eq i32 %935, -1
  br i1 %936, label %937, label %939

937:                                              ; preds = %932, %917
  %938 = call i32 @_ZNK2v88internal18SharedFunctionInfo13StartPositionEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %18) #12
  br label %939

939:                                              ; preds = %937, %932
  %940 = phi i32 [ %938, %937 ], [ %935, %932 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %544) #12
  store i32 %940, i32* %926, align 4
  %941 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %919, i64 %898, i32 3
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %546) #12
  %942 = load i64, i64* %828, align 8
  store i64 %942, i64* %547, align 8
  %943 = call i32 @_ZNK2v88internal18SharedFunctionInfo11EndPositionEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %548) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %546) #12
  store i32 %943, i32* %941, align 8
  %944 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %920, i64 1
  %945 = ptrtoint %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %944 to i64
  %946 = load %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"*, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"** %549, align 8
  %947 = load i64, i64* %541, align 8
  %948 = ptrtoint %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %946 to i64
  %949 = sub i64 %947, %948
  %950 = sdiv exact i64 %949, -24
  %951 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %920, i64 %950
  %952 = ptrtoint %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %951 to i64
  %953 = icmp sgt i64 %949, 0
  br i1 %953, label %954, label %957

954:                                              ; preds = %939
  %955 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %951 to i8*
  %956 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %946 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %955, i8* align 8 %956, i64 %949, i1 false) #12
  br label %957

957:                                              ; preds = %954, %939
  store i64 %952, i64* %542, align 8
  store i64 %945, i64* %541, align 8
  store i64 %922, i64* %543, align 8
  %958 = icmp eq %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %946, null
  br i1 %958, label %961, label %959

959:                                              ; preds = %957
  %960 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %946 to i8*
  call void @_ZdlPv(i8* %960) #14
  br label %961

961:                                              ; preds = %887, %957, %959
  %962 = call i64 @_ZN2v88internal18SharedFunctionInfo14ScriptIterator4NextEv(%"class.v8::internal::SharedFunctionInfo::ScriptIterator"* nonnull %38) #12
  %963 = trunc i64 %962 to i32
  %964 = icmp eq i32 %963, 0
  br i1 %964, label %795, label %809

965:                                              ; preds = %1788, %798
  %966 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %789, i64 0, i32 0, i32 0
  %967 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %966, align 8
  %968 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %788, i64 -1, i32 1, i32 0, i32 1
  %969 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %968, align 8
  %970 = icmp eq %"struct.v8::internal::CoverageFunction"* %967, %969
  br i1 %970, label %1794, label %1825

971:                                              ; preds = %1791, %804
  %972 = phi i64* [ null, %804 ], [ %1793, %1791 ]
  %973 = phi i64* [ null, %804 ], [ %1792, %1791 ]
  %974 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %801, %804 ], [ %1789, %1791 ]
  %975 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %974 to i64*
  %976 = load i64, i64* %975, align 8
  %977 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %974, i64 0, i32 2
  %978 = load i32, i32* %977, align 4
  %979 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %974, i64 0, i32 3
  %980 = load i32, i32* %979, align 8
  %981 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %974, i64 0, i32 1
  %982 = load i32, i32* %981, align 8
  %983 = icmp eq i64* %973, %972
  br i1 %983, label %1002, label %984

984:                                              ; preds = %971, %1000
  %985 = phi i64* [ %986, %1000 ], [ %972, %971 ]
  %986 = getelementptr inbounds i64, i64* %985, i64 -1
  %987 = load i64, i64* %986, align 8
  %988 = load i64, i64* %806, align 8
  %989 = load i64, i64* %807, align 8
  %990 = sub i64 %988, %989
  %991 = sdiv exact i64 %990, 56
  %992 = icmp ugt i64 %991, %987
  br i1 %992, label %995, label %993

993:                                              ; preds = %984
  %994 = bitcast %"class.std::__1::vector.0"* %789 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %994) #13
  unreachable

995:                                              ; preds = %984
  %996 = inttoptr i64 %989 to %"struct.v8::internal::CoverageFunction"*
  %997 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %996, i64 %987, i32 1
  %998 = load i32, i32* %997, align 4
  %999 = icmp sgt i32 %998, %978
  br i1 %999, label %1002, label %1000

1000:                                             ; preds = %995
  store i64* %986, i64** %557, align 8
  %1001 = icmp eq i64* %973, %986
  br i1 %1001, label %1002, label %984

1002:                                             ; preds = %1000, %995, %971
  %1003 = icmp eq i32 %982, 0
  br i1 %1003, label %1017, label %1004

1004:                                             ; preds = %1002
  switch i32 %1, label %1017 [
    i32 0, label %1016
    i32 2, label %1005
    i32 4, label %1005
  ]

1005:                                             ; preds = %1004, %1004
  %1006 = inttoptr i64 %976 to i64*
  %1007 = load i64, i64* %1006, align 8
  %1008 = add i64 %1007, 27
  %1009 = inttoptr i64 %1008 to i32*
  %1010 = load atomic i32, i32* %1009 monotonic, align 4
  %1011 = lshr i32 %1010, 26
  %1012 = and i32 %1011, 1
  %1013 = xor i32 %1012, 1
  %1014 = load atomic i32, i32* %1009 monotonic, align 4
  %1015 = or i32 %1014, 67108864
  store atomic volatile i32 %1015, i32* %1009 monotonic, align 4
  br label %1017

1016:                                             ; preds = %1004
  br label %1017

1017:                                             ; preds = %1002, %1005, %1016, %1004
  %1018 = phi i32 [ %982, %1004 ], [ %1013, %1005 ], [ 1, %1016 ], [ 0, %1002 ]
  %1019 = inttoptr i64 %976 to i64*
  %1020 = call i64* @_ZN2v88internal18SharedFunctionInfo9DebugNameENS0_6HandleIS1_EE(i64* %1019) #12
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %558) #12
  store i32 %978, i32* %559, align 8
  store i32 %980, i32* %560, align 4
  store i32 %1018, i32* %561, align 8
  store i64* %1020, i64** %562, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %564, i8 0, i64 25, i1 false) #12
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %567) #12
  br i1 %566, label %1021, label %1614

1021:                                             ; preds = %1017
  %1022 = load i64, i64* %1019, align 8
  store i64 %1022, i64* %568, align 8
  %1023 = call zeroext i1 @_ZNK2v88internal18SharedFunctionInfo15HasCoverageInfoEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %569) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %567) #12
  br i1 %1023, label %1024, label %1616

1024:                                             ; preds = %1021
  %1025 = load i64, i64* %1019, align 8
  %1026 = load i32, i32* %559, align 8
  %1027 = load i32, i32* %560, align 4
  %1028 = icmp slt i32 %1026, %1027
  %1029 = icmp sgt i32 %1026, -1
  %1030 = and i1 %1029, %1028
  br i1 %1030, label %1035, label %1031

1031:                                             ; preds = %1024
  %1032 = and i64 %1025, -4294967296
  %1033 = add i64 %1025, 15
  %1034 = inttoptr i64 %1033 to i32*
  br label %1591

1035:                                             ; preds = %1024
  store i8 1, i8* %570, align 8
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %571) #12
  %1036 = and i64 %1025, -4294967296
  %1037 = add i64 %1025, 15
  %1038 = inttoptr i64 %1037 to i32*
  %1039 = load atomic i32, i32* %1038 acquire, align 4, !noalias !3
  %1040 = zext i32 %1039 to i64
  %1041 = or i64 %1036, %1040
  %1042 = add i64 %1041, 31
  %1043 = inttoptr i64 %1042 to i32*
  %1044 = load i32, i32* %1043, align 4, !noalias !3
  %1045 = zext i32 %1044 to i64
  %1046 = or i64 %1036, %1045
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %571, i8 0, i64 24, i1 false) #12, !alias.scope !3
  %1047 = add i64 %1046, 3
  %1048 = inttoptr i64 %1047 to i32*
  %1049 = load i32, i32* %1048, align 4, !noalias !3
  %1050 = icmp eq i32 %1049, 0
  br i1 %1050, label %1145, label %1051

1051:                                             ; preds = %1035
  %1052 = icmp sgt i32 %1049, 0
  br i1 %1052, label %1058, label %1055

1053:                                             ; preds = %1136
  %1054 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %577, align 16, !alias.scope !3
  br label %1055

1055:                                             ; preds = %1053, %1051
  %1056 = phi %"struct.v8::internal::CoverageBlock"* [ %1137, %1053 ], [ null, %1051 ]
  %1057 = phi %"struct.v8::internal::CoverageBlock"* [ %1054, %1053 ], [ null, %1051 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %578) #12, !noalias !3
  store i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)* @_ZN2v88internal12_GLOBAL__N_120CompareCoverageBlockERKNS0_13CoverageBlockES4_, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %12, align 8, !noalias !3
  call void @_ZNSt3__16__sortIRPFbRKN2v88internal13CoverageBlockES5_EPS3_EEvT0_SA_T_(%"struct.v8::internal::CoverageBlock"* %1057, %"struct.v8::internal::CoverageBlock"* %1056, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** nonnull dereferenceable(8) %12) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %578) #12, !noalias !3
  br label %1145

1058:                                             ; preds = %1051, %1142
  %1059 = phi i64 [ %1144, %1142 ], [ 0, %1051 ]
  %1060 = phi %"struct.v8::internal::CoverageBlock"* [ %1143, %1142 ], [ null, %1051 ]
  %1061 = phi %"struct.v8::internal::CoverageBlock"* [ %1137, %1142 ], [ null, %1051 ]
  %1062 = phi i64 [ %1138, %1142 ], [ 0, %1051 ]
  %1063 = trunc i64 %1062 to i32
  %1064 = shl nsw i32 %1063, 4
  %1065 = or i32 %1064, 8
  %1066 = add nsw i32 %1065, -1
  %1067 = zext i32 %1066 to i64
  %1068 = add i64 %1046, %1067
  %1069 = inttoptr i64 %1068 to i32*
  %1070 = load i32, i32* %1069, align 4, !noalias !3
  %1071 = or i32 %1064, 12
  %1072 = add nsw i32 %1071, -1
  %1073 = zext i32 %1072 to i64
  %1074 = add i64 %1046, %1073
  %1075 = inttoptr i64 %1074 to i32*
  %1076 = load i32, i32* %1075, align 4, !noalias !3
  %1077 = or i32 %1064, 15
  %1078 = zext i32 %1077 to i64
  %1079 = add i64 %1046, %1078
  %1080 = inttoptr i64 %1079 to i32*
  %1081 = load i32, i32* %1080, align 4, !noalias !3
  %1082 = icmp ult %"struct.v8::internal::CoverageBlock"* %1061, %1060
  %1083 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1060 to i64
  br i1 %1082, label %1084, label %1090

1084:                                             ; preds = %1058
  %1085 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1061, i64 0, i32 0
  store i32 %1070, i32* %1085, align 4
  %1086 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1061, i64 0, i32 1
  store i32 %1076, i32* %1086, align 4
  %1087 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1061, i64 0, i32 2
  store i32 %1081, i32* %1087, align 4
  %1088 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1061, i64 1
  %1089 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1088 to i64
  store i64 %1089, i64* %574, align 8, !alias.scope !3
  br label %1136

1090:                                             ; preds = %1058
  %1091 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1061 to i64
  %1092 = load i64, i64* %575, align 16, !alias.scope !3
  %1093 = sub i64 %1091, %1092
  %1094 = sdiv exact i64 %1093, 12
  %1095 = add nsw i64 %1094, 1
  %1096 = icmp ugt i64 %1095, 1537228672809129301
  br i1 %1096, label %1097, label %1099

1097:                                             ; preds = %1090
  %1098 = bitcast %"class.std::__1::vector.3"* %14 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1098) #13
  unreachable

1099:                                             ; preds = %1090
  %1100 = sub i64 %1083, %1092
  %1101 = sdiv exact i64 %1100, 12
  %1102 = icmp ult i64 %1101, 768614336404564650
  br i1 %1102, label %1103, label %1108

1103:                                             ; preds = %1099
  %1104 = shl nsw i64 %1101, 1
  %1105 = icmp ult i64 %1104, %1095
  %1106 = select i1 %1105, i64 %1095, i64 %1104
  %1107 = icmp eq i64 %1106, 0
  br i1 %1107, label %1113, label %1108

1108:                                             ; preds = %1103, %1099
  %1109 = phi i64 [ %1106, %1103 ], [ 1537228672809129301, %1099 ]
  %1110 = mul i64 %1109, 12
  %1111 = call i8* @_Znwm(i64 %1110) #14
  %1112 = bitcast i8* %1111 to %"struct.v8::internal::CoverageBlock"*
  br label %1113

1113:                                             ; preds = %1108, %1103
  %1114 = phi i64 [ %1109, %1108 ], [ 0, %1103 ]
  %1115 = phi %"struct.v8::internal::CoverageBlock"* [ %1112, %1108 ], [ null, %1103 ]
  %1116 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1115, i64 %1094
  %1117 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1115, i64 %1114
  %1118 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1117 to i64
  %1119 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1116, i64 0, i32 0
  store i32 %1070, i32* %1119, align 4, !noalias !3
  %1120 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1115, i64 %1094, i32 1
  store i32 %1076, i32* %1120, align 4, !noalias !3
  %1121 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1115, i64 %1094, i32 2
  store i32 %1081, i32* %1121, align 4, !noalias !3
  %1122 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1116, i64 1
  %1123 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1122 to i64
  %1124 = sub i64 %1059, %1092
  %1125 = sdiv exact i64 %1124, -12
  %1126 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1116, i64 %1125
  %1127 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1126 to i64
  %1128 = icmp sgt i64 %1124, 0
  br i1 %1128, label %1129, label %1132

1129:                                             ; preds = %1113
  %1130 = bitcast %"struct.v8::internal::CoverageBlock"* %1126 to i8*
  %1131 = inttoptr i64 %1092 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1130, i8* align 4 %1131, i64 %1124, i1 false) #12
  br label %1132

1132:                                             ; preds = %1129, %1113
  store i64 %1127, i64* %575, align 16, !alias.scope !3
  store i64 %1123, i64* %574, align 8, !alias.scope !3
  store i64 %1118, i64* %576, align 16, !alias.scope !3
  %1133 = icmp eq i64 %1092, 0
  br i1 %1133, label %1136, label %1134

1134:                                             ; preds = %1132
  %1135 = inttoptr i64 %1092 to i8*
  call void @_ZdlPv(i8* %1135) #14
  br label %1136

1136:                                             ; preds = %1134, %1132, %1084
  %1137 = phi %"struct.v8::internal::CoverageBlock"* [ %1122, %1134 ], [ %1122, %1132 ], [ %1088, %1084 ]
  %1138 = add nuw nsw i64 %1062, 1
  %1139 = load i32, i32* %1048, align 4
  %1140 = sext i32 %1139 to i64
  %1141 = icmp slt i64 %1138, %1140
  br i1 %1141, label %1142, label %1053

1142:                                             ; preds = %1136
  %1143 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %573, align 16, !alias.scope !3
  %1144 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1137 to i64
  br label %1058

1145:                                             ; preds = %1055, %1035
  %1146 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %579, align 8
  %1147 = icmp eq %"struct.v8::internal::CoverageBlock"* %1146, null
  br i1 %1147, label %1151, label %1148

1148:                                             ; preds = %1145
  %1149 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1146 to i64
  store i64 %1149, i64* %581, align 8
  %1150 = bitcast %"struct.v8::internal::CoverageBlock"* %1146 to i8*
  call void @_ZdlPv(i8* %1150) #14
  call void @llvm.memset.p0i8.i64(i8* align 8 %564, i8 0, i64 24, i1 false) #12
  br label %1151

1151:                                             ; preds = %1148, %1145
  %1152 = load <2 x i64>, <2 x i64>* %677, align 16
  store <2 x i64> %1152, <2 x i64>* %678, align 8
  %1153 = load i64, i64* %576, align 16
  store i64 %1153, i64* %584, align 8
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %571) #12
  br i1 %585, label %1154, label %1198

1154:                                             ; preds = %1151
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %586) #12
  store %"struct.v8::internal::CoverageFunction"* %40, %"struct.v8::internal::CoverageFunction"** %587, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %590, i8 0, i64 26, i1 false) #12
  store i32 -1, i32* %589, align 4
  store i32 -1, i32* %591, align 8
  %1155 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %11) #12
  br i1 %1155, label %1156, label %1168

1156:                                             ; preds = %1154, %1166
  %1157 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %587, align 8
  %1158 = load i32, i32* %589, align 4
  %1159 = sext i32 %1158 to i64
  %1160 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1157, i64 0, i32 5, i32 0, i32 0
  %1161 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %1160, align 8
  %1162 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1161, i64 %1159, i32 2
  %1163 = load i32, i32* %1162, align 4
  %1164 = icmp eq i32 %1163, 0
  br i1 %1164, label %1166, label %1165

1165:                                             ; preds = %1156
  store i32 1, i32* %1162, align 4
  br label %1166

1166:                                             ; preds = %1165, %1156
  %1167 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %11) #12
  br i1 %1167, label %1156, label %1168

1168:                                             ; preds = %1166, %1154
  br label %1169

1169:                                             ; preds = %1168, %1169
  %1170 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %11) #12
  br i1 %1170, label %1169, label %1171

1171:                                             ; preds = %1169
  %1172 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %587, align 8
  %1173 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1172, i64 0, i32 5
  %1174 = load i32, i32* %591, align 8
  %1175 = sext i32 %1174 to i64
  %1176 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1172, i64 0, i32 5, i32 0, i32 1
  %1177 = bitcast %"struct.v8::internal::CoverageBlock"** %1176 to i64*
  %1178 = load i64, i64* %1177, align 8
  %1179 = bitcast %"class.std::__1::vector.3"* %1173 to i64*
  %1180 = load i64, i64* %1179, align 8
  %1181 = sub i64 %1178, %1180
  %1182 = sdiv exact i64 %1181, 12
  %1183 = icmp ult i64 %1182, %1175
  %1184 = inttoptr i64 %1180 to %"struct.v8::internal::CoverageBlock"*
  br i1 %1183, label %1185, label %1187

1185:                                             ; preds = %1171
  %1186 = sub nsw i64 %1175, %1182
  call void @_ZNSt3__16vectorIN2v88internal13CoverageBlockENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.3"* %1173, i64 %1186) #12
  br label %1191

1187:                                             ; preds = %1171
  %1188 = icmp ugt i64 %1182, %1175
  br i1 %1188, label %1189, label %1191

1189:                                             ; preds = %1187
  %1190 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1184, i64 %1175
  store %"struct.v8::internal::CoverageBlock"* %1190, %"struct.v8::internal::CoverageBlock"** %1176, align 8
  br label %1191

1191:                                             ; preds = %1189, %1187, %1185
  %1192 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %592, align 8
  %1193 = icmp eq %"struct.v8::internal::CoverageBlock"* %1192, null
  br i1 %1193, label %1197, label %1194

1194:                                             ; preds = %1191
  %1195 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1192 to i64
  store i64 %1195, i64* %594, align 8
  %1196 = bitcast %"struct.v8::internal::CoverageBlock"* %1192 to i8*
  call void @_ZdlPv(i8* %1196) #14
  br label %1197

1197:                                             ; preds = %1194, %1191
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %586) #12
  br label %1198

1198:                                             ; preds = %1197, %1151
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %595) #12
  store %"struct.v8::internal::CoverageFunction"* %40, %"struct.v8::internal::CoverageFunction"** %596, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %599, i8 0, i64 26, i1 false) #12
  store i32 -1, i32* %598, align 4
  store i32 -1, i32* %600, align 8
  %1199 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %10) #12
  br i1 %1199, label %1200, label %1216

1200:                                             ; preds = %1198
  %1201 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %596, align 8
  %1202 = load i32, i32* %598, align 4
  %1203 = sext i32 %1202 to i64
  %1204 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1201, i64 0, i32 5, i32 0, i32 0
  %1205 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %1204, align 8
  %1206 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1205, i64 %1203, i32 0
  %1207 = load i32, i32* %1206, align 4
  %1208 = icmp eq i32 %1207, -2
  br i1 %1208, label %1209, label %1216

1209:                                             ; preds = %1200
  %1210 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1205, i64 %1203, i32 1
  %1211 = load i32, i32* %1210, align 4
  %1212 = icmp eq i32 %1211, -2
  br i1 %1212, label %1213, label %1216

1213:                                             ; preds = %1209
  %1214 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1205, i64 %1203, i32 2
  %1215 = load i32, i32* %1214, align 4
  store i32 %1215, i32* %561, align 8
  store i8 1, i8* %601, align 1
  br label %1216

1216:                                             ; preds = %1213, %1209, %1200, %1198
  br label %1217

1217:                                             ; preds = %1216, %1217
  %1218 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %10) #12
  br i1 %1218, label %1217, label %1219

1219:                                             ; preds = %1217
  %1220 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %596, align 8
  %1221 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1220, i64 0, i32 5
  %1222 = load i32, i32* %600, align 8
  %1223 = sext i32 %1222 to i64
  %1224 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1220, i64 0, i32 5, i32 0, i32 1
  %1225 = bitcast %"struct.v8::internal::CoverageBlock"** %1224 to i64*
  %1226 = load i64, i64* %1225, align 8
  %1227 = bitcast %"class.std::__1::vector.3"* %1221 to i64*
  %1228 = load i64, i64* %1227, align 8
  %1229 = sub i64 %1226, %1228
  %1230 = sdiv exact i64 %1229, 12
  %1231 = icmp ult i64 %1230, %1223
  %1232 = inttoptr i64 %1228 to %"struct.v8::internal::CoverageBlock"*
  br i1 %1231, label %1233, label %1235

1233:                                             ; preds = %1219
  %1234 = sub nsw i64 %1223, %1230
  call void @_ZNSt3__16vectorIN2v88internal13CoverageBlockENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.3"* %1221, i64 %1234) #12
  br label %1239

1235:                                             ; preds = %1219
  %1236 = icmp ugt i64 %1230, %1223
  br i1 %1236, label %1237, label %1239

1237:                                             ; preds = %1235
  %1238 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1232, i64 %1223
  store %"struct.v8::internal::CoverageBlock"* %1238, %"struct.v8::internal::CoverageBlock"** %1224, align 8
  br label %1239

1239:                                             ; preds = %1237, %1235, %1233
  %1240 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %602, align 8
  %1241 = icmp eq %"struct.v8::internal::CoverageBlock"* %1240, null
  br i1 %1241, label %1245, label %1242

1242:                                             ; preds = %1239
  %1243 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1240 to i64
  store i64 %1243, i64* %604, align 8
  %1244 = bitcast %"struct.v8::internal::CoverageBlock"* %1240 to i8*
  call void @_ZdlPv(i8* %1244) #14
  br label %1245

1245:                                             ; preds = %1242, %1239
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %595) #12
  %1246 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %605, align 8
  %1247 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %580, align 8
  %1248 = icmp eq %"struct.v8::internal::CoverageBlock"* %1246, %1247
  br i1 %1248, label %1591, label %1249

1249:                                             ; preds = %1245
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %606) #12
  store %"struct.v8::internal::CoverageFunction"* %40, %"struct.v8::internal::CoverageFunction"** %607, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %610, i8 0, i64 26, i1 false) #12
  store i32 -1, i32* %609, align 4
  store i32 -1, i32* %611, align 8
  %1250 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %9) #12
  %1251 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %9) #12
  br i1 %1251, label %1252, label %1272

1252:                                             ; preds = %1249, %1270
  %1253 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %607, align 8
  %1254 = load i32, i32* %609, align 4
  %1255 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1253, i64 0, i32 5, i32 0, i32 0
  %1256 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %1255, align 8
  %1257 = sext i32 %1254 to i64
  %1258 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1256, i64 %1257, i32 1
  %1259 = load i32, i32* %1258, align 4
  %1260 = icmp eq i32 %1259, -1
  br i1 %1260, label %1261, label %1270

1261:                                             ; preds = %1252
  %1262 = add nsw i32 %1254, -1
  %1263 = sext i32 %1262 to i64
  %1264 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1256, i64 %1257, i32 0
  %1265 = load i32, i32* %1264, align 4
  %1266 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1256, i64 %1263, i32 0
  %1267 = load i32, i32* %1266, align 4
  %1268 = icmp eq i32 %1265, %1267
  br i1 %1268, label %1269, label %1270

1269:                                             ; preds = %1261
  store i8 1, i8* %612, align 1
  br label %1270

1270:                                             ; preds = %1269, %1261, %1252
  %1271 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %9) #12
  br i1 %1271, label %1252, label %1272

1272:                                             ; preds = %1270, %1249
  br label %1273

1273:                                             ; preds = %1272, %1273
  %1274 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %9) #12
  br i1 %1274, label %1273, label %1275

1275:                                             ; preds = %1273
  %1276 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %607, align 8
  %1277 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1276, i64 0, i32 5
  %1278 = load i32, i32* %611, align 8
  %1279 = sext i32 %1278 to i64
  %1280 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1276, i64 0, i32 5, i32 0, i32 1
  %1281 = bitcast %"struct.v8::internal::CoverageBlock"** %1280 to i64*
  %1282 = load i64, i64* %1281, align 8
  %1283 = bitcast %"class.std::__1::vector.3"* %1277 to i64*
  %1284 = load i64, i64* %1283, align 8
  %1285 = sub i64 %1282, %1284
  %1286 = sdiv exact i64 %1285, 12
  %1287 = icmp ult i64 %1286, %1279
  %1288 = inttoptr i64 %1284 to %"struct.v8::internal::CoverageBlock"*
  br i1 %1287, label %1289, label %1291

1289:                                             ; preds = %1275
  %1290 = sub nsw i64 %1279, %1286
  call void @_ZNSt3__16vectorIN2v88internal13CoverageBlockENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.3"* %1277, i64 %1290) #12
  br label %1295

1291:                                             ; preds = %1275
  %1292 = icmp ugt i64 %1286, %1279
  br i1 %1292, label %1293, label %1295

1293:                                             ; preds = %1291
  %1294 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1288, i64 %1279
  store %"struct.v8::internal::CoverageBlock"* %1294, %"struct.v8::internal::CoverageBlock"** %1280, align 8
  br label %1295

1295:                                             ; preds = %1293, %1291, %1289
  %1296 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %613, align 8
  %1297 = icmp eq %"struct.v8::internal::CoverageBlock"* %1296, null
  br i1 %1297, label %1301, label %1298

1298:                                             ; preds = %1295
  %1299 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1296 to i64
  store i64 %1299, i64* %615, align 8
  %1300 = bitcast %"struct.v8::internal::CoverageBlock"* %1296 to i8*
  call void @_ZdlPv(i8* %1300) #14
  br label %1301

1301:                                             ; preds = %1298, %1295
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %606) #12
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %616) #12
  store %"struct.v8::internal::CoverageFunction"* %40, %"struct.v8::internal::CoverageFunction"** %617, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %620, i8 0, i64 26, i1 false) #12
  store i32 -1, i32* %619, align 4
  store i32 -1, i32* %621, align 8
  %1302 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %8) #12
  br i1 %1302, label %1303, label %1351

1303:                                             ; preds = %1301, %1349
  %1304 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %617, align 8
  %1305 = load i32, i32* %619, align 4
  %1306 = sext i32 %1305 to i64
  %1307 = getelementptr %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1304, i64 0, i32 5, i32 0, i32 0
  %1308 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %1307, align 8
  %1309 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %622, align 8
  %1310 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1308, i64 %1306, i32 0
  %1311 = load i32, i32* %1310, align 4
  %1312 = load i32, i32* %560, align 4
  %1313 = icmp slt i32 %1311, %1312
  %1314 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1308 to i64
  %1315 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1309 to i64
  br i1 %1313, label %1317, label %1316

1316:                                             ; preds = %1303
  store i8 1, i8* %623, align 1
  br label %1349

1317:                                             ; preds = %1303
  %1318 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1308, i64 %1306, i32 1
  %1319 = load i32, i32* %1318, align 4
  %1320 = icmp eq i32 %1319, -1
  br i1 %1320, label %1321, label %1349

1321:                                             ; preds = %1317
  %1322 = add nsw i32 %1305, 1
  %1323 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1304, i64 0, i32 5, i32 0, i32 1
  %1324 = bitcast %"struct.v8::internal::CoverageBlock"** %1323 to i64*
  %1325 = load i64, i64* %1324, align 8
  %1326 = sub i64 %1325, %1314
  %1327 = sdiv exact i64 %1326, 12
  %1328 = trunc i64 %1327 to i32
  %1329 = icmp slt i32 %1322, %1328
  br i1 %1329, label %1333, label %1330

1330:                                             ; preds = %1321
  %1331 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1309, i64 -1, i32 1
  %1332 = load i32, i32* %1331, align 4
  br label %1341

1333:                                             ; preds = %1321
  %1334 = sext i32 %1322 to i64
  %1335 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1308, i64 %1334, i32 0
  %1336 = load i32, i32* %1335, align 4
  %1337 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1309, i64 -1, i32 1
  %1338 = load i32, i32* %1337, align 4
  %1339 = icmp slt i32 %1336, %1338
  br i1 %1339, label %1340, label %1341

1340:                                             ; preds = %1333
  store i32 %1336, i32* %1318, align 4
  br label %1349

1341:                                             ; preds = %1333, %1330
  %1342 = phi i32 [ %1332, %1330 ], [ %1338, %1333 ]
  %1343 = load i64, i64* %624, align 8
  %1344 = sub i64 %1315, %1343
  %1345 = icmp eq i64 %1344, 12
  br i1 %1345, label %1346, label %1348

1346:                                             ; preds = %1341
  %1347 = add nsw i32 %1342, -1
  store i32 %1347, i32* %1318, align 4
  br label %1349

1348:                                             ; preds = %1341
  store i32 %1342, i32* %1318, align 4
  br label %1349

1349:                                             ; preds = %1348, %1346, %1340, %1317, %1316
  %1350 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %8) #12
  br i1 %1350, label %1303, label %1351

1351:                                             ; preds = %1349, %1301
  br label %1352

1352:                                             ; preds = %1351, %1352
  %1353 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %8) #12
  br i1 %1353, label %1352, label %1354

1354:                                             ; preds = %1352
  %1355 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %617, align 8
  %1356 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1355, i64 0, i32 5
  %1357 = load i32, i32* %621, align 8
  %1358 = sext i32 %1357 to i64
  %1359 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1355, i64 0, i32 5, i32 0, i32 1
  %1360 = bitcast %"struct.v8::internal::CoverageBlock"** %1359 to i64*
  %1361 = load i64, i64* %1360, align 8
  %1362 = bitcast %"class.std::__1::vector.3"* %1356 to i64*
  %1363 = load i64, i64* %1362, align 8
  %1364 = sub i64 %1361, %1363
  %1365 = sdiv exact i64 %1364, 12
  %1366 = icmp ult i64 %1365, %1358
  %1367 = inttoptr i64 %1363 to %"struct.v8::internal::CoverageBlock"*
  br i1 %1366, label %1368, label %1370

1368:                                             ; preds = %1354
  %1369 = sub nsw i64 %1358, %1365
  call void @_ZNSt3__16vectorIN2v88internal13CoverageBlockENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.3"* %1356, i64 %1369) #12
  br label %1374

1370:                                             ; preds = %1354
  %1371 = icmp ugt i64 %1365, %1358
  br i1 %1371, label %1372, label %1374

1372:                                             ; preds = %1370
  %1373 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1367, i64 %1358
  store %"struct.v8::internal::CoverageBlock"* %1373, %"struct.v8::internal::CoverageBlock"** %1359, align 8
  br label %1374

1374:                                             ; preds = %1372, %1370, %1368
  %1375 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %625, align 8
  %1376 = icmp eq %"struct.v8::internal::CoverageBlock"* %1375, null
  br i1 %1376, label %1380, label %1377

1377:                                             ; preds = %1374
  %1378 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1375 to i64
  store i64 %1378, i64* %626, align 8
  %1379 = bitcast %"struct.v8::internal::CoverageBlock"* %1375 to i8*
  call void @_ZdlPv(i8* %1379) #14
  br label %1380

1380:                                             ; preds = %1377, %1374
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %616) #12
  call fastcc void @_ZN2v88internal12_GLOBAL__N_122MergeConsecutiveRangesEPNS0_16CoverageFunctionE(%"struct.v8::internal::CoverageFunction"* nonnull %40) #12
  %1381 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %579, align 8
  %1382 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %580, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %627) #12
  store i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)* @_ZN2v88internal12_GLOBAL__N_120CompareCoverageBlockERKNS0_13CoverageBlockES4_, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %7, align 8
  call void @_ZNSt3__16__sortIRPFbRKN2v88internal13CoverageBlockES5_EPS3_EEvT0_SA_T_(%"struct.v8::internal::CoverageBlock"* %1381, %"struct.v8::internal::CoverageBlock"* %1382, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** nonnull dereferenceable(8) %7) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %627) #12
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %628) #12
  store %"struct.v8::internal::CoverageFunction"* %40, %"struct.v8::internal::CoverageFunction"** %629, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %632, i8 0, i64 26, i1 false) #12
  store i32 -1, i32* %631, align 4
  store i32 -1, i32* %633, align 8
  %1383 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %6) #12
  br i1 %1383, label %1384, label %1422

1384:                                             ; preds = %1380, %1420
  %1385 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %629, align 8
  %1386 = load i32, i32* %631, align 4
  %1387 = add nsw i32 %1386, 1
  %1388 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1385, i64 0, i32 5
  %1389 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1385, i64 0, i32 5, i32 0, i32 1
  %1390 = bitcast %"struct.v8::internal::CoverageBlock"** %1389 to i64*
  %1391 = load i64, i64* %1390, align 8
  %1392 = bitcast %"class.std::__1::vector.3"* %1388 to i64*
  %1393 = load i64, i64* %1392, align 8
  %1394 = sub i64 %1391, %1393
  %1395 = sdiv exact i64 %1394, 12
  %1396 = trunc i64 %1395 to i32
  %1397 = icmp slt i32 %1387, %1396
  %1398 = inttoptr i64 %1393 to %"struct.v8::internal::CoverageBlock"*
  br i1 %1397, label %1399, label %1422

1399:                                             ; preds = %1384
  %1400 = sext i32 %1386 to i64
  %1401 = sext i32 %1387 to i64
  %1402 = getelementptr %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1398, i64 %1400, i32 0
  %1403 = load i32, i32* %1402, align 4
  %1404 = getelementptr %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1398, i64 %1400, i32 1
  %1405 = load i32, i32* %1404, align 4
  %1406 = getelementptr %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1398, i64 %1401, i32 0
  %1407 = load i32, i32* %1406, align 4
  %1408 = getelementptr %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1398, i64 %1401, i32 1
  %1409 = load i32, i32* %1408, align 4
  %1410 = icmp eq i32 %1403, %1407
  %1411 = icmp eq i32 %1405, %1409
  %1412 = and i1 %1410, %1411
  br i1 %1412, label %1413, label %1420

1413:                                             ; preds = %1399
  %1414 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1398, i64 %1400, i32 2
  %1415 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1398, i64 %1401, i32 2
  %1416 = load i32, i32* %1414, align 4
  %1417 = load i32, i32* %1415, align 4
  %1418 = icmp ult i32 %1416, %1417
  %1419 = select i1 %1418, i32 %1417, i32 %1416
  store i32 %1419, i32* %1415, align 4
  store i8 1, i8* %634, align 1
  br label %1420

1420:                                             ; preds = %1413, %1399
  %1421 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %6) #12
  br i1 %1421, label %1384, label %1422

1422:                                             ; preds = %1420, %1384, %1380
  br label %1423

1423:                                             ; preds = %1422, %1423
  %1424 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %6) #12
  br i1 %1424, label %1423, label %1425

1425:                                             ; preds = %1423
  %1426 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %629, align 8
  %1427 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1426, i64 0, i32 5
  %1428 = load i32, i32* %633, align 8
  %1429 = sext i32 %1428 to i64
  %1430 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1426, i64 0, i32 5, i32 0, i32 1
  %1431 = bitcast %"struct.v8::internal::CoverageBlock"** %1430 to i64*
  %1432 = load i64, i64* %1431, align 8
  %1433 = bitcast %"class.std::__1::vector.3"* %1427 to i64*
  %1434 = load i64, i64* %1433, align 8
  %1435 = sub i64 %1432, %1434
  %1436 = sdiv exact i64 %1435, 12
  %1437 = icmp ult i64 %1436, %1429
  %1438 = inttoptr i64 %1434 to %"struct.v8::internal::CoverageBlock"*
  br i1 %1437, label %1439, label %1441

1439:                                             ; preds = %1425
  %1440 = sub nsw i64 %1429, %1436
  call void @_ZNSt3__16vectorIN2v88internal13CoverageBlockENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.3"* %1427, i64 %1440) #12
  br label %1445

1441:                                             ; preds = %1425
  %1442 = icmp ugt i64 %1436, %1429
  br i1 %1442, label %1443, label %1445

1443:                                             ; preds = %1441
  %1444 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1438, i64 %1429
  store %"struct.v8::internal::CoverageBlock"* %1444, %"struct.v8::internal::CoverageBlock"** %1430, align 8
  br label %1445

1445:                                             ; preds = %1443, %1441, %1439
  %1446 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %635, align 8
  %1447 = icmp eq %"struct.v8::internal::CoverageBlock"* %1446, null
  br i1 %1447, label %1451, label %1448

1448:                                             ; preds = %1445
  %1449 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1446 to i64
  store i64 %1449, i64* %637, align 8
  %1450 = bitcast %"struct.v8::internal::CoverageBlock"* %1446 to i8*
  call void @_ZdlPv(i8* %1450) #14
  br label %1451

1451:                                             ; preds = %1448, %1445
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %628) #12
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %638) #12
  store %"struct.v8::internal::CoverageFunction"* %40, %"struct.v8::internal::CoverageFunction"** %639, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %642, i8 0, i64 26, i1 false) #12
  store i32 -1, i32* %641, align 4
  store i32 -1, i32* %643, align 8
  %1452 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %5) #12
  br i1 %1452, label %1453, label %1468

1453:                                             ; preds = %1451, %1466
  %1454 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %639, align 8
  %1455 = load i32, i32* %641, align 4
  %1456 = sext i32 %1455 to i64
  %1457 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1454, i64 0, i32 5, i32 0, i32 0
  %1458 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %1457, align 8
  %1459 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %644, align 8
  %1460 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1459, i64 -1, i32 2
  %1461 = load i32, i32* %1460, align 4
  %1462 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1458, i64 %1456, i32 2
  %1463 = load i32, i32* %1462, align 4
  %1464 = icmp eq i32 %1461, %1463
  br i1 %1464, label %1465, label %1466

1465:                                             ; preds = %1453
  store i8 1, i8* %645, align 1
  br label %1466

1466:                                             ; preds = %1465, %1453
  %1467 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %5) #12
  br i1 %1467, label %1453, label %1468

1468:                                             ; preds = %1466, %1451
  br label %1469

1469:                                             ; preds = %1468, %1469
  %1470 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %5) #12
  br i1 %1470, label %1469, label %1471

1471:                                             ; preds = %1469
  %1472 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %639, align 8
  %1473 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1472, i64 0, i32 5
  %1474 = load i32, i32* %643, align 8
  %1475 = sext i32 %1474 to i64
  %1476 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1472, i64 0, i32 5, i32 0, i32 1
  %1477 = bitcast %"struct.v8::internal::CoverageBlock"** %1476 to i64*
  %1478 = load i64, i64* %1477, align 8
  %1479 = bitcast %"class.std::__1::vector.3"* %1473 to i64*
  %1480 = load i64, i64* %1479, align 8
  %1481 = sub i64 %1478, %1480
  %1482 = sdiv exact i64 %1481, 12
  %1483 = icmp ult i64 %1482, %1475
  %1484 = inttoptr i64 %1480 to %"struct.v8::internal::CoverageBlock"*
  br i1 %1483, label %1485, label %1487

1485:                                             ; preds = %1471
  %1486 = sub nsw i64 %1475, %1482
  call void @_ZNSt3__16vectorIN2v88internal13CoverageBlockENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.3"* %1473, i64 %1486) #12
  br label %1491

1487:                                             ; preds = %1471
  %1488 = icmp ugt i64 %1482, %1475
  br i1 %1488, label %1489, label %1491

1489:                                             ; preds = %1487
  %1490 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1484, i64 %1475
  store %"struct.v8::internal::CoverageBlock"* %1490, %"struct.v8::internal::CoverageBlock"** %1476, align 8
  br label %1491

1491:                                             ; preds = %1489, %1487, %1485
  %1492 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %646, align 8
  %1493 = icmp eq %"struct.v8::internal::CoverageBlock"* %1492, null
  br i1 %1493, label %1497, label %1494

1494:                                             ; preds = %1491
  %1495 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1492 to i64
  store i64 %1495, i64* %647, align 8
  %1496 = bitcast %"struct.v8::internal::CoverageBlock"* %1492 to i8*
  call void @_ZdlPv(i8* %1496) #14
  br label %1497

1497:                                             ; preds = %1494, %1491
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %638) #12
  call fastcc void @_ZN2v88internal12_GLOBAL__N_122MergeConsecutiveRangesEPNS0_16CoverageFunctionE(%"struct.v8::internal::CoverageFunction"* nonnull %40) #12
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %648) #12
  store %"struct.v8::internal::CoverageFunction"* %40, %"struct.v8::internal::CoverageFunction"** %649, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %652, i8 0, i64 26, i1 false) #12
  store i32 -1, i32* %651, align 4
  store i32 -1, i32* %653, align 8
  %1498 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %4) #12
  br i1 %1498, label %1499, label %1516

1499:                                             ; preds = %1497, %1514
  %1500 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %649, align 8
  %1501 = load i32, i32* %651, align 4
  %1502 = sext i32 %1501 to i64
  %1503 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1500, i64 0, i32 5, i32 0, i32 0
  %1504 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %1503, align 8
  %1505 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1504, i64 %1502, i32 2
  %1506 = load i32, i32* %1505, align 4
  %1507 = icmp eq i32 %1506, 0
  br i1 %1507, label %1508, label %1514

1508:                                             ; preds = %1499
  %1509 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %654, align 8
  %1510 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1509, i64 -1, i32 2
  %1511 = load i32, i32* %1510, align 4
  %1512 = icmp eq i32 %1511, 0
  br i1 %1512, label %1513, label %1514

1513:                                             ; preds = %1508
  store i8 1, i8* %655, align 1
  br label %1514

1514:                                             ; preds = %1513, %1508, %1499
  %1515 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %4) #12
  br i1 %1515, label %1499, label %1516

1516:                                             ; preds = %1514, %1497
  br label %1517

1517:                                             ; preds = %1516, %1517
  %1518 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %4) #12
  br i1 %1518, label %1517, label %1519

1519:                                             ; preds = %1517
  %1520 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %649, align 8
  %1521 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1520, i64 0, i32 5
  %1522 = load i32, i32* %653, align 8
  %1523 = sext i32 %1522 to i64
  %1524 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1520, i64 0, i32 5, i32 0, i32 1
  %1525 = bitcast %"struct.v8::internal::CoverageBlock"** %1524 to i64*
  %1526 = load i64, i64* %1525, align 8
  %1527 = bitcast %"class.std::__1::vector.3"* %1521 to i64*
  %1528 = load i64, i64* %1527, align 8
  %1529 = sub i64 %1526, %1528
  %1530 = sdiv exact i64 %1529, 12
  %1531 = icmp ult i64 %1530, %1523
  %1532 = inttoptr i64 %1528 to %"struct.v8::internal::CoverageBlock"*
  br i1 %1531, label %1533, label %1535

1533:                                             ; preds = %1519
  %1534 = sub nsw i64 %1523, %1530
  call void @_ZNSt3__16vectorIN2v88internal13CoverageBlockENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.3"* %1521, i64 %1534) #12
  br label %1539

1535:                                             ; preds = %1519
  %1536 = icmp ugt i64 %1530, %1523
  br i1 %1536, label %1537, label %1539

1537:                                             ; preds = %1535
  %1538 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1532, i64 %1523
  store %"struct.v8::internal::CoverageBlock"* %1538, %"struct.v8::internal::CoverageBlock"** %1524, align 8
  br label %1539

1539:                                             ; preds = %1537, %1535, %1533
  %1540 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %656, align 8
  %1541 = icmp eq %"struct.v8::internal::CoverageBlock"* %1540, null
  br i1 %1541, label %1545, label %1542

1542:                                             ; preds = %1539
  %1543 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1540 to i64
  store i64 %1543, i64* %657, align 8
  %1544 = bitcast %"struct.v8::internal::CoverageBlock"* %1540 to i8*
  call void @_ZdlPv(i8* %1544) #14
  br label %1545

1545:                                             ; preds = %1542, %1539
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %648) #12
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %658) #12
  store %"struct.v8::internal::CoverageFunction"* %40, %"struct.v8::internal::CoverageFunction"** %659, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %662, i8 0, i64 26, i1 false) #12
  store i32 -1, i32* %661, align 4
  store i32 -1, i32* %663, align 8
  %1546 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %13) #12
  br i1 %1546, label %1547, label %1561

1547:                                             ; preds = %1545, %1559
  %1548 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %659, align 8
  %1549 = load i32, i32* %661, align 4
  %1550 = sext i32 %1549 to i64
  %1551 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1548, i64 0, i32 5, i32 0, i32 0
  %1552 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %1551, align 8
  %1553 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1552, i64 %1550, i32 0
  %1554 = load i32, i32* %1553, align 4
  %1555 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1552, i64 %1550, i32 1
  %1556 = load i32, i32* %1555, align 4
  %1557 = icmp eq i32 %1554, %1556
  br i1 %1557, label %1558, label %1559

1558:                                             ; preds = %1547
  store i8 1, i8* %664, align 1
  br label %1559

1559:                                             ; preds = %1558, %1547
  %1560 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %13) #12
  br i1 %1560, label %1547, label %1561

1561:                                             ; preds = %1559, %1545
  br label %1562

1562:                                             ; preds = %1561, %1562
  %1563 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %13) #12
  br i1 %1563, label %1562, label %1564

1564:                                             ; preds = %1562
  %1565 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %659, align 8
  %1566 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1565, i64 0, i32 5
  %1567 = load i32, i32* %663, align 8
  %1568 = sext i32 %1567 to i64
  %1569 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1565, i64 0, i32 5, i32 0, i32 1
  %1570 = bitcast %"struct.v8::internal::CoverageBlock"** %1569 to i64*
  %1571 = load i64, i64* %1570, align 8
  %1572 = bitcast %"class.std::__1::vector.3"* %1566 to i64*
  %1573 = load i64, i64* %1572, align 8
  %1574 = sub i64 %1571, %1573
  %1575 = sdiv exact i64 %1574, 12
  %1576 = icmp ult i64 %1575, %1568
  %1577 = inttoptr i64 %1573 to %"struct.v8::internal::CoverageBlock"*
  br i1 %1576, label %1578, label %1580

1578:                                             ; preds = %1564
  %1579 = sub nsw i64 %1568, %1575
  call void @_ZNSt3__16vectorIN2v88internal13CoverageBlockENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.3"* %1566, i64 %1579) #12
  br label %1584

1580:                                             ; preds = %1564
  %1581 = icmp ugt i64 %1575, %1568
  br i1 %1581, label %1582, label %1584

1582:                                             ; preds = %1580
  %1583 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1577, i64 %1568
  store %"struct.v8::internal::CoverageBlock"* %1583, %"struct.v8::internal::CoverageBlock"** %1569, align 8
  br label %1584

1584:                                             ; preds = %1582, %1580, %1578
  %1585 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %665, align 8
  %1586 = icmp eq %"struct.v8::internal::CoverageBlock"* %1585, null
  br i1 %1586, label %1590, label %1587

1587:                                             ; preds = %1584
  %1588 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1585 to i64
  store i64 %1588, i64* %667, align 8
  %1589 = bitcast %"struct.v8::internal::CoverageBlock"* %1585 to i8*
  call void @_ZdlPv(i8* %1589) #14
  br label %1590

1590:                                             ; preds = %1587, %1584
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %658) #12
  br label %1591

1591:                                             ; preds = %1590, %1245, %1031
  %1592 = phi i32* [ %1034, %1031 ], [ %1038, %1245 ], [ %1038, %1590 ]
  %1593 = phi i64 [ %1032, %1031 ], [ %1036, %1245 ], [ %1036, %1590 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %668) #12
  %1594 = load atomic i32, i32* %1592 acquire, align 4
  %1595 = zext i32 %1594 to i64
  %1596 = or i64 %1593, %1595
  %1597 = add i64 %1596, 31
  %1598 = inttoptr i64 %1597 to i32*
  %1599 = load i32, i32* %1598, align 4
  %1600 = zext i32 %1599 to i64
  %1601 = or i64 %1593, %1600
  store i64 %1601, i64* %669, align 8
  %1602 = add i64 %1601, 3
  %1603 = inttoptr i64 %1602 to i32*
  %1604 = load i32, i32* %1603, align 4
  %1605 = icmp sgt i32 %1604, 0
  br i1 %1605, label %1606, label %1614

1606:                                             ; preds = %1591, %1606
  %1607 = phi i32 [ %1608, %1606 ], [ 0, %1591 ]
  call void @_ZN2v88internal12CoverageInfo15ResetBlockCountEi(%"class.v8::internal::CoverageInfo"* nonnull %3, i32 %1607) #12
  %1608 = add nuw nsw i32 %1607, 1
  %1609 = load i64, i64* %669, align 8
  %1610 = add i64 %1609, 3
  %1611 = inttoptr i64 %1610 to i32*
  %1612 = load i32, i32* %1611, align 4
  %1613 = icmp slt i32 %1608, %1612
  br i1 %1613, label %1606, label %1614

1614:                                             ; preds = %1606, %1017, %1591
  %1615 = phi i8* [ %668, %1591 ], [ %567, %1017 ], [ %668, %1606 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1615) #12
  br label %1616

1616:                                             ; preds = %1614, %1021
  %1617 = icmp ne i32 %1018, 0
  %1618 = load i64*, i64** %556, align 8
  %1619 = load i64*, i64** %557, align 8
  %1620 = icmp eq i64* %1618, %1619
  %1621 = ptrtoint i64* %1618 to i64
  %1622 = ptrtoint i64* %1619 to i64
  br i1 %1620, label %1623, label %1627

1623:                                             ; preds = %1616
  %1624 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %579, align 8
  %1625 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %580, align 8
  %1626 = icmp ne %"struct.v8::internal::CoverageBlock"* %1624, %1625
  br label %1646

1627:                                             ; preds = %1616
  %1628 = getelementptr inbounds i64, i64* %1619, i64 -1
  %1629 = load i64, i64* %1628, align 8
  %1630 = load i64, i64* %806, align 8
  %1631 = load i64, i64* %807, align 8
  %1632 = sub i64 %1630, %1631
  %1633 = sdiv exact i64 %1632, 56
  %1634 = icmp ugt i64 %1633, %1629
  br i1 %1634, label %1637, label %1635

1635:                                             ; preds = %1627
  %1636 = bitcast %"class.std::__1::vector.0"* %789 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"* %1636) #13
  unreachable

1637:                                             ; preds = %1627
  %1638 = inttoptr i64 %1631 to %"struct.v8::internal::CoverageFunction"*
  %1639 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1638, i64 %1629, i32 2
  %1640 = load i32, i32* %1639, align 8
  %1641 = icmp ne i32 %1640, 0
  %1642 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %579, align 8
  %1643 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %580, align 8
  %1644 = icmp ne %"struct.v8::internal::CoverageBlock"* %1642, %1643
  %1645 = or i1 %1641, %1644
  br label %1646

1646:                                             ; preds = %1637, %1623
  %1647 = phi i1 [ %1626, %1623 ], [ %1645, %1637 ]
  %1648 = or i1 %1617, %1647
  %1649 = load i32, i32* %559, align 8
  %1650 = load i32, i32* %560, align 4
  %1651 = icmp slt i32 %1649, %1650
  %1652 = icmp sgt i32 %1649, -1
  %1653 = and i1 %1652, %1651
  %1654 = and i1 %1648, %1653
  br i1 %1654, label %1655, label %1752

1655:                                             ; preds = %1646
  %1656 = load i64, i64* %806, align 8
  %1657 = load i64, i64* %807, align 8
  %1658 = sub i64 %1656, %1657
  %1659 = sdiv exact i64 %1658, 56
  %1660 = load i64*, i64** %670, align 8
  %1661 = icmp ult i64* %1619, %1660
  %1662 = ptrtoint i64* %1660 to i64
  br i1 %1661, label %1663, label %1666

1663:                                             ; preds = %1655
  store i64 %1659, i64* %1619, align 8
  %1664 = getelementptr inbounds i64, i64* %1619, i64 1
  %1665 = ptrtoint i64* %1664 to i64
  store i64 %1665, i64* %676, align 8
  br label %1707

1666:                                             ; preds = %1655
  %1667 = sub i64 %1622, %1621
  %1668 = ashr exact i64 %1667, 3
  %1669 = add nsw i64 %1668, 1
  %1670 = icmp ugt i64 %1669, 2305843009213693951
  br i1 %1670, label %1671, label %1673

1671:                                             ; preds = %1666
  %1672 = bitcast %"class.std::__1::vector.119"* %39 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %1672) #13
  unreachable

1673:                                             ; preds = %1666
  %1674 = sub i64 %1662, %1621
  %1675 = ashr exact i64 %1674, 3
  %1676 = icmp ult i64 %1675, 1152921504606846975
  br i1 %1676, label %1677, label %1685

1677:                                             ; preds = %1673
  %1678 = ashr exact i64 %1674, 2
  %1679 = icmp ult i64 %1678, %1669
  %1680 = select i1 %1679, i64 %1669, i64 %1678
  %1681 = icmp eq i64 %1680, 0
  br i1 %1681, label %1690, label %1682

1682:                                             ; preds = %1677
  %1683 = icmp ugt i64 %1680, 2305843009213693951
  br i1 %1683, label %1684, label %1685

1684:                                             ; preds = %1682
  call void @abort() #13
  unreachable

1685:                                             ; preds = %1682, %1673
  %1686 = phi i64 [ %1680, %1682 ], [ 2305843009213693951, %1673 ]
  %1687 = shl i64 %1686, 3
  %1688 = call i8* @_Znwm(i64 %1687) #14
  %1689 = bitcast i8* %1688 to i64*
  br label %1690

1690:                                             ; preds = %1685, %1677
  %1691 = phi i64 [ %1686, %1685 ], [ 0, %1677 ]
  %1692 = phi i8* [ %1688, %1685 ], [ null, %1677 ]
  %1693 = phi i64* [ %1689, %1685 ], [ null, %1677 ]
  %1694 = getelementptr inbounds i64, i64* %1693, i64 %1668
  %1695 = getelementptr inbounds i64, i64* %1693, i64 %1691
  %1696 = ptrtoint i64* %1695 to i64
  store i64 %1659, i64* %1694, align 8
  %1697 = getelementptr inbounds i64, i64* %1694, i64 1
  %1698 = ptrtoint i64* %1697 to i64
  %1699 = ptrtoint i64* %1693 to i64
  %1700 = icmp sgt i64 %1667, 0
  br i1 %1700, label %1701, label %1703

1701:                                             ; preds = %1690
  %1702 = bitcast i64* %1618 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1692, i8* align 8 %1702, i64 %1667, i1 false) #12
  br label %1703

1703:                                             ; preds = %1701, %1690
  store i64 %1699, i64* %671, align 8
  store i64 %1698, i64* %676, align 8
  store i64 %1696, i64* %672, align 8
  %1704 = icmp eq i64* %1618, null
  br i1 %1704, label %1707, label %1705

1705:                                             ; preds = %1703
  %1706 = bitcast i64* %1618 to i8*
  call void @_ZdlPv(i8* %1706) #14
  br label %1707

1707:                                             ; preds = %1663, %1703, %1705
  %1708 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %805, align 8
  %1709 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %808, align 8
  %1710 = icmp ult %"struct.v8::internal::CoverageFunction"* %1708, %1709
  br i1 %1710, label %1711, label %1751

1711:                                             ; preds = %1707
  %1712 = bitcast %"struct.v8::internal::CoverageFunction"* %1708 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1712, i8* nonnull align 8 %558, i64 24, i1 false) #12
  %1713 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1708, i64 0, i32 5
  %1714 = bitcast %"class.std::__1::vector.3"* %1713 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %1714, i8 0, i64 24, i1 false) #12
  %1715 = load i64, i64* %581, align 8
  %1716 = load i64, i64* %582, align 8
  %1717 = sub i64 %1715, %1716
  %1718 = sdiv exact i64 %1717, 12
  %1719 = icmp eq i64 %1717, 0
  br i1 %1719, label %1746, label %1720

1720:                                             ; preds = %1711
  %1721 = icmp ugt i64 %1718, 1537228672809129301
  br i1 %1721, label %1722, label %1724

1722:                                             ; preds = %1720
  %1723 = bitcast %"class.std::__1::vector.3"* %1713 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %1723) #13
  unreachable

1724:                                             ; preds = %1720
  %1725 = call i8* @_Znwm(i64 %1717) #14
  %1726 = bitcast i8* %1725 to %"struct.v8::internal::CoverageBlock"*
  %1727 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1708, i64 0, i32 5, i32 0, i32 1
  %1728 = bitcast %"struct.v8::internal::CoverageBlock"** %1727 to i8**
  store i8* %1725, i8** %1728, align 8
  %1729 = bitcast %"class.std::__1::vector.3"* %1713 to i8**
  store i8* %1725, i8** %1729, align 8
  %1730 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1726, i64 %1718
  %1731 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1708, i64 0, i32 5, i32 0, i32 2, i32 0, i32 0
  store %"struct.v8::internal::CoverageBlock"* %1730, %"struct.v8::internal::CoverageBlock"** %1731, align 8
  %1732 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %579, align 8
  %1733 = load i64, i64* %581, align 8
  %1734 = bitcast %"struct.v8::internal::CoverageBlock"** %1727 to i64*
  %1735 = ptrtoint i8* %1725 to i64
  %1736 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1732 to i64
  %1737 = sub i64 %1733, %1736
  %1738 = icmp sgt i64 %1737, 0
  br i1 %1738, label %1739, label %1744

1739:                                             ; preds = %1724
  %1740 = udiv exact i64 %1737, 12
  %1741 = bitcast %"struct.v8::internal::CoverageBlock"* %1732 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %1725, i8* align 4 %1741, i64 %1737, i1 false) #12
  %1742 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1726, i64 %1740
  %1743 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1742 to i64
  br label %1744

1744:                                             ; preds = %1739, %1724
  %1745 = phi i64 [ %1743, %1739 ], [ %1735, %1724 ]
  store i64 %1745, i64* %1734, align 8
  br label %1746

1746:                                             ; preds = %1744, %1711
  %1747 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1708, i64 0, i32 6
  %1748 = load i8, i8* %570, align 8, !range !2
  store i8 %1748, i8* %1747, align 8
  %1749 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1708, i64 1
  %1750 = ptrtoint %"struct.v8::internal::CoverageFunction"* %1749 to i64
  store i64 %1750, i64* %806, align 8
  br label %1752

1751:                                             ; preds = %1707
  call void @_ZNSt3__16vectorIN2v88internal16CoverageFunctionENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRS3_EEEvDpOT_(%"class.std::__1::vector.0"* %789, %"struct.v8::internal::CoverageFunction"* nonnull dereferenceable(56) %40) #12
  br label %1752

1752:                                             ; preds = %1646, %1751, %1746
  %1753 = load i8, i8* @_ZN2v88internal25FLAG_trace_block_coverageE, align 1, !range !2
  %1754 = icmp eq i8 %1753, 0
  br i1 %1754, label %1782, label %1755

1755:                                             ; preds = %1752
  %1756 = inttoptr i64 %976 to i8**
  %1757 = load i8*, i8** %1756, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %673) #12
  %1758 = load i64*, i64** %562, align 8
  %1759 = load i64, i64* %1758, align 8
  store i64 %1759, i64* %674, align 8
  %1760 = call i8* @_ZN2v88internal6String9ToCStringENS0_14AllowNullsFlagENS0_14RobustnessFlagEPi(%"class.v8::internal::String"* nonnull %675, i32 1, i32 0, i32* null) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %673) #12
  %1761 = zext i1 %1653 to i32
  %1762 = zext i1 %1648 to i32
  call void (i8*, ...) @_ZN2v88internal6PrintFEPKcz(i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.4, i64 0, i64 0), i8* %1760, i8* %1757, i32 %1761, i32 %1762) #12
  %1763 = load i32, i32* %559, align 8
  %1764 = load i32, i32* %560, align 4
  %1765 = load i32, i32* %561, align 8
  call void (i8*, ...) @_ZN2v88internal6PrintFEPKcz(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.5, i64 0, i64 0), i32 %1763, i32 %1764, i32 %1765) #12
  %1766 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %605, align 8
  %1767 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %580, align 8
  %1768 = icmp eq %"struct.v8::internal::CoverageBlock"* %1766, %1767
  br i1 %1768, label %1769, label %1772

1769:                                             ; preds = %1772, %1755
  %1770 = icmp eq i8* %1760, null
  br i1 %1770, label %1782, label %1771

1771:                                             ; preds = %1769
  call void @_ZdaPv(i8* nonnull %1760) #14
  br label %1782

1772:                                             ; preds = %1755, %1772
  %1773 = phi %"struct.v8::internal::CoverageBlock"* [ %1780, %1772 ], [ %1766, %1755 ]
  %1774 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1773, i64 0, i32 0
  %1775 = load i32, i32* %1774, align 4
  %1776 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1773, i64 0, i32 1
  %1777 = load i32, i32* %1776, align 4
  %1778 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1773, i64 0, i32 2
  %1779 = load i32, i32* %1778, align 4
  call void (i8*, ...) @_ZN2v88internal6PrintFEPKcz(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.5, i64 0, i64 0), i32 %1775, i32 %1777, i32 %1779) #12
  %1780 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1773, i64 1
  %1781 = icmp eq %"struct.v8::internal::CoverageBlock"* %1780, %1767
  br i1 %1781, label %1769, label %1772

1782:                                             ; preds = %1771, %1769, %1752
  %1783 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %605, align 8
  %1784 = icmp eq %"struct.v8::internal::CoverageBlock"* %1783, null
  br i1 %1784, label %1788, label %1785

1785:                                             ; preds = %1782
  %1786 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1783 to i64
  store i64 %1786, i64* %581, align 8
  %1787 = bitcast %"struct.v8::internal::CoverageBlock"* %1783 to i8*
  call void @_ZdlPv(i8* %1787) #14
  br label %1788

1788:                                             ; preds = %1782, %1785
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %558) #12
  %1789 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %974, i64 1
  %1790 = icmp eq %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1789, %802
  br i1 %1790, label %965, label %1791

1791:                                             ; preds = %1788
  %1792 = load i64*, i64** %556, align 8
  %1793 = load i64*, i64** %557, align 8
  br label %971

1794:                                             ; preds = %965
  %1795 = load %"struct.v8::internal::CoverageScript"*, %"struct.v8::internal::CoverageScript"** %528, align 8
  %1796 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %1795, i64 -1, i32 1
  %1797 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %1796, i64 0, i32 0, i32 0
  %1798 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %1797, align 8
  %1799 = icmp eq %"struct.v8::internal::CoverageFunction"* %1798, null
  br i1 %1799, label %1823, label %1800

1800:                                             ; preds = %1794
  %1801 = bitcast %"struct.v8::internal::CoverageFunction"* %1798 to i8*
  %1802 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %1795, i64 -1, i32 1, i32 0, i32 1
  %1803 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %1802, align 8
  %1804 = icmp eq %"struct.v8::internal::CoverageFunction"* %1803, %1798
  br i1 %1804, label %1821, label %1805

1805:                                             ; preds = %1800, %1816
  %1806 = phi %"struct.v8::internal::CoverageFunction"* [ %1807, %1816 ], [ %1803, %1800 ]
  %1807 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1806, i64 -1
  %1808 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1806, i64 -1, i32 5, i32 0, i32 0
  %1809 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %1808, align 8
  %1810 = icmp eq %"struct.v8::internal::CoverageBlock"* %1809, null
  br i1 %1810, label %1816, label %1811

1811:                                             ; preds = %1805
  %1812 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1809 to i64
  %1813 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1806, i64 -1, i32 5, i32 0, i32 1
  %1814 = bitcast %"struct.v8::internal::CoverageBlock"** %1813 to i64*
  store i64 %1812, i64* %1814, align 8
  %1815 = bitcast %"struct.v8::internal::CoverageBlock"* %1809 to i8*
  call void @_ZdlPv(i8* %1815) #14
  br label %1816

1816:                                             ; preds = %1811, %1805
  %1817 = icmp eq %"struct.v8::internal::CoverageFunction"* %1807, %1798
  br i1 %1817, label %1818, label %1805

1818:                                             ; preds = %1816
  %1819 = bitcast %"class.std::__1::vector.0"* %1796 to i8**
  %1820 = load i8*, i8** %1819, align 8
  br label %1821

1821:                                             ; preds = %1818, %1800
  %1822 = phi i8* [ %1820, %1818 ], [ %1801, %1800 ]
  store %"struct.v8::internal::CoverageFunction"* %1798, %"struct.v8::internal::CoverageFunction"** %1802, align 8
  call void @_ZdlPv(i8* %1822) #14
  br label %1823

1823:                                             ; preds = %1794, %1821
  %1824 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %1795, i64 -1
  store %"struct.v8::internal::CoverageScript"* %1824, %"struct.v8::internal::CoverageScript"** %528, align 8
  br label %1825

1825:                                             ; preds = %1823, %965
  %1826 = load i64*, i64** %556, align 8
  %1827 = icmp eq i64* %1826, null
  br i1 %1827, label %1831, label %1828

1828:                                             ; preds = %1825
  %1829 = ptrtoint i64* %1826 to i64
  store i64 %1829, i64* %676, align 8
  %1830 = bitcast i64* %1826 to i8*
  call void @_ZdlPv(i8* %1830) #14
  br label %1831

1831:                                             ; preds = %1825, %1828
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %555) #12
  %1832 = load %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"*, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"** %549, align 8
  %1833 = icmp eq %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1832, null
  br i1 %1833, label %1837, label %1834

1834:                                             ; preds = %1831
  %1835 = ptrtoint %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1832 to i64
  store i64 %1835, i64* %541, align 8
  %1836 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1832 to i8*
  call void @_ZdlPv(i8* %1836) #14
  br label %1837

1837:                                             ; preds = %1831, %1834
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %533) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %525) #12
  %1838 = getelementptr inbounds %"class.v8::internal::Handle", %"class.v8::internal::Handle"* %773, i64 1
  %1839 = icmp eq %"class.v8::internal::Handle"* %1838, %520
  br i1 %1839, label %757, label %772
}

declare void @_ZN2v88internal7Isolate35SetFeedbackVectorsForProfilingToolsENS0_6ObjectE(%"class.v8::internal::Isolate"*, i64) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare i64* @_ZN2v88internal9ArrayList3NewEPNS0_7IsolateEi(%"class.v8::internal::Isolate"*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.v8::internal::Coverage"* @_ZN2v88internal8Coverage17CollectBestEffortEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  %2 = tail call %"class.v8::internal::Coverage"* @_ZN2v88internal8Coverage7CollectEPNS0_7IsolateENS_5debug12CoverageModeE(%"class.v8::internal::Isolate"* %0, i32 0)
  ret %"class.v8::internal::Coverage"* %2
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare void @_ZN2v88internal6Script8IteratorC1EPNS0_7IsolateE(%"class.v8::internal::Script::Iterator"*, %"class.v8::internal::Isolate"*) unnamed_addr #1

declare i64 @_ZN2v88internal6Script8Iterator4NextEv(%"class.v8::internal::Script::Iterator"*) local_unnamed_addr #1

declare zeroext i1 @_ZNK2v88internal6Script16IsUserJavaScriptEv(%"class.v8::internal::Script"*) local_unnamed_addr #1

declare void @_ZN2v88internal18SharedFunctionInfo14ScriptIteratorC1EPNS0_7IsolateENS0_6ScriptE(%"class.v8::internal::SharedFunctionInfo::ScriptIterator"*, %"class.v8::internal::Isolate"*, i64) unnamed_addr #1

declare i64 @_ZN2v88internal18SharedFunctionInfo14ScriptIterator4NextEv(%"class.v8::internal::SharedFunctionInfo::ScriptIterator"*) local_unnamed_addr #1

declare i64* @_ZN2v88internal18SharedFunctionInfo9DebugNameENS0_6HandleIS1_EE(i64*) local_unnamed_addr #1

declare zeroext i1 @_ZNK2v88internal18SharedFunctionInfo15HasCoverageInfoEv(%"class.v8::internal::SharedFunctionInfo"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8Coverage10SelectModeEPNS0_7IsolateENS_5debug12CoverageModeE(%"class.v8::internal::Isolate"*, i32) local_unnamed_addr #0 align 2 {
  %3 = alloca { i64*, i8 }, align 8
  %4 = alloca %"class.std::__1::vector.1230", align 8
  %5 = alloca %"class.v8::internal::HeapObjectIterator", align 8
  %6 = alloca { i64*, i8 }, align 8
  %7 = bitcast { i64*, i8 }* %6 to %"class.v8::internal::IsCompiledScope"*
  %8 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 54, i32 0, i32 0, i32 0, i32 0
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = icmp eq i32 %9, %1
  br i1 %10, label %13, label %11

11:                                               ; preds = %2
  tail call void @_ZN2v88internal7Isolate42CollectSourcePositionsForAllBytecodeArraysEv(%"class.v8::internal::Isolate"* %0) #12
  %12 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 110
  store i8 1, i8* %12, align 8
  br label %13

13:                                               ; preds = %2, %11
  switch i32 %1, label %259 [
    i32 0, label %14
    i32 4, label %23
    i32 3, label %23
    i32 2, label %23
    i32 1, label %23
  ]

14:                                               ; preds = %13
  %15 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 68
  %16 = load %"class.v8::internal::Debug"*, %"class.v8::internal::Debug"** %15, align 8
  tail call void @_ZN2v88internal5Debug22RemoveAllCoverageInfosEv(%"class.v8::internal::Debug"* %16) #12
  %17 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 109
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 1
  br i1 %19, label %259, label %20

20:                                               ; preds = %14
  %21 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 0, i32 7, i32 0, i64 4
  %22 = load i64, i64* %21, align 8
  tail call void @_ZN2v88internal7Isolate35SetFeedbackVectorsForProfilingToolsENS0_6ObjectE(%"class.v8::internal::Isolate"* %0, i64 %22) #12
  br label %259

23:                                               ; preds = %13, %13, %13, %13
  %24 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31
  %25 = bitcast %"struct.v8::internal::HandleScopeData"* %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %28 = load i64*, i64** %27, align 8
  %29 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 2
  %30 = load i32, i32* %29, align 8
  %31 = add nsw i32 %30, 1
  store i32 %31, i32* %29, align 8
  tail call void @_ZN2v88internal11Deoptimizer13DeoptimizeAllEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #12
  %32 = bitcast %"class.std::__1::vector.1230"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %32) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %32, i8 0, i64 24, i1 false) #12
  %33 = bitcast %"class.v8::internal::HeapObjectIterator"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %33) #12
  %34 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 2
  call void @_ZN2v88internal18HeapObjectIteratorC1EPNS0_4HeapENS1_20HeapObjectsFilteringE(%"class.v8::internal::HeapObjectIterator"* nonnull %5, %"class.v8::internal::Heap"* %34, i32 0) #12
  %35 = call i64 @_ZN2v88internal18HeapObjectIterator4NextEv(%"class.v8::internal::HeapObjectIterator"* nonnull %5) #12
  %36 = trunc i64 %35 to i32
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %46, label %38

38:                                               ; preds = %23
  %39 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %40 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %41 = getelementptr inbounds %"class.std::__1::vector.1230", %"class.std::__1::vector.1230"* %4, i64 0, i32 0, i32 1
  %42 = getelementptr inbounds %"class.std::__1::vector.1230", %"class.std::__1::vector.1230"* %4, i64 0, i32 0, i32 2, i32 0, i32 0
  %43 = bitcast %"class.v8::internal::Handle.1232"** %41 to i64*
  %44 = bitcast %"class.std::__1::vector.1230"* %4 to i64*
  %45 = bitcast %"class.v8::internal::Handle.1232"** %42 to i64*
  br label %60

46:                                               ; preds = %215, %23
  call void @_ZN2v88internal18HeapObjectIteratorD1Ev(%"class.v8::internal::HeapObjectIterator"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %33) #12
  %47 = getelementptr inbounds %"class.std::__1::vector.1230", %"class.std::__1::vector.1230"* %4, i64 0, i32 0, i32 0
  %48 = load %"class.v8::internal::Handle.1232"*, %"class.v8::internal::Handle.1232"** %47, align 8
  %49 = getelementptr inbounds %"class.std::__1::vector.1230", %"class.std::__1::vector.1230"* %4, i64 0, i32 0, i32 1
  %50 = load %"class.v8::internal::Handle.1232"*, %"class.v8::internal::Handle.1232"** %49, align 8
  %51 = icmp eq %"class.v8::internal::Handle.1232"* %48, %50
  br i1 %51, label %219, label %52

52:                                               ; preds = %46
  %53 = bitcast { i64*, i8 }* %6 to i8*
  %54 = bitcast { i64*, i8 }* %3 to i8*
  %55 = bitcast { i64*, i8 }* %3 to %"class.v8::internal::IsCompiledScope"*
  %56 = bitcast { i64*, i8 }* %3 to i64*
  %57 = getelementptr inbounds { i64*, i8 }, { i64*, i8 }* %3, i64 0, i32 1
  %58 = bitcast { i64*, i8 }* %6 to i64*
  %59 = getelementptr inbounds { i64*, i8 }, { i64*, i8 }* %6, i64 0, i32 1
  br label %241

60:                                               ; preds = %38, %215
  %61 = phi i64 [ %35, %38 ], [ %216, %215 ]
  %62 = and i64 %61, -4294967296
  %63 = add i64 %61, -1
  %64 = inttoptr i64 %63 to i32*
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = zext i32 %65 to i64
  %67 = or i64 %62, %66
  %68 = add i64 %67, 7
  %69 = inttoptr i64 %68 to i16*
  %70 = load atomic i16, i16* %69 monotonic, align 2
  %71 = add i16 %70, -1059
  %72 = icmp ult i16 %71, 15
  br i1 %72, label %73, label %190

73:                                               ; preds = %60
  %74 = add i64 %61, 11
  %75 = inttoptr i64 %74 to i32*
  %76 = load atomic i32, i32* %75 monotonic, align 4
  %77 = zext i32 %76 to i64
  %78 = or i64 %62, %77
  %79 = add i64 %78, 3
  %80 = inttoptr i64 %79 to i32*
  %81 = load atomic i32, i32* %80 acquire, align 4
  %82 = zext i32 %81 to i64
  %83 = or i64 %62, %82
  %84 = icmp eq i32 %81, 170
  br i1 %84, label %215, label %85

85:                                               ; preds = %73
  %86 = and i64 %82, 1
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %99, label %88

88:                                               ; preds = %85
  %89 = add i64 %83, -1
  %90 = inttoptr i64 %89 to i32*
  %91 = load atomic i32, i32* %90 monotonic, align 4
  %92 = zext i32 %91 to i64
  %93 = or i64 %62, %92
  %94 = add i64 %93, 7
  %95 = inttoptr i64 %94 to i16*
  %96 = load atomic i16, i16* %95 monotonic, align 2
  %97 = add i16 %96, -157
  %98 = icmp ugt i16 %97, 1
  br i1 %98, label %99, label %215

99:                                               ; preds = %85, %88
  %100 = add i64 %61, 19
  %101 = inttoptr i64 %100 to i32*
  %102 = load i32, i32* %101, align 4
  %103 = zext i32 %102 to i64
  %104 = or i64 %62, %103
  %105 = add i64 %104, 3
  %106 = inttoptr i64 %105 to i32*
  %107 = load i32, i32* %106, align 4
  %108 = zext i32 %107 to i64
  %109 = or i64 %62, %108
  %110 = add i64 %109, -1
  %111 = inttoptr i64 %110 to i32*
  %112 = load atomic i32, i32* %111 monotonic, align 4
  %113 = zext i32 %112 to i64
  %114 = or i64 %62, %113
  %115 = add i64 %114, 7
  %116 = inttoptr i64 %115 to i16*
  %117 = load atomic i16, i16* %116 monotonic, align 2
  %118 = icmp eq i16 %117, 129
  br i1 %118, label %119, label %215

119:                                              ; preds = %99
  %120 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %39, align 8
  %121 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %120, null
  br i1 %121, label %125, label %122

122:                                              ; preds = %119
  %123 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %120, i64 %61) #12
  %124 = ptrtoint i64* %123 to i64
  br label %136

125:                                              ; preds = %119
  %126 = load i64*, i64** %40, align 8
  %127 = load i64*, i64** %27, align 8
  %128 = icmp eq i64* %126, %127
  br i1 %128, label %129, label %131

129:                                              ; preds = %125
  %130 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #12
  br label %131

131:                                              ; preds = %129, %125
  %132 = phi i64* [ %130, %129 ], [ %126, %125 ]
  %133 = ptrtoint i64* %132 to i64
  %134 = add i64 %133, 8
  %135 = inttoptr i64 %134 to i64*
  store i64* %135, i64** %40, align 8
  store i64 %61, i64* %132, align 8
  br label %136

136:                                              ; preds = %122, %131
  %137 = phi i64 [ %124, %122 ], [ %133, %131 ]
  %138 = load %"class.v8::internal::Handle.1232"*, %"class.v8::internal::Handle.1232"** %41, align 8
  %139 = load %"class.v8::internal::Handle.1232"*, %"class.v8::internal::Handle.1232"** %42, align 8
  %140 = icmp ult %"class.v8::internal::Handle.1232"* %138, %139
  %141 = ptrtoint %"class.v8::internal::Handle.1232"* %139 to i64
  br i1 %140, label %142, label %146

142:                                              ; preds = %136
  %143 = bitcast %"class.v8::internal::Handle.1232"* %138 to i64*
  store i64 %137, i64* %143, align 8
  %144 = getelementptr inbounds %"class.v8::internal::Handle.1232", %"class.v8::internal::Handle.1232"* %138, i64 1
  %145 = ptrtoint %"class.v8::internal::Handle.1232"* %144 to i64
  store i64 %145, i64* %43, align 8
  br label %215

146:                                              ; preds = %136
  %147 = ptrtoint %"class.v8::internal::Handle.1232"* %138 to i64
  %148 = load i64, i64* %44, align 8
  %149 = sub i64 %147, %148
  %150 = ashr exact i64 %149, 3
  %151 = add nsw i64 %150, 1
  %152 = icmp ugt i64 %151, 2305843009213693951
  br i1 %152, label %153, label %155

153:                                              ; preds = %146
  %154 = bitcast %"class.std::__1::vector.1230"* %4 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %154) #13
  unreachable

155:                                              ; preds = %146
  %156 = sub i64 %141, %148
  %157 = ashr exact i64 %156, 3
  %158 = icmp ult i64 %157, 1152921504606846975
  br i1 %158, label %159, label %167

159:                                              ; preds = %155
  %160 = ashr exact i64 %156, 2
  %161 = icmp ult i64 %160, %151
  %162 = select i1 %161, i64 %151, i64 %160
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %172, label %164

164:                                              ; preds = %159
  %165 = icmp ugt i64 %162, 2305843009213693951
  br i1 %165, label %166, label %167

166:                                              ; preds = %164
  call void @abort() #13
  unreachable

167:                                              ; preds = %164, %155
  %168 = phi i64 [ %162, %164 ], [ 2305843009213693951, %155 ]
  %169 = shl i64 %168, 3
  %170 = call i8* @_Znwm(i64 %169) #14
  %171 = bitcast i8* %170 to %"class.v8::internal::Handle.1232"*
  br label %172

172:                                              ; preds = %167, %159
  %173 = phi i64 [ %168, %167 ], [ 0, %159 ]
  %174 = phi i8* [ %170, %167 ], [ null, %159 ]
  %175 = phi %"class.v8::internal::Handle.1232"* [ %171, %167 ], [ null, %159 ]
  %176 = getelementptr inbounds %"class.v8::internal::Handle.1232", %"class.v8::internal::Handle.1232"* %175, i64 %150
  %177 = getelementptr inbounds %"class.v8::internal::Handle.1232", %"class.v8::internal::Handle.1232"* %175, i64 %173
  %178 = ptrtoint %"class.v8::internal::Handle.1232"* %177 to i64
  %179 = bitcast %"class.v8::internal::Handle.1232"* %176 to i64*
  store i64 %137, i64* %179, align 8
  %180 = getelementptr inbounds %"class.v8::internal::Handle.1232", %"class.v8::internal::Handle.1232"* %176, i64 1
  %181 = ptrtoint %"class.v8::internal::Handle.1232"* %180 to i64
  %182 = ptrtoint %"class.v8::internal::Handle.1232"* %175 to i64
  %183 = icmp sgt i64 %149, 0
  br i1 %183, label %184, label %186

184:                                              ; preds = %172
  %185 = inttoptr i64 %148 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %174, i8* align 8 %185, i64 %149, i1 false) #12
  br label %186

186:                                              ; preds = %184, %172
  store i64 %182, i64* %44, align 8
  store i64 %181, i64* %43, align 8
  store i64 %178, i64* %45, align 8
  %187 = icmp eq i64 %148, 0
  br i1 %187, label %215, label %188

188:                                              ; preds = %186
  %189 = inttoptr i64 %148 to i8*
  call void @_ZdlPv(i8* %189) #14
  br label %215

190:                                              ; preds = %60
  switch i32 %1, label %204 [
    i32 4, label %191
    i32 2, label %191
  ]

191:                                              ; preds = %190, %190
  %192 = load atomic i32, i32* %64 monotonic, align 4
  %193 = zext i32 %192 to i64
  %194 = or i64 %62, %193
  %195 = add i64 %194, 7
  %196 = inttoptr i64 %195 to i16*
  %197 = load atomic i16, i16* %196 monotonic, align 2
  %198 = icmp eq i16 %197, 179
  br i1 %198, label %199, label %204

199:                                              ; preds = %191
  %200 = add i64 %61, 27
  %201 = inttoptr i64 %200 to i32*
  %202 = load atomic i32, i32* %201 monotonic, align 4
  %203 = and i32 %202, -67108865
  store atomic volatile i32 %203, i32* %201 monotonic, align 4
  br label %215

204:                                              ; preds = %190, %191
  %205 = load atomic i32, i32* %64 monotonic, align 4
  %206 = zext i32 %205 to i64
  %207 = or i64 %62, %206
  %208 = add i64 %207, 7
  %209 = inttoptr i64 %208 to i16*
  %210 = load atomic i16, i16* %209 monotonic, align 2
  %211 = icmp eq i16 %210, 167
  br i1 %211, label %212, label %215

212:                                              ; preds = %204
  %213 = add i64 %61, 7
  %214 = inttoptr i64 %213 to i32*
  store i32 0, i32* %214, align 4
  br label %215

215:                                              ; preds = %73, %88, %99, %142, %186, %188, %204, %212, %199
  %216 = call i64 @_ZN2v88internal18HeapObjectIterator4NextEv(%"class.v8::internal::HeapObjectIterator"* nonnull %5) #12
  %217 = trunc i64 %216 to i32
  %218 = icmp eq i32 %217, 0
  br i1 %218, label %46, label %60

219:                                              ; preds = %256, %46
  call void @_ZN2v88internal7Isolate33MaybeInitializeVectorListFromHeapEv(%"class.v8::internal::Isolate"* %0) #12
  %220 = load %"class.v8::internal::Handle.1232"*, %"class.v8::internal::Handle.1232"** %47, align 8
  %221 = icmp eq %"class.v8::internal::Handle.1232"* %220, null
  br i1 %221, label %226, label %222

222:                                              ; preds = %219
  %223 = ptrtoint %"class.v8::internal::Handle.1232"* %220 to i64
  %224 = bitcast %"class.v8::internal::Handle.1232"** %49 to i64*
  store i64 %223, i64* %224, align 8
  %225 = bitcast %"class.v8::internal::Handle.1232"* %220 to i8*
  call void @_ZdlPv(i8* %225) #14
  br label %226

226:                                              ; preds = %219, %222
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %32) #12
  %227 = icmp eq %"class.v8::internal::Isolate"* %0, null
  br i1 %227, label %259, label %228

228:                                              ; preds = %226
  %229 = inttoptr i64 %26 to i64*
  %230 = getelementptr inbounds %"struct.v8::internal::HandleScopeData", %"struct.v8::internal::HandleScopeData"* %24, i64 0, i32 0
  %231 = load i64*, i64** %230, align 8
  store i64 %26, i64* %25, align 8
  %232 = load i32, i32* %29, align 8
  %233 = add nsw i32 %232, -1
  store i32 %233, i32* %29, align 8
  %234 = load i64*, i64** %27, align 8
  %235 = icmp eq i64* %234, %28
  br i1 %235, label %238, label %236

236:                                              ; preds = %228
  store i64* %28, i64** %27, align 8
  call void @_ZN2v88internal11HandleScope16DeleteExtensionsEPNS0_7IsolateE(%"class.v8::internal::Isolate"* nonnull %0) #12
  %237 = load i64*, i64** %230, align 8
  br label %238

238:                                              ; preds = %236, %228
  %239 = phi i64* [ %237, %236 ], [ %229, %228 ]
  %240 = phi i64* [ %28, %236 ], [ %231, %228 ]
  call void @_ZN2v88internal11HandleScope8ZapRangeEPmS2_(i64* %239, i64* %240) #12
  br label %259

241:                                              ; preds = %52, %256
  %242 = phi %"class.v8::internal::Handle.1232"* [ %48, %52 ], [ %257, %256 ]
  %243 = getelementptr inbounds %"class.v8::internal::Handle.1232", %"class.v8::internal::Handle.1232"* %242, i64 0, i32 0, i32 0
  %244 = load i64*, i64** %243, align 8
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %53) #12
  %245 = load i64, i64* %244, align 8
  %246 = add i64 %245, 11
  %247 = inttoptr i64 %246 to i32*
  %248 = load atomic i32, i32* %247 monotonic, align 4
  %249 = and i64 %245, -4294967296
  %250 = zext i32 %248 to i64
  %251 = or i64 %249, %250
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %54)
  call void @_ZN2v88internal15IsCompiledScopeC2ENS0_18SharedFunctionInfoEPNS0_7IsolateE(%"class.v8::internal::IsCompiledScope"* nonnull %55, i64 %251, %"class.v8::internal::Isolate"* %0) #12
  %252 = load i64, i64* %56, align 8
  %253 = load i8, i8* %57, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %54)
  store i64 %252, i64* %58, align 8
  store i8 %253, i8* %59, align 8
  %254 = icmp eq i8 %253, 0
  br i1 %254, label %255, label %256, !prof !6

255:                                              ; preds = %241
  call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0)) #13
  unreachable

256:                                              ; preds = %241
  call void @_ZN2v88internal10JSFunction20EnsureFeedbackVectorENS0_6HandleIS1_EEPNS0_15IsCompiledScopeE(i64* %244, %"class.v8::internal::IsCompiledScope"* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %53) #12
  %257 = getelementptr inbounds %"class.v8::internal::Handle.1232", %"class.v8::internal::Handle.1232"* %242, i64 1
  %258 = icmp eq %"class.v8::internal::Handle.1232"* %257, %50
  br i1 %258, label %219, label %241

259:                                              ; preds = %238, %226, %14, %20, %13
  store atomic i32 %1, i32* %8 monotonic, align 4
  ret void
}

declare void @_ZN2v88internal7Isolate42CollectSourcePositionsForAllBytecodeArraysEv(%"class.v8::internal::Isolate"*) local_unnamed_addr #1

declare void @_ZN2v88internal5Debug22RemoveAllCoverageInfosEv(%"class.v8::internal::Debug"*) local_unnamed_addr #1

declare void @_ZN2v88internal11Deoptimizer13DeoptimizeAllEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #1

declare void @_ZN2v88internal18HeapObjectIteratorC1EPNS0_4HeapENS1_20HeapObjectsFilteringE(%"class.v8::internal::HeapObjectIterator"*, %"class.v8::internal::Heap"*, i32) unnamed_addr #1

declare i64 @_ZN2v88internal18HeapObjectIterator4NextEv(%"class.v8::internal::HeapObjectIterator"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN2v88internal18HeapObjectIteratorD1Ev(%"class.v8::internal::HeapObjectIterator"*) unnamed_addr #4

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #5

declare void @_ZN2v88internal10JSFunction20EnsureFeedbackVectorENS0_6HandleIS1_EEPNS0_15IsCompiledScopeE(i64*, %"class.v8::internal::IsCompiledScope"*) local_unnamed_addr #1

declare void @_ZN2v88internal7Isolate33MaybeInitializeVectorListFromHeapEv(%"class.v8::internal::Isolate"*) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #6

declare void @_ZN2v88internal23JavaScriptFrameIterator7AdvanceEv(%"class.v8::internal::JavaScriptFrameIterator"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"struct.v8::base::TemplateHashMapEntry.1213"* @_ZN2v84base19TemplateHashMapImplINS_8internal18SharedFunctionInfoEjNS0_18KeyEqualityMatcherINS2_6ObjectEEENS0_23DefaultAllocationPolicyEE14LookupOrInsertIS3_ZNS8_14LookupOrInsertIZNS2_18SharedToCounterMap3AddES3_jEUlvE_EEPNS0_20TemplateHashMapEntryIS3_jEERKS3_jRKT_EUlvE_SC_EESF_SK_jRKT0_RKT1_(%"class.v8::base::TemplateHashMapImpl.1212"*, %"class.v8::internal::SharedFunctionInfo"* dereferenceable(8), i32, %class.anon.1264* dereferenceable(8), %class.anon* dereferenceable(1)) local_unnamed_addr #0 comdat align 2 {
  %6 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl.1212", %"class.v8::base::TemplateHashMapImpl.1212"* %0, i64 0, i32 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = add i32 %7, -1
  %9 = and i32 %8, %2
  %10 = zext i32 %9 to i64
  %11 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl.1212", %"class.v8::base::TemplateHashMapImpl.1212"* %0, i64 0, i32 0, i32 0
  %12 = load %"struct.v8::base::TemplateHashMapEntry.1213"*, %"struct.v8::base::TemplateHashMapEntry.1213"** %11, align 8
  %13 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %12, i64 %10
  %14 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %12, i64 %10, i32 3
  %15 = load i8, i8* %14, align 8, !range !2
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %36, label %17

17:                                               ; preds = %5
  %18 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = trunc i64 %19 to i32
  %21 = zext i32 %8 to i64
  br label %22

22:                                               ; preds = %29, %17
  %23 = phi %"struct.v8::base::TemplateHashMapEntry.1213"* [ %13, %17 ], [ %32, %29 ]
  %24 = phi i64 [ %10, %17 ], [ %31, %29 ]
  %25 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %23, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = trunc i64 %26 to i32
  %28 = icmp eq i32 %20, %27
  br i1 %28, label %36, label %29

29:                                               ; preds = %22
  %30 = add nuw nsw i64 %24, 1
  %31 = and i64 %30, %21
  %32 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %12, i64 %31
  %33 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %12, i64 %31, i32 3
  %34 = load i8, i8* %33, align 8, !range !2
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %36, label %22

36:                                               ; preds = %22, %29, %5
  %37 = phi %"struct.v8::base::TemplateHashMapEntry.1213"* [ %13, %5 ], [ %23, %22 ], [ %32, %29 ]
  %38 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %37, i64 0, i32 3
  %39 = load i8, i8* %38, align 8, !range !2
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %83

41:                                               ; preds = %36
  %42 = getelementptr inbounds %class.anon.1264, %class.anon.1264* %3, i64 0, i32 0
  %43 = load %"class.v8::internal::SharedFunctionInfo"*, %"class.v8::internal::SharedFunctionInfo"** %42, align 8
  %44 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %43, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %45 = load i64, i64* %44, align 8
  %46 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %37, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %45, i64* %46, align 8
  %47 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %37, i64 0, i32 1
  store i32 0, i32* %47, align 8
  %48 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %37, i64 0, i32 2
  store i32 %2, i32* %48, align 4
  store i8 1, i8* %38, align 8
  %49 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl.1212", %"class.v8::base::TemplateHashMapImpl.1212"* %0, i64 0, i32 0, i32 2
  %50 = load i32, i32* %49, align 4
  %51 = add i32 %50, 1
  store i32 %51, i32* %49, align 4
  %52 = lshr i32 %51, 2
  %53 = add i32 %52, %51
  %54 = load i32, i32* %6, align 8
  %55 = icmp ult i32 %53, %54
  br i1 %55, label %83, label %56

56:                                               ; preds = %41
  tail call void @_ZN2v84base19TemplateHashMapImplINS_8internal18SharedFunctionInfoEjNS0_18KeyEqualityMatcherINS2_6ObjectEEENS0_23DefaultAllocationPolicyEE6ResizeEv(%"class.v8::base::TemplateHashMapImpl.1212"* %0) #12
  %57 = load i32, i32* %6, align 8
  %58 = add i32 %57, -1
  %59 = and i32 %58, %2
  %60 = zext i32 %59 to i64
  %61 = load %"struct.v8::base::TemplateHashMapEntry.1213"*, %"struct.v8::base::TemplateHashMapEntry.1213"** %11, align 8
  %62 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %61, i64 %60
  %63 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %61, i64 %60, i32 3
  %64 = load i8, i8* %63, align 8, !range !2
  %65 = icmp eq i8 %64, 0
  br i1 %65, label %83, label %66

66:                                               ; preds = %56
  %67 = trunc i64 %45 to i32
  %68 = zext i32 %58 to i64
  br label %69

69:                                               ; preds = %76, %66
  %70 = phi %"struct.v8::base::TemplateHashMapEntry.1213"* [ %62, %66 ], [ %79, %76 ]
  %71 = phi i64 [ %60, %66 ], [ %78, %76 ]
  %72 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %70, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %73 = load i64, i64* %72, align 8
  %74 = trunc i64 %73 to i32
  %75 = icmp eq i32 %67, %74
  br i1 %75, label %83, label %76

76:                                               ; preds = %69
  %77 = add nuw nsw i64 %71, 1
  %78 = and i64 %77, %68
  %79 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %61, i64 %78
  %80 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %61, i64 %78, i32 3
  %81 = load i8, i8* %80, align 8, !range !2
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %83, label %69

83:                                               ; preds = %76, %69, %36, %56, %41
  %84 = phi %"struct.v8::base::TemplateHashMapEntry.1213"* [ %37, %36 ], [ %37, %41 ], [ %62, %56 ], [ %79, %76 ], [ %70, %69 ]
  ret %"struct.v8::base::TemplateHashMapEntry.1213"* %84
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v84base19TemplateHashMapImplINS_8internal18SharedFunctionInfoEjNS0_18KeyEqualityMatcherINS2_6ObjectEEENS0_23DefaultAllocationPolicyEE6ResizeEv(%"class.v8::base::TemplateHashMapImpl.1212"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl.1212", %"class.v8::base::TemplateHashMapImpl.1212"* %0, i64 0, i32 0, i32 0
  %3 = load %"struct.v8::base::TemplateHashMapEntry.1213"*, %"struct.v8::base::TemplateHashMapEntry.1213"** %2, align 8
  %4 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl.1212", %"class.v8::base::TemplateHashMapImpl.1212"* %0, i64 0, i32 0, i32 1
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %"class.v8::base::TemplateHashMapImpl.1212", %"class.v8::base::TemplateHashMapImpl.1212"* %0, i64 0, i32 0, i32 2
  %7 = load i32, i32* %6, align 4
  %8 = shl i32 %5, 1
  %9 = zext i32 %8 to i64
  %10 = mul nuw nsw i64 %9, 24
  %11 = tail call noalias i8* @malloc(i64 %10) #12
  %12 = bitcast %"class.v8::base::TemplateHashMapImpl.1212"* %0 to i8**
  store i8* %11, i8** %12, align 8
  %13 = icmp eq i8* %11, null
  br i1 %13, label %14, label %15

14:                                               ; preds = %1
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0)) #13
  unreachable

15:                                               ; preds = %1
  store i32 %8, i32* %4, align 8
  %16 = icmp eq i32 %8, 0
  br i1 %16, label %30, label %17

17:                                               ; preds = %15
  %18 = getelementptr inbounds i8, i8* %11, i64 16
  store i8 0, i8* %18, align 8
  %19 = getelementptr inbounds i8, i8* %11, i64 40
  store i8 0, i8* %19, align 8
  %20 = load i32, i32* %4, align 8
  %21 = icmp ugt i32 %20, 2
  br i1 %21, label %22, label %30

22:                                               ; preds = %17, %22
  %23 = phi i64 [ %26, %22 ], [ 2, %17 ]
  %24 = load %"struct.v8::base::TemplateHashMapEntry.1213"*, %"struct.v8::base::TemplateHashMapEntry.1213"** %2, align 8
  %25 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %24, i64 %23, i32 3
  store i8 0, i8* %25, align 8
  %26 = add nuw nsw i64 %23, 1
  %27 = load i32, i32* %4, align 8
  %28 = zext i32 %27 to i64
  %29 = icmp ult i64 %26, %28
  br i1 %29, label %22, label %30

30:                                               ; preds = %22, %17, %15
  %31 = phi i32 [ 0, %15 ], [ %20, %17 ], [ %27, %22 ]
  store i32 0, i32* %6, align 4
  %32 = icmp eq i32 %7, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %115, %30
  %34 = bitcast %"struct.v8::base::TemplateHashMapEntry.1213"* %3 to i8*
  tail call void @free(i8* %34) #12
  ret void

35:                                               ; preds = %30, %115
  %36 = phi i32 [ %116, %115 ], [ %31, %30 ]
  %37 = phi i32 [ %117, %115 ], [ %7, %30 ]
  %38 = phi %"struct.v8::base::TemplateHashMapEntry.1213"* [ %118, %115 ], [ %3, %30 ]
  %39 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %38, i64 0, i32 3
  %40 = load i8, i8* %39, align 8, !range !2
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %115, label %42

42:                                               ; preds = %35
  %43 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %38, i64 0, i32 2
  %44 = load i32, i32* %43, align 4
  %45 = add i32 %36, -1
  %46 = and i32 %45, %44
  %47 = zext i32 %46 to i64
  %48 = load %"struct.v8::base::TemplateHashMapEntry.1213"*, %"struct.v8::base::TemplateHashMapEntry.1213"** %2, align 8
  %49 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %48, i64 %47
  %50 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %48, i64 %47, i32 3
  %51 = load i8, i8* %50, align 8, !range !2
  %52 = icmp eq i8 %51, 0
  %53 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %38, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %54 = load i64, i64* %53, align 8
  br i1 %52, label %72, label %55

55:                                               ; preds = %42
  %56 = trunc i64 %54 to i32
  %57 = zext i32 %45 to i64
  br label %58

58:                                               ; preds = %65, %55
  %59 = phi %"struct.v8::base::TemplateHashMapEntry.1213"* [ %49, %55 ], [ %68, %65 ]
  %60 = phi i64 [ %47, %55 ], [ %67, %65 ]
  %61 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %59, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %62 = load i64, i64* %61, align 8
  %63 = trunc i64 %62 to i32
  %64 = icmp eq i32 %56, %63
  br i1 %64, label %72, label %65

65:                                               ; preds = %58
  %66 = add nuw nsw i64 %60, 1
  %67 = and i64 %66, %57
  %68 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %48, i64 %67
  %69 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %48, i64 %67, i32 3
  %70 = load i8, i8* %69, align 8, !range !2
  %71 = icmp eq i8 %70, 0
  br i1 %71, label %72, label %58

72:                                               ; preds = %58, %65, %42
  %73 = phi %"struct.v8::base::TemplateHashMapEntry.1213"* [ %49, %42 ], [ %59, %58 ], [ %68, %65 ]
  %74 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %38, i64 0, i32 1
  %75 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %38, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %76 = load i32, i32* %74, align 4
  %77 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %73, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %54, i64* %77, align 8
  %78 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %73, i64 0, i32 1
  store i32 %76, i32* %78, align 8
  %79 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %73, i64 0, i32 2
  store i32 %44, i32* %79, align 4
  %80 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %73, i64 0, i32 3
  store i8 1, i8* %80, align 8
  %81 = load i32, i32* %6, align 4
  %82 = add i32 %81, 1
  store i32 %82, i32* %6, align 4
  %83 = lshr i32 %82, 2
  %84 = add i32 %83, %82
  %85 = load i32, i32* %4, align 8
  %86 = icmp ult i32 %84, %85
  br i1 %86, label %112, label %87

87:                                               ; preds = %72
  tail call void @_ZN2v84base19TemplateHashMapImplINS_8internal18SharedFunctionInfoEjNS0_18KeyEqualityMatcherINS2_6ObjectEEENS0_23DefaultAllocationPolicyEE6ResizeEv(%"class.v8::base::TemplateHashMapImpl.1212"* %0) #12
  %88 = load i32, i32* %4, align 8
  %89 = add i32 %88, -1
  %90 = and i32 %89, %44
  %91 = zext i32 %90 to i64
  %92 = load %"struct.v8::base::TemplateHashMapEntry.1213"*, %"struct.v8::base::TemplateHashMapEntry.1213"** %2, align 8
  %93 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %92, i64 %91, i32 3
  %94 = load i8, i8* %93, align 8, !range !2
  %95 = icmp eq i8 %94, 0
  br i1 %95, label %112, label %96

96:                                               ; preds = %87
  %97 = load i64, i64* %75, align 8
  %98 = trunc i64 %97 to i32
  %99 = zext i32 %89 to i64
  br label %100

100:                                              ; preds = %106, %96
  %101 = phi i64 [ %91, %96 ], [ %108, %106 ]
  %102 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %92, i64 %101, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %103 = load i64, i64* %102, align 8
  %104 = trunc i64 %103 to i32
  %105 = icmp eq i32 %98, %104
  br i1 %105, label %112, label %106

106:                                              ; preds = %100
  %107 = add nuw nsw i64 %101, 1
  %108 = and i64 %107, %99
  %109 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %92, i64 %108, i32 3
  %110 = load i8, i8* %109, align 8, !range !2
  %111 = icmp eq i8 %110, 0
  br i1 %111, label %112, label %100

112:                                              ; preds = %100, %106, %87, %72
  %113 = phi i32 [ %88, %87 ], [ %85, %72 ], [ %88, %106 ], [ %88, %100 ]
  %114 = add i32 %37, -1
  br label %115

115:                                              ; preds = %35, %112
  %116 = phi i32 [ %113, %112 ], [ %36, %35 ]
  %117 = phi i32 [ %114, %112 ], [ %37, %35 ]
  %118 = getelementptr inbounds %"struct.v8::base::TemplateHashMapEntry.1213", %"struct.v8::base::TemplateHashMapEntry.1213"* %38, i64 1
  %119 = icmp eq i32 %117, 0
  br i1 %119, label %33, label %35
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #4

declare void @_ZN2v88internal18StackFrameIteratorC1EPNS0_7IsolateE(%"class.v8::internal::StackFrameIterator"*, %"class.v8::internal::Isolate"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2v88internal12_GLOBAL__N_122MergeConsecutiveRangesEPNS0_16CoverageFunctionE(%"struct.v8::internal::CoverageFunction"*) unnamed_addr #0 {
  %2 = alloca %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", align 8
  %3 = bitcast %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %3) #12
  %4 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %2, i64 0, i32 0
  store %"struct.v8::internal::CoverageFunction"* %0, %"struct.v8::internal::CoverageFunction"** %4, align 8
  %5 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %2, i64 0, i32 1
  %6 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %2, i64 0, i32 5
  %7 = bitcast %"class.std::__1::vector.3"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 26, i1 false) #12
  store i32 -1, i32* %6, align 4
  %8 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %2, i64 0, i32 6
  store i32 -1, i32* %8, align 8
  %9 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %2)
  br i1 %9, label %10, label %51

10:                                               ; preds = %1
  %11 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %2, i64 0, i32 1, i32 0, i32 1
  %12 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %2, i64 0, i32 3
  br label %13

13:                                               ; preds = %10, %49
  %14 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %4, align 8
  %15 = load i32, i32* %6, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %14, i64 0, i32 5, i32 0, i32 0
  %18 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %17, align 8
  %19 = add nsw i32 %15, 1
  %20 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %14, i64 0, i32 5, i32 0, i32 1
  %21 = bitcast %"struct.v8::internal::CoverageBlock"** %20 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = ptrtoint %"struct.v8::internal::CoverageBlock"* %18 to i64
  %24 = sub i64 %22, %23
  %25 = sdiv exact i64 %24, 12
  %26 = trunc i64 %25 to i32
  %27 = icmp slt i32 %19, %26
  br i1 %27, label %28, label %49

28:                                               ; preds = %13
  %29 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %11, align 8
  %30 = sext i32 %19 to i64
  %31 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %18, i64 %30, i32 0
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %29, i64 -1, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %32, %34
  br i1 %35, label %36, label %49

36:                                               ; preds = %28
  %37 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %18, i64 %16, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %32, %38
  br i1 %39, label %40, label %49

40:                                               ; preds = %36
  %41 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %18, i64 %30, i32 2
  %42 = load i32, i32* %41, align 4
  %43 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %18, i64 %16, i32 2
  %44 = load i32, i32* %43, align 4
  %45 = icmp eq i32 %42, %44
  br i1 %45, label %46, label %49

46:                                               ; preds = %40
  %47 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %18, i64 %16, i32 0
  %48 = load i32, i32* %47, align 4
  store i32 %48, i32* %31, align 4
  store i8 1, i8* %12, align 1
  br label %49

49:                                               ; preds = %13, %36, %40, %46, %28
  %50 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %2)
  br i1 %50, label %13, label %51

51:                                               ; preds = %49, %1
  br label %52

52:                                               ; preds = %51, %52
  %53 = call fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* nonnull %2) #12
  br i1 %53, label %52, label %54

54:                                               ; preds = %52
  %55 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %4, align 8
  %56 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %55, i64 0, i32 5
  %57 = load i32, i32* %8, align 8
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %55, i64 0, i32 5, i32 0, i32 1
  %60 = bitcast %"struct.v8::internal::CoverageBlock"** %59 to i64*
  %61 = load i64, i64* %60, align 8
  %62 = bitcast %"class.std::__1::vector.3"* %56 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %61, %63
  %65 = sdiv exact i64 %64, 12
  %66 = icmp ult i64 %65, %58
  %67 = inttoptr i64 %63 to %"struct.v8::internal::CoverageBlock"*
  br i1 %66, label %68, label %70

68:                                               ; preds = %54
  %69 = sub nsw i64 %58, %65
  call void @_ZNSt3__16vectorIN2v88internal13CoverageBlockENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.3"* %56, i64 %69) #12
  br label %74

70:                                               ; preds = %54
  %71 = icmp ugt i64 %65, %58
  br i1 %71, label %72, label %74

72:                                               ; preds = %70
  %73 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %67, i64 %58
  store %"struct.v8::internal::CoverageBlock"* %73, %"struct.v8::internal::CoverageBlock"** %59, align 8
  br label %74

74:                                               ; preds = %72, %70, %68
  %75 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %2, i64 0, i32 1, i32 0, i32 0
  %76 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %75, align 8
  %77 = icmp eq %"struct.v8::internal::CoverageBlock"* %76, null
  br i1 %77, label %83, label %78

78:                                               ; preds = %74
  %79 = ptrtoint %"struct.v8::internal::CoverageBlock"* %76 to i64
  %80 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %2, i64 0, i32 1, i32 0, i32 1
  %81 = bitcast %"struct.v8::internal::CoverageBlock"** %80 to i64*
  store i64 %79, i64* %81, align 8
  %82 = bitcast %"struct.v8::internal::CoverageBlock"* %76 to i8*
  call void @_ZdlPv(i8* %82) #14
  br label %83

83:                                               ; preds = %74, %78
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %3) #12
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #7

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZN2v88internal12_GLOBAL__N_121CoverageBlockIterator4NextEv(%"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"*) unnamed_addr #0 align 2 {
  %2 = getelementptr %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %0, i64 0, i32 0
  %3 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %2, align 8
  %4 = getelementptr %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %0, i64 0, i32 5
  %5 = load i32, i32* %4, align 4
  %6 = add nsw i32 %5, 1
  %7 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %3, i64 0, i32 5
  %8 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %3, i64 0, i32 5, i32 0, i32 1
  %9 = bitcast %"struct.v8::internal::CoverageBlock"** %8 to i64*
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.std::__1::vector.3"* %7 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = sdiv exact i64 %13, 12
  %15 = trunc i64 %14 to i32
  %16 = icmp slt i32 %6, %15
  %17 = inttoptr i64 %12 to %"struct.v8::internal::CoverageBlock"*
  br i1 %16, label %44, label %18

18:                                               ; preds = %1
  %19 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %0, i64 0, i32 2
  %20 = load i8, i8* %19, align 8, !range !2
  %21 = icmp eq i8 %20, 0
  br i1 %21, label %22, label %43

22:                                               ; preds = %18
  %23 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %0, i64 0, i32 3
  %24 = load i8, i8* %23, align 1, !range !2
  %25 = icmp eq i8 %24, 0
  br i1 %25, label %26, label %43

26:                                               ; preds = %22
  %27 = icmp sgt i32 %5, -1
  br i1 %27, label %28, label %39

28:                                               ; preds = %26
  %29 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %0, i64 0, i32 6
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, %5
  br i1 %31, label %39, label %32

32:                                               ; preds = %28
  %33 = sext i32 %5 to i64
  %34 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %17, i64 %33
  %35 = sext i32 %30 to i64
  %36 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %17, i64 %35
  %37 = bitcast %"struct.v8::internal::CoverageBlock"* %36 to i8*
  %38 = bitcast %"struct.v8::internal::CoverageBlock"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %37, i8* align 4 %38, i64 12, i1 false) #12
  br label %39

39:                                               ; preds = %32, %28, %26
  %40 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %0, i64 0, i32 6
  %41 = load i32, i32* %40, align 8
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %40, align 8
  br label %43

43:                                               ; preds = %39, %22, %18
  store i8 1, i8* %19, align 8
  br label %257

44:                                               ; preds = %1
  %45 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %0, i64 0, i32 3
  %46 = load i8, i8* %45, align 1, !range !2
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %67

48:                                               ; preds = %44
  %49 = icmp sgt i32 %5, -1
  br i1 %49, label %50, label %62

50:                                               ; preds = %48
  %51 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %0, i64 0, i32 6
  %52 = load i32, i32* %51, align 8
  %53 = icmp eq i32 %52, %5
  br i1 %53, label %62, label %54

54:                                               ; preds = %50
  %55 = sext i32 %5 to i64
  %56 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %17, i64 %55
  %57 = sext i32 %52 to i64
  %58 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %17, i64 %57
  %59 = bitcast %"struct.v8::internal::CoverageBlock"* %58 to i8*
  %60 = bitcast %"struct.v8::internal::CoverageBlock"* %56 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %59, i8* align 4 %60, i64 12, i1 false) #12
  %61 = load i32, i32* %4, align 4
  br label %62

62:                                               ; preds = %54, %50, %48
  %63 = phi i32 [ %61, %54 ], [ %5, %50 ], [ %5, %48 ]
  %64 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %0, i64 0, i32 6
  %65 = load i32, i32* %64, align 8
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %64, align 8
  br label %67

67:                                               ; preds = %44, %62
  %68 = phi i32 [ %5, %44 ], [ %63, %62 ]
  %69 = icmp eq i32 %68, -1
  br i1 %69, label %70, label %150

70:                                               ; preds = %67
  %71 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %0, i64 0, i32 1
  %72 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %2, align 8
  %73 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %72, i64 0, i32 0
  %74 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %72, i64 0, i32 1
  %75 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %72, i64 0, i32 2
  %76 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %0, i64 0, i32 1, i32 0, i32 1
  %77 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %76, align 8
  %78 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %79 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %78, align 8
  %80 = icmp ult %"struct.v8::internal::CoverageBlock"* %77, %79
  %81 = ptrtoint %"struct.v8::internal::CoverageBlock"* %79 to i64
  br i1 %80, label %82, label %92

82:                                               ; preds = %70
  %83 = load i32, i32* %73, align 4
  %84 = load i32, i32* %74, align 4
  %85 = load i32, i32* %75, align 4
  %86 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %77, i64 0, i32 0
  store i32 %83, i32* %86, align 4
  %87 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %77, i64 0, i32 1
  store i32 %84, i32* %87, align 4
  %88 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %77, i64 0, i32 2
  store i32 %85, i32* %88, align 4
  %89 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %77, i64 1
  %90 = ptrtoint %"struct.v8::internal::CoverageBlock"* %89 to i64
  %91 = bitcast %"struct.v8::internal::CoverageBlock"** %76 to i64*
  store i64 %90, i64* %91, align 8
  br label %226

92:                                               ; preds = %70
  %93 = ptrtoint %"struct.v8::internal::CoverageBlock"* %77 to i64
  %94 = bitcast %"struct.v8::internal::CoverageBlock"** %76 to i64*
  %95 = bitcast %"class.std::__1::vector.3"* %71 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = sub i64 %93, %96
  %98 = sdiv exact i64 %97, 12
  %99 = add nsw i64 %98, 1
  %100 = icmp ugt i64 %99, 1537228672809129301
  br i1 %100, label %101, label %103

101:                                              ; preds = %92
  %102 = bitcast %"class.std::__1::vector.3"* %71 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %102) #13
  unreachable

103:                                              ; preds = %92
  %104 = bitcast %"struct.v8::internal::CoverageBlock"** %78 to i64*
  %105 = sub i64 %81, %96
  %106 = sdiv exact i64 %105, 12
  %107 = icmp ult i64 %106, 768614336404564650
  br i1 %107, label %108, label %113

108:                                              ; preds = %103
  %109 = shl nsw i64 %106, 1
  %110 = icmp ult i64 %109, %99
  %111 = select i1 %110, i64 %99, i64 %109
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %118, label %113

113:                                              ; preds = %108, %103
  %114 = phi i64 [ %111, %108 ], [ 1537228672809129301, %103 ]
  %115 = mul i64 %114, 12
  %116 = tail call i8* @_Znwm(i64 %115) #14
  %117 = bitcast i8* %116 to %"struct.v8::internal::CoverageBlock"*
  br label %118

118:                                              ; preds = %113, %108
  %119 = phi i64 [ %114, %113 ], [ 0, %108 ]
  %120 = phi %"struct.v8::internal::CoverageBlock"* [ %117, %113 ], [ null, %108 ]
  %121 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %120, i64 %98
  %122 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %120, i64 %119
  %123 = ptrtoint %"struct.v8::internal::CoverageBlock"* %122 to i64
  %124 = load i32, i32* %73, align 4
  %125 = load i32, i32* %74, align 4
  %126 = load i32, i32* %75, align 4
  %127 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %121, i64 0, i32 0
  store i32 %124, i32* %127, align 4
  %128 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %120, i64 %98, i32 1
  store i32 %125, i32* %128, align 4
  %129 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %120, i64 %98, i32 2
  store i32 %126, i32* %129, align 4
  %130 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %121, i64 1
  %131 = ptrtoint %"struct.v8::internal::CoverageBlock"* %130 to i64
  %132 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %71, i64 0, i32 0, i32 0
  %133 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %132, align 8
  %134 = load i64, i64* %94, align 8
  %135 = ptrtoint %"struct.v8::internal::CoverageBlock"* %133 to i64
  %136 = sub i64 %134, %135
  %137 = sdiv exact i64 %136, -12
  %138 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %121, i64 %137
  %139 = ptrtoint %"struct.v8::internal::CoverageBlock"* %138 to i64
  %140 = icmp sgt i64 %136, 0
  br i1 %140, label %141, label %145

141:                                              ; preds = %118
  %142 = bitcast %"struct.v8::internal::CoverageBlock"* %138 to i8*
  %143 = bitcast %"struct.v8::internal::CoverageBlock"* %133 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %142, i8* align 4 %143, i64 %136, i1 false) #12
  %144 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %132, align 8
  br label %145

145:                                              ; preds = %141, %118
  %146 = phi %"struct.v8::internal::CoverageBlock"* [ %133, %118 ], [ %144, %141 ]
  store i64 %139, i64* %95, align 8
  store i64 %131, i64* %94, align 8
  store i64 %123, i64* %104, align 8
  %147 = icmp eq %"struct.v8::internal::CoverageBlock"* %146, null
  br i1 %147, label %226, label %148

148:                                              ; preds = %145
  %149 = bitcast %"struct.v8::internal::CoverageBlock"* %146 to i8*
  tail call void @_ZdlPv(i8* %149) #14
  br label %226

150:                                              ; preds = %67
  %151 = load i8, i8* %45, align 1, !range !2
  %152 = icmp eq i8 %151, 0
  br i1 %152, label %153, label %226

153:                                              ; preds = %150
  %154 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %0, i64 0, i32 1
  %155 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %2, align 8
  %156 = sext i32 %68 to i64
  %157 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %155, i64 0, i32 5, i32 0, i32 0
  %158 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %157, align 8
  %159 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %158, i64 %156
  %160 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %0, i64 0, i32 1, i32 0, i32 1
  %161 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %160, align 8
  %162 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %0, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0
  %163 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %162, align 8
  %164 = icmp ult %"struct.v8::internal::CoverageBlock"* %161, %163
  %165 = ptrtoint %"struct.v8::internal::CoverageBlock"* %163 to i64
  br i1 %164, label %166, label %172

166:                                              ; preds = %153
  %167 = bitcast %"struct.v8::internal::CoverageBlock"* %161 to i8*
  %168 = bitcast %"struct.v8::internal::CoverageBlock"* %159 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %167, i8* align 4 %168, i64 12, i1 false) #12
  %169 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %161, i64 1
  %170 = ptrtoint %"struct.v8::internal::CoverageBlock"* %169 to i64
  %171 = bitcast %"struct.v8::internal::CoverageBlock"** %160 to i64*
  store i64 %170, i64* %171, align 8
  br label %226

172:                                              ; preds = %153
  %173 = ptrtoint %"struct.v8::internal::CoverageBlock"* %161 to i64
  %174 = bitcast %"struct.v8::internal::CoverageBlock"** %160 to i64*
  %175 = bitcast %"class.std::__1::vector.3"* %154 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %173, %176
  %178 = sdiv exact i64 %177, 12
  %179 = add nsw i64 %178, 1
  %180 = icmp ugt i64 %179, 1537228672809129301
  br i1 %180, label %181, label %183

181:                                              ; preds = %172
  %182 = bitcast %"class.std::__1::vector.3"* %154 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %182) #13
  unreachable

183:                                              ; preds = %172
  %184 = bitcast %"struct.v8::internal::CoverageBlock"** %162 to i64*
  %185 = sub i64 %165, %176
  %186 = sdiv exact i64 %185, 12
  %187 = icmp ult i64 %186, 768614336404564650
  br i1 %187, label %188, label %193

188:                                              ; preds = %183
  %189 = shl nsw i64 %186, 1
  %190 = icmp ult i64 %189, %179
  %191 = select i1 %190, i64 %179, i64 %189
  %192 = icmp eq i64 %191, 0
  br i1 %192, label %198, label %193

193:                                              ; preds = %188, %183
  %194 = phi i64 [ %191, %188 ], [ 1537228672809129301, %183 ]
  %195 = mul i64 %194, 12
  %196 = tail call i8* @_Znwm(i64 %195) #14
  %197 = bitcast i8* %196 to %"struct.v8::internal::CoverageBlock"*
  br label %198

198:                                              ; preds = %193, %188
  %199 = phi i64 [ %194, %193 ], [ 0, %188 ]
  %200 = phi %"struct.v8::internal::CoverageBlock"* [ %197, %193 ], [ null, %188 ]
  %201 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %200, i64 %178
  %202 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %200, i64 %199
  %203 = ptrtoint %"struct.v8::internal::CoverageBlock"* %202 to i64
  %204 = bitcast %"struct.v8::internal::CoverageBlock"* %201 to i8*
  %205 = bitcast %"struct.v8::internal::CoverageBlock"* %159 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %204, i8* align 4 %205, i64 12, i1 false) #12
  %206 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %201, i64 1
  %207 = ptrtoint %"struct.v8::internal::CoverageBlock"* %206 to i64
  %208 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %154, i64 0, i32 0, i32 0
  %209 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %208, align 8
  %210 = load i64, i64* %174, align 8
  %211 = ptrtoint %"struct.v8::internal::CoverageBlock"* %209 to i64
  %212 = sub i64 %210, %211
  %213 = sdiv exact i64 %212, -12
  %214 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %201, i64 %213
  %215 = ptrtoint %"struct.v8::internal::CoverageBlock"* %214 to i64
  %216 = icmp sgt i64 %212, 0
  br i1 %216, label %217, label %221

217:                                              ; preds = %198
  %218 = bitcast %"struct.v8::internal::CoverageBlock"* %214 to i8*
  %219 = bitcast %"struct.v8::internal::CoverageBlock"* %209 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %218, i8* align 4 %219, i64 %212, i1 false) #12
  %220 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %208, align 8
  br label %221

221:                                              ; preds = %217, %198
  %222 = phi %"struct.v8::internal::CoverageBlock"* [ %209, %198 ], [ %220, %217 ]
  store i64 %215, i64* %175, align 8
  store i64 %207, i64* %174, align 8
  store i64 %203, i64* %184, align 8
  %223 = icmp eq %"struct.v8::internal::CoverageBlock"* %222, null
  br i1 %223, label %226, label %224

224:                                              ; preds = %221
  %225 = bitcast %"struct.v8::internal::CoverageBlock"* %222 to i8*
  tail call void @_ZdlPv(i8* %225) #14
  br label %226

226:                                              ; preds = %150, %224, %221, %166, %148, %145, %82
  store i8 0, i8* %45, align 1
  %227 = load i32, i32* %4, align 4
  %228 = add nsw i32 %227, 1
  store i32 %228, i32* %4, align 4
  %229 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %0, i64 0, i32 1
  %230 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator", %"class.v8::internal::(anonymous namespace)::CoverageBlockIterator"* %0, i64 0, i32 1, i32 0, i32 1
  %231 = bitcast %"struct.v8::internal::CoverageBlock"** %230 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = bitcast %"class.std::__1::vector.3"* %229 to i64*
  %234 = load i64, i64* %233, align 8
  %235 = sub i64 %232, %234
  %236 = sdiv exact i64 %235, 12
  %237 = icmp ugt i64 %236, 1
  br i1 %237, label %238, label %257

238:                                              ; preds = %226
  %239 = inttoptr i64 %232 to %"struct.v8::internal::CoverageBlock"*
  %240 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %2, align 8
  %241 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %240, i64 0, i32 5, i32 0, i32 0
  %242 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %241, align 8
  %243 = sext i32 %228 to i64
  %244 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %242, i64 %243, i32 0
  br label %245

245:                                              ; preds = %238, %251
  %246 = phi %"struct.v8::internal::CoverageBlock"* [ %239, %238 ], [ %252, %251 ]
  %247 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %246, i64 -1, i32 1
  %248 = load i32, i32* %247, align 4
  %249 = load i32, i32* %244, align 4
  %250 = icmp sgt i32 %248, %249
  br i1 %250, label %257, label %251

251:                                              ; preds = %245
  %252 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %246, i64 -1
  store %"struct.v8::internal::CoverageBlock"* %252, %"struct.v8::internal::CoverageBlock"** %230, align 8
  %253 = ptrtoint %"struct.v8::internal::CoverageBlock"* %252 to i64
  %254 = sub i64 %253, %234
  %255 = sdiv exact i64 %254, 12
  %256 = icmp ugt i64 %255, 1
  br i1 %256, label %245, label %257

257:                                              ; preds = %245, %251, %226, %43
  %258 = phi i1 [ false, %43 ], [ true, %226 ], [ true, %251 ], [ true, %245 ]
  ret i1 %258
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2v88internal13CoverageBlockENS_9allocatorIS3_EEE8__appendEm(%"class.std::__1::vector.3"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.v8::internal::CoverageBlock"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %0, i64 0, i32 0, i32 1
  %7 = bitcast %"struct.v8::internal::CoverageBlock"** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = sdiv exact i64 %9, 12
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %27, label %12

12:                                               ; preds = %2
  %13 = inttoptr i64 %8 to %"struct.v8::internal::CoverageBlock"*
  %14 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %25, label %18

16:                                               ; preds = %18
  %17 = ptrtoint %"struct.v8::internal::CoverageBlock"* %14 to i64
  br label %25

18:                                               ; preds = %12, %18
  %19 = phi %"struct.v8::internal::CoverageBlock"* [ %23, %18 ], [ %13, %12 ]
  %20 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %19, i64 0, i32 0
  store i32 -1, i32* %20, align 4
  %21 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %19, i64 0, i32 1
  store i32 -1, i32* %21, align 4
  %22 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %19, i64 0, i32 2
  store i32 0, i32* %22, align 4
  %23 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %19, i64 1
  %24 = icmp eq %"struct.v8::internal::CoverageBlock"* %23, %14
  br i1 %24, label %16, label %18

25:                                               ; preds = %12, %16
  %26 = phi i64 [ %17, %16 ], [ %8, %12 ]
  store i64 %26, i64* %7, align 8
  br label %84

27:                                               ; preds = %2
  %28 = bitcast %"class.std::__1::vector.3"* %0 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %8, %29
  %31 = sdiv exact i64 %30, 12
  %32 = add i64 %31, %1
  %33 = icmp ugt i64 %32, 1537228672809129301
  br i1 %33, label %34, label %36

34:                                               ; preds = %27
  %35 = bitcast %"class.std::__1::vector.3"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %35) #13
  unreachable

36:                                               ; preds = %27
  %37 = sub i64 %5, %29
  %38 = sdiv exact i64 %37, 12
  %39 = icmp ult i64 %38, 768614336404564650
  br i1 %39, label %40, label %45

40:                                               ; preds = %36
  %41 = shl nsw i64 %38, 1
  %42 = icmp ult i64 %41, %32
  %43 = select i1 %42, i64 %32, i64 %41
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %50, label %45

45:                                               ; preds = %36, %40
  %46 = phi i64 [ %43, %40 ], [ 1537228672809129301, %36 ]
  %47 = mul i64 %46, 12
  %48 = tail call i8* @_Znwm(i64 %47) #14
  %49 = bitcast i8* %48 to %"struct.v8::internal::CoverageBlock"*
  br label %50

50:                                               ; preds = %40, %45
  %51 = phi i64 [ %46, %45 ], [ 0, %40 ]
  %52 = phi %"struct.v8::internal::CoverageBlock"* [ %49, %45 ], [ null, %40 ]
  %53 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %52, i64 %31
  %54 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %52, i64 %51
  %55 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %53, i64 %1
  br label %56

56:                                               ; preds = %50, %56
  %57 = phi %"struct.v8::internal::CoverageBlock"* [ %61, %56 ], [ %53, %50 ]
  %58 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %57, i64 0, i32 0
  store i32 -1, i32* %58, align 4
  %59 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %57, i64 0, i32 1
  store i32 -1, i32* %59, align 4
  %60 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %57, i64 0, i32 2
  store i32 0, i32* %60, align 4
  %61 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %57, i64 1
  %62 = icmp eq %"struct.v8::internal::CoverageBlock"* %55, %61
  br i1 %62, label %63, label %56

63:                                               ; preds = %56
  %64 = ptrtoint %"struct.v8::internal::CoverageBlock"* %54 to i64
  %65 = ptrtoint %"struct.v8::internal::CoverageBlock"* %55 to i64
  %66 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %0, i64 0, i32 0, i32 0
  %67 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %66, align 8
  %68 = load i64, i64* %7, align 8
  %69 = ptrtoint %"struct.v8::internal::CoverageBlock"* %67 to i64
  %70 = sub i64 %68, %69
  %71 = sdiv exact i64 %70, -12
  %72 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %53, i64 %71
  %73 = ptrtoint %"struct.v8::internal::CoverageBlock"* %72 to i64
  %74 = icmp sgt i64 %70, 0
  br i1 %74, label %75, label %79

75:                                               ; preds = %63
  %76 = bitcast %"struct.v8::internal::CoverageBlock"* %72 to i8*
  %77 = bitcast %"struct.v8::internal::CoverageBlock"* %67 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %76, i8* align 4 %77, i64 %70, i1 false) #12
  %78 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %66, align 8
  br label %79

79:                                               ; preds = %63, %75
  %80 = phi %"struct.v8::internal::CoverageBlock"* [ %67, %63 ], [ %78, %75 ]
  store i64 %73, i64* %28, align 8
  store i64 %65, i64* %7, align 8
  store i64 %64, i64* %4, align 8
  %81 = icmp eq %"struct.v8::internal::CoverageBlock"* %80, null
  br i1 %81, label %84, label %82

82:                                               ; preds = %79
  %83 = bitcast %"struct.v8::internal::CoverageBlock"* %80 to i8*
  tail call void @_ZdlPv(i8* %83) #14
  br label %84

84:                                               ; preds = %82, %79, %25
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal zeroext i1 @_ZN2v88internal12_GLOBAL__N_120CompareCoverageBlockERKNS0_13CoverageBlockES4_(%"struct.v8::internal::CoverageBlock"* nocapture readonly dereferenceable(12), %"struct.v8::internal::CoverageBlock"* nocapture readonly dereferenceable(12)) #9 {
  %3 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = icmp sgt i32 %10, %12
  br label %16

14:                                               ; preds = %2
  %15 = icmp slt i32 %4, %6
  br label %16

16:                                               ; preds = %14, %8
  %17 = phi i1 [ %13, %8 ], [ %15, %14 ]
  ret i1 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16__sortIRPFbRKN2v88internal13CoverageBlockES5_EPS3_EEvT0_SA_T_(%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %4 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %5 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %6 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %7 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %8 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %9 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %10 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %11 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %12 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %13 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %14 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %15 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %16 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %17 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %18 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %19 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %20 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %21 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %22 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %23 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %24 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %25 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %26 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %27 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %28 = bitcast %"struct.v8::internal::CoverageBlock"* %13 to i8*
  %29 = bitcast %"struct.v8::internal::CoverageBlock"* %11 to i8*
  %30 = bitcast %"struct.v8::internal::CoverageBlock"* %10 to i8*
  %31 = bitcast %"struct.v8::internal::CoverageBlock"* %12 to i8*
  %32 = bitcast %"struct.v8::internal::CoverageBlock"* %9 to i8*
  %33 = bitcast %"struct.v8::internal::CoverageBlock"* %17 to i8*
  %34 = bitcast %"struct.v8::internal::CoverageBlock"* %15 to i8*
  %35 = bitcast %"struct.v8::internal::CoverageBlock"* %14 to i8*
  %36 = bitcast %"struct.v8::internal::CoverageBlock"* %16 to i8*
  %37 = bitcast %"struct.v8::internal::CoverageBlock"* %6 to i8*
  %38 = bitcast %"struct.v8::internal::CoverageBlock"* %8 to i8*
  %39 = bitcast %"struct.v8::internal::CoverageBlock"* %7 to i8*
  %40 = bitcast %"struct.v8::internal::CoverageBlock"* %5 to i8*
  %41 = bitcast %"struct.v8::internal::CoverageBlock"* %4 to i8*
  br label %42

42:                                               ; preds = %285, %3
  %43 = phi %"struct.v8::internal::CoverageBlock"* [ %1, %3 ], [ %268, %285 ]
  %44 = phi %"struct.v8::internal::CoverageBlock"* [ %0, %3 ], [ %56, %285 ]
  %45 = ptrtoint %"struct.v8::internal::CoverageBlock"* %43 to i64
  %46 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %43, i64 -1
  %47 = bitcast %"struct.v8::internal::CoverageBlock"* %46 to i8*
  %48 = bitcast %"struct.v8::internal::CoverageBlock"* %46 to i8*
  %49 = bitcast %"struct.v8::internal::CoverageBlock"* %46 to i8*
  %50 = bitcast %"struct.v8::internal::CoverageBlock"* %46 to i8*
  %51 = bitcast %"struct.v8::internal::CoverageBlock"* %46 to i8*
  %52 = ptrtoint %"struct.v8::internal::CoverageBlock"* %43 to i64
  br label %53

53:                                               ; preds = %296, %42
  %54 = phi %"struct.v8::internal::CoverageBlock"* [ %44, %42 ], [ %297, %296 ]
  br label %55

55:                                               ; preds = %224, %53
  %56 = phi %"struct.v8::internal::CoverageBlock"* [ %54, %53 ], [ %215, %224 ]
  %57 = ptrtoint %"struct.v8::internal::CoverageBlock"* %56 to i64
  %58 = sub i64 %45, %57
  %59 = sdiv exact i64 %58, 12
  switch i64 %59, label %131 [
    i64 0, label %300
    i64 1, label %300
    i64 2, label %60
    i64 3, label %68
    i64 4, label %99
    i64 5, label %104
  ]

60:                                               ; preds = %55
  %61 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %62 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %43, i64 -1
  %63 = tail call zeroext i1 %61(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %62, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %56) #12
  br i1 %63, label %64, label %300

64:                                               ; preds = %60
  %65 = bitcast %"struct.v8::internal::CoverageBlock"* %27 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %65)
  %66 = bitcast %"struct.v8::internal::CoverageBlock"* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %65, i8* align 4 %66, i64 12, i1 false) #12
  %67 = bitcast %"struct.v8::internal::CoverageBlock"* %62 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %66, i8* align 4 %67, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %67, i8* nonnull align 4 %65, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %65)
  br label %300

68:                                               ; preds = %55
  %69 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %56, i64 1
  %70 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %43, i64 -1
  %71 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %72 = tail call zeroext i1 %71(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %69, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %56) #12
  %73 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %74 = tail call zeroext i1 %73(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %70, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %69) #12
  br i1 %72, label %85, label %75

75:                                               ; preds = %68
  br i1 %74, label %76, label %300

76:                                               ; preds = %75
  %77 = bitcast %"struct.v8::internal::CoverageBlock"* %26 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %77)
  %78 = bitcast %"struct.v8::internal::CoverageBlock"* %69 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %77, i8* align 4 %78, i64 12, i1 false) #12
  %79 = bitcast %"struct.v8::internal::CoverageBlock"* %70 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %78, i8* align 4 %79, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %79, i8* nonnull align 4 %77, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %77)
  %80 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %81 = tail call zeroext i1 %80(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %69, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %56) #12
  br i1 %81, label %82, label %300

82:                                               ; preds = %76
  %83 = bitcast %"struct.v8::internal::CoverageBlock"* %24 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %83)
  %84 = bitcast %"struct.v8::internal::CoverageBlock"* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %83, i8* align 4 %84, i64 12, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %84, i8* align 4 %78, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %78, i8* nonnull align 4 %83, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %83)
  br label %300

85:                                               ; preds = %68
  br i1 %74, label %86, label %90

86:                                               ; preds = %85
  %87 = bitcast %"struct.v8::internal::CoverageBlock"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %87)
  %88 = bitcast %"struct.v8::internal::CoverageBlock"* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %87, i8* align 4 %88, i64 12, i1 false) #12
  %89 = bitcast %"struct.v8::internal::CoverageBlock"* %70 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %88, i8* align 4 %89, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %89, i8* nonnull align 4 %87, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %87)
  br label %300

90:                                               ; preds = %85
  %91 = bitcast %"struct.v8::internal::CoverageBlock"* %23 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %91)
  %92 = bitcast %"struct.v8::internal::CoverageBlock"* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %91, i8* align 4 %92, i64 12, i1 false) #12
  %93 = bitcast %"struct.v8::internal::CoverageBlock"* %69 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %92, i8* align 4 %93, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %93, i8* nonnull align 4 %91, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %91)
  %94 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %95 = tail call zeroext i1 %94(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %70, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %69) #12
  br i1 %95, label %96, label %300

96:                                               ; preds = %90
  %97 = bitcast %"struct.v8::internal::CoverageBlock"* %25 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %97)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %97, i8* align 4 %93, i64 12, i1 false) #12
  %98 = bitcast %"struct.v8::internal::CoverageBlock"* %70 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %93, i8* align 4 %98, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %98, i8* nonnull align 4 %97, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %97)
  br label %300

99:                                               ; preds = %55
  %100 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %56, i64 1
  %101 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %56, i64 2
  %102 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %43, i64 -1
  %103 = tail call i32 @_ZNSt3__17__sort4IRPFbRKN2v88internal13CoverageBlockES5_EPS3_EEjT0_SA_SA_SA_T_(%"struct.v8::internal::CoverageBlock"* %56, %"struct.v8::internal::CoverageBlock"* %100, %"struct.v8::internal::CoverageBlock"* %101, %"struct.v8::internal::CoverageBlock"* %102, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** dereferenceable(8) %2)
  br label %300

104:                                              ; preds = %55
  %105 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %56, i64 1
  %106 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %56, i64 2
  %107 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %56, i64 3
  %108 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %43, i64 -1
  %109 = tail call i32 @_ZNSt3__17__sort4IRPFbRKN2v88internal13CoverageBlockES5_EPS3_EEjT0_SA_SA_SA_T_(%"struct.v8::internal::CoverageBlock"* %56, %"struct.v8::internal::CoverageBlock"* %105, %"struct.v8::internal::CoverageBlock"* %106, %"struct.v8::internal::CoverageBlock"* %107, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** dereferenceable(8) %2) #12
  %110 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %111 = tail call zeroext i1 %110(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %108, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %107) #12
  br i1 %111, label %112, label %300

112:                                              ; preds = %104
  %113 = bitcast %"struct.v8::internal::CoverageBlock"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %113)
  %114 = bitcast %"struct.v8::internal::CoverageBlock"* %107 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %113, i8* align 4 %114, i64 12, i1 false) #12
  %115 = bitcast %"struct.v8::internal::CoverageBlock"* %108 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %114, i8* align 4 %115, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %115, i8* nonnull align 4 %113, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %113)
  %116 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %117 = tail call zeroext i1 %116(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %107, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %106) #12
  br i1 %117, label %118, label %300

118:                                              ; preds = %112
  %119 = bitcast %"struct.v8::internal::CoverageBlock"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %119)
  %120 = bitcast %"struct.v8::internal::CoverageBlock"* %106 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %119, i8* align 4 %120, i64 12, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %120, i8* align 4 %114, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %114, i8* nonnull align 4 %119, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %119)
  %121 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %122 = tail call zeroext i1 %121(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %106, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %105) #12
  br i1 %122, label %123, label %300

123:                                              ; preds = %118
  %124 = bitcast %"struct.v8::internal::CoverageBlock"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %124)
  %125 = bitcast %"struct.v8::internal::CoverageBlock"* %105 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %124, i8* align 4 %125, i64 12, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %125, i8* align 4 %120, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %120, i8* nonnull align 4 %124, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %124)
  %126 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %127 = tail call zeroext i1 %126(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %105, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %56) #12
  br i1 %127, label %128, label %300

128:                                              ; preds = %123
  %129 = bitcast %"struct.v8::internal::CoverageBlock"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %129)
  %130 = bitcast %"struct.v8::internal::CoverageBlock"* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %129, i8* align 4 %130, i64 12, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %130, i8* align 4 %125, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %125, i8* nonnull align 4 %129, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %129)
  br label %300

131:                                              ; preds = %55
  %132 = icmp slt i64 %58, 372
  br i1 %132, label %133, label %134

133:                                              ; preds = %131
  tail call void @_ZNSt3__118__insertion_sort_3IRPFbRKN2v88internal13CoverageBlockES5_EPS3_EEvT0_SA_T_(%"struct.v8::internal::CoverageBlock"* %56, %"struct.v8::internal::CoverageBlock"* %43, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** dereferenceable(8) %2)
  br label %300

134:                                              ; preds = %131
  %135 = icmp sgt i64 %58, 11988
  %136 = udiv i64 %58, 24
  %137 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %56, i64 %136
  br i1 %135, label %138, label %163

138:                                              ; preds = %134
  %139 = udiv i64 %58, 48
  %140 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %56, i64 %139
  %141 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %137, i64 %139
  %142 = tail call i32 @_ZNSt3__17__sort4IRPFbRKN2v88internal13CoverageBlockES5_EPS3_EEjT0_SA_SA_SA_T_(%"struct.v8::internal::CoverageBlock"* %56, %"struct.v8::internal::CoverageBlock"* %140, %"struct.v8::internal::CoverageBlock"* %137, %"struct.v8::internal::CoverageBlock"* %141, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** dereferenceable(8) %2) #12
  %143 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %144 = tail call zeroext i1 %143(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %46, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %141) #12
  br i1 %144, label %145, label %184

145:                                              ; preds = %138
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %33)
  %146 = bitcast %"struct.v8::internal::CoverageBlock"* %141 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %33, i8* align 4 %146, i64 12, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %146, i8* align 4 %50, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %50, i8* nonnull align 4 %33, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %33)
  %147 = add i32 %142, 1
  %148 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %149 = tail call zeroext i1 %148(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %141, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %137) #12
  br i1 %149, label %150, label %184

150:                                              ; preds = %145
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %34)
  %151 = bitcast %"struct.v8::internal::CoverageBlock"* %137 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %34, i8* align 4 %151, i64 12, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %151, i8* align 4 %146, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %146, i8* nonnull align 4 %34, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %34)
  %152 = add i32 %142, 2
  %153 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %154 = tail call zeroext i1 %153(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %137, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %140) #12
  br i1 %154, label %155, label %184

155:                                              ; preds = %150
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %35)
  %156 = bitcast %"struct.v8::internal::CoverageBlock"* %140 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %35, i8* align 4 %156, i64 12, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %156, i8* align 4 %151, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %151, i8* nonnull align 4 %35, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %35)
  %157 = add i32 %142, 3
  %158 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %159 = tail call zeroext i1 %158(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %140, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %56) #12
  br i1 %159, label %160, label %184

160:                                              ; preds = %155
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %36)
  %161 = bitcast %"struct.v8::internal::CoverageBlock"* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %36, i8* align 4 %161, i64 12, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %161, i8* align 4 %156, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %156, i8* nonnull align 4 %36, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %36)
  %162 = add i32 %142, 4
  br label %184

163:                                              ; preds = %134
  %164 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %165 = tail call zeroext i1 %164(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %137, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %56) #12
  %166 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %167 = tail call zeroext i1 %166(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %46, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %137) #12
  br i1 %165, label %175, label %168

168:                                              ; preds = %163
  br i1 %167, label %169, label %184

169:                                              ; preds = %168
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %28)
  %170 = bitcast %"struct.v8::internal::CoverageBlock"* %137 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %28, i8* align 4 %170, i64 12, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %170, i8* align 4 %47, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %47, i8* nonnull align 4 %28, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %28)
  %171 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %172 = tail call zeroext i1 %171(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %137, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %56) #12
  br i1 %172, label %173, label %184

173:                                              ; preds = %169
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %29)
  %174 = bitcast %"struct.v8::internal::CoverageBlock"* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %29, i8* align 4 %174, i64 12, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %174, i8* align 4 %170, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %170, i8* nonnull align 4 %29, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %29)
  br label %184

175:                                              ; preds = %163
  br i1 %167, label %176, label %178

176:                                              ; preds = %175
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %32)
  %177 = bitcast %"struct.v8::internal::CoverageBlock"* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %32, i8* align 4 %177, i64 12, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %177, i8* align 4 %49, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %49, i8* nonnull align 4 %32, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %32)
  br label %184

178:                                              ; preds = %175
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %30)
  %179 = bitcast %"struct.v8::internal::CoverageBlock"* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %30, i8* align 4 %179, i64 12, i1 false) #12
  %180 = bitcast %"struct.v8::internal::CoverageBlock"* %137 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %179, i8* align 4 %180, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %180, i8* nonnull align 4 %30, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %30)
  %181 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %182 = tail call zeroext i1 %181(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %46, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %137) #12
  br i1 %182, label %183, label %184

183:                                              ; preds = %178
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %31)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %31, i8* align 4 %180, i64 12, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %180, i8* align 4 %48, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %48, i8* nonnull align 4 %31, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %31)
  br label %184

184:                                              ; preds = %183, %178, %176, %173, %169, %168, %160, %155, %150, %145, %138
  %185 = phi i32 [ %162, %160 ], [ %157, %155 ], [ %152, %150 ], [ %147, %145 ], [ %142, %138 ], [ 1, %176 ], [ 0, %168 ], [ 2, %173 ], [ 1, %169 ], [ 2, %183 ], [ 1, %178 ]
  %186 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %187 = tail call zeroext i1 %186(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %56, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %137) #12
  br i1 %187, label %236, label %188

188:                                              ; preds = %184, %229
  %189 = phi %"struct.v8::internal::CoverageBlock"* [ %190, %229 ], [ %46, %184 ]
  %190 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %189, i64 -1
  %191 = icmp eq %"struct.v8::internal::CoverageBlock"* %56, %190
  br i1 %191, label %192, label %229

192:                                              ; preds = %188
  %193 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %56, i64 1
  %194 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %195 = tail call zeroext i1 %194(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %56, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %46) #12
  br i1 %195, label %208, label %196

196:                                              ; preds = %192
  %197 = icmp eq %"struct.v8::internal::CoverageBlock"* %193, %46
  br i1 %197, label %300, label %198

198:                                              ; preds = %196, %205
  %199 = phi %"struct.v8::internal::CoverageBlock"* [ %206, %205 ], [ %193, %196 ]
  %200 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %201 = tail call zeroext i1 %200(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %56, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %199) #12
  br i1 %201, label %202, label %205

202:                                              ; preds = %198
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %38)
  %203 = bitcast %"struct.v8::internal::CoverageBlock"* %199 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %38, i8* align 4 %203, i64 12, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %203, i8* align 4 %51, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %51, i8* nonnull align 4 %38, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %38)
  %204 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %199, i64 1
  br label %208

205:                                              ; preds = %198
  %206 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %199, i64 1
  %207 = icmp eq %"struct.v8::internal::CoverageBlock"* %206, %46
  br i1 %207, label %300, label %198

208:                                              ; preds = %202, %192
  %209 = phi %"struct.v8::internal::CoverageBlock"* [ %193, %192 ], [ %204, %202 ]
  %210 = icmp eq %"struct.v8::internal::CoverageBlock"* %209, %46
  br i1 %210, label %300, label %211

211:                                              ; preds = %208, %226
  %212 = phi %"struct.v8::internal::CoverageBlock"* [ %218, %226 ], [ %209, %208 ]
  %213 = phi %"struct.v8::internal::CoverageBlock"* [ %222, %226 ], [ %46, %208 ]
  br label %214

214:                                              ; preds = %214, %211
  %215 = phi %"struct.v8::internal::CoverageBlock"* [ %212, %211 ], [ %218, %214 ]
  %216 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %217 = tail call zeroext i1 %216(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %56, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %215) #12
  %218 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %215, i64 1
  br i1 %217, label %219, label %214

219:                                              ; preds = %214, %219
  %220 = phi %"struct.v8::internal::CoverageBlock"* [ %222, %219 ], [ %213, %214 ]
  %221 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %222 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %220, i64 -1
  %223 = tail call zeroext i1 %221(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %56, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %222) #12
  br i1 %223, label %219, label %224

224:                                              ; preds = %219
  %225 = icmp ult %"struct.v8::internal::CoverageBlock"* %215, %222
  br i1 %225, label %226, label %55

226:                                              ; preds = %224
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %39)
  %227 = bitcast %"struct.v8::internal::CoverageBlock"* %215 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %39, i8* align 4 %227, i64 12, i1 false) #12
  %228 = bitcast %"struct.v8::internal::CoverageBlock"* %222 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %227, i8* align 4 %228, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %228, i8* nonnull align 4 %39, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %39)
  br label %211

229:                                              ; preds = %188
  %230 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %231 = tail call zeroext i1 %230(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %190, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %137) #12
  br i1 %231, label %232, label %188

232:                                              ; preds = %229
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %37)
  %233 = bitcast %"struct.v8::internal::CoverageBlock"* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %37, i8* align 4 %233, i64 12, i1 false) #12
  %234 = bitcast %"struct.v8::internal::CoverageBlock"* %190 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %233, i8* align 4 %234, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %234, i8* nonnull align 4 %37, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %37)
  %235 = add i32 %185, 1
  br label %236

236:                                              ; preds = %184, %232
  %237 = phi i32 [ %235, %232 ], [ %185, %184 ]
  %238 = phi %"struct.v8::internal::CoverageBlock"* [ %190, %232 ], [ %46, %184 ]
  %239 = ptrtoint %"struct.v8::internal::CoverageBlock"* %56 to i64
  %240 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %56, i64 1
  %241 = icmp ult %"struct.v8::internal::CoverageBlock"* %240, %238
  br i1 %241, label %242, label %265

242:                                              ; preds = %236, %259
  %243 = phi %"struct.v8::internal::CoverageBlock"* [ %264, %259 ], [ %137, %236 ]
  %244 = phi i32 [ %262, %259 ], [ %237, %236 ]
  %245 = phi %"struct.v8::internal::CoverageBlock"* [ %251, %259 ], [ %240, %236 ]
  %246 = phi %"struct.v8::internal::CoverageBlock"* [ %255, %259 ], [ %238, %236 ]
  br label %247

247:                                              ; preds = %247, %242
  %248 = phi %"struct.v8::internal::CoverageBlock"* [ %245, %242 ], [ %251, %247 ]
  %249 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %250 = tail call zeroext i1 %249(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %248, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %243) #12
  %251 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %248, i64 1
  br i1 %250, label %247, label %252

252:                                              ; preds = %247, %252
  %253 = phi %"struct.v8::internal::CoverageBlock"* [ %255, %252 ], [ %246, %247 ]
  %254 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %255 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %253, i64 -1
  %256 = tail call zeroext i1 %254(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %255, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %243) #12
  br i1 %256, label %257, label %252

257:                                              ; preds = %252
  %258 = icmp ugt %"struct.v8::internal::CoverageBlock"* %248, %255
  br i1 %258, label %265, label %259

259:                                              ; preds = %257
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %40)
  %260 = bitcast %"struct.v8::internal::CoverageBlock"* %248 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %40, i8* align 4 %260, i64 12, i1 false) #12
  %261 = bitcast %"struct.v8::internal::CoverageBlock"* %255 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %260, i8* align 4 %261, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %261, i8* nonnull align 4 %40, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %40)
  %262 = add i32 %244, 1
  %263 = icmp eq %"struct.v8::internal::CoverageBlock"* %243, %248
  %264 = select i1 %263, %"struct.v8::internal::CoverageBlock"* %255, %"struct.v8::internal::CoverageBlock"* %243
  br label %242

265:                                              ; preds = %257, %236
  %266 = phi %"struct.v8::internal::CoverageBlock"* [ %137, %236 ], [ %243, %257 ]
  %267 = phi i32 [ %237, %236 ], [ %244, %257 ]
  %268 = phi %"struct.v8::internal::CoverageBlock"* [ %240, %236 ], [ %248, %257 ]
  %269 = icmp eq %"struct.v8::internal::CoverageBlock"* %268, %266
  br i1 %269, label %277, label %270

270:                                              ; preds = %265
  %271 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %272 = tail call zeroext i1 %271(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %266, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %268) #12
  br i1 %272, label %273, label %277

273:                                              ; preds = %270
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %41)
  %274 = bitcast %"struct.v8::internal::CoverageBlock"* %268 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %41, i8* align 4 %274, i64 12, i1 false) #12
  %275 = bitcast %"struct.v8::internal::CoverageBlock"* %266 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %274, i8* align 4 %275, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %275, i8* nonnull align 4 %41, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %41)
  %276 = add i32 %267, 1
  br label %277

277:                                              ; preds = %265, %273, %270
  %278 = phi i32 [ %276, %273 ], [ %267, %270 ], [ %267, %265 ]
  %279 = icmp eq i32 %278, 0
  br i1 %279, label %280, label %287

280:                                              ; preds = %277
  %281 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbRKN2v88internal13CoverageBlockES5_EPS3_EEbT0_SA_T_(%"struct.v8::internal::CoverageBlock"* %56, %"struct.v8::internal::CoverageBlock"* %268, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** dereferenceable(8) %2)
  %282 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %268, i64 1
  %283 = tail call zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbRKN2v88internal13CoverageBlockES5_EPS3_EEbT0_SA_T_(%"struct.v8::internal::CoverageBlock"* %282, %"struct.v8::internal::CoverageBlock"* %43, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** dereferenceable(8) %2)
  br i1 %283, label %284, label %286

284:                                              ; preds = %280
  br i1 %281, label %300, label %285

285:                                              ; preds = %284, %298
  br label %42

286:                                              ; preds = %280
  br i1 %281, label %296, label %287

287:                                              ; preds = %286, %277
  %288 = ptrtoint %"struct.v8::internal::CoverageBlock"* %268 to i64
  %289 = sub i64 %288, %239
  %290 = sdiv exact i64 %289, 12
  %291 = sub i64 %52, %288
  %292 = sdiv exact i64 %291, 12
  %293 = icmp slt i64 %290, %292
  br i1 %293, label %294, label %298

294:                                              ; preds = %287
  tail call void @_ZNSt3__16__sortIRPFbRKN2v88internal13CoverageBlockES5_EPS3_EEvT0_SA_T_(%"struct.v8::internal::CoverageBlock"* %56, %"struct.v8::internal::CoverageBlock"* %268, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** dereferenceable(8) %2)
  %295 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %268, i64 1
  br label %296

296:                                              ; preds = %294, %286
  %297 = phi %"struct.v8::internal::CoverageBlock"* [ %282, %286 ], [ %295, %294 ]
  br label %53

298:                                              ; preds = %287
  %299 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %268, i64 1
  tail call void @_ZNSt3__16__sortIRPFbRKN2v88internal13CoverageBlockES5_EPS3_EEvT0_SA_T_(%"struct.v8::internal::CoverageBlock"* %299, %"struct.v8::internal::CoverageBlock"* %43, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** dereferenceable(8) %2)
  br label %285

300:                                              ; preds = %284, %208, %55, %55, %196, %205, %128, %123, %118, %112, %104, %96, %90, %86, %82, %76, %75, %60, %64, %99, %133
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNSt3__17__sort4IRPFbRKN2v88internal13CoverageBlockES5_EPS3_EEjT0_SA_SA_SA_T_(%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %6 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %7 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %8 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %9 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %10 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %11 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %12 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %13 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %14 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %4, align 8
  %15 = tail call zeroext i1 %14(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %1, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %0) #12
  %16 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %4, align 8
  %17 = tail call zeroext i1 %16(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %2, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %1) #12
  br i1 %15, label %28, label %18

18:                                               ; preds = %5
  br i1 %17, label %19, label %42

19:                                               ; preds = %18
  %20 = bitcast %"struct.v8::internal::CoverageBlock"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %20)
  %21 = bitcast %"struct.v8::internal::CoverageBlock"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %20, i8* align 4 %21, i64 12, i1 false) #12
  %22 = bitcast %"struct.v8::internal::CoverageBlock"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %21, i8* align 4 %22, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %22, i8* nonnull align 4 %20, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %20)
  %23 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %4, align 8
  %24 = tail call zeroext i1 %23(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %1, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %0) #12
  br i1 %24, label %25, label %42

25:                                               ; preds = %19
  %26 = bitcast %"struct.v8::internal::CoverageBlock"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %26)
  %27 = bitcast %"struct.v8::internal::CoverageBlock"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %26, i8* align 4 %27, i64 12, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %27, i8* align 4 %21, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %21, i8* nonnull align 4 %26, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %26)
  br label %42

28:                                               ; preds = %5
  br i1 %17, label %29, label %33

29:                                               ; preds = %28
  %30 = bitcast %"struct.v8::internal::CoverageBlock"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %30)
  %31 = bitcast %"struct.v8::internal::CoverageBlock"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %30, i8* align 4 %31, i64 12, i1 false) #12
  %32 = bitcast %"struct.v8::internal::CoverageBlock"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %31, i8* align 4 %32, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %32, i8* nonnull align 4 %30, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %30)
  br label %42

33:                                               ; preds = %28
  %34 = bitcast %"struct.v8::internal::CoverageBlock"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %34)
  %35 = bitcast %"struct.v8::internal::CoverageBlock"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %34, i8* align 4 %35, i64 12, i1 false) #12
  %36 = bitcast %"struct.v8::internal::CoverageBlock"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %35, i8* align 4 %36, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* nonnull align 4 %34, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %34)
  %37 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %4, align 8
  %38 = tail call zeroext i1 %37(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %2, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %1) #12
  br i1 %38, label %39, label %42

39:                                               ; preds = %33
  %40 = bitcast %"struct.v8::internal::CoverageBlock"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %40)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %40, i8* align 4 %36, i64 12, i1 false) #12
  %41 = bitcast %"struct.v8::internal::CoverageBlock"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %41, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %41, i8* nonnull align 4 %40, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %40)
  br label %42

42:                                               ; preds = %18, %19, %25, %29, %33, %39
  %43 = phi i32 [ 1, %29 ], [ 0, %18 ], [ 2, %25 ], [ 1, %19 ], [ 2, %39 ], [ 1, %33 ]
  %44 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %4, align 8
  %45 = tail call zeroext i1 %44(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %3, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %2) #12
  br i1 %45, label %46, label %63

46:                                               ; preds = %42
  %47 = bitcast %"struct.v8::internal::CoverageBlock"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %47)
  %48 = bitcast %"struct.v8::internal::CoverageBlock"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %47, i8* align 4 %48, i64 12, i1 false) #12
  %49 = bitcast %"struct.v8::internal::CoverageBlock"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %48, i8* align 4 %49, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %49, i8* nonnull align 4 %47, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %47)
  %50 = add nuw nsw i32 %43, 1
  %51 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %4, align 8
  %52 = tail call zeroext i1 %51(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %2, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %1) #12
  br i1 %52, label %53, label %63

53:                                               ; preds = %46
  %54 = bitcast %"struct.v8::internal::CoverageBlock"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %54)
  %55 = bitcast %"struct.v8::internal::CoverageBlock"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %54, i8* align 4 %55, i64 12, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %55, i8* align 4 %48, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %48, i8* nonnull align 4 %54, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %54)
  %56 = add nuw nsw i32 %43, 2
  %57 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %4, align 8
  %58 = tail call zeroext i1 %57(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %1, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %0) #12
  br i1 %58, label %59, label %63

59:                                               ; preds = %53
  %60 = bitcast %"struct.v8::internal::CoverageBlock"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %60)
  %61 = bitcast %"struct.v8::internal::CoverageBlock"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %60, i8* align 4 %61, i64 12, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %61, i8* align 4 %55, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %55, i8* nonnull align 4 %60, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %60)
  %62 = add nuw nsw i32 %43, 3
  br label %63

63:                                               ; preds = %46, %59, %53, %42
  %64 = phi i32 [ %62, %59 ], [ %56, %53 ], [ %50, %46 ], [ %43, %42 ]
  ret i32 %64
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__118__insertion_sort_3IRPFbRKN2v88internal13CoverageBlockES5_EPS3_EEvT0_SA_T_(%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %4 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %5 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %6 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %7 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %8 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %9 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %10 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %0, i64 2
  %11 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %0, i64 1
  %12 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %13 = tail call zeroext i1 %12(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %11, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %0) #12
  %14 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %15 = tail call zeroext i1 %14(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %10, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %11) #12
  br i1 %13, label %26, label %16

16:                                               ; preds = %3
  br i1 %15, label %17, label %40

17:                                               ; preds = %16
  %18 = bitcast %"struct.v8::internal::CoverageBlock"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %18)
  %19 = bitcast %"struct.v8::internal::CoverageBlock"* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %18, i8* align 4 %19, i64 12, i1 false) #12
  %20 = bitcast %"struct.v8::internal::CoverageBlock"* %10 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %19, i8* align 4 %20, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %20, i8* nonnull align 4 %18, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %18)
  %21 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %22 = tail call zeroext i1 %21(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %11, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %0) #12
  br i1 %22, label %23, label %40

23:                                               ; preds = %17
  %24 = bitcast %"struct.v8::internal::CoverageBlock"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %24)
  %25 = bitcast %"struct.v8::internal::CoverageBlock"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %24, i8* align 4 %25, i64 12, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %25, i8* align 4 %19, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %19, i8* nonnull align 4 %24, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %24)
  br label %40

26:                                               ; preds = %3
  br i1 %15, label %27, label %31

27:                                               ; preds = %26
  %28 = bitcast %"struct.v8::internal::CoverageBlock"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %28)
  %29 = bitcast %"struct.v8::internal::CoverageBlock"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %28, i8* align 4 %29, i64 12, i1 false) #12
  %30 = bitcast %"struct.v8::internal::CoverageBlock"* %10 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %29, i8* align 4 %30, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %30, i8* nonnull align 4 %28, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %28)
  br label %40

31:                                               ; preds = %26
  %32 = bitcast %"struct.v8::internal::CoverageBlock"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %32)
  %33 = bitcast %"struct.v8::internal::CoverageBlock"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %32, i8* align 4 %33, i64 12, i1 false) #12
  %34 = bitcast %"struct.v8::internal::CoverageBlock"* %11 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %33, i8* align 4 %34, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %34, i8* nonnull align 4 %32, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %32)
  %35 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %36 = tail call zeroext i1 %35(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %10, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %11) #12
  br i1 %36, label %37, label %40

37:                                               ; preds = %31
  %38 = bitcast %"struct.v8::internal::CoverageBlock"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %38)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %38, i8* align 4 %34, i64 12, i1 false) #12
  %39 = bitcast %"struct.v8::internal::CoverageBlock"* %10 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %34, i8* align 4 %39, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %39, i8* nonnull align 4 %38, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %38)
  br label %40

40:                                               ; preds = %16, %17, %23, %27, %31, %37
  %41 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %0, i64 3
  %42 = icmp eq %"struct.v8::internal::CoverageBlock"* %41, %1
  br i1 %42, label %45, label %43

43:                                               ; preds = %40
  %44 = bitcast %"struct.v8::internal::CoverageBlock"* %9 to i8*
  br label %46

45:                                               ; preds = %66, %40
  ret void

46:                                               ; preds = %43, %66
  %47 = phi %"struct.v8::internal::CoverageBlock"* [ %41, %43 ], [ %67, %66 ]
  %48 = phi %"struct.v8::internal::CoverageBlock"* [ %10, %43 ], [ %47, %66 ]
  %49 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %50 = call zeroext i1 %49(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %47, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %48) #12
  br i1 %50, label %51, label %66

51:                                               ; preds = %46
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %44) #12
  %52 = bitcast %"struct.v8::internal::CoverageBlock"* %47 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %44, i8* align 4 %52, i64 12, i1 false)
  br label %53

53:                                               ; preds = %59, %51
  %54 = phi %"struct.v8::internal::CoverageBlock"* [ %47, %51 ], [ %55, %59 ]
  %55 = phi %"struct.v8::internal::CoverageBlock"* [ %48, %51 ], [ %61, %59 ]
  %56 = bitcast %"struct.v8::internal::CoverageBlock"* %54 to i8*
  %57 = bitcast %"struct.v8::internal::CoverageBlock"* %55 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %56, i8* align 4 %57, i64 12, i1 false)
  %58 = icmp eq %"struct.v8::internal::CoverageBlock"* %55, %0
  br i1 %58, label %63, label %59

59:                                               ; preds = %53
  %60 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %61 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %55, i64 -1
  %62 = call zeroext i1 %60(%"struct.v8::internal::CoverageBlock"* nonnull dereferenceable(12) %9, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %61) #12
  br i1 %62, label %53, label %63

63:                                               ; preds = %53, %59
  %64 = phi %"struct.v8::internal::CoverageBlock"* [ %55, %59 ], [ %0, %53 ]
  %65 = bitcast %"struct.v8::internal::CoverageBlock"* %64 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %65, i8* nonnull align 4 %44, i64 12, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %44) #12
  br label %66

66:                                               ; preds = %63, %46
  %67 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %47, i64 1
  %68 = icmp eq %"struct.v8::internal::CoverageBlock"* %67, %1
  br i1 %68, label %45, label %46
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRPFbRKN2v88internal13CoverageBlockES5_EPS3_EEbT0_SA_T_(%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** dereferenceable(8)) local_unnamed_addr #0 comdat {
  %4 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %5 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %6 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %7 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %8 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %9 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %10 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %11 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %12 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %13 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %14 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %15 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %16 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %17 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %18 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %19 = alloca %"struct.v8::internal::CoverageBlock", align 4
  %20 = ptrtoint %"struct.v8::internal::CoverageBlock"* %1 to i64
  %21 = ptrtoint %"struct.v8::internal::CoverageBlock"* %0 to i64
  %22 = sub i64 %20, %21
  %23 = sdiv exact i64 %22, 12
  switch i64 %23, label %95 [
    i64 0, label %161
    i64 1, label %161
    i64 2, label %24
    i64 3, label %32
    i64 4, label %63
    i64 5, label %68
  ]

24:                                               ; preds = %3
  %25 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %26 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1, i64 -1
  %27 = tail call zeroext i1 %25(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %26, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %0) #12
  br i1 %27, label %28, label %161

28:                                               ; preds = %24
  %29 = bitcast %"struct.v8::internal::CoverageBlock"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %29)
  %30 = bitcast %"struct.v8::internal::CoverageBlock"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %29, i8* align 4 %30, i64 12, i1 false) #12
  %31 = bitcast %"struct.v8::internal::CoverageBlock"* %26 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %30, i8* align 4 %31, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %31, i8* nonnull align 4 %29, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %29)
  br label %161

32:                                               ; preds = %3
  %33 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %0, i64 1
  %34 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1, i64 -1
  %35 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %36 = tail call zeroext i1 %35(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %33, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %0) #12
  %37 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %38 = tail call zeroext i1 %37(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %34, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %33) #12
  br i1 %36, label %49, label %39

39:                                               ; preds = %32
  br i1 %38, label %40, label %161

40:                                               ; preds = %39
  %41 = bitcast %"struct.v8::internal::CoverageBlock"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %41)
  %42 = bitcast %"struct.v8::internal::CoverageBlock"* %33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %41, i8* align 4 %42, i64 12, i1 false) #12
  %43 = bitcast %"struct.v8::internal::CoverageBlock"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %42, i8* align 4 %43, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %43, i8* nonnull align 4 %41, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %41)
  %44 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %45 = tail call zeroext i1 %44(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %33, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %0) #12
  br i1 %45, label %46, label %161

46:                                               ; preds = %40
  %47 = bitcast %"struct.v8::internal::CoverageBlock"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %47)
  %48 = bitcast %"struct.v8::internal::CoverageBlock"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %47, i8* align 4 %48, i64 12, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %48, i8* align 4 %42, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %42, i8* nonnull align 4 %47, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %47)
  br label %161

49:                                               ; preds = %32
  br i1 %38, label %50, label %54

50:                                               ; preds = %49
  %51 = bitcast %"struct.v8::internal::CoverageBlock"* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %51)
  %52 = bitcast %"struct.v8::internal::CoverageBlock"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %51, i8* align 4 %52, i64 12, i1 false) #12
  %53 = bitcast %"struct.v8::internal::CoverageBlock"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %52, i8* align 4 %53, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %53, i8* nonnull align 4 %51, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %51)
  br label %161

54:                                               ; preds = %49
  %55 = bitcast %"struct.v8::internal::CoverageBlock"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %55)
  %56 = bitcast %"struct.v8::internal::CoverageBlock"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %55, i8* align 4 %56, i64 12, i1 false) #12
  %57 = bitcast %"struct.v8::internal::CoverageBlock"* %33 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %56, i8* align 4 %57, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %57, i8* nonnull align 4 %55, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %55)
  %58 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %59 = tail call zeroext i1 %58(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %34, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %33) #12
  br i1 %59, label %60, label %161

60:                                               ; preds = %54
  %61 = bitcast %"struct.v8::internal::CoverageBlock"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %61)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %61, i8* align 4 %57, i64 12, i1 false) #12
  %62 = bitcast %"struct.v8::internal::CoverageBlock"* %34 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %57, i8* align 4 %62, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %62, i8* nonnull align 4 %61, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %61)
  br label %161

63:                                               ; preds = %3
  %64 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %0, i64 1
  %65 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %0, i64 2
  %66 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1, i64 -1
  %67 = tail call i32 @_ZNSt3__17__sort4IRPFbRKN2v88internal13CoverageBlockES5_EPS3_EEjT0_SA_SA_SA_T_(%"struct.v8::internal::CoverageBlock"* %0, %"struct.v8::internal::CoverageBlock"* %64, %"struct.v8::internal::CoverageBlock"* %65, %"struct.v8::internal::CoverageBlock"* %66, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** dereferenceable(8) %2)
  br label %161

68:                                               ; preds = %3
  %69 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %0, i64 1
  %70 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %0, i64 2
  %71 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %0, i64 3
  %72 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %1, i64 -1
  %73 = tail call i32 @_ZNSt3__17__sort4IRPFbRKN2v88internal13CoverageBlockES5_EPS3_EEjT0_SA_SA_SA_T_(%"struct.v8::internal::CoverageBlock"* %0, %"struct.v8::internal::CoverageBlock"* %69, %"struct.v8::internal::CoverageBlock"* %70, %"struct.v8::internal::CoverageBlock"* %71, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** dereferenceable(8) %2) #12
  %74 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %75 = tail call zeroext i1 %74(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %72, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %71) #12
  br i1 %75, label %76, label %161

76:                                               ; preds = %68
  %77 = bitcast %"struct.v8::internal::CoverageBlock"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %77)
  %78 = bitcast %"struct.v8::internal::CoverageBlock"* %71 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %77, i8* align 4 %78, i64 12, i1 false) #12
  %79 = bitcast %"struct.v8::internal::CoverageBlock"* %72 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %78, i8* align 4 %79, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %79, i8* nonnull align 4 %77, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %77)
  %80 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %81 = tail call zeroext i1 %80(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %71, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %70) #12
  br i1 %81, label %82, label %161

82:                                               ; preds = %76
  %83 = bitcast %"struct.v8::internal::CoverageBlock"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %83)
  %84 = bitcast %"struct.v8::internal::CoverageBlock"* %70 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %83, i8* align 4 %84, i64 12, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %84, i8* align 4 %78, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %78, i8* nonnull align 4 %83, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %83)
  %85 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %86 = tail call zeroext i1 %85(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %70, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %69) #12
  br i1 %86, label %87, label %161

87:                                               ; preds = %82
  %88 = bitcast %"struct.v8::internal::CoverageBlock"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %88)
  %89 = bitcast %"struct.v8::internal::CoverageBlock"* %69 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %88, i8* align 4 %89, i64 12, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %89, i8* align 4 %84, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %84, i8* nonnull align 4 %88, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %88)
  %90 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %91 = tail call zeroext i1 %90(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %69, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %0) #12
  br i1 %91, label %92, label %161

92:                                               ; preds = %87
  %93 = bitcast %"struct.v8::internal::CoverageBlock"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %93)
  %94 = bitcast %"struct.v8::internal::CoverageBlock"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %93, i8* align 4 %94, i64 12, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %94, i8* align 4 %89, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %89, i8* nonnull align 4 %93, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %93)
  br label %161

95:                                               ; preds = %3
  %96 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %0, i64 2
  %97 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %0, i64 1
  %98 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %99 = tail call zeroext i1 %98(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %97, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %0) #12
  %100 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %101 = tail call zeroext i1 %100(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %96, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %97) #12
  br i1 %99, label %112, label %102

102:                                              ; preds = %95
  br i1 %101, label %103, label %126

103:                                              ; preds = %102
  %104 = bitcast %"struct.v8::internal::CoverageBlock"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %104)
  %105 = bitcast %"struct.v8::internal::CoverageBlock"* %97 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %104, i8* align 4 %105, i64 12, i1 false) #12
  %106 = bitcast %"struct.v8::internal::CoverageBlock"* %96 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %105, i8* align 4 %106, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %106, i8* nonnull align 4 %104, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %104)
  %107 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %108 = tail call zeroext i1 %107(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %97, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %0) #12
  br i1 %108, label %109, label %126

109:                                              ; preds = %103
  %110 = bitcast %"struct.v8::internal::CoverageBlock"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %110)
  %111 = bitcast %"struct.v8::internal::CoverageBlock"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %110, i8* align 4 %111, i64 12, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %111, i8* align 4 %105, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %105, i8* nonnull align 4 %110, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %110)
  br label %126

112:                                              ; preds = %95
  br i1 %101, label %113, label %117

113:                                              ; preds = %112
  %114 = bitcast %"struct.v8::internal::CoverageBlock"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %114)
  %115 = bitcast %"struct.v8::internal::CoverageBlock"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %114, i8* align 4 %115, i64 12, i1 false) #12
  %116 = bitcast %"struct.v8::internal::CoverageBlock"* %96 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %115, i8* align 4 %116, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %116, i8* nonnull align 4 %114, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %114)
  br label %126

117:                                              ; preds = %112
  %118 = bitcast %"struct.v8::internal::CoverageBlock"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %118)
  %119 = bitcast %"struct.v8::internal::CoverageBlock"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %118, i8* align 4 %119, i64 12, i1 false) #12
  %120 = bitcast %"struct.v8::internal::CoverageBlock"* %97 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %119, i8* align 4 %120, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %120, i8* nonnull align 4 %118, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %118)
  %121 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %122 = tail call zeroext i1 %121(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %96, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %97) #12
  br i1 %122, label %123, label %126

123:                                              ; preds = %117
  %124 = bitcast %"struct.v8::internal::CoverageBlock"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %124)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %124, i8* align 4 %120, i64 12, i1 false) #12
  %125 = bitcast %"struct.v8::internal::CoverageBlock"* %96 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %120, i8* align 4 %125, i64 12, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %125, i8* nonnull align 4 %124, i64 12, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %124)
  br label %126

126:                                              ; preds = %102, %103, %109, %113, %117, %123
  %127 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %0, i64 3
  %128 = icmp eq %"struct.v8::internal::CoverageBlock"* %127, %1
  br i1 %128, label %161, label %129

129:                                              ; preds = %126
  %130 = bitcast %"struct.v8::internal::CoverageBlock"* %19 to i8*
  br label %131

131:                                              ; preds = %129, %154
  %132 = phi %"struct.v8::internal::CoverageBlock"* [ %127, %129 ], [ %156, %154 ]
  %133 = phi i32 [ 0, %129 ], [ %155, %154 ]
  %134 = phi %"struct.v8::internal::CoverageBlock"* [ %96, %129 ], [ %132, %154 ]
  %135 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %136 = call zeroext i1 %135(%"struct.v8::internal::CoverageBlock"* dereferenceable(12) %132, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %134) #12
  br i1 %136, label %137, label %154

137:                                              ; preds = %131
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %130) #12
  %138 = bitcast %"struct.v8::internal::CoverageBlock"* %132 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %130, i8* align 4 %138, i64 12, i1 false)
  br label %139

139:                                              ; preds = %145, %137
  %140 = phi %"struct.v8::internal::CoverageBlock"* [ %132, %137 ], [ %141, %145 ]
  %141 = phi %"struct.v8::internal::CoverageBlock"* [ %134, %137 ], [ %147, %145 ]
  %142 = bitcast %"struct.v8::internal::CoverageBlock"* %140 to i8*
  %143 = bitcast %"struct.v8::internal::CoverageBlock"* %141 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %142, i8* align 4 %143, i64 12, i1 false)
  %144 = icmp eq %"struct.v8::internal::CoverageBlock"* %141, %0
  br i1 %144, label %149, label %145

145:                                              ; preds = %139
  %146 = load i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)*, i1 (%"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"*)** %2, align 8
  %147 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %141, i64 -1
  %148 = call zeroext i1 %146(%"struct.v8::internal::CoverageBlock"* nonnull dereferenceable(12) %19, %"struct.v8::internal::CoverageBlock"* dereferenceable(12) %147) #12
  br i1 %148, label %139, label %149

149:                                              ; preds = %139, %145
  %150 = phi %"struct.v8::internal::CoverageBlock"* [ %141, %145 ], [ %0, %139 ]
  %151 = bitcast %"struct.v8::internal::CoverageBlock"* %150 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %151, i8* nonnull align 4 %130, i64 12, i1 false)
  %152 = add i32 %133, 1
  %153 = icmp eq i32 %152, 8
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %130) #12
  br i1 %153, label %158, label %154

154:                                              ; preds = %149, %131
  %155 = phi i32 [ %152, %149 ], [ %133, %131 ]
  %156 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %132, i64 1
  %157 = icmp eq %"struct.v8::internal::CoverageBlock"* %156, %1
  br i1 %157, label %161, label %131

158:                                              ; preds = %149
  %159 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %132, i64 1
  %160 = icmp eq %"struct.v8::internal::CoverageBlock"* %159, %1
  br label %161

161:                                              ; preds = %154, %158, %126, %92, %87, %82, %76, %68, %60, %54, %50, %46, %40, %39, %24, %28, %3, %3, %63
  %162 = phi i1 [ true, %63 ], [ true, %3 ], [ true, %3 ], [ true, %28 ], [ true, %24 ], [ true, %39 ], [ true, %40 ], [ true, %46 ], [ true, %50 ], [ true, %54 ], [ true, %60 ], [ true, %68 ], [ true, %76 ], [ true, %82 ], [ true, %87 ], [ true, %92 ], [ true, %126 ], [ %160, %158 ], [ true, %154 ]
  ret i1 %162
}

declare void @_ZN2v88internal12CoverageInfo15ResetBlockCountEi(%"class.v8::internal::CoverageInfo"*, i32) local_unnamed_addr #1

declare i8* @_ZN2v88internal6String9ToCStringENS0_14AllowNullsFlagENS0_14RobustnessFlagEPi(%"class.v8::internal::String"*, i32, i32, i32*) local_unnamed_addr #1

declare void @_ZN2v88internal6PrintFEPKcz(i8*, ...) local_unnamed_addr #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdaPv(i8*) local_unnamed_addr #8

declare void @_ZN2v88internal11HandleScope16DeleteExtensionsEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #1

declare void @_ZN2v88internal11HandleScope8ZapRangeEPmS2_(i64*, i64*) local_unnamed_addr #1

declare i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"*, i64) local_unnamed_addr #1

declare i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2v88internal14CoverageScriptENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRNS2_6HandleINS2_6ScriptEEEEEEvDpOT_(%"class.std::__1::vector"*, %"class.v8::internal::Handle"* dereferenceable(8)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"struct.v8::internal::CoverageScript"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 576460752303423487
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #13
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"struct.v8::internal::CoverageScript"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 5
  %20 = icmp ult i64 %19, 288230376151711743
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 4
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 576460752303423487
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #13
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 576460752303423487, %14 ]
  %31 = shl i64 %30, 5
  %32 = tail call i8* @_Znwm(i64 %31) #14
  %33 = bitcast i8* %32 to %"struct.v8::internal::CoverageScript"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"struct.v8::internal::CoverageScript"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %36, i64 %9
  %38 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %36, i64 %35
  %39 = ptrtoint %"struct.v8::internal::CoverageScript"* %38 to i64
  %40 = bitcast %"class.v8::internal::Handle"* %1 to i64*
  %41 = load i64, i64* %40, align 8
  %42 = bitcast %"struct.v8::internal::CoverageScript"* %37 to i64*
  store i64 %41, i64* %42, align 8
  %43 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %36, i64 %9, i32 1
  %44 = bitcast %"class.std::__1::vector.0"* %43 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %44, i8 0, i64 24, i1 false) #12
  %45 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %37, i64 1
  %46 = ptrtoint %"struct.v8::internal::CoverageScript"* %45 to i64
  %47 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %48 = load %"struct.v8::internal::CoverageScript"*, %"struct.v8::internal::CoverageScript"** %47, align 8
  %49 = ptrtoint %"struct.v8::internal::CoverageScript"* %48 to i64
  %50 = load %"struct.v8::internal::CoverageScript"*, %"struct.v8::internal::CoverageScript"** %3, align 8
  %51 = icmp eq %"struct.v8::internal::CoverageScript"* %50, %48
  br i1 %51, label %138, label %52

52:                                               ; preds = %34
  %53 = getelementptr %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %50, i64 -1, i32 0, i32 0, i32 0
  %54 = ptrtoint i64** %53 to i64
  %55 = sub i64 %54, %49
  %56 = and i64 %55, 32
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %81

58:                                               ; preds = %52
  %59 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %37, i64 -1
  %60 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %50, i64 -1
  %61 = bitcast %"struct.v8::internal::CoverageScript"* %60 to i64*
  %62 = bitcast %"struct.v8::internal::CoverageScript"* %59 to i64*
  %63 = load i64, i64* %61, align 8
  store i64 %63, i64* %62, align 8
  %64 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %37, i64 -1, i32 1
  %65 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %50, i64 -1, i32 1
  %66 = bitcast %"class.std::__1::vector.0"* %64 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %66, i8 0, i64 24, i1 false) #12
  %67 = bitcast %"class.std::__1::vector.0"* %65 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = bitcast %"class.std::__1::vector.0"* %64 to i64*
  store i64 %68, i64* %69, align 8
  %70 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %50, i64 -1, i32 1, i32 0, i32 1
  %71 = bitcast %"struct.v8::internal::CoverageFunction"** %70 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %37, i64 -1, i32 1, i32 0, i32 1
  %74 = bitcast %"struct.v8::internal::CoverageFunction"** %73 to i64*
  store i64 %72, i64* %74, align 8
  %75 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %50, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %76 = bitcast %"struct.v8::internal::CoverageFunction"** %75 to i64*
  %77 = load i64, i64* %76, align 8
  %78 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %37, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %79 = bitcast %"struct.v8::internal::CoverageFunction"** %78 to i64*
  store i64 %77, i64* %79, align 8
  %80 = bitcast %"class.std::__1::vector.0"* %65 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %80, i8 0, i64 24, i1 false) #12
  br label %81

81:                                               ; preds = %58, %52
  %82 = phi %"struct.v8::internal::CoverageScript"* [ undef, %52 ], [ %59, %58 ]
  %83 = phi %"struct.v8::internal::CoverageScript"* [ %37, %52 ], [ %59, %58 ]
  %84 = phi %"struct.v8::internal::CoverageScript"* [ %50, %52 ], [ %60, %58 ]
  %85 = icmp ult i64 %55, 32
  br i1 %85, label %134, label %86

86:                                               ; preds = %81, %86
  %87 = phi %"struct.v8::internal::CoverageScript"* [ %111, %86 ], [ %83, %81 ]
  %88 = phi %"struct.v8::internal::CoverageScript"* [ %112, %86 ], [ %84, %81 ]
  %89 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %87, i64 -1
  %90 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %88, i64 -1
  %91 = bitcast %"struct.v8::internal::CoverageScript"* %90 to i64*
  %92 = bitcast %"struct.v8::internal::CoverageScript"* %89 to i64*
  %93 = load i64, i64* %91, align 8
  store i64 %93, i64* %92, align 8
  %94 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %87, i64 -1, i32 1
  %95 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %88, i64 -1, i32 1
  %96 = bitcast %"class.std::__1::vector.0"* %94 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %96, i8 0, i64 24, i1 false) #12
  %97 = bitcast %"class.std::__1::vector.0"* %95 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast %"class.std::__1::vector.0"* %94 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %88, i64 -1, i32 1, i32 0, i32 1
  %101 = bitcast %"struct.v8::internal::CoverageFunction"** %100 to i64*
  %102 = load i64, i64* %101, align 8
  %103 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %87, i64 -1, i32 1, i32 0, i32 1
  %104 = bitcast %"struct.v8::internal::CoverageFunction"** %103 to i64*
  store i64 %102, i64* %104, align 8
  %105 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %88, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %106 = bitcast %"struct.v8::internal::CoverageFunction"** %105 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %87, i64 -1, i32 1, i32 0, i32 2, i32 0, i32 0
  %109 = bitcast %"struct.v8::internal::CoverageFunction"** %108 to i64*
  store i64 %107, i64* %109, align 8
  %110 = bitcast %"class.std::__1::vector.0"* %95 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %110, i8 0, i64 24, i1 false) #12
  %111 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %87, i64 -2
  %112 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %88, i64 -2
  %113 = bitcast %"struct.v8::internal::CoverageScript"* %112 to i64*
  %114 = bitcast %"struct.v8::internal::CoverageScript"* %111 to i64*
  %115 = load i64, i64* %113, align 8
  store i64 %115, i64* %114, align 8
  %116 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %87, i64 -2, i32 1
  %117 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %88, i64 -2, i32 1
  %118 = bitcast %"class.std::__1::vector.0"* %116 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %118, i8 0, i64 24, i1 false) #12
  %119 = bitcast %"class.std::__1::vector.0"* %117 to i64*
  %120 = load i64, i64* %119, align 8
  %121 = bitcast %"class.std::__1::vector.0"* %116 to i64*
  store i64 %120, i64* %121, align 8
  %122 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %88, i64 -2, i32 1, i32 0, i32 1
  %123 = bitcast %"struct.v8::internal::CoverageFunction"** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %87, i64 -2, i32 1, i32 0, i32 1
  %126 = bitcast %"struct.v8::internal::CoverageFunction"** %125 to i64*
  store i64 %124, i64* %126, align 8
  %127 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %88, i64 -2, i32 1, i32 0, i32 2, i32 0, i32 0
  %128 = bitcast %"struct.v8::internal::CoverageFunction"** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %87, i64 -2, i32 1, i32 0, i32 2, i32 0, i32 0
  %131 = bitcast %"struct.v8::internal::CoverageFunction"** %130 to i64*
  store i64 %129, i64* %131, align 8
  %132 = bitcast %"class.std::__1::vector.0"* %117 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %132, i8 0, i64 24, i1 false) #12
  %133 = icmp eq %"struct.v8::internal::CoverageScript"* %112, %48
  br i1 %133, label %134, label %86

134:                                              ; preds = %86, %81
  %135 = phi %"struct.v8::internal::CoverageScript"* [ %82, %81 ], [ %111, %86 ]
  %136 = load i64, i64* %6, align 8
  %137 = load %"struct.v8::internal::CoverageScript"*, %"struct.v8::internal::CoverageScript"** %3, align 8
  br label %138

138:                                              ; preds = %34, %134
  %139 = phi %"struct.v8::internal::CoverageScript"* [ %137, %134 ], [ %48, %34 ]
  %140 = phi %"struct.v8::internal::CoverageScript"* [ %135, %134 ], [ %37, %34 ]
  %141 = phi i64 [ %136, %134 ], [ %49, %34 ]
  %142 = ptrtoint %"struct.v8::internal::CoverageScript"* %140 to i64
  store i64 %142, i64* %6, align 8
  store i64 %46, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %143 = inttoptr i64 %141 to %"struct.v8::internal::CoverageScript"*
  %144 = icmp eq %"struct.v8::internal::CoverageScript"* %139, %143
  br i1 %144, label %177, label %145

145:                                              ; preds = %138, %175
  %146 = phi %"struct.v8::internal::CoverageScript"* [ %147, %175 ], [ %139, %138 ]
  %147 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %146, i64 -1
  %148 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %146, i64 -1, i32 1
  %149 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %148, i64 0, i32 0, i32 0
  %150 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %149, align 8
  %151 = icmp eq %"struct.v8::internal::CoverageFunction"* %150, null
  br i1 %151, label %175, label %152

152:                                              ; preds = %145
  %153 = bitcast %"struct.v8::internal::CoverageFunction"* %150 to i8*
  %154 = getelementptr inbounds %"struct.v8::internal::CoverageScript", %"struct.v8::internal::CoverageScript"* %146, i64 -1, i32 1, i32 0, i32 1
  %155 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %154, align 8
  %156 = icmp eq %"struct.v8::internal::CoverageFunction"* %155, %150
  br i1 %156, label %173, label %157

157:                                              ; preds = %152, %168
  %158 = phi %"struct.v8::internal::CoverageFunction"* [ %159, %168 ], [ %155, %152 ]
  %159 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %158, i64 -1
  %160 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %158, i64 -1, i32 5, i32 0, i32 0
  %161 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %160, align 8
  %162 = icmp eq %"struct.v8::internal::CoverageBlock"* %161, null
  br i1 %162, label %168, label %163

163:                                              ; preds = %157
  %164 = ptrtoint %"struct.v8::internal::CoverageBlock"* %161 to i64
  %165 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %158, i64 -1, i32 5, i32 0, i32 1
  %166 = bitcast %"struct.v8::internal::CoverageBlock"** %165 to i64*
  store i64 %164, i64* %166, align 8
  %167 = bitcast %"struct.v8::internal::CoverageBlock"* %161 to i8*
  tail call void @_ZdlPv(i8* %167) #14
  br label %168

168:                                              ; preds = %163, %157
  %169 = icmp eq %"struct.v8::internal::CoverageFunction"* %159, %150
  br i1 %169, label %170, label %157

170:                                              ; preds = %168
  %171 = bitcast %"class.std::__1::vector.0"* %148 to i8**
  %172 = load i8*, i8** %171, align 8
  br label %173

173:                                              ; preds = %170, %152
  %174 = phi i8* [ %172, %170 ], [ %153, %152 ]
  store %"struct.v8::internal::CoverageFunction"* %150, %"struct.v8::internal::CoverageFunction"** %154, align 8
  tail call void @_ZdlPv(i8* %174) #14
  br label %175

175:                                              ; preds = %173, %145
  %176 = icmp eq %"struct.v8::internal::CoverageScript"* %147, %143
  br i1 %176, label %177, label %145

177:                                              ; preds = %175, %138
  %178 = icmp eq i64 %141, 0
  br i1 %178, label %181, label %179

179:                                              ; preds = %177
  %180 = inttoptr i64 %141 to i8*
  tail call void @_ZdlPv(i8* %180) #14
  br label %181

181:                                              ; preds = %177, %179
  ret void
}

declare i32 @_ZNK2v88internal18SharedFunctionInfo11EndPositionEv(%"class.v8::internal::SharedFunctionInfo"*) local_unnamed_addr #1

declare i32 @_ZNK2v88internal18SharedFunctionInfo13StartPositionEv(%"class.v8::internal::SharedFunctionInfo"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZNSt3__16__sortIRNS_6__lessIN2v88internal12_GLOBAL__N_126SharedFunctionInfoAndCountES5_EEPS5_EEvT0_S9_T_(%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"*, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"*) unnamed_addr #0 {
  %3 = alloca [24 x i8], align 8
  %4 = getelementptr inbounds [24 x i8], [24 x i8]* %3, i64 0, i64 0
  br label %5

5:                                                ; preds = %678, %2
  %6 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %1, %2 ], [ %620, %678 ]
  %7 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %0, %2 ], [ %20, %678 ]
  %8 = ptrtoint %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %6 to i64
  %9 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %6, i64 -1
  %10 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %6, i64 -2
  %11 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %6, i64 -1, i32 2
  %12 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %6, i64 -1, i32 3
  %13 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %9, i64 0, i32 0, i32 0, i32 0
  %14 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %6, i64 -1, i32 1
  %15 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %9 to i8*
  %16 = ptrtoint %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %6 to i64
  br label %17

17:                                               ; preds = %689, %5
  %18 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %7, %5 ], [ %690, %689 ]
  br label %19

19:                                               ; preds = %453, %17
  %20 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %18, %17 ], [ %369, %453 ]
  %21 = ptrtoint %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20 to i64
  %22 = sub i64 %8, %21
  %23 = sdiv exact i64 %22, 24
  switch i64 %23, label %87 [
    i64 0, label %693
    i64 1, label %693
    i64 2, label %24
    i64 3, label %72
    i64 4, label %76
    i64 5, label %81
  ]

24:                                               ; preds = %19
  %25 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %6, i64 -1
  %26 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %6, i64 -1, i32 2
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 0, i32 2
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %27, %29
  br i1 %30, label %33, label %31

31:                                               ; preds = %24
  %32 = icmp slt i32 %27, %29
  br i1 %32, label %69, label %693

33:                                               ; preds = %24
  %34 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %6, i64 -1, i32 3
  %35 = load i32, i32* %34, align 8
  %36 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 0, i32 3
  %37 = load i32, i32* %36, align 8
  %38 = icmp eq i32 %35, %37
  br i1 %38, label %41, label %39

39:                                               ; preds = %33
  %40 = icmp sgt i32 %35, %37
  br i1 %40, label %69, label %693

41:                                               ; preds = %33
  %42 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %25, i64 0, i32 0, i32 0, i32 0
  %43 = load i64*, i64** %42, align 8
  %44 = load i64, i64* %43, align 8
  %45 = add i64 %44, 27
  %46 = inttoptr i64 %45 to i32*
  %47 = load atomic i32, i32* %46 monotonic, align 4
  %48 = and i32 %47, 134217728
  %49 = icmp ne i32 %48, 0
  %50 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 0, i32 0, i32 0, i32 0
  %51 = load i64*, i64** %50, align 8
  %52 = load i64, i64* %51, align 8
  %53 = add i64 %52, 27
  %54 = inttoptr i64 %53 to i32*
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = and i32 %55, 134217728
  %57 = icmp ne i32 %56, 0
  %58 = xor i1 %49, %57
  br i1 %58, label %59, label %63

59:                                               ; preds = %41
  %60 = load atomic i32, i32* %46 monotonic, align 4
  %61 = and i32 %60, 134217728
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %693, label %69

63:                                               ; preds = %41
  %64 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %6, i64 -1, i32 1
  %65 = load i32, i32* %64, align 8
  %66 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 0, i32 1
  %67 = load i32, i32* %66, align 8
  %68 = icmp ugt i32 %65, %67
  br i1 %68, label %69, label %693

69:                                               ; preds = %59, %39, %31, %63
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4)
  %70 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %70, i64 24, i1 false) #12
  %71 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %25 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %70, i8* align 8 %71, i64 20, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %71, i8* nonnull align 8 %4, i64 20, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4)
  br label %693

72:                                               ; preds = %19
  %73 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 1
  %74 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %6, i64 -1
  %75 = tail call fastcc i32 @_ZNSt3__17__sort3IRNS_6__lessIN2v88internal12_GLOBAL__N_126SharedFunctionInfoAndCountES5_EEPS5_EEjT0_S9_S9_T_(%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %73, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %74)
  br label %693

76:                                               ; preds = %19
  %77 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 1
  %78 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 2
  %79 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %6, i64 -1
  %80 = tail call fastcc i32 @_ZNSt3__17__sort4IRNS_6__lessIN2v88internal12_GLOBAL__N_126SharedFunctionInfoAndCountES5_EEPS5_EEjT0_S9_S9_S9_T_(%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %77, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %78, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %79)
  br label %693

81:                                               ; preds = %19
  %82 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 1
  %83 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 2
  %84 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 3
  %85 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %6, i64 -1
  %86 = tail call fastcc i32 @_ZNSt3__17__sort5IRNS_6__lessIN2v88internal12_GLOBAL__N_126SharedFunctionInfoAndCountES5_EEPS5_EEjT0_S9_S9_S9_S9_T_(%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %82, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %83, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %84, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %85)
  br label %693

87:                                               ; preds = %19
  %88 = icmp slt i64 %22, 744
  br i1 %88, label %89, label %204

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 2
  %91 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 1
  %92 = tail call fastcc i32 @_ZNSt3__17__sort3IRNS_6__lessIN2v88internal12_GLOBAL__N_126SharedFunctionInfoAndCountES5_EEPS5_EEjT0_S9_S9_T_(%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %91, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %90) #12
  %93 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 3
  %94 = icmp eq %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %93, %6
  br i1 %94, label %693, label %95

95:                                               ; preds = %89, %201
  %96 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %202, %201 ], [ %93, %89 ]
  %97 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %96, %201 ], [ %90, %89 ]
  %98 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %96, i64 0, i32 2
  %99 = load i32, i32* %98, align 4
  %100 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %97, i64 0, i32 2
  %101 = load i32, i32* %100, align 4
  %102 = icmp eq i32 %99, %101
  br i1 %102, label %108, label %103

103:                                              ; preds = %95
  %104 = icmp slt i32 %99, %101
  br i1 %104, label %105, label %201

105:                                              ; preds = %103
  %106 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %96, i64 0, i32 3
  %107 = load i32, i32* %106, align 8
  br label %144

108:                                              ; preds = %95
  %109 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %96, i64 0, i32 3
  %110 = load i32, i32* %109, align 8
  %111 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %97, i64 0, i32 3
  %112 = load i32, i32* %111, align 8
  %113 = icmp eq i32 %110, %112
  br i1 %113, label %116, label %114

114:                                              ; preds = %108
  %115 = icmp sgt i32 %110, %112
  br i1 %115, label %144, label %201

116:                                              ; preds = %108
  %117 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %96, i64 0, i32 0, i32 0, i32 0
  %118 = load i64*, i64** %117, align 8
  %119 = load i64, i64* %118, align 8
  %120 = add i64 %119, 27
  %121 = inttoptr i64 %120 to i32*
  %122 = load atomic i32, i32* %121 monotonic, align 4
  %123 = and i32 %122, 134217728
  %124 = icmp ne i32 %123, 0
  %125 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %97, i64 0, i32 0, i32 0, i32 0
  %126 = load i64*, i64** %125, align 8
  %127 = load i64, i64* %126, align 8
  %128 = add i64 %127, 27
  %129 = inttoptr i64 %128 to i32*
  %130 = load atomic i32, i32* %129 monotonic, align 4
  %131 = and i32 %130, 134217728
  %132 = icmp ne i32 %131, 0
  %133 = xor i1 %124, %132
  br i1 %133, label %134, label %138

134:                                              ; preds = %116
  %135 = load atomic i32, i32* %121 monotonic, align 4
  %136 = and i32 %135, 134217728
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %201, label %144

138:                                              ; preds = %116
  %139 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %96, i64 0, i32 1
  %140 = load i32, i32* %139, align 8
  %141 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %97, i64 0, i32 1
  %142 = load i32, i32* %141, align 8
  %143 = icmp ugt i32 %140, %142
  br i1 %143, label %144, label %201

144:                                              ; preds = %138, %134, %114, %105
  %145 = phi i32 [ %107, %105 ], [ %110, %134 ], [ %110, %114 ], [ %110, %138 ]
  %146 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %96, i64 0, i32 0, i32 0, i32 0
  %147 = load i64*, i64** %146, align 8
  %148 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %96, i64 0, i32 1
  %149 = load i32, i32* %148, align 8
  %150 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %96 to i8*
  %151 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %97 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %150, i8* align 8 %151, i64 20, i1 false) #12
  %152 = icmp eq %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %97, %20
  br i1 %152, label %195, label %153

153:                                              ; preds = %144, %191
  %154 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %155, %191 ], [ %97, %144 ]
  %155 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %154, i64 -1
  %156 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %154, i64 -1, i32 2
  %157 = load i32, i32* %156, align 4
  %158 = icmp eq i32 %99, %157
  br i1 %158, label %161, label %159

159:                                              ; preds = %153
  %160 = icmp slt i32 %99, %157
  br i1 %160, label %191, label %195

161:                                              ; preds = %153
  %162 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %154, i64 -1, i32 3
  %163 = load i32, i32* %162, align 8
  %164 = icmp eq i32 %145, %163
  br i1 %164, label %167, label %165

165:                                              ; preds = %161
  %166 = icmp sgt i32 %145, %163
  br i1 %166, label %191, label %195

167:                                              ; preds = %161
  %168 = load i64, i64* %147, align 8
  %169 = add i64 %168, 27
  %170 = inttoptr i64 %169 to i32*
  %171 = load atomic i32, i32* %170 monotonic, align 4
  %172 = and i32 %171, 134217728
  %173 = icmp ne i32 %172, 0
  %174 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %155, i64 0, i32 0, i32 0, i32 0
  %175 = load i64*, i64** %174, align 8
  %176 = load i64, i64* %175, align 8
  %177 = add i64 %176, 27
  %178 = inttoptr i64 %177 to i32*
  %179 = load atomic i32, i32* %178 monotonic, align 4
  %180 = and i32 %179, 134217728
  %181 = icmp ne i32 %180, 0
  %182 = xor i1 %173, %181
  br i1 %182, label %183, label %187

183:                                              ; preds = %167
  %184 = load atomic i32, i32* %170 monotonic, align 4
  %185 = and i32 %184, 134217728
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %195, label %191

187:                                              ; preds = %167
  %188 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %154, i64 -1, i32 1
  %189 = load i32, i32* %188, align 8
  %190 = icmp ugt i32 %149, %189
  br i1 %190, label %191, label %195

191:                                              ; preds = %187, %183, %165, %159
  %192 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %154 to i8*
  %193 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %155 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %192, i8* align 8 %193, i64 20, i1 false) #12
  %194 = icmp eq %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %155, %20
  br i1 %194, label %195, label %153

195:                                              ; preds = %191, %187, %183, %165, %159, %144
  %196 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %20, %144 ], [ %154, %187 ], [ %20, %191 ], [ %154, %159 ], [ %154, %165 ], [ %154, %183 ]
  %197 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %196, i64 0, i32 0, i32 0, i32 0
  store i64* %147, i64** %197, align 8
  %198 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %196, i64 0, i32 1
  store i32 %149, i32* %198, align 8
  %199 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %196, i64 0, i32 2
  store i32 %99, i32* %199, align 4
  %200 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %196, i64 0, i32 3
  store i32 %145, i32* %200, align 8
  br label %201

201:                                              ; preds = %195, %138, %134, %114, %103
  %202 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %96, i64 1
  %203 = icmp eq %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %202, %6
  br i1 %203, label %693, label %95

204:                                              ; preds = %87
  %205 = icmp sgt i64 %22, 23976
  %206 = udiv i64 %22, 48
  %207 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 %206
  br i1 %205, label %208, label %213

208:                                              ; preds = %204
  %209 = udiv i64 %22, 96
  %210 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 %209
  %211 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %207, i64 %209
  %212 = tail call fastcc i32 @_ZNSt3__17__sort5IRNS_6__lessIN2v88internal12_GLOBAL__N_126SharedFunctionInfoAndCountES5_EEPS5_EEjT0_S9_S9_S9_S9_T_(%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %210, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %207, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %211, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %9)
  br label %215

213:                                              ; preds = %204
  %214 = tail call fastcc i32 @_ZNSt3__17__sort3IRNS_6__lessIN2v88internal12_GLOBAL__N_126SharedFunctionInfoAndCountES5_EEPS5_EEjT0_S9_S9_T_(%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %207, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %9)
  br label %215

215:                                              ; preds = %213, %208
  %216 = phi i32 [ %212, %208 ], [ %214, %213 ]
  %217 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 0, i32 2
  %218 = load i32, i32* %217, align 4
  %219 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 %206, i32 2
  %220 = load i32, i32* %219, align 4
  %221 = icmp eq i32 %218, %220
  br i1 %221, label %224, label %222

222:                                              ; preds = %215
  %223 = icmp slt i32 %218, %220
  br i1 %223, label %507, label %260

224:                                              ; preds = %215
  %225 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 0, i32 3
  %226 = load i32, i32* %225, align 8
  %227 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 %206, i32 3
  %228 = load i32, i32* %227, align 8
  %229 = icmp eq i32 %226, %228
  br i1 %229, label %232, label %230

230:                                              ; preds = %224
  %231 = icmp sgt i32 %226, %228
  br i1 %231, label %507, label %260

232:                                              ; preds = %224
  %233 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 0, i32 0, i32 0, i32 0
  %234 = load i64*, i64** %233, align 8
  %235 = load i64, i64* %234, align 8
  %236 = add i64 %235, 27
  %237 = inttoptr i64 %236 to i32*
  %238 = load atomic i32, i32* %237 monotonic, align 4
  %239 = and i32 %238, 134217728
  %240 = icmp ne i32 %239, 0
  %241 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %207, i64 0, i32 0, i32 0, i32 0
  %242 = load i64*, i64** %241, align 8
  %243 = load i64, i64* %242, align 8
  %244 = add i64 %243, 27
  %245 = inttoptr i64 %244 to i32*
  %246 = load atomic i32, i32* %245 monotonic, align 4
  %247 = and i32 %246, 134217728
  %248 = icmp ne i32 %247, 0
  %249 = xor i1 %240, %248
  br i1 %249, label %250, label %254

250:                                              ; preds = %232
  %251 = load atomic i32, i32* %237 monotonic, align 4
  %252 = and i32 %251, 134217728
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %260, label %507

254:                                              ; preds = %232
  %255 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 0, i32 1
  %256 = load i32, i32* %255, align 8
  %257 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 %206, i32 1
  %258 = load i32, i32* %257, align 8
  %259 = icmp ugt i32 %256, %258
  br i1 %259, label %507, label %260

260:                                              ; preds = %254, %222, %230, %250
  %261 = icmp eq %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, %10
  br i1 %261, label %266, label %262

262:                                              ; preds = %260
  %263 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 %206, i32 3
  %264 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %207, i64 0, i32 0, i32 0, i32 0
  %265 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 %206, i32 1
  br label %459

266:                                              ; preds = %500, %260
  %267 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 1
  %268 = load i32, i32* %11, align 4
  %269 = icmp eq i32 %218, %268
  br i1 %269, label %272, label %270

270:                                              ; preds = %266
  %271 = icmp slt i32 %218, %268
  br i1 %271, label %357, label %305

272:                                              ; preds = %266
  %273 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 0, i32 3
  %274 = load i32, i32* %273, align 8
  %275 = load i32, i32* %12, align 8
  %276 = icmp eq i32 %274, %275
  br i1 %276, label %279, label %277

277:                                              ; preds = %272
  %278 = icmp sgt i32 %274, %275
  br i1 %278, label %357, label %305

279:                                              ; preds = %272
  %280 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 0, i32 0, i32 0, i32 0
  %281 = load i64*, i64** %280, align 8
  %282 = load i64, i64* %281, align 8
  %283 = add i64 %282, 27
  %284 = inttoptr i64 %283 to i32*
  %285 = load atomic i32, i32* %284 monotonic, align 4
  %286 = and i32 %285, 134217728
  %287 = icmp ne i32 %286, 0
  %288 = load i64*, i64** %13, align 8
  %289 = load i64, i64* %288, align 8
  %290 = add i64 %289, 27
  %291 = inttoptr i64 %290 to i32*
  %292 = load atomic i32, i32* %291 monotonic, align 4
  %293 = and i32 %292, 134217728
  %294 = icmp ne i32 %293, 0
  %295 = xor i1 %287, %294
  br i1 %295, label %296, label %300

296:                                              ; preds = %279
  %297 = load atomic i32, i32* %284 monotonic, align 4
  %298 = and i32 %297, 134217728
  %299 = icmp eq i32 %298, 0
  br i1 %299, label %305, label %357

300:                                              ; preds = %279
  %301 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 0, i32 1
  %302 = load i32, i32* %301, align 8
  %303 = load i32, i32* %14, align 8
  %304 = icmp ugt i32 %302, %303
  br i1 %304, label %357, label %305

305:                                              ; preds = %300, %270, %277, %296
  %306 = icmp eq %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %267, %9
  br i1 %306, label %693, label %307

307:                                              ; preds = %305
  %308 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 0, i32 3
  %309 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 0, i32 0, i32 0, i32 0
  %310 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 0, i32 1
  br label %311

311:                                              ; preds = %307, %354
  %312 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %267, %307 ], [ %355, %354 ]
  %313 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %312, i64 0, i32 2
  %314 = load i32, i32* %313, align 4
  %315 = icmp eq i32 %218, %314
  br i1 %315, label %318, label %316

316:                                              ; preds = %311
  %317 = icmp slt i32 %218, %314
  br i1 %317, label %351, label %354

318:                                              ; preds = %311
  %319 = load i32, i32* %308, align 8
  %320 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %312, i64 0, i32 3
  %321 = load i32, i32* %320, align 8
  %322 = icmp eq i32 %319, %321
  br i1 %322, label %325, label %323

323:                                              ; preds = %318
  %324 = icmp sgt i32 %319, %321
  br i1 %324, label %351, label %354

325:                                              ; preds = %318
  %326 = load i64*, i64** %309, align 8
  %327 = load i64, i64* %326, align 8
  %328 = add i64 %327, 27
  %329 = inttoptr i64 %328 to i32*
  %330 = load atomic i32, i32* %329 monotonic, align 4
  %331 = and i32 %330, 134217728
  %332 = icmp ne i32 %331, 0
  %333 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %312, i64 0, i32 0, i32 0, i32 0
  %334 = load i64*, i64** %333, align 8
  %335 = load i64, i64* %334, align 8
  %336 = add i64 %335, 27
  %337 = inttoptr i64 %336 to i32*
  %338 = load atomic i32, i32* %337 monotonic, align 4
  %339 = and i32 %338, 134217728
  %340 = icmp ne i32 %339, 0
  %341 = xor i1 %332, %340
  br i1 %341, label %342, label %346

342:                                              ; preds = %325
  %343 = load atomic i32, i32* %329 monotonic, align 4
  %344 = and i32 %343, 134217728
  %345 = icmp eq i32 %344, 0
  br i1 %345, label %354, label %351

346:                                              ; preds = %325
  %347 = load i32, i32* %310, align 8
  %348 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %312, i64 0, i32 1
  %349 = load i32, i32* %348, align 8
  %350 = icmp ugt i32 %347, %349
  br i1 %350, label %351, label %354

351:                                              ; preds = %342, %323, %316, %346
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4)
  %352 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %312 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %352, i64 24, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %352, i8* align 8 %15, i64 20, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %15, i8* nonnull align 8 %4, i64 20, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4)
  %353 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %312, i64 1
  br label %357

354:                                              ; preds = %342, %323, %316, %346
  %355 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %312, i64 1
  %356 = icmp eq %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %355, %9
  br i1 %356, label %693, label %311

357:                                              ; preds = %296, %277, %270, %351, %300
  %358 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %267, %300 ], [ %353, %351 ], [ %267, %270 ], [ %267, %277 ], [ %267, %296 ]
  %359 = icmp eq %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %358, %9
  br i1 %359, label %693, label %360

360:                                              ; preds = %357
  %361 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 0, i32 1
  %362 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 0, i32 3
  %363 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 0, i32 0, i32 0, i32 0
  br label %364

364:                                              ; preds = %360, %455
  %365 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %458, %455 ], [ %358, %360 ]
  %366 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %413, %455 ], [ %9, %360 ]
  %367 = load i32, i32* %217, align 4
  br label %368

368:                                              ; preds = %409, %364
  %369 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %365, %364 ], [ %410, %409 ]
  %370 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %369, i64 0, i32 2
  %371 = load i32, i32* %370, align 4
  %372 = icmp eq i32 %367, %371
  br i1 %372, label %375, label %373

373:                                              ; preds = %368
  %374 = icmp slt i32 %367, %371
  br i1 %374, label %403, label %409

375:                                              ; preds = %368
  %376 = load i32, i32* %362, align 8
  %377 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %369, i64 0, i32 3
  %378 = load i32, i32* %377, align 8
  %379 = icmp eq i32 %376, %378
  br i1 %379, label %382, label %380

380:                                              ; preds = %375
  %381 = icmp sgt i32 %376, %378
  br i1 %381, label %403, label %409

382:                                              ; preds = %375
  %383 = load i64*, i64** %363, align 8
  %384 = load i64, i64* %383, align 8
  %385 = add i64 %384, 27
  %386 = inttoptr i64 %385 to i32*
  %387 = load atomic i32, i32* %386 monotonic, align 4
  %388 = and i32 %387, 134217728
  %389 = icmp ne i32 %388, 0
  %390 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %369, i64 0, i32 0, i32 0, i32 0
  %391 = load i64*, i64** %390, align 8
  %392 = load i64, i64* %391, align 8
  %393 = add i64 %392, 27
  %394 = inttoptr i64 %393 to i32*
  %395 = load atomic i32, i32* %394 monotonic, align 4
  %396 = and i32 %395, 134217728
  %397 = icmp ne i32 %396, 0
  %398 = xor i1 %389, %397
  br i1 %398, label %399, label %404

399:                                              ; preds = %382
  %400 = load atomic i32, i32* %386 monotonic, align 4
  %401 = and i32 %400, 134217728
  %402 = icmp eq i32 %401, 0
  br i1 %402, label %409, label %403

403:                                              ; preds = %404, %373, %380, %399
  br label %411

404:                                              ; preds = %382
  %405 = load i32, i32* %361, align 8
  %406 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %369, i64 0, i32 1
  %407 = load i32, i32* %406, align 8
  %408 = icmp ugt i32 %405, %407
  br i1 %408, label %403, label %409

409:                                              ; preds = %399, %380, %373, %404
  %410 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %369, i64 1
  br label %368

411:                                              ; preds = %452, %403
  %412 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %366, %403 ], [ %413, %452 ]
  %413 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %412, i64 -1
  %414 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %412, i64 -1, i32 2
  %415 = load i32, i32* %414, align 4
  %416 = icmp eq i32 %367, %415
  br i1 %416, label %419, label %417

417:                                              ; preds = %411
  %418 = icmp slt i32 %367, %415
  br i1 %418, label %452, label %453

419:                                              ; preds = %411
  %420 = load i32, i32* %362, align 8
  %421 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %412, i64 -1, i32 3
  %422 = load i32, i32* %421, align 8
  %423 = icmp eq i32 %420, %422
  br i1 %423, label %426, label %424

424:                                              ; preds = %419
  %425 = icmp sgt i32 %420, %422
  br i1 %425, label %452, label %453

426:                                              ; preds = %419
  %427 = load i64*, i64** %363, align 8
  %428 = load i64, i64* %427, align 8
  %429 = add i64 %428, 27
  %430 = inttoptr i64 %429 to i32*
  %431 = load atomic i32, i32* %430 monotonic, align 4
  %432 = and i32 %431, 134217728
  %433 = icmp ne i32 %432, 0
  %434 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %413, i64 0, i32 0, i32 0, i32 0
  %435 = load i64*, i64** %434, align 8
  %436 = load i64, i64* %435, align 8
  %437 = add i64 %436, 27
  %438 = inttoptr i64 %437 to i32*
  %439 = load atomic i32, i32* %438 monotonic, align 4
  %440 = and i32 %439, 134217728
  %441 = icmp ne i32 %440, 0
  %442 = xor i1 %433, %441
  br i1 %442, label %443, label %447

443:                                              ; preds = %426
  %444 = load atomic i32, i32* %430 monotonic, align 4
  %445 = and i32 %444, 134217728
  %446 = icmp eq i32 %445, 0
  br i1 %446, label %453, label %452

447:                                              ; preds = %426
  %448 = load i32, i32* %361, align 8
  %449 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %412, i64 -1, i32 1
  %450 = load i32, i32* %449, align 8
  %451 = icmp ugt i32 %448, %450
  br i1 %451, label %452, label %453

452:                                              ; preds = %447, %417, %424, %443
  br label %411

453:                                              ; preds = %443, %424, %417, %447
  %454 = icmp ult %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %369, %413
  br i1 %454, label %455, label %19

455:                                              ; preds = %453
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4)
  %456 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %369 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %456, i64 24, i1 false) #12
  %457 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %413 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %456, i8* align 8 %457, i64 20, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %457, i8* nonnull align 8 %4, i64 20, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4)
  %458 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %369, i64 1
  br label %364

459:                                              ; preds = %262, %500
  %460 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %10, %262 ], [ %501, %500 ]
  %461 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %9, %262 ], [ %460, %500 ]
  %462 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %461, i64 -1, i32 2
  %463 = load i32, i32* %462, align 4
  %464 = icmp eq i32 %463, %220
  br i1 %464, label %467, label %465

465:                                              ; preds = %459
  %466 = icmp slt i32 %463, %220
  br i1 %466, label %503, label %500

467:                                              ; preds = %459
  %468 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %461, i64 -1, i32 3
  %469 = load i32, i32* %468, align 8
  %470 = load i32, i32* %263, align 8
  %471 = icmp eq i32 %469, %470
  br i1 %471, label %474, label %472

472:                                              ; preds = %467
  %473 = icmp sgt i32 %469, %470
  br i1 %473, label %503, label %500

474:                                              ; preds = %467
  %475 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %460, i64 0, i32 0, i32 0, i32 0
  %476 = load i64*, i64** %475, align 8
  %477 = load i64, i64* %476, align 8
  %478 = add i64 %477, 27
  %479 = inttoptr i64 %478 to i32*
  %480 = load atomic i32, i32* %479 monotonic, align 4
  %481 = and i32 %480, 134217728
  %482 = icmp ne i32 %481, 0
  %483 = load i64*, i64** %264, align 8
  %484 = load i64, i64* %483, align 8
  %485 = add i64 %484, 27
  %486 = inttoptr i64 %485 to i32*
  %487 = load atomic i32, i32* %486 monotonic, align 4
  %488 = and i32 %487, 134217728
  %489 = icmp ne i32 %488, 0
  %490 = xor i1 %482, %489
  br i1 %490, label %491, label %495

491:                                              ; preds = %474
  %492 = load atomic i32, i32* %479 monotonic, align 4
  %493 = and i32 %492, 134217728
  %494 = icmp eq i32 %493, 0
  br i1 %494, label %500, label %503

495:                                              ; preds = %474
  %496 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %461, i64 -1, i32 1
  %497 = load i32, i32* %496, align 8
  %498 = load i32, i32* %265, align 8
  %499 = icmp ugt i32 %497, %498
  br i1 %499, label %503, label %500

500:                                              ; preds = %495, %465, %472, %491
  %501 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %460, i64 -1
  %502 = icmp eq %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, %501
  br i1 %502, label %266, label %459

503:                                              ; preds = %491, %472, %465, %495
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4)
  %504 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %504, i64 24, i1 false) #12
  %505 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %460 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %504, i8* align 8 %505, i64 20, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %505, i8* nonnull align 8 %4, i64 20, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4)
  %506 = add i32 %216, 1
  br label %507

507:                                              ; preds = %250, %230, %222, %254, %503
  %508 = phi i32 [ %506, %503 ], [ %216, %254 ], [ %216, %222 ], [ %216, %230 ], [ %216, %250 ]
  %509 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %460, %503 ], [ %9, %254 ], [ %9, %222 ], [ %9, %230 ], [ %9, %250 ]
  %510 = ptrtoint %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20 to i64
  %511 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, i64 1
  %512 = icmp ult %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %511, %509
  br i1 %512, label %513, label %617

513:                                              ; preds = %507, %610
  %514 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %615, %610 ], [ %207, %507 ]
  %515 = phi i32 [ %613, %610 ], [ %508, %507 ]
  %516 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %616, %610 ], [ %511, %507 ]
  %517 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %568, %610 ], [ %509, %507 ]
  %518 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %514, i64 0, i32 2
  %519 = load i32, i32* %518, align 4
  %520 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %514, i64 0, i32 3
  %521 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %514, i64 0, i32 0, i32 0, i32 0
  %522 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %514, i64 0, i32 1
  br label %523

523:                                              ; preds = %564, %513
  %524 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %516, %513 ], [ %565, %564 ]
  %525 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %524, i64 0, i32 2
  %526 = load i32, i32* %525, align 4
  %527 = icmp eq i32 %526, %519
  br i1 %527, label %530, label %528

528:                                              ; preds = %523
  %529 = icmp slt i32 %526, %519
  br i1 %529, label %564, label %558

530:                                              ; preds = %523
  %531 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %524, i64 0, i32 3
  %532 = load i32, i32* %531, align 8
  %533 = load i32, i32* %520, align 8
  %534 = icmp eq i32 %532, %533
  br i1 %534, label %537, label %535

535:                                              ; preds = %530
  %536 = icmp sgt i32 %532, %533
  br i1 %536, label %564, label %558

537:                                              ; preds = %530
  %538 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %524, i64 0, i32 0, i32 0, i32 0
  %539 = load i64*, i64** %538, align 8
  %540 = load i64, i64* %539, align 8
  %541 = add i64 %540, 27
  %542 = inttoptr i64 %541 to i32*
  %543 = load atomic i32, i32* %542 monotonic, align 4
  %544 = and i32 %543, 134217728
  %545 = icmp ne i32 %544, 0
  %546 = load i64*, i64** %521, align 8
  %547 = load i64, i64* %546, align 8
  %548 = add i64 %547, 27
  %549 = inttoptr i64 %548 to i32*
  %550 = load atomic i32, i32* %549 monotonic, align 4
  %551 = and i32 %550, 134217728
  %552 = icmp ne i32 %551, 0
  %553 = xor i1 %545, %552
  br i1 %553, label %554, label %559

554:                                              ; preds = %537
  %555 = load atomic i32, i32* %542 monotonic, align 4
  %556 = and i32 %555, 134217728
  %557 = icmp eq i32 %556, 0
  br i1 %557, label %558, label %564

558:                                              ; preds = %559, %528, %535, %554
  br label %566

559:                                              ; preds = %537
  %560 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %524, i64 0, i32 1
  %561 = load i32, i32* %560, align 8
  %562 = load i32, i32* %522, align 8
  %563 = icmp ugt i32 %561, %562
  br i1 %563, label %564, label %558

564:                                              ; preds = %554, %535, %528, %559
  %565 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %524, i64 1
  br label %523

566:                                              ; preds = %607, %558
  %567 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %517, %558 ], [ %568, %607 ]
  %568 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %567, i64 -1
  %569 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %567, i64 -1, i32 2
  %570 = load i32, i32* %569, align 4
  %571 = icmp eq i32 %570, %519
  br i1 %571, label %574, label %572

572:                                              ; preds = %566
  %573 = icmp slt i32 %570, %519
  br i1 %573, label %608, label %607

574:                                              ; preds = %566
  %575 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %567, i64 -1, i32 3
  %576 = load i32, i32* %575, align 8
  %577 = load i32, i32* %520, align 8
  %578 = icmp eq i32 %576, %577
  br i1 %578, label %581, label %579

579:                                              ; preds = %574
  %580 = icmp sgt i32 %576, %577
  br i1 %580, label %608, label %607

581:                                              ; preds = %574
  %582 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %568, i64 0, i32 0, i32 0, i32 0
  %583 = load i64*, i64** %582, align 8
  %584 = load i64, i64* %583, align 8
  %585 = add i64 %584, 27
  %586 = inttoptr i64 %585 to i32*
  %587 = load atomic i32, i32* %586 monotonic, align 4
  %588 = and i32 %587, 134217728
  %589 = icmp ne i32 %588, 0
  %590 = load i64*, i64** %521, align 8
  %591 = load i64, i64* %590, align 8
  %592 = add i64 %591, 27
  %593 = inttoptr i64 %592 to i32*
  %594 = load atomic i32, i32* %593 monotonic, align 4
  %595 = and i32 %594, 134217728
  %596 = icmp ne i32 %595, 0
  %597 = xor i1 %589, %596
  br i1 %597, label %598, label %602

598:                                              ; preds = %581
  %599 = load atomic i32, i32* %586 monotonic, align 4
  %600 = and i32 %599, 134217728
  %601 = icmp eq i32 %600, 0
  br i1 %601, label %607, label %608

602:                                              ; preds = %581
  %603 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %567, i64 -1, i32 1
  %604 = load i32, i32* %603, align 8
  %605 = load i32, i32* %522, align 8
  %606 = icmp ugt i32 %604, %605
  br i1 %606, label %608, label %607

607:                                              ; preds = %602, %572, %579, %598
  br label %566

608:                                              ; preds = %598, %579, %572, %602
  %609 = icmp ugt %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %524, %568
  br i1 %609, label %617, label %610

610:                                              ; preds = %608
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4)
  %611 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %524 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %611, i64 24, i1 false) #12
  %612 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %568 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %611, i8* align 8 %612, i64 20, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %612, i8* nonnull align 8 %4, i64 20, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4)
  %613 = add i32 %515, 1
  %614 = icmp eq %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %514, %524
  %615 = select i1 %614, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %568, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %514
  %616 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %524, i64 1
  br label %513

617:                                              ; preds = %608, %507
  %618 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %207, %507 ], [ %514, %608 ]
  %619 = phi i32 [ %508, %507 ], [ %515, %608 ]
  %620 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %511, %507 ], [ %524, %608 ]
  %621 = icmp eq %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %620, %618
  br i1 %621, label %670, label %622

622:                                              ; preds = %617
  %623 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %618, i64 0, i32 2
  %624 = load i32, i32* %623, align 4
  %625 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %620, i64 0, i32 2
  %626 = load i32, i32* %625, align 4
  %627 = icmp eq i32 %624, %626
  br i1 %627, label %630, label %628

628:                                              ; preds = %622
  %629 = icmp slt i32 %624, %626
  br i1 %629, label %666, label %670

630:                                              ; preds = %622
  %631 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %618, i64 0, i32 3
  %632 = load i32, i32* %631, align 8
  %633 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %620, i64 0, i32 3
  %634 = load i32, i32* %633, align 8
  %635 = icmp eq i32 %632, %634
  br i1 %635, label %638, label %636

636:                                              ; preds = %630
  %637 = icmp sgt i32 %632, %634
  br i1 %637, label %666, label %670

638:                                              ; preds = %630
  %639 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %618, i64 0, i32 0, i32 0, i32 0
  %640 = load i64*, i64** %639, align 8
  %641 = load i64, i64* %640, align 8
  %642 = add i64 %641, 27
  %643 = inttoptr i64 %642 to i32*
  %644 = load atomic i32, i32* %643 monotonic, align 4
  %645 = and i32 %644, 134217728
  %646 = icmp ne i32 %645, 0
  %647 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %620, i64 0, i32 0, i32 0, i32 0
  %648 = load i64*, i64** %647, align 8
  %649 = load i64, i64* %648, align 8
  %650 = add i64 %649, 27
  %651 = inttoptr i64 %650 to i32*
  %652 = load atomic i32, i32* %651 monotonic, align 4
  %653 = and i32 %652, 134217728
  %654 = icmp ne i32 %653, 0
  %655 = xor i1 %646, %654
  br i1 %655, label %656, label %660

656:                                              ; preds = %638
  %657 = load atomic i32, i32* %643 monotonic, align 4
  %658 = and i32 %657, 134217728
  %659 = icmp eq i32 %658, 0
  br i1 %659, label %670, label %666

660:                                              ; preds = %638
  %661 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %618, i64 0, i32 1
  %662 = load i32, i32* %661, align 8
  %663 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %620, i64 0, i32 1
  %664 = load i32, i32* %663, align 8
  %665 = icmp ugt i32 %662, %664
  br i1 %665, label %666, label %670

666:                                              ; preds = %656, %636, %628, %660
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4)
  %667 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %620 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %4, i8* align 8 %667, i64 24, i1 false) #12
  %668 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %618 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %667, i8* align 8 %668, i64 20, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %668, i8* nonnull align 8 %4, i64 20, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4)
  %669 = add i32 %619, 1
  br label %670

670:                                              ; preds = %656, %636, %628, %617, %666, %660
  %671 = phi i32 [ %669, %666 ], [ %619, %660 ], [ %619, %617 ], [ %619, %628 ], [ %619, %636 ], [ %619, %656 ]
  %672 = icmp eq i32 %671, 0
  br i1 %672, label %673, label %680

673:                                              ; preds = %670
  %674 = tail call fastcc zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessIN2v88internal12_GLOBAL__N_126SharedFunctionInfoAndCountES5_EEPS5_EEbT0_S9_T_(%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %620)
  %675 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %620, i64 1
  %676 = tail call fastcc zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessIN2v88internal12_GLOBAL__N_126SharedFunctionInfoAndCountES5_EEPS5_EEbT0_S9_T_(%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %675, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %6)
  br i1 %676, label %677, label %679

677:                                              ; preds = %673
  br i1 %674, label %693, label %678

678:                                              ; preds = %677, %691
  br label %5

679:                                              ; preds = %673
  br i1 %674, label %689, label %680

680:                                              ; preds = %679, %670
  %681 = ptrtoint %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %620 to i64
  %682 = sub i64 %681, %510
  %683 = sdiv exact i64 %682, 24
  %684 = sub i64 %16, %681
  %685 = sdiv exact i64 %684, 24
  %686 = icmp slt i64 %683, %685
  br i1 %686, label %687, label %691

687:                                              ; preds = %680
  tail call fastcc void @_ZNSt3__16__sortIRNS_6__lessIN2v88internal12_GLOBAL__N_126SharedFunctionInfoAndCountES5_EEPS5_EEvT0_S9_T_(%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %20, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %620)
  %688 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %620, i64 1
  br label %689

689:                                              ; preds = %687, %679
  %690 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %675, %679 ], [ %688, %687 ]
  br label %17

691:                                              ; preds = %680
  %692 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %620, i64 1
  tail call fastcc void @_ZNSt3__16__sortIRNS_6__lessIN2v88internal12_GLOBAL__N_126SharedFunctionInfoAndCountES5_EEPS5_EEvT0_S9_T_(%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %692, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %6)
  br label %678

693:                                              ; preds = %677, %357, %19, %19, %305, %354, %201, %59, %89, %39, %31, %63, %69, %72, %76, %81
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZNSt3__17__sort3IRNS_6__lessIN2v88internal12_GLOBAL__N_126SharedFunctionInfoAndCountES5_EEPS5_EEjT0_S9_S9_T_(%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* nocapture, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* nocapture, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* nocapture) unnamed_addr #0 {
  %4 = alloca [24 x i8], align 8
  %5 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 2
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %6, %8
  br i1 %9, label %12, label %10

10:                                               ; preds = %3
  %11 = icmp slt i32 %6, %8
  br label %48

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 3
  %14 = load i32, i32* %13, align 8
  %15 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 0, i32 3
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %14, %16
  br i1 %17, label %20, label %18

18:                                               ; preds = %12
  %19 = icmp sgt i32 %14, %16
  br label %48

20:                                               ; preds = %12
  %21 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 0, i32 0, i32 0
  %22 = load i64*, i64** %21, align 8
  %23 = load i64, i64* %22, align 8
  %24 = add i64 %23, 27
  %25 = inttoptr i64 %24 to i32*
  %26 = load atomic i32, i32* %25 monotonic, align 4
  %27 = and i32 %26, 134217728
  %28 = icmp ne i32 %27, 0
  %29 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 0, i32 0, i32 0, i32 0
  %30 = load i64*, i64** %29, align 8
  %31 = load i64, i64* %30, align 8
  %32 = add i64 %31, 27
  %33 = inttoptr i64 %32 to i32*
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = and i32 %34, 134217728
  %36 = icmp ne i32 %35, 0
  %37 = xor i1 %28, %36
  br i1 %37, label %38, label %42

38:                                               ; preds = %20
  %39 = load atomic i32, i32* %25 monotonic, align 4
  %40 = and i32 %39, 134217728
  %41 = icmp ne i32 %40, 0
  br label %48

42:                                               ; preds = %20
  %43 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 1
  %44 = load i32, i32* %43, align 8
  %45 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 0, i32 1
  %46 = load i32, i32* %45, align 8
  %47 = icmp ugt i32 %44, %46
  br label %48

48:                                               ; preds = %10, %18, %38, %42
  %49 = phi i1 [ %11, %10 ], [ %19, %18 ], [ %41, %38 ], [ %47, %42 ]
  %50 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2, i64 0, i32 2
  %51 = load i32, i32* %50, align 4
  %52 = icmp eq i32 %51, %6
  br i1 %52, label %55, label %53

53:                                               ; preds = %48
  %54 = icmp slt i32 %51, %6
  br label %91

55:                                               ; preds = %48
  %56 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2, i64 0, i32 3
  %57 = load i32, i32* %56, align 8
  %58 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 3
  %59 = load i32, i32* %58, align 8
  %60 = icmp eq i32 %57, %59
  br i1 %60, label %63, label %61

61:                                               ; preds = %55
  %62 = icmp sgt i32 %57, %59
  br label %91

63:                                               ; preds = %55
  %64 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2, i64 0, i32 0, i32 0, i32 0
  %65 = load i64*, i64** %64, align 8
  %66 = load i64, i64* %65, align 8
  %67 = add i64 %66, 27
  %68 = inttoptr i64 %67 to i32*
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 134217728
  %71 = icmp ne i32 %70, 0
  %72 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 0, i32 0, i32 0
  %73 = load i64*, i64** %72, align 8
  %74 = load i64, i64* %73, align 8
  %75 = add i64 %74, 27
  %76 = inttoptr i64 %75 to i32*
  %77 = load atomic i32, i32* %76 monotonic, align 4
  %78 = and i32 %77, 134217728
  %79 = icmp ne i32 %78, 0
  %80 = xor i1 %71, %79
  br i1 %80, label %81, label %85

81:                                               ; preds = %63
  %82 = load atomic i32, i32* %68 monotonic, align 4
  %83 = and i32 %82, 134217728
  %84 = icmp ne i32 %83, 0
  br label %91

85:                                               ; preds = %63
  %86 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2, i64 0, i32 1
  %87 = load i32, i32* %86, align 8
  %88 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 1
  %89 = load i32, i32* %88, align 8
  %90 = icmp ugt i32 %87, %89
  br label %91

91:                                               ; preds = %53, %61, %81, %85
  %92 = phi i1 [ %54, %53 ], [ %62, %61 ], [ %84, %81 ], [ %90, %85 ]
  br i1 %49, label %141, label %93

93:                                               ; preds = %91
  br i1 %92, label %94, label %191

94:                                               ; preds = %93
  %95 = getelementptr inbounds [24 x i8], [24 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %95)
  %96 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %95, i8* align 8 %96, i64 24, i1 false) #12
  %97 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %96, i8* align 8 %97, i64 20, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %97, i8* nonnull align 8 %95, i64 20, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %95)
  %98 = load i32, i32* %5, align 4
  %99 = load i32, i32* %7, align 4
  %100 = icmp eq i32 %98, %99
  br i1 %100, label %103, label %101

101:                                              ; preds = %94
  %102 = icmp slt i32 %98, %99
  br i1 %102, label %139, label %191

103:                                              ; preds = %94
  %104 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 3
  %105 = load i32, i32* %104, align 8
  %106 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 0, i32 3
  %107 = load i32, i32* %106, align 8
  %108 = icmp eq i32 %105, %107
  br i1 %108, label %111, label %109

109:                                              ; preds = %103
  %110 = icmp sgt i32 %105, %107
  br i1 %110, label %139, label %191

111:                                              ; preds = %103
  %112 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 0, i32 0, i32 0
  %113 = load i64*, i64** %112, align 8
  %114 = load i64, i64* %113, align 8
  %115 = add i64 %114, 27
  %116 = inttoptr i64 %115 to i32*
  %117 = load atomic i32, i32* %116 monotonic, align 4
  %118 = and i32 %117, 134217728
  %119 = icmp ne i32 %118, 0
  %120 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 0, i32 0, i32 0, i32 0
  %121 = load i64*, i64** %120, align 8
  %122 = load i64, i64* %121, align 8
  %123 = add i64 %122, 27
  %124 = inttoptr i64 %123 to i32*
  %125 = load atomic i32, i32* %124 monotonic, align 4
  %126 = and i32 %125, 134217728
  %127 = icmp ne i32 %126, 0
  %128 = xor i1 %119, %127
  br i1 %128, label %129, label %133

129:                                              ; preds = %111
  %130 = load atomic i32, i32* %116 monotonic, align 4
  %131 = and i32 %130, 134217728
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %191, label %139

133:                                              ; preds = %111
  %134 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 1
  %135 = load i32, i32* %134, align 8
  %136 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 0, i32 1
  %137 = load i32, i32* %136, align 8
  %138 = icmp ugt i32 %135, %137
  br i1 %138, label %139, label %191

139:                                              ; preds = %129, %109, %101, %133
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %95)
  %140 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %95, i8* align 8 %140, i64 24, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %140, i8* align 8 %96, i64 20, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %96, i8* nonnull align 8 %95, i64 20, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %95)
  br label %191

141:                                              ; preds = %91
  %142 = getelementptr inbounds [24 x i8], [24 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %142)
  %143 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %142, i8* align 8 %143, i64 24, i1 false) #12
  br i1 %92, label %144, label %146

144:                                              ; preds = %141
  %145 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %143, i8* align 8 %145, i64 20, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %145, i8* nonnull align 8 %142, i64 20, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %142)
  br label %191

146:                                              ; preds = %141
  %147 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %143, i8* align 8 %147, i64 20, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %147, i8* nonnull align 8 %142, i64 20, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %142)
  %148 = load i32, i32* %50, align 4
  %149 = load i32, i32* %5, align 4
  %150 = icmp eq i32 %148, %149
  br i1 %150, label %153, label %151

151:                                              ; preds = %146
  %152 = icmp slt i32 %148, %149
  br i1 %152, label %189, label %191

153:                                              ; preds = %146
  %154 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2, i64 0, i32 3
  %155 = load i32, i32* %154, align 8
  %156 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 3
  %157 = load i32, i32* %156, align 8
  %158 = icmp eq i32 %155, %157
  br i1 %158, label %161, label %159

159:                                              ; preds = %153
  %160 = icmp sgt i32 %155, %157
  br i1 %160, label %189, label %191

161:                                              ; preds = %153
  %162 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2, i64 0, i32 0, i32 0, i32 0
  %163 = load i64*, i64** %162, align 8
  %164 = load i64, i64* %163, align 8
  %165 = add i64 %164, 27
  %166 = inttoptr i64 %165 to i32*
  %167 = load atomic i32, i32* %166 monotonic, align 4
  %168 = and i32 %167, 134217728
  %169 = icmp ne i32 %168, 0
  %170 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 0, i32 0, i32 0
  %171 = load i64*, i64** %170, align 8
  %172 = load i64, i64* %171, align 8
  %173 = add i64 %172, 27
  %174 = inttoptr i64 %173 to i32*
  %175 = load atomic i32, i32* %174 monotonic, align 4
  %176 = and i32 %175, 134217728
  %177 = icmp ne i32 %176, 0
  %178 = xor i1 %169, %177
  br i1 %178, label %179, label %183

179:                                              ; preds = %161
  %180 = load atomic i32, i32* %166 monotonic, align 4
  %181 = and i32 %180, 134217728
  %182 = icmp eq i32 %181, 0
  br i1 %182, label %191, label %189

183:                                              ; preds = %161
  %184 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2, i64 0, i32 1
  %185 = load i32, i32* %184, align 8
  %186 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 1
  %187 = load i32, i32* %186, align 8
  %188 = icmp ugt i32 %185, %187
  br i1 %188, label %189, label %191

189:                                              ; preds = %179, %159, %151, %183
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %142)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %142, i8* align 8 %147, i64 24, i1 false) #12
  %190 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %147, i8* align 8 %190, i64 20, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %190, i8* nonnull align 8 %142, i64 20, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %142)
  br label %191

191:                                              ; preds = %179, %129, %159, %151, %109, %101, %183, %189, %133, %139, %93, %144
  %192 = phi i32 [ 1, %144 ], [ 0, %93 ], [ 2, %139 ], [ 1, %133 ], [ 2, %189 ], [ 1, %183 ], [ 1, %101 ], [ 1, %109 ], [ 1, %129 ], [ 1, %151 ], [ 1, %159 ], [ 1, %179 ]
  ret i32 %192
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZNSt3__17__sort4IRNS_6__lessIN2v88internal12_GLOBAL__N_126SharedFunctionInfoAndCountES5_EEPS5_EEjT0_S9_S9_S9_T_(%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* nocapture, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* nocapture, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* nocapture, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* nocapture) unnamed_addr #0 {
  %5 = alloca [24 x i8], align 8
  %6 = tail call fastcc i32 @_ZNSt3__17__sort3IRNS_6__lessIN2v88internal12_GLOBAL__N_126SharedFunctionInfoAndCountES5_EEPS5_EEjT0_S9_S9_T_(%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2)
  %7 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %3, i64 0, i32 2
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2, i64 0, i32 2
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %8, %10
  br i1 %11, label %14, label %12

12:                                               ; preds = %4
  %13 = icmp slt i32 %8, %10
  br i1 %13, label %50, label %145

14:                                               ; preds = %4
  %15 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %3, i64 0, i32 3
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2, i64 0, i32 3
  %18 = load i32, i32* %17, align 8
  %19 = icmp eq i32 %16, %18
  br i1 %19, label %22, label %20

20:                                               ; preds = %14
  %21 = icmp sgt i32 %16, %18
  br i1 %21, label %50, label %145

22:                                               ; preds = %14
  %23 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %3, i64 0, i32 0, i32 0, i32 0
  %24 = load i64*, i64** %23, align 8
  %25 = load i64, i64* %24, align 8
  %26 = add i64 %25, 27
  %27 = inttoptr i64 %26 to i32*
  %28 = load atomic i32, i32* %27 monotonic, align 4
  %29 = and i32 %28, 134217728
  %30 = icmp ne i32 %29, 0
  %31 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2, i64 0, i32 0, i32 0, i32 0
  %32 = load i64*, i64** %31, align 8
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %33, 27
  %35 = inttoptr i64 %34 to i32*
  %36 = load atomic i32, i32* %35 monotonic, align 4
  %37 = and i32 %36, 134217728
  %38 = icmp ne i32 %37, 0
  %39 = xor i1 %30, %38
  br i1 %39, label %40, label %44

40:                                               ; preds = %22
  %41 = load atomic i32, i32* %27 monotonic, align 4
  %42 = and i32 %41, 134217728
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %145, label %50

44:                                               ; preds = %22
  %45 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %3, i64 0, i32 1
  %46 = load i32, i32* %45, align 8
  %47 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2, i64 0, i32 1
  %48 = load i32, i32* %47, align 8
  %49 = icmp ugt i32 %46, %48
  br i1 %49, label %50, label %145

50:                                               ; preds = %40, %20, %12, %44
  %51 = getelementptr inbounds [24 x i8], [24 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %51)
  %52 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* align 8 %52, i64 24, i1 false) #12
  %53 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* align 8 %53, i64 20, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* nonnull align 8 %51, i64 20, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %51)
  %54 = add i32 %6, 1
  %55 = load i32, i32* %9, align 4
  %56 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 2
  %57 = load i32, i32* %56, align 4
  %58 = icmp eq i32 %55, %57
  br i1 %58, label %61, label %59

59:                                               ; preds = %50
  %60 = icmp slt i32 %55, %57
  br i1 %60, label %97, label %145

61:                                               ; preds = %50
  %62 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2, i64 0, i32 3
  %63 = load i32, i32* %62, align 8
  %64 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 3
  %65 = load i32, i32* %64, align 8
  %66 = icmp eq i32 %63, %65
  br i1 %66, label %69, label %67

67:                                               ; preds = %61
  %68 = icmp sgt i32 %63, %65
  br i1 %68, label %97, label %145

69:                                               ; preds = %61
  %70 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2, i64 0, i32 0, i32 0, i32 0
  %71 = load i64*, i64** %70, align 8
  %72 = load i64, i64* %71, align 8
  %73 = add i64 %72, 27
  %74 = inttoptr i64 %73 to i32*
  %75 = load atomic i32, i32* %74 monotonic, align 4
  %76 = and i32 %75, 134217728
  %77 = icmp ne i32 %76, 0
  %78 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 0, i32 0, i32 0
  %79 = load i64*, i64** %78, align 8
  %80 = load i64, i64* %79, align 8
  %81 = add i64 %80, 27
  %82 = inttoptr i64 %81 to i32*
  %83 = load atomic i32, i32* %82 monotonic, align 4
  %84 = and i32 %83, 134217728
  %85 = icmp ne i32 %84, 0
  %86 = xor i1 %77, %85
  br i1 %86, label %87, label %91

87:                                               ; preds = %69
  %88 = load atomic i32, i32* %74 monotonic, align 4
  %89 = and i32 %88, 134217728
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %145, label %97

91:                                               ; preds = %69
  %92 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2, i64 0, i32 1
  %93 = load i32, i32* %92, align 8
  %94 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 1
  %95 = load i32, i32* %94, align 8
  %96 = icmp ugt i32 %93, %95
  br i1 %96, label %97, label %145

97:                                               ; preds = %87, %67, %59, %91
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %51)
  %98 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* align 8 %98, i64 24, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 %52, i64 20, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %52, i8* nonnull align 8 %51, i64 20, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %51)
  %99 = add i32 %6, 2
  %100 = load i32, i32* %56, align 4
  %101 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 0, i32 2
  %102 = load i32, i32* %101, align 4
  %103 = icmp eq i32 %100, %102
  br i1 %103, label %106, label %104

104:                                              ; preds = %97
  %105 = icmp slt i32 %100, %102
  br i1 %105, label %142, label %145

106:                                              ; preds = %97
  %107 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 3
  %108 = load i32, i32* %107, align 8
  %109 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 0, i32 3
  %110 = load i32, i32* %109, align 8
  %111 = icmp eq i32 %108, %110
  br i1 %111, label %114, label %112

112:                                              ; preds = %106
  %113 = icmp sgt i32 %108, %110
  br i1 %113, label %142, label %145

114:                                              ; preds = %106
  %115 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 0, i32 0, i32 0
  %116 = load i64*, i64** %115, align 8
  %117 = load i64, i64* %116, align 8
  %118 = add i64 %117, 27
  %119 = inttoptr i64 %118 to i32*
  %120 = load atomic i32, i32* %119 monotonic, align 4
  %121 = and i32 %120, 134217728
  %122 = icmp ne i32 %121, 0
  %123 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 0, i32 0, i32 0, i32 0
  %124 = load i64*, i64** %123, align 8
  %125 = load i64, i64* %124, align 8
  %126 = add i64 %125, 27
  %127 = inttoptr i64 %126 to i32*
  %128 = load atomic i32, i32* %127 monotonic, align 4
  %129 = and i32 %128, 134217728
  %130 = icmp ne i32 %129, 0
  %131 = xor i1 %122, %130
  br i1 %131, label %132, label %136

132:                                              ; preds = %114
  %133 = load atomic i32, i32* %119 monotonic, align 4
  %134 = and i32 %133, 134217728
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %145, label %142

136:                                              ; preds = %114
  %137 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 1
  %138 = load i32, i32* %137, align 8
  %139 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 0, i32 1
  %140 = load i32, i32* %139, align 8
  %141 = icmp ugt i32 %138, %140
  br i1 %141, label %142, label %145

142:                                              ; preds = %132, %112, %104, %136
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %51)
  %143 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %51, i8* align 8 %143, i64 24, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %143, i8* align 8 %98, i64 20, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* nonnull align 8 %51, i64 20, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %51)
  %144 = add i32 %6, 3
  br label %145

145:                                              ; preds = %40, %87, %132, %112, %104, %67, %59, %20, %12, %91, %142, %136, %44
  %146 = phi i32 [ %144, %142 ], [ %99, %136 ], [ %54, %91 ], [ %6, %44 ], [ %6, %12 ], [ %6, %20 ], [ %6, %40 ], [ %54, %59 ], [ %54, %67 ], [ %54, %87 ], [ %99, %104 ], [ %99, %112 ], [ %99, %132 ]
  ret i32 %146
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @_ZNSt3__17__sort5IRNS_6__lessIN2v88internal12_GLOBAL__N_126SharedFunctionInfoAndCountES5_EEPS5_EEjT0_S9_S9_S9_S9_T_(%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* nocapture, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* nocapture, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* nocapture, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* nocapture, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* nocapture) unnamed_addr #0 {
  %6 = alloca [24 x i8], align 8
  %7 = tail call fastcc i32 @_ZNSt3__17__sort4IRNS_6__lessIN2v88internal12_GLOBAL__N_126SharedFunctionInfoAndCountES5_EEPS5_EEjT0_S9_S9_S9_T_(%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %3)
  %8 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %4, i64 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %3, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %9, %11
  br i1 %12, label %15, label %13

13:                                               ; preds = %5
  %14 = icmp slt i32 %9, %11
  br i1 %14, label %51, label %191

15:                                               ; preds = %5
  %16 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %4, i64 0, i32 3
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %3, i64 0, i32 3
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %17, %19
  br i1 %20, label %23, label %21

21:                                               ; preds = %15
  %22 = icmp sgt i32 %17, %19
  br i1 %22, label %51, label %191

23:                                               ; preds = %15
  %24 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %4, i64 0, i32 0, i32 0, i32 0
  %25 = load i64*, i64** %24, align 8
  %26 = load i64, i64* %25, align 8
  %27 = add i64 %26, 27
  %28 = inttoptr i64 %27 to i32*
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = and i32 %29, 134217728
  %31 = icmp ne i32 %30, 0
  %32 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %3, i64 0, i32 0, i32 0, i32 0
  %33 = load i64*, i64** %32, align 8
  %34 = load i64, i64* %33, align 8
  %35 = add i64 %34, 27
  %36 = inttoptr i64 %35 to i32*
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = and i32 %37, 134217728
  %39 = icmp ne i32 %38, 0
  %40 = xor i1 %31, %39
  br i1 %40, label %41, label %45

41:                                               ; preds = %23
  %42 = load atomic i32, i32* %28 monotonic, align 4
  %43 = and i32 %42, 134217728
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %191, label %51

45:                                               ; preds = %23
  %46 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %4, i64 0, i32 1
  %47 = load i32, i32* %46, align 8
  %48 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %3, i64 0, i32 1
  %49 = load i32, i32* %48, align 8
  %50 = icmp ugt i32 %47, %49
  br i1 %50, label %51, label %191

51:                                               ; preds = %41, %21, %13, %45
  %52 = getelementptr inbounds [24 x i8], [24 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %52)
  %53 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %52, i8* align 8 %53, i64 24, i1 false) #12
  %54 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* align 8 %54, i64 20, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %54, i8* nonnull align 8 %52, i64 20, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %52)
  %55 = add i32 %7, 1
  %56 = load i32, i32* %10, align 4
  %57 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2, i64 0, i32 2
  %58 = load i32, i32* %57, align 4
  %59 = icmp eq i32 %56, %58
  br i1 %59, label %62, label %60

60:                                               ; preds = %51
  %61 = icmp slt i32 %56, %58
  br i1 %61, label %98, label %191

62:                                               ; preds = %51
  %63 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %3, i64 0, i32 3
  %64 = load i32, i32* %63, align 8
  %65 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2, i64 0, i32 3
  %66 = load i32, i32* %65, align 8
  %67 = icmp eq i32 %64, %66
  br i1 %67, label %70, label %68

68:                                               ; preds = %62
  %69 = icmp sgt i32 %64, %66
  br i1 %69, label %98, label %191

70:                                               ; preds = %62
  %71 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %3, i64 0, i32 0, i32 0, i32 0
  %72 = load i64*, i64** %71, align 8
  %73 = load i64, i64* %72, align 8
  %74 = add i64 %73, 27
  %75 = inttoptr i64 %74 to i32*
  %76 = load atomic i32, i32* %75 monotonic, align 4
  %77 = and i32 %76, 134217728
  %78 = icmp ne i32 %77, 0
  %79 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2, i64 0, i32 0, i32 0, i32 0
  %80 = load i64*, i64** %79, align 8
  %81 = load i64, i64* %80, align 8
  %82 = add i64 %81, 27
  %83 = inttoptr i64 %82 to i32*
  %84 = load atomic i32, i32* %83 monotonic, align 4
  %85 = and i32 %84, 134217728
  %86 = icmp ne i32 %85, 0
  %87 = xor i1 %78, %86
  br i1 %87, label %88, label %92

88:                                               ; preds = %70
  %89 = load atomic i32, i32* %75 monotonic, align 4
  %90 = and i32 %89, 134217728
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %191, label %98

92:                                               ; preds = %70
  %93 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %3, i64 0, i32 1
  %94 = load i32, i32* %93, align 8
  %95 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2, i64 0, i32 1
  %96 = load i32, i32* %95, align 8
  %97 = icmp ugt i32 %94, %96
  br i1 %97, label %98, label %191

98:                                               ; preds = %88, %68, %60, %92
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %52)
  %99 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %52, i8* align 8 %99, i64 24, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* align 8 %53, i64 20, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* nonnull align 8 %52, i64 20, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %52)
  %100 = add i32 %7, 2
  %101 = load i32, i32* %57, align 4
  %102 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 2
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %101, %103
  br i1 %104, label %107, label %105

105:                                              ; preds = %98
  %106 = icmp slt i32 %101, %103
  br i1 %106, label %143, label %191

107:                                              ; preds = %98
  %108 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2, i64 0, i32 3
  %109 = load i32, i32* %108, align 8
  %110 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 3
  %111 = load i32, i32* %110, align 8
  %112 = icmp eq i32 %109, %111
  br i1 %112, label %115, label %113

113:                                              ; preds = %107
  %114 = icmp sgt i32 %109, %111
  br i1 %114, label %143, label %191

115:                                              ; preds = %107
  %116 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2, i64 0, i32 0, i32 0, i32 0
  %117 = load i64*, i64** %116, align 8
  %118 = load i64, i64* %117, align 8
  %119 = add i64 %118, 27
  %120 = inttoptr i64 %119 to i32*
  %121 = load atomic i32, i32* %120 monotonic, align 4
  %122 = and i32 %121, 134217728
  %123 = icmp ne i32 %122, 0
  %124 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 0, i32 0, i32 0
  %125 = load i64*, i64** %124, align 8
  %126 = load i64, i64* %125, align 8
  %127 = add i64 %126, 27
  %128 = inttoptr i64 %127 to i32*
  %129 = load atomic i32, i32* %128 monotonic, align 4
  %130 = and i32 %129, 134217728
  %131 = icmp ne i32 %130, 0
  %132 = xor i1 %123, %131
  br i1 %132, label %133, label %137

133:                                              ; preds = %115
  %134 = load atomic i32, i32* %120 monotonic, align 4
  %135 = and i32 %134, 134217728
  %136 = icmp eq i32 %135, 0
  br i1 %136, label %191, label %143

137:                                              ; preds = %115
  %138 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %2, i64 0, i32 1
  %139 = load i32, i32* %138, align 8
  %140 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 1
  %141 = load i32, i32* %140, align 8
  %142 = icmp ugt i32 %139, %141
  br i1 %142, label %143, label %191

143:                                              ; preds = %133, %113, %105, %137
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %52)
  %144 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %52, i8* align 8 %144, i64 24, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %144, i8* align 8 %99, i64 20, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* nonnull align 8 %52, i64 20, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %52)
  %145 = add i32 %7, 3
  %146 = load i32, i32* %102, align 4
  %147 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 0, i32 2
  %148 = load i32, i32* %147, align 4
  %149 = icmp eq i32 %146, %148
  br i1 %149, label %152, label %150

150:                                              ; preds = %143
  %151 = icmp slt i32 %146, %148
  br i1 %151, label %188, label %191

152:                                              ; preds = %143
  %153 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 3
  %154 = load i32, i32* %153, align 8
  %155 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 0, i32 3
  %156 = load i32, i32* %155, align 8
  %157 = icmp eq i32 %154, %156
  br i1 %157, label %160, label %158

158:                                              ; preds = %152
  %159 = icmp sgt i32 %154, %156
  br i1 %159, label %188, label %191

160:                                              ; preds = %152
  %161 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 0, i32 0, i32 0
  %162 = load i64*, i64** %161, align 8
  %163 = load i64, i64* %162, align 8
  %164 = add i64 %163, 27
  %165 = inttoptr i64 %164 to i32*
  %166 = load atomic i32, i32* %165 monotonic, align 4
  %167 = and i32 %166, 134217728
  %168 = icmp ne i32 %167, 0
  %169 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 0, i32 0, i32 0, i32 0
  %170 = load i64*, i64** %169, align 8
  %171 = load i64, i64* %170, align 8
  %172 = add i64 %171, 27
  %173 = inttoptr i64 %172 to i32*
  %174 = load atomic i32, i32* %173 monotonic, align 4
  %175 = and i32 %174, 134217728
  %176 = icmp ne i32 %175, 0
  %177 = xor i1 %168, %176
  br i1 %177, label %178, label %182

178:                                              ; preds = %160
  %179 = load atomic i32, i32* %165 monotonic, align 4
  %180 = and i32 %179, 134217728
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %191, label %188

182:                                              ; preds = %160
  %183 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 0, i32 1
  %184 = load i32, i32* %183, align 8
  %185 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 0, i32 1
  %186 = load i32, i32* %185, align 8
  %187 = icmp ugt i32 %184, %186
  br i1 %187, label %188, label %191

188:                                              ; preds = %178, %158, %150, %182
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %52)
  %189 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %52, i8* align 8 %189, i64 24, i1 false) #12
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %189, i8* align 8 %144, i64 20, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %144, i8* nonnull align 8 %52, i64 20, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %52)
  %190 = add i32 %7, 4
  br label %191

191:                                              ; preds = %41, %88, %133, %178, %158, %150, %113, %105, %68, %60, %21, %13, %92, %182, %188, %137, %45
  %192 = phi i32 [ %190, %188 ], [ %145, %182 ], [ %100, %137 ], [ %55, %92 ], [ %7, %45 ], [ %7, %13 ], [ %7, %21 ], [ %7, %41 ], [ %55, %60 ], [ %55, %68 ], [ %55, %88 ], [ %100, %105 ], [ %100, %113 ], [ %100, %133 ], [ %145, %150 ], [ %145, %158 ], [ %145, %178 ]
  ret i32 %192
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc zeroext i1 @_ZNSt3__127__insertion_sort_incompleteIRNS_6__lessIN2v88internal12_GLOBAL__N_126SharedFunctionInfoAndCountES5_EEPS5_EEbT0_S9_T_(%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"*, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"*) unnamed_addr #0 {
  %3 = alloca [24 x i8], align 8
  %4 = ptrtoint %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1 to i64
  %5 = ptrtoint %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0 to i64
  %6 = sub i64 %4, %5
  %7 = sdiv exact i64 %6, 24
  switch i64 %7, label %72 [
    i64 0, label %194
    i64 1, label %194
    i64 2, label %8
    i64 3, label %57
    i64 4, label %61
    i64 5, label %66
  ]

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 -1
  %10 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 -1, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %17, label %15

15:                                               ; preds = %8
  %16 = icmp slt i32 %11, %13
  br i1 %16, label %53, label %194

17:                                               ; preds = %8
  %18 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 -1, i32 3
  %19 = load i32, i32* %18, align 8
  %20 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 0, i32 3
  %21 = load i32, i32* %20, align 8
  %22 = icmp eq i32 %19, %21
  br i1 %22, label %25, label %23

23:                                               ; preds = %17
  %24 = icmp sgt i32 %19, %21
  br i1 %24, label %53, label %194

25:                                               ; preds = %17
  %26 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %9, i64 0, i32 0, i32 0, i32 0
  %27 = load i64*, i64** %26, align 8
  %28 = load i64, i64* %27, align 8
  %29 = add i64 %28, 27
  %30 = inttoptr i64 %29 to i32*
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = and i32 %31, 134217728
  %33 = icmp ne i32 %32, 0
  %34 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 0, i32 0, i32 0, i32 0
  %35 = load i64*, i64** %34, align 8
  %36 = load i64, i64* %35, align 8
  %37 = add i64 %36, 27
  %38 = inttoptr i64 %37 to i32*
  %39 = load atomic i32, i32* %38 monotonic, align 4
  %40 = and i32 %39, 134217728
  %41 = icmp ne i32 %40, 0
  %42 = xor i1 %33, %41
  br i1 %42, label %43, label %47

43:                                               ; preds = %25
  %44 = load atomic i32, i32* %30 monotonic, align 4
  %45 = and i32 %44, 134217728
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %194, label %53

47:                                               ; preds = %25
  %48 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 -1, i32 1
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 0, i32 1
  %51 = load i32, i32* %50, align 8
  %52 = icmp ugt i32 %49, %51
  br i1 %52, label %53, label %194

53:                                               ; preds = %43, %23, %15, %47
  %54 = getelementptr inbounds [24 x i8], [24 x i8]* %3, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %54)
  %55 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %54, i8* align 8 %55, i64 24, i1 false) #12
  %56 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %9 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %55, i8* align 8 %56, i64 20, i1 false) #12
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %56, i8* nonnull align 8 %54, i64 20, i1 false) #12
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %54)
  br label %194

57:                                               ; preds = %2
  %58 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 1
  %59 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 -1
  %60 = tail call fastcc i32 @_ZNSt3__17__sort3IRNS_6__lessIN2v88internal12_GLOBAL__N_126SharedFunctionInfoAndCountES5_EEPS5_EEjT0_S9_S9_T_(%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %58, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %59)
  br label %194

61:                                               ; preds = %2
  %62 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 1
  %63 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 2
  %64 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 -1
  %65 = tail call fastcc i32 @_ZNSt3__17__sort4IRNS_6__lessIN2v88internal12_GLOBAL__N_126SharedFunctionInfoAndCountES5_EEPS5_EEjT0_S9_S9_S9_T_(%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %62, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %63, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %64)
  br label %194

66:                                               ; preds = %2
  %67 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 1
  %68 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 2
  %69 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 3
  %70 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %1, i64 -1
  %71 = tail call fastcc i32 @_ZNSt3__17__sort5IRNS_6__lessIN2v88internal12_GLOBAL__N_126SharedFunctionInfoAndCountES5_EEPS5_EEjT0_S9_S9_S9_S9_T_(%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %67, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %68, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %69, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %70)
  br label %194

72:                                               ; preds = %2
  %73 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 2
  %74 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 1
  %75 = tail call fastcc i32 @_ZNSt3__17__sort3IRNS_6__lessIN2v88internal12_GLOBAL__N_126SharedFunctionInfoAndCountES5_EEPS5_EEjT0_S9_S9_T_(%"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %74, %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %73)
  %76 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %0, i64 3
  %77 = icmp eq %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %76, %1
  br i1 %77, label %194, label %78

78:                                               ; preds = %72, %187
  %79 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %189, %187 ], [ %76, %72 ]
  %80 = phi i32 [ %188, %187 ], [ 0, %72 ]
  %81 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %79, %187 ], [ %73, %72 ]
  %82 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %79, i64 0, i32 2
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %81, i64 0, i32 2
  %85 = load i32, i32* %84, align 4
  %86 = icmp eq i32 %83, %85
  br i1 %86, label %92, label %87

87:                                               ; preds = %78
  %88 = icmp slt i32 %83, %85
  br i1 %88, label %89, label %187

89:                                               ; preds = %87
  %90 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %79, i64 0, i32 3
  %91 = load i32, i32* %90, align 8
  br label %128

92:                                               ; preds = %78
  %93 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %79, i64 0, i32 3
  %94 = load i32, i32* %93, align 8
  %95 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %81, i64 0, i32 3
  %96 = load i32, i32* %95, align 8
  %97 = icmp eq i32 %94, %96
  br i1 %97, label %100, label %98

98:                                               ; preds = %92
  %99 = icmp sgt i32 %94, %96
  br i1 %99, label %128, label %187

100:                                              ; preds = %92
  %101 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %79, i64 0, i32 0, i32 0, i32 0
  %102 = load i64*, i64** %101, align 8
  %103 = load i64, i64* %102, align 8
  %104 = add i64 %103, 27
  %105 = inttoptr i64 %104 to i32*
  %106 = load atomic i32, i32* %105 monotonic, align 4
  %107 = and i32 %106, 134217728
  %108 = icmp ne i32 %107, 0
  %109 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %81, i64 0, i32 0, i32 0, i32 0
  %110 = load i64*, i64** %109, align 8
  %111 = load i64, i64* %110, align 8
  %112 = add i64 %111, 27
  %113 = inttoptr i64 %112 to i32*
  %114 = load atomic i32, i32* %113 monotonic, align 4
  %115 = and i32 %114, 134217728
  %116 = icmp ne i32 %115, 0
  %117 = xor i1 %108, %116
  br i1 %117, label %118, label %122

118:                                              ; preds = %100
  %119 = load atomic i32, i32* %105 monotonic, align 4
  %120 = and i32 %119, 134217728
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %187, label %128

122:                                              ; preds = %100
  %123 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %79, i64 0, i32 1
  %124 = load i32, i32* %123, align 8
  %125 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %81, i64 0, i32 1
  %126 = load i32, i32* %125, align 8
  %127 = icmp ugt i32 %124, %126
  br i1 %127, label %128, label %187

128:                                              ; preds = %89, %118, %98, %122
  %129 = phi i32 [ %91, %89 ], [ %94, %118 ], [ %94, %98 ], [ %94, %122 ]
  %130 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %79, i64 0, i32 0, i32 0, i32 0
  %131 = load i64*, i64** %130, align 8
  %132 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %79, i64 0, i32 1
  %133 = load i32, i32* %132, align 8
  %134 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %79 to i8*
  %135 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %81 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %134, i8* align 8 %135, i64 20, i1 false)
  %136 = icmp eq %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %81, %0
  br i1 %136, label %179, label %137

137:                                              ; preds = %128, %175
  %138 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %139, %175 ], [ %81, %128 ]
  %139 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %138, i64 -1
  %140 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %138, i64 -1, i32 2
  %141 = load i32, i32* %140, align 4
  %142 = icmp eq i32 %83, %141
  br i1 %142, label %145, label %143

143:                                              ; preds = %137
  %144 = icmp slt i32 %83, %141
  br i1 %144, label %175, label %179

145:                                              ; preds = %137
  %146 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %138, i64 -1, i32 3
  %147 = load i32, i32* %146, align 8
  %148 = icmp eq i32 %129, %147
  br i1 %148, label %151, label %149

149:                                              ; preds = %145
  %150 = icmp sgt i32 %129, %147
  br i1 %150, label %175, label %179

151:                                              ; preds = %145
  %152 = load i64, i64* %131, align 8
  %153 = add i64 %152, 27
  %154 = inttoptr i64 %153 to i32*
  %155 = load atomic i32, i32* %154 monotonic, align 4
  %156 = and i32 %155, 134217728
  %157 = icmp ne i32 %156, 0
  %158 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %139, i64 0, i32 0, i32 0, i32 0
  %159 = load i64*, i64** %158, align 8
  %160 = load i64, i64* %159, align 8
  %161 = add i64 %160, 27
  %162 = inttoptr i64 %161 to i32*
  %163 = load atomic i32, i32* %162 monotonic, align 4
  %164 = and i32 %163, 134217728
  %165 = icmp ne i32 %164, 0
  %166 = xor i1 %157, %165
  br i1 %166, label %167, label %171

167:                                              ; preds = %151
  %168 = load atomic i32, i32* %154 monotonic, align 4
  %169 = and i32 %168, 134217728
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %179, label %175

171:                                              ; preds = %151
  %172 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %138, i64 -1, i32 1
  %173 = load i32, i32* %172, align 8
  %174 = icmp ugt i32 %133, %173
  br i1 %174, label %175, label %179

175:                                              ; preds = %171, %143, %149, %167
  %176 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %138 to i8*
  %177 = bitcast %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %139 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %176, i8* align 8 %177, i64 20, i1 false)
  %178 = icmp eq %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %139, %0
  br i1 %178, label %179, label %137

179:                                              ; preds = %171, %175, %143, %149, %167, %128
  %180 = phi %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* [ %0, %128 ], [ %138, %167 ], [ %138, %149 ], [ %138, %143 ], [ %0, %175 ], [ %138, %171 ]
  %181 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %180, i64 0, i32 0, i32 0, i32 0
  store i64* %131, i64** %181, align 8
  %182 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %180, i64 0, i32 1
  store i32 %133, i32* %182, align 8
  %183 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %180, i64 0, i32 2
  store i32 %83, i32* %183, align 4
  %184 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %180, i64 0, i32 3
  store i32 %129, i32* %184, align 8
  %185 = add i32 %80, 1
  %186 = icmp eq i32 %185, 8
  br i1 %186, label %191, label %187

187:                                              ; preds = %118, %179, %98, %87, %122
  %188 = phi i32 [ %185, %179 ], [ %80, %122 ], [ %80, %87 ], [ %80, %98 ], [ %80, %118 ]
  %189 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %79, i64 1
  %190 = icmp eq %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %189, %1
  br i1 %190, label %194, label %78

191:                                              ; preds = %179
  %192 = getelementptr inbounds %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount", %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %79, i64 1
  %193 = icmp eq %"struct.v8::internal::(anonymous namespace)::SharedFunctionInfoAndCount"* %192, %1
  br label %194

194:                                              ; preds = %187, %191, %72, %43, %23, %15, %47, %53, %2, %2, %66, %61, %57
  %195 = phi i1 [ true, %66 ], [ true, %61 ], [ true, %57 ], [ true, %2 ], [ true, %2 ], [ true, %53 ], [ true, %47 ], [ true, %15 ], [ true, %23 ], [ true, %43 ], [ true, %72 ], [ %193, %191 ], [ true, %187 ]
  ret i1 %195
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_out_of_rangeEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #5

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN2v88internal16CoverageFunctionENS_9allocatorIS3_EEE24__emplace_back_slow_pathIJRS3_EEEvDpOT_(%"class.std::__1::vector.0"*, %"struct.v8::internal::CoverageFunction"* dereferenceable(56)) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"struct.v8::internal::CoverageFunction"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector.0"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = sdiv exact i64 %8, 56
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 329406144173384850
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector.0"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #13
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"struct.v8::internal::CoverageFunction"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = sdiv exact i64 %18, 56
  %20 = icmp ult i64 %19, 164703072086692425
  br i1 %20, label %21, label %26

21:                                               ; preds = %14
  %22 = shl nsw i64 %19, 1
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %31, label %26

26:                                               ; preds = %14, %21
  %27 = phi i64 [ %24, %21 ], [ 329406144173384850, %14 ]
  %28 = mul i64 %27, 56
  %29 = tail call i8* @_Znwm(i64 %28) #14
  %30 = bitcast i8* %29 to %"struct.v8::internal::CoverageFunction"*
  br label %31

31:                                               ; preds = %21, %26
  %32 = phi i64 [ %27, %26 ], [ 0, %21 ]
  %33 = phi %"struct.v8::internal::CoverageFunction"* [ %30, %26 ], [ null, %21 ]
  %34 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %33, i64 %9
  %35 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %33, i64 %32
  %36 = ptrtoint %"struct.v8::internal::CoverageFunction"* %35 to i64
  %37 = bitcast %"struct.v8::internal::CoverageFunction"* %34 to i8*
  %38 = bitcast %"struct.v8::internal::CoverageFunction"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %37, i8* align 8 %38, i64 24, i1 false) #12
  %39 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %33, i64 %9, i32 5
  %40 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1, i64 0, i32 5
  %41 = bitcast %"class.std::__1::vector.3"* %39 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %41, i8 0, i64 24, i1 false) #12
  %42 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1, i64 0, i32 5, i32 0, i32 1
  %43 = bitcast %"struct.v8::internal::CoverageBlock"** %42 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = bitcast %"class.std::__1::vector.3"* %40 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = sub i64 %44, %46
  %48 = sdiv exact i64 %47, 12
  %49 = icmp eq i64 %47, 0
  br i1 %49, label %77, label %50

50:                                               ; preds = %31
  %51 = icmp ugt i64 %48, 1537228672809129301
  br i1 %51, label %52, label %54

52:                                               ; preds = %50
  %53 = bitcast %"class.std::__1::vector.3"* %39 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %53) #13
  unreachable

54:                                               ; preds = %50
  %55 = tail call i8* @_Znwm(i64 %47) #14
  %56 = bitcast i8* %55 to %"struct.v8::internal::CoverageBlock"*
  %57 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %33, i64 %9, i32 5, i32 0, i32 1
  %58 = bitcast %"struct.v8::internal::CoverageBlock"** %57 to i8**
  store i8* %55, i8** %58, align 8
  %59 = bitcast %"class.std::__1::vector.3"* %39 to i8**
  store i8* %55, i8** %59, align 8
  %60 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %56, i64 %48
  %61 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %33, i64 %9, i32 5, i32 0, i32 2, i32 0, i32 0
  store %"struct.v8::internal::CoverageBlock"* %60, %"struct.v8::internal::CoverageBlock"** %61, align 8
  %62 = getelementptr inbounds %"class.std::__1::vector.3", %"class.std::__1::vector.3"* %40, i64 0, i32 0, i32 0
  %63 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %62, align 8
  %64 = load i64, i64* %43, align 8
  %65 = bitcast %"struct.v8::internal::CoverageBlock"** %57 to i64*
  %66 = ptrtoint i8* %55 to i64
  %67 = ptrtoint %"struct.v8::internal::CoverageBlock"* %63 to i64
  %68 = sub i64 %64, %67
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %75

70:                                               ; preds = %54
  %71 = udiv exact i64 %68, 12
  %72 = bitcast %"struct.v8::internal::CoverageBlock"* %63 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %55, i8* align 4 %72, i64 %68, i1 false) #12
  %73 = getelementptr inbounds %"struct.v8::internal::CoverageBlock", %"struct.v8::internal::CoverageBlock"* %56, i64 %71
  %74 = ptrtoint %"struct.v8::internal::CoverageBlock"* %73 to i64
  br label %75

75:                                               ; preds = %70, %54
  %76 = phi i64 [ %74, %70 ], [ %66, %54 ]
  store i64 %76, i64* %65, align 8
  br label %77

77:                                               ; preds = %31, %75
  %78 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %33, i64 %9, i32 6
  %79 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %1, i64 0, i32 6
  %80 = load i8, i8* %79, align 8, !range !2
  store i8 %80, i8* %78, align 8
  %81 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %34, i64 1
  %82 = ptrtoint %"struct.v8::internal::CoverageFunction"* %81 to i64
  %83 = getelementptr inbounds %"class.std::__1::vector.0", %"class.std::__1::vector.0"* %0, i64 0, i32 0, i32 0
  %84 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %83, align 8
  %85 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %3, align 8
  %86 = icmp eq %"struct.v8::internal::CoverageFunction"* %85, %84
  br i1 %86, label %87, label %89

87:                                               ; preds = %77
  %88 = ptrtoint %"struct.v8::internal::CoverageFunction"* %84 to i64
  br label %120

89:                                               ; preds = %77, %89
  %90 = phi %"struct.v8::internal::CoverageFunction"* [ %92, %89 ], [ %34, %77 ]
  %91 = phi %"struct.v8::internal::CoverageFunction"* [ %93, %89 ], [ %85, %77 ]
  %92 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %90, i64 -1
  %93 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %91, i64 -1
  %94 = bitcast %"struct.v8::internal::CoverageFunction"* %92 to i8*
  %95 = bitcast %"struct.v8::internal::CoverageFunction"* %93 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %94, i8* align 8 %95, i64 24, i1 false) #12
  %96 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %90, i64 -1, i32 5
  %97 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %91, i64 -1, i32 5
  %98 = bitcast %"class.std::__1::vector.3"* %96 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %98, i8 0, i64 24, i1 false) #12
  %99 = bitcast %"class.std::__1::vector.3"* %97 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = bitcast %"class.std::__1::vector.3"* %96 to i64*
  store i64 %100, i64* %101, align 8
  %102 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %91, i64 -1, i32 5, i32 0, i32 1
  %103 = bitcast %"struct.v8::internal::CoverageBlock"** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %90, i64 -1, i32 5, i32 0, i32 1
  %106 = bitcast %"struct.v8::internal::CoverageBlock"** %105 to i64*
  store i64 %104, i64* %106, align 8
  %107 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %91, i64 -1, i32 5, i32 0, i32 2, i32 0, i32 0
  %108 = bitcast %"struct.v8::internal::CoverageBlock"** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %90, i64 -1, i32 5, i32 0, i32 2, i32 0, i32 0
  %111 = bitcast %"struct.v8::internal::CoverageBlock"** %110 to i64*
  store i64 %109, i64* %111, align 8
  %112 = bitcast %"class.std::__1::vector.3"* %97 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %112, i8 0, i64 24, i1 false) #12
  %113 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %90, i64 -1, i32 6
  %114 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %91, i64 -1, i32 6
  %115 = load i8, i8* %114, align 8, !range !2
  store i8 %115, i8* %113, align 8
  %116 = icmp eq %"struct.v8::internal::CoverageFunction"* %93, %84
  br i1 %116, label %117, label %89

117:                                              ; preds = %89
  %118 = load i64, i64* %6, align 8
  %119 = load %"struct.v8::internal::CoverageFunction"*, %"struct.v8::internal::CoverageFunction"** %3, align 8
  br label %120

120:                                              ; preds = %87, %117
  %121 = phi %"struct.v8::internal::CoverageFunction"* [ %84, %87 ], [ %119, %117 ]
  %122 = phi %"struct.v8::internal::CoverageFunction"* [ %34, %87 ], [ %92, %117 ]
  %123 = phi i64 [ %88, %87 ], [ %118, %117 ]
  %124 = ptrtoint %"struct.v8::internal::CoverageFunction"* %122 to i64
  store i64 %124, i64* %6, align 8
  store i64 %82, i64* %4, align 8
  store i64 %36, i64* %16, align 8
  %125 = inttoptr i64 %123 to %"struct.v8::internal::CoverageFunction"*
  %126 = icmp eq %"struct.v8::internal::CoverageFunction"* %121, %125
  br i1 %126, label %140, label %127

127:                                              ; preds = %120, %138
  %128 = phi %"struct.v8::internal::CoverageFunction"* [ %129, %138 ], [ %121, %120 ]
  %129 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %128, i64 -1
  %130 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %128, i64 -1, i32 5, i32 0, i32 0
  %131 = load %"struct.v8::internal::CoverageBlock"*, %"struct.v8::internal::CoverageBlock"** %130, align 8
  %132 = icmp eq %"struct.v8::internal::CoverageBlock"* %131, null
  br i1 %132, label %138, label %133

133:                                              ; preds = %127
  %134 = ptrtoint %"struct.v8::internal::CoverageBlock"* %131 to i64
  %135 = getelementptr inbounds %"struct.v8::internal::CoverageFunction", %"struct.v8::internal::CoverageFunction"* %128, i64 -1, i32 5, i32 0, i32 1
  %136 = bitcast %"struct.v8::internal::CoverageBlock"** %135 to i64*
  store i64 %134, i64* %136, align 8
  %137 = bitcast %"struct.v8::internal::CoverageBlock"* %131 to i8*
  tail call void @_ZdlPv(i8* %137) #14
  br label %138

138:                                              ; preds = %133, %127
  %139 = icmp eq %"struct.v8::internal::CoverageFunction"* %129, %125
  br i1 %139, label %140, label %127

140:                                              ; preds = %138, %120
  %141 = icmp eq i64 %123, 0
  br i1 %141, label %144, label %142

142:                                              ; preds = %140
  %143 = inttoptr i64 %123 to i8*
  tail call void @_ZdlPv(i8* %143) #14
  br label %144

144:                                              ; preds = %140, %142
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal15IsCompiledScopeC2ENS0_18SharedFunctionInfoEPNS0_7IsolateE(%"class.v8::internal::IsCompiledScope"*, i64, %"class.v8::internal::Isolate"*) unnamed_addr #10 comdat align 2 {
  %4 = alloca %"class.v8::internal::SharedFunctionInfo", align 8
  %5 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %1, i64* %5, align 8
  %6 = and i64 %1, -4294967296
  %7 = add i64 %1, 3
  %8 = inttoptr i64 %7 to i32*
  %9 = load atomic i32, i32* %8 acquire, align 4
  %10 = zext i32 %9 to i64
  %11 = and i64 %10, 1
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %60, label %13

13:                                               ; preds = %3
  %14 = or i64 %6, %10
  %15 = add i64 %14, -1
  %16 = inttoptr i64 %15 to i32*
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = zext i32 %17 to i64
  %19 = or i64 %6, %18
  %20 = add i64 %19, 7
  %21 = inttoptr i64 %20 to i16*
  %22 = load atomic i16, i16* %21 monotonic, align 2
  %23 = icmp eq i16 %22, 133
  br i1 %23, label %40, label %24

24:                                               ; preds = %13
  %25 = load atomic i32, i32* %16 monotonic, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %6, %26
  %28 = add i64 %27, 7
  %29 = inttoptr i64 %28 to i16*
  %30 = load atomic i16, i16* %29 monotonic, align 2
  %31 = icmp eq i16 %30, 105
  br i1 %31, label %40, label %32

32:                                               ; preds = %24
  %33 = load atomic i32, i32* %16 monotonic, align 4
  %34 = zext i32 %33 to i64
  %35 = or i64 %6, %34
  %36 = add i64 %35, 7
  %37 = inttoptr i64 %36 to i16*
  %38 = load atomic i16, i16* %37 monotonic, align 2
  %39 = icmp eq i16 %38, 94
  br i1 %39, label %40, label %60

40:                                               ; preds = %13, %24, %32
  %41 = call i64 @_ZNK2v88internal18SharedFunctionInfo16GetBytecodeArrayINS0_7IsolateEEENS0_13BytecodeArrayEPT_(%"class.v8::internal::SharedFunctionInfo"* nonnull %4, %"class.v8::internal::Isolate"* %2)
  %42 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 4
  %43 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %42, align 8
  %44 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %40
  %46 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %43, i64 %41) #12
  br label %60

47:                                               ; preds = %40
  %48 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 0
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 1
  %51 = load i64*, i64** %50, align 8
  %52 = icmp eq i64* %49, %51
  br i1 %52, label %53, label %55

53:                                               ; preds = %47
  %54 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %2) #12
  br label %55

55:                                               ; preds = %53, %47
  %56 = phi i64* [ %54, %53 ], [ %49, %47 ]
  %57 = ptrtoint i64* %56 to i64
  %58 = add i64 %57, 8
  %59 = inttoptr i64 %58 to i64*
  store i64* %59, i64** %48, align 8
  store i64 %41, i64* %56, align 8
  br label %60

60:                                               ; preds = %32, %3, %55, %45
  %61 = phi i64* [ %46, %45 ], [ %56, %55 ], [ null, %3 ], [ null, %32 ]
  %62 = getelementptr inbounds %"class.v8::internal::IsCompiledScope", %"class.v8::internal::IsCompiledScope"* %0, i64 0, i32 0, i32 0
  store i64* %61, i64** %62, align 8
  %63 = getelementptr inbounds %"class.v8::internal::IsCompiledScope", %"class.v8::internal::IsCompiledScope"* %0, i64 0, i32 1
  %64 = load i64, i64* %5, align 8
  %65 = and i64 %64, -4294967296
  %66 = add i64 %64, 3
  %67 = inttoptr i64 %66 to i32*
  %68 = load atomic i32, i32* %67 acquire, align 4
  %69 = zext i32 %68 to i64
  %70 = or i64 %65, %69
  %71 = icmp eq i32 %68, 170
  br i1 %71, label %87, label %72

72:                                               ; preds = %60
  %73 = and i64 %69, 1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %87, label %75

75:                                               ; preds = %72
  %76 = add i64 %70, -1
  %77 = inttoptr i64 %76 to i32*
  %78 = load atomic i32, i32* %77 monotonic, align 4
  %79 = zext i32 %78 to i64
  %80 = or i64 %65, %79
  %81 = add i64 %80, 7
  %82 = inttoptr i64 %81 to i16*
  %83 = load atomic i16, i16* %82 monotonic, align 2
  %84 = add i16 %83, -157
  %85 = icmp ugt i16 %84, 1
  %86 = zext i1 %85 to i8
  br label %87

87:                                               ; preds = %60, %72, %75
  %88 = phi i8 [ 0, %60 ], [ 1, %72 ], [ %86, %75 ]
  store i8 %88, i8* %63, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK2v88internal18SharedFunctionInfo16GetBytecodeArrayINS0_7IsolateEEENS0_13BytecodeArrayEPT_(%"class.v8::internal::SharedFunctionInfo"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #10 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, 15
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 acquire, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = add i64 %10, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %5, %14
  %16 = add i64 %15, 7
  %17 = inttoptr i64 %16 to i16*
  %18 = load atomic i16, i16* %17 monotonic, align 2
  %19 = icmp eq i16 %18, 100
  br i1 %19, label %20, label %55

20:                                               ; preds = %2
  %21 = load i64, i64* %3, align 8
  %22 = and i64 %21, -4294967296
  %23 = add i64 %21, 15
  %24 = inttoptr i64 %23 to i32*
  %25 = load atomic i32, i32* %24 acquire, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %22, %26
  %28 = add i64 %27, 19
  %29 = inttoptr i64 %28 to i32*
  %30 = load atomic i32, i32* %29 acquire, align 4
  %31 = zext i32 %30 to i64
  %32 = or i64 %22, %31
  %33 = add i64 %32, -1
  %34 = inttoptr i64 %33 to i32*
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = zext i32 %35 to i64
  %37 = or i64 %22, %36
  %38 = add i64 %37, 7
  %39 = inttoptr i64 %38 to i16*
  %40 = load atomic i16, i16* %39 monotonic, align 2
  %41 = icmp eq i16 %40, 133
  br i1 %41, label %42, label %55

42:                                               ; preds = %20
  %43 = load i64, i64* %3, align 8
  %44 = and i64 %43, -4294967296
  %45 = add i64 %43, 15
  %46 = inttoptr i64 %45 to i32*
  %47 = load atomic i32, i32* %46 acquire, align 4
  %48 = zext i32 %47 to i64
  %49 = or i64 %44, %48
  %50 = add i64 %49, 15
  %51 = inttoptr i64 %50 to i32*
  %52 = load atomic i32, i32* %51 acquire, align 4
  %53 = zext i32 %52 to i64
  %54 = or i64 %44, %53
  br label %120

55:                                               ; preds = %2, %20
  %56 = load i64, i64* %3, align 8
  %57 = and i64 %56, -4294967296
  %58 = add i64 %56, 3
  %59 = inttoptr i64 %58 to i32*
  %60 = load atomic i32, i32* %59 acquire, align 4
  %61 = zext i32 %60 to i64
  %62 = or i64 %57, %61
  %63 = and i64 %61, 1
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %114, label %65

65:                                               ; preds = %55
  %66 = add i64 %62, -1
  %67 = inttoptr i64 %66 to i32*
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = zext i32 %68 to i64
  %70 = or i64 %57, %69
  %71 = add i64 %70, 7
  %72 = inttoptr i64 %71 to i16*
  %73 = load atomic i16, i16* %72 monotonic, align 2
  %74 = icmp eq i16 %73, 133
  br i1 %74, label %120, label %75

75:                                               ; preds = %65
  %76 = load atomic i32, i32* %67 monotonic, align 4
  %77 = zext i32 %76 to i64
  %78 = or i64 %57, %77
  %79 = add i64 %78, 7
  %80 = inttoptr i64 %79 to i16*
  %81 = load atomic i16, i16* %80 monotonic, align 2
  %82 = icmp eq i16 %81, 94
  br i1 %82, label %83, label %114

83:                                               ; preds = %75
  %84 = load i64, i64* %3, align 8
  %85 = and i64 %84, -4294967296
  %86 = add i64 %84, 3
  %87 = inttoptr i64 %86 to i32*
  %88 = load atomic i32, i32* %87 acquire, align 4
  %89 = zext i32 %88 to i64
  %90 = or i64 %85, %89
  %91 = add i64 %90, 7
  %92 = inttoptr i64 %91 to i32*
  %93 = load i32, i32* %92, align 4
  %94 = zext i32 %93 to i64
  %95 = or i64 %85, %94
  %96 = and i64 %94, 1
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %108, label %98

98:                                               ; preds = %83
  %99 = add i64 %95, -1
  %100 = inttoptr i64 %99 to i32*
  %101 = load atomic i32, i32* %100 monotonic, align 4
  %102 = zext i32 %101 to i64
  %103 = or i64 %85, %102
  %104 = add i64 %103, 7
  %105 = inttoptr i64 %104 to i16*
  %106 = load atomic i16, i16* %105 monotonic, align 2
  %107 = icmp eq i16 %106, 133
  br i1 %107, label %120, label %108

108:                                              ; preds = %98, %83
  %109 = add i64 %95, 3
  %110 = inttoptr i64 %109 to i32*
  %111 = load i32, i32* %110, align 4
  %112 = zext i32 %111 to i64
  %113 = or i64 %85, %112
  br label %120

114:                                              ; preds = %75, %55
  %115 = add i64 %62, 3
  %116 = inttoptr i64 %115 to i32*
  %117 = load i32, i32* %116, align 4
  %118 = zext i32 %117 to i64
  %119 = or i64 %57, %118
  br label %120

120:                                              ; preds = %114, %108, %98, %65, %42
  %121 = phi i64 [ %54, %42 ], [ %119, %114 ], [ %62, %65 ], [ %113, %108 ], [ %95, %98 ]
  ret i64 %121
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.uadd.sat.i32(i32, i32) #11

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nounwind readnone speculatable }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }
attributes #14 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN2v88internal12_GLOBAL__N_118GetSortedBlockDataENS0_18SharedFunctionInfoE: argument 0"}
!5 = distinct !{!5, !"_ZN2v88internal12_GLOBAL__N_118GetSortedBlockDataENS0_18SharedFunctionInfoE"}
!6 = !{!"branch_weights", i32 1, i32 2000}
