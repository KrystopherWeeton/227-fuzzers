; ModuleID = '../../media/base/video_transformation.cc'
source_filename = "../../media/base/video_transformation.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.media::VideoTransformation" = type <{ i32, i8, [3 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@.str = private unnamed_addr constant [4 x i8] c"0\C2\B0\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"180\C2\B0\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"270\C2\B0\00", align 1

@_ZN5media19VideoTransformationC1EPi = hidden unnamed_addr alias void (%"struct.media::VideoTransformation"*, i32*), void (%"struct.media::VideoTransformation"*, i32*)* @_ZN5media19VideoTransformationC2EPi

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5media21VideoRotationToStringENS_13VideoRotationE(%"class.std::__1::basic_string"* noalias sret, i32) local_unnamed_addr #0 {
  switch i32 %1, label %24 [
    i32 0, label %3
    i32 1, label %8
    i32 2, label %14
    i32 3, label %19
  ]

3:                                                ; preds = %2
  %4 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  store i8 3, i8* %5, align 1
  %6 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i64 3, i1 false) #6
  %7 = getelementptr inbounds i8, i8* %6, i64 3
  store i8 0, i8* %7, align 1
  br label %28

8:                                                ; preds = %2
  %9 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %10 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %9, i64 0, i32 1, i32 0
  store i8 4, i8* %10, align 1
  %11 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %12 = bitcast %"class.std::__1::basic_string"* %0 to i32*
  store i32 -1329450951, i32* %12, align 8
  %13 = getelementptr inbounds i8, i8* %11, i64 4
  store i8 0, i8* %13, align 4
  br label %28

14:                                               ; preds = %2
  %15 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %16 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %15, i64 0, i32 1, i32 0
  store i8 5, i8* %16, align 1
  %17 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64 5, i1 false) #6
  %18 = getelementptr inbounds i8, i8* %17, i64 5
  store i8 0, i8* %18, align 1
  br label %28

19:                                               ; preds = %2
  %20 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %21 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %20, i64 0, i32 1, i32 0
  store i8 5, i8* %21, align 1
  %22 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i64 5, i1 false) #6
  %23 = getelementptr inbounds i8, i8* %22, i64 5
  store i8 0, i8* %23, align 1
  br label %28

24:                                               ; preds = %2
  %25 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %26 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %25, i64 0, i32 1, i32 0
  store i8 0, i8* %26, align 1
  %27 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  store i8 0, i8* %27, align 8
  br label %28

28:                                               ; preds = %24, %19, %14, %8, %3
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZN5mediaeqERKNS_19VideoTransformationES2_(%"struct.media::VideoTransformation"* nocapture readonly dereferenceable(8), %"struct.media::VideoTransformation"* nocapture readonly dereferenceable(8)) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %"struct.media::VideoTransformation", %"struct.media::VideoTransformation"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %"struct.media::VideoTransformation", %"struct.media::VideoTransformation"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"struct.media::VideoTransformation", %"struct.media::VideoTransformation"* %0, i64 0, i32 1
  %10 = load i8, i8* %9, align 4, !range !2
  %11 = getelementptr inbounds %"struct.media::VideoTransformation", %"struct.media::VideoTransformation"* %1, i64 0, i32 1
  %12 = load i8, i8* %11, align 4, !range !2
  %13 = icmp eq i8 %10, %12
  br label %14

14:                                               ; preds = %8, %2
  %15 = phi i1 [ false, %2 ], [ %13, %8 ]
  ret i1 %15
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @_ZN5media19VideoTransformationC2EPi(%"struct.media::VideoTransformation"* nocapture, i32* nocapture readonly) unnamed_addr #2 align 2 {
  %3 = load i32, i32* %1, align 4
  %4 = icmp slt i32 %3, 0
  %5 = sub nsw i32 0, %3
  %6 = select i1 %4, i32 %5, i32 %3
  %7 = getelementptr inbounds i32, i32* %1, i64 3
  %8 = load i32, i32* %7, align 4
  %9 = icmp slt i32 %8, 0
  %10 = sub nsw i32 0, %8
  %11 = select i1 %9, i32 %10, i32 %8
  %12 = icmp eq i32 %6, %11
  br i1 %12, label %13, label %25

13:                                               ; preds = %2
  %14 = getelementptr inbounds i32, i32* %1, i64 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %15, 0
  %17 = sub nsw i32 0, %15
  %18 = select i1 %16, i32 %17, i32 %15
  %19 = getelementptr inbounds i32, i32* %1, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = icmp slt i32 %20, 0
  %22 = sub nsw i32 0, %20
  %23 = select i1 %21, i32 %22, i32 %20
  %24 = icmp eq i32 %18, %23
  br i1 %24, label %28, label %25

25:                                               ; preds = %13, %2
  %26 = getelementptr inbounds %"struct.media::VideoTransformation", %"struct.media::VideoTransformation"* %0, i64 0, i32 0
  store i32 0, i32* %26, align 4
  %27 = getelementptr inbounds %"struct.media::VideoTransformation", %"struct.media::VideoTransformation"* %0, i64 0, i32 1
  store i8 0, i8* %27, align 4
  br label %91

28:                                               ; preds = %13
  %29 = ashr i32 %3, 16
  %30 = sitofp i32 %29 to double
  %31 = tail call double @acos(double %30) #6
  %32 = fmul double %31, 1.800000e+02
  %33 = fdiv double %32, 0x400921FB54442D18
  %34 = getelementptr inbounds %"struct.media::VideoTransformation", %"struct.media::VideoTransformation"* %0, i64 0, i32 1
  store i8 0, i8* %34, align 4
  %35 = load i32, i32* %1, align 4
  %36 = load i32, i32* %7, align 4
  %37 = icmp eq i32 %35, %36
  %38 = icmp eq i32 %35, 0
  %39 = or i1 %38, %37
  br i1 %39, label %43, label %40

40:                                               ; preds = %28
  store i8 1, i8* %34, align 4
  %41 = fadd double %33, 1.800000e+02
  %42 = load i32, i32* %7, align 4
  br label %43

43:                                               ; preds = %28, %40
  %44 = phi i8 [ 0, %40 ], [ 1, %28 ]
  %45 = phi i32 [ %42, %40 ], [ %36, %28 ]
  %46 = phi double [ %41, %40 ], [ %33, %28 ]
  %47 = load i32, i32* %14, align 4
  %48 = icmp ne i32 %47, %45
  %49 = icmp eq i32 %47, 0
  %50 = or i1 %49, %48
  br i1 %50, label %52, label %51

51:                                               ; preds = %43
  store i8 %44, i8* %34, align 4
  br label %52

52:                                               ; preds = %43, %51
  %53 = fcmp olt double %46, 0.000000e+00
  br i1 %53, label %57, label %54

54:                                               ; preds = %57, %52
  %55 = phi double [ %46, %52 ], [ %59, %57 ]
  %56 = fcmp ult double %55, 3.600000e+02
  br i1 %56, label %65, label %61

57:                                               ; preds = %52, %57
  %58 = phi double [ %59, %57 ], [ %46, %52 ]
  %59 = fadd double %58, 3.600000e+02
  %60 = fcmp olt double %59, 0.000000e+00
  br i1 %60, label %57, label %54

61:                                               ; preds = %54, %61
  %62 = phi double [ %63, %61 ], [ %55, %54 ]
  %63 = fadd double %62, -3.600000e+02
  %64 = fcmp ult double %63, 3.600000e+02
  br i1 %64, label %65, label %61

65:                                               ; preds = %61, %54
  %66 = phi double [ %55, %54 ], [ %63, %61 ]
  %67 = tail call double @llvm.fabs.f64(double %66) #6
  %68 = fcmp olt double %67, 1.000000e-04
  br i1 %68, label %69, label %71

69:                                               ; preds = %65
  %70 = getelementptr inbounds %"struct.media::VideoTransformation", %"struct.media::VideoTransformation"* %0, i64 0, i32 0
  store i32 0, i32* %70, align 4
  br label %91

71:                                               ; preds = %65
  %72 = fadd double %66, -1.800000e+02
  %73 = tail call double @llvm.fabs.f64(double %72) #6
  %74 = fcmp olt double %73, 1.000000e-04
  br i1 %74, label %75, label %77

75:                                               ; preds = %71
  %76 = getelementptr inbounds %"struct.media::VideoTransformation", %"struct.media::VideoTransformation"* %0, i64 0, i32 0
  store i32 2, i32* %76, align 4
  br label %91

77:                                               ; preds = %71
  %78 = fadd double %66, -9.000000e+01
  %79 = tail call double @llvm.fabs.f64(double %78) #6
  %80 = fcmp olt double %79, 1.000000e-04
  br i1 %80, label %81, label %89

81:                                               ; preds = %77
  %82 = load i32, i32* %19, align 4
  %83 = ashr i32 %82, 16
  %84 = sitofp i32 %83 to double
  %85 = tail call double @asin(double %84) #6
  %86 = fcmp olt double %85, 0.000000e+00
  %87 = select i1 %86, i32 1, i32 3
  %88 = getelementptr inbounds %"struct.media::VideoTransformation", %"struct.media::VideoTransformation"* %0, i64 0, i32 0
  store i32 %87, i32* %88, align 4
  br label %91

89:                                               ; preds = %77
  %90 = getelementptr inbounds %"struct.media::VideoTransformation", %"struct.media::VideoTransformation"* %0, i64 0, i32 0
  store i32 0, i32* %90, align 4
  store i8 0, i8* %34, align 4
  br label %91

91:                                               ; preds = %69, %81, %89, %75, %25
  ret void
}

; Function Attrs: nofree nounwind
declare double @acos(double) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @asin(double) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
