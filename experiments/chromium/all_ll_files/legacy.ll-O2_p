; ModuleID = '../../third_party/nasm/output/legacy.c'
source_filename = "../../third_party/nasm/output/legacy.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ofmt = type { i8*, i8*, i8*, i32, i32, %struct.dfmt**, %struct.dfmt*, i8*, void ()*, void ()*, void (%struct.out_data*)*, void (i32, i8*, i32, i64, i32, i32)*, void (i8*, i32, i64, i32, i8*)*, i32 (i8*, i32*)*, i32 (i8*, i32, i32, i32*, i8*)*, void (i32, i32)*, i32 (i32)*, i32 (i32, i8*)*, void ()*, %struct.pragma_facility* }
%struct.dfmt = type { i8*, i8*, void ()*, void (i8*, i32, i32)*, void (i8*, i32, i64, i32, i8*)*, void (i8*, i8*)*, void (i32)*, void (i32, i8*)*, void ()*, %struct.pragma_facility* }
%struct.out_data = type { i64, i32, i32, i32, i32, i32, i32, i64, %struct.itemplate*, i8*, i64, i32, i32, i64, %struct.src_location }
%struct.itemplate = type opaque
%struct.src_location = type { i8*, i32 }
%struct.pragma_facility = type { i8*, i32 (%struct.pragma*)* }
%struct.pragma = type { %struct.pragma_facility*, i8*, i8*, i8*, i32 }

@.str = private unnamed_addr constant [39 x i8] c"../../third_party/nasm/output/legacy.c\00", align 1
@zero_buffer = external constant [65536 x i8], align 16
@ofmt = external local_unnamed_addr global %struct.ofmt*, align 8
@switch.table.nasm_do_legacy_output = private unnamed_addr constant [8 x i32] [i32 6, i32 7, i32 6, i32 8, i32 6, i32 6, i32 6, i32 9], align 4

; Function Attrs: nounwind ssp uwtable
define hidden void @nasm_do_legacy_output(%struct.out_data*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 2
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 11
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 12
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 7
  %9 = load i64, i64* %8, align 8
  switch i32 %3, label %61 [
    i32 4, label %16
    i32 5, label %35
    i32 3, label %42
    i32 0, label %50
    i32 1, label %50
    i32 2, label %10
  ]

10:                                               ; preds = %1
  %11 = icmp ugt i64 %9, 65536
  br i1 %11, label %12, label %65

12:                                               ; preds = %10
  %13 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 1
  %14 = add i64 %9, -65537
  %15 = and i64 %14, -65536
  br label %53

16:                                               ; preds = %1
  %17 = add i64 %9, -1
  %18 = icmp ult i64 %17, 8
  br i1 %18, label %20, label %19

19:                                               ; preds = %20, %16
  tail call void @nasm_panic_from_macro(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0), i32 82) #2
  unreachable

20:                                               ; preds = %16
  %21 = trunc i64 %17 to i8
  %22 = lshr i8 -117, %21
  %23 = and i8 %22, 1
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %19, label %25

25:                                               ; preds = %20
  %26 = getelementptr inbounds [8 x i32], [8 x i32]* @switch.table.nasm_do_legacy_output, i64 0, i64 %17
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 10
  %29 = bitcast i64* %28 to i8*
  %30 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 13
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = sub nsw i64 %31, %33
  br label %65

35:                                               ; preds = %1
  %36 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 3
  %37 = load i32, i32* %36, align 8
  %38 = icmp eq i32 %37, 1
  %39 = sub i64 0, %9
  %40 = select i1 %38, i64 %39, i64 %9
  %41 = or i32 %5, 1
  br label %65

42:                                               ; preds = %1
  %43 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 10
  %44 = bitcast i64* %43 to i8*
  %45 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 3
  %46 = load i32, i32* %45, align 8
  %47 = icmp eq i32 %46, 1
  %48 = sub i64 0, %9
  %49 = select i1 %47, i64 %48, i64 %9
  br label %65

50:                                               ; preds = %1, %1
  %51 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 9
  %52 = load i8*, i8** %51, align 8
  br label %65

53:                                               ; preds = %12, %53
  %54 = phi i64 [ %9, %12 ], [ %59, %53 ]
  %55 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %56 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %55, i64 0, i32 11
  %57 = load void (i32, i8*, i32, i64, i32, i32)*, void (i32, i8*, i32, i64, i32, i32)** %56, align 8
  %58 = load i32, i32* %13, align 8
  tail call void %57(i32 %58, i8* getelementptr inbounds ([65536 x i8], [65536 x i8]* @zero_buffer, i64 0, i64 0), i32 0, i64 65536, i32 -1, i32 -1) #3
  %59 = add i64 %54, -65536
  %60 = icmp ugt i64 %59, 65536
  br i1 %60, label %53, label %62

61:                                               ; preds = %1
  tail call void @nasm_panic_from_macro(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0), i32 119) #2
  unreachable

62:                                               ; preds = %53
  %63 = add i64 %9, -65536
  %64 = sub i64 %63, %15
  br label %65

65:                                               ; preds = %62, %10, %50, %42, %35, %25
  %66 = phi i8* [ %52, %50 ], [ %44, %42 ], [ getelementptr inbounds ([65536 x i8], [65536 x i8]* @zero_buffer, i64 0, i64 0), %35 ], [ %29, %25 ], [ getelementptr inbounds ([65536 x i8], [65536 x i8]* @zero_buffer, i64 0, i64 0), %10 ], [ getelementptr inbounds ([65536 x i8], [65536 x i8]* @zero_buffer, i64 0, i64 0), %62 ]
  %67 = phi i32 [ %3, %50 ], [ 3, %42 ], [ 3, %35 ], [ %27, %25 ], [ 0, %10 ], [ 0, %62 ]
  %68 = phi i32 [ -1, %50 ], [ %5, %42 ], [ %41, %35 ], [ %5, %25 ], [ -1, %10 ], [ -1, %62 ]
  %69 = phi i32 [ -1, %50 ], [ %7, %42 ], [ %7, %35 ], [ %7, %25 ], [ -1, %10 ], [ -1, %62 ]
  %70 = phi i64 [ %9, %50 ], [ %49, %42 ], [ %40, %35 ], [ %34, %25 ], [ %9, %10 ], [ %64, %62 ]
  %71 = load %struct.ofmt*, %struct.ofmt** @ofmt, align 8
  %72 = getelementptr inbounds %struct.ofmt, %struct.ofmt* %71, i64 0, i32 11
  %73 = load void (i32, i8*, i32, i64, i32, i32)*, void (i32, i8*, i32, i64, i32, i32)** %72, align 8
  %74 = getelementptr inbounds %struct.out_data, %struct.out_data* %0, i64 0, i32 1
  %75 = load i32, i32* %74, align 8
  tail call void %73(i32 %75, i8* %66, i32 %67, i64 %70, i32 %68, i32 %69) #3
  ret void
}

; Function Attrs: cold noreturn
declare void @nasm_panic_from_macro(i8*, i32) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { cold noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { cold noreturn nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
