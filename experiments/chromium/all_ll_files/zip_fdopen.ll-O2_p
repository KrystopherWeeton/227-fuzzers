; ModuleID = '../../third_party/libzip/src/lib/zip_fdopen.c'
source_filename = "../../third_party/libzip/src/lib/zip_fdopen.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@.str = private unnamed_addr constant [3 x i8] c"rb\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden %struct.zip* @zip_fdopen(i32, i32, i32*) local_unnamed_addr #0 {
  %4 = alloca %struct.zip_error, align 8
  %5 = bitcast %struct.zip_error* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %5) #5
  %6 = and i32 %1, -21
  %7 = icmp eq i32 %6, 0
  %8 = bitcast %struct.zip_error* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  br i1 %7, label %10, label %9

9:                                                ; preds = %3
  tail call void @_zip_set_open_error(i32* %2, %struct.zip_error* null, i32 18) #5
  br label %30

10:                                               ; preds = %3
  %11 = tail call i32 @dup(i32 %0) #5
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %13, label %14

13:                                               ; preds = %10
  tail call void @_zip_set_open_error(i32* %2, %struct.zip_error* null, i32 11) #5
  br label %30

14:                                               ; preds = %10
  %15 = tail call %struct._IO_FILE* @fdopen(i32 %11, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0)) #5
  %16 = icmp eq %struct._IO_FILE* %15, null
  br i1 %16, label %17, label %19

17:                                               ; preds = %14
  %18 = tail call i32 @close(i32 %11) #5
  tail call void @_zip_set_open_error(i32* %2, %struct.zip_error* null, i32 11) #5
  br label %30

19:                                               ; preds = %14
  call void @zip_error_init(%struct.zip_error* nonnull %4) #5
  %20 = call %struct.zip_source* @zip_source_filep_create(%struct._IO_FILE* nonnull %15, i64 0, i64 -1, %struct.zip_error* nonnull %4) #5
  %21 = icmp eq %struct.zip_source* %20, null
  br i1 %21, label %22, label %24

22:                                               ; preds = %19
  %23 = call i32 @fclose(%struct._IO_FILE* nonnull %15)
  call void @_zip_set_open_error(i32* %2, %struct.zip_error* nonnull %4, i32 0) #5
  call void @zip_error_fini(%struct.zip_error* nonnull %4) #5
  br label %30

24:                                               ; preds = %19
  %25 = call %struct.zip* @zip_open_from_source(%struct.zip_source* nonnull %20, i32 %1, %struct.zip_error* nonnull %4) #5
  %26 = icmp eq %struct.zip* %25, null
  br i1 %26, label %27, label %28

27:                                               ; preds = %24
  call void @zip_source_free(%struct.zip_source* nonnull %20) #5
  call void @_zip_set_open_error(i32* %2, %struct.zip_error* nonnull %4, i32 0) #5
  call void @zip_error_fini(%struct.zip_error* nonnull %4) #5
  br label %30

28:                                               ; preds = %24
  call void @zip_error_fini(%struct.zip_error* nonnull %4) #5
  %29 = call i32 @close(i32 %0) #5
  br label %30

30:                                               ; preds = %28, %27, %22, %17, %13, %9
  %31 = phi %struct.zip* [ null, %9 ], [ null, %13 ], [ null, %17 ], [ null, %22 ], [ null, %27 ], [ %25, %28 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %5) #5
  ret %struct.zip* %31
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_zip_set_open_error(i32*, %struct.zip_error*, i32) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @dup(i32) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare noalias %struct._IO_FILE* @fdopen(i32, i8* nocapture readonly) local_unnamed_addr #4

declare i32 @close(i32) local_unnamed_addr #2

declare void @zip_error_init(%struct.zip_error*) local_unnamed_addr #2

declare %struct.zip_source* @zip_source_filep_create(%struct._IO_FILE*, i64, i64, %struct.zip_error*) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @fclose(%struct._IO_FILE* nocapture) local_unnamed_addr #4

declare void @zip_error_fini(%struct.zip_error*) local_unnamed_addr #2

declare %struct.zip* @zip_open_from_source(%struct.zip_source*, i32, %struct.zip_error*) local_unnamed_addr #2

declare void @zip_source_free(%struct.zip_source*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
