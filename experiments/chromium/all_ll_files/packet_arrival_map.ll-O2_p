; ModuleID = '../../third_party/webrtc/modules/remote_bitrate_estimator/packet_arrival_map.cc'
source_filename = "../../third_party/webrtc/modules/remote_bitrate_estimator/packet_arrival_map.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.webrtc::PacketArrivalTimeMap" = type <{ %"class.std::__1::deque", i64, i8, [7 x i8] }>
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.1" }
%"struct.std::__1::__split_buffer" = type { i64**, i64**, i64**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i64** }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::__deque_iterator" = type { i64**, i64* }
%"struct.std::__1::__split_buffer.7" = type { i64**, i64**, i64**, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.std::__1::allocator"* }
%"class.std::__1::allocator" = type { i8 }

$_ZNSt3__15dequeIlNS_9allocatorIlEEE6insertENS_16__deque_iteratorIlPKlRS5_PKS6_lLl0EEEmS7_ = comdat any

$_ZNSt3__15dequeIlNS_9allocatorIlEEE5eraseENS_16__deque_iteratorIlPKlRS5_PKS6_lLl0EEESA_ = comdat any

$_ZNSt3__15dequeIlNS_9allocatorIlEEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIPlNS_9allocatorIS1_EEE9push_backEOS1_ = comdat any

$_ZNSt3__114__split_bufferIPlNS_9allocatorIS1_EEE10push_frontEOS1_ = comdat any

$_ZNSt3__114__split_bufferIPlRNS_9allocatorIS1_EEE10push_frontERKS1_ = comdat any

$_ZNSt3__15dequeIlNS_9allocatorIlEEE20__add_front_capacityEm = comdat any

$_ZNSt3__15dequeIlNS_9allocatorIlEEE35__move_construct_backward_and_checkENS_16__deque_iteratorIlPlRlPS5_lLl0EEES8_S8_RPKl = comdat any

$_ZNSt3__15dequeIlNS_9allocatorIlEEE16__move_and_checkENS_16__deque_iteratorIlPlRlPS5_lLl0EEES8_S8_RPKl = comdat any

$_ZNSt3__15dequeIlNS_9allocatorIlEEE19__add_back_capacityEm = comdat any

$_ZNSt3__15dequeIlNS_9allocatorIlEEE26__move_construct_and_checkENS_16__deque_iteratorIlPlRlPS5_lLl0EEES8_S8_RPKl = comdat any

$_ZNSt3__15dequeIlNS_9allocatorIlEEE25__move_backward_and_checkENS_16__deque_iteratorIlPlRlPS5_lLl0EEES8_S8_RPKl = comdat any

$_ZNSt3__114__split_bufferIPlNS_9allocatorIS1_EEE10push_frontERKS1_ = comdat any

$_ZNSt3__113move_backwardIlPlRlPS1_lLl0ElS1_S2_S3_lLl0EEENS_16__deque_iteratorIT5_T6_T7_T8_T9_XT10_EEENS4_IT_T0_T1_T2_T3_XT4_EEESG_SA_ = comdat any

$_ZNSt3__14moveIlPlRlPS1_lLl0ElS1_S2_S3_lLl0EEENS_16__deque_iteratorIT5_T6_T7_T8_T9_XT10_EEENS4_IT_T0_T1_T2_T3_XT4_EEESG_SA_ = comdat any

@_ZN6webrtc20PacketArrivalTimeMap19kMaxNumberOfPacketsE = hidden local_unnamed_addr constant i64 32768, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc20PacketArrivalTimeMap9AddPacketEll(%"class.webrtc::PacketArrivalTimeMap"*, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 2
  %7 = load i8, i8* %6, align 8, !range !2
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %52

9:                                                ; preds = %3
  store i8 1, i8* %6, align 8
  %10 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 1
  store i64 %1, i64* %10, align 8
  %11 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %12 = bitcast i64*** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %15 = bitcast i64*** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %13, %16
  %18 = icmp eq i64 %17, 0
  %19 = shl i64 %17, 6
  %20 = add i64 %19, -1
  %21 = select i1 %18, i64 0, i64 %20
  %22 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 1
  %23 = load i64, i64* %22, align 8
  %24 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %25 = load i64, i64* %24, align 8
  %26 = add i64 %25, %23
  %27 = icmp eq i64 %21, %26
  %28 = inttoptr i64 %16 to i64**
  %29 = inttoptr i64 %13 to i64**
  br i1 %27, label %30, label %37

30:                                               ; preds = %9
  %31 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0
  tail call void @_ZNSt3__15dequeIlNS_9allocatorIlEEE19__add_back_capacityEv(%"class.std::__1::deque"* %31) #6
  %32 = load i64, i64* %24, align 8
  %33 = load i64, i64* %22, align 8
  %34 = load i64**, i64*** %14, align 8
  %35 = load i64**, i64*** %11, align 8
  %36 = add i64 %33, %32
  br label %37

37:                                               ; preds = %30, %9
  %38 = phi i64 [ %36, %30 ], [ %26, %9 ]
  %39 = phi i64** [ %35, %30 ], [ %29, %9 ]
  %40 = phi i64** [ %34, %30 ], [ %28, %9 ]
  %41 = icmp eq i64** %39, %40
  br i1 %41, label %48, label %42

42:                                               ; preds = %37
  %43 = lshr i64 %38, 9
  %44 = getelementptr inbounds i64*, i64** %40, i64 %43
  %45 = load i64*, i64** %44, align 8
  %46 = and i64 %38, 511
  %47 = getelementptr inbounds i64, i64* %45, i64 %46
  br label %48

48:                                               ; preds = %37, %42
  %49 = phi i64* [ %47, %42 ], [ null, %37 ]
  store i64 %2, i64* %49, align 8
  %50 = load i64, i64* %24, align 8
  %51 = add i64 %50, 1
  store i64 %51, i64* %24, align 8
  br label %300

52:                                               ; preds = %3
  %53 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 1
  %54 = load i64, i64* %53, align 8
  %55 = sub nsw i64 %1, %54
  %56 = icmp sgt i64 %55, -1
  %57 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0
  %58 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %59 = load i64, i64* %58, align 8
  br i1 %56, label %60, label %73

60:                                               ; preds = %52
  %61 = icmp sgt i64 %59, %55
  br i1 %61, label %62, label %102

62:                                               ; preds = %60
  %63 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 1
  %64 = load i64, i64* %63, align 8
  %65 = add i64 %64, %55
  %66 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %67 = load i64**, i64*** %66, align 8
  %68 = lshr i64 %65, 9
  %69 = getelementptr inbounds i64*, i64** %67, i64 %68
  %70 = load i64*, i64** %69, align 8
  %71 = and i64 %65, 511
  %72 = getelementptr inbounds i64, i64* %70, i64 %71
  store i64 %2, i64* %72, align 8
  br label %300

73:                                               ; preds = %52
  %74 = sub i64 %59, %55
  %75 = icmp ugt i64 %74, 32768
  br i1 %75, label %300, label %76

76:                                               ; preds = %73
  %77 = sub nsw i64 0, %55
  %78 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %79 = load i64**, i64*** %78, align 8
  %80 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 1
  %81 = load i64, i64* %80, align 8
  %82 = lshr i64 %81, 9
  %83 = getelementptr inbounds i64*, i64** %79, i64 %82
  %84 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %85 = load i64**, i64*** %84, align 8
  %86 = icmp eq i64** %85, %79
  br i1 %86, label %91, label %87

87:                                               ; preds = %76
  %88 = load i64*, i64** %83, align 8
  %89 = and i64 %81, 511
  %90 = getelementptr inbounds i64, i64* %88, i64 %89
  br label %91

91:                                               ; preds = %76, %87
  %92 = phi i64* [ %90, %87 ], [ null, %76 ]
  %93 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %93) #6
  store i64 0, i64* %4, align 8
  %94 = call { i64**, i64* } @_ZNSt3__15dequeIlNS_9allocatorIlEEE6insertENS_16__deque_iteratorIlPKlRS5_PKS6_lLl0EEEmS7_(%"class.std::__1::deque"* %57, i64** %83, i64* %92, i64 %77, i64* nonnull dereferenceable(8) %4)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %93) #6
  %95 = load i64, i64* %80, align 8
  %96 = load i64**, i64*** %78, align 8
  %97 = lshr i64 %95, 9
  %98 = getelementptr inbounds i64*, i64** %96, i64 %97
  %99 = load i64*, i64** %98, align 8
  %100 = and i64 %95, 511
  %101 = getelementptr inbounds i64, i64* %99, i64 %100
  store i64 %2, i64* %101, align 8
  store i64 %1, i64* %53, align 8
  br label %300

102:                                              ; preds = %60
  %103 = icmp ugt i64 %55, 32767
  br i1 %103, label %104, label %235

104:                                              ; preds = %102
  %105 = add nsw i64 %55, -32767
  %106 = icmp ult i64 %105, %59
  br i1 %106, label %107, label %112

107:                                              ; preds = %104
  %108 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 1
  %109 = load i64, i64* %108, align 8
  %110 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %111 = load i64**, i64*** %110, align 8
  br label %175

112:                                              ; preds = %104
  %113 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %114 = load i64**, i64*** %113, align 8
  %115 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 1
  %116 = load i64, i64* %115, align 8
  %117 = lshr i64 %116, 9
  %118 = getelementptr inbounds i64*, i64** %114, i64 %117
  %119 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %120 = load i64**, i64*** %119, align 8
  %121 = icmp eq i64** %120, %114
  %122 = ptrtoint i64** %120 to i64
  %123 = ptrtoint i64** %114 to i64
  br i1 %121, label %135, label %124

124:                                              ; preds = %112
  %125 = load i64*, i64** %118, align 8
  %126 = and i64 %116, 511
  %127 = getelementptr inbounds i64, i64* %125, i64 %126
  %128 = add i64 %116, %59
  %129 = lshr i64 %128, 9
  %130 = getelementptr inbounds i64*, i64** %114, i64 %129
  %131 = load i64*, i64** %130, align 8
  %132 = and i64 %128, 511
  %133 = getelementptr inbounds i64, i64* %131, i64 %132
  %134 = icmp eq i64* %133, %127
  br i1 %134, label %135, label %140

135:                                              ; preds = %153, %112, %124
  store i64 0, i64* %58, align 8
  %136 = bitcast i64*** %119 to i64*
  %137 = sub i64 %122, %123
  %138 = ashr exact i64 %137, 3
  %139 = icmp ugt i64 %138, 2
  br i1 %139, label %158, label %169

140:                                              ; preds = %124, %153
  %141 = phi i64* [ %156, %153 ], [ %127, %124 ]
  %142 = phi i64** [ %155, %153 ], [ %118, %124 ]
  %143 = getelementptr inbounds i64, i64* %141, i64 1
  %144 = ptrtoint i64* %143 to i64
  %145 = bitcast i64** %142 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = sub i64 %144, %146
  %148 = icmp eq i64 %147, 4096
  br i1 %148, label %149, label %153

149:                                              ; preds = %140
  %150 = getelementptr inbounds i64*, i64** %142, i64 1
  %151 = bitcast i64** %150 to i64*
  %152 = load i64, i64* %151, align 8
  br label %153

153:                                              ; preds = %149, %140
  %154 = phi i64 [ %152, %149 ], [ %144, %140 ]
  %155 = phi i64** [ %150, %149 ], [ %142, %140 ]
  %156 = inttoptr i64 %154 to i64*
  %157 = icmp eq i64* %133, %156
  br i1 %157, label %135, label %140

158:                                              ; preds = %135, %158
  %159 = phi i64** [ %163, %158 ], [ %114, %135 ]
  %160 = bitcast i64** %159 to i8**
  %161 = load i8*, i8** %160, align 8
  tail call void @_ZdlPv(i8* %161) #7
  %162 = load i64**, i64*** %113, align 8
  %163 = getelementptr inbounds i64*, i64** %162, i64 1
  store i64** %163, i64*** %113, align 8
  %164 = load i64, i64* %136, align 8
  %165 = ptrtoint i64** %163 to i64
  %166 = sub i64 %164, %165
  %167 = ashr exact i64 %166, 3
  %168 = icmp ugt i64 %167, 2
  br i1 %168, label %158, label %169

169:                                              ; preds = %158, %135
  %170 = phi i64 [ %138, %135 ], [ %167, %158 ]
  switch i64 %170, label %174 [
    i64 1, label %172
    i64 2, label %171
  ]

171:                                              ; preds = %169
  br label %172

172:                                              ; preds = %169, %171
  %173 = phi i64 [ 512, %171 ], [ 256, %169 ]
  store i64 %173, i64* %115, align 8
  br label %174

174:                                              ; preds = %172, %169
  store i64 %1, i64* %53, align 8
  br label %235

175:                                              ; preds = %185, %107
  %176 = phi i64 [ %105, %107 ], [ %186, %185 ]
  %177 = add i64 %109, %176
  %178 = lshr i64 %177, 9
  %179 = getelementptr inbounds i64*, i64** %111, i64 %178
  %180 = load i64*, i64** %179, align 8
  %181 = and i64 %177, 511
  %182 = getelementptr inbounds i64, i64* %180, i64 %181
  %183 = load i64, i64* %182, align 8
  %184 = icmp eq i64 %183, 0
  br i1 %184, label %185, label %188

185:                                              ; preds = %175
  %186 = add i64 %176, 1
  %187 = icmp eq i64 %186, %59
  br i1 %187, label %188, label %175

188:                                              ; preds = %185, %175
  %189 = phi i64 [ %59, %185 ], [ %176, %175 ]
  %190 = lshr i64 %109, 9
  %191 = getelementptr inbounds i64*, i64** %111, i64 %190
  %192 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %193 = load i64**, i64*** %192, align 8
  %194 = icmp eq i64** %193, %111
  br i1 %194, label %200, label %195

195:                                              ; preds = %188
  %196 = load i64*, i64** %191, align 8
  %197 = and i64 %109, 511
  %198 = getelementptr inbounds i64, i64* %196, i64 %197
  %199 = ptrtoint i64* %198 to i64
  br label %200

200:                                              ; preds = %188, %195
  %201 = phi i64* [ %198, %195 ], [ null, %188 ]
  %202 = phi i64 [ %199, %195 ], [ 0, %188 ]
  %203 = icmp eq i64 %189, 0
  br i1 %203, label %227, label %204

204:                                              ; preds = %200
  %205 = bitcast i64** %191 to i64*
  %206 = load i64, i64* %205, align 8
  %207 = sub i64 %202, %206
  %208 = ashr exact i64 %207, 3
  %209 = add nsw i64 %208, %189
  %210 = icmp sgt i64 %209, 0
  br i1 %210, label %211, label %218

211:                                              ; preds = %204
  %212 = lshr i64 %209, 9
  %213 = getelementptr inbounds i64*, i64** %191, i64 %212
  %214 = load i64*, i64** %213, align 8
  %215 = and i64 %209, 511
  %216 = getelementptr inbounds i64, i64* %214, i64 %215
  %217 = ptrtoint i64* %216 to i64
  br label %227

218:                                              ; preds = %204
  %219 = sub nsw i64 511, %209
  %220 = sdiv i64 %219, -512
  %221 = getelementptr inbounds i64*, i64** %191, i64 %220
  %222 = load i64*, i64** %221, align 8
  %223 = srem i64 %219, 512
  %224 = sub nsw i64 511, %223
  %225 = getelementptr inbounds i64, i64* %222, i64 %224
  %226 = ptrtoint i64* %225 to i64
  br label %227

227:                                              ; preds = %200, %211, %218
  %228 = phi i64 [ %202, %200 ], [ %217, %211 ], [ %226, %218 ]
  %229 = phi i64** [ %191, %200 ], [ %213, %211 ], [ %221, %218 ]
  %230 = inttoptr i64 %228 to i64*
  %231 = tail call { i64**, i64* } @_ZNSt3__15dequeIlNS_9allocatorIlEEE5eraseENS_16__deque_iteratorIlPKlRS5_PKS6_lLl0EEESA_(%"class.std::__1::deque"* %57, i64** %191, i64* %201, i64** %229, i64* %230)
  %232 = load i64, i64* %53, align 8
  %233 = add i64 %232, %189
  store i64 %233, i64* %53, align 8
  %234 = sub i64 %55, %189
  br label %235

235:                                              ; preds = %174, %227, %102
  %236 = phi i64 [ %55, %102 ], [ 0, %174 ], [ %234, %227 ]
  %237 = load i64, i64* %58, align 8
  %238 = sub i64 %236, %237
  %239 = icmp eq i64 %238, 0
  br i1 %239, label %260, label %240

240:                                              ; preds = %235
  %241 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 1
  %242 = load i64, i64* %241, align 8
  %243 = add i64 %242, %237
  %244 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %245 = load i64**, i64*** %244, align 8
  %246 = lshr i64 %243, 9
  %247 = getelementptr inbounds i64*, i64** %245, i64 %246
  %248 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %249 = load i64**, i64*** %248, align 8
  %250 = icmp eq i64** %249, %245
  br i1 %250, label %255, label %251

251:                                              ; preds = %240
  %252 = load i64*, i64** %247, align 8
  %253 = and i64 %243, 511
  %254 = getelementptr inbounds i64, i64* %252, i64 %253
  br label %255

255:                                              ; preds = %240, %251
  %256 = phi i64* [ %254, %251 ], [ null, %240 ]
  %257 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %257) #6
  store i64 0, i64* %5, align 8
  %258 = call { i64**, i64* } @_ZNSt3__15dequeIlNS_9allocatorIlEEE6insertENS_16__deque_iteratorIlPKlRS5_PKS6_lLl0EEEmS7_(%"class.std::__1::deque"* %57, i64** %247, i64* %256, i64 %238, i64* nonnull dereferenceable(8) %5)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %257) #6
  %259 = load i64, i64* %58, align 8
  br label %260

260:                                              ; preds = %235, %255
  %261 = phi i64 [ %237, %235 ], [ %259, %255 ]
  %262 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %263 = bitcast i64*** %262 to i64*
  %264 = load i64, i64* %263, align 8
  %265 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %266 = bitcast i64*** %265 to i64*
  %267 = load i64, i64* %266, align 8
  %268 = sub i64 %264, %267
  %269 = icmp eq i64 %268, 0
  %270 = shl i64 %268, 6
  %271 = add i64 %270, -1
  %272 = select i1 %269, i64 0, i64 %271
  %273 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 1
  %274 = load i64, i64* %273, align 8
  %275 = add i64 %261, %274
  %276 = icmp eq i64 %272, %275
  %277 = inttoptr i64 %267 to i64**
  %278 = inttoptr i64 %264 to i64**
  br i1 %276, label %279, label %285

279:                                              ; preds = %260
  call void @_ZNSt3__15dequeIlNS_9allocatorIlEEE19__add_back_capacityEv(%"class.std::__1::deque"* %57) #6
  %280 = load i64, i64* %58, align 8
  %281 = load i64, i64* %273, align 8
  %282 = load i64**, i64*** %265, align 8
  %283 = load i64**, i64*** %262, align 8
  %284 = add i64 %281, %280
  br label %285

285:                                              ; preds = %279, %260
  %286 = phi i64 [ %284, %279 ], [ %275, %260 ]
  %287 = phi i64** [ %283, %279 ], [ %278, %260 ]
  %288 = phi i64** [ %282, %279 ], [ %277, %260 ]
  %289 = icmp eq i64** %287, %288
  br i1 %289, label %296, label %290

290:                                              ; preds = %285
  %291 = lshr i64 %286, 9
  %292 = getelementptr inbounds i64*, i64** %288, i64 %291
  %293 = load i64*, i64** %292, align 8
  %294 = and i64 %286, 511
  %295 = getelementptr inbounds i64, i64* %293, i64 %294
  br label %296

296:                                              ; preds = %285, %290
  %297 = phi i64* [ %295, %290 ], [ null, %285 ]
  store i64 %2, i64* %297, align 8
  %298 = load i64, i64* %58, align 8
  %299 = add i64 %298, 1
  store i64 %299, i64* %58, align 8
  br label %300

300:                                              ; preds = %62, %296, %73, %91, %48
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64**, i64* } @_ZNSt3__15dequeIlNS_9allocatorIlEEE6insertENS_16__deque_iteratorIlPKlRS5_PKS6_lLl0EEEmS7_(%"class.std::__1::deque"*, i64**, i64*, i64, i64* dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %6 = alloca i64*, align 8
  %7 = alloca %"class.std::__1::__deque_iterator", align 8
  %8 = alloca %"class.std::__1::__deque_iterator", align 8
  %9 = alloca i64*, align 8
  %10 = alloca %"class.std::__1::__deque_iterator", align 8
  %11 = alloca %"class.std::__1::__deque_iterator", align 8
  %12 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %13 = load i64**, i64*** %12, align 8
  %14 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %15 = load i64, i64* %14, align 8
  %16 = lshr i64 %15, 9
  %17 = getelementptr inbounds i64*, i64** %13, i64 %16
  %18 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %19 = load i64**, i64*** %18, align 8
  %20 = icmp eq i64** %19, %13
  %21 = ptrtoint i64** %19 to i64
  %22 = ptrtoint i64** %13 to i64
  br i1 %20, label %27, label %23

23:                                               ; preds = %5
  %24 = load i64*, i64** %17, align 8
  %25 = and i64 %15, 511
  %26 = getelementptr inbounds i64, i64* %24, i64 %25
  br label %27

27:                                               ; preds = %5, %23
  %28 = phi i64* [ %26, %23 ], [ null, %5 ]
  %29 = icmp eq i64* %28, %2
  br i1 %29, label %47, label %30

30:                                               ; preds = %27
  %31 = ptrtoint i64* %28 to i64
  %32 = ptrtoint i64** %17 to i64
  %33 = ptrtoint i64* %2 to i64
  %34 = ptrtoint i64** %1 to i64
  %35 = sub i64 %34, %32
  %36 = shl i64 %35, 6
  %37 = bitcast i64** %1 to i64*
  %38 = load i64, i64* %37, align 8
  %39 = sub i64 %33, %38
  %40 = ashr exact i64 %39, 3
  %41 = add nsw i64 %40, %36
  %42 = bitcast i64** %17 to i64*
  %43 = load i64, i64* %42, align 8
  %44 = sub i64 %31, %43
  %45 = ashr exact i64 %44, 3
  %46 = sub i64 %41, %45
  br label %47

47:                                               ; preds = %27, %30
  %48 = phi i64 [ %46, %30 ], [ 0, %27 ]
  %49 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %50 = load i64, i64* %49, align 8
  %51 = sub i64 %50, %48
  %52 = icmp ult i64 %48, %51
  br i1 %52, label %53, label %249

53:                                               ; preds = %47
  %54 = icmp ult i64 %15, %3
  br i1 %54, label %55, label %61

55:                                               ; preds = %53
  %56 = sub i64 %3, %15
  tail call void @_ZNSt3__15dequeIlNS_9allocatorIlEEE20__add_front_capacityEm(%"class.std::__1::deque"* %0, i64 %56)
  %57 = load i64**, i64*** %12, align 8
  %58 = load i64, i64* %14, align 8
  %59 = load i64**, i64*** %18, align 8
  %60 = lshr i64 %58, 9
  br label %61

61:                                               ; preds = %55, %53
  %62 = phi i64 [ %60, %55 ], [ %16, %53 ]
  %63 = phi i64** [ %59, %55 ], [ %19, %53 ]
  %64 = phi i64 [ %58, %55 ], [ %15, %53 ]
  %65 = phi i64** [ %57, %55 ], [ %13, %53 ]
  %66 = getelementptr inbounds i64*, i64** %65, i64 %62
  %67 = icmp eq i64** %63, %65
  br i1 %67, label %72, label %68

68:                                               ; preds = %61
  %69 = load i64*, i64** %66, align 8
  %70 = and i64 %64, 511
  %71 = getelementptr inbounds i64, i64* %69, i64 %70
  br label %72

72:                                               ; preds = %61, %68
  %73 = phi i64* [ %71, %68 ], [ null, %61 ]
  %74 = ptrtoint i64* %73 to i64
  %75 = icmp ult i64 %48, %3
  br i1 %75, label %76, label %132

76:                                               ; preds = %72
  %77 = sub i64 %3, %48
  %78 = icmp eq i64 %77, 0
  br i1 %78, label %132, label %79

79:                                               ; preds = %76
  %80 = xor i64 %48, -1
  %81 = and i64 %77, 1
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %100, label %83

83:                                               ; preds = %79
  %84 = load i64*, i64** %66, align 8
  %85 = icmp eq i64* %73, %84
  br i1 %85, label %86, label %90

86:                                               ; preds = %83
  %87 = getelementptr inbounds i64*, i64** %66, i64 -1
  %88 = load i64*, i64** %87, align 8
  %89 = getelementptr inbounds i64, i64* %88, i64 512
  br label %90

90:                                               ; preds = %86, %83
  %91 = phi i64** [ %87, %86 ], [ %66, %83 ]
  %92 = phi i64* [ %89, %86 ], [ %73, %83 ]
  %93 = getelementptr inbounds i64, i64* %92, i64 -1
  %94 = load i64, i64* %4, align 8
  store i64 %94, i64* %93, align 8
  %95 = add i64 %77, -1
  %96 = bitcast i64* %14 to <2 x i64>*
  %97 = load <2 x i64>, <2 x i64>* %96, align 8
  %98 = add <2 x i64> %97, <i64 -1, i64 1>
  %99 = bitcast i64* %14 to <2 x i64>*
  store <2 x i64> %98, <2 x i64>* %99, align 8
  br label %100

100:                                              ; preds = %79, %90
  %101 = phi i64** [ undef, %79 ], [ %91, %90 ]
  %102 = phi i64* [ undef, %79 ], [ %93, %90 ]
  %103 = phi i64 [ %77, %79 ], [ %95, %90 ]
  %104 = phi i64** [ %66, %79 ], [ %91, %90 ]
  %105 = phi i64* [ %73, %79 ], [ %93, %90 ]
  %106 = sub i64 0, %3
  %107 = icmp eq i64 %80, %106
  br i1 %107, label %132, label %108

108:                                              ; preds = %100
  %109 = bitcast i64* %14 to <2 x i64>*
  %110 = bitcast i64* %14 to <2 x i64>*
  %111 = bitcast i64* %14 to <2 x i64>*
  %112 = bitcast i64* %14 to <2 x i64>*
  br label %113

113:                                              ; preds = %541, %108
  %114 = phi i64 [ %103, %108 ], [ %546, %541 ]
  %115 = phi i64** [ %104, %108 ], [ %542, %541 ]
  %116 = phi i64* [ %105, %108 ], [ %544, %541 ]
  %117 = load i64*, i64** %115, align 8
  %118 = icmp eq i64* %116, %117
  br i1 %118, label %119, label %123

119:                                              ; preds = %113
  %120 = getelementptr inbounds i64*, i64** %115, i64 -1
  %121 = load i64*, i64** %120, align 8
  %122 = getelementptr inbounds i64, i64* %121, i64 512
  br label %123

123:                                              ; preds = %113, %119
  %124 = phi i64** [ %120, %119 ], [ %115, %113 ]
  %125 = phi i64* [ %122, %119 ], [ %116, %113 ]
  %126 = getelementptr inbounds i64, i64* %125, i64 -1
  %127 = load i64, i64* %4, align 8
  store i64 %127, i64* %126, align 8
  %128 = load <2 x i64>, <2 x i64>* %109, align 8
  %129 = add <2 x i64> %128, <i64 -1, i64 1>
  store <2 x i64> %129, <2 x i64>* %110, align 8
  %130 = load i64*, i64** %124, align 8
  %131 = icmp eq i64* %126, %130
  br i1 %131, label %537, label %541

132:                                              ; preds = %100, %541, %76, %72
  %133 = phi i64* [ %73, %72 ], [ %73, %76 ], [ %102, %100 ], [ %544, %541 ]
  %134 = phi i64** [ %66, %72 ], [ %66, %76 ], [ %101, %100 ], [ %542, %541 ]
  %135 = phi i64 [ %3, %72 ], [ %48, %76 ], [ %48, %541 ], [ %48, %100 ]
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %484, label %137

137:                                              ; preds = %132
  %138 = bitcast i64** %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %138) #6
  store i64* %4, i64** %6, align 8
  %139 = bitcast i64** %66 to i64*
  %140 = load i64, i64* %139, align 8
  %141 = sub i64 %74, %140
  %142 = ashr exact i64 %141, 3
  %143 = add nsw i64 %142, %135
  %144 = icmp sgt i64 %143, 0
  br i1 %144, label %145, label %151

145:                                              ; preds = %137
  %146 = lshr i64 %143, 9
  %147 = getelementptr inbounds i64*, i64** %66, i64 %146
  %148 = load i64*, i64** %147, align 8
  %149 = and i64 %143, 511
  %150 = getelementptr inbounds i64, i64* %148, i64 %149
  br label %159

151:                                              ; preds = %137
  %152 = sub nsw i64 511, %143
  %153 = sdiv i64 %152, -512
  %154 = getelementptr inbounds i64*, i64** %66, i64 %153
  %155 = load i64*, i64** %154, align 8
  %156 = srem i64 %152, 512
  %157 = sub nsw i64 511, %156
  %158 = getelementptr inbounds i64, i64* %155, i64 %157
  br label %159

159:                                              ; preds = %145, %151
  %160 = phi i64* [ %150, %145 ], [ %158, %151 ]
  %161 = phi i64** [ %147, %145 ], [ %154, %151 ]
  %162 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %7, i64 0, i32 0
  store i64** %134, i64*** %162, align 8
  %163 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %7, i64 0, i32 1
  store i64* %133, i64** %163, align 8
  call void @_ZNSt3__15dequeIlNS_9allocatorIlEEE35__move_construct_backward_and_checkENS_16__deque_iteratorIlPlRlPS5_lLl0EEES8_S8_RPKl(%"class.std::__1::deque"* %0, i64** %66, i64* %73, i64** %161, i64* %160, %"class.std::__1::__deque_iterator"* nonnull byval(%"class.std::__1::__deque_iterator") align 8 %7, i64** nonnull dereferenceable(8) %6)
  %164 = icmp ult i64 %135, %48
  br i1 %164, label %165, label %195

165:                                              ; preds = %159
  %166 = load i64, i64* %139, align 8
  %167 = sub i64 %74, %166
  %168 = ashr exact i64 %167, 3
  %169 = add nsw i64 %168, %48
  %170 = icmp sgt i64 %169, 0
  br i1 %170, label %171, label %177

171:                                              ; preds = %165
  %172 = lshr i64 %169, 9
  %173 = getelementptr inbounds i64*, i64** %66, i64 %172
  %174 = load i64*, i64** %173, align 8
  %175 = and i64 %169, 511
  %176 = getelementptr inbounds i64, i64* %174, i64 %175
  br label %185

177:                                              ; preds = %165
  %178 = sub nsw i64 511, %169
  %179 = sdiv i64 %178, -512
  %180 = getelementptr inbounds i64*, i64** %66, i64 %179
  %181 = load i64*, i64** %180, align 8
  %182 = srem i64 %178, 512
  %183 = sub nsw i64 511, %182
  %184 = getelementptr inbounds i64, i64* %181, i64 %183
  br label %185

185:                                              ; preds = %171, %177
  %186 = phi i64* [ %176, %171 ], [ %184, %177 ]
  %187 = phi i64** [ %173, %171 ], [ %180, %177 ]
  %188 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %8, i64 0, i32 0
  store i64** %66, i64*** %188, align 8
  %189 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %8, i64 0, i32 1
  %190 = bitcast i64** %189 to i64*
  store i64 %74, i64* %190, align 8
  %191 = call { i64**, i64* } @_ZNSt3__15dequeIlNS_9allocatorIlEEE16__move_and_checkENS_16__deque_iteratorIlPlRlPS5_lLl0EEES8_S8_RPKl(%"class.std::__1::deque"* %0, i64** %161, i64* %160, i64** %187, i64* %186, %"class.std::__1::__deque_iterator"* nonnull byval(%"class.std::__1::__deque_iterator") align 8 %8, i64** nonnull dereferenceable(8) %6)
  %192 = extractvalue { i64**, i64* } %191, 0
  %193 = extractvalue { i64**, i64* } %191, 1
  %194 = ptrtoint i64* %193 to i64
  br label %195

195:                                              ; preds = %185, %159
  %196 = phi i64** [ %192, %185 ], [ %66, %159 ]
  %197 = phi i64 [ %194, %185 ], [ %74, %159 ]
  %198 = load i64*, i64** %6, align 8
  %199 = and i64 %135, 1
  %200 = icmp eq i64 %199, 0
  br i1 %200, label %218, label %201

201:                                              ; preds = %195
  %202 = inttoptr i64 %197 to i64*
  %203 = load i64, i64* %198, align 8
  store i64 %203, i64* %202, align 8
  %204 = getelementptr inbounds i64, i64* %202, i64 1
  %205 = ptrtoint i64* %204 to i64
  %206 = bitcast i64** %196 to i64*
  %207 = load i64, i64* %206, align 8
  %208 = sub i64 %205, %207
  %209 = icmp eq i64 %208, 4096
  br i1 %209, label %210, label %214

210:                                              ; preds = %201
  %211 = getelementptr inbounds i64*, i64** %196, i64 1
  %212 = bitcast i64** %211 to i64*
  %213 = load i64, i64* %212, align 8
  br label %214

214:                                              ; preds = %210, %201
  %215 = phi i64 [ %213, %210 ], [ %205, %201 ]
  %216 = phi i64** [ %211, %210 ], [ %196, %201 ]
  %217 = add i64 %135, -1
  br label %218

218:                                              ; preds = %195, %214
  %219 = phi i64 [ %135, %195 ], [ %217, %214 ]
  %220 = phi i64** [ %196, %195 ], [ %216, %214 ]
  %221 = phi i64 [ %197, %195 ], [ %215, %214 ]
  %222 = icmp eq i64 %135, 1
  br i1 %222, label %248, label %223

223:                                              ; preds = %218, %532
  %224 = phi i64 [ %535, %532 ], [ %219, %218 ]
  %225 = phi i64** [ %534, %532 ], [ %220, %218 ]
  %226 = phi i64 [ %533, %532 ], [ %221, %218 ]
  %227 = inttoptr i64 %226 to i64*
  %228 = load i64, i64* %198, align 8
  store i64 %228, i64* %227, align 8
  %229 = getelementptr inbounds i64, i64* %227, i64 1
  %230 = ptrtoint i64* %229 to i64
  %231 = bitcast i64** %225 to i64*
  %232 = load i64, i64* %231, align 8
  %233 = sub i64 %230, %232
  %234 = icmp eq i64 %233, 4096
  br i1 %234, label %235, label %238

235:                                              ; preds = %223
  %236 = getelementptr inbounds i64*, i64** %225, i64 1
  %237 = load i64*, i64** %236, align 8
  br label %238

238:                                              ; preds = %235, %223
  %239 = phi i64* [ %237, %235 ], [ %229, %223 ]
  %240 = phi i64** [ %236, %235 ], [ %225, %223 ]
  %241 = load i64, i64* %198, align 8
  store i64 %241, i64* %239, align 8
  %242 = getelementptr inbounds i64, i64* %239, i64 1
  %243 = ptrtoint i64* %242 to i64
  %244 = bitcast i64** %240 to i64*
  %245 = load i64, i64* %244, align 8
  %246 = sub i64 %243, %245
  %247 = icmp eq i64 %246, 4096
  br i1 %247, label %528, label %532

248:                                              ; preds = %532, %218
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %138) #6
  br label %484

249:                                              ; preds = %47
  %250 = sub i64 %21, %22
  %251 = icmp eq i64 %250, 0
  %252 = shl i64 %250, 6
  %253 = add i64 %252, -1
  %254 = select i1 %251, i64 0, i64 %253
  %255 = add i64 %50, %15
  %256 = sub i64 %254, %255
  %257 = icmp ult i64 %256, %3
  br i1 %257, label %258, label %265

258:                                              ; preds = %249
  %259 = sub i64 %3, %256
  tail call void @_ZNSt3__15dequeIlNS_9allocatorIlEEE19__add_back_capacityEm(%"class.std::__1::deque"* %0, i64 %259)
  %260 = load i64, i64* %49, align 8
  %261 = load i64, i64* %14, align 8
  %262 = load i64**, i64*** %12, align 8
  %263 = load i64**, i64*** %18, align 8
  %264 = add i64 %261, %260
  br label %265

265:                                              ; preds = %258, %249
  %266 = phi i64 [ %264, %258 ], [ %255, %249 ]
  %267 = phi i64** [ %263, %258 ], [ %19, %249 ]
  %268 = phi i64** [ %262, %258 ], [ %13, %249 ]
  %269 = phi i64 [ %260, %258 ], [ %50, %249 ]
  %270 = lshr i64 %266, 9
  %271 = getelementptr inbounds i64*, i64** %268, i64 %270
  %272 = icmp eq i64** %267, %268
  br i1 %272, label %277, label %273

273:                                              ; preds = %265
  %274 = load i64*, i64** %271, align 8
  %275 = and i64 %266, 511
  %276 = getelementptr inbounds i64, i64* %274, i64 %275
  br label %277

277:                                              ; preds = %265, %273
  %278 = phi i64* [ %276, %273 ], [ null, %265 ]
  %279 = ptrtoint i64* %278 to i64
  %280 = sub i64 %269, %48
  %281 = icmp ult i64 %280, %3
  br i1 %281, label %282, label %343

282:                                              ; preds = %277
  %283 = sub i64 %3, %280
  %284 = icmp eq i64 %283, 0
  br i1 %284, label %343, label %285

285:                                              ; preds = %282
  %286 = add i64 %48, %3
  %287 = and i64 %283, 1
  %288 = icmp eq i64 %287, 0
  br i1 %288, label %308, label %289

289:                                              ; preds = %285
  %290 = load i64, i64* %4, align 8
  store i64 %290, i64* %278, align 8
  %291 = add i64 %283, -1
  %292 = getelementptr inbounds i64, i64* %278, i64 1
  %293 = ptrtoint i64* %292 to i64
  %294 = bitcast i64** %271 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = sub i64 %293, %295
  %297 = icmp eq i64 %296, 4096
  br i1 %297, label %298, label %302

298:                                              ; preds = %289
  %299 = getelementptr inbounds i64*, i64** %271, i64 1
  %300 = bitcast i64** %299 to i64*
  %301 = load i64, i64* %300, align 8
  br label %302

302:                                              ; preds = %298, %289
  %303 = phi i64 [ %301, %298 ], [ %293, %289 ]
  %304 = phi i64** [ %299, %298 ], [ %271, %289 ]
  %305 = inttoptr i64 %303 to i64*
  %306 = load i64, i64* %49, align 8
  %307 = add i64 %306, 1
  store i64 %307, i64* %49, align 8
  br label %308

308:                                              ; preds = %285, %302
  %309 = phi i64 [ undef, %285 ], [ %303, %302 ]
  %310 = phi i64** [ undef, %285 ], [ %304, %302 ]
  %311 = phi i64 [ %283, %285 ], [ %291, %302 ]
  %312 = phi i64** [ %271, %285 ], [ %304, %302 ]
  %313 = phi i64* [ %278, %285 ], [ %305, %302 ]
  %314 = add i64 %269, 1
  %315 = icmp eq i64 %286, %314
  br i1 %315, label %343, label %316

316:                                              ; preds = %308, %564
  %317 = phi i64 [ %336, %564 ], [ %311, %308 ]
  %318 = phi i64** [ %566, %564 ], [ %312, %308 ]
  %319 = phi i64* [ %567, %564 ], [ %313, %308 ]
  %320 = load i64, i64* %4, align 8
  store i64 %320, i64* %319, align 8
  %321 = getelementptr inbounds i64, i64* %319, i64 1
  %322 = ptrtoint i64* %321 to i64
  %323 = bitcast i64** %318 to i64*
  %324 = load i64, i64* %323, align 8
  %325 = sub i64 %322, %324
  %326 = icmp eq i64 %325, 4096
  br i1 %326, label %327, label %330

327:                                              ; preds = %316
  %328 = getelementptr inbounds i64*, i64** %318, i64 1
  %329 = load i64*, i64** %328, align 8
  br label %330

330:                                              ; preds = %316, %327
  %331 = phi i64* [ %329, %327 ], [ %321, %316 ]
  %332 = phi i64** [ %328, %327 ], [ %318, %316 ]
  %333 = load i64, i64* %49, align 8
  %334 = add i64 %333, 1
  store i64 %334, i64* %49, align 8
  %335 = load i64, i64* %4, align 8
  store i64 %335, i64* %331, align 8
  %336 = add i64 %317, -2
  %337 = getelementptr inbounds i64, i64* %331, i64 1
  %338 = ptrtoint i64* %337 to i64
  %339 = bitcast i64** %332 to i64*
  %340 = load i64, i64* %339, align 8
  %341 = sub i64 %338, %340
  %342 = icmp eq i64 %341, 4096
  br i1 %342, label %560, label %564

343:                                              ; preds = %308, %564, %282, %277
  %344 = phi i64 [ %279, %277 ], [ %279, %282 ], [ %309, %308 ], [ %565, %564 ]
  %345 = phi i64** [ %271, %277 ], [ %271, %282 ], [ %310, %308 ], [ %566, %564 ]
  %346 = phi i64 [ %3, %277 ], [ %280, %282 ], [ %280, %564 ], [ %280, %308 ]
  %347 = icmp eq i64 %346, 0
  br i1 %347, label %484, label %348

348:                                              ; preds = %343
  %349 = bitcast i64** %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %349) #6
  store i64* %4, i64** %9, align 8
  %350 = bitcast i64** %271 to i64*
  %351 = load i64, i64* %350, align 8
  %352 = sub i64 %279, %351
  %353 = ashr exact i64 %352, 3
  %354 = sub i64 %353, %346
  %355 = icmp sgt i64 %354, 0
  br i1 %355, label %356, label %362

356:                                              ; preds = %348
  %357 = lshr i64 %354, 9
  %358 = getelementptr inbounds i64*, i64** %271, i64 %357
  %359 = load i64*, i64** %358, align 8
  %360 = and i64 %354, 511
  %361 = getelementptr inbounds i64, i64* %359, i64 %360
  br label %370

362:                                              ; preds = %348
  %363 = sub nsw i64 511, %354
  %364 = sdiv i64 %363, -512
  %365 = getelementptr inbounds i64*, i64** %271, i64 %364
  %366 = load i64*, i64** %365, align 8
  %367 = srem i64 %363, 512
  %368 = sub nsw i64 511, %367
  %369 = getelementptr inbounds i64, i64* %366, i64 %368
  br label %370

370:                                              ; preds = %356, %362
  %371 = phi i64* [ %361, %356 ], [ %369, %362 ]
  %372 = phi i64** [ %358, %356 ], [ %365, %362 ]
  %373 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %10, i64 0, i32 0
  store i64** %345, i64*** %373, align 8
  %374 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %10, i64 0, i32 1
  %375 = bitcast i64** %374 to i64*
  store i64 %344, i64* %375, align 8
  call void @_ZNSt3__15dequeIlNS_9allocatorIlEEE26__move_construct_and_checkENS_16__deque_iteratorIlPlRlPS5_lLl0EEES8_S8_RPKl(%"class.std::__1::deque"* %0, i64** %372, i64* %371, i64** %271, i64* %278, %"class.std::__1::__deque_iterator"* nonnull byval(%"class.std::__1::__deque_iterator") align 8 %10, i64** nonnull dereferenceable(8) %9)
  %376 = icmp ult i64 %346, %280
  br i1 %376, label %377, label %408

377:                                              ; preds = %370
  %378 = load i64, i64* %350, align 8
  %379 = sub i64 %279, %378
  %380 = ashr exact i64 %379, 3
  %381 = sub i64 %380, %280
  %382 = icmp sgt i64 %381, 0
  br i1 %382, label %383, label %389

383:                                              ; preds = %377
  %384 = lshr i64 %381, 9
  %385 = getelementptr inbounds i64*, i64** %271, i64 %384
  %386 = load i64*, i64** %385, align 8
  %387 = and i64 %381, 511
  %388 = getelementptr inbounds i64, i64* %386, i64 %387
  br label %397

389:                                              ; preds = %377
  %390 = sub nsw i64 511, %381
  %391 = sdiv i64 %390, -512
  %392 = getelementptr inbounds i64*, i64** %271, i64 %391
  %393 = load i64*, i64** %392, align 8
  %394 = srem i64 %390, 512
  %395 = sub nsw i64 511, %394
  %396 = getelementptr inbounds i64, i64* %393, i64 %395
  br label %397

397:                                              ; preds = %383, %389
  %398 = phi i64* [ %388, %383 ], [ %396, %389 ]
  %399 = phi i64** [ %385, %383 ], [ %392, %389 ]
  %400 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %11, i64 0, i32 0
  store i64** %271, i64*** %400, align 8
  %401 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %11, i64 0, i32 1
  %402 = bitcast i64** %401 to i64*
  store i64 %279, i64* %402, align 8
  %403 = call { i64**, i64* } @_ZNSt3__15dequeIlNS_9allocatorIlEEE25__move_backward_and_checkENS_16__deque_iteratorIlPlRlPS5_lLl0EEES8_S8_RPKl(%"class.std::__1::deque"* %0, i64** %399, i64* %398, i64** %372, i64* %371, %"class.std::__1::__deque_iterator"* nonnull byval(%"class.std::__1::__deque_iterator") align 8 %11, i64** nonnull dereferenceable(8) %9)
  %404 = extractvalue { i64**, i64* } %403, 0
  %405 = extractvalue { i64**, i64* } %403, 1
  %406 = ptrtoint i64* %405 to i64
  %407 = bitcast i64** %404 to i64*
  br label %408

408:                                              ; preds = %370, %397
  %409 = phi i64* [ %350, %370 ], [ %407, %397 ]
  %410 = phi i64 [ %279, %370 ], [ %406, %397 ]
  %411 = phi i64** [ %271, %370 ], [ %404, %397 ]
  %412 = load i64, i64* %409, align 8
  %413 = sub i64 %410, %412
  %414 = ashr exact i64 %413, 3
  %415 = sub i64 %414, %346
  %416 = icmp sgt i64 %415, 0
  br i1 %416, label %417, label %423

417:                                              ; preds = %408
  %418 = lshr i64 %415, 9
  %419 = getelementptr inbounds i64*, i64** %411, i64 %418
  %420 = load i64*, i64** %419, align 8
  %421 = and i64 %415, 511
  %422 = getelementptr inbounds i64, i64* %420, i64 %421
  br label %431

423:                                              ; preds = %408
  %424 = sub nsw i64 511, %415
  %425 = sdiv i64 %424, -512
  %426 = getelementptr inbounds i64*, i64** %411, i64 %425
  %427 = load i64*, i64** %426, align 8
  %428 = srem i64 %424, 512
  %429 = sub nsw i64 511, %428
  %430 = getelementptr inbounds i64, i64* %427, i64 %429
  br label %431

431:                                              ; preds = %417, %423
  %432 = phi i64* [ %422, %417 ], [ %430, %423 ]
  %433 = phi i64** [ %419, %417 ], [ %426, %423 ]
  %434 = load i64*, i64** %9, align 8
  %435 = and i64 %346, 1
  %436 = icmp eq i64 %435, 0
  br i1 %436, label %454, label %437

437:                                              ; preds = %431
  %438 = load i64, i64* %434, align 8
  store i64 %438, i64* %432, align 8
  %439 = getelementptr inbounds i64, i64* %432, i64 1
  %440 = ptrtoint i64* %439 to i64
  %441 = bitcast i64** %433 to i64*
  %442 = load i64, i64* %441, align 8
  %443 = sub i64 %440, %442
  %444 = icmp eq i64 %443, 4096
  br i1 %444, label %445, label %449

445:                                              ; preds = %437
  %446 = getelementptr inbounds i64*, i64** %433, i64 1
  %447 = bitcast i64** %446 to i64*
  %448 = load i64, i64* %447, align 8
  br label %449

449:                                              ; preds = %445, %437
  %450 = phi i64 [ %448, %445 ], [ %440, %437 ]
  %451 = phi i64** [ %446, %445 ], [ %433, %437 ]
  %452 = inttoptr i64 %450 to i64*
  %453 = add i64 %346, -1
  br label %454

454:                                              ; preds = %431, %449
  %455 = phi i64 [ %346, %431 ], [ %453, %449 ]
  %456 = phi i64** [ %433, %431 ], [ %451, %449 ]
  %457 = phi i64* [ %432, %431 ], [ %452, %449 ]
  %458 = icmp eq i64 %346, 1
  br i1 %458, label %483, label %459

459:                                              ; preds = %454, %554
  %460 = phi i64 [ %558, %554 ], [ %455, %454 ]
  %461 = phi i64** [ %556, %554 ], [ %456, %454 ]
  %462 = phi i64* [ %557, %554 ], [ %457, %454 ]
  %463 = load i64, i64* %434, align 8
  store i64 %463, i64* %462, align 8
  %464 = getelementptr inbounds i64, i64* %462, i64 1
  %465 = ptrtoint i64* %464 to i64
  %466 = bitcast i64** %461 to i64*
  %467 = load i64, i64* %466, align 8
  %468 = sub i64 %465, %467
  %469 = icmp eq i64 %468, 4096
  br i1 %469, label %470, label %473

470:                                              ; preds = %459
  %471 = getelementptr inbounds i64*, i64** %461, i64 1
  %472 = load i64*, i64** %471, align 8
  br label %473

473:                                              ; preds = %470, %459
  %474 = phi i64* [ %472, %470 ], [ %464, %459 ]
  %475 = phi i64** [ %471, %470 ], [ %461, %459 ]
  %476 = load i64, i64* %434, align 8
  store i64 %476, i64* %474, align 8
  %477 = getelementptr inbounds i64, i64* %474, i64 1
  %478 = ptrtoint i64* %477 to i64
  %479 = bitcast i64** %475 to i64*
  %480 = load i64, i64* %479, align 8
  %481 = sub i64 %478, %480
  %482 = icmp eq i64 %481, 4096
  br i1 %482, label %550, label %554

483:                                              ; preds = %554, %454
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %349) #6
  br label %484

484:                                              ; preds = %483, %343, %248, %132
  %485 = load i64**, i64*** %12, align 8
  %486 = load i64, i64* %14, align 8
  %487 = lshr i64 %486, 9
  %488 = getelementptr inbounds i64*, i64** %485, i64 %487
  %489 = load i64**, i64*** %18, align 8
  %490 = icmp eq i64** %489, %485
  br i1 %490, label %496, label %491

491:                                              ; preds = %484
  %492 = load i64*, i64** %488, align 8
  %493 = and i64 %486, 511
  %494 = getelementptr inbounds i64, i64* %492, i64 %493
  %495 = ptrtoint i64* %494 to i64
  br label %496

496:                                              ; preds = %484, %491
  %497 = phi i64 [ %495, %491 ], [ 0, %484 ]
  %498 = icmp eq i64 %48, 0
  br i1 %498, label %522, label %499

499:                                              ; preds = %496
  %500 = bitcast i64** %488 to i64*
  %501 = load i64, i64* %500, align 8
  %502 = sub i64 %497, %501
  %503 = ashr exact i64 %502, 3
  %504 = add nsw i64 %503, %48
  %505 = icmp sgt i64 %504, 0
  br i1 %505, label %506, label %513

506:                                              ; preds = %499
  %507 = lshr i64 %504, 9
  %508 = getelementptr inbounds i64*, i64** %488, i64 %507
  %509 = load i64*, i64** %508, align 8
  %510 = and i64 %504, 511
  %511 = getelementptr inbounds i64, i64* %509, i64 %510
  %512 = ptrtoint i64* %511 to i64
  br label %522

513:                                              ; preds = %499
  %514 = sub nsw i64 511, %504
  %515 = sdiv i64 %514, -512
  %516 = getelementptr inbounds i64*, i64** %488, i64 %515
  %517 = load i64*, i64** %516, align 8
  %518 = srem i64 %514, 512
  %519 = sub nsw i64 511, %518
  %520 = getelementptr inbounds i64, i64* %517, i64 %519
  %521 = ptrtoint i64* %520 to i64
  br label %522

522:                                              ; preds = %496, %506, %513
  %523 = phi i64 [ %497, %496 ], [ %512, %506 ], [ %521, %513 ]
  %524 = phi i64** [ %488, %496 ], [ %508, %506 ], [ %516, %513 ]
  %525 = insertvalue { i64**, i64* } undef, i64** %524, 0
  %526 = inttoptr i64 %523 to i64*
  %527 = insertvalue { i64**, i64* } %525, i64* %526, 1
  ret { i64**, i64* } %527

528:                                              ; preds = %238
  %529 = getelementptr inbounds i64*, i64** %240, i64 1
  %530 = bitcast i64** %529 to i64*
  %531 = load i64, i64* %530, align 8
  br label %532

532:                                              ; preds = %528, %238
  %533 = phi i64 [ %531, %528 ], [ %243, %238 ]
  %534 = phi i64** [ %529, %528 ], [ %240, %238 ]
  %535 = add i64 %224, -2
  %536 = icmp eq i64 %535, 0
  br i1 %536, label %248, label %223

537:                                              ; preds = %123
  %538 = getelementptr inbounds i64*, i64** %124, i64 -1
  %539 = load i64*, i64** %538, align 8
  %540 = getelementptr inbounds i64, i64* %539, i64 512
  br label %541

541:                                              ; preds = %537, %123
  %542 = phi i64** [ %538, %537 ], [ %124, %123 ]
  %543 = phi i64* [ %540, %537 ], [ %126, %123 ]
  %544 = getelementptr inbounds i64, i64* %543, i64 -1
  %545 = load i64, i64* %4, align 8
  store i64 %545, i64* %544, align 8
  %546 = add i64 %114, -2
  %547 = load <2 x i64>, <2 x i64>* %111, align 8
  %548 = add <2 x i64> %547, <i64 -1, i64 1>
  store <2 x i64> %548, <2 x i64>* %112, align 8
  %549 = icmp eq i64 %546, 0
  br i1 %549, label %132, label %113

550:                                              ; preds = %473
  %551 = getelementptr inbounds i64*, i64** %475, i64 1
  %552 = bitcast i64** %551 to i64*
  %553 = load i64, i64* %552, align 8
  br label %554

554:                                              ; preds = %550, %473
  %555 = phi i64 [ %553, %550 ], [ %478, %473 ]
  %556 = phi i64** [ %551, %550 ], [ %475, %473 ]
  %557 = inttoptr i64 %555 to i64*
  %558 = add i64 %460, -2
  %559 = icmp eq i64 %558, 0
  br i1 %559, label %483, label %459

560:                                              ; preds = %330
  %561 = getelementptr inbounds i64*, i64** %332, i64 1
  %562 = bitcast i64** %561 to i64*
  %563 = load i64, i64* %562, align 8
  br label %564

564:                                              ; preds = %560, %330
  %565 = phi i64 [ %563, %560 ], [ %338, %330 ]
  %566 = phi i64** [ %561, %560 ], [ %332, %330 ]
  %567 = inttoptr i64 %565 to i64*
  %568 = load i64, i64* %49, align 8
  %569 = add i64 %568, 1
  store i64 %569, i64* %49, align 8
  %570 = icmp eq i64 %336, 0
  br i1 %570, label %343, label %316
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64**, i64* } @_ZNSt3__15dequeIlNS_9allocatorIlEEE5eraseENS_16__deque_iteratorIlPKlRS5_PKS6_lLl0EEESA_(%"class.std::__1::deque"*, i64**, i64*, i64**, i64*) local_unnamed_addr #0 comdat align 2 {
  %6 = icmp eq i64* %4, %2
  br i1 %6, label %24, label %7

7:                                                ; preds = %5
  %8 = ptrtoint i64* %2 to i64
  %9 = ptrtoint i64* %4 to i64
  %10 = ptrtoint i64** %3 to i64
  %11 = ptrtoint i64** %1 to i64
  %12 = sub i64 %10, %11
  %13 = shl i64 %12, 6
  %14 = bitcast i64** %3 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = sub i64 %9, %15
  %17 = ashr exact i64 %16, 3
  %18 = add nsw i64 %17, %13
  %19 = bitcast i64** %1 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = sub i64 %8, %20
  %22 = ashr exact i64 %21, 3
  %23 = sub i64 %18, %22
  br label %24

24:                                               ; preds = %5, %7
  %25 = phi i64 [ %23, %7 ], [ 0, %5 ]
  %26 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %27 = load i64**, i64*** %26, align 8
  %28 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %29 = load i64, i64* %28, align 8
  %30 = lshr i64 %29, 9
  %31 = getelementptr inbounds i64*, i64** %27, i64 %30
  %32 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %33 = load i64**, i64*** %32, align 8
  %34 = icmp eq i64** %33, %27
  br i1 %34, label %39, label %35

35:                                               ; preds = %24
  %36 = load i64*, i64** %31, align 8
  %37 = and i64 %29, 511
  %38 = getelementptr inbounds i64, i64* %36, i64 %37
  br label %39

39:                                               ; preds = %24, %35
  %40 = phi i64* [ %38, %35 ], [ null, %24 ]
  %41 = ptrtoint i64** %31 to i64
  %42 = ptrtoint i64* %40 to i64
  %43 = icmp eq i64* %40, %2
  br i1 %43, label %78, label %44

44:                                               ; preds = %39
  %45 = ptrtoint i64* %2 to i64
  %46 = ptrtoint i64** %1 to i64
  %47 = sub i64 %46, %41
  %48 = shl i64 %47, 6
  %49 = bitcast i64** %1 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = sub i64 %45, %50
  %52 = ashr exact i64 %51, 3
  %53 = add nsw i64 %52, %48
  %54 = bitcast i64** %31 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = sub i64 %42, %55
  %57 = ashr exact i64 %56, 3
  %58 = sub i64 %53, %57
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %78, label %60

60:                                               ; preds = %44
  %61 = icmp sgt i64 %53, 0
  br i1 %61, label %62, label %69

62:                                               ; preds = %60
  %63 = lshr i64 %53, 9
  %64 = getelementptr inbounds i64*, i64** %31, i64 %63
  %65 = load i64*, i64** %64, align 8
  %66 = and i64 %53, 511
  %67 = getelementptr inbounds i64, i64* %65, i64 %66
  %68 = ptrtoint i64* %67 to i64
  br label %78

69:                                               ; preds = %60
  %70 = sub nsw i64 511, %53
  %71 = sdiv i64 %70, -512
  %72 = getelementptr inbounds i64*, i64** %31, i64 %71
  %73 = load i64*, i64** %72, align 8
  %74 = srem i64 %70, 512
  %75 = sub nsw i64 511, %74
  %76 = getelementptr inbounds i64, i64* %73, i64 %75
  %77 = ptrtoint i64* %76 to i64
  br label %78

78:                                               ; preds = %39, %44, %62, %69
  %79 = phi i1 [ true, %44 ], [ false, %62 ], [ false, %69 ], [ true, %39 ]
  %80 = phi i64 [ 0, %44 ], [ %58, %62 ], [ %58, %69 ], [ 0, %39 ]
  %81 = phi i64 [ %42, %44 ], [ %68, %62 ], [ %77, %69 ], [ %42, %39 ]
  %82 = phi i64** [ %31, %44 ], [ %64, %62 ], [ %72, %69 ], [ %31, %39 ]
  %83 = inttoptr i64 %81 to i64*
  %84 = icmp sgt i64 %25, 0
  br i1 %84, label %85, label %255

85:                                               ; preds = %78
  %86 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %87 = load i64, i64* %86, align 8
  %88 = sub i64 %87, %25
  %89 = lshr i64 %88, 1
  %90 = icmp ugt i64 %80, %89
  %91 = bitcast i64** %82 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = sub i64 %81, %92
  %94 = ashr exact i64 %93, 3
  %95 = add nsw i64 %94, %25
  %96 = icmp sgt i64 %95, 0
  br i1 %90, label %158, label %97

97:                                               ; preds = %85
  br i1 %96, label %98, label %104

98:                                               ; preds = %97
  %99 = lshr i64 %95, 9
  %100 = getelementptr inbounds i64*, i64** %82, i64 %99
  %101 = load i64*, i64** %100, align 8
  %102 = and i64 %95, 511
  %103 = getelementptr inbounds i64, i64* %101, i64 %102
  br label %112

104:                                              ; preds = %97
  %105 = sub nsw i64 511, %95
  %106 = sdiv i64 %105, -512
  %107 = getelementptr inbounds i64*, i64** %82, i64 %106
  %108 = load i64*, i64** %107, align 8
  %109 = srem i64 %105, 512
  %110 = sub nsw i64 511, %109
  %111 = getelementptr inbounds i64, i64* %108, i64 %110
  br label %112

112:                                              ; preds = %98, %104
  %113 = phi i64* [ %103, %98 ], [ %111, %104 ]
  %114 = phi i64** [ %100, %98 ], [ %107, %104 ]
  %115 = tail call { i64**, i64* } @_ZNSt3__113move_backwardIlPlRlPS1_lLl0ElS1_S2_S3_lLl0EEENS_16__deque_iteratorIT5_T6_T7_T8_T9_XT10_EEENS4_IT_T0_T1_T2_T3_XT4_EEESG_SA_(i64** %31, i64* %40, i64** %82, i64* %83, i64** %114, i64* %113)
  %116 = extractvalue { i64**, i64* } %115, 1
  %117 = icmp eq i64* %40, %116
  br i1 %117, label %138, label %118

118:                                              ; preds = %112, %133
  %119 = phi i64* [ %136, %133 ], [ %40, %112 ]
  %120 = phi i64 [ %134, %133 ], [ %41, %112 ]
  %121 = getelementptr inbounds i64, i64* %119, i64 1
  %122 = ptrtoint i64* %121 to i64
  %123 = inttoptr i64 %120 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = sub i64 %122, %124
  %126 = icmp eq i64 %125, 4096
  br i1 %126, label %127, label %133

127:                                              ; preds = %118
  %128 = inttoptr i64 %120 to i64**
  %129 = getelementptr inbounds i64*, i64** %128, i64 1
  %130 = ptrtoint i64** %129 to i64
  %131 = bitcast i64** %129 to i64*
  %132 = load i64, i64* %131, align 8
  br label %133

133:                                              ; preds = %118, %127
  %134 = phi i64 [ %130, %127 ], [ %120, %118 ]
  %135 = phi i64 [ %132, %127 ], [ %122, %118 ]
  %136 = inttoptr i64 %135 to i64*
  %137 = icmp eq i64* %116, %136
  br i1 %137, label %138, label %118

138:                                              ; preds = %133, %112
  %139 = load i64, i64* %86, align 8
  %140 = sub i64 %139, %25
  store i64 %140, i64* %86, align 8
  %141 = load i64, i64* %28, align 8
  %142 = add i64 %141, %25
  store i64 %142, i64* %28, align 8
  %143 = icmp ult i64 %142, 1024
  br i1 %143, label %144, label %146

144:                                              ; preds = %138
  %145 = load i64**, i64*** %26, align 8
  br label %255

146:                                              ; preds = %138
  %147 = bitcast i64*** %26 to i8***
  %148 = load i8**, i8*** %147, align 8
  br label %149

149:                                              ; preds = %146, %149
  %150 = phi i8** [ %148, %146 ], [ %157, %149 ]
  %151 = load i8*, i8** %150, align 8
  tail call void @_ZdlPv(i8* %151) #7
  %152 = load i64**, i64*** %26, align 8
  %153 = getelementptr inbounds i64*, i64** %152, i64 1
  store i64** %153, i64*** %26, align 8
  %154 = load i64, i64* %28, align 8
  %155 = add i64 %154, -512
  store i64 %155, i64* %28, align 8
  %156 = icmp ult i64 %155, 1024
  %157 = bitcast i64** %153 to i8**
  br i1 %156, label %255, label %149

158:                                              ; preds = %85
  br i1 %96, label %159, label %165

159:                                              ; preds = %158
  %160 = lshr i64 %95, 9
  %161 = getelementptr inbounds i64*, i64** %82, i64 %160
  %162 = load i64*, i64** %161, align 8
  %163 = and i64 %95, 511
  %164 = getelementptr inbounds i64, i64* %162, i64 %163
  br label %173

165:                                              ; preds = %158
  %166 = sub nsw i64 511, %95
  %167 = sdiv i64 %166, -512
  %168 = getelementptr inbounds i64*, i64** %82, i64 %167
  %169 = load i64*, i64** %168, align 8
  %170 = srem i64 %166, 512
  %171 = sub nsw i64 511, %170
  %172 = getelementptr inbounds i64, i64* %169, i64 %171
  br label %173

173:                                              ; preds = %159, %165
  %174 = phi i64* [ %164, %159 ], [ %172, %165 ]
  %175 = phi i64** [ %161, %159 ], [ %168, %165 ]
  %176 = add i64 %87, %29
  %177 = lshr i64 %176, 9
  %178 = getelementptr inbounds i64*, i64** %27, i64 %177
  br i1 %34, label %183, label %179

179:                                              ; preds = %173
  %180 = load i64*, i64** %178, align 8
  %181 = and i64 %176, 511
  %182 = getelementptr inbounds i64, i64* %180, i64 %181
  br label %183

183:                                              ; preds = %173, %179
  %184 = phi i64* [ %182, %179 ], [ null, %173 ]
  %185 = tail call { i64**, i64* } @_ZNSt3__14moveIlPlRlPS1_lLl0ElS1_S2_S3_lLl0EEENS_16__deque_iteratorIT5_T6_T7_T8_T9_XT10_EEENS4_IT_T0_T1_T2_T3_XT4_EEESG_SA_(i64** %175, i64* %174, i64** %178, i64* %184, i64** %82, i64* %83)
  %186 = extractvalue { i64**, i64* } %185, 0
  %187 = extractvalue { i64**, i64* } %185, 1
  %188 = load i64, i64* %86, align 8
  %189 = load i64, i64* %28, align 8
  %190 = add i64 %189, %188
  %191 = load i64**, i64*** %26, align 8
  %192 = load i64**, i64*** %32, align 8
  %193 = icmp eq i64** %192, %191
  %194 = ptrtoint i64** %192 to i64
  %195 = ptrtoint i64** %191 to i64
  br i1 %193, label %202, label %196

196:                                              ; preds = %183
  %197 = lshr i64 %190, 9
  %198 = getelementptr inbounds i64*, i64** %191, i64 %197
  %199 = load i64*, i64** %198, align 8
  %200 = and i64 %190, 511
  %201 = getelementptr inbounds i64, i64* %199, i64 %200
  br label %202

202:                                              ; preds = %183, %196
  %203 = phi i64* [ %201, %196 ], [ null, %183 ]
  %204 = icmp eq i64* %187, %203
  br i1 %204, label %205, label %216

205:                                              ; preds = %229, %202
  %206 = sub i64 %188, %25
  store i64 %206, i64* %86, align 8
  %207 = bitcast i64*** %26 to i64*
  %208 = sub i64 %194, %195
  %209 = icmp eq i64 %208, 0
  %210 = shl i64 %208, 6
  %211 = add i64 %210, -1
  %212 = select i1 %209, i64 0, i64 %211
  %213 = add i64 %206, %189
  %214 = sub i64 %212, %213
  %215 = icmp ult i64 %214, 1024
  br i1 %215, label %255, label %234

216:                                              ; preds = %202, %229
  %217 = phi i64** [ %231, %229 ], [ %186, %202 ]
  %218 = phi i64* [ %232, %229 ], [ %187, %202 ]
  %219 = getelementptr inbounds i64, i64* %218, i64 1
  %220 = ptrtoint i64* %219 to i64
  %221 = bitcast i64** %217 to i64*
  %222 = load i64, i64* %221, align 8
  %223 = sub i64 %220, %222
  %224 = icmp eq i64 %223, 4096
  br i1 %224, label %225, label %229

225:                                              ; preds = %216
  %226 = getelementptr inbounds i64*, i64** %217, i64 1
  %227 = bitcast i64** %226 to i64*
  %228 = load i64, i64* %227, align 8
  br label %229

229:                                              ; preds = %216, %225
  %230 = phi i64 [ %228, %225 ], [ %220, %216 ]
  %231 = phi i64** [ %226, %225 ], [ %217, %216 ]
  %232 = inttoptr i64 %230 to i64*
  %233 = icmp eq i64* %203, %232
  br i1 %233, label %205, label %216

234:                                              ; preds = %205, %234
  %235 = phi i64** [ %240, %234 ], [ %192, %205 ]
  %236 = getelementptr inbounds i64*, i64** %235, i64 -1
  %237 = bitcast i64** %236 to i8**
  %238 = load i8*, i8** %237, align 8
  tail call void @_ZdlPv(i8* %238) #7
  %239 = load i64**, i64*** %32, align 8
  %240 = getelementptr i64*, i64** %239, i64 -1
  store i64** %240, i64*** %32, align 8
  %241 = ptrtoint i64** %240 to i64
  %242 = load i64, i64* %207, align 8
  %243 = sub i64 %241, %242
  %244 = icmp eq i64 %243, 0
  %245 = shl i64 %243, 6
  %246 = add i64 %245, -1
  %247 = select i1 %244, i64 0, i64 %246
  %248 = load i64, i64* %28, align 8
  %249 = load i64, i64* %86, align 8
  %250 = add i64 %249, %248
  %251 = sub i64 %247, %250
  %252 = icmp ult i64 %251, 1024
  br i1 %252, label %253, label %234

253:                                              ; preds = %234
  %254 = inttoptr i64 %242 to i64**
  br label %255

255:                                              ; preds = %149, %144, %253, %205, %78
  %256 = phi i64 [ %142, %144 ], [ %248, %253 ], [ %189, %205 ], [ %29, %78 ], [ %155, %149 ]
  %257 = phi i64** [ %145, %144 ], [ %254, %253 ], [ %191, %205 ], [ %27, %78 ], [ %153, %149 ]
  %258 = lshr i64 %256, 9
  %259 = getelementptr inbounds i64*, i64** %257, i64 %258
  %260 = load i64**, i64*** %32, align 8
  %261 = icmp eq i64** %260, %257
  br i1 %261, label %267, label %262

262:                                              ; preds = %255
  %263 = load i64*, i64** %259, align 8
  %264 = and i64 %256, 511
  %265 = getelementptr inbounds i64, i64* %263, i64 %264
  %266 = ptrtoint i64* %265 to i64
  br label %267

267:                                              ; preds = %255, %262
  %268 = phi i64 [ %266, %262 ], [ 0, %255 ]
  br i1 %79, label %292, label %269

269:                                              ; preds = %267
  %270 = bitcast i64** %259 to i64*
  %271 = load i64, i64* %270, align 8
  %272 = sub i64 %268, %271
  %273 = ashr exact i64 %272, 3
  %274 = add nsw i64 %273, %80
  %275 = icmp sgt i64 %274, 0
  br i1 %275, label %276, label %283

276:                                              ; preds = %269
  %277 = lshr i64 %274, 9
  %278 = getelementptr inbounds i64*, i64** %259, i64 %277
  %279 = load i64*, i64** %278, align 8
  %280 = and i64 %274, 511
  %281 = getelementptr inbounds i64, i64* %279, i64 %280
  %282 = ptrtoint i64* %281 to i64
  br label %292

283:                                              ; preds = %269
  %284 = sub nsw i64 511, %274
  %285 = sdiv i64 %284, -512
  %286 = getelementptr inbounds i64*, i64** %259, i64 %285
  %287 = load i64*, i64** %286, align 8
  %288 = srem i64 %284, 512
  %289 = sub nsw i64 511, %288
  %290 = getelementptr inbounds i64, i64* %287, i64 %289
  %291 = ptrtoint i64* %290 to i64
  br label %292

292:                                              ; preds = %267, %276, %283
  %293 = phi i64 [ %268, %267 ], [ %282, %276 ], [ %291, %283 ]
  %294 = phi i64** [ %259, %267 ], [ %278, %276 ], [ %286, %283 ]
  %295 = insertvalue { i64**, i64* } undef, i64** %294, 0
  %296 = inttoptr i64 %293 to i64*
  %297 = insertvalue { i64**, i64* } %295, i64* %296, 1
  ret { i64**, i64* } %297
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc20PacketArrivalTimeMap16RemoveOldPacketsEll(%"class.webrtc::PacketArrivalTimeMap"* nocapture, i64, i64) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %6 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %44, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i64, i64* %4, align 8
  br label %12

12:                                               ; preds = %9, %39
  %13 = phi i64 [ %11, %9 ], [ %42, %39 ]
  %14 = phi i64 [ %7, %9 ], [ %40, %39 ]
  %15 = icmp slt i64 %13, %1
  br i1 %15, label %16, label %44

16:                                               ; preds = %12
  %17 = load i64**, i64*** %5, align 8
  %18 = load i64, i64* %10, align 8
  %19 = lshr i64 %18, 9
  %20 = getelementptr inbounds i64*, i64** %17, i64 %19
  %21 = load i64*, i64** %20, align 8
  %22 = and i64 %18, 511
  %23 = getelementptr inbounds i64, i64* %21, i64 %22
  %24 = load i64, i64* %23, align 8
  %25 = icmp sgt i64 %24, %2
  %26 = bitcast i64** %17 to i8**
  br i1 %25, label %44, label %27

27:                                               ; preds = %16
  %28 = add i64 %14, -1
  store i64 %28, i64* %6, align 8
  %29 = add i64 %18, 1
  store i64 %29, i64* %10, align 8
  %30 = icmp ult i64 %29, 1024
  br i1 %30, label %39, label %31

31:                                               ; preds = %27
  %32 = load i8*, i8** %26, align 8
  tail call void @_ZdlPv(i8* %32) #7
  %33 = load i64**, i64*** %5, align 8
  %34 = getelementptr inbounds i64*, i64** %33, i64 1
  store i64** %34, i64*** %5, align 8
  %35 = load i64, i64* %10, align 8
  %36 = add i64 %35, -512
  store i64 %36, i64* %10, align 8
  %37 = load i64, i64* %4, align 8
  %38 = load i64, i64* %6, align 8
  br label %39

39:                                               ; preds = %27, %31
  %40 = phi i64 [ %28, %27 ], [ %38, %31 ]
  %41 = phi i64 [ %13, %27 ], [ %37, %31 ]
  %42 = add nsw i64 %41, 1
  store i64 %42, i64* %4, align 8
  %43 = icmp eq i64 %40, 0
  br i1 %43, label %44, label %12

44:                                               ; preds = %12, %39, %16, %3
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK6webrtc20PacketArrivalTimeMap12has_receivedEl(%"class.webrtc::PacketArrivalTimeMap"* nocapture readonly, i64) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = sub nsw i64 %1, %4
  %6 = icmp sgt i64 %5, -1
  br i1 %6, label %7, label %24

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %9 = load i64, i64* %8, align 8
  %10 = icmp slt i64 %5, %9
  br i1 %10, label %11, label %24

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = add i64 %13, %5
  %15 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %16 = load i64**, i64*** %15, align 8
  %17 = lshr i64 %14, 9
  %18 = getelementptr inbounds i64*, i64** %16, i64 %17
  %19 = load i64*, i64** %18, align 8
  %20 = and i64 %14, 511
  %21 = getelementptr inbounds i64, i64* %19, i64 %20
  %22 = load i64, i64* %21, align 8
  %23 = icmp eq i64 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %11, %7, %2
  br label %25

25:                                               ; preds = %11, %24
  %26 = phi i1 [ false, %24 ], [ true, %11 ]
  ret i1 %26
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN6webrtc20PacketArrivalTimeMap7EraseToEl(%"class.webrtc::PacketArrivalTimeMap"*, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = icmp slt i64 %4, %1
  br i1 %5, label %6, label %61

6:                                                ; preds = %2
  %7 = sub nsw i64 %1, %4
  %8 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0
  %9 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %10 = load i64, i64* %9, align 8
  %11 = icmp ult i64 %10, %7
  %12 = select i1 %11, i64 %10, i64 %7
  %13 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %14 = load i64**, i64*** %13, align 8
  %15 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = lshr i64 %16, 9
  %18 = getelementptr inbounds i64*, i64** %14, i64 %17
  %19 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 0, i32 2
  %20 = load i64**, i64*** %19, align 8
  %21 = icmp eq i64** %20, %14
  br i1 %21, label %27, label %22

22:                                               ; preds = %6
  %23 = load i64*, i64** %18, align 8
  %24 = and i64 %16, 511
  %25 = getelementptr inbounds i64, i64* %23, i64 %24
  %26 = ptrtoint i64* %25 to i64
  br label %27

27:                                               ; preds = %6, %22
  %28 = phi i64* [ %25, %22 ], [ null, %6 ]
  %29 = phi i64 [ %26, %22 ], [ 0, %6 ]
  %30 = icmp eq i64 %12, 0
  br i1 %30, label %54, label %31

31:                                               ; preds = %27
  %32 = bitcast i64** %18 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = sub i64 %29, %33
  %35 = ashr exact i64 %34, 3
  %36 = add nsw i64 %35, %12
  %37 = icmp sgt i64 %36, 0
  br i1 %37, label %38, label %45

38:                                               ; preds = %31
  %39 = lshr i64 %36, 9
  %40 = getelementptr inbounds i64*, i64** %18, i64 %39
  %41 = load i64*, i64** %40, align 8
  %42 = and i64 %36, 511
  %43 = getelementptr inbounds i64, i64* %41, i64 %42
  %44 = ptrtoint i64* %43 to i64
  br label %54

45:                                               ; preds = %31
  %46 = sub nsw i64 511, %36
  %47 = sdiv i64 %46, -512
  %48 = getelementptr inbounds i64*, i64** %18, i64 %47
  %49 = load i64*, i64** %48, align 8
  %50 = srem i64 %46, 512
  %51 = sub nsw i64 511, %50
  %52 = getelementptr inbounds i64, i64* %49, i64 %51
  %53 = ptrtoint i64* %52 to i64
  br label %54

54:                                               ; preds = %27, %38, %45
  %55 = phi i64 [ %29, %27 ], [ %44, %38 ], [ %53, %45 ]
  %56 = phi i64** [ %18, %27 ], [ %40, %38 ], [ %48, %45 ]
  %57 = inttoptr i64 %55 to i64*
  %58 = tail call { i64**, i64* } @_ZNSt3__15dequeIlNS_9allocatorIlEEE5eraseENS_16__deque_iteratorIlPKlRS5_PKS6_lLl0EEESA_(%"class.std::__1::deque"* %8, i64** %18, i64* %28, i64** %56, i64* %57)
  %59 = load i64, i64* %3, align 8
  %60 = add i64 %59, %12
  store i64 %60, i64* %3, align 8
  br label %61

61:                                               ; preds = %54, %2
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZNK6webrtc20PacketArrivalTimeMap5clampEl(%"class.webrtc::PacketArrivalTimeMap"* nocapture readonly, i64) local_unnamed_addr #2 align 2 {
  %3 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 1
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %"class.webrtc::PacketArrivalTimeMap", %"class.webrtc::PacketArrivalTimeMap"* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, %4
  %8 = icmp slt i64 %4, %1
  %9 = icmp sgt i64 %7, %1
  %10 = select i1 %9, i64 %1, i64 %7
  %11 = select i1 %8, i64 %10, i64 %4
  ret i64 %11
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIlNS_9allocatorIlEEE19__add_back_capacityEv(%"class.std::__1::deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca i64*, align 8
  %3 = alloca i64*, align 8
  %4 = alloca %"struct.std::__1::__split_buffer.7", align 8
  %5 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, 511
  br i1 %7, label %8, label %162

8:                                                ; preds = %1
  %9 = add i64 %6, -512
  store i64 %9, i64* %5, align 8
  %10 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i64**, i64*** %10, align 8
  %12 = bitcast i64** %11 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds i64*, i64** %11, i64 1
  store i64** %14, i64*** %10, align 8
  %15 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %16 = load i64**, i64*** %15, align 8
  %17 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %18 = load i64**, i64*** %17, align 8
  %19 = icmp eq i64** %16, %18
  %20 = ptrtoint i64** %18 to i64
  %21 = bitcast i64** %16 to i64*
  br i1 %19, label %22, label %158

22:                                               ; preds = %8
  %23 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load i64**, i64*** %23, align 8
  %25 = icmp ugt i64** %14, %24
  %26 = ptrtoint i64** %24 to i64
  br i1 %25, label %27, label %47

27:                                               ; preds = %22
  %28 = ptrtoint i64** %14 to i64
  %29 = sub i64 %28, %26
  %30 = ashr exact i64 %29, 3
  %31 = add nsw i64 %30, 1
  %32 = sdiv i64 %31, -2
  %33 = getelementptr inbounds i64*, i64** %14, i64 %32
  %34 = ptrtoint i64** %16 to i64
  %35 = sub i64 %34, %28
  %36 = ashr exact i64 %35, 3
  %37 = icmp eq i64 %35, 0
  br i1 %37, label %42, label %38

38:                                               ; preds = %27
  %39 = bitcast i64** %33 to i8*
  %40 = bitcast i64** %14 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 %35, i1 false) #6
  %41 = load i64**, i64*** %10, align 8
  br label %42

42:                                               ; preds = %38, %27
  %43 = phi i64** [ %14, %27 ], [ %41, %38 ]
  %44 = getelementptr inbounds i64*, i64** %33, i64 %36
  store i64** %44, i64*** %15, align 8
  %45 = getelementptr inbounds i64*, i64** %43, i64 %32
  store i64** %45, i64*** %10, align 8
  %46 = bitcast i64** %44 to i64*
  br label %158

47:                                               ; preds = %22
  %48 = bitcast i64*** %17 to i64*
  %49 = bitcast %"class.std::__1::deque"* %0 to i64*
  %50 = sub i64 %20, %26
  %51 = ashr exact i64 %50, 2
  %52 = icmp eq i64 %50, 0
  %53 = select i1 %52, i64 1, i64 %51
  %54 = icmp ugt i64 %53, 2305843009213693951
  br i1 %54, label %55, label %56

55:                                               ; preds = %47
  tail call void @abort() #8
  unreachable

56:                                               ; preds = %47
  %57 = lshr i64 %53, 2
  %58 = shl i64 %53, 3
  %59 = tail call i8* @_Znwm(i64 %58) #7
  %60 = bitcast i8* %59 to i64**
  %61 = ptrtoint i8* %59 to i64
  %62 = getelementptr inbounds i64*, i64** %60, i64 %57
  %63 = ptrtoint i64** %62 to i64
  %64 = getelementptr inbounds i64*, i64** %60, i64 %53
  %65 = ptrtoint i64** %64 to i64
  %66 = ptrtoint i64** %14 to i64
  %67 = ptrtoint i64** %16 to i64
  %68 = sub i64 %67, %66
  %69 = ashr exact i64 %68, 3
  %70 = getelementptr inbounds i64*, i64** %62, i64 %69
  %71 = icmp eq i64 %68, 0
  br i1 %71, label %147, label %72

72:                                               ; preds = %56
  %73 = add i64 %68, -8
  %74 = lshr i64 %73, 3
  %75 = add nuw nsw i64 %74, 1
  %76 = and i64 %75, 7
  %77 = icmp eq i64 %76, 0
  br i1 %77, label %93, label %78

78:                                               ; preds = %72, %78
  %79 = phi i64** [ %86, %78 ], [ %62, %72 ]
  %80 = phi i64 [ %87, %78 ], [ %63, %72 ]
  %81 = phi i64** [ %88, %78 ], [ %14, %72 ]
  %82 = phi i64 [ %89, %78 ], [ %76, %72 ]
  %83 = bitcast i64** %81 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = inttoptr i64 %80 to i64*
  store i64 %84, i64* %85, align 8
  %86 = getelementptr inbounds i64*, i64** %79, i64 1
  %87 = ptrtoint i64** %86 to i64
  %88 = getelementptr inbounds i64*, i64** %81, i64 1
  %89 = add i64 %82, -1
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %91, label %78, !llvm.loop !3

91:                                               ; preds = %78
  %92 = ptrtoint i64** %86 to i64
  br label %93

93:                                               ; preds = %72, %91
  %94 = phi i64** [ %62, %72 ], [ %86, %91 ]
  %95 = phi i64 [ %63, %72 ], [ %92, %91 ]
  %96 = phi i64** [ %14, %72 ], [ %88, %91 ]
  %97 = icmp ult i64 %73, 56
  br i1 %97, label %144, label %98

98:                                               ; preds = %93, %98
  %99 = phi i64** [ %140, %98 ], [ %94, %93 ]
  %100 = phi i64 [ %141, %98 ], [ %95, %93 ]
  %101 = phi i64** [ %142, %98 ], [ %96, %93 ]
  %102 = bitcast i64** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds i64*, i64** %99, i64 1
  %106 = getelementptr inbounds i64*, i64** %101, i64 1
  %107 = bitcast i64** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast i64** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds i64*, i64** %99, i64 2
  %111 = getelementptr inbounds i64*, i64** %101, i64 2
  %112 = bitcast i64** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast i64** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds i64*, i64** %99, i64 3
  %116 = getelementptr inbounds i64*, i64** %101, i64 3
  %117 = bitcast i64** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast i64** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds i64*, i64** %99, i64 4
  %121 = getelementptr inbounds i64*, i64** %101, i64 4
  %122 = bitcast i64** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast i64** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds i64*, i64** %99, i64 5
  %126 = getelementptr inbounds i64*, i64** %101, i64 5
  %127 = bitcast i64** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast i64** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds i64*, i64** %99, i64 6
  %131 = getelementptr inbounds i64*, i64** %101, i64 6
  %132 = bitcast i64** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast i64** %130 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds i64*, i64** %99, i64 7
  %136 = getelementptr inbounds i64*, i64** %101, i64 7
  %137 = bitcast i64** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast i64** %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds i64*, i64** %99, i64 8
  %141 = ptrtoint i64** %140 to i64
  %142 = getelementptr inbounds i64*, i64** %101, i64 8
  %143 = icmp eq i64** %70, %140
  br i1 %143, label %144, label %98

144:                                              ; preds = %98, %93
  %145 = ptrtoint i64** %70 to i64
  %146 = load i64**, i64*** %23, align 8
  br label %147

147:                                              ; preds = %144, %56
  %148 = phi i64** [ %146, %144 ], [ %24, %56 ]
  %149 = phi i64 [ %145, %144 ], [ %63, %56 ]
  store i64 %61, i64* %49, align 8
  %150 = bitcast i64*** %10 to i64*
  store i64 %63, i64* %150, align 8
  %151 = bitcast i64*** %15 to i64*
  store i64 %149, i64* %151, align 8
  store i64 %65, i64* %48, align 8
  %152 = icmp eq i64** %148, null
  %153 = inttoptr i64 %149 to i64*
  br i1 %152, label %158, label %154

154:                                              ; preds = %147
  %155 = bitcast i64** %148 to i8*
  tail call void @_ZdlPv(i8* %155) #7
  %156 = bitcast i64*** %15 to i64**
  %157 = load i64*, i64** %156, align 8
  br label %158

158:                                              ; preds = %8, %42, %147, %154
  %159 = phi i64* [ %157, %154 ], [ %153, %147 ], [ %46, %42 ], [ %21, %8 ]
  store i64 %13, i64* %159, align 8
  %160 = load i64**, i64*** %15, align 8
  %161 = getelementptr inbounds i64*, i64** %160, i64 1
  store i64** %161, i64*** %15, align 8
  br label %460

162:                                              ; preds = %1
  %163 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %164 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %165 = bitcast i64*** %164 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %168 = bitcast i64*** %167 to i64*
  %169 = load i64, i64* %168, align 8
  %170 = sub i64 %166, %169
  %171 = ashr exact i64 %170, 3
  %172 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %173 = bitcast i64*** %172 to i64*
  %174 = load i64, i64* %173, align 8
  %175 = bitcast %"class.std::__1::deque"* %0 to i64*
  %176 = load i64, i64* %175, align 8
  %177 = sub i64 %174, %176
  %178 = ashr exact i64 %177, 3
  %179 = icmp ult i64 %171, %178
  %180 = inttoptr i64 %166 to i64**
  %181 = inttoptr i64 %169 to i64**
  br i1 %179, label %182, label %337

182:                                              ; preds = %162
  %183 = icmp eq i64 %174, %166
  br i1 %183, label %188, label %184

184:                                              ; preds = %182
  %185 = bitcast i64** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %185) #6
  %186 = tail call i8* @_Znwm(i64 4096) #7
  %187 = bitcast i64** %2 to i8**
  store i8* %186, i8** %187, align 8
  call void @_ZNSt3__114__split_bufferIPlNS_9allocatorIS1_EEE9push_backEOS1_(%"struct.std::__1::__split_buffer"* %163, i64** nonnull dereferenceable(8) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %185) #6
  br label %460

188:                                              ; preds = %182
  %189 = bitcast i64** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %189) #6
  %190 = tail call i8* @_Znwm(i64 4096) #7
  %191 = bitcast i64** %3 to i8**
  store i8* %190, i8** %191, align 8
  call void @_ZNSt3__114__split_bufferIPlNS_9allocatorIS1_EEE10push_frontEOS1_(%"struct.std::__1::__split_buffer"* %163, i64** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %189) #6
  %192 = load i64**, i64*** %167, align 8
  %193 = bitcast i64** %192 to i64*
  %194 = load i64, i64* %193, align 8
  %195 = getelementptr inbounds i64*, i64** %192, i64 1
  store i64** %195, i64*** %167, align 8
  %196 = load i64**, i64*** %164, align 8
  %197 = load i64**, i64*** %172, align 8
  %198 = icmp eq i64** %196, %197
  %199 = ptrtoint i64** %197 to i64
  %200 = bitcast i64** %196 to i64*
  br i1 %198, label %201, label %333

201:                                              ; preds = %188
  %202 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %203 = load i64**, i64*** %202, align 8
  %204 = icmp ugt i64** %195, %203
  %205 = ptrtoint i64** %203 to i64
  br i1 %204, label %206, label %226

206:                                              ; preds = %201
  %207 = ptrtoint i64** %195 to i64
  %208 = sub i64 %207, %205
  %209 = ashr exact i64 %208, 3
  %210 = add nsw i64 %209, 1
  %211 = sdiv i64 %210, -2
  %212 = getelementptr inbounds i64*, i64** %195, i64 %211
  %213 = ptrtoint i64** %196 to i64
  %214 = sub i64 %213, %207
  %215 = ashr exact i64 %214, 3
  %216 = icmp eq i64 %214, 0
  br i1 %216, label %221, label %217

217:                                              ; preds = %206
  %218 = bitcast i64** %212 to i8*
  %219 = bitcast i64** %195 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %218, i8* align 8 %219, i64 %214, i1 false) #6
  %220 = load i64**, i64*** %167, align 8
  br label %221

221:                                              ; preds = %217, %206
  %222 = phi i64** [ %195, %206 ], [ %220, %217 ]
  %223 = getelementptr inbounds i64*, i64** %212, i64 %215
  store i64** %223, i64*** %164, align 8
  %224 = getelementptr inbounds i64*, i64** %222, i64 %211
  store i64** %224, i64*** %167, align 8
  %225 = bitcast i64** %223 to i64*
  br label %333

226:                                              ; preds = %201
  %227 = sub i64 %199, %205
  %228 = ashr exact i64 %227, 2
  %229 = icmp eq i64 %227, 0
  %230 = select i1 %229, i64 1, i64 %228
  %231 = icmp ugt i64 %230, 2305843009213693951
  br i1 %231, label %232, label %233

232:                                              ; preds = %226
  call void @abort() #8
  unreachable

233:                                              ; preds = %226
  %234 = lshr i64 %230, 2
  %235 = shl i64 %230, 3
  %236 = call i8* @_Znwm(i64 %235) #7
  %237 = bitcast i8* %236 to i64**
  %238 = ptrtoint i8* %236 to i64
  %239 = getelementptr inbounds i64*, i64** %237, i64 %234
  %240 = ptrtoint i64** %239 to i64
  %241 = getelementptr inbounds i64*, i64** %237, i64 %230
  %242 = ptrtoint i64** %241 to i64
  %243 = ptrtoint i64** %195 to i64
  %244 = ptrtoint i64** %196 to i64
  %245 = sub i64 %244, %243
  %246 = ashr exact i64 %245, 3
  %247 = getelementptr inbounds i64*, i64** %239, i64 %246
  %248 = icmp eq i64 %245, 0
  br i1 %248, label %324, label %249

249:                                              ; preds = %233
  %250 = add i64 %245, -8
  %251 = lshr i64 %250, 3
  %252 = add nuw nsw i64 %251, 1
  %253 = and i64 %252, 7
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %270, label %255

255:                                              ; preds = %249, %255
  %256 = phi i64** [ %263, %255 ], [ %239, %249 ]
  %257 = phi i64 [ %264, %255 ], [ %240, %249 ]
  %258 = phi i64** [ %265, %255 ], [ %195, %249 ]
  %259 = phi i64 [ %266, %255 ], [ %253, %249 ]
  %260 = bitcast i64** %258 to i64*
  %261 = load i64, i64* %260, align 8
  %262 = inttoptr i64 %257 to i64*
  store i64 %261, i64* %262, align 8
  %263 = getelementptr inbounds i64*, i64** %256, i64 1
  %264 = ptrtoint i64** %263 to i64
  %265 = getelementptr inbounds i64*, i64** %258, i64 1
  %266 = add i64 %259, -1
  %267 = icmp eq i64 %266, 0
  br i1 %267, label %268, label %255, !llvm.loop !5

268:                                              ; preds = %255
  %269 = ptrtoint i64** %263 to i64
  br label %270

270:                                              ; preds = %249, %268
  %271 = phi i64** [ %239, %249 ], [ %263, %268 ]
  %272 = phi i64 [ %240, %249 ], [ %269, %268 ]
  %273 = phi i64** [ %195, %249 ], [ %265, %268 ]
  %274 = icmp ult i64 %250, 56
  br i1 %274, label %321, label %275

275:                                              ; preds = %270, %275
  %276 = phi i64** [ %317, %275 ], [ %271, %270 ]
  %277 = phi i64 [ %318, %275 ], [ %272, %270 ]
  %278 = phi i64** [ %319, %275 ], [ %273, %270 ]
  %279 = bitcast i64** %278 to i64*
  %280 = load i64, i64* %279, align 8
  %281 = inttoptr i64 %277 to i64*
  store i64 %280, i64* %281, align 8
  %282 = getelementptr inbounds i64*, i64** %276, i64 1
  %283 = getelementptr inbounds i64*, i64** %278, i64 1
  %284 = bitcast i64** %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast i64** %282 to i64*
  store i64 %285, i64* %286, align 8
  %287 = getelementptr inbounds i64*, i64** %276, i64 2
  %288 = getelementptr inbounds i64*, i64** %278, i64 2
  %289 = bitcast i64** %288 to i64*
  %290 = load i64, i64* %289, align 8
  %291 = bitcast i64** %287 to i64*
  store i64 %290, i64* %291, align 8
  %292 = getelementptr inbounds i64*, i64** %276, i64 3
  %293 = getelementptr inbounds i64*, i64** %278, i64 3
  %294 = bitcast i64** %293 to i64*
  %295 = load i64, i64* %294, align 8
  %296 = bitcast i64** %292 to i64*
  store i64 %295, i64* %296, align 8
  %297 = getelementptr inbounds i64*, i64** %276, i64 4
  %298 = getelementptr inbounds i64*, i64** %278, i64 4
  %299 = bitcast i64** %298 to i64*
  %300 = load i64, i64* %299, align 8
  %301 = bitcast i64** %297 to i64*
  store i64 %300, i64* %301, align 8
  %302 = getelementptr inbounds i64*, i64** %276, i64 5
  %303 = getelementptr inbounds i64*, i64** %278, i64 5
  %304 = bitcast i64** %303 to i64*
  %305 = load i64, i64* %304, align 8
  %306 = bitcast i64** %302 to i64*
  store i64 %305, i64* %306, align 8
  %307 = getelementptr inbounds i64*, i64** %276, i64 6
  %308 = getelementptr inbounds i64*, i64** %278, i64 6
  %309 = bitcast i64** %308 to i64*
  %310 = load i64, i64* %309, align 8
  %311 = bitcast i64** %307 to i64*
  store i64 %310, i64* %311, align 8
  %312 = getelementptr inbounds i64*, i64** %276, i64 7
  %313 = getelementptr inbounds i64*, i64** %278, i64 7
  %314 = bitcast i64** %313 to i64*
  %315 = load i64, i64* %314, align 8
  %316 = bitcast i64** %312 to i64*
  store i64 %315, i64* %316, align 8
  %317 = getelementptr inbounds i64*, i64** %276, i64 8
  %318 = ptrtoint i64** %317 to i64
  %319 = getelementptr inbounds i64*, i64** %278, i64 8
  %320 = icmp eq i64** %247, %317
  br i1 %320, label %321, label %275

321:                                              ; preds = %275, %270
  %322 = ptrtoint i64** %247 to i64
  %323 = load i64**, i64*** %202, align 8
  br label %324

324:                                              ; preds = %321, %233
  %325 = phi i64** [ %323, %321 ], [ %203, %233 ]
  %326 = phi i64 [ %322, %321 ], [ %240, %233 ]
  store i64 %238, i64* %175, align 8
  store i64 %240, i64* %168, align 8
  store i64 %326, i64* %165, align 8
  store i64 %242, i64* %173, align 8
  %327 = icmp eq i64** %325, null
  %328 = inttoptr i64 %326 to i64*
  br i1 %327, label %333, label %329

329:                                              ; preds = %324
  %330 = bitcast i64** %325 to i8*
  call void @_ZdlPv(i8* %330) #7
  %331 = bitcast i64*** %164 to i64**
  %332 = load i64*, i64** %331, align 8
  br label %333

333:                                              ; preds = %188, %221, %324, %329
  %334 = phi i64* [ %332, %329 ], [ %328, %324 ], [ %225, %221 ], [ %200, %188 ]
  store i64 %194, i64* %334, align 8
  %335 = load i64**, i64*** %164, align 8
  %336 = getelementptr inbounds i64*, i64** %335, i64 1
  store i64** %336, i64*** %164, align 8
  br label %460

337:                                              ; preds = %162
  %338 = bitcast %"struct.std::__1::__split_buffer.7"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %338) #6
  %339 = getelementptr inbounds %"struct.std::__1::__split_buffer.7", %"struct.std::__1::__split_buffer.7"* %4, i64 0, i32 1
  %340 = getelementptr inbounds %"struct.std::__1::__split_buffer.7", %"struct.std::__1::__split_buffer.7"* %4, i64 0, i32 2
  %341 = getelementptr inbounds %"struct.std::__1::__split_buffer.7", %"struct.std::__1::__split_buffer.7"* %4, i64 0, i32 3, i32 0, i32 0
  %342 = getelementptr inbounds %"struct.std::__1::__split_buffer.7", %"struct.std::__1::__split_buffer.7"* %4, i64 0, i32 3, i32 1, i32 0
  %343 = ashr exact i64 %177, 2
  %344 = icmp eq i64 %177, 0
  %345 = select i1 %344, i64 1, i64 %343
  %346 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3
  %347 = bitcast %"struct.std::__1::__split_buffer.7"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %347, i8 -86, i64 24, i1 false)
  store i64** null, i64*** %341, align 8
  %348 = bitcast %"class.std::__1::allocator"** %342 to %"class.std::__1::__compressed_pair"**
  store %"class.std::__1::__compressed_pair"* %346, %"class.std::__1::__compressed_pair"** %348, align 8
  %349 = icmp ugt i64 %345, 2305843009213693951
  br i1 %349, label %350, label %351

350:                                              ; preds = %337
  tail call void @abort() #8
  unreachable

351:                                              ; preds = %337
  %352 = shl i64 %345, 3
  %353 = tail call i8* @_Znwm(i64 %352) #7
  %354 = bitcast i8* %353 to i64**
  %355 = bitcast %"struct.std::__1::__split_buffer.7"* %4 to i8**
  store i8* %353, i8** %355, align 8
  %356 = getelementptr inbounds i64*, i64** %354, i64 %171
  store i64** %356, i64*** %340, align 8
  store i64** %356, i64*** %339, align 8
  %357 = getelementptr inbounds i64*, i64** %354, i64 %345
  store i64** %357, i64*** %341, align 8
  %358 = tail call i8* @_Znwm(i64 4096) #7
  %359 = ptrtoint i8* %358 to i64
  %360 = icmp eq i64 %171, %345
  %361 = ptrtoint i64** %357 to i64
  %362 = ptrtoint i8* %353 to i64
  %363 = ptrtoint i64** %356 to i64
  br i1 %360, label %364, label %398

364:                                              ; preds = %351
  %365 = icmp ugt i64** %356, %354
  br i1 %365, label %366, label %373

366:                                              ; preds = %364
  %367 = sub i64 %363, %362
  %368 = ashr exact i64 %367, 3
  %369 = add nsw i64 %368, 1
  %370 = sdiv i64 %369, -2
  %371 = getelementptr inbounds i64*, i64** %356, i64 %370
  store i64** %371, i64*** %340, align 8
  store i64** %371, i64*** %339, align 8
  %372 = ptrtoint i64** %371 to i64
  br label %398

373:                                              ; preds = %364
  %374 = sub i64 %361, %362
  %375 = ashr exact i64 %374, 2
  %376 = icmp eq i64 %374, 0
  %377 = select i1 %376, i64 1, i64 %375
  %378 = icmp ugt i64 %377, 2305843009213693951
  br i1 %378, label %379, label %380

379:                                              ; preds = %373
  tail call void @abort() #8
  unreachable

380:                                              ; preds = %373
  %381 = bitcast %"struct.std::__1::__split_buffer.7"* %4 to i64*
  %382 = bitcast i64*** %341 to i64*
  %383 = lshr i64 %377, 2
  %384 = shl i64 %377, 3
  %385 = tail call i8* @_Znwm(i64 %384) #7
  %386 = bitcast i8* %385 to i64**
  %387 = ptrtoint i8* %385 to i64
  %388 = getelementptr inbounds i64*, i64** %386, i64 %383
  %389 = ptrtoint i64** %388 to i64
  %390 = getelementptr inbounds i64*, i64** %386, i64 %377
  %391 = ptrtoint i64** %390 to i64
  store i64 %387, i64* %381, align 8
  %392 = bitcast i64*** %339 to i64*
  store i64 %389, i64* %392, align 8
  %393 = bitcast i64*** %340 to i64*
  store i64 %389, i64* %393, align 8
  store i64 %391, i64* %382, align 8
  tail call void @_ZdlPv(i8* nonnull %353) #7
  %394 = load i64**, i64*** %164, align 8
  %395 = load i64**, i64*** %167, align 8
  %396 = ptrtoint i64** %395 to i64
  %397 = ptrtoint i64** %394 to i64
  br label %398

398:                                              ; preds = %351, %366, %380
  %399 = phi i64 [ %391, %380 ], [ %361, %366 ], [ %361, %351 ]
  %400 = phi i64 [ %397, %380 ], [ %166, %366 ], [ %166, %351 ]
  %401 = phi i64 [ %389, %380 ], [ %372, %366 ], [ %363, %351 ]
  %402 = phi i64 [ %396, %380 ], [ %169, %366 ], [ %169, %351 ]
  %403 = phi i64 [ %387, %380 ], [ %362, %366 ], [ %362, %351 ]
  %404 = phi i64** [ %395, %380 ], [ %181, %366 ], [ %181, %351 ]
  %405 = phi i64** [ %394, %380 ], [ %180, %366 ], [ %180, %351 ]
  %406 = phi i64** [ %388, %380 ], [ %371, %366 ], [ %356, %351 ]
  %407 = bitcast i64** %406 to i64*
  store i64 %359, i64* %407, align 8
  %408 = getelementptr inbounds i64*, i64** %406, i64 1
  store i64** %408, i64*** %340, align 8
  %409 = icmp eq i64** %405, %404
  br i1 %409, label %410, label %455

410:                                              ; preds = %398
  %411 = ptrtoint i64** %408 to i64
  %412 = bitcast %"struct.std::__1::__split_buffer.7"* %4 to i64*
  %413 = bitcast i64*** %339 to i64*
  %414 = bitcast i64*** %340 to i64*
  %415 = bitcast i64*** %341 to i64*
  br label %427

416:                                              ; preds = %455
  %417 = ptrtoint i64** %458 to i64
  %418 = bitcast %"struct.std::__1::__split_buffer.7"* %4 to i64*
  %419 = load i64, i64* %418, align 8
  %420 = bitcast i64*** %339 to i64*
  %421 = load i64, i64* %420, align 8
  %422 = load i64, i64* %165, align 8
  %423 = bitcast i64*** %340 to i64*
  %424 = load i64, i64* %423, align 8
  %425 = bitcast i64*** %341 to i64*
  %426 = load i64, i64* %425, align 8
  br label %427

427:                                              ; preds = %410, %416
  %428 = phi i64* [ %415, %410 ], [ %425, %416 ]
  %429 = phi i64* [ %414, %410 ], [ %423, %416 ]
  %430 = phi i64* [ %413, %410 ], [ %420, %416 ]
  %431 = phi i64* [ %412, %410 ], [ %418, %416 ]
  %432 = phi i64 [ %399, %410 ], [ %426, %416 ]
  %433 = phi i64 [ %411, %410 ], [ %424, %416 ]
  %434 = phi i64 [ %400, %410 ], [ %422, %416 ]
  %435 = phi i64 [ %401, %410 ], [ %421, %416 ]
  %436 = phi i64 [ %402, %410 ], [ %417, %416 ]
  %437 = phi i64 [ %403, %410 ], [ %419, %416 ]
  %438 = load i64, i64* %175, align 8
  store i64 %437, i64* %175, align 8
  store i64 %438, i64* %431, align 8
  store i64 %435, i64* %168, align 8
  store i64 %436, i64* %430, align 8
  store i64 %433, i64* %165, align 8
  store i64 %434, i64* %429, align 8
  %439 = load i64, i64* %173, align 8
  store i64 %432, i64* %173, align 8
  store i64 %439, i64* %428, align 8
  %440 = inttoptr i64 %436 to i64**
  %441 = inttoptr i64 %434 to i64**
  %442 = icmp eq i64** %441, %440
  br i1 %442, label %450, label %443

443:                                              ; preds = %427
  %444 = getelementptr i64*, i64** %441, i64 -1
  %445 = ptrtoint i64** %444 to i64
  %446 = sub i64 %445, %436
  %447 = lshr i64 %446, 3
  %448 = xor i64 %447, -1
  %449 = getelementptr i64*, i64** %441, i64 %448
  store i64** %449, i64*** %340, align 8
  br label %450

450:                                              ; preds = %443, %427
  %451 = icmp eq i64 %438, 0
  br i1 %451, label %454, label %452

452:                                              ; preds = %450
  %453 = inttoptr i64 %438 to i8*
  call void @_ZdlPv(i8* %453) #7
  br label %454

454:                                              ; preds = %450, %452
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %338) #6
  br label %460

455:                                              ; preds = %398, %455
  %456 = phi i64** [ %457, %455 ], [ %405, %398 ]
  %457 = getelementptr inbounds i64*, i64** %456, i64 -1
  call void @_ZNSt3__114__split_bufferIPlRNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer.7"* nonnull %4, i64** dereferenceable(8) %457)
  %458 = load i64**, i64*** %167, align 8
  %459 = icmp eq i64** %457, %458
  br i1 %459, label %416, label %455

460:                                              ; preds = %454, %333, %184, %158
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPlNS_9allocatorIS1_EEE9push_backEOS1_(%"struct.std::__1::__split_buffer"*, i64** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load i64**, i64*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load i64**, i64*** %5, align 8
  %7 = icmp eq i64** %4, %6
  %8 = ptrtoint i64** %6 to i64
  %9 = bitcast i64** %4 to i64*
  br i1 %7, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %12 = load i64**, i64*** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %14 = load i64**, i64*** %13, align 8
  %15 = icmp ugt i64** %12, %14
  %16 = ptrtoint i64** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint i64** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds i64*, i64** %12, i64 %22
  %24 = ptrtoint i64** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast i64** %23 to i8*
  %30 = bitcast i64** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #6
  %31 = load i64**, i64*** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi i64** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds i64*, i64** %23, i64 %26
  store i64** %34, i64*** %3, align 8
  %35 = getelementptr inbounds i64*, i64** %33, i64 %22
  store i64** %35, i64*** %11, align 8
  %36 = bitcast i64** %34 to i64*
  br label %148

37:                                               ; preds = %10
  %38 = bitcast i64*** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %37
  tail call void @abort() #8
  unreachable

46:                                               ; preds = %37
  %47 = lshr i64 %43, 2
  %48 = shl i64 %43, 3
  %49 = tail call i8* @_Znwm(i64 %48) #7
  %50 = bitcast i8* %49 to i64**
  %51 = ptrtoint i8* %49 to i64
  %52 = getelementptr inbounds i64*, i64** %50, i64 %47
  %53 = ptrtoint i64** %52 to i64
  %54 = getelementptr inbounds i64*, i64** %50, i64 %43
  %55 = ptrtoint i64** %54 to i64
  %56 = ptrtoint i64** %12 to i64
  %57 = ptrtoint i64** %4 to i64
  %58 = sub i64 %57, %56
  %59 = ashr exact i64 %58, 3
  %60 = getelementptr inbounds i64*, i64** %52, i64 %59
  %61 = icmp eq i64 %58, 0
  br i1 %61, label %137, label %62

62:                                               ; preds = %46
  %63 = add i64 %58, -8
  %64 = lshr i64 %63, 3
  %65 = add nuw nsw i64 %64, 1
  %66 = and i64 %65, 7
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %83, label %68

68:                                               ; preds = %62, %68
  %69 = phi i64** [ %76, %68 ], [ %52, %62 ]
  %70 = phi i64 [ %77, %68 ], [ %53, %62 ]
  %71 = phi i64** [ %78, %68 ], [ %12, %62 ]
  %72 = phi i64 [ %79, %68 ], [ %66, %62 ]
  %73 = bitcast i64** %71 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = inttoptr i64 %70 to i64*
  store i64 %74, i64* %75, align 8
  %76 = getelementptr inbounds i64*, i64** %69, i64 1
  %77 = ptrtoint i64** %76 to i64
  %78 = getelementptr inbounds i64*, i64** %71, i64 1
  %79 = add i64 %72, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %68, !llvm.loop !6

81:                                               ; preds = %68
  %82 = ptrtoint i64** %76 to i64
  br label %83

83:                                               ; preds = %62, %81
  %84 = phi i64** [ %52, %62 ], [ %76, %81 ]
  %85 = phi i64 [ %53, %62 ], [ %82, %81 ]
  %86 = phi i64** [ %12, %62 ], [ %78, %81 ]
  %87 = icmp ult i64 %63, 56
  br i1 %87, label %134, label %88

88:                                               ; preds = %83, %88
  %89 = phi i64** [ %130, %88 ], [ %84, %83 ]
  %90 = phi i64 [ %131, %88 ], [ %85, %83 ]
  %91 = phi i64** [ %132, %88 ], [ %86, %83 ]
  %92 = bitcast i64** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = inttoptr i64 %90 to i64*
  store i64 %93, i64* %94, align 8
  %95 = getelementptr inbounds i64*, i64** %89, i64 1
  %96 = getelementptr inbounds i64*, i64** %91, i64 1
  %97 = bitcast i64** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = bitcast i64** %95 to i64*
  store i64 %98, i64* %99, align 8
  %100 = getelementptr inbounds i64*, i64** %89, i64 2
  %101 = getelementptr inbounds i64*, i64** %91, i64 2
  %102 = bitcast i64** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = bitcast i64** %100 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds i64*, i64** %89, i64 3
  %106 = getelementptr inbounds i64*, i64** %91, i64 3
  %107 = bitcast i64** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = bitcast i64** %105 to i64*
  store i64 %108, i64* %109, align 8
  %110 = getelementptr inbounds i64*, i64** %89, i64 4
  %111 = getelementptr inbounds i64*, i64** %91, i64 4
  %112 = bitcast i64** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = bitcast i64** %110 to i64*
  store i64 %113, i64* %114, align 8
  %115 = getelementptr inbounds i64*, i64** %89, i64 5
  %116 = getelementptr inbounds i64*, i64** %91, i64 5
  %117 = bitcast i64** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = bitcast i64** %115 to i64*
  store i64 %118, i64* %119, align 8
  %120 = getelementptr inbounds i64*, i64** %89, i64 6
  %121 = getelementptr inbounds i64*, i64** %91, i64 6
  %122 = bitcast i64** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = bitcast i64** %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds i64*, i64** %89, i64 7
  %126 = getelementptr inbounds i64*, i64** %91, i64 7
  %127 = bitcast i64** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast i64** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds i64*, i64** %89, i64 8
  %131 = ptrtoint i64** %130 to i64
  %132 = getelementptr inbounds i64*, i64** %91, i64 8
  %133 = icmp eq i64** %60, %130
  br i1 %133, label %134, label %88

134:                                              ; preds = %88, %83
  %135 = ptrtoint i64** %60 to i64
  %136 = load i64**, i64*** %13, align 8
  br label %137

137:                                              ; preds = %46, %134
  %138 = phi i64** [ %136, %134 ], [ %14, %46 ]
  %139 = phi i64 [ %135, %134 ], [ %53, %46 ]
  store i64 %51, i64* %39, align 8
  %140 = bitcast i64*** %11 to i64*
  store i64 %53, i64* %140, align 8
  %141 = bitcast i64*** %3 to i64*
  store i64 %139, i64* %141, align 8
  store i64 %55, i64* %38, align 8
  %142 = icmp eq i64** %138, null
  %143 = inttoptr i64 %139 to i64*
  br i1 %142, label %148, label %144

144:                                              ; preds = %137
  %145 = bitcast i64** %138 to i8*
  tail call void @_ZdlPv(i8* %145) #7
  %146 = bitcast i64*** %3 to i64**
  %147 = load i64*, i64** %146, align 8
  br label %148

148:                                              ; preds = %144, %137, %32, %2
  %149 = phi i64* [ %147, %144 ], [ %143, %137 ], [ %36, %32 ], [ %9, %2 ]
  %150 = bitcast i64** %1 to i64*
  %151 = load i64, i64* %150, align 8
  store i64 %151, i64* %149, align 8
  %152 = load i64**, i64*** %3, align 8
  %153 = getelementptr inbounds i64*, i64** %152, i64 1
  store i64** %153, i64*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPlNS_9allocatorIS1_EEE10push_frontEOS1_(%"struct.std::__1::__split_buffer"*, i64** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load i64**, i64*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load i64**, i64*** %5, align 8
  %7 = icmp eq i64** %4, %6
  %8 = ptrtoint i64** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load i64**, i64*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load i64**, i64*** %12, align 8
  %14 = icmp ult i64** %11, %13
  %15 = bitcast i64*** %12 to i64*
  %16 = ptrtoint i64** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint i64** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds i64*, i64** %11, i64 %22
  %24 = ptrtoint i64** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds i64*, i64** %23, i64 %29
  %31 = bitcast i64** %30 to i8*
  %32 = bitcast i64** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #6
  %33 = load i64**, i64*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi i64** [ %33, %27 ], [ %11, %17 ]
  %36 = phi i64** [ %30, %27 ], [ %23, %17 ]
  store i64** %36, i64*** %3, align 8
  %37 = getelementptr inbounds i64*, i64** %35, i64 %22
  store i64** %37, i64*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #8
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #7
  %51 = bitcast i8* %50 to i64**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds i64*, i64** %51, i64 %48
  %54 = ptrtoint i64** %53 to i64
  %55 = getelementptr inbounds i64*, i64** %51, i64 %43
  %56 = ptrtoint i64** %55 to i64
  %57 = ptrtoint i64** %4 to i64
  %58 = ptrtoint i64** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds i64*, i64** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi i64** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi i64** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast i64** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds i64*, i64** %70, i64 1
  %78 = ptrtoint i64** %77 to i64
  %79 = getelementptr inbounds i64*, i64** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !7

82:                                               ; preds = %69
  %83 = ptrtoint i64** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi i64** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi i64** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi i64** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi i64** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast i64** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds i64*, i64** %90, i64 1
  %97 = getelementptr inbounds i64*, i64** %92, i64 1
  %98 = bitcast i64** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast i64** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds i64*, i64** %90, i64 2
  %102 = getelementptr inbounds i64*, i64** %92, i64 2
  %103 = bitcast i64** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast i64** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds i64*, i64** %90, i64 3
  %107 = getelementptr inbounds i64*, i64** %92, i64 3
  %108 = bitcast i64** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast i64** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds i64*, i64** %90, i64 4
  %112 = getelementptr inbounds i64*, i64** %92, i64 4
  %113 = bitcast i64** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast i64** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds i64*, i64** %90, i64 5
  %117 = getelementptr inbounds i64*, i64** %92, i64 5
  %118 = bitcast i64** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast i64** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds i64*, i64** %90, i64 6
  %122 = getelementptr inbounds i64*, i64** %92, i64 6
  %123 = bitcast i64** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast i64** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds i64*, i64** %90, i64 7
  %127 = getelementptr inbounds i64*, i64** %92, i64 7
  %128 = bitcast i64** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast i64** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds i64*, i64** %90, i64 8
  %132 = ptrtoint i64** %131 to i64
  %133 = getelementptr inbounds i64*, i64** %92, i64 8
  %134 = icmp eq i64** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint i64** %61 to i64
  %137 = load i64**, i64*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi i64** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast i64*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast i64*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq i64** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast i64** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #7
  %146 = load i64**, i64*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi i64** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds i64*, i64** %148, i64 -1
  %150 = bitcast i64** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast i64** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load i64**, i64*** %3, align 8
  %154 = getelementptr inbounds i64*, i64** %153, i64 -1
  store i64** %154, i64*** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPlRNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer.7"*, i64** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.7", %"struct.std::__1::__split_buffer.7"* %0, i64 0, i32 1
  %4 = load i64**, i64*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.7", %"struct.std::__1::__split_buffer.7"* %0, i64 0, i32 0
  %6 = load i64**, i64*** %5, align 8
  %7 = icmp eq i64** %4, %6
  %8 = ptrtoint i64** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.7", %"struct.std::__1::__split_buffer.7"* %0, i64 0, i32 2
  %11 = load i64**, i64*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.7", %"struct.std::__1::__split_buffer.7"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load i64**, i64*** %12, align 8
  %14 = icmp ult i64** %11, %13
  %15 = bitcast i64*** %12 to i64*
  %16 = ptrtoint i64** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint i64** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds i64*, i64** %11, i64 %22
  %24 = ptrtoint i64** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds i64*, i64** %23, i64 %29
  %31 = bitcast i64** %30 to i8*
  %32 = bitcast i64** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #6
  %33 = load i64**, i64*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi i64** [ %33, %27 ], [ %11, %17 ]
  %36 = phi i64** [ %30, %27 ], [ %23, %17 ]
  store i64** %36, i64*** %3, align 8
  %37 = getelementptr inbounds i64*, i64** %35, i64 %22
  store i64** %37, i64*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.7"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #8
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #7
  %51 = bitcast i8* %50 to i64**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds i64*, i64** %51, i64 %48
  %54 = ptrtoint i64** %53 to i64
  %55 = getelementptr inbounds i64*, i64** %51, i64 %43
  %56 = ptrtoint i64** %55 to i64
  %57 = ptrtoint i64** %4 to i64
  %58 = ptrtoint i64** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds i64*, i64** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi i64** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi i64** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast i64** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds i64*, i64** %70, i64 1
  %78 = ptrtoint i64** %77 to i64
  %79 = getelementptr inbounds i64*, i64** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !8

82:                                               ; preds = %69
  %83 = ptrtoint i64** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi i64** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi i64** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi i64** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi i64** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast i64** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds i64*, i64** %90, i64 1
  %97 = getelementptr inbounds i64*, i64** %92, i64 1
  %98 = bitcast i64** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast i64** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds i64*, i64** %90, i64 2
  %102 = getelementptr inbounds i64*, i64** %92, i64 2
  %103 = bitcast i64** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast i64** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds i64*, i64** %90, i64 3
  %107 = getelementptr inbounds i64*, i64** %92, i64 3
  %108 = bitcast i64** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast i64** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds i64*, i64** %90, i64 4
  %112 = getelementptr inbounds i64*, i64** %92, i64 4
  %113 = bitcast i64** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast i64** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds i64*, i64** %90, i64 5
  %117 = getelementptr inbounds i64*, i64** %92, i64 5
  %118 = bitcast i64** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast i64** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds i64*, i64** %90, i64 6
  %122 = getelementptr inbounds i64*, i64** %92, i64 6
  %123 = bitcast i64** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast i64** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds i64*, i64** %90, i64 7
  %127 = getelementptr inbounds i64*, i64** %92, i64 7
  %128 = bitcast i64** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast i64** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds i64*, i64** %90, i64 8
  %132 = ptrtoint i64** %131 to i64
  %133 = getelementptr inbounds i64*, i64** %92, i64 8
  %134 = icmp eq i64** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint i64** %61 to i64
  %137 = load i64**, i64*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi i64** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast i64*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast i64*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq i64** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast i64** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #7
  %146 = load i64**, i64*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi i64** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds i64*, i64** %148, i64 -1
  %150 = bitcast i64** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast i64** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load i64**, i64*** %3, align 8
  %154 = getelementptr inbounds i64*, i64** %153, i64 -1
  store i64** %154, i64*** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #3

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIlNS_9allocatorIlEEE20__add_front_capacityEm(%"class.std::__1::deque"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca i64*, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  %7 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i64**, i64*** %8, align 8
  %10 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %11 = load i64**, i64*** %10, align 8
  %12 = icmp eq i64** %9, %11
  %13 = zext i1 %12 to i64
  %14 = add i64 %13, %1
  %15 = lshr i64 %14, 9
  %16 = and i64 %14, 511
  %17 = icmp ne i64 %16, 0
  %18 = zext i1 %17 to i64
  %19 = add nuw nsw i64 %15, %18
  %20 = bitcast i64*** %8 to i64*
  %21 = ptrtoint i64** %9 to i64
  %22 = bitcast i64*** %10 to i64*
  %23 = ptrtoint i64** %11 to i64
  %24 = sub i64 %21, %23
  %25 = icmp eq i64 %24, 0
  %26 = shl i64 %24, 6
  %27 = add i64 %26, -1
  %28 = select i1 %25, i64 0, i64 %27
  %29 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = add i64 %32, %30
  %34 = sub i64 %28, %33
  %35 = lshr i64 %34, 9
  %36 = icmp ult i64 %19, %35
  %37 = select i1 %36, i64 %19, i64 %35
  %38 = sub nsw i64 %19, %37
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %60

40:                                               ; preds = %2
  %41 = shl nuw i64 %37, 9
  %42 = add i64 %41, %30
  store i64 %42, i64* %29, align 8
  %43 = icmp eq i64 %37, 0
  br i1 %43, label %607, label %44

44:                                               ; preds = %40
  %45 = bitcast i64** %3 to i8*
  %46 = bitcast i64** %3 to i64*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #6
  store i64* inttoptr (i64 -6148914691236517206 to i64*), i64** %3, align 8
  %47 = getelementptr i64*, i64** %9, i64 -1
  %48 = bitcast i64** %47 to i64*
  %49 = load i64, i64* %48, align 8
  store i64 %49, i64* %46, align 8
  store i64** %47, i64*** %8, align 8
  call void @_ZNSt3__114__split_bufferIPlNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer"* %7, i64** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #6
  %50 = add nsw i64 %37, -1
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %607, label %52

52:                                               ; preds = %44, %52
  %53 = phi i64 [ %58, %52 ], [ %50, %44 ]
  %54 = load i64**, i64*** %8, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #6
  store i64* inttoptr (i64 -6148914691236517206 to i64*), i64** %3, align 8
  %55 = getelementptr i64*, i64** %54, i64 -1
  %56 = bitcast i64** %55 to i64*
  %57 = load i64, i64* %56, align 8
  store i64 %57, i64* %46, align 8
  store i64** %55, i64*** %8, align 8
  call void @_ZNSt3__114__split_bufferIPlNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer"* %7, i64** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45) #6
  %58 = add i64 %53, -1
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %607, label %52

60:                                               ; preds = %2
  %61 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %62 = bitcast i64*** %61 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = bitcast %"class.std::__1::deque"* %0 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = sub i64 %63, %65
  %67 = ashr exact i64 %66, 3
  %68 = ashr exact i64 %24, 3
  %69 = sub nsw i64 %67, %68
  %70 = icmp ugt i64 %38, %69
  br i1 %70, label %122, label %71

71:                                               ; preds = %60
  %72 = bitcast i64** %4 to i8*
  %73 = bitcast i64** %4 to i8**
  %74 = icmp eq i64 %65, %23
  br i1 %74, label %90, label %75

75:                                               ; preds = %71, %87
  %76 = phi i64 [ %78, %87 ], [ %38, %71 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %72) #6
  %77 = call i8* @_Znwm(i64 4096) #7
  store i8* %77, i8** %73, align 8
  call void @_ZNSt3__114__split_bufferIPlNS_9allocatorIS1_EEE10push_frontEOS1_(%"struct.std::__1::__split_buffer"* %7, i64** nonnull dereferenceable(8) %4)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %72) #6
  %78 = add i64 %76, -1
  %79 = load i64, i64* %20, align 8
  %80 = load i64, i64* %22, align 8
  %81 = sub i64 %79, %80
  %82 = icmp eq i64 %81, 8
  %83 = select i1 %82, i64 511, i64 512
  %84 = load i64, i64* %29, align 8
  %85 = add i64 %83, %84
  store i64 %85, i64* %29, align 8
  %86 = icmp eq i64 %78, 0
  br i1 %86, label %105, label %87

87:                                               ; preds = %75
  %88 = load i64, i64* %64, align 8
  %89 = icmp eq i64 %80, %88
  br i1 %89, label %90, label %75

90:                                               ; preds = %87, %71
  %91 = phi i64 [ %30, %71 ], [ %85, %87 ]
  %92 = phi i64 [ %38, %71 ], [ %78, %87 ]
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %105, label %94

94:                                               ; preds = %90
  %95 = bitcast i64** %5 to i8*
  %96 = bitcast i64** %5 to i8**
  br label %97

97:                                               ; preds = %94, %97
  %98 = phi i64 [ %92, %94 ], [ %100, %97 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %95) #6
  %99 = call i8* @_Znwm(i64 4096) #7
  store i8* %99, i8** %96, align 8
  call void @_ZNSt3__114__split_bufferIPlNS_9allocatorIS1_EEE9push_backEOS1_(%"struct.std::__1::__split_buffer"* %7, i64** nonnull dereferenceable(8) %5)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %95) #6
  %100 = add i64 %98, -1
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %97

102:                                              ; preds = %97
  %103 = add i64 %92, %37
  %104 = load i64, i64* %29, align 8
  br label %105

105:                                              ; preds = %75, %102, %90
  %106 = phi i64 [ %91, %90 ], [ %104, %102 ], [ %85, %75 ]
  %107 = phi i64 [ %37, %90 ], [ %103, %102 ], [ %37, %75 ]
  %108 = shl i64 %107, 9
  %109 = add i64 %106, %108
  store i64 %109, i64* %29, align 8
  %110 = icmp eq i64 %107, 0
  br i1 %110, label %607, label %111

111:                                              ; preds = %105
  %112 = bitcast i64** %6 to i8*
  %113 = bitcast i64** %6 to i64*
  br label %114

114:                                              ; preds = %111, %114
  %115 = phi i64 [ %107, %111 ], [ %120, %114 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %112) #6
  store i64* inttoptr (i64 -6148914691236517206 to i64*), i64** %6, align 8
  %116 = load i64**, i64*** %8, align 8
  %117 = getelementptr i64*, i64** %116, i64 -1
  %118 = bitcast i64** %117 to i64*
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %113, align 8
  store i64** %117, i64*** %8, align 8
  call void @_ZNSt3__114__split_bufferIPlNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer"* %7, i64** nonnull dereferenceable(8) %6)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %112) #6
  %120 = add i64 %115, -1
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %607, label %114

122:                                              ; preds = %60
  %123 = shl i64 %19, 9
  %124 = sub i64 %123, %13
  %125 = ashr exact i64 %66, 2
  %126 = add nsw i64 %68, %38
  %127 = icmp ult i64 %125, %126
  %128 = select i1 %127, i64 %126, i64 %125
  %129 = icmp eq i64 %128, 0
  br i1 %129, label %137, label %130

130:                                              ; preds = %122
  %131 = icmp ugt i64 %128, 2305843009213693951
  br i1 %131, label %132, label %133

132:                                              ; preds = %130
  tail call void @abort() #8
  unreachable

133:                                              ; preds = %130
  %134 = shl i64 %128, 3
  %135 = tail call i8* @_Znwm(i64 %134) #7
  %136 = bitcast i8* %135 to i64**
  br label %137

137:                                              ; preds = %133, %122
  %138 = phi i64** [ %136, %133 ], [ null, %122 ]
  %139 = ptrtoint i64** %138 to i64
  %140 = getelementptr inbounds i64*, i64** %138, i64 %128
  %141 = ptrtoint i64** %140 to i64
  br label %146

142:                                              ; preds = %280
  %143 = ptrtoint i64** %286 to i64
  %144 = icmp eq i64 %37, 0
  %145 = load i64**, i64*** %8, align 8
  br i1 %144, label %440, label %290

146:                                              ; preds = %137, %280
  %147 = phi i64 [ %288, %280 ], [ %38, %137 ]
  %148 = phi i64 [ %284, %280 ], [ %139, %137 ]
  %149 = phi i64 [ %283, %280 ], [ %141, %137 ]
  %150 = phi i64 [ %287, %280 ], [ %139, %137 ]
  %151 = phi i64 [ %281, %280 ], [ %139, %137 ]
  %152 = tail call i8* @_Znwm(i64 4096) #7
  %153 = ptrtoint i8* %152 to i64
  %154 = inttoptr i64 %150 to i64**
  %155 = inttoptr i64 %149 to i64**
  %156 = icmp eq i64** %154, %155
  %157 = inttoptr i64 %150 to i64*
  br i1 %156, label %158, label %280

158:                                              ; preds = %146
  %159 = inttoptr i64 %151 to i64**
  %160 = inttoptr i64 %148 to i64**
  %161 = icmp ugt i64** %159, %160
  br i1 %161, label %162, label %178

162:                                              ; preds = %158
  %163 = sub i64 %151, %148
  %164 = ashr exact i64 %163, 3
  %165 = add nsw i64 %164, 1
  %166 = sdiv i64 %165, -2
  %167 = getelementptr inbounds i64*, i64** %159, i64 %166
  %168 = sub i64 %150, %151
  %169 = ashr exact i64 %168, 3
  %170 = icmp eq i64 %168, 0
  br i1 %170, label %174, label %171

171:                                              ; preds = %162
  %172 = bitcast i64** %167 to i8*
  %173 = inttoptr i64 %151 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %172, i8* align 8 %173, i64 %168, i1 false) #6
  br label %174

174:                                              ; preds = %171, %162
  %175 = getelementptr inbounds i64*, i64** %167, i64 %169
  %176 = ptrtoint i64** %167 to i64
  %177 = bitcast i64** %175 to i64*
  br label %280

178:                                              ; preds = %158
  %179 = sub i64 %149, %148
  %180 = ashr exact i64 %179, 2
  %181 = icmp eq i64 %179, 0
  %182 = select i1 %181, i64 1, i64 %180
  %183 = icmp ugt i64 %182, 2305843009213693951
  br i1 %183, label %184, label %185

184:                                              ; preds = %178
  tail call void @abort() #8
  unreachable

185:                                              ; preds = %178
  %186 = lshr i64 %182, 2
  %187 = shl i64 %182, 3
  %188 = tail call i8* @_Znwm(i64 %187) #7
  %189 = bitcast i8* %188 to i64**
  %190 = ptrtoint i8* %188 to i64
  %191 = getelementptr inbounds i64*, i64** %189, i64 %186
  %192 = ptrtoint i64** %191 to i64
  %193 = getelementptr inbounds i64*, i64** %189, i64 %182
  %194 = ptrtoint i64** %193 to i64
  %195 = sub i64 %150, %151
  %196 = ashr exact i64 %195, 3
  %197 = getelementptr inbounds i64*, i64** %191, i64 %196
  %198 = icmp eq i64 %195, 0
  br i1 %198, label %273, label %199

199:                                              ; preds = %185
  %200 = add i64 %195, -8
  %201 = lshr i64 %200, 3
  %202 = add nuw nsw i64 %201, 1
  %203 = and i64 %202, 7
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %220, label %205

205:                                              ; preds = %199, %205
  %206 = phi i64** [ %213, %205 ], [ %191, %199 ]
  %207 = phi i64 [ %214, %205 ], [ %192, %199 ]
  %208 = phi i64** [ %215, %205 ], [ %159, %199 ]
  %209 = phi i64 [ %216, %205 ], [ %203, %199 ]
  %210 = bitcast i64** %208 to i64*
  %211 = load i64, i64* %210, align 8
  %212 = inttoptr i64 %207 to i64*
  store i64 %211, i64* %212, align 8
  %213 = getelementptr inbounds i64*, i64** %206, i64 1
  %214 = ptrtoint i64** %213 to i64
  %215 = getelementptr inbounds i64*, i64** %208, i64 1
  %216 = add i64 %209, -1
  %217 = icmp eq i64 %216, 0
  br i1 %217, label %218, label %205, !llvm.loop !9

218:                                              ; preds = %205
  %219 = ptrtoint i64** %213 to i64
  br label %220

220:                                              ; preds = %199, %218
  %221 = phi i64** [ %191, %199 ], [ %213, %218 ]
  %222 = phi i64 [ %192, %199 ], [ %219, %218 ]
  %223 = phi i64** [ %159, %199 ], [ %215, %218 ]
  %224 = icmp ult i64 %200, 56
  br i1 %224, label %271, label %225

225:                                              ; preds = %220, %225
  %226 = phi i64** [ %267, %225 ], [ %221, %220 ]
  %227 = phi i64 [ %268, %225 ], [ %222, %220 ]
  %228 = phi i64** [ %269, %225 ], [ %223, %220 ]
  %229 = bitcast i64** %228 to i64*
  %230 = load i64, i64* %229, align 8
  %231 = inttoptr i64 %227 to i64*
  store i64 %230, i64* %231, align 8
  %232 = getelementptr inbounds i64*, i64** %226, i64 1
  %233 = getelementptr inbounds i64*, i64** %228, i64 1
  %234 = bitcast i64** %233 to i64*
  %235 = load i64, i64* %234, align 8
  %236 = bitcast i64** %232 to i64*
  store i64 %235, i64* %236, align 8
  %237 = getelementptr inbounds i64*, i64** %226, i64 2
  %238 = getelementptr inbounds i64*, i64** %228, i64 2
  %239 = bitcast i64** %238 to i64*
  %240 = load i64, i64* %239, align 8
  %241 = bitcast i64** %237 to i64*
  store i64 %240, i64* %241, align 8
  %242 = getelementptr inbounds i64*, i64** %226, i64 3
  %243 = getelementptr inbounds i64*, i64** %228, i64 3
  %244 = bitcast i64** %243 to i64*
  %245 = load i64, i64* %244, align 8
  %246 = bitcast i64** %242 to i64*
  store i64 %245, i64* %246, align 8
  %247 = getelementptr inbounds i64*, i64** %226, i64 4
  %248 = getelementptr inbounds i64*, i64** %228, i64 4
  %249 = bitcast i64** %248 to i64*
  %250 = load i64, i64* %249, align 8
  %251 = bitcast i64** %247 to i64*
  store i64 %250, i64* %251, align 8
  %252 = getelementptr inbounds i64*, i64** %226, i64 5
  %253 = getelementptr inbounds i64*, i64** %228, i64 5
  %254 = bitcast i64** %253 to i64*
  %255 = load i64, i64* %254, align 8
  %256 = bitcast i64** %252 to i64*
  store i64 %255, i64* %256, align 8
  %257 = getelementptr inbounds i64*, i64** %226, i64 6
  %258 = getelementptr inbounds i64*, i64** %228, i64 6
  %259 = bitcast i64** %258 to i64*
  %260 = load i64, i64* %259, align 8
  %261 = bitcast i64** %257 to i64*
  store i64 %260, i64* %261, align 8
  %262 = getelementptr inbounds i64*, i64** %226, i64 7
  %263 = getelementptr inbounds i64*, i64** %228, i64 7
  %264 = bitcast i64** %263 to i64*
  %265 = load i64, i64* %264, align 8
  %266 = bitcast i64** %262 to i64*
  store i64 %265, i64* %266, align 8
  %267 = getelementptr inbounds i64*, i64** %226, i64 8
  %268 = ptrtoint i64** %267 to i64
  %269 = getelementptr inbounds i64*, i64** %228, i64 8
  %270 = icmp eq i64** %197, %267
  br i1 %270, label %271, label %225

271:                                              ; preds = %225, %220
  %272 = ptrtoint i64** %197 to i64
  br label %273

273:                                              ; preds = %271, %185
  %274 = phi i64 [ %272, %271 ], [ %192, %185 ]
  %275 = inttoptr i64 %274 to i64**
  %276 = icmp eq i64 %148, 0
  %277 = inttoptr i64 %274 to i64*
  br i1 %276, label %280, label %278

278:                                              ; preds = %273
  %279 = inttoptr i64 %148 to i8*
  tail call void @_ZdlPv(i8* %279) #7
  br label %280

280:                                              ; preds = %146, %174, %273, %278
  %281 = phi i64 [ %176, %174 ], [ %192, %273 ], [ %192, %278 ], [ %151, %146 ]
  %282 = phi i64** [ %175, %174 ], [ %275, %273 ], [ %275, %278 ], [ %154, %146 ]
  %283 = phi i64 [ %149, %174 ], [ %194, %273 ], [ %194, %278 ], [ %149, %146 ]
  %284 = phi i64 [ %148, %174 ], [ %190, %273 ], [ %190, %278 ], [ %148, %146 ]
  %285 = phi i64* [ %177, %174 ], [ %277, %273 ], [ %277, %278 ], [ %157, %146 ]
  store i64 %153, i64* %285, align 8
  %286 = getelementptr inbounds i64*, i64** %282, i64 1
  %287 = ptrtoint i64** %286 to i64
  %288 = add i64 %147, -1
  %289 = icmp eq i64 %288, 0
  br i1 %289, label %142, label %146

290:                                              ; preds = %142, %424
  %291 = phi i64** [ %435, %424 ], [ %145, %142 ]
  %292 = phi i64 [ %436, %424 ], [ %37, %142 ]
  %293 = phi i64 [ %428, %424 ], [ %284, %142 ]
  %294 = phi i64 [ %427, %424 ], [ %283, %142 ]
  %295 = phi i64 [ %433, %424 ], [ %143, %142 ]
  %296 = phi i64 [ %425, %424 ], [ %281, %142 ]
  %297 = getelementptr inbounds i64*, i64** %291, i64 -1
  %298 = inttoptr i64 %295 to i64**
  %299 = inttoptr i64 %294 to i64**
  %300 = icmp eq i64** %298, %299
  %301 = inttoptr i64 %295 to i64*
  br i1 %300, label %302, label %424

302:                                              ; preds = %290
  %303 = inttoptr i64 %296 to i64**
  %304 = inttoptr i64 %293 to i64**
  %305 = icmp ugt i64** %303, %304
  br i1 %305, label %306, label %322

306:                                              ; preds = %302
  %307 = sub i64 %296, %293
  %308 = ashr exact i64 %307, 3
  %309 = add nsw i64 %308, 1
  %310 = sdiv i64 %309, -2
  %311 = getelementptr inbounds i64*, i64** %303, i64 %310
  %312 = sub i64 %295, %296
  %313 = ashr exact i64 %312, 3
  %314 = icmp eq i64 %312, 0
  br i1 %314, label %318, label %315

315:                                              ; preds = %306
  %316 = bitcast i64** %311 to i8*
  %317 = inttoptr i64 %296 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %316, i8* align 8 %317, i64 %312, i1 false) #6
  br label %318

318:                                              ; preds = %315, %306
  %319 = getelementptr inbounds i64*, i64** %311, i64 %313
  %320 = ptrtoint i64** %311 to i64
  %321 = bitcast i64** %319 to i64*
  br label %424

322:                                              ; preds = %302
  %323 = sub i64 %294, %293
  %324 = ashr exact i64 %323, 2
  %325 = icmp eq i64 %323, 0
  %326 = select i1 %325, i64 1, i64 %324
  %327 = icmp ugt i64 %326, 2305843009213693951
  br i1 %327, label %328, label %329

328:                                              ; preds = %322
  tail call void @abort() #8
  unreachable

329:                                              ; preds = %322
  %330 = lshr i64 %326, 2
  %331 = shl i64 %326, 3
  %332 = tail call i8* @_Znwm(i64 %331) #7
  %333 = bitcast i8* %332 to i64**
  %334 = ptrtoint i8* %332 to i64
  %335 = getelementptr inbounds i64*, i64** %333, i64 %330
  %336 = ptrtoint i64** %335 to i64
  %337 = getelementptr inbounds i64*, i64** %333, i64 %326
  %338 = ptrtoint i64** %337 to i64
  %339 = sub i64 %295, %296
  %340 = ashr exact i64 %339, 3
  %341 = getelementptr inbounds i64*, i64** %335, i64 %340
  %342 = icmp eq i64 %339, 0
  br i1 %342, label %417, label %343

343:                                              ; preds = %329
  %344 = add i64 %339, -8
  %345 = lshr i64 %344, 3
  %346 = add nuw nsw i64 %345, 1
  %347 = and i64 %346, 7
  %348 = icmp eq i64 %347, 0
  br i1 %348, label %364, label %349

349:                                              ; preds = %343, %349
  %350 = phi i64** [ %357, %349 ], [ %335, %343 ]
  %351 = phi i64 [ %358, %349 ], [ %336, %343 ]
  %352 = phi i64** [ %359, %349 ], [ %303, %343 ]
  %353 = phi i64 [ %360, %349 ], [ %347, %343 ]
  %354 = bitcast i64** %352 to i64*
  %355 = load i64, i64* %354, align 8
  %356 = inttoptr i64 %351 to i64*
  store i64 %355, i64* %356, align 8
  %357 = getelementptr inbounds i64*, i64** %350, i64 1
  %358 = ptrtoint i64** %357 to i64
  %359 = getelementptr inbounds i64*, i64** %352, i64 1
  %360 = add i64 %353, -1
  %361 = icmp eq i64 %360, 0
  br i1 %361, label %362, label %349, !llvm.loop !10

362:                                              ; preds = %349
  %363 = ptrtoint i64** %357 to i64
  br label %364

364:                                              ; preds = %343, %362
  %365 = phi i64** [ %335, %343 ], [ %357, %362 ]
  %366 = phi i64 [ %336, %343 ], [ %363, %362 ]
  %367 = phi i64** [ %303, %343 ], [ %359, %362 ]
  %368 = icmp ult i64 %344, 56
  br i1 %368, label %415, label %369

369:                                              ; preds = %364, %369
  %370 = phi i64** [ %411, %369 ], [ %365, %364 ]
  %371 = phi i64 [ %412, %369 ], [ %366, %364 ]
  %372 = phi i64** [ %413, %369 ], [ %367, %364 ]
  %373 = bitcast i64** %372 to i64*
  %374 = load i64, i64* %373, align 8
  %375 = inttoptr i64 %371 to i64*
  store i64 %374, i64* %375, align 8
  %376 = getelementptr inbounds i64*, i64** %370, i64 1
  %377 = getelementptr inbounds i64*, i64** %372, i64 1
  %378 = bitcast i64** %377 to i64*
  %379 = load i64, i64* %378, align 8
  %380 = bitcast i64** %376 to i64*
  store i64 %379, i64* %380, align 8
  %381 = getelementptr inbounds i64*, i64** %370, i64 2
  %382 = getelementptr inbounds i64*, i64** %372, i64 2
  %383 = bitcast i64** %382 to i64*
  %384 = load i64, i64* %383, align 8
  %385 = bitcast i64** %381 to i64*
  store i64 %384, i64* %385, align 8
  %386 = getelementptr inbounds i64*, i64** %370, i64 3
  %387 = getelementptr inbounds i64*, i64** %372, i64 3
  %388 = bitcast i64** %387 to i64*
  %389 = load i64, i64* %388, align 8
  %390 = bitcast i64** %386 to i64*
  store i64 %389, i64* %390, align 8
  %391 = getelementptr inbounds i64*, i64** %370, i64 4
  %392 = getelementptr inbounds i64*, i64** %372, i64 4
  %393 = bitcast i64** %392 to i64*
  %394 = load i64, i64* %393, align 8
  %395 = bitcast i64** %391 to i64*
  store i64 %394, i64* %395, align 8
  %396 = getelementptr inbounds i64*, i64** %370, i64 5
  %397 = getelementptr inbounds i64*, i64** %372, i64 5
  %398 = bitcast i64** %397 to i64*
  %399 = load i64, i64* %398, align 8
  %400 = bitcast i64** %396 to i64*
  store i64 %399, i64* %400, align 8
  %401 = getelementptr inbounds i64*, i64** %370, i64 6
  %402 = getelementptr inbounds i64*, i64** %372, i64 6
  %403 = bitcast i64** %402 to i64*
  %404 = load i64, i64* %403, align 8
  %405 = bitcast i64** %401 to i64*
  store i64 %404, i64* %405, align 8
  %406 = getelementptr inbounds i64*, i64** %370, i64 7
  %407 = getelementptr inbounds i64*, i64** %372, i64 7
  %408 = bitcast i64** %407 to i64*
  %409 = load i64, i64* %408, align 8
  %410 = bitcast i64** %406 to i64*
  store i64 %409, i64* %410, align 8
  %411 = getelementptr inbounds i64*, i64** %370, i64 8
  %412 = ptrtoint i64** %411 to i64
  %413 = getelementptr inbounds i64*, i64** %372, i64 8
  %414 = icmp eq i64** %341, %411
  br i1 %414, label %415, label %369

415:                                              ; preds = %369, %364
  %416 = ptrtoint i64** %341 to i64
  br label %417

417:                                              ; preds = %415, %329
  %418 = phi i64 [ %416, %415 ], [ %336, %329 ]
  %419 = inttoptr i64 %418 to i64**
  %420 = icmp eq i64 %293, 0
  %421 = inttoptr i64 %418 to i64*
  br i1 %420, label %424, label %422

422:                                              ; preds = %417
  %423 = inttoptr i64 %293 to i8*
  tail call void @_ZdlPv(i8* %423) #7
  br label %424

424:                                              ; preds = %290, %318, %417, %422
  %425 = phi i64 [ %320, %318 ], [ %336, %417 ], [ %336, %422 ], [ %296, %290 ]
  %426 = phi i64** [ %319, %318 ], [ %419, %417 ], [ %419, %422 ], [ %298, %290 ]
  %427 = phi i64 [ %294, %318 ], [ %338, %417 ], [ %338, %422 ], [ %294, %290 ]
  %428 = phi i64 [ %293, %318 ], [ %334, %417 ], [ %334, %422 ], [ %293, %290 ]
  %429 = phi i64* [ %321, %318 ], [ %421, %417 ], [ %421, %422 ], [ %301, %290 ]
  %430 = bitcast i64** %297 to i64*
  %431 = load i64, i64* %430, align 8
  store i64 %431, i64* %429, align 8
  %432 = getelementptr inbounds i64*, i64** %426, i64 1
  %433 = ptrtoint i64** %432 to i64
  %434 = load i64**, i64*** %8, align 8
  %435 = getelementptr i64*, i64** %434, i64 -1
  store i64** %435, i64*** %8, align 8
  %436 = add i64 %292, -1
  %437 = icmp eq i64 %436, 0
  br i1 %437, label %438, label %290

438:                                              ; preds = %424
  %439 = ptrtoint i64** %432 to i64
  br label %440

440:                                              ; preds = %142, %438
  %441 = phi i64** [ %435, %438 ], [ %145, %142 ]
  %442 = phi i64 [ %425, %438 ], [ %281, %142 ]
  %443 = phi i64 [ %439, %438 ], [ %143, %142 ]
  %444 = phi i64 [ %427, %438 ], [ %283, %142 ]
  %445 = phi i64 [ %428, %438 ], [ %284, %142 ]
  %446 = load i64**, i64*** %10, align 8
  %447 = icmp eq i64** %446, %441
  br i1 %447, label %450, label %462

448:                                              ; preds = %594
  %449 = ptrtoint i64** %602 to i64
  br label %450

450:                                              ; preds = %448, %440
  %451 = phi i64 [ %442, %440 ], [ %595, %448 ]
  %452 = phi i64 [ %443, %440 ], [ %449, %448 ]
  %453 = phi i64 [ %444, %440 ], [ %597, %448 ]
  %454 = phi i64 [ %445, %440 ], [ %598, %448 ]
  %455 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %456 = load i64**, i64*** %455, align 8
  store i64 %454, i64* %64, align 8
  store i64 %451, i64* %22, align 8
  store i64 %452, i64* %20, align 8
  store i64 %453, i64* %62, align 8
  %457 = load i64, i64* %29, align 8
  %458 = add i64 %124, %457
  store i64 %458, i64* %29, align 8
  %459 = icmp eq i64** %456, null
  br i1 %459, label %607, label %460

460:                                              ; preds = %450
  %461 = bitcast i64** %456 to i8*
  tail call void @_ZdlPv(i8* %461) #7
  br label %607

462:                                              ; preds = %440, %594
  %463 = phi i64** [ %604, %594 ], [ %446, %440 ]
  %464 = phi i64 [ %598, %594 ], [ %445, %440 ]
  %465 = phi i64 [ %597, %594 ], [ %444, %440 ]
  %466 = phi i64 [ %603, %594 ], [ %443, %440 ]
  %467 = phi i64 [ %595, %594 ], [ %442, %440 ]
  %468 = inttoptr i64 %466 to i64**
  %469 = inttoptr i64 %465 to i64**
  %470 = icmp eq i64** %468, %469
  %471 = inttoptr i64 %466 to i64*
  br i1 %470, label %472, label %594

472:                                              ; preds = %462
  %473 = inttoptr i64 %467 to i64**
  %474 = inttoptr i64 %464 to i64**
  %475 = icmp ugt i64** %473, %474
  br i1 %475, label %476, label %492

476:                                              ; preds = %472
  %477 = sub i64 %467, %464
  %478 = ashr exact i64 %477, 3
  %479 = add nsw i64 %478, 1
  %480 = sdiv i64 %479, -2
  %481 = getelementptr inbounds i64*, i64** %473, i64 %480
  %482 = sub i64 %466, %467
  %483 = ashr exact i64 %482, 3
  %484 = icmp eq i64 %482, 0
  br i1 %484, label %488, label %485

485:                                              ; preds = %476
  %486 = bitcast i64** %481 to i8*
  %487 = inttoptr i64 %467 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %486, i8* align 8 %487, i64 %482, i1 false) #6
  br label %488

488:                                              ; preds = %485, %476
  %489 = getelementptr inbounds i64*, i64** %481, i64 %483
  %490 = ptrtoint i64** %481 to i64
  %491 = bitcast i64** %489 to i64*
  br label %594

492:                                              ; preds = %472
  %493 = sub i64 %465, %464
  %494 = ashr exact i64 %493, 2
  %495 = icmp eq i64 %493, 0
  %496 = select i1 %495, i64 1, i64 %494
  %497 = icmp ugt i64 %496, 2305843009213693951
  br i1 %497, label %498, label %499

498:                                              ; preds = %492
  tail call void @abort() #8
  unreachable

499:                                              ; preds = %492
  %500 = lshr i64 %496, 2
  %501 = shl i64 %496, 3
  %502 = tail call i8* @_Znwm(i64 %501) #7
  %503 = bitcast i8* %502 to i64**
  %504 = ptrtoint i8* %502 to i64
  %505 = getelementptr inbounds i64*, i64** %503, i64 %500
  %506 = ptrtoint i64** %505 to i64
  %507 = getelementptr inbounds i64*, i64** %503, i64 %496
  %508 = ptrtoint i64** %507 to i64
  %509 = sub i64 %466, %467
  %510 = ashr exact i64 %509, 3
  %511 = getelementptr inbounds i64*, i64** %505, i64 %510
  %512 = icmp eq i64 %509, 0
  br i1 %512, label %587, label %513

513:                                              ; preds = %499
  %514 = add i64 %509, -8
  %515 = lshr i64 %514, 3
  %516 = add nuw nsw i64 %515, 1
  %517 = and i64 %516, 7
  %518 = icmp eq i64 %517, 0
  br i1 %518, label %534, label %519

519:                                              ; preds = %513, %519
  %520 = phi i64** [ %527, %519 ], [ %505, %513 ]
  %521 = phi i64 [ %528, %519 ], [ %506, %513 ]
  %522 = phi i64** [ %529, %519 ], [ %473, %513 ]
  %523 = phi i64 [ %530, %519 ], [ %517, %513 ]
  %524 = bitcast i64** %522 to i64*
  %525 = load i64, i64* %524, align 8
  %526 = inttoptr i64 %521 to i64*
  store i64 %525, i64* %526, align 8
  %527 = getelementptr inbounds i64*, i64** %520, i64 1
  %528 = ptrtoint i64** %527 to i64
  %529 = getelementptr inbounds i64*, i64** %522, i64 1
  %530 = add i64 %523, -1
  %531 = icmp eq i64 %530, 0
  br i1 %531, label %532, label %519, !llvm.loop !11

532:                                              ; preds = %519
  %533 = ptrtoint i64** %527 to i64
  br label %534

534:                                              ; preds = %513, %532
  %535 = phi i64** [ %505, %513 ], [ %527, %532 ]
  %536 = phi i64 [ %506, %513 ], [ %533, %532 ]
  %537 = phi i64** [ %473, %513 ], [ %529, %532 ]
  %538 = icmp ult i64 %514, 56
  br i1 %538, label %585, label %539

539:                                              ; preds = %534, %539
  %540 = phi i64** [ %581, %539 ], [ %535, %534 ]
  %541 = phi i64 [ %582, %539 ], [ %536, %534 ]
  %542 = phi i64** [ %583, %539 ], [ %537, %534 ]
  %543 = bitcast i64** %542 to i64*
  %544 = load i64, i64* %543, align 8
  %545 = inttoptr i64 %541 to i64*
  store i64 %544, i64* %545, align 8
  %546 = getelementptr inbounds i64*, i64** %540, i64 1
  %547 = getelementptr inbounds i64*, i64** %542, i64 1
  %548 = bitcast i64** %547 to i64*
  %549 = load i64, i64* %548, align 8
  %550 = bitcast i64** %546 to i64*
  store i64 %549, i64* %550, align 8
  %551 = getelementptr inbounds i64*, i64** %540, i64 2
  %552 = getelementptr inbounds i64*, i64** %542, i64 2
  %553 = bitcast i64** %552 to i64*
  %554 = load i64, i64* %553, align 8
  %555 = bitcast i64** %551 to i64*
  store i64 %554, i64* %555, align 8
  %556 = getelementptr inbounds i64*, i64** %540, i64 3
  %557 = getelementptr inbounds i64*, i64** %542, i64 3
  %558 = bitcast i64** %557 to i64*
  %559 = load i64, i64* %558, align 8
  %560 = bitcast i64** %556 to i64*
  store i64 %559, i64* %560, align 8
  %561 = getelementptr inbounds i64*, i64** %540, i64 4
  %562 = getelementptr inbounds i64*, i64** %542, i64 4
  %563 = bitcast i64** %562 to i64*
  %564 = load i64, i64* %563, align 8
  %565 = bitcast i64** %561 to i64*
  store i64 %564, i64* %565, align 8
  %566 = getelementptr inbounds i64*, i64** %540, i64 5
  %567 = getelementptr inbounds i64*, i64** %542, i64 5
  %568 = bitcast i64** %567 to i64*
  %569 = load i64, i64* %568, align 8
  %570 = bitcast i64** %566 to i64*
  store i64 %569, i64* %570, align 8
  %571 = getelementptr inbounds i64*, i64** %540, i64 6
  %572 = getelementptr inbounds i64*, i64** %542, i64 6
  %573 = bitcast i64** %572 to i64*
  %574 = load i64, i64* %573, align 8
  %575 = bitcast i64** %571 to i64*
  store i64 %574, i64* %575, align 8
  %576 = getelementptr inbounds i64*, i64** %540, i64 7
  %577 = getelementptr inbounds i64*, i64** %542, i64 7
  %578 = bitcast i64** %577 to i64*
  %579 = load i64, i64* %578, align 8
  %580 = bitcast i64** %576 to i64*
  store i64 %579, i64* %580, align 8
  %581 = getelementptr inbounds i64*, i64** %540, i64 8
  %582 = ptrtoint i64** %581 to i64
  %583 = getelementptr inbounds i64*, i64** %542, i64 8
  %584 = icmp eq i64** %511, %581
  br i1 %584, label %585, label %539

585:                                              ; preds = %539, %534
  %586 = ptrtoint i64** %511 to i64
  br label %587

587:                                              ; preds = %585, %499
  %588 = phi i64 [ %586, %585 ], [ %506, %499 ]
  %589 = inttoptr i64 %588 to i64**
  %590 = icmp eq i64 %464, 0
  %591 = inttoptr i64 %588 to i64*
  br i1 %590, label %594, label %592

592:                                              ; preds = %587
  %593 = inttoptr i64 %464 to i8*
  tail call void @_ZdlPv(i8* %593) #7
  br label %594

594:                                              ; preds = %462, %488, %587, %592
  %595 = phi i64 [ %490, %488 ], [ %506, %587 ], [ %506, %592 ], [ %467, %462 ]
  %596 = phi i64** [ %489, %488 ], [ %589, %587 ], [ %589, %592 ], [ %468, %462 ]
  %597 = phi i64 [ %465, %488 ], [ %508, %587 ], [ %508, %592 ], [ %465, %462 ]
  %598 = phi i64 [ %464, %488 ], [ %504, %587 ], [ %504, %592 ], [ %464, %462 ]
  %599 = phi i64* [ %491, %488 ], [ %591, %587 ], [ %591, %592 ], [ %471, %462 ]
  %600 = bitcast i64** %463 to i64*
  %601 = load i64, i64* %600, align 8
  store i64 %601, i64* %599, align 8
  %602 = getelementptr inbounds i64*, i64** %596, i64 1
  %603 = ptrtoint i64** %602 to i64
  %604 = getelementptr inbounds i64*, i64** %463, i64 1
  %605 = load i64**, i64*** %8, align 8
  %606 = icmp eq i64** %604, %605
  br i1 %606, label %448, label %462

607:                                              ; preds = %114, %52, %44, %105, %40, %460, %450
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIlNS_9allocatorIlEEE35__move_construct_backward_and_checkENS_16__deque_iteratorIlPlRlPS5_lLl0EEES8_S8_RPKl(%"class.std::__1::deque"*, i64**, i64*, i64**, i64*, %"class.std::__1::__deque_iterator"* byval(%"class.std::__1::__deque_iterator") align 8, i64** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %8 = ptrtoint i64* %4 to i64
  %9 = icmp eq i64* %4, %2
  br i1 %9, label %203, label %10

10:                                               ; preds = %7
  %11 = ptrtoint i64* %2 to i64
  %12 = ptrtoint i64** %3 to i64
  %13 = ptrtoint i64** %1 to i64
  %14 = sub i64 %12, %13
  %15 = shl i64 %14, 6
  %16 = bitcast i64** %3 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %8, %17
  %19 = ashr exact i64 %18, 3
  %20 = add nsw i64 %19, %15
  %21 = bitcast i64** %1 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %11, %22
  %24 = ashr exact i64 %23, 3
  %25 = sub i64 %20, %24
  %26 = icmp sgt i64 %25, 0
  br i1 %26, label %27, label %203

27:                                               ; preds = %10
  %28 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %5, i64 0, i32 1
  %29 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %5, i64 0, i32 0
  %30 = bitcast i64** %6 to i64*
  %31 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %32 = bitcast i64* %31 to <2 x i64>*
  %33 = bitcast i64* %31 to <2 x i64>*
  %34 = bitcast i64* %31 to <2 x i64>*
  %35 = bitcast i64* %31 to <2 x i64>*
  %36 = bitcast i64* %31 to <2 x i64>*
  %37 = bitcast i64* %31 to <2 x i64>*
  br label %38

38:                                               ; preds = %27, %199
  %39 = phi i64 [ %25, %27 ], [ %173, %199 ]
  %40 = phi i64** [ %3, %27 ], [ %201, %199 ]
  %41 = phi i64 [ %8, %27 ], [ %200, %199 ]
  %42 = inttoptr i64 %41 to i64*
  %43 = load i64*, i64** %40, align 8
  %44 = icmp eq i64* %43, %42
  br i1 %44, label %45, label %49

45:                                               ; preds = %38
  %46 = getelementptr inbounds i64*, i64** %40, i64 -1
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds i64, i64* %47, i64 512
  br label %49

49:                                               ; preds = %38, %45
  %50 = phi i64* [ %47, %45 ], [ %43, %38 ]
  %51 = phi i64** [ %46, %45 ], [ %40, %38 ]
  %52 = phi i64* [ %48, %45 ], [ %42, %38 ]
  %53 = getelementptr inbounds i64, i64* %52, i64 -1
  %54 = ptrtoint i64* %53 to i64
  %55 = ptrtoint i64* %52 to i64
  %56 = ptrtoint i64* %50 to i64
  %57 = sub i64 %55, %56
  %58 = ashr exact i64 %57, 3
  %59 = icmp sgt i64 %58, %39
  %60 = sub nsw i64 0, %39
  %61 = getelementptr inbounds i64, i64* %52, i64 %60
  %62 = select i1 %59, i64* %61, i64* %50
  %63 = ptrtoint i64* %62 to i64
  %64 = select i1 %59, i64 %39, i64 %58
  %65 = load i64*, i64** %6, align 8
  %66 = icmp ule i64* %62, %65
  %67 = icmp ult i64* %65, %52
  %68 = and i1 %67, %66
  br i1 %68, label %69, label %122

69:                                               ; preds = %49
  %70 = load i64*, i64** %28, align 8
  %71 = icmp eq i64* %53, %70
  br i1 %71, label %72, label %76

72:                                               ; preds = %69
  %73 = ptrtoint i64* %65 to i64
  %74 = bitcast i64** %51 to i64*
  %75 = load i64, i64* %74, align 8
  br label %96

76:                                               ; preds = %69
  %77 = ptrtoint i64* %70 to i64
  %78 = load i64**, i64*** %29, align 8
  %79 = ptrtoint i64** %51 to i64
  %80 = ptrtoint i64** %78 to i64
  %81 = sub i64 %79, %80
  %82 = shl i64 %81, 6
  %83 = bitcast i64** %51 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %54, %84
  %86 = ashr exact i64 %85, 3
  %87 = bitcast i64** %78 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = sub i64 %77, %88
  %90 = ashr exact i64 %89, 3
  %91 = or i64 %82, 1
  %92 = add i64 %91, %86
  %93 = sub i64 %92, %90
  %94 = ptrtoint i64* %65 to i64
  %95 = icmp eq i64 %93, 0
  br i1 %95, label %120, label %96

96:                                               ; preds = %72, %76
  %97 = phi i64 [ %75, %72 ], [ %84, %76 ]
  %98 = phi i64 [ %73, %72 ], [ %94, %76 ]
  %99 = phi i64 [ 1, %72 ], [ %93, %76 ]
  %100 = sub i64 %98, %97
  %101 = ashr exact i64 %100, 3
  %102 = sub i64 %101, %99
  %103 = icmp sgt i64 %102, 0
  br i1 %103, label %104, label %111

104:                                              ; preds = %96
  %105 = lshr i64 %102, 9
  %106 = getelementptr inbounds i64*, i64** %51, i64 %105
  %107 = load i64*, i64** %106, align 8
  %108 = and i64 %102, 511
  %109 = getelementptr inbounds i64, i64* %107, i64 %108
  %110 = ptrtoint i64* %109 to i64
  br label %120

111:                                              ; preds = %96
  %112 = sub nsw i64 511, %102
  %113 = sdiv i64 %112, -512
  %114 = getelementptr inbounds i64*, i64** %51, i64 %113
  %115 = load i64*, i64** %114, align 8
  %116 = srem i64 %112, 512
  %117 = sub nsw i64 511, %116
  %118 = getelementptr inbounds i64, i64* %115, i64 %117
  %119 = ptrtoint i64* %118 to i64
  br label %120

120:                                              ; preds = %76, %104, %111
  %121 = phi i64 [ %94, %76 ], [ %110, %104 ], [ %119, %111 ]
  store i64 %121, i64* %30, align 8
  br label %122

122:                                              ; preds = %49, %120
  %123 = icmp eq i64* %52, %62
  br i1 %123, label %172, label %124

124:                                              ; preds = %122
  %125 = load i64*, i64** %28, align 8
  %126 = load i64**, i64*** %29, align 8
  %127 = getelementptr i64, i64* %52, i64 -1
  %128 = ptrtoint i64* %127 to i64
  %129 = sub i64 %128, %63
  %130 = and i64 %129, 8
  %131 = icmp eq i64 %130, 0
  br i1 %131, label %132, label %147

132:                                              ; preds = %124
  %133 = load i64*, i64** %126, align 8
  %134 = icmp eq i64* %125, %133
  br i1 %134, label %135, label %139

135:                                              ; preds = %132
  %136 = getelementptr inbounds i64*, i64** %126, i64 -1
  store i64** %136, i64*** %29, align 8
  %137 = load i64*, i64** %136, align 8
  %138 = getelementptr inbounds i64, i64* %137, i64 512
  store i64* %138, i64** %28, align 8
  br label %139

139:                                              ; preds = %135, %132
  %140 = phi i64** [ %136, %135 ], [ %126, %132 ]
  %141 = phi i64* [ %138, %135 ], [ %125, %132 ]
  %142 = getelementptr inbounds i64, i64* %141, i64 -1
  store i64* %142, i64** %28, align 8
  %143 = getelementptr inbounds i64, i64* %52, i64 -1
  %144 = load i64, i64* %143, align 8
  store i64 %144, i64* %142, align 8
  %145 = load <2 x i64>, <2 x i64>* %32, align 8
  %146 = add <2 x i64> %145, <i64 -1, i64 1>
  store <2 x i64> %146, <2 x i64>* %33, align 8
  br label %147

147:                                              ; preds = %139, %124
  %148 = phi i64** [ %140, %139 ], [ %126, %124 ]
  %149 = phi i64* [ %142, %139 ], [ %125, %124 ]
  %150 = phi i64* [ %143, %139 ], [ %52, %124 ]
  %151 = icmp ult i64 %129, 8
  br i1 %151, label %172, label %152

152:                                              ; preds = %147, %208
  %153 = phi i64** [ %209, %208 ], [ %148, %147 ]
  %154 = phi i64* [ %211, %208 ], [ %149, %147 ]
  %155 = phi i64* [ %212, %208 ], [ %150, %147 ]
  %156 = load i64*, i64** %153, align 8
  %157 = icmp eq i64* %154, %156
  br i1 %157, label %158, label %162

158:                                              ; preds = %152
  %159 = getelementptr inbounds i64*, i64** %153, i64 -1
  store i64** %159, i64*** %29, align 8
  %160 = load i64*, i64** %159, align 8
  %161 = getelementptr inbounds i64, i64* %160, i64 512
  store i64* %161, i64** %28, align 8
  br label %162

162:                                              ; preds = %152, %158
  %163 = phi i64** [ %159, %158 ], [ %153, %152 ]
  %164 = phi i64* [ %161, %158 ], [ %154, %152 ]
  %165 = getelementptr inbounds i64, i64* %164, i64 -1
  store i64* %165, i64** %28, align 8
  %166 = getelementptr inbounds i64, i64* %155, i64 -1
  %167 = load i64, i64* %166, align 8
  store i64 %167, i64* %165, align 8
  %168 = load <2 x i64>, <2 x i64>* %34, align 8
  %169 = add <2 x i64> %168, <i64 -1, i64 1>
  store <2 x i64> %169, <2 x i64>* %35, align 8
  %170 = load i64*, i64** %163, align 8
  %171 = icmp eq i64* %165, %170
  br i1 %171, label %204, label %208

172:                                              ; preds = %147, %208, %122
  %173 = sub nsw i64 %39, %64
  %174 = add nsw i64 %64, -1
  %175 = icmp eq i64 %174, 0
  br i1 %175, label %199, label %176

176:                                              ; preds = %172
  %177 = bitcast i64** %51 to i64*
  %178 = load i64, i64* %177, align 8
  %179 = sub i64 %54, %178
  %180 = ashr exact i64 %179, 3
  %181 = sub i64 %180, %174
  %182 = icmp sgt i64 %181, 0
  br i1 %182, label %183, label %190

183:                                              ; preds = %176
  %184 = lshr i64 %181, 9
  %185 = getelementptr inbounds i64*, i64** %51, i64 %184
  %186 = load i64*, i64** %185, align 8
  %187 = and i64 %181, 511
  %188 = getelementptr inbounds i64, i64* %186, i64 %187
  %189 = ptrtoint i64* %188 to i64
  br label %199

190:                                              ; preds = %176
  %191 = sub nsw i64 511, %181
  %192 = sdiv i64 %191, -512
  %193 = getelementptr inbounds i64*, i64** %51, i64 %192
  %194 = load i64*, i64** %193, align 8
  %195 = srem i64 %191, 512
  %196 = sub nsw i64 511, %195
  %197 = getelementptr inbounds i64, i64* %194, i64 %196
  %198 = ptrtoint i64* %197 to i64
  br label %199

199:                                              ; preds = %172, %183, %190
  %200 = phi i64 [ %54, %172 ], [ %189, %183 ], [ %198, %190 ]
  %201 = phi i64** [ %51, %172 ], [ %185, %183 ], [ %193, %190 ]
  %202 = icmp sgt i64 %173, 0
  br i1 %202, label %38, label %203

203:                                              ; preds = %199, %7, %10
  ret void

204:                                              ; preds = %162
  %205 = getelementptr inbounds i64*, i64** %163, i64 -1
  store i64** %205, i64*** %29, align 8
  %206 = load i64*, i64** %205, align 8
  %207 = getelementptr inbounds i64, i64* %206, i64 512
  store i64* %207, i64** %28, align 8
  br label %208

208:                                              ; preds = %204, %162
  %209 = phi i64** [ %205, %204 ], [ %163, %162 ]
  %210 = phi i64* [ %207, %204 ], [ %165, %162 ]
  %211 = getelementptr inbounds i64, i64* %210, i64 -1
  store i64* %211, i64** %28, align 8
  %212 = getelementptr inbounds i64, i64* %155, i64 -2
  %213 = load i64, i64* %212, align 8
  store i64 %213, i64* %211, align 8
  %214 = load <2 x i64>, <2 x i64>* %36, align 8
  %215 = add <2 x i64> %214, <i64 -1, i64 1>
  store <2 x i64> %215, <2 x i64>* %37, align 8
  %216 = icmp eq i64* %212, %62
  br i1 %216, label %172, label %152
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64**, i64* } @_ZNSt3__15dequeIlNS_9allocatorIlEEE16__move_and_checkENS_16__deque_iteratorIlPlRlPS5_lLl0EEES8_S8_RPKl(%"class.std::__1::deque"*, i64**, i64*, i64**, i64*, %"class.std::__1::__deque_iterator"* byval(%"class.std::__1::__deque_iterator") align 8, i64** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %8 = ptrtoint i64* %2 to i64
  %9 = icmp eq i64* %4, %2
  br i1 %9, label %27, label %10

10:                                               ; preds = %7
  %11 = ptrtoint i64* %4 to i64
  %12 = ptrtoint i64** %3 to i64
  %13 = ptrtoint i64** %1 to i64
  %14 = sub i64 %12, %13
  %15 = shl i64 %14, 6
  %16 = bitcast i64** %3 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %11, %17
  %19 = ashr exact i64 %18, 3
  %20 = add nsw i64 %19, %15
  %21 = bitcast i64** %1 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %8, %22
  %24 = ashr exact i64 %23, 3
  %25 = sub i64 %20, %24
  %26 = icmp sgt i64 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %7, %10
  %28 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %5, i64 0, i32 0
  %29 = load i64**, i64*** %28, align 8
  %30 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %5, i64 0, i32 1
  %31 = load i64*, i64** %30, align 8
  br label %195

32:                                               ; preds = %10
  %33 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %5, i64 0, i32 1
  %34 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %5, i64 0, i32 0
  %35 = bitcast i64** %6 to i64*
  %36 = bitcast i64** %33 to i64*
  br label %37

37:                                               ; preds = %32, %189
  %38 = phi i64 [ %25, %32 ], [ %164, %189 ]
  %39 = phi i64 [ %8, %32 ], [ %191, %189 ]
  %40 = phi i64** [ %1, %32 ], [ %190, %189 ]
  %41 = inttoptr i64 %39 to i64*
  %42 = load i64*, i64** %40, align 8
  %43 = getelementptr inbounds i64, i64* %42, i64 512
  %44 = ptrtoint i64* %43 to i64
  %45 = sub i64 %44, %39
  %46 = ashr exact i64 %45, 3
  %47 = icmp sgt i64 %46, %38
  %48 = getelementptr inbounds i64, i64* %41, i64 %38
  %49 = select i1 %47, i64 %38, i64 %46
  %50 = select i1 %47, i64* %48, i64* %43
  %51 = load i64*, i64** %6, align 8
  %52 = icmp uge i64* %51, %41
  %53 = icmp ult i64* %51, %50
  %54 = and i1 %52, %53
  %55 = ptrtoint i64* %42 to i64
  br i1 %54, label %58, label %56

56:                                               ; preds = %37
  %57 = load i64, i64* %36, align 8
  br label %103

58:                                               ; preds = %37
  %59 = load i64*, i64** %33, align 8
  %60 = icmp eq i64* %59, %41
  %61 = ptrtoint i64* %59 to i64
  br i1 %60, label %62, label %64

62:                                               ; preds = %58
  %63 = ptrtoint i64* %51 to i64
  br label %101

64:                                               ; preds = %58
  %65 = load i64**, i64*** %34, align 8
  %66 = ptrtoint i64** %40 to i64
  %67 = ptrtoint i64** %65 to i64
  %68 = sub i64 %66, %67
  %69 = shl i64 %68, 6
  %70 = sub i64 %39, %55
  %71 = ashr exact i64 %70, 3
  %72 = add nsw i64 %71, %69
  %73 = bitcast i64** %65 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = sub i64 %61, %74
  %76 = ashr exact i64 %75, 3
  %77 = sub i64 %72, %76
  %78 = ptrtoint i64* %51 to i64
  %79 = icmp eq i64 %77, 0
  br i1 %79, label %101, label %80

80:                                               ; preds = %64
  %81 = sub i64 %78, %55
  %82 = ashr exact i64 %81, 3
  %83 = sub i64 %82, %77
  %84 = icmp sgt i64 %83, 0
  br i1 %84, label %85, label %92

85:                                               ; preds = %80
  %86 = lshr i64 %83, 9
  %87 = getelementptr inbounds i64*, i64** %40, i64 %86
  %88 = load i64*, i64** %87, align 8
  %89 = and i64 %83, 511
  %90 = getelementptr inbounds i64, i64* %88, i64 %89
  %91 = ptrtoint i64* %90 to i64
  br label %101

92:                                               ; preds = %80
  %93 = sub nsw i64 511, %83
  %94 = sdiv i64 %93, -512
  %95 = getelementptr inbounds i64*, i64** %40, i64 %94
  %96 = load i64*, i64** %95, align 8
  %97 = srem i64 %93, 512
  %98 = sub nsw i64 511, %97
  %99 = getelementptr inbounds i64, i64* %96, i64 %98
  %100 = ptrtoint i64* %99 to i64
  br label %101

101:                                              ; preds = %62, %64, %85, %92
  %102 = phi i64 [ %78, %64 ], [ %91, %85 ], [ %100, %92 ], [ %63, %62 ]
  store i64 %102, i64* %35, align 8
  br label %103

103:                                              ; preds = %56, %101
  %104 = phi i64 [ %57, %56 ], [ %61, %101 ]
  %105 = load i64**, i64*** %34, align 8
  %106 = icmp eq i64* %50, %41
  br i1 %106, label %160, label %107

107:                                              ; preds = %103
  %108 = ptrtoint i64* %50 to i64
  br label %109

109:                                              ; preds = %156, %107
  %110 = phi i64* [ %41, %107 ], [ %124, %156 ]
  %111 = phi i64** [ %105, %107 ], [ %158, %156 ]
  %112 = phi i64 [ %104, %107 ], [ %157, %156 ]
  %113 = load i64*, i64** %111, align 8
  %114 = getelementptr inbounds i64, i64* %113, i64 512
  %115 = ptrtoint i64* %114 to i64
  %116 = sub i64 %115, %112
  %117 = ashr exact i64 %116, 3
  %118 = ptrtoint i64* %110 to i64
  %119 = sub i64 %108, %118
  %120 = ashr exact i64 %119, 3
  %121 = icmp sgt i64 %120, %117
  %122 = getelementptr inbounds i64, i64* %110, i64 %117
  %123 = select i1 %121, i64 %117, i64 %120
  %124 = select i1 %121, i64* %122, i64* %50
  %125 = ptrtoint i64* %124 to i64
  %126 = sub i64 %125, %118
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %131, label %128

128:                                              ; preds = %109
  %129 = inttoptr i64 %112 to i8*
  %130 = bitcast i64* %110 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %129, i8* align 8 %130, i64 %126, i1 false) #6
  br label %131

131:                                              ; preds = %128, %109
  %132 = icmp eq i64 %123, 0
  br i1 %132, label %156, label %133

133:                                              ; preds = %131
  %134 = bitcast i64** %111 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = sub i64 %112, %135
  %137 = ashr exact i64 %136, 3
  %138 = add nsw i64 %137, %123
  %139 = icmp sgt i64 %138, 0
  br i1 %139, label %140, label %147

140:                                              ; preds = %133
  %141 = lshr i64 %138, 9
  %142 = getelementptr inbounds i64*, i64** %111, i64 %141
  %143 = load i64*, i64** %142, align 8
  %144 = and i64 %138, 511
  %145 = getelementptr inbounds i64, i64* %143, i64 %144
  %146 = ptrtoint i64* %145 to i64
  br label %156

147:                                              ; preds = %133
  %148 = sub nsw i64 511, %138
  %149 = sdiv i64 %148, -512
  %150 = getelementptr inbounds i64*, i64** %111, i64 %149
  %151 = load i64*, i64** %150, align 8
  %152 = srem i64 %148, 512
  %153 = sub nuw nsw i64 511, %152
  %154 = getelementptr inbounds i64, i64* %151, i64 %153
  %155 = ptrtoint i64* %154 to i64
  br label %156

156:                                              ; preds = %147, %140, %131
  %157 = phi i64 [ %112, %131 ], [ %146, %140 ], [ %155, %147 ]
  %158 = phi i64** [ %111, %131 ], [ %142, %140 ], [ %150, %147 ]
  %159 = icmp eq i64* %124, %50
  br i1 %159, label %160, label %109

160:                                              ; preds = %156, %103
  %161 = phi i64 [ %104, %103 ], [ %157, %156 ]
  %162 = phi i64** [ %105, %103 ], [ %158, %156 ]
  %163 = inttoptr i64 %161 to i64*
  store i64** %162, i64*** %34, align 8
  store i64* %163, i64** %33, align 8
  %164 = sub nsw i64 %38, %49
  %165 = icmp eq i64 %49, 0
  br i1 %165, label %189, label %166

166:                                              ; preds = %160
  %167 = bitcast i64** %40 to i64*
  %168 = load i64, i64* %167, align 8
  %169 = sub i64 %39, %168
  %170 = ashr exact i64 %169, 3
  %171 = add nsw i64 %170, %49
  %172 = icmp sgt i64 %171, 0
  br i1 %172, label %173, label %180

173:                                              ; preds = %166
  %174 = lshr i64 %171, 9
  %175 = getelementptr inbounds i64*, i64** %40, i64 %174
  %176 = load i64*, i64** %175, align 8
  %177 = and i64 %171, 511
  %178 = getelementptr inbounds i64, i64* %176, i64 %177
  %179 = ptrtoint i64* %178 to i64
  br label %189

180:                                              ; preds = %166
  %181 = sub nsw i64 511, %171
  %182 = sdiv i64 %181, -512
  %183 = getelementptr inbounds i64*, i64** %40, i64 %182
  %184 = load i64*, i64** %183, align 8
  %185 = srem i64 %181, 512
  %186 = sub nsw i64 511, %185
  %187 = getelementptr inbounds i64, i64* %184, i64 %186
  %188 = ptrtoint i64* %187 to i64
  br label %189

189:                                              ; preds = %160, %173, %180
  %190 = phi i64** [ %40, %160 ], [ %175, %173 ], [ %183, %180 ]
  %191 = phi i64 [ %39, %160 ], [ %179, %173 ], [ %188, %180 ]
  %192 = icmp sgt i64 %164, 0
  br i1 %192, label %37, label %193

193:                                              ; preds = %189
  %194 = inttoptr i64 %161 to i64*
  br label %195

195:                                              ; preds = %193, %27
  %196 = phi i64* [ %31, %27 ], [ %194, %193 ]
  %197 = phi i64** [ %29, %27 ], [ %162, %193 ]
  %198 = insertvalue { i64**, i64* } undef, i64** %197, 0
  %199 = insertvalue { i64**, i64* } %198, i64* %196, 1
  ret { i64**, i64* } %199
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIlNS_9allocatorIlEEE19__add_back_capacityEm(%"class.std::__1::deque"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca i64*, align 8
  %4 = alloca i64*, align 8
  %5 = alloca %"struct.std::__1::__split_buffer.7", align 16
  %6 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %8 = load i64**, i64*** %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %10 = load i64**, i64*** %9, align 8
  %11 = icmp eq i64** %8, %10
  %12 = zext i1 %11 to i64
  %13 = add i64 %12, %1
  %14 = lshr i64 %13, 9
  %15 = and i64 %13, 511
  %16 = icmp ne i64 %15, 0
  %17 = zext i1 %16 to i64
  %18 = add nuw nsw i64 %14, %17
  %19 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %20 = load i64, i64* %19, align 8
  %21 = lshr i64 %20, 9
  %22 = icmp ult i64 %18, %21
  %23 = select i1 %22, i64 %18, i64 %21
  %24 = sub nsw i64 %18, %23
  %25 = icmp eq i64 %24, 0
  %26 = ptrtoint i64** %8 to i64
  br i1 %25, label %27, label %186

27:                                               ; preds = %2
  %28 = shl nuw i64 %23, 9
  %29 = sub i64 %20, %28
  store i64 %29, i64* %19, align 8
  %30 = icmp eq i64 %23, 0
  br i1 %30, label %768, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %33 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %34 = bitcast i64*** %32 to i64*
  %35 = bitcast %"class.std::__1::deque"* %0 to i64*
  %36 = bitcast i64*** %9 to i64*
  %37 = bitcast i64*** %7 to i64*
  %38 = bitcast i64*** %7 to i64**
  br label %39

39:                                               ; preds = %184, %31
  %40 = phi i64** [ %8, %31 ], [ %181, %184 ]
  %41 = phi i64** [ %10, %31 ], [ %185, %184 ]
  %42 = phi i64 [ %23, %31 ], [ %182, %184 ]
  %43 = bitcast i64** %41 to i64*
  %44 = load i64, i64* %43, align 8
  %45 = getelementptr inbounds i64*, i64** %41, i64 1
  store i64** %45, i64*** %9, align 8
  %46 = load i64**, i64*** %32, align 8
  %47 = icmp eq i64** %40, %46
  %48 = ptrtoint i64** %46 to i64
  %49 = bitcast i64** %40 to i64*
  br i1 %47, label %50, label %178

50:                                               ; preds = %39
  %51 = load i64**, i64*** %33, align 8
  %52 = icmp ugt i64** %45, %51
  %53 = ptrtoint i64** %51 to i64
  br i1 %52, label %54, label %73

54:                                               ; preds = %50
  %55 = ptrtoint i64** %45 to i64
  %56 = sub i64 %55, %53
  %57 = ashr exact i64 %56, 3
  %58 = add nsw i64 %57, 1
  %59 = sdiv i64 %58, -2
  %60 = getelementptr inbounds i64*, i64** %45, i64 %59
  %61 = sub i64 %48, %55
  %62 = ashr exact i64 %61, 3
  %63 = icmp eq i64 %61, 0
  br i1 %63, label %68, label %64

64:                                               ; preds = %54
  %65 = bitcast i64** %60 to i8*
  %66 = bitcast i64** %45 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 %61, i1 false) #6
  %67 = load i64**, i64*** %9, align 8
  br label %68

68:                                               ; preds = %64, %54
  %69 = phi i64** [ %45, %54 ], [ %67, %64 ]
  %70 = getelementptr inbounds i64*, i64** %60, i64 %62
  store i64** %70, i64*** %7, align 8
  %71 = getelementptr inbounds i64*, i64** %69, i64 %59
  store i64** %71, i64*** %9, align 8
  %72 = bitcast i64** %70 to i64*
  br label %178

73:                                               ; preds = %50
  %74 = sub i64 %48, %53
  %75 = ashr exact i64 %74, 2
  %76 = icmp eq i64 %74, 0
  %77 = select i1 %76, i64 1, i64 %75
  %78 = icmp ugt i64 %77, 2305843009213693951
  br i1 %78, label %79, label %80

79:                                               ; preds = %73
  tail call void @abort() #8
  unreachable

80:                                               ; preds = %73
  %81 = lshr i64 %77, 2
  %82 = shl i64 %77, 3
  %83 = tail call i8* @_Znwm(i64 %82) #7
  %84 = bitcast i8* %83 to i64**
  %85 = ptrtoint i8* %83 to i64
  %86 = getelementptr inbounds i64*, i64** %84, i64 %81
  %87 = ptrtoint i64** %86 to i64
  %88 = getelementptr inbounds i64*, i64** %84, i64 %77
  %89 = ptrtoint i64** %88 to i64
  %90 = ptrtoint i64** %45 to i64
  %91 = sub i64 %48, %90
  %92 = ashr exact i64 %91, 3
  %93 = getelementptr inbounds i64*, i64** %86, i64 %92
  %94 = icmp eq i64 %91, 0
  br i1 %94, label %170, label %95

95:                                               ; preds = %80
  %96 = add i64 %91, -8
  %97 = lshr i64 %96, 3
  %98 = add nuw nsw i64 %97, 1
  %99 = and i64 %98, 7
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %116, label %101

101:                                              ; preds = %95, %101
  %102 = phi i64** [ %109, %101 ], [ %86, %95 ]
  %103 = phi i64 [ %110, %101 ], [ %87, %95 ]
  %104 = phi i64** [ %111, %101 ], [ %45, %95 ]
  %105 = phi i64 [ %112, %101 ], [ %99, %95 ]
  %106 = bitcast i64** %104 to i64*
  %107 = load i64, i64* %106, align 8
  %108 = inttoptr i64 %103 to i64*
  store i64 %107, i64* %108, align 8
  %109 = getelementptr inbounds i64*, i64** %102, i64 1
  %110 = ptrtoint i64** %109 to i64
  %111 = getelementptr inbounds i64*, i64** %104, i64 1
  %112 = add i64 %105, -1
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %114, label %101, !llvm.loop !12

114:                                              ; preds = %101
  %115 = ptrtoint i64** %109 to i64
  br label %116

116:                                              ; preds = %95, %114
  %117 = phi i64** [ %86, %95 ], [ %109, %114 ]
  %118 = phi i64 [ %87, %95 ], [ %115, %114 ]
  %119 = phi i64** [ %45, %95 ], [ %111, %114 ]
  %120 = icmp ult i64 %96, 56
  br i1 %120, label %167, label %121

121:                                              ; preds = %116, %121
  %122 = phi i64** [ %163, %121 ], [ %117, %116 ]
  %123 = phi i64 [ %164, %121 ], [ %118, %116 ]
  %124 = phi i64** [ %165, %121 ], [ %119, %116 ]
  %125 = bitcast i64** %124 to i64*
  %126 = load i64, i64* %125, align 8
  %127 = inttoptr i64 %123 to i64*
  store i64 %126, i64* %127, align 8
  %128 = getelementptr inbounds i64*, i64** %122, i64 1
  %129 = getelementptr inbounds i64*, i64** %124, i64 1
  %130 = bitcast i64** %129 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = bitcast i64** %128 to i64*
  store i64 %131, i64* %132, align 8
  %133 = getelementptr inbounds i64*, i64** %122, i64 2
  %134 = getelementptr inbounds i64*, i64** %124, i64 2
  %135 = bitcast i64** %134 to i64*
  %136 = load i64, i64* %135, align 8
  %137 = bitcast i64** %133 to i64*
  store i64 %136, i64* %137, align 8
  %138 = getelementptr inbounds i64*, i64** %122, i64 3
  %139 = getelementptr inbounds i64*, i64** %124, i64 3
  %140 = bitcast i64** %139 to i64*
  %141 = load i64, i64* %140, align 8
  %142 = bitcast i64** %138 to i64*
  store i64 %141, i64* %142, align 8
  %143 = getelementptr inbounds i64*, i64** %122, i64 4
  %144 = getelementptr inbounds i64*, i64** %124, i64 4
  %145 = bitcast i64** %144 to i64*
  %146 = load i64, i64* %145, align 8
  %147 = bitcast i64** %143 to i64*
  store i64 %146, i64* %147, align 8
  %148 = getelementptr inbounds i64*, i64** %122, i64 5
  %149 = getelementptr inbounds i64*, i64** %124, i64 5
  %150 = bitcast i64** %149 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast i64** %148 to i64*
  store i64 %151, i64* %152, align 8
  %153 = getelementptr inbounds i64*, i64** %122, i64 6
  %154 = getelementptr inbounds i64*, i64** %124, i64 6
  %155 = bitcast i64** %154 to i64*
  %156 = load i64, i64* %155, align 8
  %157 = bitcast i64** %153 to i64*
  store i64 %156, i64* %157, align 8
  %158 = getelementptr inbounds i64*, i64** %122, i64 7
  %159 = getelementptr inbounds i64*, i64** %124, i64 7
  %160 = bitcast i64** %159 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = bitcast i64** %158 to i64*
  store i64 %161, i64* %162, align 8
  %163 = getelementptr inbounds i64*, i64** %122, i64 8
  %164 = ptrtoint i64** %163 to i64
  %165 = getelementptr inbounds i64*, i64** %124, i64 8
  %166 = icmp eq i64** %93, %163
  br i1 %166, label %167, label %121

167:                                              ; preds = %121, %116
  %168 = ptrtoint i64** %93 to i64
  %169 = load i64**, i64*** %33, align 8
  br label %170

170:                                              ; preds = %167, %80
  %171 = phi i64** [ %169, %167 ], [ %51, %80 ]
  %172 = phi i64 [ %168, %167 ], [ %87, %80 ]
  store i64 %85, i64* %35, align 8
  store i64 %87, i64* %36, align 8
  store i64 %172, i64* %37, align 8
  store i64 %89, i64* %34, align 8
  %173 = icmp eq i64** %171, null
  %174 = inttoptr i64 %172 to i64*
  br i1 %173, label %178, label %175

175:                                              ; preds = %170
  %176 = bitcast i64** %171 to i8*
  tail call void @_ZdlPv(i8* %176) #7
  %177 = load i64*, i64** %38, align 8
  br label %178

178:                                              ; preds = %39, %68, %170, %175
  %179 = phi i64* [ %177, %175 ], [ %174, %170 ], [ %72, %68 ], [ %49, %39 ]
  store i64 %44, i64* %179, align 8
  %180 = load i64**, i64*** %7, align 8
  %181 = getelementptr inbounds i64*, i64** %180, i64 1
  store i64** %181, i64*** %7, align 8
  %182 = add i64 %42, -1
  %183 = icmp eq i64 %182, 0
  br i1 %183, label %768, label %184

184:                                              ; preds = %178
  %185 = load i64**, i64*** %9, align 8
  br label %39

186:                                              ; preds = %2
  %187 = ptrtoint i64** %10 to i64
  %188 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %189 = bitcast i64*** %188 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = bitcast %"class.std::__1::deque"* %0 to i64*
  %192 = load i64, i64* %191, align 8
  %193 = sub i64 %190, %192
  %194 = ashr exact i64 %193, 3
  %195 = bitcast i64*** %7 to i64*
  %196 = bitcast i64*** %9 to i64*
  %197 = sub i64 %26, %187
  %198 = ashr exact i64 %197, 3
  %199 = sub nsw i64 %194, %198
  %200 = icmp ugt i64 %24, %199
  br i1 %200, label %391, label %201

201:                                              ; preds = %186
  %202 = bitcast i64** %3 to i8*
  %203 = bitcast i64** %3 to i8**
  %204 = icmp eq i64 %190, %26
  br i1 %204, label %214, label %205

205:                                              ; preds = %201, %210
  %206 = phi i64 [ %208, %210 ], [ %24, %201 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %202) #6
  %207 = call i8* @_Znwm(i64 4096) #7
  store i8* %207, i8** %203, align 8
  call void @_ZNSt3__114__split_bufferIPlNS_9allocatorIS1_EEE9push_backEOS1_(%"struct.std::__1::__split_buffer"* %6, i64** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %202) #6
  %208 = add i64 %206, -1
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %217, label %210

210:                                              ; preds = %205
  %211 = load i64, i64* %189, align 8
  %212 = load i64, i64* %195, align 8
  %213 = icmp eq i64 %211, %212
  br i1 %213, label %214, label %205

214:                                              ; preds = %210, %201
  %215 = phi i64 [ %24, %201 ], [ %208, %210 ]
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %217, label %219

217:                                              ; preds = %205, %214
  %218 = load i64, i64* %19, align 8
  br label %236

219:                                              ; preds = %214
  %220 = bitcast i64** %4 to i8*
  %221 = bitcast i64** %4 to i8**
  br label %222

222:                                              ; preds = %219, %222
  %223 = phi i64 [ %215, %219 ], [ %225, %222 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %220) #6
  %224 = call i8* @_Znwm(i64 4096) #7
  store i8* %224, i8** %221, align 8
  call void @_ZNSt3__114__split_bufferIPlNS_9allocatorIS1_EEE10push_frontEOS1_(%"struct.std::__1::__split_buffer"* %6, i64** nonnull dereferenceable(8) %4)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %220) #6
  %225 = add i64 %223, -1
  %226 = load i64, i64* %195, align 8
  %227 = load i64, i64* %196, align 8
  %228 = sub i64 %226, %227
  %229 = icmp eq i64 %228, 8
  %230 = select i1 %229, i64 511, i64 512
  %231 = load i64, i64* %19, align 8
  %232 = add i64 %230, %231
  store i64 %232, i64* %19, align 8
  %233 = icmp eq i64 %225, 0
  br i1 %233, label %234, label %222

234:                                              ; preds = %222
  %235 = add i64 %215, %23
  br label %236

236:                                              ; preds = %217, %234
  %237 = phi i64 [ %218, %217 ], [ %232, %234 ]
  %238 = phi i64 [ %23, %217 ], [ %235, %234 ]
  %239 = shl i64 %238, 9
  %240 = sub i64 %237, %239
  store i64 %240, i64* %19, align 8
  %241 = icmp eq i64 %238, 0
  br i1 %241, label %768, label %242

242:                                              ; preds = %236
  %243 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 0
  %244 = bitcast i64*** %7 to i64**
  %245 = load i64**, i64*** %7, align 8
  br label %246

246:                                              ; preds = %242, %385
  %247 = phi i64** [ %245, %242 ], [ %388, %385 ]
  %248 = phi i64 [ %238, %242 ], [ %389, %385 ]
  %249 = load i64**, i64*** %9, align 8
  %250 = bitcast i64** %249 to i64*
  %251 = load i64, i64* %250, align 8
  %252 = getelementptr inbounds i64*, i64** %249, i64 1
  store i64** %252, i64*** %9, align 8
  %253 = load i64**, i64*** %188, align 8
  %254 = icmp eq i64** %247, %253
  %255 = ptrtoint i64** %253 to i64
  %256 = bitcast i64** %247 to i64*
  br i1 %254, label %257, label %385

257:                                              ; preds = %246
  %258 = load i64**, i64*** %243, align 8
  %259 = icmp ugt i64** %252, %258
  %260 = ptrtoint i64** %258 to i64
  br i1 %259, label %261, label %280

261:                                              ; preds = %257
  %262 = ptrtoint i64** %252 to i64
  %263 = sub i64 %262, %260
  %264 = ashr exact i64 %263, 3
  %265 = add nsw i64 %264, 1
  %266 = sdiv i64 %265, -2
  %267 = getelementptr inbounds i64*, i64** %252, i64 %266
  %268 = sub i64 %255, %262
  %269 = ashr exact i64 %268, 3
  %270 = icmp eq i64 %268, 0
  br i1 %270, label %275, label %271

271:                                              ; preds = %261
  %272 = bitcast i64** %267 to i8*
  %273 = bitcast i64** %252 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %272, i8* align 8 %273, i64 %268, i1 false) #6
  %274 = load i64**, i64*** %9, align 8
  br label %275

275:                                              ; preds = %271, %261
  %276 = phi i64** [ %252, %261 ], [ %274, %271 ]
  %277 = getelementptr inbounds i64*, i64** %267, i64 %269
  store i64** %277, i64*** %7, align 8
  %278 = getelementptr inbounds i64*, i64** %276, i64 %266
  store i64** %278, i64*** %9, align 8
  %279 = bitcast i64** %277 to i64*
  br label %385

280:                                              ; preds = %257
  %281 = sub i64 %255, %260
  %282 = ashr exact i64 %281, 2
  %283 = icmp eq i64 %281, 0
  %284 = select i1 %283, i64 1, i64 %282
  %285 = icmp ugt i64 %284, 2305843009213693951
  br i1 %285, label %286, label %287

286:                                              ; preds = %280
  call void @abort() #8
  unreachable

287:                                              ; preds = %280
  %288 = lshr i64 %284, 2
  %289 = shl i64 %284, 3
  %290 = call i8* @_Znwm(i64 %289) #7
  %291 = bitcast i8* %290 to i64**
  %292 = ptrtoint i8* %290 to i64
  %293 = getelementptr inbounds i64*, i64** %291, i64 %288
  %294 = ptrtoint i64** %293 to i64
  %295 = getelementptr inbounds i64*, i64** %291, i64 %284
  %296 = ptrtoint i64** %295 to i64
  %297 = ptrtoint i64** %252 to i64
  %298 = sub i64 %255, %297
  %299 = ashr exact i64 %298, 3
  %300 = getelementptr inbounds i64*, i64** %293, i64 %299
  %301 = icmp eq i64 %298, 0
  br i1 %301, label %377, label %302

302:                                              ; preds = %287
  %303 = add i64 %298, -8
  %304 = lshr i64 %303, 3
  %305 = add nuw nsw i64 %304, 1
  %306 = and i64 %305, 7
  %307 = icmp eq i64 %306, 0
  br i1 %307, label %323, label %308

308:                                              ; preds = %302, %308
  %309 = phi i64** [ %316, %308 ], [ %293, %302 ]
  %310 = phi i64 [ %317, %308 ], [ %294, %302 ]
  %311 = phi i64** [ %318, %308 ], [ %252, %302 ]
  %312 = phi i64 [ %319, %308 ], [ %306, %302 ]
  %313 = bitcast i64** %311 to i64*
  %314 = load i64, i64* %313, align 8
  %315 = inttoptr i64 %310 to i64*
  store i64 %314, i64* %315, align 8
  %316 = getelementptr inbounds i64*, i64** %309, i64 1
  %317 = ptrtoint i64** %316 to i64
  %318 = getelementptr inbounds i64*, i64** %311, i64 1
  %319 = add i64 %312, -1
  %320 = icmp eq i64 %319, 0
  br i1 %320, label %321, label %308, !llvm.loop !13

321:                                              ; preds = %308
  %322 = ptrtoint i64** %316 to i64
  br label %323

323:                                              ; preds = %302, %321
  %324 = phi i64** [ %293, %302 ], [ %316, %321 ]
  %325 = phi i64 [ %294, %302 ], [ %322, %321 ]
  %326 = phi i64** [ %252, %302 ], [ %318, %321 ]
  %327 = icmp ult i64 %303, 56
  br i1 %327, label %374, label %328

328:                                              ; preds = %323, %328
  %329 = phi i64** [ %370, %328 ], [ %324, %323 ]
  %330 = phi i64 [ %371, %328 ], [ %325, %323 ]
  %331 = phi i64** [ %372, %328 ], [ %326, %323 ]
  %332 = bitcast i64** %331 to i64*
  %333 = load i64, i64* %332, align 8
  %334 = inttoptr i64 %330 to i64*
  store i64 %333, i64* %334, align 8
  %335 = getelementptr inbounds i64*, i64** %329, i64 1
  %336 = getelementptr inbounds i64*, i64** %331, i64 1
  %337 = bitcast i64** %336 to i64*
  %338 = load i64, i64* %337, align 8
  %339 = bitcast i64** %335 to i64*
  store i64 %338, i64* %339, align 8
  %340 = getelementptr inbounds i64*, i64** %329, i64 2
  %341 = getelementptr inbounds i64*, i64** %331, i64 2
  %342 = bitcast i64** %341 to i64*
  %343 = load i64, i64* %342, align 8
  %344 = bitcast i64** %340 to i64*
  store i64 %343, i64* %344, align 8
  %345 = getelementptr inbounds i64*, i64** %329, i64 3
  %346 = getelementptr inbounds i64*, i64** %331, i64 3
  %347 = bitcast i64** %346 to i64*
  %348 = load i64, i64* %347, align 8
  %349 = bitcast i64** %345 to i64*
  store i64 %348, i64* %349, align 8
  %350 = getelementptr inbounds i64*, i64** %329, i64 4
  %351 = getelementptr inbounds i64*, i64** %331, i64 4
  %352 = bitcast i64** %351 to i64*
  %353 = load i64, i64* %352, align 8
  %354 = bitcast i64** %350 to i64*
  store i64 %353, i64* %354, align 8
  %355 = getelementptr inbounds i64*, i64** %329, i64 5
  %356 = getelementptr inbounds i64*, i64** %331, i64 5
  %357 = bitcast i64** %356 to i64*
  %358 = load i64, i64* %357, align 8
  %359 = bitcast i64** %355 to i64*
  store i64 %358, i64* %359, align 8
  %360 = getelementptr inbounds i64*, i64** %329, i64 6
  %361 = getelementptr inbounds i64*, i64** %331, i64 6
  %362 = bitcast i64** %361 to i64*
  %363 = load i64, i64* %362, align 8
  %364 = bitcast i64** %360 to i64*
  store i64 %363, i64* %364, align 8
  %365 = getelementptr inbounds i64*, i64** %329, i64 7
  %366 = getelementptr inbounds i64*, i64** %331, i64 7
  %367 = bitcast i64** %366 to i64*
  %368 = load i64, i64* %367, align 8
  %369 = bitcast i64** %365 to i64*
  store i64 %368, i64* %369, align 8
  %370 = getelementptr inbounds i64*, i64** %329, i64 8
  %371 = ptrtoint i64** %370 to i64
  %372 = getelementptr inbounds i64*, i64** %331, i64 8
  %373 = icmp eq i64** %300, %370
  br i1 %373, label %374, label %328

374:                                              ; preds = %328, %323
  %375 = ptrtoint i64** %300 to i64
  %376 = load i64**, i64*** %243, align 8
  br label %377

377:                                              ; preds = %374, %287
  %378 = phi i64** [ %376, %374 ], [ %258, %287 ]
  %379 = phi i64 [ %375, %374 ], [ %294, %287 ]
  store i64 %292, i64* %191, align 8
  store i64 %294, i64* %196, align 8
  store i64 %379, i64* %195, align 8
  store i64 %296, i64* %189, align 8
  %380 = icmp eq i64** %378, null
  %381 = inttoptr i64 %379 to i64*
  br i1 %380, label %385, label %382

382:                                              ; preds = %377
  %383 = bitcast i64** %378 to i8*
  call void @_ZdlPv(i8* %383) #7
  %384 = load i64*, i64** %244, align 8
  br label %385

385:                                              ; preds = %246, %275, %377, %382
  %386 = phi i64* [ %384, %382 ], [ %381, %377 ], [ %279, %275 ], [ %256, %246 ]
  store i64 %251, i64* %386, align 8
  %387 = load i64**, i64*** %7, align 8
  %388 = getelementptr inbounds i64*, i64** %387, i64 1
  store i64** %388, i64*** %7, align 8
  %389 = add i64 %248, -1
  %390 = icmp eq i64 %389, 0
  br i1 %390, label %768, label %246

391:                                              ; preds = %186
  %392 = shl nuw i64 %23, 9
  %393 = bitcast %"struct.std::__1::__split_buffer.7"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %393) #6
  %394 = getelementptr inbounds %"struct.std::__1::__split_buffer.7", %"struct.std::__1::__split_buffer.7"* %5, i64 0, i32 0
  %395 = getelementptr inbounds %"struct.std::__1::__split_buffer.7", %"struct.std::__1::__split_buffer.7"* %5, i64 0, i32 1
  %396 = getelementptr inbounds %"struct.std::__1::__split_buffer.7", %"struct.std::__1::__split_buffer.7"* %5, i64 0, i32 2
  %397 = getelementptr inbounds %"struct.std::__1::__split_buffer.7", %"struct.std::__1::__split_buffer.7"* %5, i64 0, i32 3, i32 0, i32 0
  %398 = getelementptr inbounds %"struct.std::__1::__split_buffer.7", %"struct.std::__1::__split_buffer.7"* %5, i64 0, i32 3, i32 1, i32 0
  %399 = ashr exact i64 %193, 2
  %400 = add nsw i64 %198, %24
  %401 = icmp ult i64 %399, %400
  %402 = select i1 %401, i64 %400, i64 %399
  %403 = sub nsw i64 %198, %23
  %404 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3
  %405 = bitcast %"struct.std::__1::__split_buffer.7"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %405, i8 -86, i64 24, i1 false)
  store i64** null, i64*** %397, align 8
  %406 = bitcast %"class.std::__1::allocator"** %398 to %"class.std::__1::__compressed_pair"**
  store %"class.std::__1::__compressed_pair"* %404, %"class.std::__1::__compressed_pair"** %406, align 8
  %407 = icmp eq i64 %402, 0
  br i1 %407, label %415, label %408

408:                                              ; preds = %391
  %409 = icmp ugt i64 %402, 2305843009213693951
  br i1 %409, label %410, label %411

410:                                              ; preds = %408
  tail call void @abort() #8
  unreachable

411:                                              ; preds = %408
  %412 = shl i64 %402, 3
  %413 = tail call i8* @_Znwm(i64 %412) #7
  %414 = bitcast i8* %413 to i64**
  br label %415

415:                                              ; preds = %411, %391
  %416 = phi i64** [ %414, %411 ], [ null, %391 ]
  store i64** %416, i64*** %394, align 16
  %417 = getelementptr inbounds i64*, i64** %416, i64 %403
  store i64** %417, i64*** %396, align 16
  store i64** %417, i64*** %395, align 8
  %418 = getelementptr inbounds i64*, i64** %416, i64 %402
  store i64** %418, i64*** %397, align 8
  %419 = bitcast i64*** %397 to i64*
  %420 = bitcast %"struct.std::__1::__split_buffer.7"* %5 to i64*
  %421 = bitcast i64*** %395 to i64*
  %422 = bitcast i64*** %396 to i64*
  br label %434

423:                                              ; preds = %568
  %424 = icmp eq i64 %23, 0
  br i1 %424, label %425, label %427

425:                                              ; preds = %423
  %426 = load i64**, i64*** %9, align 8
  br label %719

427:                                              ; preds = %423
  %428 = bitcast i64*** %9 to i64**
  %429 = bitcast i64*** %397 to i64*
  %430 = bitcast %"struct.std::__1::__split_buffer.7"* %5 to i64*
  %431 = bitcast i64*** %395 to i64*
  %432 = bitcast i64*** %396 to i64*
  %433 = load i64*, i64** %428, align 8
  br label %576

434:                                              ; preds = %574, %415
  %435 = phi i64** [ %418, %415 ], [ %575, %574 ]
  %436 = phi i64** [ %417, %415 ], [ %571, %574 ]
  %437 = phi i64 [ %24, %415 ], [ %572, %574 ]
  %438 = tail call i8* @_Znwm(i64 4096) #7
  %439 = ptrtoint i8* %438 to i64
  %440 = icmp eq i64** %436, %435
  %441 = ptrtoint i64** %435 to i64
  %442 = bitcast i64** %436 to i64*
  br i1 %440, label %443, label %568

443:                                              ; preds = %434
  %444 = load i64**, i64*** %395, align 8
  %445 = load i64**, i64*** %394, align 16
  %446 = icmp ugt i64** %444, %445
  %447 = ptrtoint i64** %445 to i64
  br i1 %446, label %448, label %464

448:                                              ; preds = %443
  %449 = ptrtoint i64** %444 to i64
  %450 = sub i64 %449, %447
  %451 = ashr exact i64 %450, 3
  %452 = add nsw i64 %451, 1
  %453 = sdiv i64 %452, -2
  %454 = getelementptr inbounds i64*, i64** %444, i64 %453
  %455 = sub i64 %441, %449
  %456 = ashr exact i64 %455, 3
  %457 = icmp eq i64 %455, 0
  br i1 %457, label %461, label %458

458:                                              ; preds = %448
  %459 = bitcast i64** %454 to i8*
  %460 = bitcast i64** %444 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %459, i8* align 8 %460, i64 %455, i1 false) #6
  br label %461

461:                                              ; preds = %458, %448
  %462 = getelementptr inbounds i64*, i64** %454, i64 %456
  store i64** %462, i64*** %396, align 16
  store i64** %454, i64*** %395, align 8
  %463 = bitcast i64** %462 to i64*
  br label %568

464:                                              ; preds = %443
  %465 = sub i64 %441, %447
  %466 = ashr exact i64 %465, 2
  %467 = icmp eq i64 %465, 0
  %468 = select i1 %467, i64 1, i64 %466
  %469 = icmp ugt i64 %468, 2305843009213693951
  br i1 %469, label %470, label %471

470:                                              ; preds = %464
  tail call void @abort() #8
  unreachable

471:                                              ; preds = %464
  %472 = lshr i64 %468, 2
  %473 = shl i64 %468, 3
  %474 = tail call i8* @_Znwm(i64 %473) #7
  %475 = bitcast i8* %474 to i64**
  %476 = ptrtoint i8* %474 to i64
  %477 = getelementptr inbounds i64*, i64** %475, i64 %472
  %478 = ptrtoint i64** %477 to i64
  %479 = getelementptr inbounds i64*, i64** %475, i64 %468
  %480 = ptrtoint i64** %479 to i64
  %481 = ptrtoint i64** %444 to i64
  %482 = sub i64 %441, %481
  %483 = ashr exact i64 %482, 3
  %484 = getelementptr inbounds i64*, i64** %477, i64 %483
  %485 = icmp eq i64 %482, 0
  br i1 %485, label %561, label %486

486:                                              ; preds = %471
  %487 = add i64 %482, -8
  %488 = lshr i64 %487, 3
  %489 = add nuw nsw i64 %488, 1
  %490 = and i64 %489, 7
  %491 = icmp eq i64 %490, 0
  br i1 %491, label %507, label %492

492:                                              ; preds = %486, %492
  %493 = phi i64** [ %500, %492 ], [ %477, %486 ]
  %494 = phi i64 [ %501, %492 ], [ %478, %486 ]
  %495 = phi i64** [ %502, %492 ], [ %444, %486 ]
  %496 = phi i64 [ %503, %492 ], [ %490, %486 ]
  %497 = bitcast i64** %495 to i64*
  %498 = load i64, i64* %497, align 8
  %499 = inttoptr i64 %494 to i64*
  store i64 %498, i64* %499, align 8
  %500 = getelementptr inbounds i64*, i64** %493, i64 1
  %501 = ptrtoint i64** %500 to i64
  %502 = getelementptr inbounds i64*, i64** %495, i64 1
  %503 = add i64 %496, -1
  %504 = icmp eq i64 %503, 0
  br i1 %504, label %505, label %492, !llvm.loop !14

505:                                              ; preds = %492
  %506 = ptrtoint i64** %500 to i64
  br label %507

507:                                              ; preds = %486, %505
  %508 = phi i64** [ %477, %486 ], [ %500, %505 ]
  %509 = phi i64 [ %478, %486 ], [ %506, %505 ]
  %510 = phi i64** [ %444, %486 ], [ %502, %505 ]
  %511 = icmp ult i64 %487, 56
  br i1 %511, label %558, label %512

512:                                              ; preds = %507, %512
  %513 = phi i64** [ %554, %512 ], [ %508, %507 ]
  %514 = phi i64 [ %555, %512 ], [ %509, %507 ]
  %515 = phi i64** [ %556, %512 ], [ %510, %507 ]
  %516 = bitcast i64** %515 to i64*
  %517 = load i64, i64* %516, align 8
  %518 = inttoptr i64 %514 to i64*
  store i64 %517, i64* %518, align 8
  %519 = getelementptr inbounds i64*, i64** %513, i64 1
  %520 = getelementptr inbounds i64*, i64** %515, i64 1
  %521 = bitcast i64** %520 to i64*
  %522 = load i64, i64* %521, align 8
  %523 = bitcast i64** %519 to i64*
  store i64 %522, i64* %523, align 8
  %524 = getelementptr inbounds i64*, i64** %513, i64 2
  %525 = getelementptr inbounds i64*, i64** %515, i64 2
  %526 = bitcast i64** %525 to i64*
  %527 = load i64, i64* %526, align 8
  %528 = bitcast i64** %524 to i64*
  store i64 %527, i64* %528, align 8
  %529 = getelementptr inbounds i64*, i64** %513, i64 3
  %530 = getelementptr inbounds i64*, i64** %515, i64 3
  %531 = bitcast i64** %530 to i64*
  %532 = load i64, i64* %531, align 8
  %533 = bitcast i64** %529 to i64*
  store i64 %532, i64* %533, align 8
  %534 = getelementptr inbounds i64*, i64** %513, i64 4
  %535 = getelementptr inbounds i64*, i64** %515, i64 4
  %536 = bitcast i64** %535 to i64*
  %537 = load i64, i64* %536, align 8
  %538 = bitcast i64** %534 to i64*
  store i64 %537, i64* %538, align 8
  %539 = getelementptr inbounds i64*, i64** %513, i64 5
  %540 = getelementptr inbounds i64*, i64** %515, i64 5
  %541 = bitcast i64** %540 to i64*
  %542 = load i64, i64* %541, align 8
  %543 = bitcast i64** %539 to i64*
  store i64 %542, i64* %543, align 8
  %544 = getelementptr inbounds i64*, i64** %513, i64 6
  %545 = getelementptr inbounds i64*, i64** %515, i64 6
  %546 = bitcast i64** %545 to i64*
  %547 = load i64, i64* %546, align 8
  %548 = bitcast i64** %544 to i64*
  store i64 %547, i64* %548, align 8
  %549 = getelementptr inbounds i64*, i64** %513, i64 7
  %550 = getelementptr inbounds i64*, i64** %515, i64 7
  %551 = bitcast i64** %550 to i64*
  %552 = load i64, i64* %551, align 8
  %553 = bitcast i64** %549 to i64*
  store i64 %552, i64* %553, align 8
  %554 = getelementptr inbounds i64*, i64** %513, i64 8
  %555 = ptrtoint i64** %554 to i64
  %556 = getelementptr inbounds i64*, i64** %515, i64 8
  %557 = icmp eq i64** %484, %554
  br i1 %557, label %558, label %512

558:                                              ; preds = %512, %507
  %559 = ptrtoint i64** %484 to i64
  %560 = load i64**, i64*** %394, align 16
  br label %561

561:                                              ; preds = %558, %471
  %562 = phi i64** [ %560, %558 ], [ %445, %471 ]
  %563 = phi i64 [ %559, %558 ], [ %478, %471 ]
  store i64 %476, i64* %420, align 16
  store i64 %478, i64* %421, align 8
  store i64 %563, i64* %422, align 16
  store i64 %480, i64* %419, align 8
  %564 = icmp eq i64** %562, null
  %565 = inttoptr i64 %563 to i64*
  br i1 %564, label %568, label %566

566:                                              ; preds = %561
  %567 = bitcast i64** %562 to i8*
  tail call void @_ZdlPv(i8* %567) #7
  br label %568

568:                                              ; preds = %434, %461, %561, %566
  %569 = phi i64* [ %565, %566 ], [ %565, %561 ], [ %463, %461 ], [ %442, %434 ]
  store i64 %439, i64* %569, align 8
  %570 = load i64**, i64*** %396, align 16
  %571 = getelementptr inbounds i64*, i64** %570, i64 1
  store i64** %571, i64*** %396, align 16
  %572 = add i64 %437, -1
  %573 = icmp eq i64 %572, 0
  br i1 %573, label %423, label %574

574:                                              ; preds = %568
  %575 = load i64**, i64*** %397, align 8
  br label %434

576:                                              ; preds = %427, %709
  %577 = phi i64** [ %571, %427 ], [ %713, %709 ]
  %578 = phi i64* [ %433, %427 ], [ %718, %709 ]
  %579 = phi i64 [ %23, %427 ], [ %716, %709 ]
  %580 = load i64**, i64*** %397, align 8
  %581 = icmp eq i64** %577, %580
  %582 = ptrtoint i64** %580 to i64
  %583 = bitcast i64** %577 to i64*
  br i1 %581, label %584, label %709

584:                                              ; preds = %576
  %585 = load i64**, i64*** %395, align 8
  %586 = load i64**, i64*** %394, align 16
  %587 = icmp ugt i64** %585, %586
  %588 = ptrtoint i64** %586 to i64
  br i1 %587, label %589, label %605

589:                                              ; preds = %584
  %590 = ptrtoint i64** %585 to i64
  %591 = sub i64 %590, %588
  %592 = ashr exact i64 %591, 3
  %593 = add nsw i64 %592, 1
  %594 = sdiv i64 %593, -2
  %595 = getelementptr inbounds i64*, i64** %585, i64 %594
  %596 = sub i64 %582, %590
  %597 = ashr exact i64 %596, 3
  %598 = icmp eq i64 %596, 0
  br i1 %598, label %602, label %599

599:                                              ; preds = %589
  %600 = bitcast i64** %595 to i8*
  %601 = bitcast i64** %585 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %600, i8* align 8 %601, i64 %596, i1 false) #6
  br label %602

602:                                              ; preds = %599, %589
  %603 = getelementptr inbounds i64*, i64** %595, i64 %597
  store i64** %603, i64*** %396, align 16
  store i64** %595, i64*** %395, align 8
  %604 = bitcast i64** %603 to i64*
  br label %709

605:                                              ; preds = %584
  %606 = sub i64 %582, %588
  %607 = ashr exact i64 %606, 2
  %608 = icmp eq i64 %606, 0
  %609 = select i1 %608, i64 1, i64 %607
  %610 = icmp ugt i64 %609, 2305843009213693951
  br i1 %610, label %611, label %612

611:                                              ; preds = %605
  tail call void @abort() #8
  unreachable

612:                                              ; preds = %605
  %613 = lshr i64 %609, 2
  %614 = shl i64 %609, 3
  %615 = tail call i8* @_Znwm(i64 %614) #7
  %616 = bitcast i8* %615 to i64**
  %617 = ptrtoint i8* %615 to i64
  %618 = getelementptr inbounds i64*, i64** %616, i64 %613
  %619 = ptrtoint i64** %618 to i64
  %620 = getelementptr inbounds i64*, i64** %616, i64 %609
  %621 = ptrtoint i64** %620 to i64
  %622 = ptrtoint i64** %585 to i64
  %623 = sub i64 %582, %622
  %624 = ashr exact i64 %623, 3
  %625 = getelementptr inbounds i64*, i64** %618, i64 %624
  %626 = icmp eq i64 %623, 0
  br i1 %626, label %702, label %627

627:                                              ; preds = %612
  %628 = add i64 %623, -8
  %629 = lshr i64 %628, 3
  %630 = add nuw nsw i64 %629, 1
  %631 = and i64 %630, 7
  %632 = icmp eq i64 %631, 0
  br i1 %632, label %648, label %633

633:                                              ; preds = %627, %633
  %634 = phi i64** [ %641, %633 ], [ %618, %627 ]
  %635 = phi i64 [ %642, %633 ], [ %619, %627 ]
  %636 = phi i64** [ %643, %633 ], [ %585, %627 ]
  %637 = phi i64 [ %644, %633 ], [ %631, %627 ]
  %638 = bitcast i64** %636 to i64*
  %639 = load i64, i64* %638, align 8
  %640 = inttoptr i64 %635 to i64*
  store i64 %639, i64* %640, align 8
  %641 = getelementptr inbounds i64*, i64** %634, i64 1
  %642 = ptrtoint i64** %641 to i64
  %643 = getelementptr inbounds i64*, i64** %636, i64 1
  %644 = add i64 %637, -1
  %645 = icmp eq i64 %644, 0
  br i1 %645, label %646, label %633, !llvm.loop !15

646:                                              ; preds = %633
  %647 = ptrtoint i64** %641 to i64
  br label %648

648:                                              ; preds = %627, %646
  %649 = phi i64** [ %618, %627 ], [ %641, %646 ]
  %650 = phi i64 [ %619, %627 ], [ %647, %646 ]
  %651 = phi i64** [ %585, %627 ], [ %643, %646 ]
  %652 = icmp ult i64 %628, 56
  br i1 %652, label %699, label %653

653:                                              ; preds = %648, %653
  %654 = phi i64** [ %695, %653 ], [ %649, %648 ]
  %655 = phi i64 [ %696, %653 ], [ %650, %648 ]
  %656 = phi i64** [ %697, %653 ], [ %651, %648 ]
  %657 = bitcast i64** %656 to i64*
  %658 = load i64, i64* %657, align 8
  %659 = inttoptr i64 %655 to i64*
  store i64 %658, i64* %659, align 8
  %660 = getelementptr inbounds i64*, i64** %654, i64 1
  %661 = getelementptr inbounds i64*, i64** %656, i64 1
  %662 = bitcast i64** %661 to i64*
  %663 = load i64, i64* %662, align 8
  %664 = bitcast i64** %660 to i64*
  store i64 %663, i64* %664, align 8
  %665 = getelementptr inbounds i64*, i64** %654, i64 2
  %666 = getelementptr inbounds i64*, i64** %656, i64 2
  %667 = bitcast i64** %666 to i64*
  %668 = load i64, i64* %667, align 8
  %669 = bitcast i64** %665 to i64*
  store i64 %668, i64* %669, align 8
  %670 = getelementptr inbounds i64*, i64** %654, i64 3
  %671 = getelementptr inbounds i64*, i64** %656, i64 3
  %672 = bitcast i64** %671 to i64*
  %673 = load i64, i64* %672, align 8
  %674 = bitcast i64** %670 to i64*
  store i64 %673, i64* %674, align 8
  %675 = getelementptr inbounds i64*, i64** %654, i64 4
  %676 = getelementptr inbounds i64*, i64** %656, i64 4
  %677 = bitcast i64** %676 to i64*
  %678 = load i64, i64* %677, align 8
  %679 = bitcast i64** %675 to i64*
  store i64 %678, i64* %679, align 8
  %680 = getelementptr inbounds i64*, i64** %654, i64 5
  %681 = getelementptr inbounds i64*, i64** %656, i64 5
  %682 = bitcast i64** %681 to i64*
  %683 = load i64, i64* %682, align 8
  %684 = bitcast i64** %680 to i64*
  store i64 %683, i64* %684, align 8
  %685 = getelementptr inbounds i64*, i64** %654, i64 6
  %686 = getelementptr inbounds i64*, i64** %656, i64 6
  %687 = bitcast i64** %686 to i64*
  %688 = load i64, i64* %687, align 8
  %689 = bitcast i64** %685 to i64*
  store i64 %688, i64* %689, align 8
  %690 = getelementptr inbounds i64*, i64** %654, i64 7
  %691 = getelementptr inbounds i64*, i64** %656, i64 7
  %692 = bitcast i64** %691 to i64*
  %693 = load i64, i64* %692, align 8
  %694 = bitcast i64** %690 to i64*
  store i64 %693, i64* %694, align 8
  %695 = getelementptr inbounds i64*, i64** %654, i64 8
  %696 = ptrtoint i64** %695 to i64
  %697 = getelementptr inbounds i64*, i64** %656, i64 8
  %698 = icmp eq i64** %625, %695
  br i1 %698, label %699, label %653

699:                                              ; preds = %653, %648
  %700 = ptrtoint i64** %625 to i64
  %701 = load i64**, i64*** %394, align 16
  br label %702

702:                                              ; preds = %699, %612
  %703 = phi i64** [ %701, %699 ], [ %586, %612 ]
  %704 = phi i64 [ %700, %699 ], [ %619, %612 ]
  store i64 %617, i64* %430, align 16
  store i64 %619, i64* %431, align 8
  store i64 %704, i64* %432, align 16
  store i64 %621, i64* %429, align 8
  %705 = icmp eq i64** %703, null
  %706 = inttoptr i64 %704 to i64*
  br i1 %705, label %709, label %707

707:                                              ; preds = %702
  %708 = bitcast i64** %703 to i8*
  tail call void @_ZdlPv(i8* %708) #7
  br label %709

709:                                              ; preds = %576, %602, %702, %707
  %710 = phi i64* [ %706, %707 ], [ %706, %702 ], [ %604, %602 ], [ %583, %576 ]
  %711 = load i64, i64* %578, align 8
  store i64 %711, i64* %710, align 8
  %712 = load i64**, i64*** %396, align 16
  %713 = getelementptr inbounds i64*, i64** %712, i64 1
  store i64** %713, i64*** %396, align 16
  %714 = load i64**, i64*** %9, align 8
  %715 = getelementptr inbounds i64*, i64** %714, i64 1
  store i64** %715, i64*** %9, align 8
  %716 = add i64 %579, -1
  %717 = icmp eq i64 %716, 0
  %718 = bitcast i64** %715 to i64*
  br i1 %717, label %719, label %576

719:                                              ; preds = %709, %425
  %720 = phi i64** [ %571, %425 ], [ %713, %709 ]
  %721 = phi i64** [ %426, %425 ], [ %715, %709 ]
  %722 = load i64**, i64*** %7, align 8
  %723 = icmp eq i64** %722, %721
  br i1 %723, label %724, label %763

724:                                              ; preds = %719
  %725 = ptrtoint i64** %722 to i64
  %726 = ptrtoint i64** %720 to i64
  %727 = bitcast i64*** %396 to i64*
  br label %732

728:                                              ; preds = %763
  %729 = load i64, i64* %195, align 8
  %730 = bitcast i64*** %396 to i64*
  %731 = load i64, i64* %730, align 16
  br label %732

732:                                              ; preds = %724, %728
  %733 = phi i64* [ %727, %724 ], [ %730, %728 ]
  %734 = phi i64 [ %726, %724 ], [ %731, %728 ]
  %735 = phi i64 [ %725, %724 ], [ %729, %728 ]
  %736 = phi i64** [ %721, %724 ], [ %766, %728 ]
  %737 = ptrtoint i64** %736 to i64
  %738 = load i64, i64* %191, align 8
  %739 = bitcast %"struct.std::__1::__split_buffer.7"* %5 to i64*
  %740 = bitcast i64*** %395 to i64*
  %741 = bitcast %"struct.std::__1::__split_buffer.7"* %5 to <2 x i64>*
  %742 = load <2 x i64>, <2 x i64>* %741, align 16
  store i64 %738, i64* %739, align 16
  %743 = bitcast %"class.std::__1::deque"* %0 to <2 x i64>*
  store <2 x i64> %742, <2 x i64>* %743, align 8
  store i64 %737, i64* %740, align 8
  store i64 %734, i64* %195, align 8
  store i64 %735, i64* %733, align 8
  %744 = load i64, i64* %189, align 8
  %745 = bitcast i64*** %397 to i64*
  %746 = load i64, i64* %745, align 8
  store i64 %746, i64* %189, align 8
  store i64 %744, i64* %745, align 8
  %747 = load i64, i64* %19, align 8
  %748 = sub i64 %747, %392
  store i64 %748, i64* %19, align 8
  %749 = inttoptr i64 %735 to i64**
  %750 = icmp eq i64** %736, %749
  br i1 %750, label %758, label %751

751:                                              ; preds = %732
  %752 = getelementptr i64*, i64** %749, i64 -1
  %753 = ptrtoint i64** %752 to i64
  %754 = sub i64 %753, %737
  %755 = lshr i64 %754, 3
  %756 = xor i64 %755, -1
  %757 = getelementptr i64*, i64** %749, i64 %756
  store i64** %757, i64*** %396, align 16
  br label %758

758:                                              ; preds = %751, %732
  %759 = icmp eq i64 %738, 0
  br i1 %759, label %762, label %760

760:                                              ; preds = %758
  %761 = inttoptr i64 %738 to i8*
  call void @_ZdlPv(i8* %761) #7
  br label %762

762:                                              ; preds = %758, %760
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %393) #6
  br label %768

763:                                              ; preds = %719, %763
  %764 = phi i64** [ %765, %763 ], [ %722, %719 ]
  %765 = getelementptr inbounds i64*, i64** %764, i64 -1
  call void @_ZNSt3__114__split_bufferIPlRNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer.7"* nonnull %5, i64** dereferenceable(8) %765)
  %766 = load i64**, i64*** %9, align 8
  %767 = icmp eq i64** %765, %766
  br i1 %767, label %728, label %763

768:                                              ; preds = %385, %178, %236, %27, %762
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIlNS_9allocatorIlEEE26__move_construct_and_checkENS_16__deque_iteratorIlPlRlPS5_lLl0EEES8_S8_RPKl(%"class.std::__1::deque"*, i64**, i64*, i64**, i64*, %"class.std::__1::__deque_iterator"* byval(%"class.std::__1::__deque_iterator") align 8, i64** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %8 = ptrtoint i64* %2 to i64
  %9 = icmp eq i64* %4, %2
  br i1 %9, label %153, label %10

10:                                               ; preds = %7
  %11 = ptrtoint i64* %4 to i64
  %12 = ptrtoint i64** %3 to i64
  %13 = ptrtoint i64** %1 to i64
  %14 = sub i64 %12, %13
  %15 = shl i64 %14, 6
  %16 = bitcast i64** %3 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %11, %17
  %19 = ashr exact i64 %18, 3
  %20 = add nsw i64 %19, %15
  %21 = bitcast i64** %1 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %8, %22
  %24 = ashr exact i64 %23, 3
  %25 = sub i64 %20, %24
  %26 = icmp sgt i64 %25, 0
  br i1 %26, label %27, label %153

27:                                               ; preds = %10
  %28 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %5, i64 0, i32 1
  %29 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %5, i64 0, i32 0
  %30 = bitcast i64** %6 to i64*
  %31 = bitcast i64** %28 to i64*
  %32 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  br label %33

33:                                               ; preds = %27, %149
  %34 = phi i64 [ %25, %27 ], [ %124, %149 ]
  %35 = phi i64 [ %8, %27 ], [ %151, %149 ]
  %36 = phi i64** [ %1, %27 ], [ %150, %149 ]
  %37 = inttoptr i64 %35 to i64*
  %38 = load i64*, i64** %36, align 8
  %39 = getelementptr inbounds i64, i64* %38, i64 512
  %40 = ptrtoint i64* %39 to i64
  %41 = sub i64 %40, %35
  %42 = ashr exact i64 %41, 3
  %43 = icmp sgt i64 %42, %34
  %44 = getelementptr inbounds i64, i64* %37, i64 %34
  %45 = select i1 %43, i64* %44, i64* %39
  %46 = select i1 %43, i64 %34, i64 %42
  %47 = load i64*, i64** %6, align 8
  %48 = icmp uge i64* %47, %37
  %49 = icmp ult i64* %47, %45
  %50 = and i1 %48, %49
  %51 = ptrtoint i64* %38 to i64
  br i1 %50, label %52, label %97

52:                                               ; preds = %33
  %53 = load i64*, i64** %28, align 8
  %54 = icmp eq i64* %53, %37
  br i1 %54, label %55, label %57

55:                                               ; preds = %52
  %56 = ptrtoint i64* %47 to i64
  br label %95

57:                                               ; preds = %52
  %58 = ptrtoint i64* %53 to i64
  %59 = load i64**, i64*** %29, align 8
  %60 = ptrtoint i64** %59 to i64
  %61 = ptrtoint i64** %36 to i64
  %62 = sub i64 %60, %61
  %63 = shl i64 %62, 6
  %64 = bitcast i64** %59 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = sub i64 %58, %65
  %67 = ashr exact i64 %66, 3
  %68 = add nsw i64 %67, %63
  %69 = sub i64 %35, %51
  %70 = ashr exact i64 %69, 3
  %71 = sub i64 %68, %70
  %72 = ptrtoint i64* %47 to i64
  %73 = icmp eq i64 %71, 0
  br i1 %73, label %95, label %74

74:                                               ; preds = %57
  %75 = sub i64 %72, %51
  %76 = ashr exact i64 %75, 3
  %77 = add nsw i64 %76, %71
  %78 = icmp sgt i64 %77, 0
  br i1 %78, label %79, label %86

79:                                               ; preds = %74
  %80 = lshr i64 %77, 9
  %81 = getelementptr inbounds i64*, i64** %36, i64 %80
  %82 = load i64*, i64** %81, align 8
  %83 = and i64 %77, 511
  %84 = getelementptr inbounds i64, i64* %82, i64 %83
  %85 = ptrtoint i64* %84 to i64
  br label %95

86:                                               ; preds = %74
  %87 = sub nsw i64 511, %77
  %88 = sdiv i64 %87, -512
  %89 = getelementptr inbounds i64*, i64** %36, i64 %88
  %90 = load i64*, i64** %89, align 8
  %91 = srem i64 %87, 512
  %92 = sub nsw i64 511, %91
  %93 = getelementptr inbounds i64, i64* %90, i64 %92
  %94 = ptrtoint i64* %93 to i64
  br label %95

95:                                               ; preds = %55, %57, %79, %86
  %96 = phi i64 [ %72, %57 ], [ %85, %79 ], [ %94, %86 ], [ %56, %55 ]
  store i64 %96, i64* %30, align 8
  br label %97

97:                                               ; preds = %33, %95
  %98 = icmp eq i64* %45, %37
  br i1 %98, label %123, label %99

99:                                               ; preds = %97
  %100 = load i64*, i64** %28, align 8
  br label %101

101:                                              ; preds = %99, %118
  %102 = phi i64* [ %119, %118 ], [ %100, %99 ]
  %103 = phi i64* [ %105, %118 ], [ %37, %99 ]
  %104 = load i64, i64* %103, align 8
  store i64 %104, i64* %102, align 8
  %105 = getelementptr inbounds i64, i64* %103, i64 1
  %106 = getelementptr inbounds i64, i64* %102, i64 1
  store i64* %106, i64** %28, align 8
  %107 = load i64**, i64*** %29, align 8
  %108 = bitcast i64** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = ptrtoint i64* %106 to i64
  %111 = sub i64 %110, %109
  %112 = icmp eq i64 %111, 4096
  br i1 %112, label %113, label %118

113:                                              ; preds = %101
  %114 = getelementptr inbounds i64*, i64** %107, i64 1
  store i64** %114, i64*** %29, align 8
  %115 = bitcast i64** %114 to i64*
  %116 = load i64, i64* %115, align 8
  store i64 %116, i64* %31, align 8
  %117 = inttoptr i64 %116 to i64*
  br label %118

118:                                              ; preds = %101, %113
  %119 = phi i64* [ %106, %101 ], [ %117, %113 ]
  %120 = load i64, i64* %32, align 8
  %121 = add i64 %120, 1
  store i64 %121, i64* %32, align 8
  %122 = icmp eq i64* %105, %45
  br i1 %122, label %123, label %101

123:                                              ; preds = %118, %97
  %124 = sub nsw i64 %34, %46
  %125 = icmp eq i64 %46, 0
  br i1 %125, label %149, label %126

126:                                              ; preds = %123
  %127 = bitcast i64** %36 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = sub i64 %35, %128
  %130 = ashr exact i64 %129, 3
  %131 = add nsw i64 %130, %46
  %132 = icmp sgt i64 %131, 0
  br i1 %132, label %133, label %140

133:                                              ; preds = %126
  %134 = lshr i64 %131, 9
  %135 = getelementptr inbounds i64*, i64** %36, i64 %134
  %136 = load i64*, i64** %135, align 8
  %137 = and i64 %131, 511
  %138 = getelementptr inbounds i64, i64* %136, i64 %137
  %139 = ptrtoint i64* %138 to i64
  br label %149

140:                                              ; preds = %126
  %141 = sub nsw i64 511, %131
  %142 = sdiv i64 %141, -512
  %143 = getelementptr inbounds i64*, i64** %36, i64 %142
  %144 = load i64*, i64** %143, align 8
  %145 = srem i64 %141, 512
  %146 = sub nsw i64 511, %145
  %147 = getelementptr inbounds i64, i64* %144, i64 %146
  %148 = ptrtoint i64* %147 to i64
  br label %149

149:                                              ; preds = %123, %133, %140
  %150 = phi i64** [ %36, %123 ], [ %135, %133 ], [ %143, %140 ]
  %151 = phi i64 [ %35, %123 ], [ %139, %133 ], [ %148, %140 ]
  %152 = icmp sgt i64 %124, 0
  br i1 %152, label %33, label %153

153:                                              ; preds = %149, %7, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64**, i64* } @_ZNSt3__15dequeIlNS_9allocatorIlEEE25__move_backward_and_checkENS_16__deque_iteratorIlPlRlPS5_lLl0EEES8_S8_RPKl(%"class.std::__1::deque"*, i64**, i64*, i64**, i64*, %"class.std::__1::__deque_iterator"* byval(%"class.std::__1::__deque_iterator") align 8, i64** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %8 = ptrtoint i64* %4 to i64
  %9 = icmp eq i64* %4, %2
  br i1 %9, label %27, label %10

10:                                               ; preds = %7
  %11 = ptrtoint i64* %2 to i64
  %12 = ptrtoint i64** %3 to i64
  %13 = ptrtoint i64** %1 to i64
  %14 = sub i64 %12, %13
  %15 = shl i64 %14, 6
  %16 = bitcast i64** %3 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %8, %17
  %19 = ashr exact i64 %18, 3
  %20 = add nsw i64 %19, %15
  %21 = bitcast i64** %1 to i64*
  %22 = load i64, i64* %21, align 8
  %23 = sub i64 %11, %22
  %24 = ashr exact i64 %23, 3
  %25 = sub i64 %20, %24
  %26 = icmp sgt i64 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %7, %10
  %28 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %5, i64 0, i32 0
  %29 = load i64**, i64*** %28, align 8
  %30 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %5, i64 0, i32 1
  %31 = load i64*, i64** %30, align 8
  br label %242

32:                                               ; preds = %10
  %33 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %5, i64 0, i32 1
  %34 = getelementptr inbounds %"class.std::__1::__deque_iterator", %"class.std::__1::__deque_iterator"* %5, i64 0, i32 0
  %35 = bitcast i64** %6 to i64*
  %36 = bitcast i64** %33 to i64*
  br label %37

37:                                               ; preds = %32, %236
  %38 = phi i64 [ %25, %32 ], [ %210, %236 ]
  %39 = phi i64** [ %3, %32 ], [ %238, %236 ]
  %40 = phi i64 [ %8, %32 ], [ %237, %236 ]
  %41 = inttoptr i64 %40 to i64*
  %42 = load i64*, i64** %39, align 8
  %43 = icmp eq i64* %42, %41
  br i1 %43, label %44, label %48

44:                                               ; preds = %37
  %45 = getelementptr inbounds i64*, i64** %39, i64 -1
  %46 = load i64*, i64** %45, align 8
  %47 = getelementptr inbounds i64, i64* %46, i64 512
  br label %48

48:                                               ; preds = %37, %44
  %49 = phi i64* [ %46, %44 ], [ %42, %37 ]
  %50 = phi i64** [ %45, %44 ], [ %39, %37 ]
  %51 = phi i64* [ %47, %44 ], [ %41, %37 ]
  %52 = getelementptr inbounds i64, i64* %51, i64 -1
  %53 = ptrtoint i64* %52 to i64
  %54 = ptrtoint i64* %51 to i64
  %55 = ptrtoint i64* %49 to i64
  %56 = sub i64 %54, %55
  %57 = ashr exact i64 %56, 3
  %58 = icmp sgt i64 %57, %38
  %59 = sub nsw i64 0, %38
  %60 = getelementptr inbounds i64, i64* %51, i64 %59
  %61 = select i1 %58, i64 %38, i64 %57
  %62 = select i1 %58, i64* %60, i64* %49
  %63 = load i64*, i64** %6, align 8
  %64 = icmp ule i64* %62, %63
  %65 = icmp ult i64* %63, %51
  %66 = and i1 %65, %64
  br i1 %66, label %69, label %67

67:                                               ; preds = %48
  %68 = load i64, i64* %36, align 8
  br label %122

69:                                               ; preds = %48
  %70 = load i64*, i64** %33, align 8
  %71 = icmp eq i64* %70, %52
  %72 = ptrtoint i64* %70 to i64
  br i1 %71, label %73, label %77

73:                                               ; preds = %69
  %74 = ptrtoint i64* %63 to i64
  %75 = bitcast i64** %50 to i64*
  %76 = load i64, i64* %75, align 8
  br label %96

77:                                               ; preds = %69
  %78 = load i64**, i64*** %34, align 8
  %79 = ptrtoint i64** %78 to i64
  %80 = ptrtoint i64** %50 to i64
  %81 = sub i64 %79, %80
  %82 = shl i64 %81, 6
  %83 = bitcast i64** %78 to i64*
  %84 = load i64, i64* %83, align 8
  %85 = sub i64 %72, %84
  %86 = ashr exact i64 %85, 3
  %87 = add nsw i64 %86, %82
  %88 = bitcast i64** %50 to i64*
  %89 = load i64, i64* %88, align 8
  %90 = sub i64 %53, %89
  %91 = ashr exact i64 %90, 3
  %92 = xor i64 %91, -1
  %93 = add i64 %87, %92
  %94 = ptrtoint i64* %63 to i64
  %95 = icmp eq i64 %93, 0
  br i1 %95, label %120, label %96

96:                                               ; preds = %73, %77
  %97 = phi i64 [ %76, %73 ], [ %89, %77 ]
  %98 = phi i64 [ %74, %73 ], [ %94, %77 ]
  %99 = phi i64 [ -1, %73 ], [ %93, %77 ]
  %100 = sub i64 %98, %97
  %101 = ashr exact i64 %100, 3
  %102 = add nsw i64 %101, %99
  %103 = icmp sgt i64 %102, 0
  br i1 %103, label %104, label %111

104:                                              ; preds = %96
  %105 = lshr i64 %102, 9
  %106 = getelementptr inbounds i64*, i64** %50, i64 %105
  %107 = load i64*, i64** %106, align 8
  %108 = and i64 %102, 511
  %109 = getelementptr inbounds i64, i64* %107, i64 %108
  %110 = ptrtoint i64* %109 to i64
  br label %120

111:                                              ; preds = %96
  %112 = sub nsw i64 511, %102
  %113 = sdiv i64 %112, -512
  %114 = getelementptr inbounds i64*, i64** %50, i64 %113
  %115 = load i64*, i64** %114, align 8
  %116 = srem i64 %112, 512
  %117 = sub nsw i64 511, %116
  %118 = getelementptr inbounds i64, i64* %115, i64 %117
  %119 = ptrtoint i64* %118 to i64
  br label %120

120:                                              ; preds = %77, %104, %111
  %121 = phi i64 [ %94, %77 ], [ %110, %104 ], [ %119, %111 ]
  store i64 %121, i64* %35, align 8
  br label %122

122:                                              ; preds = %67, %120
  %123 = phi i64 [ %68, %67 ], [ %72, %120 ]
  %124 = load i64**, i64*** %34, align 8
  %125 = icmp eq i64* %51, %62
  br i1 %125, label %206, label %126

126:                                              ; preds = %122
  %127 = ptrtoint i64* %62 to i64
  br label %128

128:                                              ; preds = %202, %126
  %129 = phi i64* [ %51, %126 ], [ %168, %202 ]
  %130 = phi i64** [ %124, %126 ], [ %204, %202 ]
  %131 = phi i64 [ %123, %126 ], [ %203, %202 ]
  %132 = bitcast i64** %130 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = sub i64 %131, %133
  %135 = ashr exact i64 %134, 3
  %136 = add nsw i64 %135, -1
  %137 = icmp sgt i64 %136, 0
  br i1 %137, label %138, label %144

138:                                              ; preds = %128
  %139 = lshr i64 %136, 9
  %140 = getelementptr inbounds i64*, i64** %130, i64 %139
  %141 = load i64*, i64** %140, align 8
  %142 = and i64 %136, 511
  %143 = getelementptr inbounds i64, i64* %141, i64 %142
  br label %152

144:                                              ; preds = %128
  %145 = sub nsw i64 512, %135
  %146 = sdiv i64 %145, -512
  %147 = getelementptr inbounds i64*, i64** %130, i64 %146
  %148 = load i64*, i64** %147, align 8
  %149 = srem i64 %145, 512
  %150 = sub nuw nsw i64 511, %149
  %151 = getelementptr inbounds i64, i64* %148, i64 %150
  br label %152

152:                                              ; preds = %144, %138
  %153 = phi i64* [ %143, %138 ], [ %151, %144 ]
  %154 = phi i64** [ %140, %138 ], [ %147, %144 ]
  %155 = bitcast i64** %154 to i64*
  %156 = load i64, i64* %155, align 8
  %157 = getelementptr inbounds i64, i64* %153, i64 1
  %158 = ptrtoint i64* %157 to i64
  %159 = sub i64 %158, %156
  %160 = ashr exact i64 %159, 3
  %161 = ptrtoint i64* %129 to i64
  %162 = sub i64 %161, %127
  %163 = ashr exact i64 %162, 3
  %164 = icmp sgt i64 %163, %160
  %165 = sub nsw i64 0, %160
  %166 = getelementptr inbounds i64, i64* %129, i64 %165
  %167 = select i1 %164, i64 %160, i64 %163
  %168 = select i1 %164, i64* %166, i64* %62
  %169 = ptrtoint i64* %168 to i64
  %170 = sub i64 %161, %169
  %171 = icmp eq i64 %170, 0
  br i1 %171, label %178, label %172

172:                                              ; preds = %152
  %173 = ashr exact i64 %170, 3
  %174 = sub nsw i64 0, %173
  %175 = getelementptr inbounds i64, i64* %157, i64 %174
  %176 = bitcast i64* %175 to i8*
  %177 = bitcast i64* %168 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %176, i8* align 8 %177, i64 %170, i1 false) #6
  br label %178

178:                                              ; preds = %172, %152
  %179 = icmp eq i64 %167, 0
  br i1 %179, label %202, label %180

180:                                              ; preds = %178
  %181 = load i64, i64* %132, align 8
  %182 = sub i64 %131, %181
  %183 = ashr exact i64 %182, 3
  %184 = sub nsw i64 %183, %167
  %185 = icmp sgt i64 %184, 0
  br i1 %185, label %186, label %193

186:                                              ; preds = %180
  %187 = lshr i64 %184, 9
  %188 = getelementptr inbounds i64*, i64** %130, i64 %187
  %189 = load i64*, i64** %188, align 8
  %190 = and i64 %184, 511
  %191 = getelementptr inbounds i64, i64* %189, i64 %190
  %192 = ptrtoint i64* %191 to i64
  br label %202

193:                                              ; preds = %180
  %194 = sub nsw i64 511, %184
  %195 = sdiv i64 %194, -512
  %196 = getelementptr inbounds i64*, i64** %130, i64 %195
  %197 = load i64*, i64** %196, align 8
  %198 = srem i64 %194, 512
  %199 = sub nuw nsw i64 511, %198
  %200 = getelementptr inbounds i64, i64* %197, i64 %199
  %201 = ptrtoint i64* %200 to i64
  br label %202

202:                                              ; preds = %193, %186, %178
  %203 = phi i64 [ %131, %178 ], [ %192, %186 ], [ %201, %193 ]
  %204 = phi i64** [ %130, %178 ], [ %188, %186 ], [ %196, %193 ]
  %205 = icmp eq i64* %168, %62
  br i1 %205, label %206, label %128

206:                                              ; preds = %202, %122
  %207 = phi i64 [ %123, %122 ], [ %203, %202 ]
  %208 = phi i64** [ %124, %122 ], [ %204, %202 ]
  %209 = inttoptr i64 %207 to i64*
  store i64** %208, i64*** %34, align 8
  store i64* %209, i64** %33, align 8
  %210 = sub nsw i64 %38, %61
  %211 = add nsw i64 %61, -1
  %212 = icmp eq i64 %211, 0
  br i1 %212, label %236, label %213

213:                                              ; preds = %206
  %214 = bitcast i64** %50 to i64*
  %215 = load i64, i64* %214, align 8
  %216 = sub i64 %53, %215
  %217 = ashr exact i64 %216, 3
  %218 = sub i64 %217, %211
  %219 = icmp sgt i64 %218, 0
  br i1 %219, label %220, label %227

220:                                              ; preds = %213
  %221 = lshr i64 %218, 9
  %222 = getelementptr inbounds i64*, i64** %50, i64 %221
  %223 = load i64*, i64** %222, align 8
  %224 = and i64 %218, 511
  %225 = getelementptr inbounds i64, i64* %223, i64 %224
  %226 = ptrtoint i64* %225 to i64
  br label %236

227:                                              ; preds = %213
  %228 = sub nsw i64 511, %218
  %229 = sdiv i64 %228, -512
  %230 = getelementptr inbounds i64*, i64** %50, i64 %229
  %231 = load i64*, i64** %230, align 8
  %232 = srem i64 %228, 512
  %233 = sub nsw i64 511, %232
  %234 = getelementptr inbounds i64, i64* %231, i64 %233
  %235 = ptrtoint i64* %234 to i64
  br label %236

236:                                              ; preds = %206, %220, %227
  %237 = phi i64 [ %53, %206 ], [ %226, %220 ], [ %235, %227 ]
  %238 = phi i64** [ %50, %206 ], [ %222, %220 ], [ %230, %227 ]
  %239 = icmp sgt i64 %210, 0
  br i1 %239, label %37, label %240

240:                                              ; preds = %236
  %241 = inttoptr i64 %207 to i64*
  br label %242

242:                                              ; preds = %240, %27
  %243 = phi i64* [ %31, %27 ], [ %241, %240 ]
  %244 = phi i64** [ %29, %27 ], [ %208, %240 ]
  %245 = insertvalue { i64**, i64* } undef, i64** %244, 0
  %246 = insertvalue { i64**, i64* } %245, i64* %243, 1
  ret { i64**, i64* } %246
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPlNS_9allocatorIS1_EEE10push_frontERKS1_(%"struct.std::__1::__split_buffer"*, i64** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load i64**, i64*** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load i64**, i64*** %5, align 8
  %7 = icmp eq i64** %4, %6
  %8 = ptrtoint i64** %6 to i64
  br i1 %7, label %9, label %147

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load i64**, i64*** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load i64**, i64*** %12, align 8
  %14 = icmp ult i64** %11, %13
  %15 = bitcast i64*** %12 to i64*
  %16 = ptrtoint i64** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint i64** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds i64*, i64** %11, i64 %22
  %24 = ptrtoint i64** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds i64*, i64** %23, i64 %29
  %31 = bitcast i64** %30 to i8*
  %32 = bitcast i64** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #6
  %33 = load i64**, i64*** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi i64** [ %33, %27 ], [ %11, %17 ]
  %36 = phi i64** [ %30, %27 ], [ %23, %17 ]
  store i64** %36, i64*** %3, align 8
  %37 = getelementptr inbounds i64*, i64** %35, i64 %22
  store i64** %37, i64*** %10, align 8
  br label %147

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = icmp ugt i64 %43, 2305843009213693951
  br i1 %44, label %45, label %46

45:                                               ; preds = %38
  tail call void @abort() #8
  unreachable

46:                                               ; preds = %38
  %47 = add nuw nsw i64 %43, 3
  %48 = lshr i64 %47, 2
  %49 = shl i64 %43, 3
  %50 = tail call i8* @_Znwm(i64 %49) #7
  %51 = bitcast i8* %50 to i64**
  %52 = ptrtoint i8* %50 to i64
  %53 = getelementptr inbounds i64*, i64** %51, i64 %48
  %54 = ptrtoint i64** %53 to i64
  %55 = getelementptr inbounds i64*, i64** %51, i64 %43
  %56 = ptrtoint i64** %55 to i64
  %57 = ptrtoint i64** %4 to i64
  %58 = ptrtoint i64** %11 to i64
  %59 = sub i64 %58, %57
  %60 = ashr exact i64 %59, 3
  %61 = getelementptr inbounds i64*, i64** %53, i64 %60
  %62 = icmp eq i64 %59, 0
  br i1 %62, label %138, label %63

63:                                               ; preds = %46
  %64 = add i64 %59, -8
  %65 = lshr i64 %64, 3
  %66 = add nuw nsw i64 %65, 1
  %67 = and i64 %66, 7
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %84, label %69

69:                                               ; preds = %63, %69
  %70 = phi i64** [ %77, %69 ], [ %53, %63 ]
  %71 = phi i64 [ %78, %69 ], [ %54, %63 ]
  %72 = phi i64** [ %79, %69 ], [ %4, %63 ]
  %73 = phi i64 [ %80, %69 ], [ %67, %63 ]
  %74 = bitcast i64** %72 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = inttoptr i64 %71 to i64*
  store i64 %75, i64* %76, align 8
  %77 = getelementptr inbounds i64*, i64** %70, i64 1
  %78 = ptrtoint i64** %77 to i64
  %79 = getelementptr inbounds i64*, i64** %72, i64 1
  %80 = add i64 %73, -1
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %69, !llvm.loop !16

82:                                               ; preds = %69
  %83 = ptrtoint i64** %77 to i64
  br label %84

84:                                               ; preds = %63, %82
  %85 = phi i64** [ %53, %63 ], [ %77, %82 ]
  %86 = phi i64 [ %54, %63 ], [ %83, %82 ]
  %87 = phi i64** [ %4, %63 ], [ %79, %82 ]
  %88 = icmp ult i64 %64, 56
  br i1 %88, label %135, label %89

89:                                               ; preds = %84, %89
  %90 = phi i64** [ %131, %89 ], [ %85, %84 ]
  %91 = phi i64 [ %132, %89 ], [ %86, %84 ]
  %92 = phi i64** [ %133, %89 ], [ %87, %84 ]
  %93 = bitcast i64** %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = inttoptr i64 %91 to i64*
  store i64 %94, i64* %95, align 8
  %96 = getelementptr inbounds i64*, i64** %90, i64 1
  %97 = getelementptr inbounds i64*, i64** %92, i64 1
  %98 = bitcast i64** %97 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast i64** %96 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds i64*, i64** %90, i64 2
  %102 = getelementptr inbounds i64*, i64** %92, i64 2
  %103 = bitcast i64** %102 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = bitcast i64** %101 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds i64*, i64** %90, i64 3
  %107 = getelementptr inbounds i64*, i64** %92, i64 3
  %108 = bitcast i64** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast i64** %106 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds i64*, i64** %90, i64 4
  %112 = getelementptr inbounds i64*, i64** %92, i64 4
  %113 = bitcast i64** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = bitcast i64** %111 to i64*
  store i64 %114, i64* %115, align 8
  %116 = getelementptr inbounds i64*, i64** %90, i64 5
  %117 = getelementptr inbounds i64*, i64** %92, i64 5
  %118 = bitcast i64** %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = bitcast i64** %116 to i64*
  store i64 %119, i64* %120, align 8
  %121 = getelementptr inbounds i64*, i64** %90, i64 6
  %122 = getelementptr inbounds i64*, i64** %92, i64 6
  %123 = bitcast i64** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = bitcast i64** %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds i64*, i64** %90, i64 7
  %127 = getelementptr inbounds i64*, i64** %92, i64 7
  %128 = bitcast i64** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast i64** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds i64*, i64** %90, i64 8
  %132 = ptrtoint i64** %131 to i64
  %133 = getelementptr inbounds i64*, i64** %92, i64 8
  %134 = icmp eq i64** %61, %131
  br i1 %134, label %135, label %89

135:                                              ; preds = %89, %84
  %136 = ptrtoint i64** %61 to i64
  %137 = load i64**, i64*** %5, align 8
  br label %138

138:                                              ; preds = %46, %135
  %139 = phi i64** [ %137, %135 ], [ %4, %46 ]
  %140 = phi i64 [ %136, %135 ], [ %54, %46 ]
  store i64 %52, i64* %39, align 8
  %141 = bitcast i64*** %3 to i64*
  store i64 %54, i64* %141, align 8
  %142 = bitcast i64*** %10 to i64*
  store i64 %140, i64* %142, align 8
  store i64 %56, i64* %15, align 8
  %143 = icmp eq i64** %139, null
  br i1 %143, label %147, label %144

144:                                              ; preds = %138
  %145 = bitcast i64** %139 to i8*
  tail call void @_ZdlPv(i8* %145) #7
  %146 = load i64**, i64*** %3, align 8
  br label %147

147:                                              ; preds = %144, %138, %34, %2
  %148 = phi i64** [ %146, %144 ], [ %53, %138 ], [ %36, %34 ], [ %4, %2 ]
  %149 = getelementptr inbounds i64*, i64** %148, i64 -1
  %150 = bitcast i64** %1 to i64*
  %151 = load i64, i64* %150, align 8
  %152 = bitcast i64** %149 to i64*
  store i64 %151, i64* %152, align 8
  %153 = load i64**, i64*** %3, align 8
  %154 = getelementptr inbounds i64*, i64** %153, i64 -1
  store i64** %154, i64*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64**, i64* } @_ZNSt3__113move_backwardIlPlRlPS1_lLl0ElS1_S2_S3_lLl0EEENS_16__deque_iteratorIT5_T6_T7_T8_T9_XT10_EEENS4_IT_T0_T1_T2_T3_XT4_EEESG_SA_(i64**, i64*, i64**, i64*, i64**, i64*) local_unnamed_addr #0 comdat {
  %7 = ptrtoint i64* %3 to i64
  %8 = icmp eq i64* %3, %1
  br i1 %8, label %172, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i64* %1 to i64
  %11 = ptrtoint i64** %2 to i64
  %12 = ptrtoint i64** %0 to i64
  %13 = sub i64 %11, %12
  %14 = shl i64 %13, 6
  %15 = bitcast i64** %2 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %7, %16
  %18 = ashr exact i64 %17, 3
  %19 = add nsw i64 %18, %14
  %20 = bitcast i64** %0 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %10, %21
  %23 = ashr exact i64 %22, 3
  %24 = sub i64 %19, %23
  %25 = icmp sgt i64 %24, 0
  br i1 %25, label %26, label %172

26:                                               ; preds = %9, %166
  %27 = phi i64* [ %139, %166 ], [ %5, %9 ]
  %28 = phi i64** [ %138, %166 ], [ %4, %9 ]
  %29 = phi i64 [ %140, %166 ], [ %24, %9 ]
  %30 = phi i64** [ %168, %166 ], [ %2, %9 ]
  %31 = phi i64 [ %167, %166 ], [ %7, %9 ]
  %32 = inttoptr i64 %31 to i64*
  %33 = load i64*, i64** %30, align 8
  %34 = icmp eq i64* %33, %32
  br i1 %34, label %35, label %39

35:                                               ; preds = %26
  %36 = getelementptr inbounds i64*, i64** %30, i64 -1
  %37 = load i64*, i64** %36, align 8
  %38 = getelementptr inbounds i64, i64* %37, i64 512
  br label %39

39:                                               ; preds = %26, %35
  %40 = phi i64* [ %37, %35 ], [ %33, %26 ]
  %41 = phi i64** [ %36, %35 ], [ %30, %26 ]
  %42 = phi i64* [ %38, %35 ], [ %32, %26 ]
  %43 = getelementptr inbounds i64, i64* %42, i64 -1
  %44 = ptrtoint i64* %43 to i64
  %45 = ptrtoint i64* %42 to i64
  %46 = ptrtoint i64* %40 to i64
  %47 = sub i64 %45, %46
  %48 = ashr exact i64 %47, 3
  %49 = icmp sgt i64 %48, %29
  %50 = sub nsw i64 0, %29
  %51 = getelementptr inbounds i64, i64* %42, i64 %50
  %52 = select i1 %49, i64 %29, i64 %48
  %53 = select i1 %49, i64* %51, i64* %40
  %54 = ptrtoint i64* %27 to i64
  %55 = icmp eq i64* %42, %53
  br i1 %55, label %136, label %56

56:                                               ; preds = %39
  %57 = ptrtoint i64* %53 to i64
  br label %58

58:                                               ; preds = %132, %56
  %59 = phi i64* [ %42, %56 ], [ %98, %132 ]
  %60 = phi i64** [ %28, %56 ], [ %134, %132 ]
  %61 = phi i64 [ %54, %56 ], [ %133, %132 ]
  %62 = bitcast i64** %60 to i64*
  %63 = load i64, i64* %62, align 8
  %64 = sub i64 %61, %63
  %65 = ashr exact i64 %64, 3
  %66 = add nsw i64 %65, -1
  %67 = icmp sgt i64 %66, 0
  br i1 %67, label %68, label %74

68:                                               ; preds = %58
  %69 = lshr i64 %66, 9
  %70 = getelementptr inbounds i64*, i64** %60, i64 %69
  %71 = load i64*, i64** %70, align 8
  %72 = and i64 %66, 511
  %73 = getelementptr inbounds i64, i64* %71, i64 %72
  br label %82

74:                                               ; preds = %58
  %75 = sub nsw i64 512, %65
  %76 = sdiv i64 %75, -512
  %77 = getelementptr inbounds i64*, i64** %60, i64 %76
  %78 = load i64*, i64** %77, align 8
  %79 = srem i64 %75, 512
  %80 = sub nuw nsw i64 511, %79
  %81 = getelementptr inbounds i64, i64* %78, i64 %80
  br label %82

82:                                               ; preds = %74, %68
  %83 = phi i64* [ %73, %68 ], [ %81, %74 ]
  %84 = phi i64** [ %70, %68 ], [ %77, %74 ]
  %85 = bitcast i64** %84 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = getelementptr inbounds i64, i64* %83, i64 1
  %88 = ptrtoint i64* %87 to i64
  %89 = sub i64 %88, %86
  %90 = ashr exact i64 %89, 3
  %91 = ptrtoint i64* %59 to i64
  %92 = sub i64 %91, %57
  %93 = ashr exact i64 %92, 3
  %94 = icmp sgt i64 %93, %90
  %95 = sub nsw i64 0, %90
  %96 = getelementptr inbounds i64, i64* %59, i64 %95
  %97 = select i1 %94, i64 %90, i64 %93
  %98 = select i1 %94, i64* %96, i64* %53
  %99 = ptrtoint i64* %98 to i64
  %100 = sub i64 %91, %99
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %108, label %102

102:                                              ; preds = %82
  %103 = ashr exact i64 %100, 3
  %104 = sub nsw i64 0, %103
  %105 = getelementptr inbounds i64, i64* %87, i64 %104
  %106 = bitcast i64* %105 to i8*
  %107 = bitcast i64* %98 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %106, i8* align 8 %107, i64 %100, i1 false) #6
  br label %108

108:                                              ; preds = %102, %82
  %109 = icmp eq i64 %97, 0
  br i1 %109, label %132, label %110

110:                                              ; preds = %108
  %111 = load i64, i64* %62, align 8
  %112 = sub i64 %61, %111
  %113 = ashr exact i64 %112, 3
  %114 = sub nsw i64 %113, %97
  %115 = icmp sgt i64 %114, 0
  br i1 %115, label %116, label %123

116:                                              ; preds = %110
  %117 = lshr i64 %114, 9
  %118 = getelementptr inbounds i64*, i64** %60, i64 %117
  %119 = load i64*, i64** %118, align 8
  %120 = and i64 %114, 511
  %121 = getelementptr inbounds i64, i64* %119, i64 %120
  %122 = ptrtoint i64* %121 to i64
  br label %132

123:                                              ; preds = %110
  %124 = sub nsw i64 511, %114
  %125 = sdiv i64 %124, -512
  %126 = getelementptr inbounds i64*, i64** %60, i64 %125
  %127 = load i64*, i64** %126, align 8
  %128 = srem i64 %124, 512
  %129 = sub nuw nsw i64 511, %128
  %130 = getelementptr inbounds i64, i64* %127, i64 %129
  %131 = ptrtoint i64* %130 to i64
  br label %132

132:                                              ; preds = %123, %116, %108
  %133 = phi i64 [ %61, %108 ], [ %122, %116 ], [ %131, %123 ]
  %134 = phi i64** [ %60, %108 ], [ %118, %116 ], [ %126, %123 ]
  %135 = icmp eq i64* %98, %53
  br i1 %135, label %136, label %58

136:                                              ; preds = %132, %39
  %137 = phi i64 [ %54, %39 ], [ %133, %132 ]
  %138 = phi i64** [ %28, %39 ], [ %134, %132 ]
  %139 = inttoptr i64 %137 to i64*
  %140 = sub nsw i64 %29, %52
  %141 = add nsw i64 %52, -1
  %142 = icmp eq i64 %141, 0
  br i1 %142, label %166, label %143

143:                                              ; preds = %136
  %144 = bitcast i64** %41 to i64*
  %145 = load i64, i64* %144, align 8
  %146 = sub i64 %44, %145
  %147 = ashr exact i64 %146, 3
  %148 = sub i64 %147, %141
  %149 = icmp sgt i64 %148, 0
  br i1 %149, label %150, label %157

150:                                              ; preds = %143
  %151 = lshr i64 %148, 9
  %152 = getelementptr inbounds i64*, i64** %41, i64 %151
  %153 = load i64*, i64** %152, align 8
  %154 = and i64 %148, 511
  %155 = getelementptr inbounds i64, i64* %153, i64 %154
  %156 = ptrtoint i64* %155 to i64
  br label %166

157:                                              ; preds = %143
  %158 = sub nsw i64 511, %148
  %159 = sdiv i64 %158, -512
  %160 = getelementptr inbounds i64*, i64** %41, i64 %159
  %161 = load i64*, i64** %160, align 8
  %162 = srem i64 %158, 512
  %163 = sub nsw i64 511, %162
  %164 = getelementptr inbounds i64, i64* %161, i64 %163
  %165 = ptrtoint i64* %164 to i64
  br label %166

166:                                              ; preds = %136, %150, %157
  %167 = phi i64 [ %44, %136 ], [ %156, %150 ], [ %165, %157 ]
  %168 = phi i64** [ %41, %136 ], [ %152, %150 ], [ %160, %157 ]
  %169 = icmp sgt i64 %140, 0
  br i1 %169, label %26, label %170

170:                                              ; preds = %166
  %171 = inttoptr i64 %137 to i64*
  br label %172

172:                                              ; preds = %170, %6, %9
  %173 = phi i64** [ %4, %9 ], [ %4, %6 ], [ %138, %170 ]
  %174 = phi i64* [ %5, %9 ], [ %5, %6 ], [ %171, %170 ]
  %175 = insertvalue { i64**, i64* } undef, i64** %173, 0
  %176 = insertvalue { i64**, i64* } %175, i64* %174, 1
  ret { i64**, i64* } %176
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden { i64**, i64* } @_ZNSt3__14moveIlPlRlPS1_lLl0ElS1_S2_S3_lLl0EEENS_16__deque_iteratorIT5_T6_T7_T8_T9_XT10_EEENS4_IT_T0_T1_T2_T3_XT4_EEESG_SA_(i64**, i64*, i64**, i64*, i64**, i64*) local_unnamed_addr #0 comdat {
  %7 = ptrtoint i64* %1 to i64
  %8 = icmp eq i64* %3, %1
  br i1 %8, label %132, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i64* %3 to i64
  %11 = ptrtoint i64** %2 to i64
  %12 = ptrtoint i64** %0 to i64
  %13 = sub i64 %11, %12
  %14 = shl i64 %13, 6
  %15 = bitcast i64** %2 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %10, %16
  %18 = ashr exact i64 %17, 3
  %19 = add nsw i64 %18, %14
  %20 = bitcast i64** %0 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = sub i64 %7, %21
  %23 = ashr exact i64 %22, 3
  %24 = sub i64 %19, %23
  %25 = icmp sgt i64 %24, 0
  br i1 %25, label %26, label %132

26:                                               ; preds = %9, %126
  %27 = phi i64* [ %100, %126 ], [ %5, %9 ]
  %28 = phi i64** [ %99, %126 ], [ %4, %9 ]
  %29 = phi i64 [ %101, %126 ], [ %24, %9 ]
  %30 = phi i64 [ %128, %126 ], [ %7, %9 ]
  %31 = phi i64** [ %127, %126 ], [ %0, %9 ]
  %32 = inttoptr i64 %30 to i64*
  %33 = load i64*, i64** %31, align 8
  %34 = getelementptr inbounds i64, i64* %33, i64 512
  %35 = ptrtoint i64* %34 to i64
  %36 = sub i64 %35, %30
  %37 = ashr exact i64 %36, 3
  %38 = icmp sgt i64 %37, %29
  %39 = getelementptr inbounds i64, i64* %32, i64 %29
  %40 = select i1 %38, i64* %39, i64* %34
  %41 = select i1 %38, i64 %29, i64 %37
  %42 = ptrtoint i64* %27 to i64
  %43 = icmp eq i64* %40, %32
  br i1 %43, label %97, label %44

44:                                               ; preds = %26
  %45 = ptrtoint i64* %40 to i64
  br label %46

46:                                               ; preds = %93, %44
  %47 = phi i64* [ %32, %44 ], [ %61, %93 ]
  %48 = phi i64** [ %28, %44 ], [ %95, %93 ]
  %49 = phi i64 [ %42, %44 ], [ %94, %93 ]
  %50 = load i64*, i64** %48, align 8
  %51 = getelementptr inbounds i64, i64* %50, i64 512
  %52 = ptrtoint i64* %51 to i64
  %53 = sub i64 %52, %49
  %54 = ashr exact i64 %53, 3
  %55 = ptrtoint i64* %47 to i64
  %56 = sub i64 %45, %55
  %57 = ashr exact i64 %56, 3
  %58 = icmp sgt i64 %57, %54
  %59 = getelementptr inbounds i64, i64* %47, i64 %54
  %60 = select i1 %58, i64 %54, i64 %57
  %61 = select i1 %58, i64* %59, i64* %40
  %62 = ptrtoint i64* %61 to i64
  %63 = sub i64 %62, %55
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %68, label %65

65:                                               ; preds = %46
  %66 = inttoptr i64 %49 to i8*
  %67 = bitcast i64* %47 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %66, i8* align 8 %67, i64 %63, i1 false) #6
  br label %68

68:                                               ; preds = %65, %46
  %69 = icmp eq i64 %60, 0
  br i1 %69, label %93, label %70

70:                                               ; preds = %68
  %71 = bitcast i64** %48 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = sub i64 %49, %72
  %74 = ashr exact i64 %73, 3
  %75 = add nsw i64 %74, %60
  %76 = icmp sgt i64 %75, 0
  br i1 %76, label %77, label %84

77:                                               ; preds = %70
  %78 = lshr i64 %75, 9
  %79 = getelementptr inbounds i64*, i64** %48, i64 %78
  %80 = load i64*, i64** %79, align 8
  %81 = and i64 %75, 511
  %82 = getelementptr inbounds i64, i64* %80, i64 %81
  %83 = ptrtoint i64* %82 to i64
  br label %93

84:                                               ; preds = %70
  %85 = sub nsw i64 511, %75
  %86 = sdiv i64 %85, -512
  %87 = getelementptr inbounds i64*, i64** %48, i64 %86
  %88 = load i64*, i64** %87, align 8
  %89 = srem i64 %85, 512
  %90 = sub nuw nsw i64 511, %89
  %91 = getelementptr inbounds i64, i64* %88, i64 %90
  %92 = ptrtoint i64* %91 to i64
  br label %93

93:                                               ; preds = %84, %77, %68
  %94 = phi i64 [ %49, %68 ], [ %83, %77 ], [ %92, %84 ]
  %95 = phi i64** [ %48, %68 ], [ %79, %77 ], [ %87, %84 ]
  %96 = icmp eq i64* %61, %40
  br i1 %96, label %97, label %46

97:                                               ; preds = %93, %26
  %98 = phi i64 [ %42, %26 ], [ %94, %93 ]
  %99 = phi i64** [ %28, %26 ], [ %95, %93 ]
  %100 = inttoptr i64 %98 to i64*
  %101 = sub nsw i64 %29, %41
  %102 = icmp eq i64 %41, 0
  br i1 %102, label %126, label %103

103:                                              ; preds = %97
  %104 = bitcast i64** %31 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = sub i64 %30, %105
  %107 = ashr exact i64 %106, 3
  %108 = add nsw i64 %107, %41
  %109 = icmp sgt i64 %108, 0
  br i1 %109, label %110, label %117

110:                                              ; preds = %103
  %111 = lshr i64 %108, 9
  %112 = getelementptr inbounds i64*, i64** %31, i64 %111
  %113 = load i64*, i64** %112, align 8
  %114 = and i64 %108, 511
  %115 = getelementptr inbounds i64, i64* %113, i64 %114
  %116 = ptrtoint i64* %115 to i64
  br label %126

117:                                              ; preds = %103
  %118 = sub nsw i64 511, %108
  %119 = sdiv i64 %118, -512
  %120 = getelementptr inbounds i64*, i64** %31, i64 %119
  %121 = load i64*, i64** %120, align 8
  %122 = srem i64 %118, 512
  %123 = sub nsw i64 511, %122
  %124 = getelementptr inbounds i64, i64* %121, i64 %123
  %125 = ptrtoint i64* %124 to i64
  br label %126

126:                                              ; preds = %97, %110, %117
  %127 = phi i64** [ %31, %97 ], [ %112, %110 ], [ %120, %117 ]
  %128 = phi i64 [ %30, %97 ], [ %116, %110 ], [ %125, %117 ]
  %129 = icmp sgt i64 %101, 0
  br i1 %129, label %26, label %130

130:                                              ; preds = %126
  %131 = inttoptr i64 %98 to i64*
  br label %132

132:                                              ; preds = %130, %6, %9
  %133 = phi i64** [ %4, %9 ], [ %4, %6 ], [ %99, %130 ]
  %134 = phi i64* [ %5, %9 ], [ %5, %6 ], [ %131, %130 ]
  %135 = insertvalue { i64**, i64* } undef, i64** %133, 0
  %136 = insertvalue { i64**, i64* } %135, i64* %134, 1
  ret { i64**, i64* } %136
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }
attributes #8 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
!5 = distinct !{!5, !4}
!6 = distinct !{!6, !4}
!7 = distinct !{!7, !4}
!8 = distinct !{!8, !4}
!9 = distinct !{!9, !4}
!10 = distinct !{!10, !4}
!11 = distinct !{!11, !4}
!12 = distinct !{!12, !4}
!13 = distinct !{!13, !4}
!14 = distinct !{!14, !4}
!15 = distinct !{!15, !4}
!16 = distinct !{!16, !4}
