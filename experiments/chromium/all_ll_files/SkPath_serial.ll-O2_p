; ModuleID = '../../third_party/skia/src/core/SkPath_serial.cpp'
source_filename = "../../third_party/skia/src/core/SkPath_serial.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%class.SkWBuffer = type { i8*, i8*, i8* }
%class.sk_sp.13 = type { %class.SkData* }
%class.SkData = type { %class.SkNVRefCnt.14, void (i8*, i8*)*, i8*, i8*, i64 }
%class.SkNVRefCnt.14 = type { %"struct.std::__1::atomic" }
%class.SkRBuffer = type <{ i8*, i8*, i8*, i8, [7 x i8] }>

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK6SkPath20writeToMemoryAsRRectEPv(%class.SkPath* nocapture readonly, i8*) local_unnamed_addr #0 align 2 {
  %3 = alloca %class.SkRRect, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.SkRect, align 4
  %7 = alloca %class.SkRRect, align 4
  %8 = alloca %class.SkWBuffer, align 8
  %9 = bitcast %struct.SkRect* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #4
  %10 = bitcast %class.SkRRect* %7 to i8*
  %11 = bitcast %struct.SkRect* %6 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %11, i8 -1, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %10) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %10, i8 0, i64 52, i1 false) #4
  %12 = getelementptr inbounds %class.SkPath, %class.SkPath* %0, i64 0, i32 0, i32 0
  %13 = load %class.SkPathRef*, %class.SkPathRef** %12, align 8
  %14 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %13, i64 0, i32 11
  %15 = load i8, i8* %14, align 2, !range !2
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %45, label %17

17:                                               ; preds = %2
  %18 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %13, i64 0, i32 9
  %19 = load i8, i8* %18, align 8
  %20 = icmp eq i8 %19, 0
  %21 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %13, i64 0, i32 1
  br i1 %20, label %22, label %24

22:                                               ; preds = %17
  %23 = bitcast %struct.SkRect* %21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %9, i8* align 4 %23, i64 16, i1 false) #4
  br label %38

24:                                               ; preds = %17
  %25 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %13, i64 0, i32 3, i32 0
  %26 = load %struct.SkPoint*, %struct.SkPoint** %25, align 8
  %27 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %13, i64 0, i32 3, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = tail call zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect* %21, %struct.SkPoint* %26, i32 %28) #4
  %30 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %13, i64 0, i32 10
  %31 = zext i1 %29 to i8
  store i8 %31, i8* %30, align 1
  store i8 0, i8* %18, align 8
  %32 = load i8, i8* %14, align 1
  %33 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %13, i64 0, i32 1
  %34 = bitcast %struct.SkRect* %33 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %9, i8* align 4 %34, i64 16, i1 false) #4
  %35 = icmp eq i8 %32, 0
  br i1 %35, label %36, label %38

36:                                               ; preds = %24
  %37 = load %class.SkPathRef*, %class.SkPathRef** %12, align 8
  br label %45

38:                                               ; preds = %22, %24
  %39 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %13, i64 0, i32 14
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %13, i64 0, i32 13
  %43 = load i8, i8* %42, align 1, !range !2
  call void @_ZN7SkRRect7setOvalERK6SkRect(%class.SkRRect* nonnull %7, %struct.SkRect* nonnull dereferenceable(16) %6) #4
  %44 = shl nuw nsw i32 %41, 1
  br label %59

45:                                               ; preds = %36, %2
  %46 = phi %class.SkPathRef* [ %37, %36 ], [ %13, %2 ]
  %47 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %46, i64 0, i32 12
  %48 = load i8, i8* %47, align 1, !range !2
  %49 = icmp eq i8 %48, 0
  br i1 %49, label %85, label %50

50:                                               ; preds = %45
  %51 = bitcast %class.SkRRect* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %51) #4
  call void @_ZNK9SkPathRef8getRRectEv(%class.SkRRect* nonnull sret %3, %class.SkPathRef* %46) #4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %10, i8* nonnull align 4 %51, i64 52, i1 false) #4
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %51) #4
  %52 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %46, i64 0, i32 13
  %53 = load i8, i8* %52, align 1, !range !2
  %54 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %46, i64 0, i32 14
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i32
  %57 = load i8, i8* %47, align 1
  %58 = icmp eq i8 %57, 0
  br i1 %58, label %85, label %59

59:                                               ; preds = %50, %38
  %60 = phi i8 [ %43, %38 ], [ %53, %50 ]
  %61 = phi i32 [ %44, %38 ], [ %56, %50 ]
  %62 = icmp eq i8* %1, null
  br i1 %62, label %85, label %63

63:                                               ; preds = %59
  %64 = zext i8 %60 to i32
  %65 = getelementptr inbounds %class.SkPath, %class.SkPath* %0, i64 0, i32 4
  %66 = load i8, i8* %65, align 2
  %67 = and i8 %66, 3
  %68 = zext i8 %67 to i32
  %69 = shl nuw nsw i32 %68, 8
  %70 = shl nuw nsw i32 %64, 26
  %71 = or i32 %70, %69
  %72 = or i32 %71, 268435461
  %73 = bitcast %class.SkWBuffer* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %73) #4
  %74 = getelementptr inbounds %class.SkWBuffer, %class.SkWBuffer* %8, i64 0, i32 0
  %75 = getelementptr inbounds %class.SkWBuffer, %class.SkWBuffer* %8, i64 0, i32 1
  %76 = getelementptr inbounds %class.SkWBuffer, %class.SkWBuffer* %8, i64 0, i32 2
  store i8* %1, i8** %74, align 8
  store i8* %1, i8** %75, align 8
  store i8* null, i8** %76, align 8
  %77 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %77)
  store i32 %72, i32* %4, align 4
  call void @_ZN9SkWBuffer16writeNoSizeCheckEPKvm(%class.SkWBuffer* nonnull %8, i8* nonnull %77, i64 4) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %77)
  call void @_ZN11SkRRectPriv13WriteToBufferERK7SkRRectP9SkWBuffer(%class.SkRRect* nonnull dereferenceable(52) %7, %class.SkWBuffer* nonnull %8) #4
  %78 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %78)
  store i32 %61, i32* %5, align 4
  call void @_ZN9SkWBuffer16writeNoSizeCheckEPKvm(%class.SkWBuffer* nonnull %8, i8* nonnull %78, i64 4) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %78)
  %79 = call i64 @_ZN9SkWBuffer11padToAlign4Ev(%class.SkWBuffer* nonnull %8) #4
  %80 = bitcast i8** %75 to i64*
  %81 = load i64, i64* %80, align 8
  %82 = bitcast %class.SkWBuffer* %8 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = sub i64 %81, %83
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %73) #4
  br label %85

85:                                               ; preds = %50, %45, %63, %59
  %86 = phi i64 [ 0, %50 ], [ %84, %63 ], [ 56, %59 ], [ 0, %45 ]
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %10) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #4
  ret i64 %86
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN7SkRRect7setOvalERK6SkRect(%class.SkRRect*, %struct.SkRect* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN11SkRRectPriv13WriteToBufferERK7SkRRectP9SkWBuffer(%class.SkRRect* dereferenceable(52), %class.SkWBuffer*) local_unnamed_addr #2

declare i64 @_ZN9SkWBuffer11padToAlign4Ev(%class.SkWBuffer*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK6SkPath13writeToMemoryEPv(%class.SkPath* nocapture readonly, i8*) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %class.SkWBuffer, align 8
  %8 = tail call i64 @_ZNK6SkPath20writeToMemoryAsRRectEPv(%class.SkPath* %0, i8* %1)
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %10, label %101

10:                                               ; preds = %2
  %11 = getelementptr inbounds %class.SkPath, %class.SkPath* %0, i64 0, i32 4
  %12 = load i8, i8* %11, align 2
  %13 = and i8 %12, 3
  %14 = zext i8 %13 to i32
  %15 = shl nuw nsw i32 %14, 8
  %16 = or i32 %15, 5
  %17 = getelementptr inbounds %class.SkPath, %class.SkPath* %0, i64 0, i32 0, i32 0
  %18 = load %class.SkPathRef*, %class.SkPathRef** %17, align 8
  %19 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %18, i64 0, i32 3, i32 2
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %18, i64 0, i32 5, i32 2
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %18, i64 0, i32 4, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = sext i32 %20 to i64
  %26 = icmp slt i32 %20, 0
  %27 = shl nsw i64 %25, 3
  br i1 %26, label %28, label %33

28:                                               ; preds = %10
  %29 = and i64 %27, 34359738360
  %30 = lshr i64 %25, 32
  %31 = shl i64 %30, 35
  %32 = or i64 %31, %29
  br label %33

33:                                               ; preds = %10, %28
  %34 = phi i8 [ 0, %28 ], [ 1, %10 ]
  %35 = phi i64 [ %32, %28 ], [ %27, %10 ]
  %36 = add i64 %35, 16
  %37 = sext i32 %22 to i64
  %38 = icmp slt i32 %22, 0
  br i1 %38, label %44, label %39

39:                                               ; preds = %33
  %40 = icmp ugt i64 %36, 15
  %41 = zext i1 %40 to i8
  %42 = and i8 %34, %41
  %43 = shl nsw i64 %37, 2
  br label %50

44:                                               ; preds = %33
  %45 = shl nsw i64 %37, 2
  %46 = and i64 %45, 17179869180
  %47 = lshr i64 %37, 32
  %48 = shl i64 %47, 34
  %49 = or i64 %48, %46
  br label %50

50:                                               ; preds = %39, %44
  %51 = phi i8 [ 0, %44 ], [ %42, %39 ]
  %52 = phi i64 [ %49, %44 ], [ %43, %39 ]
  %53 = add i64 %52, %36
  %54 = icmp uge i64 %53, %36
  %55 = zext i1 %54 to i8
  %56 = and i8 %51, %55
  %57 = sext i32 %24 to i64
  %58 = add i64 %53, %57
  %59 = icmp uge i64 %58, %53
  %60 = zext i1 %59 to i8
  %61 = and i8 %56, %60
  %62 = add i64 %58, 3
  %63 = icmp ult i64 %58, -3
  %64 = zext i1 %63 to i8
  %65 = and i8 %61, %64
  %66 = and i64 %62, -4
  %67 = icmp eq i8 %65, 0
  br i1 %67, label %101, label %68

68:                                               ; preds = %50
  %69 = icmp eq i8* %1, null
  br i1 %69, label %101, label %70

70:                                               ; preds = %68
  %71 = bitcast %class.SkWBuffer* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %71) #4
  %72 = getelementptr inbounds %class.SkWBuffer, %class.SkWBuffer* %7, i64 0, i32 0
  %73 = getelementptr inbounds %class.SkWBuffer, %class.SkWBuffer* %7, i64 0, i32 1
  %74 = getelementptr inbounds %class.SkWBuffer, %class.SkWBuffer* %7, i64 0, i32 2
  store i8* %1, i8** %72, align 8
  store i8* %1, i8** %73, align 8
  store i8* null, i8** %74, align 8
  %75 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %75)
  store i32 %16, i32* %3, align 4
  call void @_ZN9SkWBuffer16writeNoSizeCheckEPKvm(%class.SkWBuffer* nonnull %7, i8* nonnull %75, i64 4) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %75)
  %76 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %76)
  store i32 %20, i32* %4, align 4
  call void @_ZN9SkWBuffer16writeNoSizeCheckEPKvm(%class.SkWBuffer* nonnull %7, i8* nonnull %76, i64 4) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %76)
  %77 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %77)
  store i32 %22, i32* %5, align 4
  call void @_ZN9SkWBuffer16writeNoSizeCheckEPKvm(%class.SkWBuffer* nonnull %7, i8* nonnull %77, i64 4) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %77)
  %78 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %78)
  store i32 %24, i32* %6, align 4
  call void @_ZN9SkWBuffer16writeNoSizeCheckEPKvm(%class.SkWBuffer* nonnull %7, i8* nonnull %78, i64 4) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %78)
  %79 = icmp eq i32 %20, 0
  br i1 %79, label %85, label %80

80:                                               ; preds = %70
  %81 = load %class.SkPathRef*, %class.SkPathRef** %17, align 8
  %82 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %81, i64 0, i32 3, i32 0
  %83 = bitcast %struct.SkPoint** %82 to i8**
  %84 = load i8*, i8** %83, align 8
  call void @_ZN9SkWBuffer16writeNoSizeCheckEPKvm(%class.SkWBuffer* nonnull %7, i8* %84, i64 %27) #4
  br label %85

85:                                               ; preds = %70, %80
  %86 = icmp eq i32 %22, 0
  br i1 %86, label %93, label %87

87:                                               ; preds = %85
  %88 = shl nsw i64 %37, 2
  %89 = load %class.SkPathRef*, %class.SkPathRef** %17, align 8
  %90 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %89, i64 0, i32 5, i32 0
  %91 = bitcast float** %90 to i8**
  %92 = load i8*, i8** %91, align 8
  call void @_ZN9SkWBuffer16writeNoSizeCheckEPKvm(%class.SkWBuffer* nonnull %7, i8* %92, i64 %88) #4
  br label %93

93:                                               ; preds = %85, %87
  %94 = icmp eq i32 %24, 0
  br i1 %94, label %99, label %95

95:                                               ; preds = %93
  %96 = load %class.SkPathRef*, %class.SkPathRef** %17, align 8
  %97 = getelementptr inbounds %class.SkPathRef, %class.SkPathRef* %96, i64 0, i32 4, i32 0
  %98 = load i8*, i8** %97, align 8
  call void @_ZN9SkWBuffer16writeNoSizeCheckEPKvm(%class.SkWBuffer* nonnull %7, i8* %98, i64 %57) #4
  br label %99

99:                                               ; preds = %93, %95
  %100 = call i64 @_ZN9SkWBuffer11padToAlign4Ev(%class.SkWBuffer* nonnull %7) #4
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %71) #4
  br label %101

101:                                              ; preds = %50, %99, %68, %2
  %102 = phi i64 [ %8, %2 ], [ %66, %99 ], [ 0, %50 ], [ %66, %68 ]
  ret i64 %102
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK6SkPath9serializeEv(%class.sk_sp.13* noalias sret, %class.SkPath* nocapture readonly) local_unnamed_addr #0 align 2 {
  %3 = tail call i64 @_ZNK6SkPath13writeToMemoryEPv(%class.SkPath* %1, i8* null)
  %4 = getelementptr inbounds %class.sk_sp.13, %class.sk_sp.13* %0, i64 0, i32 0
  store %class.SkData* inttoptr (i64 -6148914691236517206 to %class.SkData*), %class.SkData** %4, align 8
  tail call void @_ZN6SkData17MakeUninitializedEm(%class.sk_sp.13* sret %0, i64 %3) #4
  %5 = load %class.SkData*, %class.SkData** %4, align 8
  %6 = getelementptr inbounds %class.SkData, %class.SkData* %5, i64 0, i32 3
  %7 = load i8*, i8** %6, align 8
  %8 = tail call i64 @_ZNK6SkPath13writeToMemoryEPv(%class.SkPath* %1, i8* %7)
  ret void
}

declare void @_ZN6SkData17MakeUninitializedEm(%class.sk_sp.13* sret, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN6SkPath14readFromMemoryEPKvm(%class.SkPath*, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkRBuffer, align 8
  %5 = alloca i32, align 4
  %6 = bitcast %class.SkRBuffer* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #4
  %7 = getelementptr inbounds %class.SkRBuffer, %class.SkRBuffer* %4, i64 0, i32 0
  %8 = getelementptr inbounds %class.SkRBuffer, %class.SkRBuffer* %4, i64 0, i32 1
  %9 = getelementptr inbounds %class.SkRBuffer, %class.SkRBuffer* %4, i64 0, i32 2
  %10 = getelementptr inbounds %class.SkRBuffer, %class.SkRBuffer* %4, i64 0, i32 3
  %11 = bitcast %class.SkRBuffer* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 32, i1 false)
  store i8 1, i8* %10, align 8
  store i8* %1, i8** %7, align 8
  store i8* %1, i8** %8, align 8
  %12 = getelementptr inbounds i8, i8* %1, i64 %2
  store i8* %12, i8** %9, align 8
  %13 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #4
  store i32 -1431655766, i32* %5, align 4
  %14 = call zeroext i1 @_ZN9SkRBuffer4readEPvm(%class.SkRBuffer* nonnull %4, i8* nonnull %13, i64 4) #4
  br i1 %14, label %15, label %24

15:                                               ; preds = %3
  %16 = load i32, i32* %5, align 4
  %17 = and i32 %16, 254
  %18 = icmp eq i32 %17, 4
  %19 = or i32 %17, 1
  %20 = icmp eq i32 %19, 5
  %21 = and i1 %18, %20
  br i1 %21, label %22, label %24

22:                                               ; preds = %15
  %23 = call i64 @_ZN6SkPath21readFromMemory_EQ4Or5EPKvm(%class.SkPath* %0, i8* %1, i64 %2)
  br label %24

24:                                               ; preds = %22, %15, %3
  %25 = phi i64 [ 0, %3 ], [ %23, %22 ], [ 0, %15 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #4
  ret i64 %25
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN6SkPath21readFromMemory_EQ4Or5EPKvm(%class.SkPath*, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkRBuffer, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %class.SkPath, align 8
  %10 = bitcast %class.SkRBuffer* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #4
  %11 = getelementptr inbounds %class.SkRBuffer, %class.SkRBuffer* %4, i64 0, i32 0
  %12 = getelementptr inbounds %class.SkRBuffer, %class.SkRBuffer* %4, i64 0, i32 1
  %13 = getelementptr inbounds %class.SkRBuffer, %class.SkRBuffer* %4, i64 0, i32 2
  %14 = getelementptr inbounds %class.SkRBuffer, %class.SkRBuffer* %4, i64 0, i32 3
  %15 = bitcast %class.SkRBuffer* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 32, i1 false)
  store i8 1, i8* %14, align 8
  store i8* %1, i8** %11, align 8
  store i8* %1, i8** %12, align 8
  %16 = getelementptr inbounds i8, i8* %1, i64 %2
  store i8* %16, i8** %13, align 8
  %17 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %17) #4
  store i32 -1431655766, i32* %5, align 4
  %18 = call zeroext i1 @_ZN9SkRBuffer4readEPvm(%class.SkRBuffer* nonnull %4, i8* nonnull %17, i64 4) #4
  br i1 %18, label %19, label %183

19:                                               ; preds = %3
  %20 = load i32, i32* %5, align 4
  %21 = and i32 %20, 255
  %22 = icmp eq i32 %21, 5
  %23 = lshr i32 %20, 28
  switch i32 %23, label %183 [
    i32 1, label %24
    i32 0, label %26
  ]

24:                                               ; preds = %19
  %25 = call i64 @_ZN6SkPath11readAsRRectEPKvm(%class.SkPath* %0, i8* %1, i64 %2)
  br label %183

26:                                               ; preds = %19
  %27 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %27) #4
  store i32 -1431655766, i32* %6, align 4
  %28 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #4
  store i32 -1431655766, i32* %7, align 4
  %29 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %29) #4
  store i32 -1431655766, i32* %8, align 4
  %30 = call zeroext i1 @_ZN9SkRBuffer4readEPvm(%class.SkRBuffer* nonnull %4, i8* nonnull %27, i64 4) #4
  br i1 %30, label %31, label %181

31:                                               ; preds = %26
  %32 = call zeroext i1 @_ZN9SkRBuffer4readEPvm(%class.SkRBuffer* nonnull %4, i8* nonnull %28, i64 4) #4
  br i1 %32, label %33, label %181

33:                                               ; preds = %31
  %34 = call zeroext i1 @_ZN9SkRBuffer4readEPvm(%class.SkRBuffer* nonnull %4, i8* nonnull %29, i64 4) #4
  br i1 %34, label %35, label %181

35:                                               ; preds = %33
  %36 = load i32, i32* %6, align 4
  %37 = sext i32 %36 to i64
  %38 = call i64 @_ZN10SkSafeMath3MulEmm(i64 %37, i64 8) #4
  %39 = call i8* @_ZN9SkRBuffer4skipEm(%class.SkRBuffer* nonnull %4, i64 %38) #4
  %40 = bitcast i8* %39 to %struct.SkPoint*
  %41 = load i32, i32* %7, align 4
  %42 = sext i32 %41 to i64
  %43 = call i64 @_ZN10SkSafeMath3MulEmm(i64 %42, i64 4) #4
  %44 = call i8* @_ZN9SkRBuffer4skipEm(%class.SkRBuffer* nonnull %4, i64 %43) #4
  %45 = bitcast i8* %44 to float*
  %46 = load i32, i32* %8, align 4
  %47 = sext i32 %46 to i64
  %48 = call i64 @_ZN10SkSafeMath3MulEmm(i64 %47, i64 1) #4
  %49 = call i8* @_ZN9SkRBuffer4skipEm(%class.SkRBuffer* nonnull %4, i64 %48) #4
  %50 = call zeroext i1 @_ZN9SkRBuffer12skipToAlign4Ev(%class.SkRBuffer* nonnull %4) #4
  %51 = load i8, i8* %14, align 8, !range !2
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %181, label %53

53:                                               ; preds = %35
  br i1 %22, label %59, label %54

54:                                               ; preds = %53
  %55 = load i32, i32* %8, align 4
  %56 = add nsw i32 %55, -1
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i8, i8* %49, i64 %57
  br label %59

59:                                               ; preds = %53, %54
  %60 = phi i8* [ %58, %54 ], [ %49, %53 ]
  %61 = phi i64 [ -1, %54 ], [ 1, %53 ]
  %62 = bitcast %class.SkPath* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %62) #4
  %63 = getelementptr inbounds %class.SkPath, %class.SkPath* %9, i64 0, i32 4
  %64 = bitcast %class.SkPath* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %64, i8 -86, i64 16, i1 false)
  call void @_ZN6SkPathC1Ev(%class.SkPath* nonnull %9) #4
  %65 = load i32, i32* %5, align 4
  %66 = lshr i32 %65, 8
  %67 = trunc i32 %66 to i8
  %68 = and i8 %67, 3
  %69 = load i8, i8* %63, align 2
  %70 = and i8 %69, -4
  %71 = or i8 %68, %70
  store i8 %71, i8* %63, align 2
  %72 = load i32, i32* %6, align 4
  call void @_ZN6SkPath10incReserveEi(%class.SkPath* nonnull %9, i32 %72) #4
  %73 = load i32, i32* %8, align 4
  %74 = icmp sgt i32 %73, 0
  br i1 %74, label %75, label %167

75:                                               ; preds = %59, %160
  %76 = phi i32 [ %164, %160 ], [ 0, %59 ]
  %77 = phi i8* [ %163, %160 ], [ %60, %59 ]
  %78 = phi float* [ %162, %160 ], [ %45, %59 ]
  %79 = phi %struct.SkPoint* [ %161, %160 ], [ %40, %59 ]
  %80 = load i8, i8* %77, align 1
  switch i8 %80, label %179 [
    i8 0, label %81
    i8 1, label %92
    i8 2, label %103
    i8 3, label %118
    i8 4, label %139
    i8 5, label %158
  ]

81:                                               ; preds = %75
  %82 = load i32, i32* %6, align 4
  %83 = add nsw i32 %82, -1
  store i32 %83, i32* %6, align 4
  %84 = icmp slt i32 %82, 1
  br i1 %84, label %179, label %85

85:                                               ; preds = %81
  %86 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 1
  %87 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 0, i32 0
  %88 = load float, float* %87, align 4
  %89 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 0, i32 1
  %90 = load float, float* %89, align 4
  %91 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath* nonnull %9, float %88, float %90) #4
  br label %160

92:                                               ; preds = %75
  %93 = load i32, i32* %6, align 4
  %94 = add nsw i32 %93, -1
  store i32 %94, i32* %6, align 4
  %95 = icmp slt i32 %93, 1
  br i1 %95, label %179, label %96

96:                                               ; preds = %92
  %97 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 1
  %98 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 0, i32 0
  %99 = load float, float* %98, align 4
  %100 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 0, i32 1
  %101 = load float, float* %100, align 4
  %102 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath6lineToEff(%class.SkPath* nonnull %9, float %99, float %101) #4
  br label %160

103:                                              ; preds = %75
  %104 = load i32, i32* %6, align 4
  %105 = add nsw i32 %104, -2
  store i32 %105, i32* %6, align 4
  %106 = icmp slt i32 %105, 0
  br i1 %106, label %179, label %107

107:                                              ; preds = %103
  %108 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 0, i32 0
  %109 = load float, float* %108, align 4
  %110 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 0, i32 1
  %111 = load float, float* %110, align 4
  %112 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 1, i32 0
  %113 = load float, float* %112, align 4
  %114 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 1, i32 1
  %115 = load float, float* %114, align 4
  %116 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath6quadToEffff(%class.SkPath* nonnull %9, float %109, float %111, float %113, float %115) #4
  %117 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 2
  br label %160

118:                                              ; preds = %75
  %119 = load i32, i32* %6, align 4
  %120 = add nsw i32 %119, -2
  store i32 %120, i32* %6, align 4
  %121 = icmp slt i32 %120, 0
  br i1 %121, label %179, label %122

122:                                              ; preds = %118
  %123 = load i32, i32* %7, align 4
  %124 = add nsw i32 %123, -1
  store i32 %124, i32* %7, align 4
  %125 = icmp slt i32 %123, 1
  br i1 %125, label %179, label %126

126:                                              ; preds = %122
  %127 = getelementptr inbounds float, float* %78, i64 1
  %128 = load float, float* %78, align 4
  %129 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 0, i32 0
  %130 = load float, float* %129, align 4
  %131 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 0, i32 1
  %132 = load float, float* %131, align 4
  %133 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 1, i32 0
  %134 = load float, float* %133, align 4
  %135 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 1, i32 1
  %136 = load float, float* %135, align 4
  %137 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath7conicToEfffff(%class.SkPath* nonnull %9, float %130, float %132, float %134, float %136, float %128) #4
  %138 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 2
  br label %160

139:                                              ; preds = %75
  %140 = load i32, i32* %6, align 4
  %141 = add nsw i32 %140, -3
  store i32 %141, i32* %6, align 4
  %142 = icmp slt i32 %141, 0
  br i1 %142, label %179, label %143

143:                                              ; preds = %139
  %144 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 0, i32 0
  %145 = load float, float* %144, align 4
  %146 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 0, i32 1
  %147 = load float, float* %146, align 4
  %148 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 1, i32 0
  %149 = load float, float* %148, align 4
  %150 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 1, i32 1
  %151 = load float, float* %150, align 4
  %152 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 2, i32 0
  %153 = load float, float* %152, align 4
  %154 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 2, i32 1
  %155 = load float, float* %154, align 4
  %156 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath7cubicToEffffff(%class.SkPath* nonnull %9, float %145, float %147, float %149, float %151, float %153, float %155) #4
  %157 = getelementptr inbounds %struct.SkPoint, %struct.SkPoint* %79, i64 3
  br label %160

158:                                              ; preds = %75
  %159 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath5closeEv(%class.SkPath* nonnull %9) #4
  br label %160

160:                                              ; preds = %158, %143, %126, %107, %96, %85
  %161 = phi %struct.SkPoint* [ %79, %158 ], [ %157, %143 ], [ %138, %126 ], [ %117, %107 ], [ %97, %96 ], [ %86, %85 ]
  %162 = phi float* [ %78, %158 ], [ %78, %143 ], [ %127, %126 ], [ %78, %107 ], [ %78, %96 ], [ %78, %85 ]
  %163 = getelementptr inbounds i8, i8* %77, i64 %61
  %164 = add nuw nsw i32 %76, 1
  %165 = load i32, i32* %8, align 4
  %166 = icmp slt i32 %164, %165
  br i1 %166, label %75, label %167

167:                                              ; preds = %160, %59
  %168 = load i32, i32* %6, align 4
  %169 = load i32, i32* %7, align 4
  %170 = or i32 %169, %168
  %171 = icmp eq i32 %170, 0
  br i1 %171, label %172, label %179

172:                                              ; preds = %167
  %173 = call dereferenceable(16) %class.SkPath* @_ZN6SkPathaSERKS_(%class.SkPath* %0, %class.SkPath* nonnull dereferenceable(16) %9) #4
  %174 = bitcast i8** %12 to i64*
  %175 = load i64, i64* %174, align 8
  %176 = bitcast %class.SkRBuffer* %4 to i64*
  %177 = load i64, i64* %176, align 8
  %178 = sub i64 %175, %177
  br label %179

179:                                              ; preds = %81, %92, %103, %118, %122, %139, %75, %167, %172
  %180 = phi i64 [ %178, %172 ], [ 0, %167 ], [ 0, %75 ], [ 0, %139 ], [ 0, %122 ], [ 0, %118 ], [ 0, %103 ], [ 0, %92 ], [ 0, %81 ]
  call void @_ZN6SkPathD1Ev(%class.SkPath* nonnull %9) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %62) #4
  br label %181

181:                                              ; preds = %35, %179, %26, %31, %33
  %182 = phi i64 [ 0, %33 ], [ 0, %31 ], [ 0, %26 ], [ %180, %179 ], [ 0, %35 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %29) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #4
  br label %183

183:                                              ; preds = %24, %181, %19, %3
  %184 = phi i64 [ 0, %3 ], [ %182, %181 ], [ %25, %24 ], [ 0, %19 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %17) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #4
  ret i64 %184
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN6SkPath11readAsRRectEPKvm(%class.SkPath*, i8*, i64) local_unnamed_addr #0 align 2 {
  %4 = alloca %class.SkRBuffer, align 8
  %5 = alloca i32, align 4
  %6 = alloca %class.SkRRect, align 4
  %7 = alloca i32, align 4
  %8 = bitcast %class.SkRBuffer* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %8) #4
  %9 = getelementptr inbounds %class.SkRBuffer, %class.SkRBuffer* %4, i64 0, i32 0
  %10 = getelementptr inbounds %class.SkRBuffer, %class.SkRBuffer* %4, i64 0, i32 1
  %11 = getelementptr inbounds %class.SkRBuffer, %class.SkRBuffer* %4, i64 0, i32 2
  %12 = getelementptr inbounds %class.SkRBuffer, %class.SkRBuffer* %4, i64 0, i32 3
  %13 = bitcast %class.SkRBuffer* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 32, i1 false)
  store i8 1, i8* %12, align 8
  store i8* %1, i8** %9, align 8
  store i8* %1, i8** %10, align 8
  %14 = getelementptr inbounds i8, i8* %1, i64 %2
  store i8* %14, i8** %11, align 8
  %15 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %15) #4
  store i32 -1431655766, i32* %5, align 4
  %16 = call zeroext i1 @_ZN9SkRBuffer4readEPvm(%class.SkRBuffer* nonnull %4, i8* nonnull %15, i64 4) #4
  br i1 %16, label %17, label %55

17:                                               ; preds = %3
  %18 = load i32, i32* %5, align 4
  %19 = lshr i32 %18, 26
  %20 = and i32 %19, 3
  %21 = lshr i32 %18, 8
  %22 = bitcast %class.SkRRect* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 52, i8* nonnull %22) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %22, i8 0, i64 52, i1 false) #4
  %23 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #4
  store i32 -1431655766, i32* %7, align 4
  switch i32 %20, label %53 [
    i32 0, label %25
    i32 1, label %24
  ]

24:                                               ; preds = %17
  br label %25

25:                                               ; preds = %17, %24
  %26 = phi i32 [ 1, %24 ], [ %20, %17 ]
  %27 = call zeroext i1 @_ZN11SkRRectPriv14ReadFromBufferEP9SkRBufferP7SkRRect(%class.SkRBuffer* nonnull %4, %class.SkRRect* nonnull %6) #4
  br i1 %27, label %28, label %53

28:                                               ; preds = %25
  %29 = call zeroext i1 @_ZN9SkRBuffer4readEPvm(%class.SkRBuffer* nonnull %4, i8* nonnull %23, i64 4) #4
  br i1 %29, label %30, label %53

30:                                               ; preds = %28
  %31 = load i32, i32* %7, align 4
  %32 = icmp slt i32 %31, 7
  %33 = select i1 %32, i32 %31, i32 7
  %34 = icmp sgt i32 %33, 0
  %35 = select i1 %34, i32 %33, i32 0
  %36 = icmp eq i32 %31, %35
  br i1 %36, label %37, label %53

37:                                               ; preds = %30
  %38 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath* %0) #4
  %39 = load i32, i32* %7, align 4
  %40 = call dereferenceable(16) %class.SkPath* @_ZN6SkPath8addRRectERK7SkRRect15SkPathDirectionj(%class.SkPath* %0, %class.SkRRect* nonnull dereferenceable(52) %6, i32 %26, i32 %39) #4
  %41 = trunc i32 %21 to i8
  %42 = and i8 %41, 3
  %43 = getelementptr inbounds %class.SkPath, %class.SkPath* %0, i64 0, i32 4
  %44 = load i8, i8* %43, align 2
  %45 = and i8 %44, -4
  %46 = or i8 %45, %42
  store i8 %46, i8* %43, align 2
  %47 = call zeroext i1 @_ZN9SkRBuffer12skipToAlign4Ev(%class.SkRBuffer* nonnull %4) #4
  %48 = bitcast i8** %10 to i64*
  %49 = load i64, i64* %48, align 8
  %50 = bitcast %class.SkRBuffer* %4 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = sub i64 %49, %51
  br label %53

53:                                               ; preds = %28, %30, %25, %17, %37
  %54 = phi i64 [ %52, %37 ], [ 0, %17 ], [ 0, %25 ], [ 0, %30 ], [ 0, %28 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #4
  call void @llvm.lifetime.end.p0i8(i64 52, i8* nonnull %22) #4
  br label %55

55:                                               ; preds = %3, %53
  %56 = phi i64 [ %54, %53 ], [ 0, %3 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %15) #4
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %8) #4
  ret i64 %56
}

declare zeroext i1 @_ZN11SkRRectPriv14ReadFromBufferEP9SkRBufferP7SkRRect(%class.SkRBuffer*, %class.SkRRect*) local_unnamed_addr #2

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath5resetEv(%class.SkPath*) local_unnamed_addr #2

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath8addRRectERK7SkRRect15SkPathDirectionj(%class.SkPath*, %class.SkRRect* dereferenceable(52), i32, i32) local_unnamed_addr #2

declare zeroext i1 @_ZN9SkRBuffer12skipToAlign4Ev(%class.SkRBuffer*) local_unnamed_addr #2

declare void @_ZN6SkPathC1Ev(%class.SkPath*) unnamed_addr #2

declare void @_ZN6SkPath10incReserveEi(%class.SkPath*, i32) local_unnamed_addr #2

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath5closeEv(%class.SkPath*) local_unnamed_addr #2

declare dereferenceable(16) %class.SkPath* @_ZN6SkPathaSERKS_(%class.SkPath*, %class.SkPath* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN6SkPathD1Ev(%class.SkPath*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare zeroext i1 @_ZN6SkRect14setBoundsCheckEPK7SkPointi(%struct.SkRect*, %struct.SkPoint*, i32) local_unnamed_addr #2

declare void @_ZNK9SkPathRef8getRRectEv(%class.SkRRect* sret, %class.SkPathRef*) local_unnamed_addr #2

declare void @_ZN9SkWBuffer16writeNoSizeCheckEPKvm(%class.SkWBuffer*, i8*, i64) local_unnamed_addr #2

declare zeroext i1 @_ZN9SkRBuffer4readEPvm(%class.SkRBuffer*, i8*, i64) local_unnamed_addr #2

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath6moveToEff(%class.SkPath*, float, float) local_unnamed_addr #2

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath6lineToEff(%class.SkPath*, float, float) local_unnamed_addr #2

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath6quadToEffff(%class.SkPath*, float, float, float, float) local_unnamed_addr #2

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath7conicToEfffff(%class.SkPath*, float, float, float, float, float) local_unnamed_addr #2

declare dereferenceable(16) %class.SkPath* @_ZN6SkPath7cubicToEffffff(%class.SkPath*, float, float, float, float, float, float) local_unnamed_addr #2

declare i8* @_ZN9SkRBuffer4skipEm(%class.SkRBuffer*, i64) local_unnamed_addr #2

declare i64 @_ZN10SkSafeMath3MulEmm(i64, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
