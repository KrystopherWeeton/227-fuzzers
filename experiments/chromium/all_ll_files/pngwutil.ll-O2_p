; ModuleID = '../../third_party/libpng/pngwutil.c'
source_filename = "../../third_party/libpng/pngwutil.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.png_struct_def = type { [1 x %struct.__jmp_buf_tag], void (%struct.__jmp_buf_tag*, i32)*, [1 x %struct.__jmp_buf_tag]*, i64, void (%struct.png_struct_def*, i8*)*, void (%struct.png_struct_def*, i8*)*, i8*, void (%struct.png_struct_def*, i8*, i64)*, void (%struct.png_struct_def*, i8*, i64)*, i8*, void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)*, void (%struct.png_struct_def*, %struct.png_row_info_struct*, i8*)*, i8*, i8, i8, i32, i32, i32, i32, %struct.z_stream_s, %struct.png_compression_buffer*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i8*, i8*, i8*, i8*, i64, i32, i32, %struct.png_color_struct*, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i16, i8, i32, %struct.png_color_16_struct, %struct.png_color_16_struct, {}*, i32, i32, i32, i32, i8*, i16**, i8*, i8*, i16**, i16**, %struct.png_color_8_struct, %struct.png_color_8_struct, i8*, %struct.png_color_16_struct, void (%struct.png_struct_def*, i32, i32)*, void (%struct.png_struct_def*, i32, i32)*, void (%struct.png_struct_def*, %struct.png_info_def*)*, void (%struct.png_struct_def*, i8*, i32, i32)*, void (%struct.png_struct_def*, %struct.png_info_def*)*, i8*, i8*, i8*, i8*, i32, i32, i64, i64, i64, i64, i32, i32, i32, i32, i8*, i32 (%struct.png_struct_def*, %struct.png_unknown_chunk_t*)*, i32, i32, i8*, i8, i8, i16, i16, i8*, i8* (%struct.png_struct_def*, i64)*, void (%struct.png_struct_def*, i8*)*, i8*, i8, i32, i32, i32, i64, %struct.png_unknown_chunk_t, i64, i8*, i64, i32, i8*, [4 x void (%struct.png_row_info_struct*, i8*, i8*)*], %struct.png_colorspace }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.png_row_info_struct = type { i32, i64, i8, i8, i8, i8 }
%struct.z_stream_s = type { i8*, i32, i64, i8*, i32, i64, i8*, %struct.internal_state*, i8* (i8*, i32, i32)*, void (i8*, i8*)*, i8*, i32, i64, i64 }
%struct.internal_state = type opaque
%struct.png_compression_buffer = type { %struct.png_compression_buffer*, [1 x i8] }
%struct.png_color_struct = type { i8, i8, i8 }
%struct.png_color_8_struct = type { i8, i8, i8, i8, i8 }
%struct.png_color_16_struct = type { i8, i16, i16, i16, i16 }
%struct.png_info_def = type { i32, i32, i32, i64, %struct.png_color_struct*, i16, i16, i8, i8, i8, i8, i8, i8, i8, i8, [8 x i8], %struct.png_colorspace, i8*, i8*, i32, i32, i32, %struct.png_text_struct*, %struct.png_color_8_struct, i8*, %struct.png_color_16_struct, %struct.png_color_16_struct, i32, %struct.png_unknown_chunk_t*, i32, i8** }
%struct.png_text_struct = type { i32, i8*, i8*, i64, i64, i8*, i8* }
%struct.png_unknown_chunk_t = type { [5 x i8], i8*, i64, i8 }
%struct.png_colorspace = type { i32, %struct.png_xy, %struct.png_XYZ, i16, i16 }
%struct.png_xy = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.png_XYZ = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.compression_state = type { i8*, i64, i32, [1024 x i8] }

@.str = private unnamed_addr constant [38 x i8] c"Invalid bit depth for grayscale image\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"Invalid bit depth for RGB image\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"Invalid bit depth for paletted image\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"Invalid bit depth for grayscale+alpha image\00", align 1
@.str.4 = private unnamed_addr constant [33 x i8] c"Invalid bit depth for RGBA image\00", align 1
@.str.5 = private unnamed_addr constant [35 x i8] c"Invalid image color type specified\00", align 1
@.str.6 = private unnamed_addr constant [35 x i8] c"Invalid compression type specified\00", align 1
@.str.7 = private unnamed_addr constant [30 x i8] c"Invalid filter type specified\00", align 1
@.str.8 = private unnamed_addr constant [33 x i8] c"Invalid interlace type specified\00", align 1
@.str.9 = private unnamed_addr constant [36 x i8] c"Invalid number of colors in palette\00", align 1
@.str.10 = private unnamed_addr constant [56 x i8] c"Ignoring request to write a PLTE chunk in grayscale PNG\00", align 1
@.str.11 = private unnamed_addr constant [35 x i8] c"Z_OK on Z_FINISH with output space\00", align 1
@.str.12 = private unnamed_addr constant [40 x i8] c"Invalid sRGB rendering intent specified\00", align 1
@.str.13 = private unnamed_addr constant [26 x i8] c"No profile for iCCP chunk\00", align 1
@.str.14 = private unnamed_addr constant [22 x i8] c"ICC profile too short\00", align 1
@.str.15 = private unnamed_addr constant [49 x i8] c"ICC profile length invalid (not a multiple of 4)\00", align 1
@.str.16 = private unnamed_addr constant [38 x i8] c"Profile length does not match profile\00", align 1
@.str.17 = private unnamed_addr constant [22 x i8] c"iCCP: invalid keyword\00", align 1
@.str.18 = private unnamed_addr constant [47 x i8] c"Invalid number of transparent colors specified\00", align 1
@.str.19 = private unnamed_addr constant [64 x i8] c"Ignoring attempt to write tRNS chunk out-of-range for bit_depth\00", align 1
@.str.20 = private unnamed_addr constant [64 x i8] c"Ignoring attempt to write 16-bit tRNS chunk when bit_depth is 8\00", align 1
@.str.21 = private unnamed_addr constant [39 x i8] c"Can't write tRNS with an alpha channel\00", align 1
@.str.22 = private unnamed_addr constant [22 x i8] c"tEXt: invalid keyword\00", align 1
@.str.23 = private unnamed_addr constant [20 x i8] c"tEXt: text too long\00", align 1
@.str.24 = private unnamed_addr constant [31 x i8] c"zTXt: invalid compression type\00", align 1
@.str.25 = private unnamed_addr constant [22 x i8] c"zTXt: invalid keyword\00", align 1
@cr_png_write_finish_row.png_pass_ystart = internal unnamed_addr constant [7 x i8] c"\00\00\04\00\02\00\01", align 1
@cr_png_write_finish_row.png_pass_yinc = internal unnamed_addr constant [7 x i8] c"\08\08\08\04\04\02\02", align 1
@cr_png_do_write_interlace.png_pass_start = internal unnamed_addr constant [7 x i8] c"\00\04\00\02\00\01\00", align 1
@cr_png_do_write_interlace.png_pass_inc = internal unnamed_addr constant [7 x i8] c"\08\08\04\04\02\02\01", align 1
@.str.26 = private unnamed_addr constant [27 x i8] c"length exceeds PNG maximum\00", align 1
@.str.27 = private unnamed_addr constant [15 x i8] c" using zstream\00", align 1
@.str.28 = private unnamed_addr constant [15 x i8] c"in use by IDAT\00", align 1
@.str.29 = private unnamed_addr constant [28 x i8] c"deflateEnd failed (ignored)\00", align 1
@.str.30 = private unnamed_addr constant [7 x i8] c"1.2.11\00", align 1
@.str.31 = private unnamed_addr constant [25 x i8] c"compressed data too long\00", align 1
@.str.32 = private unnamed_addr constant [48 x i8] c"error writing ancillary chunked compressed data\00", align 1

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @cr_png_save_uint_32(i8* nocapture, i32) local_unnamed_addr #0 {
  %3 = lshr i32 %1, 24
  %4 = trunc i32 %3 to i8
  store i8 %4, i8* %0, align 1
  %5 = lshr i32 %1, 16
  %6 = trunc i32 %5 to i8
  %7 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %6, i8* %7, align 1
  %8 = lshr i32 %1, 8
  %9 = trunc i32 %8 to i8
  %10 = getelementptr inbounds i8, i8* %0, i64 2
  store i8 %9, i8* %10, align 1
  %11 = trunc i32 %1 to i8
  %12 = getelementptr inbounds i8, i8* %0, i64 3
  store i8 %11, i8* %12, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @cr_png_save_uint_16(i8* nocapture, i32) local_unnamed_addr #0 {
  %3 = lshr i32 %1, 8
  %4 = trunc i32 %3 to i8
  store i8 %4, i8* %0, align 1
  %5 = trunc i32 %1 to i8
  %6 = getelementptr inbounds i8, i8* %0, i64 1
  store i8 %5, i8* %6, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_write_sig(%struct.png_struct_def* noalias) local_unnamed_addr #1 {
  %2 = alloca i64, align 8
  %3 = bitcast i64* %2 to [8 x i8]*
  %4 = bitcast i64* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #6
  store i64 727905341920923785, i64* %2, align 8
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 66
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i64
  %8 = getelementptr inbounds [8 x i8], [8 x i8]* %3, i64 0, i64 %7
  %9 = sub nsw i64 8, %7
  call void @cr_png_write_data(%struct.png_struct_def* %0, i8* %8, i64 %9) #6
  %10 = load i8, i8* %5, align 1
  %11 = icmp ult i8 %10, 3
  br i1 %11, label %12, label %16

12:                                               ; preds = %1
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  %14 = load i32, i32* %13, align 4
  %15 = or i32 %14, 4096
  store i32 %15, i32* %13, align 4
  br label %16

16:                                               ; preds = %12, %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

declare void @cr_png_write_data(%struct.png_struct_def*, i8*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_write_chunk_start(%struct.png_struct_def* noalias, i8* nocapture readonly, i32) local_unnamed_addr #1 {
  %4 = alloca i64, align 8
  %5 = load i8, i8* %1, align 1
  %6 = getelementptr inbounds i8, i8* %1, i64 1
  %7 = load i8, i8* %6, align 1
  %8 = getelementptr inbounds i8, i8* %1, i64 2
  %9 = load i8, i8* %8, align 1
  %10 = getelementptr inbounds i8, i8* %1, i64 3
  %11 = load i8, i8* %10, align 1
  %12 = bitcast i64* %4 to [8 x i8]*
  %13 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #6, !noalias !2
  %14 = getelementptr inbounds [8 x i8], [8 x i8]* %12, i64 0, i64 4
  %15 = icmp eq %struct.png_struct_def* %0, null
  store i64 -6148914691236517206, i64* %4, align 8, !noalias !2
  br i1 %15, label %41, label %16

16:                                               ; preds = %3
  %17 = zext i8 %9 to i32
  %18 = shl nuw nsw i32 %17, 8
  %19 = zext i8 %7 to i32
  %20 = shl nuw nsw i32 %19, 16
  %21 = zext i8 %5 to i32
  %22 = shl nuw i32 %21, 24
  %23 = or i32 %20, %22
  %24 = or i32 %23, %18
  %25 = zext i8 %11 to i32
  %26 = or i32 %24, %25
  %27 = getelementptr inbounds [8 x i8], [8 x i8]* %12, i64 0, i64 7
  %28 = getelementptr inbounds [8 x i8], [8 x i8]* %12, i64 0, i64 6
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %12, i64 0, i64 5
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %12, i64 0, i64 3
  %31 = getelementptr inbounds [8 x i8], [8 x i8]* %12, i64 0, i64 2
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %12, i64 0, i64 1
  %33 = lshr i32 %2, 24
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %13, align 8, !noalias !2
  %35 = lshr i32 %2, 16
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %32, align 1, !noalias !2
  %37 = lshr i32 %2, 8
  %38 = trunc i32 %37 to i8
  store i8 %38, i8* %31, align 2, !noalias !2
  %39 = trunc i32 %2 to i8
  store i8 %39, i8* %30, align 1, !noalias !2
  store i8 %5, i8* %14, align 4, !noalias !2
  store i8 %7, i8* %29, align 1, !noalias !2
  store i8 %9, i8* %28, align 2, !noalias !2
  store i8 %11, i8* %27, align 1, !noalias !2
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %13, i64 8) #6
  %40 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  store i32 %26, i32* %40, align 8, !alias.scope !2
  call void @cr_png_reset_crc(%struct.png_struct_def* nonnull %0) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* %14, i64 4) #6
  br label %41

41:                                               ; preds = %3, %16
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #6, !noalias !2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_write_chunk_data(%struct.png_struct_def* noalias, i8*, i64) local_unnamed_addr #1 {
  %4 = icmp ne %struct.png_struct_def* %0, null
  %5 = icmp ne i8* %1, null
  %6 = and i1 %4, %5
  %7 = icmp ne i64 %2, 0
  %8 = and i1 %6, %7
  br i1 %8, label %9, label %10

9:                                                ; preds = %3
  tail call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %1, i64 %2) #6
  tail call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %1, i64 %2) #6
  br label %10

10:                                               ; preds = %3, %9
  ret void
}

declare void @cr_png_calculate_crc(%struct.png_struct_def*, i8*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_write_chunk_end(%struct.png_struct_def* noalias) local_unnamed_addr #1 {
  %2 = alloca i32, align 4
  %3 = bitcast i32* %2 to [4 x i8]*
  %4 = bitcast i32* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %4) #6
  %5 = icmp eq %struct.png_struct_def* %0, null
  store i32 -1431655766, i32* %2, align 4
  br i1 %5, label %19, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 3
  %8 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 2
  %9 = getelementptr inbounds [4 x i8], [4 x i8]* %3, i64 0, i64 1
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %11 = load i32, i32* %10, align 4
  %12 = lshr i32 %11, 24
  %13 = trunc i32 %12 to i8
  store i8 %13, i8* %4, align 4
  %14 = lshr i32 %11, 16
  %15 = trunc i32 %14 to i8
  store i8 %15, i8* %9, align 1
  %16 = lshr i32 %11, 8
  %17 = trunc i32 %16 to i8
  store i8 %17, i8* %8, align 2
  %18 = trunc i32 %11 to i8
  store i8 %18, i8* %7, align 1
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %4, i64 4) #6
  br label %19

19:                                               ; preds = %1, %6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %4) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_write_chunk(%struct.png_struct_def* noalias, i8* nocapture readonly, i8*, i64) local_unnamed_addr #1 {
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = load i8, i8* %1, align 1
  %8 = zext i8 %7 to i32
  %9 = shl nuw i32 %8, 24
  %10 = getelementptr inbounds i8, i8* %1, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = zext i8 %11 to i32
  %13 = shl nuw nsw i32 %12, 16
  %14 = or i32 %13, %9
  %15 = getelementptr inbounds i8, i8* %1, i64 2
  %16 = load i8, i8* %15, align 1
  %17 = zext i8 %16 to i32
  %18 = shl nuw nsw i32 %17, 8
  %19 = or i32 %14, %18
  %20 = getelementptr inbounds i8, i8* %1, i64 3
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i32
  %23 = or i32 %19, %22
  %24 = icmp eq %struct.png_struct_def* %0, null
  br i1 %24, label %66, label %25

25:                                               ; preds = %4
  %26 = icmp ugt i64 %3, 2147483647
  br i1 %26, label %27, label %28

27:                                               ; preds = %25
  tail call void @cr_png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.26, i64 0, i64 0)) #7
  unreachable

28:                                               ; preds = %25
  %29 = trunc i64 %3 to i32
  %30 = bitcast i64* %6 to [8 x i8]*
  %31 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #6, !noalias !5
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 4
  %33 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 7
  %34 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 6
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 5
  %36 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 3
  %37 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 2
  %38 = getelementptr inbounds [8 x i8], [8 x i8]* %30, i64 0, i64 1
  %39 = lshr i32 %29, 24
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %31, align 8, !noalias !5
  %41 = lshr i32 %29, 16
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %38, align 1, !noalias !5
  %43 = lshr i32 %29, 8
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %37, align 2, !noalias !5
  %45 = trunc i64 %3 to i8
  store i8 %45, i8* %36, align 1, !noalias !5
  store i8 %7, i8* %32, align 4, !noalias !5
  store i8 %11, i8* %35, align 1, !noalias !5
  store i8 %16, i8* %34, align 2, !noalias !5
  store i8 %21, i8* %33, align 1, !noalias !5
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %31, i64 8) #6
  %46 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  store i32 %23, i32* %46, align 8, !alias.scope !5
  call void @cr_png_reset_crc(%struct.png_struct_def* nonnull %0) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* %32, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #6, !noalias !5
  %47 = icmp ne i8* %2, null
  %48 = icmp ne i64 %3, 0
  %49 = and i1 %47, %48
  br i1 %49, label %50, label %51

50:                                               ; preds = %28
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %2, i64 %3) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %2, i64 %3) #6
  br label %51

51:                                               ; preds = %50, %28
  %52 = bitcast i32* %5 to [4 x i8]*
  %53 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %53) #6, !noalias !8
  %54 = getelementptr inbounds [4 x i8], [4 x i8]* %52, i64 0, i64 3
  %55 = getelementptr inbounds [4 x i8], [4 x i8]* %52, i64 0, i64 2
  %56 = getelementptr inbounds [4 x i8], [4 x i8]* %52, i64 0, i64 1
  %57 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %58 = load i32, i32* %57, align 4, !alias.scope !8
  %59 = lshr i32 %58, 24
  %60 = trunc i32 %59 to i8
  store i8 %60, i8* %53, align 4, !noalias !8
  %61 = lshr i32 %58, 16
  %62 = trunc i32 %61 to i8
  store i8 %62, i8* %56, align 1, !noalias !8
  %63 = lshr i32 %58, 8
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %55, align 2, !noalias !8
  %65 = trunc i32 %58 to i8
  store i8 %65, i8* %54, align 1, !noalias !8
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %53, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %53) #6, !noalias !8
  br label %66

66:                                               ; preds = %4, %51
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_free_buffer_list(%struct.png_struct_def* noalias, %struct.png_compression_buffer** nocapture) local_unnamed_addr #1 {
  %3 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %1, align 8
  %4 = icmp eq %struct.png_compression_buffer* %3, null
  br i1 %4, label %12, label %5

5:                                                ; preds = %2
  store %struct.png_compression_buffer* null, %struct.png_compression_buffer** %1, align 8
  br label %6

6:                                                ; preds = %6, %5
  %7 = phi %struct.png_compression_buffer* [ %3, %5 ], [ %9, %6 ]
  %8 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %7, i64 0, i32 0
  %9 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %8, align 8
  %10 = bitcast %struct.png_compression_buffer* %7 to i8*
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %10) #6
  %11 = icmp eq %struct.png_compression_buffer* %9, null
  br i1 %11, label %12, label %6

12:                                               ; preds = %6, %2
  ret void
}

declare void @cr_png_free(%struct.png_struct_def*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_write_IHDR(%struct.png_struct_def* noalias, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #1 {
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca [13 x i8], align 1
  %12 = getelementptr inbounds [13 x i8], [13 x i8]* %11, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 13, i8* nonnull %12) #6
  %13 = getelementptr inbounds [13 x i8], [13 x i8]* %11, i64 0, i64 1
  %14 = getelementptr inbounds [13 x i8], [13 x i8]* %11, i64 0, i64 2
  %15 = getelementptr inbounds [13 x i8], [13 x i8]* %11, i64 0, i64 3
  %16 = getelementptr inbounds [13 x i8], [13 x i8]* %11, i64 0, i64 4
  %17 = getelementptr inbounds [13 x i8], [13 x i8]* %11, i64 0, i64 5
  %18 = getelementptr inbounds [13 x i8], [13 x i8]* %11, i64 0, i64 6
  %19 = getelementptr inbounds [13 x i8], [13 x i8]* %11, i64 0, i64 7
  %20 = getelementptr inbounds [13 x i8], [13 x i8]* %11, i64 0, i64 8
  %21 = getelementptr inbounds [13 x i8], [13 x i8]* %11, i64 0, i64 9
  %22 = getelementptr inbounds [13 x i8], [13 x i8]* %11, i64 0, i64 10
  %23 = getelementptr inbounds [13 x i8], [13 x i8]* %11, i64 0, i64 11
  %24 = getelementptr inbounds [13 x i8], [13 x i8]* %11, i64 0, i64 12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %12, i8 -86, i64 13, i1 false)
  switch i32 %4, label %37 [
    i32 0, label %25
    i32 2, label %27
    i32 3, label %29
    i32 4, label %33
    i32 6, label %35
  ]

25:                                               ; preds = %8
  switch i32 %3, label %26 [
    i32 1, label %43
    i32 2, label %43
    i32 4, label %43
    i32 8, label %43
    i32 16, label %43
  ]

26:                                               ; preds = %25
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

27:                                               ; preds = %8
  switch i32 %3, label %28 [
    i32 16, label %43
    i32 8, label %43
  ]

28:                                               ; preds = %27
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0)) #7
  unreachable

29:                                               ; preds = %8
  %30 = add i32 %3, -1
  %31 = icmp ult i32 %30, 8
  br i1 %31, label %38, label %32

32:                                               ; preds = %38, %29
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0)) #7
  unreachable

33:                                               ; preds = %8
  switch i32 %3, label %34 [
    i32 16, label %43
    i32 8, label %43
  ]

34:                                               ; preds = %33
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0)) #7
  unreachable

35:                                               ; preds = %8
  switch i32 %3, label %36 [
    i32 16, label %43
    i32 8, label %43
  ]

36:                                               ; preds = %35
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.4, i64 0, i64 0)) #7
  unreachable

37:                                               ; preds = %8
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5, i64 0, i64 0)) #7
  unreachable

38:                                               ; preds = %29
  %39 = trunc i32 %30 to i8
  %40 = lshr i8 -117, %39
  %41 = and i8 %40, 1
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %32, label %43

43:                                               ; preds = %38, %35, %35, %33, %33, %27, %27, %25, %25, %25, %25, %25
  %44 = phi i8 [ 1, %25 ], [ 1, %25 ], [ 1, %25 ], [ 1, %25 ], [ 1, %25 ], [ 3, %27 ], [ 3, %27 ], [ 2, %33 ], [ 2, %33 ], [ 4, %35 ], [ 4, %35 ], [ 1, %38 ]
  %45 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 64
  store i8 %44, i8* %45, align 1
  %46 = icmp eq i32 %5, 0
  br i1 %46, label %48, label %47

47:                                               ; preds = %43
  tail call void @cr_png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i64 0, i64 0)) #6
  br label %48

48:                                               ; preds = %43, %47
  %49 = icmp eq i32 %6, 0
  br i1 %49, label %51, label %50

50:                                               ; preds = %48
  tail call void @cr_png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.7, i64 0, i64 0)) #6
  br label %51

51:                                               ; preds = %48, %50
  %52 = icmp ugt i32 %7, 1
  br i1 %52, label %53, label %54

53:                                               ; preds = %51
  tail call void @cr_png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.8, i64 0, i64 0)) #6
  br label %54

54:                                               ; preds = %53, %51
  %55 = phi i32 [ 1, %53 ], [ %7, %51 ]
  %56 = trunc i32 %3 to i8
  %57 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 61
  store i8 %56, i8* %57, align 2
  %58 = trunc i32 %4 to i8
  %59 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 60
  store i8 %58, i8* %59, align 1
  %60 = trunc i32 %55 to i8
  %61 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 57
  store i8 %60, i8* %61, align 2
  %62 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 122
  store i8 0, i8* %62, align 8
  %63 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 37
  store i32 %1, i32* %63, align 8
  %64 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 38
  store i32 %2, i32* %64, align 4
  %65 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 64
  %66 = load i8, i8* %65, align 1
  %67 = mul i8 %66, %56
  %68 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 63
  store i8 %67, i8* %68, align 4
  %69 = icmp ugt i8 %67, 7
  %70 = zext i32 %1 to i64
  %71 = zext i8 %67 to i64
  br i1 %69, label %72, label %75

72:                                               ; preds = %54
  %73 = lshr i64 %71, 3
  %74 = mul nuw nsw i64 %73, %70
  br label %79

75:                                               ; preds = %54
  %76 = mul nuw nsw i64 %71, %70
  %77 = add nuw nsw i64 %76, 7
  %78 = lshr i64 %77, 3
  br label %79

79:                                               ; preds = %75, %72
  %80 = phi i64 [ %74, %72 ], [ %78, %75 ]
  %81 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 41
  store i64 %80, i64* %81, align 8
  %82 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 40
  store i32 %1, i32* %82, align 4
  %83 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 62
  store i8 %56, i8* %83, align 1
  %84 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 65
  store i8 %66, i8* %84, align 2
  %85 = lshr i32 %1, 24
  %86 = trunc i32 %85 to i8
  store i8 %86, i8* %12, align 1
  %87 = lshr i32 %1, 16
  %88 = trunc i32 %87 to i8
  store i8 %88, i8* %13, align 1
  %89 = lshr i32 %1, 8
  %90 = trunc i32 %89 to i8
  store i8 %90, i8* %14, align 1
  %91 = trunc i32 %1 to i8
  store i8 %91, i8* %15, align 1
  %92 = lshr i32 %2, 24
  %93 = trunc i32 %92 to i8
  store i8 %93, i8* %16, align 1
  %94 = lshr i32 %2, 16
  %95 = trunc i32 %94 to i8
  store i8 %95, i8* %17, align 1
  %96 = lshr i32 %2, 8
  %97 = trunc i32 %96 to i8
  store i8 %97, i8* %18, align 1
  %98 = trunc i32 %2 to i8
  store i8 %98, i8* %19, align 1
  store i8 %56, i8* %20, align 1
  store i8 %58, i8* %21, align 1
  store i8 0, i8* %22, align 1
  store i8 0, i8* %23, align 1
  store i8 %60, i8* %24, align 1
  %99 = icmp eq %struct.png_struct_def* %0, null
  br i1 %99, label %119, label %100

100:                                              ; preds = %79
  %101 = bitcast i64* %9 to [8 x i8]*
  %102 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %102) #6, !noalias !11
  %103 = getelementptr inbounds [8 x i8], [8 x i8]* %101, i64 0, i64 4
  store i64 5927942488114331648, i64* %9, align 8, !noalias !11
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %102, i64 8) #6
  %104 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  store i32 1229472850, i32* %104, align 8, !alias.scope !11
  call void @cr_png_reset_crc(%struct.png_struct_def* nonnull %0) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* %103, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %102) #6, !noalias !11
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %12, i64 13) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %12, i64 13) #6
  %105 = bitcast i32* %10 to [4 x i8]*
  %106 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %106) #6, !noalias !14
  %107 = getelementptr inbounds [4 x i8], [4 x i8]* %105, i64 0, i64 3
  %108 = getelementptr inbounds [4 x i8], [4 x i8]* %105, i64 0, i64 2
  %109 = getelementptr inbounds [4 x i8], [4 x i8]* %105, i64 0, i64 1
  %110 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %111 = load i32, i32* %110, align 4, !alias.scope !14
  %112 = lshr i32 %111, 24
  %113 = trunc i32 %112 to i8
  store i8 %113, i8* %106, align 4, !noalias !14
  %114 = lshr i32 %111, 16
  %115 = trunc i32 %114 to i8
  store i8 %115, i8* %109, align 1, !noalias !14
  %116 = lshr i32 %111, 8
  %117 = trunc i32 %116 to i8
  store i8 %117, i8* %108, align 2, !noalias !14
  %118 = trunc i32 %111 to i8
  store i8 %118, i8* %107, align 1, !noalias !14
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %106, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %106) #6, !noalias !14
  br label %119

119:                                              ; preds = %79, %100
  %120 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 59
  %121 = load i8, i8* %120, align 8
  %122 = icmp eq i8 %121, 0
  br i1 %122, label %123, label %132

123:                                              ; preds = %119
  %124 = load i8, i8* %59, align 1
  %125 = icmp eq i8 %124, 3
  br i1 %125, label %130, label %126

126:                                              ; preds = %123
  %127 = load i8, i8* %57, align 2
  %128 = icmp ult i8 %127, 8
  %129 = select i1 %128, i8 8, i8 -8
  br label %130

130:                                              ; preds = %126, %123
  %131 = phi i8 [ 8, %123 ], [ %129, %126 ]
  store i8 %131, i8* %120, align 8
  br label %132

132:                                              ; preds = %130, %119
  %133 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  store i32 1, i32* %133, align 4
  call void @llvm.lifetime.end.p0i8(i64 13, i8* nonnull %12) #6
  ret void
}

; Function Attrs: noreturn
declare void @cr_png_error(%struct.png_struct_def*, i8*) local_unnamed_addr #4

declare void @cr_png_warning(%struct.png_struct_def*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_write_PLTE(%struct.png_struct_def* noalias, %struct.png_color_struct* nocapture readonly, i32) local_unnamed_addr #1 {
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca [3 x i8], align 1
  %7 = getelementptr inbounds [3 x i8], [3 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 3, i8* nonnull %7) #6
  store i8 -86, i8* %7, align 1
  %8 = getelementptr inbounds [3 x i8], [3 x i8]* %6, i64 0, i64 1
  store i8 -86, i8* %8, align 1
  %9 = getelementptr inbounds [3 x i8], [3 x i8]* %6, i64 0, i64 2
  store i8 -86, i8* %9, align 1
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 60
  %11 = load i8, i8* %10, align 1
  %12 = icmp eq i8 %11, 3
  br i1 %12, label %13, label %18

13:                                               ; preds = %3
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 61
  %15 = load i8, i8* %14, align 2
  %16 = zext i8 %15 to i32
  %17 = shl i32 1, %16
  br label %18

18:                                               ; preds = %3, %13
  %19 = phi i32 [ %17, %13 ], [ 256, %3 ]
  %20 = add i32 %2, -1
  %21 = icmp ult i32 %20, %19
  br i1 %21, label %25, label %22

22:                                               ; preds = %18
  br i1 %12, label %23, label %24

23:                                               ; preds = %22
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.9, i64 0, i64 0)) #7
  unreachable

24:                                               ; preds = %22
  tail call void @cr_png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.9, i64 0, i64 0)) #6
  br label %87

25:                                               ; preds = %18
  %26 = and i8 %11, 2
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %28, label %29

28:                                               ; preds = %25
  tail call void @cr_png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.10, i64 0, i64 0)) #6
  br label %87

29:                                               ; preds = %25
  %30 = trunc i32 %2 to i16
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 53
  store i16 %30, i16* %31, align 8
  %32 = mul i32 %2, 3
  %33 = bitcast i64* %5 to [8 x i8]*
  %34 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #6, !noalias !17
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %33, i64 0, i64 4
  %36 = icmp eq %struct.png_struct_def* %0, null
  store i64 -6148914691236517206, i64* %5, align 8, !noalias !17
  br i1 %36, label %52, label %37

37:                                               ; preds = %29
  %38 = getelementptr inbounds [8 x i8], [8 x i8]* %33, i64 0, i64 7
  %39 = getelementptr inbounds [8 x i8], [8 x i8]* %33, i64 0, i64 6
  %40 = getelementptr inbounds [8 x i8], [8 x i8]* %33, i64 0, i64 5
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %33, i64 0, i64 3
  %42 = getelementptr inbounds [8 x i8], [8 x i8]* %33, i64 0, i64 2
  %43 = getelementptr inbounds [8 x i8], [8 x i8]* %33, i64 0, i64 1
  %44 = lshr i32 %32, 24
  %45 = trunc i32 %44 to i8
  store i8 %45, i8* %34, align 8, !noalias !17
  %46 = lshr i32 %32, 16
  %47 = trunc i32 %46 to i8
  store i8 %47, i8* %43, align 1, !noalias !17
  %48 = lshr i32 %32, 8
  %49 = trunc i32 %48 to i8
  store i8 %49, i8* %42, align 2, !noalias !17
  %50 = trunc i32 %32 to i8
  store i8 %50, i8* %41, align 1, !noalias !17
  store i8 80, i8* %35, align 4, !noalias !17
  store i8 76, i8* %40, align 1, !noalias !17
  store i8 84, i8* %39, align 2, !noalias !17
  store i8 69, i8* %38, align 1, !noalias !17
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %34, i64 8) #6
  %51 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  store i32 1347179589, i32* %51, align 8, !alias.scope !17
  call void @cr_png_reset_crc(%struct.png_struct_def* nonnull %0) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* %35, i64 4) #6
  br label %52

52:                                               ; preds = %37, %29
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #6, !noalias !17
  br label %53

53:                                               ; preds = %63, %52
  %54 = phi %struct.png_color_struct* [ %1, %52 ], [ %65, %63 ]
  %55 = phi i32 [ 0, %52 ], [ %64, %63 ]
  %56 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %54, i64 0, i32 0
  %57 = load i8, i8* %56, align 1
  store i8 %57, i8* %7, align 1
  %58 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %54, i64 0, i32 1
  %59 = load i8, i8* %58, align 1
  store i8 %59, i8* %8, align 1
  %60 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %54, i64 0, i32 2
  %61 = load i8, i8* %60, align 1
  store i8 %61, i8* %9, align 1
  br i1 %36, label %63, label %62

62:                                               ; preds = %53
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %7, i64 3) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %7, i64 3) #6
  br label %63

63:                                               ; preds = %53, %62
  %64 = add nuw i32 %55, 1
  %65 = getelementptr inbounds %struct.png_color_struct, %struct.png_color_struct* %54, i64 1
  %66 = icmp eq i32 %64, %2
  br i1 %66, label %67, label %53

67:                                               ; preds = %63
  %68 = bitcast i32* %4 to [4 x i8]*
  %69 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %69) #6, !noalias !20
  store i32 -1431655766, i32* %4, align 4, !noalias !20
  br i1 %36, label %83, label %70

70:                                               ; preds = %67
  %71 = getelementptr inbounds [4 x i8], [4 x i8]* %68, i64 0, i64 3
  %72 = getelementptr inbounds [4 x i8], [4 x i8]* %68, i64 0, i64 2
  %73 = getelementptr inbounds [4 x i8], [4 x i8]* %68, i64 0, i64 1
  %74 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %75 = load i32, i32* %74, align 4, !alias.scope !20
  %76 = lshr i32 %75, 24
  %77 = trunc i32 %76 to i8
  store i8 %77, i8* %69, align 4, !noalias !20
  %78 = lshr i32 %75, 16
  %79 = trunc i32 %78 to i8
  store i8 %79, i8* %73, align 1, !noalias !20
  %80 = lshr i32 %75, 8
  %81 = trunc i32 %80 to i8
  store i8 %81, i8* %72, align 2, !noalias !20
  %82 = trunc i32 %75 to i8
  store i8 %82, i8* %71, align 1, !noalias !20
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %69, i64 4) #6
  br label %83

83:                                               ; preds = %67, %70
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %69) #6, !noalias !20
  %84 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  %85 = load i32, i32* %84, align 4
  %86 = or i32 %85, 2
  store i32 %86, i32* %84, align 4
  br label %87

87:                                               ; preds = %83, %28, %24
  call void @llvm.lifetime.end.p0i8(i64 3, i8* nonnull %7) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_compress_IDAT(%struct.png_struct_def* noalias, i8*, i64, i32) local_unnamed_addr #1 {
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 18
  %10 = load i32, i32* %9, align 8
  %11 = icmp eq i32 %10, 1229209940
  br i1 %11, label %211, label %12

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 20
  %14 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %13, align 8
  %15 = icmp eq %struct.png_compression_buffer* %14, null
  br i1 %15, label %16, label %24

16:                                               ; preds = %12
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 21
  %18 = load i32, i32* %17, align 8
  %19 = zext i32 %18 to i64
  %20 = add nuw nsw i64 %19, 8
  %21 = tail call noalias i8* @cr_png_malloc(%struct.png_struct_def* %0, i64 %20) #6
  %22 = bitcast %struct.png_compression_buffer** %13 to i8**
  store i8* %21, i8** %22, align 8
  %23 = bitcast i8* %21 to %struct.png_compression_buffer**
  store %struct.png_compression_buffer* null, %struct.png_compression_buffer** %23, align 8
  br label %35

24:                                               ; preds = %12
  %25 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %14, i64 0, i32 0
  %26 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %25, align 8, !noalias !23
  %27 = icmp eq %struct.png_compression_buffer* %26, null
  br i1 %27, label %35, label %28

28:                                               ; preds = %24
  store %struct.png_compression_buffer* null, %struct.png_compression_buffer** %25, align 8, !noalias !23
  br label %29

29:                                               ; preds = %29, %28
  %30 = phi %struct.png_compression_buffer* [ %26, %28 ], [ %32, %29 ]
  %31 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %30, i64 0, i32 0
  %32 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %31, align 8
  %33 = bitcast %struct.png_compression_buffer* %30 to i8*
  tail call void @cr_png_free(%struct.png_struct_def* %0, i8* %33) #6
  %34 = icmp eq %struct.png_compression_buffer* %32, null
  br i1 %34, label %35, label %29

35:                                               ; preds = %29, %24, %16
  %36 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 38
  %37 = load i32, i32* %36, align 4, !alias.scope !26
  %38 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 41
  %39 = load i64, i64* %38, align 8, !alias.scope !26
  %40 = icmp ult i64 %39, 32768
  %41 = icmp ult i32 %37, 32768
  %42 = and i1 %41, %40
  br i1 %42, label %43, label %197

43:                                               ; preds = %35
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 57
  %45 = load i8, i8* %44, align 2, !alias.scope !26
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %78, label %47

47:                                               ; preds = %43
  %48 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 37
  %49 = load i32, i32* %48, align 8, !alias.scope !26
  %50 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 63
  %51 = load i8, i8* %50, align 4, !alias.scope !26
  %52 = icmp ugt i8 %51, 7
  %53 = zext i8 %51 to i64
  %54 = lshr i64 %53, 3
  %55 = add i32 %49, 7
  %56 = lshr i32 %55, 3
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %73, label %58

58:                                               ; preds = %47
  %59 = zext i32 %56 to i64
  br i1 %52, label %60, label %62

60:                                               ; preds = %58
  %61 = mul nuw nsw i64 %54, %59
  br label %66

62:                                               ; preds = %58
  %63 = mul nuw nsw i64 %59, %53
  %64 = add nuw nsw i64 %63, 7
  %65 = lshr i64 %64, 3
  br label %66

66:                                               ; preds = %62, %60
  %67 = phi i64 [ %61, %60 ], [ %65, %62 ]
  %68 = add nuw nsw i64 %67, 1
  %69 = add nuw nsw i32 %37, 7
  %70 = lshr i32 %69, 3
  %71 = zext i32 %70 to i64
  %72 = mul i64 %68, %71
  br label %73

73:                                               ; preds = %66, %47
  %74 = phi i64 [ %72, %66 ], [ 0, %47 ]
  %75 = add i32 %49, 3
  %76 = lshr i32 %75, 3
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %98, label %82

78:                                               ; preds = %43
  %79 = add nuw nsw i64 %39, 1
  %80 = zext i32 %37 to i64
  %81 = mul i64 %79, %80
  br label %197

82:                                               ; preds = %73
  %83 = zext i32 %76 to i64
  br i1 %52, label %88, label %84

84:                                               ; preds = %82
  %85 = mul nuw nsw i64 %83, %53
  %86 = add nuw nsw i64 %85, 7
  %87 = lshr i64 %86, 3
  br label %90

88:                                               ; preds = %82
  %89 = mul nuw nsw i64 %54, %83
  br label %90

90:                                               ; preds = %88, %84
  %91 = phi i64 [ %89, %88 ], [ %87, %84 ]
  %92 = add nuw nsw i64 %91, 1
  %93 = add nuw nsw i32 %37, 7
  %94 = lshr i32 %93, 3
  %95 = zext i32 %94 to i64
  %96 = mul i64 %92, %95
  %97 = add nuw nsw i64 %96, %74
  br label %98

98:                                               ; preds = %90, %73
  %99 = phi i64 [ %97, %90 ], [ %74, %73 ]
  %100 = lshr i32 %75, 2
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %118, label %102

102:                                              ; preds = %98
  %103 = zext i32 %100 to i64
  br i1 %52, label %108, label %104

104:                                              ; preds = %102
  %105 = mul nuw nsw i64 %103, %53
  %106 = add nuw nsw i64 %105, 7
  %107 = lshr i64 %106, 3
  br label %110

108:                                              ; preds = %102
  %109 = mul nuw nsw i64 %54, %103
  br label %110

110:                                              ; preds = %108, %104
  %111 = phi i64 [ %109, %108 ], [ %107, %104 ]
  %112 = add nuw nsw i64 %111, 1
  %113 = add nuw nsw i32 %37, 3
  %114 = lshr i32 %113, 3
  %115 = zext i32 %114 to i64
  %116 = mul i64 %112, %115
  %117 = add nuw nsw i64 %116, %99
  br label %118

118:                                              ; preds = %110, %98
  %119 = phi i64 [ %117, %110 ], [ %99, %98 ]
  %120 = add i32 %49, 1
  %121 = lshr i32 %120, 2
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %139, label %123

123:                                              ; preds = %118
  %124 = zext i32 %121 to i64
  br i1 %52, label %129, label %125

125:                                              ; preds = %123
  %126 = mul nuw nsw i64 %124, %53
  %127 = add nuw nsw i64 %126, 7
  %128 = lshr i64 %127, 3
  br label %131

129:                                              ; preds = %123
  %130 = mul nuw nsw i64 %54, %124
  br label %131

131:                                              ; preds = %129, %125
  %132 = phi i64 [ %130, %129 ], [ %128, %125 ]
  %133 = add nuw nsw i64 %132, 1
  %134 = add nuw nsw i32 %37, 3
  %135 = lshr i32 %134, 2
  %136 = zext i32 %135 to i64
  %137 = mul i64 %133, %136
  %138 = add nuw nsw i64 %137, %119
  br label %139

139:                                              ; preds = %131, %118
  %140 = phi i64 [ %138, %131 ], [ %119, %118 ]
  %141 = lshr i32 %120, 1
  %142 = icmp eq i32 %141, 0
  br i1 %142, label %159, label %143

143:                                              ; preds = %139
  %144 = zext i32 %141 to i64
  br i1 %52, label %149, label %145

145:                                              ; preds = %143
  %146 = mul nuw nsw i64 %144, %53
  %147 = add nuw nsw i64 %146, 7
  %148 = lshr i64 %147, 3
  br label %151

149:                                              ; preds = %143
  %150 = mul nuw nsw i64 %54, %144
  br label %151

151:                                              ; preds = %149, %145
  %152 = phi i64 [ %150, %149 ], [ %148, %145 ]
  %153 = add nuw nsw i64 %152, 1
  %154 = add nuw nsw i32 %37, 1
  %155 = lshr i32 %154, 2
  %156 = zext i32 %155 to i64
  %157 = mul i64 %153, %156
  %158 = add nuw nsw i64 %157, %140
  br label %159

159:                                              ; preds = %151, %139
  %160 = phi i64 [ %158, %151 ], [ %140, %139 ]
  %161 = lshr i32 %49, 1
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %179, label %163

163:                                              ; preds = %159
  %164 = zext i32 %161 to i64
  br i1 %52, label %169, label %165

165:                                              ; preds = %163
  %166 = mul nuw nsw i64 %164, %53
  %167 = add nuw nsw i64 %166, 7
  %168 = lshr i64 %167, 3
  br label %171

169:                                              ; preds = %163
  %170 = mul nuw nsw i64 %54, %164
  br label %171

171:                                              ; preds = %169, %165
  %172 = phi i64 [ %170, %169 ], [ %168, %165 ]
  %173 = add nuw nsw i64 %172, 1
  %174 = add nuw nsw i32 %37, 1
  %175 = lshr i32 %174, 1
  %176 = zext i32 %175 to i64
  %177 = mul i64 %173, %176
  %178 = add nuw nsw i64 %177, %160
  br label %179

179:                                              ; preds = %171, %159
  %180 = phi i64 [ %178, %171 ], [ %160, %159 ]
  %181 = icmp eq i32 %49, 0
  br i1 %181, label %197, label %182

182:                                              ; preds = %179
  %183 = zext i32 %49 to i64
  br i1 %52, label %188, label %184

184:                                              ; preds = %182
  %185 = mul nuw nsw i64 %53, %183
  %186 = add nuw nsw i64 %185, 7
  %187 = lshr i64 %186, 3
  br label %190

188:                                              ; preds = %182
  %189 = mul nuw nsw i64 %54, %183
  br label %190

190:                                              ; preds = %188, %184
  %191 = phi i64 [ %189, %188 ], [ %187, %184 ]
  %192 = add nuw nsw i64 %191, 1
  %193 = lshr i32 %37, 1
  %194 = zext i32 %193 to i64
  %195 = mul i64 %192, %194
  %196 = add nuw nsw i64 %195, %180
  br label %197

197:                                              ; preds = %35, %78, %179, %190
  %198 = phi i64 [ %81, %78 ], [ 4294967295, %35 ], [ %196, %190 ], [ %180, %179 ]
  %199 = tail call fastcc i32 @png_deflate_claim(%struct.png_struct_def* %0, i32 1229209940, i64 %198)
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %204, label %201

201:                                              ; preds = %197
  %202 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 6
  %203 = load i8*, i8** %202, align 8
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* %203) #7
  unreachable

204:                                              ; preds = %197
  %205 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %13, align 8
  %206 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %205, i64 0, i32 1, i64 0
  %207 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 3
  store i8* %206, i8** %207, align 8
  %208 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 21
  %209 = load i32, i32* %208, align 8
  %210 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 4
  store i32 %209, i32* %210, align 8
  br label %211

211:                                              ; preds = %4, %204
  %212 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19
  %213 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %212, i64 0, i32 0
  store i8* %1, i8** %213, align 8
  %214 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 1
  store i32 0, i32* %214, align 8
  %215 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 4
  %216 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 20
  %217 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 21
  %218 = icmp eq %struct.png_struct_def* %0, null
  %219 = bitcast i64* %6 to [8 x i8]*
  %220 = bitcast i64* %6 to i8*
  %221 = getelementptr inbounds [8 x i8], [8 x i8]* %219, i64 0, i64 4
  %222 = getelementptr inbounds [8 x i8], [8 x i8]* %219, i64 0, i64 3
  %223 = getelementptr inbounds [8 x i8], [8 x i8]* %219, i64 0, i64 2
  %224 = getelementptr inbounds [8 x i8], [8 x i8]* %219, i64 0, i64 1
  %225 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  %226 = bitcast i32* %5 to [4 x i8]*
  %227 = bitcast i32* %5 to i8*
  %228 = getelementptr inbounds [4 x i8], [4 x i8]* %226, i64 0, i64 3
  %229 = getelementptr inbounds [4 x i8], [4 x i8]* %226, i64 0, i64 2
  %230 = getelementptr inbounds [4 x i8], [4 x i8]* %226, i64 0, i64 1
  %231 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %232 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  %233 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 3
  %234 = icmp eq i32 %3, 0
  br label %235

235:                                              ; preds = %288, %211
  %236 = phi i64 [ %2, %211 ], [ %246, %288 ]
  %237 = icmp ult i64 %236, 4294967295
  %238 = select i1 %237, i64 %236, i64 4294967295
  %239 = trunc i64 %238 to i32
  store i32 %239, i32* %214, align 8
  %240 = sub i64 %236, %238
  %241 = icmp eq i64 %240, 0
  %242 = select i1 %241, i32 %3, i32 0
  %243 = call i32 @Cr_z_deflate(%struct.z_stream_s* %212, i32 %242) #6
  %244 = load i32, i32* %214, align 8
  %245 = zext i32 %244 to i64
  %246 = add i64 %240, %245
  store i32 0, i32* %214, align 8
  %247 = load i32, i32* %215, align 8
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %249, label %283

249:                                              ; preds = %235
  %250 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %216, align 8
  %251 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %250, i64 0, i32 1, i64 0
  %252 = load i32, i32* %217, align 8
  %253 = icmp eq i32 %252, 0
  br i1 %253, label %278, label %254

254:                                              ; preds = %249
  %255 = zext i32 %252 to i64
  br i1 %218, label %278, label %256

256:                                              ; preds = %254
  %257 = icmp slt i32 %252, 0
  br i1 %257, label %258, label %259

258:                                              ; preds = %256
  call void @cr_png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.26, i64 0, i64 0)) #7
  unreachable

259:                                              ; preds = %256
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %220) #6, !noalias !29
  store i64 6071208855858752170, i64* %6, align 8, !noalias !29
  %260 = lshr i32 %252, 24
  %261 = trunc i32 %260 to i8
  store i8 %261, i8* %220, align 8, !noalias !29
  %262 = lshr i32 %252, 16
  %263 = trunc i32 %262 to i8
  store i8 %263, i8* %224, align 1, !noalias !29
  %264 = lshr i32 %252, 8
  %265 = trunc i32 %264 to i8
  store i8 %265, i8* %223, align 2, !noalias !29
  %266 = trunc i32 %252 to i8
  store i8 %266, i8* %222, align 1, !noalias !29
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %220, i64 8) #6
  store i32 1229209940, i32* %225, align 8, !alias.scope !29
  call void @cr_png_reset_crc(%struct.png_struct_def* nonnull %0) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* %221, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %220) #6, !noalias !29
  %267 = icmp eq i8* %251, null
  br i1 %267, label %269, label %268

268:                                              ; preds = %259
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %251, i64 %255) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %251, i64 %255) #6
  br label %269

269:                                              ; preds = %259, %268
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %227) #6, !noalias !32
  %270 = load i32, i32* %231, align 4, !alias.scope !32
  %271 = lshr i32 %270, 24
  %272 = trunc i32 %271 to i8
  store i8 %272, i8* %227, align 4, !noalias !32
  %273 = lshr i32 %270, 16
  %274 = trunc i32 %273 to i8
  store i8 %274, i8* %230, align 1, !noalias !32
  %275 = lshr i32 %270, 8
  %276 = trunc i32 %275 to i8
  store i8 %276, i8* %229, align 2, !noalias !32
  %277 = trunc i32 %270 to i8
  store i8 %277, i8* %228, align 1, !noalias !32
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %227, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %227) #6, !noalias !32
  br label %278

278:                                              ; preds = %269, %254, %249
  %279 = load i32, i32* %232, align 4
  %280 = or i32 %279, 4
  store i32 %280, i32* %232, align 4
  store i8* %251, i8** %233, align 8
  store i32 %252, i32* %215, align 8
  %281 = icmp ne i32 %243, 0
  %282 = or i1 %234, %281
  br i1 %282, label %283, label %288

283:                                              ; preds = %278, %235
  %284 = phi i32 [ %252, %278 ], [ %247, %235 ]
  %285 = icmp eq i32 %243, 0
  br i1 %285, label %286, label %292

286:                                              ; preds = %283
  %287 = icmp eq i64 %246, 0
  br i1 %287, label %289, label %288

288:                                              ; preds = %286, %278
  br label %235

289:                                              ; preds = %286
  %290 = icmp eq i32 %3, 4
  br i1 %290, label %291, label %343

291:                                              ; preds = %289
  call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.11, i64 0, i64 0)) #7
  unreachable

292:                                              ; preds = %283
  %293 = icmp eq i32 %243, 1
  %294 = icmp eq i32 %3, 4
  %295 = and i1 %294, %293
  br i1 %295, label %296, label %340

296:                                              ; preds = %292
  %297 = load i32, i32* %217, align 8
  %298 = sub i32 %297, %284
  %299 = icmp eq i32 %298, 0
  br i1 %299, label %337, label %300

300:                                              ; preds = %296
  %301 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %216, align 8
  %302 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %301, i64 0, i32 1, i64 0
  %303 = zext i32 %298 to i64
  br i1 %218, label %337, label %304

304:                                              ; preds = %300
  %305 = icmp slt i32 %298, 0
  br i1 %305, label %306, label %307

306:                                              ; preds = %304
  call void @cr_png_error(%struct.png_struct_def* nonnull %0, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.26, i64 0, i64 0)) #7
  unreachable

307:                                              ; preds = %304
  %308 = bitcast i64* %8 to [8 x i8]*
  %309 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %309) #6, !noalias !35
  %310 = getelementptr inbounds [8 x i8], [8 x i8]* %308, i64 0, i64 4
  store i64 6071208855858752170, i64* %8, align 8, !noalias !35
  %311 = getelementptr inbounds [8 x i8], [8 x i8]* %308, i64 0, i64 3
  %312 = getelementptr inbounds [8 x i8], [8 x i8]* %308, i64 0, i64 2
  %313 = getelementptr inbounds [8 x i8], [8 x i8]* %308, i64 0, i64 1
  %314 = lshr i32 %298, 24
  %315 = trunc i32 %314 to i8
  store i8 %315, i8* %309, align 8, !noalias !35
  %316 = lshr i32 %298, 16
  %317 = trunc i32 %316 to i8
  store i8 %317, i8* %313, align 1, !noalias !35
  %318 = lshr i32 %298, 8
  %319 = trunc i32 %318 to i8
  store i8 %319, i8* %312, align 2, !noalias !35
  %320 = trunc i32 %298 to i8
  store i8 %320, i8* %311, align 1, !noalias !35
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %309, i64 8) #6
  store i32 1229209940, i32* %225, align 8, !alias.scope !35
  call void @cr_png_reset_crc(%struct.png_struct_def* nonnull %0) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* %310, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %309) #6, !noalias !35
  %321 = icmp eq i8* %302, null
  br i1 %321, label %323, label %322

322:                                              ; preds = %307
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %302, i64 %303) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %302, i64 %303) #6
  br label %323

323:                                              ; preds = %307, %322
  %324 = bitcast i32* %7 to [4 x i8]*
  %325 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %325) #6, !noalias !38
  %326 = getelementptr inbounds [4 x i8], [4 x i8]* %324, i64 0, i64 3
  %327 = getelementptr inbounds [4 x i8], [4 x i8]* %324, i64 0, i64 2
  %328 = getelementptr inbounds [4 x i8], [4 x i8]* %324, i64 0, i64 1
  %329 = load i32, i32* %231, align 4, !alias.scope !38
  %330 = lshr i32 %329, 24
  %331 = trunc i32 %330 to i8
  store i8 %331, i8* %325, align 4, !noalias !38
  %332 = lshr i32 %329, 16
  %333 = trunc i32 %332 to i8
  store i8 %333, i8* %328, align 1, !noalias !38
  %334 = lshr i32 %329, 8
  %335 = trunc i32 %334 to i8
  store i8 %335, i8* %327, align 2, !noalias !38
  %336 = trunc i32 %329 to i8
  store i8 %336, i8* %326, align 1, !noalias !38
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %325, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %325) #6, !noalias !38
  br label %337

337:                                              ; preds = %323, %300, %296
  store i32 0, i32* %215, align 8
  store i8* null, i8** %233, align 8
  %338 = load i32, i32* %232, align 4
  %339 = or i32 %338, 12
  store i32 %339, i32* %232, align 4
  store i32 0, i32* %9, align 8
  br label %343

340:                                              ; preds = %292
  call void @cr_png_zstream_error(%struct.png_struct_def* %0, i32 %243) #6
  %341 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 6
  %342 = load i8*, i8** %341, align 8
  call void @cr_png_error(%struct.png_struct_def* %0, i8* %342) #7
  unreachable

343:                                              ; preds = %337, %289
  ret void
}

declare noalias i8* @cr_png_malloc(%struct.png_struct_def*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @png_deflate_claim(%struct.png_struct_def* noalias, i32, i64) unnamed_addr #1 {
  %4 = alloca [64 x i8], align 16
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 18
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %39, label %8

8:                                                ; preds = %3
  %9 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %9) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 64, i1 false)
  %10 = lshr i32 %1, 24
  %11 = trunc i32 %10 to i8
  store i8 %11, i8* %9, align 16
  %12 = lshr i32 %1, 16
  %13 = trunc i32 %12 to i8
  %14 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 1
  store i8 %13, i8* %14, align 1
  %15 = lshr i32 %1, 8
  %16 = trunc i32 %15 to i8
  %17 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 2
  store i8 %16, i8* %17, align 2
  %18 = trunc i32 %1 to i8
  %19 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 3
  store i8 %18, i8* %19, align 1
  %20 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 4
  store i8 58, i8* %20, align 4
  %21 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 5
  store i8 32, i8* %21, align 1
  %22 = lshr i32 %6, 24
  %23 = trunc i32 %22 to i8
  %24 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 6
  store i8 %23, i8* %24, align 2
  %25 = lshr i32 %6, 16
  %26 = trunc i32 %25 to i8
  %27 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 7
  store i8 %26, i8* %27, align 1
  %28 = lshr i32 %6, 8
  %29 = trunc i32 %28 to i8
  %30 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 8
  store i8 %29, i8* %30, align 8
  %31 = trunc i32 %6 to i8
  %32 = getelementptr inbounds [64 x i8], [64 x i8]* %4, i64 0, i64 9
  store i8 %31, i8* %32, align 1
  %33 = call i64 @cr_png_safecat(i8* nonnull %9, i64 64, i64 10, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.27, i64 0, i64 0)) #6
  call void @cr_png_warning(%struct.png_struct_def* %0, i8* nonnull %9) #6
  %34 = load i32, i32* %5, align 8
  %35 = icmp eq i32 %34, 1229209940
  br i1 %35, label %36, label %38

36:                                               ; preds = %8
  %37 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 6
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.28, i64 0, i64 0), i8** %37, align 8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #6
  br label %142

38:                                               ; preds = %8
  store i32 0, i32* %5, align 8
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %9) #6
  br label %39

39:                                               ; preds = %38, %3
  %40 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 22
  %41 = bitcast i32* %40 to <4 x i32>*
  %42 = load <4 x i32>, <4 x i32>* %41, align 4
  %43 = icmp eq i32 %1, 1229209940
  br i1 %43, label %44, label %57

44:                                               ; preds = %39
  %45 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 16
  %46 = load i32, i32* %45, align 8
  %47 = and i32 %46, 1
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %52, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 26
  %51 = load i32, i32* %50, align 4
  br label %63

52:                                               ; preds = %44
  %53 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 59
  %54 = load i8, i8* %53, align 8
  %55 = icmp ne i8 %54, 8
  %56 = zext i1 %55 to i32
  br label %63

57:                                               ; preds = %39
  %58 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 27
  %59 = bitcast i32* %58 to <4 x i32>*
  %60 = load <4 x i32>, <4 x i32>* %59, align 8
  %61 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 31
  %62 = load i32, i32* %61, align 8
  br label %63

63:                                               ; preds = %52, %49, %57
  %64 = phi i32 [ %51, %49 ], [ %62, %57 ], [ %56, %52 ]
  %65 = phi <4 x i32> [ %42, %49 ], [ %60, %57 ], [ %42, %52 ]
  %66 = icmp ult i64 %2, 16385
  %67 = extractelement <4 x i32> %65, i32 2
  br i1 %66, label %68, label %81

68:                                               ; preds = %63
  %69 = add nsw i32 %67, -1
  %70 = shl i32 1, %69
  %71 = add nuw nsw i64 %2, 262
  %72 = zext i32 %70 to i64
  %73 = icmp ugt i64 %71, %72
  br i1 %73, label %81, label %74

74:                                               ; preds = %68, %74
  %75 = phi i32 [ %77, %74 ], [ %70, %68 ]
  %76 = phi i32 [ %78, %74 ], [ %67, %68 ]
  %77 = lshr i32 %75, 1
  %78 = add nsw i32 %76, -1
  %79 = zext i32 %77 to i64
  %80 = icmp ugt i64 %71, %79
  br i1 %80, label %81, label %74

81:                                               ; preds = %74, %68, %63
  %82 = phi i32 [ %67, %63 ], [ %67, %68 ], [ %78, %74 ]
  %83 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 16
  %84 = load i32, i32* %83, align 8
  %85 = and i32 %84, 2
  %86 = icmp eq i32 %85, 0
  br i1 %86, label %118, label %87

87:                                               ; preds = %81
  %88 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 32
  %89 = load i32, i32* %88, align 4
  %90 = extractelement <4 x i32> %65, i32 0
  %91 = icmp eq i32 %89, %90
  br i1 %91, label %92, label %110

92:                                               ; preds = %87
  %93 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 33
  %94 = load i32, i32* %93, align 8
  %95 = extractelement <4 x i32> %65, i32 1
  %96 = icmp eq i32 %94, %95
  br i1 %96, label %97, label %110

97:                                               ; preds = %92
  %98 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 34
  %99 = load i32, i32* %98, align 4
  %100 = icmp eq i32 %99, %82
  br i1 %100, label %101, label %110

101:                                              ; preds = %97
  %102 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 35
  %103 = load i32, i32* %102, align 8
  %104 = extractelement <4 x i32> %65, i32 3
  %105 = icmp eq i32 %103, %104
  br i1 %105, label %106, label %110

106:                                              ; preds = %101
  %107 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 36
  %108 = load i32, i32* %107, align 4
  %109 = icmp eq i32 %108, %64
  br i1 %109, label %118, label %110

110:                                              ; preds = %106, %101, %97, %92, %87
  %111 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19
  %112 = call i32 @Cr_z_deflateEnd(%struct.z_stream_s* %111) #6
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %115, label %114

114:                                              ; preds = %110
  call void @cr_png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.29, i64 0, i64 0)) #6
  br label %115

115:                                              ; preds = %110, %114
  %116 = load i32, i32* %83, align 8
  %117 = and i32 %116, -3
  store i32 %117, i32* %83, align 8
  br label %118

118:                                              ; preds = %106, %81, %115
  %119 = phi i32 [ %84, %106 ], [ %84, %81 ], [ %117, %115 ]
  %120 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19
  %121 = getelementptr inbounds %struct.z_stream_s, %struct.z_stream_s* %120, i64 0, i32 0
  store i8* null, i8** %121, align 8
  %122 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 1
  store i32 0, i32* %122, align 8
  %123 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 3
  store i8* null, i8** %123, align 8
  %124 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 4
  store i32 0, i32* %124, align 8
  %125 = and i32 %119, 2
  %126 = icmp eq i32 %125, 0
  br i1 %126, label %127, label %136

127:                                              ; preds = %118
  %128 = extractelement <4 x i32> %65, i32 0
  %129 = extractelement <4 x i32> %65, i32 1
  %130 = extractelement <4 x i32> %65, i32 3
  %131 = call i32 @Cr_z_deflateInit2_(%struct.z_stream_s* %120, i32 %128, i32 %129, i32 %82, i32 %130, i32 %64, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.30, i64 0, i64 0), i32 112) #6
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %133, label %140

133:                                              ; preds = %127
  %134 = load i32, i32* %83, align 8
  %135 = or i32 %134, 2
  store i32 %135, i32* %83, align 8
  br label %139

136:                                              ; preds = %118
  %137 = call i32 @Cr_z_deflateReset(%struct.z_stream_s* %120) #6
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %140

139:                                              ; preds = %133, %136
  store i32 %1, i32* %5, align 8
  br label %142

140:                                              ; preds = %127, %136
  %141 = phi i32 [ %137, %136 ], [ %131, %127 ]
  call void @cr_png_zstream_error(%struct.png_struct_def* %0, i32 %141) #6
  br label %142

142:                                              ; preds = %139, %140, %36
  %143 = phi i32 [ -2, %36 ], [ %141, %140 ], [ 0, %139 ]
  ret i32 %143
}

declare i32 @Cr_z_deflate(%struct.z_stream_s*, i32) local_unnamed_addr #3

declare void @cr_png_zstream_error(%struct.png_struct_def*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_write_IEND(%struct.png_struct_def* noalias) local_unnamed_addr #1 {
  %2 = alloca i64, align 8
  %3 = alloca i32, align 4
  %4 = icmp eq %struct.png_struct_def* %0, null
  br i1 %4, label %24, label %5

5:                                                ; preds = %1
  %6 = bitcast i64* %2 to [8 x i8]*
  %7 = bitcast i64* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #6, !noalias !41
  %8 = getelementptr inbounds [8 x i8], [8 x i8]* %6, i64 0, i64 4
  store i64 4921947622597459968, i64* %2, align 8, !noalias !41
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %7, i64 8) #6
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  store i32 1229278788, i32* %9, align 8, !alias.scope !41
  call void @cr_png_reset_crc(%struct.png_struct_def* nonnull %0) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* %8, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #6, !noalias !41
  %10 = bitcast i32* %3 to [4 x i8]*
  %11 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %11) #6, !noalias !44
  %12 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 3
  %13 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 2
  %14 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 1
  %15 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %16 = load i32, i32* %15, align 4, !alias.scope !44
  %17 = lshr i32 %16, 24
  %18 = trunc i32 %17 to i8
  store i8 %18, i8* %11, align 4, !noalias !44
  %19 = lshr i32 %16, 16
  %20 = trunc i32 %19 to i8
  store i8 %20, i8* %14, align 1, !noalias !44
  %21 = lshr i32 %16, 8
  %22 = trunc i32 %21 to i8
  store i8 %22, i8* %13, align 2, !noalias !44
  %23 = trunc i32 %16 to i8
  store i8 %23, i8* %12, align 1, !noalias !44
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %11, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %11) #6, !noalias !44
  br label %24

24:                                               ; preds = %1, %5
  %25 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 15
  %26 = load i32, i32* %25, align 4
  %27 = or i32 %26, 16
  store i32 %27, i32* %25, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_write_gAMA_fixed(%struct.png_struct_def* noalias, i32) local_unnamed_addr #1 {
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = bitcast i32* %5 to [4 x i8]*
  %7 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #6
  %8 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 1
  %9 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 2
  %10 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 3
  %11 = lshr i32 %1, 24
  %12 = trunc i32 %11 to i8
  store i8 %12, i8* %7, align 4
  %13 = lshr i32 %1, 16
  %14 = trunc i32 %13 to i8
  store i8 %14, i8* %8, align 1
  %15 = lshr i32 %1, 8
  %16 = trunc i32 %15 to i8
  store i8 %16, i8* %9, align 2
  %17 = trunc i32 %1 to i8
  store i8 %17, i8* %10, align 1
  %18 = icmp eq %struct.png_struct_def* %0, null
  br i1 %18, label %38, label %19

19:                                               ; preds = %2
  %20 = bitcast i64* %4 to [8 x i8]*
  %21 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #6, !noalias !47
  %22 = getelementptr inbounds [8 x i8], [8 x i8]* %20, i64 0, i64 4
  store i64 4705489096376582144, i64* %4, align 8, !noalias !47
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %21, i64 8) #6
  %23 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  store i32 1732332865, i32* %23, align 8, !alias.scope !47
  call void @cr_png_reset_crc(%struct.png_struct_def* nonnull %0) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* %22, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #6, !noalias !47
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %7, i64 4) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %7, i64 4) #6
  %24 = bitcast i32* %3 to [4 x i8]*
  %25 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %25) #6, !noalias !50
  %26 = getelementptr inbounds [4 x i8], [4 x i8]* %24, i64 0, i64 3
  %27 = getelementptr inbounds [4 x i8], [4 x i8]* %24, i64 0, i64 2
  %28 = getelementptr inbounds [4 x i8], [4 x i8]* %24, i64 0, i64 1
  %29 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %30 = load i32, i32* %29, align 4, !alias.scope !50
  %31 = lshr i32 %30, 24
  %32 = trunc i32 %31 to i8
  store i8 %32, i8* %25, align 4, !noalias !50
  %33 = lshr i32 %30, 16
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %28, align 1, !noalias !50
  %35 = lshr i32 %30, 8
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %27, align 2, !noalias !50
  %37 = trunc i32 %30 to i8
  store i8 %37, i8* %26, align 1, !noalias !50
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %25, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %25) #6, !noalias !50
  br label %38

38:                                               ; preds = %2, %19
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_write_sRGB(%struct.png_struct_def* noalias, i32) local_unnamed_addr #1 {
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  %5 = alloca [1 x i8], align 1
  %6 = getelementptr inbounds [1 x i8], [1 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %6) #6
  store i8 -86, i8* %6, align 1
  %7 = icmp sgt i32 %1, 3
  br i1 %7, label %8, label %9

8:                                                ; preds = %2
  tail call void @cr_png_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.12, i64 0, i64 0)) #6
  br label %9

9:                                                ; preds = %8, %2
  %10 = trunc i32 %1 to i8
  store i8 %10, i8* %6, align 1
  %11 = icmp eq %struct.png_struct_def* %0, null
  br i1 %11, label %31, label %12

12:                                               ; preds = %9
  %13 = bitcast i64* %4 to [8 x i8]*
  %14 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #6, !noalias !53
  %15 = getelementptr inbounds [8 x i8], [8 x i8]* %13, i64 0, i64 4
  store i64 4775876583741194240, i64* %4, align 8, !noalias !53
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %14, i64 8) #6
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  store i32 1934772034, i32* %16, align 8, !alias.scope !53
  call void @cr_png_reset_crc(%struct.png_struct_def* nonnull %0) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* %15, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #6, !noalias !53
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %6, i64 1) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %6, i64 1) #6
  %17 = bitcast i32* %3 to [4 x i8]*
  %18 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %18) #6, !noalias !56
  %19 = getelementptr inbounds [4 x i8], [4 x i8]* %17, i64 0, i64 3
  %20 = getelementptr inbounds [4 x i8], [4 x i8]* %17, i64 0, i64 2
  %21 = getelementptr inbounds [4 x i8], [4 x i8]* %17, i64 0, i64 1
  %22 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %23 = load i32, i32* %22, align 4, !alias.scope !56
  %24 = lshr i32 %23, 24
  %25 = trunc i32 %24 to i8
  store i8 %25, i8* %18, align 4, !noalias !56
  %26 = lshr i32 %23, 16
  %27 = trunc i32 %26 to i8
  store i8 %27, i8* %21, align 1, !noalias !56
  %28 = lshr i32 %23, 8
  %29 = trunc i32 %28 to i8
  store i8 %29, i8* %20, align 2, !noalias !56
  %30 = trunc i32 %23 to i8
  store i8 %30, i8* %19, align 1, !noalias !56
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %18, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %18) #6, !noalias !56
  br label %31

31:                                               ; preds = %9, %12
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %6) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_write_iCCP(%struct.png_struct_def* noalias, i8*, i8*) local_unnamed_addr #1 {
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca [81 x i8], align 16
  %7 = alloca %struct.compression_state, align 8
  %8 = getelementptr inbounds [81 x i8], [81 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 81, i8* nonnull %8) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 81, i1 false)
  %9 = bitcast %struct.compression_state* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1048, i8* nonnull %9) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 1048, i1 false)
  %10 = icmp eq i8* %2, null
  br i1 %10, label %11, label %12

11:                                               ; preds = %3
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.13, i64 0, i64 0)) #7
  unreachable

12:                                               ; preds = %3
  %13 = tail call i32 @cr_png_get_uint_32(i8* nonnull %2) #6
  %14 = icmp ult i32 %13, 132
  br i1 %14, label %15, label %16

15:                                               ; preds = %12
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.14, i64 0, i64 0)) #7
  unreachable

16:                                               ; preds = %12
  %17 = getelementptr inbounds i8, i8* %2, i64 8
  %18 = load i8, i8* %17, align 1
  %19 = icmp ult i8 %18, 4
  %20 = and i32 %13, 3
  %21 = icmp eq i32 %20, 0
  %22 = or i1 %21, %19
  br i1 %22, label %24, label %23

23:                                               ; preds = %16
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.15, i64 0, i64 0)) #7
  unreachable

24:                                               ; preds = %16
  %25 = tail call i32 @cr_png_get_uint_32(i8* nonnull %2) #6
  %26 = icmp eq i32 %13, %25
  br i1 %26, label %28, label %27

27:                                               ; preds = %24
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.16, i64 0, i64 0)) #7
  unreachable

28:                                               ; preds = %24
  %29 = call i32 @cr_png_check_keyword(%struct.png_struct_def* %0, i8* %1, i8* nonnull %8) #6
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %32

31:                                               ; preds = %28
  call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.17, i64 0, i64 0)) #7
  unreachable

32:                                               ; preds = %28
  %33 = add i32 %29, 1
  %34 = zext i32 %33 to i64
  %35 = getelementptr inbounds [81 x i8], [81 x i8]* %6, i64 0, i64 %34
  store i8 0, i8* %35, align 1
  %36 = add i32 %29, 2
  %37 = zext i32 %13 to i64
  %38 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %7, i64 0, i32 0
  store i8* %2, i8** %38, align 8
  %39 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %7, i64 0, i32 1
  store i64 %37, i64* %39, align 8
  %40 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %7, i64 0, i32 2
  store i32 0, i32* %40, align 8
  %41 = call fastcc i32 @png_text_compress(%struct.png_struct_def* %0, i32 1766015824, %struct.compression_state* nonnull %7, i32 %36)
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %46, label %43

43:                                               ; preds = %32
  %44 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 6
  %45 = load i8*, i8** %44, align 8
  call void @cr_png_error(%struct.png_struct_def* %0, i8* %45) #7
  unreachable

46:                                               ; preds = %32
  %47 = load i32, i32* %40, align 8
  %48 = add i32 %47, %36
  %49 = bitcast i64* %4 to [8 x i8]*
  %50 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %50) #6, !noalias !59
  %51 = getelementptr inbounds [8 x i8], [8 x i8]* %49, i64 0, i64 4
  %52 = icmp eq %struct.png_struct_def* %0, null
  store i64 -6148914691236517206, i64* %4, align 8, !noalias !59
  br i1 %52, label %53, label %54

53:                                               ; preds = %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %50) #6, !noalias !59
  br label %72

54:                                               ; preds = %46
  %55 = getelementptr inbounds [8 x i8], [8 x i8]* %49, i64 0, i64 7
  %56 = getelementptr inbounds [8 x i8], [8 x i8]* %49, i64 0, i64 6
  %57 = getelementptr inbounds [8 x i8], [8 x i8]* %49, i64 0, i64 5
  %58 = getelementptr inbounds [8 x i8], [8 x i8]* %49, i64 0, i64 3
  %59 = getelementptr inbounds [8 x i8], [8 x i8]* %49, i64 0, i64 2
  %60 = getelementptr inbounds [8 x i8], [8 x i8]* %49, i64 0, i64 1
  %61 = lshr i32 %48, 24
  %62 = trunc i32 %61 to i8
  store i8 %62, i8* %50, align 8, !noalias !59
  %63 = lshr i32 %48, 16
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %60, align 1, !noalias !59
  %65 = lshr i32 %48, 8
  %66 = trunc i32 %65 to i8
  store i8 %66, i8* %59, align 2, !noalias !59
  %67 = trunc i32 %48 to i8
  store i8 %67, i8* %58, align 1, !noalias !59
  store i8 105, i8* %51, align 4, !noalias !59
  store i8 67, i8* %57, align 1, !noalias !59
  store i8 67, i8* %56, align 2, !noalias !59
  store i8 80, i8* %55, align 1, !noalias !59
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %50, i64 8) #6
  %68 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  store i32 1766015824, i32* %68, align 8, !alias.scope !59
  call void @cr_png_reset_crc(%struct.png_struct_def* nonnull %0) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* %51, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %50) #6, !noalias !59
  %69 = zext i32 %36 to i64
  %70 = icmp eq i32 %36, 0
  br i1 %70, label %72, label %71

71:                                               ; preds = %54
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %8, i64 %69) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %8, i64 %69) #6
  br label %72

72:                                               ; preds = %54, %53, %71
  %73 = phi i1 [ false, %53 ], [ true, %54 ], [ true, %71 ]
  %74 = load i32, i32* %40, align 8, !noalias !62
  %75 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %7, i64 0, i32 3, i64 0
  %76 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 20
  %77 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 21
  br label %78

78:                                               ; preds = %97, %72
  %79 = phi i32 [ %74, %72 ], [ %93, %97 ]
  %80 = phi i8* [ %75, %72 ], [ %99, %97 ]
  %81 = phi i32 [ 1024, %72 ], [ %98, %97 ]
  %82 = phi %struct.png_compression_buffer** [ %76, %72 ], [ %100, %97 ]
  %83 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %82, align 8
  %84 = icmp ugt i32 %81, %79
  %85 = select i1 %84, i32 %79, i32 %81
  %86 = zext i32 %85 to i64
  %87 = icmp ne i8* %80, null
  %88 = and i1 %73, %87
  %89 = icmp ne i32 %85, 0
  %90 = and i1 %88, %89
  br i1 %90, label %91, label %92

91:                                               ; preds = %78
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %80, i64 %86) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %80, i64 %86) #6
  br label %92

92:                                               ; preds = %91, %78
  %93 = sub i32 %79, %85
  %94 = icmp eq i32 %93, 0
  %95 = icmp eq %struct.png_compression_buffer* %83, null
  %96 = or i1 %95, %94
  br i1 %96, label %101, label %97

97:                                               ; preds = %92
  %98 = load i32, i32* %77, align 8, !alias.scope !62
  %99 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %83, i64 0, i32 1, i64 0
  %100 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %83, i64 0, i32 0
  br label %78

101:                                              ; preds = %92
  br i1 %94, label %103, label %102

102:                                              ; preds = %101
  call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.32, i64 0, i64 0)) #7
  unreachable

103:                                              ; preds = %101
  %104 = bitcast i32* %5 to [4 x i8]*
  %105 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %105) #6, !noalias !65
  store i32 -1431655766, i32* %5, align 4, !noalias !65
  br i1 %52, label %119, label %106

106:                                              ; preds = %103
  %107 = getelementptr inbounds [4 x i8], [4 x i8]* %104, i64 0, i64 3
  %108 = getelementptr inbounds [4 x i8], [4 x i8]* %104, i64 0, i64 2
  %109 = getelementptr inbounds [4 x i8], [4 x i8]* %104, i64 0, i64 1
  %110 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %111 = load i32, i32* %110, align 4, !alias.scope !65
  %112 = lshr i32 %111, 24
  %113 = trunc i32 %112 to i8
  store i8 %113, i8* %105, align 4, !noalias !65
  %114 = lshr i32 %111, 16
  %115 = trunc i32 %114 to i8
  store i8 %115, i8* %109, align 1, !noalias !65
  %116 = lshr i32 %111, 8
  %117 = trunc i32 %116 to i8
  store i8 %117, i8* %108, align 2, !noalias !65
  %118 = trunc i32 %111 to i8
  store i8 %118, i8* %107, align 1, !noalias !65
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %105, i64 4) #6
  br label %119

119:                                              ; preds = %103, %106
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %105) #6, !noalias !65
  call void @llvm.lifetime.end.p0i8(i64 1048, i8* nonnull %9) #6
  call void @llvm.lifetime.end.p0i8(i64 81, i8* nonnull %8) #6
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare i32 @cr_png_get_uint_32(i8*) local_unnamed_addr #3

declare i32 @cr_png_check_keyword(%struct.png_struct_def*, i8*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal fastcc i32 @png_text_compress(%struct.png_struct_def* noalias, i32, %struct.compression_state*, i32) unnamed_addr #1 {
  %5 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %2, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = tail call fastcc i32 @png_deflate_claim(%struct.png_struct_def* %0, i32 %1, i64 %6)
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %86

9:                                                ; preds = %4
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 20
  %11 = load i64, i64* %5, align 8
  %12 = bitcast %struct.compression_state* %2 to i64*
  %13 = load i64, i64* %12, align 8
  %14 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19
  %15 = bitcast %struct.z_stream_s* %14 to i64*
  store i64 %13, i64* %15, align 8
  %16 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 1
  store i32 0, i32* %16, align 8
  %17 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %2, i64 0, i32 3, i64 0
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 3
  store i8* %17, i8** %18, align 8
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 4
  store i32 1024, i32* %19, align 8
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 21
  br label %21

21:                                               ; preds = %62, %9
  %22 = phi i32 [ 1024, %9 ], [ %70, %62 ]
  %23 = phi %struct.png_compression_buffer** [ %10, %9 ], [ %65, %62 ]
  %24 = phi i64 [ %11, %9 ], [ %66, %62 ]
  %25 = phi i32 [ 1024, %9 ], [ %67, %62 ]
  %26 = icmp ult i64 %24, 4294967295
  %27 = select i1 %26, i64 %24, i64 4294967295
  %28 = trunc i64 %27 to i32
  %29 = sub i64 %24, %27
  store i32 %28, i32* %16, align 8
  %30 = icmp eq i32 %22, 0
  br i1 %30, label %31, label %53

31:                                               ; preds = %21
  %32 = add i32 %25, %3
  %33 = icmp slt i32 %32, 0
  br i1 %33, label %62, label %34

34:                                               ; preds = %31
  %35 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %23, align 8
  %36 = icmp eq %struct.png_compression_buffer* %35, null
  br i1 %36, label %37, label %47

37:                                               ; preds = %34
  %38 = load i32, i32* %20, align 8
  %39 = zext i32 %38 to i64
  %40 = add nuw nsw i64 %39, 8
  %41 = tail call noalias i8* @cr_png_malloc_base(%struct.png_struct_def* %0, i64 %40) #6
  %42 = icmp eq i8* %41, null
  br i1 %42, label %62, label %43

43:                                               ; preds = %37
  %44 = bitcast i8* %41 to %struct.png_compression_buffer*
  %45 = bitcast i8* %41 to %struct.png_compression_buffer**
  store %struct.png_compression_buffer* null, %struct.png_compression_buffer** %45, align 8
  %46 = bitcast %struct.png_compression_buffer** %23 to i8**
  store i8* %41, i8** %46, align 8
  br label %47

47:                                               ; preds = %34, %43
  %48 = phi %struct.png_compression_buffer* [ %44, %43 ], [ %35, %34 ]
  %49 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %48, i64 0, i32 1, i64 0
  store i8* %49, i8** %18, align 8
  %50 = load i32, i32* %20, align 8
  store i32 %50, i32* %19, align 8
  %51 = add i32 %50, %25
  %52 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %48, i64 0, i32 0
  br label %53

53:                                               ; preds = %47, %21
  %54 = phi %struct.png_compression_buffer** [ %52, %47 ], [ %23, %21 ]
  %55 = phi i32 [ %51, %47 ], [ %25, %21 ]
  %56 = icmp eq i64 %29, 0
  %57 = select i1 %56, i32 4, i32 0
  %58 = tail call i32 @Cr_z_deflate(%struct.z_stream_s* %14, i32 %57) #6
  %59 = load i32, i32* %16, align 8
  %60 = zext i32 %59 to i64
  %61 = add i64 %29, %60
  store i32 0, i32* %16, align 8
  br label %62

62:                                               ; preds = %37, %31, %53
  %63 = phi i32 [ %58, %53 ], [ -4, %31 ], [ -4, %37 ]
  %64 = phi i32 [ 0, %53 ], [ 2, %31 ], [ 2, %37 ]
  %65 = phi %struct.png_compression_buffer** [ %54, %53 ], [ %23, %31 ], [ %23, %37 ]
  %66 = phi i64 [ %61, %53 ], [ %29, %31 ], [ %29, %37 ]
  %67 = phi i32 [ %55, %53 ], [ %25, %31 ], [ %25, %37 ]
  %68 = or i32 %64, %63
  %69 = icmp eq i32 %68, 0
  %70 = load i32, i32* %19, align 8
  br i1 %69, label %21, label %71

71:                                               ; preds = %62
  %72 = sub i32 %67, %70
  store i32 0, i32* %19, align 8
  %73 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %2, i64 0, i32 2
  store i32 %72, i32* %73, align 8
  %74 = add i32 %72, %3
  %75 = icmp ugt i32 %74, 2147483646
  br i1 %75, label %76, label %78

76:                                               ; preds = %71
  %77 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 6
  store i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.31, i64 0, i64 0), i8** %77, align 8
  br label %79

78:                                               ; preds = %71
  tail call void @cr_png_zstream_error(%struct.png_struct_def* %0, i32 %63) #6
  br label %79

79:                                               ; preds = %78, %76
  %80 = phi i32 [ -4, %76 ], [ %63, %78 ]
  %81 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 18
  store i32 0, i32* %81, align 8
  %82 = icmp eq i32 %80, 1
  %83 = icmp eq i64 %66, 0
  %84 = and i1 %83, %82
  %85 = select i1 %84, i32 0, i32 %80
  br label %86

86:                                               ; preds = %4, %79
  %87 = phi i32 [ %85, %79 ], [ %7, %4 ]
  ret i32 %87
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_write_cHRM_fixed(%struct.png_struct_def* noalias, %struct.png_xy* nocapture readonly) local_unnamed_addr #1 {
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  %5 = alloca [32 x i8], align 16
  %6 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %6) #6
  %7 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 4
  %8 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 8
  %9 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 12
  %10 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 16
  %11 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 20
  %12 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 24
  %13 = getelementptr inbounds [32 x i8], [32 x i8]* %5, i64 0, i64 28
  %14 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %6, i8 -86, i64 32, i1 false)
  %15 = load i32, i32* %14, align 4
  call void @cr_png_save_int_32(i8* nonnull %6, i32 %15) #6
  %16 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 7
  %17 = load i32, i32* %16, align 4
  call void @cr_png_save_int_32(i8* %7, i32 %17) #6
  %18 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 0
  %19 = load i32, i32* %18, align 4
  call void @cr_png_save_int_32(i8* %8, i32 %19) #6
  %20 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 1
  %21 = load i32, i32* %20, align 4
  call void @cr_png_save_int_32(i8* %9, i32 %21) #6
  %22 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 2
  %23 = load i32, i32* %22, align 4
  call void @cr_png_save_int_32(i8* %10, i32 %23) #6
  %24 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 3
  %25 = load i32, i32* %24, align 4
  call void @cr_png_save_int_32(i8* %11, i32 %25) #6
  %26 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 4
  %27 = load i32, i32* %26, align 4
  call void @cr_png_save_int_32(i8* %12, i32 %27) #6
  %28 = getelementptr inbounds %struct.png_xy, %struct.png_xy* %1, i64 0, i32 5
  %29 = load i32, i32* %28, align 4
  call void @cr_png_save_int_32(i8* %13, i32 %29) #6
  %30 = icmp eq %struct.png_struct_def* %0, null
  br i1 %30, label %50, label %31

31:                                               ; preds = %2
  %32 = bitcast i64* %4 to [8 x i8]*
  %33 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #6, !noalias !68
  %34 = getelementptr inbounds [8 x i8], [8 x i8]* %32, i64 0, i64 4
  store i64 5571595279586557952, i64* %4, align 8, !noalias !68
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %33, i64 8) #6
  %35 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  store i32 1665684045, i32* %35, align 8, !alias.scope !68
  call void @cr_png_reset_crc(%struct.png_struct_def* nonnull %0) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* %34, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #6, !noalias !68
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %6, i64 32) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %6, i64 32) #6
  %36 = bitcast i32* %3 to [4 x i8]*
  %37 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %37) #6, !noalias !71
  %38 = getelementptr inbounds [4 x i8], [4 x i8]* %36, i64 0, i64 3
  %39 = getelementptr inbounds [4 x i8], [4 x i8]* %36, i64 0, i64 2
  %40 = getelementptr inbounds [4 x i8], [4 x i8]* %36, i64 0, i64 1
  %41 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %42 = load i32, i32* %41, align 4, !alias.scope !71
  %43 = lshr i32 %42, 24
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %37, align 4, !noalias !71
  %45 = lshr i32 %42, 16
  %46 = trunc i32 %45 to i8
  store i8 %46, i8* %40, align 1, !noalias !71
  %47 = lshr i32 %42, 8
  %48 = trunc i32 %47 to i8
  store i8 %48, i8* %39, align 2, !noalias !71
  %49 = trunc i32 %42 to i8
  store i8 %49, i8* %38, align 1, !noalias !71
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %37, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %37) #6, !noalias !71
  br label %50

50:                                               ; preds = %2, %31
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %6) #6
  ret void
}

declare void @cr_png_save_int_32(i8*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_write_tRNS(%struct.png_struct_def* noalias, i8*, %struct.png_color_16_struct* nocapture readonly, i32, i32) local_unnamed_addr #1 {
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [6 x i8], align 1
  %13 = getelementptr inbounds [6 x i8], [6 x i8]* %12, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 6, i8* nonnull %13) #6
  %14 = getelementptr inbounds [6 x i8], [6 x i8]* %12, i64 0, i64 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %13, i8 -86, i64 6, i1 false)
  switch i32 %4, label %141 [
    i32 3, label %15
    i32 0, label %58
    i32 2, label %92
  ]

15:                                               ; preds = %5
  %16 = icmp slt i32 %3, 1
  br i1 %16, label %22, label %17

17:                                               ; preds = %15
  %18 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 53
  %19 = load i16, i16* %18, align 8
  %20 = zext i16 %19 to i32
  %21 = icmp slt i32 %20, %3
  br i1 %21, label %22, label %23

22:                                               ; preds = %17, %15
  tail call void @cr_png_app_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.18, i64 0, i64 0)) #6
  br label %142

23:                                               ; preds = %17
  %24 = sext i32 %3 to i64
  %25 = icmp eq %struct.png_struct_def* %0, null
  br i1 %25, label %142, label %26

26:                                               ; preds = %23
  %27 = bitcast i64* %8 to [8 x i8]*
  %28 = bitcast i64* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %28) #6, !noalias !74
  %29 = getelementptr inbounds [8 x i8], [8 x i8]* %27, i64 0, i64 4
  store i64 6002826014364445354, i64* %8, align 8, !noalias !74
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %27, i64 0, i64 3
  %31 = getelementptr inbounds [8 x i8], [8 x i8]* %27, i64 0, i64 2
  %32 = getelementptr inbounds [8 x i8], [8 x i8]* %27, i64 0, i64 1
  %33 = lshr i32 %3, 24
  %34 = trunc i32 %33 to i8
  store i8 %34, i8* %28, align 8, !noalias !74
  %35 = lshr i32 %3, 16
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %32, align 1, !noalias !74
  %37 = lshr i32 %3, 8
  %38 = trunc i32 %37 to i8
  store i8 %38, i8* %31, align 2, !noalias !74
  %39 = trunc i32 %3 to i8
  store i8 %39, i8* %30, align 1, !noalias !74
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %28, i64 8) #6
  %40 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  store i32 1951551059, i32* %40, align 8, !alias.scope !74
  call void @cr_png_reset_crc(%struct.png_struct_def* nonnull %0) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* %29, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %28) #6, !noalias !74
  %41 = icmp eq i8* %1, null
  br i1 %41, label %43, label %42

42:                                               ; preds = %26
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %1, i64 %24) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %1, i64 %24) #6
  br label %43

43:                                               ; preds = %26, %42
  %44 = bitcast i32* %11 to [4 x i8]*
  %45 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %45) #6, !noalias !77
  %46 = getelementptr inbounds [4 x i8], [4 x i8]* %44, i64 0, i64 3
  %47 = getelementptr inbounds [4 x i8], [4 x i8]* %44, i64 0, i64 2
  %48 = getelementptr inbounds [4 x i8], [4 x i8]* %44, i64 0, i64 1
  %49 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %50 = load i32, i32* %49, align 4, !alias.scope !77
  %51 = lshr i32 %50, 24
  %52 = trunc i32 %51 to i8
  store i8 %52, i8* %45, align 4, !noalias !77
  %53 = lshr i32 %50, 16
  %54 = trunc i32 %53 to i8
  store i8 %54, i8* %48, align 1, !noalias !77
  %55 = lshr i32 %50, 8
  %56 = trunc i32 %55 to i8
  store i8 %56, i8* %47, align 2, !noalias !77
  %57 = trunc i32 %50 to i8
  store i8 %57, i8* %46, align 1, !noalias !77
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %45, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %45) #6, !noalias !77
  br label %142

58:                                               ; preds = %5
  %59 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i64 0, i32 4
  %60 = load i16, i16* %59, align 2
  %61 = zext i16 %60 to i32
  %62 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 61
  %63 = load i8, i8* %62, align 2
  %64 = zext i8 %63 to i32
  %65 = shl i32 1, %64
  %66 = icmp sgt i32 %65, %61
  br i1 %66, label %68, label %67

67:                                               ; preds = %58
  tail call void @cr_png_app_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.19, i64 0, i64 0)) #6
  br label %142

68:                                               ; preds = %58
  %69 = lshr i16 %60, 8
  %70 = trunc i16 %69 to i8
  store i8 %70, i8* %13, align 1
  %71 = trunc i16 %60 to i8
  store i8 %71, i8* %14, align 1
  %72 = icmp eq %struct.png_struct_def* %0, null
  br i1 %72, label %142, label %73

73:                                               ; preds = %68
  %74 = bitcast i64* %9 to [8 x i8]*
  %75 = bitcast i64* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %75) #6, !noalias !80
  %76 = getelementptr inbounds [8 x i8], [8 x i8]* %74, i64 0, i64 4
  store i64 6002826011534688256, i64* %9, align 8, !noalias !80
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %75, i64 8) #6
  %77 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  store i32 1951551059, i32* %77, align 8, !alias.scope !80
  call void @cr_png_reset_crc(%struct.png_struct_def* nonnull %0) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* %76, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %75) #6, !noalias !80
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %13, i64 2) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %13, i64 2) #6
  %78 = bitcast i32* %10 to [4 x i8]*
  %79 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %79) #6, !noalias !83
  %80 = getelementptr inbounds [4 x i8], [4 x i8]* %78, i64 0, i64 3
  %81 = getelementptr inbounds [4 x i8], [4 x i8]* %78, i64 0, i64 2
  %82 = getelementptr inbounds [4 x i8], [4 x i8]* %78, i64 0, i64 1
  %83 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %84 = load i32, i32* %83, align 4, !alias.scope !83
  %85 = lshr i32 %84, 24
  %86 = trunc i32 %85 to i8
  store i8 %86, i8* %79, align 4, !noalias !83
  %87 = lshr i32 %84, 16
  %88 = trunc i32 %87 to i8
  store i8 %88, i8* %82, align 1, !noalias !83
  %89 = lshr i32 %84, 8
  %90 = trunc i32 %89 to i8
  store i8 %90, i8* %81, align 2, !noalias !83
  %91 = trunc i32 %84 to i8
  store i8 %91, i8* %80, align 1, !noalias !83
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %79, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %79) #6, !noalias !83
  br label %142

92:                                               ; preds = %5
  %93 = getelementptr inbounds [6 x i8], [6 x i8]* %12, i64 0, i64 5
  %94 = getelementptr inbounds [6 x i8], [6 x i8]* %12, i64 0, i64 4
  %95 = getelementptr inbounds [6 x i8], [6 x i8]* %12, i64 0, i64 3
  %96 = getelementptr inbounds [6 x i8], [6 x i8]* %12, i64 0, i64 2
  %97 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i64 0, i32 1
  %98 = load i16, i16* %97, align 2
  %99 = lshr i16 %98, 8
  %100 = trunc i16 %99 to i8
  store i8 %100, i8* %13, align 1
  %101 = trunc i16 %98 to i8
  store i8 %101, i8* %14, align 1
  %102 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i64 0, i32 2
  %103 = load i16, i16* %102, align 2
  %104 = lshr i16 %103, 8
  %105 = trunc i16 %104 to i8
  store i8 %105, i8* %96, align 1
  %106 = trunc i16 %103 to i8
  store i8 %106, i8* %95, align 1
  %107 = getelementptr inbounds %struct.png_color_16_struct, %struct.png_color_16_struct* %2, i64 0, i32 3
  %108 = load i16, i16* %107, align 2
  %109 = lshr i16 %108, 8
  %110 = trunc i16 %109 to i8
  store i8 %110, i8* %94, align 1
  %111 = trunc i16 %108 to i8
  store i8 %111, i8* %93, align 1
  %112 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 61
  %113 = load i8, i8* %112, align 2
  %114 = icmp eq i8 %113, 8
  br i1 %114, label %115, label %120

115:                                              ; preds = %92
  %116 = or i16 %104, %99
  %117 = or i16 %116, %109
  %118 = icmp eq i16 %117, 0
  br i1 %118, label %120, label %119

119:                                              ; preds = %115
  tail call void @cr_png_app_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.20, i64 0, i64 0)) #6
  br label %142

120:                                              ; preds = %115, %92
  %121 = icmp eq %struct.png_struct_def* %0, null
  br i1 %121, label %142, label %122

122:                                              ; preds = %120
  %123 = bitcast i64* %7 to [8 x i8]*
  %124 = bitcast i64* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %124) #6, !noalias !86
  %125 = getelementptr inbounds [8 x i8], [8 x i8]* %123, i64 0, i64 4
  store i64 6002826011601797120, i64* %7, align 8, !noalias !86
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %124, i64 8) #6
  %126 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  store i32 1951551059, i32* %126, align 8, !alias.scope !86
  call void @cr_png_reset_crc(%struct.png_struct_def* nonnull %0) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* %125, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %124) #6, !noalias !86
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %13, i64 6) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %13, i64 6) #6
  %127 = bitcast i32* %6 to [4 x i8]*
  %128 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %128) #6, !noalias !89
  %129 = getelementptr inbounds [4 x i8], [4 x i8]* %127, i64 0, i64 3
  %130 = getelementptr inbounds [4 x i8], [4 x i8]* %127, i64 0, i64 2
  %131 = getelementptr inbounds [4 x i8], [4 x i8]* %127, i64 0, i64 1
  %132 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %133 = load i32, i32* %132, align 4, !alias.scope !89
  %134 = lshr i32 %133, 24
  %135 = trunc i32 %134 to i8
  store i8 %135, i8* %128, align 4, !noalias !89
  %136 = lshr i32 %133, 16
  %137 = trunc i32 %136 to i8
  store i8 %137, i8* %131, align 1, !noalias !89
  %138 = lshr i32 %133, 8
  %139 = trunc i32 %138 to i8
  store i8 %139, i8* %130, align 2, !noalias !89
  %140 = trunc i32 %133 to i8
  store i8 %140, i8* %129, align 1, !noalias !89
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %128, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %128) #6, !noalias !89
  br label %142

141:                                              ; preds = %5
  tail call void @cr_png_app_warning(%struct.png_struct_def* %0, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.21, i64 0, i64 0)) #6
  br label %142

142:                                              ; preds = %122, %120, %73, %68, %43, %23, %141, %119, %67, %22
  call void @llvm.lifetime.end.p0i8(i64 6, i8* nonnull %13) #6
  ret void
}

declare void @cr_png_app_warning(%struct.png_struct_def*, i8*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_write_tEXt(%struct.png_struct_def* noalias, i8*, i8*, i64) local_unnamed_addr #1 {
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca [80 x i8], align 16
  %8 = getelementptr inbounds [80 x i8], [80 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 80, i8* nonnull %8) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -86, i64 80, i1 false)
  %9 = call i32 @cr_png_check_keyword(%struct.png_struct_def* %0, i8* %1, i8* nonnull %8) #6
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %12

11:                                               ; preds = %4
  call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.22, i64 0, i64 0)) #7
  unreachable

12:                                               ; preds = %4
  %13 = icmp eq i8* %2, null
  br i1 %13, label %23, label %14

14:                                               ; preds = %12
  %15 = load i8, i8* %2, align 1
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %23, label %17

17:                                               ; preds = %14
  %18 = call i64 @strlen(i8* nonnull %2) #8
  %19 = sub i32 2147483646, %9
  %20 = zext i32 %19 to i64
  %21 = icmp ugt i64 %18, %20
  br i1 %21, label %22, label %23

22:                                               ; preds = %17
  call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.23, i64 0, i64 0)) #7
  unreachable

23:                                               ; preds = %12, %14, %17
  %24 = phi i64 [ %18, %17 ], [ 0, %14 ], [ 0, %12 ]
  %25 = trunc i64 %24 to i32
  %26 = add i32 %9, 1
  %27 = add i32 %26, %25
  %28 = bitcast i64* %6 to [8 x i8]*
  %29 = bitcast i64* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #6, !noalias !92
  %30 = getelementptr inbounds [8 x i8], [8 x i8]* %28, i64 0, i64 4
  %31 = icmp eq %struct.png_struct_def* %0, null
  store i64 -6148914691236517206, i64* %6, align 8, !noalias !92
  br i1 %31, label %55, label %32

32:                                               ; preds = %23
  %33 = getelementptr inbounds [8 x i8], [8 x i8]* %28, i64 0, i64 7
  %34 = getelementptr inbounds [8 x i8], [8 x i8]* %28, i64 0, i64 6
  %35 = getelementptr inbounds [8 x i8], [8 x i8]* %28, i64 0, i64 5
  %36 = getelementptr inbounds [8 x i8], [8 x i8]* %28, i64 0, i64 3
  %37 = getelementptr inbounds [8 x i8], [8 x i8]* %28, i64 0, i64 2
  %38 = getelementptr inbounds [8 x i8], [8 x i8]* %28, i64 0, i64 1
  %39 = lshr i32 %27, 24
  %40 = trunc i32 %39 to i8
  store i8 %40, i8* %29, align 8, !noalias !92
  %41 = lshr i32 %27, 16
  %42 = trunc i32 %41 to i8
  store i8 %42, i8* %38, align 1, !noalias !92
  %43 = lshr i32 %27, 8
  %44 = trunc i32 %43 to i8
  store i8 %44, i8* %37, align 2, !noalias !92
  %45 = trunc i32 %27 to i8
  store i8 %45, i8* %36, align 1, !noalias !92
  store i8 116, i8* %30, align 4, !noalias !92
  store i8 69, i8* %35, align 1, !noalias !92
  store i8 88, i8* %34, align 2, !noalias !92
  store i8 116, i8* %33, align 1, !noalias !92
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %29, i64 8) #6
  %46 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  store i32 1950701684, i32* %46, align 8, !alias.scope !92
  call void @cr_png_reset_crc(%struct.png_struct_def* nonnull %0) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* %30, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #6, !noalias !92
  %47 = zext i32 %26 to i64
  %48 = icmp eq i32 %26, 0
  br i1 %48, label %50, label %49

49:                                               ; preds = %32
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %8, i64 %47) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %8, i64 %47) #6
  br label %50

50:                                               ; preds = %32, %49
  %51 = icmp ne i64 %24, 0
  %52 = icmp ne i8* %2, null
  %53 = and i1 %51, %52
  br i1 %53, label %54, label %57

54:                                               ; preds = %50
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %2, i64 %24) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %2, i64 %24) #6
  br label %57

55:                                               ; preds = %23
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #6, !noalias !92
  %56 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %56) #6, !noalias !95
  store i32 -1431655766, i32* %5, align 4, !noalias !95
  br label %72

57:                                               ; preds = %50, %54
  %58 = bitcast i32* %5 to [4 x i8]*
  %59 = bitcast i32* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %59) #6, !noalias !95
  %60 = getelementptr inbounds [4 x i8], [4 x i8]* %58, i64 0, i64 3
  %61 = getelementptr inbounds [4 x i8], [4 x i8]* %58, i64 0, i64 2
  %62 = getelementptr inbounds [4 x i8], [4 x i8]* %58, i64 0, i64 1
  %63 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %64 = load i32, i32* %63, align 4, !alias.scope !95
  %65 = lshr i32 %64, 24
  %66 = trunc i32 %65 to i8
  store i8 %66, i8* %59, align 4, !noalias !95
  %67 = lshr i32 %64, 16
  %68 = trunc i32 %67 to i8
  store i8 %68, i8* %62, align 1, !noalias !95
  %69 = lshr i32 %64, 8
  %70 = trunc i32 %69 to i8
  store i8 %70, i8* %61, align 2, !noalias !95
  %71 = trunc i32 %64 to i8
  store i8 %71, i8* %60, align 1, !noalias !95
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %59, i64 4) #6
  br label %72

72:                                               ; preds = %55, %57
  %73 = phi i8* [ %56, %55 ], [ %59, %57 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %73) #6, !noalias !95
  call void @llvm.lifetime.end.p0i8(i64 80, i8* nonnull %8) #6
  ret void
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_write_zTXt(%struct.png_struct_def* noalias, i8*, i8*, i32) local_unnamed_addr #1 {
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca [81 x i8], align 16
  %8 = alloca %struct.compression_state, align 8
  %9 = getelementptr inbounds [81 x i8], [81 x i8]* %7, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 81, i8* nonnull %9) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 81, i1 false)
  %10 = bitcast %struct.compression_state* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1048, i8* nonnull %10) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 1048, i1 false)
  switch i32 %3, label %12 [
    i32 -1, label %11
    i32 0, label %13
  ]

11:                                               ; preds = %4
  tail call void @cr_png_write_tEXt(%struct.png_struct_def* %0, i8* %1, i8* %2, i64 undef)
  br label %109

12:                                               ; preds = %4
  tail call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.24, i64 0, i64 0)) #7
  unreachable

13:                                               ; preds = %4
  %14 = call i32 @cr_png_check_keyword(%struct.png_struct_def* %0, i8* %1, i8* nonnull %9) #6
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %13
  call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.25, i64 0, i64 0)) #7
  unreachable

17:                                               ; preds = %13
  %18 = add i32 %14, 1
  %19 = zext i32 %18 to i64
  %20 = getelementptr inbounds [81 x i8], [81 x i8]* %7, i64 0, i64 %19
  store i8 0, i8* %20, align 1
  %21 = add i32 %14, 2
  %22 = icmp eq i8* %2, null
  br i1 %22, label %25, label %23

23:                                               ; preds = %17
  %24 = call i64 @strlen(i8* nonnull %2) #8
  br label %25

25:                                               ; preds = %17, %23
  %26 = phi i64 [ %24, %23 ], [ 0, %17 ]
  %27 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %8, i64 0, i32 0
  store i8* %2, i8** %27, align 8
  %28 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %8, i64 0, i32 1
  store i64 %26, i64* %28, align 8
  %29 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %8, i64 0, i32 2
  store i32 0, i32* %29, align 8
  %30 = call fastcc i32 @png_text_compress(%struct.png_struct_def* %0, i32 2052348020, %struct.compression_state* nonnull %8, i32 %21)
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %35, label %32

32:                                               ; preds = %25
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 19, i32 6
  %34 = load i8*, i8** %33, align 8
  call void @cr_png_error(%struct.png_struct_def* %0, i8* %34) #7
  unreachable

35:                                               ; preds = %25
  %36 = load i32, i32* %29, align 8
  %37 = add i32 %36, %21
  %38 = bitcast i64* %5 to [8 x i8]*
  %39 = bitcast i64* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #6, !noalias !98
  %40 = getelementptr inbounds [8 x i8], [8 x i8]* %38, i64 0, i64 4
  %41 = icmp eq %struct.png_struct_def* %0, null
  store i64 -6148914691236517206, i64* %5, align 8, !noalias !98
  br i1 %41, label %42, label %43

42:                                               ; preds = %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #6, !noalias !98
  br label %61

43:                                               ; preds = %35
  %44 = getelementptr inbounds [8 x i8], [8 x i8]* %38, i64 0, i64 7
  %45 = getelementptr inbounds [8 x i8], [8 x i8]* %38, i64 0, i64 6
  %46 = getelementptr inbounds [8 x i8], [8 x i8]* %38, i64 0, i64 5
  %47 = getelementptr inbounds [8 x i8], [8 x i8]* %38, i64 0, i64 3
  %48 = getelementptr inbounds [8 x i8], [8 x i8]* %38, i64 0, i64 2
  %49 = getelementptr inbounds [8 x i8], [8 x i8]* %38, i64 0, i64 1
  %50 = lshr i32 %37, 24
  %51 = trunc i32 %50 to i8
  store i8 %51, i8* %39, align 8, !noalias !98
  %52 = lshr i32 %37, 16
  %53 = trunc i32 %52 to i8
  store i8 %53, i8* %49, align 1, !noalias !98
  %54 = lshr i32 %37, 8
  %55 = trunc i32 %54 to i8
  store i8 %55, i8* %48, align 2, !noalias !98
  %56 = trunc i32 %37 to i8
  store i8 %56, i8* %47, align 1, !noalias !98
  store i8 122, i8* %40, align 4, !noalias !98
  store i8 84, i8* %46, align 1, !noalias !98
  store i8 88, i8* %45, align 2, !noalias !98
  store i8 116, i8* %44, align 1, !noalias !98
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %39, i64 8) #6
  %57 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 44
  store i32 2052348020, i32* %57, align 8, !alias.scope !98
  call void @cr_png_reset_crc(%struct.png_struct_def* nonnull %0) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* %40, i64 4) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #6, !noalias !98
  %58 = zext i32 %21 to i64
  %59 = icmp eq i32 %21, 0
  br i1 %59, label %61, label %60

60:                                               ; preds = %43
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %9, i64 %58) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %9, i64 %58) #6
  br label %61

61:                                               ; preds = %43, %42, %60
  %62 = phi i1 [ false, %42 ], [ true, %43 ], [ true, %60 ]
  %63 = load i32, i32* %29, align 8, !noalias !101
  %64 = getelementptr inbounds %struct.compression_state, %struct.compression_state* %8, i64 0, i32 3, i64 0
  %65 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 20
  %66 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 21
  br label %67

67:                                               ; preds = %86, %61
  %68 = phi i32 [ %63, %61 ], [ %82, %86 ]
  %69 = phi i8* [ %64, %61 ], [ %88, %86 ]
  %70 = phi i32 [ 1024, %61 ], [ %87, %86 ]
  %71 = phi %struct.png_compression_buffer** [ %65, %61 ], [ %89, %86 ]
  %72 = load %struct.png_compression_buffer*, %struct.png_compression_buffer** %71, align 8
  %73 = icmp ugt i32 %70, %68
  %74 = select i1 %73, i32 %68, i32 %70
  %75 = zext i32 %74 to i64
  %76 = icmp ne i8* %69, null
  %77 = and i1 %62, %76
  %78 = icmp ne i32 %74, 0
  %79 = and i1 %77, %78
  br i1 %79, label %80, label %81

80:                                               ; preds = %67
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %69, i64 %75) #6
  call void @cr_png_calculate_crc(%struct.png_struct_def* nonnull %0, i8* nonnull %69, i64 %75) #6
  br label %81

81:                                               ; preds = %80, %67
  %82 = sub i32 %68, %74
  %83 = icmp eq i32 %82, 0
  %84 = icmp eq %struct.png_compression_buffer* %72, null
  %85 = or i1 %84, %83
  br i1 %85, label %90, label %86

86:                                               ; preds = %81
  %87 = load i32, i32* %66, align 8, !alias.scope !101
  %88 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %72, i64 0, i32 1, i64 0
  %89 = getelementptr inbounds %struct.png_compression_buffer, %struct.png_compression_buffer* %72, i64 0, i32 0
  br label %67

90:                                               ; preds = %81
  br i1 %83, label %92, label %91

91:                                               ; preds = %90
  call void @cr_png_error(%struct.png_struct_def* %0, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.32, i64 0, i64 0)) #7
  unreachable

92:                                               ; preds = %90
  %93 = bitcast i32* %6 to [4 x i8]*
  %94 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %94) #6, !noalias !104
  store i32 -1431655766, i32* %6, align 4, !noalias !104
  br i1 %41, label %108, label %95

95:                                               ; preds = %92
  %96 = getelementptr inbounds [4 x i8], [4 x i8]* %93, i64 0, i64 3
  %97 = getelementptr inbounds [4 x i8], [4 x i8]* %93, i64 0, i64 2
  %98 = getelementptr inbounds [4 x i8], [4 x i8]* %93, i64 0, i64 1
  %99 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 51
  %100 = load i32, i32* %99, align 4, !alias.scope !104
  %101 = lshr i32 %100, 24
  %102 = trunc i32 %101 to i8
  store i8 %102, i8* %94, align 4, !noalias !104
  %103 = lshr i32 %100, 16
  %104 = trunc i32 %103 to i8
  store i8 %104, i8* %98, align 1, !noalias !104
  %105 = lshr i32 %100, 8
  %106 = trunc i32 %105 to i8
  store i8 %106, i8* %97, align 2, !noalias !104
  %107 = trunc i32 %100 to i8
  store i8 %107, i8* %96, align 1, !noalias !104
  call void @cr_png_write_data(%struct.png_struct_def* nonnull %0, i8* nonnull %94, i64 4) #6
  br label %108

108:                                              ; preds = %92, %95
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %94) #6, !noalias !104
  br label %109

109:                                              ; preds = %108, %11
  call void @llvm.lifetime.end.p0i8(i64 1048, i8* nonnull %10) #6
  call void @llvm.lifetime.end.p0i8(i64 81, i8* nonnull %9) #6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_write_start_row(%struct.png_struct_def* noalias) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 65
  %3 = load i8, i8* %2, align 2
  %4 = zext i8 %3 to i32
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 62
  %6 = load i8, i8* %5, align 1
  %7 = zext i8 %6 to i32
  %8 = mul nuw nsw i32 %7, %4
  %9 = icmp ugt i32 %8, 7
  %10 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 37
  %11 = load i32, i32* %10, align 8
  %12 = zext i32 %11 to i64
  %13 = zext i32 %8 to i64
  br i1 %9, label %14, label %17

14:                                               ; preds = %1
  %15 = lshr i64 %13, 3
  %16 = mul nuw nsw i64 %15, %12
  br label %21

17:                                               ; preds = %1
  %18 = mul nuw nsw i64 %13, %12
  %19 = add nuw nsw i64 %18, 7
  %20 = lshr i64 %19, 3
  br label %21

21:                                               ; preds = %17, %14
  %22 = phi i64 [ %16, %14 ], [ %20, %17 ]
  %23 = add nuw nsw i64 %22, 1
  %24 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 63
  %25 = load i8, i8* %24, align 4
  %26 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 68
  store i8 %25, i8* %26, align 1
  %27 = trunc i32 %8 to i8
  %28 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 67
  store i8 %27, i8* %28, align 8
  %29 = tail call noalias i8* @cr_png_malloc(%struct.png_struct_def* %0, i64 %23) #6
  %30 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 46
  store i8* %29, i8** %30, align 8
  store i8 0, i8* %29, align 1
  %31 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 59
  %32 = load i8, i8* %31, align 8
  %33 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 38
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, 1
  %36 = and i8 %32, 31
  %37 = select i1 %35, i8 %36, i8 %32
  %38 = load i32, i32* %10, align 8
  %39 = icmp eq i32 %38, 1
  %40 = and i8 %37, 47
  %41 = select i1 %39, i8 %40, i8 %37
  %42 = icmp eq i8 %41, 0
  %43 = select i1 %42, i8 8, i8 %41
  store i8 %43, i8* %31, align 8
  %44 = zext i8 %43 to i32
  %45 = and i32 %44, 240
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %68, label %47

47:                                               ; preds = %21
  %48 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 47
  %49 = load i8*, i8** %48, align 8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %51, label %68

51:                                               ; preds = %47
  %52 = tail call noalias i8* @cr_png_malloc(%struct.png_struct_def* %0, i64 %23) #6
  store i8* %52, i8** %48, align 8
  %53 = lshr i32 %44, 4
  %54 = and i32 %53, 1
  %55 = lshr i32 %44, 5
  %56 = and i32 %55, 1
  %57 = lshr i32 %44, 6
  %58 = and i32 %57, 1
  %59 = lshr i8 %43, 7
  %60 = zext i8 %59 to i32
  %61 = add nuw nsw i32 %56, %60
  %62 = add nuw nsw i32 %61, %54
  %63 = add nuw nsw i32 %62, %58
  %64 = icmp ugt i32 %63, 1
  br i1 %64, label %65, label %68

65:                                               ; preds = %51
  %66 = tail call noalias i8* @cr_png_malloc(%struct.png_struct_def* %0, i64 %23) #6
  %67 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 48
  store i8* %66, i8** %67, align 8
  br label %68

68:                                               ; preds = %51, %65, %21, %47
  %69 = and i32 %44, 224
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %74, label %71

71:                                               ; preds = %68
  %72 = tail call noalias i8* @cr_png_calloc(%struct.png_struct_def* %0, i64 %23) #6
  %73 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  store i8* %72, i8** %73, align 8
  br label %74

74:                                               ; preds = %68, %71
  %75 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 57
  %76 = load i8, i8* %75, align 2
  %77 = icmp eq i8 %76, 0
  br i1 %77, label %94, label %78

78:                                               ; preds = %74
  %79 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 17
  %80 = load i32, i32* %79, align 4
  %81 = and i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = load i32, i32* %33, align 4
  br i1 %82, label %84, label %91

84:                                               ; preds = %78
  %85 = add i32 %83, 7
  %86 = lshr i32 %85, 3
  %87 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  store i32 %86, i32* %87, align 8
  %88 = load i32, i32* %10, align 8
  %89 = add i32 %88, 7
  %90 = lshr i32 %89, 3
  br label %98

91:                                               ; preds = %78
  %92 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  store i32 %83, i32* %92, align 8
  %93 = load i32, i32* %10, align 8
  br label %98

94:                                               ; preds = %74
  %95 = load i32, i32* %33, align 4
  %96 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  store i32 %95, i32* %96, align 8
  %97 = load i32, i32* %10, align 8
  br label %98

98:                                               ; preds = %84, %91, %94
  %99 = phi i32 [ %90, %84 ], [ %93, %91 ], [ %97, %94 ]
  %100 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 40
  store i32 %99, i32* %100, align 4
  ret void
}

declare noalias i8* @cr_png_calloc(%struct.png_struct_def*, i64) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_write_finish_row(%struct.png_struct_def* noalias) local_unnamed_addr #1 {
  %2 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 43
  %3 = load i32, i32* %2, align 4
  %4 = add i32 %3, 1
  store i32 %4, i32* %2, align 4
  %5 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 39
  %6 = load i32, i32* %5, align 8
  %7 = icmp ult i32 %4, %6
  br i1 %7, label %88, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 57
  %10 = load i8, i8* %9, align 2
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %87, label %12

12:                                               ; preds = %8
  store i32 0, i32* %2, align 4
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 17
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 58
  br i1 %16, label %18, label %56

18:                                               ; preds = %12
  %19 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 37
  %20 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 40
  %21 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 38
  %22 = load i8, i8* %17, align 1
  br label %23

23:                                               ; preds = %18, %28
  %24 = phi i8 [ %22, %18 ], [ %25, %28 ]
  %25 = add i8 %24, 1
  %26 = icmp ugt i8 %25, 6
  br i1 %26, label %27, label %28

27:                                               ; preds = %23
  store i8 %25, i8* %17, align 1
  br label %87

28:                                               ; preds = %23
  %29 = load i32, i32* %19, align 8
  %30 = zext i8 %25 to i64
  %31 = getelementptr inbounds [7 x i8], [7 x i8]* @cr_png_do_write_interlace.png_pass_inc, i64 0, i64 %30
  %32 = load i8, i8* %31, align 1
  %33 = zext i8 %32 to i32
  %34 = add i32 %29, %33
  %35 = getelementptr inbounds [7 x i8], [7 x i8]* @cr_png_do_write_interlace.png_pass_start, i64 0, i64 %30
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i32
  %38 = xor i32 %37, -1
  %39 = add i32 %34, %38
  %40 = udiv i32 %39, %33
  store i32 %40, i32* %20, align 4
  %41 = load i32, i32* %21, align 4
  %42 = getelementptr inbounds [7 x i8], [7 x i8]* @cr_png_write_finish_row.png_pass_yinc, i64 0, i64 %30
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = add i32 %41, %44
  %46 = getelementptr inbounds [7 x i8], [7 x i8]* @cr_png_write_finish_row.png_pass_ystart, i64 0, i64 %30
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i32
  %49 = xor i32 %48, -1
  %50 = add i32 %45, %49
  %51 = udiv i32 %50, %44
  store i32 %51, i32* %5, align 8
  %52 = icmp ult i32 %39, %33
  %53 = icmp ult i32 %50, %44
  %54 = or i1 %52, %53
  br i1 %54, label %23, label %55

55:                                               ; preds = %28
  store i8 %25, i8* %17, align 1
  br label %60

56:                                               ; preds = %12
  %57 = load i8, i8* %17, align 1
  %58 = add i8 %57, 1
  store i8 %58, i8* %17, align 1
  %59 = icmp ult i8 %58, 7
  br i1 %59, label %60, label %87

60:                                               ; preds = %55, %56
  %61 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  %62 = load i8*, i8** %61, align 8
  %63 = icmp eq i8* %62, null
  br i1 %63, label %88, label %64

64:                                               ; preds = %60
  %65 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 65
  %66 = load i8, i8* %65, align 2
  %67 = zext i8 %66 to i32
  %68 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 62
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i32
  %71 = mul nuw nsw i32 %70, %67
  %72 = icmp ugt i32 %71, 7
  %73 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 37
  %74 = load i32, i32* %73, align 8
  %75 = zext i32 %74 to i64
  %76 = zext i32 %71 to i64
  br i1 %72, label %77, label %80

77:                                               ; preds = %64
  %78 = lshr i64 %76, 3
  %79 = mul nuw nsw i64 %78, %75
  br label %84

80:                                               ; preds = %64
  %81 = mul nuw nsw i64 %76, %75
  %82 = add nuw nsw i64 %81, 7
  %83 = lshr i64 %82, 3
  br label %84

84:                                               ; preds = %80, %77
  %85 = phi i64 [ %79, %77 ], [ %83, %80 ]
  %86 = add nuw nsw i64 %85, 1
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %62, i8 0, i64 %86, i1 false)
  br label %88

87:                                               ; preds = %27, %8, %56
  tail call void @cr_png_compress_IDAT(%struct.png_struct_def* %0, i8* null, i64 0, i32 4)
  br label %88

88:                                               ; preds = %60, %84, %1, %87
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_do_write_interlace(%struct.png_row_info_struct* nocapture, i8*, i32) local_unnamed_addr #1 {
  %4 = icmp slt i32 %2, 6
  br i1 %4, label %5, label %194

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 5
  %7 = load i8, i8* %6, align 1
  switch i8 %7, label %142 [
    i8 1, label %8
    i8 2, label %52
    i8 4, label %97
  ]

8:                                                ; preds = %5
  %9 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = sext i32 %2 to i64
  %12 = getelementptr inbounds [7 x i8], [7 x i8]* @cr_png_do_write_interlace.png_pass_start, i64 0, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = icmp ugt i32 %10, %14
  br i1 %15, label %16, label %168

16:                                               ; preds = %8
  %17 = getelementptr inbounds [7 x i8], [7 x i8]* @cr_png_do_write_interlace.png_pass_inc, i64 0, i64 %11
  %18 = load i8, i8* %17, align 1
  %19 = zext i8 %18 to i32
  br label %20

20:                                               ; preds = %16, %42
  %21 = phi i32 [ %14, %16 ], [ %46, %42 ]
  %22 = phi i32 [ 0, %16 ], [ %45, %42 ]
  %23 = phi i32 [ 7, %16 ], [ %44, %42 ]
  %24 = phi i8* [ %1, %16 ], [ %43, %42 ]
  %25 = lshr i32 %21, 3
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %1, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = zext i8 %28 to i32
  %30 = and i32 %21, 7
  %31 = xor i32 %30, 7
  %32 = lshr i32 %29, %31
  %33 = and i32 %32, 1
  %34 = shl i32 %33, %23
  %35 = or i32 %34, %22
  %36 = icmp eq i32 %23, 0
  br i1 %36, label %37, label %40

37:                                               ; preds = %20
  %38 = trunc i32 %35 to i8
  %39 = getelementptr inbounds i8, i8* %24, i64 1
  store i8 %38, i8* %24, align 1
  br label %42

40:                                               ; preds = %20
  %41 = add i32 %23, -1
  br label %42

42:                                               ; preds = %37, %40
  %43 = phi i8* [ %39, %37 ], [ %24, %40 ]
  %44 = phi i32 [ 7, %37 ], [ %41, %40 ]
  %45 = phi i32 [ 0, %37 ], [ %35, %40 ]
  %46 = add i32 %21, %19
  %47 = icmp ult i32 %46, %10
  br i1 %47, label %20, label %48

48:                                               ; preds = %42
  %49 = icmp eq i32 %44, 7
  br i1 %49, label %168, label %50

50:                                               ; preds = %48
  %51 = trunc i32 %45 to i8
  store i8 %51, i8* %43, align 1
  br label %168

52:                                               ; preds = %5
  %53 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 0
  %54 = load i32, i32* %53, align 8
  %55 = sext i32 %2 to i64
  %56 = getelementptr inbounds [7 x i8], [7 x i8]* @cr_png_do_write_interlace.png_pass_start, i64 0, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i32
  %59 = icmp ugt i32 %54, %58
  br i1 %59, label %60, label %168

60:                                               ; preds = %52
  %61 = getelementptr inbounds [7 x i8], [7 x i8]* @cr_png_do_write_interlace.png_pass_inc, i64 0, i64 %55
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i32
  br label %64

64:                                               ; preds = %60, %87
  %65 = phi i32 [ %58, %60 ], [ %91, %87 ]
  %66 = phi i32 [ 0, %60 ], [ %90, %87 ]
  %67 = phi i32 [ 6, %60 ], [ %89, %87 ]
  %68 = phi i8* [ %1, %60 ], [ %88, %87 ]
  %69 = lshr i32 %65, 2
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds i8, i8* %1, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i32
  %74 = shl i32 %65, 1
  %75 = and i32 %74, 6
  %76 = xor i32 %75, 6
  %77 = lshr i32 %73, %76
  %78 = and i32 %77, 3
  %79 = shl i32 %78, %67
  %80 = or i32 %79, %66
  %81 = icmp eq i32 %67, 0
  br i1 %81, label %82, label %85

82:                                               ; preds = %64
  %83 = trunc i32 %80 to i8
  %84 = getelementptr inbounds i8, i8* %68, i64 1
  store i8 %83, i8* %68, align 1
  br label %87

85:                                               ; preds = %64
  %86 = add i32 %67, -2
  br label %87

87:                                               ; preds = %82, %85
  %88 = phi i8* [ %84, %82 ], [ %68, %85 ]
  %89 = phi i32 [ 6, %82 ], [ %86, %85 ]
  %90 = phi i32 [ 0, %82 ], [ %80, %85 ]
  %91 = add i32 %65, %63
  %92 = icmp ult i32 %91, %54
  br i1 %92, label %64, label %93

93:                                               ; preds = %87
  %94 = icmp eq i32 %89, 6
  br i1 %94, label %168, label %95

95:                                               ; preds = %93
  %96 = trunc i32 %90 to i8
  store i8 %96, i8* %88, align 1
  br label %168

97:                                               ; preds = %5
  %98 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 0
  %99 = load i32, i32* %98, align 8
  %100 = sext i32 %2 to i64
  %101 = getelementptr inbounds [7 x i8], [7 x i8]* @cr_png_do_write_interlace.png_pass_start, i64 0, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = zext i8 %102 to i32
  %104 = icmp ugt i32 %99, %103
  br i1 %104, label %105, label %168

105:                                              ; preds = %97
  %106 = getelementptr inbounds [7 x i8], [7 x i8]* @cr_png_do_write_interlace.png_pass_inc, i64 0, i64 %100
  %107 = load i8, i8* %106, align 1
  %108 = zext i8 %107 to i32
  br label %109

109:                                              ; preds = %105, %132
  %110 = phi i32 [ %103, %105 ], [ %136, %132 ]
  %111 = phi i32 [ 0, %105 ], [ %135, %132 ]
  %112 = phi i32 [ 4, %105 ], [ %134, %132 ]
  %113 = phi i8* [ %1, %105 ], [ %133, %132 ]
  %114 = lshr i32 %110, 1
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds i8, i8* %1, i64 %115
  %117 = load i8, i8* %116, align 1
  %118 = zext i8 %117 to i32
  %119 = shl i32 %110, 2
  %120 = and i32 %119, 4
  %121 = xor i32 %120, 4
  %122 = lshr i32 %118, %121
  %123 = and i32 %122, 15
  %124 = shl i32 %123, %112
  %125 = or i32 %124, %111
  %126 = icmp eq i32 %112, 0
  br i1 %126, label %127, label %130

127:                                              ; preds = %109
  %128 = trunc i32 %125 to i8
  %129 = getelementptr inbounds i8, i8* %113, i64 1
  store i8 %128, i8* %113, align 1
  br label %132

130:                                              ; preds = %109
  %131 = add i32 %112, -4
  br label %132

132:                                              ; preds = %127, %130
  %133 = phi i8* [ %129, %127 ], [ %113, %130 ]
  %134 = phi i32 [ 4, %127 ], [ %131, %130 ]
  %135 = phi i32 [ 0, %127 ], [ %125, %130 ]
  %136 = add i32 %110, %108
  %137 = icmp ult i32 %136, %99
  br i1 %137, label %109, label %138

138:                                              ; preds = %132
  %139 = icmp eq i32 %134, 4
  br i1 %139, label %168, label %140

140:                                              ; preds = %138
  %141 = trunc i32 %135 to i8
  store i8 %141, i8* %133, align 1
  br label %168

142:                                              ; preds = %5
  %143 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 0
  %144 = load i32, i32* %143, align 8
  %145 = lshr i8 %7, 3
  %146 = zext i8 %145 to i64
  %147 = sext i32 %2 to i64
  %148 = getelementptr inbounds [7 x i8], [7 x i8]* @cr_png_do_write_interlace.png_pass_start, i64 0, i64 %147
  %149 = load i8, i8* %148, align 1
  %150 = zext i8 %149 to i32
  %151 = icmp ugt i32 %144, %150
  br i1 %151, label %152, label %168

152:                                              ; preds = %142
  %153 = getelementptr inbounds [7 x i8], [7 x i8]* @cr_png_do_write_interlace.png_pass_inc, i64 0, i64 %147
  %154 = load i8, i8* %153, align 1
  %155 = zext i8 %154 to i32
  br label %156

156:                                              ; preds = %152, %164
  %157 = phi i32 [ %150, %152 ], [ %166, %164 ]
  %158 = phi i8* [ %1, %152 ], [ %165, %164 ]
  %159 = zext i32 %157 to i64
  %160 = mul nuw nsw i64 %159, %146
  %161 = getelementptr inbounds i8, i8* %1, i64 %160
  %162 = icmp eq i8* %158, %161
  br i1 %162, label %164, label %163

163:                                              ; preds = %156
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %158, i8* align 1 %161, i64 %146, i1 false)
  br label %164

164:                                              ; preds = %156, %163
  %165 = getelementptr inbounds i8, i8* %158, i64 %146
  %166 = add i32 %157, %155
  %167 = icmp ult i32 %166, %144
  br i1 %167, label %156, label %168

168:                                              ; preds = %164, %97, %52, %8, %142, %140, %138, %95, %93, %50, %48
  %169 = phi i32 [ %150, %142 ], [ %103, %140 ], [ %103, %138 ], [ %58, %95 ], [ %58, %93 ], [ %14, %50 ], [ %14, %48 ], [ %14, %8 ], [ %58, %52 ], [ %103, %97 ], [ %150, %164 ]
  %170 = phi i64 [ %147, %142 ], [ %100, %140 ], [ %100, %138 ], [ %55, %95 ], [ %55, %93 ], [ %11, %50 ], [ %11, %48 ], [ %11, %8 ], [ %55, %52 ], [ %100, %97 ], [ %147, %164 ]
  %171 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 0
  %172 = load i32, i32* %171, align 8
  %173 = getelementptr inbounds [7 x i8], [7 x i8]* @cr_png_do_write_interlace.png_pass_inc, i64 0, i64 %170
  %174 = load i8, i8* %173, align 1
  %175 = zext i8 %174 to i32
  %176 = add i32 %172, %175
  %177 = xor i32 %169, -1
  %178 = add i32 %176, %177
  %179 = udiv i32 %178, %175
  store i32 %179, i32* %171, align 8
  %180 = load i8, i8* %6, align 1
  %181 = icmp ugt i8 %180, 7
  %182 = zext i32 %179 to i64
  %183 = zext i8 %180 to i64
  br i1 %181, label %184, label %187

184:                                              ; preds = %168
  %185 = lshr i64 %183, 3
  %186 = mul nuw nsw i64 %185, %182
  br label %191

187:                                              ; preds = %168
  %188 = mul nuw nsw i64 %183, %182
  %189 = add nuw nsw i64 %188, 7
  %190 = lshr i64 %189, 3
  br label %191

191:                                              ; preds = %187, %184
  %192 = phi i64 [ %186, %184 ], [ %190, %187 ]
  %193 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %0, i64 0, i32 1
  store i64 %192, i64* %193, align 8
  br label %194

194:                                              ; preds = %191, %3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @cr_png_write_find_filter(%struct.png_struct_def* noalias, %struct.png_row_info_struct* nocapture readonly) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 59
  %4 = load i8, i8* %3, align 8
  %5 = zext i8 %4 to i32
  %6 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i64 0, i32 1
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %struct.png_row_info_struct, %struct.png_row_info_struct* %1, i64 0, i32 5
  %9 = load i8, i8* %8, align 1
  %10 = zext i8 %9 to i32
  %11 = add nuw nsw i32 %10, 7
  %12 = lshr i32 %11, 3
  %13 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 46
  %14 = load i8*, i8** %13, align 8
  %15 = icmp ugt i64 %7, 144115188075855870
  br i1 %15, label %16, label %19

16:                                               ; preds = %2
  %17 = sub nsw i32 0, %5
  %18 = and i32 %5, %17
  br label %89

19:                                               ; preds = %2
  %20 = and i32 %5, 8
  %21 = icmp ne i32 %20, 0
  %22 = icmp ne i8 %4, 8
  %23 = and i1 %22, %21
  br i1 %23, label %24, label %89

24:                                               ; preds = %19
  %25 = icmp eq i64 %7, 0
  br i1 %25, label %89, label %26

26:                                               ; preds = %24
  %27 = add i64 %7, -1
  %28 = and i64 %7, 3
  %29 = icmp ult i64 %27, 3
  br i1 %29, label %70, label %30

30:                                               ; preds = %26
  %31 = sub i64 %7, %28
  br label %32

32:                                               ; preds = %32, %30
  %33 = phi i8* [ %14, %30 ], [ %60, %32 ]
  %34 = phi i64 [ 0, %30 ], [ %67, %32 ]
  %35 = phi i64 [ %31, %30 ], [ %68, %32 ]
  %36 = getelementptr inbounds i8, i8* %33, i64 1
  %37 = load i8, i8* %36, align 1
  %38 = zext i8 %37 to i32
  %39 = icmp sgt i8 %37, -1
  %40 = sub nuw nsw i32 256, %38
  %41 = select i1 %39, i32 %38, i32 %40
  %42 = zext i32 %41 to i64
  %43 = add i64 %34, %42
  %44 = getelementptr inbounds i8, i8* %33, i64 2
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = icmp sgt i8 %45, -1
  %48 = sub nuw nsw i32 256, %46
  %49 = select i1 %47, i32 %46, i32 %48
  %50 = zext i32 %49 to i64
  %51 = add i64 %43, %50
  %52 = getelementptr inbounds i8, i8* %33, i64 3
  %53 = load i8, i8* %52, align 1
  %54 = zext i8 %53 to i32
  %55 = icmp sgt i8 %53, -1
  %56 = sub nuw nsw i32 256, %54
  %57 = select i1 %55, i32 %54, i32 %56
  %58 = zext i32 %57 to i64
  %59 = add i64 %51, %58
  %60 = getelementptr inbounds i8, i8* %33, i64 4
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = icmp sgt i8 %61, -1
  %64 = sub nuw nsw i32 256, %62
  %65 = select i1 %63, i32 %62, i32 %64
  %66 = zext i32 %65 to i64
  %67 = add i64 %59, %66
  %68 = add i64 %35, -4
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %70, label %32

70:                                               ; preds = %32, %26
  %71 = phi i64 [ undef, %26 ], [ %67, %32 ]
  %72 = phi i8* [ %14, %26 ], [ %60, %32 ]
  %73 = phi i64 [ 0, %26 ], [ %67, %32 ]
  %74 = icmp eq i64 %28, 0
  br i1 %74, label %89, label %75

75:                                               ; preds = %70, %75
  %76 = phi i8* [ %79, %75 ], [ %72, %70 ]
  %77 = phi i64 [ %86, %75 ], [ %73, %70 ]
  %78 = phi i64 [ %87, %75 ], [ %28, %70 ]
  %79 = getelementptr inbounds i8, i8* %76, i64 1
  %80 = load i8, i8* %79, align 1
  %81 = zext i8 %80 to i32
  %82 = icmp sgt i8 %80, -1
  %83 = sub nuw nsw i32 256, %81
  %84 = select i1 %82, i32 %81, i32 %83
  %85 = zext i32 %84 to i64
  %86 = add i64 %77, %85
  %87 = add i64 %78, -1
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %75, !llvm.loop !107

89:                                               ; preds = %70, %75, %24, %19, %16
  %90 = phi i64 [ -257, %16 ], [ -257, %19 ], [ 0, %24 ], [ %71, %70 ], [ %86, %75 ]
  %91 = phi i32 [ %18, %16 ], [ %5, %19 ], [ %5, %24 ], [ %5, %75 ], [ %5, %70 ]
  %92 = icmp eq i32 %91, 16
  br i1 %92, label %93, label %414

93:                                               ; preds = %89
  %94 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 47
  %95 = load i8*, i8** %94, align 8, !alias.scope !109
  store i8 1, i8* %95, align 1, !noalias !109
  %96 = getelementptr inbounds i8, i8* %95, i64 1
  %97 = getelementptr inbounds i8, i8* %14, i64 1
  %98 = zext i32 %12 to i64
  %99 = icmp eq i32 %12, 0
  br i1 %99, label %246, label %100

100:                                              ; preds = %93
  %101 = icmp ult i32 %11, 256
  br i1 %101, label %190, label %102

102:                                              ; preds = %100
  %103 = add nuw nsw i64 %98, 1
  %104 = getelementptr i8, i8* %95, i64 %103
  %105 = getelementptr i8, i8* %14, i64 %103
  %106 = icmp ult i8* %96, %105
  %107 = icmp ult i8* %97, %104
  %108 = and i1 %106, %107
  br i1 %108, label %190, label %109

109:                                              ; preds = %102
  %110 = and i64 %98, 32
  %111 = getelementptr i8, i8* %97, i64 %110
  %112 = getelementptr i8, i8* %96, i64 %110
  %113 = add nsw i64 %110, -32
  %114 = lshr exact i64 %113, 5
  %115 = add nuw nsw i64 %114, 1
  %116 = and i64 %115, 3
  %117 = icmp ult i64 %113, 96
  br i1 %117, label %169, label %118

118:                                              ; preds = %109
  %119 = sub nsw i64 %115, %116
  br label %120

120:                                              ; preds = %120, %118
  %121 = phi i64 [ 0, %118 ], [ %166, %120 ]
  %122 = phi i64 [ %119, %118 ], [ %167, %120 ]
  %123 = getelementptr i8, i8* %97, i64 %121
  %124 = getelementptr i8, i8* %96, i64 %121
  %125 = bitcast i8* %123 to <16 x i8>*
  %126 = load <16 x i8>, <16 x i8>* %125, align 1, !alias.scope !112, !noalias !109
  %127 = getelementptr i8, i8* %123, i64 16
  %128 = bitcast i8* %127 to <16 x i8>*
  %129 = load <16 x i8>, <16 x i8>* %128, align 1, !alias.scope !112, !noalias !109
  %130 = bitcast i8* %124 to <16 x i8>*
  store <16 x i8> %126, <16 x i8>* %130, align 1, !alias.scope !115, !noalias !117
  %131 = getelementptr i8, i8* %124, i64 16
  %132 = bitcast i8* %131 to <16 x i8>*
  store <16 x i8> %129, <16 x i8>* %132, align 1, !alias.scope !115, !noalias !117
  %133 = or i64 %121, 32
  %134 = getelementptr i8, i8* %97, i64 %133
  %135 = getelementptr i8, i8* %96, i64 %133
  %136 = bitcast i8* %134 to <16 x i8>*
  %137 = load <16 x i8>, <16 x i8>* %136, align 1, !alias.scope !112, !noalias !109
  %138 = getelementptr i8, i8* %134, i64 16
  %139 = bitcast i8* %138 to <16 x i8>*
  %140 = load <16 x i8>, <16 x i8>* %139, align 1, !alias.scope !112, !noalias !109
  %141 = bitcast i8* %135 to <16 x i8>*
  store <16 x i8> %137, <16 x i8>* %141, align 1, !alias.scope !115, !noalias !117
  %142 = getelementptr i8, i8* %135, i64 16
  %143 = bitcast i8* %142 to <16 x i8>*
  store <16 x i8> %140, <16 x i8>* %143, align 1, !alias.scope !115, !noalias !117
  %144 = or i64 %121, 64
  %145 = getelementptr i8, i8* %97, i64 %144
  %146 = getelementptr i8, i8* %96, i64 %144
  %147 = bitcast i8* %145 to <16 x i8>*
  %148 = load <16 x i8>, <16 x i8>* %147, align 1, !alias.scope !112, !noalias !109
  %149 = getelementptr i8, i8* %145, i64 16
  %150 = bitcast i8* %149 to <16 x i8>*
  %151 = load <16 x i8>, <16 x i8>* %150, align 1, !alias.scope !112, !noalias !109
  %152 = bitcast i8* %146 to <16 x i8>*
  store <16 x i8> %148, <16 x i8>* %152, align 1, !alias.scope !115, !noalias !117
  %153 = getelementptr i8, i8* %146, i64 16
  %154 = bitcast i8* %153 to <16 x i8>*
  store <16 x i8> %151, <16 x i8>* %154, align 1, !alias.scope !115, !noalias !117
  %155 = or i64 %121, 96
  %156 = getelementptr i8, i8* %97, i64 %155
  %157 = getelementptr i8, i8* %96, i64 %155
  %158 = bitcast i8* %156 to <16 x i8>*
  %159 = load <16 x i8>, <16 x i8>* %158, align 1, !alias.scope !112, !noalias !109
  %160 = getelementptr i8, i8* %156, i64 16
  %161 = bitcast i8* %160 to <16 x i8>*
  %162 = load <16 x i8>, <16 x i8>* %161, align 1, !alias.scope !112, !noalias !109
  %163 = bitcast i8* %157 to <16 x i8>*
  store <16 x i8> %159, <16 x i8>* %163, align 1, !alias.scope !115, !noalias !117
  %164 = getelementptr i8, i8* %157, i64 16
  %165 = bitcast i8* %164 to <16 x i8>*
  store <16 x i8> %162, <16 x i8>* %165, align 1, !alias.scope !115, !noalias !117
  %166 = add i64 %121, 128
  %167 = add i64 %122, -4
  %168 = icmp eq i64 %167, 0
  br i1 %168, label %169, label %120, !llvm.loop !118

169:                                              ; preds = %120, %109
  %170 = phi i64 [ 0, %109 ], [ %166, %120 ]
  %171 = icmp eq i64 %116, 0
  br i1 %171, label %188, label %172

172:                                              ; preds = %169, %172
  %173 = phi i64 [ %185, %172 ], [ %170, %169 ]
  %174 = phi i64 [ %186, %172 ], [ %116, %169 ]
  %175 = getelementptr i8, i8* %97, i64 %173
  %176 = getelementptr i8, i8* %96, i64 %173
  %177 = bitcast i8* %175 to <16 x i8>*
  %178 = load <16 x i8>, <16 x i8>* %177, align 1, !alias.scope !112, !noalias !109
  %179 = getelementptr i8, i8* %175, i64 16
  %180 = bitcast i8* %179 to <16 x i8>*
  %181 = load <16 x i8>, <16 x i8>* %180, align 1, !alias.scope !112, !noalias !109
  %182 = bitcast i8* %176 to <16 x i8>*
  store <16 x i8> %178, <16 x i8>* %182, align 1, !alias.scope !115, !noalias !117
  %183 = getelementptr i8, i8* %176, i64 16
  %184 = bitcast i8* %183 to <16 x i8>*
  store <16 x i8> %181, <16 x i8>* %184, align 1, !alias.scope !115, !noalias !117
  %185 = add i64 %173, 32
  %186 = add i64 %174, -1
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %188, label %172, !llvm.loop !120

188:                                              ; preds = %172, %169
  %189 = icmp eq i64 %110, %98
  br i1 %189, label %246, label %190

190:                                              ; preds = %188, %102, %100
  %191 = phi i8* [ %97, %102 ], [ %97, %100 ], [ %111, %188 ]
  %192 = phi i8* [ %96, %102 ], [ %96, %100 ], [ %112, %188 ]
  %193 = phi i64 [ 0, %102 ], [ 0, %100 ], [ %110, %188 ]
  %194 = xor i64 %193, -1
  %195 = add nsw i64 %194, %98
  %196 = and i64 %98, 7
  %197 = icmp eq i64 %196, 0
  br i1 %197, label %209, label %198

198:                                              ; preds = %190, %198
  %199 = phi i8* [ %206, %198 ], [ %191, %190 ]
  %200 = phi i8* [ %205, %198 ], [ %192, %190 ]
  %201 = phi i64 [ %204, %198 ], [ %193, %190 ]
  %202 = phi i64 [ %207, %198 ], [ %196, %190 ]
  %203 = load i8, i8* %199, align 1, !noalias !109
  store i8 %203, i8* %200, align 1, !noalias !109
  %204 = add nuw nsw i64 %201, 1
  %205 = getelementptr inbounds i8, i8* %200, i64 1
  %206 = getelementptr inbounds i8, i8* %199, i64 1
  %207 = add i64 %202, -1
  %208 = icmp eq i64 %207, 0
  br i1 %208, label %209, label %198, !llvm.loop !121

209:                                              ; preds = %198, %190
  %210 = phi i8* [ undef, %190 ], [ %205, %198 ]
  %211 = phi i8* [ undef, %190 ], [ %206, %198 ]
  %212 = phi i8* [ %191, %190 ], [ %206, %198 ]
  %213 = phi i8* [ %192, %190 ], [ %205, %198 ]
  %214 = phi i64 [ %193, %190 ], [ %204, %198 ]
  %215 = icmp ult i64 %195, 7
  br i1 %215, label %246, label %216

216:                                              ; preds = %209, %216
  %217 = phi i8* [ %244, %216 ], [ %212, %209 ]
  %218 = phi i8* [ %243, %216 ], [ %213, %209 ]
  %219 = phi i64 [ %242, %216 ], [ %214, %209 ]
  %220 = load i8, i8* %217, align 1, !noalias !109
  store i8 %220, i8* %218, align 1, !noalias !109
  %221 = getelementptr inbounds i8, i8* %218, i64 1
  %222 = getelementptr inbounds i8, i8* %217, i64 1
  %223 = load i8, i8* %222, align 1, !noalias !109
  store i8 %223, i8* %221, align 1, !noalias !109
  %224 = getelementptr inbounds i8, i8* %218, i64 2
  %225 = getelementptr inbounds i8, i8* %217, i64 2
  %226 = load i8, i8* %225, align 1, !noalias !109
  store i8 %226, i8* %224, align 1, !noalias !109
  %227 = getelementptr inbounds i8, i8* %218, i64 3
  %228 = getelementptr inbounds i8, i8* %217, i64 3
  %229 = load i8, i8* %228, align 1, !noalias !109
  store i8 %229, i8* %227, align 1, !noalias !109
  %230 = getelementptr inbounds i8, i8* %218, i64 4
  %231 = getelementptr inbounds i8, i8* %217, i64 4
  %232 = load i8, i8* %231, align 1, !noalias !109
  store i8 %232, i8* %230, align 1, !noalias !109
  %233 = getelementptr inbounds i8, i8* %218, i64 5
  %234 = getelementptr inbounds i8, i8* %217, i64 5
  %235 = load i8, i8* %234, align 1, !noalias !109
  store i8 %235, i8* %233, align 1, !noalias !109
  %236 = getelementptr inbounds i8, i8* %218, i64 6
  %237 = getelementptr inbounds i8, i8* %217, i64 6
  %238 = load i8, i8* %237, align 1, !noalias !109
  store i8 %238, i8* %236, align 1, !noalias !109
  %239 = getelementptr inbounds i8, i8* %218, i64 7
  %240 = getelementptr inbounds i8, i8* %217, i64 7
  %241 = load i8, i8* %240, align 1, !noalias !109
  store i8 %241, i8* %239, align 1, !noalias !109
  %242 = add nuw nsw i64 %219, 8
  %243 = getelementptr inbounds i8, i8* %218, i64 8
  %244 = getelementptr inbounds i8, i8* %217, i64 8
  %245 = icmp eq i64 %242, %98
  br i1 %245, label %246, label %216, !llvm.loop !122

246:                                              ; preds = %209, %216, %188, %93
  %247 = phi i8* [ %96, %93 ], [ %112, %188 ], [ %210, %209 ], [ %243, %216 ]
  %248 = phi i8* [ %97, %93 ], [ %111, %188 ], [ %211, %209 ], [ %244, %216 ]
  %249 = icmp ugt i64 %7, %98
  br i1 %249, label %250, label %412

250:                                              ; preds = %246
  %251 = sub i64 %7, %98
  %252 = icmp ult i64 %251, 32
  br i1 %252, label %350, label %253

253:                                              ; preds = %250
  %254 = sub i64 %7, %98
  %255 = getelementptr i8, i8* %247, i64 %254
  %256 = add i64 %7, 1
  %257 = sub i64 %256, %98
  %258 = getelementptr i8, i8* %14, i64 %257
  %259 = getelementptr i8, i8* %248, i64 %254
  %260 = icmp ult i8* %247, %258
  %261 = icmp ult i8* %97, %255
  %262 = and i1 %260, %261
  %263 = icmp ult i8* %247, %259
  %264 = icmp ult i8* %248, %255
  %265 = and i1 %263, %264
  %266 = or i1 %262, %265
  br i1 %266, label %350, label %267

267:                                              ; preds = %253
  %268 = and i64 %251, -32
  %269 = getelementptr i8, i8* %14, i64 %268
  %270 = add i64 %268, %98
  %271 = getelementptr i8, i8* %247, i64 %268
  %272 = getelementptr i8, i8* %248, i64 %268
  %273 = add i64 %268, -32
  %274 = lshr exact i64 %273, 5
  %275 = add nuw nsw i64 %274, 1
  %276 = and i64 %275, 1
  %277 = icmp eq i64 %273, 0
  br i1 %277, label %325, label %278

278:                                              ; preds = %267
  %279 = sub nuw nsw i64 %275, %276
  %280 = getelementptr i8, i8* %14, i64 1
  %281 = getelementptr i8, i8* %14, i64 1
  br label %282

282:                                              ; preds = %282, %278
  %283 = phi i64 [ 0, %278 ], [ %322, %282 ]
  %284 = phi i64 [ %279, %278 ], [ %323, %282 ]
  %285 = getelementptr i8, i8* %247, i64 %283
  %286 = getelementptr i8, i8* %248, i64 %283
  %287 = getelementptr inbounds i8, i8* %280, i64 %283
  %288 = bitcast i8* %286 to <16 x i8>*
  %289 = load <16 x i8>, <16 x i8>* %288, align 1, !alias.scope !123, !noalias !109
  %290 = getelementptr i8, i8* %286, i64 16
  %291 = bitcast i8* %290 to <16 x i8>*
  %292 = load <16 x i8>, <16 x i8>* %291, align 1, !alias.scope !123, !noalias !109
  %293 = bitcast i8* %287 to <16 x i8>*
  %294 = load <16 x i8>, <16 x i8>* %293, align 1, !alias.scope !126, !noalias !109
  %295 = getelementptr inbounds i8, i8* %287, i64 16
  %296 = bitcast i8* %295 to <16 x i8>*
  %297 = load <16 x i8>, <16 x i8>* %296, align 1, !alias.scope !126, !noalias !109
  %298 = sub <16 x i8> %289, %294
  %299 = sub <16 x i8> %292, %297
  %300 = bitcast i8* %285 to <16 x i8>*
  store <16 x i8> %298, <16 x i8>* %300, align 1, !alias.scope !128, !noalias !130
  %301 = getelementptr i8, i8* %285, i64 16
  %302 = bitcast i8* %301 to <16 x i8>*
  store <16 x i8> %299, <16 x i8>* %302, align 1, !alias.scope !128, !noalias !130
  %303 = or i64 %283, 32
  %304 = getelementptr i8, i8* %247, i64 %303
  %305 = getelementptr i8, i8* %248, i64 %303
  %306 = getelementptr inbounds i8, i8* %281, i64 %303
  %307 = bitcast i8* %305 to <16 x i8>*
  %308 = load <16 x i8>, <16 x i8>* %307, align 1, !alias.scope !123, !noalias !109
  %309 = getelementptr i8, i8* %305, i64 16
  %310 = bitcast i8* %309 to <16 x i8>*
  %311 = load <16 x i8>, <16 x i8>* %310, align 1, !alias.scope !123, !noalias !109
  %312 = bitcast i8* %306 to <16 x i8>*
  %313 = load <16 x i8>, <16 x i8>* %312, align 1, !alias.scope !126, !noalias !109
  %314 = getelementptr inbounds i8, i8* %306, i64 16
  %315 = bitcast i8* %314 to <16 x i8>*
  %316 = load <16 x i8>, <16 x i8>* %315, align 1, !alias.scope !126, !noalias !109
  %317 = sub <16 x i8> %308, %313
  %318 = sub <16 x i8> %311, %316
  %319 = bitcast i8* %304 to <16 x i8>*
  store <16 x i8> %317, <16 x i8>* %319, align 1, !alias.scope !128, !noalias !130
  %320 = getelementptr i8, i8* %304, i64 16
  %321 = bitcast i8* %320 to <16 x i8>*
  store <16 x i8> %318, <16 x i8>* %321, align 1, !alias.scope !128, !noalias !130
  %322 = add i64 %283, 64
  %323 = add i64 %284, -2
  %324 = icmp eq i64 %323, 0
  br i1 %324, label %325, label %282, !llvm.loop !131

325:                                              ; preds = %282, %267
  %326 = phi i64 [ 0, %267 ], [ %322, %282 ]
  %327 = icmp eq i64 %276, 0
  br i1 %327, label %348, label %328

328:                                              ; preds = %325
  %329 = getelementptr i8, i8* %14, i64 1
  %330 = getelementptr i8, i8* %247, i64 %326
  %331 = getelementptr i8, i8* %248, i64 %326
  %332 = getelementptr inbounds i8, i8* %329, i64 %326
  %333 = bitcast i8* %331 to <16 x i8>*
  %334 = load <16 x i8>, <16 x i8>* %333, align 1, !alias.scope !123, !noalias !109
  %335 = getelementptr i8, i8* %331, i64 16
  %336 = bitcast i8* %335 to <16 x i8>*
  %337 = load <16 x i8>, <16 x i8>* %336, align 1, !alias.scope !123, !noalias !109
  %338 = bitcast i8* %332 to <16 x i8>*
  %339 = load <16 x i8>, <16 x i8>* %338, align 1, !alias.scope !126, !noalias !109
  %340 = getelementptr inbounds i8, i8* %332, i64 16
  %341 = bitcast i8* %340 to <16 x i8>*
  %342 = load <16 x i8>, <16 x i8>* %341, align 1, !alias.scope !126, !noalias !109
  %343 = sub <16 x i8> %334, %339
  %344 = sub <16 x i8> %337, %342
  %345 = bitcast i8* %330 to <16 x i8>*
  store <16 x i8> %343, <16 x i8>* %345, align 1, !alias.scope !128, !noalias !130
  %346 = getelementptr i8, i8* %330, i64 16
  %347 = bitcast i8* %346 to <16 x i8>*
  store <16 x i8> %344, <16 x i8>* %347, align 1, !alias.scope !128, !noalias !130
  br label %348

348:                                              ; preds = %325, %328
  %349 = icmp eq i64 %251, %268
  br i1 %349, label %412, label %350

350:                                              ; preds = %348, %253, %250
  %351 = phi i8* [ %14, %253 ], [ %14, %250 ], [ %269, %348 ]
  %352 = phi i64 [ %98, %253 ], [ %98, %250 ], [ %270, %348 ]
  %353 = phi i8* [ %247, %253 ], [ %247, %250 ], [ %271, %348 ]
  %354 = phi i8* [ %248, %253 ], [ %248, %250 ], [ %272, %348 ]
  %355 = sub i64 %7, %352
  %356 = xor i64 %352, -1
  %357 = add i64 %7, %356
  %358 = and i64 %355, 3
  %359 = icmp eq i64 %358, 0
  br i1 %359, label %375, label %360

360:                                              ; preds = %350, %360
  %361 = phi i8* [ %366, %360 ], [ %351, %350 ]
  %362 = phi i64 [ %370, %360 ], [ %352, %350 ]
  %363 = phi i8* [ %372, %360 ], [ %353, %350 ]
  %364 = phi i8* [ %371, %360 ], [ %354, %350 ]
  %365 = phi i64 [ %373, %360 ], [ %358, %350 ]
  %366 = getelementptr inbounds i8, i8* %361, i64 1
  %367 = load i8, i8* %364, align 1, !noalias !109
  %368 = load i8, i8* %366, align 1, !noalias !109
  %369 = sub i8 %367, %368
  store i8 %369, i8* %363, align 1, !noalias !109
  %370 = add nuw i64 %362, 1
  %371 = getelementptr inbounds i8, i8* %364, i64 1
  %372 = getelementptr inbounds i8, i8* %363, i64 1
  %373 = add i64 %365, -1
  %374 = icmp eq i64 %373, 0
  br i1 %374, label %375, label %360, !llvm.loop !132

375:                                              ; preds = %360, %350
  %376 = phi i8* [ %351, %350 ], [ %366, %360 ]
  %377 = phi i64 [ %352, %350 ], [ %370, %360 ]
  %378 = phi i8* [ %353, %350 ], [ %372, %360 ]
  %379 = phi i8* [ %354, %350 ], [ %371, %360 ]
  %380 = icmp ult i64 %357, 3
  br i1 %380, label %412, label %381

381:                                              ; preds = %375, %381
  %382 = phi i8* [ %404, %381 ], [ %376, %375 ]
  %383 = phi i64 [ %408, %381 ], [ %377, %375 ]
  %384 = phi i8* [ %410, %381 ], [ %378, %375 ]
  %385 = phi i8* [ %409, %381 ], [ %379, %375 ]
  %386 = getelementptr inbounds i8, i8* %382, i64 1
  %387 = load i8, i8* %385, align 1, !noalias !109
  %388 = load i8, i8* %386, align 1, !noalias !109
  %389 = sub i8 %387, %388
  store i8 %389, i8* %384, align 1, !noalias !109
  %390 = getelementptr inbounds i8, i8* %385, i64 1
  %391 = getelementptr inbounds i8, i8* %384, i64 1
  %392 = getelementptr inbounds i8, i8* %382, i64 2
  %393 = load i8, i8* %390, align 1, !noalias !109
  %394 = load i8, i8* %392, align 1, !noalias !109
  %395 = sub i8 %393, %394
  store i8 %395, i8* %391, align 1, !noalias !109
  %396 = getelementptr inbounds i8, i8* %385, i64 2
  %397 = getelementptr inbounds i8, i8* %384, i64 2
  %398 = getelementptr inbounds i8, i8* %382, i64 3
  %399 = load i8, i8* %396, align 1, !noalias !109
  %400 = load i8, i8* %398, align 1, !noalias !109
  %401 = sub i8 %399, %400
  store i8 %401, i8* %397, align 1, !noalias !109
  %402 = getelementptr inbounds i8, i8* %385, i64 3
  %403 = getelementptr inbounds i8, i8* %384, i64 3
  %404 = getelementptr inbounds i8, i8* %382, i64 4
  %405 = load i8, i8* %402, align 1, !noalias !109
  %406 = load i8, i8* %404, align 1, !noalias !109
  %407 = sub i8 %405, %406
  store i8 %407, i8* %403, align 1, !noalias !109
  %408 = add nuw i64 %383, 4
  %409 = getelementptr inbounds i8, i8* %385, i64 4
  %410 = getelementptr inbounds i8, i8* %384, i64 4
  %411 = icmp eq i64 %408, %7
  br i1 %411, label %412, label %381, !llvm.loop !133

412:                                              ; preds = %375, %381, %348, %246
  %413 = load i8*, i8** %94, align 8
  br label %508

414:                                              ; preds = %89
  %415 = and i32 %91, 16
  %416 = icmp eq i32 %415, 0
  br i1 %416, label %508, label %417

417:                                              ; preds = %414
  %418 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 47
  %419 = load i8*, i8** %418, align 8, !alias.scope !134
  store i8 1, i8* %419, align 1, !noalias !134
  %420 = getelementptr inbounds i8, i8* %419, i64 1
  %421 = getelementptr inbounds i8, i8* %14, i64 1
  %422 = zext i32 %12 to i64
  %423 = icmp eq i32 %12, 0
  br i1 %423, label %472, label %424

424:                                              ; preds = %417
  %425 = and i64 %422, 1
  %426 = icmp eq i32 %12, 1
  br i1 %426, label %454, label %427

427:                                              ; preds = %424
  %428 = sub nsw i64 %422, %425
  br label %429

429:                                              ; preds = %429, %427
  %430 = phi i8* [ %421, %427 ], [ %451, %429 ]
  %431 = phi i8* [ %420, %427 ], [ %450, %429 ]
  %432 = phi i64 [ 0, %427 ], [ %449, %429 ]
  %433 = phi i64 [ %428, %427 ], [ %452, %429 ]
  %434 = load i8, i8* %430, align 1, !noalias !134
  store i8 %434, i8* %431, align 1, !noalias !134
  %435 = zext i8 %434 to i32
  %436 = icmp sgt i8 %434, -1
  %437 = sub nuw nsw i32 256, %435
  %438 = select i1 %436, i32 %435, i32 %437
  %439 = zext i32 %438 to i64
  %440 = add i64 %432, %439
  %441 = getelementptr inbounds i8, i8* %431, i64 1
  %442 = getelementptr inbounds i8, i8* %430, i64 1
  %443 = load i8, i8* %442, align 1, !noalias !134
  store i8 %443, i8* %441, align 1, !noalias !134
  %444 = zext i8 %443 to i32
  %445 = icmp sgt i8 %443, -1
  %446 = sub nuw nsw i32 256, %444
  %447 = select i1 %445, i32 %444, i32 %446
  %448 = zext i32 %447 to i64
  %449 = add i64 %440, %448
  %450 = getelementptr inbounds i8, i8* %431, i64 2
  %451 = getelementptr inbounds i8, i8* %430, i64 2
  %452 = add i64 %433, -2
  %453 = icmp eq i64 %452, 0
  br i1 %453, label %454, label %429

454:                                              ; preds = %429, %424
  %455 = phi i64 [ undef, %424 ], [ %449, %429 ]
  %456 = phi i8* [ undef, %424 ], [ %450, %429 ]
  %457 = phi i8* [ undef, %424 ], [ %451, %429 ]
  %458 = phi i8* [ %421, %424 ], [ %451, %429 ]
  %459 = phi i8* [ %420, %424 ], [ %450, %429 ]
  %460 = phi i64 [ 0, %424 ], [ %449, %429 ]
  %461 = icmp eq i64 %425, 0
  br i1 %461, label %472, label %462

462:                                              ; preds = %454
  %463 = load i8, i8* %458, align 1, !noalias !134
  store i8 %463, i8* %459, align 1, !noalias !134
  %464 = zext i8 %463 to i32
  %465 = getelementptr inbounds i8, i8* %458, i64 1
  %466 = getelementptr inbounds i8, i8* %459, i64 1
  %467 = icmp sgt i8 %463, -1
  %468 = sub nuw nsw i32 256, %464
  %469 = select i1 %467, i32 %464, i32 %468
  %470 = zext i32 %469 to i64
  %471 = add i64 %460, %470
  br label %472

472:                                              ; preds = %462, %454, %417
  %473 = phi i64 [ 0, %417 ], [ %455, %454 ], [ %471, %462 ]
  %474 = phi i8* [ %420, %417 ], [ %456, %454 ], [ %466, %462 ]
  %475 = phi i8* [ %421, %417 ], [ %457, %454 ], [ %465, %462 ]
  %476 = icmp ugt i64 %7, %422
  br i1 %476, label %477, label %499

477:                                              ; preds = %472, %494
  %478 = phi i8* [ %483, %494 ], [ %14, %472 ]
  %479 = phi i64 [ %492, %494 ], [ %473, %472 ]
  %480 = phi i64 [ %495, %494 ], [ %422, %472 ]
  %481 = phi i8* [ %497, %494 ], [ %474, %472 ]
  %482 = phi i8* [ %496, %494 ], [ %475, %472 ]
  %483 = getelementptr inbounds i8, i8* %478, i64 1
  %484 = load i8, i8* %482, align 1, !noalias !134
  %485 = load i8, i8* %483, align 1, !noalias !134
  %486 = sub i8 %484, %485
  store i8 %486, i8* %481, align 1, !noalias !134
  %487 = zext i8 %486 to i32
  %488 = icmp sgt i8 %486, -1
  %489 = sub nuw nsw i32 256, %487
  %490 = select i1 %488, i32 %487, i32 %489
  %491 = zext i32 %490 to i64
  %492 = add i64 %479, %491
  %493 = icmp ugt i64 %492, %90
  br i1 %493, label %499, label %494

494:                                              ; preds = %477
  %495 = add i64 %480, 1
  %496 = getelementptr inbounds i8, i8* %482, i64 1
  %497 = getelementptr inbounds i8, i8* %481, i64 1
  %498 = icmp eq i64 %495, %7
  br i1 %498, label %499, label %477

499:                                              ; preds = %477, %494, %472
  %500 = phi i64 [ %473, %472 ], [ %492, %494 ], [ %492, %477 ]
  %501 = icmp ult i64 %500, %90
  br i1 %501, label %502, label %508

502:                                              ; preds = %499
  %503 = load i8*, i8** %418, align 8
  %504 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 48
  %505 = load i8*, i8** %504, align 8
  %506 = icmp eq i8* %505, null
  br i1 %506, label %508, label %507

507:                                              ; preds = %502
  store i8* %505, i8** %418, align 8
  store i8* %503, i8** %504, align 8
  br label %508

508:                                              ; preds = %499, %507, %502, %414, %412
  %509 = phi i64 [ %90, %412 ], [ %90, %414 ], [ %500, %507 ], [ %500, %502 ], [ %90, %499 ]
  %510 = phi i8* [ %413, %412 ], [ %14, %414 ], [ %503, %507 ], [ %503, %502 ], [ %14, %499 ]
  %511 = icmp eq i32 %91, 32
  br i1 %511, label %512, label %687

512:                                              ; preds = %508
  %513 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 47
  %514 = load i8*, i8** %513, align 8, !alias.scope !137
  store i8 2, i8* %514, align 1, !noalias !137
  %515 = icmp eq i64 %7, 0
  br i1 %515, label %685, label %516

516:                                              ; preds = %512
  %517 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  %518 = load i8*, i8** %517, align 8, !alias.scope !137
  %519 = load i8*, i8** %13, align 8, !alias.scope !137
  %520 = icmp ult i64 %7, 32
  br i1 %520, label %624, label %521

521:                                              ; preds = %516
  %522 = getelementptr i8, i8* %514, i64 1
  %523 = add i64 %7, 1
  %524 = getelementptr i8, i8* %514, i64 %523
  %525 = getelementptr i8, i8* %519, i64 1
  %526 = getelementptr i8, i8* %519, i64 %523
  %527 = getelementptr i8, i8* %518, i64 1
  %528 = getelementptr i8, i8* %518, i64 %523
  %529 = icmp ult i8* %522, %526
  %530 = icmp ult i8* %525, %524
  %531 = and i1 %529, %530
  %532 = icmp ult i8* %522, %528
  %533 = icmp ult i8* %527, %524
  %534 = and i1 %532, %533
  %535 = or i1 %531, %534
  br i1 %535, label %624, label %536

536:                                              ; preds = %521
  %537 = and i64 %7, -32
  %538 = getelementptr i8, i8* %519, i64 %537
  %539 = getelementptr i8, i8* %518, i64 %537
  %540 = getelementptr i8, i8* %514, i64 %537
  %541 = add i64 %537, -32
  %542 = lshr exact i64 %541, 5
  %543 = add nuw nsw i64 %542, 1
  %544 = and i64 %543, 1
  %545 = icmp eq i64 %541, 0
  br i1 %545, label %597, label %546

546:                                              ; preds = %536
  %547 = sub nuw nsw i64 %543, %544
  %548 = getelementptr i8, i8* %519, i64 1
  %549 = getelementptr i8, i8* %518, i64 1
  %550 = getelementptr i8, i8* %514, i64 1
  %551 = getelementptr i8, i8* %519, i64 1
  %552 = getelementptr i8, i8* %518, i64 1
  %553 = getelementptr i8, i8* %514, i64 1
  br label %554

554:                                              ; preds = %554, %546
  %555 = phi i64 [ 0, %546 ], [ %594, %554 ]
  %556 = phi i64 [ %547, %546 ], [ %595, %554 ]
  %557 = getelementptr inbounds i8, i8* %550, i64 %555
  %558 = getelementptr inbounds i8, i8* %549, i64 %555
  %559 = getelementptr inbounds i8, i8* %548, i64 %555
  %560 = bitcast i8* %559 to <16 x i8>*
  %561 = load <16 x i8>, <16 x i8>* %560, align 1, !alias.scope !140, !noalias !137
  %562 = getelementptr inbounds i8, i8* %559, i64 16
  %563 = bitcast i8* %562 to <16 x i8>*
  %564 = load <16 x i8>, <16 x i8>* %563, align 1, !alias.scope !140, !noalias !137
  %565 = bitcast i8* %558 to <16 x i8>*
  %566 = load <16 x i8>, <16 x i8>* %565, align 1, !alias.scope !143, !noalias !137
  %567 = getelementptr inbounds i8, i8* %558, i64 16
  %568 = bitcast i8* %567 to <16 x i8>*
  %569 = load <16 x i8>, <16 x i8>* %568, align 1, !alias.scope !143, !noalias !137
  %570 = sub <16 x i8> %561, %566
  %571 = sub <16 x i8> %564, %569
  %572 = bitcast i8* %557 to <16 x i8>*
  store <16 x i8> %570, <16 x i8>* %572, align 1, !alias.scope !145, !noalias !147
  %573 = getelementptr inbounds i8, i8* %557, i64 16
  %574 = bitcast i8* %573 to <16 x i8>*
  store <16 x i8> %571, <16 x i8>* %574, align 1, !alias.scope !145, !noalias !147
  %575 = or i64 %555, 32
  %576 = getelementptr inbounds i8, i8* %553, i64 %575
  %577 = getelementptr inbounds i8, i8* %552, i64 %575
  %578 = getelementptr inbounds i8, i8* %551, i64 %575
  %579 = bitcast i8* %578 to <16 x i8>*
  %580 = load <16 x i8>, <16 x i8>* %579, align 1, !alias.scope !140, !noalias !137
  %581 = getelementptr inbounds i8, i8* %578, i64 16
  %582 = bitcast i8* %581 to <16 x i8>*
  %583 = load <16 x i8>, <16 x i8>* %582, align 1, !alias.scope !140, !noalias !137
  %584 = bitcast i8* %577 to <16 x i8>*
  %585 = load <16 x i8>, <16 x i8>* %584, align 1, !alias.scope !143, !noalias !137
  %586 = getelementptr inbounds i8, i8* %577, i64 16
  %587 = bitcast i8* %586 to <16 x i8>*
  %588 = load <16 x i8>, <16 x i8>* %587, align 1, !alias.scope !143, !noalias !137
  %589 = sub <16 x i8> %580, %585
  %590 = sub <16 x i8> %583, %588
  %591 = bitcast i8* %576 to <16 x i8>*
  store <16 x i8> %589, <16 x i8>* %591, align 1, !alias.scope !145, !noalias !147
  %592 = getelementptr inbounds i8, i8* %576, i64 16
  %593 = bitcast i8* %592 to <16 x i8>*
  store <16 x i8> %590, <16 x i8>* %593, align 1, !alias.scope !145, !noalias !147
  %594 = add i64 %555, 64
  %595 = add i64 %556, -2
  %596 = icmp eq i64 %595, 0
  br i1 %596, label %597, label %554, !llvm.loop !148

597:                                              ; preds = %554, %536
  %598 = phi i64 [ 0, %536 ], [ %594, %554 ]
  %599 = icmp eq i64 %544, 0
  br i1 %599, label %622, label %600

600:                                              ; preds = %597
  %601 = getelementptr i8, i8* %519, i64 1
  %602 = getelementptr i8, i8* %518, i64 1
  %603 = getelementptr i8, i8* %514, i64 1
  %604 = getelementptr inbounds i8, i8* %603, i64 %598
  %605 = getelementptr inbounds i8, i8* %602, i64 %598
  %606 = getelementptr inbounds i8, i8* %601, i64 %598
  %607 = bitcast i8* %606 to <16 x i8>*
  %608 = load <16 x i8>, <16 x i8>* %607, align 1, !alias.scope !140, !noalias !137
  %609 = getelementptr inbounds i8, i8* %606, i64 16
  %610 = bitcast i8* %609 to <16 x i8>*
  %611 = load <16 x i8>, <16 x i8>* %610, align 1, !alias.scope !140, !noalias !137
  %612 = bitcast i8* %605 to <16 x i8>*
  %613 = load <16 x i8>, <16 x i8>* %612, align 1, !alias.scope !143, !noalias !137
  %614 = getelementptr inbounds i8, i8* %605, i64 16
  %615 = bitcast i8* %614 to <16 x i8>*
  %616 = load <16 x i8>, <16 x i8>* %615, align 1, !alias.scope !143, !noalias !137
  %617 = sub <16 x i8> %608, %613
  %618 = sub <16 x i8> %611, %616
  %619 = bitcast i8* %604 to <16 x i8>*
  store <16 x i8> %617, <16 x i8>* %619, align 1, !alias.scope !145, !noalias !147
  %620 = getelementptr inbounds i8, i8* %604, i64 16
  %621 = bitcast i8* %620 to <16 x i8>*
  store <16 x i8> %618, <16 x i8>* %621, align 1, !alias.scope !145, !noalias !147
  br label %622

622:                                              ; preds = %597, %600
  %623 = icmp eq i64 %7, %537
  br i1 %623, label %685, label %624

624:                                              ; preds = %622, %521, %516
  %625 = phi i8* [ %519, %521 ], [ %519, %516 ], [ %538, %622 ]
  %626 = phi i8* [ %518, %521 ], [ %518, %516 ], [ %539, %622 ]
  %627 = phi i8* [ %514, %521 ], [ %514, %516 ], [ %540, %622 ]
  %628 = phi i64 [ 0, %521 ], [ 0, %516 ], [ %537, %622 ]
  %629 = xor i64 %628, -1
  %630 = add i64 %7, %629
  %631 = and i64 %7, 3
  %632 = icmp eq i64 %631, 0
  br i1 %632, label %648, label %633

633:                                              ; preds = %624, %633
  %634 = phi i8* [ %641, %633 ], [ %625, %624 ]
  %635 = phi i8* [ %640, %633 ], [ %626, %624 ]
  %636 = phi i8* [ %639, %633 ], [ %627, %624 ]
  %637 = phi i64 [ %645, %633 ], [ %628, %624 ]
  %638 = phi i64 [ %646, %633 ], [ %631, %624 ]
  %639 = getelementptr inbounds i8, i8* %636, i64 1
  %640 = getelementptr inbounds i8, i8* %635, i64 1
  %641 = getelementptr inbounds i8, i8* %634, i64 1
  %642 = load i8, i8* %641, align 1, !noalias !137
  %643 = load i8, i8* %640, align 1, !noalias !137
  %644 = sub i8 %642, %643
  store i8 %644, i8* %639, align 1, !noalias !137
  %645 = add nuw i64 %637, 1
  %646 = add i64 %638, -1
  %647 = icmp eq i64 %646, 0
  br i1 %647, label %648, label %633, !llvm.loop !149

648:                                              ; preds = %633, %624
  %649 = phi i8* [ %625, %624 ], [ %641, %633 ]
  %650 = phi i8* [ %626, %624 ], [ %640, %633 ]
  %651 = phi i8* [ %627, %624 ], [ %639, %633 ]
  %652 = phi i64 [ %628, %624 ], [ %645, %633 ]
  %653 = icmp ult i64 %630, 3
  br i1 %653, label %685, label %654

654:                                              ; preds = %648, %654
  %655 = phi i8* [ %679, %654 ], [ %649, %648 ]
  %656 = phi i8* [ %678, %654 ], [ %650, %648 ]
  %657 = phi i8* [ %677, %654 ], [ %651, %648 ]
  %658 = phi i64 [ %683, %654 ], [ %652, %648 ]
  %659 = getelementptr inbounds i8, i8* %657, i64 1
  %660 = getelementptr inbounds i8, i8* %656, i64 1
  %661 = getelementptr inbounds i8, i8* %655, i64 1
  %662 = load i8, i8* %661, align 1, !noalias !137
  %663 = load i8, i8* %660, align 1, !noalias !137
  %664 = sub i8 %662, %663
  store i8 %664, i8* %659, align 1, !noalias !137
  %665 = getelementptr inbounds i8, i8* %657, i64 2
  %666 = getelementptr inbounds i8, i8* %656, i64 2
  %667 = getelementptr inbounds i8, i8* %655, i64 2
  %668 = load i8, i8* %667, align 1, !noalias !137
  %669 = load i8, i8* %666, align 1, !noalias !137
  %670 = sub i8 %668, %669
  store i8 %670, i8* %665, align 1, !noalias !137
  %671 = getelementptr inbounds i8, i8* %657, i64 3
  %672 = getelementptr inbounds i8, i8* %656, i64 3
  %673 = getelementptr inbounds i8, i8* %655, i64 3
  %674 = load i8, i8* %673, align 1, !noalias !137
  %675 = load i8, i8* %672, align 1, !noalias !137
  %676 = sub i8 %674, %675
  store i8 %676, i8* %671, align 1, !noalias !137
  %677 = getelementptr inbounds i8, i8* %657, i64 4
  %678 = getelementptr inbounds i8, i8* %656, i64 4
  %679 = getelementptr inbounds i8, i8* %655, i64 4
  %680 = load i8, i8* %679, align 1, !noalias !137
  %681 = load i8, i8* %678, align 1, !noalias !137
  %682 = sub i8 %680, %681
  store i8 %682, i8* %677, align 1, !noalias !137
  %683 = add nuw i64 %658, 4
  %684 = icmp eq i64 %683, %7
  br i1 %684, label %685, label %654, !llvm.loop !150

685:                                              ; preds = %648, %654, %622, %512
  %686 = load i8*, i8** %513, align 8
  br label %729

687:                                              ; preds = %508
  %688 = and i32 %91, 32
  %689 = icmp eq i32 %688, 0
  br i1 %689, label %729, label %690

690:                                              ; preds = %687
  %691 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 47
  %692 = load i8*, i8** %691, align 8, !alias.scope !151
  store i8 2, i8* %692, align 1, !noalias !151
  %693 = icmp eq i64 %7, 0
  br i1 %693, label %720, label %694

694:                                              ; preds = %690
  %695 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  %696 = load i8*, i8** %695, align 8, !alias.scope !151
  %697 = load i8*, i8** %13, align 8, !alias.scope !151
  br label %698

698:                                              ; preds = %698, %694
  %699 = phi i8* [ %697, %694 ], [ %706, %698 ]
  %700 = phi i8* [ %696, %694 ], [ %705, %698 ]
  %701 = phi i8* [ %692, %694 ], [ %704, %698 ]
  %702 = phi i64 [ 0, %694 ], [ %715, %698 ]
  %703 = phi i64 [ 0, %694 ], [ %717, %698 ]
  %704 = getelementptr inbounds i8, i8* %701, i64 1
  %705 = getelementptr inbounds i8, i8* %700, i64 1
  %706 = getelementptr inbounds i8, i8* %699, i64 1
  %707 = load i8, i8* %706, align 1, !noalias !151
  %708 = load i8, i8* %705, align 1, !noalias !151
  %709 = sub i8 %707, %708
  store i8 %709, i8* %704, align 1, !noalias !151
  %710 = zext i8 %709 to i32
  %711 = icmp sgt i8 %709, -1
  %712 = sub nuw nsw i32 256, %710
  %713 = select i1 %711, i32 %710, i32 %712
  %714 = zext i32 %713 to i64
  %715 = add i64 %702, %714
  %716 = icmp ule i64 %715, %509
  %717 = add nuw i64 %703, 1
  %718 = icmp ult i64 %717, %7
  %719 = and i1 %718, %716
  br i1 %719, label %698, label %720

720:                                              ; preds = %698, %690
  %721 = phi i64 [ 0, %690 ], [ %715, %698 ]
  %722 = icmp ult i64 %721, %509
  br i1 %722, label %723, label %729

723:                                              ; preds = %720
  %724 = load i8*, i8** %691, align 8
  %725 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 48
  %726 = load i8*, i8** %725, align 8
  %727 = icmp eq i8* %726, null
  br i1 %727, label %729, label %728

728:                                              ; preds = %723
  store i8* %726, i8** %691, align 8
  store i8* %724, i8** %725, align 8
  br label %729

729:                                              ; preds = %720, %728, %723, %687, %685
  %730 = phi i64 [ %509, %685 ], [ %509, %687 ], [ %721, %728 ], [ %721, %723 ], [ %509, %720 ]
  %731 = phi i8* [ %686, %685 ], [ %510, %687 ], [ %724, %728 ], [ %724, %723 ], [ %510, %720 ]
  %732 = icmp eq i32 %91, 64
  br i1 %732, label %733, label %1066

733:                                              ; preds = %729
  %734 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 47
  %735 = load i8*, i8** %734, align 8, !alias.scope !154
  store i8 3, i8* %735, align 1, !noalias !154
  %736 = load i8*, i8** %13, align 8, !alias.scope !154
  %737 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  %738 = load i8*, i8** %737, align 8, !alias.scope !154
  %739 = getelementptr inbounds i8, i8* %735, i64 1
  %740 = getelementptr inbounds i8, i8* %738, i64 1
  %741 = getelementptr inbounds i8, i8* %736, i64 1
  %742 = icmp eq i32 %12, 0
  br i1 %742, label %918, label %743

743:                                              ; preds = %733
  %744 = add nsw i32 %12, -1
  %745 = zext i32 %744 to i64
  %746 = add nuw nsw i64 %745, 1
  %747 = icmp ult i64 %746, 32
  br i1 %747, label %848, label %748

748:                                              ; preds = %743
  %749 = add nsw i32 %12, -1
  %750 = zext i32 %749 to i64
  %751 = add nuw nsw i64 %750, 2
  %752 = getelementptr i8, i8* %735, i64 %751
  %753 = getelementptr i8, i8* %736, i64 %751
  %754 = getelementptr i8, i8* %738, i64 %751
  %755 = icmp ult i8* %739, %753
  %756 = icmp ult i8* %741, %752
  %757 = and i1 %755, %756
  %758 = icmp ult i8* %739, %754
  %759 = icmp ult i8* %740, %752
  %760 = and i1 %758, %759
  %761 = or i1 %757, %760
  br i1 %761, label %848, label %762

762:                                              ; preds = %748
  %763 = and i64 %746, 8589934560
  %764 = getelementptr i8, i8* %741, i64 %763
  %765 = getelementptr i8, i8* %740, i64 %763
  %766 = getelementptr i8, i8* %739, i64 %763
  %767 = trunc i64 %763 to i32
  %768 = add nsw i64 %763, -32
  %769 = lshr exact i64 %768, 5
  %770 = add nuw nsw i64 %769, 1
  %771 = and i64 %770, 1
  %772 = icmp eq i64 %768, 0
  br i1 %772, label %822, label %773

773:                                              ; preds = %762
  %774 = sub nuw nsw i64 %770, %771
  br label %775

775:                                              ; preds = %775, %773
  %776 = phi i64 [ 0, %773 ], [ %819, %775 ]
  %777 = phi i64 [ %774, %773 ], [ %820, %775 ]
  %778 = getelementptr i8, i8* %741, i64 %776
  %779 = getelementptr i8, i8* %740, i64 %776
  %780 = getelementptr i8, i8* %739, i64 %776
  %781 = bitcast i8* %778 to <16 x i8>*
  %782 = load <16 x i8>, <16 x i8>* %781, align 1, !alias.scope !157, !noalias !154
  %783 = getelementptr i8, i8* %778, i64 16
  %784 = bitcast i8* %783 to <16 x i8>*
  %785 = load <16 x i8>, <16 x i8>* %784, align 1, !alias.scope !157, !noalias !154
  %786 = bitcast i8* %779 to <16 x i8>*
  %787 = load <16 x i8>, <16 x i8>* %786, align 1, !alias.scope !160, !noalias !154
  %788 = getelementptr i8, i8* %779, i64 16
  %789 = bitcast i8* %788 to <16 x i8>*
  %790 = load <16 x i8>, <16 x i8>* %789, align 1, !alias.scope !160, !noalias !154
  %791 = lshr <16 x i8> %787, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %792 = lshr <16 x i8> %790, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %793 = sub <16 x i8> %782, %791
  %794 = sub <16 x i8> %785, %792
  %795 = bitcast i8* %780 to <16 x i8>*
  store <16 x i8> %793, <16 x i8>* %795, align 1, !alias.scope !162, !noalias !164
  %796 = getelementptr i8, i8* %780, i64 16
  %797 = bitcast i8* %796 to <16 x i8>*
  store <16 x i8> %794, <16 x i8>* %797, align 1, !alias.scope !162, !noalias !164
  %798 = or i64 %776, 32
  %799 = getelementptr i8, i8* %741, i64 %798
  %800 = getelementptr i8, i8* %740, i64 %798
  %801 = getelementptr i8, i8* %739, i64 %798
  %802 = bitcast i8* %799 to <16 x i8>*
  %803 = load <16 x i8>, <16 x i8>* %802, align 1, !alias.scope !157, !noalias !154
  %804 = getelementptr i8, i8* %799, i64 16
  %805 = bitcast i8* %804 to <16 x i8>*
  %806 = load <16 x i8>, <16 x i8>* %805, align 1, !alias.scope !157, !noalias !154
  %807 = bitcast i8* %800 to <16 x i8>*
  %808 = load <16 x i8>, <16 x i8>* %807, align 1, !alias.scope !160, !noalias !154
  %809 = getelementptr i8, i8* %800, i64 16
  %810 = bitcast i8* %809 to <16 x i8>*
  %811 = load <16 x i8>, <16 x i8>* %810, align 1, !alias.scope !160, !noalias !154
  %812 = lshr <16 x i8> %808, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %813 = lshr <16 x i8> %811, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %814 = sub <16 x i8> %803, %812
  %815 = sub <16 x i8> %806, %813
  %816 = bitcast i8* %801 to <16 x i8>*
  store <16 x i8> %814, <16 x i8>* %816, align 1, !alias.scope !162, !noalias !164
  %817 = getelementptr i8, i8* %801, i64 16
  %818 = bitcast i8* %817 to <16 x i8>*
  store <16 x i8> %815, <16 x i8>* %818, align 1, !alias.scope !162, !noalias !164
  %819 = add i64 %776, 64
  %820 = add i64 %777, -2
  %821 = icmp eq i64 %820, 0
  br i1 %821, label %822, label %775, !llvm.loop !165

822:                                              ; preds = %775, %762
  %823 = phi i64 [ 0, %762 ], [ %819, %775 ]
  %824 = icmp eq i64 %771, 0
  br i1 %824, label %846, label %825

825:                                              ; preds = %822
  %826 = getelementptr i8, i8* %741, i64 %823
  %827 = getelementptr i8, i8* %740, i64 %823
  %828 = getelementptr i8, i8* %739, i64 %823
  %829 = bitcast i8* %826 to <16 x i8>*
  %830 = load <16 x i8>, <16 x i8>* %829, align 1, !alias.scope !157, !noalias !154
  %831 = getelementptr i8, i8* %826, i64 16
  %832 = bitcast i8* %831 to <16 x i8>*
  %833 = load <16 x i8>, <16 x i8>* %832, align 1, !alias.scope !157, !noalias !154
  %834 = bitcast i8* %827 to <16 x i8>*
  %835 = load <16 x i8>, <16 x i8>* %834, align 1, !alias.scope !160, !noalias !154
  %836 = getelementptr i8, i8* %827, i64 16
  %837 = bitcast i8* %836 to <16 x i8>*
  %838 = load <16 x i8>, <16 x i8>* %837, align 1, !alias.scope !160, !noalias !154
  %839 = lshr <16 x i8> %835, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %840 = lshr <16 x i8> %838, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %841 = sub <16 x i8> %830, %839
  %842 = sub <16 x i8> %833, %840
  %843 = bitcast i8* %828 to <16 x i8>*
  store <16 x i8> %841, <16 x i8>* %843, align 1, !alias.scope !162, !noalias !164
  %844 = getelementptr i8, i8* %828, i64 16
  %845 = bitcast i8* %844 to <16 x i8>*
  store <16 x i8> %842, <16 x i8>* %845, align 1, !alias.scope !162, !noalias !164
  br label %846

846:                                              ; preds = %822, %825
  %847 = icmp eq i64 %746, %763
  br i1 %847, label %918, label %848

848:                                              ; preds = %846, %748, %743
  %849 = phi i8* [ %741, %748 ], [ %741, %743 ], [ %764, %846 ]
  %850 = phi i8* [ %740, %748 ], [ %740, %743 ], [ %765, %846 ]
  %851 = phi i8* [ %739, %748 ], [ %739, %743 ], [ %766, %846 ]
  %852 = phi i32 [ 0, %748 ], [ 0, %743 ], [ %767, %846 ]
  %853 = sub i32 %12, %852
  %854 = xor i32 %852, -1
  %855 = add i32 %12, %854
  %856 = and i32 %853, 3
  %857 = icmp eq i32 %856, 0
  br i1 %857, label %874, label %858

858:                                              ; preds = %848, %858
  %859 = phi i8* [ %871, %858 ], [ %849, %848 ]
  %860 = phi i8* [ %870, %858 ], [ %850, %848 ]
  %861 = phi i8* [ %869, %858 ], [ %851, %848 ]
  %862 = phi i32 [ %868, %858 ], [ %852, %848 ]
  %863 = phi i32 [ %872, %858 ], [ %856, %848 ]
  %864 = load i8, i8* %859, align 1, !noalias !154
  %865 = load i8, i8* %860, align 1, !noalias !154
  %866 = lshr i8 %865, 1
  %867 = sub i8 %864, %866
  store i8 %867, i8* %861, align 1, !noalias !154
  %868 = add nuw nsw i32 %862, 1
  %869 = getelementptr inbounds i8, i8* %861, i64 1
  %870 = getelementptr inbounds i8, i8* %860, i64 1
  %871 = getelementptr inbounds i8, i8* %859, i64 1
  %872 = add i32 %863, -1
  %873 = icmp eq i32 %872, 0
  br i1 %873, label %874, label %858, !llvm.loop !166

874:                                              ; preds = %858, %848
  %875 = phi i8* [ undef, %848 ], [ %869, %858 ]
  %876 = phi i8* [ undef, %848 ], [ %870, %858 ]
  %877 = phi i8* [ undef, %848 ], [ %871, %858 ]
  %878 = phi i8* [ %849, %848 ], [ %871, %858 ]
  %879 = phi i8* [ %850, %848 ], [ %870, %858 ]
  %880 = phi i8* [ %851, %848 ], [ %869, %858 ]
  %881 = phi i32 [ %852, %848 ], [ %868, %858 ]
  %882 = icmp ult i32 %855, 3
  br i1 %882, label %918, label %883

883:                                              ; preds = %874, %883
  %884 = phi i8* [ %916, %883 ], [ %878, %874 ]
  %885 = phi i8* [ %915, %883 ], [ %879, %874 ]
  %886 = phi i8* [ %914, %883 ], [ %880, %874 ]
  %887 = phi i32 [ %913, %883 ], [ %881, %874 ]
  %888 = load i8, i8* %884, align 1, !noalias !154
  %889 = load i8, i8* %885, align 1, !noalias !154
  %890 = lshr i8 %889, 1
  %891 = sub i8 %888, %890
  store i8 %891, i8* %886, align 1, !noalias !154
  %892 = getelementptr inbounds i8, i8* %886, i64 1
  %893 = getelementptr inbounds i8, i8* %885, i64 1
  %894 = getelementptr inbounds i8, i8* %884, i64 1
  %895 = load i8, i8* %894, align 1, !noalias !154
  %896 = load i8, i8* %893, align 1, !noalias !154
  %897 = lshr i8 %896, 1
  %898 = sub i8 %895, %897
  store i8 %898, i8* %892, align 1, !noalias !154
  %899 = getelementptr inbounds i8, i8* %886, i64 2
  %900 = getelementptr inbounds i8, i8* %885, i64 2
  %901 = getelementptr inbounds i8, i8* %884, i64 2
  %902 = load i8, i8* %901, align 1, !noalias !154
  %903 = load i8, i8* %900, align 1, !noalias !154
  %904 = lshr i8 %903, 1
  %905 = sub i8 %902, %904
  store i8 %905, i8* %899, align 1, !noalias !154
  %906 = getelementptr inbounds i8, i8* %886, i64 3
  %907 = getelementptr inbounds i8, i8* %885, i64 3
  %908 = getelementptr inbounds i8, i8* %884, i64 3
  %909 = load i8, i8* %908, align 1, !noalias !154
  %910 = load i8, i8* %907, align 1, !noalias !154
  %911 = lshr i8 %910, 1
  %912 = sub i8 %909, %911
  store i8 %912, i8* %906, align 1, !noalias !154
  %913 = add nuw nsw i32 %887, 4
  %914 = getelementptr inbounds i8, i8* %886, i64 4
  %915 = getelementptr inbounds i8, i8* %885, i64 4
  %916 = getelementptr inbounds i8, i8* %884, i64 4
  %917 = icmp eq i32 %913, %12
  br i1 %917, label %918, label %883, !llvm.loop !167

918:                                              ; preds = %874, %883, %846, %733
  %919 = phi i8* [ %739, %733 ], [ %766, %846 ], [ %875, %874 ], [ %914, %883 ]
  %920 = phi i8* [ %740, %733 ], [ %765, %846 ], [ %876, %874 ], [ %915, %883 ]
  %921 = phi i8* [ %741, %733 ], [ %764, %846 ], [ %877, %874 ], [ %916, %883 ]
  %922 = zext i32 %12 to i64
  %923 = icmp ugt i64 %7, %922
  br i1 %923, label %924, label %1064

924:                                              ; preds = %918
  %925 = sub i64 %7, %922
  %926 = icmp ult i64 %925, 16
  br i1 %926, label %1036, label %927

927:                                              ; preds = %924
  %928 = xor i64 %922, -1
  %929 = add i64 %7, %928
  %930 = trunc i64 %929 to i32
  %931 = sub nuw nsw i32 -2, %12
  %932 = icmp ult i32 %931, %930
  %933 = icmp ugt i64 %929, 4294967295
  %934 = or i1 %932, %933
  br i1 %934, label %1036, label %935

935:                                              ; preds = %927
  %936 = sub i64 %7, %922
  %937 = getelementptr i8, i8* %919, i64 %936
  %938 = add i64 %7, 1
  %939 = sub i64 %938, %922
  %940 = getelementptr i8, i8* %736, i64 %939
  %941 = getelementptr i8, i8* %921, i64 %936
  %942 = getelementptr i8, i8* %920, i64 %936
  %943 = icmp ult i8* %919, %940
  %944 = icmp ult i8* %741, %937
  %945 = and i1 %943, %944
  %946 = icmp ult i8* %919, %941
  %947 = icmp ult i8* %921, %937
  %948 = and i1 %946, %947
  %949 = or i1 %945, %948
  %950 = icmp ult i8* %919, %942
  %951 = icmp ult i8* %920, %937
  %952 = and i1 %950, %951
  %953 = or i1 %949, %952
  br i1 %953, label %1036, label %954

954:                                              ; preds = %935
  %955 = and i64 %925, -16
  %956 = getelementptr i8, i8* %736, i64 %955
  %957 = trunc i64 %955 to i32
  %958 = add i32 %12, %957
  %959 = getelementptr i8, i8* %920, i64 %955
  %960 = getelementptr i8, i8* %919, i64 %955
  %961 = getelementptr i8, i8* %921, i64 %955
  %962 = add i64 %955, -16
  %963 = lshr exact i64 %962, 4
  %964 = add nuw nsw i64 %963, 1
  %965 = and i64 %964, 1
  %966 = icmp eq i64 %962, 0
  br i1 %966, label %1012, label %967

967:                                              ; preds = %954
  %968 = sub nuw nsw i64 %964, %965
  %969 = getelementptr i8, i8* %736, i64 1
  %970 = getelementptr i8, i8* %736, i64 1
  br label %971

971:                                              ; preds = %971, %967
  %972 = phi i64 [ 0, %967 ], [ %1009, %971 ]
  %973 = phi i64 [ %968, %967 ], [ %1010, %971 ]
  %974 = getelementptr i8, i8* %920, i64 %972
  %975 = getelementptr i8, i8* %919, i64 %972
  %976 = getelementptr i8, i8* %921, i64 %972
  %977 = getelementptr inbounds i8, i8* %969, i64 %972
  %978 = bitcast i8* %976 to <16 x i8>*
  %979 = load <16 x i8>, <16 x i8>* %978, align 1, !alias.scope !168, !noalias !154
  %980 = bitcast i8* %974 to <16 x i8>*
  %981 = load <16 x i8>, <16 x i8>* %980, align 1, !alias.scope !171, !noalias !154
  %982 = zext <16 x i8> %981 to <16 x i32>
  %983 = bitcast i8* %977 to <16 x i8>*
  %984 = load <16 x i8>, <16 x i8>* %983, align 1, !alias.scope !173, !noalias !154
  %985 = zext <16 x i8> %984 to <16 x i32>
  %986 = add nuw nsw <16 x i32> %985, %982
  %987 = lshr <16 x i32> %986, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %988 = trunc <16 x i32> %987 to <16 x i8>
  %989 = sub <16 x i8> %979, %988
  %990 = bitcast i8* %975 to <16 x i8>*
  store <16 x i8> %989, <16 x i8>* %990, align 1, !alias.scope !175, !noalias !177
  %991 = or i64 %972, 16
  %992 = getelementptr i8, i8* %920, i64 %991
  %993 = getelementptr i8, i8* %919, i64 %991
  %994 = getelementptr i8, i8* %921, i64 %991
  %995 = getelementptr inbounds i8, i8* %970, i64 %991
  %996 = bitcast i8* %994 to <16 x i8>*
  %997 = load <16 x i8>, <16 x i8>* %996, align 1, !alias.scope !168, !noalias !154
  %998 = bitcast i8* %992 to <16 x i8>*
  %999 = load <16 x i8>, <16 x i8>* %998, align 1, !alias.scope !171, !noalias !154
  %1000 = zext <16 x i8> %999 to <16 x i32>
  %1001 = bitcast i8* %995 to <16 x i8>*
  %1002 = load <16 x i8>, <16 x i8>* %1001, align 1, !alias.scope !173, !noalias !154
  %1003 = zext <16 x i8> %1002 to <16 x i32>
  %1004 = add nuw nsw <16 x i32> %1003, %1000
  %1005 = lshr <16 x i32> %1004, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %1006 = trunc <16 x i32> %1005 to <16 x i8>
  %1007 = sub <16 x i8> %997, %1006
  %1008 = bitcast i8* %993 to <16 x i8>*
  store <16 x i8> %1007, <16 x i8>* %1008, align 1, !alias.scope !175, !noalias !177
  %1009 = add i64 %972, 32
  %1010 = add i64 %973, -2
  %1011 = icmp eq i64 %1010, 0
  br i1 %1011, label %1012, label %971, !llvm.loop !178

1012:                                             ; preds = %971, %954
  %1013 = phi i64 [ 0, %954 ], [ %1009, %971 ]
  %1014 = icmp eq i64 %965, 0
  br i1 %1014, label %1034, label %1015

1015:                                             ; preds = %1012
  %1016 = getelementptr i8, i8* %736, i64 1
  %1017 = getelementptr i8, i8* %920, i64 %1013
  %1018 = getelementptr i8, i8* %919, i64 %1013
  %1019 = getelementptr i8, i8* %921, i64 %1013
  %1020 = getelementptr inbounds i8, i8* %1016, i64 %1013
  %1021 = bitcast i8* %1019 to <16 x i8>*
  %1022 = load <16 x i8>, <16 x i8>* %1021, align 1, !alias.scope !168, !noalias !154
  %1023 = bitcast i8* %1017 to <16 x i8>*
  %1024 = load <16 x i8>, <16 x i8>* %1023, align 1, !alias.scope !171, !noalias !154
  %1025 = zext <16 x i8> %1024 to <16 x i32>
  %1026 = bitcast i8* %1020 to <16 x i8>*
  %1027 = load <16 x i8>, <16 x i8>* %1026, align 1, !alias.scope !173, !noalias !154
  %1028 = zext <16 x i8> %1027 to <16 x i32>
  %1029 = add nuw nsw <16 x i32> %1028, %1025
  %1030 = lshr <16 x i32> %1029, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %1031 = trunc <16 x i32> %1030 to <16 x i8>
  %1032 = sub <16 x i8> %1022, %1031
  %1033 = bitcast i8* %1018 to <16 x i8>*
  store <16 x i8> %1032, <16 x i8>* %1033, align 1, !alias.scope !175, !noalias !177
  br label %1034

1034:                                             ; preds = %1012, %1015
  %1035 = icmp eq i64 %925, %955
  br i1 %1035, label %1064, label %1036

1036:                                             ; preds = %1034, %935, %927, %924
  %1037 = phi i8* [ %736, %935 ], [ %736, %927 ], [ %736, %924 ], [ %956, %1034 ]
  %1038 = phi i32 [ %12, %935 ], [ %12, %927 ], [ %12, %924 ], [ %958, %1034 ]
  %1039 = phi i8* [ %920, %935 ], [ %920, %927 ], [ %920, %924 ], [ %959, %1034 ]
  %1040 = phi i8* [ %919, %935 ], [ %919, %927 ], [ %919, %924 ], [ %960, %1034 ]
  %1041 = phi i8* [ %921, %935 ], [ %921, %927 ], [ %921, %924 ], [ %961, %1034 ]
  br label %1042

1042:                                             ; preds = %1036, %1042
  %1043 = phi i8* [ %1048, %1042 ], [ %1037, %1036 ]
  %1044 = phi i32 [ %1061, %1042 ], [ %1038, %1036 ]
  %1045 = phi i8* [ %1051, %1042 ], [ %1039, %1036 ]
  %1046 = phi i8* [ %1060, %1042 ], [ %1040, %1036 ]
  %1047 = phi i8* [ %1049, %1042 ], [ %1041, %1036 ]
  %1048 = getelementptr inbounds i8, i8* %1043, i64 1
  %1049 = getelementptr inbounds i8, i8* %1047, i64 1
  %1050 = load i8, i8* %1047, align 1, !noalias !154
  %1051 = getelementptr inbounds i8, i8* %1045, i64 1
  %1052 = load i8, i8* %1045, align 1, !noalias !154
  %1053 = zext i8 %1052 to i32
  %1054 = load i8, i8* %1048, align 1, !noalias !154
  %1055 = zext i8 %1054 to i32
  %1056 = add nuw nsw i32 %1055, %1053
  %1057 = lshr i32 %1056, 1
  %1058 = trunc i32 %1057 to i8
  %1059 = sub i8 %1050, %1058
  %1060 = getelementptr inbounds i8, i8* %1046, i64 1
  store i8 %1059, i8* %1046, align 1, !noalias !154
  %1061 = add i32 %1044, 1
  %1062 = zext i32 %1061 to i64
  %1063 = icmp ugt i64 %7, %1062
  br i1 %1063, label %1042, label %1064, !llvm.loop !179

1064:                                             ; preds = %1042, %1034, %918
  %1065 = load i8*, i8** %734, align 8
  br label %1266

1066:                                             ; preds = %729
  %1067 = and i32 %91, 64
  %1068 = icmp eq i32 %1067, 0
  br i1 %1068, label %1266, label %1069

1069:                                             ; preds = %1066
  %1070 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 47
  %1071 = load i8*, i8** %1070, align 8, !alias.scope !180
  store i8 3, i8* %1071, align 1, !noalias !180
  %1072 = load i8*, i8** %13, align 8, !alias.scope !180
  %1073 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  %1074 = load i8*, i8** %1073, align 8, !alias.scope !180
  %1075 = getelementptr inbounds i8, i8* %1071, i64 1
  %1076 = getelementptr inbounds i8, i8* %1074, i64 1
  %1077 = getelementptr inbounds i8, i8* %1072, i64 1
  %1078 = icmp eq i32 %12, 0
  br i1 %1078, label %1218, label %1079

1079:                                             ; preds = %1069
  %1080 = add nsw i32 %12, -1
  %1081 = zext i32 %1080 to i64
  %1082 = add nuw nsw i64 %1081, 1
  %1083 = icmp ult i64 %1082, 4
  br i1 %1083, label %1148, label %1084

1084:                                             ; preds = %1079
  %1085 = add nsw i32 %12, -1
  %1086 = zext i32 %1085 to i64
  %1087 = add nuw nsw i64 %1086, 2
  %1088 = getelementptr i8, i8* %1071, i64 %1087
  %1089 = getelementptr i8, i8* %1072, i64 %1087
  %1090 = getelementptr i8, i8* %1074, i64 %1087
  %1091 = icmp ult i8* %1075, %1089
  %1092 = icmp ult i8* %1077, %1088
  %1093 = and i1 %1091, %1092
  %1094 = icmp ult i8* %1075, %1090
  %1095 = icmp ult i8* %1076, %1088
  %1096 = and i1 %1094, %1095
  %1097 = or i1 %1093, %1096
  br i1 %1097, label %1148, label %1098

1098:                                             ; preds = %1084
  %1099 = and i64 %1082, 8589934588
  %1100 = getelementptr i8, i8* %1077, i64 %1099
  %1101 = getelementptr i8, i8* %1076, i64 %1099
  %1102 = getelementptr i8, i8* %1075, i64 %1099
  %1103 = trunc i64 %1099 to i32
  br label %1104

1104:                                             ; preds = %1104, %1098
  %1105 = phi i64 [ 0, %1098 ], [ %1140, %1104 ]
  %1106 = phi <2 x i64> [ zeroinitializer, %1098 ], [ %1138, %1104 ]
  %1107 = phi <2 x i64> [ zeroinitializer, %1098 ], [ %1139, %1104 ]
  %1108 = getelementptr i8, i8* %1077, i64 %1105
  %1109 = getelementptr i8, i8* %1076, i64 %1105
  %1110 = getelementptr i8, i8* %1075, i64 %1105
  %1111 = bitcast i8* %1108 to <2 x i8>*
  %1112 = load <2 x i8>, <2 x i8>* %1111, align 1, !alias.scope !183, !noalias !180
  %1113 = getelementptr i8, i8* %1108, i64 2
  %1114 = bitcast i8* %1113 to <2 x i8>*
  %1115 = load <2 x i8>, <2 x i8>* %1114, align 1, !alias.scope !183, !noalias !180
  %1116 = bitcast i8* %1109 to <2 x i8>*
  %1117 = load <2 x i8>, <2 x i8>* %1116, align 1, !alias.scope !186, !noalias !180
  %1118 = getelementptr i8, i8* %1109, i64 2
  %1119 = bitcast i8* %1118 to <2 x i8>*
  %1120 = load <2 x i8>, <2 x i8>* %1119, align 1, !alias.scope !186, !noalias !180
  %1121 = lshr <2 x i8> %1117, <i8 1, i8 1>
  %1122 = lshr <2 x i8> %1120, <i8 1, i8 1>
  %1123 = sub <2 x i8> %1112, %1121
  %1124 = sub <2 x i8> %1115, %1122
  %1125 = bitcast i8* %1110 to <2 x i8>*
  store <2 x i8> %1123, <2 x i8>* %1125, align 1, !alias.scope !188, !noalias !190
  %1126 = getelementptr i8, i8* %1110, i64 2
  %1127 = bitcast i8* %1126 to <2 x i8>*
  store <2 x i8> %1124, <2 x i8>* %1127, align 1, !alias.scope !188, !noalias !190
  %1128 = zext <2 x i8> %1123 to <2 x i32>
  %1129 = zext <2 x i8> %1124 to <2 x i32>
  %1130 = icmp sgt <2 x i8> %1123, <i8 -1, i8 -1>
  %1131 = icmp sgt <2 x i8> %1124, <i8 -1, i8 -1>
  %1132 = sub nuw nsw <2 x i32> <i32 256, i32 256>, %1128
  %1133 = sub nuw nsw <2 x i32> <i32 256, i32 256>, %1129
  %1134 = select <2 x i1> %1130, <2 x i32> %1128, <2 x i32> %1132
  %1135 = select <2 x i1> %1131, <2 x i32> %1129, <2 x i32> %1133
  %1136 = zext <2 x i32> %1134 to <2 x i64>
  %1137 = zext <2 x i32> %1135 to <2 x i64>
  %1138 = add <2 x i64> %1106, %1136
  %1139 = add <2 x i64> %1107, %1137
  %1140 = add i64 %1105, 4
  %1141 = icmp eq i64 %1140, %1099
  br i1 %1141, label %1142, label %1104, !llvm.loop !191

1142:                                             ; preds = %1104
  %1143 = add <2 x i64> %1139, %1138
  %1144 = shufflevector <2 x i64> %1143, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %1145 = add <2 x i64> %1143, %1144
  %1146 = extractelement <2 x i64> %1145, i32 0
  %1147 = icmp eq i64 %1082, %1099
  br i1 %1147, label %1218, label %1148

1148:                                             ; preds = %1142, %1084, %1079
  %1149 = phi i8* [ %1077, %1084 ], [ %1077, %1079 ], [ %1100, %1142 ]
  %1150 = phi i8* [ %1076, %1084 ], [ %1076, %1079 ], [ %1101, %1142 ]
  %1151 = phi i8* [ %1075, %1084 ], [ %1075, %1079 ], [ %1102, %1142 ]
  %1152 = phi i64 [ 0, %1084 ], [ 0, %1079 ], [ %1146, %1142 ]
  %1153 = phi i32 [ 0, %1084 ], [ 0, %1079 ], [ %1103, %1142 ]
  %1154 = sub i32 %12, %1153
  %1155 = and i32 %1154, 1
  %1156 = icmp eq i32 %1155, 0
  br i1 %1156, label %1172, label %1157

1157:                                             ; preds = %1148
  %1158 = load i8, i8* %1149, align 1, !noalias !180
  %1159 = load i8, i8* %1150, align 1, !noalias !180
  %1160 = lshr i8 %1159, 1
  %1161 = sub i8 %1158, %1160
  store i8 %1161, i8* %1151, align 1, !noalias !180
  %1162 = zext i8 %1161 to i32
  %1163 = icmp sgt i8 %1161, -1
  %1164 = sub nuw nsw i32 256, %1162
  %1165 = select i1 %1163, i32 %1162, i32 %1164
  %1166 = zext i32 %1165 to i64
  %1167 = add i64 %1152, %1166
  %1168 = add nuw nsw i32 %1153, 1
  %1169 = getelementptr inbounds i8, i8* %1151, i64 1
  %1170 = getelementptr inbounds i8, i8* %1150, i64 1
  %1171 = getelementptr inbounds i8, i8* %1149, i64 1
  br label %1172

1172:                                             ; preds = %1148, %1157
  %1173 = phi i64 [ undef, %1148 ], [ %1167, %1157 ]
  %1174 = phi i8* [ undef, %1148 ], [ %1169, %1157 ]
  %1175 = phi i8* [ undef, %1148 ], [ %1170, %1157 ]
  %1176 = phi i8* [ undef, %1148 ], [ %1171, %1157 ]
  %1177 = phi i8* [ %1149, %1148 ], [ %1171, %1157 ]
  %1178 = phi i8* [ %1150, %1148 ], [ %1170, %1157 ]
  %1179 = phi i8* [ %1151, %1148 ], [ %1169, %1157 ]
  %1180 = phi i64 [ %1152, %1148 ], [ %1167, %1157 ]
  %1181 = phi i32 [ %1153, %1148 ], [ %1168, %1157 ]
  %1182 = add i32 %1153, 1
  %1183 = icmp eq i32 %12, %1182
  br i1 %1183, label %1218, label %1184

1184:                                             ; preds = %1172, %1184
  %1185 = phi i8* [ %1216, %1184 ], [ %1177, %1172 ]
  %1186 = phi i8* [ %1215, %1184 ], [ %1178, %1172 ]
  %1187 = phi i8* [ %1214, %1184 ], [ %1179, %1172 ]
  %1188 = phi i64 [ %1212, %1184 ], [ %1180, %1172 ]
  %1189 = phi i32 [ %1213, %1184 ], [ %1181, %1172 ]
  %1190 = load i8, i8* %1185, align 1, !noalias !180
  %1191 = load i8, i8* %1186, align 1, !noalias !180
  %1192 = lshr i8 %1191, 1
  %1193 = sub i8 %1190, %1192
  store i8 %1193, i8* %1187, align 1, !noalias !180
  %1194 = zext i8 %1193 to i32
  %1195 = icmp sgt i8 %1193, -1
  %1196 = sub nuw nsw i32 256, %1194
  %1197 = select i1 %1195, i32 %1194, i32 %1196
  %1198 = zext i32 %1197 to i64
  %1199 = add i64 %1188, %1198
  %1200 = getelementptr inbounds i8, i8* %1187, i64 1
  %1201 = getelementptr inbounds i8, i8* %1186, i64 1
  %1202 = getelementptr inbounds i8, i8* %1185, i64 1
  %1203 = load i8, i8* %1202, align 1, !noalias !180
  %1204 = load i8, i8* %1201, align 1, !noalias !180
  %1205 = lshr i8 %1204, 1
  %1206 = sub i8 %1203, %1205
  store i8 %1206, i8* %1200, align 1, !noalias !180
  %1207 = zext i8 %1206 to i32
  %1208 = icmp sgt i8 %1206, -1
  %1209 = sub nuw nsw i32 256, %1207
  %1210 = select i1 %1208, i32 %1207, i32 %1209
  %1211 = zext i32 %1210 to i64
  %1212 = add i64 %1199, %1211
  %1213 = add nuw nsw i32 %1189, 2
  %1214 = getelementptr inbounds i8, i8* %1187, i64 2
  %1215 = getelementptr inbounds i8, i8* %1186, i64 2
  %1216 = getelementptr inbounds i8, i8* %1185, i64 2
  %1217 = icmp eq i32 %1213, %12
  br i1 %1217, label %1218, label %1184, !llvm.loop !192

1218:                                             ; preds = %1172, %1184, %1142, %1069
  %1219 = phi i64 [ 0, %1069 ], [ %1146, %1142 ], [ %1173, %1172 ], [ %1212, %1184 ]
  %1220 = phi i8* [ %1075, %1069 ], [ %1102, %1142 ], [ %1174, %1172 ], [ %1214, %1184 ]
  %1221 = phi i8* [ %1076, %1069 ], [ %1101, %1142 ], [ %1175, %1172 ], [ %1215, %1184 ]
  %1222 = phi i8* [ %1077, %1069 ], [ %1100, %1142 ], [ %1176, %1172 ], [ %1216, %1184 ]
  %1223 = zext i32 %12 to i64
  %1224 = icmp ugt i64 %7, %1223
  br i1 %1224, label %1225, label %1257

1225:                                             ; preds = %1218, %1250
  %1226 = phi i8* [ %1232, %1250 ], [ %1072, %1218 ]
  %1227 = phi i64 [ %1248, %1250 ], [ %1219, %1218 ]
  %1228 = phi i32 [ %1254, %1250 ], [ %12, %1218 ]
  %1229 = phi i8* [ %1252, %1250 ], [ %1221, %1218 ]
  %1230 = phi i8* [ %1251, %1250 ], [ %1220, %1218 ]
  %1231 = phi i8* [ %1253, %1250 ], [ %1222, %1218 ]
  %1232 = getelementptr inbounds i8, i8* %1226, i64 1
  %1233 = load i8, i8* %1231, align 1, !noalias !180
  %1234 = zext i8 %1233 to i32
  %1235 = load i8, i8* %1229, align 1, !noalias !180
  %1236 = zext i8 %1235 to i32
  %1237 = load i8, i8* %1232, align 1, !noalias !180
  %1238 = zext i8 %1237 to i32
  %1239 = add nuw nsw i32 %1238, %1236
  %1240 = lshr i32 %1239, 1
  %1241 = sub nsw i32 %1234, %1240
  %1242 = trunc i32 %1241 to i8
  store i8 %1242, i8* %1230, align 1, !noalias !180
  %1243 = and i32 %1241, 255
  %1244 = icmp ult i32 %1243, 128
  %1245 = sub nuw nsw i32 256, %1243
  %1246 = select i1 %1244, i32 %1243, i32 %1245
  %1247 = zext i32 %1246 to i64
  %1248 = add i64 %1227, %1247
  %1249 = icmp ugt i64 %1248, %730
  br i1 %1249, label %1257, label %1250

1250:                                             ; preds = %1225
  %1251 = getelementptr inbounds i8, i8* %1230, i64 1
  %1252 = getelementptr inbounds i8, i8* %1229, i64 1
  %1253 = getelementptr inbounds i8, i8* %1231, i64 1
  %1254 = add i32 %1228, 1
  %1255 = zext i32 %1254 to i64
  %1256 = icmp ugt i64 %7, %1255
  br i1 %1256, label %1225, label %1257

1257:                                             ; preds = %1225, %1250, %1218
  %1258 = phi i64 [ %1219, %1218 ], [ %1248, %1250 ], [ %1248, %1225 ]
  %1259 = icmp ult i64 %1258, %730
  br i1 %1259, label %1260, label %1266

1260:                                             ; preds = %1257
  %1261 = load i8*, i8** %1070, align 8
  %1262 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 48
  %1263 = load i8*, i8** %1262, align 8
  %1264 = icmp eq i8* %1263, null
  br i1 %1264, label %1266, label %1265

1265:                                             ; preds = %1260
  store i8* %1263, i8** %1070, align 8
  store i8* %1261, i8** %1262, align 8
  br label %1266

1266:                                             ; preds = %1257, %1265, %1260, %1066, %1064
  %1267 = phi i64 [ %730, %1064 ], [ %730, %1066 ], [ %1258, %1265 ], [ %1258, %1260 ], [ %730, %1257 ]
  %1268 = phi i8* [ %1065, %1064 ], [ %731, %1066 ], [ %1261, %1265 ], [ %1261, %1260 ], [ %731, %1257 ]
  %1269 = icmp eq i32 %91, 128
  br i1 %1269, label %1270, label %1571

1270:                                             ; preds = %1266
  %1271 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 47
  %1272 = load i8*, i8** %1271, align 8, !alias.scope !193
  store i8 4, i8* %1272, align 1, !noalias !193
  %1273 = load i8*, i8** %13, align 8, !alias.scope !193
  %1274 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  %1275 = load i8*, i8** %1274, align 8, !alias.scope !193
  %1276 = getelementptr inbounds i8, i8* %1272, i64 1
  %1277 = getelementptr inbounds i8, i8* %1275, i64 1
  %1278 = getelementptr inbounds i8, i8* %1273, i64 1
  %1279 = zext i32 %12 to i64
  %1280 = icmp eq i32 %12, 0
  br i1 %1280, label %1438, label %1281

1281:                                             ; preds = %1270
  %1282 = icmp ult i32 %11, 256
  br i1 %1282, label %1374, label %1283

1283:                                             ; preds = %1281
  %1284 = add nuw nsw i64 %1279, 1
  %1285 = getelementptr i8, i8* %1272, i64 %1284
  %1286 = getelementptr i8, i8* %1273, i64 %1284
  %1287 = getelementptr i8, i8* %1275, i64 %1284
  %1288 = icmp ult i8* %1276, %1286
  %1289 = icmp ult i8* %1278, %1285
  %1290 = and i1 %1288, %1289
  %1291 = icmp ult i8* %1276, %1287
  %1292 = icmp ult i8* %1277, %1285
  %1293 = and i1 %1291, %1292
  %1294 = or i1 %1290, %1293
  br i1 %1294, label %1374, label %1295

1295:                                             ; preds = %1283
  %1296 = and i64 %1279, 32
  %1297 = getelementptr i8, i8* %1278, i64 %1296
  %1298 = getelementptr i8, i8* %1277, i64 %1296
  %1299 = getelementptr i8, i8* %1276, i64 %1296
  %1300 = add nsw i64 %1296, -32
  %1301 = lshr exact i64 %1300, 5
  %1302 = add nuw nsw i64 %1301, 1
  %1303 = and i64 %1302, 1
  %1304 = icmp eq i64 %1300, 0
  br i1 %1304, label %1350, label %1305

1305:                                             ; preds = %1295
  %1306 = sub nuw nsw i64 %1302, %1303
  br label %1307

1307:                                             ; preds = %1307, %1305
  %1308 = phi i64 [ 0, %1305 ], [ %1347, %1307 ]
  %1309 = phi i64 [ %1306, %1305 ], [ %1348, %1307 ]
  %1310 = getelementptr i8, i8* %1278, i64 %1308
  %1311 = getelementptr i8, i8* %1277, i64 %1308
  %1312 = getelementptr i8, i8* %1276, i64 %1308
  %1313 = bitcast i8* %1310 to <16 x i8>*
  %1314 = load <16 x i8>, <16 x i8>* %1313, align 1, !alias.scope !196, !noalias !193
  %1315 = getelementptr i8, i8* %1310, i64 16
  %1316 = bitcast i8* %1315 to <16 x i8>*
  %1317 = load <16 x i8>, <16 x i8>* %1316, align 1, !alias.scope !196, !noalias !193
  %1318 = bitcast i8* %1311 to <16 x i8>*
  %1319 = load <16 x i8>, <16 x i8>* %1318, align 1, !alias.scope !199, !noalias !193
  %1320 = getelementptr i8, i8* %1311, i64 16
  %1321 = bitcast i8* %1320 to <16 x i8>*
  %1322 = load <16 x i8>, <16 x i8>* %1321, align 1, !alias.scope !199, !noalias !193
  %1323 = sub <16 x i8> %1314, %1319
  %1324 = sub <16 x i8> %1317, %1322
  %1325 = bitcast i8* %1312 to <16 x i8>*
  store <16 x i8> %1323, <16 x i8>* %1325, align 1, !alias.scope !201, !noalias !203
  %1326 = getelementptr i8, i8* %1312, i64 16
  %1327 = bitcast i8* %1326 to <16 x i8>*
  store <16 x i8> %1324, <16 x i8>* %1327, align 1, !alias.scope !201, !noalias !203
  %1328 = or i64 %1308, 32
  %1329 = getelementptr i8, i8* %1278, i64 %1328
  %1330 = getelementptr i8, i8* %1277, i64 %1328
  %1331 = getelementptr i8, i8* %1276, i64 %1328
  %1332 = bitcast i8* %1329 to <16 x i8>*
  %1333 = load <16 x i8>, <16 x i8>* %1332, align 1, !alias.scope !196, !noalias !193
  %1334 = getelementptr i8, i8* %1329, i64 16
  %1335 = bitcast i8* %1334 to <16 x i8>*
  %1336 = load <16 x i8>, <16 x i8>* %1335, align 1, !alias.scope !196, !noalias !193
  %1337 = bitcast i8* %1330 to <16 x i8>*
  %1338 = load <16 x i8>, <16 x i8>* %1337, align 1, !alias.scope !199, !noalias !193
  %1339 = getelementptr i8, i8* %1330, i64 16
  %1340 = bitcast i8* %1339 to <16 x i8>*
  %1341 = load <16 x i8>, <16 x i8>* %1340, align 1, !alias.scope !199, !noalias !193
  %1342 = sub <16 x i8> %1333, %1338
  %1343 = sub <16 x i8> %1336, %1341
  %1344 = bitcast i8* %1331 to <16 x i8>*
  store <16 x i8> %1342, <16 x i8>* %1344, align 1, !alias.scope !201, !noalias !203
  %1345 = getelementptr i8, i8* %1331, i64 16
  %1346 = bitcast i8* %1345 to <16 x i8>*
  store <16 x i8> %1343, <16 x i8>* %1346, align 1, !alias.scope !201, !noalias !203
  %1347 = add i64 %1308, 64
  %1348 = add i64 %1309, -2
  %1349 = icmp eq i64 %1348, 0
  br i1 %1349, label %1350, label %1307, !llvm.loop !204

1350:                                             ; preds = %1307, %1295
  %1351 = phi i64 [ 0, %1295 ], [ %1347, %1307 ]
  %1352 = icmp eq i64 %1303, 0
  br i1 %1352, label %1372, label %1353

1353:                                             ; preds = %1350
  %1354 = getelementptr i8, i8* %1278, i64 %1351
  %1355 = getelementptr i8, i8* %1277, i64 %1351
  %1356 = getelementptr i8, i8* %1276, i64 %1351
  %1357 = bitcast i8* %1354 to <16 x i8>*
  %1358 = load <16 x i8>, <16 x i8>* %1357, align 1, !alias.scope !196, !noalias !193
  %1359 = getelementptr i8, i8* %1354, i64 16
  %1360 = bitcast i8* %1359 to <16 x i8>*
  %1361 = load <16 x i8>, <16 x i8>* %1360, align 1, !alias.scope !196, !noalias !193
  %1362 = bitcast i8* %1355 to <16 x i8>*
  %1363 = load <16 x i8>, <16 x i8>* %1362, align 1, !alias.scope !199, !noalias !193
  %1364 = getelementptr i8, i8* %1355, i64 16
  %1365 = bitcast i8* %1364 to <16 x i8>*
  %1366 = load <16 x i8>, <16 x i8>* %1365, align 1, !alias.scope !199, !noalias !193
  %1367 = sub <16 x i8> %1358, %1363
  %1368 = sub <16 x i8> %1361, %1366
  %1369 = bitcast i8* %1356 to <16 x i8>*
  store <16 x i8> %1367, <16 x i8>* %1369, align 1, !alias.scope !201, !noalias !203
  %1370 = getelementptr i8, i8* %1356, i64 16
  %1371 = bitcast i8* %1370 to <16 x i8>*
  store <16 x i8> %1368, <16 x i8>* %1371, align 1, !alias.scope !201, !noalias !203
  br label %1372

1372:                                             ; preds = %1350, %1353
  %1373 = icmp eq i64 %1296, %1279
  br i1 %1373, label %1438, label %1374

1374:                                             ; preds = %1372, %1283, %1281
  %1375 = phi i8* [ %1278, %1283 ], [ %1278, %1281 ], [ %1297, %1372 ]
  %1376 = phi i8* [ %1277, %1283 ], [ %1277, %1281 ], [ %1298, %1372 ]
  %1377 = phi i8* [ %1276, %1283 ], [ %1276, %1281 ], [ %1299, %1372 ]
  %1378 = phi i64 [ 0, %1283 ], [ 0, %1281 ], [ %1296, %1372 ]
  %1379 = xor i64 %1378, -1
  %1380 = add nsw i64 %1379, %1279
  %1381 = and i64 %1279, 3
  %1382 = icmp eq i64 %1381, 0
  br i1 %1382, label %1398, label %1383

1383:                                             ; preds = %1374, %1383
  %1384 = phi i8* [ %1395, %1383 ], [ %1375, %1374 ]
  %1385 = phi i8* [ %1394, %1383 ], [ %1376, %1374 ]
  %1386 = phi i8* [ %1393, %1383 ], [ %1377, %1374 ]
  %1387 = phi i64 [ %1392, %1383 ], [ %1378, %1374 ]
  %1388 = phi i64 [ %1396, %1383 ], [ %1381, %1374 ]
  %1389 = load i8, i8* %1384, align 1, !noalias !193
  %1390 = load i8, i8* %1385, align 1, !noalias !193
  %1391 = sub i8 %1389, %1390
  store i8 %1391, i8* %1386, align 1, !noalias !193
  %1392 = add nuw nsw i64 %1387, 1
  %1393 = getelementptr inbounds i8, i8* %1386, i64 1
  %1394 = getelementptr inbounds i8, i8* %1385, i64 1
  %1395 = getelementptr inbounds i8, i8* %1384, i64 1
  %1396 = add i64 %1388, -1
  %1397 = icmp eq i64 %1396, 0
  br i1 %1397, label %1398, label %1383, !llvm.loop !205

1398:                                             ; preds = %1383, %1374
  %1399 = phi i8* [ undef, %1374 ], [ %1393, %1383 ]
  %1400 = phi i8* [ undef, %1374 ], [ %1394, %1383 ]
  %1401 = phi i8* [ undef, %1374 ], [ %1395, %1383 ]
  %1402 = phi i8* [ %1375, %1374 ], [ %1395, %1383 ]
  %1403 = phi i8* [ %1376, %1374 ], [ %1394, %1383 ]
  %1404 = phi i8* [ %1377, %1374 ], [ %1393, %1383 ]
  %1405 = phi i64 [ %1378, %1374 ], [ %1392, %1383 ]
  %1406 = icmp ult i64 %1380, 3
  br i1 %1406, label %1438, label %1407

1407:                                             ; preds = %1398, %1407
  %1408 = phi i8* [ %1436, %1407 ], [ %1402, %1398 ]
  %1409 = phi i8* [ %1435, %1407 ], [ %1403, %1398 ]
  %1410 = phi i8* [ %1434, %1407 ], [ %1404, %1398 ]
  %1411 = phi i64 [ %1433, %1407 ], [ %1405, %1398 ]
  %1412 = load i8, i8* %1408, align 1, !noalias !193
  %1413 = load i8, i8* %1409, align 1, !noalias !193
  %1414 = sub i8 %1412, %1413
  store i8 %1414, i8* %1410, align 1, !noalias !193
  %1415 = getelementptr inbounds i8, i8* %1410, i64 1
  %1416 = getelementptr inbounds i8, i8* %1409, i64 1
  %1417 = getelementptr inbounds i8, i8* %1408, i64 1
  %1418 = load i8, i8* %1417, align 1, !noalias !193
  %1419 = load i8, i8* %1416, align 1, !noalias !193
  %1420 = sub i8 %1418, %1419
  store i8 %1420, i8* %1415, align 1, !noalias !193
  %1421 = getelementptr inbounds i8, i8* %1410, i64 2
  %1422 = getelementptr inbounds i8, i8* %1409, i64 2
  %1423 = getelementptr inbounds i8, i8* %1408, i64 2
  %1424 = load i8, i8* %1423, align 1, !noalias !193
  %1425 = load i8, i8* %1422, align 1, !noalias !193
  %1426 = sub i8 %1424, %1425
  store i8 %1426, i8* %1421, align 1, !noalias !193
  %1427 = getelementptr inbounds i8, i8* %1410, i64 3
  %1428 = getelementptr inbounds i8, i8* %1409, i64 3
  %1429 = getelementptr inbounds i8, i8* %1408, i64 3
  %1430 = load i8, i8* %1429, align 1, !noalias !193
  %1431 = load i8, i8* %1428, align 1, !noalias !193
  %1432 = sub i8 %1430, %1431
  store i8 %1432, i8* %1427, align 1, !noalias !193
  %1433 = add nuw nsw i64 %1411, 4
  %1434 = getelementptr inbounds i8, i8* %1410, i64 4
  %1435 = getelementptr inbounds i8, i8* %1409, i64 4
  %1436 = getelementptr inbounds i8, i8* %1408, i64 4
  %1437 = icmp eq i64 %1433, %1279
  br i1 %1437, label %1438, label %1407, !llvm.loop !206

1438:                                             ; preds = %1398, %1407, %1372, %1270
  %1439 = phi i8* [ %1276, %1270 ], [ %1299, %1372 ], [ %1399, %1398 ], [ %1434, %1407 ]
  %1440 = phi i8* [ %1277, %1270 ], [ %1298, %1372 ], [ %1400, %1398 ], [ %1435, %1407 ]
  %1441 = phi i8* [ %1278, %1270 ], [ %1297, %1372 ], [ %1401, %1398 ], [ %1436, %1407 ]
  %1442 = icmp ugt i64 %7, %1279
  br i1 %1442, label %1443, label %1569

1443:                                             ; preds = %1438
  %1444 = sub i64 %7, %1279
  %1445 = icmp ult i64 %1444, 16
  br i1 %1445, label %1522, label %1446

1446:                                             ; preds = %1443
  %1447 = sub i64 %7, %1279
  %1448 = getelementptr i8, i8* %1439, i64 %1447
  %1449 = add i64 %7, 1
  %1450 = sub i64 %1449, %1279
  %1451 = getelementptr i8, i8* %1275, i64 %1450
  %1452 = getelementptr i8, i8* %1440, i64 %1447
  %1453 = getelementptr i8, i8* %1441, i64 %1447
  %1454 = getelementptr i8, i8* %1273, i64 %1450
  %1455 = icmp ult i8* %1439, %1451
  %1456 = icmp ult i8* %1277, %1448
  %1457 = and i1 %1455, %1456
  %1458 = icmp ult i8* %1439, %1452
  %1459 = icmp ult i8* %1440, %1448
  %1460 = and i1 %1458, %1459
  %1461 = or i1 %1457, %1460
  %1462 = icmp ult i8* %1439, %1453
  %1463 = icmp ult i8* %1441, %1448
  %1464 = and i1 %1462, %1463
  %1465 = or i1 %1461, %1464
  %1466 = icmp ult i8* %1439, %1454
  %1467 = icmp ult i8* %1278, %1448
  %1468 = and i1 %1466, %1467
  %1469 = or i1 %1465, %1468
  br i1 %1469, label %1522, label %1470

1470:                                             ; preds = %1446
  %1471 = and i64 %1444, -16
  %1472 = getelementptr i8, i8* %1275, i64 %1471
  %1473 = getelementptr i8, i8* %1273, i64 %1471
  %1474 = add i64 %1471, %1279
  %1475 = getelementptr i8, i8* %1440, i64 %1471
  %1476 = getelementptr i8, i8* %1439, i64 %1471
  %1477 = getelementptr i8, i8* %1441, i64 %1471
  %1478 = getelementptr i8, i8* %1275, i64 1
  %1479 = getelementptr i8, i8* %1273, i64 1
  br label %1480

1480:                                             ; preds = %1480, %1470
  %1481 = phi i64 [ 0, %1470 ], [ %1518, %1480 ]
  %1482 = getelementptr i8, i8* %1440, i64 %1481
  %1483 = getelementptr i8, i8* %1439, i64 %1481
  %1484 = getelementptr i8, i8* %1441, i64 %1481
  %1485 = getelementptr inbounds i8, i8* %1479, i64 %1481
  %1486 = getelementptr inbounds i8, i8* %1478, i64 %1481
  %1487 = bitcast i8* %1482 to <16 x i8>*
  %1488 = load <16 x i8>, <16 x i8>* %1487, align 1, !alias.scope !207, !noalias !193
  %1489 = zext <16 x i8> %1488 to <16 x i32>
  %1490 = bitcast i8* %1486 to <16 x i8>*
  %1491 = load <16 x i8>, <16 x i8>* %1490, align 1, !alias.scope !210, !noalias !193
  %1492 = zext <16 x i8> %1491 to <16 x i32>
  %1493 = bitcast i8* %1485 to <16 x i8>*
  %1494 = load <16 x i8>, <16 x i8>* %1493, align 1, !alias.scope !212, !noalias !193
  %1495 = zext <16 x i8> %1494 to <16 x i32>
  %1496 = sub nsw <16 x i32> %1489, %1492
  %1497 = sub nsw <16 x i32> %1495, %1492
  %1498 = icmp slt <16 x i32> %1496, zeroinitializer
  %1499 = sub nsw <16 x i32> zeroinitializer, %1496
  %1500 = select <16 x i1> %1498, <16 x i32> %1499, <16 x i32> %1496
  %1501 = icmp slt <16 x i32> %1497, zeroinitializer
  %1502 = sub nsw <16 x i32> zeroinitializer, %1497
  %1503 = select <16 x i1> %1501, <16 x i32> %1502, <16 x i32> %1497
  %1504 = add nsw <16 x i32> %1497, %1496
  %1505 = icmp slt <16 x i32> %1504, zeroinitializer
  %1506 = sub nsw <16 x i32> zeroinitializer, %1504
  %1507 = select <16 x i1> %1505, <16 x i32> %1506, <16 x i32> %1504
  %1508 = icmp sgt <16 x i32> %1500, %1503
  %1509 = icmp sgt <16 x i32> %1500, %1507
  %1510 = or <16 x i1> %1508, %1509
  %1511 = icmp sgt <16 x i32> %1503, %1507
  %1512 = select <16 x i1> %1511, <16 x i8> %1491, <16 x i8> %1488
  %1513 = select <16 x i1> %1510, <16 x i8> %1512, <16 x i8> %1494
  %1514 = bitcast i8* %1484 to <16 x i8>*
  %1515 = load <16 x i8>, <16 x i8>* %1514, align 1, !alias.scope !214, !noalias !193
  %1516 = sub <16 x i8> %1515, %1513
  %1517 = bitcast i8* %1483 to <16 x i8>*
  store <16 x i8> %1516, <16 x i8>* %1517, align 1, !alias.scope !216, !noalias !218
  %1518 = add i64 %1481, 16
  %1519 = icmp eq i64 %1518, %1471
  br i1 %1519, label %1520, label %1480, !llvm.loop !219

1520:                                             ; preds = %1480
  %1521 = icmp eq i64 %1444, %1471
  br i1 %1521, label %1569, label %1522

1522:                                             ; preds = %1520, %1446, %1443
  %1523 = phi i8* [ %1275, %1446 ], [ %1275, %1443 ], [ %1472, %1520 ]
  %1524 = phi i8* [ %1273, %1446 ], [ %1273, %1443 ], [ %1473, %1520 ]
  %1525 = phi i64 [ %1279, %1446 ], [ %1279, %1443 ], [ %1474, %1520 ]
  %1526 = phi i8* [ %1440, %1446 ], [ %1440, %1443 ], [ %1475, %1520 ]
  %1527 = phi i8* [ %1439, %1446 ], [ %1439, %1443 ], [ %1476, %1520 ]
  %1528 = phi i8* [ %1441, %1446 ], [ %1441, %1443 ], [ %1477, %1520 ]
  br label %1529

1529:                                             ; preds = %1522, %1529
  %1530 = phi i8* [ %1537, %1529 ], [ %1523, %1522 ]
  %1531 = phi i8* [ %1536, %1529 ], [ %1524, %1522 ]
  %1532 = phi i64 [ %1567, %1529 ], [ %1525, %1522 ]
  %1533 = phi i8* [ %1538, %1529 ], [ %1526, %1522 ]
  %1534 = phi i8* [ %1566, %1529 ], [ %1527, %1522 ]
  %1535 = phi i8* [ %1563, %1529 ], [ %1528, %1522 ]
  %1536 = getelementptr inbounds i8, i8* %1531, i64 1
  %1537 = getelementptr inbounds i8, i8* %1530, i64 1
  %1538 = getelementptr inbounds i8, i8* %1533, i64 1
  %1539 = load i8, i8* %1533, align 1, !noalias !193
  %1540 = zext i8 %1539 to i32
  %1541 = load i8, i8* %1537, align 1, !noalias !193
  %1542 = zext i8 %1541 to i32
  %1543 = load i8, i8* %1536, align 1, !noalias !193
  %1544 = zext i8 %1543 to i32
  %1545 = sub nsw i32 %1540, %1542
  %1546 = sub nsw i32 %1544, %1542
  %1547 = icmp slt i32 %1545, 0
  %1548 = sub nsw i32 0, %1545
  %1549 = select i1 %1547, i32 %1548, i32 %1545
  %1550 = icmp slt i32 %1546, 0
  %1551 = sub nsw i32 0, %1546
  %1552 = select i1 %1550, i32 %1551, i32 %1546
  %1553 = add nsw i32 %1546, %1545
  %1554 = icmp slt i32 %1553, 0
  %1555 = sub nsw i32 0, %1553
  %1556 = select i1 %1554, i32 %1555, i32 %1553
  %1557 = icmp sgt i32 %1549, %1552
  %1558 = icmp sgt i32 %1549, %1556
  %1559 = or i1 %1557, %1558
  %1560 = icmp sgt i32 %1552, %1556
  %1561 = select i1 %1560, i8 %1541, i8 %1539
  %1562 = select i1 %1559, i8 %1561, i8 %1543
  %1563 = getelementptr inbounds i8, i8* %1535, i64 1
  %1564 = load i8, i8* %1535, align 1, !noalias !193
  %1565 = sub i8 %1564, %1562
  %1566 = getelementptr inbounds i8, i8* %1534, i64 1
  store i8 %1565, i8* %1534, align 1, !noalias !193
  %1567 = add nuw i64 %1532, 1
  %1568 = icmp eq i64 %1567, %7
  br i1 %1568, label %1569, label %1529, !llvm.loop !220

1569:                                             ; preds = %1529, %1520, %1438
  %1570 = load i8*, i8** %1271, align 8
  br label %1777

1571:                                             ; preds = %1266
  %1572 = trunc i32 %91 to i8
  %1573 = icmp slt i8 %1572, 0
  br i1 %1573, label %1574, label %1777

1574:                                             ; preds = %1571
  %1575 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 47
  %1576 = load i8*, i8** %1575, align 8, !alias.scope !221
  store i8 4, i8* %1576, align 1, !noalias !221
  %1577 = load i8*, i8** %13, align 8, !alias.scope !221
  %1578 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  %1579 = load i8*, i8** %1578, align 8, !alias.scope !221
  %1580 = getelementptr inbounds i8, i8* %1576, i64 1
  %1581 = getelementptr inbounds i8, i8* %1579, i64 1
  %1582 = getelementptr inbounds i8, i8* %1577, i64 1
  %1583 = zext i32 %12 to i64
  %1584 = icmp eq i32 %12, 0
  br i1 %1584, label %1713, label %1585

1585:                                             ; preds = %1574
  %1586 = icmp ult i32 %11, 32
  br i1 %1586, label %1646, label %1587

1587:                                             ; preds = %1585
  %1588 = add nuw nsw i64 %1583, 1
  %1589 = getelementptr i8, i8* %1576, i64 %1588
  %1590 = getelementptr i8, i8* %1577, i64 %1588
  %1591 = getelementptr i8, i8* %1579, i64 %1588
  %1592 = icmp ult i8* %1580, %1590
  %1593 = icmp ult i8* %1582, %1589
  %1594 = and i1 %1592, %1593
  %1595 = icmp ult i8* %1580, %1591
  %1596 = icmp ult i8* %1581, %1589
  %1597 = and i1 %1595, %1596
  %1598 = or i1 %1594, %1597
  br i1 %1598, label %1646, label %1599

1599:                                             ; preds = %1587
  %1600 = and i64 %1583, 60
  %1601 = getelementptr i8, i8* %1582, i64 %1600
  %1602 = getelementptr i8, i8* %1581, i64 %1600
  %1603 = getelementptr i8, i8* %1580, i64 %1600
  br label %1604

1604:                                             ; preds = %1604, %1599
  %1605 = phi i64 [ 0, %1599 ], [ %1638, %1604 ]
  %1606 = phi <2 x i64> [ zeroinitializer, %1599 ], [ %1636, %1604 ]
  %1607 = phi <2 x i64> [ zeroinitializer, %1599 ], [ %1637, %1604 ]
  %1608 = getelementptr i8, i8* %1582, i64 %1605
  %1609 = getelementptr i8, i8* %1581, i64 %1605
  %1610 = getelementptr i8, i8* %1580, i64 %1605
  %1611 = bitcast i8* %1608 to <2 x i8>*
  %1612 = load <2 x i8>, <2 x i8>* %1611, align 1, !alias.scope !224, !noalias !221
  %1613 = getelementptr i8, i8* %1608, i64 2
  %1614 = bitcast i8* %1613 to <2 x i8>*
  %1615 = load <2 x i8>, <2 x i8>* %1614, align 1, !alias.scope !224, !noalias !221
  %1616 = bitcast i8* %1609 to <2 x i8>*
  %1617 = load <2 x i8>, <2 x i8>* %1616, align 1, !alias.scope !227, !noalias !221
  %1618 = getelementptr i8, i8* %1609, i64 2
  %1619 = bitcast i8* %1618 to <2 x i8>*
  %1620 = load <2 x i8>, <2 x i8>* %1619, align 1, !alias.scope !227, !noalias !221
  %1621 = sub <2 x i8> %1612, %1617
  %1622 = sub <2 x i8> %1615, %1620
  %1623 = bitcast i8* %1610 to <2 x i8>*
  store <2 x i8> %1621, <2 x i8>* %1623, align 1, !alias.scope !229, !noalias !231
  %1624 = getelementptr i8, i8* %1610, i64 2
  %1625 = bitcast i8* %1624 to <2 x i8>*
  store <2 x i8> %1622, <2 x i8>* %1625, align 1, !alias.scope !229, !noalias !231
  %1626 = zext <2 x i8> %1621 to <2 x i32>
  %1627 = zext <2 x i8> %1622 to <2 x i32>
  %1628 = icmp sgt <2 x i8> %1621, <i8 -1, i8 -1>
  %1629 = icmp sgt <2 x i8> %1622, <i8 -1, i8 -1>
  %1630 = sub nuw nsw <2 x i32> <i32 256, i32 256>, %1626
  %1631 = sub nuw nsw <2 x i32> <i32 256, i32 256>, %1627
  %1632 = select <2 x i1> %1628, <2 x i32> %1626, <2 x i32> %1630
  %1633 = select <2 x i1> %1629, <2 x i32> %1627, <2 x i32> %1631
  %1634 = zext <2 x i32> %1632 to <2 x i64>
  %1635 = zext <2 x i32> %1633 to <2 x i64>
  %1636 = add <2 x i64> %1606, %1634
  %1637 = add <2 x i64> %1607, %1635
  %1638 = add i64 %1605, 4
  %1639 = icmp eq i64 %1638, %1600
  br i1 %1639, label %1640, label %1604, !llvm.loop !232

1640:                                             ; preds = %1604
  %1641 = add <2 x i64> %1637, %1636
  %1642 = shufflevector <2 x i64> %1641, <2 x i64> undef, <2 x i32> <i32 1, i32 undef>
  %1643 = add <2 x i64> %1641, %1642
  %1644 = extractelement <2 x i64> %1643, i32 0
  %1645 = icmp eq i64 %1600, %1583
  br i1 %1645, label %1713, label %1646

1646:                                             ; preds = %1640, %1587, %1585
  %1647 = phi i8* [ %1582, %1587 ], [ %1582, %1585 ], [ %1601, %1640 ]
  %1648 = phi i8* [ %1581, %1587 ], [ %1581, %1585 ], [ %1602, %1640 ]
  %1649 = phi i8* [ %1580, %1587 ], [ %1580, %1585 ], [ %1603, %1640 ]
  %1650 = phi i64 [ 0, %1587 ], [ 0, %1585 ], [ %1644, %1640 ]
  %1651 = phi i64 [ 0, %1587 ], [ 0, %1585 ], [ %1600, %1640 ]
  %1652 = xor i64 %1651, -1
  %1653 = and i64 %1583, 1
  %1654 = icmp eq i64 %1653, 0
  br i1 %1654, label %1669, label %1655

1655:                                             ; preds = %1646
  %1656 = load i8, i8* %1647, align 1, !noalias !221
  %1657 = load i8, i8* %1648, align 1, !noalias !221
  %1658 = sub i8 %1656, %1657
  store i8 %1658, i8* %1649, align 1, !noalias !221
  %1659 = zext i8 %1658 to i32
  %1660 = icmp sgt i8 %1658, -1
  %1661 = sub nuw nsw i32 256, %1659
  %1662 = select i1 %1660, i32 %1659, i32 %1661
  %1663 = zext i32 %1662 to i64
  %1664 = add i64 %1650, %1663
  %1665 = or i64 %1651, 1
  %1666 = getelementptr inbounds i8, i8* %1649, i64 1
  %1667 = getelementptr inbounds i8, i8* %1648, i64 1
  %1668 = getelementptr inbounds i8, i8* %1647, i64 1
  br label %1669

1669:                                             ; preds = %1646, %1655
  %1670 = phi i64 [ undef, %1646 ], [ %1664, %1655 ]
  %1671 = phi i8* [ undef, %1646 ], [ %1666, %1655 ]
  %1672 = phi i8* [ undef, %1646 ], [ %1667, %1655 ]
  %1673 = phi i8* [ undef, %1646 ], [ %1668, %1655 ]
  %1674 = phi i8* [ %1647, %1646 ], [ %1668, %1655 ]
  %1675 = phi i8* [ %1648, %1646 ], [ %1667, %1655 ]
  %1676 = phi i8* [ %1649, %1646 ], [ %1666, %1655 ]
  %1677 = phi i64 [ %1650, %1646 ], [ %1664, %1655 ]
  %1678 = phi i64 [ %1651, %1646 ], [ %1665, %1655 ]
  %1679 = sub nsw i64 0, %1583
  %1680 = icmp eq i64 %1652, %1679
  br i1 %1680, label %1713, label %1681

1681:                                             ; preds = %1669, %1681
  %1682 = phi i8* [ %1711, %1681 ], [ %1674, %1669 ]
  %1683 = phi i8* [ %1710, %1681 ], [ %1675, %1669 ]
  %1684 = phi i8* [ %1709, %1681 ], [ %1676, %1669 ]
  %1685 = phi i64 [ %1707, %1681 ], [ %1677, %1669 ]
  %1686 = phi i64 [ %1708, %1681 ], [ %1678, %1669 ]
  %1687 = load i8, i8* %1682, align 1, !noalias !221
  %1688 = load i8, i8* %1683, align 1, !noalias !221
  %1689 = sub i8 %1687, %1688
  store i8 %1689, i8* %1684, align 1, !noalias !221
  %1690 = zext i8 %1689 to i32
  %1691 = icmp sgt i8 %1689, -1
  %1692 = sub nuw nsw i32 256, %1690
  %1693 = select i1 %1691, i32 %1690, i32 %1692
  %1694 = zext i32 %1693 to i64
  %1695 = add i64 %1685, %1694
  %1696 = getelementptr inbounds i8, i8* %1684, i64 1
  %1697 = getelementptr inbounds i8, i8* %1683, i64 1
  %1698 = getelementptr inbounds i8, i8* %1682, i64 1
  %1699 = load i8, i8* %1698, align 1, !noalias !221
  %1700 = load i8, i8* %1697, align 1, !noalias !221
  %1701 = sub i8 %1699, %1700
  store i8 %1701, i8* %1696, align 1, !noalias !221
  %1702 = zext i8 %1701 to i32
  %1703 = icmp sgt i8 %1701, -1
  %1704 = sub nuw nsw i32 256, %1702
  %1705 = select i1 %1703, i32 %1702, i32 %1704
  %1706 = zext i32 %1705 to i64
  %1707 = add i64 %1695, %1706
  %1708 = add nuw nsw i64 %1686, 2
  %1709 = getelementptr inbounds i8, i8* %1684, i64 2
  %1710 = getelementptr inbounds i8, i8* %1683, i64 2
  %1711 = getelementptr inbounds i8, i8* %1682, i64 2
  %1712 = icmp eq i64 %1708, %1583
  br i1 %1712, label %1713, label %1681, !llvm.loop !233

1713:                                             ; preds = %1669, %1681, %1640, %1574
  %1714 = phi i64 [ 0, %1574 ], [ %1644, %1640 ], [ %1670, %1669 ], [ %1707, %1681 ]
  %1715 = phi i8* [ %1580, %1574 ], [ %1603, %1640 ], [ %1671, %1669 ], [ %1709, %1681 ]
  %1716 = phi i8* [ %1581, %1574 ], [ %1602, %1640 ], [ %1672, %1669 ], [ %1710, %1681 ]
  %1717 = phi i8* [ %1582, %1574 ], [ %1601, %1640 ], [ %1673, %1669 ], [ %1711, %1681 ]
  %1718 = icmp ugt i64 %7, %1583
  br i1 %1718, label %1719, label %1768

1719:                                             ; preds = %1713, %1762
  %1720 = phi i8* [ %1728, %1762 ], [ %1579, %1713 ]
  %1721 = phi i8* [ %1727, %1762 ], [ %1577, %1713 ]
  %1722 = phi i64 [ %1760, %1762 ], [ %1714, %1713 ]
  %1723 = phi i64 [ %1766, %1762 ], [ %1583, %1713 ]
  %1724 = phi i8* [ %1765, %1762 ], [ %1716, %1713 ]
  %1725 = phi i8* [ %1763, %1762 ], [ %1715, %1713 ]
  %1726 = phi i8* [ %1764, %1762 ], [ %1717, %1713 ]
  %1727 = getelementptr inbounds i8, i8* %1721, i64 1
  %1728 = getelementptr inbounds i8, i8* %1720, i64 1
  %1729 = load i8, i8* %1724, align 1, !noalias !221
  %1730 = zext i8 %1729 to i32
  %1731 = load i8, i8* %1728, align 1, !noalias !221
  %1732 = zext i8 %1731 to i32
  %1733 = load i8, i8* %1727, align 1, !noalias !221
  %1734 = zext i8 %1733 to i32
  %1735 = sub nsw i32 %1730, %1732
  %1736 = sub nsw i32 %1734, %1732
  %1737 = icmp slt i32 %1735, 0
  %1738 = sub nsw i32 0, %1735
  %1739 = select i1 %1737, i32 %1738, i32 %1735
  %1740 = icmp slt i32 %1736, 0
  %1741 = sub nsw i32 0, %1736
  %1742 = select i1 %1740, i32 %1741, i32 %1736
  %1743 = add nsw i32 %1736, %1735
  %1744 = icmp slt i32 %1743, 0
  %1745 = sub nsw i32 0, %1743
  %1746 = select i1 %1744, i32 %1745, i32 %1743
  %1747 = icmp sgt i32 %1739, %1742
  %1748 = icmp sgt i32 %1739, %1746
  %1749 = or i1 %1747, %1748
  %1750 = icmp sgt i32 %1742, %1746
  %1751 = select i1 %1750, i8 %1731, i8 %1729
  %1752 = select i1 %1749, i8 %1751, i8 %1733
  %1753 = load i8, i8* %1726, align 1, !noalias !221
  %1754 = sub i8 %1753, %1752
  store i8 %1754, i8* %1725, align 1, !noalias !221
  %1755 = zext i8 %1754 to i32
  %1756 = icmp sgt i8 %1754, -1
  %1757 = sub nuw nsw i32 256, %1755
  %1758 = select i1 %1756, i32 %1755, i32 %1757
  %1759 = zext i32 %1758 to i64
  %1760 = add i64 %1722, %1759
  %1761 = icmp ugt i64 %1760, %1267
  br i1 %1761, label %1768, label %1762

1762:                                             ; preds = %1719
  %1763 = getelementptr inbounds i8, i8* %1725, i64 1
  %1764 = getelementptr inbounds i8, i8* %1726, i64 1
  %1765 = getelementptr inbounds i8, i8* %1724, i64 1
  %1766 = add i64 %1723, 1
  %1767 = icmp eq i64 %1766, %7
  br i1 %1767, label %1768, label %1719

1768:                                             ; preds = %1719, %1762, %1713
  %1769 = phi i64 [ %1714, %1713 ], [ %1760, %1762 ], [ %1760, %1719 ]
  %1770 = icmp ult i64 %1769, %1267
  br i1 %1770, label %1771, label %1777

1771:                                             ; preds = %1768
  %1772 = load i8*, i8** %1575, align 8
  %1773 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 48
  %1774 = load i8*, i8** %1773, align 8
  %1775 = icmp eq i8* %1774, null
  br i1 %1775, label %1777, label %1776

1776:                                             ; preds = %1771
  store i8* %1774, i8** %1575, align 8
  store i8* %1772, i8** %1773, align 8
  br label %1777

1777:                                             ; preds = %1768, %1776, %1771, %1571, %1569
  %1778 = phi i8* [ %1570, %1569 ], [ %1268, %1571 ], [ %1772, %1776 ], [ %1772, %1771 ], [ %1268, %1768 ]
  %1779 = load i64, i64* %6, align 8
  %1780 = add i64 %1779, 1
  tail call void @cr_png_compress_IDAT(%struct.png_struct_def* %0, i8* %1778, i64 %1780, i32 0) #6
  %1781 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 45
  %1782 = load i8*, i8** %1781, align 8, !alias.scope !234
  %1783 = icmp eq i8* %1782, null
  br i1 %1783, label %1788, label %1784

1784:                                             ; preds = %1777
  %1785 = bitcast i8** %13 to i64*
  %1786 = load i64, i64* %1785, align 8, !alias.scope !234
  %1787 = bitcast i8** %1781 to i64*
  store i64 %1786, i64* %1787, align 8, !alias.scope !234
  store i8* %1782, i8** %13, align 8, !alias.scope !234
  br label %1788

1788:                                             ; preds = %1784, %1777
  tail call void @cr_png_write_finish_row(%struct.png_struct_def* %0) #6
  %1789 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 77
  %1790 = load i32, i32* %1789, align 4, !alias.scope !234
  %1791 = add i32 %1790, 1
  store i32 %1791, i32* %1789, align 4, !alias.scope !234
  %1792 = getelementptr inbounds %struct.png_struct_def, %struct.png_struct_def* %0, i64 0, i32 76
  %1793 = load i32, i32* %1792, align 8, !alias.scope !234
  %1794 = add i32 %1793, -1
  %1795 = icmp ult i32 %1794, %1791
  br i1 %1795, label %1796, label %1797

1796:                                             ; preds = %1788
  tail call void @cr_png_write_flush(%struct.png_struct_def* %0) #6
  br label %1797

1797:                                             ; preds = %1788, %1796
  ret void
}

declare void @cr_png_reset_crc(%struct.png_struct_def*) local_unnamed_addr #3

declare i64 @cr_png_safecat(i8*, i64, i64, i8*) local_unnamed_addr #3

declare i32 @Cr_z_deflateEnd(%struct.z_stream_s*) local_unnamed_addr #3

declare i32 @Cr_z_deflateReset(%struct.z_stream_s*) local_unnamed_addr #3

declare i32 @Cr_z_deflateInit2_(%struct.z_stream_s*, i32, i32, i32, i32, i32, i8*, i32) local_unnamed_addr #3

declare noalias i8* @cr_png_malloc_base(%struct.png_struct_def*, i64) local_unnamed_addr #3

declare void @cr_png_write_flush(%struct.png_struct_def*) local_unnamed_addr #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }
attributes #8 = { nounwind readonly }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"png_write_chunk_header: argument 0"}
!4 = distinct !{!4, !"png_write_chunk_header"}
!5 = !{!6}
!6 = distinct !{!6, !7, !"png_write_chunk_header: argument 0"}
!7 = distinct !{!7, !"png_write_chunk_header"}
!8 = !{!9}
!9 = distinct !{!9, !10, !"cr_png_write_chunk_end: argument 0"}
!10 = distinct !{!10, !"cr_png_write_chunk_end"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"png_write_chunk_header: argument 0"}
!13 = distinct !{!13, !"png_write_chunk_header"}
!14 = !{!15}
!15 = distinct !{!15, !16, !"cr_png_write_chunk_end: argument 0"}
!16 = distinct !{!16, !"cr_png_write_chunk_end"}
!17 = !{!18}
!18 = distinct !{!18, !19, !"png_write_chunk_header: argument 0"}
!19 = distinct !{!19, !"png_write_chunk_header"}
!20 = !{!21}
!21 = distinct !{!21, !22, !"cr_png_write_chunk_end: argument 0"}
!22 = distinct !{!22, !"cr_png_write_chunk_end"}
!23 = !{!24}
!24 = distinct !{!24, !25, !"cr_png_free_buffer_list: argument 0"}
!25 = distinct !{!25, !"cr_png_free_buffer_list"}
!26 = !{!27}
!27 = distinct !{!27, !28, !"png_image_size: argument 0"}
!28 = distinct !{!28, !"png_image_size"}
!29 = !{!30}
!30 = distinct !{!30, !31, !"png_write_chunk_header: argument 0"}
!31 = distinct !{!31, !"png_write_chunk_header"}
!32 = !{!33}
!33 = distinct !{!33, !34, !"cr_png_write_chunk_end: argument 0"}
!34 = distinct !{!34, !"cr_png_write_chunk_end"}
!35 = !{!36}
!36 = distinct !{!36, !37, !"png_write_chunk_header: argument 0"}
!37 = distinct !{!37, !"png_write_chunk_header"}
!38 = !{!39}
!39 = distinct !{!39, !40, !"cr_png_write_chunk_end: argument 0"}
!40 = distinct !{!40, !"cr_png_write_chunk_end"}
!41 = !{!42}
!42 = distinct !{!42, !43, !"png_write_chunk_header: argument 0"}
!43 = distinct !{!43, !"png_write_chunk_header"}
!44 = !{!45}
!45 = distinct !{!45, !46, !"cr_png_write_chunk_end: argument 0"}
!46 = distinct !{!46, !"cr_png_write_chunk_end"}
!47 = !{!48}
!48 = distinct !{!48, !49, !"png_write_chunk_header: argument 0"}
!49 = distinct !{!49, !"png_write_chunk_header"}
!50 = !{!51}
!51 = distinct !{!51, !52, !"cr_png_write_chunk_end: argument 0"}
!52 = distinct !{!52, !"cr_png_write_chunk_end"}
!53 = !{!54}
!54 = distinct !{!54, !55, !"png_write_chunk_header: argument 0"}
!55 = distinct !{!55, !"png_write_chunk_header"}
!56 = !{!57}
!57 = distinct !{!57, !58, !"cr_png_write_chunk_end: argument 0"}
!58 = distinct !{!58, !"cr_png_write_chunk_end"}
!59 = !{!60}
!60 = distinct !{!60, !61, !"png_write_chunk_header: argument 0"}
!61 = distinct !{!61, !"png_write_chunk_header"}
!62 = !{!63}
!63 = distinct !{!63, !64, !"png_write_compressed_data_out: argument 0"}
!64 = distinct !{!64, !"png_write_compressed_data_out"}
!65 = !{!66}
!66 = distinct !{!66, !67, !"cr_png_write_chunk_end: argument 0"}
!67 = distinct !{!67, !"cr_png_write_chunk_end"}
!68 = !{!69}
!69 = distinct !{!69, !70, !"png_write_chunk_header: argument 0"}
!70 = distinct !{!70, !"png_write_chunk_header"}
!71 = !{!72}
!72 = distinct !{!72, !73, !"cr_png_write_chunk_end: argument 0"}
!73 = distinct !{!73, !"cr_png_write_chunk_end"}
!74 = !{!75}
!75 = distinct !{!75, !76, !"png_write_chunk_header: argument 0"}
!76 = distinct !{!76, !"png_write_chunk_header"}
!77 = !{!78}
!78 = distinct !{!78, !79, !"cr_png_write_chunk_end: argument 0"}
!79 = distinct !{!79, !"cr_png_write_chunk_end"}
!80 = !{!81}
!81 = distinct !{!81, !82, !"png_write_chunk_header: argument 0"}
!82 = distinct !{!82, !"png_write_chunk_header"}
!83 = !{!84}
!84 = distinct !{!84, !85, !"cr_png_write_chunk_end: argument 0"}
!85 = distinct !{!85, !"cr_png_write_chunk_end"}
!86 = !{!87}
!87 = distinct !{!87, !88, !"png_write_chunk_header: argument 0"}
!88 = distinct !{!88, !"png_write_chunk_header"}
!89 = !{!90}
!90 = distinct !{!90, !91, !"cr_png_write_chunk_end: argument 0"}
!91 = distinct !{!91, !"cr_png_write_chunk_end"}
!92 = !{!93}
!93 = distinct !{!93, !94, !"png_write_chunk_header: argument 0"}
!94 = distinct !{!94, !"png_write_chunk_header"}
!95 = !{!96}
!96 = distinct !{!96, !97, !"cr_png_write_chunk_end: argument 0"}
!97 = distinct !{!97, !"cr_png_write_chunk_end"}
!98 = !{!99}
!99 = distinct !{!99, !100, !"png_write_chunk_header: argument 0"}
!100 = distinct !{!100, !"png_write_chunk_header"}
!101 = !{!102}
!102 = distinct !{!102, !103, !"png_write_compressed_data_out: argument 0"}
!103 = distinct !{!103, !"png_write_compressed_data_out"}
!104 = !{!105}
!105 = distinct !{!105, !106, !"cr_png_write_chunk_end: argument 0"}
!106 = distinct !{!106, !"cr_png_write_chunk_end"}
!107 = distinct !{!107, !108}
!108 = !{!"llvm.loop.unroll.disable"}
!109 = !{!110}
!110 = distinct !{!110, !111, !"png_setup_sub_row_only: argument 0"}
!111 = distinct !{!111, !"png_setup_sub_row_only"}
!112 = !{!113}
!113 = distinct !{!113, !114}
!114 = distinct !{!114, !"LVerDomain"}
!115 = !{!116}
!116 = distinct !{!116, !114}
!117 = !{!110, !113}
!118 = distinct !{!118, !119}
!119 = !{!"llvm.loop.isvectorized", i32 1}
!120 = distinct !{!120, !108}
!121 = distinct !{!121, !108}
!122 = distinct !{!122, !119}
!123 = !{!124}
!124 = distinct !{!124, !125}
!125 = distinct !{!125, !"LVerDomain"}
!126 = !{!127}
!127 = distinct !{!127, !125}
!128 = !{!129}
!129 = distinct !{!129, !125}
!130 = !{!110, !127, !124}
!131 = distinct !{!131, !119}
!132 = distinct !{!132, !108}
!133 = distinct !{!133, !119}
!134 = !{!135}
!135 = distinct !{!135, !136, !"png_setup_sub_row: argument 0"}
!136 = distinct !{!136, !"png_setup_sub_row"}
!137 = !{!138}
!138 = distinct !{!138, !139, !"png_setup_up_row_only: argument 0"}
!139 = distinct !{!139, !"png_setup_up_row_only"}
!140 = !{!141}
!141 = distinct !{!141, !142}
!142 = distinct !{!142, !"LVerDomain"}
!143 = !{!144}
!144 = distinct !{!144, !142}
!145 = !{!146}
!146 = distinct !{!146, !142}
!147 = !{!138, !141, !144}
!148 = distinct !{!148, !119}
!149 = distinct !{!149, !108}
!150 = distinct !{!150, !119}
!151 = !{!152}
!152 = distinct !{!152, !153, !"png_setup_up_row: argument 0"}
!153 = distinct !{!153, !"png_setup_up_row"}
!154 = !{!155}
!155 = distinct !{!155, !156, !"png_setup_avg_row_only: argument 0"}
!156 = distinct !{!156, !"png_setup_avg_row_only"}
!157 = !{!158}
!158 = distinct !{!158, !159}
!159 = distinct !{!159, !"LVerDomain"}
!160 = !{!161}
!161 = distinct !{!161, !159}
!162 = !{!163}
!163 = distinct !{!163, !159}
!164 = !{!155, !158, !161}
!165 = distinct !{!165, !119}
!166 = distinct !{!166, !108}
!167 = distinct !{!167, !119}
!168 = !{!169}
!169 = distinct !{!169, !170}
!170 = distinct !{!170, !"LVerDomain"}
!171 = !{!172}
!172 = distinct !{!172, !170}
!173 = !{!174}
!174 = distinct !{!174, !170}
!175 = !{!176}
!176 = distinct !{!176, !170}
!177 = !{!155, !174, !169, !172}
!178 = distinct !{!178, !119}
!179 = distinct !{!179, !119}
!180 = !{!181}
!181 = distinct !{!181, !182, !"png_setup_avg_row: argument 0"}
!182 = distinct !{!182, !"png_setup_avg_row"}
!183 = !{!184}
!184 = distinct !{!184, !185}
!185 = distinct !{!185, !"LVerDomain"}
!186 = !{!187}
!187 = distinct !{!187, !185}
!188 = !{!189}
!189 = distinct !{!189, !185}
!190 = !{!181, !184, !187}
!191 = distinct !{!191, !119}
!192 = distinct !{!192, !119}
!193 = !{!194}
!194 = distinct !{!194, !195, !"png_setup_paeth_row_only: argument 0"}
!195 = distinct !{!195, !"png_setup_paeth_row_only"}
!196 = !{!197}
!197 = distinct !{!197, !198}
!198 = distinct !{!198, !"LVerDomain"}
!199 = !{!200}
!200 = distinct !{!200, !198}
!201 = !{!202}
!202 = distinct !{!202, !198}
!203 = !{!194, !197, !200}
!204 = distinct !{!204, !119}
!205 = distinct !{!205, !108}
!206 = distinct !{!206, !119}
!207 = !{!208}
!208 = distinct !{!208, !209}
!209 = distinct !{!209, !"LVerDomain"}
!210 = !{!211}
!211 = distinct !{!211, !209}
!212 = !{!213}
!213 = distinct !{!213, !209}
!214 = !{!215}
!215 = distinct !{!215, !209}
!216 = !{!217}
!217 = distinct !{!217, !209}
!218 = !{!194, !211, !208, !215, !213}
!219 = distinct !{!219, !119}
!220 = distinct !{!220, !119}
!221 = !{!222}
!222 = distinct !{!222, !223, !"png_setup_paeth_row: argument 0"}
!223 = distinct !{!223, !"png_setup_paeth_row"}
!224 = !{!225}
!225 = distinct !{!225, !226}
!226 = distinct !{!226, !"LVerDomain"}
!227 = !{!228}
!228 = distinct !{!228, !226}
!229 = !{!230}
!230 = distinct !{!230, !226}
!231 = !{!222, !225, !228}
!232 = distinct !{!232, !119}
!233 = distinct !{!233, !119}
!234 = !{!235}
!235 = distinct !{!235, !236, !"png_write_filtered_row: argument 0"}
!236 = distinct !{!236, !"png_write_filtered_row"}
