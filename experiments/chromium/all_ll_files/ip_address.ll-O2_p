; ModuleID = '../../net/base/ip_address.cc'
source_filename = "../../net/base/ip_address.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.anon.18 = type { [4 x i8], i64 }
%"class.net::IPAddressBytes" = type { %"struct.std::__1::array", i8 }
%"struct.std::__1::array" = type { [16 x i8] }
%"class.net::IPAddress" = type { %"class.net::IPAddressBytes" }
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.base::StackVector" = type { %"class.base::StackContainer" }
%"class.base::StackContainer" = type { %"struct.base::StackAllocator<unsigned char, 16>::Source", %"class.base::StackAllocator", %"class.std::__1::vector.6" }
%"struct.base::StackAllocator<unsigned char, 16>::Source" = type { [16 x i8], i8 }
%"class.base::StackAllocator" = type { %"struct.base::StackAllocator<unsigned char, 16>::Source"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { i8*, i8*, %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.base::StackAllocator" }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.url::Component" = type { i32, i32 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.url::StdStringCanonOutput" = type { %"class.url::CanonOutputT", %"class.std::__1::basic_string"* }
%"class.url::CanonOutputT" = type { i32 (...)**, i8*, i32, i32 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.std::__1::vector.11" = type { %"class.std::__1::__vector_base.12" }
%"class.std::__1::__vector_base.12" = type { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.std::__1::__compressed_pair.13" }
%"class.std::__1::__compressed_pair.13" = type { %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.base::BasicStringPiece"* }

$_ZNSt3__16vectorIhN4base14StackAllocatorIhLm16EEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS9_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSD_IS7_EES9_S9_ = comdat any

$_ZNSt3__16vectorIhN4base14StackAllocatorIhLm16EEEE8__appendEmRKh = comdat any

@.str = private unnamed_addr constant [16 x i8] c"16u >= data_len\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"../../net/base/ip_address.cc\00", align 1
@_ZN3net12_GLOBAL__N_158g_consider_loopback_ip_to_be_publicly_routable_for_testingE = internal unnamed_addr global i1 false, align 1
@_ZN3net12_GLOBAL__N_117kIPv4MappedPrefixE = internal constant [12 x i8] c"\00\00\00\00\00\00\00\00\00\00\FF\FF", align 1
@_ZZN3net9IPAddress13IPv6LocalhostEvE14kLocalhostIPv6 = internal unnamed_addr constant [16 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\01", align 16
@.str.2 = private unnamed_addr constant [22 x i8] c"num_zero_bytes <= 16u\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"[%s]:%d\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"%s:%d\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@_ZZN3net12_GLOBAL__N_122IsPubliclyRoutableIPv4ERKNS_14IPAddressBytesEE19kReservedIPv4Ranges = internal constant [13 x %struct.anon.18] [%struct.anon.18 { [4 x i8] zeroinitializer, i64 8 }, %struct.anon.18 { [4 x i8] c"\0A\00\00\00", i64 8 }, %struct.anon.18 { [4 x i8] c"d@\00\00", i64 10 }, %struct.anon.18 { [4 x i8] c"\7F\00\00\00", i64 8 }, %struct.anon.18 { [4 x i8] c"\A9\FE\00\00", i64 16 }, %struct.anon.18 { [4 x i8] c"\AC\10\00\00", i64 12 }, %struct.anon.18 { [4 x i8] c"\C0\00\02\00", i64 24 }, %struct.anon.18 { [4 x i8] c"\C0Xc\00", i64 24 }, %struct.anon.18 { [4 x i8] c"\C0\A8\00\00", i64 16 }, %struct.anon.18 { [4 x i8] c"\C6\12\00\00", i64 15 }, %struct.anon.18 { [4 x i8] c"\C63d\00", i64 24 }, %struct.anon.18 { [4 x i8] c"\CB\00q\00", i64 24 }, %struct.anon.18 { [4 x i8] c"\E0\00\00\00", i64 3 }], align 16
@.str.6 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"]\00", align 1

@_ZN3net14IPAddressBytesC1Ev = hidden unnamed_addr alias void (%"class.net::IPAddressBytes"*), void (%"class.net::IPAddressBytes"*)* @_ZN3net14IPAddressBytesC2Ev
@_ZN3net14IPAddressBytesC1EPKhm = hidden unnamed_addr alias void (%"class.net::IPAddressBytes"*, i8*, i64), void (%"class.net::IPAddressBytes"*, i8*, i64)* @_ZN3net14IPAddressBytesC2EPKhm
@_ZN3net14IPAddressBytesD1Ev = hidden unnamed_addr alias void (%"class.net::IPAddressBytes"*), void (%"class.net::IPAddressBytes"*)* @_ZN3net14IPAddressBytesD2Ev
@_ZN3net14IPAddressBytesC1ERKS0_ = hidden unnamed_addr alias void (%"class.net::IPAddressBytes"*, %"class.net::IPAddressBytes"*), void (%"class.net::IPAddressBytes"*, %"class.net::IPAddressBytes"*)* @_ZN3net14IPAddressBytesC2ERKS0_
@_ZN3net9IPAddressC1Ev = hidden unnamed_addr alias void (%"class.net::IPAddress"*), void (%"class.net::IPAddress"*)* @_ZN3net9IPAddressC2Ev
@_ZN3net9IPAddressC1ERKS0_ = hidden unnamed_addr alias void (%"class.net::IPAddress"*, %"class.net::IPAddress"*), void (%"class.net::IPAddress"*, %"class.net::IPAddress"*)* @_ZN3net9IPAddressC2ERKS0_
@_ZN3net9IPAddressC1ERKNS_14IPAddressBytesE = hidden unnamed_addr alias void (%"class.net::IPAddress"*, %"class.net::IPAddressBytes"*), void (%"class.net::IPAddress"*, %"class.net::IPAddressBytes"*)* @_ZN3net9IPAddressC2ERKNS_14IPAddressBytesE
@_ZN3net9IPAddressC1EPKhm = hidden unnamed_addr alias void (%"class.net::IPAddress"*, i8*, i64), void (%"class.net::IPAddress"*, i8*, i64)* @_ZN3net9IPAddressC2EPKhm
@_ZN3net9IPAddressC1Ehhhh = hidden unnamed_addr alias void (%"class.net::IPAddress"*, i8, i8, i8, i8), void (%"class.net::IPAddress"*, i8, i8, i8, i8)* @_ZN3net9IPAddressC2Ehhhh
@_ZN3net9IPAddressC1Ehhhhhhhhhhhhhhhh = hidden unnamed_addr alias void (%"class.net::IPAddress"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8), void (%"class.net::IPAddress"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8)* @_ZN3net9IPAddressC2Ehhhhhhhhhhhhhhhh
@_ZN3net9IPAddressD1Ev = hidden unnamed_addr alias void (%"class.net::IPAddress"*), void (%"class.net::IPAddress"*)* @_ZN3net9IPAddressD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3net14IPAddressBytesC2Ev(%"class.net::IPAddressBytes"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::IPAddressBytes", %"class.net::IPAddressBytes"* %0, i64 0, i32 1
  store i8 0, i8* %2, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net14IPAddressBytesC2EPKhm(%"class.net::IPAddressBytes"* nocapture, i8* nocapture readonly, i64) unnamed_addr #1 align 2 {
  tail call void @_ZN3net14IPAddressBytes6AssignEPKhm(%"class.net::IPAddressBytes"* %0, i8* %1, i64 %2)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net14IPAddressBytes6AssignEPKhm(%"class.net::IPAddressBytes"* nocapture, i8* nocapture readonly, i64) local_unnamed_addr #1 align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = trunc i64 %2 to i8
  %8 = getelementptr inbounds %"class.net::IPAddressBytes", %"class.net::IPAddressBytes"* %0, i64 0, i32 1
  store i8 %7, i8* %8, align 1
  %9 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #12
  %10 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %10, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ugt i64 %2, 16
  br i1 %12, label %13, label %23

13:                                               ; preds = %3
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 16) #12
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %2) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8* %14, i8* %15) #12
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %17, i8** %10, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i32 155, %"class.logging::CheckOpResult"* nonnull %5) #12
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #12
  br label %22

22:                                               ; preds = %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #12
  br label %25

23:                                               ; preds = %3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #12
  %24 = icmp eq i64 %2, 0
  br i1 %24, label %27, label %25

25:                                               ; preds = %22, %23
  %26 = getelementptr inbounds %"class.net::IPAddressBytes", %"class.net::IPAddressBytes"* %0, i64 0, i32 0, i32 0, i64 0
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %26, i8* align 1 %1, i64 %2, i1 false) #12
  br label %27

27:                                               ; preds = %23, %25
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3net14IPAddressBytesD2Ev(%"class.net::IPAddressBytes"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net14IPAddressBytesC2ERKS0_(%"class.net::IPAddressBytes"* nocapture, %"class.net::IPAddressBytes"* nocapture readonly dereferenceable(17)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.net::IPAddressBytes", %"class.net::IPAddressBytes"* %0, i64 0, i32 0, i32 0, i64 0
  %4 = getelementptr inbounds %"class.net::IPAddressBytes", %"class.net::IPAddressBytes"* %1, i64 0, i32 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 1 %4, i64 17, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #4

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net14IPAddressBytesltERKS0_(%"class.net::IPAddressBytes"* readonly, %"class.net::IPAddressBytes"* readonly dereferenceable(17)) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.net::IPAddressBytes", %"class.net::IPAddressBytes"* %0, i64 0, i32 1
  %4 = load i8, i8* %3, align 1
  %5 = getelementptr inbounds %"class.net::IPAddressBytes", %"class.net::IPAddressBytes"* %1, i64 0, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %4, %6
  br i1 %7, label %8, label %30

8:                                                ; preds = %2
  %9 = zext i8 %4 to i64
  %10 = getelementptr inbounds %"class.net::IPAddressBytes", %"class.net::IPAddressBytes"* %0, i64 0, i32 0, i32 0, i64 %9
  %11 = getelementptr inbounds %"class.net::IPAddressBytes", %"class.net::IPAddressBytes"* %1, i64 0, i32 0, i32 0, i64 %9
  %12 = icmp eq i8 %4, 0
  br i1 %12, label %32, label %13

13:                                               ; preds = %8
  %14 = getelementptr inbounds %"class.net::IPAddressBytes", %"class.net::IPAddressBytes"* %1, i64 0, i32 0, i32 0, i64 0
  %15 = getelementptr inbounds %"class.net::IPAddressBytes", %"class.net::IPAddressBytes"* %0, i64 0, i32 0, i32 0, i64 0
  br label %16

16:                                               ; preds = %13, %26
  %17 = phi i8* [ %27, %26 ], [ %15, %13 ]
  %18 = phi i8* [ %28, %26 ], [ %14, %13 ]
  %19 = icmp eq i8* %17, %10
  br i1 %19, label %32, label %20

20:                                               ; preds = %16
  %21 = load i8, i8* %17, align 1
  %22 = load i8, i8* %18, align 1
  %23 = icmp ult i8 %21, %22
  br i1 %23, label %32, label %24

24:                                               ; preds = %20
  %25 = icmp ult i8 %22, %21
  br i1 %25, label %32, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds i8, i8* %17, i64 1
  %28 = getelementptr inbounds i8, i8* %18, i64 1
  %29 = icmp eq i8* %28, %11
  br i1 %29, label %32, label %16

30:                                               ; preds = %2
  %31 = icmp ult i8 %4, %6
  br label %32

32:                                               ; preds = %26, %24, %20, %16, %8, %30
  %33 = phi i1 [ %31, %30 ], [ false, %8 ], [ true, %20 ], [ true, %16 ], [ false, %24 ], [ false, %26 ]
  ret i1 %33
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net14IPAddressByteseqERKS0_(%"class.net::IPAddressBytes"* readonly, %"class.net::IPAddressBytes"* nocapture readonly dereferenceable(17)) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.net::IPAddressBytes", %"class.net::IPAddressBytes"* %0, i64 0, i32 1
  %4 = load i8, i8* %3, align 1
  %5 = getelementptr inbounds %"class.net::IPAddressBytes", %"class.net::IPAddressBytes"* %1, i64 0, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %4, %6
  br i1 %7, label %8, label %25

8:                                                ; preds = %2
  %9 = zext i8 %4 to i64
  %10 = getelementptr inbounds %"class.net::IPAddressBytes", %"class.net::IPAddressBytes"* %0, i64 0, i32 0, i32 0, i64 %9
  %11 = icmp eq i8 %4, 0
  br i1 %11, label %25, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.net::IPAddressBytes", %"class.net::IPAddressBytes"* %1, i64 0, i32 0, i32 0, i64 0
  %14 = getelementptr inbounds %"class.net::IPAddressBytes", %"class.net::IPAddressBytes"* %0, i64 0, i32 0, i32 0, i64 0
  br label %15

15:                                               ; preds = %12, %21
  %16 = phi i8* [ %23, %21 ], [ %13, %12 ]
  %17 = phi i8* [ %22, %21 ], [ %14, %12 ]
  %18 = load i8, i8* %17, align 1
  %19 = load i8, i8* %16, align 1
  %20 = icmp eq i8 %18, %19
  br i1 %20, label %21, label %25

21:                                               ; preds = %15
  %22 = getelementptr inbounds i8, i8* %17, i64 1
  %23 = getelementptr inbounds i8, i8* %16, i64 1
  %24 = icmp eq i8* %22, %10
  br i1 %24, label %25, label %15

25:                                               ; preds = %21, %15, %8, %2
  %26 = phi i1 [ false, %2 ], [ true, %8 ], [ true, %21 ], [ false, %15 ]
  ret i1 %26
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net14IPAddressBytesneERKS0_(%"class.net::IPAddressBytes"* readonly, %"class.net::IPAddressBytes"* nocapture readonly dereferenceable(17)) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.net::IPAddressBytes", %"class.net::IPAddressBytes"* %0, i64 0, i32 1
  %4 = load i8, i8* %3, align 1
  %5 = getelementptr inbounds %"class.net::IPAddressBytes", %"class.net::IPAddressBytes"* %1, i64 0, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %4, %6
  br i1 %7, label %8, label %25

8:                                                ; preds = %2
  %9 = zext i8 %4 to i64
  %10 = getelementptr inbounds %"class.net::IPAddressBytes", %"class.net::IPAddressBytes"* %0, i64 0, i32 0, i32 0, i64 %9
  %11 = icmp eq i8 %4, 0
  br i1 %11, label %25, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.net::IPAddressBytes", %"class.net::IPAddressBytes"* %1, i64 0, i32 0, i32 0, i64 0
  %14 = getelementptr inbounds %"class.net::IPAddressBytes", %"class.net::IPAddressBytes"* %0, i64 0, i32 0, i32 0, i64 0
  br label %15

15:                                               ; preds = %21, %12
  %16 = phi i8* [ %23, %21 ], [ %13, %12 ]
  %17 = phi i8* [ %22, %21 ], [ %14, %12 ]
  %18 = load i8, i8* %17, align 1
  %19 = load i8, i8* %16, align 1
  %20 = icmp eq i8 %18, %19
  br i1 %20, label %21, label %25

21:                                               ; preds = %15
  %22 = getelementptr inbounds i8, i8* %17, i64 1
  %23 = getelementptr inbounds i8, i8* %16, i64 1
  %24 = icmp eq i8* %22, %10
  br i1 %24, label %25, label %15

25:                                               ; preds = %15, %21, %2, %8
  %26 = phi i1 [ true, %2 ], [ false, %8 ], [ true, %15 ], [ false, %21 ]
  ret i1 %26
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3net9IPAddressC2Ev(%"class.net::IPAddress"* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  store i8 0, i8* %2, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net9IPAddressC2ERKS0_(%"class.net::IPAddress"* nocapture, %"class.net::IPAddress"* nocapture readonly dereferenceable(17)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %4 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 1 %4, i64 17, i1 false) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net9IPAddressC2ERKNS_14IPAddressBytesE(%"class.net::IPAddress"* nocapture, %"class.net::IPAddressBytes"* nocapture readonly dereferenceable(17)) unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %4 = getelementptr inbounds %"class.net::IPAddressBytes", %"class.net::IPAddressBytes"* %1, i64 0, i32 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 1 %4, i64 17, i1 false) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net9IPAddressC2EPKhm(%"class.net::IPAddress"* nocapture, i8* nocapture readonly, i64) unnamed_addr #1 align 2 {
  %4 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0
  tail call void @_ZN3net14IPAddressBytes6AssignEPKhm(%"class.net::IPAddressBytes"* %4, i8* %1, i64 %2) #12
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3net9IPAddressC2Ehhhh(%"class.net::IPAddress"* nocapture, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext) unnamed_addr #7 align 2 {
  %6 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i8 %1, i8* %7, align 1
  %8 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 1
  store i8 %2, i8* %8, align 1
  %9 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 2
  store i8 %3, i8* %9, align 1
  store i8 4, i8* %6, align 1
  %10 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 3
  store i8 %4, i8* %10, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN3net9IPAddressC2Ehhhhhhhhhhhhhhhh(%"class.net::IPAddress"*, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext, i8 zeroext) unnamed_addr #7 align 2 {
  %18 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  %19 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i8 %1, i8* %19, align 1
  %20 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 1
  store i8 %2, i8* %20, align 1
  %21 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 2
  store i8 %3, i8* %21, align 1
  %22 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 3
  store i8 %4, i8* %22, align 1
  %23 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 4
  store i8 %5, i8* %23, align 1
  %24 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 5
  store i8 %6, i8* %24, align 1
  %25 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 6
  store i8 %7, i8* %25, align 1
  %26 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 7
  store i8 %8, i8* %26, align 1
  %27 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 8
  store i8 %9, i8* %27, align 1
  %28 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 9
  store i8 %10, i8* %28, align 1
  %29 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 10
  store i8 %11, i8* %29, align 1
  %30 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 11
  store i8 %12, i8* %30, align 1
  %31 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 12
  store i8 %13, i8* %31, align 1
  %32 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 13
  store i8 %14, i8* %32, align 1
  %33 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 14
  store i8 %15, i8* %33, align 1
  store i8 16, i8* %18, align 1
  %34 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 15
  store i8 %16, i8* %34, align 1
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN3net9IPAddressD2Ev(%"class.net::IPAddress"* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net9IPAddress6IsIPv4Ev(%"class.net::IPAddress"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  %3 = load i8, i8* %2, align 1
  %4 = icmp eq i8 %3, 4
  ret i1 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net9IPAddress6IsIPv6Ev(%"class.net::IPAddress"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  %3 = load i8, i8* %2, align 1
  %4 = icmp eq i8 %3, 16
  ret i1 %4
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net9IPAddress7IsValidEv(%"class.net::IPAddress"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  %3 = load i8, i8* %2, align 1
  %4 = icmp eq i8 %3, 4
  %5 = icmp eq i8 %3, 16
  %6 = or i1 %4, %5
  ret i1 %6
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK3net9IPAddress18IsPubliclyRoutableEv(%"class.net::IPAddress"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = alloca %"class.base::StackVector", align 8
  %3 = alloca %"class.net::IPAddress", align 4
  %4 = alloca %"class.net::IPAddress", align 1
  %5 = load i1, i1* @_ZN3net12_GLOBAL__N_158g_consider_loopback_ip_to_be_publicly_routable_for_testingE, align 1
  %6 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  %7 = load i8, i8* %6, align 1
  br i1 %5, label %8, label %25

8:                                                ; preds = %1
  switch i8 %7, label %186 [
    i8 4, label %9
    i8 16, label %13
  ]

9:                                                ; preds = %8
  %10 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %11 = load i8, i8* %10, align 1
  %12 = icmp eq i8 %11, 127
  br i1 %12, label %186, label %26

13:                                               ; preds = %8, %16
  %14 = phi i64 [ %17, %16 ], [ 0, %8 ]
  %15 = icmp eq i64 %14, 15
  br i1 %15, label %21, label %16

16:                                               ; preds = %13
  %17 = add nuw nsw i64 %14, 1
  %18 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 %14
  %19 = load i8, i8* %18, align 1
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %13, label %61

21:                                               ; preds = %13
  %22 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 15
  %23 = load i8, i8* %22, align 1
  %24 = icmp eq i8 %23, 1
  br i1 %24, label %186, label %61

25:                                               ; preds = %1
  switch i8 %7, label %186 [
    i8 4, label %26
    i8 16, label %61
  ]

26:                                               ; preds = %9, %25
  br label %27

27:                                               ; preds = %26, %58
  %28 = phi %struct.anon.18* [ %59, %58 ], [ getelementptr inbounds ([13 x %struct.anon.18], [13 x %struct.anon.18]* @_ZZN3net12_GLOBAL__N_122IsPubliclyRoutableIPv4ERKNS_14IPAddressBytesEE19kReservedIPv4Ranges, i64 0, i64 0), %26 ]
  %29 = getelementptr inbounds %struct.anon.18, %struct.anon.18* %28, i64 0, i32 1
  %30 = load i64, i64* %29, align 8
  %31 = lshr i64 %30, 3
  %32 = icmp eq i64 %31, 0
  br i1 %32, label %43, label %35

33:                                               ; preds = %35
  %34 = icmp eq i64 %42, %31
  br i1 %34, label %43, label %35

35:                                               ; preds = %27, %33
  %36 = phi i64 [ %42, %33 ], [ 0, %27 ]
  %37 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = getelementptr inbounds %struct.anon.18, %struct.anon.18* %28, i64 0, i32 0, i64 %36
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %38, %40
  %42 = add nuw nsw i64 %36, 1
  br i1 %41, label %33, label %58

43:                                               ; preds = %33, %27
  %44 = and i64 %30, 7
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %186, label %46

46:                                               ; preds = %43
  %47 = trunc i64 %44 to i32
  %48 = sub nuw nsw i32 8, %47
  %49 = shl i32 255, %48
  %50 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 %31
  %51 = load i8, i8* %50, align 1
  %52 = getelementptr inbounds %struct.anon.18, %struct.anon.18* %28, i64 0, i32 0, i64 %31
  %53 = load i8, i8* %52, align 1
  %54 = xor i8 %53, %51
  %55 = zext i8 %54 to i32
  %56 = and i32 %49, %55
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %186, label %58

58:                                               ; preds = %35, %46
  %59 = getelementptr inbounds %struct.anon.18, %struct.anon.18* %28, i64 1
  %60 = icmp eq %struct.anon.18* %59, getelementptr inbounds ([13 x %struct.anon.18], [13 x %struct.anon.18]* @_ZZN3net12_GLOBAL__N_122IsPubliclyRoutableIPv4ERKNS_14IPAddressBytesEE19kReservedIPv4Ranges, i64 1, i64 0)
  br i1 %60, label %186, label %27

61:                                               ; preds = %16, %21, %25
  %62 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %63 = load i8, i8* %62, align 1
  %64 = and i8 %63, -32
  %65 = icmp eq i8 %64, 32
  %66 = icmp eq i8 %63, -1
  %67 = or i1 %66, %65
  br i1 %67, label %186, label %147

68:                                               ; preds = %147
  %69 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %3, i64 0, i32 0, i32 0, i32 0, i64 12
  %70 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %70) #12
  %71 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %70, i8 -86, i64 17, i1 false) #12
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %71) #12, !noalias !2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %71, i8 -86, i64 24, i1 false) #12, !noalias !2
  %72 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 0
  %73 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 0, i32 1
  %74 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 1, i32 0
  store %"struct.base::StackAllocator<unsigned char, 16>::Source"* %72, %"struct.base::StackAllocator<unsigned char, 16>::Source"** %74, align 8, !noalias !2
  %75 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 2
  %76 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 2, i32 0, i32 2, i32 1
  %77 = ptrtoint %"class.base::StackVector"* %2 to i64
  %78 = bitcast %"struct.std::__1::__compressed_pair_elem.9"* %76 to i64*
  store i64 %77, i64* %78, align 8, !noalias !2
  %79 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %80 = bitcast i8** %79 to i64*
  %81 = bitcast %"class.std::__1::vector.6"* %75 to i64*
  %82 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 2, i32 0, i32 1
  %83 = bitcast i8** %82 to i64*
  store i8 1, i8* %73, align 8, !noalias !2
  %84 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 0, i32 0, i64 16
  %85 = ptrtoint i8* %84 to i64
  store i64 %77, i64* %81, align 8, !noalias !2
  store i64 %77, i64* %83, align 8, !noalias !2
  store i64 %85, i64* %80, align 8, !noalias !2
  %86 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %3, i64 0, i32 0, i32 0, i32 0, i64 16
  %87 = call i8* @_ZNSt3__16vectorIhN4base14StackAllocatorIhLm16EEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS9_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSD_IS7_EES9_S9_(%"class.std::__1::vector.6"* %75, i8* nonnull %71, i8* %69, i8* %86) #12, !noalias !2
  %88 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %75, i64 0, i32 0, i32 0
  %89 = load i8*, i8** %88, align 8, !noalias !2
  %90 = load i64, i64* %83, align 8, !noalias !2
  %91 = ptrtoint i8* %89 to i64
  %92 = sub i64 %90, %91
  %93 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %4, i64 0, i32 0
  call void @_ZN3net14IPAddressBytes6AssignEPKhm(%"class.net::IPAddressBytes"* nonnull %93, i8* %89, i64 %92) #12
  %94 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %95 = load i8*, i8** %94, align 8, !noalias !2
  %96 = icmp eq i8* %95, null
  br i1 %96, label %108, label %97

97:                                               ; preds = %68
  %98 = ptrtoint i8* %95 to i64
  store i64 %98, i64* %83, align 8, !noalias !2
  %99 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 2, i32 0, i32 2, i32 1, i32 0, i32 0
  %100 = load %"struct.base::StackAllocator<unsigned char, 16>::Source"*, %"struct.base::StackAllocator<unsigned char, 16>::Source"** %99, align 8, !noalias !2
  %101 = icmp ne %"struct.base::StackAllocator<unsigned char, 16>::Source"* %100, null
  %102 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 16>::Source", %"struct.base::StackAllocator<unsigned char, 16>::Source"* %100, i64 0, i32 0, i64 0
  %103 = icmp eq i8* %102, %95
  %104 = and i1 %101, %103
  br i1 %104, label %105, label %107

105:                                              ; preds = %97
  %106 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 16>::Source", %"struct.base::StackAllocator<unsigned char, 16>::Source"* %100, i64 0, i32 1
  store i8 0, i8* %106, align 1, !noalias !2
  br label %108

107:                                              ; preds = %97
  call void @_ZdlPv(i8* nonnull %95) #13, !noalias !2
  br label %108

108:                                              ; preds = %107, %105, %68
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %71) #12, !noalias !2
  br label %109

109:                                              ; preds = %140, %108
  %110 = phi %struct.anon.18* [ getelementptr inbounds ([13 x %struct.anon.18], [13 x %struct.anon.18]* @_ZZN3net12_GLOBAL__N_122IsPubliclyRoutableIPv4ERKNS_14IPAddressBytesEE19kReservedIPv4Ranges, i64 0, i64 0), %108 ], [ %141, %140 ]
  %111 = getelementptr inbounds %struct.anon.18, %struct.anon.18* %110, i64 0, i32 1
  %112 = load i64, i64* %111, align 8
  %113 = lshr i64 %112, 3
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %125, label %117

115:                                              ; preds = %117
  %116 = icmp eq i64 %124, %113
  br i1 %116, label %125, label %117

117:                                              ; preds = %109, %115
  %118 = phi i64 [ %124, %115 ], [ 0, %109 ]
  %119 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %4, i64 0, i32 0, i32 0, i32 0, i64 %118
  %120 = load i8, i8* %119, align 1
  %121 = getelementptr inbounds %struct.anon.18, %struct.anon.18* %110, i64 0, i32 0, i64 %118
  %122 = load i8, i8* %121, align 1
  %123 = icmp eq i8 %120, %122
  %124 = add nuw nsw i64 %118, 1
  br i1 %123, label %115, label %140

125:                                              ; preds = %115, %109
  %126 = and i64 %112, 7
  %127 = icmp eq i64 %126, 0
  br i1 %127, label %143, label %128

128:                                              ; preds = %125
  %129 = trunc i64 %126 to i32
  %130 = sub nuw nsw i32 8, %129
  %131 = shl i32 255, %130
  %132 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %4, i64 0, i32 0, i32 0, i32 0, i64 %113
  %133 = load i8, i8* %132, align 1
  %134 = getelementptr inbounds %struct.anon.18, %struct.anon.18* %110, i64 0, i32 0, i64 %113
  %135 = load i8, i8* %134, align 1
  %136 = xor i8 %135, %133
  %137 = zext i8 %136 to i32
  %138 = and i32 %131, %137
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %143, label %140

140:                                              ; preds = %117, %128
  %141 = getelementptr inbounds %struct.anon.18, %struct.anon.18* %110, i64 1
  %142 = icmp eq %struct.anon.18* %141, getelementptr inbounds ([13 x %struct.anon.18], [13 x %struct.anon.18]* @_ZZN3net12_GLOBAL__N_122IsPubliclyRoutableIPv4ERKNS_14IPAddressBytesEE19kReservedIPv4Ranges, i64 1, i64 0)
  br i1 %142, label %143, label %109

143:                                              ; preds = %140, %128, %125
  %144 = phi i1 [ false, %128 ], [ false, %125 ], [ true, %140 ]
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %70) #12
  br label %145

145:                                              ; preds = %147, %143
  %146 = phi i1 [ %144, %143 ], [ false, %147 ]
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %148) #12
  br label %186

147:                                              ; preds = %61
  %148 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %148) #12
  %149 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %3, i64 0, i32 0, i32 0, i32 0, i64 4
  %150 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %3, i64 0, i32 0, i32 0, i32 0, i64 5
  %151 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %3, i64 0, i32 0, i32 0, i32 0, i64 6
  %152 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %3, i64 0, i32 0, i32 0, i32 0, i64 7
  %153 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %3, i64 0, i32 0, i32 0, i32 0, i64 8
  %154 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %3, i64 0, i32 0, i32 0, i32 0, i64 9
  %155 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %3, i64 0, i32 0, i32 0, i32 0, i64 10
  %156 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %3, i64 0, i32 0, i32 0, i32 0, i64 11
  %157 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %3, i64 0, i32 0, i32 1
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %148, i8* align 1 %62, i64 17, i1 false) #12
  %158 = load i8, i8* %157, align 4
  %159 = icmp eq i8 %158, 16
  %160 = bitcast %"class.net::IPAddress"* %3 to <4 x i8>*
  %161 = load <4 x i8>, <4 x i8>* %160, align 4
  %162 = load i8, i8* %149, align 4
  %163 = load i8, i8* %150, align 1
  %164 = load i8, i8* %151, align 2
  %165 = shufflevector <4 x i8> %161, <4 x i8> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %166 = or <4 x i8> %161, %165
  %167 = shufflevector <4 x i8> %166, <4 x i8> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %168 = or <4 x i8> %166, %167
  %169 = extractelement <4 x i8> %168, i32 0
  %170 = or i8 %169, %162
  %171 = or i8 %170, %163
  %172 = or i8 %171, %164
  %173 = load i8, i8* %152, align 1
  %174 = or i8 %172, %173
  %175 = load i8, i8* %153, align 4
  %176 = or i8 %174, %175
  %177 = load i8, i8* %154, align 1
  %178 = or i8 %176, %177
  %179 = icmp eq i8 %178, 0
  %180 = and i1 %159, %179
  %181 = load i8, i8* %155, align 2
  %182 = load i8, i8* %156, align 1
  %183 = and i8 %182, %181
  %184 = icmp eq i8 %183, -1
  %185 = and i1 %180, %184
  br i1 %185, label %68, label %145

186:                                              ; preds = %58, %46, %43, %8, %25, %145, %61, %9, %21
  %187 = phi i1 [ true, %21 ], [ true, %9 ], [ %146, %145 ], [ true, %61 ], [ true, %25 ], [ true, %8 ], [ true, %58 ], [ false, %43 ], [ false, %46 ]
  ret i1 %187
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net9IPAddress10IsLoopbackEv(%"class.net::IPAddress"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  %3 = load i8, i8* %2, align 1
  switch i8 %3, label %20 [
    i8 4, label %4
    i8 16, label %8
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, 127
  br label %20

8:                                                ; preds = %1, %12
  %9 = phi i64 [ %10, %12 ], [ 0, %1 ]
  %10 = add nuw nsw i64 %9, 1
  %11 = icmp ult i64 %10, 16
  br i1 %11, label %12, label %16

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 %9
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %8, label %20

16:                                               ; preds = %8
  %17 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 15
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, 1
  br label %20

20:                                               ; preds = %12, %1, %16, %4
  %21 = phi i1 [ %7, %4 ], [ %19, %16 ], [ false, %1 ], [ false, %12 ]
  ret i1 %21
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3net9IPAddress48ConsiderLoopbackIPToBePubliclyRoutableForTestingEv() local_unnamed_addr #0 align 2 {
  store i1 true, i1* @_ZN3net12_GLOBAL__N_158g_consider_loopback_ip_to_be_publicly_routable_for_testingE, align 1
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net9IPAddress6IsZeroEv(%"class.net::IPAddress"* readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  %3 = load i8, i8* %2, align 1
  %4 = zext i8 %3 to i64
  %5 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 %4
  %6 = icmp eq i8 %3, 0
  br i1 %6, label %16, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  br label %11

9:                                                ; preds = %11
  %10 = icmp eq i8* %15, %5
  br i1 %10, label %16, label %11

11:                                               ; preds = %7, %9
  %12 = phi i8* [ %15, %9 ], [ %8, %7 ]
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, 0
  %15 = getelementptr inbounds i8, i8* %12, i64 1
  br i1 %14, label %9, label %18

16:                                               ; preds = %9, %1
  %17 = icmp ne i8 %3, 0
  br label %18

18:                                               ; preds = %11, %16
  %19 = phi i1 [ %17, %16 ], [ false, %11 ]
  ret i1 %19
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net9IPAddress16IsIPv4MappedIPv6Ev(%"class.net::IPAddress"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  %3 = load i8, i8* %2, align 1
  %4 = icmp eq i8 %3, 16
  br i1 %4, label %5, label %53

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %9, label %53

9:                                                ; preds = %5
  %10 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = icmp eq i8 %11, 0
  br i1 %12, label %13, label %53

13:                                               ; preds = %9
  %14 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 2
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, 0
  br i1 %16, label %17, label %53

17:                                               ; preds = %13
  %18 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 3
  %19 = load i8, i8* %18, align 1
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %53

21:                                               ; preds = %17
  %22 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 4
  %23 = load i8, i8* %22, align 1
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %53

25:                                               ; preds = %21
  %26 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 5
  %27 = load i8, i8* %26, align 1
  %28 = icmp eq i8 %27, 0
  br i1 %28, label %29, label %53

29:                                               ; preds = %25
  %30 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 6
  %31 = load i8, i8* %30, align 1
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %33, label %53

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 7
  %35 = load i8, i8* %34, align 1
  %36 = icmp eq i8 %35, 0
  br i1 %36, label %37, label %53

37:                                               ; preds = %33
  %38 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 8
  %39 = load i8, i8* %38, align 1
  %40 = icmp eq i8 %39, 0
  br i1 %40, label %41, label %53

41:                                               ; preds = %37
  %42 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 9
  %43 = load i8, i8* %42, align 1
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %53

45:                                               ; preds = %41
  %46 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 10
  %47 = load i8, i8* %46, align 1
  %48 = icmp eq i8 %47, -1
  br i1 %48, label %49, label %53

49:                                               ; preds = %45
  %50 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 11
  %51 = load i8, i8* %50, align 1
  %52 = icmp eq i8 %51, -1
  br label %53

53:                                               ; preds = %49, %45, %41, %37, %33, %29, %25, %21, %17, %13, %9, %5, %1
  %54 = phi i1 [ false, %1 ], [ %52, %49 ], [ false, %45 ], [ false, %41 ], [ false, %37 ], [ false, %33 ], [ false, %29 ], [ false, %25 ], [ false, %21 ], [ false, %17 ], [ false, %13 ], [ false, %9 ], [ false, %5 ]
  ret i1 %54
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net9IPAddress11IsLinkLocalEv(%"class.net::IPAddress"* nocapture readonly) local_unnamed_addr #6 align 2 {
  %2 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  %3 = load i8, i8* %2, align 1
  switch i8 %3, label %72 [
    i8 4, label %4
    i8 16, label %12
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %6, -87
  br i1 %7, label %8, label %72

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 1
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, -2
  br label %72

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %14 = load i8, i8* %13, align 1
  switch i8 %14, label %72 [
    i8 0, label %15
    i8 -2, label %67
  ]

15:                                               ; preds = %12
  %16 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, 0
  br i1 %18, label %19, label %72

19:                                               ; preds = %15
  %20 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 2
  %21 = load i8, i8* %20, align 1
  %22 = icmp eq i8 %21, 0
  br i1 %22, label %23, label %72

23:                                               ; preds = %19
  %24 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 3
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %27, label %72

27:                                               ; preds = %23
  %28 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 4
  %29 = load i8, i8* %28, align 1
  %30 = icmp eq i8 %29, 0
  br i1 %30, label %31, label %72

31:                                               ; preds = %27
  %32 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 5
  %33 = load i8, i8* %32, align 1
  %34 = icmp eq i8 %33, 0
  br i1 %34, label %35, label %72

35:                                               ; preds = %31
  %36 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 6
  %37 = load i8, i8* %36, align 1
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %72

39:                                               ; preds = %35
  %40 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 7
  %41 = load i8, i8* %40, align 1
  %42 = icmp eq i8 %41, 0
  br i1 %42, label %43, label %72

43:                                               ; preds = %39
  %44 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 8
  %45 = load i8, i8* %44, align 1
  %46 = icmp eq i8 %45, 0
  br i1 %46, label %47, label %72

47:                                               ; preds = %43
  %48 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 9
  %49 = load i8, i8* %48, align 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %51, label %72

51:                                               ; preds = %47
  %52 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 10
  %53 = load i8, i8* %52, align 1
  %54 = icmp eq i8 %53, -1
  br i1 %54, label %55, label %72

55:                                               ; preds = %51
  %56 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 11
  %57 = load i8, i8* %56, align 1
  %58 = icmp eq i8 %57, -1
  br i1 %58, label %59, label %72

59:                                               ; preds = %55
  %60 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 12
  %61 = load i8, i8* %60, align 1
  %62 = icmp eq i8 %61, -87
  br i1 %62, label %63, label %72

63:                                               ; preds = %59
  %64 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 13
  %65 = load i8, i8* %64, align 1
  %66 = icmp eq i8 %65, -2
  br label %72

67:                                               ; preds = %12
  %68 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 1
  %69 = load i8, i8* %68, align 1
  %70 = and i8 %69, -64
  %71 = icmp eq i8 %70, -128
  br label %72

72:                                               ; preds = %12, %55, %51, %47, %43, %39, %35, %31, %27, %23, %19, %15, %1, %67, %59, %63, %4, %8
  %73 = phi i1 [ false, %4 ], [ %11, %8 ], [ false, %59 ], [ %66, %63 ], [ %71, %67 ], [ false, %1 ], [ false, %15 ], [ false, %19 ], [ false, %23 ], [ false, %27 ], [ false, %31 ], [ false, %35 ], [ false, %39 ], [ false, %43 ], [ false, %47 ], [ false, %51 ], [ false, %55 ], [ false, %12 ]
  ret i1 %73
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net9IPAddress19AssignFromIPLiteralERKN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.net::IPAddress"*, %"class.base::BasicStringPiece"* nocapture readonly dereferenceable(16)) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.std::__1::basic_string", align 8
  %4 = alloca [3 x %"class.base::BasicStringPiece"], align 8
  %5 = alloca %"struct.url::Component", align 4
  %6 = alloca %"struct.url::Component", align 4
  %7 = alloca i32, align 4
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %57, label %11

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 0
  %13 = load i8*, i8** %12, align 8
  %14 = tail call i8* @memchr(i8* %13, i32 58, i64 %9) #12
  %15 = icmp eq i8* %14, null
  br i1 %15, label %57, label %16

16:                                               ; preds = %11
  %17 = ptrtoint i8* %14 to i64
  %18 = ptrtoint i8* %13 to i64
  %19 = sub i64 %17, %18
  %20 = icmp eq i64 %19, -1
  br i1 %20, label %57, label %21

21:                                               ; preds = %16
  %22 = bitcast %"class.std::__1::basic_string"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #12
  %23 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = bitcast [3 x %"class.base::BasicStringPiece"]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 -86, i64 24, i1 false) #12
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %24) #12
  %25 = getelementptr inbounds [3 x %"class.base::BasicStringPiece"], [3 x %"class.base::BasicStringPiece"]* %4, i64 0, i64 0
  %26 = getelementptr inbounds [3 x %"class.base::BasicStringPiece"], [3 x %"class.base::BasicStringPiece"]* %4, i64 0, i64 0, i32 0
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i8** %26, align 8
  %27 = getelementptr inbounds [3 x %"class.base::BasicStringPiece"], [3 x %"class.base::BasicStringPiece"]* %4, i64 0, i64 0, i32 1
  store i64 1, i64* %27, align 8
  %28 = getelementptr inbounds [3 x %"class.base::BasicStringPiece"], [3 x %"class.base::BasicStringPiece"]* %4, i64 0, i64 1
  %29 = bitcast %"class.base::BasicStringPiece"* %28 to i8*
  %30 = bitcast %"class.base::BasicStringPiece"* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 16, i1 false) #12
  %31 = getelementptr inbounds [3 x %"class.base::BasicStringPiece"], [3 x %"class.base::BasicStringPiece"]* %4, i64 0, i64 2, i32 0
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0), i8** %31, align 8
  %32 = getelementptr inbounds [3 x %"class.base::BasicStringPiece"], [3 x %"class.base::BasicStringPiece"]* %4, i64 0, i64 2, i32 1
  store i64 1, i64* %32, align 8
  call void @_ZN4base6StrCatENS_4spanIKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEELm18446744073709551615EEE(%"class.std::__1::basic_string"* nonnull sret %3, i64 3, %"class.base::BasicStringPiece"* nonnull %25) #12
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %24) #12
  %33 = bitcast %"struct.url::Component"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #12
  %34 = getelementptr inbounds %"struct.url::Component", %"struct.url::Component"* %5, i64 0, i32 0
  store i32 -1431655766, i32* %34, align 4
  %35 = getelementptr inbounds %"struct.url::Component", %"struct.url::Component"* %5, i64 0, i32 1
  store i32 -1431655766, i32* %35, align 4
  %36 = bitcast %"class.std::__1::basic_string"* %3 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %37 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %36, i64 0, i32 1, i32 0
  %38 = load i8, i8* %37, align 1
  %39 = icmp slt i8 %38, 0
  br i1 %39, label %40, label %45

40:                                               ; preds = %21
  %41 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %42 = load i64, i64* %41, align 8
  %43 = trunc i64 %42 to i32
  store i32 0, i32* %34, align 4
  store i32 %43, i32* %35, align 4
  %44 = load i8*, i8** %23, align 8
  br label %47

45:                                               ; preds = %21
  %46 = zext i8 %38 to i32
  store i32 0, i32* %34, align 4
  store i32 %46, i32* %35, align 4
  br label %47

47:                                               ; preds = %45, %40
  %48 = phi i8* [ %44, %40 ], [ %22, %45 ]
  %49 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  store i8 16, i8* %49, align 1
  %50 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %51 = call zeroext i1 @_ZN3url19IPv6AddressToNumberEPKcRKNS_9ComponentEPh(i8* %48, %"struct.url::Component"* nonnull dereferenceable(8) %5, i8* %50) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #12
  %52 = load i8, i8* %37, align 1
  %53 = icmp slt i8 %52, 0
  br i1 %53, label %54, label %56

54:                                               ; preds = %47
  %55 = load i8*, i8** %23, align 8
  call void @_ZdlPv(i8* %55) #13
  br label %56

56:                                               ; preds = %54, %47
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #12
  br i1 %51, label %72, label %70

57:                                               ; preds = %2, %11, %16
  %58 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  store i8 4, i8* %58, align 1
  %59 = bitcast %"struct.url::Component"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %59) #12
  %60 = getelementptr inbounds %"struct.url::Component", %"struct.url::Component"* %6, i64 0, i32 0
  %61 = getelementptr inbounds %"struct.url::Component", %"struct.url::Component"* %6, i64 0, i32 1
  %62 = load i64, i64* %8, align 8
  %63 = trunc i64 %62 to i32
  store i32 0, i32* %60, align 4
  store i32 %63, i32* %61, align 4
  %64 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %64) #12
  store i32 -1431655766, i32* %7, align 4
  %65 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 0
  %66 = load i8*, i8** %65, align 8
  %67 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %68 = call i32 @_ZN3url19IPv4AddressToNumberEPKcRKNS_9ComponentEPhPi(i8* %66, %"struct.url::Component"* nonnull dereferenceable(8) %6, i8* %67, i32* nonnull %7) #12
  %69 = icmp eq i32 %68, 2
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %64) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %59) #12
  br i1 %69, label %72, label %70

70:                                               ; preds = %56, %57
  %71 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  store i8 0, i8* %71, align 1
  br label %72

72:                                               ; preds = %56, %70, %57
  %73 = phi i1 [ true, %56 ], [ false, %70 ], [ true, %57 ]
  ret i1 %73
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3net9IPAddress17CopyBytesToVectorEv(%"class.std::__1::vector"* noalias sret, %"class.net::IPAddress"*) local_unnamed_addr #1 align 2 {
  %3 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 1
  %4 = load i8, i8* %3, align 1
  %5 = zext i8 %4 to i64
  %6 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false) #12
  %7 = icmp eq i8 %4, 0
  br i1 %7, label %17, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 0, i32 0, i64 0
  %10 = tail call i8* @_Znwm(i64 %5) #13
  %11 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  store i8* %10, i8** %12, align 8
  %13 = getelementptr inbounds i8, i8* %10, i64 %5
  %14 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  store i8* %13, i8** %14, align 8
  %15 = bitcast i8** %11 to i64*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %10, i8* align 1 %9, i64 %5, i1 false) #12
  %16 = ptrtoint i8* %13 to i64
  store i64 %16, i64* %15, align 8
  br label %17

17:                                               ; preds = %2, %8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN3net9IPAddress13IPv4LocalhostEv(%"class.net::IPAddress"* noalias nocapture sret) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  store i8 4, i8* %2, align 1
  %3 = bitcast %"class.net::IPAddress"* %0 to i32*
  store i32 16777343, i32* %3, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net9IPAddress13IPv6LocalhostEv(%"class.net::IPAddress"* noalias nocapture sret) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  store i8 16, i8* %2, align 1
  %3 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 16 getelementptr inbounds ([16 x i8], [16 x i8]* @_ZZN3net9IPAddress13IPv6LocalhostEvE14kLocalhostIPv6, i64 0, i64 0), i64 16, i1 false) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net9IPAddress8AllZerosEm(%"class.net::IPAddress"* noalias nocapture sret, i64) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8)
  %9 = icmp ugt i64 %1, 16
  br i1 %9, label %11, label %10

10:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8)
  store i8* null, i8** %7, align 8
  br label %20

11:                                               ; preds = %2
  %12 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #12
  %13 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 16) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0), i8* %12, i8* %13) #12
  %14 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8)
  store i8* %15, i8** %7, align 8
  %16 = icmp eq i8* %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %11
  %18 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i32 329, %"class.logging::CheckOpResult"* nonnull %4) #12
  %19 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #12
  br label %20

20:                                               ; preds = %10, %11, %17
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  %21 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %22 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* align 1 %21, i8 -86, i64 16, i1 false)
  store i8 0, i8* %22, align 1
  %23 = icmp eq i64 %1, 0
  br i1 %23, label %64, label %24

24:                                               ; preds = %20
  store i8 1, i8* %22, align 1
  %25 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  store i8 0, i8* %25, align 1
  %26 = icmp eq i64 %1, 1
  br i1 %26, label %64, label %27

27:                                               ; preds = %24
  %28 = add i64 %1, -1
  %29 = add i64 %1, -2
  %30 = and i64 %28, 3
  %31 = icmp ult i64 %29, 3
  br i1 %31, label %54, label %32

32:                                               ; preds = %27
  %33 = sub i64 %28, %30
  br label %34

34:                                               ; preds = %34, %32
  %35 = phi i64 [ %33, %32 ], [ %52, %34 ]
  %36 = load i8, i8* %22, align 1
  %37 = add i8 %36, 1
  store i8 %37, i8* %22, align 1
  %38 = zext i8 %36 to i64
  %39 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 %38
  store i8 0, i8* %39, align 1
  %40 = load i8, i8* %22, align 1
  %41 = add i8 %40, 1
  store i8 %41, i8* %22, align 1
  %42 = zext i8 %40 to i64
  %43 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 %42
  store i8 0, i8* %43, align 1
  %44 = load i8, i8* %22, align 1
  %45 = add i8 %44, 1
  store i8 %45, i8* %22, align 1
  %46 = zext i8 %44 to i64
  %47 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 %46
  store i8 0, i8* %47, align 1
  %48 = load i8, i8* %22, align 1
  %49 = add i8 %48, 1
  store i8 %49, i8* %22, align 1
  %50 = zext i8 %48 to i64
  %51 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 %50
  store i8 0, i8* %51, align 1
  %52 = add i64 %35, -4
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %34

54:                                               ; preds = %34, %27
  %55 = icmp eq i64 %30, 0
  br i1 %55, label %64, label %56

56:                                               ; preds = %54, %56
  %57 = phi i64 [ %62, %56 ], [ %30, %54 ]
  %58 = load i8, i8* %22, align 1
  %59 = add i8 %58, 1
  store i8 %59, i8* %22, align 1
  %60 = zext i8 %58 to i64
  %61 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 %60
  store i8 0, i8* %61, align 1
  %62 = add i64 %57, -1
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %56, !llvm.loop !5

64:                                               ; preds = %54, %56, %24, %20
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net9IPAddress12IPv4AllZerosEv(%"class.net::IPAddress"* noalias nocapture sret) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %3 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  %4 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 4
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %4, i8 -86, i64 12, i1 false) #12, !alias.scope !7
  store i8 0, i8* %2, align 1, !alias.scope !7
  %5 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 1
  store i8 0, i8* %5, align 1, !alias.scope !7
  %6 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 2
  store i8 0, i8* %6, align 1, !alias.scope !7
  store i8 4, i8* %3, align 1, !alias.scope !7
  %7 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 3
  store i8 0, i8* %7, align 1, !alias.scope !7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net9IPAddress12IPv6AllZerosEv(%"class.net::IPAddress"* noalias nocapture sret) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  %3 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  store i8 0, i8* %2, align 1, !alias.scope !10
  %4 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 1
  store i8 0, i8* %4, align 1, !alias.scope !10
  %5 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 2
  store i8 0, i8* %5, align 1, !alias.scope !10
  %6 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 3
  store i8 0, i8* %6, align 1, !alias.scope !10
  %7 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 4
  store i8 0, i8* %7, align 1, !alias.scope !10
  %8 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 5
  store i8 0, i8* %8, align 1, !alias.scope !10
  %9 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 6
  store i8 0, i8* %9, align 1, !alias.scope !10
  %10 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 7
  store i8 0, i8* %10, align 1, !alias.scope !10
  %11 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 8
  store i8 0, i8* %11, align 1, !alias.scope !10
  %12 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 9
  store i8 0, i8* %12, align 1, !alias.scope !10
  %13 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 10
  store i8 0, i8* %13, align 1, !alias.scope !10
  %14 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 11
  store i8 0, i8* %14, align 1, !alias.scope !10
  %15 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 12
  store i8 0, i8* %15, align 1, !alias.scope !10
  %16 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 13
  store i8 0, i8* %16, align 1, !alias.scope !10
  %17 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 14
  store i8 0, i8* %17, align 1, !alias.scope !10
  store i8 16, i8* %3, align 1, !alias.scope !10
  %18 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 15
  store i8 0, i8* %18, align 1, !alias.scope !10
  ret void
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net9IPAddresseqERKS0_(%"class.net::IPAddress"* readonly, %"class.net::IPAddress"* nocapture readonly dereferenceable(17)) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  %4 = load i8, i8* %3, align 1
  %5 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %4, %6
  br i1 %7, label %8, label %25

8:                                                ; preds = %2
  %9 = zext i8 %4 to i64
  %10 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 %9
  %11 = icmp eq i8 %4, 0
  br i1 %11, label %25, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 0, i32 0, i64 0
  %14 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  br label %15

15:                                               ; preds = %21, %12
  %16 = phi i8* [ %23, %21 ], [ %13, %12 ]
  %17 = phi i8* [ %22, %21 ], [ %14, %12 ]
  %18 = load i8, i8* %17, align 1
  %19 = load i8, i8* %16, align 1
  %20 = icmp eq i8 %18, %19
  br i1 %20, label %21, label %25

21:                                               ; preds = %15
  %22 = getelementptr inbounds i8, i8* %17, i64 1
  %23 = getelementptr inbounds i8, i8* %16, i64 1
  %24 = icmp eq i8* %22, %10
  br i1 %24, label %25, label %15

25:                                               ; preds = %15, %21, %2, %8
  %26 = phi i1 [ false, %2 ], [ true, %8 ], [ false, %15 ], [ true, %21 ]
  ret i1 %26
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net9IPAddressneERKS0_(%"class.net::IPAddress"* readonly, %"class.net::IPAddress"* nocapture readonly dereferenceable(17)) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  %4 = load i8, i8* %3, align 1
  %5 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp eq i8 %4, %6
  br i1 %7, label %8, label %25

8:                                                ; preds = %2
  %9 = zext i8 %4 to i64
  %10 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 %9
  %11 = icmp eq i8 %4, 0
  br i1 %11, label %25, label %12

12:                                               ; preds = %8
  %13 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 0, i32 0, i64 0
  %14 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  br label %15

15:                                               ; preds = %21, %12
  %16 = phi i8* [ %23, %21 ], [ %13, %12 ]
  %17 = phi i8* [ %22, %21 ], [ %14, %12 ]
  %18 = load i8, i8* %17, align 1
  %19 = load i8, i8* %16, align 1
  %20 = icmp eq i8 %18, %19
  br i1 %20, label %21, label %25

21:                                               ; preds = %15
  %22 = getelementptr inbounds i8, i8* %17, i64 1
  %23 = getelementptr inbounds i8, i8* %16, i64 1
  %24 = icmp eq i8* %22, %10
  br i1 %24, label %25, label %15

25:                                               ; preds = %15, %21, %2, %8
  %26 = phi i1 [ true, %2 ], [ false, %8 ], [ false, %21 ], [ true, %15 ]
  ret i1 %26
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK3net9IPAddressltERKS0_(%"class.net::IPAddress"* readonly, %"class.net::IPAddress"* readonly dereferenceable(17)) local_unnamed_addr #6 align 2 {
  %3 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  %4 = load i8, i8* %3, align 1
  %5 = zext i8 %4 to i64
  %6 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = icmp eq i8 %4, %7
  br i1 %8, label %11, label %9

9:                                                ; preds = %2
  %10 = icmp ult i8 %4, %7
  br label %32

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 %5
  %13 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 0, i32 0, i64 %5
  %14 = icmp eq i8 %4, 0
  br i1 %14, label %32, label %15

15:                                               ; preds = %11
  %16 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 0, i32 0, i64 0
  %17 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 0
  br label %18

18:                                               ; preds = %28, %15
  %19 = phi i8* [ %29, %28 ], [ %17, %15 ]
  %20 = phi i8* [ %30, %28 ], [ %16, %15 ]
  %21 = icmp eq i8* %19, %12
  br i1 %21, label %32, label %22

22:                                               ; preds = %18
  %23 = load i8, i8* %19, align 1
  %24 = load i8, i8* %20, align 1
  %25 = icmp ult i8 %23, %24
  br i1 %25, label %32, label %26

26:                                               ; preds = %22
  %27 = icmp ult i8 %24, %23
  br i1 %27, label %32, label %28

28:                                               ; preds = %26
  %29 = getelementptr inbounds i8, i8* %19, i64 1
  %30 = getelementptr inbounds i8, i8* %20, i64 1
  %31 = icmp eq i8* %30, %13
  br i1 %31, label %32, label %18

32:                                               ; preds = %28, %26, %22, %18, %11, %9
  %33 = phi i1 [ %10, %9 ], [ false, %11 ], [ false, %28 ], [ false, %26 ], [ true, %18 ], [ true, %22 ]
  ret i1 %33
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK3net9IPAddress8ToStringEv(%"class.std::__1::basic_string"* noalias sret, %"class.net::IPAddress"*) local_unnamed_addr #1 align 2 {
  %3 = alloca %"class.url::StdStringCanonOutput", align 8
  %4 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 24, i1 false) #12
  %5 = bitcast %"class.url::StdStringCanonOutput"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #12
  %6 = bitcast %"class.url::StdStringCanonOutput"* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 32, i1 false)
  call void @_ZN3url20StdStringCanonOutputC1EPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.url::StdStringCanonOutput"* nonnull %3, %"class.std::__1::basic_string"* %0) #12
  %7 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 1
  %8 = load i8, i8* %7, align 1
  switch i8 %8, label %15 [
    i8 4, label %9
    i8 16, label %12
  ]

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 0, i32 0, i64 0
  %11 = getelementptr inbounds %"class.url::StdStringCanonOutput", %"class.url::StdStringCanonOutput"* %3, i64 0, i32 0
  call void @_ZN3url17AppendIPv4AddressEPKhPNS_12CanonOutputTIcEE(i8* %10, %"class.url::CanonOutputT"* nonnull %11) #12
  br label %15

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 0, i32 0, i64 0
  %14 = getelementptr inbounds %"class.url::StdStringCanonOutput", %"class.url::StdStringCanonOutput"* %3, i64 0, i32 0
  call void @_ZN3url17AppendIPv6AddressEPKhPNS_12CanonOutputTIcEE(i8* %13, %"class.url::CanonOutputT"* nonnull %14) #12
  br label %15

15:                                               ; preds = %2, %12, %9
  call void @_ZN3url20StdStringCanonOutput8CompleteEv(%"class.url::StdStringCanonOutput"* nonnull %3) #12
  call void @_ZN3url20StdStringCanonOutputD1Ev(%"class.url::StdStringCanonOutput"* nonnull %3) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #12
  ret void
}

declare void @_ZN3url20StdStringCanonOutputC1EPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.url::StdStringCanonOutput"*, %"class.std::__1::basic_string"*) unnamed_addr #4

declare void @_ZN3url17AppendIPv4AddressEPKhPNS_12CanonOutputTIcEE(i8*, %"class.url::CanonOutputT"*) local_unnamed_addr #4

declare void @_ZN3url17AppendIPv6AddressEPKhPNS_12CanonOutputTIcEE(i8*, %"class.url::CanonOutputT"*) local_unnamed_addr #4

declare void @_ZN3url20StdStringCanonOutput8CompleteEv(%"class.url::StdStringCanonOutput"*) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @_ZN3url20StdStringCanonOutputD1Ev(%"class.url::StdStringCanonOutput"*) unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net25IPAddressToStringWithPortERKNS_9IPAddressEt(%"class.std::__1::basic_string"* noalias sret, %"class.net::IPAddress"* dereferenceable(17), i16 zeroext) local_unnamed_addr #1 {
  %4 = alloca %"class.url::StdStringCanonOutput", align 8
  %5 = alloca %"class.std::__1::basic_string", align 8
  %6 = bitcast %"class.std::__1::basic_string"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false) #12, !alias.scope !13
  %9 = bitcast %"class.url::StdStringCanonOutput"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %9) #12, !noalias !13
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 32, i1 false) #12, !noalias !13
  call void @_ZN3url20StdStringCanonOutputC1EPNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(%"class.url::StdStringCanonOutput"* nonnull %4, %"class.std::__1::basic_string"* nonnull %5) #12
  %10 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 1
  %11 = load i8, i8* %10, align 1, !noalias !13
  switch i8 %11, label %18 [
    i8 4, label %12
    i8 16, label %15
  ]

12:                                               ; preds = %3
  %13 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 0, i32 0, i64 0
  %14 = getelementptr inbounds %"class.url::StdStringCanonOutput", %"class.url::StdStringCanonOutput"* %4, i64 0, i32 0
  call void @_ZN3url17AppendIPv4AddressEPKhPNS_12CanonOutputTIcEE(i8* %13, %"class.url::CanonOutputT"* nonnull %14) #12
  br label %18

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 0, i32 0, i64 0
  %17 = getelementptr inbounds %"class.url::StdStringCanonOutput", %"class.url::StdStringCanonOutput"* %4, i64 0, i32 0
  call void @_ZN3url17AppendIPv6AddressEPKhPNS_12CanonOutputTIcEE(i8* %16, %"class.url::CanonOutputT"* nonnull %17) #12
  br label %18

18:                                               ; preds = %3, %12, %15
  call void @_ZN3url20StdStringCanonOutput8CompleteEv(%"class.url::StdStringCanonOutput"* nonnull %4) #12
  call void @_ZN3url20StdStringCanonOutputD1Ev(%"class.url::StdStringCanonOutput"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %9) #12, !noalias !13
  %19 = bitcast %"class.std::__1::basic_string"* %5 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %20 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %19, i64 0, i32 1, i32 0
  %21 = load i8, i8* %20, align 1
  %22 = icmp slt i8 %21, 0
  %23 = load i64, i64* %8, align 8
  %24 = zext i8 %21 to i64
  %25 = select i1 %22, i64 %23, i64 %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %18
  %28 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %28, i8* nonnull align 8 %6, i64 24, i1 false) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 0, i64 24, i1 false) #12
  br label %37

29:                                               ; preds = %18
  %30 = load i8, i8* %10, align 1
  %31 = icmp eq i8 %30, 16
  %32 = load i8*, i8** %7, align 8
  %33 = select i1 %22, i8* %32, i8* %6
  %34 = zext i16 %2 to i32
  br i1 %31, label %35, label %36

35:                                               ; preds = %29
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0), i8* %33, i32 %34) #12
  br label %37

36:                                               ; preds = %29
  call void (%"class.std::__1::basic_string"*, i8*, ...) @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret %0, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0), i8* %33, i32 %34) #12
  br label %37

37:                                               ; preds = %36, %35, %27
  %38 = load i8, i8* %20, align 1
  %39 = icmp slt i8 %38, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %37
  %41 = load i8*, i8** %7, align 8
  call void @_ZdlPv(i8* %41) #13
  br label %42

42:                                               ; preds = %37, %40
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %6) #12
  ret void
}

declare void @_ZN4base12StringPrintfEPKcz(%"class.std::__1::basic_string"* sret, i8*, ...) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net23IPAddressToPackedStringERKNS_9IPAddressE(%"class.std::__1::basic_string"* noalias sret, %"class.net::IPAddress"* nocapture readonly dereferenceable(17)) local_unnamed_addr #1 {
  %3 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 0, i32 0, i64 0
  %4 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 1
  %5 = load i8, i8* %4, align 1
  %6 = zext i8 %5 to i64
  %7 = icmp ult i8 %5, 23
  br i1 %7, label %16, label %8

8:                                                ; preds = %2
  %9 = add nuw nsw i64 %6, 16
  %10 = and i64 %9, 496
  %11 = tail call i8* @_Znwm(i64 %10) #13
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %11, i8** %12, align 8
  %13 = or i64 %10, -9223372036854775808
  %14 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %13, i64* %14, align 8
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %6, i64* %15, align 8
  br label %21

16:                                               ; preds = %2
  %17 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %18 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %17, i64 0, i32 1, i32 0
  store i8 %5, i8* %18, align 1
  %19 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %20 = icmp eq i8 %5, 0
  br i1 %20, label %23, label %21

21:                                               ; preds = %16, %8
  %22 = phi i8* [ %11, %8 ], [ %19, %16 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %22, i8* align 1 %3, i64 %6, i1 false) #12
  br label %23

23:                                               ; preds = %16, %21
  %24 = phi i8* [ %19, %16 ], [ %22, %21 ]
  %25 = getelementptr inbounds i8, i8* %24, i64 %6
  store i8 0, i8* %25, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net27ConvertIPv4ToIPv4MappedIPv6ERKNS_9IPAddressE(%"class.net::IPAddress"* noalias nocapture sret, %"class.net::IPAddress"* dereferenceable(17)) local_unnamed_addr #1 {
  %3 = alloca %"class.base::StackVector", align 8
  %4 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 24, i1 false)
  %5 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %3, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %3, i64 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %3, i64 0, i32 0, i32 1, i32 0
  store %"struct.base::StackAllocator<unsigned char, 16>::Source"* %5, %"struct.base::StackAllocator<unsigned char, 16>::Source"** %7, align 8
  %8 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %3, i64 0, i32 0, i32 2
  %9 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %3, i64 0, i32 0, i32 2, i32 0, i32 2, i32 1
  %10 = ptrtoint %"class.base::StackVector"* %3 to i64
  %11 = bitcast %"struct.std::__1::__compressed_pair_elem.9"* %9 to i64*
  store i64 %10, i64* %11, align 8
  %12 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %3, i64 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i8** %12 to i64*
  %14 = bitcast %"class.std::__1::vector.6"* %8 to i64*
  %15 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %3, i64 0, i32 0, i32 2, i32 0, i32 1
  %16 = bitcast i8** %15 to i64*
  store i8 1, i8* %6, align 8
  %17 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %3, i64 0, i32 0, i32 0, i32 0, i64 16
  %18 = ptrtoint i8* %17 to i64
  store i64 %10, i64* %14, align 8
  store i64 %10, i64* %16, align 8
  store i64 %18, i64* %13, align 8
  %19 = call i8* @_ZNSt3__16vectorIhN4base14StackAllocatorIhLm16EEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS9_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSD_IS7_EES9_S9_(%"class.std::__1::vector.6"* %8, i8* nonnull %4, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @_ZN3net12_GLOBAL__N_117kIPv4MappedPrefixE, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @_ZN3net12_GLOBAL__N_117kIPv4MappedPrefixE, i64 1, i64 0))
  %20 = load i8*, i8** %15, align 8
  %21 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 0, i32 0, i64 0
  %22 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 1
  %23 = load i8, i8* %22, align 1
  %24 = zext i8 %23 to i64
  %25 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 0, i32 0, i64 %24
  %26 = call i8* @_ZNSt3__16vectorIhN4base14StackAllocatorIhLm16EEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS9_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSD_IS7_EES9_S9_(%"class.std::__1::vector.6"* %8, i8* %20, i8* %21, i8* %25)
  %27 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %8, i64 0, i32 0, i32 0
  %28 = load i8*, i8** %27, align 8
  %29 = load i64, i64* %16, align 8
  %30 = ptrtoint i8* %28 to i64
  %31 = sub i64 %29, %30
  %32 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0
  call void @_ZN3net14IPAddressBytes6AssignEPKhm(%"class.net::IPAddressBytes"* %32, i8* %28, i64 %31) #12
  %33 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %34 = load i8*, i8** %33, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %47, label %36

36:                                               ; preds = %2
  %37 = ptrtoint i8* %34 to i64
  store i64 %37, i64* %16, align 8
  %38 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %3, i64 0, i32 0, i32 2, i32 0, i32 2, i32 1, i32 0, i32 0
  %39 = load %"struct.base::StackAllocator<unsigned char, 16>::Source"*, %"struct.base::StackAllocator<unsigned char, 16>::Source"** %38, align 8
  %40 = icmp ne %"struct.base::StackAllocator<unsigned char, 16>::Source"* %39, null
  %41 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 16>::Source", %"struct.base::StackAllocator<unsigned char, 16>::Source"* %39, i64 0, i32 0, i64 0
  %42 = icmp eq i8* %41, %34
  %43 = and i1 %40, %42
  br i1 %43, label %44, label %46

44:                                               ; preds = %36
  %45 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 16>::Source", %"struct.base::StackAllocator<unsigned char, 16>::Source"* %39, i64 0, i32 1
  store i8 0, i8* %45, align 1
  br label %47

46:                                               ; preds = %36
  call void @_ZdlPv(i8* nonnull %34) #13
  br label %47

47:                                               ; preds = %2, %44, %46
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #12
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i8* @_ZNSt3__16vectorIhN4base14StackAllocatorIhLm16EEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS9_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSD_IS7_EES9_S9_(%"class.std::__1::vector.6"*, i8*, i8*, i8*) local_unnamed_addr #1 comdat align 2 {
  %5 = ptrtoint i8* %1 to i64
  %6 = ptrtoint i8* %2 to i64
  %7 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 0
  %8 = ptrtoint i8* %3 to i64
  %9 = sub i64 %8, %6
  %10 = icmp sgt i64 %9, 0
  br i1 %10, label %11, label %647

11:                                               ; preds = %4
  %12 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i8** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %16 = load i8*, i8** %15, align 8
  %17 = ptrtoint i8* %16 to i64
  %18 = sub i64 %14, %17
  %19 = icmp sgt i64 %9, %18
  br i1 %19, label %268, label %20

20:                                               ; preds = %11
  %21 = bitcast i8** %15 to i64*
  %22 = sub i64 %17, %5
  %23 = icmp sgt i64 %9, %22
  br i1 %23, label %24, label %141

24:                                               ; preds = %20
  %25 = getelementptr inbounds i8, i8* %2, i64 %22
  %26 = icmp eq i8* %25, %3
  br i1 %26, label %136, label %27

27:                                               ; preds = %24
  %28 = sub i64 %5, %6
  %29 = sub i64 %28, %17
  %30 = getelementptr i8, i8* %3, i64 %29
  %31 = ptrtoint i8* %30 to i64
  %32 = icmp ult i8* %30, inttoptr (i64 32 to i8*)
  br i1 %32, label %123, label %33

33:                                               ; preds = %27
  %34 = sub i64 %5, %6
  %35 = sub i64 %34, %17
  %36 = getelementptr i8, i8* %3, i64 %35
  %37 = ptrtoint i8* %36 to i64
  %38 = getelementptr i8, i8* %16, i64 %37
  %39 = icmp ult i8* %16, %3
  %40 = icmp ult i8* %25, %38
  %41 = and i1 %39, %40
  br i1 %41, label %123, label %42

42:                                               ; preds = %33
  %43 = and i64 %31, -32
  %44 = getelementptr i8, i8* %16, i64 %43
  %45 = getelementptr i8, i8* %25, i64 %43
  %46 = add i64 %43, -32
  %47 = lshr exact i64 %46, 5
  %48 = add nuw nsw i64 %47, 1
  %49 = and i64 %48, 3
  %50 = icmp ult i64 %46, 96
  br i1 %50, label %102, label %51

51:                                               ; preds = %42
  %52 = sub nsw i64 %48, %49
  br label %53

53:                                               ; preds = %53, %51
  %54 = phi i64 [ 0, %51 ], [ %99, %53 ]
  %55 = phi i64 [ %52, %51 ], [ %100, %53 ]
  %56 = getelementptr i8, i8* %16, i64 %54
  %57 = getelementptr i8, i8* %25, i64 %54
  %58 = bitcast i8* %57 to <16 x i8>*
  %59 = load <16 x i8>, <16 x i8>* %58, align 1, !alias.scope !16
  %60 = getelementptr i8, i8* %57, i64 16
  %61 = bitcast i8* %60 to <16 x i8>*
  %62 = load <16 x i8>, <16 x i8>* %61, align 1, !alias.scope !16
  %63 = bitcast i8* %56 to <16 x i8>*
  store <16 x i8> %59, <16 x i8>* %63, align 1, !alias.scope !19, !noalias !16
  %64 = getelementptr i8, i8* %56, i64 16
  %65 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %62, <16 x i8>* %65, align 1, !alias.scope !19, !noalias !16
  %66 = or i64 %54, 32
  %67 = getelementptr i8, i8* %16, i64 %66
  %68 = getelementptr i8, i8* %25, i64 %66
  %69 = bitcast i8* %68 to <16 x i8>*
  %70 = load <16 x i8>, <16 x i8>* %69, align 1, !alias.scope !16
  %71 = getelementptr i8, i8* %68, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  %73 = load <16 x i8>, <16 x i8>* %72, align 1, !alias.scope !16
  %74 = bitcast i8* %67 to <16 x i8>*
  store <16 x i8> %70, <16 x i8>* %74, align 1, !alias.scope !19, !noalias !16
  %75 = getelementptr i8, i8* %67, i64 16
  %76 = bitcast i8* %75 to <16 x i8>*
  store <16 x i8> %73, <16 x i8>* %76, align 1, !alias.scope !19, !noalias !16
  %77 = or i64 %54, 64
  %78 = getelementptr i8, i8* %16, i64 %77
  %79 = getelementptr i8, i8* %25, i64 %77
  %80 = bitcast i8* %79 to <16 x i8>*
  %81 = load <16 x i8>, <16 x i8>* %80, align 1, !alias.scope !16
  %82 = getelementptr i8, i8* %79, i64 16
  %83 = bitcast i8* %82 to <16 x i8>*
  %84 = load <16 x i8>, <16 x i8>* %83, align 1, !alias.scope !16
  %85 = bitcast i8* %78 to <16 x i8>*
  store <16 x i8> %81, <16 x i8>* %85, align 1, !alias.scope !19, !noalias !16
  %86 = getelementptr i8, i8* %78, i64 16
  %87 = bitcast i8* %86 to <16 x i8>*
  store <16 x i8> %84, <16 x i8>* %87, align 1, !alias.scope !19, !noalias !16
  %88 = or i64 %54, 96
  %89 = getelementptr i8, i8* %16, i64 %88
  %90 = getelementptr i8, i8* %25, i64 %88
  %91 = bitcast i8* %90 to <16 x i8>*
  %92 = load <16 x i8>, <16 x i8>* %91, align 1, !alias.scope !16
  %93 = getelementptr i8, i8* %90, i64 16
  %94 = bitcast i8* %93 to <16 x i8>*
  %95 = load <16 x i8>, <16 x i8>* %94, align 1, !alias.scope !16
  %96 = bitcast i8* %89 to <16 x i8>*
  store <16 x i8> %92, <16 x i8>* %96, align 1, !alias.scope !19, !noalias !16
  %97 = getelementptr i8, i8* %89, i64 16
  %98 = bitcast i8* %97 to <16 x i8>*
  store <16 x i8> %95, <16 x i8>* %98, align 1, !alias.scope !19, !noalias !16
  %99 = add i64 %54, 128
  %100 = add i64 %55, -4
  %101 = icmp eq i64 %100, 0
  br i1 %101, label %102, label %53, !llvm.loop !21

102:                                              ; preds = %53, %42
  %103 = phi i64 [ 0, %42 ], [ %99, %53 ]
  %104 = icmp eq i64 %49, 0
  br i1 %104, label %121, label %105

105:                                              ; preds = %102, %105
  %106 = phi i64 [ %118, %105 ], [ %103, %102 ]
  %107 = phi i64 [ %119, %105 ], [ %49, %102 ]
  %108 = getelementptr i8, i8* %16, i64 %106
  %109 = getelementptr i8, i8* %25, i64 %106
  %110 = bitcast i8* %109 to <16 x i8>*
  %111 = load <16 x i8>, <16 x i8>* %110, align 1, !alias.scope !16
  %112 = getelementptr i8, i8* %109, i64 16
  %113 = bitcast i8* %112 to <16 x i8>*
  %114 = load <16 x i8>, <16 x i8>* %113, align 1, !alias.scope !16
  %115 = bitcast i8* %108 to <16 x i8>*
  store <16 x i8> %111, <16 x i8>* %115, align 1, !alias.scope !19, !noalias !16
  %116 = getelementptr i8, i8* %108, i64 16
  %117 = bitcast i8* %116 to <16 x i8>*
  store <16 x i8> %114, <16 x i8>* %117, align 1, !alias.scope !19, !noalias !16
  %118 = add i64 %106, 32
  %119 = add i64 %107, -1
  %120 = icmp eq i64 %119, 0
  br i1 %120, label %121, label %105, !llvm.loop !23

121:                                              ; preds = %105, %102
  %122 = icmp eq i64 %43, %31
  br i1 %122, label %133, label %123

123:                                              ; preds = %121, %33, %27
  %124 = phi i8* [ %16, %33 ], [ %16, %27 ], [ %44, %121 ]
  %125 = phi i8* [ %25, %33 ], [ %25, %27 ], [ %45, %121 ]
  br label %126

126:                                              ; preds = %123, %126
  %127 = phi i8* [ %131, %126 ], [ %124, %123 ]
  %128 = phi i8* [ %130, %126 ], [ %125, %123 ]
  %129 = load i8, i8* %128, align 1
  store i8 %129, i8* %127, align 1
  %130 = getelementptr inbounds i8, i8* %128, i64 1
  %131 = getelementptr inbounds i8, i8* %127, i64 1
  %132 = icmp eq i8* %130, %3
  br i1 %132, label %133, label %126, !llvm.loop !24

133:                                              ; preds = %126, %121
  %134 = phi i8* [ %44, %121 ], [ %131, %126 ]
  %135 = ptrtoint i8* %134 to i64
  br label %136

136:                                              ; preds = %133, %24
  %137 = phi i64 [ %17, %24 ], [ %135, %133 ]
  store i64 %137, i64* %21, align 8
  %138 = icmp sgt i64 %22, 0
  br i1 %138, label %139, label %647

139:                                              ; preds = %136
  %140 = inttoptr i64 %137 to i8*
  br label %141

141:                                              ; preds = %139, %20
  %142 = phi i64 [ %137, %139 ], [ %17, %20 ]
  %143 = phi i8* [ %140, %139 ], [ %16, %20 ]
  %144 = phi i8* [ %25, %139 ], [ %3, %20 ]
  %145 = getelementptr inbounds i8, i8* %1, i64 %9
  %146 = ptrtoint i8* %145 to i64
  %147 = sub i64 %142, %146
  %148 = getelementptr inbounds i8, i8* %1, i64 %147
  %149 = icmp ult i8* %148, %16
  br i1 %149, label %150, label %250

150:                                              ; preds = %141
  %151 = sub i64 %9, %142
  %152 = getelementptr i8, i8* %16, i64 %151
  %153 = ptrtoint i8* %152 to i64
  %154 = icmp ult i8* %152, inttoptr (i64 32 to i8*)
  br i1 %154, label %155, label %158

155:                                              ; preds = %245, %158, %150
  %156 = phi i8* [ %148, %158 ], [ %148, %150 ], [ %168, %245 ]
  %157 = phi i8* [ %143, %158 ], [ %143, %150 ], [ %169, %245 ]
  br label %256

158:                                              ; preds = %150
  %159 = sub i64 %9, %142
  %160 = getelementptr i8, i8* %16, i64 %159
  %161 = ptrtoint i8* %160 to i64
  %162 = getelementptr i8, i8* %143, i64 %161
  %163 = icmp ult i8* %143, %16
  %164 = icmp ult i8* %148, %162
  %165 = and i1 %163, %164
  br i1 %165, label %155, label %166

166:                                              ; preds = %158
  %167 = and i64 %153, -32
  %168 = getelementptr i8, i8* %148, i64 %167
  %169 = getelementptr i8, i8* %143, i64 %167
  %170 = add i64 %167, -32
  %171 = lshr exact i64 %170, 5
  %172 = add nuw nsw i64 %171, 1
  %173 = and i64 %172, 3
  %174 = icmp ult i64 %170, 96
  br i1 %174, label %226, label %175

175:                                              ; preds = %166
  %176 = sub nsw i64 %172, %173
  br label %177

177:                                              ; preds = %177, %175
  %178 = phi i64 [ 0, %175 ], [ %223, %177 ]
  %179 = phi i64 [ %176, %175 ], [ %224, %177 ]
  %180 = getelementptr i8, i8* %148, i64 %178
  %181 = getelementptr i8, i8* %143, i64 %178
  %182 = bitcast i8* %180 to <16 x i8>*
  %183 = load <16 x i8>, <16 x i8>* %182, align 1, !alias.scope !25
  %184 = getelementptr i8, i8* %180, i64 16
  %185 = bitcast i8* %184 to <16 x i8>*
  %186 = load <16 x i8>, <16 x i8>* %185, align 1, !alias.scope !25
  %187 = bitcast i8* %181 to <16 x i8>*
  store <16 x i8> %183, <16 x i8>* %187, align 1, !alias.scope !28, !noalias !25
  %188 = getelementptr i8, i8* %181, i64 16
  %189 = bitcast i8* %188 to <16 x i8>*
  store <16 x i8> %186, <16 x i8>* %189, align 1, !alias.scope !28, !noalias !25
  %190 = or i64 %178, 32
  %191 = getelementptr i8, i8* %148, i64 %190
  %192 = getelementptr i8, i8* %143, i64 %190
  %193 = bitcast i8* %191 to <16 x i8>*
  %194 = load <16 x i8>, <16 x i8>* %193, align 1, !alias.scope !25
  %195 = getelementptr i8, i8* %191, i64 16
  %196 = bitcast i8* %195 to <16 x i8>*
  %197 = load <16 x i8>, <16 x i8>* %196, align 1, !alias.scope !25
  %198 = bitcast i8* %192 to <16 x i8>*
  store <16 x i8> %194, <16 x i8>* %198, align 1, !alias.scope !28, !noalias !25
  %199 = getelementptr i8, i8* %192, i64 16
  %200 = bitcast i8* %199 to <16 x i8>*
  store <16 x i8> %197, <16 x i8>* %200, align 1, !alias.scope !28, !noalias !25
  %201 = or i64 %178, 64
  %202 = getelementptr i8, i8* %148, i64 %201
  %203 = getelementptr i8, i8* %143, i64 %201
  %204 = bitcast i8* %202 to <16 x i8>*
  %205 = load <16 x i8>, <16 x i8>* %204, align 1, !alias.scope !25
  %206 = getelementptr i8, i8* %202, i64 16
  %207 = bitcast i8* %206 to <16 x i8>*
  %208 = load <16 x i8>, <16 x i8>* %207, align 1, !alias.scope !25
  %209 = bitcast i8* %203 to <16 x i8>*
  store <16 x i8> %205, <16 x i8>* %209, align 1, !alias.scope !28, !noalias !25
  %210 = getelementptr i8, i8* %203, i64 16
  %211 = bitcast i8* %210 to <16 x i8>*
  store <16 x i8> %208, <16 x i8>* %211, align 1, !alias.scope !28, !noalias !25
  %212 = or i64 %178, 96
  %213 = getelementptr i8, i8* %148, i64 %212
  %214 = getelementptr i8, i8* %143, i64 %212
  %215 = bitcast i8* %213 to <16 x i8>*
  %216 = load <16 x i8>, <16 x i8>* %215, align 1, !alias.scope !25
  %217 = getelementptr i8, i8* %213, i64 16
  %218 = bitcast i8* %217 to <16 x i8>*
  %219 = load <16 x i8>, <16 x i8>* %218, align 1, !alias.scope !25
  %220 = bitcast i8* %214 to <16 x i8>*
  store <16 x i8> %216, <16 x i8>* %220, align 1, !alias.scope !28, !noalias !25
  %221 = getelementptr i8, i8* %214, i64 16
  %222 = bitcast i8* %221 to <16 x i8>*
  store <16 x i8> %219, <16 x i8>* %222, align 1, !alias.scope !28, !noalias !25
  %223 = add i64 %178, 128
  %224 = add i64 %179, -4
  %225 = icmp eq i64 %224, 0
  br i1 %225, label %226, label %177, !llvm.loop !30

226:                                              ; preds = %177, %166
  %227 = phi i64 [ 0, %166 ], [ %223, %177 ]
  %228 = icmp eq i64 %173, 0
  br i1 %228, label %245, label %229

229:                                              ; preds = %226, %229
  %230 = phi i64 [ %242, %229 ], [ %227, %226 ]
  %231 = phi i64 [ %243, %229 ], [ %173, %226 ]
  %232 = getelementptr i8, i8* %148, i64 %230
  %233 = getelementptr i8, i8* %143, i64 %230
  %234 = bitcast i8* %232 to <16 x i8>*
  %235 = load <16 x i8>, <16 x i8>* %234, align 1, !alias.scope !25
  %236 = getelementptr i8, i8* %232, i64 16
  %237 = bitcast i8* %236 to <16 x i8>*
  %238 = load <16 x i8>, <16 x i8>* %237, align 1, !alias.scope !25
  %239 = bitcast i8* %233 to <16 x i8>*
  store <16 x i8> %235, <16 x i8>* %239, align 1, !alias.scope !28, !noalias !25
  %240 = getelementptr i8, i8* %233, i64 16
  %241 = bitcast i8* %240 to <16 x i8>*
  store <16 x i8> %238, <16 x i8>* %241, align 1, !alias.scope !28, !noalias !25
  %242 = add i64 %230, 32
  %243 = add i64 %231, -1
  %244 = icmp eq i64 %243, 0
  br i1 %244, label %245, label %229, !llvm.loop !31

245:                                              ; preds = %229, %226
  %246 = icmp eq i64 %167, %153
  br i1 %246, label %247, label %155

247:                                              ; preds = %256, %245
  %248 = phi i8* [ %169, %245 ], [ %261, %256 ]
  %249 = ptrtoint i8* %248 to i64
  br label %250

250:                                              ; preds = %247, %141
  %251 = phi i64 [ %249, %247 ], [ %142, %141 ]
  store i64 %251, i64* %21, align 8
  %252 = icmp eq i64 %147, 0
  br i1 %252, label %263, label %253

253:                                              ; preds = %250
  %254 = sub i64 0, %147
  %255 = getelementptr inbounds i8, i8* %143, i64 %254
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %255, i8* align 1 %1, i64 %147, i1 false) #12
  br label %263

256:                                              ; preds = %155, %256
  %257 = phi i8* [ %260, %256 ], [ %156, %155 ]
  %258 = phi i8* [ %261, %256 ], [ %157, %155 ]
  %259 = load i8, i8* %257, align 1
  store i8 %259, i8* %258, align 1
  %260 = getelementptr inbounds i8, i8* %257, i64 1
  %261 = getelementptr inbounds i8, i8* %258, i64 1
  %262 = icmp eq i8* %260, %16
  br i1 %262, label %247, label %256, !llvm.loop !32

263:                                              ; preds = %250, %253
  %264 = ptrtoint i8* %144 to i64
  %265 = sub i64 %264, %6
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %647, label %267

267:                                              ; preds = %263
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %2, i64 %265, i1 false) #12
  br label %647

268:                                              ; preds = %11
  %269 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 2, i32 1, i32 0
  %270 = bitcast i8** %15 to i64*
  %271 = bitcast %"class.std::__1::vector.6"* %0 to i64*
  %272 = load i64, i64* %271, align 8
  %273 = sub i64 %17, %272
  %274 = add i64 %273, %9
  %275 = icmp slt i64 %274, 0
  br i1 %275, label %276, label %278

276:                                              ; preds = %268
  %277 = bitcast %"class.std::__1::vector.6"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %277) #14
  unreachable

278:                                              ; preds = %268
  %279 = sub i64 %14, %272
  %280 = icmp ult i64 %279, 4611686018427387903
  br i1 %280, label %283, label %281

281:                                              ; preds = %278
  %282 = sub i64 %5, %272
  br label %289

283:                                              ; preds = %278
  %284 = shl i64 %279, 1
  %285 = icmp ult i64 %284, %274
  %286 = select i1 %285, i64 %274, i64 %284
  %287 = sub i64 %5, %272
  %288 = icmp eq i64 %286, 0
  br i1 %288, label %306, label %289

289:                                              ; preds = %281, %283
  %290 = phi i64 [ %282, %281 ], [ %287, %283 ]
  %291 = phi i64 [ 9223372036854775807, %281 ], [ %286, %283 ]
  %292 = getelementptr inbounds %"class.base::StackAllocator", %"class.base::StackAllocator"* %269, i64 0, i32 0
  %293 = load %"struct.base::StackAllocator<unsigned char, 16>::Source"*, %"struct.base::StackAllocator<unsigned char, 16>::Source"** %292, align 8
  %294 = icmp eq %"struct.base::StackAllocator<unsigned char, 16>::Source"* %293, null
  br i1 %294, label %304, label %295

295:                                              ; preds = %289
  %296 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 16>::Source", %"struct.base::StackAllocator<unsigned char, 16>::Source"* %293, i64 0, i32 1
  %297 = load i8, i8* %296, align 1, !range !33
  %298 = icmp eq i8 %297, 0
  %299 = icmp ult i64 %291, 17
  %300 = and i1 %299, %298
  br i1 %300, label %301, label %304

301:                                              ; preds = %295
  store i8 1, i8* %296, align 1
  %302 = load %"struct.base::StackAllocator<unsigned char, 16>::Source"*, %"struct.base::StackAllocator<unsigned char, 16>::Source"** %292, align 8
  %303 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 16>::Source", %"struct.base::StackAllocator<unsigned char, 16>::Source"* %302, i64 0, i32 0, i64 0
  br label %306

304:                                              ; preds = %295, %289
  %305 = tail call i8* @_Znwm(i64 %291) #13
  br label %306

306:                                              ; preds = %283, %301, %304
  %307 = phi i64 [ %287, %283 ], [ %290, %301 ], [ %290, %304 ]
  %308 = phi i64 [ 0, %283 ], [ %291, %301 ], [ %291, %304 ]
  %309 = phi i8* [ null, %283 ], [ %303, %301 ], [ %305, %304 ]
  %310 = getelementptr inbounds i8, i8* %309, i64 %307
  %311 = getelementptr inbounds i8, i8* %309, i64 %308
  %312 = getelementptr inbounds i8, i8* %310, i64 %9
  %313 = icmp ult i64 %9, 32
  br i1 %313, label %399, label %314

314:                                              ; preds = %306
  %315 = icmp ult i8* %310, %3
  %316 = icmp ugt i8* %312, %2
  %317 = and i1 %315, %316
  br i1 %317, label %399, label %318

318:                                              ; preds = %314
  %319 = and i64 %9, -32
  %320 = getelementptr i8, i8* %310, i64 %319
  %321 = getelementptr i8, i8* %2, i64 %319
  %322 = add i64 %319, -32
  %323 = lshr exact i64 %322, 5
  %324 = add nuw nsw i64 %323, 1
  %325 = and i64 %324, 3
  %326 = icmp ult i64 %322, 96
  br i1 %326, label %378, label %327

327:                                              ; preds = %318
  %328 = sub nsw i64 %324, %325
  br label %329

329:                                              ; preds = %329, %327
  %330 = phi i64 [ 0, %327 ], [ %375, %329 ]
  %331 = phi i64 [ %328, %327 ], [ %376, %329 ]
  %332 = getelementptr i8, i8* %310, i64 %330
  %333 = getelementptr i8, i8* %2, i64 %330
  %334 = bitcast i8* %333 to <16 x i8>*
  %335 = load <16 x i8>, <16 x i8>* %334, align 1, !alias.scope !34
  %336 = getelementptr i8, i8* %333, i64 16
  %337 = bitcast i8* %336 to <16 x i8>*
  %338 = load <16 x i8>, <16 x i8>* %337, align 1, !alias.scope !34
  %339 = bitcast i8* %332 to <16 x i8>*
  store <16 x i8> %335, <16 x i8>* %339, align 1, !alias.scope !37, !noalias !34
  %340 = getelementptr i8, i8* %332, i64 16
  %341 = bitcast i8* %340 to <16 x i8>*
  store <16 x i8> %338, <16 x i8>* %341, align 1, !alias.scope !37, !noalias !34
  %342 = or i64 %330, 32
  %343 = getelementptr i8, i8* %310, i64 %342
  %344 = getelementptr i8, i8* %2, i64 %342
  %345 = bitcast i8* %344 to <16 x i8>*
  %346 = load <16 x i8>, <16 x i8>* %345, align 1, !alias.scope !34
  %347 = getelementptr i8, i8* %344, i64 16
  %348 = bitcast i8* %347 to <16 x i8>*
  %349 = load <16 x i8>, <16 x i8>* %348, align 1, !alias.scope !34
  %350 = bitcast i8* %343 to <16 x i8>*
  store <16 x i8> %346, <16 x i8>* %350, align 1, !alias.scope !37, !noalias !34
  %351 = getelementptr i8, i8* %343, i64 16
  %352 = bitcast i8* %351 to <16 x i8>*
  store <16 x i8> %349, <16 x i8>* %352, align 1, !alias.scope !37, !noalias !34
  %353 = or i64 %330, 64
  %354 = getelementptr i8, i8* %310, i64 %353
  %355 = getelementptr i8, i8* %2, i64 %353
  %356 = bitcast i8* %355 to <16 x i8>*
  %357 = load <16 x i8>, <16 x i8>* %356, align 1, !alias.scope !34
  %358 = getelementptr i8, i8* %355, i64 16
  %359 = bitcast i8* %358 to <16 x i8>*
  %360 = load <16 x i8>, <16 x i8>* %359, align 1, !alias.scope !34
  %361 = bitcast i8* %354 to <16 x i8>*
  store <16 x i8> %357, <16 x i8>* %361, align 1, !alias.scope !37, !noalias !34
  %362 = getelementptr i8, i8* %354, i64 16
  %363 = bitcast i8* %362 to <16 x i8>*
  store <16 x i8> %360, <16 x i8>* %363, align 1, !alias.scope !37, !noalias !34
  %364 = or i64 %330, 96
  %365 = getelementptr i8, i8* %310, i64 %364
  %366 = getelementptr i8, i8* %2, i64 %364
  %367 = bitcast i8* %366 to <16 x i8>*
  %368 = load <16 x i8>, <16 x i8>* %367, align 1, !alias.scope !34
  %369 = getelementptr i8, i8* %366, i64 16
  %370 = bitcast i8* %369 to <16 x i8>*
  %371 = load <16 x i8>, <16 x i8>* %370, align 1, !alias.scope !34
  %372 = bitcast i8* %365 to <16 x i8>*
  store <16 x i8> %368, <16 x i8>* %372, align 1, !alias.scope !37, !noalias !34
  %373 = getelementptr i8, i8* %365, i64 16
  %374 = bitcast i8* %373 to <16 x i8>*
  store <16 x i8> %371, <16 x i8>* %374, align 1, !alias.scope !37, !noalias !34
  %375 = add i64 %330, 128
  %376 = add i64 %331, -4
  %377 = icmp eq i64 %376, 0
  br i1 %377, label %378, label %329, !llvm.loop !39

378:                                              ; preds = %329, %318
  %379 = phi i64 [ 0, %318 ], [ %375, %329 ]
  %380 = icmp eq i64 %325, 0
  br i1 %380, label %397, label %381

381:                                              ; preds = %378, %381
  %382 = phi i64 [ %394, %381 ], [ %379, %378 ]
  %383 = phi i64 [ %395, %381 ], [ %325, %378 ]
  %384 = getelementptr i8, i8* %310, i64 %382
  %385 = getelementptr i8, i8* %2, i64 %382
  %386 = bitcast i8* %385 to <16 x i8>*
  %387 = load <16 x i8>, <16 x i8>* %386, align 1, !alias.scope !34
  %388 = getelementptr i8, i8* %385, i64 16
  %389 = bitcast i8* %388 to <16 x i8>*
  %390 = load <16 x i8>, <16 x i8>* %389, align 1, !alias.scope !34
  %391 = bitcast i8* %384 to <16 x i8>*
  store <16 x i8> %387, <16 x i8>* %391, align 1, !alias.scope !37, !noalias !34
  %392 = getelementptr i8, i8* %384, i64 16
  %393 = bitcast i8* %392 to <16 x i8>*
  store <16 x i8> %390, <16 x i8>* %393, align 1, !alias.scope !37, !noalias !34
  %394 = add i64 %382, 32
  %395 = add i64 %383, -1
  %396 = icmp eq i64 %395, 0
  br i1 %396, label %397, label %381, !llvm.loop !40

397:                                              ; preds = %381, %378
  %398 = icmp eq i64 %9, %319
  br i1 %398, label %409, label %399

399:                                              ; preds = %397, %314, %306
  %400 = phi i8* [ %310, %314 ], [ %310, %306 ], [ %320, %397 ]
  %401 = phi i8* [ %2, %314 ], [ %2, %306 ], [ %321, %397 ]
  br label %402

402:                                              ; preds = %399, %402
  %403 = phi i8* [ %406, %402 ], [ %400, %399 ]
  %404 = phi i8* [ %407, %402 ], [ %401, %399 ]
  %405 = load i8, i8* %404, align 1
  store i8 %405, i8* %403, align 1
  %406 = getelementptr inbounds i8, i8* %403, i64 1
  %407 = getelementptr inbounds i8, i8* %404, i64 1
  %408 = icmp eq i8* %312, %406
  br i1 %408, label %409, label %402, !llvm.loop !41

409:                                              ; preds = %402, %397
  %410 = ptrtoint i8* %311 to i64
  %411 = load i8*, i8** %7, align 8
  %412 = icmp eq i8* %411, %1
  br i1 %412, label %522, label %413

413:                                              ; preds = %409
  %414 = ptrtoint i8* %411 to i64
  %415 = ptrtoint i8* %1 to i64
  %416 = sub i64 %415, %414
  %417 = icmp ult i64 %416, 16
  br i1 %417, label %512, label %418

418:                                              ; preds = %413
  %419 = sub i64 %307, %5
  %420 = getelementptr i8, i8* %411, i64 %419
  %421 = ptrtoint i8* %420 to i64
  %422 = getelementptr i8, i8* %309, i64 %421
  %423 = icmp ult i8* %422, %1
  %424 = icmp ult i8* %411, %310
  %425 = and i1 %423, %424
  br i1 %425, label %512, label %426

426:                                              ; preds = %418
  %427 = and i64 %416, -16
  %428 = sub i64 0, %427
  %429 = getelementptr i8, i8* %310, i64 %428
  %430 = sub i64 0, %427
  %431 = getelementptr i8, i8* %1, i64 %430
  %432 = add i64 %427, -16
  %433 = lshr exact i64 %432, 4
  %434 = add nuw nsw i64 %433, 1
  %435 = and i64 %434, 3
  %436 = icmp ult i64 %432, 48
  br i1 %436, label %489, label %437

437:                                              ; preds = %426
  %438 = sub nsw i64 %434, %435
  %439 = getelementptr i8, i8* %310, i64 -1
  %440 = getelementptr inbounds i8, i8* %439, i64 -8
  %441 = getelementptr inbounds i8, i8* %1, i64 -16
  %442 = getelementptr inbounds i8, i8* %440, i64 -7
  %443 = getelementptr i8, i8* %310, i64 -1
  %444 = getelementptr inbounds i8, i8* %443, i64 -8
  %445 = getelementptr inbounds i8, i8* %1, i64 -16
  %446 = getelementptr inbounds i8, i8* %444, i64 -7
  %447 = getelementptr i8, i8* %310, i64 -1
  %448 = getelementptr inbounds i8, i8* %447, i64 -8
  %449 = getelementptr inbounds i8, i8* %1, i64 -16
  %450 = getelementptr inbounds i8, i8* %448, i64 -7
  %451 = getelementptr i8, i8* %310, i64 -1
  %452 = getelementptr inbounds i8, i8* %451, i64 -8
  %453 = getelementptr inbounds i8, i8* %1, i64 -16
  %454 = getelementptr inbounds i8, i8* %452, i64 -7
  br label %455

455:                                              ; preds = %455, %437
  %456 = phi i64 [ 0, %437 ], [ %486, %455 ]
  %457 = phi i64 [ %438, %437 ], [ %487, %455 ]
  %458 = sub i64 0, %456
  %459 = sub i64 0, %456
  %460 = getelementptr inbounds i8, i8* %441, i64 %459
  %461 = bitcast i8* %460 to <2 x i64>*
  %462 = load <2 x i64>, <2 x i64>* %461, align 1, !alias.scope !42
  %463 = getelementptr inbounds i8, i8* %442, i64 %458
  %464 = bitcast i8* %463 to <2 x i64>*
  store <2 x i64> %462, <2 x i64>* %464, align 1, !alias.scope !45, !noalias !42
  %465 = sub nuw nsw i64 -16, %456
  %466 = sub nuw nsw i64 -16, %456
  %467 = getelementptr inbounds i8, i8* %445, i64 %466
  %468 = bitcast i8* %467 to <2 x i64>*
  %469 = load <2 x i64>, <2 x i64>* %468, align 1, !alias.scope !42
  %470 = getelementptr inbounds i8, i8* %446, i64 %465
  %471 = bitcast i8* %470 to <2 x i64>*
  store <2 x i64> %469, <2 x i64>* %471, align 1, !alias.scope !45, !noalias !42
  %472 = sub nuw nsw i64 -32, %456
  %473 = sub nuw nsw i64 -32, %456
  %474 = getelementptr inbounds i8, i8* %449, i64 %473
  %475 = bitcast i8* %474 to <2 x i64>*
  %476 = load <2 x i64>, <2 x i64>* %475, align 1, !alias.scope !42
  %477 = getelementptr inbounds i8, i8* %450, i64 %472
  %478 = bitcast i8* %477 to <2 x i64>*
  store <2 x i64> %476, <2 x i64>* %478, align 1, !alias.scope !45, !noalias !42
  %479 = sub nuw nsw i64 -48, %456
  %480 = sub nuw nsw i64 -48, %456
  %481 = getelementptr inbounds i8, i8* %453, i64 %480
  %482 = bitcast i8* %481 to <2 x i64>*
  %483 = load <2 x i64>, <2 x i64>* %482, align 1, !alias.scope !42
  %484 = getelementptr inbounds i8, i8* %454, i64 %479
  %485 = bitcast i8* %484 to <2 x i64>*
  store <2 x i64> %483, <2 x i64>* %485, align 1, !alias.scope !45, !noalias !42
  %486 = add i64 %456, 64
  %487 = add i64 %457, -4
  %488 = icmp eq i64 %487, 0
  br i1 %488, label %489, label %455, !llvm.loop !47

489:                                              ; preds = %455, %426
  %490 = phi i64 [ 0, %426 ], [ %486, %455 ]
  %491 = icmp eq i64 %435, 0
  br i1 %491, label %510, label %492

492:                                              ; preds = %489
  %493 = getelementptr i8, i8* %310, i64 -1
  %494 = getelementptr inbounds i8, i8* %493, i64 -8
  %495 = getelementptr inbounds i8, i8* %1, i64 -16
  %496 = getelementptr inbounds i8, i8* %494, i64 -7
  br label %497

497:                                              ; preds = %497, %492
  %498 = phi i64 [ %490, %492 ], [ %507, %497 ]
  %499 = phi i64 [ %435, %492 ], [ %508, %497 ]
  %500 = sub i64 0, %498
  %501 = sub i64 0, %498
  %502 = getelementptr inbounds i8, i8* %495, i64 %501
  %503 = bitcast i8* %502 to <2 x i64>*
  %504 = load <2 x i64>, <2 x i64>* %503, align 1, !alias.scope !42
  %505 = getelementptr inbounds i8, i8* %496, i64 %500
  %506 = bitcast i8* %505 to <2 x i64>*
  store <2 x i64> %504, <2 x i64>* %506, align 1, !alias.scope !45, !noalias !42
  %507 = add i64 %498, 16
  %508 = add i64 %499, -1
  %509 = icmp eq i64 %508, 0
  br i1 %509, label %510, label %497, !llvm.loop !48

510:                                              ; preds = %497, %489
  %511 = icmp eq i64 %416, %427
  br i1 %511, label %522, label %512

512:                                              ; preds = %510, %418, %413
  %513 = phi i8* [ %310, %418 ], [ %310, %413 ], [ %429, %510 ]
  %514 = phi i8* [ %1, %418 ], [ %1, %413 ], [ %431, %510 ]
  br label %515

515:                                              ; preds = %512, %515
  %516 = phi i8* [ %518, %515 ], [ %513, %512 ]
  %517 = phi i8* [ %519, %515 ], [ %514, %512 ]
  %518 = getelementptr inbounds i8, i8* %516, i64 -1
  %519 = getelementptr inbounds i8, i8* %517, i64 -1
  %520 = load i8, i8* %519, align 1
  store i8 %520, i8* %518, align 1
  %521 = icmp eq i8* %519, %411
  br i1 %521, label %522, label %515, !llvm.loop !49

522:                                              ; preds = %515, %510, %409
  %523 = phi i8* [ %310, %409 ], [ %429, %510 ], [ %518, %515 ]
  %524 = load i8*, i8** %15, align 8
  %525 = icmp eq i8* %524, %1
  br i1 %525, label %631, label %526

526:                                              ; preds = %522
  %527 = ptrtoint i8* %524 to i64
  %528 = sub i64 %527, %5
  %529 = icmp ult i64 %528, 32
  br i1 %529, label %621, label %530

530:                                              ; preds = %526
  %531 = add i64 %307, %8
  %532 = sub i64 %531, %5
  %533 = sub i64 %532, %6
  %534 = getelementptr i8, i8* %524, i64 %533
  %535 = ptrtoint i8* %534 to i64
  %536 = getelementptr i8, i8* %309, i64 %535
  %537 = icmp ult i8* %312, %524
  %538 = icmp ugt i8* %536, %1
  %539 = and i1 %537, %538
  br i1 %539, label %621, label %540

540:                                              ; preds = %530
  %541 = and i64 %528, -32
  %542 = getelementptr i8, i8* %312, i64 %541
  %543 = getelementptr i8, i8* %1, i64 %541
  %544 = add i64 %541, -32
  %545 = lshr exact i64 %544, 5
  %546 = add nuw nsw i64 %545, 1
  %547 = and i64 %546, 3
  %548 = icmp ult i64 %544, 96
  br i1 %548, label %600, label %549

549:                                              ; preds = %540
  %550 = sub nsw i64 %546, %547
  br label %551

551:                                              ; preds = %551, %549
  %552 = phi i64 [ 0, %549 ], [ %597, %551 ]
  %553 = phi i64 [ %550, %549 ], [ %598, %551 ]
  %554 = getelementptr i8, i8* %312, i64 %552
  %555 = getelementptr i8, i8* %1, i64 %552
  %556 = bitcast i8* %555 to <16 x i8>*
  %557 = load <16 x i8>, <16 x i8>* %556, align 1, !alias.scope !50
  %558 = getelementptr i8, i8* %555, i64 16
  %559 = bitcast i8* %558 to <16 x i8>*
  %560 = load <16 x i8>, <16 x i8>* %559, align 1, !alias.scope !50
  %561 = bitcast i8* %554 to <16 x i8>*
  store <16 x i8> %557, <16 x i8>* %561, align 1, !alias.scope !53, !noalias !50
  %562 = getelementptr i8, i8* %554, i64 16
  %563 = bitcast i8* %562 to <16 x i8>*
  store <16 x i8> %560, <16 x i8>* %563, align 1, !alias.scope !53, !noalias !50
  %564 = or i64 %552, 32
  %565 = getelementptr i8, i8* %312, i64 %564
  %566 = getelementptr i8, i8* %1, i64 %564
  %567 = bitcast i8* %566 to <16 x i8>*
  %568 = load <16 x i8>, <16 x i8>* %567, align 1, !alias.scope !50
  %569 = getelementptr i8, i8* %566, i64 16
  %570 = bitcast i8* %569 to <16 x i8>*
  %571 = load <16 x i8>, <16 x i8>* %570, align 1, !alias.scope !50
  %572 = bitcast i8* %565 to <16 x i8>*
  store <16 x i8> %568, <16 x i8>* %572, align 1, !alias.scope !53, !noalias !50
  %573 = getelementptr i8, i8* %565, i64 16
  %574 = bitcast i8* %573 to <16 x i8>*
  store <16 x i8> %571, <16 x i8>* %574, align 1, !alias.scope !53, !noalias !50
  %575 = or i64 %552, 64
  %576 = getelementptr i8, i8* %312, i64 %575
  %577 = getelementptr i8, i8* %1, i64 %575
  %578 = bitcast i8* %577 to <16 x i8>*
  %579 = load <16 x i8>, <16 x i8>* %578, align 1, !alias.scope !50
  %580 = getelementptr i8, i8* %577, i64 16
  %581 = bitcast i8* %580 to <16 x i8>*
  %582 = load <16 x i8>, <16 x i8>* %581, align 1, !alias.scope !50
  %583 = bitcast i8* %576 to <16 x i8>*
  store <16 x i8> %579, <16 x i8>* %583, align 1, !alias.scope !53, !noalias !50
  %584 = getelementptr i8, i8* %576, i64 16
  %585 = bitcast i8* %584 to <16 x i8>*
  store <16 x i8> %582, <16 x i8>* %585, align 1, !alias.scope !53, !noalias !50
  %586 = or i64 %552, 96
  %587 = getelementptr i8, i8* %312, i64 %586
  %588 = getelementptr i8, i8* %1, i64 %586
  %589 = bitcast i8* %588 to <16 x i8>*
  %590 = load <16 x i8>, <16 x i8>* %589, align 1, !alias.scope !50
  %591 = getelementptr i8, i8* %588, i64 16
  %592 = bitcast i8* %591 to <16 x i8>*
  %593 = load <16 x i8>, <16 x i8>* %592, align 1, !alias.scope !50
  %594 = bitcast i8* %587 to <16 x i8>*
  store <16 x i8> %590, <16 x i8>* %594, align 1, !alias.scope !53, !noalias !50
  %595 = getelementptr i8, i8* %587, i64 16
  %596 = bitcast i8* %595 to <16 x i8>*
  store <16 x i8> %593, <16 x i8>* %596, align 1, !alias.scope !53, !noalias !50
  %597 = add i64 %552, 128
  %598 = add i64 %553, -4
  %599 = icmp eq i64 %598, 0
  br i1 %599, label %600, label %551, !llvm.loop !55

600:                                              ; preds = %551, %540
  %601 = phi i64 [ 0, %540 ], [ %597, %551 ]
  %602 = icmp eq i64 %547, 0
  br i1 %602, label %619, label %603

603:                                              ; preds = %600, %603
  %604 = phi i64 [ %616, %603 ], [ %601, %600 ]
  %605 = phi i64 [ %617, %603 ], [ %547, %600 ]
  %606 = getelementptr i8, i8* %312, i64 %604
  %607 = getelementptr i8, i8* %1, i64 %604
  %608 = bitcast i8* %607 to <16 x i8>*
  %609 = load <16 x i8>, <16 x i8>* %608, align 1, !alias.scope !50
  %610 = getelementptr i8, i8* %607, i64 16
  %611 = bitcast i8* %610 to <16 x i8>*
  %612 = load <16 x i8>, <16 x i8>* %611, align 1, !alias.scope !50
  %613 = bitcast i8* %606 to <16 x i8>*
  store <16 x i8> %609, <16 x i8>* %613, align 1, !alias.scope !53, !noalias !50
  %614 = getelementptr i8, i8* %606, i64 16
  %615 = bitcast i8* %614 to <16 x i8>*
  store <16 x i8> %612, <16 x i8>* %615, align 1, !alias.scope !53, !noalias !50
  %616 = add i64 %604, 32
  %617 = add i64 %605, -1
  %618 = icmp eq i64 %617, 0
  br i1 %618, label %619, label %603, !llvm.loop !56

619:                                              ; preds = %603, %600
  %620 = icmp eq i64 %528, %541
  br i1 %620, label %631, label %621

621:                                              ; preds = %619, %530, %526
  %622 = phi i8* [ %312, %530 ], [ %312, %526 ], [ %542, %619 ]
  %623 = phi i8* [ %1, %530 ], [ %1, %526 ], [ %543, %619 ]
  br label %624

624:                                              ; preds = %621, %624
  %625 = phi i8* [ %629, %624 ], [ %622, %621 ]
  %626 = phi i8* [ %628, %624 ], [ %623, %621 ]
  %627 = load i8, i8* %626, align 1
  store i8 %627, i8* %625, align 1
  %628 = getelementptr inbounds i8, i8* %626, i64 1
  %629 = getelementptr inbounds i8, i8* %625, i64 1
  %630 = icmp eq i8* %628, %524
  br i1 %630, label %631, label %624, !llvm.loop !57

631:                                              ; preds = %624, %619, %522
  %632 = phi i8* [ %312, %522 ], [ %542, %619 ], [ %629, %624 ]
  %633 = ptrtoint i8* %523 to i64
  %634 = ptrtoint i8* %632 to i64
  %635 = load i8*, i8** %7, align 8
  store i64 %633, i64* %271, align 8
  store i64 %634, i64* %270, align 8
  store i64 %410, i64* %13, align 8
  %636 = icmp eq i8* %635, null
  br i1 %636, label %647, label %637

637:                                              ; preds = %631
  %638 = getelementptr inbounds %"class.base::StackAllocator", %"class.base::StackAllocator"* %269, i64 0, i32 0
  %639 = load %"struct.base::StackAllocator<unsigned char, 16>::Source"*, %"struct.base::StackAllocator<unsigned char, 16>::Source"** %638, align 8
  %640 = icmp ne %"struct.base::StackAllocator<unsigned char, 16>::Source"* %639, null
  %641 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 16>::Source", %"struct.base::StackAllocator<unsigned char, 16>::Source"* %639, i64 0, i32 0, i64 0
  %642 = icmp eq i8* %641, %635
  %643 = and i1 %640, %642
  br i1 %643, label %644, label %646

644:                                              ; preds = %637
  %645 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 16>::Source", %"struct.base::StackAllocator<unsigned char, 16>::Source"* %639, i64 0, i32 1
  store i8 0, i8* %645, align 1
  br label %647

646:                                              ; preds = %637
  tail call void @_ZdlPv(i8* nonnull %635) #13
  br label %647

647:                                              ; preds = %646, %644, %631, %136, %263, %267, %4
  %648 = phi i8* [ %1, %4 ], [ %1, %267 ], [ %1, %263 ], [ %1, %136 ], [ %310, %631 ], [ %310, %644 ], [ %310, %646 ]
  ret i8* %648
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN3net27ConvertIPv4MappedIPv6ToIPv4ERKNS_9IPAddressE(%"class.net::IPAddress"* noalias nocapture sret, %"class.net::IPAddress"* dereferenceable(17)) local_unnamed_addr #1 {
  %3 = alloca %"class.base::StackVector", align 8
  %4 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %3, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %4) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %4, i8 -86, i64 24, i1 false)
  %5 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %3, i64 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %3, i64 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %3, i64 0, i32 0, i32 1, i32 0
  store %"struct.base::StackAllocator<unsigned char, 16>::Source"* %5, %"struct.base::StackAllocator<unsigned char, 16>::Source"** %7, align 8
  %8 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %3, i64 0, i32 0, i32 2
  %9 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %3, i64 0, i32 0, i32 2, i32 0, i32 2, i32 1
  %10 = ptrtoint %"class.base::StackVector"* %3 to i64
  %11 = bitcast %"struct.std::__1::__compressed_pair_elem.9"* %9 to i64*
  store i64 %10, i64* %11, align 8
  %12 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %3, i64 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast i8** %12 to i64*
  %14 = bitcast %"class.std::__1::vector.6"* %8 to i64*
  %15 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %3, i64 0, i32 0, i32 2, i32 0, i32 1
  %16 = bitcast i8** %15 to i64*
  store i8 1, i8* %6, align 8
  %17 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %3, i64 0, i32 0, i32 0, i32 0, i64 16
  %18 = ptrtoint i8* %17 to i64
  store i64 %10, i64* %14, align 8
  store i64 %10, i64* %16, align 8
  store i64 %18, i64* %13, align 8
  %19 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 0, i32 0, i64 12
  %20 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 1
  %21 = load i8, i8* %20, align 1
  %22 = zext i8 %21 to i64
  %23 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 0, i32 0, i64 %22
  %24 = call i8* @_ZNSt3__16vectorIhN4base14StackAllocatorIhLm16EEEE6insertIPKhEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS9_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSD_IS7_EES9_S9_(%"class.std::__1::vector.6"* %8, i8* nonnull %4, i8* %19, i8* %23)
  %25 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %8, i64 0, i32 0, i32 0
  %26 = load i8*, i8** %25, align 8
  %27 = load i64, i64* %16, align 8
  %28 = ptrtoint i8* %26 to i64
  %29 = sub i64 %27, %28
  %30 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0
  call void @_ZN3net14IPAddressBytes6AssignEPKhm(%"class.net::IPAddressBytes"* %30, i8* %26, i64 %29) #12
  %31 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %45, label %34

34:                                               ; preds = %2
  %35 = ptrtoint i8* %32 to i64
  store i64 %35, i64* %16, align 8
  %36 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %3, i64 0, i32 0, i32 2, i32 0, i32 2, i32 1, i32 0, i32 0
  %37 = load %"struct.base::StackAllocator<unsigned char, 16>::Source"*, %"struct.base::StackAllocator<unsigned char, 16>::Source"** %36, align 8
  %38 = icmp ne %"struct.base::StackAllocator<unsigned char, 16>::Source"* %37, null
  %39 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 16>::Source", %"struct.base::StackAllocator<unsigned char, 16>::Source"* %37, i64 0, i32 0, i64 0
  %40 = icmp eq i8* %39, %32
  %41 = and i1 %38, %40
  br i1 %41, label %42, label %44

42:                                               ; preds = %34
  %43 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 16>::Source", %"struct.base::StackAllocator<unsigned char, 16>::Source"* %37, i64 0, i32 1
  store i8 0, i8* %43, align 1
  br label %45

44:                                               ; preds = %34
  call void @_ZdlPv(i8* nonnull %32) #13
  br label %45

45:                                               ; preds = %2, %42, %44
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %4) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net22IPAddressMatchesPrefixERKNS_9IPAddressES2_m(%"class.net::IPAddress"* dereferenceable(17), %"class.net::IPAddress"* dereferenceable(17), i64) local_unnamed_addr #1 {
  %4 = alloca %"class.net::IPAddress", align 1
  %5 = alloca %"class.net::IPAddress", align 1
  %6 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  %7 = load i8, i8* %6, align 1
  %8 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 1
  %9 = load i8, i8* %8, align 1
  %10 = icmp eq i8 %7, %9
  br i1 %10, label %20, label %11

11:                                               ; preds = %3
  %12 = icmp eq i8 %7, 4
  br i1 %12, label %13, label %16

13:                                               ; preds = %11
  %14 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %14) #12
  call void @_ZN3net27ConvertIPv4ToIPv4MappedIPv6ERKNS_9IPAddressE(%"class.net::IPAddress"* nonnull sret %4, %"class.net::IPAddress"* dereferenceable(17) %0)
  %15 = call zeroext i1 @_ZN3net22IPAddressMatchesPrefixERKNS_9IPAddressES2_m(%"class.net::IPAddress"* nonnull dereferenceable(17) %4, %"class.net::IPAddress"* dereferenceable(17) %1, i64 %2)
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %14) #12
  br label %49

16:                                               ; preds = %11
  %17 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %5, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %17) #12
  call void @_ZN3net27ConvertIPv4ToIPv4MappedIPv6ERKNS_9IPAddressE(%"class.net::IPAddress"* nonnull sret %5, %"class.net::IPAddress"* dereferenceable(17) %1)
  %18 = add i64 %2, 96
  %19 = call zeroext i1 @_ZN3net22IPAddressMatchesPrefixERKNS_9IPAddressES2_m(%"class.net::IPAddress"* dereferenceable(17) %0, %"class.net::IPAddress"* nonnull dereferenceable(17) %5, i64 %18)
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %17) #12
  br label %49

20:                                               ; preds = %3
  %21 = lshr i64 %2, 3
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %33, label %25

23:                                               ; preds = %25
  %24 = icmp eq i64 %32, %21
  br i1 %24, label %33, label %25

25:                                               ; preds = %20, %23
  %26 = phi i64 [ %32, %23 ], [ 0, %20 ]
  %27 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 0, i32 0, i64 %26
  %30 = load i8, i8* %29, align 1
  %31 = icmp eq i8 %28, %30
  %32 = add nuw nsw i64 %26, 1
  br i1 %31, label %23, label %49

33:                                               ; preds = %23, %20
  %34 = and i64 %2, 7
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %48, label %36

36:                                               ; preds = %33
  %37 = trunc i64 %34 to i32
  %38 = sub nuw nsw i32 8, %37
  %39 = shl i32 255, %38
  %40 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 %21
  %41 = load i8, i8* %40, align 1
  %42 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 0, i32 0, i64 %21
  %43 = load i8, i8* %42, align 1
  %44 = xor i8 %43, %41
  %45 = zext i8 %44 to i32
  %46 = and i32 %39, %45
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %49

48:                                               ; preds = %36, %33
  br label %49

49:                                               ; preds = %25, %48, %36, %16, %13
  %50 = phi i1 [ %15, %13 ], [ %19, %16 ], [ true, %48 ], [ false, %36 ], [ false, %25 ]
  ret i1 %50
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net14ParseCIDRBlockEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS_9IPAddressEPm(i8*, i64, %"class.net::IPAddress"*, i64* nocapture) local_unnamed_addr #1 {
  %5 = alloca %"class.std::__1::vector.11", align 8
  %6 = alloca i32, align 4
  %7 = bitcast %"class.std::__1::vector.11"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %7) #12
  %8 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %5, i64 0, i32 0, i32 0
  %9 = getelementptr inbounds %"class.std::__1::vector.11", %"class.std::__1::vector.11"* %5, i64 0, i32 0, i32 1
  %10 = bitcast %"class.std::__1::vector.11"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %10, i8 -86, i64 24, i1 false)
  call void @_ZN4base16SplitStringPieceENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_NS_18WhitespaceHandlingENS_11SplitResultE(%"class.std::__1::vector.11"* nonnull sret %5, i8* %0, i64 %1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i64 1, i32 1, i32 0) #12
  %11 = bitcast %"class.base::BasicStringPiece"** %9 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = bitcast %"class.std::__1::vector.11"* %5 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = sub i64 %12, %14
  %16 = icmp eq i64 %15, 32
  %17 = inttoptr i64 %14 to %"class.base::BasicStringPiece"*
  br i1 %16, label %18, label %39

18:                                               ; preds = %4
  %19 = call zeroext i1 @_ZN3net9IPAddress19AssignFromIPLiteralERKN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.net::IPAddress"* %2, %"class.base::BasicStringPiece"* dereferenceable(16) %17)
  br i1 %19, label %20, label %36

20:                                               ; preds = %18
  %21 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %21) #12
  store i32 -1431655766, i32* %6, align 4
  %22 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %8, align 8
  %23 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %22, i64 1
  %24 = call zeroext i1 @_ZN3net11ParseUint32ERKN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPjPNS_13ParseIntErrorE(%"class.base::BasicStringPiece"* dereferenceable(16) %23, i32* nonnull %6, i32* null) #12
  br i1 %24, label %25, label %34

25:                                               ; preds = %20
  %26 = load i32, i32* %6, align 4
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %2, i64 0, i32 0, i32 1
  %29 = load i8, i8* %28, align 1
  %30 = zext i8 %29 to i64
  %31 = shl nuw nsw i64 %30, 3
  %32 = icmp ult i64 %31, %27
  br i1 %32, label %34, label %33

33:                                               ; preds = %25
  store i64 %27, i64* %3, align 8
  br label %34

34:                                               ; preds = %25, %20, %33
  %35 = phi i1 [ true, %33 ], [ false, %20 ], [ false, %25 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %21) #12
  br label %36

36:                                               ; preds = %34, %18
  %37 = phi i1 [ false, %18 ], [ %35, %34 ]
  %38 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %8, align 8
  br label %39

39:                                               ; preds = %36, %4
  %40 = phi %"class.base::BasicStringPiece"* [ %38, %36 ], [ %17, %4 ]
  %41 = phi i1 [ %37, %36 ], [ false, %4 ]
  %42 = icmp eq %"class.base::BasicStringPiece"* %40, null
  br i1 %42, label %46, label %43

43:                                               ; preds = %39
  %44 = ptrtoint %"class.base::BasicStringPiece"* %40 to i64
  store i64 %44, i64* %11, align 8
  %45 = bitcast %"class.base::BasicStringPiece"* %40 to i8*
  call void @_ZdlPv(i8* %45) #13
  br label %46

46:                                               ; preds = %39, %43
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %7) #12
  ret i1 %41
}

declare void @_ZN4base16SplitStringPieceENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES4_NS_18WhitespaceHandlingENS_11SplitResultE(%"class.std::__1::vector.11"* sret, i8*, i64, i8*, i64, i32, i32) local_unnamed_addr #4

declare zeroext i1 @_ZN3net11ParseUint32ERKN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPjPNS_13ParseIntErrorE(%"class.base::BasicStringPiece"* dereferenceable(16), i32*, i32*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3net25ParseURLHostnameToAddressERKN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEEPNS_9IPAddressE(%"class.base::BasicStringPiece"* dereferenceable(16), %"class.net::IPAddress"*) local_unnamed_addr #1 {
  %3 = alloca %"class.base::BasicStringPiece", align 8
  %4 = alloca %"class.base::BasicStringPiece", align 8
  %5 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, 1
  br i1 %7, label %8, label %36

8:                                                ; preds = %2
  %9 = tail call dereferenceable(1) i8* @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE2atEm(%"class.base::BasicStringPiece"* %0, i64 0) #12
  %10 = load i8, i8* %9, align 1
  %11 = icmp eq i8 %10, 91
  br i1 %11, label %12, label %36

12:                                               ; preds = %8
  %13 = load i64, i64* %5, align 8
  %14 = add i64 %13, -1
  %15 = tail call dereferenceable(1) i8* @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE2atEm(%"class.base::BasicStringPiece"* %0, i64 %14) #12
  %16 = load i8, i8* %15, align 1
  %17 = icmp eq i8 %16, 93
  br i1 %17, label %18, label %36

18:                                               ; preds = %12
  %19 = bitcast %"class.base::BasicStringPiece"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #12
  %20 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %3, i64 0, i32 0
  %21 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %3, i64 0, i32 1
  %22 = bitcast %"class.base::BasicStringPiece"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %22) #12
  %23 = bitcast %"class.base::BasicStringPiece"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %22, i8* align 8 %23, i64 16, i1 false)
  %24 = load i64, i64* %5, align 8
  %25 = add i64 %24, -2
  %26 = call { i8*, i64 } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6substrEmm(%"class.base::BasicStringPiece"* nonnull %4, i64 1, i64 %25)
  %27 = extractvalue { i8*, i64 } %26, 0
  store i8* %27, i8** %20, align 8
  %28 = extractvalue { i8*, i64 } %26, 1
  store i64 %28, i64* %21, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %22) #12
  %29 = call zeroext i1 @_ZN3net9IPAddress19AssignFromIPLiteralERKN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.net::IPAddress"* %1, %"class.base::BasicStringPiece"* nonnull dereferenceable(16) %3)
  br i1 %29, label %30, label %34

30:                                               ; preds = %18
  %31 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 1
  %32 = load i8, i8* %31, align 1
  %33 = icmp eq i8 %32, 16
  br label %34

34:                                               ; preds = %30, %18
  %35 = phi i1 [ false, %18 ], [ %33, %30 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #12
  br label %42

36:                                               ; preds = %12, %8, %2
  %37 = tail call zeroext i1 @_ZN3net9IPAddress19AssignFromIPLiteralERKN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%"class.net::IPAddress"* %1, %"class.base::BasicStringPiece"* dereferenceable(16) %0)
  br i1 %37, label %38, label %42

38:                                               ; preds = %36
  %39 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 1
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 4
  br label %42

42:                                               ; preds = %36, %38, %34
  %43 = phi i1 [ %35, %34 ], [ false, %36 ], [ %41, %38 ]
  ret i1 %43
}

; Function Attrs: nounwind ssp uwtable
declare { i8*, i64 } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6substrEmm(%"class.base::BasicStringPiece"*, i64, i64) local_unnamed_addr #1 align 2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN3net18CommonPrefixLengthERKNS_9IPAddressES2_(%"class.net::IPAddress"* nocapture readonly dereferenceable(17), %"class.net::IPAddress"* nocapture readonly dereferenceable(17)) local_unnamed_addr #6 {
  %3 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  %4 = load i8, i8* %3, align 1
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %31, label %6

6:                                                ; preds = %2
  %7 = zext i8 %4 to i64
  br label %8

8:                                                ; preds = %6, %21
  %9 = phi i64 [ 0, %6 ], [ %22, %21 ]
  %10 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 %9
  %11 = load i8, i8* %10, align 1
  %12 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %1, i64 0, i32 0, i32 0, i32 0, i64 %9
  %13 = load i8, i8* %12, align 1
  %14 = xor i8 %13, %11
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %21, label %16

16:                                               ; preds = %8
  %17 = icmp slt i8 %14, 0
  br i1 %17, label %24, label %18

18:                                               ; preds = %16
  %19 = and i8 %14, 64
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %33, label %24

21:                                               ; preds = %48, %8
  %22 = add nuw nsw i64 %9, 1
  %23 = icmp ult i64 %22, %7
  br i1 %23, label %8, label %28

24:                                               ; preds = %45, %42, %39, %36, %33, %18, %48, %16
  %25 = phi i64 [ 0, %16 ], [ 1, %18 ], [ 2, %33 ], [ 3, %36 ], [ 4, %39 ], [ 5, %42 ], [ 6, %45 ], [ 7, %48 ]
  %26 = shl i64 %9, 3
  %27 = or i64 %26, %25
  br label %31

28:                                               ; preds = %21
  %29 = zext i8 %4 to i64
  %30 = shl nuw nsw i64 %29, 3
  br label %31

31:                                               ; preds = %28, %2, %24
  %32 = phi i64 [ %27, %24 ], [ %30, %28 ], [ 0, %2 ]
  ret i64 %32

33:                                               ; preds = %18
  %34 = and i8 %14, 32
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %36, label %24

36:                                               ; preds = %33
  %37 = and i8 %14, 16
  %38 = icmp eq i8 %37, 0
  br i1 %38, label %39, label %24

39:                                               ; preds = %36
  %40 = and i8 %14, 8
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %42, label %24

42:                                               ; preds = %39
  %43 = and i8 %14, 4
  %44 = icmp eq i8 %43, 0
  br i1 %44, label %45, label %24

45:                                               ; preds = %42
  %46 = and i8 %14, 2
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %24

48:                                               ; preds = %45
  %49 = and i8 %14, 1
  %50 = icmp eq i8 %49, 0
  br i1 %50, label %21, label %24
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN3net16MaskPrefixLengthERKNS_9IPAddressE(%"class.net::IPAddress"* nocapture readonly dereferenceable(17)) local_unnamed_addr #1 {
  %2 = alloca %"class.base::StackVector", align 8
  %3 = alloca i8, align 1
  %4 = alloca %"class.net::IPAddress", align 1
  %5 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %5) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 24, i1 false)
  %6 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 0
  %7 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 0, i32 1
  %8 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 1, i32 0
  store %"struct.base::StackAllocator<unsigned char, 16>::Source"* %6, %"struct.base::StackAllocator<unsigned char, 16>::Source"** %8, align 8
  %9 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 2
  %10 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 2, i32 0, i32 2, i32 1
  %11 = ptrtoint %"class.base::StackVector"* %2 to i64
  %12 = bitcast %"struct.std::__1::__compressed_pair_elem.9"* %10 to i64*
  store i64 %11, i64* %12, align 8
  %13 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %14 = bitcast i8** %13 to i64*
  %15 = bitcast %"class.std::__1::vector.6"* %9 to i64*
  %16 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 2, i32 0, i32 1
  %17 = bitcast i8** %16 to i64*
  store i8 1, i8* %7, align 8
  %18 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 0, i32 0, i64 16
  %19 = ptrtoint i8* %18 to i64
  store i64 %11, i64* %15, align 8
  store i64 %11, i64* %17, align 8
  store i64 %19, i64* %14, align 8
  %20 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 1
  %21 = load i8, i8* %20, align 1
  call void @llvm.lifetime.start.p0i8(i64 1, i8* nonnull %3) #12
  store i8 -1, i8* %3, align 1
  %22 = icmp eq i8 %21, 0
  %23 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 0, i32 0, i64 0
  br i1 %22, label %29, label %24

24:                                               ; preds = %1
  %25 = zext i8 %21 to i64
  call void @_ZNSt3__16vectorIhN4base14StackAllocatorIhLm16EEEE8__appendEmRKh(%"class.std::__1::vector.6"* %9, i64 %25, i8* nonnull dereferenceable(1) %3) #12
  %26 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %9, i64 0, i32 0, i32 0
  %27 = load i8*, i8** %26, align 8
  %28 = load i64, i64* %17, align 8
  br label %29

29:                                               ; preds = %1, %24
  %30 = phi i64 [ %28, %24 ], [ %11, %1 ]
  %31 = phi i8* [ %27, %24 ], [ %23, %1 ]
  call void @llvm.lifetime.end.p0i8(i64 1, i8* nonnull %3) #12
  %32 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %4, i64 0, i32 0, i32 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 17, i8* nonnull %32) #12
  %33 = ptrtoint i8* %31 to i64
  %34 = sub i64 %30, %33
  %35 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %4, i64 0, i32 0
  call void @_ZN3net14IPAddressBytes6AssignEPKhm(%"class.net::IPAddressBytes"* nonnull %35, i8* %31, i64 %34) #12
  %36 = load i8, i8* %20, align 1
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %80, label %38

38:                                               ; preds = %29
  %39 = zext i8 %36 to i64
  br label %40

40:                                               ; preds = %53, %38
  %41 = phi i64 [ 0, %38 ], [ %54, %53 ]
  %42 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %0, i64 0, i32 0, i32 0, i32 0, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = getelementptr inbounds %"class.net::IPAddress", %"class.net::IPAddress"* %4, i64 0, i32 0, i32 0, i32 0, i64 %41
  %45 = load i8, i8* %44, align 1
  %46 = xor i8 %45, %43
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %53, label %48

48:                                               ; preds = %40
  %49 = icmp slt i8 %46, 0
  br i1 %49, label %56, label %50

50:                                               ; preds = %48
  %51 = and i8 %46, 64
  %52 = icmp eq i8 %51, 0
  br i1 %52, label %62, label %56

53:                                               ; preds = %77, %40
  %54 = add nuw nsw i64 %41, 1
  %55 = icmp eq i64 %54, %39
  br i1 %55, label %60, label %40

56:                                               ; preds = %77, %74, %71, %68, %65, %62, %50, %48
  %57 = phi i64 [ 0, %48 ], [ 1, %50 ], [ 2, %62 ], [ 3, %65 ], [ 4, %68 ], [ 5, %71 ], [ 6, %74 ], [ 7, %77 ]
  %58 = shl i64 %41, 3
  %59 = or i64 %57, %58
  br label %80

60:                                               ; preds = %53
  %61 = shl nuw nsw i64 %39, 3
  br label %80

62:                                               ; preds = %50
  %63 = and i8 %46, 32
  %64 = icmp eq i8 %63, 0
  br i1 %64, label %65, label %56

65:                                               ; preds = %62
  %66 = and i8 %46, 16
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %68, label %56

68:                                               ; preds = %65
  %69 = and i8 %46, 8
  %70 = icmp eq i8 %69, 0
  br i1 %70, label %71, label %56

71:                                               ; preds = %68
  %72 = and i8 %46, 4
  %73 = icmp eq i8 %72, 0
  br i1 %73, label %74, label %56

74:                                               ; preds = %71
  %75 = and i8 %46, 2
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %77, label %56

77:                                               ; preds = %74
  %78 = and i8 %46, 1
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %53, label %56

80:                                               ; preds = %29, %56, %60
  %81 = phi i64 [ %59, %56 ], [ %61, %60 ], [ 0, %29 ]
  call void @llvm.lifetime.end.p0i8(i64 17, i8* nonnull %32) #12
  %82 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 2, i32 0, i32 0
  %83 = load i8*, i8** %82, align 8
  %84 = icmp eq i8* %83, null
  br i1 %84, label %96, label %85

85:                                               ; preds = %80
  %86 = ptrtoint i8* %83 to i64
  store i64 %86, i64* %17, align 8
  %87 = getelementptr inbounds %"class.base::StackVector", %"class.base::StackVector"* %2, i64 0, i32 0, i32 2, i32 0, i32 2, i32 1, i32 0, i32 0
  %88 = load %"struct.base::StackAllocator<unsigned char, 16>::Source"*, %"struct.base::StackAllocator<unsigned char, 16>::Source"** %87, align 8
  %89 = icmp ne %"struct.base::StackAllocator<unsigned char, 16>::Source"* %88, null
  %90 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 16>::Source", %"struct.base::StackAllocator<unsigned char, 16>::Source"* %88, i64 0, i32 0, i64 0
  %91 = icmp eq i8* %90, %83
  %92 = and i1 %89, %91
  br i1 %92, label %93, label %95

93:                                               ; preds = %85
  %94 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 16>::Source", %"struct.base::StackAllocator<unsigned char, 16>::Source"* %88, i64 0, i32 1
  store i8 0, i8* %94, align 1
  br label %96

95:                                               ; preds = %85
  call void @_ZdlPv(i8* nonnull %83) #13
  br label %96

96:                                               ; preds = %80, %93, %95
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %5) #12
  ret i64 %81
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #4

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #4

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #4

declare zeroext i1 @_ZN3url19IPv6AddressToNumberEPKcRKNS_9ComponentEPh(i8*, %"struct.url::Component"* dereferenceable(8), i8*) local_unnamed_addr #4

declare i32 @_ZN3url19IPv4AddressToNumberEPKcRKNS_9ComponentEPhPi(i8*, %"struct.url::Component"* dereferenceable(8), i8*, i32*) local_unnamed_addr #4

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #8

declare void @_ZN4base6StrCatENS_4spanIKNS_16BasicStringPieceIcNSt3__111char_traitsIcEEEELm18446744073709551615EEE(%"class.std::__1::basic_string"* sret, i64, %"class.base::BasicStringPiece"*) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: nounwind ssp uwtable
declare dereferenceable(1) i8* @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE2atEm(%"class.base::BasicStringPiece"*, i64) local_unnamed_addr #1 align 2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhN4base14StackAllocatorIhLm16EEEE8__appendEmRKh(%"class.std::__1::vector.6"*, i64, i8* dereferenceable(1)) local_unnamed_addr #1 comdat align 2 {
  %4 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %5 = bitcast i8** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 1
  %8 = bitcast i8** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = sub i64 %6, %9
  %11 = icmp ult i64 %10, %1
  br i1 %11, label %84, label %12

12:                                               ; preds = %3
  %13 = inttoptr i64 %9 to i8*
  %14 = getelementptr inbounds i8, i8* %13, i64 %1
  %15 = icmp eq i64 %1, 0
  br i1 %15, label %82, label %16

16:                                               ; preds = %12
  %17 = icmp ult i64 %1, 32
  br i1 %17, label %18, label %20

18:                                               ; preds = %73, %20, %16
  %19 = phi i8* [ %13, %20 ], [ %13, %16 ], [ %27, %73 ]
  br label %77

20:                                               ; preds = %16
  %21 = getelementptr i8, i8* %2, i64 1
  %22 = icmp ugt i8* %21, %13
  %23 = icmp ugt i8* %14, %2
  %24 = and i1 %22, %23
  br i1 %24, label %18, label %25

25:                                               ; preds = %20
  %26 = and i64 %1, -32
  %27 = getelementptr i8, i8* %13, i64 %26
  %28 = add i64 %26, -32
  %29 = lshr exact i64 %28, 5
  %30 = add nuw nsw i64 %29, 1
  %31 = and i64 %30, 1
  %32 = icmp eq i64 %28, 0
  br i1 %32, label %60, label %33

33:                                               ; preds = %25
  %34 = sub nuw nsw i64 %30, %31
  %35 = load i8, i8* %2, align 1, !alias.scope !58
  %36 = insertelement <16 x i8> undef, i8 %35, i32 0
  %37 = shufflevector <16 x i8> %36, <16 x i8> undef, <16 x i32> zeroinitializer
  %38 = insertelement <16 x i8> undef, i8 %35, i32 0
  %39 = shufflevector <16 x i8> %38, <16 x i8> undef, <16 x i32> zeroinitializer
  %40 = load i8, i8* %2, align 1, !alias.scope !58
  %41 = insertelement <16 x i8> undef, i8 %40, i32 0
  %42 = shufflevector <16 x i8> %41, <16 x i8> undef, <16 x i32> zeroinitializer
  %43 = insertelement <16 x i8> undef, i8 %40, i32 0
  %44 = shufflevector <16 x i8> %43, <16 x i8> undef, <16 x i32> zeroinitializer
  br label %45

45:                                               ; preds = %45, %33
  %46 = phi i64 [ 0, %33 ], [ %57, %45 ]
  %47 = phi i64 [ %34, %33 ], [ %58, %45 ]
  %48 = getelementptr i8, i8* %13, i64 %46
  %49 = bitcast i8* %48 to <16 x i8>*
  store <16 x i8> %37, <16 x i8>* %49, align 1, !alias.scope !61, !noalias !58
  %50 = getelementptr i8, i8* %48, i64 16
  %51 = bitcast i8* %50 to <16 x i8>*
  store <16 x i8> %39, <16 x i8>* %51, align 1, !alias.scope !61, !noalias !58
  %52 = or i64 %46, 32
  %53 = getelementptr i8, i8* %13, i64 %52
  %54 = bitcast i8* %53 to <16 x i8>*
  store <16 x i8> %42, <16 x i8>* %54, align 1, !alias.scope !61, !noalias !58
  %55 = getelementptr i8, i8* %53, i64 16
  %56 = bitcast i8* %55 to <16 x i8>*
  store <16 x i8> %44, <16 x i8>* %56, align 1, !alias.scope !61, !noalias !58
  %57 = add i64 %46, 64
  %58 = add i64 %47, -2
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %45, !llvm.loop !63

60:                                               ; preds = %45, %25
  %61 = phi i64 [ 0, %25 ], [ %57, %45 ]
  %62 = icmp eq i64 %31, 0
  br i1 %62, label %73, label %63

63:                                               ; preds = %60
  %64 = getelementptr i8, i8* %13, i64 %61
  %65 = load i8, i8* %2, align 1, !alias.scope !58
  %66 = insertelement <16 x i8> undef, i8 %65, i32 0
  %67 = shufflevector <16 x i8> %66, <16 x i8> undef, <16 x i32> zeroinitializer
  %68 = insertelement <16 x i8> undef, i8 %65, i32 0
  %69 = shufflevector <16 x i8> %68, <16 x i8> undef, <16 x i32> zeroinitializer
  %70 = bitcast i8* %64 to <16 x i8>*
  store <16 x i8> %67, <16 x i8>* %70, align 1, !alias.scope !61, !noalias !58
  %71 = getelementptr i8, i8* %64, i64 16
  %72 = bitcast i8* %71 to <16 x i8>*
  store <16 x i8> %69, <16 x i8>* %72, align 1, !alias.scope !61, !noalias !58
  br label %73

73:                                               ; preds = %60, %63
  %74 = icmp eq i64 %26, %1
  br i1 %74, label %75, label %18

75:                                               ; preds = %77, %73
  %76 = ptrtoint i8* %14 to i64
  br label %82

77:                                               ; preds = %18, %77
  %78 = phi i8* [ %80, %77 ], [ %19, %18 ]
  %79 = load i8, i8* %2, align 1
  store i8 %79, i8* %78, align 1
  %80 = getelementptr inbounds i8, i8* %78, i64 1
  %81 = icmp eq i8* %80, %14
  br i1 %81, label %75, label %77, !llvm.loop !64

82:                                               ; preds = %12, %75
  %83 = phi i64 [ %76, %75 ], [ %9, %12 ]
  store i64 %83, i64* %8, align 8
  br label %323

84:                                               ; preds = %3
  %85 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 2, i32 1, i32 0
  %86 = bitcast %"class.std::__1::vector.6"* %0 to i64*
  %87 = load i64, i64* %86, align 8
  %88 = sub i64 %9, %87
  %89 = add i64 %88, %1
  %90 = icmp slt i64 %89, 0
  br i1 %90, label %91, label %93

91:                                               ; preds = %84
  %92 = bitcast %"class.std::__1::vector.6"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %92) #14
  unreachable

93:                                               ; preds = %84
  %94 = sub i64 %6, %87
  %95 = icmp ult i64 %94, 4611686018427387903
  br i1 %95, label %96, label %101

96:                                               ; preds = %93
  %97 = shl i64 %94, 1
  %98 = icmp ult i64 %97, %89
  %99 = select i1 %98, i64 %89, i64 %97
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %117, label %101

101:                                              ; preds = %93, %96
  %102 = phi i64 [ %99, %96 ], [ 9223372036854775807, %93 ]
  %103 = getelementptr inbounds %"class.base::StackAllocator", %"class.base::StackAllocator"* %85, i64 0, i32 0
  %104 = load %"struct.base::StackAllocator<unsigned char, 16>::Source"*, %"struct.base::StackAllocator<unsigned char, 16>::Source"** %103, align 8
  %105 = icmp eq %"struct.base::StackAllocator<unsigned char, 16>::Source"* %104, null
  br i1 %105, label %115, label %106

106:                                              ; preds = %101
  %107 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 16>::Source", %"struct.base::StackAllocator<unsigned char, 16>::Source"* %104, i64 0, i32 1
  %108 = load i8, i8* %107, align 1, !range !33
  %109 = icmp eq i8 %108, 0
  %110 = icmp ult i64 %102, 17
  %111 = and i1 %110, %109
  br i1 %111, label %112, label %115

112:                                              ; preds = %106
  store i8 1, i8* %107, align 1
  %113 = load %"struct.base::StackAllocator<unsigned char, 16>::Source"*, %"struct.base::StackAllocator<unsigned char, 16>::Source"** %103, align 8
  %114 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 16>::Source", %"struct.base::StackAllocator<unsigned char, 16>::Source"* %113, i64 0, i32 0, i64 0
  br label %117

115:                                              ; preds = %106, %101
  %116 = tail call i8* @_Znwm(i64 %102) #13
  br label %117

117:                                              ; preds = %96, %112, %115
  %118 = phi i64 [ 0, %96 ], [ %102, %112 ], [ %102, %115 ]
  %119 = phi i8* [ null, %96 ], [ %114, %112 ], [ %116, %115 ]
  %120 = getelementptr inbounds i8, i8* %119, i64 %88
  %121 = getelementptr inbounds i8, i8* %119, i64 %118
  %122 = getelementptr inbounds i8, i8* %120, i64 %1
  %123 = icmp ult i64 %1, 32
  br i1 %123, label %179, label %124

124:                                              ; preds = %117
  %125 = getelementptr i8, i8* %2, i64 1
  %126 = icmp ult i8* %120, %125
  %127 = icmp ugt i8* %122, %2
  %128 = and i1 %126, %127
  br i1 %128, label %179, label %129

129:                                              ; preds = %124
  %130 = and i64 %1, -32
  %131 = getelementptr i8, i8* %120, i64 %130
  %132 = add i64 %130, -32
  %133 = lshr exact i64 %132, 5
  %134 = add nuw nsw i64 %133, 1
  %135 = and i64 %134, 1
  %136 = icmp eq i64 %132, 0
  br i1 %136, label %164, label %137

137:                                              ; preds = %129
  %138 = sub nuw nsw i64 %134, %135
  %139 = load i8, i8* %2, align 1, !alias.scope !65
  %140 = insertelement <16 x i8> undef, i8 %139, i32 0
  %141 = shufflevector <16 x i8> %140, <16 x i8> undef, <16 x i32> zeroinitializer
  %142 = insertelement <16 x i8> undef, i8 %139, i32 0
  %143 = shufflevector <16 x i8> %142, <16 x i8> undef, <16 x i32> zeroinitializer
  %144 = load i8, i8* %2, align 1, !alias.scope !65
  %145 = insertelement <16 x i8> undef, i8 %144, i32 0
  %146 = shufflevector <16 x i8> %145, <16 x i8> undef, <16 x i32> zeroinitializer
  %147 = insertelement <16 x i8> undef, i8 %144, i32 0
  %148 = shufflevector <16 x i8> %147, <16 x i8> undef, <16 x i32> zeroinitializer
  br label %149

149:                                              ; preds = %149, %137
  %150 = phi i64 [ 0, %137 ], [ %161, %149 ]
  %151 = phi i64 [ %138, %137 ], [ %162, %149 ]
  %152 = getelementptr i8, i8* %120, i64 %150
  %153 = bitcast i8* %152 to <16 x i8>*
  store <16 x i8> %141, <16 x i8>* %153, align 1, !alias.scope !68, !noalias !65
  %154 = getelementptr i8, i8* %152, i64 16
  %155 = bitcast i8* %154 to <16 x i8>*
  store <16 x i8> %143, <16 x i8>* %155, align 1, !alias.scope !68, !noalias !65
  %156 = or i64 %150, 32
  %157 = getelementptr i8, i8* %120, i64 %156
  %158 = bitcast i8* %157 to <16 x i8>*
  store <16 x i8> %146, <16 x i8>* %158, align 1, !alias.scope !68, !noalias !65
  %159 = getelementptr i8, i8* %157, i64 16
  %160 = bitcast i8* %159 to <16 x i8>*
  store <16 x i8> %148, <16 x i8>* %160, align 1, !alias.scope !68, !noalias !65
  %161 = add i64 %150, 64
  %162 = add i64 %151, -2
  %163 = icmp eq i64 %162, 0
  br i1 %163, label %164, label %149, !llvm.loop !70

164:                                              ; preds = %149, %129
  %165 = phi i64 [ 0, %129 ], [ %161, %149 ]
  %166 = icmp eq i64 %135, 0
  br i1 %166, label %177, label %167

167:                                              ; preds = %164
  %168 = getelementptr i8, i8* %120, i64 %165
  %169 = load i8, i8* %2, align 1, !alias.scope !65
  %170 = insertelement <16 x i8> undef, i8 %169, i32 0
  %171 = shufflevector <16 x i8> %170, <16 x i8> undef, <16 x i32> zeroinitializer
  %172 = insertelement <16 x i8> undef, i8 %169, i32 0
  %173 = shufflevector <16 x i8> %172, <16 x i8> undef, <16 x i32> zeroinitializer
  %174 = bitcast i8* %168 to <16 x i8>*
  store <16 x i8> %171, <16 x i8>* %174, align 1, !alias.scope !68, !noalias !65
  %175 = getelementptr i8, i8* %168, i64 16
  %176 = bitcast i8* %175 to <16 x i8>*
  store <16 x i8> %173, <16 x i8>* %176, align 1, !alias.scope !68, !noalias !65
  br label %177

177:                                              ; preds = %164, %167
  %178 = icmp eq i64 %130, %1
  br i1 %178, label %186, label %179

179:                                              ; preds = %177, %124, %117
  %180 = phi i8* [ %120, %124 ], [ %120, %117 ], [ %131, %177 ]
  br label %181

181:                                              ; preds = %179, %181
  %182 = phi i8* [ %184, %181 ], [ %180, %179 ]
  %183 = load i8, i8* %2, align 1
  store i8 %183, i8* %182, align 1
  %184 = getelementptr inbounds i8, i8* %182, i64 1
  %185 = icmp eq i8* %122, %184
  br i1 %185, label %186, label %181, !llvm.loop !71

186:                                              ; preds = %181, %177
  %187 = ptrtoint i8* %121 to i64
  %188 = ptrtoint i8* %122 to i64
  %189 = getelementptr inbounds %"class.std::__1::vector.6", %"class.std::__1::vector.6"* %0, i64 0, i32 0, i32 0
  %190 = load i8*, i8** %189, align 8
  %191 = ptrtoint i8* %190 to i64
  %192 = load i8*, i8** %7, align 8
  %193 = ptrtoint i8* %192 to i64
  %194 = icmp eq i8* %192, %190
  br i1 %194, label %307, label %195

195:                                              ; preds = %186
  %196 = ptrtoint i8* %192 to i64
  %197 = sub i64 %196, %191
  %198 = icmp ult i64 %197, 16
  br i1 %198, label %294, label %199

199:                                              ; preds = %195
  %200 = sub i64 %9, %193
  %201 = sub i64 %200, %87
  %202 = getelementptr i8, i8* %190, i64 %201
  %203 = ptrtoint i8* %202 to i64
  %204 = getelementptr i8, i8* %119, i64 %203
  %205 = icmp ult i8* %204, %192
  %206 = icmp ult i8* %190, %120
  %207 = and i1 %205, %206
  br i1 %207, label %294, label %208

208:                                              ; preds = %199
  %209 = and i64 %197, -16
  %210 = sub i64 0, %209
  %211 = getelementptr i8, i8* %120, i64 %210
  %212 = sub i64 0, %209
  %213 = getelementptr i8, i8* %192, i64 %212
  %214 = add i64 %209, -16
  %215 = lshr exact i64 %214, 4
  %216 = add nuw nsw i64 %215, 1
  %217 = and i64 %216, 3
  %218 = icmp ult i64 %214, 48
  br i1 %218, label %271, label %219

219:                                              ; preds = %208
  %220 = sub nsw i64 %216, %217
  %221 = getelementptr i8, i8* %120, i64 -1
  %222 = getelementptr inbounds i8, i8* %221, i64 -8
  %223 = getelementptr inbounds i8, i8* %192, i64 -16
  %224 = getelementptr inbounds i8, i8* %222, i64 -7
  %225 = getelementptr i8, i8* %120, i64 -1
  %226 = getelementptr inbounds i8, i8* %225, i64 -8
  %227 = getelementptr inbounds i8, i8* %192, i64 -16
  %228 = getelementptr inbounds i8, i8* %226, i64 -7
  %229 = getelementptr i8, i8* %120, i64 -1
  %230 = getelementptr inbounds i8, i8* %229, i64 -8
  %231 = getelementptr inbounds i8, i8* %192, i64 -16
  %232 = getelementptr inbounds i8, i8* %230, i64 -7
  %233 = getelementptr i8, i8* %120, i64 -1
  %234 = getelementptr inbounds i8, i8* %233, i64 -8
  %235 = getelementptr inbounds i8, i8* %192, i64 -16
  %236 = getelementptr inbounds i8, i8* %234, i64 -7
  br label %237

237:                                              ; preds = %237, %219
  %238 = phi i64 [ 0, %219 ], [ %268, %237 ]
  %239 = phi i64 [ %220, %219 ], [ %269, %237 ]
  %240 = sub i64 0, %238
  %241 = sub i64 0, %238
  %242 = getelementptr inbounds i8, i8* %223, i64 %241
  %243 = bitcast i8* %242 to <2 x i64>*
  %244 = load <2 x i64>, <2 x i64>* %243, align 1, !alias.scope !72
  %245 = getelementptr inbounds i8, i8* %224, i64 %240
  %246 = bitcast i8* %245 to <2 x i64>*
  store <2 x i64> %244, <2 x i64>* %246, align 1, !alias.scope !75, !noalias !72
  %247 = sub nuw nsw i64 -16, %238
  %248 = sub nuw nsw i64 -16, %238
  %249 = getelementptr inbounds i8, i8* %227, i64 %248
  %250 = bitcast i8* %249 to <2 x i64>*
  %251 = load <2 x i64>, <2 x i64>* %250, align 1, !alias.scope !72
  %252 = getelementptr inbounds i8, i8* %228, i64 %247
  %253 = bitcast i8* %252 to <2 x i64>*
  store <2 x i64> %251, <2 x i64>* %253, align 1, !alias.scope !75, !noalias !72
  %254 = sub nuw nsw i64 -32, %238
  %255 = sub nuw nsw i64 -32, %238
  %256 = getelementptr inbounds i8, i8* %231, i64 %255
  %257 = bitcast i8* %256 to <2 x i64>*
  %258 = load <2 x i64>, <2 x i64>* %257, align 1, !alias.scope !72
  %259 = getelementptr inbounds i8, i8* %232, i64 %254
  %260 = bitcast i8* %259 to <2 x i64>*
  store <2 x i64> %258, <2 x i64>* %260, align 1, !alias.scope !75, !noalias !72
  %261 = sub nuw nsw i64 -48, %238
  %262 = sub nuw nsw i64 -48, %238
  %263 = getelementptr inbounds i8, i8* %235, i64 %262
  %264 = bitcast i8* %263 to <2 x i64>*
  %265 = load <2 x i64>, <2 x i64>* %264, align 1, !alias.scope !72
  %266 = getelementptr inbounds i8, i8* %236, i64 %261
  %267 = bitcast i8* %266 to <2 x i64>*
  store <2 x i64> %265, <2 x i64>* %267, align 1, !alias.scope !75, !noalias !72
  %268 = add i64 %238, 64
  %269 = add i64 %239, -4
  %270 = icmp eq i64 %269, 0
  br i1 %270, label %271, label %237, !llvm.loop !77

271:                                              ; preds = %237, %208
  %272 = phi i64 [ 0, %208 ], [ %268, %237 ]
  %273 = icmp eq i64 %217, 0
  br i1 %273, label %292, label %274

274:                                              ; preds = %271
  %275 = getelementptr i8, i8* %120, i64 -1
  %276 = getelementptr inbounds i8, i8* %275, i64 -8
  %277 = getelementptr inbounds i8, i8* %192, i64 -16
  %278 = getelementptr inbounds i8, i8* %276, i64 -7
  br label %279

279:                                              ; preds = %279, %274
  %280 = phi i64 [ %272, %274 ], [ %289, %279 ]
  %281 = phi i64 [ %217, %274 ], [ %290, %279 ]
  %282 = sub i64 0, %280
  %283 = sub i64 0, %280
  %284 = getelementptr inbounds i8, i8* %277, i64 %283
  %285 = bitcast i8* %284 to <2 x i64>*
  %286 = load <2 x i64>, <2 x i64>* %285, align 1, !alias.scope !72
  %287 = getelementptr inbounds i8, i8* %278, i64 %282
  %288 = bitcast i8* %287 to <2 x i64>*
  store <2 x i64> %286, <2 x i64>* %288, align 1, !alias.scope !75, !noalias !72
  %289 = add i64 %280, 16
  %290 = add i64 %281, -1
  %291 = icmp eq i64 %290, 0
  br i1 %291, label %292, label %279, !llvm.loop !78

292:                                              ; preds = %279, %271
  %293 = icmp eq i64 %197, %209
  br i1 %293, label %304, label %294

294:                                              ; preds = %292, %199, %195
  %295 = phi i8* [ %120, %199 ], [ %120, %195 ], [ %211, %292 ]
  %296 = phi i8* [ %192, %199 ], [ %192, %195 ], [ %213, %292 ]
  br label %297

297:                                              ; preds = %294, %297
  %298 = phi i8* [ %300, %297 ], [ %295, %294 ]
  %299 = phi i8* [ %301, %297 ], [ %296, %294 ]
  %300 = getelementptr inbounds i8, i8* %298, i64 -1
  %301 = getelementptr inbounds i8, i8* %299, i64 -1
  %302 = load i8, i8* %301, align 1
  store i8 %302, i8* %300, align 1
  %303 = icmp eq i8* %301, %190
  br i1 %303, label %304, label %297, !llvm.loop !79

304:                                              ; preds = %297, %292
  %305 = phi i8* [ %211, %292 ], [ %300, %297 ]
  %306 = load i64, i64* %86, align 8
  br label %307

307:                                              ; preds = %186, %304
  %308 = phi i8* [ %305, %304 ], [ %120, %186 ]
  %309 = phi i64 [ %306, %304 ], [ %191, %186 ]
  %310 = ptrtoint i8* %308 to i64
  store i64 %310, i64* %86, align 8
  store i64 %188, i64* %8, align 8
  store i64 %187, i64* %5, align 8
  %311 = inttoptr i64 %309 to i8*
  %312 = icmp eq i64 %309, 0
  br i1 %312, label %323, label %313

313:                                              ; preds = %307
  %314 = getelementptr inbounds %"class.base::StackAllocator", %"class.base::StackAllocator"* %85, i64 0, i32 0
  %315 = load %"struct.base::StackAllocator<unsigned char, 16>::Source"*, %"struct.base::StackAllocator<unsigned char, 16>::Source"** %314, align 8
  %316 = icmp ne %"struct.base::StackAllocator<unsigned char, 16>::Source"* %315, null
  %317 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 16>::Source", %"struct.base::StackAllocator<unsigned char, 16>::Source"* %315, i64 0, i32 0, i64 0
  %318 = icmp eq i8* %317, %311
  %319 = and i1 %316, %318
  br i1 %319, label %320, label %322

320:                                              ; preds = %313
  %321 = getelementptr inbounds %"struct.base::StackAllocator<unsigned char, 16>::Source", %"struct.base::StackAllocator<unsigned char, 16>::Source"* %315, i64 0, i32 1
  store i8 0, i8* %321, align 1
  br label %323

322:                                              ; preds = %313
  tail call void @_ZdlPv(i8* nonnull %311) #13
  br label %323

323:                                              ; preds = %322, %320, %307, %82
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZN3net27ConvertIPv4MappedIPv6ToIPv4ERKNS_9IPAddressE: argument 0"}
!4 = distinct !{!4, !"_ZN3net27ConvertIPv4MappedIPv6ToIPv4ERKNS_9IPAddressE"}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.unroll.disable"}
!7 = !{!8}
!8 = distinct !{!8, !9, !"_ZN3net9IPAddress8AllZerosEm: argument 0"}
!9 = distinct !{!9, !"_ZN3net9IPAddress8AllZerosEm"}
!10 = !{!11}
!11 = distinct !{!11, !12, !"_ZN3net9IPAddress8AllZerosEm: argument 0"}
!12 = distinct !{!12, !"_ZN3net9IPAddress8AllZerosEm"}
!13 = !{!14}
!14 = distinct !{!14, !15, !"_ZNK3net9IPAddress8ToStringEv: argument 0"}
!15 = distinct !{!15, !"_ZNK3net9IPAddress8ToStringEv"}
!16 = !{!17}
!17 = distinct !{!17, !18}
!18 = distinct !{!18, !"LVerDomain"}
!19 = !{!20}
!20 = distinct !{!20, !18}
!21 = distinct !{!21, !22}
!22 = !{!"llvm.loop.isvectorized", i32 1}
!23 = distinct !{!23, !6}
!24 = distinct !{!24, !22}
!25 = !{!26}
!26 = distinct !{!26, !27}
!27 = distinct !{!27, !"LVerDomain"}
!28 = !{!29}
!29 = distinct !{!29, !27}
!30 = distinct !{!30, !22}
!31 = distinct !{!31, !6}
!32 = distinct !{!32, !22}
!33 = !{i8 0, i8 2}
!34 = !{!35}
!35 = distinct !{!35, !36}
!36 = distinct !{!36, !"LVerDomain"}
!37 = !{!38}
!38 = distinct !{!38, !36}
!39 = distinct !{!39, !22}
!40 = distinct !{!40, !6}
!41 = distinct !{!41, !22}
!42 = !{!43}
!43 = distinct !{!43, !44}
!44 = distinct !{!44, !"LVerDomain"}
!45 = !{!46}
!46 = distinct !{!46, !44}
!47 = distinct !{!47, !22}
!48 = distinct !{!48, !6}
!49 = distinct !{!49, !22}
!50 = !{!51}
!51 = distinct !{!51, !52}
!52 = distinct !{!52, !"LVerDomain"}
!53 = !{!54}
!54 = distinct !{!54, !52}
!55 = distinct !{!55, !22}
!56 = distinct !{!56, !6}
!57 = distinct !{!57, !22}
!58 = !{!59}
!59 = distinct !{!59, !60}
!60 = distinct !{!60, !"LVerDomain"}
!61 = !{!62}
!62 = distinct !{!62, !60}
!63 = distinct !{!63, !22}
!64 = distinct !{!64, !22}
!65 = !{!66}
!66 = distinct !{!66, !67}
!67 = distinct !{!67, !"LVerDomain"}
!68 = !{!69}
!69 = distinct !{!69, !67}
!70 = distinct !{!70, !22}
!71 = distinct !{!71, !22}
!72 = !{!73}
!73 = distinct !{!73, !74}
!74 = distinct !{!74, !"LVerDomain"}
!75 = !{!76}
!76 = distinct !{!76, !74}
!77 = distinct !{!77, !22}
!78 = distinct !{!78, !6}
!79 = distinct !{!79, !22}
