; ModuleID = '../../third_party/blink/renderer/platform/graphics/compositing/chunk_to_layer_mapper.cc'
source_filename = "../../third_party/blink/renderer/platform/graphics/compositing/chunk_to_layer_mapper.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::IntRect" = type { %"class.blink::IntPoint", %"class.blink::IntSize" }
%"class.blink::IntPoint" = type { i32, i32 }
%"class.blink::IntSize" = type { i32, i32 }
%"class.blink::ChunkToLayerMapper" = type <{ %"class.blink::PropertyTreeState", %"class.gfx::Vector2dF", %"class.blink::PropertyTreeState", %"class.blink::GeometryMapper::Translation2DOrMatrix", %"class.blink::FloatClipRect", i8, i8, [2 x i8] }>
%"class.gfx::Vector2dF" = type { float, float }
%"class.blink::PropertyTreeState" = type { %"class.blink::PropertyTreeStateOrAlias" }
%"class.blink::PropertyTreeStateOrAlias" = type { %"class.blink::TransformPaintPropertyNodeOrAlias"*, %"class.blink::ClipPaintPropertyNodeOrAlias"*, %"class.blink::EffectPaintPropertyNodeOrAlias"* }
%"class.blink::TransformPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode" }
%"class.blink::PaintPropertyNode" = type { %"class.WTF::RefCounted", i8, i8, %class.scoped_refptr, i32, i32 }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }
%class.scoped_refptr = type { %"class.blink::TransformPaintPropertyNodeOrAlias"* }
%"class.blink::ClipPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode.0" }
%"class.blink::PaintPropertyNode.0" = type { %"class.WTF::RefCounted.1", i8, i8, %class.scoped_refptr.3, i32, i32 }
%"class.WTF::RefCounted.1" = type { %"class.base::RefCounted.2" }
%"class.base::RefCounted.2" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.3 = type { %"class.blink::ClipPaintPropertyNodeOrAlias"* }
%"class.blink::EffectPaintPropertyNodeOrAlias" = type { %"class.blink::PaintPropertyNode.4" }
%"class.blink::PaintPropertyNode.4" = type { %"class.WTF::RefCounted.5", i8, i8, %class.scoped_refptr.7, i32, i32 }
%"class.WTF::RefCounted.5" = type { %"class.base::RefCounted.6" }
%"class.base::RefCounted.6" = type { %"class.base::subtle::RefCountedBase" }
%class.scoped_refptr.7 = type { %"class.blink::EffectPaintPropertyNodeOrAlias"* }
%"class.blink::GeometryMapper::Translation2DOrMatrix" = type { %"class.blink::FloatSize", %"class.absl::optional" }
%"class.blink::FloatSize" = type { float, float }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.blink::TransformationMatrix" }
%"class.blink::TransformationMatrix" = type { %"struct.blink::TransformationMatrix::Matrix4" }
%"struct.blink::TransformationMatrix::Matrix4" = type { [4 x [4 x double]] }
%"class.blink::FloatClipRect" = type <{ %"class.blink::FloatRect", i8, [3 x i8] }>
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"struct.blink::PaintChunk" = type <{ i32, i32, %"class.blink::Color", float, %"struct.blink::DisplayItem::Id", %"class.blink::RefCountedPropertyTreeState", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.45", %"class.blink::IntRect", %"class.blink::IntRect", i8, i8, [6 x i8] }>
%"class.blink::Color" = type { i32 }
%"struct.blink::DisplayItem::Id" = type { %"class.blink::DisplayItemClient"*, i32, i32 }
%"class.blink::DisplayItemClient" = type <{ i32 (...)**, i8, [7 x i8] }>
%"class.blink::RefCountedPropertyTreeState" = type { %class.scoped_refptr, %class.scoped_refptr.3, %class.scoped_refptr.7 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.blink::HitTestData"* }
%"struct.blink::HitTestData" = type { %"class.WTF::Vector", %"class.WTF::Vector.8", %"class.blink::IntRect", %"class.blink::TransformPaintPropertyNode"* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"struct.blink::TouchActionRect"*, i32, i32 }
%"struct.blink::TouchActionRect" = type { %"class.blink::IntRect", i32 }
%"class.WTF::Vector.8" = type { %"class.WTF::VectorBuffer.9" }
%"class.WTF::VectorBuffer.9" = type { %"class.WTF::VectorBufferBase.10" }
%"class.WTF::VectorBufferBase.10" = type { %"class.blink::IntRect"*, i32, i32 }
%"class.blink::TransformPaintPropertyNode" = type { %"class.blink::TransformPaintPropertyNodeOrAlias", %"struct.blink::TransformPaintPropertyNode::State", %"class.std::__1::unique_ptr.24" }
%"struct.blink::TransformPaintPropertyNode::State" = type { %"class.blink::TransformPaintPropertyNode::TransformAndOrigin", %class.scoped_refptr.17, %"struct.blink::TransformPaintPropertyNode::State::Flags", i8, i32, i64, %"struct.cc::ElementId", %"class.std::__1::unique_ptr.18", %"struct.cc::ElementId" }
%"class.blink::TransformPaintPropertyNode::TransformAndOrigin" = type { %"class.blink::FloatSize", %"class.std::__1::unique_ptr.13" }
%"class.std::__1::unique_ptr.13" = type { %"class.std::__1::__compressed_pair.14" }
%"class.std::__1::__compressed_pair.14" = type { %"struct.std::__1::__compressed_pair_elem.15" }
%"struct.std::__1::__compressed_pair_elem.15" = type { %"struct.blink::TransformPaintPropertyNode::TransformAndOrigin::MatrixAndOrigin"* }
%"struct.blink::TransformPaintPropertyNode::TransformAndOrigin::MatrixAndOrigin" = type <{ %"class.blink::TransformationMatrix", %"class.blink::FloatPoint3D", [4 x i8] }>
%"class.blink::FloatPoint3D" = type { float, float, float }
%class.scoped_refptr.17 = type { %"class.blink::ScrollPaintPropertyNode"* }
%"class.blink::ScrollPaintPropertyNode" = type { %"class.blink::PaintPropertyNode.56", %"struct.blink::ScrollPaintPropertyNode::State" }
%"class.blink::PaintPropertyNode.56" = type { %"class.WTF::RefCounted.57", i8, i8, %class.scoped_refptr.17, i32, i32 }
%"class.WTF::RefCounted.57" = type { %"class.base::RefCounted.58" }
%"class.base::RefCounted.58" = type { %"class.base::subtle::RefCountedBase" }
%"struct.blink::ScrollPaintPropertyNode::State" = type { %"class.blink::IntRect", %"class.blink::IntSize", i8, i8, i8, i8, i32, %"struct.cc::ElementId", %"struct.cc::OverscrollBehavior", %"class.absl::optional.59" }
%"struct.cc::OverscrollBehavior" = type { i32, i32 }
%"class.absl::optional.59" = type { %"class.absl::optional_internal::optional_data.60" }
%"class.absl::optional_internal::optional_data.60" = type { %"class.absl::optional_internal::optional_data_base.61" }
%"class.absl::optional_internal::optional_data_base.61" = type { %"class.absl::optional_internal::optional_data_dtor_base.62" }
%"class.absl::optional_internal::optional_data_dtor_base.62" = type { i8, %union.anon.63 }
%union.anon.63 = type { %"class.cc::SnapContainerData" }
%"class.cc::SnapContainerData" = type { %"struct.cc::ScrollSnapType", %"class.gfx::RectF", %"class.gfx::ScrollOffset", %"class.gfx::ScrollOffset", %"class.std::__1::vector", %"struct.cc::TargetSnapAreaElementIds" }
%"struct.cc::ScrollSnapType" = type { i8, i32, i32 }
%"class.gfx::RectF" = type { %"class.gfx::PointF", %"class.gfx::SizeF" }
%"class.gfx::PointF" = type { float, float }
%"class.gfx::SizeF" = type { float, float }
%"class.gfx::ScrollOffset" = type { float, float }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.cc::SnapAreaData"*, %"struct.cc::SnapAreaData"*, %"class.std::__1::__compressed_pair.64" }
%"struct.cc::SnapAreaData" = type { %"struct.cc::ScrollSnapAlign", %"class.gfx::RectF", i8, %"struct.cc::ElementId" }
%"struct.cc::ScrollSnapAlign" = type { i32, i32 }
%"class.std::__1::__compressed_pair.64" = type { %"struct.std::__1::__compressed_pair_elem.65" }
%"struct.std::__1::__compressed_pair_elem.65" = type { %"struct.cc::SnapAreaData"* }
%"struct.cc::TargetSnapAreaElementIds" = type { %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"struct.blink::TransformPaintPropertyNode::State::Flags" = type { i8 }
%"class.std::__1::unique_ptr.18" = type { %"class.std::__1::__compressed_pair.19" }
%"class.std::__1::__compressed_pair.19" = type { %"struct.std::__1::__compressed_pair_elem.20" }
%"struct.std::__1::__compressed_pair_elem.20" = type { %"struct.cc::StickyPositionConstraint"* }
%"struct.cc::StickyPositionConstraint" = type { i8, float, float, float, float, %"class.gfx::RectF", %"class.gfx::RectF", %"class.gfx::RectF", %"struct.cc::ElementId", %"struct.cc::ElementId" }
%"struct.cc::ElementId" = type { i64 }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.blink::GeometryMapperTransformCache"* }
%"class.blink::GeometryMapperTransformCache" = type <{ %"class.blink::FloatSize", %"class.blink::TransformPaintPropertyNode"*, %"class.std::__1::unique_ptr.27", %"class.std::__1::unique_ptr.33", i32, [4 x i8] }>
%"class.std::__1::unique_ptr.27" = type { %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"struct.blink::GeometryMapperTransformCache::PlaneRootTransform"* }
%"struct.blink::GeometryMapperTransformCache::PlaneRootTransform" = type <{ %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix", %"class.blink::TransformPaintPropertyNode"*, i8, [7 x i8] }>
%"class.std::__1::unique_ptr.33" = type { %"class.std::__1::__compressed_pair.34" }
%"class.std::__1::__compressed_pair.34" = type { %"struct.std::__1::__compressed_pair_elem.35" }
%"struct.std::__1::__compressed_pair_elem.35" = type { %"struct.blink::GeometryMapperTransformCache::ScreenTransform"* }
%"struct.blink::GeometryMapperTransformCache::ScreenTransform" = type <{ %"class.blink::TransformationMatrix", %"class.blink::TransformationMatrix", i8, i8, [6 x i8] }>
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { %"struct.blink::LayerSelectionData"* }
%"struct.blink::LayerSelectionData" = type { %"class.absl::optional.48", %"class.absl::optional.48" }
%"class.absl::optional.48" = type { %"class.absl::optional_internal::optional_data.49" }
%"class.absl::optional_internal::optional_data.49" = type { %"class.absl::optional_internal::optional_data_base.50" }
%"class.absl::optional_internal::optional_data_base.50" = type { %"class.absl::optional_internal::optional_data_dtor_base.51" }
%"class.absl::optional_internal::optional_data_dtor_base.51" = type { i8, [3 x i8], %union.anon.52 }
%union.anon.52 = type { %"struct.blink::PaintedSelectionBound" }
%"struct.blink::PaintedSelectionBound" = type <{ i32, %"class.blink::IntPoint", %"class.blink::IntPoint", i8, [3 x i8] }>
%"class.blink::EffectPaintPropertyNode" = type { %"class.blink::EffectPaintPropertyNodeOrAlias", %"struct.blink::EffectPaintPropertyNode::State" }
%"struct.blink::EffectPaintPropertyNode::State" = type <{ %class.scoped_refptr, %class.scoped_refptr.3, %"class.blink::CompositorFilterOperations", %"class.std::__1::unique_ptr.88", float, i32, i64, %"struct.cc::ElementId", %"class.cc::DocumentTransitionSharedElementId", i8, i8, i8, [5 x i8] }>
%"class.blink::CompositorFilterOperations" = type { %"class.cc::FilterOperations", %"class.blink::FloatRect" }
%"class.cc::FilterOperations" = type { %"class.std::__1::vector.67" }
%"class.std::__1::vector.67" = type { %"class.std::__1::__vector_base.68" }
%"class.std::__1::__vector_base.68" = type { %"class.cc::FilterOperation"*, %"class.cc::FilterOperation"*, %"class.std::__1::__compressed_pair.83" }
%"class.cc::FilterOperation" = type <{ i32, float, float, %"class.gfx::Point", i32, %class.sk_sp, [20 x float], i32, [4 x i8], %"class.std::__1::vector.76", i32, [4 x i8] }>
%"class.gfx::Point" = type { i32, i32 }
%class.sk_sp = type { %"class.cc::PaintFilter"* }
%"class.cc::PaintFilter" = type { %class.SkRefCnt.base, %class.sk_sp.70, i32, %"class.absl::optional.71", i8, i32 }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.69" }
%"struct.std::__1::__atomic_base.69" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%class.sk_sp.70 = type { %class.SkImageFilter* }
%class.SkImageFilter = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%"class.absl::optional.71" = type { %"class.absl::optional_internal::optional_data.72" }
%"class.absl::optional_internal::optional_data.72" = type { %"class.absl::optional_internal::optional_data_base.73" }
%"class.absl::optional_internal::optional_data_base.73" = type { %"class.absl::optional_internal::optional_data_dtor_base.74" }
%"class.absl::optional_internal::optional_data_dtor_base.74" = type { i8, %union.anon.75 }
%union.anon.75 = type { %struct.SkRect }
%struct.SkRect = type { float, float, float, float }
%"class.std::__1::vector.76" = type { %"class.std::__1::__vector_base.77" }
%"class.std::__1::__vector_base.77" = type { %"class.gfx::Rect"*, %"class.gfx::Rect"*, %"class.std::__1::__compressed_pair.78" }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Size" = type { i32, i32 }
%"class.std::__1::__compressed_pair.78" = type { %"struct.std::__1::__compressed_pair_elem.79" }
%"struct.std::__1::__compressed_pair_elem.79" = type { %"class.gfx::Rect"* }
%"class.std::__1::__compressed_pair.83" = type { %"struct.std::__1::__compressed_pair_elem.84" }
%"struct.std::__1::__compressed_pair_elem.84" = type { %"class.cc::FilterOperation"* }
%"class.std::__1::unique_ptr.88" = type { %"class.std::__1::__compressed_pair.89" }
%"class.std::__1::__compressed_pair.89" = type { %"struct.std::__1::__compressed_pair_elem.90" }
%"struct.std::__1::__compressed_pair_elem.90" = type { %"struct.blink::EffectPaintPropertyNode::BackdropFilterInfo"* }
%"struct.blink::EffectPaintPropertyNode::BackdropFilterInfo" = type { %"class.blink::CompositorFilterOperations", %"class.gfx::RRectF", %"struct.cc::ElementId" }
%"class.gfx::RRectF" = type { %class.SkRRect }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkPoint = type { float, float }
%"class.cc::DocumentTransitionSharedElementId" = type { i32, %"class.base::internal::flat_tree" }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.94" }
%"class.std::__1::vector.94" = type { %"class.std::__1::__vector_base.95" }
%"class.std::__1::__vector_base.95" = type { i32*, i32*, %"class.std::__1::__compressed_pair.96" }
%"class.std::__1::__compressed_pair.96" = type { %"struct.std::__1::__compressed_pair_elem.97" }
%"struct.std::__1::__compressed_pair_elem.97" = type { i32* }
%"class.blink::ClipPaintPropertyNode" = type { %"class.blink::ClipPaintPropertyNodeOrAlias", %"struct.blink::ClipPaintPropertyNode::State", %"class.std::__1::unique_ptr.122" }
%"struct.blink::ClipPaintPropertyNode::State" = type { %class.scoped_refptr, %"class.absl::optional.101", %class.scoped_refptr.106, %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect" }
%"class.absl::optional.101" = type { %"class.absl::optional_internal::optional_data.102" }
%"class.absl::optional_internal::optional_data.102" = type { %"class.absl::optional_internal::optional_data_base.103" }
%"class.absl::optional_internal::optional_data_base.103" = type { %"class.absl::optional_internal::optional_data_dtor_base.104" }
%"class.absl::optional_internal::optional_data_dtor_base.104" = type { i8, [3 x i8], %union.anon.105 }
%union.anon.105 = type { %"class.blink::FloatClipRect" }
%class.scoped_refptr.106 = type { %"class.blink::RefCountedPath"* }
%"class.blink::RefCountedPath" = type { %"class.blink::Path", %"class.WTF::RefCounted.120", [4 x i8] }
%"class.blink::Path" = type { %class.SkPath }
%class.SkPath = type <{ %class.sk_sp.107, i32, %"struct.std::__1::atomic.110", %"struct.std::__1::atomic.110", i8, i8 }>
%class.sk_sp.107 = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.108, %class.SkTDArray.109, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.108 = type { i8*, i32, i32 }
%class.SkTDArray.109 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.115 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.110" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.115 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.116", [3 x i8] }
%"struct.std::__1::atomic.116" = type { %"struct.std::__1::__atomic_base.117" }
%"struct.std::__1::__atomic_base.117" = type { %"struct.std::__1::__cxx_atomic_impl.118" }
%"struct.std::__1::__cxx_atomic_impl.118" = type { %"struct.std::__1::__cxx_atomic_base_impl.119" }
%"struct.std::__1::__cxx_atomic_base_impl.119" = type { i8 }
%"struct.std::__1::atomic.110" = type { %"struct.std::__1::__atomic_base.111" }
%"struct.std::__1::__atomic_base.111" = type { %"struct.std::__1::__atomic_base.112" }
%"struct.std::__1::__atomic_base.112" = type { %"struct.std::__1::__cxx_atomic_impl.113" }
%"struct.std::__1::__cxx_atomic_impl.113" = type { %"struct.std::__1::__cxx_atomic_base_impl.114" }
%"struct.std::__1::__cxx_atomic_base_impl.114" = type { i8 }
%"class.WTF::RefCounted.120" = type { %"class.base::RefCounted.121" }
%"class.base::RefCounted.121" = type { %"class.base::subtle::RefCountedBase" }
%"class.blink::FloatRoundedRect" = type { %"class.blink::FloatRect", %"class.blink::FloatRoundedRect::Radii" }
%"class.blink::FloatRoundedRect::Radii" = type { %"class.blink::FloatSize", %"class.blink::FloatSize", %"class.blink::FloatSize", %"class.blink::FloatSize" }
%"class.std::__1::unique_ptr.122" = type { %"class.std::__1::__compressed_pair.123" }
%"class.std::__1::__compressed_pair.123" = type { %"struct.std::__1::__compressed_pair_elem.124" }
%"struct.std::__1::__compressed_pair_elem.124" = type { %"class.blink::GeometryMapperClipCache"* }
%"class.blink::GeometryMapperClipCache" = type <{ %"class.WTF::Vector.125", i32, [4 x i8] }>
%"class.WTF::Vector.125" = type { %"class.WTF::VectorBuffer.126" }
%"class.WTF::VectorBuffer.126" = type { %"class.WTF::VectorBufferBase.127" }
%"class.WTF::VectorBufferBase.127" = type { %"struct.blink::GeometryMapperClipCache::ClipCacheEntry"*, i32, i32 }
%"struct.blink::GeometryMapperClipCache::ClipCacheEntry" = type { %"struct.blink::GeometryMapperClipCache::ClipAndTransform", %"class.blink::FloatClipRect", i8, [3 x i8] }
%"struct.blink::GeometryMapperClipCache::ClipAndTransform" = type <{ %"class.blink::ClipPaintPropertyNode"*, %"class.blink::TransformPaintPropertyNode"*, i32, [4 x i8] }>

$_ZZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect = comdat any

$_ZGVZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect = comdat any

@_ZZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect = linkonce_odr hidden local_unnamed_addr global %"class.blink::IntRect" zeroinitializer, comdat, align 4
@_ZGVZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect = linkonce_odr hidden global i64 0, comdat, align 8

@_ZN5blink18ChunkToLayerMapperC1ERKNS_17PropertyTreeStateERKN3gfx9Vector2dFE = hidden unnamed_addr alias void (%"class.blink::ChunkToLayerMapper"*, %"class.blink::PropertyTreeState"*, %"class.gfx::Vector2dF"*), void (%"class.blink::ChunkToLayerMapper"*, %"class.blink::PropertyTreeState"*, %"class.gfx::Vector2dF"*)* @_ZN5blink18ChunkToLayerMapperC2ERKNS_17PropertyTreeStateERKN3gfx9Vector2dFE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink18ChunkToLayerMapperC2ERKNS_17PropertyTreeStateERKN3gfx9Vector2dFE(%"class.blink::ChunkToLayerMapper"* nocapture, %"class.blink::PropertyTreeState"* nocapture readonly dereferenceable(24), %"class.gfx::Vector2dF"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %4 = bitcast %"class.blink::ChunkToLayerMapper"* %0 to i8*
  %5 = bitcast %"class.blink::PropertyTreeState"* %1 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %4, i8* align 8 %5, i64 24, i1 false)
  %6 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 1
  %7 = bitcast %"class.gfx::Vector2dF"* %2 to i64*
  %8 = bitcast %"class.gfx::Vector2dF"* %6 to i64*
  %9 = load i64, i64* %7, align 4
  store i64 %9, i64* %8, align 8
  %10 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 2
  %11 = bitcast %"class.blink::PropertyTreeState"* %10 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 8 %4, i64 24, i1 false)
  %12 = getelementptr inbounds %"class.gfx::Vector2dF", %"class.gfx::Vector2dF"* %2, i64 0, i32 0
  %13 = load float, float* %12, align 4
  %14 = fsub float -0.000000e+00, %13
  %15 = getelementptr inbounds %"class.gfx::Vector2dF", %"class.gfx::Vector2dF"* %2, i64 0, i32 1
  %16 = load float, float* %15, align 4
  %17 = fsub float -0.000000e+00, %16
  %18 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 3, i32 0, i32 0
  store float %14, float* %18, align 8
  %19 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 3, i32 0, i32 1
  store float %17, float* %19, align 4
  %20 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %20, align 8
  %21 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0, i32 1
  %22 = bitcast %union.anon* %21 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 128, i1 false) #7
  %23 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect to i8*) acquire, align 8
  %24 = icmp eq i8 %23, 0
  br i1 %24, label %25, label %29, !prof !2

25:                                               ; preds = %3
  %26 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect) #7
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %29, label %28

28:                                               ; preds = %25
  store <4 x i32> <i32 -16777215, i32 -16777215, i32 33554431, i32 33554431>, <4 x i32>* bitcast (%"class.blink::IntRect"* @_ZZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect to <4 x i32>*), align 4
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect) #7
  br label %29

29:                                               ; preds = %3, %25, %28
  %30 = load i64, i64* bitcast (%"class.blink::IntRect"* @_ZZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect to i64*), align 4
  %31 = load i64, i64* bitcast (%"class.blink::IntSize"* getelementptr inbounds (%"class.blink::IntRect", %"class.blink::IntRect"* @_ZZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect, i64 0, i32 1) to i64*), align 4
  %32 = trunc i64 %30 to i32
  %33 = lshr i64 %30, 32
  %34 = trunc i64 %33 to i32
  %35 = sitofp i32 %32 to float
  %36 = sitofp i32 %34 to float
  %37 = trunc i64 %31 to i32
  %38 = sitofp i32 %37 to float
  %39 = lshr i64 %31, 32
  %40 = trunc i64 %39 to i32
  %41 = sitofp i32 %40 to float
  %42 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store float %35, float* %42, align 4
  %43 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  store float %36, float* %43, align 4
  %44 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 4, i32 0, i32 1, i32 0
  store float %38, float* %44, align 4
  %45 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 4, i32 0, i32 1, i32 1
  store float %41, float* %45, align 4
  %46 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 4, i32 1
  %47 = load i8, i8* %46, align 4
  %48 = and i8 %47, -8
  %49 = or i8 %48, 6
  store i8 %49, i8* %46, align 4
  %50 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 5
  store i8 0, i8* %50, align 4
  %51 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 6
  store i8 0, i8* %51, align 1
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink18ChunkToLayerMapper13SwitchToChunkERKNS_10PaintChunkE(%"class.blink::ChunkToLayerMapper"*, %"struct.blink::PaintChunk"* nocapture readonly dereferenceable(112)) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.blink::PropertyTreeState", align 8
  %4 = alloca %"class.blink::PropertyTreeStateOrAlias", align 16
  %5 = alloca %"class.blink::GeometryMapper::Translation2DOrMatrix", align 8
  %6 = alloca %"class.blink::FloatClipRect", align 4
  %7 = getelementptr inbounds %"struct.blink::PaintChunk", %"struct.blink::PaintChunk"* %1, i64 0, i32 10
  %8 = load i8, i8* %7, align 8
  %9 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 5
  store i8 %8, i8* %9, align 4
  %10 = bitcast %"class.blink::PropertyTreeState"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %10) #7
  %11 = bitcast %"class.blink::PropertyTreeStateOrAlias"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %11) #7
  %12 = getelementptr inbounds %"struct.blink::PaintChunk", %"struct.blink::PaintChunk"* %1, i64 0, i32 5
  %13 = bitcast %"class.blink::RefCountedPropertyTreeState"* %12 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 8, !noalias !3
  %15 = getelementptr inbounds %"struct.blink::PaintChunk", %"struct.blink::PaintChunk"* %1, i64 0, i32 5, i32 2, i32 0
  %16 = bitcast %"class.blink::EffectPaintPropertyNodeOrAlias"** %15 to i64*
  %17 = load i64, i64* %16, align 8, !noalias !3
  %18 = bitcast %"class.blink::PropertyTreeStateOrAlias"* %4 to <2 x i64>*
  store <2 x i64> %14, <2 x i64>* %18, align 16, !alias.scope !3
  %19 = getelementptr inbounds %"class.blink::PropertyTreeStateOrAlias", %"class.blink::PropertyTreeStateOrAlias"* %4, i64 0, i32 2
  %20 = bitcast %"class.blink::EffectPaintPropertyNodeOrAlias"** %19 to i64*
  store i64 %17, i64* %20, align 16, !alias.scope !3
  call void @_ZNK5blink24PropertyTreeStateOrAlias7UnaliasEv(%"class.blink::PropertyTreeState"* nonnull sret %3, %"class.blink::PropertyTreeStateOrAlias"* nonnull %4) #7
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %11) #7
  %21 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 2
  %22 = getelementptr inbounds %"class.blink::PropertyTreeState", %"class.blink::PropertyTreeState"* %3, i64 0, i32 0, i32 0
  %23 = load %"class.blink::TransformPaintPropertyNodeOrAlias"*, %"class.blink::TransformPaintPropertyNodeOrAlias"** %22, align 8
  %24 = getelementptr inbounds %"class.blink::PropertyTreeState", %"class.blink::PropertyTreeState"* %21, i64 0, i32 0, i32 0
  %25 = load %"class.blink::TransformPaintPropertyNodeOrAlias"*, %"class.blink::TransformPaintPropertyNodeOrAlias"** %24, align 8
  %26 = icmp eq %"class.blink::TransformPaintPropertyNodeOrAlias"* %23, %25
  %27 = bitcast %"class.blink::TransformPaintPropertyNodeOrAlias"* %23 to %"class.blink::TransformPaintPropertyNode"*
  br i1 %26, label %28, label %40

28:                                               ; preds = %2
  %29 = getelementptr inbounds %"class.blink::PropertyTreeState", %"class.blink::PropertyTreeState"* %3, i64 0, i32 0, i32 1
  %30 = load %"class.blink::ClipPaintPropertyNodeOrAlias"*, %"class.blink::ClipPaintPropertyNodeOrAlias"** %29, align 8
  %31 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 2, i32 0, i32 1
  %32 = load %"class.blink::ClipPaintPropertyNodeOrAlias"*, %"class.blink::ClipPaintPropertyNodeOrAlias"** %31, align 8
  %33 = icmp eq %"class.blink::ClipPaintPropertyNodeOrAlias"* %30, %32
  br i1 %33, label %34, label %40

34:                                               ; preds = %28
  %35 = getelementptr inbounds %"class.blink::PropertyTreeState", %"class.blink::PropertyTreeState"* %3, i64 0, i32 0, i32 2
  %36 = load %"class.blink::EffectPaintPropertyNodeOrAlias"*, %"class.blink::EffectPaintPropertyNodeOrAlias"** %35, align 8
  %37 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 2, i32 0, i32 2
  %38 = load %"class.blink::EffectPaintPropertyNodeOrAlias"*, %"class.blink::EffectPaintPropertyNodeOrAlias"** %37, align 8
  %39 = icmp eq %"class.blink::EffectPaintPropertyNodeOrAlias"* %36, %38
  br i1 %39, label %222, label %40

40:                                               ; preds = %2, %28, %34
  %41 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 0
  %42 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 0, i32 0, i32 0
  %43 = load %"class.blink::TransformPaintPropertyNodeOrAlias"*, %"class.blink::TransformPaintPropertyNodeOrAlias"** %42, align 8
  %44 = icmp eq %"class.blink::TransformPaintPropertyNodeOrAlias"* %23, %43
  %45 = bitcast %"class.blink::TransformPaintPropertyNodeOrAlias"* %43 to %"class.blink::TransformPaintPropertyNode"*
  br i1 %44, label %46, label %100

46:                                               ; preds = %40
  %47 = getelementptr inbounds %"class.blink::PropertyTreeState", %"class.blink::PropertyTreeState"* %3, i64 0, i32 0, i32 1
  %48 = load %"class.blink::ClipPaintPropertyNodeOrAlias"*, %"class.blink::ClipPaintPropertyNodeOrAlias"** %47, align 8
  %49 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 0, i32 0, i32 1
  %50 = load %"class.blink::ClipPaintPropertyNodeOrAlias"*, %"class.blink::ClipPaintPropertyNodeOrAlias"** %49, align 8
  %51 = icmp eq %"class.blink::ClipPaintPropertyNodeOrAlias"* %48, %50
  br i1 %51, label %52, label %100

52:                                               ; preds = %46
  %53 = getelementptr inbounds %"class.blink::PropertyTreeState", %"class.blink::PropertyTreeState"* %3, i64 0, i32 0, i32 2
  %54 = load %"class.blink::EffectPaintPropertyNodeOrAlias"*, %"class.blink::EffectPaintPropertyNodeOrAlias"** %53, align 8
  %55 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 0, i32 0, i32 2
  %56 = load %"class.blink::EffectPaintPropertyNodeOrAlias"*, %"class.blink::EffectPaintPropertyNodeOrAlias"** %55, align 8
  %57 = icmp eq %"class.blink::EffectPaintPropertyNodeOrAlias"* %54, %56
  br i1 %57, label %58, label %100

58:                                               ; preds = %52
  %59 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 6
  store i8 0, i8* %59, align 1
  %60 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 1, i32 0
  %61 = load float, float* %60, align 4
  %62 = fsub float -0.000000e+00, %61
  %63 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 1, i32 1
  %64 = load float, float* %63, align 4
  %65 = fsub float -0.000000e+00, %64
  %66 = bitcast float %62 to i32
  %67 = bitcast float %65 to i32
  %68 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 3
  %69 = bitcast %"class.blink::GeometryMapper::Translation2DOrMatrix"* %68 to i64*
  %70 = zext i32 %67 to i64
  %71 = shl nuw i64 %70, 32
  %72 = zext i32 %66 to i64
  %73 = or i64 %71, %72
  store i64 %73, i64* %69, align 8
  %74 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %74, align 8
  %75 = load atomic i8, i8* bitcast (i64* @_ZGVZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect to i8*) acquire, align 8
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %77, label %81, !prof !2

77:                                               ; preds = %58
  %78 = call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect) #7
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %81, label %80

80:                                               ; preds = %77
  store <4 x i32> <i32 -16777215, i32 -16777215, i32 33554431, i32 33554431>, <4 x i32>* bitcast (%"class.blink::IntRect"* @_ZZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect to <4 x i32>*), align 4
  call void @__cxa_guard_release(i64* nonnull @_ZGVZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect) #7
  br label %81

81:                                               ; preds = %58, %77, %80
  %82 = load i64, i64* bitcast (%"class.blink::IntRect"* @_ZZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect to i64*), align 4
  %83 = load i64, i64* bitcast (%"class.blink::IntSize"* getelementptr inbounds (%"class.blink::IntRect", %"class.blink::IntRect"* @_ZZN5blink10LayoutRect15InfiniteIntRectEvE17infinite_int_rect, i64 0, i32 1) to i64*), align 4
  %84 = trunc i64 %82 to i32
  %85 = lshr i64 %82, 32
  %86 = trunc i64 %85 to i32
  %87 = sitofp i32 %84 to float
  %88 = sitofp i32 %86 to float
  %89 = trunc i64 %83 to i32
  %90 = sitofp i32 %89 to float
  %91 = lshr i64 %83, 32
  %92 = trunc i64 %91 to i32
  %93 = sitofp i32 %92 to float
  %94 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 4, i32 0, i32 0, i32 0
  store float %87, float* %94, align 8
  %95 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  store float %88, float* %95, align 4
  %96 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 4, i32 0, i32 1, i32 0
  store float %90, float* %96, align 8
  %97 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 4, i32 0, i32 1, i32 1
  store float %93, float* %97, align 4
  %98 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 4, i32 1
  store i8 6, i8* %98, align 8
  %99 = bitcast %"class.blink::PropertyTreeState"* %21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %99, i8* nonnull align 8 %10, i64 24, i1 false)
  br label %222

100:                                              ; preds = %40, %46, %52
  %101 = icmp eq %"class.blink::TransformPaintPropertyNodeOrAlias"* %23, %25
  br i1 %101, label %146, label %102

102:                                              ; preds = %100
  %103 = bitcast %"class.blink::GeometryMapper::Translation2DOrMatrix"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 144, i8* nonnull %103) #7
  call void @_ZN5blink14GeometryMapper29SourceToDestinationProjectionERKNS_26TransformPaintPropertyNodeES3_(%"class.blink::GeometryMapper::Translation2DOrMatrix"* nonnull sret %5, %"class.blink::TransformPaintPropertyNode"* dereferenceable(96) %27, %"class.blink::TransformPaintPropertyNode"* dereferenceable(96) %45) #7
  %104 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 3
  %105 = bitcast %"class.blink::GeometryMapper::Translation2DOrMatrix"* %5 to i64*
  %106 = bitcast %"class.blink::GeometryMapper::Translation2DOrMatrix"* %104 to i64*
  %107 = load i64, i64* %105, align 8
  store i64 %107, i64* %106, align 8
  %108 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 3, i32 1
  %109 = getelementptr inbounds %"class.blink::GeometryMapper::Translation2DOrMatrix", %"class.blink::GeometryMapper::Translation2DOrMatrix"* %5, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %110 = load i8, i8* %109, align 8, !range !6
  %111 = icmp eq i8 %110, 0
  %112 = trunc i64 %107 to i32
  %113 = bitcast i32 %112 to float
  %114 = lshr i64 %107, 32
  %115 = trunc i64 %114 to i32
  %116 = bitcast i32 %115 to float
  br i1 %111, label %126, label %117

117:                                              ; preds = %102
  %118 = getelementptr inbounds %"class.blink::GeometryMapper::Translation2DOrMatrix", %"class.blink::GeometryMapper::Translation2DOrMatrix"* %5, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %119 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %108, i64 0, i32 0, i32 0, i32 0, i32 0
  %120 = load i8, i8* %119, align 8, !range !6
  %121 = icmp eq i8 %120, 0
  %122 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %123 = bitcast %"class.blink::TransformationMatrix"* %122 to i8*
  %124 = bitcast %"class.blink::TransformationMatrix"* %118 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %123, i8* align 8 %124, i64 128, i1 false) #7
  br i1 %121, label %125, label %128

125:                                              ; preds = %117
  store i8 1, i8* %119, align 8
  br label %128

126:                                              ; preds = %102
  %127 = getelementptr inbounds %"class.absl::optional", %"class.absl::optional"* %108, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %127, align 8
  br label %128

128:                                              ; preds = %117, %125, %126
  %129 = phi i1 [ false, %117 ], [ false, %125 ], [ true, %126 ]
  call void @llvm.lifetime.end.p0i8(i64 144, i8* nonnull %103) #7
  %130 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 1, i32 0
  %131 = load float, float* %130, align 4
  %132 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 1, i32 1
  %133 = load float, float* %132, align 4
  br i1 %129, label %134, label %139, !prof !7

134:                                              ; preds = %128
  %135 = getelementptr inbounds %"class.blink::GeometryMapper::Translation2DOrMatrix", %"class.blink::GeometryMapper::Translation2DOrMatrix"* %104, i64 0, i32 0, i32 0
  %136 = fsub float %113, %131
  store float %136, float* %135, align 4
  %137 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 3, i32 0, i32 1
  %138 = fsub float %116, %133
  store float %138, float* %137, align 4
  br label %146

139:                                              ; preds = %128
  %140 = fsub float -0.000000e+00, %133
  %141 = fsub float -0.000000e+00, %131
  %142 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %143 = fpext float %141 to double
  %144 = fpext float %140 to double
  %145 = call dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix13PostTranslateEdd(%"class.blink::TransformationMatrix"* %142, double %143, double %144) #7
  br label %146

146:                                              ; preds = %139, %134, %100
  %147 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 6
  %148 = load i8, i8* %147, align 1, !range !6
  %149 = getelementptr inbounds %"class.blink::PropertyTreeState", %"class.blink::PropertyTreeState"* %3, i64 0, i32 0, i32 2
  %150 = bitcast %"class.blink::EffectPaintPropertyNodeOrAlias"** %149 to %"class.blink::EffectPaintPropertyNode"**
  %151 = load %"class.blink::EffectPaintPropertyNode"*, %"class.blink::EffectPaintPropertyNode"** %150, align 8
  %152 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 2, i32 0, i32 2
  %153 = bitcast %"class.blink::EffectPaintPropertyNodeOrAlias"** %152 to %"class.blink::EffectPaintPropertyNode"**
  %154 = load %"class.blink::EffectPaintPropertyNode"*, %"class.blink::EffectPaintPropertyNode"** %153, align 8
  %155 = icmp eq %"class.blink::EffectPaintPropertyNode"* %151, %154
  br i1 %155, label %190, label %156

156:                                              ; preds = %146
  %157 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 0, i32 0, i32 2
  %158 = bitcast %"class.blink::EffectPaintPropertyNodeOrAlias"** %157 to %"class.blink::EffectPaintPropertyNode"**
  %159 = icmp eq %"class.blink::EffectPaintPropertyNode"* %151, null
  br i1 %159, label %186, label %160

160:                                              ; preds = %156, %180
  %161 = phi %"class.blink::EffectPaintPropertyNode"* [ %181, %180 ], [ %151, %156 ]
  %162 = load %"class.blink::EffectPaintPropertyNode"*, %"class.blink::EffectPaintPropertyNode"** %158, align 8
  %163 = icmp eq %"class.blink::EffectPaintPropertyNode"* %161, %162
  br i1 %163, label %183, label %164

164:                                              ; preds = %160
  %165 = getelementptr inbounds %"class.blink::EffectPaintPropertyNode", %"class.blink::EffectPaintPropertyNode"* %161, i64 0, i32 1, i32 2
  %166 = call zeroext i1 @_ZNK5blink26CompositorFilterOperations24HasFilterThatMovesPixelsEv(%"class.blink::CompositorFilterOperations"* %165) #7
  br i1 %166, label %183, label %167

167:                                              ; preds = %164
  %168 = getelementptr inbounds %"class.blink::EffectPaintPropertyNode", %"class.blink::EffectPaintPropertyNode"* %161, i64 0, i32 0, i32 0, i32 3, i32 0
  %169 = load %"class.blink::EffectPaintPropertyNodeOrAlias"*, %"class.blink::EffectPaintPropertyNodeOrAlias"** %168, align 8
  %170 = icmp eq %"class.blink::EffectPaintPropertyNodeOrAlias"* %169, null
  br i1 %170, label %183, label %171

171:                                              ; preds = %167, %176
  %172 = phi %"class.blink::EffectPaintPropertyNodeOrAlias"* [ %174, %176 ], [ %169, %167 ]
  %173 = getelementptr inbounds %"class.blink::EffectPaintPropertyNodeOrAlias", %"class.blink::EffectPaintPropertyNodeOrAlias"* %172, i64 0, i32 0, i32 3, i32 0
  %174 = load %"class.blink::EffectPaintPropertyNodeOrAlias"*, %"class.blink::EffectPaintPropertyNodeOrAlias"** %173, align 8
  %175 = icmp eq %"class.blink::EffectPaintPropertyNodeOrAlias"* %174, null
  br i1 %175, label %180, label %176

176:                                              ; preds = %171
  %177 = getelementptr inbounds %"class.blink::EffectPaintPropertyNodeOrAlias", %"class.blink::EffectPaintPropertyNodeOrAlias"* %172, i64 0, i32 0, i32 1
  %178 = load i8, i8* %177, align 4, !range !6
  %179 = icmp eq i8 %178, 0
  br i1 %179, label %180, label %171

180:                                              ; preds = %171, %176
  %181 = bitcast %"class.blink::EffectPaintPropertyNodeOrAlias"* %172 to %"class.blink::EffectPaintPropertyNode"*
  %182 = icmp eq %"class.blink::EffectPaintPropertyNodeOrAlias"* %172, null
  br i1 %182, label %183, label %160

183:                                              ; preds = %167, %160, %180, %164
  %184 = phi i8 [ 0, %160 ], [ 0, %180 ], [ 1, %164 ], [ 0, %167 ]
  %185 = load i8, i8* %147, align 1, !range !6
  br label %186

186:                                              ; preds = %183, %156
  %187 = phi i8 [ %148, %156 ], [ %185, %183 ]
  %188 = phi i8 [ 0, %156 ], [ %184, %183 ]
  %189 = icmp eq i8 %188, %187
  br i1 %189, label %190, label %199

190:                                              ; preds = %146, %186
  %191 = phi i8 [ %188, %186 ], [ %148, %146 ]
  %192 = getelementptr inbounds %"class.blink::PropertyTreeState", %"class.blink::PropertyTreeState"* %3, i64 0, i32 0, i32 1
  %193 = bitcast %"class.blink::ClipPaintPropertyNodeOrAlias"** %192 to %"class.blink::ClipPaintPropertyNode"**
  %194 = load %"class.blink::ClipPaintPropertyNode"*, %"class.blink::ClipPaintPropertyNode"** %193, align 8
  %195 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 2, i32 0, i32 1
  %196 = bitcast %"class.blink::ClipPaintPropertyNodeOrAlias"** %195 to %"class.blink::ClipPaintPropertyNode"**
  %197 = load %"class.blink::ClipPaintPropertyNode"*, %"class.blink::ClipPaintPropertyNode"** %196, align 8
  %198 = icmp eq %"class.blink::ClipPaintPropertyNode"* %194, %197
  br i1 %198, label %219, label %199

199:                                              ; preds = %190, %186
  %200 = phi i8 [ %191, %190 ], [ %188, %186 ]
  %201 = bitcast %"class.blink::FloatClipRect"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %201) #7
  call void @_ZN5blink14GeometryMapper23LocalToAncestorClipRectERKNS_17PropertyTreeStateES3_NS_28OverlayScrollbarClipBehaviorE(%"class.blink::FloatClipRect"* nonnull sret %6, %"class.blink::PropertyTreeState"* nonnull dereferenceable(24) %3, %"class.blink::PropertyTreeState"* dereferenceable(24) %41, i32 0) #7
  %202 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 4
  %203 = bitcast %"class.blink::FloatClipRect"* %202 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %203, i8* nonnull align 4 %201, i64 17, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %201) #7
  %204 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 4, i32 1
  %205 = load i8, i8* %204, align 4
  %206 = and i8 %205, 4
  %207 = icmp eq i8 %206, 0
  br i1 %207, label %208, label %219

208:                                              ; preds = %199
  %209 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 1, i32 0
  %210 = load float, float* %209, align 4
  %211 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 1, i32 1
  %212 = load float, float* %211, align 4
  %213 = getelementptr inbounds %"class.blink::FloatClipRect", %"class.blink::FloatClipRect"* %202, i64 0, i32 0, i32 0, i32 0
  %214 = load float, float* %213, align 4
  %215 = fsub float %214, %210
  store float %215, float* %213, align 4
  %216 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %217 = load float, float* %216, align 4
  %218 = fsub float %217, %212
  store float %218, float* %216, align 4
  br label %219

219:                                              ; preds = %190, %199, %208
  %220 = phi i8 [ %191, %190 ], [ %200, %199 ], [ %200, %208 ]
  %221 = bitcast %"class.blink::PropertyTreeState"* %21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %221, i8* nonnull align 8 %10, i64 24, i1 false)
  store i8 %220, i8* %147, align 1
  br label %222

222:                                              ; preds = %34, %219, %81
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %10) #7
  ret void
}

declare void @_ZNK5blink24PropertyTreeStateOrAlias7UnaliasEv(%"class.blink::PropertyTreeState"* sret, %"class.blink::PropertyTreeStateOrAlias"*) local_unnamed_addr #2

declare void @_ZN5blink14GeometryMapper29SourceToDestinationProjectionERKNS_26TransformPaintPropertyNodeES3_(%"class.blink::GeometryMapper::Translation2DOrMatrix"* sret, %"class.blink::TransformPaintPropertyNode"* dereferenceable(96), %"class.blink::TransformPaintPropertyNode"* dereferenceable(96)) local_unnamed_addr #2

declare void @_ZN5blink14GeometryMapper23LocalToAncestorClipRectERKNS_17PropertyTreeStateES3_NS_28OverlayScrollbarClipBehaviorE(%"class.blink::FloatClipRect"* sret, %"class.blink::PropertyTreeState"* dereferenceable(24), %"class.blink::PropertyTreeState"* dereferenceable(24), i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK5blink18ChunkToLayerMapper13MapVisualRectERKNS_7IntRectE(%"class.blink::ChunkToLayerMapper"*, %"class.blink::IntRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #3 align 2 {
  %3 = alloca %"class.blink::FloatRect", align 8
  %4 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = icmp slt i32 %5, 1
  br i1 %6, label %170, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 1, i32 1
  %9 = load i32, i32* %8, align 4
  %10 = icmp slt i32 %9, 1
  br i1 %10, label %170, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 6
  %13 = load i8, i8* %12, align 1, !range !6
  %14 = icmp eq i8 %13, 0
  br i1 %14, label %19, label %15, !prof !7

15:                                               ; preds = %11
  %16 = tail call { i64, i64 } @_ZNK5blink18ChunkToLayerMapper22MapUsingGeometryMapperERKNS_7IntRectE(%"class.blink::ChunkToLayerMapper"* %0, %"class.blink::IntRect"* dereferenceable(16) %1)
  %17 = extractvalue { i64, i64 } %16, 0
  %18 = extractvalue { i64, i64 } %16, 1
  br label %170

19:                                               ; preds = %11
  %20 = bitcast %"class.blink::FloatRect"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %20) #7
  %21 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %3, i64 0, i32 0, i32 0
  %22 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %3, i64 0, i32 0, i32 1
  %23 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %3, i64 0, i32 1, i32 0
  %24 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %3, i64 0, i32 1, i32 1
  %25 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = sitofp i32 %26 to float
  %28 = getelementptr inbounds %"class.blink::IntRect", %"class.blink::IntRect"* %1, i64 0, i32 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = sitofp i32 %29 to float
  %31 = sitofp i32 %5 to float
  %32 = sitofp i32 %9 to float
  store float %27, float* %21, align 8
  store float %30, float* %22, align 4
  store float %31, float* %23, align 8
  store float %32, float* %24, align 4
  %33 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0, i32 0
  %34 = load i8, i8* %33, align 8, !range !6
  %35 = icmp eq i8 %34, 0
  br i1 %35, label %36, label %43, !prof !7

36:                                               ; preds = %19
  %37 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 3, i32 0, i32 0
  %38 = load float, float* %37, align 4
  %39 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 3, i32 0, i32 1
  %40 = load float, float* %39, align 4
  %41 = fadd float %38, %27
  store float %41, float* %21, align 8
  %42 = fadd float %40, %30
  store float %42, float* %22, align 4
  br label %53

43:                                               ; preds = %19
  %44 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0, i32 1, i32 0
  %45 = call { <2 x float>, <2 x float> } @_ZNK5blink20TransformationMatrix7MapRectERKNS_9FloatRectE(%"class.blink::TransformationMatrix"* %44, %"class.blink::FloatRect"* nonnull dereferenceable(16) %3) #7
  %46 = extractvalue { <2 x float>, <2 x float> } %45, 0
  %47 = extractvalue { <2 x float>, <2 x float> } %45, 1
  %48 = bitcast %"class.blink::FloatRect"* %3 to <2 x float>*
  store <2 x float> %46, <2 x float>* %48, align 8
  %49 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %3, i64 0, i32 1
  %50 = bitcast %"class.blink::FloatSize"* %49 to <2 x float>*
  store <2 x float> %47, <2 x float>* %50, align 8
  %51 = extractelement <2 x float> %47, i32 0
  %52 = extractelement <2 x float> %47, i32 1
  br label %53

53:                                               ; preds = %36, %43
  %54 = phi float [ %32, %36 ], [ %52, %43 ]
  %55 = phi float [ %31, %36 ], [ %51, %43 ]
  %56 = fcmp ole float %55, 0.000000e+00
  %57 = fcmp ole float %54, 0.000000e+00
  %58 = or i1 %56, %57
  br i1 %58, label %68, label %59

59:                                               ; preds = %53
  %60 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 4, i32 1
  %61 = load i8, i8* %60, align 4
  %62 = and i8 %61, 4
  %63 = icmp eq i8 %62, 0
  br i1 %63, label %64, label %68

64:                                               ; preds = %59
  %65 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 4, i32 0
  call void @_ZN5blink9FloatRect9IntersectERKS0_(%"class.blink::FloatRect"* nonnull %3, %"class.blink::FloatRect"* dereferenceable(16) %65) #7
  %66 = load float, float* %23, align 8
  %67 = load float, float* %24, align 4
  br label %68

68:                                               ; preds = %64, %59, %53
  %69 = phi float [ %54, %53 ], [ %54, %59 ], [ %67, %64 ]
  %70 = phi float [ %55, %53 ], [ %55, %59 ], [ %66, %64 ]
  %71 = fcmp ole float %70, 0.000000e+00
  %72 = fcmp ole float %69, 0.000000e+00
  %73 = or i1 %71, %72
  br i1 %73, label %165, label %74

74:                                               ; preds = %68
  %75 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 5
  %76 = load i8, i8* %75, align 4
  switch i8 %76, label %98 [
    i8 1, label %77
    i8 2, label %86
  ]

77:                                               ; preds = %74
  %78 = load float, float* %21, align 8
  %79 = fadd float %78, -5.000000e-01
  store float %79, float* %21, align 8
  %80 = fadd float %70, 5.000000e-01
  %81 = fadd float %80, 5.000000e-01
  store float %81, float* %23, align 8
  %82 = load float, float* %22, align 4
  %83 = fadd float %82, -5.000000e-01
  store float %83, float* %22, align 4
  %84 = fadd float %69, 5.000000e-01
  %85 = fadd float %84, 5.000000e-01
  br label %95

86:                                               ; preds = %74
  %87 = load float, float* %21, align 8
  %88 = fadd float %87, -1.000000e+00
  store float %88, float* %21, align 8
  %89 = fadd float %70, 1.000000e+00
  %90 = fadd float %89, 1.000000e+00
  store float %90, float* %23, align 8
  %91 = load float, float* %22, align 4
  %92 = fadd float %91, -1.000000e+00
  store float %92, float* %22, align 4
  %93 = fadd float %69, 1.000000e+00
  %94 = fadd float %93, 1.000000e+00
  br label %95

95:                                               ; preds = %86, %77
  %96 = phi float [ %85, %77 ], [ %94, %86 ]
  %97 = phi float [ %81, %77 ], [ %90, %86 ]
  store float %96, float* %24, align 4
  br label %98

98:                                               ; preds = %95, %74
  %99 = phi float [ %69, %74 ], [ %96, %95 ]
  %100 = phi float [ %70, %74 ], [ %97, %95 ]
  %101 = bitcast %"class.blink::FloatRect"* %3 to <2 x float>*
  %102 = load <2 x float>, <2 x float>* %101, align 8
  %103 = extractelement <2 x float> %102, i32 0
  %104 = call float @llvm.floor.f32(float %103) #7
  %105 = fpext float %104 to double
  %106 = fcmp ult double %105, 0x41DFFFFFFFC00000
  br i1 %106, label %107, label %111

107:                                              ; preds = %98
  %108 = fcmp ugt float %104, 0xC1E0000000000000
  br i1 %108, label %109, label %111

109:                                              ; preds = %107
  %110 = fptosi float %104 to i32
  br label %111

111:                                              ; preds = %109, %107, %98
  %112 = phi i32 [ %110, %109 ], [ 2147483647, %98 ], [ -2147483648, %107 ]
  %113 = extractelement <2 x float> %102, i32 1
  %114 = call float @llvm.floor.f32(float %113) #7
  %115 = fpext float %114 to double
  %116 = fcmp ult double %115, 0x41DFFFFFFFC00000
  br i1 %116, label %117, label %123

117:                                              ; preds = %111
  %118 = fcmp ugt float %114, 0xC1E0000000000000
  br i1 %118, label %119, label %123

119:                                              ; preds = %117
  %120 = fptosi float %114 to i32
  %121 = zext i32 %120 to i64
  %122 = shl nuw i64 %121, 32
  br label %123

123:                                              ; preds = %119, %117, %111
  %124 = phi i64 [ %122, %119 ], [ 9223372032559808512, %111 ], [ -9223372036854775808, %117 ]
  %125 = lshr exact i64 %124, 32
  %126 = trunc i64 %125 to i32
  %127 = fadd float %103, %100
  %128 = load float, float* %22, align 4
  %129 = fadd float %128, %99
  %130 = call float @llvm.ceil.f32(float %127) #7
  %131 = fpext float %130 to double
  %132 = fcmp ult double %131, 0x41DFFFFFFFC00000
  br i1 %132, label %133, label %137

133:                                              ; preds = %123
  %134 = fcmp ugt float %130, 0xC1E0000000000000
  br i1 %134, label %135, label %137

135:                                              ; preds = %133
  %136 = fptosi float %130 to i32
  br label %137

137:                                              ; preds = %135, %133, %123
  %138 = phi i32 [ %136, %135 ], [ 2147483647, %123 ], [ -2147483648, %133 ]
  %139 = call float @llvm.ceil.f32(float %129) #7
  %140 = fpext float %139 to double
  %141 = fcmp ult double %140, 0x41DFFFFFFFC00000
  br i1 %141, label %142, label %146

142:                                              ; preds = %137
  %143 = fcmp ugt float %139, 0xC1E0000000000000
  br i1 %143, label %144, label %146

144:                                              ; preds = %142
  %145 = fptosi float %139 to i32
  br label %146

146:                                              ; preds = %137, %142, %144
  %147 = phi i32 [ %145, %144 ], [ 2147483647, %137 ], [ -2147483648, %142 ]
  %148 = icmp sgt i32 %112, -1
  %149 = select i1 %148, i32 -2147483648, i32 2147483647
  %150 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %138, i32 %112) #7
  %151 = extractvalue { i32, i1 } %150, 1
  %152 = extractvalue { i32, i1 } %150, 0
  %153 = select i1 %151, i32 %149, i32 %152, !prof !8
  %154 = icmp sgt i32 %126, -1
  %155 = select i1 %154, i32 -2147483648, i32 2147483647
  %156 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %147, i32 %126) #7
  %157 = extractvalue { i32, i1 } %156, 1
  %158 = extractvalue { i32, i1 } %156, 0
  %159 = select i1 %157, i32 %155, i32 %158, !prof !8
  %160 = zext i32 %159 to i64
  %161 = shl nuw i64 %160, 32
  %162 = zext i32 %153 to i64
  %163 = or i64 %161, %162
  %164 = zext i32 %112 to i64
  br label %165

165:                                              ; preds = %68, %146
  %166 = phi i64 [ %164, %146 ], [ 0, %68 ]
  %167 = phi i64 [ %124, %146 ], [ 0, %68 ]
  %168 = phi i64 [ %163, %146 ], [ 0, %68 ]
  %169 = or i64 %167, %166
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %20) #7
  br label %170

170:                                              ; preds = %2, %7, %165, %15
  %171 = phi i64 [ %169, %165 ], [ %17, %15 ], [ 0, %7 ], [ 0, %2 ]
  %172 = phi i64 [ %168, %165 ], [ %18, %15 ], [ 0, %7 ], [ 0, %2 ]
  %173 = insertvalue { i64, i64 } undef, i64 %171, 0
  %174 = insertvalue { i64, i64 } %173, i64 %172, 1
  ret { i64, i64 } %174
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK5blink18ChunkToLayerMapper22MapUsingGeometryMapperERKNS_7IntRectE(%"class.blink::ChunkToLayerMapper"*, %"class.blink::IntRect"* nocapture readonly dereferenceable(16)) local_unnamed_addr #3 align 2 {
  %3 = alloca %"class.blink::FloatClipRect", align 16
  %4 = bitcast %"class.blink::FloatClipRect"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 20, i8* nonnull %4) #7
  %5 = getelementptr inbounds %"class.blink::FloatClipRect", %"class.blink::FloatClipRect"* %3, i64 0, i32 0, i32 0, i32 0
  %6 = getelementptr inbounds %"class.blink::FloatClipRect", %"class.blink::FloatClipRect"* %3, i64 0, i32 0, i32 0, i32 1
  %7 = getelementptr inbounds %"class.blink::FloatClipRect", %"class.blink::FloatClipRect"* %3, i64 0, i32 0, i32 1, i32 0
  %8 = getelementptr inbounds %"class.blink::FloatClipRect", %"class.blink::FloatClipRect"* %3, i64 0, i32 0, i32 1, i32 1
  %9 = getelementptr inbounds %"class.blink::FloatClipRect", %"class.blink::FloatClipRect"* %3, i64 0, i32 1
  %10 = bitcast i8* %9 to i32*
  store i32 -1431655766, i32* %10, align 16
  %11 = bitcast %"class.blink::IntRect"* %1 to <4 x i32>*
  %12 = load <4 x i32>, <4 x i32>* %11, align 4
  %13 = sitofp <4 x i32> %12 to <4 x float>
  %14 = bitcast %"class.blink::FloatClipRect"* %3 to <4 x float>*
  store <4 x float> %13, <4 x float>* %14, align 16
  %15 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 2
  %16 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 0
  %17 = call zeroext i1 @_ZN5blink14GeometryMapper25LocalToAncestorVisualRectERKNS_17PropertyTreeStateES3_RNS_13FloatClipRectENS_28OverlayScrollbarClipBehaviorENS_23InclusiveIntersectOrNotENS_33ExpandVisualRectForAnimationOrNotE(%"class.blink::PropertyTreeState"* dereferenceable(24) %15, %"class.blink::PropertyTreeState"* dereferenceable(24) %16, %"class.blink::FloatClipRect"* nonnull dereferenceable(20) %3, i32 0, i32 0, i32 0) #7
  %18 = load float, float* %7, align 8
  %19 = fcmp ugt float %18, 0.000000e+00
  br i1 %19, label %20, label %121

20:                                               ; preds = %2
  %21 = load float, float* %8, align 4
  %22 = fcmp ugt float %21, 0.000000e+00
  br i1 %22, label %23, label %121

23:                                               ; preds = %20
  %24 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 1, i32 0
  %25 = load float, float* %24, align 4
  %26 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 1, i32 1
  %27 = load float, float* %26, align 4
  %28 = load float, float* %5, align 16
  %29 = fsub float %28, %25
  store float %29, float* %5, align 16
  %30 = load float, float* %6, align 4
  %31 = fsub float %30, %27
  store float %31, float* %6, align 4
  %32 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 5
  %33 = load i8, i8* %32, align 4
  switch i8 %33, label %52 [
    i8 1, label %34
    i8 2, label %41
  ]

34:                                               ; preds = %23
  %35 = fadd float %29, -5.000000e-01
  store float %35, float* %5, align 16
  %36 = fadd float %18, 5.000000e-01
  %37 = fadd float %36, 5.000000e-01
  store float %37, float* %7, align 8
  %38 = fadd float %31, -5.000000e-01
  store float %38, float* %6, align 4
  %39 = fadd float %21, 5.000000e-01
  %40 = fadd float %39, 5.000000e-01
  br label %48

41:                                               ; preds = %23
  %42 = fadd float %29, -1.000000e+00
  store float %42, float* %5, align 16
  %43 = fadd float %18, 1.000000e+00
  %44 = fadd float %43, 1.000000e+00
  store float %44, float* %7, align 8
  %45 = fadd float %31, -1.000000e+00
  store float %45, float* %6, align 4
  %46 = fadd float %21, 1.000000e+00
  %47 = fadd float %46, 1.000000e+00
  br label %48

48:                                               ; preds = %41, %34
  %49 = phi float [ %40, %34 ], [ %47, %41 ]
  %50 = phi float [ %38, %34 ], [ %45, %41 ]
  %51 = phi float [ %37, %34 ], [ %44, %41 ]
  store float %49, float* %8, align 4
  br label %52

52:                                               ; preds = %48, %23
  %53 = phi float [ %21, %23 ], [ %49, %48 ]
  %54 = phi float [ %31, %23 ], [ %50, %48 ]
  %55 = phi float [ %18, %23 ], [ %51, %48 ]
  %56 = bitcast %"class.blink::FloatClipRect"* %3 to <2 x float>*
  %57 = load <2 x float>, <2 x float>* %56, align 16
  %58 = extractelement <2 x float> %57, i32 0
  %59 = call float @llvm.floor.f32(float %58) #7
  %60 = fpext float %59 to double
  %61 = fcmp ult double %60, 0x41DFFFFFFFC00000
  br i1 %61, label %62, label %67

62:                                               ; preds = %52
  %63 = fcmp ugt float %59, 0xC1E0000000000000
  br i1 %63, label %64, label %67

64:                                               ; preds = %62
  %65 = fptosi float %59 to i32
  %66 = zext i32 %65 to i64
  br label %67

67:                                               ; preds = %64, %62, %52
  %68 = phi i64 [ %66, %64 ], [ 2147483647, %52 ], [ 2147483648, %62 ]
  %69 = extractelement <2 x float> %57, i32 1
  %70 = call float @llvm.floor.f32(float %69) #7
  %71 = fpext float %70 to double
  %72 = fcmp ult double %71, 0x41DFFFFFFFC00000
  br i1 %72, label %73, label %79

73:                                               ; preds = %67
  %74 = fcmp ugt float %70, 0xC1E0000000000000
  br i1 %74, label %75, label %79

75:                                               ; preds = %73
  %76 = fptosi float %70 to i32
  %77 = zext i32 %76 to i64
  %78 = shl nuw i64 %77, 32
  br label %79

79:                                               ; preds = %75, %73, %67
  %80 = phi i64 [ %78, %75 ], [ 9223372032559808512, %67 ], [ -9223372036854775808, %73 ]
  %81 = trunc i64 %68 to i32
  %82 = lshr exact i64 %80, 32
  %83 = trunc i64 %82 to i32
  %84 = fadd float %58, %55
  %85 = fadd float %54, %53
  %86 = call float @llvm.ceil.f32(float %84) #7
  %87 = fpext float %86 to double
  %88 = fcmp ult double %87, 0x41DFFFFFFFC00000
  br i1 %88, label %89, label %93

89:                                               ; preds = %79
  %90 = fcmp ugt float %86, 0xC1E0000000000000
  br i1 %90, label %91, label %93

91:                                               ; preds = %89
  %92 = fptosi float %86 to i32
  br label %93

93:                                               ; preds = %91, %89, %79
  %94 = phi i32 [ %92, %91 ], [ 2147483647, %79 ], [ -2147483648, %89 ]
  %95 = call float @llvm.ceil.f32(float %85) #7
  %96 = fpext float %95 to double
  %97 = fcmp ult double %96, 0x41DFFFFFFFC00000
  br i1 %97, label %98, label %102

98:                                               ; preds = %93
  %99 = fcmp ugt float %95, 0xC1E0000000000000
  br i1 %99, label %100, label %102

100:                                              ; preds = %98
  %101 = fptosi float %95 to i32
  br label %102

102:                                              ; preds = %93, %98, %100
  %103 = phi i32 [ %101, %100 ], [ 2147483647, %93 ], [ -2147483648, %98 ]
  %104 = icmp sgt i32 %81, -1
  %105 = select i1 %104, i32 -2147483648, i32 2147483647
  %106 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %94, i32 %81) #7
  %107 = extractvalue { i32, i1 } %106, 1
  %108 = extractvalue { i32, i1 } %106, 0
  %109 = select i1 %107, i32 %105, i32 %108, !prof !8
  %110 = icmp sgt i32 %83, -1
  %111 = select i1 %110, i32 -2147483648, i32 2147483647
  %112 = call { i32, i1 } @llvm.ssub.with.overflow.i32(i32 %103, i32 %83) #7
  %113 = extractvalue { i32, i1 } %112, 1
  %114 = extractvalue { i32, i1 } %112, 0
  %115 = select i1 %113, i32 %111, i32 %114, !prof !8
  %116 = or i64 %80, %68
  %117 = zext i32 %115 to i64
  %118 = shl nuw i64 %117, 32
  %119 = zext i32 %109 to i64
  %120 = or i64 %118, %119
  br label %121

121:                                              ; preds = %20, %2, %102
  %122 = phi i64 [ %120, %102 ], [ 0, %20 ], [ 0, %2 ]
  %123 = phi i64 [ %116, %102 ], [ 0, %20 ], [ 0, %2 ]
  call void @llvm.lifetime.end.p0i8(i64 20, i8* nonnull %4) #7
  %124 = insertvalue { i64, i64 } undef, i64 %123, 0
  %125 = insertvalue { i64, i64 } %124, i64 %122, 1
  ret { i64, i64 } %125
}

declare void @_ZN5blink9FloatRect9IntersectERKS0_(%"class.blink::FloatRect"*, %"class.blink::FloatRect"* dereferenceable(16)) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZNK5blink18ChunkToLayerMapper28InflateForRasterEffectOutsetERNS_9FloatRectE(%"class.blink::ChunkToLayerMapper"* nocapture readonly, %"class.blink::FloatRect"* nocapture dereferenceable(16)) local_unnamed_addr #4 align 2 {
  %3 = getelementptr inbounds %"class.blink::ChunkToLayerMapper", %"class.blink::ChunkToLayerMapper"* %0, i64 0, i32 5
  %4 = load i8, i8* %3, align 4
  switch i8 %4, label %26 [
    i8 1, label %6
    i8 2, label %5
  ]

5:                                                ; preds = %2
  br label %6

6:                                                ; preds = %2, %5
  %7 = phi <2 x float> [ <float -1.000000e+00, float 1.000000e+00>, %5 ], [ <float -5.000000e-01, float 5.000000e-01>, %2 ]
  %8 = shufflevector <2 x float> %7, <2 x float> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %9 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 0
  %10 = load float, float* %9, align 4
  %11 = extractelement <2 x float> %7, i32 1
  %12 = fadd float %10, %11
  %13 = bitcast %"class.blink::FloatRect"* %1 to <2 x float>*
  %14 = load <2 x float>, <2 x float>* %13, align 4
  %15 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %1, i64 0, i32 1, i32 1
  %16 = load float, float* %15, align 4
  %17 = fadd float %16, %11
  %18 = extractelement <2 x float> %14, i32 0
  %19 = insertelement <4 x float> undef, float %18, i32 0
  %20 = extractelement <2 x float> %14, i32 1
  %21 = insertelement <4 x float> %19, float %20, i32 1
  %22 = insertelement <4 x float> %21, float %12, i32 2
  %23 = insertelement <4 x float> %22, float %17, i32 3
  %24 = fadd <4 x float> %23, %8
  %25 = bitcast %"class.blink::FloatRect"* %1 to <4 x float>*
  store <4 x float> %24, <4 x float>* %25, align 4
  br label %26

26:                                               ; preds = %6, %2
  ret void
}

declare zeroext i1 @_ZN5blink14GeometryMapper25LocalToAncestorVisualRectERKNS_17PropertyTreeStateES3_RNS_13FloatClipRectENS_28OverlayScrollbarClipBehaviorENS_23InclusiveIntersectOrNotENS_33ExpandVisualRectForAnimationOrNotE(%"class.blink::PropertyTreeState"* dereferenceable(24), %"class.blink::PropertyTreeState"* dereferenceable(24), %"class.blink::FloatClipRect"* dereferenceable(20), i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #5

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #5

declare dereferenceable(128) %"class.blink::TransformationMatrix"* @_ZN5blink20TransformationMatrix13PostTranslateEdd(%"class.blink::TransformationMatrix"*, double, double) local_unnamed_addr #2

declare zeroext i1 @_ZNK5blink26CompositorFilterOperations24HasFilterThatMovesPixelsEv(%"class.blink::CompositorFilterOperations"*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare float @llvm.ceil.f32(float) #6

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.ssub.with.overflow.i32(i32, i32) #6

declare { <2 x float>, <2 x float> } @_ZNK5blink20TransformationMatrix7MapRectERKNS_9FloatRectE(%"class.blink::TransformationMatrix"*, %"class.blink::FloatRect"* dereferenceable(16)) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree nounwind }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNK5blink27RefCountedPropertyTreeState20GetPropertyTreeStateEv: argument 0"}
!5 = distinct !{!5, !"_ZNK5blink27RefCountedPropertyTreeState20GetPropertyTreeStateEv"}
!6 = !{i8 0, i8 2}
!7 = !{!"branch_weights", i32 2000, i32 1}
!8 = !{!"branch_weights", i32 1, i32 2000}
