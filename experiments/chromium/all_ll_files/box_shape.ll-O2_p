; ModuleID = '../../third_party/blink/renderer/core/layout/shapes/box_shape.cc'
source_filename = "../../third_party/blink/renderer/core/layout/shapes/box_shape.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::BoxShape" = type { %"class.blink::Shape", %"class.blink::FloatRoundedRect" }
%"class.blink::Shape" = type { i32 (...)**, i8, float }
%"class.blink::FloatRoundedRect" = type { %"class.blink::FloatRect", %"class.blink::FloatRoundedRect::Radii" }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::FloatRoundedRect::Radii" = type { %"class.blink::FloatSize", %"class.blink::FloatSize", %"class.blink::FloatSize", %"class.blink::FloatSize" }
%"struct.blink::Shape::DisplayPaths" = type { %"class.blink::Path", %"class.blink::Path" }
%"class.blink::Path" = type { %class.SkPath }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }

$_ZN5blink5ShapeD2Ev = comdat any

$_ZN5blink8BoxShapeD0Ev = comdat any

$_ZNK5blink8BoxShape7IsEmptyEv = comdat any

@_ZTVN5blink8BoxShapeE = hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.blink::Shape"*)* @_ZN5blink5ShapeD2Ev to i8*), i8* bitcast (void (%"class.blink::BoxShape"*)* @_ZN5blink8BoxShapeD0Ev to i8*), i8* bitcast ({ i64, i64 } (%"class.blink::BoxShape"*)* @_ZNK5blink8BoxShape29ShapeMarginLogicalBoundingBoxEv to i8*), i8* bitcast (i1 (%"class.blink::BoxShape"*)* @_ZNK5blink8BoxShape7IsEmptyEv to i8*), i8* bitcast ({ i64, i8 } (%"class.blink::BoxShape"*, i32, i32)* @_ZNK5blink8BoxShape19GetExcludedIntervalENS_10LayoutUnitES1_ to i8*), i8* bitcast (void (%"class.blink::BoxShape"*, %"struct.blink::Shape::DisplayPaths"*)* @_ZNK5blink8BoxShape17BuildDisplayPathsERNS_5Shape12DisplayPathsE to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i64 } @_ZNK5blink8BoxShape29ShapeMarginLogicalBoundingBoxEv(%"class.blink::BoxShape"* nocapture readonly) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::BoxShape", %"class.blink::BoxShape"* %0, i64 0, i32 1
  %3 = bitcast %"class.blink::FloatRoundedRect"* %2 to <2 x float>*
  %4 = load <2 x float>, <2 x float>* %3, align 4
  %5 = getelementptr inbounds %"class.blink::BoxShape", %"class.blink::BoxShape"* %0, i64 0, i32 1, i32 0, i32 1
  %6 = bitcast %"class.blink::FloatSize"* %5 to <2 x float>*
  %7 = load <2 x float>, <2 x float>* %6, align 4
  %8 = getelementptr inbounds %"class.blink::BoxShape", %"class.blink::BoxShape"* %0, i64 0, i32 0, i32 2
  %9 = load float, float* %8, align 4
  %10 = fcmp ogt float %9, 0.000000e+00
  br i1 %10, label %11, label %17

11:                                               ; preds = %1
  %12 = insertelement <2 x float> undef, float %9, i32 0
  %13 = shufflevector <2 x float> %12, <2 x float> undef, <2 x i32> zeroinitializer
  %14 = fsub <2 x float> %4, %13
  %15 = fadd <2 x float> %7, %13
  %16 = fadd <2 x float> %13, %15
  br label %17

17:                                               ; preds = %11, %1
  %18 = phi <2 x float> [ %16, %11 ], [ %7, %1 ]
  %19 = phi <2 x float> [ %14, %11 ], [ %4, %1 ]
  %20 = extractelement <2 x float> %19, i32 0
  %21 = fmul float %20, 6.400000e+01
  %22 = fcmp ult float %21, 0xC1E0000000000000
  %23 = fcmp ugt float %21, 0x41DFFFFFE0000000
  %24 = fcmp ogt float %21, 0xC1E0000000000000
  %25 = select i1 %24, float %21, float 0xC1E0000000000000
  %26 = fptosi float %25 to i32
  %27 = select i1 %22, i32 0, i32 2147483647
  %28 = select i1 %23, i32 %27, i32 %26
  %29 = extractelement <2 x float> %19, i32 1
  %30 = fmul float %29, 6.400000e+01
  %31 = fcmp ult float %30, 0xC1E0000000000000
  %32 = fcmp ugt float %30, 0x41DFFFFFE0000000
  %33 = fcmp ogt float %30, 0xC1E0000000000000
  %34 = select i1 %33, float %30, float 0xC1E0000000000000
  %35 = fptosi float %34 to i32
  %36 = select i1 %31, i32 0, i32 2147483647
  %37 = select i1 %32, i32 %36, i32 %35
  %38 = extractelement <2 x float> %18, i32 0
  %39 = fmul float %38, 6.400000e+01
  %40 = fcmp ult float %39, 0xC1E0000000000000
  %41 = fcmp ugt float %39, 0x41DFFFFFE0000000
  %42 = fcmp ogt float %39, 0xC1E0000000000000
  %43 = select i1 %42, float %39, float 0xC1E0000000000000
  %44 = fptosi float %43 to i32
  %45 = select i1 %40, i32 0, i32 2147483647
  %46 = select i1 %41, i32 %45, i32 %44
  %47 = extractelement <2 x float> %18, i32 1
  %48 = fmul float %47, 6.400000e+01
  %49 = fcmp ult float %48, 0xC1E0000000000000
  %50 = fcmp ugt float %48, 0x41DFFFFFE0000000
  %51 = fcmp ogt float %48, 0xC1E0000000000000
  %52 = select i1 %51, float %48, float 0xC1E0000000000000
  %53 = fptosi float %52 to i32
  %54 = select i1 %49, i32 0, i32 2147483647
  %55 = select i1 %50, i32 %54, i32 %53
  %56 = zext i32 %37 to i64
  %57 = shl nuw i64 %56, 32
  %58 = zext i32 %28 to i64
  %59 = or i64 %57, %58
  %60 = insertvalue { i64, i64 } undef, i64 %59, 0
  %61 = zext i32 %55 to i64
  %62 = shl nuw i64 %61, 32
  %63 = zext i32 %46 to i64
  %64 = or i64 %62, %63
  %65 = insertvalue { i64, i64 } %60, i64 %64, 1
  ret { i64, i64 } %65
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink8BoxShape17ShapeMarginBoundsEv(%"class.blink::FloatRoundedRect"* noalias sret, %"class.blink::BoxShape"* nocapture readonly) local_unnamed_addr #2 align 2 {
  %3 = bitcast %"class.blink::FloatRoundedRect"* %0 to i8*
  %4 = getelementptr inbounds %"class.blink::BoxShape", %"class.blink::BoxShape"* %1, i64 0, i32 1
  %5 = bitcast %"class.blink::FloatRoundedRect"* %4 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %5, i64 16, i1 false) #7
  %6 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.blink::BoxShape", %"class.blink::BoxShape"* %1, i64 0, i32 1, i32 1
  %8 = bitcast %"class.blink::FloatRoundedRect::Radii"* %7 to <2 x i64>*
  %9 = load <2 x i64>, <2 x i64>* %8, align 4
  %10 = bitcast %"class.blink::FloatRoundedRect::Radii"* %6 to <2 x i64>*
  store <2 x i64> %9, <2 x i64>* %10, align 4
  %11 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 1, i32 2
  %12 = getelementptr inbounds %"class.blink::BoxShape", %"class.blink::BoxShape"* %1, i64 0, i32 1, i32 1, i32 2
  %13 = bitcast %"class.blink::FloatSize"* %12 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 4
  %15 = bitcast %"class.blink::FloatSize"* %11 to <2 x i64>*
  store <2 x i64> %14, <2 x i64>* %15, align 4
  %16 = getelementptr inbounds %"class.blink::BoxShape", %"class.blink::BoxShape"* %1, i64 0, i32 0, i32 2
  %17 = load float, float* %16, align 4
  %18 = fcmp ogt float %17, 0.000000e+00
  br i1 %18, label %19, label %34

19:                                               ; preds = %2
  %20 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 0, i32 0
  %21 = load float, float* %20, align 4
  %22 = fsub float %21, %17
  store float %22, float* %20, align 4
  %23 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 1, i32 0
  %24 = load float, float* %23, align 4
  %25 = fadd float %17, %24
  %26 = fadd float %17, %25
  store float %26, float* %23, align 4
  %27 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 0, i32 1
  %28 = load float, float* %27, align 4
  %29 = fsub float %28, %17
  store float %29, float* %27, align 4
  %30 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %0, i64 0, i32 0, i32 1, i32 1
  %31 = load float, float* %30, align 4
  %32 = fadd float %17, %31
  %33 = fadd float %17, %32
  store float %33, float* %30, align 4
  tail call void @_ZN5blink16FloatRoundedRect5Radii6ExpandEffff(%"class.blink::FloatRoundedRect::Radii"* %6, float %17, float %17, float %17, float %17) #7
  br label %34

34:                                               ; preds = %19, %2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden { i64, i8 } @_ZNK5blink8BoxShape19GetExcludedIntervalENS_10LayoutUnitES1_(%"class.blink::BoxShape"*, i32, i32) unnamed_addr #2 align 2 {
  %4 = alloca %"class.blink::FloatRoundedRect", align 4
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = bitcast %"class.blink::FloatRoundedRect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %7) #7
  %8 = getelementptr inbounds %"class.blink::BoxShape", %"class.blink::BoxShape"* %0, i64 0, i32 1
  %9 = bitcast %"class.blink::FloatRoundedRect"* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %7, i8* align 4 %9, i64 16, i1 false) #7
  %10 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 1
  %11 = getelementptr inbounds %"class.blink::BoxShape", %"class.blink::BoxShape"* %0, i64 0, i32 1, i32 1
  %12 = bitcast %"class.blink::FloatRoundedRect::Radii"* %11 to <2 x i64>*
  %13 = load <2 x i64>, <2 x i64>* %12, align 4, !noalias !2
  %14 = bitcast %"class.blink::FloatRoundedRect::Radii"* %10 to <2 x i64>*
  store <2 x i64> %13, <2 x i64>* %14, align 4, !alias.scope !2
  %15 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 1, i32 2
  %16 = getelementptr inbounds %"class.blink::BoxShape", %"class.blink::BoxShape"* %0, i64 0, i32 1, i32 1, i32 2
  %17 = bitcast %"class.blink::FloatSize"* %16 to <2 x i64>*
  %18 = load <2 x i64>, <2 x i64>* %17, align 4, !noalias !2
  %19 = bitcast %"class.blink::FloatSize"* %15 to <2 x i64>*
  store <2 x i64> %18, <2 x i64>* %19, align 4, !alias.scope !2
  %20 = getelementptr inbounds %"class.blink::BoxShape", %"class.blink::BoxShape"* %0, i64 0, i32 0, i32 2
  %21 = load float, float* %20, align 4, !noalias !2
  %22 = fcmp ogt float %21, 0.000000e+00
  br i1 %22, label %23, label %38

23:                                               ; preds = %3
  %24 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 0, i32 0, i32 0
  %25 = load float, float* %24, align 4, !alias.scope !2
  %26 = fsub float %25, %21
  store float %26, float* %24, align 4, !alias.scope !2
  %27 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 0, i32 1, i32 0
  %28 = load float, float* %27, align 4, !alias.scope !2
  %29 = fadd float %21, %28
  %30 = fadd float %21, %29
  store float %30, float* %27, align 4, !alias.scope !2
  %31 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 0, i32 0, i32 1
  %32 = load float, float* %31, align 4, !alias.scope !2
  %33 = fsub float %32, %21
  store float %33, float* %31, align 4, !alias.scope !2
  %34 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 0, i32 1, i32 1
  %35 = load float, float* %34, align 4, !alias.scope !2
  %36 = fadd float %21, %35
  %37 = fadd float %21, %36
  store float %37, float* %34, align 4, !alias.scope !2
  call void @_ZN5blink16FloatRoundedRect5Radii6ExpandEffff(%"class.blink::FloatRoundedRect::Radii"* %10, float %21, float %21, float %21, float %21) #7
  br label %38

38:                                               ; preds = %3, %23
  %39 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 0, i32 1, i32 0
  %40 = load float, float* %39, align 4
  %41 = fcmp ugt float %40, 0.000000e+00
  br i1 %41, label %42, label %255

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 0, i32 1, i32 1
  %44 = load float, float* %43, align 4
  %45 = fcmp ugt float %44, 0.000000e+00
  br i1 %45, label %46, label %255

46:                                               ; preds = %42
  %47 = getelementptr inbounds %"class.blink::BoxShape", %"class.blink::BoxShape"* %0, i64 0, i32 0
  %48 = bitcast %"class.blink::BoxShape"* %0 to { i64, i64 } (%"class.blink::Shape"*)***
  %49 = load { i64, i64 } (%"class.blink::Shape"*)**, { i64, i64 } (%"class.blink::Shape"*)*** %48, align 8
  %50 = getelementptr inbounds { i64, i64 } (%"class.blink::Shape"*)*, { i64, i64 } (%"class.blink::Shape"*)** %49, i64 2
  %51 = load { i64, i64 } (%"class.blink::Shape"*)*, { i64, i64 } (%"class.blink::Shape"*)** %50, align 8
  %52 = call { i64, i64 } %51(%"class.blink::Shape"* %47) #7
  %53 = extractvalue { i64, i64 } %52, 0
  %54 = lshr i64 %53, 32
  %55 = trunc i64 %54 to i32
  %56 = extractvalue { i64, i64 } %52, 1
  %57 = trunc i64 %56 to i32
  %58 = icmp slt i32 %57, 1
  br i1 %58, label %255, label %59

59:                                               ; preds = %46
  %60 = lshr i64 %56, 32
  %61 = trunc i64 %60 to i32
  %62 = icmp slt i32 %61, 1
  br i1 %62, label %255, label %63

63:                                               ; preds = %59
  %64 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %55, i32 %61) #7
  %65 = extractvalue { i32, i1 } %64, 1
  %66 = extractvalue { i32, i1 } %64, 0
  %67 = select i1 %65, i32 2147483647, i32 %66, !prof !5
  %68 = icmp sgt i32 %67, %1
  br i1 %68, label %69, label %77

69:                                               ; preds = %63
  %70 = icmp slt i32 %2, 0
  %71 = select i1 %70, i32 -2147483648, i32 2147483647
  %72 = call { i32, i1 } @llvm.sadd.with.overflow.i32(i32 %1, i32 %2) #7
  %73 = extractvalue { i32, i1 } %72, 1
  %74 = extractvalue { i32, i1 } %72, 0
  %75 = select i1 %73, i32 %71, i32 %74, !prof !5
  %76 = icmp sgt i32 %75, %55
  br i1 %76, label %83, label %77

77:                                               ; preds = %63, %69
  %78 = icmp eq i32 %2, 0
  %79 = icmp eq i32 %55, %1
  %80 = and i1 %78, %79
  br i1 %80, label %81, label %255

81:                                               ; preds = %77
  %82 = add nsw i32 %1, %2
  br label %83

83:                                               ; preds = %81, %69
  %84 = phi i32 [ %82, %81 ], [ %74, %69 ]
  %85 = phi i1 [ false, %81 ], [ %73, %69 ]
  %86 = sitofp i32 %1 to float
  %87 = fmul float %86, 1.562500e-02
  %88 = icmp slt i32 %2, 0
  %89 = select i1 %88, i32 -2147483648, i32 2147483647
  %90 = select i1 %85, i32 %89, i32 %84, !prof !5
  %91 = sitofp i32 %90 to float
  %92 = fmul float %91, 1.562500e-02
  %93 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 1, i32 0, i32 0
  %94 = load float, float* %93, align 4
  %95 = fcmp ogt float %94, 0xBE80000000000000
  %96 = fcmp olt float %94, 0x3E80000000000000
  %97 = and i1 %95, %96
  %98 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 1, i32 0, i32 1
  %99 = load float, float* %98, align 4
  br i1 %97, label %100, label %161

100:                                              ; preds = %83
  %101 = fcmp ogt float %99, 0xBE80000000000000
  %102 = fcmp olt float %99, 0x3E80000000000000
  %103 = and i1 %101, %102
  br i1 %103, label %104, label %161

104:                                              ; preds = %100
  %105 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 1, i32 1, i32 0
  %106 = load float, float* %105, align 4
  %107 = fcmp ogt float %106, 0xBE80000000000000
  %108 = fcmp olt float %106, 0x3E80000000000000
  %109 = and i1 %107, %108
  br i1 %109, label %110, label %161

110:                                              ; preds = %104
  %111 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 1, i32 1, i32 1
  %112 = load float, float* %111, align 4
  %113 = fcmp ogt float %112, 0xBE80000000000000
  %114 = fcmp olt float %112, 0x3E80000000000000
  %115 = and i1 %113, %114
  br i1 %115, label %116, label %161

116:                                              ; preds = %110
  %117 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 1, i32 2, i32 0
  %118 = load float, float* %117, align 4
  %119 = fcmp ogt float %118, 0xBE80000000000000
  %120 = fcmp olt float %118, 0x3E80000000000000
  %121 = and i1 %119, %120
  br i1 %121, label %122, label %161

122:                                              ; preds = %116
  %123 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 1, i32 2, i32 1
  %124 = load float, float* %123, align 4
  %125 = fcmp ogt float %124, 0xBE80000000000000
  %126 = fcmp olt float %124, 0x3E80000000000000
  %127 = and i1 %125, %126
  br i1 %127, label %128, label %161

128:                                              ; preds = %122
  %129 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 1, i32 3, i32 0
  %130 = load float, float* %129, align 4
  %131 = fcmp ogt float %130, 0xBE80000000000000
  %132 = fcmp olt float %130, 0x3E80000000000000
  %133 = and i1 %131, %132
  br i1 %133, label %134, label %161

134:                                              ; preds = %128
  %135 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 1, i32 3, i32 1
  %136 = load float, float* %135, align 4
  %137 = fcmp ule float %136, 0xBE80000000000000
  %138 = fcmp uge float %136, 0x3E80000000000000
  %139 = or i1 %137, %138
  br i1 %139, label %161, label %140

140:                                              ; preds = %134
  %141 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 0, i32 0, i32 0
  %142 = load float, float* %141, align 4
  %143 = load float, float* %39, align 4
  %144 = fadd float %142, %143
  %145 = fmul float %142, 6.400000e+01
  %146 = fcmp ult float %145, 0xC1E0000000000000
  %147 = fcmp ugt float %145, 0x41DFFFFFE0000000
  %148 = fcmp ogt float %145, 0xC1E0000000000000
  %149 = select i1 %148, float %145, float 0xC1E0000000000000
  %150 = fptosi float %149 to i32
  %151 = select i1 %146, i32 0, i32 2147483647
  %152 = select i1 %147, i32 %151, i32 %150
  %153 = fmul float %144, 6.400000e+01
  %154 = fcmp ult float %153, 0xC1E0000000000000
  %155 = fcmp ugt float %153, 0x41DFFFFFE0000000
  %156 = fcmp ogt float %153, 0xC1E0000000000000
  %157 = select i1 %156, float %153, float 0xC1E0000000000000
  %158 = fptosi float %157 to i32
  %159 = select i1 %154, i32 0, i32 2147483647
  %160 = select i1 %155, i32 %159, i32 %158
  br label %255

161:                                              ; preds = %83, %134, %116, %122, %104, %110, %100, %128
  %162 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 0, i32 0, i32 1
  %163 = load float, float* %162, align 4
  %164 = fadd float %163, %99
  %165 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 1, i32 1, i32 1
  %166 = load float, float* %165, align 4
  %167 = fadd float %163, %166
  %168 = fcmp olt float %164, %167
  %169 = select i1 %168, float %167, float %164
  %170 = load float, float* %43, align 4
  %171 = fadd float %163, %170
  %172 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 1, i32 2, i32 1
  %173 = load float, float* %172, align 4
  %174 = fsub float %171, %173
  %175 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 1, i32 3, i32 1
  %176 = load float, float* %175, align 4
  %177 = fsub float %171, %176
  %178 = fcmp olt float %177, %174
  %179 = select i1 %178, float %177, float %174
  %180 = fcmp ugt float %169, %179
  %181 = fcmp ugt float %87, %169
  %182 = or i1 %181, %180
  %183 = fcmp ult float %92, %179
  %184 = or i1 %183, %182
  %185 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 0, i32 0, i32 0
  %186 = load float, float* %185, align 4
  %187 = load float, float* %39, align 4
  %188 = fadd float %186, %187
  br i1 %184, label %206, label %189

189:                                              ; preds = %161
  %190 = fmul float %186, 6.400000e+01
  %191 = fcmp ult float %190, 0xC1E0000000000000
  %192 = fcmp ugt float %190, 0x41DFFFFFE0000000
  %193 = fcmp ogt float %190, 0xC1E0000000000000
  %194 = select i1 %193, float %190, float 0xC1E0000000000000
  %195 = fptosi float %194 to i32
  %196 = select i1 %191, i32 0, i32 2147483647
  %197 = select i1 %192, i32 %196, i32 %195
  %198 = fmul float %188, 6.400000e+01
  %199 = fcmp ult float %198, 0xC1E0000000000000
  %200 = fcmp ugt float %198, 0x41DFFFFFE0000000
  %201 = fcmp ogt float %198, 0xC1E0000000000000
  %202 = select i1 %201, float %198, float 0xC1E0000000000000
  %203 = fptosi float %202 to i32
  %204 = select i1 %199, i32 0, i32 2147483647
  %205 = select i1 %200, i32 %204, i32 %203
  br label %255

206:                                              ; preds = %161
  %207 = bitcast float* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %207) #7
  store float 0xFFFFFFFFE0000000, float* %5, align 4
  %208 = bitcast float* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %208) #7
  store float 0xFFFFFFFFE0000000, float* %6, align 4
  %209 = fcmp ugt float %87, %164
  %210 = fcmp ult float %92, %174
  %211 = or i1 %209, %210
  %212 = select i1 %211, float %188, float %186
  %213 = fcmp ugt float %87, %167
  %214 = fcmp ult float %92, %177
  %215 = or i1 %213, %214
  %216 = select i1 %215, float %186, float %188
  %217 = call zeroext i1 @_ZNK5blink16FloatRoundedRect14XInterceptsAtYEfRfS1_(%"class.blink::FloatRoundedRect"* nonnull %4, float %87, float* nonnull dereferenceable(4) %5, float* nonnull dereferenceable(4) %6) #7
  br i1 %217, label %218, label %225

218:                                              ; preds = %206
  %219 = load float, float* %5, align 4
  %220 = fcmp olt float %219, %212
  %221 = select i1 %220, float %219, float %212
  %222 = load float, float* %6, align 4
  %223 = fcmp olt float %216, %222
  %224 = select i1 %223, float %222, float %216
  br label %225

225:                                              ; preds = %218, %206
  %226 = phi float [ %224, %218 ], [ %216, %206 ]
  %227 = phi float [ %221, %218 ], [ %212, %206 ]
  %228 = call zeroext i1 @_ZNK5blink16FloatRoundedRect14XInterceptsAtYEfRfS1_(%"class.blink::FloatRoundedRect"* nonnull %4, float %92, float* nonnull dereferenceable(4) %5, float* nonnull dereferenceable(4) %6) #7
  br i1 %228, label %229, label %236

229:                                              ; preds = %225
  %230 = load float, float* %5, align 4
  %231 = fcmp olt float %230, %227
  %232 = select i1 %231, float %230, float %227
  %233 = load float, float* %6, align 4
  %234 = fcmp olt float %226, %233
  %235 = select i1 %234, float %233, float %226
  br label %236

236:                                              ; preds = %229, %225
  %237 = phi float [ %235, %229 ], [ %226, %225 ]
  %238 = phi float [ %232, %229 ], [ %227, %225 ]
  %239 = fmul float %238, 6.400000e+01
  %240 = fcmp ult float %239, 0xC1E0000000000000
  %241 = fcmp ugt float %239, 0x41DFFFFFE0000000
  %242 = fcmp ogt float %239, 0xC1E0000000000000
  %243 = select i1 %242, float %239, float 0xC1E0000000000000
  %244 = fptosi float %243 to i32
  %245 = select i1 %240, i32 0, i32 2147483647
  %246 = select i1 %241, i32 %245, i32 %244
  %247 = fmul float %237, 6.400000e+01
  %248 = fcmp ult float %247, 0xC1E0000000000000
  %249 = fcmp ugt float %247, 0x41DFFFFFE0000000
  %250 = fcmp ogt float %247, 0xC1E0000000000000
  %251 = select i1 %250, float %247, float 0xC1E0000000000000
  %252 = fptosi float %251 to i32
  %253 = select i1 %248, i32 0, i32 2147483647
  %254 = select i1 %249, i32 %253, i32 %252
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %208) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %207) #7
  br label %255

255:                                              ; preds = %42, %46, %59, %38, %77, %140, %236, %189
  %256 = phi i8 [ 1, %236 ], [ 1, %189 ], [ 1, %140 ], [ 0, %77 ], [ 0, %42 ], [ 0, %38 ], [ 0, %59 ], [ 0, %46 ]
  %257 = phi i32 [ %254, %236 ], [ %205, %189 ], [ %160, %140 ], [ 0, %77 ], [ 0, %42 ], [ 0, %38 ], [ 0, %59 ], [ 0, %46 ]
  %258 = phi i32 [ %246, %236 ], [ %197, %189 ], [ %152, %140 ], [ 0, %77 ], [ 0, %42 ], [ 0, %38 ], [ 0, %59 ], [ 0, %46 ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %7) #7
  %259 = zext i32 %257 to i64
  %260 = shl nuw i64 %259, 32
  %261 = zext i32 %258 to i64
  %262 = or i64 %260, %261
  %263 = insertvalue { i64, i8 } undef, i64 %262, 0
  %264 = insertvalue { i64, i8 } %263, i8 %256, 1
  ret { i64, i8 } %264
}

declare zeroext i1 @_ZNK5blink16FloatRoundedRect14XInterceptsAtYEfRfS1_(%"class.blink::FloatRoundedRect"*, float, float* dereferenceable(4), float* dereferenceable(4)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK5blink8BoxShape17BuildDisplayPathsERNS_5Shape12DisplayPathsE(%"class.blink::BoxShape"*, %"struct.blink::Shape::DisplayPaths"* dereferenceable(32)) unnamed_addr #2 align 2 {
  %3 = alloca %"class.blink::FloatRoundedRect", align 4
  %4 = alloca %"class.blink::FloatRoundedRect", align 16
  %5 = alloca %"class.blink::FloatRoundedRect", align 16
  %6 = alloca %"class.blink::FloatRoundedRect", align 16
  %7 = alloca %"class.blink::FloatRoundedRect", align 16
  %8 = getelementptr inbounds %"struct.blink::Shape::DisplayPaths", %"struct.blink::Shape::DisplayPaths"* %1, i64 0, i32 0
  %9 = getelementptr inbounds %"class.blink::BoxShape", %"class.blink::BoxShape"* %0, i64 0, i32 1
  %10 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %9, i64 0, i32 0
  %11 = getelementptr inbounds %"class.blink::BoxShape", %"class.blink::BoxShape"* %0, i64 0, i32 1, i32 1, i32 0
  %12 = getelementptr inbounds %"class.blink::BoxShape", %"class.blink::BoxShape"* %0, i64 0, i32 1, i32 1, i32 1
  %13 = getelementptr inbounds %"class.blink::BoxShape", %"class.blink::BoxShape"* %0, i64 0, i32 1, i32 1, i32 2
  %14 = getelementptr inbounds %"class.blink::BoxShape", %"class.blink::BoxShape"* %0, i64 0, i32 1, i32 1, i32 3
  tail call void @_ZN5blink4Path14AddRoundedRectERKNS_9FloatRectERKNS_9FloatSizeES6_S6_S6_(%"class.blink::Path"* %8, %"class.blink::FloatRect"* dereferenceable(16) %10, %"class.blink::FloatSize"* dereferenceable(8) %11, %"class.blink::FloatSize"* dereferenceable(8) %12, %"class.blink::FloatSize"* dereferenceable(8) %13, %"class.blink::FloatSize"* dereferenceable(8) %14) #7
  %15 = getelementptr inbounds %"class.blink::BoxShape", %"class.blink::BoxShape"* %0, i64 0, i32 0, i32 2
  %16 = load float, float* %15, align 4
  %17 = fcmp une float %16, 0.000000e+00
  br i1 %17, label %18, label %226

18:                                               ; preds = %2
  %19 = getelementptr inbounds %"struct.blink::Shape::DisplayPaths", %"struct.blink::Shape::DisplayPaths"* %1, i64 0, i32 1
  %20 = bitcast %"class.blink::FloatRoundedRect"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %20) #7
  %21 = bitcast %"class.blink::FloatRoundedRect"* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %20, i8* align 4 %21, i64 16, i1 false) #7
  %22 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 1
  %23 = getelementptr inbounds %"class.blink::BoxShape", %"class.blink::BoxShape"* %0, i64 0, i32 1, i32 1
  %24 = bitcast %"class.blink::FloatRoundedRect::Radii"* %23 to i64*
  %25 = bitcast %"class.blink::FloatRoundedRect::Radii"* %22 to i64*
  %26 = load i64, i64* %24, align 4, !noalias !6
  store i64 %26, i64* %25, align 4, !alias.scope !6
  %27 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 1, i32 1
  %28 = bitcast %"class.blink::FloatSize"* %12 to i64*
  %29 = bitcast %"class.blink::FloatSize"* %27 to i64*
  %30 = load i64, i64* %28, align 4, !noalias !6
  store i64 %30, i64* %29, align 4, !alias.scope !6
  %31 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 1, i32 2
  %32 = bitcast %"class.blink::FloatSize"* %13 to i64*
  %33 = bitcast %"class.blink::FloatSize"* %31 to i64*
  %34 = load i64, i64* %32, align 4, !noalias !6
  store i64 %34, i64* %33, align 4, !alias.scope !6
  %35 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 1, i32 3
  %36 = bitcast %"class.blink::FloatSize"* %14 to i64*
  %37 = bitcast %"class.blink::FloatSize"* %35 to i64*
  %38 = load i64, i64* %36, align 4, !noalias !6
  store i64 %38, i64* %37, align 4, !alias.scope !6
  %39 = fcmp ogt float %16, 0.000000e+00
  br i1 %39, label %40, label %60

40:                                               ; preds = %18
  %41 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 0, i32 0, i32 0
  %42 = load float, float* %41, align 4, !alias.scope !6
  %43 = fsub float %42, %16
  store float %43, float* %41, align 4, !alias.scope !6
  %44 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 0, i32 1, i32 0
  %45 = load float, float* %44, align 4, !alias.scope !6
  %46 = fadd float %16, %45
  %47 = fadd float %16, %46
  store float %47, float* %44, align 4, !alias.scope !6
  %48 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 0, i32 0, i32 1
  %49 = load float, float* %48, align 4, !alias.scope !6
  %50 = fsub float %49, %16
  store float %50, float* %48, align 4, !alias.scope !6
  %51 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 0, i32 1, i32 1
  %52 = load float, float* %51, align 4, !alias.scope !6
  %53 = fadd float %16, %52
  %54 = fadd float %16, %53
  store float %54, float* %51, align 4, !alias.scope !6
  call void @_ZN5blink16FloatRoundedRect5Radii6ExpandEffff(%"class.blink::FloatRoundedRect::Radii"* %22, float %16, float %16, float %16, float %16) #7
  %55 = load i64, i64* %24, align 4, !noalias !9
  %56 = load i64, i64* %28, align 4, !noalias !9
  %57 = load i64, i64* %32, align 4, !noalias !9
  %58 = load i64, i64* %36, align 4, !noalias !9
  %59 = load float, float* %15, align 4, !noalias !9
  br label %60

60:                                               ; preds = %18, %40
  %61 = phi float [ %16, %18 ], [ %59, %40 ]
  %62 = phi i64 [ %38, %18 ], [ %58, %40 ]
  %63 = phi i64 [ %34, %18 ], [ %57, %40 ]
  %64 = phi i64 [ %30, %18 ], [ %56, %40 ]
  %65 = phi i64 [ %26, %18 ], [ %55, %40 ]
  %66 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %3, i64 0, i32 0
  %67 = bitcast %"class.blink::FloatRoundedRect"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %67) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %67, i8* align 4 %21, i64 16, i1 false) #7
  %68 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 1
  %69 = bitcast %"class.blink::FloatRoundedRect::Radii"* %68 to i64*
  store i64 %65, i64* %69, align 16, !alias.scope !9
  %70 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 1, i32 1
  %71 = bitcast %"class.blink::FloatSize"* %70 to i64*
  store i64 %64, i64* %71, align 8, !alias.scope !9
  %72 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 1, i32 2
  %73 = bitcast %"class.blink::FloatSize"* %72 to i64*
  store i64 %63, i64* %73, align 16, !alias.scope !9
  %74 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 1, i32 3
  %75 = bitcast %"class.blink::FloatSize"* %74 to i64*
  store i64 %62, i64* %75, align 8, !alias.scope !9
  %76 = fcmp ogt float %61, 0.000000e+00
  br i1 %76, label %77, label %103

77:                                               ; preds = %60
  %78 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 0, i32 1, i32 0
  %79 = load float, float* %78, align 8, !alias.scope !9
  %80 = fadd float %61, %79
  %81 = bitcast %"class.blink::FloatRoundedRect"* %4 to <2 x float>*
  %82 = load <2 x float>, <2 x float>* %81, align 16, !alias.scope !9
  %83 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %4, i64 0, i32 0, i32 1, i32 1
  %84 = load float, float* %83, align 4, !alias.scope !9
  %85 = fadd float %61, %84
  %86 = extractelement <2 x float> %82, i32 0
  %87 = insertelement <4 x float> undef, float %86, i32 0
  %88 = extractelement <2 x float> %82, i32 1
  %89 = insertelement <4 x float> %87, float %88, i32 1
  %90 = insertelement <4 x float> %89, float %80, i32 2
  %91 = insertelement <4 x float> %90, float %85, i32 3
  %92 = insertelement <4 x float> undef, float %61, i32 0
  %93 = shufflevector <4 x float> %92, <4 x float> undef, <4 x i32> zeroinitializer
  %94 = fsub <4 x float> %91, %93
  %95 = fadd <4 x float> %91, %93
  %96 = shufflevector <4 x float> %94, <4 x float> %95, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %97 = bitcast %"class.blink::FloatRoundedRect"* %4 to <4 x float>*
  store <4 x float> %96, <4 x float>* %97, align 16, !alias.scope !9
  call void @_ZN5blink16FloatRoundedRect5Radii6ExpandEffff(%"class.blink::FloatRoundedRect::Radii"* %68, float %61, float %61, float %61, float %61) #7
  %98 = load i64, i64* %24, align 4, !noalias !12
  %99 = load i64, i64* %28, align 4, !noalias !12
  %100 = load i64, i64* %32, align 4, !noalias !12
  %101 = load i64, i64* %36, align 4, !noalias !12
  %102 = load float, float* %15, align 4, !noalias !12
  br label %103

103:                                              ; preds = %60, %77
  %104 = phi float [ %61, %60 ], [ %102, %77 ]
  %105 = phi i64 [ %62, %60 ], [ %101, %77 ]
  %106 = phi i64 [ %63, %60 ], [ %100, %77 ]
  %107 = phi i64 [ %64, %60 ], [ %99, %77 ]
  %108 = phi i64 [ %65, %60 ], [ %98, %77 ]
  %109 = getelementptr inbounds %"class.blink::FloatRoundedRect::Radii", %"class.blink::FloatRoundedRect::Radii"* %68, i64 0, i32 0
  %110 = bitcast %"class.blink::FloatRoundedRect"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %110) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %110, i8* align 4 %21, i64 16, i1 false) #7
  %111 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %5, i64 0, i32 1
  %112 = bitcast %"class.blink::FloatRoundedRect::Radii"* %111 to i64*
  store i64 %108, i64* %112, align 16, !alias.scope !12
  %113 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %5, i64 0, i32 1, i32 1
  %114 = bitcast %"class.blink::FloatSize"* %113 to i64*
  store i64 %107, i64* %114, align 8, !alias.scope !12
  %115 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %5, i64 0, i32 1, i32 2
  %116 = bitcast %"class.blink::FloatSize"* %115 to i64*
  store i64 %106, i64* %116, align 16, !alias.scope !12
  %117 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %5, i64 0, i32 1, i32 3
  %118 = bitcast %"class.blink::FloatSize"* %117 to i64*
  store i64 %105, i64* %118, align 8, !alias.scope !12
  %119 = fcmp ogt float %104, 0.000000e+00
  br i1 %119, label %120, label %146

120:                                              ; preds = %103
  %121 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %5, i64 0, i32 0, i32 1, i32 0
  %122 = load float, float* %121, align 8, !alias.scope !12
  %123 = fadd float %104, %122
  %124 = bitcast %"class.blink::FloatRoundedRect"* %5 to <2 x float>*
  %125 = load <2 x float>, <2 x float>* %124, align 16, !alias.scope !12
  %126 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %5, i64 0, i32 0, i32 1, i32 1
  %127 = load float, float* %126, align 4, !alias.scope !12
  %128 = fadd float %104, %127
  %129 = extractelement <2 x float> %125, i32 0
  %130 = insertelement <4 x float> undef, float %129, i32 0
  %131 = extractelement <2 x float> %125, i32 1
  %132 = insertelement <4 x float> %130, float %131, i32 1
  %133 = insertelement <4 x float> %132, float %123, i32 2
  %134 = insertelement <4 x float> %133, float %128, i32 3
  %135 = insertelement <4 x float> undef, float %104, i32 0
  %136 = shufflevector <4 x float> %135, <4 x float> undef, <4 x i32> zeroinitializer
  %137 = fsub <4 x float> %134, %136
  %138 = fadd <4 x float> %134, %136
  %139 = shufflevector <4 x float> %137, <4 x float> %138, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %140 = bitcast %"class.blink::FloatRoundedRect"* %5 to <4 x float>*
  store <4 x float> %139, <4 x float>* %140, align 16, !alias.scope !12
  call void @_ZN5blink16FloatRoundedRect5Radii6ExpandEffff(%"class.blink::FloatRoundedRect::Radii"* %111, float %104, float %104, float %104, float %104) #7
  %141 = load i64, i64* %24, align 4, !noalias !15
  %142 = load i64, i64* %28, align 4, !noalias !15
  %143 = load i64, i64* %32, align 4, !noalias !15
  %144 = load i64, i64* %36, align 4, !noalias !15
  %145 = load float, float* %15, align 4, !noalias !15
  br label %146

146:                                              ; preds = %103, %120
  %147 = phi float [ %104, %103 ], [ %145, %120 ]
  %148 = phi i64 [ %105, %103 ], [ %144, %120 ]
  %149 = phi i64 [ %106, %103 ], [ %143, %120 ]
  %150 = phi i64 [ %107, %103 ], [ %142, %120 ]
  %151 = phi i64 [ %108, %103 ], [ %141, %120 ]
  %152 = bitcast %"class.blink::FloatRoundedRect"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %152) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %152, i8* align 4 %21, i64 16, i1 false) #7
  %153 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %6, i64 0, i32 1
  %154 = bitcast %"class.blink::FloatRoundedRect::Radii"* %153 to i64*
  store i64 %151, i64* %154, align 16, !alias.scope !15
  %155 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %6, i64 0, i32 1, i32 1
  %156 = bitcast %"class.blink::FloatSize"* %155 to i64*
  store i64 %150, i64* %156, align 8, !alias.scope !15
  %157 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %6, i64 0, i32 1, i32 2
  %158 = bitcast %"class.blink::FloatSize"* %157 to i64*
  store i64 %149, i64* %158, align 16, !alias.scope !15
  %159 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %6, i64 0, i32 1, i32 3
  %160 = bitcast %"class.blink::FloatSize"* %159 to i64*
  store i64 %148, i64* %160, align 8, !alias.scope !15
  %161 = fcmp ogt float %147, 0.000000e+00
  br i1 %161, label %162, label %188

162:                                              ; preds = %146
  %163 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %6, i64 0, i32 0, i32 1, i32 0
  %164 = load float, float* %163, align 8, !alias.scope !15
  %165 = fadd float %147, %164
  %166 = bitcast %"class.blink::FloatRoundedRect"* %6 to <2 x float>*
  %167 = load <2 x float>, <2 x float>* %166, align 16, !alias.scope !15
  %168 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %6, i64 0, i32 0, i32 1, i32 1
  %169 = load float, float* %168, align 4, !alias.scope !15
  %170 = fadd float %147, %169
  %171 = extractelement <2 x float> %167, i32 0
  %172 = insertelement <4 x float> undef, float %171, i32 0
  %173 = extractelement <2 x float> %167, i32 1
  %174 = insertelement <4 x float> %172, float %173, i32 1
  %175 = insertelement <4 x float> %174, float %165, i32 2
  %176 = insertelement <4 x float> %175, float %170, i32 3
  %177 = insertelement <4 x float> undef, float %147, i32 0
  %178 = shufflevector <4 x float> %177, <4 x float> undef, <4 x i32> zeroinitializer
  %179 = fsub <4 x float> %176, %178
  %180 = fadd <4 x float> %176, %178
  %181 = shufflevector <4 x float> %179, <4 x float> %180, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %182 = bitcast %"class.blink::FloatRoundedRect"* %6 to <4 x float>*
  store <4 x float> %181, <4 x float>* %182, align 16, !alias.scope !15
  call void @_ZN5blink16FloatRoundedRect5Radii6ExpandEffff(%"class.blink::FloatRoundedRect::Radii"* %153, float %147, float %147, float %147, float %147) #7
  %183 = load i64, i64* %24, align 4, !noalias !18
  %184 = load i64, i64* %28, align 4, !noalias !18
  %185 = load i64, i64* %32, align 4, !noalias !18
  %186 = load i64, i64* %36, align 4, !noalias !18
  %187 = load float, float* %15, align 4, !noalias !18
  br label %188

188:                                              ; preds = %146, %162
  %189 = phi float [ %147, %146 ], [ %187, %162 ]
  %190 = phi i64 [ %148, %146 ], [ %186, %162 ]
  %191 = phi i64 [ %149, %146 ], [ %185, %162 ]
  %192 = phi i64 [ %150, %146 ], [ %184, %162 ]
  %193 = phi i64 [ %151, %146 ], [ %183, %162 ]
  %194 = bitcast %"class.blink::FloatRoundedRect"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %194) #7
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %194, i8* align 4 %21, i64 16, i1 false) #7
  %195 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %7, i64 0, i32 1
  %196 = bitcast %"class.blink::FloatRoundedRect::Radii"* %195 to i64*
  store i64 %193, i64* %196, align 16, !alias.scope !18
  %197 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %7, i64 0, i32 1, i32 1
  %198 = bitcast %"class.blink::FloatSize"* %197 to i64*
  store i64 %192, i64* %198, align 8, !alias.scope !18
  %199 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %7, i64 0, i32 1, i32 2
  %200 = bitcast %"class.blink::FloatSize"* %199 to i64*
  store i64 %191, i64* %200, align 16, !alias.scope !18
  %201 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %7, i64 0, i32 1, i32 3
  %202 = bitcast %"class.blink::FloatSize"* %201 to i64*
  store i64 %190, i64* %202, align 8, !alias.scope !18
  %203 = fcmp ogt float %189, 0.000000e+00
  br i1 %203, label %204, label %225

204:                                              ; preds = %188
  %205 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %7, i64 0, i32 0, i32 1, i32 0
  %206 = load float, float* %205, align 8, !alias.scope !18
  %207 = fadd float %189, %206
  %208 = bitcast %"class.blink::FloatRoundedRect"* %7 to <2 x float>*
  %209 = load <2 x float>, <2 x float>* %208, align 16, !alias.scope !18
  %210 = getelementptr inbounds %"class.blink::FloatRoundedRect", %"class.blink::FloatRoundedRect"* %7, i64 0, i32 0, i32 1, i32 1
  %211 = load float, float* %210, align 4, !alias.scope !18
  %212 = fadd float %189, %211
  %213 = extractelement <2 x float> %209, i32 0
  %214 = insertelement <4 x float> undef, float %213, i32 0
  %215 = extractelement <2 x float> %209, i32 1
  %216 = insertelement <4 x float> %214, float %215, i32 1
  %217 = insertelement <4 x float> %216, float %207, i32 2
  %218 = insertelement <4 x float> %217, float %212, i32 3
  %219 = insertelement <4 x float> undef, float %189, i32 0
  %220 = shufflevector <4 x float> %219, <4 x float> undef, <4 x i32> zeroinitializer
  %221 = fsub <4 x float> %218, %220
  %222 = fadd <4 x float> %218, %220
  %223 = shufflevector <4 x float> %221, <4 x float> %222, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %224 = bitcast %"class.blink::FloatRoundedRect"* %7 to <4 x float>*
  store <4 x float> %223, <4 x float>* %224, align 16, !alias.scope !18
  call void @_ZN5blink16FloatRoundedRect5Radii6ExpandEffff(%"class.blink::FloatRoundedRect::Radii"* %195, float %189, float %189, float %189, float %189) #7
  br label %225

225:                                              ; preds = %188, %204
  call void @_ZN5blink4Path14AddRoundedRectERKNS_9FloatRectERKNS_9FloatSizeES6_S6_S6_(%"class.blink::Path"* %19, %"class.blink::FloatRect"* nonnull dereferenceable(16) %66, %"class.blink::FloatSize"* dereferenceable(8) %109, %"class.blink::FloatSize"* dereferenceable(8) %113, %"class.blink::FloatSize"* dereferenceable(8) %157, %"class.blink::FloatSize"* dereferenceable(8) %201) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %194) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %152) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %110) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %67) #7
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %20) #7
  br label %226

226:                                              ; preds = %225, %2
  ret void
}

declare void @_ZN5blink4Path14AddRoundedRectERKNS_9FloatRectERKNS_9FloatSizeES6_S6_S6_(%"class.blink::Path"*, %"class.blink::FloatRect"* dereferenceable(16), %"class.blink::FloatSize"* dereferenceable(8), %"class.blink::FloatSize"* dereferenceable(8), %"class.blink::FloatSize"* dereferenceable(8), %"class.blink::FloatSize"* dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink5ShapeD2Ev(%"class.blink::Shape"*) unnamed_addr #2 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5blink8BoxShapeD0Ev(%"class.blink::BoxShape"*) unnamed_addr #4 comdat align 2 {
  %2 = bitcast %"class.blink::BoxShape"* %0 to i8*
  tail call void @free(i8* %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK5blink8BoxShape7IsEmptyEv(%"class.blink::BoxShape"*) unnamed_addr #2 comdat align 2 {
  %2 = getelementptr inbounds %"class.blink::BoxShape", %"class.blink::BoxShape"* %0, i64 0, i32 1, i32 0, i32 1, i32 0
  %3 = load float, float* %2, align 4
  %4 = fcmp ugt float %3, 0.000000e+00
  br i1 %4, label %5, label %9

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.blink::BoxShape", %"class.blink::BoxShape"* %0, i64 0, i32 1, i32 0, i32 1, i32 1
  %7 = load float, float* %6, align 4
  %8 = fcmp ole float %7, 0.000000e+00
  br label %9

9:                                                ; preds = %1, %5
  %10 = phi i1 [ true, %1 ], [ %8, %5 ]
  ret i1 %10
}

declare void @_ZN5blink16FloatRoundedRect5Radii6ExpandEffff(%"class.blink::FloatRoundedRect::Radii"*, float, float, float, float) local_unnamed_addr #3

; Function Attrs: nounwind readnone speculatable
declare { i32, i1 } @llvm.sadd.with.overflow.i32(i32, i32) #5

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"_ZNK5blink8BoxShape17ShapeMarginBoundsEv: argument 0"}
!4 = distinct !{!4, !"_ZNK5blink8BoxShape17ShapeMarginBoundsEv"}
!5 = !{!"branch_weights", i32 1, i32 2000}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZNK5blink8BoxShape17ShapeMarginBoundsEv: argument 0"}
!8 = distinct !{!8, !"_ZNK5blink8BoxShape17ShapeMarginBoundsEv"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZNK5blink8BoxShape17ShapeMarginBoundsEv: argument 0"}
!11 = distinct !{!11, !"_ZNK5blink8BoxShape17ShapeMarginBoundsEv"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZNK5blink8BoxShape17ShapeMarginBoundsEv: argument 0"}
!14 = distinct !{!14, !"_ZNK5blink8BoxShape17ShapeMarginBoundsEv"}
!15 = !{!16}
!16 = distinct !{!16, !17, !"_ZNK5blink8BoxShape17ShapeMarginBoundsEv: argument 0"}
!17 = distinct !{!17, !"_ZNK5blink8BoxShape17ShapeMarginBoundsEv"}
!18 = !{!19}
!19 = distinct !{!19, !20, !"_ZNK5blink8BoxShape17ShapeMarginBoundsEv: argument 0"}
!20 = distinct !{!20, !"_ZNK5blink8BoxShape17ShapeMarginBoundsEv"}
