; ModuleID = '../../components/omnibox/browser/history_match.cc'
source_filename = "../../components/omnibox/browser/history_match.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.history::HistoryMatch" = type <{ %"class.history::URLRow", i64, i8, i8, i8, [5 x i8] }>
%"class.history::URLRow" = type <{ i32 (...)**, i64, %class.GURL, %"class.std::__1::basic_string.4", i32, i32, %"class.base::Time", i8, [7 x i8] }>
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %class.GURL* }
%"class.std::__1::basic_string.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.7 }
%union.anon.7 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.base::Time" = type { %"class.base::time_internal::TimeBase" }
%"class.base::time_internal::TimeBase" = type { i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }

@_ZN7history12HistoryMatchC1Ev = hidden unnamed_addr alias void (%"struct.history::HistoryMatch"*), void (%"struct.history::HistoryMatch"*)* @_ZN7history12HistoryMatchC2Ev

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7history12HistoryMatchC2Ev(%"struct.history::HistoryMatch"*) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.history::HistoryMatch", %"struct.history::HistoryMatch"* %0, i64 0, i32 0
  tail call void @_ZN7history6URLRowC1Ev(%"class.history::URLRow"* %2) #3
  %3 = getelementptr inbounds %"struct.history::HistoryMatch", %"struct.history::HistoryMatch"* %0, i64 0, i32 1
  store i64 -1, i64* %3, align 8
  %4 = getelementptr inbounds %"struct.history::HistoryMatch", %"struct.history::HistoryMatch"* %0, i64 0, i32 2
  store i8 0, i8* %4, align 8
  %5 = getelementptr inbounds %"struct.history::HistoryMatch", %"struct.history::HistoryMatch"* %0, i64 0, i32 3
  store i8 0, i8* %5, align 1
  %6 = getelementptr inbounds %"struct.history::HistoryMatch", %"struct.history::HistoryMatch"* %0, i64 0, i32 4
  store i8 1, i8* %6, align 2
  ret void
}

declare void @_ZN7history6URLRowC1Ev(%"class.history::URLRow"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7history12HistoryMatch10EqualsGURLERKS0_RK4GURL(%"struct.history::HistoryMatch"* dereferenceable(200), %class.GURL* dereferenceable(120)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"struct.history::HistoryMatch", %"struct.history::HistoryMatch"* %0, i64 0, i32 0, i32 2
  %4 = tail call zeroext i1 @_ZeqRK4GURLS1_(%class.GURL* dereferenceable(120) %3, %class.GURL* dereferenceable(120) %1) #3
  ret i1 %4
}

declare zeroext i1 @_ZeqRK4GURLS1_(%class.GURL* dereferenceable(120), %class.GURL* dereferenceable(120)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZNK7history12HistoryMatch19EstimateMemoryUsageEv(%"struct.history::HistoryMatch"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"struct.history::HistoryMatch", %"struct.history::HistoryMatch"* %0, i64 0, i32 0
  %3 = tail call i64 @_ZNK7history6URLRow19EstimateMemoryUsageEv(%"class.history::URLRow"* %2) #3
  ret i64 %3
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK7history12HistoryMatch10IsHostOnlyEv(%"struct.history::HistoryMatch"*) local_unnamed_addr #2 align 2 {
  %2 = getelementptr inbounds %"struct.history::HistoryMatch", %"struct.history::HistoryMatch"* %0, i64 0, i32 0, i32 2
  %3 = getelementptr inbounds %"struct.history::HistoryMatch", %"struct.history::HistoryMatch"* %0, i64 0, i32 0, i32 2, i32 2, i32 5, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = icmp sgt i32 %4, -1
  br i1 %5, label %6, label %28

6:                                                ; preds = %1
  %7 = icmp eq i32 %4, 0
  br i1 %7, label %36, label %8

8:                                                ; preds = %6
  %9 = getelementptr inbounds %"struct.history::HistoryMatch", %"struct.history::HistoryMatch"* %0, i64 0, i32 0, i32 2, i32 2, i32 5, i32 0
  %10 = load i32, i32* %9, align 4
  %11 = sext i32 %10 to i64
  %12 = bitcast %class.GURL* %2 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  br i1 %15, label %16, label %19

16:                                               ; preds = %8
  %17 = getelementptr inbounds %class.GURL, %class.GURL* %2, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load i8*, i8** %17, align 8
  br label %21

19:                                               ; preds = %8
  %20 = bitcast %class.GURL* %2 to i8*
  br label %21

21:                                               ; preds = %16, %19
  %22 = phi i8* [ %18, %16 ], [ %20, %19 ]
  %23 = icmp eq i32 %4, 1
  br i1 %23, label %24, label %36

24:                                               ; preds = %21
  %25 = getelementptr inbounds i8, i8* %22, i64 %11
  %26 = load i8, i8* %25, align 1
  %27 = icmp eq i8 %26, 47
  br i1 %27, label %28, label %36

28:                                               ; preds = %24, %1
  %29 = getelementptr inbounds %"struct.history::HistoryMatch", %"struct.history::HistoryMatch"* %0, i64 0, i32 0, i32 2, i32 2, i32 6, i32 1
  %30 = load i32, i32* %29, align 4
  %31 = icmp sgt i32 %30, -1
  br i1 %31, label %36, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %"struct.history::HistoryMatch", %"struct.history::HistoryMatch"* %0, i64 0, i32 0, i32 2, i32 2, i32 7, i32 1
  %34 = load i32, i32* %33, align 4
  %35 = icmp slt i32 %34, 0
  br label %36

36:                                               ; preds = %6, %21, %32, %28, %24
  %37 = phi i1 [ false, %28 ], [ false, %24 ], [ %35, %32 ], [ false, %21 ], [ false, %6 ]
  ret i1 %37
}

declare i64 @_ZNK7history6URLRow19EstimateMemoryUsageEv(%"class.history::URLRow"*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
