; ModuleID = '../../native_client/src/trusted/validator_ragel/dfa_validate_64.c'
source_filename = "../../native_client/src/trusted/validator_ragel/dfa_validate_64.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.NaClValidatorInterface = type { i32, i32, i32, i32 (i64, i8*, i64, i32, i32, i32, %struct.NaClCPUFeaturesAbstract*, %struct.NaClValidationMetadata*, %struct.NaClValidationCache*)*, i32 (i64, i8*, i8*, i64, %struct.NaClCPUFeaturesAbstract*, i32 (i8*, i8*, i8)*)*, i32 (i64, i8*, i8*, i64, %struct.NaClCPUFeaturesAbstract*)*, i64, void (%struct.NaClCPUFeaturesAbstract*)*, void (%struct.NaClCPUFeaturesAbstract*)*, i32 (i64, i64, i8*, i64, %struct.NaClCPUFeaturesAbstract*)* }
%struct.NaClCPUFeaturesAbstract = type opaque
%struct.NaClValidationMetadata = type opaque
%struct.NaClValidationCache = type { i8*, i8* (i8*)*, void (i8*, i8*, i64)*, i32 (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.NaClValidationMetadata*)* }
%struct.StubOutCallbackData = type { i32, i8*, i8*, %struct.cpu_feature_struct_X86*, i32 (i8*, i64, i32, %struct.cpu_feature_struct_X86*, i32 (i8*, i8*, i32, i8*)*, i8*)*, i32 }
%struct.cpu_feature_struct_X86 = type { [39 x i8] }
%struct.CodeCopyCallbackData = type { i32 (i8*, i8*, i8)*, i64 }
%struct.IsOnInstBoundaryCallbackData = type { i32, i8* }

@validator = internal constant %struct.NaClValidatorInterface { i32 0, i32 1, i32 1, i32 (i64, i8*, i64, i32, i32, i32, %struct.NaClCPUFeaturesAbstract*, %struct.NaClValidationMetadata*, %struct.NaClValidationCache*)* @ApplyDfaValidator_x86_64, i32 (i64, i8*, i8*, i64, %struct.NaClCPUFeaturesAbstract*, i32 (i8*, i8*, i8)*)* @ValidatorCodeCopy_x86_64, i32 (i64, i8*, i8*, i64, %struct.NaClCPUFeaturesAbstract*)* @ValidatorCodeReplacement_x86_64, i64 39, void (%struct.NaClCPUFeaturesAbstract*)* @NaClSetAllCPUFeaturesX86, void (%struct.NaClCPUFeaturesAbstract*)* @NaClGetCurrentCPUFeaturesX86, i32 (i64, i64, i8*, i64, %struct.NaClCPUFeaturesAbstract*)* @IsOnInstBoundary_x86_64 }, align 8
@ApplyDfaValidator_x86_64.validator_id = internal constant [11 x i8] c"x86-64 dfa\00", align 1
@.str = private unnamed_addr constant [40 x i8] c"Fatal error in file %s, line %d: !(%s)\0A\00", align 1
@.str.1 = private unnamed_addr constant [66 x i8] c"../../native_client/src/trusted/validator_ragel/dfa_validate_64.c\00", align 1
@.str.2 = private unnamed_addr constant [45 x i8] c"instruction_length <= MAX_INSTRUCTION_LENGTH\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"guest_addr + size > guest_addr\00", align 1
@.str.4 = private unnamed_addr constant [37 x i8] c"size % kBundleSize == 0 && size != 0\00", align 1
@.str.5 = private unnamed_addr constant [53 x i8] c"(uint32_t) (guest_addr & ~kBundleMask) == guest_addr\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"rc\00", align 1

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden nonnull %struct.NaClValidatorInterface* @NaClDfaValidatorCreate_x86_64() local_unnamed_addr #0 {
  ret %struct.NaClValidatorInterface* @validator
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ApplyDfaValidator_x86_64(i64, i8*, i64, i32, i32, i32, %struct.NaClCPUFeaturesAbstract*, %struct.NaClValidationMetadata*, %struct.NaClValidationCache*) #1 {
  %10 = alloca %struct.StubOutCallbackData, align 8
  %11 = bitcast %struct.NaClCPUFeaturesAbstract* %6 to %struct.cpu_feature_struct_X86*
  %12 = bitcast %struct.StubOutCallbackData* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %12) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 48, i1 false)
  %13 = getelementptr inbounds %struct.StubOutCallbackData, %struct.StubOutCallbackData* %10, i64 0, i32 0
  store i32 %4, i32* %13, align 8
  %14 = getelementptr inbounds %struct.StubOutCallbackData, %struct.StubOutCallbackData* %10, i64 0, i32 1
  store i8* %1, i8** %14, align 8
  %15 = getelementptr inbounds i8, i8* %1, i64 %2
  %16 = getelementptr inbounds %struct.StubOutCallbackData, %struct.StubOutCallbackData* %10, i64 0, i32 2
  store i8* %15, i8** %16, align 8
  %17 = getelementptr inbounds %struct.StubOutCallbackData, %struct.StubOutCallbackData* %10, i64 0, i32 3
  %18 = bitcast %struct.cpu_feature_struct_X86** %17 to %struct.NaClCPUFeaturesAbstract**
  store %struct.NaClCPUFeaturesAbstract* %6, %struct.NaClCPUFeaturesAbstract** %18, align 8
  %19 = getelementptr inbounds %struct.StubOutCallbackData, %struct.StubOutCallbackData* %10, i64 0, i32 4
  store i32 (i8*, i64, i32, %struct.cpu_feature_struct_X86*, i32 (i8*, i8*, i32, i8*)*, i8*)* @ValidateChunkAMD64, i32 (i8*, i64, i32, %struct.cpu_feature_struct_X86*, i32 (i8*, i8*, i32, i8*)*, i8*)** %19, align 8
  %20 = getelementptr inbounds %struct.StubOutCallbackData, %struct.StubOutCallbackData* %10, i64 0, i32 5
  store i32 0, i32* %20, align 8
  %21 = icmp eq i32 %3, 0
  br i1 %21, label %22, label %79

22:                                               ; preds = %9
  %23 = tail call i32 @NaClArchSupportedX86(%struct.cpu_feature_struct_X86* %11) #7
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %79, label %25

25:                                               ; preds = %22
  %26 = and i64 %2, 31
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %28, label %79

28:                                               ; preds = %25
  %29 = icmp eq %struct.NaClValidationCache* %8, null
  br i1 %29, label %52, label %30

30:                                               ; preds = %28
  %31 = tail call i32 @NaClCachingIsInexpensive(%struct.NaClValidationCache* nonnull %8, %struct.NaClValidationMetadata* %7) #7
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %52, label %33

33:                                               ; preds = %30
  %34 = getelementptr inbounds %struct.NaClValidationCache, %struct.NaClValidationCache* %8, i64 0, i32 1
  %35 = load i8* (i8*)*, i8* (i8*)** %34, align 8
  %36 = getelementptr inbounds %struct.NaClValidationCache, %struct.NaClValidationCache* %8, i64 0, i32 0
  %37 = load i8*, i8** %36, align 8
  %38 = tail call i8* %35(i8* %37) #7
  %39 = icmp eq i8* %38, null
  br i1 %39, label %52, label %40

40:                                               ; preds = %33
  %41 = getelementptr inbounds %struct.NaClValidationCache, %struct.NaClValidationCache* %8, i64 0, i32 2
  %42 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %41, align 8
  tail call void %42(i8* nonnull %38, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @ApplyDfaValidator_x86_64.validator_id, i64 0, i64 0), i64 11) #7
  %43 = load void (i8*, i8*, i64)*, void (i8*, i8*, i64)** %41, align 8
  %44 = bitcast %struct.NaClCPUFeaturesAbstract* %6 to i8*
  tail call void %43(i8* nonnull %38, i8* %44, i64 39) #7
  tail call void @NaClAddCodeIdentity(i8* %1, i64 %2, %struct.NaClValidationMetadata* %7, %struct.NaClValidationCache* nonnull %8, i8* nonnull %38) #7
  %45 = getelementptr inbounds %struct.NaClValidationCache, %struct.NaClValidationCache* %8, i64 0, i32 3
  %46 = load i32 (i8*)*, i32 (i8*)** %45, align 8
  %47 = tail call i32 %46(i8* nonnull %38) #7
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %52, label %49

49:                                               ; preds = %40
  %50 = getelementptr inbounds %struct.NaClValidationCache, %struct.NaClValidationCache* %8, i64 0, i32 5
  %51 = load void (i8*)*, void (i8*)** %50, align 8
  tail call void %51(i8* nonnull %38) #7
  br label %79

52:                                               ; preds = %33, %28, %30, %40
  %53 = phi i1 [ true, %40 ], [ false, %33 ], [ false, %30 ], [ false, %28 ]
  %54 = phi i8* [ %38, %40 ], [ null, %33 ], [ null, %30 ], [ null, %28 ]
  %55 = icmp eq i32 %5, 0
  br i1 %55, label %59, label %56

56:                                               ; preds = %52
  %57 = tail call i32 @ValidateChunkAMD64(i8* %1, i64 %2, i32 0, %struct.cpu_feature_struct_X86* %11, i32 (i8*, i8*, i32, i8*)* nonnull @NaClDfaProcessValidationError, i8* null) #7
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %62, label %67

59:                                               ; preds = %52
  %60 = call i32 @ValidateChunkAMD64(i8* %1, i64 %2, i32 0, %struct.cpu_feature_struct_X86* %11, i32 (i8*, i8*, i32, i8*)* nonnull @NaClDfaStubOutUnsupportedInstruction, i8* nonnull %12) #7
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %67

62:                                               ; preds = %59, %56
  %63 = tail call i32* @__errno_location() #8
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %64, 12
  %66 = select i1 %65, i32 2, i32 1
  br label %67

67:                                               ; preds = %59, %56, %62
  %68 = phi i32 [ %66, %62 ], [ 0, %56 ], [ 0, %59 ]
  br i1 %53, label %69, label %79

69:                                               ; preds = %67
  %70 = load i32, i32* %20, align 8
  %71 = or i32 %70, %68
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %69
  %74 = getelementptr inbounds %struct.NaClValidationCache, %struct.NaClValidationCache* %8, i64 0, i32 4
  %75 = load void (i8*)*, void (i8*)** %74, align 8
  call void %75(i8* nonnull %54) #7
  br label %76

76:                                               ; preds = %73, %69
  %77 = getelementptr inbounds %struct.NaClValidationCache, %struct.NaClValidationCache* %8, i64 0, i32 5
  %78 = load void (i8*)*, void (i8*)** %77, align 8
  call void %78(i8* nonnull %54) #7
  br label %79

79:                                               ; preds = %67, %76, %25, %22, %9, %49
  %80 = phi i32 [ 0, %49 ], [ 3, %9 ], [ 4, %22 ], [ 1, %25 ], [ %68, %76 ], [ %68, %67 ]
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %12) #7
  ret i32 %80
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ValidatorCodeCopy_x86_64(i64, i8*, i8*, i64, %struct.NaClCPUFeaturesAbstract*, i32 (i8*, i8*, i8)*) #1 {
  %7 = alloca %struct.CodeCopyCallbackData, align 8
  %8 = bitcast %struct.CodeCopyCallbackData* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #7
  %9 = and i64 %3, 31
  %10 = icmp eq i64 %9, 0
  %11 = bitcast %struct.CodeCopyCallbackData* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 16, i1 false)
  br i1 %10, label %12, label %26

12:                                               ; preds = %6
  %13 = getelementptr inbounds %struct.CodeCopyCallbackData, %struct.CodeCopyCallbackData* %7, i64 0, i32 0
  %14 = getelementptr inbounds %struct.CodeCopyCallbackData, %struct.CodeCopyCallbackData* %7, i64 0, i32 1
  %15 = bitcast %struct.NaClCPUFeaturesAbstract* %4 to %struct.cpu_feature_struct_X86*
  store i32 (i8*, i8*, i8)* %5, i32 (i8*, i8*, i8)** %13, align 8
  %16 = ptrtoint i8* %1 to i64
  %17 = ptrtoint i8* %2 to i64
  %18 = sub i64 %16, %17
  store i64 %18, i64* %14, align 8
  %19 = call i32 @ValidateChunkAMD64(i8* %2, i64 %3, i32 256, %struct.cpu_feature_struct_X86* %15, i32 (i8*, i8*, i32, i8*)* nonnull @NaClDfaProcessCodeCopyInstruction, i8* nonnull %8) #7
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %26

21:                                               ; preds = %12
  %22 = tail call i32* @__errno_location() #8
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, 12
  %25 = select i1 %24, i32 2, i32 1
  br label %26

26:                                               ; preds = %21, %12, %6
  %27 = phi i32 [ 1, %6 ], [ 0, %12 ], [ %25, %21 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #7
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define internal i32 @ValidatorCodeReplacement_x86_64(i64, i8*, i8*, i64, %struct.NaClCPUFeaturesAbstract*) #1 {
  %6 = and i64 %3, 31
  %7 = icmp eq i64 %6, 0
  br i1 %7, label %8, label %21

8:                                                ; preds = %5
  %9 = bitcast %struct.NaClCPUFeaturesAbstract* %4 to %struct.cpu_feature_struct_X86*
  %10 = ptrtoint i8* %1 to i64
  %11 = ptrtoint i8* %2 to i64
  %12 = sub i64 %10, %11
  %13 = inttoptr i64 %12 to i8*
  %14 = tail call i32 @ValidateChunkAMD64(i8* %2, i64 %3, i32 256, %struct.cpu_feature_struct_X86* %9, i32 (i8*, i8*, i32, i8*)* nonnull @ProcessCodeReplacementInstruction, i8* %13) #7
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %21

16:                                               ; preds = %8
  %17 = tail call i32* @__errno_location() #8
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 12
  %20 = select i1 %19, i32 2, i32 1
  br label %21

21:                                               ; preds = %16, %8, %5
  %22 = phi i32 [ 1, %5 ], [ 0, %8 ], [ %20, %16 ]
  ret i32 %22
}

declare void @NaClSetAllCPUFeaturesX86(%struct.NaClCPUFeaturesAbstract*) #2

declare void @NaClGetCurrentCPUFeaturesX86(%struct.NaClCPUFeaturesAbstract*) #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @IsOnInstBoundary_x86_64(i64, i64, i8*, i64, %struct.NaClCPUFeaturesAbstract*) #1 {
  %6 = alloca %struct.IsOnInstBoundaryCallbackData, align 8
  %7 = bitcast %struct.NaClCPUFeaturesAbstract* %4 to %struct.cpu_feature_struct_X86*
  %8 = bitcast %struct.IsOnInstBoundaryCallbackData* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %8) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 -86, i64 16, i1 false)
  %9 = and i64 %1, 4294967264
  %10 = sub i64 %9, %0
  %11 = getelementptr inbounds i8, i8* %2, i64 %10
  %12 = add i64 %3, %0
  %13 = icmp ugt i64 %12, %0
  br i1 %13, label %15, label %14

14:                                               ; preds = %5
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 280, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0)) #7
  br label %15

15:                                               ; preds = %5, %14
  %16 = and i64 %3, 31
  %17 = icmp eq i64 %16, 0
  %18 = icmp ne i64 %3, 0
  %19 = and i1 %18, %17
  br i1 %19, label %21, label %20

20:                                               ; preds = %15
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 281, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0)) #7
  br label %21

21:                                               ; preds = %20, %15
  %22 = and i64 %0, 4294967264
  %23 = icmp eq i64 %22, %0
  br i1 %23, label %25, label %24

24:                                               ; preds = %21
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 282, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.5, i64 0, i64 0)) #7
  br label %25

25:                                               ; preds = %24, %21
  %26 = icmp uge i64 %1, %0
  %27 = icmp ugt i64 %12, %1
  %28 = and i1 %26, %27
  br i1 %28, label %29, label %41

29:                                               ; preds = %25
  %30 = getelementptr inbounds %struct.IsOnInstBoundaryCallbackData, %struct.IsOnInstBoundaryCallbackData* %6, i64 0, i32 0
  store i32 0, i32* %30, align 8
  %31 = sub i64 %1, %0
  %32 = getelementptr inbounds i8, i8* %2, i64 %31
  %33 = getelementptr inbounds %struct.IsOnInstBoundaryCallbackData, %struct.IsOnInstBoundaryCallbackData* %6, i64 0, i32 1
  store i8* %32, i8** %33, align 8
  %34 = call i32 @ValidateChunkAMD64(i8* %11, i64 32, i32 256, %struct.cpu_feature_struct_X86* %7, i32 (i8*, i8*, i32, i8*)* nonnull @IsOnInstBoundaryCallback, i8* nonnull %8) #7
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %36, label %37

36:                                               ; preds = %29
  call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 296, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0)) #7
  br label %37

37:                                               ; preds = %29, %36
  %38 = load i32, i32* %30, align 8
  %39 = icmp eq i32 %38, 0
  %40 = zext i1 %39 to i32
  br label %41

41:                                               ; preds = %25, %37
  %42 = phi i32 [ %40, %37 ], [ 1, %25 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %8) #7
  ret i32 %42
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare i32 @ValidateChunkAMD64(i8*, i64, i32, %struct.cpu_feature_struct_X86*, i32 (i8*, i8*, i32, i8*)*, i8*) #2

declare i32 @NaClArchSupportedX86(%struct.cpu_feature_struct_X86*) local_unnamed_addr #2

declare i32 @NaClCachingIsInexpensive(%struct.NaClValidationCache*, %struct.NaClValidationMetadata*) local_unnamed_addr #2

declare void @NaClAddCodeIdentity(i8*, i64, %struct.NaClValidationMetadata*, %struct.NaClValidationCache*, i8*) local_unnamed_addr #2

declare i32 @NaClDfaProcessValidationError(i8*, i8*, i32, i8*) #2

declare i32 @NaClDfaStubOutUnsupportedInstruction(i8*, i8*, i32, i8*) #2

; Function Attrs: nounwind readnone
declare i32* @__errno_location() local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

declare i32 @NaClDfaProcessCodeCopyInstruction(i8*, i8*, i32, i8*) #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @ProcessCodeReplacementInstruction(i8*, i8*, i32, i8*) #1 {
  %5 = ptrtoint i8* %3 to i64
  %6 = ptrtoint i8* %1 to i64
  %7 = ptrtoint i8* %0 to i64
  %8 = sub i64 %6, %7
  %9 = getelementptr inbounds i8, i8* %0, i64 %5
  %10 = getelementptr inbounds i8, i8* %1, i64 %5
  %11 = icmp ult i64 %8, 18
  br i1 %11, label %13, label %12

12:                                               ; preds = %4
  tail call void (i32, i8*, ...) @NaClLog(i32 -4, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.1, i64 0, i64 0), i32 138, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.2, i64 0, i64 0)) #7
  br label %13

13:                                               ; preds = %12, %4
  %14 = and i32 %2, 100646912
  %15 = icmp eq i32 %14, 65536
  br i1 %15, label %16, label %18

16:                                               ; preds = %13
  %17 = tail call i32 @NaClDfaCodeReplacementIsStubouted(i8* %9, i64 %8) #7
  br label %75

18:                                               ; preds = %13
  %19 = trunc i32 %2 to i16
  %20 = icmp slt i16 %19, 0
  br i1 %20, label %21, label %27

21:                                               ; preds = %18
  %22 = icmp eq i32 %14, 32768
  br i1 %22, label %23, label %26

23:                                               ; preds = %21
  %24 = tail call i32 @bcmp(i8* %0, i8* %9, i64 %8)
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %75, label %26

26:                                               ; preds = %23, %21
  br label %75

27:                                               ; preds = %18
  %28 = and i32 %2, 1174388736
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %75

30:                                               ; preds = %27
  %31 = tail call i32 @bcmp(i8* %0, i8* %9, i64 %8)
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %75, label %33

33:                                               ; preds = %30
  %34 = and i32 %2, 134217728
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %75, label %36

36:                                               ; preds = %33
  %37 = and i32 %2, 536870928
  %38 = icmp eq i32 %37, 536870928
  br i1 %38, label %39, label %54

39:                                               ; preds = %36
  %40 = and i32 %2, 15
  %41 = zext i32 %40 to i64
  %42 = xor i64 %41, -1
  %43 = add i64 %8, %42
  %44 = tail call i32 @bcmp(i8* %0, i8* %9, i64 %43)
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %75

46:                                               ; preds = %39
  %47 = getelementptr inbounds i8, i8* %1, i64 -1
  %48 = load i8, i8* %47, align 1
  %49 = getelementptr inbounds i8, i8* %10, i64 -1
  %50 = load i8, i8* %49, align 1
  %51 = xor i8 %50, %48
  %52 = icmp ult i8 %51, 4
  %53 = zext i1 %52 to i32
  br label %75

54:                                               ; preds = %36
  %55 = and i32 %2, 536870912
  %56 = icmp eq i32 %55, 0
  %57 = and i32 %2, 15
  %58 = zext i32 %57 to i64
  %59 = sub i64 %8, %58
  br i1 %56, label %71, label %60

60:                                               ; preds = %54
  %61 = add i64 %59, -1
  %62 = tail call i32 @bcmp(i8* %0, i8* %9, i64 %61)
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %75

64:                                               ; preds = %60
  %65 = getelementptr inbounds i8, i8* %1, i64 -1
  %66 = load i8, i8* %65, align 1
  %67 = getelementptr inbounds i8, i8* %10, i64 -1
  %68 = load i8, i8* %67, align 1
  %69 = icmp eq i8 %66, %68
  %70 = zext i1 %69 to i32
  br label %75

71:                                               ; preds = %54
  %72 = tail call i32 @bcmp(i8* %0, i8* %9, i64 %59)
  %73 = icmp eq i32 %72, 0
  %74 = zext i1 %73 to i32
  br label %75

75:                                               ; preds = %60, %64, %39, %46, %33, %30, %27, %23, %71, %26, %16
  %76 = phi i32 [ %17, %16 ], [ 0, %26 ], [ %74, %71 ], [ 1, %23 ], [ 0, %27 ], [ 1, %30 ], [ 0, %33 ], [ 0, %39 ], [ %53, %46 ], [ 0, %60 ], [ %70, %64 ]
  ret i32 %76
}

declare void @NaClLog(i32, i8*, ...) local_unnamed_addr #2

declare i32 @NaClDfaCodeReplacementIsStubouted(i8*, i64) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal i32 @IsOnInstBoundaryCallback(i8* readnone, i8* nocapture readnone, i32, i8* nocapture) #5 {
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  %6 = bitcast i8* %5 to i8**
  %7 = load i8*, i8** %6, align 8
  %8 = icmp ule i8* %7, %0
  %9 = and i32 %2, 268435456
  %10 = icmp eq i32 %9, 0
  %11 = or i1 %10, %8
  br i1 %11, label %14, label %12

12:                                               ; preds = %4
  %13 = bitcast i8* %3 to i32*
  store i32 0, i32* %13, align 8
  br label %14

14:                                               ; preds = %4, %12
  %15 = icmp eq i8* %7, %0
  %16 = and i32 %2, 8192
  %17 = icmp eq i32 %16, 0
  %18 = and i1 %17, %15
  br i1 %18, label %19, label %21

19:                                               ; preds = %14
  %20 = bitcast i8* %3 to i32*
  store i32 1, i32* %20, align 8
  br label %21

21:                                               ; preds = %19, %14
  ret i32 1
}

; Function Attrs: nofree nounwind readonly
declare i32 @bcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #6

attributes #0 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind readonly }
attributes #7 = { nounwind }
attributes #8 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
