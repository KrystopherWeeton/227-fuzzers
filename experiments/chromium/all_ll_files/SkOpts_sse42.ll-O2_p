; ModuleID = '../../third_party/skia/src/opts/SkOpts_sse42.cpp'
source_filename = "../../third_party/skia/src/opts/SkOpts_sse42.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

$_ZN5sse427hash_fnEPKvmj = comdat any

@_ZN6SkOpts7hash_fnE = external local_unnamed_addr global i32 (i8*, i64, i32)*, align 8

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN6SkOpts10Init_sse42Ev() local_unnamed_addr #0 {
  store i32 (i8*, i64, i32)* @_ZN5sse427hash_fnEPKvmj, i32 (i8*, i64, i32)** @_ZN6SkOpts7hash_fnE, align 8
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZN5sse427hash_fnEPKvmj(i8*, i64, i32) #1 comdat {
  %4 = icmp ugt i64 %1, 23
  br i1 %4, label %5, label %35

5:                                                ; preds = %3, %5
  %6 = phi i32 [ %27, %5 ], [ %2, %3 ]
  %7 = phi i32 [ %21, %5 ], [ %2, %3 ]
  %8 = phi i32 [ %15, %5 ], [ %2, %3 ]
  %9 = phi i8* [ %28, %5 ], [ %0, %3 ]
  %10 = phi i64 [ %29, %5 ], [ %1, %3 ]
  %11 = bitcast i8* %9 to i64*
  %12 = load i64, i64* %11, align 1
  %13 = zext i32 %8 to i64
  %14 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %13, i64 %12) #3
  %15 = trunc i64 %14 to i32
  %16 = getelementptr inbounds i8, i8* %9, i64 8
  %17 = bitcast i8* %16 to i64*
  %18 = load i64, i64* %17, align 1
  %19 = zext i32 %7 to i64
  %20 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %19, i64 %18) #3
  %21 = trunc i64 %20 to i32
  %22 = getelementptr inbounds i8, i8* %9, i64 16
  %23 = bitcast i8* %22 to i64*
  %24 = load i64, i64* %23, align 1
  %25 = zext i32 %6 to i64
  %26 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %25, i64 %24) #3
  %27 = trunc i64 %26 to i32
  %28 = getelementptr inbounds i8, i8* %9, i64 24
  %29 = add i64 %10, -24
  %30 = icmp ugt i64 %29, 23
  br i1 %30, label %5, label %31

31:                                               ; preds = %5
  %32 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %20, i64 %26) #3
  %33 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %14, i64 %32) #3
  %34 = trunc i64 %33 to i32
  br label %35

35:                                               ; preds = %31, %3
  %36 = phi i64 [ %29, %31 ], [ %1, %3 ]
  %37 = phi i32 [ %34, %31 ], [ %2, %3 ]
  %38 = phi i8* [ %28, %31 ], [ %0, %3 ]
  %39 = icmp ugt i64 %36, 7
  br i1 %39, label %40, label %76

40:                                               ; preds = %35
  %41 = add nsw i64 %36, -8
  %42 = and i64 %41, -8
  %43 = add nuw nsw i64 %42, 8
  %44 = getelementptr i8, i8* %38, i64 %43
  %45 = add i64 %36, -8
  %46 = lshr i64 %45, 3
  %47 = add nuw nsw i64 %46, 1
  %48 = and i64 %47, 7
  %49 = icmp eq i64 %48, 0
  br i1 %49, label %66, label %50

50:                                               ; preds = %40, %50
  %51 = phi i8* [ %60, %50 ], [ %38, %40 ]
  %52 = phi i32 [ %59, %50 ], [ %37, %40 ]
  %53 = phi i64 [ %61, %50 ], [ %36, %40 ]
  %54 = phi i64 [ %62, %50 ], [ %48, %40 ]
  %55 = bitcast i8* %51 to i64*
  %56 = load i64, i64* %55, align 1
  %57 = zext i32 %52 to i64
  %58 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %57, i64 %56) #3
  %59 = trunc i64 %58 to i32
  %60 = getelementptr inbounds i8, i8* %51, i64 8
  %61 = add i64 %53, -8
  %62 = add i64 %54, -1
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %50, !llvm.loop !2

64:                                               ; preds = %50
  %65 = trunc i64 %58 to i32
  br label %66

66:                                               ; preds = %40, %64
  %67 = phi i8* [ %38, %40 ], [ %60, %64 ]
  %68 = phi i32 [ %37, %40 ], [ %65, %64 ]
  %69 = phi i64 [ %36, %40 ], [ %61, %64 ]
  %70 = phi i64 [ undef, %40 ], [ %58, %64 ]
  %71 = icmp ult i64 %45, 56
  br i1 %71, label %72, label %102

72:                                               ; preds = %102, %66
  %73 = phi i64 [ %70, %66 ], [ %137, %102 ]
  %74 = trunc i64 %73 to i32
  %75 = sub i64 %41, %42
  br label %76

76:                                               ; preds = %72, %35
  %77 = phi i64 [ %75, %72 ], [ %36, %35 ]
  %78 = phi i32 [ %74, %72 ], [ %37, %35 ]
  %79 = phi i8* [ %44, %72 ], [ %38, %35 ]
  %80 = icmp eq i64 %77, 0
  br i1 %80, label %172, label %81

81:                                               ; preds = %76
  %82 = add i64 %77, -1
  %83 = and i64 %77, 7
  %84 = icmp eq i64 %83, 0
  br i1 %84, label %96, label %85

85:                                               ; preds = %81, %85
  %86 = phi i8* [ %92, %85 ], [ %79, %81 ]
  %87 = phi i32 [ %91, %85 ], [ %78, %81 ]
  %88 = phi i64 [ %93, %85 ], [ %77, %81 ]
  %89 = phi i64 [ %94, %85 ], [ %83, %81 ]
  %90 = load i8, i8* %86, align 1
  %91 = tail call i32 @llvm.x86.sse42.crc32.32.8(i32 %87, i8 %90) #3
  %92 = getelementptr inbounds i8, i8* %86, i64 1
  %93 = add i64 %88, -1
  %94 = add i64 %89, -1
  %95 = icmp eq i64 %94, 0
  br i1 %95, label %96, label %85, !llvm.loop !4

96:                                               ; preds = %85, %81
  %97 = phi i32 [ undef, %81 ], [ %91, %85 ]
  %98 = phi i8* [ %79, %81 ], [ %92, %85 ]
  %99 = phi i32 [ %78, %81 ], [ %91, %85 ]
  %100 = phi i64 [ %77, %81 ], [ %93, %85 ]
  %101 = icmp ult i64 %82, 7
  br i1 %101, label %172, label %142

102:                                              ; preds = %66, %102
  %103 = phi i8* [ %139, %102 ], [ %67, %66 ]
  %104 = phi i32 [ %138, %102 ], [ %68, %66 ]
  %105 = phi i64 [ %140, %102 ], [ %69, %66 ]
  %106 = bitcast i8* %103 to i64*
  %107 = load i64, i64* %106, align 1
  %108 = zext i32 %104 to i64
  %109 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %108, i64 %107) #3
  %110 = getelementptr inbounds i8, i8* %103, i64 8
  %111 = bitcast i8* %110 to i64*
  %112 = load i64, i64* %111, align 1
  %113 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %109, i64 %112) #3
  %114 = getelementptr inbounds i8, i8* %103, i64 16
  %115 = bitcast i8* %114 to i64*
  %116 = load i64, i64* %115, align 1
  %117 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %113, i64 %116) #3
  %118 = getelementptr inbounds i8, i8* %103, i64 24
  %119 = bitcast i8* %118 to i64*
  %120 = load i64, i64* %119, align 1
  %121 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %117, i64 %120) #3
  %122 = getelementptr inbounds i8, i8* %103, i64 32
  %123 = bitcast i8* %122 to i64*
  %124 = load i64, i64* %123, align 1
  %125 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %121, i64 %124) #3
  %126 = getelementptr inbounds i8, i8* %103, i64 40
  %127 = bitcast i8* %126 to i64*
  %128 = load i64, i64* %127, align 1
  %129 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %125, i64 %128) #3
  %130 = getelementptr inbounds i8, i8* %103, i64 48
  %131 = bitcast i8* %130 to i64*
  %132 = load i64, i64* %131, align 1
  %133 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %129, i64 %132) #3
  %134 = getelementptr inbounds i8, i8* %103, i64 56
  %135 = bitcast i8* %134 to i64*
  %136 = load i64, i64* %135, align 1
  %137 = tail call i64 @llvm.x86.sse42.crc32.64.64(i64 %133, i64 %136) #3
  %138 = trunc i64 %137 to i32
  %139 = getelementptr inbounds i8, i8* %103, i64 64
  %140 = add i64 %105, -64
  %141 = icmp ugt i64 %140, 7
  br i1 %141, label %102, label %72

142:                                              ; preds = %96, %142
  %143 = phi i8* [ %169, %142 ], [ %98, %96 ]
  %144 = phi i32 [ %168, %142 ], [ %99, %96 ]
  %145 = phi i64 [ %170, %142 ], [ %100, %96 ]
  %146 = load i8, i8* %143, align 1
  %147 = tail call i32 @llvm.x86.sse42.crc32.32.8(i32 %144, i8 %146) #3
  %148 = getelementptr inbounds i8, i8* %143, i64 1
  %149 = load i8, i8* %148, align 1
  %150 = tail call i32 @llvm.x86.sse42.crc32.32.8(i32 %147, i8 %149) #3
  %151 = getelementptr inbounds i8, i8* %143, i64 2
  %152 = load i8, i8* %151, align 1
  %153 = tail call i32 @llvm.x86.sse42.crc32.32.8(i32 %150, i8 %152) #3
  %154 = getelementptr inbounds i8, i8* %143, i64 3
  %155 = load i8, i8* %154, align 1
  %156 = tail call i32 @llvm.x86.sse42.crc32.32.8(i32 %153, i8 %155) #3
  %157 = getelementptr inbounds i8, i8* %143, i64 4
  %158 = load i8, i8* %157, align 1
  %159 = tail call i32 @llvm.x86.sse42.crc32.32.8(i32 %156, i8 %158) #3
  %160 = getelementptr inbounds i8, i8* %143, i64 5
  %161 = load i8, i8* %160, align 1
  %162 = tail call i32 @llvm.x86.sse42.crc32.32.8(i32 %159, i8 %161) #3
  %163 = getelementptr inbounds i8, i8* %143, i64 6
  %164 = load i8, i8* %163, align 1
  %165 = tail call i32 @llvm.x86.sse42.crc32.32.8(i32 %162, i8 %164) #3
  %166 = getelementptr inbounds i8, i8* %143, i64 7
  %167 = load i8, i8* %166, align 1
  %168 = tail call i32 @llvm.x86.sse42.crc32.32.8(i32 %165, i8 %167) #3
  %169 = getelementptr inbounds i8, i8* %143, i64 8
  %170 = add i64 %145, -8
  %171 = icmp eq i64 %170, 0
  br i1 %171, label %172, label %142

172:                                              ; preds = %96, %142, %76
  %173 = phi i32 [ %78, %76 ], [ %97, %96 ], [ %168, %142 ]
  ret i32 %173
}

; Function Attrs: nounwind readnone
declare i64 @llvm.x86.sse42.crc32.64.64(i64, i64) #2

; Function Attrs: nounwind readnone
declare i32 @llvm.x86.sse42.crc32.32.8(i32, i8) #2

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
