; ModuleID = '../../third_party/opus/src/src/opus_projection_encoder.c'
source_filename = "../../third_party/opus/src/src/opus_projection_encoder.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.MappingMatrix = type { i32, i32, i32 }
%struct.OpusProjectionEncoder = type { i32, i32 }
%struct.OpusMSEncoder = type { %struct.ChannelLayout, i32, i32, i32, i32, i32, i32 }
%struct.ChannelLayout = type { i32, i32, i32, [256 x i8] }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@mapping_matrix_foa_mixing = external local_unnamed_addr constant %struct.MappingMatrix, align 4
@mapping_matrix_foa_demixing = external local_unnamed_addr constant %struct.MappingMatrix, align 4
@mapping_matrix_soa_mixing = external local_unnamed_addr constant %struct.MappingMatrix, align 4
@mapping_matrix_soa_demixing = external local_unnamed_addr constant %struct.MappingMatrix, align 4
@mapping_matrix_toa_mixing = external local_unnamed_addr constant %struct.MappingMatrix, align 4
@mapping_matrix_toa_demixing = external local_unnamed_addr constant %struct.MappingMatrix, align 4
@mapping_matrix_foa_mixing_data = external constant [36 x i16], align 16
@mapping_matrix_soa_mixing_data = external constant [121 x i16], align 16
@mapping_matrix_toa_mixing_data = external constant [324 x i16], align 16
@mapping_matrix_foa_demixing_data = external constant [36 x i16], align 16
@mapping_matrix_soa_demixing_data = external constant [121 x i16], align 16
@mapping_matrix_toa_demixing_data = external constant [324 x i16], align 16
@switch.table.opus_projection_ambisonics_encoder_get_size = private unnamed_addr constant [3 x i32*] [i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_foa_mixing, i64 0, i32 0), i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_soa_mixing, i64 0, i32 0), i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_toa_mixing, i64 0, i32 0)], align 8
@switch.table.opus_projection_ambisonics_encoder_get_size.1 = private unnamed_addr constant [3 x i32*] [i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_foa_mixing, i64 0, i32 1), i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_soa_mixing, i64 0, i32 1), i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_toa_mixing, i64 0, i32 1)], align 8
@switch.table.opus_projection_ambisonics_encoder_get_size.2 = private unnamed_addr constant [3 x i32*] [i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_foa_demixing, i64 0, i32 0), i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_soa_demixing, i64 0, i32 0), i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_toa_demixing, i64 0, i32 0)], align 8
@switch.table.opus_projection_ambisonics_encoder_get_size.3 = private unnamed_addr constant [3 x i32*] [i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_foa_demixing, i64 0, i32 1), i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_soa_demixing, i64 0, i32 1), i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_toa_demixing, i64 0, i32 1)], align 8

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_projection_ambisonics_encoder_get_size(i32, i32) local_unnamed_addr #0 {
  %3 = icmp ne i32 %1, 3
  %4 = add i32 %0, -1
  %5 = icmp ugt i32 %4, 226
  %6 = or i1 %3, %5
  br i1 %6, label %49, label %7

7:                                                ; preds = %2
  %8 = tail call i32 @isqrt32(i32 %0) #3
  %9 = mul nsw i32 %8, %8
  %10 = sub nsw i32 %0, %9
  %11 = and i32 %10, -3
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %49

13:                                               ; preds = %7
  %14 = add nuw nsw i32 %0, 1
  %15 = sdiv i32 %14, 2
  %16 = lshr i32 %0, 1
  %17 = and i32 %16, 127
  %18 = add i32 %8, -2
  %19 = icmp ult i32 %18, 3
  br i1 %19, label %20, label %49

20:                                               ; preds = %13
  %21 = sext i32 %18 to i64
  %22 = getelementptr inbounds [3 x i32*], [3 x i32*]* @switch.table.opus_projection_ambisonics_encoder_get_size, i64 0, i64 %21
  %23 = load i32*, i32** %22, align 8
  %24 = sext i32 %18 to i64
  %25 = getelementptr inbounds [3 x i32*], [3 x i32*]* @switch.table.opus_projection_ambisonics_encoder_get_size.1, i64 0, i64 %24
  %26 = load i32*, i32** %25, align 8
  %27 = sext i32 %18 to i64
  %28 = getelementptr inbounds [3 x i32*], [3 x i32*]* @switch.table.opus_projection_ambisonics_encoder_get_size.2, i64 0, i64 %27
  %29 = load i32*, i32** %28, align 8
  %30 = sext i32 %18 to i64
  %31 = getelementptr inbounds [3 x i32*], [3 x i32*]* @switch.table.opus_projection_ambisonics_encoder_get_size.3, i64 0, i64 %30
  %32 = load i32*, i32** %31, align 8
  %33 = load i32, i32* %32, align 4
  %34 = load i32, i32* %29, align 4
  %35 = load i32, i32* %26, align 4
  %36 = load i32, i32* %23, align 4
  %37 = tail call i32 @mapping_matrix_get_size(i32 %36, i32 %35) #3
  %38 = icmp eq i32 %37, 0
  br i1 %38, label %49, label %39

39:                                               ; preds = %20
  %40 = tail call i32 @mapping_matrix_get_size(i32 %34, i32 %33) #3
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %49, label %42

42:                                               ; preds = %39
  %43 = tail call i32 @opus_multistream_encoder_get_size(i32 %15, i32 %17) #3
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %49, label %45

45:                                               ; preds = %42
  %46 = add nsw i32 %37, 8
  %47 = add nsw i32 %46, %40
  %48 = add nsw i32 %47, %43
  br label %49

49:                                               ; preds = %13, %7, %2, %42, %39, %20, %45
  %50 = phi i32 [ %48, %45 ], [ 0, %13 ], [ 0, %20 ], [ 0, %39 ], [ 0, %42 ], [ 0, %2 ], [ 0, %7 ]
  ret i32 %50
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i32 @mapping_matrix_get_size(i32, i32) local_unnamed_addr #2

declare i32 @opus_multistream_encoder_get_size(i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_projection_ambisonics_encoder_init(%struct.OpusProjectionEncoder*, i32, i32, i32, i32*, i32*, i32) local_unnamed_addr #0 {
  %8 = alloca [255 x i8], align 16
  %9 = getelementptr inbounds [255 x i8], [255 x i8]* %8, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 255, i8* nonnull %9) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %9, i8 -86, i64 255, i1 false)
  %10 = icmp eq i32* %4, null
  %11 = icmp eq i32* %5, null
  %12 = or i1 %10, %11
  br i1 %12, label %176, label %13

13:                                               ; preds = %7
  %14 = icmp ne i32 %3, 3
  %15 = add i32 %2, -1
  %16 = icmp ugt i32 %15, 226
  %17 = or i1 %14, %16
  br i1 %17, label %176, label %18

18:                                               ; preds = %13
  %19 = tail call i32 @isqrt32(i32 %2) #3
  %20 = mul nsw i32 %19, %19
  %21 = sub nsw i32 %2, %20
  %22 = and i32 %21, -3
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %176

24:                                               ; preds = %18
  %25 = add nuw nsw i32 %2, 1
  %26 = sdiv i32 %25, 2
  store i32 %26, i32* %4, align 4
  %27 = lshr i32 %2, 1
  %28 = and i32 %27, 127
  store i32 %28, i32* %5, align 4
  %29 = getelementptr inbounds %struct.OpusProjectionEncoder, %struct.OpusProjectionEncoder* %0, i64 1
  %30 = bitcast %struct.OpusProjectionEncoder* %29 to %struct.MappingMatrix*
  switch i32 %19, label %176 [
    i32 2, label %31
    i32 3, label %35
    i32 4, label %39
  ]

31:                                               ; preds = %24
  %32 = load i32, i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_foa_mixing, i64 0, i32 0), align 4
  %33 = load i32, i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_foa_mixing, i64 0, i32 1), align 4
  %34 = load i32, i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_foa_mixing, i64 0, i32 2), align 4
  tail call void @mapping_matrix_init(%struct.MappingMatrix* %30, i32 %32, i32 %33, i32 %34, i16* getelementptr inbounds ([36 x i16], [36 x i16]* @mapping_matrix_foa_mixing_data, i64 0, i64 0), i32 72) #3
  br label %43

35:                                               ; preds = %24
  %36 = load i32, i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_soa_mixing, i64 0, i32 0), align 4
  %37 = load i32, i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_soa_mixing, i64 0, i32 1), align 4
  %38 = load i32, i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_soa_mixing, i64 0, i32 2), align 4
  tail call void @mapping_matrix_init(%struct.MappingMatrix* %30, i32 %36, i32 %37, i32 %38, i16* getelementptr inbounds ([121 x i16], [121 x i16]* @mapping_matrix_soa_mixing_data, i64 0, i64 0), i32 242) #3
  br label %43

39:                                               ; preds = %24
  %40 = load i32, i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_toa_mixing, i64 0, i32 0), align 4
  %41 = load i32, i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_toa_mixing, i64 0, i32 1), align 4
  %42 = load i32, i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_toa_mixing, i64 0, i32 2), align 4
  tail call void @mapping_matrix_init(%struct.MappingMatrix* %30, i32 %40, i32 %41, i32 %42, i16* getelementptr inbounds ([324 x i16], [324 x i16]* @mapping_matrix_toa_mixing_data, i64 0, i64 0), i32 648) #3
  br label %43

43:                                               ; preds = %35, %39, %31
  %44 = getelementptr inbounds %struct.OpusProjectionEncoder, %struct.OpusProjectionEncoder* %29, i64 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %struct.OpusProjectionEncoder, %struct.OpusProjectionEncoder* %0, i64 1, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = tail call i32 @mapping_matrix_get_size(i32 %45, i32 %47) #3
  %49 = getelementptr inbounds %struct.OpusProjectionEncoder, %struct.OpusProjectionEncoder* %0, i64 0, i32 0
  store i32 %48, i32* %49, align 4
  %50 = icmp eq i32 %48, 0
  br i1 %50, label %176, label %51

51:                                               ; preds = %43
  %52 = bitcast %struct.OpusProjectionEncoder* %0 to i8*
  %53 = add i32 %48, 15
  %54 = and i32 %53, -8
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %52, i64 %55
  %57 = bitcast i8* %56 to %struct.MappingMatrix*
  switch i32 %19, label %176 [
    i32 2, label %58
    i32 3, label %62
    i32 4, label %66
  ]

58:                                               ; preds = %51
  %59 = load i32, i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_foa_demixing, i64 0, i32 0), align 4
  %60 = load i32, i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_foa_demixing, i64 0, i32 1), align 4
  %61 = load i32, i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_foa_demixing, i64 0, i32 2), align 4
  tail call void @mapping_matrix_init(%struct.MappingMatrix* %57, i32 %59, i32 %60, i32 %61, i16* getelementptr inbounds ([36 x i16], [36 x i16]* @mapping_matrix_foa_demixing_data, i64 0, i64 0), i32 72) #3
  br label %70

62:                                               ; preds = %51
  %63 = load i32, i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_soa_demixing, i64 0, i32 0), align 4
  %64 = load i32, i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_soa_demixing, i64 0, i32 1), align 4
  %65 = load i32, i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_soa_demixing, i64 0, i32 2), align 4
  tail call void @mapping_matrix_init(%struct.MappingMatrix* %57, i32 %63, i32 %64, i32 %65, i16* getelementptr inbounds ([121 x i16], [121 x i16]* @mapping_matrix_soa_demixing_data, i64 0, i64 0), i32 242) #3
  br label %70

66:                                               ; preds = %51
  %67 = load i32, i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_toa_demixing, i64 0, i32 0), align 4
  %68 = load i32, i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_toa_demixing, i64 0, i32 1), align 4
  %69 = load i32, i32* getelementptr inbounds (%struct.MappingMatrix, %struct.MappingMatrix* @mapping_matrix_toa_demixing, i64 0, i32 2), align 4
  tail call void @mapping_matrix_init(%struct.MappingMatrix* %57, i32 %67, i32 %68, i32 %69, i16* getelementptr inbounds ([324 x i16], [324 x i16]* @mapping_matrix_toa_demixing_data, i64 0, i64 0), i32 648) #3
  br label %70

70:                                               ; preds = %62, %66, %58
  %71 = bitcast i8* %56 to i32*
  %72 = load i32, i32* %71, align 4
  %73 = getelementptr inbounds i8, i8* %56, i64 4
  %74 = bitcast i8* %73 to i32*
  %75 = load i32, i32* %74, align 4
  %76 = tail call i32 @mapping_matrix_get_size(i32 %72, i32 %75) #3
  %77 = getelementptr inbounds %struct.OpusProjectionEncoder, %struct.OpusProjectionEncoder* %0, i64 0, i32 1
  store i32 %76, i32* %77, align 4
  %78 = icmp eq i32 %76, 0
  br i1 %78, label %176, label %79

79:                                               ; preds = %70
  %80 = load i32, i32* %4, align 4
  %81 = load i32, i32* %5, align 4
  %82 = add nsw i32 %81, %80
  %83 = load i32, i32* %44, align 4
  %84 = icmp sgt i32 %82, %83
  br i1 %84, label %176, label %85

85:                                               ; preds = %79
  %86 = load i32, i32* %46, align 4
  %87 = icmp slt i32 %86, %2
  br i1 %87, label %176, label %88

88:                                               ; preds = %85
  %89 = load i32, i32* %71, align 4
  %90 = icmp slt i32 %89, %2
  br i1 %90, label %176, label %91

91:                                               ; preds = %88
  %92 = load i32, i32* %74, align 4
  %93 = icmp sgt i32 %82, %92
  br i1 %93, label %176, label %94

94:                                               ; preds = %91
  %95 = zext i32 %2 to i64
  %96 = icmp ult i32 %2, 32
  br i1 %96, label %159, label %97

97:                                               ; preds = %94
  %98 = and i64 %95, 4294967264
  %99 = add nsw i64 %98, -32
  %100 = lshr exact i64 %99, 5
  %101 = add nuw nsw i64 %100, 1
  %102 = and i64 %101, 3
  %103 = icmp ult i64 %99, 96
  br i1 %103, label %140, label %104

104:                                              ; preds = %97
  %105 = sub nsw i64 %101, %102
  br label %106

106:                                              ; preds = %106, %104
  %107 = phi i64 [ 0, %104 ], [ %136, %106 ]
  %108 = phi <16 x i8> [ <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, %104 ], [ %137, %106 ]
  %109 = phi i64 [ %105, %104 ], [ %138, %106 ]
  %110 = add <16 x i8> %108, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %111 = getelementptr inbounds [255 x i8], [255 x i8]* %8, i64 0, i64 %107
  %112 = bitcast i8* %111 to <16 x i8>*
  store <16 x i8> %108, <16 x i8>* %112, align 16
  %113 = getelementptr inbounds i8, i8* %111, i64 16
  %114 = bitcast i8* %113 to <16 x i8>*
  store <16 x i8> %110, <16 x i8>* %114, align 16
  %115 = or i64 %107, 32
  %116 = add <16 x i8> %108, <i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32>
  %117 = add <16 x i8> %108, <i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48, i8 48>
  %118 = getelementptr inbounds [255 x i8], [255 x i8]* %8, i64 0, i64 %115
  %119 = bitcast i8* %118 to <16 x i8>*
  store <16 x i8> %116, <16 x i8>* %119, align 16
  %120 = getelementptr inbounds i8, i8* %118, i64 16
  %121 = bitcast i8* %120 to <16 x i8>*
  store <16 x i8> %117, <16 x i8>* %121, align 16
  %122 = or i64 %107, 64
  %123 = add <16 x i8> %108, <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>
  %124 = add <16 x i8> %108, <i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80, i8 80>
  %125 = getelementptr inbounds [255 x i8], [255 x i8]* %8, i64 0, i64 %122
  %126 = bitcast i8* %125 to <16 x i8>*
  store <16 x i8> %123, <16 x i8>* %126, align 16
  %127 = getelementptr inbounds i8, i8* %125, i64 16
  %128 = bitcast i8* %127 to <16 x i8>*
  store <16 x i8> %124, <16 x i8>* %128, align 16
  %129 = or i64 %107, 96
  %130 = add <16 x i8> %108, <i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96, i8 96>
  %131 = add <16 x i8> %108, <i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112, i8 112>
  %132 = getelementptr inbounds [255 x i8], [255 x i8]* %8, i64 0, i64 %129
  %133 = bitcast i8* %132 to <16 x i8>*
  store <16 x i8> %130, <16 x i8>* %133, align 16
  %134 = getelementptr inbounds i8, i8* %132, i64 16
  %135 = bitcast i8* %134 to <16 x i8>*
  store <16 x i8> %131, <16 x i8>* %135, align 16
  %136 = add i64 %107, 128
  %137 = xor <16 x i8> %108, <i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128, i8 -128>
  %138 = add i64 %109, -4
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %106, !llvm.loop !2

140:                                              ; preds = %106, %97
  %141 = phi i64 [ 0, %97 ], [ %136, %106 ]
  %142 = phi <16 x i8> [ <i8 0, i8 1, i8 2, i8 3, i8 4, i8 5, i8 6, i8 7, i8 8, i8 9, i8 10, i8 11, i8 12, i8 13, i8 14, i8 15>, %97 ], [ %137, %106 ]
  %143 = icmp eq i64 %102, 0
  br i1 %143, label %157, label %144

144:                                              ; preds = %140, %144
  %145 = phi i64 [ %153, %144 ], [ %141, %140 ]
  %146 = phi <16 x i8> [ %154, %144 ], [ %142, %140 ]
  %147 = phi i64 [ %155, %144 ], [ %102, %140 ]
  %148 = add <16 x i8> %146, <i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16, i8 16>
  %149 = getelementptr inbounds [255 x i8], [255 x i8]* %8, i64 0, i64 %145
  %150 = bitcast i8* %149 to <16 x i8>*
  store <16 x i8> %146, <16 x i8>* %150, align 16
  %151 = getelementptr inbounds i8, i8* %149, i64 16
  %152 = bitcast i8* %151 to <16 x i8>*
  store <16 x i8> %148, <16 x i8>* %152, align 16
  %153 = add i64 %145, 32
  %154 = add <16 x i8> %146, <i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32, i8 32>
  %155 = add i64 %147, -1
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %157, label %144, !llvm.loop !4

157:                                              ; preds = %144, %140
  %158 = icmp eq i64 %98, %95
  br i1 %158, label %167, label %159

159:                                              ; preds = %157, %94
  %160 = phi i64 [ 0, %94 ], [ %98, %157 ]
  br label %161

161:                                              ; preds = %159, %161
  %162 = phi i64 [ %165, %161 ], [ %160, %159 ]
  %163 = trunc i64 %162 to i8
  %164 = getelementptr inbounds [255 x i8], [255 x i8]* %8, i64 0, i64 %162
  store i8 %163, i8* %164, align 1
  %165 = add nuw nsw i64 %162, 1
  %166 = icmp eq i64 %165, %95
  br i1 %166, label %167, label %161, !llvm.loop !6

167:                                              ; preds = %161, %157
  %168 = load i32, i32* %49, align 4
  %169 = add i32 %76, 15
  %170 = add i32 %169, %168
  %171 = and i32 %170, -8
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds i8, i8* %52, i64 %172
  %174 = bitcast i8* %173 to %struct.OpusMSEncoder*
  %175 = call i32 @opus_multistream_encoder_init(%struct.OpusMSEncoder* %174, i32 %1, i32 %2, i32 %80, i32 %81, i8* nonnull %9, i32 %6) #3
  br label %176

176:                                              ; preds = %18, %13, %79, %85, %88, %91, %70, %51, %43, %24, %7, %167
  %177 = phi i32 [ %175, %167 ], [ -1, %7 ], [ -1, %24 ], [ -1, %43 ], [ -1, %51 ], [ -1, %70 ], [ -1, %91 ], [ -1, %88 ], [ -1, %85 ], [ -1, %79 ], [ -1, %13 ], [ -1, %18 ]
  call void @llvm.lifetime.end.p0i8(i64 255, i8* nonnull %9) #3
  ret i32 %177
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @mapping_matrix_init(%struct.MappingMatrix*, i32, i32, i32, i16*, i32) local_unnamed_addr #2

declare i32 @opus_multistream_encoder_init(%struct.OpusMSEncoder*, i32, i32, i32, i32, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %struct.OpusProjectionEncoder* @opus_projection_ambisonics_encoder_create(i32, i32, i32, i32*, i32*, i32, i32*) local_unnamed_addr #0 {
  %8 = tail call i32 @opus_projection_ambisonics_encoder_get_size(i32 %1, i32 %2)
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %13

10:                                               ; preds = %7
  %11 = icmp eq i32* %6, null
  br i1 %11, label %29, label %12

12:                                               ; preds = %10
  store i32 -7, i32* %6, align 4
  br label %29

13:                                               ; preds = %7
  %14 = sext i32 %8 to i64
  %15 = tail call noalias i8* @malloc(i64 %14) #3
  %16 = bitcast i8* %15 to %struct.OpusProjectionEncoder*
  %17 = icmp eq i8* %15, null
  br i1 %17, label %18, label %21

18:                                               ; preds = %13
  %19 = icmp eq i32* %6, null
  br i1 %19, label %29, label %20

20:                                               ; preds = %18
  store i32 -7, i32* %6, align 4
  br label %29

21:                                               ; preds = %13
  %22 = tail call i32 @opus_projection_ambisonics_encoder_init(%struct.OpusProjectionEncoder* nonnull %16, i32 %0, i32 %1, i32 %2, i32* %3, i32* %4, i32 %5)
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %25, label %24

24:                                               ; preds = %21
  tail call void @free(i8* nonnull %15) #3
  br label %25

25:                                               ; preds = %21, %24
  %26 = phi %struct.OpusProjectionEncoder* [ null, %24 ], [ %16, %21 ]
  %27 = icmp eq i32* %6, null
  br i1 %27, label %29, label %28

28:                                               ; preds = %25
  store i32 %22, i32* %6, align 4
  br label %29

29:                                               ; preds = %28, %25, %20, %18, %12, %10
  %30 = phi %struct.OpusProjectionEncoder* [ null, %10 ], [ null, %12 ], [ null, %18 ], [ null, %20 ], [ %26, %25 ], [ %26, %28 ]
  ret %struct.OpusProjectionEncoder* %30
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_projection_encode(%struct.OpusProjectionEncoder*, i16*, i32, i8*, i32) local_unnamed_addr #0 {
  %6 = bitcast %struct.OpusProjectionEncoder* %0 to i8*
  %7 = getelementptr inbounds %struct.OpusProjectionEncoder, %struct.OpusProjectionEncoder* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.OpusProjectionEncoder, %struct.OpusProjectionEncoder* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %8, 15
  %12 = add i32 %11, %10
  %13 = and i32 %12, -8
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %6, i64 %14
  %16 = bitcast i8* %15 to %struct.OpusMSEncoder*
  %17 = bitcast i16* %1 to i8*
  %18 = getelementptr inbounds %struct.OpusProjectionEncoder, %struct.OpusProjectionEncoder* %0, i64 1
  %19 = bitcast %struct.OpusProjectionEncoder* %18 to i8*
  %20 = tail call i32 @opus_multistream_encode_native(%struct.OpusMSEncoder* %16, void (float*, i32, i8*, i32, i32, i32, i8*)* nonnull @opus_projection_copy_channel_in_short, i8* %17, i32 %2, i8* %3, i32 %4, i32 16, void (i8*, float*, i32, i32, i32, i32, i32)* nonnull @downmix_int, i32 0, i8* %19) #3
  ret i32 %20
}

declare i32 @opus_multistream_encode_native(%struct.OpusMSEncoder*, void (float*, i32, i8*, i32, i32, i32, i8*)*, i8*, i32, i8*, i32, i32, void (i8*, float*, i32, i32, i32, i32, i32)*, i32, i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal void @opus_projection_copy_channel_in_short(float*, i32, i8*, i32, i32, i32, i8*) #0 {
  %8 = bitcast i8* %6 to %struct.MappingMatrix*
  %9 = bitcast i8* %2 to i16*
  tail call void @mapping_matrix_multiply_channel_in_short(%struct.MappingMatrix* %8, i16* %9, i32 %3, float* %0, i32 %4, i32 %1, i32 %5) #3
  ret void
}

declare void @downmix_int(i8*, float*, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_projection_encode_float(%struct.OpusProjectionEncoder*, float*, i32, i8*, i32) local_unnamed_addr #0 {
  %6 = bitcast %struct.OpusProjectionEncoder* %0 to i8*
  %7 = getelementptr inbounds %struct.OpusProjectionEncoder, %struct.OpusProjectionEncoder* %0, i64 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %struct.OpusProjectionEncoder, %struct.OpusProjectionEncoder* %0, i64 0, i32 1
  %10 = load i32, i32* %9, align 4
  %11 = add i32 %8, 15
  %12 = add i32 %11, %10
  %13 = and i32 %12, -8
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %6, i64 %14
  %16 = bitcast i8* %15 to %struct.OpusMSEncoder*
  %17 = bitcast float* %1 to i8*
  %18 = getelementptr inbounds %struct.OpusProjectionEncoder, %struct.OpusProjectionEncoder* %0, i64 1
  %19 = bitcast %struct.OpusProjectionEncoder* %18 to i8*
  %20 = tail call i32 @opus_multistream_encode_native(%struct.OpusMSEncoder* %16, void (float*, i32, i8*, i32, i32, i32, i8*)* nonnull @opus_projection_copy_channel_in_float, i8* %17, i32 %2, i8* %3, i32 %4, i32 24, void (i8*, float*, i32, i32, i32, i32, i32)* nonnull @downmix_float, i32 1, i8* %19) #3
  ret i32 %20
}

; Function Attrs: nounwind ssp uwtable
define internal void @opus_projection_copy_channel_in_float(float*, i32, i8*, i32, i32, i32, i8*) #0 {
  %8 = bitcast i8* %6 to %struct.MappingMatrix*
  %9 = bitcast i8* %2 to float*
  tail call void @mapping_matrix_multiply_channel_in_float(%struct.MappingMatrix* %8, float* %9, i32 %3, float* %0, i32 %4, i32 %1, i32 %5) #3
  ret void
}

declare void @downmix_float(i8*, float*, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @opus_projection_encoder_destroy(%struct.OpusProjectionEncoder* nocapture) local_unnamed_addr #0 {
  %2 = bitcast %struct.OpusProjectionEncoder* %0 to i8*
  tail call void @free(i8* %2) #3
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opus_projection_encoder_ctl(%struct.OpusProjectionEncoder*, i32, ...) local_unnamed_addr #0 {
  %3 = alloca [1 x %struct.__va_list_tag], align 16
  %4 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %4) #3
  %5 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0, i32 0
  %6 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0, i32 2
  %7 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0, i32 3
  %8 = bitcast %struct.OpusProjectionEncoder* %0 to i8*
  %9 = getelementptr inbounds %struct.OpusProjectionEncoder, %struct.OpusProjectionEncoder* %0, i64 0, i32 0
  %10 = bitcast [1 x %struct.__va_list_tag]* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 24, i1 false)
  %11 = load i32, i32* %9, align 4
  %12 = getelementptr inbounds %struct.OpusProjectionEncoder, %struct.OpusProjectionEncoder* %0, i64 0, i32 1
  %13 = load i32, i32* %12, align 4
  %14 = add i32 %11, 15
  %15 = add i32 %14, %13
  %16 = and i32 %15, -8
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %8, i64 %17
  %19 = and i32 %14, -8
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %8, i64 %20
  %22 = bitcast i8* %21 to %struct.MappingMatrix*
  call void @llvm.va_start(i8* nonnull %4)
  switch i32 %1, label %150 [
    i32 6003, label %23
    i32 6001, label %51
    i32 6005, label %71
  ]

23:                                               ; preds = %2
  %24 = load i32, i32* %5, align 16
  %25 = icmp ult i32 %24, 41
  br i1 %25, label %26, label %31

26:                                               ; preds = %23
  %27 = load i8*, i8** %7, align 16
  %28 = sext i32 %24 to i64
  %29 = getelementptr i8, i8* %27, i64 %28
  %30 = add nuw nsw i32 %24, 8
  store i32 %30, i32* %5, align 16
  br label %34

31:                                               ; preds = %23
  %32 = load i8*, i8** %6, align 8
  %33 = getelementptr i8, i8* %32, i64 8
  store i8* %33, i8** %6, align 8
  br label %34

34:                                               ; preds = %31, %26
  %35 = phi i8* [ %29, %26 ], [ %32, %31 ]
  %36 = bitcast i8* %35 to i32**
  %37 = load i32*, i32** %36, align 8
  %38 = icmp eq i32* %37, null
  br i1 %38, label %154, label %39

39:                                               ; preds = %34
  %40 = bitcast i8* %18 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = getelementptr inbounds i8, i8* %18, i64 4
  %43 = bitcast i8* %42 to i32*
  %44 = load i32, i32* %43, align 4
  %45 = getelementptr inbounds i8, i8* %18, i64 8
  %46 = bitcast i8* %45 to i32*
  %47 = load i32, i32* %46, align 4
  %48 = add nsw i32 %47, %44
  %49 = shl i32 %41, 1
  %50 = mul i32 %49, %48
  store i32 %50, i32* %37, align 4
  br label %154

51:                                               ; preds = %2
  %52 = load i32, i32* %5, align 16
  %53 = icmp ult i32 %52, 41
  br i1 %53, label %54, label %59

54:                                               ; preds = %51
  %55 = load i8*, i8** %7, align 16
  %56 = sext i32 %52 to i64
  %57 = getelementptr i8, i8* %55, i64 %56
  %58 = add nuw nsw i32 %52, 8
  store i32 %58, i32* %5, align 16
  br label %62

59:                                               ; preds = %51
  %60 = load i8*, i8** %6, align 8
  %61 = getelementptr i8, i8* %60, i64 8
  store i8* %61, i8** %6, align 8
  br label %62

62:                                               ; preds = %59, %54
  %63 = phi i8* [ %57, %54 ], [ %60, %59 ]
  %64 = bitcast i8* %63 to i32**
  %65 = load i32*, i32** %64, align 8
  %66 = icmp eq i32* %65, null
  br i1 %66, label %154, label %67

67:                                               ; preds = %62
  %68 = getelementptr inbounds i8, i8* %21, i64 8
  %69 = bitcast i8* %68 to i32*
  %70 = load i32, i32* %69, align 4
  store i32 %70, i32* %65, align 4
  br label %154

71:                                               ; preds = %2
  %72 = getelementptr inbounds i8, i8* %18, i64 4
  %73 = bitcast i8* %72 to i32*
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds i8, i8* %18, i64 8
  %76 = bitcast i8* %75 to i32*
  %77 = load i32, i32* %76, align 4
  %78 = add i32 %77, %74
  %79 = bitcast i8* %18 to i32*
  %80 = load i32, i32* %79, align 4
  %81 = load i32, i32* %5, align 16
  %82 = icmp ult i32 %81, 41
  br i1 %82, label %88, label %83

83:                                               ; preds = %71
  %84 = load i8*, i8** %6, align 8
  %85 = getelementptr i8, i8* %84, i64 8
  store i8* %85, i8** %6, align 8
  %86 = bitcast i8* %84 to i8**
  %87 = load i8*, i8** %86, align 8
  br label %101

88:                                               ; preds = %71
  %89 = load i8*, i8** %7, align 16
  %90 = sext i32 %81 to i64
  %91 = getelementptr i8, i8* %89, i64 %90
  %92 = add nuw nsw i32 %81, 8
  store i32 %92, i32* %5, align 16
  %93 = bitcast i8* %91 to i8**
  %94 = load i8*, i8** %93, align 8
  %95 = icmp ult i32 %92, 41
  br i1 %95, label %96, label %101

96:                                               ; preds = %88
  %97 = load i8*, i8** %7, align 16
  %98 = sext i32 %92 to i64
  %99 = getelementptr i8, i8* %97, i64 %98
  %100 = add nuw nsw i32 %81, 16
  store i32 %100, i32* %5, align 16
  br label %105

101:                                              ; preds = %83, %88
  %102 = phi i8* [ %87, %83 ], [ %94, %88 ]
  %103 = load i8*, i8** %6, align 8
  %104 = getelementptr i8, i8* %103, i64 8
  store i8* %104, i8** %6, align 8
  br label %105

105:                                              ; preds = %101, %96
  %106 = phi i8* [ %94, %96 ], [ %102, %101 ]
  %107 = phi i8* [ %99, %96 ], [ %103, %101 ]
  %108 = icmp eq i8* %106, null
  br i1 %108, label %154, label %109

109:                                              ; preds = %105
  %110 = bitcast i8* %107 to i32*
  %111 = load i32, i32* %110, align 4
  %112 = call i16* @mapping_matrix_get_data(%struct.MappingMatrix* %22) #3
  %113 = shl i32 %80, 1
  %114 = mul i32 %113, %78
  %115 = icmp eq i32 %111, %114
  br i1 %115, label %116, label %154

116:                                              ; preds = %109
  %117 = icmp sgt i32 %78, 0
  br i1 %117, label %118, label %154

118:                                              ; preds = %116
  %119 = icmp sgt i32 %80, 0
  %120 = bitcast i8* %21 to i32*
  br i1 %119, label %121, label %154

121:                                              ; preds = %118, %146
  %122 = phi i32 [ %147, %146 ], [ 0, %118 ]
  %123 = phi i32 [ %148, %146 ], [ 0, %118 ]
  br label %124

124:                                              ; preds = %124, %121
  %125 = phi i32 [ %122, %121 ], [ %143, %124 ]
  %126 = phi i32 [ 0, %121 ], [ %144, %124 ]
  %127 = load i32, i32* %120, align 4
  %128 = mul nsw i32 %127, %123
  %129 = add nsw i32 %128, %126
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds i16, i16* %112, i64 %130
  %132 = load i16, i16* %131, align 2
  %133 = trunc i16 %132 to i8
  %134 = shl nsw i32 %125, 1
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds i8, i8* %106, i64 %135
  store i8 %133, i8* %136, align 1
  %137 = load i16, i16* %131, align 2
  %138 = lshr i16 %137, 8
  %139 = trunc i16 %138 to i8
  %140 = or i32 %134, 1
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds i8, i8* %106, i64 %141
  store i8 %139, i8* %142, align 1
  %143 = add nsw i32 %125, 1
  %144 = add nuw nsw i32 %126, 1
  %145 = icmp eq i32 %144, %80
  br i1 %145, label %146, label %124

146:                                              ; preds = %124
  %147 = add i32 %80, %122
  %148 = add nuw nsw i32 %123, 1
  %149 = icmp eq i32 %148, %78
  br i1 %149, label %154, label %121

150:                                              ; preds = %2
  %151 = bitcast i8* %18 to %struct.OpusMSEncoder*
  %152 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %3, i64 0, i64 0
  %153 = call i32 @opus_multistream_encoder_ctl_va_list(%struct.OpusMSEncoder* %151, i32 %1, %struct.__va_list_tag* nonnull %152) #3
  br label %154

154:                                              ; preds = %146, %34, %62, %105, %109, %150, %39, %67, %116, %118
  %155 = phi i32 [ %153, %150 ], [ 0, %39 ], [ 0, %67 ], [ 0, %116 ], [ 0, %118 ], [ -1, %109 ], [ -1, %105 ], [ -1, %62 ], [ -1, %34 ], [ 0, %146 ]
  call void @llvm.va_end(i8* nonnull %4)
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %4) #3
  ret i32 %155
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #3

declare i16* @mapping_matrix_get_data(%struct.MappingMatrix*) local_unnamed_addr #2

declare i32 @opus_multistream_encoder_ctl_va_list(%struct.OpusMSEncoder*, i32, %struct.__va_list_tag*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #3

declare i32 @isqrt32(i32) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #4

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #5

declare void @mapping_matrix_multiply_channel_in_short(%struct.MappingMatrix*, i16*, i32, float*, i32, i32, i32) local_unnamed_addr #2

declare void @mapping_matrix_multiply_channel_in_float(%struct.MappingMatrix*, float*, i32, float*, i32, i32, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.unroll.disable"}
!6 = distinct !{!6, !7, !3}
!7 = !{!"llvm.loop.unroll.runtime.disable"}
