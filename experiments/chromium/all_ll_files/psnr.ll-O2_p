; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/psnr.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/psnr.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_psnr_pkt = type { [4 x i32], [4 x i64], [4 x double] }

@vpx_mse16x16 = external local_unnamed_addr global i32 (i8*, i32, i8*, i32, i32*)*, align 8

; Function Attrs: nofree nounwind ssp uwtable
define hidden double @vpx_sse_to_psnr(double, double, double) local_unnamed_addr #0 {
  %4 = fcmp ogt double %2, 0.000000e+00
  br i1 %4, label %5, label %13

5:                                                ; preds = %3
  %6 = fmul double %0, %1
  %7 = fmul double %6, %1
  %8 = fdiv double %7, %2
  %9 = tail call double @log10(double %8) #5
  %10 = fmul double %9, 1.000000e+01
  %11 = fcmp ogt double %10, 1.000000e+02
  %12 = select i1 %11, double 1.000000e+02, double %10
  br label %13

13:                                               ; preds = %3, %5
  %14 = phi double [ %12, %5 ], [ 1.000000e+02, %3 ]
  ret double %14
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare double @log10(double) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i64 @vpx_get_y_sse(%struct.yv12_buffer_config* nocapture readonly, %struct.yv12_buffer_config* nocapture readonly) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 13
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 3
  %14 = load i32, i32* %13, align 4
  %15 = tail call fastcc i64 @get_sse(i8* %4, i32 %6, i8* %8, i32 %10, i32 %12, i32 %14)
  ret i64 %15
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @get_sse(i8*, i32, i8*, i32, i32, i32) unnamed_addr #3 {
  %7 = alloca i32, align 4
  %8 = srem i32 %4, 16
  %9 = sdiv i32 %4, 16
  %10 = srem i32 %5, 16
  %11 = sdiv i32 %5, 16
  %12 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  store i32 0, i32* %7, align 4
  %13 = icmp sgt i32 %8, 0
  br i1 %13, label %14, label %81

14:                                               ; preds = %6
  %15 = sub nsw i32 %4, %8
  %16 = sext i32 %15 to i64
  store i32 0, i32* %7, align 4
  %17 = icmp sgt i32 %5, 0
  br i1 %17, label %18, label %81

18:                                               ; preds = %14
  %19 = getelementptr inbounds i8, i8* %2, i64 %16
  %20 = getelementptr inbounds i8, i8* %0, i64 %16
  %21 = sext i32 %1 to i64
  %22 = sext i32 %3 to i64
  %23 = zext i32 %8 to i64
  %24 = and i64 %23, 1
  %25 = icmp eq i32 %8, 1
  %26 = sub nsw i64 %23, %24
  %27 = icmp eq i64 %24, 0
  br label %28

28:                                               ; preds = %73, %18
  %29 = phi i32 [ 0, %18 ], [ %74, %73 ]
  %30 = phi i8* [ %20, %18 ], [ %75, %73 ]
  %31 = phi i32 [ 0, %18 ], [ %77, %73 ]
  %32 = phi i8* [ %19, %18 ], [ %76, %73 ]
  br i1 %25, label %59, label %33

33:                                               ; preds = %28, %33
  %34 = phi i32 [ %55, %33 ], [ %29, %28 ]
  %35 = phi i64 [ %56, %33 ], [ 0, %28 ]
  %36 = phi i64 [ %57, %33 ], [ %26, %28 ]
  %37 = getelementptr inbounds i8, i8* %30, i64 %35
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i32
  %40 = getelementptr inbounds i8, i8* %32, i64 %35
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i32
  %43 = sub nsw i32 %39, %42
  %44 = mul nsw i32 %43, %43
  %45 = add i32 %44, %34
  store i32 %45, i32* %7, align 4
  %46 = or i64 %35, 1
  %47 = getelementptr inbounds i8, i8* %30, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i32
  %50 = getelementptr inbounds i8, i8* %32, i64 %46
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = sub nsw i32 %49, %52
  %54 = mul nsw i32 %53, %53
  %55 = add i32 %54, %45
  store i32 %55, i32* %7, align 4
  %56 = add nuw nsw i64 %35, 2
  %57 = add i64 %36, -2
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %59, label %33

59:                                               ; preds = %33, %28
  %60 = phi i32 [ undef, %28 ], [ %55, %33 ]
  %61 = phi i32 [ %29, %28 ], [ %55, %33 ]
  %62 = phi i64 [ 0, %28 ], [ %56, %33 ]
  br i1 %27, label %73, label %63

63:                                               ; preds = %59
  %64 = getelementptr inbounds i8, i8* %30, i64 %62
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i32
  %67 = getelementptr inbounds i8, i8* %32, i64 %62
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i32
  %70 = sub nsw i32 %66, %69
  %71 = mul nsw i32 %70, %70
  %72 = add i32 %71, %61
  store i32 %72, i32* %7, align 4
  br label %73

73:                                               ; preds = %59, %63
  %74 = phi i32 [ %60, %59 ], [ %72, %63 ]
  %75 = getelementptr inbounds i8, i8* %30, i64 %21
  %76 = getelementptr inbounds i8, i8* %32, i64 %22
  %77 = add nuw nsw i32 %31, 1
  %78 = icmp eq i32 %77, %5
  br i1 %78, label %79, label %28

79:                                               ; preds = %73
  %80 = zext i32 %74 to i64
  br label %81

81:                                               ; preds = %14, %79, %6
  %82 = phi i64 [ 0, %6 ], [ %80, %79 ], [ 0, %14 ]
  %83 = icmp sgt i32 %10, 0
  br i1 %83, label %84, label %156

84:                                               ; preds = %81
  %85 = sub nsw i32 %5, %10
  %86 = mul nsw i32 %85, %1
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i8, i8* %0, i64 %87
  %89 = mul nsw i32 %85, %3
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* %2, i64 %90
  %92 = sub nsw i32 %4, %8
  store i32 0, i32* %7, align 4
  %93 = icmp sgt i32 %92, 0
  %94 = sext i32 %1 to i64
  %95 = sext i32 %3 to i64
  %96 = zext i32 %92 to i64
  %97 = and i64 %96, 1
  %98 = icmp eq i32 %92, 1
  %99 = sub nsw i64 %96, %97
  %100 = icmp eq i64 %97, 0
  br label %101

101:                                              ; preds = %147, %84
  %102 = phi i32 [ 0, %84 ], [ %148, %147 ]
  %103 = phi i8* [ %88, %84 ], [ %149, %147 ]
  %104 = phi i32 [ 0, %84 ], [ %151, %147 ]
  %105 = phi i8* [ %91, %84 ], [ %150, %147 ]
  br i1 %93, label %106, label %147

106:                                              ; preds = %101
  br i1 %98, label %133, label %107

107:                                              ; preds = %106, %107
  %108 = phi i32 [ %129, %107 ], [ %102, %106 ]
  %109 = phi i64 [ %130, %107 ], [ 0, %106 ]
  %110 = phi i64 [ %131, %107 ], [ %99, %106 ]
  %111 = getelementptr inbounds i8, i8* %103, i64 %109
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = getelementptr inbounds i8, i8* %105, i64 %109
  %115 = load i8, i8* %114, align 1
  %116 = zext i8 %115 to i32
  %117 = sub nsw i32 %113, %116
  %118 = mul nsw i32 %117, %117
  %119 = add i32 %118, %108
  store i32 %119, i32* %7, align 4
  %120 = or i64 %109, 1
  %121 = getelementptr inbounds i8, i8* %103, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = zext i8 %122 to i32
  %124 = getelementptr inbounds i8, i8* %105, i64 %120
  %125 = load i8, i8* %124, align 1
  %126 = zext i8 %125 to i32
  %127 = sub nsw i32 %123, %126
  %128 = mul nsw i32 %127, %127
  %129 = add i32 %128, %119
  store i32 %129, i32* %7, align 4
  %130 = add nuw nsw i64 %109, 2
  %131 = add i64 %110, -2
  %132 = icmp eq i64 %131, 0
  br i1 %132, label %133, label %107

133:                                              ; preds = %107, %106
  %134 = phi i32 [ undef, %106 ], [ %129, %107 ]
  %135 = phi i32 [ %102, %106 ], [ %129, %107 ]
  %136 = phi i64 [ 0, %106 ], [ %130, %107 ]
  br i1 %100, label %147, label %137

137:                                              ; preds = %133
  %138 = getelementptr inbounds i8, i8* %103, i64 %136
  %139 = load i8, i8* %138, align 1
  %140 = zext i8 %139 to i32
  %141 = getelementptr inbounds i8, i8* %105, i64 %136
  %142 = load i8, i8* %141, align 1
  %143 = zext i8 %142 to i32
  %144 = sub nsw i32 %140, %143
  %145 = mul nsw i32 %144, %144
  %146 = add i32 %145, %135
  store i32 %146, i32* %7, align 4
  br label %147

147:                                              ; preds = %137, %133, %101
  %148 = phi i32 [ %102, %101 ], [ %134, %133 ], [ %146, %137 ]
  %149 = getelementptr inbounds i8, i8* %103, i64 %94
  %150 = getelementptr inbounds i8, i8* %105, i64 %95
  %151 = add nuw nsw i32 %104, 1
  %152 = icmp eq i32 %151, %10
  br i1 %152, label %153, label %101

153:                                              ; preds = %147
  %154 = zext i32 %148 to i64
  %155 = add nuw nsw i64 %82, %154
  br label %156

156:                                              ; preds = %153, %81
  %157 = phi i64 [ %155, %153 ], [ %82, %81 ]
  %158 = icmp sgt i32 %5, 15
  br i1 %158, label %159, label %190

159:                                              ; preds = %156
  %160 = icmp sgt i32 %4, 15
  %161 = shl nsw i32 %1, 4
  %162 = sext i32 %161 to i64
  %163 = shl nsw i32 %3, 4
  %164 = sext i32 %163 to i64
  br label %165

165:                                              ; preds = %184, %159
  %166 = phi i32 [ 0, %159 ], [ %188, %184 ]
  %167 = phi i64 [ %157, %159 ], [ %185, %184 ]
  %168 = phi i8* [ %0, %159 ], [ %186, %184 ]
  %169 = phi i8* [ %2, %159 ], [ %187, %184 ]
  br i1 %160, label %170, label %184

170:                                              ; preds = %165, %170
  %171 = phi i8* [ %181, %170 ], [ %169, %165 ]
  %172 = phi i8* [ %180, %170 ], [ %168, %165 ]
  %173 = phi i32 [ %182, %170 ], [ 0, %165 ]
  %174 = phi i64 [ %179, %170 ], [ %167, %165 ]
  %175 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** @vpx_mse16x16, align 8
  %176 = call i32 %175(i8* %172, i32 %1, i8* %171, i32 %3, i32* nonnull %7) #5
  %177 = load i32, i32* %7, align 4
  %178 = zext i32 %177 to i64
  %179 = add nsw i64 %174, %178
  %180 = getelementptr inbounds i8, i8* %172, i64 16
  %181 = getelementptr inbounds i8, i8* %171, i64 16
  %182 = add nuw nsw i32 %173, 1
  %183 = icmp eq i32 %182, %9
  br i1 %183, label %184, label %170

184:                                              ; preds = %170, %165
  %185 = phi i64 [ %167, %165 ], [ %179, %170 ]
  %186 = getelementptr inbounds i8, i8* %168, i64 %162
  %187 = getelementptr inbounds i8, i8* %169, i64 %164
  %188 = add nuw nsw i32 %166, 1
  %189 = icmp eq i32 %188, %11
  br i1 %189, label %190, label %165

190:                                              ; preds = %184, %156
  %191 = phi i64 [ %157, %156 ], [ %185, %184 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  ret i64 %191
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @vpx_highbd_get_y_sse(%struct.yv12_buffer_config* nocapture readonly, %struct.yv12_buffer_config* nocapture readonly) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 13
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %8 = load i8*, i8** %7, align 8
  %9 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %10 = load i32, i32* %9, align 8
  %11 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 2
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 3
  %14 = load i32, i32* %13, align 4
  %15 = tail call fastcc i64 @highbd_get_sse(i8* %4, i32 %6, i8* %8, i32 %10, i32 %12, i32 %14)
  ret i64 %15
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64 @highbd_get_sse(i8*, i32, i8*, i32, i32, i32) unnamed_addr #3 {
  %7 = alloca i32, align 4
  %8 = srem i32 %4, 16
  %9 = sdiv i32 %4, 16
  %10 = srem i32 %5, 16
  %11 = sdiv i32 %5, 16
  %12 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %12) #5
  store i32 0, i32* %7, align 4
  %13 = icmp sgt i32 %8, 0
  br i1 %13, label %14, label %121

14:                                               ; preds = %6
  %15 = sub nsw i32 %4, %8
  %16 = sext i32 %15 to i64
  %17 = icmp sgt i32 %5, 0
  br i1 %17, label %18, label %117

18:                                               ; preds = %14
  %19 = getelementptr inbounds i8, i8* %2, i64 %16
  %20 = getelementptr inbounds i8, i8* %0, i64 %16
  %21 = ptrtoint i8* %19 to i64
  %22 = shl i64 %21, 1
  %23 = inttoptr i64 %22 to i16*
  %24 = ptrtoint i8* %20 to i64
  %25 = shl i64 %24, 1
  %26 = inttoptr i64 %25 to i16*
  %27 = sext i32 %1 to i64
  %28 = sext i32 %3 to i64
  %29 = zext i32 %8 to i64
  %30 = add nsw i64 %29, -1
  %31 = and i64 %29, 3
  %32 = icmp ult i64 %30, 3
  %33 = sub nsw i64 %29, %31
  %34 = icmp eq i64 %31, 0
  br label %35

35:                                               ; preds = %111, %18
  %36 = phi i64 [ 0, %18 ], [ %112, %111 ]
  %37 = phi i32 [ 0, %18 ], [ %115, %111 ]
  %38 = phi i16* [ %23, %18 ], [ %114, %111 ]
  %39 = phi i16* [ %26, %18 ], [ %113, %111 ]
  br i1 %32, label %90, label %40

40:                                               ; preds = %35, %40
  %41 = phi i64 [ %86, %40 ], [ %36, %35 ]
  %42 = phi i64 [ %87, %40 ], [ 0, %35 ]
  %43 = phi i64 [ %88, %40 ], [ %33, %35 ]
  %44 = getelementptr inbounds i16, i16* %39, i64 %42
  %45 = load i16, i16* %44, align 2
  %46 = zext i16 %45 to i32
  %47 = getelementptr inbounds i16, i16* %38, i64 %42
  %48 = load i16, i16* %47, align 2
  %49 = zext i16 %48 to i32
  %50 = sub nsw i32 %46, %49
  %51 = mul nsw i32 %50, %50
  %52 = zext i32 %51 to i64
  %53 = add i64 %41, %52
  %54 = or i64 %42, 1
  %55 = getelementptr inbounds i16, i16* %39, i64 %54
  %56 = load i16, i16* %55, align 2
  %57 = zext i16 %56 to i32
  %58 = getelementptr inbounds i16, i16* %38, i64 %54
  %59 = load i16, i16* %58, align 2
  %60 = zext i16 %59 to i32
  %61 = sub nsw i32 %57, %60
  %62 = mul nsw i32 %61, %61
  %63 = zext i32 %62 to i64
  %64 = add i64 %53, %63
  %65 = or i64 %42, 2
  %66 = getelementptr inbounds i16, i16* %39, i64 %65
  %67 = load i16, i16* %66, align 2
  %68 = zext i16 %67 to i32
  %69 = getelementptr inbounds i16, i16* %38, i64 %65
  %70 = load i16, i16* %69, align 2
  %71 = zext i16 %70 to i32
  %72 = sub nsw i32 %68, %71
  %73 = mul nsw i32 %72, %72
  %74 = zext i32 %73 to i64
  %75 = add i64 %64, %74
  %76 = or i64 %42, 3
  %77 = getelementptr inbounds i16, i16* %39, i64 %76
  %78 = load i16, i16* %77, align 2
  %79 = zext i16 %78 to i32
  %80 = getelementptr inbounds i16, i16* %38, i64 %76
  %81 = load i16, i16* %80, align 2
  %82 = zext i16 %81 to i32
  %83 = sub nsw i32 %79, %82
  %84 = mul nsw i32 %83, %83
  %85 = zext i32 %84 to i64
  %86 = add i64 %75, %85
  %87 = add nuw nsw i64 %42, 4
  %88 = add i64 %43, -4
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %40

90:                                               ; preds = %40, %35
  %91 = phi i64 [ undef, %35 ], [ %86, %40 ]
  %92 = phi i64 [ %36, %35 ], [ %86, %40 ]
  %93 = phi i64 [ 0, %35 ], [ %87, %40 ]
  br i1 %34, label %111, label %94

94:                                               ; preds = %90, %94
  %95 = phi i64 [ %107, %94 ], [ %92, %90 ]
  %96 = phi i64 [ %108, %94 ], [ %93, %90 ]
  %97 = phi i64 [ %109, %94 ], [ %31, %90 ]
  %98 = getelementptr inbounds i16, i16* %39, i64 %96
  %99 = load i16, i16* %98, align 2
  %100 = zext i16 %99 to i32
  %101 = getelementptr inbounds i16, i16* %38, i64 %96
  %102 = load i16, i16* %101, align 2
  %103 = zext i16 %102 to i32
  %104 = sub nsw i32 %100, %103
  %105 = mul nsw i32 %104, %104
  %106 = zext i32 %105 to i64
  %107 = add i64 %95, %106
  %108 = add nuw nsw i64 %96, 1
  %109 = add i64 %97, -1
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %94, !llvm.loop !2

111:                                              ; preds = %94, %90
  %112 = phi i64 [ %91, %90 ], [ %107, %94 ]
  %113 = getelementptr inbounds i16, i16* %39, i64 %27
  %114 = getelementptr inbounds i16, i16* %38, i64 %28
  %115 = add nuw nsw i32 %37, 1
  %116 = icmp eq i32 %115, %5
  br i1 %116, label %117, label %35

117:                                              ; preds = %111, %14
  %118 = phi i64 [ 0, %14 ], [ %112, %111 ]
  %119 = trunc i64 %118 to i32
  store i32 %119, i32* %7, align 4
  %120 = and i64 %118, 4294967295
  br label %121

121:                                              ; preds = %117, %6
  %122 = phi i64 [ %120, %117 ], [ 0, %6 ]
  %123 = icmp sgt i32 %10, 0
  br i1 %123, label %124, label %235

124:                                              ; preds = %121
  %125 = sub nsw i32 %5, %10
  %126 = mul nsw i32 %125, %1
  %127 = sext i32 %126 to i64
  %128 = getelementptr inbounds i8, i8* %0, i64 %127
  %129 = mul nsw i32 %125, %3
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds i8, i8* %2, i64 %130
  %132 = sub nsw i32 %4, %8
  %133 = ptrtoint i8* %131 to i64
  %134 = shl i64 %133, 1
  %135 = inttoptr i64 %134 to i16*
  %136 = ptrtoint i8* %128 to i64
  %137 = shl i64 %136, 1
  %138 = inttoptr i64 %137 to i16*
  %139 = icmp sgt i32 %132, 0
  %140 = sext i32 %1 to i64
  %141 = sext i32 %3 to i64
  %142 = zext i32 %132 to i64
  %143 = add nsw i64 %142, -1
  %144 = and i64 %142, 3
  %145 = icmp ult i64 %143, 3
  %146 = sub nsw i64 %142, %144
  %147 = icmp eq i64 %144, 0
  br label %148

148:                                              ; preds = %225, %124
  %149 = phi i64 [ 0, %124 ], [ %226, %225 ]
  %150 = phi i32 [ 0, %124 ], [ %229, %225 ]
  %151 = phi i16* [ %135, %124 ], [ %228, %225 ]
  %152 = phi i16* [ %138, %124 ], [ %227, %225 ]
  br i1 %139, label %153, label %225

153:                                              ; preds = %148
  br i1 %145, label %204, label %154

154:                                              ; preds = %153, %154
  %155 = phi i64 [ %200, %154 ], [ %149, %153 ]
  %156 = phi i64 [ %201, %154 ], [ 0, %153 ]
  %157 = phi i64 [ %202, %154 ], [ %146, %153 ]
  %158 = getelementptr inbounds i16, i16* %152, i64 %156
  %159 = load i16, i16* %158, align 2
  %160 = zext i16 %159 to i32
  %161 = getelementptr inbounds i16, i16* %151, i64 %156
  %162 = load i16, i16* %161, align 2
  %163 = zext i16 %162 to i32
  %164 = sub nsw i32 %160, %163
  %165 = mul nsw i32 %164, %164
  %166 = zext i32 %165 to i64
  %167 = add i64 %155, %166
  %168 = or i64 %156, 1
  %169 = getelementptr inbounds i16, i16* %152, i64 %168
  %170 = load i16, i16* %169, align 2
  %171 = zext i16 %170 to i32
  %172 = getelementptr inbounds i16, i16* %151, i64 %168
  %173 = load i16, i16* %172, align 2
  %174 = zext i16 %173 to i32
  %175 = sub nsw i32 %171, %174
  %176 = mul nsw i32 %175, %175
  %177 = zext i32 %176 to i64
  %178 = add i64 %167, %177
  %179 = or i64 %156, 2
  %180 = getelementptr inbounds i16, i16* %152, i64 %179
  %181 = load i16, i16* %180, align 2
  %182 = zext i16 %181 to i32
  %183 = getelementptr inbounds i16, i16* %151, i64 %179
  %184 = load i16, i16* %183, align 2
  %185 = zext i16 %184 to i32
  %186 = sub nsw i32 %182, %185
  %187 = mul nsw i32 %186, %186
  %188 = zext i32 %187 to i64
  %189 = add i64 %178, %188
  %190 = or i64 %156, 3
  %191 = getelementptr inbounds i16, i16* %152, i64 %190
  %192 = load i16, i16* %191, align 2
  %193 = zext i16 %192 to i32
  %194 = getelementptr inbounds i16, i16* %151, i64 %190
  %195 = load i16, i16* %194, align 2
  %196 = zext i16 %195 to i32
  %197 = sub nsw i32 %193, %196
  %198 = mul nsw i32 %197, %197
  %199 = zext i32 %198 to i64
  %200 = add i64 %189, %199
  %201 = add nuw nsw i64 %156, 4
  %202 = add i64 %157, -4
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %204, label %154

204:                                              ; preds = %154, %153
  %205 = phi i64 [ undef, %153 ], [ %200, %154 ]
  %206 = phi i64 [ %149, %153 ], [ %200, %154 ]
  %207 = phi i64 [ 0, %153 ], [ %201, %154 ]
  br i1 %147, label %225, label %208

208:                                              ; preds = %204, %208
  %209 = phi i64 [ %221, %208 ], [ %206, %204 ]
  %210 = phi i64 [ %222, %208 ], [ %207, %204 ]
  %211 = phi i64 [ %223, %208 ], [ %144, %204 ]
  %212 = getelementptr inbounds i16, i16* %152, i64 %210
  %213 = load i16, i16* %212, align 2
  %214 = zext i16 %213 to i32
  %215 = getelementptr inbounds i16, i16* %151, i64 %210
  %216 = load i16, i16* %215, align 2
  %217 = zext i16 %216 to i32
  %218 = sub nsw i32 %214, %217
  %219 = mul nsw i32 %218, %218
  %220 = zext i32 %219 to i64
  %221 = add i64 %209, %220
  %222 = add nuw nsw i64 %210, 1
  %223 = add i64 %211, -1
  %224 = icmp eq i64 %223, 0
  br i1 %224, label %225, label %208, !llvm.loop !4

225:                                              ; preds = %204, %208, %148
  %226 = phi i64 [ %149, %148 ], [ %205, %204 ], [ %221, %208 ]
  %227 = getelementptr inbounds i16, i16* %152, i64 %140
  %228 = getelementptr inbounds i16, i16* %151, i64 %141
  %229 = add nuw nsw i32 %150, 1
  %230 = icmp eq i32 %229, %10
  br i1 %230, label %231, label %148

231:                                              ; preds = %225
  %232 = trunc i64 %226 to i32
  store i32 %232, i32* %7, align 4
  %233 = and i64 %226, 4294967295
  %234 = add nuw nsw i64 %233, %122
  br label %235

235:                                              ; preds = %231, %121
  %236 = phi i64 [ %234, %231 ], [ %122, %121 ]
  %237 = icmp sgt i32 %5, 15
  br i1 %237, label %238, label %268

238:                                              ; preds = %235
  %239 = icmp sgt i32 %4, 15
  %240 = shl nsw i32 %1, 4
  %241 = sext i32 %240 to i64
  %242 = shl nsw i32 %3, 4
  %243 = sext i32 %242 to i64
  br label %244

244:                                              ; preds = %262, %238
  %245 = phi i32 [ 0, %238 ], [ %266, %262 ]
  %246 = phi i64 [ %236, %238 ], [ %263, %262 ]
  %247 = phi i8* [ %0, %238 ], [ %264, %262 ]
  %248 = phi i8* [ %2, %238 ], [ %265, %262 ]
  br i1 %239, label %249, label %262

249:                                              ; preds = %244, %249
  %250 = phi i8* [ %259, %249 ], [ %248, %244 ]
  %251 = phi i8* [ %258, %249 ], [ %247, %244 ]
  %252 = phi i32 [ %260, %249 ], [ 0, %244 ]
  %253 = phi i64 [ %257, %249 ], [ %246, %244 ]
  %254 = call i32 @vpx_highbd_8_mse16x16_sse2(i8* %251, i32 %1, i8* %250, i32 %3, i32* nonnull %7) #5
  %255 = load i32, i32* %7, align 4
  %256 = zext i32 %255 to i64
  %257 = add nsw i64 %253, %256
  %258 = getelementptr inbounds i8, i8* %251, i64 16
  %259 = getelementptr inbounds i8, i8* %250, i64 16
  %260 = add nuw nsw i32 %252, 1
  %261 = icmp eq i32 %260, %9
  br i1 %261, label %262, label %249

262:                                              ; preds = %249, %244
  %263 = phi i64 [ %246, %244 ], [ %257, %249 ]
  %264 = getelementptr inbounds i8, i8* %247, i64 %241
  %265 = getelementptr inbounds i8, i8* %248, i64 %243
  %266 = add nuw nsw i32 %245, 1
  %267 = icmp eq i32 %266, %11
  br i1 %267, label %268, label %244

268:                                              ; preds = %262, %235
  %269 = phi i64 [ %236, %235 ], [ %263, %262 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %12) #5
  ret i64 %269
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_calc_highbd_psnr(%struct.yv12_buffer_config* nocapture readonly, %struct.yv12_buffer_config* nocapture readonly, %struct.vpx_psnr_pkt* nocapture, i32, i32) local_unnamed_addr #3 {
  %6 = alloca [3 x i32], align 4
  %7 = alloca [3 x i32], align 4
  %8 = alloca [3 x i8*], align 16
  %9 = alloca [3 x i32], align 4
  %10 = alloca [3 x i8*], align 16
  %11 = alloca [3 x i32], align 4
  %12 = bitcast [3 x i32]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %12) #5
  %13 = getelementptr inbounds [3 x i32], [3 x i32]* %6, i64 0, i64 0
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %6, i64 0, i64 1
  %15 = getelementptr inbounds [3 x i32], [3 x i32]* %6, i64 0, i64 2
  %16 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 2
  %17 = load i32, i32* %16, align 8
  store i32 %17, i32* %13, align 4
  %18 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 7
  %19 = load i32, i32* %18, align 4
  store i32 %19, i32* %14, align 4
  store i32 %19, i32* %15, align 4
  %20 = bitcast [3 x i32]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %20) #5
  %21 = getelementptr inbounds [3 x i32], [3 x i32]* %7, i64 0, i64 0
  %22 = getelementptr inbounds [3 x i32], [3 x i32]* %7, i64 0, i64 1
  %23 = getelementptr inbounds [3 x i32], [3 x i32]* %7, i64 0, i64 2
  %24 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 3
  %25 = load i32, i32* %24, align 4
  store i32 %25, i32* %21, align 4
  %26 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 8
  %27 = load i32, i32* %26, align 8
  store i32 %27, i32* %22, align 4
  store i32 %27, i32* %23, align 4
  %28 = bitcast [3 x i8*]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %28) #5
  %29 = getelementptr inbounds [3 x i8*], [3 x i8*]* %8, i64 0, i64 2
  %30 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 13
  %31 = bitcast i8** %30 to <2 x i64>*
  %32 = load <2 x i64>, <2 x i64>* %31, align 8
  %33 = bitcast [3 x i8*]* %8 to <2 x i64>*
  store <2 x i64> %32, <2 x i64>* %33, align 16
  %34 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 15
  %35 = bitcast i8** %34 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = bitcast i8** %29 to i64*
  store i64 %36, i64* %37, align 16
  %38 = bitcast [3 x i32]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %38) #5
  %39 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 0
  %40 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 1
  %41 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 2
  %42 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %43 = load i32, i32* %42, align 8
  store i32 %43, i32* %39, align 4
  %44 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 9
  %45 = load i32, i32* %44, align 4
  store i32 %45, i32* %40, align 4
  store i32 %45, i32* %41, align 4
  %46 = bitcast [3 x i8*]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %46) #5
  %47 = getelementptr inbounds [3 x i8*], [3 x i8*]* %10, i64 0, i64 2
  %48 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %49 = bitcast i8** %48 to <2 x i64>*
  %50 = load <2 x i64>, <2 x i64>* %49, align 8
  %51 = bitcast [3 x i8*]* %10 to <2 x i64>*
  store <2 x i64> %50, <2 x i64>* %51, align 16
  %52 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  %53 = bitcast i8** %52 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = bitcast i8** %47 to i64*
  store i64 %54, i64* %55, align 16
  %56 = bitcast [3 x i32]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %56) #5
  %57 = getelementptr inbounds [3 x i32], [3 x i32]* %11, i64 0, i64 0
  %58 = getelementptr inbounds [3 x i32], [3 x i32]* %11, i64 0, i64 1
  %59 = getelementptr inbounds [3 x i32], [3 x i32]* %11, i64 0, i64 2
  %60 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %61 = load i32, i32* %60, align 8
  store i32 %61, i32* %57, align 4
  %62 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  %63 = load i32, i32* %62, align 4
  store i32 %63, i32* %58, align 4
  store i32 %63, i32* %59, align 4
  %64 = shl nsw i32 -1, %4
  %65 = xor i32 %64, -1
  %66 = sitofp i32 %65 to double
  %67 = sub i32 %3, %4
  %68 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 29
  %69 = icmp eq i32 %67, 0
  %70 = extractelement <2 x i64> %32, i32 0
  %71 = inttoptr i64 %70 to i8*
  %72 = extractelement <2 x i64> %50, i32 0
  %73 = inttoptr i64 %72 to i8*
  br label %74

74:                                               ; preds = %200, %5
  %75 = phi i32 [ %61, %5 ], [ %210, %200 ]
  %76 = phi i8* [ %73, %5 ], [ %208, %200 ]
  %77 = phi i32 [ %43, %5 ], [ %206, %200 ]
  %78 = phi i8* [ %71, %5 ], [ %204, %200 ]
  %79 = phi i32 [ %25, %5 ], [ %202, %200 ]
  %80 = phi i64 [ 0, %5 ], [ %193, %200 ]
  %81 = phi i32 [ 0, %5 ], [ %198, %200 ]
  %82 = phi i64 [ 0, %5 ], [ %197, %200 ]
  %83 = getelementptr inbounds [3 x i32], [3 x i32]* %6, i64 0, i64 %80
  %84 = load i32, i32* %83, align 4
  %85 = mul nsw i32 %79, %84
  %86 = load i32, i32* %68, align 8
  %87 = and i32 %86, 8
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %174, label %89

89:                                               ; preds = %74
  br i1 %69, label %172, label %90

90:                                               ; preds = %89
  %91 = icmp sgt i32 %79, 0
  br i1 %91, label %96, label %92

92:                                               ; preds = %90
  %93 = add nuw nsw i64 %80, 1
  %94 = getelementptr inbounds %struct.vpx_psnr_pkt, %struct.vpx_psnr_pkt* %2, i64 0, i32 1, i64 %93
  store i64 0, i64* %94, align 8
  %95 = getelementptr inbounds %struct.vpx_psnr_pkt, %struct.vpx_psnr_pkt* %2, i64 0, i32 0, i64 %93
  store i32 %85, i32* %95, align 4
  br label %192

96:                                               ; preds = %90
  %97 = ptrtoint i8* %76 to i64
  %98 = shl i64 %97, 1
  %99 = inttoptr i64 %98 to i16*
  %100 = ptrtoint i8* %78 to i64
  %101 = shl i64 %100, 1
  %102 = inttoptr i64 %101 to i16*
  %103 = icmp sgt i32 %84, 0
  %104 = sext i32 %77 to i64
  %105 = sext i32 %75 to i64
  %106 = zext i32 %84 to i64
  %107 = and i64 %106, 1
  %108 = icmp eq i32 %84, 1
  %109 = sub nsw i64 %106, %107
  %110 = icmp eq i64 %107, 0
  br label %111

111:                                              ; preds = %166, %96
  %112 = phi i16* [ %102, %96 ], [ %168, %166 ]
  %113 = phi i32 [ 0, %96 ], [ %170, %166 ]
  %114 = phi i64 [ 0, %96 ], [ %167, %166 ]
  %115 = phi i16* [ %99, %96 ], [ %169, %166 ]
  br i1 %103, label %116, label %166

116:                                              ; preds = %111
  br i1 %108, label %149, label %117

117:                                              ; preds = %116, %117
  %118 = phi i64 [ %146, %117 ], [ 0, %116 ]
  %119 = phi i64 [ %145, %117 ], [ %114, %116 ]
  %120 = phi i64 [ %147, %117 ], [ %109, %116 ]
  %121 = getelementptr inbounds i16, i16* %112, i64 %118
  %122 = load i16, i16* %121, align 2
  %123 = zext i16 %122 to i32
  %124 = lshr i32 %123, %67
  %125 = getelementptr inbounds i16, i16* %115, i64 %118
  %126 = load i16, i16* %125, align 2
  %127 = zext i16 %126 to i32
  %128 = lshr i32 %127, %67
  %129 = sub nsw i32 %124, %128
  %130 = sext i32 %129 to i64
  %131 = mul nsw i64 %130, %130
  %132 = add nsw i64 %131, %119
  %133 = or i64 %118, 1
  %134 = getelementptr inbounds i16, i16* %112, i64 %133
  %135 = load i16, i16* %134, align 2
  %136 = zext i16 %135 to i32
  %137 = lshr i32 %136, %67
  %138 = getelementptr inbounds i16, i16* %115, i64 %133
  %139 = load i16, i16* %138, align 2
  %140 = zext i16 %139 to i32
  %141 = lshr i32 %140, %67
  %142 = sub nsw i32 %137, %141
  %143 = sext i32 %142 to i64
  %144 = mul nsw i64 %143, %143
  %145 = add nsw i64 %144, %132
  %146 = add nuw nsw i64 %118, 2
  %147 = add i64 %120, -2
  %148 = icmp eq i64 %147, 0
  br i1 %148, label %149, label %117

149:                                              ; preds = %117, %116
  %150 = phi i64 [ undef, %116 ], [ %145, %117 ]
  %151 = phi i64 [ 0, %116 ], [ %146, %117 ]
  %152 = phi i64 [ %114, %116 ], [ %145, %117 ]
  br i1 %110, label %166, label %153

153:                                              ; preds = %149
  %154 = getelementptr inbounds i16, i16* %112, i64 %151
  %155 = load i16, i16* %154, align 2
  %156 = zext i16 %155 to i32
  %157 = lshr i32 %156, %67
  %158 = getelementptr inbounds i16, i16* %115, i64 %151
  %159 = load i16, i16* %158, align 2
  %160 = zext i16 %159 to i32
  %161 = lshr i32 %160, %67
  %162 = sub nsw i32 %157, %161
  %163 = sext i32 %162 to i64
  %164 = mul nsw i64 %163, %163
  %165 = add nsw i64 %164, %152
  br label %166

166:                                              ; preds = %153, %149, %111
  %167 = phi i64 [ %114, %111 ], [ %150, %149 ], [ %165, %153 ]
  %168 = getelementptr inbounds i16, i16* %112, i64 %104
  %169 = getelementptr inbounds i16, i16* %115, i64 %105
  %170 = add nuw nsw i32 %113, 1
  %171 = icmp eq i32 %170, %79
  br i1 %171, label %176, label %111

172:                                              ; preds = %89
  %173 = tail call fastcc i64 @highbd_get_sse(i8* %78, i32 %77, i8* %76, i32 %75, i32 %84, i32 %79)
  br label %176

174:                                              ; preds = %74
  %175 = tail call fastcc i64 @get_sse(i8* %78, i32 %77, i8* %76, i32 %75, i32 %84, i32 %79)
  br label %176

176:                                              ; preds = %166, %172, %174
  %177 = phi i64 [ %173, %172 ], [ %175, %174 ], [ %167, %166 ]
  %178 = add nuw nsw i64 %80, 1
  %179 = getelementptr inbounds %struct.vpx_psnr_pkt, %struct.vpx_psnr_pkt* %2, i64 0, i32 1, i64 %178
  store i64 %177, i64* %179, align 8
  %180 = getelementptr inbounds %struct.vpx_psnr_pkt, %struct.vpx_psnr_pkt* %2, i64 0, i32 0, i64 %178
  store i32 %85, i32* %180, align 4
  %181 = icmp eq i64 %177, 0
  br i1 %181, label %192, label %182

182:                                              ; preds = %176
  %183 = uitofp i64 %177 to double
  %184 = uitofp i32 %85 to double
  %185 = fmul double %66, %184
  %186 = fmul double %185, %66
  %187 = fdiv double %186, %183
  %188 = tail call double @log10(double %187) #5
  %189 = fmul double %188, 1.000000e+01
  %190 = fcmp ogt double %189, 1.000000e+02
  %191 = select i1 %190, double 1.000000e+02, double %189
  br label %192

192:                                              ; preds = %92, %176, %182
  %193 = phi i64 [ %178, %182 ], [ %178, %176 ], [ %93, %92 ]
  %194 = phi i64 [ %177, %182 ], [ 0, %176 ], [ 0, %92 ]
  %195 = phi double [ %191, %182 ], [ 1.000000e+02, %176 ], [ 1.000000e+02, %92 ]
  %196 = getelementptr inbounds %struct.vpx_psnr_pkt, %struct.vpx_psnr_pkt* %2, i64 0, i32 2, i64 %193
  store double %195, double* %196, align 8
  %197 = add i64 %194, %82
  %198 = add i32 %85, %81
  %199 = icmp eq i64 %193, 3
  br i1 %199, label %211, label %200

200:                                              ; preds = %192
  %201 = getelementptr inbounds [3 x i32], [3 x i32]* %7, i64 0, i64 %193
  %202 = load i32, i32* %201, align 4
  %203 = getelementptr inbounds [3 x i8*], [3 x i8*]* %8, i64 0, i64 %193
  %204 = load i8*, i8** %203, align 8
  %205 = getelementptr inbounds [3 x i32], [3 x i32]* %9, i64 0, i64 %193
  %206 = load i32, i32* %205, align 4
  %207 = getelementptr inbounds [3 x i8*], [3 x i8*]* %10, i64 0, i64 %193
  %208 = load i8*, i8** %207, align 8
  %209 = getelementptr inbounds [3 x i32], [3 x i32]* %11, i64 0, i64 %193
  %210 = load i32, i32* %209, align 4
  br label %74

211:                                              ; preds = %192
  %212 = getelementptr inbounds %struct.vpx_psnr_pkt, %struct.vpx_psnr_pkt* %2, i64 0, i32 1, i64 0
  store i64 %197, i64* %212, align 8
  %213 = getelementptr inbounds %struct.vpx_psnr_pkt, %struct.vpx_psnr_pkt* %2, i64 0, i32 0, i64 0
  store i32 %198, i32* %213, align 8
  %214 = icmp eq i64 %197, 0
  br i1 %214, label %225, label %215

215:                                              ; preds = %211
  %216 = uitofp i64 %197 to double
  %217 = uitofp i32 %198 to double
  %218 = fmul double %66, %217
  %219 = fmul double %218, %66
  %220 = fdiv double %219, %216
  %221 = tail call double @log10(double %220) #5
  %222 = fmul double %221, 1.000000e+01
  %223 = fcmp ogt double %222, 1.000000e+02
  %224 = select i1 %223, double 1.000000e+02, double %222
  br label %225

225:                                              ; preds = %211, %215
  %226 = phi double [ %224, %215 ], [ 1.000000e+02, %211 ]
  %227 = getelementptr inbounds %struct.vpx_psnr_pkt, %struct.vpx_psnr_pkt* %2, i64 0, i32 2, i64 0
  store double %226, double* %227, align 8
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %56) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %46) #5
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %38) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %28) #5
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %20) #5
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %12) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_calc_psnr(%struct.yv12_buffer_config* nocapture readonly, %struct.yv12_buffer_config* nocapture readonly, %struct.vpx_psnr_pkt* nocapture) local_unnamed_addr #3 {
  %4 = alloca [3 x i32], align 4
  %5 = bitcast [3 x i32]* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %5) #5
  %6 = getelementptr inbounds [3 x i32], [3 x i32]* %4, i64 0, i64 0
  %7 = getelementptr inbounds [3 x i32], [3 x i32]* %4, i64 0, i64 1
  %8 = getelementptr inbounds [3 x i32], [3 x i32]* %4, i64 0, i64 2
  %9 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 2
  %10 = load i32, i32* %9, align 8
  store i32 %10, i32* %6, align 4
  %11 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 7
  %12 = load i32, i32* %11, align 4
  store i32 %12, i32* %7, align 4
  store i32 %12, i32* %8, align 4
  %13 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 3
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 8
  %16 = load i32, i32* %15, align 8
  %17 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 13
  %18 = load i8*, i8** %17, align 8
  %19 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 14
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 15
  %22 = load i8*, i8** %21, align 8
  %23 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 4
  %24 = load i32, i32* %23, align 8
  %25 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %0, i64 0, i32 9
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 13
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 14
  %30 = load i8*, i8** %29, align 8
  %31 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 15
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 4
  %34 = load i32, i32* %33, align 8
  %35 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %1, i64 0, i32 9
  %36 = load i32, i32* %35, align 4
  %37 = mul nsw i32 %14, %10
  %38 = tail call fastcc i64 @get_sse(i8* %18, i32 %24, i8* %28, i32 %34, i32 %10, i32 %14)
  %39 = getelementptr inbounds %struct.vpx_psnr_pkt, %struct.vpx_psnr_pkt* %2, i64 0, i32 1, i64 1
  store i64 %38, i64* %39, align 8
  %40 = getelementptr inbounds %struct.vpx_psnr_pkt, %struct.vpx_psnr_pkt* %2, i64 0, i32 0, i64 1
  store i32 %37, i32* %40, align 4
  %41 = icmp eq i64 %38, 0
  br i1 %41, label %52, label %42

42:                                               ; preds = %3
  %43 = uitofp i64 %38 to double
  %44 = uitofp i32 %37 to double
  %45 = fmul double %44, 2.550000e+02
  %46 = fmul double %45, 2.550000e+02
  %47 = fdiv double %46, %43
  %48 = tail call double @log10(double %47) #5
  %49 = fmul double %48, 1.000000e+01
  %50 = fcmp ogt double %49, 1.000000e+02
  %51 = select i1 %50, double 1.000000e+02, double %49
  br label %52

52:                                               ; preds = %3, %42
  %53 = phi double [ %51, %42 ], [ 1.000000e+02, %3 ]
  %54 = getelementptr inbounds %struct.vpx_psnr_pkt, %struct.vpx_psnr_pkt* %2, i64 0, i32 2, i64 1
  store double %53, double* %54, align 8
  %55 = load i32, i32* %7, align 4
  %56 = mul nsw i32 %16, %55
  %57 = tail call fastcc i64 @get_sse(i8* %20, i32 %26, i8* %30, i32 %36, i32 %55, i32 %16)
  %58 = getelementptr inbounds %struct.vpx_psnr_pkt, %struct.vpx_psnr_pkt* %2, i64 0, i32 1, i64 2
  store i64 %57, i64* %58, align 8
  %59 = getelementptr inbounds %struct.vpx_psnr_pkt, %struct.vpx_psnr_pkt* %2, i64 0, i32 0, i64 2
  store i32 %56, i32* %59, align 4
  %60 = icmp eq i64 %57, 0
  br i1 %60, label %84, label %74

61:                                               ; preds = %105
  %62 = uitofp i64 %108 to double
  %63 = uitofp i32 %109 to double
  %64 = fmul double %63, 2.550000e+02
  %65 = fmul double %64, 2.550000e+02
  %66 = fdiv double %65, %62
  %67 = tail call double @log10(double %66) #5
  %68 = fmul double %67, 1.000000e+01
  %69 = fcmp ogt double %68, 1.000000e+02
  %70 = select i1 %69, double 1.000000e+02, double %68
  br label %71

71:                                               ; preds = %105, %61
  %72 = phi double [ %70, %61 ], [ 1.000000e+02, %105 ]
  %73 = getelementptr inbounds %struct.vpx_psnr_pkt, %struct.vpx_psnr_pkt* %2, i64 0, i32 2, i64 0
  store double %72, double* %73, align 8
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %5) #5
  ret void

74:                                               ; preds = %52
  %75 = uitofp i64 %57 to double
  %76 = uitofp i32 %56 to double
  %77 = fmul double %76, 2.550000e+02
  %78 = fmul double %77, 2.550000e+02
  %79 = fdiv double %78, %75
  %80 = tail call double @log10(double %79) #5
  %81 = fmul double %80, 1.000000e+01
  %82 = fcmp ogt double %81, 1.000000e+02
  %83 = select i1 %82, double 1.000000e+02, double %81
  br label %84

84:                                               ; preds = %74, %52
  %85 = phi double [ %83, %74 ], [ 1.000000e+02, %52 ]
  %86 = getelementptr inbounds %struct.vpx_psnr_pkt, %struct.vpx_psnr_pkt* %2, i64 0, i32 2, i64 2
  store double %85, double* %86, align 8
  %87 = add i64 %57, %38
  %88 = add i32 %56, %37
  %89 = load i32, i32* %8, align 4
  %90 = mul nsw i32 %16, %89
  %91 = tail call fastcc i64 @get_sse(i8* %22, i32 %26, i8* %32, i32 %36, i32 %89, i32 %16)
  %92 = getelementptr inbounds %struct.vpx_psnr_pkt, %struct.vpx_psnr_pkt* %2, i64 0, i32 1, i64 3
  store i64 %91, i64* %92, align 8
  %93 = getelementptr inbounds %struct.vpx_psnr_pkt, %struct.vpx_psnr_pkt* %2, i64 0, i32 0, i64 3
  store i32 %90, i32* %93, align 4
  %94 = icmp eq i64 %91, 0
  br i1 %94, label %105, label %95

95:                                               ; preds = %84
  %96 = uitofp i64 %91 to double
  %97 = uitofp i32 %90 to double
  %98 = fmul double %97, 2.550000e+02
  %99 = fmul double %98, 2.550000e+02
  %100 = fdiv double %99, %96
  %101 = tail call double @log10(double %100) #5
  %102 = fmul double %101, 1.000000e+01
  %103 = fcmp ogt double %102, 1.000000e+02
  %104 = select i1 %103, double 1.000000e+02, double %102
  br label %105

105:                                              ; preds = %95, %84
  %106 = phi double [ %104, %95 ], [ 1.000000e+02, %84 ]
  %107 = getelementptr inbounds %struct.vpx_psnr_pkt, %struct.vpx_psnr_pkt* %2, i64 0, i32 2, i64 3
  store double %106, double* %107, align 8
  %108 = add i64 %91, %87
  %109 = add i32 %90, %88
  %110 = getelementptr inbounds %struct.vpx_psnr_pkt, %struct.vpx_psnr_pkt* %2, i64 0, i32 1, i64 0
  store i64 %108, i64* %110, align 8
  %111 = getelementptr inbounds %struct.vpx_psnr_pkt, %struct.vpx_psnr_pkt* %2, i64 0, i32 0, i64 0
  store i32 %109, i32* %111, align 8
  %112 = icmp eq i64 %108, 0
  br i1 %112, label %71, label %61
}

declare i32 @vpx_highbd_8_mse16x16_sse2(i8*, i32, i8*, i32, i32*) local_unnamed_addr #4

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
