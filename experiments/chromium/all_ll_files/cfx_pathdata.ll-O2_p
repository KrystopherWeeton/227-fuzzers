; ModuleID = '../../third_party/pdfium/core/fxge/cfx_pathdata.cpp'
source_filename = "../../third_party/pdfium/core/fxge/cfx_pathdata.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.FX_PATHPOINT = type <{ %class.CFX_PTemplate, i8, i8, [2 x i8] }>
%class.CFX_PTemplate = type { float, float }
%class.CFX_PathData = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %class.FX_PATHPOINT*, %class.FX_PATHPOINT*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %class.FX_PATHPOINT* }
%class.CFX_RetainablePathData = type { %"class.fxcrt::Retainable", %class.CFX_PathData }
%"class.fxcrt::Retainable" = type { i32 (...)**, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }
%class.CFX_Matrix = type { float, float, float, float, float, float }
%class.CFX_FloatRect = type { float, float, float, float }
%"class.pdfium::Optional" = type { %"class.pdfium::internal::OptionalBase" }
%"class.pdfium::internal::OptionalBase" = type { %"struct.pdfium::internal::OptionalStorage" }
%"struct.pdfium::internal::OptionalStorage" = type { %"struct.pdfium::internal::OptionalStorageBase" }
%"struct.pdfium::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { %class.CFX_FloatRect }
%"class.fxcrt::RetainPtr" = type { %"class.std::__1::unique_ptr" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %class.CFX_RetainablePathData* }

$_ZNSt3__16vectorI12FX_PATHPOINTNS_9allocatorIS1_EEE6insertINS_11__wrap_iterIPKS1_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISB_E9referenceEEE5valueENS6_IPS1_EEE4typeES9_SB_SB_ = comdat any

$_ZN5fxcrt10RetainableD2Ev = comdat any

$_ZN5fxcrt10RetainableD0Ev = comdat any

$_ZTVN5fxcrt10RetainableE = comdat any

@_ZTV22CFX_RetainablePathData = hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%class.CFX_RetainablePathData*)* @_ZN22CFX_RetainablePathDataD2Ev to i8*), i8* bitcast (void (%class.CFX_RetainablePathData*)* @_ZN22CFX_RetainablePathDataD0Ev to i8*)] }, align 8
@_ZTVN5fxcrt10RetainableE = linkonce_odr hidden unnamed_addr constant { [4 x i8*] } { [4 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.fxcrt::Retainable"*)* @_ZN5fxcrt10RetainableD2Ev to i8*), i8* bitcast (void (%"class.fxcrt::Retainable"*)* @_ZN5fxcrt10RetainableD0Ev to i8*)] }, comdat, align 8

@_ZN12FX_PATHPOINTC1Ev = hidden unnamed_addr alias void (%class.FX_PATHPOINT*), void (%class.FX_PATHPOINT*)* @_ZN12FX_PATHPOINTC2Ev
@_ZN12FX_PATHPOINTC1ERK13CFX_PTemplateIfE9FXPT_TYPEb = hidden unnamed_addr alias void (%class.FX_PATHPOINT*, %class.CFX_PTemplate*, i8, i1), void (%class.FX_PATHPOINT*, %class.CFX_PTemplate*, i8, i1)* @_ZN12FX_PATHPOINTC2ERK13CFX_PTemplateIfE9FXPT_TYPEb
@_ZN12FX_PATHPOINTC1ERKS_ = hidden unnamed_addr alias void (%class.FX_PATHPOINT*, %class.FX_PATHPOINT*), void (%class.FX_PATHPOINT*, %class.FX_PATHPOINT*)* @_ZN12FX_PATHPOINTC2ERKS_
@_ZN12FX_PATHPOINTD1Ev = hidden unnamed_addr alias void (%class.FX_PATHPOINT*), void (%class.FX_PATHPOINT*)* @_ZN12FX_PATHPOINTD2Ev
@_ZN12CFX_PathDataC1Ev = hidden unnamed_addr alias void (%class.CFX_PathData*), void (%class.CFX_PathData*)* @_ZN12CFX_PathDataC2Ev
@_ZN12CFX_PathDataC1ERKS_ = hidden unnamed_addr alias void (%class.CFX_PathData*, %class.CFX_PathData*), void (%class.CFX_PathData*, %class.CFX_PathData*)* @_ZN12CFX_PathDataC2ERKS_
@_ZN12CFX_PathDataC1EOS_ = hidden unnamed_addr alias void (%class.CFX_PathData*, %class.CFX_PathData*), void (%class.CFX_PathData*, %class.CFX_PathData*)* @_ZN12CFX_PathDataC2EOS_
@_ZN12CFX_PathDataD1Ev = hidden unnamed_addr alias void (%class.CFX_PathData*), void (%class.CFX_PathData*)* @_ZN12CFX_PathDataD2Ev
@_ZN22CFX_RetainablePathDataC1Ev = hidden unnamed_addr alias void (%class.CFX_RetainablePathData*), void (%class.CFX_RetainablePathData*)* @_ZN22CFX_RetainablePathDataC2Ev
@_ZN22CFX_RetainablePathDataC1ERKS_ = hidden unnamed_addr alias void (%class.CFX_RetainablePathData*, %class.CFX_RetainablePathData*), void (%class.CFX_RetainablePathData*, %class.CFX_RetainablePathData*)* @_ZN22CFX_RetainablePathDataC2ERKS_
@_ZN22CFX_RetainablePathDataD1Ev = hidden unnamed_addr alias void (%class.CFX_RetainablePathData*), void (%class.CFX_RetainablePathData*)* @_ZN22CFX_RetainablePathDataD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN12FX_PATHPOINTC2Ev(%class.FX_PATHPOINT* nocapture) unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %0, i64 0, i32 0, i32 0
  store float 0.000000e+00, float* %2, align 4
  %3 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %0, i64 0, i32 0, i32 1
  store float 0.000000e+00, float* %3, align 4
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN12FX_PATHPOINTC2ERK13CFX_PTemplateIfE9FXPT_TYPEb(%class.FX_PATHPOINT* nocapture, %class.CFX_PTemplate* nocapture readonly dereferenceable(8), i8 zeroext, i1 zeroext) unnamed_addr #1 align 2 {
  %5 = zext i1 %3 to i8
  %6 = bitcast %class.CFX_PTemplate* %1 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = bitcast %class.FX_PATHPOINT* %0 to i32*
  store i32 %7, i32* %8, align 4
  %9 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %0, i64 0, i32 0, i32 1
  %10 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %1, i64 0, i32 1
  %11 = bitcast float* %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = bitcast float* %9 to i32*
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %0, i64 0, i32 1
  store i8 %2, i8* %14, align 4
  %15 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %0, i64 0, i32 2
  store i8 %5, i8* %15, align 1
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN12FX_PATHPOINTC2ERKS_(%class.FX_PATHPOINT* nocapture, %class.FX_PATHPOINT* nocapture readonly dereferenceable(12)) unnamed_addr #1 align 2 {
  %3 = bitcast %class.FX_PATHPOINT* %1 to i32*
  %4 = load i32, i32* %3, align 4
  %5 = bitcast %class.FX_PATHPOINT* %0 to i32*
  store i32 %4, i32* %5, align 4
  %6 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %0, i64 0, i32 0, i32 1
  %7 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %1, i64 0, i32 0, i32 1
  %8 = bitcast float* %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = bitcast float* %6 to i32*
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %0, i64 0, i32 1
  %12 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %1, i64 0, i32 1
  %13 = bitcast i8* %12 to i16*
  %14 = bitcast i8* %11 to i16*
  %15 = load i16, i16* %13, align 4
  store i16 %15, i16* %14, align 4
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @_ZN12FX_PATHPOINTD2Ev(%class.FX_PATHPOINT* nocapture) unnamed_addr #2 align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_PathDataC2Ev(%class.CFX_PathData* nocapture) unnamed_addr #3 align 2 {
  %2 = bitcast %class.CFX_PathData* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 24, i1 false) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_PathDataC2ERKS_(%class.CFX_PathData*, %class.CFX_PathData* nocapture readonly dereferenceable(24)) unnamed_addr #3 align 2 {
  %3 = bitcast %class.CFX_PathData* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #12
  %4 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %1, i64 0, i32 0, i32 0, i32 1
  %5 = bitcast %class.FX_PATHPOINT** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %class.CFX_PathData* %1 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = sdiv exact i64 %9, 12
  %11 = icmp eq i64 %9, 0
  br i1 %11, label %53, label %12

12:                                               ; preds = %2
  %13 = icmp ugt i64 %10, 1537228672809129301
  br i1 %13, label %14, label %16

14:                                               ; preds = %12
  %15 = bitcast %class.CFX_PathData* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %15) #13
  unreachable

16:                                               ; preds = %12
  %17 = tail call i8* @_Znwm(i64 %9) #14
  %18 = bitcast i8* %17 to %class.FX_PATHPOINT*
  %19 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 1
  %20 = bitcast %class.FX_PATHPOINT** %19 to i8**
  store i8* %17, i8** %20, align 8
  %21 = bitcast %class.CFX_PathData* %0 to i8**
  store i8* %17, i8** %21, align 8
  %22 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %18, i64 %10
  %23 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  store %class.FX_PATHPOINT* %22, %class.FX_PATHPOINT** %23, align 8
  %24 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %1, i64 0, i32 0, i32 0, i32 0
  %25 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %24, align 8
  %26 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %4, align 8
  %27 = bitcast %class.FX_PATHPOINT** %19 to i64*
  %28 = ptrtoint i8* %17 to i64
  %29 = icmp eq %class.FX_PATHPOINT* %25, %26
  br i1 %29, label %51, label %30

30:                                               ; preds = %16, %30
  %31 = phi %class.FX_PATHPOINT* [ %47, %30 ], [ %18, %16 ]
  %32 = phi %class.FX_PATHPOINT* [ %46, %30 ], [ %25, %16 ]
  %33 = bitcast %class.FX_PATHPOINT* %32 to i32*
  %34 = load i32, i32* %33, align 4
  %35 = bitcast %class.FX_PATHPOINT* %31 to i32*
  store i32 %34, i32* %35, align 4
  %36 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %31, i64 0, i32 0, i32 1
  %37 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %32, i64 0, i32 0, i32 1
  %38 = bitcast float* %37 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = bitcast float* %36 to i32*
  store i32 %39, i32* %40, align 4
  %41 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %31, i64 0, i32 1
  %42 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %32, i64 0, i32 1
  %43 = bitcast i8* %42 to i16*
  %44 = bitcast i8* %41 to i16*
  %45 = load i16, i16* %43, align 4
  store i16 %45, i16* %44, align 4
  %46 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %32, i64 1
  %47 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %31, i64 1
  %48 = icmp eq %class.FX_PATHPOINT* %46, %26
  br i1 %48, label %49, label %30

49:                                               ; preds = %30
  %50 = ptrtoint %class.FX_PATHPOINT* %47 to i64
  br label %51

51:                                               ; preds = %49, %16
  %52 = phi i64 [ %28, %16 ], [ %50, %49 ]
  store i64 %52, i64* %27, align 8
  br label %53

53:                                               ; preds = %2, %51
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_PathDataC2EOS_(%class.CFX_PathData* nocapture, %class.CFX_PathData* nocapture dereferenceable(24)) unnamed_addr #3 align 2 {
  %3 = bitcast %class.CFX_PathData* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false) #12
  %4 = bitcast %class.CFX_PathData* %1 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %class.CFX_PathData* %0 to i64*
  store i64 %5, i64* %6, align 8
  %7 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %1, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast %class.FX_PATHPOINT** %7 to i64*
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 1
  %11 = bitcast %class.FX_PATHPOINT** %10 to i64*
  store i64 %9, i64* %11, align 8
  %12 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %1, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %13 = bitcast %class.FX_PATHPOINT** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %class.FX_PATHPOINT** %15 to i64*
  store i64 %14, i64* %16, align 8
  %17 = bitcast %class.CFX_PathData* %1 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %17, i8 0, i64 24, i1 false) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_PathDataD2Ev(%class.CFX_PathData* nocapture) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %2, align 8
  %4 = icmp eq %class.FX_PATHPOINT* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %class.FX_PATHPOINT* %3 to i64
  %7 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 1
  %8 = bitcast %class.FX_PATHPOINT** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast %class.FX_PATHPOINT* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #14
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN12CFX_PathData5ClearEv(%class.CFX_PathData* nocapture) local_unnamed_addr #1 align 2 {
  %2 = bitcast %class.CFX_PathData* %0 to i64*
  %3 = load i64, i64* %2, align 8
  %4 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 1
  %5 = bitcast %class.FX_PATHPOINT** %4 to i64*
  store i64 %3, i64* %5, align 8
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @_ZN12CFX_PathData9ClosePathEv(%class.CFX_PathData* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 0
  %3 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %2, align 8
  %4 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 1
  %5 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %4, align 8
  %6 = icmp eq %class.FX_PATHPOINT* %3, %5
  br i1 %6, label %9, label %7

7:                                                ; preds = %1
  %8 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %5, i64 -1, i32 2
  store i8 1, i8* %8, align 1
  br label %9

9:                                                ; preds = %1, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_PathData6AppendERKS_PK10CFX_Matrix(%class.CFX_PathData*, %class.CFX_PathData* nocapture readonly dereferenceable(24), %class.CFX_Matrix*) local_unnamed_addr #3 align 2 {
  %4 = alloca %class.CFX_PTemplate, align 4
  %5 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %1, i64 0, i32 0, i32 0, i32 0
  %6 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %5, align 8
  %7 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %1, i64 0, i32 0, i32 0, i32 1
  %8 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %7, align 8
  %9 = icmp eq %class.FX_PATHPOINT* %6, %8
  br i1 %9, label %57, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0
  %12 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 1
  %13 = bitcast %class.FX_PATHPOINT** %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %class.CFX_PathData* %0 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = sdiv exact i64 %17, 12
  %19 = inttoptr i64 %14 to %class.FX_PATHPOINT*
  %20 = tail call %class.FX_PATHPOINT* @_ZNSt3__16vectorI12FX_PATHPOINTNS_9allocatorIS1_EEE6insertINS_11__wrap_iterIPKS1_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISB_E9referenceEEE5valueENS6_IPS1_EEE4typeES9_SB_SB_(%"class.std::__1::vector"* %11, %class.FX_PATHPOINT* %19, %class.FX_PATHPOINT* %6, %class.FX_PATHPOINT* %8)
  %21 = icmp eq %class.CFX_Matrix* %2, null
  br i1 %21, label %57, label %22

22:                                               ; preds = %10
  %23 = load i64, i64* %13, align 8
  %24 = load i64, i64* %15, align 8
  %25 = sub i64 %23, %24
  %26 = sdiv exact i64 %25, 12
  %27 = icmp ult i64 %18, %26
  br i1 %27, label %28, label %57

28:                                               ; preds = %22
  %29 = bitcast %class.CFX_PTemplate* %4 to i8*
  %30 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 0
  %31 = bitcast %class.CFX_PTemplate* %4 to i32*
  %32 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %4, i64 0, i32 1
  %33 = bitcast float* %32 to i32*
  br label %34

34:                                               ; preds = %28, %50
  %35 = phi i64 [ %24, %28 ], [ %51, %50 ]
  %36 = phi i64 [ %18, %28 ], [ %52, %50 ]
  %37 = inttoptr i64 %35 to %class.FX_PATHPOINT*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #12
  %38 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %37, i64 %36, i32 0
  call void @_ZNK10CFX_Matrix9TransformERK13CFX_PTemplateIfE(%class.CFX_PTemplate* nonnull sret %4, %class.CFX_Matrix* nonnull %2, %class.CFX_PTemplate* dereferenceable(8) %38) #12
  %39 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %30, align 8
  %40 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %39, i64 %36, i32 0
  %41 = icmp eq %class.CFX_PTemplate* %40, %4
  %42 = ptrtoint %class.FX_PATHPOINT* %39 to i64
  br i1 %41, label %50, label %43

43:                                               ; preds = %34
  %44 = load i32, i32* %31, align 4
  %45 = bitcast %class.CFX_PTemplate* %40 to i32*
  store i32 %44, i32* %45, align 4
  %46 = load i32, i32* %33, align 4
  %47 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %39, i64 %36, i32 0, i32 1
  %48 = bitcast float* %47 to i32*
  store i32 %46, i32* %48, align 4
  %49 = load i64, i64* %15, align 8
  br label %50

50:                                               ; preds = %34, %43
  %51 = phi i64 [ %42, %34 ], [ %49, %43 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #12
  %52 = add nuw i64 %36, 1
  %53 = load i64, i64* %13, align 8
  %54 = sub i64 %53, %51
  %55 = sdiv exact i64 %54, 12
  %56 = icmp ult i64 %52, %55
  br i1 %56, label %34, label %57

57:                                               ; preds = %50, %22, %10, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #4

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %class.FX_PATHPOINT* @_ZNSt3__16vectorI12FX_PATHPOINTNS_9allocatorIS1_EEE6insertINS_11__wrap_iterIPKS1_EEEENS_9enable_ifIXaasr27__is_cpp17_forward_iteratorIT_EE5valuesr16is_constructibleIS1_NS_15iterator_traitsISB_E9referenceEEE5valueENS6_IPS1_EEE4typeES9_SB_SB_(%"class.std::__1::vector"*, %class.FX_PATHPOINT*, %class.FX_PATHPOINT*, %class.FX_PATHPOINT*) local_unnamed_addr #3 comdat align 2 {
  %5 = ptrtoint %class.FX_PATHPOINT* %1 to i64
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %7 = ptrtoint %class.FX_PATHPOINT* %2 to i64
  %8 = ptrtoint %class.FX_PATHPOINT* %3 to i64
  %9 = sub i64 %8, %7
  %10 = sdiv exact i64 %9, 12
  %11 = icmp sgt i64 %9, 0
  br i1 %11, label %12, label %253

12:                                               ; preds = %4
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %14 = bitcast %class.FX_PATHPOINT** %13 to i64*
  %15 = load i64, i64* %14, align 8
  %16 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %17 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %16, align 8
  %18 = ptrtoint %class.FX_PATHPOINT* %17 to i64
  %19 = sub i64 %15, %18
  %20 = sdiv exact i64 %19, 12
  %21 = icmp sgt i64 %10, %20
  %22 = bitcast %class.FX_PATHPOINT** %16 to i64*
  br i1 %21, label %136, label %23

23:                                               ; preds = %12
  %24 = sub i64 %18, %5
  %25 = sdiv exact i64 %24, 12
  %26 = icmp sgt i64 %10, %25
  br i1 %26, label %27, label %56

27:                                               ; preds = %23
  %28 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %2, i64 %25
  %29 = icmp eq %class.FX_PATHPOINT* %28, %3
  br i1 %29, label %51, label %30

30:                                               ; preds = %27, %30
  %31 = phi %class.FX_PATHPOINT* [ %47, %30 ], [ %17, %27 ]
  %32 = phi %class.FX_PATHPOINT* [ %46, %30 ], [ %28, %27 ]
  %33 = bitcast %class.FX_PATHPOINT* %32 to i32*
  %34 = load i32, i32* %33, align 4
  %35 = bitcast %class.FX_PATHPOINT* %31 to i32*
  store i32 %34, i32* %35, align 4
  %36 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %31, i64 0, i32 0, i32 1
  %37 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %32, i64 0, i32 0, i32 1
  %38 = bitcast float* %37 to i32*
  %39 = load i32, i32* %38, align 4
  %40 = bitcast float* %36 to i32*
  store i32 %39, i32* %40, align 4
  %41 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %31, i64 0, i32 1
  %42 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %32, i64 0, i32 1
  %43 = bitcast i8* %42 to i16*
  %44 = bitcast i8* %41 to i16*
  %45 = load i16, i16* %43, align 4
  store i16 %45, i16* %44, align 4
  %46 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %32, i64 1
  %47 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %31, i64 1
  %48 = icmp eq %class.FX_PATHPOINT* %46, %3
  br i1 %48, label %49, label %30

49:                                               ; preds = %30
  %50 = ptrtoint %class.FX_PATHPOINT* %47 to i64
  br label %51

51:                                               ; preds = %49, %27
  %52 = phi i64 [ %18, %27 ], [ %50, %49 ]
  store i64 %52, i64* %22, align 8
  %53 = icmp sgt i64 %24, 0
  br i1 %53, label %54, label %253

54:                                               ; preds = %51
  %55 = inttoptr i64 %52 to %class.FX_PATHPOINT*
  br label %56

56:                                               ; preds = %54, %23
  %57 = phi i64 [ %52, %54 ], [ %18, %23 ]
  %58 = phi %class.FX_PATHPOINT* [ %55, %54 ], [ %17, %23 ]
  %59 = phi %class.FX_PATHPOINT* [ %28, %54 ], [ %3, %23 ]
  %60 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %1, i64 %10
  %61 = ptrtoint %class.FX_PATHPOINT* %60 to i64
  %62 = sub i64 %57, %61
  %63 = sdiv exact i64 %62, 12
  %64 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %1, i64 %63
  %65 = icmp ult %class.FX_PATHPOINT* %64, %17
  br i1 %65, label %93, label %68

66:                                               ; preds = %93
  %67 = ptrtoint %class.FX_PATHPOINT* %110 to i64
  br label %68

68:                                               ; preds = %66, %56
  %69 = phi i64 [ %67, %66 ], [ %57, %56 ]
  store i64 %69, i64* %22, align 8
  %70 = icmp eq i64 %62, 0
  br i1 %70, label %112, label %71

71:                                               ; preds = %68, %86
  %72 = phi %class.FX_PATHPOINT* [ %75, %86 ], [ %58, %68 ]
  %73 = phi %class.FX_PATHPOINT* [ %74, %86 ], [ %64, %68 ]
  %74 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %73, i64 -1
  %75 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %72, i64 -1
  %76 = icmp eq %class.FX_PATHPOINT* %72, %73
  br i1 %76, label %86, label %77

77:                                               ; preds = %71
  %78 = bitcast %class.FX_PATHPOINT* %74 to i32*
  %79 = load i32, i32* %78, align 4
  %80 = bitcast %class.FX_PATHPOINT* %75 to i32*
  store i32 %79, i32* %80, align 4
  %81 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %73, i64 -1, i32 0, i32 1
  %82 = bitcast float* %81 to i32*
  %83 = load i32, i32* %82, align 4
  %84 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %72, i64 -1, i32 0, i32 1
  %85 = bitcast float* %84 to i32*
  store i32 %83, i32* %85, align 4
  br label %86

86:                                               ; preds = %77, %71
  %87 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %72, i64 -1, i32 1
  %88 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %73, i64 -1, i32 1
  %89 = bitcast i8* %88 to i16*
  %90 = bitcast i8* %87 to i16*
  %91 = load i16, i16* %89, align 4
  store i16 %91, i16* %90, align 4
  %92 = icmp eq %class.FX_PATHPOINT* %74, %1
  br i1 %92, label %112, label %71

93:                                               ; preds = %56, %93
  %94 = phi %class.FX_PATHPOINT* [ %110, %93 ], [ %58, %56 ]
  %95 = phi %class.FX_PATHPOINT* [ %109, %93 ], [ %64, %56 ]
  %96 = bitcast %class.FX_PATHPOINT* %95 to i32*
  %97 = load i32, i32* %96, align 4
  %98 = bitcast %class.FX_PATHPOINT* %94 to i32*
  store i32 %97, i32* %98, align 4
  %99 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %94, i64 0, i32 0, i32 1
  %100 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %95, i64 0, i32 0, i32 1
  %101 = bitcast float* %100 to i32*
  %102 = load i32, i32* %101, align 4
  %103 = bitcast float* %99 to i32*
  store i32 %102, i32* %103, align 4
  %104 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %94, i64 0, i32 1
  %105 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %95, i64 0, i32 1
  %106 = bitcast i8* %105 to i16*
  %107 = bitcast i8* %104 to i16*
  %108 = load i16, i16* %106, align 4
  store i16 %108, i16* %107, align 4
  %109 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %95, i64 1
  %110 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %94, i64 1
  %111 = icmp ult %class.FX_PATHPOINT* %109, %17
  br i1 %111, label %93, label %66

112:                                              ; preds = %86, %68
  %113 = icmp eq %class.FX_PATHPOINT* %59, %2
  br i1 %113, label %253, label %114

114:                                              ; preds = %112, %127
  %115 = phi %class.FX_PATHPOINT* [ %134, %127 ], [ %1, %112 ]
  %116 = phi %class.FX_PATHPOINT* [ %133, %127 ], [ %2, %112 ]
  %117 = icmp eq %class.FX_PATHPOINT* %115, %116
  br i1 %117, label %127, label %118

118:                                              ; preds = %114
  %119 = bitcast %class.FX_PATHPOINT* %116 to i32*
  %120 = load i32, i32* %119, align 4
  %121 = bitcast %class.FX_PATHPOINT* %115 to i32*
  store i32 %120, i32* %121, align 4
  %122 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %116, i64 0, i32 0, i32 1
  %123 = bitcast float* %122 to i32*
  %124 = load i32, i32* %123, align 4
  %125 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %115, i64 0, i32 0, i32 1
  %126 = bitcast float* %125 to i32*
  store i32 %124, i32* %126, align 4
  br label %127

127:                                              ; preds = %118, %114
  %128 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %115, i64 0, i32 1
  %129 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %116, i64 0, i32 1
  %130 = bitcast i8* %129 to i16*
  %131 = bitcast i8* %128 to i16*
  %132 = load i16, i16* %130, align 4
  store i16 %132, i16* %131, align 4
  %133 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %116, i64 1
  %134 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %115, i64 1
  %135 = icmp eq %class.FX_PATHPOINT* %133, %59
  br i1 %135, label %253, label %114

136:                                              ; preds = %12
  %137 = bitcast %"class.std::__1::vector"* %0 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = sub i64 %18, %138
  %140 = sdiv exact i64 %139, 12
  %141 = add nsw i64 %140, %10
  %142 = icmp ugt i64 %141, 1537228672809129301
  br i1 %142, label %143, label %145

143:                                              ; preds = %136
  %144 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %144) #13
  unreachable

145:                                              ; preds = %136
  %146 = sub i64 %15, %138
  %147 = sdiv exact i64 %146, 12
  %148 = icmp ult i64 %147, 768614336404564650
  br i1 %148, label %152, label %149

149:                                              ; preds = %145
  %150 = sub i64 %5, %138
  %151 = sdiv exact i64 %150, 12
  br label %159

152:                                              ; preds = %145
  %153 = shl nsw i64 %147, 1
  %154 = icmp ult i64 %153, %141
  %155 = select i1 %154, i64 %141, i64 %153
  %156 = sub i64 %5, %138
  %157 = sdiv exact i64 %156, 12
  %158 = icmp eq i64 %155, 0
  br i1 %158, label %165, label %159

159:                                              ; preds = %152, %149
  %160 = phi i64 [ %151, %149 ], [ %157, %152 ]
  %161 = phi i64 [ 1537228672809129301, %149 ], [ %155, %152 ]
  %162 = mul i64 %161, 12
  %163 = tail call i8* @_Znwm(i64 %162) #14
  %164 = bitcast i8* %163 to %class.FX_PATHPOINT*
  br label %165

165:                                              ; preds = %159, %152
  %166 = phi i64 [ %160, %159 ], [ %157, %152 ]
  %167 = phi i64 [ %161, %159 ], [ 0, %152 ]
  %168 = phi %class.FX_PATHPOINT* [ %164, %159 ], [ null, %152 ]
  %169 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %168, i64 %166
  %170 = ptrtoint %class.FX_PATHPOINT* %169 to i64
  %171 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %168, i64 %167
  %172 = ptrtoint %class.FX_PATHPOINT* %171 to i64
  %173 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %169, i64 %10
  br label %174

174:                                              ; preds = %165, %174
  %175 = phi %class.FX_PATHPOINT* [ %191, %174 ], [ %169, %165 ]
  %176 = phi i64 [ %192, %174 ], [ %170, %165 ]
  %177 = phi %class.FX_PATHPOINT* [ %193, %174 ], [ %2, %165 ]
  %178 = bitcast %class.FX_PATHPOINT* %177 to i32*
  %179 = load i32, i32* %178, align 4
  %180 = inttoptr i64 %176 to i32*
  store i32 %179, i32* %180, align 4
  %181 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %175, i64 0, i32 0, i32 1
  %182 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %177, i64 0, i32 0, i32 1
  %183 = bitcast float* %182 to i32*
  %184 = load i32, i32* %183, align 4
  %185 = bitcast float* %181 to i32*
  store i32 %184, i32* %185, align 4
  %186 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %175, i64 0, i32 1
  %187 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %177, i64 0, i32 1
  %188 = bitcast i8* %187 to i16*
  %189 = bitcast i8* %186 to i16*
  %190 = load i16, i16* %188, align 4
  store i16 %190, i16* %189, align 4
  %191 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %175, i64 1
  %192 = ptrtoint %class.FX_PATHPOINT* %191 to i64
  %193 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %177, i64 1
  %194 = icmp eq %class.FX_PATHPOINT* %173, %191
  br i1 %194, label %195, label %174

195:                                              ; preds = %174
  %196 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %6, align 8
  %197 = icmp eq %class.FX_PATHPOINT* %196, %1
  br i1 %197, label %219, label %198

198:                                              ; preds = %195, %198
  %199 = phi %class.FX_PATHPOINT* [ %201, %198 ], [ %169, %195 ]
  %200 = phi %class.FX_PATHPOINT* [ %202, %198 ], [ %1, %195 ]
  %201 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %199, i64 -1
  %202 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %200, i64 -1
  %203 = bitcast %class.FX_PATHPOINT* %202 to i32*
  %204 = load i32, i32* %203, align 4
  %205 = bitcast %class.FX_PATHPOINT* %201 to i32*
  store i32 %204, i32* %205, align 4
  %206 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %199, i64 -1, i32 0, i32 1
  %207 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %200, i64 -1, i32 0, i32 1
  %208 = bitcast float* %207 to i32*
  %209 = load i32, i32* %208, align 4
  %210 = bitcast float* %206 to i32*
  store i32 %209, i32* %210, align 4
  %211 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %199, i64 -1, i32 1
  %212 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %200, i64 -1, i32 1
  %213 = bitcast i8* %212 to i16*
  %214 = bitcast i8* %211 to i16*
  %215 = load i16, i16* %213, align 4
  store i16 %215, i16* %214, align 4
  %216 = icmp eq %class.FX_PATHPOINT* %202, %196
  br i1 %216, label %217, label %198

217:                                              ; preds = %198
  %218 = ptrtoint %class.FX_PATHPOINT* %201 to i64
  br label %219

219:                                              ; preds = %217, %195
  %220 = phi i64 [ %170, %195 ], [ %218, %217 ]
  %221 = phi %class.FX_PATHPOINT* [ %169, %195 ], [ %201, %217 ]
  %222 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %16, align 8
  %223 = icmp eq %class.FX_PATHPOINT* %222, %1
  br i1 %223, label %224, label %226

224:                                              ; preds = %219
  %225 = ptrtoint %class.FX_PATHPOINT* %221 to i64
  br label %245

226:                                              ; preds = %219, %226
  %227 = phi %class.FX_PATHPOINT* [ %243, %226 ], [ %173, %219 ]
  %228 = phi %class.FX_PATHPOINT* [ %242, %226 ], [ %1, %219 ]
  %229 = bitcast %class.FX_PATHPOINT* %228 to i32*
  %230 = load i32, i32* %229, align 4
  %231 = bitcast %class.FX_PATHPOINT* %227 to i32*
  store i32 %230, i32* %231, align 4
  %232 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %227, i64 0, i32 0, i32 1
  %233 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %228, i64 0, i32 0, i32 1
  %234 = bitcast float* %233 to i32*
  %235 = load i32, i32* %234, align 4
  %236 = bitcast float* %232 to i32*
  store i32 %235, i32* %236, align 4
  %237 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %227, i64 0, i32 1
  %238 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %228, i64 0, i32 1
  %239 = bitcast i8* %238 to i16*
  %240 = bitcast i8* %237 to i16*
  %241 = load i16, i16* %239, align 4
  store i16 %241, i16* %240, align 4
  %242 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %228, i64 1
  %243 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %227, i64 1
  %244 = icmp eq %class.FX_PATHPOINT* %242, %222
  br i1 %244, label %245, label %226

245:                                              ; preds = %226, %224
  %246 = phi %class.FX_PATHPOINT* [ %173, %224 ], [ %243, %226 ]
  %247 = phi i64 [ %225, %224 ], [ %220, %226 ]
  %248 = ptrtoint %class.FX_PATHPOINT* %246 to i64
  %249 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %6, align 8
  store i64 %247, i64* %137, align 8
  store i64 %248, i64* %22, align 8
  store i64 %172, i64* %14, align 8
  %250 = icmp eq %class.FX_PATHPOINT* %249, null
  br i1 %250, label %253, label %251

251:                                              ; preds = %245
  %252 = bitcast %class.FX_PATHPOINT* %249 to i8*
  tail call void @_ZdlPv(i8* %252) #14
  br label %253

253:                                              ; preds = %127, %251, %245, %51, %112, %4
  %254 = phi %class.FX_PATHPOINT* [ %1, %4 ], [ %1, %112 ], [ %1, %51 ], [ %169, %245 ], [ %169, %251 ], [ %1, %127 ]
  ret %class.FX_PATHPOINT* %254
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #4

declare void @_ZNK10CFX_Matrix9TransformERK13CFX_PTemplateIfE(%class.CFX_PTemplate* sret, %class.CFX_Matrix*, %class.CFX_PTemplate* dereferenceable(8)) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData*, %class.CFX_PTemplate* nocapture readonly dereferenceable(8), i8 zeroext) local_unnamed_addr #3 align 2 {
  %4 = bitcast %class.CFX_PTemplate* %1 to i32*
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %1, i64 0, i32 1
  %7 = bitcast float* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 1
  %10 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %9, align 8
  %11 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %12 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %11, align 8
  %13 = icmp ult %class.FX_PATHPOINT* %10, %12
  %14 = ptrtoint %class.FX_PATHPOINT* %12 to i64
  br i1 %13, label %15, label %25

15:                                               ; preds = %3
  %16 = bitcast %class.FX_PATHPOINT* %10 to i32*
  store i32 %5, i32* %16, align 4
  %17 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %10, i64 0, i32 0, i32 1
  %18 = bitcast float* %17 to i32*
  store i32 %8, i32* %18, align 4
  %19 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %10, i64 0, i32 1
  %20 = bitcast i8* %19 to i16*
  %21 = zext i8 %2 to i16
  store i16 %21, i16* %20, align 4
  %22 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %10, i64 1
  %23 = ptrtoint %class.FX_PATHPOINT* %22 to i64
  %24 = bitcast %class.FX_PATHPOINT** %9 to i64*
  store i64 %23, i64* %24, align 8
  br label %99

25:                                               ; preds = %3
  %26 = ptrtoint %class.FX_PATHPOINT* %10 to i64
  %27 = bitcast %class.FX_PATHPOINT** %9 to i64*
  %28 = bitcast %class.CFX_PathData* %0 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %26, %29
  %31 = sdiv exact i64 %30, 12
  %32 = add nsw i64 %31, 1
  %33 = icmp ugt i64 %32, 1537228672809129301
  br i1 %33, label %34, label %36

34:                                               ; preds = %25
  %35 = bitcast %class.CFX_PathData* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %35) #13
  unreachable

36:                                               ; preds = %25
  %37 = bitcast %class.FX_PATHPOINT** %11 to i64*
  %38 = sub i64 %14, %29
  %39 = sdiv exact i64 %38, 12
  %40 = icmp ult i64 %39, 768614336404564650
  br i1 %40, label %41, label %46

41:                                               ; preds = %36
  %42 = shl nsw i64 %39, 1
  %43 = icmp ult i64 %42, %32
  %44 = select i1 %43, i64 %32, i64 %42
  %45 = icmp eq i64 %44, 0
  br i1 %45, label %51, label %46

46:                                               ; preds = %41, %36
  %47 = phi i64 [ %44, %41 ], [ 1537228672809129301, %36 ]
  %48 = mul i64 %47, 12
  %49 = tail call i8* @_Znwm(i64 %48) #14
  %50 = bitcast i8* %49 to %class.FX_PATHPOINT*
  br label %51

51:                                               ; preds = %46, %41
  %52 = phi i64 [ %47, %46 ], [ 0, %41 ]
  %53 = phi %class.FX_PATHPOINT* [ %50, %46 ], [ null, %41 ]
  %54 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %53, i64 %31
  %55 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %53, i64 %52
  %56 = ptrtoint %class.FX_PATHPOINT* %55 to i64
  %57 = bitcast %class.FX_PATHPOINT* %54 to i32*
  store i32 %5, i32* %57, align 4
  %58 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %53, i64 %31, i32 0, i32 1
  %59 = bitcast float* %58 to i32*
  store i32 %8, i32* %59, align 4
  %60 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %53, i64 %31, i32 1
  %61 = bitcast i8* %60 to i16*
  %62 = zext i8 %2 to i16
  store i16 %62, i16* %61, align 4
  %63 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %54, i64 1
  %64 = ptrtoint %class.FX_PATHPOINT* %63 to i64
  %65 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 0
  %66 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %65, align 8
  %67 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %9, align 8
  %68 = icmp eq %class.FX_PATHPOINT* %67, %66
  br i1 %68, label %69, label %71

69:                                               ; preds = %51
  %70 = ptrtoint %class.FX_PATHPOINT* %66 to i64
  br label %92

71:                                               ; preds = %51, %71
  %72 = phi %class.FX_PATHPOINT* [ %74, %71 ], [ %54, %51 ]
  %73 = phi %class.FX_PATHPOINT* [ %75, %71 ], [ %67, %51 ]
  %74 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %72, i64 -1
  %75 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %73, i64 -1
  %76 = bitcast %class.FX_PATHPOINT* %75 to i32*
  %77 = load i32, i32* %76, align 4
  %78 = bitcast %class.FX_PATHPOINT* %74 to i32*
  store i32 %77, i32* %78, align 4
  %79 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %72, i64 -1, i32 0, i32 1
  %80 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %73, i64 -1, i32 0, i32 1
  %81 = bitcast float* %80 to i32*
  %82 = load i32, i32* %81, align 4
  %83 = bitcast float* %79 to i32*
  store i32 %82, i32* %83, align 4
  %84 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %72, i64 -1, i32 1
  %85 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %73, i64 -1, i32 1
  %86 = bitcast i8* %85 to i16*
  %87 = bitcast i8* %84 to i16*
  %88 = load i16, i16* %86, align 4
  store i16 %88, i16* %87, align 4
  %89 = icmp eq %class.FX_PATHPOINT* %75, %66
  br i1 %89, label %90, label %71

90:                                               ; preds = %71
  %91 = load i64, i64* %28, align 8
  br label %92

92:                                               ; preds = %90, %69
  %93 = phi %class.FX_PATHPOINT* [ %54, %69 ], [ %74, %90 ]
  %94 = phi i64 [ %70, %69 ], [ %91, %90 ]
  %95 = ptrtoint %class.FX_PATHPOINT* %93 to i64
  store i64 %95, i64* %28, align 8
  store i64 %64, i64* %27, align 8
  store i64 %56, i64* %37, align 8
  %96 = icmp eq i64 %94, 0
  br i1 %96, label %99, label %97

97:                                               ; preds = %92
  %98 = inttoptr i64 %94 to i8*
  tail call void @_ZdlPv(i8* %98) #14
  br label %99

99:                                               ; preds = %97, %92, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_PathData19AppendPointAndCloseERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData*, %class.CFX_PTemplate* nocapture readonly dereferenceable(8), i8 zeroext) local_unnamed_addr #3 align 2 {
  %4 = bitcast %class.CFX_PTemplate* %1 to i32*
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %1, i64 0, i32 1
  %7 = bitcast float* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 1
  %10 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %9, align 8
  %11 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 2, i32 0, i32 0
  %12 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %11, align 8
  %13 = icmp ult %class.FX_PATHPOINT* %10, %12
  %14 = ptrtoint %class.FX_PATHPOINT* %12 to i64
  br i1 %13, label %15, label %26

15:                                               ; preds = %3
  %16 = bitcast %class.FX_PATHPOINT* %10 to i32*
  store i32 %5, i32* %16, align 4
  %17 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %10, i64 0, i32 0, i32 1
  %18 = bitcast float* %17 to i32*
  store i32 %8, i32* %18, align 4
  %19 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %10, i64 0, i32 1
  %20 = bitcast i8* %19 to i16*
  %21 = zext i8 %2 to i16
  %22 = or i16 %21, 256
  store i16 %22, i16* %20, align 4
  %23 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %10, i64 1
  %24 = ptrtoint %class.FX_PATHPOINT* %23 to i64
  %25 = bitcast %class.FX_PATHPOINT** %9 to i64*
  store i64 %24, i64* %25, align 8
  br label %101

26:                                               ; preds = %3
  %27 = ptrtoint %class.FX_PATHPOINT* %10 to i64
  %28 = bitcast %class.FX_PATHPOINT** %9 to i64*
  %29 = bitcast %class.CFX_PathData* %0 to i64*
  %30 = load i64, i64* %29, align 8
  %31 = sub i64 %27, %30
  %32 = sdiv exact i64 %31, 12
  %33 = add nsw i64 %32, 1
  %34 = icmp ugt i64 %33, 1537228672809129301
  br i1 %34, label %35, label %37

35:                                               ; preds = %26
  %36 = bitcast %class.CFX_PathData* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %36) #13
  unreachable

37:                                               ; preds = %26
  %38 = bitcast %class.FX_PATHPOINT** %11 to i64*
  %39 = sub i64 %14, %30
  %40 = sdiv exact i64 %39, 12
  %41 = icmp ult i64 %40, 768614336404564650
  br i1 %41, label %42, label %47

42:                                               ; preds = %37
  %43 = shl nsw i64 %40, 1
  %44 = icmp ult i64 %43, %33
  %45 = select i1 %44, i64 %33, i64 %43
  %46 = icmp eq i64 %45, 0
  br i1 %46, label %52, label %47

47:                                               ; preds = %42, %37
  %48 = phi i64 [ %45, %42 ], [ 1537228672809129301, %37 ]
  %49 = mul i64 %48, 12
  %50 = tail call i8* @_Znwm(i64 %49) #14
  %51 = bitcast i8* %50 to %class.FX_PATHPOINT*
  br label %52

52:                                               ; preds = %47, %42
  %53 = phi i64 [ %48, %47 ], [ 0, %42 ]
  %54 = phi %class.FX_PATHPOINT* [ %51, %47 ], [ null, %42 ]
  %55 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %54, i64 %32
  %56 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %54, i64 %53
  %57 = ptrtoint %class.FX_PATHPOINT* %56 to i64
  %58 = bitcast %class.FX_PATHPOINT* %55 to i32*
  store i32 %5, i32* %58, align 4
  %59 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %54, i64 %32, i32 0, i32 1
  %60 = bitcast float* %59 to i32*
  store i32 %8, i32* %60, align 4
  %61 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %54, i64 %32, i32 1
  %62 = bitcast i8* %61 to i16*
  %63 = zext i8 %2 to i16
  %64 = or i16 %63, 256
  store i16 %64, i16* %62, align 4
  %65 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %55, i64 1
  %66 = ptrtoint %class.FX_PATHPOINT* %65 to i64
  %67 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 0
  %68 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %67, align 8
  %69 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %9, align 8
  %70 = icmp eq %class.FX_PATHPOINT* %69, %68
  br i1 %70, label %71, label %73

71:                                               ; preds = %52
  %72 = ptrtoint %class.FX_PATHPOINT* %68 to i64
  br label %94

73:                                               ; preds = %52, %73
  %74 = phi %class.FX_PATHPOINT* [ %76, %73 ], [ %55, %52 ]
  %75 = phi %class.FX_PATHPOINT* [ %77, %73 ], [ %69, %52 ]
  %76 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %74, i64 -1
  %77 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %75, i64 -1
  %78 = bitcast %class.FX_PATHPOINT* %77 to i32*
  %79 = load i32, i32* %78, align 4
  %80 = bitcast %class.FX_PATHPOINT* %76 to i32*
  store i32 %79, i32* %80, align 4
  %81 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %74, i64 -1, i32 0, i32 1
  %82 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %75, i64 -1, i32 0, i32 1
  %83 = bitcast float* %82 to i32*
  %84 = load i32, i32* %83, align 4
  %85 = bitcast float* %81 to i32*
  store i32 %84, i32* %85, align 4
  %86 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %74, i64 -1, i32 1
  %87 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %75, i64 -1, i32 1
  %88 = bitcast i8* %87 to i16*
  %89 = bitcast i8* %86 to i16*
  %90 = load i16, i16* %88, align 4
  store i16 %90, i16* %89, align 4
  %91 = icmp eq %class.FX_PATHPOINT* %77, %68
  br i1 %91, label %92, label %73

92:                                               ; preds = %73
  %93 = load i64, i64* %29, align 8
  br label %94

94:                                               ; preds = %92, %71
  %95 = phi %class.FX_PATHPOINT* [ %55, %71 ], [ %76, %92 ]
  %96 = phi i64 [ %72, %71 ], [ %93, %92 ]
  %97 = ptrtoint %class.FX_PATHPOINT* %95 to i64
  store i64 %97, i64* %29, align 8
  store i64 %66, i64* %28, align 8
  store i64 %57, i64* %38, align 8
  %98 = icmp eq i64 %96, 0
  br i1 %98, label %101, label %99

99:                                               ; preds = %94
  %100 = inttoptr i64 %96 to i8*
  tail call void @_ZdlPv(i8* %100) #14
  br label %101

101:                                              ; preds = %99, %94, %15
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_PathData10AppendLineERK13CFX_PTemplateIfES3_(%class.CFX_PathData*, %class.CFX_PTemplate* nocapture readonly dereferenceable(8), %class.CFX_PTemplate* nocapture readonly dereferenceable(8)) local_unnamed_addr #3 align 2 {
  %4 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %4, align 8
  %6 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %6, align 8
  %8 = icmp eq %class.FX_PATHPOINT* %5, %7
  br i1 %8, label %27, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %7, i64 -1, i32 0, i32 0
  %11 = load float, float* %10, align 4
  %12 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %1, i64 0, i32 0
  %13 = load float, float* %12, align 4
  %14 = fsub float %11, %13
  %15 = tail call float @llvm.fabs.f32(float %14) #12
  %16 = fpext float %15 to double
  %17 = fcmp ogt double %16, 1.000000e-03
  br i1 %17, label %27, label %18

18:                                               ; preds = %9
  %19 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %7, i64 -1, i32 0, i32 1
  %20 = load float, float* %19, align 4
  %21 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %1, i64 0, i32 1
  %22 = load float, float* %21, align 4
  %23 = fsub float %20, %22
  %24 = tail call float @llvm.fabs.f32(float %23) #12
  %25 = fpext float %24 to double
  %26 = fcmp ogt double %25, 1.000000e-03
  br i1 %26, label %27, label %28

27:                                               ; preds = %18, %9, %3
  tail call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %0, %class.CFX_PTemplate* dereferenceable(8) %1, i8 zeroext 2)
  br label %28

28:                                               ; preds = %27, %18
  tail call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %0, %class.CFX_PTemplate* dereferenceable(8) %2, i8 zeroext 0)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_PathData15AppendFloatRectERK13CFX_FloatRect(%class.CFX_PathData*, %class.CFX_FloatRect* nocapture readonly dereferenceable(16)) local_unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 0
  %4 = load float, float* %3, align 4
  %5 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 1
  %6 = load float, float* %5, align 4
  %7 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 2
  %8 = load float, float* %7, align 4
  %9 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %1, i64 0, i32 3
  %10 = load float, float* %9, align 4
  tail call void @_ZN12CFX_PathData10AppendRectEffff(%class.CFX_PathData* %0, float %4, float %6, float %8, float %10)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_PathData10AppendRectEffff(%class.CFX_PathData*, float, float, float, float) local_unnamed_addr #3 align 2 {
  %6 = alloca %class.CFX_PTemplate, align 4
  %7 = alloca %class.CFX_PTemplate, align 4
  %8 = alloca %class.CFX_PTemplate, align 4
  %9 = alloca %class.CFX_PTemplate, align 4
  %10 = bitcast %class.CFX_PTemplate* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #12
  %11 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %6, i64 0, i32 0
  %12 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %6, i64 0, i32 1
  store float %1, float* %11, align 4
  store float %2, float* %12, align 4
  %13 = bitcast %class.CFX_PTemplate* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #12
  %14 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %7, i64 0, i32 0
  %15 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %7, i64 0, i32 1
  store float %1, float* %14, align 4
  store float %4, float* %15, align 4
  %16 = bitcast %class.CFX_PTemplate* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #12
  %17 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %8, i64 0, i32 0
  %18 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %8, i64 0, i32 1
  store float %3, float* %17, align 4
  store float %4, float* %18, align 4
  %19 = bitcast %class.CFX_PTemplate* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #12
  %20 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %9, i64 0, i32 0
  %21 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %9, i64 0, i32 1
  store float %3, float* %20, align 4
  store float %2, float* %21, align 4
  %22 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 0
  %23 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %22, align 8
  %24 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 1
  %25 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %24, align 8
  %26 = icmp eq %class.FX_PATHPOINT* %23, %25
  br i1 %26, label %41, label %27

27:                                               ; preds = %5
  %28 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %25, i64 -1, i32 0, i32 0
  %29 = load float, float* %28, align 4
  %30 = fsub float %29, %1
  %31 = tail call float @llvm.fabs.f32(float %30) #12
  %32 = fpext float %31 to double
  %33 = fcmp ogt double %32, 1.000000e-03
  br i1 %33, label %41, label %34

34:                                               ; preds = %27
  %35 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %25, i64 -1, i32 0, i32 1
  %36 = load float, float* %35, align 4
  %37 = fsub float %36, %2
  %38 = tail call float @llvm.fabs.f32(float %37) #12
  %39 = fpext float %38 to double
  %40 = fcmp ogt double %39, 1.000000e-03
  br i1 %40, label %41, label %42

41:                                               ; preds = %34, %27, %5
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %0, %class.CFX_PTemplate* nonnull dereferenceable(8) %6, i8 zeroext 2) #12
  br label %42

42:                                               ; preds = %34, %41
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %0, %class.CFX_PTemplate* nonnull dereferenceable(8) %7, i8 zeroext 0) #12
  %43 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %22, align 8
  %44 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %24, align 8
  %45 = icmp eq %class.FX_PATHPOINT* %43, %44
  br i1 %45, label %60, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %44, i64 -1, i32 0, i32 0
  %48 = load float, float* %47, align 4
  %49 = fsub float %48, %1
  %50 = tail call float @llvm.fabs.f32(float %49) #12
  %51 = fpext float %50 to double
  %52 = fcmp ogt double %51, 1.000000e-03
  br i1 %52, label %60, label %53

53:                                               ; preds = %46
  %54 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %44, i64 -1, i32 0, i32 1
  %55 = load float, float* %54, align 4
  %56 = fsub float %55, %4
  %57 = tail call float @llvm.fabs.f32(float %56) #12
  %58 = fpext float %57 to double
  %59 = fcmp ogt double %58, 1.000000e-03
  br i1 %59, label %60, label %61

60:                                               ; preds = %53, %46, %42
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %0, %class.CFX_PTemplate* nonnull dereferenceable(8) %7, i8 zeroext 2) #12
  br label %61

61:                                               ; preds = %53, %60
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %0, %class.CFX_PTemplate* nonnull dereferenceable(8) %8, i8 zeroext 0) #12
  %62 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %22, align 8
  %63 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %24, align 8
  %64 = icmp eq %class.FX_PATHPOINT* %62, %63
  br i1 %64, label %79, label %65

65:                                               ; preds = %61
  %66 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %63, i64 -1, i32 0, i32 0
  %67 = load float, float* %66, align 4
  %68 = fsub float %67, %3
  %69 = tail call float @llvm.fabs.f32(float %68) #12
  %70 = fpext float %69 to double
  %71 = fcmp ogt double %70, 1.000000e-03
  br i1 %71, label %79, label %72

72:                                               ; preds = %65
  %73 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %63, i64 -1, i32 0, i32 1
  %74 = load float, float* %73, align 4
  %75 = fsub float %74, %4
  %76 = tail call float @llvm.fabs.f32(float %75) #12
  %77 = fpext float %76 to double
  %78 = fcmp ogt double %77, 1.000000e-03
  br i1 %78, label %79, label %80

79:                                               ; preds = %72, %65, %61
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %0, %class.CFX_PTemplate* nonnull dereferenceable(8) %8, i8 zeroext 2) #12
  br label %80

80:                                               ; preds = %72, %79
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %0, %class.CFX_PTemplate* nonnull dereferenceable(8) %9, i8 zeroext 0) #12
  %81 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %22, align 8
  %82 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %24, align 8
  %83 = icmp eq %class.FX_PATHPOINT* %81, %82
  br i1 %83, label %98, label %84

84:                                               ; preds = %80
  %85 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %82, i64 -1, i32 0, i32 0
  %86 = load float, float* %85, align 4
  %87 = fsub float %86, %3
  %88 = tail call float @llvm.fabs.f32(float %87) #12
  %89 = fpext float %88 to double
  %90 = fcmp ogt double %89, 1.000000e-03
  br i1 %90, label %98, label %91

91:                                               ; preds = %84
  %92 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %82, i64 -1, i32 0, i32 1
  %93 = load float, float* %92, align 4
  %94 = fsub float %93, %2
  %95 = tail call float @llvm.fabs.f32(float %94) #12
  %96 = fpext float %95 to double
  %97 = fcmp ogt double %96, 1.000000e-03
  br i1 %97, label %98, label %99

98:                                               ; preds = %91, %84, %80
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %0, %class.CFX_PTemplate* nonnull dereferenceable(8) %9, i8 zeroext 2) #12
  br label %99

99:                                               ; preds = %91, %98
  call void @_ZN12CFX_PathData11AppendPointERK13CFX_PTemplateIfE9FXPT_TYPE(%class.CFX_PathData* %0, %class.CFX_PTemplate* nonnull dereferenceable(8) %6, i8 zeroext 0) #12
  %100 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %22, align 8
  %101 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %24, align 8
  %102 = icmp eq %class.FX_PATHPOINT* %100, %101
  br i1 %102, label %105, label %103

103:                                              ; preds = %99
  %104 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %101, i64 -1, i32 2
  store i8 1, i8* %104, align 1
  br label %105

105:                                              ; preds = %99, %103
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZNK12CFX_PathData14GetBoundingBoxEv(%class.CFX_PathData* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = alloca %class.CFX_FloatRect, align 8
  %3 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %3, align 8
  %5 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 1
  %6 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %5, align 8
  %7 = icmp eq %class.FX_PATHPOINT* %4, %6
  br i1 %7, label %36, label %8

8:                                                ; preds = %1
  %9 = bitcast %class.CFX_FloatRect* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #12
  %10 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %2, i64 0, i32 2
  %11 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %4, i64 0, i32 0
  %12 = bitcast %class.CFX_FloatRect* %2 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -1, i64 16, i1 false)
  call void @_ZN13CFX_FloatRectC1ERK13CFX_PTemplateIfE(%class.CFX_FloatRect* nonnull %2, %class.CFX_PTemplate* dereferenceable(8) %11) #12
  %13 = bitcast %class.FX_PATHPOINT** %5 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %class.CFX_PathData* %0 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = sub i64 %14, %16
  %18 = sdiv exact i64 %17, 12
  %19 = icmp ugt i64 %18, 1
  br i1 %19, label %25, label %20

20:                                               ; preds = %25, %8
  %21 = bitcast %class.CFX_FloatRect* %2 to <2 x float>*
  %22 = load <2 x float>, <2 x float>* %21, align 8
  %23 = bitcast float* %10 to <2 x float>*
  %24 = load <2 x float>, <2 x float>* %23, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #12
  br label %36

25:                                               ; preds = %8, %25
  %26 = phi i64 [ %32, %25 ], [ %16, %8 ]
  %27 = phi i64 [ %30, %25 ], [ 1, %8 ]
  %28 = inttoptr i64 %26 to %class.FX_PATHPOINT*
  %29 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %28, i64 %27, i32 0
  call void @_ZN13CFX_FloatRect10UpdateRectERK13CFX_PTemplateIfE(%class.CFX_FloatRect* nonnull %2, %class.CFX_PTemplate* dereferenceable(8) %29) #12
  %30 = add nuw i64 %27, 1
  %31 = load i64, i64* %13, align 8
  %32 = load i64, i64* %15, align 8
  %33 = sub i64 %31, %32
  %34 = sdiv exact i64 %33, 12
  %35 = icmp ult i64 %30, %34
  br i1 %35, label %25, label %20

36:                                               ; preds = %1, %20
  %37 = phi <2 x float> [ %24, %20 ], [ zeroinitializer, %1 ]
  %38 = phi <2 x float> [ %22, %20 ], [ zeroinitializer, %1 ]
  %39 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %38, 0
  %40 = insertvalue { <2 x float>, <2 x float> } %39, <2 x float> %37, 1
  ret { <2 x float>, <2 x float> } %40
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #4

declare void @_ZN13CFX_FloatRectC1ERK13CFX_PTemplateIfE(%class.CFX_FloatRect*, %class.CFX_PTemplate* dereferenceable(8)) unnamed_addr #5

declare void @_ZN13CFX_FloatRect10UpdateRectERK13CFX_PTemplateIfE(%class.CFX_FloatRect*, %class.CFX_PTemplate* dereferenceable(8)) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define hidden { <2 x float>, <2 x float> } @_ZNK12CFX_PathData27GetBoundingBoxForStrokePathEff(%class.CFX_PathData* nocapture readonly, float, float) local_unnamed_addr #3 align 2 {
  %4 = alloca %class.CFX_PTemplate, align 4
  %5 = alloca %class.CFX_PTemplate, align 4
  %6 = alloca %class.CFX_PTemplate, align 4
  %7 = alloca %class.CFX_PTemplate, align 4
  %8 = alloca %class.CFX_PTemplate, align 4
  %9 = alloca <4 x float>, align 16
  %10 = bitcast <4 x float>* %9 to { <2 x float>, <2 x float> }*
  %11 = bitcast <4 x float>* %9 to %class.CFX_FloatRect*
  %12 = alloca %class.CFX_PTemplate, align 4
  %13 = alloca %class.CFX_PTemplate, align 4
  %14 = alloca %class.CFX_PTemplate, align 4
  store <4 x float> <float 1.000000e+05, float 1.000000e+05, float -1.000000e+05, float -1.000000e+05>, <4 x float>* %9, align 16
  %15 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 1
  %16 = bitcast %class.FX_PATHPOINT** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %class.CFX_PathData* %0 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = sub i64 %17, %19
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %258, label %22

22:                                               ; preds = %3
  %23 = sdiv exact i64 %20, 12
  %24 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 0
  %25 = bitcast %class.CFX_PTemplate* %12 to i8*
  %26 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %12, i64 0, i32 0
  %27 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %12, i64 0, i32 1
  %28 = bitcast %class.CFX_PTemplate* %12 to i32*
  %29 = bitcast float* %27 to i32*
  %30 = bitcast %class.CFX_PTemplate* %13 to i8*
  %31 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %13, i64 0, i32 0
  %32 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %13, i64 0, i32 1
  %33 = bitcast %class.CFX_PTemplate* %13 to i32*
  %34 = bitcast float* %32 to i32*
  %35 = bitcast %class.CFX_PTemplate* %14 to i8*
  %36 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %14, i64 0, i32 0
  %37 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %14, i64 0, i32 1
  %38 = bitcast %class.CFX_PTemplate* %14 to i32*
  %39 = bitcast float* %37 to i32*
  %40 = bitcast %class.CFX_PTemplate* %8 to i8*
  %41 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %8, i64 0, i32 0
  %42 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %8, i64 0, i32 1
  %43 = bitcast %class.CFX_PTemplate* %7 to i8*
  %44 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %7, i64 0, i32 0
  %45 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %7, i64 0, i32 1
  %46 = fsub float -0.000000e+00, %1
  %47 = bitcast %class.CFX_PTemplate* %6 to i8*
  %48 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %6, i64 0, i32 0
  %49 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %6, i64 0, i32 1
  %50 = bitcast %class.CFX_PTemplate* %4 to i8*
  %51 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %4, i64 0, i32 0
  %52 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %4, i64 0, i32 1
  %53 = bitcast %class.CFX_PTemplate* %5 to i8*
  %54 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %5, i64 0, i32 0
  %55 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %5, i64 0, i32 1
  br label %56

56:                                               ; preds = %22, %251
  %57 = phi i64 [ %19, %22 ], [ %254, %251 ]
  %58 = phi i64 [ %17, %22 ], [ %253, %251 ]
  %59 = phi i64 [ %23, %22 ], [ %256, %251 ]
  %60 = phi i32 [ 0, %22 ], [ %113, %251 ]
  %61 = phi i64 [ 0, %22 ], [ %252, %251 ]
  %62 = inttoptr i64 %57 to %class.FX_PATHPOINT*
  %63 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %62, i64 %61, i32 1
  %64 = load i8, i8* %63, align 4
  switch i8 %64, label %85 [
    i8 2, label %65
    i8 1, label %72
  ]

65:                                               ; preds = %56
  %66 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %62, i64 %61, i32 2
  %67 = load i8, i8* %66, align 1, !range !2
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %69, label %85

69:                                               ; preds = %65
  %70 = add nuw i64 %61, 1
  %71 = icmp eq i64 %70, %59
  br i1 %71, label %258, label %108

72:                                               ; preds = %56
  %73 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %62, i64 %61, i32 2
  %74 = load i8, i8* %73, align 1, !range !2
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %76, label %85

76:                                               ; preds = %72
  %77 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %62, i64 %61, i32 0
  call void @_ZN13CFX_FloatRect10UpdateRectERK13CFX_PTemplateIfE(%class.CFX_FloatRect* nonnull %11, %class.CFX_PTemplate* dereferenceable(8) %77) #12
  %78 = add nuw i64 %61, 1
  %79 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %24, align 8
  %80 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %79, i64 %78, i32 0
  call void @_ZN13CFX_FloatRect10UpdateRectERK13CFX_PTemplateIfE(%class.CFX_FloatRect* nonnull %11, %class.CFX_PTemplate* dereferenceable(8) %80) #12
  %81 = add i64 %61, 2
  %82 = load i64, i64* %16, align 8
  %83 = load i64, i64* %18, align 8
  %84 = inttoptr i64 %83 to %class.FX_PATHPOINT*
  br label %85

85:                                               ; preds = %56, %65, %76, %72
  %86 = phi %class.FX_PATHPOINT* [ %84, %76 ], [ %62, %72 ], [ %62, %65 ], [ %62, %56 ]
  %87 = phi i64 [ %83, %76 ], [ %57, %72 ], [ %57, %65 ], [ %57, %56 ]
  %88 = phi i64 [ %82, %76 ], [ %58, %72 ], [ %58, %65 ], [ %58, %56 ]
  %89 = phi i64 [ %81, %76 ], [ %61, %72 ], [ %61, %65 ], [ %61, %56 ]
  %90 = sub i64 %88, %87
  %91 = sdiv exact i64 %90, 12
  %92 = add nsw i64 %91, -1
  %93 = icmp eq i64 %89, %92
  br i1 %93, label %103, label %94

94:                                               ; preds = %85
  %95 = add i64 %89, 1
  %96 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %86, i64 %95, i32 1
  %97 = load i8, i8* %96, align 4
  %98 = icmp eq i8 %97, 2
  br i1 %98, label %99, label %105

99:                                               ; preds = %94
  %100 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %86, i64 %95, i32 2
  %101 = load i8, i8* %100, align 1, !range !2
  %102 = icmp eq i8 %101, 0
  br i1 %102, label %103, label %105

103:                                              ; preds = %99, %85
  %104 = add i64 %89, -1
  br label %108

105:                                              ; preds = %94, %99
  %106 = add i64 %89, -1
  %107 = trunc i64 %89 to i32
  br label %108

108:                                              ; preds = %69, %103, %105
  %109 = phi %class.FX_PATHPOINT* [ %86, %103 ], [ %86, %105 ], [ %62, %69 ]
  %110 = phi i64 [ %89, %103 ], [ %89, %105 ], [ %61, %69 ]
  %111 = phi i64 [ %104, %103 ], [ %106, %105 ], [ %70, %69 ]
  %112 = phi i64 [ %89, %103 ], [ %95, %105 ], [ %61, %69 ]
  %113 = phi i32 [ %60, %103 ], [ %107, %105 ], [ %60, %69 ]
  %114 = phi i1 [ false, %103 ], [ true, %105 ], [ false, %69 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #12
  store float 0xFFFFFFFFE0000000, float* %26, align 4
  store float 0xFFFFFFFFE0000000, float* %27, align 4
  %115 = shl i64 %111, 32
  %116 = ashr exact i64 %115, 32
  %117 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %109, i64 %116, i32 0
  %118 = bitcast %class.CFX_PTemplate* %117 to i32*
  %119 = load i32, i32* %118, align 4
  store i32 %119, i32* %28, align 4
  %120 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %109, i64 %116, i32 0, i32 1
  %121 = bitcast float* %120 to i32*
  %122 = load i32, i32* %121, align 4
  store i32 %122, i32* %29, align 4
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #12
  store float 0xFFFFFFFFE0000000, float* %31, align 4
  store float 0xFFFFFFFFE0000000, float* %32, align 4
  %123 = shl i64 %112, 32
  %124 = ashr exact i64 %123, 32
  %125 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %109, i64 %124, i32 0
  %126 = bitcast %class.CFX_PTemplate* %125 to i32*
  %127 = load i32, i32* %126, align 4
  store i32 %127, i32* %33, align 4
  %128 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %109, i64 %124, i32 0, i32 1
  %129 = bitcast float* %128 to i32*
  %130 = load i32, i32* %129, align 4
  store i32 %130, i32* %34, align 4
  %131 = bitcast i32 %119 to float
  %132 = bitcast i32 %127 to float
  %133 = bitcast i32 %122 to float
  %134 = bitcast i32 %130 to float
  br i1 %114, label %135, label %250

135:                                              ; preds = %108
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %35) #12
  store float 0xFFFFFFFFE0000000, float* %36, align 4
  store float 0xFFFFFFFFE0000000, float* %37, align 4
  %136 = sext i32 %113 to i64
  %137 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %109, i64 %136, i32 0
  %138 = bitcast %class.CFX_PTemplate* %137 to i32*
  %139 = load i32, i32* %138, align 4
  store i32 %139, i32* %38, align 4
  %140 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %109, i64 %136, i32 0, i32 1
  %141 = bitcast float* %140 to i32*
  %142 = load i32, i32* %141, align 4
  store i32 %142, i32* %39, align 4
  %143 = bitcast i32 %139 to float
  %144 = fsub float %131, %143
  %145 = call float @llvm.fabs.f32(float %144) #12
  %146 = fcmp olt float %145, 0x3FA99999A0000000
  %147 = fsub float %143, %132
  %148 = call float @llvm.fabs.f32(float %147) #12
  %149 = fcmp olt float %148, 0x3FA99999A0000000
  %150 = and i1 %146, %149
  %151 = bitcast i32 %142 to float
  br i1 %150, label %152, label %159

152:                                              ; preds = %135
  %153 = fcmp ogt float %151, %133
  %154 = select i1 %153, float 1.000000e+00, float -1.000000e+00
  %155 = fmul float %154, %1
  %156 = fadd float %155, %151
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %50) #12
  %157 = fadd float %143, %1
  store float %157, float* %51, align 4
  store float %156, float* %52, align 4
  call void @_ZN13CFX_FloatRect10UpdateRectERK13CFX_PTemplateIfE(%class.CFX_FloatRect* nonnull %11, %class.CFX_PTemplate* nonnull dereferenceable(8) %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %50) #12
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %53) #12
  %158 = fsub float %143, %1
  store float %158, float* %54, align 4
  store float %156, float* %55, align 4
  call void @_ZN13CFX_FloatRect10UpdateRectERK13CFX_PTemplateIfE(%class.CFX_FloatRect* nonnull %11, %class.CFX_PTemplate* nonnull dereferenceable(8) %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %53) #12
  br label %249

159:                                              ; preds = %135
  br i1 %146, label %174, label %160

160:                                              ; preds = %159
  %161 = fsub float %133, %151
  %162 = fsub float %151, %133
  %163 = fsub float %143, %131
  %164 = fdiv float %162, %163
  %165 = fmul float %164, %143
  %166 = fsub float %151, %165
  %167 = fmul float %144, %144
  %168 = fmul float %161, %161
  %169 = fadd float %167, %168
  %170 = call float @sqrtf(float %169) #12
  %171 = fmul float %170, %1
  %172 = fdiv float %171, %144
  %173 = call float @llvm.fabs.f32(float %172) #12
  br label %174

174:                                              ; preds = %160, %159
  %175 = phi float [ 0.000000e+00, %159 ], [ %173, %160 ]
  %176 = phi float [ 0.000000e+00, %159 ], [ %166, %160 ]
  %177 = phi float [ 0.000000e+00, %159 ], [ %164, %160 ]
  br i1 %149, label %191, label %178

178:                                              ; preds = %174
  %179 = fsub float %132, %143
  %180 = fsub float %134, %151
  %181 = fdiv float %180, %179
  %182 = fmul float %181, %143
  %183 = fsub float %151, %182
  %184 = fmul float %179, %179
  %185 = fmul float %180, %180
  %186 = fadd float %184, %185
  %187 = call float @sqrtf(float %186) #12
  %188 = fmul float %187, %1
  %189 = fdiv float %188, %179
  %190 = call float @llvm.fabs.f32(float %189) #12
  br label %191

191:                                              ; preds = %178, %174
  %192 = phi float [ 0.000000e+00, %174 ], [ %190, %178 ]
  %193 = phi float [ 0.000000e+00, %174 ], [ %183, %178 ]
  %194 = phi float [ 0.000000e+00, %174 ], [ %181, %178 ]
  br i1 %146, label %195, label %207

195:                                              ; preds = %191
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #12
  %196 = fcmp olt float %132, %131
  %197 = select i1 %196, float %1, float %46
  %198 = fadd float %197, %131
  store float %198, float* %48, align 4
  %199 = fmul float %194, %131
  %200 = fadd float %193, %199
  %201 = fcmp ogt float %200, %133
  %202 = fmul float %198, %194
  %203 = fadd float %193, %202
  %204 = fsub float -0.000000e+00, %192
  %205 = select i1 %201, float %192, float %204
  %206 = fadd float %203, %205
  store float %206, float* %49, align 4
  call void @_ZN13CFX_FloatRect10UpdateRectERK13CFX_PTemplateIfE(%class.CFX_FloatRect* nonnull %11, %class.CFX_PTemplate* nonnull dereferenceable(8) %6) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #12
  br label %249

207:                                              ; preds = %191
  br i1 %149, label %208, label %220

208:                                              ; preds = %207
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43) #12
  %209 = fcmp olt float %131, %132
  %210 = select i1 %209, float %1, float %46
  %211 = fadd float %210, %132
  store float %211, float* %44, align 4
  %212 = fmul float %177, %132
  %213 = fadd float %176, %212
  %214 = fcmp ogt float %213, %134
  %215 = fmul float %211, %177
  %216 = fadd float %176, %215
  %217 = fsub float -0.000000e+00, %175
  %218 = select i1 %214, float %175, float %217
  %219 = fadd float %216, %218
  store float %219, float* %45, align 4
  call void @_ZN13CFX_FloatRect10UpdateRectERK13CFX_PTemplateIfE(%class.CFX_FloatRect* nonnull %11, %class.CFX_PTemplate* nonnull dereferenceable(8) %7) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43) #12
  br label %249

220:                                              ; preds = %207
  %221 = fsub float %177, %194
  %222 = call float @llvm.fabs.f32(float %221) #12
  %223 = fcmp olt float %222, 0x3FA99999A0000000
  br i1 %223, label %224, label %232

224:                                              ; preds = %220
  %225 = fcmp olt float %131, %143
  %226 = select i1 %225, i32 1, i32 -1
  %227 = fcmp ogt float %132, %143
  %228 = select i1 %227, i32 1, i32 -1
  %229 = icmp eq i32 %226, %228
  br i1 %229, label %230, label %231

230:                                              ; preds = %224
  call fastcc void @_ZN12_GLOBAL__N_119UpdateLineEndPointsEP13CFX_FloatRectRK13CFX_PTemplateIfES5_f(%class.CFX_FloatRect* nonnull %11, %class.CFX_PTemplate* nonnull dereferenceable(8) %14, %class.CFX_PTemplate* nonnull dereferenceable(8) %13, float %1) #12
  br label %249

231:                                              ; preds = %224
  call fastcc void @_ZN12_GLOBAL__N_119UpdateLineEndPointsEP13CFX_FloatRectRK13CFX_PTemplateIfES5_f(%class.CFX_FloatRect* nonnull %11, %class.CFX_PTemplate* nonnull dereferenceable(8) %12, %class.CFX_PTemplate* nonnull dereferenceable(8) %14, float %1) #12
  br label %249

232:                                              ; preds = %220
  %233 = fmul float %177, %132
  %234 = fadd float %176, %233
  %235 = fcmp ogt float %234, %134
  %236 = fsub float -0.000000e+00, %175
  %237 = select i1 %235, float %175, float %236
  %238 = fadd float %176, %237
  %239 = fmul float %194, %131
  %240 = fadd float %193, %239
  %241 = fcmp ogt float %240, %133
  %242 = fsub float -0.000000e+00, %192
  %243 = select i1 %241, float %192, float %242
  %244 = fadd float %193, %243
  %245 = fsub float %244, %238
  %246 = fdiv float %245, %221
  %247 = fmul float %177, %246
  %248 = fadd float %238, %247
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #12
  store float %246, float* %41, align 4
  store float %248, float* %42, align 4
  call void @_ZN13CFX_FloatRect10UpdateRectERK13CFX_PTemplateIfE(%class.CFX_FloatRect* nonnull %11, %class.CFX_PTemplate* nonnull dereferenceable(8) %8) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #12
  br label %249

249:                                              ; preds = %152, %195, %208, %230, %231, %232
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %35) #12
  br label %251

250:                                              ; preds = %108
  call fastcc void @_ZN12_GLOBAL__N_119UpdateLineEndPointsEP13CFX_FloatRectRK13CFX_PTemplateIfES5_f(%class.CFX_FloatRect* nonnull %11, %class.CFX_PTemplate* nonnull dereferenceable(8) %12, %class.CFX_PTemplate* nonnull dereferenceable(8) %13, float %1)
  br label %251

251:                                              ; preds = %250, %249
  %252 = add i64 %110, 1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #12
  %253 = load i64, i64* %16, align 8
  %254 = load i64, i64* %18, align 8
  %255 = sub i64 %253, %254
  %256 = sdiv exact i64 %255, 12
  %257 = icmp ult i64 %252, %256
  br i1 %257, label %56, label %258

258:                                              ; preds = %251, %69, %3
  %259 = bitcast <4 x float>* %9 to <2 x float>*
  %260 = load <2 x float>, <2 x float>* %259, align 16
  %261 = insertvalue { <2 x float>, <2 x float> } undef, <2 x float> %260, 0
  %262 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %10, i64 0, i32 1
  %263 = load <2 x float>, <2 x float>* %262, align 8
  %264 = insertvalue { <2 x float>, <2 x float> } %261, <2 x float> %263, 1
  ret { <2 x float>, <2 x float> } %264
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_119UpdateLineEndPointsEP13CFX_FloatRectRK13CFX_PTemplateIfES5_f(%class.CFX_FloatRect*, %class.CFX_PTemplate* nocapture readonly dereferenceable(8), %class.CFX_PTemplate* nocapture readonly dereferenceable(8), float) unnamed_addr #3 {
  %5 = alloca %class.CFX_PTemplate, align 4
  %6 = alloca %class.CFX_PTemplate, align 4
  %7 = alloca %class.CFX_PTemplate, align 4
  %8 = alloca %class.CFX_PTemplate, align 4
  %9 = alloca %class.CFX_PTemplate, align 4
  %10 = alloca %class.CFX_PTemplate, align 4
  %11 = alloca %class.CFX_PTemplate, align 4
  %12 = alloca %class.CFX_PTemplate, align 4
  %13 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %2, i64 0, i32 0
  %14 = bitcast %class.CFX_PTemplate* %1 to <2 x float>*
  %15 = load <2 x float>, <2 x float>* %14, align 4
  %16 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %2, i64 0, i32 1
  %17 = bitcast %class.CFX_PTemplate* %2 to <2 x float>*
  %18 = load <2 x float>, <2 x float>* %17, align 4
  %19 = extractelement <2 x float> %18, i32 0
  %20 = extractelement <2 x float> %15, i32 0
  %21 = fcmp oeq float %20, %19
  %22 = extractelement <2 x float> %18, i32 1
  %23 = extractelement <2 x float> %15, i32 1
  %24 = fcmp oeq float %23, %22
  br i1 %21, label %25, label %52

25:                                               ; preds = %4
  br i1 %24, label %26, label %38

26:                                               ; preds = %25
  %27 = bitcast %class.CFX_PTemplate* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #12
  %28 = fadd float %19, %3
  %29 = fadd float %22, %3
  %30 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %5, i64 0, i32 0
  store float %28, float* %30, align 4, !alias.scope !3
  %31 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %5, i64 0, i32 1
  store float %29, float* %31, align 4, !alias.scope !3
  call void @_ZN13CFX_FloatRect10UpdateRectERK13CFX_PTemplateIfE(%class.CFX_FloatRect* %0, %class.CFX_PTemplate* nonnull dereferenceable(8) %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #12
  %32 = bitcast %class.CFX_PTemplate* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %32) #12
  %33 = bitcast %class.CFX_PTemplate* %2 to <2 x float>*
  %34 = load <2 x float>, <2 x float>* %33, align 4, !noalias !6
  %35 = insertelement <2 x float> undef, float %3, i32 0
  %36 = shufflevector <2 x float> %35, <2 x float> undef, <2 x i32> zeroinitializer
  %37 = fsub <2 x float> %34, %36
  br label %98

38:                                               ; preds = %25
  %39 = fcmp olt float %22, %23
  %40 = fsub float -0.000000e+00, %3
  %41 = select i1 %39, float %40, float %3
  %42 = fadd float %22, %41
  %43 = bitcast %class.CFX_PTemplate* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43) #12
  %44 = fadd float %19, %3
  %45 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %7, i64 0, i32 0
  store float %44, float* %45, align 4
  %46 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %7, i64 0, i32 1
  store float %42, float* %46, align 4
  call void @_ZN13CFX_FloatRect10UpdateRectERK13CFX_PTemplateIfE(%class.CFX_FloatRect* %0, %class.CFX_PTemplate* nonnull dereferenceable(8) %7) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43) #12
  %47 = bitcast %class.CFX_PTemplate* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #12
  %48 = load float, float* %13, align 4
  %49 = fsub float %48, %3
  %50 = insertelement <2 x float> undef, float %49, i32 0
  %51 = insertelement <2 x float> %50, float %42, i32 1
  br label %98

52:                                               ; preds = %4
  br i1 %24, label %53, label %67

53:                                               ; preds = %52
  %54 = fcmp olt float %19, %20
  %55 = fsub float -0.000000e+00, %3
  %56 = select i1 %54, float %55, float %3
  %57 = fadd float %19, %56
  %58 = bitcast %class.CFX_PTemplate* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #12
  %59 = fadd float %22, %3
  %60 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %9, i64 0, i32 0
  store float %57, float* %60, align 4
  %61 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %9, i64 0, i32 1
  store float %59, float* %61, align 4
  call void @_ZN13CFX_FloatRect10UpdateRectERK13CFX_PTemplateIfE(%class.CFX_FloatRect* %0, %class.CFX_PTemplate* nonnull dereferenceable(8) %9) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %58) #12
  %62 = bitcast %class.CFX_PTemplate* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %62) #12
  %63 = load float, float* %16, align 4
  %64 = fsub float %63, %3
  %65 = insertelement <2 x float> undef, float %57, i32 0
  %66 = insertelement <2 x float> %65, float %64, i32 1
  br label %98

67:                                               ; preds = %52
  %68 = fsub <2 x float> %18, %15
  %69 = extractelement <2 x float> %68, i32 0
  %70 = fmul float %69, %69
  %71 = extractelement <2 x float> %68, i32 1
  %72 = fmul float %71, %71
  %73 = fadd float %70, %72
  %74 = tail call float @sqrtf(float %73) #12
  %75 = bitcast %class.CFX_PTemplate* %2 to <2 x float>*
  %76 = load <2 x float>, <2 x float>* %75, align 4
  %77 = insertelement <2 x float> undef, float %3, i32 0
  %78 = shufflevector <2 x float> %77, <2 x float> undef, <2 x i32> zeroinitializer
  %79 = fmul <2 x float> %68, %78
  %80 = insertelement <2 x float> undef, float %74, i32 0
  %81 = shufflevector <2 x float> %80, <2 x float> undef, <2 x i32> zeroinitializer
  %82 = fdiv <2 x float> %79, %81
  %83 = fadd <2 x float> %76, %82
  %84 = bitcast %class.CFX_PTemplate* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %84) #12
  %85 = extractelement <2 x float> %83, i32 0
  %86 = extractelement <2 x float> %82, i32 1
  %87 = fsub float %85, %86
  %88 = extractelement <2 x float> %83, i32 1
  %89 = extractelement <2 x float> %82, i32 0
  %90 = fadd float %89, %88
  %91 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %11, i64 0, i32 0
  store float %87, float* %91, align 4
  %92 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %11, i64 0, i32 1
  store float %90, float* %92, align 4
  call void @_ZN13CFX_FloatRect10UpdateRectERK13CFX_PTemplateIfE(%class.CFX_FloatRect* %0, %class.CFX_PTemplate* nonnull dereferenceable(8) %11) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %84) #12
  %93 = bitcast %class.CFX_PTemplate* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %93) #12
  %94 = shufflevector <2 x float> %82, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %95 = fadd <2 x float> %83, %94
  %96 = fsub <2 x float> %83, %94
  %97 = shufflevector <2 x float> %95, <2 x float> %96, <2 x i32> <i32 0, i32 3>
  br label %98

98:                                               ; preds = %67, %53, %38, %26
  %99 = phi %class.CFX_PTemplate* [ %12, %67 ], [ %10, %53 ], [ %8, %38 ], [ %6, %26 ]
  %100 = phi i8* [ %93, %67 ], [ %62, %53 ], [ %47, %38 ], [ %32, %26 ]
  %101 = phi <2 x float> [ %97, %67 ], [ %66, %53 ], [ %51, %38 ], [ %37, %26 ]
  %102 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %99, i64 0, i32 0
  %103 = extractelement <2 x float> %101, i32 0
  store float %103, float* %102, align 4
  %104 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %99, i64 0, i32 1
  %105 = extractelement <2 x float> %101, i32 1
  store float %105, float* %104, align 4
  call void @_ZN13CFX_FloatRect10UpdateRectERK13CFX_PTemplateIfE(%class.CFX_FloatRect* %0, %class.CFX_PTemplate* nonnull dereferenceable(8) %99) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %100) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN12CFX_PathData9TransformERK10CFX_Matrix(%class.CFX_PathData* nocapture readonly, %class.CFX_Matrix* dereferenceable(24)) local_unnamed_addr #3 align 2 {
  %3 = alloca %class.CFX_PTemplate, align 4
  %4 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 0
  %5 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %4, align 8
  %6 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 1
  %7 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %6, align 8
  %8 = icmp eq %class.FX_PATHPOINT* %5, %7
  br i1 %8, label %14, label %9

9:                                                ; preds = %2
  %10 = bitcast %class.CFX_PTemplate* %3 to i8*
  %11 = bitcast %class.CFX_PTemplate* %3 to i32*
  %12 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %3, i64 0, i32 1
  %13 = bitcast float* %12 to i32*
  br label %15

14:                                               ; preds = %25, %2
  ret void

15:                                               ; preds = %9, %25
  %16 = phi %class.FX_PATHPOINT* [ %5, %9 ], [ %26, %25 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #12
  %17 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %16, i64 0, i32 0
  call void @_ZNK10CFX_Matrix9TransformERK13CFX_PTemplateIfE(%class.CFX_PTemplate* nonnull sret %3, %class.CFX_Matrix* %1, %class.CFX_PTemplate* dereferenceable(8) %17) #12
  %18 = icmp eq %class.CFX_PTemplate* %17, %3
  br i1 %18, label %25, label %19

19:                                               ; preds = %15
  %20 = load i32, i32* %11, align 4
  %21 = bitcast %class.FX_PATHPOINT* %16 to i32*
  store i32 %20, i32* %21, align 4
  %22 = load i32, i32* %13, align 4
  %23 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %16, i64 0, i32 0, i32 1
  %24 = bitcast float* %23 to i32*
  store i32 %22, i32* %24, align 4
  br label %25

25:                                               ; preds = %15, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #12
  %26 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %16, i64 1
  %27 = icmp eq %class.FX_PATHPOINT* %26, %7
  br i1 %27, label %14, label %15
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZNK12CFX_PathData6IsRectEv(%class.CFX_PathData* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = alloca %"class.std::__1::vector", align 8
  %3 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0
  %4 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %0, i64 0, i32 0, i32 0, i32 1
  %5 = bitcast %class.FX_PATHPOINT** %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = bitcast %class.CFX_PathData* %0 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %6, %8
  %10 = sdiv exact i64 %9, 12
  %11 = icmp ugt i64 %10, 5
  br i1 %11, label %12, label %24

12:                                               ; preds = %1
  %13 = bitcast %"class.std::__1::vector"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %13) #12
  call fastcc void @_ZN12_GLOBAL__N_119GetNormalizedPointsERKNSt3__16vectorI12FX_PATHPOINTNS0_9allocatorIS2_EEEE(%"class.std::__1::vector"* nonnull sret %2, %"class.std::__1::vector"* dereferenceable(24) %3)
  %14 = call fastcc zeroext i1 @_ZN12_GLOBAL__N_110IsRectImplERKNSt3__16vectorI12FX_PATHPOINTNS0_9allocatorIS2_EEEE(%"class.std::__1::vector"* nonnull dereferenceable(24) %2)
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %16 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %15, align 8
  %17 = icmp eq %class.FX_PATHPOINT* %16, null
  br i1 %17, label %23, label %18

18:                                               ; preds = %12
  %19 = ptrtoint %class.FX_PATHPOINT* %16 to i64
  %20 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %21 = bitcast %class.FX_PATHPOINT** %20 to i64*
  store i64 %19, i64* %21, align 8
  %22 = bitcast %class.FX_PATHPOINT* %16 to i8*
  tail call void @_ZdlPv(i8* %22) #14
  br label %23

23:                                               ; preds = %12, %18
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %13) #12
  br label %26

24:                                               ; preds = %1
  %25 = tail call fastcc zeroext i1 @_ZN12_GLOBAL__N_110IsRectImplERKNSt3__16vectorI12FX_PATHPOINTNS0_9allocatorIS2_EEEE(%"class.std::__1::vector"* dereferenceable(24) %3)
  br label %26

26:                                               ; preds = %24, %23
  %27 = phi i1 [ %14, %23 ], [ %25, %24 ]
  ret i1 %27
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define internal fastcc zeroext i1 @_ZN12_GLOBAL__N_110IsRectImplERKNSt3__16vectorI12FX_PATHPOINTNS0_9allocatorIS2_EEEE(%"class.std::__1::vector"* nocapture readonly dereferenceable(24)) unnamed_addr #6 {
  %2 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %3 = bitcast %class.FX_PATHPOINT** %2 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"class.std::__1::vector"* %0 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = sub i64 %4, %6
  %8 = sdiv exact i64 %7, 12
  %9 = inttoptr i64 %6 to %class.FX_PATHPOINT*
  switch i64 %8, label %74 [
    i64 5, label %13
    i64 4, label %10
  ]

10:                                               ; preds = %1
  %11 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %9, i64 0, i32 0, i32 0
  %12 = load float, float* %11, align 4
  br label %25

13:                                               ; preds = %1
  %14 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %9, i64 0, i32 0, i32 0
  %15 = load float, float* %14, align 4
  %16 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %9, i64 4, i32 0, i32 0
  %17 = load float, float* %16, align 4
  %18 = fcmp oeq float %15, %17
  br i1 %18, label %19, label %74

19:                                               ; preds = %13
  %20 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %9, i64 0, i32 0, i32 1
  %21 = load float, float* %20, align 4
  %22 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %9, i64 4, i32 0, i32 1
  %23 = load float, float* %22, align 4
  %24 = fcmp une float %21, %23
  br i1 %24, label %74, label %25

25:                                               ; preds = %10, %19
  %26 = phi float [ %12, %10 ], [ %15, %19 ]
  %27 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %9, i64 2, i32 0, i32 0
  %28 = load float, float* %27, align 4
  %29 = fcmp oeq float %26, %28
  br i1 %29, label %30, label %36

30:                                               ; preds = %25
  %31 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %9, i64 0, i32 0, i32 1
  %32 = load float, float* %31, align 4
  %33 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %9, i64 2, i32 0, i32 1
  %34 = load float, float* %33, align 4
  %35 = fcmp oeq float %32, %34
  br i1 %35, label %74, label %36

36:                                               ; preds = %30, %25
  %37 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %9, i64 1, i32 0, i32 0
  %38 = load float, float* %37, align 4
  %39 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %9, i64 3, i32 0, i32 0
  %40 = load float, float* %39, align 4
  %41 = fcmp oeq float %38, %40
  br i1 %41, label %42, label %48

42:                                               ; preds = %36
  %43 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %9, i64 1, i32 0, i32 1
  %44 = load float, float* %43, align 4
  %45 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %9, i64 3, i32 0, i32 1
  %46 = load float, float* %45, align 4
  %47 = fcmp oeq float %44, %46
  br i1 %47, label %74, label %48

48:                                               ; preds = %42, %36
  br label %53

49:                                               ; preds = %53
  %50 = icmp eq i64 %58, %8
  br i1 %50, label %51, label %53

51:                                               ; preds = %49
  %52 = fcmp une float %38, %26
  br i1 %52, label %59, label %65

53:                                               ; preds = %48, %49
  %54 = phi i64 [ %58, %49 ], [ 1, %48 ]
  %55 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %9, i64 %54, i32 1
  %56 = load i8, i8* %55, align 4
  %57 = icmp eq i8 %56, 0
  %58 = add nuw i64 %54, 1
  br i1 %57, label %49, label %74

59:                                               ; preds = %51
  %60 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %9, i64 1, i32 0, i32 1
  %61 = load float, float* %60, align 4
  %62 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %9, i64 0, i32 0, i32 1
  %63 = load float, float* %62, align 4
  %64 = fcmp une float %61, %63
  br i1 %64, label %74, label %65

65:                                               ; preds = %51, %59
  %66 = fcmp une float %28, %38
  br i1 %66, label %76, label %82

67:                                               ; preds = %90
  %68 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %9, i64 0, i32 0, i32 1
  %69 = load float, float* %68, align 4
  %70 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %9, i64 3, i32 0, i32 1
  %71 = load float, float* %70, align 4
  %72 = fcmp une float %69, %71
  br i1 %72, label %73, label %74

73:                                               ; preds = %67
  br label %74

74:                                               ; preds = %53, %59, %76, %84, %1, %13, %42, %30, %19, %90, %67, %73
  %75 = phi i1 [ false, %73 ], [ true, %67 ], [ true, %90 ], [ false, %19 ], [ false, %30 ], [ false, %42 ], [ false, %13 ], [ false, %1 ], [ false, %84 ], [ false, %76 ], [ false, %59 ], [ false, %53 ]
  ret i1 %75

76:                                               ; preds = %65
  %77 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %9, i64 2, i32 0, i32 1
  %78 = load float, float* %77, align 4
  %79 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %9, i64 1, i32 0, i32 1
  %80 = load float, float* %79, align 4
  %81 = fcmp une float %78, %80
  br i1 %81, label %74, label %82

82:                                               ; preds = %76, %65
  %83 = fcmp une float %40, %28
  br i1 %83, label %84, label %90

84:                                               ; preds = %82
  %85 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %9, i64 3, i32 0, i32 1
  %86 = load float, float* %85, align 4
  %87 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %9, i64 2, i32 0, i32 1
  %88 = load float, float* %87, align 4
  %89 = fcmp une float %86, %88
  br i1 %89, label %74, label %90

90:                                               ; preds = %84, %82
  %91 = fcmp une float %26, %40
  br i1 %91, label %67, label %74
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN12_GLOBAL__N_119GetNormalizedPointsERKNSt3__16vectorI12FX_PATHPOINTNS0_9allocatorIS2_EEEE(%"class.std::__1::vector"* noalias nocapture sret, %"class.std::__1::vector"* nocapture readonly dereferenceable(24)) unnamed_addr #3 {
  %3 = alloca %"class.std::__1::vector", align 8
  %4 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 0
  %5 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %1, i64 0, i32 0, i32 1
  %7 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %6, align 8
  %8 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %5, i64 0, i32 0, i32 0
  %9 = load float, float* %8, align 4
  %10 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %7, i64 -1, i32 0, i32 0
  %11 = load float, float* %10, align 4
  %12 = fcmp oeq float %9, %11
  br i1 %12, label %13, label %19

13:                                               ; preds = %2
  %14 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %5, i64 0, i32 0, i32 1
  %15 = load float, float* %14, align 4
  %16 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %7, i64 -1, i32 0, i32 1
  %17 = load float, float* %16, align 4
  %18 = fcmp une float %15, %17
  br i1 %18, label %19, label %21

19:                                               ; preds = %2, %13
  %20 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 24, i1 false) #12
  br label %335

21:                                               ; preds = %13
  %22 = bitcast %"class.std::__1::vector"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #12
  %23 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %24 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 2, i32 0, i32 0
  %25 = bitcast %class.FX_PATHPOINT** %24 to i64*
  %26 = bitcast %"class.std::__1::vector"* %3 to i64*
  %27 = bitcast %class.FX_PATHPOINT** %23 to i64*
  %28 = tail call i8* @_Znwm(i64 72) #14
  %29 = ptrtoint i8* %28 to i64
  %30 = getelementptr inbounds i8, i8* %28, i64 72
  %31 = ptrtoint i8* %30 to i64
  store i64 %29, i64* %26, align 8
  store i64 %29, i64* %27, align 8
  store i64 %31, i64* %25, align 8
  %32 = bitcast %class.FX_PATHPOINT* %5 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = bitcast i8* %28 to i32*
  store i32 %33, i32* %34, align 4
  %35 = getelementptr inbounds i8, i8* %28, i64 4
  %36 = bitcast float* %14 to i32*
  %37 = load i32, i32* %36, align 4
  %38 = bitcast i8* %35 to i32*
  store i32 %37, i32* %38, align 4
  %39 = getelementptr inbounds i8, i8* %28, i64 8
  %40 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %5, i64 0, i32 1
  %41 = bitcast i8* %40 to i16*
  %42 = bitcast i8* %39 to i16*
  %43 = load i16, i16* %41, align 4
  store i16 %43, i16* %42, align 4
  %44 = getelementptr inbounds i8, i8* %28, i64 12
  %45 = bitcast i8* %44 to %class.FX_PATHPOINT*
  %46 = ptrtoint i8* %44 to i64
  %47 = bitcast %class.FX_PATHPOINT** %23 to i64*
  store i64 %46, i64* %47, align 8
  %48 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %4, align 8
  %49 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %48, i64 1
  %50 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %6, align 8
  %51 = icmp eq %class.FX_PATHPOINT* %49, %50
  br i1 %51, label %318, label %52

52:                                               ; preds = %21
  %53 = bitcast i8* %28 to %class.FX_PATHPOINT*
  %54 = bitcast %class.FX_PATHPOINT** %23 to i64*
  br label %55

55:                                               ; preds = %52, %305
  %56 = phi i64 [ %46, %52 ], [ %306, %305 ]
  %57 = phi %class.FX_PATHPOINT* [ %45, %52 ], [ %307, %305 ]
  %58 = phi %class.FX_PATHPOINT* [ %50, %52 ], [ %308, %305 ]
  %59 = phi %class.FX_PATHPOINT* [ %53, %52 ], [ %309, %305 ]
  %60 = phi %class.FX_PATHPOINT* [ %45, %52 ], [ %310, %305 ]
  %61 = phi %class.FX_PATHPOINT* [ %45, %52 ], [ %311, %305 ]
  %62 = phi i64 [ %29, %52 ], [ %312, %305 ]
  %63 = phi i64 [ %46, %52 ], [ %313, %305 ]
  %64 = phi %class.FX_PATHPOINT* [ %49, %52 ], [ %314, %305 ]
  %65 = phi %class.FX_PATHPOINT* [ %48, %52 ], [ %64, %305 ]
  %66 = sub i64 %63, %62
  %67 = sdiv exact i64 %66, 12
  %68 = ptrtoint %class.FX_PATHPOINT* %64 to i64
  %69 = ptrtoint %class.FX_PATHPOINT* %58 to i64
  %70 = sub i64 %69, %68
  %71 = sdiv exact i64 %70, 12
  %72 = add nsw i64 %67, %71
  %73 = icmp eq i64 %72, 5
  br i1 %73, label %74, label %177

74:                                               ; preds = %55, %172
  %75 = phi i64 [ %173, %172 ], [ %56, %55 ]
  %76 = phi %class.FX_PATHPOINT* [ %174, %172 ], [ %57, %55 ]
  %77 = phi %class.FX_PATHPOINT* [ %175, %172 ], [ %64, %55 ]
  %78 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %24, align 8
  %79 = icmp eq %class.FX_PATHPOINT* %76, %78
  %80 = ptrtoint %class.FX_PATHPOINT* %78 to i64
  br i1 %79, label %97, label %81

81:                                               ; preds = %74
  %82 = bitcast %class.FX_PATHPOINT* %77 to i32*
  %83 = load i32, i32* %82, align 4
  %84 = bitcast %class.FX_PATHPOINT* %76 to i32*
  store i32 %83, i32* %84, align 4
  %85 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %76, i64 0, i32 0, i32 1
  %86 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %77, i64 0, i32 0, i32 1
  %87 = bitcast float* %86 to i32*
  %88 = load i32, i32* %87, align 4
  %89 = bitcast float* %85 to i32*
  store i32 %88, i32* %89, align 4
  %90 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %76, i64 0, i32 1
  %91 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %77, i64 0, i32 1
  %92 = bitcast i8* %91 to i16*
  %93 = bitcast i8* %90 to i16*
  %94 = load i16, i16* %92, align 4
  store i16 %94, i16* %93, align 4
  %95 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %76, i64 1
  %96 = ptrtoint %class.FX_PATHPOINT* %95 to i64
  store i64 %96, i64* %54, align 8
  br label %172

97:                                               ; preds = %74
  %98 = load i64, i64* %26, align 8
  %99 = sub i64 %75, %98
  %100 = sdiv exact i64 %99, 12
  %101 = add nsw i64 %100, 1
  %102 = icmp ugt i64 %101, 1537228672809129301
  %103 = inttoptr i64 %98 to %class.FX_PATHPOINT*
  br i1 %102, label %104, label %106

104:                                              ; preds = %97
  %105 = bitcast %"class.std::__1::vector"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %105) #13
  unreachable

106:                                              ; preds = %97
  %107 = sub i64 %80, %98
  %108 = sdiv exact i64 %107, 12
  %109 = icmp ult i64 %108, 768614336404564650
  br i1 %109, label %110, label %115

110:                                              ; preds = %106
  %111 = shl nsw i64 %108, 1
  %112 = icmp ult i64 %111, %101
  %113 = select i1 %112, i64 %101, i64 %111
  %114 = icmp eq i64 %113, 0
  br i1 %114, label %120, label %115

115:                                              ; preds = %110, %106
  %116 = phi i64 [ %113, %110 ], [ 1537228672809129301, %106 ]
  %117 = mul i64 %116, 12
  %118 = tail call i8* @_Znwm(i64 %117) #14
  %119 = bitcast i8* %118 to %class.FX_PATHPOINT*
  br label %120

120:                                              ; preds = %115, %110
  %121 = phi i64 [ %116, %115 ], [ 0, %110 ]
  %122 = phi %class.FX_PATHPOINT* [ %119, %115 ], [ null, %110 ]
  %123 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %122, i64 %100
  %124 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %122, i64 %121
  %125 = ptrtoint %class.FX_PATHPOINT* %124 to i64
  %126 = bitcast %class.FX_PATHPOINT* %77 to i32*
  %127 = load i32, i32* %126, align 4
  %128 = bitcast %class.FX_PATHPOINT* %123 to i32*
  store i32 %127, i32* %128, align 4
  %129 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %122, i64 %100, i32 0, i32 1
  %130 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %77, i64 0, i32 0, i32 1
  %131 = bitcast float* %130 to i32*
  %132 = load i32, i32* %131, align 4
  %133 = bitcast float* %129 to i32*
  store i32 %132, i32* %133, align 4
  %134 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %122, i64 %100, i32 1
  %135 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %77, i64 0, i32 1
  %136 = bitcast i8* %135 to i16*
  %137 = bitcast i8* %134 to i16*
  %138 = load i16, i16* %136, align 4
  store i16 %138, i16* %137, align 4
  %139 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %123, i64 1
  %140 = ptrtoint %class.FX_PATHPOINT* %139 to i64
  %141 = icmp eq %class.FX_PATHPOINT* %76, %103
  br i1 %141, label %142, label %144

142:                                              ; preds = %120
  %143 = ptrtoint %class.FX_PATHPOINT* %76 to i64
  br label %165

144:                                              ; preds = %120, %144
  %145 = phi %class.FX_PATHPOINT* [ %147, %144 ], [ %123, %120 ]
  %146 = phi %class.FX_PATHPOINT* [ %148, %144 ], [ %76, %120 ]
  %147 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %145, i64 -1
  %148 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %146, i64 -1
  %149 = bitcast %class.FX_PATHPOINT* %148 to i32*
  %150 = load i32, i32* %149, align 4
  %151 = bitcast %class.FX_PATHPOINT* %147 to i32*
  store i32 %150, i32* %151, align 4
  %152 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %145, i64 -1, i32 0, i32 1
  %153 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %146, i64 -1, i32 0, i32 1
  %154 = bitcast float* %153 to i32*
  %155 = load i32, i32* %154, align 4
  %156 = bitcast float* %152 to i32*
  store i32 %155, i32* %156, align 4
  %157 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %145, i64 -1, i32 1
  %158 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %146, i64 -1, i32 1
  %159 = bitcast i8* %158 to i16*
  %160 = bitcast i8* %157 to i16*
  %161 = load i16, i16* %159, align 4
  store i16 %161, i16* %160, align 4
  %162 = icmp eq %class.FX_PATHPOINT* %148, %103
  br i1 %162, label %163, label %144

163:                                              ; preds = %144
  %164 = load i64, i64* %26, align 8
  br label %165

165:                                              ; preds = %163, %142
  %166 = phi %class.FX_PATHPOINT* [ %123, %142 ], [ %147, %163 ]
  %167 = phi i64 [ %143, %142 ], [ %164, %163 ]
  %168 = ptrtoint %class.FX_PATHPOINT* %166 to i64
  store i64 %168, i64* %26, align 8
  store i64 %140, i64* %54, align 8
  store i64 %125, i64* %25, align 8
  %169 = icmp eq i64 %167, 0
  br i1 %169, label %172, label %170

170:                                              ; preds = %165
  %171 = inttoptr i64 %167 to i8*
  tail call void @_ZdlPv(i8* %171) #14
  br label %172

172:                                              ; preds = %170, %165, %81
  %173 = phi i64 [ %140, %170 ], [ %140, %165 ], [ %96, %81 ]
  %174 = phi %class.FX_PATHPOINT* [ %139, %170 ], [ %139, %165 ], [ %95, %81 ]
  %175 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %77, i64 1
  %176 = icmp eq %class.FX_PATHPOINT* %175, %58
  br i1 %176, label %316, label %74

177:                                              ; preds = %55
  %178 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %65, i64 1, i32 1
  %179 = load i8, i8* %178, align 4
  %180 = icmp eq i8 %179, 0
  br i1 %180, label %181, label %202

181:                                              ; preds = %177
  %182 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %65, i64 1, i32 2
  %183 = load i8, i8* %182, align 1, !range !2
  %184 = icmp eq i8 %183, 0
  br i1 %184, label %185, label %202

185:                                              ; preds = %181
  %186 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %61, i64 -1, i32 2
  %187 = load i8, i8* %186, align 1, !range !2
  %188 = icmp eq i8 %187, 0
  %189 = ptrtoint %class.FX_PATHPOINT* %61 to i64
  br i1 %188, label %190, label %202

190:                                              ; preds = %185
  %191 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %64, i64 0, i32 0, i32 0
  %192 = load float, float* %191, align 4
  %193 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %61, i64 -1, i32 0, i32 0
  %194 = load float, float* %193, align 4
  %195 = fcmp oeq float %192, %194
  br i1 %195, label %196, label %202

196:                                              ; preds = %190
  %197 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %65, i64 1, i32 0, i32 1
  %198 = load float, float* %197, align 4
  %199 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %61, i64 -1, i32 0, i32 1
  %200 = load float, float* %199, align 4
  %201 = fcmp oeq float %198, %200
  br i1 %201, label %305, label %202

202:                                              ; preds = %190, %185, %181, %196, %177
  %203 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %24, align 8
  %204 = icmp eq %class.FX_PATHPOINT* %60, %203
  %205 = ptrtoint %class.FX_PATHPOINT* %203 to i64
  br i1 %204, label %223, label %206

206:                                              ; preds = %202
  %207 = bitcast %class.FX_PATHPOINT* %64 to i32*
  %208 = load i32, i32* %207, align 4
  %209 = bitcast %class.FX_PATHPOINT* %60 to i32*
  store i32 %208, i32* %209, align 4
  %210 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %60, i64 0, i32 0, i32 1
  %211 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %65, i64 1, i32 0, i32 1
  %212 = bitcast float* %211 to i32*
  %213 = load i32, i32* %212, align 4
  %214 = bitcast float* %210 to i32*
  store i32 %213, i32* %214, align 4
  %215 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %60, i64 0, i32 1
  %216 = bitcast i8* %178 to i16*
  %217 = bitcast i8* %215 to i16*
  %218 = load i16, i16* %216, align 4
  store i16 %218, i16* %217, align 4
  %219 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %60, i64 1
  %220 = ptrtoint %class.FX_PATHPOINT* %219 to i64
  store i64 %220, i64* %54, align 8
  %221 = load i64, i64* %26, align 8
  %222 = inttoptr i64 %221 to %class.FX_PATHPOINT*
  br label %293

223:                                              ; preds = %202
  %224 = add nsw i64 %67, 1
  %225 = icmp ugt i64 %224, 1537228672809129301
  br i1 %225, label %226, label %228

226:                                              ; preds = %223
  %227 = bitcast %"class.std::__1::vector"* %3 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* nonnull %227) #13
  unreachable

228:                                              ; preds = %223
  %229 = sub i64 %205, %62
  %230 = sdiv exact i64 %229, 12
  %231 = icmp ult i64 %230, 768614336404564650
  br i1 %231, label %232, label %237

232:                                              ; preds = %228
  %233 = shl nsw i64 %230, 1
  %234 = icmp ult i64 %233, %224
  %235 = select i1 %234, i64 %224, i64 %233
  %236 = icmp eq i64 %235, 0
  br i1 %236, label %242, label %237

237:                                              ; preds = %232, %228
  %238 = phi i64 [ %235, %232 ], [ 1537228672809129301, %228 ]
  %239 = mul i64 %238, 12
  %240 = tail call i8* @_Znwm(i64 %239) #14
  %241 = bitcast i8* %240 to %class.FX_PATHPOINT*
  br label %242

242:                                              ; preds = %237, %232
  %243 = phi i64 [ %238, %237 ], [ 0, %232 ]
  %244 = phi %class.FX_PATHPOINT* [ %241, %237 ], [ null, %232 ]
  %245 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %244, i64 %67
  %246 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %244, i64 %243
  %247 = ptrtoint %class.FX_PATHPOINT* %246 to i64
  %248 = bitcast %class.FX_PATHPOINT* %64 to i32*
  %249 = load i32, i32* %248, align 4
  %250 = bitcast %class.FX_PATHPOINT* %245 to i32*
  store i32 %249, i32* %250, align 4
  %251 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %244, i64 %67, i32 0, i32 1
  %252 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %65, i64 1, i32 0, i32 1
  %253 = bitcast float* %252 to i32*
  %254 = load i32, i32* %253, align 4
  %255 = bitcast float* %251 to i32*
  store i32 %254, i32* %255, align 4
  %256 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %244, i64 %67, i32 1
  %257 = bitcast i8* %178 to i16*
  %258 = bitcast i8* %256 to i16*
  %259 = load i16, i16* %257, align 4
  store i16 %259, i16* %258, align 4
  %260 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %245, i64 1
  %261 = ptrtoint %class.FX_PATHPOINT* %260 to i64
  %262 = icmp eq %class.FX_PATHPOINT* %60, %59
  br i1 %262, label %263, label %265

263:                                              ; preds = %242
  %264 = ptrtoint %class.FX_PATHPOINT* %59 to i64
  br label %286

265:                                              ; preds = %242, %265
  %266 = phi %class.FX_PATHPOINT* [ %268, %265 ], [ %245, %242 ]
  %267 = phi %class.FX_PATHPOINT* [ %269, %265 ], [ %60, %242 ]
  %268 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %266, i64 -1
  %269 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %267, i64 -1
  %270 = bitcast %class.FX_PATHPOINT* %269 to i32*
  %271 = load i32, i32* %270, align 4
  %272 = bitcast %class.FX_PATHPOINT* %268 to i32*
  store i32 %271, i32* %272, align 4
  %273 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %266, i64 -1, i32 0, i32 1
  %274 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %267, i64 -1, i32 0, i32 1
  %275 = bitcast float* %274 to i32*
  %276 = load i32, i32* %275, align 4
  %277 = bitcast float* %273 to i32*
  store i32 %276, i32* %277, align 4
  %278 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %266, i64 -1, i32 1
  %279 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %267, i64 -1, i32 1
  %280 = bitcast i8* %279 to i16*
  %281 = bitcast i8* %278 to i16*
  %282 = load i16, i16* %280, align 4
  store i16 %282, i16* %281, align 4
  %283 = icmp eq %class.FX_PATHPOINT* %269, %59
  br i1 %283, label %284, label %265

284:                                              ; preds = %265
  %285 = load i64, i64* %26, align 8
  br label %286

286:                                              ; preds = %284, %263
  %287 = phi %class.FX_PATHPOINT* [ %245, %263 ], [ %268, %284 ]
  %288 = phi i64 [ %264, %263 ], [ %285, %284 ]
  %289 = ptrtoint %class.FX_PATHPOINT* %287 to i64
  store i64 %289, i64* %26, align 8
  store i64 %261, i64* %54, align 8
  store i64 %247, i64* %25, align 8
  %290 = icmp eq i64 %288, 0
  br i1 %290, label %293, label %291

291:                                              ; preds = %286
  %292 = inttoptr i64 %288 to i8*
  tail call void @_ZdlPv(i8* %292) #14
  br label %293

293:                                              ; preds = %291, %286, %206
  %294 = phi %class.FX_PATHPOINT* [ %287, %291 ], [ %287, %286 ], [ %222, %206 ]
  %295 = phi %class.FX_PATHPOINT* [ %260, %291 ], [ %260, %286 ], [ %219, %206 ]
  %296 = phi i64 [ %289, %291 ], [ %289, %286 ], [ %221, %206 ]
  %297 = phi i64 [ %261, %291 ], [ %261, %286 ], [ %220, %206 ]
  %298 = sub i64 %297, %296
  %299 = sdiv exact i64 %298, 12
  %300 = icmp ugt i64 %299, 5
  %301 = inttoptr i64 %297 to %class.FX_PATHPOINT*
  br i1 %300, label %327, label %302

302:                                              ; preds = %293
  %303 = inttoptr i64 %296 to %class.FX_PATHPOINT*
  %304 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %6, align 8
  br label %305

305:                                              ; preds = %302, %196
  %306 = phi i64 [ %56, %196 ], [ %297, %302 ]
  %307 = phi %class.FX_PATHPOINT* [ %57, %196 ], [ %295, %302 ]
  %308 = phi %class.FX_PATHPOINT* [ %58, %196 ], [ %304, %302 ]
  %309 = phi %class.FX_PATHPOINT* [ %59, %196 ], [ %303, %302 ]
  %310 = phi %class.FX_PATHPOINT* [ %60, %196 ], [ %301, %302 ]
  %311 = phi %class.FX_PATHPOINT* [ %61, %196 ], [ %301, %302 ]
  %312 = phi i64 [ %62, %196 ], [ %296, %302 ]
  %313 = phi i64 [ %189, %196 ], [ %297, %302 ]
  %314 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %64, i64 1
  %315 = icmp eq %class.FX_PATHPOINT* %314, %308
  br i1 %315, label %318, label %55

316:                                              ; preds = %172
  %317 = load i64, i64* %26, align 8
  br label %318

318:                                              ; preds = %305, %316, %21
  %319 = phi i64 [ %173, %316 ], [ %46, %21 ], [ %306, %305 ]
  %320 = phi i64 [ %317, %316 ], [ %29, %21 ], [ %312, %305 ]
  %321 = bitcast %"class.std::__1::vector"* %0 to i64*
  store i64 %320, i64* %321, align 8
  %322 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %323 = bitcast %class.FX_PATHPOINT** %322 to i64*
  store i64 %319, i64* %323, align 8
  %324 = load i64, i64* %25, align 8
  %325 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %326 = bitcast %class.FX_PATHPOINT** %325 to i64*
  store i64 %324, i64* %326, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %22, i8 0, i64 24, i1 false) #12
  br label %334

327:                                              ; preds = %293
  %328 = bitcast %"class.std::__1::vector"* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %328, i8 0, i64 24, i1 false) #12
  %329 = icmp eq %class.FX_PATHPOINT* %294, null
  br i1 %329, label %334, label %330

330:                                              ; preds = %327
  %331 = ptrtoint %class.FX_PATHPOINT* %294 to i64
  %332 = bitcast %class.FX_PATHPOINT** %23 to i64*
  store i64 %331, i64* %332, align 8
  %333 = bitcast %class.FX_PATHPOINT* %294 to i8*
  tail call void @_ZdlPv(i8* %333) #14
  br label %334

334:                                              ; preds = %318, %327, %330
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #12
  br label %335

335:                                              ; preds = %334, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK12CFX_PathData7GetRectEPK10CFX_Matrix(%"class.pdfium::Optional"* noalias nocapture sret, %class.CFX_PathData* nocapture readonly, %class.CFX_Matrix*) local_unnamed_addr #3 align 2 {
  %4 = alloca <2 x i64>, align 16
  %5 = bitcast <2 x i64>* %4 to { <2 x float>, <2 x float> }*
  %6 = alloca <2 x i64>, align 16
  %7 = bitcast <2 x i64>* %6 to { <2 x float>, <2 x float> }*
  %8 = alloca %"class.std::__1::vector", align 16
  %9 = alloca %"class.std::__1::vector", align 16
  %10 = alloca [5 x %class.CFX_PTemplate], align 16
  %11 = bitcast [5 x %class.CFX_PTemplate]* %10 to i8*
  %12 = alloca %class.CFX_PTemplate, align 4
  %13 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %1, i64 0, i32 0
  %14 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %1, i64 0, i32 0, i32 0, i32 1
  %15 = bitcast %class.FX_PATHPOINT** %14 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = bitcast %class.CFX_PathData* %1 to i64*
  %18 = load i64, i64* %17, align 8
  %19 = sub i64 %16, %18
  %20 = sdiv exact i64 %19, 12
  %21 = icmp ugt i64 %20, 5
  %22 = bitcast %"class.std::__1::vector"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %22) #12
  %23 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 0, i64 24, i1 false) #12
  br i1 %21, label %24, label %36

24:                                               ; preds = %3
  %25 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %8, i64 0, i32 0, i32 2, i32 0, i32 0
  %26 = bitcast %"class.std::__1::vector"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #12
  call fastcc void @_ZN12_GLOBAL__N_119GetNormalizedPointsERKNSt3__16vectorI12FX_PATHPOINTNS0_9allocatorIS2_EEEE(%"class.std::__1::vector"* nonnull sret %9, %"class.std::__1::vector"* dereferenceable(24) %13)
  %27 = bitcast %"class.std::__1::vector"* %9 to <2 x i64>*
  %28 = load <2 x i64>, <2 x i64>* %27, align 16
  %29 = bitcast %"class.std::__1::vector"* %8 to <2 x i64>*
  store <2 x i64> %28, <2 x i64>* %29, align 16
  %30 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %9, i64 0, i32 0, i32 2, i32 0, i32 0
  %31 = bitcast %class.FX_PATHPOINT** %30 to i64*
  %32 = load i64, i64* %31, align 16
  %33 = bitcast %class.FX_PATHPOINT** %25 to i64*
  store i64 %32, i64* %33, align 16
  %34 = extractelement <2 x i64> %28, i32 0
  %35 = inttoptr i64 %34 to %class.FX_PATHPOINT*
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #12
  br label %36

36:                                               ; preds = %24, %3
  %37 = phi %class.FX_PATHPOINT* [ %35, %24 ], [ null, %3 ]
  %38 = select i1 %21, %"class.std::__1::vector"* %8, %"class.std::__1::vector"* %13
  %39 = icmp eq %class.CFX_Matrix* %2, null
  br i1 %39, label %40, label %71

40:                                               ; preds = %36
  %41 = call fastcc zeroext i1 @_ZN12_GLOBAL__N_110IsRectImplERKNSt3__16vectorI12FX_PATHPOINTNS0_9allocatorIS2_EEEE(%"class.std::__1::vector"* dereferenceable(24) %38)
  br i1 %41, label %44, label %42

42:                                               ; preds = %40
  %43 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %43, align 4
  br label %218

44:                                               ; preds = %40
  %45 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %38, i64 0, i32 0, i32 0
  %46 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %45, align 8
  %47 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %46, i64 2, i32 0
  %48 = bitcast <2 x i64>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %48)
  %49 = bitcast <2 x i64>* %4 to %class.CFX_FloatRect*
  %50 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %49, i64 0, i32 1
  %51 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %5, i64 0, i32 1, i64 0
  %52 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %49, i64 0, i32 3
  %53 = bitcast %class.FX_PATHPOINT* %46 to i32*
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %46, i64 0, i32 0, i32 1
  %56 = bitcast float* %55 to i32*
  %57 = load i32, i32* %56, align 4
  %58 = bitcast %class.CFX_PTemplate* %47 to i32*
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %46, i64 2, i32 0, i32 1
  %61 = bitcast float* %60 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = bitcast <2 x i64>* %4 to i32*
  store i32 %54, i32* %63, align 16
  %64 = bitcast float* %50 to i32*
  store i32 %57, i32* %64, align 4
  %65 = bitcast float* %51 to i32*
  store i32 %59, i32* %65, align 8
  %66 = bitcast float* %52 to i32*
  store i32 %62, i32* %66, align 4
  call void @_ZN13CFX_FloatRect9NormalizeEv(%class.CFX_FloatRect* nonnull %49) #12
  %67 = load <2 x i64>, <2 x i64>* %4, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %48)
  %68 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %68, align 4
  %69 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %70 = bitcast %union.anon* %69 to <2 x i64>*
  store <2 x i64> %67, <2 x i64>* %70, align 4
  br label %218

71:                                               ; preds = %36
  %72 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %38, i64 0, i32 0, i32 1
  %73 = bitcast %class.FX_PATHPOINT** %72 to i64*
  %74 = load i64, i64* %73, align 8
  %75 = bitcast %"class.std::__1::vector"* %38 to i64*
  %76 = load i64, i64* %75, align 8
  %77 = sub i64 %74, %76
  %78 = sdiv exact i64 %77, 12
  %79 = inttoptr i64 %76 to %class.FX_PATHPOINT*
  switch i64 %78, label %127 [
    i64 5, label %83
    i64 4, label %80
  ]

80:                                               ; preds = %71
  %81 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %79, i64 0, i32 0, i32 0
  %82 = load float, float* %81, align 4
  br label %95

83:                                               ; preds = %71
  %84 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %79, i64 0, i32 0, i32 0
  %85 = load float, float* %84, align 4
  %86 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %79, i64 4, i32 0, i32 0
  %87 = load float, float* %86, align 4
  %88 = fcmp oeq float %85, %87
  br i1 %88, label %89, label %127

89:                                               ; preds = %83
  %90 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %79, i64 0, i32 0, i32 1
  %91 = load float, float* %90, align 4
  %92 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %79, i64 4, i32 0, i32 1
  %93 = load float, float* %92, align 4
  %94 = fcmp une float %91, %93
  br i1 %94, label %127, label %95

95:                                               ; preds = %80, %89
  %96 = phi float [ %82, %80 ], [ %85, %89 ]
  %97 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %79, i64 2, i32 0, i32 0
  %98 = load float, float* %97, align 4
  %99 = fcmp oeq float %96, %98
  br i1 %99, label %100, label %106

100:                                              ; preds = %95
  %101 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %79, i64 0, i32 0, i32 1
  %102 = load float, float* %101, align 4
  %103 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %79, i64 2, i32 0, i32 1
  %104 = load float, float* %103, align 4
  %105 = fcmp oeq float %102, %104
  br i1 %105, label %127, label %106

106:                                              ; preds = %100, %95
  %107 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %79, i64 1, i32 0, i32 0
  %108 = load float, float* %107, align 4
  %109 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %79, i64 3, i32 0, i32 0
  %110 = load float, float* %109, align 4
  %111 = fcmp oeq float %108, %110
  br i1 %111, label %112, label %118

112:                                              ; preds = %106
  %113 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %79, i64 1, i32 0, i32 1
  %114 = load float, float* %113, align 4
  %115 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %79, i64 3, i32 0, i32 1
  %116 = load float, float* %115, align 4
  %117 = fcmp oeq float %114, %116
  br i1 %117, label %127, label %118

118:                                              ; preds = %112, %106
  br label %121

119:                                              ; preds = %121
  %120 = icmp eq i64 %126, %78
  br i1 %120, label %129, label %121

121:                                              ; preds = %118, %119
  %122 = phi i64 [ %126, %119 ], [ 1, %118 ]
  %123 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %79, i64 %122, i32 1
  %124 = load i8, i8* %123, align 4
  %125 = icmp eq i8 %124, 0
  %126 = add nuw i64 %122, 1
  br i1 %125, label %119, label %127

127:                                              ; preds = %121, %71, %83, %112, %100, %89
  %128 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %128, align 4
  br label %218

129:                                              ; preds = %119
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %11) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 0, i64 40, i1 false)
  %130 = icmp eq i64 %74, %76
  br i1 %130, label %180, label %131

131:                                              ; preds = %129
  %132 = bitcast %class.CFX_PTemplate* %12 to i8*
  %133 = bitcast %class.CFX_PTemplate* %12 to i32*
  %134 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %12, i64 0, i32 1
  %135 = bitcast float* %134 to i32*
  br label %136

136:                                              ; preds = %131, %165
  %137 = phi %class.FX_PATHPOINT* [ %79, %131 ], [ %172, %165 ]
  %138 = phi i64 [ 0, %131 ], [ %166, %165 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %132) #12
  %139 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %137, i64 %138, i32 0
  call void @_ZNK10CFX_Matrix9TransformERK13CFX_PTemplateIfE(%class.CFX_PTemplate* nonnull sret %12, %class.CFX_Matrix* nonnull %2, %class.CFX_PTemplate* dereferenceable(8) %139) #12
  %140 = getelementptr inbounds [5 x %class.CFX_PTemplate], [5 x %class.CFX_PTemplate]* %10, i64 0, i64 %138
  %141 = icmp eq %class.CFX_PTemplate* %140, %12
  br i1 %141, label %148, label %142

142:                                              ; preds = %136
  %143 = load i32, i32* %133, align 4
  %144 = bitcast %class.CFX_PTemplate* %140 to i32*
  store i32 %143, i32* %144, align 8
  %145 = load i32, i32* %135, align 4
  %146 = getelementptr inbounds [5 x %class.CFX_PTemplate], [5 x %class.CFX_PTemplate]* %10, i64 0, i64 %138, i32 1
  %147 = bitcast float* %146 to i32*
  store i32 %145, i32* %147, align 4
  br label %148

148:                                              ; preds = %136, %142
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %132) #12
  %149 = icmp eq i64 %138, 0
  br i1 %149, label %165, label %150

150:                                              ; preds = %148
  %151 = add i64 %138, -1
  %152 = getelementptr inbounds %class.CFX_PTemplate, %class.CFX_PTemplate* %140, i64 0, i32 0
  %153 = load float, float* %152, align 8
  %154 = getelementptr inbounds [5 x %class.CFX_PTemplate], [5 x %class.CFX_PTemplate]* %10, i64 0, i64 %151, i32 0
  %155 = load float, float* %154, align 8
  %156 = fcmp une float %153, %155
  br i1 %156, label %157, label %165

157:                                              ; preds = %150
  %158 = getelementptr inbounds [5 x %class.CFX_PTemplate], [5 x %class.CFX_PTemplate]* %10, i64 0, i64 %138, i32 1
  %159 = load float, float* %158, align 4
  %160 = getelementptr inbounds [5 x %class.CFX_PTemplate], [5 x %class.CFX_PTemplate]* %10, i64 0, i64 %151, i32 1
  %161 = load float, float* %160, align 4
  %162 = fcmp une float %159, %161
  br i1 %162, label %163, label %165

163:                                              ; preds = %157
  %164 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %164, align 4
  br label %217

165:                                              ; preds = %150, %157, %148
  %166 = add nuw i64 %138, 1
  %167 = load i64, i64* %73, align 8
  %168 = load i64, i64* %75, align 8
  %169 = sub i64 %167, %168
  %170 = sdiv exact i64 %169, 12
  %171 = icmp ult i64 %166, %170
  %172 = inttoptr i64 %168 to %class.FX_PATHPOINT*
  br i1 %171, label %136, label %173

173:                                              ; preds = %165
  %174 = getelementptr inbounds [5 x %class.CFX_PTemplate], [5 x %class.CFX_PTemplate]* %10, i64 0, i64 0, i32 0
  %175 = load float, float* %174, align 16
  %176 = getelementptr inbounds [5 x %class.CFX_PTemplate], [5 x %class.CFX_PTemplate]* %10, i64 0, i64 3, i32 0
  %177 = load float, float* %176, align 8
  %178 = bitcast float %175 to i32
  %179 = fcmp une float %175, %177
  br i1 %179, label %185, label %180

180:                                              ; preds = %129, %173
  %181 = phi i32 [ %178, %173 ], [ 0, %129 ]
  %182 = getelementptr inbounds [5 x %class.CFX_PTemplate], [5 x %class.CFX_PTemplate]* %10, i64 0, i64 0, i32 1
  %183 = bitcast float* %182 to i32*
  %184 = load i32, i32* %183, align 4
  br label %195

185:                                              ; preds = %173
  %186 = getelementptr inbounds [5 x %class.CFX_PTemplate], [5 x %class.CFX_PTemplate]* %10, i64 0, i64 0, i32 1
  %187 = load float, float* %186, align 4
  %188 = getelementptr inbounds [5 x %class.CFX_PTemplate], [5 x %class.CFX_PTemplate]* %10, i64 0, i64 3, i32 1
  %189 = load float, float* %188, align 4
  %190 = fcmp une float %187, %189
  br i1 %190, label %193, label %191

191:                                              ; preds = %185
  %192 = bitcast float %187 to i32
  br label %195

193:                                              ; preds = %185
  %194 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %194, align 4
  br label %217

195:                                              ; preds = %191, %180
  %196 = phi i32 [ %181, %180 ], [ %178, %191 ]
  %197 = phi i32 [ %184, %180 ], [ %192, %191 ]
  %198 = getelementptr inbounds [5 x %class.CFX_PTemplate], [5 x %class.CFX_PTemplate]* %10, i64 0, i64 2
  %199 = bitcast <2 x i64>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %199)
  %200 = bitcast <2 x i64>* %6 to %class.CFX_FloatRect*
  %201 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %200, i64 0, i32 1
  %202 = getelementptr inbounds { <2 x float>, <2 x float> }, { <2 x float>, <2 x float> }* %7, i64 0, i32 1, i64 0
  %203 = getelementptr inbounds %class.CFX_FloatRect, %class.CFX_FloatRect* %200, i64 0, i32 3
  %204 = bitcast %class.CFX_PTemplate* %198 to i32*
  %205 = load i32, i32* %204, align 16
  %206 = getelementptr inbounds [5 x %class.CFX_PTemplate], [5 x %class.CFX_PTemplate]* %10, i64 0, i64 2, i32 1
  %207 = bitcast float* %206 to i32*
  %208 = load i32, i32* %207, align 4
  %209 = bitcast <2 x i64>* %6 to i32*
  store i32 %196, i32* %209, align 16
  %210 = bitcast float* %201 to i32*
  store i32 %197, i32* %210, align 4
  %211 = bitcast float* %202 to i32*
  store i32 %205, i32* %211, align 8
  %212 = bitcast float* %203 to i32*
  store i32 %208, i32* %212, align 4
  call void @_ZN13CFX_FloatRect9NormalizeEv(%class.CFX_FloatRect* nonnull %200) #12
  %213 = load <2 x i64>, <2 x i64>* %6, align 16
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %199)
  %214 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 0
  store i8 1, i8* %214, align 4
  %215 = getelementptr inbounds %"class.pdfium::Optional", %"class.pdfium::Optional"* %0, i64 0, i32 0, i32 0, i32 0, i32 1
  %216 = bitcast %union.anon* %215 to <2 x i64>*
  store <2 x i64> %213, <2 x i64>* %216, align 4
  br label %217

217:                                              ; preds = %163, %195, %193
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %11) #12
  br label %218

218:                                              ; preds = %217, %127, %44, %42
  %219 = icmp eq %class.FX_PATHPOINT* %37, null
  br i1 %219, label %224, label %220

220:                                              ; preds = %218
  %221 = ptrtoint %class.FX_PATHPOINT* %37 to i64
  %222 = bitcast %class.FX_PATHPOINT** %23 to i64*
  store i64 %221, i64* %222, align 8
  %223 = bitcast %class.FX_PATHPOINT* %37 to i8*
  call void @_ZdlPv(i8* %223) #14
  br label %224

224:                                              ; preds = %218, %220
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %22) #12
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22CFX_RetainablePathDataC2Ev(%class.CFX_RetainablePathData* nocapture) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.CFX_RetainablePathData, %class.CFX_RetainablePathData* %0, i64 0, i32 0, i32 0
  %3 = getelementptr inbounds %class.CFX_RetainablePathData, %class.CFX_RetainablePathData* %0, i64 0, i32 0, i32 1
  %4 = bitcast i64* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 32, i1 false)
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV22CFX_RetainablePathData, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22CFX_RetainablePathDataC2ERKS_(%class.CFX_RetainablePathData*, %class.CFX_RetainablePathData* nocapture readonly dereferenceable(40)) unnamed_addr #3 align 2 {
  %3 = getelementptr inbounds %class.CFX_RetainablePathData, %class.CFX_RetainablePathData* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5fxcrt10RetainableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  %4 = getelementptr inbounds %class.CFX_RetainablePathData, %class.CFX_RetainablePathData* %0, i64 0, i32 0, i32 1
  %5 = getelementptr inbounds %class.CFX_RetainablePathData, %class.CFX_RetainablePathData* %0, i64 0, i32 1
  %6 = getelementptr inbounds %class.CFX_RetainablePathData, %class.CFX_RetainablePathData* %1, i64 0, i32 1
  %7 = getelementptr inbounds %class.CFX_RetainablePathData, %class.CFX_RetainablePathData* %1, i64 0, i32 1, i32 0, i32 0, i32 1
  %8 = bitcast %class.FX_PATHPOINT** %7 to i64*
  %9 = bitcast i64* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 32, i1 false)
  %10 = load i64, i64* %8, align 8
  %11 = bitcast %class.CFX_PathData* %6 to i64*
  %12 = load i64, i64* %11, align 8
  %13 = sub i64 %10, %12
  %14 = sdiv exact i64 %13, 12
  %15 = icmp eq i64 %13, 0
  br i1 %15, label %57, label %16

16:                                               ; preds = %2
  %17 = icmp ugt i64 %14, 1537228672809129301
  br i1 %17, label %18, label %20

18:                                               ; preds = %16
  %19 = bitcast %class.CFX_PathData* %5 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %19) #13
  unreachable

20:                                               ; preds = %16
  %21 = tail call i8* @_Znwm(i64 %13) #14
  %22 = bitcast i8* %21 to %class.FX_PATHPOINT*
  %23 = getelementptr inbounds %class.CFX_RetainablePathData, %class.CFX_RetainablePathData* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %24 = bitcast %class.FX_PATHPOINT** %23 to i8**
  store i8* %21, i8** %24, align 8
  %25 = bitcast %class.CFX_PathData* %5 to i8**
  store i8* %21, i8** %25, align 8
  %26 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %22, i64 %14
  %27 = getelementptr inbounds %class.CFX_RetainablePathData, %class.CFX_RetainablePathData* %0, i64 0, i32 1, i32 0, i32 0, i32 2, i32 0, i32 0
  store %class.FX_PATHPOINT* %26, %class.FX_PATHPOINT** %27, align 8
  %28 = getelementptr inbounds %class.CFX_PathData, %class.CFX_PathData* %6, i64 0, i32 0, i32 0, i32 0
  %29 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %28, align 8
  %30 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %7, align 8
  %31 = bitcast %class.FX_PATHPOINT** %23 to i64*
  %32 = ptrtoint i8* %21 to i64
  %33 = icmp eq %class.FX_PATHPOINT* %29, %30
  br i1 %33, label %55, label %34

34:                                               ; preds = %20, %34
  %35 = phi %class.FX_PATHPOINT* [ %51, %34 ], [ %22, %20 ]
  %36 = phi %class.FX_PATHPOINT* [ %50, %34 ], [ %29, %20 ]
  %37 = bitcast %class.FX_PATHPOINT* %36 to i32*
  %38 = load i32, i32* %37, align 4
  %39 = bitcast %class.FX_PATHPOINT* %35 to i32*
  store i32 %38, i32* %39, align 4
  %40 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %35, i64 0, i32 0, i32 1
  %41 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %36, i64 0, i32 0, i32 1
  %42 = bitcast float* %41 to i32*
  %43 = load i32, i32* %42, align 4
  %44 = bitcast float* %40 to i32*
  store i32 %43, i32* %44, align 4
  %45 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %35, i64 0, i32 1
  %46 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %36, i64 0, i32 1
  %47 = bitcast i8* %46 to i16*
  %48 = bitcast i8* %45 to i16*
  %49 = load i16, i16* %47, align 4
  store i16 %49, i16* %48, align 4
  %50 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %36, i64 1
  %51 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %35, i64 1
  %52 = icmp eq %class.FX_PATHPOINT* %50, %30
  br i1 %52, label %53, label %34

53:                                               ; preds = %34
  %54 = ptrtoint %class.FX_PATHPOINT* %51 to i64
  br label %55

55:                                               ; preds = %53, %20
  %56 = phi i64 [ %32, %20 ], [ %54, %53 ]
  store i64 %56, i64* %31, align 8
  br label %57

57:                                               ; preds = %2, %55
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV22CFX_RetainablePathData, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22CFX_RetainablePathDataD2Ev(%class.CFX_RetainablePathData* nocapture) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.CFX_RetainablePathData, %class.CFX_RetainablePathData* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %2, align 8
  %4 = icmp eq %class.FX_PATHPOINT* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %class.FX_PATHPOINT* %3 to i64
  %7 = getelementptr inbounds %class.CFX_RetainablePathData, %class.CFX_RetainablePathData* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %8 = bitcast %class.FX_PATHPOINT** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast %class.FX_PATHPOINT* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #14
  br label %10

10:                                               ; preds = %1, %5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN22CFX_RetainablePathDataD0Ev(%class.CFX_RetainablePathData*) unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %class.CFX_RetainablePathData, %class.CFX_RetainablePathData* %0, i64 0, i32 1, i32 0, i32 0, i32 0
  %3 = load %class.FX_PATHPOINT*, %class.FX_PATHPOINT** %2, align 8
  %4 = icmp eq %class.FX_PATHPOINT* %3, null
  br i1 %4, label %10, label %5

5:                                                ; preds = %1
  %6 = ptrtoint %class.FX_PATHPOINT* %3 to i64
  %7 = getelementptr inbounds %class.CFX_RetainablePathData, %class.CFX_RetainablePathData* %0, i64 0, i32 1, i32 0, i32 0, i32 1
  %8 = bitcast %class.FX_PATHPOINT** %7 to i64*
  store i64 %6, i64* %8, align 8
  %9 = bitcast %class.FX_PATHPOINT* %3 to i8*
  tail call void @_ZdlPv(i8* %9) #14
  br label %10

10:                                               ; preds = %1, %5
  %11 = bitcast %class.CFX_RetainablePathData* %0 to i8*
  tail call void @_ZdlPv(i8* %11) #14
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZNK22CFX_RetainablePathData5CloneEv(%"class.fxcrt::RetainPtr"* noalias nocapture sret, %class.CFX_RetainablePathData* nocapture readonly) local_unnamed_addr #3 align 2 {
  %3 = tail call i8* @_Znwm(i64 40) #14, !noalias !9
  %4 = bitcast i8* %3 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTVN5fxcrt10RetainableE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !noalias !9
  %5 = getelementptr inbounds i8, i8* %3, i64 8
  %6 = bitcast i8* %5 to i64*
  %7 = getelementptr inbounds i8, i8* %3, i64 16
  %8 = getelementptr inbounds %class.CFX_RetainablePathData, %class.CFX_RetainablePathData* %1, i64 0, i32 1
  %9 = getelementptr inbounds %class.CFX_RetainablePathData, %class.CFX_RetainablePathData* %1, i64 0, i32 1, i32 0, i32 0, i32 1
  %10 = bitcast %class.FX_PATHPOINT** %9 to i64*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 32, i1 false) #12, !noalias !9
  %11 = load i64, i64* %10, align 8, !noalias !9
  %12 = bitcast %class.CFX_PathData* %8 to i64*
  %13 = load i64, i64* %12, align 8, !noalias !9
  %14 = sub i64 %11, %13
  %15 = sdiv exact i64 %14, 12
  %16 = icmp eq i64 %14, 0
  %17 = inttoptr i64 %13 to %class.FX_PATHPOINT*
  %18 = inttoptr i64 %11 to %class.FX_PATHPOINT*
  br i1 %16, label %60, label %19

19:                                               ; preds = %2
  %20 = icmp ugt i64 %15, 1537228672809129301
  br i1 %20, label %21, label %23

21:                                               ; preds = %19
  %22 = bitcast i8* %7 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %22) #13, !noalias !9
  unreachable

23:                                               ; preds = %19
  %24 = tail call i8* @_Znwm(i64 %14) #14, !noalias !9
  %25 = bitcast i8* %24 to %class.FX_PATHPOINT*
  %26 = getelementptr inbounds i8, i8* %3, i64 24
  %27 = bitcast i8* %26 to i8**
  store i8* %24, i8** %27, align 8, !noalias !9
  %28 = bitcast i8* %7 to i8**
  store i8* %24, i8** %28, align 8, !noalias !9
  %29 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %25, i64 %15
  %30 = getelementptr inbounds i8, i8* %3, i64 32
  %31 = bitcast i8* %30 to %class.FX_PATHPOINT**
  store %class.FX_PATHPOINT* %29, %class.FX_PATHPOINT** %31, align 8, !noalias !9
  %32 = bitcast i8* %26 to i64*
  %33 = ptrtoint i8* %24 to i64
  %34 = icmp eq %class.FX_PATHPOINT* %17, %18
  br i1 %34, label %57, label %35

35:                                               ; preds = %23, %35
  %36 = phi %class.FX_PATHPOINT* [ %52, %35 ], [ %25, %23 ]
  %37 = phi %class.FX_PATHPOINT* [ %51, %35 ], [ %17, %23 ]
  %38 = bitcast %class.FX_PATHPOINT* %37 to i32*
  %39 = load i32, i32* %38, align 4, !noalias !9
  %40 = bitcast %class.FX_PATHPOINT* %36 to i32*
  store i32 %39, i32* %40, align 4, !noalias !9
  %41 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %36, i64 0, i32 0, i32 1
  %42 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %37, i64 0, i32 0, i32 1
  %43 = bitcast float* %42 to i32*
  %44 = load i32, i32* %43, align 4, !noalias !9
  %45 = bitcast float* %41 to i32*
  store i32 %44, i32* %45, align 4, !noalias !9
  %46 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %36, i64 0, i32 1
  %47 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %37, i64 0, i32 1
  %48 = bitcast i8* %47 to i16*
  %49 = bitcast i8* %46 to i16*
  %50 = load i16, i16* %48, align 4, !noalias !9
  store i16 %50, i16* %49, align 4, !noalias !9
  %51 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %37, i64 1
  %52 = getelementptr inbounds %class.FX_PATHPOINT, %class.FX_PATHPOINT* %36, i64 1
  %53 = icmp eq %class.FX_PATHPOINT* %51, %18
  br i1 %53, label %54, label %35

54:                                               ; preds = %35
  %55 = ptrtoint %class.FX_PATHPOINT* %52 to i64
  %56 = load i64, i64* %6, align 8, !noalias !9
  br label %57

57:                                               ; preds = %54, %23
  %58 = phi i64 [ 0, %23 ], [ %56, %54 ]
  %59 = phi i64 [ %33, %23 ], [ %55, %54 ]
  store i64 %59, i64* %32, align 8, !noalias !9
  br label %60

60:                                               ; preds = %2, %57
  %61 = phi i64 [ 0, %2 ], [ %58, %57 ]
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [4 x i8*] }, { [4 x i8*] }* @_ZTV22CFX_RetainablePathData, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %4, align 8, !noalias !9
  %62 = ptrtoint i8* %3 to i64
  %63 = bitcast %"class.fxcrt::RetainPtr"* %0 to i64*
  store i64 %62, i64* %63, align 8, !alias.scope !9
  %64 = add nsw i64 %61, 1
  store i64 %64, i64* %6, align 8, !noalias !9
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #8

; Function Attrs: nofree nounwind
declare float @sqrtf(float) local_unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #11

declare void @_ZN13CFX_FloatRect9NormalizeEv(%class.CFX_FloatRect*) local_unnamed_addr #5

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5fxcrt10RetainableD2Ev(%"class.fxcrt::Retainable"*) unnamed_addr #3 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN5fxcrt10RetainableD0Ev(%"class.fxcrt::Retainable"*) unnamed_addr #3 comdat align 2 {
  %2 = bitcast %"class.fxcrt::Retainable"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #14
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { argmemonly nounwind }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }
attributes #14 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZNK13CFX_PTemplateIfEplERKS0_: argument 0"}
!5 = distinct !{!5, !"_ZNK13CFX_PTemplateIfEplERKS0_"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZNK13CFX_PTemplateIfEmiERKS0_: argument 0"}
!8 = distinct !{!8, !"_ZNK13CFX_PTemplateIfEmiERKS0_"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN6pdfium10MakeRetainI22CFX_RetainablePathDataJRKS1_EEEN5fxcrt9RetainPtrIT_EEDpOT0_: argument 0"}
!11 = distinct !{!11, !"_ZN6pdfium10MakeRetainI22CFX_RetainablePathDataJRKS1_EEEN5fxcrt9RetainPtrIT_EEDpOT0_"}
