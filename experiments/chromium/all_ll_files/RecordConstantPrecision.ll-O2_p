; ModuleID = '../../third_party/angle/src/compiler/translator/tree_ops/gl/RecordConstantPrecision.cpp'
source_filename = "../../third_party/angle/src/compiler/translator/tree_ops/gl/RecordConstantPrecision.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.sh::TCompiler" = type opaque
%"class.sh::TIntermNode" = type { i32 (...)**, %"struct.sh::TSourceLoc" }
%"struct.sh::TSourceLoc" = type { i32, i32, i32, i32 }
%"class.sh::TSymbolTable" = type opaque
%"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser" = type <{ %"class.sh::TIntermTraverser", i8, [7 x i8] }>
%"class.sh::TIntermTraverser" = type { i32 (...)**, i8, i8, i8, i32, i32, i8, %"class.std::__1::vector", %"class.sh::TSymbolTable"*, %"class.std::__1::vector.6", %"class.std::__1::vector.13", %"class.sh::TVector", %"class.std::__1::vector.20" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"*, %"class.std::__1::__compressed_pair.3" }
%"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry" = type { %"class.sh::TIntermAggregateBase"*, %"class.sh::TIntermNode"*, %"class.sh::TVector" }
%"class.sh::TIntermAggregateBase" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.sh::TIntermTraverser::NodeReplaceWithMultipleEntry"* }
%"class.std::__1::vector.6" = type { %"class.std::__1::__vector_base.7" }
%"class.std::__1::__vector_base.7" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"*, %"class.std::__1::__compressed_pair.8" }
%"struct.sh::TIntermTraverser::NodeInsertMultipleEntry" = type { %"class.sh::TIntermBlock"*, i64, %"class.sh::TVector", %"class.sh::TVector" }
%"class.sh::TIntermBlock" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.sh::TIntermTraverser::NodeInsertMultipleEntry"* }
%"class.std::__1::vector.13" = type { %"class.std::__1::__vector_base.14" }
%"class.std::__1::__vector_base.14" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"struct.sh::TIntermTraverser::NodeUpdateEntry"*, %"class.std::__1::__compressed_pair.15" }
%"struct.sh::TIntermTraverser::NodeUpdateEntry" = type <{ %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.sh::TIntermTraverser::NodeUpdateEntry"* }
%"class.sh::TVector" = type { %"class.std::__1::vector.0" }
%"class.std::__1::vector.0" = type { %"class.std::__1::__vector_base.1" }
%"class.std::__1::__vector_base.1" = type { %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"**, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.sh::TIntermNode"** }
%"class.std::__1::vector.20" = type { %"class.std::__1::__vector_base.21" }
%"class.std::__1::__vector_base.21" = type { %"struct.sh::TIntermTraverser::ParentBlock"*, %"struct.sh::TIntermTraverser::ParentBlock"*, %"class.std::__1::__compressed_pair.22" }
%"struct.sh::TIntermTraverser::ParentBlock" = type { %"class.sh::TIntermBlock"*, i64 }
%"class.std::__1::__compressed_pair.22" = type { %"struct.std::__1::__compressed_pair_elem.23" }
%"struct.std::__1::__compressed_pair_elem.23" = type { %"struct.sh::TIntermTraverser::ParentBlock"* }
%"class.sh::TIntermSymbol" = type { %"class.sh::TIntermTyped", %"class.sh::TVariable"* }
%"class.sh::TIntermTyped" = type { %"class.sh::TIntermNode" }
%"class.sh::TVariable" = type opaque
%"class.sh::TIntermConstantUnion" = type { %"class.sh::TIntermExpression", %"class.sh::TConstantUnion"* }
%"class.sh::TIntermExpression" = type { %"class.sh::TIntermTyped", %"class.sh::TType" }
%"class.sh::TType" = type { i32, i32, i32, i8, i8, %"struct.sh::TMemoryQualifier", i8, %"struct.sh::TLayoutQualifier", i8, i8, %"class.sh::TSpan", %"class.sh::TVector.27"*, %"class.sh::TInterfaceBlock"*, %"class.sh::TStructure"*, i8, i64, i8* }
%"struct.sh::TMemoryQualifier" = type { i8, i8, i8, i8, i8 }
%"struct.sh::TLayoutQualifier" = type <{ i32, i32, i32, i32, %"struct.sh::WorkGroupSize", i32, i32, i32, i32, i8, i8, [2 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, [3 x i8] }>
%"struct.sh::WorkGroupSize" = type { [3 x i32] }
%"class.sh::TSpan" = type { i32*, i64 }
%"class.sh::TVector.27" = type opaque
%"class.sh::TInterfaceBlock" = type opaque
%"class.sh::TStructure" = type opaque
%"class.sh::TConstantUnion" = type { %union.anon, i32 }
%union.anon = type { i32 }
%"class.sh::TIntermDeclaration" = type { %"class.sh::TIntermNode", %"class.sh::TIntermAggregateBase", %"class.sh::TVector" }
%"class.sh::TIntermCase" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"* }
%"class.sh::TIntermBinary" = type <{ %"class.sh::TIntermOperator.base", [7 x i8], %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, i8, [7 x i8] }>
%"class.sh::TIntermOperator.base" = type <{ %"class.sh::TIntermExpression", i8 }>
%"class.sh::TIntermAggregate" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermAggregateBase", %"class.sh::TVector", i8, i8, %"class.sh::TFunction"* }
%"class.sh::TFunction" = type opaque
%"class.sh::TIntermOperator" = type <{ %"class.sh::TIntermExpression", i8, [7 x i8] }>
%"class.sh::TIntermSwizzle" = type <{ %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TVector.28", i8, [7 x i8] }>
%"class.sh::TVector.28" = type { %"class.std::__1::vector.29" }
%"class.std::__1::vector.29" = type { %"class.std::__1::__vector_base.30" }
%"class.std::__1::__vector_base.30" = type { i32*, i32*, %"class.std::__1::__compressed_pair.31" }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { i32* }
%"class.sh::TIntermUnary" = type { %"class.sh::TIntermOperator.base", %"class.sh::TIntermTyped"*, i8, %"class.sh::TFunction"* }
%"class.sh::TIntermTernary" = type { %"class.sh::TIntermExpression", %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermIfElse" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermSwitch" = type { %"class.sh::TIntermNode", %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermFunctionPrototype" = type { %"class.sh::TIntermTyped", %"class.sh::TFunction"* }
%"class.sh::TIntermFunctionDefinition" = type { %"class.sh::TIntermNode", %"class.sh::TIntermFunctionPrototype"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermGlobalQualifierDeclaration" = type <{ %"class.sh::TIntermNode", %"class.sh::TIntermSymbol"*, i8, [7 x i8] }>
%"class.sh::TIntermLoop" = type { %"class.sh::TIntermNode", i32, %"class.sh::TIntermNode"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"*, %"class.sh::TIntermBlock"* }
%"class.sh::TIntermBranch" = type { %"class.sh::TIntermNode", i8, %"class.sh::TIntermTyped"* }
%"class.sh::TIntermPreprocessorDirective" = type { %"class.sh::TIntermNode", i32, %"class.sh::ImmutableString" }
%"class.sh::ImmutableString" = type { i8*, i64 }

$_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE = comdat any

$_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE = comdat any

$_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE = comdat any

$_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE = comdat any

$_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE = comdat any

$_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE = comdat any

$_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE = comdat any

$_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE = comdat any

$_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE = comdat any

$_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE = comdat any

$_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE = comdat any

$_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE = comdat any

$_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE = comdat any

$_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE = comdat any

$_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE = comdat any

$_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE = comdat any

$_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE = comdat any

@_ZTVN2sh12_GLOBAL__N_132RecordConstantPrecisionTraverserE = internal unnamed_addr constant { [28 x i8*] } { [28 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.sh::TIntermTraverser"*)* @_ZN2sh16TIntermTraverserD2Ev to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser"*)* @_ZN2sh12_GLOBAL__N_132RecordConstantPrecisionTraverserD0Ev to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*)* @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE to i8*), i8* bitcast (void (%"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser"*, %"class.sh::TIntermConstantUnion"*)* @_ZN2sh12_GLOBAL__N_132RecordConstantPrecisionTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*)* @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*)* @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*)* @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*)* @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*)* @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*)* @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*)* @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*)* @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE to i8*), i8* bitcast (i1 (%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*)* @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*)* @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*)* @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*)* @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*)* @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*)* @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*)* @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE to i8*), i8* bitcast (void (%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*)* @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2sh23RecordConstantPrecisionEPNS_9TCompilerEPNS_11TIntermNodeEPNS_12TSymbolTableE(%"class.sh::TCompiler"*, %"class.sh::TIntermNode"*, %"class.sh::TSymbolTable"*) local_unnamed_addr #0 {
  %4 = alloca %"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser", align 8
  %5 = bitcast %"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 160, i8* nonnull %5) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %5, i8 -86, i64 160, i1 false)
  %6 = getelementptr inbounds %"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser", %"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser"* %4, i64 0, i32 0
  call void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"* nonnull %6, i1 zeroext true, i1 zeroext false, i1 zeroext true, %"class.sh::TSymbolTable"* %2) #5
  %7 = getelementptr inbounds %"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser", %"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [28 x i8*] }, { [28 x i8*] }* @_ZTVN2sh12_GLOBAL__N_132RecordConstantPrecisionTraverserE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %7, align 8
  %8 = getelementptr inbounds %"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser", %"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser"* %4, i64 0, i32 1
  store i8 0, i8* %8, align 8
  %9 = bitcast %"class.sh::TIntermNode"* %1 to void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)***
  br label %10

10:                                               ; preds = %18, %3
  store i8 0, i8* %8, align 8
  %11 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)**, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*** %9, align 8
  %12 = getelementptr inbounds void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %11, i64 2
  %13 = load void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)*, void (%"class.sh::TIntermNode"*, %"class.sh::TIntermTraverser"*)** %12, align 8
  call void %13(%"class.sh::TIntermNode"* %1, %"class.sh::TIntermTraverser"* nonnull %6) #5
  %14 = load i8, i8* %8, align 8, !range !2
  %15 = icmp eq i8 %14, 0
  br i1 %15, label %21, label %16

16:                                               ; preds = %10
  %17 = call zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* nonnull %6, %"class.sh::TCompiler"* %0, %"class.sh::TIntermNode"* %1) #5
  br i1 %17, label %18, label %21

18:                                               ; preds = %16
  %19 = load i8, i8* %8, align 8
  %20 = icmp eq i8 %19, 0
  br i1 %20, label %21, label %10

21:                                               ; preds = %18, %10, %16
  %22 = phi i1 [ false, %16 ], [ true, %18 ], [ true, %10 ]
  call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 160, i8* nonnull %5) #5
  ret i1 %22
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZN2sh16TIntermTraverser10updateTreeEPNS_9TCompilerEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TCompiler"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN2sh16TIntermTraverserC2EbbbPNS_12TSymbolTableE(%"class.sh::TIntermTraverser"*, i1 zeroext, i1 zeroext, i1 zeroext, %"class.sh::TSymbolTable"*) unnamed_addr #2

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_132RecordConstantPrecisionTraverserD0Ev(%"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser"*) unnamed_addr #4 align 2 {
  %2 = getelementptr inbounds %"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser", %"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser"* %0, i64 0, i32 0
  tail call void @_ZN2sh16TIntermTraverserD2Ev(%"class.sh::TIntermTraverser"* %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser11visitSymbolEPNS_13TIntermSymbolE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermSymbol"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN2sh12_GLOBAL__N_132RecordConstantPrecisionTraverser18visitConstantUnionEPNS_20TIntermConstantUnionE(%"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser"*, %"class.sh::TIntermConstantUnion"*) unnamed_addr #0 align 2 {
  %3 = alloca %"class.sh::TIntermDeclaration"*, align 8
  %4 = getelementptr inbounds %"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser", %"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser"* %0, i64 0, i32 1
  %5 = load i8, i8* %4, align 8, !range !2
  %6 = icmp eq i8 %5, 0
  br i1 %6, label %7, label %211

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %1, i64 0, i32 0, i32 0
  %9 = bitcast %"class.sh::TIntermConstantUnion"* %1 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %10 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %9, align 8
  %11 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %10, i64 31
  %12 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %11, align 8
  %13 = tail call dereferenceable(184) %"class.sh::TType"* %12(%"class.sh::TIntermTyped"* %8) #5
  %14 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %13, i64 0, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = icmp slt i32 %15, 2
  br i1 %16, label %211, label %17

17:                                               ; preds = %7
  %18 = getelementptr inbounds %"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser", %"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser"* %0, i64 0, i32 0, i32 11, i32 0
  %19 = getelementptr inbounds %"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser", %"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser"* %0, i64 0, i32 0, i32 11, i32 0, i32 0, i32 1
  %20 = bitcast %"class.sh::TIntermNode"*** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = bitcast %"class.std::__1::vector.0"* %18 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = sub i64 %21, %23
  %25 = ashr exact i64 %24, 3
  %26 = icmp ult i64 %25, 2
  br i1 %26, label %33, label %27

27:                                               ; preds = %17
  %28 = inttoptr i64 %23 to %"class.sh::TIntermNode"**
  %29 = add nsw i64 %25, -2
  %30 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %28, i64 %29
  %31 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %30, align 8
  %32 = bitcast %"class.sh::TIntermNode"* %31 to %"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)***
  br label %33

33:                                               ; preds = %27, %17
  %34 = phi %"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)*** [ %32, %27 ], [ null, %17 ]
  %35 = phi %"class.sh::TIntermNode"* [ %31, %27 ], [ null, %17 ]
  %36 = load %"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)*** %34, align 8
  %37 = getelementptr inbounds %"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)** %36, i64 18
  %38 = load %"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermCase"* (%"class.sh::TIntermNode"*)** %37, align 8
  %39 = tail call %"class.sh::TIntermCase"* %38(%"class.sh::TIntermNode"* %35) #5
  %40 = icmp eq %"class.sh::TIntermCase"* %39, null
  br i1 %40, label %41, label %211

41:                                               ; preds = %33
  %42 = load i64, i64* %20, align 8
  %43 = load i64, i64* %22, align 8
  %44 = sub i64 %42, %43
  %45 = ashr exact i64 %44, 3
  %46 = icmp ult i64 %45, 2
  br i1 %46, label %53, label %47

47:                                               ; preds = %41
  %48 = inttoptr i64 %43 to %"class.sh::TIntermNode"**
  %49 = add nsw i64 %45, -2
  %50 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %48, i64 %49
  %51 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %50, align 8
  %52 = bitcast %"class.sh::TIntermNode"* %51 to %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)***
  br label %53

53:                                               ; preds = %47, %41
  %54 = phi %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** [ %52, %47 ], [ null, %41 ]
  %55 = phi %"class.sh::TIntermNode"* [ %51, %47 ], [ null, %41 ]
  %56 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*** %54, align 8
  %57 = getelementptr inbounds %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %56, i64 8
  %58 = load %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBlock"* (%"class.sh::TIntermNode"*)** %57, align 8
  %59 = tail call %"class.sh::TIntermBlock"* %58(%"class.sh::TIntermNode"* %55) #5
  %60 = icmp eq %"class.sh::TIntermBlock"* %59, null
  br i1 %60, label %61, label %211

61:                                               ; preds = %53
  %62 = load i64, i64* %20, align 8
  %63 = load i64, i64* %22, align 8
  %64 = sub i64 %62, %63
  %65 = ashr exact i64 %64, 3
  %66 = icmp ult i64 %65, 2
  br i1 %66, label %73, label %67

67:                                               ; preds = %61
  %68 = inttoptr i64 %63 to %"class.sh::TIntermNode"**
  %69 = add nsw i64 %65, -2
  %70 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %68, i64 %69
  %71 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %70, align 8
  %72 = bitcast %"class.sh::TIntermNode"* %71 to %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)***
  br label %73

73:                                               ; preds = %67, %61
  %74 = phi %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** [ %72, %67 ], [ null, %61 ]
  %75 = phi %"class.sh::TIntermNode"* [ %71, %67 ], [ null, %61 ]
  %76 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*** %74, align 8
  %77 = getelementptr inbounds %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %76, i64 13
  %78 = load %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermBinary"* (%"class.sh::TIntermNode"*)** %77, align 8
  %79 = tail call %"class.sh::TIntermBinary"* %78(%"class.sh::TIntermNode"* %75) #5
  %80 = icmp eq %"class.sh::TIntermBinary"* %79, null
  br i1 %80, label %115, label %81

81:                                               ; preds = %73
  %82 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %79, i64 0, i32 0, i32 1
  %83 = load i8, i8* %82, align 8
  switch i8 %83, label %84 [
    i8 -117, label %211
    i8 -118, label %211
    i8 44, label %211
    i8 46, label %211
    i8 47, label %211
    i8 45, label %211
  ]

84:                                               ; preds = %81
  %85 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %79, i64 0, i32 3
  %86 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %85, align 8
  %87 = icmp eq %"class.sh::TIntermTyped"* %86, %8
  br i1 %87, label %88, label %91

88:                                               ; preds = %84
  %89 = getelementptr inbounds %"class.sh::TIntermBinary", %"class.sh::TIntermBinary"* %79, i64 0, i32 2
  %90 = load %"class.sh::TIntermTyped"*, %"class.sh::TIntermTyped"** %89, align 8
  br label %91

91:                                               ; preds = %88, %84
  %92 = phi %"class.sh::TIntermTyped"* [ %90, %88 ], [ %86, %84 ]
  %93 = getelementptr inbounds %"class.sh::TIntermTyped", %"class.sh::TIntermTyped"* %92, i64 0, i32 0
  %94 = bitcast %"class.sh::TIntermTyped"* %92 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %95 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %94, align 8
  %96 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %95, i64 5
  %97 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %96, align 8
  %98 = tail call %"class.sh::TIntermConstantUnion"* %97(%"class.sh::TIntermNode"* %93) #5
  %99 = icmp eq %"class.sh::TIntermConstantUnion"* %98, null
  br i1 %99, label %100, label %115

100:                                              ; preds = %91
  %101 = bitcast %"class.sh::TIntermTyped"* %92 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %102 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %101, align 8
  %103 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %102, i64 31
  %104 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %103, align 8
  %105 = tail call dereferenceable(184) %"class.sh::TType"* %104(%"class.sh::TIntermTyped"* %92) #5
  %106 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %105, i64 0, i32 1
  %107 = load i32, i32* %106, align 4
  %108 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %9, align 8
  %109 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %108, i64 31
  %110 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %109, align 8
  %111 = tail call dereferenceable(184) %"class.sh::TType"* %110(%"class.sh::TIntermTyped"* %8) #5
  %112 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %111, i64 0, i32 1
  %113 = load i32, i32* %112, align 4
  %114 = icmp slt i32 %107, %113
  br i1 %114, label %115, label %211

115:                                              ; preds = %100, %91, %73
  %116 = load i64, i64* %20, align 8
  %117 = load i64, i64* %22, align 8
  %118 = sub i64 %116, %117
  %119 = ashr exact i64 %118, 3
  %120 = icmp ult i64 %119, 2
  br i1 %120, label %127, label %121

121:                                              ; preds = %115
  %122 = inttoptr i64 %117 to %"class.sh::TIntermNode"**
  %123 = add nsw i64 %119, -2
  %124 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %122, i64 %123
  %125 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %124, align 8
  %126 = bitcast %"class.sh::TIntermNode"* %125 to %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)***
  br label %127

127:                                              ; preds = %121, %115
  %128 = phi %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)*** [ %126, %121 ], [ null, %115 ]
  %129 = phi %"class.sh::TIntermNode"* [ %125, %121 ], [ null, %115 ]
  %130 = load %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)*** %128, align 8
  %131 = getelementptr inbounds %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)** %130, i64 7
  %132 = load %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermAggregate"* (%"class.sh::TIntermNode"*)** %131, align 8
  %133 = tail call %"class.sh::TIntermAggregate"* %132(%"class.sh::TIntermNode"* %129) #5
  %134 = icmp eq %"class.sh::TIntermAggregate"* %133, null
  br i1 %134, label %201, label %135

135:                                              ; preds = %127
  %136 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %133, i64 0, i32 4
  %137 = load i8, i8* %136, align 1, !range !2
  %138 = icmp eq i8 %137, 0
  br i1 %138, label %211, label %139

139:                                              ; preds = %135
  %140 = bitcast %"class.sh::TIntermAggregate"* %133 to %"class.sh::TIntermOperator"*
  %141 = tail call zeroext i1 @_ZNK2sh15TIntermOperator13isConstructorEv(%"class.sh::TIntermOperator"* nonnull %140) #5
  br i1 %141, label %142, label %152

142:                                              ; preds = %139
  %143 = getelementptr inbounds %"class.sh::TIntermAggregate", %"class.sh::TIntermAggregate"* %133, i64 0, i32 0, i32 0, i32 0
  %144 = bitcast %"class.sh::TIntermAggregate"* %133 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %145 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %144, align 8
  %146 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %145, i64 31
  %147 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %146, align 8
  %148 = tail call dereferenceable(184) %"class.sh::TType"* %147(%"class.sh::TIntermTyped"* %143) #5
  %149 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %148, i64 0, i32 0
  %150 = load i32, i32* %149, align 8
  %151 = icmp eq i32 %150, 5
  br i1 %151, label %211, label %152

152:                                              ; preds = %142, %139
  %153 = bitcast %"class.sh::TIntermAggregate"* %133 to %"class.sh::TVector"* (%"class.sh::TIntermAggregate"*)***
  %154 = load %"class.sh::TVector"* (%"class.sh::TIntermAggregate"*)**, %"class.sh::TVector"* (%"class.sh::TIntermAggregate"*)*** %153, align 8
  %155 = getelementptr inbounds %"class.sh::TVector"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector"* (%"class.sh::TIntermAggregate"*)** %154, i64 32
  %156 = load %"class.sh::TVector"* (%"class.sh::TIntermAggregate"*)*, %"class.sh::TVector"* (%"class.sh::TIntermAggregate"*)** %155, align 8
  %157 = tail call %"class.sh::TVector"* %156(%"class.sh::TIntermAggregate"* nonnull %133) #5
  %158 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %157, i64 0, i32 0, i32 0, i32 0
  %159 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %158, align 8
  %160 = getelementptr inbounds %"class.sh::TVector", %"class.sh::TVector"* %157, i64 0, i32 0, i32 0, i32 1
  %161 = load %"class.sh::TIntermNode"**, %"class.sh::TIntermNode"*** %160, align 8
  %162 = icmp eq %"class.sh::TIntermNode"** %159, %161
  br i1 %162, label %201, label %163

163:                                              ; preds = %152
  %164 = getelementptr inbounds %"class.sh::TIntermConstantUnion", %"class.sh::TIntermConstantUnion"* %1, i64 0, i32 0, i32 0, i32 0
  br label %165

165:                                              ; preds = %198, %163
  %166 = phi %"class.sh::TIntermNode"** [ %159, %163 ], [ %199, %198 ]
  %167 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %166, align 8
  %168 = bitcast %"class.sh::TIntermNode"* %167 to %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)***
  %169 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*** %168, align 8
  %170 = getelementptr inbounds %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %169, i64 4
  %171 = load %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermTyped"* (%"class.sh::TIntermNode"*)** %170, align 8
  %172 = tail call %"class.sh::TIntermTyped"* %171(%"class.sh::TIntermNode"* %167) #5
  %173 = icmp ne %"class.sh::TIntermNode"* %167, %164
  %174 = icmp ne %"class.sh::TIntermTyped"* %172, null
  %175 = and i1 %173, %174
  br i1 %175, label %176, label %198

176:                                              ; preds = %165
  %177 = bitcast %"class.sh::TIntermNode"* %167 to %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)***
  %178 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)**, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*** %177, align 8
  %179 = getelementptr inbounds %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %178, i64 5
  %180 = load %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)*, %"class.sh::TIntermConstantUnion"* (%"class.sh::TIntermNode"*)** %179, align 8
  %181 = tail call %"class.sh::TIntermConstantUnion"* %180(%"class.sh::TIntermNode"* %167) #5
  %182 = icmp eq %"class.sh::TIntermConstantUnion"* %181, null
  br i1 %182, label %183, label %198

183:                                              ; preds = %176
  %184 = bitcast %"class.sh::TIntermTyped"* %172 to %"class.sh::TType"* (%"class.sh::TIntermTyped"*)***
  %185 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %184, align 8
  %186 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %185, i64 31
  %187 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %186, align 8
  %188 = tail call dereferenceable(184) %"class.sh::TType"* %187(%"class.sh::TIntermTyped"* nonnull %172) #5
  %189 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %188, i64 0, i32 1
  %190 = load i32, i32* %189, align 4
  %191 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)**, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*** %9, align 8
  %192 = getelementptr inbounds %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %191, i64 31
  %193 = load %"class.sh::TType"* (%"class.sh::TIntermTyped"*)*, %"class.sh::TType"* (%"class.sh::TIntermTyped"*)** %192, align 8
  %194 = tail call dereferenceable(184) %"class.sh::TType"* %193(%"class.sh::TIntermTyped"* %8) #5
  %195 = getelementptr inbounds %"class.sh::TType", %"class.sh::TType"* %194, i64 0, i32 1
  %196 = load i32, i32* %195, align 4
  %197 = icmp slt i32 %190, %196
  br i1 %197, label %198, label %211

198:                                              ; preds = %183, %176, %165
  %199 = getelementptr inbounds %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %166, i64 1
  %200 = icmp eq %"class.sh::TIntermNode"** %199, %161
  br i1 %200, label %201, label %165

201:                                              ; preds = %198, %152, %127
  %202 = bitcast %"class.sh::TIntermDeclaration"** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %202) #5
  store %"class.sh::TIntermDeclaration"* null, %"class.sh::TIntermDeclaration"** %3, align 8
  %203 = getelementptr inbounds %"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser", %"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser"* %0, i64 0, i32 0
  %204 = getelementptr inbounds %"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser", %"class.sh::(anonymous namespace)::RecordConstantPrecisionTraverser"* %0, i64 0, i32 0, i32 8
  %205 = load %"class.sh::TSymbolTable"*, %"class.sh::TSymbolTable"** %204, align 8
  %206 = call %"class.sh::TVariable"* @_ZN2sh19DeclareTempVariableEPNS_12TSymbolTableEPNS_12TIntermTypedENS_10TQualifierEPPNS_18TIntermDeclarationE(%"class.sh::TSymbolTable"* %205, %"class.sh::TIntermTyped"* %8, i32 2, %"class.sh::TIntermDeclaration"** nonnull %3) #5
  %207 = bitcast %"class.sh::TIntermDeclaration"** %3 to %"class.sh::TIntermNode"**
  %208 = load %"class.sh::TIntermNode"*, %"class.sh::TIntermNode"** %207, align 8
  call void @_ZN2sh16TIntermTraverser28insertStatementInParentBlockEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"* %203, %"class.sh::TIntermNode"* %208) #5
  %209 = call %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"* %206) #5
  %210 = getelementptr inbounds %"class.sh::TIntermSymbol", %"class.sh::TIntermSymbol"* %209, i64 0, i32 0, i32 0
  call void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"* %203, %"class.sh::TIntermNode"* %210, i32 1) #5
  store i8 1, i8* %4, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %202) #5
  br label %211

211:                                              ; preds = %183, %142, %135, %100, %81, %81, %81, %81, %81, %81, %33, %53, %2, %7, %201
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitSwizzleENS_5VisitEPNS_14TIntermSwizzleE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwizzle"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBinaryENS_5VisitEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBinary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitUnaryENS_5VisitEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermUnary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser12visitTernaryENS_5VisitEPNS_14TIntermTernaryE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermTernary"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitIfElseENS_5VisitEPNS_13TIntermIfElseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermIfElse"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitSwitchENS_5VisitEPNS_13TIntermSwitchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermSwitch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitCaseENS_5VisitEPNS_11TIntermCaseE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermCase"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser22visitFunctionPrototypeEPNS_24TIntermFunctionPrototypeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionPrototype"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser23visitFunctionDefinitionENS_5VisitEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser14visitAggregateENS_5VisitEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermAggregate"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser10visitBlockENS_5VisitEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBlock"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser31visitGlobalQualifierDeclarationENS_5VisitEPNS_33TIntermGlobalQualifierDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermGlobalQualifierDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser16visitDeclarationENS_5VisitEPNS_18TIntermDeclarationE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermDeclaration"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser9visitLoopENS_5VisitEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermLoop"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZN2sh16TIntermTraverser11visitBranchENS_5VisitEPNS_13TIntermBranchE(%"class.sh::TIntermTraverser"*, i32, %"class.sh::TIntermBranch"*) unnamed_addr #0 comdat align 2 {
  ret i1 true
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2sh16TIntermTraverser26visitPreprocessorDirectiveEPNS_28TIntermPreprocessorDirectiveE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermPreprocessorDirective"*) unnamed_addr #0 comdat align 2 {
  ret void
}

declare void @_ZN2sh16TIntermTraverser14traverseBinaryEPNS_13TIntermBinaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBinary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseUnaryEPNS_12TIntermUnaryE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermUnary"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser26traverseFunctionDefinitionEPNS_25TIntermFunctionDefinitionE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermFunctionDefinition"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser17traverseAggregateEPNS_16TIntermAggregateE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermAggregate"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser13traverseBlockEPNS_12TIntermBlockE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermBlock"*) unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser12traverseLoopEPNS_11TIntermLoopE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermLoop"*) unnamed_addr #2

declare %"class.sh::TVariable"* @_ZN2sh19DeclareTempVariableEPNS_12TSymbolTableEPNS_12TIntermTypedENS_10TQualifierEPPNS_18TIntermDeclarationE(%"class.sh::TSymbolTable"*, %"class.sh::TIntermTyped"*, i32, %"class.sh::TIntermDeclaration"**) local_unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser28insertStatementInParentBlockEPNS_11TIntermNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*) local_unnamed_addr #2

declare void @_ZN2sh16TIntermTraverser16queueReplacementEPNS_11TIntermNodeENS0_12OriginalNodeE(%"class.sh::TIntermTraverser"*, %"class.sh::TIntermNode"*, i32) local_unnamed_addr #2

declare %"class.sh::TIntermSymbol"* @_ZN2sh20CreateTempSymbolNodeEPKNS_9TVariableE(%"class.sh::TVariable"*) local_unnamed_addr #2

declare zeroext i1 @_ZNK2sh15TIntermOperator13isConstructorEv(%"class.sh::TIntermOperator"*) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
