; ModuleID = '../../third_party/blink/renderer/core/animation/property_handle.cc'
source_filename = "../../third_party/blink/renderer/core/animation/property_handle.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.blink::PropertyHandle" = type { i32, %union.anon, %"class.WTF::AtomicString" }
%union.anon = type { %"class.blink::CSSProperty"* }
%"class.blink::CSSProperty" = type <{ %"class.blink::CSSUnresolvedProperty", i32, i32, i8, [7 x i8] }>
%"class.blink::CSSUnresolvedProperty" = type { i32 (...)** }
%"class.WTF::AtomicString" = type { %"class.WTF::String" }
%"class.WTF::String" = type { %class.scoped_refptr.0 }
%class.scoped_refptr.0 = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.1" }
%"struct.std::__1::__atomic_base.1" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.blink::QualifiedName" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.blink::QualifiedName::QualifiedNameImpl"* }
%"class.blink::QualifiedName::QualifiedNameImpl" = type { %"class.WTF::RefCounted", i32, %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString", %"class.WTF::AtomicString" }
%"class.WTF::RefCounted" = type { %"class.base::RefCounted" }
%"class.base::RefCounted" = type { %"class.base::subtle::RefCountedBase" }
%"class.base::subtle::RefCountedBase" = type { i32 }

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden zeroext i1 @_ZNK5blink14PropertyHandleeqERKS0_(%"class.blink::PropertyHandle"* nocapture readonly, %"class.blink::PropertyHandle"* nocapture readonly dereferenceable(24)) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.blink::PropertyHandle", %"class.blink::PropertyHandle"* %0, i64 0, i32 0
  %4 = load i32, i32* %3, align 8
  %5 = getelementptr inbounds %"class.blink::PropertyHandle", %"class.blink::PropertyHandle"* %1, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp eq i32 %4, %6
  br i1 %7, label %8, label %29

8:                                                ; preds = %2
  switch i32 %4, label %29 [
    i32 2, label %9
    i32 4, label %9
    i32 3, label %15
    i32 5, label %21
  ]

9:                                                ; preds = %8, %8
  %10 = getelementptr inbounds %"class.blink::PropertyHandle", %"class.blink::PropertyHandle"* %0, i64 0, i32 1, i32 0
  %11 = load %"class.blink::CSSProperty"*, %"class.blink::CSSProperty"** %10, align 8
  %12 = getelementptr inbounds %"class.blink::PropertyHandle", %"class.blink::PropertyHandle"* %1, i64 0, i32 1, i32 0
  %13 = load %"class.blink::CSSProperty"*, %"class.blink::CSSProperty"** %12, align 8
  %14 = icmp eq %"class.blink::CSSProperty"* %11, %13
  br label %29

15:                                               ; preds = %8
  %16 = getelementptr inbounds %"class.blink::PropertyHandle", %"class.blink::PropertyHandle"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %17 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %16, align 8
  %18 = getelementptr inbounds %"class.blink::PropertyHandle", %"class.blink::PropertyHandle"* %1, i64 0, i32 2, i32 0, i32 0, i32 0
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %17, %19
  br label %29

21:                                               ; preds = %8
  %22 = getelementptr inbounds %"class.blink::PropertyHandle", %"class.blink::PropertyHandle"* %0, i64 0, i32 1
  %23 = bitcast %union.anon* %22 to %"class.blink::QualifiedName"**
  %24 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** %23, align 8
  %25 = getelementptr inbounds %"class.blink::PropertyHandle", %"class.blink::PropertyHandle"* %1, i64 0, i32 1
  %26 = bitcast %union.anon* %25 to %"class.blink::QualifiedName"**
  %27 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** %26, align 8
  %28 = icmp eq %"class.blink::QualifiedName"* %24, %27
  br label %29

29:                                               ; preds = %8, %2, %21, %15, %9
  %30 = phi i1 [ %28, %21 ], [ %20, %15 ], [ %14, %9 ], [ false, %2 ], [ true, %8 ]
  ret i1 %30
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @_ZNK5blink14PropertyHandle7GetHashEv(%"class.blink::PropertyHandle"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.blink::PropertyHandle", %"class.blink::PropertyHandle"* %0, i64 0, i32 0
  %3 = load i32, i32* %2, align 8
  switch i32 %3, label %37 [
    i32 2, label %4
    i32 3, label %9
    i32 4, label %15
    i32 5, label %21
  ]

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.blink::PropertyHandle", %"class.blink::PropertyHandle"* %0, i64 0, i32 1, i32 0
  %6 = load %"class.blink::CSSProperty"*, %"class.blink::CSSProperty"** %5, align 8
  %7 = getelementptr inbounds %"class.blink::CSSProperty", %"class.blink::CSSProperty"* %6, i64 0, i32 1
  %8 = load i32, i32* %7, align 8
  br label %37

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.blink::PropertyHandle", %"class.blink::PropertyHandle"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %11 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %10, align 8
  %12 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %11, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = lshr i32 %13, 8
  br label %37

15:                                               ; preds = %1
  %16 = getelementptr inbounds %"class.blink::PropertyHandle", %"class.blink::PropertyHandle"* %0, i64 0, i32 1, i32 0
  %17 = load %"class.blink::CSSProperty"*, %"class.blink::CSSProperty"** %16, align 8
  %18 = getelementptr inbounds %"class.blink::CSSProperty", %"class.blink::CSSProperty"* %17, i64 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = sub nsw i32 0, %19
  br label %37

21:                                               ; preds = %1
  %22 = getelementptr inbounds %"class.blink::PropertyHandle", %"class.blink::PropertyHandle"* %0, i64 0, i32 1
  %23 = bitcast %union.anon* %22 to %"class.blink::QualifiedName"**
  %24 = load %"class.blink::QualifiedName"*, %"class.blink::QualifiedName"** %23, align 8
  %25 = getelementptr inbounds %"class.blink::QualifiedName", %"class.blink::QualifiedName"* %24, i64 0, i32 0, i32 0
  %26 = load %"class.blink::QualifiedName::QualifiedNameImpl"*, %"class.blink::QualifiedName::QualifiedNameImpl"** %25, align 8
  %27 = getelementptr inbounds %"class.blink::QualifiedName::QualifiedNameImpl", %"class.blink::QualifiedName::QualifiedNameImpl"* %26, i64 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = and i32 %28, 16777215
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %37

31:                                               ; preds = %21
  %32 = tail call i32 @_ZNK5blink13QualifiedName17QualifiedNameImpl11ComputeHashEv(%"class.blink::QualifiedName::QualifiedNameImpl"* %26) #3
  %33 = load i32, i32* %27, align 4
  %34 = and i32 %32, 16777215
  %35 = and i32 %33, -16777216
  %36 = or i32 %35, %34
  store i32 %36, i32* %27, align 4
  br label %37

37:                                               ; preds = %31, %21, %1, %15, %9, %4
  %38 = phi i32 [ %20, %15 ], [ %14, %9 ], [ %8, %4 ], [ 0, %1 ], [ %29, %21 ], [ %34, %31 ]
  ret i32 %38
}

declare i32 @_ZNK5blink13QualifiedName17QualifiedNameImpl11ComputeHashEv(%"class.blink::QualifiedName::QualifiedNameImpl"*) local_unnamed_addr #2

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
