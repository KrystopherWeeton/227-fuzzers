; ModuleID = '../../third_party/boringssl/src/crypto/asn1/a_bitstr.c'
source_filename = "../../third_party/boringssl/src/crypto/asn1/a_bitstr.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.asn1_string_st = type { i32, i32, i8*, i64 }

@.str = private unnamed_addr constant [55 x i8] c"../../third_party/boringssl/src/crypto/asn1/a_bitstr.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ASN1_BIT_STRING_set(%struct.asn1_string_st*, i8*, i32) local_unnamed_addr #0 {
  %4 = tail call i32 @ASN1_STRING_set(%struct.asn1_string_st* %0, i8* %1, i32 %2) #4
  ret i32 %4
}

declare i32 @ASN1_STRING_set(%struct.asn1_string_st*, i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @i2c_ASN1_BIT_STRING(%struct.asn1_string_st* readonly, i8**) local_unnamed_addr #0 {
  %3 = icmp eq %struct.asn1_string_st* %0, null
  br i1 %3, label %85, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %59

8:                                                ; preds = %4
  %9 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 3
  %10 = load i64, i64* %9, align 8
  %11 = and i64 %10, 8
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %13, label %17

13:                                               ; preds = %8
  %14 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %15 = sext i32 %6 to i64
  %16 = load i8*, i8** %14, align 8
  br label %20

17:                                               ; preds = %8
  %18 = trunc i64 %10 to i32
  %19 = and i32 %18, 7
  br label %59

20:                                               ; preds = %13, %23
  %21 = phi i64 [ %15, %13 ], [ %24, %23 ]
  %22 = icmp sgt i64 %21, 0
  br i1 %22, label %23, label %28

23:                                               ; preds = %20
  %24 = add nsw i64 %21, -1
  %25 = getelementptr inbounds i8, i8* %16, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = icmp eq i8 %26, 0
  br i1 %27, label %20, label %28

28:                                               ; preds = %23, %20
  %29 = trunc i64 %21 to i32
  %30 = shl i64 %21, 32
  %31 = add i64 %30, -4294967296
  %32 = ashr exact i64 %31, 32
  %33 = getelementptr inbounds i8, i8* %16, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = zext i8 %34 to i32
  %36 = and i32 %35, 1
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %59

38:                                               ; preds = %28
  %39 = and i32 %35, 2
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %59

41:                                               ; preds = %38
  %42 = and i32 %35, 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %44, label %59

44:                                               ; preds = %41
  %45 = and i32 %35, 8
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %59

47:                                               ; preds = %44
  %48 = and i32 %35, 16
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %59

50:                                               ; preds = %47
  %51 = and i32 %35, 32
  %52 = icmp eq i32 %51, 0
  br i1 %52, label %53, label %59

53:                                               ; preds = %50
  %54 = and i32 %35, 64
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %59

56:                                               ; preds = %53
  %57 = icmp slt i8 %34, 0
  %58 = select i1 %57, i32 7, i32 0
  br label %59

59:                                               ; preds = %4, %56, %53, %50, %47, %44, %41, %38, %28, %17
  %60 = phi i32 [ %19, %17 ], [ 0, %28 ], [ 1, %38 ], [ 2, %41 ], [ 3, %44 ], [ 4, %47 ], [ 5, %50 ], [ 6, %53 ], [ %58, %56 ], [ 0, %4 ]
  %61 = phi i32 [ %6, %17 ], [ %29, %28 ], [ %29, %38 ], [ %29, %41 ], [ %29, %44 ], [ %29, %47 ], [ %29, %50 ], [ %29, %53 ], [ %29, %56 ], [ %6, %4 ]
  %62 = add nsw i32 %61, 1
  %63 = icmp eq i8** %1, null
  br i1 %63, label %85, label %64

64:                                               ; preds = %59
  %65 = load i8*, i8** %1, align 8
  %66 = trunc i32 %60 to i8
  %67 = getelementptr inbounds i8, i8* %65, i64 1
  store i8 %66, i8* %65, align 1
  %68 = sext i32 %61 to i64
  %69 = icmp eq i32 %61, 0
  br i1 %69, label %70, label %72

70:                                               ; preds = %64
  %71 = getelementptr inbounds i8, i8* %67, i64 %68
  br label %83

72:                                               ; preds = %64
  %73 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %74 = load i8*, i8** %73, align 8
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %67, i8* align 1 %74, i64 %68, i1 false) #4
  %75 = getelementptr inbounds i8, i8* %67, i64 %68
  %76 = icmp sgt i32 %61, 0
  br i1 %76, label %77, label %83

77:                                               ; preds = %72
  %78 = shl i32 255, %60
  %79 = getelementptr inbounds i8, i8* %75, i64 -1
  %80 = load i8, i8* %79, align 1
  %81 = trunc i32 %78 to i8
  %82 = and i8 %80, %81
  store i8 %82, i8* %79, align 1
  br label %83

83:                                               ; preds = %70, %77, %72
  %84 = phi i8* [ %71, %70 ], [ %75, %77 ], [ %75, %72 ]
  store i8* %84, i8** %1, align 8
  br label %85

85:                                               ; preds = %59, %2, %83
  %86 = phi i32 [ %62, %83 ], [ 0, %2 ], [ %62, %59 ]
  ret i32 %86
}

; Function Attrs: nounwind ssp uwtable
define hidden %struct.asn1_string_st* @c2i_ASN1_BIT_STRING(%struct.asn1_string_st**, i8** nocapture, i64) local_unnamed_addr #0 {
  %4 = icmp slt i64 %2, 1
  br i1 %4, label %5, label %6

5:                                                ; preds = %3
  tail call void @ERR_put_error(i32 12, i32 0, i32 174, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 139) #4
  br label %69

6:                                                ; preds = %3
  %7 = icmp sgt i64 %2, 2147483647
  br i1 %7, label %8, label %9

8:                                                ; preds = %6
  tail call void @ERR_put_error(i32 12, i32 0, i32 173, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 144) #4
  br label %69

9:                                                ; preds = %6
  %10 = icmp eq %struct.asn1_string_st** %0, null
  br i1 %10, label %14, label %11

11:                                               ; preds = %9
  %12 = load %struct.asn1_string_st*, %struct.asn1_string_st** %0, align 8
  %13 = icmp eq %struct.asn1_string_st* %12, null
  br i1 %13, label %14, label %17

14:                                               ; preds = %11, %9
  %15 = tail call %struct.asn1_string_st* @ASN1_BIT_STRING_new() #4
  %16 = icmp eq %struct.asn1_string_st* %15, null
  br i1 %16, label %69, label %17

17:                                               ; preds = %11, %14
  %18 = phi %struct.asn1_string_st* [ %15, %14 ], [ %12, %11 ]
  %19 = load i8*, i8** %1, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 1
  %21 = load i8, i8* %19, align 1
  %22 = zext i8 %21 to i32
  %23 = icmp ugt i8 %21, 7
  br i1 %23, label %24, label %25

24:                                               ; preds = %17
  tail call void @ERR_put_error(i32 12, i32 0, i32 141, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 157) #4
  br label %64

25:                                               ; preds = %17
  %26 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %18, i64 0, i32 3
  %27 = load i64, i64* %26, align 8
  %28 = and i64 %27, -16
  %29 = or i32 %22, 8
  %30 = zext i32 %29 to i64
  %31 = or i64 %28, %30
  store i64 %31, i64* %26, align 8
  %32 = add nsw i64 %2, -1
  %33 = icmp sgt i64 %2, 1
  br i1 %33, label %34, label %51

34:                                               ; preds = %25
  %35 = shl i64 %32, 32
  %36 = ashr exact i64 %35, 32
  %37 = tail call i8* @OPENSSL_malloc(i64 %36) #4
  %38 = icmp eq i8* %37, null
  br i1 %38, label %39, label %40

39:                                               ; preds = %34
  tail call void @ERR_put_error(i32 12, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 171) #4
  br label %64

40:                                               ; preds = %34
  %41 = icmp eq i64 %35, 0
  br i1 %41, label %43, label %42

42:                                               ; preds = %40
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %37, i8* align 1 %20, i64 %36, i1 false) #4
  br label %43

43:                                               ; preds = %40, %42
  %44 = shl i32 255, %22
  %45 = add nsw i64 %2, -2
  %46 = getelementptr inbounds i8, i8* %37, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = trunc i32 %44 to i8
  %49 = and i8 %47, %48
  store i8 %49, i8* %46, align 1
  %50 = getelementptr inbounds i8, i8* %19, i64 %2
  br label %51

51:                                               ; preds = %25, %43
  %52 = phi i8* [ %50, %43 ], [ %20, %25 ]
  %53 = phi i8* [ %37, %43 ], [ null, %25 ]
  %54 = trunc i64 %32 to i32
  %55 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %18, i64 0, i32 0
  store i32 %54, i32* %55, align 8
  %56 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %18, i64 0, i32 2
  %57 = load i8*, i8** %56, align 8
  %58 = icmp eq i8* %57, null
  br i1 %58, label %60, label %59

59:                                               ; preds = %51
  tail call void @OPENSSL_free(i8* nonnull %57) #4
  br label %60

60:                                               ; preds = %51, %59
  store i8* %53, i8** %56, align 8
  %61 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %18, i64 0, i32 1
  store i32 3, i32* %61, align 4
  br i1 %10, label %63, label %62

62:                                               ; preds = %60
  store %struct.asn1_string_st* %18, %struct.asn1_string_st** %0, align 8
  br label %63

63:                                               ; preds = %60, %62
  store i8* %52, i8** %1, align 8
  br label %69

64:                                               ; preds = %24, %39
  br i1 %10, label %68, label %65

65:                                               ; preds = %64
  %66 = load %struct.asn1_string_st*, %struct.asn1_string_st** %0, align 8
  %67 = icmp eq %struct.asn1_string_st* %66, %18
  br i1 %67, label %69, label %68

68:                                               ; preds = %65, %64
  tail call void @ASN1_BIT_STRING_free(%struct.asn1_string_st* nonnull %18) #4
  br label %69

69:                                               ; preds = %8, %5, %68, %65, %14, %63
  %70 = phi %struct.asn1_string_st* [ %18, %63 ], [ null, %14 ], [ null, %65 ], [ null, %68 ], [ null, %5 ], [ null, %8 ]
  ret %struct.asn1_string_st* %70
}

declare void @ERR_put_error(i32, i32, i32, i8*, i32) local_unnamed_addr #1

declare %struct.asn1_string_st* @ASN1_BIT_STRING_new() local_unnamed_addr #1

declare i8* @OPENSSL_malloc(i64) local_unnamed_addr #1

declare void @OPENSSL_free(i8*) local_unnamed_addr #1

declare void @ASN1_BIT_STRING_free(%struct.asn1_string_st*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @ASN1_BIT_STRING_set_bit(%struct.asn1_string_st*, i32, i32) local_unnamed_addr #0 {
  %4 = sdiv i32 %1, 8
  %5 = and i32 %1, 7
  %6 = xor i32 %5, 7
  %7 = shl i32 1, %6
  %8 = xor i32 %7, 255
  %9 = icmp ne i32 %2, 0
  %10 = select i1 %9, i32 %7, i32 0
  %11 = icmp eq %struct.asn1_string_st* %0, null
  br i1 %11, label %71, label %12

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = and i64 %14, -16
  store i64 %15, i64* %13, align 8
  %16 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  %17 = load i32, i32* %16, align 8
  %18 = add nsw i32 %4, 1
  %19 = icmp sgt i32 %17, %4
  br i1 %19, label %20, label %24

20:                                               ; preds = %12
  %21 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %22 = load i8*, i8** %21, align 8
  %23 = icmp eq i8* %22, null
  br i1 %23, label %24, label %47

24:                                               ; preds = %12, %20
  br i1 %9, label %25, label %71

25:                                               ; preds = %24
  %26 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %27 = load i8*, i8** %26, align 8
  %28 = icmp eq i8* %27, null
  %29 = sext i32 %18 to i64
  br i1 %28, label %30, label %32

30:                                               ; preds = %25
  %31 = tail call i8* @OPENSSL_malloc(i64 %29) #4
  br label %34

32:                                               ; preds = %25
  %33 = tail call i8* @OPENSSL_realloc(i8* nonnull %27, i64 %29) #4
  br label %34

34:                                               ; preds = %32, %30
  %35 = phi i8* [ %31, %30 ], [ %33, %32 ]
  %36 = icmp eq i8* %35, null
  br i1 %36, label %37, label %38

37:                                               ; preds = %34
  tail call void @ERR_put_error(i32 12, i32 0, i32 65, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str, i64 0, i64 0), i32 222) #4
  br label %71

38:                                               ; preds = %34
  %39 = load i32, i32* %16, align 8
  %40 = sub nsw i32 %18, %39
  %41 = icmp sgt i32 %40, 0
  br i1 %41, label %42, label %46

42:                                               ; preds = %38
  %43 = sext i32 %40 to i64
  %44 = sext i32 %39 to i64
  %45 = getelementptr inbounds i8, i8* %35, i64 %44
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %45, i8 0, i64 %43, i1 false) #4
  br label %46

46:                                               ; preds = %42, %38
  store i8* %35, i8** %26, align 8
  store i32 %18, i32* %16, align 8
  br label %47

47:                                               ; preds = %46, %20
  %48 = phi i8* [ %35, %46 ], [ %22, %20 ]
  %49 = sext i32 %4 to i64
  %50 = getelementptr inbounds i8, i8* %48, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i32
  %53 = and i32 %8, %52
  %54 = or i32 %53, %10
  %55 = trunc i32 %54 to i8
  store i8 %55, i8* %50, align 1
  %56 = load i32, i32* %16, align 8
  %57 = icmp sgt i32 %56, 0
  br i1 %57, label %58, label %71

58:                                               ; preds = %47
  %59 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %60 = sext i32 %56 to i64
  %61 = load i8*, i8** %59, align 8
  br label %62

62:                                               ; preds = %58, %68
  %63 = phi i64 [ %60, %58 ], [ %64, %68 ]
  %64 = add nsw i64 %63, -1
  %65 = getelementptr inbounds i8, i8* %61, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = icmp eq i8 %66, 0
  br i1 %67, label %68, label %71

68:                                               ; preds = %62
  %69 = trunc i64 %64 to i32
  store i32 %69, i32* %16, align 8
  %70 = icmp sgt i64 %64, 0
  br i1 %70, label %62, label %71

71:                                               ; preds = %68, %62, %47, %24, %3, %37
  %72 = phi i32 [ 0, %37 ], [ 0, %3 ], [ 1, %24 ], [ 1, %47 ], [ 1, %62 ], [ 1, %68 ]
  ret i32 %72
}

declare i8* @OPENSSL_realloc(i8*, i64) local_unnamed_addr #1

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @ASN1_BIT_STRING_get_bit(%struct.asn1_string_st* readonly, i32) local_unnamed_addr #2 {
  %3 = sdiv i32 %1, 8
  %4 = and i32 %1, 7
  %5 = xor i32 %4, 7
  %6 = shl i32 1, %5
  %7 = icmp eq %struct.asn1_string_st* %0, null
  br i1 %7, label %24, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = icmp sgt i32 %10, %3
  br i1 %11, label %12, label %24

12:                                               ; preds = %8
  %13 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %14 = load i8*, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %24, label %16

16:                                               ; preds = %12
  %17 = sext i32 %3 to i64
  %18 = getelementptr inbounds i8, i8* %14, i64 %17
  %19 = load i8, i8* %18, align 1
  %20 = zext i8 %19 to i32
  %21 = and i32 %6, %20
  %22 = icmp ne i32 %21, 0
  %23 = zext i1 %22 to i32
  br label %24

24:                                               ; preds = %2, %12, %8, %16
  %25 = phi i32 [ %23, %16 ], [ 0, %8 ], [ 0, %12 ], [ 0, %2 ]
  ret i32 %25
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @ASN1_BIT_STRING_check(%struct.asn1_string_st* readonly, i8* nocapture readonly, i32) local_unnamed_addr #2 {
  %4 = icmp eq %struct.asn1_string_st* %0, null
  br i1 %4, label %34, label %5

5:                                                ; preds = %3
  %6 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 2
  %7 = load i8*, i8** %6, align 8
  %8 = icmp eq i8* %7, null
  br i1 %8, label %34, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.asn1_string_st, %struct.asn1_string_st* %0, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %34

13:                                               ; preds = %9
  %14 = sext i32 %11 to i64
  %15 = sext i32 %2 to i64
  br label %16

16:                                               ; preds = %13, %23
  %17 = phi i64 [ 0, %13 ], [ %29, %23 ]
  %18 = icmp slt i64 %17, %15
  br i1 %18, label %19, label %23

19:                                               ; preds = %16
  %20 = getelementptr inbounds i8, i8* %1, i64 %17
  %21 = load i8, i8* %20, align 1
  %22 = xor i8 %21, -1
  br label %23

23:                                               ; preds = %16, %19
  %24 = phi i8 [ %22, %19 ], [ -1, %16 ]
  %25 = getelementptr inbounds i8, i8* %7, i64 %17
  %26 = load i8, i8* %25, align 1
  %27 = and i8 %26, %24
  %28 = icmp eq i8 %27, 0
  %29 = add nuw nsw i64 %17, 1
  %30 = icmp slt i64 %29, %14
  %31 = and i1 %28, %30
  br i1 %31, label %16, label %32

32:                                               ; preds = %23
  %33 = zext i1 %28 to i32
  br label %34

34:                                               ; preds = %32, %9, %3, %5
  %35 = phi i32 [ 1, %5 ], [ 1, %3 ], [ 1, %9 ], [ %33, %32 ]
  ret i32 %35
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
