; ModuleID = '../../third_party/swiftshader/src/Vulkan/VkDescriptorSetLayout.cpp'
source_filename = "../../third_party/swiftshader/src/Vulkan/VkDescriptorSetLayout.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.VkOffset3D = type { i32, i32, i32 }
%"class.vk::DescriptorSetLayout" = type { i32, i32, %"struct.vk::DescriptorSetLayout::Binding"* }
%"struct.vk::DescriptorSetLayout::Binding" = type { i32, i32, %"class.vk::Sampler"**, i32 }
%"class.vk::Sampler" = type { %"struct.vk::SamplerState.base", i32 }
%"struct.vk::SamplerState.base" = type <{ i32, i32, i32, i32, i32, i32, float, i32, float, i32, i32, float, float, i32, i32, i32, i32, i8, i8 }>
%struct.VkDescriptorSetLayoutCreateInfo = type { i32, i8*, i32, i32, %struct.VkDescriptorSetLayoutBinding* }
%struct.VkDescriptorSetLayoutBinding = type { i32, i32, i32, i32, %class.VkNonDispatchableHandle.14* }
%class.VkNonDispatchableHandle.14 = type { i64 }
%class.VkNonDispatchableHandle = type { i64 }
%class.VkNonDispatchableHandle.0 = type { i64 }
%class.VkNonDispatchableHandle.1 = type { i64 }
%class.VkNonDispatchableHandle.2 = type { i64 }
%class.VkNonDispatchableHandle.3 = type { i64 }
%class.VkNonDispatchableHandle.4 = type { i64 }
%class.VkNonDispatchableHandle.5 = type { i64 }
%class.VkNonDispatchableHandle.6 = type { i64 }
%class.VkNonDispatchableHandle.7 = type { i64 }
%class.VkNonDispatchableHandle.8 = type { i64 }
%class.VkNonDispatchableHandle.9 = type { i64 }
%class.VkNonDispatchableHandle.10 = type { i64 }
%class.VkNonDispatchableHandle.11 = type { i64 }
%class.VkNonDispatchableHandle.12 = type { i64 }
%class.VkNonDispatchableHandle.13 = type { i64 }
%class.VkNonDispatchableHandle.15 = type { i64 }
%class.VkNonDispatchableHandle.16 = type { i64 }
%class.VkNonDispatchableHandle.17 = type { i64 }
%class.VkNonDispatchableHandle.18 = type { i64 }
%class.VkNonDispatchableHandle.19 = type { i64 }
%class.VkNonDispatchableHandle.20 = type { i64 }
%class.VkNonDispatchableHandle.21 = type { i64 }
%class.VkNonDispatchableHandle.22 = type { i64 }
%class.VkNonDispatchableHandle.23 = type { i64 }
%class.VkNonDispatchableHandle.24 = type { i64 }
%class.VkNonDispatchableHandle.25 = type { i64 }
%class.VkNonDispatchableHandle.26 = type { i64 }
%class.VkNonDispatchableHandle.27 = type { i64 }
%class.VkNonDispatchableHandle.28 = type { i64 }
%class.VkNonDispatchableHandle.29 = type { i64 }
%class.VkNonDispatchableHandle.30 = type { i64 }
%class.VkNonDispatchableHandle.31 = type { i64 }
%class.VkNonDispatchableHandle.32 = type { i64 }
%class.VkNonDispatchableHandle.33 = type { i64 }
%class.VkNonDispatchableHandle.34 = type { i64 }
%class.VkNonDispatchableHandle.35 = type { i64 }
%struct.VkAllocationCallbacks = type { i8*, i8* (i8*, i64, i64, i32)*, i8* (i8*, i8*, i64, i64, i32)*, void (i8*, i8*)*, void (i8*, i64, i32, i32)*, void (i8*, i64, i32, i32)* }
%"class.vk::DescriptorSet" = type <{ %"struct.vk::DescriptorSetHeader", [1 x i8], [15 x i8] }>
%"struct.vk::DescriptorSetHeader" = type { %"class.vk::DescriptorSetLayout"*, %"class.marl::mutex" }
%"class.marl::mutex" = type { %"class.std::__1::mutex" }
%"class.std::__1::mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.vk::Device" = type opaque
%struct.VkDescriptorUpdateTemplateEntry = type { i32, i32, i32, i32, i64, i64 }
%"class.vk::Format" = type { i32 }
%"struct.vk::SampledImageDescriptor" = type { i32, i32, [8 x i8], %"struct.sw::Texture", i32, i32, i32, i32, i32, %"class.vk::Device"*, %"class.vk::ImageView"*, [8 x i8] }
%"struct.sw::Texture" = type { [14 x %"struct.sw::Mipmap"], %"struct.sw::vec.43", %"struct.sw::vec.43", %"struct.sw::vec.43", %"struct.sw::vec.43" }
%"struct.sw::Mipmap" = type { i8*, %"struct.sw::vec", %"struct.sw::vec", %"struct.sw::vec", %"struct.sw::vec.40", %"struct.sw::vec.40", %"struct.sw::vec.40", %"struct.sw::vec", [8 x i8], %"struct.sw::vec.40", %"struct.sw::vec.40", %"struct.sw::vec.40", %"struct.sw::vec.40" }
%"struct.sw::vec" = type { %union.anon }
%union.anon = type { [4 x i16] }
%"struct.sw::vec.40" = type { %union.anon.41 }
%union.anon.41 = type { [4 x i32] }
%"struct.sw::vec.43" = type { %union.anon.44 }
%union.anon.44 = type { [4 x float] }
%"class.vk::ImageView" = type <{ %"class.vk::Image"*, i32, %"class.vk::Format", %struct.VkComponentMapping, %struct.VkImageSubresourceRange, [4 x i8], %"class.vk::SamplerYcbcrConversion"*, %"union.vk::Identifier", [4 x i8] }>
%"class.vk::Image" = type { %"class.vk::DeviceMemory"*, %"class.vk::Device"*, i64, i32, i32, %"class.vk::Format", %struct.VkExtent3D, i32, i32, i32, i32, i32, %"class.vk::Image"*, i32, %"class.marl::mutex", %"class.std::__1::unordered_set" }
%"class.vk::DeviceMemory" = type opaque
%struct.VkExtent3D = type { i32, i32, i32 }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr", %"class.std::__1::__compressed_pair.54", %"class.std::__1::__compressed_pair.59", %"class.std::__1::__compressed_pair.61", [4 x i8] }>
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem", %"struct.std::__1::__compressed_pair_elem.50" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.51" }
%"class.std::__1::__compressed_pair.51" = type { %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.52" = type { i64 }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.55" }
%"struct.std::__1::__compressed_pair_elem.55" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.59" = type <{ %"struct.std::__1::__compressed_pair_elem.52", %"struct.std::__1::__compressed_pair_elem.60", [4 x i8] }>
%"struct.std::__1::__compressed_pair_elem.60" = type { %"class.vk::Image::Subresource" }
%"class.vk::Image::Subresource" = type { %struct.VkImageSubresource }
%struct.VkImageSubresource = type { i32, i32, i32 }
%"class.std::__1::__compressed_pair.61" = type { %"struct.std::__1::__compressed_pair_elem.62" }
%"struct.std::__1::__compressed_pair_elem.62" = type { float }
%struct.VkComponentMapping = type { i32, i32, i32, i32 }
%struct.VkImageSubresourceRange = type { i32, i32, i32, i32, i32 }
%"class.vk::SamplerYcbcrConversion" = type { i32, i32, i32, %struct.VkComponentMapping, i32, i32, i32, i32 }
%"union.vk::Identifier" = type { %struct.anon.66 }
%struct.anon.66 = type { i24 }
%"class.vk::BufferView" = type { %"union.vk::Identifier", %"class.vk::Buffer"*, i32, i64, i64 }
%"class.vk::Buffer" = type <{ i8*, i32, [4 x i8], i64, i32, i32, i32, [4 x i8], i32*, i32, [4 x i8] }>
%"struct.vk::StorageImageDescriptor" = type { i8*, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i32, i32, i32, %"class.vk::ImageView"*, [8 x i8] }
%"struct.vk::BufferDescriptor" = type { i8*, i32, i32 }
%struct.VkWriteDescriptorSet = type { i32, i8*, %class.VkNonDispatchableHandle.15, i32, i32, i32, i32, %struct.VkDescriptorImageInfo*, %struct.VkDescriptorBufferInfo*, %class.VkNonDispatchableHandle.6* }
%struct.VkDescriptorImageInfo = type { %class.VkNonDispatchableHandle.14, %class.VkNonDispatchableHandle.7, i32 }
%struct.VkDescriptorBufferInfo = type { %class.VkNonDispatchableHandle, i64, i64 }
%struct.VkCopyDescriptorSet = type { i32, i8*, %class.VkNonDispatchableHandle.15, i32, i32, %class.VkNonDispatchableHandle.15, i32, i32, i32 }

$_ZNK23VkNonDispatchableHandleIP10VkBuffer_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP10VkBuffer_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP9VkImage_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP9VkImage_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP13VkSemaphore_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP13VkSemaphore_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP9VkFence_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP9VkFence_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP16VkDeviceMemory_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP16VkDeviceMemory_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP9VkEvent_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP9VkEvent_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP13VkQueryPool_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP13VkQueryPool_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP14VkBufferView_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP14VkBufferView_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP13VkImageView_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP13VkImageView_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP16VkShaderModule_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP16VkShaderModule_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP17VkPipelineCache_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP17VkPipelineCache_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP18VkPipelineLayout_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP18VkPipelineLayout_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP12VkPipeline_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP12VkPipeline_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP14VkRenderPass_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP14VkRenderPass_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP23VkDescriptorSetLayout_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP23VkDescriptorSetLayout_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP11VkSampler_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP11VkSampler_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP17VkDescriptorSet_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP17VkDescriptorSet_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP18VkDescriptorPool_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP18VkDescriptorPool_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP15VkFramebuffer_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP15VkFramebuffer_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP15VkCommandPool_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP15VkCommandPool_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP26VkSamplerYcbcrConversion_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP26VkSamplerYcbcrConversion_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP28VkDescriptorUpdateTemplate_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP28VkDescriptorUpdateTemplate_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP14VkSurfaceKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP14VkSurfaceKHR_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP16VkSwapchainKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP16VkSwapchainKHR_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP14VkDisplayKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP14VkDisplayKHR_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP18VkDisplayModeKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP18VkDisplayModeKHR_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP24VkDeferredOperationKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP24VkDeferredOperationKHR_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP26VkDebugReportCallbackEXT_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP26VkDebugReportCallbackEXT_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP15VkCuModuleNVX_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP15VkCuModuleNVX_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP17VkCuFunctionNVX_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP17VkCuFunctionNVX_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP26VkDebugUtilsMessengerEXT_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP26VkDebugUtilsMessengerEXT_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP22VkValidationCacheEXT_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP22VkValidationCacheEXT_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP27VkAccelerationStructureNV_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP27VkAccelerationStructureNV_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP33VkPerformanceConfigurationINTEL_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP33VkPerformanceConfigurationINTEL_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP28VkIndirectCommandsLayoutNV_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP28VkIndirectCommandsLayoutNV_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP22VkPrivateDataSlotEXT_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP22VkPrivateDataSlotEXT_TEaSEm = comdat any

$_ZNK23VkNonDispatchableHandleIP28VkAccelerationStructureKHR_TEcvPvEv = comdat any

$_ZN23VkNonDispatchableHandleIP28VkAccelerationStructureKHR_TEaSEm = comdat any

$_ZNK2vk9ImageView14getSampleCountEv = comdat any

@.str = private unnamed_addr constant [61 x i8] c"%s:%d WARNING: UNSUPPORTED: Unsupported Descriptor Type: %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [67 x i8] c"../../third_party/swiftshader/src/Vulkan/VkDescriptorSetLayout.cpp\00", align 1
@__const._ZN2vk19DescriptorSetLayout18WriteDescriptorSetEPNS_6DeviceEPNS_13DescriptorSetERK31VkDescriptorUpdateTemplateEntryPKc.offset = private unnamed_addr constant %struct.VkOffset3D { i32 -1, i32 -1, i32 0 }, align 4
@.ref.tmp = private constant %struct.VkOffset3D zeroinitializer, align 4
@.ref.tmp.2 = private constant %struct.VkOffset3D zeroinitializer, align 4
@.str.3 = private unnamed_addr constant [48 x i8] c"%s:%d WARNING: UNSUPPORTED: descriptor type %u\0A\00", align 1
@.str.4 = private unnamed_addr constant [51 x i8] c"%s:%d WARNING: UNSUPPORTED: Sample count flags %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [57 x i8] c"../../third_party/swiftshader/src/Vulkan/VkImageView.hpp\00", align 1
@switch.table._ZN2vk19DescriptorSetLayout17GetDescriptorSizeE16VkDescriptorType = private unnamed_addr constant [11 x i32] [i32 2368, i32 2368, i32 2368, i32 80, i32 2368, i32 80, i32 16, i32 16, i32 16, i32 16, i32 80], align 4
@switch.table._ZNK2vk19DescriptorSetLayout20getDescriptorPointerEPNS_13DescriptorSetEjjjPm = private unnamed_addr constant [11 x i64] [i64 2368, i64 2368, i64 2368, i64 80, i64 2368, i64 80, i64 16, i64 16, i64 16, i64 16, i64 80], align 8

@_ZN2vk19DescriptorSetLayoutC1EPK31VkDescriptorSetLayoutCreateInfoPv = hidden unnamed_addr alias void (%"class.vk::DescriptorSetLayout"*, %struct.VkDescriptorSetLayoutCreateInfo*, i8*), void (%"class.vk::DescriptorSetLayout"*, %struct.VkDescriptorSetLayoutCreateInfo*, i8*)* @_ZN2vk19DescriptorSetLayoutC2EPK31VkDescriptorSetLayoutCreateInfoPv

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP10VkBuffer_TEcvPvEv(%class.VkNonDispatchableHandle*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP10VkBuffer_TEaSEm(%class.VkNonDispatchableHandle*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle, %class.VkNonDispatchableHandle* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP9VkImage_TEcvPvEv(%class.VkNonDispatchableHandle.0*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.0* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP9VkImage_TEaSEm(%class.VkNonDispatchableHandle.0*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.0, %class.VkNonDispatchableHandle.0* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP13VkSemaphore_TEcvPvEv(%class.VkNonDispatchableHandle.1*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.1* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP13VkSemaphore_TEaSEm(%class.VkNonDispatchableHandle.1*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.1, %class.VkNonDispatchableHandle.1* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP9VkFence_TEcvPvEv(%class.VkNonDispatchableHandle.2*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.2* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP9VkFence_TEaSEm(%class.VkNonDispatchableHandle.2*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.2, %class.VkNonDispatchableHandle.2* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP16VkDeviceMemory_TEcvPvEv(%class.VkNonDispatchableHandle.3*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.3* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP16VkDeviceMemory_TEaSEm(%class.VkNonDispatchableHandle.3*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.3, %class.VkNonDispatchableHandle.3* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP9VkEvent_TEcvPvEv(%class.VkNonDispatchableHandle.4*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.4* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP9VkEvent_TEaSEm(%class.VkNonDispatchableHandle.4*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.4, %class.VkNonDispatchableHandle.4* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP13VkQueryPool_TEcvPvEv(%class.VkNonDispatchableHandle.5*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.5* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP13VkQueryPool_TEaSEm(%class.VkNonDispatchableHandle.5*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.5, %class.VkNonDispatchableHandle.5* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP14VkBufferView_TEcvPvEv(%class.VkNonDispatchableHandle.6*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.6* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP14VkBufferView_TEaSEm(%class.VkNonDispatchableHandle.6*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.6, %class.VkNonDispatchableHandle.6* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP13VkImageView_TEcvPvEv(%class.VkNonDispatchableHandle.7*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.7* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP13VkImageView_TEaSEm(%class.VkNonDispatchableHandle.7*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.7, %class.VkNonDispatchableHandle.7* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP16VkShaderModule_TEcvPvEv(%class.VkNonDispatchableHandle.8*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.8* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP16VkShaderModule_TEaSEm(%class.VkNonDispatchableHandle.8*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.8, %class.VkNonDispatchableHandle.8* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP17VkPipelineCache_TEcvPvEv(%class.VkNonDispatchableHandle.9*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.9* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP17VkPipelineCache_TEaSEm(%class.VkNonDispatchableHandle.9*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.9, %class.VkNonDispatchableHandle.9* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP18VkPipelineLayout_TEcvPvEv(%class.VkNonDispatchableHandle.10*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.10* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP18VkPipelineLayout_TEaSEm(%class.VkNonDispatchableHandle.10*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.10, %class.VkNonDispatchableHandle.10* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP12VkPipeline_TEcvPvEv(%class.VkNonDispatchableHandle.11*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.11* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP12VkPipeline_TEaSEm(%class.VkNonDispatchableHandle.11*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.11, %class.VkNonDispatchableHandle.11* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP14VkRenderPass_TEcvPvEv(%class.VkNonDispatchableHandle.12*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.12* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP14VkRenderPass_TEaSEm(%class.VkNonDispatchableHandle.12*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.12, %class.VkNonDispatchableHandle.12* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP23VkDescriptorSetLayout_TEcvPvEv(%class.VkNonDispatchableHandle.13*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.13* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP23VkDescriptorSetLayout_TEaSEm(%class.VkNonDispatchableHandle.13*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.13, %class.VkNonDispatchableHandle.13* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP11VkSampler_TEcvPvEv(%class.VkNonDispatchableHandle.14*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.14* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP11VkSampler_TEaSEm(%class.VkNonDispatchableHandle.14*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.14, %class.VkNonDispatchableHandle.14* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP17VkDescriptorSet_TEcvPvEv(%class.VkNonDispatchableHandle.15*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.15* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP17VkDescriptorSet_TEaSEm(%class.VkNonDispatchableHandle.15*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.15, %class.VkNonDispatchableHandle.15* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP18VkDescriptorPool_TEcvPvEv(%class.VkNonDispatchableHandle.16*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.16* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP18VkDescriptorPool_TEaSEm(%class.VkNonDispatchableHandle.16*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.16, %class.VkNonDispatchableHandle.16* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP15VkFramebuffer_TEcvPvEv(%class.VkNonDispatchableHandle.17*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.17* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP15VkFramebuffer_TEaSEm(%class.VkNonDispatchableHandle.17*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.17, %class.VkNonDispatchableHandle.17* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP15VkCommandPool_TEcvPvEv(%class.VkNonDispatchableHandle.18*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.18* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP15VkCommandPool_TEaSEm(%class.VkNonDispatchableHandle.18*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.18, %class.VkNonDispatchableHandle.18* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP26VkSamplerYcbcrConversion_TEcvPvEv(%class.VkNonDispatchableHandle.19*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.19* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP26VkSamplerYcbcrConversion_TEaSEm(%class.VkNonDispatchableHandle.19*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.19, %class.VkNonDispatchableHandle.19* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP28VkDescriptorUpdateTemplate_TEcvPvEv(%class.VkNonDispatchableHandle.20*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.20* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP28VkDescriptorUpdateTemplate_TEaSEm(%class.VkNonDispatchableHandle.20*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.20, %class.VkNonDispatchableHandle.20* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP14VkSurfaceKHR_TEcvPvEv(%class.VkNonDispatchableHandle.21*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.21* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP14VkSurfaceKHR_TEaSEm(%class.VkNonDispatchableHandle.21*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.21, %class.VkNonDispatchableHandle.21* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP16VkSwapchainKHR_TEcvPvEv(%class.VkNonDispatchableHandle.22*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.22* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP16VkSwapchainKHR_TEaSEm(%class.VkNonDispatchableHandle.22*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.22, %class.VkNonDispatchableHandle.22* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP14VkDisplayKHR_TEcvPvEv(%class.VkNonDispatchableHandle.23*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.23* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP14VkDisplayKHR_TEaSEm(%class.VkNonDispatchableHandle.23*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.23, %class.VkNonDispatchableHandle.23* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP18VkDisplayModeKHR_TEcvPvEv(%class.VkNonDispatchableHandle.24*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.24* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP18VkDisplayModeKHR_TEaSEm(%class.VkNonDispatchableHandle.24*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.24, %class.VkNonDispatchableHandle.24* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP24VkDeferredOperationKHR_TEcvPvEv(%class.VkNonDispatchableHandle.25*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.25* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP24VkDeferredOperationKHR_TEaSEm(%class.VkNonDispatchableHandle.25*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.25, %class.VkNonDispatchableHandle.25* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP26VkDebugReportCallbackEXT_TEcvPvEv(%class.VkNonDispatchableHandle.26*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.26* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP26VkDebugReportCallbackEXT_TEaSEm(%class.VkNonDispatchableHandle.26*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.26, %class.VkNonDispatchableHandle.26* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP15VkCuModuleNVX_TEcvPvEv(%class.VkNonDispatchableHandle.27*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.27* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP15VkCuModuleNVX_TEaSEm(%class.VkNonDispatchableHandle.27*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.27, %class.VkNonDispatchableHandle.27* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP17VkCuFunctionNVX_TEcvPvEv(%class.VkNonDispatchableHandle.28*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.28* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP17VkCuFunctionNVX_TEaSEm(%class.VkNonDispatchableHandle.28*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.28, %class.VkNonDispatchableHandle.28* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP26VkDebugUtilsMessengerEXT_TEcvPvEv(%class.VkNonDispatchableHandle.29*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.29* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP26VkDebugUtilsMessengerEXT_TEaSEm(%class.VkNonDispatchableHandle.29*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.29, %class.VkNonDispatchableHandle.29* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP22VkValidationCacheEXT_TEcvPvEv(%class.VkNonDispatchableHandle.30*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.30* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP22VkValidationCacheEXT_TEaSEm(%class.VkNonDispatchableHandle.30*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.30, %class.VkNonDispatchableHandle.30* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP27VkAccelerationStructureNV_TEcvPvEv(%class.VkNonDispatchableHandle.31*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.31* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP27VkAccelerationStructureNV_TEaSEm(%class.VkNonDispatchableHandle.31*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.31, %class.VkNonDispatchableHandle.31* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP33VkPerformanceConfigurationINTEL_TEcvPvEv(%class.VkNonDispatchableHandle.32*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.32* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP33VkPerformanceConfigurationINTEL_TEaSEm(%class.VkNonDispatchableHandle.32*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.32, %class.VkNonDispatchableHandle.32* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP28VkIndirectCommandsLayoutNV_TEcvPvEv(%class.VkNonDispatchableHandle.33*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.33* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP28VkIndirectCommandsLayoutNV_TEaSEm(%class.VkNonDispatchableHandle.33*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.33, %class.VkNonDispatchableHandle.33* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP22VkPrivateDataSlotEXT_TEcvPvEv(%class.VkNonDispatchableHandle.34*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.34* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP22VkPrivateDataSlotEXT_TEaSEm(%class.VkNonDispatchableHandle.34*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.34, %class.VkNonDispatchableHandle.34* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden i8* @_ZNK23VkNonDispatchableHandleIP28VkAccelerationStructureKHR_TEcvPvEv(%class.VkNonDispatchableHandle.35*) local_unnamed_addr #0 comdat align 2 {
  %2 = bitcast %class.VkNonDispatchableHandle.35* %0 to i8**
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind optsize ssp uwtable
define weak_odr hidden void @_ZN23VkNonDispatchableHandleIP28VkAccelerationStructureKHR_TEaSEm(%class.VkNonDispatchableHandle.35*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %class.VkNonDispatchableHandle.35, %class.VkNonDispatchableHandle.35* %0, i64 0, i32 0
  store i64 %1, i64* %3, align 8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2vk19DescriptorSetLayoutC2EPK31VkDescriptorSetLayoutCreateInfoPv(%"class.vk::DescriptorSetLayout"* nocapture, %struct.VkDescriptorSetLayoutCreateInfo* nocapture readonly, i8*) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.vk::DescriptorSetLayout", %"class.vk::DescriptorSetLayout"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %struct.VkDescriptorSetLayoutCreateInfo, %struct.VkDescriptorSetLayoutCreateInfo* %1, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  store i32 %6, i32* %4, align 8
  %7 = getelementptr inbounds %"class.vk::DescriptorSetLayout", %"class.vk::DescriptorSetLayout"* %0, i64 0, i32 1
  %8 = getelementptr inbounds %"class.vk::DescriptorSetLayout", %"class.vk::DescriptorSetLayout"* %0, i64 0, i32 2
  %9 = bitcast %"struct.vk::DescriptorSetLayout::Binding"** %8 to i8**
  store i8* %2, i8** %9, align 8
  store i32 0, i32* %7, align 4
  %10 = getelementptr inbounds %struct.VkDescriptorSetLayoutCreateInfo, %struct.VkDescriptorSetLayoutCreateInfo* %1, i64 0, i32 3
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %119, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %struct.VkDescriptorSetLayoutCreateInfo, %struct.VkDescriptorSetLayoutCreateInfo* %1, i64 0, i32 4
  br label %28

15:                                               ; preds = %28
  %16 = zext i32 %36 to i64
  %17 = mul nuw nsw i64 %16, 24
  %18 = getelementptr inbounds i8, i8* %2, i64 %17
  %19 = icmp eq i32 %36, 0
  br i1 %19, label %44, label %20

20:                                               ; preds = %15
  %21 = bitcast i8* %2 to i32*
  store i32 0, i32* %21, align 8
  %22 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %8, align 8
  %23 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %22, i64 0, i32 1
  store i32 0, i32* %23, align 4
  %24 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %8, align 8
  %25 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %24, i64 0, i32 2
  store %"class.vk::Sampler"** null, %"class.vk::Sampler"*** %25, align 8
  %26 = load i32, i32* %7, align 4
  %27 = icmp ugt i32 %26, 1
  br i1 %27, label %50, label %41

28:                                               ; preds = %13, %28
  %29 = phi i32 [ 0, %13 ], [ %36, %28 ]
  %30 = phi i64 [ 0, %13 ], [ %37, %28 ]
  %31 = load %struct.VkDescriptorSetLayoutBinding*, %struct.VkDescriptorSetLayoutBinding** %14, align 8
  %32 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %31, i64 %30, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = add i32 %33, 1
  %35 = icmp ult i32 %29, %34
  %36 = select i1 %35, i32 %34, i32 %29
  store i32 %36, i32* %7, align 4
  %37 = add nuw nsw i64 %30, 1
  %38 = load i32, i32* %10, align 4
  %39 = zext i32 %38 to i64
  %40 = icmp ult i64 %37, %39
  br i1 %40, label %28, label %15

41:                                               ; preds = %50, %20
  %42 = phi i32 [ %26, %20 ], [ %59, %50 ]
  %43 = load i32, i32* %10, align 4
  br label %44

44:                                               ; preds = %41, %15
  %45 = phi i32 [ %42, %41 ], [ 0, %15 ]
  %46 = phi i32 [ %43, %41 ], [ %38, %15 ]
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %64, label %48

48:                                               ; preds = %44
  %49 = getelementptr inbounds %struct.VkDescriptorSetLayoutCreateInfo, %struct.VkDescriptorSetLayoutCreateInfo* %1, i64 0, i32 4
  br label %67

50:                                               ; preds = %20, %50
  %51 = phi i64 [ %58, %50 ], [ 1, %20 ]
  %52 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %8, align 8
  %53 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %52, i64 %51, i32 0
  store i32 0, i32* %53, align 8
  %54 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %8, align 8
  %55 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %54, i64 %51, i32 1
  store i32 0, i32* %55, align 4
  %56 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %8, align 8
  %57 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %56, i64 %51, i32 2
  store %"class.vk::Sampler"** null, %"class.vk::Sampler"*** %57, align 8
  %58 = add nuw nsw i64 %51, 1
  %59 = load i32, i32* %7, align 4
  %60 = zext i32 %59 to i64
  %61 = icmp ult i64 %58, %60
  br i1 %61, label %50, label %41

62:                                               ; preds = %113
  %63 = load i32, i32* %7, align 4
  br label %64

64:                                               ; preds = %62, %44
  %65 = phi i32 [ %63, %62 ], [ %45, %44 ]
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %119, label %120

67:                                               ; preds = %48, %113
  %68 = phi i64 [ 0, %48 ], [ %115, %113 ]
  %69 = phi i8* [ %18, %48 ], [ %114, %113 ]
  %70 = load %struct.VkDescriptorSetLayoutBinding*, %struct.VkDescriptorSetLayoutBinding** %49, align 8
  %71 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %8, align 8
  %72 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %70, i64 %68, i32 0
  %73 = load i32, i32* %72, align 8
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %70, i64 %68, i32 1
  %76 = load i32, i32* %75, align 4
  %77 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %71, i64 %74, i32 0
  store i32 %76, i32* %77, align 8
  %78 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %70, i64 %68, i32 2
  %79 = load i32, i32* %78, align 8
  %80 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %71, i64 %74, i32 1
  store i32 %79, i32* %80, align 4
  %81 = load i32, i32* %75, align 4
  %82 = icmp ult i32 %81, 2
  %83 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %70, i64 %68, i32 4
  %84 = load %class.VkNonDispatchableHandle.14*, %class.VkNonDispatchableHandle.14** %83, align 8
  %85 = icmp ne %class.VkNonDispatchableHandle.14* %84, null
  %86 = and i1 %82, %85
  br i1 %86, label %87, label %113

87:                                               ; preds = %67
  %88 = zext i32 %79 to i64
  %89 = shl nuw nsw i64 %88, 3
  %90 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %71, i64 %74, i32 2
  %91 = bitcast %"class.vk::Sampler"*** %90 to i8**
  store i8* %69, i8** %91, align 8
  %92 = getelementptr inbounds i8, i8* %69, i64 %89
  %93 = icmp eq i32 %79, 0
  br i1 %93, label %113, label %94

94:                                               ; preds = %87
  %95 = load %class.VkNonDispatchableHandle.14*, %class.VkNonDispatchableHandle.14** %83, align 8
  %96 = getelementptr inbounds %class.VkNonDispatchableHandle.14, %class.VkNonDispatchableHandle.14* %95, i64 0, i32 0
  %97 = load i64, i64* %96, align 8
  %98 = bitcast i8* %69 to i64*
  store i64 %97, i64* %98, align 8
  %99 = load i32, i32* %80, align 4
  %100 = icmp ugt i32 %99, 1
  br i1 %100, label %101, label %113

101:                                              ; preds = %94, %101
  %102 = phi i64 [ %109, %101 ], [ 1, %94 ]
  %103 = load %"class.vk::Sampler"**, %"class.vk::Sampler"*** %90, align 8
  %104 = load %class.VkNonDispatchableHandle.14*, %class.VkNonDispatchableHandle.14** %83, align 8
  %105 = getelementptr inbounds %class.VkNonDispatchableHandle.14, %class.VkNonDispatchableHandle.14* %104, i64 %102, i32 0
  %106 = load i64, i64* %105, align 8
  %107 = getelementptr inbounds %"class.vk::Sampler"*, %"class.vk::Sampler"** %103, i64 %102
  %108 = bitcast %"class.vk::Sampler"** %107 to i64*
  store i64 %106, i64* %108, align 8
  %109 = add nuw nsw i64 %102, 1
  %110 = load i32, i32* %80, align 4
  %111 = zext i32 %110 to i64
  %112 = icmp ult i64 %109, %111
  br i1 %112, label %101, label %113

113:                                              ; preds = %101, %94, %87, %67
  %114 = phi i8* [ %69, %67 ], [ %92, %87 ], [ %92, %94 ], [ %92, %101 ]
  %115 = add nuw nsw i64 %68, 1
  %116 = load i32, i32* %10, align 4
  %117 = zext i32 %116 to i64
  %118 = icmp ult i64 %115, %117
  br i1 %118, label %67, label %62

119:                                              ; preds = %136, %3, %64
  ret void

120:                                              ; preds = %64, %136
  %121 = phi i64 [ %140, %136 ], [ 0, %64 ]
  %122 = phi i32 [ %139, %136 ], [ 0, %64 ]
  %123 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %8, align 8
  %124 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %123, i64 %121, i32 3
  store i32 %122, i32* %124, align 8
  %125 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %8, align 8
  %126 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %125, i64 %121, i32 1
  %127 = load i32, i32* %126, align 4
  %128 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %125, i64 %121, i32 0
  %129 = load i32, i32* %128, align 8
  %130 = icmp ult i32 %129, 11
  br i1 %130, label %132, label %131

131:                                              ; preds = %120
  tail call void (i8*, ...) @_ZN2sw4warnEPKcz(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i64 0, i64 0), i32 133, i32 %129) #6
  br label %136

132:                                              ; preds = %120
  %133 = sext i32 %129 to i64
  %134 = getelementptr inbounds [11 x i32], [11 x i32]* @switch.table._ZN2vk19DescriptorSetLayout17GetDescriptorSizeE16VkDescriptorType, i64 0, i64 %133
  %135 = load i32, i32* %134, align 4
  br label %136

136:                                              ; preds = %132, %131
  %137 = phi i32 [ 0, %131 ], [ %135, %132 ]
  %138 = mul i32 %137, %127
  %139 = add i32 %138, %122
  %140 = add nuw nsw i64 %121, 1
  %141 = load i32, i32* %7, align 4
  %142 = zext i32 %141 to i64
  %143 = icmp ult i64 %140, %142
  br i1 %143, label %120, label %119
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind optsize ssp uwtable
define hidden i32 @_ZN2vk19DescriptorSetLayout17GetDescriptorSizeE16VkDescriptorType(i32) local_unnamed_addr #0 align 2 {
  %2 = icmp ult i32 %0, 11
  br i1 %2, label %4, label %3

3:                                                ; preds = %1
  tail call void (i8*, ...) @_ZN2sw4warnEPKcz(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i64 0, i64 0), i32 133, i32 %0) #6
  ret i32 0

4:                                                ; preds = %1
  %5 = sext i32 %0 to i64
  %6 = getelementptr inbounds [11 x i32], [11 x i32]* @switch.table._ZN2vk19DescriptorSetLayout17GetDescriptorSizeE16VkDescriptorType, i64 0, i64 %5
  %7 = load i32, i32* %6, align 4
  ret i32 %7
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2vk19DescriptorSetLayout7destroyEPK21VkAllocationCallbacks(%"class.vk::DescriptorSetLayout"* nocapture readonly, %struct.VkAllocationCallbacks*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.vk::DescriptorSetLayout", %"class.vk::DescriptorSetLayout"* %0, i64 0, i32 2
  %4 = bitcast %"struct.vk::DescriptorSetLayout::Binding"** %3 to i8**
  %5 = load i8*, i8** %4, align 8
  tail call void @_ZN2vk10deallocateEPvPK21VkAllocationCallbacks(i8* %5, %struct.VkAllocationCallbacks* %1) #6
  ret void
}

; Function Attrs: optsize
declare void @_ZN2vk10deallocateEPvPK21VkAllocationCallbacks(i8*, %struct.VkAllocationCallbacks*) local_unnamed_addr #2

; Function Attrs: nounwind optsize readonly ssp uwtable
define hidden i64 @_ZN2vk19DescriptorSetLayout29ComputeRequiredAllocationSizeEPK31VkDescriptorSetLayoutCreateInfo(%struct.VkDescriptorSetLayoutCreateInfo* nocapture readonly) local_unnamed_addr #3 align 2 {
  %2 = getelementptr inbounds %struct.VkDescriptorSetLayoutCreateInfo, %struct.VkDescriptorSetLayoutCreateInfo* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %12, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VkDescriptorSetLayoutCreateInfo, %struct.VkDescriptorSetLayoutCreateInfo* %0, i64 0, i32 4
  %7 = load %struct.VkDescriptorSetLayoutBinding*, %struct.VkDescriptorSetLayoutBinding** %6, align 8
  %8 = zext i32 %3 to i64
  br label %18

9:                                                ; preds = %38
  %10 = zext i32 %26 to i64
  %11 = mul nuw nsw i64 %10, 24
  br label %12

12:                                               ; preds = %9, %1
  %13 = phi i64 [ 0, %1 ], [ %11, %9 ]
  %14 = phi i32 [ 0, %1 ], [ %39, %9 ]
  %15 = zext i32 %14 to i64
  %16 = shl nuw nsw i64 %15, 3
  %17 = add nuw nsw i64 %16, %13
  ret i64 %17

18:                                               ; preds = %5, %38
  %19 = phi i64 [ 0, %5 ], [ %40, %38 ]
  %20 = phi i32 [ 0, %5 ], [ %39, %38 ]
  %21 = phi i32 [ 0, %5 ], [ %26, %38 ]
  %22 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %7, i64 %19, i32 0
  %23 = load i32, i32* %22, align 8
  %24 = add i32 %23, 1
  %25 = icmp ult i32 %21, %24
  %26 = select i1 %25, i32 %24, i32 %21
  %27 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %7, i64 %19, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = icmp ult i32 %28, 2
  %30 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %7, i64 %19, i32 4
  %31 = load %class.VkNonDispatchableHandle.14*, %class.VkNonDispatchableHandle.14** %30, align 8
  %32 = icmp ne %class.VkNonDispatchableHandle.14* %31, null
  %33 = and i1 %29, %32
  br i1 %33, label %34, label %38

34:                                               ; preds = %18
  %35 = getelementptr inbounds %struct.VkDescriptorSetLayoutBinding, %struct.VkDescriptorSetLayoutBinding* %7, i64 %19, i32 2
  %36 = load i32, i32* %35, align 8
  %37 = add i32 %36, %20
  br label %38

38:                                               ; preds = %18, %34
  %39 = phi i32 [ %37, %34 ], [ %20, %18 ]
  %40 = add nuw nsw i64 %19, 1
  %41 = icmp ult i64 %40, %8
  br i1 %41, label %18, label %9
}

; Function Attrs: optsize
declare void @_ZN2sw4warnEPKcz(i8*, ...) local_unnamed_addr #2

; Function Attrs: norecurse nounwind optsize readnone ssp uwtable
define hidden zeroext i1 @_ZN2vk19DescriptorSetLayout19IsDescriptorDynamicE16VkDescriptorType(i32) local_unnamed_addr #4 align 2 {
  %2 = or i32 %0, 1
  %3 = icmp eq i32 %2, 9
  ret i1 %3
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i64 @_ZNK2vk19DescriptorSetLayout30getDescriptorSetAllocationSizeEv(%"class.vk::DescriptorSetLayout"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = tail call i64 @_ZNK2vk19DescriptorSetLayout24getDescriptorSetDataSizeEv(%"class.vk::DescriptorSetLayout"* %0) #7
  %3 = add i64 %2, 63
  %4 = and i64 %3, -16
  ret i64 %4
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i64 @_ZNK2vk19DescriptorSetLayout24getDescriptorSetDataSizeEv(%"class.vk::DescriptorSetLayout"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.vk::DescriptorSetLayout", %"class.vk::DescriptorSetLayout"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %7, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.vk::DescriptorSetLayout", %"class.vk::DescriptorSetLayout"* %0, i64 0, i32 2
  br label %9

7:                                                ; preds = %22, %1
  %8 = phi i64 [ 0, %1 ], [ %27, %22 ]
  ret i64 %8

9:                                                ; preds = %5, %22
  %10 = phi i32 [ %3, %5 ], [ %23, %22 ]
  %11 = phi i64 [ 0, %5 ], [ %28, %22 ]
  %12 = phi i64 [ 0, %5 ], [ %27, %22 ]
  %13 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %6, align 8
  %14 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %13, i64 %11, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %13, i64 %11, i32 0
  %17 = load i32, i32* %16, align 8
  switch i32 %17, label %20 [
    i32 0, label %22
    i32 1, label %22
    i32 2, label %22
    i32 4, label %22
    i32 3, label %18
    i32 5, label %18
    i32 10, label %18
    i32 6, label %19
    i32 7, label %19
    i32 8, label %19
    i32 9, label %19
  ]

18:                                               ; preds = %9, %9, %9
  br label %22

19:                                               ; preds = %9, %9, %9, %9
  br label %22

20:                                               ; preds = %9
  tail call void (i8*, ...) @_ZN2sw4warnEPKcz(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i64 0, i64 0), i32 133, i32 %17) #6
  %21 = load i32, i32* %2, align 4
  br label %22

22:                                               ; preds = %9, %9, %9, %9, %18, %19, %20
  %23 = phi i32 [ %21, %20 ], [ %10, %19 ], [ %10, %18 ], [ %10, %9 ], [ %10, %9 ], [ %10, %9 ], [ %10, %9 ]
  %24 = phi i32 [ 0, %20 ], [ 16, %19 ], [ 80, %18 ], [ 2368, %9 ], [ 2368, %9 ], [ 2368, %9 ], [ 2368, %9 ]
  %25 = mul i32 %24, %15
  %26 = zext i32 %25 to i64
  %27 = add i64 %12, %26
  %28 = add nuw nsw i64 %11, 1
  %29 = zext i32 %23 to i64
  %30 = icmp ult i64 %28, %29
  br i1 %30, label %9, label %7
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2vk19DescriptorSetLayout10initializeEPNS_13DescriptorSetE(%"class.vk::DescriptorSetLayout"*, %"class.vk::DescriptorSet"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.vk::DescriptorSet", %"class.vk::DescriptorSet"* %1, i64 0, i32 0, i32 0
  store %"class.vk::DescriptorSetLayout"* %0, %"class.vk::DescriptorSetLayout"** %3, align 16
  %4 = getelementptr inbounds %"class.vk::DescriptorSetLayout", %"class.vk::DescriptorSetLayout"* %0, i64 0, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %11, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.vk::DescriptorSet", %"class.vk::DescriptorSet"* %1, i64 0, i32 1, i64 0
  %9 = getelementptr inbounds %"class.vk::DescriptorSetLayout", %"class.vk::DescriptorSetLayout"* %0, i64 0, i32 2
  %10 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %9, align 8
  br label %12

11:                                               ; preds = %58, %2
  ret void

12:                                               ; preds = %7, %58
  %13 = phi %"struct.vk::DescriptorSetLayout::Binding"* [ %10, %7 ], [ %59, %58 ]
  %14 = phi %"struct.vk::DescriptorSetLayout::Binding"* [ %10, %7 ], [ %60, %58 ]
  %15 = phi i64 [ 0, %7 ], [ %62, %58 ]
  %16 = phi i8* [ %8, %7 ], [ %61, %58 ]
  %17 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %14, i64 %15, i32 0
  %18 = load i32, i32* %17, align 8
  switch i32 %18, label %21 [
    i32 0, label %23
    i32 1, label %23
    i32 2, label %23
    i32 4, label %23
    i32 3, label %19
    i32 5, label %19
    i32 10, label %19
    i32 6, label %20
    i32 7, label %20
    i32 8, label %20
    i32 9, label %20
  ]

19:                                               ; preds = %12, %12, %12
  br label %23

20:                                               ; preds = %12, %12, %12, %12
  br label %23

21:                                               ; preds = %12
  tail call void (i8*, ...) @_ZN2sw4warnEPKcz(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i64 0, i64 0), i32 133, i32 %18) #6
  %22 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %9, align 8
  br label %23

23:                                               ; preds = %12, %12, %12, %12, %19, %20, %21
  %24 = phi %"struct.vk::DescriptorSetLayout::Binding"* [ %22, %21 ], [ %13, %20 ], [ %13, %19 ], [ %13, %12 ], [ %13, %12 ], [ %13, %12 ], [ %13, %12 ]
  %25 = phi %"struct.vk::DescriptorSetLayout::Binding"* [ %22, %21 ], [ %14, %20 ], [ %14, %19 ], [ %14, %12 ], [ %14, %12 ], [ %14, %12 ], [ %14, %12 ]
  %26 = phi i64 [ 0, %21 ], [ 16, %20 ], [ 80, %19 ], [ 2368, %12 ], [ 2368, %12 ], [ 2368, %12 ], [ 2368, %12 ]
  %27 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %25, i64 %15, i32 2
  %28 = load %"class.vk::Sampler"**, %"class.vk::Sampler"*** %27, align 8
  %29 = icmp eq %"class.vk::Sampler"** %28, null
  br i1 %29, label %52, label %30

30:                                               ; preds = %23
  %31 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %24, i64 %15, i32 1
  %32 = load i32, i32* %31, align 4
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %58, label %34

34:                                               ; preds = %30, %34
  %35 = phi i64 [ %46, %34 ], [ 0, %30 ]
  %36 = phi %"struct.vk::DescriptorSetLayout::Binding"* [ %47, %34 ], [ %24, %30 ]
  %37 = phi i8* [ %45, %34 ], [ %16, %30 ]
  %38 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %36, i64 %15, i32 2
  %39 = load %"class.vk::Sampler"**, %"class.vk::Sampler"*** %38, align 8
  %40 = getelementptr inbounds %"class.vk::Sampler"*, %"class.vk::Sampler"** %39, i64 %35
  %41 = load %"class.vk::Sampler"*, %"class.vk::Sampler"** %40, align 8
  %42 = getelementptr inbounds %"class.vk::Sampler", %"class.vk::Sampler"* %41, i64 0, i32 1
  %43 = load i32, i32* %42, align 4
  %44 = bitcast i8* %37 to i32*
  store i32 %43, i32* %44, align 16
  %45 = getelementptr inbounds i8, i8* %37, i64 %26
  %46 = add nuw nsw i64 %35, 1
  %47 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %9, align 8
  %48 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %47, i64 %15, i32 1
  %49 = load i32, i32* %48, align 4
  %50 = zext i32 %49 to i64
  %51 = icmp ult i64 %46, %50
  br i1 %51, label %34, label %58

52:                                               ; preds = %23
  %53 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %25, i64 %15, i32 1
  %54 = load i32, i32* %53, align 4
  %55 = zext i32 %54 to i64
  %56 = mul nuw nsw i64 %26, %55
  %57 = getelementptr inbounds i8, i8* %16, i64 %56
  br label %58

58:                                               ; preds = %34, %30, %52
  %59 = phi %"struct.vk::DescriptorSetLayout::Binding"* [ %24, %52 ], [ %24, %30 ], [ %47, %34 ]
  %60 = phi %"struct.vk::DescriptorSetLayout::Binding"* [ %25, %52 ], [ %24, %30 ], [ %47, %34 ]
  %61 = phi i8* [ %57, %52 ], [ %16, %30 ], [ %45, %34 ]
  %62 = add nuw nsw i64 %15, 1
  %63 = load i32, i32* %4, align 4
  %64 = zext i32 %63 to i64
  %65 = icmp ult i64 %62, %64
  br i1 %65, label %12, label %11
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK2vk19DescriptorSetLayout16getBindingOffsetEj(%"class.vk::DescriptorSetLayout"* nocapture readonly, i32) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.vk::DescriptorSetLayout", %"class.vk::DescriptorSetLayout"* %0, i64 0, i32 2
  %4 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %3, align 8
  %5 = zext i32 %1 to i64
  %6 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %4, i64 %5, i32 3
  %7 = load i32, i32* %6, align 8
  ret i32 %7
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK2vk19DescriptorSetLayout18getDescriptorCountEj(%"class.vk::DescriptorSetLayout"* nocapture readonly, i32) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.vk::DescriptorSetLayout", %"class.vk::DescriptorSetLayout"* %0, i64 0, i32 2
  %4 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %3, align 8
  %5 = zext i32 %1 to i64
  %6 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %4, i64 %5, i32 1
  %7 = load i32, i32* %6, align 4
  ret i32 %7
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK2vk19DescriptorSetLayout25getDynamicDescriptorCountEv(%"class.vk::DescriptorSetLayout"* nocapture readonly) local_unnamed_addr #5 align 2 {
  %2 = getelementptr inbounds %"class.vk::DescriptorSetLayout", %"class.vk::DescriptorSetLayout"* %0, i64 0, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %"class.vk::DescriptorSetLayout", %"class.vk::DescriptorSetLayout"* %0, i64 0, i32 2
  %7 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %6, align 8
  %8 = zext i32 %3 to i64
  br label %11

9:                                                ; preds = %22, %1
  %10 = phi i32 [ 0, %1 ], [ %23, %22 ]
  ret i32 %10

11:                                               ; preds = %5, %22
  %12 = phi i64 [ 0, %5 ], [ %24, %22 ]
  %13 = phi i32 [ 0, %5 ], [ %23, %22 ]
  %14 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %7, i64 %12, i32 0
  %15 = load i32, i32* %14, align 8
  %16 = or i32 %15, 1
  %17 = icmp eq i32 %16, 9
  br i1 %17, label %18, label %22

18:                                               ; preds = %11
  %19 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %7, i64 %12, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = add i32 %20, %13
  br label %22

22:                                               ; preds = %11, %18
  %23 = phi i32 [ %21, %18 ], [ %13, %11 ]
  %24 = add nuw nsw i64 %12, 1
  %25 = icmp ult i64 %24, %8
  br i1 %25, label %11, label %9
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK2vk19DescriptorSetLayout21getDynamicOffsetIndexEj(%"class.vk::DescriptorSetLayout"* nocapture readonly, i32) local_unnamed_addr #5 align 2 {
  %3 = icmp eq i32 %1, 0
  br i1 %3, label %8, label %4

4:                                                ; preds = %2
  %5 = getelementptr inbounds %"class.vk::DescriptorSetLayout", %"class.vk::DescriptorSetLayout"* %0, i64 0, i32 2
  %6 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %5, align 8
  %7 = zext i32 %1 to i64
  br label %10

8:                                                ; preds = %21, %2
  %9 = phi i32 [ 0, %2 ], [ %22, %21 ]
  ret i32 %9

10:                                               ; preds = %21, %4
  %11 = phi i64 [ 0, %4 ], [ %23, %21 ]
  %12 = phi i32 [ 0, %4 ], [ %22, %21 ]
  %13 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %6, i64 %11, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = or i32 %14, 1
  %16 = icmp eq i32 %15, 9
  br i1 %16, label %17, label %21

17:                                               ; preds = %10
  %18 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %6, i64 %11, i32 1
  %19 = load i32, i32* %18, align 4
  %20 = add i32 %19, %12
  br label %21

21:                                               ; preds = %10, %17
  %22 = phi i32 [ %20, %17 ], [ %12, %10 ]
  %23 = add nuw nsw i64 %11, 1
  %24 = icmp eq i64 %23, %7
  br i1 %24, label %8, label %10
}

; Function Attrs: norecurse nounwind optsize readonly ssp uwtable
define hidden i32 @_ZNK2vk19DescriptorSetLayout17getDescriptorTypeEj(%"class.vk::DescriptorSetLayout"* nocapture readonly, i32) local_unnamed_addr #5 align 2 {
  %3 = getelementptr inbounds %"class.vk::DescriptorSetLayout", %"class.vk::DescriptorSetLayout"* %0, i64 0, i32 2
  %4 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %3, align 8
  %5 = zext i32 %1 to i64
  %6 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %4, i64 %5, i32 0
  %7 = load i32, i32* %6, align 8
  ret i32 %7
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden i8* @_ZNK2vk19DescriptorSetLayout20getDescriptorPointerEPNS_13DescriptorSetEjjjPm(%"class.vk::DescriptorSetLayout"* nocapture readonly, %"class.vk::DescriptorSet"* readnone, i32, i32, i32, i64* nocapture) local_unnamed_addr #0 align 2 {
  %7 = getelementptr inbounds %"class.vk::DescriptorSetLayout", %"class.vk::DescriptorSetLayout"* %0, i64 0, i32 2
  %8 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %7, align 8
  %9 = zext i32 %2 to i64
  %10 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %8, i64 %9, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = icmp ult i32 %11, 11
  br i1 %12, label %14, label %13

13:                                               ; preds = %6
  tail call void (i8*, ...) @_ZN2sw4warnEPKcz(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i64 0, i64 0), i32 133, i32 %11) #6
  br label %18

14:                                               ; preds = %6
  %15 = sext i32 %11 to i64
  %16 = getelementptr inbounds [11 x i64], [11 x i64]* @switch.table._ZNK2vk19DescriptorSetLayout20getDescriptorPointerEPNS_13DescriptorSetEjjjPm, i64 0, i64 %15
  %17 = load i64, i64* %16, align 8
  br label %18

18:                                               ; preds = %14, %13
  %19 = phi i64 [ 0, %13 ], [ %17, %14 ]
  store i64 %19, i64* %5, align 8
  %20 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %7, align 8
  %21 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %20, i64 %9, i32 3
  %22 = load i32, i32* %21, align 8
  %23 = zext i32 %22 to i64
  %24 = zext i32 %3 to i64
  %25 = mul nuw nsw i64 %19, %24
  %26 = add nuw nsw i64 %25, %23
  %27 = getelementptr inbounds %"class.vk::DescriptorSet", %"class.vk::DescriptorSet"* %1, i64 0, i32 1, i64 %26
  ret i8* %27
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2vk19DescriptorSetLayout18WriteDescriptorSetEPNS_6DeviceEPNS_13DescriptorSetERK31VkDescriptorUpdateTemplateEntryPKc(%"class.vk::Device"*, %"class.vk::DescriptorSet"*, %struct.VkDescriptorUpdateTemplateEntry* nocapture readonly dereferenceable(32), i8* nocapture readonly) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.vk::Format", align 4
  %6 = alloca %"class.vk::Format", align 4
  %7 = alloca %"class.vk::Format", align 4
  %8 = alloca %struct.VkOffset3D, align 4
  %9 = alloca %"class.vk::Format", align 4
  %10 = alloca %"class.vk::Format", align 4
  %11 = alloca %struct.VkOffset3D, align 4
  %12 = alloca %struct.VkOffset3D, align 4
  %13 = alloca %"class.vk::Format", align 4
  %14 = getelementptr inbounds %"class.vk::DescriptorSet", %"class.vk::DescriptorSet"* %1, i64 0, i32 0, i32 0
  %15 = load %"class.vk::DescriptorSetLayout"*, %"class.vk::DescriptorSetLayout"** %14, align 16
  %16 = getelementptr inbounds %"class.vk::DescriptorSetLayout", %"class.vk::DescriptorSetLayout"* %15, i64 0, i32 2
  %17 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %16, align 8
  %18 = getelementptr inbounds %struct.VkDescriptorUpdateTemplateEntry, %struct.VkDescriptorUpdateTemplateEntry* %2, i64 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = zext i32 %19 to i64
  %21 = getelementptr inbounds %struct.VkDescriptorUpdateTemplateEntry, %struct.VkDescriptorUpdateTemplateEntry* %2, i64 0, i32 1
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %struct.VkDescriptorUpdateTemplateEntry, %struct.VkDescriptorUpdateTemplateEntry* %2, i64 0, i32 2
  %24 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %17, i64 %20, i32 0
  %25 = load i32, i32* %24, align 8
  switch i32 %25, label %28 [
    i32 0, label %30
    i32 1, label %30
    i32 2, label %30
    i32 4, label %30
    i32 3, label %26
    i32 5, label %26
    i32 10, label %26
    i32 6, label %27
    i32 7, label %27
    i32 8, label %27
    i32 9, label %27
  ]

26:                                               ; preds = %4, %4, %4
  br label %30

27:                                               ; preds = %4, %4, %4, %4
  br label %30

28:                                               ; preds = %4
  tail call void (i8*, ...) @_ZN2sw4warnEPKcz(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i64 0, i64 0), i32 133, i32 %25) #6
  %29 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %16, align 8
  br label %30

30:                                               ; preds = %4, %4, %4, %4, %26, %27, %28
  %31 = phi %"struct.vk::DescriptorSetLayout::Binding"* [ %29, %28 ], [ %17, %27 ], [ %17, %26 ], [ %17, %4 ], [ %17, %4 ], [ %17, %4 ], [ %17, %4 ]
  %32 = phi i64 [ 0, %28 ], [ 16, %27 ], [ 80, %26 ], [ 2368, %4 ], [ 2368, %4 ], [ 2368, %4 ], [ 2368, %4 ]
  %33 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %31, i64 %20, i32 3
  %34 = load i32, i32* %33, align 8
  %35 = zext i32 %34 to i64
  %36 = zext i32 %22 to i64
  %37 = mul nuw nsw i64 %32, %36
  %38 = add nuw nsw i64 %37, %35
  %39 = getelementptr inbounds %"class.vk::DescriptorSet", %"class.vk::DescriptorSet"* %1, i64 0, i32 1, i64 %38
  %40 = getelementptr inbounds %struct.VkDescriptorUpdateTemplateEntry, %struct.VkDescriptorUpdateTemplateEntry* %2, i64 0, i32 3
  %41 = load i32, i32* %40, align 4
  switch i32 %41, label %439 [
    i32 0, label %42
    i32 4, label %71
    i32 1, label %141
    i32 2, label %141
    i32 3, label %280
    i32 10, label %280
    i32 5, label %355
    i32 6, label %395
    i32 8, label %395
    i32 7, label %395
    i32 9, label %395
  ]

42:                                               ; preds = %30
  %43 = bitcast i8* %39 to %"struct.vk::SampledImageDescriptor"*
  %44 = load i32, i32* %23, align 8
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %439, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %17, i64 %20, i32 2
  %48 = getelementptr inbounds %struct.VkDescriptorUpdateTemplateEntry, %struct.VkDescriptorUpdateTemplateEntry* %2, i64 0, i32 4
  %49 = getelementptr inbounds %struct.VkDescriptorUpdateTemplateEntry, %struct.VkDescriptorUpdateTemplateEntry* %2, i64 0, i32 5
  br label %50

50:                                               ; preds = %46, %65
  %51 = phi i64 [ 0, %46 ], [ %67, %65 ]
  %52 = load %"class.vk::Sampler"**, %"class.vk::Sampler"*** %47, align 8
  %53 = icmp eq %"class.vk::Sampler"** %52, null
  br i1 %53, label %54, label %65

54:                                               ; preds = %50
  %55 = load i64, i64* %48, align 8
  %56 = getelementptr inbounds i8, i8* %3, i64 %55
  %57 = load i64, i64* %49, align 8
  %58 = mul i64 %57, %51
  %59 = getelementptr inbounds i8, i8* %56, i64 %58
  %60 = bitcast i8* %59 to %"class.vk::Sampler"**
  %61 = load %"class.vk::Sampler"*, %"class.vk::Sampler"** %60, align 8
  %62 = getelementptr inbounds %"class.vk::Sampler", %"class.vk::Sampler"* %61, i64 0, i32 1
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %43, i64 %51, i32 0
  store i32 %63, i32* %64, align 16
  br label %65

65:                                               ; preds = %50, %54
  %66 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %43, i64 %51, i32 9
  store %"class.vk::Device"* %0, %"class.vk::Device"** %66, align 8
  %67 = add nuw nsw i64 %51, 1
  %68 = load i32, i32* %23, align 8
  %69 = zext i32 %68 to i64
  %70 = icmp ult i64 %67, %69
  br i1 %70, label %50, label %439

71:                                               ; preds = %30
  %72 = bitcast i8* %39 to %"struct.vk::SampledImageDescriptor"*
  %73 = load i32, i32* %23, align 8
  %74 = icmp eq i32 %73, 0
  br i1 %74, label %439, label %75

75:                                               ; preds = %71
  %76 = getelementptr inbounds %struct.VkDescriptorUpdateTemplateEntry, %struct.VkDescriptorUpdateTemplateEntry* %2, i64 0, i32 4
  %77 = getelementptr inbounds %struct.VkDescriptorUpdateTemplateEntry, %struct.VkDescriptorUpdateTemplateEntry* %2, i64 0, i32 5
  %78 = bitcast %"class.vk::Format"* %5 to i8*
  %79 = getelementptr inbounds %"class.vk::Format", %"class.vk::Format"* %5, i64 0, i32 0
  br label %80

80:                                               ; preds = %75, %80
  %81 = phi i64 [ 0, %75 ], [ %137, %80 ]
  %82 = load i64, i64* %76, align 8
  %83 = getelementptr inbounds i8, i8* %3, i64 %82
  %84 = load i64, i64* %77, align 8
  %85 = mul i64 %84, %81
  %86 = getelementptr inbounds i8, i8* %83, i64 %85
  %87 = bitcast i8* %86 to %"class.vk::BufferView"**
  %88 = load %"class.vk::BufferView"*, %"class.vk::BufferView"** %87, align 8
  %89 = bitcast %"class.vk::BufferView"* %88 to i32*
  %90 = load i32, i32* %89, align 4
  %91 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 1
  store i32 %90, i32* %91, align 4
  %92 = getelementptr inbounds %"class.vk::BufferView", %"class.vk::BufferView"* %88, i64 0, i32 4
  %93 = load i64, i64* %92, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %78) #8
  %94 = getelementptr inbounds %"class.vk::BufferView", %"class.vk::BufferView"* %88, i64 0, i32 2
  %95 = load i32, i32* %94, align 8
  store i32 %95, i32* %79, align 4
  %96 = call i32 @_ZNK2vk6Format5bytesEv(%"class.vk::Format"* nonnull %5) #6
  %97 = sext i32 %96 to i64
  %98 = udiv i64 %93, %97
  %99 = trunc i64 %98 to i32
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %78) #8
  %100 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 4
  store i32 %99, i32* %100, align 16
  %101 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 5
  %102 = bitcast i32* %101 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %102, align 4
  %103 = uitofp i32 %99 to float
  %104 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 3, i32 1, i32 0, i32 0, i64 0
  store float %103, float* %104, align 16
  %105 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 3, i32 1, i32 0, i32 0, i64 1
  store float %103, float* %105, align 4
  %106 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 3, i32 1, i32 0, i32 0, i64 2
  store float 1.000000e+00, float* %106, align 8
  %107 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 3, i32 1, i32 0, i32 0, i64 3
  store float 1.000000e+00, float* %107, align 4
  %108 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 3, i32 2, i32 0, i32 0, i64 0
  %109 = insertelement <4 x float> undef, float %103, i32 0
  %110 = shufflevector <4 x float> %109, <4 x float> undef, <4 x i32> zeroinitializer
  %111 = bitcast float* %108 to <4 x float>*
  store <4 x float> %110, <4 x float>* %111, align 16
  %112 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 3, i32 3, i32 0, i32 0, i64 0
  store float 1.000000e+00, float* %112, align 16
  %113 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 3, i32 3, i32 0, i32 0, i64 1
  store float 1.000000e+00, float* %113, align 4
  %114 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 3, i32 3, i32 0, i32 0, i64 2
  %115 = bitcast float* %114 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %115, align 8
  %116 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 3, i32 4, i32 0, i32 0, i64 2
  store float 1.000000e+00, float* %116, align 8
  %117 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 3, i32 4, i32 0, i32 0, i64 3
  store float 1.000000e+00, float* %117, align 4
  %118 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 9
  store %"class.vk::Device"* %0, %"class.vk::Device"** %118, align 8
  %119 = call i8* @_ZNK2vk10BufferView10getPointerEv(%"class.vk::BufferView"* %88) #6
  %120 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 3, i32 0, i64 0, i32 0
  store i8* %119, i8** %120, align 16
  %121 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 3, i32 0, i64 0, i32 4, i32 0, i32 0, i64 0
  %122 = insertelement <4 x i32> undef, i32 %99, i32 0
  %123 = shufflevector <4 x i32> %122, <4 x i32> undef, <4 x i32> zeroinitializer
  %124 = bitcast i32* %121 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %124, align 4
  %125 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 3, i32 0, i64 0, i32 5, i32 0, i32 0, i64 0
  %126 = bitcast i32* %125 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %126, align 4
  %127 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 3, i32 0, i64 0, i32 6, i32 0, i32 0, i64 0
  %128 = bitcast i32* %127 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 1, i32 1>, <4 x i32>* %128, align 4
  %129 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 3, i32 0, i64 0, i32 9, i32 0, i32 0, i64 0
  %130 = bitcast i32* %129 to <4 x i32>*
  store <4 x i32> %123, <4 x i32>* %130, align 16
  %131 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 3, i32 0, i64 0, i32 10, i32 0, i32 0, i64 0
  %132 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 3, i32 0, i64 0, i32 7, i32 0, i32 0, i64 2
  %133 = bitcast i32* %131 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %133, i8 0, i64 16, i1 false)
  store i16 1, i16* %132, align 2
  %134 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 3, i32 0, i64 0, i32 7, i32 0, i32 0, i64 0
  store i16 1, i16* %134, align 2
  %135 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 3, i32 0, i64 0, i32 7, i32 0, i32 0, i64 3
  store i16 0, i16* %135, align 2
  %136 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %72, i64 %81, i32 3, i32 0, i64 0, i32 7, i32 0, i32 0, i64 1
  store i16 0, i16* %136, align 2
  %137 = add nuw nsw i64 %81, 1
  %138 = load i32, i32* %23, align 8
  %139 = zext i32 %138 to i64
  %140 = icmp ult i64 %137, %139
  br i1 %140, label %80, label %439

141:                                              ; preds = %30, %30
  %142 = bitcast i8* %39 to %"struct.vk::SampledImageDescriptor"*
  %143 = load i32, i32* %23, align 8
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %439, label %145

145:                                              ; preds = %141
  %146 = getelementptr inbounds %struct.VkDescriptorUpdateTemplateEntry, %struct.VkDescriptorUpdateTemplateEntry* %2, i64 0, i32 4
  %147 = getelementptr inbounds %struct.VkDescriptorUpdateTemplateEntry, %struct.VkDescriptorUpdateTemplateEntry* %2, i64 0, i32 5
  %148 = bitcast %"class.vk::Format"* %7 to i8*
  %149 = getelementptr inbounds %"class.vk::Format", %"class.vk::Format"* %7, i64 0, i32 0
  %150 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %17, i64 %20, i32 2
  %151 = bitcast %struct.VkOffset3D* %11 to i8*
  %152 = bitcast %struct.VkOffset3D* %12 to i8*
  %153 = bitcast %struct.VkOffset3D* %8 to i8*
  %154 = bitcast %"class.vk::Format"* %9 to i8*
  %155 = getelementptr inbounds %"class.vk::Format", %"class.vk::Format"* %9, i64 0, i32 0
  %156 = bitcast %"class.vk::Format"* %10 to i8*
  %157 = getelementptr inbounds %"class.vk::Format", %"class.vk::Format"* %10, i64 0, i32 0
  br label %158

158:                                              ; preds = %145, %275
  %159 = phi i64 [ 0, %145 ], [ %276, %275 ]
  %160 = load i64, i64* %146, align 8
  %161 = getelementptr inbounds i8, i8* %3, i64 %160
  %162 = load i64, i64* %147, align 8
  %163 = mul i64 %162, %159
  %164 = getelementptr inbounds i8, i8* %161, i64 %163
  %165 = getelementptr inbounds i8, i8* %164, i64 8
  %166 = bitcast i8* %165 to %"class.vk::ImageView"**
  %167 = load %"class.vk::ImageView"*, %"class.vk::ImageView"** %166, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %148) #8
  store i32 -1431655766, i32* %149, align 4
  %168 = call i32 @_ZNK2vk9ImageView9getFormatENS0_5UsageE(%"class.vk::ImageView"* %167, i32 1) #6
  store i32 %168, i32* %149, align 4
  %169 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %142, i64 %159, i32 3
  %170 = load i32, i32* %40, align 4
  %171 = icmp eq i32 %170, 1
  br i1 %171, label %172, label %181

172:                                              ; preds = %158
  %173 = load %"class.vk::Sampler"**, %"class.vk::Sampler"*** %150, align 8
  %174 = icmp eq %"class.vk::Sampler"** %173, null
  br i1 %174, label %175, label %181

175:                                              ; preds = %172
  %176 = bitcast i8* %164 to %"class.vk::Sampler"**
  %177 = load %"class.vk::Sampler"*, %"class.vk::Sampler"** %176, align 8
  %178 = getelementptr inbounds %"class.vk::Sampler", %"class.vk::Sampler"* %177, i64 0, i32 1
  %179 = load i32, i32* %178, align 4
  %180 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %142, i64 %159, i32 0
  store i32 %179, i32* %180, align 16
  br label %181

181:                                              ; preds = %172, %175, %158
  %182 = call i64 @_ZNK2vk9ImageView17getMipLevelExtentEj(%"class.vk::ImageView"* %167, i32 0) #6
  %183 = trunc i64 %182 to i32
  %184 = lshr i64 %182, 32
  %185 = trunc i64 %184 to i32
  %186 = getelementptr inbounds %"class.vk::ImageView", %"class.vk::ImageView"* %167, i64 0, i32 7
  %187 = bitcast %"union.vk::Identifier"* %186 to i32*
  %188 = load i32, i32* %187, align 4
  %189 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %142, i64 %159, i32 1
  store i32 %188, i32* %189, align 4
  %190 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %142, i64 %159, i32 4
  store i32 %183, i32* %190, align 16
  %191 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %142, i64 %159, i32 5
  store i32 %185, i32* %191, align 4
  %192 = call i32 @_ZNK2vk9ImageView20getDepthOrLayerCountEj(%"class.vk::ImageView"* %167, i32 0) #6
  %193 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %142, i64 %159, i32 6
  store i32 %192, i32* %193, align 8
  %194 = getelementptr inbounds %"class.vk::ImageView", %"class.vk::ImageView"* %167, i64 0, i32 4, i32 2
  %195 = load i32, i32* %194, align 4
  %196 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %142, i64 %159, i32 7
  store i32 %195, i32* %196, align 4
  %197 = call i32 @_ZNK2vk9ImageView14getSampleCountEv(%"class.vk::ImageView"* %167) #7
  %198 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %142, i64 %159, i32 8
  store i32 %197, i32* %198, align 16
  %199 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %142, i64 %159, i32 9
  store %"class.vk::Device"* %0, %"class.vk::Device"** %199, align 8
  %200 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %142, i64 %159, i32 10
  store %"class.vk::ImageView"* %167, %"class.vk::ImageView"** %200, align 16
  %201 = call zeroext i1 @_ZNK2vk6Format13isYcbcrFormatEv(%"class.vk::Format"* nonnull %7) #6
  br i1 %201, label %206, label %202

202:                                              ; preds = %181
  %203 = getelementptr inbounds %"class.vk::ImageView", %"class.vk::ImageView"* %167, i64 0, i32 4, i32 0
  %204 = getelementptr inbounds %"class.vk::ImageView", %"class.vk::ImageView"* %167, i64 0, i32 1
  %205 = getelementptr inbounds %"class.vk::ImageView", %"class.vk::ImageView"* %167, i64 0, i32 4, i32 4
  br label %235

206:                                              ; preds = %181
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %153) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %153, i8 0, i64 12, i1 false)
  %207 = call i8* @_ZNK2vk9ImageView16getOffsetPointerERK10VkOffset3D21VkImageAspectFlagBitsjjNS0_5UsageE(%"class.vk::ImageView"* %167, %struct.VkOffset3D* nonnull dereferenceable(12) %8, i32 16, i32 0, i32 0, i32 1) #6
  %208 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %169, i64 0, i32 0, i64 0, i32 0
  store i8* %207, i8** %208, align 16
  %209 = call i8* @_ZNK2vk9ImageView16getOffsetPointerERK10VkOffset3D21VkImageAspectFlagBitsjjNS0_5UsageE(%"class.vk::ImageView"* %167, %struct.VkOffset3D* nonnull dereferenceable(12) %8, i32 32, i32 0, i32 0, i32 1) #6
  %210 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %142, i64 %159, i32 3, i32 0, i64 1, i32 0
  store i8* %209, i8** %210, align 16
  %211 = call i32 @_ZNK2vk6Format10getAspectsEv(%"class.vk::Format"* nonnull %7) #6
  %212 = and i32 %211, 64
  %213 = icmp eq i32 %212, 0
  br i1 %213, label %217, label %214

214:                                              ; preds = %206
  %215 = call i8* @_ZNK2vk9ImageView16getOffsetPointerERK10VkOffset3D21VkImageAspectFlagBitsjjNS0_5UsageE(%"class.vk::ImageView"* %167, %struct.VkOffset3D* nonnull dereferenceable(12) %8, i32 64, i32 0, i32 0, i32 1) #6
  %216 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %142, i64 %159, i32 3, i32 0, i64 2, i32 0
  store i8* %215, i8** %216, align 16
  br label %217

217:                                              ; preds = %206, %214
  %218 = call i64 @_ZNK2vk9ImageView17getMipLevelExtentEj(%"class.vk::ImageView"* %167, i32 0) #6
  %219 = trunc i64 %218 to i32
  %220 = lshr i64 %218, 32
  %221 = trunc i64 %220 to i32
  %222 = call i32 @_ZNK2vk9ImageView13rowPitchBytesE21VkImageAspectFlagBitsjNS0_5UsageE(%"class.vk::ImageView"* %167, i32 16, i32 0, i32 1) #6
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %154) #8
  %223 = getelementptr inbounds %"class.vk::ImageView", %"class.vk::ImageView"* %167, i64 0, i32 0
  %224 = load %"class.vk::Image"*, %"class.vk::Image"** %223, align 8
  %225 = call i32 @_ZNK2vk5Image9getFormatE21VkImageAspectFlagBits(%"class.vk::Image"* %224, i32 16) #6
  store i32 %225, i32* %155, align 4
  %226 = call i32 @_ZNK2vk6Format5bytesEv(%"class.vk::Format"* nonnull %9) #6
  %227 = sdiv i32 %222, %226
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %154) #8
  call void @_ZN2vk19DescriptorSetLayout21WriteTextureLevelInfoEPN2sw7TextureEiiiiiiii(%"struct.sw::Texture"* %169, i32 0, i32 %219, i32 %221, i32 1, i32 %227, i32 0, i32 0, i32 0) #7
  %228 = call i32 @_ZNK2vk9ImageView13rowPitchBytesE21VkImageAspectFlagBitsjNS0_5UsageE(%"class.vk::ImageView"* %167, i32 32, i32 0, i32 1) #6
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %156) #8
  %229 = load %"class.vk::Image"*, %"class.vk::Image"** %223, align 8
  %230 = call i32 @_ZNK2vk5Image9getFormatE21VkImageAspectFlagBits(%"class.vk::Image"* %229, i32 32) #6
  store i32 %230, i32* %157, align 4
  %231 = call i32 @_ZNK2vk6Format5bytesEv(%"class.vk::Format"* nonnull %10) #6
  %232 = sdiv i32 %228, %231
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %156) #8
  %233 = sdiv i32 %219, 2
  %234 = sdiv i32 %221, 2
  call void @_ZN2vk19DescriptorSetLayout21WriteTextureLevelInfoEPN2sw7TextureEiiiiiiii(%"struct.sw::Texture"* %169, i32 1, i32 %233, i32 %234, i32 1, i32 %232, i32 0, i32 0, i32 0) #7
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %153) #8
  br label %275

235:                                              ; preds = %266, %202
  %236 = phi i64 [ 0, %202 ], [ %273, %266 ]
  %237 = load i32, i32* %194, align 4
  %238 = add nsw i32 %237, -1
  %239 = sext i32 %238 to i64
  %240 = icmp sgt i64 %236, %239
  %241 = trunc i64 %236 to i32
  %242 = select i1 %240, i32 %238, i32 %241
  %243 = load i32, i32* %203, align 4
  %244 = load i32, i32* %204, align 8
  switch i32 %244, label %246 [
    i32 3, label %245
    i32 6, label %245
  ]

245:                                              ; preds = %235, %235
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %151) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %151, i8* align 4 bitcast (%struct.VkOffset3D* @__const._ZN2vk19DescriptorSetLayout18WriteDescriptorSetEPNS_6DeviceEPNS_13DescriptorSetERK31VkDescriptorUpdateTemplateEntryPKc.offset to i8*), i64 12, i1 false)
  br label %247

246:                                              ; preds = %235
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %152) #8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 4 %152, i8 0, i64 12, i1 false)
  br label %247

247:                                              ; preds = %246, %245
  %248 = phi %struct.VkOffset3D* [ %12, %246 ], [ %11, %245 ]
  %249 = phi i8* [ %152, %246 ], [ %151, %245 ]
  %250 = call i8* @_ZNK2vk9ImageView16getOffsetPointerERK10VkOffset3D21VkImageAspectFlagBitsjjNS0_5UsageE(%"class.vk::ImageView"* %167, %struct.VkOffset3D* nonnull dereferenceable(12) %248, i32 %243, i32 %242, i32 0, i32 1) #6
  %251 = getelementptr inbounds %"struct.vk::SampledImageDescriptor", %"struct.vk::SampledImageDescriptor"* %142, i64 %159, i32 3, i32 0, i64 %236, i32 0
  store i8* %250, i8** %251, align 16
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %249) #8
  %252 = call i64 @_ZNK2vk9ImageView17getMipLevelExtentEj(%"class.vk::ImageView"* %167, i32 %242) #6
  %253 = trunc i64 %252 to i32
  %254 = lshr i64 %252, 32
  %255 = trunc i64 %254 to i32
  %256 = load i32, i32* %205, align 4
  %257 = call i32 @_ZNK2vk9ImageView20getDepthOrLayerCountEj(%"class.vk::ImageView"* %167, i32 %242) #6
  %258 = call i32 @_ZNK2vk6Format5bytesEv(%"class.vk::Format"* nonnull %7) #6
  %259 = call i32 @_ZNK2vk9ImageView13rowPitchBytesE21VkImageAspectFlagBitsjNS0_5UsageE(%"class.vk::ImageView"* %167, i32 %243, i32 %242, i32 1) #6
  %260 = sdiv i32 %259, %258
  %261 = icmp sgt i32 %256, 1
  br i1 %261, label %262, label %264

262:                                              ; preds = %247
  %263 = call i32 @_ZNK2vk9ImageView15layerPitchBytesE21VkImageAspectFlagBitsNS0_5UsageE(%"class.vk::ImageView"* %167, i32 %243, i32 1) #6
  br label %266

264:                                              ; preds = %247
  %265 = call i32 @_ZNK2vk9ImageView15slicePitchBytesE21VkImageAspectFlagBitsjNS0_5UsageE(%"class.vk::ImageView"* %167, i32 %243, i32 %242, i32 1) #6
  br label %266

266:                                              ; preds = %264, %262
  %267 = phi i32 [ %263, %262 ], [ %265, %264 ]
  %268 = sdiv i32 %267, %258
  %269 = call i32 @_ZNK2vk9ImageView15getMipLevelSizeE21VkImageAspectFlagBitsjNS0_5UsageE(%"class.vk::ImageView"* %167, i32 %243, i32 %242, i32 1) #6
  %270 = sdiv i32 %269, %258
  %271 = call i32 @_ZNK2vk9ImageView14getSampleCountEv(%"class.vk::ImageView"* %167) #7
  %272 = add nsw i32 %271, -1
  call void @_ZN2vk19DescriptorSetLayout21WriteTextureLevelInfoEPN2sw7TextureEiiiiiiii(%"struct.sw::Texture"* %169, i32 %241, i32 %253, i32 %255, i32 %257, i32 %260, i32 %268, i32 %270, i32 %272) #7
  %273 = add nuw nsw i64 %236, 1
  %274 = icmp eq i64 %273, 14
  br i1 %274, label %275, label %235

275:                                              ; preds = %266, %217
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %148) #8
  %276 = add nuw nsw i64 %159, 1
  %277 = load i32, i32* %23, align 8
  %278 = zext i32 %277 to i64
  %279 = icmp ult i64 %276, %278
  br i1 %279, label %158, label %439

280:                                              ; preds = %30, %30
  %281 = bitcast i8* %39 to %"struct.vk::StorageImageDescriptor"*
  %282 = load i32, i32* %23, align 8
  %283 = icmp eq i32 %282, 0
  br i1 %283, label %439, label %284

284:                                              ; preds = %280
  %285 = getelementptr inbounds %struct.VkDescriptorUpdateTemplateEntry, %struct.VkDescriptorUpdateTemplateEntry* %2, i64 0, i32 4
  %286 = getelementptr inbounds i8, i8* %3, i64 8
  %287 = getelementptr inbounds %struct.VkDescriptorUpdateTemplateEntry, %struct.VkDescriptorUpdateTemplateEntry* %2, i64 0, i32 5
  %288 = bitcast %"class.vk::Format"* %13 to i8*
  %289 = getelementptr inbounds %"class.vk::Format", %"class.vk::Format"* %13, i64 0, i32 0
  br label %290

290:                                              ; preds = %284, %350
  %291 = phi i64 [ 0, %284 ], [ %351, %350 ]
  %292 = load i64, i64* %285, align 8
  %293 = load i64, i64* %287, align 8
  %294 = mul i64 %293, %291
  %295 = getelementptr inbounds i8, i8* %286, i64 %292
  %296 = getelementptr inbounds i8, i8* %295, i64 %294
  %297 = bitcast i8* %296 to %"class.vk::ImageView"**
  %298 = load %"class.vk::ImageView"*, %"class.vk::ImageView"** %297, align 8
  %299 = call i64 @_ZNK2vk9ImageView17getMipLevelExtentEj(%"class.vk::ImageView"* %298, i32 0) #6
  %300 = trunc i64 %299 to i32
  %301 = lshr i64 %299, 32
  %302 = trunc i64 %301 to i32
  %303 = getelementptr inbounds %"class.vk::ImageView", %"class.vk::ImageView"* %298, i64 0, i32 4
  %304 = getelementptr inbounds %"class.vk::ImageView", %"class.vk::ImageView"* %298, i64 0, i32 4, i32 4
  %305 = load i32, i32* %304, align 4
  %306 = call i8* @_ZNK2vk9ImageView16getOffsetPointerERK10VkOffset3D21VkImageAspectFlagBitsjjNS0_5UsageE(%"class.vk::ImageView"* %298, %struct.VkOffset3D* nonnull dereferenceable(12) @.ref.tmp, i32 1, i32 0, i32 0, i32 0) #6
  %307 = getelementptr inbounds %"struct.vk::StorageImageDescriptor", %"struct.vk::StorageImageDescriptor"* %281, i64 %291, i32 0
  store i8* %306, i8** %307, align 16
  %308 = getelementptr inbounds %"struct.vk::StorageImageDescriptor", %"struct.vk::StorageImageDescriptor"* %281, i64 %291, i32 1
  store i32 %300, i32* %308, align 8
  %309 = getelementptr inbounds %"struct.vk::StorageImageDescriptor", %"struct.vk::StorageImageDescriptor"* %281, i64 %291, i32 2
  store i32 %302, i32* %309, align 4
  %310 = call i32 @_ZNK2vk9ImageView20getDepthOrLayerCountEj(%"class.vk::ImageView"* %298, i32 0) #6
  %311 = getelementptr inbounds %"struct.vk::StorageImageDescriptor", %"struct.vk::StorageImageDescriptor"* %281, i64 %291, i32 3
  store i32 %310, i32* %311, align 16
  %312 = call i32 @_ZNK2vk9ImageView13rowPitchBytesE21VkImageAspectFlagBitsjNS0_5UsageE(%"class.vk::ImageView"* %298, i32 1, i32 0, i32 0) #6
  %313 = getelementptr inbounds %"struct.vk::StorageImageDescriptor", %"struct.vk::StorageImageDescriptor"* %281, i64 %291, i32 4
  store i32 %312, i32* %313, align 4
  %314 = call i32 @_ZNK2vk9ImageView15slicePitchBytesE21VkImageAspectFlagBitsjNS0_5UsageE(%"class.vk::ImageView"* %298, i32 1, i32 0, i32 0) #6
  %315 = getelementptr inbounds %"struct.vk::StorageImageDescriptor", %"struct.vk::StorageImageDescriptor"* %281, i64 %291, i32 6
  store i32 %314, i32* %315, align 4
  %316 = icmp ugt i32 %305, 1
  br i1 %316, label %317, label %319

317:                                              ; preds = %290
  %318 = call i32 @_ZNK2vk9ImageView15layerPitchBytesE21VkImageAspectFlagBitsNS0_5UsageE(%"class.vk::ImageView"* %298, i32 1, i32 0) #6
  br label %321

319:                                              ; preds = %290
  %320 = call i32 @_ZNK2vk9ImageView15slicePitchBytesE21VkImageAspectFlagBitsjNS0_5UsageE(%"class.vk::ImageView"* %298, i32 1, i32 0, i32 0) #6
  br label %321

321:                                              ; preds = %319, %317
  %322 = phi i32 [ %318, %317 ], [ %320, %319 ]
  %323 = getelementptr inbounds %"struct.vk::StorageImageDescriptor", %"struct.vk::StorageImageDescriptor"* %281, i64 %291, i32 5
  store i32 %322, i32* %323, align 8
  %324 = call i32 @_ZNK2vk9ImageView14getSampleCountEv(%"class.vk::ImageView"* %298) #7
  %325 = getelementptr inbounds %"struct.vk::StorageImageDescriptor", %"struct.vk::StorageImageDescriptor"* %281, i64 %291, i32 7
  store i32 %324, i32* %325, align 16
  %326 = getelementptr inbounds %"class.vk::ImageView", %"class.vk::ImageView"* %298, i64 0, i32 0
  %327 = load %"class.vk::Image"*, %"class.vk::Image"** %326, align 8
  %328 = call i64 @_ZNK2vk5Image14getSizeInBytesERK23VkImageSubresourceRange(%"class.vk::Image"* %327, %struct.VkImageSubresourceRange* dereferenceable(20) %303) #6
  %329 = trunc i64 %328 to i32
  %330 = getelementptr inbounds %"struct.vk::StorageImageDescriptor", %"struct.vk::StorageImageDescriptor"* %281, i64 %291, i32 8
  store i32 %329, i32* %330, align 4
  %331 = getelementptr inbounds %"struct.vk::StorageImageDescriptor", %"struct.vk::StorageImageDescriptor"* %281, i64 %291, i32 13
  store %"class.vk::ImageView"* %298, %"class.vk::ImageView"** %331, align 16
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %288) #8
  %332 = call i32 @_ZNK2vk9ImageView9getFormatENS0_5UsageE(%"class.vk::ImageView"* %298, i32 0) #6
  store i32 %332, i32* %289, align 4
  %333 = call zeroext i1 @_ZNK2vk6Format9isStencilEv(%"class.vk::Format"* nonnull %13) #6
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %288) #8
  br i1 %333, label %334, label %350

334:                                              ; preds = %321
  %335 = call i8* @_ZNK2vk9ImageView16getOffsetPointerERK10VkOffset3D21VkImageAspectFlagBitsjjNS0_5UsageE(%"class.vk::ImageView"* %298, %struct.VkOffset3D* nonnull dereferenceable(12) @.ref.tmp.2, i32 4, i32 0, i32 0, i32 0) #6
  %336 = getelementptr inbounds %"struct.vk::StorageImageDescriptor", %"struct.vk::StorageImageDescriptor"* %281, i64 %291, i32 9
  store i8* %335, i8** %336, align 8
  %337 = call i32 @_ZNK2vk9ImageView13rowPitchBytesE21VkImageAspectFlagBitsjNS0_5UsageE(%"class.vk::ImageView"* %298, i32 4, i32 0, i32 0) #6
  %338 = getelementptr inbounds %"struct.vk::StorageImageDescriptor", %"struct.vk::StorageImageDescriptor"* %281, i64 %291, i32 10
  store i32 %337, i32* %338, align 16
  %339 = call i32 @_ZNK2vk9ImageView15slicePitchBytesE21VkImageAspectFlagBitsjNS0_5UsageE(%"class.vk::ImageView"* %298, i32 4, i32 0, i32 0) #6
  %340 = getelementptr inbounds %"struct.vk::StorageImageDescriptor", %"struct.vk::StorageImageDescriptor"* %281, i64 %291, i32 12
  store i32 %339, i32* %340, align 8
  %341 = load i32, i32* %304, align 4
  %342 = icmp ugt i32 %341, 1
  br i1 %342, label %343, label %345

343:                                              ; preds = %334
  %344 = call i32 @_ZNK2vk9ImageView15layerPitchBytesE21VkImageAspectFlagBitsNS0_5UsageE(%"class.vk::ImageView"* %298, i32 4, i32 0) #6
  br label %347

345:                                              ; preds = %334
  %346 = call i32 @_ZNK2vk9ImageView15slicePitchBytesE21VkImageAspectFlagBitsjNS0_5UsageE(%"class.vk::ImageView"* %298, i32 4, i32 0, i32 0) #6
  br label %347

347:                                              ; preds = %345, %343
  %348 = phi i32 [ %344, %343 ], [ %346, %345 ]
  %349 = getelementptr inbounds %"struct.vk::StorageImageDescriptor", %"struct.vk::StorageImageDescriptor"* %281, i64 %291, i32 11
  store i32 %348, i32* %349, align 4
  br label %350

350:                                              ; preds = %347, %321
  %351 = add nuw nsw i64 %291, 1
  %352 = load i32, i32* %23, align 8
  %353 = zext i32 %352 to i64
  %354 = icmp ult i64 %351, %353
  br i1 %354, label %290, label %439

355:                                              ; preds = %30
  %356 = bitcast i8* %39 to %"struct.vk::StorageImageDescriptor"*
  %357 = load i32, i32* %23, align 8
  %358 = icmp eq i32 %357, 0
  br i1 %358, label %439, label %359

359:                                              ; preds = %355
  %360 = getelementptr inbounds %struct.VkDescriptorUpdateTemplateEntry, %struct.VkDescriptorUpdateTemplateEntry* %2, i64 0, i32 4
  %361 = getelementptr inbounds %struct.VkDescriptorUpdateTemplateEntry, %struct.VkDescriptorUpdateTemplateEntry* %2, i64 0, i32 5
  %362 = bitcast %"class.vk::Format"* %6 to i8*
  %363 = getelementptr inbounds %"class.vk::Format", %"class.vk::Format"* %6, i64 0, i32 0
  br label %364

364:                                              ; preds = %359, %364
  %365 = phi i64 [ 0, %359 ], [ %391, %364 ]
  %366 = load i64, i64* %360, align 8
  %367 = getelementptr inbounds i8, i8* %3, i64 %366
  %368 = load i64, i64* %361, align 8
  %369 = mul i64 %368, %365
  %370 = getelementptr inbounds i8, i8* %367, i64 %369
  %371 = bitcast i8* %370 to %"class.vk::BufferView"**
  %372 = load %"class.vk::BufferView"*, %"class.vk::BufferView"** %371, align 8
  %373 = call i8* @_ZNK2vk10BufferView10getPointerEv(%"class.vk::BufferView"* %372) #6
  %374 = getelementptr inbounds %"struct.vk::StorageImageDescriptor", %"struct.vk::StorageImageDescriptor"* %356, i64 %365, i32 0
  store i8* %373, i8** %374, align 16
  %375 = getelementptr inbounds %"class.vk::BufferView", %"class.vk::BufferView"* %372, i64 0, i32 4
  %376 = load i64, i64* %375, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %362) #8
  %377 = getelementptr inbounds %"class.vk::BufferView", %"class.vk::BufferView"* %372, i64 0, i32 2
  %378 = load i32, i32* %377, align 8
  store i32 %378, i32* %363, align 4
  %379 = call i32 @_ZNK2vk6Format5bytesEv(%"class.vk::Format"* nonnull %6) #6
  %380 = sext i32 %379 to i64
  %381 = udiv i64 %376, %380
  %382 = trunc i64 %381 to i32
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %362) #8
  %383 = getelementptr inbounds %"struct.vk::StorageImageDescriptor", %"struct.vk::StorageImageDescriptor"* %356, i64 %365, i32 1
  store i32 %382, i32* %383, align 8
  %384 = getelementptr inbounds %"struct.vk::StorageImageDescriptor", %"struct.vk::StorageImageDescriptor"* %356, i64 %365, i32 2
  %385 = bitcast i32* %384 to <4 x i32>*
  store <4 x i32> <i32 1, i32 1, i32 0, i32 0>, <4 x i32>* %385, align 4
  %386 = getelementptr inbounds %"struct.vk::StorageImageDescriptor", %"struct.vk::StorageImageDescriptor"* %356, i64 %365, i32 6
  store i32 0, i32* %386, align 4
  %387 = getelementptr inbounds %"struct.vk::StorageImageDescriptor", %"struct.vk::StorageImageDescriptor"* %356, i64 %365, i32 7
  store i32 1, i32* %387, align 16
  %388 = load i64, i64* %375, align 8
  %389 = trunc i64 %388 to i32
  %390 = getelementptr inbounds %"struct.vk::StorageImageDescriptor", %"struct.vk::StorageImageDescriptor"* %356, i64 %365, i32 8
  store i32 %389, i32* %390, align 4
  %391 = add nuw nsw i64 %365, 1
  %392 = load i32, i32* %23, align 8
  %393 = zext i32 %392 to i64
  %394 = icmp ult i64 %391, %393
  br i1 %394, label %364, label %439

395:                                              ; preds = %30, %30, %30, %30
  %396 = bitcast i8* %39 to %"struct.vk::BufferDescriptor"*
  %397 = load i32, i32* %23, align 8
  %398 = icmp eq i32 %397, 0
  br i1 %398, label %439, label %399

399:                                              ; preds = %395
  %400 = getelementptr inbounds %struct.VkDescriptorUpdateTemplateEntry, %struct.VkDescriptorUpdateTemplateEntry* %2, i64 0, i32 4
  %401 = getelementptr inbounds %struct.VkDescriptorUpdateTemplateEntry, %struct.VkDescriptorUpdateTemplateEntry* %2, i64 0, i32 5
  br label %402

402:                                              ; preds = %399, %425
  %403 = phi i64 [ 0, %399 ], [ %435, %425 ]
  %404 = load i64, i64* %400, align 8
  %405 = getelementptr inbounds i8, i8* %3, i64 %404
  %406 = load i64, i64* %401, align 8
  %407 = mul i64 %406, %403
  %408 = getelementptr inbounds i8, i8* %405, i64 %407
  %409 = bitcast i8* %408 to %"class.vk::Buffer"**
  %410 = load %"class.vk::Buffer"*, %"class.vk::Buffer"** %409, align 8
  %411 = getelementptr inbounds i8, i8* %408, i64 8
  %412 = bitcast i8* %411 to i64*
  %413 = load i64, i64* %412, align 8
  %414 = tail call i8* @_ZNK2vk6Buffer16getOffsetPointerEm(%"class.vk::Buffer"* %410, i64 %413) #6
  %415 = getelementptr inbounds %"struct.vk::BufferDescriptor", %"struct.vk::BufferDescriptor"* %396, i64 %403, i32 0
  store i8* %414, i8** %415, align 16
  %416 = getelementptr inbounds i8, i8* %408, i64 16
  %417 = bitcast i8* %416 to i64*
  %418 = load i64, i64* %417, align 8
  %419 = icmp eq i64 %418, -1
  br i1 %419, label %420, label %425

420:                                              ; preds = %402
  %421 = getelementptr inbounds %"class.vk::Buffer", %"class.vk::Buffer"* %410, i64 0, i32 3
  %422 = load i64, i64* %421, align 8
  %423 = load i64, i64* %412, align 8
  %424 = sub i64 %422, %423
  br label %425

425:                                              ; preds = %402, %420
  %426 = phi i64 [ %424, %420 ], [ %418, %402 ]
  %427 = trunc i64 %426 to i32
  %428 = getelementptr inbounds %"struct.vk::BufferDescriptor", %"struct.vk::BufferDescriptor"* %396, i64 %403, i32 1
  store i32 %427, i32* %428, align 8
  %429 = getelementptr inbounds %"class.vk::Buffer", %"class.vk::Buffer"* %410, i64 0, i32 3
  %430 = load i64, i64* %429, align 8
  %431 = load i64, i64* %412, align 8
  %432 = sub i64 %430, %431
  %433 = trunc i64 %432 to i32
  %434 = getelementptr inbounds %"struct.vk::BufferDescriptor", %"struct.vk::BufferDescriptor"* %396, i64 %403, i32 2
  store i32 %433, i32* %434, align 4
  %435 = add nuw nsw i64 %403, 1
  %436 = load i32, i32* %23, align 8
  %437 = zext i32 %436 to i64
  %438 = icmp ult i64 %435, %437
  br i1 %438, label %402, label %439

439:                                              ; preds = %425, %364, %350, %275, %80, %65, %42, %71, %141, %280, %355, %395, %30
  ret void
}

; Function Attrs: optsize
declare i8* @_ZNK2vk10BufferView10getPointerEv(%"class.vk::BufferView"*) local_unnamed_addr #2

; Function Attrs: optsize
declare i32 @_ZNK2vk9ImageView9getFormatENS0_5UsageE(%"class.vk::ImageView"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare i64 @_ZNK2vk9ImageView17getMipLevelExtentEj(%"class.vk::ImageView"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare i32 @_ZNK2vk9ImageView20getDepthOrLayerCountEj(%"class.vk::ImageView"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define linkonce_odr hidden i32 @_ZNK2vk9ImageView14getSampleCountEv(%"class.vk::ImageView"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.vk::ImageView", %"class.vk::ImageView"* %0, i64 0, i32 0
  %3 = load %"class.vk::Image"*, %"class.vk::Image"** %2, align 8
  %4 = getelementptr inbounds %"class.vk::Image", %"class.vk::Image"* %3, i64 0, i32 9
  %5 = load i32, i32* %4, align 8
  switch i32 %5, label %7 [
    i32 1, label %8
    i32 4, label %6
  ]

6:                                                ; preds = %1
  br label %8

7:                                                ; preds = %1
  tail call void (i8*, ...) @_ZN2sw4warnEPKcz(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.5, i64 0, i64 0), i32 119, i32 %5) #6
  br label %8

8:                                                ; preds = %1, %7, %6
  %9 = phi i32 [ 1, %7 ], [ 4, %6 ], [ %5, %1 ]
  ret i32 %9
}

; Function Attrs: optsize
declare zeroext i1 @_ZNK2vk6Format13isYcbcrFormatEv(%"class.vk::Format"*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: optsize
declare i8* @_ZNK2vk9ImageView16getOffsetPointerERK10VkOffset3D21VkImageAspectFlagBitsjjNS0_5UsageE(%"class.vk::ImageView"*, %struct.VkOffset3D* dereferenceable(12), i32, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare i32 @_ZNK2vk6Format10getAspectsEv(%"class.vk::Format"*) local_unnamed_addr #2

; Function Attrs: optsize
declare i32 @_ZNK2vk9ImageView13rowPitchBytesE21VkImageAspectFlagBitsjNS0_5UsageE(%"class.vk::ImageView"*, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare i32 @_ZNK2vk6Format5bytesEv(%"class.vk::Format"*) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2vk19DescriptorSetLayout21WriteTextureLevelInfoEPN2sw7TextureEiiiiiiii(%"struct.sw::Texture"* nocapture, i32, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 align 2 {
  %10 = icmp eq i32 %1, 0
  br i1 %10, label %11, label %31

11:                                               ; preds = %9
  %12 = sitofp i32 %2 to float
  %13 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 1, i32 0, i32 0, i64 0
  store float %12, float* %13, align 4
  %14 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 1, i32 0, i32 0, i64 1
  store float %12, float* %14, align 4
  %15 = sitofp i32 %3 to float
  %16 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 1, i32 0, i32 0, i64 2
  store float %15, float* %16, align 4
  %17 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 1, i32 0, i32 0, i64 3
  store float %15, float* %17, align 4
  %18 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 2, i32 0, i32 0, i64 0
  %19 = insertelement <4 x float> undef, float %12, i32 0
  %20 = shufflevector <4 x float> %19, <4 x float> undef, <4 x i32> zeroinitializer
  %21 = bitcast float* %18 to <4 x float>*
  store <4 x float> %20, <4 x float>* %21, align 16
  %22 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 3, i32 0, i32 0, i64 0
  %23 = insertelement <4 x float> undef, float %15, i32 0
  %24 = shufflevector <4 x float> %23, <4 x float> undef, <4 x i32> zeroinitializer
  %25 = bitcast float* %22 to <4 x float>*
  store <4 x float> %24, <4 x float>* %25, align 16
  %26 = sitofp i32 %4 to float
  %27 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 4, i32 0, i32 0, i64 0
  %28 = insertelement <4 x float> undef, float %26, i32 0
  %29 = shufflevector <4 x float> %28, <4 x float> undef, <4 x i32> zeroinitializer
  %30 = bitcast float* %27 to <4 x float>*
  store <4 x float> %29, <4 x float>* %30, align 16
  br label %31

31:                                               ; preds = %11, %9
  %32 = sext i32 %1 to i64
  %33 = sdiv i32 32768, %2
  %34 = sdiv i32 32768, %3
  %35 = sdiv i32 32768, %4
  %36 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 0, i64 %32, i32 1
  %37 = bitcast %"struct.sw::vec"* %36 to i64*
  %38 = and i32 %33, 65535
  %39 = zext i32 %38 to i64
  %40 = shl nuw i64 %39, 48
  %41 = shl nuw nsw i64 %39, 32
  %42 = shl i32 %33, 16
  %43 = or i32 %38, %42
  %44 = zext i32 %43 to i64
  %45 = or i64 %41, %44
  %46 = or i64 %45, %40
  store i64 %46, i64* %37, align 8
  %47 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 0, i64 %32, i32 2
  %48 = bitcast %"struct.sw::vec"* %47 to i64*
  %49 = and i32 %34, 65535
  %50 = zext i32 %49 to i64
  %51 = shl nuw i64 %50, 48
  %52 = shl nuw nsw i64 %50, 32
  %53 = shl i32 %34, 16
  %54 = or i32 %49, %53
  %55 = zext i32 %54 to i64
  %56 = or i64 %52, %55
  %57 = or i64 %56, %51
  store i64 %57, i64* %48, align 16
  %58 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 0, i64 %32, i32 3
  %59 = bitcast %"struct.sw::vec"* %58 to i64*
  %60 = and i32 %35, 65535
  %61 = zext i32 %60 to i64
  %62 = shl nuw i64 %61, 48
  %63 = shl nuw nsw i64 %61, 32
  %64 = shl i32 %35, 16
  %65 = or i32 %60, %64
  %66 = zext i32 %65 to i64
  %67 = or i64 %63, %66
  %68 = or i64 %67, %62
  store i64 %68, i64* %59, align 8
  %69 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 0, i64 %32, i32 4, i32 0, i32 0, i64 0
  %70 = insertelement <4 x i32> undef, i32 %2, i32 0
  %71 = shufflevector <4 x i32> %70, <4 x i32> undef, <4 x i32> zeroinitializer
  %72 = bitcast i32* %69 to <4 x i32>*
  store <4 x i32> %71, <4 x i32>* %72, align 16
  %73 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 0, i64 %32, i32 5, i32 0, i32 0, i64 0
  %74 = insertelement <4 x i32> undef, i32 %3, i32 0
  %75 = shufflevector <4 x i32> %74, <4 x i32> undef, <4 x i32> zeroinitializer
  %76 = bitcast i32* %73 to <4 x i32>*
  store <4 x i32> %75, <4 x i32>* %76, align 16
  %77 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 0, i64 %32, i32 6, i32 0, i32 0, i64 0
  %78 = insertelement <4 x i32> undef, i32 %4, i32 0
  %79 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> zeroinitializer
  %80 = bitcast i32* %77 to <4 x i32>*
  store <4 x i32> %79, <4 x i32>* %80, align 16
  %81 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 0, i64 %32, i32 7, i32 0, i32 0, i64 0
  store i16 1, i16* %81, align 2
  %82 = trunc i32 %5 to i16
  %83 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 0, i64 %32, i32 7, i32 0, i32 0, i64 1
  store i16 %82, i16* %83, align 2
  %84 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 0, i64 %32, i32 7, i32 0, i32 0, i64 2
  store i16 1, i16* %84, align 2
  %85 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 0, i64 %32, i32 7, i32 0, i32 0, i64 3
  store i16 %82, i16* %85, align 2
  %86 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 0, i64 %32, i32 9, i32 0, i32 0, i64 0
  %87 = insertelement <4 x i32> undef, i32 %5, i32 0
  %88 = shufflevector <4 x i32> %87, <4 x i32> undef, <4 x i32> zeroinitializer
  %89 = bitcast i32* %86 to <4 x i32>*
  store <4 x i32> %88, <4 x i32>* %89, align 16
  %90 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 0, i64 %32, i32 10, i32 0, i32 0, i64 0
  %91 = insertelement <4 x i32> undef, i32 %6, i32 0
  %92 = shufflevector <4 x i32> %91, <4 x i32> undef, <4 x i32> zeroinitializer
  %93 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %92, <4 x i32>* %93, align 16
  %94 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 0, i64 %32, i32 11, i32 0, i32 0, i64 0
  %95 = insertelement <4 x i32> undef, i32 %7, i32 0
  %96 = shufflevector <4 x i32> %95, <4 x i32> undef, <4 x i32> zeroinitializer
  %97 = bitcast i32* %94 to <4 x i32>*
  store <4 x i32> %96, <4 x i32>* %97, align 16
  %98 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 0, i64 %32, i32 12, i32 0, i32 0, i64 0
  store i32 %8, i32* %98, align 16
  %99 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 0, i64 %32, i32 12, i32 0, i32 0, i64 1
  store i32 %8, i32* %99, align 4
  %100 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 0, i64 %32, i32 12, i32 0, i32 0, i64 2
  store i32 %8, i32* %100, align 8
  %101 = getelementptr inbounds %"struct.sw::Texture", %"struct.sw::Texture"* %0, i64 0, i32 0, i64 %32, i32 12, i32 0, i32 0, i64 3
  store i32 %8, i32* %101, align 4
  ret void
}

; Function Attrs: optsize
declare i32 @_ZNK2vk9ImageView15layerPitchBytesE21VkImageAspectFlagBitsNS0_5UsageE(%"class.vk::ImageView"*, i32, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare i32 @_ZNK2vk9ImageView15slicePitchBytesE21VkImageAspectFlagBitsjNS0_5UsageE(%"class.vk::ImageView"*, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare i32 @_ZNK2vk9ImageView15getMipLevelSizeE21VkImageAspectFlagBitsjNS0_5UsageE(%"class.vk::ImageView"*, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare zeroext i1 @_ZNK2vk6Format9isStencilEv(%"class.vk::Format"*) local_unnamed_addr #2

; Function Attrs: optsize
declare i8* @_ZNK2vk6Buffer16getOffsetPointerEm(%"class.vk::Buffer"*, i64) local_unnamed_addr #2

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2vk19DescriptorSetLayout18WriteDescriptorSetEPNS_6DeviceERK20VkWriteDescriptorSet(%"class.vk::Device"*, %struct.VkWriteDescriptorSet* nocapture readonly dereferenceable(64)) local_unnamed_addr #0 align 2 {
  %3 = alloca %struct.VkDescriptorUpdateTemplateEntry, align 16
  %4 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %1, i64 0, i32 2, i32 0
  %5 = bitcast i64* %4 to %"class.vk::DescriptorSet"**
  %6 = load %"class.vk::DescriptorSet"*, %"class.vk::DescriptorSet"** %5, align 8
  %7 = bitcast %struct.VkDescriptorUpdateTemplateEntry* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %7) #8
  %8 = getelementptr inbounds %struct.VkDescriptorUpdateTemplateEntry, %struct.VkDescriptorUpdateTemplateEntry* %3, i64 0, i32 4
  %9 = getelementptr inbounds %struct.VkDescriptorUpdateTemplateEntry, %struct.VkDescriptorUpdateTemplateEntry* %3, i64 0, i32 5
  %10 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %1, i64 0, i32 3
  %11 = bitcast i32* %10 to <4 x i32>*
  %12 = load <4 x i32>, <4 x i32>* %11, align 8
  %13 = bitcast %struct.VkDescriptorUpdateTemplateEntry* %3 to <4 x i32>*
  store <4 x i32> %12, <4 x i32>* %13, align 16
  %14 = bitcast i64* %8 to <2 x i64>*
  store <2 x i64> <i64 0, i64 -6148914691236517206>, <2 x i64>* %14, align 16
  %15 = extractelement <4 x i32> %12, i32 3
  switch i32 %15, label %28 [
    i32 5, label %16
    i32 4, label %16
    i32 0, label %20
    i32 1, label %20
    i32 2, label %20
    i32 10, label %20
    i32 3, label %20
    i32 6, label %24
    i32 7, label %24
    i32 8, label %24
    i32 9, label %24
  ]

16:                                               ; preds = %2, %2
  %17 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %1, i64 0, i32 9
  %18 = bitcast %class.VkNonDispatchableHandle.6** %17 to i8**
  %19 = load i8*, i8** %18, align 8
  store i64 8, i64* %9, align 8
  br label %29

20:                                               ; preds = %2, %2, %2, %2, %2
  %21 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %1, i64 0, i32 7
  %22 = bitcast %struct.VkDescriptorImageInfo** %21 to i8**
  %23 = load i8*, i8** %22, align 8
  store i64 24, i64* %9, align 8
  br label %29

24:                                               ; preds = %2, %2, %2, %2
  %25 = getelementptr inbounds %struct.VkWriteDescriptorSet, %struct.VkWriteDescriptorSet* %1, i64 0, i32 8
  %26 = bitcast %struct.VkDescriptorBufferInfo** %25 to i8**
  %27 = load i8*, i8** %26, align 8
  store i64 24, i64* %9, align 8
  br label %29

28:                                               ; preds = %2
  tail call void (i8*, ...) @_ZN2sw4warnEPKcz(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i64 0, i64 0), i32 564, i32 %15) #6
  br label %29

29:                                               ; preds = %28, %24, %20, %16
  %30 = phi i8* [ null, %28 ], [ %27, %24 ], [ %23, %20 ], [ %19, %16 ]
  call void @_ZN2vk19DescriptorSetLayout18WriteDescriptorSetEPNS_6DeviceEPNS_13DescriptorSetERK31VkDescriptorUpdateTemplateEntryPKc(%"class.vk::Device"* %0, %"class.vk::DescriptorSet"* %6, %struct.VkDescriptorUpdateTemplateEntry* nonnull dereferenceable(32) %3, i8* %30) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %7) #8
  ret void
}

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_ZN2vk19DescriptorSetLayout17CopyDescriptorSetERK19VkCopyDescriptorSet(%struct.VkCopyDescriptorSet* nocapture readonly dereferenceable(56)) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %struct.VkCopyDescriptorSet, %struct.VkCopyDescriptorSet* %0, i64 0, i32 2, i32 0
  %3 = bitcast i64* %2 to %"class.vk::DescriptorSet"**
  %4 = load %"class.vk::DescriptorSet"*, %"class.vk::DescriptorSet"** %3, align 8
  %5 = getelementptr inbounds %"class.vk::DescriptorSet", %"class.vk::DescriptorSet"* %4, i64 0, i32 0, i32 0
  %6 = load %"class.vk::DescriptorSetLayout"*, %"class.vk::DescriptorSetLayout"** %5, align 16
  %7 = getelementptr inbounds %struct.VkCopyDescriptorSet, %struct.VkCopyDescriptorSet* %0, i64 0, i32 5, i32 0
  %8 = bitcast i64* %7 to %"class.vk::DescriptorSet"**
  %9 = load %"class.vk::DescriptorSet"*, %"class.vk::DescriptorSet"** %8, align 8
  %10 = getelementptr inbounds %"class.vk::DescriptorSet", %"class.vk::DescriptorSet"* %9, i64 0, i32 0, i32 0
  %11 = load %"class.vk::DescriptorSetLayout"*, %"class.vk::DescriptorSetLayout"** %10, align 16
  %12 = getelementptr inbounds %struct.VkCopyDescriptorSet, %struct.VkCopyDescriptorSet* %0, i64 0, i32 3
  %13 = load i32, i32* %12, align 8
  %14 = getelementptr inbounds %struct.VkCopyDescriptorSet, %struct.VkCopyDescriptorSet* %0, i64 0, i32 4
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.VkCopyDescriptorSet, %struct.VkCopyDescriptorSet* %0, i64 0, i32 8
  %17 = getelementptr inbounds %"class.vk::DescriptorSetLayout", %"class.vk::DescriptorSetLayout"* %6, i64 0, i32 2
  %18 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %17, align 8
  %19 = zext i32 %13 to i64
  %20 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %18, i64 %19, i32 0
  %21 = load i32, i32* %20, align 8
  switch i32 %21, label %24 [
    i32 0, label %26
    i32 1, label %26
    i32 2, label %26
    i32 4, label %26
    i32 3, label %22
    i32 5, label %22
    i32 10, label %22
    i32 6, label %23
    i32 7, label %23
    i32 8, label %23
    i32 9, label %23
  ]

22:                                               ; preds = %1, %1, %1
  br label %26

23:                                               ; preds = %1, %1, %1, %1
  br label %26

24:                                               ; preds = %1
  tail call void (i8*, ...) @_ZN2sw4warnEPKcz(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i64 0, i64 0), i32 133, i32 %21) #6
  %25 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %17, align 8
  br label %26

26:                                               ; preds = %1, %1, %1, %1, %22, %23, %24
  %27 = phi %"struct.vk::DescriptorSetLayout::Binding"* [ %25, %24 ], [ %18, %23 ], [ %18, %22 ], [ %18, %1 ], [ %18, %1 ], [ %18, %1 ], [ %18, %1 ]
  %28 = phi i64 [ 0, %24 ], [ 16, %23 ], [ 80, %22 ], [ 2368, %1 ], [ 2368, %1 ], [ 2368, %1 ], [ 2368, %1 ]
  %29 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %27, i64 %19, i32 3
  %30 = load i32, i32* %29, align 8
  %31 = zext i32 %30 to i64
  %32 = zext i32 %15 to i64
  %33 = mul nuw nsw i64 %28, %32
  %34 = add nuw nsw i64 %33, %31
  %35 = getelementptr inbounds %"class.vk::DescriptorSet", %"class.vk::DescriptorSet"* %4, i64 0, i32 1, i64 %34
  %36 = getelementptr inbounds %struct.VkCopyDescriptorSet, %struct.VkCopyDescriptorSet* %0, i64 0, i32 6
  %37 = load i32, i32* %36, align 8
  %38 = getelementptr inbounds %struct.VkCopyDescriptorSet, %struct.VkCopyDescriptorSet* %0, i64 0, i32 7
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds %"class.vk::DescriptorSetLayout", %"class.vk::DescriptorSetLayout"* %11, i64 0, i32 2
  %41 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %40, align 8
  %42 = zext i32 %37 to i64
  %43 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %41, i64 %42, i32 0
  %44 = load i32, i32* %43, align 8
  switch i32 %44, label %47 [
    i32 0, label %49
    i32 1, label %49
    i32 2, label %49
    i32 4, label %49
    i32 3, label %45
    i32 5, label %45
    i32 10, label %45
    i32 6, label %46
    i32 7, label %46
    i32 8, label %46
    i32 9, label %46
  ]

45:                                               ; preds = %26, %26, %26
  br label %49

46:                                               ; preds = %26, %26, %26, %26
  br label %49

47:                                               ; preds = %26
  tail call void (i8*, ...) @_ZN2sw4warnEPKcz(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i64 0, i64 0), i32 133, i32 %44) #6
  %48 = load %"struct.vk::DescriptorSetLayout::Binding"*, %"struct.vk::DescriptorSetLayout::Binding"** %40, align 8
  br label %49

49:                                               ; preds = %26, %26, %26, %26, %45, %46, %47
  %50 = phi %"struct.vk::DescriptorSetLayout::Binding"* [ %48, %47 ], [ %41, %46 ], [ %41, %45 ], [ %41, %26 ], [ %41, %26 ], [ %41, %26 ], [ %41, %26 ]
  %51 = phi i64 [ 0, %47 ], [ 16, %46 ], [ 80, %45 ], [ 2368, %26 ], [ 2368, %26 ], [ 2368, %26 ], [ 2368, %26 ]
  %52 = getelementptr inbounds %"struct.vk::DescriptorSetLayout::Binding", %"struct.vk::DescriptorSetLayout::Binding"* %50, i64 %42, i32 3
  %53 = load i32, i32* %52, align 8
  %54 = zext i32 %53 to i64
  %55 = zext i32 %39 to i64
  %56 = mul nuw nsw i64 %51, %55
  %57 = add nuw nsw i64 %56, %54
  %58 = getelementptr inbounds %"class.vk::DescriptorSet", %"class.vk::DescriptorSet"* %9, i64 0, i32 1, i64 %57
  %59 = load i32, i32* %16, align 8
  %60 = zext i32 %59 to i64
  %61 = mul nuw nsw i64 %51, %60
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 1 %35, i64 %61, i1 false)
  ret void
}

; Function Attrs: optsize
declare i32 @_ZNK2vk5Image9getFormatE21VkImageAspectFlagBits(%"class.vk::Image"*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare i64 @_ZNK2vk5Image14getSizeInBytesERK23VkImageSubresourceRange(%"class.vk::Image"*, %struct.VkImageSubresourceRange* dereferenceable(20)) local_unnamed_addr #2

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind optsize readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind optsize readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind optsize readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind optsize }
attributes #7 = { optsize }
attributes #8 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
