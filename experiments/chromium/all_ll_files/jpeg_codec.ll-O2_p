; ModuleID = '../../ui/gfx/codec/jpeg_codec.cc'
source_filename = "../../ui/gfx/codec/jpeg_codec.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.SkPixmap = type { i8*, i64, %struct.SkImageInfo }
%struct.SkImageInfo = type { %class.SkColorInfo, %struct.SkISize }
%class.SkColorInfo = type { %class.sk_sp, i32, i32 }
%class.sk_sp = type { %class.SkColorSpace* }
%class.SkColorSpace = type <{ %class.SkNVRefCnt, i32, i32, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %struct.skcms_TransferFunction, %struct.skcms_Matrix3x3, %class.SkOnce, [3 x i8] }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%struct.skcms_TransferFunction = type { float, float, float, float, float, float, float }
%struct.skcms_Matrix3x3 = type { [3 x [3 x float]] }
%class.SkOnce = type { %"struct.std::__1::atomic.1" }
%"struct.std::__1::atomic.1" = type { %"struct.std::__1::__atomic_base.2" }
%"struct.std::__1::__atomic_base.2" = type { %"struct.std::__1::__atomic_base.3" }
%"struct.std::__1::__atomic_base.3" = type { %"struct.std::__1::__cxx_atomic_impl.4" }
%"struct.std::__1::__cxx_atomic_impl.4" = type { %"struct.std::__1::__cxx_atomic_base_impl.5" }
%"struct.std::__1::__cxx_atomic_base_impl.5" = type { i8 }
%struct.SkISize = type { i32, i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { i8*, i8*, %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.gfx::VectorWStream" = type { %class.SkWStream, %"class.std::__1::vector"* }
%class.SkWStream = type { i32 (...)** }
%"struct.SkJpegEncoder::Options" = type { i32, i32, i32 }
%class.SkBitmap = type { %class.sk_sp.7, %class.SkPixmap, %class.sk_sp.8 }
%class.sk_sp.7 = type { %class.SkPixelRef* }
%class.SkPixelRef = type opaque
%class.sk_sp.8 = type { %class.SkMipmap* }
%class.SkMipmap = type opaque
%"struct.gfx::(anonymous namespace)::CoderErrorMgr" = type { %struct.jpeg_error_mgr, [1 x %struct.__jmp_buf_tag] }
%struct.jpeg_error_mgr = type { void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i32)*, void (%struct.jpeg_common_struct*)*, void (%struct.jpeg_common_struct*, i8*)*, void (%struct.jpeg_common_struct*)*, i32, %union.anon, i32, i64, i8**, i32, i8**, i32, i32 }
%struct.jpeg_common_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32 }
%struct.jpeg_memory_mgr = type { i8* (%struct.jpeg_common_struct*, i32, i64)*, i8* (%struct.jpeg_common_struct*, i32, i64)*, i8** (%struct.jpeg_common_struct*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, i32, i32, i32)*, %struct.jvirt_sarray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, %struct.jvirt_barray_control* (%struct.jpeg_common_struct*, i32, i32, i32, i32, i32)*, {}*, i8** (%struct.jpeg_common_struct*, %struct.jvirt_sarray_control*, i32, i32, i32)*, [64 x i16]** (%struct.jpeg_common_struct*, %struct.jvirt_barray_control*, i32, i32, i32)*, void (%struct.jpeg_common_struct*, i32)*, {}*, i64, i64 }
%struct.jvirt_sarray_control = type opaque
%struct.jvirt_barray_control = type opaque
%struct.jpeg_progress_mgr = type { {}*, i64, i64, i32, i32 }
%union.anon = type { [8 x i32], [48 x i8] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.jpeg_source_mgr = type { i8*, i64, void (%struct.jpeg_decompress_struct*)*, i32 (%struct.jpeg_decompress_struct*)*, void (%struct.jpeg_decompress_struct*, i64)*, i32 (%struct.jpeg_decompress_struct*, i32)*, void (%struct.jpeg_decompress_struct*)* }
%struct.jpeg_decompress_struct = type { %struct.jpeg_error_mgr*, %struct.jpeg_memory_mgr*, %struct.jpeg_progress_mgr*, i8*, i32, i32, %struct.jpeg_source_mgr*, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8**, i32, i32, i32, i32, i32, [64 x i32]*, [4 x %struct.JQUANT_TBL*], [4 x %struct.JHUFF_TBL*], [4 x %struct.JHUFF_TBL*], i32, %struct.jpeg_component_info*, i32, i32, [16 x i8], [16 x i8], [16 x i8], i32, i32, i8, i8, i8, i16, i16, i32, i8, i32, %struct.jpeg_marker_struct*, i32, i32, i32, i32, i8*, i32, [4 x %struct.jpeg_component_info*], i32, i32, i32, [10 x i32], i32, i32, i32, i32, i32, %struct.jpeg_decomp_master*, %struct.jpeg_d_main_controller*, %struct.jpeg_d_coef_controller*, %struct.jpeg_d_post_controller*, %struct.jpeg_input_controller*, %struct.jpeg_marker_reader*, %struct.jpeg_entropy_decoder*, %struct.jpeg_inverse_dct*, %struct.jpeg_upsampler*, %struct.jpeg_color_deconverter*, %struct.jpeg_color_quantizer* }
%struct.JQUANT_TBL = type { [64 x i16], i32 }
%struct.JHUFF_TBL = type { [17 x i8], [256 x i8], i32 }
%struct.jpeg_component_info = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.JQUANT_TBL*, i8* }
%struct.jpeg_marker_struct = type { %struct.jpeg_marker_struct*, i8, i32, i32, i8* }
%struct.jpeg_decomp_master = type opaque
%struct.jpeg_d_main_controller = type opaque
%struct.jpeg_d_coef_controller = type opaque
%struct.jpeg_d_post_controller = type opaque
%struct.jpeg_input_controller = type opaque
%struct.jpeg_marker_reader = type opaque
%struct.jpeg_entropy_decoder = type opaque
%struct.jpeg_inverse_dct = type opaque
%struct.jpeg_upsampler = type opaque
%struct.jpeg_color_deconverter = type opaque
%struct.jpeg_color_quantizer = type opaque
%"struct.gfx::(anonymous namespace)::JpegDecoderState" = type { i8*, i64 }
%"class.std::__1::__vector_base_common" = type { i8 }

$_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm = comdat any

@_ZTVN3gfx13VectorWStreamE = external unnamed_addr constant { [7 x i8*] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3gfx9JPEGCodec6EncodeERK8SkPixmapiN13SkJpegEncoder10DownsampleEPNSt3__16vectorIhNS6_9allocatorIhEEEE(%class.SkPixmap* dereferenceable(40), i32, i32, %"class.std::__1::vector"*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.gfx::VectorWStream", align 8
  %6 = alloca %"struct.SkJpegEncoder::Options", align 4
  %7 = bitcast %"class.std::__1::vector"* %3 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %10 = bitcast i8** %9 to i64*
  store i64 %8, i64* %10, align 8
  %11 = bitcast %"class.gfx::VectorWStream"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #12
  %12 = getelementptr inbounds %"class.gfx::VectorWStream", %"class.gfx::VectorWStream"* %5, i64 0, i32 0, i32 0
  %13 = getelementptr inbounds %"class.gfx::VectorWStream", %"class.gfx::VectorWStream"* %5, i64 0, i32 1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3gfx13VectorWStreamE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %12, align 8
  store %"class.std::__1::vector"* %3, %"class.std::__1::vector"** %13, align 8
  %14 = bitcast %"struct.SkJpegEncoder::Options"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %14) #12
  %15 = getelementptr inbounds %"struct.SkJpegEncoder::Options", %"struct.SkJpegEncoder::Options"* %6, i64 0, i32 0
  %16 = getelementptr inbounds %"struct.SkJpegEncoder::Options", %"struct.SkJpegEncoder::Options"* %6, i64 0, i32 1
  %17 = getelementptr inbounds %"struct.SkJpegEncoder::Options", %"struct.SkJpegEncoder::Options"* %6, i64 0, i32 2
  store i32 0, i32* %17, align 4
  store i32 %1, i32* %15, align 4
  store i32 %2, i32* %16, align 4
  %18 = getelementptr inbounds %"class.gfx::VectorWStream", %"class.gfx::VectorWStream"* %5, i64 0, i32 0
  %19 = call zeroext i1 @_ZN13SkJpegEncoder6EncodeEP9SkWStreamRK8SkPixmapRKNS_7OptionsE(%class.SkWStream* nonnull %18, %class.SkPixmap* dereferenceable(40) %0, %"struct.SkJpegEncoder::Options"* nonnull dereferenceable(12) %6) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %14) #12
  call void @_ZN9SkWStreamD2Ev(%class.SkWStream* nonnull %18) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #12
  ret i1 %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare zeroext i1 @_ZN13SkJpegEncoder6EncodeEP9SkWStreamRK8SkPixmapRKNS_7OptionsE(%class.SkWStream*, %class.SkPixmap* dereferenceable(40), %"struct.SkJpegEncoder::Options"* dereferenceable(12)) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind
declare void @_ZN9SkWStreamD2Ev(%class.SkWStream*) unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3gfx9JPEGCodec6EncodeERK8SkPixmapiPNSt3__16vectorIhNS4_9allocatorIhEEEE(%class.SkPixmap* dereferenceable(40), i32, %"class.std::__1::vector"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.gfx::VectorWStream", align 8
  %5 = alloca %"struct.SkJpegEncoder::Options", align 4
  %6 = bitcast %"class.std::__1::vector"* %2 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %9 = bitcast i8** %8 to i64*
  store i64 %7, i64* %9, align 8
  %10 = bitcast %"class.gfx::VectorWStream"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #12
  %11 = getelementptr inbounds %"class.gfx::VectorWStream", %"class.gfx::VectorWStream"* %4, i64 0, i32 0, i32 0
  %12 = getelementptr inbounds %"class.gfx::VectorWStream", %"class.gfx::VectorWStream"* %4, i64 0, i32 1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3gfx13VectorWStreamE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %11, align 8
  store %"class.std::__1::vector"* %2, %"class.std::__1::vector"** %12, align 8
  %13 = bitcast %"struct.SkJpegEncoder::Options"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %13) #12
  %14 = getelementptr inbounds %"struct.SkJpegEncoder::Options", %"struct.SkJpegEncoder::Options"* %5, i64 0, i32 0
  %15 = getelementptr inbounds %"struct.SkJpegEncoder::Options", %"struct.SkJpegEncoder::Options"* %5, i64 0, i32 1
  %16 = getelementptr inbounds %"struct.SkJpegEncoder::Options", %"struct.SkJpegEncoder::Options"* %5, i64 0, i32 2
  store i32 0, i32* %16, align 4
  store i32 %1, i32* %14, align 4
  store i32 0, i32* %15, align 4
  %17 = getelementptr inbounds %"class.gfx::VectorWStream", %"class.gfx::VectorWStream"* %4, i64 0, i32 0
  %18 = call zeroext i1 @_ZN13SkJpegEncoder6EncodeEP9SkWStreamRK8SkPixmapRKNS_7OptionsE(%class.SkWStream* nonnull %17, %class.SkPixmap* dereferenceable(40) %0, %"struct.SkJpegEncoder::Options"* nonnull dereferenceable(12) %5) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %13) #12
  call void @_ZN9SkWStreamD2Ev(%class.SkWStream* nonnull %17) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #12
  ret i1 %18
}

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3gfx9JPEGCodec6EncodeERK8SkBitmapiPNSt3__16vectorIhNS4_9allocatorIhEEEE(%class.SkBitmap* dereferenceable(56), i32, %"class.std::__1::vector"*) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.gfx::VectorWStream", align 8
  %5 = alloca %"struct.SkJpegEncoder::Options", align 4
  %6 = alloca %class.SkPixmap, align 8
  %7 = bitcast %class.SkPixmap* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %7) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %7, i8 0, i64 40, i1 false) #12
  %8 = call zeroext i1 @_ZNK8SkBitmap10peekPixelsEP8SkPixmap(%class.SkBitmap* %0, %class.SkPixmap* nonnull %6) #12
  br i1 %8, label %9, label %23

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::vector"* %2 to i64*
  %11 = load i64, i64* %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %13 = bitcast i8** %12 to i64*
  store i64 %11, i64* %13, align 8
  %14 = bitcast %"class.gfx::VectorWStream"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #12
  %15 = getelementptr inbounds %"class.gfx::VectorWStream", %"class.gfx::VectorWStream"* %4, i64 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.gfx::VectorWStream", %"class.gfx::VectorWStream"* %4, i64 0, i32 1
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3gfx13VectorWStreamE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %15, align 8
  store %"class.std::__1::vector"* %2, %"class.std::__1::vector"** %16, align 8
  %17 = bitcast %"struct.SkJpegEncoder::Options"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %17) #12
  %18 = getelementptr inbounds %"struct.SkJpegEncoder::Options", %"struct.SkJpegEncoder::Options"* %5, i64 0, i32 0
  %19 = getelementptr inbounds %"struct.SkJpegEncoder::Options", %"struct.SkJpegEncoder::Options"* %5, i64 0, i32 1
  %20 = getelementptr inbounds %"struct.SkJpegEncoder::Options", %"struct.SkJpegEncoder::Options"* %5, i64 0, i32 2
  store i32 0, i32* %20, align 4
  store i32 %1, i32* %18, align 4
  store i32 0, i32* %19, align 4
  %21 = getelementptr inbounds %"class.gfx::VectorWStream", %"class.gfx::VectorWStream"* %4, i64 0, i32 0
  %22 = call zeroext i1 @_ZN13SkJpegEncoder6EncodeEP9SkWStreamRK8SkPixmapRKNS_7OptionsE(%class.SkWStream* nonnull %21, %class.SkPixmap* nonnull dereferenceable(40) %6, %"struct.SkJpegEncoder::Options"* nonnull dereferenceable(12) %5) #12
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %17) #12
  call void @_ZN9SkWStreamD2Ev(%class.SkWStream* nonnull %21) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #12
  br label %23

23:                                               ; preds = %3, %9
  %24 = phi i1 [ %22, %9 ], [ false, %3 ]
  %25 = getelementptr inbounds %class.SkPixmap, %class.SkPixmap* %6, i64 0, i32 2, i32 0, i32 0, i32 0
  %26 = load %class.SkColorSpace*, %class.SkColorSpace** %25, align 8
  %27 = icmp eq %class.SkColorSpace* %26, null
  br i1 %27, label %34, label %28

28:                                               ; preds = %23
  %29 = getelementptr inbounds %class.SkColorSpace, %class.SkColorSpace* %26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %30 = atomicrmw add i32* %29, i32 -1 acq_rel
  %31 = icmp eq i32 %30, 1
  br i1 %31, label %32, label %34

32:                                               ; preds = %28
  %33 = bitcast %class.SkColorSpace* %26 to i8*
  call void @_ZdlPv(i8* %33) #13
  br label %34

34:                                               ; preds = %23, %28, %32
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %7) #12
  ret i1 %24
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare zeroext i1 @_ZNK8SkBitmap10peekPixelsEP8SkPixmap(%class.SkBitmap*, %class.SkPixmap*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3gfx9JPEGCodec6DecodeEPKhmNS0_11ColorFormatEPNSt3__16vectorIhNS4_9allocatorIhEEEEPiSA_(i8*, i64, i32, %"class.std::__1::vector"*, i32* nocapture, i32* nocapture) local_unnamed_addr #0 align 2 {
  %7 = alloca %"struct.gfx::(anonymous namespace)::CoderErrorMgr", align 8
  %8 = alloca %struct.jpeg_source_mgr, align 8
  %9 = alloca %"struct.gfx::(anonymous namespace)::JpegDecoderState", align 8
  %10 = alloca i8*, align 8
  %11 = call i8* @_Znwm(i64 632) #13
  %12 = bitcast i8* %11 to %struct.jpeg_decompress_struct*
  %13 = bitcast %"class.std::__1::vector"* %3 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 1
  %16 = bitcast i8** %15 to i64*
  store i64 %14, i64* %16, align 8
  %17 = bitcast %"struct.gfx::(anonymous namespace)::CoderErrorMgr"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 368, i8* nonnull %17) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %17, i8 -86, i64 368, i1 false)
  %18 = getelementptr inbounds %"struct.gfx::(anonymous namespace)::CoderErrorMgr", %"struct.gfx::(anonymous namespace)::CoderErrorMgr"* %7, i64 0, i32 0
  %19 = call %struct.jpeg_error_mgr* @jpeg_std_error(%struct.jpeg_error_mgr* nonnull %18) #12
  %20 = bitcast i8* %11 to %struct.jpeg_error_mgr**
  store %struct.jpeg_error_mgr* %19, %struct.jpeg_error_mgr** %20, align 8
  %21 = getelementptr inbounds %"struct.gfx::(anonymous namespace)::CoderErrorMgr", %"struct.gfx::(anonymous namespace)::CoderErrorMgr"* %7, i64 0, i32 0, i32 0
  store void (%struct.jpeg_common_struct*)* @_ZN3gfx12_GLOBAL__N_19ErrorExitEP18jpeg_common_struct, void (%struct.jpeg_common_struct*)** %21, align 8
  %22 = getelementptr inbounds %"struct.gfx::(anonymous namespace)::CoderErrorMgr", %"struct.gfx::(anonymous namespace)::CoderErrorMgr"* %7, i64 0, i32 1, i64 0
  %23 = call i32 @_setjmp(%struct.__jmp_buf_tag* %22) #14
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %26, label %25

25:                                               ; preds = %6
  call void @jpeg_destroy_decompress(%struct.jpeg_decompress_struct* nonnull %12) #12
  call void @_ZdlPv(i8* nonnull %11) #13
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %17) #12
  br label %107

26:                                               ; preds = %6
  call void @jpeg_CreateDecompress(%struct.jpeg_decompress_struct* nonnull %12, i32 62, i64 632) #12
  %27 = bitcast %struct.jpeg_source_mgr* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %27) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %27, i8 -86, i64 16, i1 false)
  %28 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %8, i64 0, i32 2
  store void (%struct.jpeg_decompress_struct*)* @_ZN3gfx12_GLOBAL__N_110InitSourceEP22jpeg_decompress_struct, void (%struct.jpeg_decompress_struct*)** %28, align 8
  %29 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %8, i64 0, i32 3
  store i32 (%struct.jpeg_decompress_struct*)* @_ZN3gfx12_GLOBAL__N_115FillInputBufferEP22jpeg_decompress_struct, i32 (%struct.jpeg_decompress_struct*)** %29, align 8
  %30 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %8, i64 0, i32 4
  store void (%struct.jpeg_decompress_struct*, i64)* @_ZN3gfx12_GLOBAL__N_113SkipInputDataEP22jpeg_decompress_structl, void (%struct.jpeg_decompress_struct*, i64)** %30, align 8
  %31 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %8, i64 0, i32 5
  store i32 (%struct.jpeg_decompress_struct*, i32)* @jpeg_resync_to_restart, i32 (%struct.jpeg_decompress_struct*, i32)** %31, align 8
  %32 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %8, i64 0, i32 6
  store void (%struct.jpeg_decompress_struct*)* @_ZN3gfx12_GLOBAL__N_110TermSourceEP22jpeg_decompress_struct, void (%struct.jpeg_decompress_struct*)** %32, align 8
  %33 = getelementptr inbounds i8, i8* %11, i64 40
  %34 = bitcast i8* %33 to %struct.jpeg_source_mgr**
  store %struct.jpeg_source_mgr* %8, %struct.jpeg_source_mgr** %34, align 8
  %35 = bitcast %"struct.gfx::(anonymous namespace)::JpegDecoderState"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %35) #12
  %36 = getelementptr inbounds %"struct.gfx::(anonymous namespace)::JpegDecoderState", %"struct.gfx::(anonymous namespace)::JpegDecoderState"* %9, i64 0, i32 0
  %37 = getelementptr inbounds %"struct.gfx::(anonymous namespace)::JpegDecoderState", %"struct.gfx::(anonymous namespace)::JpegDecoderState"* %9, i64 0, i32 1
  store i8* %0, i8** %36, align 8
  store i64 %1, i64* %37, align 8
  %38 = getelementptr inbounds i8, i8* %11, i64 24
  %39 = bitcast i8* %38 to %"struct.gfx::(anonymous namespace)::JpegDecoderState"**
  store %"struct.gfx::(anonymous namespace)::JpegDecoderState"* %9, %"struct.gfx::(anonymous namespace)::JpegDecoderState"** %39, align 8
  %40 = call i32 @jpeg_read_header(%struct.jpeg_decompress_struct* nonnull %12, i32 1) #12
  %41 = icmp eq i32 %40, 1
  br i1 %41, label %42, label %105

42:                                               ; preds = %26
  %43 = getelementptr inbounds i8, i8* %11, i64 60
  %44 = bitcast i8* %43 to i32*
  %45 = load i32, i32* %44, align 4
  %46 = add i32 %45, -1
  %47 = icmp ult i32 %46, 3
  br i1 %47, label %48, label %105

48:                                               ; preds = %42
  %49 = icmp eq i32 %2, 0
  br i1 %49, label %53, label %50

50:                                               ; preds = %48
  %51 = add i32 %2, -1
  %52 = icmp ult i32 %51, 2
  br i1 %52, label %53, label %105

53:                                               ; preds = %50, %48
  %54 = phi i32 [ 7, %48 ], [ 9, %50 ]
  %55 = getelementptr inbounds i8, i8* %11, i64 64
  %56 = bitcast i8* %55 to i32*
  store i32 %54, i32* %56, align 8
  %57 = getelementptr inbounds i8, i8* %11, i64 148
  %58 = bitcast i8* %57 to i32*
  store i32 4, i32* %58, align 4
  call void @jpeg_calc_output_dimensions(%struct.jpeg_decompress_struct* nonnull %12) #12
  %59 = getelementptr inbounds i8, i8* %11, i64 136
  %60 = bitcast i8* %59 to i32*
  %61 = load i32, i32* %60, align 8
  store i32 %61, i32* %4, align 4
  %62 = getelementptr inbounds i8, i8* %11, i64 140
  %63 = bitcast i8* %62 to i32*
  %64 = load i32, i32* %63, align 4
  store i32 %64, i32* %5, align 4
  %65 = call i32 @jpeg_start_decompress(%struct.jpeg_decompress_struct* nonnull %12) #12
  %66 = load i32, i32* %60, align 8
  %67 = load i32, i32* %58, align 4
  %68 = mul i32 %67, %66
  %69 = load i32, i32* %63, align 4
  %70 = mul i32 %68, %69
  %71 = zext i32 %70 to i64
  %72 = load i64, i64* %16, align 8
  %73 = load i64, i64* %13, align 8
  %74 = sub i64 %72, %73
  %75 = icmp ult i64 %74, %71
  %76 = inttoptr i64 %73 to i8*
  br i1 %75, label %77, label %80

77:                                               ; preds = %53
  %78 = sub i64 %71, %74
  call void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"* %3, i64 %78) #12
  %79 = load i32, i32* %63, align 4
  br label %84

80:                                               ; preds = %53
  %81 = icmp ugt i64 %74, %71
  br i1 %81, label %82, label %84

82:                                               ; preds = %80
  %83 = getelementptr inbounds i8, i8* %76, i64 %71
  store i8* %83, i8** %15, align 8
  br label %84

84:                                               ; preds = %77, %80, %82
  %85 = phi i32 [ %79, %77 ], [ %69, %80 ], [ %69, %82 ]
  %86 = icmp sgt i32 %85, 0
  br i1 %86, label %87, label %103

87:                                               ; preds = %84
  %88 = bitcast i8** %10 to i8*
  %89 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %3, i64 0, i32 0, i32 0
  %90 = sext i32 %68 to i64
  br label %95

91:                                               ; preds = %95
  %92 = load i32, i32* %63, align 4
  %93 = sext i32 %92 to i64
  %94 = icmp slt i64 %102, %93
  br i1 %94, label %95, label %103

95:                                               ; preds = %87, %91
  %96 = phi i64 [ 0, %87 ], [ %102, %91 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %88) #12
  %97 = mul nsw i64 %96, %90
  %98 = load i8*, i8** %89, align 8
  %99 = getelementptr inbounds i8, i8* %98, i64 %97
  store i8* %99, i8** %10, align 8
  %100 = call i32 @jpeg_read_scanlines(%struct.jpeg_decompress_struct* nonnull %12, i8** nonnull %10, i32 1) #12
  %101 = icmp eq i32 %100, 0
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %88) #12
  %102 = add nuw nsw i64 %96, 1
  br i1 %101, label %105, label %91

103:                                              ; preds = %91, %84
  %104 = call i32 @jpeg_finish_decompress(%struct.jpeg_decompress_struct* nonnull %12) #12
  br label %105

105:                                              ; preds = %95, %103, %42, %50, %26
  %106 = phi i1 [ false, %26 ], [ false, %50 ], [ false, %42 ], [ true, %103 ], [ false, %95 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %35) #12
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %27) #12
  call void @llvm.lifetime.end.p0i8(i64 368, i8* nonnull %17) #12
  call void @jpeg_destroy_decompress(%struct.jpeg_decompress_struct* nonnull %12) #12
  call void @_ZdlPv(i8* nonnull %11) #13
  br label %107

107:                                              ; preds = %25, %105
  %108 = phi i1 [ false, %25 ], [ %106, %105 ]
  ret i1 %108
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

declare %struct.jpeg_error_mgr* @jpeg_std_error(%struct.jpeg_error_mgr*) local_unnamed_addr #2

; Function Attrs: noreturn nounwind ssp uwtable
define internal void @_ZN3gfx12_GLOBAL__N_19ErrorExitEP18jpeg_common_struct(%struct.jpeg_common_struct* nocapture readonly) #5 {
  %2 = bitcast %struct.jpeg_common_struct* %0 to %"struct.gfx::(anonymous namespace)::CoderErrorMgr"**
  %3 = load %"struct.gfx::(anonymous namespace)::CoderErrorMgr"*, %"struct.gfx::(anonymous namespace)::CoderErrorMgr"** %2, align 8
  %4 = getelementptr inbounds %"struct.gfx::(anonymous namespace)::CoderErrorMgr", %"struct.gfx::(anonymous namespace)::CoderErrorMgr"* %3, i64 0, i32 1, i64 0
  tail call void @__longjmp_chk(%struct.__jmp_buf_tag* %4, i32 0) #15
  unreachable
}

; Function Attrs: nounwind returns_twice
declare i32 @_setjmp(%struct.__jmp_buf_tag*) local_unnamed_addr #6

declare void @jpeg_CreateDecompress(%struct.jpeg_decompress_struct*, i32, i64) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN3gfx12_GLOBAL__N_110InitSourceEP22jpeg_decompress_struct(%struct.jpeg_decompress_struct* nocapture readonly) #7 {
  %2 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 3
  %3 = bitcast i8** %2 to %"struct.gfx::(anonymous namespace)::JpegDecoderState"**
  %4 = load %"struct.gfx::(anonymous namespace)::JpegDecoderState"*, %"struct.gfx::(anonymous namespace)::JpegDecoderState"** %3, align 8
  %5 = bitcast %"struct.gfx::(anonymous namespace)::JpegDecoderState"* %4 to i64*
  %6 = load i64, i64* %5, align 8
  %7 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 6
  %8 = bitcast %struct.jpeg_source_mgr** %7 to i64**
  %9 = load i64*, i64** %8, align 8
  store i64 %6, i64* %9, align 8
  %10 = getelementptr inbounds %"struct.gfx::(anonymous namespace)::JpegDecoderState", %"struct.gfx::(anonymous namespace)::JpegDecoderState"* %4, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %7, align 8
  %13 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %12, i64 0, i32 1
  store i64 %11, i64* %13, align 8
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal i32 @_ZN3gfx12_GLOBAL__N_115FillInputBufferEP22jpeg_decompress_struct(%struct.jpeg_decompress_struct* nocapture readnone) #8 {
  ret i32 0
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal void @_ZN3gfx12_GLOBAL__N_113SkipInputDataEP22jpeg_decompress_structl(%struct.jpeg_decompress_struct* nocapture readonly, i64) #7 {
  %3 = getelementptr inbounds %struct.jpeg_decompress_struct, %struct.jpeg_decompress_struct* %0, i64 0, i32 6
  %4 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %3, align 8
  %5 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %4, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp slt i64 %6, %1
  br i1 %7, label %8, label %14

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %4, i64 0, i32 0
  %10 = load i8*, i8** %9, align 8
  %11 = getelementptr inbounds i8, i8* %10, i64 %6
  store i8* %11, i8** %9, align 8
  %12 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %3, align 8
  %13 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %12, i64 0, i32 1
  store i64 0, i64* %13, align 8
  br label %22

14:                                               ; preds = %2
  %15 = icmp sgt i64 %1, 0
  br i1 %15, label %16, label %22

16:                                               ; preds = %14
  %17 = sub i64 %6, %1
  store i64 %17, i64* %5, align 8
  %18 = load %struct.jpeg_source_mgr*, %struct.jpeg_source_mgr** %3, align 8
  %19 = getelementptr inbounds %struct.jpeg_source_mgr, %struct.jpeg_source_mgr* %18, i64 0, i32 0
  %20 = load i8*, i8** %19, align 8
  %21 = getelementptr inbounds i8, i8* %20, i64 %1
  store i8* %21, i8** %19, align 8
  br label %22

22:                                               ; preds = %14, %16, %8
  ret void
}

declare i32 @jpeg_resync_to_restart(%struct.jpeg_decompress_struct*, i32) #2

; Function Attrs: norecurse nounwind readnone ssp uwtable
define internal void @_ZN3gfx12_GLOBAL__N_110TermSourceEP22jpeg_decompress_struct(%struct.jpeg_decompress_struct* nocapture) #8 {
  ret void
}

declare i32 @jpeg_read_header(%struct.jpeg_decompress_struct*, i32) local_unnamed_addr #2

declare void @jpeg_calc_output_dimensions(%struct.jpeg_decompress_struct*) local_unnamed_addr #2

declare i32 @jpeg_start_decompress(%struct.jpeg_decompress_struct*) local_unnamed_addr #2

declare i32 @jpeg_read_scanlines(%struct.jpeg_decompress_struct*, i8**, i32) local_unnamed_addr #2

declare i32 @jpeg_finish_decompress(%struct.jpeg_decompress_struct*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %class.SkBitmap* @_ZN3gfx9JPEGCodec6DecodeEPKhm(i8*, i64) local_unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca %"class.std::__1::vector", align 8
  %6 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %6) #12
  store i32 -1431655766, i32* %3, align 4
  %7 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #12
  store i32 -1431655766, i32* %4, align 4
  %8 = bitcast %"class.std::__1::vector"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %8) #12
  %9 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 0
  %10 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %5, i64 0, i32 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %8, i8 0, i64 24, i1 false) #12
  %11 = call zeroext i1 @_ZN3gfx9JPEGCodec6DecodeEPKhmNS0_11ColorFormatEPNSt3__16vectorIhNS4_9allocatorIhEEEEPiSA_(i8* %0, i64 %1, i32 2, %"class.std::__1::vector"* nonnull %5, i32* nonnull %3, i32* nonnull %4)
  br i1 %11, label %12, label %24

12:                                               ; preds = %2
  %13 = load i32, i32* %3, align 4
  %14 = load i32, i32* %4, align 4
  %15 = shl i32 %13, 2
  %16 = mul i32 %15, %14
  %17 = call i8* @_Znwm(i64 56) #13
  %18 = bitcast i8* %17 to %class.SkBitmap*
  call void @_ZN8SkBitmapC1Ev(%class.SkBitmap* nonnull %18) #12
  call void @_ZN8SkBitmap14allocN32PixelsEiib(%class.SkBitmap* nonnull %18, i32 %13, i32 %14, i1 zeroext false) #12
  %19 = getelementptr inbounds i8, i8* %17, i64 8
  %20 = bitcast i8* %19 to i8**
  %21 = load i8*, i8** %20, align 8
  %22 = load i8*, i8** %9, align 8
  %23 = sext i32 %16 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %21, i8* align 1 %22, i64 %23, i1 false)
  br label %24

24:                                               ; preds = %2, %12
  %25 = phi %class.SkBitmap* [ %18, %12 ], [ null, %2 ]
  %26 = load i8*, i8** %9, align 8
  %27 = icmp eq i8* %26, null
  br i1 %27, label %31, label %28

28:                                               ; preds = %24
  %29 = ptrtoint i8* %26 to i64
  %30 = bitcast i8** %10 to i64*
  store i64 %29, i64* %30, align 8
  call void @_ZdlPv(i8* nonnull %26) #13
  br label %31

31:                                               ; preds = %24, %28
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %8) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %6) #12
  ret %class.SkBitmap* %25
}

declare void @_ZN8SkBitmapC1Ev(%class.SkBitmap*) unnamed_addr #2

declare void @_ZN8SkBitmap14allocN32PixelsEiib(%class.SkBitmap*, i32, i32, i1 zeroext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #9

; Function Attrs: noreturn nounwind
declare void @__longjmp_chk(%struct.__jmp_buf_tag*, i32) local_unnamed_addr #10

declare void @jpeg_destroy_decompress(%struct.jpeg_decompress_struct*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast i8** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %7 = bitcast i8** %6 to i64*
  %8 = load i64, i64* %7, align 8
  %9 = sub i64 %5, %8
  %10 = icmp ult i64 %9, %1
  br i1 %10, label %22, label %11

11:                                               ; preds = %2
  %12 = inttoptr i64 %8 to i8*
  %13 = icmp eq i64 %1, 0
  br i1 %13, label %20, label %14

14:                                               ; preds = %11
  %15 = getelementptr inbounds i8, i8* %12, i64 %1
  %16 = sub i64 %1, %8
  %17 = getelementptr i8, i8* %12, i64 %16
  %18 = ptrtoint i8* %17 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %12, i8 0, i64 %18, i1 false) #12
  %19 = ptrtoint i8* %15 to i64
  br label %20

20:                                               ; preds = %11, %14
  %21 = phi i64 [ %19, %14 ], [ %8, %11 ]
  store i64 %21, i64* %7, align 8
  br label %68

22:                                               ; preds = %2
  %23 = bitcast %"class.std::__1::vector"* %0 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %8, %24
  %26 = add i64 %25, %1
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %30

28:                                               ; preds = %22
  %29 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %29) #15
  unreachable

30:                                               ; preds = %22
  %31 = sub i64 %5, %24
  %32 = icmp ult i64 %31, 4611686018427387903
  br i1 %32, label %33, label %38

33:                                               ; preds = %30
  %34 = shl i64 %31, 1
  %35 = icmp ult i64 %34, %26
  %36 = select i1 %35, i64 %26, i64 %34
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %41, label %38

38:                                               ; preds = %30, %33
  %39 = phi i64 [ %36, %33 ], [ 9223372036854775807, %30 ]
  %40 = tail call i8* @_Znwm(i64 %39) #13
  br label %41

41:                                               ; preds = %38, %33
  %42 = phi i64 [ %39, %38 ], [ 0, %33 ]
  %43 = phi i8* [ %40, %38 ], [ null, %33 ]
  %44 = getelementptr inbounds i8, i8* %43, i64 %25
  %45 = ptrtoint i8* %44 to i64
  %46 = getelementptr inbounds i8, i8* %43, i64 %42
  %47 = getelementptr inbounds i8, i8* %44, i64 %1
  %48 = sub i64 %1, %45
  %49 = getelementptr i8, i8* %44, i64 %48
  %50 = ptrtoint i8* %49 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %44, i8 0, i64 %50, i1 false) #12
  %51 = ptrtoint i8* %46 to i64
  %52 = ptrtoint i8* %47 to i64
  %53 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = load i64, i64* %7, align 8
  %56 = ptrtoint i8* %54 to i64
  %57 = sub i64 %55, %56
  %58 = sub i64 0, %57
  %59 = getelementptr inbounds i8, i8* %44, i64 %58
  %60 = ptrtoint i8* %59 to i64
  %61 = icmp sgt i64 %57, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %41
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %59, i8* align 1 %54, i64 %57, i1 false) #12
  %63 = load i8*, i8** %53, align 8
  br label %64

64:                                               ; preds = %41, %62
  %65 = phi i8* [ %54, %41 ], [ %63, %62 ]
  store i64 %60, i64* %23, align 8
  store i64 %52, i64* %7, align 8
  store i64 %51, i64* %4, align 8
  %66 = icmp eq i8* %65, null
  br i1 %66, label %68, label %67

67:                                               ; preds = %64
  tail call void @_ZdlPv(i8* nonnull %65) #13
  br label %68

68:                                               ; preds = %67, %64, %20
  ret void
}

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #11

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind returns_twice "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { builtin nounwind }
attributes #14 = { nounwind returns_twice }
attributes #15 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
