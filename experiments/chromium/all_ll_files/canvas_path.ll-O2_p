; ModuleID = '../../third_party/blink/renderer/modules/canvas/canvas2d/canvas_path.cc'
source_filename = "../../third_party/blink/renderer/modules/canvas/canvas2d/canvas_path.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic.13" }
%"struct.std::__1::atomic.13" = type { %"struct.std::__1::__atomic_base.14" }
%"struct.std::__1::__atomic_base.14" = type { %"struct.std::__1::__atomic_base.15" }
%"struct.std::__1::__atomic_base.15" = type { %"struct.std::__1::__cxx_atomic_impl.16" }
%"struct.std::__1::__cxx_atomic_impl.16" = type { %"struct.std::__1::__cxx_atomic_base_impl.17" }
%"struct.std::__1::__cxx_atomic_base_impl.17" = type { i32 }
%"class.blink::CanvasPath" = type { i32 (...)**, %"class.blink::NoAllocDirectCallHost", %"class.blink::Path" }
%"class.blink::NoAllocDirectCallHost" = type { %"class.WTF::Vector", %"struct.v8::FastApiCallbackOptions"* }
%"class.WTF::Vector" = type { %"class.WTF::VectorBuffer" }
%"class.WTF::VectorBuffer" = type { %"class.WTF::VectorBufferBase" }
%"class.WTF::VectorBufferBase" = type { %"class.base::OnceCallback"*, i32, i32 }
%"class.base::OnceCallback" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr.33 }
%class.scoped_refptr.33 = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.v8::FastApiCallbackOptions" = type { i8, %union.anon }
%union.anon = type { i64 }
%"class.blink::Path" = type { %class.SkPath }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%struct.SkRect = type { float, float, float, float }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%struct.SkPoint = type { float, float }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%"class.blink::FloatPoint" = type { float, float }
%"class.blink::TransformationMatrix" = type { %"struct.blink::TransformationMatrix::Matrix4" }
%"struct.blink::TransformationMatrix::Matrix4" = type { [4 x [4 x double]] }
%"class.blink::ExceptionState" = type { i32 (...)**, %"class.blink::ExceptionContext", %"class.blink::ExceptionState::ContextScope"*, %"class.v8::Isolate"*, i32, %"class.WTF::String", %"class.blink::TraceWrapperV8Reference" }
%"class.blink::ExceptionContext" = type { i16, i16, i8*, i8* }
%"class.blink::ExceptionState::ContextScope" = type { %"class.blink::ExceptionState"*, %"class.blink::ExceptionState::ContextScope"*, %"class.blink::ExceptionContext" }
%"class.v8::Isolate" = type { i8 }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.blink::TraceWrapperV8Reference" = type { %"class.v8::TracedReference" }
%"class.v8::TracedReference" = type { %"class.v8::BasicTracedReference" }
%"class.v8::BasicTracedReference" = type { %"class.v8::TracedReferenceBase" }
%"class.v8::TracedReferenceBase" = type { i64* }
%"class.WTF::StringAppend" = type { %"class.WTF::StringAppend.18", i8* }
%"class.WTF::StringAppend.18" = type { i8*, %"class.WTF::String" }
%"class.WTF::StringTypeAdapter.34" = type <{ i8*, i32, [4 x i8] }>
%"class.blink::AffineTransform" = type { [6 x double] }
%"class.blink::FloatRect" = type { %"class.blink::FloatPoint", %"class.blink::FloatSize" }
%"class.blink::FloatSize" = type { float, float }
%"class.blink::HeapVector" = type { %"class.WTF::Vector.19" }
%"class.WTF::Vector.19" = type { %"class.WTF::VectorBuffer.20" }
%"class.WTF::VectorBuffer.20" = type { %"class.WTF::VectorBufferBase.21" }
%"class.WTF::VectorBufferBase.21" = type { %"class.blink::Member"*, i32, i32 }
%"class.blink::Member" = type { %"class.blink::MemberBase" }
%"class.blink::MemberBase" = type { %"class.blink::V8UnionDOMPointOrUnrestrictedDouble"* }
%"class.blink::V8UnionDOMPointOrUnrestrictedDouble" = type { %"class.blink::bindings::UnionBase", i32, %"class.blink::Member.24", double }
%"class.blink::bindings::UnionBase" = type { i32 (...)** }
%"class.blink::Member.24" = type { %"class.blink::MemberBase.25" }
%"class.blink::MemberBase.25" = type { %"class.blink::DOMPoint"* }
%"class.blink::DOMPoint" = type { %"class.blink::DOMPointReadOnly" }
%"class.blink::DOMPointReadOnly" = type { %"class.blink::ScriptWrappable", double, double, double, double }
%"class.blink::ScriptWrappable" = type { %"class.blink::NameClient", %"class.blink::TraceWrapperV8Reference.28" }
%"class.blink::NameClient" = type { i32 (...)** }
%"class.blink::TraceWrapperV8Reference.28" = type { %"class.v8::TracedReference.29" }
%"class.v8::TracedReference.29" = type { %"class.v8::BasicTracedReference.30" }
%"class.v8::BasicTracedReference.30" = type { %"class.v8::TracedReferenceBase" }
%"class.WTF::IntegerToStringConverter" = type <{ [13 x i8], [3 x i8], i8*, i32, [4 x i8] }>
%"class.WTF::StringAppend.32" = type { %"class.WTF::String", i8* }
%"class.WTF::StringTypeAdapter.35" = type { %"class.WTF::StringTypeAdapter.36" }
%"class.WTF::StringTypeAdapter.36" = type { %"class.WTF::StringView" }
%"class.WTF::StringView" = type <{ %"class.WTF::StringImpl"*, i8*, i32, [4 x i8] }>
%"class.logging::CheckOpResult" = type { i8* }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type { i32 (...)**, i32, %"class.std::__1::basic_ostringstream", i64, i8*, i32, %"class.base::ScopedClearLastErrorBase" }
%"class.std::__1::basic_ostringstream" = type { %"class.std::__1::basic_ostream.base", %"class.std::__1::basic_stringbuf", %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ostream.base" = type { i32 (...)** }
%"class.std::__1::basic_stringbuf" = type <{ %"class.std::__1::basic_streambuf", %"class.std::__1::basic_string", i8*, i32, [4 x i8] }>
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.37 }
%union.anon.37 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.base::ScopedClearLastErrorBase" = type { i32 }

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev = comdat any

$_ZNK3WTF12StringAppendINS_6StringEPKcEcvS1_Ev = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPh = comdat any

$_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPDs = comdat any

$_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv = comdat any

$_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv = comdat any

$_ZNK3WTF6VectorIN5blink6MemberINS1_35V8UnionDOMPointOrUnrestrictedDoubleEEELj0ENS1_13HeapAllocatorEE2atEj = comdat any

@.str = private unnamed_addr constant [22 x i8] c"The radius provided (\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c") is negative.\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"The major-axis radius provided (\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"The minor-axis radius provided (\00", align 1
@.str.4 = private unnamed_addr constant [59 x i8] c" radii provided. Between one and four radii are necessary.\00", align 1
@.str.5 = private unnamed_addr constant [16 x i8] c"X-radius value \00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c" is negative.\00", align 1
@.str.7 = private unnamed_addr constant [16 x i8] c"Y-radius value \00", align 1
@.str.8 = private unnamed_addr constant [14 x i8] c"Radius value \00", align 1
@_ZN3WTF10StringImpl6empty_E = external local_unnamed_addr global %"class.WTF::StringImpl"*, align 8
@.str.9 = private unnamed_addr constant [27 x i8] c"total >= adapter1.length()\00", align 1
@.str.10 = private unnamed_addr constant [70 x i8] c"../../third_party/blink/renderer/platform/wtf/text/string_operators.h\00", align 1
@.str.11 = private unnamed_addr constant [27 x i8] c"total >= adapter2.length()\00", align 1
@.str.12 = private unnamed_addr constant [11 x i8] c"i < size()\00", align 1
@.str.13 = private unnamed_addr constant [55 x i8] c"../../third_party/blink/renderer/platform/wtf/vector.h\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10CanvasPath9closePathEv(%"class.blink::CanvasPath"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.blink::CanvasPath", %"class.blink::CanvasPath"* %0, i64 0, i32 2
  %3 = tail call zeroext i1 @_ZNK5blink4Path7IsEmptyEv(%"class.blink::Path"* %2) #5
  br i1 %3, label %5, label %4

4:                                                ; preds = %1
  tail call void @_ZN5blink4Path12CloseSubpathEv(%"class.blink::Path"* %2) #5
  br label %5

5:                                                ; preds = %1, %4
  ret void
}

declare zeroext i1 @_ZNK5blink4Path7IsEmptyEv(%"class.blink::Path"*) local_unnamed_addr #1

declare void @_ZN5blink4Path12CloseSubpathEv(%"class.blink::Path"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10CanvasPath6moveToEdd(%"class.blink::CanvasPath"*, double, double) local_unnamed_addr #2 align 2 {
  %4 = alloca <2 x float>, align 8
  %5 = bitcast <2 x float>* %4 to %"class.blink::FloatPoint"*
  %6 = alloca %"class.blink::TransformationMatrix", align 8
  %7 = alloca %"class.blink::FloatPoint", align 4
  %8 = alloca %"class.blink::FloatPoint", align 4
  %9 = fcmp ult double %1, 0xC7EFFFFFE0000000
  %10 = fcmp ugt double %1, 0x47EFFFFFE0000000
  %11 = fptrunc double %1 to float
  %12 = select i1 %9, float 0xFFF0000000000000, float %11
  %13 = select i1 %9, float 0x7FF8000000000000, float 0x7FF0000000000000
  %14 = select i1 %10, float %13, float %12
  %15 = fcmp ult double %2, 0xC7EFFFFFE0000000
  %16 = fcmp ugt double %2, 0x47EFFFFFE0000000
  %17 = fptrunc double %2 to float
  %18 = select i1 %15, float 0xFFF0000000000000, float %17
  %19 = select i1 %15, float 0x7FF8000000000000, float 0x7FF0000000000000
  %20 = select i1 %16, float %19, float %18
  %21 = tail call float @llvm.fabs.f32(float %14) #9
  %22 = fcmp one float %21, 0x7FF0000000000000
  %23 = tail call float @llvm.fabs.f32(float %20) #9
  %24 = fcmp one float %23, 0x7FF0000000000000
  %25 = and i1 %22, %24
  br i1 %25, label %26, label %50

26:                                               ; preds = %3
  %27 = bitcast %"class.blink::CanvasPath"* %0 to i1 (%"class.blink::CanvasPath"*)***
  %28 = load i1 (%"class.blink::CanvasPath"*)**, i1 (%"class.blink::CanvasPath"*)*** %27, align 8
  %29 = getelementptr inbounds i1 (%"class.blink::CanvasPath"*)*, i1 (%"class.blink::CanvasPath"*)** %28, i64 2
  %30 = load i1 (%"class.blink::CanvasPath"*)*, i1 (%"class.blink::CanvasPath"*)** %29, align 8
  %31 = tail call zeroext i1 %30(%"class.blink::CanvasPath"* %0) #5
  %32 = getelementptr inbounds %"class.blink::CanvasPath", %"class.blink::CanvasPath"* %0, i64 0, i32 2
  br i1 %31, label %44, label %33

33:                                               ; preds = %26
  %34 = bitcast <2 x float>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #5
  %35 = bitcast %"class.blink::TransformationMatrix"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %35) #5
  %36 = bitcast %"class.blink::CanvasPath"* %0 to void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)***
  %37 = load void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)**, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*** %36, align 8
  %38 = getelementptr inbounds void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)** %37, i64 3
  %39 = load void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)** %38, align 8
  call void %39(%"class.blink::TransformationMatrix"* nonnull sret %6, %"class.blink::CanvasPath"* %0) #5
  %40 = bitcast %"class.blink::FloatPoint"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40) #5
  %41 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %7, i64 0, i32 0
  store float %14, float* %41, align 4
  %42 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %7, i64 0, i32 1
  store float %20, float* %42, align 4
  %43 = call <2 x float> @_ZNK5blink20TransformationMatrix8MapPointERKNS_10FloatPointE(%"class.blink::TransformationMatrix"* nonnull %6, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %7) #5
  store <2 x float> %43, <2 x float>* %4, align 8
  call void @_ZN5blink4Path6MoveToERKNS_10FloatPointE(%"class.blink::Path"* %32, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %5) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40) #5
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %35) #5
  br label %48

44:                                               ; preds = %26
  %45 = bitcast %"class.blink::FloatPoint"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #5
  %46 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %8, i64 0, i32 0
  store float %14, float* %46, align 4
  %47 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %8, i64 0, i32 1
  store float %20, float* %47, align 4
  call void @_ZN5blink4Path6MoveToERKNS_10FloatPointE(%"class.blink::Path"* %32, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %8) #5
  br label %48

48:                                               ; preds = %33, %44
  %49 = phi i8* [ %45, %44 ], [ %34, %33 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %49) #5
  br label %50

50:                                               ; preds = %48, %3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare void @_ZN5blink4Path6MoveToERKNS_10FloatPointE(%"class.blink::Path"*, %"class.blink::FloatPoint"* dereferenceable(8)) local_unnamed_addr #1

declare <2 x float> @_ZNK5blink20TransformationMatrix8MapPointERKNS_10FloatPointE(%"class.blink::TransformationMatrix"*, %"class.blink::FloatPoint"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10CanvasPath6lineToEdd(%"class.blink::CanvasPath"*, double, double) local_unnamed_addr #2 align 2 {
  %4 = alloca <2 x float>, align 8
  %5 = bitcast <2 x float>* %4 to %"class.blink::FloatPoint"*
  %6 = alloca %"class.blink::TransformationMatrix", align 8
  %7 = fcmp ult double %1, 0xC7EFFFFFE0000000
  %8 = fcmp ugt double %1, 0x47EFFFFFE0000000
  %9 = fptrunc double %1 to float
  %10 = select i1 %7, float 0xFFF0000000000000, float %9
  %11 = select i1 %7, float 0x7FF8000000000000, float 0x7FF0000000000000
  %12 = select i1 %8, float %11, float %10
  %13 = fcmp ult double %2, 0xC7EFFFFFE0000000
  %14 = fcmp ugt double %2, 0x47EFFFFFE0000000
  %15 = fptrunc double %2 to float
  %16 = select i1 %13, float 0xFFF0000000000000, float %15
  %17 = select i1 %13, float 0x7FF8000000000000, float 0x7FF0000000000000
  %18 = select i1 %14, float %17, float %16
  %19 = tail call float @llvm.fabs.f32(float %12) #9
  %20 = fcmp one float %19, 0x7FF0000000000000
  %21 = tail call float @llvm.fabs.f32(float %18) #9
  %22 = fcmp one float %21, 0x7FF0000000000000
  %23 = and i1 %20, %22
  br i1 %23, label %24, label %45

24:                                               ; preds = %3
  %25 = bitcast <2 x float>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #5
  %26 = getelementptr inbounds <2 x float>, <2 x float>* %4, i64 0, i64 0
  %27 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %5, i64 0, i32 1
  store float %12, float* %26, align 8
  store float %18, float* %27, align 4
  %28 = bitcast %"class.blink::CanvasPath"* %0 to i1 (%"class.blink::CanvasPath"*)***
  %29 = load i1 (%"class.blink::CanvasPath"*)**, i1 (%"class.blink::CanvasPath"*)*** %28, align 8
  %30 = getelementptr inbounds i1 (%"class.blink::CanvasPath"*)*, i1 (%"class.blink::CanvasPath"*)** %29, i64 2
  %31 = load i1 (%"class.blink::CanvasPath"*)*, i1 (%"class.blink::CanvasPath"*)** %30, align 8
  %32 = tail call zeroext i1 %31(%"class.blink::CanvasPath"* %0) #5
  br i1 %32, label %40, label %33

33:                                               ; preds = %24
  %34 = bitcast %"class.blink::TransformationMatrix"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %34) #5
  %35 = bitcast %"class.blink::CanvasPath"* %0 to void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)***
  %36 = load void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)**, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*** %35, align 8
  %37 = getelementptr inbounds void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)** %36, i64 3
  %38 = load void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)** %37, align 8
  call void %38(%"class.blink::TransformationMatrix"* nonnull sret %6, %"class.blink::CanvasPath"* %0) #5
  %39 = call <2 x float> @_ZNK5blink20TransformationMatrix8MapPointERKNS_10FloatPointE(%"class.blink::TransformationMatrix"* nonnull %6, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %5) #5
  store <2 x float> %39, <2 x float>* %4, align 8
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %34) #5
  br label %40

40:                                               ; preds = %33, %24
  %41 = getelementptr inbounds %"class.blink::CanvasPath", %"class.blink::CanvasPath"* %0, i64 0, i32 2
  %42 = call zeroext i1 @_ZNK5blink4Path15HasCurrentPointEv(%"class.blink::Path"* %41) #5
  br i1 %42, label %44, label %43

43:                                               ; preds = %40
  call void @_ZN5blink4Path6MoveToERKNS_10FloatPointE(%"class.blink::Path"* %41, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %5) #5
  br label %44

44:                                               ; preds = %43, %40
  call void @_ZN5blink4Path9AddLineToERKNS_10FloatPointE(%"class.blink::Path"* %41, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %5) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #5
  br label %45

45:                                               ; preds = %3, %44
  ret void
}

declare zeroext i1 @_ZNK5blink4Path15HasCurrentPointEv(%"class.blink::Path"*) local_unnamed_addr #1

declare void @_ZN5blink4Path9AddLineToERKNS_10FloatPointE(%"class.blink::Path"*, %"class.blink::FloatPoint"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10CanvasPath16quadraticCurveToEdddd(%"class.blink::CanvasPath"*, double, double, double, double) local_unnamed_addr #2 align 2 {
  %6 = alloca <2 x float>, align 8
  %7 = bitcast <2 x float>* %6 to %"class.blink::FloatPoint"*
  %8 = alloca <2 x float>, align 8
  %9 = bitcast <2 x float>* %8 to %"class.blink::FloatPoint"*
  %10 = alloca %"class.blink::TransformationMatrix", align 8
  %11 = alloca %"class.blink::TransformationMatrix", align 8
  %12 = alloca %"class.blink::FloatPoint", align 4
  %13 = insertelement <4 x double> undef, double %1, i32 0
  %14 = insertelement <4 x double> %13, double %2, i32 1
  %15 = insertelement <4 x double> %14, double %3, i32 2
  %16 = insertelement <4 x double> %15, double %4, i32 3
  %17 = fcmp ult <4 x double> %16, <double 0xC7EFFFFFE0000000, double 0xC7EFFFFFE0000000, double 0xC7EFFFFFE0000000, double 0xC7EFFFFFE0000000>
  %18 = fcmp ugt <4 x double> %16, <double 0x47EFFFFFE0000000, double 0x47EFFFFFE0000000, double 0x47EFFFFFE0000000, double 0x47EFFFFFE0000000>
  %19 = fptrunc <4 x double> %16 to <4 x float>
  %20 = select <4 x i1> %17, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %19
  %21 = select <4 x i1> %17, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %22 = select <4 x i1> %18, <4 x float> %21, <4 x float> %20
  %23 = call <4 x float> @llvm.fabs.v4f32(<4 x float> %22)
  %24 = fcmp one <4 x float> %23, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %25 = shufflevector <4 x i1> %24, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %26 = and <4 x i1> %24, %25
  %27 = shufflevector <4 x i1> %26, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %28 = and <4 x i1> %26, %27
  %29 = extractelement <4 x i1> %28, i32 0
  br i1 %29, label %30, label %66

30:                                               ; preds = %5
  %31 = bitcast <2 x float>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #5
  %32 = getelementptr inbounds <2 x float>, <2 x float>* %6, i64 0, i64 0
  %33 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %7, i64 0, i32 1
  %34 = extractelement <4 x float> %22, i32 2
  store float %34, float* %32, align 8
  %35 = extractelement <4 x float> %22, i32 3
  store float %35, float* %33, align 4
  %36 = bitcast <2 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #5
  %37 = getelementptr inbounds <2 x float>, <2 x float>* %8, i64 0, i64 0
  %38 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %9, i64 0, i32 1
  %39 = extractelement <4 x float> %22, i32 0
  store float %39, float* %37, align 8
  %40 = extractelement <4 x float> %22, i32 1
  store float %40, float* %38, align 4
  %41 = bitcast %"class.blink::CanvasPath"* %0 to i1 (%"class.blink::CanvasPath"*)***
  %42 = load i1 (%"class.blink::CanvasPath"*)**, i1 (%"class.blink::CanvasPath"*)*** %41, align 8
  %43 = getelementptr inbounds i1 (%"class.blink::CanvasPath"*)*, i1 (%"class.blink::CanvasPath"*)** %42, i64 2
  %44 = load i1 (%"class.blink::CanvasPath"*)*, i1 (%"class.blink::CanvasPath"*)** %43, align 8
  %45 = tail call zeroext i1 %44(%"class.blink::CanvasPath"* %0) #5
  br i1 %45, label %58, label %46

46:                                               ; preds = %30
  %47 = bitcast %"class.blink::TransformationMatrix"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %47) #5
  %48 = bitcast %"class.blink::CanvasPath"* %0 to void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)***
  %49 = load void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)**, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*** %48, align 8
  %50 = getelementptr inbounds void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)** %49, i64 3
  %51 = load void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)** %50, align 8
  call void %51(%"class.blink::TransformationMatrix"* nonnull sret %10, %"class.blink::CanvasPath"* %0) #5
  %52 = call <2 x float> @_ZNK5blink20TransformationMatrix8MapPointERKNS_10FloatPointE(%"class.blink::TransformationMatrix"* nonnull %10, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %7) #5
  store <2 x float> %52, <2 x float>* %6, align 8
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %47) #5
  %53 = bitcast %"class.blink::TransformationMatrix"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %53) #5
  %54 = load void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)**, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*** %48, align 8
  %55 = getelementptr inbounds void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)** %54, i64 3
  %56 = load void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)** %55, align 8
  call void %56(%"class.blink::TransformationMatrix"* nonnull sret %11, %"class.blink::CanvasPath"* %0) #5
  %57 = call <2 x float> @_ZNK5blink20TransformationMatrix8MapPointERKNS_10FloatPointE(%"class.blink::TransformationMatrix"* nonnull %11, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %9) #5
  store <2 x float> %57, <2 x float>* %8, align 8
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %53) #5
  br label %58

58:                                               ; preds = %46, %30
  %59 = getelementptr inbounds %"class.blink::CanvasPath", %"class.blink::CanvasPath"* %0, i64 0, i32 2
  %60 = call zeroext i1 @_ZNK5blink4Path15HasCurrentPointEv(%"class.blink::Path"* %59) #5
  br i1 %60, label %65, label %61

61:                                               ; preds = %58
  %62 = bitcast %"class.blink::FloatPoint"* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %62) #5
  %63 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %12, i64 0, i32 0
  store float %39, float* %63, align 4
  %64 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %12, i64 0, i32 1
  store float %40, float* %64, align 4
  call void @_ZN5blink4Path6MoveToERKNS_10FloatPointE(%"class.blink::Path"* %59, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %12) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %62) #5
  br label %65

65:                                               ; preds = %61, %58
  call void @_ZN5blink4Path14AddQuadCurveToERKNS_10FloatPointES3_(%"class.blink::Path"* %59, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %9, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %7) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #5
  br label %66

66:                                               ; preds = %5, %65
  ret void
}

declare void @_ZN5blink4Path14AddQuadCurveToERKNS_10FloatPointES3_(%"class.blink::Path"*, %"class.blink::FloatPoint"* dereferenceable(8), %"class.blink::FloatPoint"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10CanvasPath13bezierCurveToEdddddd(%"class.blink::CanvasPath"*, double, double, double, double, double, double) local_unnamed_addr #2 align 2 {
  %8 = alloca <2 x float>, align 8
  %9 = bitcast <2 x float>* %8 to %"class.blink::FloatPoint"*
  %10 = alloca <2 x float>, align 8
  %11 = bitcast <2 x float>* %10 to %"class.blink::FloatPoint"*
  %12 = alloca <2 x float>, align 8
  %13 = bitcast <2 x float>* %12 to %"class.blink::FloatPoint"*
  %14 = alloca %"class.blink::TransformationMatrix", align 8
  %15 = alloca %"class.blink::TransformationMatrix", align 8
  %16 = alloca %"class.blink::TransformationMatrix", align 8
  %17 = alloca %"class.blink::FloatPoint", align 4
  %18 = insertelement <4 x double> undef, double %1, i32 0
  %19 = insertelement <4 x double> %18, double %2, i32 1
  %20 = insertelement <4 x double> %19, double %3, i32 2
  %21 = insertelement <4 x double> %20, double %4, i32 3
  %22 = fcmp ult <4 x double> %21, <double 0xC7EFFFFFE0000000, double 0xC7EFFFFFE0000000, double 0xC7EFFFFFE0000000, double 0xC7EFFFFFE0000000>
  %23 = fcmp ugt <4 x double> %21, <double 0x47EFFFFFE0000000, double 0x47EFFFFFE0000000, double 0x47EFFFFFE0000000, double 0x47EFFFFFE0000000>
  %24 = fptrunc <4 x double> %21 to <4 x float>
  %25 = select <4 x i1> %22, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %24
  %26 = select <4 x i1> %22, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %27 = select <4 x i1> %23, <4 x float> %26, <4 x float> %25
  %28 = fcmp ult double %5, 0xC7EFFFFFE0000000
  %29 = fcmp ugt double %5, 0x47EFFFFFE0000000
  %30 = fptrunc double %5 to float
  %31 = select i1 %28, float 0xFFF0000000000000, float %30
  %32 = select i1 %28, float 0x7FF8000000000000, float 0x7FF0000000000000
  %33 = select i1 %29, float %32, float %31
  %34 = fcmp ult double %6, 0xC7EFFFFFE0000000
  %35 = fcmp ugt double %6, 0x47EFFFFFE0000000
  %36 = fptrunc double %6 to float
  %37 = select i1 %34, float 0xFFF0000000000000, float %36
  %38 = select i1 %34, float 0x7FF8000000000000, float 0x7FF0000000000000
  %39 = select i1 %35, float %38, float %37
  %40 = call <4 x float> @llvm.fabs.v4f32(<4 x float> %27)
  %41 = fcmp one <4 x float> %40, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %42 = tail call float @llvm.fabs.f32(float %33) #9
  %43 = fcmp one float %42, 0x7FF0000000000000
  %44 = tail call float @llvm.fabs.f32(float %39) #9
  %45 = fcmp one float %44, 0x7FF0000000000000
  %46 = shufflevector <4 x i1> %41, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %47 = and <4 x i1> %41, %46
  %48 = shufflevector <4 x i1> %47, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %49 = and <4 x i1> %47, %48
  %50 = extractelement <4 x i1> %49, i32 0
  %51 = and i1 %50, %43
  %52 = and i1 %51, %45
  br i1 %52, label %53, label %97

53:                                               ; preds = %7
  %54 = bitcast <2 x float>* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %54) #5
  %55 = getelementptr inbounds <2 x float>, <2 x float>* %8, i64 0, i64 0
  %56 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %9, i64 0, i32 1
  store float %33, float* %55, align 8
  store float %39, float* %56, align 4
  %57 = bitcast <2 x float>* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %57) #5
  %58 = getelementptr inbounds <2 x float>, <2 x float>* %10, i64 0, i64 0
  %59 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %11, i64 0, i32 1
  %60 = extractelement <4 x float> %27, i32 0
  store float %60, float* %58, align 8
  %61 = extractelement <4 x float> %27, i32 1
  store float %61, float* %59, align 4
  %62 = bitcast <2 x float>* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %62) #5
  %63 = getelementptr inbounds <2 x float>, <2 x float>* %12, i64 0, i64 0
  %64 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %13, i64 0, i32 1
  %65 = extractelement <4 x float> %27, i32 2
  store float %65, float* %63, align 8
  %66 = extractelement <4 x float> %27, i32 3
  store float %66, float* %64, align 4
  %67 = bitcast %"class.blink::CanvasPath"* %0 to i1 (%"class.blink::CanvasPath"*)***
  %68 = load i1 (%"class.blink::CanvasPath"*)**, i1 (%"class.blink::CanvasPath"*)*** %67, align 8
  %69 = getelementptr inbounds i1 (%"class.blink::CanvasPath"*)*, i1 (%"class.blink::CanvasPath"*)** %68, i64 2
  %70 = load i1 (%"class.blink::CanvasPath"*)*, i1 (%"class.blink::CanvasPath"*)** %69, align 8
  %71 = tail call zeroext i1 %70(%"class.blink::CanvasPath"* %0) #5
  br i1 %71, label %89, label %72

72:                                               ; preds = %53
  %73 = bitcast %"class.blink::TransformationMatrix"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %73) #5
  %74 = bitcast %"class.blink::CanvasPath"* %0 to void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)***
  %75 = load void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)**, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*** %74, align 8
  %76 = getelementptr inbounds void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)** %75, i64 3
  %77 = load void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)** %76, align 8
  call void %77(%"class.blink::TransformationMatrix"* nonnull sret %14, %"class.blink::CanvasPath"* %0) #5
  %78 = call <2 x float> @_ZNK5blink20TransformationMatrix8MapPointERKNS_10FloatPointE(%"class.blink::TransformationMatrix"* nonnull %14, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %9) #5
  store <2 x float> %78, <2 x float>* %8, align 8
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %73) #5
  %79 = bitcast %"class.blink::TransformationMatrix"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %79) #5
  %80 = load void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)**, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*** %74, align 8
  %81 = getelementptr inbounds void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)** %80, i64 3
  %82 = load void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)** %81, align 8
  call void %82(%"class.blink::TransformationMatrix"* nonnull sret %15, %"class.blink::CanvasPath"* %0) #5
  %83 = call <2 x float> @_ZNK5blink20TransformationMatrix8MapPointERKNS_10FloatPointE(%"class.blink::TransformationMatrix"* nonnull %15, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %11) #5
  store <2 x float> %83, <2 x float>* %10, align 8
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %79) #5
  %84 = bitcast %"class.blink::TransformationMatrix"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %84) #5
  %85 = load void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)**, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*** %74, align 8
  %86 = getelementptr inbounds void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)** %85, i64 3
  %87 = load void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)** %86, align 8
  call void %87(%"class.blink::TransformationMatrix"* nonnull sret %16, %"class.blink::CanvasPath"* %0) #5
  %88 = call <2 x float> @_ZNK5blink20TransformationMatrix8MapPointERKNS_10FloatPointE(%"class.blink::TransformationMatrix"* nonnull %16, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %13) #5
  store <2 x float> %88, <2 x float>* %12, align 8
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %84) #5
  br label %89

89:                                               ; preds = %72, %53
  %90 = getelementptr inbounds %"class.blink::CanvasPath", %"class.blink::CanvasPath"* %0, i64 0, i32 2
  %91 = call zeroext i1 @_ZNK5blink4Path15HasCurrentPointEv(%"class.blink::Path"* %90) #5
  br i1 %91, label %96, label %92

92:                                               ; preds = %89
  %93 = bitcast %"class.blink::FloatPoint"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %93) #5
  %94 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %17, i64 0, i32 0
  store float %60, float* %94, align 4
  %95 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %17, i64 0, i32 1
  store float %61, float* %95, align 4
  call void @_ZN5blink4Path6MoveToERKNS_10FloatPointE(%"class.blink::Path"* %90, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %17) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %93) #5
  br label %96

96:                                               ; preds = %92, %89
  call void @_ZN5blink4Path16AddBezierCurveToERKNS_10FloatPointES3_S3_(%"class.blink::Path"* %90, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %11, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %13, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %9) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %62) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %57) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %54) #5
  br label %97

97:                                               ; preds = %7, %96
  ret void
}

declare void @_ZN5blink4Path16AddBezierCurveToERKNS_10FloatPointES3_S3_(%"class.blink::Path"*, %"class.blink::FloatPoint"* dereferenceable(8), %"class.blink::FloatPoint"* dereferenceable(8), %"class.blink::FloatPoint"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10CanvasPath5arcToEdddddRNS_14ExceptionStateE(%"class.blink::CanvasPath"*, double, double, double, double, double, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #2 align 2 {
  %8 = alloca %"class.WTF::String", align 8
  %9 = alloca %"class.WTF::StringAppend", align 8
  %10 = alloca <2 x float>, align 8
  %11 = bitcast <2 x float>* %10 to %"class.blink::FloatPoint"*
  %12 = alloca <2 x float>, align 8
  %13 = bitcast <2 x float>* %12 to %"class.blink::FloatPoint"*
  %14 = alloca %"class.blink::TransformationMatrix", align 8
  %15 = alloca %"class.blink::TransformationMatrix", align 8
  %16 = insertelement <4 x double> undef, double %1, i32 0
  %17 = insertelement <4 x double> %16, double %2, i32 1
  %18 = insertelement <4 x double> %17, double %3, i32 2
  %19 = insertelement <4 x double> %18, double %4, i32 3
  %20 = fcmp ult <4 x double> %19, <double 0xC7EFFFFFE0000000, double 0xC7EFFFFFE0000000, double 0xC7EFFFFFE0000000, double 0xC7EFFFFFE0000000>
  %21 = fcmp ugt <4 x double> %19, <double 0x47EFFFFFE0000000, double 0x47EFFFFFE0000000, double 0x47EFFFFFE0000000, double 0x47EFFFFFE0000000>
  %22 = fptrunc <4 x double> %19 to <4 x float>
  %23 = select <4 x i1> %20, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %22
  %24 = select <4 x i1> %20, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %25 = select <4 x i1> %21, <4 x float> %24, <4 x float> %23
  %26 = fcmp ult double %5, 0xC7EFFFFFE0000000
  %27 = fcmp ugt double %5, 0x47EFFFFFE0000000
  %28 = fptrunc double %5 to float
  %29 = select i1 %26, float 0xFFF0000000000000, float %28
  %30 = select i1 %26, float 0x7FF8000000000000, float 0x7FF0000000000000
  %31 = select i1 %27, float %30, float %29
  %32 = call <4 x float> @llvm.fabs.v4f32(<4 x float> %25)
  %33 = fcmp one <4 x float> %32, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %34 = tail call float @llvm.fabs.f32(float %31) #9
  %35 = fcmp one float %34, 0x7FF0000000000000
  %36 = shufflevector <4 x i1> %33, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %37 = and <4 x i1> %33, %36
  %38 = shufflevector <4 x i1> %37, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %39 = and <4 x i1> %37, %38
  %40 = extractelement <4 x i1> %39, i32 0
  %41 = and i1 %40, %35
  br i1 %41, label %42, label %264

42:                                               ; preds = %7
  %43 = fcmp olt float %31, 0.000000e+00
  br i1 %43, label %44, label %205

44:                                               ; preds = %42
  %45 = bitcast %"class.WTF::String"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45) #5
  %46 = bitcast %"class.WTF::StringAppend"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %46) #5
  %47 = tail call %"class.WTF::StringImpl"* @_ZN3WTF6String6NumberEf(float %31) #5
  %48 = icmp eq %"class.WTF::StringImpl"* %47, null
  br i1 %48, label %124, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 0
  %55 = load i32, i32* %54, align 4
  br i1 %53, label %56, label %66

56:                                               ; preds = %49
  %57 = zext i32 %55 to i33
  %58 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %57, i33 1) #5
  %59 = extractvalue { i33, i1 } %58, 1
  %60 = extractvalue { i33, i1 } %58, 0
  %61 = icmp slt i33 %60, 0
  %62 = or i1 %59, %61
  br i1 %62, label %63, label %64, !prof !2

63:                                               ; preds = %56
  tail call void @llvm.trap() #5
  unreachable

64:                                               ; preds = %56
  %65 = trunc i33 %60 to i32
  store i32 %65, i32* %54, align 4
  br label %66

66:                                               ; preds = %64, %49
  %67 = phi i32 [ %65, %64 ], [ %55, %49 ]
  %68 = load atomic i32, i32* %50 monotonic, align 4
  %69 = and i32 %68, 2
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %81

71:                                               ; preds = %66
  %72 = zext i32 %67 to i33
  %73 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %72, i33 1) #5
  %74 = extractvalue { i33, i1 } %73, 1
  %75 = extractvalue { i33, i1 } %73, 0
  %76 = icmp slt i33 %75, 0
  %77 = or i1 %74, %76
  br i1 %77, label %78, label %79, !prof !2

78:                                               ; preds = %71
  tail call void @llvm.trap() #5
  unreachable

79:                                               ; preds = %71
  %80 = trunc i33 %75 to i32
  store i32 %80, i32* %54, align 4
  br label %81

81:                                               ; preds = %79, %66
  %82 = phi i32 [ %80, %79 ], [ %67, %66 ]
  %83 = load atomic i32, i32* %50 monotonic, align 4
  %84 = and i32 %83, 2
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %88

86:                                               ; preds = %81
  %87 = add i32 %82, -1
  store i32 %87, i32* %54, align 4
  br label %88

88:                                               ; preds = %86, %81
  %89 = phi i32 [ %87, %86 ], [ %82, %81 ]
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %92

91:                                               ; preds = %88
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %47) #5
  br label %92

92:                                               ; preds = %88, %91
  %93 = load atomic i32, i32* %50 monotonic, align 4, !noalias !3
  %94 = and i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = load i32, i32* %54, align 4
  br i1 %95, label %97, label %107

97:                                               ; preds = %92
  %98 = zext i32 %96 to i33
  %99 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %98, i33 1) #5
  %100 = extractvalue { i33, i1 } %99, 1
  %101 = extractvalue { i33, i1 } %99, 0
  %102 = icmp slt i33 %101, 0
  %103 = or i1 %100, %102
  br i1 %103, label %104, label %105, !prof !2

104:                                              ; preds = %97
  tail call void @llvm.trap() #5, !noalias !3
  unreachable

105:                                              ; preds = %97
  %106 = trunc i33 %101 to i32
  store i32 %106, i32* %54, align 4, !noalias !3
  br label %107

107:                                              ; preds = %92, %105
  %108 = phi i32 [ %106, %105 ], [ %96, %92 ]
  %109 = bitcast %"class.WTF::StringAppend"* %9 to i64*
  store i64 ptrtoint ([22 x i8]* @.str to i64), i64* %109, align 8, !alias.scope !3
  %110 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %47, %"class.WTF::StringImpl"** %110, align 8, !alias.scope !3
  %111 = load atomic i32, i32* %50 monotonic, align 4, !noalias !3
  %112 = and i32 %111, 2
  %113 = icmp eq i32 %112, 0
  br i1 %113, label %114, label %128

114:                                              ; preds = %107
  %115 = zext i32 %108 to i33
  %116 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %115, i33 1) #5
  %117 = extractvalue { i33, i1 } %116, 1
  %118 = extractvalue { i33, i1 } %116, 0
  %119 = icmp slt i33 %118, 0
  %120 = or i1 %117, %119
  br i1 %120, label %121, label %122, !prof !2

121:                                              ; preds = %114
  tail call void @llvm.trap() #5, !noalias !3
  unreachable

122:                                              ; preds = %114
  %123 = trunc i33 %118 to i32
  store i32 %123, i32* %54, align 4, !noalias !3
  br label %128

124:                                              ; preds = %44
  %125 = bitcast %"class.WTF::StringAppend"* %9 to i64*
  store i64 ptrtoint ([22 x i8]* @.str to i64), i64* %125, align 8, !alias.scope !3
  %126 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %126, align 8, !alias.scope !3
  %127 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 1
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8** %127, align 8, !alias.scope !3
  br label %140

128:                                              ; preds = %122, %107
  %129 = phi i32 [ %123, %122 ], [ %108, %107 ]
  %130 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 1
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8** %130, align 8, !alias.scope !3
  %131 = load atomic i32, i32* %50 monotonic, align 4, !noalias !3
  %132 = and i32 %131, 2
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %136

134:                                              ; preds = %128
  %135 = add i32 %129, -1
  store i32 %135, i32* %54, align 4, !noalias !3
  br label %136

136:                                              ; preds = %134, %128
  %137 = phi i32 [ %135, %134 ], [ %129, %128 ]
  %138 = icmp eq i32 %137, 0
  br i1 %138, label %139, label %140

139:                                              ; preds = %136
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %47) #5, !noalias !3
  br label %140

140:                                              ; preds = %124, %136, %139
  %141 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"* nonnull %9)
  %142 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %141, %"class.WTF::StringImpl"** %142, align 8
  %143 = bitcast %"class.blink::ExceptionState"* %6 to void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)***
  %144 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*** %143, align 8
  %145 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)** %144, align 8
  call void %145(%"class.blink::ExceptionState"* %6, i32 1, %"class.WTF::String"* nonnull dereferenceable(8) %8) #5
  %146 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %142, align 8
  %147 = icmp eq %"class.WTF::StringImpl"* %146, null
  br i1 %147, label %161, label %148

148:                                              ; preds = %140
  %149 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %146, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %150 = load atomic i32, i32* %149 monotonic, align 4
  %151 = and i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %146, i64 0, i32 0
  %154 = load i32, i32* %153, align 4
  br i1 %152, label %155, label %157

155:                                              ; preds = %148
  %156 = add i32 %154, -1
  store i32 %156, i32* %153, align 4
  br label %157

157:                                              ; preds = %155, %148
  %158 = phi i32 [ %156, %155 ], [ %154, %148 ]
  %159 = icmp eq i32 %158, 0
  br i1 %159, label %160, label %161

160:                                              ; preds = %157
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %146) #5
  br label %161

161:                                              ; preds = %140, %157, %160
  %162 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %9, i64 0, i32 0, i32 1, i32 0, i32 0
  %163 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %162, align 8
  %164 = icmp eq %"class.WTF::StringImpl"* %163, null
  br i1 %164, label %178, label %165

165:                                              ; preds = %161
  %166 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %163, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %167 = load atomic i32, i32* %166 monotonic, align 4
  %168 = and i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %163, i64 0, i32 0
  %171 = load i32, i32* %170, align 4
  br i1 %169, label %172, label %174

172:                                              ; preds = %165
  %173 = add i32 %171, -1
  store i32 %173, i32* %170, align 4
  br label %174

174:                                              ; preds = %172, %165
  %175 = phi i32 [ %173, %172 ], [ %171, %165 ]
  %176 = icmp eq i32 %175, 0
  br i1 %176, label %177, label %178

177:                                              ; preds = %174
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %163) #5
  br label %178

178:                                              ; preds = %161, %174, %177
  br i1 %48, label %204, label %179

179:                                              ; preds = %178
  %180 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %181 = load atomic i32, i32* %180 monotonic, align 4
  %182 = and i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %47, i64 0, i32 0
  %185 = load i32, i32* %184, align 4
  br i1 %183, label %186, label %188

186:                                              ; preds = %179
  %187 = add i32 %185, -1
  store i32 %187, i32* %184, align 4
  br label %188

188:                                              ; preds = %186, %179
  %189 = phi i32 [ %187, %186 ], [ %185, %179 ]
  %190 = icmp eq i32 %189, 0
  br i1 %190, label %191, label %193

191:                                              ; preds = %188
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %47) #5
  %192 = load i32, i32* %184, align 4
  br label %193

193:                                              ; preds = %188, %191
  %194 = phi i32 [ %189, %188 ], [ %192, %191 ]
  %195 = load atomic i32, i32* %180 monotonic, align 4
  %196 = and i32 %195, 2
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %198, label %200

198:                                              ; preds = %193
  %199 = add i32 %194, -1
  store i32 %199, i32* %184, align 4
  br label %200

200:                                              ; preds = %198, %193
  %201 = phi i32 [ %199, %198 ], [ %194, %193 ]
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %203, label %204

203:                                              ; preds = %200
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %47) #5
  br label %204

204:                                              ; preds = %178, %200, %203
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %46) #5
  br label %262

205:                                              ; preds = %42
  %206 = bitcast <2 x float>* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %206) #5
  %207 = getelementptr inbounds <2 x float>, <2 x float>* %10, i64 0, i64 0
  %208 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %11, i64 0, i32 1
  %209 = extractelement <4 x float> %25, i32 0
  store float %209, float* %207, align 8
  %210 = extractelement <4 x float> %25, i32 1
  store float %210, float* %208, align 4
  %211 = bitcast <2 x float>* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %211) #5
  %212 = getelementptr inbounds <2 x float>, <2 x float>* %12, i64 0, i64 0
  %213 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %13, i64 0, i32 1
  %214 = extractelement <4 x float> %25, i32 2
  store float %214, float* %212, align 8
  %215 = extractelement <4 x float> %25, i32 3
  store float %215, float* %213, align 4
  %216 = bitcast %"class.blink::CanvasPath"* %0 to i1 (%"class.blink::CanvasPath"*)***
  %217 = load i1 (%"class.blink::CanvasPath"*)**, i1 (%"class.blink::CanvasPath"*)*** %216, align 8
  %218 = getelementptr inbounds i1 (%"class.blink::CanvasPath"*)*, i1 (%"class.blink::CanvasPath"*)** %217, i64 2
  %219 = load i1 (%"class.blink::CanvasPath"*)*, i1 (%"class.blink::CanvasPath"*)** %218, align 8
  %220 = tail call zeroext i1 %219(%"class.blink::CanvasPath"* %0) #5
  br i1 %220, label %233, label %221

221:                                              ; preds = %205
  %222 = bitcast %"class.blink::TransformationMatrix"* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %222) #5
  %223 = bitcast %"class.blink::CanvasPath"* %0 to void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)***
  %224 = load void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)**, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*** %223, align 8
  %225 = getelementptr inbounds void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)** %224, i64 3
  %226 = load void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)** %225, align 8
  call void %226(%"class.blink::TransformationMatrix"* nonnull sret %14, %"class.blink::CanvasPath"* %0) #5
  %227 = call <2 x float> @_ZNK5blink20TransformationMatrix8MapPointERKNS_10FloatPointE(%"class.blink::TransformationMatrix"* nonnull %14, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %11) #5
  store <2 x float> %227, <2 x float>* %10, align 8
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %222) #5
  %228 = bitcast %"class.blink::TransformationMatrix"* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %228) #5
  %229 = load void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)**, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*** %223, align 8
  %230 = getelementptr inbounds void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)** %229, i64 3
  %231 = load void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)*, void (%"class.blink::TransformationMatrix"*, %"class.blink::CanvasPath"*)** %230, align 8
  call void %231(%"class.blink::TransformationMatrix"* nonnull sret %15, %"class.blink::CanvasPath"* %0) #5
  %232 = call <2 x float> @_ZNK5blink20TransformationMatrix8MapPointERKNS_10FloatPointE(%"class.blink::TransformationMatrix"* nonnull %15, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %13) #5
  store <2 x float> %232, <2 x float>* %12, align 8
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %228) #5
  br label %233

233:                                              ; preds = %221, %205
  %234 = getelementptr inbounds %"class.blink::CanvasPath", %"class.blink::CanvasPath"* %0, i64 0, i32 2
  %235 = call zeroext i1 @_ZNK5blink4Path15HasCurrentPointEv(%"class.blink::Path"* %234) #5
  br i1 %235, label %237, label %236

236:                                              ; preds = %233
  call void @_ZN5blink4Path6MoveToERKNS_10FloatPointE(%"class.blink::Path"* %234, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %11) #5
  br label %261

237:                                              ; preds = %233
  %238 = call <2 x float> @_ZNK5blink4Path12CurrentPointEv(%"class.blink::Path"* %234) #5
  %239 = load float, float* %207, align 8
  %240 = extractelement <2 x float> %238, i32 0
  %241 = fcmp oeq float %239, %240
  br i1 %241, label %242, label %246

242:                                              ; preds = %237
  %243 = load float, float* %208, align 4
  %244 = extractelement <2 x float> %238, i32 1
  %245 = fcmp oeq float %243, %244
  br i1 %245, label %257, label %246

246:                                              ; preds = %237, %242
  %247 = load float, float* %212, align 8
  %248 = fcmp oeq float %239, %247
  br i1 %248, label %249, label %255

249:                                              ; preds = %246
  %250 = load float, float* %208, align 4
  %251 = load float, float* %213, align 4
  %252 = fcmp oeq float %250, %251
  %253 = fcmp oeq float %31, 0.000000e+00
  %254 = or i1 %253, %252
  br i1 %254, label %257, label %260

255:                                              ; preds = %246
  %256 = fcmp oeq float %31, 0.000000e+00
  br i1 %256, label %257, label %260

257:                                              ; preds = %242, %249, %255
  %258 = fpext float %209 to double
  %259 = fpext float %210 to double
  call void @_ZN5blink10CanvasPath6lineToEdd(%"class.blink::CanvasPath"* %0, double %258, double %259)
  br label %261

260:                                              ; preds = %249, %255
  call void @_ZN5blink4Path8AddArcToERKNS_10FloatPointES3_f(%"class.blink::Path"* %234, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %11, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %13, float %31) #5
  br label %261

261:                                              ; preds = %257, %260, %236
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %211) #5
  br label %262

262:                                              ; preds = %204, %261
  %263 = phi i8* [ %206, %261 ], [ %45, %204 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %263) #5
  br label %264

264:                                              ; preds = %262, %7
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF6String6NumberEf(float) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter.34", align 8
  %3 = alloca %"class.WTF::StringTypeAdapter.34", align 8
  %4 = alloca i8*, align 8
  %5 = alloca i16*, align 8
  %6 = bitcast %"class.WTF::StringTypeAdapter.34"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #5
  %7 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false) #5
  %8 = load i8*, i8** %7, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.34"* nonnull %3, i8* %8) #5
  %9 = bitcast %"class.WTF::StringTypeAdapter.34"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #5
  %10 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false) #5
  %11 = load i8*, i8** %10, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.34"* nonnull %2, i8* %11) #5
  %12 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  %13 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %12, align 8
  %14 = icmp eq %"class.WTF::StringImpl"* %13, null
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %16 = select i1 %14, %"class.WTF::StringImpl"* %15, %"class.WTF::StringImpl"* %13
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %16, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #5
  br i1 %20, label %57, label %21

21:                                               ; preds = %1
  %22 = bitcast i8** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #5
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %4, align 8
  %23 = call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %24 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %23, i8** nonnull dereferenceable(8) %4) #5
  %25 = load i8*, i8** %4, align 8
  call void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPh(%"class.WTF::StringAppend"* %0, i8* %25)
  %26 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %26, label %93, label %27

27:                                               ; preds = %21
  %28 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %29 = load atomic i32, i32* %28 monotonic, align 4
  %30 = and i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %33 = load i32, i32* %32, align 4
  br i1 %31, label %34, label %44

34:                                               ; preds = %27
  %35 = zext i32 %33 to i33
  %36 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %35, i33 1) #5
  %37 = extractvalue { i33, i1 } %36, 1
  %38 = extractvalue { i33, i1 } %36, 0
  %39 = icmp slt i33 %38, 0
  %40 = or i1 %37, %39
  br i1 %40, label %41, label %42, !prof !2

41:                                               ; preds = %34
  call void @llvm.trap() #5
  unreachable

42:                                               ; preds = %34
  %43 = trunc i33 %38 to i32
  store i32 %43, i32* %32, align 4
  br label %44

44:                                               ; preds = %27, %42
  %45 = phi i32 [ %43, %42 ], [ %33, %27 ]
  %46 = ptrtoint %"class.WTF::StringImpl"* %24 to i64
  %47 = load atomic i32, i32* %28 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %53

50:                                               ; preds = %44
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %52 = add i32 %45, -1
  store i32 %52, i32* %51, align 4
  br label %53

53:                                               ; preds = %50, %44
  %54 = phi i32 [ %52, %50 ], [ %45, %44 ]
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %93

56:                                               ; preds = %53
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %24) #5
  br label %93

57:                                               ; preds = %1
  %58 = bitcast i16** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %58) #5
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %5, align 8
  %59 = call i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"* %0)
  %60 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %59, i16** nonnull dereferenceable(8) %5) #5
  %61 = load i16*, i16** %5, align 8
  call void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPDs(%"class.WTF::StringAppend"* %0, i16* %61)
  %62 = icmp eq %"class.WTF::StringImpl"* %60, null
  br i1 %62, label %93, label %63

63:                                               ; preds = %57
  %64 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %65 = load atomic i32, i32* %64 monotonic, align 4
  %66 = and i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %69 = load i32, i32* %68, align 4
  br i1 %67, label %70, label %80

70:                                               ; preds = %63
  %71 = zext i32 %69 to i33
  %72 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %71, i33 1) #5
  %73 = extractvalue { i33, i1 } %72, 1
  %74 = extractvalue { i33, i1 } %72, 0
  %75 = icmp slt i33 %74, 0
  %76 = or i1 %73, %75
  br i1 %76, label %77, label %78, !prof !2

77:                                               ; preds = %70
  call void @llvm.trap() #5
  unreachable

78:                                               ; preds = %70
  %79 = trunc i33 %74 to i32
  store i32 %79, i32* %68, align 4
  br label %80

80:                                               ; preds = %63, %78
  %81 = phi i32 [ %79, %78 ], [ %69, %63 ]
  %82 = ptrtoint %"class.WTF::StringImpl"* %60 to i64
  %83 = load atomic i32, i32* %64 monotonic, align 4
  %84 = and i32 %83, 2
  %85 = icmp eq i32 %84, 0
  br i1 %85, label %86, label %89

86:                                               ; preds = %80
  %87 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %60, i64 0, i32 0
  %88 = add i32 %81, -1
  store i32 %88, i32* %87, align 4
  br label %89

89:                                               ; preds = %86, %80
  %90 = phi i32 [ %88, %86 ], [ %81, %80 ]
  %91 = icmp eq i32 %90, 0
  br i1 %91, label %92, label %93

92:                                               ; preds = %89
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %60) #5
  br label %93

93:                                               ; preds = %92, %89, %57, %56, %53, %21
  %94 = phi i8* [ %22, %21 ], [ %22, %53 ], [ %22, %56 ], [ %58, %57 ], [ %58, %89 ], [ %58, %92 ]
  %95 = phi i64 [ 0, %21 ], [ %46, %53 ], [ %46, %56 ], [ 0, %57 ], [ %82, %89 ], [ %82, %92 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %94) #5
  %96 = inttoptr i64 %95 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %96
}

declare <2 x float> @_ZNK5blink4Path12CurrentPointEv(%"class.blink::Path"*) local_unnamed_addr #1

declare void @_ZN5blink4Path8AddArcToERKNS_10FloatPointES3_f(%"class.blink::Path"*, %"class.blink::FloatPoint"* dereferenceable(8), %"class.blink::FloatPoint"* dereferenceable(8), float) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10CanvasPath3arcEdddddbRNS_14ExceptionStateE(%"class.blink::CanvasPath"*, double, double, double, double, double, i1 zeroext, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %9 = alloca %"class.WTF::String", align 8
  %10 = alloca %"class.WTF::StringAppend", align 8
  %11 = alloca %"class.blink::FloatPoint", align 4
  %12 = insertelement <4 x double> undef, double %1, i32 0
  %13 = insertelement <4 x double> %12, double %2, i32 1
  %14 = insertelement <4 x double> %13, double %3, i32 2
  %15 = insertelement <4 x double> %14, double %4, i32 3
  %16 = fcmp ult <4 x double> %15, <double 0xC7EFFFFFE0000000, double 0xC7EFFFFFE0000000, double 0xC7EFFFFFE0000000, double 0xC7EFFFFFE0000000>
  %17 = fcmp ugt <4 x double> %15, <double 0x47EFFFFFE0000000, double 0x47EFFFFFE0000000, double 0x47EFFFFFE0000000, double 0x47EFFFFFE0000000>
  %18 = fptrunc <4 x double> %15 to <4 x float>
  %19 = select <4 x i1> %16, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %18
  %20 = select <4 x i1> %16, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %21 = select <4 x i1> %17, <4 x float> %20, <4 x float> %19
  %22 = fcmp ult double %5, 0xC7EFFFFFE0000000
  %23 = fcmp ugt double %5, 0x47EFFFFFE0000000
  %24 = fptrunc double %5 to float
  %25 = select i1 %22, float 0xFFF0000000000000, float %24
  %26 = select i1 %22, float 0x7FF8000000000000, float 0x7FF0000000000000
  %27 = select i1 %23, float %26, float %25
  %28 = call <4 x float> @llvm.fabs.v4f32(<4 x float> %21)
  %29 = fcmp one <4 x float> %28, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %30 = tail call float @llvm.fabs.f32(float %27) #9
  %31 = fcmp one float %30, 0x7FF0000000000000
  %32 = shufflevector <4 x i1> %29, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %33 = and <4 x i1> %29, %32
  %34 = shufflevector <4 x i1> %33, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %35 = and <4 x i1> %33, %34
  %36 = extractelement <4 x i1> %35, i32 0
  %37 = and i1 %36, %31
  br i1 %37, label %38, label %272

38:                                               ; preds = %8
  %39 = extractelement <4 x float> %21, i32 2
  %40 = fcmp olt float %39, 0.000000e+00
  br i1 %40, label %41, label %202

41:                                               ; preds = %38
  %42 = bitcast %"class.WTF::String"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42) #5
  %43 = bitcast %"class.WTF::StringAppend"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %43) #5
  %44 = tail call %"class.WTF::StringImpl"* @_ZN3WTF6String6NumberEf(float %39) #5
  %45 = icmp eq %"class.WTF::StringImpl"* %44, null
  br i1 %45, label %121, label %46

46:                                               ; preds = %41
  %47 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %48 = load atomic i32, i32* %47 monotonic, align 4
  %49 = and i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 0
  %52 = load i32, i32* %51, align 4
  br i1 %50, label %53, label %63

53:                                               ; preds = %46
  %54 = zext i32 %52 to i33
  %55 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %54, i33 1) #5
  %56 = extractvalue { i33, i1 } %55, 1
  %57 = extractvalue { i33, i1 } %55, 0
  %58 = icmp slt i33 %57, 0
  %59 = or i1 %56, %58
  br i1 %59, label %60, label %61, !prof !2

60:                                               ; preds = %53
  tail call void @llvm.trap() #5
  unreachable

61:                                               ; preds = %53
  %62 = trunc i33 %57 to i32
  store i32 %62, i32* %51, align 4
  br label %63

63:                                               ; preds = %61, %46
  %64 = phi i32 [ %62, %61 ], [ %52, %46 ]
  %65 = load atomic i32, i32* %47 monotonic, align 4
  %66 = and i32 %65, 2
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %68, label %78

68:                                               ; preds = %63
  %69 = zext i32 %64 to i33
  %70 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %69, i33 1) #5
  %71 = extractvalue { i33, i1 } %70, 1
  %72 = extractvalue { i33, i1 } %70, 0
  %73 = icmp slt i33 %72, 0
  %74 = or i1 %71, %73
  br i1 %74, label %75, label %76, !prof !2

75:                                               ; preds = %68
  tail call void @llvm.trap() #5
  unreachable

76:                                               ; preds = %68
  %77 = trunc i33 %72 to i32
  store i32 %77, i32* %51, align 4
  br label %78

78:                                               ; preds = %76, %63
  %79 = phi i32 [ %77, %76 ], [ %64, %63 ]
  %80 = load atomic i32, i32* %47 monotonic, align 4
  %81 = and i32 %80, 2
  %82 = icmp eq i32 %81, 0
  br i1 %82, label %83, label %85

83:                                               ; preds = %78
  %84 = add i32 %79, -1
  store i32 %84, i32* %51, align 4
  br label %85

85:                                               ; preds = %83, %78
  %86 = phi i32 [ %84, %83 ], [ %79, %78 ]
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %89

88:                                               ; preds = %85
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %44) #5
  br label %89

89:                                               ; preds = %85, %88
  %90 = load atomic i32, i32* %47 monotonic, align 4, !noalias !6
  %91 = and i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = load i32, i32* %51, align 4
  br i1 %92, label %94, label %104

94:                                               ; preds = %89
  %95 = zext i32 %93 to i33
  %96 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %95, i33 1) #5
  %97 = extractvalue { i33, i1 } %96, 1
  %98 = extractvalue { i33, i1 } %96, 0
  %99 = icmp slt i33 %98, 0
  %100 = or i1 %97, %99
  br i1 %100, label %101, label %102, !prof !2

101:                                              ; preds = %94
  tail call void @llvm.trap() #5, !noalias !6
  unreachable

102:                                              ; preds = %94
  %103 = trunc i33 %98 to i32
  store i32 %103, i32* %51, align 4, !noalias !6
  br label %104

104:                                              ; preds = %89, %102
  %105 = phi i32 [ %103, %102 ], [ %93, %89 ]
  %106 = bitcast %"class.WTF::StringAppend"* %10 to i64*
  store i64 ptrtoint ([22 x i8]* @.str to i64), i64* %106, align 8, !alias.scope !6
  %107 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %10, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %44, %"class.WTF::StringImpl"** %107, align 8, !alias.scope !6
  %108 = load atomic i32, i32* %47 monotonic, align 4, !noalias !6
  %109 = and i32 %108, 2
  %110 = icmp eq i32 %109, 0
  br i1 %110, label %111, label %125

111:                                              ; preds = %104
  %112 = zext i32 %105 to i33
  %113 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %112, i33 1) #5
  %114 = extractvalue { i33, i1 } %113, 1
  %115 = extractvalue { i33, i1 } %113, 0
  %116 = icmp slt i33 %115, 0
  %117 = or i1 %114, %116
  br i1 %117, label %118, label %119, !prof !2

118:                                              ; preds = %111
  tail call void @llvm.trap() #5, !noalias !6
  unreachable

119:                                              ; preds = %111
  %120 = trunc i33 %115 to i32
  store i32 %120, i32* %51, align 4, !noalias !6
  br label %125

121:                                              ; preds = %41
  %122 = bitcast %"class.WTF::StringAppend"* %10 to i64*
  store i64 ptrtoint ([22 x i8]* @.str to i64), i64* %122, align 8, !alias.scope !6
  %123 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %10, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %123, align 8, !alias.scope !6
  %124 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %10, i64 0, i32 1
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8** %124, align 8, !alias.scope !6
  br label %137

125:                                              ; preds = %119, %104
  %126 = phi i32 [ %120, %119 ], [ %105, %104 ]
  %127 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %10, i64 0, i32 1
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8** %127, align 8, !alias.scope !6
  %128 = load atomic i32, i32* %47 monotonic, align 4, !noalias !6
  %129 = and i32 %128, 2
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %133

131:                                              ; preds = %125
  %132 = add i32 %126, -1
  store i32 %132, i32* %51, align 4, !noalias !6
  br label %133

133:                                              ; preds = %131, %125
  %134 = phi i32 [ %132, %131 ], [ %126, %125 ]
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %137

136:                                              ; preds = %133
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %44) #5, !noalias !6
  br label %137

137:                                              ; preds = %121, %133, %136
  %138 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"* nonnull %10)
  %139 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %9, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %138, %"class.WTF::StringImpl"** %139, align 8
  %140 = bitcast %"class.blink::ExceptionState"* %7 to void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)***
  %141 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*** %140, align 8
  %142 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)** %141, align 8
  call void %142(%"class.blink::ExceptionState"* %7, i32 1, %"class.WTF::String"* nonnull dereferenceable(8) %9) #5
  %143 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %139, align 8
  %144 = icmp eq %"class.WTF::StringImpl"* %143, null
  br i1 %144, label %158, label %145

145:                                              ; preds = %137
  %146 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %143, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %147 = load atomic i32, i32* %146 monotonic, align 4
  %148 = and i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %143, i64 0, i32 0
  %151 = load i32, i32* %150, align 4
  br i1 %149, label %152, label %154

152:                                              ; preds = %145
  %153 = add i32 %151, -1
  store i32 %153, i32* %150, align 4
  br label %154

154:                                              ; preds = %152, %145
  %155 = phi i32 [ %153, %152 ], [ %151, %145 ]
  %156 = icmp eq i32 %155, 0
  br i1 %156, label %157, label %158

157:                                              ; preds = %154
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %143) #5
  br label %158

158:                                              ; preds = %137, %154, %157
  %159 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %10, i64 0, i32 0, i32 1, i32 0, i32 0
  %160 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %159, align 8
  %161 = icmp eq %"class.WTF::StringImpl"* %160, null
  br i1 %161, label %175, label %162

162:                                              ; preds = %158
  %163 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %160, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %164 = load atomic i32, i32* %163 monotonic, align 4
  %165 = and i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %160, i64 0, i32 0
  %168 = load i32, i32* %167, align 4
  br i1 %166, label %169, label %171

169:                                              ; preds = %162
  %170 = add i32 %168, -1
  store i32 %170, i32* %167, align 4
  br label %171

171:                                              ; preds = %169, %162
  %172 = phi i32 [ %170, %169 ], [ %168, %162 ]
  %173 = icmp eq i32 %172, 0
  br i1 %173, label %174, label %175

174:                                              ; preds = %171
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %160) #5
  br label %175

175:                                              ; preds = %158, %171, %174
  br i1 %45, label %201, label %176

176:                                              ; preds = %175
  %177 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %178 = load atomic i32, i32* %177 monotonic, align 4
  %179 = and i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %44, i64 0, i32 0
  %182 = load i32, i32* %181, align 4
  br i1 %180, label %183, label %185

183:                                              ; preds = %176
  %184 = add i32 %182, -1
  store i32 %184, i32* %181, align 4
  br label %185

185:                                              ; preds = %183, %176
  %186 = phi i32 [ %184, %183 ], [ %182, %176 ]
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %190

188:                                              ; preds = %185
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %44) #5
  %189 = load i32, i32* %181, align 4
  br label %190

190:                                              ; preds = %185, %188
  %191 = phi i32 [ %186, %185 ], [ %189, %188 ]
  %192 = load atomic i32, i32* %177 monotonic, align 4
  %193 = and i32 %192, 2
  %194 = icmp eq i32 %193, 0
  br i1 %194, label %195, label %197

195:                                              ; preds = %190
  %196 = add i32 %191, -1
  store i32 %196, i32* %181, align 4
  br label %197

197:                                              ; preds = %195, %190
  %198 = phi i32 [ %196, %195 ], [ %191, %190 ]
  %199 = icmp eq i32 %198, 0
  br i1 %199, label %200, label %201

200:                                              ; preds = %197
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %44) #5
  br label %201

201:                                              ; preds = %175, %197, %200
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %43) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42) #5
  br label %272

202:                                              ; preds = %38
  %203 = bitcast %"class.blink::CanvasPath"* %0 to i1 (%"class.blink::CanvasPath"*)***
  %204 = load i1 (%"class.blink::CanvasPath"*)**, i1 (%"class.blink::CanvasPath"*)*** %203, align 8
  %205 = getelementptr inbounds i1 (%"class.blink::CanvasPath"*)*, i1 (%"class.blink::CanvasPath"*)** %204, i64 2
  %206 = load i1 (%"class.blink::CanvasPath"*)*, i1 (%"class.blink::CanvasPath"*)** %205, align 8
  %207 = tail call zeroext i1 %206(%"class.blink::CanvasPath"* %0) #5
  br i1 %207, label %208, label %272

208:                                              ; preds = %202
  %209 = fcmp oeq float %39, 0.000000e+00
  %210 = extractelement <4 x float> %21, i32 3
  %211 = fcmp oeq float %210, %27
  %212 = or i1 %209, %211
  br i1 %212, label %213, label %225

213:                                              ; preds = %208
  %214 = extractelement <4 x float> %21, i32 3
  %215 = tail call float @cosf(float %214) #5
  %216 = fmul float %39, %215
  %217 = extractelement <4 x float> %21, i32 0
  %218 = fadd float %217, %216
  %219 = fpext float %218 to double
  %220 = tail call float @sinf(float %214) #5
  %221 = fmul float %39, %220
  %222 = extractelement <4 x float> %21, i32 1
  %223 = fadd float %222, %221
  %224 = fpext float %223 to double
  tail call void @_ZN5blink10CanvasPath6lineToEdd(%"class.blink::CanvasPath"* %0, double %219, double %224)
  br label %272

225:                                              ; preds = %208
  %226 = tail call float @fmodf(float %210, float 0x401921FB60000000) #5
  %227 = fcmp olt float %226, 0.000000e+00
  br i1 %227, label %228, label %233

228:                                              ; preds = %225
  %229 = fadd float %226, 0x401921FB60000000
  %230 = fcmp ult float %229, 0x401921FB60000000
  br i1 %230, label %233, label %231

231:                                              ; preds = %228
  %232 = fadd float %229, 0xC01921FB60000000
  br label %233

233:                                              ; preds = %225, %228, %231
  %234 = phi float [ %232, %231 ], [ %229, %228 ], [ %226, %225 ]
  %235 = extractelement <4 x float> %21, i32 3
  %236 = fsub float %234, %235
  %237 = fadd float %27, %236
  %238 = getelementptr inbounds %"class.blink::CanvasPath", %"class.blink::CanvasPath"* %0, i64 0, i32 2
  %239 = bitcast %"class.blink::FloatPoint"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %239) #5
  %240 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %11, i64 0, i32 0
  %241 = extractelement <4 x float> %21, i32 0
  store float %241, float* %240, align 4
  %242 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %11, i64 0, i32 1
  %243 = extractelement <4 x float> %21, i32 1
  store float %243, float* %242, align 4
  %244 = fsub float %237, %234
  %245 = fcmp ult float %244, 0x401921FB60000000
  %246 = or i1 %245, %6
  br i1 %246, label %249, label %247

247:                                              ; preds = %233
  %248 = fadd float %234, 0x401921FB60000000
  br label %270

249:                                              ; preds = %233
  %250 = xor i1 %6, true
  %251 = fsub float %234, %237
  %252 = fcmp ult float %251, 0x401921FB60000000
  %253 = or i1 %252, %250
  br i1 %253, label %256, label %254

254:                                              ; preds = %249
  %255 = fadd float %234, 0xC01921FB60000000
  br label %270

256:                                              ; preds = %249
  %257 = fcmp ogt float %234, %237
  %258 = and i1 %257, %250
  br i1 %258, label %259, label %263

259:                                              ; preds = %256
  %260 = tail call float @fmodf(float %251, float 0x401921FB60000000) #5
  %261 = fsub float 0x401921FB60000000, %260
  %262 = fadd float %234, %261
  br label %270

263:                                              ; preds = %256
  %264 = fcmp olt float %234, %237
  %265 = and i1 %264, %6
  br i1 %265, label %266, label %270

266:                                              ; preds = %263
  %267 = tail call float @fmodf(float %244, float 0x401921FB60000000) #5
  %268 = fsub float 0x401921FB60000000, %267
  %269 = fsub float %234, %268
  br label %270

270:                                              ; preds = %247, %254, %259, %263, %266
  %271 = phi float [ %255, %254 ], [ %269, %266 ], [ %237, %263 ], [ %262, %259 ], [ %248, %247 ]
  call void @_ZN5blink4Path6AddArcERKNS_10FloatPointEfff(%"class.blink::Path"* %238, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %11, float %39, float %234, float %271) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %239) #5
  br label %272

272:                                              ; preds = %202, %8, %270, %213, %201
  ret void
}

; Function Attrs: nofree nounwind
declare float @cosf(float) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare float @sinf(float) local_unnamed_addr #4

declare void @_ZN5blink4Path6AddArcERKNS_10FloatPointEfff(%"class.blink::Path"*, %"class.blink::FloatPoint"* dereferenceable(8), float, float, float) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10CanvasPath7ellipseEdddddddbRNS_14ExceptionStateE(%"class.blink::CanvasPath"*, double, double, double, double, double, double, double, i1 zeroext, %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #2 align 2 {
  %11 = alloca %"class.blink::AffineTransform", align 8
  %12 = alloca <2 x float>, align 8
  %13 = alloca <2 x float>, align 8
  %14 = alloca <2 x float>, align 8
  %15 = alloca <2 x float>, align 8
  %16 = alloca %"class.WTF::String", align 8
  %17 = alloca %"class.WTF::StringAppend", align 8
  %18 = alloca %"class.WTF::String", align 8
  %19 = alloca %"class.WTF::StringAppend", align 8
  %20 = alloca %"class.blink::FloatPoint", align 4
  %21 = insertelement <4 x double> undef, double %1, i32 0
  %22 = insertelement <4 x double> %21, double %2, i32 1
  %23 = insertelement <4 x double> %22, double %3, i32 2
  %24 = insertelement <4 x double> %23, double %4, i32 3
  %25 = fcmp ult <4 x double> %24, <double 0xC7EFFFFFE0000000, double 0xC7EFFFFFE0000000, double 0xC7EFFFFFE0000000, double 0xC7EFFFFFE0000000>
  %26 = fcmp ugt <4 x double> %24, <double 0x47EFFFFFE0000000, double 0x47EFFFFFE0000000, double 0x47EFFFFFE0000000, double 0x47EFFFFFE0000000>
  %27 = fptrunc <4 x double> %24 to <4 x float>
  %28 = select <4 x i1> %25, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %27
  %29 = select <4 x i1> %25, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %30 = select <4 x i1> %26, <4 x float> %29, <4 x float> %28
  %31 = fcmp ult double %5, 0xC7EFFFFFE0000000
  %32 = fcmp ugt double %5, 0x47EFFFFFE0000000
  %33 = fptrunc double %5 to float
  %34 = select i1 %31, float 0xFFF0000000000000, float %33
  %35 = select i1 %31, float 0x7FF8000000000000, float 0x7FF0000000000000
  %36 = select i1 %32, float %35, float %34
  %37 = fcmp ult double %6, 0xC7EFFFFFE0000000
  %38 = fcmp ugt double %6, 0x47EFFFFFE0000000
  %39 = fptrunc double %6 to float
  %40 = select i1 %37, float 0xFFF0000000000000, float %39
  %41 = select i1 %37, float 0x7FF8000000000000, float 0x7FF0000000000000
  %42 = select i1 %38, float %41, float %40
  %43 = fcmp ult double %7, 0xC7EFFFFFE0000000
  %44 = fcmp ugt double %7, 0x47EFFFFFE0000000
  %45 = fptrunc double %7 to float
  %46 = select i1 %43, float 0xFFF0000000000000, float %45
  %47 = select i1 %43, float 0x7FF8000000000000, float 0x7FF0000000000000
  %48 = select i1 %44, float %47, float %46
  %49 = call <4 x float> @llvm.fabs.v4f32(<4 x float> %30)
  %50 = fcmp one <4 x float> %49, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %51 = tail call float @llvm.fabs.f32(float %36) #9
  %52 = fcmp one float %51, 0x7FF0000000000000
  %53 = tail call float @llvm.fabs.f32(float %42) #9
  %54 = fcmp one float %53, 0x7FF0000000000000
  %55 = tail call float @llvm.fabs.f32(float %48) #9
  %56 = fcmp one float %55, 0x7FF0000000000000
  %57 = shufflevector <4 x i1> %50, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %58 = and <4 x i1> %50, %57
  %59 = shufflevector <4 x i1> %58, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %60 = and <4 x i1> %58, %59
  %61 = extractelement <4 x i1> %60, i32 0
  %62 = and i1 %61, %52
  %63 = and i1 %62, %54
  %64 = and i1 %63, %56
  br i1 %64, label %65, label %539

65:                                               ; preds = %10
  %66 = extractelement <4 x float> %30, i32 2
  %67 = fcmp olt float %66, 0.000000e+00
  br i1 %67, label %68, label %229

68:                                               ; preds = %65
  %69 = bitcast %"class.WTF::String"* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69) #5
  %70 = bitcast %"class.WTF::StringAppend"* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %70) #5
  %71 = tail call %"class.WTF::StringImpl"* @_ZN3WTF6String6NumberEf(float %66) #5
  %72 = icmp eq %"class.WTF::StringImpl"* %71, null
  br i1 %72, label %148, label %73

73:                                               ; preds = %68
  %74 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %75 = load atomic i32, i32* %74 monotonic, align 4
  %76 = and i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 0
  %79 = load i32, i32* %78, align 4
  br i1 %77, label %80, label %90

80:                                               ; preds = %73
  %81 = zext i32 %79 to i33
  %82 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %81, i33 1) #5
  %83 = extractvalue { i33, i1 } %82, 1
  %84 = extractvalue { i33, i1 } %82, 0
  %85 = icmp slt i33 %84, 0
  %86 = or i1 %83, %85
  br i1 %86, label %87, label %88, !prof !2

87:                                               ; preds = %80
  tail call void @llvm.trap() #5
  unreachable

88:                                               ; preds = %80
  %89 = trunc i33 %84 to i32
  store i32 %89, i32* %78, align 4
  br label %90

90:                                               ; preds = %88, %73
  %91 = phi i32 [ %89, %88 ], [ %79, %73 ]
  %92 = load atomic i32, i32* %74 monotonic, align 4
  %93 = and i32 %92, 2
  %94 = icmp eq i32 %93, 0
  br i1 %94, label %95, label %105

95:                                               ; preds = %90
  %96 = zext i32 %91 to i33
  %97 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %96, i33 1) #5
  %98 = extractvalue { i33, i1 } %97, 1
  %99 = extractvalue { i33, i1 } %97, 0
  %100 = icmp slt i33 %99, 0
  %101 = or i1 %98, %100
  br i1 %101, label %102, label %103, !prof !2

102:                                              ; preds = %95
  tail call void @llvm.trap() #5
  unreachable

103:                                              ; preds = %95
  %104 = trunc i33 %99 to i32
  store i32 %104, i32* %78, align 4
  br label %105

105:                                              ; preds = %103, %90
  %106 = phi i32 [ %104, %103 ], [ %91, %90 ]
  %107 = load atomic i32, i32* %74 monotonic, align 4
  %108 = and i32 %107, 2
  %109 = icmp eq i32 %108, 0
  br i1 %109, label %110, label %112

110:                                              ; preds = %105
  %111 = add i32 %106, -1
  store i32 %111, i32* %78, align 4
  br label %112

112:                                              ; preds = %110, %105
  %113 = phi i32 [ %111, %110 ], [ %106, %105 ]
  %114 = icmp eq i32 %113, 0
  br i1 %114, label %115, label %116

115:                                              ; preds = %112
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %71) #5
  br label %116

116:                                              ; preds = %112, %115
  %117 = load atomic i32, i32* %74 monotonic, align 4, !noalias !9
  %118 = and i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = load i32, i32* %78, align 4
  br i1 %119, label %121, label %131

121:                                              ; preds = %116
  %122 = zext i32 %120 to i33
  %123 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %122, i33 1) #5
  %124 = extractvalue { i33, i1 } %123, 1
  %125 = extractvalue { i33, i1 } %123, 0
  %126 = icmp slt i33 %125, 0
  %127 = or i1 %124, %126
  br i1 %127, label %128, label %129, !prof !2

128:                                              ; preds = %121
  tail call void @llvm.trap() #5, !noalias !9
  unreachable

129:                                              ; preds = %121
  %130 = trunc i33 %125 to i32
  store i32 %130, i32* %78, align 4, !noalias !9
  br label %131

131:                                              ; preds = %116, %129
  %132 = phi i32 [ %130, %129 ], [ %120, %116 ]
  %133 = bitcast %"class.WTF::StringAppend"* %17 to i64*
  store i64 ptrtoint ([33 x i8]* @.str.2 to i64), i64* %133, align 8, !alias.scope !9
  %134 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %17, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %71, %"class.WTF::StringImpl"** %134, align 8, !alias.scope !9
  %135 = load atomic i32, i32* %74 monotonic, align 4, !noalias !9
  %136 = and i32 %135, 2
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %152

138:                                              ; preds = %131
  %139 = zext i32 %132 to i33
  %140 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %139, i33 1) #5
  %141 = extractvalue { i33, i1 } %140, 1
  %142 = extractvalue { i33, i1 } %140, 0
  %143 = icmp slt i33 %142, 0
  %144 = or i1 %141, %143
  br i1 %144, label %145, label %146, !prof !2

145:                                              ; preds = %138
  tail call void @llvm.trap() #5, !noalias !9
  unreachable

146:                                              ; preds = %138
  %147 = trunc i33 %142 to i32
  store i32 %147, i32* %78, align 4, !noalias !9
  br label %152

148:                                              ; preds = %68
  %149 = bitcast %"class.WTF::StringAppend"* %17 to i64*
  store i64 ptrtoint ([33 x i8]* @.str.2 to i64), i64* %149, align 8, !alias.scope !9
  %150 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %17, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %150, align 8, !alias.scope !9
  %151 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %17, i64 0, i32 1
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8** %151, align 8, !alias.scope !9
  br label %164

152:                                              ; preds = %146, %131
  %153 = phi i32 [ %147, %146 ], [ %132, %131 ]
  %154 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %17, i64 0, i32 1
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8** %154, align 8, !alias.scope !9
  %155 = load atomic i32, i32* %74 monotonic, align 4, !noalias !9
  %156 = and i32 %155, 2
  %157 = icmp eq i32 %156, 0
  br i1 %157, label %158, label %160

158:                                              ; preds = %152
  %159 = add i32 %153, -1
  store i32 %159, i32* %78, align 4, !noalias !9
  br label %160

160:                                              ; preds = %158, %152
  %161 = phi i32 [ %159, %158 ], [ %153, %152 ]
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %164

163:                                              ; preds = %160
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %71) #5, !noalias !9
  br label %164

164:                                              ; preds = %148, %160, %163
  %165 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"* nonnull %17)
  %166 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %16, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %165, %"class.WTF::StringImpl"** %166, align 8
  %167 = bitcast %"class.blink::ExceptionState"* %9 to void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)***
  %168 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*** %167, align 8
  %169 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)** %168, align 8
  call void %169(%"class.blink::ExceptionState"* %9, i32 1, %"class.WTF::String"* nonnull dereferenceable(8) %16) #5
  %170 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %166, align 8
  %171 = icmp eq %"class.WTF::StringImpl"* %170, null
  br i1 %171, label %185, label %172

172:                                              ; preds = %164
  %173 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %170, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %174 = load atomic i32, i32* %173 monotonic, align 4
  %175 = and i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %170, i64 0, i32 0
  %178 = load i32, i32* %177, align 4
  br i1 %176, label %179, label %181

179:                                              ; preds = %172
  %180 = add i32 %178, -1
  store i32 %180, i32* %177, align 4
  br label %181

181:                                              ; preds = %179, %172
  %182 = phi i32 [ %180, %179 ], [ %178, %172 ]
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %185

184:                                              ; preds = %181
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %170) #5
  br label %185

185:                                              ; preds = %164, %181, %184
  %186 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %17, i64 0, i32 0, i32 1, i32 0, i32 0
  %187 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %186, align 8
  %188 = icmp eq %"class.WTF::StringImpl"* %187, null
  br i1 %188, label %202, label %189

189:                                              ; preds = %185
  %190 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %187, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %191 = load atomic i32, i32* %190 monotonic, align 4
  %192 = and i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %187, i64 0, i32 0
  %195 = load i32, i32* %194, align 4
  br i1 %193, label %196, label %198

196:                                              ; preds = %189
  %197 = add i32 %195, -1
  store i32 %197, i32* %194, align 4
  br label %198

198:                                              ; preds = %196, %189
  %199 = phi i32 [ %197, %196 ], [ %195, %189 ]
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %201, label %202

201:                                              ; preds = %198
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %187) #5
  br label %202

202:                                              ; preds = %185, %198, %201
  br i1 %72, label %228, label %203

203:                                              ; preds = %202
  %204 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %205 = load atomic i32, i32* %204 monotonic, align 4
  %206 = and i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %71, i64 0, i32 0
  %209 = load i32, i32* %208, align 4
  br i1 %207, label %210, label %212

210:                                              ; preds = %203
  %211 = add i32 %209, -1
  store i32 %211, i32* %208, align 4
  br label %212

212:                                              ; preds = %210, %203
  %213 = phi i32 [ %211, %210 ], [ %209, %203 ]
  %214 = icmp eq i32 %213, 0
  br i1 %214, label %215, label %217

215:                                              ; preds = %212
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %71) #5
  %216 = load i32, i32* %208, align 4
  br label %217

217:                                              ; preds = %212, %215
  %218 = phi i32 [ %213, %212 ], [ %216, %215 ]
  %219 = load atomic i32, i32* %204 monotonic, align 4
  %220 = and i32 %219, 2
  %221 = icmp eq i32 %220, 0
  br i1 %221, label %222, label %224

222:                                              ; preds = %217
  %223 = add i32 %218, -1
  store i32 %223, i32* %208, align 4
  br label %224

224:                                              ; preds = %222, %217
  %225 = phi i32 [ %223, %222 ], [ %218, %217 ]
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %227, label %228

227:                                              ; preds = %224
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %71) #5
  br label %228

228:                                              ; preds = %202, %224, %227
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %70) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69) #5
  br label %539

229:                                              ; preds = %65
  %230 = extractelement <4 x float> %30, i32 3
  %231 = fcmp olt float %230, 0.000000e+00
  br i1 %231, label %232, label %393

232:                                              ; preds = %229
  %233 = bitcast %"class.WTF::String"* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %233) #5
  %234 = bitcast %"class.WTF::StringAppend"* %19 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %234) #5
  %235 = tail call %"class.WTF::StringImpl"* @_ZN3WTF6String6NumberEf(float %230) #5
  %236 = icmp eq %"class.WTF::StringImpl"* %235, null
  br i1 %236, label %312, label %237

237:                                              ; preds = %232
  %238 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %235, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %239 = load atomic i32, i32* %238 monotonic, align 4
  %240 = and i32 %239, 2
  %241 = icmp eq i32 %240, 0
  %242 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %235, i64 0, i32 0
  %243 = load i32, i32* %242, align 4
  br i1 %241, label %244, label %254

244:                                              ; preds = %237
  %245 = zext i32 %243 to i33
  %246 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %245, i33 1) #5
  %247 = extractvalue { i33, i1 } %246, 1
  %248 = extractvalue { i33, i1 } %246, 0
  %249 = icmp slt i33 %248, 0
  %250 = or i1 %247, %249
  br i1 %250, label %251, label %252, !prof !2

251:                                              ; preds = %244
  tail call void @llvm.trap() #5
  unreachable

252:                                              ; preds = %244
  %253 = trunc i33 %248 to i32
  store i32 %253, i32* %242, align 4
  br label %254

254:                                              ; preds = %252, %237
  %255 = phi i32 [ %253, %252 ], [ %243, %237 ]
  %256 = load atomic i32, i32* %238 monotonic, align 4
  %257 = and i32 %256, 2
  %258 = icmp eq i32 %257, 0
  br i1 %258, label %259, label %269

259:                                              ; preds = %254
  %260 = zext i32 %255 to i33
  %261 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %260, i33 1) #5
  %262 = extractvalue { i33, i1 } %261, 1
  %263 = extractvalue { i33, i1 } %261, 0
  %264 = icmp slt i33 %263, 0
  %265 = or i1 %262, %264
  br i1 %265, label %266, label %267, !prof !2

266:                                              ; preds = %259
  tail call void @llvm.trap() #5
  unreachable

267:                                              ; preds = %259
  %268 = trunc i33 %263 to i32
  store i32 %268, i32* %242, align 4
  br label %269

269:                                              ; preds = %267, %254
  %270 = phi i32 [ %268, %267 ], [ %255, %254 ]
  %271 = load atomic i32, i32* %238 monotonic, align 4
  %272 = and i32 %271, 2
  %273 = icmp eq i32 %272, 0
  br i1 %273, label %274, label %276

274:                                              ; preds = %269
  %275 = add i32 %270, -1
  store i32 %275, i32* %242, align 4
  br label %276

276:                                              ; preds = %274, %269
  %277 = phi i32 [ %275, %274 ], [ %270, %269 ]
  %278 = icmp eq i32 %277, 0
  br i1 %278, label %279, label %280

279:                                              ; preds = %276
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %235) #5
  br label %280

280:                                              ; preds = %276, %279
  %281 = load atomic i32, i32* %238 monotonic, align 4, !noalias !12
  %282 = and i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = load i32, i32* %242, align 4
  br i1 %283, label %285, label %295

285:                                              ; preds = %280
  %286 = zext i32 %284 to i33
  %287 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %286, i33 1) #5
  %288 = extractvalue { i33, i1 } %287, 1
  %289 = extractvalue { i33, i1 } %287, 0
  %290 = icmp slt i33 %289, 0
  %291 = or i1 %288, %290
  br i1 %291, label %292, label %293, !prof !2

292:                                              ; preds = %285
  tail call void @llvm.trap() #5, !noalias !12
  unreachable

293:                                              ; preds = %285
  %294 = trunc i33 %289 to i32
  store i32 %294, i32* %242, align 4, !noalias !12
  br label %295

295:                                              ; preds = %280, %293
  %296 = phi i32 [ %294, %293 ], [ %284, %280 ]
  %297 = bitcast %"class.WTF::StringAppend"* %19 to i64*
  store i64 ptrtoint ([33 x i8]* @.str.3 to i64), i64* %297, align 8, !alias.scope !12
  %298 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %19, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* %235, %"class.WTF::StringImpl"** %298, align 8, !alias.scope !12
  %299 = load atomic i32, i32* %238 monotonic, align 4, !noalias !12
  %300 = and i32 %299, 2
  %301 = icmp eq i32 %300, 0
  br i1 %301, label %302, label %316

302:                                              ; preds = %295
  %303 = zext i32 %296 to i33
  %304 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %303, i33 1) #5
  %305 = extractvalue { i33, i1 } %304, 1
  %306 = extractvalue { i33, i1 } %304, 0
  %307 = icmp slt i33 %306, 0
  %308 = or i1 %305, %307
  br i1 %308, label %309, label %310, !prof !2

309:                                              ; preds = %302
  tail call void @llvm.trap() #5, !noalias !12
  unreachable

310:                                              ; preds = %302
  %311 = trunc i33 %306 to i32
  store i32 %311, i32* %242, align 4, !noalias !12
  br label %316

312:                                              ; preds = %232
  %313 = bitcast %"class.WTF::StringAppend"* %19 to i64*
  store i64 ptrtoint ([33 x i8]* @.str.3 to i64), i64* %313, align 8, !alias.scope !12
  %314 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %19, i64 0, i32 0, i32 1, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %314, align 8, !alias.scope !12
  %315 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %19, i64 0, i32 1
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8** %315, align 8, !alias.scope !12
  br label %328

316:                                              ; preds = %310, %295
  %317 = phi i32 [ %311, %310 ], [ %296, %295 ]
  %318 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %19, i64 0, i32 1
  store i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8** %318, align 8, !alias.scope !12
  %319 = load atomic i32, i32* %238 monotonic, align 4, !noalias !12
  %320 = and i32 %319, 2
  %321 = icmp eq i32 %320, 0
  br i1 %321, label %322, label %324

322:                                              ; preds = %316
  %323 = add i32 %317, -1
  store i32 %323, i32* %242, align 4, !noalias !12
  br label %324

324:                                              ; preds = %322, %316
  %325 = phi i32 [ %323, %322 ], [ %317, %316 ]
  %326 = icmp eq i32 %325, 0
  br i1 %326, label %327, label %328

327:                                              ; preds = %324
  tail call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %235) #5, !noalias !12
  br label %328

328:                                              ; preds = %312, %324, %327
  %329 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"* nonnull %19)
  %330 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %18, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %329, %"class.WTF::StringImpl"** %330, align 8
  %331 = bitcast %"class.blink::ExceptionState"* %9 to void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)***
  %332 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*** %331, align 8
  %333 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)** %332, align 8
  call void %333(%"class.blink::ExceptionState"* %9, i32 1, %"class.WTF::String"* nonnull dereferenceable(8) %18) #5
  %334 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %330, align 8
  %335 = icmp eq %"class.WTF::StringImpl"* %334, null
  br i1 %335, label %349, label %336

336:                                              ; preds = %328
  %337 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %334, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %338 = load atomic i32, i32* %337 monotonic, align 4
  %339 = and i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %334, i64 0, i32 0
  %342 = load i32, i32* %341, align 4
  br i1 %340, label %343, label %345

343:                                              ; preds = %336
  %344 = add i32 %342, -1
  store i32 %344, i32* %341, align 4
  br label %345

345:                                              ; preds = %343, %336
  %346 = phi i32 [ %344, %343 ], [ %342, %336 ]
  %347 = icmp eq i32 %346, 0
  br i1 %347, label %348, label %349

348:                                              ; preds = %345
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %334) #5
  br label %349

349:                                              ; preds = %328, %345, %348
  %350 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %19, i64 0, i32 0, i32 1, i32 0, i32 0
  %351 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %350, align 8
  %352 = icmp eq %"class.WTF::StringImpl"* %351, null
  br i1 %352, label %366, label %353

353:                                              ; preds = %349
  %354 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %351, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %355 = load atomic i32, i32* %354 monotonic, align 4
  %356 = and i32 %355, 2
  %357 = icmp eq i32 %356, 0
  %358 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %351, i64 0, i32 0
  %359 = load i32, i32* %358, align 4
  br i1 %357, label %360, label %362

360:                                              ; preds = %353
  %361 = add i32 %359, -1
  store i32 %361, i32* %358, align 4
  br label %362

362:                                              ; preds = %360, %353
  %363 = phi i32 [ %361, %360 ], [ %359, %353 ]
  %364 = icmp eq i32 %363, 0
  br i1 %364, label %365, label %366

365:                                              ; preds = %362
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %351) #5
  br label %366

366:                                              ; preds = %349, %362, %365
  br i1 %236, label %392, label %367

367:                                              ; preds = %366
  %368 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %235, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %369 = load atomic i32, i32* %368 monotonic, align 4
  %370 = and i32 %369, 2
  %371 = icmp eq i32 %370, 0
  %372 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %235, i64 0, i32 0
  %373 = load i32, i32* %372, align 4
  br i1 %371, label %374, label %376

374:                                              ; preds = %367
  %375 = add i32 %373, -1
  store i32 %375, i32* %372, align 4
  br label %376

376:                                              ; preds = %374, %367
  %377 = phi i32 [ %375, %374 ], [ %373, %367 ]
  %378 = icmp eq i32 %377, 0
  br i1 %378, label %379, label %381

379:                                              ; preds = %376
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %235) #5
  %380 = load i32, i32* %372, align 4
  br label %381

381:                                              ; preds = %376, %379
  %382 = phi i32 [ %377, %376 ], [ %380, %379 ]
  %383 = load atomic i32, i32* %368 monotonic, align 4
  %384 = and i32 %383, 2
  %385 = icmp eq i32 %384, 0
  br i1 %385, label %386, label %388

386:                                              ; preds = %381
  %387 = add i32 %382, -1
  store i32 %387, i32* %372, align 4
  br label %388

388:                                              ; preds = %386, %381
  %389 = phi i32 [ %387, %386 ], [ %382, %381 ]
  %390 = icmp eq i32 %389, 0
  br i1 %390, label %391, label %392

391:                                              ; preds = %388
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %235) #5
  br label %392

392:                                              ; preds = %366, %388, %391
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %234) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %233) #5
  br label %539

393:                                              ; preds = %229
  %394 = bitcast %"class.blink::CanvasPath"* %0 to i1 (%"class.blink::CanvasPath"*)***
  %395 = load i1 (%"class.blink::CanvasPath"*)**, i1 (%"class.blink::CanvasPath"*)*** %394, align 8
  %396 = getelementptr inbounds i1 (%"class.blink::CanvasPath"*)*, i1 (%"class.blink::CanvasPath"*)** %395, i64 2
  %397 = load i1 (%"class.blink::CanvasPath"*)*, i1 (%"class.blink::CanvasPath"*)** %396, align 8
  %398 = tail call zeroext i1 %397(%"class.blink::CanvasPath"* %0) #5
  br i1 %398, label %399, label %539

399:                                              ; preds = %393
  %400 = tail call float @fmodf(float %42, float 0x401921FB60000000) #5
  %401 = fcmp olt float %400, 0.000000e+00
  br i1 %401, label %402, label %407

402:                                              ; preds = %399
  %403 = fadd float %400, 0x401921FB60000000
  %404 = fcmp ult float %403, 0x401921FB60000000
  br i1 %404, label %407, label %405

405:                                              ; preds = %402
  %406 = fadd float %403, 0xC01921FB60000000
  br label %407

407:                                              ; preds = %399, %402, %405
  %408 = phi float [ %406, %405 ], [ %403, %402 ], [ %400, %399 ]
  %409 = fsub float %408, %42
  %410 = fadd float %48, %409
  %411 = fsub float %410, %408
  %412 = fcmp ult float %411, 0x401921FB60000000
  %413 = or i1 %412, %8
  br i1 %413, label %416, label %414

414:                                              ; preds = %407
  %415 = fadd float %408, 0x401921FB60000000
  br label %437

416:                                              ; preds = %407
  %417 = xor i1 %8, true
  %418 = fsub float %408, %410
  %419 = fcmp ult float %418, 0x401921FB60000000
  %420 = or i1 %419, %417
  br i1 %420, label %423, label %421

421:                                              ; preds = %416
  %422 = fadd float %408, 0xC01921FB60000000
  br label %437

423:                                              ; preds = %416
  %424 = fcmp ogt float %408, %410
  %425 = and i1 %424, %417
  br i1 %425, label %426, label %430

426:                                              ; preds = %423
  %427 = tail call float @fmodf(float %418, float 0x401921FB60000000) #5
  %428 = fsub float 0x401921FB60000000, %427
  %429 = fadd float %408, %428
  br label %437

430:                                              ; preds = %423
  %431 = fcmp olt float %408, %410
  %432 = and i1 %431, %8
  br i1 %432, label %433, label %437

433:                                              ; preds = %430
  %434 = tail call float @fmodf(float %411, float 0x401921FB60000000) #5
  %435 = fsub float 0x401921FB60000000, %434
  %436 = fsub float %408, %435
  br label %437

437:                                              ; preds = %414, %421, %426, %430, %433
  %438 = phi float [ %422, %421 ], [ %436, %433 ], [ %410, %430 ], [ %429, %426 ], [ %415, %414 ]
  %439 = fcmp oeq float %66, 0.000000e+00
  %440 = fcmp oeq float %230, 0.000000e+00
  %441 = or i1 %439, %440
  %442 = fcmp oeq float %408, %438
  %443 = or i1 %441, %442
  br i1 %443, label %444, label %532

444:                                              ; preds = %437
  %445 = bitcast <2 x float>* %12 to %"class.blink::FloatPoint"*
  %446 = bitcast <2 x float>* %13 to %"class.blink::FloatPoint"*
  %447 = bitcast <2 x float>* %14 to %"class.blink::FloatPoint"*
  %448 = bitcast <2 x float>* %15 to %"class.blink::FloatPoint"*
  %449 = bitcast %"class.blink::AffineTransform"* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %449) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %449, i8 -1, i64 48, i1 false) #5
  call void @_ZN5blink15AffineTransformC1Ev(%"class.blink::AffineTransform"* nonnull %11) #5
  %450 = fpext float %36 to double
  %451 = call dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform13RotateRadiansEd(%"class.blink::AffineTransform"* nonnull %11, double %450) #5
  %452 = bitcast <2 x float>* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %452) #5
  %453 = call float @cosf(float %408) #5
  %454 = fmul float %66, %453
  %455 = call float @sinf(float %408) #5
  %456 = fmul float %230, %455
  %457 = insertelement <2 x float> undef, float %454, i32 0
  %458 = insertelement <2 x float> %457, float %456, i32 1
  store <2 x float> %458, <2 x float>* %12, align 8
  %459 = call <2 x float> @_ZNK5blink15AffineTransform8MapPointERKNS_10FloatPointE(%"class.blink::AffineTransform"* nonnull %11, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %445) #5
  %460 = extractelement <2 x float> %459, i32 0
  %461 = extractelement <4 x float> %30, i32 0
  %462 = fadd float %461, %460
  %463 = extractelement <2 x float> %459, i32 1
  %464 = extractelement <4 x float> %30, i32 1
  %465 = fadd float %464, %463
  %466 = fpext float %462 to double
  %467 = fpext float %465 to double
  call void @_ZN5blink10CanvasPath6lineToEdd(%"class.blink::CanvasPath"* %0, double %466, double %467) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %452) #5
  %468 = and i1 %439, %440
  %469 = or i1 %468, %442
  br i1 %469, label %531, label %470

470:                                              ; preds = %444
  %471 = call float @fmodf(float %408, float 0x3FF921FB60000000) #5
  %472 = fsub float %408, %471
  br i1 %8, label %478, label %473

473:                                              ; preds = %470
  %474 = fadd float %472, 0x3FF921FB60000000
  %475 = fcmp olt float %474, %438
  br i1 %475, label %476, label %516

476:                                              ; preds = %473
  %477 = bitcast <2 x float>* %13 to i8*
  br label %482

478:                                              ; preds = %470
  %479 = fcmp ogt float %472, %438
  br i1 %479, label %480, label %516

480:                                              ; preds = %478
  %481 = bitcast <2 x float>* %14 to i8*
  br label %499

482:                                              ; preds = %482, %476
  %483 = phi float [ %474, %476 ], [ %497, %482 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %477) #5
  %484 = call float @cosf(float %483) #5
  %485 = fmul float %66, %484
  %486 = call float @sinf(float %483) #5
  %487 = fmul float %230, %486
  %488 = insertelement <2 x float> undef, float %485, i32 0
  %489 = insertelement <2 x float> %488, float %487, i32 1
  store <2 x float> %489, <2 x float>* %13, align 8
  %490 = call <2 x float> @_ZNK5blink15AffineTransform8MapPointERKNS_10FloatPointE(%"class.blink::AffineTransform"* nonnull %11, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %446) #5
  %491 = extractelement <2 x float> %490, i32 0
  %492 = fadd float %461, %491
  %493 = extractelement <2 x float> %490, i32 1
  %494 = fadd float %464, %493
  %495 = fpext float %492 to double
  %496 = fpext float %494 to double
  call void @_ZN5blink10CanvasPath6lineToEdd(%"class.blink::CanvasPath"* %0, double %495, double %496) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %477) #5
  %497 = fadd float %483, 0x3FF921FB60000000
  %498 = fcmp olt float %497, %438
  br i1 %498, label %482, label %516

499:                                              ; preds = %499, %480
  %500 = phi float [ %472, %480 ], [ %514, %499 ]
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %481) #5
  %501 = call float @cosf(float %500) #5
  %502 = fmul float %66, %501
  %503 = call float @sinf(float %500) #5
  %504 = fmul float %230, %503
  %505 = insertelement <2 x float> undef, float %502, i32 0
  %506 = insertelement <2 x float> %505, float %504, i32 1
  store <2 x float> %506, <2 x float>* %14, align 8
  %507 = call <2 x float> @_ZNK5blink15AffineTransform8MapPointERKNS_10FloatPointE(%"class.blink::AffineTransform"* nonnull %11, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %447) #5
  %508 = extractelement <2 x float> %507, i32 0
  %509 = fadd float %461, %508
  %510 = extractelement <2 x float> %507, i32 1
  %511 = fadd float %464, %510
  %512 = fpext float %509 to double
  %513 = fpext float %511 to double
  call void @_ZN5blink10CanvasPath6lineToEdd(%"class.blink::CanvasPath"* %0, double %512, double %513) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %481) #5
  %514 = fadd float %500, 0xBFF921FB60000000
  %515 = fcmp ogt float %514, %438
  br i1 %515, label %499, label %516

516:                                              ; preds = %482, %499, %478, %473
  %517 = bitcast <2 x float>* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %517) #5
  %518 = call float @cosf(float %438) #5
  %519 = fmul float %66, %518
  %520 = call float @sinf(float %438) #5
  %521 = fmul float %230, %520
  %522 = insertelement <2 x float> undef, float %519, i32 0
  %523 = insertelement <2 x float> %522, float %521, i32 1
  store <2 x float> %523, <2 x float>* %15, align 8
  %524 = call <2 x float> @_ZNK5blink15AffineTransform8MapPointERKNS_10FloatPointE(%"class.blink::AffineTransform"* nonnull %11, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %448) #5
  %525 = extractelement <2 x float> %524, i32 0
  %526 = fadd float %461, %525
  %527 = extractelement <2 x float> %524, i32 1
  %528 = fadd float %464, %527
  %529 = fpext float %526 to double
  %530 = fpext float %528 to double
  call void @_ZN5blink10CanvasPath6lineToEdd(%"class.blink::CanvasPath"* %0, double %529, double %530) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %517) #5
  br label %531

531:                                              ; preds = %444, %516
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %449) #5
  br label %539

532:                                              ; preds = %437
  %533 = getelementptr inbounds %"class.blink::CanvasPath", %"class.blink::CanvasPath"* %0, i64 0, i32 2
  %534 = bitcast %"class.blink::FloatPoint"* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %534) #5
  %535 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %20, i64 0, i32 0
  %536 = extractelement <4 x float> %30, i32 0
  store float %536, float* %535, align 4
  %537 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %20, i64 0, i32 1
  %538 = extractelement <4 x float> %30, i32 1
  store float %538, float* %537, align 4
  call void @_ZN5blink4Path10AddEllipseERKNS_10FloatPointEfffff(%"class.blink::Path"* %533, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %20, float %66, float %230, float %36, float %408, float %438) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %534) #5
  br label %539

539:                                              ; preds = %531, %532, %393, %10, %392, %228
  ret void
}

declare void @_ZN5blink4Path10AddEllipseERKNS_10FloatPointEfffff(%"class.blink::Path"*, %"class.blink::FloatPoint"* dereferenceable(8), float, float, float, float, float) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10CanvasPath4rectEdddd(%"class.blink::CanvasPath"*, double, double, double, double) local_unnamed_addr #0 align 2 {
  %6 = alloca <4 x float>, align 16
  %7 = insertelement <4 x double> undef, double %1, i32 0
  %8 = insertelement <4 x double> %7, double %2, i32 1
  %9 = insertelement <4 x double> %8, double %3, i32 2
  %10 = insertelement <4 x double> %9, double %4, i32 3
  %11 = fcmp ult <4 x double> %10, <double 0xC7EFFFFFE0000000, double 0xC7EFFFFFE0000000, double 0xC7EFFFFFE0000000, double 0xC7EFFFFFE0000000>
  %12 = fcmp ugt <4 x double> %10, <double 0x47EFFFFFE0000000, double 0x47EFFFFFE0000000, double 0x47EFFFFFE0000000, double 0x47EFFFFFE0000000>
  %13 = fptrunc <4 x double> %10 to <4 x float>
  %14 = select <4 x i1> %11, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %13
  %15 = select <4 x i1> %11, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %16 = select <4 x i1> %12, <4 x float> %15, <4 x float> %14
  %17 = bitcast %"class.blink::CanvasPath"* %0 to i1 (%"class.blink::CanvasPath"*)***
  %18 = load i1 (%"class.blink::CanvasPath"*)**, i1 (%"class.blink::CanvasPath"*)*** %17, align 8
  %19 = getelementptr inbounds i1 (%"class.blink::CanvasPath"*)*, i1 (%"class.blink::CanvasPath"*)** %18, i64 2
  %20 = load i1 (%"class.blink::CanvasPath"*)*, i1 (%"class.blink::CanvasPath"*)** %19, align 8
  %21 = tail call zeroext i1 %20(%"class.blink::CanvasPath"* %0) #5
  %22 = call <4 x float> @llvm.fabs.v4f32(<4 x float> %16)
  %23 = fcmp one <4 x float> %22, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %24 = shufflevector <4 x i1> %23, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %25 = and <4 x i1> %23, %24
  %26 = shufflevector <4 x i1> %25, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %27 = and <4 x i1> %25, %26
  %28 = extractelement <4 x i1> %27, i32 0
  %29 = and i1 %28, %21
  br i1 %29, label %30, label %34

30:                                               ; preds = %5
  %31 = bitcast <4 x float>* %6 to %"class.blink::FloatRect"*
  %32 = getelementptr inbounds %"class.blink::CanvasPath", %"class.blink::CanvasPath"* %0, i64 0, i32 2
  %33 = bitcast <4 x float>* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %33) #5
  store <4 x float> %16, <4 x float>* %6, align 16
  call void @_ZN5blink4Path7AddRectERKNS_9FloatRectE(%"class.blink::Path"* %32, %"class.blink::FloatRect"* nonnull dereferenceable(16) %31) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %33) #5
  br label %34

34:                                               ; preds = %5, %30
  ret void
}

declare void @_ZN5blink4Path7AddRectERKNS_9FloatRectE(%"class.blink::Path"*, %"class.blink::FloatRect"* dereferenceable(16)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink10CanvasPath9roundRectEddddRKNS_10HeapVectorINS_6MemberINS_35V8UnionDOMPointOrUnrestrictedDoubleEEELj0EEERNS_14ExceptionStateE(%"class.blink::CanvasPath"*, double, double, double, double, %"class.blink::HeapVector"* dereferenceable(16), %"class.blink::ExceptionState"* dereferenceable(72)) local_unnamed_addr #0 align 2 {
  %8 = alloca %"class.WTF::IntegerToStringConverter", align 8
  %9 = alloca %"class.WTF::String", align 8
  %10 = alloca %"class.WTF::StringAppend.32", align 8
  %11 = alloca %"class.WTF::String", align 8
  %12 = alloca %"class.WTF::StringAppend", align 8
  %13 = alloca %"class.WTF::String", align 8
  %14 = alloca %"class.WTF::StringAppend", align 8
  %15 = alloca %"class.WTF::String", align 8
  %16 = alloca %"class.WTF::StringAppend", align 8
  %17 = alloca <4 x float>, align 16
  %18 = bitcast <4 x float>* %17 to %"class.blink::FloatRect"*
  %19 = alloca [4 x %"class.blink::FloatSize"], align 16
  %20 = bitcast [4 x %"class.blink::FloatSize"]* %19 to i8*
  %21 = alloca %"class.blink::FloatRect", align 4
  %22 = alloca %"class.blink::FloatPoint", align 4
  %23 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %5, i64 0, i32 0
  %24 = getelementptr inbounds %"class.blink::HeapVector", %"class.blink::HeapVector"* %5, i64 0, i32 0, i32 0, i32 0, i32 2
  %25 = load i32, i32* %24, align 4
  %26 = add i32 %25, -1
  %27 = icmp ugt i32 %26, 3
  br i1 %27, label %28, label %177

28:                                               ; preds = %7
  %29 = bitcast %"class.WTF::String"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #5
  %30 = bitcast %"class.WTF::StringAppend.32"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %30) #5
  %31 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %8, i64 0, i32 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %31) #5
  %32 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %8, i64 0, i32 0, i64 12
  %33 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %8, i64 0, i32 2
  %34 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %8, i64 0, i32 3
  %35 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %8, i64 0, i32 0, i64 13
  %36 = icmp slt i32 %25, 0
  %37 = sub i32 0, %25
  %38 = select i1 %36, i32 %37, i32 %25
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %31, i8 -86, i64 32, i1 false) #5
  store i8* %32, i8** %33, align 8
  %39 = urem i32 %38, 10
  %40 = udiv i32 %38, 10
  %41 = trunc i32 %39 to i8
  %42 = or i8 %41, 48
  store i8 %42, i8* %32, align 4
  %43 = icmp ugt i32 %38, 9
  br i1 %43, label %44, label %66

44:                                               ; preds = %28
  %45 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %8, i64 0, i32 0, i64 11
  store i8* %45, i8** %33, align 8
  %46 = urem i32 %40, 10
  %47 = trunc i32 %46 to i8
  %48 = or i8 %47, 48
  store i8 %48, i8* %45, align 1
  %49 = icmp ugt i32 %38, 99
  br i1 %49, label %50, label %66

50:                                               ; preds = %44
  %51 = udiv i32 %38, 100
  %52 = getelementptr inbounds %"class.WTF::IntegerToStringConverter", %"class.WTF::IntegerToStringConverter"* %8, i64 0, i32 0, i64 10
  store i8* %52, i8** %33, align 8
  %53 = urem i32 %51, 10
  %54 = trunc i32 %53 to i8
  %55 = or i8 %54, 48
  store i8 %55, i8* %52, align 2
  %56 = icmp ugt i32 %38, 999
  br i1 %56, label %57, label %66

57:                                               ; preds = %50, %57
  %58 = phi i32 [ %60, %57 ], [ %51, %50 ]
  %59 = load i8*, i8** %33, align 8
  %60 = udiv i32 %58, 10
  %61 = getelementptr inbounds i8, i8* %59, i64 -1
  store i8* %61, i8** %33, align 8
  %62 = urem i32 %60, 10
  %63 = trunc i32 %62 to i8
  %64 = or i8 %63, 48
  store i8 %64, i8* %61, align 1
  %65 = icmp ugt i32 %58, 99
  br i1 %65, label %57, label %66

66:                                               ; preds = %57, %50, %44, %28
  br i1 %36, label %67, label %70

67:                                               ; preds = %66
  %68 = load i8*, i8** %33, align 8
  %69 = getelementptr inbounds i8, i8* %68, i64 -1
  store i8* %69, i8** %33, align 8
  store i8 45, i8* %69, align 1
  br label %70

70:                                               ; preds = %66, %67
  %71 = bitcast i8** %33 to i64*
  %72 = load i64, i64* %71, align 8
  %73 = ptrtoint i8* %35 to i64
  %74 = sub i64 %73, %72
  %75 = trunc i64 %74 to i32
  store i32 %75, i32* %34, align 8
  %76 = inttoptr i64 %72 to i8*
  %77 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8* %76, i32 %75) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %31) #5
  %78 = icmp eq %"class.WTF::StringImpl"* %77, null
  br i1 %78, label %123, label %79

79:                                               ; preds = %70
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load atomic i32, i32* %80 monotonic, align 4
  %82 = and i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 0
  %85 = load i32, i32* %84, align 4
  br i1 %83, label %86, label %96

86:                                               ; preds = %79
  %87 = zext i32 %85 to i33
  %88 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %87, i33 1) #5
  %89 = extractvalue { i33, i1 } %88, 1
  %90 = extractvalue { i33, i1 } %88, 0
  %91 = icmp slt i33 %90, 0
  %92 = or i1 %89, %91
  br i1 %92, label %93, label %94, !prof !2

93:                                               ; preds = %86
  call void @llvm.trap() #5
  unreachable

94:                                               ; preds = %86
  %95 = trunc i33 %90 to i32
  store i32 %95, i32* %84, align 4
  br label %96

96:                                               ; preds = %79, %94
  %97 = phi i32 [ %95, %94 ], [ %85, %79 ]
  %98 = load atomic i32, i32* %80 monotonic, align 4
  %99 = and i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 0
  br i1 %100, label %102, label %112

102:                                              ; preds = %96
  %103 = zext i32 %97 to i33
  %104 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %103, i33 1) #5
  %105 = extractvalue { i33, i1 } %104, 1
  %106 = extractvalue { i33, i1 } %104, 0
  %107 = icmp slt i33 %106, 0
  %108 = or i1 %105, %107
  br i1 %108, label %109, label %110, !prof !2

109:                                              ; preds = %102
  call void @llvm.trap() #5
  unreachable

110:                                              ; preds = %102
  %111 = trunc i33 %106 to i32
  store i32 %111, i32* %101, align 4
  br label %112

112:                                              ; preds = %110, %96
  %113 = phi i32 [ %111, %110 ], [ %97, %96 ]
  %114 = load atomic i32, i32* %80 monotonic, align 4
  %115 = and i32 %114, 2
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %119

117:                                              ; preds = %112
  %118 = add i32 %113, -1
  store i32 %118, i32* %101, align 4
  br label %119

119:                                              ; preds = %117, %112
  %120 = phi i32 [ %118, %117 ], [ %113, %112 ]
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %123

122:                                              ; preds = %119
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %77) #5
  br label %123

123:                                              ; preds = %70, %119, %122
  %124 = getelementptr inbounds %"class.WTF::StringAppend.32", %"class.WTF::StringAppend.32"* %10, i64 0, i32 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %77, %"class.WTF::StringImpl"** %124, align 8
  %125 = getelementptr inbounds %"class.WTF::StringAppend.32", %"class.WTF::StringAppend.32"* %10, i64 0, i32 1
  store i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.4, i64 0, i64 0), i8** %125, align 8
  %126 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS_6StringEPKcEcvS1_Ev(%"class.WTF::StringAppend.32"* nonnull %10)
  %127 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %9, i64 0, i32 0, i32 0
  store %"class.WTF::StringImpl"* %126, %"class.WTF::StringImpl"** %127, align 8
  %128 = bitcast %"class.blink::ExceptionState"* %6 to void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)***
  %129 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*** %128, align 8
  %130 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)** %129, align 8
  call void %130(%"class.blink::ExceptionState"* %6, i32 1, %"class.WTF::String"* nonnull dereferenceable(8) %9) #5
  %131 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %127, align 8
  %132 = icmp eq %"class.WTF::StringImpl"* %131, null
  br i1 %132, label %146, label %133

133:                                              ; preds = %123
  %134 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %131, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = load atomic i32, i32* %134 monotonic, align 4
  %136 = and i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %131, i64 0, i32 0
  %139 = load i32, i32* %138, align 4
  br i1 %137, label %140, label %142

140:                                              ; preds = %133
  %141 = add i32 %139, -1
  store i32 %141, i32* %138, align 4
  br label %142

142:                                              ; preds = %140, %133
  %143 = phi i32 [ %141, %140 ], [ %139, %133 ]
  %144 = icmp eq i32 %143, 0
  br i1 %144, label %145, label %146

145:                                              ; preds = %142
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %131) #5
  br label %146

146:                                              ; preds = %123, %142, %145
  %147 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %124, align 8
  %148 = icmp eq %"class.WTF::StringImpl"* %147, null
  br i1 %148, label %162, label %149

149:                                              ; preds = %146
  %150 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %147, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %151 = load atomic i32, i32* %150 monotonic, align 4
  %152 = and i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %147, i64 0, i32 0
  %155 = load i32, i32* %154, align 4
  br i1 %153, label %156, label %158

156:                                              ; preds = %149
  %157 = add i32 %155, -1
  store i32 %157, i32* %154, align 4
  br label %158

158:                                              ; preds = %156, %149
  %159 = phi i32 [ %157, %156 ], [ %155, %149 ]
  %160 = icmp eq i32 %159, 0
  br i1 %160, label %161, label %162

161:                                              ; preds = %158
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %147) #5
  br label %162

162:                                              ; preds = %146, %158, %161
  br i1 %78, label %176, label %163

163:                                              ; preds = %162
  %164 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %165 = load atomic i32, i32* %164 monotonic, align 4
  %166 = and i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %77, i64 0, i32 0
  %169 = load i32, i32* %168, align 4
  br i1 %167, label %170, label %172

170:                                              ; preds = %163
  %171 = add i32 %169, -1
  store i32 %171, i32* %168, align 4
  br label %172

172:                                              ; preds = %170, %163
  %173 = phi i32 [ %171, %170 ], [ %169, %163 ]
  %174 = icmp eq i32 %173, 0
  br i1 %174, label %175, label %176

175:                                              ; preds = %172
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %77) #5
  br label %176

176:                                              ; preds = %162, %172, %175
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %30) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #5
  br label %177

177:                                              ; preds = %7, %176
  %178 = insertelement <4 x double> undef, double %1, i32 0
  %179 = insertelement <4 x double> %178, double %2, i32 1
  %180 = insertelement <4 x double> %179, double %3, i32 2
  %181 = insertelement <4 x double> %180, double %4, i32 3
  %182 = fcmp ult <4 x double> %181, <double 0xC7EFFFFFE0000000, double 0xC7EFFFFFE0000000, double 0xC7EFFFFFE0000000, double 0xC7EFFFFFE0000000>
  %183 = fcmp ugt <4 x double> %181, <double 0x47EFFFFFE0000000, double 0x47EFFFFFE0000000, double 0x47EFFFFFE0000000, double 0x47EFFFFFE0000000>
  %184 = fptrunc <4 x double> %181 to <4 x float>
  %185 = select <4 x i1> %182, <4 x float> <float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000, float 0xFFF0000000000000>, <4 x float> %184
  %186 = select <4 x i1> %182, <4 x float> <float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000, float 0x7FF8000000000000>, <4 x float> <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %187 = select <4 x i1> %183, <4 x float> %186, <4 x float> %185
  %188 = bitcast %"class.blink::CanvasPath"* %0 to i1 (%"class.blink::CanvasPath"*)***
  %189 = load i1 (%"class.blink::CanvasPath"*)**, i1 (%"class.blink::CanvasPath"*)*** %188, align 8
  %190 = getelementptr inbounds i1 (%"class.blink::CanvasPath"*)*, i1 (%"class.blink::CanvasPath"*)** %189, i64 2
  %191 = load i1 (%"class.blink::CanvasPath"*)*, i1 (%"class.blink::CanvasPath"*)** %190, align 8
  %192 = call zeroext i1 %191(%"class.blink::CanvasPath"* %0) #5
  %193 = call <4 x float> @llvm.fabs.v4f32(<4 x float> %187)
  %194 = fcmp one <4 x float> %193, <float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000, float 0x7FF0000000000000>
  %195 = shufflevector <4 x i1> %194, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>
  %196 = and <4 x i1> %194, %195
  %197 = shufflevector <4 x i1> %196, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>
  %198 = and <4 x i1> %196, %197
  %199 = extractelement <4 x i1> %198, i32 0
  %200 = and i1 %199, %192
  br i1 %200, label %201, label %903

201:                                              ; preds = %177
  %202 = zext i32 %25 to i64
  %203 = call i8* @llvm.stacksave()
  %204 = alloca i64, i64 %202, align 16
  %205 = bitcast i64* %204 to i8*
  %206 = icmp eq i32 %25, 0
  br i1 %206, label %761, label %207

207:                                              ; preds = %201
  %208 = shl nuw nsw i64 %202, 3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %205, i8 -1, i64 %208, i1 false)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %205, i8 0, i64 %208, i1 false)
  %209 = icmp sgt i32 %25, 0
  br i1 %209, label %210, label %761

210:                                              ; preds = %207
  %211 = bitcast %"class.WTF::String"* %15 to i8*
  %212 = bitcast %"class.WTF::StringAppend"* %16 to i8*
  %213 = bitcast %"class.WTF::StringAppend"* %16 to i64*
  %214 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %16, i64 0, i32 0, i32 1, i32 0, i32 0
  %215 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %16, i64 0, i32 1
  %216 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %15, i64 0, i32 0, i32 0
  %217 = bitcast %"class.blink::ExceptionState"* %6 to void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)***
  %218 = bitcast %"class.WTF::String"* %11 to i8*
  %219 = bitcast %"class.WTF::StringAppend"* %12 to i8*
  %220 = bitcast %"class.WTF::StringAppend"* %12 to i64*
  %221 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %12, i64 0, i32 0, i32 1, i32 0, i32 0
  %222 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %12, i64 0, i32 1
  %223 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %11, i64 0, i32 0, i32 0
  %224 = bitcast %"class.WTF::String"* %13 to i8*
  %225 = bitcast %"class.WTF::StringAppend"* %14 to i8*
  %226 = bitcast %"class.WTF::StringAppend"* %14 to i64*
  %227 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %14, i64 0, i32 0, i32 1, i32 0, i32 0
  %228 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %14, i64 0, i32 1
  %229 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %13, i64 0, i32 0, i32 0
  br label %230

230:                                              ; preds = %758, %210
  %231 = phi i64 [ 0, %210 ], [ %759, %758 ]
  %232 = trunc i64 %231 to i32
  %233 = call dereferenceable(8) %"class.blink::Member"* @_ZNK3WTF6VectorIN5blink6MemberINS1_35V8UnionDOMPointOrUnrestrictedDoubleEEELj0ENS1_13HeapAllocatorEE2atEj(%"class.WTF::Vector.19"* %23, i32 %232) #5
  %234 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %233, i64 0, i32 0, i32 0
  %235 = load %"class.blink::V8UnionDOMPointOrUnrestrictedDouble"*, %"class.blink::V8UnionDOMPointOrUnrestrictedDouble"** %234, align 8
  %236 = getelementptr inbounds %"class.blink::V8UnionDOMPointOrUnrestrictedDouble", %"class.blink::V8UnionDOMPointOrUnrestrictedDouble"* %235, i64 0, i32 1
  %237 = load i32, i32* %236, align 8
  switch i32 %237, label %758 [
    i32 0, label %238
    i32 1, label %584
  ]

238:                                              ; preds = %230
  %239 = call dereferenceable(8) %"class.blink::Member"* @_ZNK3WTF6VectorIN5blink6MemberINS1_35V8UnionDOMPointOrUnrestrictedDoubleEEELj0ENS1_13HeapAllocatorEE2atEj(%"class.WTF::Vector.19"* %23, i32 %232) #5
  %240 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %239, i64 0, i32 0, i32 0
  %241 = load %"class.blink::V8UnionDOMPointOrUnrestrictedDouble"*, %"class.blink::V8UnionDOMPointOrUnrestrictedDouble"** %240, align 8
  %242 = getelementptr inbounds %"class.blink::V8UnionDOMPointOrUnrestrictedDouble", %"class.blink::V8UnionDOMPointOrUnrestrictedDouble"* %241, i64 0, i32 2, i32 0, i32 0
  %243 = load %"class.blink::DOMPoint"*, %"class.blink::DOMPoint"** %242, align 8
  %244 = getelementptr inbounds %"class.blink::DOMPoint", %"class.blink::DOMPoint"* %243, i64 0, i32 0, i32 1
  %245 = load double, double* %244, align 8
  %246 = fcmp ult double %245, 0xC7EFFFFFE0000000
  %247 = fcmp ugt double %245, 0x47EFFFFFE0000000
  %248 = fptrunc double %245 to float
  %249 = select i1 %246, float 0xFFF0000000000000, float %248
  %250 = select i1 %246, float 0x7FF8000000000000, float 0x7FF0000000000000
  %251 = select i1 %247, float %250, float %249
  %252 = getelementptr inbounds %"class.blink::DOMPoint", %"class.blink::DOMPoint"* %243, i64 0, i32 0, i32 2
  %253 = load double, double* %252, align 8
  %254 = fcmp ult double %253, 0xC7EFFFFFE0000000
  %255 = fcmp ugt double %253, 0x47EFFFFFE0000000
  %256 = fptrunc double %253 to float
  %257 = select i1 %254, float 0xFFF0000000000000, float %256
  %258 = select i1 %254, float 0x7FF8000000000000, float 0x7FF0000000000000
  %259 = select i1 %255, float %258, float %257
  %260 = call float @llvm.fabs.f32(float %251) #9
  %261 = fcmp one float %260, 0x7FF0000000000000
  %262 = call float @llvm.fabs.f32(float %259) #9
  %263 = fcmp one float %262, 0x7FF0000000000000
  %264 = and i1 %261, %263
  br i1 %264, label %265, label %902, !prof !15

265:                                              ; preds = %238
  %266 = fcmp olt float %251, 0.000000e+00
  br i1 %266, label %267, label %417, !prof !2

267:                                              ; preds = %265
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %218) #5
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %219) #5
  %268 = call %"class.WTF::StringImpl"* @_ZN3WTF6String6NumberEf(float %251) #5
  %269 = icmp eq %"class.WTF::StringImpl"* %268, null
  br i1 %269, label %343, label %270

270:                                              ; preds = %267
  %271 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %268, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %272 = load atomic i32, i32* %271 monotonic, align 4
  %273 = and i32 %272, 2
  %274 = icmp eq i32 %273, 0
  %275 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %268, i64 0, i32 0
  %276 = load i32, i32* %275, align 4
  br i1 %274, label %277, label %287

277:                                              ; preds = %270
  %278 = zext i32 %276 to i33
  %279 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %278, i33 1) #5
  %280 = extractvalue { i33, i1 } %279, 1
  %281 = extractvalue { i33, i1 } %279, 0
  %282 = icmp slt i33 %281, 0
  %283 = or i1 %280, %282
  br i1 %283, label %284, label %285, !prof !2

284:                                              ; preds = %277
  call void @llvm.trap() #5
  unreachable

285:                                              ; preds = %277
  %286 = trunc i33 %281 to i32
  store i32 %286, i32* %275, align 4
  br label %287

287:                                              ; preds = %285, %270
  %288 = phi i32 [ %286, %285 ], [ %276, %270 ]
  %289 = load atomic i32, i32* %271 monotonic, align 4
  %290 = and i32 %289, 2
  %291 = icmp eq i32 %290, 0
  br i1 %291, label %292, label %302

292:                                              ; preds = %287
  %293 = zext i32 %288 to i33
  %294 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %293, i33 1) #5
  %295 = extractvalue { i33, i1 } %294, 1
  %296 = extractvalue { i33, i1 } %294, 0
  %297 = icmp slt i33 %296, 0
  %298 = or i1 %295, %297
  br i1 %298, label %299, label %300, !prof !2

299:                                              ; preds = %292
  call void @llvm.trap() #5
  unreachable

300:                                              ; preds = %292
  %301 = trunc i33 %296 to i32
  store i32 %301, i32* %275, align 4
  br label %302

302:                                              ; preds = %300, %287
  %303 = phi i32 [ %301, %300 ], [ %288, %287 ]
  %304 = load atomic i32, i32* %271 monotonic, align 4
  %305 = and i32 %304, 2
  %306 = icmp eq i32 %305, 0
  br i1 %306, label %307, label %309

307:                                              ; preds = %302
  %308 = add i32 %303, -1
  store i32 %308, i32* %275, align 4
  br label %309

309:                                              ; preds = %307, %302
  %310 = phi i32 [ %308, %307 ], [ %303, %302 ]
  %311 = icmp eq i32 %310, 0
  br i1 %311, label %312, label %313

312:                                              ; preds = %309
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %268) #5
  br label %313

313:                                              ; preds = %309, %312
  %314 = load atomic i32, i32* %271 monotonic, align 4, !noalias !16
  %315 = and i32 %314, 2
  %316 = icmp eq i32 %315, 0
  %317 = load i32, i32* %275, align 4
  br i1 %316, label %318, label %328

318:                                              ; preds = %313
  %319 = zext i32 %317 to i33
  %320 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %319, i33 1) #5
  %321 = extractvalue { i33, i1 } %320, 1
  %322 = extractvalue { i33, i1 } %320, 0
  %323 = icmp slt i33 %322, 0
  %324 = or i1 %321, %323
  br i1 %324, label %325, label %326, !prof !2

325:                                              ; preds = %318
  call void @llvm.trap() #5, !noalias !16
  unreachable

326:                                              ; preds = %318
  %327 = trunc i33 %322 to i32
  store i32 %327, i32* %275, align 4, !noalias !16
  br label %328

328:                                              ; preds = %313, %326
  %329 = phi i32 [ %327, %326 ], [ %317, %313 ]
  store i64 ptrtoint ([16 x i8]* @.str.5 to i64), i64* %220, align 8, !alias.scope !16
  store %"class.WTF::StringImpl"* %268, %"class.WTF::StringImpl"** %221, align 8, !alias.scope !16
  %330 = load atomic i32, i32* %271 monotonic, align 4, !noalias !16
  %331 = and i32 %330, 2
  %332 = icmp eq i32 %331, 0
  br i1 %332, label %333, label %344

333:                                              ; preds = %328
  %334 = zext i32 %329 to i33
  %335 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %334, i33 1) #5
  %336 = extractvalue { i33, i1 } %335, 1
  %337 = extractvalue { i33, i1 } %335, 0
  %338 = icmp slt i33 %337, 0
  %339 = or i1 %336, %338
  br i1 %339, label %340, label %341, !prof !2

340:                                              ; preds = %333
  call void @llvm.trap() #5, !noalias !16
  unreachable

341:                                              ; preds = %333
  %342 = trunc i33 %337 to i32
  store i32 %342, i32* %275, align 4, !noalias !16
  br label %344

343:                                              ; preds = %267
  store i64 ptrtoint ([16 x i8]* @.str.5 to i64), i64* %220, align 8, !alias.scope !16
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %221, align 8, !alias.scope !16
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0), i8** %222, align 8, !alias.scope !16
  br label %355

344:                                              ; preds = %341, %328
  %345 = phi i32 [ %342, %341 ], [ %329, %328 ]
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0), i8** %222, align 8, !alias.scope !16
  %346 = load atomic i32, i32* %271 monotonic, align 4, !noalias !16
  %347 = and i32 %346, 2
  %348 = icmp eq i32 %347, 0
  br i1 %348, label %349, label %351

349:                                              ; preds = %344
  %350 = add i32 %345, -1
  store i32 %350, i32* %275, align 4, !noalias !16
  br label %351

351:                                              ; preds = %349, %344
  %352 = phi i32 [ %350, %349 ], [ %345, %344 ]
  %353 = icmp eq i32 %352, 0
  br i1 %353, label %354, label %355

354:                                              ; preds = %351
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %268) #5, !noalias !16
  br label %355

355:                                              ; preds = %343, %351, %354
  %356 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"* nonnull %12)
  store %"class.WTF::StringImpl"* %356, %"class.WTF::StringImpl"** %223, align 8
  %357 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*** %217, align 8
  %358 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)** %357, align 8
  call void %358(%"class.blink::ExceptionState"* %6, i32 1, %"class.WTF::String"* nonnull dereferenceable(8) %11) #5
  %359 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %223, align 8
  %360 = icmp eq %"class.WTF::StringImpl"* %359, null
  br i1 %360, label %374, label %361

361:                                              ; preds = %355
  %362 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %359, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %363 = load atomic i32, i32* %362 monotonic, align 4
  %364 = and i32 %363, 2
  %365 = icmp eq i32 %364, 0
  %366 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %359, i64 0, i32 0
  %367 = load i32, i32* %366, align 4
  br i1 %365, label %368, label %370

368:                                              ; preds = %361
  %369 = add i32 %367, -1
  store i32 %369, i32* %366, align 4
  br label %370

370:                                              ; preds = %368, %361
  %371 = phi i32 [ %369, %368 ], [ %367, %361 ]
  %372 = icmp eq i32 %371, 0
  br i1 %372, label %373, label %374

373:                                              ; preds = %370
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %359) #5
  br label %374

374:                                              ; preds = %355, %370, %373
  %375 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %221, align 8
  %376 = icmp eq %"class.WTF::StringImpl"* %375, null
  br i1 %376, label %390, label %377

377:                                              ; preds = %374
  %378 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %375, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %379 = load atomic i32, i32* %378 monotonic, align 4
  %380 = and i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %375, i64 0, i32 0
  %383 = load i32, i32* %382, align 4
  br i1 %381, label %384, label %386

384:                                              ; preds = %377
  %385 = add i32 %383, -1
  store i32 %385, i32* %382, align 4
  br label %386

386:                                              ; preds = %384, %377
  %387 = phi i32 [ %385, %384 ], [ %383, %377 ]
  %388 = icmp eq i32 %387, 0
  br i1 %388, label %389, label %390

389:                                              ; preds = %386
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %375) #5
  br label %390

390:                                              ; preds = %374, %386, %389
  br i1 %269, label %416, label %391

391:                                              ; preds = %390
  %392 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %268, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %393 = load atomic i32, i32* %392 monotonic, align 4
  %394 = and i32 %393, 2
  %395 = icmp eq i32 %394, 0
  %396 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %268, i64 0, i32 0
  %397 = load i32, i32* %396, align 4
  br i1 %395, label %398, label %400

398:                                              ; preds = %391
  %399 = add i32 %397, -1
  store i32 %399, i32* %396, align 4
  br label %400

400:                                              ; preds = %398, %391
  %401 = phi i32 [ %399, %398 ], [ %397, %391 ]
  %402 = icmp eq i32 %401, 0
  br i1 %402, label %403, label %405

403:                                              ; preds = %400
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %268) #5
  %404 = load i32, i32* %396, align 4
  br label %405

405:                                              ; preds = %400, %403
  %406 = phi i32 [ %401, %400 ], [ %404, %403 ]
  %407 = load atomic i32, i32* %392 monotonic, align 4
  %408 = and i32 %407, 2
  %409 = icmp eq i32 %408, 0
  br i1 %409, label %410, label %412

410:                                              ; preds = %405
  %411 = add i32 %406, -1
  store i32 %411, i32* %396, align 4
  br label %412

412:                                              ; preds = %410, %405
  %413 = phi i32 [ %411, %410 ], [ %406, %405 ]
  %414 = icmp eq i32 %413, 0
  br i1 %414, label %415, label %416

415:                                              ; preds = %412
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %268) #5
  br label %416

416:                                              ; preds = %390, %412, %415
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %219) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %218) #5
  br label %417

417:                                              ; preds = %416, %265
  %418 = fcmp olt float %259, 0.000000e+00
  br i1 %418, label %419, label %569, !prof !2

419:                                              ; preds = %417
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %224) #5
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %225) #5
  %420 = call %"class.WTF::StringImpl"* @_ZN3WTF6String6NumberEf(float %259) #5
  %421 = icmp eq %"class.WTF::StringImpl"* %420, null
  br i1 %421, label %495, label %422

422:                                              ; preds = %419
  %423 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %420, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %424 = load atomic i32, i32* %423 monotonic, align 4
  %425 = and i32 %424, 2
  %426 = icmp eq i32 %425, 0
  %427 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %420, i64 0, i32 0
  %428 = load i32, i32* %427, align 4
  br i1 %426, label %429, label %439

429:                                              ; preds = %422
  %430 = zext i32 %428 to i33
  %431 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %430, i33 1) #5
  %432 = extractvalue { i33, i1 } %431, 1
  %433 = extractvalue { i33, i1 } %431, 0
  %434 = icmp slt i33 %433, 0
  %435 = or i1 %432, %434
  br i1 %435, label %436, label %437, !prof !2

436:                                              ; preds = %429
  call void @llvm.trap() #5
  unreachable

437:                                              ; preds = %429
  %438 = trunc i33 %433 to i32
  store i32 %438, i32* %427, align 4
  br label %439

439:                                              ; preds = %437, %422
  %440 = phi i32 [ %438, %437 ], [ %428, %422 ]
  %441 = load atomic i32, i32* %423 monotonic, align 4
  %442 = and i32 %441, 2
  %443 = icmp eq i32 %442, 0
  br i1 %443, label %444, label %454

444:                                              ; preds = %439
  %445 = zext i32 %440 to i33
  %446 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %445, i33 1) #5
  %447 = extractvalue { i33, i1 } %446, 1
  %448 = extractvalue { i33, i1 } %446, 0
  %449 = icmp slt i33 %448, 0
  %450 = or i1 %447, %449
  br i1 %450, label %451, label %452, !prof !2

451:                                              ; preds = %444
  call void @llvm.trap() #5
  unreachable

452:                                              ; preds = %444
  %453 = trunc i33 %448 to i32
  store i32 %453, i32* %427, align 4
  br label %454

454:                                              ; preds = %452, %439
  %455 = phi i32 [ %453, %452 ], [ %440, %439 ]
  %456 = load atomic i32, i32* %423 monotonic, align 4
  %457 = and i32 %456, 2
  %458 = icmp eq i32 %457, 0
  br i1 %458, label %459, label %461

459:                                              ; preds = %454
  %460 = add i32 %455, -1
  store i32 %460, i32* %427, align 4
  br label %461

461:                                              ; preds = %459, %454
  %462 = phi i32 [ %460, %459 ], [ %455, %454 ]
  %463 = icmp eq i32 %462, 0
  br i1 %463, label %464, label %465

464:                                              ; preds = %461
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %420) #5
  br label %465

465:                                              ; preds = %461, %464
  %466 = load atomic i32, i32* %423 monotonic, align 4, !noalias !19
  %467 = and i32 %466, 2
  %468 = icmp eq i32 %467, 0
  %469 = load i32, i32* %427, align 4
  br i1 %468, label %470, label %480

470:                                              ; preds = %465
  %471 = zext i32 %469 to i33
  %472 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %471, i33 1) #5
  %473 = extractvalue { i33, i1 } %472, 1
  %474 = extractvalue { i33, i1 } %472, 0
  %475 = icmp slt i33 %474, 0
  %476 = or i1 %473, %475
  br i1 %476, label %477, label %478, !prof !2

477:                                              ; preds = %470
  call void @llvm.trap() #5, !noalias !19
  unreachable

478:                                              ; preds = %470
  %479 = trunc i33 %474 to i32
  store i32 %479, i32* %427, align 4, !noalias !19
  br label %480

480:                                              ; preds = %465, %478
  %481 = phi i32 [ %479, %478 ], [ %469, %465 ]
  store i64 ptrtoint ([16 x i8]* @.str.7 to i64), i64* %226, align 8, !alias.scope !19
  store %"class.WTF::StringImpl"* %420, %"class.WTF::StringImpl"** %227, align 8, !alias.scope !19
  %482 = load atomic i32, i32* %423 monotonic, align 4, !noalias !19
  %483 = and i32 %482, 2
  %484 = icmp eq i32 %483, 0
  br i1 %484, label %485, label %496

485:                                              ; preds = %480
  %486 = zext i32 %481 to i33
  %487 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %486, i33 1) #5
  %488 = extractvalue { i33, i1 } %487, 1
  %489 = extractvalue { i33, i1 } %487, 0
  %490 = icmp slt i33 %489, 0
  %491 = or i1 %488, %490
  br i1 %491, label %492, label %493, !prof !2

492:                                              ; preds = %485
  call void @llvm.trap() #5, !noalias !19
  unreachable

493:                                              ; preds = %485
  %494 = trunc i33 %489 to i32
  store i32 %494, i32* %427, align 4, !noalias !19
  br label %496

495:                                              ; preds = %419
  store i64 ptrtoint ([16 x i8]* @.str.7 to i64), i64* %226, align 8, !alias.scope !19
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %227, align 8, !alias.scope !19
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0), i8** %228, align 8, !alias.scope !19
  br label %507

496:                                              ; preds = %493, %480
  %497 = phi i32 [ %494, %493 ], [ %481, %480 ]
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0), i8** %228, align 8, !alias.scope !19
  %498 = load atomic i32, i32* %423 monotonic, align 4, !noalias !19
  %499 = and i32 %498, 2
  %500 = icmp eq i32 %499, 0
  br i1 %500, label %501, label %503

501:                                              ; preds = %496
  %502 = add i32 %497, -1
  store i32 %502, i32* %427, align 4, !noalias !19
  br label %503

503:                                              ; preds = %501, %496
  %504 = phi i32 [ %502, %501 ], [ %497, %496 ]
  %505 = icmp eq i32 %504, 0
  br i1 %505, label %506, label %507

506:                                              ; preds = %503
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %420) #5, !noalias !19
  br label %507

507:                                              ; preds = %495, %503, %506
  %508 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"* nonnull %14)
  store %"class.WTF::StringImpl"* %508, %"class.WTF::StringImpl"** %229, align 8
  %509 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*** %217, align 8
  %510 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)** %509, align 8
  call void %510(%"class.blink::ExceptionState"* %6, i32 1, %"class.WTF::String"* nonnull dereferenceable(8) %13) #5
  %511 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %229, align 8
  %512 = icmp eq %"class.WTF::StringImpl"* %511, null
  br i1 %512, label %526, label %513

513:                                              ; preds = %507
  %514 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %511, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %515 = load atomic i32, i32* %514 monotonic, align 4
  %516 = and i32 %515, 2
  %517 = icmp eq i32 %516, 0
  %518 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %511, i64 0, i32 0
  %519 = load i32, i32* %518, align 4
  br i1 %517, label %520, label %522

520:                                              ; preds = %513
  %521 = add i32 %519, -1
  store i32 %521, i32* %518, align 4
  br label %522

522:                                              ; preds = %520, %513
  %523 = phi i32 [ %521, %520 ], [ %519, %513 ]
  %524 = icmp eq i32 %523, 0
  br i1 %524, label %525, label %526

525:                                              ; preds = %522
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %511) #5
  br label %526

526:                                              ; preds = %507, %522, %525
  %527 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %227, align 8
  %528 = icmp eq %"class.WTF::StringImpl"* %527, null
  br i1 %528, label %542, label %529

529:                                              ; preds = %526
  %530 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %527, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %531 = load atomic i32, i32* %530 monotonic, align 4
  %532 = and i32 %531, 2
  %533 = icmp eq i32 %532, 0
  %534 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %527, i64 0, i32 0
  %535 = load i32, i32* %534, align 4
  br i1 %533, label %536, label %538

536:                                              ; preds = %529
  %537 = add i32 %535, -1
  store i32 %537, i32* %534, align 4
  br label %538

538:                                              ; preds = %536, %529
  %539 = phi i32 [ %537, %536 ], [ %535, %529 ]
  %540 = icmp eq i32 %539, 0
  br i1 %540, label %541, label %542

541:                                              ; preds = %538
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %527) #5
  br label %542

542:                                              ; preds = %526, %538, %541
  br i1 %421, label %568, label %543

543:                                              ; preds = %542
  %544 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %420, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %545 = load atomic i32, i32* %544 monotonic, align 4
  %546 = and i32 %545, 2
  %547 = icmp eq i32 %546, 0
  %548 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %420, i64 0, i32 0
  %549 = load i32, i32* %548, align 4
  br i1 %547, label %550, label %552

550:                                              ; preds = %543
  %551 = add i32 %549, -1
  store i32 %551, i32* %548, align 4
  br label %552

552:                                              ; preds = %550, %543
  %553 = phi i32 [ %551, %550 ], [ %549, %543 ]
  %554 = icmp eq i32 %553, 0
  br i1 %554, label %555, label %557

555:                                              ; preds = %552
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %420) #5
  %556 = load i32, i32* %548, align 4
  br label %557

557:                                              ; preds = %552, %555
  %558 = phi i32 [ %553, %552 ], [ %556, %555 ]
  %559 = load atomic i32, i32* %544 monotonic, align 4
  %560 = and i32 %559, 2
  %561 = icmp eq i32 %560, 0
  br i1 %561, label %562, label %564

562:                                              ; preds = %557
  %563 = add i32 %558, -1
  store i32 %563, i32* %548, align 4
  br label %564

564:                                              ; preds = %562, %557
  %565 = phi i32 [ %563, %562 ], [ %558, %557 ]
  %566 = icmp eq i32 %565, 0
  br i1 %566, label %567, label %568

567:                                              ; preds = %564
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %420) #5
  br label %568

568:                                              ; preds = %542, %564, %567
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %225) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %224) #5
  br label %569

569:                                              ; preds = %417, %568
  %570 = load double, double* %244, align 8
  %571 = fcmp ult double %570, 0xC7EFFFFFE0000000
  %572 = fcmp ugt double %570, 0x47EFFFFFE0000000
  %573 = fptrunc double %570 to float
  %574 = select i1 %571, float 0xFFF0000000000000, float %573
  %575 = select i1 %571, float 0x7FF8000000000000, float 0x7FF0000000000000
  %576 = select i1 %572, float %575, float %574
  %577 = load double, double* %252, align 8
  %578 = fcmp ult double %577, 0xC7EFFFFFE0000000
  %579 = fcmp ugt double %577, 0x47EFFFFFE0000000
  %580 = fptrunc double %577 to float
  %581 = select i1 %578, float 0xFFF0000000000000, float %580
  %582 = select i1 %578, float 0x7FF8000000000000, float 0x7FF0000000000000
  %583 = select i1 %579, float %582, float %581
  br label %750

584:                                              ; preds = %230
  %585 = call dereferenceable(8) %"class.blink::Member"* @_ZNK3WTF6VectorIN5blink6MemberINS1_35V8UnionDOMPointOrUnrestrictedDoubleEEELj0ENS1_13HeapAllocatorEE2atEj(%"class.WTF::Vector.19"* %23, i32 %232) #5
  %586 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %585, i64 0, i32 0, i32 0
  %587 = load %"class.blink::V8UnionDOMPointOrUnrestrictedDouble"*, %"class.blink::V8UnionDOMPointOrUnrestrictedDouble"** %586, align 8
  %588 = getelementptr inbounds %"class.blink::V8UnionDOMPointOrUnrestrictedDouble", %"class.blink::V8UnionDOMPointOrUnrestrictedDouble"* %587, i64 0, i32 3
  %589 = load double, double* %588, align 8
  %590 = fcmp ult double %589, 0xC7EFFFFFE0000000
  %591 = fcmp ugt double %589, 0x47EFFFFFE0000000
  %592 = fptrunc double %589 to float
  %593 = select i1 %590, float 0xFFF0000000000000, float %592
  %594 = select i1 %590, float 0x7FF8000000000000, float 0x7FF0000000000000
  %595 = select i1 %591, float %594, float %593
  %596 = call float @llvm.fabs.f32(float %595) #9
  %597 = fcmp ueq float %596, 0x7FF0000000000000
  br i1 %597, label %902, label %598, !prof !2

598:                                              ; preds = %584
  %599 = fcmp olt float %595, 0.000000e+00
  br i1 %599, label %600, label %750, !prof !2

600:                                              ; preds = %598
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %211) #5
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %212) #5
  %601 = call %"class.WTF::StringImpl"* @_ZN3WTF6String6NumberEf(float %595) #5
  %602 = icmp eq %"class.WTF::StringImpl"* %601, null
  br i1 %602, label %676, label %603

603:                                              ; preds = %600
  %604 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %601, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %605 = load atomic i32, i32* %604 monotonic, align 4
  %606 = and i32 %605, 2
  %607 = icmp eq i32 %606, 0
  %608 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %601, i64 0, i32 0
  %609 = load i32, i32* %608, align 4
  br i1 %607, label %610, label %620

610:                                              ; preds = %603
  %611 = zext i32 %609 to i33
  %612 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %611, i33 1) #5
  %613 = extractvalue { i33, i1 } %612, 1
  %614 = extractvalue { i33, i1 } %612, 0
  %615 = icmp slt i33 %614, 0
  %616 = or i1 %613, %615
  br i1 %616, label %617, label %618, !prof !2

617:                                              ; preds = %610
  call void @llvm.trap() #5
  unreachable

618:                                              ; preds = %610
  %619 = trunc i33 %614 to i32
  store i32 %619, i32* %608, align 4
  br label %620

620:                                              ; preds = %618, %603
  %621 = phi i32 [ %619, %618 ], [ %609, %603 ]
  %622 = load atomic i32, i32* %604 monotonic, align 4
  %623 = and i32 %622, 2
  %624 = icmp eq i32 %623, 0
  br i1 %624, label %625, label %635

625:                                              ; preds = %620
  %626 = zext i32 %621 to i33
  %627 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %626, i33 1) #5
  %628 = extractvalue { i33, i1 } %627, 1
  %629 = extractvalue { i33, i1 } %627, 0
  %630 = icmp slt i33 %629, 0
  %631 = or i1 %628, %630
  br i1 %631, label %632, label %633, !prof !2

632:                                              ; preds = %625
  call void @llvm.trap() #5
  unreachable

633:                                              ; preds = %625
  %634 = trunc i33 %629 to i32
  store i32 %634, i32* %608, align 4
  br label %635

635:                                              ; preds = %633, %620
  %636 = phi i32 [ %634, %633 ], [ %621, %620 ]
  %637 = load atomic i32, i32* %604 monotonic, align 4
  %638 = and i32 %637, 2
  %639 = icmp eq i32 %638, 0
  br i1 %639, label %640, label %642

640:                                              ; preds = %635
  %641 = add i32 %636, -1
  store i32 %641, i32* %608, align 4
  br label %642

642:                                              ; preds = %640, %635
  %643 = phi i32 [ %641, %640 ], [ %636, %635 ]
  %644 = icmp eq i32 %643, 0
  br i1 %644, label %645, label %646

645:                                              ; preds = %642
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %601) #5
  br label %646

646:                                              ; preds = %642, %645
  %647 = load atomic i32, i32* %604 monotonic, align 4, !noalias !22
  %648 = and i32 %647, 2
  %649 = icmp eq i32 %648, 0
  %650 = load i32, i32* %608, align 4
  br i1 %649, label %651, label %661

651:                                              ; preds = %646
  %652 = zext i32 %650 to i33
  %653 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %652, i33 1) #5
  %654 = extractvalue { i33, i1 } %653, 1
  %655 = extractvalue { i33, i1 } %653, 0
  %656 = icmp slt i33 %655, 0
  %657 = or i1 %654, %656
  br i1 %657, label %658, label %659, !prof !2

658:                                              ; preds = %651
  call void @llvm.trap() #5, !noalias !22
  unreachable

659:                                              ; preds = %651
  %660 = trunc i33 %655 to i32
  store i32 %660, i32* %608, align 4, !noalias !22
  br label %661

661:                                              ; preds = %646, %659
  %662 = phi i32 [ %660, %659 ], [ %650, %646 ]
  store i64 ptrtoint ([14 x i8]* @.str.8 to i64), i64* %213, align 8, !alias.scope !22
  store %"class.WTF::StringImpl"* %601, %"class.WTF::StringImpl"** %214, align 8, !alias.scope !22
  %663 = load atomic i32, i32* %604 monotonic, align 4, !noalias !22
  %664 = and i32 %663, 2
  %665 = icmp eq i32 %664, 0
  br i1 %665, label %666, label %677

666:                                              ; preds = %661
  %667 = zext i32 %662 to i33
  %668 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %667, i33 1) #5
  %669 = extractvalue { i33, i1 } %668, 1
  %670 = extractvalue { i33, i1 } %668, 0
  %671 = icmp slt i33 %670, 0
  %672 = or i1 %669, %671
  br i1 %672, label %673, label %674, !prof !2

673:                                              ; preds = %666
  call void @llvm.trap() #5, !noalias !22
  unreachable

674:                                              ; preds = %666
  %675 = trunc i33 %670 to i32
  store i32 %675, i32* %608, align 4, !noalias !22
  br label %677

676:                                              ; preds = %600
  store i64 ptrtoint ([14 x i8]* @.str.8 to i64), i64* %213, align 8, !alias.scope !22
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %214, align 8, !alias.scope !22
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0), i8** %215, align 8, !alias.scope !22
  br label %688

677:                                              ; preds = %674, %661
  %678 = phi i32 [ %675, %674 ], [ %662, %661 ]
  store i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0), i8** %215, align 8, !alias.scope !22
  %679 = load atomic i32, i32* %604 monotonic, align 4, !noalias !22
  %680 = and i32 %679, 2
  %681 = icmp eq i32 %680, 0
  br i1 %681, label %682, label %684

682:                                              ; preds = %677
  %683 = add i32 %678, -1
  store i32 %683, i32* %608, align 4, !noalias !22
  br label %684

684:                                              ; preds = %682, %677
  %685 = phi i32 [ %683, %682 ], [ %678, %677 ]
  %686 = icmp eq i32 %685, 0
  br i1 %686, label %687, label %688

687:                                              ; preds = %684
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %601) #5, !noalias !22
  br label %688

688:                                              ; preds = %676, %684, %687
  %689 = call %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_EcvS3_Ev(%"class.WTF::StringAppend"* nonnull %16)
  store %"class.WTF::StringImpl"* %689, %"class.WTF::StringImpl"** %216, align 8
  %690 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)**, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*** %217, align 8
  %691 = load void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)*, void (%"class.blink::ExceptionState"*, i32, %"class.WTF::String"*)** %690, align 8
  call void %691(%"class.blink::ExceptionState"* %6, i32 1, %"class.WTF::String"* nonnull dereferenceable(8) %15) #5
  %692 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %216, align 8
  %693 = icmp eq %"class.WTF::StringImpl"* %692, null
  br i1 %693, label %707, label %694

694:                                              ; preds = %688
  %695 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %692, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %696 = load atomic i32, i32* %695 monotonic, align 4
  %697 = and i32 %696, 2
  %698 = icmp eq i32 %697, 0
  %699 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %692, i64 0, i32 0
  %700 = load i32, i32* %699, align 4
  br i1 %698, label %701, label %703

701:                                              ; preds = %694
  %702 = add i32 %700, -1
  store i32 %702, i32* %699, align 4
  br label %703

703:                                              ; preds = %701, %694
  %704 = phi i32 [ %702, %701 ], [ %700, %694 ]
  %705 = icmp eq i32 %704, 0
  br i1 %705, label %706, label %707

706:                                              ; preds = %703
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %692) #5
  br label %707

707:                                              ; preds = %688, %703, %706
  %708 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %214, align 8
  %709 = icmp eq %"class.WTF::StringImpl"* %708, null
  br i1 %709, label %723, label %710

710:                                              ; preds = %707
  %711 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %708, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %712 = load atomic i32, i32* %711 monotonic, align 4
  %713 = and i32 %712, 2
  %714 = icmp eq i32 %713, 0
  %715 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %708, i64 0, i32 0
  %716 = load i32, i32* %715, align 4
  br i1 %714, label %717, label %719

717:                                              ; preds = %710
  %718 = add i32 %716, -1
  store i32 %718, i32* %715, align 4
  br label %719

719:                                              ; preds = %717, %710
  %720 = phi i32 [ %718, %717 ], [ %716, %710 ]
  %721 = icmp eq i32 %720, 0
  br i1 %721, label %722, label %723

722:                                              ; preds = %719
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %708) #5
  br label %723

723:                                              ; preds = %707, %719, %722
  br i1 %602, label %749, label %724

724:                                              ; preds = %723
  %725 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %601, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %726 = load atomic i32, i32* %725 monotonic, align 4
  %727 = and i32 %726, 2
  %728 = icmp eq i32 %727, 0
  %729 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %601, i64 0, i32 0
  %730 = load i32, i32* %729, align 4
  br i1 %728, label %731, label %733

731:                                              ; preds = %724
  %732 = add i32 %730, -1
  store i32 %732, i32* %729, align 4
  br label %733

733:                                              ; preds = %731, %724
  %734 = phi i32 [ %732, %731 ], [ %730, %724 ]
  %735 = icmp eq i32 %734, 0
  br i1 %735, label %736, label %738

736:                                              ; preds = %733
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %601) #5
  %737 = load i32, i32* %729, align 4
  br label %738

738:                                              ; preds = %733, %736
  %739 = phi i32 [ %734, %733 ], [ %737, %736 ]
  %740 = load atomic i32, i32* %725 monotonic, align 4
  %741 = and i32 %740, 2
  %742 = icmp eq i32 %741, 0
  br i1 %742, label %743, label %745

743:                                              ; preds = %738
  %744 = add i32 %739, -1
  store i32 %744, i32* %729, align 4
  br label %745

745:                                              ; preds = %743, %738
  %746 = phi i32 [ %744, %743 ], [ %739, %738 ]
  %747 = icmp eq i32 %746, 0
  br i1 %747, label %748, label %749

748:                                              ; preds = %745
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %601) #5
  br label %749

749:                                              ; preds = %723, %745, %748
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %212) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %211) #5
  br label %750

750:                                              ; preds = %749, %598, %569
  %751 = phi float [ %576, %569 ], [ %595, %598 ], [ %595, %749 ]
  %752 = phi float [ %583, %569 ], [ %595, %598 ], [ %595, %749 ]
  %753 = getelementptr inbounds i64, i64* %204, i64 %231
  %754 = bitcast i64* %753 to float*
  store float %751, float* %754, align 8
  %755 = bitcast i64* %753 to i8*
  %756 = getelementptr inbounds i8, i8* %755, i64 4
  %757 = bitcast i8* %756 to float*
  store float %752, float* %757, align 4
  br label %758

758:                                              ; preds = %750, %230
  %759 = add nuw nsw i64 %231, 1
  %760 = icmp eq i64 %759, %202
  br i1 %760, label %761, label %230

761:                                              ; preds = %758, %201, %207
  %762 = extractelement <4 x float> %187, i32 2
  %763 = fcmp oeq float %762, 0.000000e+00
  %764 = extractelement <4 x float> %187, i32 3
  %765 = fcmp oeq float %764, 0.000000e+00
  %766 = or i1 %763, %765
  br i1 %766, label %767, label %770, !prof !25

767:                                              ; preds = %761
  %768 = getelementptr inbounds %"class.blink::CanvasPath", %"class.blink::CanvasPath"* %0, i64 0, i32 2
  %769 = bitcast <4 x float>* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %769) #5
  store <4 x float> %187, <4 x float>* %17, align 16
  call void @_ZN5blink4Path7AddRectERKNS_9FloatRectE(%"class.blink::Path"* %768, %"class.blink::FloatRect"* nonnull dereferenceable(16) %18) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %769) #5
  br label %902

770:                                              ; preds = %761
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #5
  %771 = getelementptr inbounds [4 x %"class.blink::FloatSize"], [4 x %"class.blink::FloatSize"]* %19, i64 0, i64 0
  %772 = getelementptr inbounds [4 x %"class.blink::FloatSize"], [4 x %"class.blink::FloatSize"]* %19, i64 0, i64 0, i32 1
  %773 = getelementptr inbounds [4 x %"class.blink::FloatSize"], [4 x %"class.blink::FloatSize"]* %19, i64 0, i64 1
  %774 = getelementptr inbounds [4 x %"class.blink::FloatSize"], [4 x %"class.blink::FloatSize"]* %19, i64 0, i64 1, i32 1
  %775 = getelementptr inbounds [4 x %"class.blink::FloatSize"], [4 x %"class.blink::FloatSize"]* %19, i64 0, i64 2
  %776 = getelementptr inbounds [4 x %"class.blink::FloatSize"], [4 x %"class.blink::FloatSize"]* %19, i64 0, i64 2, i32 1
  %777 = getelementptr inbounds [4 x %"class.blink::FloatSize"], [4 x %"class.blink::FloatSize"]* %19, i64 0, i64 3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 0, i64 32, i1 false)
  switch i32 %25, label %838 [
    i32 1, label %778
    i32 2, label %787
    i32 3, label %801
    i32 4, label %817
  ]

778:                                              ; preds = %770
  %779 = bitcast %"class.blink::FloatSize"* %777 to i64*
  %780 = load i64, i64* %204, align 16
  store i64 %780, i64* %779, align 8
  %781 = bitcast %"class.blink::FloatSize"* %775 to i64*
  store i64 %780, i64* %781, align 16
  %782 = bitcast %"class.blink::FloatSize"* %773 to i64*
  store i64 %780, i64* %782, align 8
  %783 = bitcast [4 x %"class.blink::FloatSize"]* %19 to i64*
  store i64 %780, i64* %783, align 16
  %784 = trunc i64 %780 to i32
  %785 = lshr i64 %780, 32
  %786 = trunc i64 %785 to i32
  br label %838

787:                                              ; preds = %770
  %788 = bitcast %"class.blink::FloatSize"* %777 to i64*
  %789 = load i64, i64* %204, align 16
  store i64 %789, i64* %788, align 8
  %790 = bitcast [4 x %"class.blink::FloatSize"]* %19 to i64*
  store i64 %789, i64* %790, align 16
  %791 = getelementptr inbounds i64, i64* %204, i64 1
  %792 = bitcast %"class.blink::FloatSize"* %775 to i64*
  %793 = load i64, i64* %791, align 8
  store i64 %793, i64* %792, align 16
  %794 = bitcast %"class.blink::FloatSize"* %773 to i64*
  store i64 %793, i64* %794, align 8
  %795 = trunc i64 %793 to i32
  %796 = lshr i64 %793, 32
  %797 = trunc i64 %796 to i32
  %798 = trunc i64 %789 to i32
  %799 = lshr i64 %789, 32
  %800 = trunc i64 %799 to i32
  br label %838

801:                                              ; preds = %770
  %802 = bitcast [4 x %"class.blink::FloatSize"]* %19 to i64*
  %803 = load i64, i64* %204, align 16
  store i64 %803, i64* %802, align 16
  %804 = getelementptr inbounds i64, i64* %204, i64 1
  %805 = bitcast %"class.blink::FloatSize"* %775 to i64*
  %806 = load i64, i64* %804, align 8
  store i64 %806, i64* %805, align 16
  %807 = bitcast %"class.blink::FloatSize"* %773 to i64*
  store i64 %806, i64* %807, align 8
  %808 = getelementptr inbounds i64, i64* %204, i64 2
  %809 = bitcast %"class.blink::FloatSize"* %777 to i64*
  %810 = load i64, i64* %808, align 16
  store i64 %810, i64* %809, align 8
  %811 = trunc i64 %806 to i32
  %812 = lshr i64 %806, 32
  %813 = trunc i64 %812 to i32
  %814 = trunc i64 %810 to i32
  %815 = lshr i64 %810, 32
  %816 = trunc i64 %815 to i32
  br label %838

817:                                              ; preds = %770
  %818 = bitcast [4 x %"class.blink::FloatSize"]* %19 to i64*
  %819 = load i64, i64* %204, align 16
  store i64 %819, i64* %818, align 16
  %820 = getelementptr inbounds i64, i64* %204, i64 1
  %821 = bitcast %"class.blink::FloatSize"* %773 to i64*
  %822 = load i64, i64* %820, align 8
  store i64 %822, i64* %821, align 8
  %823 = getelementptr inbounds i64, i64* %204, i64 3
  %824 = bitcast %"class.blink::FloatSize"* %775 to i64*
  %825 = load i64, i64* %823, align 8
  store i64 %825, i64* %824, align 16
  %826 = getelementptr inbounds i64, i64* %204, i64 2
  %827 = bitcast %"class.blink::FloatSize"* %777 to i64*
  %828 = load i64, i64* %826, align 16
  store i64 %828, i64* %827, align 8
  %829 = trunc i64 %822 to i32
  %830 = lshr i64 %822, 32
  %831 = trunc i64 %830 to i32
  %832 = trunc i64 %828 to i32
  %833 = lshr i64 %828, 32
  %834 = trunc i64 %833 to i32
  %835 = trunc i64 %825 to i32
  %836 = lshr i64 %825, 32
  %837 = trunc i64 %836 to i32
  br label %838

838:                                              ; preds = %817, %770, %801, %787, %778
  %839 = phi i64 [ %822, %817 ], [ 0, %770 ], [ %806, %801 ], [ %793, %787 ], [ %780, %778 ]
  %840 = phi i32 [ %834, %817 ], [ 0, %770 ], [ %816, %801 ], [ %800, %787 ], [ %786, %778 ]
  %841 = phi i32 [ %832, %817 ], [ 0, %770 ], [ %814, %801 ], [ %798, %787 ], [ %784, %778 ]
  %842 = phi i32 [ %837, %817 ], [ 0, %770 ], [ %813, %801 ], [ %797, %787 ], [ %786, %778 ]
  %843 = phi i32 [ %835, %817 ], [ 0, %770 ], [ %811, %801 ], [ %795, %787 ], [ %784, %778 ]
  %844 = phi i64 [ %825, %817 ], [ 0, %770 ], [ %806, %801 ], [ %793, %787 ], [ %780, %778 ]
  %845 = phi i64 [ %819, %817 ], [ 0, %770 ], [ %803, %801 ], [ %789, %787 ], [ %780, %778 ]
  %846 = phi i32 [ %831, %817 ], [ 0, %770 ], [ %813, %801 ], [ %797, %787 ], [ %786, %778 ]
  %847 = phi i32 [ %829, %817 ], [ 0, %770 ], [ %811, %801 ], [ %795, %787 ], [ %784, %778 ]
  %848 = fcmp olt float %762, 0.000000e+00
  %849 = extractelement <4 x float> %187, i32 0
  br i1 %848, label %850, label %863, !prof !2

850:                                              ; preds = %838
  %851 = fadd float %849, %762
  %852 = fsub float -0.000000e+00, %762
  %853 = bitcast %"class.blink::FloatSize"* %773 to i64*
  store i64 %845, i64* %853, align 8
  %854 = bitcast [4 x %"class.blink::FloatSize"]* %19 to i32*
  store i32 %847, i32* %854, align 16
  %855 = bitcast float* %772 to i32*
  store i32 %846, i32* %855, align 4
  %856 = bitcast %"class.blink::FloatSize"* %777 to i64*
  store i64 %844, i64* %856, align 8
  %857 = getelementptr inbounds [4 x %"class.blink::FloatSize"], [4 x %"class.blink::FloatSize"]* %19, i64 0, i64 2, i32 0
  %858 = bitcast float* %857 to i32*
  store i32 %841, i32* %858, align 16
  %859 = bitcast float* %776 to i32*
  store i32 %840, i32* %859, align 4
  %860 = trunc i64 %844 to i32
  %861 = lshr i64 %844, 32
  %862 = trunc i64 %861 to i32
  br label %863

863:                                              ; preds = %850, %838
  %864 = phi i64 [ %845, %850 ], [ %839, %838 ]
  %865 = phi i32 [ %862, %850 ], [ %840, %838 ]
  %866 = phi i32 [ %860, %850 ], [ %841, %838 ]
  %867 = phi i32 [ %840, %850 ], [ %842, %838 ]
  %868 = phi i32 [ %841, %850 ], [ %843, %838 ]
  %869 = phi i8 [ 0, %850 ], [ 1, %838 ]
  %870 = phi float [ %852, %850 ], [ %762, %838 ]
  %871 = phi float [ %851, %850 ], [ %849, %838 ]
  %872 = fcmp olt float %764, 0.000000e+00
  %873 = extractelement <4 x float> %187, i32 1
  br i1 %872, label %874, label %887, !prof !2

874:                                              ; preds = %863
  %875 = xor i8 %869, 1
  %876 = fadd float %873, %764
  %877 = fsub float -0.000000e+00, %764
  %878 = bitcast [4 x %"class.blink::FloatSize"]* %19 to i64*
  %879 = bitcast %"class.blink::FloatSize"* %775 to i64*
  %880 = load i64, i64* %878, align 16
  store i64 %880, i64* %879, align 16
  %881 = bitcast [4 x %"class.blink::FloatSize"]* %19 to i32*
  store i32 %868, i32* %881, align 16
  %882 = bitcast float* %772 to i32*
  store i32 %867, i32* %882, align 4
  %883 = bitcast %"class.blink::FloatSize"* %777 to i64*
  store i64 %864, i64* %883, align 8
  %884 = getelementptr inbounds [4 x %"class.blink::FloatSize"], [4 x %"class.blink::FloatSize"]* %19, i64 0, i64 1, i32 0
  %885 = bitcast float* %884 to i32*
  store i32 %866, i32* %885, align 8
  %886 = bitcast float* %774 to i32*
  store i32 %865, i32* %886, align 4
  br label %887

887:                                              ; preds = %874, %863
  %888 = phi float [ %877, %874 ], [ %764, %863 ]
  %889 = phi i8 [ %875, %874 ], [ %869, %863 ]
  %890 = phi float [ %876, %874 ], [ %873, %863 ]
  %891 = bitcast %"class.blink::FloatRect"* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %891) #5
  %892 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %21, i64 0, i32 0, i32 0
  %893 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %21, i64 0, i32 0, i32 1
  %894 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %21, i64 0, i32 1, i32 0
  %895 = getelementptr inbounds %"class.blink::FloatRect", %"class.blink::FloatRect"* %21, i64 0, i32 1, i32 1
  store float %871, float* %892, align 4
  store float %890, float* %893, align 4
  store float %870, float* %894, align 4
  store float %888, float* %895, align 4
  %896 = getelementptr inbounds %"class.blink::CanvasPath", %"class.blink::CanvasPath"* %0, i64 0, i32 2
  %897 = and i8 %889, 1
  %898 = icmp ne i8 %897, 0
  call void @_ZN5blink4Path21AddPathForRoundedRectERKNS_9FloatRectERKNS_9FloatSizeES6_S6_S6_b(%"class.blink::Path"* %896, %"class.blink::FloatRect"* nonnull dereferenceable(16) %21, %"class.blink::FloatSize"* nonnull dereferenceable(8) %771, %"class.blink::FloatSize"* dereferenceable(8) %773, %"class.blink::FloatSize"* dereferenceable(8) %775, %"class.blink::FloatSize"* dereferenceable(8) %777, i1 zeroext %898) #5
  %899 = bitcast %"class.blink::FloatPoint"* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %899) #5
  %900 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %22, i64 0, i32 0
  store float %871, float* %900, align 4
  %901 = getelementptr inbounds %"class.blink::FloatPoint", %"class.blink::FloatPoint"* %22, i64 0, i32 1
  store float %890, float* %901, align 4
  call void @_ZN5blink4Path6MoveToERKNS_10FloatPointE(%"class.blink::Path"* %896, %"class.blink::FloatPoint"* nonnull dereferenceable(8) %22) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %899) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %891) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #5
  br label %902

902:                                              ; preds = %584, %238, %887, %767
  call void @llvm.stackrestore(i8* %203)
  br label %903

903:                                              ; preds = %177, %902
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.WTF::StringImpl"* @_ZNK3WTF12StringAppendINS_6StringEPKcEcvS1_Ev(%"class.WTF::StringAppend.32"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.WTF::StringTypeAdapter.35", align 8
  %3 = alloca %"class.WTF::StringTypeAdapter.34", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.35", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.34", align 8
  %6 = alloca %"class.WTF::StringTypeAdapter.34", align 8
  %7 = alloca i8*, align 8
  %8 = alloca i16*, align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.32", %"class.WTF::StringAppend.32"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  %12 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E, align 8
  %13 = select i1 %11, %"class.WTF::StringImpl"* %12, %"class.WTF::StringImpl"* %10
  %14 = bitcast %"class.WTF::StringTypeAdapter.34"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %14) #5
  %15 = getelementptr inbounds %"class.WTF::StringAppend.32", %"class.WTF::StringAppend.32"* %0, i64 0, i32 1
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 16, i1 false) #5
  %16 = load i8*, i8** %15, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.34"* nonnull %6, i8* %16) #5
  %17 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %13, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %18 = load atomic i32, i32* %17 monotonic, align 4
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %14) #5
  br i1 %20, label %81, label %21

21:                                               ; preds = %1
  %22 = bitcast i8** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #5
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %23 = call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.32"* %0)
  %24 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32 %23, i8** nonnull dereferenceable(8) %7) #5
  %25 = load i8*, i8** %7, align 8
  %26 = bitcast %"class.WTF::StringTypeAdapter.35"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %26) #5
  %27 = getelementptr inbounds %"class.WTF::StringTypeAdapter.35", %"class.WTF::StringTypeAdapter.35"* %4, i64 0, i32 0, i32 0, i32 1
  %28 = getelementptr inbounds %"class.WTF::StringTypeAdapter.35", %"class.WTF::StringTypeAdapter.35"* %4, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %26, i8 -86, i64 24, i1 false) #5
  %29 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %30 = icmp eq %"class.WTF::StringImpl"* %29, null
  br i1 %30, label %31, label %33

31:                                               ; preds = %21
  %32 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %39

33:                                               ; preds = %21
  %34 = ptrtoint %"class.WTF::StringImpl"* %29 to i64
  %35 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 0, i32 1
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %29, i64 1
  %38 = bitcast %"class.WTF::StringImpl"* %37 to i8*
  br label %39

39:                                               ; preds = %31, %33
  %40 = phi i8* [ null, %31 ], [ %38, %33 ]
  %41 = phi i64 [ %32, %31 ], [ %34, %33 ]
  %42 = phi i32 [ 0, %31 ], [ %36, %33 ]
  %43 = bitcast %"class.WTF::StringTypeAdapter.35"* %4 to i64*
  store i64 %41, i64* %43, align 8
  store i8* %40, i8** %27, align 8
  store i32 %42, i32* %28, align 8
  %44 = bitcast %"class.WTF::StringTypeAdapter.34"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %44) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %44, i8 -86, i64 16, i1 false) #5
  %45 = load i8*, i8** %15, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.34"* nonnull %5, i8* %45) #5
  %46 = getelementptr inbounds %"class.WTF::StringTypeAdapter.35", %"class.WTF::StringTypeAdapter.35"* %4, i64 0, i32 0
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.36"* nonnull %46, i8* %25) #5
  %47 = load i32, i32* %28, align 8
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds i8, i8* %25, i64 %48
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.34"* nonnull %5, i8* %49) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %44) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %26) #5
  %50 = icmp eq %"class.WTF::StringImpl"* %24, null
  br i1 %50, label %141, label %51

51:                                               ; preds = %39
  %52 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %53 = load atomic i32, i32* %52 monotonic, align 4
  %54 = and i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %57 = load i32, i32* %56, align 4
  br i1 %55, label %58, label %68

58:                                               ; preds = %51
  %59 = zext i32 %57 to i33
  %60 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %59, i33 1) #5
  %61 = extractvalue { i33, i1 } %60, 1
  %62 = extractvalue { i33, i1 } %60, 0
  %63 = icmp slt i33 %62, 0
  %64 = or i1 %61, %63
  br i1 %64, label %65, label %66, !prof !2

65:                                               ; preds = %58
  call void @llvm.trap() #5
  unreachable

66:                                               ; preds = %58
  %67 = trunc i33 %62 to i32
  store i32 %67, i32* %56, align 4
  br label %68

68:                                               ; preds = %51, %66
  %69 = phi i32 [ %67, %66 ], [ %57, %51 ]
  %70 = ptrtoint %"class.WTF::StringImpl"* %24 to i64
  %71 = load atomic i32, i32* %52 monotonic, align 4
  %72 = and i32 %71, 2
  %73 = icmp eq i32 %72, 0
  br i1 %73, label %74, label %77

74:                                               ; preds = %68
  %75 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %24, i64 0, i32 0
  %76 = add i32 %69, -1
  store i32 %76, i32* %75, align 4
  br label %77

77:                                               ; preds = %74, %68
  %78 = phi i32 [ %76, %74 ], [ %69, %68 ]
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %141

80:                                               ; preds = %77
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %24) #5
  br label %141

81:                                               ; preds = %1
  %82 = bitcast i16** %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %82) #5
  store i16* inttoptr (i64 -6148914691236517206 to i16*), i16** %8, align 8
  %83 = call i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.32"* %0)
  %84 = call %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32 %83, i16** nonnull dereferenceable(8) %8) #5
  %85 = load i16*, i16** %8, align 8
  %86 = bitcast %"class.WTF::StringTypeAdapter.35"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %86) #5
  %87 = getelementptr inbounds %"class.WTF::StringTypeAdapter.35", %"class.WTF::StringTypeAdapter.35"* %2, i64 0, i32 0, i32 0, i32 1
  %88 = getelementptr inbounds %"class.WTF::StringTypeAdapter.35", %"class.WTF::StringTypeAdapter.35"* %2, i64 0, i32 0, i32 0, i32 2
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %86, i8 -86, i64 24, i1 false) #5
  %89 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %90 = icmp eq %"class.WTF::StringImpl"* %89, null
  br i1 %90, label %91, label %93

91:                                               ; preds = %81
  %92 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %99

93:                                               ; preds = %81
  %94 = ptrtoint %"class.WTF::StringImpl"* %89 to i64
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 0, i32 1
  %96 = load i32, i32* %95, align 4
  %97 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %89, i64 1
  %98 = bitcast %"class.WTF::StringImpl"* %97 to i8*
  br label %99

99:                                               ; preds = %91, %93
  %100 = phi i8* [ null, %91 ], [ %98, %93 ]
  %101 = phi i64 [ %92, %91 ], [ %94, %93 ]
  %102 = phi i32 [ 0, %91 ], [ %96, %93 ]
  %103 = bitcast %"class.WTF::StringTypeAdapter.35"* %2 to i64*
  store i64 %101, i64* %103, align 8
  store i8* %100, i8** %87, align 8
  store i32 %102, i32* %88, align 8
  %104 = bitcast %"class.WTF::StringTypeAdapter.34"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %104) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %104, i8 -86, i64 16, i1 false) #5
  %105 = load i8*, i8** %15, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.34"* nonnull %3, i8* %105) #5
  %106 = getelementptr inbounds %"class.WTF::StringTypeAdapter.35", %"class.WTF::StringTypeAdapter.35"* %2, i64 0, i32 0
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.36"* nonnull %106, i16* %85) #5
  %107 = load i32, i32* %88, align 8
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds i16, i16* %85, i64 %108
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.34"* nonnull %3, i16* %109) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %104) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %86) #5
  %110 = icmp eq %"class.WTF::StringImpl"* %84, null
  br i1 %110, label %141, label %111

111:                                              ; preds = %99
  %112 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %113 = load atomic i32, i32* %112 monotonic, align 4
  %114 = and i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 0
  %117 = load i32, i32* %116, align 4
  br i1 %115, label %118, label %128

118:                                              ; preds = %111
  %119 = zext i32 %117 to i33
  %120 = call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %119, i33 1) #5
  %121 = extractvalue { i33, i1 } %120, 1
  %122 = extractvalue { i33, i1 } %120, 0
  %123 = icmp slt i33 %122, 0
  %124 = or i1 %121, %123
  br i1 %124, label %125, label %126, !prof !2

125:                                              ; preds = %118
  call void @llvm.trap() #5
  unreachable

126:                                              ; preds = %118
  %127 = trunc i33 %122 to i32
  store i32 %127, i32* %116, align 4
  br label %128

128:                                              ; preds = %111, %126
  %129 = phi i32 [ %127, %126 ], [ %117, %111 ]
  %130 = ptrtoint %"class.WTF::StringImpl"* %84 to i64
  %131 = load atomic i32, i32* %112 monotonic, align 4
  %132 = and i32 %131, 2
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %137

134:                                              ; preds = %128
  %135 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %84, i64 0, i32 0
  %136 = add i32 %129, -1
  store i32 %136, i32* %135, align 4
  br label %137

137:                                              ; preds = %134, %128
  %138 = phi i32 [ %136, %134 ], [ %129, %128 ]
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %141

140:                                              ; preds = %137
  call void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"* nonnull %84) #5
  br label %141

141:                                              ; preds = %140, %137, %99, %80, %77, %39
  %142 = phi i8* [ %22, %39 ], [ %22, %77 ], [ %22, %80 ], [ %82, %99 ], [ %82, %137 ], [ %82, %140 ]
  %143 = phi i64 [ 0, %39 ], [ %70, %77 ], [ %70, %80 ], [ 0, %99 ], [ %130, %137 ], [ %130, %140 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %142) #5
  %144 = inttoptr i64 %143 to %"class.WTF::StringImpl"*
  ret %"class.WTF::StringImpl"* %144
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #5

declare void @_ZN5blink4Path21AddPathForRoundedRectERKNS_9FloatRectERKNS_9FloatSizeES6_S6_S6_b(%"class.blink::Path"*, %"class.blink::FloatRect"* dereferenceable(16), %"class.blink::FloatSize"* dereferenceable(8), %"class.blink::FloatSize"* dereferenceable(8), %"class.blink::FloatSize"* dereferenceable(8), %"class.blink::FloatSize"* dereferenceable(8), i1 zeroext) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #5

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #6

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #7

declare void @_ZNK3WTF10StringImpl18DestroyIfNotStaticEv(%"class.WTF::StringImpl"*) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare float @fmodf(float, float) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare void @_ZN5blink15AffineTransformC1Ev(%"class.blink::AffineTransform"*) unnamed_addr #1

declare dereferenceable(48) %"class.blink::AffineTransform"* @_ZN5blink15AffineTransform13RotateRadiansEd(%"class.blink::AffineTransform"*, double) local_unnamed_addr #1

declare <2 x float> @_ZNK5blink15AffineTransform8MapPointERKNS_10FloatPointE(%"class.blink::AffineTransform"*, %"class.blink::FloatPoint"* dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #7

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPh(i32, i8** dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E6lengthEv(%"class.WTF::StringAppend"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.34", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %10 = bitcast %"class.WTF::StringTypeAdapter.34"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #5
  %11 = getelementptr inbounds %"class.WTF::StringTypeAdapter.34", %"class.WTF::StringTypeAdapter.34"* %4, i64 0, i32 1
  %12 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %13 = bitcast %"class.WTF::StringTypeAdapter.34"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 16, i1 false)
  %14 = load i8*, i8** %12, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.34"* nonnull %4, i8* %14) #5
  %15 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.18"* %9) #5
  %16 = load i32, i32* %11, align 8
  %17 = add i32 %16, %15
  %18 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #5
  %19 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %19, align 8
  %20 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.18"* %9) #5
  %21 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21)
  %22 = icmp ult i32 %17, %20
  br i1 %22, label %24, label %23

23:                                               ; preds = %1
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* null, i8** %19, align 8
  br label %33

24:                                               ; preds = %1
  %25 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #5
  %26 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %20) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i8* %25, i8* %26) #5
  %27 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %28 = load i8*, i8** %27, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21)
  store i8* %28, i8** %19, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.10, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #5
  %32 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #5
  br label %33

33:                                               ; preds = %23, %24, %30
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #5
  %34 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %34) #5
  %35 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %35, align 8
  %36 = load i32, i32* %11, align 8
  %37 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  %38 = icmp ult i32 %17, %36
  br i1 %38, label %40, label %39

39:                                               ; preds = %33
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* null, i8** %35, align 8
  br label %49

40:                                               ; preds = %33
  %41 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %17) #5
  %42 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %36) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.11, i64 0, i64 0), i8* %41, i8* %42) #5
  %43 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %44 = load i8*, i8** %43, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  store i8* %44, i8** %35, align 8
  %45 = icmp eq i8* %44, null
  br i1 %45, label %49, label %46

46:                                               ; preds = %40
  %47 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %47) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.10, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #5
  %48 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %47) #5
  br label %49

49:                                               ; preds = %39, %40, %46
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %34) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #5
  ret i32 %17
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPh(%"class.WTF::StringAppend"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.34", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.35", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.34", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.34"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #5
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %9 = bitcast %"class.WTF::StringTypeAdapter.34"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  %10 = load i8*, i8** %8, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.34"* nonnull %5, i8* %10) #5
  %11 = bitcast %"class.WTF::StringTypeAdapter.34"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #5
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.34", %"class.WTF::StringTypeAdapter.34"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 16, i1 false) #5
  %14 = load i8*, i8** %13, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.34"* nonnull %3, i8* %14) #5
  %15 = bitcast %"class.WTF::StringTypeAdapter.35"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #5
  %16 = getelementptr inbounds %"class.WTF::StringTypeAdapter.35", %"class.WTF::StringTypeAdapter.35"* %4, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::StringTypeAdapter.35", %"class.WTF::StringTypeAdapter.35"* %4, i64 0, i32 0, i32 0, i32 2
  %18 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false) #5
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %2
  %22 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %29

23:                                               ; preds = %2
  %24 = ptrtoint %"class.WTF::StringImpl"* %19 to i64
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 1
  %28 = bitcast %"class.WTF::StringImpl"* %27 to i8*
  br label %29

29:                                               ; preds = %21, %23
  %30 = phi i8* [ null, %21 ], [ %28, %23 ]
  %31 = phi i64 [ %22, %21 ], [ %24, %23 ]
  %32 = phi i32 [ 0, %21 ], [ %26, %23 ]
  %33 = bitcast %"class.WTF::StringTypeAdapter.35"* %4 to i64*
  store i64 %31, i64* %33, align 8
  store i8* %30, i8** %16, align 8
  store i32 %32, i32* %17, align 8
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.34"* nonnull %3, i8* %1) #5
  %34 = getelementptr inbounds %"class.WTF::StringTypeAdapter.35", %"class.WTF::StringTypeAdapter.35"* %4, i64 0, i32 0
  %35 = load i32, i32* %12, align 8
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i8, i8* %1, i64 %36
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.36"* nonnull %34, i8* %37) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #5
  %38 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.18"* %6) #5
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %1, i64 %39
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.34"* nonnull %5, i8* %40) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #5
  ret void
}

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl19CreateUninitializedEjRPDs(i32, i16** dereferenceable(8)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNK3WTF12StringAppendINS0_IPKcNS_6StringEEES2_E7WriteToEPDs(%"class.WTF::StringAppend"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.WTF::StringTypeAdapter.34", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.35", align 8
  %5 = alloca %"class.WTF::StringTypeAdapter.34", align 8
  %6 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0
  %7 = bitcast %"class.WTF::StringTypeAdapter.34"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7) #5
  %8 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 1
  %9 = bitcast %"class.WTF::StringTypeAdapter.34"* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %9, i8 -86, i64 16, i1 false)
  %10 = load i8*, i8** %8, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.34"* nonnull %5, i8* %10) #5
  %11 = bitcast %"class.WTF::StringTypeAdapter.34"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %11) #5
  %12 = getelementptr inbounds %"class.WTF::StringTypeAdapter.34", %"class.WTF::StringTypeAdapter.34"* %3, i64 0, i32 1
  %13 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 -86, i64 16, i1 false) #5
  %14 = load i8*, i8** %13, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.34"* nonnull %3, i8* %14) #5
  %15 = bitcast %"class.WTF::StringTypeAdapter.35"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %15) #5
  %16 = getelementptr inbounds %"class.WTF::StringTypeAdapter.35", %"class.WTF::StringTypeAdapter.35"* %4, i64 0, i32 0, i32 0, i32 1
  %17 = getelementptr inbounds %"class.WTF::StringTypeAdapter.35", %"class.WTF::StringTypeAdapter.35"* %4, i64 0, i32 0, i32 0, i32 2
  %18 = getelementptr inbounds %"class.WTF::StringAppend", %"class.WTF::StringAppend"* %0, i64 0, i32 0, i32 1, i32 0, i32 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 24, i1 false) #5
  %19 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %18, align 8
  %20 = icmp eq %"class.WTF::StringImpl"* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %2
  %22 = load i64, i64* bitcast (%"class.WTF::StringImpl"** @_ZN3WTF10StringImpl6empty_E to i64*), align 8
  br label %29

23:                                               ; preds = %2
  %24 = ptrtoint %"class.WTF::StringImpl"* %19 to i64
  %25 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 0, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %19, i64 1
  %28 = bitcast %"class.WTF::StringImpl"* %27 to i8*
  br label %29

29:                                               ; preds = %21, %23
  %30 = phi i8* [ null, %21 ], [ %28, %23 ]
  %31 = phi i64 [ %22, %21 ], [ %24, %23 ]
  %32 = phi i32 [ 0, %21 ], [ %26, %23 ]
  %33 = bitcast %"class.WTF::StringTypeAdapter.35"* %4 to i64*
  store i64 %31, i64* %33, align 8
  store i8* %30, i8** %16, align 8
  store i32 %32, i32* %17, align 8
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.34"* nonnull %3, i16* %1) #5
  %34 = getelementptr inbounds %"class.WTF::StringTypeAdapter.35", %"class.WTF::StringTypeAdapter.35"* %4, i64 0, i32 0
  %35 = load i32, i32* %12, align 8
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds i16, i16* %1, i64 %36
  call void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.36"* nonnull %34, i16* %37) #5
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %15) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %11) #5
  %38 = call i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.18"* %6) #5
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i16, i16* %1, i64 %39
  call void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.34"* nonnull %5, i16* %40) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7) #5
  ret void
}

declare void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.34"*, i8*) unnamed_addr #1

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #1

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #1

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #8

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendIPKcNS_6StringEE6lengthEv(%"class.WTF::StringAppend.18"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.34", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = bitcast %"class.WTF::StringTypeAdapter.34"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #5
  %10 = getelementptr inbounds %"class.WTF::StringTypeAdapter.34", %"class.WTF::StringTypeAdapter.34"* %4, i64 0, i32 1
  %11 = getelementptr inbounds %"class.WTF::StringAppend.18", %"class.WTF::StringAppend.18"* %0, i64 0, i32 0
  %12 = bitcast %"class.WTF::StringTypeAdapter.34"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 16, i1 false)
  %13 = load i8*, i8** %11, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.34"* nonnull %4, i8* %13) #5
  %14 = getelementptr inbounds %"class.WTF::StringAppend.18", %"class.WTF::StringAppend.18"* %0, i64 0, i32 1, i32 0, i32 0
  %15 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %14, align 8
  %16 = icmp eq %"class.WTF::StringImpl"* %15, null
  br i1 %16, label %20, label %17

17:                                               ; preds = %1
  %18 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %15, i64 0, i32 1
  %19 = load i32, i32* %18, align 4
  br label %20

20:                                               ; preds = %1, %17
  %21 = phi i32 [ %19, %17 ], [ 0, %1 ]
  %22 = load i32, i32* %10, align 8
  %23 = add i32 %22, %21
  %24 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #5
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %25, align 8
  %26 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26)
  %27 = icmp ult i32 %23, %22
  br i1 %27, label %29, label %28

28:                                               ; preds = %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* null, i8** %25, align 8
  br label %38

29:                                               ; preds = %20
  %30 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #5
  %31 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %22) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i8* %30, i8* %31) #5
  %32 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* %33, i8** %25, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %29
  %36 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.10, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #5
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #5
  br label %38

38:                                               ; preds = %28, %29, %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #5
  %39 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #5
  %40 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %40, align 8
  %41 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41)
  %42 = icmp ult i32 %23, %21
  br i1 %42, label %44, label %43

43:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  store i8* null, i8** %40, align 8
  br label %53

44:                                               ; preds = %38
  %45 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #5
  %46 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %21) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.11, i64 0, i64 0), i8* %45, i8* %46) #5
  %47 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %48 = load i8*, i8** %47, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  store i8* %48, i8** %40, align 8
  %49 = icmp eq i8* %48, null
  br i1 %49, label %53, label %50

50:                                               ; preds = %44
  %51 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %51) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.10, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #5
  %52 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %51) #5
  br label %53

53:                                               ; preds = %43, %44, %50
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #5
  ret i32 %23
}

declare i8* @_ZN7logging15CheckOpValueStrEj(i32) local_unnamed_addr #1

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #1

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPh(%"class.WTF::StringTypeAdapter.34"*, i8*) local_unnamed_addr #1

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPh(%"class.WTF::StringTypeAdapter.36"*, i8*) local_unnamed_addr #1

declare void @_ZNK3WTF17StringTypeAdapterIPKcE7WriteToEPDs(%"class.WTF::StringTypeAdapter.34"*, i16*) local_unnamed_addr #1

declare void @_ZNK3WTF17StringTypeAdapterINS_10StringViewEE7WriteToEPDs(%"class.WTF::StringTypeAdapter.36"*, i16*) local_unnamed_addr #1

declare %"class.WTF::StringImpl"* @_ZN3WTF10StringImpl6CreateEPKhj(i8*, i32) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden i32 @_ZNK3WTF12StringAppendINS_6StringEPKcE6lengthEv(%"class.WTF::StringAppend.32"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.logging::CheckOpResult", align 8
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.WTF::StringTypeAdapter.34", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = alloca %"class.logging::CheckOpResult", align 8
  %8 = alloca %"class.logging::CheckError", align 8
  %9 = getelementptr inbounds %"class.WTF::StringAppend.32", %"class.WTF::StringAppend.32"* %0, i64 0, i32 0, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %11, label %15, label %12

12:                                               ; preds = %1
  %13 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 1
  %14 = load i32, i32* %13, align 4
  br label %15

15:                                               ; preds = %1, %12
  %16 = phi i32 [ %14, %12 ], [ 0, %1 ]
  %17 = bitcast %"class.WTF::StringTypeAdapter.34"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #5
  %18 = getelementptr inbounds %"class.WTF::StringTypeAdapter.34", %"class.WTF::StringTypeAdapter.34"* %4, i64 0, i32 1
  %19 = getelementptr inbounds %"class.WTF::StringAppend.32", %"class.WTF::StringAppend.32"* %0, i64 0, i32 1
  %20 = bitcast %"class.WTF::StringTypeAdapter.34"* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %20, i8 -86, i64 16, i1 false)
  %21 = load i8*, i8** %19, align 8
  call void @_ZN3WTF17StringTypeAdapterIPKcEC1ES2_(%"class.WTF::StringTypeAdapter.34"* nonnull %4, i8* %21) #5
  %22 = load i32, i32* %18, align 8
  %23 = add i32 %22, %16
  %24 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #5
  %25 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %25, align 8
  %26 = bitcast %"class.logging::CheckOpResult"* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26)
  %27 = icmp ult i32 %23, %16
  br i1 %27, label %29, label %28

28:                                               ; preds = %15
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* null, i8** %25, align 8
  br label %38

29:                                               ; preds = %15
  %30 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #5
  %31 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %16) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %2, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i8* %30, i8* %31) #5
  %32 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %2, i64 0, i32 0
  %33 = load i8*, i8** %32, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26)
  store i8* %33, i8** %25, align 8
  %34 = icmp eq i8* %33, null
  br i1 %34, label %38, label %35

35:                                               ; preds = %29
  %36 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.10, i64 0, i64 0), i32 108, %"class.logging::CheckOpResult"* nonnull %5) #5
  %37 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36) #5
  br label %38

38:                                               ; preds = %28, %29, %35
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #5
  %39 = bitcast %"class.logging::CheckOpResult"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #5
  %40 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %7, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %40, align 8
  %41 = load i32, i32* %18, align 8
  %42 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %42)
  %43 = icmp ult i32 %23, %41
  br i1 %43, label %45, label %44

44:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* null, i8** %40, align 8
  br label %54

45:                                               ; preds = %38
  %46 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %23) #5
  %47 = call i8* @_ZN7logging15CheckOpValueStrEj(i32 %41) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.11, i64 0, i64 0), i8* %46, i8* %47) #5
  %48 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %49 = load i8*, i8** %48, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %42)
  store i8* %49, i8** %40, align 8
  %50 = icmp eq i8* %49, null
  br i1 %50, label %54, label %51

51:                                               ; preds = %45
  %52 = bitcast %"class.logging::CheckError"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %52) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %8, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.10, i64 0, i64 0), i32 109, %"class.logging::CheckOpResult"* nonnull %7) #5
  %53 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %8) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %8) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %52) #5
  br label %54

54:                                               ; preds = %44, %45, %51
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #5
  ret i32 %23
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(8) %"class.blink::Member"* @_ZNK3WTF6VectorIN5blink6MemberINS1_35V8UnionDOMPointOrUnrestrictedDoubleEEELj0ENS1_13HeapAllocatorEE2atEj(%"class.WTF::Vector.19"*, i32) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #5
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.WTF::Vector.19", %"class.WTF::Vector.19"* %0, i64 0, i32 0, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i32 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %1) #5
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEj(i32 %9) #5
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.12, i64 0, i64 0), i8* %14, i8* %15) #5
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #5
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.13, i64 0, i64 0), i32 1176, %"class.logging::CheckOpResult"* nonnull %4) #5
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #5
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #5
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #5
  %23 = getelementptr inbounds %"class.WTF::Vector.19", %"class.WTF::Vector.19"* %0, i64 0, i32 0, i32 0, i32 0
  %24 = load %"class.blink::Member"*, %"class.blink::Member"** %23, align 8
  %25 = zext i32 %1 to i64
  %26 = getelementptr inbounds %"class.blink::Member", %"class.blink::Member"* %24, i64 %25
  ret %"class.blink::Member"* %26
}

; Function Attrs: nounwind readnone speculatable
declare <4 x float> @llvm.fabs.v4f32(<4 x float>) #7

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="64" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { cold noreturn nounwind }
attributes #7 = { nounwind readnone speculatable }
attributes #8 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nounwind readnone }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!5 = distinct !{!5, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!6 = !{!7}
!7 = distinct !{!7, !8, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!8 = distinct !{!8, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!9 = !{!10}
!10 = distinct !{!10, !11, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!11 = distinct !{!11, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!12 = !{!13}
!13 = distinct !{!13, !14, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!14 = distinct !{!14, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!15 = !{!"branch_weights", i32 4000000, i32 4001}
!16 = !{!17}
!17 = distinct !{!17, !18, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!18 = distinct !{!18, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!19 = !{!20}
!20 = distinct !{!20, !21, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!21 = distinct !{!21, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_: argument 0"}
!24 = distinct !{!24, !"_ZN3WTFplIPKcNS_6StringES2_EENS_12StringAppendINS4_IT_T0_EET1_EERKS7_S8_"}
!25 = !{!"branch_weights", i32 4001, i32 4000000}
