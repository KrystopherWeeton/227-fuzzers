; ModuleID = '../../third_party/libgav1/src/src/post_filter/loop_restoration.cc'
source_filename = "../../third_party/libgav1/src/src/post_filter/loop_restoration.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.libgav1::PostFilter" = type <{ [2 x { i64, i64 }], %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::LoopRestoration"*, %"struct.libgav1::dsp::Dsp"*, i32, i32, i32, i32, i8, [3 x i8], [3 x i8], i8, i32, [4 x i8], i8*, i8*, i8, [8 x [4 x [8 x [2 x i8]]]], [3 x i8], [3 x %struct.anon], %"class.libgav1::Array2D.23"*, %"class.libgav1::Array2D.31"*, %"class.libgav1::LoopRestorationInfo"*, [2 x i8*], %"class.libgav1::YuvBuffer"*, %"class.libgav1::BlockParametersHolder"*, %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"*, [3 x i8*], [3 x i8*], [3 x i8*], [3 x i8*], %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"*, i8, [7 x i8], %"class.libgav1::ThreadPool"*, i32, [9248 x i16], [4 x i8] }>
%"struct.libgav1::ObuFrameHeader" = type { i16, i16, i64, [7 x i16], i32, i32, i32, i32, i32, i32, i32, %"struct.libgav1::LoopRestoration", [32 x i32], i32, %"struct.std::__1::array", %"struct.libgav1::TileInfo", %"struct.libgav1::QuantizerParameters", %"struct.libgav1::Segmentation", i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], i8, i8, i8, %"struct.libgav1::Delta", %"struct.libgav1::Delta", [7 x i8], [8 x i8], %"struct.libgav1::LoopFilter", %"struct.libgav1::Cdef", %"struct.libgav1::FilmGrainParams" }
%"struct.libgav1::LoopRestoration" = type { [3 x i8], [3 x i32] }
%"struct.std::__1::array" = type { [8 x %"struct.libgav1::GlobalMotion"] }
%"struct.libgav1::GlobalMotion" = type { i8, [6 x i32], i16, i16, i16, i16 }
%"struct.libgav1::TileInfo" = type { i8, i32, i32, i32, i32, i32, [65 x i32], [65 x i32], i32, i32, [65 x i32], [65 x i32], i16, i8 }
%"struct.libgav1::QuantizerParameters" = type { i8, [3 x i8], [3 x i8], i8, [3 x i8] }
%"struct.libgav1::Segmentation" = type { i8, i8, i8, i8, i8, i8, [8 x [8 x i8]], [8 x [8 x i16]], [8 x i8], [8 x i8] }
%"struct.libgav1::Delta" = type { i8, i8, i8 }
%"struct.libgav1::LoopFilter" = type { %"struct.std::__1::array.0", i8, i8, i8, %"struct.std::__1::array.1", %"struct.std::__1::array.2" }
%"struct.std::__1::array.0" = type { [4 x i8] }
%"struct.std::__1::array.1" = type { [8 x i8] }
%"struct.std::__1::array.2" = type { [2 x i8] }
%"struct.libgav1::Cdef" = type { i8, i8, [8 x i8], [8 x i8], [8 x i8], [8 x i8] }
%"struct.libgav1::FilmGrainParams" = type { i8, i8, i8, i8, i8, i8, i8, i8, [14 x i8], [14 x i8], [10 x i8], [10 x i8], [10 x i8], [10 x i8], i8, i8, [24 x i8], [25 x i8], [25 x i8], i8, i16, i32, i32, i8, i8, i16, i8, i8, i16 }
%"struct.libgav1::dsp::Dsp" = type { void (i8*, i8*, i32, i32, i8*, i64)*, void (i8*, i64, i8*, i32*)*, [2 x [3 x void (i16*, i64, i32, i32, i32, i32, i32, i8*, i64)*]], [19 x void (i8*, i64, [32 x i16]*, i32)*], [19 x [3 x void ([32 x i16]*, i32, i32, i8*, i64)*]], [2 x [2 x [2 x [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i8*, i64)*]]]], [2 x void (i8*, i64, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i64)*], void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i64, i8*, i8*, i32, i32, i32, i32, i1, i1)*, void (i8*, i64, i8*, i32, i32, i32, i1)*, void (i8*, i8*, i8, i8, i32, i32, i8*, i64)*, %"struct.libgav1::dsp::FilmGrainFuncs", void (i8*, i64, i8*, i8*, i8, i32, i32)*, [3 x void (i8*, i8*, i64, i8*, i64, i32, i32)*], void (i8*, i32, i32)*, void (i8*, i32)*, [19 x [10 x void (i8*, i64, i8*, i8*)*]], [4 x [5 x [2 x void (i8, i8, i32, i8*, i32, i32, i8*)*]]], [4 x [2 x void (i8*, i64, i32, i32, i32)*]], [2 x void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*], [3 x [2 x void (i8*, i8*, i64, i8*, i64, i32, i32, i8*, i64)*]], void (%"struct.libgav1::ReferenceInfo"*, i32, i32, i32, i32, i32, i32, %"struct.libgav1::TemporalMotionField"*)*, [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32*, i32, %"union.libgav1::CompoundMotionVector"*)*], [3 x void (%"struct.libgav1::MotionVector"*, i8*, i32, i32, %"struct.libgav1::MotionVector"*)*], [2 x void (i8*, i64, i32, i32, i8*, i64)*], void (i32, i32, i32, i8*)*, void (i8*, i8*, i64, i32, i32, i32, i32, i32, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, void (i8*, i64, i32, i32, i32*, i32, i32, i32, i32, i32, i32, i16, i16, i16, i16, i8*, i64)*, [6 x [6 x [2 x void (i8*, i8*, i8*, i64)*]]] }
%"struct.libgav1::dsp::FilmGrainFuncs" = type { [3 x void (%"struct.libgav1::FilmGrainParams"*, i8*)*], [2 x [4 x void (%"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i8*, i8*)*]], [2 x void (i8*, i32, i32, i32, i32, i32, i8*)*], void (i8*, i32, i32, i32, i32, i8*)*, void (i32, i8*, i8*, i8*)*, void (i8*, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64)*, [2 x void (i8, %"struct.libgav1::FilmGrainParams"*, i8*, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i8*, i64, i8*, i64)*] }
%"struct.libgav1::RestorationUnitInfo" = type { i8, %"struct.libgav1::SgrProjInfo", [16 x i8], %"struct.libgav1::WienerInfo" }
%"struct.libgav1::SgrProjInfo" = type { i32, [2 x i32] }
%"struct.libgav1::WienerInfo" = type { [2 x i16], [28 x i8], [2 x [4 x i16]], [16 x i8] }
%"union.libgav1::RestorationBuffer" = type { %"struct.libgav1::SgrBuffer", [5024 x i8] }
%"struct.libgav1::SgrBuffer" = type { [1152 x i16], [1440 x i16], [1152 x i32], [1440 x i32], [1024 x i16], [768 x i16], [512 x i16], [1024 x i32], [768 x i32], [512 x i32], [288 x i8], [288 x i32] }
%"struct.libgav1::ReferenceInfo" = type { %"struct.std::__1::array.3", %"struct.std::__1::array.1", %"struct.std::__1::array.1", %"struct.std::__1::array.4", %"struct.std::__1::array.5", %"class.libgav1::Array2D", %"class.libgav1::Array2D.7" }
%"struct.std::__1::array.3" = type { [8 x i8] }
%"struct.std::__1::array.4" = type { [8 x i8] }
%"struct.std::__1::array.5" = type { [8 x i16] }
%"class.libgav1::Array2D" = type { %"class.std::__1::unique_ptr", i64, i64, %"class.libgav1::Array2DView" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { i8* }
%"class.libgav1::Array2DView" = type { i32, i32, i8* }
%"class.libgav1::Array2D.7" = type { %"class.std::__1::unique_ptr.8", i64, i64, %"class.libgav1::Array2DView.14" }
%"class.std::__1::unique_ptr.8" = type { %"class.std::__1::__compressed_pair.9" }
%"class.std::__1::__compressed_pair.9" = type { %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"struct.libgav1::MotionVector"* }
%"struct.libgav1::MotionVector" = type { %union.anon }
%union.anon = type { i32 }
%"class.libgav1::Array2DView.14" = type { i32, i32, %"struct.libgav1::MotionVector"* }
%"struct.libgav1::TemporalMotionField" = type { %"class.libgav1::Array2D.7", %"class.libgav1::Array2D.15" }
%"class.libgav1::Array2D.15" = type { %"class.std::__1::unique_ptr.16", i64, i64, %"class.libgav1::Array2DView.22" }
%"class.std::__1::unique_ptr.16" = type { %"class.std::__1::__compressed_pair.17" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.18" = type { i8* }
%"class.libgav1::Array2DView.22" = type { i32, i32, i8* }
%"union.libgav1::CompoundMotionVector" = type { i64 }
%struct.anon = type { i32, i32, i32 }
%"class.libgav1::Array2D.23" = type { %"class.std::__1::unique_ptr.24", i64, i64, %"class.libgav1::Array2DView.30" }
%"class.std::__1::unique_ptr.24" = type { %"class.std::__1::__compressed_pair.25" }
%"class.std::__1::__compressed_pair.25" = type { %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.26" = type { i16* }
%"class.libgav1::Array2DView.30" = type { i32, i32, i16* }
%"class.libgav1::Array2D.31" = type { %"class.std::__1::unique_ptr.32", i64, i64, %"class.libgav1::Array2DView.38" }
%"class.std::__1::unique_ptr.32" = type { %"class.std::__1::__compressed_pair.33" }
%"class.std::__1::__compressed_pair.33" = type { %"struct.std::__1::__compressed_pair_elem.34" }
%"struct.std::__1::__compressed_pair_elem.34" = type { i8* }
%"class.libgav1::Array2DView.38" = type { i32, i32, i8* }
%"class.libgav1::LoopRestorationInfo" = type { [3 x %"struct.libgav1::RestorationUnitInfo"*], %"class.libgav1::DynamicBuffer", [3 x i8], %"struct.libgav1::LoopRestoration"*, i8, i8, [3 x i32], [3 x i32], [3 x i32] }
%"class.libgav1::DynamicBuffer" = type { %"class.std::__1::unique_ptr.39", i64 }
%"class.std::__1::unique_ptr.39" = type { %"class.std::__1::__compressed_pair.40" }
%"class.std::__1::__compressed_pair.40" = type { %"struct.std::__1::__compressed_pair_elem.41" }
%"struct.std::__1::__compressed_pair_elem.41" = type { %"struct.libgav1::RestorationUnitInfo"* }
%"class.libgav1::BlockParametersHolder" = type { i32, i32, %"class.libgav1::DynamicBuffer.51", %"struct.std::__1::atomic", %"class.libgav1::Array2D.60" }
%"class.libgav1::DynamicBuffer.51" = type { %"class.std::__1::unique_ptr.52", i64 }
%"class.std::__1::unique_ptr.52" = type { %"class.std::__1::__compressed_pair.53" }
%"class.std::__1::__compressed_pair.53" = type { %"struct.std::__1::__compressed_pair_elem.54" }
%"struct.std::__1::__compressed_pair_elem.54" = type { %"class.std::__1::unique_ptr.55"* }
%"class.std::__1::unique_ptr.55" = type { %"class.std::__1::__compressed_pair.87" }
%"class.std::__1::__compressed_pair.87" = type { %"struct.std::__1::__compressed_pair_elem.88" }
%"struct.std::__1::__compressed_pair_elem.88" = type { %"struct.libgav1::BlockParameters"* }
%"struct.libgav1::BlockParameters" = type { i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x i8], [4 x i8], %"union.libgav1::CompoundMotionVector", %"struct.libgav1::PaletteModeInfo", %"class.std::__1::unique_ptr.64" }
%"struct.libgav1::PaletteModeInfo" = type { [2 x i8], [3 x [8 x i16]] }
%"class.std::__1::unique_ptr.64" = type { %"class.std::__1::__compressed_pair.65" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.66" }
%"struct.std::__1::__compressed_pair_elem.66" = type { %"struct.libgav1::PredictionParameters"* }
%"struct.libgav1::PredictionParameters" = type { i8, i8, [2 x i32], i8, i8, i32, i32, [2 x %"class.libgav1::Array2D.67"], i8, i8, i8, i32, i32, i8, i8, i8, %union.anon.69, [8 x i16], i32, i32, i32, [2 x %"struct.libgav1::MotionVector"], i32, [8 x [4 x i32]] }
%"class.libgav1::Array2D.67" = type { %"class.std::__1::unique_ptr.45", i64, i64, %"class.libgav1::Array2DView.68" }
%"class.std::__1::unique_ptr.45" = type { %"class.std::__1::__compressed_pair.46" }
%"class.std::__1::__compressed_pair.46" = type { %"struct.std::__1::__compressed_pair_elem.47" }
%"struct.std::__1::__compressed_pair_elem.47" = type { i8* }
%"class.libgav1::Array2DView.68" = type { i32, i32, i8* }
%union.anon.69 = type { [8 x %"union.libgav1::CompoundMotionVector"] }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.59" }
%"struct.std::__1::__atomic_base.59" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.libgav1::Array2D.60" = type { %"class.std::__1::unique_ptr.61", i64, i64, %"class.libgav1::Array2DView.76" }
%"class.std::__1::unique_ptr.61" = type { %"class.std::__1::__compressed_pair.62" }
%"class.std::__1::__compressed_pair.62" = type { %"struct.std::__1::__compressed_pair_elem.63" }
%"struct.std::__1::__compressed_pair_elem.63" = type { %"struct.libgav1::BlockParameters"** }
%"class.libgav1::Array2DView.76" = type { i32, i32, %"struct.libgav1::BlockParameters"** }
%"class.libgav1::YuvBuffer" = type <{ i32, i8, [3 x i8], i32, i32, i32, i32, [3 x i32], [3 x i32], [3 x i32], [3 x i32], [3 x i32], [4 x i8], [3 x i8*], %"class.std::__1::unique_ptr.45", i64, i8, i8, [6 x i8] }>
%"class.libgav1::ThreadPool" = type { %"class.libgav1::Executor", %"class.std::__1::condition_variable", %"class.std::__1::mutex", %"class.libgav1::UnboundedQueue", %"class.std::__1::unique_ptr.81", i8, i32, [16 x i8] }
%"class.libgav1::Executor" = type { i32 (...)** }
%"class.std::__1::condition_variable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.77, %union.anon.79, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.77 = type { i64 }
%union.anon.79 = type { i64 }
%"class.std::__1::mutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.libgav1::UnboundedQueue" = type { %"struct.libgav1::UnboundedQueue<std::__1::function<void ()> >::Block"*, i64, %"struct.libgav1::UnboundedQueue<std::__1::function<void ()> >::Block"*, i64 }
%"struct.libgav1::UnboundedQueue<std::__1::function<void ()> >::Block" = type opaque
%"class.std::__1::unique_ptr.81" = type { %"class.std::__1::__compressed_pair.82" }
%"class.std::__1::__compressed_pair.82" = type { %"struct.std::__1::__compressed_pair_elem.83" }
%"struct.std::__1::__compressed_pair_elem.83" = type { %"class.libgav1::ThreadPool::WorkerThread"** }
%"class.libgav1::ThreadPool::WorkerThread" = type opaque

$_ZN7libgav110PostFilter39ApplyLoopRestorationForOneSuperBlockRowItEEvii = comdat any

$_ZN7libgav110PostFilter39ApplyLoopRestorationForOneSuperBlockRowIhEEvii = comdat any

$_ZN7libgav110PostFilter29ApplyLoopRestorationForOneRowItEEvPKT_lNS_5PlaneEiiiiiiPS2_ = comdat any

$_ZN7libgav110PostFilter29ApplyLoopRestorationForOneRowIhEEvPKT_lNS_5PlaneEiiiiiiPS2_ = comdat any

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav110PostFilter20ApplyLoopRestorationEii(%"class.libgav1::PostFilter"*, i32, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 8
  %5 = load i8, i8* %4, align 8
  %6 = icmp sgt i8 %5, 9
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  tail call void @_ZN7libgav110PostFilter39ApplyLoopRestorationForOneSuperBlockRowItEEvii(%"class.libgav1::PostFilter"* %0, i32 %1, i32 %2)
  br label %9

8:                                                ; preds = %3
  tail call void @_ZN7libgav110PostFilter39ApplyLoopRestorationForOneSuperBlockRowIhEEvii(%"class.libgav1::PostFilter"* %0, i32 %1, i32 %2)
  br label %9

9:                                                ; preds = %8, %7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7libgav110PostFilter39ApplyLoopRestorationForOneSuperBlockRowItEEvii(%"class.libgav1::PostFilter"*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 2
  %5 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 27
  %6 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 7
  %7 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 5
  %8 = icmp eq i32 %1, 0
  %9 = shl i32 %1, 2
  %10 = icmp sgt i32 %2, 0
  %11 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 22
  %12 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 11
  br label %13

13:                                               ; preds = %86, %3
  %14 = phi i64 [ %87, %86 ], [ 0, %3 ]
  %15 = phi i32 [ %88, %86 ], [ 0, %3 ]
  %16 = load %"struct.libgav1::LoopRestoration"*, %"struct.libgav1::LoopRestoration"** %4, align 8
  %17 = getelementptr inbounds %"struct.libgav1::LoopRestoration", %"struct.libgav1::LoopRestoration"* %16, i64 0, i32 0, i64 %14
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %86, label %20

20:                                               ; preds = %13
  %21 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %5, align 8
  %22 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %21, i64 0, i32 11, i64 %14
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  %25 = lshr i64 %24, 1
  %26 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 %14
  %27 = load i8, i8* %26, align 1
  %28 = sext i8 %27 to i32
  %29 = lshr i32 8, %28
  %30 = load i32, i32* %6, align 4
  %31 = add nsw i32 %30, %28
  %32 = ashr i32 %31, %28
  %33 = load i32, i32* %7, align 4
  %34 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 9, i64 %14
  %35 = load i8, i8* %34, align 1
  %36 = sext i8 %35 to i32
  %37 = add nsw i32 %33, %36
  %38 = ashr i32 %37, %36
  %39 = getelementptr inbounds %"struct.libgav1::LoopRestoration", %"struct.libgav1::LoopRestoration"* %16, i64 0, i32 1, i64 %14
  %40 = load i32, i32* %39, align 4
  %41 = shl i32 1, %40
  %42 = lshr i32 64, %28
  %43 = ashr i32 %9, %28
  %44 = sub nsw i32 %43, %29
  %45 = select i1 %8, i32 0, i32 %44
  %46 = icmp sgt i32 %32, %45
  %47 = and i1 %46, %10
  br i1 %47, label %48, label %86

48:                                               ; preds = %20
  %49 = select i1 %8, i32 %29, i32 0
  %50 = sub nsw i32 %42, %49
  %51 = trunc i32 %15 to i8
  %52 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 30, i64 %14
  %53 = bitcast i8** %52 to i16**
  %54 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 31, i64 %14
  %55 = bitcast i8** %54 to i16**
  br label %56

56:                                               ; preds = %82, %48
  %57 = phi i32 [ %40, %48 ], [ %85, %82 ]
  %58 = phi i32 [ 0, %48 ], [ %77, %82 ]
  %59 = phi i32 [ %45, %48 ], [ %78, %82 ]
  %60 = phi i32 [ %50, %48 ], [ %42, %82 ]
  %61 = add nsw i32 %59, %29
  %62 = ashr i32 %61, %57
  %63 = load %"class.libgav1::LoopRestorationInfo"*, %"class.libgav1::LoopRestorationInfo"** %11, align 8
  %64 = getelementptr inbounds %"class.libgav1::LoopRestorationInfo", %"class.libgav1::LoopRestorationInfo"* %63, i64 0, i32 7, i64 %14
  %65 = load i32, i32* %64, align 4
  %66 = add nsw i32 %65, -1
  %67 = icmp slt i32 %66, %62
  %68 = select i1 %67, i32 %66, i32 %62
  %69 = sub nsw i32 %32, %59
  %70 = icmp slt i32 %69, %60
  %71 = select i1 %70, i32 %69, i32 %60
  %72 = load i16*, i16** %53, align 8
  %73 = load i16*, i16** %55, align 8
  %74 = sext i32 %59 to i64
  %75 = mul nsw i64 %25, %74
  %76 = getelementptr inbounds i16, i16* %73, i64 %75
  tail call void @_ZN7libgav110PostFilter29ApplyLoopRestorationForOneRowItEEvPKT_lNS_5PlaneEiiiiiiPS2_(%"class.libgav1::PostFilter"* %0, i16* %72, i64 %25, i8 zeroext %51, i32 %32, i32 %38, i32 %59, i32 %68, i32 %71, i32 %41, i16* %76)
  %77 = add nuw nsw i32 %58, 16
  %78 = add nsw i32 %71, %59
  %79 = icmp slt i32 %77, %2
  %80 = icmp sgt i32 %32, %78
  %81 = and i1 %80, %79
  br i1 %81, label %82, label %86

82:                                               ; preds = %56
  %83 = load %"struct.libgav1::LoopRestoration"*, %"struct.libgav1::LoopRestoration"** %4, align 8
  %84 = getelementptr inbounds %"struct.libgav1::LoopRestoration", %"struct.libgav1::LoopRestoration"* %83, i64 0, i32 1, i64 %14
  %85 = load i32, i32* %84, align 4
  br label %56

86:                                               ; preds = %56, %20, %13
  %87 = add nuw nsw i64 %14, 1
  %88 = add nuw nsw i32 %15, 1
  %89 = load i8, i8* %12, align 1
  %90 = sext i8 %89 to i64
  %91 = icmp slt i64 %87, %90
  br i1 %91, label %13, label %92

92:                                               ; preds = %86
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7libgav110PostFilter39ApplyLoopRestorationForOneSuperBlockRowIhEEvii(%"class.libgav1::PostFilter"*, i32, i32) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 2
  %5 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 27
  %6 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 7
  %7 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 5
  %8 = icmp eq i32 %1, 0
  %9 = shl i32 %1, 2
  %10 = icmp sgt i32 %2, 0
  %11 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 22
  %12 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 11
  br label %13

13:                                               ; preds = %83, %3
  %14 = phi i64 [ %84, %83 ], [ 0, %3 ]
  %15 = phi i32 [ %85, %83 ], [ 0, %3 ]
  %16 = load %"struct.libgav1::LoopRestoration"*, %"struct.libgav1::LoopRestoration"** %4, align 8
  %17 = getelementptr inbounds %"struct.libgav1::LoopRestoration", %"struct.libgav1::LoopRestoration"* %16, i64 0, i32 0, i64 %14
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, 0
  br i1 %19, label %83, label %20

20:                                               ; preds = %13
  %21 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %5, align 8
  %22 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %21, i64 0, i32 11, i64 %14
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 %14
  %26 = load i8, i8* %25, align 1
  %27 = sext i8 %26 to i32
  %28 = lshr i32 8, %27
  %29 = load i32, i32* %6, align 4
  %30 = add nsw i32 %29, %27
  %31 = ashr i32 %30, %27
  %32 = load i32, i32* %7, align 4
  %33 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 9, i64 %14
  %34 = load i8, i8* %33, align 1
  %35 = sext i8 %34 to i32
  %36 = add nsw i32 %32, %35
  %37 = ashr i32 %36, %35
  %38 = getelementptr inbounds %"struct.libgav1::LoopRestoration", %"struct.libgav1::LoopRestoration"* %16, i64 0, i32 1, i64 %14
  %39 = load i32, i32* %38, align 4
  %40 = shl i32 1, %39
  %41 = lshr i32 64, %27
  %42 = ashr i32 %9, %27
  %43 = sub nsw i32 %42, %28
  %44 = select i1 %8, i32 0, i32 %43
  %45 = icmp sgt i32 %31, %44
  %46 = and i1 %45, %10
  br i1 %46, label %47, label %83

47:                                               ; preds = %20
  %48 = select i1 %8, i32 %28, i32 0
  %49 = sub nsw i32 %41, %48
  %50 = trunc i32 %15 to i8
  %51 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 30, i64 %14
  %52 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 31, i64 %14
  br label %53

53:                                               ; preds = %79, %47
  %54 = phi i32 [ %39, %47 ], [ %82, %79 ]
  %55 = phi i32 [ 0, %47 ], [ %74, %79 ]
  %56 = phi i32 [ %44, %47 ], [ %75, %79 ]
  %57 = phi i32 [ %49, %47 ], [ %41, %79 ]
  %58 = add nsw i32 %56, %28
  %59 = ashr i32 %58, %54
  %60 = load %"class.libgav1::LoopRestorationInfo"*, %"class.libgav1::LoopRestorationInfo"** %11, align 8
  %61 = getelementptr inbounds %"class.libgav1::LoopRestorationInfo", %"class.libgav1::LoopRestorationInfo"* %60, i64 0, i32 7, i64 %14
  %62 = load i32, i32* %61, align 4
  %63 = add nsw i32 %62, -1
  %64 = icmp slt i32 %63, %59
  %65 = select i1 %64, i32 %63, i32 %59
  %66 = sub nsw i32 %31, %56
  %67 = icmp slt i32 %66, %57
  %68 = select i1 %67, i32 %66, i32 %57
  %69 = load i8*, i8** %51, align 8
  %70 = load i8*, i8** %52, align 8
  %71 = sext i32 %56 to i64
  %72 = mul nsw i64 %71, %24
  %73 = getelementptr inbounds i8, i8* %70, i64 %72
  tail call void @_ZN7libgav110PostFilter29ApplyLoopRestorationForOneRowIhEEvPKT_lNS_5PlaneEiiiiiiPS2_(%"class.libgav1::PostFilter"* %0, i8* %69, i64 %24, i8 zeroext %50, i32 %31, i32 %37, i32 %56, i32 %65, i32 %68, i32 %40, i8* %73)
  %74 = add nuw nsw i32 %55, 16
  %75 = add nsw i32 %68, %56
  %76 = icmp slt i32 %74, %2
  %77 = icmp sgt i32 %31, %75
  %78 = and i1 %77, %76
  br i1 %78, label %79, label %83

79:                                               ; preds = %53
  %80 = load %"struct.libgav1::LoopRestoration"*, %"struct.libgav1::LoopRestoration"** %4, align 8
  %81 = getelementptr inbounds %"struct.libgav1::LoopRestoration", %"struct.libgav1::LoopRestoration"* %80, i64 0, i32 1, i64 %14
  %82 = load i32, i32* %81, align 4
  br label %53

83:                                               ; preds = %53, %20, %13
  %84 = add nuw nsw i64 %14, 1
  %85 = add nuw nsw i32 %15, 1
  %86 = load i8, i8* %12, align 1
  %87 = sext i8 %86 to i64
  %88 = icmp slt i64 %84, %87
  br i1 %88, label %13, label %89

89:                                               ; preds = %83
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7libgav110PostFilter26ApplyLoopRestorationWorkerEPNSt3__16atomicIiEE(%"class.libgav1::PostFilter"*, %"struct.std::__1::atomic"* nocapture) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 1
  %4 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %3, align 8
  %5 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %4, i64 0, i32 7
  %6 = load i32, i32* %5, align 4
  %7 = add nsw i32 %6, 16
  %8 = getelementptr inbounds %"struct.std::__1::atomic", %"struct.std::__1::atomic"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = atomicrmw add i32* %8, i32 16 monotonic
  %10 = icmp slt i32 %9, %7
  br i1 %10, label %11, label %22

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 8
  br label %13

13:                                               ; preds = %11, %18
  %14 = phi i32 [ %9, %11 ], [ %19, %18 ]
  tail call void @_ZN7libgav110PostFilter30CopyBordersForOneSuperBlockRowEiib(%"class.libgav1::PostFilter"* %0, i32 %14, i32 16, i1 zeroext true) #3
  %15 = load i8, i8* %12, align 8
  %16 = icmp sgt i8 %15, 9
  br i1 %16, label %17, label %21

17:                                               ; preds = %13
  tail call void @_ZN7libgav110PostFilter39ApplyLoopRestorationForOneSuperBlockRowItEEvii(%"class.libgav1::PostFilter"* %0, i32 %14, i32 16)
  br label %18

18:                                               ; preds = %17, %21
  %19 = atomicrmw add i32* %8, i32 16 monotonic
  %20 = icmp slt i32 %19, %7
  br i1 %20, label %13, label %22

21:                                               ; preds = %13
  tail call void @_ZN7libgav110PostFilter39ApplyLoopRestorationForOneSuperBlockRowIhEEvii(%"class.libgav1::PostFilter"* %0, i32 %14, i32 16)
  br label %18

22:                                               ; preds = %18, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN7libgav110PostFilter30CopyBordersForOneSuperBlockRowEiib(%"class.libgav1::PostFilter"*, i32, i32, i1 zeroext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7libgav110PostFilter29ApplyLoopRestorationForOneRowItEEvPKT_lNS_5PlaneEiiiiiiPS2_(%"class.libgav1::PostFilter"*, i16*, i64, i8 zeroext, i32, i32, i32, i32, i32, i32, i16*) local_unnamed_addr #0 comdat align 2 {
  %12 = alloca %"union.libgav1::RestorationBuffer", align 32
  %13 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 22
  %14 = load %"class.libgav1::LoopRestorationInfo"*, %"class.libgav1::LoopRestorationInfo"** %13, align 8
  %15 = zext i8 %3 to i64
  %16 = getelementptr inbounds %"class.libgav1::LoopRestorationInfo", %"class.libgav1::LoopRestorationInfo"* %14, i64 0, i32 6, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = mul nsw i32 %17, %7
  %19 = getelementptr inbounds %"class.libgav1::LoopRestorationInfo", %"class.libgav1::LoopRestorationInfo"* %14, i64 0, i32 0, i64 %15
  %20 = load %"struct.libgav1::RestorationUnitInfo"*, %"struct.libgav1::RestorationUnitInfo"** %19, align 8
  %21 = sext i32 %18 to i64
  %22 = getelementptr inbounds %"struct.libgav1::RestorationUnitInfo", %"struct.libgav1::RestorationUnitInfo"* %20, i64 %21
  %23 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 1
  %24 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %23, align 8
  %25 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 34
  %26 = load i8, i8* %25, align 8
  %27 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %24, i64 0, i32 55, i32 1
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %30, label %46

30:                                               ; preds = %11
  %31 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %24, i64 0, i32 55, i32 2, i64 0
  %32 = load i8, i8* %31, align 1
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %34, label %46

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %24, i64 0, i32 55, i32 3, i64 0
  %36 = load i8, i8* %35, align 1
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %38, label %46

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %24, i64 0, i32 55, i32 4, i64 0
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %42, label %46

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %24, i64 0, i32 55, i32 5, i64 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %53, label %46

46:                                               ; preds = %11, %30, %34, %38, %42
  %47 = and i8 %26, 2
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %46
  %50 = sext i32 %6 to i64
  %51 = mul nsw i64 %50, %2
  %52 = getelementptr inbounds i16, i16* %1, i64 %51
  br label %60

53:                                               ; preds = %46, %42
  %54 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 36
  %55 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %54, align 8
  %56 = icmp eq %"class.libgav1::ThreadPool"* %55, null
  %57 = sext i32 %6 to i64
  %58 = mul nsw i64 %57, %2
  %59 = getelementptr inbounds i16, i16* %1, i64 %58
  br i1 %56, label %85, label %60

60:                                               ; preds = %53, %49
  %61 = phi i16* [ %52, %49 ], [ %59, %53 ]
  %62 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 %15
  %63 = load i8, i8* %62, align 1
  %64 = sext i8 %63 to i32
  %65 = sub nsw i32 4, %64
  %66 = shl i32 1, %65
  %67 = add i32 %6, -1
  %68 = add i32 %67, %66
  %69 = ashr i32 %68, %65
  %70 = icmp sgt i32 %69, 4
  %71 = select i1 %70, i32 %69, i32 4
  %72 = add nsw i32 %71, -4
  %73 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 33
  %74 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %73, align 8
  %75 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %74, i64 0, i32 11, i64 %15
  %76 = load i32, i32* %75, align 4
  %77 = sext i32 %76 to i64
  %78 = lshr i64 %77, 1
  %79 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %74, i64 0, i32 13, i64 %15
  %80 = bitcast i8** %79 to i16**
  %81 = load i16*, i16** %80, align 8
  %82 = zext i32 %72 to i64
  %83 = mul nsw i64 %78, %82
  %84 = getelementptr inbounds i16, i16* %81, i64 %83
  br label %85

85:                                               ; preds = %53, %60
  %86 = phi i16* [ %61, %60 ], [ %59, %53 ]
  %87 = phi i1 [ true, %60 ], [ false, %53 ]
  %88 = phi i16* [ %84, %60 ], [ null, %53 ]
  %89 = phi i64 [ %78, %60 ], [ 0, %53 ]
  %90 = add nsw i32 %17, -1
  %91 = shl nsw i64 %2, 1
  %92 = sub i64 0, %91
  %93 = sext i32 %8 to i64
  %94 = mul nsw i64 %93, %2
  %95 = add nsw i32 %8, %6
  %96 = icmp sge i32 %95, %4
  %97 = icmp ne i32 %6, 0
  %98 = xor i1 %96, true
  %99 = or i1 %97, %98
  %100 = shl nsw i64 %89, 2
  %101 = select i1 %97, i64 %89, i64 %2
  %102 = shl nuw nsw i64 %89, 1
  %103 = select i1 %96, i64 %2, i64 %89
  %104 = bitcast %"union.libgav1::RestorationBuffer"* %12 to i8*
  %105 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 3
  %106 = sext i32 %9 to i64
  %107 = sext i32 %5 to i64
  %108 = add nsw i32 %8, -1
  %109 = and i32 %8, 3
  %110 = icmp eq i32 %109, 0
  %111 = icmp ult i32 %108, 3
  %112 = and i32 %8, 7
  %113 = icmp eq i32 %112, 0
  %114 = icmp ult i32 %108, 7
  br label %115

115:                                              ; preds = %256, %85
  %116 = phi i64 [ %258, %256 ], [ 0, %85 ]
  %117 = phi i32 [ %257, %256 ], [ 0, %85 ]
  %118 = sub nsw i64 %107, %116
  %119 = icmp slt i64 %118, %106
  %120 = trunc i64 %118 to i32
  %121 = select i1 %119, i32 %120, i32 %9
  %122 = getelementptr inbounds i16, i16* %86, i64 %116
  %123 = icmp slt i32 %90, %117
  %124 = select i1 %123, i32 %90, i32 %117
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds %"struct.libgav1::RestorationUnitInfo", %"struct.libgav1::RestorationUnitInfo"* %22, i64 %125, i32 0
  %127 = load i8, i8* %126, align 32
  %128 = icmp eq i8 %127, 0
  br i1 %128, label %129, label %227

129:                                              ; preds = %115
  %130 = getelementptr inbounds i16, i16* %10, i64 %116
  %131 = sext i32 %121 to i64
  %132 = shl nsw i64 %131, 1
  br i1 %87, label %150, label %133

133:                                              ; preds = %129
  br i1 %110, label %146, label %134

134:                                              ; preds = %133, %134
  %135 = phi i32 [ %143, %134 ], [ %8, %133 ]
  %136 = phi i16* [ %142, %134 ], [ %130, %133 ]
  %137 = phi i16* [ %141, %134 ], [ %122, %133 ]
  %138 = phi i32 [ %144, %134 ], [ %109, %133 ]
  %139 = bitcast i16* %136 to i8*
  %140 = bitcast i16* %137 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %139, i8* align 2 %140, i64 %132, i1 false) #3
  %141 = getelementptr inbounds i16, i16* %137, i64 %2
  %142 = getelementptr inbounds i16, i16* %136, i64 %2
  %143 = add nsw i32 %135, -1
  %144 = add i32 %138, -1
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %146, label %134, !llvm.loop !2

146:                                              ; preds = %134, %133
  %147 = phi i32 [ %8, %133 ], [ %143, %134 ]
  %148 = phi i16* [ %130, %133 ], [ %142, %134 ]
  %149 = phi i16* [ %122, %133 ], [ %141, %134 ]
  br i1 %111, label %256, label %205

150:                                              ; preds = %129
  br i1 %113, label %163, label %151

151:                                              ; preds = %150, %151
  %152 = phi i16* [ %158, %151 ], [ %122, %150 ]
  %153 = phi i16* [ %159, %151 ], [ %130, %150 ]
  %154 = phi i32 [ %160, %151 ], [ %8, %150 ]
  %155 = phi i32 [ %161, %151 ], [ %112, %150 ]
  %156 = bitcast i16* %153 to i8*
  %157 = bitcast i16* %152 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %156, i8* align 2 %157, i64 %132, i1 false)
  %158 = getelementptr inbounds i16, i16* %152, i64 %2
  %159 = getelementptr inbounds i16, i16* %153, i64 %2
  %160 = add nsw i32 %154, -1
  %161 = add i32 %155, -1
  %162 = icmp eq i32 %161, 0
  br i1 %162, label %163, label %151, !llvm.loop !4

163:                                              ; preds = %151, %150
  %164 = phi i16* [ %122, %150 ], [ %158, %151 ]
  %165 = phi i16* [ %130, %150 ], [ %159, %151 ]
  %166 = phi i32 [ %8, %150 ], [ %160, %151 ]
  br i1 %114, label %256, label %167

167:                                              ; preds = %163, %167
  %168 = phi i16* [ %201, %167 ], [ %164, %163 ]
  %169 = phi i16* [ %202, %167 ], [ %165, %163 ]
  %170 = phi i32 [ %203, %167 ], [ %166, %163 ]
  %171 = bitcast i16* %169 to i8*
  %172 = bitcast i16* %168 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %171, i8* align 2 %172, i64 %132, i1 false)
  %173 = getelementptr inbounds i16, i16* %168, i64 %2
  %174 = getelementptr inbounds i16, i16* %169, i64 %2
  %175 = bitcast i16* %174 to i8*
  %176 = bitcast i16* %173 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %175, i8* align 2 %176, i64 %132, i1 false)
  %177 = getelementptr inbounds i16, i16* %173, i64 %2
  %178 = getelementptr inbounds i16, i16* %174, i64 %2
  %179 = bitcast i16* %178 to i8*
  %180 = bitcast i16* %177 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %179, i8* align 2 %180, i64 %132, i1 false)
  %181 = getelementptr inbounds i16, i16* %177, i64 %2
  %182 = getelementptr inbounds i16, i16* %178, i64 %2
  %183 = bitcast i16* %182 to i8*
  %184 = bitcast i16* %181 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %183, i8* align 2 %184, i64 %132, i1 false)
  %185 = getelementptr inbounds i16, i16* %181, i64 %2
  %186 = getelementptr inbounds i16, i16* %182, i64 %2
  %187 = bitcast i16* %186 to i8*
  %188 = bitcast i16* %185 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %187, i8* align 2 %188, i64 %132, i1 false)
  %189 = getelementptr inbounds i16, i16* %185, i64 %2
  %190 = getelementptr inbounds i16, i16* %186, i64 %2
  %191 = bitcast i16* %190 to i8*
  %192 = bitcast i16* %189 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %191, i8* align 2 %192, i64 %132, i1 false)
  %193 = getelementptr inbounds i16, i16* %189, i64 %2
  %194 = getelementptr inbounds i16, i16* %190, i64 %2
  %195 = bitcast i16* %194 to i8*
  %196 = bitcast i16* %193 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %195, i8* align 2 %196, i64 %132, i1 false)
  %197 = getelementptr inbounds i16, i16* %193, i64 %2
  %198 = getelementptr inbounds i16, i16* %194, i64 %2
  %199 = bitcast i16* %198 to i8*
  %200 = bitcast i16* %197 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 2 %199, i8* align 2 %200, i64 %132, i1 false)
  %201 = getelementptr inbounds i16, i16* %197, i64 %2
  %202 = getelementptr inbounds i16, i16* %198, i64 %2
  %203 = add nsw i32 %170, -8
  %204 = icmp eq i32 %203, 0
  br i1 %204, label %256, label %167

205:                                              ; preds = %146, %205
  %206 = phi i32 [ %225, %205 ], [ %147, %146 ]
  %207 = phi i16* [ %224, %205 ], [ %148, %146 ]
  %208 = phi i16* [ %223, %205 ], [ %149, %146 ]
  %209 = bitcast i16* %207 to i8*
  %210 = bitcast i16* %208 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %209, i8* align 2 %210, i64 %132, i1 false) #3
  %211 = getelementptr inbounds i16, i16* %208, i64 %2
  %212 = getelementptr inbounds i16, i16* %207, i64 %2
  %213 = bitcast i16* %212 to i8*
  %214 = bitcast i16* %211 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %213, i8* align 2 %214, i64 %132, i1 false) #3
  %215 = getelementptr inbounds i16, i16* %211, i64 %2
  %216 = getelementptr inbounds i16, i16* %212, i64 %2
  %217 = bitcast i16* %216 to i8*
  %218 = bitcast i16* %215 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %217, i8* align 2 %218, i64 %132, i1 false) #3
  %219 = getelementptr inbounds i16, i16* %215, i64 %2
  %220 = getelementptr inbounds i16, i16* %216, i64 %2
  %221 = bitcast i16* %220 to i8*
  %222 = bitcast i16* %219 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %221, i8* align 2 %222, i64 %132, i1 false) #3
  %223 = getelementptr inbounds i16, i16* %219, i64 %2
  %224 = getelementptr inbounds i16, i16* %220, i64 %2
  %225 = add nsw i32 %206, -4
  %226 = icmp eq i32 %225, 0
  br i1 %226, label %256, label %205

227:                                              ; preds = %115
  %228 = getelementptr inbounds i16, i16* %122, i64 %92
  %229 = getelementptr inbounds i16, i16* %122, i64 %94
  br i1 %87, label %230, label %238

230:                                              ; preds = %227
  br i1 %99, label %231, label %238

231:                                              ; preds = %230
  %232 = getelementptr inbounds i16, i16* %88, i64 %116
  %233 = getelementptr inbounds i16, i16* %232, i64 %100
  %234 = select i1 %97, i16* %232, i16* %228
  %235 = select i1 %97, i16* %233, i16* %232
  %236 = getelementptr inbounds i16, i16* %235, i64 %102
  %237 = select i1 %96, i16* %229, i16* %236
  br label %238

238:                                              ; preds = %231, %230, %227
  %239 = phi i16* [ %228, %227 ], [ %228, %230 ], [ %234, %231 ]
  %240 = phi i64 [ %2, %227 ], [ %2, %230 ], [ %101, %231 ]
  %241 = phi i16* [ %229, %227 ], [ %229, %230 ], [ %237, %231 ]
  %242 = phi i64 [ %2, %227 ], [ %2, %230 ], [ %103, %231 ]
  call void @llvm.lifetime.start.p0i8(i64 35840, i8* nonnull %104) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %104, i8 -86, i64 35840, i1 false)
  %243 = getelementptr inbounds %"struct.libgav1::RestorationUnitInfo", %"struct.libgav1::RestorationUnitInfo"* %22, i64 %125
  %244 = getelementptr inbounds %"struct.libgav1::RestorationUnitInfo", %"struct.libgav1::RestorationUnitInfo"* %243, i64 0, i32 0
  %245 = load i8, i8* %244, align 32
  %246 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %105, align 8
  %247 = zext i8 %245 to i64
  %248 = add nsw i64 %247, -2
  %249 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %246, i64 0, i32 19, i64 %248
  %250 = load void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*, void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)** %249, align 8
  %251 = bitcast i16* %122 to i8*
  %252 = bitcast i16* %239 to i8*
  %253 = bitcast i16* %241 to i8*
  %254 = getelementptr inbounds i16, i16* %10, i64 %116
  %255 = bitcast i16* %254 to i8*
  call void %250(%"struct.libgav1::RestorationUnitInfo"* dereferenceable(96) %243, i8* %251, i64 %2, i8* %252, i64 %240, i8* %253, i64 %242, i32 %121, i32 %8, %"union.libgav1::RestorationBuffer"* nonnull %12, i8* %255) #3
  call void @llvm.lifetime.end.p0i8(i64 35840, i8* nonnull %104) #3
  br label %256

256:                                              ; preds = %146, %205, %163, %167, %238
  %257 = add nsw i32 %124, 1
  %258 = add i64 %116, %106
  %259 = icmp slt i64 %258, %107
  br i1 %259, label %115, label %260

260:                                              ; preds = %256
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN7libgav110PostFilter29ApplyLoopRestorationForOneRowIhEEvPKT_lNS_5PlaneEiiiiiiPS2_(%"class.libgav1::PostFilter"*, i8*, i64, i8 zeroext, i32, i32, i32, i32, i32, i32, i8*) local_unnamed_addr #0 comdat align 2 {
  %12 = alloca %"union.libgav1::RestorationBuffer", align 32
  %13 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 22
  %14 = load %"class.libgav1::LoopRestorationInfo"*, %"class.libgav1::LoopRestorationInfo"** %13, align 8
  %15 = zext i8 %3 to i64
  %16 = getelementptr inbounds %"class.libgav1::LoopRestorationInfo", %"class.libgav1::LoopRestorationInfo"* %14, i64 0, i32 6, i64 %15
  %17 = load i32, i32* %16, align 4
  %18 = mul nsw i32 %17, %7
  %19 = getelementptr inbounds %"class.libgav1::LoopRestorationInfo", %"class.libgav1::LoopRestorationInfo"* %14, i64 0, i32 0, i64 %15
  %20 = load %"struct.libgav1::RestorationUnitInfo"*, %"struct.libgav1::RestorationUnitInfo"** %19, align 8
  %21 = sext i32 %18 to i64
  %22 = getelementptr inbounds %"struct.libgav1::RestorationUnitInfo", %"struct.libgav1::RestorationUnitInfo"* %20, i64 %21
  %23 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 1
  %24 = load %"struct.libgav1::ObuFrameHeader"*, %"struct.libgav1::ObuFrameHeader"** %23, align 8
  %25 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 34
  %26 = load i8, i8* %25, align 8
  %27 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %24, i64 0, i32 55, i32 1
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, 0
  br i1 %29, label %30, label %46

30:                                               ; preds = %11
  %31 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %24, i64 0, i32 55, i32 2, i64 0
  %32 = load i8, i8* %31, align 1
  %33 = icmp eq i8 %32, 0
  br i1 %33, label %34, label %46

34:                                               ; preds = %30
  %35 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %24, i64 0, i32 55, i32 3, i64 0
  %36 = load i8, i8* %35, align 1
  %37 = icmp eq i8 %36, 0
  br i1 %37, label %38, label %46

38:                                               ; preds = %34
  %39 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %24, i64 0, i32 55, i32 4, i64 0
  %40 = load i8, i8* %39, align 1
  %41 = icmp eq i8 %40, 0
  br i1 %41, label %42, label %46

42:                                               ; preds = %38
  %43 = getelementptr inbounds %"struct.libgav1::ObuFrameHeader", %"struct.libgav1::ObuFrameHeader"* %24, i64 0, i32 55, i32 5, i64 0
  %44 = load i8, i8* %43, align 1
  %45 = icmp eq i8 %44, 0
  br i1 %45, label %53, label %46

46:                                               ; preds = %11, %30, %34, %38, %42
  %47 = and i8 %26, 2
  %48 = icmp eq i8 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %46
  %50 = sext i32 %6 to i64
  %51 = mul nsw i64 %50, %2
  %52 = getelementptr inbounds i8, i8* %1, i64 %51
  br label %60

53:                                               ; preds = %46, %42
  %54 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 36
  %55 = load %"class.libgav1::ThreadPool"*, %"class.libgav1::ThreadPool"** %54, align 8
  %56 = icmp eq %"class.libgav1::ThreadPool"* %55, null
  %57 = sext i32 %6 to i64
  %58 = mul nsw i64 %57, %2
  %59 = getelementptr inbounds i8, i8* %1, i64 %58
  br i1 %56, label %83, label %60

60:                                               ; preds = %53, %49
  %61 = phi i8* [ %52, %49 ], [ %59, %53 ]
  %62 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 10, i64 %15
  %63 = load i8, i8* %62, align 1
  %64 = sext i8 %63 to i32
  %65 = sub nsw i32 4, %64
  %66 = shl i32 1, %65
  %67 = add i32 %6, -1
  %68 = add i32 %67, %66
  %69 = ashr i32 %68, %65
  %70 = icmp sgt i32 %69, 4
  %71 = select i1 %70, i32 %69, i32 4
  %72 = add nsw i32 %71, -4
  %73 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 33
  %74 = load %"class.libgav1::YuvBuffer"*, %"class.libgav1::YuvBuffer"** %73, align 8
  %75 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %74, i64 0, i32 11, i64 %15
  %76 = load i32, i32* %75, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds %"class.libgav1::YuvBuffer", %"class.libgav1::YuvBuffer"* %74, i64 0, i32 13, i64 %15
  %79 = load i8*, i8** %78, align 8
  %80 = zext i32 %72 to i64
  %81 = mul nsw i64 %80, %77
  %82 = getelementptr inbounds i8, i8* %79, i64 %81
  br label %83

83:                                               ; preds = %53, %60
  %84 = phi i8* [ %61, %60 ], [ %59, %53 ]
  %85 = phi i1 [ true, %60 ], [ false, %53 ]
  %86 = phi i8* [ %82, %60 ], [ null, %53 ]
  %87 = phi i64 [ %77, %60 ], [ 0, %53 ]
  %88 = add nsw i32 %17, -1
  %89 = shl nsw i64 %2, 1
  %90 = sub i64 0, %89
  %91 = sext i32 %8 to i64
  %92 = mul nsw i64 %91, %2
  %93 = add nsw i32 %8, %6
  %94 = icmp sge i32 %93, %4
  %95 = icmp ne i32 %6, 0
  %96 = xor i1 %94, true
  %97 = or i1 %95, %96
  %98 = shl nsw i64 %87, 2
  %99 = select i1 %95, i64 %87, i64 %2
  %100 = shl nsw i64 %87, 1
  %101 = select i1 %94, i64 %2, i64 %87
  %102 = bitcast %"union.libgav1::RestorationBuffer"* %12 to i8*
  %103 = getelementptr inbounds %"class.libgav1::PostFilter", %"class.libgav1::PostFilter"* %0, i64 0, i32 3
  %104 = sext i32 %9 to i64
  %105 = sext i32 %5 to i64
  %106 = add nsw i32 %8, -1
  %107 = and i32 %8, 3
  %108 = icmp eq i32 %107, 0
  %109 = icmp ult i32 %106, 3
  %110 = and i32 %8, 7
  %111 = icmp eq i32 %110, 0
  %112 = icmp ult i32 %106, 7
  br label %113

113:                                              ; preds = %221, %83
  %114 = phi i64 [ %223, %221 ], [ 0, %83 ]
  %115 = phi i32 [ %222, %221 ], [ 0, %83 ]
  %116 = sub nsw i64 %105, %114
  %117 = icmp slt i64 %116, %104
  %118 = trunc i64 %116 to i32
  %119 = select i1 %117, i32 %118, i32 %9
  %120 = getelementptr inbounds i8, i8* %84, i64 %114
  %121 = icmp slt i32 %88, %115
  %122 = select i1 %121, i32 %88, i32 %115
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds %"struct.libgav1::RestorationUnitInfo", %"struct.libgav1::RestorationUnitInfo"* %22, i64 %123, i32 0
  %125 = load i8, i8* %124, align 32
  %126 = icmp eq i8 %125, 0
  br i1 %126, label %127, label %196

127:                                              ; preds = %113
  %128 = getelementptr inbounds i8, i8* %10, i64 %114
  %129 = sext i32 %119 to i64
  br i1 %85, label %145, label %130

130:                                              ; preds = %127
  br i1 %108, label %141, label %131

131:                                              ; preds = %130, %131
  %132 = phi i32 [ %138, %131 ], [ %8, %130 ]
  %133 = phi i8* [ %137, %131 ], [ %128, %130 ]
  %134 = phi i8* [ %136, %131 ], [ %120, %130 ]
  %135 = phi i32 [ %139, %131 ], [ %107, %130 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %133, i8* align 1 %134, i64 %129, i1 false) #3
  %136 = getelementptr inbounds i8, i8* %134, i64 %2
  %137 = getelementptr inbounds i8, i8* %133, i64 %2
  %138 = add nsw i32 %132, -1
  %139 = add i32 %135, -1
  %140 = icmp eq i32 %139, 0
  br i1 %140, label %141, label %131, !llvm.loop !5

141:                                              ; preds = %131, %130
  %142 = phi i32 [ %8, %130 ], [ %138, %131 ]
  %143 = phi i8* [ %128, %130 ], [ %137, %131 ]
  %144 = phi i8* [ %120, %130 ], [ %136, %131 ]
  br i1 %109, label %221, label %182

145:                                              ; preds = %127
  br i1 %111, label %156, label %146

146:                                              ; preds = %145, %146
  %147 = phi i8* [ %151, %146 ], [ %120, %145 ]
  %148 = phi i8* [ %152, %146 ], [ %128, %145 ]
  %149 = phi i32 [ %153, %146 ], [ %8, %145 ]
  %150 = phi i32 [ %154, %146 ], [ %110, %145 ]
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %148, i8* align 1 %147, i64 %129, i1 false)
  %151 = getelementptr inbounds i8, i8* %147, i64 %2
  %152 = getelementptr inbounds i8, i8* %148, i64 %2
  %153 = add nsw i32 %149, -1
  %154 = add i32 %150, -1
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %156, label %146, !llvm.loop !6

156:                                              ; preds = %146, %145
  %157 = phi i8* [ %120, %145 ], [ %151, %146 ]
  %158 = phi i8* [ %128, %145 ], [ %152, %146 ]
  %159 = phi i32 [ %8, %145 ], [ %153, %146 ]
  br i1 %112, label %221, label %160

160:                                              ; preds = %156, %160
  %161 = phi i8* [ %178, %160 ], [ %157, %156 ]
  %162 = phi i8* [ %179, %160 ], [ %158, %156 ]
  %163 = phi i32 [ %180, %160 ], [ %159, %156 ]
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %162, i8* align 1 %161, i64 %129, i1 false)
  %164 = getelementptr inbounds i8, i8* %161, i64 %2
  %165 = getelementptr inbounds i8, i8* %162, i64 %2
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %165, i8* align 1 %164, i64 %129, i1 false)
  %166 = getelementptr inbounds i8, i8* %164, i64 %2
  %167 = getelementptr inbounds i8, i8* %165, i64 %2
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %167, i8* align 1 %166, i64 %129, i1 false)
  %168 = getelementptr inbounds i8, i8* %166, i64 %2
  %169 = getelementptr inbounds i8, i8* %167, i64 %2
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %169, i8* align 1 %168, i64 %129, i1 false)
  %170 = getelementptr inbounds i8, i8* %168, i64 %2
  %171 = getelementptr inbounds i8, i8* %169, i64 %2
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %171, i8* align 1 %170, i64 %129, i1 false)
  %172 = getelementptr inbounds i8, i8* %170, i64 %2
  %173 = getelementptr inbounds i8, i8* %171, i64 %2
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %173, i8* align 1 %172, i64 %129, i1 false)
  %174 = getelementptr inbounds i8, i8* %172, i64 %2
  %175 = getelementptr inbounds i8, i8* %173, i64 %2
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %175, i8* align 1 %174, i64 %129, i1 false)
  %176 = getelementptr inbounds i8, i8* %174, i64 %2
  %177 = getelementptr inbounds i8, i8* %175, i64 %2
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %177, i8* align 1 %176, i64 %129, i1 false)
  %178 = getelementptr inbounds i8, i8* %176, i64 %2
  %179 = getelementptr inbounds i8, i8* %177, i64 %2
  %180 = add nsw i32 %163, -8
  %181 = icmp eq i32 %180, 0
  br i1 %181, label %221, label %160

182:                                              ; preds = %141, %182
  %183 = phi i32 [ %194, %182 ], [ %142, %141 ]
  %184 = phi i8* [ %193, %182 ], [ %143, %141 ]
  %185 = phi i8* [ %192, %182 ], [ %144, %141 ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %184, i8* align 1 %185, i64 %129, i1 false) #3
  %186 = getelementptr inbounds i8, i8* %185, i64 %2
  %187 = getelementptr inbounds i8, i8* %184, i64 %2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %187, i8* align 1 %186, i64 %129, i1 false) #3
  %188 = getelementptr inbounds i8, i8* %186, i64 %2
  %189 = getelementptr inbounds i8, i8* %187, i64 %2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %189, i8* align 1 %188, i64 %129, i1 false) #3
  %190 = getelementptr inbounds i8, i8* %188, i64 %2
  %191 = getelementptr inbounds i8, i8* %189, i64 %2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %191, i8* align 1 %190, i64 %129, i1 false) #3
  %192 = getelementptr inbounds i8, i8* %190, i64 %2
  %193 = getelementptr inbounds i8, i8* %191, i64 %2
  %194 = add nsw i32 %183, -4
  %195 = icmp eq i32 %194, 0
  br i1 %195, label %221, label %182

196:                                              ; preds = %113
  %197 = getelementptr inbounds i8, i8* %120, i64 %90
  %198 = getelementptr inbounds i8, i8* %120, i64 %92
  br i1 %85, label %199, label %207

199:                                              ; preds = %196
  br i1 %97, label %200, label %207

200:                                              ; preds = %199
  %201 = getelementptr inbounds i8, i8* %86, i64 %114
  %202 = getelementptr inbounds i8, i8* %201, i64 %98
  %203 = select i1 %95, i8* %201, i8* %197
  %204 = select i1 %95, i8* %202, i8* %201
  %205 = getelementptr inbounds i8, i8* %204, i64 %100
  %206 = select i1 %94, i8* %198, i8* %205
  br label %207

207:                                              ; preds = %200, %199, %196
  %208 = phi i8* [ %197, %196 ], [ %197, %199 ], [ %203, %200 ]
  %209 = phi i64 [ %2, %196 ], [ %2, %199 ], [ %99, %200 ]
  %210 = phi i8* [ %198, %196 ], [ %198, %199 ], [ %206, %200 ]
  %211 = phi i64 [ %2, %196 ], [ %2, %199 ], [ %101, %200 ]
  call void @llvm.lifetime.start.p0i8(i64 35840, i8* nonnull %102) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 32 %102, i8 -86, i64 35840, i1 false)
  %212 = getelementptr inbounds %"struct.libgav1::RestorationUnitInfo", %"struct.libgav1::RestorationUnitInfo"* %22, i64 %123
  %213 = getelementptr inbounds %"struct.libgav1::RestorationUnitInfo", %"struct.libgav1::RestorationUnitInfo"* %212, i64 0, i32 0
  %214 = load i8, i8* %213, align 32
  %215 = load %"struct.libgav1::dsp::Dsp"*, %"struct.libgav1::dsp::Dsp"** %103, align 8
  %216 = zext i8 %214 to i64
  %217 = add nsw i64 %216, -2
  %218 = getelementptr inbounds %"struct.libgav1::dsp::Dsp", %"struct.libgav1::dsp::Dsp"* %215, i64 0, i32 19, i64 %217
  %219 = load void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)*, void (%"struct.libgav1::RestorationUnitInfo"*, i8*, i64, i8*, i64, i8*, i64, i32, i32, %"union.libgav1::RestorationBuffer"*, i8*)** %218, align 8
  %220 = getelementptr inbounds i8, i8* %10, i64 %114
  call void %219(%"struct.libgav1::RestorationUnitInfo"* dereferenceable(96) %212, i8* %120, i64 %2, i8* %208, i64 %209, i8* %210, i64 %211, i32 %119, i32 %8, %"union.libgav1::RestorationBuffer"* nonnull %12, i8* %220) #3
  call void @llvm.lifetime.end.p0i8(i64 35840, i8* nonnull %102) #3
  br label %221

221:                                              ; preds = %141, %182, %156, %160, %207
  %222 = add nsw i32 %122, 1
  %223 = add i64 %114, %104
  %224 = icmp slt i64 %223, %105
  br i1 %224, label %113, label %225

225:                                              ; preds = %221
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
