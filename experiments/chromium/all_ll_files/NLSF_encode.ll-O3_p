; ModuleID = '../../third_party/opus/src/silk/NLSF_encode.c'
source_filename = "../../third_party/opus/src/silk/NLSF_encode.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.silk_NLSF_CB_struct = type { i16, i16, i16, i16, i8*, i16*, i8*, i8*, i8*, i8*, i8*, i16* }

@.str = private unnamed_addr constant [53 x i8] c"assertion failed: signalType >= 0 && signalType <= 2\00", align 1
@.str.1 = private unnamed_addr constant [46 x i8] c"../../third_party/opus/src/silk/NLSF_encode.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @silk_NLSF_encode(i8*, i16*, %struct.silk_NLSF_CB_struct*, i16* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 {
  %8 = alloca i32, align 4
  %9 = alloca [16 x i16], align 16
  %10 = alloca [16 x i16], align 16
  %11 = alloca [16 x i8], align 16
  %12 = alloca [16 x i16], align 16
  %13 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #5
  store i32 -1431655766, i32* %8, align 4
  %14 = bitcast [16 x i16]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #5
  %15 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 0
  %16 = bitcast [16 x i16]* %10 to i8*
  %17 = bitcast [16 x i16]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #5
  %18 = getelementptr inbounds [16 x i16], [16 x i16]* %10, i64 0, i64 0
  %19 = getelementptr inbounds [16 x i8], [16 x i8]* %11, i64 0, i64 0
  %20 = bitcast [16 x i16]* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -86, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %19) #5
  %21 = bitcast [16 x i16]* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %21) #5
  %22 = getelementptr inbounds [16 x i16], [16 x i16]* %12, i64 0, i64 0
  %23 = icmp ult i32 %6, 3
  %24 = bitcast [16 x i16]* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -86, i64 32, i1 false)
  br i1 %23, label %26, label %25

25:                                               ; preds = %7
  tail call void @celt_fatal(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0), i32 63) #6
  unreachable

26:                                               ; preds = %7
  %27 = getelementptr inbounds %struct.silk_NLSF_CB_struct, %struct.silk_NLSF_CB_struct* %2, i64 0, i32 11
  %28 = load i16*, i16** %27, align 8
  %29 = getelementptr inbounds %struct.silk_NLSF_CB_struct, %struct.silk_NLSF_CB_struct* %2, i64 0, i32 1
  %30 = load i16, i16* %29, align 2
  %31 = sext i16 %30 to i32
  tail call void @silk_NLSF_stabilize(i16* %1, i16* %28, i32 %31) #5
  %32 = getelementptr inbounds %struct.silk_NLSF_CB_struct, %struct.silk_NLSF_CB_struct* %2, i64 0, i32 0
  %33 = load i16, i16* %32, align 8
  %34 = sext i16 %33 to i64
  %35 = shl nsw i64 %34, 2
  %36 = alloca i32, i64 %34, align 16
  %37 = bitcast i32* %36 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 -86, i64 %35, i1 false)
  %38 = getelementptr inbounds %struct.silk_NLSF_CB_struct, %struct.silk_NLSF_CB_struct* %2, i64 0, i32 4
  %39 = load i8*, i8** %38, align 8
  %40 = getelementptr inbounds %struct.silk_NLSF_CB_struct, %struct.silk_NLSF_CB_struct* %2, i64 0, i32 5
  %41 = load i16*, i16** %40, align 8
  %42 = sext i16 %33 to i32
  %43 = load i16, i16* %29, align 2
  %44 = sext i16 %43 to i32
  call void @silk_NLSF_VQ(i32* nonnull %36, i16* %1, i8* %39, i16* %41, i32 %42, i32 %44) #5
  %45 = sext i32 %5 to i64
  %46 = shl nsw i64 %45, 2
  %47 = alloca i32, i64 %45, align 16
  %48 = bitcast i32* %47 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %48, i8 -86, i64 %46, i1 false)
  %49 = load i16, i16* %32, align 8
  %50 = sext i16 %49 to i32
  call void @silk_insertion_sort_increasing(i32* nonnull %36, i32* nonnull %47, i32 %50, i32 %5) #5
  %51 = alloca i32, i64 %45, align 16
  %52 = bitcast i32* %51 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %52, i8 -86, i64 %46, i1 false)
  %53 = shl nsw i32 %5, 4
  %54 = sext i32 %53 to i64
  %55 = alloca i8, i64 %54, align 16
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %55, i8 -86, i64 %54, i1 false)
  %56 = icmp sgt i32 %5, 0
  br i1 %56, label %57, label %203

57:                                               ; preds = %26
  %58 = getelementptr inbounds %struct.silk_NLSF_CB_struct, %struct.silk_NLSF_CB_struct* %2, i64 0, i32 10
  %59 = getelementptr inbounds %struct.silk_NLSF_CB_struct, %struct.silk_NLSF_CB_struct* %2, i64 0, i32 2
  %60 = getelementptr inbounds %struct.silk_NLSF_CB_struct, %struct.silk_NLSF_CB_struct* %2, i64 0, i32 3
  %61 = getelementptr inbounds %struct.silk_NLSF_CB_struct, %struct.silk_NLSF_CB_struct* %2, i64 0, i32 6
  %62 = lshr i32 %6, 1
  %63 = shl i32 %4, 14
  %64 = ashr i32 %63, 16
  %65 = zext i32 %5 to i64
  br label %66

66:                                               ; preds = %188, %57
  %67 = phi i64 [ 0, %57 ], [ %201, %188 ]
  %68 = getelementptr inbounds i32, i32* %47, i64 %67
  %69 = load i32, i32* %68, align 4
  %70 = load i8*, i8** %38, align 8
  %71 = load i16, i16* %29, align 2
  %72 = sext i16 %71 to i32
  %73 = mul nsw i32 %69, %72
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %70, i64 %74
  %76 = load i16*, i16** %40, align 8
  %77 = getelementptr inbounds i16, i16* %76, i64 %74
  %78 = icmp sgt i16 %71, 0
  br i1 %78, label %79, label %162

79:                                               ; preds = %66
  %80 = zext i32 %72 to i64
  br label %81

81:                                               ; preds = %156, %79
  %82 = phi i64 [ 0, %79 ], [ %160, %156 ]
  %83 = getelementptr inbounds i8, i8* %75, i64 %82
  %84 = load i8, i8* %83, align 1
  %85 = zext i8 %84 to i16
  %86 = shl nuw nsw i16 %85, 7
  %87 = getelementptr inbounds i16, i16* %77, i64 %82
  %88 = load i16, i16* %87, align 2
  %89 = sext i16 %88 to i32
  %90 = getelementptr inbounds i16, i16* %1, i64 %82
  %91 = load i16, i16* %90, align 2
  %92 = sub i16 %91, %86
  %93 = sext i16 %92 to i32
  %94 = mul nsw i32 %93, %89
  %95 = lshr i32 %94, 14
  %96 = trunc i32 %95 to i16
  %97 = getelementptr inbounds [16 x i16], [16 x i16]* %9, i64 0, i64 %82
  store i16 %96, i16* %97, align 2
  %98 = getelementptr inbounds i16, i16* %3, i64 %82
  %99 = load i16, i16* %98, align 2
  %100 = sext i16 %99 to i32
  %101 = mul nsw i32 %89, %89
  %102 = icmp slt i32 %100, 0
  %103 = sub nsw i32 0, %100
  %104 = select i1 %102, i32 %103, i32 %100
  %105 = call i32 @llvm.ctlz.i32(i32 %104, i1 false) #5, !range !2
  %106 = add nsw i32 %105, -1
  %107 = shl i32 %100, %106
  %108 = call i32 @llvm.ctlz.i32(i32 %101, i1 false) #5, !range !2
  %109 = add nsw i32 %108, -1
  %110 = shl i32 %101, %109
  %111 = ashr i32 %110, 16
  %112 = sdiv i32 536870911, %111
  %113 = sext i32 %107 to i64
  %114 = zext i32 %112 to i64
  %115 = shl i64 %114, 48
  %116 = ashr exact i64 %115, 48
  %117 = mul nsw i64 %116, %113
  %118 = sext i32 %110 to i64
  %119 = ashr i64 %117, 16
  %120 = mul nsw i64 %119, %118
  %121 = lshr i64 %120, 29
  %122 = trunc i64 %121 to i32
  %123 = and i32 %122, -8
  %124 = sub i32 %107, %123
  %125 = sext i32 %124 to i64
  %126 = mul nsw i64 %116, %125
  %127 = lshr i64 %126, 16
  %128 = add nsw i64 %127, %119
  %129 = trunc i64 %128 to i32
  %130 = sub nsw i32 29, %108
  %131 = add nsw i32 %130, %105
  %132 = add nsw i32 %131, -21
  %133 = icmp slt i32 %132, 0
  br i1 %133, label %134, label %152

134:                                              ; preds = %81
  %135 = sub nsw i32 21, %131
  %136 = ashr i32 -2147483648, %135
  %137 = lshr i32 2147483647, %135
  %138 = icmp sgt i32 %136, %137
  br i1 %138, label %139, label %144

139:                                              ; preds = %134
  %140 = icmp slt i32 %136, %129
  br i1 %140, label %149, label %141

141:                                              ; preds = %139
  %142 = icmp sgt i32 %137, %129
  %143 = select i1 %142, i32 %137, i32 %129
  br label %149

144:                                              ; preds = %134
  %145 = icmp slt i32 %137, %129
  br i1 %145, label %149, label %146

146:                                              ; preds = %144
  %147 = icmp sgt i32 %136, %129
  %148 = select i1 %147, i32 %136, i32 %129
  br label %149

149:                                              ; preds = %146, %144, %141, %139
  %150 = phi i32 [ %136, %139 ], [ %143, %141 ], [ %137, %144 ], [ %148, %146 ]
  %151 = shl i32 %150, %135
  br label %156

152:                                              ; preds = %81
  %153 = icmp slt i32 %132, 32
  %154 = ashr i32 %129, %132
  %155 = select i1 %153, i32 %154, i32 0
  br label %156

156:                                              ; preds = %152, %149
  %157 = phi i32 [ %151, %149 ], [ %155, %152 ]
  %158 = trunc i32 %157 to i16
  %159 = getelementptr inbounds [16 x i16], [16 x i16]* %10, i64 0, i64 %82
  store i16 %158, i16* %159, align 2
  %160 = add nuw nsw i64 %82, 1
  %161 = icmp eq i64 %160, %80
  br i1 %161, label %162, label %81

162:                                              ; preds = %156, %66
  call void @silk_NLSF_unpack(i16* nonnull %22, i8* nonnull %19, %struct.silk_NLSF_CB_struct* %2, i32 %69) #5
  %163 = shl i64 %67, 4
  %164 = and i64 %163, 4294967280
  %165 = getelementptr inbounds i8, i8* %55, i64 %164
  %166 = load i8*, i8** %58, align 8
  %167 = load i16, i16* %59, align 4
  %168 = sext i16 %167 to i32
  %169 = load i16, i16* %60, align 2
  %170 = load i16, i16* %29, align 2
  %171 = call i32 @silk_NLSF_del_dec_quant(i8* %165, i16* nonnull %15, i16* nonnull %18, i8* nonnull %19, i16* nonnull %22, i8* %166, i32 %168, i16 signext %169, i32 %4, i16 signext %170) #5
  %172 = getelementptr inbounds i32, i32* %51, i64 %67
  store i32 %171, i32* %172, align 4
  %173 = load i8*, i8** %61, align 8
  %174 = load i16, i16* %32, align 8
  %175 = sext i16 %174 to i32
  %176 = mul nsw i32 %62, %175
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds i8, i8* %173, i64 %177
  %179 = icmp eq i32 %69, 0
  br i1 %179, label %188, label %180

180:                                              ; preds = %162
  %181 = add nsw i32 %69, -1
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds i8, i8* %178, i64 %182
  %184 = load i8, i8* %183, align 1
  %185 = zext i8 %184 to i32
  %186 = sext i32 %69 to i64
  %187 = getelementptr inbounds i8, i8* %178, i64 %186
  br label %188

188:                                              ; preds = %162, %180
  %189 = phi i8* [ %187, %180 ], [ %178, %162 ]
  %190 = phi i32 [ %185, %180 ], [ 256, %162 ]
  %191 = load i8, i8* %189, align 1
  %192 = zext i8 %191 to i32
  %193 = sub nsw i32 %190, %192
  %194 = call i32 @silk_lin2log(i32 %193) #5
  %195 = load i32, i32* %172, align 4
  %196 = shl i32 %194, 16
  %197 = sub i32 67108864, %196
  %198 = ashr exact i32 %197, 16
  %199 = mul nsw i32 %198, %64
  %200 = add nsw i32 %199, %195
  store i32 %200, i32* %172, align 4
  %201 = add nuw nsw i64 %67, 1
  %202 = icmp eq i64 %201, %65
  br i1 %202, label %203, label %66

203:                                              ; preds = %188, %26
  call void @silk_insertion_sort_increasing(i32* nonnull %51, i32* nonnull %8, i32 %5, i32 1) #5
  %204 = load i32, i32* %8, align 4
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds i32, i32* %47, i64 %205
  %207 = load i32, i32* %206, align 4
  %208 = trunc i32 %207 to i8
  store i8 %208, i8* %0, align 1
  %209 = getelementptr inbounds i8, i8* %0, i64 1
  %210 = shl nsw i32 %204, 4
  %211 = sext i32 %210 to i64
  %212 = getelementptr inbounds i8, i8* %55, i64 %211
  %213 = load i16, i16* %29, align 2
  %214 = sext i16 %213 to i64
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %209, i8* align 16 %212, i64 %214, i1 false)
  call void @silk_NLSF_decode(i16* %1, i8* %0, %struct.silk_NLSF_CB_struct* %2) #5
  %215 = load i32, i32* %51, align 16
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %21) #5
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %19) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #5
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #5
  ret i32 %215
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #2

declare void @silk_NLSF_stabilize(i16*, i16*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @silk_NLSF_VQ(i32*, i16*, i8*, i16*, i32, i32) local_unnamed_addr #3

declare void @silk_insertion_sort_increasing(i32*, i32*, i32, i32) local_unnamed_addr #3

declare void @silk_NLSF_unpack(i16*, i8*, %struct.silk_NLSF_CB_struct*, i32) local_unnamed_addr #3

declare i32 @silk_NLSF_del_dec_quant(i8*, i16*, i16*, i8*, i16*, i8*, i32, i16 signext, i32, i16 signext) local_unnamed_addr #3

declare i32 @silk_lin2log(i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

declare void @silk_NLSF_decode(i16*, i8*, %struct.silk_NLSF_CB_struct*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #4

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone speculatable }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
