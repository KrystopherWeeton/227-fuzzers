; ModuleID = '../../third_party/opus/src/src/analysis.c'
source_filename = "../../third_party/opus/src/src/analysis.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.DenseLayer = type { i8*, i8*, i32, i32, i32 }
%struct.GRULayer = type { i8*, i8*, i8*, i32, i32 }
%struct.TonalityAnalysisState = type { i32, i32, i32, [240 x float], [240 x float], [240 x float], [720 x float], i32, [18 x float], float, i32, [8 x [18 x float]], [8 x [18 x float]], [18 x float], [18 x float], [19 x float], [32 x float], [8 x float], [9 x float], float, float, i32, i32, i32, i32, i32, i32, float, i32, [32 x float], [3 x float], [100 x %struct.AnalysisInfo] }
%struct.AnalysisInfo = type { i32, float, float, float, float, float, float, float, i32, float, float, [19 x i8] }
%struct.OpusCustomMode = type { i32, i32, i32, i32, [4 x float], i16*, i32, i32, i32, i32, i8*, i16*, float*, %struct.mdct_lookup, %struct.PulseCache }
%struct.mdct_lookup = type { i32, i32, [4 x %struct.kiss_fft_state*], float* }
%struct.kiss_fft_state = type { i32, float, i32, [16 x i16], i16*, %struct.kiss_twiddle_cpx*, %struct.arch_fft_state* }
%struct.kiss_twiddle_cpx = type { float, float }
%struct.arch_fft_state = type { i32, i8* }
%struct.PulseCache = type { i32, i16*, i8*, i8* }
%struct.kiss_fft_cpx = type { float, float }

@analysis_window = internal unnamed_addr constant [240 x float] [float 0x3F068B5CC0000000, float 0x3F2669CEE0000000, float 0x3F393B3A60000000, float 0x3F46723240000000, float 0x3F518C1980000000, float 0x3F593F6C20000000, float 0x3F612FD320000000, float 0x3F66701960000000, float 0x3F6C64BAA0000000, float 0x3F7185CEE0000000, float 0x3F75315500000000, float 0x3F793708A0000000, float 0x3F7D94D0E0000000, float 0x3F8125DD00000000, float 0x3F83ACD5C0000000, float 0x3F86605EE0000000, float 0x3F893FF260000000, float 0x3F8C4B09E0000000, float 0x3F8F822BC0000000, float 0x3F917225C0000000, float 0x3F9338F7A0000000, float 0x3F95158B80000000, float 0x3F97079E60000000, float 0x3F990F3020000000, float 0x3F9B2BFDC0000000, float 0x3F9D5E0720000000, float 0x3F9FA54C60000000, float 0x3FA100E6A0000000, float 0x3FA2398200000000, float 0x3FA37C99A0000000, float 0x3FA4CA0C20000000, float 0x3FA621D960000000, float 0x3FA783E000000000, float 0x3FA8F01FC0000000, float 0x3FAA6698C0000000, float 0x3FABE707E0000000, float 0x3FAD716D20000000, float 0x3FAF05C8A0000000, float 0x3FB0520D20000000, float 0x3FB1260F60000000, float 0x3FB1FEFC00000000, float 0x3FB2DCB140000000, float 0x3FB3BF2F60000000, float 0x3FB4A67620000000, float 0x3FB5926420000000, float 0x3FB6830A00000000, float 0x3FB7784660000000, float 0x3FB87229E0000000, float 0x3FB9708240000000, float 0x3FBA736040000000, float 0x3FBB7AC3E0000000, float 0x3FBC867AE0000000, float 0x3FBD9695E0000000, float 0x3FBEAB0420000000, float 0x3FBFC3B500000000, float 0x3FC0705420000000, float 0x3FC100DE40000000, float 0x3FC19378E0000000, float 0x3FC2281BA0000000, float 0x3FC2BEC680000000, float 0x3FC35768A0000000, float 0x3FC3F20220000000, float 0x3FC48E8A80000000, float 0x3FC52CF960000000, float 0x3FC5CD4660000000, float 0x3FC66F71A0000000, float 0x3FC7136A40000000, float 0x3FC7B938A0000000, float 0x3FC860C380000000, float 0x3FC90A0B20000000, float 0x3FC9B50F40000000, float 0x3FCA61B6E0000000, float 0x3FCB100A40000000, float 0x3FCBC00100000000, float 0x3FCC718A80000000, float 0x3FCD249E40000000, float 0x3FCDD944A0000000, float 0x3FCE8F6480000000, float 0x3FCF46F580000000, float 2.500000e-01, float 0x3FD05D3560000000, float 0x3FD0BB1F20000000, float 0x3FD119B0A0000000, float 0x3FD178EA00000000, float 0x3FD1D8C6E0000000, float 0x3FD2393EE0000000, float 0x3FD29A5660000000, float 0x3FD2FC04C0000000, float 0x3FD35E41E0000000, float 0x3FD3C10D80000000, float 0x3FD4246380000000, float 0x3FD4883FE0000000, float 0x3FD4EC9A00000000, float 0x3FD5517620000000, float 0x3FD5B6C380000000, float 0x3FD61C8A80000000, float 0x3FD682BA60000000, float 0x3FD6E95740000000, float 0x3FD7505D00000000, float 0x3FD7B7BF20000000, float 0x3FD81F81A0000000, float 0x3FD8879C40000000, float 0x3FD8F00AC0000000, float 0x3FD958C8E0000000, float 0x3FD9C1D2A0000000, float 0x3FDA2B1F60000000, float 0x3FDA94AF40000000, float 0x3FDAFE7E20000000, float 0x3FDB688380000000, float 0x3FDBD2BB20000000, float 0x3FDC3D2100000000, float 0x3FDCA7B4E0000000, float 0x3FDD126A60000000, float 0x3FDD7D4180000000, float 0x3FDDE835E0000000, float 0x3FDE534380000000, float 0x3FDEBE61C0000000, float 0x3FDF299100000000, float 0x3FDF94C440000000, float 5.000000e-01, float 0x3FE0359DE0000000, float 0x3FE06B3780000000, float 0x3FE0A0CF20000000, float 0x3FE0D65E40000000, float 0x3FE10BE520000000, float 0x3FE1415F40000000, float 0x3FE176CAC0000000, float 0x3FE1AC2580000000, float 0x3FE1E16F80000000, float 0x3FE216A260000000, float 0x3FE24BBE40000000, float 0x3FE280C100000000, float 0x3FE2B5A860000000, float 0x3FE2EA7040000000, float 0x3FE31F16C0000000, float 0x3FE3539B80000000, float 0x3FE387FAA0000000, float 0x3FE3BC31E0000000, float 0x3FE3F03F20000000, float 0x3FE4242080000000, float 0x3FE457D180000000, float 0x3FE48B5460000000, float 0x3FE4BEA2E0000000, float 0x3FE4F1BAC0000000, float 0x3FE5249E40000000, float 0x3FE5574500000000, float 0x3FE589B300000000, float 0x3FE5BBE020000000, float 0x3FE5EDCE40000000, float 0x3FE61F7940000000, float 0x3FE650DF20000000, float 0x3FE681FDA0000000, float 0x3FE6B2D4E0000000, float 0x3FE6E36080000000, float 0x3FE7139CA0000000, float 0x3FE7438B00000000, float 0x3FE77327A0000000, float 0x3FE7A27060000000, float 0x3FE7D16540000000, float 7.500000e-01, float 0x3FE82E42A0000000, float 0x3FE85C26E0000000, float 0x3FE889AEE0000000, float 0x3FE8B6D860000000, float 0x3FE8E39D60000000, float 0x3FE90FFFC0000000, float 0x3FE93BFD80000000, float 0x3FE9679240000000, float 0x3FE992BC20000000, float 0x3FE9BD7D40000000, float 0x3FE9E7CF20000000, float 0x3FEA11B1E0000000, float 0x3FEA3B2560000000, float 0x3FEA6423A0000000, float 0x3FEA8CAE60000000, float 0x3FEAB4C1A0000000, float 0x3FEADC5D60000000, float 0x3FEB037F80000000, float 0x3FEB2A25E0000000, float 0x3FEB504E60000000, float 0x3FEB75F920000000, float 0x3FEB9B21C0000000, float 0x3FEBBFC860000000, float 0x3FEBE3EB00000000, float 0x3FEC078960000000, float 0x3FEC2A9F80000000, float 0x3FEC4D2D40000000, float 0x3FEC6F30A0000000, float 0x3FEC90A780000000, float 0x3FECB19400000000, float 0x3FECD1EFC0000000, float 0x3FECF1BAC0000000, float 0x3FED10F740000000, float 0x3FED2F9EC0000000, float 0x3FED4DB380000000, float 0x3FED6B3140000000, float 0x3FED881A20000000, float 0x3FEDA469E0000000, float 0x3FEDC02080000000, float 0x3FEDDB3E20000000, float 0x3FEDF5BE60000000, float 0x3FEE0FA380000000, float 0x3FEE28E920000000, float 0x3FEE418F80000000, float 0x3FEE599680000000, float 0x3FEE70FE00000000, float 0x3FEE87C200000000, float 0x3FEE9DE260000000, float 0x3FEEB35F40000000, float 0x3FEEC83660000000, float 0x3FEEDC67E0000000, float 0x3FEEEFF1A0000000, float 0x3FEF02D5A0000000, float 0x3FEF150FC0000000, float 0x3FEF26A020000000, float 0x3FEF378680000000, float 0x3FEF47C300000000, float 0x3FEF5753A0000000, float 0x3FEF663840000000, float 0x3FEF746EE0000000, float 0x3FEF81F760000000, float 0x3FEF8ED3E0000000, float 0x3FEF9B0040000000, float 0x3FEFA67E80000000, float 0x3FEFB14CA0000000, float 0x3FEFBB6880000000, float 0x3FEFC4D660000000, float 0x3FEFCD91E0000000, float 0x3FEFD59D60000000, float 0x3FEFDCF460000000, float 0x3FEFE39B40000000, float 0x3FEFE98FE0000000, float 0x3FEFEED020000000, float 0x3FEFF36040000000, float 0x3FEFF73A00000000, float 0x3FEFFA6380000000, float 0x3FEFFCD8A0000000, float 0x3FEFFE9960000000, float 0x3FEFFFA5E0000000, float 1.000000e+00], align 16
@tbands = internal unnamed_addr constant [19 x i32] [i32 4, i32 8, i32 12, i32 16, i32 20, i32 24, i32 28, i32 32, i32 40, i32 48, i32 56, i32 64, i32 80, i32 96, i32 112, i32 136, i32 160, i32 192, i32 240], align 16
@layer0 = external constant %struct.DenseLayer, align 8
@layer1 = external constant %struct.GRULayer, align 8
@layer2 = external constant %struct.DenseLayer, align 8

; Function Attrs: nounwind ssp uwtable
define hidden void @tonality_analysis_init(%struct.TonalityAnalysisState* nocapture, i32) local_unnamed_addr #0 {
  %3 = tail call i32 @opus_select_arch() #7
  %4 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 0
  store i32 %3, i32* %4, align 4
  %5 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 2
  store i32 %1, i32* %5, align 4
  %6 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 3
  %7 = bitcast [240 x float]* %6 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %7, i8 0, i64 13992, i1 false) #7
  ret void
}

declare i32 @opus_select_arch() local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @tonality_analysis_reset(%struct.TonalityAnalysisState* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 3
  %3 = bitcast [240 x float]* %2 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %3, i8 0, i64 13992, i1 false)
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @tonality_get_info(%struct.TonalityAnalysisState* nocapture, %struct.AnalysisInfo* nocapture, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 25
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 24
  %7 = load i32, i32* %6, align 4
  %8 = sub nsw i32 %7, %5
  %9 = icmp slt i32 %8, 0
  %10 = add nsw i32 %8, 100
  %11 = select i1 %9, i32 %10, i32 %8
  %12 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 2
  %13 = load i32, i32* %12, align 4
  %14 = sdiv i32 %13, 400
  %15 = sdiv i32 %2, %14
  %16 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 26
  %17 = load i32, i32* %16, align 4
  %18 = add i32 %17, %15
  store i32 %18, i32* %16, align 4
  %19 = icmp sgt i32 %18, 7
  br i1 %19, label %20, label %26

20:                                               ; preds = %3
  %21 = add nsw i32 %18, -8
  %22 = lshr i32 %21, 3
  %23 = add i32 %5, %22
  %24 = and i32 %21, 7
  %25 = add i32 %23, 1
  store i32 %24, i32* %16, align 4
  store i32 %25, i32* %4, align 4
  br label %26

26:                                               ; preds = %20, %3
  %27 = phi i32 [ %25, %20 ], [ %5, %3 ]
  %28 = icmp sgt i32 %27, 99
  br i1 %28, label %29, label %31

29:                                               ; preds = %26
  %30 = add nsw i32 %27, -100
  store i32 %30, i32* %4, align 4
  br label %31

31:                                               ; preds = %29, %26
  %32 = sdiv i32 %13, 50
  %33 = icmp sge i32 %32, %2
  %34 = icmp eq i32 %7, %5
  %35 = or i1 %34, %33
  br i1 %35, label %40, label %36

36:                                               ; preds = %31
  %37 = add nsw i32 %5, 1
  %38 = icmp eq i32 %37, 100
  %39 = select i1 %38, i32 0, i32 %37
  br label %40

40:                                               ; preds = %31, %36
  %41 = phi i32 [ %39, %36 ], [ %5, %31 ]
  %42 = icmp eq i32 %41, %7
  %43 = zext i1 %42 to i32
  %44 = sub i32 %41, %43
  %45 = icmp slt i32 %44, 0
  %46 = select i1 %45, i32 99, i32 %44
  %47 = bitcast %struct.AnalysisInfo* %1 to i8*
  %48 = sext i32 %46 to i64
  %49 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %48
  %50 = bitcast %struct.AnalysisInfo* %49 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %47, i8* align 4 %50, i64 64, i1 false)
  %51 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %1, i64 0, i32 0
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %52, 0
  br i1 %53, label %237, label %54

54:                                               ; preds = %40
  %55 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %1, i64 0, i32 1
  %56 = load float, float* %55, align 4
  %57 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %1, i64 0, i32 8
  %58 = add nuw nsw i32 %46, 1
  %59 = icmp eq i32 %58, 100
  %60 = select i1 %59, i32 0, i32 %58
  %61 = load i32, i32* %6, align 4
  %62 = icmp eq i32 %60, %61
  br i1 %62, label %80, label %63

63:                                               ; preds = %54
  %64 = sext i32 %60 to i64
  %65 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %64, i32 1
  %66 = load float, float* %65, align 4
  %67 = fcmp ogt float %56, %66
  %68 = select i1 %67, float %56, float %66
  %69 = fadd float %56, %66
  %70 = load i32, i32* %57, align 4
  %71 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %64, i32 8
  %72 = load i32, i32* %71, align 4
  %73 = icmp sgt i32 %70, %72
  %74 = select i1 %73, i32 %70, i32 %72
  store i32 %74, i32* %57, align 4
  %75 = add nuw nsw i32 %60, 1
  %76 = icmp eq i32 %75, 100
  %77 = select i1 %76, i32 0, i32 %75
  %78 = load i32, i32* %6, align 4
  %79 = icmp eq i32 %77, %78
  br i1 %79, label %80, label %238

80:                                               ; preds = %254, %238, %63, %54
  %81 = phi float [ %56, %54 ], [ %68, %63 ], [ %243, %238 ], [ %259, %254 ]
  %82 = phi float [ %56, %54 ], [ %69, %63 ], [ %244, %238 ], [ %260, %254 ]
  %83 = phi float [ 1.000000e+00, %54 ], [ 2.000000e+00, %63 ], [ 3.000000e+00, %238 ], [ 4.000000e+00, %254 ]
  %84 = phi i32 [ 6, %54 ], [ 5, %63 ], [ 4, %238 ], [ 3, %254 ]
  %85 = add nsw i32 %46, -1
  %86 = icmp slt i32 %46, 1
  %87 = select i1 %86, i32 99, i32 %85
  %88 = load i32, i32* %6, align 4
  %89 = icmp eq i32 %87, %88
  br i1 %89, label %102, label %90

90:                                               ; preds = %80
  %91 = load i32, i32* %57, align 4
  %92 = sext i32 %87 to i64
  %93 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %92, i32 8
  %94 = load i32, i32* %93, align 4
  %95 = icmp sgt i32 %91, %94
  %96 = select i1 %95, i32 %91, i32 %94
  store i32 %96, i32* %57, align 4
  %97 = add nsw i32 %87, -1
  %98 = icmp slt i32 %87, 1
  %99 = select i1 %98, i32 99, i32 %97
  %100 = load i32, i32* %6, align 4
  %101 = icmp eq i32 %99, %100
  br i1 %101, label %102, label %265

102:                                              ; preds = %319, %313, %305, %299, %291, %285, %277, %265, %90, %80
  %103 = fdiv float %82, %83
  %104 = fadd float %81, 0xBFC99999A0000000
  %105 = fcmp ogt float %103, %104
  %106 = select i1 %105, float %103, float %104
  store float %106, float* %55, align 4
  %107 = icmp sgt i32 %11, 15
  br i1 %107, label %108, label %119

108:                                              ; preds = %102
  %109 = add nsw i32 %46, 5
  %110 = icmp sgt i32 %109, 99
  %111 = add nsw i32 %46, -95
  %112 = select i1 %110, i32 %111, i32 %109
  %113 = icmp sgt i32 %46, 98
  %114 = select i1 %113, i32 -99, i32 1
  %115 = add nsw i32 %114, %46
  %116 = sext i32 %115 to i64
  %117 = sext i32 %112 to i64
  %118 = add nsw i32 %112, 1
  br label %119

119:                                              ; preds = %108, %102
  %120 = phi i32 [ %118, %108 ], [ %58, %102 ]
  %121 = phi i64 [ %117, %108 ], [ %48, %102 ]
  %122 = phi i64 [ %116, %108 ], [ %48, %102 ]
  %123 = phi i32 [ %115, %108 ], [ %46, %102 ]
  %124 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %122, i32 9
  %125 = load float, float* %124, align 4
  %126 = fcmp olt float %125, 0x3FB99999A0000000
  %127 = select i1 %126, float 0x3FB99999A0000000, float %125
  %128 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %121, i32 5
  %129 = load float, float* %128, align 4
  %130 = fmul float %129, %127
  %131 = icmp eq i32 %120, 100
  %132 = select i1 %131, i32 0, i32 %120
  %133 = load i32, i32* %6, align 4
  %134 = icmp eq i32 %132, %133
  br i1 %134, label %172, label %135

135:                                              ; preds = %119, %146
  %136 = phi i32 [ %170, %146 ], [ %132, %119 ]
  %137 = phi i32 [ %144, %146 ], [ %123, %119 ]
  %138 = phi float [ %159, %146 ], [ 0.000000e+00, %119 ]
  %139 = phi float [ %155, %146 ], [ 1.000000e+00, %119 ]
  %140 = phi float [ %162, %146 ], [ %127, %119 ]
  %141 = phi float [ %167, %146 ], [ %130, %119 ]
  %142 = add nsw i32 %137, 1
  %143 = icmp eq i32 %142, 100
  %144 = select i1 %143, i32 0, i32 %142
  %145 = icmp eq i32 %144, %133
  br i1 %145, label %172, label %146

146:                                              ; preds = %135
  %147 = sext i32 %144 to i64
  %148 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %147, i32 9
  %149 = load float, float* %148, align 4
  %150 = fsub float %125, %149
  %151 = fmul float %150, 1.000000e+01
  %152 = fsub float %141, %151
  %153 = fdiv float %152, %140
  %154 = fcmp olt float %153, %139
  %155 = select i1 %154, float %153, float %139
  %156 = fadd float %141, %151
  %157 = fdiv float %156, %140
  %158 = fcmp ogt float %157, %138
  %159 = select i1 %158, float %157, float %138
  %160 = fcmp olt float %149, 0x3FB99999A0000000
  %161 = select i1 %160, float 0x3FB99999A0000000, float %149
  %162 = fadd float %140, %161
  %163 = sext i32 %136 to i64
  %164 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %163, i32 5
  %165 = load float, float* %164, align 4
  %166 = fmul float %165, %161
  %167 = fadd float %141, %166
  %168 = add nsw i32 %136, 1
  %169 = icmp eq i32 %168, 100
  %170 = select i1 %169, i32 0, i32 %168
  %171 = icmp eq i32 %170, %133
  br i1 %171, label %172, label %135

172:                                              ; preds = %135, %146, %119
  %173 = phi float [ %130, %119 ], [ %167, %146 ], [ %141, %135 ]
  %174 = phi float [ %127, %119 ], [ %162, %146 ], [ %140, %135 ]
  %175 = phi float [ 1.000000e+00, %119 ], [ %155, %146 ], [ %139, %135 ]
  %176 = phi float [ 0.000000e+00, %119 ], [ %159, %146 ], [ %138, %135 ]
  %177 = fdiv float %173, %174
  %178 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %1, i64 0, i32 5
  store float %177, float* %178, align 4
  %179 = fcmp olt float %177, %175
  %180 = select i1 %179, float %177, float %175
  %181 = fcmp ogt float %177, %176
  %182 = select i1 %181, float %177, float %176
  %183 = fcmp ogt float %180, 0.000000e+00
  %184 = select i1 %183, float %180, float 0.000000e+00
  %185 = fcmp olt float %182, 1.000000e+00
  %186 = select i1 %185, float %182, float 1.000000e+00
  %187 = icmp slt i32 %11, 10
  br i1 %187, label %188, label %232

188:                                              ; preds = %172
  %189 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 22
  %190 = load i32, i32* %189, align 4
  %191 = icmp sgt i32 %190, 1
  br i1 %191, label %192, label %213

192:                                              ; preds = %188
  %193 = icmp slt i32 %190, 16
  %194 = add nsw i32 %190, -1
  %195 = select i1 %193, i32 %194, i32 15
  br label %196

196:                                              ; preds = %192, %196
  %197 = phi float [ %186, %192 ], [ %210, %196 ]
  %198 = phi float [ %184, %192 ], [ %208, %196 ]
  %199 = phi i32 [ 0, %192 ], [ %211, %196 ]
  %200 = phi i32 [ %46, %192 ], [ %203, %196 ]
  %201 = add nsw i32 %200, -1
  %202 = icmp slt i32 %200, 1
  %203 = select i1 %202, i32 99, i32 %201
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %204, i32 5
  %206 = load float, float* %205, align 4
  %207 = fcmp olt float %198, %206
  %208 = select i1 %207, float %198, float %206
  %209 = fcmp ogt float %197, %206
  %210 = select i1 %209, float %197, float %206
  %211 = add nuw nsw i32 %199, 1
  %212 = icmp slt i32 %211, %195
  br i1 %212, label %196, label %213

213:                                              ; preds = %196, %188
  %214 = phi float [ %184, %188 ], [ %208, %196 ]
  %215 = phi float [ %186, %188 ], [ %210, %196 ]
  %216 = fmul float %125, 0x3FB99999A0000000
  %217 = fsub float %214, %216
  %218 = fcmp olt float %217, 0.000000e+00
  %219 = select i1 %218, float 0.000000e+00, float %217
  %220 = fadd float %216, %215
  %221 = fcmp ogt float %220, 1.000000e+00
  %222 = select i1 %221, float 1.000000e+00, float %220
  %223 = sitofp i32 %11 to float
  %224 = fmul float %223, 0x3FB99999A0000000
  %225 = fsub float 1.000000e+00, %224
  %226 = fsub float %219, %184
  %227 = fmul float %225, %226
  %228 = fadd float %184, %227
  %229 = fsub float %222, %186
  %230 = fmul float %225, %229
  %231 = fadd float %186, %230
  br label %232

232:                                              ; preds = %213, %172
  %233 = phi float [ %228, %213 ], [ %184, %172 ]
  %234 = phi float [ %231, %213 ], [ %186, %172 ]
  %235 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %1, i64 0, i32 6
  store float %233, float* %235, align 4
  %236 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %1, i64 0, i32 7
  store float %234, float* %236, align 4
  br label %237

237:                                              ; preds = %40, %232
  ret void

238:                                              ; preds = %63
  %239 = sext i32 %77 to i64
  %240 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %239, i32 1
  %241 = load float, float* %240, align 4
  %242 = fcmp ogt float %68, %241
  %243 = select i1 %242, float %68, float %241
  %244 = fadd float %69, %241
  %245 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %239, i32 8
  %246 = load i32, i32* %245, align 4
  %247 = icmp sgt i32 %74, %246
  %248 = select i1 %247, i32 %74, i32 %246
  store i32 %248, i32* %57, align 4
  %249 = add nuw nsw i32 %77, 1
  %250 = icmp eq i32 %249, 100
  %251 = select i1 %250, i32 0, i32 %249
  %252 = load i32, i32* %6, align 4
  %253 = icmp eq i32 %251, %252
  br i1 %253, label %80, label %254

254:                                              ; preds = %238
  %255 = sext i32 %251 to i64
  %256 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %255, i32 1
  %257 = load float, float* %256, align 4
  %258 = fcmp ogt float %243, %257
  %259 = select i1 %258, float %243, float %257
  %260 = fadd float %244, %257
  %261 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %255, i32 8
  %262 = load i32, i32* %261, align 4
  %263 = icmp sgt i32 %248, %262
  %264 = select i1 %263, i32 %248, i32 %262
  store i32 %264, i32* %57, align 4
  br label %80

265:                                              ; preds = %90
  %266 = load i32, i32* %57, align 4
  %267 = sext i32 %99 to i64
  %268 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %267, i32 8
  %269 = load i32, i32* %268, align 4
  %270 = icmp sgt i32 %266, %269
  %271 = select i1 %270, i32 %266, i32 %269
  store i32 %271, i32* %57, align 4
  %272 = add nsw i32 %99, -1
  %273 = icmp slt i32 %99, 1
  %274 = select i1 %273, i32 99, i32 %272
  %275 = load i32, i32* %6, align 4
  %276 = icmp eq i32 %274, %275
  br i1 %276, label %102, label %277

277:                                              ; preds = %265
  %278 = load i32, i32* %57, align 4
  %279 = sext i32 %274 to i64
  %280 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %279, i32 8
  %281 = load i32, i32* %280, align 4
  %282 = icmp sgt i32 %278, %281
  %283 = select i1 %282, i32 %278, i32 %281
  store i32 %283, i32* %57, align 4
  %284 = icmp eq i32 %84, 3
  br i1 %284, label %102, label %285

285:                                              ; preds = %277
  %286 = add nsw i32 %274, -1
  %287 = icmp slt i32 %274, 1
  %288 = select i1 %287, i32 99, i32 %286
  %289 = load i32, i32* %6, align 4
  %290 = icmp eq i32 %288, %289
  br i1 %290, label %102, label %291

291:                                              ; preds = %285
  %292 = load i32, i32* %57, align 4
  %293 = sext i32 %288 to i64
  %294 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %293, i32 8
  %295 = load i32, i32* %294, align 4
  %296 = icmp sgt i32 %292, %295
  %297 = select i1 %296, i32 %292, i32 %295
  store i32 %297, i32* %57, align 4
  %298 = icmp eq i32 %84, 4
  br i1 %298, label %102, label %299

299:                                              ; preds = %291
  %300 = add nsw i32 %288, -1
  %301 = icmp slt i32 %288, 1
  %302 = select i1 %301, i32 99, i32 %300
  %303 = load i32, i32* %6, align 4
  %304 = icmp eq i32 %302, %303
  br i1 %304, label %102, label %305

305:                                              ; preds = %299
  %306 = load i32, i32* %57, align 4
  %307 = sext i32 %302 to i64
  %308 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %307, i32 8
  %309 = load i32, i32* %308, align 4
  %310 = icmp sgt i32 %306, %309
  %311 = select i1 %310, i32 %306, i32 %309
  store i32 %311, i32* %57, align 4
  %312 = icmp eq i32 %84, 5
  br i1 %312, label %102, label %313

313:                                              ; preds = %305
  %314 = add nsw i32 %302, -1
  %315 = icmp slt i32 %302, 1
  %316 = select i1 %315, i32 99, i32 %314
  %317 = load i32, i32* %6, align 4
  %318 = icmp eq i32 %316, %317
  br i1 %318, label %102, label %319

319:                                              ; preds = %313
  %320 = load i32, i32* %57, align 4
  %321 = sext i32 %316 to i64
  %322 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %321, i32 8
  %323 = load i32, i32* %322, align 4
  %324 = icmp sgt i32 %320, %323
  %325 = select i1 %324, i32 %320, i32 %323
  store i32 %325, i32* %57, align 4
  br label %102
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nounwind ssp uwtable
define hidden void @run_analysis(%struct.TonalityAnalysisState*, %struct.OpusCustomMode* nocapture readonly, i8*, i32, i32, i32, i32, i32, i32, i32, void (i8*, float*, i32, i32, i32, i32, i32)* nocapture, %struct.AnalysisInfo* nocapture) local_unnamed_addr #0 {
  %13 = and i32 %3, -2
  %14 = icmp eq i8* %2, null
  br i1 %14, label %36, label %15

15:                                               ; preds = %12
  %16 = mul nsw i32 %8, 95
  %17 = sdiv i32 %16, 50
  %18 = icmp slt i32 %17, %13
  %19 = select i1 %18, i32 %17, i32 %13
  %20 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 23
  %21 = load i32, i32* %20, align 4
  %22 = sub nsw i32 %19, %21
  %23 = icmp sgt i32 %22, 0
  br i1 %23, label %24, label %34

24:                                               ; preds = %15
  %25 = sdiv i32 %8, 50
  br label %26

26:                                               ; preds = %24, %26
  %27 = phi i32 [ %22, %24 ], [ %32, %26 ]
  %28 = phi i32 [ %21, %24 ], [ %31, %26 ]
  %29 = icmp sgt i32 %27, %25
  %30 = select i1 %29, i32 %25, i32 %27
  tail call fastcc void @tonality_analysis(%struct.TonalityAnalysisState* %0, %struct.OpusCustomMode* %1, i8* nonnull %2, i32 %30, i32 %28, i32 %5, i32 %6, i32 %7, i32 %9, void (i8*, float*, i32, i32, i32, i32, i32)* %10)
  %31 = add nsw i32 %28, %25
  %32 = sub nsw i32 %27, %25
  %33 = icmp sgt i32 %32, 0
  br i1 %33, label %26, label %34

34:                                               ; preds = %26, %15
  %35 = sub nsw i32 %19, %4
  store i32 %35, i32* %20, align 4
  br label %36

36:                                               ; preds = %12, %34
  tail call void @tonality_get_info(%struct.TonalityAnalysisState* %0, %struct.AnalysisInfo* %11, i32 %4)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @tonality_analysis(%struct.TonalityAnalysisState*, %struct.OpusCustomMode* nocapture readonly, i8*, i32, i32, i32, i32, i32, i32, void (i8*, float*, i32, i32, i32, i32, i32)* nocapture) unnamed_addr #3 {
  %11 = alloca [18 x float], align 16
  %12 = alloca [18 x float], align 16
  %13 = alloca [8 x float], align 16
  %14 = alloca [25 x float], align 16
  %15 = alloca [2 x float], align 4
  %16 = alloca [19 x i32], align 16
  %17 = alloca [240 x float], align 16
  %18 = alloca [8 x float], align 16
  %19 = alloca [19 x float], align 16
  %20 = alloca [19 x float], align 16
  %21 = alloca [19 x float], align 16
  %22 = alloca [32 x float], align 16
  %23 = bitcast [18 x float]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %23) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 -1, i64 72, i1 false)
  %24 = bitcast [18 x float]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 72, i8* nonnull %24) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %24, i8 -1, i64 72, i1 false)
  %25 = bitcast [8 x float]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %25) #7
  %26 = getelementptr inbounds [8 x float], [8 x float]* %13, i64 0, i64 2
  %27 = getelementptr inbounds [8 x float], [8 x float]* %13, i64 0, i64 3
  %28 = getelementptr inbounds [8 x float], [8 x float]* %13, i64 0, i64 4
  %29 = bitcast [25 x float]* %14 to i8*
  %30 = bitcast [8 x float]* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %30, i8 -1, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 100, i8* nonnull %29) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %29, i8 -1, i64 100, i1 false)
  %31 = bitcast [2 x float]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %31) #7
  %32 = getelementptr inbounds [2 x float], [2 x float]* %15, i64 0, i64 0
  store float 0xFFFFFFFFE0000000, float* %32, align 4
  %33 = getelementptr inbounds [2 x float], [2 x float]* %15, i64 0, i64 1
  store float 0xFFFFFFFFE0000000, float* %33, align 4
  %34 = bitcast [19 x i32]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 76, i8* nonnull %34) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %34, i8 -86, i64 76, i1 false)
  %35 = bitcast [240 x float]* %17 to i8*
  call void @llvm.lifetime.start.p0i8(i64 960, i8* nonnull %35) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %35, i8 -1, i64 960, i1 false)
  %36 = bitcast [8 x float]* %18 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %36) #7
  %37 = bitcast [19 x float]* %19 to i8*
  %38 = bitcast [8 x float]* %18 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %38, i8 -1, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 76, i8* nonnull %37) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 -1, i64 76, i1 false)
  %39 = bitcast [19 x float]* %20 to i8*
  call void @llvm.lifetime.start.p0i8(i64 76, i8* nonnull %39) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %39, i8 -1, i64 76, i1 false)
  %40 = bitcast [19 x float]* %21 to i8*
  call void @llvm.lifetime.start.p0i8(i64 76, i8* nonnull %40) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %40, i8 -1, i64 76, i1 false)
  %41 = bitcast [32 x float]* %22 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %41) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %41, i8 -1, i64 128, i1 false)
  %42 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 28
  %43 = load i32, i32* %42, align 4
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %47

45:                                               ; preds = %10
  %46 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 7
  store i32 240, i32* %46, align 4
  store i32 1, i32* %42, align 4
  br label %47

47:                                               ; preds = %10, %45
  %48 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 22
  %49 = load i32, i32* %48, align 4
  %50 = icmp sgt i32 %49, 9
  %51 = add nsw i32 %49, 1
  %52 = select i1 %50, i32 10, i32 %51
  %53 = sitofp i32 %52 to float
  %54 = fdiv float 1.000000e+00, %53
  %55 = icmp sgt i32 %49, 24
  %56 = select i1 %55, i32 25, i32 %51
  %57 = sitofp i32 %56 to float
  %58 = fdiv float 1.000000e+00, %57
  %59 = icmp sgt i32 %49, 99
  %60 = select i1 %59, i32 100, i32 %51
  %61 = sitofp i32 %60 to float
  %62 = fdiv float 1.000000e+00, %61
  %63 = icmp slt i32 %49, 2
  %64 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 2
  %65 = load i32, i32* %64, align 4
  switch i32 %65, label %74 [
    i32 48000, label %66
    i32 16000, label %69
  ]

66:                                               ; preds = %47
  %67 = sdiv i32 %3, 2
  %68 = sdiv i32 %4, 2
  br label %74

69:                                               ; preds = %47
  %70 = mul nsw i32 %3, 3
  %71 = sdiv i32 %70, 2
  %72 = mul nsw i32 %4, 3
  %73 = sdiv i32 %72, 2
  br label %74

74:                                               ; preds = %47, %69, %66
  %75 = phi i32 [ %68, %66 ], [ %73, %69 ], [ %4, %47 ]
  %76 = phi i32 [ %67, %66 ], [ %71, %69 ], [ %3, %47 ]
  %77 = getelementptr inbounds %struct.OpusCustomMode, %struct.OpusCustomMode* %1, i64 0, i32 13, i32 2, i64 0
  %78 = load %struct.kiss_fft_state*, %struct.kiss_fft_state** %77, align 8
  %79 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 6
  %80 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 7
  %81 = load i32, i32* %80, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 6, i64 %82
  %84 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 30, i64 0
  %85 = sub nsw i32 720, %81
  %86 = icmp slt i32 %76, %85
  %87 = select i1 %86, i32 %76, i32 %85
  %88 = tail call fastcc float @downmix_and_resample(void (i8*, float*, i32, i32, i32, i32, i32)* %9, i8* %2, float* %83, float* %84, i32 %87, i32 %75, i32 %5, i32 %6, i32 %7, i32 %65)
  %89 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 27
  %90 = load float, float* %89, align 4
  %91 = fadd float %88, %90
  store float %91, float* %89, align 4
  %92 = load i32, i32* %80, align 4
  %93 = add nsw i32 %92, %76
  %94 = icmp slt i32 %93, 720
  br i1 %94, label %95, label %96

95:                                               ; preds = %74
  store i32 %93, i32* %80, align 4
  br label %1988

96:                                               ; preds = %74
  %97 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 24
  %98 = load i32, i32* %97, align 4
  %99 = sext i32 %98 to i64
  %100 = icmp sgt i32 %98, 98
  %101 = select i1 %100, i32 -99, i32 1
  %102 = add nsw i32 %101, %98
  store i32 %102, i32* %97, align 4
  %103 = getelementptr inbounds [720 x float], [720 x float]* %79, i64 0, i64 0
  %104 = tail call i32 @is_digital_silence(float* %103, i32 720, i32 1, i32 %8) #7
  %105 = alloca [3840 x i8], align 16
  %106 = getelementptr inbounds [3840 x i8], [3840 x i8]* %105, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %106, i8 -86, i64 3840, i1 false)
  %107 = bitcast [3840 x i8]* %105 to %struct.kiss_fft_cpx*
  %108 = alloca [3840 x i8], align 16
  %109 = getelementptr inbounds [3840 x i8], [3840 x i8]* %108, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %109, i8 -86, i64 3840, i1 false)
  %110 = alloca [960 x i8], align 16
  %111 = getelementptr inbounds [960 x i8], [960 x i8]* %110, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %111, i8 -86, i64 960, i1 false)
  %112 = alloca [960 x i8], align 16
  %113 = getelementptr inbounds [960 x i8], [960 x i8]* %112, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %113, i8 -86, i64 960, i1 false)
  br label %114

114:                                              ; preds = %114, %96
  %115 = phi i64 [ 0, %96 ], [ %137, %114 ]
  %116 = getelementptr inbounds [240 x float], [240 x float]* @analysis_window, i64 0, i64 %115
  %117 = load float, float* %116, align 4
  %118 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 6, i64 %115
  %119 = load float, float* %118, align 4
  %120 = fmul float %117, %119
  %121 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %107, i64 %115, i32 0
  store float %120, float* %121, align 8
  %122 = add nuw nsw i64 %115, 240
  %123 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 6, i64 %122
  %124 = load float, float* %123, align 4
  %125 = fmul float %117, %124
  %126 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %107, i64 %115, i32 1
  store float %125, float* %126, align 4
  %127 = sub nuw nsw i64 479, %115
  %128 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 6, i64 %127
  %129 = load float, float* %128, align 4
  %130 = fmul float %117, %129
  %131 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %107, i64 %127, i32 0
  store float %130, float* %131, align 8
  %132 = sub nuw nsw i64 719, %115
  %133 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 6, i64 %132
  %134 = load float, float* %133, align 4
  %135 = fmul float %117, %134
  %136 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %107, i64 %127, i32 1
  store float %135, float* %136, align 4
  %137 = add nuw nsw i64 %115, 1
  %138 = icmp eq i64 %137, 240
  br i1 %138, label %139, label %114

139:                                              ; preds = %114
  %140 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %99
  %141 = bitcast [3840 x i8]* %108 to %struct.kiss_fft_cpx*
  %142 = bitcast [960 x i8]* %110 to float*
  %143 = bitcast [960 x i8]* %112 to float*
  %144 = bitcast [720 x float]* %79 to i8*
  %145 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 6, i64 480
  %146 = bitcast float* %145 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %144, i8* align 4 %146, i64 960, i1 false)
  %147 = load i32, i32* %80, align 4
  %148 = add i32 %76, -720
  %149 = add i32 %148, %147
  %150 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 6, i64 240
  %151 = add nsw i32 %75, 720
  %152 = sub i32 %151, %147
  %153 = load i32, i32* %64, align 4
  %154 = tail call fastcc float @downmix_and_resample(void (i8*, float*, i32, i32, i32, i32, i32)* %9, i8* %2, float* %150, float* %84, i32 %149, i32 %152, i32 %5, i32 %6, i32 %7, i32 %153)
  store float %154, float* %89, align 4
  %155 = add nsw i32 %149, 240
  store i32 %155, i32* %80, align 4
  %156 = icmp eq i32 %104, 0
  br i1 %156, label %167, label %157

157:                                              ; preds = %139
  %158 = load i32, i32* %97, align 4
  %159 = add nsw i32 %158, -2
  %160 = icmp slt i32 %159, 0
  %161 = add nsw i32 %158, 98
  %162 = select i1 %160, i32 %161, i32 %159
  %163 = bitcast %struct.AnalysisInfo* %140 to i8*
  %164 = sext i32 %162 to i64
  %165 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %164
  %166 = bitcast %struct.AnalysisInfo* %165 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %163, i8* align 4 %166, i64 64, i1 false)
  br label %1988

167:                                              ; preds = %139
  call void @opus_fft_c(%struct.kiss_fft_state* %78, %struct.kiss_fft_cpx* nonnull %107, %struct.kiss_fft_cpx* nonnull %141) #7
  %168 = bitcast [3840 x i8]* %108 to float*
  %169 = load float, float* %168, align 16
  %170 = fcmp uno float %169, 0.000000e+00
  br i1 %170, label %171, label %173

171:                                              ; preds = %167
  %172 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %140, i64 0, i32 0
  store i32 0, i32* %172, align 4
  br label %1988

173:                                              ; preds = %167, %273
  %174 = phi i64 [ %310, %273 ], [ 1, %167 ]
  %175 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %141, i64 %174, i32 0
  %176 = load float, float* %175, align 8
  %177 = sub nuw nsw i64 480, %174
  %178 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %141, i64 %177, i32 0
  %179 = load float, float* %178, align 8
  %180 = fadd float %176, %179
  %181 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %141, i64 %174, i32 1
  %182 = load float, float* %181, align 4
  %183 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %141, i64 %177, i32 1
  %184 = load float, float* %183, align 4
  %185 = fsub float %182, %184
  %186 = fadd float %182, %184
  %187 = fsub float %179, %176
  %188 = fmul float %180, %180
  %189 = fmul float %185, %185
  %190 = fadd float %188, %189
  %191 = fcmp olt float %190, 0x3C32725DE0000000
  br i1 %191, label %226, label %192

192:                                              ; preds = %173
  %193 = fcmp olt float %188, %189
  br i1 %193, label %194, label %209

194:                                              ; preds = %192
  %195 = fmul float %188, 0x3FE5B62420000000
  %196 = fadd float %195, %189
  %197 = fmul float %188, 0x3FB6012CA0000000
  %198 = fadd float %197, %189
  %199 = fmul float %196, %198
  %200 = fmul float %180, %185
  %201 = fmul float %188, 0x3FDB9F00A0000000
  %202 = fadd float %201, %189
  %203 = fmul float %200, %202
  %204 = fsub float -0.000000e+00, %203
  %205 = fdiv float %204, %199
  %206 = fcmp olt float %185, 0.000000e+00
  %207 = select i1 %206, float 0xBFF921FB60000000, float 0x3FF921FB60000000
  %208 = fadd float %207, %205
  br label %226

209:                                              ; preds = %192
  %210 = fmul float %189, 0x3FE5B62420000000
  %211 = fadd float %188, %210
  %212 = fmul float %189, 0x3FB6012CA0000000
  %213 = fadd float %188, %212
  %214 = fmul float %211, %213
  %215 = fmul float %180, %185
  %216 = fmul float %189, 0x3FDB9F00A0000000
  %217 = fadd float %188, %216
  %218 = fmul float %215, %217
  %219 = fdiv float %218, %214
  %220 = fcmp olt float %185, 0.000000e+00
  %221 = select i1 %220, float 0xBFF921FB60000000, float 0x3FF921FB60000000
  %222 = fadd float %221, %219
  %223 = fcmp olt float %215, 0.000000e+00
  %224 = select i1 %223, float 0xBFF921FB60000000, float 0x3FF921FB60000000
  %225 = fsub float %222, %224
  br label %226

226:                                              ; preds = %173, %194, %209
  %227 = phi float [ %208, %194 ], [ %225, %209 ], [ 0.000000e+00, %173 ]
  %228 = fmul float %227, 0x3FC45F3060000000
  %229 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 3, i64 %174
  %230 = load float, float* %229, align 4
  %231 = fsub float %228, %230
  %232 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 4, i64 %174
  %233 = load float, float* %232, align 4
  %234 = fsub float %231, %233
  %235 = fmul float %186, %186
  %236 = fmul float %187, %187
  %237 = fadd float %236, %235
  %238 = fcmp olt float %237, 0x3C32725DE0000000
  br i1 %238, label %273, label %239

239:                                              ; preds = %226
  %240 = fcmp olt float %235, %236
  br i1 %240, label %241, label %256

241:                                              ; preds = %239
  %242 = fmul float %235, 0x3FE5B62420000000
  %243 = fadd float %236, %242
  %244 = fmul float %235, 0x3FB6012CA0000000
  %245 = fadd float %236, %244
  %246 = fmul float %243, %245
  %247 = fmul float %187, %186
  %248 = fmul float %235, 0x3FDB9F00A0000000
  %249 = fadd float %236, %248
  %250 = fmul float %247, %249
  %251 = fsub float -0.000000e+00, %250
  %252 = fdiv float %251, %246
  %253 = fcmp olt float %187, 0.000000e+00
  %254 = select i1 %253, float 0xBFF921FB60000000, float 0x3FF921FB60000000
  %255 = fadd float %254, %252
  br label %273

256:                                              ; preds = %239
  %257 = fmul float %236, 0x3FE5B62420000000
  %258 = fadd float %257, %235
  %259 = fmul float %236, 0x3FB6012CA0000000
  %260 = fadd float %259, %235
  %261 = fmul float %258, %260
  %262 = fmul float %187, %186
  %263 = fmul float %236, 0x3FDB9F00A0000000
  %264 = fadd float %263, %235
  %265 = fmul float %262, %264
  %266 = fdiv float %265, %261
  %267 = fcmp olt float %187, 0.000000e+00
  %268 = select i1 %267, float 0xBFF921FB60000000, float 0x3FF921FB60000000
  %269 = fadd float %268, %266
  %270 = fcmp olt float %262, 0.000000e+00
  %271 = select i1 %270, float 0xBFF921FB60000000, float 0x3FF921FB60000000
  %272 = fsub float %269, %271
  br label %273

273:                                              ; preds = %226, %241, %256
  %274 = phi float [ %255, %241 ], [ %272, %256 ], [ 0.000000e+00, %226 ]
  %275 = fmul float %274, 0x3FC45F3060000000
  %276 = fsub float %275, %228
  %277 = fsub float %276, %231
  %278 = insertelement <4 x float> undef, float %234, i32 0
  %279 = call i32 @llvm.x86.sse.cvtss2si(<4 x float> %278) #7
  %280 = sitofp i32 %279 to float
  %281 = fsub float %234, %280
  %282 = call float @llvm.fabs.f32(float %281)
  %283 = getelementptr inbounds float, float* %143, i64 %174
  %284 = fmul float %281, %281
  %285 = fmul float %284, %284
  %286 = insertelement <4 x float> undef, float %277, i32 0
  %287 = call i32 @llvm.x86.sse.cvtss2si(<4 x float> %286) #7
  %288 = sitofp i32 %287 to float
  %289 = fsub float %277, %288
  %290 = call float @llvm.fabs.f32(float %289)
  %291 = fadd float %282, %290
  store float %291, float* %283, align 4
  %292 = fmul float %289, %289
  %293 = fmul float %292, %292
  %294 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 5, i64 %174
  %295 = load float, float* %294, align 4
  %296 = fadd float %295, %285
  %297 = fmul float %293, 2.000000e+00
  %298 = fadd float %296, %297
  %299 = fmul float %298, 2.500000e-01
  %300 = fmul float %299, 0x40EE70BA20000000
  %301 = fadd float %300, 1.000000e+00
  %302 = fdiv float 1.000000e+00, %301
  %303 = fadd float %302, 0xBF8EB851E0000000
  %304 = getelementptr inbounds float, float* %142, i64 %174
  store float %303, float* %304, align 4
  %305 = fmul float %293, 0x40EE70BA20000000
  %306 = fadd float %305, 1.000000e+00
  %307 = fdiv float 1.000000e+00, %306
  %308 = fadd float %307, 0xBF8EB851E0000000
  %309 = getelementptr inbounds [240 x float], [240 x float]* %17, i64 0, i64 %174
  store float %308, float* %309, align 4
  store float %275, float* %229, align 4
  store float %276, float* %232, align 4
  store float %293, float* %294, align 4
  %310 = add nuw nsw i64 %174, 1
  %311 = icmp eq i64 %310, 240
  br i1 %311, label %312, label %173

312:                                              ; preds = %273
  %313 = getelementptr inbounds [240 x float], [240 x float]* %17, i64 0, i64 2
  %314 = load float, float* %313, align 8
  %315 = insertelement <4 x float> undef, float %314, i32 3
  br label %316

316:                                              ; preds = %316, %312
  %317 = phi i64 [ 0, %312 ], [ %341, %316 ]
  %318 = phi <4 x float> [ %315, %312 ], [ %327, %316 ]
  %319 = or i64 %317, 2
  %320 = add nsw i64 %319, -1
  %321 = getelementptr inbounds [240 x float], [240 x float]* %17, i64 0, i64 %320
  %322 = bitcast float* %321 to <4 x float>*
  %323 = load <4 x float>, <4 x float>* %322, align 4
  %324 = or i64 %317, 3
  %325 = getelementptr inbounds [240 x float], [240 x float]* %17, i64 0, i64 %324
  %326 = bitcast float* %325 to <4 x float>*
  %327 = load <4 x float>, <4 x float>* %326, align 4
  %328 = shufflevector <4 x float> %318, <4 x float> %327, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %329 = fcmp ogt <4 x float> %323, %327
  %330 = select <4 x i1> %329, <4 x float> %323, <4 x float> %327
  %331 = fcmp olt <4 x float> %328, %330
  %332 = select <4 x i1> %331, <4 x float> %328, <4 x float> %330
  %333 = getelementptr inbounds float, float* %142, i64 %319
  %334 = bitcast float* %333 to <4 x float>*
  %335 = load <4 x float>, <4 x float>* %334, align 8
  %336 = fadd <4 x float> %332, <float 0xBFB99999A0000000, float 0xBFB99999A0000000, float 0xBFB99999A0000000, float 0xBFB99999A0000000>
  %337 = fcmp ogt <4 x float> %335, %336
  %338 = select <4 x i1> %337, <4 x float> %335, <4 x float> %336
  %339 = fmul <4 x float> %338, <float 0x3FECCCCCC0000000, float 0x3FECCCCCC0000000, float 0x3FECCCCCC0000000, float 0x3FECCCCCC0000000>
  %340 = bitcast float* %333 to <4 x float>*
  store <4 x float> %339, <4 x float>* %340, align 8
  %341 = add i64 %317, 4
  %342 = icmp eq i64 %341, 236
  br i1 %342, label %343, label %316, !llvm.loop !2

343:                                              ; preds = %316
  %344 = extractelement <4 x float> %327, i32 3
  %345 = getelementptr inbounds [240 x float], [240 x float]* %17, i64 0, i64 237
  %346 = load float, float* %345, align 4
  %347 = getelementptr inbounds [240 x float], [240 x float]* %17, i64 0, i64 239
  %348 = load float, float* %347, align 4
  %349 = fcmp ogt float %346, %348
  %350 = select i1 %349, float %346, float %348
  %351 = fcmp olt float %344, %350
  %352 = select i1 %351, float %344, float %350
  %353 = getelementptr inbounds [960 x i8], [960 x i8]* %110, i64 0, i64 952
  %354 = bitcast i8* %353 to float*
  %355 = load float, float* %354, align 8
  %356 = fadd float %352, 0xBFB99999A0000000
  %357 = fcmp ogt float %355, %356
  %358 = select i1 %357, float %355, float %356
  %359 = fmul float %358, 0x3FECCCCCC0000000
  store float %359, float* %354, align 8
  %360 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %99, i32 4
  store float 0.000000e+00, float* %360, align 4
  %361 = load i32, i32* %48, align 4
  %362 = icmp eq i32 %361, 0
  br i1 %362, label %363, label %384

363:                                              ; preds = %343
  %364 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 0
  %365 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 0
  %366 = bitcast float* %364 to <4 x float>*
  store <4 x float> <float 1.000000e+10, float 1.000000e+10, float 1.000000e+10, float 1.000000e+10>, <4 x float>* %366, align 4
  %367 = bitcast float* %365 to <4 x float>*
  store <4 x float> <float -1.000000e+10, float -1.000000e+10, float -1.000000e+10, float -1.000000e+10>, <4 x float>* %367, align 4
  %368 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 4
  %369 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 4
  %370 = bitcast float* %368 to <4 x float>*
  store <4 x float> <float 1.000000e+10, float 1.000000e+10, float 1.000000e+10, float 1.000000e+10>, <4 x float>* %370, align 4
  %371 = bitcast float* %369 to <4 x float>*
  store <4 x float> <float -1.000000e+10, float -1.000000e+10, float -1.000000e+10, float -1.000000e+10>, <4 x float>* %371, align 4
  %372 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 8
  %373 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 8
  %374 = bitcast float* %372 to <4 x float>*
  store <4 x float> <float 1.000000e+10, float 1.000000e+10, float 1.000000e+10, float 1.000000e+10>, <4 x float>* %374, align 4
  %375 = bitcast float* %373 to <4 x float>*
  store <4 x float> <float -1.000000e+10, float -1.000000e+10, float -1.000000e+10, float -1.000000e+10>, <4 x float>* %375, align 4
  %376 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 12
  %377 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 12
  %378 = bitcast float* %376 to <4 x float>*
  store <4 x float> <float 1.000000e+10, float 1.000000e+10, float 1.000000e+10, float 1.000000e+10>, <4 x float>* %378, align 4
  %379 = bitcast float* %377 to <4 x float>*
  store <4 x float> <float -1.000000e+10, float -1.000000e+10, float -1.000000e+10, float -1.000000e+10>, <4 x float>* %379, align 4
  %380 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 16
  store float 1.000000e+10, float* %380, align 4
  %381 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 16
  store float -1.000000e+10, float* %381, align 4
  %382 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 17
  store float 1.000000e+10, float* %382, align 4
  %383 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 17
  store float -1.000000e+10, float* %383, align 4
  br label %384

384:                                              ; preds = %363, %343
  %385 = fmul float %169, 2.000000e+00
  %386 = getelementptr inbounds [3840 x i8], [3840 x i8]* %108, i64 0, i64 4
  %387 = bitcast i8* %386 to float*
  %388 = load float, float* %387, align 4
  %389 = fmul float %388, 2.000000e+00
  %390 = fmul float %385, %385
  %391 = fmul float %389, %389
  %392 = fadd float %390, %391
  %393 = getelementptr inbounds [3840 x i8], [3840 x i8]* %108, i64 0, i64 8
  %394 = bitcast i8* %393 to float*
  %395 = load float, float* %394, align 8
  %396 = fmul float %395, %395
  %397 = getelementptr inbounds [3840 x i8], [3840 x i8]* %108, i64 0, i64 3832
  %398 = bitcast i8* %397 to float*
  %399 = load float, float* %398, align 8
  %400 = fmul float %399, %399
  %401 = fadd float %396, %400
  %402 = getelementptr inbounds [3840 x i8], [3840 x i8]* %108, i64 0, i64 12
  %403 = bitcast i8* %402 to float*
  %404 = load float, float* %403, align 4
  %405 = fmul float %404, %404
  %406 = fadd float %401, %405
  %407 = getelementptr inbounds [3840 x i8], [3840 x i8]* %108, i64 0, i64 3836
  %408 = bitcast i8* %407 to float*
  %409 = load float, float* %408, align 4
  %410 = fmul float %409, %409
  %411 = fadd float %406, %410
  %412 = fadd float %392, %411
  %413 = getelementptr inbounds [3840 x i8], [3840 x i8]* %108, i64 0, i64 16
  %414 = bitcast i8* %413 to float*
  %415 = load float, float* %414, align 16
  %416 = fmul float %415, %415
  %417 = getelementptr inbounds [3840 x i8], [3840 x i8]* %108, i64 0, i64 3824
  %418 = bitcast i8* %417 to float*
  %419 = load float, float* %418, align 16
  %420 = fmul float %419, %419
  %421 = fadd float %416, %420
  %422 = getelementptr inbounds [3840 x i8], [3840 x i8]* %108, i64 0, i64 20
  %423 = bitcast i8* %422 to float*
  %424 = load float, float* %423, align 4
  %425 = fmul float %424, %424
  %426 = fadd float %421, %425
  %427 = getelementptr inbounds [3840 x i8], [3840 x i8]* %108, i64 0, i64 3828
  %428 = bitcast i8* %427 to float*
  %429 = load float, float* %428, align 4
  %430 = fmul float %429, %429
  %431 = fadd float %426, %430
  %432 = fadd float %412, %431
  %433 = getelementptr inbounds [3840 x i8], [3840 x i8]* %108, i64 0, i64 24
  %434 = bitcast i8* %433 to float*
  %435 = load float, float* %434, align 8
  %436 = fmul float %435, %435
  %437 = getelementptr inbounds [3840 x i8], [3840 x i8]* %108, i64 0, i64 3816
  %438 = bitcast i8* %437 to float*
  %439 = load float, float* %438, align 8
  %440 = fmul float %439, %439
  %441 = fadd float %436, %440
  %442 = getelementptr inbounds [3840 x i8], [3840 x i8]* %108, i64 0, i64 28
  %443 = bitcast i8* %442 to float*
  %444 = load float, float* %443, align 4
  %445 = fmul float %444, %444
  %446 = fadd float %441, %445
  %447 = getelementptr inbounds [3840 x i8], [3840 x i8]* %108, i64 0, i64 3820
  %448 = bitcast i8* %447 to float*
  %449 = load float, float* %448, align 4
  %450 = fmul float %449, %449
  %451 = fadd float %446, %450
  %452 = fadd float %432, %451
  %453 = fadd float %452, 0x3DDB7CDFE0000000
  %454 = fpext float %453 to double
  %455 = call double @log(double %454) #7
  %456 = fptrunc double %455 to float
  %457 = fmul float %456, 0x3FE7154760000000
  %458 = getelementptr inbounds [19 x float], [19 x float]* %19, i64 0, i64 0
  store float %457, float* %458, align 16
  %459 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 21
  br label %460

460:                                              ; preds = %671, %384
  %461 = phi i32 [ 4, %384 ], [ %472, %671 ]
  %462 = phi i64 [ 0, %384 ], [ %470, %671 ]
  %463 = phi float [ 0.000000e+00, %384 ], [ %672, %671 ]
  %464 = phi float [ 0.000000e+00, %384 ], [ %680, %671 ]
  %465 = phi float [ 0.000000e+00, %384 ], [ %528, %671 ]
  %466 = phi float [ 0.000000e+00, %384 ], [ %685, %671 ]
  %467 = phi float [ 0.000000e+00, %384 ], [ %656, %671 ]
  %468 = phi float [ 0.000000e+00, %384 ], [ %532, %671 ]
  %469 = phi float [ 0.000000e+00, %384 ], [ %640, %671 ]
  %470 = add nuw nsw i64 %462, 1
  %471 = getelementptr inbounds [19 x i32], [19 x i32]* @tbands, i64 0, i64 %470
  %472 = load i32, i32* %471, align 4
  %473 = icmp slt i32 %461, %472
  br i1 %473, label %474, label %513

474:                                              ; preds = %460
  %475 = sext i32 %461 to i64
  %476 = sext i32 %472 to i64
  br label %477

477:                                              ; preds = %474, %477
  %478 = phi i64 [ %475, %474 ], [ %511, %477 ]
  %479 = phi float [ 0.000000e+00, %474 ], [ %510, %477 ]
  %480 = phi float [ 0.000000e+00, %474 ], [ %504, %477 ]
  %481 = phi float [ 0.000000e+00, %474 ], [ %498, %477 ]
  %482 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %141, i64 %478, i32 0
  %483 = sub nsw i64 480, %478
  %484 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %141, i64 %483, i32 0
  %485 = load float, float* %484, align 8
  %486 = fmul float %485, %485
  %487 = bitcast float* %482 to <2 x float>*
  %488 = load <2 x float>, <2 x float>* %487, align 8
  %489 = fmul <2 x float> %488, %488
  %490 = extractelement <2 x float> %489, i32 0
  %491 = fadd float %490, %486
  %492 = extractelement <2 x float> %489, i32 1
  %493 = fadd float %491, %492
  %494 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %141, i64 %483, i32 1
  %495 = load float, float* %494, align 4
  %496 = fmul float %495, %495
  %497 = fadd float %493, %496
  %498 = fadd float %481, %497
  %499 = getelementptr inbounds float, float* %142, i64 %478
  %500 = load float, float* %499, align 4
  %501 = fcmp olt float %500, 0.000000e+00
  %502 = select i1 %501, float 0.000000e+00, float %500
  %503 = fmul float %497, %502
  %504 = fadd float %480, %503
  %505 = fmul float %497, 2.000000e+00
  %506 = getelementptr inbounds float, float* %143, i64 %478
  %507 = load float, float* %506, align 4
  %508 = fsub float 5.000000e-01, %507
  %509 = fmul float %505, %508
  %510 = fadd float %479, %509
  %511 = add nsw i64 %478, 1
  %512 = icmp slt i64 %511, %476
  br i1 %512, label %477, label %513

513:                                              ; preds = %477, %460
  %514 = phi float [ 0.000000e+00, %460 ], [ %498, %477 ]
  %515 = phi float [ 0.000000e+00, %460 ], [ %504, %477 ]
  %516 = phi float [ 0.000000e+00, %460 ], [ %510, %477 ]
  %517 = fcmp uge float %514, 1.000000e+09
  %518 = fcmp uno float %514, 0.000000e+00
  %519 = or i1 %517, %518
  br i1 %519, label %520, label %522

520:                                              ; preds = %513
  %521 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %140, i64 0, i32 0
  store i32 0, i32* %521, align 4
  br label %1988

522:                                              ; preds = %513
  %523 = load i32, i32* %459, align 4
  %524 = sext i32 %523 to i64
  %525 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 11, i64 %524, i64 %462
  store float %514, float* %525, align 4
  %526 = fadd float %514, 0x3CD203AFA0000000
  %527 = fdiv float %516, %526
  %528 = fadd float %465, %527
  %529 = fadd float %514, 0x3DDB7CDFE0000000
  %530 = fpext float %529 to double
  %531 = call float @sqrtf(float %529) #4
  %532 = fadd float %468, %531
  %533 = call double @log(double %530) #7
  %534 = fptrunc double %533 to float
  %535 = getelementptr inbounds [18 x float], [18 x float]* %12, i64 0, i64 %462
  store float %534, float* %535, align 4
  %536 = call double @log(double %530) #7
  %537 = fptrunc double %536 to float
  %538 = fmul float %537, 0x3FE7154760000000
  %539 = getelementptr inbounds [19 x float], [19 x float]* %19, i64 0, i64 %470
  store float %538, float* %539, align 4
  %540 = load i32, i32* %459, align 4
  %541 = sext i32 %540 to i64
  %542 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %541, i64 %462
  store float %534, float* %542, align 4
  %543 = load i32, i32* %48, align 4
  %544 = icmp eq i32 %543, 0
  br i1 %544, label %550, label %545

545:                                              ; preds = %522
  %546 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 %462
  %547 = load float, float* %546, align 4
  %548 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 %462
  %549 = load float, float* %548, align 4
  br label %553

550:                                              ; preds = %522
  %551 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 %462
  store float %534, float* %551, align 4
  %552 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 %462
  store float %534, float* %552, align 4
  br label %553

553:                                              ; preds = %545, %550
  %554 = phi float [ %547, %545 ], [ %534, %550 ]
  %555 = phi float [ %549, %545 ], [ %534, %550 ]
  %556 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 %462
  %557 = fpext float %554 to double
  %558 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 %462
  %559 = fpext float %555 to double
  %560 = fadd double %559, 7.500000e+00
  %561 = fcmp olt double %560, %557
  br i1 %561, label %562, label %570

562:                                              ; preds = %553
  %563 = fsub float %554, %534
  %564 = fsub float %534, %555
  %565 = fcmp ogt float %563, %564
  br i1 %565, label %566, label %568

566:                                              ; preds = %562
  %567 = fadd float %554, 0xBF847AE140000000
  store float %567, float* %556, align 4
  br label %570

568:                                              ; preds = %562
  %569 = fadd float %555, 0x3F847AE140000000
  store float %569, float* %558, align 4
  br label %570

570:                                              ; preds = %566, %568, %553
  %571 = phi float [ %567, %566 ], [ %554, %568 ], [ %554, %553 ]
  %572 = fcmp olt float %571, %534
  br i1 %572, label %573, label %578

573:                                              ; preds = %570
  store float %534, float* %556, align 4
  %574 = fadd float %534, -1.500000e+01
  %575 = load float, float* %558, align 4
  %576 = fcmp ogt float %574, %575
  %577 = select i1 %576, float %574, float %575
  store float %577, float* %558, align 4
  br label %585

578:                                              ; preds = %570
  %579 = load float, float* %558, align 4
  %580 = fcmp ogt float %579, %534
  br i1 %580, label %581, label %585

581:                                              ; preds = %578
  store float %534, float* %558, align 4
  %582 = fadd float %534, 1.500000e+01
  %583 = fcmp olt float %582, %571
  %584 = select i1 %583, float %582, float %571
  store float %584, float* %556, align 4
  br label %585

585:                                              ; preds = %578, %581, %573
  %586 = phi float [ %571, %578 ], [ %584, %581 ], [ %534, %573 ]
  %587 = phi float [ %579, %578 ], [ %534, %581 ], [ %577, %573 ]
  %588 = fsub float %534, %587
  %589 = fsub float %586, %587
  %590 = fadd float %589, 0x3EE4F8B580000000
  %591 = fdiv float %588, %590
  %592 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 11, i64 0, i64 %462
  %593 = load float, float* %592, align 4
  %594 = call float @sqrtf(float %593) #4
  %595 = fadd float %594, 0.000000e+00
  %596 = load float, float* %592, align 4
  %597 = fadd float %596, 0.000000e+00
  %598 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 11, i64 1, i64 %462
  %599 = load float, float* %598, align 4
  %600 = call float @sqrtf(float %599) #4
  %601 = fadd float %595, %600
  %602 = load float, float* %598, align 4
  %603 = fadd float %597, %602
  %604 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 11, i64 2, i64 %462
  %605 = load float, float* %604, align 4
  %606 = call float @sqrtf(float %605) #4
  %607 = fadd float %601, %606
  %608 = load float, float* %604, align 4
  %609 = fadd float %603, %608
  %610 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 11, i64 3, i64 %462
  %611 = load float, float* %610, align 4
  %612 = call float @sqrtf(float %611) #4
  %613 = fadd float %607, %612
  %614 = load float, float* %610, align 4
  %615 = fadd float %609, %614
  %616 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 11, i64 4, i64 %462
  %617 = load float, float* %616, align 4
  %618 = call float @sqrtf(float %617) #4
  %619 = fadd float %613, %618
  %620 = load float, float* %616, align 4
  %621 = fadd float %615, %620
  %622 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 11, i64 5, i64 %462
  %623 = load float, float* %622, align 4
  %624 = call float @sqrtf(float %623) #4
  %625 = fadd float %619, %624
  %626 = load float, float* %622, align 4
  %627 = fadd float %621, %626
  %628 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 11, i64 6, i64 %462
  %629 = load float, float* %628, align 4
  %630 = call float @sqrtf(float %629) #4
  %631 = fadd float %625, %630
  %632 = load float, float* %628, align 4
  %633 = fadd float %627, %632
  %634 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 11, i64 7, i64 %462
  %635 = load float, float* %634, align 4
  %636 = call float @sqrtf(float %635) #4
  %637 = fadd float %631, %636
  %638 = load float, float* %634, align 4
  %639 = fadd float %633, %638
  %640 = fadd float %469, %591
  %641 = fmul float %639, 8.000000e+00
  %642 = fpext float %641 to double
  %643 = fadd double %642, 1.000000e-15
  %644 = call double @sqrt(double %643) #7
  %645 = fptrunc double %644 to float
  %646 = fdiv float %637, %645
  %647 = fcmp ogt float %646, 0x3FEFAE1480000000
  br i1 %647, label %652, label %648

648:                                              ; preds = %585
  %649 = call double @sqrt(double %643) #7
  %650 = fptrunc double %649 to float
  %651 = fdiv float %637, %650
  br label %652

652:                                              ; preds = %585, %648
  %653 = phi float [ %651, %648 ], [ 0x3FEFAE1480000000, %585 ]
  %654 = fmul float %653, %653
  %655 = fmul float %654, %654
  %656 = fadd float %467, %655
  %657 = fdiv float %515, %526
  %658 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 8, i64 %462
  %659 = load float, float* %658, align 4
  %660 = fmul float %659, %655
  %661 = fcmp ogt float %657, %660
  %662 = select i1 %661, float %657, float %660
  %663 = getelementptr inbounds [18 x float], [18 x float]* %11, i64 0, i64 %462
  store float %662, float* %663, align 4
  %664 = fadd float %463, %662
  %665 = icmp ugt i64 %462, 8
  br i1 %665, label %666, label %671

666:                                              ; preds = %652
  %667 = add nsw i64 %462, -9
  %668 = getelementptr inbounds [18 x float], [18 x float]* %11, i64 0, i64 %667
  %669 = load float, float* %668, align 4
  %670 = fsub float %664, %669
  br label %671

671:                                              ; preds = %652, %666
  %672 = phi float [ %670, %666 ], [ %664, %652 ]
  %673 = trunc i64 %462 to i32
  %674 = add i32 %673, -18
  %675 = sitofp i32 %674 to float
  %676 = fmul float %675, 0x3F9EB851E0000000
  %677 = fadd float %676, 1.000000e+00
  %678 = fmul float %677, %672
  %679 = fcmp ogt float %464, %678
  %680 = select i1 %679, float %464, float %678
  %681 = trunc i64 %462 to i32
  %682 = add i32 %681, -8
  %683 = sitofp i32 %682 to float
  %684 = fmul float %662, %683
  %685 = fadd float %466, %684
  store float %662, float* %658, align 4
  %686 = icmp eq i64 %470, 18
  br i1 %686, label %687, label %460

687:                                              ; preds = %671
  %688 = getelementptr inbounds [19 x float], [19 x float]* %20, i64 0, i64 0
  store float %457, float* %688, align 16
  %689 = fadd float %457, -2.500000e+00
  %690 = getelementptr inbounds [19 x float], [19 x float]* %21, i64 0, i64 0
  store float %689, float* %690, align 16
  br label %691

691:                                              ; preds = %691, %687
  %692 = phi float [ %689, %687 ], [ %711, %691 ]
  %693 = phi float [ %457, %687 ], [ %706, %691 ]
  %694 = phi i32 [ 4, %687 ], [ %697, %691 ]
  %695 = phi i64 [ 1, %687 ], [ %713, %691 ]
  %696 = getelementptr inbounds [19 x i32], [19 x i32]* @tbands, i64 0, i64 %695
  %697 = load i32, i32* %696, align 4
  %698 = sub nsw i32 %697, %694
  %699 = sitofp i32 %698 to float
  %700 = fmul float %699, 2.000000e+00
  %701 = fmul float %700, 2.500000e-01
  %702 = fadd float %693, %701
  %703 = getelementptr inbounds [19 x float], [19 x float]* %19, i64 0, i64 %695
  %704 = load float, float* %703, align 4
  %705 = fcmp olt float %702, %704
  %706 = select i1 %705, float %702, float %704
  %707 = getelementptr inbounds [19 x float], [19 x float]* %20, i64 0, i64 %695
  store float %706, float* %707, align 4
  %708 = fsub float %692, %701
  %709 = fadd float %704, -2.500000e+00
  %710 = fcmp ogt float %708, %709
  %711 = select i1 %710, float %708, float %709
  %712 = getelementptr inbounds [19 x float], [19 x float]* %21, i64 0, i64 %695
  store float %711, float* %712, align 4
  %713 = add nuw nsw i64 %695, 1
  %714 = icmp eq i64 %713, 19
  br i1 %714, label %715, label %691

715:                                              ; preds = %691
  %716 = getelementptr inbounds [19 x float], [19 x float]* %20, i64 0, i64 17
  %717 = load float, float* %716, align 4
  %718 = getelementptr inbounds [19 x float], [19 x float]* %21, i64 0, i64 17
  %719 = load float, float* %718, align 4
  br label %720

720:                                              ; preds = %720, %715
  %721 = phi float [ %719, %715 ], [ %740, %720 ]
  %722 = phi float [ %717, %715 ], [ %735, %720 ]
  %723 = phi i32 [ 192, %715 ], [ %726, %720 ]
  %724 = phi i64 [ 16, %715 ], [ %741, %720 ]
  %725 = getelementptr inbounds [19 x i32], [19 x i32]* @tbands, i64 0, i64 %724
  %726 = load i32, i32* %725, align 4
  %727 = sub nsw i32 %723, %726
  %728 = sitofp i32 %727 to float
  %729 = fmul float %728, 2.000000e+00
  %730 = fmul float %729, 2.500000e-01
  %731 = fadd float %722, %730
  %732 = getelementptr inbounds [19 x float], [19 x float]* %20, i64 0, i64 %724
  %733 = load float, float* %732, align 4
  %734 = fcmp olt float %731, %733
  %735 = select i1 %734, float %731, float %733
  store float %735, float* %732, align 4
  %736 = fsub float %721, %730
  %737 = getelementptr inbounds [19 x float], [19 x float]* %21, i64 0, i64 %724
  %738 = load float, float* %737, align 4
  %739 = fcmp ogt float %736, %738
  %740 = select i1 %739, float %736, float %738
  store float %740, float* %737, align 4
  %741 = add nsw i64 %724, -1
  %742 = icmp eq i64 %724, 0
  br i1 %742, label %743, label %720

743:                                              ; preds = %720, %769
  %744 = phi float [ %771, %769 ], [ %457, %720 ]
  %745 = phi i64 [ %767, %769 ], [ 0, %720 ]
  %746 = getelementptr inbounds [19 x float], [19 x float]* %21, i64 0, i64 %745
  %747 = load float, float* %746, align 4
  %748 = fsub float %747, %744
  %749 = fcmp olt float %748, 0.000000e+00
  %750 = select i1 %749, float 0.000000e+00, float %748
  %751 = getelementptr inbounds [19 x float], [19 x float]* %20, i64 0, i64 %745
  %752 = load float, float* %751, align 4
  %753 = fadd float %752, 2.500000e+00
  %754 = fsub float %744, %753
  %755 = fcmp olt float %754, 0.000000e+00
  %756 = select i1 %755, float 0.000000e+00, float %754
  %757 = fadd float %750, %756
  %758 = fmul float %757, 6.400000e+01
  %759 = fpext float %758 to double
  %760 = fadd double %759, 5.000000e-01
  %761 = call double @llvm.floor.f64(double %760)
  %762 = fptosi double %761 to i32
  %763 = icmp slt i32 %762, 255
  %764 = select i1 %763, i32 %762, i32 255
  %765 = trunc i32 %764 to i8
  %766 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %99, i32 11, i64 %745
  store i8 %765, i8* %766, align 1
  %767 = add nuw nsw i64 %745, 1
  %768 = icmp eq i64 %767, 19
  br i1 %768, label %772, label %769

769:                                              ; preds = %743
  %770 = getelementptr inbounds [19 x float], [19 x float]* %19, i64 0, i64 %767
  %771 = load float, float* %770, align 4
  br label %743

772:                                              ; preds = %743, %906
  %773 = phi i64 [ %908, %906 ], [ 0, %743 ]
  %774 = phi float [ %907, %906 ], [ 0.000000e+00, %743 ]
  %775 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %773, i64 0
  %776 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %773, i64 5
  %777 = load float, float* %776, align 4
  %778 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %773, i64 6
  %779 = load float, float* %778, align 4
  %780 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %773, i64 7
  %781 = load float, float* %780, align 4
  %782 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %773, i64 8
  %783 = load float, float* %782, align 4
  %784 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %773, i64 9
  %785 = load float, float* %784, align 4
  %786 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %773, i64 10
  %787 = load float, float* %786, align 4
  %788 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %773, i64 11
  %789 = load float, float* %788, align 4
  %790 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %773, i64 12
  %791 = load float, float* %790, align 4
  %792 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %773, i64 13
  %793 = load float, float* %792, align 4
  %794 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %773, i64 14
  %795 = bitcast float* %794 to <2 x float>*
  %796 = load <2 x float>, <2 x float>* %795, align 4
  %797 = load float, float* %775, align 4
  %798 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %773, i64 1
  %799 = load float, float* %798, align 4
  %800 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %773, i64 2
  %801 = load float, float* %800, align 4
  %802 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %773, i64 3
  %803 = load float, float* %802, align 4
  %804 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %773, i64 4
  %805 = load float, float* %804, align 4
  %806 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %773, i64 16
  %807 = bitcast float* %806 to <2 x float>*
  %808 = load <2 x float>, <2 x float>* %807, align 4
  br label %809

809:                                              ; preds = %809, %772
  %810 = phi i64 [ 0, %772 ], [ %904, %809 ]
  %811 = phi float [ 0x430C6BF520000000, %772 ], [ %903, %809 ]
  %812 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %810, i64 0
  %813 = load float, float* %812, align 4
  %814 = fsub float %797, %813
  %815 = fmul float %814, %814
  %816 = fadd float %815, 0.000000e+00
  %817 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %810, i64 1
  %818 = load float, float* %817, align 4
  %819 = fsub float %799, %818
  %820 = fmul float %819, %819
  %821 = fadd float %816, %820
  %822 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %810, i64 2
  %823 = load float, float* %822, align 4
  %824 = fsub float %801, %823
  %825 = fmul float %824, %824
  %826 = fadd float %821, %825
  %827 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %810, i64 3
  %828 = load float, float* %827, align 4
  %829 = fsub float %803, %828
  %830 = fmul float %829, %829
  %831 = fadd float %826, %830
  %832 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %810, i64 4
  %833 = load float, float* %832, align 4
  %834 = fsub float %805, %833
  %835 = fmul float %834, %834
  %836 = fadd float %831, %835
  %837 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %810, i64 5
  %838 = load float, float* %837, align 4
  %839 = fsub float %777, %838
  %840 = fmul float %839, %839
  %841 = fadd float %836, %840
  %842 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %810, i64 6
  %843 = load float, float* %842, align 4
  %844 = fsub float %779, %843
  %845 = fmul float %844, %844
  %846 = fadd float %841, %845
  %847 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %810, i64 7
  %848 = load float, float* %847, align 4
  %849 = fsub float %781, %848
  %850 = fmul float %849, %849
  %851 = fadd float %846, %850
  %852 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %810, i64 8
  %853 = load float, float* %852, align 4
  %854 = fsub float %783, %853
  %855 = fmul float %854, %854
  %856 = fadd float %851, %855
  %857 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %810, i64 9
  %858 = load float, float* %857, align 4
  %859 = fsub float %785, %858
  %860 = fmul float %859, %859
  %861 = fadd float %856, %860
  %862 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %810, i64 10
  %863 = load float, float* %862, align 4
  %864 = fsub float %787, %863
  %865 = fmul float %864, %864
  %866 = fadd float %861, %865
  %867 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %810, i64 11
  %868 = load float, float* %867, align 4
  %869 = fsub float %789, %868
  %870 = fmul float %869, %869
  %871 = fadd float %866, %870
  %872 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %810, i64 12
  %873 = load float, float* %872, align 4
  %874 = fsub float %791, %873
  %875 = fmul float %874, %874
  %876 = fadd float %871, %875
  %877 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %810, i64 13
  %878 = load float, float* %877, align 4
  %879 = fsub float %793, %878
  %880 = fmul float %879, %879
  %881 = fadd float %876, %880
  %882 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %810, i64 14
  %883 = bitcast float* %882 to <2 x float>*
  %884 = load <2 x float>, <2 x float>* %883, align 4
  %885 = fsub <2 x float> %796, %884
  %886 = fmul <2 x float> %885, %885
  %887 = extractelement <2 x float> %886, i32 0
  %888 = fadd float %881, %887
  %889 = extractelement <2 x float> %886, i32 1
  %890 = fadd float %888, %889
  %891 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 12, i64 %810, i64 16
  %892 = bitcast float* %891 to <2 x float>*
  %893 = load <2 x float>, <2 x float>* %892, align 4
  %894 = fsub <2 x float> %808, %893
  %895 = fmul <2 x float> %894, %894
  %896 = extractelement <2 x float> %895, i32 0
  %897 = fadd float %890, %896
  %898 = extractelement <2 x float> %895, i32 1
  %899 = fadd float %897, %898
  %900 = icmp eq i64 %810, %773
  %901 = fcmp olt float %811, %899
  %902 = or i1 %900, %901
  %903 = select i1 %902, float %811, float %899
  %904 = add nuw nsw i64 %810, 1
  %905 = icmp eq i64 %904, 8
  br i1 %905, label %906, label %809

906:                                              ; preds = %809
  %907 = fadd float %774, %903
  %908 = add nuw nsw i64 %773, 1
  %909 = icmp eq i64 %908, 8
  br i1 %909, label %910, label %772

910:                                              ; preds = %906
  %911 = fmul float %907, 1.250000e-01
  %912 = fdiv float %911, 1.800000e+01
  %913 = call float @sqrtf(float %912) #4
  %914 = icmp sgt i32 %8, 8
  %915 = select i1 %914, i32 %8, i32 8
  %916 = add nsw i32 %915, -8
  %917 = shl i32 1, %916
  %918 = sitofp i32 %917 to float
  %919 = fdiv float 0x3F42AD81A0000000, %918
  %920 = fmul float %919, %919
  %921 = fsub float 1.000000e+00, %62
  %922 = select i1 %63, float 0.000000e+00, float %921
  %923 = fmul float %920, 3.000000e+00
  %924 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 10
  %925 = load i32, i32* %924, align 4
  %926 = sext i32 %925 to i64
  br label %927

927:                                              ; preds = %992, %910
  %928 = phi i32 [ 4, %910 ], [ %937, %992 ]
  %929 = phi i64 [ 0, %910 ], [ %935, %992 ]
  %930 = phi float [ 0.000000e+00, %910 ], [ %972, %992 ]
  %931 = phi float [ 0.000000e+00, %910 ], [ %971, %992 ]
  %932 = phi float [ 0.000000e+00, %910 ], [ %967, %992 ]
  %933 = phi i32 [ 0, %910 ], [ %993, %992 ]
  %934 = phi float [ 0.000000e+00, %910 ], [ %1002, %992 ]
  %935 = add nuw nsw i64 %929, 1
  %936 = getelementptr inbounds [19 x i32], [19 x i32]* @tbands, i64 0, i64 %935
  %937 = load i32, i32* %936, align 4
  %938 = icmp sgt i32 %937, %928
  br i1 %938, label %939, label %964

939:                                              ; preds = %927
  %940 = sext i32 %928 to i64
  %941 = sext i32 %937 to i64
  br label %942

942:                                              ; preds = %942, %939
  %943 = phi i64 [ %940, %939 ], [ %962, %942 ]
  %944 = phi float [ 0.000000e+00, %939 ], [ %961, %942 ]
  %945 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %141, i64 %943, i32 0
  %946 = sub nsw i64 480, %943
  %947 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %141, i64 %946, i32 0
  %948 = load float, float* %947, align 8
  %949 = fmul float %948, %948
  %950 = bitcast float* %945 to <2 x float>*
  %951 = load <2 x float>, <2 x float>* %950, align 8
  %952 = fmul <2 x float> %951, %951
  %953 = extractelement <2 x float> %952, i32 0
  %954 = fadd float %953, %949
  %955 = extractelement <2 x float> %952, i32 1
  %956 = fadd float %954, %955
  %957 = getelementptr inbounds %struct.kiss_fft_cpx, %struct.kiss_fft_cpx* %141, i64 %946, i32 1
  %958 = load float, float* %957, align 4
  %959 = fmul float %958, %958
  %960 = fadd float %956, %959
  %961 = fadd float %944, %960
  %962 = add nsw i64 %943, 1
  %963 = icmp eq i64 %962, %941
  br i1 %963, label %964, label %942

964:                                              ; preds = %942, %927
  %965 = phi float [ 0.000000e+00, %927 ], [ %961, %942 ]
  %966 = fcmp ogt float %932, %965
  %967 = select i1 %966, float %932, float %965
  %968 = icmp ult i64 %929, 11
  %969 = fadd float %931, %965
  %970 = fadd float %930, %965
  %971 = select i1 %968, float %969, float %931
  %972 = select i1 %968, float %930, float %970
  %973 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 15, i64 %929
  %974 = load float, float* %973, align 4
  %975 = fmul float %922, %974
  %976 = fcmp ogt float %975, %965
  %977 = select i1 %976, float %975, float %965
  store float %977, float* %973, align 4
  %978 = fmul float %965, 1.000000e+09
  %979 = fcmp ogt float %978, %967
  br i1 %979, label %980, label %992

980:                                              ; preds = %964
  %981 = fcmp ogt float %965, %977
  %982 = select i1 %981, float %965, float %977
  %983 = sub nsw i32 %937, %928
  %984 = sitofp i32 %983 to float
  %985 = fmul float %923, %984
  %986 = fcmp ogt float %982, %985
  %987 = fmul float %920, %984
  %988 = fcmp ogt float %965, %987
  %989 = or i1 %988, %986
  %990 = trunc i64 %935 to i32
  %991 = select i1 %989, i32 %990, i32 %933
  br label %992

992:                                              ; preds = %980, %964
  %993 = phi i32 [ %933, %964 ], [ %991, %980 ]
  %994 = icmp slt i64 %929, %926
  %995 = select i1 %994, float 0x3F847AE140000000, float 0x3FA99999A0000000
  %996 = fmul float %934, %995
  %997 = fcmp olt float %965, %996
  %998 = zext i1 %997 to i32
  %999 = getelementptr inbounds [19 x i32], [19 x i32]* %16, i64 0, i64 %929
  store i32 %998, i32* %999, align 4
  %1000 = fmul float %934, 0x3FA99999A0000000
  %1001 = fcmp ogt float %1000, %965
  %1002 = select i1 %1001, float %1000, float %965
  %1003 = icmp eq i64 %935, 18
  br i1 %1003, label %1004, label %927

1004:                                             ; preds = %992
  %1005 = load i32, i32* %64, align 4
  %1006 = icmp eq i32 %1005, 48000
  br i1 %1006, label %1007, label %1035

1007:                                             ; preds = %1004
  %1008 = fmul float %91, 0x3F32345680000000
  %1009 = icmp eq i32 %925, 20
  %1010 = select i1 %1009, float 1.000000e+01, float 3.000000e+01
  %1011 = fadd float %1008, %972
  %1012 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 15, i64 18
  %1013 = load float, float* %1012, align 4
  %1014 = fmul float %922, %1013
  %1015 = fcmp ogt float %1014, %1008
  %1016 = select i1 %1015, float %1014, float %1008
  store float %1016, float* %1012, align 4
  %1017 = fcmp ogt float %1008, %1016
  %1018 = select i1 %1017, float %1008, float %1016
  %1019 = fmul float %1010, 3.000000e+00
  %1020 = fmul float %920, %1019
  %1021 = fmul float %1020, 1.600000e+02
  %1022 = fcmp ogt float %1018, %1021
  br i1 %1022, label %1027, label %1023

1023:                                             ; preds = %1007
  %1024 = fmul float %920, %1010
  %1025 = fmul float %1024, 1.600000e+02
  %1026 = fcmp ogt float %1008, %1025
  br i1 %1026, label %1027, label %1028

1027:                                             ; preds = %1023, %1007
  br label %1028

1028:                                             ; preds = %1027, %1023
  %1029 = phi i32 [ 20, %1027 ], [ %993, %1023 ]
  %1030 = select i1 %1009, float 0x3F847AE140000000, float 0x3FA99999A0000000
  %1031 = fmul float %1002, %1030
  %1032 = fcmp olt float %1008, %1031
  %1033 = zext i1 %1032 to i32
  %1034 = getelementptr inbounds [19 x i32], [19 x i32]* %16, i64 0, i64 18
  store i32 %1033, i32* %1034, align 8
  br label %1035

1035:                                             ; preds = %1028, %1004
  %1036 = phi i32 [ %1029, %1028 ], [ %993, %1004 ]
  %1037 = phi float [ %1011, %1028 ], [ %972, %1004 ]
  %1038 = fcmp ogt float %1037, %971
  %1039 = fdiv float %971, %1037
  %1040 = select i1 %1038, float %1039, float 1.000000e+00
  %1041 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %99, i32 10
  store float %1040, float* %1041, align 4
  %1042 = icmp eq i32 %1036, 20
  br i1 %1042, label %1043, label %1048

1043:                                             ; preds = %1035
  %1044 = getelementptr inbounds [19 x i32], [19 x i32]* %16, i64 0, i64 18
  %1045 = load i32, i32* %1044, align 8
  %1046 = icmp eq i32 %1045, 0
  %1047 = select i1 %1046, i32 20, i32 18
  br label %1057

1048:                                             ; preds = %1035
  %1049 = add i32 %1036, -1
  %1050 = icmp ult i32 %1049, 18
  br i1 %1050, label %1051, label %1057

1051:                                             ; preds = %1048
  %1052 = sext i32 %1049 to i64
  %1053 = getelementptr inbounds [19 x i32], [19 x i32]* %16, i64 0, i64 %1052
  %1054 = load i32, i32* %1053, align 4
  %1055 = icmp eq i32 %1054, 0
  %1056 = select i1 %1055, i32 %1036, i32 %1049
  br label %1057

1057:                                             ; preds = %1043, %1051, %1048
  %1058 = phi i32 [ %1036, %1048 ], [ %1056, %1051 ], [ %1047, %1043 ]
  %1059 = load i32, i32* %48, align 4
  %1060 = fpext float %532 to double
  %1061 = call double @log10(double %1060) #7
  %1062 = fptrunc double %1061 to float
  %1063 = fmul float %1062, 2.000000e+01
  %1064 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 19
  %1065 = load float, float* %1064, align 4
  %1066 = fadd float %1065, 0xBF689374C0000000
  %1067 = fcmp ogt float %1066, %1063
  %1068 = select i1 %1067, float %1066, float %1063
  store float %1068, float* %1064, align 4
  %1069 = fsub float 1.000000e+00, %58
  %1070 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 20
  %1071 = load float, float* %1070, align 4
  %1072 = fmul float %1069, %1071
  %1073 = fadd float %1068, -3.000000e+01
  %1074 = fcmp olt float %1063, %1073
  %1075 = fadd float %58, %1072
  %1076 = select i1 %1074, float %1075, float %1072
  store float %1076, float* %1070, align 4
  %1077 = getelementptr inbounds [18 x float], [18 x float]* %12, i64 0, i64 2
  %1078 = load float, float* %1077, align 8
  %1079 = getelementptr inbounds [18 x float], [18 x float]* %12, i64 0, i64 3
  %1080 = load float, float* %1079, align 4
  %1081 = getelementptr inbounds [18 x float], [18 x float]* %12, i64 0, i64 4
  %1082 = load float, float* %1081, align 16
  %1083 = getelementptr inbounds [18 x float], [18 x float]* %12, i64 0, i64 5
  %1084 = load float, float* %1083, align 4
  %1085 = getelementptr inbounds [18 x float], [18 x float]* %12, i64 0, i64 6
  %1086 = load float, float* %1085, align 8
  %1087 = getelementptr inbounds [18 x float], [18 x float]* %12, i64 0, i64 7
  %1088 = load float, float* %1087, align 4
  %1089 = getelementptr inbounds [18 x float], [18 x float]* %12, i64 0, i64 8
  %1090 = load float, float* %1089, align 16
  %1091 = getelementptr inbounds [18 x float], [18 x float]* %12, i64 0, i64 9
  %1092 = load float, float* %1091, align 4
  %1093 = getelementptr inbounds [18 x float], [18 x float]* %12, i64 0, i64 10
  %1094 = load float, float* %1093, align 8
  %1095 = getelementptr inbounds [18 x float], [18 x float]* %12, i64 0, i64 11
  %1096 = load float, float* %1095, align 4
  %1097 = getelementptr inbounds [18 x float], [18 x float]* %12, i64 0, i64 12
  %1098 = load float, float* %1097, align 16
  %1099 = getelementptr inbounds [18 x float], [18 x float]* %12, i64 0, i64 13
  %1100 = load float, float* %1099, align 4
  %1101 = getelementptr inbounds [18 x float], [18 x float]* %12, i64 0, i64 14
  %1102 = load float, float* %1101, align 8
  %1103 = getelementptr inbounds [18 x float], [18 x float]* %12, i64 0, i64 15
  %1104 = load float, float* %1103, align 4
  %1105 = getelementptr inbounds [18 x float], [18 x float]* %12, i64 0, i64 0
  %1106 = load float, float* %1105, align 16
  %1107 = getelementptr inbounds [18 x float], [18 x float]* %12, i64 0, i64 1
  %1108 = load float, float* %1107, align 4
  %1109 = icmp slt i32 %1059, 3
  %1110 = fmul float %1106, 2.500000e-01
  %1111 = fadd float %1110, 0.000000e+00
  %1112 = fmul float %1108, 2.500000e-01
  %1113 = fadd float %1111, %1112
  %1114 = fmul float %1078, 2.500000e-01
  %1115 = fadd float %1113, %1114
  %1116 = fmul float %1080, 2.500000e-01
  %1117 = fadd float %1115, %1116
  %1118 = fmul float %1082, 2.500000e-01
  %1119 = fadd float %1117, %1118
  %1120 = fmul float %1084, 2.500000e-01
  %1121 = fadd float %1119, %1120
  %1122 = fmul float %1086, 2.500000e-01
  %1123 = fadd float %1121, %1122
  %1124 = fmul float %1088, 2.500000e-01
  %1125 = fadd float %1123, %1124
  %1126 = fmul float %1090, 2.500000e-01
  %1127 = fadd float %1125, %1126
  %1128 = fmul float %1092, 2.500000e-01
  %1129 = fadd float %1127, %1128
  %1130 = fmul float %1094, 2.500000e-01
  %1131 = fadd float %1129, %1130
  %1132 = fmul float %1096, 2.500000e-01
  %1133 = fadd float %1131, %1132
  %1134 = fmul float %1098, 2.500000e-01
  %1135 = fadd float %1133, %1134
  %1136 = fmul float %1100, 2.500000e-01
  %1137 = fadd float %1135, %1136
  %1138 = fmul float %1102, 2.500000e-01
  %1139 = fadd float %1137, %1138
  %1140 = fmul float %1104, 2.500000e-01
  %1141 = fadd float %1139, %1140
  %1142 = getelementptr inbounds [8 x float], [8 x float]* %13, i64 0, i64 0
  store float %1141, float* %1142, align 16
  %1143 = fmul float %1106, 0x3FD684BA00000000
  %1144 = fadd float %1143, 0.000000e+00
  %1145 = fmul float %1108, 0x3FD5A732E0000000
  %1146 = fadd float %1144, %1145
  %1147 = fmul float %1078, 0x3FD3F4A120000000
  %1148 = fadd float %1146, %1147
  %1149 = fmul float %1080, 0x3FD17DBF40000000
  %1150 = fadd float %1148, %1149
  %1151 = fmul float %1082, 0x3FCCB599A0000000
  %1152 = fadd float %1150, %1151
  %1153 = fmul float %1084, 0x3FC5553F00000000
  %1154 = fadd float %1152, %1153
  %1155 = fmul float %1086, 0x3FBA460680000000
  %1156 = fadd float %1154, %1155
  %1157 = fmul float %1088, 0x3FA1BE2B40000000
  %1158 = fadd float %1156, %1157
  %1159 = fmul float %1090, 0xBFA1BE2B40000000
  %1160 = fadd float %1158, %1159
  %1161 = fmul float %1092, 0xBFBA460680000000
  %1162 = fadd float %1160, %1161
  %1163 = fmul float %1094, 0xBFC5553F00000000
  %1164 = fadd float %1162, %1163
  %1165 = fmul float %1096, 0xBFCCB599A0000000
  %1166 = fadd float %1164, %1165
  %1167 = fmul float %1098, 0xBFD17DBF40000000
  %1168 = fadd float %1166, %1167
  %1169 = fmul float %1100, 0xBFD3F4A120000000
  %1170 = fadd float %1168, %1169
  %1171 = fmul float %1102, 0xBFD5A732E0000000
  %1172 = fadd float %1170, %1171
  %1173 = fmul float %1104, 0xBFD684BA00000000
  %1174 = fadd float %1172, %1173
  %1175 = getelementptr inbounds [8 x float], [8 x float]* %13, i64 0, i64 1
  store float %1174, float* %1175, align 4
  %1176 = fmul float %1106, 0x3FD63150E0000000
  %1177 = fadd float %1176, 0.000000e+00
  %1178 = fmul float %1108, 0x3FD2D06360000000
  %1179 = fadd float %1177, %1178
  %1180 = fmul float %1078, 0x3FC9246C00000000
  %1181 = fadd float %1179, %1180
  %1182 = fmul float %1080, 0x3FB1A85880000000
  %1183 = fadd float %1181, %1182
  %1184 = fmul float %1082, 0xBFB1A85880000000
  %1185 = fadd float %1183, %1184
  %1186 = fmul float %1084, 0xBFC9246C00000000
  %1187 = fadd float %1185, %1186
  %1188 = fmul float %1086, 0xBFD2D06360000000
  %1189 = fadd float %1187, %1188
  %1190 = fmul float %1088, 0xBFD63150E0000000
  %1191 = fadd float %1189, %1190
  %1192 = fmul float %1090, 0xBFD63150E0000000
  %1193 = fadd float %1191, %1192
  %1194 = fmul float %1092, 0xBFD2D06360000000
  %1195 = fadd float %1193, %1194
  %1196 = fmul float %1094, 0xBFC9246C00000000
  %1197 = fadd float %1195, %1196
  %1198 = fmul float %1096, 0xBFB1A85880000000
  %1199 = fadd float %1197, %1198
  %1200 = fmul float %1098, 0x3FB1A85880000000
  %1201 = fadd float %1199, %1200
  %1202 = fmul float %1100, 0x3FC9246C00000000
  %1203 = fadd float %1201, %1202
  %1204 = fmul float %1102, 0x3FD2D06360000000
  %1205 = fadd float %1203, %1204
  %1206 = fmul float %1104, 0x3FD63150E0000000
  %1207 = fadd float %1205, %1206
  %1208 = getelementptr inbounds [8 x float], [8 x float]* %13, i64 0, i64 2
  store float %1207, float* %1208, align 8
  %1209 = fmul float %1106, 0x3FD5A732E0000000
  %1210 = fadd float %1209, 0.000000e+00
  %1211 = fmul float %1108, 0x3FCCB599A0000000
  %1212 = fadd float %1210, %1211
  %1213 = fmul float %1078, 0x3FA1BE2B40000000
  %1214 = fadd float %1212, %1213
  %1215 = fmul float %1080, 0xBFC5553F00000000
  %1216 = fadd float %1214, %1215
  %1217 = fmul float %1082, 0xBFD3F4A120000000
  %1218 = fadd float %1216, %1217
  %1219 = fmul float %1084, 0xBFD684BA00000000
  %1220 = fadd float %1218, %1219
  %1221 = fmul float %1086, 0xBFD17DBF40000000
  %1222 = fadd float %1220, %1221
  %1223 = fmul float %1088, 0xBFBA460680000000
  %1224 = fadd float %1222, %1223
  %1225 = fmul float %1090, 0x3FBA460680000000
  %1226 = fadd float %1224, %1225
  %1227 = fmul float %1092, 0x3FD17DBF40000000
  %1228 = fadd float %1226, %1227
  %1229 = fmul float %1094, 0x3FD684BA00000000
  %1230 = fadd float %1228, %1229
  %1231 = fmul float %1096, 0x3FD3F4A120000000
  %1232 = fadd float %1230, %1231
  %1233 = fmul float %1098, 0x3FC5553F00000000
  %1234 = fadd float %1232, %1233
  %1235 = fmul float %1100, 0xBFA1BE2B40000000
  %1236 = fadd float %1234, %1235
  %1237 = fmul float %1102, 0xBFCCB599A0000000
  %1238 = fadd float %1236, %1237
  %1239 = fmul float %1104, 0xBFD5A732E0000000
  %1240 = fadd float %1238, %1239
  %1241 = getelementptr inbounds [8 x float], [8 x float]* %13, i64 0, i64 3
  store float %1240, float* %1241, align 4
  %1242 = fmul float %1106, 0x3FD4E7AFA0000000
  %1243 = fadd float %1242, 0.000000e+00
  %1244 = fmul float %1108, 0x3FC1517A40000000
  %1245 = fadd float %1243, %1244
  %1246 = fmul float %1078, 0xBFC1517A40000000
  %1247 = fadd float %1245, %1246
  %1248 = fmul float %1080, 0xBFD4E7AFA0000000
  %1249 = fadd float %1247, %1248
  %1250 = fmul float %1082, 0xBFD4E7AFA0000000
  %1251 = fadd float %1249, %1250
  %1252 = fmul float %1084, 0xBFC1517A40000000
  %1253 = fadd float %1251, %1252
  %1254 = fmul float %1086, 0x3FC1517A40000000
  %1255 = fadd float %1253, %1254
  %1256 = fmul float %1088, 0x3FD4E7AFA0000000
  %1257 = fadd float %1255, %1256
  %1258 = fmul float %1090, 0x3FD4E7AFA0000000
  %1259 = fadd float %1257, %1258
  %1260 = fmul float %1092, 0x3FC1517A40000000
  %1261 = fadd float %1259, %1260
  %1262 = fmul float %1094, 0xBFC1517A40000000
  %1263 = fadd float %1261, %1262
  %1264 = fmul float %1096, 0xBFD4E7AFA0000000
  %1265 = fadd float %1263, %1264
  %1266 = fmul float %1098, 0xBFD4E7AFA0000000
  %1267 = fadd float %1265, %1266
  %1268 = fmul float %1100, 0xBFC1517A40000000
  %1269 = fadd float %1267, %1268
  %1270 = fmul float %1102, 0x3FC1517A40000000
  %1271 = fadd float %1269, %1270
  %1272 = fmul float %1104, 0x3FD4E7AFA0000000
  %1273 = fadd float %1271, %1272
  %1274 = getelementptr inbounds [8 x float], [8 x float]* %13, i64 0, i64 4
  store float %1273, float* %1274, align 16
  %1275 = fmul float %1106, 0x3FD3F4A120000000
  %1276 = fadd float %1275, 0.000000e+00
  %1277 = fmul float %1108, 0x3FA1BE2B40000000
  %1278 = fadd float %1276, %1277
  %1279 = fmul float %1078, 0xBFD17DBF40000000
  %1280 = fadd float %1278, %1279
  %1281 = fmul float %1080, 0xBFD5A732E0000000
  %1282 = fadd float %1280, %1281
  %1283 = fmul float %1082, 0xBFBA460680000000
  %1284 = fadd float %1282, %1283
  %1285 = fmul float %1084, 0x3FCCB599A0000000
  %1286 = fadd float %1284, %1285
  %1287 = fmul float %1086, 0x3FD684BA00000000
  %1288 = fadd float %1286, %1287
  %1289 = fmul float %1088, 0x3FC5553F00000000
  %1290 = fadd float %1288, %1289
  %1291 = fmul float %1090, 0xBFC5553F00000000
  %1292 = fadd float %1290, %1291
  %1293 = fmul float %1092, 0xBFD684BA00000000
  %1294 = fadd float %1292, %1293
  %1295 = fmul float %1094, 0xBFCCB599A0000000
  %1296 = fadd float %1294, %1295
  %1297 = fmul float %1096, 0x3FBA460680000000
  %1298 = fadd float %1296, %1297
  %1299 = fmul float %1098, 0x3FD5A732E0000000
  %1300 = fadd float %1298, %1299
  %1301 = fmul float %1100, 0x3FD17DBF40000000
  %1302 = fadd float %1300, %1301
  %1303 = fmul float %1102, 0xBFA1BE2B40000000
  %1304 = fadd float %1302, %1303
  %1305 = fmul float %1104, 0xBFD3F4A120000000
  %1306 = fadd float %1304, %1305
  %1307 = getelementptr inbounds [8 x float], [8 x float]* %13, i64 0, i64 5
  store float %1306, float* %1307, align 4
  %1308 = fmul float %1106, 0x3FD2D06360000000
  %1309 = fadd float %1308, 0.000000e+00
  %1310 = fmul float %1108, 0xBFB1A85880000000
  %1311 = fadd float %1309, %1310
  %1312 = fmul float %1078, 0xBFD63150E0000000
  %1313 = fadd float %1311, %1312
  %1314 = fmul float %1080, 0xBFC9246C00000000
  %1315 = fadd float %1313, %1314
  %1316 = fmul float %1082, 0x3FC9246C00000000
  %1317 = fadd float %1315, %1316
  %1318 = fmul float %1084, 0x3FD63150E0000000
  %1319 = fadd float %1317, %1318
  %1320 = fmul float %1086, 0x3FB1A85880000000
  %1321 = fadd float %1319, %1320
  %1322 = fmul float %1088, 0xBFD2D06360000000
  %1323 = fadd float %1321, %1322
  %1324 = fmul float %1090, 0xBFD2D06360000000
  %1325 = fadd float %1323, %1324
  %1326 = fmul float %1092, 0x3FB1A85880000000
  %1327 = fadd float %1325, %1326
  %1328 = fmul float %1094, 0x3FD63150E0000000
  %1329 = fadd float %1327, %1328
  %1330 = fmul float %1096, 0x3FC9246C00000000
  %1331 = fadd float %1329, %1330
  %1332 = fmul float %1098, 0xBFC9246C00000000
  %1333 = fadd float %1331, %1332
  %1334 = fmul float %1100, 0xBFD63150E0000000
  %1335 = fadd float %1333, %1334
  %1336 = fmul float %1102, 0xBFB1A85880000000
  %1337 = fadd float %1335, %1336
  %1338 = fmul float %1104, 0x3FD2D06360000000
  %1339 = fadd float %1337, %1338
  %1340 = getelementptr inbounds [8 x float], [8 x float]* %13, i64 0, i64 6
  store float %1339, float* %1340, align 8
  %1341 = fmul float %1106, 0x3FD17DBF40000000
  %1342 = fadd float %1341, 0.000000e+00
  %1343 = fmul float %1108, 0xBFC5553F00000000
  %1344 = fadd float %1342, %1343
  %1345 = fmul float %1078, 0xBFD5A732E0000000
  %1346 = fadd float %1344, %1345
  %1347 = fmul float %1080, 0x3FA1BE2B40000000
  %1348 = fadd float %1346, %1347
  %1349 = fmul float %1082, 0x3FD684BA00000000
  %1350 = fadd float %1348, %1349
  %1351 = fmul float %1084, 0x3FBA460680000000
  %1352 = fadd float %1350, %1351
  %1353 = fmul float %1086, 0xBFD3F4A120000000
  %1354 = fadd float %1352, %1353
  %1355 = fmul float %1088, 0xBFCCB599A0000000
  %1356 = fadd float %1354, %1355
  %1357 = fmul float %1090, 0x3FCCB599A0000000
  %1358 = fadd float %1356, %1357
  %1359 = fmul float %1092, 0x3FD3F4A120000000
  %1360 = fadd float %1358, %1359
  %1361 = fmul float %1094, 0xBFBA460680000000
  %1362 = fadd float %1360, %1361
  %1363 = fmul float %1096, 0xBFD684BA00000000
  %1364 = fadd float %1362, %1363
  %1365 = fmul float %1098, 0xBFA1BE2B40000000
  %1366 = fadd float %1364, %1365
  %1367 = fmul float %1100, 0x3FD5A732E0000000
  %1368 = fadd float %1366, %1367
  %1369 = fmul float %1102, 0x3FC5553F00000000
  %1370 = fadd float %1368, %1369
  %1371 = fmul float %1104, 0xBFD17DBF40000000
  %1372 = fadd float %1370, %1371
  %1373 = getelementptr inbounds [8 x float], [8 x float]* %13, i64 0, i64 7
  store float %1372, float* %1373, align 4
  %1374 = select i1 %1109, i32 20, i32 %1058
  %1375 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 7
  %1376 = load float, float* %1375, align 4
  %1377 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 7
  %1378 = load float, float* %1377, align 4
  %1379 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 8
  %1380 = load float, float* %1379, align 4
  %1381 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 8
  %1382 = load float, float* %1381, align 4
  %1383 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 0
  %1384 = load float, float* %1383, align 4
  %1385 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 0
  %1386 = load float, float* %1385, align 4
  %1387 = fadd float %1384, %1386
  %1388 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 1
  %1389 = load float, float* %1388, align 4
  %1390 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 1
  %1391 = load float, float* %1390, align 4
  %1392 = fadd float %1389, %1391
  %1393 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 2
  %1394 = load float, float* %1393, align 4
  %1395 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 2
  %1396 = load float, float* %1395, align 4
  %1397 = fadd float %1394, %1396
  %1398 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 3
  %1399 = load float, float* %1398, align 4
  %1400 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 3
  %1401 = load float, float* %1400, align 4
  %1402 = fadd float %1399, %1401
  %1403 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 4
  %1404 = load float, float* %1403, align 4
  %1405 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 4
  %1406 = load float, float* %1405, align 4
  %1407 = fadd float %1404, %1406
  %1408 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 5
  %1409 = load float, float* %1408, align 4
  %1410 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 5
  %1411 = load float, float* %1410, align 4
  %1412 = fadd float %1409, %1411
  %1413 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 6
  %1414 = load float, float* %1413, align 4
  %1415 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 6
  %1416 = load float, float* %1415, align 4
  %1417 = fadd float %1414, %1416
  %1418 = fadd float %1376, %1378
  %1419 = fadd float %1380, %1382
  %1420 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 9
  %1421 = load float, float* %1420, align 4
  %1422 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 9
  %1423 = load float, float* %1422, align 4
  %1424 = fadd float %1421, %1423
  %1425 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 10
  %1426 = load float, float* %1425, align 4
  %1427 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 10
  %1428 = load float, float* %1427, align 4
  %1429 = fadd float %1426, %1428
  %1430 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 11
  %1431 = load float, float* %1430, align 4
  %1432 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 11
  %1433 = load float, float* %1432, align 4
  %1434 = fadd float %1431, %1433
  %1435 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 12
  %1436 = load float, float* %1435, align 4
  %1437 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 12
  %1438 = load float, float* %1437, align 4
  %1439 = fadd float %1436, %1438
  %1440 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 13
  %1441 = load float, float* %1440, align 4
  %1442 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 13
  %1443 = load float, float* %1442, align 4
  %1444 = fadd float %1441, %1443
  %1445 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 14
  %1446 = load float, float* %1445, align 4
  %1447 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 14
  %1448 = load float, float* %1447, align 4
  %1449 = fadd float %1446, %1448
  %1450 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 14, i64 15
  %1451 = load float, float* %1450, align 4
  %1452 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 13, i64 15
  %1453 = load float, float* %1452, align 4
  %1454 = fadd float %1451, %1453
  %1455 = fmul float %1387, 1.250000e-01
  %1456 = fadd float %1455, 0.000000e+00
  %1457 = fmul float %1392, 1.250000e-01
  %1458 = fadd float %1456, %1457
  %1459 = fmul float %1397, 1.250000e-01
  %1460 = fadd float %1458, %1459
  %1461 = fmul float %1402, 1.250000e-01
  %1462 = fadd float %1460, %1461
  %1463 = fmul float %1407, 1.250000e-01
  %1464 = fadd float %1462, %1463
  %1465 = fmul float %1412, 1.250000e-01
  %1466 = fadd float %1464, %1465
  %1467 = fmul float %1417, 1.250000e-01
  %1468 = fadd float %1466, %1467
  %1469 = fmul float %1418, 1.250000e-01
  %1470 = fadd float %1468, %1469
  %1471 = fmul float %1419, 1.250000e-01
  %1472 = fadd float %1470, %1471
  %1473 = fmul float %1424, 1.250000e-01
  %1474 = fadd float %1472, %1473
  %1475 = fmul float %1429, 1.250000e-01
  %1476 = fadd float %1474, %1475
  %1477 = fmul float %1434, 1.250000e-01
  %1478 = fadd float %1476, %1477
  %1479 = fmul float %1439, 1.250000e-01
  %1480 = fadd float %1478, %1479
  %1481 = fmul float %1444, 1.250000e-01
  %1482 = fadd float %1480, %1481
  %1483 = fmul float %1449, 1.250000e-01
  %1484 = fadd float %1482, %1483
  %1485 = fmul float %1454, 1.250000e-01
  %1486 = fadd float %1484, %1485
  %1487 = getelementptr inbounds [8 x float], [8 x float]* %18, i64 0, i64 0
  store float %1486, float* %1487, align 16
  %1488 = fmul float %1387, 0x3FC684BA00000000
  %1489 = fadd float %1488, 0.000000e+00
  %1490 = fmul float %1392, 0x3FC5A732E0000000
  %1491 = fadd float %1489, %1490
  %1492 = fmul float %1397, 0x3FC3F4A120000000
  %1493 = fadd float %1491, %1492
  %1494 = fmul float %1402, 0x3FC17DBF40000000
  %1495 = fadd float %1493, %1494
  %1496 = fmul float %1407, 0x3FBCB599A0000000
  %1497 = fadd float %1495, %1496
  %1498 = fmul float %1412, 0x3FB5553F00000000
  %1499 = fadd float %1497, %1498
  %1500 = fmul float %1417, 0x3FAA460680000000
  %1501 = fadd float %1499, %1500
  %1502 = fmul float %1418, 0x3F91BE2B40000000
  %1503 = fadd float %1501, %1502
  %1504 = fmul float %1419, 0xBF91BE2B40000000
  %1505 = fadd float %1503, %1504
  %1506 = fmul float %1424, 0xBFAA460680000000
  %1507 = fadd float %1505, %1506
  %1508 = fmul float %1429, 0xBFB5553F00000000
  %1509 = fadd float %1507, %1508
  %1510 = fmul float %1434, 0xBFBCB599A0000000
  %1511 = fadd float %1509, %1510
  %1512 = fmul float %1439, 0xBFC17DBF40000000
  %1513 = fadd float %1511, %1512
  %1514 = fmul float %1444, 0xBFC3F4A120000000
  %1515 = fadd float %1513, %1514
  %1516 = fmul float %1449, 0xBFC5A732E0000000
  %1517 = fadd float %1515, %1516
  %1518 = fmul float %1454, 0xBFC684BA00000000
  %1519 = fadd float %1517, %1518
  %1520 = getelementptr inbounds [8 x float], [8 x float]* %18, i64 0, i64 1
  store float %1519, float* %1520, align 4
  %1521 = fmul float %1387, 0x3FC63150E0000000
  %1522 = fadd float %1521, 0.000000e+00
  %1523 = fmul float %1392, 0x3FC2D06360000000
  %1524 = fadd float %1522, %1523
  %1525 = fmul float %1397, 0x3FB9246C00000000
  %1526 = fadd float %1524, %1525
  %1527 = fmul float %1402, 0x3FA1A85880000000
  %1528 = fadd float %1526, %1527
  %1529 = fmul float %1407, 0xBFA1A85880000000
  %1530 = fadd float %1528, %1529
  %1531 = fmul float %1412, 0xBFB9246C00000000
  %1532 = fadd float %1530, %1531
  %1533 = fmul float %1417, 0xBFC2D06360000000
  %1534 = fadd float %1532, %1533
  %1535 = fmul float %1418, 0xBFC63150E0000000
  %1536 = fadd float %1534, %1535
  %1537 = fmul float %1419, 0xBFC63150E0000000
  %1538 = fadd float %1536, %1537
  %1539 = fmul float %1424, 0xBFC2D06360000000
  %1540 = fadd float %1538, %1539
  %1541 = fmul float %1429, 0xBFB9246C00000000
  %1542 = fadd float %1540, %1541
  %1543 = fmul float %1434, 0xBFA1A85880000000
  %1544 = fadd float %1542, %1543
  %1545 = fmul float %1439, 0x3FA1A85880000000
  %1546 = fadd float %1544, %1545
  %1547 = fmul float %1444, 0x3FB9246C00000000
  %1548 = fadd float %1546, %1547
  %1549 = fmul float %1449, 0x3FC2D06360000000
  %1550 = fadd float %1548, %1549
  %1551 = fmul float %1454, 0x3FC63150E0000000
  %1552 = fadd float %1550, %1551
  %1553 = getelementptr inbounds [8 x float], [8 x float]* %18, i64 0, i64 2
  store float %1552, float* %1553, align 8
  %1554 = fmul float %1387, 0x3FC5A732E0000000
  %1555 = fadd float %1554, 0.000000e+00
  %1556 = fmul float %1392, 0x3FBCB599A0000000
  %1557 = fadd float %1555, %1556
  %1558 = fmul float %1397, 0x3F91BE2B40000000
  %1559 = fadd float %1557, %1558
  %1560 = fmul float %1402, 0xBFB5553F00000000
  %1561 = fadd float %1559, %1560
  %1562 = fmul float %1407, 0xBFC3F4A120000000
  %1563 = fadd float %1561, %1562
  %1564 = fmul float %1412, 0xBFC684BA00000000
  %1565 = fadd float %1563, %1564
  %1566 = fmul float %1417, 0xBFC17DBF40000000
  %1567 = fadd float %1565, %1566
  %1568 = fmul float %1418, 0xBFAA460680000000
  %1569 = fadd float %1567, %1568
  %1570 = fmul float %1419, 0x3FAA460680000000
  %1571 = fadd float %1569, %1570
  %1572 = fmul float %1424, 0x3FC17DBF40000000
  %1573 = fadd float %1571, %1572
  %1574 = fmul float %1429, 0x3FC684BA00000000
  %1575 = fadd float %1573, %1574
  %1576 = fmul float %1434, 0x3FC3F4A120000000
  %1577 = fadd float %1575, %1576
  %1578 = fmul float %1439, 0x3FB5553F00000000
  %1579 = fadd float %1577, %1578
  %1580 = fmul float %1444, 0xBF91BE2B40000000
  %1581 = fadd float %1579, %1580
  %1582 = fmul float %1449, 0xBFBCB599A0000000
  %1583 = fadd float %1581, %1582
  %1584 = fmul float %1454, 0xBFC5A732E0000000
  %1585 = fadd float %1583, %1584
  %1586 = getelementptr inbounds [8 x float], [8 x float]* %18, i64 0, i64 3
  store float %1585, float* %1586, align 4
  %1587 = fmul float %1387, 0x3FC4E7AFA0000000
  %1588 = fadd float %1587, 0.000000e+00
  %1589 = fmul float %1392, 0x3FB1517A40000000
  %1590 = fadd float %1588, %1589
  %1591 = fmul float %1397, 0xBFB1517A40000000
  %1592 = fadd float %1590, %1591
  %1593 = fmul float %1402, 0xBFC4E7AFA0000000
  %1594 = fadd float %1592, %1593
  %1595 = fmul float %1407, 0xBFC4E7AFA0000000
  %1596 = fadd float %1594, %1595
  %1597 = fmul float %1412, 0xBFB1517A40000000
  %1598 = fadd float %1596, %1597
  %1599 = fmul float %1417, 0x3FB1517A40000000
  %1600 = fadd float %1598, %1599
  %1601 = fmul float %1418, 0x3FC4E7AFA0000000
  %1602 = fadd float %1600, %1601
  %1603 = fmul float %1419, 0x3FC4E7AFA0000000
  %1604 = fadd float %1602, %1603
  %1605 = fmul float %1424, 0x3FB1517A40000000
  %1606 = fadd float %1604, %1605
  %1607 = fmul float %1429, 0xBFB1517A40000000
  %1608 = fadd float %1606, %1607
  %1609 = fmul float %1434, 0xBFC4E7AFA0000000
  %1610 = fadd float %1608, %1609
  %1611 = fmul float %1439, 0xBFC4E7AFA0000000
  %1612 = fadd float %1610, %1611
  %1613 = fmul float %1444, 0xBFB1517A40000000
  %1614 = fadd float %1612, %1613
  %1615 = fmul float %1449, 0x3FB1517A40000000
  %1616 = fadd float %1614, %1615
  %1617 = fmul float %1454, 0x3FC4E7AFA0000000
  %1618 = fadd float %1616, %1617
  %1619 = getelementptr inbounds [8 x float], [8 x float]* %18, i64 0, i64 4
  store float %1618, float* %1619, align 16
  %1620 = fmul float %1387, 0x3FC3F4A120000000
  %1621 = fadd float %1620, 0.000000e+00
  %1622 = fmul float %1392, 0x3F91BE2B40000000
  %1623 = fadd float %1621, %1622
  %1624 = fmul float %1397, 0xBFC17DBF40000000
  %1625 = fadd float %1623, %1624
  %1626 = fmul float %1402, 0xBFC5A732E0000000
  %1627 = fadd float %1625, %1626
  %1628 = fmul float %1407, 0xBFAA460680000000
  %1629 = fadd float %1627, %1628
  %1630 = fmul float %1412, 0x3FBCB599A0000000
  %1631 = fadd float %1629, %1630
  %1632 = fmul float %1417, 0x3FC684BA00000000
  %1633 = fadd float %1631, %1632
  %1634 = fmul float %1418, 0x3FB5553F00000000
  %1635 = fadd float %1633, %1634
  %1636 = fmul float %1419, 0xBFB5553F00000000
  %1637 = fadd float %1635, %1636
  %1638 = fmul float %1424, 0xBFC684BA00000000
  %1639 = fadd float %1637, %1638
  %1640 = fmul float %1429, 0xBFBCB599A0000000
  %1641 = fadd float %1639, %1640
  %1642 = fmul float %1434, 0x3FAA460680000000
  %1643 = fadd float %1641, %1642
  %1644 = fmul float %1439, 0x3FC5A732E0000000
  %1645 = fadd float %1643, %1644
  %1646 = fmul float %1444, 0x3FC17DBF40000000
  %1647 = fadd float %1645, %1646
  %1648 = fmul float %1449, 0xBF91BE2B40000000
  %1649 = fadd float %1647, %1648
  %1650 = fmul float %1454, 0xBFC3F4A120000000
  %1651 = fadd float %1649, %1650
  %1652 = getelementptr inbounds [8 x float], [8 x float]* %18, i64 0, i64 5
  store float %1651, float* %1652, align 4
  %1653 = fmul float %1387, 0x3FC2D06360000000
  %1654 = fadd float %1653, 0.000000e+00
  %1655 = fmul float %1392, 0xBFA1A85880000000
  %1656 = fadd float %1654, %1655
  %1657 = fmul float %1397, 0xBFC63150E0000000
  %1658 = fadd float %1656, %1657
  %1659 = fmul float %1402, 0xBFB9246C00000000
  %1660 = fadd float %1658, %1659
  %1661 = fmul float %1407, 0x3FB9246C00000000
  %1662 = fadd float %1660, %1661
  %1663 = fmul float %1412, 0x3FC63150E0000000
  %1664 = fadd float %1662, %1663
  %1665 = fmul float %1417, 0x3FA1A85880000000
  %1666 = fadd float %1664, %1665
  %1667 = fmul float %1418, 0xBFC2D06360000000
  %1668 = fadd float %1666, %1667
  %1669 = fmul float %1419, 0xBFC2D06360000000
  %1670 = fadd float %1668, %1669
  %1671 = fmul float %1424, 0x3FA1A85880000000
  %1672 = fadd float %1670, %1671
  %1673 = fmul float %1429, 0x3FC63150E0000000
  %1674 = fadd float %1672, %1673
  %1675 = fmul float %1434, 0x3FB9246C00000000
  %1676 = fadd float %1674, %1675
  %1677 = fmul float %1439, 0xBFB9246C00000000
  %1678 = fadd float %1676, %1677
  %1679 = fmul float %1444, 0xBFC63150E0000000
  %1680 = fadd float %1678, %1679
  %1681 = fmul float %1449, 0xBFA1A85880000000
  %1682 = fadd float %1680, %1681
  %1683 = fmul float %1454, 0x3FC2D06360000000
  %1684 = fadd float %1682, %1683
  %1685 = getelementptr inbounds [8 x float], [8 x float]* %18, i64 0, i64 6
  store float %1684, float* %1685, align 8
  %1686 = fmul float %1387, 0x3FC17DBF40000000
  %1687 = fadd float %1686, 0.000000e+00
  %1688 = fmul float %1392, 0xBFB5553F00000000
  %1689 = fadd float %1687, %1688
  %1690 = fmul float %1397, 0xBFC5A732E0000000
  %1691 = fadd float %1689, %1690
  %1692 = fmul float %1402, 0x3F91BE2B40000000
  %1693 = fadd float %1691, %1692
  %1694 = fmul float %1407, 0x3FC684BA00000000
  %1695 = fadd float %1693, %1694
  %1696 = fmul float %1412, 0x3FAA460680000000
  %1697 = fadd float %1695, %1696
  %1698 = fmul float %1417, 0xBFC3F4A120000000
  %1699 = fadd float %1697, %1698
  %1700 = fmul float %1418, 0xBFBCB599A0000000
  %1701 = fadd float %1699, %1700
  %1702 = fmul float %1419, 0x3FBCB599A0000000
  %1703 = fadd float %1701, %1702
  %1704 = fmul float %1424, 0x3FC3F4A120000000
  %1705 = fadd float %1703, %1704
  %1706 = fmul float %1429, 0xBFAA460680000000
  %1707 = fadd float %1705, %1706
  %1708 = fmul float %1434, 0xBFC684BA00000000
  %1709 = fadd float %1707, %1708
  %1710 = fmul float %1439, 0xBF91BE2B40000000
  %1711 = fadd float %1709, %1710
  %1712 = fmul float %1444, 0x3FC5A732E0000000
  %1713 = fadd float %1711, %1712
  %1714 = fmul float %1449, 0x3FB5553F00000000
  %1715 = fadd float %1713, %1714
  %1716 = fmul float %1454, 0xBFC17DBF40000000
  %1717 = fadd float %1715, %1716
  %1718 = getelementptr inbounds [8 x float], [8 x float]* %18, i64 0, i64 7
  store float %1717, float* %1718, align 4
  %1719 = fdiv float %640, 1.800000e+01
  %1720 = load i32, i32* %48, align 4
  %1721 = icmp slt i32 %1720, 10
  %1722 = select i1 %1721, float 5.000000e-01, float %1719
  %1723 = fdiv float %528, 1.800000e+01
  %1724 = fsub float 1.000000e+00, %1723
  %1725 = fmul float %1724, %1722
  %1726 = fadd float %1723, %1725
  store float %1726, float* %360, align 4
  %1727 = fdiv float %680, 9.000000e+00
  %1728 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 9
  %1729 = load float, float* %1728, align 4
  %1730 = fmul float %1729, 0x3FE99999A0000000
  %1731 = fcmp ogt float %1727, %1730
  %1732 = select i1 %1731, float %1727, float %1730
  store float %1732, float* %1728, align 4
  %1733 = fmul float %685, 1.562500e-02
  %1734 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %99, i32 2
  store float %1733, float* %1734, align 4
  %1735 = load i32, i32* %459, align 4
  %1736 = add nsw i32 %1735, 1
  %1737 = srem i32 %1736, 8
  store i32 %1737, i32* %459, align 4
  %1738 = icmp slt i32 %1720, 9999
  %1739 = select i1 %1738, i32 %1720, i32 9999
  %1740 = add nsw i32 %1739, 1
  store i32 %1740, i32* %48, align 4
  %1741 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %99, i32 1
  store float %1732, float* %1741, align 4
  %1742 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 16, i64 24
  %1743 = load float, float* %1742, align 4
  %1744 = bitcast [8 x float]* %13 to <4 x float>*
  %1745 = load <4 x float>, <4 x float>* %1744, align 16
  %1746 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 16, i64 0
  %1747 = load float, float* %1746, align 4
  %1748 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 16, i64 16
  %1749 = load float, float* %1748, align 4
  %1750 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 16, i64 8
  %1751 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 17, i64 0
  %1752 = bitcast float* %1751 to <4 x float>*
  %1753 = load <4 x float>, <4 x float>* %1752, align 4
  %1754 = getelementptr inbounds [25 x float], [25 x float]* %14, i64 0, i64 0
  %1755 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 16, i64 25
  %1756 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 16, i64 26
  %1757 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 16, i64 27
  %1758 = bitcast float* %1742 to <4 x float>*
  %1759 = load <4 x float>, <4 x float>* %1758, align 4
  %1760 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 16, i64 1
  %1761 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 16, i64 17
  %1762 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 16, i64 2
  %1763 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 16, i64 18
  %1764 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 16, i64 3
  %1765 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 16, i64 19
  %1766 = bitcast float* %1746 to <4 x float>*
  %1767 = load <4 x float>, <4 x float>* %1766, align 4
  %1768 = bitcast float* %1748 to <4 x float>*
  %1769 = load <4 x float>, <4 x float>* %1768, align 4
  %1770 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 16, i64 9
  %1771 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 16, i64 10
  %1772 = insertelement <4 x float> %1759, float %1743, i32 0
  %1773 = fadd <4 x float> %1745, %1772
  %1774 = fmul <4 x float> %1773, <float 0x3FBF7C45C0000000, float 0x3FBF7C45C0000000, float 0x3FBF7C45C0000000, float 0x3FBF7C45C0000000>
  %1775 = insertelement <4 x float> %1767, float %1747, i32 0
  %1776 = insertelement <4 x float> %1769, float %1749, i32 0
  %1777 = fadd <4 x float> %1775, %1776
  %1778 = fmul <4 x float> %1777, <float 0x3FDF7C1BE0000000, float 0x3FDF7C1BE0000000, float 0x3FDF7C1BE0000000, float 0x3FDF7C1BE0000000>
  %1779 = fsub <4 x float> %1778, %1774
  %1780 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 16, i64 11
  %1781 = bitcast float* %1750 to <4 x float>*
  %1782 = load <4 x float>, <4 x float>* %1781, align 4
  %1783 = fmul <4 x float> %1782, <float 0x3FE64D4020000000, float 0x3FE64D4020000000, float 0x3FE64D4020000000, float 0x3FE64D4020000000>
  %1784 = fadd <4 x float> %1783, %1779
  %1785 = fmul <4 x float> %1753, <float 0x3FF6F559C0000000, float 0x3FF6F559C0000000, float 0x3FF6F559C0000000, float 0x3FF6F559C0000000>
  %1786 = fsub <4 x float> %1784, %1785
  %1787 = bitcast [25 x float]* %14 to <4 x float>*
  store <4 x float> %1786, <4 x float>* %1787, align 16
  %1788 = fdiv float %656, 1.800000e+01
  %1789 = fsub float 1.000000e+00, %54
  %1790 = insertelement <4 x float> undef, float %1789, i32 0
  %1791 = shufflevector <4 x float> %1790, <4 x float> undef, <4 x i32> zeroinitializer
  %1792 = fmul <4 x float> %1791, %1753
  %1793 = insertelement <4 x float> undef, float %54, i32 0
  %1794 = shufflevector <4 x float> %1793, <4 x float> undef, <4 x i32> zeroinitializer
  %1795 = fmul <4 x float> %1794, %1745
  %1796 = fadd <4 x float> %1792, %1795
  %1797 = bitcast float* %1751 to <4 x float>*
  store <4 x float> %1796, <4 x float>* %1797, align 4
  %1798 = bitcast [8 x float]* %13 to <2 x float>*
  %1799 = load <2 x float>, <2 x float>* %1798, align 16
  %1800 = extractelement <2 x float> %1799, i32 0
  %1801 = getelementptr inbounds [25 x float], [25 x float]* %14, i64 0, i64 4
  %1802 = shufflevector <2 x float> %1799, <2 x float> undef, <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>
  %1803 = shufflevector <4 x float> %1802, <4 x float> %1745, <4 x i32> <i32 0, i32 5, i32 6, i32 7>
  %1804 = fsub <4 x float> %1803, %1759
  %1805 = fmul <4 x float> %1804, <float 0x3FE43D1CC0000000, float 0x3FE43D1CC0000000, float 0x3FE43D1CC0000000, float 0x3FE43D1CC0000000>
  %1806 = fsub <4 x float> %1767, %1769
  %1807 = fmul <4 x float> %1806, <float 0x3FD43D1CC0000000, float 0x3FD43D1CC0000000, float 0x3FD43D1CC0000000, float 0x3FD43D1CC0000000>
  %1808 = fadd <4 x float> %1805, %1807
  %1809 = bitcast float* %1801 to <4 x float>*
  store <4 x float> %1808, <4 x float>* %1809, align 16
  %1810 = extractelement <4 x float> %1759, i32 0
  %1811 = fadd float %1800, %1810
  %1812 = fmul float %1811, 0x3FE11AC9A0000000
  %1813 = extractelement <4 x float> %1767, i32 0
  %1814 = extractelement <4 x float> %1769, i32 0
  %1815 = fadd float %1813, %1814
  %1816 = fmul float %1815, 0x3FD11AC9A0000000
  %1817 = fsub float %1812, %1816
  %1818 = load float, float* %1750, align 4
  %1819 = fmul float %1818, 0x3FE11AC9A0000000
  %1820 = fsub float %1817, %1819
  %1821 = getelementptr inbounds [25 x float], [25 x float]* %14, i64 0, i64 8
  store float %1820, float* %1821, align 16
  %1822 = load float, float* %1755, align 4
  %1823 = extractelement <2 x float> %1799, i32 1
  %1824 = fadd float %1823, %1822
  %1825 = fmul float %1824, 0x3FE11AC9A0000000
  %1826 = load float, float* %1760, align 4
  %1827 = load float, float* %1761, align 4
  %1828 = fadd float %1826, %1827
  %1829 = fmul float %1828, 0x3FD11AC9A0000000
  %1830 = fsub float %1825, %1829
  %1831 = load float, float* %1770, align 4
  %1832 = fmul float %1831, 0x3FE11AC9A0000000
  %1833 = fsub float %1830, %1832
  %1834 = getelementptr inbounds [25 x float], [25 x float]* %14, i64 0, i64 9
  store float %1833, float* %1834, align 4
  %1835 = load float, float* %26, align 8
  %1836 = load float, float* %1756, align 4
  %1837 = fadd float %1835, %1836
  %1838 = fmul float %1837, 0x3FE11AC9A0000000
  %1839 = load float, float* %1762, align 4
  %1840 = load float, float* %1763, align 4
  %1841 = fadd float %1839, %1840
  %1842 = fmul float %1841, 0x3FD11AC9A0000000
  %1843 = fsub float %1838, %1842
  %1844 = load float, float* %1771, align 4
  %1845 = fmul float %1844, 0x3FE11AC9A0000000
  %1846 = fsub float %1843, %1845
  %1847 = getelementptr inbounds [25 x float], [25 x float]* %14, i64 0, i64 10
  store float %1846, float* %1847, align 8
  %1848 = load i32, i32* %48, align 4
  %1849 = icmp sgt i32 %1848, 5
  br i1 %1849, label %1850, label %1883

1850:                                             ; preds = %1057
  %1851 = getelementptr inbounds [25 x float], [25 x float]* %14, i64 0, i64 2
  %1852 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 18, i64 0
  %1853 = bitcast [25 x float]* %14 to <2 x float>*
  %1854 = load <2 x float>, <2 x float>* %1853, align 16
  %1855 = load float, float* %1851, align 8
  %1856 = bitcast float* %1852 to <4 x float>*
  %1857 = load <4 x float>, <4 x float>* %1856, align 4
  %1858 = fmul <4 x float> %1791, %1857
  %1859 = extractelement <2 x float> %1854, i32 0
  %1860 = insertelement <4 x float> undef, float %1859, i32 0
  %1861 = extractelement <2 x float> %1854, i32 1
  %1862 = insertelement <4 x float> %1860, float %1861, i32 1
  %1863 = insertelement <4 x float> %1862, float %1855, i32 2
  %1864 = shufflevector <4 x float> %1863, <4 x float> %1786, <4 x i32> <i32 0, i32 1, i32 2, i32 7>
  %1865 = fmul <4 x float> %1794, %1864
  %1866 = fmul <4 x float> %1864, %1865
  %1867 = fadd <4 x float> %1858, %1866
  %1868 = bitcast float* %1852 to <4 x float>*
  store <4 x float> %1867, <4 x float>* %1868, align 4
  %1869 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 18, i64 4
  %1870 = bitcast float* %1869 to <4 x float>*
  %1871 = load <4 x float>, <4 x float>* %1870, align 4
  %1872 = fmul <4 x float> %1791, %1871
  %1873 = fmul <4 x float> %1794, %1808
  %1874 = fmul <4 x float> %1808, %1873
  %1875 = fadd <4 x float> %1872, %1874
  %1876 = bitcast float* %1869 to <4 x float>*
  store <4 x float> %1875, <4 x float>* %1876, align 4
  %1877 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 18, i64 8
  %1878 = load float, float* %1877, align 4
  %1879 = fmul float %1789, %1878
  %1880 = fmul float %54, %1820
  %1881 = fmul float %1820, %1880
  %1882 = fadd float %1879, %1881
  store float %1882, float* %1877, align 4
  br label %1883

1883:                                             ; preds = %1850, %1057
  %1884 = load float, float* %27, align 4
  %1885 = bitcast [8 x float]* %18 to <4 x float>*
  %1886 = load <4 x float>, <4 x float>* %1885, align 16
  %1887 = insertelement <4 x float> %1802, float %1823, i32 1
  %1888 = insertelement <4 x float> %1887, float %1835, i32 2
  %1889 = insertelement <4 x float> %1888, float %1884, i32 3
  %1890 = fsub <4 x float> %1889, %1886
  %1891 = bitcast [25 x float]* %14 to <4 x float>*
  store <4 x float> %1890, <4 x float>* %1891, align 16
  store float %1814, float* %1742, align 4
  store float %1818, float* %1748, align 4
  store float %1813, float* %1750, align 4
  store float %1800, float* %1746, align 4
  store float %1827, float* %1755, align 4
  store float %1831, float* %1761, align 4
  store float %1826, float* %1770, align 4
  store float %1823, float* %1760, align 4
  store float %1840, float* %1756, align 4
  store float %1844, float* %1763, align 4
  store float %1839, float* %1771, align 4
  store float %1835, float* %1762, align 4
  %1892 = bitcast float* %1765 to i32*
  %1893 = load i32, i32* %1892, align 4
  %1894 = bitcast float* %1757 to i32*
  store i32 %1893, i32* %1894, align 4
  %1895 = bitcast float* %1780 to i32*
  %1896 = load i32, i32* %1895, align 4
  store i32 %1896, i32* %1892, align 4
  %1897 = bitcast float* %1764 to i32*
  %1898 = load i32, i32* %1897, align 4
  store i32 %1898, i32* %1895, align 4
  store float %1884, float* %1764, align 4
  %1899 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 16, i64 20
  %1900 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 16, i64 28
  %1901 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 16, i64 12
  %1902 = bitcast float* %1899 to <4 x i32>*
  %1903 = load <4 x i32>, <4 x i32>* %1902, align 4
  %1904 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 16, i64 4
  %1905 = bitcast float* %1901 to <4 x i32>*
  %1906 = load <4 x i32>, <4 x i32>* %1905, align 4
  %1907 = bitcast float* %1904 to <4 x i32>*
  %1908 = load <4 x i32>, <4 x i32>* %1907, align 4
  %1909 = bitcast float* %1900 to <4 x i32>*
  store <4 x i32> %1903, <4 x i32>* %1909, align 4
  %1910 = bitcast float* %1899 to <4 x i32>*
  store <4 x i32> %1906, <4 x i32>* %1910, align 4
  %1911 = bitcast float* %1901 to <4 x i32>*
  store <4 x i32> %1908, <4 x i32>* %1911, align 4
  %1912 = bitcast float* %28 to <4 x i32>*
  %1913 = load <4 x i32>, <4 x i32>* %1912, align 16
  %1914 = bitcast float* %1904 to <4 x i32>*
  store <4 x i32> %1913, <4 x i32>* %1914, align 4
  %1915 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 18, i64 0
  %1916 = load float, float* %1915, align 4
  %1917 = call float @sqrtf(float %1916) #4
  %1918 = fadd float %1917, 0xC016BD62C0000000
  %1919 = getelementptr inbounds [25 x float], [25 x float]* %14, i64 0, i64 11
  store float %1918, float* %1919, align 4
  %1920 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 18, i64 1
  %1921 = load float, float* %1920, align 4
  %1922 = call float @sqrtf(float %1921) #4
  %1923 = fadd float %1922, 0xC00BCD63C0000000
  %1924 = getelementptr inbounds [25 x float], [25 x float]* %14, i64 0, i64 12
  store float %1923, float* %1924, align 16
  %1925 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 18, i64 2
  %1926 = load float, float* %1925, align 4
  %1927 = call float @sqrtf(float %1926) #4
  %1928 = fadd float %1927, 0xBFFC548460000000
  %1929 = getelementptr inbounds [25 x float], [25 x float]* %14, i64 0, i64 13
  store float %1928, float* %1929, align 4
  %1930 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 18, i64 3
  %1931 = load float, float* %1930, align 4
  %1932 = call float @sqrtf(float %1931) #4
  %1933 = fadd float %1932, 0xBFF998B720000000
  %1934 = getelementptr inbounds [25 x float], [25 x float]* %14, i64 0, i64 14
  store float %1933, float* %1934, align 8
  %1935 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 18, i64 4
  %1936 = load float, float* %1935, align 4
  %1937 = call float @sqrtf(float %1936) #4
  %1938 = fadd float %1937, 0xC00E2F8B60000000
  %1939 = getelementptr inbounds [25 x float], [25 x float]* %14, i64 0, i64 15
  store float %1938, float* %1939, align 4
  %1940 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 18, i64 5
  %1941 = load float, float* %1940, align 4
  %1942 = call float @sqrtf(float %1941) #4
  %1943 = fadd float %1942, 0xC0014E7700000000
  %1944 = getelementptr inbounds [25 x float], [25 x float]* %14, i64 0, i64 16
  store float %1943, float* %1944, align 16
  %1945 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 18, i64 6
  %1946 = load float, float* %1945, align 4
  %1947 = call float @sqrtf(float %1946) #4
  %1948 = fadd float %1947, 0xBFF42C0E80000000
  %1949 = getelementptr inbounds [25 x float], [25 x float]* %14, i64 0, i64 17
  store float %1948, float* %1949, align 4
  %1950 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 18, i64 7
  %1951 = load float, float* %1950, align 4
  %1952 = call float @sqrtf(float %1951) #4
  %1953 = fadd float %1952, 0xBFF1DEB100000000
  %1954 = getelementptr inbounds [25 x float], [25 x float]* %14, i64 0, i64 18
  store float %1953, float* %1954, align 8
  %1955 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 18, i64 8
  %1956 = load float, float* %1955, align 4
  %1957 = call float @sqrtf(float %1956) #4
  %1958 = fadd float %1957, 0xBFFEB36260000000
  %1959 = getelementptr inbounds [25 x float], [25 x float]* %14, i64 0, i64 19
  store float %1958, float* %1959, align 4
  %1960 = fadd float %913, 0xBFE8F5C280000000
  store float %1960, float* %1954, align 8
  %1961 = load float, float* %1741, align 4
  %1962 = fadd float %1961, 0xBFC3CDF6A0000000
  %1963 = getelementptr inbounds [25 x float], [25 x float]* %14, i64 0, i64 20
  store float %1962, float* %1963, align 16
  %1964 = load float, float* %360, align 4
  %1965 = fadd float %1964, 0xBFE7304680000000
  %1966 = getelementptr inbounds [25 x float], [25 x float]* %14, i64 0, i64 21
  store float %1965, float* %1966, align 4
  %1967 = fadd float %1788, 0xBFE7CC87A0000000
  %1968 = getelementptr inbounds [25 x float], [25 x float]* %14, i64 0, i64 22
  store float %1967, float* %1968, align 8
  %1969 = load float, float* %1734, align 4
  %1970 = fadd float %1969, 0x3FB1B823C0000000
  %1971 = getelementptr inbounds [25 x float], [25 x float]* %14, i64 0, i64 23
  store float %1970, float* %1971, align 4
  %1972 = load float, float* %1070, align 4
  %1973 = fadd float %1972, 0xBFB163DC40000000
  %1974 = getelementptr inbounds [25 x float], [25 x float]* %14, i64 0, i64 24
  store float %1973, float* %1974, align 16
  %1975 = getelementptr inbounds [32 x float], [32 x float]* %22, i64 0, i64 0
  call void @compute_dense(%struct.DenseLayer* nonnull @layer0, float* nonnull %1975, float* nonnull %1754) #7
  %1976 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 29, i64 0
  call void @compute_gru(%struct.GRULayer* nonnull @layer1, float* %1976, float* nonnull %1975) #7
  call void @compute_dense(%struct.DenseLayer* nonnull @layer2, float* nonnull %32, float* %1976) #7
  %1977 = bitcast float* %33 to i32*
  %1978 = load i32, i32* %1977, align 4
  %1979 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %99, i32 9
  %1980 = bitcast float* %1979 to i32*
  store i32 %1978, i32* %1980, align 4
  %1981 = bitcast [2 x float]* %15 to i32*
  %1982 = load i32, i32* %1981, align 4
  %1983 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %99, i32 5
  %1984 = bitcast float* %1983 to i32*
  store i32 %1982, i32* %1984, align 4
  %1985 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %99, i32 8
  store i32 %1374, i32* %1985, align 4
  store i32 %1374, i32* %924, align 4
  %1986 = getelementptr inbounds %struct.TonalityAnalysisState, %struct.TonalityAnalysisState* %0, i64 0, i32 31, i64 %99, i32 3
  store float %1723, float* %1986, align 4
  %1987 = getelementptr inbounds %struct.AnalysisInfo, %struct.AnalysisInfo* %140, i64 0, i32 0
  store i32 1, i32* %1987, align 4
  br label %1988

1988:                                             ; preds = %520, %1883, %171, %157, %95
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %41) #7
  call void @llvm.lifetime.end.p0i8(i64 76, i8* nonnull %40) #7
  call void @llvm.lifetime.end.p0i8(i64 76, i8* nonnull %39) #7
  call void @llvm.lifetime.end.p0i8(i64 76, i8* nonnull %37) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %36) #7
  call void @llvm.lifetime.end.p0i8(i64 960, i8* nonnull %35) #7
  call void @llvm.lifetime.end.p0i8(i64 76, i8* nonnull %34) #7
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %31) #7
  call void @llvm.lifetime.end.p0i8(i64 100, i8* nonnull %29) #7
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %25) #7
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %24) #7
  call void @llvm.lifetime.end.p0i8(i64 72, i8* nonnull %23) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc float @downmix_and_resample(void (i8*, float*, i32, i32, i32, i32, i32)* nocapture, i8*, float* nocapture, float* nocapture, i32, i32, i32, i32, i32, i32) unnamed_addr #0 {
  %11 = icmp eq i32 %4, 0
  br i1 %11, label %259, label %12

12:                                               ; preds = %10
  %13 = icmp eq i32 %9, 48000
  br i1 %13, label %14, label %17

14:                                               ; preds = %12
  %15 = shl nsw i32 %4, 1
  %16 = shl nsw i32 %5, 1
  br label %24

17:                                               ; preds = %12
  %18 = icmp eq i32 %9, 16000
  br i1 %18, label %19, label %24

19:                                               ; preds = %17
  %20 = shl nsw i32 %4, 1
  %21 = sdiv i32 %20, 3
  %22 = shl nsw i32 %5, 1
  %23 = sdiv i32 %22, 3
  br label %24

24:                                               ; preds = %17, %19, %14
  %25 = phi i32 [ %16, %14 ], [ %23, %19 ], [ %5, %17 ]
  %26 = phi i32 [ %15, %14 ], [ %21, %19 ], [ %4, %17 ]
  %27 = sext i32 %26 to i64
  %28 = shl nsw i64 %27, 2
  %29 = alloca float, i64 %27, align 16
  %30 = bitcast float* %29 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %30, i8 -86, i64 %28, i1 false)
  call void %0(i8* %1, float* nonnull %29, i32 %26, i32 %25, i32 %6, i32 %7, i32 %8) #7
  %31 = icmp eq i32 %7, -2
  br i1 %31, label %32, label %35

32:                                               ; preds = %24
  %33 = sitofp i32 %8 to float
  %34 = fdiv float 0x3F00000000000000, %33
  br label %38

35:                                               ; preds = %24
  %36 = icmp sgt i32 %7, -1
  %37 = select i1 %36, float 0x3EF0000000000000, float 0x3F00000000000000
  br label %38

38:                                               ; preds = %35, %32
  %39 = phi float [ %34, %32 ], [ %37, %35 ]
  %40 = icmp sgt i32 %26, 0
  br i1 %40, label %41, label %109

41:                                               ; preds = %38
  %42 = zext i32 %26 to i64
  %43 = icmp ult i32 %26, 8
  br i1 %43, label %100, label %44

44:                                               ; preds = %41
  %45 = and i64 %42, 4294967288
  %46 = insertelement <4 x float> undef, float %39, i32 0
  %47 = shufflevector <4 x float> %46, <4 x float> undef, <4 x i32> zeroinitializer
  %48 = insertelement <4 x float> undef, float %39, i32 0
  %49 = shufflevector <4 x float> %48, <4 x float> undef, <4 x i32> zeroinitializer
  %50 = add nsw i64 %45, -8
  %51 = lshr exact i64 %50, 3
  %52 = add nuw nsw i64 %51, 1
  %53 = and i64 %52, 1
  %54 = icmp eq i64 %50, 0
  br i1 %54, label %84, label %55

55:                                               ; preds = %44
  %56 = sub nuw nsw i64 %52, %53
  br label %57

57:                                               ; preds = %57, %55
  %58 = phi i64 [ 0, %55 ], [ %81, %57 ]
  %59 = phi i64 [ %56, %55 ], [ %82, %57 ]
  %60 = getelementptr inbounds float, float* %29, i64 %58
  %61 = bitcast float* %60 to <4 x float>*
  %62 = load <4 x float>, <4 x float>* %61, align 16
  %63 = getelementptr inbounds float, float* %60, i64 4
  %64 = bitcast float* %63 to <4 x float>*
  %65 = load <4 x float>, <4 x float>* %64, align 16
  %66 = fmul <4 x float> %47, %62
  %67 = fmul <4 x float> %49, %65
  %68 = bitcast float* %60 to <4 x float>*
  store <4 x float> %66, <4 x float>* %68, align 16
  %69 = bitcast float* %63 to <4 x float>*
  store <4 x float> %67, <4 x float>* %69, align 16
  %70 = or i64 %58, 8
  %71 = getelementptr inbounds float, float* %29, i64 %70
  %72 = bitcast float* %71 to <4 x float>*
  %73 = load <4 x float>, <4 x float>* %72, align 16
  %74 = getelementptr inbounds float, float* %71, i64 4
  %75 = bitcast float* %74 to <4 x float>*
  %76 = load <4 x float>, <4 x float>* %75, align 16
  %77 = fmul <4 x float> %47, %73
  %78 = fmul <4 x float> %49, %76
  %79 = bitcast float* %71 to <4 x float>*
  store <4 x float> %77, <4 x float>* %79, align 16
  %80 = bitcast float* %74 to <4 x float>*
  store <4 x float> %78, <4 x float>* %80, align 16
  %81 = add i64 %58, 16
  %82 = add i64 %59, -2
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %84, label %57, !llvm.loop !4

84:                                               ; preds = %57, %44
  %85 = phi i64 [ 0, %44 ], [ %81, %57 ]
  %86 = icmp eq i64 %53, 0
  br i1 %86, label %98, label %87

87:                                               ; preds = %84
  %88 = getelementptr inbounds float, float* %29, i64 %85
  %89 = bitcast float* %88 to <4 x float>*
  %90 = load <4 x float>, <4 x float>* %89, align 16
  %91 = getelementptr inbounds float, float* %88, i64 4
  %92 = bitcast float* %91 to <4 x float>*
  %93 = load <4 x float>, <4 x float>* %92, align 16
  %94 = fmul <4 x float> %47, %90
  %95 = fmul <4 x float> %49, %93
  %96 = bitcast float* %88 to <4 x float>*
  store <4 x float> %94, <4 x float>* %96, align 16
  %97 = bitcast float* %91 to <4 x float>*
  store <4 x float> %95, <4 x float>* %97, align 16
  br label %98

98:                                               ; preds = %84, %87
  %99 = icmp eq i64 %45, %42
  br i1 %99, label %109, label %100

100:                                              ; preds = %98, %41
  %101 = phi i64 [ 0, %41 ], [ %45, %98 ]
  br label %102

102:                                              ; preds = %100, %102
  %103 = phi i64 [ %107, %102 ], [ %101, %100 ]
  %104 = getelementptr inbounds float, float* %29, i64 %103
  %105 = load float, float* %104, align 4
  %106 = fmul float %39, %105
  store float %106, float* %104, align 4
  %107 = add nuw nsw i64 %103, 1
  %108 = icmp eq i64 %107, %42
  br i1 %108, label %109, label %102, !llvm.loop !5

109:                                              ; preds = %102, %98, %38
  br i1 %13, label %110, label %150

110:                                              ; preds = %109
  %111 = icmp sgt i32 %26, 1
  br i1 %111, label %112, label %259

112:                                              ; preds = %110
  %113 = lshr i32 %26, 1
  %114 = getelementptr inbounds float, float* %3, i64 1
  %115 = getelementptr inbounds float, float* %3, i64 2
  %116 = zext i32 %113 to i64
  br label %117

117:                                              ; preds = %117, %112
  %118 = phi i64 [ 0, %112 ], [ %148, %117 ]
  %119 = phi float [ 0.000000e+00, %112 ], [ %145, %117 ]
  %120 = shl nuw nsw i64 %118, 1
  %121 = getelementptr inbounds float, float* %29, i64 %120
  %122 = load float, float* %121, align 8
  %123 = load float, float* %3, align 4
  %124 = fsub float %122, %123
  %125 = fmul float %124, 0x3FE3701FE0000000
  %126 = fadd float %123, %125
  %127 = fadd float %122, %125
  store float %127, float* %3, align 4
  %128 = or i64 %120, 1
  %129 = getelementptr inbounds float, float* %29, i64 %128
  %130 = load float, float* %129, align 4
  %131 = load float, float* %114, align 4
  %132 = fsub float %130, %131
  %133 = fmul float %132, 0x3FC347D800000000
  %134 = fadd float %126, %131
  %135 = fadd float %134, %133
  %136 = fadd float %130, %133
  store float %136, float* %114, align 4
  %137 = fsub float -0.000000e+00, %130
  %138 = load float, float* %115, align 4
  %139 = fsub float %137, %138
  %140 = fmul float %139, 0x3FC347D800000000
  %141 = fadd float %126, %138
  %142 = fadd float %141, %140
  %143 = fsub float %140, %130
  store float %143, float* %115, align 4
  %144 = fmul float %142, %142
  %145 = fadd float %119, %144
  %146 = fmul float %135, 5.000000e-01
  %147 = getelementptr inbounds float, float* %2, i64 %118
  store float %146, float* %147, align 4
  %148 = add nuw nsw i64 %118, 1
  %149 = icmp eq i64 %148, %116
  br i1 %149, label %259, label %117

150:                                              ; preds = %109
  switch i32 %9, label %259 [
    i32 24000, label %151
    i32 16000, label %153
  ]

151:                                              ; preds = %150
  %152 = bitcast float* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %152, i8* nonnull align 16 %30, i64 %28, i1 false)
  br label %259

153:                                              ; preds = %150
  %154 = mul nsw i32 %26, 3
  %155 = sext i32 %154 to i64
  %156 = shl nsw i64 %155, 2
  %157 = alloca float, i64 %155, align 16
  %158 = bitcast float* %157 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %158, i8 -86, i64 %156, i1 false)
  br i1 %40, label %159, label %224

159:                                              ; preds = %153
  %160 = zext i32 %26 to i64
  %161 = and i64 %160, 1
  %162 = icmp eq i32 %26, 1
  br i1 %162, label %204, label %163

163:                                              ; preds = %159
  %164 = sub nsw i64 %160, %161
  br label %165

165:                                              ; preds = %165, %163
  %166 = phi i64 [ 0, %163 ], [ %201, %165 ]
  %167 = phi i64 [ %164, %163 ], [ %202, %165 ]
  %168 = getelementptr inbounds float, float* %29, i64 %166
  %169 = bitcast float* %168 to i32*
  %170 = load i32, i32* %169, align 8
  %171 = trunc i64 %166 to i32
  %172 = mul nsw i32 %171, 3
  %173 = zext i32 %172 to i64
  %174 = getelementptr inbounds float, float* %157, i64 %173
  %175 = bitcast float* %174 to i32*
  store i32 %170, i32* %175, align 8
  %176 = or i32 %172, 1
  %177 = zext i32 %176 to i64
  %178 = getelementptr inbounds float, float* %157, i64 %177
  %179 = bitcast float* %178 to i32*
  store i32 %170, i32* %179, align 4
  %180 = add nuw nsw i32 %172, 2
  %181 = zext i32 %180 to i64
  %182 = getelementptr inbounds float, float* %157, i64 %181
  %183 = bitcast float* %182 to i32*
  store i32 %170, i32* %183, align 4
  %184 = or i64 %166, 1
  %185 = getelementptr inbounds float, float* %29, i64 %184
  %186 = bitcast float* %185 to i32*
  %187 = load i32, i32* %186, align 4
  %188 = trunc i64 %184 to i32
  %189 = mul nsw i32 %188, 3
  %190 = zext i32 %189 to i64
  %191 = getelementptr inbounds float, float* %157, i64 %190
  %192 = bitcast float* %191 to i32*
  store i32 %187, i32* %192, align 4
  %193 = add nuw nsw i32 %189, 1
  %194 = zext i32 %193 to i64
  %195 = getelementptr inbounds float, float* %157, i64 %194
  %196 = bitcast float* %195 to i32*
  store i32 %187, i32* %196, align 4
  %197 = add nuw nsw i32 %189, 2
  %198 = zext i32 %197 to i64
  %199 = getelementptr inbounds float, float* %157, i64 %198
  %200 = bitcast float* %199 to i32*
  store i32 %187, i32* %200, align 4
  %201 = add nuw nsw i64 %166, 2
  %202 = add i64 %167, -2
  %203 = icmp eq i64 %202, 0
  br i1 %203, label %204, label %165

204:                                              ; preds = %165, %159
  %205 = phi i64 [ 0, %159 ], [ %201, %165 ]
  %206 = icmp eq i64 %161, 0
  br i1 %206, label %224, label %207

207:                                              ; preds = %204
  %208 = getelementptr inbounds float, float* %29, i64 %205
  %209 = bitcast float* %208 to i32*
  %210 = load i32, i32* %209, align 4
  %211 = trunc i64 %205 to i32
  %212 = mul nsw i32 %211, 3
  %213 = zext i32 %212 to i64
  %214 = getelementptr inbounds float, float* %157, i64 %213
  %215 = bitcast float* %214 to i32*
  store i32 %210, i32* %215, align 4
  %216 = add nuw nsw i32 %212, 1
  %217 = zext i32 %216 to i64
  %218 = getelementptr inbounds float, float* %157, i64 %217
  %219 = bitcast float* %218 to i32*
  store i32 %210, i32* %219, align 4
  %220 = add nuw nsw i32 %212, 2
  %221 = zext i32 %220 to i64
  %222 = getelementptr inbounds float, float* %157, i64 %221
  %223 = bitcast float* %222 to i32*
  store i32 %210, i32* %223, align 4
  br label %224

224:                                              ; preds = %207, %204, %153
  %225 = icmp sgt i32 %154, 1
  br i1 %225, label %226, label %259

226:                                              ; preds = %224
  %227 = lshr i32 %154, 1
  %228 = getelementptr inbounds float, float* %3, i64 1
  %229 = getelementptr inbounds float, float* %3, i64 2
  %230 = zext i32 %227 to i64
  br label %231

231:                                              ; preds = %231, %226
  %232 = phi i64 [ 0, %226 ], [ %257, %231 ]
  %233 = shl nuw nsw i64 %232, 1
  %234 = getelementptr inbounds float, float* %157, i64 %233
  %235 = load float, float* %234, align 8
  %236 = load float, float* %3, align 4
  %237 = fsub float %235, %236
  %238 = fmul float %237, 0x3FE3701FE0000000
  %239 = fadd float %236, %238
  %240 = fadd float %235, %238
  store float %240, float* %3, align 4
  %241 = or i64 %233, 1
  %242 = getelementptr inbounds float, float* %157, i64 %241
  %243 = load float, float* %242, align 4
  %244 = load float, float* %228, align 4
  %245 = fsub float %243, %244
  %246 = fmul float %245, 0x3FC347D800000000
  %247 = fadd float %239, %244
  %248 = fadd float %247, %246
  %249 = fadd float %243, %246
  store float %249, float* %228, align 4
  %250 = fsub float -0.000000e+00, %243
  %251 = load float, float* %229, align 4
  %252 = fsub float %250, %251
  %253 = fmul float %252, 0x3FC347D800000000
  %254 = fsub float %253, %243
  store float %254, float* %229, align 4
  %255 = fmul float %248, 5.000000e-01
  %256 = getelementptr inbounds float, float* %2, i64 %232
  store float %255, float* %256, align 4
  %257 = add nuw nsw i64 %232, 1
  %258 = icmp eq i64 %257, %230
  br i1 %258, label %259, label %231

259:                                              ; preds = %231, %117, %224, %110, %151, %150, %10
  %260 = phi float [ 0.000000e+00, %10 ], [ 0.000000e+00, %151 ], [ 0.000000e+00, %150 ], [ 0.000000e+00, %110 ], [ 0.000000e+00, %224 ], [ %145, %117 ], [ 0.000000e+00, %231 ]
  ret float %260
}

declare i32 @is_digital_silence(float*, i32, i32, i32) local_unnamed_addr #1

declare void @opus_fft_c(%struct.kiss_fft_state*, %struct.kiss_fft_cpx*, %struct.kiss_fft_cpx*) local_unnamed_addr #1

; Function Attrs: nofree nounwind
declare double @log(double) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #4

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #5

; Function Attrs: nofree nounwind
declare double @log10(double) local_unnamed_addr #4

declare void @compute_dense(%struct.DenseLayer*, float*, float*) local_unnamed_addr #1

declare void @compute_gru(%struct.GRULayer*, float*, float*) local_unnamed_addr #1

; Function Attrs: nounwind readnone
declare i32 @llvm.x86.sse.cvtss2si(<4 x float>) #6

declare float @sqrtf(float) local_unnamed_addr

; Function Attrs: nounwind readnone speculatable
declare float @llvm.fabs.f32(float) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind readnone }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !6, !3}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
