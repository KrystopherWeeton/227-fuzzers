; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/x86/highbd_idct32x32_add_sse2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/x86/highbd_idct32x32_add_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct32x32_1024_add_sse2(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [4 x [32 x <2 x i64>]], align 16
  %6 = alloca [32 x <2 x i64>], align 16
  %7 = alloca [8 x [32 x <2 x i64>]], align 16
  %8 = alloca [32 x <2 x i64>], align 16
  %9 = icmp eq i32 %3, 8
  br i1 %9, label %10, label %737

10:                                               ; preds = %4
  %11 = bitcast [4 x [32 x <2 x i64>]]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %11) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %11, i8 -86, i64 2048, i1 false)
  %12 = bitcast [32 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %12) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 512, i1 false)
  %13 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 0
  %14 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 1
  %15 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 2
  %16 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 3
  %17 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 4
  %18 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 5
  %19 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 6
  %20 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 7
  %21 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 8
  %22 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 9
  %23 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 10
  %24 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 11
  %25 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 12
  %26 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 13
  %27 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 14
  %28 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 15
  %29 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 16
  %30 = bitcast <2 x i64>* %29 to <8 x i16>*
  %31 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 17
  %32 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 18
  %33 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 19
  %34 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 20
  %35 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 21
  %36 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 22
  %37 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 23
  %38 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 24
  %39 = bitcast <2 x i64>* %38 to <8 x i16>*
  %40 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 25
  %41 = bitcast <2 x i64>* %40 to <8 x i16>*
  %42 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 26
  %43 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 27
  %44 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 28
  %45 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 29
  %46 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 30
  %47 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 31
  br label %50

48:                                               ; preds = %50
  %49 = sext i32 %2 to i64
  br label %440

50:                                               ; preds = %50, %10
  %51 = phi i64 [ 0, %10 ], [ %438, %50 ]
  %52 = phi i32* [ %0, %10 ], [ %437, %50 ]
  %53 = bitcast i32* %52 to <4 x i32>*
  %54 = load <4 x i32>, <4 x i32>* %53, align 16
  %55 = getelementptr inbounds i32, i32* %52, i64 4
  %56 = bitcast i32* %55 to <4 x i32>*
  %57 = load <4 x i32>, <4 x i32>* %56, align 16
  %58 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %54, <4 x i32> %57) #7
  %59 = getelementptr inbounds i32, i32* %52, i64 32
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 16
  %62 = getelementptr inbounds i32, i32* %52, i64 36
  %63 = bitcast i32* %62 to <4 x i32>*
  %64 = load <4 x i32>, <4 x i32>* %63, align 16
  %65 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %61, <4 x i32> %64) #7
  %66 = getelementptr inbounds i32, i32* %52, i64 64
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 16
  %69 = getelementptr inbounds i32, i32* %52, i64 68
  %70 = bitcast i32* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 16
  %72 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %68, <4 x i32> %71) #7
  %73 = getelementptr inbounds i32, i32* %52, i64 96
  %74 = bitcast i32* %73 to <4 x i32>*
  %75 = load <4 x i32>, <4 x i32>* %74, align 16
  %76 = getelementptr inbounds i32, i32* %52, i64 100
  %77 = bitcast i32* %76 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 16
  %79 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %75, <4 x i32> %78) #7
  %80 = getelementptr inbounds i32, i32* %52, i64 128
  %81 = bitcast i32* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 16
  %83 = getelementptr inbounds i32, i32* %52, i64 132
  %84 = bitcast i32* %83 to <4 x i32>*
  %85 = load <4 x i32>, <4 x i32>* %84, align 16
  %86 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %82, <4 x i32> %85) #7
  %87 = getelementptr inbounds i32, i32* %52, i64 160
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 16
  %90 = getelementptr inbounds i32, i32* %52, i64 164
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 16
  %93 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %89, <4 x i32> %92) #7
  %94 = getelementptr inbounds i32, i32* %52, i64 192
  %95 = bitcast i32* %94 to <4 x i32>*
  %96 = load <4 x i32>, <4 x i32>* %95, align 16
  %97 = getelementptr inbounds i32, i32* %52, i64 196
  %98 = bitcast i32* %97 to <4 x i32>*
  %99 = load <4 x i32>, <4 x i32>* %98, align 16
  %100 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %96, <4 x i32> %99) #7
  %101 = getelementptr inbounds i32, i32* %52, i64 224
  %102 = bitcast i32* %101 to <4 x i32>*
  %103 = load <4 x i32>, <4 x i32>* %102, align 16
  %104 = getelementptr inbounds i32, i32* %52, i64 228
  %105 = bitcast i32* %104 to <4 x i32>*
  %106 = load <4 x i32>, <4 x i32>* %105, align 16
  %107 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %103, <4 x i32> %106) #7
  %108 = shufflevector <8 x i16> %58, <8 x i16> %65, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %109 = shufflevector <8 x i16> %72, <8 x i16> %79, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %110 = shufflevector <8 x i16> %86, <8 x i16> %93, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %111 = shufflevector <8 x i16> %100, <8 x i16> %107, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %112 = shufflevector <8 x i16> %58, <8 x i16> %65, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %113 = shufflevector <8 x i16> %72, <8 x i16> %79, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %114 = shufflevector <8 x i16> %86, <8 x i16> %93, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %115 = shufflevector <8 x i16> %100, <8 x i16> %107, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %116 = bitcast <8 x i16> %108 to <4 x i32>
  %117 = bitcast <8 x i16> %109 to <4 x i32>
  %118 = shufflevector <4 x i32> %116, <4 x i32> %117, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %119 = bitcast <4 x i32> %118 to <2 x i64>
  %120 = bitcast <8 x i16> %110 to <4 x i32>
  %121 = bitcast <8 x i16> %111 to <4 x i32>
  %122 = shufflevector <4 x i32> %120, <4 x i32> %121, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %123 = bitcast <4 x i32> %122 to <2 x i64>
  %124 = bitcast <8 x i16> %112 to <4 x i32>
  %125 = bitcast <8 x i16> %113 to <4 x i32>
  %126 = shufflevector <4 x i32> %124, <4 x i32> %125, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %127 = bitcast <4 x i32> %126 to <2 x i64>
  %128 = bitcast <8 x i16> %114 to <4 x i32>
  %129 = bitcast <8 x i16> %115 to <4 x i32>
  %130 = shufflevector <4 x i32> %128, <4 x i32> %129, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %131 = bitcast <4 x i32> %130 to <2 x i64>
  %132 = shufflevector <4 x i32> %116, <4 x i32> %117, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %133 = bitcast <4 x i32> %132 to <2 x i64>
  %134 = shufflevector <4 x i32> %120, <4 x i32> %121, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %135 = bitcast <4 x i32> %134 to <2 x i64>
  %136 = shufflevector <4 x i32> %124, <4 x i32> %125, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %137 = bitcast <4 x i32> %136 to <2 x i64>
  %138 = shufflevector <4 x i32> %128, <4 x i32> %129, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %139 = bitcast <4 x i32> %138 to <2 x i64>
  %140 = shufflevector <2 x i64> %119, <2 x i64> %123, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %140, <2 x i64>* %13, align 16
  %141 = shufflevector <2 x i64> %119, <2 x i64> %123, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %141, <2 x i64>* %14, align 16
  %142 = shufflevector <2 x i64> %133, <2 x i64> %135, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %142, <2 x i64>* %15, align 16
  %143 = shufflevector <2 x i64> %133, <2 x i64> %135, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %143, <2 x i64>* %16, align 16
  %144 = shufflevector <2 x i64> %127, <2 x i64> %131, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %144, <2 x i64>* %17, align 16
  %145 = shufflevector <2 x i64> %127, <2 x i64> %131, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %145, <2 x i64>* %18, align 16
  %146 = shufflevector <2 x i64> %137, <2 x i64> %139, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %146, <2 x i64>* %19, align 16
  %147 = shufflevector <2 x i64> %137, <2 x i64> %139, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %147, <2 x i64>* %20, align 16
  %148 = getelementptr inbounds i32, i32* %52, i64 8
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 16
  %151 = getelementptr inbounds i32, i32* %52, i64 12
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 16
  %154 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %150, <4 x i32> %153) #7
  %155 = getelementptr inbounds i32, i32* %52, i64 40
  %156 = bitcast i32* %155 to <4 x i32>*
  %157 = load <4 x i32>, <4 x i32>* %156, align 16
  %158 = getelementptr inbounds i32, i32* %52, i64 44
  %159 = bitcast i32* %158 to <4 x i32>*
  %160 = load <4 x i32>, <4 x i32>* %159, align 16
  %161 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %157, <4 x i32> %160) #7
  %162 = getelementptr inbounds i32, i32* %52, i64 72
  %163 = bitcast i32* %162 to <4 x i32>*
  %164 = load <4 x i32>, <4 x i32>* %163, align 16
  %165 = getelementptr inbounds i32, i32* %52, i64 76
  %166 = bitcast i32* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 16
  %168 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %164, <4 x i32> %167) #7
  %169 = getelementptr inbounds i32, i32* %52, i64 104
  %170 = bitcast i32* %169 to <4 x i32>*
  %171 = load <4 x i32>, <4 x i32>* %170, align 16
  %172 = getelementptr inbounds i32, i32* %52, i64 108
  %173 = bitcast i32* %172 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 16
  %175 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %171, <4 x i32> %174) #7
  %176 = getelementptr inbounds i32, i32* %52, i64 136
  %177 = bitcast i32* %176 to <4 x i32>*
  %178 = load <4 x i32>, <4 x i32>* %177, align 16
  %179 = getelementptr inbounds i32, i32* %52, i64 140
  %180 = bitcast i32* %179 to <4 x i32>*
  %181 = load <4 x i32>, <4 x i32>* %180, align 16
  %182 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %178, <4 x i32> %181) #7
  %183 = getelementptr inbounds i32, i32* %52, i64 168
  %184 = bitcast i32* %183 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 16
  %186 = getelementptr inbounds i32, i32* %52, i64 172
  %187 = bitcast i32* %186 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 16
  %189 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %185, <4 x i32> %188) #7
  %190 = getelementptr inbounds i32, i32* %52, i64 200
  %191 = bitcast i32* %190 to <4 x i32>*
  %192 = load <4 x i32>, <4 x i32>* %191, align 16
  %193 = getelementptr inbounds i32, i32* %52, i64 204
  %194 = bitcast i32* %193 to <4 x i32>*
  %195 = load <4 x i32>, <4 x i32>* %194, align 16
  %196 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %192, <4 x i32> %195) #7
  %197 = getelementptr inbounds i32, i32* %52, i64 232
  %198 = bitcast i32* %197 to <4 x i32>*
  %199 = load <4 x i32>, <4 x i32>* %198, align 16
  %200 = getelementptr inbounds i32, i32* %52, i64 236
  %201 = bitcast i32* %200 to <4 x i32>*
  %202 = load <4 x i32>, <4 x i32>* %201, align 16
  %203 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %199, <4 x i32> %202) #7
  %204 = shufflevector <8 x i16> %154, <8 x i16> %161, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %205 = shufflevector <8 x i16> %168, <8 x i16> %175, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %206 = shufflevector <8 x i16> %182, <8 x i16> %189, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %207 = shufflevector <8 x i16> %196, <8 x i16> %203, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %208 = shufflevector <8 x i16> %154, <8 x i16> %161, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %209 = shufflevector <8 x i16> %168, <8 x i16> %175, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %210 = shufflevector <8 x i16> %182, <8 x i16> %189, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %211 = shufflevector <8 x i16> %196, <8 x i16> %203, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %212 = bitcast <8 x i16> %204 to <4 x i32>
  %213 = bitcast <8 x i16> %205 to <4 x i32>
  %214 = shufflevector <4 x i32> %212, <4 x i32> %213, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %215 = bitcast <4 x i32> %214 to <2 x i64>
  %216 = bitcast <8 x i16> %206 to <4 x i32>
  %217 = bitcast <8 x i16> %207 to <4 x i32>
  %218 = shufflevector <4 x i32> %216, <4 x i32> %217, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %219 = bitcast <4 x i32> %218 to <2 x i64>
  %220 = bitcast <8 x i16> %208 to <4 x i32>
  %221 = bitcast <8 x i16> %209 to <4 x i32>
  %222 = shufflevector <4 x i32> %220, <4 x i32> %221, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %223 = bitcast <4 x i32> %222 to <2 x i64>
  %224 = bitcast <8 x i16> %210 to <4 x i32>
  %225 = bitcast <8 x i16> %211 to <4 x i32>
  %226 = shufflevector <4 x i32> %224, <4 x i32> %225, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %227 = bitcast <4 x i32> %226 to <2 x i64>
  %228 = shufflevector <4 x i32> %212, <4 x i32> %213, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %229 = bitcast <4 x i32> %228 to <2 x i64>
  %230 = shufflevector <4 x i32> %216, <4 x i32> %217, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %231 = bitcast <4 x i32> %230 to <2 x i64>
  %232 = shufflevector <4 x i32> %220, <4 x i32> %221, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %233 = bitcast <4 x i32> %232 to <2 x i64>
  %234 = shufflevector <4 x i32> %224, <4 x i32> %225, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %235 = bitcast <4 x i32> %234 to <2 x i64>
  %236 = shufflevector <2 x i64> %215, <2 x i64> %219, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %236, <2 x i64>* %21, align 16
  %237 = shufflevector <2 x i64> %215, <2 x i64> %219, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %237, <2 x i64>* %22, align 16
  %238 = shufflevector <2 x i64> %229, <2 x i64> %231, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %238, <2 x i64>* %23, align 16
  %239 = shufflevector <2 x i64> %229, <2 x i64> %231, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %239, <2 x i64>* %24, align 16
  %240 = shufflevector <2 x i64> %223, <2 x i64> %227, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %240, <2 x i64>* %25, align 16
  %241 = shufflevector <2 x i64> %223, <2 x i64> %227, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %241, <2 x i64>* %26, align 16
  %242 = shufflevector <2 x i64> %233, <2 x i64> %235, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %242, <2 x i64>* %27, align 16
  %243 = shufflevector <2 x i64> %233, <2 x i64> %235, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %243, <2 x i64>* %28, align 16
  %244 = getelementptr inbounds i32, i32* %52, i64 16
  %245 = bitcast i32* %244 to <4 x i32>*
  %246 = load <4 x i32>, <4 x i32>* %245, align 16
  %247 = getelementptr inbounds i32, i32* %52, i64 20
  %248 = bitcast i32* %247 to <4 x i32>*
  %249 = load <4 x i32>, <4 x i32>* %248, align 16
  %250 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %246, <4 x i32> %249) #7
  store <8 x i16> %250, <8 x i16>* %30, align 16
  %251 = getelementptr inbounds i32, i32* %52, i64 48
  %252 = bitcast i32* %251 to <4 x i32>*
  %253 = load <4 x i32>, <4 x i32>* %252, align 16
  %254 = getelementptr inbounds i32, i32* %52, i64 52
  %255 = bitcast i32* %254 to <4 x i32>*
  %256 = load <4 x i32>, <4 x i32>* %255, align 16
  %257 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %253, <4 x i32> %256) #7
  %258 = getelementptr inbounds i32, i32* %52, i64 80
  %259 = bitcast i32* %258 to <4 x i32>*
  %260 = load <4 x i32>, <4 x i32>* %259, align 16
  %261 = getelementptr inbounds i32, i32* %52, i64 84
  %262 = bitcast i32* %261 to <4 x i32>*
  %263 = load <4 x i32>, <4 x i32>* %262, align 16
  %264 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %260, <4 x i32> %263) #7
  %265 = getelementptr inbounds i32, i32* %52, i64 112
  %266 = bitcast i32* %265 to <4 x i32>*
  %267 = load <4 x i32>, <4 x i32>* %266, align 16
  %268 = getelementptr inbounds i32, i32* %52, i64 116
  %269 = bitcast i32* %268 to <4 x i32>*
  %270 = load <4 x i32>, <4 x i32>* %269, align 16
  %271 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %267, <4 x i32> %270) #7
  %272 = getelementptr inbounds i32, i32* %52, i64 144
  %273 = bitcast i32* %272 to <4 x i32>*
  %274 = load <4 x i32>, <4 x i32>* %273, align 16
  %275 = getelementptr inbounds i32, i32* %52, i64 148
  %276 = bitcast i32* %275 to <4 x i32>*
  %277 = load <4 x i32>, <4 x i32>* %276, align 16
  %278 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %274, <4 x i32> %277) #7
  %279 = getelementptr inbounds i32, i32* %52, i64 176
  %280 = bitcast i32* %279 to <4 x i32>*
  %281 = load <4 x i32>, <4 x i32>* %280, align 16
  %282 = getelementptr inbounds i32, i32* %52, i64 180
  %283 = bitcast i32* %282 to <4 x i32>*
  %284 = load <4 x i32>, <4 x i32>* %283, align 16
  %285 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %281, <4 x i32> %284) #7
  %286 = getelementptr inbounds i32, i32* %52, i64 208
  %287 = bitcast i32* %286 to <4 x i32>*
  %288 = load <4 x i32>, <4 x i32>* %287, align 16
  %289 = getelementptr inbounds i32, i32* %52, i64 212
  %290 = bitcast i32* %289 to <4 x i32>*
  %291 = load <4 x i32>, <4 x i32>* %290, align 16
  %292 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %288, <4 x i32> %291) #7
  %293 = getelementptr inbounds i32, i32* %52, i64 240
  %294 = bitcast i32* %293 to <4 x i32>*
  %295 = load <4 x i32>, <4 x i32>* %294, align 16
  %296 = getelementptr inbounds i32, i32* %52, i64 244
  %297 = bitcast i32* %296 to <4 x i32>*
  %298 = load <4 x i32>, <4 x i32>* %297, align 16
  %299 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %295, <4 x i32> %298) #7
  %300 = shufflevector <8 x i16> %250, <8 x i16> %257, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %301 = shufflevector <8 x i16> %264, <8 x i16> %271, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %302 = shufflevector <8 x i16> %278, <8 x i16> %285, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %303 = shufflevector <8 x i16> %292, <8 x i16> %299, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %304 = shufflevector <8 x i16> %250, <8 x i16> %257, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %305 = shufflevector <8 x i16> %264, <8 x i16> %271, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %306 = shufflevector <8 x i16> %278, <8 x i16> %285, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %307 = shufflevector <8 x i16> %292, <8 x i16> %299, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %308 = bitcast <8 x i16> %300 to <4 x i32>
  %309 = bitcast <8 x i16> %301 to <4 x i32>
  %310 = shufflevector <4 x i32> %308, <4 x i32> %309, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %311 = bitcast <4 x i32> %310 to <2 x i64>
  %312 = bitcast <8 x i16> %302 to <4 x i32>
  %313 = bitcast <8 x i16> %303 to <4 x i32>
  %314 = shufflevector <4 x i32> %312, <4 x i32> %313, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %315 = bitcast <4 x i32> %314 to <2 x i64>
  %316 = bitcast <8 x i16> %304 to <4 x i32>
  %317 = bitcast <8 x i16> %305 to <4 x i32>
  %318 = shufflevector <4 x i32> %316, <4 x i32> %317, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %319 = bitcast <4 x i32> %318 to <2 x i64>
  %320 = bitcast <8 x i16> %306 to <4 x i32>
  %321 = bitcast <8 x i16> %307 to <4 x i32>
  %322 = shufflevector <4 x i32> %320, <4 x i32> %321, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %323 = bitcast <4 x i32> %322 to <2 x i64>
  %324 = shufflevector <4 x i32> %308, <4 x i32> %309, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %325 = bitcast <4 x i32> %324 to <2 x i64>
  %326 = shufflevector <4 x i32> %312, <4 x i32> %313, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %327 = bitcast <4 x i32> %326 to <2 x i64>
  %328 = shufflevector <4 x i32> %316, <4 x i32> %317, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %329 = bitcast <4 x i32> %328 to <2 x i64>
  %330 = shufflevector <4 x i32> %320, <4 x i32> %321, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %331 = bitcast <4 x i32> %330 to <2 x i64>
  %332 = shufflevector <2 x i64> %311, <2 x i64> %315, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %332, <2 x i64>* %29, align 16
  %333 = shufflevector <2 x i64> %311, <2 x i64> %315, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %333, <2 x i64>* %31, align 16
  %334 = shufflevector <2 x i64> %325, <2 x i64> %327, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %334, <2 x i64>* %32, align 16
  %335 = shufflevector <2 x i64> %325, <2 x i64> %327, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %335, <2 x i64>* %33, align 16
  %336 = shufflevector <2 x i64> %319, <2 x i64> %323, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %336, <2 x i64>* %34, align 16
  %337 = shufflevector <2 x i64> %319, <2 x i64> %323, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %337, <2 x i64>* %35, align 16
  %338 = shufflevector <2 x i64> %329, <2 x i64> %331, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %338, <2 x i64>* %36, align 16
  %339 = shufflevector <2 x i64> %329, <2 x i64> %331, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %339, <2 x i64>* %37, align 16
  %340 = getelementptr inbounds i32, i32* %52, i64 24
  %341 = bitcast i32* %340 to <4 x i32>*
  %342 = load <4 x i32>, <4 x i32>* %341, align 16
  %343 = getelementptr inbounds i32, i32* %52, i64 28
  %344 = bitcast i32* %343 to <4 x i32>*
  %345 = load <4 x i32>, <4 x i32>* %344, align 16
  %346 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %342, <4 x i32> %345) #7
  store <8 x i16> %346, <8 x i16>* %39, align 16
  %347 = getelementptr inbounds i32, i32* %52, i64 56
  %348 = bitcast i32* %347 to <4 x i32>*
  %349 = load <4 x i32>, <4 x i32>* %348, align 16
  %350 = getelementptr inbounds i32, i32* %52, i64 60
  %351 = bitcast i32* %350 to <4 x i32>*
  %352 = load <4 x i32>, <4 x i32>* %351, align 16
  %353 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %349, <4 x i32> %352) #7
  store <8 x i16> %353, <8 x i16>* %41, align 16
  %354 = getelementptr inbounds i32, i32* %52, i64 88
  %355 = bitcast i32* %354 to <4 x i32>*
  %356 = load <4 x i32>, <4 x i32>* %355, align 16
  %357 = getelementptr inbounds i32, i32* %52, i64 92
  %358 = bitcast i32* %357 to <4 x i32>*
  %359 = load <4 x i32>, <4 x i32>* %358, align 16
  %360 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %356, <4 x i32> %359) #7
  %361 = getelementptr inbounds i32, i32* %52, i64 120
  %362 = bitcast i32* %361 to <4 x i32>*
  %363 = load <4 x i32>, <4 x i32>* %362, align 16
  %364 = getelementptr inbounds i32, i32* %52, i64 124
  %365 = bitcast i32* %364 to <4 x i32>*
  %366 = load <4 x i32>, <4 x i32>* %365, align 16
  %367 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %363, <4 x i32> %366) #7
  %368 = getelementptr inbounds i32, i32* %52, i64 152
  %369 = bitcast i32* %368 to <4 x i32>*
  %370 = load <4 x i32>, <4 x i32>* %369, align 16
  %371 = getelementptr inbounds i32, i32* %52, i64 156
  %372 = bitcast i32* %371 to <4 x i32>*
  %373 = load <4 x i32>, <4 x i32>* %372, align 16
  %374 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %370, <4 x i32> %373) #7
  %375 = getelementptr inbounds i32, i32* %52, i64 184
  %376 = bitcast i32* %375 to <4 x i32>*
  %377 = load <4 x i32>, <4 x i32>* %376, align 16
  %378 = getelementptr inbounds i32, i32* %52, i64 188
  %379 = bitcast i32* %378 to <4 x i32>*
  %380 = load <4 x i32>, <4 x i32>* %379, align 16
  %381 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %377, <4 x i32> %380) #7
  %382 = getelementptr inbounds i32, i32* %52, i64 216
  %383 = bitcast i32* %382 to <4 x i32>*
  %384 = load <4 x i32>, <4 x i32>* %383, align 16
  %385 = getelementptr inbounds i32, i32* %52, i64 220
  %386 = bitcast i32* %385 to <4 x i32>*
  %387 = load <4 x i32>, <4 x i32>* %386, align 16
  %388 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %384, <4 x i32> %387) #7
  %389 = getelementptr inbounds i32, i32* %52, i64 248
  %390 = bitcast i32* %389 to <4 x i32>*
  %391 = load <4 x i32>, <4 x i32>* %390, align 16
  %392 = getelementptr inbounds i32, i32* %52, i64 252
  %393 = bitcast i32* %392 to <4 x i32>*
  %394 = load <4 x i32>, <4 x i32>* %393, align 16
  %395 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %391, <4 x i32> %394) #7
  %396 = shufflevector <8 x i16> %346, <8 x i16> %353, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %397 = shufflevector <8 x i16> %360, <8 x i16> %367, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %398 = shufflevector <8 x i16> %374, <8 x i16> %381, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %399 = shufflevector <8 x i16> %388, <8 x i16> %395, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %400 = shufflevector <8 x i16> %346, <8 x i16> %353, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %401 = shufflevector <8 x i16> %360, <8 x i16> %367, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %402 = shufflevector <8 x i16> %374, <8 x i16> %381, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %403 = shufflevector <8 x i16> %388, <8 x i16> %395, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %404 = bitcast <8 x i16> %396 to <4 x i32>
  %405 = bitcast <8 x i16> %397 to <4 x i32>
  %406 = shufflevector <4 x i32> %404, <4 x i32> %405, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %407 = bitcast <4 x i32> %406 to <2 x i64>
  %408 = bitcast <8 x i16> %398 to <4 x i32>
  %409 = bitcast <8 x i16> %399 to <4 x i32>
  %410 = shufflevector <4 x i32> %408, <4 x i32> %409, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %411 = bitcast <4 x i32> %410 to <2 x i64>
  %412 = bitcast <8 x i16> %400 to <4 x i32>
  %413 = bitcast <8 x i16> %401 to <4 x i32>
  %414 = shufflevector <4 x i32> %412, <4 x i32> %413, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %415 = bitcast <4 x i32> %414 to <2 x i64>
  %416 = bitcast <8 x i16> %402 to <4 x i32>
  %417 = bitcast <8 x i16> %403 to <4 x i32>
  %418 = shufflevector <4 x i32> %416, <4 x i32> %417, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %419 = bitcast <4 x i32> %418 to <2 x i64>
  %420 = shufflevector <4 x i32> %404, <4 x i32> %405, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %421 = bitcast <4 x i32> %420 to <2 x i64>
  %422 = shufflevector <4 x i32> %408, <4 x i32> %409, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %423 = bitcast <4 x i32> %422 to <2 x i64>
  %424 = shufflevector <4 x i32> %412, <4 x i32> %413, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %425 = bitcast <4 x i32> %424 to <2 x i64>
  %426 = shufflevector <4 x i32> %416, <4 x i32> %417, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %427 = bitcast <4 x i32> %426 to <2 x i64>
  %428 = shufflevector <2 x i64> %407, <2 x i64> %411, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %428, <2 x i64>* %38, align 16
  %429 = shufflevector <2 x i64> %407, <2 x i64> %411, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %429, <2 x i64>* %40, align 16
  %430 = shufflevector <2 x i64> %421, <2 x i64> %423, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %430, <2 x i64>* %42, align 16
  %431 = shufflevector <2 x i64> %421, <2 x i64> %423, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %431, <2 x i64>* %43, align 16
  %432 = shufflevector <2 x i64> %415, <2 x i64> %419, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %432, <2 x i64>* %44, align 16
  %433 = shufflevector <2 x i64> %415, <2 x i64> %419, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %433, <2 x i64>* %45, align 16
  %434 = shufflevector <2 x i64> %425, <2 x i64> %427, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %434, <2 x i64>* %46, align 16
  %435 = shufflevector <2 x i64> %425, <2 x i64> %427, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %435, <2 x i64>* %47, align 16
  %436 = getelementptr inbounds [4 x [32 x <2 x i64>]], [4 x [32 x <2 x i64>]]* %5, i64 0, i64 %51, i64 0
  call void @idct32_1024_8x32(<2 x i64>* nonnull %13, <2 x i64>* %436) #7
  %437 = getelementptr inbounds i32, i32* %52, i64 256
  %438 = add nuw nsw i64 %51, 1
  %439 = icmp eq i64 %438, 4
  br i1 %439, label %48, label %50

440:                                              ; preds = %48, %732
  %441 = phi i64 [ 0, %48 ], [ %734, %732 ]
  %442 = phi i16* [ %1, %48 ], [ %733, %732 ]
  %443 = getelementptr inbounds [4 x [32 x <2 x i64>]], [4 x [32 x <2 x i64>]]* %5, i64 0, i64 0, i64 %441
  %444 = bitcast <2 x i64>* %443 to <8 x i16>*
  %445 = load <8 x i16>, <8 x i16>* %444, align 16
  %446 = getelementptr inbounds <2 x i64>, <2 x i64>* %443, i64 1
  %447 = bitcast <2 x i64>* %446 to <8 x i16>*
  %448 = load <8 x i16>, <8 x i16>* %447, align 16
  %449 = shufflevector <8 x i16> %445, <8 x i16> %448, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %450 = getelementptr inbounds <2 x i64>, <2 x i64>* %443, i64 2
  %451 = bitcast <2 x i64>* %450 to <8 x i16>*
  %452 = load <8 x i16>, <8 x i16>* %451, align 16
  %453 = getelementptr inbounds <2 x i64>, <2 x i64>* %443, i64 3
  %454 = bitcast <2 x i64>* %453 to <8 x i16>*
  %455 = load <8 x i16>, <8 x i16>* %454, align 16
  %456 = shufflevector <8 x i16> %452, <8 x i16> %455, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %457 = getelementptr inbounds <2 x i64>, <2 x i64>* %443, i64 4
  %458 = bitcast <2 x i64>* %457 to <8 x i16>*
  %459 = load <8 x i16>, <8 x i16>* %458, align 16
  %460 = getelementptr inbounds <2 x i64>, <2 x i64>* %443, i64 5
  %461 = bitcast <2 x i64>* %460 to <8 x i16>*
  %462 = load <8 x i16>, <8 x i16>* %461, align 16
  %463 = shufflevector <8 x i16> %459, <8 x i16> %462, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %464 = getelementptr inbounds <2 x i64>, <2 x i64>* %443, i64 6
  %465 = bitcast <2 x i64>* %464 to <8 x i16>*
  %466 = load <8 x i16>, <8 x i16>* %465, align 16
  %467 = getelementptr inbounds <2 x i64>, <2 x i64>* %443, i64 7
  %468 = bitcast <2 x i64>* %467 to <8 x i16>*
  %469 = load <8 x i16>, <8 x i16>* %468, align 16
  %470 = shufflevector <8 x i16> %466, <8 x i16> %469, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %471 = shufflevector <8 x i16> %445, <8 x i16> %448, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %472 = shufflevector <8 x i16> %452, <8 x i16> %455, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %473 = shufflevector <8 x i16> %459, <8 x i16> %462, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %474 = shufflevector <8 x i16> %466, <8 x i16> %469, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %475 = bitcast <8 x i16> %449 to <4 x i32>
  %476 = bitcast <8 x i16> %456 to <4 x i32>
  %477 = shufflevector <4 x i32> %475, <4 x i32> %476, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %478 = bitcast <4 x i32> %477 to <2 x i64>
  %479 = bitcast <8 x i16> %463 to <4 x i32>
  %480 = bitcast <8 x i16> %470 to <4 x i32>
  %481 = shufflevector <4 x i32> %479, <4 x i32> %480, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %482 = bitcast <4 x i32> %481 to <2 x i64>
  %483 = bitcast <8 x i16> %471 to <4 x i32>
  %484 = bitcast <8 x i16> %472 to <4 x i32>
  %485 = shufflevector <4 x i32> %483, <4 x i32> %484, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %486 = bitcast <4 x i32> %485 to <2 x i64>
  %487 = bitcast <8 x i16> %473 to <4 x i32>
  %488 = bitcast <8 x i16> %474 to <4 x i32>
  %489 = shufflevector <4 x i32> %487, <4 x i32> %488, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %490 = bitcast <4 x i32> %489 to <2 x i64>
  %491 = shufflevector <4 x i32> %475, <4 x i32> %476, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %492 = bitcast <4 x i32> %491 to <2 x i64>
  %493 = shufflevector <4 x i32> %479, <4 x i32> %480, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %494 = bitcast <4 x i32> %493 to <2 x i64>
  %495 = shufflevector <4 x i32> %483, <4 x i32> %484, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %496 = bitcast <4 x i32> %495 to <2 x i64>
  %497 = shufflevector <4 x i32> %487, <4 x i32> %488, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %498 = bitcast <4 x i32> %497 to <2 x i64>
  %499 = shufflevector <2 x i64> %478, <2 x i64> %482, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %499, <2 x i64>* %13, align 16
  %500 = shufflevector <2 x i64> %478, <2 x i64> %482, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %500, <2 x i64>* %14, align 16
  %501 = shufflevector <2 x i64> %492, <2 x i64> %494, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %501, <2 x i64>* %15, align 16
  %502 = shufflevector <2 x i64> %492, <2 x i64> %494, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %502, <2 x i64>* %16, align 16
  %503 = shufflevector <2 x i64> %486, <2 x i64> %490, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %503, <2 x i64>* %17, align 16
  %504 = shufflevector <2 x i64> %486, <2 x i64> %490, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %504, <2 x i64>* %18, align 16
  %505 = shufflevector <2 x i64> %496, <2 x i64> %498, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %505, <2 x i64>* %19, align 16
  %506 = shufflevector <2 x i64> %496, <2 x i64> %498, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %506, <2 x i64>* %20, align 16
  %507 = getelementptr inbounds [4 x [32 x <2 x i64>]], [4 x [32 x <2 x i64>]]* %5, i64 0, i64 1, i64 %441
  %508 = bitcast <2 x i64>* %507 to <8 x i16>*
  %509 = load <8 x i16>, <8 x i16>* %508, align 16
  %510 = getelementptr inbounds <2 x i64>, <2 x i64>* %507, i64 1
  %511 = bitcast <2 x i64>* %510 to <8 x i16>*
  %512 = load <8 x i16>, <8 x i16>* %511, align 16
  %513 = shufflevector <8 x i16> %509, <8 x i16> %512, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %514 = getelementptr inbounds <2 x i64>, <2 x i64>* %507, i64 2
  %515 = bitcast <2 x i64>* %514 to <8 x i16>*
  %516 = load <8 x i16>, <8 x i16>* %515, align 16
  %517 = getelementptr inbounds <2 x i64>, <2 x i64>* %507, i64 3
  %518 = bitcast <2 x i64>* %517 to <8 x i16>*
  %519 = load <8 x i16>, <8 x i16>* %518, align 16
  %520 = shufflevector <8 x i16> %516, <8 x i16> %519, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %521 = getelementptr inbounds <2 x i64>, <2 x i64>* %507, i64 4
  %522 = bitcast <2 x i64>* %521 to <8 x i16>*
  %523 = load <8 x i16>, <8 x i16>* %522, align 16
  %524 = getelementptr inbounds <2 x i64>, <2 x i64>* %507, i64 5
  %525 = bitcast <2 x i64>* %524 to <8 x i16>*
  %526 = load <8 x i16>, <8 x i16>* %525, align 16
  %527 = shufflevector <8 x i16> %523, <8 x i16> %526, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %528 = getelementptr inbounds <2 x i64>, <2 x i64>* %507, i64 6
  %529 = bitcast <2 x i64>* %528 to <8 x i16>*
  %530 = load <8 x i16>, <8 x i16>* %529, align 16
  %531 = getelementptr inbounds <2 x i64>, <2 x i64>* %507, i64 7
  %532 = bitcast <2 x i64>* %531 to <8 x i16>*
  %533 = load <8 x i16>, <8 x i16>* %532, align 16
  %534 = shufflevector <8 x i16> %530, <8 x i16> %533, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %535 = shufflevector <8 x i16> %509, <8 x i16> %512, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %536 = shufflevector <8 x i16> %516, <8 x i16> %519, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %537 = shufflevector <8 x i16> %523, <8 x i16> %526, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %538 = shufflevector <8 x i16> %530, <8 x i16> %533, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %539 = bitcast <8 x i16> %513 to <4 x i32>
  %540 = bitcast <8 x i16> %520 to <4 x i32>
  %541 = shufflevector <4 x i32> %539, <4 x i32> %540, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %542 = bitcast <4 x i32> %541 to <2 x i64>
  %543 = bitcast <8 x i16> %527 to <4 x i32>
  %544 = bitcast <8 x i16> %534 to <4 x i32>
  %545 = shufflevector <4 x i32> %543, <4 x i32> %544, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %546 = bitcast <4 x i32> %545 to <2 x i64>
  %547 = bitcast <8 x i16> %535 to <4 x i32>
  %548 = bitcast <8 x i16> %536 to <4 x i32>
  %549 = shufflevector <4 x i32> %547, <4 x i32> %548, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %550 = bitcast <4 x i32> %549 to <2 x i64>
  %551 = bitcast <8 x i16> %537 to <4 x i32>
  %552 = bitcast <8 x i16> %538 to <4 x i32>
  %553 = shufflevector <4 x i32> %551, <4 x i32> %552, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %554 = bitcast <4 x i32> %553 to <2 x i64>
  %555 = shufflevector <4 x i32> %539, <4 x i32> %540, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %556 = bitcast <4 x i32> %555 to <2 x i64>
  %557 = shufflevector <4 x i32> %543, <4 x i32> %544, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %558 = bitcast <4 x i32> %557 to <2 x i64>
  %559 = shufflevector <4 x i32> %547, <4 x i32> %548, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %560 = bitcast <4 x i32> %559 to <2 x i64>
  %561 = shufflevector <4 x i32> %551, <4 x i32> %552, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %562 = bitcast <4 x i32> %561 to <2 x i64>
  %563 = shufflevector <2 x i64> %542, <2 x i64> %546, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %563, <2 x i64>* %21, align 16
  %564 = shufflevector <2 x i64> %542, <2 x i64> %546, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %564, <2 x i64>* %22, align 16
  %565 = shufflevector <2 x i64> %556, <2 x i64> %558, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %565, <2 x i64>* %23, align 16
  %566 = shufflevector <2 x i64> %556, <2 x i64> %558, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %566, <2 x i64>* %24, align 16
  %567 = shufflevector <2 x i64> %550, <2 x i64> %554, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %567, <2 x i64>* %25, align 16
  %568 = shufflevector <2 x i64> %550, <2 x i64> %554, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %568, <2 x i64>* %26, align 16
  %569 = shufflevector <2 x i64> %560, <2 x i64> %562, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %569, <2 x i64>* %27, align 16
  %570 = shufflevector <2 x i64> %560, <2 x i64> %562, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %570, <2 x i64>* %28, align 16
  %571 = getelementptr inbounds [4 x [32 x <2 x i64>]], [4 x [32 x <2 x i64>]]* %5, i64 0, i64 2, i64 %441
  %572 = bitcast <2 x i64>* %571 to <8 x i16>*
  %573 = load <8 x i16>, <8 x i16>* %572, align 16
  %574 = getelementptr inbounds <2 x i64>, <2 x i64>* %571, i64 1
  %575 = bitcast <2 x i64>* %574 to <8 x i16>*
  %576 = load <8 x i16>, <8 x i16>* %575, align 16
  %577 = shufflevector <8 x i16> %573, <8 x i16> %576, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %578 = getelementptr inbounds <2 x i64>, <2 x i64>* %571, i64 2
  %579 = bitcast <2 x i64>* %578 to <8 x i16>*
  %580 = load <8 x i16>, <8 x i16>* %579, align 16
  %581 = getelementptr inbounds <2 x i64>, <2 x i64>* %571, i64 3
  %582 = bitcast <2 x i64>* %581 to <8 x i16>*
  %583 = load <8 x i16>, <8 x i16>* %582, align 16
  %584 = shufflevector <8 x i16> %580, <8 x i16> %583, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %585 = getelementptr inbounds <2 x i64>, <2 x i64>* %571, i64 4
  %586 = bitcast <2 x i64>* %585 to <8 x i16>*
  %587 = load <8 x i16>, <8 x i16>* %586, align 16
  %588 = getelementptr inbounds <2 x i64>, <2 x i64>* %571, i64 5
  %589 = bitcast <2 x i64>* %588 to <8 x i16>*
  %590 = load <8 x i16>, <8 x i16>* %589, align 16
  %591 = shufflevector <8 x i16> %587, <8 x i16> %590, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %592 = getelementptr inbounds <2 x i64>, <2 x i64>* %571, i64 6
  %593 = bitcast <2 x i64>* %592 to <8 x i16>*
  %594 = load <8 x i16>, <8 x i16>* %593, align 16
  %595 = getelementptr inbounds <2 x i64>, <2 x i64>* %571, i64 7
  %596 = bitcast <2 x i64>* %595 to <8 x i16>*
  %597 = load <8 x i16>, <8 x i16>* %596, align 16
  %598 = shufflevector <8 x i16> %594, <8 x i16> %597, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %599 = shufflevector <8 x i16> %573, <8 x i16> %576, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %600 = shufflevector <8 x i16> %580, <8 x i16> %583, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %601 = shufflevector <8 x i16> %587, <8 x i16> %590, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %602 = shufflevector <8 x i16> %594, <8 x i16> %597, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %603 = bitcast <8 x i16> %577 to <4 x i32>
  %604 = bitcast <8 x i16> %584 to <4 x i32>
  %605 = shufflevector <4 x i32> %603, <4 x i32> %604, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %606 = bitcast <4 x i32> %605 to <2 x i64>
  %607 = bitcast <8 x i16> %591 to <4 x i32>
  %608 = bitcast <8 x i16> %598 to <4 x i32>
  %609 = shufflevector <4 x i32> %607, <4 x i32> %608, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %610 = bitcast <4 x i32> %609 to <2 x i64>
  %611 = bitcast <8 x i16> %599 to <4 x i32>
  %612 = bitcast <8 x i16> %600 to <4 x i32>
  %613 = shufflevector <4 x i32> %611, <4 x i32> %612, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %614 = bitcast <4 x i32> %613 to <2 x i64>
  %615 = bitcast <8 x i16> %601 to <4 x i32>
  %616 = bitcast <8 x i16> %602 to <4 x i32>
  %617 = shufflevector <4 x i32> %615, <4 x i32> %616, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %618 = bitcast <4 x i32> %617 to <2 x i64>
  %619 = shufflevector <4 x i32> %603, <4 x i32> %604, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %620 = bitcast <4 x i32> %619 to <2 x i64>
  %621 = shufflevector <4 x i32> %607, <4 x i32> %608, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %622 = bitcast <4 x i32> %621 to <2 x i64>
  %623 = shufflevector <4 x i32> %611, <4 x i32> %612, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %624 = bitcast <4 x i32> %623 to <2 x i64>
  %625 = shufflevector <4 x i32> %615, <4 x i32> %616, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %626 = bitcast <4 x i32> %625 to <2 x i64>
  %627 = shufflevector <2 x i64> %606, <2 x i64> %610, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %627, <2 x i64>* %29, align 16
  %628 = shufflevector <2 x i64> %606, <2 x i64> %610, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %628, <2 x i64>* %31, align 16
  %629 = shufflevector <2 x i64> %620, <2 x i64> %622, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %629, <2 x i64>* %32, align 16
  %630 = shufflevector <2 x i64> %620, <2 x i64> %622, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %630, <2 x i64>* %33, align 16
  %631 = shufflevector <2 x i64> %614, <2 x i64> %618, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %631, <2 x i64>* %34, align 16
  %632 = shufflevector <2 x i64> %614, <2 x i64> %618, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %632, <2 x i64>* %35, align 16
  %633 = shufflevector <2 x i64> %624, <2 x i64> %626, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %633, <2 x i64>* %36, align 16
  %634 = shufflevector <2 x i64> %624, <2 x i64> %626, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %634, <2 x i64>* %37, align 16
  %635 = getelementptr inbounds [4 x [32 x <2 x i64>]], [4 x [32 x <2 x i64>]]* %5, i64 0, i64 3, i64 %441
  %636 = bitcast <2 x i64>* %635 to <8 x i16>*
  %637 = load <8 x i16>, <8 x i16>* %636, align 16
  %638 = getelementptr inbounds <2 x i64>, <2 x i64>* %635, i64 1
  %639 = bitcast <2 x i64>* %638 to <8 x i16>*
  %640 = load <8 x i16>, <8 x i16>* %639, align 16
  %641 = shufflevector <8 x i16> %637, <8 x i16> %640, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %642 = getelementptr inbounds <2 x i64>, <2 x i64>* %635, i64 2
  %643 = bitcast <2 x i64>* %642 to <8 x i16>*
  %644 = load <8 x i16>, <8 x i16>* %643, align 16
  %645 = getelementptr inbounds <2 x i64>, <2 x i64>* %635, i64 3
  %646 = bitcast <2 x i64>* %645 to <8 x i16>*
  %647 = load <8 x i16>, <8 x i16>* %646, align 16
  %648 = shufflevector <8 x i16> %644, <8 x i16> %647, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %649 = getelementptr inbounds <2 x i64>, <2 x i64>* %635, i64 4
  %650 = bitcast <2 x i64>* %649 to <8 x i16>*
  %651 = load <8 x i16>, <8 x i16>* %650, align 16
  %652 = getelementptr inbounds <2 x i64>, <2 x i64>* %635, i64 5
  %653 = bitcast <2 x i64>* %652 to <8 x i16>*
  %654 = load <8 x i16>, <8 x i16>* %653, align 16
  %655 = shufflevector <8 x i16> %651, <8 x i16> %654, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %656 = getelementptr inbounds <2 x i64>, <2 x i64>* %635, i64 6
  %657 = bitcast <2 x i64>* %656 to <8 x i16>*
  %658 = load <8 x i16>, <8 x i16>* %657, align 16
  %659 = getelementptr inbounds <2 x i64>, <2 x i64>* %635, i64 7
  %660 = bitcast <2 x i64>* %659 to <8 x i16>*
  %661 = load <8 x i16>, <8 x i16>* %660, align 16
  %662 = shufflevector <8 x i16> %658, <8 x i16> %661, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %663 = shufflevector <8 x i16> %637, <8 x i16> %640, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %664 = shufflevector <8 x i16> %644, <8 x i16> %647, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %665 = shufflevector <8 x i16> %651, <8 x i16> %654, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %666 = shufflevector <8 x i16> %658, <8 x i16> %661, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %667 = bitcast <8 x i16> %641 to <4 x i32>
  %668 = bitcast <8 x i16> %648 to <4 x i32>
  %669 = shufflevector <4 x i32> %667, <4 x i32> %668, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %670 = bitcast <4 x i32> %669 to <2 x i64>
  %671 = bitcast <8 x i16> %655 to <4 x i32>
  %672 = bitcast <8 x i16> %662 to <4 x i32>
  %673 = shufflevector <4 x i32> %671, <4 x i32> %672, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %674 = bitcast <4 x i32> %673 to <2 x i64>
  %675 = bitcast <8 x i16> %663 to <4 x i32>
  %676 = bitcast <8 x i16> %664 to <4 x i32>
  %677 = shufflevector <4 x i32> %675, <4 x i32> %676, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %678 = bitcast <4 x i32> %677 to <2 x i64>
  %679 = bitcast <8 x i16> %665 to <4 x i32>
  %680 = bitcast <8 x i16> %666 to <4 x i32>
  %681 = shufflevector <4 x i32> %679, <4 x i32> %680, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %682 = bitcast <4 x i32> %681 to <2 x i64>
  %683 = shufflevector <4 x i32> %667, <4 x i32> %668, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %684 = bitcast <4 x i32> %683 to <2 x i64>
  %685 = shufflevector <4 x i32> %671, <4 x i32> %672, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %686 = bitcast <4 x i32> %685 to <2 x i64>
  %687 = shufflevector <4 x i32> %675, <4 x i32> %676, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %688 = bitcast <4 x i32> %687 to <2 x i64>
  %689 = shufflevector <4 x i32> %679, <4 x i32> %680, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %690 = bitcast <4 x i32> %689 to <2 x i64>
  %691 = shufflevector <2 x i64> %670, <2 x i64> %674, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %691, <2 x i64>* %38, align 16
  %692 = shufflevector <2 x i64> %670, <2 x i64> %674, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %692, <2 x i64>* %40, align 16
  %693 = shufflevector <2 x i64> %684, <2 x i64> %686, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %693, <2 x i64>* %42, align 16
  %694 = shufflevector <2 x i64> %684, <2 x i64> %686, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %694, <2 x i64>* %43, align 16
  %695 = shufflevector <2 x i64> %678, <2 x i64> %682, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %695, <2 x i64>* %44, align 16
  %696 = shufflevector <2 x i64> %678, <2 x i64> %682, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %696, <2 x i64>* %45, align 16
  %697 = shufflevector <2 x i64> %688, <2 x i64> %690, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %697, <2 x i64>* %46, align 16
  %698 = shufflevector <2 x i64> %688, <2 x i64> %690, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %698, <2 x i64>* %47, align 16
  call void @idct32_1024_8x32(<2 x i64>* nonnull %13, <2 x i64>* nonnull %13) #7
  br label %699

699:                                              ; preds = %699, %440
  %700 = phi i64 [ 0, %440 ], [ %730, %699 ]
  %701 = mul nsw i64 %700, %49
  %702 = getelementptr inbounds i16, i16* %442, i64 %701
  %703 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 %700
  %704 = bitcast <2 x i64>* %703 to <8 x i16>*
  %705 = load <8 x i16>, <8 x i16>* %704, align 16
  %706 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %705, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #7
  %707 = ashr <8 x i16> %706, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %708 = bitcast i16* %702 to <8 x i16>*
  %709 = load <8 x i16>, <8 x i16>* %708, align 16
  %710 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %709, <8 x i16> %707) #7
  %711 = icmp sgt <8 x i16> %710, zeroinitializer
  %712 = select <8 x i1> %711, <8 x i16> %710, <8 x i16> zeroinitializer
  %713 = icmp slt <8 x i16> %712, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %714 = select <8 x i1> %713, <8 x i16> %712, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  store <8 x i16> %714, <8 x i16>* %708, align 16
  %715 = or i64 %700, 1
  %716 = mul nsw i64 %715, %49
  %717 = getelementptr inbounds i16, i16* %442, i64 %716
  %718 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 %715
  %719 = bitcast <2 x i64>* %718 to <8 x i16>*
  %720 = load <8 x i16>, <8 x i16>* %719, align 16
  %721 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %720, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #7
  %722 = ashr <8 x i16> %721, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %723 = bitcast i16* %717 to <8 x i16>*
  %724 = load <8 x i16>, <8 x i16>* %723, align 16
  %725 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %724, <8 x i16> %722) #7
  %726 = icmp sgt <8 x i16> %725, zeroinitializer
  %727 = select <8 x i1> %726, <8 x i16> %725, <8 x i16> zeroinitializer
  %728 = icmp slt <8 x i16> %727, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %729 = select <8 x i1> %728, <8 x i16> %727, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  store <8 x i16> %729, <8 x i16>* %723, align 16
  %730 = add nuw nsw i64 %700, 2
  %731 = icmp eq i64 %730, 32
  br i1 %731, label %732, label %699

732:                                              ; preds = %699
  %733 = getelementptr inbounds i16, i16* %442, i64 8
  %734 = add nuw nsw i64 %441, 8
  %735 = icmp ult i64 %734, 32
  br i1 %735, label %440, label %736

736:                                              ; preds = %732
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %12) #7
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %11) #7
  br label %1256

737:                                              ; preds = %4
  %738 = bitcast [8 x [32 x <2 x i64>]]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %738) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %738, i8 -86, i64 4096, i1 false)
  %739 = bitcast [32 x <2 x i64>]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %739) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %739, i8 -86, i64 512, i1 false)
  br label %774

740:                                              ; preds = %774
  %741 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 0
  %742 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 1
  %743 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 2
  %744 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 3
  %745 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 4
  %746 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 5
  %747 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 6
  %748 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 7
  %749 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 8
  %750 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 9
  %751 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 10
  %752 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 11
  %753 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 12
  %754 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 13
  %755 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 14
  %756 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 15
  %757 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 16
  %758 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 17
  %759 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 18
  %760 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 19
  %761 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 20
  %762 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 21
  %763 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 22
  %764 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 23
  %765 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 24
  %766 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 25
  %767 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 26
  %768 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 27
  %769 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 28
  %770 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 29
  %771 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 30
  %772 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 31
  %773 = sext i32 %2 to i64
  br label %1031

774:                                              ; preds = %774, %737
  %775 = phi i64 [ 0, %737 ], [ %1029, %774 ]
  %776 = phi i32* [ %0, %737 ], [ %1028, %774 ]
  %777 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 0
  %778 = bitcast i32* %776 to <2 x i64>*
  %779 = load <2 x i64>, <2 x i64>* %778, align 16
  store <2 x i64> %779, <2 x i64>* %777, align 16
  %780 = getelementptr inbounds i32, i32* %776, i64 4
  %781 = bitcast i32* %780 to <2 x i64>*
  %782 = load <2 x i64>, <2 x i64>* %781, align 16
  %783 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 1
  store <2 x i64> %782, <2 x i64>* %783, align 16
  %784 = getelementptr inbounds i32, i32* %776, i64 32
  %785 = bitcast i32* %784 to <2 x i64>*
  %786 = load <2 x i64>, <2 x i64>* %785, align 16
  %787 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 2
  store <2 x i64> %786, <2 x i64>* %787, align 16
  %788 = getelementptr inbounds i32, i32* %776, i64 36
  %789 = bitcast i32* %788 to <2 x i64>*
  %790 = load <2 x i64>, <2 x i64>* %789, align 16
  %791 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 3
  store <2 x i64> %790, <2 x i64>* %791, align 16
  %792 = getelementptr inbounds i32, i32* %776, i64 64
  %793 = bitcast i32* %792 to <2 x i64>*
  %794 = load <2 x i64>, <2 x i64>* %793, align 16
  %795 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 4
  store <2 x i64> %794, <2 x i64>* %795, align 16
  %796 = getelementptr inbounds i32, i32* %776, i64 68
  %797 = bitcast i32* %796 to <2 x i64>*
  %798 = load <2 x i64>, <2 x i64>* %797, align 16
  %799 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 5
  store <2 x i64> %798, <2 x i64>* %799, align 16
  %800 = getelementptr inbounds i32, i32* %776, i64 96
  %801 = bitcast i32* %800 to <2 x i64>*
  %802 = load <2 x i64>, <2 x i64>* %801, align 16
  %803 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 6
  store <2 x i64> %802, <2 x i64>* %803, align 16
  %804 = getelementptr inbounds i32, i32* %776, i64 100
  %805 = bitcast i32* %804 to <4 x i32>*
  %806 = load <4 x i32>, <4 x i32>* %805, align 16
  %807 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 7
  %808 = bitcast <2 x i64> %779 to <4 x i32>
  %809 = bitcast <2 x i64> %786 to <4 x i32>
  %810 = shufflevector <4 x i32> %808, <4 x i32> %809, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %811 = bitcast <4 x i32> %810 to <2 x i64>
  %812 = bitcast <2 x i64> %794 to <4 x i32>
  %813 = bitcast <2 x i64> %802 to <4 x i32>
  %814 = shufflevector <4 x i32> %812, <4 x i32> %813, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %815 = bitcast <4 x i32> %814 to <2 x i64>
  %816 = shufflevector <4 x i32> %808, <4 x i32> %809, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %817 = bitcast <4 x i32> %816 to <2 x i64>
  %818 = shufflevector <4 x i32> %812, <4 x i32> %813, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %819 = bitcast <4 x i32> %818 to <2 x i64>
  %820 = bitcast <2 x i64> %782 to <4 x i32>
  %821 = bitcast <2 x i64> %790 to <4 x i32>
  %822 = shufflevector <4 x i32> %820, <4 x i32> %821, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %823 = bitcast <4 x i32> %822 to <2 x i64>
  %824 = bitcast <2 x i64> %798 to <4 x i32>
  %825 = shufflevector <4 x i32> %824, <4 x i32> %806, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %826 = bitcast <4 x i32> %825 to <2 x i64>
  %827 = shufflevector <4 x i32> %820, <4 x i32> %821, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %828 = bitcast <4 x i32> %827 to <2 x i64>
  %829 = shufflevector <4 x i32> %824, <4 x i32> %806, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %830 = bitcast <4 x i32> %829 to <2 x i64>
  %831 = shufflevector <2 x i64> %811, <2 x i64> %815, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %831, <2 x i64>* %777, align 16
  %832 = shufflevector <2 x i64> %811, <2 x i64> %815, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %832, <2 x i64>* %783, align 16
  %833 = shufflevector <2 x i64> %817, <2 x i64> %819, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %833, <2 x i64>* %787, align 16
  %834 = shufflevector <2 x i64> %817, <2 x i64> %819, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %834, <2 x i64>* %791, align 16
  %835 = shufflevector <2 x i64> %823, <2 x i64> %826, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %835, <2 x i64>* %795, align 16
  %836 = shufflevector <2 x i64> %823, <2 x i64> %826, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %836, <2 x i64>* %799, align 16
  %837 = shufflevector <2 x i64> %828, <2 x i64> %830, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %837, <2 x i64>* %803, align 16
  %838 = shufflevector <2 x i64> %828, <2 x i64> %830, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %838, <2 x i64>* %807, align 16
  %839 = getelementptr inbounds i32, i32* %776, i64 8
  %840 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 8
  %841 = bitcast i32* %839 to <2 x i64>*
  %842 = load <2 x i64>, <2 x i64>* %841, align 16
  store <2 x i64> %842, <2 x i64>* %840, align 16
  %843 = getelementptr inbounds i32, i32* %776, i64 12
  %844 = bitcast i32* %843 to <2 x i64>*
  %845 = load <2 x i64>, <2 x i64>* %844, align 16
  %846 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 9
  store <2 x i64> %845, <2 x i64>* %846, align 16
  %847 = getelementptr inbounds i32, i32* %776, i64 40
  %848 = bitcast i32* %847 to <2 x i64>*
  %849 = load <2 x i64>, <2 x i64>* %848, align 16
  %850 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 10
  store <2 x i64> %849, <2 x i64>* %850, align 16
  %851 = getelementptr inbounds i32, i32* %776, i64 44
  %852 = bitcast i32* %851 to <2 x i64>*
  %853 = load <2 x i64>, <2 x i64>* %852, align 16
  %854 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 11
  store <2 x i64> %853, <2 x i64>* %854, align 16
  %855 = getelementptr inbounds i32, i32* %776, i64 72
  %856 = bitcast i32* %855 to <2 x i64>*
  %857 = load <2 x i64>, <2 x i64>* %856, align 16
  %858 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 12
  store <2 x i64> %857, <2 x i64>* %858, align 16
  %859 = getelementptr inbounds i32, i32* %776, i64 76
  %860 = bitcast i32* %859 to <2 x i64>*
  %861 = load <2 x i64>, <2 x i64>* %860, align 16
  %862 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 13
  store <2 x i64> %861, <2 x i64>* %862, align 16
  %863 = getelementptr inbounds i32, i32* %776, i64 104
  %864 = bitcast i32* %863 to <2 x i64>*
  %865 = load <2 x i64>, <2 x i64>* %864, align 16
  %866 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 14
  store <2 x i64> %865, <2 x i64>* %866, align 16
  %867 = getelementptr inbounds i32, i32* %776, i64 108
  %868 = bitcast i32* %867 to <4 x i32>*
  %869 = load <4 x i32>, <4 x i32>* %868, align 16
  %870 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 15
  %871 = bitcast <2 x i64> %842 to <4 x i32>
  %872 = bitcast <2 x i64> %849 to <4 x i32>
  %873 = shufflevector <4 x i32> %871, <4 x i32> %872, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %874 = bitcast <4 x i32> %873 to <2 x i64>
  %875 = bitcast <2 x i64> %857 to <4 x i32>
  %876 = bitcast <2 x i64> %865 to <4 x i32>
  %877 = shufflevector <4 x i32> %875, <4 x i32> %876, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %878 = bitcast <4 x i32> %877 to <2 x i64>
  %879 = shufflevector <4 x i32> %871, <4 x i32> %872, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %880 = bitcast <4 x i32> %879 to <2 x i64>
  %881 = shufflevector <4 x i32> %875, <4 x i32> %876, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %882 = bitcast <4 x i32> %881 to <2 x i64>
  %883 = bitcast <2 x i64> %845 to <4 x i32>
  %884 = bitcast <2 x i64> %853 to <4 x i32>
  %885 = shufflevector <4 x i32> %883, <4 x i32> %884, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %886 = bitcast <4 x i32> %885 to <2 x i64>
  %887 = bitcast <2 x i64> %861 to <4 x i32>
  %888 = shufflevector <4 x i32> %887, <4 x i32> %869, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %889 = bitcast <4 x i32> %888 to <2 x i64>
  %890 = shufflevector <4 x i32> %883, <4 x i32> %884, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %891 = bitcast <4 x i32> %890 to <2 x i64>
  %892 = shufflevector <4 x i32> %887, <4 x i32> %869, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %893 = bitcast <4 x i32> %892 to <2 x i64>
  %894 = shufflevector <2 x i64> %874, <2 x i64> %878, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %894, <2 x i64>* %840, align 16
  %895 = shufflevector <2 x i64> %874, <2 x i64> %878, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %895, <2 x i64>* %846, align 16
  %896 = shufflevector <2 x i64> %880, <2 x i64> %882, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %896, <2 x i64>* %850, align 16
  %897 = shufflevector <2 x i64> %880, <2 x i64> %882, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %897, <2 x i64>* %854, align 16
  %898 = shufflevector <2 x i64> %886, <2 x i64> %889, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %898, <2 x i64>* %858, align 16
  %899 = shufflevector <2 x i64> %886, <2 x i64> %889, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %899, <2 x i64>* %862, align 16
  %900 = shufflevector <2 x i64> %891, <2 x i64> %893, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %900, <2 x i64>* %866, align 16
  %901 = shufflevector <2 x i64> %891, <2 x i64> %893, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %901, <2 x i64>* %870, align 16
  %902 = getelementptr inbounds i32, i32* %776, i64 16
  %903 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 16
  %904 = bitcast i32* %902 to <2 x i64>*
  %905 = load <2 x i64>, <2 x i64>* %904, align 16
  store <2 x i64> %905, <2 x i64>* %903, align 16
  %906 = getelementptr inbounds i32, i32* %776, i64 20
  %907 = bitcast i32* %906 to <2 x i64>*
  %908 = load <2 x i64>, <2 x i64>* %907, align 16
  %909 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 17
  store <2 x i64> %908, <2 x i64>* %909, align 16
  %910 = getelementptr inbounds i32, i32* %776, i64 48
  %911 = bitcast i32* %910 to <2 x i64>*
  %912 = load <2 x i64>, <2 x i64>* %911, align 16
  %913 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 18
  store <2 x i64> %912, <2 x i64>* %913, align 16
  %914 = getelementptr inbounds i32, i32* %776, i64 52
  %915 = bitcast i32* %914 to <2 x i64>*
  %916 = load <2 x i64>, <2 x i64>* %915, align 16
  %917 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 19
  store <2 x i64> %916, <2 x i64>* %917, align 16
  %918 = getelementptr inbounds i32, i32* %776, i64 80
  %919 = bitcast i32* %918 to <2 x i64>*
  %920 = load <2 x i64>, <2 x i64>* %919, align 16
  %921 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 20
  store <2 x i64> %920, <2 x i64>* %921, align 16
  %922 = getelementptr inbounds i32, i32* %776, i64 84
  %923 = bitcast i32* %922 to <2 x i64>*
  %924 = load <2 x i64>, <2 x i64>* %923, align 16
  %925 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 21
  store <2 x i64> %924, <2 x i64>* %925, align 16
  %926 = getelementptr inbounds i32, i32* %776, i64 112
  %927 = bitcast i32* %926 to <2 x i64>*
  %928 = load <2 x i64>, <2 x i64>* %927, align 16
  %929 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 22
  store <2 x i64> %928, <2 x i64>* %929, align 16
  %930 = getelementptr inbounds i32, i32* %776, i64 116
  %931 = bitcast i32* %930 to <4 x i32>*
  %932 = load <4 x i32>, <4 x i32>* %931, align 16
  %933 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 23
  %934 = bitcast <2 x i64> %905 to <4 x i32>
  %935 = bitcast <2 x i64> %912 to <4 x i32>
  %936 = shufflevector <4 x i32> %934, <4 x i32> %935, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %937 = bitcast <4 x i32> %936 to <2 x i64>
  %938 = bitcast <2 x i64> %920 to <4 x i32>
  %939 = bitcast <2 x i64> %928 to <4 x i32>
  %940 = shufflevector <4 x i32> %938, <4 x i32> %939, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %941 = bitcast <4 x i32> %940 to <2 x i64>
  %942 = shufflevector <4 x i32> %934, <4 x i32> %935, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %943 = bitcast <4 x i32> %942 to <2 x i64>
  %944 = shufflevector <4 x i32> %938, <4 x i32> %939, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %945 = bitcast <4 x i32> %944 to <2 x i64>
  %946 = bitcast <2 x i64> %908 to <4 x i32>
  %947 = bitcast <2 x i64> %916 to <4 x i32>
  %948 = shufflevector <4 x i32> %946, <4 x i32> %947, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %949 = bitcast <4 x i32> %948 to <2 x i64>
  %950 = bitcast <2 x i64> %924 to <4 x i32>
  %951 = shufflevector <4 x i32> %950, <4 x i32> %932, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %952 = bitcast <4 x i32> %951 to <2 x i64>
  %953 = shufflevector <4 x i32> %946, <4 x i32> %947, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %954 = bitcast <4 x i32> %953 to <2 x i64>
  %955 = shufflevector <4 x i32> %950, <4 x i32> %932, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %956 = bitcast <4 x i32> %955 to <2 x i64>
  %957 = shufflevector <2 x i64> %937, <2 x i64> %941, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %957, <2 x i64>* %903, align 16
  %958 = shufflevector <2 x i64> %937, <2 x i64> %941, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %958, <2 x i64>* %909, align 16
  %959 = shufflevector <2 x i64> %943, <2 x i64> %945, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %959, <2 x i64>* %913, align 16
  %960 = shufflevector <2 x i64> %943, <2 x i64> %945, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %960, <2 x i64>* %917, align 16
  %961 = shufflevector <2 x i64> %949, <2 x i64> %952, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %961, <2 x i64>* %921, align 16
  %962 = shufflevector <2 x i64> %949, <2 x i64> %952, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %962, <2 x i64>* %925, align 16
  %963 = shufflevector <2 x i64> %954, <2 x i64> %956, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %963, <2 x i64>* %929, align 16
  %964 = shufflevector <2 x i64> %954, <2 x i64> %956, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %964, <2 x i64>* %933, align 16
  %965 = getelementptr inbounds i32, i32* %776, i64 24
  %966 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 24
  %967 = bitcast i32* %965 to <2 x i64>*
  %968 = load <2 x i64>, <2 x i64>* %967, align 16
  store <2 x i64> %968, <2 x i64>* %966, align 16
  %969 = getelementptr inbounds i32, i32* %776, i64 28
  %970 = bitcast i32* %969 to <2 x i64>*
  %971 = load <2 x i64>, <2 x i64>* %970, align 16
  %972 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 25
  store <2 x i64> %971, <2 x i64>* %972, align 16
  %973 = getelementptr inbounds i32, i32* %776, i64 56
  %974 = bitcast i32* %973 to <2 x i64>*
  %975 = load <2 x i64>, <2 x i64>* %974, align 16
  %976 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 26
  store <2 x i64> %975, <2 x i64>* %976, align 16
  %977 = getelementptr inbounds i32, i32* %776, i64 60
  %978 = bitcast i32* %977 to <2 x i64>*
  %979 = load <2 x i64>, <2 x i64>* %978, align 16
  %980 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 27
  store <2 x i64> %979, <2 x i64>* %980, align 16
  %981 = getelementptr inbounds i32, i32* %776, i64 88
  %982 = bitcast i32* %981 to <2 x i64>*
  %983 = load <2 x i64>, <2 x i64>* %982, align 16
  %984 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 28
  store <2 x i64> %983, <2 x i64>* %984, align 16
  %985 = getelementptr inbounds i32, i32* %776, i64 92
  %986 = bitcast i32* %985 to <2 x i64>*
  %987 = load <2 x i64>, <2 x i64>* %986, align 16
  %988 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 29
  store <2 x i64> %987, <2 x i64>* %988, align 16
  %989 = getelementptr inbounds i32, i32* %776, i64 120
  %990 = bitcast i32* %989 to <2 x i64>*
  %991 = load <2 x i64>, <2 x i64>* %990, align 16
  %992 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 30
  store <2 x i64> %991, <2 x i64>* %992, align 16
  %993 = getelementptr inbounds i32, i32* %776, i64 124
  %994 = bitcast i32* %993 to <4 x i32>*
  %995 = load <4 x i32>, <4 x i32>* %994, align 16
  %996 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 %775, i64 31
  %997 = bitcast <2 x i64> %968 to <4 x i32>
  %998 = bitcast <2 x i64> %975 to <4 x i32>
  %999 = shufflevector <4 x i32> %997, <4 x i32> %998, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1000 = bitcast <4 x i32> %999 to <2 x i64>
  %1001 = bitcast <2 x i64> %983 to <4 x i32>
  %1002 = bitcast <2 x i64> %991 to <4 x i32>
  %1003 = shufflevector <4 x i32> %1001, <4 x i32> %1002, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1004 = bitcast <4 x i32> %1003 to <2 x i64>
  %1005 = shufflevector <4 x i32> %997, <4 x i32> %998, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1006 = bitcast <4 x i32> %1005 to <2 x i64>
  %1007 = shufflevector <4 x i32> %1001, <4 x i32> %1002, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1008 = bitcast <4 x i32> %1007 to <2 x i64>
  %1009 = bitcast <2 x i64> %971 to <4 x i32>
  %1010 = bitcast <2 x i64> %979 to <4 x i32>
  %1011 = shufflevector <4 x i32> %1009, <4 x i32> %1010, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1012 = bitcast <4 x i32> %1011 to <2 x i64>
  %1013 = bitcast <2 x i64> %987 to <4 x i32>
  %1014 = shufflevector <4 x i32> %1013, <4 x i32> %995, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1015 = bitcast <4 x i32> %1014 to <2 x i64>
  %1016 = shufflevector <4 x i32> %1009, <4 x i32> %1010, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1017 = bitcast <4 x i32> %1016 to <2 x i64>
  %1018 = shufflevector <4 x i32> %1013, <4 x i32> %995, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1019 = bitcast <4 x i32> %1018 to <2 x i64>
  %1020 = shufflevector <2 x i64> %1000, <2 x i64> %1004, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1020, <2 x i64>* %966, align 16
  %1021 = shufflevector <2 x i64> %1000, <2 x i64> %1004, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1021, <2 x i64>* %972, align 16
  %1022 = shufflevector <2 x i64> %1006, <2 x i64> %1008, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1022, <2 x i64>* %976, align 16
  %1023 = shufflevector <2 x i64> %1006, <2 x i64> %1008, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1023, <2 x i64>* %980, align 16
  %1024 = shufflevector <2 x i64> %1012, <2 x i64> %1015, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1024, <2 x i64>* %984, align 16
  %1025 = shufflevector <2 x i64> %1012, <2 x i64> %1015, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1025, <2 x i64>* %988, align 16
  %1026 = shufflevector <2 x i64> %1017, <2 x i64> %1019, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1026, <2 x i64>* %992, align 16
  %1027 = shufflevector <2 x i64> %1017, <2 x i64> %1019, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1027, <2 x i64>* %996, align 16
  call fastcc void @highbd_idct32_1024_4x32(<2 x i64>* %777)
  %1028 = getelementptr inbounds i32, i32* %776, i64 128
  %1029 = add nuw nsw i64 %775, 1
  %1030 = icmp eq i64 %1029, 8
  br i1 %1030, label %740, label %774

1031:                                             ; preds = %740, %1251
  %1032 = phi i64 [ 0, %740 ], [ %1253, %1251 ]
  %1033 = phi i16* [ %1, %740 ], [ %1252, %1251 ]
  %1034 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 0, i64 %1032
  %1035 = bitcast <2 x i64>* %1034 to <4 x i32>*
  %1036 = load <4 x i32>, <4 x i32>* %1035, align 16
  %1037 = getelementptr inbounds <2 x i64>, <2 x i64>* %1034, i64 1
  %1038 = bitcast <2 x i64>* %1037 to <4 x i32>*
  %1039 = load <4 x i32>, <4 x i32>* %1038, align 16
  %1040 = shufflevector <4 x i32> %1036, <4 x i32> %1039, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1041 = bitcast <4 x i32> %1040 to <2 x i64>
  %1042 = getelementptr inbounds <2 x i64>, <2 x i64>* %1034, i64 2
  %1043 = bitcast <2 x i64>* %1042 to <4 x i32>*
  %1044 = load <4 x i32>, <4 x i32>* %1043, align 16
  %1045 = getelementptr inbounds <2 x i64>, <2 x i64>* %1034, i64 3
  %1046 = bitcast <2 x i64>* %1045 to <4 x i32>*
  %1047 = load <4 x i32>, <4 x i32>* %1046, align 16
  %1048 = shufflevector <4 x i32> %1044, <4 x i32> %1047, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1049 = bitcast <4 x i32> %1048 to <2 x i64>
  %1050 = shufflevector <4 x i32> %1036, <4 x i32> %1039, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1051 = bitcast <4 x i32> %1050 to <2 x i64>
  %1052 = shufflevector <4 x i32> %1044, <4 x i32> %1047, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1053 = bitcast <4 x i32> %1052 to <2 x i64>
  %1054 = shufflevector <2 x i64> %1041, <2 x i64> %1049, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1054, <2 x i64>* %741, align 16
  %1055 = shufflevector <2 x i64> %1041, <2 x i64> %1049, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1055, <2 x i64>* %742, align 16
  %1056 = shufflevector <2 x i64> %1051, <2 x i64> %1053, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1056, <2 x i64>* %743, align 16
  %1057 = shufflevector <2 x i64> %1051, <2 x i64> %1053, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1057, <2 x i64>* %744, align 16
  %1058 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 1, i64 %1032
  %1059 = bitcast <2 x i64>* %1058 to <4 x i32>*
  %1060 = load <4 x i32>, <4 x i32>* %1059, align 16
  %1061 = getelementptr inbounds <2 x i64>, <2 x i64>* %1058, i64 1
  %1062 = bitcast <2 x i64>* %1061 to <4 x i32>*
  %1063 = load <4 x i32>, <4 x i32>* %1062, align 16
  %1064 = shufflevector <4 x i32> %1060, <4 x i32> %1063, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1065 = bitcast <4 x i32> %1064 to <2 x i64>
  %1066 = getelementptr inbounds <2 x i64>, <2 x i64>* %1058, i64 2
  %1067 = bitcast <2 x i64>* %1066 to <4 x i32>*
  %1068 = load <4 x i32>, <4 x i32>* %1067, align 16
  %1069 = getelementptr inbounds <2 x i64>, <2 x i64>* %1058, i64 3
  %1070 = bitcast <2 x i64>* %1069 to <4 x i32>*
  %1071 = load <4 x i32>, <4 x i32>* %1070, align 16
  %1072 = shufflevector <4 x i32> %1068, <4 x i32> %1071, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1073 = bitcast <4 x i32> %1072 to <2 x i64>
  %1074 = shufflevector <4 x i32> %1060, <4 x i32> %1063, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1075 = bitcast <4 x i32> %1074 to <2 x i64>
  %1076 = shufflevector <4 x i32> %1068, <4 x i32> %1071, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1077 = bitcast <4 x i32> %1076 to <2 x i64>
  %1078 = shufflevector <2 x i64> %1065, <2 x i64> %1073, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1078, <2 x i64>* %745, align 16
  %1079 = shufflevector <2 x i64> %1065, <2 x i64> %1073, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1079, <2 x i64>* %746, align 16
  %1080 = shufflevector <2 x i64> %1075, <2 x i64> %1077, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1080, <2 x i64>* %747, align 16
  %1081 = shufflevector <2 x i64> %1075, <2 x i64> %1077, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1081, <2 x i64>* %748, align 16
  %1082 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 2, i64 %1032
  %1083 = bitcast <2 x i64>* %1082 to <4 x i32>*
  %1084 = load <4 x i32>, <4 x i32>* %1083, align 16
  %1085 = getelementptr inbounds <2 x i64>, <2 x i64>* %1082, i64 1
  %1086 = bitcast <2 x i64>* %1085 to <4 x i32>*
  %1087 = load <4 x i32>, <4 x i32>* %1086, align 16
  %1088 = shufflevector <4 x i32> %1084, <4 x i32> %1087, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1089 = bitcast <4 x i32> %1088 to <2 x i64>
  %1090 = getelementptr inbounds <2 x i64>, <2 x i64>* %1082, i64 2
  %1091 = bitcast <2 x i64>* %1090 to <4 x i32>*
  %1092 = load <4 x i32>, <4 x i32>* %1091, align 16
  %1093 = getelementptr inbounds <2 x i64>, <2 x i64>* %1082, i64 3
  %1094 = bitcast <2 x i64>* %1093 to <4 x i32>*
  %1095 = load <4 x i32>, <4 x i32>* %1094, align 16
  %1096 = shufflevector <4 x i32> %1092, <4 x i32> %1095, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1097 = bitcast <4 x i32> %1096 to <2 x i64>
  %1098 = shufflevector <4 x i32> %1084, <4 x i32> %1087, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1099 = bitcast <4 x i32> %1098 to <2 x i64>
  %1100 = shufflevector <4 x i32> %1092, <4 x i32> %1095, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1101 = bitcast <4 x i32> %1100 to <2 x i64>
  %1102 = shufflevector <2 x i64> %1089, <2 x i64> %1097, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1102, <2 x i64>* %749, align 16
  %1103 = shufflevector <2 x i64> %1089, <2 x i64> %1097, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1103, <2 x i64>* %750, align 16
  %1104 = shufflevector <2 x i64> %1099, <2 x i64> %1101, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1104, <2 x i64>* %751, align 16
  %1105 = shufflevector <2 x i64> %1099, <2 x i64> %1101, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1105, <2 x i64>* %752, align 16
  %1106 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 3, i64 %1032
  %1107 = bitcast <2 x i64>* %1106 to <4 x i32>*
  %1108 = load <4 x i32>, <4 x i32>* %1107, align 16
  %1109 = getelementptr inbounds <2 x i64>, <2 x i64>* %1106, i64 1
  %1110 = bitcast <2 x i64>* %1109 to <4 x i32>*
  %1111 = load <4 x i32>, <4 x i32>* %1110, align 16
  %1112 = shufflevector <4 x i32> %1108, <4 x i32> %1111, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1113 = bitcast <4 x i32> %1112 to <2 x i64>
  %1114 = getelementptr inbounds <2 x i64>, <2 x i64>* %1106, i64 2
  %1115 = bitcast <2 x i64>* %1114 to <4 x i32>*
  %1116 = load <4 x i32>, <4 x i32>* %1115, align 16
  %1117 = getelementptr inbounds <2 x i64>, <2 x i64>* %1106, i64 3
  %1118 = bitcast <2 x i64>* %1117 to <4 x i32>*
  %1119 = load <4 x i32>, <4 x i32>* %1118, align 16
  %1120 = shufflevector <4 x i32> %1116, <4 x i32> %1119, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1121 = bitcast <4 x i32> %1120 to <2 x i64>
  %1122 = shufflevector <4 x i32> %1108, <4 x i32> %1111, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1123 = bitcast <4 x i32> %1122 to <2 x i64>
  %1124 = shufflevector <4 x i32> %1116, <4 x i32> %1119, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1125 = bitcast <4 x i32> %1124 to <2 x i64>
  %1126 = shufflevector <2 x i64> %1113, <2 x i64> %1121, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1126, <2 x i64>* %753, align 16
  %1127 = shufflevector <2 x i64> %1113, <2 x i64> %1121, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1127, <2 x i64>* %754, align 16
  %1128 = shufflevector <2 x i64> %1123, <2 x i64> %1125, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1128, <2 x i64>* %755, align 16
  %1129 = shufflevector <2 x i64> %1123, <2 x i64> %1125, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1129, <2 x i64>* %756, align 16
  %1130 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 4, i64 %1032
  %1131 = bitcast <2 x i64>* %1130 to <4 x i32>*
  %1132 = load <4 x i32>, <4 x i32>* %1131, align 16
  %1133 = getelementptr inbounds <2 x i64>, <2 x i64>* %1130, i64 1
  %1134 = bitcast <2 x i64>* %1133 to <4 x i32>*
  %1135 = load <4 x i32>, <4 x i32>* %1134, align 16
  %1136 = shufflevector <4 x i32> %1132, <4 x i32> %1135, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1137 = bitcast <4 x i32> %1136 to <2 x i64>
  %1138 = getelementptr inbounds <2 x i64>, <2 x i64>* %1130, i64 2
  %1139 = bitcast <2 x i64>* %1138 to <4 x i32>*
  %1140 = load <4 x i32>, <4 x i32>* %1139, align 16
  %1141 = getelementptr inbounds <2 x i64>, <2 x i64>* %1130, i64 3
  %1142 = bitcast <2 x i64>* %1141 to <4 x i32>*
  %1143 = load <4 x i32>, <4 x i32>* %1142, align 16
  %1144 = shufflevector <4 x i32> %1140, <4 x i32> %1143, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1145 = bitcast <4 x i32> %1144 to <2 x i64>
  %1146 = shufflevector <4 x i32> %1132, <4 x i32> %1135, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1147 = bitcast <4 x i32> %1146 to <2 x i64>
  %1148 = shufflevector <4 x i32> %1140, <4 x i32> %1143, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1149 = bitcast <4 x i32> %1148 to <2 x i64>
  %1150 = shufflevector <2 x i64> %1137, <2 x i64> %1145, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1150, <2 x i64>* %757, align 16
  %1151 = shufflevector <2 x i64> %1137, <2 x i64> %1145, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1151, <2 x i64>* %758, align 16
  %1152 = shufflevector <2 x i64> %1147, <2 x i64> %1149, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1152, <2 x i64>* %759, align 16
  %1153 = shufflevector <2 x i64> %1147, <2 x i64> %1149, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1153, <2 x i64>* %760, align 16
  %1154 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 5, i64 %1032
  %1155 = bitcast <2 x i64>* %1154 to <4 x i32>*
  %1156 = load <4 x i32>, <4 x i32>* %1155, align 16
  %1157 = getelementptr inbounds <2 x i64>, <2 x i64>* %1154, i64 1
  %1158 = bitcast <2 x i64>* %1157 to <4 x i32>*
  %1159 = load <4 x i32>, <4 x i32>* %1158, align 16
  %1160 = shufflevector <4 x i32> %1156, <4 x i32> %1159, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1161 = bitcast <4 x i32> %1160 to <2 x i64>
  %1162 = getelementptr inbounds <2 x i64>, <2 x i64>* %1154, i64 2
  %1163 = bitcast <2 x i64>* %1162 to <4 x i32>*
  %1164 = load <4 x i32>, <4 x i32>* %1163, align 16
  %1165 = getelementptr inbounds <2 x i64>, <2 x i64>* %1154, i64 3
  %1166 = bitcast <2 x i64>* %1165 to <4 x i32>*
  %1167 = load <4 x i32>, <4 x i32>* %1166, align 16
  %1168 = shufflevector <4 x i32> %1164, <4 x i32> %1167, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1169 = bitcast <4 x i32> %1168 to <2 x i64>
  %1170 = shufflevector <4 x i32> %1156, <4 x i32> %1159, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1171 = bitcast <4 x i32> %1170 to <2 x i64>
  %1172 = shufflevector <4 x i32> %1164, <4 x i32> %1167, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1173 = bitcast <4 x i32> %1172 to <2 x i64>
  %1174 = shufflevector <2 x i64> %1161, <2 x i64> %1169, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1174, <2 x i64>* %761, align 16
  %1175 = shufflevector <2 x i64> %1161, <2 x i64> %1169, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1175, <2 x i64>* %762, align 16
  %1176 = shufflevector <2 x i64> %1171, <2 x i64> %1173, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1176, <2 x i64>* %763, align 16
  %1177 = shufflevector <2 x i64> %1171, <2 x i64> %1173, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1177, <2 x i64>* %764, align 16
  %1178 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 6, i64 %1032
  %1179 = bitcast <2 x i64>* %1178 to <4 x i32>*
  %1180 = load <4 x i32>, <4 x i32>* %1179, align 16
  %1181 = getelementptr inbounds <2 x i64>, <2 x i64>* %1178, i64 1
  %1182 = bitcast <2 x i64>* %1181 to <4 x i32>*
  %1183 = load <4 x i32>, <4 x i32>* %1182, align 16
  %1184 = shufflevector <4 x i32> %1180, <4 x i32> %1183, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1185 = bitcast <4 x i32> %1184 to <2 x i64>
  %1186 = getelementptr inbounds <2 x i64>, <2 x i64>* %1178, i64 2
  %1187 = bitcast <2 x i64>* %1186 to <4 x i32>*
  %1188 = load <4 x i32>, <4 x i32>* %1187, align 16
  %1189 = getelementptr inbounds <2 x i64>, <2 x i64>* %1178, i64 3
  %1190 = bitcast <2 x i64>* %1189 to <4 x i32>*
  %1191 = load <4 x i32>, <4 x i32>* %1190, align 16
  %1192 = shufflevector <4 x i32> %1188, <4 x i32> %1191, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1193 = bitcast <4 x i32> %1192 to <2 x i64>
  %1194 = shufflevector <4 x i32> %1180, <4 x i32> %1183, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1195 = bitcast <4 x i32> %1194 to <2 x i64>
  %1196 = shufflevector <4 x i32> %1188, <4 x i32> %1191, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1197 = bitcast <4 x i32> %1196 to <2 x i64>
  %1198 = shufflevector <2 x i64> %1185, <2 x i64> %1193, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1198, <2 x i64>* %765, align 16
  %1199 = shufflevector <2 x i64> %1185, <2 x i64> %1193, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1199, <2 x i64>* %766, align 16
  %1200 = shufflevector <2 x i64> %1195, <2 x i64> %1197, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1200, <2 x i64>* %767, align 16
  %1201 = shufflevector <2 x i64> %1195, <2 x i64> %1197, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1201, <2 x i64>* %768, align 16
  %1202 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %7, i64 0, i64 7, i64 %1032
  %1203 = bitcast <2 x i64>* %1202 to <4 x i32>*
  %1204 = load <4 x i32>, <4 x i32>* %1203, align 16
  %1205 = getelementptr inbounds <2 x i64>, <2 x i64>* %1202, i64 1
  %1206 = bitcast <2 x i64>* %1205 to <4 x i32>*
  %1207 = load <4 x i32>, <4 x i32>* %1206, align 16
  %1208 = shufflevector <4 x i32> %1204, <4 x i32> %1207, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1209 = bitcast <4 x i32> %1208 to <2 x i64>
  %1210 = getelementptr inbounds <2 x i64>, <2 x i64>* %1202, i64 2
  %1211 = bitcast <2 x i64>* %1210 to <4 x i32>*
  %1212 = load <4 x i32>, <4 x i32>* %1211, align 16
  %1213 = getelementptr inbounds <2 x i64>, <2 x i64>* %1202, i64 3
  %1214 = bitcast <2 x i64>* %1213 to <4 x i32>*
  %1215 = load <4 x i32>, <4 x i32>* %1214, align 16
  %1216 = shufflevector <4 x i32> %1212, <4 x i32> %1215, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1217 = bitcast <4 x i32> %1216 to <2 x i64>
  %1218 = shufflevector <4 x i32> %1204, <4 x i32> %1207, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1219 = bitcast <4 x i32> %1218 to <2 x i64>
  %1220 = shufflevector <4 x i32> %1212, <4 x i32> %1215, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %1221 = bitcast <4 x i32> %1220 to <2 x i64>
  %1222 = shufflevector <2 x i64> %1209, <2 x i64> %1217, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1222, <2 x i64>* %769, align 16
  %1223 = shufflevector <2 x i64> %1209, <2 x i64> %1217, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1223, <2 x i64>* %770, align 16
  %1224 = shufflevector <2 x i64> %1219, <2 x i64> %1221, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %1224, <2 x i64>* %771, align 16
  %1225 = shufflevector <2 x i64> %1219, <2 x i64> %1221, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %1225, <2 x i64>* %772, align 16
  call fastcc void @highbd_idct32_1024_4x32(<2 x i64>* nonnull %741)
  %1226 = call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, i32 %3) #7
  %1227 = add <8 x i16> %1226, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  br label %1228

1228:                                             ; preds = %1228, %1031
  %1229 = phi i64 [ 0, %1031 ], [ %1249, %1228 ]
  %1230 = mul nsw i64 %1229, %773
  %1231 = getelementptr inbounds i16, i16* %1033, i64 %1230
  %1232 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %8, i64 0, i64 %1229
  %1233 = bitcast <2 x i64>* %1232 to <4 x i32>*
  %1234 = load <4 x i32>, <4 x i32>* %1233, align 16
  %1235 = add <4 x i32> %1234, <i32 32, i32 32, i32 32, i32 32>
  %1236 = ashr <4 x i32> %1235, <i32 6, i32 6, i32 6, i32 6>
  %1237 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %1236, <4 x i32> %1236) #7
  %1238 = bitcast i16* %1231 to i64*
  %1239 = load i64, i64* %1238, align 1
  %1240 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %1239, i32 0
  %1241 = bitcast <2 x i64> %1240 to <8 x i16>
  %1242 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %1241, <8 x i16> %1237) #7
  %1243 = icmp sgt <8 x i16> %1242, zeroinitializer
  %1244 = select <8 x i1> %1243, <8 x i16> %1242, <8 x i16> zeroinitializer
  %1245 = icmp slt <8 x i16> %1244, %1227
  %1246 = select <8 x i1> %1245, <8 x i16> %1244, <8 x i16> %1227
  %1247 = bitcast <8 x i16> %1246 to <2 x i64>
  %1248 = extractelement <2 x i64> %1247, i32 0
  store i64 %1248, i64* %1238, align 1
  %1249 = add nuw nsw i64 %1229, 1
  %1250 = icmp eq i64 %1249, 32
  br i1 %1250, label %1251, label %1228

1251:                                             ; preds = %1228
  %1252 = getelementptr inbounds i16, i16* %1033, i64 4
  %1253 = add nuw nsw i64 %1032, 4
  %1254 = icmp ult i64 %1253, 32
  br i1 %1254, label %1031, label %1255

1255:                                             ; preds = %1251
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %739) #7
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %738) #7
  br label %1256

1256:                                             ; preds = %1255, %736
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare void @idct32_1024_8x32(<2 x i64>*, <2 x i64>*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @highbd_idct32_1024_4x32(<2 x i64>*) unnamed_addr #0 {
  %2 = alloca [32 x <2 x i64>], align 16
  %3 = alloca [32 x <2 x i64>], align 16
  %4 = bitcast [32 x <2 x i64>]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %4) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 512, i1 false)
  %5 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 0
  %6 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 4
  %7 = bitcast <2 x i64>* %6 to <4 x i32>*
  %8 = load <4 x i32>, <4 x i32>* %7, align 16
  %9 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 28
  %10 = bitcast <2 x i64>* %9 to <4 x i32>*
  %11 = load <4 x i32>, <4 x i32>* %10, align 16
  %12 = ashr <4 x i32> %8, <i32 31, i32 31, i32 31, i32 31>
  %13 = xor <4 x i32> %12, %8
  %14 = sub <4 x i32> %13, %12
  %15 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %16 = bitcast <4 x i32> %15 to <2 x i64>
  %17 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %18 = bitcast <4 x i32> %17 to <2 x i64>
  %19 = shufflevector <4 x i32> %14, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %20 = bitcast <4 x i32> %19 to <2 x i64>
  %21 = shufflevector <4 x i32> %14, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %22 = bitcast <4 x i32> %21 to <2 x i64>
  %23 = ashr <4 x i32> %11, <i32 31, i32 31, i32 31, i32 31>
  %24 = xor <4 x i32> %23, %11
  %25 = sub <4 x i32> %24, %23
  %26 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %27 = bitcast <4 x i32> %26 to <2 x i64>
  %28 = shufflevector <4 x i32> %23, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %29 = bitcast <4 x i32> %28 to <2 x i64>
  %30 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %31 = bitcast <4 x i32> %30 to <2 x i64>
  %32 = shufflevector <4 x i32> %25, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %33 = bitcast <4 x i32> %32 to <2 x i64>
  %34 = and <2 x i64> %22, <i64 4294967295, i64 4294967295>
  %35 = mul nuw nsw <2 x i64> %34, <i64 64276, i64 64276>
  %36 = xor <2 x i64> %35, %18
  %37 = and <2 x i64> %20, <i64 4294967295, i64 4294967295>
  %38 = mul nuw nsw <2 x i64> %37, <i64 64276, i64 64276>
  %39 = xor <2 x i64> %38, %16
  %40 = mul nuw nsw <2 x i64> %34, <i64 12784, i64 12784>
  %41 = xor <2 x i64> %40, %18
  %42 = mul nuw nsw <2 x i64> %37, <i64 12784, i64 12784>
  %43 = xor <2 x i64> %42, %16
  %44 = and <2 x i64> %33, <i64 4294967295, i64 4294967295>
  %45 = mul nuw nsw <2 x i64> %44, <i64 12784, i64 12784>
  %46 = xor <2 x i64> %45, %29
  %47 = and <2 x i64> %31, <i64 4294967295, i64 4294967295>
  %48 = mul nuw nsw <2 x i64> %47, <i64 12784, i64 12784>
  %49 = xor <2 x i64> %48, %27
  %50 = mul nuw nsw <2 x i64> %44, <i64 64276, i64 64276>
  %51 = xor <2 x i64> %50, %29
  %52 = mul nuw nsw <2 x i64> %47, <i64 64276, i64 64276>
  %53 = xor <2 x i64> %52, %27
  %54 = sub <2 x i64> <i64 32768, i64 32768>, %18
  %55 = add <2 x i64> %54, %29
  %56 = add <2 x i64> %55, %41
  %57 = sub <2 x i64> %56, %51
  %58 = bitcast <2 x i64> %57 to <16 x i8>
  %59 = shufflevector <16 x i8> %58, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %60 = sub <2 x i64> <i64 32768, i64 32768>, %16
  %61 = add <2 x i64> %60, %27
  %62 = add <2 x i64> %61, %43
  %63 = sub <2 x i64> %62, %53
  %64 = bitcast <2 x i64> %63 to <16 x i8>
  %65 = shufflevector <16 x i8> %64, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %66 = sub <2 x i64> %54, %29
  %67 = add <2 x i64> %66, %36
  %68 = add <2 x i64> %67, %46
  %69 = bitcast <2 x i64> %68 to <16 x i8>
  %70 = shufflevector <16 x i8> %69, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %71 = sub <2 x i64> %60, %27
  %72 = add <2 x i64> %71, %39
  %73 = add <2 x i64> %72, %49
  %74 = bitcast <2 x i64> %73 to <16 x i8>
  %75 = shufflevector <16 x i8> %74, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %76 = bitcast <16 x i8> %59 to <4 x i32>
  %77 = bitcast <16 x i8> %65 to <4 x i32>
  %78 = shufflevector <4 x i32> %76, <4 x i32> %77, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %79 = shufflevector <4 x i32> %76, <4 x i32> %77, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %80 = shufflevector <4 x i32> %78, <4 x i32> %79, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %81 = bitcast <16 x i8> %70 to <4 x i32>
  %82 = bitcast <16 x i8> %75 to <4 x i32>
  %83 = shufflevector <4 x i32> %81, <4 x i32> %82, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %84 = shufflevector <4 x i32> %81, <4 x i32> %82, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %85 = shufflevector <4 x i32> %83, <4 x i32> %84, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %86 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 20
  %87 = bitcast <2 x i64>* %86 to <4 x i32>*
  %88 = load <4 x i32>, <4 x i32>* %87, align 16
  %89 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 12
  %90 = bitcast <2 x i64>* %89 to <4 x i32>*
  %91 = load <4 x i32>, <4 x i32>* %90, align 16
  %92 = ashr <4 x i32> %88, <i32 31, i32 31, i32 31, i32 31>
  %93 = xor <4 x i32> %92, %88
  %94 = sub <4 x i32> %93, %92
  %95 = shufflevector <4 x i32> %92, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %96 = bitcast <4 x i32> %95 to <2 x i64>
  %97 = shufflevector <4 x i32> %92, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %98 = bitcast <4 x i32> %97 to <2 x i64>
  %99 = shufflevector <4 x i32> %94, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %100 = bitcast <4 x i32> %99 to <2 x i64>
  %101 = shufflevector <4 x i32> %94, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %102 = bitcast <4 x i32> %101 to <2 x i64>
  %103 = ashr <4 x i32> %91, <i32 31, i32 31, i32 31, i32 31>
  %104 = xor <4 x i32> %103, %91
  %105 = sub <4 x i32> %104, %103
  %106 = shufflevector <4 x i32> %103, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %107 = bitcast <4 x i32> %106 to <2 x i64>
  %108 = shufflevector <4 x i32> %103, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %109 = bitcast <4 x i32> %108 to <2 x i64>
  %110 = shufflevector <4 x i32> %105, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %111 = bitcast <4 x i32> %110 to <2 x i64>
  %112 = shufflevector <4 x i32> %105, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %113 = bitcast <4 x i32> %112 to <2 x i64>
  %114 = and <2 x i64> %102, <i64 4294967295, i64 4294967295>
  %115 = mul nuw nsw <2 x i64> %114, <i64 36408, i64 36408>
  %116 = xor <2 x i64> %115, %98
  %117 = and <2 x i64> %100, <i64 4294967295, i64 4294967295>
  %118 = mul nuw nsw <2 x i64> %117, <i64 36408, i64 36408>
  %119 = xor <2 x i64> %118, %96
  %120 = mul nuw nsw <2 x i64> %114, <i64 54492, i64 54492>
  %121 = xor <2 x i64> %120, %98
  %122 = mul nuw nsw <2 x i64> %117, <i64 54492, i64 54492>
  %123 = xor <2 x i64> %122, %96
  %124 = and <2 x i64> %113, <i64 4294967295, i64 4294967295>
  %125 = mul nuw nsw <2 x i64> %124, <i64 54492, i64 54492>
  %126 = xor <2 x i64> %125, %109
  %127 = and <2 x i64> %111, <i64 4294967295, i64 4294967295>
  %128 = mul nuw nsw <2 x i64> %127, <i64 54492, i64 54492>
  %129 = xor <2 x i64> %128, %107
  %130 = mul nuw nsw <2 x i64> %124, <i64 36408, i64 36408>
  %131 = xor <2 x i64> %130, %109
  %132 = mul nuw nsw <2 x i64> %127, <i64 36408, i64 36408>
  %133 = xor <2 x i64> %132, %107
  %134 = sub <2 x i64> <i64 32768, i64 32768>, %98
  %135 = add <2 x i64> %134, %109
  %136 = add <2 x i64> %135, %121
  %137 = sub <2 x i64> %136, %131
  %138 = bitcast <2 x i64> %137 to <16 x i8>
  %139 = shufflevector <16 x i8> %138, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %140 = sub <2 x i64> <i64 32768, i64 32768>, %96
  %141 = add <2 x i64> %140, %107
  %142 = add <2 x i64> %141, %123
  %143 = sub <2 x i64> %142, %133
  %144 = bitcast <2 x i64> %143 to <16 x i8>
  %145 = shufflevector <16 x i8> %144, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %146 = sub <2 x i64> %134, %109
  %147 = add <2 x i64> %146, %116
  %148 = add <2 x i64> %147, %126
  %149 = bitcast <2 x i64> %148 to <16 x i8>
  %150 = shufflevector <16 x i8> %149, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %151 = sub <2 x i64> %140, %107
  %152 = add <2 x i64> %151, %119
  %153 = add <2 x i64> %152, %129
  %154 = bitcast <2 x i64> %153 to <16 x i8>
  %155 = shufflevector <16 x i8> %154, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %156 = bitcast <16 x i8> %139 to <4 x i32>
  %157 = bitcast <16 x i8> %145 to <4 x i32>
  %158 = shufflevector <4 x i32> %156, <4 x i32> %157, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %159 = shufflevector <4 x i32> %156, <4 x i32> %157, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %160 = shufflevector <4 x i32> %158, <4 x i32> %159, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %161 = bitcast <16 x i8> %150 to <4 x i32>
  %162 = bitcast <16 x i8> %155 to <4 x i32>
  %163 = shufflevector <4 x i32> %161, <4 x i32> %162, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %164 = shufflevector <4 x i32> %161, <4 x i32> %162, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %165 = shufflevector <4 x i32> %163, <4 x i32> %164, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %166 = bitcast <2 x i64>* %0 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 16
  %168 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 16
  %169 = bitcast <2 x i64>* %168 to <4 x i32>*
  %170 = load <4 x i32>, <4 x i32>* %169, align 16
  %171 = ashr <4 x i32> %167, <i32 31, i32 31, i32 31, i32 31>
  %172 = xor <4 x i32> %171, %167
  %173 = sub <4 x i32> %172, %171
  %174 = shufflevector <4 x i32> %171, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %175 = bitcast <4 x i32> %174 to <2 x i64>
  %176 = shufflevector <4 x i32> %171, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %177 = bitcast <4 x i32> %176 to <2 x i64>
  %178 = shufflevector <4 x i32> %173, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %179 = bitcast <4 x i32> %178 to <2 x i64>
  %180 = shufflevector <4 x i32> %173, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %181 = bitcast <4 x i32> %180 to <2 x i64>
  %182 = ashr <4 x i32> %170, <i32 31, i32 31, i32 31, i32 31>
  %183 = xor <4 x i32> %182, %170
  %184 = sub <4 x i32> %183, %182
  %185 = shufflevector <4 x i32> %182, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %186 = bitcast <4 x i32> %185 to <2 x i64>
  %187 = shufflevector <4 x i32> %182, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %188 = bitcast <4 x i32> %187 to <2 x i64>
  %189 = shufflevector <4 x i32> %184, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %190 = bitcast <4 x i32> %189 to <2 x i64>
  %191 = shufflevector <4 x i32> %184, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %192 = bitcast <4 x i32> %191 to <2 x i64>
  %193 = and <2 x i64> %181, <i64 4294967295, i64 4294967295>
  %194 = mul nuw nsw <2 x i64> %193, <i64 46340, i64 46340>
  %195 = xor <2 x i64> %194, %177
  %196 = and <2 x i64> %179, <i64 4294967295, i64 4294967295>
  %197 = mul nuw nsw <2 x i64> %196, <i64 46340, i64 46340>
  %198 = xor <2 x i64> %197, %175
  %199 = and <2 x i64> %192, <i64 4294967295, i64 4294967295>
  %200 = mul nuw nsw <2 x i64> %199, <i64 46340, i64 46340>
  %201 = xor <2 x i64> %200, %188
  %202 = and <2 x i64> %190, <i64 4294967295, i64 4294967295>
  %203 = mul nuw nsw <2 x i64> %202, <i64 46340, i64 46340>
  %204 = xor <2 x i64> %203, %186
  %205 = sub <2 x i64> <i64 32768, i64 32768>, %177
  %206 = add <2 x i64> %205, %188
  %207 = add <2 x i64> %206, %195
  %208 = sub <2 x i64> %207, %201
  %209 = bitcast <2 x i64> %208 to <16 x i8>
  %210 = shufflevector <16 x i8> %209, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %211 = sub <2 x i64> <i64 32768, i64 32768>, %175
  %212 = add <2 x i64> %211, %186
  %213 = add <2 x i64> %212, %198
  %214 = sub <2 x i64> %213, %204
  %215 = bitcast <2 x i64> %214 to <16 x i8>
  %216 = shufflevector <16 x i8> %215, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %217 = sub <2 x i64> %205, %188
  %218 = add <2 x i64> %217, %195
  %219 = add <2 x i64> %218, %201
  %220 = bitcast <2 x i64> %219 to <16 x i8>
  %221 = shufflevector <16 x i8> %220, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %222 = sub <2 x i64> %211, %186
  %223 = add <2 x i64> %222, %198
  %224 = add <2 x i64> %223, %204
  %225 = bitcast <2 x i64> %224 to <16 x i8>
  %226 = shufflevector <16 x i8> %225, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %227 = bitcast <16 x i8> %210 to <4 x i32>
  %228 = bitcast <16 x i8> %216 to <4 x i32>
  %229 = shufflevector <4 x i32> %227, <4 x i32> %228, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %230 = shufflevector <4 x i32> %227, <4 x i32> %228, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %231 = shufflevector <4 x i32> %229, <4 x i32> %230, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %232 = bitcast <16 x i8> %221 to <4 x i32>
  %233 = bitcast <16 x i8> %226 to <4 x i32>
  %234 = shufflevector <4 x i32> %232, <4 x i32> %233, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %235 = shufflevector <4 x i32> %232, <4 x i32> %233, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %236 = shufflevector <4 x i32> %234, <4 x i32> %235, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %237 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 8
  %238 = bitcast <2 x i64>* %237 to <4 x i32>*
  %239 = load <4 x i32>, <4 x i32>* %238, align 16
  %240 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 24
  %241 = bitcast <2 x i64>* %240 to <4 x i32>*
  %242 = load <4 x i32>, <4 x i32>* %241, align 16
  %243 = ashr <4 x i32> %239, <i32 31, i32 31, i32 31, i32 31>
  %244 = xor <4 x i32> %243, %239
  %245 = sub <4 x i32> %244, %243
  %246 = shufflevector <4 x i32> %243, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %247 = bitcast <4 x i32> %246 to <2 x i64>
  %248 = shufflevector <4 x i32> %243, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %249 = bitcast <4 x i32> %248 to <2 x i64>
  %250 = shufflevector <4 x i32> %245, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %251 = bitcast <4 x i32> %250 to <2 x i64>
  %252 = shufflevector <4 x i32> %245, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %253 = bitcast <4 x i32> %252 to <2 x i64>
  %254 = ashr <4 x i32> %242, <i32 31, i32 31, i32 31, i32 31>
  %255 = xor <4 x i32> %254, %242
  %256 = sub <4 x i32> %255, %254
  %257 = shufflevector <4 x i32> %254, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %258 = bitcast <4 x i32> %257 to <2 x i64>
  %259 = shufflevector <4 x i32> %254, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %260 = bitcast <4 x i32> %259 to <2 x i64>
  %261 = shufflevector <4 x i32> %256, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %262 = bitcast <4 x i32> %261 to <2 x i64>
  %263 = shufflevector <4 x i32> %256, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %264 = bitcast <4 x i32> %263 to <2 x i64>
  %265 = and <2 x i64> %253, <i64 4294967295, i64 4294967295>
  %266 = mul nuw nsw <2 x i64> %265, <i64 60548, i64 60548>
  %267 = xor <2 x i64> %266, %249
  %268 = and <2 x i64> %251, <i64 4294967295, i64 4294967295>
  %269 = mul nuw nsw <2 x i64> %268, <i64 60548, i64 60548>
  %270 = xor <2 x i64> %269, %247
  %271 = mul nuw nsw <2 x i64> %265, <i64 25080, i64 25080>
  %272 = xor <2 x i64> %271, %249
  %273 = mul nuw nsw <2 x i64> %268, <i64 25080, i64 25080>
  %274 = xor <2 x i64> %273, %247
  %275 = and <2 x i64> %264, <i64 4294967295, i64 4294967295>
  %276 = mul nuw nsw <2 x i64> %275, <i64 25080, i64 25080>
  %277 = xor <2 x i64> %276, %260
  %278 = and <2 x i64> %262, <i64 4294967295, i64 4294967295>
  %279 = mul nuw nsw <2 x i64> %278, <i64 25080, i64 25080>
  %280 = xor <2 x i64> %279, %258
  %281 = mul nuw nsw <2 x i64> %275, <i64 60548, i64 60548>
  %282 = xor <2 x i64> %281, %260
  %283 = mul nuw nsw <2 x i64> %278, <i64 60548, i64 60548>
  %284 = xor <2 x i64> %283, %258
  %285 = sub <2 x i64> <i64 32768, i64 32768>, %249
  %286 = add <2 x i64> %285, %260
  %287 = add <2 x i64> %286, %272
  %288 = sub <2 x i64> %287, %282
  %289 = bitcast <2 x i64> %288 to <16 x i8>
  %290 = shufflevector <16 x i8> %289, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %291 = sub <2 x i64> <i64 32768, i64 32768>, %247
  %292 = add <2 x i64> %291, %258
  %293 = add <2 x i64> %292, %274
  %294 = sub <2 x i64> %293, %284
  %295 = bitcast <2 x i64> %294 to <16 x i8>
  %296 = shufflevector <16 x i8> %295, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %297 = sub <2 x i64> %285, %260
  %298 = add <2 x i64> %297, %267
  %299 = add <2 x i64> %298, %277
  %300 = bitcast <2 x i64> %299 to <16 x i8>
  %301 = shufflevector <16 x i8> %300, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %302 = sub <2 x i64> %291, %258
  %303 = add <2 x i64> %302, %270
  %304 = add <2 x i64> %303, %280
  %305 = bitcast <2 x i64> %304 to <16 x i8>
  %306 = shufflevector <16 x i8> %305, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %307 = bitcast <16 x i8> %290 to <4 x i32>
  %308 = bitcast <16 x i8> %296 to <4 x i32>
  %309 = shufflevector <4 x i32> %307, <4 x i32> %308, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %310 = shufflevector <4 x i32> %307, <4 x i32> %308, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %311 = shufflevector <4 x i32> %309, <4 x i32> %310, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %312 = bitcast <16 x i8> %301 to <4 x i32>
  %313 = bitcast <16 x i8> %306 to <4 x i32>
  %314 = shufflevector <4 x i32> %312, <4 x i32> %313, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %315 = shufflevector <4 x i32> %312, <4 x i32> %313, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %316 = shufflevector <4 x i32> %314, <4 x i32> %315, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %317 = add <4 x i32> %160, %80
  %318 = sub <4 x i32> %80, %160
  %319 = sub <4 x i32> %85, %165
  %320 = add <4 x i32> %165, %85
  %321 = add <4 x i32> %316, %236
  %322 = add <4 x i32> %311, %231
  %323 = sub <4 x i32> %231, %311
  %324 = sub <4 x i32> %236, %316
  %325 = ashr <4 x i32> %319, <i32 31, i32 31, i32 31, i32 31>
  %326 = xor <4 x i32> %325, %319
  %327 = sub <4 x i32> %326, %325
  %328 = shufflevector <4 x i32> %325, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %329 = bitcast <4 x i32> %328 to <2 x i64>
  %330 = shufflevector <4 x i32> %325, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %331 = bitcast <4 x i32> %330 to <2 x i64>
  %332 = shufflevector <4 x i32> %327, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %333 = bitcast <4 x i32> %332 to <2 x i64>
  %334 = shufflevector <4 x i32> %327, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %335 = bitcast <4 x i32> %334 to <2 x i64>
  %336 = ashr <4 x i32> %318, <i32 31, i32 31, i32 31, i32 31>
  %337 = xor <4 x i32> %336, %318
  %338 = sub <4 x i32> %337, %336
  %339 = shufflevector <4 x i32> %336, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %340 = bitcast <4 x i32> %339 to <2 x i64>
  %341 = shufflevector <4 x i32> %336, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %342 = bitcast <4 x i32> %341 to <2 x i64>
  %343 = shufflevector <4 x i32> %338, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %344 = bitcast <4 x i32> %343 to <2 x i64>
  %345 = shufflevector <4 x i32> %338, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %346 = bitcast <4 x i32> %345 to <2 x i64>
  %347 = and <2 x i64> %335, <i64 4294967295, i64 4294967295>
  %348 = mul nuw nsw <2 x i64> %347, <i64 46340, i64 46340>
  %349 = xor <2 x i64> %348, %331
  %350 = and <2 x i64> %333, <i64 4294967295, i64 4294967295>
  %351 = mul nuw nsw <2 x i64> %350, <i64 46340, i64 46340>
  %352 = xor <2 x i64> %351, %329
  %353 = and <2 x i64> %346, <i64 4294967295, i64 4294967295>
  %354 = mul nuw nsw <2 x i64> %353, <i64 46340, i64 46340>
  %355 = xor <2 x i64> %354, %342
  %356 = and <2 x i64> %344, <i64 4294967295, i64 4294967295>
  %357 = mul nuw nsw <2 x i64> %356, <i64 46340, i64 46340>
  %358 = xor <2 x i64> %357, %340
  %359 = sub <2 x i64> <i64 32768, i64 32768>, %331
  %360 = add <2 x i64> %359, %342
  %361 = sub <2 x i64> %360, %355
  %362 = add <2 x i64> %361, %349
  %363 = bitcast <2 x i64> %362 to <16 x i8>
  %364 = shufflevector <16 x i8> %363, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %365 = sub <2 x i64> <i64 32768, i64 32768>, %329
  %366 = add <2 x i64> %365, %340
  %367 = sub <2 x i64> %366, %358
  %368 = add <2 x i64> %367, %352
  %369 = bitcast <2 x i64> %368 to <16 x i8>
  %370 = shufflevector <16 x i8> %369, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %371 = sub <2 x i64> %359, %342
  %372 = add <2 x i64> %371, %355
  %373 = add <2 x i64> %372, %349
  %374 = bitcast <2 x i64> %373 to <16 x i8>
  %375 = shufflevector <16 x i8> %374, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %376 = sub <2 x i64> %365, %340
  %377 = add <2 x i64> %376, %358
  %378 = add <2 x i64> %377, %352
  %379 = bitcast <2 x i64> %378 to <16 x i8>
  %380 = shufflevector <16 x i8> %379, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %381 = bitcast <16 x i8> %364 to <4 x i32>
  %382 = bitcast <16 x i8> %370 to <4 x i32>
  %383 = shufflevector <4 x i32> %381, <4 x i32> %382, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %384 = shufflevector <4 x i32> %381, <4 x i32> %382, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %385 = shufflevector <4 x i32> %383, <4 x i32> %384, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %386 = bitcast <16 x i8> %375 to <4 x i32>
  %387 = bitcast <16 x i8> %380 to <4 x i32>
  %388 = shufflevector <4 x i32> %386, <4 x i32> %387, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %389 = shufflevector <4 x i32> %386, <4 x i32> %387, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %390 = shufflevector <4 x i32> %388, <4 x i32> %389, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %391 = add <4 x i32> %321, %320
  %392 = add <4 x i32> %390, %322
  %393 = add <4 x i32> %385, %323
  %394 = add <4 x i32> %324, %317
  %395 = sub <4 x i32> %324, %317
  %396 = sub <4 x i32> %323, %385
  %397 = sub <4 x i32> %322, %390
  %398 = sub <4 x i32> %321, %320
  %399 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 2
  %400 = bitcast <2 x i64>* %399 to <4 x i32>*
  %401 = load <4 x i32>, <4 x i32>* %400, align 16
  %402 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 30
  %403 = bitcast <2 x i64>* %402 to <4 x i32>*
  %404 = load <4 x i32>, <4 x i32>* %403, align 16
  %405 = ashr <4 x i32> %401, <i32 31, i32 31, i32 31, i32 31>
  %406 = xor <4 x i32> %405, %401
  %407 = sub <4 x i32> %406, %405
  %408 = shufflevector <4 x i32> %405, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %409 = bitcast <4 x i32> %408 to <2 x i64>
  %410 = shufflevector <4 x i32> %405, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %411 = bitcast <4 x i32> %410 to <2 x i64>
  %412 = shufflevector <4 x i32> %407, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %413 = bitcast <4 x i32> %412 to <2 x i64>
  %414 = shufflevector <4 x i32> %407, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %415 = bitcast <4 x i32> %414 to <2 x i64>
  %416 = ashr <4 x i32> %404, <i32 31, i32 31, i32 31, i32 31>
  %417 = xor <4 x i32> %416, %404
  %418 = sub <4 x i32> %417, %416
  %419 = shufflevector <4 x i32> %416, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %420 = bitcast <4 x i32> %419 to <2 x i64>
  %421 = shufflevector <4 x i32> %416, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %422 = bitcast <4 x i32> %421 to <2 x i64>
  %423 = shufflevector <4 x i32> %418, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %424 = bitcast <4 x i32> %423 to <2 x i64>
  %425 = shufflevector <4 x i32> %418, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %426 = bitcast <4 x i32> %425 to <2 x i64>
  %427 = and <2 x i64> %415, <i64 4294967295, i64 4294967295>
  %428 = mul nuw nsw <2 x i64> %427, <i64 65220, i64 65220>
  %429 = xor <2 x i64> %428, %411
  %430 = and <2 x i64> %413, <i64 4294967295, i64 4294967295>
  %431 = mul nuw nsw <2 x i64> %430, <i64 65220, i64 65220>
  %432 = xor <2 x i64> %431, %409
  %433 = mul nuw nsw <2 x i64> %427, <i64 6424, i64 6424>
  %434 = xor <2 x i64> %433, %411
  %435 = mul nuw nsw <2 x i64> %430, <i64 6424, i64 6424>
  %436 = xor <2 x i64> %435, %409
  %437 = and <2 x i64> %426, <i64 4294967295, i64 4294967295>
  %438 = mul nuw nsw <2 x i64> %437, <i64 6424, i64 6424>
  %439 = xor <2 x i64> %438, %422
  %440 = and <2 x i64> %424, <i64 4294967295, i64 4294967295>
  %441 = mul nuw nsw <2 x i64> %440, <i64 6424, i64 6424>
  %442 = xor <2 x i64> %441, %420
  %443 = mul nuw nsw <2 x i64> %437, <i64 65220, i64 65220>
  %444 = xor <2 x i64> %443, %422
  %445 = mul nuw nsw <2 x i64> %440, <i64 65220, i64 65220>
  %446 = xor <2 x i64> %445, %420
  %447 = sub <2 x i64> <i64 32768, i64 32768>, %411
  %448 = add <2 x i64> %447, %422
  %449 = add <2 x i64> %448, %434
  %450 = sub <2 x i64> %449, %444
  %451 = bitcast <2 x i64> %450 to <16 x i8>
  %452 = shufflevector <16 x i8> %451, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %453 = sub <2 x i64> <i64 32768, i64 32768>, %409
  %454 = add <2 x i64> %453, %420
  %455 = add <2 x i64> %454, %436
  %456 = sub <2 x i64> %455, %446
  %457 = bitcast <2 x i64> %456 to <16 x i8>
  %458 = shufflevector <16 x i8> %457, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %459 = sub <2 x i64> %447, %422
  %460 = add <2 x i64> %459, %429
  %461 = add <2 x i64> %460, %439
  %462 = bitcast <2 x i64> %461 to <16 x i8>
  %463 = shufflevector <16 x i8> %462, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %464 = sub <2 x i64> %453, %420
  %465 = add <2 x i64> %464, %432
  %466 = add <2 x i64> %465, %442
  %467 = bitcast <2 x i64> %466 to <16 x i8>
  %468 = shufflevector <16 x i8> %467, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %469 = bitcast <16 x i8> %452 to <4 x i32>
  %470 = bitcast <16 x i8> %458 to <4 x i32>
  %471 = shufflevector <4 x i32> %469, <4 x i32> %470, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %472 = shufflevector <4 x i32> %469, <4 x i32> %470, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %473 = shufflevector <4 x i32> %471, <4 x i32> %472, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %474 = bitcast <16 x i8> %463 to <4 x i32>
  %475 = bitcast <16 x i8> %468 to <4 x i32>
  %476 = shufflevector <4 x i32> %474, <4 x i32> %475, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %477 = shufflevector <4 x i32> %474, <4 x i32> %475, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %478 = shufflevector <4 x i32> %476, <4 x i32> %477, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %479 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 18
  %480 = bitcast <2 x i64>* %479 to <4 x i32>*
  %481 = load <4 x i32>, <4 x i32>* %480, align 16
  %482 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 14
  %483 = bitcast <2 x i64>* %482 to <4 x i32>*
  %484 = load <4 x i32>, <4 x i32>* %483, align 16
  %485 = ashr <4 x i32> %481, <i32 31, i32 31, i32 31, i32 31>
  %486 = xor <4 x i32> %485, %481
  %487 = sub <4 x i32> %486, %485
  %488 = shufflevector <4 x i32> %485, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %489 = bitcast <4 x i32> %488 to <2 x i64>
  %490 = shufflevector <4 x i32> %485, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %491 = bitcast <4 x i32> %490 to <2 x i64>
  %492 = shufflevector <4 x i32> %487, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %493 = bitcast <4 x i32> %492 to <2 x i64>
  %494 = shufflevector <4 x i32> %487, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %495 = bitcast <4 x i32> %494 to <2 x i64>
  %496 = ashr <4 x i32> %484, <i32 31, i32 31, i32 31, i32 31>
  %497 = xor <4 x i32> %496, %484
  %498 = sub <4 x i32> %497, %496
  %499 = shufflevector <4 x i32> %496, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %500 = bitcast <4 x i32> %499 to <2 x i64>
  %501 = shufflevector <4 x i32> %496, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %502 = bitcast <4 x i32> %501 to <2 x i64>
  %503 = shufflevector <4 x i32> %498, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %504 = bitcast <4 x i32> %503 to <2 x i64>
  %505 = shufflevector <4 x i32> %498, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %506 = bitcast <4 x i32> %505 to <2 x i64>
  %507 = and <2 x i64> %495, <i64 4294967295, i64 4294967295>
  %508 = mul nuw nsw <2 x i64> %507, <i64 41576, i64 41576>
  %509 = xor <2 x i64> %508, %491
  %510 = and <2 x i64> %493, <i64 4294967295, i64 4294967295>
  %511 = mul nuw nsw <2 x i64> %510, <i64 41576, i64 41576>
  %512 = xor <2 x i64> %511, %489
  %513 = mul nuw nsw <2 x i64> %507, <i64 50660, i64 50660>
  %514 = xor <2 x i64> %513, %491
  %515 = mul nuw nsw <2 x i64> %510, <i64 50660, i64 50660>
  %516 = xor <2 x i64> %515, %489
  %517 = and <2 x i64> %506, <i64 4294967295, i64 4294967295>
  %518 = mul nuw nsw <2 x i64> %517, <i64 50660, i64 50660>
  %519 = xor <2 x i64> %518, %502
  %520 = and <2 x i64> %504, <i64 4294967295, i64 4294967295>
  %521 = mul nuw nsw <2 x i64> %520, <i64 50660, i64 50660>
  %522 = xor <2 x i64> %521, %500
  %523 = mul nuw nsw <2 x i64> %517, <i64 41576, i64 41576>
  %524 = xor <2 x i64> %523, %502
  %525 = mul nuw nsw <2 x i64> %520, <i64 41576, i64 41576>
  %526 = xor <2 x i64> %525, %500
  %527 = sub <2 x i64> <i64 32768, i64 32768>, %491
  %528 = add <2 x i64> %527, %502
  %529 = add <2 x i64> %528, %514
  %530 = sub <2 x i64> %529, %524
  %531 = bitcast <2 x i64> %530 to <16 x i8>
  %532 = shufflevector <16 x i8> %531, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %533 = sub <2 x i64> <i64 32768, i64 32768>, %489
  %534 = add <2 x i64> %533, %500
  %535 = add <2 x i64> %534, %516
  %536 = sub <2 x i64> %535, %526
  %537 = bitcast <2 x i64> %536 to <16 x i8>
  %538 = shufflevector <16 x i8> %537, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %539 = sub <2 x i64> %527, %502
  %540 = add <2 x i64> %539, %509
  %541 = add <2 x i64> %540, %519
  %542 = bitcast <2 x i64> %541 to <16 x i8>
  %543 = shufflevector <16 x i8> %542, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %544 = sub <2 x i64> %533, %500
  %545 = add <2 x i64> %544, %512
  %546 = add <2 x i64> %545, %522
  %547 = bitcast <2 x i64> %546 to <16 x i8>
  %548 = shufflevector <16 x i8> %547, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %549 = bitcast <16 x i8> %532 to <4 x i32>
  %550 = bitcast <16 x i8> %538 to <4 x i32>
  %551 = shufflevector <4 x i32> %549, <4 x i32> %550, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %552 = shufflevector <4 x i32> %549, <4 x i32> %550, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %553 = shufflevector <4 x i32> %551, <4 x i32> %552, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %554 = bitcast <16 x i8> %543 to <4 x i32>
  %555 = bitcast <16 x i8> %548 to <4 x i32>
  %556 = shufflevector <4 x i32> %554, <4 x i32> %555, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %557 = shufflevector <4 x i32> %554, <4 x i32> %555, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %558 = shufflevector <4 x i32> %556, <4 x i32> %557, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %559 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 10
  %560 = bitcast <2 x i64>* %559 to <4 x i32>*
  %561 = load <4 x i32>, <4 x i32>* %560, align 16
  %562 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 22
  %563 = bitcast <2 x i64>* %562 to <4 x i32>*
  %564 = load <4 x i32>, <4 x i32>* %563, align 16
  %565 = ashr <4 x i32> %561, <i32 31, i32 31, i32 31, i32 31>
  %566 = xor <4 x i32> %565, %561
  %567 = sub <4 x i32> %566, %565
  %568 = shufflevector <4 x i32> %565, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %569 = bitcast <4 x i32> %568 to <2 x i64>
  %570 = shufflevector <4 x i32> %565, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %571 = bitcast <4 x i32> %570 to <2 x i64>
  %572 = shufflevector <4 x i32> %567, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %573 = bitcast <4 x i32> %572 to <2 x i64>
  %574 = shufflevector <4 x i32> %567, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %575 = bitcast <4 x i32> %574 to <2 x i64>
  %576 = ashr <4 x i32> %564, <i32 31, i32 31, i32 31, i32 31>
  %577 = xor <4 x i32> %576, %564
  %578 = sub <4 x i32> %577, %576
  %579 = shufflevector <4 x i32> %576, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %580 = bitcast <4 x i32> %579 to <2 x i64>
  %581 = shufflevector <4 x i32> %576, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %582 = bitcast <4 x i32> %581 to <2 x i64>
  %583 = shufflevector <4 x i32> %578, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %584 = bitcast <4 x i32> %583 to <2 x i64>
  %585 = shufflevector <4 x i32> %578, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %586 = bitcast <4 x i32> %585 to <2 x i64>
  %587 = and <2 x i64> %575, <i64 4294967295, i64 4294967295>
  %588 = mul nuw nsw <2 x i64> %587, <i64 57796, i64 57796>
  %589 = xor <2 x i64> %588, %571
  %590 = and <2 x i64> %573, <i64 4294967295, i64 4294967295>
  %591 = mul nuw nsw <2 x i64> %590, <i64 57796, i64 57796>
  %592 = xor <2 x i64> %591, %569
  %593 = mul nuw nsw <2 x i64> %587, <i64 30892, i64 30892>
  %594 = xor <2 x i64> %593, %571
  %595 = mul nuw nsw <2 x i64> %590, <i64 30892, i64 30892>
  %596 = xor <2 x i64> %595, %569
  %597 = and <2 x i64> %586, <i64 4294967295, i64 4294967295>
  %598 = mul nuw nsw <2 x i64> %597, <i64 30892, i64 30892>
  %599 = xor <2 x i64> %598, %582
  %600 = and <2 x i64> %584, <i64 4294967295, i64 4294967295>
  %601 = mul nuw nsw <2 x i64> %600, <i64 30892, i64 30892>
  %602 = xor <2 x i64> %601, %580
  %603 = mul nuw nsw <2 x i64> %597, <i64 57796, i64 57796>
  %604 = xor <2 x i64> %603, %582
  %605 = mul nuw nsw <2 x i64> %600, <i64 57796, i64 57796>
  %606 = xor <2 x i64> %605, %580
  %607 = sub <2 x i64> <i64 32768, i64 32768>, %571
  %608 = add <2 x i64> %607, %582
  %609 = add <2 x i64> %608, %594
  %610 = sub <2 x i64> %609, %604
  %611 = bitcast <2 x i64> %610 to <16 x i8>
  %612 = shufflevector <16 x i8> %611, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %613 = sub <2 x i64> <i64 32768, i64 32768>, %569
  %614 = add <2 x i64> %613, %580
  %615 = add <2 x i64> %614, %596
  %616 = sub <2 x i64> %615, %606
  %617 = bitcast <2 x i64> %616 to <16 x i8>
  %618 = shufflevector <16 x i8> %617, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %619 = sub <2 x i64> %607, %582
  %620 = add <2 x i64> %619, %589
  %621 = add <2 x i64> %620, %599
  %622 = bitcast <2 x i64> %621 to <16 x i8>
  %623 = shufflevector <16 x i8> %622, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %624 = sub <2 x i64> %613, %580
  %625 = add <2 x i64> %624, %592
  %626 = add <2 x i64> %625, %602
  %627 = bitcast <2 x i64> %626 to <16 x i8>
  %628 = shufflevector <16 x i8> %627, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %629 = bitcast <16 x i8> %612 to <4 x i32>
  %630 = bitcast <16 x i8> %618 to <4 x i32>
  %631 = shufflevector <4 x i32> %629, <4 x i32> %630, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %632 = shufflevector <4 x i32> %629, <4 x i32> %630, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %633 = shufflevector <4 x i32> %631, <4 x i32> %632, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %634 = bitcast <16 x i8> %623 to <4 x i32>
  %635 = bitcast <16 x i8> %628 to <4 x i32>
  %636 = shufflevector <4 x i32> %634, <4 x i32> %635, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %637 = shufflevector <4 x i32> %634, <4 x i32> %635, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %638 = shufflevector <4 x i32> %636, <4 x i32> %637, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %639 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 26
  %640 = bitcast <2 x i64>* %639 to <4 x i32>*
  %641 = load <4 x i32>, <4 x i32>* %640, align 16
  %642 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 6
  %643 = bitcast <2 x i64>* %642 to <4 x i32>*
  %644 = load <4 x i32>, <4 x i32>* %643, align 16
  %645 = ashr <4 x i32> %641, <i32 31, i32 31, i32 31, i32 31>
  %646 = xor <4 x i32> %645, %641
  %647 = sub <4 x i32> %646, %645
  %648 = shufflevector <4 x i32> %645, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %649 = bitcast <4 x i32> %648 to <2 x i64>
  %650 = shufflevector <4 x i32> %645, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %651 = bitcast <4 x i32> %650 to <2 x i64>
  %652 = shufflevector <4 x i32> %647, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %653 = bitcast <4 x i32> %652 to <2 x i64>
  %654 = shufflevector <4 x i32> %647, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %655 = bitcast <4 x i32> %654 to <2 x i64>
  %656 = ashr <4 x i32> %644, <i32 31, i32 31, i32 31, i32 31>
  %657 = xor <4 x i32> %656, %644
  %658 = sub <4 x i32> %657, %656
  %659 = shufflevector <4 x i32> %656, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %660 = bitcast <4 x i32> %659 to <2 x i64>
  %661 = shufflevector <4 x i32> %656, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %662 = bitcast <4 x i32> %661 to <2 x i64>
  %663 = shufflevector <4 x i32> %658, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %664 = bitcast <4 x i32> %663 to <2 x i64>
  %665 = shufflevector <4 x i32> %658, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %666 = bitcast <4 x i32> %665 to <2 x i64>
  %667 = and <2 x i64> %655, <i64 4294967295, i64 4294967295>
  %668 = mul nuw nsw <2 x i64> %667, <i64 19024, i64 19024>
  %669 = xor <2 x i64> %668, %651
  %670 = and <2 x i64> %653, <i64 4294967295, i64 4294967295>
  %671 = mul nuw nsw <2 x i64> %670, <i64 19024, i64 19024>
  %672 = xor <2 x i64> %671, %649
  %673 = mul nuw nsw <2 x i64> %667, <i64 62716, i64 62716>
  %674 = xor <2 x i64> %673, %651
  %675 = mul nuw nsw <2 x i64> %670, <i64 62716, i64 62716>
  %676 = xor <2 x i64> %675, %649
  %677 = and <2 x i64> %666, <i64 4294967295, i64 4294967295>
  %678 = mul nuw nsw <2 x i64> %677, <i64 62716, i64 62716>
  %679 = xor <2 x i64> %678, %662
  %680 = and <2 x i64> %664, <i64 4294967295, i64 4294967295>
  %681 = mul nuw nsw <2 x i64> %680, <i64 62716, i64 62716>
  %682 = xor <2 x i64> %681, %660
  %683 = mul nuw nsw <2 x i64> %677, <i64 19024, i64 19024>
  %684 = xor <2 x i64> %683, %662
  %685 = mul nuw nsw <2 x i64> %680, <i64 19024, i64 19024>
  %686 = xor <2 x i64> %685, %660
  %687 = sub <2 x i64> <i64 32768, i64 32768>, %651
  %688 = add <2 x i64> %687, %662
  %689 = add <2 x i64> %688, %674
  %690 = sub <2 x i64> %689, %684
  %691 = bitcast <2 x i64> %690 to <16 x i8>
  %692 = shufflevector <16 x i8> %691, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %693 = sub <2 x i64> <i64 32768, i64 32768>, %649
  %694 = add <2 x i64> %693, %660
  %695 = add <2 x i64> %694, %676
  %696 = sub <2 x i64> %695, %686
  %697 = bitcast <2 x i64> %696 to <16 x i8>
  %698 = shufflevector <16 x i8> %697, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %699 = sub <2 x i64> %687, %662
  %700 = add <2 x i64> %699, %669
  %701 = add <2 x i64> %700, %679
  %702 = bitcast <2 x i64> %701 to <16 x i8>
  %703 = shufflevector <16 x i8> %702, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %704 = sub <2 x i64> %693, %660
  %705 = add <2 x i64> %704, %672
  %706 = add <2 x i64> %705, %682
  %707 = bitcast <2 x i64> %706 to <16 x i8>
  %708 = shufflevector <16 x i8> %707, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %709 = bitcast <16 x i8> %692 to <4 x i32>
  %710 = bitcast <16 x i8> %698 to <4 x i32>
  %711 = shufflevector <4 x i32> %709, <4 x i32> %710, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %712 = shufflevector <4 x i32> %709, <4 x i32> %710, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %713 = shufflevector <4 x i32> %711, <4 x i32> %712, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %714 = bitcast <16 x i8> %703 to <4 x i32>
  %715 = bitcast <16 x i8> %708 to <4 x i32>
  %716 = shufflevector <4 x i32> %714, <4 x i32> %715, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %717 = shufflevector <4 x i32> %714, <4 x i32> %715, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %718 = shufflevector <4 x i32> %716, <4 x i32> %717, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %719 = add <4 x i32> %553, %473
  %720 = sub <4 x i32> %473, %553
  %721 = sub <4 x i32> %478, %558
  %722 = add <4 x i32> %558, %478
  %723 = sub <4 x i32> %633, %713
  %724 = add <4 x i32> %713, %633
  %725 = add <4 x i32> %718, %638
  %726 = sub <4 x i32> %638, %718
  %727 = ashr <4 x i32> %721, <i32 31, i32 31, i32 31, i32 31>
  %728 = xor <4 x i32> %727, %721
  %729 = sub <4 x i32> %728, %727
  %730 = shufflevector <4 x i32> %727, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %731 = bitcast <4 x i32> %730 to <2 x i64>
  %732 = shufflevector <4 x i32> %727, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %733 = bitcast <4 x i32> %732 to <2 x i64>
  %734 = shufflevector <4 x i32> %729, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %735 = bitcast <4 x i32> %734 to <2 x i64>
  %736 = shufflevector <4 x i32> %729, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %737 = bitcast <4 x i32> %736 to <2 x i64>
  %738 = ashr <4 x i32> %720, <i32 31, i32 31, i32 31, i32 31>
  %739 = xor <4 x i32> %738, %720
  %740 = sub <4 x i32> %739, %738
  %741 = shufflevector <4 x i32> %738, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %742 = bitcast <4 x i32> %741 to <2 x i64>
  %743 = shufflevector <4 x i32> %738, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %744 = bitcast <4 x i32> %743 to <2 x i64>
  %745 = shufflevector <4 x i32> %740, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %746 = bitcast <4 x i32> %745 to <2 x i64>
  %747 = shufflevector <4 x i32> %740, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %748 = bitcast <4 x i32> %747 to <2 x i64>
  %749 = and <2 x i64> %737, <i64 4294967295, i64 4294967295>
  %750 = mul nuw nsw <2 x i64> %749, <i64 60548, i64 60548>
  %751 = xor <2 x i64> %750, %733
  %752 = and <2 x i64> %735, <i64 4294967295, i64 4294967295>
  %753 = mul nuw nsw <2 x i64> %752, <i64 60548, i64 60548>
  %754 = xor <2 x i64> %753, %731
  %755 = mul nuw nsw <2 x i64> %749, <i64 25080, i64 25080>
  %756 = xor <2 x i64> %755, %733
  %757 = mul nuw nsw <2 x i64> %752, <i64 25080, i64 25080>
  %758 = xor <2 x i64> %757, %731
  %759 = and <2 x i64> %748, <i64 4294967295, i64 4294967295>
  %760 = mul nuw nsw <2 x i64> %759, <i64 25080, i64 25080>
  %761 = xor <2 x i64> %760, %744
  %762 = and <2 x i64> %746, <i64 4294967295, i64 4294967295>
  %763 = mul nuw nsw <2 x i64> %762, <i64 25080, i64 25080>
  %764 = xor <2 x i64> %763, %742
  %765 = mul nuw nsw <2 x i64> %759, <i64 60548, i64 60548>
  %766 = xor <2 x i64> %765, %744
  %767 = mul nuw nsw <2 x i64> %762, <i64 60548, i64 60548>
  %768 = xor <2 x i64> %767, %742
  %769 = sub <2 x i64> <i64 32768, i64 32768>, %733
  %770 = add <2 x i64> %769, %744
  %771 = sub <2 x i64> %770, %766
  %772 = add <2 x i64> %771, %756
  %773 = bitcast <2 x i64> %772 to <16 x i8>
  %774 = shufflevector <16 x i8> %773, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %775 = sub <2 x i64> <i64 32768, i64 32768>, %731
  %776 = add <2 x i64> %775, %742
  %777 = sub <2 x i64> %776, %768
  %778 = add <2 x i64> %777, %758
  %779 = bitcast <2 x i64> %778 to <16 x i8>
  %780 = shufflevector <16 x i8> %779, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %781 = sub <2 x i64> %769, %744
  %782 = add <2 x i64> %781, %761
  %783 = add <2 x i64> %782, %751
  %784 = bitcast <2 x i64> %783 to <16 x i8>
  %785 = shufflevector <16 x i8> %784, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %786 = sub <2 x i64> %775, %742
  %787 = add <2 x i64> %786, %764
  %788 = add <2 x i64> %787, %754
  %789 = bitcast <2 x i64> %788 to <16 x i8>
  %790 = shufflevector <16 x i8> %789, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %791 = bitcast <16 x i8> %774 to <4 x i32>
  %792 = bitcast <16 x i8> %780 to <4 x i32>
  %793 = shufflevector <4 x i32> %791, <4 x i32> %792, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %794 = shufflevector <4 x i32> %791, <4 x i32> %792, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %795 = shufflevector <4 x i32> %793, <4 x i32> %794, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %796 = bitcast <16 x i8> %785 to <4 x i32>
  %797 = bitcast <16 x i8> %790 to <4 x i32>
  %798 = shufflevector <4 x i32> %796, <4 x i32> %797, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %799 = shufflevector <4 x i32> %796, <4 x i32> %797, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %800 = shufflevector <4 x i32> %798, <4 x i32> %799, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %801 = ashr <4 x i32> %723, <i32 31, i32 31, i32 31, i32 31>
  %802 = xor <4 x i32> %801, %723
  %803 = sub <4 x i32> %802, %801
  %804 = shufflevector <4 x i32> %801, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %805 = bitcast <4 x i32> %804 to <2 x i64>
  %806 = shufflevector <4 x i32> %801, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %807 = bitcast <4 x i32> %806 to <2 x i64>
  %808 = shufflevector <4 x i32> %803, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %809 = bitcast <4 x i32> %808 to <2 x i64>
  %810 = shufflevector <4 x i32> %803, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %811 = bitcast <4 x i32> %810 to <2 x i64>
  %812 = ashr <4 x i32> %726, <i32 31, i32 31, i32 31, i32 31>
  %813 = xor <4 x i32> %812, %726
  %814 = sub <4 x i32> %813, %812
  %815 = shufflevector <4 x i32> %812, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %816 = bitcast <4 x i32> %815 to <2 x i64>
  %817 = shufflevector <4 x i32> %812, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %818 = bitcast <4 x i32> %817 to <2 x i64>
  %819 = shufflevector <4 x i32> %814, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %820 = bitcast <4 x i32> %819 to <2 x i64>
  %821 = shufflevector <4 x i32> %814, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %822 = bitcast <4 x i32> %821 to <2 x i64>
  %823 = and <2 x i64> %811, <i64 4294967295, i64 4294967295>
  %824 = mul nuw nsw <2 x i64> %823, <i64 25080, i64 25080>
  %825 = xor <2 x i64> %824, %807
  %826 = and <2 x i64> %809, <i64 4294967295, i64 4294967295>
  %827 = mul nuw nsw <2 x i64> %826, <i64 25080, i64 25080>
  %828 = xor <2 x i64> %827, %805
  %829 = mul nuw nsw <2 x i64> %823, <i64 60548, i64 60548>
  %830 = xor <2 x i64> %829, %807
  %831 = mul nuw nsw <2 x i64> %826, <i64 60548, i64 60548>
  %832 = xor <2 x i64> %831, %805
  %833 = and <2 x i64> %822, <i64 4294967295, i64 4294967295>
  %834 = mul nuw nsw <2 x i64> %833, <i64 60548, i64 60548>
  %835 = xor <2 x i64> %834, %818
  %836 = and <2 x i64> %820, <i64 4294967295, i64 4294967295>
  %837 = mul nuw nsw <2 x i64> %836, <i64 60548, i64 60548>
  %838 = xor <2 x i64> %837, %816
  %839 = mul nuw nsw <2 x i64> %833, <i64 25080, i64 25080>
  %840 = xor <2 x i64> %839, %818
  %841 = mul nuw nsw <2 x i64> %836, <i64 25080, i64 25080>
  %842 = xor <2 x i64> %841, %816
  %843 = sub <2 x i64> <i64 32768, i64 32768>, %807
  %844 = add <2 x i64> %843, %818
  %845 = add <2 x i64> %844, %830
  %846 = sub <2 x i64> %845, %840
  %847 = bitcast <2 x i64> %846 to <16 x i8>
  %848 = shufflevector <16 x i8> %847, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %849 = sub <2 x i64> <i64 32768, i64 32768>, %805
  %850 = add <2 x i64> %849, %816
  %851 = add <2 x i64> %850, %832
  %852 = sub <2 x i64> %851, %842
  %853 = bitcast <2 x i64> %852 to <16 x i8>
  %854 = shufflevector <16 x i8> %853, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %855 = sub <2 x i64> %843, %818
  %856 = add <2 x i64> %855, %825
  %857 = add <2 x i64> %856, %835
  %858 = bitcast <2 x i64> %857 to <16 x i8>
  %859 = shufflevector <16 x i8> %858, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %860 = sub <2 x i64> %849, %816
  %861 = add <2 x i64> %860, %828
  %862 = add <2 x i64> %861, %838
  %863 = bitcast <2 x i64> %862 to <16 x i8>
  %864 = shufflevector <16 x i8> %863, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %865 = bitcast <16 x i8> %848 to <4 x i32>
  %866 = bitcast <16 x i8> %854 to <4 x i32>
  %867 = shufflevector <4 x i32> %865, <4 x i32> %866, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %868 = shufflevector <4 x i32> %865, <4 x i32> %866, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %869 = shufflevector <4 x i32> %867, <4 x i32> %868, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %870 = bitcast <16 x i8> %859 to <4 x i32>
  %871 = bitcast <16 x i8> %864 to <4 x i32>
  %872 = shufflevector <4 x i32> %870, <4 x i32> %871, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %873 = shufflevector <4 x i32> %870, <4 x i32> %871, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %874 = shufflevector <4 x i32> %872, <4 x i32> %873, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %875 = add <4 x i32> %724, %719
  %876 = add <4 x i32> %874, %795
  %877 = sub <4 x i32> %795, %874
  %878 = sub <4 x i32> %719, %724
  %879 = sub <4 x i32> %722, %725
  %880 = sub <4 x i32> %800, %869
  %881 = add <4 x i32> %869, %800
  %882 = add <4 x i32> %725, %722
  %883 = ashr <4 x i32> %880, <i32 31, i32 31, i32 31, i32 31>
  %884 = xor <4 x i32> %883, %880
  %885 = sub <4 x i32> %884, %883
  %886 = shufflevector <4 x i32> %883, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %887 = bitcast <4 x i32> %886 to <2 x i64>
  %888 = shufflevector <4 x i32> %883, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %889 = bitcast <4 x i32> %888 to <2 x i64>
  %890 = shufflevector <4 x i32> %885, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %891 = bitcast <4 x i32> %890 to <2 x i64>
  %892 = shufflevector <4 x i32> %885, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %893 = bitcast <4 x i32> %892 to <2 x i64>
  %894 = ashr <4 x i32> %877, <i32 31, i32 31, i32 31, i32 31>
  %895 = xor <4 x i32> %894, %877
  %896 = sub <4 x i32> %895, %894
  %897 = shufflevector <4 x i32> %894, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %898 = bitcast <4 x i32> %897 to <2 x i64>
  %899 = shufflevector <4 x i32> %894, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %900 = bitcast <4 x i32> %899 to <2 x i64>
  %901 = shufflevector <4 x i32> %896, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %902 = bitcast <4 x i32> %901 to <2 x i64>
  %903 = shufflevector <4 x i32> %896, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %904 = bitcast <4 x i32> %903 to <2 x i64>
  %905 = and <2 x i64> %893, <i64 4294967295, i64 4294967295>
  %906 = mul nuw nsw <2 x i64> %905, <i64 46340, i64 46340>
  %907 = xor <2 x i64> %906, %889
  %908 = and <2 x i64> %891, <i64 4294967295, i64 4294967295>
  %909 = mul nuw nsw <2 x i64> %908, <i64 46340, i64 46340>
  %910 = xor <2 x i64> %909, %887
  %911 = and <2 x i64> %904, <i64 4294967295, i64 4294967295>
  %912 = mul nuw nsw <2 x i64> %911, <i64 46340, i64 46340>
  %913 = xor <2 x i64> %912, %900
  %914 = and <2 x i64> %902, <i64 4294967295, i64 4294967295>
  %915 = mul nuw nsw <2 x i64> %914, <i64 46340, i64 46340>
  %916 = xor <2 x i64> %915, %898
  %917 = sub <2 x i64> <i64 32768, i64 32768>, %889
  %918 = add <2 x i64> %917, %900
  %919 = add <2 x i64> %918, %907
  %920 = sub <2 x i64> %919, %913
  %921 = bitcast <2 x i64> %920 to <16 x i8>
  %922 = shufflevector <16 x i8> %921, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %923 = sub <2 x i64> <i64 32768, i64 32768>, %887
  %924 = add <2 x i64> %923, %898
  %925 = add <2 x i64> %924, %910
  %926 = sub <2 x i64> %925, %916
  %927 = bitcast <2 x i64> %926 to <16 x i8>
  %928 = shufflevector <16 x i8> %927, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %929 = sub <2 x i64> %917, %900
  %930 = add <2 x i64> %929, %907
  %931 = add <2 x i64> %930, %913
  %932 = bitcast <2 x i64> %931 to <16 x i8>
  %933 = shufflevector <16 x i8> %932, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %934 = sub <2 x i64> %923, %898
  %935 = add <2 x i64> %934, %910
  %936 = add <2 x i64> %935, %916
  %937 = bitcast <2 x i64> %936 to <16 x i8>
  %938 = shufflevector <16 x i8> %937, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %939 = bitcast <16 x i8> %922 to <4 x i32>
  %940 = bitcast <16 x i8> %928 to <4 x i32>
  %941 = shufflevector <4 x i32> %939, <4 x i32> %940, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %942 = shufflevector <4 x i32> %939, <4 x i32> %940, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %943 = shufflevector <4 x i32> %941, <4 x i32> %942, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %944 = bitcast <16 x i8> %933 to <4 x i32>
  %945 = bitcast <16 x i8> %938 to <4 x i32>
  %946 = shufflevector <4 x i32> %944, <4 x i32> %945, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %947 = shufflevector <4 x i32> %944, <4 x i32> %945, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %948 = shufflevector <4 x i32> %946, <4 x i32> %947, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %949 = ashr <4 x i32> %879, <i32 31, i32 31, i32 31, i32 31>
  %950 = xor <4 x i32> %949, %879
  %951 = sub <4 x i32> %950, %949
  %952 = shufflevector <4 x i32> %949, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %953 = bitcast <4 x i32> %952 to <2 x i64>
  %954 = shufflevector <4 x i32> %949, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %955 = bitcast <4 x i32> %954 to <2 x i64>
  %956 = shufflevector <4 x i32> %951, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %957 = bitcast <4 x i32> %956 to <2 x i64>
  %958 = shufflevector <4 x i32> %951, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %959 = bitcast <4 x i32> %958 to <2 x i64>
  %960 = ashr <4 x i32> %878, <i32 31, i32 31, i32 31, i32 31>
  %961 = xor <4 x i32> %960, %878
  %962 = sub <4 x i32> %961, %960
  %963 = shufflevector <4 x i32> %960, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %964 = bitcast <4 x i32> %963 to <2 x i64>
  %965 = shufflevector <4 x i32> %960, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %966 = bitcast <4 x i32> %965 to <2 x i64>
  %967 = shufflevector <4 x i32> %962, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %968 = bitcast <4 x i32> %967 to <2 x i64>
  %969 = shufflevector <4 x i32> %962, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %970 = bitcast <4 x i32> %969 to <2 x i64>
  %971 = and <2 x i64> %959, <i64 4294967295, i64 4294967295>
  %972 = mul nuw nsw <2 x i64> %971, <i64 46340, i64 46340>
  %973 = xor <2 x i64> %972, %955
  %974 = and <2 x i64> %957, <i64 4294967295, i64 4294967295>
  %975 = mul nuw nsw <2 x i64> %974, <i64 46340, i64 46340>
  %976 = xor <2 x i64> %975, %953
  %977 = and <2 x i64> %970, <i64 4294967295, i64 4294967295>
  %978 = mul nuw nsw <2 x i64> %977, <i64 46340, i64 46340>
  %979 = xor <2 x i64> %978, %966
  %980 = and <2 x i64> %968, <i64 4294967295, i64 4294967295>
  %981 = mul nuw nsw <2 x i64> %980, <i64 46340, i64 46340>
  %982 = xor <2 x i64> %981, %964
  %983 = sub <2 x i64> <i64 32768, i64 32768>, %955
  %984 = add <2 x i64> %983, %966
  %985 = sub <2 x i64> %984, %979
  %986 = add <2 x i64> %985, %973
  %987 = bitcast <2 x i64> %986 to <16 x i8>
  %988 = shufflevector <16 x i8> %987, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %989 = sub <2 x i64> <i64 32768, i64 32768>, %953
  %990 = add <2 x i64> %989, %964
  %991 = sub <2 x i64> %990, %982
  %992 = add <2 x i64> %991, %976
  %993 = bitcast <2 x i64> %992 to <16 x i8>
  %994 = shufflevector <16 x i8> %993, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %995 = sub <2 x i64> %983, %966
  %996 = add <2 x i64> %995, %979
  %997 = add <2 x i64> %996, %973
  %998 = bitcast <2 x i64> %997 to <16 x i8>
  %999 = shufflevector <16 x i8> %998, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1000 = sub <2 x i64> %989, %964
  %1001 = add <2 x i64> %1000, %982
  %1002 = add <2 x i64> %1001, %976
  %1003 = bitcast <2 x i64> %1002 to <16 x i8>
  %1004 = shufflevector <16 x i8> %1003, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1005 = bitcast <16 x i8> %988 to <4 x i32>
  %1006 = bitcast <16 x i8> %994 to <4 x i32>
  %1007 = shufflevector <4 x i32> %1005, <4 x i32> %1006, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1008 = shufflevector <4 x i32> %1005, <4 x i32> %1006, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1009 = shufflevector <4 x i32> %1007, <4 x i32> %1008, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1010 = bitcast <16 x i8> %999 to <4 x i32>
  %1011 = bitcast <16 x i8> %1004 to <4 x i32>
  %1012 = shufflevector <4 x i32> %1010, <4 x i32> %1011, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1013 = shufflevector <4 x i32> %1010, <4 x i32> %1011, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1014 = shufflevector <4 x i32> %1012, <4 x i32> %1013, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1015 = add <4 x i32> %882, %391
  %1016 = bitcast [32 x <2 x i64>]* %3 to <4 x i32>*
  store <4 x i32> %1015, <4 x i32>* %1016, align 16
  %1017 = sub <4 x i32> %391, %882
  %1018 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 15
  %1019 = bitcast <2 x i64>* %1018 to <4 x i32>*
  store <4 x i32> %1017, <4 x i32>* %1019, align 16
  %1020 = add <4 x i32> %881, %392
  %1021 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 1
  %1022 = bitcast <2 x i64>* %1021 to <4 x i32>*
  store <4 x i32> %1020, <4 x i32>* %1022, align 16
  %1023 = sub <4 x i32> %392, %881
  %1024 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 14
  %1025 = bitcast <2 x i64>* %1024 to <4 x i32>*
  store <4 x i32> %1023, <4 x i32>* %1025, align 16
  %1026 = add <4 x i32> %948, %393
  %1027 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 2
  %1028 = bitcast <2 x i64>* %1027 to <4 x i32>*
  store <4 x i32> %1026, <4 x i32>* %1028, align 16
  %1029 = sub <4 x i32> %393, %948
  %1030 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 13
  %1031 = bitcast <2 x i64>* %1030 to <4 x i32>*
  store <4 x i32> %1029, <4 x i32>* %1031, align 16
  %1032 = add <4 x i32> %1014, %394
  %1033 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 3
  %1034 = bitcast <2 x i64>* %1033 to <4 x i32>*
  store <4 x i32> %1032, <4 x i32>* %1034, align 16
  %1035 = sub <4 x i32> %394, %1014
  %1036 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 12
  %1037 = bitcast <2 x i64>* %1036 to <4 x i32>*
  store <4 x i32> %1035, <4 x i32>* %1037, align 16
  %1038 = add <4 x i32> %1009, %395
  %1039 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 4
  %1040 = bitcast <2 x i64>* %1039 to <4 x i32>*
  store <4 x i32> %1038, <4 x i32>* %1040, align 16
  %1041 = sub <4 x i32> %395, %1009
  %1042 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 11
  %1043 = bitcast <2 x i64>* %1042 to <4 x i32>*
  store <4 x i32> %1041, <4 x i32>* %1043, align 16
  %1044 = add <4 x i32> %943, %396
  %1045 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 5
  %1046 = bitcast <2 x i64>* %1045 to <4 x i32>*
  store <4 x i32> %1044, <4 x i32>* %1046, align 16
  %1047 = sub <4 x i32> %396, %943
  %1048 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 10
  %1049 = bitcast <2 x i64>* %1048 to <4 x i32>*
  store <4 x i32> %1047, <4 x i32>* %1049, align 16
  %1050 = add <4 x i32> %876, %397
  %1051 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 6
  %1052 = bitcast <2 x i64>* %1051 to <4 x i32>*
  store <4 x i32> %1050, <4 x i32>* %1052, align 16
  %1053 = sub <4 x i32> %397, %876
  %1054 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 9
  %1055 = bitcast <2 x i64>* %1054 to <4 x i32>*
  store <4 x i32> %1053, <4 x i32>* %1055, align 16
  %1056 = add <4 x i32> %875, %398
  %1057 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 7
  %1058 = bitcast <2 x i64>* %1057 to <4 x i32>*
  store <4 x i32> %1056, <4 x i32>* %1058, align 16
  %1059 = sub <4 x i32> %398, %875
  %1060 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 8
  %1061 = bitcast <2 x i64>* %1060 to <4 x i32>*
  store <4 x i32> %1059, <4 x i32>* %1061, align 16
  %1062 = bitcast [32 x <2 x i64>]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %1062) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %1062, i8 -86, i64 496, i1 false) #7
  %1063 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 1
  %1064 = bitcast <2 x i64>* %1063 to <4 x i32>*
  %1065 = load <4 x i32>, <4 x i32>* %1064, align 16
  %1066 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 31
  %1067 = bitcast <2 x i64>* %1066 to <4 x i32>*
  %1068 = load <4 x i32>, <4 x i32>* %1067, align 16
  %1069 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 16
  %1070 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 31
  %1071 = ashr <4 x i32> %1065, <i32 31, i32 31, i32 31, i32 31>
  %1072 = xor <4 x i32> %1071, %1065
  %1073 = sub <4 x i32> %1072, %1071
  %1074 = shufflevector <4 x i32> %1071, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1075 = bitcast <4 x i32> %1074 to <2 x i64>
  %1076 = shufflevector <4 x i32> %1071, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1077 = bitcast <4 x i32> %1076 to <2 x i64>
  %1078 = shufflevector <4 x i32> %1073, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1079 = bitcast <4 x i32> %1078 to <2 x i64>
  %1080 = shufflevector <4 x i32> %1073, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1081 = bitcast <4 x i32> %1080 to <2 x i64>
  %1082 = ashr <4 x i32> %1068, <i32 31, i32 31, i32 31, i32 31>
  %1083 = xor <4 x i32> %1082, %1068
  %1084 = sub <4 x i32> %1083, %1082
  %1085 = shufflevector <4 x i32> %1082, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1086 = bitcast <4 x i32> %1085 to <2 x i64>
  %1087 = shufflevector <4 x i32> %1082, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1088 = bitcast <4 x i32> %1087 to <2 x i64>
  %1089 = shufflevector <4 x i32> %1084, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1090 = bitcast <4 x i32> %1089 to <2 x i64>
  %1091 = shufflevector <4 x i32> %1084, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1092 = bitcast <4 x i32> %1091 to <2 x i64>
  %1093 = and <2 x i64> %1081, <i64 4294967295, i64 4294967295>
  %1094 = mul nuw nsw <2 x i64> %1093, <i64 65456, i64 65456>
  %1095 = xor <2 x i64> %1094, %1077
  %1096 = and <2 x i64> %1079, <i64 4294967295, i64 4294967295>
  %1097 = mul nuw nsw <2 x i64> %1096, <i64 65456, i64 65456>
  %1098 = xor <2 x i64> %1097, %1075
  %1099 = mul nuw nsw <2 x i64> %1093, <i64 3216, i64 3216>
  %1100 = xor <2 x i64> %1099, %1077
  %1101 = mul nuw nsw <2 x i64> %1096, <i64 3216, i64 3216>
  %1102 = xor <2 x i64> %1101, %1075
  %1103 = and <2 x i64> %1092, <i64 4294967295, i64 4294967295>
  %1104 = mul nuw nsw <2 x i64> %1103, <i64 3216, i64 3216>
  %1105 = xor <2 x i64> %1104, %1088
  %1106 = and <2 x i64> %1090, <i64 4294967295, i64 4294967295>
  %1107 = mul nuw nsw <2 x i64> %1106, <i64 3216, i64 3216>
  %1108 = xor <2 x i64> %1107, %1086
  %1109 = mul nuw nsw <2 x i64> %1103, <i64 65456, i64 65456>
  %1110 = xor <2 x i64> %1109, %1088
  %1111 = mul nuw nsw <2 x i64> %1106, <i64 65456, i64 65456>
  %1112 = xor <2 x i64> %1111, %1086
  %1113 = sub <2 x i64> <i64 32768, i64 32768>, %1077
  %1114 = add <2 x i64> %1113, %1088
  %1115 = add <2 x i64> %1114, %1100
  %1116 = sub <2 x i64> %1115, %1110
  %1117 = bitcast <2 x i64> %1116 to <16 x i8>
  %1118 = shufflevector <16 x i8> %1117, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1119 = sub <2 x i64> <i64 32768, i64 32768>, %1075
  %1120 = add <2 x i64> %1119, %1086
  %1121 = add <2 x i64> %1120, %1102
  %1122 = sub <2 x i64> %1121, %1112
  %1123 = bitcast <2 x i64> %1122 to <16 x i8>
  %1124 = shufflevector <16 x i8> %1123, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1125 = sub <2 x i64> %1113, %1088
  %1126 = add <2 x i64> %1125, %1095
  %1127 = add <2 x i64> %1126, %1105
  %1128 = bitcast <2 x i64> %1127 to <16 x i8>
  %1129 = shufflevector <16 x i8> %1128, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1130 = sub <2 x i64> %1119, %1086
  %1131 = add <2 x i64> %1130, %1098
  %1132 = add <2 x i64> %1131, %1108
  %1133 = bitcast <2 x i64> %1132 to <16 x i8>
  %1134 = shufflevector <16 x i8> %1133, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1135 = bitcast <16 x i8> %1118 to <4 x i32>
  %1136 = bitcast <16 x i8> %1124 to <4 x i32>
  %1137 = shufflevector <4 x i32> %1135, <4 x i32> %1136, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1138 = shufflevector <4 x i32> %1135, <4 x i32> %1136, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1139 = shufflevector <4 x i32> %1137, <4 x i32> %1138, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1140 = bitcast <2 x i64>* %1069 to <4 x i32>*
  store <4 x i32> %1139, <4 x i32>* %1140, align 16
  %1141 = bitcast <16 x i8> %1129 to <4 x i32>
  %1142 = bitcast <16 x i8> %1134 to <4 x i32>
  %1143 = shufflevector <4 x i32> %1141, <4 x i32> %1142, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1144 = shufflevector <4 x i32> %1141, <4 x i32> %1142, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1145 = shufflevector <4 x i32> %1143, <4 x i32> %1144, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1146 = bitcast <2 x i64>* %1070 to <4 x i32>*
  store <4 x i32> %1145, <4 x i32>* %1146, align 16
  %1147 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 17
  %1148 = bitcast <2 x i64>* %1147 to <4 x i32>*
  %1149 = load <4 x i32>, <4 x i32>* %1148, align 16
  %1150 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 15
  %1151 = bitcast <2 x i64>* %1150 to <4 x i32>*
  %1152 = load <4 x i32>, <4 x i32>* %1151, align 16
  %1153 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 17
  %1154 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 30
  %1155 = ashr <4 x i32> %1149, <i32 31, i32 31, i32 31, i32 31>
  %1156 = xor <4 x i32> %1155, %1149
  %1157 = sub <4 x i32> %1156, %1155
  %1158 = shufflevector <4 x i32> %1155, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1159 = bitcast <4 x i32> %1158 to <2 x i64>
  %1160 = shufflevector <4 x i32> %1155, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1161 = bitcast <4 x i32> %1160 to <2 x i64>
  %1162 = shufflevector <4 x i32> %1157, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1163 = bitcast <4 x i32> %1162 to <2 x i64>
  %1164 = shufflevector <4 x i32> %1157, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1165 = bitcast <4 x i32> %1164 to <2 x i64>
  %1166 = ashr <4 x i32> %1152, <i32 31, i32 31, i32 31, i32 31>
  %1167 = xor <4 x i32> %1166, %1152
  %1168 = sub <4 x i32> %1167, %1166
  %1169 = shufflevector <4 x i32> %1166, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1170 = bitcast <4 x i32> %1169 to <2 x i64>
  %1171 = shufflevector <4 x i32> %1166, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1172 = bitcast <4 x i32> %1171 to <2 x i64>
  %1173 = shufflevector <4 x i32> %1168, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1174 = bitcast <4 x i32> %1173 to <2 x i64>
  %1175 = shufflevector <4 x i32> %1168, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1176 = bitcast <4 x i32> %1175 to <2 x i64>
  %1177 = and <2 x i64> %1165, <i64 4294967295, i64 4294967295>
  %1178 = mul nuw nsw <2 x i64> %1177, <i64 44012, i64 44012>
  %1179 = xor <2 x i64> %1178, %1161
  %1180 = and <2 x i64> %1163, <i64 4294967295, i64 4294967295>
  %1181 = mul nuw nsw <2 x i64> %1180, <i64 44012, i64 44012>
  %1182 = xor <2 x i64> %1181, %1159
  %1183 = mul nuw nsw <2 x i64> %1177, <i64 48560, i64 48560>
  %1184 = xor <2 x i64> %1183, %1161
  %1185 = mul nuw nsw <2 x i64> %1180, <i64 48560, i64 48560>
  %1186 = xor <2 x i64> %1185, %1159
  %1187 = and <2 x i64> %1176, <i64 4294967295, i64 4294967295>
  %1188 = mul nuw nsw <2 x i64> %1187, <i64 48560, i64 48560>
  %1189 = xor <2 x i64> %1188, %1172
  %1190 = and <2 x i64> %1174, <i64 4294967295, i64 4294967295>
  %1191 = mul nuw nsw <2 x i64> %1190, <i64 48560, i64 48560>
  %1192 = xor <2 x i64> %1191, %1170
  %1193 = mul nuw nsw <2 x i64> %1187, <i64 44012, i64 44012>
  %1194 = xor <2 x i64> %1193, %1172
  %1195 = mul nuw nsw <2 x i64> %1190, <i64 44012, i64 44012>
  %1196 = xor <2 x i64> %1195, %1170
  %1197 = sub <2 x i64> <i64 32768, i64 32768>, %1161
  %1198 = add <2 x i64> %1197, %1172
  %1199 = add <2 x i64> %1198, %1184
  %1200 = sub <2 x i64> %1199, %1194
  %1201 = bitcast <2 x i64> %1200 to <16 x i8>
  %1202 = shufflevector <16 x i8> %1201, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1203 = sub <2 x i64> <i64 32768, i64 32768>, %1159
  %1204 = add <2 x i64> %1203, %1170
  %1205 = add <2 x i64> %1204, %1186
  %1206 = sub <2 x i64> %1205, %1196
  %1207 = bitcast <2 x i64> %1206 to <16 x i8>
  %1208 = shufflevector <16 x i8> %1207, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1209 = sub <2 x i64> %1197, %1172
  %1210 = add <2 x i64> %1209, %1179
  %1211 = add <2 x i64> %1210, %1189
  %1212 = bitcast <2 x i64> %1211 to <16 x i8>
  %1213 = shufflevector <16 x i8> %1212, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1214 = sub <2 x i64> %1203, %1170
  %1215 = add <2 x i64> %1214, %1182
  %1216 = add <2 x i64> %1215, %1192
  %1217 = bitcast <2 x i64> %1216 to <16 x i8>
  %1218 = shufflevector <16 x i8> %1217, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1219 = bitcast <16 x i8> %1202 to <4 x i32>
  %1220 = bitcast <16 x i8> %1208 to <4 x i32>
  %1221 = shufflevector <4 x i32> %1219, <4 x i32> %1220, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1222 = shufflevector <4 x i32> %1219, <4 x i32> %1220, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1223 = shufflevector <4 x i32> %1221, <4 x i32> %1222, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1224 = bitcast <2 x i64>* %1153 to <4 x i32>*
  store <4 x i32> %1223, <4 x i32>* %1224, align 16
  %1225 = bitcast <16 x i8> %1213 to <4 x i32>
  %1226 = bitcast <16 x i8> %1218 to <4 x i32>
  %1227 = shufflevector <4 x i32> %1225, <4 x i32> %1226, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1228 = shufflevector <4 x i32> %1225, <4 x i32> %1226, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1229 = shufflevector <4 x i32> %1227, <4 x i32> %1228, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1230 = bitcast <2 x i64>* %1154 to <4 x i32>*
  store <4 x i32> %1229, <4 x i32>* %1230, align 16
  %1231 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 9
  %1232 = bitcast <2 x i64>* %1231 to <4 x i32>*
  %1233 = load <4 x i32>, <4 x i32>* %1232, align 16
  %1234 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 23
  %1235 = bitcast <2 x i64>* %1234 to <4 x i32>*
  %1236 = load <4 x i32>, <4 x i32>* %1235, align 16
  %1237 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 18
  %1238 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 29
  %1239 = ashr <4 x i32> %1233, <i32 31, i32 31, i32 31, i32 31>
  %1240 = xor <4 x i32> %1239, %1233
  %1241 = sub <4 x i32> %1240, %1239
  %1242 = shufflevector <4 x i32> %1239, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1243 = bitcast <4 x i32> %1242 to <2 x i64>
  %1244 = shufflevector <4 x i32> %1239, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1245 = bitcast <4 x i32> %1244 to <2 x i64>
  %1246 = shufflevector <4 x i32> %1241, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1247 = bitcast <4 x i32> %1246 to <2 x i64>
  %1248 = shufflevector <4 x i32> %1241, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1249 = bitcast <4 x i32> %1248 to <2 x i64>
  %1250 = ashr <4 x i32> %1236, <i32 31, i32 31, i32 31, i32 31>
  %1251 = xor <4 x i32> %1250, %1236
  %1252 = sub <4 x i32> %1251, %1250
  %1253 = shufflevector <4 x i32> %1250, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1254 = bitcast <4 x i32> %1253 to <2 x i64>
  %1255 = shufflevector <4 x i32> %1250, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1256 = bitcast <4 x i32> %1255 to <2 x i64>
  %1257 = shufflevector <4 x i32> %1252, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1258 = bitcast <4 x i32> %1257 to <2 x i64>
  %1259 = shufflevector <4 x i32> %1252, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1260 = bitcast <4 x i32> %1259 to <2 x i64>
  %1261 = and <2 x i64> %1249, <i64 4294967295, i64 4294967295>
  %1262 = mul nuw nsw <2 x i64> %1261, <i64 59244, i64 59244>
  %1263 = xor <2 x i64> %1262, %1245
  %1264 = and <2 x i64> %1247, <i64 4294967295, i64 4294967295>
  %1265 = mul nuw nsw <2 x i64> %1264, <i64 59244, i64 59244>
  %1266 = xor <2 x i64> %1265, %1243
  %1267 = mul nuw nsw <2 x i64> %1261, <i64 28020, i64 28020>
  %1268 = xor <2 x i64> %1267, %1245
  %1269 = mul nuw nsw <2 x i64> %1264, <i64 28020, i64 28020>
  %1270 = xor <2 x i64> %1269, %1243
  %1271 = and <2 x i64> %1260, <i64 4294967295, i64 4294967295>
  %1272 = mul nuw nsw <2 x i64> %1271, <i64 28020, i64 28020>
  %1273 = xor <2 x i64> %1272, %1256
  %1274 = and <2 x i64> %1258, <i64 4294967295, i64 4294967295>
  %1275 = mul nuw nsw <2 x i64> %1274, <i64 28020, i64 28020>
  %1276 = xor <2 x i64> %1275, %1254
  %1277 = mul nuw nsw <2 x i64> %1271, <i64 59244, i64 59244>
  %1278 = xor <2 x i64> %1277, %1256
  %1279 = mul nuw nsw <2 x i64> %1274, <i64 59244, i64 59244>
  %1280 = xor <2 x i64> %1279, %1254
  %1281 = sub <2 x i64> <i64 32768, i64 32768>, %1245
  %1282 = add <2 x i64> %1281, %1256
  %1283 = add <2 x i64> %1282, %1268
  %1284 = sub <2 x i64> %1283, %1278
  %1285 = bitcast <2 x i64> %1284 to <16 x i8>
  %1286 = shufflevector <16 x i8> %1285, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1287 = sub <2 x i64> <i64 32768, i64 32768>, %1243
  %1288 = add <2 x i64> %1287, %1254
  %1289 = add <2 x i64> %1288, %1270
  %1290 = sub <2 x i64> %1289, %1280
  %1291 = bitcast <2 x i64> %1290 to <16 x i8>
  %1292 = shufflevector <16 x i8> %1291, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1293 = sub <2 x i64> %1281, %1256
  %1294 = add <2 x i64> %1293, %1263
  %1295 = add <2 x i64> %1294, %1273
  %1296 = bitcast <2 x i64> %1295 to <16 x i8>
  %1297 = shufflevector <16 x i8> %1296, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1298 = sub <2 x i64> %1287, %1254
  %1299 = add <2 x i64> %1298, %1266
  %1300 = add <2 x i64> %1299, %1276
  %1301 = bitcast <2 x i64> %1300 to <16 x i8>
  %1302 = shufflevector <16 x i8> %1301, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1303 = bitcast <16 x i8> %1286 to <4 x i32>
  %1304 = bitcast <16 x i8> %1292 to <4 x i32>
  %1305 = shufflevector <4 x i32> %1303, <4 x i32> %1304, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1306 = shufflevector <4 x i32> %1303, <4 x i32> %1304, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1307 = shufflevector <4 x i32> %1305, <4 x i32> %1306, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1308 = bitcast <2 x i64>* %1237 to <4 x i32>*
  store <4 x i32> %1307, <4 x i32>* %1308, align 16
  %1309 = bitcast <16 x i8> %1297 to <4 x i32>
  %1310 = bitcast <16 x i8> %1302 to <4 x i32>
  %1311 = shufflevector <4 x i32> %1309, <4 x i32> %1310, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1312 = shufflevector <4 x i32> %1309, <4 x i32> %1310, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1313 = shufflevector <4 x i32> %1311, <4 x i32> %1312, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1314 = bitcast <2 x i64>* %1238 to <4 x i32>*
  store <4 x i32> %1313, <4 x i32>* %1314, align 16
  %1315 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 25
  %1316 = bitcast <2 x i64>* %1315 to <4 x i32>*
  %1317 = load <4 x i32>, <4 x i32>* %1316, align 16
  %1318 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 7
  %1319 = bitcast <2 x i64>* %1318 to <4 x i32>*
  %1320 = load <4 x i32>, <4 x i32>* %1319, align 16
  %1321 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 19
  %1322 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 28
  %1323 = ashr <4 x i32> %1317, <i32 31, i32 31, i32 31, i32 31>
  %1324 = xor <4 x i32> %1323, %1317
  %1325 = sub <4 x i32> %1324, %1323
  %1326 = shufflevector <4 x i32> %1323, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1327 = bitcast <4 x i32> %1326 to <2 x i64>
  %1328 = shufflevector <4 x i32> %1323, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1329 = bitcast <4 x i32> %1328 to <2 x i64>
  %1330 = shufflevector <4 x i32> %1325, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1331 = bitcast <4 x i32> %1330 to <2 x i64>
  %1332 = shufflevector <4 x i32> %1325, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1333 = bitcast <4 x i32> %1332 to <2 x i64>
  %1334 = ashr <4 x i32> %1320, <i32 31, i32 31, i32 31, i32 31>
  %1335 = xor <4 x i32> %1334, %1320
  %1336 = sub <4 x i32> %1335, %1334
  %1337 = shufflevector <4 x i32> %1334, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1338 = bitcast <4 x i32> %1337 to <2 x i64>
  %1339 = shufflevector <4 x i32> %1334, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1340 = bitcast <4 x i32> %1339 to <2 x i64>
  %1341 = shufflevector <4 x i32> %1336, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1342 = bitcast <4 x i32> %1341 to <2 x i64>
  %1343 = shufflevector <4 x i32> %1336, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1344 = bitcast <4 x i32> %1343 to <2 x i64>
  %1345 = and <2 x i64> %1333, <i64 4294967295, i64 4294967295>
  %1346 = mul nuw nsw <2 x i64> %1345, <i64 22080, i64 22080>
  %1347 = xor <2 x i64> %1346, %1329
  %1348 = and <2 x i64> %1331, <i64 4294967295, i64 4294967295>
  %1349 = mul nuw nsw <2 x i64> %1348, <i64 22080, i64 22080>
  %1350 = xor <2 x i64> %1349, %1327
  %1351 = mul nuw nsw <2 x i64> %1345, <i64 61704, i64 61704>
  %1352 = xor <2 x i64> %1351, %1329
  %1353 = mul nuw nsw <2 x i64> %1348, <i64 61704, i64 61704>
  %1354 = xor <2 x i64> %1353, %1327
  %1355 = and <2 x i64> %1344, <i64 4294967295, i64 4294967295>
  %1356 = mul nuw nsw <2 x i64> %1355, <i64 61704, i64 61704>
  %1357 = xor <2 x i64> %1356, %1340
  %1358 = and <2 x i64> %1342, <i64 4294967295, i64 4294967295>
  %1359 = mul nuw nsw <2 x i64> %1358, <i64 61704, i64 61704>
  %1360 = xor <2 x i64> %1359, %1338
  %1361 = mul nuw nsw <2 x i64> %1355, <i64 22080, i64 22080>
  %1362 = xor <2 x i64> %1361, %1340
  %1363 = mul nuw nsw <2 x i64> %1358, <i64 22080, i64 22080>
  %1364 = xor <2 x i64> %1363, %1338
  %1365 = sub <2 x i64> <i64 32768, i64 32768>, %1329
  %1366 = add <2 x i64> %1365, %1340
  %1367 = add <2 x i64> %1366, %1352
  %1368 = sub <2 x i64> %1367, %1362
  %1369 = bitcast <2 x i64> %1368 to <16 x i8>
  %1370 = shufflevector <16 x i8> %1369, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1371 = sub <2 x i64> <i64 32768, i64 32768>, %1327
  %1372 = add <2 x i64> %1371, %1338
  %1373 = add <2 x i64> %1372, %1354
  %1374 = sub <2 x i64> %1373, %1364
  %1375 = bitcast <2 x i64> %1374 to <16 x i8>
  %1376 = shufflevector <16 x i8> %1375, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1377 = sub <2 x i64> %1365, %1340
  %1378 = add <2 x i64> %1377, %1347
  %1379 = add <2 x i64> %1378, %1357
  %1380 = bitcast <2 x i64> %1379 to <16 x i8>
  %1381 = shufflevector <16 x i8> %1380, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1382 = sub <2 x i64> %1371, %1338
  %1383 = add <2 x i64> %1382, %1350
  %1384 = add <2 x i64> %1383, %1360
  %1385 = bitcast <2 x i64> %1384 to <16 x i8>
  %1386 = shufflevector <16 x i8> %1385, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1387 = bitcast <16 x i8> %1370 to <4 x i32>
  %1388 = bitcast <16 x i8> %1376 to <4 x i32>
  %1389 = shufflevector <4 x i32> %1387, <4 x i32> %1388, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1390 = shufflevector <4 x i32> %1387, <4 x i32> %1388, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1391 = shufflevector <4 x i32> %1389, <4 x i32> %1390, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1392 = bitcast <2 x i64>* %1321 to <4 x i32>*
  store <4 x i32> %1391, <4 x i32>* %1392, align 16
  %1393 = bitcast <16 x i8> %1381 to <4 x i32>
  %1394 = bitcast <16 x i8> %1386 to <4 x i32>
  %1395 = shufflevector <4 x i32> %1393, <4 x i32> %1394, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1396 = shufflevector <4 x i32> %1393, <4 x i32> %1394, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1397 = shufflevector <4 x i32> %1395, <4 x i32> %1396, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1398 = bitcast <2 x i64>* %1322 to <4 x i32>*
  store <4 x i32> %1397, <4 x i32>* %1398, align 16
  %1399 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 5
  %1400 = bitcast <2 x i64>* %1399 to <4 x i32>*
  %1401 = load <4 x i32>, <4 x i32>* %1400, align 16
  %1402 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 27
  %1403 = bitcast <2 x i64>* %1402 to <4 x i32>*
  %1404 = load <4 x i32>, <4 x i32>* %1403, align 16
  %1405 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 20
  %1406 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 27
  %1407 = ashr <4 x i32> %1401, <i32 31, i32 31, i32 31, i32 31>
  %1408 = xor <4 x i32> %1407, %1401
  %1409 = sub <4 x i32> %1408, %1407
  %1410 = shufflevector <4 x i32> %1407, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1411 = bitcast <4 x i32> %1410 to <2 x i64>
  %1412 = shufflevector <4 x i32> %1407, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1413 = bitcast <4 x i32> %1412 to <2 x i64>
  %1414 = shufflevector <4 x i32> %1409, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1415 = bitcast <4 x i32> %1414 to <2 x i64>
  %1416 = shufflevector <4 x i32> %1409, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1417 = bitcast <4 x i32> %1416 to <2 x i64>
  %1418 = ashr <4 x i32> %1404, <i32 31, i32 31, i32 31, i32 31>
  %1419 = xor <4 x i32> %1418, %1404
  %1420 = sub <4 x i32> %1419, %1418
  %1421 = shufflevector <4 x i32> %1418, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1422 = bitcast <4 x i32> %1421 to <2 x i64>
  %1423 = shufflevector <4 x i32> %1418, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1424 = bitcast <4 x i32> %1423 to <2 x i64>
  %1425 = shufflevector <4 x i32> %1420, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1426 = bitcast <4 x i32> %1425 to <2 x i64>
  %1427 = shufflevector <4 x i32> %1420, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1428 = bitcast <4 x i32> %1427 to <2 x i64>
  %1429 = and <2 x i64> %1417, <i64 4294967295, i64 4294967295>
  %1430 = mul nuw nsw <2 x i64> %1429, <i64 63572, i64 63572>
  %1431 = xor <2 x i64> %1430, %1413
  %1432 = and <2 x i64> %1415, <i64 4294967295, i64 4294967295>
  %1433 = mul nuw nsw <2 x i64> %1432, <i64 63572, i64 63572>
  %1434 = xor <2 x i64> %1433, %1411
  %1435 = mul nuw nsw <2 x i64> %1429, <i64 15924, i64 15924>
  %1436 = xor <2 x i64> %1435, %1413
  %1437 = mul nuw nsw <2 x i64> %1432, <i64 15924, i64 15924>
  %1438 = xor <2 x i64> %1437, %1411
  %1439 = and <2 x i64> %1428, <i64 4294967295, i64 4294967295>
  %1440 = mul nuw nsw <2 x i64> %1439, <i64 15924, i64 15924>
  %1441 = xor <2 x i64> %1440, %1424
  %1442 = and <2 x i64> %1426, <i64 4294967295, i64 4294967295>
  %1443 = mul nuw nsw <2 x i64> %1442, <i64 15924, i64 15924>
  %1444 = xor <2 x i64> %1443, %1422
  %1445 = mul nuw nsw <2 x i64> %1439, <i64 63572, i64 63572>
  %1446 = xor <2 x i64> %1445, %1424
  %1447 = mul nuw nsw <2 x i64> %1442, <i64 63572, i64 63572>
  %1448 = xor <2 x i64> %1447, %1422
  %1449 = sub <2 x i64> <i64 32768, i64 32768>, %1413
  %1450 = add <2 x i64> %1449, %1424
  %1451 = add <2 x i64> %1450, %1436
  %1452 = sub <2 x i64> %1451, %1446
  %1453 = bitcast <2 x i64> %1452 to <16 x i8>
  %1454 = shufflevector <16 x i8> %1453, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1455 = sub <2 x i64> <i64 32768, i64 32768>, %1411
  %1456 = add <2 x i64> %1455, %1422
  %1457 = add <2 x i64> %1456, %1438
  %1458 = sub <2 x i64> %1457, %1448
  %1459 = bitcast <2 x i64> %1458 to <16 x i8>
  %1460 = shufflevector <16 x i8> %1459, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1461 = sub <2 x i64> %1449, %1424
  %1462 = add <2 x i64> %1461, %1431
  %1463 = add <2 x i64> %1462, %1441
  %1464 = bitcast <2 x i64> %1463 to <16 x i8>
  %1465 = shufflevector <16 x i8> %1464, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1466 = sub <2 x i64> %1455, %1422
  %1467 = add <2 x i64> %1466, %1434
  %1468 = add <2 x i64> %1467, %1444
  %1469 = bitcast <2 x i64> %1468 to <16 x i8>
  %1470 = shufflevector <16 x i8> %1469, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1471 = bitcast <16 x i8> %1454 to <4 x i32>
  %1472 = bitcast <16 x i8> %1460 to <4 x i32>
  %1473 = shufflevector <4 x i32> %1471, <4 x i32> %1472, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1474 = shufflevector <4 x i32> %1471, <4 x i32> %1472, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1475 = shufflevector <4 x i32> %1473, <4 x i32> %1474, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1476 = bitcast <2 x i64>* %1405 to <4 x i32>*
  store <4 x i32> %1475, <4 x i32>* %1476, align 16
  %1477 = bitcast <16 x i8> %1465 to <4 x i32>
  %1478 = bitcast <16 x i8> %1470 to <4 x i32>
  %1479 = shufflevector <4 x i32> %1477, <4 x i32> %1478, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1480 = shufflevector <4 x i32> %1477, <4 x i32> %1478, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1481 = shufflevector <4 x i32> %1479, <4 x i32> %1480, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1482 = bitcast <2 x i64>* %1406 to <4 x i32>*
  store <4 x i32> %1481, <4 x i32>* %1482, align 16
  %1483 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 21
  %1484 = bitcast <2 x i64>* %1483 to <4 x i32>*
  %1485 = load <4 x i32>, <4 x i32>* %1484, align 16
  %1486 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 11
  %1487 = bitcast <2 x i64>* %1486 to <4 x i32>*
  %1488 = load <4 x i32>, <4 x i32>* %1487, align 16
  %1489 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 21
  %1490 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 26
  %1491 = ashr <4 x i32> %1485, <i32 31, i32 31, i32 31, i32 31>
  %1492 = xor <4 x i32> %1491, %1485
  %1493 = sub <4 x i32> %1492, %1491
  %1494 = shufflevector <4 x i32> %1491, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1495 = bitcast <4 x i32> %1494 to <2 x i64>
  %1496 = shufflevector <4 x i32> %1491, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1497 = bitcast <4 x i32> %1496 to <2 x i64>
  %1498 = shufflevector <4 x i32> %1493, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1499 = bitcast <4 x i32> %1498 to <2 x i64>
  %1500 = shufflevector <4 x i32> %1493, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1501 = bitcast <4 x i32> %1500 to <2 x i64>
  %1502 = ashr <4 x i32> %1488, <i32 31, i32 31, i32 31, i32 31>
  %1503 = xor <4 x i32> %1502, %1488
  %1504 = sub <4 x i32> %1503, %1502
  %1505 = shufflevector <4 x i32> %1502, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1506 = bitcast <4 x i32> %1505 to <2 x i64>
  %1507 = shufflevector <4 x i32> %1502, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1508 = bitcast <4 x i32> %1507 to <2 x i64>
  %1509 = shufflevector <4 x i32> %1504, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1510 = bitcast <4 x i32> %1509 to <2 x i64>
  %1511 = shufflevector <4 x i32> %1504, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1512 = bitcast <4 x i32> %1511 to <2 x i64>
  %1513 = and <2 x i64> %1501, <i64 4294967295, i64 4294967295>
  %1514 = mul nuw nsw <2 x i64> %1513, <i64 33692, i64 33692>
  %1515 = xor <2 x i64> %1514, %1497
  %1516 = and <2 x i64> %1499, <i64 4294967295, i64 4294967295>
  %1517 = mul nuw nsw <2 x i64> %1516, <i64 33692, i64 33692>
  %1518 = xor <2 x i64> %1517, %1495
  %1519 = mul nuw nsw <2 x i64> %1513, <i64 56212, i64 56212>
  %1520 = xor <2 x i64> %1519, %1497
  %1521 = mul nuw nsw <2 x i64> %1516, <i64 56212, i64 56212>
  %1522 = xor <2 x i64> %1521, %1495
  %1523 = and <2 x i64> %1512, <i64 4294967295, i64 4294967295>
  %1524 = mul nuw nsw <2 x i64> %1523, <i64 56212, i64 56212>
  %1525 = xor <2 x i64> %1524, %1508
  %1526 = and <2 x i64> %1510, <i64 4294967295, i64 4294967295>
  %1527 = mul nuw nsw <2 x i64> %1526, <i64 56212, i64 56212>
  %1528 = xor <2 x i64> %1527, %1506
  %1529 = mul nuw nsw <2 x i64> %1523, <i64 33692, i64 33692>
  %1530 = xor <2 x i64> %1529, %1508
  %1531 = mul nuw nsw <2 x i64> %1526, <i64 33692, i64 33692>
  %1532 = xor <2 x i64> %1531, %1506
  %1533 = sub <2 x i64> <i64 32768, i64 32768>, %1497
  %1534 = add <2 x i64> %1533, %1508
  %1535 = add <2 x i64> %1534, %1520
  %1536 = sub <2 x i64> %1535, %1530
  %1537 = bitcast <2 x i64> %1536 to <16 x i8>
  %1538 = shufflevector <16 x i8> %1537, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1539 = sub <2 x i64> <i64 32768, i64 32768>, %1495
  %1540 = add <2 x i64> %1539, %1506
  %1541 = add <2 x i64> %1540, %1522
  %1542 = sub <2 x i64> %1541, %1532
  %1543 = bitcast <2 x i64> %1542 to <16 x i8>
  %1544 = shufflevector <16 x i8> %1543, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1545 = sub <2 x i64> %1533, %1508
  %1546 = add <2 x i64> %1545, %1515
  %1547 = add <2 x i64> %1546, %1525
  %1548 = bitcast <2 x i64> %1547 to <16 x i8>
  %1549 = shufflevector <16 x i8> %1548, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1550 = sub <2 x i64> %1539, %1506
  %1551 = add <2 x i64> %1550, %1518
  %1552 = add <2 x i64> %1551, %1528
  %1553 = bitcast <2 x i64> %1552 to <16 x i8>
  %1554 = shufflevector <16 x i8> %1553, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1555 = bitcast <16 x i8> %1538 to <4 x i32>
  %1556 = bitcast <16 x i8> %1544 to <4 x i32>
  %1557 = shufflevector <4 x i32> %1555, <4 x i32> %1556, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1558 = shufflevector <4 x i32> %1555, <4 x i32> %1556, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1559 = shufflevector <4 x i32> %1557, <4 x i32> %1558, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1560 = bitcast <2 x i64>* %1489 to <4 x i32>*
  store <4 x i32> %1559, <4 x i32>* %1560, align 16
  %1561 = bitcast <16 x i8> %1549 to <4 x i32>
  %1562 = bitcast <16 x i8> %1554 to <4 x i32>
  %1563 = shufflevector <4 x i32> %1561, <4 x i32> %1562, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1564 = shufflevector <4 x i32> %1561, <4 x i32> %1562, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1565 = shufflevector <4 x i32> %1563, <4 x i32> %1564, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1566 = bitcast <2 x i64>* %1490 to <4 x i32>*
  store <4 x i32> %1565, <4 x i32>* %1566, align 16
  %1567 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 13
  %1568 = bitcast <2 x i64>* %1567 to <4 x i32>*
  %1569 = load <4 x i32>, <4 x i32>* %1568, align 16
  %1570 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 19
  %1571 = bitcast <2 x i64>* %1570 to <4 x i32>*
  %1572 = load <4 x i32>, <4 x i32>* %1571, align 16
  %1573 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 22
  %1574 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 25
  %1575 = ashr <4 x i32> %1569, <i32 31, i32 31, i32 31, i32 31>
  %1576 = xor <4 x i32> %1575, %1569
  %1577 = sub <4 x i32> %1576, %1575
  %1578 = shufflevector <4 x i32> %1575, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1579 = bitcast <4 x i32> %1578 to <2 x i64>
  %1580 = shufflevector <4 x i32> %1575, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1581 = bitcast <4 x i32> %1580 to <2 x i64>
  %1582 = shufflevector <4 x i32> %1577, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1583 = bitcast <4 x i32> %1582 to <2 x i64>
  %1584 = shufflevector <4 x i32> %1577, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1585 = bitcast <4 x i32> %1584 to <2 x i64>
  %1586 = ashr <4 x i32> %1572, <i32 31, i32 31, i32 31, i32 31>
  %1587 = xor <4 x i32> %1586, %1572
  %1588 = sub <4 x i32> %1587, %1586
  %1589 = shufflevector <4 x i32> %1586, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1590 = bitcast <4 x i32> %1589 to <2 x i64>
  %1591 = shufflevector <4 x i32> %1586, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1592 = bitcast <4 x i32> %1591 to <2 x i64>
  %1593 = shufflevector <4 x i32> %1588, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1594 = bitcast <4 x i32> %1593 to <2 x i64>
  %1595 = shufflevector <4 x i32> %1588, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1596 = bitcast <4 x i32> %1595 to <2 x i64>
  %1597 = and <2 x i64> %1585, <i64 4294967295, i64 4294967295>
  %1598 = mul nuw nsw <2 x i64> %1597, <i64 52640, i64 52640>
  %1599 = xor <2 x i64> %1598, %1581
  %1600 = and <2 x i64> %1583, <i64 4294967295, i64 4294967295>
  %1601 = mul nuw nsw <2 x i64> %1600, <i64 52640, i64 52640>
  %1602 = xor <2 x i64> %1601, %1579
  %1603 = mul nuw nsw <2 x i64> %1597, <i64 39040, i64 39040>
  %1604 = xor <2 x i64> %1603, %1581
  %1605 = mul nuw nsw <2 x i64> %1600, <i64 39040, i64 39040>
  %1606 = xor <2 x i64> %1605, %1579
  %1607 = and <2 x i64> %1596, <i64 4294967295, i64 4294967295>
  %1608 = mul nuw nsw <2 x i64> %1607, <i64 39040, i64 39040>
  %1609 = xor <2 x i64> %1608, %1592
  %1610 = and <2 x i64> %1594, <i64 4294967295, i64 4294967295>
  %1611 = mul nuw nsw <2 x i64> %1610, <i64 39040, i64 39040>
  %1612 = xor <2 x i64> %1611, %1590
  %1613 = mul nuw nsw <2 x i64> %1607, <i64 52640, i64 52640>
  %1614 = xor <2 x i64> %1613, %1592
  %1615 = mul nuw nsw <2 x i64> %1610, <i64 52640, i64 52640>
  %1616 = xor <2 x i64> %1615, %1590
  %1617 = sub <2 x i64> <i64 32768, i64 32768>, %1581
  %1618 = add <2 x i64> %1617, %1592
  %1619 = add <2 x i64> %1618, %1604
  %1620 = sub <2 x i64> %1619, %1614
  %1621 = bitcast <2 x i64> %1620 to <16 x i8>
  %1622 = shufflevector <16 x i8> %1621, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1623 = sub <2 x i64> <i64 32768, i64 32768>, %1579
  %1624 = add <2 x i64> %1623, %1590
  %1625 = add <2 x i64> %1624, %1606
  %1626 = sub <2 x i64> %1625, %1616
  %1627 = bitcast <2 x i64> %1626 to <16 x i8>
  %1628 = shufflevector <16 x i8> %1627, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1629 = sub <2 x i64> %1617, %1592
  %1630 = add <2 x i64> %1629, %1599
  %1631 = add <2 x i64> %1630, %1609
  %1632 = bitcast <2 x i64> %1631 to <16 x i8>
  %1633 = shufflevector <16 x i8> %1632, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1634 = sub <2 x i64> %1623, %1590
  %1635 = add <2 x i64> %1634, %1602
  %1636 = add <2 x i64> %1635, %1612
  %1637 = bitcast <2 x i64> %1636 to <16 x i8>
  %1638 = shufflevector <16 x i8> %1637, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1639 = bitcast <16 x i8> %1622 to <4 x i32>
  %1640 = bitcast <16 x i8> %1628 to <4 x i32>
  %1641 = shufflevector <4 x i32> %1639, <4 x i32> %1640, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1642 = shufflevector <4 x i32> %1639, <4 x i32> %1640, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1643 = shufflevector <4 x i32> %1641, <4 x i32> %1642, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1644 = bitcast <2 x i64>* %1573 to <4 x i32>*
  store <4 x i32> %1643, <4 x i32>* %1644, align 16
  %1645 = bitcast <16 x i8> %1633 to <4 x i32>
  %1646 = bitcast <16 x i8> %1638 to <4 x i32>
  %1647 = shufflevector <4 x i32> %1645, <4 x i32> %1646, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1648 = shufflevector <4 x i32> %1645, <4 x i32> %1646, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1649 = shufflevector <4 x i32> %1647, <4 x i32> %1648, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1650 = bitcast <2 x i64>* %1574 to <4 x i32>*
  store <4 x i32> %1649, <4 x i32>* %1650, align 16
  %1651 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 29
  %1652 = bitcast <2 x i64>* %1651 to <4 x i32>*
  %1653 = load <4 x i32>, <4 x i32>* %1652, align 16
  %1654 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 3
  %1655 = bitcast <2 x i64>* %1654 to <4 x i32>*
  %1656 = load <4 x i32>, <4 x i32>* %1655, align 16
  %1657 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 23
  %1658 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 24
  %1659 = ashr <4 x i32> %1653, <i32 31, i32 31, i32 31, i32 31>
  %1660 = xor <4 x i32> %1659, %1653
  %1661 = sub <4 x i32> %1660, %1659
  %1662 = shufflevector <4 x i32> %1659, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1663 = bitcast <4 x i32> %1662 to <2 x i64>
  %1664 = shufflevector <4 x i32> %1659, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1665 = bitcast <4 x i32> %1664 to <2 x i64>
  %1666 = shufflevector <4 x i32> %1661, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1667 = bitcast <4 x i32> %1666 to <2 x i64>
  %1668 = shufflevector <4 x i32> %1661, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1669 = bitcast <4 x i32> %1668 to <2 x i64>
  %1670 = ashr <4 x i32> %1656, <i32 31, i32 31, i32 31, i32 31>
  %1671 = xor <4 x i32> %1670, %1656
  %1672 = sub <4 x i32> %1671, %1670
  %1673 = shufflevector <4 x i32> %1670, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1674 = bitcast <4 x i32> %1673 to <2 x i64>
  %1675 = shufflevector <4 x i32> %1670, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1676 = bitcast <4 x i32> %1675 to <2 x i64>
  %1677 = shufflevector <4 x i32> %1672, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1678 = bitcast <4 x i32> %1677 to <2 x i64>
  %1679 = shufflevector <4 x i32> %1672, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1680 = bitcast <4 x i32> %1679 to <2 x i64>
  %1681 = and <2 x i64> %1669, <i64 4294967295, i64 4294967295>
  %1682 = mul nuw nsw <2 x i64> %1681, <i64 9616, i64 9616>
  %1683 = xor <2 x i64> %1682, %1665
  %1684 = and <2 x i64> %1667, <i64 4294967295, i64 4294967295>
  %1685 = mul nuw nsw <2 x i64> %1684, <i64 9616, i64 9616>
  %1686 = xor <2 x i64> %1685, %1663
  %1687 = mul nuw nsw <2 x i64> %1681, <i64 64828, i64 64828>
  %1688 = xor <2 x i64> %1687, %1665
  %1689 = mul nuw nsw <2 x i64> %1684, <i64 64828, i64 64828>
  %1690 = xor <2 x i64> %1689, %1663
  %1691 = and <2 x i64> %1680, <i64 4294967295, i64 4294967295>
  %1692 = mul nuw nsw <2 x i64> %1691, <i64 64828, i64 64828>
  %1693 = xor <2 x i64> %1692, %1676
  %1694 = and <2 x i64> %1678, <i64 4294967295, i64 4294967295>
  %1695 = mul nuw nsw <2 x i64> %1694, <i64 64828, i64 64828>
  %1696 = xor <2 x i64> %1695, %1674
  %1697 = mul nuw nsw <2 x i64> %1691, <i64 9616, i64 9616>
  %1698 = xor <2 x i64> %1697, %1676
  %1699 = mul nuw nsw <2 x i64> %1694, <i64 9616, i64 9616>
  %1700 = xor <2 x i64> %1699, %1674
  %1701 = sub <2 x i64> <i64 32768, i64 32768>, %1665
  %1702 = add <2 x i64> %1701, %1676
  %1703 = add <2 x i64> %1702, %1688
  %1704 = sub <2 x i64> %1703, %1698
  %1705 = bitcast <2 x i64> %1704 to <16 x i8>
  %1706 = shufflevector <16 x i8> %1705, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1707 = sub <2 x i64> <i64 32768, i64 32768>, %1663
  %1708 = add <2 x i64> %1707, %1674
  %1709 = add <2 x i64> %1708, %1690
  %1710 = sub <2 x i64> %1709, %1700
  %1711 = bitcast <2 x i64> %1710 to <16 x i8>
  %1712 = shufflevector <16 x i8> %1711, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1713 = sub <2 x i64> %1701, %1676
  %1714 = add <2 x i64> %1713, %1683
  %1715 = add <2 x i64> %1714, %1693
  %1716 = bitcast <2 x i64> %1715 to <16 x i8>
  %1717 = shufflevector <16 x i8> %1716, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1718 = sub <2 x i64> %1707, %1674
  %1719 = add <2 x i64> %1718, %1686
  %1720 = add <2 x i64> %1719, %1696
  %1721 = bitcast <2 x i64> %1720 to <16 x i8>
  %1722 = shufflevector <16 x i8> %1721, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1723 = bitcast <16 x i8> %1706 to <4 x i32>
  %1724 = bitcast <16 x i8> %1712 to <4 x i32>
  %1725 = shufflevector <4 x i32> %1723, <4 x i32> %1724, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1726 = shufflevector <4 x i32> %1723, <4 x i32> %1724, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1727 = shufflevector <4 x i32> %1725, <4 x i32> %1726, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1728 = bitcast <2 x i64>* %1657 to <4 x i32>*
  store <4 x i32> %1727, <4 x i32>* %1728, align 16
  %1729 = bitcast <16 x i8> %1717 to <4 x i32>
  %1730 = bitcast <16 x i8> %1722 to <4 x i32>
  %1731 = shufflevector <4 x i32> %1729, <4 x i32> %1730, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1732 = shufflevector <4 x i32> %1729, <4 x i32> %1730, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1733 = shufflevector <4 x i32> %1731, <4 x i32> %1732, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1734 = bitcast <2 x i64>* %1658 to <4 x i32>*
  store <4 x i32> %1733, <4 x i32>* %1734, align 16
  %1735 = add <4 x i32> %1223, %1139
  %1736 = sub <4 x i32> %1139, %1223
  %1737 = sub <4 x i32> %1307, %1391
  %1738 = add <4 x i32> %1391, %1307
  %1739 = add <4 x i32> %1559, %1475
  %1740 = sub <4 x i32> %1475, %1559
  %1741 = sub <4 x i32> %1643, %1727
  %1742 = add <4 x i32> %1727, %1643
  %1743 = add <4 x i32> %1733, %1649
  %1744 = sub <4 x i32> %1649, %1733
  %1745 = sub <4 x i32> %1481, %1565
  %1746 = add <4 x i32> %1565, %1481
  %1747 = add <4 x i32> %1397, %1313
  %1748 = sub <4 x i32> %1313, %1397
  %1749 = sub <4 x i32> %1145, %1229
  %1750 = add <4 x i32> %1229, %1145
  store <4 x i32> %1735, <4 x i32>* %1140, align 16
  store <4 x i32> %1750, <4 x i32>* %1146, align 16
  %1751 = ashr <4 x i32> %1749, <i32 31, i32 31, i32 31, i32 31>
  %1752 = xor <4 x i32> %1751, %1749
  %1753 = sub <4 x i32> %1752, %1751
  %1754 = shufflevector <4 x i32> %1751, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1755 = bitcast <4 x i32> %1754 to <2 x i64>
  %1756 = shufflevector <4 x i32> %1751, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1757 = bitcast <4 x i32> %1756 to <2 x i64>
  %1758 = shufflevector <4 x i32> %1753, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1759 = bitcast <4 x i32> %1758 to <2 x i64>
  %1760 = shufflevector <4 x i32> %1753, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1761 = bitcast <4 x i32> %1760 to <2 x i64>
  %1762 = ashr <4 x i32> %1736, <i32 31, i32 31, i32 31, i32 31>
  %1763 = xor <4 x i32> %1762, %1736
  %1764 = sub <4 x i32> %1763, %1762
  %1765 = shufflevector <4 x i32> %1762, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1766 = bitcast <4 x i32> %1765 to <2 x i64>
  %1767 = shufflevector <4 x i32> %1762, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1768 = bitcast <4 x i32> %1767 to <2 x i64>
  %1769 = shufflevector <4 x i32> %1764, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1770 = bitcast <4 x i32> %1769 to <2 x i64>
  %1771 = shufflevector <4 x i32> %1764, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1772 = bitcast <4 x i32> %1771 to <2 x i64>
  %1773 = and <2 x i64> %1761, <i64 4294967295, i64 4294967295>
  %1774 = mul nuw nsw <2 x i64> %1773, <i64 64276, i64 64276>
  %1775 = xor <2 x i64> %1774, %1757
  %1776 = and <2 x i64> %1759, <i64 4294967295, i64 4294967295>
  %1777 = mul nuw nsw <2 x i64> %1776, <i64 64276, i64 64276>
  %1778 = xor <2 x i64> %1777, %1755
  %1779 = mul nuw nsw <2 x i64> %1773, <i64 12784, i64 12784>
  %1780 = xor <2 x i64> %1779, %1757
  %1781 = mul nuw nsw <2 x i64> %1776, <i64 12784, i64 12784>
  %1782 = xor <2 x i64> %1781, %1755
  %1783 = and <2 x i64> %1772, <i64 4294967295, i64 4294967295>
  %1784 = mul nuw nsw <2 x i64> %1783, <i64 12784, i64 12784>
  %1785 = xor <2 x i64> %1784, %1768
  %1786 = and <2 x i64> %1770, <i64 4294967295, i64 4294967295>
  %1787 = mul nuw nsw <2 x i64> %1786, <i64 12784, i64 12784>
  %1788 = xor <2 x i64> %1787, %1766
  %1789 = mul nuw nsw <2 x i64> %1783, <i64 64276, i64 64276>
  %1790 = xor <2 x i64> %1789, %1768
  %1791 = mul nuw nsw <2 x i64> %1786, <i64 64276, i64 64276>
  %1792 = xor <2 x i64> %1791, %1766
  %1793 = sub <2 x i64> <i64 32768, i64 32768>, %1757
  %1794 = add <2 x i64> %1793, %1768
  %1795 = sub <2 x i64> %1794, %1790
  %1796 = add <2 x i64> %1795, %1780
  %1797 = bitcast <2 x i64> %1796 to <16 x i8>
  %1798 = shufflevector <16 x i8> %1797, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1799 = sub <2 x i64> <i64 32768, i64 32768>, %1755
  %1800 = add <2 x i64> %1799, %1766
  %1801 = sub <2 x i64> %1800, %1792
  %1802 = add <2 x i64> %1801, %1782
  %1803 = bitcast <2 x i64> %1802 to <16 x i8>
  %1804 = shufflevector <16 x i8> %1803, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1805 = sub <2 x i64> %1793, %1768
  %1806 = add <2 x i64> %1805, %1785
  %1807 = add <2 x i64> %1806, %1775
  %1808 = bitcast <2 x i64> %1807 to <16 x i8>
  %1809 = shufflevector <16 x i8> %1808, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1810 = sub <2 x i64> %1799, %1766
  %1811 = add <2 x i64> %1810, %1788
  %1812 = add <2 x i64> %1811, %1778
  %1813 = bitcast <2 x i64> %1812 to <16 x i8>
  %1814 = shufflevector <16 x i8> %1813, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1815 = bitcast <16 x i8> %1798 to <4 x i32>
  %1816 = bitcast <16 x i8> %1804 to <4 x i32>
  %1817 = shufflevector <4 x i32> %1815, <4 x i32> %1816, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1818 = shufflevector <4 x i32> %1815, <4 x i32> %1816, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1819 = shufflevector <4 x i32> %1817, <4 x i32> %1818, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1819, <4 x i32>* %1224, align 16
  %1820 = bitcast <16 x i8> %1809 to <4 x i32>
  %1821 = bitcast <16 x i8> %1814 to <4 x i32>
  %1822 = shufflevector <4 x i32> %1820, <4 x i32> %1821, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1823 = shufflevector <4 x i32> %1820, <4 x i32> %1821, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1824 = shufflevector <4 x i32> %1822, <4 x i32> %1823, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1824, <4 x i32>* %1230, align 16
  %1825 = ashr <4 x i32> %1737, <i32 31, i32 31, i32 31, i32 31>
  %1826 = xor <4 x i32> %1825, %1737
  %1827 = sub <4 x i32> %1826, %1825
  %1828 = shufflevector <4 x i32> %1825, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1829 = bitcast <4 x i32> %1828 to <2 x i64>
  %1830 = shufflevector <4 x i32> %1825, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1831 = bitcast <4 x i32> %1830 to <2 x i64>
  %1832 = shufflevector <4 x i32> %1827, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1833 = bitcast <4 x i32> %1832 to <2 x i64>
  %1834 = shufflevector <4 x i32> %1827, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1835 = bitcast <4 x i32> %1834 to <2 x i64>
  %1836 = ashr <4 x i32> %1748, <i32 31, i32 31, i32 31, i32 31>
  %1837 = xor <4 x i32> %1836, %1748
  %1838 = sub <4 x i32> %1837, %1836
  %1839 = shufflevector <4 x i32> %1836, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1840 = bitcast <4 x i32> %1839 to <2 x i64>
  %1841 = shufflevector <4 x i32> %1836, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1842 = bitcast <4 x i32> %1841 to <2 x i64>
  %1843 = shufflevector <4 x i32> %1838, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1844 = bitcast <4 x i32> %1843 to <2 x i64>
  %1845 = shufflevector <4 x i32> %1838, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1846 = bitcast <4 x i32> %1845 to <2 x i64>
  %1847 = and <2 x i64> %1835, <i64 4294967295, i64 4294967295>
  %1848 = mul nuw nsw <2 x i64> %1847, <i64 12784, i64 12784>
  %1849 = xor <2 x i64> %1848, %1831
  %1850 = and <2 x i64> %1833, <i64 4294967295, i64 4294967295>
  %1851 = mul nuw nsw <2 x i64> %1850, <i64 12784, i64 12784>
  %1852 = xor <2 x i64> %1851, %1829
  %1853 = mul nuw nsw <2 x i64> %1847, <i64 64276, i64 64276>
  %1854 = xor <2 x i64> %1853, %1831
  %1855 = mul nuw nsw <2 x i64> %1850, <i64 64276, i64 64276>
  %1856 = xor <2 x i64> %1855, %1829
  %1857 = and <2 x i64> %1846, <i64 4294967295, i64 4294967295>
  %1858 = mul nuw nsw <2 x i64> %1857, <i64 64276, i64 64276>
  %1859 = xor <2 x i64> %1858, %1842
  %1860 = and <2 x i64> %1844, <i64 4294967295, i64 4294967295>
  %1861 = mul nuw nsw <2 x i64> %1860, <i64 64276, i64 64276>
  %1862 = xor <2 x i64> %1861, %1840
  %1863 = mul nuw nsw <2 x i64> %1857, <i64 12784, i64 12784>
  %1864 = xor <2 x i64> %1863, %1842
  %1865 = mul nuw nsw <2 x i64> %1860, <i64 12784, i64 12784>
  %1866 = xor <2 x i64> %1865, %1840
  %1867 = sub <2 x i64> <i64 32768, i64 32768>, %1831
  %1868 = add <2 x i64> %1867, %1842
  %1869 = add <2 x i64> %1868, %1854
  %1870 = sub <2 x i64> %1869, %1864
  %1871 = bitcast <2 x i64> %1870 to <16 x i8>
  %1872 = shufflevector <16 x i8> %1871, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1873 = sub <2 x i64> <i64 32768, i64 32768>, %1829
  %1874 = add <2 x i64> %1873, %1840
  %1875 = add <2 x i64> %1874, %1856
  %1876 = sub <2 x i64> %1875, %1866
  %1877 = bitcast <2 x i64> %1876 to <16 x i8>
  %1878 = shufflevector <16 x i8> %1877, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1879 = sub <2 x i64> %1867, %1842
  %1880 = add <2 x i64> %1879, %1849
  %1881 = add <2 x i64> %1880, %1859
  %1882 = bitcast <2 x i64> %1881 to <16 x i8>
  %1883 = shufflevector <16 x i8> %1882, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1884 = sub <2 x i64> %1873, %1840
  %1885 = add <2 x i64> %1884, %1852
  %1886 = add <2 x i64> %1885, %1862
  %1887 = bitcast <2 x i64> %1886 to <16 x i8>
  %1888 = shufflevector <16 x i8> %1887, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1889 = bitcast <16 x i8> %1872 to <4 x i32>
  %1890 = bitcast <16 x i8> %1878 to <4 x i32>
  %1891 = shufflevector <4 x i32> %1889, <4 x i32> %1890, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1892 = shufflevector <4 x i32> %1889, <4 x i32> %1890, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1893 = shufflevector <4 x i32> %1891, <4 x i32> %1892, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1893, <4 x i32>* %1314, align 16
  %1894 = bitcast <16 x i8> %1883 to <4 x i32>
  %1895 = bitcast <16 x i8> %1888 to <4 x i32>
  %1896 = shufflevector <4 x i32> %1894, <4 x i32> %1895, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1897 = shufflevector <4 x i32> %1894, <4 x i32> %1895, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1898 = shufflevector <4 x i32> %1896, <4 x i32> %1897, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1898, <4 x i32>* %1308, align 16
  store <4 x i32> %1738, <4 x i32>* %1392, align 16
  store <4 x i32> %1739, <4 x i32>* %1476, align 16
  %1899 = ashr <4 x i32> %1745, <i32 31, i32 31, i32 31, i32 31>
  %1900 = xor <4 x i32> %1899, %1745
  %1901 = sub <4 x i32> %1900, %1899
  %1902 = shufflevector <4 x i32> %1899, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1903 = bitcast <4 x i32> %1902 to <2 x i64>
  %1904 = shufflevector <4 x i32> %1899, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1905 = bitcast <4 x i32> %1904 to <2 x i64>
  %1906 = shufflevector <4 x i32> %1901, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1907 = bitcast <4 x i32> %1906 to <2 x i64>
  %1908 = shufflevector <4 x i32> %1901, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1909 = bitcast <4 x i32> %1908 to <2 x i64>
  %1910 = ashr <4 x i32> %1740, <i32 31, i32 31, i32 31, i32 31>
  %1911 = xor <4 x i32> %1910, %1740
  %1912 = sub <4 x i32> %1911, %1910
  %1913 = shufflevector <4 x i32> %1910, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1914 = bitcast <4 x i32> %1913 to <2 x i64>
  %1915 = shufflevector <4 x i32> %1910, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1916 = bitcast <4 x i32> %1915 to <2 x i64>
  %1917 = shufflevector <4 x i32> %1912, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1918 = bitcast <4 x i32> %1917 to <2 x i64>
  %1919 = shufflevector <4 x i32> %1912, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1920 = bitcast <4 x i32> %1919 to <2 x i64>
  %1921 = and <2 x i64> %1909, <i64 4294967295, i64 4294967295>
  %1922 = mul nuw nsw <2 x i64> %1921, <i64 36408, i64 36408>
  %1923 = xor <2 x i64> %1922, %1905
  %1924 = and <2 x i64> %1907, <i64 4294967295, i64 4294967295>
  %1925 = mul nuw nsw <2 x i64> %1924, <i64 36408, i64 36408>
  %1926 = xor <2 x i64> %1925, %1903
  %1927 = mul nuw nsw <2 x i64> %1921, <i64 54492, i64 54492>
  %1928 = xor <2 x i64> %1927, %1905
  %1929 = mul nuw nsw <2 x i64> %1924, <i64 54492, i64 54492>
  %1930 = xor <2 x i64> %1929, %1903
  %1931 = and <2 x i64> %1920, <i64 4294967295, i64 4294967295>
  %1932 = mul nuw nsw <2 x i64> %1931, <i64 54492, i64 54492>
  %1933 = xor <2 x i64> %1932, %1916
  %1934 = and <2 x i64> %1918, <i64 4294967295, i64 4294967295>
  %1935 = mul nuw nsw <2 x i64> %1934, <i64 54492, i64 54492>
  %1936 = xor <2 x i64> %1935, %1914
  %1937 = mul nuw nsw <2 x i64> %1931, <i64 36408, i64 36408>
  %1938 = xor <2 x i64> %1937, %1916
  %1939 = mul nuw nsw <2 x i64> %1934, <i64 36408, i64 36408>
  %1940 = xor <2 x i64> %1939, %1914
  %1941 = sub <2 x i64> <i64 32768, i64 32768>, %1905
  %1942 = add <2 x i64> %1941, %1916
  %1943 = sub <2 x i64> %1942, %1938
  %1944 = add <2 x i64> %1943, %1928
  %1945 = bitcast <2 x i64> %1944 to <16 x i8>
  %1946 = shufflevector <16 x i8> %1945, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1947 = sub <2 x i64> <i64 32768, i64 32768>, %1903
  %1948 = add <2 x i64> %1947, %1914
  %1949 = sub <2 x i64> %1948, %1940
  %1950 = add <2 x i64> %1949, %1930
  %1951 = bitcast <2 x i64> %1950 to <16 x i8>
  %1952 = shufflevector <16 x i8> %1951, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1953 = sub <2 x i64> %1941, %1916
  %1954 = add <2 x i64> %1953, %1933
  %1955 = add <2 x i64> %1954, %1923
  %1956 = bitcast <2 x i64> %1955 to <16 x i8>
  %1957 = shufflevector <16 x i8> %1956, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1958 = sub <2 x i64> %1947, %1914
  %1959 = add <2 x i64> %1958, %1936
  %1960 = add <2 x i64> %1959, %1926
  %1961 = bitcast <2 x i64> %1960 to <16 x i8>
  %1962 = shufflevector <16 x i8> %1961, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1963 = bitcast <16 x i8> %1946 to <4 x i32>
  %1964 = bitcast <16 x i8> %1952 to <4 x i32>
  %1965 = shufflevector <4 x i32> %1963, <4 x i32> %1964, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1966 = shufflevector <4 x i32> %1963, <4 x i32> %1964, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1967 = shufflevector <4 x i32> %1965, <4 x i32> %1966, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1967, <4 x i32>* %1560, align 16
  %1968 = bitcast <16 x i8> %1957 to <4 x i32>
  %1969 = bitcast <16 x i8> %1962 to <4 x i32>
  %1970 = shufflevector <4 x i32> %1968, <4 x i32> %1969, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1971 = shufflevector <4 x i32> %1968, <4 x i32> %1969, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1972 = shufflevector <4 x i32> %1970, <4 x i32> %1971, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1972, <4 x i32>* %1566, align 16
  %1973 = ashr <4 x i32> %1741, <i32 31, i32 31, i32 31, i32 31>
  %1974 = xor <4 x i32> %1973, %1741
  %1975 = sub <4 x i32> %1974, %1973
  %1976 = shufflevector <4 x i32> %1973, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1977 = bitcast <4 x i32> %1976 to <2 x i64>
  %1978 = shufflevector <4 x i32> %1973, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1979 = bitcast <4 x i32> %1978 to <2 x i64>
  %1980 = shufflevector <4 x i32> %1975, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1981 = bitcast <4 x i32> %1980 to <2 x i64>
  %1982 = shufflevector <4 x i32> %1975, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1983 = bitcast <4 x i32> %1982 to <2 x i64>
  %1984 = ashr <4 x i32> %1744, <i32 31, i32 31, i32 31, i32 31>
  %1985 = xor <4 x i32> %1984, %1744
  %1986 = sub <4 x i32> %1985, %1984
  %1987 = shufflevector <4 x i32> %1984, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1988 = bitcast <4 x i32> %1987 to <2 x i64>
  %1989 = shufflevector <4 x i32> %1984, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1990 = bitcast <4 x i32> %1989 to <2 x i64>
  %1991 = shufflevector <4 x i32> %1986, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1992 = bitcast <4 x i32> %1991 to <2 x i64>
  %1993 = shufflevector <4 x i32> %1986, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1994 = bitcast <4 x i32> %1993 to <2 x i64>
  %1995 = and <2 x i64> %1983, <i64 4294967295, i64 4294967295>
  %1996 = mul nuw nsw <2 x i64> %1995, <i64 54492, i64 54492>
  %1997 = xor <2 x i64> %1996, %1979
  %1998 = and <2 x i64> %1981, <i64 4294967295, i64 4294967295>
  %1999 = mul nuw nsw <2 x i64> %1998, <i64 54492, i64 54492>
  %2000 = xor <2 x i64> %1999, %1977
  %2001 = mul nuw nsw <2 x i64> %1995, <i64 36408, i64 36408>
  %2002 = xor <2 x i64> %2001, %1979
  %2003 = mul nuw nsw <2 x i64> %1998, <i64 36408, i64 36408>
  %2004 = xor <2 x i64> %2003, %1977
  %2005 = and <2 x i64> %1994, <i64 4294967295, i64 4294967295>
  %2006 = mul nuw nsw <2 x i64> %2005, <i64 36408, i64 36408>
  %2007 = xor <2 x i64> %2006, %1990
  %2008 = and <2 x i64> %1992, <i64 4294967295, i64 4294967295>
  %2009 = mul nuw nsw <2 x i64> %2008, <i64 36408, i64 36408>
  %2010 = xor <2 x i64> %2009, %1988
  %2011 = mul nuw nsw <2 x i64> %2005, <i64 54492, i64 54492>
  %2012 = xor <2 x i64> %2011, %1990
  %2013 = mul nuw nsw <2 x i64> %2008, <i64 54492, i64 54492>
  %2014 = xor <2 x i64> %2013, %1988
  %2015 = sub <2 x i64> <i64 32768, i64 32768>, %1979
  %2016 = add <2 x i64> %2015, %1990
  %2017 = add <2 x i64> %2016, %2002
  %2018 = sub <2 x i64> %2017, %2012
  %2019 = bitcast <2 x i64> %2018 to <16 x i8>
  %2020 = shufflevector <16 x i8> %2019, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %2021 = sub <2 x i64> <i64 32768, i64 32768>, %1977
  %2022 = add <2 x i64> %2021, %1988
  %2023 = add <2 x i64> %2022, %2004
  %2024 = sub <2 x i64> %2023, %2014
  %2025 = bitcast <2 x i64> %2024 to <16 x i8>
  %2026 = shufflevector <16 x i8> %2025, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %2027 = sub <2 x i64> %2015, %1990
  %2028 = add <2 x i64> %2027, %1997
  %2029 = add <2 x i64> %2028, %2007
  %2030 = bitcast <2 x i64> %2029 to <16 x i8>
  %2031 = shufflevector <16 x i8> %2030, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %2032 = sub <2 x i64> %2021, %1988
  %2033 = add <2 x i64> %2032, %2000
  %2034 = add <2 x i64> %2033, %2010
  %2035 = bitcast <2 x i64> %2034 to <16 x i8>
  %2036 = shufflevector <16 x i8> %2035, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %2037 = bitcast <16 x i8> %2020 to <4 x i32>
  %2038 = bitcast <16 x i8> %2026 to <4 x i32>
  %2039 = shufflevector <4 x i32> %2037, <4 x i32> %2038, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %2040 = shufflevector <4 x i32> %2037, <4 x i32> %2038, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %2041 = shufflevector <4 x i32> %2039, <4 x i32> %2040, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %2041, <4 x i32>* %1650, align 16
  %2042 = bitcast <16 x i8> %2031 to <4 x i32>
  %2043 = bitcast <16 x i8> %2036 to <4 x i32>
  %2044 = shufflevector <4 x i32> %2042, <4 x i32> %2043, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %2045 = shufflevector <4 x i32> %2042, <4 x i32> %2043, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %2046 = shufflevector <4 x i32> %2044, <4 x i32> %2045, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %2046, <4 x i32>* %1644, align 16
  store <4 x i32> %1742, <4 x i32>* %1728, align 16
  store <4 x i32> %1743, <4 x i32>* %1734, align 16
  store <4 x i32> %1746, <4 x i32>* %1482, align 16
  store <4 x i32> %1747, <4 x i32>* %1398, align 16
  %2047 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 0
  call fastcc void @highbd_idct32_4x32_quarter_3_4_stage_4_to_7(<2 x i64>* nonnull %2047, <2 x i64>* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %1062) #7
  br label %2048

2048:                                             ; preds = %2048, %1
  %2049 = phi i64 [ 0, %1 ], [ %2065, %2048 ]
  %2050 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 %2049
  %2051 = bitcast <2 x i64>* %2050 to <4 x i32>*
  %2052 = load <4 x i32>, <4 x i32>* %2051, align 16
  %2053 = shl i64 %2049, 32
  %2054 = sub nuw nsw i64 133143986176, %2053
  %2055 = ashr exact i64 %2054, 32
  %2056 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 %2055
  %2057 = bitcast <2 x i64>* %2056 to <4 x i32>*
  %2058 = load <4 x i32>, <4 x i32>* %2057, align 16
  %2059 = add <4 x i32> %2058, %2052
  %2060 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %2049
  %2061 = bitcast <2 x i64>* %2060 to <4 x i32>*
  store <4 x i32> %2059, <4 x i32>* %2061, align 16
  %2062 = sub <4 x i32> %2052, %2058
  %2063 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %2055
  %2064 = bitcast <2 x i64>* %2063 to <4 x i32>*
  store <4 x i32> %2062, <4 x i32>* %2064, align 16
  %2065 = add nuw nsw i64 %2049, 1
  %2066 = icmp eq i64 %2065, 16
  br i1 %2066, label %2067, label %2048

2067:                                             ; preds = %2048
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct32x32_135_add_sse2(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [2 x [32 x <2 x i64>]], align 16
  %6 = alloca [32 x <2 x i64>], align 16
  %7 = alloca [32 x <2 x i64>], align 16
  %8 = alloca [8 x [32 x <2 x i64>]], align 16
  %9 = alloca [32 x <2 x i64>], align 16
  %10 = icmp eq i32 %3, 8
  br i1 %10, label %11, label %403

11:                                               ; preds = %4
  %12 = bitcast [2 x [32 x <2 x i64>]]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %12) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 1024, i1 false)
  %13 = bitcast [32 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %13) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -86, i64 256, i1 false)
  %14 = bitcast [32 x <2 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %14) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -86, i64 512, i1 false)
  %15 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 16
  %16 = bitcast <2 x i64>* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %16, i8 0, i64 256, i1 false)
  %17 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 0
  %18 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 1
  %19 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 2
  %20 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 3
  %21 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 4
  %22 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 5
  %23 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 6
  %24 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 7
  %25 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 8
  %26 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 9
  %27 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 10
  %28 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 11
  %29 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 12
  %30 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 13
  %31 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 14
  %32 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 15
  br label %36

33:                                               ; preds = %36
  %34 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 0
  %35 = sext i32 %2 to i64
  br label %234

36:                                               ; preds = %36, %11
  %37 = phi i64 [ 0, %11 ], [ %232, %36 ]
  %38 = phi i32* [ %0, %11 ], [ %231, %36 ]
  %39 = bitcast i32* %38 to <4 x i32>*
  %40 = load <4 x i32>, <4 x i32>* %39, align 16
  %41 = getelementptr inbounds i32, i32* %38, i64 4
  %42 = bitcast i32* %41 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 16
  %44 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %40, <4 x i32> %43) #7
  %45 = getelementptr inbounds i32, i32* %38, i64 32
  %46 = bitcast i32* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 16
  %48 = getelementptr inbounds i32, i32* %38, i64 36
  %49 = bitcast i32* %48 to <4 x i32>*
  %50 = load <4 x i32>, <4 x i32>* %49, align 16
  %51 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %47, <4 x i32> %50) #7
  %52 = getelementptr inbounds i32, i32* %38, i64 64
  %53 = bitcast i32* %52 to <4 x i32>*
  %54 = load <4 x i32>, <4 x i32>* %53, align 16
  %55 = getelementptr inbounds i32, i32* %38, i64 68
  %56 = bitcast i32* %55 to <4 x i32>*
  %57 = load <4 x i32>, <4 x i32>* %56, align 16
  %58 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %54, <4 x i32> %57) #7
  %59 = getelementptr inbounds i32, i32* %38, i64 96
  %60 = bitcast i32* %59 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 16
  %62 = getelementptr inbounds i32, i32* %38, i64 100
  %63 = bitcast i32* %62 to <4 x i32>*
  %64 = load <4 x i32>, <4 x i32>* %63, align 16
  %65 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %61, <4 x i32> %64) #7
  %66 = getelementptr inbounds i32, i32* %38, i64 128
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 16
  %69 = getelementptr inbounds i32, i32* %38, i64 132
  %70 = bitcast i32* %69 to <4 x i32>*
  %71 = load <4 x i32>, <4 x i32>* %70, align 16
  %72 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %68, <4 x i32> %71) #7
  %73 = getelementptr inbounds i32, i32* %38, i64 160
  %74 = bitcast i32* %73 to <4 x i32>*
  %75 = load <4 x i32>, <4 x i32>* %74, align 16
  %76 = getelementptr inbounds i32, i32* %38, i64 164
  %77 = bitcast i32* %76 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 16
  %79 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %75, <4 x i32> %78) #7
  %80 = getelementptr inbounds i32, i32* %38, i64 192
  %81 = bitcast i32* %80 to <4 x i32>*
  %82 = load <4 x i32>, <4 x i32>* %81, align 16
  %83 = getelementptr inbounds i32, i32* %38, i64 196
  %84 = bitcast i32* %83 to <4 x i32>*
  %85 = load <4 x i32>, <4 x i32>* %84, align 16
  %86 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %82, <4 x i32> %85) #7
  %87 = getelementptr inbounds i32, i32* %38, i64 224
  %88 = bitcast i32* %87 to <4 x i32>*
  %89 = load <4 x i32>, <4 x i32>* %88, align 16
  %90 = getelementptr inbounds i32, i32* %38, i64 228
  %91 = bitcast i32* %90 to <4 x i32>*
  %92 = load <4 x i32>, <4 x i32>* %91, align 16
  %93 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %89, <4 x i32> %92) #7
  %94 = shufflevector <8 x i16> %44, <8 x i16> %51, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %95 = shufflevector <8 x i16> %58, <8 x i16> %65, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %96 = shufflevector <8 x i16> %72, <8 x i16> %79, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %97 = shufflevector <8 x i16> %86, <8 x i16> %93, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %98 = shufflevector <8 x i16> %44, <8 x i16> %51, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %99 = shufflevector <8 x i16> %58, <8 x i16> %65, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %100 = shufflevector <8 x i16> %72, <8 x i16> %79, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %101 = shufflevector <8 x i16> %86, <8 x i16> %93, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %102 = bitcast <8 x i16> %94 to <4 x i32>
  %103 = bitcast <8 x i16> %95 to <4 x i32>
  %104 = shufflevector <4 x i32> %102, <4 x i32> %103, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %105 = bitcast <4 x i32> %104 to <2 x i64>
  %106 = bitcast <8 x i16> %96 to <4 x i32>
  %107 = bitcast <8 x i16> %97 to <4 x i32>
  %108 = shufflevector <4 x i32> %106, <4 x i32> %107, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %109 = bitcast <4 x i32> %108 to <2 x i64>
  %110 = bitcast <8 x i16> %98 to <4 x i32>
  %111 = bitcast <8 x i16> %99 to <4 x i32>
  %112 = shufflevector <4 x i32> %110, <4 x i32> %111, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %113 = bitcast <4 x i32> %112 to <2 x i64>
  %114 = bitcast <8 x i16> %100 to <4 x i32>
  %115 = bitcast <8 x i16> %101 to <4 x i32>
  %116 = shufflevector <4 x i32> %114, <4 x i32> %115, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %117 = bitcast <4 x i32> %116 to <2 x i64>
  %118 = shufflevector <4 x i32> %102, <4 x i32> %103, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %119 = bitcast <4 x i32> %118 to <2 x i64>
  %120 = shufflevector <4 x i32> %106, <4 x i32> %107, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %121 = bitcast <4 x i32> %120 to <2 x i64>
  %122 = shufflevector <4 x i32> %110, <4 x i32> %111, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %123 = bitcast <4 x i32> %122 to <2 x i64>
  %124 = shufflevector <4 x i32> %114, <4 x i32> %115, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %125 = bitcast <4 x i32> %124 to <2 x i64>
  %126 = shufflevector <2 x i64> %105, <2 x i64> %109, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %126, <2 x i64>* %17, align 16
  %127 = shufflevector <2 x i64> %105, <2 x i64> %109, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %127, <2 x i64>* %18, align 16
  %128 = shufflevector <2 x i64> %119, <2 x i64> %121, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %128, <2 x i64>* %19, align 16
  %129 = shufflevector <2 x i64> %119, <2 x i64> %121, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %129, <2 x i64>* %20, align 16
  %130 = shufflevector <2 x i64> %113, <2 x i64> %117, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %130, <2 x i64>* %21, align 16
  %131 = shufflevector <2 x i64> %113, <2 x i64> %117, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %131, <2 x i64>* %22, align 16
  %132 = shufflevector <2 x i64> %123, <2 x i64> %125, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %132, <2 x i64>* %23, align 16
  %133 = shufflevector <2 x i64> %123, <2 x i64> %125, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %133, <2 x i64>* %24, align 16
  %134 = getelementptr inbounds i32, i32* %38, i64 8
  %135 = bitcast i32* %134 to <4 x i32>*
  %136 = load <4 x i32>, <4 x i32>* %135, align 16
  %137 = getelementptr inbounds i32, i32* %38, i64 12
  %138 = bitcast i32* %137 to <4 x i32>*
  %139 = load <4 x i32>, <4 x i32>* %138, align 16
  %140 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %136, <4 x i32> %139) #7
  %141 = getelementptr inbounds i32, i32* %38, i64 40
  %142 = bitcast i32* %141 to <4 x i32>*
  %143 = load <4 x i32>, <4 x i32>* %142, align 16
  %144 = getelementptr inbounds i32, i32* %38, i64 44
  %145 = bitcast i32* %144 to <4 x i32>*
  %146 = load <4 x i32>, <4 x i32>* %145, align 16
  %147 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %143, <4 x i32> %146) #7
  %148 = getelementptr inbounds i32, i32* %38, i64 72
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 16
  %151 = getelementptr inbounds i32, i32* %38, i64 76
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 16
  %154 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %150, <4 x i32> %153) #7
  %155 = getelementptr inbounds i32, i32* %38, i64 104
  %156 = bitcast i32* %155 to <4 x i32>*
  %157 = load <4 x i32>, <4 x i32>* %156, align 16
  %158 = getelementptr inbounds i32, i32* %38, i64 108
  %159 = bitcast i32* %158 to <4 x i32>*
  %160 = load <4 x i32>, <4 x i32>* %159, align 16
  %161 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %157, <4 x i32> %160) #7
  %162 = getelementptr inbounds i32, i32* %38, i64 136
  %163 = bitcast i32* %162 to <4 x i32>*
  %164 = load <4 x i32>, <4 x i32>* %163, align 16
  %165 = getelementptr inbounds i32, i32* %38, i64 140
  %166 = bitcast i32* %165 to <4 x i32>*
  %167 = load <4 x i32>, <4 x i32>* %166, align 16
  %168 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %164, <4 x i32> %167) #7
  %169 = getelementptr inbounds i32, i32* %38, i64 168
  %170 = bitcast i32* %169 to <4 x i32>*
  %171 = load <4 x i32>, <4 x i32>* %170, align 16
  %172 = getelementptr inbounds i32, i32* %38, i64 172
  %173 = bitcast i32* %172 to <4 x i32>*
  %174 = load <4 x i32>, <4 x i32>* %173, align 16
  %175 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %171, <4 x i32> %174) #7
  %176 = getelementptr inbounds i32, i32* %38, i64 200
  %177 = bitcast i32* %176 to <4 x i32>*
  %178 = load <4 x i32>, <4 x i32>* %177, align 16
  %179 = getelementptr inbounds i32, i32* %38, i64 204
  %180 = bitcast i32* %179 to <4 x i32>*
  %181 = load <4 x i32>, <4 x i32>* %180, align 16
  %182 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %178, <4 x i32> %181) #7
  %183 = getelementptr inbounds i32, i32* %38, i64 232
  %184 = bitcast i32* %183 to <4 x i32>*
  %185 = load <4 x i32>, <4 x i32>* %184, align 16
  %186 = getelementptr inbounds i32, i32* %38, i64 236
  %187 = bitcast i32* %186 to <4 x i32>*
  %188 = load <4 x i32>, <4 x i32>* %187, align 16
  %189 = call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %185, <4 x i32> %188) #7
  %190 = shufflevector <8 x i16> %140, <8 x i16> %147, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %191 = shufflevector <8 x i16> %154, <8 x i16> %161, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %192 = shufflevector <8 x i16> %168, <8 x i16> %175, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %193 = shufflevector <8 x i16> %182, <8 x i16> %189, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %194 = shufflevector <8 x i16> %140, <8 x i16> %147, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %195 = shufflevector <8 x i16> %154, <8 x i16> %161, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %196 = shufflevector <8 x i16> %168, <8 x i16> %175, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %197 = shufflevector <8 x i16> %182, <8 x i16> %189, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %198 = bitcast <8 x i16> %190 to <4 x i32>
  %199 = bitcast <8 x i16> %191 to <4 x i32>
  %200 = shufflevector <4 x i32> %198, <4 x i32> %199, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %201 = bitcast <4 x i32> %200 to <2 x i64>
  %202 = bitcast <8 x i16> %192 to <4 x i32>
  %203 = bitcast <8 x i16> %193 to <4 x i32>
  %204 = shufflevector <4 x i32> %202, <4 x i32> %203, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %205 = bitcast <4 x i32> %204 to <2 x i64>
  %206 = bitcast <8 x i16> %194 to <4 x i32>
  %207 = bitcast <8 x i16> %195 to <4 x i32>
  %208 = shufflevector <4 x i32> %206, <4 x i32> %207, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %209 = bitcast <4 x i32> %208 to <2 x i64>
  %210 = bitcast <8 x i16> %196 to <4 x i32>
  %211 = bitcast <8 x i16> %197 to <4 x i32>
  %212 = shufflevector <4 x i32> %210, <4 x i32> %211, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %213 = bitcast <4 x i32> %212 to <2 x i64>
  %214 = shufflevector <4 x i32> %198, <4 x i32> %199, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %215 = bitcast <4 x i32> %214 to <2 x i64>
  %216 = shufflevector <4 x i32> %202, <4 x i32> %203, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %217 = bitcast <4 x i32> %216 to <2 x i64>
  %218 = shufflevector <4 x i32> %206, <4 x i32> %207, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %219 = bitcast <4 x i32> %218 to <2 x i64>
  %220 = shufflevector <4 x i32> %210, <4 x i32> %211, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %221 = bitcast <4 x i32> %220 to <2 x i64>
  %222 = shufflevector <2 x i64> %201, <2 x i64> %205, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %222, <2 x i64>* %25, align 16
  %223 = shufflevector <2 x i64> %201, <2 x i64> %205, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %223, <2 x i64>* %26, align 16
  %224 = shufflevector <2 x i64> %215, <2 x i64> %217, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %224, <2 x i64>* %27, align 16
  %225 = shufflevector <2 x i64> %215, <2 x i64> %217, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %225, <2 x i64>* %28, align 16
  %226 = shufflevector <2 x i64> %209, <2 x i64> %213, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %226, <2 x i64>* %29, align 16
  %227 = shufflevector <2 x i64> %209, <2 x i64> %213, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %227, <2 x i64>* %30, align 16
  %228 = shufflevector <2 x i64> %219, <2 x i64> %221, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %228, <2 x i64>* %31, align 16
  %229 = shufflevector <2 x i64> %219, <2 x i64> %221, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %229, <2 x i64>* %32, align 16
  %230 = getelementptr inbounds [2 x [32 x <2 x i64>]], [2 x [32 x <2 x i64>]]* %5, i64 0, i64 %37, i64 0
  call void @idct32_1024_8x32(<2 x i64>* nonnull %17, <2 x i64>* %230) #7
  %231 = getelementptr inbounds i32, i32* %38, i64 256
  %232 = add nuw nsw i64 %37, 1
  %233 = icmp eq i64 %232, 2
  br i1 %233, label %33, label %36

234:                                              ; preds = %33, %398
  %235 = phi i64 [ 0, %33 ], [ %400, %398 ]
  %236 = phi i16* [ %1, %33 ], [ %399, %398 ]
  %237 = getelementptr inbounds [2 x [32 x <2 x i64>]], [2 x [32 x <2 x i64>]]* %5, i64 0, i64 0, i64 %235
  %238 = bitcast <2 x i64>* %237 to <8 x i16>*
  %239 = load <8 x i16>, <8 x i16>* %238, align 16
  %240 = getelementptr inbounds <2 x i64>, <2 x i64>* %237, i64 1
  %241 = bitcast <2 x i64>* %240 to <8 x i16>*
  %242 = load <8 x i16>, <8 x i16>* %241, align 16
  %243 = shufflevector <8 x i16> %239, <8 x i16> %242, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %244 = getelementptr inbounds <2 x i64>, <2 x i64>* %237, i64 2
  %245 = bitcast <2 x i64>* %244 to <8 x i16>*
  %246 = load <8 x i16>, <8 x i16>* %245, align 16
  %247 = getelementptr inbounds <2 x i64>, <2 x i64>* %237, i64 3
  %248 = bitcast <2 x i64>* %247 to <8 x i16>*
  %249 = load <8 x i16>, <8 x i16>* %248, align 16
  %250 = shufflevector <8 x i16> %246, <8 x i16> %249, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %251 = getelementptr inbounds <2 x i64>, <2 x i64>* %237, i64 4
  %252 = bitcast <2 x i64>* %251 to <8 x i16>*
  %253 = load <8 x i16>, <8 x i16>* %252, align 16
  %254 = getelementptr inbounds <2 x i64>, <2 x i64>* %237, i64 5
  %255 = bitcast <2 x i64>* %254 to <8 x i16>*
  %256 = load <8 x i16>, <8 x i16>* %255, align 16
  %257 = shufflevector <8 x i16> %253, <8 x i16> %256, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %258 = getelementptr inbounds <2 x i64>, <2 x i64>* %237, i64 6
  %259 = bitcast <2 x i64>* %258 to <8 x i16>*
  %260 = load <8 x i16>, <8 x i16>* %259, align 16
  %261 = getelementptr inbounds <2 x i64>, <2 x i64>* %237, i64 7
  %262 = bitcast <2 x i64>* %261 to <8 x i16>*
  %263 = load <8 x i16>, <8 x i16>* %262, align 16
  %264 = shufflevector <8 x i16> %260, <8 x i16> %263, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %265 = shufflevector <8 x i16> %239, <8 x i16> %242, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %266 = shufflevector <8 x i16> %246, <8 x i16> %249, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %267 = shufflevector <8 x i16> %253, <8 x i16> %256, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %268 = shufflevector <8 x i16> %260, <8 x i16> %263, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %269 = bitcast <8 x i16> %243 to <4 x i32>
  %270 = bitcast <8 x i16> %250 to <4 x i32>
  %271 = shufflevector <4 x i32> %269, <4 x i32> %270, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %272 = bitcast <4 x i32> %271 to <2 x i64>
  %273 = bitcast <8 x i16> %257 to <4 x i32>
  %274 = bitcast <8 x i16> %264 to <4 x i32>
  %275 = shufflevector <4 x i32> %273, <4 x i32> %274, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %276 = bitcast <4 x i32> %275 to <2 x i64>
  %277 = bitcast <8 x i16> %265 to <4 x i32>
  %278 = bitcast <8 x i16> %266 to <4 x i32>
  %279 = shufflevector <4 x i32> %277, <4 x i32> %278, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %280 = bitcast <4 x i32> %279 to <2 x i64>
  %281 = bitcast <8 x i16> %267 to <4 x i32>
  %282 = bitcast <8 x i16> %268 to <4 x i32>
  %283 = shufflevector <4 x i32> %281, <4 x i32> %282, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %284 = bitcast <4 x i32> %283 to <2 x i64>
  %285 = shufflevector <4 x i32> %269, <4 x i32> %270, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %286 = bitcast <4 x i32> %285 to <2 x i64>
  %287 = shufflevector <4 x i32> %273, <4 x i32> %274, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %288 = bitcast <4 x i32> %287 to <2 x i64>
  %289 = shufflevector <4 x i32> %277, <4 x i32> %278, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %290 = bitcast <4 x i32> %289 to <2 x i64>
  %291 = shufflevector <4 x i32> %281, <4 x i32> %282, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %292 = bitcast <4 x i32> %291 to <2 x i64>
  %293 = shufflevector <2 x i64> %272, <2 x i64> %276, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %293, <2 x i64>* %17, align 16
  %294 = shufflevector <2 x i64> %272, <2 x i64> %276, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %294, <2 x i64>* %18, align 16
  %295 = shufflevector <2 x i64> %286, <2 x i64> %288, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %295, <2 x i64>* %19, align 16
  %296 = shufflevector <2 x i64> %286, <2 x i64> %288, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %296, <2 x i64>* %20, align 16
  %297 = shufflevector <2 x i64> %280, <2 x i64> %284, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %297, <2 x i64>* %21, align 16
  %298 = shufflevector <2 x i64> %280, <2 x i64> %284, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %298, <2 x i64>* %22, align 16
  %299 = shufflevector <2 x i64> %290, <2 x i64> %292, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %299, <2 x i64>* %23, align 16
  %300 = shufflevector <2 x i64> %290, <2 x i64> %292, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %300, <2 x i64>* %24, align 16
  %301 = getelementptr inbounds [2 x [32 x <2 x i64>]], [2 x [32 x <2 x i64>]]* %5, i64 0, i64 1, i64 %235
  %302 = bitcast <2 x i64>* %301 to <8 x i16>*
  %303 = load <8 x i16>, <8 x i16>* %302, align 16
  %304 = getelementptr inbounds <2 x i64>, <2 x i64>* %301, i64 1
  %305 = bitcast <2 x i64>* %304 to <8 x i16>*
  %306 = load <8 x i16>, <8 x i16>* %305, align 16
  %307 = shufflevector <8 x i16> %303, <8 x i16> %306, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %308 = getelementptr inbounds <2 x i64>, <2 x i64>* %301, i64 2
  %309 = bitcast <2 x i64>* %308 to <8 x i16>*
  %310 = load <8 x i16>, <8 x i16>* %309, align 16
  %311 = getelementptr inbounds <2 x i64>, <2 x i64>* %301, i64 3
  %312 = bitcast <2 x i64>* %311 to <8 x i16>*
  %313 = load <8 x i16>, <8 x i16>* %312, align 16
  %314 = shufflevector <8 x i16> %310, <8 x i16> %313, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %315 = getelementptr inbounds <2 x i64>, <2 x i64>* %301, i64 4
  %316 = bitcast <2 x i64>* %315 to <8 x i16>*
  %317 = load <8 x i16>, <8 x i16>* %316, align 16
  %318 = getelementptr inbounds <2 x i64>, <2 x i64>* %301, i64 5
  %319 = bitcast <2 x i64>* %318 to <8 x i16>*
  %320 = load <8 x i16>, <8 x i16>* %319, align 16
  %321 = shufflevector <8 x i16> %317, <8 x i16> %320, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %322 = getelementptr inbounds <2 x i64>, <2 x i64>* %301, i64 6
  %323 = bitcast <2 x i64>* %322 to <8 x i16>*
  %324 = load <8 x i16>, <8 x i16>* %323, align 16
  %325 = getelementptr inbounds <2 x i64>, <2 x i64>* %301, i64 7
  %326 = bitcast <2 x i64>* %325 to <8 x i16>*
  %327 = load <8 x i16>, <8 x i16>* %326, align 16
  %328 = shufflevector <8 x i16> %324, <8 x i16> %327, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %329 = shufflevector <8 x i16> %303, <8 x i16> %306, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %330 = shufflevector <8 x i16> %310, <8 x i16> %313, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %331 = shufflevector <8 x i16> %317, <8 x i16> %320, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %332 = shufflevector <8 x i16> %324, <8 x i16> %327, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %333 = bitcast <8 x i16> %307 to <4 x i32>
  %334 = bitcast <8 x i16> %314 to <4 x i32>
  %335 = shufflevector <4 x i32> %333, <4 x i32> %334, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %336 = bitcast <4 x i32> %335 to <2 x i64>
  %337 = bitcast <8 x i16> %321 to <4 x i32>
  %338 = bitcast <8 x i16> %328 to <4 x i32>
  %339 = shufflevector <4 x i32> %337, <4 x i32> %338, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %340 = bitcast <4 x i32> %339 to <2 x i64>
  %341 = bitcast <8 x i16> %329 to <4 x i32>
  %342 = bitcast <8 x i16> %330 to <4 x i32>
  %343 = shufflevector <4 x i32> %341, <4 x i32> %342, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %344 = bitcast <4 x i32> %343 to <2 x i64>
  %345 = bitcast <8 x i16> %331 to <4 x i32>
  %346 = bitcast <8 x i16> %332 to <4 x i32>
  %347 = shufflevector <4 x i32> %345, <4 x i32> %346, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %348 = bitcast <4 x i32> %347 to <2 x i64>
  %349 = shufflevector <4 x i32> %333, <4 x i32> %334, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %350 = bitcast <4 x i32> %349 to <2 x i64>
  %351 = shufflevector <4 x i32> %337, <4 x i32> %338, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %352 = bitcast <4 x i32> %351 to <2 x i64>
  %353 = shufflevector <4 x i32> %341, <4 x i32> %342, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %354 = bitcast <4 x i32> %353 to <2 x i64>
  %355 = shufflevector <4 x i32> %345, <4 x i32> %346, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %356 = bitcast <4 x i32> %355 to <2 x i64>
  %357 = shufflevector <2 x i64> %336, <2 x i64> %340, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %357, <2 x i64>* %25, align 16
  %358 = shufflevector <2 x i64> %336, <2 x i64> %340, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %358, <2 x i64>* %26, align 16
  %359 = shufflevector <2 x i64> %350, <2 x i64> %352, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %359, <2 x i64>* %27, align 16
  %360 = shufflevector <2 x i64> %350, <2 x i64> %352, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %360, <2 x i64>* %28, align 16
  %361 = shufflevector <2 x i64> %344, <2 x i64> %348, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %361, <2 x i64>* %29, align 16
  %362 = shufflevector <2 x i64> %344, <2 x i64> %348, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %362, <2 x i64>* %30, align 16
  %363 = shufflevector <2 x i64> %354, <2 x i64> %356, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %363, <2 x i64>* %31, align 16
  %364 = shufflevector <2 x i64> %354, <2 x i64> %356, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %364, <2 x i64>* %32, align 16
  call void @idct32_1024_8x32(<2 x i64>* nonnull %17, <2 x i64>* nonnull %34) #7
  br label %365

365:                                              ; preds = %365, %234
  %366 = phi i64 [ 0, %234 ], [ %396, %365 ]
  %367 = mul nsw i64 %366, %35
  %368 = getelementptr inbounds i16, i16* %236, i64 %367
  %369 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 %366
  %370 = bitcast <2 x i64>* %369 to <8 x i16>*
  %371 = load <8 x i16>, <8 x i16>* %370, align 16
  %372 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %371, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #7
  %373 = ashr <8 x i16> %372, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %374 = bitcast i16* %368 to <8 x i16>*
  %375 = load <8 x i16>, <8 x i16>* %374, align 16
  %376 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %375, <8 x i16> %373) #7
  %377 = icmp sgt <8 x i16> %376, zeroinitializer
  %378 = select <8 x i1> %377, <8 x i16> %376, <8 x i16> zeroinitializer
  %379 = icmp slt <8 x i16> %378, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %380 = select <8 x i1> %379, <8 x i16> %378, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  store <8 x i16> %380, <8 x i16>* %374, align 16
  %381 = or i64 %366, 1
  %382 = mul nsw i64 %381, %35
  %383 = getelementptr inbounds i16, i16* %236, i64 %382
  %384 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 %381
  %385 = bitcast <2 x i64>* %384 to <8 x i16>*
  %386 = load <8 x i16>, <8 x i16>* %385, align 16
  %387 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %386, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #7
  %388 = ashr <8 x i16> %387, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %389 = bitcast i16* %383 to <8 x i16>*
  %390 = load <8 x i16>, <8 x i16>* %389, align 16
  %391 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %390, <8 x i16> %388) #7
  %392 = icmp sgt <8 x i16> %391, zeroinitializer
  %393 = select <8 x i1> %392, <8 x i16> %391, <8 x i16> zeroinitializer
  %394 = icmp slt <8 x i16> %393, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %395 = select <8 x i1> %394, <8 x i16> %393, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  store <8 x i16> %395, <8 x i16>* %389, align 16
  %396 = add nuw nsw i64 %366, 2
  %397 = icmp eq i64 %396, 32
  br i1 %397, label %398, label %365

398:                                              ; preds = %365
  %399 = getelementptr inbounds i16, i16* %236, i64 8
  %400 = add nuw nsw i64 %235, 8
  %401 = icmp ult i64 %400, 32
  br i1 %401, label %234, label %402

402:                                              ; preds = %398
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %14) #7
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %13) #7
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %12) #7
  br label %684

403:                                              ; preds = %4
  %404 = bitcast [8 x [32 x <2 x i64>]]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %404) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %404, i8 -86, i64 4096, i1 false)
  %405 = bitcast [32 x <2 x i64>]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %405) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %405, i8 -86, i64 512, i1 false)
  br label %424

406:                                              ; preds = %424
  %407 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 0
  %408 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 1
  %409 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 2
  %410 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 3
  %411 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 4
  %412 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 5
  %413 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 6
  %414 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 7
  %415 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 8
  %416 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 9
  %417 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 10
  %418 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 11
  %419 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 12
  %420 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 13
  %421 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 14
  %422 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 15
  %423 = sext i32 %2 to i64
  br label %555

424:                                              ; preds = %424, %403
  %425 = phi i64 [ 0, %403 ], [ %553, %424 ]
  %426 = phi i32* [ %0, %403 ], [ %552, %424 ]
  %427 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %425, i64 0
  %428 = bitcast i32* %426 to <2 x i64>*
  %429 = load <2 x i64>, <2 x i64>* %428, align 16
  store <2 x i64> %429, <2 x i64>* %427, align 16
  %430 = getelementptr inbounds i32, i32* %426, i64 4
  %431 = bitcast i32* %430 to <2 x i64>*
  %432 = load <2 x i64>, <2 x i64>* %431, align 16
  %433 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %425, i64 1
  store <2 x i64> %432, <2 x i64>* %433, align 16
  %434 = getelementptr inbounds i32, i32* %426, i64 32
  %435 = bitcast i32* %434 to <2 x i64>*
  %436 = load <2 x i64>, <2 x i64>* %435, align 16
  %437 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %425, i64 2
  store <2 x i64> %436, <2 x i64>* %437, align 16
  %438 = getelementptr inbounds i32, i32* %426, i64 36
  %439 = bitcast i32* %438 to <2 x i64>*
  %440 = load <2 x i64>, <2 x i64>* %439, align 16
  %441 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %425, i64 3
  store <2 x i64> %440, <2 x i64>* %441, align 16
  %442 = getelementptr inbounds i32, i32* %426, i64 64
  %443 = bitcast i32* %442 to <2 x i64>*
  %444 = load <2 x i64>, <2 x i64>* %443, align 16
  %445 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %425, i64 4
  store <2 x i64> %444, <2 x i64>* %445, align 16
  %446 = getelementptr inbounds i32, i32* %426, i64 68
  %447 = bitcast i32* %446 to <2 x i64>*
  %448 = load <2 x i64>, <2 x i64>* %447, align 16
  %449 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %425, i64 5
  store <2 x i64> %448, <2 x i64>* %449, align 16
  %450 = getelementptr inbounds i32, i32* %426, i64 96
  %451 = bitcast i32* %450 to <2 x i64>*
  %452 = load <2 x i64>, <2 x i64>* %451, align 16
  %453 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %425, i64 6
  store <2 x i64> %452, <2 x i64>* %453, align 16
  %454 = getelementptr inbounds i32, i32* %426, i64 100
  %455 = bitcast i32* %454 to <4 x i32>*
  %456 = load <4 x i32>, <4 x i32>* %455, align 16
  %457 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %425, i64 7
  %458 = bitcast <2 x i64> %429 to <4 x i32>
  %459 = bitcast <2 x i64> %436 to <4 x i32>
  %460 = shufflevector <4 x i32> %458, <4 x i32> %459, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %461 = bitcast <4 x i32> %460 to <2 x i64>
  %462 = bitcast <2 x i64> %444 to <4 x i32>
  %463 = bitcast <2 x i64> %452 to <4 x i32>
  %464 = shufflevector <4 x i32> %462, <4 x i32> %463, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %465 = bitcast <4 x i32> %464 to <2 x i64>
  %466 = shufflevector <4 x i32> %458, <4 x i32> %459, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %467 = bitcast <4 x i32> %466 to <2 x i64>
  %468 = shufflevector <4 x i32> %462, <4 x i32> %463, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %469 = bitcast <4 x i32> %468 to <2 x i64>
  %470 = bitcast <2 x i64> %432 to <4 x i32>
  %471 = bitcast <2 x i64> %440 to <4 x i32>
  %472 = shufflevector <4 x i32> %470, <4 x i32> %471, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %473 = bitcast <4 x i32> %472 to <2 x i64>
  %474 = bitcast <2 x i64> %448 to <4 x i32>
  %475 = shufflevector <4 x i32> %474, <4 x i32> %456, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %476 = bitcast <4 x i32> %475 to <2 x i64>
  %477 = shufflevector <4 x i32> %470, <4 x i32> %471, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %478 = bitcast <4 x i32> %477 to <2 x i64>
  %479 = shufflevector <4 x i32> %474, <4 x i32> %456, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %480 = bitcast <4 x i32> %479 to <2 x i64>
  %481 = shufflevector <2 x i64> %461, <2 x i64> %465, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %481, <2 x i64>* %427, align 16
  %482 = shufflevector <2 x i64> %461, <2 x i64> %465, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %482, <2 x i64>* %433, align 16
  %483 = shufflevector <2 x i64> %467, <2 x i64> %469, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %483, <2 x i64>* %437, align 16
  %484 = shufflevector <2 x i64> %467, <2 x i64> %469, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %484, <2 x i64>* %441, align 16
  %485 = shufflevector <2 x i64> %473, <2 x i64> %476, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %485, <2 x i64>* %445, align 16
  %486 = shufflevector <2 x i64> %473, <2 x i64> %476, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %486, <2 x i64>* %449, align 16
  %487 = shufflevector <2 x i64> %478, <2 x i64> %480, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %487, <2 x i64>* %453, align 16
  %488 = shufflevector <2 x i64> %478, <2 x i64> %480, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %488, <2 x i64>* %457, align 16
  %489 = getelementptr inbounds i32, i32* %426, i64 8
  %490 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %425, i64 8
  %491 = bitcast i32* %489 to <2 x i64>*
  %492 = load <2 x i64>, <2 x i64>* %491, align 16
  store <2 x i64> %492, <2 x i64>* %490, align 16
  %493 = getelementptr inbounds i32, i32* %426, i64 12
  %494 = bitcast i32* %493 to <2 x i64>*
  %495 = load <2 x i64>, <2 x i64>* %494, align 16
  %496 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %425, i64 9
  store <2 x i64> %495, <2 x i64>* %496, align 16
  %497 = getelementptr inbounds i32, i32* %426, i64 40
  %498 = bitcast i32* %497 to <2 x i64>*
  %499 = load <2 x i64>, <2 x i64>* %498, align 16
  %500 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %425, i64 10
  store <2 x i64> %499, <2 x i64>* %500, align 16
  %501 = getelementptr inbounds i32, i32* %426, i64 44
  %502 = bitcast i32* %501 to <2 x i64>*
  %503 = load <2 x i64>, <2 x i64>* %502, align 16
  %504 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %425, i64 11
  store <2 x i64> %503, <2 x i64>* %504, align 16
  %505 = getelementptr inbounds i32, i32* %426, i64 72
  %506 = bitcast i32* %505 to <2 x i64>*
  %507 = load <2 x i64>, <2 x i64>* %506, align 16
  %508 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %425, i64 12
  store <2 x i64> %507, <2 x i64>* %508, align 16
  %509 = getelementptr inbounds i32, i32* %426, i64 76
  %510 = bitcast i32* %509 to <2 x i64>*
  %511 = load <2 x i64>, <2 x i64>* %510, align 16
  %512 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %425, i64 13
  store <2 x i64> %511, <2 x i64>* %512, align 16
  %513 = getelementptr inbounds i32, i32* %426, i64 104
  %514 = bitcast i32* %513 to <2 x i64>*
  %515 = load <2 x i64>, <2 x i64>* %514, align 16
  %516 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %425, i64 14
  store <2 x i64> %515, <2 x i64>* %516, align 16
  %517 = getelementptr inbounds i32, i32* %426, i64 108
  %518 = bitcast i32* %517 to <4 x i32>*
  %519 = load <4 x i32>, <4 x i32>* %518, align 16
  %520 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %425, i64 15
  %521 = bitcast <2 x i64> %492 to <4 x i32>
  %522 = bitcast <2 x i64> %499 to <4 x i32>
  %523 = shufflevector <4 x i32> %521, <4 x i32> %522, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %524 = bitcast <4 x i32> %523 to <2 x i64>
  %525 = bitcast <2 x i64> %507 to <4 x i32>
  %526 = bitcast <2 x i64> %515 to <4 x i32>
  %527 = shufflevector <4 x i32> %525, <4 x i32> %526, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %528 = bitcast <4 x i32> %527 to <2 x i64>
  %529 = shufflevector <4 x i32> %521, <4 x i32> %522, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %530 = bitcast <4 x i32> %529 to <2 x i64>
  %531 = shufflevector <4 x i32> %525, <4 x i32> %526, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %532 = bitcast <4 x i32> %531 to <2 x i64>
  %533 = bitcast <2 x i64> %495 to <4 x i32>
  %534 = bitcast <2 x i64> %503 to <4 x i32>
  %535 = shufflevector <4 x i32> %533, <4 x i32> %534, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %536 = bitcast <4 x i32> %535 to <2 x i64>
  %537 = bitcast <2 x i64> %511 to <4 x i32>
  %538 = shufflevector <4 x i32> %537, <4 x i32> %519, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %539 = bitcast <4 x i32> %538 to <2 x i64>
  %540 = shufflevector <4 x i32> %533, <4 x i32> %534, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %541 = bitcast <4 x i32> %540 to <2 x i64>
  %542 = shufflevector <4 x i32> %537, <4 x i32> %519, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %543 = bitcast <4 x i32> %542 to <2 x i64>
  %544 = shufflevector <2 x i64> %524, <2 x i64> %528, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %544, <2 x i64>* %490, align 16
  %545 = shufflevector <2 x i64> %524, <2 x i64> %528, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %545, <2 x i64>* %496, align 16
  %546 = shufflevector <2 x i64> %530, <2 x i64> %532, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %546, <2 x i64>* %500, align 16
  %547 = shufflevector <2 x i64> %530, <2 x i64> %532, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %547, <2 x i64>* %504, align 16
  %548 = shufflevector <2 x i64> %536, <2 x i64> %539, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %548, <2 x i64>* %508, align 16
  %549 = shufflevector <2 x i64> %536, <2 x i64> %539, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %549, <2 x i64>* %512, align 16
  %550 = shufflevector <2 x i64> %541, <2 x i64> %543, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %550, <2 x i64>* %516, align 16
  %551 = shufflevector <2 x i64> %541, <2 x i64> %543, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %551, <2 x i64>* %520, align 16
  call fastcc void @highbd_idct32_135_4x32(<2 x i64>* %427)
  %552 = getelementptr inbounds i32, i32* %426, i64 128
  %553 = add nuw nsw i64 %425, 1
  %554 = icmp eq i64 %553, 4
  br i1 %554, label %406, label %424

555:                                              ; preds = %406, %679
  %556 = phi i64 [ 0, %406 ], [ %681, %679 ]
  %557 = phi i16* [ %1, %406 ], [ %680, %679 ]
  %558 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 0, i64 %556
  %559 = bitcast <2 x i64>* %558 to <4 x i32>*
  %560 = load <4 x i32>, <4 x i32>* %559, align 16
  %561 = getelementptr inbounds <2 x i64>, <2 x i64>* %558, i64 1
  %562 = bitcast <2 x i64>* %561 to <4 x i32>*
  %563 = load <4 x i32>, <4 x i32>* %562, align 16
  %564 = shufflevector <4 x i32> %560, <4 x i32> %563, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %565 = bitcast <4 x i32> %564 to <2 x i64>
  %566 = getelementptr inbounds <2 x i64>, <2 x i64>* %558, i64 2
  %567 = bitcast <2 x i64>* %566 to <4 x i32>*
  %568 = load <4 x i32>, <4 x i32>* %567, align 16
  %569 = getelementptr inbounds <2 x i64>, <2 x i64>* %558, i64 3
  %570 = bitcast <2 x i64>* %569 to <4 x i32>*
  %571 = load <4 x i32>, <4 x i32>* %570, align 16
  %572 = shufflevector <4 x i32> %568, <4 x i32> %571, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %573 = bitcast <4 x i32> %572 to <2 x i64>
  %574 = shufflevector <4 x i32> %560, <4 x i32> %563, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %575 = bitcast <4 x i32> %574 to <2 x i64>
  %576 = shufflevector <4 x i32> %568, <4 x i32> %571, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %577 = bitcast <4 x i32> %576 to <2 x i64>
  %578 = shufflevector <2 x i64> %565, <2 x i64> %573, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %578, <2 x i64>* %407, align 16
  %579 = shufflevector <2 x i64> %565, <2 x i64> %573, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %579, <2 x i64>* %408, align 16
  %580 = shufflevector <2 x i64> %575, <2 x i64> %577, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %580, <2 x i64>* %409, align 16
  %581 = shufflevector <2 x i64> %575, <2 x i64> %577, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %581, <2 x i64>* %410, align 16
  %582 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 1, i64 %556
  %583 = bitcast <2 x i64>* %582 to <4 x i32>*
  %584 = load <4 x i32>, <4 x i32>* %583, align 16
  %585 = getelementptr inbounds <2 x i64>, <2 x i64>* %582, i64 1
  %586 = bitcast <2 x i64>* %585 to <4 x i32>*
  %587 = load <4 x i32>, <4 x i32>* %586, align 16
  %588 = shufflevector <4 x i32> %584, <4 x i32> %587, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %589 = bitcast <4 x i32> %588 to <2 x i64>
  %590 = getelementptr inbounds <2 x i64>, <2 x i64>* %582, i64 2
  %591 = bitcast <2 x i64>* %590 to <4 x i32>*
  %592 = load <4 x i32>, <4 x i32>* %591, align 16
  %593 = getelementptr inbounds <2 x i64>, <2 x i64>* %582, i64 3
  %594 = bitcast <2 x i64>* %593 to <4 x i32>*
  %595 = load <4 x i32>, <4 x i32>* %594, align 16
  %596 = shufflevector <4 x i32> %592, <4 x i32> %595, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %597 = bitcast <4 x i32> %596 to <2 x i64>
  %598 = shufflevector <4 x i32> %584, <4 x i32> %587, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %599 = bitcast <4 x i32> %598 to <2 x i64>
  %600 = shufflevector <4 x i32> %592, <4 x i32> %595, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %601 = bitcast <4 x i32> %600 to <2 x i64>
  %602 = shufflevector <2 x i64> %589, <2 x i64> %597, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %602, <2 x i64>* %411, align 16
  %603 = shufflevector <2 x i64> %589, <2 x i64> %597, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %603, <2 x i64>* %412, align 16
  %604 = shufflevector <2 x i64> %599, <2 x i64> %601, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %604, <2 x i64>* %413, align 16
  %605 = shufflevector <2 x i64> %599, <2 x i64> %601, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %605, <2 x i64>* %414, align 16
  %606 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 2, i64 %556
  %607 = bitcast <2 x i64>* %606 to <4 x i32>*
  %608 = load <4 x i32>, <4 x i32>* %607, align 16
  %609 = getelementptr inbounds <2 x i64>, <2 x i64>* %606, i64 1
  %610 = bitcast <2 x i64>* %609 to <4 x i32>*
  %611 = load <4 x i32>, <4 x i32>* %610, align 16
  %612 = shufflevector <4 x i32> %608, <4 x i32> %611, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %613 = bitcast <4 x i32> %612 to <2 x i64>
  %614 = getelementptr inbounds <2 x i64>, <2 x i64>* %606, i64 2
  %615 = bitcast <2 x i64>* %614 to <4 x i32>*
  %616 = load <4 x i32>, <4 x i32>* %615, align 16
  %617 = getelementptr inbounds <2 x i64>, <2 x i64>* %606, i64 3
  %618 = bitcast <2 x i64>* %617 to <4 x i32>*
  %619 = load <4 x i32>, <4 x i32>* %618, align 16
  %620 = shufflevector <4 x i32> %616, <4 x i32> %619, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %621 = bitcast <4 x i32> %620 to <2 x i64>
  %622 = shufflevector <4 x i32> %608, <4 x i32> %611, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %623 = bitcast <4 x i32> %622 to <2 x i64>
  %624 = shufflevector <4 x i32> %616, <4 x i32> %619, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %625 = bitcast <4 x i32> %624 to <2 x i64>
  %626 = shufflevector <2 x i64> %613, <2 x i64> %621, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %626, <2 x i64>* %415, align 16
  %627 = shufflevector <2 x i64> %613, <2 x i64> %621, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %627, <2 x i64>* %416, align 16
  %628 = shufflevector <2 x i64> %623, <2 x i64> %625, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %628, <2 x i64>* %417, align 16
  %629 = shufflevector <2 x i64> %623, <2 x i64> %625, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %629, <2 x i64>* %418, align 16
  %630 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 3, i64 %556
  %631 = bitcast <2 x i64>* %630 to <4 x i32>*
  %632 = load <4 x i32>, <4 x i32>* %631, align 16
  %633 = getelementptr inbounds <2 x i64>, <2 x i64>* %630, i64 1
  %634 = bitcast <2 x i64>* %633 to <4 x i32>*
  %635 = load <4 x i32>, <4 x i32>* %634, align 16
  %636 = shufflevector <4 x i32> %632, <4 x i32> %635, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %637 = bitcast <4 x i32> %636 to <2 x i64>
  %638 = getelementptr inbounds <2 x i64>, <2 x i64>* %630, i64 2
  %639 = bitcast <2 x i64>* %638 to <4 x i32>*
  %640 = load <4 x i32>, <4 x i32>* %639, align 16
  %641 = getelementptr inbounds <2 x i64>, <2 x i64>* %630, i64 3
  %642 = bitcast <2 x i64>* %641 to <4 x i32>*
  %643 = load <4 x i32>, <4 x i32>* %642, align 16
  %644 = shufflevector <4 x i32> %640, <4 x i32> %643, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %645 = bitcast <4 x i32> %644 to <2 x i64>
  %646 = shufflevector <4 x i32> %632, <4 x i32> %635, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %647 = bitcast <4 x i32> %646 to <2 x i64>
  %648 = shufflevector <4 x i32> %640, <4 x i32> %643, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %649 = bitcast <4 x i32> %648 to <2 x i64>
  %650 = shufflevector <2 x i64> %637, <2 x i64> %645, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %650, <2 x i64>* %419, align 16
  %651 = shufflevector <2 x i64> %637, <2 x i64> %645, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %651, <2 x i64>* %420, align 16
  %652 = shufflevector <2 x i64> %647, <2 x i64> %649, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %652, <2 x i64>* %421, align 16
  %653 = shufflevector <2 x i64> %647, <2 x i64> %649, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %653, <2 x i64>* %422, align 16
  call fastcc void @highbd_idct32_135_4x32(<2 x i64>* nonnull %407)
  %654 = tail call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, i32 %3) #7
  %655 = add <8 x i16> %654, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  br label %656

656:                                              ; preds = %656, %555
  %657 = phi i64 [ 0, %555 ], [ %677, %656 ]
  %658 = mul nsw i64 %657, %423
  %659 = getelementptr inbounds i16, i16* %557, i64 %658
  %660 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 %657
  %661 = bitcast <2 x i64>* %660 to <4 x i32>*
  %662 = load <4 x i32>, <4 x i32>* %661, align 16
  %663 = add <4 x i32> %662, <i32 32, i32 32, i32 32, i32 32>
  %664 = ashr <4 x i32> %663, <i32 6, i32 6, i32 6, i32 6>
  %665 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %664, <4 x i32> %664) #7
  %666 = bitcast i16* %659 to i64*
  %667 = load i64, i64* %666, align 1
  %668 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %667, i32 0
  %669 = bitcast <2 x i64> %668 to <8 x i16>
  %670 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %669, <8 x i16> %665) #7
  %671 = icmp sgt <8 x i16> %670, zeroinitializer
  %672 = select <8 x i1> %671, <8 x i16> %670, <8 x i16> zeroinitializer
  %673 = icmp slt <8 x i16> %672, %655
  %674 = select <8 x i1> %673, <8 x i16> %672, <8 x i16> %655
  %675 = bitcast <8 x i16> %674 to <2 x i64>
  %676 = extractelement <2 x i64> %675, i32 0
  store i64 %676, i64* %666, align 1
  %677 = add nuw nsw i64 %657, 1
  %678 = icmp eq i64 %677, 32
  br i1 %678, label %679, label %656

679:                                              ; preds = %656
  %680 = getelementptr inbounds i16, i16* %557, i64 4
  %681 = add nuw nsw i64 %556, 4
  %682 = icmp ult i64 %681, 32
  br i1 %682, label %555, label %683

683:                                              ; preds = %679
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %405) #7
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %404) #7
  br label %684

684:                                              ; preds = %683, %402
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @highbd_idct32_135_4x32(<2 x i64>* nocapture) unnamed_addr #0 {
  %2 = alloca [32 x <2 x i64>], align 16
  %3 = alloca [32 x <2 x i64>], align 16
  %4 = bitcast [32 x <2 x i64>]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %4) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 512, i1 false)
  %5 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 0
  %6 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 4
  %7 = bitcast <2 x i64>* %6 to <4 x i32>*
  %8 = load <4 x i32>, <4 x i32>* %7, align 16
  %9 = ashr <4 x i32> %8, <i32 31, i32 31, i32 31, i32 31>
  %10 = xor <4 x i32> %9, %8
  %11 = sub <4 x i32> %10, %9
  %12 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %13 = bitcast <4 x i32> %12 to <2 x i64>
  %14 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %17 = bitcast <4 x i32> %16 to <2 x i64>
  %18 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %19 = bitcast <4 x i32> %18 to <2 x i64>
  %20 = and <2 x i64> %19, <i64 4294967295, i64 4294967295>
  %21 = mul nuw nsw <2 x i64> %20, <i64 12784, i64 12784>
  %22 = xor <2 x i64> %21, %15
  %23 = and <2 x i64> %17, <i64 4294967295, i64 4294967295>
  %24 = mul nuw nsw <2 x i64> %23, <i64 12784, i64 12784>
  %25 = xor <2 x i64> %24, %13
  %26 = sub <2 x i64> <i64 32768, i64 32768>, %15
  %27 = add <2 x i64> %22, %26
  %28 = bitcast <2 x i64> %27 to <16 x i8>
  %29 = shufflevector <16 x i8> %28, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %30 = sub <2 x i64> <i64 32768, i64 32768>, %13
  %31 = add <2 x i64> %25, %30
  %32 = bitcast <2 x i64> %31 to <16 x i8>
  %33 = shufflevector <16 x i8> %32, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %34 = bitcast <16 x i8> %29 to <4 x i32>
  %35 = bitcast <16 x i8> %33 to <4 x i32>
  %36 = shufflevector <4 x i32> %34, <4 x i32> %35, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %37 = shufflevector <4 x i32> %34, <4 x i32> %35, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %38 = shufflevector <4 x i32> %36, <4 x i32> %37, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %39 = mul nuw nsw <2 x i64> %20, <i64 64276, i64 64276>
  %40 = xor <2 x i64> %39, %15
  %41 = mul nuw nsw <2 x i64> %23, <i64 64276, i64 64276>
  %42 = xor <2 x i64> %41, %13
  %43 = add <2 x i64> %40, %26
  %44 = bitcast <2 x i64> %43 to <16 x i8>
  %45 = shufflevector <16 x i8> %44, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %46 = add <2 x i64> %42, %30
  %47 = bitcast <2 x i64> %46 to <16 x i8>
  %48 = shufflevector <16 x i8> %47, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %49 = bitcast <16 x i8> %45 to <4 x i32>
  %50 = bitcast <16 x i8> %48 to <4 x i32>
  %51 = shufflevector <4 x i32> %49, <4 x i32> %50, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %52 = shufflevector <4 x i32> %49, <4 x i32> %50, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %53 = shufflevector <4 x i32> %51, <4 x i32> %52, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %54 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 12
  %55 = bitcast <2 x i64>* %54 to <4 x i32>*
  %56 = load <4 x i32>, <4 x i32>* %55, align 16
  %57 = ashr <4 x i32> %56, <i32 31, i32 31, i32 31, i32 31>
  %58 = xor <4 x i32> %57, %56
  %59 = sub <4 x i32> %58, %57
  %60 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %61 = bitcast <4 x i32> %60 to <2 x i64>
  %62 = shufflevector <4 x i32> %57, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %63 = bitcast <4 x i32> %62 to <2 x i64>
  %64 = shufflevector <4 x i32> %59, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %65 = bitcast <4 x i32> %64 to <2 x i64>
  %66 = shufflevector <4 x i32> %59, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %67 = bitcast <4 x i32> %66 to <2 x i64>
  %68 = and <2 x i64> %67, <i64 4294967295, i64 4294967295>
  %69 = mul nuw nsw <2 x i64> %68, <i64 36408, i64 36408>
  %70 = xor <2 x i64> %69, %63
  %71 = and <2 x i64> %65, <i64 4294967295, i64 4294967295>
  %72 = mul nuw nsw <2 x i64> %71, <i64 36408, i64 36408>
  %73 = xor <2 x i64> %72, %61
  %74 = add <2 x i64> %63, <i64 32768, i64 32768>
  %75 = sub <2 x i64> %74, %70
  %76 = bitcast <2 x i64> %75 to <16 x i8>
  %77 = shufflevector <16 x i8> %76, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %78 = add <2 x i64> %61, <i64 32768, i64 32768>
  %79 = sub <2 x i64> %78, %73
  %80 = bitcast <2 x i64> %79 to <16 x i8>
  %81 = shufflevector <16 x i8> %80, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %82 = bitcast <16 x i8> %77 to <4 x i32>
  %83 = bitcast <16 x i8> %81 to <4 x i32>
  %84 = shufflevector <4 x i32> %82, <4 x i32> %83, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %85 = shufflevector <4 x i32> %82, <4 x i32> %83, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %86 = shufflevector <4 x i32> %84, <4 x i32> %85, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %87 = mul nuw nsw <2 x i64> %68, <i64 54492, i64 54492>
  %88 = xor <2 x i64> %87, %63
  %89 = mul nuw nsw <2 x i64> %71, <i64 54492, i64 54492>
  %90 = xor <2 x i64> %89, %61
  %91 = sub <2 x i64> <i64 32768, i64 32768>, %63
  %92 = add <2 x i64> %91, %88
  %93 = bitcast <2 x i64> %92 to <16 x i8>
  %94 = shufflevector <16 x i8> %93, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %95 = sub <2 x i64> <i64 32768, i64 32768>, %61
  %96 = add <2 x i64> %95, %90
  %97 = bitcast <2 x i64> %96 to <16 x i8>
  %98 = shufflevector <16 x i8> %97, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %99 = bitcast <16 x i8> %94 to <4 x i32>
  %100 = bitcast <16 x i8> %98 to <4 x i32>
  %101 = shufflevector <4 x i32> %99, <4 x i32> %100, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %102 = shufflevector <4 x i32> %99, <4 x i32> %100, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %103 = shufflevector <4 x i32> %101, <4 x i32> %102, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %104 = bitcast <2 x i64>* %0 to <4 x i32>*
  %105 = load <4 x i32>, <4 x i32>* %104, align 16
  %106 = ashr <4 x i32> %105, <i32 31, i32 31, i32 31, i32 31>
  %107 = xor <4 x i32> %106, %105
  %108 = sub <4 x i32> %107, %106
  %109 = shufflevector <4 x i32> %106, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %110 = bitcast <4 x i32> %109 to <2 x i64>
  %111 = shufflevector <4 x i32> %106, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %112 = bitcast <4 x i32> %111 to <2 x i64>
  %113 = shufflevector <4 x i32> %108, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %114 = bitcast <4 x i32> %113 to <2 x i64>
  %115 = shufflevector <4 x i32> %108, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %116 = bitcast <4 x i32> %115 to <2 x i64>
  %117 = and <2 x i64> %116, <i64 4294967295, i64 4294967295>
  %118 = mul nuw nsw <2 x i64> %117, <i64 46340, i64 46340>
  %119 = xor <2 x i64> %118, %112
  %120 = and <2 x i64> %114, <i64 4294967295, i64 4294967295>
  %121 = mul nuw nsw <2 x i64> %120, <i64 46340, i64 46340>
  %122 = xor <2 x i64> %121, %110
  %123 = sub <2 x i64> <i64 32768, i64 32768>, %112
  %124 = add <2 x i64> %123, %119
  %125 = bitcast <2 x i64> %124 to <16 x i8>
  %126 = shufflevector <16 x i8> %125, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %127 = sub <2 x i64> <i64 32768, i64 32768>, %110
  %128 = add <2 x i64> %127, %122
  %129 = bitcast <2 x i64> %128 to <16 x i8>
  %130 = shufflevector <16 x i8> %129, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %131 = bitcast <16 x i8> %126 to <4 x i32>
  %132 = bitcast <16 x i8> %130 to <4 x i32>
  %133 = shufflevector <4 x i32> %131, <4 x i32> %132, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %134 = shufflevector <4 x i32> %131, <4 x i32> %132, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %135 = shufflevector <4 x i32> %133, <4 x i32> %134, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %136 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 8
  %137 = bitcast <2 x i64>* %136 to <4 x i32>*
  %138 = load <4 x i32>, <4 x i32>* %137, align 16
  %139 = ashr <4 x i32> %138, <i32 31, i32 31, i32 31, i32 31>
  %140 = xor <4 x i32> %139, %138
  %141 = sub <4 x i32> %140, %139
  %142 = shufflevector <4 x i32> %139, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %143 = bitcast <4 x i32> %142 to <2 x i64>
  %144 = shufflevector <4 x i32> %139, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %145 = bitcast <4 x i32> %144 to <2 x i64>
  %146 = shufflevector <4 x i32> %141, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %147 = bitcast <4 x i32> %146 to <2 x i64>
  %148 = shufflevector <4 x i32> %141, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %149 = bitcast <4 x i32> %148 to <2 x i64>
  %150 = and <2 x i64> %149, <i64 4294967295, i64 4294967295>
  %151 = mul nuw nsw <2 x i64> %150, <i64 25080, i64 25080>
  %152 = xor <2 x i64> %151, %145
  %153 = and <2 x i64> %147, <i64 4294967295, i64 4294967295>
  %154 = mul nuw nsw <2 x i64> %153, <i64 25080, i64 25080>
  %155 = xor <2 x i64> %154, %143
  %156 = sub <2 x i64> <i64 32768, i64 32768>, %145
  %157 = add <2 x i64> %152, %156
  %158 = bitcast <2 x i64> %157 to <16 x i8>
  %159 = shufflevector <16 x i8> %158, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %160 = sub <2 x i64> <i64 32768, i64 32768>, %143
  %161 = add <2 x i64> %155, %160
  %162 = bitcast <2 x i64> %161 to <16 x i8>
  %163 = shufflevector <16 x i8> %162, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %164 = bitcast <16 x i8> %159 to <4 x i32>
  %165 = bitcast <16 x i8> %163 to <4 x i32>
  %166 = shufflevector <4 x i32> %164, <4 x i32> %165, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %167 = shufflevector <4 x i32> %164, <4 x i32> %165, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %168 = shufflevector <4 x i32> %166, <4 x i32> %167, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %169 = mul nuw nsw <2 x i64> %150, <i64 60548, i64 60548>
  %170 = xor <2 x i64> %169, %145
  %171 = mul nuw nsw <2 x i64> %153, <i64 60548, i64 60548>
  %172 = xor <2 x i64> %171, %143
  %173 = add <2 x i64> %170, %156
  %174 = bitcast <2 x i64> %173 to <16 x i8>
  %175 = shufflevector <16 x i8> %174, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %176 = add <2 x i64> %172, %160
  %177 = bitcast <2 x i64> %176 to <16 x i8>
  %178 = shufflevector <16 x i8> %177, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %179 = bitcast <16 x i8> %175 to <4 x i32>
  %180 = bitcast <16 x i8> %178 to <4 x i32>
  %181 = shufflevector <4 x i32> %179, <4 x i32> %180, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %182 = shufflevector <4 x i32> %179, <4 x i32> %180, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %183 = shufflevector <4 x i32> %181, <4 x i32> %182, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %184 = add <4 x i32> %86, %38
  %185 = sub <4 x i32> %38, %86
  %186 = sub <4 x i32> %53, %103
  %187 = add <4 x i32> %103, %53
  %188 = add <4 x i32> %183, %135
  %189 = add <4 x i32> %168, %135
  %190 = sub <4 x i32> %135, %168
  %191 = sub <4 x i32> %135, %183
  %192 = ashr <4 x i32> %186, <i32 31, i32 31, i32 31, i32 31>
  %193 = xor <4 x i32> %192, %186
  %194 = sub <4 x i32> %193, %192
  %195 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %196 = bitcast <4 x i32> %195 to <2 x i64>
  %197 = shufflevector <4 x i32> %192, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %198 = bitcast <4 x i32> %197 to <2 x i64>
  %199 = shufflevector <4 x i32> %194, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %200 = bitcast <4 x i32> %199 to <2 x i64>
  %201 = shufflevector <4 x i32> %194, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %202 = bitcast <4 x i32> %201 to <2 x i64>
  %203 = ashr <4 x i32> %185, <i32 31, i32 31, i32 31, i32 31>
  %204 = xor <4 x i32> %203, %185
  %205 = sub <4 x i32> %204, %203
  %206 = shufflevector <4 x i32> %203, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %207 = bitcast <4 x i32> %206 to <2 x i64>
  %208 = shufflevector <4 x i32> %203, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %209 = bitcast <4 x i32> %208 to <2 x i64>
  %210 = shufflevector <4 x i32> %205, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %211 = bitcast <4 x i32> %210 to <2 x i64>
  %212 = shufflevector <4 x i32> %205, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %213 = bitcast <4 x i32> %212 to <2 x i64>
  %214 = and <2 x i64> %202, <i64 4294967295, i64 4294967295>
  %215 = mul nuw nsw <2 x i64> %214, <i64 46340, i64 46340>
  %216 = xor <2 x i64> %215, %198
  %217 = and <2 x i64> %200, <i64 4294967295, i64 4294967295>
  %218 = mul nuw nsw <2 x i64> %217, <i64 46340, i64 46340>
  %219 = xor <2 x i64> %218, %196
  %220 = and <2 x i64> %213, <i64 4294967295, i64 4294967295>
  %221 = mul nuw nsw <2 x i64> %220, <i64 46340, i64 46340>
  %222 = xor <2 x i64> %221, %209
  %223 = and <2 x i64> %211, <i64 4294967295, i64 4294967295>
  %224 = mul nuw nsw <2 x i64> %223, <i64 46340, i64 46340>
  %225 = xor <2 x i64> %224, %207
  %226 = sub <2 x i64> <i64 32768, i64 32768>, %198
  %227 = add <2 x i64> %226, %209
  %228 = add <2 x i64> %227, %216
  %229 = sub <2 x i64> %228, %222
  %230 = bitcast <2 x i64> %229 to <16 x i8>
  %231 = shufflevector <16 x i8> %230, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %232 = sub <2 x i64> <i64 32768, i64 32768>, %196
  %233 = add <2 x i64> %232, %207
  %234 = add <2 x i64> %233, %219
  %235 = sub <2 x i64> %234, %225
  %236 = bitcast <2 x i64> %235 to <16 x i8>
  %237 = shufflevector <16 x i8> %236, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %238 = sub <2 x i64> %226, %209
  %239 = add <2 x i64> %238, %222
  %240 = add <2 x i64> %239, %216
  %241 = bitcast <2 x i64> %240 to <16 x i8>
  %242 = shufflevector <16 x i8> %241, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %243 = sub <2 x i64> %232, %207
  %244 = add <2 x i64> %243, %225
  %245 = add <2 x i64> %244, %219
  %246 = bitcast <2 x i64> %245 to <16 x i8>
  %247 = shufflevector <16 x i8> %246, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %248 = bitcast <16 x i8> %231 to <4 x i32>
  %249 = bitcast <16 x i8> %237 to <4 x i32>
  %250 = shufflevector <4 x i32> %248, <4 x i32> %249, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %251 = shufflevector <4 x i32> %248, <4 x i32> %249, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %252 = shufflevector <4 x i32> %250, <4 x i32> %251, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %253 = bitcast <16 x i8> %242 to <4 x i32>
  %254 = bitcast <16 x i8> %247 to <4 x i32>
  %255 = shufflevector <4 x i32> %253, <4 x i32> %254, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %256 = shufflevector <4 x i32> %253, <4 x i32> %254, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %257 = shufflevector <4 x i32> %255, <4 x i32> %256, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %258 = add <4 x i32> %188, %187
  %259 = add <4 x i32> %257, %189
  %260 = add <4 x i32> %252, %190
  %261 = add <4 x i32> %191, %184
  %262 = sub <4 x i32> %191, %184
  %263 = sub <4 x i32> %190, %252
  %264 = sub <4 x i32> %189, %257
  %265 = sub <4 x i32> %188, %187
  %266 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 2
  %267 = bitcast <2 x i64>* %266 to <4 x i32>*
  %268 = load <4 x i32>, <4 x i32>* %267, align 16
  %269 = ashr <4 x i32> %268, <i32 31, i32 31, i32 31, i32 31>
  %270 = xor <4 x i32> %269, %268
  %271 = sub <4 x i32> %270, %269
  %272 = shufflevector <4 x i32> %269, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %273 = bitcast <4 x i32> %272 to <2 x i64>
  %274 = shufflevector <4 x i32> %269, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %275 = bitcast <4 x i32> %274 to <2 x i64>
  %276 = shufflevector <4 x i32> %271, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %277 = bitcast <4 x i32> %276 to <2 x i64>
  %278 = shufflevector <4 x i32> %271, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %279 = bitcast <4 x i32> %278 to <2 x i64>
  %280 = and <2 x i64> %279, <i64 4294967295, i64 4294967295>
  %281 = mul nuw nsw <2 x i64> %280, <i64 6424, i64 6424>
  %282 = xor <2 x i64> %281, %275
  %283 = and <2 x i64> %277, <i64 4294967295, i64 4294967295>
  %284 = mul nuw nsw <2 x i64> %283, <i64 6424, i64 6424>
  %285 = xor <2 x i64> %284, %273
  %286 = sub <2 x i64> <i64 32768, i64 32768>, %275
  %287 = add <2 x i64> %282, %286
  %288 = bitcast <2 x i64> %287 to <16 x i8>
  %289 = shufflevector <16 x i8> %288, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %290 = sub <2 x i64> <i64 32768, i64 32768>, %273
  %291 = add <2 x i64> %285, %290
  %292 = bitcast <2 x i64> %291 to <16 x i8>
  %293 = shufflevector <16 x i8> %292, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %294 = bitcast <16 x i8> %289 to <4 x i32>
  %295 = bitcast <16 x i8> %293 to <4 x i32>
  %296 = shufflevector <4 x i32> %294, <4 x i32> %295, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %297 = shufflevector <4 x i32> %294, <4 x i32> %295, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %298 = shufflevector <4 x i32> %296, <4 x i32> %297, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %299 = mul nuw nsw <2 x i64> %280, <i64 65220, i64 65220>
  %300 = xor <2 x i64> %299, %275
  %301 = mul nuw nsw <2 x i64> %283, <i64 65220, i64 65220>
  %302 = xor <2 x i64> %301, %273
  %303 = add <2 x i64> %300, %286
  %304 = bitcast <2 x i64> %303 to <16 x i8>
  %305 = shufflevector <16 x i8> %304, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %306 = add <2 x i64> %302, %290
  %307 = bitcast <2 x i64> %306 to <16 x i8>
  %308 = shufflevector <16 x i8> %307, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %309 = bitcast <16 x i8> %305 to <4 x i32>
  %310 = bitcast <16 x i8> %308 to <4 x i32>
  %311 = shufflevector <4 x i32> %309, <4 x i32> %310, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %312 = shufflevector <4 x i32> %309, <4 x i32> %310, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %313 = shufflevector <4 x i32> %311, <4 x i32> %312, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %314 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 14
  %315 = bitcast <2 x i64>* %314 to <4 x i32>*
  %316 = load <4 x i32>, <4 x i32>* %315, align 16
  %317 = ashr <4 x i32> %316, <i32 31, i32 31, i32 31, i32 31>
  %318 = xor <4 x i32> %317, %316
  %319 = sub <4 x i32> %318, %317
  %320 = shufflevector <4 x i32> %317, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %321 = bitcast <4 x i32> %320 to <2 x i64>
  %322 = shufflevector <4 x i32> %317, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %323 = bitcast <4 x i32> %322 to <2 x i64>
  %324 = shufflevector <4 x i32> %319, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %325 = bitcast <4 x i32> %324 to <2 x i64>
  %326 = shufflevector <4 x i32> %319, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %327 = bitcast <4 x i32> %326 to <2 x i64>
  %328 = and <2 x i64> %327, <i64 4294967295, i64 4294967295>
  %329 = mul nuw nsw <2 x i64> %328, <i64 41576, i64 41576>
  %330 = xor <2 x i64> %329, %323
  %331 = and <2 x i64> %325, <i64 4294967295, i64 4294967295>
  %332 = mul nuw nsw <2 x i64> %331, <i64 41576, i64 41576>
  %333 = xor <2 x i64> %332, %321
  %334 = add <2 x i64> %323, <i64 32768, i64 32768>
  %335 = sub <2 x i64> %334, %330
  %336 = bitcast <2 x i64> %335 to <16 x i8>
  %337 = shufflevector <16 x i8> %336, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %338 = add <2 x i64> %321, <i64 32768, i64 32768>
  %339 = sub <2 x i64> %338, %333
  %340 = bitcast <2 x i64> %339 to <16 x i8>
  %341 = shufflevector <16 x i8> %340, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %342 = bitcast <16 x i8> %337 to <4 x i32>
  %343 = bitcast <16 x i8> %341 to <4 x i32>
  %344 = shufflevector <4 x i32> %342, <4 x i32> %343, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %345 = shufflevector <4 x i32> %342, <4 x i32> %343, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %346 = shufflevector <4 x i32> %344, <4 x i32> %345, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %347 = mul nuw nsw <2 x i64> %328, <i64 50660, i64 50660>
  %348 = xor <2 x i64> %347, %323
  %349 = mul nuw nsw <2 x i64> %331, <i64 50660, i64 50660>
  %350 = xor <2 x i64> %349, %321
  %351 = sub <2 x i64> <i64 32768, i64 32768>, %323
  %352 = add <2 x i64> %351, %348
  %353 = bitcast <2 x i64> %352 to <16 x i8>
  %354 = shufflevector <16 x i8> %353, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %355 = sub <2 x i64> <i64 32768, i64 32768>, %321
  %356 = add <2 x i64> %355, %350
  %357 = bitcast <2 x i64> %356 to <16 x i8>
  %358 = shufflevector <16 x i8> %357, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %359 = bitcast <16 x i8> %354 to <4 x i32>
  %360 = bitcast <16 x i8> %358 to <4 x i32>
  %361 = shufflevector <4 x i32> %359, <4 x i32> %360, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %362 = shufflevector <4 x i32> %359, <4 x i32> %360, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %363 = shufflevector <4 x i32> %361, <4 x i32> %362, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %364 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 10
  %365 = bitcast <2 x i64>* %364 to <4 x i32>*
  %366 = load <4 x i32>, <4 x i32>* %365, align 16
  %367 = ashr <4 x i32> %366, <i32 31, i32 31, i32 31, i32 31>
  %368 = xor <4 x i32> %367, %366
  %369 = sub <4 x i32> %368, %367
  %370 = shufflevector <4 x i32> %367, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %371 = bitcast <4 x i32> %370 to <2 x i64>
  %372 = shufflevector <4 x i32> %367, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %373 = bitcast <4 x i32> %372 to <2 x i64>
  %374 = shufflevector <4 x i32> %369, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %375 = bitcast <4 x i32> %374 to <2 x i64>
  %376 = shufflevector <4 x i32> %369, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %377 = bitcast <4 x i32> %376 to <2 x i64>
  %378 = and <2 x i64> %377, <i64 4294967295, i64 4294967295>
  %379 = mul nuw nsw <2 x i64> %378, <i64 30892, i64 30892>
  %380 = xor <2 x i64> %379, %373
  %381 = and <2 x i64> %375, <i64 4294967295, i64 4294967295>
  %382 = mul nuw nsw <2 x i64> %381, <i64 30892, i64 30892>
  %383 = xor <2 x i64> %382, %371
  %384 = sub <2 x i64> <i64 32768, i64 32768>, %373
  %385 = add <2 x i64> %380, %384
  %386 = bitcast <2 x i64> %385 to <16 x i8>
  %387 = shufflevector <16 x i8> %386, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %388 = sub <2 x i64> <i64 32768, i64 32768>, %371
  %389 = add <2 x i64> %383, %388
  %390 = bitcast <2 x i64> %389 to <16 x i8>
  %391 = shufflevector <16 x i8> %390, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %392 = bitcast <16 x i8> %387 to <4 x i32>
  %393 = bitcast <16 x i8> %391 to <4 x i32>
  %394 = shufflevector <4 x i32> %392, <4 x i32> %393, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %395 = shufflevector <4 x i32> %392, <4 x i32> %393, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %396 = shufflevector <4 x i32> %394, <4 x i32> %395, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %397 = mul nuw nsw <2 x i64> %378, <i64 57796, i64 57796>
  %398 = xor <2 x i64> %397, %373
  %399 = mul nuw nsw <2 x i64> %381, <i64 57796, i64 57796>
  %400 = xor <2 x i64> %399, %371
  %401 = add <2 x i64> %398, %384
  %402 = bitcast <2 x i64> %401 to <16 x i8>
  %403 = shufflevector <16 x i8> %402, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %404 = add <2 x i64> %400, %388
  %405 = bitcast <2 x i64> %404 to <16 x i8>
  %406 = shufflevector <16 x i8> %405, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %407 = bitcast <16 x i8> %403 to <4 x i32>
  %408 = bitcast <16 x i8> %406 to <4 x i32>
  %409 = shufflevector <4 x i32> %407, <4 x i32> %408, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %410 = shufflevector <4 x i32> %407, <4 x i32> %408, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %411 = shufflevector <4 x i32> %409, <4 x i32> %410, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %412 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 6
  %413 = bitcast <2 x i64>* %412 to <4 x i32>*
  %414 = load <4 x i32>, <4 x i32>* %413, align 16
  %415 = ashr <4 x i32> %414, <i32 31, i32 31, i32 31, i32 31>
  %416 = xor <4 x i32> %415, %414
  %417 = sub <4 x i32> %416, %415
  %418 = shufflevector <4 x i32> %415, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %419 = bitcast <4 x i32> %418 to <2 x i64>
  %420 = shufflevector <4 x i32> %415, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %421 = bitcast <4 x i32> %420 to <2 x i64>
  %422 = shufflevector <4 x i32> %417, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %423 = bitcast <4 x i32> %422 to <2 x i64>
  %424 = shufflevector <4 x i32> %417, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %425 = bitcast <4 x i32> %424 to <2 x i64>
  %426 = and <2 x i64> %425, <i64 4294967295, i64 4294967295>
  %427 = mul nuw nsw <2 x i64> %426, <i64 19024, i64 19024>
  %428 = xor <2 x i64> %427, %421
  %429 = and <2 x i64> %423, <i64 4294967295, i64 4294967295>
  %430 = mul nuw nsw <2 x i64> %429, <i64 19024, i64 19024>
  %431 = xor <2 x i64> %430, %419
  %432 = add <2 x i64> %421, <i64 32768, i64 32768>
  %433 = sub <2 x i64> %432, %428
  %434 = bitcast <2 x i64> %433 to <16 x i8>
  %435 = shufflevector <16 x i8> %434, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %436 = add <2 x i64> %419, <i64 32768, i64 32768>
  %437 = sub <2 x i64> %436, %431
  %438 = bitcast <2 x i64> %437 to <16 x i8>
  %439 = shufflevector <16 x i8> %438, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %440 = bitcast <16 x i8> %435 to <4 x i32>
  %441 = bitcast <16 x i8> %439 to <4 x i32>
  %442 = shufflevector <4 x i32> %440, <4 x i32> %441, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %443 = shufflevector <4 x i32> %440, <4 x i32> %441, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %444 = shufflevector <4 x i32> %442, <4 x i32> %443, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %445 = mul nuw nsw <2 x i64> %426, <i64 62716, i64 62716>
  %446 = xor <2 x i64> %445, %421
  %447 = mul nuw nsw <2 x i64> %429, <i64 62716, i64 62716>
  %448 = xor <2 x i64> %447, %419
  %449 = sub <2 x i64> <i64 32768, i64 32768>, %421
  %450 = add <2 x i64> %449, %446
  %451 = bitcast <2 x i64> %450 to <16 x i8>
  %452 = shufflevector <16 x i8> %451, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %453 = sub <2 x i64> <i64 32768, i64 32768>, %419
  %454 = add <2 x i64> %453, %448
  %455 = bitcast <2 x i64> %454 to <16 x i8>
  %456 = shufflevector <16 x i8> %455, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %457 = bitcast <16 x i8> %452 to <4 x i32>
  %458 = bitcast <16 x i8> %456 to <4 x i32>
  %459 = shufflevector <4 x i32> %457, <4 x i32> %458, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %460 = shufflevector <4 x i32> %457, <4 x i32> %458, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %461 = shufflevector <4 x i32> %459, <4 x i32> %460, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %462 = add <4 x i32> %346, %298
  %463 = sub <4 x i32> %298, %346
  %464 = sub <4 x i32> %313, %363
  %465 = add <4 x i32> %363, %313
  %466 = sub <4 x i32> %396, %444
  %467 = add <4 x i32> %444, %396
  %468 = add <4 x i32> %461, %411
  %469 = sub <4 x i32> %411, %461
  %470 = ashr <4 x i32> %464, <i32 31, i32 31, i32 31, i32 31>
  %471 = xor <4 x i32> %470, %464
  %472 = sub <4 x i32> %471, %470
  %473 = shufflevector <4 x i32> %470, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %474 = bitcast <4 x i32> %473 to <2 x i64>
  %475 = shufflevector <4 x i32> %470, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %476 = bitcast <4 x i32> %475 to <2 x i64>
  %477 = shufflevector <4 x i32> %472, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %478 = bitcast <4 x i32> %477 to <2 x i64>
  %479 = shufflevector <4 x i32> %472, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %480 = bitcast <4 x i32> %479 to <2 x i64>
  %481 = ashr <4 x i32> %463, <i32 31, i32 31, i32 31, i32 31>
  %482 = xor <4 x i32> %481, %463
  %483 = sub <4 x i32> %482, %481
  %484 = shufflevector <4 x i32> %481, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %485 = bitcast <4 x i32> %484 to <2 x i64>
  %486 = shufflevector <4 x i32> %481, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %487 = bitcast <4 x i32> %486 to <2 x i64>
  %488 = shufflevector <4 x i32> %483, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %489 = bitcast <4 x i32> %488 to <2 x i64>
  %490 = shufflevector <4 x i32> %483, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %491 = bitcast <4 x i32> %490 to <2 x i64>
  %492 = and <2 x i64> %480, <i64 4294967295, i64 4294967295>
  %493 = mul nuw nsw <2 x i64> %492, <i64 60548, i64 60548>
  %494 = xor <2 x i64> %493, %476
  %495 = and <2 x i64> %478, <i64 4294967295, i64 4294967295>
  %496 = mul nuw nsw <2 x i64> %495, <i64 60548, i64 60548>
  %497 = xor <2 x i64> %496, %474
  %498 = mul nuw nsw <2 x i64> %492, <i64 25080, i64 25080>
  %499 = xor <2 x i64> %498, %476
  %500 = mul nuw nsw <2 x i64> %495, <i64 25080, i64 25080>
  %501 = xor <2 x i64> %500, %474
  %502 = and <2 x i64> %491, <i64 4294967295, i64 4294967295>
  %503 = mul nuw nsw <2 x i64> %502, <i64 25080, i64 25080>
  %504 = xor <2 x i64> %503, %487
  %505 = and <2 x i64> %489, <i64 4294967295, i64 4294967295>
  %506 = mul nuw nsw <2 x i64> %505, <i64 25080, i64 25080>
  %507 = xor <2 x i64> %506, %485
  %508 = mul nuw nsw <2 x i64> %502, <i64 60548, i64 60548>
  %509 = xor <2 x i64> %508, %487
  %510 = mul nuw nsw <2 x i64> %505, <i64 60548, i64 60548>
  %511 = xor <2 x i64> %510, %485
  %512 = sub <2 x i64> <i64 32768, i64 32768>, %476
  %513 = add <2 x i64> %512, %487
  %514 = add <2 x i64> %513, %499
  %515 = sub <2 x i64> %514, %509
  %516 = bitcast <2 x i64> %515 to <16 x i8>
  %517 = shufflevector <16 x i8> %516, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %518 = sub <2 x i64> <i64 32768, i64 32768>, %474
  %519 = add <2 x i64> %518, %485
  %520 = add <2 x i64> %519, %501
  %521 = sub <2 x i64> %520, %511
  %522 = bitcast <2 x i64> %521 to <16 x i8>
  %523 = shufflevector <16 x i8> %522, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %524 = sub <2 x i64> %512, %487
  %525 = add <2 x i64> %524, %494
  %526 = add <2 x i64> %525, %504
  %527 = bitcast <2 x i64> %526 to <16 x i8>
  %528 = shufflevector <16 x i8> %527, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %529 = sub <2 x i64> %518, %485
  %530 = add <2 x i64> %529, %497
  %531 = add <2 x i64> %530, %507
  %532 = bitcast <2 x i64> %531 to <16 x i8>
  %533 = shufflevector <16 x i8> %532, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %534 = bitcast <16 x i8> %517 to <4 x i32>
  %535 = bitcast <16 x i8> %523 to <4 x i32>
  %536 = shufflevector <4 x i32> %534, <4 x i32> %535, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %537 = shufflevector <4 x i32> %534, <4 x i32> %535, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %538 = shufflevector <4 x i32> %536, <4 x i32> %537, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %539 = bitcast <16 x i8> %528 to <4 x i32>
  %540 = bitcast <16 x i8> %533 to <4 x i32>
  %541 = shufflevector <4 x i32> %539, <4 x i32> %540, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %542 = shufflevector <4 x i32> %539, <4 x i32> %540, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %543 = shufflevector <4 x i32> %541, <4 x i32> %542, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %544 = ashr <4 x i32> %466, <i32 31, i32 31, i32 31, i32 31>
  %545 = xor <4 x i32> %544, %466
  %546 = sub <4 x i32> %545, %544
  %547 = shufflevector <4 x i32> %544, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %548 = bitcast <4 x i32> %547 to <2 x i64>
  %549 = shufflevector <4 x i32> %544, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %550 = bitcast <4 x i32> %549 to <2 x i64>
  %551 = shufflevector <4 x i32> %546, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %552 = bitcast <4 x i32> %551 to <2 x i64>
  %553 = shufflevector <4 x i32> %546, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %554 = bitcast <4 x i32> %553 to <2 x i64>
  %555 = ashr <4 x i32> %469, <i32 31, i32 31, i32 31, i32 31>
  %556 = xor <4 x i32> %555, %469
  %557 = sub <4 x i32> %556, %555
  %558 = shufflevector <4 x i32> %555, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %559 = bitcast <4 x i32> %558 to <2 x i64>
  %560 = shufflevector <4 x i32> %555, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %561 = bitcast <4 x i32> %560 to <2 x i64>
  %562 = shufflevector <4 x i32> %557, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %563 = bitcast <4 x i32> %562 to <2 x i64>
  %564 = shufflevector <4 x i32> %557, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %565 = bitcast <4 x i32> %564 to <2 x i64>
  %566 = and <2 x i64> %554, <i64 4294967295, i64 4294967295>
  %567 = mul nuw nsw <2 x i64> %566, <i64 25080, i64 25080>
  %568 = xor <2 x i64> %567, %550
  %569 = and <2 x i64> %552, <i64 4294967295, i64 4294967295>
  %570 = mul nuw nsw <2 x i64> %569, <i64 25080, i64 25080>
  %571 = xor <2 x i64> %570, %548
  %572 = mul nuw nsw <2 x i64> %566, <i64 60548, i64 60548>
  %573 = xor <2 x i64> %572, %550
  %574 = mul nuw nsw <2 x i64> %569, <i64 60548, i64 60548>
  %575 = xor <2 x i64> %574, %548
  %576 = and <2 x i64> %565, <i64 4294967295, i64 4294967295>
  %577 = mul nuw nsw <2 x i64> %576, <i64 60548, i64 60548>
  %578 = xor <2 x i64> %577, %561
  %579 = and <2 x i64> %563, <i64 4294967295, i64 4294967295>
  %580 = mul nuw nsw <2 x i64> %579, <i64 60548, i64 60548>
  %581 = xor <2 x i64> %580, %559
  %582 = mul nuw nsw <2 x i64> %576, <i64 25080, i64 25080>
  %583 = xor <2 x i64> %582, %561
  %584 = mul nuw nsw <2 x i64> %579, <i64 25080, i64 25080>
  %585 = xor <2 x i64> %584, %559
  %586 = sub <2 x i64> <i64 32768, i64 32768>, %550
  %587 = add <2 x i64> %586, %561
  %588 = add <2 x i64> %587, %573
  %589 = sub <2 x i64> %588, %583
  %590 = bitcast <2 x i64> %589 to <16 x i8>
  %591 = shufflevector <16 x i8> %590, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %592 = sub <2 x i64> <i64 32768, i64 32768>, %548
  %593 = add <2 x i64> %592, %559
  %594 = add <2 x i64> %593, %575
  %595 = sub <2 x i64> %594, %585
  %596 = bitcast <2 x i64> %595 to <16 x i8>
  %597 = shufflevector <16 x i8> %596, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %598 = sub <2 x i64> %586, %561
  %599 = add <2 x i64> %598, %578
  %600 = add <2 x i64> %599, %568
  %601 = bitcast <2 x i64> %600 to <16 x i8>
  %602 = shufflevector <16 x i8> %601, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %603 = sub <2 x i64> %592, %559
  %604 = add <2 x i64> %603, %581
  %605 = add <2 x i64> %604, %571
  %606 = bitcast <2 x i64> %605 to <16 x i8>
  %607 = shufflevector <16 x i8> %606, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %608 = bitcast <16 x i8> %591 to <4 x i32>
  %609 = bitcast <16 x i8> %597 to <4 x i32>
  %610 = shufflevector <4 x i32> %608, <4 x i32> %609, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %611 = shufflevector <4 x i32> %608, <4 x i32> %609, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %612 = shufflevector <4 x i32> %610, <4 x i32> %611, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %613 = bitcast <16 x i8> %602 to <4 x i32>
  %614 = bitcast <16 x i8> %607 to <4 x i32>
  %615 = shufflevector <4 x i32> %613, <4 x i32> %614, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %616 = shufflevector <4 x i32> %613, <4 x i32> %614, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %617 = shufflevector <4 x i32> %615, <4 x i32> %616, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %618 = add <4 x i32> %467, %462
  %619 = add <4 x i32> %617, %538
  %620 = sub <4 x i32> %538, %617
  %621 = sub <4 x i32> %462, %467
  %622 = sub <4 x i32> %465, %468
  %623 = sub <4 x i32> %543, %612
  %624 = add <4 x i32> %612, %543
  %625 = add <4 x i32> %468, %465
  %626 = ashr <4 x i32> %623, <i32 31, i32 31, i32 31, i32 31>
  %627 = xor <4 x i32> %626, %623
  %628 = sub <4 x i32> %627, %626
  %629 = shufflevector <4 x i32> %626, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %630 = bitcast <4 x i32> %629 to <2 x i64>
  %631 = shufflevector <4 x i32> %626, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %632 = bitcast <4 x i32> %631 to <2 x i64>
  %633 = shufflevector <4 x i32> %628, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %634 = bitcast <4 x i32> %633 to <2 x i64>
  %635 = shufflevector <4 x i32> %628, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %636 = bitcast <4 x i32> %635 to <2 x i64>
  %637 = ashr <4 x i32> %620, <i32 31, i32 31, i32 31, i32 31>
  %638 = xor <4 x i32> %637, %620
  %639 = sub <4 x i32> %638, %637
  %640 = shufflevector <4 x i32> %637, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %641 = bitcast <4 x i32> %640 to <2 x i64>
  %642 = shufflevector <4 x i32> %637, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %643 = bitcast <4 x i32> %642 to <2 x i64>
  %644 = shufflevector <4 x i32> %639, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %645 = bitcast <4 x i32> %644 to <2 x i64>
  %646 = shufflevector <4 x i32> %639, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %647 = bitcast <4 x i32> %646 to <2 x i64>
  %648 = and <2 x i64> %636, <i64 4294967295, i64 4294967295>
  %649 = mul nuw nsw <2 x i64> %648, <i64 46340, i64 46340>
  %650 = xor <2 x i64> %649, %632
  %651 = and <2 x i64> %634, <i64 4294967295, i64 4294967295>
  %652 = mul nuw nsw <2 x i64> %651, <i64 46340, i64 46340>
  %653 = xor <2 x i64> %652, %630
  %654 = and <2 x i64> %647, <i64 4294967295, i64 4294967295>
  %655 = mul nuw nsw <2 x i64> %654, <i64 46340, i64 46340>
  %656 = xor <2 x i64> %655, %643
  %657 = and <2 x i64> %645, <i64 4294967295, i64 4294967295>
  %658 = mul nuw nsw <2 x i64> %657, <i64 46340, i64 46340>
  %659 = xor <2 x i64> %658, %641
  %660 = sub <2 x i64> <i64 32768, i64 32768>, %632
  %661 = add <2 x i64> %660, %643
  %662 = add <2 x i64> %661, %650
  %663 = sub <2 x i64> %662, %656
  %664 = bitcast <2 x i64> %663 to <16 x i8>
  %665 = shufflevector <16 x i8> %664, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %666 = sub <2 x i64> <i64 32768, i64 32768>, %630
  %667 = add <2 x i64> %666, %641
  %668 = add <2 x i64> %667, %653
  %669 = sub <2 x i64> %668, %659
  %670 = bitcast <2 x i64> %669 to <16 x i8>
  %671 = shufflevector <16 x i8> %670, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %672 = sub <2 x i64> %660, %643
  %673 = add <2 x i64> %672, %650
  %674 = add <2 x i64> %673, %656
  %675 = bitcast <2 x i64> %674 to <16 x i8>
  %676 = shufflevector <16 x i8> %675, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %677 = sub <2 x i64> %666, %641
  %678 = add <2 x i64> %677, %653
  %679 = add <2 x i64> %678, %659
  %680 = bitcast <2 x i64> %679 to <16 x i8>
  %681 = shufflevector <16 x i8> %680, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %682 = bitcast <16 x i8> %665 to <4 x i32>
  %683 = bitcast <16 x i8> %671 to <4 x i32>
  %684 = shufflevector <4 x i32> %682, <4 x i32> %683, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %685 = shufflevector <4 x i32> %682, <4 x i32> %683, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %686 = shufflevector <4 x i32> %684, <4 x i32> %685, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %687 = bitcast <16 x i8> %676 to <4 x i32>
  %688 = bitcast <16 x i8> %681 to <4 x i32>
  %689 = shufflevector <4 x i32> %687, <4 x i32> %688, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %690 = shufflevector <4 x i32> %687, <4 x i32> %688, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %691 = shufflevector <4 x i32> %689, <4 x i32> %690, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %692 = ashr <4 x i32> %622, <i32 31, i32 31, i32 31, i32 31>
  %693 = xor <4 x i32> %692, %622
  %694 = sub <4 x i32> %693, %692
  %695 = shufflevector <4 x i32> %692, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %696 = bitcast <4 x i32> %695 to <2 x i64>
  %697 = shufflevector <4 x i32> %692, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %698 = bitcast <4 x i32> %697 to <2 x i64>
  %699 = shufflevector <4 x i32> %694, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %700 = bitcast <4 x i32> %699 to <2 x i64>
  %701 = shufflevector <4 x i32> %694, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %702 = bitcast <4 x i32> %701 to <2 x i64>
  %703 = ashr <4 x i32> %621, <i32 31, i32 31, i32 31, i32 31>
  %704 = xor <4 x i32> %703, %621
  %705 = sub <4 x i32> %704, %703
  %706 = shufflevector <4 x i32> %703, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %707 = bitcast <4 x i32> %706 to <2 x i64>
  %708 = shufflevector <4 x i32> %703, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %709 = bitcast <4 x i32> %708 to <2 x i64>
  %710 = shufflevector <4 x i32> %705, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %711 = bitcast <4 x i32> %710 to <2 x i64>
  %712 = shufflevector <4 x i32> %705, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %713 = bitcast <4 x i32> %712 to <2 x i64>
  %714 = and <2 x i64> %702, <i64 4294967295, i64 4294967295>
  %715 = mul nuw nsw <2 x i64> %714, <i64 46340, i64 46340>
  %716 = xor <2 x i64> %715, %698
  %717 = and <2 x i64> %700, <i64 4294967295, i64 4294967295>
  %718 = mul nuw nsw <2 x i64> %717, <i64 46340, i64 46340>
  %719 = xor <2 x i64> %718, %696
  %720 = and <2 x i64> %713, <i64 4294967295, i64 4294967295>
  %721 = mul nuw nsw <2 x i64> %720, <i64 46340, i64 46340>
  %722 = xor <2 x i64> %721, %709
  %723 = and <2 x i64> %711, <i64 4294967295, i64 4294967295>
  %724 = mul nuw nsw <2 x i64> %723, <i64 46340, i64 46340>
  %725 = xor <2 x i64> %724, %707
  %726 = sub <2 x i64> <i64 32768, i64 32768>, %698
  %727 = add <2 x i64> %726, %709
  %728 = add <2 x i64> %727, %716
  %729 = sub <2 x i64> %728, %722
  %730 = bitcast <2 x i64> %729 to <16 x i8>
  %731 = shufflevector <16 x i8> %730, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %732 = sub <2 x i64> <i64 32768, i64 32768>, %696
  %733 = add <2 x i64> %732, %707
  %734 = add <2 x i64> %733, %719
  %735 = sub <2 x i64> %734, %725
  %736 = bitcast <2 x i64> %735 to <16 x i8>
  %737 = shufflevector <16 x i8> %736, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %738 = sub <2 x i64> %726, %709
  %739 = add <2 x i64> %738, %722
  %740 = add <2 x i64> %739, %716
  %741 = bitcast <2 x i64> %740 to <16 x i8>
  %742 = shufflevector <16 x i8> %741, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %743 = sub <2 x i64> %732, %707
  %744 = add <2 x i64> %743, %725
  %745 = add <2 x i64> %744, %719
  %746 = bitcast <2 x i64> %745 to <16 x i8>
  %747 = shufflevector <16 x i8> %746, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %748 = bitcast <16 x i8> %731 to <4 x i32>
  %749 = bitcast <16 x i8> %737 to <4 x i32>
  %750 = shufflevector <4 x i32> %748, <4 x i32> %749, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %751 = shufflevector <4 x i32> %748, <4 x i32> %749, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %752 = shufflevector <4 x i32> %750, <4 x i32> %751, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %753 = bitcast <16 x i8> %742 to <4 x i32>
  %754 = bitcast <16 x i8> %747 to <4 x i32>
  %755 = shufflevector <4 x i32> %753, <4 x i32> %754, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %756 = shufflevector <4 x i32> %753, <4 x i32> %754, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %757 = shufflevector <4 x i32> %755, <4 x i32> %756, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %758 = add <4 x i32> %625, %258
  %759 = bitcast [32 x <2 x i64>]* %3 to <4 x i32>*
  store <4 x i32> %758, <4 x i32>* %759, align 16
  %760 = sub <4 x i32> %258, %625
  %761 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 15
  %762 = bitcast <2 x i64>* %761 to <4 x i32>*
  store <4 x i32> %760, <4 x i32>* %762, align 16
  %763 = add <4 x i32> %624, %259
  %764 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 1
  %765 = bitcast <2 x i64>* %764 to <4 x i32>*
  store <4 x i32> %763, <4 x i32>* %765, align 16
  %766 = sub <4 x i32> %259, %624
  %767 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 14
  %768 = bitcast <2 x i64>* %767 to <4 x i32>*
  store <4 x i32> %766, <4 x i32>* %768, align 16
  %769 = add <4 x i32> %691, %260
  %770 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 2
  %771 = bitcast <2 x i64>* %770 to <4 x i32>*
  store <4 x i32> %769, <4 x i32>* %771, align 16
  %772 = sub <4 x i32> %260, %691
  %773 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 13
  %774 = bitcast <2 x i64>* %773 to <4 x i32>*
  store <4 x i32> %772, <4 x i32>* %774, align 16
  %775 = add <4 x i32> %757, %261
  %776 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 3
  %777 = bitcast <2 x i64>* %776 to <4 x i32>*
  store <4 x i32> %775, <4 x i32>* %777, align 16
  %778 = sub <4 x i32> %261, %757
  %779 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 12
  %780 = bitcast <2 x i64>* %779 to <4 x i32>*
  store <4 x i32> %778, <4 x i32>* %780, align 16
  %781 = add <4 x i32> %752, %262
  %782 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 4
  %783 = bitcast <2 x i64>* %782 to <4 x i32>*
  store <4 x i32> %781, <4 x i32>* %783, align 16
  %784 = sub <4 x i32> %262, %752
  %785 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 11
  %786 = bitcast <2 x i64>* %785 to <4 x i32>*
  store <4 x i32> %784, <4 x i32>* %786, align 16
  %787 = add <4 x i32> %686, %263
  %788 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 5
  %789 = bitcast <2 x i64>* %788 to <4 x i32>*
  store <4 x i32> %787, <4 x i32>* %789, align 16
  %790 = sub <4 x i32> %263, %686
  %791 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 10
  %792 = bitcast <2 x i64>* %791 to <4 x i32>*
  store <4 x i32> %790, <4 x i32>* %792, align 16
  %793 = add <4 x i32> %619, %264
  %794 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 6
  %795 = bitcast <2 x i64>* %794 to <4 x i32>*
  store <4 x i32> %793, <4 x i32>* %795, align 16
  %796 = sub <4 x i32> %264, %619
  %797 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 9
  %798 = bitcast <2 x i64>* %797 to <4 x i32>*
  store <4 x i32> %796, <4 x i32>* %798, align 16
  %799 = add <4 x i32> %618, %265
  %800 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 7
  %801 = bitcast <2 x i64>* %800 to <4 x i32>*
  store <4 x i32> %799, <4 x i32>* %801, align 16
  %802 = sub <4 x i32> %265, %618
  %803 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 8
  %804 = bitcast <2 x i64>* %803 to <4 x i32>*
  store <4 x i32> %802, <4 x i32>* %804, align 16
  %805 = bitcast [32 x <2 x i64>]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %805) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %805, i8 -86, i64 496, i1 false) #7
  %806 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 1
  %807 = bitcast <2 x i64>* %806 to <4 x i32>*
  %808 = load <4 x i32>, <4 x i32>* %807, align 16
  %809 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 16
  %810 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 31
  %811 = ashr <4 x i32> %808, <i32 31, i32 31, i32 31, i32 31>
  %812 = xor <4 x i32> %811, %808
  %813 = sub <4 x i32> %812, %811
  %814 = shufflevector <4 x i32> %811, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %815 = bitcast <4 x i32> %814 to <2 x i64>
  %816 = shufflevector <4 x i32> %811, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %817 = bitcast <4 x i32> %816 to <2 x i64>
  %818 = shufflevector <4 x i32> %813, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %819 = bitcast <4 x i32> %818 to <2 x i64>
  %820 = shufflevector <4 x i32> %813, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %821 = bitcast <4 x i32> %820 to <2 x i64>
  %822 = and <2 x i64> %821, <i64 4294967295, i64 4294967295>
  %823 = mul nuw nsw <2 x i64> %822, <i64 3216, i64 3216>
  %824 = xor <2 x i64> %823, %817
  %825 = and <2 x i64> %819, <i64 4294967295, i64 4294967295>
  %826 = mul nuw nsw <2 x i64> %825, <i64 3216, i64 3216>
  %827 = xor <2 x i64> %826, %815
  %828 = sub <2 x i64> <i64 32768, i64 32768>, %817
  %829 = add <2 x i64> %824, %828
  %830 = bitcast <2 x i64> %829 to <16 x i8>
  %831 = shufflevector <16 x i8> %830, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %832 = sub <2 x i64> <i64 32768, i64 32768>, %815
  %833 = add <2 x i64> %827, %832
  %834 = bitcast <2 x i64> %833 to <16 x i8>
  %835 = shufflevector <16 x i8> %834, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %836 = bitcast <16 x i8> %831 to <4 x i32>
  %837 = bitcast <16 x i8> %835 to <4 x i32>
  %838 = shufflevector <4 x i32> %836, <4 x i32> %837, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %839 = shufflevector <4 x i32> %836, <4 x i32> %837, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %840 = shufflevector <4 x i32> %838, <4 x i32> %839, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %841 = bitcast <2 x i64>* %809 to <4 x i32>*
  store <4 x i32> %840, <4 x i32>* %841, align 16
  %842 = mul nuw nsw <2 x i64> %822, <i64 65456, i64 65456>
  %843 = xor <2 x i64> %842, %817
  %844 = mul nuw nsw <2 x i64> %825, <i64 65456, i64 65456>
  %845 = xor <2 x i64> %844, %815
  %846 = add <2 x i64> %843, %828
  %847 = bitcast <2 x i64> %846 to <16 x i8>
  %848 = shufflevector <16 x i8> %847, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %849 = add <2 x i64> %845, %832
  %850 = bitcast <2 x i64> %849 to <16 x i8>
  %851 = shufflevector <16 x i8> %850, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %852 = bitcast <16 x i8> %848 to <4 x i32>
  %853 = bitcast <16 x i8> %851 to <4 x i32>
  %854 = shufflevector <4 x i32> %852, <4 x i32> %853, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %855 = shufflevector <4 x i32> %852, <4 x i32> %853, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %856 = shufflevector <4 x i32> %854, <4 x i32> %855, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %857 = bitcast <2 x i64>* %810 to <4 x i32>*
  store <4 x i32> %856, <4 x i32>* %857, align 16
  %858 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 15
  %859 = bitcast <2 x i64>* %858 to <4 x i32>*
  %860 = load <4 x i32>, <4 x i32>* %859, align 16
  %861 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 17
  %862 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 30
  %863 = ashr <4 x i32> %860, <i32 31, i32 31, i32 31, i32 31>
  %864 = xor <4 x i32> %863, %860
  %865 = sub <4 x i32> %864, %863
  %866 = shufflevector <4 x i32> %863, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %867 = bitcast <4 x i32> %866 to <2 x i64>
  %868 = shufflevector <4 x i32> %863, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %869 = bitcast <4 x i32> %868 to <2 x i64>
  %870 = shufflevector <4 x i32> %865, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %871 = bitcast <4 x i32> %870 to <2 x i64>
  %872 = shufflevector <4 x i32> %865, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %873 = bitcast <4 x i32> %872 to <2 x i64>
  %874 = and <2 x i64> %873, <i64 4294967295, i64 4294967295>
  %875 = mul nuw nsw <2 x i64> %874, <i64 44012, i64 44012>
  %876 = xor <2 x i64> %875, %869
  %877 = and <2 x i64> %871, <i64 4294967295, i64 4294967295>
  %878 = mul nuw nsw <2 x i64> %877, <i64 44012, i64 44012>
  %879 = xor <2 x i64> %878, %867
  %880 = add <2 x i64> %869, <i64 32768, i64 32768>
  %881 = sub <2 x i64> %880, %876
  %882 = bitcast <2 x i64> %881 to <16 x i8>
  %883 = shufflevector <16 x i8> %882, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %884 = add <2 x i64> %867, <i64 32768, i64 32768>
  %885 = sub <2 x i64> %884, %879
  %886 = bitcast <2 x i64> %885 to <16 x i8>
  %887 = shufflevector <16 x i8> %886, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %888 = bitcast <16 x i8> %883 to <4 x i32>
  %889 = bitcast <16 x i8> %887 to <4 x i32>
  %890 = shufflevector <4 x i32> %888, <4 x i32> %889, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %891 = shufflevector <4 x i32> %888, <4 x i32> %889, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %892 = shufflevector <4 x i32> %890, <4 x i32> %891, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %893 = bitcast <2 x i64>* %861 to <4 x i32>*
  store <4 x i32> %892, <4 x i32>* %893, align 16
  %894 = mul nuw nsw <2 x i64> %874, <i64 48560, i64 48560>
  %895 = xor <2 x i64> %894, %869
  %896 = mul nuw nsw <2 x i64> %877, <i64 48560, i64 48560>
  %897 = xor <2 x i64> %896, %867
  %898 = sub <2 x i64> <i64 32768, i64 32768>, %869
  %899 = add <2 x i64> %898, %895
  %900 = bitcast <2 x i64> %899 to <16 x i8>
  %901 = shufflevector <16 x i8> %900, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %902 = sub <2 x i64> <i64 32768, i64 32768>, %867
  %903 = add <2 x i64> %902, %897
  %904 = bitcast <2 x i64> %903 to <16 x i8>
  %905 = shufflevector <16 x i8> %904, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %906 = bitcast <16 x i8> %901 to <4 x i32>
  %907 = bitcast <16 x i8> %905 to <4 x i32>
  %908 = shufflevector <4 x i32> %906, <4 x i32> %907, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %909 = shufflevector <4 x i32> %906, <4 x i32> %907, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %910 = shufflevector <4 x i32> %908, <4 x i32> %909, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %911 = bitcast <2 x i64>* %862 to <4 x i32>*
  store <4 x i32> %910, <4 x i32>* %911, align 16
  %912 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 9
  %913 = bitcast <2 x i64>* %912 to <4 x i32>*
  %914 = load <4 x i32>, <4 x i32>* %913, align 16
  %915 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 18
  %916 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 29
  %917 = ashr <4 x i32> %914, <i32 31, i32 31, i32 31, i32 31>
  %918 = xor <4 x i32> %917, %914
  %919 = sub <4 x i32> %918, %917
  %920 = shufflevector <4 x i32> %917, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %921 = bitcast <4 x i32> %920 to <2 x i64>
  %922 = shufflevector <4 x i32> %917, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %923 = bitcast <4 x i32> %922 to <2 x i64>
  %924 = shufflevector <4 x i32> %919, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %925 = bitcast <4 x i32> %924 to <2 x i64>
  %926 = shufflevector <4 x i32> %919, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %927 = bitcast <4 x i32> %926 to <2 x i64>
  %928 = and <2 x i64> %927, <i64 4294967295, i64 4294967295>
  %929 = mul nuw nsw <2 x i64> %928, <i64 28020, i64 28020>
  %930 = xor <2 x i64> %929, %923
  %931 = and <2 x i64> %925, <i64 4294967295, i64 4294967295>
  %932 = mul nuw nsw <2 x i64> %931, <i64 28020, i64 28020>
  %933 = xor <2 x i64> %932, %921
  %934 = sub <2 x i64> <i64 32768, i64 32768>, %923
  %935 = add <2 x i64> %930, %934
  %936 = bitcast <2 x i64> %935 to <16 x i8>
  %937 = shufflevector <16 x i8> %936, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %938 = sub <2 x i64> <i64 32768, i64 32768>, %921
  %939 = add <2 x i64> %933, %938
  %940 = bitcast <2 x i64> %939 to <16 x i8>
  %941 = shufflevector <16 x i8> %940, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %942 = bitcast <16 x i8> %937 to <4 x i32>
  %943 = bitcast <16 x i8> %941 to <4 x i32>
  %944 = shufflevector <4 x i32> %942, <4 x i32> %943, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %945 = shufflevector <4 x i32> %942, <4 x i32> %943, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %946 = shufflevector <4 x i32> %944, <4 x i32> %945, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %947 = bitcast <2 x i64>* %915 to <4 x i32>*
  store <4 x i32> %946, <4 x i32>* %947, align 16
  %948 = mul nuw nsw <2 x i64> %928, <i64 59244, i64 59244>
  %949 = xor <2 x i64> %948, %923
  %950 = mul nuw nsw <2 x i64> %931, <i64 59244, i64 59244>
  %951 = xor <2 x i64> %950, %921
  %952 = add <2 x i64> %949, %934
  %953 = bitcast <2 x i64> %952 to <16 x i8>
  %954 = shufflevector <16 x i8> %953, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %955 = add <2 x i64> %951, %938
  %956 = bitcast <2 x i64> %955 to <16 x i8>
  %957 = shufflevector <16 x i8> %956, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %958 = bitcast <16 x i8> %954 to <4 x i32>
  %959 = bitcast <16 x i8> %957 to <4 x i32>
  %960 = shufflevector <4 x i32> %958, <4 x i32> %959, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %961 = shufflevector <4 x i32> %958, <4 x i32> %959, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %962 = shufflevector <4 x i32> %960, <4 x i32> %961, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %963 = bitcast <2 x i64>* %916 to <4 x i32>*
  store <4 x i32> %962, <4 x i32>* %963, align 16
  %964 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 7
  %965 = bitcast <2 x i64>* %964 to <4 x i32>*
  %966 = load <4 x i32>, <4 x i32>* %965, align 16
  %967 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 19
  %968 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 28
  %969 = ashr <4 x i32> %966, <i32 31, i32 31, i32 31, i32 31>
  %970 = xor <4 x i32> %969, %966
  %971 = sub <4 x i32> %970, %969
  %972 = shufflevector <4 x i32> %969, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %973 = bitcast <4 x i32> %972 to <2 x i64>
  %974 = shufflevector <4 x i32> %969, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %975 = bitcast <4 x i32> %974 to <2 x i64>
  %976 = shufflevector <4 x i32> %971, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %977 = bitcast <4 x i32> %976 to <2 x i64>
  %978 = shufflevector <4 x i32> %971, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %979 = bitcast <4 x i32> %978 to <2 x i64>
  %980 = and <2 x i64> %979, <i64 4294967295, i64 4294967295>
  %981 = mul nuw nsw <2 x i64> %980, <i64 22080, i64 22080>
  %982 = xor <2 x i64> %981, %975
  %983 = and <2 x i64> %977, <i64 4294967295, i64 4294967295>
  %984 = mul nuw nsw <2 x i64> %983, <i64 22080, i64 22080>
  %985 = xor <2 x i64> %984, %973
  %986 = add <2 x i64> %975, <i64 32768, i64 32768>
  %987 = sub <2 x i64> %986, %982
  %988 = bitcast <2 x i64> %987 to <16 x i8>
  %989 = shufflevector <16 x i8> %988, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %990 = add <2 x i64> %973, <i64 32768, i64 32768>
  %991 = sub <2 x i64> %990, %985
  %992 = bitcast <2 x i64> %991 to <16 x i8>
  %993 = shufflevector <16 x i8> %992, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %994 = bitcast <16 x i8> %989 to <4 x i32>
  %995 = bitcast <16 x i8> %993 to <4 x i32>
  %996 = shufflevector <4 x i32> %994, <4 x i32> %995, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %997 = shufflevector <4 x i32> %994, <4 x i32> %995, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %998 = shufflevector <4 x i32> %996, <4 x i32> %997, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %999 = bitcast <2 x i64>* %967 to <4 x i32>*
  store <4 x i32> %998, <4 x i32>* %999, align 16
  %1000 = mul nuw nsw <2 x i64> %980, <i64 61704, i64 61704>
  %1001 = xor <2 x i64> %1000, %975
  %1002 = mul nuw nsw <2 x i64> %983, <i64 61704, i64 61704>
  %1003 = xor <2 x i64> %1002, %973
  %1004 = sub <2 x i64> <i64 32768, i64 32768>, %975
  %1005 = add <2 x i64> %1004, %1001
  %1006 = bitcast <2 x i64> %1005 to <16 x i8>
  %1007 = shufflevector <16 x i8> %1006, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1008 = sub <2 x i64> <i64 32768, i64 32768>, %973
  %1009 = add <2 x i64> %1008, %1003
  %1010 = bitcast <2 x i64> %1009 to <16 x i8>
  %1011 = shufflevector <16 x i8> %1010, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1012 = bitcast <16 x i8> %1007 to <4 x i32>
  %1013 = bitcast <16 x i8> %1011 to <4 x i32>
  %1014 = shufflevector <4 x i32> %1012, <4 x i32> %1013, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1015 = shufflevector <4 x i32> %1012, <4 x i32> %1013, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1016 = shufflevector <4 x i32> %1014, <4 x i32> %1015, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1017 = bitcast <2 x i64>* %968 to <4 x i32>*
  store <4 x i32> %1016, <4 x i32>* %1017, align 16
  %1018 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 5
  %1019 = bitcast <2 x i64>* %1018 to <4 x i32>*
  %1020 = load <4 x i32>, <4 x i32>* %1019, align 16
  %1021 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 20
  %1022 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 27
  %1023 = ashr <4 x i32> %1020, <i32 31, i32 31, i32 31, i32 31>
  %1024 = xor <4 x i32> %1023, %1020
  %1025 = sub <4 x i32> %1024, %1023
  %1026 = shufflevector <4 x i32> %1023, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1027 = bitcast <4 x i32> %1026 to <2 x i64>
  %1028 = shufflevector <4 x i32> %1023, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1029 = bitcast <4 x i32> %1028 to <2 x i64>
  %1030 = shufflevector <4 x i32> %1025, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1031 = bitcast <4 x i32> %1030 to <2 x i64>
  %1032 = shufflevector <4 x i32> %1025, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1033 = bitcast <4 x i32> %1032 to <2 x i64>
  %1034 = and <2 x i64> %1033, <i64 4294967295, i64 4294967295>
  %1035 = mul nuw nsw <2 x i64> %1034, <i64 15924, i64 15924>
  %1036 = xor <2 x i64> %1035, %1029
  %1037 = and <2 x i64> %1031, <i64 4294967295, i64 4294967295>
  %1038 = mul nuw nsw <2 x i64> %1037, <i64 15924, i64 15924>
  %1039 = xor <2 x i64> %1038, %1027
  %1040 = sub <2 x i64> <i64 32768, i64 32768>, %1029
  %1041 = add <2 x i64> %1036, %1040
  %1042 = bitcast <2 x i64> %1041 to <16 x i8>
  %1043 = shufflevector <16 x i8> %1042, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1044 = sub <2 x i64> <i64 32768, i64 32768>, %1027
  %1045 = add <2 x i64> %1039, %1044
  %1046 = bitcast <2 x i64> %1045 to <16 x i8>
  %1047 = shufflevector <16 x i8> %1046, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1048 = bitcast <16 x i8> %1043 to <4 x i32>
  %1049 = bitcast <16 x i8> %1047 to <4 x i32>
  %1050 = shufflevector <4 x i32> %1048, <4 x i32> %1049, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1051 = shufflevector <4 x i32> %1048, <4 x i32> %1049, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1052 = shufflevector <4 x i32> %1050, <4 x i32> %1051, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1053 = bitcast <2 x i64>* %1021 to <4 x i32>*
  store <4 x i32> %1052, <4 x i32>* %1053, align 16
  %1054 = mul nuw nsw <2 x i64> %1034, <i64 63572, i64 63572>
  %1055 = xor <2 x i64> %1054, %1029
  %1056 = mul nuw nsw <2 x i64> %1037, <i64 63572, i64 63572>
  %1057 = xor <2 x i64> %1056, %1027
  %1058 = add <2 x i64> %1055, %1040
  %1059 = bitcast <2 x i64> %1058 to <16 x i8>
  %1060 = shufflevector <16 x i8> %1059, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1061 = add <2 x i64> %1057, %1044
  %1062 = bitcast <2 x i64> %1061 to <16 x i8>
  %1063 = shufflevector <16 x i8> %1062, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1064 = bitcast <16 x i8> %1060 to <4 x i32>
  %1065 = bitcast <16 x i8> %1063 to <4 x i32>
  %1066 = shufflevector <4 x i32> %1064, <4 x i32> %1065, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1067 = shufflevector <4 x i32> %1064, <4 x i32> %1065, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1068 = shufflevector <4 x i32> %1066, <4 x i32> %1067, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1069 = bitcast <2 x i64>* %1022 to <4 x i32>*
  store <4 x i32> %1068, <4 x i32>* %1069, align 16
  %1070 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 11
  %1071 = bitcast <2 x i64>* %1070 to <4 x i32>*
  %1072 = load <4 x i32>, <4 x i32>* %1071, align 16
  %1073 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 21
  %1074 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 26
  %1075 = ashr <4 x i32> %1072, <i32 31, i32 31, i32 31, i32 31>
  %1076 = xor <4 x i32> %1075, %1072
  %1077 = sub <4 x i32> %1076, %1075
  %1078 = shufflevector <4 x i32> %1075, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1079 = bitcast <4 x i32> %1078 to <2 x i64>
  %1080 = shufflevector <4 x i32> %1075, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1081 = bitcast <4 x i32> %1080 to <2 x i64>
  %1082 = shufflevector <4 x i32> %1077, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1083 = bitcast <4 x i32> %1082 to <2 x i64>
  %1084 = shufflevector <4 x i32> %1077, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1085 = bitcast <4 x i32> %1084 to <2 x i64>
  %1086 = and <2 x i64> %1085, <i64 4294967295, i64 4294967295>
  %1087 = mul nuw nsw <2 x i64> %1086, <i64 33692, i64 33692>
  %1088 = xor <2 x i64> %1087, %1081
  %1089 = and <2 x i64> %1083, <i64 4294967295, i64 4294967295>
  %1090 = mul nuw nsw <2 x i64> %1089, <i64 33692, i64 33692>
  %1091 = xor <2 x i64> %1090, %1079
  %1092 = add <2 x i64> %1081, <i64 32768, i64 32768>
  %1093 = sub <2 x i64> %1092, %1088
  %1094 = bitcast <2 x i64> %1093 to <16 x i8>
  %1095 = shufflevector <16 x i8> %1094, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1096 = add <2 x i64> %1079, <i64 32768, i64 32768>
  %1097 = sub <2 x i64> %1096, %1091
  %1098 = bitcast <2 x i64> %1097 to <16 x i8>
  %1099 = shufflevector <16 x i8> %1098, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1100 = bitcast <16 x i8> %1095 to <4 x i32>
  %1101 = bitcast <16 x i8> %1099 to <4 x i32>
  %1102 = shufflevector <4 x i32> %1100, <4 x i32> %1101, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1103 = shufflevector <4 x i32> %1100, <4 x i32> %1101, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1104 = shufflevector <4 x i32> %1102, <4 x i32> %1103, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1105 = bitcast <2 x i64>* %1073 to <4 x i32>*
  store <4 x i32> %1104, <4 x i32>* %1105, align 16
  %1106 = mul nuw nsw <2 x i64> %1086, <i64 56212, i64 56212>
  %1107 = xor <2 x i64> %1106, %1081
  %1108 = mul nuw nsw <2 x i64> %1089, <i64 56212, i64 56212>
  %1109 = xor <2 x i64> %1108, %1079
  %1110 = sub <2 x i64> <i64 32768, i64 32768>, %1081
  %1111 = add <2 x i64> %1110, %1107
  %1112 = bitcast <2 x i64> %1111 to <16 x i8>
  %1113 = shufflevector <16 x i8> %1112, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1114 = sub <2 x i64> <i64 32768, i64 32768>, %1079
  %1115 = add <2 x i64> %1114, %1109
  %1116 = bitcast <2 x i64> %1115 to <16 x i8>
  %1117 = shufflevector <16 x i8> %1116, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1118 = bitcast <16 x i8> %1113 to <4 x i32>
  %1119 = bitcast <16 x i8> %1117 to <4 x i32>
  %1120 = shufflevector <4 x i32> %1118, <4 x i32> %1119, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1121 = shufflevector <4 x i32> %1118, <4 x i32> %1119, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1122 = shufflevector <4 x i32> %1120, <4 x i32> %1121, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1123 = bitcast <2 x i64>* %1074 to <4 x i32>*
  store <4 x i32> %1122, <4 x i32>* %1123, align 16
  %1124 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 13
  %1125 = bitcast <2 x i64>* %1124 to <4 x i32>*
  %1126 = load <4 x i32>, <4 x i32>* %1125, align 16
  %1127 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 22
  %1128 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 25
  %1129 = ashr <4 x i32> %1126, <i32 31, i32 31, i32 31, i32 31>
  %1130 = xor <4 x i32> %1129, %1126
  %1131 = sub <4 x i32> %1130, %1129
  %1132 = shufflevector <4 x i32> %1129, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1133 = bitcast <4 x i32> %1132 to <2 x i64>
  %1134 = shufflevector <4 x i32> %1129, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1135 = bitcast <4 x i32> %1134 to <2 x i64>
  %1136 = shufflevector <4 x i32> %1131, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1137 = bitcast <4 x i32> %1136 to <2 x i64>
  %1138 = shufflevector <4 x i32> %1131, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1139 = bitcast <4 x i32> %1138 to <2 x i64>
  %1140 = and <2 x i64> %1139, <i64 4294967295, i64 4294967295>
  %1141 = mul nuw nsw <2 x i64> %1140, <i64 39040, i64 39040>
  %1142 = xor <2 x i64> %1141, %1135
  %1143 = and <2 x i64> %1137, <i64 4294967295, i64 4294967295>
  %1144 = mul nuw nsw <2 x i64> %1143, <i64 39040, i64 39040>
  %1145 = xor <2 x i64> %1144, %1133
  %1146 = sub <2 x i64> <i64 32768, i64 32768>, %1135
  %1147 = add <2 x i64> %1142, %1146
  %1148 = bitcast <2 x i64> %1147 to <16 x i8>
  %1149 = shufflevector <16 x i8> %1148, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1150 = sub <2 x i64> <i64 32768, i64 32768>, %1133
  %1151 = add <2 x i64> %1145, %1150
  %1152 = bitcast <2 x i64> %1151 to <16 x i8>
  %1153 = shufflevector <16 x i8> %1152, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1154 = bitcast <16 x i8> %1149 to <4 x i32>
  %1155 = bitcast <16 x i8> %1153 to <4 x i32>
  %1156 = shufflevector <4 x i32> %1154, <4 x i32> %1155, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1157 = shufflevector <4 x i32> %1154, <4 x i32> %1155, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1158 = shufflevector <4 x i32> %1156, <4 x i32> %1157, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1159 = bitcast <2 x i64>* %1127 to <4 x i32>*
  store <4 x i32> %1158, <4 x i32>* %1159, align 16
  %1160 = mul nuw nsw <2 x i64> %1140, <i64 52640, i64 52640>
  %1161 = xor <2 x i64> %1160, %1135
  %1162 = mul nuw nsw <2 x i64> %1143, <i64 52640, i64 52640>
  %1163 = xor <2 x i64> %1162, %1133
  %1164 = add <2 x i64> %1161, %1146
  %1165 = bitcast <2 x i64> %1164 to <16 x i8>
  %1166 = shufflevector <16 x i8> %1165, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1167 = add <2 x i64> %1163, %1150
  %1168 = bitcast <2 x i64> %1167 to <16 x i8>
  %1169 = shufflevector <16 x i8> %1168, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1170 = bitcast <16 x i8> %1166 to <4 x i32>
  %1171 = bitcast <16 x i8> %1169 to <4 x i32>
  %1172 = shufflevector <4 x i32> %1170, <4 x i32> %1171, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1173 = shufflevector <4 x i32> %1170, <4 x i32> %1171, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1174 = shufflevector <4 x i32> %1172, <4 x i32> %1173, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1175 = bitcast <2 x i64>* %1128 to <4 x i32>*
  store <4 x i32> %1174, <4 x i32>* %1175, align 16
  %1176 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 3
  %1177 = bitcast <2 x i64>* %1176 to <4 x i32>*
  %1178 = load <4 x i32>, <4 x i32>* %1177, align 16
  %1179 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 23
  %1180 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 24
  %1181 = ashr <4 x i32> %1178, <i32 31, i32 31, i32 31, i32 31>
  %1182 = xor <4 x i32> %1181, %1178
  %1183 = sub <4 x i32> %1182, %1181
  %1184 = shufflevector <4 x i32> %1181, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1185 = bitcast <4 x i32> %1184 to <2 x i64>
  %1186 = shufflevector <4 x i32> %1181, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1187 = bitcast <4 x i32> %1186 to <2 x i64>
  %1188 = shufflevector <4 x i32> %1183, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1189 = bitcast <4 x i32> %1188 to <2 x i64>
  %1190 = shufflevector <4 x i32> %1183, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1191 = bitcast <4 x i32> %1190 to <2 x i64>
  %1192 = and <2 x i64> %1191, <i64 4294967295, i64 4294967295>
  %1193 = mul nuw nsw <2 x i64> %1192, <i64 9616, i64 9616>
  %1194 = xor <2 x i64> %1193, %1187
  %1195 = and <2 x i64> %1189, <i64 4294967295, i64 4294967295>
  %1196 = mul nuw nsw <2 x i64> %1195, <i64 9616, i64 9616>
  %1197 = xor <2 x i64> %1196, %1185
  %1198 = add <2 x i64> %1187, <i64 32768, i64 32768>
  %1199 = sub <2 x i64> %1198, %1194
  %1200 = bitcast <2 x i64> %1199 to <16 x i8>
  %1201 = shufflevector <16 x i8> %1200, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1202 = add <2 x i64> %1185, <i64 32768, i64 32768>
  %1203 = sub <2 x i64> %1202, %1197
  %1204 = bitcast <2 x i64> %1203 to <16 x i8>
  %1205 = shufflevector <16 x i8> %1204, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1206 = bitcast <16 x i8> %1201 to <4 x i32>
  %1207 = bitcast <16 x i8> %1205 to <4 x i32>
  %1208 = shufflevector <4 x i32> %1206, <4 x i32> %1207, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1209 = shufflevector <4 x i32> %1206, <4 x i32> %1207, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1210 = shufflevector <4 x i32> %1208, <4 x i32> %1209, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1211 = bitcast <2 x i64>* %1179 to <4 x i32>*
  store <4 x i32> %1210, <4 x i32>* %1211, align 16
  %1212 = mul nuw nsw <2 x i64> %1192, <i64 64828, i64 64828>
  %1213 = xor <2 x i64> %1212, %1187
  %1214 = mul nuw nsw <2 x i64> %1195, <i64 64828, i64 64828>
  %1215 = xor <2 x i64> %1214, %1185
  %1216 = sub <2 x i64> <i64 32768, i64 32768>, %1187
  %1217 = add <2 x i64> %1216, %1213
  %1218 = bitcast <2 x i64> %1217 to <16 x i8>
  %1219 = shufflevector <16 x i8> %1218, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1220 = sub <2 x i64> <i64 32768, i64 32768>, %1185
  %1221 = add <2 x i64> %1220, %1215
  %1222 = bitcast <2 x i64> %1221 to <16 x i8>
  %1223 = shufflevector <16 x i8> %1222, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1224 = bitcast <16 x i8> %1219 to <4 x i32>
  %1225 = bitcast <16 x i8> %1223 to <4 x i32>
  %1226 = shufflevector <4 x i32> %1224, <4 x i32> %1225, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1227 = shufflevector <4 x i32> %1224, <4 x i32> %1225, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1228 = shufflevector <4 x i32> %1226, <4 x i32> %1227, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1229 = bitcast <2 x i64>* %1180 to <4 x i32>*
  store <4 x i32> %1228, <4 x i32>* %1229, align 16
  %1230 = add <4 x i32> %892, %840
  %1231 = sub <4 x i32> %840, %892
  %1232 = sub <4 x i32> %946, %998
  %1233 = add <4 x i32> %998, %946
  %1234 = add <4 x i32> %1104, %1052
  %1235 = sub <4 x i32> %1052, %1104
  %1236 = sub <4 x i32> %1158, %1210
  %1237 = add <4 x i32> %1210, %1158
  %1238 = add <4 x i32> %1228, %1174
  %1239 = sub <4 x i32> %1174, %1228
  %1240 = sub <4 x i32> %1068, %1122
  %1241 = add <4 x i32> %1122, %1068
  %1242 = add <4 x i32> %1016, %962
  %1243 = sub <4 x i32> %962, %1016
  %1244 = sub <4 x i32> %856, %910
  %1245 = add <4 x i32> %910, %856
  store <4 x i32> %1230, <4 x i32>* %841, align 16
  store <4 x i32> %1245, <4 x i32>* %857, align 16
  %1246 = ashr <4 x i32> %1244, <i32 31, i32 31, i32 31, i32 31>
  %1247 = xor <4 x i32> %1246, %1244
  %1248 = sub <4 x i32> %1247, %1246
  %1249 = shufflevector <4 x i32> %1246, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1250 = bitcast <4 x i32> %1249 to <2 x i64>
  %1251 = shufflevector <4 x i32> %1246, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1252 = bitcast <4 x i32> %1251 to <2 x i64>
  %1253 = shufflevector <4 x i32> %1248, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1254 = bitcast <4 x i32> %1253 to <2 x i64>
  %1255 = shufflevector <4 x i32> %1248, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1256 = bitcast <4 x i32> %1255 to <2 x i64>
  %1257 = ashr <4 x i32> %1231, <i32 31, i32 31, i32 31, i32 31>
  %1258 = xor <4 x i32> %1257, %1231
  %1259 = sub <4 x i32> %1258, %1257
  %1260 = shufflevector <4 x i32> %1257, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1261 = bitcast <4 x i32> %1260 to <2 x i64>
  %1262 = shufflevector <4 x i32> %1257, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1263 = bitcast <4 x i32> %1262 to <2 x i64>
  %1264 = shufflevector <4 x i32> %1259, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1265 = bitcast <4 x i32> %1264 to <2 x i64>
  %1266 = shufflevector <4 x i32> %1259, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1267 = bitcast <4 x i32> %1266 to <2 x i64>
  %1268 = and <2 x i64> %1256, <i64 4294967295, i64 4294967295>
  %1269 = mul nuw nsw <2 x i64> %1268, <i64 64276, i64 64276>
  %1270 = xor <2 x i64> %1269, %1252
  %1271 = and <2 x i64> %1254, <i64 4294967295, i64 4294967295>
  %1272 = mul nuw nsw <2 x i64> %1271, <i64 64276, i64 64276>
  %1273 = xor <2 x i64> %1272, %1250
  %1274 = mul nuw nsw <2 x i64> %1268, <i64 12784, i64 12784>
  %1275 = xor <2 x i64> %1274, %1252
  %1276 = mul nuw nsw <2 x i64> %1271, <i64 12784, i64 12784>
  %1277 = xor <2 x i64> %1276, %1250
  %1278 = and <2 x i64> %1267, <i64 4294967295, i64 4294967295>
  %1279 = mul nuw nsw <2 x i64> %1278, <i64 12784, i64 12784>
  %1280 = xor <2 x i64> %1279, %1263
  %1281 = and <2 x i64> %1265, <i64 4294967295, i64 4294967295>
  %1282 = mul nuw nsw <2 x i64> %1281, <i64 12784, i64 12784>
  %1283 = xor <2 x i64> %1282, %1261
  %1284 = mul nuw nsw <2 x i64> %1278, <i64 64276, i64 64276>
  %1285 = xor <2 x i64> %1284, %1263
  %1286 = mul nuw nsw <2 x i64> %1281, <i64 64276, i64 64276>
  %1287 = xor <2 x i64> %1286, %1261
  %1288 = sub <2 x i64> <i64 32768, i64 32768>, %1252
  %1289 = add <2 x i64> %1288, %1263
  %1290 = sub <2 x i64> %1289, %1285
  %1291 = add <2 x i64> %1290, %1275
  %1292 = bitcast <2 x i64> %1291 to <16 x i8>
  %1293 = shufflevector <16 x i8> %1292, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1294 = sub <2 x i64> <i64 32768, i64 32768>, %1250
  %1295 = add <2 x i64> %1294, %1261
  %1296 = sub <2 x i64> %1295, %1287
  %1297 = add <2 x i64> %1296, %1277
  %1298 = bitcast <2 x i64> %1297 to <16 x i8>
  %1299 = shufflevector <16 x i8> %1298, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1300 = sub <2 x i64> %1288, %1263
  %1301 = add <2 x i64> %1300, %1280
  %1302 = add <2 x i64> %1301, %1270
  %1303 = bitcast <2 x i64> %1302 to <16 x i8>
  %1304 = shufflevector <16 x i8> %1303, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1305 = sub <2 x i64> %1294, %1261
  %1306 = add <2 x i64> %1305, %1283
  %1307 = add <2 x i64> %1306, %1273
  %1308 = bitcast <2 x i64> %1307 to <16 x i8>
  %1309 = shufflevector <16 x i8> %1308, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1310 = bitcast <16 x i8> %1293 to <4 x i32>
  %1311 = bitcast <16 x i8> %1299 to <4 x i32>
  %1312 = shufflevector <4 x i32> %1310, <4 x i32> %1311, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1313 = shufflevector <4 x i32> %1310, <4 x i32> %1311, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1314 = shufflevector <4 x i32> %1312, <4 x i32> %1313, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1314, <4 x i32>* %893, align 16
  %1315 = bitcast <16 x i8> %1304 to <4 x i32>
  %1316 = bitcast <16 x i8> %1309 to <4 x i32>
  %1317 = shufflevector <4 x i32> %1315, <4 x i32> %1316, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1318 = shufflevector <4 x i32> %1315, <4 x i32> %1316, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1319 = shufflevector <4 x i32> %1317, <4 x i32> %1318, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1319, <4 x i32>* %911, align 16
  %1320 = ashr <4 x i32> %1232, <i32 31, i32 31, i32 31, i32 31>
  %1321 = xor <4 x i32> %1320, %1232
  %1322 = sub <4 x i32> %1321, %1320
  %1323 = shufflevector <4 x i32> %1320, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1324 = bitcast <4 x i32> %1323 to <2 x i64>
  %1325 = shufflevector <4 x i32> %1320, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1326 = bitcast <4 x i32> %1325 to <2 x i64>
  %1327 = shufflevector <4 x i32> %1322, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1328 = bitcast <4 x i32> %1327 to <2 x i64>
  %1329 = shufflevector <4 x i32> %1322, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1330 = bitcast <4 x i32> %1329 to <2 x i64>
  %1331 = ashr <4 x i32> %1243, <i32 31, i32 31, i32 31, i32 31>
  %1332 = xor <4 x i32> %1331, %1243
  %1333 = sub <4 x i32> %1332, %1331
  %1334 = shufflevector <4 x i32> %1331, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1335 = bitcast <4 x i32> %1334 to <2 x i64>
  %1336 = shufflevector <4 x i32> %1331, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1337 = bitcast <4 x i32> %1336 to <2 x i64>
  %1338 = shufflevector <4 x i32> %1333, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1339 = bitcast <4 x i32> %1338 to <2 x i64>
  %1340 = shufflevector <4 x i32> %1333, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1341 = bitcast <4 x i32> %1340 to <2 x i64>
  %1342 = and <2 x i64> %1330, <i64 4294967295, i64 4294967295>
  %1343 = mul nuw nsw <2 x i64> %1342, <i64 12784, i64 12784>
  %1344 = xor <2 x i64> %1343, %1326
  %1345 = and <2 x i64> %1328, <i64 4294967295, i64 4294967295>
  %1346 = mul nuw nsw <2 x i64> %1345, <i64 12784, i64 12784>
  %1347 = xor <2 x i64> %1346, %1324
  %1348 = mul nuw nsw <2 x i64> %1342, <i64 64276, i64 64276>
  %1349 = xor <2 x i64> %1348, %1326
  %1350 = mul nuw nsw <2 x i64> %1345, <i64 64276, i64 64276>
  %1351 = xor <2 x i64> %1350, %1324
  %1352 = and <2 x i64> %1341, <i64 4294967295, i64 4294967295>
  %1353 = mul nuw nsw <2 x i64> %1352, <i64 64276, i64 64276>
  %1354 = xor <2 x i64> %1353, %1337
  %1355 = and <2 x i64> %1339, <i64 4294967295, i64 4294967295>
  %1356 = mul nuw nsw <2 x i64> %1355, <i64 64276, i64 64276>
  %1357 = xor <2 x i64> %1356, %1335
  %1358 = mul nuw nsw <2 x i64> %1352, <i64 12784, i64 12784>
  %1359 = xor <2 x i64> %1358, %1337
  %1360 = mul nuw nsw <2 x i64> %1355, <i64 12784, i64 12784>
  %1361 = xor <2 x i64> %1360, %1335
  %1362 = sub <2 x i64> <i64 32768, i64 32768>, %1326
  %1363 = add <2 x i64> %1362, %1337
  %1364 = add <2 x i64> %1363, %1349
  %1365 = sub <2 x i64> %1364, %1359
  %1366 = bitcast <2 x i64> %1365 to <16 x i8>
  %1367 = shufflevector <16 x i8> %1366, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1368 = sub <2 x i64> <i64 32768, i64 32768>, %1324
  %1369 = add <2 x i64> %1368, %1335
  %1370 = add <2 x i64> %1369, %1351
  %1371 = sub <2 x i64> %1370, %1361
  %1372 = bitcast <2 x i64> %1371 to <16 x i8>
  %1373 = shufflevector <16 x i8> %1372, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1374 = sub <2 x i64> %1362, %1337
  %1375 = add <2 x i64> %1374, %1344
  %1376 = add <2 x i64> %1375, %1354
  %1377 = bitcast <2 x i64> %1376 to <16 x i8>
  %1378 = shufflevector <16 x i8> %1377, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1379 = sub <2 x i64> %1368, %1335
  %1380 = add <2 x i64> %1379, %1347
  %1381 = add <2 x i64> %1380, %1357
  %1382 = bitcast <2 x i64> %1381 to <16 x i8>
  %1383 = shufflevector <16 x i8> %1382, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1384 = bitcast <16 x i8> %1367 to <4 x i32>
  %1385 = bitcast <16 x i8> %1373 to <4 x i32>
  %1386 = shufflevector <4 x i32> %1384, <4 x i32> %1385, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1387 = shufflevector <4 x i32> %1384, <4 x i32> %1385, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1388 = shufflevector <4 x i32> %1386, <4 x i32> %1387, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1388, <4 x i32>* %963, align 16
  %1389 = bitcast <16 x i8> %1378 to <4 x i32>
  %1390 = bitcast <16 x i8> %1383 to <4 x i32>
  %1391 = shufflevector <4 x i32> %1389, <4 x i32> %1390, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1392 = shufflevector <4 x i32> %1389, <4 x i32> %1390, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1393 = shufflevector <4 x i32> %1391, <4 x i32> %1392, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1393, <4 x i32>* %947, align 16
  store <4 x i32> %1233, <4 x i32>* %999, align 16
  store <4 x i32> %1234, <4 x i32>* %1053, align 16
  %1394 = ashr <4 x i32> %1240, <i32 31, i32 31, i32 31, i32 31>
  %1395 = xor <4 x i32> %1394, %1240
  %1396 = sub <4 x i32> %1395, %1394
  %1397 = shufflevector <4 x i32> %1394, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1398 = bitcast <4 x i32> %1397 to <2 x i64>
  %1399 = shufflevector <4 x i32> %1394, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1400 = bitcast <4 x i32> %1399 to <2 x i64>
  %1401 = shufflevector <4 x i32> %1396, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1402 = bitcast <4 x i32> %1401 to <2 x i64>
  %1403 = shufflevector <4 x i32> %1396, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1404 = bitcast <4 x i32> %1403 to <2 x i64>
  %1405 = ashr <4 x i32> %1235, <i32 31, i32 31, i32 31, i32 31>
  %1406 = xor <4 x i32> %1405, %1235
  %1407 = sub <4 x i32> %1406, %1405
  %1408 = shufflevector <4 x i32> %1405, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1409 = bitcast <4 x i32> %1408 to <2 x i64>
  %1410 = shufflevector <4 x i32> %1405, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1411 = bitcast <4 x i32> %1410 to <2 x i64>
  %1412 = shufflevector <4 x i32> %1407, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1413 = bitcast <4 x i32> %1412 to <2 x i64>
  %1414 = shufflevector <4 x i32> %1407, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1415 = bitcast <4 x i32> %1414 to <2 x i64>
  %1416 = and <2 x i64> %1404, <i64 4294967295, i64 4294967295>
  %1417 = mul nuw nsw <2 x i64> %1416, <i64 36408, i64 36408>
  %1418 = xor <2 x i64> %1417, %1400
  %1419 = and <2 x i64> %1402, <i64 4294967295, i64 4294967295>
  %1420 = mul nuw nsw <2 x i64> %1419, <i64 36408, i64 36408>
  %1421 = xor <2 x i64> %1420, %1398
  %1422 = mul nuw nsw <2 x i64> %1416, <i64 54492, i64 54492>
  %1423 = xor <2 x i64> %1422, %1400
  %1424 = mul nuw nsw <2 x i64> %1419, <i64 54492, i64 54492>
  %1425 = xor <2 x i64> %1424, %1398
  %1426 = and <2 x i64> %1415, <i64 4294967295, i64 4294967295>
  %1427 = mul nuw nsw <2 x i64> %1426, <i64 54492, i64 54492>
  %1428 = xor <2 x i64> %1427, %1411
  %1429 = and <2 x i64> %1413, <i64 4294967295, i64 4294967295>
  %1430 = mul nuw nsw <2 x i64> %1429, <i64 54492, i64 54492>
  %1431 = xor <2 x i64> %1430, %1409
  %1432 = mul nuw nsw <2 x i64> %1426, <i64 36408, i64 36408>
  %1433 = xor <2 x i64> %1432, %1411
  %1434 = mul nuw nsw <2 x i64> %1429, <i64 36408, i64 36408>
  %1435 = xor <2 x i64> %1434, %1409
  %1436 = sub <2 x i64> <i64 32768, i64 32768>, %1400
  %1437 = add <2 x i64> %1436, %1411
  %1438 = sub <2 x i64> %1437, %1433
  %1439 = add <2 x i64> %1438, %1423
  %1440 = bitcast <2 x i64> %1439 to <16 x i8>
  %1441 = shufflevector <16 x i8> %1440, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1442 = sub <2 x i64> <i64 32768, i64 32768>, %1398
  %1443 = add <2 x i64> %1442, %1409
  %1444 = sub <2 x i64> %1443, %1435
  %1445 = add <2 x i64> %1444, %1425
  %1446 = bitcast <2 x i64> %1445 to <16 x i8>
  %1447 = shufflevector <16 x i8> %1446, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1448 = sub <2 x i64> %1436, %1411
  %1449 = add <2 x i64> %1448, %1428
  %1450 = add <2 x i64> %1449, %1418
  %1451 = bitcast <2 x i64> %1450 to <16 x i8>
  %1452 = shufflevector <16 x i8> %1451, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1453 = sub <2 x i64> %1442, %1409
  %1454 = add <2 x i64> %1453, %1431
  %1455 = add <2 x i64> %1454, %1421
  %1456 = bitcast <2 x i64> %1455 to <16 x i8>
  %1457 = shufflevector <16 x i8> %1456, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1458 = bitcast <16 x i8> %1441 to <4 x i32>
  %1459 = bitcast <16 x i8> %1447 to <4 x i32>
  %1460 = shufflevector <4 x i32> %1458, <4 x i32> %1459, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1461 = shufflevector <4 x i32> %1458, <4 x i32> %1459, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1462 = shufflevector <4 x i32> %1460, <4 x i32> %1461, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1462, <4 x i32>* %1105, align 16
  %1463 = bitcast <16 x i8> %1452 to <4 x i32>
  %1464 = bitcast <16 x i8> %1457 to <4 x i32>
  %1465 = shufflevector <4 x i32> %1463, <4 x i32> %1464, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1466 = shufflevector <4 x i32> %1463, <4 x i32> %1464, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1467 = shufflevector <4 x i32> %1465, <4 x i32> %1466, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1467, <4 x i32>* %1123, align 16
  %1468 = ashr <4 x i32> %1236, <i32 31, i32 31, i32 31, i32 31>
  %1469 = xor <4 x i32> %1468, %1236
  %1470 = sub <4 x i32> %1469, %1468
  %1471 = shufflevector <4 x i32> %1468, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1472 = bitcast <4 x i32> %1471 to <2 x i64>
  %1473 = shufflevector <4 x i32> %1468, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1474 = bitcast <4 x i32> %1473 to <2 x i64>
  %1475 = shufflevector <4 x i32> %1470, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1476 = bitcast <4 x i32> %1475 to <2 x i64>
  %1477 = shufflevector <4 x i32> %1470, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1478 = bitcast <4 x i32> %1477 to <2 x i64>
  %1479 = ashr <4 x i32> %1239, <i32 31, i32 31, i32 31, i32 31>
  %1480 = xor <4 x i32> %1479, %1239
  %1481 = sub <4 x i32> %1480, %1479
  %1482 = shufflevector <4 x i32> %1479, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1483 = bitcast <4 x i32> %1482 to <2 x i64>
  %1484 = shufflevector <4 x i32> %1479, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1485 = bitcast <4 x i32> %1484 to <2 x i64>
  %1486 = shufflevector <4 x i32> %1481, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1487 = bitcast <4 x i32> %1486 to <2 x i64>
  %1488 = shufflevector <4 x i32> %1481, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1489 = bitcast <4 x i32> %1488 to <2 x i64>
  %1490 = and <2 x i64> %1478, <i64 4294967295, i64 4294967295>
  %1491 = mul nuw nsw <2 x i64> %1490, <i64 54492, i64 54492>
  %1492 = xor <2 x i64> %1491, %1474
  %1493 = and <2 x i64> %1476, <i64 4294967295, i64 4294967295>
  %1494 = mul nuw nsw <2 x i64> %1493, <i64 54492, i64 54492>
  %1495 = xor <2 x i64> %1494, %1472
  %1496 = mul nuw nsw <2 x i64> %1490, <i64 36408, i64 36408>
  %1497 = xor <2 x i64> %1496, %1474
  %1498 = mul nuw nsw <2 x i64> %1493, <i64 36408, i64 36408>
  %1499 = xor <2 x i64> %1498, %1472
  %1500 = and <2 x i64> %1489, <i64 4294967295, i64 4294967295>
  %1501 = mul nuw nsw <2 x i64> %1500, <i64 36408, i64 36408>
  %1502 = xor <2 x i64> %1501, %1485
  %1503 = and <2 x i64> %1487, <i64 4294967295, i64 4294967295>
  %1504 = mul nuw nsw <2 x i64> %1503, <i64 36408, i64 36408>
  %1505 = xor <2 x i64> %1504, %1483
  %1506 = mul nuw nsw <2 x i64> %1500, <i64 54492, i64 54492>
  %1507 = xor <2 x i64> %1506, %1485
  %1508 = mul nuw nsw <2 x i64> %1503, <i64 54492, i64 54492>
  %1509 = xor <2 x i64> %1508, %1483
  %1510 = sub <2 x i64> <i64 32768, i64 32768>, %1474
  %1511 = add <2 x i64> %1510, %1485
  %1512 = add <2 x i64> %1511, %1497
  %1513 = sub <2 x i64> %1512, %1507
  %1514 = bitcast <2 x i64> %1513 to <16 x i8>
  %1515 = shufflevector <16 x i8> %1514, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1516 = sub <2 x i64> <i64 32768, i64 32768>, %1472
  %1517 = add <2 x i64> %1516, %1483
  %1518 = add <2 x i64> %1517, %1499
  %1519 = sub <2 x i64> %1518, %1509
  %1520 = bitcast <2 x i64> %1519 to <16 x i8>
  %1521 = shufflevector <16 x i8> %1520, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1522 = sub <2 x i64> %1510, %1485
  %1523 = add <2 x i64> %1522, %1492
  %1524 = add <2 x i64> %1523, %1502
  %1525 = bitcast <2 x i64> %1524 to <16 x i8>
  %1526 = shufflevector <16 x i8> %1525, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1527 = sub <2 x i64> %1516, %1483
  %1528 = add <2 x i64> %1527, %1495
  %1529 = add <2 x i64> %1528, %1505
  %1530 = bitcast <2 x i64> %1529 to <16 x i8>
  %1531 = shufflevector <16 x i8> %1530, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1532 = bitcast <16 x i8> %1515 to <4 x i32>
  %1533 = bitcast <16 x i8> %1521 to <4 x i32>
  %1534 = shufflevector <4 x i32> %1532, <4 x i32> %1533, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1535 = shufflevector <4 x i32> %1532, <4 x i32> %1533, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1536 = shufflevector <4 x i32> %1534, <4 x i32> %1535, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1536, <4 x i32>* %1175, align 16
  %1537 = bitcast <16 x i8> %1526 to <4 x i32>
  %1538 = bitcast <16 x i8> %1531 to <4 x i32>
  %1539 = shufflevector <4 x i32> %1537, <4 x i32> %1538, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1540 = shufflevector <4 x i32> %1537, <4 x i32> %1538, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1541 = shufflevector <4 x i32> %1539, <4 x i32> %1540, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %1541, <4 x i32>* %1159, align 16
  store <4 x i32> %1237, <4 x i32>* %1211, align 16
  store <4 x i32> %1238, <4 x i32>* %1229, align 16
  store <4 x i32> %1241, <4 x i32>* %1069, align 16
  store <4 x i32> %1242, <4 x i32>* %1017, align 16
  %1542 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 0
  call fastcc void @highbd_idct32_4x32_quarter_3_4_stage_4_to_7(<2 x i64>* nonnull %1542, <2 x i64>* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %805) #7
  br label %1543

1543:                                             ; preds = %1543, %1
  %1544 = phi i64 [ 0, %1 ], [ %1560, %1543 ]
  %1545 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 %1544
  %1546 = bitcast <2 x i64>* %1545 to <4 x i32>*
  %1547 = load <4 x i32>, <4 x i32>* %1546, align 16
  %1548 = shl i64 %1544, 32
  %1549 = sub nuw nsw i64 133143986176, %1548
  %1550 = ashr exact i64 %1549, 32
  %1551 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 %1550
  %1552 = bitcast <2 x i64>* %1551 to <4 x i32>*
  %1553 = load <4 x i32>, <4 x i32>* %1552, align 16
  %1554 = add <4 x i32> %1553, %1547
  %1555 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %1544
  %1556 = bitcast <2 x i64>* %1555 to <4 x i32>*
  store <4 x i32> %1554, <4 x i32>* %1556, align 16
  %1557 = sub <4 x i32> %1547, %1553
  %1558 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %1550
  %1559 = bitcast <2 x i64>* %1558 to <4 x i32>*
  store <4 x i32> %1557, <4 x i32>* %1559, align 16
  %1560 = add nuw nsw i64 %1544, 1
  %1561 = icmp eq i64 %1560, 16
  br i1 %1561, label %1562, label %1543

1562:                                             ; preds = %1543
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %4) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_idct32x32_34_add_sse2(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #0 {
  %5 = alloca [32 x <2 x i64>], align 16
  %6 = alloca [32 x <2 x i64>], align 16
  %7 = alloca [32 x <2 x i64>], align 16
  %8 = alloca [8 x [32 x <2 x i64>]], align 16
  %9 = alloca [32 x <2 x i64>], align 16
  %10 = icmp eq i32 %3, 8
  br i1 %10, label %11, label %229

11:                                               ; preds = %4
  %12 = bitcast [32 x <2 x i64>]* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %12) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -86, i64 512, i1 false)
  %13 = bitcast [32 x <2 x i64>]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %13) #7
  %14 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 7
  %15 = bitcast <2 x i64>* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -86, i64 400, i1 false)
  %16 = bitcast [32 x <2 x i64>]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %16) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -86, i64 512, i1 false)
  %17 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 0
  %18 = bitcast i32* %0 to <4 x i32>*
  %19 = load <4 x i32>, <4 x i32>* %18, align 16
  %20 = getelementptr inbounds i32, i32* %0, i64 4
  %21 = bitcast i32* %20 to <4 x i32>*
  %22 = load <4 x i32>, <4 x i32>* %21, align 16
  %23 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %19, <4 x i32> %22) #7
  %24 = bitcast [32 x <2 x i64>]* %6 to <8 x i16>*
  store <8 x i16> %23, <8 x i16>* %24, align 16
  %25 = getelementptr inbounds i32, i32* %0, i64 32
  %26 = bitcast i32* %25 to <4 x i32>*
  %27 = load <4 x i32>, <4 x i32>* %26, align 16
  %28 = getelementptr inbounds i32, i32* %0, i64 36
  %29 = bitcast i32* %28 to <4 x i32>*
  %30 = load <4 x i32>, <4 x i32>* %29, align 16
  %31 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %27, <4 x i32> %30) #7
  %32 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 1
  %33 = getelementptr inbounds i32, i32* %0, i64 64
  %34 = bitcast i32* %33 to <4 x i32>*
  %35 = load <4 x i32>, <4 x i32>* %34, align 16
  %36 = getelementptr inbounds i32, i32* %0, i64 68
  %37 = bitcast i32* %36 to <4 x i32>*
  %38 = load <4 x i32>, <4 x i32>* %37, align 16
  %39 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %35, <4 x i32> %38) #7
  %40 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 2
  %41 = getelementptr inbounds i32, i32* %0, i64 96
  %42 = bitcast i32* %41 to <4 x i32>*
  %43 = load <4 x i32>, <4 x i32>* %42, align 16
  %44 = getelementptr inbounds i32, i32* %0, i64 100
  %45 = bitcast i32* %44 to <4 x i32>*
  %46 = load <4 x i32>, <4 x i32>* %45, align 16
  %47 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %43, <4 x i32> %46) #7
  %48 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 3
  %49 = getelementptr inbounds i32, i32* %0, i64 128
  %50 = bitcast i32* %49 to <4 x i32>*
  %51 = load <4 x i32>, <4 x i32>* %50, align 16
  %52 = getelementptr inbounds i32, i32* %0, i64 132
  %53 = bitcast i32* %52 to <4 x i32>*
  %54 = load <4 x i32>, <4 x i32>* %53, align 16
  %55 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %51, <4 x i32> %54) #7
  %56 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 4
  %57 = getelementptr inbounds i32, i32* %0, i64 160
  %58 = bitcast i32* %57 to <4 x i32>*
  %59 = load <4 x i32>, <4 x i32>* %58, align 16
  %60 = getelementptr inbounds i32, i32* %0, i64 164
  %61 = bitcast i32* %60 to <4 x i32>*
  %62 = load <4 x i32>, <4 x i32>* %61, align 16
  %63 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %59, <4 x i32> %62) #7
  %64 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 5
  %65 = getelementptr inbounds i32, i32* %0, i64 192
  %66 = bitcast i32* %65 to <4 x i32>*
  %67 = load <4 x i32>, <4 x i32>* %66, align 16
  %68 = getelementptr inbounds i32, i32* %0, i64 196
  %69 = bitcast i32* %68 to <4 x i32>*
  %70 = load <4 x i32>, <4 x i32>* %69, align 16
  %71 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %67, <4 x i32> %70) #7
  %72 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 6
  %73 = getelementptr inbounds i32, i32* %0, i64 224
  %74 = bitcast i32* %73 to <4 x i32>*
  %75 = load <4 x i32>, <4 x i32>* %74, align 16
  %76 = getelementptr inbounds i32, i32* %0, i64 228
  %77 = bitcast i32* %76 to <4 x i32>*
  %78 = load <4 x i32>, <4 x i32>* %77, align 16
  %79 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %75, <4 x i32> %78) #7
  %80 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %6, i64 0, i64 7
  %81 = shufflevector <8 x i16> %23, <8 x i16> %31, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %82 = shufflevector <8 x i16> %39, <8 x i16> %47, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %83 = shufflevector <8 x i16> %55, <8 x i16> %63, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %84 = shufflevector <8 x i16> %71, <8 x i16> %79, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %85 = shufflevector <8 x i16> %23, <8 x i16> %31, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %86 = shufflevector <8 x i16> %39, <8 x i16> %47, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %87 = shufflevector <8 x i16> %55, <8 x i16> %63, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %88 = shufflevector <8 x i16> %71, <8 x i16> %79, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %89 = bitcast <8 x i16> %81 to <4 x i32>
  %90 = bitcast <8 x i16> %82 to <4 x i32>
  %91 = shufflevector <4 x i32> %89, <4 x i32> %90, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %92 = bitcast <4 x i32> %91 to <2 x i64>
  %93 = bitcast <8 x i16> %83 to <4 x i32>
  %94 = bitcast <8 x i16> %84 to <4 x i32>
  %95 = shufflevector <4 x i32> %93, <4 x i32> %94, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %96 = bitcast <4 x i32> %95 to <2 x i64>
  %97 = bitcast <8 x i16> %85 to <4 x i32>
  %98 = bitcast <8 x i16> %86 to <4 x i32>
  %99 = shufflevector <4 x i32> %97, <4 x i32> %98, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %100 = bitcast <4 x i32> %99 to <2 x i64>
  %101 = bitcast <8 x i16> %87 to <4 x i32>
  %102 = bitcast <8 x i16> %88 to <4 x i32>
  %103 = shufflevector <4 x i32> %101, <4 x i32> %102, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %104 = bitcast <4 x i32> %103 to <2 x i64>
  %105 = shufflevector <4 x i32> %89, <4 x i32> %90, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %106 = bitcast <4 x i32> %105 to <2 x i64>
  %107 = shufflevector <4 x i32> %93, <4 x i32> %94, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %108 = bitcast <4 x i32> %107 to <2 x i64>
  %109 = shufflevector <4 x i32> %97, <4 x i32> %98, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %110 = bitcast <4 x i32> %109 to <2 x i64>
  %111 = shufflevector <4 x i32> %101, <4 x i32> %102, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %112 = bitcast <4 x i32> %111 to <2 x i64>
  %113 = shufflevector <2 x i64> %92, <2 x i64> %96, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %113, <2 x i64>* %17, align 16
  %114 = shufflevector <2 x i64> %92, <2 x i64> %96, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %114, <2 x i64>* %32, align 16
  %115 = shufflevector <2 x i64> %106, <2 x i64> %108, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %115, <2 x i64>* %40, align 16
  %116 = shufflevector <2 x i64> %106, <2 x i64> %108, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %116, <2 x i64>* %48, align 16
  %117 = shufflevector <2 x i64> %100, <2 x i64> %104, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %117, <2 x i64>* %56, align 16
  %118 = shufflevector <2 x i64> %100, <2 x i64> %104, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %118, <2 x i64>* %64, align 16
  %119 = shufflevector <2 x i64> %110, <2 x i64> %112, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %119, <2 x i64>* %72, align 16
  %120 = shufflevector <2 x i64> %110, <2 x i64> %112, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %120, <2 x i64>* %80, align 16
  %121 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %5, i64 0, i64 0
  call void @idct32_34_8x32_sse2(<2 x i64>* nonnull %17, <2 x i64>* nonnull %121) #7
  %122 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 0
  %123 = sext i32 %2 to i64
  br label %124

124:                                              ; preds = %11, %224
  %125 = phi i64 [ 0, %11 ], [ %226, %224 ]
  %126 = phi i16* [ %1, %11 ], [ %225, %224 ]
  %127 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %5, i64 0, i64 %125
  %128 = bitcast <2 x i64>* %127 to <8 x i16>*
  %129 = load <8 x i16>, <8 x i16>* %128, align 16
  %130 = getelementptr inbounds <2 x i64>, <2 x i64>* %127, i64 1
  %131 = bitcast <2 x i64>* %130 to <8 x i16>*
  %132 = load <8 x i16>, <8 x i16>* %131, align 16
  %133 = shufflevector <8 x i16> %129, <8 x i16> %132, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %134 = getelementptr inbounds <2 x i64>, <2 x i64>* %127, i64 2
  %135 = bitcast <2 x i64>* %134 to <8 x i16>*
  %136 = load <8 x i16>, <8 x i16>* %135, align 16
  %137 = getelementptr inbounds <2 x i64>, <2 x i64>* %127, i64 3
  %138 = bitcast <2 x i64>* %137 to <8 x i16>*
  %139 = load <8 x i16>, <8 x i16>* %138, align 16
  %140 = shufflevector <8 x i16> %136, <8 x i16> %139, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %141 = getelementptr inbounds <2 x i64>, <2 x i64>* %127, i64 4
  %142 = bitcast <2 x i64>* %141 to <8 x i16>*
  %143 = load <8 x i16>, <8 x i16>* %142, align 16
  %144 = getelementptr inbounds <2 x i64>, <2 x i64>* %127, i64 5
  %145 = bitcast <2 x i64>* %144 to <8 x i16>*
  %146 = load <8 x i16>, <8 x i16>* %145, align 16
  %147 = shufflevector <8 x i16> %143, <8 x i16> %146, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %148 = getelementptr inbounds <2 x i64>, <2 x i64>* %127, i64 6
  %149 = bitcast <2 x i64>* %148 to <8 x i16>*
  %150 = load <8 x i16>, <8 x i16>* %149, align 16
  %151 = getelementptr inbounds <2 x i64>, <2 x i64>* %127, i64 7
  %152 = bitcast <2 x i64>* %151 to <8 x i16>*
  %153 = load <8 x i16>, <8 x i16>* %152, align 16
  %154 = shufflevector <8 x i16> %150, <8 x i16> %153, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %155 = shufflevector <8 x i16> %129, <8 x i16> %132, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %156 = shufflevector <8 x i16> %136, <8 x i16> %139, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %157 = shufflevector <8 x i16> %143, <8 x i16> %146, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %158 = shufflevector <8 x i16> %150, <8 x i16> %153, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %159 = bitcast <8 x i16> %133 to <4 x i32>
  %160 = bitcast <8 x i16> %140 to <4 x i32>
  %161 = shufflevector <4 x i32> %159, <4 x i32> %160, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %162 = bitcast <4 x i32> %161 to <2 x i64>
  %163 = bitcast <8 x i16> %147 to <4 x i32>
  %164 = bitcast <8 x i16> %154 to <4 x i32>
  %165 = shufflevector <4 x i32> %163, <4 x i32> %164, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %166 = bitcast <4 x i32> %165 to <2 x i64>
  %167 = bitcast <8 x i16> %155 to <4 x i32>
  %168 = bitcast <8 x i16> %156 to <4 x i32>
  %169 = shufflevector <4 x i32> %167, <4 x i32> %168, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %170 = bitcast <4 x i32> %169 to <2 x i64>
  %171 = bitcast <8 x i16> %157 to <4 x i32>
  %172 = bitcast <8 x i16> %158 to <4 x i32>
  %173 = shufflevector <4 x i32> %171, <4 x i32> %172, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %174 = bitcast <4 x i32> %173 to <2 x i64>
  %175 = shufflevector <4 x i32> %159, <4 x i32> %160, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %176 = bitcast <4 x i32> %175 to <2 x i64>
  %177 = shufflevector <4 x i32> %163, <4 x i32> %164, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %178 = bitcast <4 x i32> %177 to <2 x i64>
  %179 = shufflevector <4 x i32> %167, <4 x i32> %168, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %180 = bitcast <4 x i32> %179 to <2 x i64>
  %181 = shufflevector <4 x i32> %171, <4 x i32> %172, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %182 = bitcast <4 x i32> %181 to <2 x i64>
  %183 = shufflevector <2 x i64> %162, <2 x i64> %166, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %183, <2 x i64>* %17, align 16
  %184 = shufflevector <2 x i64> %162, <2 x i64> %166, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %184, <2 x i64>* %32, align 16
  %185 = shufflevector <2 x i64> %176, <2 x i64> %178, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %185, <2 x i64>* %40, align 16
  %186 = shufflevector <2 x i64> %176, <2 x i64> %178, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %186, <2 x i64>* %48, align 16
  %187 = shufflevector <2 x i64> %170, <2 x i64> %174, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %187, <2 x i64>* %56, align 16
  %188 = shufflevector <2 x i64> %170, <2 x i64> %174, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %188, <2 x i64>* %64, align 16
  %189 = shufflevector <2 x i64> %180, <2 x i64> %182, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %189, <2 x i64>* %72, align 16
  %190 = shufflevector <2 x i64> %180, <2 x i64> %182, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %190, <2 x i64>* %80, align 16
  call void @idct32_34_8x32_sse2(<2 x i64>* nonnull %17, <2 x i64>* nonnull %122) #7
  br label %191

191:                                              ; preds = %191, %124
  %192 = phi i64 [ 0, %124 ], [ %222, %191 ]
  %193 = mul nsw i64 %192, %123
  %194 = getelementptr inbounds i16, i16* %126, i64 %193
  %195 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 %192
  %196 = bitcast <2 x i64>* %195 to <8 x i16>*
  %197 = load <8 x i16>, <8 x i16>* %196, align 16
  %198 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %197, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #7
  %199 = ashr <8 x i16> %198, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %200 = bitcast i16* %194 to <8 x i16>*
  %201 = load <8 x i16>, <8 x i16>* %200, align 16
  %202 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %201, <8 x i16> %199) #7
  %203 = icmp sgt <8 x i16> %202, zeroinitializer
  %204 = select <8 x i1> %203, <8 x i16> %202, <8 x i16> zeroinitializer
  %205 = icmp slt <8 x i16> %204, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %206 = select <8 x i1> %205, <8 x i16> %204, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  store <8 x i16> %206, <8 x i16>* %200, align 16
  %207 = or i64 %192, 1
  %208 = mul nsw i64 %207, %123
  %209 = getelementptr inbounds i16, i16* %126, i64 %208
  %210 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %7, i64 0, i64 %207
  %211 = bitcast <2 x i64>* %210 to <8 x i16>*
  %212 = load <8 x i16>, <8 x i16>* %211, align 16
  %213 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %212, <8 x i16> <i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32, i16 32>) #7
  %214 = ashr <8 x i16> %213, <i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6, i16 6>
  %215 = bitcast i16* %209 to <8 x i16>*
  %216 = load <8 x i16>, <8 x i16>* %215, align 16
  %217 = call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %216, <8 x i16> %214) #7
  %218 = icmp sgt <8 x i16> %217, zeroinitializer
  %219 = select <8 x i1> %218, <8 x i16> %217, <8 x i16> zeroinitializer
  %220 = icmp slt <8 x i16> %219, <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  %221 = select <8 x i1> %220, <8 x i16> %219, <8 x i16> <i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255, i16 255>
  store <8 x i16> %221, <8 x i16>* %215, align 16
  %222 = add nuw nsw i64 %192, 2
  %223 = icmp eq i64 %222, 32
  br i1 %223, label %224, label %191

224:                                              ; preds = %191
  %225 = getelementptr inbounds i16, i16* %126, i64 8
  %226 = add nuw nsw i64 %125, 8
  %227 = icmp ult i64 %226, 32
  br i1 %227, label %124, label %228

228:                                              ; preds = %224
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %16) #7
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %13) #7
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %12) #7
  br label %510

229:                                              ; preds = %4
  %230 = bitcast [8 x [32 x <2 x i64>]]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4096, i8* nonnull %230) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %230, i8 -86, i64 4096, i1 false)
  %231 = bitcast [32 x <2 x i64>]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %231) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %231, i8 -86, i64 512, i1 false)
  br label %250

232:                                              ; preds = %250
  %233 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 0
  %234 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 1
  %235 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 2
  %236 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 3
  %237 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 4
  %238 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 5
  %239 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 6
  %240 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 7
  %241 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 8
  %242 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 9
  %243 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 10
  %244 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 11
  %245 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 12
  %246 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 13
  %247 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 14
  %248 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 15
  %249 = sext i32 %2 to i64
  br label %381

250:                                              ; preds = %250, %229
  %251 = phi i64 [ 0, %229 ], [ %379, %250 ]
  %252 = phi i32* [ %0, %229 ], [ %378, %250 ]
  %253 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 0
  %254 = bitcast i32* %252 to <2 x i64>*
  %255 = load <2 x i64>, <2 x i64>* %254, align 16
  store <2 x i64> %255, <2 x i64>* %253, align 16
  %256 = getelementptr inbounds i32, i32* %252, i64 4
  %257 = bitcast i32* %256 to <2 x i64>*
  %258 = load <2 x i64>, <2 x i64>* %257, align 16
  %259 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 1
  store <2 x i64> %258, <2 x i64>* %259, align 16
  %260 = getelementptr inbounds i32, i32* %252, i64 32
  %261 = bitcast i32* %260 to <2 x i64>*
  %262 = load <2 x i64>, <2 x i64>* %261, align 16
  %263 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 2
  store <2 x i64> %262, <2 x i64>* %263, align 16
  %264 = getelementptr inbounds i32, i32* %252, i64 36
  %265 = bitcast i32* %264 to <2 x i64>*
  %266 = load <2 x i64>, <2 x i64>* %265, align 16
  %267 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 3
  store <2 x i64> %266, <2 x i64>* %267, align 16
  %268 = getelementptr inbounds i32, i32* %252, i64 64
  %269 = bitcast i32* %268 to <2 x i64>*
  %270 = load <2 x i64>, <2 x i64>* %269, align 16
  %271 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 4
  store <2 x i64> %270, <2 x i64>* %271, align 16
  %272 = getelementptr inbounds i32, i32* %252, i64 68
  %273 = bitcast i32* %272 to <2 x i64>*
  %274 = load <2 x i64>, <2 x i64>* %273, align 16
  %275 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 5
  store <2 x i64> %274, <2 x i64>* %275, align 16
  %276 = getelementptr inbounds i32, i32* %252, i64 96
  %277 = bitcast i32* %276 to <2 x i64>*
  %278 = load <2 x i64>, <2 x i64>* %277, align 16
  %279 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 6
  store <2 x i64> %278, <2 x i64>* %279, align 16
  %280 = getelementptr inbounds i32, i32* %252, i64 100
  %281 = bitcast i32* %280 to <4 x i32>*
  %282 = load <4 x i32>, <4 x i32>* %281, align 16
  %283 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 7
  %284 = bitcast <2 x i64> %255 to <4 x i32>
  %285 = bitcast <2 x i64> %262 to <4 x i32>
  %286 = shufflevector <4 x i32> %284, <4 x i32> %285, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %287 = bitcast <4 x i32> %286 to <2 x i64>
  %288 = bitcast <2 x i64> %270 to <4 x i32>
  %289 = bitcast <2 x i64> %278 to <4 x i32>
  %290 = shufflevector <4 x i32> %288, <4 x i32> %289, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %291 = bitcast <4 x i32> %290 to <2 x i64>
  %292 = shufflevector <4 x i32> %284, <4 x i32> %285, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %293 = bitcast <4 x i32> %292 to <2 x i64>
  %294 = shufflevector <4 x i32> %288, <4 x i32> %289, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %295 = bitcast <4 x i32> %294 to <2 x i64>
  %296 = bitcast <2 x i64> %258 to <4 x i32>
  %297 = bitcast <2 x i64> %266 to <4 x i32>
  %298 = shufflevector <4 x i32> %296, <4 x i32> %297, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %299 = bitcast <4 x i32> %298 to <2 x i64>
  %300 = bitcast <2 x i64> %274 to <4 x i32>
  %301 = shufflevector <4 x i32> %300, <4 x i32> %282, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %302 = bitcast <4 x i32> %301 to <2 x i64>
  %303 = shufflevector <4 x i32> %296, <4 x i32> %297, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %304 = bitcast <4 x i32> %303 to <2 x i64>
  %305 = shufflevector <4 x i32> %300, <4 x i32> %282, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %306 = bitcast <4 x i32> %305 to <2 x i64>
  %307 = shufflevector <2 x i64> %287, <2 x i64> %291, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %307, <2 x i64>* %253, align 16
  %308 = shufflevector <2 x i64> %287, <2 x i64> %291, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %308, <2 x i64>* %259, align 16
  %309 = shufflevector <2 x i64> %293, <2 x i64> %295, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %309, <2 x i64>* %263, align 16
  %310 = shufflevector <2 x i64> %293, <2 x i64> %295, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %310, <2 x i64>* %267, align 16
  %311 = shufflevector <2 x i64> %299, <2 x i64> %302, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %311, <2 x i64>* %271, align 16
  %312 = shufflevector <2 x i64> %299, <2 x i64> %302, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %312, <2 x i64>* %275, align 16
  %313 = shufflevector <2 x i64> %304, <2 x i64> %306, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %313, <2 x i64>* %279, align 16
  %314 = shufflevector <2 x i64> %304, <2 x i64> %306, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %314, <2 x i64>* %283, align 16
  %315 = getelementptr inbounds i32, i32* %252, i64 8
  %316 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 8
  %317 = bitcast i32* %315 to <2 x i64>*
  %318 = load <2 x i64>, <2 x i64>* %317, align 16
  store <2 x i64> %318, <2 x i64>* %316, align 16
  %319 = getelementptr inbounds i32, i32* %252, i64 12
  %320 = bitcast i32* %319 to <2 x i64>*
  %321 = load <2 x i64>, <2 x i64>* %320, align 16
  %322 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 9
  store <2 x i64> %321, <2 x i64>* %322, align 16
  %323 = getelementptr inbounds i32, i32* %252, i64 40
  %324 = bitcast i32* %323 to <2 x i64>*
  %325 = load <2 x i64>, <2 x i64>* %324, align 16
  %326 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 10
  store <2 x i64> %325, <2 x i64>* %326, align 16
  %327 = getelementptr inbounds i32, i32* %252, i64 44
  %328 = bitcast i32* %327 to <2 x i64>*
  %329 = load <2 x i64>, <2 x i64>* %328, align 16
  %330 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 11
  store <2 x i64> %329, <2 x i64>* %330, align 16
  %331 = getelementptr inbounds i32, i32* %252, i64 72
  %332 = bitcast i32* %331 to <2 x i64>*
  %333 = load <2 x i64>, <2 x i64>* %332, align 16
  %334 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 12
  store <2 x i64> %333, <2 x i64>* %334, align 16
  %335 = getelementptr inbounds i32, i32* %252, i64 76
  %336 = bitcast i32* %335 to <2 x i64>*
  %337 = load <2 x i64>, <2 x i64>* %336, align 16
  %338 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 13
  store <2 x i64> %337, <2 x i64>* %338, align 16
  %339 = getelementptr inbounds i32, i32* %252, i64 104
  %340 = bitcast i32* %339 to <2 x i64>*
  %341 = load <2 x i64>, <2 x i64>* %340, align 16
  %342 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 14
  store <2 x i64> %341, <2 x i64>* %342, align 16
  %343 = getelementptr inbounds i32, i32* %252, i64 108
  %344 = bitcast i32* %343 to <4 x i32>*
  %345 = load <4 x i32>, <4 x i32>* %344, align 16
  %346 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 %251, i64 15
  %347 = bitcast <2 x i64> %318 to <4 x i32>
  %348 = bitcast <2 x i64> %325 to <4 x i32>
  %349 = shufflevector <4 x i32> %347, <4 x i32> %348, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %350 = bitcast <4 x i32> %349 to <2 x i64>
  %351 = bitcast <2 x i64> %333 to <4 x i32>
  %352 = bitcast <2 x i64> %341 to <4 x i32>
  %353 = shufflevector <4 x i32> %351, <4 x i32> %352, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %354 = bitcast <4 x i32> %353 to <2 x i64>
  %355 = shufflevector <4 x i32> %347, <4 x i32> %348, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %356 = bitcast <4 x i32> %355 to <2 x i64>
  %357 = shufflevector <4 x i32> %351, <4 x i32> %352, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %358 = bitcast <4 x i32> %357 to <2 x i64>
  %359 = bitcast <2 x i64> %321 to <4 x i32>
  %360 = bitcast <2 x i64> %329 to <4 x i32>
  %361 = shufflevector <4 x i32> %359, <4 x i32> %360, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %362 = bitcast <4 x i32> %361 to <2 x i64>
  %363 = bitcast <2 x i64> %337 to <4 x i32>
  %364 = shufflevector <4 x i32> %363, <4 x i32> %345, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %365 = bitcast <4 x i32> %364 to <2 x i64>
  %366 = shufflevector <4 x i32> %359, <4 x i32> %360, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %367 = bitcast <4 x i32> %366 to <2 x i64>
  %368 = shufflevector <4 x i32> %363, <4 x i32> %345, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %369 = bitcast <4 x i32> %368 to <2 x i64>
  %370 = shufflevector <2 x i64> %350, <2 x i64> %354, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %370, <2 x i64>* %316, align 16
  %371 = shufflevector <2 x i64> %350, <2 x i64> %354, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %371, <2 x i64>* %322, align 16
  %372 = shufflevector <2 x i64> %356, <2 x i64> %358, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %372, <2 x i64>* %326, align 16
  %373 = shufflevector <2 x i64> %356, <2 x i64> %358, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %373, <2 x i64>* %330, align 16
  %374 = shufflevector <2 x i64> %362, <2 x i64> %365, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %374, <2 x i64>* %334, align 16
  %375 = shufflevector <2 x i64> %362, <2 x i64> %365, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %375, <2 x i64>* %338, align 16
  %376 = shufflevector <2 x i64> %367, <2 x i64> %369, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %376, <2 x i64>* %342, align 16
  %377 = shufflevector <2 x i64> %367, <2 x i64> %369, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %377, <2 x i64>* %346, align 16
  call fastcc void @highbd_idct32_34_4x32(<2 x i64>* %253)
  %378 = getelementptr inbounds i32, i32* %252, i64 128
  %379 = add nuw nsw i64 %251, 1
  %380 = icmp eq i64 %379, 4
  br i1 %380, label %232, label %250

381:                                              ; preds = %232, %505
  %382 = phi i64 [ 0, %232 ], [ %507, %505 ]
  %383 = phi i16* [ %1, %232 ], [ %506, %505 ]
  %384 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 0, i64 %382
  %385 = bitcast <2 x i64>* %384 to <4 x i32>*
  %386 = load <4 x i32>, <4 x i32>* %385, align 16
  %387 = getelementptr inbounds <2 x i64>, <2 x i64>* %384, i64 1
  %388 = bitcast <2 x i64>* %387 to <4 x i32>*
  %389 = load <4 x i32>, <4 x i32>* %388, align 16
  %390 = shufflevector <4 x i32> %386, <4 x i32> %389, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %391 = bitcast <4 x i32> %390 to <2 x i64>
  %392 = getelementptr inbounds <2 x i64>, <2 x i64>* %384, i64 2
  %393 = bitcast <2 x i64>* %392 to <4 x i32>*
  %394 = load <4 x i32>, <4 x i32>* %393, align 16
  %395 = getelementptr inbounds <2 x i64>, <2 x i64>* %384, i64 3
  %396 = bitcast <2 x i64>* %395 to <4 x i32>*
  %397 = load <4 x i32>, <4 x i32>* %396, align 16
  %398 = shufflevector <4 x i32> %394, <4 x i32> %397, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %399 = bitcast <4 x i32> %398 to <2 x i64>
  %400 = shufflevector <4 x i32> %386, <4 x i32> %389, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %401 = bitcast <4 x i32> %400 to <2 x i64>
  %402 = shufflevector <4 x i32> %394, <4 x i32> %397, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %403 = bitcast <4 x i32> %402 to <2 x i64>
  %404 = shufflevector <2 x i64> %391, <2 x i64> %399, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %404, <2 x i64>* %233, align 16
  %405 = shufflevector <2 x i64> %391, <2 x i64> %399, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %405, <2 x i64>* %234, align 16
  %406 = shufflevector <2 x i64> %401, <2 x i64> %403, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %406, <2 x i64>* %235, align 16
  %407 = shufflevector <2 x i64> %401, <2 x i64> %403, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %407, <2 x i64>* %236, align 16
  %408 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 1, i64 %382
  %409 = bitcast <2 x i64>* %408 to <4 x i32>*
  %410 = load <4 x i32>, <4 x i32>* %409, align 16
  %411 = getelementptr inbounds <2 x i64>, <2 x i64>* %408, i64 1
  %412 = bitcast <2 x i64>* %411 to <4 x i32>*
  %413 = load <4 x i32>, <4 x i32>* %412, align 16
  %414 = shufflevector <4 x i32> %410, <4 x i32> %413, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %415 = bitcast <4 x i32> %414 to <2 x i64>
  %416 = getelementptr inbounds <2 x i64>, <2 x i64>* %408, i64 2
  %417 = bitcast <2 x i64>* %416 to <4 x i32>*
  %418 = load <4 x i32>, <4 x i32>* %417, align 16
  %419 = getelementptr inbounds <2 x i64>, <2 x i64>* %408, i64 3
  %420 = bitcast <2 x i64>* %419 to <4 x i32>*
  %421 = load <4 x i32>, <4 x i32>* %420, align 16
  %422 = shufflevector <4 x i32> %418, <4 x i32> %421, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %423 = bitcast <4 x i32> %422 to <2 x i64>
  %424 = shufflevector <4 x i32> %410, <4 x i32> %413, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %425 = bitcast <4 x i32> %424 to <2 x i64>
  %426 = shufflevector <4 x i32> %418, <4 x i32> %421, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %427 = bitcast <4 x i32> %426 to <2 x i64>
  %428 = shufflevector <2 x i64> %415, <2 x i64> %423, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %428, <2 x i64>* %237, align 16
  %429 = shufflevector <2 x i64> %415, <2 x i64> %423, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %429, <2 x i64>* %238, align 16
  %430 = shufflevector <2 x i64> %425, <2 x i64> %427, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %430, <2 x i64>* %239, align 16
  %431 = shufflevector <2 x i64> %425, <2 x i64> %427, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %431, <2 x i64>* %240, align 16
  %432 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 2, i64 %382
  %433 = bitcast <2 x i64>* %432 to <4 x i32>*
  %434 = load <4 x i32>, <4 x i32>* %433, align 16
  %435 = getelementptr inbounds <2 x i64>, <2 x i64>* %432, i64 1
  %436 = bitcast <2 x i64>* %435 to <4 x i32>*
  %437 = load <4 x i32>, <4 x i32>* %436, align 16
  %438 = shufflevector <4 x i32> %434, <4 x i32> %437, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %439 = bitcast <4 x i32> %438 to <2 x i64>
  %440 = getelementptr inbounds <2 x i64>, <2 x i64>* %432, i64 2
  %441 = bitcast <2 x i64>* %440 to <4 x i32>*
  %442 = load <4 x i32>, <4 x i32>* %441, align 16
  %443 = getelementptr inbounds <2 x i64>, <2 x i64>* %432, i64 3
  %444 = bitcast <2 x i64>* %443 to <4 x i32>*
  %445 = load <4 x i32>, <4 x i32>* %444, align 16
  %446 = shufflevector <4 x i32> %442, <4 x i32> %445, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %447 = bitcast <4 x i32> %446 to <2 x i64>
  %448 = shufflevector <4 x i32> %434, <4 x i32> %437, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %449 = bitcast <4 x i32> %448 to <2 x i64>
  %450 = shufflevector <4 x i32> %442, <4 x i32> %445, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %451 = bitcast <4 x i32> %450 to <2 x i64>
  %452 = shufflevector <2 x i64> %439, <2 x i64> %447, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %452, <2 x i64>* %241, align 16
  %453 = shufflevector <2 x i64> %439, <2 x i64> %447, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %453, <2 x i64>* %242, align 16
  %454 = shufflevector <2 x i64> %449, <2 x i64> %451, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %454, <2 x i64>* %243, align 16
  %455 = shufflevector <2 x i64> %449, <2 x i64> %451, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %455, <2 x i64>* %244, align 16
  %456 = getelementptr inbounds [8 x [32 x <2 x i64>]], [8 x [32 x <2 x i64>]]* %8, i64 0, i64 3, i64 %382
  %457 = bitcast <2 x i64>* %456 to <4 x i32>*
  %458 = load <4 x i32>, <4 x i32>* %457, align 16
  %459 = getelementptr inbounds <2 x i64>, <2 x i64>* %456, i64 1
  %460 = bitcast <2 x i64>* %459 to <4 x i32>*
  %461 = load <4 x i32>, <4 x i32>* %460, align 16
  %462 = shufflevector <4 x i32> %458, <4 x i32> %461, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %463 = bitcast <4 x i32> %462 to <2 x i64>
  %464 = getelementptr inbounds <2 x i64>, <2 x i64>* %456, i64 2
  %465 = bitcast <2 x i64>* %464 to <4 x i32>*
  %466 = load <4 x i32>, <4 x i32>* %465, align 16
  %467 = getelementptr inbounds <2 x i64>, <2 x i64>* %456, i64 3
  %468 = bitcast <2 x i64>* %467 to <4 x i32>*
  %469 = load <4 x i32>, <4 x i32>* %468, align 16
  %470 = shufflevector <4 x i32> %466, <4 x i32> %469, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %471 = bitcast <4 x i32> %470 to <2 x i64>
  %472 = shufflevector <4 x i32> %458, <4 x i32> %461, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %473 = bitcast <4 x i32> %472 to <2 x i64>
  %474 = shufflevector <4 x i32> %466, <4 x i32> %469, <4 x i32> <i32 2, i32 6, i32 3, i32 7>
  %475 = bitcast <4 x i32> %474 to <2 x i64>
  %476 = shufflevector <2 x i64> %463, <2 x i64> %471, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %476, <2 x i64>* %245, align 16
  %477 = shufflevector <2 x i64> %463, <2 x i64> %471, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %477, <2 x i64>* %246, align 16
  %478 = shufflevector <2 x i64> %473, <2 x i64> %475, <2 x i32> <i32 0, i32 2>
  store <2 x i64> %478, <2 x i64>* %247, align 16
  %479 = shufflevector <2 x i64> %473, <2 x i64> %475, <2 x i32> <i32 1, i32 3>
  store <2 x i64> %479, <2 x i64>* %248, align 16
  call fastcc void @highbd_idct32_34_4x32(<2 x i64>* nonnull %233)
  %480 = tail call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, i32 %3) #7
  %481 = add <8 x i16> %480, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  br label %482

482:                                              ; preds = %482, %381
  %483 = phi i64 [ 0, %381 ], [ %503, %482 ]
  %484 = mul nsw i64 %483, %249
  %485 = getelementptr inbounds i16, i16* %383, i64 %484
  %486 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %9, i64 0, i64 %483
  %487 = bitcast <2 x i64>* %486 to <4 x i32>*
  %488 = load <4 x i32>, <4 x i32>* %487, align 16
  %489 = add <4 x i32> %488, <i32 32, i32 32, i32 32, i32 32>
  %490 = ashr <4 x i32> %489, <i32 6, i32 6, i32 6, i32 6>
  %491 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %490, <4 x i32> %490) #7
  %492 = bitcast i16* %485 to i64*
  %493 = load i64, i64* %492, align 1
  %494 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %493, i32 0
  %495 = bitcast <2 x i64> %494 to <8 x i16>
  %496 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %495, <8 x i16> %491) #7
  %497 = icmp sgt <8 x i16> %496, zeroinitializer
  %498 = select <8 x i1> %497, <8 x i16> %496, <8 x i16> zeroinitializer
  %499 = icmp slt <8 x i16> %498, %481
  %500 = select <8 x i1> %499, <8 x i16> %498, <8 x i16> %481
  %501 = bitcast <8 x i16> %500 to <2 x i64>
  %502 = extractelement <2 x i64> %501, i32 0
  store i64 %502, i64* %492, align 1
  %503 = add nuw nsw i64 %483, 1
  %504 = icmp eq i64 %503, 32
  br i1 %504, label %505, label %482

505:                                              ; preds = %482
  %506 = getelementptr inbounds i16, i16* %383, i64 4
  %507 = add nuw nsw i64 %382, 4
  %508 = icmp ult i64 %507, 32
  br i1 %508, label %381, label %509

509:                                              ; preds = %505
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %231) #7
  call void @llvm.lifetime.end.p0i8(i64 4096, i8* nonnull %230) #7
  br label %510

510:                                              ; preds = %509, %228
  ret void
}

declare void @idct32_34_8x32_sse2(<2 x i64>*, <2 x i64>*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @highbd_idct32_34_4x32(<2 x i64>* nocapture) unnamed_addr #0 {
  %2 = alloca [32 x <2 x i64>], align 16
  %3 = alloca [32 x <2 x i64>], align 16
  %4 = bitcast [32 x <2 x i64>]* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %4) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %4, i8 -86, i64 512, i1 false)
  %5 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 0
  %6 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 4
  %7 = bitcast <2 x i64>* %6 to <4 x i32>*
  %8 = load <4 x i32>, <4 x i32>* %7, align 16
  %9 = ashr <4 x i32> %8, <i32 31, i32 31, i32 31, i32 31>
  %10 = xor <4 x i32> %9, %8
  %11 = sub <4 x i32> %10, %9
  %12 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %13 = bitcast <4 x i32> %12 to <2 x i64>
  %14 = shufflevector <4 x i32> %9, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %15 = bitcast <4 x i32> %14 to <2 x i64>
  %16 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %17 = bitcast <4 x i32> %16 to <2 x i64>
  %18 = shufflevector <4 x i32> %11, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %19 = bitcast <4 x i32> %18 to <2 x i64>
  %20 = and <2 x i64> %19, <i64 4294967295, i64 4294967295>
  %21 = mul nuw nsw <2 x i64> %20, <i64 12784, i64 12784>
  %22 = xor <2 x i64> %21, %15
  %23 = and <2 x i64> %17, <i64 4294967295, i64 4294967295>
  %24 = mul nuw nsw <2 x i64> %23, <i64 12784, i64 12784>
  %25 = xor <2 x i64> %24, %13
  %26 = sub <2 x i64> <i64 32768, i64 32768>, %15
  %27 = add <2 x i64> %22, %26
  %28 = bitcast <2 x i64> %27 to <16 x i8>
  %29 = shufflevector <16 x i8> %28, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %30 = sub <2 x i64> <i64 32768, i64 32768>, %13
  %31 = add <2 x i64> %25, %30
  %32 = bitcast <2 x i64> %31 to <16 x i8>
  %33 = shufflevector <16 x i8> %32, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %34 = bitcast <16 x i8> %29 to <4 x i32>
  %35 = bitcast <16 x i8> %33 to <4 x i32>
  %36 = shufflevector <4 x i32> %34, <4 x i32> %35, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %37 = shufflevector <4 x i32> %34, <4 x i32> %35, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %38 = shufflevector <4 x i32> %36, <4 x i32> %37, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %39 = mul nuw nsw <2 x i64> %20, <i64 64276, i64 64276>
  %40 = xor <2 x i64> %39, %15
  %41 = mul nuw nsw <2 x i64> %23, <i64 64276, i64 64276>
  %42 = xor <2 x i64> %41, %13
  %43 = add <2 x i64> %40, %26
  %44 = bitcast <2 x i64> %43 to <16 x i8>
  %45 = shufflevector <16 x i8> %44, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %46 = add <2 x i64> %42, %30
  %47 = bitcast <2 x i64> %46 to <16 x i8>
  %48 = shufflevector <16 x i8> %47, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %49 = bitcast <16 x i8> %45 to <4 x i32>
  %50 = bitcast <16 x i8> %48 to <4 x i32>
  %51 = shufflevector <4 x i32> %49, <4 x i32> %50, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %52 = shufflevector <4 x i32> %49, <4 x i32> %50, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %53 = shufflevector <4 x i32> %51, <4 x i32> %52, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %54 = bitcast <2 x i64>* %0 to <4 x i32>*
  %55 = load <4 x i32>, <4 x i32>* %54, align 16
  %56 = ashr <4 x i32> %55, <i32 31, i32 31, i32 31, i32 31>
  %57 = xor <4 x i32> %56, %55
  %58 = sub <4 x i32> %57, %56
  %59 = shufflevector <4 x i32> %56, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %60 = bitcast <4 x i32> %59 to <2 x i64>
  %61 = shufflevector <4 x i32> %56, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %62 = bitcast <4 x i32> %61 to <2 x i64>
  %63 = shufflevector <4 x i32> %58, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %64 = bitcast <4 x i32> %63 to <2 x i64>
  %65 = shufflevector <4 x i32> %58, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %66 = bitcast <4 x i32> %65 to <2 x i64>
  %67 = and <2 x i64> %66, <i64 4294967295, i64 4294967295>
  %68 = mul nuw nsw <2 x i64> %67, <i64 46340, i64 46340>
  %69 = xor <2 x i64> %68, %62
  %70 = and <2 x i64> %64, <i64 4294967295, i64 4294967295>
  %71 = mul nuw nsw <2 x i64> %70, <i64 46340, i64 46340>
  %72 = xor <2 x i64> %71, %60
  %73 = sub <2 x i64> <i64 32768, i64 32768>, %62
  %74 = add <2 x i64> %73, %69
  %75 = bitcast <2 x i64> %74 to <16 x i8>
  %76 = shufflevector <16 x i8> %75, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %77 = sub <2 x i64> <i64 32768, i64 32768>, %60
  %78 = add <2 x i64> %77, %72
  %79 = bitcast <2 x i64> %78 to <16 x i8>
  %80 = shufflevector <16 x i8> %79, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %81 = bitcast <16 x i8> %76 to <4 x i32>
  %82 = bitcast <16 x i8> %80 to <4 x i32>
  %83 = shufflevector <4 x i32> %81, <4 x i32> %82, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %84 = shufflevector <4 x i32> %81, <4 x i32> %82, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %85 = shufflevector <4 x i32> %83, <4 x i32> %84, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %86 = ashr <4 x i32> %53, <i32 31, i32 31, i32 31, i32 31>
  %87 = xor <4 x i32> %86, %53
  %88 = sub <4 x i32> %87, %86
  %89 = shufflevector <4 x i32> %86, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %90 = bitcast <4 x i32> %89 to <2 x i64>
  %91 = shufflevector <4 x i32> %86, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %92 = bitcast <4 x i32> %91 to <2 x i64>
  %93 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %94 = bitcast <4 x i32> %93 to <2 x i64>
  %95 = shufflevector <4 x i32> %88, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %96 = bitcast <4 x i32> %95 to <2 x i64>
  %97 = ashr <4 x i32> %38, <i32 31, i32 31, i32 31, i32 31>
  %98 = xor <4 x i32> %97, %38
  %99 = sub <4 x i32> %98, %97
  %100 = shufflevector <4 x i32> %97, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %101 = bitcast <4 x i32> %100 to <2 x i64>
  %102 = shufflevector <4 x i32> %97, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %103 = bitcast <4 x i32> %102 to <2 x i64>
  %104 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %105 = bitcast <4 x i32> %104 to <2 x i64>
  %106 = shufflevector <4 x i32> %99, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %107 = bitcast <4 x i32> %106 to <2 x i64>
  %108 = and <2 x i64> %96, <i64 4294967295, i64 4294967295>
  %109 = mul nuw nsw <2 x i64> %108, <i64 46340, i64 46340>
  %110 = xor <2 x i64> %109, %92
  %111 = and <2 x i64> %94, <i64 4294967295, i64 4294967295>
  %112 = mul nuw nsw <2 x i64> %111, <i64 46340, i64 46340>
  %113 = xor <2 x i64> %112, %90
  %114 = and <2 x i64> %107, <i64 4294967295, i64 4294967295>
  %115 = mul nuw nsw <2 x i64> %114, <i64 46340, i64 46340>
  %116 = xor <2 x i64> %115, %103
  %117 = and <2 x i64> %105, <i64 4294967295, i64 4294967295>
  %118 = mul nuw nsw <2 x i64> %117, <i64 46340, i64 46340>
  %119 = xor <2 x i64> %118, %101
  %120 = sub <2 x i64> <i64 32768, i64 32768>, %92
  %121 = add <2 x i64> %120, %103
  %122 = add <2 x i64> %121, %110
  %123 = sub <2 x i64> %122, %116
  %124 = bitcast <2 x i64> %123 to <16 x i8>
  %125 = shufflevector <16 x i8> %124, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %126 = sub <2 x i64> <i64 32768, i64 32768>, %90
  %127 = add <2 x i64> %126, %101
  %128 = add <2 x i64> %127, %113
  %129 = sub <2 x i64> %128, %119
  %130 = bitcast <2 x i64> %129 to <16 x i8>
  %131 = shufflevector <16 x i8> %130, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %132 = sub <2 x i64> %120, %103
  %133 = add <2 x i64> %132, %116
  %134 = add <2 x i64> %133, %110
  %135 = bitcast <2 x i64> %134 to <16 x i8>
  %136 = shufflevector <16 x i8> %135, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %137 = sub <2 x i64> %126, %101
  %138 = add <2 x i64> %137, %119
  %139 = add <2 x i64> %138, %113
  %140 = bitcast <2 x i64> %139 to <16 x i8>
  %141 = shufflevector <16 x i8> %140, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %142 = bitcast <16 x i8> %125 to <4 x i32>
  %143 = bitcast <16 x i8> %131 to <4 x i32>
  %144 = shufflevector <4 x i32> %142, <4 x i32> %143, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %145 = shufflevector <4 x i32> %142, <4 x i32> %143, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %146 = shufflevector <4 x i32> %144, <4 x i32> %145, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %147 = bitcast <16 x i8> %136 to <4 x i32>
  %148 = bitcast <16 x i8> %141 to <4 x i32>
  %149 = shufflevector <4 x i32> %147, <4 x i32> %148, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %150 = shufflevector <4 x i32> %147, <4 x i32> %148, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %151 = shufflevector <4 x i32> %149, <4 x i32> %150, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %152 = add <4 x i32> %85, %53
  %153 = add <4 x i32> %151, %85
  %154 = add <4 x i32> %146, %85
  %155 = add <4 x i32> %85, %38
  %156 = sub <4 x i32> %85, %38
  %157 = sub <4 x i32> %85, %146
  %158 = sub <4 x i32> %85, %151
  %159 = sub <4 x i32> %85, %53
  %160 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 2
  %161 = bitcast <2 x i64>* %160 to <4 x i32>*
  %162 = load <4 x i32>, <4 x i32>* %161, align 16
  %163 = ashr <4 x i32> %162, <i32 31, i32 31, i32 31, i32 31>
  %164 = xor <4 x i32> %163, %162
  %165 = sub <4 x i32> %164, %163
  %166 = shufflevector <4 x i32> %163, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %167 = bitcast <4 x i32> %166 to <2 x i64>
  %168 = shufflevector <4 x i32> %163, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %169 = bitcast <4 x i32> %168 to <2 x i64>
  %170 = shufflevector <4 x i32> %165, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %171 = bitcast <4 x i32> %170 to <2 x i64>
  %172 = shufflevector <4 x i32> %165, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %173 = bitcast <4 x i32> %172 to <2 x i64>
  %174 = and <2 x i64> %173, <i64 4294967295, i64 4294967295>
  %175 = mul nuw nsw <2 x i64> %174, <i64 6424, i64 6424>
  %176 = xor <2 x i64> %175, %169
  %177 = and <2 x i64> %171, <i64 4294967295, i64 4294967295>
  %178 = mul nuw nsw <2 x i64> %177, <i64 6424, i64 6424>
  %179 = xor <2 x i64> %178, %167
  %180 = sub <2 x i64> <i64 32768, i64 32768>, %169
  %181 = add <2 x i64> %176, %180
  %182 = bitcast <2 x i64> %181 to <16 x i8>
  %183 = shufflevector <16 x i8> %182, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %184 = sub <2 x i64> <i64 32768, i64 32768>, %167
  %185 = add <2 x i64> %179, %184
  %186 = bitcast <2 x i64> %185 to <16 x i8>
  %187 = shufflevector <16 x i8> %186, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %188 = bitcast <16 x i8> %183 to <4 x i32>
  %189 = bitcast <16 x i8> %187 to <4 x i32>
  %190 = shufflevector <4 x i32> %188, <4 x i32> %189, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %191 = shufflevector <4 x i32> %188, <4 x i32> %189, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %192 = shufflevector <4 x i32> %190, <4 x i32> %191, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %193 = mul nuw nsw <2 x i64> %174, <i64 65220, i64 65220>
  %194 = xor <2 x i64> %193, %169
  %195 = mul nuw nsw <2 x i64> %177, <i64 65220, i64 65220>
  %196 = xor <2 x i64> %195, %167
  %197 = add <2 x i64> %194, %180
  %198 = bitcast <2 x i64> %197 to <16 x i8>
  %199 = shufflevector <16 x i8> %198, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %200 = add <2 x i64> %196, %184
  %201 = bitcast <2 x i64> %200 to <16 x i8>
  %202 = shufflevector <16 x i8> %201, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %203 = bitcast <16 x i8> %199 to <4 x i32>
  %204 = bitcast <16 x i8> %202 to <4 x i32>
  %205 = shufflevector <4 x i32> %203, <4 x i32> %204, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %206 = shufflevector <4 x i32> %203, <4 x i32> %204, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %207 = shufflevector <4 x i32> %205, <4 x i32> %206, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %208 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 6
  %209 = bitcast <2 x i64>* %208 to <4 x i32>*
  %210 = load <4 x i32>, <4 x i32>* %209, align 16
  %211 = ashr <4 x i32> %210, <i32 31, i32 31, i32 31, i32 31>
  %212 = xor <4 x i32> %211, %210
  %213 = sub <4 x i32> %212, %211
  %214 = shufflevector <4 x i32> %211, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %215 = bitcast <4 x i32> %214 to <2 x i64>
  %216 = shufflevector <4 x i32> %211, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %217 = bitcast <4 x i32> %216 to <2 x i64>
  %218 = shufflevector <4 x i32> %213, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %219 = bitcast <4 x i32> %218 to <2 x i64>
  %220 = shufflevector <4 x i32> %213, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %221 = bitcast <4 x i32> %220 to <2 x i64>
  %222 = and <2 x i64> %221, <i64 4294967295, i64 4294967295>
  %223 = mul nuw nsw <2 x i64> %222, <i64 19024, i64 19024>
  %224 = xor <2 x i64> %223, %217
  %225 = and <2 x i64> %219, <i64 4294967295, i64 4294967295>
  %226 = mul nuw nsw <2 x i64> %225, <i64 19024, i64 19024>
  %227 = xor <2 x i64> %226, %215
  %228 = add <2 x i64> %217, <i64 32768, i64 32768>
  %229 = sub <2 x i64> %228, %224
  %230 = bitcast <2 x i64> %229 to <16 x i8>
  %231 = shufflevector <16 x i8> %230, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %232 = add <2 x i64> %215, <i64 32768, i64 32768>
  %233 = sub <2 x i64> %232, %227
  %234 = bitcast <2 x i64> %233 to <16 x i8>
  %235 = shufflevector <16 x i8> %234, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %236 = bitcast <16 x i8> %231 to <4 x i32>
  %237 = bitcast <16 x i8> %235 to <4 x i32>
  %238 = shufflevector <4 x i32> %236, <4 x i32> %237, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %239 = shufflevector <4 x i32> %236, <4 x i32> %237, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %240 = shufflevector <4 x i32> %238, <4 x i32> %239, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %241 = mul nuw nsw <2 x i64> %222, <i64 62716, i64 62716>
  %242 = xor <2 x i64> %241, %217
  %243 = mul nuw nsw <2 x i64> %225, <i64 62716, i64 62716>
  %244 = xor <2 x i64> %243, %215
  %245 = sub <2 x i64> <i64 32768, i64 32768>, %217
  %246 = add <2 x i64> %245, %242
  %247 = bitcast <2 x i64> %246 to <16 x i8>
  %248 = shufflevector <16 x i8> %247, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %249 = sub <2 x i64> <i64 32768, i64 32768>, %215
  %250 = add <2 x i64> %249, %244
  %251 = bitcast <2 x i64> %250 to <16 x i8>
  %252 = shufflevector <16 x i8> %251, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %253 = bitcast <16 x i8> %248 to <4 x i32>
  %254 = bitcast <16 x i8> %252 to <4 x i32>
  %255 = shufflevector <4 x i32> %253, <4 x i32> %254, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %256 = shufflevector <4 x i32> %253, <4 x i32> %254, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %257 = shufflevector <4 x i32> %255, <4 x i32> %256, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %258 = sub <4 x i32> zeroinitializer, %240
  %259 = sub <4 x i32> zeroinitializer, %257
  %260 = ashr <4 x i32> %207, <i32 31, i32 31, i32 31, i32 31>
  %261 = xor <4 x i32> %260, %207
  %262 = sub <4 x i32> %261, %260
  %263 = shufflevector <4 x i32> %260, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %264 = bitcast <4 x i32> %263 to <2 x i64>
  %265 = shufflevector <4 x i32> %260, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %266 = bitcast <4 x i32> %265 to <2 x i64>
  %267 = shufflevector <4 x i32> %262, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %268 = bitcast <4 x i32> %267 to <2 x i64>
  %269 = shufflevector <4 x i32> %262, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %270 = bitcast <4 x i32> %269 to <2 x i64>
  %271 = ashr <4 x i32> %192, <i32 31, i32 31, i32 31, i32 31>
  %272 = xor <4 x i32> %271, %192
  %273 = sub <4 x i32> %272, %271
  %274 = shufflevector <4 x i32> %271, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %275 = bitcast <4 x i32> %274 to <2 x i64>
  %276 = shufflevector <4 x i32> %271, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %277 = bitcast <4 x i32> %276 to <2 x i64>
  %278 = shufflevector <4 x i32> %273, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %279 = bitcast <4 x i32> %278 to <2 x i64>
  %280 = shufflevector <4 x i32> %273, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %281 = bitcast <4 x i32> %280 to <2 x i64>
  %282 = and <2 x i64> %270, <i64 4294967295, i64 4294967295>
  %283 = mul nuw nsw <2 x i64> %282, <i64 60548, i64 60548>
  %284 = xor <2 x i64> %283, %266
  %285 = and <2 x i64> %268, <i64 4294967295, i64 4294967295>
  %286 = mul nuw nsw <2 x i64> %285, <i64 60548, i64 60548>
  %287 = xor <2 x i64> %286, %264
  %288 = mul nuw nsw <2 x i64> %282, <i64 25080, i64 25080>
  %289 = xor <2 x i64> %288, %266
  %290 = mul nuw nsw <2 x i64> %285, <i64 25080, i64 25080>
  %291 = xor <2 x i64> %290, %264
  %292 = and <2 x i64> %281, <i64 4294967295, i64 4294967295>
  %293 = mul nuw nsw <2 x i64> %292, <i64 25080, i64 25080>
  %294 = xor <2 x i64> %293, %277
  %295 = and <2 x i64> %279, <i64 4294967295, i64 4294967295>
  %296 = mul nuw nsw <2 x i64> %295, <i64 25080, i64 25080>
  %297 = xor <2 x i64> %296, %275
  %298 = mul nuw nsw <2 x i64> %292, <i64 60548, i64 60548>
  %299 = xor <2 x i64> %298, %277
  %300 = mul nuw nsw <2 x i64> %295, <i64 60548, i64 60548>
  %301 = xor <2 x i64> %300, %275
  %302 = sub <2 x i64> <i64 32768, i64 32768>, %266
  %303 = add <2 x i64> %302, %277
  %304 = add <2 x i64> %303, %289
  %305 = sub <2 x i64> %304, %299
  %306 = bitcast <2 x i64> %305 to <16 x i8>
  %307 = shufflevector <16 x i8> %306, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %308 = sub <2 x i64> <i64 32768, i64 32768>, %264
  %309 = add <2 x i64> %308, %275
  %310 = add <2 x i64> %309, %291
  %311 = sub <2 x i64> %310, %301
  %312 = bitcast <2 x i64> %311 to <16 x i8>
  %313 = shufflevector <16 x i8> %312, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %314 = sub <2 x i64> %302, %277
  %315 = add <2 x i64> %314, %284
  %316 = add <2 x i64> %315, %294
  %317 = bitcast <2 x i64> %316 to <16 x i8>
  %318 = shufflevector <16 x i8> %317, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %319 = sub <2 x i64> %308, %275
  %320 = add <2 x i64> %319, %287
  %321 = add <2 x i64> %320, %297
  %322 = bitcast <2 x i64> %321 to <16 x i8>
  %323 = shufflevector <16 x i8> %322, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %324 = bitcast <16 x i8> %307 to <4 x i32>
  %325 = bitcast <16 x i8> %313 to <4 x i32>
  %326 = shufflevector <4 x i32> %324, <4 x i32> %325, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %327 = shufflevector <4 x i32> %324, <4 x i32> %325, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %328 = shufflevector <4 x i32> %326, <4 x i32> %327, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %329 = bitcast <16 x i8> %318 to <4 x i32>
  %330 = bitcast <16 x i8> %323 to <4 x i32>
  %331 = shufflevector <4 x i32> %329, <4 x i32> %330, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %332 = shufflevector <4 x i32> %329, <4 x i32> %330, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %333 = shufflevector <4 x i32> %331, <4 x i32> %332, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %334 = ashr <4 x i32> %258, <i32 31, i32 31, i32 31, i32 31>
  %335 = xor <4 x i32> %334, %258
  %336 = sub <4 x i32> %335, %334
  %337 = shufflevector <4 x i32> %334, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %338 = bitcast <4 x i32> %337 to <2 x i64>
  %339 = shufflevector <4 x i32> %334, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %340 = bitcast <4 x i32> %339 to <2 x i64>
  %341 = shufflevector <4 x i32> %336, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %342 = bitcast <4 x i32> %341 to <2 x i64>
  %343 = shufflevector <4 x i32> %336, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %344 = bitcast <4 x i32> %343 to <2 x i64>
  %345 = ashr <4 x i32> %259, <i32 31, i32 31, i32 31, i32 31>
  %346 = xor <4 x i32> %345, %259
  %347 = sub <4 x i32> %346, %345
  %348 = shufflevector <4 x i32> %345, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %349 = bitcast <4 x i32> %348 to <2 x i64>
  %350 = shufflevector <4 x i32> %345, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %351 = bitcast <4 x i32> %350 to <2 x i64>
  %352 = shufflevector <4 x i32> %347, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %353 = bitcast <4 x i32> %352 to <2 x i64>
  %354 = shufflevector <4 x i32> %347, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %355 = bitcast <4 x i32> %354 to <2 x i64>
  %356 = and <2 x i64> %344, <i64 4294967295, i64 4294967295>
  %357 = mul nuw nsw <2 x i64> %356, <i64 25080, i64 25080>
  %358 = xor <2 x i64> %357, %340
  %359 = and <2 x i64> %342, <i64 4294967295, i64 4294967295>
  %360 = mul nuw nsw <2 x i64> %359, <i64 25080, i64 25080>
  %361 = xor <2 x i64> %360, %338
  %362 = mul nuw nsw <2 x i64> %356, <i64 60548, i64 60548>
  %363 = xor <2 x i64> %362, %340
  %364 = mul nuw nsw <2 x i64> %359, <i64 60548, i64 60548>
  %365 = xor <2 x i64> %364, %338
  %366 = and <2 x i64> %355, <i64 4294967295, i64 4294967295>
  %367 = mul nuw nsw <2 x i64> %366, <i64 60548, i64 60548>
  %368 = xor <2 x i64> %367, %351
  %369 = and <2 x i64> %353, <i64 4294967295, i64 4294967295>
  %370 = mul nuw nsw <2 x i64> %369, <i64 60548, i64 60548>
  %371 = xor <2 x i64> %370, %349
  %372 = mul nuw nsw <2 x i64> %366, <i64 25080, i64 25080>
  %373 = xor <2 x i64> %372, %351
  %374 = mul nuw nsw <2 x i64> %369, <i64 25080, i64 25080>
  %375 = xor <2 x i64> %374, %349
  %376 = sub <2 x i64> <i64 32768, i64 32768>, %340
  %377 = add <2 x i64> %376, %351
  %378 = add <2 x i64> %377, %363
  %379 = sub <2 x i64> %378, %373
  %380 = bitcast <2 x i64> %379 to <16 x i8>
  %381 = shufflevector <16 x i8> %380, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %382 = sub <2 x i64> <i64 32768, i64 32768>, %338
  %383 = add <2 x i64> %382, %349
  %384 = add <2 x i64> %383, %365
  %385 = sub <2 x i64> %384, %375
  %386 = bitcast <2 x i64> %385 to <16 x i8>
  %387 = shufflevector <16 x i8> %386, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %388 = sub <2 x i64> %376, %351
  %389 = add <2 x i64> %388, %368
  %390 = add <2 x i64> %389, %358
  %391 = bitcast <2 x i64> %390 to <16 x i8>
  %392 = shufflevector <16 x i8> %391, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %393 = sub <2 x i64> %382, %349
  %394 = add <2 x i64> %393, %371
  %395 = add <2 x i64> %394, %361
  %396 = bitcast <2 x i64> %395 to <16 x i8>
  %397 = shufflevector <16 x i8> %396, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %398 = bitcast <16 x i8> %381 to <4 x i32>
  %399 = bitcast <16 x i8> %387 to <4 x i32>
  %400 = shufflevector <4 x i32> %398, <4 x i32> %399, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %401 = shufflevector <4 x i32> %398, <4 x i32> %399, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %402 = shufflevector <4 x i32> %400, <4 x i32> %401, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %403 = bitcast <16 x i8> %392 to <4 x i32>
  %404 = bitcast <16 x i8> %397 to <4 x i32>
  %405 = shufflevector <4 x i32> %403, <4 x i32> %404, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %406 = shufflevector <4 x i32> %403, <4 x i32> %404, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %407 = shufflevector <4 x i32> %405, <4 x i32> %406, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %408 = add <4 x i32> %240, %192
  %409 = add <4 x i32> %407, %328
  %410 = sub <4 x i32> %328, %407
  %411 = sub <4 x i32> %192, %240
  %412 = sub <4 x i32> %207, %257
  %413 = sub <4 x i32> %333, %402
  %414 = add <4 x i32> %402, %333
  %415 = add <4 x i32> %257, %207
  %416 = ashr <4 x i32> %413, <i32 31, i32 31, i32 31, i32 31>
  %417 = xor <4 x i32> %416, %413
  %418 = sub <4 x i32> %417, %416
  %419 = shufflevector <4 x i32> %416, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %420 = bitcast <4 x i32> %419 to <2 x i64>
  %421 = shufflevector <4 x i32> %416, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %422 = bitcast <4 x i32> %421 to <2 x i64>
  %423 = shufflevector <4 x i32> %418, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %424 = bitcast <4 x i32> %423 to <2 x i64>
  %425 = shufflevector <4 x i32> %418, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %426 = bitcast <4 x i32> %425 to <2 x i64>
  %427 = ashr <4 x i32> %410, <i32 31, i32 31, i32 31, i32 31>
  %428 = xor <4 x i32> %427, %410
  %429 = sub <4 x i32> %428, %427
  %430 = shufflevector <4 x i32> %427, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %431 = bitcast <4 x i32> %430 to <2 x i64>
  %432 = shufflevector <4 x i32> %427, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %433 = bitcast <4 x i32> %432 to <2 x i64>
  %434 = shufflevector <4 x i32> %429, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %435 = bitcast <4 x i32> %434 to <2 x i64>
  %436 = shufflevector <4 x i32> %429, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %437 = bitcast <4 x i32> %436 to <2 x i64>
  %438 = and <2 x i64> %426, <i64 4294967295, i64 4294967295>
  %439 = mul nuw nsw <2 x i64> %438, <i64 46340, i64 46340>
  %440 = xor <2 x i64> %439, %422
  %441 = and <2 x i64> %424, <i64 4294967295, i64 4294967295>
  %442 = mul nuw nsw <2 x i64> %441, <i64 46340, i64 46340>
  %443 = xor <2 x i64> %442, %420
  %444 = and <2 x i64> %437, <i64 4294967295, i64 4294967295>
  %445 = mul nuw nsw <2 x i64> %444, <i64 46340, i64 46340>
  %446 = xor <2 x i64> %445, %433
  %447 = and <2 x i64> %435, <i64 4294967295, i64 4294967295>
  %448 = mul nuw nsw <2 x i64> %447, <i64 46340, i64 46340>
  %449 = xor <2 x i64> %448, %431
  %450 = sub <2 x i64> <i64 32768, i64 32768>, %422
  %451 = add <2 x i64> %450, %433
  %452 = add <2 x i64> %451, %440
  %453 = sub <2 x i64> %452, %446
  %454 = bitcast <2 x i64> %453 to <16 x i8>
  %455 = shufflevector <16 x i8> %454, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %456 = sub <2 x i64> <i64 32768, i64 32768>, %420
  %457 = add <2 x i64> %456, %431
  %458 = add <2 x i64> %457, %443
  %459 = sub <2 x i64> %458, %449
  %460 = bitcast <2 x i64> %459 to <16 x i8>
  %461 = shufflevector <16 x i8> %460, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %462 = sub <2 x i64> %450, %433
  %463 = add <2 x i64> %462, %440
  %464 = add <2 x i64> %463, %446
  %465 = bitcast <2 x i64> %464 to <16 x i8>
  %466 = shufflevector <16 x i8> %465, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %467 = sub <2 x i64> %456, %431
  %468 = add <2 x i64> %467, %443
  %469 = add <2 x i64> %468, %449
  %470 = bitcast <2 x i64> %469 to <16 x i8>
  %471 = shufflevector <16 x i8> %470, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %472 = bitcast <16 x i8> %455 to <4 x i32>
  %473 = bitcast <16 x i8> %461 to <4 x i32>
  %474 = shufflevector <4 x i32> %472, <4 x i32> %473, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %475 = shufflevector <4 x i32> %472, <4 x i32> %473, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %476 = shufflevector <4 x i32> %474, <4 x i32> %475, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %477 = bitcast <16 x i8> %466 to <4 x i32>
  %478 = bitcast <16 x i8> %471 to <4 x i32>
  %479 = shufflevector <4 x i32> %477, <4 x i32> %478, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %480 = shufflevector <4 x i32> %477, <4 x i32> %478, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %481 = shufflevector <4 x i32> %479, <4 x i32> %480, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %482 = ashr <4 x i32> %412, <i32 31, i32 31, i32 31, i32 31>
  %483 = xor <4 x i32> %482, %412
  %484 = sub <4 x i32> %483, %482
  %485 = shufflevector <4 x i32> %482, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %486 = bitcast <4 x i32> %485 to <2 x i64>
  %487 = shufflevector <4 x i32> %482, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %488 = bitcast <4 x i32> %487 to <2 x i64>
  %489 = shufflevector <4 x i32> %484, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %490 = bitcast <4 x i32> %489 to <2 x i64>
  %491 = shufflevector <4 x i32> %484, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %492 = bitcast <4 x i32> %491 to <2 x i64>
  %493 = ashr <4 x i32> %411, <i32 31, i32 31, i32 31, i32 31>
  %494 = xor <4 x i32> %493, %411
  %495 = sub <4 x i32> %494, %493
  %496 = shufflevector <4 x i32> %493, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %497 = bitcast <4 x i32> %496 to <2 x i64>
  %498 = shufflevector <4 x i32> %493, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %499 = bitcast <4 x i32> %498 to <2 x i64>
  %500 = shufflevector <4 x i32> %495, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %501 = bitcast <4 x i32> %500 to <2 x i64>
  %502 = shufflevector <4 x i32> %495, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %503 = bitcast <4 x i32> %502 to <2 x i64>
  %504 = and <2 x i64> %492, <i64 4294967295, i64 4294967295>
  %505 = mul nuw nsw <2 x i64> %504, <i64 46340, i64 46340>
  %506 = xor <2 x i64> %505, %488
  %507 = and <2 x i64> %490, <i64 4294967295, i64 4294967295>
  %508 = mul nuw nsw <2 x i64> %507, <i64 46340, i64 46340>
  %509 = xor <2 x i64> %508, %486
  %510 = and <2 x i64> %503, <i64 4294967295, i64 4294967295>
  %511 = mul nuw nsw <2 x i64> %510, <i64 46340, i64 46340>
  %512 = xor <2 x i64> %511, %499
  %513 = and <2 x i64> %501, <i64 4294967295, i64 4294967295>
  %514 = mul nuw nsw <2 x i64> %513, <i64 46340, i64 46340>
  %515 = xor <2 x i64> %514, %497
  %516 = sub <2 x i64> <i64 32768, i64 32768>, %488
  %517 = add <2 x i64> %516, %499
  %518 = add <2 x i64> %517, %506
  %519 = sub <2 x i64> %518, %512
  %520 = bitcast <2 x i64> %519 to <16 x i8>
  %521 = shufflevector <16 x i8> %520, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %522 = sub <2 x i64> <i64 32768, i64 32768>, %486
  %523 = add <2 x i64> %522, %497
  %524 = add <2 x i64> %523, %509
  %525 = sub <2 x i64> %524, %515
  %526 = bitcast <2 x i64> %525 to <16 x i8>
  %527 = shufflevector <16 x i8> %526, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %528 = sub <2 x i64> %516, %499
  %529 = add <2 x i64> %528, %512
  %530 = add <2 x i64> %529, %506
  %531 = bitcast <2 x i64> %530 to <16 x i8>
  %532 = shufflevector <16 x i8> %531, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %533 = sub <2 x i64> %522, %497
  %534 = add <2 x i64> %533, %515
  %535 = add <2 x i64> %534, %509
  %536 = bitcast <2 x i64> %535 to <16 x i8>
  %537 = shufflevector <16 x i8> %536, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %538 = bitcast <16 x i8> %521 to <4 x i32>
  %539 = bitcast <16 x i8> %527 to <4 x i32>
  %540 = shufflevector <4 x i32> %538, <4 x i32> %539, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %541 = shufflevector <4 x i32> %538, <4 x i32> %539, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %542 = shufflevector <4 x i32> %540, <4 x i32> %541, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %543 = bitcast <16 x i8> %532 to <4 x i32>
  %544 = bitcast <16 x i8> %537 to <4 x i32>
  %545 = shufflevector <4 x i32> %543, <4 x i32> %544, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %546 = shufflevector <4 x i32> %543, <4 x i32> %544, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %547 = shufflevector <4 x i32> %545, <4 x i32> %546, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %548 = add <4 x i32> %415, %152
  %549 = bitcast [32 x <2 x i64>]* %3 to <4 x i32>*
  store <4 x i32> %548, <4 x i32>* %549, align 16
  %550 = sub <4 x i32> %152, %415
  %551 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 15
  %552 = bitcast <2 x i64>* %551 to <4 x i32>*
  store <4 x i32> %550, <4 x i32>* %552, align 16
  %553 = add <4 x i32> %414, %153
  %554 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 1
  %555 = bitcast <2 x i64>* %554 to <4 x i32>*
  store <4 x i32> %553, <4 x i32>* %555, align 16
  %556 = sub <4 x i32> %153, %414
  %557 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 14
  %558 = bitcast <2 x i64>* %557 to <4 x i32>*
  store <4 x i32> %556, <4 x i32>* %558, align 16
  %559 = add <4 x i32> %481, %154
  %560 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 2
  %561 = bitcast <2 x i64>* %560 to <4 x i32>*
  store <4 x i32> %559, <4 x i32>* %561, align 16
  %562 = sub <4 x i32> %154, %481
  %563 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 13
  %564 = bitcast <2 x i64>* %563 to <4 x i32>*
  store <4 x i32> %562, <4 x i32>* %564, align 16
  %565 = add <4 x i32> %547, %155
  %566 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 3
  %567 = bitcast <2 x i64>* %566 to <4 x i32>*
  store <4 x i32> %565, <4 x i32>* %567, align 16
  %568 = sub <4 x i32> %155, %547
  %569 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 12
  %570 = bitcast <2 x i64>* %569 to <4 x i32>*
  store <4 x i32> %568, <4 x i32>* %570, align 16
  %571 = add <4 x i32> %542, %156
  %572 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 4
  %573 = bitcast <2 x i64>* %572 to <4 x i32>*
  store <4 x i32> %571, <4 x i32>* %573, align 16
  %574 = sub <4 x i32> %156, %542
  %575 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 11
  %576 = bitcast <2 x i64>* %575 to <4 x i32>*
  store <4 x i32> %574, <4 x i32>* %576, align 16
  %577 = add <4 x i32> %476, %157
  %578 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 5
  %579 = bitcast <2 x i64>* %578 to <4 x i32>*
  store <4 x i32> %577, <4 x i32>* %579, align 16
  %580 = sub <4 x i32> %157, %476
  %581 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 10
  %582 = bitcast <2 x i64>* %581 to <4 x i32>*
  store <4 x i32> %580, <4 x i32>* %582, align 16
  %583 = add <4 x i32> %409, %158
  %584 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 6
  %585 = bitcast <2 x i64>* %584 to <4 x i32>*
  store <4 x i32> %583, <4 x i32>* %585, align 16
  %586 = sub <4 x i32> %158, %409
  %587 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 9
  %588 = bitcast <2 x i64>* %587 to <4 x i32>*
  store <4 x i32> %586, <4 x i32>* %588, align 16
  %589 = add <4 x i32> %408, %159
  %590 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 7
  %591 = bitcast <2 x i64>* %590 to <4 x i32>*
  store <4 x i32> %589, <4 x i32>* %591, align 16
  %592 = sub <4 x i32> %159, %408
  %593 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 8
  %594 = bitcast <2 x i64>* %593 to <4 x i32>*
  store <4 x i32> %592, <4 x i32>* %594, align 16
  %595 = bitcast [32 x <2 x i64>]* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 512, i8* nonnull %595) #7
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %595, i8 -86, i64 496, i1 false) #7
  %596 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 1
  %597 = bitcast <2 x i64>* %596 to <4 x i32>*
  %598 = load <4 x i32>, <4 x i32>* %597, align 16
  %599 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 16
  %600 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 31
  %601 = ashr <4 x i32> %598, <i32 31, i32 31, i32 31, i32 31>
  %602 = xor <4 x i32> %601, %598
  %603 = sub <4 x i32> %602, %601
  %604 = shufflevector <4 x i32> %601, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %605 = bitcast <4 x i32> %604 to <2 x i64>
  %606 = shufflevector <4 x i32> %601, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %607 = bitcast <4 x i32> %606 to <2 x i64>
  %608 = shufflevector <4 x i32> %603, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %609 = bitcast <4 x i32> %608 to <2 x i64>
  %610 = shufflevector <4 x i32> %603, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %611 = bitcast <4 x i32> %610 to <2 x i64>
  %612 = and <2 x i64> %611, <i64 4294967295, i64 4294967295>
  %613 = mul nuw nsw <2 x i64> %612, <i64 3216, i64 3216>
  %614 = xor <2 x i64> %613, %607
  %615 = and <2 x i64> %609, <i64 4294967295, i64 4294967295>
  %616 = mul nuw nsw <2 x i64> %615, <i64 3216, i64 3216>
  %617 = xor <2 x i64> %616, %605
  %618 = sub <2 x i64> <i64 32768, i64 32768>, %607
  %619 = add <2 x i64> %614, %618
  %620 = bitcast <2 x i64> %619 to <16 x i8>
  %621 = shufflevector <16 x i8> %620, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %622 = sub <2 x i64> <i64 32768, i64 32768>, %605
  %623 = add <2 x i64> %617, %622
  %624 = bitcast <2 x i64> %623 to <16 x i8>
  %625 = shufflevector <16 x i8> %624, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %626 = bitcast <16 x i8> %621 to <4 x i32>
  %627 = bitcast <16 x i8> %625 to <4 x i32>
  %628 = shufflevector <4 x i32> %626, <4 x i32> %627, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %629 = shufflevector <4 x i32> %626, <4 x i32> %627, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %630 = shufflevector <4 x i32> %628, <4 x i32> %629, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %631 = bitcast <2 x i64>* %599 to <4 x i32>*
  store <4 x i32> %630, <4 x i32>* %631, align 16
  %632 = mul nuw nsw <2 x i64> %612, <i64 65456, i64 65456>
  %633 = xor <2 x i64> %632, %607
  %634 = mul nuw nsw <2 x i64> %615, <i64 65456, i64 65456>
  %635 = xor <2 x i64> %634, %605
  %636 = add <2 x i64> %633, %618
  %637 = bitcast <2 x i64> %636 to <16 x i8>
  %638 = shufflevector <16 x i8> %637, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %639 = add <2 x i64> %635, %622
  %640 = bitcast <2 x i64> %639 to <16 x i8>
  %641 = shufflevector <16 x i8> %640, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %642 = bitcast <16 x i8> %638 to <4 x i32>
  %643 = bitcast <16 x i8> %641 to <4 x i32>
  %644 = shufflevector <4 x i32> %642, <4 x i32> %643, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %645 = shufflevector <4 x i32> %642, <4 x i32> %643, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %646 = shufflevector <4 x i32> %644, <4 x i32> %645, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %647 = bitcast <2 x i64>* %600 to <4 x i32>*
  store <4 x i32> %646, <4 x i32>* %647, align 16
  %648 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 7
  %649 = bitcast <2 x i64>* %648 to <4 x i32>*
  %650 = load <4 x i32>, <4 x i32>* %649, align 16
  %651 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 19
  %652 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 28
  %653 = ashr <4 x i32> %650, <i32 31, i32 31, i32 31, i32 31>
  %654 = xor <4 x i32> %653, %650
  %655 = sub <4 x i32> %654, %653
  %656 = shufflevector <4 x i32> %653, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %657 = bitcast <4 x i32> %656 to <2 x i64>
  %658 = shufflevector <4 x i32> %653, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %659 = bitcast <4 x i32> %658 to <2 x i64>
  %660 = shufflevector <4 x i32> %655, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %661 = bitcast <4 x i32> %660 to <2 x i64>
  %662 = shufflevector <4 x i32> %655, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %663 = bitcast <4 x i32> %662 to <2 x i64>
  %664 = and <2 x i64> %663, <i64 4294967295, i64 4294967295>
  %665 = mul nuw nsw <2 x i64> %664, <i64 22080, i64 22080>
  %666 = xor <2 x i64> %665, %659
  %667 = and <2 x i64> %661, <i64 4294967295, i64 4294967295>
  %668 = mul nuw nsw <2 x i64> %667, <i64 22080, i64 22080>
  %669 = xor <2 x i64> %668, %657
  %670 = add <2 x i64> %659, <i64 32768, i64 32768>
  %671 = sub <2 x i64> %670, %666
  %672 = bitcast <2 x i64> %671 to <16 x i8>
  %673 = shufflevector <16 x i8> %672, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %674 = add <2 x i64> %657, <i64 32768, i64 32768>
  %675 = sub <2 x i64> %674, %669
  %676 = bitcast <2 x i64> %675 to <16 x i8>
  %677 = shufflevector <16 x i8> %676, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %678 = bitcast <16 x i8> %673 to <4 x i32>
  %679 = bitcast <16 x i8> %677 to <4 x i32>
  %680 = shufflevector <4 x i32> %678, <4 x i32> %679, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %681 = shufflevector <4 x i32> %678, <4 x i32> %679, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %682 = shufflevector <4 x i32> %680, <4 x i32> %681, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %683 = bitcast <2 x i64>* %651 to <4 x i32>*
  store <4 x i32> %682, <4 x i32>* %683, align 16
  %684 = mul nuw nsw <2 x i64> %664, <i64 61704, i64 61704>
  %685 = xor <2 x i64> %684, %659
  %686 = mul nuw nsw <2 x i64> %667, <i64 61704, i64 61704>
  %687 = xor <2 x i64> %686, %657
  %688 = sub <2 x i64> <i64 32768, i64 32768>, %659
  %689 = add <2 x i64> %688, %685
  %690 = bitcast <2 x i64> %689 to <16 x i8>
  %691 = shufflevector <16 x i8> %690, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %692 = sub <2 x i64> <i64 32768, i64 32768>, %657
  %693 = add <2 x i64> %692, %687
  %694 = bitcast <2 x i64> %693 to <16 x i8>
  %695 = shufflevector <16 x i8> %694, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %696 = bitcast <16 x i8> %691 to <4 x i32>
  %697 = bitcast <16 x i8> %695 to <4 x i32>
  %698 = shufflevector <4 x i32> %696, <4 x i32> %697, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %699 = shufflevector <4 x i32> %696, <4 x i32> %697, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %700 = shufflevector <4 x i32> %698, <4 x i32> %699, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %701 = bitcast <2 x i64>* %652 to <4 x i32>*
  store <4 x i32> %700, <4 x i32>* %701, align 16
  %702 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 5
  %703 = bitcast <2 x i64>* %702 to <4 x i32>*
  %704 = load <4 x i32>, <4 x i32>* %703, align 16
  %705 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 20
  %706 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 27
  %707 = ashr <4 x i32> %704, <i32 31, i32 31, i32 31, i32 31>
  %708 = xor <4 x i32> %707, %704
  %709 = sub <4 x i32> %708, %707
  %710 = shufflevector <4 x i32> %707, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %711 = bitcast <4 x i32> %710 to <2 x i64>
  %712 = shufflevector <4 x i32> %707, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %713 = bitcast <4 x i32> %712 to <2 x i64>
  %714 = shufflevector <4 x i32> %709, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %715 = bitcast <4 x i32> %714 to <2 x i64>
  %716 = shufflevector <4 x i32> %709, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %717 = bitcast <4 x i32> %716 to <2 x i64>
  %718 = and <2 x i64> %717, <i64 4294967295, i64 4294967295>
  %719 = mul nuw nsw <2 x i64> %718, <i64 15924, i64 15924>
  %720 = xor <2 x i64> %719, %713
  %721 = and <2 x i64> %715, <i64 4294967295, i64 4294967295>
  %722 = mul nuw nsw <2 x i64> %721, <i64 15924, i64 15924>
  %723 = xor <2 x i64> %722, %711
  %724 = sub <2 x i64> <i64 32768, i64 32768>, %713
  %725 = add <2 x i64> %720, %724
  %726 = bitcast <2 x i64> %725 to <16 x i8>
  %727 = shufflevector <16 x i8> %726, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %728 = sub <2 x i64> <i64 32768, i64 32768>, %711
  %729 = add <2 x i64> %723, %728
  %730 = bitcast <2 x i64> %729 to <16 x i8>
  %731 = shufflevector <16 x i8> %730, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %732 = bitcast <16 x i8> %727 to <4 x i32>
  %733 = bitcast <16 x i8> %731 to <4 x i32>
  %734 = shufflevector <4 x i32> %732, <4 x i32> %733, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %735 = shufflevector <4 x i32> %732, <4 x i32> %733, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %736 = shufflevector <4 x i32> %734, <4 x i32> %735, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %737 = bitcast <2 x i64>* %705 to <4 x i32>*
  store <4 x i32> %736, <4 x i32>* %737, align 16
  %738 = mul nuw nsw <2 x i64> %718, <i64 63572, i64 63572>
  %739 = xor <2 x i64> %738, %713
  %740 = mul nuw nsw <2 x i64> %721, <i64 63572, i64 63572>
  %741 = xor <2 x i64> %740, %711
  %742 = add <2 x i64> %739, %724
  %743 = bitcast <2 x i64> %742 to <16 x i8>
  %744 = shufflevector <16 x i8> %743, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %745 = add <2 x i64> %741, %728
  %746 = bitcast <2 x i64> %745 to <16 x i8>
  %747 = shufflevector <16 x i8> %746, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %748 = bitcast <16 x i8> %744 to <4 x i32>
  %749 = bitcast <16 x i8> %747 to <4 x i32>
  %750 = shufflevector <4 x i32> %748, <4 x i32> %749, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %751 = shufflevector <4 x i32> %748, <4 x i32> %749, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %752 = shufflevector <4 x i32> %750, <4 x i32> %751, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %753 = bitcast <2 x i64>* %706 to <4 x i32>*
  store <4 x i32> %752, <4 x i32>* %753, align 16
  %754 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 3
  %755 = bitcast <2 x i64>* %754 to <4 x i32>*
  %756 = load <4 x i32>, <4 x i32>* %755, align 16
  %757 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 23
  %758 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 24
  %759 = ashr <4 x i32> %756, <i32 31, i32 31, i32 31, i32 31>
  %760 = xor <4 x i32> %759, %756
  %761 = sub <4 x i32> %760, %759
  %762 = shufflevector <4 x i32> %759, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %763 = bitcast <4 x i32> %762 to <2 x i64>
  %764 = shufflevector <4 x i32> %759, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %765 = bitcast <4 x i32> %764 to <2 x i64>
  %766 = shufflevector <4 x i32> %761, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %767 = bitcast <4 x i32> %766 to <2 x i64>
  %768 = shufflevector <4 x i32> %761, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %769 = bitcast <4 x i32> %768 to <2 x i64>
  %770 = and <2 x i64> %769, <i64 4294967295, i64 4294967295>
  %771 = mul nuw nsw <2 x i64> %770, <i64 9616, i64 9616>
  %772 = xor <2 x i64> %771, %765
  %773 = and <2 x i64> %767, <i64 4294967295, i64 4294967295>
  %774 = mul nuw nsw <2 x i64> %773, <i64 9616, i64 9616>
  %775 = xor <2 x i64> %774, %763
  %776 = add <2 x i64> %765, <i64 32768, i64 32768>
  %777 = sub <2 x i64> %776, %772
  %778 = bitcast <2 x i64> %777 to <16 x i8>
  %779 = shufflevector <16 x i8> %778, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %780 = add <2 x i64> %763, <i64 32768, i64 32768>
  %781 = sub <2 x i64> %780, %775
  %782 = bitcast <2 x i64> %781 to <16 x i8>
  %783 = shufflevector <16 x i8> %782, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %784 = bitcast <16 x i8> %779 to <4 x i32>
  %785 = bitcast <16 x i8> %783 to <4 x i32>
  %786 = shufflevector <4 x i32> %784, <4 x i32> %785, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %787 = shufflevector <4 x i32> %784, <4 x i32> %785, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %788 = shufflevector <4 x i32> %786, <4 x i32> %787, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %789 = bitcast <2 x i64>* %757 to <4 x i32>*
  store <4 x i32> %788, <4 x i32>* %789, align 16
  %790 = mul nuw nsw <2 x i64> %770, <i64 64828, i64 64828>
  %791 = xor <2 x i64> %790, %765
  %792 = mul nuw nsw <2 x i64> %773, <i64 64828, i64 64828>
  %793 = xor <2 x i64> %792, %763
  %794 = sub <2 x i64> <i64 32768, i64 32768>, %765
  %795 = add <2 x i64> %794, %791
  %796 = bitcast <2 x i64> %795 to <16 x i8>
  %797 = shufflevector <16 x i8> %796, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %798 = sub <2 x i64> <i64 32768, i64 32768>, %763
  %799 = add <2 x i64> %798, %793
  %800 = bitcast <2 x i64> %799 to <16 x i8>
  %801 = shufflevector <16 x i8> %800, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %802 = bitcast <16 x i8> %797 to <4 x i32>
  %803 = bitcast <16 x i8> %801 to <4 x i32>
  %804 = shufflevector <4 x i32> %802, <4 x i32> %803, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %805 = shufflevector <4 x i32> %802, <4 x i32> %803, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %806 = shufflevector <4 x i32> %804, <4 x i32> %805, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %807 = bitcast <2 x i64>* %758 to <4 x i32>*
  store <4 x i32> %806, <4 x i32>* %807, align 16
  %808 = sub <4 x i32> zeroinitializer, %682
  %809 = sub <4 x i32> zeroinitializer, %788
  %810 = sub <4 x i32> zeroinitializer, %806
  %811 = sub <4 x i32> zeroinitializer, %700
  %812 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 17
  %813 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 30
  %814 = ashr <4 x i32> %646, <i32 31, i32 31, i32 31, i32 31>
  %815 = xor <4 x i32> %814, %646
  %816 = sub <4 x i32> %815, %814
  %817 = shufflevector <4 x i32> %814, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %818 = bitcast <4 x i32> %817 to <2 x i64>
  %819 = shufflevector <4 x i32> %814, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %820 = bitcast <4 x i32> %819 to <2 x i64>
  %821 = shufflevector <4 x i32> %816, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %822 = bitcast <4 x i32> %821 to <2 x i64>
  %823 = shufflevector <4 x i32> %816, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %824 = bitcast <4 x i32> %823 to <2 x i64>
  %825 = ashr <4 x i32> %630, <i32 31, i32 31, i32 31, i32 31>
  %826 = xor <4 x i32> %825, %630
  %827 = sub <4 x i32> %826, %825
  %828 = shufflevector <4 x i32> %825, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %829 = bitcast <4 x i32> %828 to <2 x i64>
  %830 = shufflevector <4 x i32> %825, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %831 = bitcast <4 x i32> %830 to <2 x i64>
  %832 = shufflevector <4 x i32> %827, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %833 = bitcast <4 x i32> %832 to <2 x i64>
  %834 = shufflevector <4 x i32> %827, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %835 = bitcast <4 x i32> %834 to <2 x i64>
  %836 = and <2 x i64> %824, <i64 4294967295, i64 4294967295>
  %837 = mul nuw nsw <2 x i64> %836, <i64 64276, i64 64276>
  %838 = xor <2 x i64> %837, %820
  %839 = and <2 x i64> %822, <i64 4294967295, i64 4294967295>
  %840 = mul nuw nsw <2 x i64> %839, <i64 64276, i64 64276>
  %841 = xor <2 x i64> %840, %818
  %842 = mul nuw nsw <2 x i64> %836, <i64 12784, i64 12784>
  %843 = xor <2 x i64> %842, %820
  %844 = mul nuw nsw <2 x i64> %839, <i64 12784, i64 12784>
  %845 = xor <2 x i64> %844, %818
  %846 = and <2 x i64> %835, <i64 4294967295, i64 4294967295>
  %847 = mul nuw nsw <2 x i64> %846, <i64 12784, i64 12784>
  %848 = xor <2 x i64> %847, %831
  %849 = and <2 x i64> %833, <i64 4294967295, i64 4294967295>
  %850 = mul nuw nsw <2 x i64> %849, <i64 12784, i64 12784>
  %851 = xor <2 x i64> %850, %829
  %852 = mul nuw nsw <2 x i64> %846, <i64 64276, i64 64276>
  %853 = xor <2 x i64> %852, %831
  %854 = mul nuw nsw <2 x i64> %849, <i64 64276, i64 64276>
  %855 = xor <2 x i64> %854, %829
  %856 = sub <2 x i64> <i64 32768, i64 32768>, %820
  %857 = add <2 x i64> %856, %831
  %858 = sub <2 x i64> %857, %853
  %859 = add <2 x i64> %858, %843
  %860 = bitcast <2 x i64> %859 to <16 x i8>
  %861 = shufflevector <16 x i8> %860, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %862 = sub <2 x i64> <i64 32768, i64 32768>, %818
  %863 = add <2 x i64> %862, %829
  %864 = sub <2 x i64> %863, %855
  %865 = add <2 x i64> %864, %845
  %866 = bitcast <2 x i64> %865 to <16 x i8>
  %867 = shufflevector <16 x i8> %866, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %868 = sub <2 x i64> %856, %831
  %869 = add <2 x i64> %868, %848
  %870 = add <2 x i64> %869, %838
  %871 = bitcast <2 x i64> %870 to <16 x i8>
  %872 = shufflevector <16 x i8> %871, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %873 = sub <2 x i64> %862, %829
  %874 = add <2 x i64> %873, %851
  %875 = add <2 x i64> %874, %841
  %876 = bitcast <2 x i64> %875 to <16 x i8>
  %877 = shufflevector <16 x i8> %876, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %878 = bitcast <16 x i8> %861 to <4 x i32>
  %879 = bitcast <16 x i8> %867 to <4 x i32>
  %880 = shufflevector <4 x i32> %878, <4 x i32> %879, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %881 = shufflevector <4 x i32> %878, <4 x i32> %879, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %882 = shufflevector <4 x i32> %880, <4 x i32> %881, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %883 = bitcast <2 x i64>* %812 to <4 x i32>*
  store <4 x i32> %882, <4 x i32>* %883, align 16
  %884 = bitcast <16 x i8> %872 to <4 x i32>
  %885 = bitcast <16 x i8> %877 to <4 x i32>
  %886 = shufflevector <4 x i32> %884, <4 x i32> %885, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %887 = shufflevector <4 x i32> %884, <4 x i32> %885, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %888 = shufflevector <4 x i32> %886, <4 x i32> %887, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %889 = bitcast <2 x i64>* %813 to <4 x i32>*
  store <4 x i32> %888, <4 x i32>* %889, align 16
  %890 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 29
  %891 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 18
  %892 = ashr <4 x i32> %808, <i32 31, i32 31, i32 31, i32 31>
  %893 = xor <4 x i32> %892, %808
  %894 = sub <4 x i32> %893, %892
  %895 = shufflevector <4 x i32> %892, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %896 = bitcast <4 x i32> %895 to <2 x i64>
  %897 = shufflevector <4 x i32> %892, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %898 = bitcast <4 x i32> %897 to <2 x i64>
  %899 = shufflevector <4 x i32> %894, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %900 = bitcast <4 x i32> %899 to <2 x i64>
  %901 = shufflevector <4 x i32> %894, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %902 = bitcast <4 x i32> %901 to <2 x i64>
  %903 = ashr <4 x i32> %811, <i32 31, i32 31, i32 31, i32 31>
  %904 = xor <4 x i32> %903, %811
  %905 = sub <4 x i32> %904, %903
  %906 = shufflevector <4 x i32> %903, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %907 = bitcast <4 x i32> %906 to <2 x i64>
  %908 = shufflevector <4 x i32> %903, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %909 = bitcast <4 x i32> %908 to <2 x i64>
  %910 = shufflevector <4 x i32> %905, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %911 = bitcast <4 x i32> %910 to <2 x i64>
  %912 = shufflevector <4 x i32> %905, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %913 = bitcast <4 x i32> %912 to <2 x i64>
  %914 = and <2 x i64> %902, <i64 4294967295, i64 4294967295>
  %915 = mul nuw nsw <2 x i64> %914, <i64 12784, i64 12784>
  %916 = xor <2 x i64> %915, %898
  %917 = and <2 x i64> %900, <i64 4294967295, i64 4294967295>
  %918 = mul nuw nsw <2 x i64> %917, <i64 12784, i64 12784>
  %919 = xor <2 x i64> %918, %896
  %920 = mul nuw nsw <2 x i64> %914, <i64 64276, i64 64276>
  %921 = xor <2 x i64> %920, %898
  %922 = mul nuw nsw <2 x i64> %917, <i64 64276, i64 64276>
  %923 = xor <2 x i64> %922, %896
  %924 = and <2 x i64> %913, <i64 4294967295, i64 4294967295>
  %925 = mul nuw nsw <2 x i64> %924, <i64 64276, i64 64276>
  %926 = xor <2 x i64> %925, %909
  %927 = and <2 x i64> %911, <i64 4294967295, i64 4294967295>
  %928 = mul nuw nsw <2 x i64> %927, <i64 64276, i64 64276>
  %929 = xor <2 x i64> %928, %907
  %930 = mul nuw nsw <2 x i64> %924, <i64 12784, i64 12784>
  %931 = xor <2 x i64> %930, %909
  %932 = mul nuw nsw <2 x i64> %927, <i64 12784, i64 12784>
  %933 = xor <2 x i64> %932, %907
  %934 = sub <2 x i64> <i64 32768, i64 32768>, %898
  %935 = add <2 x i64> %934, %909
  %936 = add <2 x i64> %935, %921
  %937 = sub <2 x i64> %936, %931
  %938 = bitcast <2 x i64> %937 to <16 x i8>
  %939 = shufflevector <16 x i8> %938, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %940 = sub <2 x i64> <i64 32768, i64 32768>, %896
  %941 = add <2 x i64> %940, %907
  %942 = add <2 x i64> %941, %923
  %943 = sub <2 x i64> %942, %933
  %944 = bitcast <2 x i64> %943 to <16 x i8>
  %945 = shufflevector <16 x i8> %944, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %946 = sub <2 x i64> %934, %909
  %947 = add <2 x i64> %946, %916
  %948 = add <2 x i64> %947, %926
  %949 = bitcast <2 x i64> %948 to <16 x i8>
  %950 = shufflevector <16 x i8> %949, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %951 = sub <2 x i64> %940, %907
  %952 = add <2 x i64> %951, %919
  %953 = add <2 x i64> %952, %929
  %954 = bitcast <2 x i64> %953 to <16 x i8>
  %955 = shufflevector <16 x i8> %954, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %956 = bitcast <16 x i8> %939 to <4 x i32>
  %957 = bitcast <16 x i8> %945 to <4 x i32>
  %958 = shufflevector <4 x i32> %956, <4 x i32> %957, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %959 = shufflevector <4 x i32> %956, <4 x i32> %957, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %960 = shufflevector <4 x i32> %958, <4 x i32> %959, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %961 = bitcast <2 x i64>* %890 to <4 x i32>*
  store <4 x i32> %960, <4 x i32>* %961, align 16
  %962 = bitcast <16 x i8> %950 to <4 x i32>
  %963 = bitcast <16 x i8> %955 to <4 x i32>
  %964 = shufflevector <4 x i32> %962, <4 x i32> %963, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %965 = shufflevector <4 x i32> %962, <4 x i32> %963, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %966 = shufflevector <4 x i32> %964, <4 x i32> %965, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %967 = bitcast <2 x i64>* %891 to <4 x i32>*
  store <4 x i32> %966, <4 x i32>* %967, align 16
  %968 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 21
  %969 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 26
  %970 = ashr <4 x i32> %752, <i32 31, i32 31, i32 31, i32 31>
  %971 = xor <4 x i32> %970, %752
  %972 = sub <4 x i32> %971, %970
  %973 = shufflevector <4 x i32> %970, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %974 = bitcast <4 x i32> %973 to <2 x i64>
  %975 = shufflevector <4 x i32> %970, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %976 = bitcast <4 x i32> %975 to <2 x i64>
  %977 = shufflevector <4 x i32> %972, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %978 = bitcast <4 x i32> %977 to <2 x i64>
  %979 = shufflevector <4 x i32> %972, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %980 = bitcast <4 x i32> %979 to <2 x i64>
  %981 = ashr <4 x i32> %736, <i32 31, i32 31, i32 31, i32 31>
  %982 = xor <4 x i32> %981, %736
  %983 = sub <4 x i32> %982, %981
  %984 = shufflevector <4 x i32> %981, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %985 = bitcast <4 x i32> %984 to <2 x i64>
  %986 = shufflevector <4 x i32> %981, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %987 = bitcast <4 x i32> %986 to <2 x i64>
  %988 = shufflevector <4 x i32> %983, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %989 = bitcast <4 x i32> %988 to <2 x i64>
  %990 = shufflevector <4 x i32> %983, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %991 = bitcast <4 x i32> %990 to <2 x i64>
  %992 = and <2 x i64> %980, <i64 4294967295, i64 4294967295>
  %993 = mul nuw nsw <2 x i64> %992, <i64 36408, i64 36408>
  %994 = xor <2 x i64> %993, %976
  %995 = and <2 x i64> %978, <i64 4294967295, i64 4294967295>
  %996 = mul nuw nsw <2 x i64> %995, <i64 36408, i64 36408>
  %997 = xor <2 x i64> %996, %974
  %998 = mul nuw nsw <2 x i64> %992, <i64 54492, i64 54492>
  %999 = xor <2 x i64> %998, %976
  %1000 = mul nuw nsw <2 x i64> %995, <i64 54492, i64 54492>
  %1001 = xor <2 x i64> %1000, %974
  %1002 = and <2 x i64> %991, <i64 4294967295, i64 4294967295>
  %1003 = mul nuw nsw <2 x i64> %1002, <i64 54492, i64 54492>
  %1004 = xor <2 x i64> %1003, %987
  %1005 = and <2 x i64> %989, <i64 4294967295, i64 4294967295>
  %1006 = mul nuw nsw <2 x i64> %1005, <i64 54492, i64 54492>
  %1007 = xor <2 x i64> %1006, %985
  %1008 = mul nuw nsw <2 x i64> %1002, <i64 36408, i64 36408>
  %1009 = xor <2 x i64> %1008, %987
  %1010 = mul nuw nsw <2 x i64> %1005, <i64 36408, i64 36408>
  %1011 = xor <2 x i64> %1010, %985
  %1012 = sub <2 x i64> <i64 32768, i64 32768>, %976
  %1013 = add <2 x i64> %1012, %987
  %1014 = sub <2 x i64> %1013, %1009
  %1015 = add <2 x i64> %1014, %999
  %1016 = bitcast <2 x i64> %1015 to <16 x i8>
  %1017 = shufflevector <16 x i8> %1016, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1018 = sub <2 x i64> <i64 32768, i64 32768>, %974
  %1019 = add <2 x i64> %1018, %985
  %1020 = sub <2 x i64> %1019, %1011
  %1021 = add <2 x i64> %1020, %1001
  %1022 = bitcast <2 x i64> %1021 to <16 x i8>
  %1023 = shufflevector <16 x i8> %1022, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1024 = sub <2 x i64> %1012, %987
  %1025 = add <2 x i64> %1024, %1004
  %1026 = add <2 x i64> %1025, %994
  %1027 = bitcast <2 x i64> %1026 to <16 x i8>
  %1028 = shufflevector <16 x i8> %1027, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1029 = sub <2 x i64> %1018, %985
  %1030 = add <2 x i64> %1029, %1007
  %1031 = add <2 x i64> %1030, %997
  %1032 = bitcast <2 x i64> %1031 to <16 x i8>
  %1033 = shufflevector <16 x i8> %1032, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1034 = bitcast <16 x i8> %1017 to <4 x i32>
  %1035 = bitcast <16 x i8> %1023 to <4 x i32>
  %1036 = shufflevector <4 x i32> %1034, <4 x i32> %1035, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1037 = shufflevector <4 x i32> %1034, <4 x i32> %1035, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1038 = shufflevector <4 x i32> %1036, <4 x i32> %1037, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1039 = bitcast <2 x i64>* %968 to <4 x i32>*
  store <4 x i32> %1038, <4 x i32>* %1039, align 16
  %1040 = bitcast <16 x i8> %1028 to <4 x i32>
  %1041 = bitcast <16 x i8> %1033 to <4 x i32>
  %1042 = shufflevector <4 x i32> %1040, <4 x i32> %1041, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1043 = shufflevector <4 x i32> %1040, <4 x i32> %1041, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1044 = shufflevector <4 x i32> %1042, <4 x i32> %1043, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1045 = bitcast <2 x i64>* %969 to <4 x i32>*
  store <4 x i32> %1044, <4 x i32>* %1045, align 16
  %1046 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 25
  %1047 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 22
  %1048 = ashr <4 x i32> %809, <i32 31, i32 31, i32 31, i32 31>
  %1049 = xor <4 x i32> %1048, %809
  %1050 = sub <4 x i32> %1049, %1048
  %1051 = shufflevector <4 x i32> %1048, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1052 = bitcast <4 x i32> %1051 to <2 x i64>
  %1053 = shufflevector <4 x i32> %1048, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1054 = bitcast <4 x i32> %1053 to <2 x i64>
  %1055 = shufflevector <4 x i32> %1050, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1056 = bitcast <4 x i32> %1055 to <2 x i64>
  %1057 = shufflevector <4 x i32> %1050, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1058 = bitcast <4 x i32> %1057 to <2 x i64>
  %1059 = ashr <4 x i32> %810, <i32 31, i32 31, i32 31, i32 31>
  %1060 = xor <4 x i32> %1059, %810
  %1061 = sub <4 x i32> %1060, %1059
  %1062 = shufflevector <4 x i32> %1059, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1063 = bitcast <4 x i32> %1062 to <2 x i64>
  %1064 = shufflevector <4 x i32> %1059, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1065 = bitcast <4 x i32> %1064 to <2 x i64>
  %1066 = shufflevector <4 x i32> %1061, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %1067 = bitcast <4 x i32> %1066 to <2 x i64>
  %1068 = shufflevector <4 x i32> %1061, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %1069 = bitcast <4 x i32> %1068 to <2 x i64>
  %1070 = and <2 x i64> %1058, <i64 4294967295, i64 4294967295>
  %1071 = mul nuw nsw <2 x i64> %1070, <i64 54492, i64 54492>
  %1072 = xor <2 x i64> %1071, %1054
  %1073 = and <2 x i64> %1056, <i64 4294967295, i64 4294967295>
  %1074 = mul nuw nsw <2 x i64> %1073, <i64 54492, i64 54492>
  %1075 = xor <2 x i64> %1074, %1052
  %1076 = mul nuw nsw <2 x i64> %1070, <i64 36408, i64 36408>
  %1077 = xor <2 x i64> %1076, %1054
  %1078 = mul nuw nsw <2 x i64> %1073, <i64 36408, i64 36408>
  %1079 = xor <2 x i64> %1078, %1052
  %1080 = and <2 x i64> %1069, <i64 4294967295, i64 4294967295>
  %1081 = mul nuw nsw <2 x i64> %1080, <i64 36408, i64 36408>
  %1082 = xor <2 x i64> %1081, %1065
  %1083 = and <2 x i64> %1067, <i64 4294967295, i64 4294967295>
  %1084 = mul nuw nsw <2 x i64> %1083, <i64 36408, i64 36408>
  %1085 = xor <2 x i64> %1084, %1063
  %1086 = mul nuw nsw <2 x i64> %1080, <i64 54492, i64 54492>
  %1087 = xor <2 x i64> %1086, %1065
  %1088 = mul nuw nsw <2 x i64> %1083, <i64 54492, i64 54492>
  %1089 = xor <2 x i64> %1088, %1063
  %1090 = sub <2 x i64> <i64 32768, i64 32768>, %1054
  %1091 = add <2 x i64> %1090, %1065
  %1092 = add <2 x i64> %1091, %1077
  %1093 = sub <2 x i64> %1092, %1087
  %1094 = bitcast <2 x i64> %1093 to <16 x i8>
  %1095 = shufflevector <16 x i8> %1094, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1096 = sub <2 x i64> <i64 32768, i64 32768>, %1052
  %1097 = add <2 x i64> %1096, %1063
  %1098 = add <2 x i64> %1097, %1079
  %1099 = sub <2 x i64> %1098, %1089
  %1100 = bitcast <2 x i64> %1099 to <16 x i8>
  %1101 = shufflevector <16 x i8> %1100, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1102 = sub <2 x i64> %1090, %1065
  %1103 = add <2 x i64> %1102, %1072
  %1104 = add <2 x i64> %1103, %1082
  %1105 = bitcast <2 x i64> %1104 to <16 x i8>
  %1106 = shufflevector <16 x i8> %1105, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1107 = sub <2 x i64> %1096, %1063
  %1108 = add <2 x i64> %1107, %1075
  %1109 = add <2 x i64> %1108, %1085
  %1110 = bitcast <2 x i64> %1109 to <16 x i8>
  %1111 = shufflevector <16 x i8> %1110, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %1112 = bitcast <16 x i8> %1095 to <4 x i32>
  %1113 = bitcast <16 x i8> %1101 to <4 x i32>
  %1114 = shufflevector <4 x i32> %1112, <4 x i32> %1113, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1115 = shufflevector <4 x i32> %1112, <4 x i32> %1113, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1116 = shufflevector <4 x i32> %1114, <4 x i32> %1115, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1117 = bitcast <2 x i64>* %1046 to <4 x i32>*
  store <4 x i32> %1116, <4 x i32>* %1117, align 16
  %1118 = bitcast <16 x i8> %1106 to <4 x i32>
  %1119 = bitcast <16 x i8> %1111 to <4 x i32>
  %1120 = shufflevector <4 x i32> %1118, <4 x i32> %1119, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %1121 = shufflevector <4 x i32> %1118, <4 x i32> %1119, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %1122 = shufflevector <4 x i32> %1120, <4 x i32> %1121, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %1123 = bitcast <2 x i64>* %1047 to <4 x i32>*
  store <4 x i32> %1122, <4 x i32>* %1123, align 16
  %1124 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %2, i64 0, i64 0
  call fastcc void @highbd_idct32_4x32_quarter_3_4_stage_4_to_7(<2 x i64>* nonnull %1124, <2 x i64>* nonnull %5) #7
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %595) #7
  br label %1125

1125:                                             ; preds = %1125, %1
  %1126 = phi i64 [ 0, %1 ], [ %1142, %1125 ]
  %1127 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 %1126
  %1128 = bitcast <2 x i64>* %1127 to <4 x i32>*
  %1129 = load <4 x i32>, <4 x i32>* %1128, align 16
  %1130 = shl i64 %1126, 32
  %1131 = sub nuw nsw i64 133143986176, %1130
  %1132 = ashr exact i64 %1131, 32
  %1133 = getelementptr inbounds [32 x <2 x i64>], [32 x <2 x i64>]* %3, i64 0, i64 %1132
  %1134 = bitcast <2 x i64>* %1133 to <4 x i32>*
  %1135 = load <4 x i32>, <4 x i32>* %1134, align 16
  %1136 = add <4 x i32> %1135, %1129
  %1137 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %1126
  %1138 = bitcast <2 x i64>* %1137 to <4 x i32>*
  store <4 x i32> %1136, <4 x i32>* %1138, align 16
  %1139 = sub <4 x i32> %1129, %1135
  %1140 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 %1132
  %1141 = bitcast <2 x i64>* %1140 to <4 x i32>*
  store <4 x i32> %1139, <4 x i32>* %1141, align 16
  %1142 = add nuw nsw i64 %1126, 1
  %1143 = icmp eq i64 %1142, 16
  br i1 %1143, label %1144, label %1125

1144:                                             ; preds = %1125
  call void @llvm.lifetime.end.p0i8(i64 512, i8* nonnull %4) #7
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @vpx_highbd_idct32x32_1_add_sse2(i32* nocapture readonly, i16* nocapture, i32, i32) local_unnamed_addr #3 {
  %5 = load i32, i32* %0, align 4
  %6 = sext i32 %5 to i64
  %7 = mul nsw i64 %6, 11585
  %8 = add nsw i64 %7, 8192
  %9 = lshr i64 %8, 14
  %10 = shl i64 %9, 32
  %11 = ashr exact i64 %10, 32
  %12 = mul nsw i64 %11, 11585
  %13 = add nsw i64 %12, 8192
  %14 = lshr i64 %13, 14
  %15 = trunc i64 %14 to i32
  %16 = add nsw i32 %15, 32
  %17 = lshr i32 %16, 6
  %18 = trunc i32 %17 to i16
  %19 = insertelement <8 x i16> undef, i16 %18, i32 0
  %20 = shufflevector <8 x i16> %19, <8 x i16> undef, <8 x i32> zeroinitializer
  %21 = tail call <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, i32 %3) #7
  %22 = add <8 x i16> %21, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %23 = sext i32 %2 to i64
  br label %24

24:                                               ; preds = %24, %4
  %25 = phi i16* [ %1, %4 ], [ %58, %24 ]
  %26 = phi i32 [ 0, %4 ], [ %59, %24 ]
  %27 = bitcast i16* %25 to <8 x i16>*
  %28 = load <8 x i16>, <8 x i16>* %27, align 16
  %29 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %28, <8 x i16> %20) #7
  %30 = icmp sgt <8 x i16> %29, zeroinitializer
  %31 = select <8 x i1> %30, <8 x i16> %29, <8 x i16> zeroinitializer
  %32 = icmp slt <8 x i16> %31, %22
  %33 = select <8 x i1> %32, <8 x i16> %31, <8 x i16> %22
  store <8 x i16> %33, <8 x i16>* %27, align 16
  %34 = getelementptr inbounds i16, i16* %25, i64 8
  %35 = bitcast i16* %34 to <8 x i16>*
  %36 = load <8 x i16>, <8 x i16>* %35, align 16
  %37 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %36, <8 x i16> %20) #7
  %38 = icmp sgt <8 x i16> %37, zeroinitializer
  %39 = select <8 x i1> %38, <8 x i16> %37, <8 x i16> zeroinitializer
  %40 = icmp slt <8 x i16> %39, %22
  %41 = select <8 x i1> %40, <8 x i16> %39, <8 x i16> %22
  store <8 x i16> %41, <8 x i16>* %35, align 16
  %42 = getelementptr inbounds i16, i16* %25, i64 16
  %43 = bitcast i16* %42 to <8 x i16>*
  %44 = load <8 x i16>, <8 x i16>* %43, align 16
  %45 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %44, <8 x i16> %20) #7
  %46 = icmp sgt <8 x i16> %45, zeroinitializer
  %47 = select <8 x i1> %46, <8 x i16> %45, <8 x i16> zeroinitializer
  %48 = icmp slt <8 x i16> %47, %22
  %49 = select <8 x i1> %48, <8 x i16> %47, <8 x i16> %22
  store <8 x i16> %49, <8 x i16>* %43, align 16
  %50 = getelementptr inbounds i16, i16* %25, i64 24
  %51 = bitcast i16* %50 to <8 x i16>*
  %52 = load <8 x i16>, <8 x i16>* %51, align 16
  %53 = tail call <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16> %52, <8 x i16> %20) #7
  %54 = icmp sgt <8 x i16> %53, zeroinitializer
  %55 = select <8 x i1> %54, <8 x i16> %53, <8 x i16> zeroinitializer
  %56 = icmp slt <8 x i16> %55, %22
  %57 = select <8 x i1> %56, <8 x i16> %55, <8 x i16> %22
  store <8 x i16> %57, <8 x i16>* %51, align 16
  %58 = getelementptr inbounds i16, i16* %25, i64 %23
  %59 = add nuw nsw i32 %26, 1
  %60 = icmp eq i32 %59, 32
  br i1 %60, label %61, label %24

61:                                               ; preds = %24
  ret void
}

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #4

; Function Attrs: nounwind readnone speculatable
declare <8 x i16> @llvm.sadd.sat.v8i16(<8 x i16>, <8 x i16>) #5

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pslli.w(<8 x i16>, i32) #4

; Function Attrs: inlinehint nofree norecurse nounwind ssp uwtable
define internal fastcc void @highbd_idct32_4x32_quarter_3_4_stage_4_to_7(<2 x i64>* nocapture, <2 x i64>* nocapture) unnamed_addr #6 {
  %3 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 16
  %4 = bitcast <2 x i64>* %3 to <4 x i32>*
  %5 = load <4 x i32>, <4 x i32>* %4, align 16
  %6 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 19
  %7 = bitcast <2 x i64>* %6 to <4 x i32>*
  %8 = load <4 x i32>, <4 x i32>* %7, align 16
  %9 = add <4 x i32> %8, %5
  %10 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 17
  %11 = bitcast <2 x i64>* %10 to <4 x i32>*
  %12 = load <4 x i32>, <4 x i32>* %11, align 16
  %13 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 18
  %14 = bitcast <2 x i64>* %13 to <4 x i32>*
  %15 = load <4 x i32>, <4 x i32>* %14, align 16
  %16 = add <4 x i32> %15, %12
  %17 = sub <4 x i32> %12, %15
  %18 = sub <4 x i32> %5, %8
  %19 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 20
  %20 = bitcast <2 x i64>* %19 to <4 x i32>*
  %21 = load <4 x i32>, <4 x i32>* %20, align 16
  %22 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 23
  %23 = bitcast <2 x i64>* %22 to <4 x i32>*
  %24 = load <4 x i32>, <4 x i32>* %23, align 16
  %25 = sub <4 x i32> %21, %24
  %26 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 21
  %27 = bitcast <2 x i64>* %26 to <4 x i32>*
  %28 = load <4 x i32>, <4 x i32>* %27, align 16
  %29 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 22
  %30 = bitcast <2 x i64>* %29 to <4 x i32>*
  %31 = load <4 x i32>, <4 x i32>* %30, align 16
  %32 = sub <4 x i32> %28, %31
  %33 = add <4 x i32> %31, %28
  %34 = add <4 x i32> %24, %21
  %35 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 27
  %36 = bitcast <2 x i64>* %35 to <4 x i32>*
  %37 = load <4 x i32>, <4 x i32>* %36, align 16
  %38 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 24
  %39 = bitcast <2 x i64>* %38 to <4 x i32>*
  %40 = load <4 x i32>, <4 x i32>* %39, align 16
  %41 = add <4 x i32> %40, %37
  %42 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 26
  %43 = bitcast <2 x i64>* %42 to <4 x i32>*
  %44 = load <4 x i32>, <4 x i32>* %43, align 16
  %45 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 25
  %46 = bitcast <2 x i64>* %45 to <4 x i32>*
  %47 = load <4 x i32>, <4 x i32>* %46, align 16
  %48 = add <4 x i32> %47, %44
  %49 = sub <4 x i32> %44, %47
  %50 = sub <4 x i32> %37, %40
  %51 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 31
  %52 = bitcast <2 x i64>* %51 to <4 x i32>*
  %53 = load <4 x i32>, <4 x i32>* %52, align 16
  %54 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 28
  %55 = bitcast <2 x i64>* %54 to <4 x i32>*
  %56 = load <4 x i32>, <4 x i32>* %55, align 16
  %57 = sub <4 x i32> %53, %56
  %58 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 30
  %59 = bitcast <2 x i64>* %58 to <4 x i32>*
  %60 = load <4 x i32>, <4 x i32>* %59, align 16
  %61 = getelementptr inbounds <2 x i64>, <2 x i64>* %0, i64 29
  %62 = bitcast <2 x i64>* %61 to <4 x i32>*
  %63 = load <4 x i32>, <4 x i32>* %62, align 16
  %64 = sub <4 x i32> %60, %63
  %65 = add <4 x i32> %63, %60
  %66 = add <4 x i32> %56, %53
  store <4 x i32> %9, <4 x i32>* %4, align 16
  store <4 x i32> %16, <4 x i32>* %11, align 16
  %67 = ashr <4 x i32> %64, <i32 31, i32 31, i32 31, i32 31>
  %68 = xor <4 x i32> %67, %64
  %69 = sub <4 x i32> %68, %67
  %70 = shufflevector <4 x i32> %67, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %71 = bitcast <4 x i32> %70 to <2 x i64>
  %72 = shufflevector <4 x i32> %67, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %73 = bitcast <4 x i32> %72 to <2 x i64>
  %74 = shufflevector <4 x i32> %69, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %75 = bitcast <4 x i32> %74 to <2 x i64>
  %76 = shufflevector <4 x i32> %69, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %77 = bitcast <4 x i32> %76 to <2 x i64>
  %78 = ashr <4 x i32> %17, <i32 31, i32 31, i32 31, i32 31>
  %79 = xor <4 x i32> %78, %17
  %80 = sub <4 x i32> %79, %78
  %81 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %82 = bitcast <4 x i32> %81 to <2 x i64>
  %83 = shufflevector <4 x i32> %78, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %84 = bitcast <4 x i32> %83 to <2 x i64>
  %85 = shufflevector <4 x i32> %80, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %86 = bitcast <4 x i32> %85 to <2 x i64>
  %87 = shufflevector <4 x i32> %80, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %88 = bitcast <4 x i32> %87 to <2 x i64>
  %89 = and <2 x i64> %77, <i64 4294967295, i64 4294967295>
  %90 = mul nuw nsw <2 x i64> %89, <i64 60548, i64 60548>
  %91 = xor <2 x i64> %90, %73
  %92 = and <2 x i64> %75, <i64 4294967295, i64 4294967295>
  %93 = mul nuw nsw <2 x i64> %92, <i64 60548, i64 60548>
  %94 = xor <2 x i64> %93, %71
  %95 = mul nuw nsw <2 x i64> %89, <i64 25080, i64 25080>
  %96 = xor <2 x i64> %95, %73
  %97 = mul nuw nsw <2 x i64> %92, <i64 25080, i64 25080>
  %98 = xor <2 x i64> %97, %71
  %99 = and <2 x i64> %88, <i64 4294967295, i64 4294967295>
  %100 = mul nuw nsw <2 x i64> %99, <i64 25080, i64 25080>
  %101 = xor <2 x i64> %100, %84
  %102 = and <2 x i64> %86, <i64 4294967295, i64 4294967295>
  %103 = mul nuw nsw <2 x i64> %102, <i64 25080, i64 25080>
  %104 = xor <2 x i64> %103, %82
  %105 = mul nuw nsw <2 x i64> %99, <i64 60548, i64 60548>
  %106 = xor <2 x i64> %105, %84
  %107 = mul nuw nsw <2 x i64> %102, <i64 60548, i64 60548>
  %108 = xor <2 x i64> %107, %82
  %109 = sub <2 x i64> <i64 32768, i64 32768>, %73
  %110 = sub <2 x i64> %84, %106
  %111 = add <2 x i64> %110, %109
  %112 = add <2 x i64> %111, %96
  %113 = bitcast <2 x i64> %112 to <16 x i8>
  %114 = shufflevector <16 x i8> %113, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %115 = sub <2 x i64> <i64 32768, i64 32768>, %71
  %116 = sub <2 x i64> %82, %108
  %117 = add <2 x i64> %116, %115
  %118 = add <2 x i64> %117, %98
  %119 = bitcast <2 x i64> %118 to <16 x i8>
  %120 = shufflevector <16 x i8> %119, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %121 = sub <2 x i64> %101, %84
  %122 = add <2 x i64> %121, %109
  %123 = add <2 x i64> %122, %91
  %124 = bitcast <2 x i64> %123 to <16 x i8>
  %125 = shufflevector <16 x i8> %124, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %126 = sub <2 x i64> %104, %82
  %127 = add <2 x i64> %126, %115
  %128 = add <2 x i64> %127, %94
  %129 = bitcast <2 x i64> %128 to <16 x i8>
  %130 = shufflevector <16 x i8> %129, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %131 = bitcast <16 x i8> %114 to <4 x i32>
  %132 = bitcast <16 x i8> %120 to <4 x i32>
  %133 = shufflevector <4 x i32> %131, <4 x i32> %132, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %134 = shufflevector <4 x i32> %131, <4 x i32> %132, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %135 = shufflevector <4 x i32> %133, <4 x i32> %134, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %135, <4 x i32>* %14, align 16
  %136 = bitcast <16 x i8> %125 to <4 x i32>
  %137 = bitcast <16 x i8> %130 to <4 x i32>
  %138 = shufflevector <4 x i32> %136, <4 x i32> %137, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %139 = shufflevector <4 x i32> %136, <4 x i32> %137, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %140 = shufflevector <4 x i32> %138, <4 x i32> %139, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %140, <4 x i32>* %62, align 16
  %141 = ashr <4 x i32> %57, <i32 31, i32 31, i32 31, i32 31>
  %142 = xor <4 x i32> %141, %57
  %143 = sub <4 x i32> %142, %141
  %144 = shufflevector <4 x i32> %141, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %145 = bitcast <4 x i32> %144 to <2 x i64>
  %146 = shufflevector <4 x i32> %141, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %147 = bitcast <4 x i32> %146 to <2 x i64>
  %148 = shufflevector <4 x i32> %143, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %149 = bitcast <4 x i32> %148 to <2 x i64>
  %150 = shufflevector <4 x i32> %143, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %151 = bitcast <4 x i32> %150 to <2 x i64>
  %152 = ashr <4 x i32> %18, <i32 31, i32 31, i32 31, i32 31>
  %153 = xor <4 x i32> %152, %18
  %154 = sub <4 x i32> %153, %152
  %155 = shufflevector <4 x i32> %152, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %156 = bitcast <4 x i32> %155 to <2 x i64>
  %157 = shufflevector <4 x i32> %152, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %158 = bitcast <4 x i32> %157 to <2 x i64>
  %159 = shufflevector <4 x i32> %154, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %160 = bitcast <4 x i32> %159 to <2 x i64>
  %161 = shufflevector <4 x i32> %154, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %162 = bitcast <4 x i32> %161 to <2 x i64>
  %163 = and <2 x i64> %151, <i64 4294967295, i64 4294967295>
  %164 = mul nuw nsw <2 x i64> %163, <i64 60548, i64 60548>
  %165 = xor <2 x i64> %164, %147
  %166 = and <2 x i64> %149, <i64 4294967295, i64 4294967295>
  %167 = mul nuw nsw <2 x i64> %166, <i64 60548, i64 60548>
  %168 = xor <2 x i64> %167, %145
  %169 = mul nuw nsw <2 x i64> %163, <i64 25080, i64 25080>
  %170 = xor <2 x i64> %169, %147
  %171 = mul nuw nsw <2 x i64> %166, <i64 25080, i64 25080>
  %172 = xor <2 x i64> %171, %145
  %173 = and <2 x i64> %162, <i64 4294967295, i64 4294967295>
  %174 = mul nuw nsw <2 x i64> %173, <i64 25080, i64 25080>
  %175 = xor <2 x i64> %174, %158
  %176 = and <2 x i64> %160, <i64 4294967295, i64 4294967295>
  %177 = mul nuw nsw <2 x i64> %176, <i64 25080, i64 25080>
  %178 = xor <2 x i64> %177, %156
  %179 = mul nuw nsw <2 x i64> %173, <i64 60548, i64 60548>
  %180 = xor <2 x i64> %179, %158
  %181 = mul nuw nsw <2 x i64> %176, <i64 60548, i64 60548>
  %182 = xor <2 x i64> %181, %156
  %183 = sub <2 x i64> <i64 32768, i64 32768>, %147
  %184 = sub <2 x i64> %158, %180
  %185 = add <2 x i64> %184, %183
  %186 = add <2 x i64> %185, %170
  %187 = bitcast <2 x i64> %186 to <16 x i8>
  %188 = shufflevector <16 x i8> %187, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %189 = sub <2 x i64> <i64 32768, i64 32768>, %145
  %190 = sub <2 x i64> %156, %182
  %191 = add <2 x i64> %190, %189
  %192 = add <2 x i64> %191, %172
  %193 = bitcast <2 x i64> %192 to <16 x i8>
  %194 = shufflevector <16 x i8> %193, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %195 = sub <2 x i64> %175, %158
  %196 = add <2 x i64> %195, %183
  %197 = add <2 x i64> %196, %165
  %198 = bitcast <2 x i64> %197 to <16 x i8>
  %199 = shufflevector <16 x i8> %198, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %200 = sub <2 x i64> %178, %156
  %201 = add <2 x i64> %200, %189
  %202 = add <2 x i64> %201, %168
  %203 = bitcast <2 x i64> %202 to <16 x i8>
  %204 = shufflevector <16 x i8> %203, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %205 = bitcast <16 x i8> %188 to <4 x i32>
  %206 = bitcast <16 x i8> %194 to <4 x i32>
  %207 = shufflevector <4 x i32> %205, <4 x i32> %206, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %208 = shufflevector <4 x i32> %205, <4 x i32> %206, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %209 = shufflevector <4 x i32> %207, <4 x i32> %208, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %209, <4 x i32>* %7, align 16
  %210 = bitcast <16 x i8> %199 to <4 x i32>
  %211 = bitcast <16 x i8> %204 to <4 x i32>
  %212 = shufflevector <4 x i32> %210, <4 x i32> %211, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %213 = shufflevector <4 x i32> %210, <4 x i32> %211, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %214 = shufflevector <4 x i32> %212, <4 x i32> %213, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %214, <4 x i32>* %55, align 16
  %215 = ashr <4 x i32> %25, <i32 31, i32 31, i32 31, i32 31>
  %216 = xor <4 x i32> %215, %25
  %217 = sub <4 x i32> %216, %215
  %218 = shufflevector <4 x i32> %215, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %219 = bitcast <4 x i32> %218 to <2 x i64>
  %220 = shufflevector <4 x i32> %215, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %221 = bitcast <4 x i32> %220 to <2 x i64>
  %222 = shufflevector <4 x i32> %217, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %223 = bitcast <4 x i32> %222 to <2 x i64>
  %224 = shufflevector <4 x i32> %217, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %225 = bitcast <4 x i32> %224 to <2 x i64>
  %226 = ashr <4 x i32> %50, <i32 31, i32 31, i32 31, i32 31>
  %227 = xor <4 x i32> %226, %50
  %228 = sub <4 x i32> %227, %226
  %229 = shufflevector <4 x i32> %226, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %230 = bitcast <4 x i32> %229 to <2 x i64>
  %231 = shufflevector <4 x i32> %226, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %232 = bitcast <4 x i32> %231 to <2 x i64>
  %233 = shufflevector <4 x i32> %228, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %234 = bitcast <4 x i32> %233 to <2 x i64>
  %235 = shufflevector <4 x i32> %228, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %236 = bitcast <4 x i32> %235 to <2 x i64>
  %237 = and <2 x i64> %225, <i64 4294967295, i64 4294967295>
  %238 = mul nuw nsw <2 x i64> %237, <i64 25080, i64 25080>
  %239 = xor <2 x i64> %238, %221
  %240 = and <2 x i64> %223, <i64 4294967295, i64 4294967295>
  %241 = mul nuw nsw <2 x i64> %240, <i64 25080, i64 25080>
  %242 = xor <2 x i64> %241, %219
  %243 = mul nuw nsw <2 x i64> %237, <i64 60548, i64 60548>
  %244 = xor <2 x i64> %243, %221
  %245 = mul nuw nsw <2 x i64> %240, <i64 60548, i64 60548>
  %246 = xor <2 x i64> %245, %219
  %247 = and <2 x i64> %236, <i64 4294967295, i64 4294967295>
  %248 = mul nuw nsw <2 x i64> %247, <i64 60548, i64 60548>
  %249 = xor <2 x i64> %248, %232
  %250 = and <2 x i64> %234, <i64 4294967295, i64 4294967295>
  %251 = mul nuw nsw <2 x i64> %250, <i64 60548, i64 60548>
  %252 = xor <2 x i64> %251, %230
  %253 = mul nuw nsw <2 x i64> %247, <i64 25080, i64 25080>
  %254 = xor <2 x i64> %253, %232
  %255 = mul nuw nsw <2 x i64> %250, <i64 25080, i64 25080>
  %256 = xor <2 x i64> %255, %230
  %257 = sub <2 x i64> <i64 32768, i64 32768>, %221
  %258 = add <2 x i64> %257, %232
  %259 = add <2 x i64> %258, %244
  %260 = sub <2 x i64> %259, %254
  %261 = bitcast <2 x i64> %260 to <16 x i8>
  %262 = shufflevector <16 x i8> %261, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %263 = sub <2 x i64> <i64 32768, i64 32768>, %219
  %264 = add <2 x i64> %263, %230
  %265 = add <2 x i64> %264, %246
  %266 = sub <2 x i64> %265, %256
  %267 = bitcast <2 x i64> %266 to <16 x i8>
  %268 = shufflevector <16 x i8> %267, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %269 = sub <2 x i64> %257, %232
  %270 = add <2 x i64> %269, %239
  %271 = add <2 x i64> %270, %249
  %272 = bitcast <2 x i64> %271 to <16 x i8>
  %273 = shufflevector <16 x i8> %272, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %274 = sub <2 x i64> %263, %230
  %275 = add <2 x i64> %274, %242
  %276 = add <2 x i64> %275, %252
  %277 = bitcast <2 x i64> %276 to <16 x i8>
  %278 = shufflevector <16 x i8> %277, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %279 = bitcast <16 x i8> %262 to <4 x i32>
  %280 = bitcast <16 x i8> %268 to <4 x i32>
  %281 = shufflevector <4 x i32> %279, <4 x i32> %280, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %282 = shufflevector <4 x i32> %279, <4 x i32> %280, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %283 = shufflevector <4 x i32> %281, <4 x i32> %282, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %283, <4 x i32>* %36, align 16
  %284 = bitcast <16 x i8> %273 to <4 x i32>
  %285 = bitcast <16 x i8> %278 to <4 x i32>
  %286 = shufflevector <4 x i32> %284, <4 x i32> %285, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %287 = shufflevector <4 x i32> %284, <4 x i32> %285, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %288 = shufflevector <4 x i32> %286, <4 x i32> %287, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %288, <4 x i32>* %20, align 16
  %289 = ashr <4 x i32> %32, <i32 31, i32 31, i32 31, i32 31>
  %290 = xor <4 x i32> %289, %32
  %291 = sub <4 x i32> %290, %289
  %292 = shufflevector <4 x i32> %289, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %293 = bitcast <4 x i32> %292 to <2 x i64>
  %294 = shufflevector <4 x i32> %289, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %295 = bitcast <4 x i32> %294 to <2 x i64>
  %296 = shufflevector <4 x i32> %291, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %297 = bitcast <4 x i32> %296 to <2 x i64>
  %298 = shufflevector <4 x i32> %291, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %299 = bitcast <4 x i32> %298 to <2 x i64>
  %300 = ashr <4 x i32> %49, <i32 31, i32 31, i32 31, i32 31>
  %301 = xor <4 x i32> %300, %49
  %302 = sub <4 x i32> %301, %300
  %303 = shufflevector <4 x i32> %300, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %304 = bitcast <4 x i32> %303 to <2 x i64>
  %305 = shufflevector <4 x i32> %300, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %306 = bitcast <4 x i32> %305 to <2 x i64>
  %307 = shufflevector <4 x i32> %302, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %308 = bitcast <4 x i32> %307 to <2 x i64>
  %309 = shufflevector <4 x i32> %302, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %310 = bitcast <4 x i32> %309 to <2 x i64>
  %311 = and <2 x i64> %299, <i64 4294967295, i64 4294967295>
  %312 = mul nuw nsw <2 x i64> %311, <i64 25080, i64 25080>
  %313 = xor <2 x i64> %312, %295
  %314 = and <2 x i64> %297, <i64 4294967295, i64 4294967295>
  %315 = mul nuw nsw <2 x i64> %314, <i64 25080, i64 25080>
  %316 = xor <2 x i64> %315, %293
  %317 = mul nuw nsw <2 x i64> %311, <i64 60548, i64 60548>
  %318 = xor <2 x i64> %317, %295
  %319 = mul nuw nsw <2 x i64> %314, <i64 60548, i64 60548>
  %320 = xor <2 x i64> %319, %293
  %321 = and <2 x i64> %310, <i64 4294967295, i64 4294967295>
  %322 = mul nuw nsw <2 x i64> %321, <i64 60548, i64 60548>
  %323 = xor <2 x i64> %322, %306
  %324 = and <2 x i64> %308, <i64 4294967295, i64 4294967295>
  %325 = mul nuw nsw <2 x i64> %324, <i64 60548, i64 60548>
  %326 = xor <2 x i64> %325, %304
  %327 = mul nuw nsw <2 x i64> %321, <i64 25080, i64 25080>
  %328 = xor <2 x i64> %327, %306
  %329 = mul nuw nsw <2 x i64> %324, <i64 25080, i64 25080>
  %330 = xor <2 x i64> %329, %304
  %331 = sub <2 x i64> <i64 32768, i64 32768>, %295
  %332 = add <2 x i64> %331, %306
  %333 = add <2 x i64> %332, %318
  %334 = sub <2 x i64> %333, %328
  %335 = bitcast <2 x i64> %334 to <16 x i8>
  %336 = shufflevector <16 x i8> %335, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %337 = sub <2 x i64> <i64 32768, i64 32768>, %293
  %338 = add <2 x i64> %337, %304
  %339 = add <2 x i64> %338, %320
  %340 = sub <2 x i64> %339, %330
  %341 = bitcast <2 x i64> %340 to <16 x i8>
  %342 = shufflevector <16 x i8> %341, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %343 = sub <2 x i64> %331, %306
  %344 = add <2 x i64> %343, %313
  %345 = add <2 x i64> %344, %323
  %346 = bitcast <2 x i64> %345 to <16 x i8>
  %347 = shufflevector <16 x i8> %346, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %348 = sub <2 x i64> %337, %304
  %349 = add <2 x i64> %348, %316
  %350 = add <2 x i64> %349, %326
  %351 = bitcast <2 x i64> %350 to <16 x i8>
  %352 = shufflevector <16 x i8> %351, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %353 = bitcast <16 x i8> %336 to <4 x i32>
  %354 = bitcast <16 x i8> %342 to <4 x i32>
  %355 = shufflevector <4 x i32> %353, <4 x i32> %354, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %356 = shufflevector <4 x i32> %353, <4 x i32> %354, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %357 = shufflevector <4 x i32> %355, <4 x i32> %356, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %357, <4 x i32>* %43, align 16
  %358 = bitcast <16 x i8> %347 to <4 x i32>
  %359 = bitcast <16 x i8> %352 to <4 x i32>
  %360 = shufflevector <4 x i32> %358, <4 x i32> %359, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %361 = shufflevector <4 x i32> %358, <4 x i32> %359, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %362 = shufflevector <4 x i32> %360, <4 x i32> %361, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  store <4 x i32> %362, <4 x i32>* %27, align 16
  store <4 x i32> %33, <4 x i32>* %30, align 16
  store <4 x i32> %34, <4 x i32>* %23, align 16
  store <4 x i32> %41, <4 x i32>* %39, align 16
  store <4 x i32> %48, <4 x i32>* %46, align 16
  store <4 x i32> %65, <4 x i32>* %59, align 16
  store <4 x i32> %66, <4 x i32>* %52, align 16
  %363 = add <4 x i32> %34, %9
  %364 = add <4 x i32> %33, %16
  %365 = load <4 x i32>, <4 x i32>* %14, align 16
  %366 = add <4 x i32> %362, %365
  %367 = load <4 x i32>, <4 x i32>* %7, align 16
  %368 = add <4 x i32> %288, %367
  %369 = sub <4 x i32> %367, %288
  %370 = sub <4 x i32> %365, %362
  %371 = sub <4 x i32> %16, %33
  %372 = sub <4 x i32> %9, %34
  %373 = sub <4 x i32> %66, %41
  %374 = sub <4 x i32> %65, %48
  %375 = load <4 x i32>, <4 x i32>* %62, align 16
  %376 = sub <4 x i32> %375, %357
  %377 = load <4 x i32>, <4 x i32>* %55, align 16
  %378 = load <4 x i32>, <4 x i32>* %36, align 16
  %379 = sub <4 x i32> %377, %378
  %380 = add <4 x i32> %378, %377
  %381 = add <4 x i32> %357, %375
  %382 = add <4 x i32> %65, %48
  %383 = add <4 x i32> %66, %41
  %384 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 16
  %385 = bitcast <2 x i64>* %384 to <4 x i32>*
  store <4 x i32> %363, <4 x i32>* %385, align 16
  %386 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 17
  %387 = bitcast <2 x i64>* %386 to <4 x i32>*
  store <4 x i32> %364, <4 x i32>* %387, align 16
  %388 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 18
  %389 = bitcast <2 x i64>* %388 to <4 x i32>*
  store <4 x i32> %366, <4 x i32>* %389, align 16
  %390 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 19
  %391 = bitcast <2 x i64>* %390 to <4 x i32>*
  store <4 x i32> %368, <4 x i32>* %391, align 16
  %392 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 20
  %393 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 27
  %394 = ashr <4 x i32> %379, <i32 31, i32 31, i32 31, i32 31>
  %395 = xor <4 x i32> %394, %379
  %396 = sub <4 x i32> %395, %394
  %397 = shufflevector <4 x i32> %394, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %398 = bitcast <4 x i32> %397 to <2 x i64>
  %399 = shufflevector <4 x i32> %394, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %400 = bitcast <4 x i32> %399 to <2 x i64>
  %401 = shufflevector <4 x i32> %396, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %402 = bitcast <4 x i32> %401 to <2 x i64>
  %403 = shufflevector <4 x i32> %396, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %404 = bitcast <4 x i32> %403 to <2 x i64>
  %405 = ashr <4 x i32> %369, <i32 31, i32 31, i32 31, i32 31>
  %406 = xor <4 x i32> %405, %369
  %407 = sub <4 x i32> %406, %405
  %408 = shufflevector <4 x i32> %405, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %409 = bitcast <4 x i32> %408 to <2 x i64>
  %410 = shufflevector <4 x i32> %405, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %411 = bitcast <4 x i32> %410 to <2 x i64>
  %412 = shufflevector <4 x i32> %407, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %413 = bitcast <4 x i32> %412 to <2 x i64>
  %414 = shufflevector <4 x i32> %407, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %415 = bitcast <4 x i32> %414 to <2 x i64>
  %416 = and <2 x i64> %404, <i64 4294967295, i64 4294967295>
  %417 = mul nuw nsw <2 x i64> %416, <i64 46340, i64 46340>
  %418 = xor <2 x i64> %417, %400
  %419 = and <2 x i64> %402, <i64 4294967295, i64 4294967295>
  %420 = mul nuw nsw <2 x i64> %419, <i64 46340, i64 46340>
  %421 = xor <2 x i64> %420, %398
  %422 = and <2 x i64> %415, <i64 4294967295, i64 4294967295>
  %423 = mul nuw nsw <2 x i64> %422, <i64 46340, i64 46340>
  %424 = xor <2 x i64> %423, %411
  %425 = and <2 x i64> %413, <i64 4294967295, i64 4294967295>
  %426 = mul nuw nsw <2 x i64> %425, <i64 46340, i64 46340>
  %427 = xor <2 x i64> %426, %409
  %428 = sub <2 x i64> <i64 32768, i64 32768>, %400
  %429 = add <2 x i64> %428, %411
  %430 = sub <2 x i64> %429, %424
  %431 = add <2 x i64> %430, %418
  %432 = bitcast <2 x i64> %431 to <16 x i8>
  %433 = shufflevector <16 x i8> %432, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %434 = sub <2 x i64> <i64 32768, i64 32768>, %398
  %435 = add <2 x i64> %434, %409
  %436 = sub <2 x i64> %435, %427
  %437 = add <2 x i64> %436, %421
  %438 = bitcast <2 x i64> %437 to <16 x i8>
  %439 = shufflevector <16 x i8> %438, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %440 = sub <2 x i64> %428, %411
  %441 = add <2 x i64> %440, %424
  %442 = add <2 x i64> %441, %418
  %443 = bitcast <2 x i64> %442 to <16 x i8>
  %444 = shufflevector <16 x i8> %443, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %445 = sub <2 x i64> %434, %409
  %446 = add <2 x i64> %445, %427
  %447 = add <2 x i64> %446, %421
  %448 = bitcast <2 x i64> %447 to <16 x i8>
  %449 = shufflevector <16 x i8> %448, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %450 = bitcast <16 x i8> %433 to <4 x i32>
  %451 = bitcast <16 x i8> %439 to <4 x i32>
  %452 = shufflevector <4 x i32> %450, <4 x i32> %451, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %453 = shufflevector <4 x i32> %450, <4 x i32> %451, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %454 = shufflevector <4 x i32> %452, <4 x i32> %453, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %455 = bitcast <2 x i64>* %392 to <4 x i32>*
  store <4 x i32> %454, <4 x i32>* %455, align 16
  %456 = bitcast <16 x i8> %444 to <4 x i32>
  %457 = bitcast <16 x i8> %449 to <4 x i32>
  %458 = shufflevector <4 x i32> %456, <4 x i32> %457, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %459 = shufflevector <4 x i32> %456, <4 x i32> %457, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %460 = shufflevector <4 x i32> %458, <4 x i32> %459, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %461 = bitcast <2 x i64>* %393 to <4 x i32>*
  store <4 x i32> %460, <4 x i32>* %461, align 16
  %462 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 21
  %463 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 26
  %464 = ashr <4 x i32> %376, <i32 31, i32 31, i32 31, i32 31>
  %465 = xor <4 x i32> %464, %376
  %466 = sub <4 x i32> %465, %464
  %467 = shufflevector <4 x i32> %464, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %468 = bitcast <4 x i32> %467 to <2 x i64>
  %469 = shufflevector <4 x i32> %464, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %470 = bitcast <4 x i32> %469 to <2 x i64>
  %471 = shufflevector <4 x i32> %466, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %472 = bitcast <4 x i32> %471 to <2 x i64>
  %473 = shufflevector <4 x i32> %466, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %474 = bitcast <4 x i32> %473 to <2 x i64>
  %475 = ashr <4 x i32> %370, <i32 31, i32 31, i32 31, i32 31>
  %476 = xor <4 x i32> %475, %370
  %477 = sub <4 x i32> %476, %475
  %478 = shufflevector <4 x i32> %475, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %479 = bitcast <4 x i32> %478 to <2 x i64>
  %480 = shufflevector <4 x i32> %475, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %481 = bitcast <4 x i32> %480 to <2 x i64>
  %482 = shufflevector <4 x i32> %477, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %483 = bitcast <4 x i32> %482 to <2 x i64>
  %484 = shufflevector <4 x i32> %477, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %485 = bitcast <4 x i32> %484 to <2 x i64>
  %486 = and <2 x i64> %474, <i64 4294967295, i64 4294967295>
  %487 = mul nuw nsw <2 x i64> %486, <i64 46340, i64 46340>
  %488 = xor <2 x i64> %487, %470
  %489 = and <2 x i64> %472, <i64 4294967295, i64 4294967295>
  %490 = mul nuw nsw <2 x i64> %489, <i64 46340, i64 46340>
  %491 = xor <2 x i64> %490, %468
  %492 = and <2 x i64> %485, <i64 4294967295, i64 4294967295>
  %493 = mul nuw nsw <2 x i64> %492, <i64 46340, i64 46340>
  %494 = xor <2 x i64> %493, %481
  %495 = and <2 x i64> %483, <i64 4294967295, i64 4294967295>
  %496 = mul nuw nsw <2 x i64> %495, <i64 46340, i64 46340>
  %497 = xor <2 x i64> %496, %479
  %498 = sub <2 x i64> <i64 32768, i64 32768>, %470
  %499 = add <2 x i64> %498, %481
  %500 = sub <2 x i64> %499, %494
  %501 = add <2 x i64> %500, %488
  %502 = bitcast <2 x i64> %501 to <16 x i8>
  %503 = shufflevector <16 x i8> %502, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %504 = sub <2 x i64> <i64 32768, i64 32768>, %468
  %505 = add <2 x i64> %504, %479
  %506 = sub <2 x i64> %505, %497
  %507 = add <2 x i64> %506, %491
  %508 = bitcast <2 x i64> %507 to <16 x i8>
  %509 = shufflevector <16 x i8> %508, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %510 = sub <2 x i64> %498, %481
  %511 = add <2 x i64> %510, %494
  %512 = add <2 x i64> %511, %488
  %513 = bitcast <2 x i64> %512 to <16 x i8>
  %514 = shufflevector <16 x i8> %513, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %515 = sub <2 x i64> %504, %479
  %516 = add <2 x i64> %515, %497
  %517 = add <2 x i64> %516, %491
  %518 = bitcast <2 x i64> %517 to <16 x i8>
  %519 = shufflevector <16 x i8> %518, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %520 = bitcast <16 x i8> %503 to <4 x i32>
  %521 = bitcast <16 x i8> %509 to <4 x i32>
  %522 = shufflevector <4 x i32> %520, <4 x i32> %521, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %523 = shufflevector <4 x i32> %520, <4 x i32> %521, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %524 = shufflevector <4 x i32> %522, <4 x i32> %523, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %525 = bitcast <2 x i64>* %462 to <4 x i32>*
  store <4 x i32> %524, <4 x i32>* %525, align 16
  %526 = bitcast <16 x i8> %514 to <4 x i32>
  %527 = bitcast <16 x i8> %519 to <4 x i32>
  %528 = shufflevector <4 x i32> %526, <4 x i32> %527, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %529 = shufflevector <4 x i32> %526, <4 x i32> %527, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %530 = shufflevector <4 x i32> %528, <4 x i32> %529, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %531 = bitcast <2 x i64>* %463 to <4 x i32>*
  store <4 x i32> %530, <4 x i32>* %531, align 16
  %532 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 22
  %533 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 25
  %534 = ashr <4 x i32> %374, <i32 31, i32 31, i32 31, i32 31>
  %535 = xor <4 x i32> %534, %374
  %536 = sub <4 x i32> %535, %534
  %537 = shufflevector <4 x i32> %534, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %538 = bitcast <4 x i32> %537 to <2 x i64>
  %539 = shufflevector <4 x i32> %534, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %540 = bitcast <4 x i32> %539 to <2 x i64>
  %541 = shufflevector <4 x i32> %536, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %542 = bitcast <4 x i32> %541 to <2 x i64>
  %543 = shufflevector <4 x i32> %536, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %544 = bitcast <4 x i32> %543 to <2 x i64>
  %545 = ashr <4 x i32> %371, <i32 31, i32 31, i32 31, i32 31>
  %546 = xor <4 x i32> %545, %371
  %547 = sub <4 x i32> %546, %545
  %548 = shufflevector <4 x i32> %545, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %549 = bitcast <4 x i32> %548 to <2 x i64>
  %550 = shufflevector <4 x i32> %545, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %551 = bitcast <4 x i32> %550 to <2 x i64>
  %552 = shufflevector <4 x i32> %547, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %553 = bitcast <4 x i32> %552 to <2 x i64>
  %554 = shufflevector <4 x i32> %547, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %555 = bitcast <4 x i32> %554 to <2 x i64>
  %556 = and <2 x i64> %544, <i64 4294967295, i64 4294967295>
  %557 = mul nuw nsw <2 x i64> %556, <i64 46340, i64 46340>
  %558 = xor <2 x i64> %557, %540
  %559 = and <2 x i64> %542, <i64 4294967295, i64 4294967295>
  %560 = mul nuw nsw <2 x i64> %559, <i64 46340, i64 46340>
  %561 = xor <2 x i64> %560, %538
  %562 = and <2 x i64> %555, <i64 4294967295, i64 4294967295>
  %563 = mul nuw nsw <2 x i64> %562, <i64 46340, i64 46340>
  %564 = xor <2 x i64> %563, %551
  %565 = and <2 x i64> %553, <i64 4294967295, i64 4294967295>
  %566 = mul nuw nsw <2 x i64> %565, <i64 46340, i64 46340>
  %567 = xor <2 x i64> %566, %549
  %568 = sub <2 x i64> <i64 32768, i64 32768>, %540
  %569 = sub <2 x i64> %551, %564
  %570 = add <2 x i64> %569, %568
  %571 = add <2 x i64> %570, %558
  %572 = bitcast <2 x i64> %571 to <16 x i8>
  %573 = shufflevector <16 x i8> %572, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %574 = sub <2 x i64> <i64 32768, i64 32768>, %538
  %575 = sub <2 x i64> %549, %567
  %576 = add <2 x i64> %575, %574
  %577 = add <2 x i64> %576, %561
  %578 = bitcast <2 x i64> %577 to <16 x i8>
  %579 = shufflevector <16 x i8> %578, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %580 = sub <2 x i64> %564, %551
  %581 = add <2 x i64> %580, %568
  %582 = add <2 x i64> %581, %558
  %583 = bitcast <2 x i64> %582 to <16 x i8>
  %584 = shufflevector <16 x i8> %583, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %585 = sub <2 x i64> %567, %549
  %586 = add <2 x i64> %585, %574
  %587 = add <2 x i64> %586, %561
  %588 = bitcast <2 x i64> %587 to <16 x i8>
  %589 = shufflevector <16 x i8> %588, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %590 = bitcast <16 x i8> %573 to <4 x i32>
  %591 = bitcast <16 x i8> %579 to <4 x i32>
  %592 = shufflevector <4 x i32> %590, <4 x i32> %591, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %593 = shufflevector <4 x i32> %590, <4 x i32> %591, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %594 = shufflevector <4 x i32> %592, <4 x i32> %593, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %595 = bitcast <2 x i64>* %532 to <4 x i32>*
  store <4 x i32> %594, <4 x i32>* %595, align 16
  %596 = bitcast <16 x i8> %584 to <4 x i32>
  %597 = bitcast <16 x i8> %589 to <4 x i32>
  %598 = shufflevector <4 x i32> %596, <4 x i32> %597, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %599 = shufflevector <4 x i32> %596, <4 x i32> %597, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %600 = shufflevector <4 x i32> %598, <4 x i32> %599, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %601 = bitcast <2 x i64>* %533 to <4 x i32>*
  store <4 x i32> %600, <4 x i32>* %601, align 16
  %602 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 23
  %603 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 24
  %604 = ashr <4 x i32> %373, <i32 31, i32 31, i32 31, i32 31>
  %605 = xor <4 x i32> %604, %373
  %606 = sub <4 x i32> %605, %604
  %607 = shufflevector <4 x i32> %604, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %608 = bitcast <4 x i32> %607 to <2 x i64>
  %609 = shufflevector <4 x i32> %604, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %610 = bitcast <4 x i32> %609 to <2 x i64>
  %611 = shufflevector <4 x i32> %606, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %612 = bitcast <4 x i32> %611 to <2 x i64>
  %613 = shufflevector <4 x i32> %606, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %614 = bitcast <4 x i32> %613 to <2 x i64>
  %615 = ashr <4 x i32> %372, <i32 31, i32 31, i32 31, i32 31>
  %616 = xor <4 x i32> %615, %372
  %617 = sub <4 x i32> %616, %615
  %618 = shufflevector <4 x i32> %615, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %619 = bitcast <4 x i32> %618 to <2 x i64>
  %620 = shufflevector <4 x i32> %615, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %621 = bitcast <4 x i32> %620 to <2 x i64>
  %622 = shufflevector <4 x i32> %617, <4 x i32> undef, <4 x i32> <i32 2, i32 2, i32 3, i32 3>
  %623 = bitcast <4 x i32> %622 to <2 x i64>
  %624 = shufflevector <4 x i32> %617, <4 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 1>
  %625 = bitcast <4 x i32> %624 to <2 x i64>
  %626 = and <2 x i64> %614, <i64 4294967295, i64 4294967295>
  %627 = mul nuw nsw <2 x i64> %626, <i64 46340, i64 46340>
  %628 = xor <2 x i64> %627, %610
  %629 = and <2 x i64> %612, <i64 4294967295, i64 4294967295>
  %630 = mul nuw nsw <2 x i64> %629, <i64 46340, i64 46340>
  %631 = xor <2 x i64> %630, %608
  %632 = and <2 x i64> %625, <i64 4294967295, i64 4294967295>
  %633 = mul nuw nsw <2 x i64> %632, <i64 46340, i64 46340>
  %634 = xor <2 x i64> %633, %621
  %635 = and <2 x i64> %623, <i64 4294967295, i64 4294967295>
  %636 = mul nuw nsw <2 x i64> %635, <i64 46340, i64 46340>
  %637 = xor <2 x i64> %636, %619
  %638 = sub <2 x i64> <i64 32768, i64 32768>, %610
  %639 = sub <2 x i64> %621, %634
  %640 = add <2 x i64> %639, %638
  %641 = add <2 x i64> %640, %628
  %642 = bitcast <2 x i64> %641 to <16 x i8>
  %643 = shufflevector <16 x i8> %642, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %644 = sub <2 x i64> <i64 32768, i64 32768>, %608
  %645 = sub <2 x i64> %619, %637
  %646 = add <2 x i64> %645, %644
  %647 = add <2 x i64> %646, %631
  %648 = bitcast <2 x i64> %647 to <16 x i8>
  %649 = shufflevector <16 x i8> %648, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %650 = sub <2 x i64> %634, %621
  %651 = add <2 x i64> %650, %638
  %652 = add <2 x i64> %651, %628
  %653 = bitcast <2 x i64> %652 to <16 x i8>
  %654 = shufflevector <16 x i8> %653, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %655 = sub <2 x i64> %637, %619
  %656 = add <2 x i64> %655, %644
  %657 = add <2 x i64> %656, %631
  %658 = bitcast <2 x i64> %657 to <16 x i8>
  %659 = shufflevector <16 x i8> %658, <16 x i8> <i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17>
  %660 = bitcast <16 x i8> %643 to <4 x i32>
  %661 = bitcast <16 x i8> %649 to <4 x i32>
  %662 = shufflevector <4 x i32> %660, <4 x i32> %661, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %663 = shufflevector <4 x i32> %660, <4 x i32> %661, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %664 = shufflevector <4 x i32> %662, <4 x i32> %663, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %665 = bitcast <2 x i64>* %602 to <4 x i32>*
  store <4 x i32> %664, <4 x i32>* %665, align 16
  %666 = bitcast <16 x i8> %654 to <4 x i32>
  %667 = bitcast <16 x i8> %659 to <4 x i32>
  %668 = shufflevector <4 x i32> %666, <4 x i32> %667, <4 x i32> <i32 0, i32 4, i32 undef, i32 undef>
  %669 = shufflevector <4 x i32> %666, <4 x i32> %667, <4 x i32> <i32 2, i32 6, i32 undef, i32 undef>
  %670 = shufflevector <4 x i32> %668, <4 x i32> %669, <4 x i32> <i32 0, i32 4, i32 1, i32 5>
  %671 = bitcast <2 x i64>* %603 to <4 x i32>*
  store <4 x i32> %670, <4 x i32>* %671, align 16
  %672 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 28
  %673 = bitcast <2 x i64>* %672 to <4 x i32>*
  store <4 x i32> %380, <4 x i32>* %673, align 16
  %674 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 29
  %675 = bitcast <2 x i64>* %674 to <4 x i32>*
  store <4 x i32> %381, <4 x i32>* %675, align 16
  %676 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 30
  %677 = bitcast <2 x i64>* %676 to <4 x i32>*
  store <4 x i32> %382, <4 x i32>* %677, align 16
  %678 = getelementptr inbounds <2 x i64>, <2 x i64>* %1, i64 31
  %679 = bitcast <2 x i64>* %678 to <4 x i32>*
  store <4 x i32> %383, <4 x i32>* %679, align 16
  ret void
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind readnone }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { inlinehint nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
