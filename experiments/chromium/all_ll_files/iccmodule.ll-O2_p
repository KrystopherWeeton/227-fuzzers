; ModuleID = '../../third_party/pdfium/core/fxcodec/icc/iccmodule.cpp'
source_filename = "../../third_party/pdfium/core/fxcodec/icc/iccmodule.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.fxcodec::CLcmsCmm" = type <{ i8*, i32, i8, i8, [2 x i8] }>
%"class.pdfium::span" = type { %"class.fxcrt::UnownedPtr", i64 }
%"class.fxcrt::UnownedPtr" = type { i8* }

@_ZN7fxcodec8CLcmsCmmC1EPvibb = hidden unnamed_addr alias void (%"class.fxcodec::CLcmsCmm"*, i8*, i32, i1, i1), void (%"class.fxcodec::CLcmsCmm"*, i8*, i32, i1, i1)* @_ZN7fxcodec8CLcmsCmmC2EPvibb
@_ZN7fxcodec8CLcmsCmmD1Ev = hidden unnamed_addr alias void (%"class.fxcodec::CLcmsCmm"*), void (%"class.fxcodec::CLcmsCmm"*)* @_ZN7fxcodec8CLcmsCmmD2Ev

; Function Attrs: nofree norecurse nounwind ssp uwtable writeonly
define hidden void @_ZN7fxcodec8CLcmsCmmC2EPvibb(%"class.fxcodec::CLcmsCmm"* nocapture, i8*, i32, i1 zeroext, i1 zeroext) unnamed_addr #0 align 2 {
  %6 = zext i1 %3 to i8
  %7 = zext i1 %4 to i8
  %8 = getelementptr inbounds %"class.fxcodec::CLcmsCmm", %"class.fxcodec::CLcmsCmm"* %0, i64 0, i32 0
  store i8* %1, i8** %8, align 8
  %9 = getelementptr inbounds %"class.fxcodec::CLcmsCmm", %"class.fxcodec::CLcmsCmm"* %0, i64 0, i32 1
  store i32 %2, i32* %9, align 8
  %10 = getelementptr inbounds %"class.fxcodec::CLcmsCmm", %"class.fxcodec::CLcmsCmm"* %0, i64 0, i32 2
  store i8 %6, i8* %10, align 4
  %11 = getelementptr inbounds %"class.fxcodec::CLcmsCmm", %"class.fxcodec::CLcmsCmm"* %0, i64 0, i32 3
  store i8 %7, i8* %11, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7fxcodec8CLcmsCmmD2Ev(%"class.fxcodec::CLcmsCmm"* nocapture readonly) unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.fxcodec::CLcmsCmm", %"class.fxcodec::CLcmsCmm"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  tail call void @cmsDeleteTransform(i8* %3) #6
  ret void
}

declare void @cmsDeleteTransform(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden %"class.fxcodec::CLcmsCmm"* @_ZN7fxcodec9IccModule19CreateTransformSRGBEN6pdfium4spanIKhEE(%"class.pdfium::span"* nocapture readonly) local_unnamed_addr #1 align 2 {
  %2 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %0, i64 0, i32 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.pdfium::span", %"class.pdfium::span"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = trunc i64 %5 to i32
  %7 = tail call i8* @cmsOpenProfileFromMem(i8* %3, i32 %6) #6
  %8 = icmp eq i8* %7, null
  br i1 %8, label %49, label %9

9:                                                ; preds = %1
  %10 = tail call i8* @cmsCreate_sRGBProfile() #6
  %11 = icmp eq i8* %10, null
  br i1 %11, label %46, label %12

12:                                               ; preds = %9
  %13 = tail call i32 @cmsGetColorSpace(i8* nonnull %7) #6
  %14 = tail call i32 @cmsChannelsOf(i32 %13) #6
  switch i32 %14, label %43 [
    i32 4, label %15
    i32 3, label %15
    i32 1, label %15
  ]

15:                                               ; preds = %12, %12, %12
  %16 = icmp eq i32 %13, 1281450528
  %17 = shl i32 %14, 3
  br i1 %16, label %18, label %20

18:                                               ; preds = %15
  %19 = or i32 %17, 655360
  br label %25

20:                                               ; preds = %15
  %21 = or i32 %17, 1
  switch i32 %13, label %22 [
    i32 1380401696, label %25
    i32 1196573017, label %25
  ]

22:                                               ; preds = %20
  %23 = icmp eq i32 %13, 1129142603
  %24 = zext i1 %23 to i8
  br label %25

25:                                               ; preds = %22, %20, %20, %18
  %26 = phi i8 [ 1, %18 ], [ 0, %20 ], [ 0, %20 ], [ 0, %22 ]
  %27 = phi i8 [ 0, %18 ], [ 1, %20 ], [ 1, %20 ], [ %24, %22 ]
  %28 = phi i32 [ %19, %18 ], [ %21, %20 ], [ %21, %20 ], [ %21, %22 ]
  %29 = tail call i32 @cmsGetColorSpace(i8* nonnull %10) #6
  %30 = icmp eq i32 %29, 1380401696
  br i1 %30, label %31, label %43

31:                                               ; preds = %25
  %32 = tail call i8* @cmsCreateTransform(i8* nonnull %7, i32 %28, i8* nonnull %10, i32 263193, i32 0, i32 0) #6
  %33 = icmp eq i8* %32, null
  br i1 %33, label %43, label %34

34:                                               ; preds = %31
  %35 = ptrtoint i8* %32 to i64
  %36 = tail call i8* @_Znwm(i64 16) #7
  %37 = bitcast i8* %36 to i64*
  store i64 %35, i64* %37, align 8
  %38 = getelementptr inbounds i8, i8* %36, i64 8
  %39 = bitcast i8* %38 to i32*
  store i32 %14, i32* %39, align 8
  %40 = getelementptr inbounds i8, i8* %36, i64 12
  store i8 %26, i8* %40, align 4
  %41 = getelementptr inbounds i8, i8* %36, i64 13
  store i8 %27, i8* %41, align 1
  %42 = ptrtoint i8* %36 to i64
  br label %43

43:                                               ; preds = %25, %12, %34, %31
  %44 = phi i64 [ 0, %31 ], [ %42, %34 ], [ 0, %12 ], [ 0, %25 ]
  %45 = tail call i32 @cmsCloseProfile(i8* nonnull %10) #6
  br label %46

46:                                               ; preds = %9, %43
  %47 = phi i64 [ 0, %9 ], [ %44, %43 ]
  %48 = tail call i32 @cmsCloseProfile(i8* nonnull %7) #6
  br label %49

49:                                               ; preds = %1, %46
  %50 = phi i64 [ %47, %46 ], [ 0, %1 ]
  %51 = inttoptr i64 %50 to %"class.fxcodec::CLcmsCmm"*
  ret %"class.fxcodec::CLcmsCmm"* %51
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #3

declare i8* @cmsOpenProfileFromMem(i8*, i32) local_unnamed_addr #2

declare i8* @cmsCreate_sRGBProfile() local_unnamed_addr #2

declare i32 @cmsGetColorSpace(i8*) local_unnamed_addr #2

declare i32 @cmsChannelsOf(i32) local_unnamed_addr #2

declare i8* @cmsCreateTransform(i8*, i32, i8*, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7fxcodec9IccModule9TranslateEPNS_8CLcmsCmmEjPKfPf(%"class.fxcodec::CLcmsCmm"* readonly, i32, float* nocapture readonly, float* nocapture) local_unnamed_addr #1 align 2 {
  %5 = bitcast float* %2 to i8*
  %6 = alloca i32, align 4
  %7 = bitcast i32* %6 to [4 x i8]*
  %8 = icmp eq %"class.fxcodec::CLcmsCmm"* %0, null
  br i1 %8, label %217, label %9

9:                                                ; preds = %4
  %10 = bitcast i32* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %10) #6
  %11 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 1
  %12 = getelementptr inbounds [4 x i8], [4 x i8]* %7, i64 0, i64 2
  %13 = getelementptr inbounds %"class.fxcodec::CLcmsCmm", %"class.fxcodec::CLcmsCmm"* %0, i64 0, i32 2
  store i32 -1431655766, i32* %6, align 4
  %14 = load i8, i8* %13, align 4, !range !2
  %15 = icmp eq i8 %14, 0
  %16 = icmp ugt i32 %1, 16
  %17 = select i1 %16, i32 %1, i32 16
  %18 = zext i32 %17 to i64
  br i1 %15, label %105, label %19

19:                                               ; preds = %9
  %20 = shl nuw nsw i64 %18, 3
  %21 = tail call i8* @_Znwm(i64 %20) #7
  %22 = bitcast i8* %21 to double*
  %23 = ptrtoint i8* %21 to i64
  %24 = add nsw i64 %18, -1
  %25 = getelementptr double, double* %22, i64 %24
  %26 = ptrtoint double* %25 to i64
  %27 = sub i64 8, %23
  %28 = add i64 %27, %26
  %29 = and i64 %28, -8
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %21, i8 0, i64 %29, i1 false) #6
  %30 = icmp eq i32 %1, 0
  br i1 %30, label %94, label %31

31:                                               ; preds = %19
  %32 = zext i32 %1 to i64
  %33 = icmp ult i32 %1, 4
  br i1 %33, label %34, label %36

34:                                               ; preds = %92, %31
  %35 = phi i64 [ 0, %31 ], [ %37, %92 ]
  br label %97

36:                                               ; preds = %31
  %37 = and i64 %32, 4294967292
  %38 = add nsw i64 %37, -4
  %39 = lshr exact i64 %38, 2
  %40 = add nuw nsw i64 %39, 1
  %41 = and i64 %40, 1
  %42 = icmp eq i64 %38, 0
  br i1 %42, label %76, label %43

43:                                               ; preds = %36
  %44 = sub nuw nsw i64 %40, %41
  br label %45

45:                                               ; preds = %45, %43
  %46 = phi i64 [ 0, %43 ], [ %73, %45 ]
  %47 = phi i64 [ %44, %43 ], [ %74, %45 ]
  %48 = getelementptr inbounds float, float* %2, i64 %46
  %49 = bitcast float* %48 to <2 x float>*
  %50 = load <2 x float>, <2 x float>* %49, align 4
  %51 = getelementptr inbounds float, float* %48, i64 2
  %52 = bitcast float* %51 to <2 x float>*
  %53 = load <2 x float>, <2 x float>* %52, align 4
  %54 = fpext <2 x float> %50 to <2 x double>
  %55 = fpext <2 x float> %53 to <2 x double>
  %56 = getelementptr inbounds double, double* %22, i64 %46
  %57 = bitcast double* %56 to <2 x double>*
  store <2 x double> %54, <2 x double>* %57, align 8
  %58 = getelementptr inbounds double, double* %56, i64 2
  %59 = bitcast double* %58 to <2 x double>*
  store <2 x double> %55, <2 x double>* %59, align 8
  %60 = or i64 %46, 4
  %61 = getelementptr inbounds float, float* %2, i64 %60
  %62 = bitcast float* %61 to <2 x float>*
  %63 = load <2 x float>, <2 x float>* %62, align 4
  %64 = getelementptr inbounds float, float* %61, i64 2
  %65 = bitcast float* %64 to <2 x float>*
  %66 = load <2 x float>, <2 x float>* %65, align 4
  %67 = fpext <2 x float> %63 to <2 x double>
  %68 = fpext <2 x float> %66 to <2 x double>
  %69 = getelementptr inbounds double, double* %22, i64 %60
  %70 = bitcast double* %69 to <2 x double>*
  store <2 x double> %67, <2 x double>* %70, align 8
  %71 = getelementptr inbounds double, double* %69, i64 2
  %72 = bitcast double* %71 to <2 x double>*
  store <2 x double> %68, <2 x double>* %72, align 8
  %73 = add i64 %46, 8
  %74 = add i64 %47, -2
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %45, !llvm.loop !3

76:                                               ; preds = %45, %36
  %77 = phi i64 [ 0, %36 ], [ %73, %45 ]
  %78 = icmp eq i64 %41, 0
  br i1 %78, label %92, label %79

79:                                               ; preds = %76
  %80 = getelementptr inbounds float, float* %2, i64 %77
  %81 = bitcast float* %80 to <2 x float>*
  %82 = load <2 x float>, <2 x float>* %81, align 4
  %83 = getelementptr inbounds float, float* %80, i64 2
  %84 = bitcast float* %83 to <2 x float>*
  %85 = load <2 x float>, <2 x float>* %84, align 4
  %86 = fpext <2 x float> %82 to <2 x double>
  %87 = fpext <2 x float> %85 to <2 x double>
  %88 = getelementptr inbounds double, double* %22, i64 %77
  %89 = bitcast double* %88 to <2 x double>*
  store <2 x double> %86, <2 x double>* %89, align 8
  %90 = getelementptr inbounds double, double* %88, i64 2
  %91 = bitcast double* %90 to <2 x double>*
  store <2 x double> %87, <2 x double>* %91, align 8
  br label %92

92:                                               ; preds = %76, %79
  %93 = icmp eq i64 %37, %32
  br i1 %93, label %94, label %34

94:                                               ; preds = %97, %92, %19
  %95 = getelementptr inbounds %"class.fxcodec::CLcmsCmm", %"class.fxcodec::CLcmsCmm"* %0, i64 0, i32 0
  %96 = load i8*, i8** %95, align 8
  call void @cmsDoTransform(i8* %96, i8* nonnull %21, i8* nonnull %10, i32 1) #6
  call void @_ZdlPv(i8* nonnull %21) #7
  br label %205

97:                                               ; preds = %34, %97
  %98 = phi i64 [ %103, %97 ], [ %35, %34 ]
  %99 = getelementptr inbounds float, float* %2, i64 %98
  %100 = load float, float* %99, align 4
  %101 = fpext float %100 to double
  %102 = getelementptr inbounds double, double* %22, i64 %98
  store double %101, double* %102, align 8
  %103 = add nuw nsw i64 %98, 1
  %104 = icmp eq i64 %103, %32
  br i1 %104, label %94, label %97, !llvm.loop !5

105:                                              ; preds = %9
  %106 = tail call i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64 %18, i64 1) #6
  %107 = ptrtoint i8* %106 to i64
  %108 = sub i64 %18, %107
  %109 = getelementptr i8, i8* %106, i64 %108
  %110 = ptrtoint i8* %109 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %106, i8 0, i64 %110, i1 false) #6
  %111 = icmp eq i32 %1, 0
  br i1 %111, label %175, label %112

112:                                              ; preds = %105
  %113 = zext i32 %1 to i64
  %114 = icmp ult i32 %1, 8
  br i1 %114, label %115, label %136

115:                                              ; preds = %173, %136, %112
  %116 = phi i64 [ 0, %136 ], [ 0, %112 ], [ %144, %173 ]
  %117 = xor i64 %116, -1
  %118 = and i64 %113, 1
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %132, label %120

120:                                              ; preds = %115
  %121 = getelementptr inbounds float, float* %2, i64 %116
  %122 = load float, float* %121, align 4
  %123 = fmul float %122, 2.550000e+02
  %124 = fptosi float %123 to i32
  %125 = icmp sgt i32 %124, 0
  %126 = select i1 %125, i32 %124, i32 0
  %127 = icmp slt i32 %126, 255
  %128 = select i1 %127, i32 %126, i32 255
  %129 = trunc i32 %128 to i8
  %130 = getelementptr inbounds i8, i8* %106, i64 %116
  store i8 %129, i8* %130, align 1
  %131 = or i64 %116, 1
  br label %132

132:                                              ; preds = %115, %120
  %133 = phi i64 [ %116, %115 ], [ %131, %120 ]
  %134 = sub nsw i64 0, %113
  %135 = icmp eq i64 %117, %134
  br i1 %135, label %175, label %180

136:                                              ; preds = %112
  %137 = getelementptr i8, i8* %106, i64 %113
  %138 = getelementptr float, float* %2, i64 %113
  %139 = bitcast float* %138 to i8*
  %140 = icmp ult i8* %106, %139
  %141 = icmp ugt i8* %137, %5
  %142 = and i1 %140, %141
  br i1 %142, label %115, label %143

143:                                              ; preds = %136
  %144 = and i64 %113, 4294967288
  br label %145

145:                                              ; preds = %145, %143
  %146 = phi i64 [ 0, %143 ], [ %171, %145 ]
  %147 = getelementptr inbounds float, float* %2, i64 %146
  %148 = bitcast float* %147 to <4 x float>*
  %149 = load <4 x float>, <4 x float>* %148, align 4, !alias.scope !7
  %150 = getelementptr inbounds float, float* %147, i64 4
  %151 = bitcast float* %150 to <4 x float>*
  %152 = load <4 x float>, <4 x float>* %151, align 4, !alias.scope !7
  %153 = fmul <4 x float> %149, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %154 = fmul <4 x float> %152, <float 2.550000e+02, float 2.550000e+02, float 2.550000e+02, float 2.550000e+02>
  %155 = fptosi <4 x float> %153 to <4 x i32>
  %156 = fptosi <4 x float> %154 to <4 x i32>
  %157 = icmp sgt <4 x i32> %155, zeroinitializer
  %158 = icmp sgt <4 x i32> %156, zeroinitializer
  %159 = select <4 x i1> %157, <4 x i32> %155, <4 x i32> zeroinitializer
  %160 = select <4 x i1> %158, <4 x i32> %156, <4 x i32> zeroinitializer
  %161 = icmp slt <4 x i32> %159, <i32 255, i32 255, i32 255, i32 255>
  %162 = icmp slt <4 x i32> %160, <i32 255, i32 255, i32 255, i32 255>
  %163 = select <4 x i1> %161, <4 x i32> %159, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %164 = select <4 x i1> %162, <4 x i32> %160, <4 x i32> <i32 255, i32 255, i32 255, i32 255>
  %165 = trunc <4 x i32> %163 to <4 x i8>
  %166 = trunc <4 x i32> %164 to <4 x i8>
  %167 = getelementptr inbounds i8, i8* %106, i64 %146
  %168 = bitcast i8* %167 to <4 x i8>*
  store <4 x i8> %165, <4 x i8>* %168, align 1, !alias.scope !10, !noalias !7
  %169 = getelementptr inbounds i8, i8* %167, i64 4
  %170 = bitcast i8* %169 to <4 x i8>*
  store <4 x i8> %166, <4 x i8>* %170, align 1, !alias.scope !10, !noalias !7
  %171 = add i64 %146, 8
  %172 = icmp eq i64 %171, %144
  br i1 %172, label %173, label %145, !llvm.loop !12

173:                                              ; preds = %145
  %174 = icmp eq i64 %144, %113
  br i1 %174, label %175, label %115

175:                                              ; preds = %132, %180, %173, %105
  %176 = getelementptr inbounds %"class.fxcodec::CLcmsCmm", %"class.fxcodec::CLcmsCmm"* %0, i64 0, i32 0
  %177 = load i8*, i8** %176, align 8
  call void @cmsDoTransform(i8* %177, i8* %106, i8* nonnull %10, i32 1) #6
  %178 = icmp eq i8* %106, null
  br i1 %178, label %205, label %179

179:                                              ; preds = %175
  call void @_Z7FX_FreePv(i8* nonnull %106) #6
  br label %205

180:                                              ; preds = %132, %180
  %181 = phi i64 [ %203, %180 ], [ %133, %132 ]
  %182 = getelementptr inbounds float, float* %2, i64 %181
  %183 = load float, float* %182, align 4
  %184 = fmul float %183, 2.550000e+02
  %185 = fptosi float %184 to i32
  %186 = icmp sgt i32 %185, 0
  %187 = select i1 %186, i32 %185, i32 0
  %188 = icmp slt i32 %187, 255
  %189 = select i1 %188, i32 %187, i32 255
  %190 = trunc i32 %189 to i8
  %191 = getelementptr inbounds i8, i8* %106, i64 %181
  store i8 %190, i8* %191, align 1
  %192 = add nuw nsw i64 %181, 1
  %193 = getelementptr inbounds float, float* %2, i64 %192
  %194 = load float, float* %193, align 4
  %195 = fmul float %194, 2.550000e+02
  %196 = fptosi float %195 to i32
  %197 = icmp sgt i32 %196, 0
  %198 = select i1 %197, i32 %196, i32 0
  %199 = icmp slt i32 %198, 255
  %200 = select i1 %199, i32 %198, i32 255
  %201 = trunc i32 %200 to i8
  %202 = getelementptr inbounds i8, i8* %106, i64 %192
  store i8 %201, i8* %202, align 1
  %203 = add nuw nsw i64 %181, 2
  %204 = icmp eq i64 %203, %113
  br i1 %204, label %175, label %180, !llvm.loop !13

205:                                              ; preds = %179, %175, %94
  %206 = load i8, i8* %12, align 2
  %207 = uitofp i8 %206 to float
  %208 = fdiv float %207, 2.550000e+02
  store float %208, float* %3, align 4
  %209 = load i8, i8* %11, align 1
  %210 = uitofp i8 %209 to float
  %211 = fdiv float %210, 2.550000e+02
  %212 = getelementptr inbounds float, float* %3, i64 1
  store float %211, float* %212, align 4
  %213 = load i8, i8* %10, align 4
  %214 = uitofp i8 %213 to float
  %215 = fdiv float %214, 2.550000e+02
  %216 = getelementptr inbounds float, float* %3, i64 2
  store float %215, float* %216, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %10) #6
  br label %217

217:                                              ; preds = %4, %205
  ret void
}

declare void @cmsDoTransform(i8*, i8*, i8*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN7fxcodec9IccModule17TranslateScanlineEPNS_8CLcmsCmmEPhPKhi(%"class.fxcodec::CLcmsCmm"* readonly, i8*, i8*, i32) local_unnamed_addr #1 align 2 {
  %5 = icmp eq %"class.fxcodec::CLcmsCmm"* %0, null
  br i1 %5, label %9, label %6

6:                                                ; preds = %4
  %7 = getelementptr inbounds %"class.fxcodec::CLcmsCmm", %"class.fxcodec::CLcmsCmm"* %0, i64 0, i32 0
  %8 = load i8*, i8** %7, align 8
  tail call void @cmsDoTransform(i8* %8, i8* %2, i8* %1, i32 %3) #6
  br label %9

9:                                                ; preds = %4, %6
  ret void
}

declare i32 @cmsCloseProfile(i8*) local_unnamed_addr #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #4

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #5

declare i8* @_ZN6pdfium8internal10AllocOrDieEmm(i64, i64) local_unnamed_addr #2

declare void @_Z7FX_FreePv(i8*) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

attributes #0 = { nofree norecurse nounwind ssp uwtable writeonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind }
attributes #4 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.isvectorized", i32 1}
!5 = distinct !{!5, !6, !4}
!6 = !{!"llvm.loop.unroll.runtime.disable"}
!7 = !{!8}
!8 = distinct !{!8, !9}
!9 = distinct !{!9, !"LVerDomain"}
!10 = !{!11}
!11 = distinct !{!11, !9}
!12 = distinct !{!12, !4}
!13 = distinct !{!13, !4}
