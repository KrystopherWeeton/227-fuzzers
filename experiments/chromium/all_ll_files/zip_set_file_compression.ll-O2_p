; ModuleID = '../../third_party/libzip/src/lib/zip_set_file_compression.c'
source_filename = "../../third_party/libzip/src/lib/zip_set_file_compression.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.zip = type { %struct.zip_source*, i32, %struct.zip_error, i32, i32, i8*, %struct.zip_string*, %struct.zip_string*, i8, i64, i64, %struct.zip_entry*, i32, i32, %struct.zip_source**, %struct.zip_hash*, %struct.zip_progress* }
%struct.zip_source = type { %struct.zip_source*, %union.anon, i8*, %struct.zip_error, i64, i32, i32, i8, %struct.zip*, i32, i8, i8 }
%union.anon = type { i64 (i8*, i8*, i64, i32)* }
%struct.zip_error = type { i32, i32, i8* }
%struct.zip_string = type { i8*, i16, i32, i8*, i32 }
%struct.zip_entry = type { %struct.zip_dirent*, %struct.zip_dirent*, %struct.zip_source*, i8 }
%struct.zip_dirent = type { i32, i8, i8, i8, i16, i16, i16, i32, i64, i32, i64, i64, %struct.zip_string*, %struct.zip_extra_field*, %struct.zip_string*, i32, i16, i32, i64, i16, i16, i8* }
%struct.zip_extra_field = type { %struct.zip_extra_field*, i32, i16, i16, i8* }
%struct.zip_hash = type opaque
%struct.zip_progress = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden i32 @zip_set_file_compression(%struct.zip*, i64, i32, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 9
  %6 = load i64, i64* %5, align 8
  %7 = icmp ule i64 %6, %1
  %8 = icmp ugt i32 %3, 9
  %9 = or i1 %8, %7
  br i1 %9, label %10, label %12

10:                                               ; preds = %4
  %11 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %11, i32 18, i32 0) #2
  br label %67

12:                                               ; preds = %4
  %13 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 4
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, 2
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %12
  %18 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %18, i32 25, i32 0) #2
  br label %67

19:                                               ; preds = %12
  %20 = tail call i32 @zip_compression_method_supported(i32 %2, i32 1) #2
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %19
  %23 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %23, i32 16, i32 0) #2
  br label %67

24:                                               ; preds = %19
  %25 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 11
  %26 = load %struct.zip_entry*, %struct.zip_entry** %25, align 8
  %27 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %26, i64 %1, i32 0
  %28 = load %struct.zip_dirent*, %struct.zip_dirent** %27, align 8
  %29 = icmp eq %struct.zip_dirent* %28, null
  br i1 %29, label %33, label %30

30:                                               ; preds = %24
  %31 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %28, i64 0, i32 7
  %32 = load i32, i32* %31, align 8
  br label %33

33:                                               ; preds = %24, %30
  %34 = phi i32 [ %32, %30 ], [ -1, %24 ]
  %35 = icmp eq i32 %34, %2
  %36 = getelementptr inbounds %struct.zip_entry, %struct.zip_entry* %26, i64 %1, i32 1
  %37 = load %struct.zip_dirent*, %struct.zip_dirent** %36, align 8
  %38 = icmp eq %struct.zip_dirent* %37, null
  br i1 %35, label %39, label %51

39:                                               ; preds = %33
  br i1 %38, label %67, label %40

40:                                               ; preds = %39
  %41 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %37, i64 0, i32 0
  %42 = load i32, i32* %41, align 8
  %43 = and i32 %42, -2
  store i32 %43, i32* %41, align 8
  %44 = load %struct.zip_dirent*, %struct.zip_dirent** %36, align 8
  %45 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %44, i64 0, i32 19
  store i16 0, i16* %45, align 8
  %46 = load %struct.zip_dirent*, %struct.zip_dirent** %36, align 8
  %47 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %46, i64 0, i32 0
  %48 = load i32, i32* %47, align 8
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %67

50:                                               ; preds = %40
  tail call void @_zip_dirent_free(%struct.zip_dirent* %46) #2
  store %struct.zip_dirent* null, %struct.zip_dirent** %36, align 8
  br label %67

51:                                               ; preds = %33
  br i1 %38, label %52, label %57

52:                                               ; preds = %51
  %53 = tail call %struct.zip_dirent* @_zip_dirent_clone(%struct.zip_dirent* %28) #2
  store %struct.zip_dirent* %53, %struct.zip_dirent** %36, align 8
  %54 = icmp eq %struct.zip_dirent* %53, null
  br i1 %54, label %55, label %57

55:                                               ; preds = %52
  %56 = getelementptr inbounds %struct.zip, %struct.zip* %0, i64 0, i32 2
  tail call void @zip_error_set(%struct.zip_error* %56, i32 14, i32 0) #2
  br label %67

57:                                               ; preds = %52, %51
  %58 = phi %struct.zip_dirent* [ %53, %52 ], [ %37, %51 ]
  %59 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %58, i64 0, i32 7
  store i32 %2, i32* %59, align 8
  %60 = trunc i32 %3 to i16
  %61 = load %struct.zip_dirent*, %struct.zip_dirent** %36, align 8
  %62 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %61, i64 0, i32 19
  store i16 %60, i16* %62, align 8
  %63 = load %struct.zip_dirent*, %struct.zip_dirent** %36, align 8
  %64 = getelementptr inbounds %struct.zip_dirent, %struct.zip_dirent* %63, i64 0, i32 0
  %65 = load i32, i32* %64, align 8
  %66 = or i32 %65, 1
  store i32 %66, i32* %64, align 8
  br label %67

67:                                               ; preds = %57, %40, %50, %39, %55, %22, %17, %10
  %68 = phi i32 [ -1, %10 ], [ -1, %17 ], [ -1, %55 ], [ -1, %22 ], [ 0, %39 ], [ 0, %50 ], [ 0, %40 ], [ 0, %57 ]
  ret i32 %68
}

declare void @zip_error_set(%struct.zip_error*, i32, i32) local_unnamed_addr #1

declare i32 @zip_compression_method_supported(i32, i32) local_unnamed_addr #1

declare void @_zip_dirent_free(%struct.zip_dirent*) local_unnamed_addr #1

declare %struct.zip_dirent* @_zip_dirent_clone(%struct.zip_dirent*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
