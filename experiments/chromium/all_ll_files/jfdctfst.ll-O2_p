; ModuleID = '../../third_party/libjpeg_turbo/jfdctfst.c'
source_filename = "../../third_party/libjpeg_turbo/jfdctfst.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @jpeg_fdct_ifast(i16* nocapture) local_unnamed_addr #0 {
  br label %2

2:                                                ; preds = %2, %1
  %3 = phi i32 [ 7, %1 ], [ %74, %2 ]
  %4 = phi i16* [ %0, %1 ], [ %73, %2 ]
  %5 = load i16, i16* %4, align 2
  %6 = getelementptr inbounds i16, i16* %4, i64 7
  %7 = load i16, i16* %6, align 2
  %8 = add i16 %7, %5
  %9 = sub i16 %5, %7
  %10 = getelementptr inbounds i16, i16* %4, i64 1
  %11 = load i16, i16* %10, align 2
  %12 = getelementptr inbounds i16, i16* %4, i64 6
  %13 = load i16, i16* %12, align 2
  %14 = add i16 %13, %11
  %15 = sub i16 %11, %13
  %16 = getelementptr inbounds i16, i16* %4, i64 2
  %17 = load i16, i16* %16, align 2
  %18 = getelementptr inbounds i16, i16* %4, i64 5
  %19 = load i16, i16* %18, align 2
  %20 = add i16 %19, %17
  %21 = sub i16 %17, %19
  %22 = getelementptr inbounds i16, i16* %4, i64 3
  %23 = load i16, i16* %22, align 2
  %24 = getelementptr inbounds i16, i16* %4, i64 4
  %25 = load i16, i16* %24, align 2
  %26 = add i16 %25, %23
  %27 = add i16 %26, %8
  %28 = sub i16 %8, %26
  %29 = add i16 %20, %14
  %30 = sub i16 %14, %20
  %31 = add i16 %27, %29
  store i16 %31, i16* %4, align 2
  %32 = sub i16 %27, %29
  store i16 %32, i16* %24, align 2
  %33 = sext i16 %30 to i32
  %34 = sext i16 %28 to i32
  %35 = add nsw i32 %34, %33
  %36 = mul i32 %35, 46336
  %37 = lshr i32 %36, 16
  %38 = trunc i32 %37 to i16
  %39 = add i16 %28, %38
  store i16 %39, i16* %16, align 2
  %40 = sub i16 %28, %38
  store i16 %40, i16* %12, align 2
  %41 = add i16 %21, %23
  %42 = sub i16 %41, %25
  %43 = add i16 %21, %15
  %44 = add i16 %15, %9
  %45 = sext i16 %42 to i64
  %46 = sext i16 %44 to i64
  %47 = sub nsw i64 %45, %46
  %48 = mul nsw i64 %47, 98
  %49 = lshr i64 %48, 8
  %50 = mul nsw i64 %45, 139
  %51 = lshr i64 %50, 8
  %52 = trunc i64 %51 to i32
  %53 = shl i64 %49, 16
  %54 = trunc i64 %53 to i32
  %55 = ashr exact i32 %54, 16
  %56 = add i32 %55, %52
  %57 = mul nsw i64 %46, 334
  %58 = lshr i64 %57, 8
  %59 = trunc i64 %58 to i32
  %60 = add i32 %55, %59
  %61 = sext i16 %43 to i64
  %62 = mul nsw i64 %61, 181
  %63 = lshr i64 %62, 8
  %64 = trunc i64 %63 to i16
  %65 = add i16 %9, %64
  %66 = sub i16 %9, %64
  %67 = trunc i32 %56 to i16
  %68 = add i16 %66, %67
  store i16 %68, i16* %18, align 2
  %69 = sub i16 %66, %67
  store i16 %69, i16* %22, align 2
  %70 = trunc i32 %60 to i16
  %71 = add i16 %65, %70
  store i16 %71, i16* %10, align 2
  %72 = sub i16 %65, %70
  store i16 %72, i16* %6, align 2
  %73 = getelementptr inbounds i16, i16* %4, i64 8
  %74 = add nsw i32 %3, -1
  %75 = icmp eq i32 %3, 0
  br i1 %75, label %76, label %2

76:                                               ; preds = %2
  %77 = getelementptr i16, i16* %0, i64 48
  %78 = bitcast i16* %77 to <8 x i16>*
  %79 = load <8 x i16>, <8 x i16>* %78, align 2
  %80 = bitcast i16* %0 to <8 x i16>*
  %81 = load <8 x i16>, <8 x i16>* %80, align 2
  %82 = getelementptr inbounds i16, i16* %0, i64 56
  %83 = bitcast i16* %82 to <8 x i16>*
  %84 = load <8 x i16>, <8 x i16>* %83, align 2
  %85 = add <8 x i16> %84, %81
  %86 = sub <8 x i16> %81, %84
  %87 = getelementptr inbounds i16, i16* %0, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2
  %90 = getelementptr inbounds i16, i16* %0, i64 48
  %91 = add <8 x i16> %79, %89
  %92 = sub <8 x i16> %89, %79
  %93 = getelementptr inbounds i16, i16* %0, i64 16
  %94 = bitcast i16* %93 to <8 x i16>*
  %95 = load <8 x i16>, <8 x i16>* %94, align 2
  %96 = getelementptr inbounds i16, i16* %0, i64 40
  %97 = bitcast i16* %96 to <8 x i16>*
  %98 = load <8 x i16>, <8 x i16>* %97, align 2
  %99 = add <8 x i16> %98, %95
  %100 = sub <8 x i16> %95, %98
  %101 = getelementptr inbounds i16, i16* %0, i64 24
  %102 = bitcast i16* %101 to <8 x i16>*
  %103 = load <8 x i16>, <8 x i16>* %102, align 2
  %104 = getelementptr inbounds i16, i16* %0, i64 32
  %105 = bitcast i16* %104 to <8 x i16>*
  %106 = load <8 x i16>, <8 x i16>* %105, align 2
  %107 = add <8 x i16> %106, %103
  %108 = add <8 x i16> %107, %85
  %109 = sub <8 x i16> %85, %107
  %110 = add <8 x i16> %99, %91
  %111 = sub <8 x i16> %91, %99
  %112 = add <8 x i16> %108, %110
  %113 = bitcast i16* %0 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %113, align 2
  %114 = sub <8 x i16> %108, %110
  %115 = bitcast i16* %104 to <8 x i16>*
  store <8 x i16> %114, <8 x i16>* %115, align 2
  %116 = sext <8 x i16> %111 to <8 x i32>
  %117 = sext <8 x i16> %109 to <8 x i32>
  %118 = add nsw <8 x i32> %117, %116
  %119 = mul <8 x i32> %118, <i32 46336, i32 46336, i32 46336, i32 46336, i32 46336, i32 46336, i32 46336, i32 46336>
  %120 = lshr <8 x i32> %119, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %121 = trunc <8 x i32> %120 to <8 x i16>
  %122 = add <8 x i16> %109, %121
  %123 = bitcast i16* %93 to <8 x i16>*
  store <8 x i16> %122, <8 x i16>* %123, align 2
  %124 = sub <8 x i16> %109, %121
  %125 = bitcast i16* %90 to <8 x i16>*
  store <8 x i16> %124, <8 x i16>* %125, align 2
  %126 = add <8 x i16> %100, %103
  %127 = sub <8 x i16> %126, %106
  %128 = add <8 x i16> %100, %92
  %129 = add <8 x i16> %92, %86
  %130 = sext <8 x i16> %127 to <8 x i64>
  %131 = sext <8 x i16> %129 to <8 x i64>
  %132 = sub nsw <8 x i64> %130, %131
  %133 = mul nsw <8 x i64> %132, <i64 98, i64 98, i64 98, i64 98, i64 98, i64 98, i64 98, i64 98>
  %134 = lshr <8 x i64> %133, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %135 = mul nsw <8 x i64> %130, <i64 139, i64 139, i64 139, i64 139, i64 139, i64 139, i64 139, i64 139>
  %136 = lshr <8 x i64> %135, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %137 = trunc <8 x i64> %136 to <8 x i32>
  %138 = shl <8 x i64> %134, <i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16, i64 16>
  %139 = trunc <8 x i64> %138 to <8 x i32>
  %140 = ashr exact <8 x i32> %139, <i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16, i32 16>
  %141 = add <8 x i32> %140, %137
  %142 = mul nsw <8 x i64> %131, <i64 334, i64 334, i64 334, i64 334, i64 334, i64 334, i64 334, i64 334>
  %143 = lshr <8 x i64> %142, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %144 = trunc <8 x i64> %143 to <8 x i32>
  %145 = add <8 x i32> %140, %144
  %146 = sext <8 x i16> %128 to <8 x i64>
  %147 = mul nsw <8 x i64> %146, <i64 181, i64 181, i64 181, i64 181, i64 181, i64 181, i64 181, i64 181>
  %148 = lshr <8 x i64> %147, <i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8, i64 8>
  %149 = trunc <8 x i64> %148 to <8 x i16>
  %150 = add <8 x i16> %86, %149
  %151 = sub <8 x i16> %86, %149
  %152 = trunc <8 x i32> %141 to <8 x i16>
  %153 = add <8 x i16> %151, %152
  %154 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %153, <8 x i16>* %154, align 2
  %155 = sub <8 x i16> %151, %152
  %156 = bitcast i16* %101 to <8 x i16>*
  store <8 x i16> %155, <8 x i16>* %156, align 2
  %157 = trunc <8 x i32> %145 to <8 x i16>
  %158 = add <8 x i16> %150, %157
  %159 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %158, <8 x i16>* %159, align 2
  %160 = sub <8 x i16> %150, %157
  %161 = bitcast i16* %82 to <8 x i16>*
  store <8 x i16> %160, <8 x i16>* %161, align 2
  ret void
}

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
