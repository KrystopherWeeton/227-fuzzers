; ModuleID = '../../third_party/blink/renderer/core/loader/link_load_parameters.cc'
source_filename = "../../third_party/blink/renderer/core/loader/link_load_parameters.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"struct.blink::LinkLoadParameters" = type { %"class.blink::LinkRelAttribute", i32, %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", i32, %"class.blink::KURL", %"class.WTF::String", %"class.WTF::String", %"class.absl::optional" }
%"class.blink::LinkRelAttribute" = type <{ i32, i16, [2 x i8] }>
%"class.blink::KURL" = type { i8, i8, %"class.WTF::String", %"struct.url::Parsed", %"class.WTF::String", %"class.std::__1::unique_ptr" }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.blink::KURL"* }
%"class.WTF::String" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.WTF::StringImpl"* }
%"class.WTF::StringImpl" = type { i32, i32, %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.absl::optional" = type { %"class.absl::optional_internal::optional_data" }
%"class.absl::optional_internal::optional_data" = type { %"class.absl::optional_internal::optional_data_base" }
%"class.absl::optional_internal::optional_data_base" = type { %"class.absl::optional_internal::optional_data_dtor_base" }
%"class.absl::optional_internal::optional_data_dtor_base" = type { i8, %union.anon }
%union.anon = type { %"class.base::UnguessableToken" }
%"class.base::UnguessableToken" = type { %"class.base::Token" }
%"class.base::Token" = type { i64, i64 }
%"class.blink::LinkHeader" = type <{ %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.WTF::String", %"class.absl::optional.2", i8, [7 x i8] }>
%"class.absl::optional.2" = type { %"class.absl::optional_internal::optional_data.3" }
%"class.absl::optional_internal::optional_data.3" = type { %"class.absl::optional_internal::optional_data_base.4" }
%"class.absl::optional_internal::optional_data_base.4" = type { %"class.absl::optional_internal::optional_data_dtor_base.5" }
%"class.absl::optional_internal::optional_data_dtor_base.5" = type { i8, %union.anon.6 }
%union.anon.6 = type { %"class.WTF::String" }

@_ZN5blink18LinkLoadParametersC1ERKNS_16LinkRelAttributeERKNS_25CrossOriginAttributeValueERKN3WTF6StringESA_SA_SA_SA_SA_N7network5mojom14ReferrerPolicyERKNS_4KURLESA_SA_ = hidden unnamed_addr alias void (%"struct.blink::LinkLoadParameters"*, %"class.blink::LinkRelAttribute"*, i32*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.WTF::String"*, i32, %"class.blink::KURL"*, %"class.WTF::String"*, %"class.WTF::String"*), void (%"struct.blink::LinkLoadParameters"*, %"class.blink::LinkRelAttribute"*, i32*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.WTF::String"*, %"class.WTF::String"*, i32, %"class.blink::KURL"*, %"class.WTF::String"*, %"class.WTF::String"*)* @_ZN5blink18LinkLoadParametersC2ERKNS_16LinkRelAttributeERKNS_25CrossOriginAttributeValueERKN3WTF6StringESA_SA_SA_SA_SA_N7network5mojom14ReferrerPolicyERKNS_4KURLESA_SA_
@_ZN5blink18LinkLoadParametersC1ERKNS_10LinkHeaderERKNS_4KURLE = hidden unnamed_addr alias void (%"struct.blink::LinkLoadParameters"*, %"class.blink::LinkHeader"*, %"class.blink::KURL"*), void (%"struct.blink::LinkLoadParameters"*, %"class.blink::LinkHeader"*, %"class.blink::KURL"*)* @_ZN5blink18LinkLoadParametersC2ERKNS_10LinkHeaderERKNS_4KURLE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink18LinkLoadParametersC2ERKNS_16LinkRelAttributeERKNS_25CrossOriginAttributeValueERKN3WTF6StringESA_SA_SA_SA_SA_N7network5mojom14ReferrerPolicyERKNS_4KURLESA_SA_(%"struct.blink::LinkLoadParameters"*, %"class.blink::LinkRelAttribute"* nocapture readonly dereferenceable(8), i32* nocapture readonly dereferenceable(4), %"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.WTF::String"* nocapture readonly dereferenceable(8), i32, %"class.blink::KURL"* dereferenceable(112), %"class.WTF::String"* nocapture readonly dereferenceable(8), %"class.WTF::String"* nocapture readonly dereferenceable(8)) unnamed_addr #0 align 2 {
  %14 = bitcast %"class.blink::LinkRelAttribute"* %1 to i64*
  %15 = bitcast %"struct.blink::LinkLoadParameters"* %0 to i64*
  %16 = load i64, i64* %14, align 4
  store i64 %16, i64* %15, align 8
  %17 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 1
  %18 = load i32, i32* %2, align 4
  store i32 %18, i32* %17, align 8
  %19 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %3, i64 0, i32 0, i32 0
  %20 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %19, align 8
  %21 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* %20, %"class.WTF::StringImpl"** %21, align 8
  %22 = icmp eq %"class.WTF::StringImpl"* %20, null
  br i1 %22, label %40, label %23

23:                                               ; preds = %13
  %24 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %25 = load atomic i32, i32* %24 monotonic, align 4
  %26 = and i32 %25, 2
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %40

28:                                               ; preds = %23
  %29 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %20, i64 0, i32 0
  %30 = load i32, i32* %29, align 4
  %31 = zext i32 %30 to i33
  %32 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %31, i33 1) #4
  %33 = extractvalue { i33, i1 } %32, 1
  %34 = extractvalue { i33, i1 } %32, 0
  %35 = icmp slt i33 %34, 0
  %36 = or i1 %33, %35
  br i1 %36, label %37, label %38, !prof !2

37:                                               ; preds = %28
  tail call void @llvm.trap() #4
  unreachable

38:                                               ; preds = %28
  %39 = trunc i33 %34 to i32
  store i32 %39, i32* %29, align 4
  br label %40

40:                                               ; preds = %13, %23, %38
  %41 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %4, i64 0, i32 0, i32 0
  %42 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %41, align 8
  %43 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 3, i32 0, i32 0
  store %"class.WTF::StringImpl"* %42, %"class.WTF::StringImpl"** %43, align 8
  %44 = icmp eq %"class.WTF::StringImpl"* %42, null
  br i1 %44, label %62, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %47 = load atomic i32, i32* %46 monotonic, align 4
  %48 = and i32 %47, 2
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %62

50:                                               ; preds = %45
  %51 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %42, i64 0, i32 0
  %52 = load i32, i32* %51, align 4
  %53 = zext i32 %52 to i33
  %54 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %53, i33 1) #4
  %55 = extractvalue { i33, i1 } %54, 1
  %56 = extractvalue { i33, i1 } %54, 0
  %57 = icmp slt i33 %56, 0
  %58 = or i1 %55, %57
  br i1 %58, label %59, label %60, !prof !2

59:                                               ; preds = %50
  tail call void @llvm.trap() #4
  unreachable

60:                                               ; preds = %50
  %61 = trunc i33 %56 to i32
  store i32 %61, i32* %51, align 4
  br label %62

62:                                               ; preds = %40, %45, %60
  %63 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %5, i64 0, i32 0, i32 0
  %64 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %63, align 8
  %65 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 4, i32 0, i32 0
  store %"class.WTF::StringImpl"* %64, %"class.WTF::StringImpl"** %65, align 8
  %66 = icmp eq %"class.WTF::StringImpl"* %64, null
  br i1 %66, label %84, label %67

67:                                               ; preds = %62
  %68 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = and i32 %69, 2
  %71 = icmp eq i32 %70, 0
  br i1 %71, label %72, label %84

72:                                               ; preds = %67
  %73 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %64, i64 0, i32 0
  %74 = load i32, i32* %73, align 4
  %75 = zext i32 %74 to i33
  %76 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %75, i33 1) #4
  %77 = extractvalue { i33, i1 } %76, 1
  %78 = extractvalue { i33, i1 } %76, 0
  %79 = icmp slt i33 %78, 0
  %80 = or i1 %77, %79
  br i1 %80, label %81, label %82, !prof !2

81:                                               ; preds = %72
  tail call void @llvm.trap() #4
  unreachable

82:                                               ; preds = %72
  %83 = trunc i33 %78 to i32
  store i32 %83, i32* %73, align 4
  br label %84

84:                                               ; preds = %62, %67, %82
  %85 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %6, i64 0, i32 0, i32 0
  %86 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %85, align 8
  %87 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* %86, %"class.WTF::StringImpl"** %87, align 8
  %88 = icmp eq %"class.WTF::StringImpl"* %86, null
  br i1 %88, label %106, label %89

89:                                               ; preds = %84
  %90 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %91 = load atomic i32, i32* %90 monotonic, align 4
  %92 = and i32 %91, 2
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %106

94:                                               ; preds = %89
  %95 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %86, i64 0, i32 0
  %96 = load i32, i32* %95, align 4
  %97 = zext i32 %96 to i33
  %98 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %97, i33 1) #4
  %99 = extractvalue { i33, i1 } %98, 1
  %100 = extractvalue { i33, i1 } %98, 0
  %101 = icmp slt i33 %100, 0
  %102 = or i1 %99, %101
  br i1 %102, label %103, label %104, !prof !2

103:                                              ; preds = %94
  tail call void @llvm.trap() #4
  unreachable

104:                                              ; preds = %94
  %105 = trunc i33 %100 to i32
  store i32 %105, i32* %95, align 4
  br label %106

106:                                              ; preds = %84, %89, %104
  %107 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %7, i64 0, i32 0, i32 0
  %108 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %107, align 8
  %109 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 6, i32 0, i32 0
  store %"class.WTF::StringImpl"* %108, %"class.WTF::StringImpl"** %109, align 8
  %110 = icmp eq %"class.WTF::StringImpl"* %108, null
  br i1 %110, label %128, label %111

111:                                              ; preds = %106
  %112 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %108, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %113 = load atomic i32, i32* %112 monotonic, align 4
  %114 = and i32 %113, 2
  %115 = icmp eq i32 %114, 0
  br i1 %115, label %116, label %128

116:                                              ; preds = %111
  %117 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %108, i64 0, i32 0
  %118 = load i32, i32* %117, align 4
  %119 = zext i32 %118 to i33
  %120 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %119, i33 1) #4
  %121 = extractvalue { i33, i1 } %120, 1
  %122 = extractvalue { i33, i1 } %120, 0
  %123 = icmp slt i33 %122, 0
  %124 = or i1 %121, %123
  br i1 %124, label %125, label %126, !prof !2

125:                                              ; preds = %116
  tail call void @llvm.trap() #4
  unreachable

126:                                              ; preds = %116
  %127 = trunc i33 %122 to i32
  store i32 %127, i32* %117, align 4
  br label %128

128:                                              ; preds = %106, %111, %126
  %129 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %8, i64 0, i32 0, i32 0
  %130 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %129, align 8
  %131 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 7, i32 0, i32 0
  store %"class.WTF::StringImpl"* %130, %"class.WTF::StringImpl"** %131, align 8
  %132 = icmp eq %"class.WTF::StringImpl"* %130, null
  br i1 %132, label %150, label %133

133:                                              ; preds = %128
  %134 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %130, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %135 = load atomic i32, i32* %134 monotonic, align 4
  %136 = and i32 %135, 2
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %150

138:                                              ; preds = %133
  %139 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %130, i64 0, i32 0
  %140 = load i32, i32* %139, align 4
  %141 = zext i32 %140 to i33
  %142 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %141, i33 1) #4
  %143 = extractvalue { i33, i1 } %142, 1
  %144 = extractvalue { i33, i1 } %142, 0
  %145 = icmp slt i33 %144, 0
  %146 = or i1 %143, %145
  br i1 %146, label %147, label %148, !prof !2

147:                                              ; preds = %138
  tail call void @llvm.trap() #4
  unreachable

148:                                              ; preds = %138
  %149 = trunc i33 %144 to i32
  store i32 %149, i32* %139, align 4
  br label %150

150:                                              ; preds = %128, %133, %148
  %151 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 8
  store i32 %9, i32* %151, align 8
  %152 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 9
  tail call void @_ZN5blink4KURLC1ERKS0_(%"class.blink::KURL"* %152, %"class.blink::KURL"* dereferenceable(112) %10) #4
  %153 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %11, i64 0, i32 0, i32 0
  %154 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %153, align 8
  %155 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 10, i32 0, i32 0
  store %"class.WTF::StringImpl"* %154, %"class.WTF::StringImpl"** %155, align 8
  %156 = icmp eq %"class.WTF::StringImpl"* %154, null
  br i1 %156, label %174, label %157

157:                                              ; preds = %150
  %158 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %154, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %159 = load atomic i32, i32* %158 monotonic, align 4
  %160 = and i32 %159, 2
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %162, label %174

162:                                              ; preds = %157
  %163 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %154, i64 0, i32 0
  %164 = load i32, i32* %163, align 4
  %165 = zext i32 %164 to i33
  %166 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %165, i33 1) #4
  %167 = extractvalue { i33, i1 } %166, 1
  %168 = extractvalue { i33, i1 } %166, 0
  %169 = icmp slt i33 %168, 0
  %170 = or i1 %167, %169
  br i1 %170, label %171, label %172, !prof !2

171:                                              ; preds = %162
  tail call void @llvm.trap() #4
  unreachable

172:                                              ; preds = %162
  %173 = trunc i33 %168 to i32
  store i32 %173, i32* %163, align 4
  br label %174

174:                                              ; preds = %150, %157, %172
  %175 = getelementptr inbounds %"class.WTF::String", %"class.WTF::String"* %12, i64 0, i32 0, i32 0
  %176 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %175, align 8
  %177 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 11, i32 0, i32 0
  store %"class.WTF::StringImpl"* %176, %"class.WTF::StringImpl"** %177, align 8
  %178 = icmp eq %"class.WTF::StringImpl"* %176, null
  br i1 %178, label %196, label %179

179:                                              ; preds = %174
  %180 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %176, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %181 = load atomic i32, i32* %180 monotonic, align 4
  %182 = and i32 %181, 2
  %183 = icmp eq i32 %182, 0
  br i1 %183, label %184, label %196

184:                                              ; preds = %179
  %185 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %176, i64 0, i32 0
  %186 = load i32, i32* %185, align 4
  %187 = zext i32 %186 to i33
  %188 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %187, i33 1) #4
  %189 = extractvalue { i33, i1 } %188, 1
  %190 = extractvalue { i33, i1 } %188, 0
  %191 = icmp slt i33 %190, 0
  %192 = or i1 %189, %191
  br i1 %192, label %193, label %194, !prof !2

193:                                              ; preds = %184
  tail call void @llvm.trap() #4
  unreachable

194:                                              ; preds = %184
  %195 = trunc i33 %190 to i32
  store i32 %195, i32* %185, align 4
  br label %196

196:                                              ; preds = %174, %179, %194
  %197 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 12, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %197, align 8
  ret void
}

declare void @_ZN5blink4KURLC1ERKS0_(%"class.blink::KURL"*, %"class.blink::KURL"* dereferenceable(112)) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN5blink18LinkLoadParametersC2ERKNS_10LinkHeaderERKNS_4KURLE(%"struct.blink::LinkLoadParameters"*, %"class.blink::LinkHeader"* dereferenceable(128), %"class.blink::KURL"* dereferenceable(112)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 0
  %5 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %1, i64 0, i32 1
  tail call void @_ZN5blink16LinkRelAttributeC1ERKN3WTF6StringE(%"class.blink::LinkRelAttribute"* %4, %"class.WTF::String"* dereferenceable(8) %5) #4
  %6 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 1
  %7 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %1, i64 0, i32 5
  %8 = tail call i32 @_ZN5blink28GetCrossOriginAttributeValueERKN3WTF6StringE(%"class.WTF::String"* dereferenceable(8) %7) #4
  store i32 %8, i32* %6, align 8
  %9 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %1, i64 0, i32 3, i32 0, i32 0
  %10 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %9, align 8
  %11 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 2, i32 0, i32 0
  store %"class.WTF::StringImpl"* %10, %"class.WTF::StringImpl"** %11, align 8
  %12 = icmp eq %"class.WTF::StringImpl"* %10, null
  br i1 %12, label %30, label %13

13:                                               ; preds = %3
  %14 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %15 = load atomic i32, i32* %14 monotonic, align 4
  %16 = and i32 %15, 2
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %30

18:                                               ; preds = %13
  %19 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %10, i64 0, i32 0
  %20 = load i32, i32* %19, align 4
  %21 = zext i32 %20 to i33
  %22 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %21, i33 1) #4
  %23 = extractvalue { i33, i1 } %22, 1
  %24 = extractvalue { i33, i1 } %22, 0
  %25 = icmp slt i33 %24, 0
  %26 = or i1 %23, %25
  br i1 %26, label %27, label %28, !prof !2

27:                                               ; preds = %18
  tail call void @llvm.trap() #4
  unreachable

28:                                               ; preds = %18
  %29 = trunc i33 %24 to i32
  store i32 %29, i32* %19, align 4
  br label %30

30:                                               ; preds = %3, %13, %28
  %31 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %1, i64 0, i32 2, i32 0, i32 0
  %32 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %31, align 8
  %33 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 3, i32 0, i32 0
  store %"class.WTF::StringImpl"* %32, %"class.WTF::StringImpl"** %33, align 8
  %34 = icmp eq %"class.WTF::StringImpl"* %32, null
  br i1 %34, label %52, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %37 = load atomic i32, i32* %36 monotonic, align 4
  %38 = and i32 %37, 2
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %40, label %52

40:                                               ; preds = %35
  %41 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %32, i64 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = zext i32 %42 to i33
  %44 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %43, i33 1) #4
  %45 = extractvalue { i33, i1 } %44, 1
  %46 = extractvalue { i33, i1 } %44, 0
  %47 = icmp slt i33 %46, 0
  %48 = or i1 %45, %47
  br i1 %48, label %49, label %50, !prof !2

49:                                               ; preds = %40
  tail call void @llvm.trap() #4
  unreachable

50:                                               ; preds = %40
  %51 = trunc i33 %46 to i32
  store i32 %51, i32* %41, align 4
  br label %52

52:                                               ; preds = %30, %35, %50
  %53 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %1, i64 0, i32 4, i32 0, i32 0
  %54 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %53, align 8
  %55 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 4, i32 0, i32 0
  store %"class.WTF::StringImpl"* %54, %"class.WTF::StringImpl"** %55, align 8
  %56 = icmp eq %"class.WTF::StringImpl"* %54, null
  br i1 %56, label %74, label %57

57:                                               ; preds = %52
  %58 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %59 = load atomic i32, i32* %58 monotonic, align 4
  %60 = and i32 %59, 2
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %62, label %74

62:                                               ; preds = %57
  %63 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %54, i64 0, i32 0
  %64 = load i32, i32* %63, align 4
  %65 = zext i32 %64 to i33
  %66 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %65, i33 1) #4
  %67 = extractvalue { i33, i1 } %66, 1
  %68 = extractvalue { i33, i1 } %66, 0
  %69 = icmp slt i33 %68, 0
  %70 = or i1 %67, %69
  br i1 %70, label %71, label %72, !prof !2

71:                                               ; preds = %62
  tail call void @llvm.trap() #4
  unreachable

72:                                               ; preds = %62
  %73 = trunc i33 %68 to i32
  store i32 %73, i32* %63, align 4
  br label %74

74:                                               ; preds = %52, %57, %72
  %75 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %1, i64 0, i32 6, i32 0, i32 0
  %76 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %75, align 8
  %77 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 5, i32 0, i32 0
  store %"class.WTF::StringImpl"* %76, %"class.WTF::StringImpl"** %77, align 8
  %78 = icmp eq %"class.WTF::StringImpl"* %76, null
  br i1 %78, label %96, label %79

79:                                               ; preds = %74
  %80 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %76, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %81 = load atomic i32, i32* %80 monotonic, align 4
  %82 = and i32 %81, 2
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %96

84:                                               ; preds = %79
  %85 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %76, i64 0, i32 0
  %86 = load i32, i32* %85, align 4
  %87 = zext i32 %86 to i33
  %88 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %87, i33 1) #4
  %89 = extractvalue { i33, i1 } %88, 1
  %90 = extractvalue { i33, i1 } %88, 0
  %91 = icmp slt i33 %90, 0
  %92 = or i1 %89, %91
  br i1 %92, label %93, label %94, !prof !2

93:                                               ; preds = %84
  tail call void @llvm.trap() #4
  unreachable

94:                                               ; preds = %84
  %95 = trunc i33 %90 to i32
  store i32 %95, i32* %85, align 4
  br label %96

96:                                               ; preds = %74, %79, %94
  %97 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %1, i64 0, i32 7, i32 0, i32 0
  %98 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %97, align 8
  %99 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 6, i32 0, i32 0
  store %"class.WTF::StringImpl"* %98, %"class.WTF::StringImpl"** %99, align 8
  %100 = icmp eq %"class.WTF::StringImpl"* %98, null
  br i1 %100, label %118, label %101

101:                                              ; preds = %96
  %102 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %103 = load atomic i32, i32* %102 monotonic, align 4
  %104 = and i32 %103, 2
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %118

106:                                              ; preds = %101
  %107 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %98, i64 0, i32 0
  %108 = load i32, i32* %107, align 4
  %109 = zext i32 %108 to i33
  %110 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %109, i33 1) #4
  %111 = extractvalue { i33, i1 } %110, 1
  %112 = extractvalue { i33, i1 } %110, 0
  %113 = icmp slt i33 %112, 0
  %114 = or i1 %111, %113
  br i1 %114, label %115, label %116, !prof !2

115:                                              ; preds = %106
  tail call void @llvm.trap() #4
  unreachable

116:                                              ; preds = %106
  %117 = trunc i33 %112 to i32
  store i32 %117, i32* %107, align 4
  br label %118

118:                                              ; preds = %96, %101, %116
  %119 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 7, i32 0, i32 0
  store %"class.WTF::StringImpl"* null, %"class.WTF::StringImpl"** %119, align 8
  %120 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 8
  store i32 1, i32* %120, align 8
  %121 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 9
  %122 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %1, i64 0, i32 0
  tail call void @_ZN5blink4KURLC1ERKS0_RKN3WTF6StringE(%"class.blink::KURL"* %121, %"class.blink::KURL"* dereferenceable(112) %2, %"class.WTF::String"* dereferenceable(8) %122) #4
  %123 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %1, i64 0, i32 8, i32 0, i32 0
  %124 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %123, align 8
  %125 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 10, i32 0, i32 0
  store %"class.WTF::StringImpl"* %124, %"class.WTF::StringImpl"** %125, align 8
  %126 = icmp eq %"class.WTF::StringImpl"* %124, null
  br i1 %126, label %144, label %127

127:                                              ; preds = %118
  %128 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %124, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %129 = load atomic i32, i32* %128 monotonic, align 4
  %130 = and i32 %129, 2
  %131 = icmp eq i32 %130, 0
  br i1 %131, label %132, label %144

132:                                              ; preds = %127
  %133 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %124, i64 0, i32 0
  %134 = load i32, i32* %133, align 4
  %135 = zext i32 %134 to i33
  %136 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %135, i33 1) #4
  %137 = extractvalue { i33, i1 } %136, 1
  %138 = extractvalue { i33, i1 } %136, 0
  %139 = icmp slt i33 %138, 0
  %140 = or i1 %137, %139
  br i1 %140, label %141, label %142, !prof !2

141:                                              ; preds = %132
  tail call void @llvm.trap() #4
  unreachable

142:                                              ; preds = %132
  %143 = trunc i33 %138 to i32
  store i32 %143, i32* %133, align 4
  br label %144

144:                                              ; preds = %118, %127, %142
  %145 = getelementptr inbounds %"class.blink::LinkHeader", %"class.blink::LinkHeader"* %1, i64 0, i32 9, i32 0, i32 0
  %146 = load %"class.WTF::StringImpl"*, %"class.WTF::StringImpl"** %145, align 8
  %147 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 11, i32 0, i32 0
  store %"class.WTF::StringImpl"* %146, %"class.WTF::StringImpl"** %147, align 8
  %148 = icmp eq %"class.WTF::StringImpl"* %146, null
  br i1 %148, label %166, label %149

149:                                              ; preds = %144
  %150 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %146, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0
  %151 = load atomic i32, i32* %150 monotonic, align 4
  %152 = and i32 %151, 2
  %153 = icmp eq i32 %152, 0
  br i1 %153, label %154, label %166

154:                                              ; preds = %149
  %155 = getelementptr inbounds %"class.WTF::StringImpl", %"class.WTF::StringImpl"* %146, i64 0, i32 0
  %156 = load i32, i32* %155, align 4
  %157 = zext i32 %156 to i33
  %158 = tail call { i33, i1 } @llvm.sadd.with.overflow.i33(i33 %157, i33 1) #4
  %159 = extractvalue { i33, i1 } %158, 1
  %160 = extractvalue { i33, i1 } %158, 0
  %161 = icmp slt i33 %160, 0
  %162 = or i1 %159, %161
  br i1 %162, label %163, label %164, !prof !2

163:                                              ; preds = %154
  tail call void @llvm.trap() #4
  unreachable

164:                                              ; preds = %154
  %165 = trunc i33 %160 to i32
  store i32 %165, i32* %155, align 4
  br label %166

166:                                              ; preds = %144, %149, %164
  %167 = getelementptr inbounds %"struct.blink::LinkLoadParameters", %"struct.blink::LinkLoadParameters"* %0, i64 0, i32 12, i32 0, i32 0, i32 0, i32 0
  store i8 0, i8* %167, align 8
  ret void
}

declare void @_ZN5blink16LinkRelAttributeC1ERKN3WTF6StringE(%"class.blink::LinkRelAttribute"*, %"class.WTF::String"* dereferenceable(8)) unnamed_addr #1

declare i32 @_ZN5blink28GetCrossOriginAttributeValueERKN3WTF6StringE(%"class.WTF::String"* dereferenceable(8)) local_unnamed_addr #1

declare void @_ZN5blink4KURLC1ERKS0_RKN3WTF6StringE(%"class.blink::KURL"*, %"class.blink::KURL"* dereferenceable(112), %"class.WTF::String"* dereferenceable(8)) unnamed_addr #1

; Function Attrs: nounwind readnone speculatable
declare { i33, i1 } @llvm.sadd.with.overflow.i33(i33, i33) #2

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { cold noreturn nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
