; ModuleID = '../../third_party/harfbuzz-ng/src/src/hb-ot-shape-complex-thai.cc'
source_filename = "../../third_party/harfbuzz-ng/src/src/hb-ot-shape-complex-thai.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.hb_ot_shape_planner_t = type { %struct.hb_face_t*, %struct.hb_segment_properties_t, %struct.hb_ot_map_builder_t, %struct.hb_aat_map_builder_t, i8, %struct.hb_ot_complex_shaper_t* }
%struct.hb_face_t = type { %struct.hb_object_header_t, %struct.hb_blob_t* (%struct.hb_face_t*, i32, i8*)*, i8*, void (i8*)*, i32, %struct.hb_atomic_int_t, %struct.hb_atomic_int_t, %struct.hb_shaper_object_dataset_t, %struct.hb_ot_face_t, %struct.hb_atomic_ptr_t.126 }
%struct.hb_object_header_t = type { %struct.hb_reference_count_t, %struct.hb_atomic_int_t, %struct.hb_atomic_ptr_t }
%struct.hb_reference_count_t = type { %struct.hb_atomic_int_t }
%struct.hb_atomic_ptr_t = type { %struct.hb_user_data_array_t* }
%struct.hb_user_data_array_t = type { %struct.hb_mutex_t, %struct.hb_lockable_set_t }
%struct.hb_mutex_t = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.hb_lockable_set_t = type { %struct.hb_vector_t }
%struct.hb_vector_t = type { i32, i32, %"struct.hb_user_data_array_t::hb_user_data_item_t"* }
%"struct.hb_user_data_array_t::hb_user_data_item_t" = type { %struct.hb_user_data_key_t*, i8*, void (i8*)* }
%struct.hb_user_data_key_t = type { i8 }
%struct.hb_blob_t = type { %struct.hb_object_header_t, i8*, i32, i32, i8*, void (i8*)* }
%struct.hb_atomic_int_t = type { i32 }
%struct.hb_shaper_object_dataset_t = type { %struct.hb_face_t*, %struct.hb_shaper_lazy_loader_t }
%struct.hb_shaper_lazy_loader_t = type { %struct.hb_lazy_loader_t }
%struct.hb_lazy_loader_t = type { %struct.hb_atomic_ptr_t.0 }
%struct.hb_atomic_ptr_t.0 = type { %struct.hb_ot_face_data_t* }
%struct.hb_ot_face_data_t = type opaque
%struct.hb_ot_face_t = type { %struct.hb_face_t*, %struct.hb_table_lazy_loader_t, %struct.hb_face_lazy_loader_t, %struct.hb_table_lazy_loader_t.6, %struct.hb_face_lazy_loader_t.9, %struct.hb_table_lazy_loader_t.13, %struct.hb_face_lazy_loader_t.16, %struct.hb_face_lazy_loader_t.20, %struct.hb_table_lazy_loader_t.24, %struct.hb_face_lazy_loader_t.27, %struct.hb_table_lazy_loader_t.31, %struct.hb_face_lazy_loader_t.34, %struct.hb_face_lazy_loader_t.38, %struct.hb_face_lazy_loader_t.42, %struct.hb_face_lazy_loader_t.46, %struct.hb_table_lazy_loader_t.50, %struct.hb_table_lazy_loader_t.53, %struct.hb_table_lazy_loader_t.56, %struct.hb_face_lazy_loader_t.59, %struct.hb_table_lazy_loader_t.63, %struct.hb_table_lazy_loader_t.66, %struct.hb_face_lazy_loader_t.69, %struct.hb_face_lazy_loader_t.73, %struct.hb_face_lazy_loader_t.77, %struct.hb_table_lazy_loader_t.81, %struct.hb_table_lazy_loader_t.84, %struct.hb_table_lazy_loader_t.87, %struct.hb_table_lazy_loader_t.90, %struct.hb_table_lazy_loader_t.93, %struct.hb_table_lazy_loader_t.96, %struct.hb_table_lazy_loader_t.99, %struct.hb_table_lazy_loader_t.102, %struct.hb_table_lazy_loader_t.105, %struct.hb_table_lazy_loader_t.108, %struct.hb_face_lazy_loader_t.111, %struct.hb_face_lazy_loader_t.115, %struct.hb_face_lazy_loader_t.119, %struct.hb_table_lazy_loader_t.123 }
%struct.hb_table_lazy_loader_t = type { %struct.hb_lazy_loader_t.1 }
%struct.hb_lazy_loader_t.1 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_atomic_ptr_t.2 = type { %struct.hb_blob_t* }
%struct.hb_face_lazy_loader_t = type { %struct.hb_lazy_loader_t.3 }
%struct.hb_lazy_loader_t.3 = type { %struct.hb_atomic_ptr_t.5 }
%struct.hb_atomic_ptr_t.5 = type { %"struct.OT::cmap_accelerator_t"* }
%"struct.OT::cmap_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.6 = type { %struct.hb_lazy_loader_t.7 }
%struct.hb_lazy_loader_t.7 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.9 = type { %struct.hb_lazy_loader_t.10 }
%struct.hb_lazy_loader_t.10 = type { %struct.hb_atomic_ptr_t.12 }
%struct.hb_atomic_ptr_t.12 = type { %"struct.OT::hmtx_accelerator_t"* }
%"struct.OT::hmtx_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.13 = type { %struct.hb_lazy_loader_t.14 }
%struct.hb_lazy_loader_t.14 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.16 = type { %struct.hb_lazy_loader_t.17 }
%struct.hb_lazy_loader_t.17 = type { %struct.hb_atomic_ptr_t.19 }
%struct.hb_atomic_ptr_t.19 = type { %"struct.OT::post_accelerator_t"* }
%"struct.OT::post_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.20 = type { %struct.hb_lazy_loader_t.21 }
%struct.hb_lazy_loader_t.21 = type { %struct.hb_atomic_ptr_t.23 }
%struct.hb_atomic_ptr_t.23 = type { %"struct.OT::name_accelerator_t"* }
%"struct.OT::name_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.24 = type { %struct.hb_lazy_loader_t.25 }
%struct.hb_lazy_loader_t.25 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.27 = type { %struct.hb_lazy_loader_t.28 }
%struct.hb_lazy_loader_t.28 = type { %struct.hb_atomic_ptr_t.30 }
%struct.hb_atomic_ptr_t.30 = type { %"struct.OT::meta_accelerator_t"* }
%"struct.OT::meta_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.31 = type { %struct.hb_lazy_loader_t.32 }
%struct.hb_lazy_loader_t.32 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.34 = type { %struct.hb_lazy_loader_t.35 }
%struct.hb_lazy_loader_t.35 = type { %struct.hb_atomic_ptr_t.37 }
%struct.hb_atomic_ptr_t.37 = type { %"struct.OT::vmtx_accelerator_t"* }
%"struct.OT::vmtx_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.38 = type { %struct.hb_lazy_loader_t.39 }
%struct.hb_lazy_loader_t.39 = type { %struct.hb_atomic_ptr_t.41 }
%struct.hb_atomic_ptr_t.41 = type { %"struct.OT::glyf_accelerator_t"* }
%"struct.OT::glyf_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.42 = type { %struct.hb_lazy_loader_t.43 }
%struct.hb_lazy_loader_t.43 = type { %struct.hb_atomic_ptr_t.45 }
%struct.hb_atomic_ptr_t.45 = type { %"struct.OT::cff1_accelerator_t"* }
%"struct.OT::cff1_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.46 = type { %struct.hb_lazy_loader_t.47 }
%struct.hb_lazy_loader_t.47 = type { %struct.hb_atomic_ptr_t.49 }
%struct.hb_atomic_ptr_t.49 = type { %"struct.OT::cff2_accelerator_t"* }
%"struct.OT::cff2_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.50 = type { %struct.hb_lazy_loader_t.51 }
%struct.hb_lazy_loader_t.51 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.53 = type { %struct.hb_lazy_loader_t.54 }
%struct.hb_lazy_loader_t.54 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.56 = type { %struct.hb_lazy_loader_t.57 }
%struct.hb_lazy_loader_t.57 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.59 = type { %struct.hb_lazy_loader_t.60 }
%struct.hb_lazy_loader_t.60 = type { %struct.hb_atomic_ptr_t.62 }
%struct.hb_atomic_ptr_t.62 = type { %"struct.OT::gvar_accelerator_t"* }
%"struct.OT::gvar_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.63 = type { %struct.hb_lazy_loader_t.64 }
%struct.hb_lazy_loader_t.64 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.66 = type { %struct.hb_lazy_loader_t.67 }
%struct.hb_lazy_loader_t.67 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.69 = type { %struct.hb_lazy_loader_t.70 }
%struct.hb_lazy_loader_t.70 = type { %struct.hb_atomic_ptr_t.72 }
%struct.hb_atomic_ptr_t.72 = type { %"struct.OT::GDEF_accelerator_t"* }
%"struct.OT::GDEF_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.73 = type { %struct.hb_lazy_loader_t.74 }
%struct.hb_lazy_loader_t.74 = type { %struct.hb_atomic_ptr_t.76 }
%struct.hb_atomic_ptr_t.76 = type { %"struct.OT::GSUB_accelerator_t"* }
%"struct.OT::GSUB_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.77 = type { %struct.hb_lazy_loader_t.78 }
%struct.hb_lazy_loader_t.78 = type { %struct.hb_atomic_ptr_t.80 }
%struct.hb_atomic_ptr_t.80 = type { %"struct.OT::GPOS_accelerator_t"* }
%"struct.OT::GPOS_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.81 = type { %struct.hb_lazy_loader_t.82 }
%struct.hb_lazy_loader_t.82 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.84 = type { %struct.hb_lazy_loader_t.85 }
%struct.hb_lazy_loader_t.85 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.87 = type { %struct.hb_lazy_loader_t.88 }
%struct.hb_lazy_loader_t.88 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.90 = type { %struct.hb_lazy_loader_t.91 }
%struct.hb_lazy_loader_t.91 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.93 = type { %struct.hb_lazy_loader_t.94 }
%struct.hb_lazy_loader_t.94 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.96 = type { %struct.hb_lazy_loader_t.97 }
%struct.hb_lazy_loader_t.97 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.99 = type { %struct.hb_lazy_loader_t.100 }
%struct.hb_lazy_loader_t.100 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.102 = type { %struct.hb_lazy_loader_t.103 }
%struct.hb_lazy_loader_t.103 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.105 = type { %struct.hb_lazy_loader_t.106 }
%struct.hb_lazy_loader_t.106 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_table_lazy_loader_t.108 = type { %struct.hb_lazy_loader_t.109 }
%struct.hb_lazy_loader_t.109 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_face_lazy_loader_t.111 = type { %struct.hb_lazy_loader_t.112 }
%struct.hb_lazy_loader_t.112 = type { %struct.hb_atomic_ptr_t.114 }
%struct.hb_atomic_ptr_t.114 = type { %"struct.OT::CBDT_accelerator_t"* }
%"struct.OT::CBDT_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.115 = type { %struct.hb_lazy_loader_t.116 }
%struct.hb_lazy_loader_t.116 = type { %struct.hb_atomic_ptr_t.118 }
%struct.hb_atomic_ptr_t.118 = type { %"struct.OT::sbix_accelerator_t"* }
%"struct.OT::sbix_accelerator_t" = type opaque
%struct.hb_face_lazy_loader_t.119 = type { %struct.hb_lazy_loader_t.120 }
%struct.hb_lazy_loader_t.120 = type { %struct.hb_atomic_ptr_t.122 }
%struct.hb_atomic_ptr_t.122 = type { %"struct.OT::SVG_accelerator_t"* }
%"struct.OT::SVG_accelerator_t" = type opaque
%struct.hb_table_lazy_loader_t.123 = type { %struct.hb_lazy_loader_t.124 }
%struct.hb_lazy_loader_t.124 = type { %struct.hb_atomic_ptr_t.2 }
%struct.hb_atomic_ptr_t.126 = type { %"struct.hb_face_t::plan_node_t"* }
%"struct.hb_face_t::plan_node_t" = type { %struct.hb_shape_plan_t*, %"struct.hb_face_t::plan_node_t"* }
%struct.hb_shape_plan_t = type { %struct.hb_object_header_t, %struct.hb_face_t*, %struct.hb_shape_plan_key_t, %struct.hb_ot_shape_plan_t }
%struct.hb_shape_plan_key_t = type { %struct.hb_segment_properties_t, %struct.hb_feature_t*, i32, %struct.hb_ot_shape_plan_key_t, i32 (%struct.hb_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*, %struct.hb_feature_t*, i32)*, i8* }
%struct.hb_feature_t = type { i32, i32, i32, i32 }
%struct.hb_ot_shape_plan_key_t = type { [2 x i32] }
%struct.hb_font_t = type { %struct.hb_object_header_t, %struct.hb_font_t*, %struct.hb_face_t*, i32, i32, i64, i64, i32, i32, float, i32, i32*, float*, %struct.hb_font_funcs_t*, i8*, void (i8*)*, %struct.hb_shaper_object_dataset_t.128 }
%struct.hb_font_funcs_t = type { %struct.hb_object_header_t, %struct.anon, %struct.anon.127, %"union.hb_font_funcs_t::get_t" }
%struct.anon = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%struct.anon.127 = type { void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)* }
%"union.hb_font_funcs_t::get_t" = type { %"struct.hb_font_funcs_t::get_t::get_funcs_t" }
%"struct.hb_font_funcs_t::get_t::get_funcs_t" = type { i32 (%struct.hb_font_t*, i8*, %struct.hb_font_extents_t*, i8*)*, i32 (%struct.hb_font_t*, i8*, %struct.hb_font_extents_t*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32*, i32, i32*, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i8*)*, void (%struct.hb_font_t*, i8*, i32, i32*, i32, i32*, i32, i8*)*, void (%struct.hb_font_t*, i8*, i32, i32*, i32, i32*, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32*, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32*, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, %struct.hb_glyph_extents_t*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i32, i32*, i32*, i8*)*, i32 (%struct.hb_font_t*, i8*, i32, i8*, i32, i8*)*, i32 (%struct.hb_font_t*, i8*, i8*, i32, i32*, i8*)* }
%struct.hb_font_extents_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.hb_glyph_extents_t = type { i32, i32, i32, i32 }
%struct.hb_shaper_object_dataset_t.128 = type { %struct.hb_font_t*, %struct.hb_shaper_lazy_loader_t.129 }
%struct.hb_shaper_lazy_loader_t.129 = type { %struct.hb_lazy_loader_t.130 }
%struct.hb_lazy_loader_t.130 = type { %struct.hb_atomic_ptr_t.132 }
%struct.hb_atomic_ptr_t.132 = type { %struct.hb_ot_font_data_t* }
%struct.hb_ot_font_data_t = type opaque
%struct.hb_buffer_t = type { %struct.hb_object_header_t, %struct.hb_unicode_funcs_t*, i32, i32, i32, i32, i32, i32, i32, i32, %struct.hb_segment_properties_t, i8, i8, i8, i32, i32, i32, i32, %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t*, %struct.hb_glyph_position_t*, i32, [2 x [5 x i32]], [2 x i32], i32 (%struct.hb_buffer_t*, %struct.hb_font_t*, i8*, i8*)*, i8*, void (i8*)* }
%struct.hb_unicode_funcs_t = type { %struct.hb_object_header_t, %struct.hb_unicode_funcs_t*, %struct.anon.133, %struct.anon.134, %struct.anon.135 }
%struct.anon.133 = type { i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i32, i32*, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i32*, i32*, i8*)*, i32 (%struct.hb_unicode_funcs_t*, i32, i32*, i8*)* }
%struct.anon.134 = type { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8* }
%struct.anon.135 = type { void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)*, void (i8*)* }
%struct.hb_glyph_info_t = type { i32, i32, i32, %union._hb_var_int_t, %union._hb_var_int_t }
%union._hb_var_int_t = type { i32 }
%struct.hb_glyph_position_t = type { i32, i32, i32, i32, %union._hb_var_int_t }
%struct.hb_ot_shape_plan_t = type <{ %struct.hb_segment_properties_t, %struct.hb_ot_complex_shaper_t*, %struct.hb_ot_map_t, %struct.hb_aat_map_t, i8*, i32, i32, i32, i32, i32, i32, i16, [6 x i8] }>
%struct.hb_ot_map_t = type { [2 x i32], [2 x i8], i32, %struct.hb_sorted_vector_t, [2 x %struct.hb_vector_t.137], [2 x %struct.hb_vector_t.138] }
%struct.hb_sorted_vector_t = type { %struct.hb_vector_t.136 }
%struct.hb_vector_t.136 = type { i32, i32, %"struct.hb_ot_map_t::feature_map_t"* }
%"struct.hb_ot_map_t::feature_map_t" = type { i32, [2 x i32], [2 x i32], i32, i32, i32, i8 }
%struct.hb_vector_t.137 = type { i32, i32, %"struct.hb_ot_map_t::lookup_map_t"* }
%"struct.hb_ot_map_t::lookup_map_t" = type { i16, i8, i32 }
%struct.hb_vector_t.138 = type { i32, i32, %"struct.hb_ot_map_t::stage_map_t"* }
%"struct.hb_ot_map_t::stage_map_t" = type { i32, void (%struct.hb_ot_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*)* }
%struct.hb_aat_map_t = type { %struct.hb_vector_t.139 }
%struct.hb_vector_t.139 = type { i32, i32, i32* }
%struct.hb_segment_properties_t = type { i32, i32, %struct.hb_language_impl_t*, i8*, i8* }
%struct.hb_language_impl_t = type opaque
%struct.hb_ot_map_builder_t = type { %struct.hb_face_t*, %struct.hb_segment_properties_t, [2 x i32], [2 x i8], [2 x i32], [2 x i32], [2 x i32], %struct.hb_vector_t.140, [2 x %struct.hb_vector_t.141] }
%struct.hb_vector_t.140 = type { i32, i32, %"struct.hb_ot_map_builder_t::feature_info_t"* }
%"struct.hb_ot_map_builder_t::feature_info_t" = type { i32, i32, i32, i32, i32, [2 x i32] }
%struct.hb_vector_t.141 = type { i32, i32, %"struct.hb_ot_map_builder_t::stage_info_t"* }
%"struct.hb_ot_map_builder_t::stage_info_t" = type { i32, void (%struct.hb_ot_shape_plan_t*, %struct.hb_font_t*, %struct.hb_buffer_t*)* }
%struct.hb_aat_map_builder_t = type { %struct.hb_face_t*, %struct.hb_sorted_vector_t.142 }
%struct.hb_sorted_vector_t.142 = type { %struct.hb_vector_t.143 }
%struct.hb_vector_t.143 = type { i32, i32, %"struct.hb_aat_map_builder_t::feature_info_t"* }
%"struct.hb_aat_map_builder_t::feature_info_t" = type { i32, i32, i8, i32 }
%struct.hb_ot_complex_shaper_t = type { {}*, {}*, i8* (%struct.hb_ot_shape_plan_t*)*, void (i8*)*, void (%struct.hb_ot_shape_plan_t*, %struct.hb_buffer_t*, %struct.hb_font_t*)*, void (%struct.hb_ot_shape_plan_t*, %struct.hb_buffer_t*, %struct.hb_font_t*)*, i32, i1 (%struct.hb_ot_shape_normalize_context_t*, i32, i32*, i32*)*, i1 (%struct.hb_ot_shape_normalize_context_t*, i32, i32, i32*)*, void (%struct.hb_ot_shape_plan_t*, %struct.hb_buffer_t*, %struct.hb_font_t*)*, i32, void (%struct.hb_ot_shape_plan_t*, %struct.hb_buffer_t*, i32, i32)*, i32, i8 }
%struct.hb_ot_shape_normalize_context_t = type { %struct.hb_ot_shape_plan_t*, %struct.hb_buffer_t*, %struct.hb_font_t*, %struct.hb_unicode_funcs_t*, {}*, i1 (%struct.hb_ot_shape_normalize_context_t*, i32, i32, i32*)* }
%struct.thai_above_state_machine_edge_t = type { i32, i32 }
%struct.thai_below_state_machine_edge_t = type { i32, i32 }
%struct.thai_pua_mapping_t = type { i32, i32, i32 }

@_hb_ot_complex_shaper_thai = hidden local_unnamed_addr constant { void (%struct.hb_ot_shape_planner_t*)*, void (%struct.hb_ot_shape_planner_t*)*, i8* (%struct.hb_ot_shape_plan_t*)*, void (i8*)*, void (%struct.hb_ot_shape_plan_t*, %struct.hb_buffer_t*, %struct.hb_font_t*)*, void (%struct.hb_ot_shape_plan_t*, %struct.hb_buffer_t*, %struct.hb_font_t*)*, i32, i1 (%struct.hb_ot_shape_normalize_context_t*, i32, i32*, i32*)*, i1 (%struct.hb_ot_shape_normalize_context_t*, i32, i32, i32*)*, void (%struct.hb_ot_shape_plan_t*, %struct.hb_buffer_t*, %struct.hb_font_t*)*, i32, void (%struct.hb_ot_shape_plan_t*, %struct.hb_buffer_t*, i32, i32)*, i32, i8 } { void (%struct.hb_ot_shape_planner_t*)* null, void (%struct.hb_ot_shape_planner_t*)* null, i8* (%struct.hb_ot_shape_plan_t*)* null, void (i8*)* null, void (%struct.hb_ot_shape_plan_t*, %struct.hb_buffer_t*, %struct.hb_font_t*)* @_ZL20preprocess_text_thaiPK18hb_ot_shape_plan_tP11hb_buffer_tP9hb_font_t, void (%struct.hb_ot_shape_plan_t*, %struct.hb_buffer_t*, %struct.hb_font_t*)* null, i32 4, i1 (%struct.hb_ot_shape_normalize_context_t*, i32, i32*, i32*)* null, i1 (%struct.hb_ot_shape_normalize_context_t*, i32, i32, i32*)* null, void (%struct.hb_ot_shape_plan_t*, %struct.hb_buffer_t*, %struct.hb_font_t*)* null, i32 0, void (%struct.hb_ot_shape_plan_t*, %struct.hb_buffer_t*, i32, i32)* null, i32 2, i8 0 }, align 8
@_ZL22thai_above_start_state = internal unnamed_addr constant [5 x i32] [i32 0, i32 1, i32 0, i32 0, i32 3], align 16
@_ZL22thai_below_start_state = internal unnamed_addr constant [5 x i32] [i32 0, i32 0, i32 1, i32 2, i32 2], align 16
@_ZL24thai_above_state_machine = internal unnamed_addr constant [4 x [3 x %struct.thai_above_state_machine_edge_t]] [[3 x %struct.thai_above_state_machine_edge_t] [%struct.thai_above_state_machine_edge_t { i32 0, i32 3 }, %struct.thai_above_state_machine_edge_t zeroinitializer, %struct.thai_above_state_machine_edge_t { i32 1, i32 3 }], [3 x %struct.thai_above_state_machine_edge_t] [%struct.thai_above_state_machine_edge_t { i32 2, i32 2 }, %struct.thai_above_state_machine_edge_t { i32 0, i32 1 }, %struct.thai_above_state_machine_edge_t { i32 3, i32 2 }], [3 x %struct.thai_above_state_machine_edge_t] [%struct.thai_above_state_machine_edge_t { i32 0, i32 3 }, %struct.thai_above_state_machine_edge_t { i32 0, i32 2 }, %struct.thai_above_state_machine_edge_t { i32 2, i32 3 }], [3 x %struct.thai_above_state_machine_edge_t] [%struct.thai_above_state_machine_edge_t { i32 0, i32 3 }, %struct.thai_above_state_machine_edge_t { i32 0, i32 3 }, %struct.thai_above_state_machine_edge_t { i32 0, i32 3 }]], align 16
@_ZL24thai_below_state_machine = internal unnamed_addr constant [3 x [3 x %struct.thai_below_state_machine_edge_t]] [[3 x %struct.thai_below_state_machine_edge_t] [%struct.thai_below_state_machine_edge_t zeroinitializer, %struct.thai_below_state_machine_edge_t { i32 0, i32 2 }, %struct.thai_below_state_machine_edge_t zeroinitializer], [3 x %struct.thai_below_state_machine_edge_t] [%struct.thai_below_state_machine_edge_t { i32 0, i32 1 }, %struct.thai_below_state_machine_edge_t { i32 4, i32 2 }, %struct.thai_below_state_machine_edge_t { i32 0, i32 1 }], [3 x %struct.thai_below_state_machine_edge_t] [%struct.thai_below_state_machine_edge_t { i32 0, i32 2 }, %struct.thai_below_state_machine_edge_t { i32 1, i32 2 }, %struct.thai_below_state_machine_edge_t { i32 0, i32 2 }]], align 16
@_ZZL14thai_pua_shapej13thai_action_tP9hb_font_tE11SD_mappings = internal unnamed_addr constant [9 x %struct.thai_pua_mapping_t] [%struct.thai_pua_mapping_t { i32 3656, i32 63242, i32 63627 }, %struct.thai_pua_mapping_t { i32 3657, i32 63243, i32 63630 }, %struct.thai_pua_mapping_t { i32 3658, i32 63244, i32 63633 }, %struct.thai_pua_mapping_t { i32 3659, i32 63245, i32 63636 }, %struct.thai_pua_mapping_t { i32 3660, i32 63246, i32 63639 }, %struct.thai_pua_mapping_t { i32 3640, i32 63256, i32 63643 }, %struct.thai_pua_mapping_t { i32 3641, i32 63257, i32 63644 }, %struct.thai_pua_mapping_t { i32 3642, i32 63258, i32 63645 }, %struct.thai_pua_mapping_t zeroinitializer], align 16
@_ZZL14thai_pua_shapej13thai_action_tP9hb_font_tE12SDL_mappings = internal unnamed_addr constant [6 x %struct.thai_pua_mapping_t] [%struct.thai_pua_mapping_t { i32 3656, i32 63237, i32 63628 }, %struct.thai_pua_mapping_t { i32 3657, i32 63238, i32 63631 }, %struct.thai_pua_mapping_t { i32 3658, i32 63239, i32 63634 }, %struct.thai_pua_mapping_t { i32 3659, i32 63240, i32 63637 }, %struct.thai_pua_mapping_t { i32 3660, i32 63241, i32 63640 }, %struct.thai_pua_mapping_t zeroinitializer], align 16
@_ZZL14thai_pua_shapej13thai_action_tP9hb_font_tE11SL_mappings = internal unnamed_addr constant [13 x %struct.thai_pua_mapping_t] [%struct.thai_pua_mapping_t { i32 3656, i32 63251, i32 63626 }, %struct.thai_pua_mapping_t { i32 3657, i32 63252, i32 63629 }, %struct.thai_pua_mapping_t { i32 3658, i32 63253, i32 63632 }, %struct.thai_pua_mapping_t { i32 3659, i32 63254, i32 63635 }, %struct.thai_pua_mapping_t { i32 3660, i32 63255, i32 63638 }, %struct.thai_pua_mapping_t { i32 3633, i32 63248, i32 63620 }, %struct.thai_pua_mapping_t { i32 3636, i32 63233, i32 63621 }, %struct.thai_pua_mapping_t { i32 3637, i32 63234, i32 63622 }, %struct.thai_pua_mapping_t { i32 3638, i32 63235, i32 63623 }, %struct.thai_pua_mapping_t { i32 3639, i32 63236, i32 63624 }, %struct.thai_pua_mapping_t { i32 3655, i32 63250, i32 63625 }, %struct.thai_pua_mapping_t { i32 3661, i32 63249, i32 63641 }, %struct.thai_pua_mapping_t zeroinitializer], align 16
@_ZZL14thai_pua_shapej13thai_action_tP9hb_font_tE11RD_mappings = internal unnamed_addr constant [3 x %struct.thai_pua_mapping_t] [%struct.thai_pua_mapping_t { i32 3597, i32 63247, i32 63642 }, %struct.thai_pua_mapping_t { i32 3600, i32 63232, i32 63646 }, %struct.thai_pua_mapping_t zeroinitializer], align 16

; Function Attrs: nounwind ssp uwtable
define internal void @_ZL20preprocess_text_thaiPK18hb_ot_shape_plan_tP11hb_buffer_tP9hb_font_t(%struct.hb_ot_shape_plan_t* nocapture readonly, %struct.hb_buffer_t*, %struct.hb_font_t*) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  tail call void @_ZN11hb_buffer_t12clear_outputEv(%struct.hb_buffer_t* %1) #3
  %6 = getelementptr inbounds %struct.hb_buffer_t, %struct.hb_buffer_t* %1, i64 0, i32 15
  %7 = load i32, i32* %6, align 8
  %8 = getelementptr inbounds %struct.hb_buffer_t, %struct.hb_buffer_t* %1, i64 0, i32 14
  store i32 0, i32* %8, align 4
  %9 = icmp eq i32 %7, 0
  br i1 %9, label %193, label %10

10:                                               ; preds = %3
  %11 = getelementptr inbounds %struct.hb_buffer_t, %struct.hb_buffer_t* %1, i64 0, i32 18
  %12 = getelementptr inbounds %struct.hb_buffer_t, %struct.hb_buffer_t* %1, i64 0, i32 12
  %13 = getelementptr inbounds %struct.hb_buffer_t, %struct.hb_buffer_t* %1, i64 0, i32 19
  %14 = getelementptr inbounds %struct.hb_buffer_t, %struct.hb_buffer_t* %1, i64 0, i32 16
  %15 = getelementptr inbounds %struct.hb_buffer_t, %struct.hb_buffer_t* %1, i64 0, i32 3
  br label %16

16:                                               ; preds = %10, %190
  %17 = phi i32 [ 0, %10 ], [ %191, %190 ]
  %18 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %11, align 8
  %19 = zext i32 %17 to i64
  %20 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %18, i64 %19, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = and i32 %21, -129
  %23 = icmp eq i32 %22, 3635
  br i1 %23, label %55, label %24, !prof !2

24:                                               ; preds = %16
  %25 = load i8, i8* %12, align 1, !range !3
  %26 = icmp eq i8 %25, 0
  br i1 %26, label %52, label %27

27:                                               ; preds = %24
  %28 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %13, align 8
  %29 = icmp eq %struct.hb_glyph_info_t* %28, %18
  br i1 %29, label %30, label %33

30:                                               ; preds = %27
  %31 = load i32, i32* %14, align 4
  %32 = icmp eq i32 %31, %17
  br i1 %32, label %48, label %33

33:                                               ; preds = %30, %27
  %34 = tail call zeroext i1 @_ZN11hb_buffer_t13make_room_forEjj(%struct.hb_buffer_t* %1, i32 1, i32 1) #3
  br i1 %34, label %35, label %193, !prof !4

35:                                               ; preds = %33
  %36 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %11, align 8
  %37 = load i32, i32* %8, align 4
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %36, i64 %38
  %40 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %13, align 8
  %41 = load i32, i32* %14, align 4
  %42 = zext i32 %41 to i64
  %43 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %40, i64 %42
  %44 = bitcast %struct.hb_glyph_info_t* %43 to i8*
  %45 = bitcast %struct.hb_glyph_info_t* %39 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %44, i8* align 4 %45, i64 20, i1 false) #3
  %46 = load i32, i32* %14, align 4
  %47 = load i32, i32* %8, align 4
  br label %48

48:                                               ; preds = %35, %30
  %49 = phi i32 [ %17, %30 ], [ %47, %35 ]
  %50 = phi i32 [ %17, %30 ], [ %46, %35 ]
  %51 = add i32 %50, 1
  store i32 %51, i32* %14, align 4
  br label %52

52:                                               ; preds = %48, %24
  %53 = phi i32 [ %49, %48 ], [ %17, %24 ]
  %54 = add i32 %53, 1
  store i32 %54, i32* %8, align 4
  br label %190

55:                                               ; preds = %16
  %56 = add i32 %21, 26
  %57 = tail call zeroext i1 @_ZN11hb_buffer_t13make_room_forEjj(%struct.hb_buffer_t* %1, i32 0, i32 1) #3
  br i1 %57, label %60, label %58, !prof !4

58:                                               ; preds = %55
  %59 = load i32, i32* %14, align 4
  br label %89

60:                                               ; preds = %55
  %61 = load i32, i32* %8, align 4
  %62 = load i32, i32* %6, align 8
  %63 = icmp ult i32 %61, %62
  br i1 %63, label %64, label %70

64:                                               ; preds = %60
  %65 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %11, align 8
  %66 = zext i32 %61 to i64
  %67 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %65, i64 %66
  %68 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %13, align 8
  %69 = load i32, i32* %14, align 4
  br label %78

70:                                               ; preds = %60
  %71 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %13, align 8
  %72 = load i32, i32* %14, align 4
  %73 = icmp eq i32 %72, 0
  %74 = add i32 %72, -1
  %75 = select i1 %73, i32 0, i32 %74
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %71, i64 %76
  br label %78

78:                                               ; preds = %70, %64
  %79 = phi i32 [ %69, %64 ], [ %72, %70 ]
  %80 = phi %struct.hb_glyph_info_t* [ %68, %64 ], [ %71, %70 ]
  %81 = phi %struct.hb_glyph_info_t* [ %67, %64 ], [ %77, %70 ]
  %82 = zext i32 %79 to i64
  %83 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %80, i64 %82
  %84 = bitcast %struct.hb_glyph_info_t* %81 to i8*
  %85 = bitcast %struct.hb_glyph_info_t* %83 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %85, i8* align 4 %84, i64 20, i1 false) #3
  %86 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %83, i64 0, i32 0
  store i32 %56, i32* %86, align 4
  %87 = load i32, i32* %14, align 4
  %88 = add i32 %87, 1
  store i32 %88, i32* %14, align 4
  br label %89

89:                                               ; preds = %58, %78
  %90 = phi i32 [ %59, %58 ], [ %88, %78 ]
  %91 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %13, align 8
  %92 = icmp eq i32 %90, 0
  %93 = add i32 %90, -1
  %94 = select i1 %92, i32 0, i32 %93
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %91, i64 %95, i32 4
  %97 = bitcast %union._hb_var_int_t* %96 to i16*
  %98 = load i16, i16* %97, align 4
  %99 = or i16 %98, 128
  store i16 %99, i16* %97, align 4
  %100 = add i32 %21, -1
  %101 = tail call zeroext i1 @_ZN11hb_buffer_t13make_room_forEjj(%struct.hb_buffer_t* %1, i32 1, i32 1) #3
  br i1 %101, label %102, label %193, !prof !4

102:                                              ; preds = %89
  %103 = load i32, i32* %8, align 4
  %104 = load i32, i32* %6, align 8
  %105 = icmp ult i32 %103, %104
  br i1 %105, label %106, label %112

106:                                              ; preds = %102
  %107 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %11, align 8
  %108 = zext i32 %103 to i64
  %109 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %107, i64 %108
  %110 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %13, align 8
  %111 = load i32, i32* %14, align 4
  br label %120

112:                                              ; preds = %102
  %113 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %13, align 8
  %114 = load i32, i32* %14, align 4
  %115 = icmp eq i32 %114, 0
  %116 = add i32 %114, -1
  %117 = select i1 %115, i32 0, i32 %116
  %118 = zext i32 %117 to i64
  %119 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %113, i64 %118
  br label %120

120:                                              ; preds = %106, %112
  %121 = phi i32 [ %111, %106 ], [ %114, %112 ]
  %122 = phi %struct.hb_glyph_info_t* [ %110, %106 ], [ %113, %112 ]
  %123 = phi %struct.hb_glyph_info_t* [ %109, %106 ], [ %119, %112 ]
  %124 = zext i32 %121 to i64
  %125 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %122, i64 %124
  %126 = bitcast %struct.hb_glyph_info_t* %123 to i8*
  %127 = bitcast %struct.hb_glyph_info_t* %125 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %127, i8* align 4 %126, i64 20, i1 false) #3
  %128 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %125, i64 0, i32 0
  store i32 %100, i32* %128, align 4
  %129 = load i32, i32* %8, align 4
  %130 = add i32 %129, 1
  store i32 %130, i32* %8, align 4
  %131 = load i32, i32* %14, align 4
  %132 = add i32 %131, 1
  store i32 %132, i32* %14, align 4
  %133 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %13, align 8
  %134 = add i32 %131, -1
  %135 = zext i32 %134 to i64
  %136 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %133, i64 %135, i32 4
  %137 = bitcast %union._hb_var_int_t* %136 to i16*
  %138 = load i16, i16* %137, align 4
  %139 = and i16 %138, 224
  %140 = or i16 %139, 12
  store i16 %140, i16* %137, align 4
  br label %141

141:                                              ; preds = %144, %120
  %142 = phi i64 [ %158, %144 ], [ %135, %120 ]
  %143 = icmp eq i64 %142, 0
  br i1 %143, label %159, label %144

144:                                              ; preds = %141
  %145 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %13, align 8
  %146 = add i64 %142, 4294967295
  %147 = and i64 %146, 4294967295
  %148 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %145, i64 %147, i32 0
  %149 = load i32, i32* %148, align 4
  %150 = and i32 %149, -129
  %151 = and i32 %149, -132
  %152 = icmp eq i32 %151, 3636
  %153 = add i32 %150, -3655
  %154 = icmp ult i32 %153, 8
  %155 = or i1 %152, %154
  %156 = icmp eq i32 %150, 3633
  %157 = or i1 %156, %155
  %158 = add nsw i64 %142, -1
  br i1 %157, label %141, label %159

159:                                              ; preds = %141, %144
  %160 = phi i1 [ true, %141 ], [ false, %144 ]
  %161 = trunc i64 %142 to i32
  %162 = add i32 %161, 2
  %163 = icmp ult i32 %162, %132
  br i1 %163, label %164, label %184

164:                                              ; preds = %159
  tail call void @_ZN11hb_buffer_t18merge_out_clustersEjj(%struct.hb_buffer_t* %1, i32 %161, i32 %132) #3
  %165 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %13, align 8
  %166 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %165, i64 %135, i32 0
  %167 = bitcast i32* %166 to <4 x i32>*
  %168 = load <4 x i32>, <4 x i32>* %167, align 4
  %169 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %165, i64 %135, i32 4, i32 0
  %170 = load i32, i32* %169, align 4
  %171 = and i64 %142, 4294967295
  %172 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %165, i64 %171
  %173 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %172, i64 1
  %174 = bitcast %struct.hb_glyph_info_t* %173 to i8*
  %175 = bitcast %struct.hb_glyph_info_t* %172 to i8*
  %176 = xor i32 %161, -1
  %177 = add i32 %131, %176
  %178 = zext i32 %177 to i64
  %179 = mul nuw nsw i64 %178, 20
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %174, i8* align 4 %175, i64 %179, i1 false)
  %180 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %13, align 8
  %181 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %180, i64 %171, i32 0
  %182 = bitcast i32* %181 to <4 x i32>*
  store <4 x i32> %168, <4 x i32>* %182, align 4
  %183 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %180, i64 %171, i32 4, i32 0
  store i32 %170, i32* %183, align 4
  br label %190

184:                                              ; preds = %159
  br i1 %160, label %190, label %185

185:                                              ; preds = %184
  %186 = load i32, i32* %15, align 4
  %187 = icmp eq i32 %186, 0
  br i1 %187, label %188, label %190

188:                                              ; preds = %185
  %189 = add i32 %161, -1
  tail call void @_ZN11hb_buffer_t18merge_out_clustersEjj(%struct.hb_buffer_t* %1, i32 %189, i32 %132) #3
  br label %190

190:                                              ; preds = %188, %164, %184, %185, %52
  %191 = load i32, i32* %8, align 4
  %192 = icmp ult i32 %191, %7
  br i1 %192, label %16, label %193

193:                                              ; preds = %190, %89, %33, %3
  tail call void @_ZN11hb_buffer_t12swap_buffersEv(%struct.hb_buffer_t* %1) #3
  %194 = getelementptr inbounds %struct.hb_ot_shape_plan_t, %struct.hb_ot_shape_plan_t* %0, i64 0, i32 0, i32 1
  %195 = load i32, i32* %194, align 4
  %196 = icmp eq i32 %195, 1416126825
  br i1 %196, label %197, label %330

197:                                              ; preds = %193
  %198 = getelementptr inbounds %struct.hb_ot_shape_plan_t, %struct.hb_ot_shape_plan_t* %0, i64 0, i32 2, i32 1, i64 0
  %199 = load i8, i8* %198, align 8, !range !3
  %200 = icmp eq i8 %199, 0
  br i1 %200, label %201, label %330

201:                                              ; preds = %197
  %202 = getelementptr inbounds %struct.hb_buffer_t, %struct.hb_buffer_t* %1, i64 0, i32 18
  %203 = load %struct.hb_glyph_info_t*, %struct.hb_glyph_info_t** %202, align 8
  %204 = load i32, i32* %6, align 8
  %205 = icmp eq i32 %204, 0
  br i1 %205, label %330, label %206

206:                                              ; preds = %201
  %207 = bitcast i32* %5 to i8*
  %208 = bitcast i32* %4 to i8*
  %209 = zext i32 %204 to i64
  br label %210

210:                                              ; preds = %324, %206
  %211 = phi i64 [ 0, %206 ], [ %328, %324 ]
  %212 = phi i32 [ 3, %206 ], [ %327, %324 ]
  %213 = phi i32 [ 0, %206 ], [ %326, %324 ]
  %214 = phi i32 [ 2, %206 ], [ %325, %324 ]
  %215 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %203, i64 %211, i32 0
  %216 = load i32, i32* %215, align 4
  %217 = icmp eq i32 %216, 3633
  %218 = and i32 %216, -4
  %219 = icmp eq i32 %218, 3636
  %220 = or i1 %217, %219
  br i1 %220, label %244, label %221

221:                                              ; preds = %210
  switch i32 %216, label %222 [
    i32 3662, label %244
    i32 3661, label %244
    i32 3655, label %244
  ]

222:                                              ; preds = %221
  %223 = add i32 %216, -3640
  %224 = icmp ult i32 %223, 3
  br i1 %224, label %244, label %225

225:                                              ; preds = %222
  %226 = add i32 %216, -3656
  %227 = icmp ult i32 %226, 5
  br i1 %227, label %244, label %228

228:                                              ; preds = %225
  switch i32 %216, label %229 [
    i32 3615, label %237
    i32 3613, label %237
    i32 3611, label %237
    i32 3600, label %236
    i32 3597, label %236
  ]

229:                                              ; preds = %228
  %230 = or i32 %216, 1
  %231 = icmp eq i32 %230, 3599
  br i1 %231, label %237, label %232

232:                                              ; preds = %229
  %233 = add i32 %216, -3585
  %234 = icmp ult i32 %233, 46
  %235 = select i1 %234, i64 0, i64 4
  br label %237

236:                                              ; preds = %228, %228
  br label %237

237:                                              ; preds = %236, %232, %229, %228, %228, %228
  %238 = phi i64 [ 1, %228 ], [ 1, %228 ], [ 1, %228 ], [ 3, %229 ], [ %235, %232 ], [ 2, %236 ]
  %239 = getelementptr inbounds [5 x i32], [5 x i32]* @_ZL22thai_above_start_state, i64 0, i64 %238
  %240 = load i32, i32* %239, align 4
  %241 = getelementptr inbounds [5 x i32], [5 x i32]* @_ZL22thai_below_start_state, i64 0, i64 %238
  %242 = load i32, i32* %241, align 4
  %243 = trunc i64 %211 to i32
  br label %324

244:                                              ; preds = %225, %222, %221, %221, %221, %210
  %245 = phi i64 [ 0, %221 ], [ 0, %221 ], [ 1, %222 ], [ 0, %210 ], [ 0, %221 ], [ 2, %225 ]
  %246 = zext i32 %212 to i64
  %247 = zext i32 %214 to i64
  %248 = getelementptr inbounds [4 x [3 x %struct.thai_above_state_machine_edge_t]], [4 x [3 x %struct.thai_above_state_machine_edge_t]]* @_ZL24thai_above_state_machine, i64 0, i64 %246, i64 %245, i32 1
  %249 = load i32, i32* %248, align 4
  %250 = getelementptr inbounds [3 x [3 x %struct.thai_below_state_machine_edge_t]], [3 x [3 x %struct.thai_below_state_machine_edge_t]]* @_ZL24thai_below_state_machine, i64 0, i64 %247, i64 %245, i32 1
  %251 = load i32, i32* %250, align 4
  %252 = getelementptr inbounds [4 x [3 x %struct.thai_above_state_machine_edge_t]], [4 x [3 x %struct.thai_above_state_machine_edge_t]]* @_ZL24thai_above_state_machine, i64 0, i64 %246, i64 %245, i32 0
  %253 = load i32, i32* %252, align 8
  %254 = icmp eq i32 %253, 0
  br i1 %254, label %255, label %258

255:                                              ; preds = %244
  %256 = getelementptr inbounds [3 x [3 x %struct.thai_below_state_machine_edge_t]], [3 x [3 x %struct.thai_below_state_machine_edge_t]]* @_ZL24thai_below_state_machine, i64 0, i64 %247, i64 %245, i32 0
  %257 = load i32, i32* %256, align 8
  br label %258

258:                                              ; preds = %255, %244
  %259 = phi i32 [ %257, %255 ], [ %253, %244 ]
  %260 = trunc i64 %211 to i32
  %261 = sub i32 %260, %213
  %262 = icmp ult i32 %261, 2
  br i1 %262, label %264, label %263

263:                                              ; preds = %258
  call void @_ZN11hb_buffer_t20unsafe_to_break_implEjj(%struct.hb_buffer_t* %1, i32 %213, i32 %260) #3
  br label %264

264:                                              ; preds = %263, %258
  %265 = icmp eq i32 %259, 4
  br i1 %265, label %266, label %289

266:                                              ; preds = %264
  %267 = zext i32 %213 to i64
  %268 = getelementptr inbounds %struct.hb_glyph_info_t, %struct.hb_glyph_info_t* %203, i64 %267, i32 0
  %269 = load i32, i32* %268, align 4
  switch i32 %269, label %287 [
    i32 3597, label %271
    i32 3600, label %270
  ]

270:                                              ; preds = %266
  br label %271

271:                                              ; preds = %270, %266
  %272 = phi %struct.thai_pua_mapping_t* [ getelementptr inbounds ([3 x %struct.thai_pua_mapping_t], [3 x %struct.thai_pua_mapping_t]* @_ZZL14thai_pua_shapej13thai_action_tP9hb_font_tE11RD_mappings, i64 0, i64 0), %266 ], [ getelementptr inbounds ([3 x %struct.thai_pua_mapping_t], [3 x %struct.thai_pua_mapping_t]* @_ZZL14thai_pua_shapej13thai_action_tP9hb_font_tE11RD_mappings, i64 0, i64 1), %270 ]
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %208) #3
  store i32 -1431655766, i32* %4, align 4
  %273 = getelementptr inbounds %struct.thai_pua_mapping_t, %struct.thai_pua_mapping_t* %272, i64 0, i32 1
  %274 = load i32, i32* %273, align 4
  %275 = call i32 @hb_font_get_glyph(%struct.hb_font_t* %2, i32 %274, i32 0, i32* nonnull %4) #3
  %276 = icmp eq i32 %275, 0
  br i1 %276, label %277, label %282

277:                                              ; preds = %271
  %278 = getelementptr inbounds %struct.thai_pua_mapping_t, %struct.thai_pua_mapping_t* %272, i64 0, i32 2
  %279 = load i32, i32* %278, align 4
  %280 = call i32 @hb_font_get_glyph(%struct.hb_font_t* %2, i32 %279, i32 0, i32* nonnull %4) #3
  %281 = icmp eq i32 %280, 0
  br i1 %281, label %285, label %282

282:                                              ; preds = %277, %271
  %283 = phi i32* [ %273, %271 ], [ %278, %277 ]
  %284 = load i32, i32* %283, align 4
  br label %285

285:                                              ; preds = %277, %282
  %286 = phi i32 [ %284, %282 ], [ %269, %277 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %208) #3
  br label %287

287:                                              ; preds = %285, %266
  %288 = phi i32 [ %269, %266 ], [ %286, %285 ]
  store i32 %288, i32* %268, align 4
  br label %324

289:                                              ; preds = %264
  %290 = load i32, i32* %215, align 4
  switch i32 %259, label %294 [
    i32 0, label %322
    i32 1, label %291
    i32 3, label %292
    i32 2, label %293
  ]

291:                                              ; preds = %289
  br label %294

292:                                              ; preds = %289
  br label %294

293:                                              ; preds = %289
  br label %294

294:                                              ; preds = %293, %292, %291, %289
  %295 = phi %struct.thai_pua_mapping_t* [ null, %289 ], [ getelementptr inbounds ([13 x %struct.thai_pua_mapping_t], [13 x %struct.thai_pua_mapping_t]* @_ZZL14thai_pua_shapej13thai_action_tP9hb_font_tE11SL_mappings, i64 0, i64 0), %293 ], [ getelementptr inbounds ([6 x %struct.thai_pua_mapping_t], [6 x %struct.thai_pua_mapping_t]* @_ZZL14thai_pua_shapej13thai_action_tP9hb_font_tE12SDL_mappings, i64 0, i64 0), %292 ], [ getelementptr inbounds ([9 x %struct.thai_pua_mapping_t], [9 x %struct.thai_pua_mapping_t]* @_ZZL14thai_pua_shapej13thai_action_tP9hb_font_tE11SD_mappings, i64 0, i64 0), %291 ]
  %296 = getelementptr inbounds %struct.thai_pua_mapping_t, %struct.thai_pua_mapping_t* %295, i64 0, i32 0
  %297 = load i32, i32* %296, align 4
  %298 = icmp eq i32 %297, 0
  br i1 %298, label %322, label %299

299:                                              ; preds = %294, %317
  %300 = phi i32 [ %320, %317 ], [ %297, %294 ]
  %301 = phi %struct.thai_pua_mapping_t* [ %318, %317 ], [ %295, %294 ]
  %302 = icmp eq i32 %300, %290
  br i1 %302, label %303, label %317

303:                                              ; preds = %299
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %207) #3
  store i32 -1431655766, i32* %5, align 4
  %304 = getelementptr inbounds %struct.thai_pua_mapping_t, %struct.thai_pua_mapping_t* %301, i64 0, i32 1
  %305 = load i32, i32* %304, align 4
  %306 = call i32 @hb_font_get_glyph(%struct.hb_font_t* %2, i32 %305, i32 0, i32* nonnull %5) #3
  %307 = icmp eq i32 %306, 0
  br i1 %307, label %308, label %313

308:                                              ; preds = %303
  %309 = getelementptr inbounds %struct.thai_pua_mapping_t, %struct.thai_pua_mapping_t* %301, i64 0, i32 2
  %310 = load i32, i32* %309, align 4
  %311 = call i32 @hb_font_get_glyph(%struct.hb_font_t* %2, i32 %310, i32 0, i32* nonnull %5) #3
  %312 = icmp eq i32 %311, 0
  br i1 %312, label %316, label %313

313:                                              ; preds = %308, %303
  %314 = phi i32* [ %304, %303 ], [ %309, %308 ]
  %315 = load i32, i32* %314, align 4
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %207) #3
  br label %322

316:                                              ; preds = %308
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %207) #3
  br label %322

317:                                              ; preds = %299
  %318 = getelementptr inbounds %struct.thai_pua_mapping_t, %struct.thai_pua_mapping_t* %301, i64 1
  %319 = getelementptr inbounds %struct.thai_pua_mapping_t, %struct.thai_pua_mapping_t* %318, i64 0, i32 0
  %320 = load i32, i32* %319, align 4
  %321 = icmp eq i32 %320, 0
  br i1 %321, label %322, label %299

322:                                              ; preds = %317, %316, %313, %294, %289
  %323 = phi i32 [ %290, %289 ], [ %315, %313 ], [ %290, %316 ], [ %290, %294 ], [ %290, %317 ]
  store i32 %323, i32* %215, align 4
  br label %324

324:                                              ; preds = %322, %287, %237
  %325 = phi i32 [ %242, %237 ], [ %251, %322 ], [ %251, %287 ]
  %326 = phi i32 [ %243, %237 ], [ %213, %322 ], [ %213, %287 ]
  %327 = phi i32 [ %240, %237 ], [ %249, %322 ], [ %249, %287 ]
  %328 = add nuw nsw i64 %211, 1
  %329 = icmp eq i64 %328, %209
  br i1 %329, label %330, label %210

330:                                              ; preds = %324, %201, %197, %193
  ret void
}

declare hidden void @_ZN11hb_buffer_t12clear_outputEv(%struct.hb_buffer_t*) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare hidden void @_ZN11hb_buffer_t18merge_out_clustersEjj(%struct.hb_buffer_t*, i32, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

declare hidden void @_ZN11hb_buffer_t12swap_buffersEv(%struct.hb_buffer_t*) local_unnamed_addr #1

declare hidden zeroext i1 @_ZN11hb_buffer_t13make_room_forEjj(%struct.hb_buffer_t*, i32, i32) local_unnamed_addr #1

declare hidden void @_ZN11hb_buffer_t20unsafe_to_break_implEjj(%struct.hb_buffer_t*, i32, i32) local_unnamed_addr #1

declare i32 @hb_font_get_glyph(%struct.hb_font_t*, i32, i32, i32*) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{i8 0, i8 2}
!4 = !{!"branch_weights", i32 2000, i32 1}
