; ModuleID = '../../third_party/libjingle_xmpp/xmpp/xmppstanzaparser.cc'
source_filename = "../../third_party/libjingle_xmpp/xmpp/xmppstanzaparser.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.jingle_xmpp::XmppStanzaParser" = type { %"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmppStanzaParser::ParseHandler", %"class.jingle_xmpp::XmlParser", i32, %"class.jingle_xmpp::XmlBuilder" }
%"class.jingle_xmpp::XmppStanzaParser::ParseHandler" = type { %"class.jingle_xmpp::XmlParseHandler", %"class.jingle_xmpp::XmppStanzaParser"* }
%"class.jingle_xmpp::XmlParseHandler" = type { i32 (...)** }
%"class.jingle_xmpp::XmlParser" = type <{ i32 (...)**, %"class.jingle_xmpp::XmlParser::ParseContext", %struct.XML_ParserStruct*, %"class.jingle_xmpp::XmlParseHandler"*, i8, [7 x i8] }>
%"class.jingle_xmpp::XmlParser::ParseContext" = type { %"class.jingle_xmpp::XmlParseContext", %"class.jingle_xmpp::XmlnsStack", i32, i64, i64, i64 }
%"class.jingle_xmpp::XmlParseContext" = type { i32 (...)** }
%"class.jingle_xmpp::XmlnsStack" = type { %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.1" }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::vector"* }
%"class.std::__1::vector" = type opaque
%"class.std::__1::unique_ptr.1" = type { %"class.std::__1::__compressed_pair.2" }
%"class.std::__1::__compressed_pair.2" = type { %"struct.std::__1::__compressed_pair_elem.3" }
%"struct.std::__1::__compressed_pair_elem.3" = type { %"class.std::__1::vector.4"* }
%"class.std::__1::vector.4" = type opaque
%struct.XML_ParserStruct = type opaque
%"class.jingle_xmpp::XmlBuilder" = type { %"class.jingle_xmpp::XmlParseHandler", %"class.jingle_xmpp::XmlElement"*, %"class.std::__1::unique_ptr.11", %"class.std::__1::unique_ptr.17" }
%"class.jingle_xmpp::XmlElement" = type <{ %"class.jingle_xmpp::XmlChild", %"class.jingle_xmpp::QName", %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::XmlChild"*, %"class.jingle_xmpp::XmlChild"*, i8, [7 x i8] }>
%"class.jingle_xmpp::XmlChild" = type { i32 (...)**, %"class.jingle_xmpp::XmlChild"* }
%"class.jingle_xmpp::QName" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.jingle_xmpp::XmlAttr" = type { %"class.jingle_xmpp::XmlAttr"*, %"class.jingle_xmpp::QName", %"class.std::__1::basic_string" }
%"class.std::__1::unique_ptr.11" = type { %"class.std::__1::__compressed_pair.12" }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.jingle_xmpp::XmlElement"* }
%"class.std::__1::unique_ptr.17" = type { %"class.std::__1::__compressed_pair.18" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { %"class.std::__1::vector.20"* }
%"class.std::__1::vector.20" = type opaque
%"class.jingle_xmpp::XmppStanzaParseHandler" = type { i32 (...)** }

$_ZN11jingle_xmpp15XmlParseHandlerD2Ev = comdat any

$_ZN11jingle_xmpp16XmppStanzaParser12ParseHandlerD0Ev = comdat any

$_ZN11jingle_xmpp16XmppStanzaParser12ParseHandler12StartElementEPNS_15XmlParseContextEPKcPS5_ = comdat any

$_ZN11jingle_xmpp16XmppStanzaParser12ParseHandler10EndElementEPNS_15XmlParseContextEPKc = comdat any

$_ZN11jingle_xmpp16XmppStanzaParser12ParseHandler13CharacterDataEPNS_15XmlParseContextEPKci = comdat any

$_ZN11jingle_xmpp16XmppStanzaParser12ParseHandler5ErrorEPNS_15XmlParseContextE9XML_Error = comdat any

$_ZTVN11jingle_xmpp16XmppStanzaParser12ParseHandlerE = comdat any

@_ZTVN11jingle_xmpp16XmppStanzaParser12ParseHandlerE = linkonce_odr hidden unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.jingle_xmpp::XmlParseHandler"*)* @_ZN11jingle_xmpp15XmlParseHandlerD2Ev to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmppStanzaParser::ParseHandler"*)* @_ZN11jingle_xmpp16XmppStanzaParser12ParseHandlerD0Ev to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmppStanzaParser::ParseHandler"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i8**)* @_ZN11jingle_xmpp16XmppStanzaParser12ParseHandler12StartElementEPNS_15XmlParseContextEPKcPS5_ to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmppStanzaParser::ParseHandler"*, %"class.jingle_xmpp::XmlParseContext"*, i8*)* @_ZN11jingle_xmpp16XmppStanzaParser12ParseHandler10EndElementEPNS_15XmlParseContextEPKc to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmppStanzaParser::ParseHandler"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i32)* @_ZN11jingle_xmpp16XmppStanzaParser12ParseHandler13CharacterDataEPNS_15XmlParseContextEPKci to i8*), i8* bitcast (void (%"class.jingle_xmpp::XmppStanzaParser::ParseHandler"*, %"class.jingle_xmpp::XmlParseContext"*, i32)* @_ZN11jingle_xmpp16XmppStanzaParser12ParseHandler5ErrorEPNS_15XmlParseContextE9XML_Error to i8*)] }, comdat, align 8

@_ZN11jingle_xmpp16XmppStanzaParserC1EPNS_22XmppStanzaParseHandlerE = hidden unnamed_addr alias void (%"class.jingle_xmpp::XmppStanzaParser"*, %"class.jingle_xmpp::XmppStanzaParseHandler"*), void (%"class.jingle_xmpp::XmppStanzaParser"*, %"class.jingle_xmpp::XmppStanzaParseHandler"*)* @_ZN11jingle_xmpp16XmppStanzaParserC2EPNS_22XmppStanzaParseHandlerE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp16XmppStanzaParserC2EPNS_22XmppStanzaParseHandlerE(%"class.jingle_xmpp::XmppStanzaParser"*, %"class.jingle_xmpp::XmppStanzaParseHandler"*) unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %0, i64 0, i32 0
  store %"class.jingle_xmpp::XmppStanzaParseHandler"* %1, %"class.jingle_xmpp::XmppStanzaParseHandler"** %3, align 8
  %4 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %0, i64 0, i32 1
  %5 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser::ParseHandler", %"class.jingle_xmpp::XmppStanzaParser::ParseHandler"* %4, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN11jingle_xmpp16XmppStanzaParser12ParseHandlerE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %5, align 8
  %6 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %0, i64 0, i32 1, i32 1
  store %"class.jingle_xmpp::XmppStanzaParser"* %0, %"class.jingle_xmpp::XmppStanzaParser"** %6, align 8
  %7 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %0, i64 0, i32 2
  %8 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser::ParseHandler", %"class.jingle_xmpp::XmppStanzaParser::ParseHandler"* %4, i64 0, i32 0
  tail call void @_ZN11jingle_xmpp9XmlParserC1EPNS_15XmlParseHandlerE(%"class.jingle_xmpp::XmlParser"* %7, %"class.jingle_xmpp::XmlParseHandler"* %8) #4
  %9 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %0, i64 0, i32 3
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %0, i64 0, i32 4
  tail call void @_ZN11jingle_xmpp10XmlBuilderC1Ev(%"class.jingle_xmpp::XmlBuilder"* %10) #4
  ret void
}

declare void @_ZN11jingle_xmpp9XmlParserC1EPNS_15XmlParseHandlerE(%"class.jingle_xmpp::XmlParser"*, %"class.jingle_xmpp::XmlParseHandler"*) unnamed_addr #1

declare void @_ZN11jingle_xmpp10XmlBuilderC1Ev(%"class.jingle_xmpp::XmlBuilder"*) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp16XmppStanzaParser5ResetEv(%"class.jingle_xmpp::XmppStanzaParser"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %0, i64 0, i32 2
  tail call void @_ZN11jingle_xmpp9XmlParser5ResetEv(%"class.jingle_xmpp::XmlParser"* %2) #4
  %3 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %0, i64 0, i32 3
  store i32 0, i32* %3, align 8
  %4 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %0, i64 0, i32 4
  tail call void @_ZN11jingle_xmpp10XmlBuilder5ResetEv(%"class.jingle_xmpp::XmlBuilder"* %4) #4
  ret void
}

declare void @_ZN11jingle_xmpp9XmlParser5ResetEv(%"class.jingle_xmpp::XmlParser"*) local_unnamed_addr #1

declare void @_ZN11jingle_xmpp10XmlBuilder5ResetEv(%"class.jingle_xmpp::XmlBuilder"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp16XmppStanzaParser20IncomingStartElementEPNS_15XmlParseContextEPKcPS4_(%"class.jingle_xmpp::XmppStanzaParser"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i8**) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %0, i64 0, i32 3
  %6 = load i32, i32* %5, align 8
  %7 = add nsw i32 %6, 1
  store i32 %7, i32* %5, align 8
  %8 = icmp eq i32 %6, 0
  br i1 %8, label %9, label %28

9:                                                ; preds = %4
  %10 = tail call %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlBuilder12BuildElementEPNS_15XmlParseContextEPKcPS4_(%"class.jingle_xmpp::XmlParseContext"* %1, i8* %2, i8** %3) #4
  %11 = icmp eq %"class.jingle_xmpp::XmlElement"* %10, null
  br i1 %11, label %12, label %17

12:                                               ; preds = %9
  %13 = bitcast %"class.jingle_xmpp::XmlParseContext"* %1 to void (%"class.jingle_xmpp::XmlParseContext"*, i32)***
  %14 = load void (%"class.jingle_xmpp::XmlParseContext"*, i32)**, void (%"class.jingle_xmpp::XmlParseContext"*, i32)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.jingle_xmpp::XmlParseContext"*, i32)*, void (%"class.jingle_xmpp::XmlParseContext"*, i32)** %14, i64 3
  %16 = load void (%"class.jingle_xmpp::XmlParseContext"*, i32)*, void (%"class.jingle_xmpp::XmlParseContext"*, i32)** %15, align 8
  tail call void %16(%"class.jingle_xmpp::XmlParseContext"* %1, i32 2) #4
  br label %30

17:                                               ; preds = %9
  %18 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %0, i64 0, i32 0
  %19 = load %"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmppStanzaParseHandler"** %18, align 8
  %20 = bitcast %"class.jingle_xmpp::XmppStanzaParseHandler"* %19 to void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)***
  %21 = load void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)**, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)*** %20, align 8
  %22 = getelementptr inbounds void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)** %21, i64 2
  %23 = load void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)** %22, align 8
  tail call void %23(%"class.jingle_xmpp::XmppStanzaParseHandler"* %19, %"class.jingle_xmpp::XmlElement"* nonnull %10) #4
  %24 = bitcast %"class.jingle_xmpp::XmlElement"* %10 to void (%"class.jingle_xmpp::XmlElement"*)***
  %25 = load void (%"class.jingle_xmpp::XmlElement"*)**, void (%"class.jingle_xmpp::XmlElement"*)*** %24, align 8
  %26 = getelementptr inbounds void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %25, i64 4
  %27 = load void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %26, align 8
  tail call void %27(%"class.jingle_xmpp::XmlElement"* nonnull %10) #4
  br label %30

28:                                               ; preds = %4
  %29 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %0, i64 0, i32 4
  tail call void @_ZN11jingle_xmpp10XmlBuilder12StartElementEPNS_15XmlParseContextEPKcPS4_(%"class.jingle_xmpp::XmlBuilder"* %29, %"class.jingle_xmpp::XmlParseContext"* %1, i8* %2, i8** %3) #4
  br label %30

30:                                               ; preds = %12, %17, %28
  ret void
}

declare %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlBuilder12BuildElementEPNS_15XmlParseContextEPKcPS4_(%"class.jingle_xmpp::XmlParseContext"*, i8*, i8**) local_unnamed_addr #1

declare void @_ZN11jingle_xmpp10XmlBuilder12StartElementEPNS_15XmlParseContextEPKcPS4_(%"class.jingle_xmpp::XmlBuilder"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i8**) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp16XmppStanzaParser21IncomingCharacterDataEPNS_15XmlParseContextEPKci(%"class.jingle_xmpp::XmppStanzaParser"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i32) local_unnamed_addr #0 align 2 {
  %5 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %0, i64 0, i32 3
  %6 = load i32, i32* %5, align 8
  %7 = icmp sgt i32 %6, 1
  br i1 %7, label %8, label %10

8:                                                ; preds = %4
  %9 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %0, i64 0, i32 4
  tail call void @_ZN11jingle_xmpp10XmlBuilder13CharacterDataEPNS_15XmlParseContextEPKci(%"class.jingle_xmpp::XmlBuilder"* %9, %"class.jingle_xmpp::XmlParseContext"* %1, i8* %2, i32 %3) #4
  br label %10

10:                                               ; preds = %8, %4
  ret void
}

declare void @_ZN11jingle_xmpp10XmlBuilder13CharacterDataEPNS_15XmlParseContextEPKci(%"class.jingle_xmpp::XmlBuilder"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i32) unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp16XmppStanzaParser18IncomingEndElementEPNS_15XmlParseContextEPKc(%"class.jingle_xmpp::XmppStanzaParser"*, %"class.jingle_xmpp::XmlParseContext"*, i8*) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 8
  %6 = add nsw i32 %5, -1
  store i32 %6, i32* %4, align 8
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %15

8:                                                ; preds = %3
  %9 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %0, i64 0, i32 0
  %10 = load %"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmppStanzaParseHandler"** %9, align 8
  %11 = bitcast %"class.jingle_xmpp::XmppStanzaParseHandler"* %10 to void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)***
  %12 = load void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)**, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)*** %11, align 8
  %13 = getelementptr inbounds void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)*, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)** %12, i64 4
  %14 = load void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)*, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)** %13, align 8
  tail call void %14(%"class.jingle_xmpp::XmppStanzaParseHandler"* %10) #4
  br label %33

15:                                               ; preds = %3
  %16 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %0, i64 0, i32 4
  tail call void @_ZN11jingle_xmpp10XmlBuilder10EndElementEPNS_15XmlParseContextEPKc(%"class.jingle_xmpp::XmlBuilder"* %16, %"class.jingle_xmpp::XmlParseContext"* %1, i8* %2) #4
  %17 = load i32, i32* %4, align 8
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %33

19:                                               ; preds = %15
  %20 = tail call %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlBuilder13CreateElementEv(%"class.jingle_xmpp::XmlBuilder"* %16) #4
  %21 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %0, i64 0, i32 0
  %22 = load %"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmppStanzaParseHandler"** %21, align 8
  %23 = bitcast %"class.jingle_xmpp::XmppStanzaParseHandler"* %22 to void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)***
  %24 = load void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)**, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)*** %23, align 8
  %25 = getelementptr inbounds void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)** %24, i64 3
  %26 = load void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)** %25, align 8
  tail call void %26(%"class.jingle_xmpp::XmppStanzaParseHandler"* %22, %"class.jingle_xmpp::XmlElement"* %20) #4
  %27 = icmp eq %"class.jingle_xmpp::XmlElement"* %20, null
  br i1 %27, label %33, label %28

28:                                               ; preds = %19
  %29 = bitcast %"class.jingle_xmpp::XmlElement"* %20 to void (%"class.jingle_xmpp::XmlElement"*)***
  %30 = load void (%"class.jingle_xmpp::XmlElement"*)**, void (%"class.jingle_xmpp::XmlElement"*)*** %29, align 8
  %31 = getelementptr inbounds void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %30, i64 4
  %32 = load void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %31, align 8
  tail call void %32(%"class.jingle_xmpp::XmlElement"* nonnull %20) #4
  br label %33

33:                                               ; preds = %19, %28, %8, %15
  ret void
}

declare void @_ZN11jingle_xmpp10XmlBuilder10EndElementEPNS_15XmlParseContextEPKc(%"class.jingle_xmpp::XmlBuilder"*, %"class.jingle_xmpp::XmlParseContext"*, i8*) unnamed_addr #1

declare %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlBuilder13CreateElementEv(%"class.jingle_xmpp::XmlBuilder"*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN11jingle_xmpp16XmppStanzaParser13IncomingErrorEPNS_15XmlParseContextE9XML_Error(%"class.jingle_xmpp::XmppStanzaParser"* nocapture readonly, %"class.jingle_xmpp::XmlParseContext"* nocapture readnone, i32) local_unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %0, i64 0, i32 0
  %5 = load %"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmppStanzaParseHandler"** %4, align 8
  %6 = bitcast %"class.jingle_xmpp::XmppStanzaParseHandler"* %5 to void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)***
  %7 = load void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)**, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)*** %6, align 8
  %8 = getelementptr inbounds void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)*, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)** %7, i64 5
  %9 = load void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)*, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)** %8, align 8
  tail call void %9(%"class.jingle_xmpp::XmppStanzaParseHandler"* %5) #4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN11jingle_xmpp15XmlParseHandlerD2Ev(%"class.jingle_xmpp::XmlParseHandler"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN11jingle_xmpp16XmppStanzaParser12ParseHandlerD0Ev(%"class.jingle_xmpp::XmppStanzaParser::ParseHandler"*) unnamed_addr #2 comdat align 2 {
  %2 = bitcast %"class.jingle_xmpp::XmppStanzaParser::ParseHandler"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #5
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN11jingle_xmpp16XmppStanzaParser12ParseHandler12StartElementEPNS_15XmlParseContextEPKcPS5_(%"class.jingle_xmpp::XmppStanzaParser::ParseHandler"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i8**) unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser::ParseHandler", %"class.jingle_xmpp::XmppStanzaParser::ParseHandler"* %0, i64 0, i32 1
  %6 = load %"class.jingle_xmpp::XmppStanzaParser"*, %"class.jingle_xmpp::XmppStanzaParser"** %5, align 8
  %7 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %6, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = add nsw i32 %8, 1
  store i32 %9, i32* %7, align 8
  %10 = icmp eq i32 %8, 0
  br i1 %10, label %11, label %30

11:                                               ; preds = %4
  %12 = tail call %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlBuilder12BuildElementEPNS_15XmlParseContextEPKcPS4_(%"class.jingle_xmpp::XmlParseContext"* %1, i8* %2, i8** %3) #4
  %13 = icmp eq %"class.jingle_xmpp::XmlElement"* %12, null
  br i1 %13, label %14, label %19

14:                                               ; preds = %11
  %15 = bitcast %"class.jingle_xmpp::XmlParseContext"* %1 to void (%"class.jingle_xmpp::XmlParseContext"*, i32)***
  %16 = load void (%"class.jingle_xmpp::XmlParseContext"*, i32)**, void (%"class.jingle_xmpp::XmlParseContext"*, i32)*** %15, align 8
  %17 = getelementptr inbounds void (%"class.jingle_xmpp::XmlParseContext"*, i32)*, void (%"class.jingle_xmpp::XmlParseContext"*, i32)** %16, i64 3
  %18 = load void (%"class.jingle_xmpp::XmlParseContext"*, i32)*, void (%"class.jingle_xmpp::XmlParseContext"*, i32)** %17, align 8
  tail call void %18(%"class.jingle_xmpp::XmlParseContext"* %1, i32 2) #4
  br label %32

19:                                               ; preds = %11
  %20 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %6, i64 0, i32 0
  %21 = load %"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmppStanzaParseHandler"** %20, align 8
  %22 = bitcast %"class.jingle_xmpp::XmppStanzaParseHandler"* %21 to void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)***
  %23 = load void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)**, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)*** %22, align 8
  %24 = getelementptr inbounds void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)** %23, i64 2
  %25 = load void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)** %24, align 8
  tail call void %25(%"class.jingle_xmpp::XmppStanzaParseHandler"* %21, %"class.jingle_xmpp::XmlElement"* nonnull %12) #4
  %26 = bitcast %"class.jingle_xmpp::XmlElement"* %12 to void (%"class.jingle_xmpp::XmlElement"*)***
  %27 = load void (%"class.jingle_xmpp::XmlElement"*)**, void (%"class.jingle_xmpp::XmlElement"*)*** %26, align 8
  %28 = getelementptr inbounds void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %27, i64 4
  %29 = load void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %28, align 8
  tail call void %29(%"class.jingle_xmpp::XmlElement"* nonnull %12) #4
  br label %32

30:                                               ; preds = %4
  %31 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %6, i64 0, i32 4
  tail call void @_ZN11jingle_xmpp10XmlBuilder12StartElementEPNS_15XmlParseContextEPKcPS4_(%"class.jingle_xmpp::XmlBuilder"* %31, %"class.jingle_xmpp::XmlParseContext"* %1, i8* %2, i8** %3) #4
  br label %32

32:                                               ; preds = %14, %19, %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN11jingle_xmpp16XmppStanzaParser12ParseHandler10EndElementEPNS_15XmlParseContextEPKc(%"class.jingle_xmpp::XmppStanzaParser::ParseHandler"*, %"class.jingle_xmpp::XmlParseContext"*, i8*) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser::ParseHandler", %"class.jingle_xmpp::XmppStanzaParser::ParseHandler"* %0, i64 0, i32 1
  %5 = load %"class.jingle_xmpp::XmppStanzaParser"*, %"class.jingle_xmpp::XmppStanzaParser"** %4, align 8
  %6 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %5, i64 0, i32 3
  %7 = load i32, i32* %6, align 8
  %8 = add nsw i32 %7, -1
  store i32 %8, i32* %6, align 8
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %17

10:                                               ; preds = %3
  %11 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %5, i64 0, i32 0
  %12 = load %"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmppStanzaParseHandler"** %11, align 8
  %13 = bitcast %"class.jingle_xmpp::XmppStanzaParseHandler"* %12 to void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)***
  %14 = load void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)**, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)*** %13, align 8
  %15 = getelementptr inbounds void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)*, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)** %14, i64 4
  %16 = load void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)*, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)** %15, align 8
  tail call void %16(%"class.jingle_xmpp::XmppStanzaParseHandler"* %12) #4
  br label %35

17:                                               ; preds = %3
  %18 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %5, i64 0, i32 4
  tail call void @_ZN11jingle_xmpp10XmlBuilder10EndElementEPNS_15XmlParseContextEPKc(%"class.jingle_xmpp::XmlBuilder"* %18, %"class.jingle_xmpp::XmlParseContext"* %1, i8* %2) #4
  %19 = load i32, i32* %6, align 8
  %20 = icmp eq i32 %19, 1
  br i1 %20, label %21, label %35

21:                                               ; preds = %17
  %22 = tail call %"class.jingle_xmpp::XmlElement"* @_ZN11jingle_xmpp10XmlBuilder13CreateElementEv(%"class.jingle_xmpp::XmlBuilder"* %18) #4
  %23 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %5, i64 0, i32 0
  %24 = load %"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmppStanzaParseHandler"** %23, align 8
  %25 = bitcast %"class.jingle_xmpp::XmppStanzaParseHandler"* %24 to void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)***
  %26 = load void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)**, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)*** %25, align 8
  %27 = getelementptr inbounds void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)** %26, i64 3
  %28 = load void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmlElement"*)** %27, align 8
  tail call void %28(%"class.jingle_xmpp::XmppStanzaParseHandler"* %24, %"class.jingle_xmpp::XmlElement"* %22) #4
  %29 = icmp eq %"class.jingle_xmpp::XmlElement"* %22, null
  br i1 %29, label %35, label %30

30:                                               ; preds = %21
  %31 = bitcast %"class.jingle_xmpp::XmlElement"* %22 to void (%"class.jingle_xmpp::XmlElement"*)***
  %32 = load void (%"class.jingle_xmpp::XmlElement"*)**, void (%"class.jingle_xmpp::XmlElement"*)*** %31, align 8
  %33 = getelementptr inbounds void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %32, i64 4
  %34 = load void (%"class.jingle_xmpp::XmlElement"*)*, void (%"class.jingle_xmpp::XmlElement"*)** %33, align 8
  tail call void %34(%"class.jingle_xmpp::XmlElement"* nonnull %22) #4
  br label %35

35:                                               ; preds = %10, %17, %21, %30
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN11jingle_xmpp16XmppStanzaParser12ParseHandler13CharacterDataEPNS_15XmlParseContextEPKci(%"class.jingle_xmpp::XmppStanzaParser::ParseHandler"*, %"class.jingle_xmpp::XmlParseContext"*, i8*, i32) unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser::ParseHandler", %"class.jingle_xmpp::XmppStanzaParser::ParseHandler"* %0, i64 0, i32 1
  %6 = load %"class.jingle_xmpp::XmppStanzaParser"*, %"class.jingle_xmpp::XmppStanzaParser"** %5, align 8
  %7 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %6, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = icmp sgt i32 %8, 1
  br i1 %9, label %10, label %12

10:                                               ; preds = %4
  %11 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %6, i64 0, i32 4
  tail call void @_ZN11jingle_xmpp10XmlBuilder13CharacterDataEPNS_15XmlParseContextEPKci(%"class.jingle_xmpp::XmlBuilder"* %11, %"class.jingle_xmpp::XmlParseContext"* %1, i8* %2, i32 %3) #4
  br label %12

12:                                               ; preds = %4, %10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN11jingle_xmpp16XmppStanzaParser12ParseHandler5ErrorEPNS_15XmlParseContextE9XML_Error(%"class.jingle_xmpp::XmppStanzaParser::ParseHandler"*, %"class.jingle_xmpp::XmlParseContext"*, i32) unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser::ParseHandler", %"class.jingle_xmpp::XmppStanzaParser::ParseHandler"* %0, i64 0, i32 1
  %5 = load %"class.jingle_xmpp::XmppStanzaParser"*, %"class.jingle_xmpp::XmppStanzaParser"** %4, align 8
  %6 = getelementptr inbounds %"class.jingle_xmpp::XmppStanzaParser", %"class.jingle_xmpp::XmppStanzaParser"* %5, i64 0, i32 0
  %7 = load %"class.jingle_xmpp::XmppStanzaParseHandler"*, %"class.jingle_xmpp::XmppStanzaParseHandler"** %6, align 8
  %8 = bitcast %"class.jingle_xmpp::XmppStanzaParseHandler"* %7 to void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)***
  %9 = load void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)**, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)*** %8, align 8
  %10 = getelementptr inbounds void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)*, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)** %9, i64 5
  %11 = load void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)*, void (%"class.jingle_xmpp::XmppStanzaParseHandler"*)** %10, align 8
  tail call void %11(%"class.jingle_xmpp::XmppStanzaParseHandler"* %7) #4
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
