; ModuleID = '../../third_party/libvpx/source/libvpx/vp8/encoder/ratectrl.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp8/encoder/ratectrl.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.mv_context = type { [19 x i8] }
%struct.VP8_COMP = type { [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], [128 x [16 x i16]], %struct.macroblock, %struct.VP8Common, [9 x %struct.BOOL_CODER], %struct.VP8_CONFIG, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.TOKENEXTRA*, i32, i32, i32, i32, i32, i32, [20 x i32], [20 x i32], i32, i32, %struct.CODING_CONTEXT, i64, i64, i32, i32, [2 x i32], double, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, [5 x i32], i32, i32, i32, i32, double, i64, i64, i64, i32, i32, i32, i32, i64, i32, double, double, i64, i64, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x i8]]]], [4 x [8 x [3 x [11 x [2 x i32]]]]], i32, i32, i32, i32, %struct.vpx_codec_pkt_list*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [3 x i32], [3 x i32], [4 x i32], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i8*, i8*, [2 x [4 x i8]], [4 x i32], i8*, i32, i32, i32, i32, i32, i8*, i8*, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_atomic_int*, i32, %struct.vpx_atomic_int, i32, i32, i64*, i64, %struct.MB_ROW_COMP*, %struct.ENCODETHREAD_DATA*, %struct.LPFTHREAD_DATA, %union.sem_t*, %union.sem_t*, %union.sem_t, %union.sem_t, %struct.TOKENLIST*, [9 x i32], [9 x i8*], [9 x i8*], i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, %struct.variance_vtable*, i32**, i32*, i32*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, i32, i32, %struct.variance_vtable*, i32**, %union.int_mv*)*, i32 (%struct.macroblock*, %struct.block*, %struct.blockd*, %union.int_mv*, %union.int_mv*, i32, i32, i32*, %struct.variance_vtable*, i32**, %union.int_mv*)*, [5 x %struct.variance_vtable], i64, i64, i64, i64, [128 x i32], %struct.frame_contexts, %struct.frame_contexts, %struct.frame_contexts, %struct.twopass_rc, i32, i32, i32*, i8*, i32, i32, %union.int_mv*, i32*, i32*, i32, i32, i32, i32, %struct.vp8_denoiser, i32, [5 x %struct.LAYER_CONTEXT], [5 x i64], [5 x i64], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], [5 x double], i32, i8, [4 x i32], i32, %struct.rd_costs_struct, i32, i32, [12 x i8] }
%struct.macroblock = type { [400 x i16], [400 x i16], [256 x i8], i8*, [25 x %struct.block], %struct.yv12_buffer_config, %struct.macroblockd, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, %struct.PARTITION_INFO*, [4 x i32], %struct.search_site*, i32, i32, i32, i32, i32, i32, i32, i32*, i32*, i32, i32, [2 x i32*], [2 x i32*], [10 x i32]*, [10 x i32]*, [10 x [10 x i32]]*, i32*, [8 x [3 x [12 x i32]]]*, i32, i32, i32, i32, i32, i32, i8*, i8*, %struct.mv_context*, i32, i32, i32, i32, i32, i32, %union.int_mv, i32, i32, i8, i32, [4 x [8 x [3 x [12 x i32]]]], [2 x [2047 x i32]], [5 x i32], [4 x i32], i64, i64, [4 x i32], [20 x i32], [20 x i32], i32, [20 x i32], i32, i32, i32, i32, i32, [1024 x i32], void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (i16*, i16*, i32)*, void (%struct.block*, %struct.blockd*)*, i32, i32, [8 x i8] }
%struct.block = type { i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16*, i16, i8**, i32, i32 }
%struct.macroblockd = type { [384 x i8], [400 x i16], [400 x i16], [25 x i8], [7 x i8], [16 x i16], [16 x i16], [16 x i16], [16 x i16], [25 x %struct.blockd], i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.modeinfo*, i32, i32, i32, i32, [3 x i8*], [3 x i8*], [2 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES*, i8, i8, i8, i8, [3 x i8], [2 x [4 x i8]], i8, i8, [4 x i8], [4 x i8], [4 x i8], [4 x i8], i32, i32, i32, i32, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, void (i8*, i32, i32, i32, i8*, i32)*, i8*, i32, %struct.vpx_internal_error_info, [16 x i8], [704 x i8] }
%struct.blockd = type { i16*, i16*, i8*, i16*, i32, i8*, %union.b_mode_info }
%union.b_mode_info = type { i32 }
%struct.modeinfo = type { %struct.MB_MODE_INFO, [16 x %union.b_mode_info] }
%struct.MB_MODE_INFO = type { i8, i8, i8, i8, %union.int_mv, i8, i8, i8, i8 }
%struct.ENTROPY_CONTEXT_PLANES = type { [4 x i8], [2 x i8], [2 x i8], i8 }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.PARTITION_INFO = type { i32, [16 x %struct.anon] }
%struct.anon = type { i32, %union.int_mv }
%struct.search_site = type { %struct.MV, i32 }
%struct.MV = type { i16, i16 }
%union.int_mv = type { i32 }
%struct.VP8Common = type { %struct.vpx_internal_error_info, [8 x i8], [128 x [2 x i16]], [128 x [2 x i16]], [128 x [2 x i16]], i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, [4 x %struct.yv12_buffer_config], [4 x i32], i32, i32, i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.modeinfo*, %struct.modeinfo*, %struct.modeinfo*, i32, [12 x i8], %struct.loop_filter_info_n, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], %struct.ENTROPY_CONTEXT_PLANES*, %struct.ENTROPY_CONTEXT_PLANES, %struct.frame_contexts, %struct.frame_contexts, i32, i32, i32, i32, %struct.postproc_state, i32, [12 x i8] }
%struct.loop_filter_info_n = type { [64 x [16 x i8]], [64 x [16 x i8]], [64 x [16 x i8]], [4 x [16 x i8]], [4 x [4 x [4 x i8]]], [2 x [64 x i8]], [10 x i8], [6 x i8] }
%struct.postproc_state = type { i32, i32, i32, i32, i32, i8* }
%struct.BOOL_CODER = type { i32, i32, i32, i32, i8*, i8*, %struct.vpx_internal_error_info* }
%struct.VP8_CONFIG = type { i32, i32, i32, %struct.vpx_rational, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, %struct.vpx_codec_pkt_list*, i32, i32, [16 x i32], [16 x i32], i32, [16 x i32], i32, i32, %struct.vpx_rational, i8* }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.vpx_rational = type { i32, i32 }
%struct.lookahead_ctx = type opaque
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.TOKENEXTRA = type { i8*, i16, i8, i8 }
%struct.CODING_CONTEXT = type { i32, i32, i32, i32, i32, [4 x i32], [2 x %struct.mv_context], [2 x [2048 x i32]], [4 x i8], [3 x i8], [4 x i8], [3 x i8], [5 x i32], [4 x i32], [4 x i32], i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon }
%union.anon = type { %struct.anon.0, [40 x i8] }
%struct.anon.0 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, [20 x i32], i32, i32, i32, i32, i32, i32 }
%struct.vpx_atomic_int = type { i32 }
%struct.MB_ROW_COMP = type { %struct.macroblock, [4 x i32], i32, [12 x i8] }
%struct.ENCODETHREAD_DATA = type { i32, i8*, i8* }
%struct.LPFTHREAD_DATA = type { i32, i8* }
%union.sem_t = type { i64, [24 x i8] }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA* }
%struct.variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32)* }
%struct.frame_contexts = type { [9 x i8], [4 x i8], [3 x i8], [3 x i8], [4 x [8 x [3 x [11 x i8]]]], [2 x %struct.mv_context] }
%struct.twopass_rc = type { i32, double, i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS, i32, i64, i64, double, double, double, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, double }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%struct.vp8_denoiser = type { [4 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, %struct.yv12_buffer_config, i8*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.denoise_params }
%struct.denoise_params = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { double, i32, i64, i64, i64, i64, i64, i64, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, double, double, i32, i32, i64, i32, i32, i32, i32, [4 x i32], [2 x i32] }
%struct.rd_costs_struct = type { [2 x [2048 x i32]], [2 x [512 x i32]], [2 x [10 x i32]], [2 x [10 x i32]], [10 x [10 x [10 x i32]]], [14 x i32], [4 x [8 x [3 x [12 x i32]]]] }
%struct.LOWER_RES_FRAME_INFO = type { i32, i32, i32, double, [4 x i32], i32, i32, i32, %struct.LOWER_RES_MB_INFO* }
%struct.LOWER_RES_MB_INFO = type { i32, i32, %union.int_mv, i32 }

@vp8_bits_per_mb = hidden local_unnamed_addr constant [2 x [128 x i32]] [[128 x i32] [i32 1125000, i32 900000, i32 750000, i32 642857, i32 562500, i32 500000, i32 450000, i32 450000, i32 409090, i32 375000, i32 346153, i32 321428, i32 300000, i32 281250, i32 264705, i32 264705, i32 250000, i32 236842, i32 225000, i32 225000, i32 214285, i32 214285, i32 204545, i32 204545, i32 195652, i32 195652, i32 187500, i32 180000, i32 180000, i32 173076, i32 166666, i32 160714, i32 155172, i32 150000, i32 145161, i32 140625, i32 136363, i32 132352, i32 128571, i32 125000, i32 121621, i32 121621, i32 118421, i32 115384, i32 112500, i32 109756, i32 107142, i32 104651, i32 102272, i32 100000, i32 97826, i32 97826, i32 95744, i32 93750, i32 91836, i32 90000, i32 88235, i32 86538, i32 84905, i32 83333, i32 81818, i32 80357, i32 78947, i32 77586, i32 76271, i32 75000, i32 73770, i32 72580, i32 71428, i32 70312, i32 69230, i32 68181, i32 67164, i32 66176, i32 65217, i32 64285, i32 63380, i32 62500, i32 61643, i32 60810, i32 60000, i32 59210, i32 59210, i32 58441, i32 57692, i32 56962, i32 56250, i32 55555, i32 54878, i32 54216, i32 53571, i32 52941, i32 52325, i32 51724, i32 51136, i32 50561, i32 49450, i32 48387, i32 47368, i32 46875, i32 45918, i32 45000, i32 44554, i32 44117, i32 43269, i32 42452, i32 41666, i32 40909, i32 40178, i32 39473, i32 38793, i32 38135, i32 36885, i32 36290, i32 35714, i32 35156, i32 34615, i32 34090, i32 33582, i32 33088, i32 32608, i32 32142, i32 31468, i32 31034, i32 30405, i32 29801, i32 29220, i32 28662], [128 x i32] [i32 712500, i32 570000, i32 475000, i32 407142, i32 356250, i32 316666, i32 285000, i32 259090, i32 237500, i32 219230, i32 203571, i32 190000, i32 178125, i32 167647, i32 158333, i32 150000, i32 142500, i32 135714, i32 129545, i32 123913, i32 118750, i32 114000, i32 109615, i32 105555, i32 101785, i32 98275, i32 95000, i32 91935, i32 89062, i32 86363, i32 83823, i32 81428, i32 79166, i32 77027, i32 75000, i32 73076, i32 71250, i32 69512, i32 67857, i32 66279, i32 64772, i32 63333, i32 61956, i32 60638, i32 59375, i32 58163, i32 57000, i32 55882, i32 54807, i32 53773, i32 52777, i32 51818, i32 50892, i32 50000, i32 49137, i32 47500, i32 45967, i32 44531, i32 43181, i32 41911, i32 40714, i32 39583, i32 38513, i32 37500, i32 36538, i32 35625, i32 34756, i32 33928, i32 33139, i32 32386, i32 31666, i32 30978, i32 30319, i32 29687, i32 29081, i32 28500, i32 27941, i32 27403, i32 26886, i32 26388, i32 25909, i32 25446, i32 25000, i32 24568, i32 23949, i32 23360, i32 22800, i32 22265, i32 21755, i32 21268, i32 20802, i32 20357, i32 19930, i32 19520, i32 19127, i32 18750, i32 18387, i32 18037, i32 17701, i32 17378, i32 17065, i32 16764, i32 16473, i32 16101, i32 15745, i32 15405, i32 15079, i32 14766, i32 14467, i32 14179, i32 13902, i32 13636, i32 13380, i32 13133, i32 12895, i32 12666, i32 12445, i32 12179, i32 11924, i32 11632, i32 11445, i32 11220, i32 11003, i32 10795, i32 10594, i32 10401, i32 10215, i32 10035]], align 16
@vp8_gf_boost_qadjustment = hidden local_unnamed_addr constant [128 x i32] [i32 80, i32 82, i32 84, i32 86, i32 88, i32 90, i32 92, i32 94, i32 96, i32 97, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 106, i32 107, i32 108, i32 109, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117, i32 118, i32 119, i32 120, i32 121, i32 122, i32 123, i32 124, i32 125, i32 126, i32 127, i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 184, i32 185, i32 185, i32 186, i32 186, i32 187, i32 187, i32 188, i32 188, i32 189, i32 189, i32 190, i32 190, i32 191, i32 191, i32 192, i32 192, i32 193, i32 193, i32 194, i32 194, i32 194, i32 194, i32 195, i32 195, i32 196, i32 196, i32 197, i32 197, i32 198, i32 198], align 16
@vp8_default_mv_context = external local_unnamed_addr constant [2 x %struct.mv_context], align 16
@kf_boost_qadjustment = internal unnamed_addr constant [128 x i32] [i32 128, i32 129, i32 130, i32 131, i32 132, i32 133, i32 134, i32 135, i32 136, i32 137, i32 138, i32 139, i32 140, i32 141, i32 142, i32 143, i32 144, i32 145, i32 146, i32 147, i32 148, i32 149, i32 150, i32 151, i32 152, i32 153, i32 154, i32 155, i32 156, i32 157, i32 158, i32 159, i32 160, i32 161, i32 162, i32 163, i32 164, i32 165, i32 166, i32 167, i32 168, i32 169, i32 170, i32 171, i32 172, i32 173, i32 174, i32 175, i32 176, i32 177, i32 178, i32 179, i32 180, i32 181, i32 182, i32 183, i32 184, i32 185, i32 186, i32 187, i32 188, i32 189, i32 190, i32 191, i32 192, i32 193, i32 194, i32 195, i32 196, i32 197, i32 198, i32 199, i32 200, i32 200, i32 201, i32 201, i32 202, i32 203, i32 203, i32 203, i32 204, i32 204, i32 205, i32 205, i32 206, i32 206, i32 207, i32 207, i32 208, i32 208, i32 209, i32 209, i32 210, i32 210, i32 211, i32 211, i32 212, i32 212, i32 213, i32 213, i32 214, i32 214, i32 215, i32 215, i32 216, i32 216, i32 217, i32 217, i32 218, i32 218, i32 219, i32 219, i32 220, i32 220, i32 220, i32 220, i32 220, i32 220, i32 220, i32 220, i32 220, i32 220, i32 220, i32 220, i32 220, i32 220, i32 220, i32 220], align 16
@gf_intra_usage_adjustment = internal unnamed_addr constant [20 x i32] [i32 125, i32 120, i32 115, i32 110, i32 105, i32 100, i32 95, i32 85, i32 80, i32 75, i32 70, i32 65, i32 60, i32 55, i32 50, i32 50, i32 50, i32 50, i32 50, i32 50], align 16
@gf_adjust_table = internal unnamed_addr constant [101 x i32] [i32 100, i32 115, i32 130, i32 145, i32 160, i32 175, i32 190, i32 200, i32 210, i32 220, i32 230, i32 240, i32 260, i32 270, i32 280, i32 290, i32 300, i32 310, i32 320, i32 330, i32 340, i32 350, i32 360, i32 370, i32 380, i32 390, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400, i32 400], align 16
@kf_gf_boost_qlimits = internal unnamed_addr constant [128 x i32] [i32 150, i32 155, i32 160, i32 165, i32 170, i32 175, i32 180, i32 185, i32 190, i32 195, i32 200, i32 205, i32 210, i32 215, i32 220, i32 225, i32 230, i32 235, i32 240, i32 245, i32 250, i32 255, i32 260, i32 265, i32 270, i32 275, i32 280, i32 285, i32 290, i32 295, i32 300, i32 305, i32 310, i32 320, i32 330, i32 340, i32 350, i32 360, i32 370, i32 380, i32 390, i32 400, i32 410, i32 420, i32 430, i32 440, i32 450, i32 460, i32 470, i32 480, i32 490, i32 500, i32 510, i32 520, i32 530, i32 540, i32 550, i32 560, i32 570, i32 580, i32 590, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600, i32 600], align 16
@gf_interval_table = internal unnamed_addr constant [101 x i32] [i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 9, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_save_coding_context(%struct.VP8_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 40
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 49, i32 1
  store i32 %3, i32* %4, align 4
  %5 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 46
  %6 = load i32, i32* %5, align 32
  %7 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 49, i32 3
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 59
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 49, i32 4
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 58
  %12 = load i32, i32* %11, align 8
  %13 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 49, i32 2
  store i32 %12, i32* %13, align 4
  %14 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 49, i32 6, i64 0, i32 0, i64 0
  %15 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 59, i32 5, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %14, i8* align 1 %15, i64 38, i1 false)
  %16 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 49, i32 7, i64 0
  %17 = bitcast [2048 x i32]* %16 to i8*
  %18 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 219, i32 0, i64 0
  %19 = bitcast [2048 x i32]* %18 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %17, i8* align 4 %19, i64 16384, i1 false)
  %20 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 49, i32 8, i64 0
  %21 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 59, i32 1, i64 0
  %22 = bitcast i8* %21 to i32*
  %23 = bitcast i8* %20 to i32*
  %24 = load i32, i32* %22, align 1
  store i32 %24, i32* %23, align 4
  %25 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 49, i32 9, i64 0
  %26 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 59, i32 2, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %25, i8* align 1 %26, i64 3, i1 false)
  %27 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 49, i32 12, i64 0
  %28 = bitcast i32* %27 to i8*
  %29 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 52, i64 0
  %30 = bitcast i32* %29 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %28, i8* align 4 %30, i64 20, i1 false)
  %31 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 49, i32 13, i64 0
  %32 = bitcast i32* %31 to i8*
  %33 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 53, i64 0
  %34 = bitcast i32* %33 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %32, i8* align 8 %34, i64 16, i1 false)
  %35 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 127
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 49, i32 15
  store i32 %36, i32* %37, align 4
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_restore_coding_context(%struct.VP8_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 49, i32 1
  %3 = load i32, i32* %2, align 4
  %4 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 40
  store i32 %3, i32* %4, align 4
  %5 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 49, i32 3
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 46
  store i32 %6, i32* %7, align 32
  %8 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 49, i32 4
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 59
  store i32 %9, i32* %10, align 4
  %11 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 49, i32 2
  %12 = load i32, i32* %11, align 4
  %13 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 58
  store i32 %12, i32* %13, align 8
  %14 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 59, i32 5, i64 0, i32 0, i64 0
  %15 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 49, i32 6, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 4 %15, i64 38, i1 false)
  %16 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 219, i32 0, i64 0
  %17 = bitcast [2048 x i32]* %16 to i8*
  %18 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 49, i32 7, i64 0
  %19 = bitcast [2048 x i32]* %18 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %17, i8* align 4 %19, i64 16384, i1 false)
  %20 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 59, i32 1, i64 0
  %21 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 49, i32 8, i64 0
  %22 = bitcast i8* %21 to i32*
  %23 = bitcast i8* %20 to i32*
  %24 = load i32, i32* %22, align 4
  store i32 %24, i32* %23, align 1
  %25 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 59, i32 2, i64 0
  %26 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 49, i32 9, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 4 %26, i64 3, i1 false)
  %27 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 52, i64 0
  %28 = bitcast i32* %27 to i8*
  %29 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 49, i32 12, i64 0
  %30 = bitcast i32* %29 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %28, i8* align 4 %30, i64 20, i1 false)
  %31 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 53, i64 0
  %32 = bitcast i32* %31 to i8*
  %33 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 49, i32 13, i64 0
  %34 = bitcast i32* %33 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 4 %34, i64 16, i1 false)
  %35 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 49, i32 15
  %36 = load i32, i32* %35, align 4
  %37 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 127
  store i32 %36, i32* %37, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_setup_key_frame(%struct.VP8_COMP*) local_unnamed_addr #0 {
  %2 = alloca i64, align 8
  %3 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19
  tail call void @vp8_default_coef_probs(%struct.VP8Common* %3) #4
  %4 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 59, i32 5, i64 0
  %5 = getelementptr inbounds %struct.mv_context, %struct.mv_context* %4, i64 0, i32 0, i64 0
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 16 getelementptr inbounds ([2 x %struct.mv_context], [2 x %struct.mv_context]* @vp8_default_mv_context, i64 0, i64 0, i32 0, i64 0), i64 38, i1 false)
  %6 = bitcast i64* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #4
  store i64 4294967297, i64* %2, align 8
  %7 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 23, i64 0
  %8 = bitcast i64* %2 to i32*
  call void @vp8_build_component_cost_table(i32** %7, %struct.mv_context* %4, i32* nonnull %8) #4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #4
  %9 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 184, i32 0, i64 0
  %10 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 59, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 2 %10, i64 1113, i1 false)
  %11 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 185, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %11, i8* align 2 %10, i64 1113, i1 false)
  %12 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 183, i32 0, i64 0
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 32 %12, i8* align 2 %10, i64 1113, i1 false)
  %13 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 34
  %14 = load i32, i32* %13, align 16
  %15 = mul nsw i32 %14, 3
  %16 = sdiv i32 %15, 8
  %17 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 46
  store i32 %16, i32* %17, align 32
  %18 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 115
  %19 = load i32, i32* %18, align 8
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %24, label %21

21:                                               ; preds = %1
  %22 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 66
  %23 = load i32, i32* %22, align 8
  br label %24

24:                                               ; preds = %1, %21
  %25 = phi i32 [ %23, %21 ], [ 7, %1 ]
  %26 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 59
  store i32 %25, i32* %26, align 4
  %27 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  store i32 1, i32* %27, align 16
  %28 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 51
  store i32 1, i32* %28, align 4
  ret void
}

declare void @vp8_default_coef_probs(%struct.VP8Common*) local_unnamed_addr #2

declare void @vp8_build_component_cost_table(i32**, %struct.mv_context*, i32*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_update_rate_correction_factors(%struct.VP8_COMP* nocapture, i32) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 34
  %4 = load i32, i32* %3, align 16
  tail call void @vpx_clear_system_state() #4
  %5 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 23
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %8, label %10

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 56
  br label %30

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 52
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 1
  br i1 %13, label %14, label %28

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 154
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %28

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 51
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %26

22:                                               ; preds = %18
  %23 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  %24 = load i32, i32* %23, align 16
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %28, label %26

26:                                               ; preds = %22, %18
  %27 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 57
  br label %30

28:                                               ; preds = %22, %14, %10
  %29 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 55
  br label %30

30:                                               ; preds = %26, %28, %8
  %31 = phi double* [ %9, %8 ], [ %29, %28 ], [ %27, %26 ]
  %32 = load double, double* %31, align 8
  %33 = zext i32 %6 to i64
  %34 = sext i32 %4 to i64
  %35 = getelementptr inbounds [2 x [128 x i32]], [2 x [128 x i32]]* @vp8_bits_per_mb, i64 0, i64 %33, i64 %34
  %36 = load i32, i32* %35, align 4
  %37 = sitofp i32 %36 to double
  %38 = fmul double %32, %37
  %39 = fadd double %38, 5.000000e-01
  %40 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 26
  %41 = load i32, i32* %40, align 16
  %42 = sitofp i32 %41 to double
  %43 = fmul double %39, %42
  %44 = fmul double %43, 0x3F60000000000000
  %45 = fptosi double %44 to i32
  %46 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 65
  %47 = load i32, i32* %46, align 4
  %48 = icmp sgt i32 %47, 0
  br i1 %48, label %49, label %81

49:                                               ; preds = %30
  %50 = and i32 %47, 1
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %57, label %52

52:                                               ; preds = %49
  %53 = add nsw i32 %47, -1
  %54 = sitofp i32 %45 to double
  %55 = fmul double %54, 0x3FEFAE147AE147AE
  %56 = fptosi double %55 to i32
  br label %57

57:                                               ; preds = %49, %52
  %58 = phi double [ 0x3FEFAE147AE147AE, %49 ], [ 0x3FEFAE6666666666, %52 ]
  %59 = phi i32 [ %47, %49 ], [ %53, %52 ]
  %60 = phi i32 [ %45, %49 ], [ %56, %52 ]
  %61 = phi i32 [ undef, %49 ], [ %56, %52 ]
  %62 = icmp eq i32 %47, 1
  br i1 %62, label %81, label %63

63:                                               ; preds = %57, %63
  %64 = phi double [ %79, %63 ], [ %58, %57 ]
  %65 = phi i32 [ %73, %63 ], [ %59, %57 ]
  %66 = phi i32 [ %76, %63 ], [ %60, %57 ]
  %67 = sitofp i32 %66 to double
  %68 = fmul double %64, %67
  %69 = fptosi double %68 to i32
  %70 = fadd double %64, 3.906250e-05
  %71 = fcmp oge double %70, 0x3FEFF7CED916872B
  %72 = select i1 %71, double 0x3FEFF7CED916872B, double %70
  %73 = add nsw i32 %65, -2
  %74 = sitofp i32 %69 to double
  %75 = fmul double %72, %74
  %76 = fptosi double %75 to i32
  %77 = fadd double %72, 3.906250e-05
  %78 = fcmp oge double %77, 0x3FEFF7CED916872B
  %79 = select i1 %78, double 0x3FEFF7CED916872B, double %77
  %80 = icmp sgt i32 %73, 0
  br i1 %80, label %63, label %81

81:                                               ; preds = %57, %63, %30
  %82 = phi i32 [ %45, %30 ], [ %61, %57 ], [ %76, %63 ]
  %83 = icmp sgt i32 %82, 0
  br i1 %83, label %84, label %118

84:                                               ; preds = %81
  %85 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 53
  %86 = load i32, i32* %85, align 4
  %87 = mul nsw i32 %86, 100
  %88 = sdiv i32 %87, %82
  %89 = icmp eq i32 %1, 1
  %90 = select i1 %89, double 3.750000e-01, double 2.500000e-01
  %91 = icmp eq i32 %1, 0
  %92 = select i1 %91, double 7.500000e-01, double %90
  %93 = icmp sgt i32 %88, 102
  br i1 %93, label %94, label %105

94:                                               ; preds = %84
  %95 = add nsw i32 %88, -100
  %96 = sitofp i32 %95 to double
  %97 = fmul double %92, %96
  %98 = fadd double %97, 1.005000e+02
  %99 = fptosi double %98 to i32
  %100 = sitofp i32 %99 to double
  %101 = fmul double %32, %100
  %102 = fdiv double %101, 1.000000e+02
  %103 = fcmp ogt double %102, 5.000000e+01
  br i1 %103, label %104, label %118

104:                                              ; preds = %94
  br label %118

105:                                              ; preds = %84
  %106 = icmp slt i32 %88, 99
  br i1 %106, label %107, label %118

107:                                              ; preds = %105
  %108 = sub nsw i32 100, %88
  %109 = sitofp i32 %108 to double
  %110 = fmul double %92, %109
  %111 = fsub double 1.005000e+02, %110
  %112 = fptosi double %111 to i32
  %113 = sitofp i32 %112 to double
  %114 = fmul double %32, %113
  %115 = fdiv double %114, 1.000000e+02
  %116 = fcmp olt double %115, 1.000000e-02
  br i1 %116, label %117, label %118

117:                                              ; preds = %107
  br label %118

118:                                              ; preds = %81, %105, %117, %107, %94, %104
  %119 = phi double [ 5.000000e+01, %104 ], [ %102, %94 ], [ 1.000000e-02, %117 ], [ %115, %107 ], [ %32, %105 ], [ %32, %81 ]
  br i1 %7, label %120, label %122

120:                                              ; preds = %118
  %121 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 56
  store double %119, double* %121, align 8
  br label %142

122:                                              ; preds = %118
  %123 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 52
  %124 = load i32, i32* %123, align 4
  %125 = icmp eq i32 %124, 1
  br i1 %125, label %126, label %140

126:                                              ; preds = %122
  %127 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 154
  %128 = load i32, i32* %127, align 8
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %130, label %140

130:                                              ; preds = %126
  %131 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 51
  %132 = load i32, i32* %131, align 4
  %133 = icmp eq i32 %132, 0
  br i1 %133, label %134, label %138

134:                                              ; preds = %130
  %135 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  %136 = load i32, i32* %135, align 16
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %140, label %138

138:                                              ; preds = %134, %130
  %139 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 57
  store double %119, double* %139, align 16
  br label %142

140:                                              ; preds = %134, %126, %122
  %141 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 55
  store double %119, double* %141, align 32
  br label %142

142:                                              ; preds = %138, %140, %120
  ret void
}

declare void @vpx_clear_system_state() local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @vp8_regulate_q(%struct.VP8_COMP*, i32) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 95
  %4 = load i32, i32* %3, align 16
  %5 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 149
  %6 = load i32, i32* %5, align 4
  %7 = icmp eq i32 %6, 1
  br i1 %7, label %8, label %11

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 94
  %10 = load i32, i32* %9, align 4
  store i32 %10, i32* %3, align 16
  br label %188

11:                                               ; preds = %2
  %12 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 65
  store i32 0, i32* %12, align 4
  %13 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 25
  %14 = load i32, i32* %13, align 8
  %15 = icmp sgt i32 %14, -1
  %16 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 23
  %17 = load i32, i32* %16, align 4
  %18 = icmp eq i32 %17, 0
  br i1 %15, label %19, label %49

19:                                               ; preds = %11
  br i1 %18, label %20, label %23

20:                                               ; preds = %19
  %21 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 40
  %22 = load i32, i32* %21, align 4
  br label %188

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 52
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 1
  br i1 %26, label %27, label %168

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 51
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %38, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 154
  %33 = load i32, i32* %32, align 8
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %31
  %36 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 39
  %37 = load i32, i32* %36, align 8
  br label %168

38:                                               ; preds = %31, %27
  %39 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  %40 = load i32, i32* %39, align 16
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %168, label %42

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 154
  %44 = load i32, i32* %43, align 8
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %168

46:                                               ; preds = %42
  %47 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 41
  %48 = load i32, i32* %47, align 8
  br label %168

49:                                               ; preds = %11
  br i1 %18, label %50, label %52

50:                                               ; preds = %49
  %51 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 56
  br label %72

52:                                               ; preds = %49
  %53 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 52
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 1
  br i1 %55, label %56, label %70

56:                                               ; preds = %52
  %57 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 154
  %58 = load i32, i32* %57, align 8
  %59 = icmp eq i32 %58, 0
  br i1 %59, label %60, label %70

60:                                               ; preds = %56
  %61 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 51
  %62 = load i32, i32* %61, align 4
  %63 = icmp eq i32 %62, 0
  br i1 %63, label %64, label %68

64:                                               ; preds = %60
  %65 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  %66 = load i32, i32* %65, align 16
  %67 = icmp eq i32 %66, 0
  br i1 %67, label %70, label %68

68:                                               ; preds = %64, %60
  %69 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 57
  br label %72

70:                                               ; preds = %64, %56, %52
  %71 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 55
  br label %72

72:                                               ; preds = %68, %70, %50
  %73 = phi double* [ %51, %50 ], [ %71, %70 ], [ %69, %68 ]
  %74 = load double, double* %73, align 8
  %75 = icmp sgt i32 %1, 4194302
  br i1 %75, label %76, label %81

76:                                               ; preds = %72
  %77 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 26
  %78 = load i32, i32* %77, align 16
  %79 = sdiv i32 %1, %78
  %80 = shl i32 %79, 9
  br label %86

81:                                               ; preds = %72
  %82 = shl i32 %1, 9
  %83 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 26
  %84 = load i32, i32* %83, align 16
  %85 = sdiv i32 %82, %84
  br label %86

86:                                               ; preds = %81, %76
  %87 = phi i32 [ %80, %76 ], [ %85, %81 ]
  %88 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 97
  %89 = load i32, i32* %88, align 8
  %90 = zext i32 %17 to i64
  %91 = sext i32 %89 to i64
  %92 = getelementptr inbounds [2 x [128 x i32]], [2 x [128 x i32]]* @vp8_bits_per_mb, i64 0, i64 %90, i64 %91
  %93 = load i32, i32* %92, align 4
  %94 = sitofp i32 %93 to double
  %95 = fmul double %74, %94
  %96 = fadd double %95, 5.000000e-01
  %97 = fptosi double %96 to i32
  %98 = icmp slt i32 %87, %97
  br i1 %98, label %99, label %112

99:                                               ; preds = %86
  %100 = sext i32 %4 to i64
  br label %120

101:                                              ; preds = %120
  %102 = getelementptr inbounds [2 x [128 x i32]], [2 x [128 x i32]]* @vp8_bits_per_mb, i64 0, i64 %90, i64 %123
  %103 = load i32, i32* %102, align 4
  %104 = sitofp i32 %103 to double
  %105 = fmul double %74, %104
  %106 = fadd double %105, 5.000000e-01
  %107 = fptosi double %106 to i32
  %108 = icmp slt i32 %87, %107
  br i1 %108, label %120, label %109

109:                                              ; preds = %101
  %110 = sub nsw i32 %122, %87
  %111 = trunc i64 %123 to i32
  br label %112

112:                                              ; preds = %109, %86
  %113 = phi i32 [ %89, %86 ], [ %111, %109 ]
  %114 = phi i32 [ 2147483647, %86 ], [ %110, %109 ]
  %115 = phi i32 [ %97, %86 ], [ %107, %109 ]
  %116 = sub nsw i32 %87, %115
  %117 = icmp sgt i32 %116, %114
  %118 = zext i1 %117 to i32
  %119 = sub i32 %113, %118
  br label %125

120:                                              ; preds = %99, %101
  %121 = phi i64 [ %91, %99 ], [ %123, %101 ]
  %122 = phi i32 [ %97, %99 ], [ %107, %101 ]
  %123 = add nsw i64 %121, 1
  %124 = icmp slt i64 %121, %100
  br i1 %124, label %101, label %125

125:                                              ; preds = %120, %112
  %126 = phi i32 [ %115, %112 ], [ %122, %120 ]
  %127 = phi i32 [ %119, %112 ], [ %4, %120 ]
  %128 = icmp sgt i32 %127, 126
  br i1 %128, label %129, label %167

129:                                              ; preds = %125
  br i1 %18, label %151, label %130

130:                                              ; preds = %129
  %131 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 52
  %132 = load i32, i32* %131, align 4
  %133 = icmp eq i32 %132, 1
  br i1 %133, label %134, label %150

134:                                              ; preds = %130
  %135 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 154
  %136 = load i32, i32* %135, align 8
  %137 = icmp eq i32 %136, 0
  br i1 %137, label %138, label %150

138:                                              ; preds = %134
  %139 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 51
  %140 = load i32, i32* %139, align 4
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %151

142:                                              ; preds = %138
  %143 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  %144 = load i32, i32* %143, align 16
  %145 = icmp eq i32 %144, 0
  br i1 %145, label %150, label %146

146:                                              ; preds = %142
  %147 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 32
  %148 = load i32, i32* %147, align 8
  %149 = icmp eq i32 %148, 0
  br i1 %149, label %151, label %150

150:                                              ; preds = %146, %142, %134, %130
  br label %151

151:                                              ; preds = %138, %146, %129, %150
  %152 = phi i32 [ 192, %150 ], [ 0, %129 ], [ 16, %146 ], [ 16, %138 ]
  br label %153

153:                                              ; preds = %158, %151
  %154 = phi i32 [ 0, %151 ], [ %159, %158 ]
  %155 = phi i32 [ %126, %151 ], [ %162, %158 ]
  %156 = phi double [ 0x3FEFAE147AE147AE, %151 ], [ %165, %158 ]
  %157 = icmp ult i32 %154, %152
  br i1 %157, label %158, label %167

158:                                              ; preds = %153
  %159 = add nuw nsw i32 %154, 1
  store i32 %159, i32* %12, align 4
  %160 = sitofp i32 %155 to double
  %161 = fmul double %156, %160
  %162 = fptosi double %161 to i32
  %163 = fadd double %156, 3.906250e-05
  %164 = fcmp oge double %163, 0x3FEFF7CED916872B
  %165 = select i1 %164, double 0x3FEFF7CED916872B, double %163
  %166 = icmp slt i32 %87, %162
  br i1 %166, label %153, label %167

167:                                              ; preds = %158, %153, %125
  br i1 %18, label %188, label %168

168:                                              ; preds = %35, %46, %38, %42, %23, %167
  %169 = phi i32 [ %127, %167 ], [ %14, %23 ], [ %37, %35 ], [ %14, %38 ], [ %48, %46 ], [ %14, %42 ]
  %170 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 119
  %171 = load i32, i32* %170, align 8
  %172 = icmp eq i32 %171, 0
  br i1 %172, label %173, label %188

173:                                              ; preds = %168
  %174 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 16
  %175 = load i32, i32* %174, align 4
  %176 = icmp eq i32 %175, 1
  br i1 %176, label %177, label %188

177:                                              ; preds = %173
  %178 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 10
  %179 = load i32, i32* %178, align 4
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %188, label %181

181:                                              ; preds = %177
  %182 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 54, i64 1
  %183 = load i32, i32* %182, align 4
  %184 = sub nsw i32 %183, %169
  %185 = icmp sgt i32 %184, 12
  %186 = add nsw i32 %183, -12
  %187 = select i1 %185, i32 %186, i32 %169
  br label %188

188:                                              ; preds = %20, %168, %173, %181, %167, %177, %8
  %189 = phi i32 [ %10, %8 ], [ %187, %181 ], [ %169, %177 ], [ %169, %173 ], [ %169, %168 ], [ %127, %167 ], [ %22, %20 ]
  ret i32 %189
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp8_adjust_key_frame_context(%struct.VP8_COMP*) local_unnamed_addr #0 {
  tail call void @vpx_clear_system_state() #4
  %2 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 119
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 2
  br i1 %4, label %82, label %5

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 53
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 70
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %7, %9
  br i1 %10, label %11, label %82

11:                                               ; preds = %5
  %12 = sub nsw i32 %7, %9
  %13 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 52
  %14 = load i32, i32* %13, align 4
  %15 = icmp ugt i32 %14, 1
  br i1 %15, label %16, label %20

16:                                               ; preds = %11
  %17 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 63
  %18 = load i32, i32* %17, align 4
  %19 = add nsw i32 %18, %12
  store i32 %19, i32* %17, align 4
  br label %30

20:                                               ; preds = %11
  %21 = mul nsw i32 %12, 7
  %22 = sdiv i32 %21, 8
  %23 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 63
  %24 = load i32, i32* %23, align 4
  %25 = add nsw i32 %24, %22
  store i32 %25, i32* %23, align 4
  %26 = sdiv i32 %12, 8
  %27 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 61
  %28 = load i32, i32* %27, align 4
  %29 = add nsw i32 %28, %26
  store i32 %29, i32* %27, align 4
  br label %30

30:                                               ; preds = %20, %16
  %31 = phi i32 [ %25, %20 ], [ %19, %16 ]
  %32 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 68
  %33 = load i64, i64* %32, align 32
  %34 = icmp eq i64 %33, 1
  br i1 %34, label %35, label %52

35:                                               ; preds = %30
  %36 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 13
  %37 = load i32, i32* %36, align 8
  %38 = icmp sgt i32 %37, 1
  %39 = select i1 %38, i32 %37, i32 1
  %40 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 74
  %41 = load double, double* %40, align 16
  %42 = fptosi double %41 to i32
  %43 = shl nsw i32 %42, 1
  %44 = or i32 %43, 1
  %45 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 12
  %46 = load i32, i32* %45, align 4
  %47 = icmp ne i32 %46, 0
  %48 = icmp sgt i32 %44, %39
  %49 = and i1 %47, %48
  %50 = select i1 %49, i32 %39, i32 %44
  %51 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 69, i64 4
  store i32 %50, i32* %51, align 8
  br label %76

52:                                               ; preds = %30
  %53 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 40
  %54 = load i32, i32* %53, align 4
  %55 = icmp eq i32 %54, 0
  %56 = select i1 %55, i32 1, i32 %54
  %57 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 69, i64 1
  %58 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 69, i64 0
  %59 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 69, i64 4
  %60 = bitcast i32* %57 to <4 x i32>*
  %61 = load <4 x i32>, <4 x i32>* %60, align 4
  %62 = extractelement <4 x i32> %61, i32 1
  %63 = shl i32 %62, 1
  %64 = extractelement <4 x i32> %61, i32 2
  %65 = mul i32 %64, 3
  %66 = bitcast i32* %58 to <4 x i32>*
  store <4 x i32> %61, <4 x i32>* %66, align 4
  %67 = extractelement <4 x i32> %61, i32 3
  %68 = shl i32 %67, 2
  store i32 %56, i32* %59, align 4
  %69 = mul i32 %56, 5
  %70 = extractelement <4 x i32> %61, i32 0
  %71 = add i32 %69, %70
  %72 = add i32 %71, %63
  %73 = add i32 %72, %65
  %74 = add i32 %73, %68
  %75 = udiv i32 %74, 15
  br label %76

76:                                               ; preds = %35, %52
  %77 = phi i32 [ %50, %35 ], [ %75, %52 ]
  %78 = icmp eq i32 %77, 0
  %79 = select i1 %78, i32 1, i32 %77
  %80 = sdiv i32 %31, %79
  %81 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 64
  store i32 %80, i32* %81, align 16
  br label %82

82:                                               ; preds = %1, %76, %5
  %83 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 40
  store i32 0, i32* %83, align 4
  %84 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 68
  %85 = load i64, i64* %84, align 32
  %86 = add nsw i64 %85, 1
  store i64 %86, i64* %84, align 32
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp8_compute_frame_size_bounds(%struct.VP8_COMP* nocapture readonly, i32* nocapture, i32* nocapture) local_unnamed_addr #3 {
  %4 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 25
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, -1
  br i1 %6, label %7, label %8

7:                                                ; preds = %3
  store i32 0, i32* %1, align 4
  br label %86

8:                                                ; preds = %3
  %9 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 52
  %10 = load i32, i32* %9, align 16
  %11 = sext i32 %10 to i64
  %12 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 23
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %19

15:                                               ; preds = %8
  %16 = mul nsw i64 %11, 9
  %17 = sdiv i64 %16, 8
  %18 = mul nsw i64 %11, 7
  br label %72

19:                                               ; preds = %8
  %20 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 52
  %21 = load i32, i32* %20, align 4
  %22 = icmp ugt i32 %21, 1
  br i1 %22, label %31, label %23

23:                                               ; preds = %19
  %24 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 51
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %31

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  %29 = load i32, i32* %28, align 16
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %35, label %31

31:                                               ; preds = %27, %23, %19
  %32 = mul nsw i64 %11, 9
  %33 = sdiv i64 %32, 8
  %34 = mul nsw i64 %11, 7
  br label %72

35:                                               ; preds = %27
  %36 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 16
  %37 = load i32, i32* %36, align 4
  %38 = icmp eq i32 %37, 1
  br i1 %38, label %39, label %64

39:                                               ; preds = %35
  %40 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 86
  %41 = load i64, i64* %40, align 32
  %42 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 20
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 21
  %45 = load i64, i64* %44, align 8
  %46 = add nsw i64 %45, %43
  %47 = ashr i64 %46, 1
  %48 = icmp slt i64 %41, %47
  br i1 %48, label %53, label %49

49:                                               ; preds = %39
  %50 = mul nsw i64 %11, 12
  %51 = sdiv i64 %50, 8
  %52 = mul nsw i64 %11, 6
  br label %72

53:                                               ; preds = %39
  %54 = ashr i64 %43, 1
  %55 = icmp sgt i64 %41, %54
  br i1 %55, label %60, label %56

56:                                               ; preds = %53
  %57 = mul nsw i64 %11, 10
  %58 = sdiv i64 %57, 8
  %59 = shl nsw i64 %11, 2
  br label %72

60:                                               ; preds = %53
  %61 = mul nsw i64 %11, 11
  %62 = sdiv i64 %61, 8
  %63 = mul nsw i64 %11, 5
  br label %72

64:                                               ; preds = %35
  %65 = icmp eq i32 %37, 2
  %66 = mul nsw i64 %11, 11
  %67 = sdiv i64 %66, 8
  br i1 %65, label %68, label %70

68:                                               ; preds = %64
  %69 = shl nsw i64 %11, 1
  br label %72

70:                                               ; preds = %64
  %71 = mul nsw i64 %11, 5
  br label %72

72:                                               ; preds = %31, %68, %70, %49, %60, %56, %15
  %73 = phi i64 [ %17, %15 ], [ %33, %31 ], [ %51, %49 ], [ %58, %56 ], [ %62, %60 ], [ %67, %68 ], [ %67, %70 ]
  %74 = phi i64 [ %18, %15 ], [ %34, %31 ], [ %52, %49 ], [ %59, %56 ], [ %63, %60 ], [ %69, %68 ], [ %71, %70 ]
  %75 = sdiv i64 %74, 8
  %76 = icmp sgt i64 %75, 200
  %77 = select i1 %76, i64 %75, i64 200
  %78 = icmp slt i64 %77, 2147483847
  %79 = select i1 %78, i64 %77, i64 2147483847
  %80 = icmp slt i64 %73, 2147483447
  %81 = select i1 %80, i64 %73, i64 2147483447
  %82 = trunc i64 %79 to i32
  %83 = add i32 %82, -200
  store i32 %83, i32* %1, align 4
  %84 = trunc i64 %81 to i32
  %85 = add i32 %84, 200
  br label %86

86:                                               ; preds = %72, %7
  %87 = phi i32 [ %85, %72 ], [ 2147483647, %7 ]
  store i32 %87, i32* %2, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp8_pick_frame_size(%struct.VP8_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 23
  %3 = load i32, i32* %2, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %124

5:                                                ; preds = %1
  tail call void @vpx_clear_system_state() #4
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 25
  %7 = load i32, i32* %6, align 8
  %8 = icmp sgt i32 %7, -1
  br i1 %8, label %9, label %30

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 40
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 26
  %13 = load i32, i32* %12, align 16
  %14 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 56
  %15 = load double, double* %14, align 8
  %16 = sext i32 %11 to i64
  %17 = getelementptr inbounds [2 x [128 x i32]], [2 x [128 x i32]]* @vp8_bits_per_mb, i64 0, i64 0, i64 %16
  %18 = load i32, i32* %17, align 4
  %19 = sitofp i32 %18 to double
  %20 = fmul double %15, %19
  %21 = fadd double %20, 5.000000e-01
  %22 = fptosi double %21 to i32
  %23 = icmp sgt i32 %13, 2048
  %24 = ashr i32 %22, 9
  %25 = mul nsw i32 %24, %13
  %26 = mul nsw i32 %13, %22
  %27 = ashr i32 %26, 9
  %28 = select i1 %23, i32 %25, i32 %27
  %29 = sext i32 %28 to i64
  br label %100

30:                                               ; preds = %5
  %31 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 119
  %32 = load i32, i32* %31, align 8
  %33 = icmp eq i32 %32, 2
  br i1 %33, label %34, label %38

34:                                               ; preds = %30
  %35 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 70
  %36 = load i32, i32* %35, align 4
  %37 = sext i32 %36 to i64
  br label %100

38:                                               ; preds = %30
  %39 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 60
  %40 = load i32, i32* %39, align 4
  %41 = icmp eq i32 %40, 0
  br i1 %41, label %42, label %53

42:                                               ; preds = %38
  %43 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 19
  %44 = load i64, i64* %43, align 8
  %45 = sdiv i64 %44, 2
  %46 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 4
  %47 = load i32, i32* %46, align 4
  %48 = mul i32 %47, 3
  %49 = lshr i32 %48, 1
  %50 = zext i32 %49 to i64
  %51 = icmp ugt i64 %45, %50
  %52 = select i1 %51, i64 %50, i64 %45
  br label %100

53:                                               ; preds = %38
  %54 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 25
  %55 = load i32, i32* %54, align 4
  %56 = and i32 %55, 1
  %57 = icmp eq i32 %56, 0
  %58 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 81
  %59 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 78
  %60 = select i1 %57, i32* %59, i32* %58
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 52
  %63 = load i32, i32* %62, align 4
  %64 = icmp eq i32 %63, 1
  %65 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 74
  %66 = load double, double* %65, align 16
  br i1 %64, label %67, label %73

67:                                               ; preds = %53
  %68 = fmul double %66, 2.000000e+00
  %69 = fadd double %68, -1.600000e+01
  %70 = fptosi double %69 to i32
  %71 = icmp sgt i32 %70, 32
  %72 = select i1 %71, i32 %70, i32 32
  br label %73

73:                                               ; preds = %67, %53
  %74 = phi i32 [ %72, %67 ], [ 32, %53 ]
  %75 = sext i32 %61 to i64
  %76 = getelementptr inbounds [128 x i32], [128 x i32]* @kf_boost_qadjustment, i64 0, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = mul nsw i32 %77, %74
  %79 = sdiv i32 %78, 100
  %80 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 40
  %81 = load i32, i32* %80, align 4
  %82 = uitofp i32 %81 to double
  %83 = fmul double %66, 5.000000e-01
  %84 = fcmp ogt double %83, %82
  br i1 %84, label %85, label %90

85:                                               ; preds = %73
  %86 = mul i32 %79, %81
  %87 = uitofp i32 %86 to double
  %88 = fdiv double %87, %83
  %89 = fptosi double %88 to i32
  br label %90

90:                                               ; preds = %85, %73
  %91 = phi i32 [ %89, %85 ], [ %79, %73 ]
  %92 = icmp sgt i32 %91, 16
  %93 = select i1 %92, i32 %91, i32 16
  %94 = add nuw nsw i32 %93, 16
  %95 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 70
  %96 = load i32, i32* %95, align 4
  %97 = mul nsw i32 %94, %96
  %98 = ashr i32 %97, 4
  %99 = sext i32 %98 to i64
  br label %100

100:                                              ; preds = %90, %42, %34, %9
  %101 = phi i64 [ %29, %9 ], [ %37, %34 ], [ %99, %90 ], [ %52, %42 ]
  %102 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 8
  %103 = load i32, i32* %102, align 4
  %104 = icmp eq i32 %103, 0
  br i1 %104, label %113, label %105

105:                                              ; preds = %100
  %106 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 70
  %107 = load i32, i32* %106, align 4
  %108 = mul i32 %107, %103
  %109 = udiv i32 %108, 100
  %110 = zext i32 %109 to i64
  %111 = icmp ugt i64 %101, %110
  %112 = select i1 %111, i64 %110, i64 %101
  br label %113

113:                                              ; preds = %105, %100
  %114 = phi i64 [ %112, %105 ], [ %101, %100 ]
  %115 = trunc i64 %114 to i32
  %116 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 52
  store i32 %115, i32* %116, align 16
  %117 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 119
  %118 = load i32, i32* %117, align 8
  %119 = icmp eq i32 %118, 2
  br i1 %119, label %744, label %120

120:                                              ; preds = %113
  %121 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 94
  %122 = load i32, i32* %121, align 4
  %123 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 95
  store i32 %122, i32* %123, align 16
  br label %744

124:                                              ; preds = %1
  %125 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 70
  %126 = load i32, i32* %125, align 4
  %127 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 201
  %128 = load i32, i32* %127, align 8
  %129 = icmp eq i32 %128, 0
  br i1 %129, label %134, label %130

130:                                              ; preds = %124
  %131 = zext i32 %128 to i64
  %132 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %131, i32 8
  %133 = load i32, i32* %132, align 8
  store i32 %133, i32* %125, align 4
  br label %134

134:                                              ; preds = %130, %124
  %135 = phi i32 [ %126, %124 ], [ %133, %130 ]
  %136 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 119
  %137 = load i32, i32* %136, align 8
  %138 = icmp eq i32 %137, 2
  br i1 %138, label %139, label %147

139:                                              ; preds = %134
  %140 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 72
  %141 = load i32, i32* %140, align 4
  %142 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 71
  %143 = load i32, i32* %142, align 32
  %144 = ashr i32 %143, 5
  %145 = icmp slt i32 %141, %144
  %146 = select i1 %145, i32 %144, i32 %141
  br label %151

147:                                              ; preds = %134
  %148 = icmp sgt i32 %135, 3
  %149 = lshr i32 %135, 2
  %150 = select i1 %148, i32 %149, i32 0
  br label %151

151:                                              ; preds = %147, %139
  %152 = phi i32 [ %146, %139 ], [ %150, %147 ]
  %153 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 51
  %154 = load i32, i32* %153, align 4
  %155 = icmp eq i32 %154, 0
  br i1 %155, label %168, label %156

156:                                              ; preds = %151
  %157 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 52
  %158 = load i32, i32* %157, align 4
  %159 = icmp eq i32 %158, 1
  br i1 %159, label %160, label %168

160:                                              ; preds = %156
  br i1 %138, label %164, label %161

161:                                              ; preds = %160
  %162 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 52
  %163 = load i32, i32* %162, align 16
  br label %241

164:                                              ; preds = %160
  %165 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 186, i32 29
  %166 = load i32, i32* %165, align 16
  store i32 %166, i32* %125, align 4
  %167 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 52
  store i32 %166, i32* %167, align 16
  br label %241

168:                                              ; preds = %156, %151
  br i1 %138, label %169, label %171

169:                                              ; preds = %168
  %170 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 52
  store i32 %135, i32* %170, align 16
  br label %241

171:                                              ; preds = %168
  %172 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 63
  %173 = load i32, i32* %172, align 4
  %174 = icmp sgt i32 %173, 0
  br i1 %174, label %175, label %187

175:                                              ; preds = %171
  %176 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 64
  %177 = load i32, i32* %176, align 16
  %178 = icmp sgt i32 %177, %173
  %179 = select i1 %178, i32 %173, i32 %177
  %180 = sub nsw i32 %135, %152
  %181 = icmp sgt i32 %179, %180
  %182 = select i1 %181, i32 %180, i32 %179
  %183 = sub nsw i32 %173, %182
  store i32 %183, i32* %172, align 4
  %184 = sub nsw i32 %135, %182
  %185 = icmp slt i32 %184, %152
  %186 = select i1 %185, i32 %152, i32 %184
  br label %187

187:                                              ; preds = %175, %171
  %188 = phi i32 [ %186, %175 ], [ %135, %171 ]
  %189 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 52
  store i32 %188, i32* %189, align 16
  %190 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 61
  %191 = load i32, i32* %190, align 4
  %192 = icmp sgt i32 %191, 0
  %193 = icmp sgt i32 %188, %152
  %194 = and i1 %193, %192
  br i1 %194, label %195, label %205

195:                                              ; preds = %187
  %196 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 62
  %197 = load i32, i32* %196, align 8
  %198 = icmp sgt i32 %197, %191
  %199 = select i1 %198, i32 %191, i32 %197
  %200 = sub nsw i32 %188, %152
  %201 = icmp sgt i32 %199, %200
  %202 = select i1 %201, i32 %200, i32 %199
  %203 = sub nsw i32 %191, %202
  store i32 %203, i32* %190, align 4
  %204 = sub nsw i32 %188, %202
  store i32 %204, i32* %189, align 16
  br label %205

205:                                              ; preds = %195, %187
  %206 = phi i32 [ %204, %195 ], [ %188, %187 ]
  %207 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 106
  %208 = load i32, i32* %207, align 16
  %209 = icmp sgt i32 %208, 150
  br i1 %209, label %210, label %241

210:                                              ; preds = %205
  %211 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 59
  %212 = load i32, i32* %211, align 4
  %213 = icmp sgt i32 %212, 0
  br i1 %213, label %214, label %241

214:                                              ; preds = %210
  %215 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 60
  %216 = load i32, i32* %215, align 32
  %217 = icmp sgt i32 %216, 7
  br i1 %217, label %218, label %241

218:                                              ; preds = %214
  %219 = add nsw i32 %208, -100
  %220 = ashr i32 %219, 5
  %221 = icmp sgt i32 %219, 351
  %222 = select i1 %221, i32 10, i32 %220
  %223 = mul nsw i32 %222, %206
  %224 = sdiv i32 %223, 100
  %225 = sub nsw i32 %206, %152
  %226 = icmp sgt i32 %224, %225
  %227 = select i1 %226, i32 %225, i32 %224
  %228 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 58
  %229 = load i32, i32* %228, align 8
  %230 = lshr i32 %216, 1
  %231 = icmp eq i32 %229, %230
  br i1 %231, label %232, label %239

232:                                              ; preds = %218
  %233 = add nsw i32 %216, -1
  %234 = mul nsw i32 %233, %227
  %235 = sdiv i32 %206, 10
  %236 = icmp sgt i32 %234, %235
  %237 = select i1 %236, i32 %235, i32 %234
  %238 = add nsw i32 %237, %206
  store i32 %238, i32* %189, align 16
  br label %241

239:                                              ; preds = %218
  %240 = sub nsw i32 %206, %227
  store i32 %240, i32* %189, align 16
  br label %241

241:                                              ; preds = %239, %232, %214, %210, %205, %169, %164, %161
  %242 = phi i32 [ %135, %161 ], [ %135, %205 ], [ %135, %210 ], [ %135, %214 ], [ %135, %239 ], [ %135, %232 ], [ %135, %169 ], [ %166, %164 ]
  %243 = phi i32 [ %163, %161 ], [ %206, %205 ], [ %206, %210 ], [ %206, %214 ], [ %240, %239 ], [ %238, %232 ], [ %135, %169 ], [ %166, %164 ]
  %244 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 52
  %245 = icmp slt i32 %243, %152
  br i1 %245, label %246, label %247

246:                                              ; preds = %241
  store i32 %152, i32* %244, align 16
  br label %247

247:                                              ; preds = %246, %241
  %248 = phi i32 [ %152, %246 ], [ %243, %241 ]
  br i1 %155, label %249, label %251

249:                                              ; preds = %247
  %250 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 73
  store i32 %248, i32* %250, align 8
  br label %251

251:                                              ; preds = %249, %247
  %252 = icmp eq i32 %137, 0
  br i1 %252, label %253, label %438

253:                                              ; preds = %251
  %254 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 83
  %255 = load i32, i32* %254, align 8
  %256 = icmp eq i32 %255, 0
  br i1 %256, label %418, label %257

257:                                              ; preds = %253
  %258 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 20
  %259 = load i64, i64* %258, align 8
  %260 = sdiv i64 %259, 100
  %261 = trunc i64 %260 to i32
  %262 = add i32 %261, 1
  %263 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 86
  %264 = load i64, i64* %263, align 32
  %265 = icmp slt i64 %264, %259
  br i1 %265, label %273, label %266

266:                                              ; preds = %257
  %267 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 87
  %268 = load i64, i64* %267, align 8
  %269 = icmp slt i64 %268, %259
  %270 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 16
  %271 = load i32, i32* %270, align 4
  %272 = icmp eq i32 %271, 1
  br i1 %269, label %284, label %356

273:                                              ; preds = %257
  %274 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 16
  %275 = load i32, i32* %274, align 4
  %276 = icmp eq i32 %275, 1
  br i1 %276, label %280, label %277

277:                                              ; preds = %273
  %278 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 87
  %279 = load i64, i64* %278, align 8
  br label %284

280:                                              ; preds = %273
  %281 = sub nsw i64 %259, %264
  %282 = sext i32 %262 to i64
  %283 = sdiv i64 %281, %282
  br label %299

284:                                              ; preds = %277, %266
  %285 = phi i64 [ %279, %277 ], [ %268, %266 ]
  %286 = phi i1 [ false, %277 ], [ %272, %266 ]
  %287 = phi i32 [ %275, %277 ], [ %271, %266 ]
  %288 = icmp slt i64 %285, 0
  br i1 %288, label %293, label %289

289:                                              ; preds = %284
  %290 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 17
  %291 = load i32, i32* %290, align 8
  %292 = icmp slt i32 %291, 0
  br label %309

293:                                              ; preds = %284
  %294 = mul i64 %285, -100
  %295 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 82
  %296 = load i64, i64* %295, align 32
  %297 = shl nsw i64 %296, 3
  %298 = sdiv i64 %294, %297
  br label %299

299:                                              ; preds = %293, %280
  %300 = phi i1 [ true, %280 ], [ %286, %293 ]
  %301 = phi i32 [ 1, %280 ], [ %287, %293 ]
  %302 = phi i64 [ %283, %280 ], [ %298, %293 ]
  %303 = trunc i64 %302 to i32
  %304 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 17
  %305 = load i32, i32* %304, align 8
  %306 = icmp slt i32 %305, %303
  %307 = icmp sgt i32 %303, 0
  %308 = select i1 %307, i32 %303, i32 0
  br label %309

309:                                              ; preds = %299, %289
  %310 = phi i1 [ %286, %289 ], [ %300, %299 ]
  %311 = phi i32 [ %287, %289 ], [ %301, %299 ]
  %312 = phi i1 [ %292, %289 ], [ %306, %299 ]
  %313 = phi i32 [ %291, %289 ], [ %305, %299 ]
  %314 = phi i32 [ 0, %289 ], [ %308, %299 ]
  %315 = select i1 %312, i32 %313, i32 %314
  %316 = mul nsw i32 %315, %248
  %317 = sdiv i32 %316, 200
  %318 = sub nsw i32 %248, %317
  store i32 %318, i32* %244, align 16
  %319 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 117
  %320 = load i32, i32* %319, align 32
  %321 = icmp eq i32 %320, 0
  br i1 %321, label %353, label %322

322:                                              ; preds = %309
  %323 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 80
  %324 = load i32, i32* %323, align 8
  %325 = icmp sgt i32 %324, 150
  br i1 %325, label %326, label %353

326:                                              ; preds = %322
  %327 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 87
  %328 = load i64, i64* %327, align 8
  %329 = icmp slt i64 %264, %328
  %330 = and i1 %310, %329
  %331 = select i1 %330, i64 %264, i64 %328
  %332 = icmp slt i64 %331, %259
  br i1 %332, label %333, label %350

333:                                              ; preds = %326
  %334 = ashr i64 %259, 2
  %335 = icmp sgt i64 %331, %334
  %336 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 94
  %337 = load i32, i32* %336, align 4
  br i1 %335, label %338, label %404

338:                                              ; preds = %333
  %339 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 78
  %340 = load i32, i32* %339, align 16
  %341 = sub nsw i32 %337, %340
  %342 = sext i32 %341 to i64
  %343 = sub nsw i64 %331, %334
  %344 = mul nsw i64 %343, %342
  %345 = mul nsw i64 %259, 3
  %346 = ashr i64 %345, 2
  %347 = sdiv i64 %344, %346
  %348 = trunc i64 %347 to i32
  %349 = sub nsw i32 %337, %348
  br label %404

350:                                              ; preds = %326
  %351 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 78
  %352 = load i32, i32* %351, align 16
  br label %404

353:                                              ; preds = %322, %309
  %354 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 94
  %355 = load i32, i32* %354, align 4
  br label %404

356:                                              ; preds = %266
  %357 = icmp sgt i64 %264, %259
  %358 = and i1 %357, %272
  br i1 %358, label %359, label %363

359:                                              ; preds = %356
  %360 = sub nsw i64 %264, %259
  %361 = sext i32 %262 to i64
  %362 = sdiv i64 %360, %361
  br label %375

363:                                              ; preds = %356
  %364 = icmp sgt i64 %268, %259
  br i1 %364, label %369, label %365

365:                                              ; preds = %363
  %366 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 18
  %367 = load i32, i32* %366, align 4
  %368 = icmp slt i32 %367, 0
  br label %383

369:                                              ; preds = %363
  %370 = mul nsw i64 %268, 100
  %371 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 82
  %372 = load i64, i64* %371, align 32
  %373 = shl nsw i64 %372, 3
  %374 = sdiv i64 %370, %373
  br label %375

375:                                              ; preds = %369, %359
  %376 = phi i64 [ %362, %359 ], [ %374, %369 ]
  %377 = trunc i64 %376 to i32
  %378 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 18
  %379 = load i32, i32* %378, align 4
  %380 = icmp slt i32 %379, %377
  %381 = icmp sgt i32 %377, 0
  %382 = select i1 %381, i32 %377, i32 0
  br label %383

383:                                              ; preds = %375, %365
  %384 = phi i1 [ %368, %365 ], [ %380, %375 ]
  %385 = phi i32 [ %367, %365 ], [ %379, %375 ]
  %386 = phi i32 [ 0, %365 ], [ %382, %375 ]
  %387 = select i1 %384, i32 %385, i32 %386
  %388 = mul nsw i32 %387, %248
  %389 = sdiv i32 %388, 200
  %390 = add nsw i32 %389, %248
  store i32 %390, i32* %244, align 16
  %391 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 117
  %392 = load i32, i32* %391, align 32
  %393 = icmp eq i32 %392, 0
  br i1 %393, label %401, label %394

394:                                              ; preds = %383
  %395 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 80
  %396 = load i32, i32* %395, align 8
  %397 = icmp sgt i32 %396, 150
  br i1 %397, label %398, label %401

398:                                              ; preds = %394
  %399 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 78
  %400 = load i32, i32* %399, align 16
  br label %404

401:                                              ; preds = %394, %383
  %402 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 94
  %403 = load i32, i32* %402, align 4
  br label %404

404:                                              ; preds = %333, %401, %398, %353, %350, %338
  %405 = phi i32 [ %403, %401 ], [ %400, %398 ], [ %355, %353 ], [ %352, %350 ], [ %349, %338 ], [ %337, %333 ]
  %406 = phi i32 [ %390, %401 ], [ %390, %398 ], [ %318, %353 ], [ %318, %350 ], [ %318, %338 ], [ %318, %333 ]
  %407 = phi i32 [ %271, %401 ], [ %271, %398 ], [ %311, %353 ], [ %311, %350 ], [ %311, %338 ], [ %311, %333 ]
  %408 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 95
  store i32 %405, i32* %408, align 16
  %409 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 96
  %410 = load i32, i32* %409, align 4
  %411 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 97
  store i32 %410, i32* %411, align 8
  %412 = icmp sgt i32 %405, %410
  %413 = add nsw i32 %410, 1
  %414 = select i1 %412, i32 %405, i32 %413
  %415 = icmp sgt i32 %414, 127
  %416 = xor i1 %412, true
  %417 = or i1 %415, %416
  br i1 %417, label %424, label %427

418:                                              ; preds = %253
  %419 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 94
  %420 = load i32, i32* %419, align 4
  %421 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 95
  store i32 %420, i32* %421, align 16
  %422 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 16
  %423 = load i32, i32* %422, align 4
  br label %427

424:                                              ; preds = %404
  %425 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 95
  %426 = select i1 %415, i32 127, i32 %414
  store i32 %426, i32* %425, align 16
  br label %427

427:                                              ; preds = %424, %418, %404
  %428 = phi i32 [ %406, %424 ], [ %406, %404 ], [ %248, %418 ]
  %429 = phi i32 [ %426, %424 ], [ %405, %404 ], [ %420, %418 ]
  %430 = phi i32 [ %407, %424 ], [ %407, %404 ], [ %423, %418 ]
  %431 = icmp eq i32 %430, 2
  br i1 %431, label %432, label %438

432:                                              ; preds = %427
  %433 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 98
  %434 = load i32, i32* %433, align 4
  %435 = icmp slt i32 %429, %434
  br i1 %435, label %436, label %438

436:                                              ; preds = %432
  %437 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 95
  store i32 %434, i32* %437, align 16
  br label %438

438:                                              ; preds = %436, %432, %427, %251
  %439 = phi i32 [ %428, %427 ], [ %428, %432 ], [ %428, %436 ], [ %248, %251 ]
  %440 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 99
  %441 = load i32, i32* %440, align 32
  %442 = icmp eq i32 %441, 0
  br i1 %442, label %497, label %443

443:                                              ; preds = %438
  %444 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 16
  %445 = load i32, i32* %444, align 4
  %446 = icmp eq i32 %445, 1
  br i1 %446, label %447, label %497

447:                                              ; preds = %443
  %448 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 86
  %449 = load i64, i64* %448, align 32
  %450 = icmp slt i64 %449, 0
  br i1 %450, label %451, label %497

451:                                              ; preds = %447
  %452 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 100
  store i32 1, i32* %452, align 4
  %453 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 71
  %454 = load i32, i32* %453, align 32
  %455 = sext i32 %454 to i64
  %456 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 87
  %457 = load i64, i64* %456, align 8
  %458 = add nsw i64 %457, %455
  store i64 %458, i64* %456, align 8
  %459 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 21
  %460 = load i64, i64* %459, align 8
  %461 = icmp sgt i64 %458, %460
  br i1 %461, label %462, label %465

462:                                              ; preds = %451
  %463 = shl i64 %460, 32
  %464 = ashr exact i64 %463, 32
  store i64 %464, i64* %456, align 8
  br label %465

465:                                              ; preds = %462, %451
  %466 = phi i64 [ %464, %462 ], [ %458, %451 ]
  store i64 %466, i64* %448, align 32
  %467 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 52
  %468 = load i32, i32* %467, align 4
  %469 = icmp ugt i32 %468, 1
  br i1 %469, label %470, label %497

470:                                              ; preds = %465
  %471 = add i32 %128, 1
  %472 = icmp ult i32 %471, %468
  br i1 %472, label %473, label %497

473:                                              ; preds = %470
  %474 = zext i32 %471 to i64
  br label %475

475:                                              ; preds = %475, %473
  %476 = phi i64 [ %474, %473 ], [ %495, %475 ]
  %477 = phi i32 [ %471, %473 ], [ %494, %475 ]
  %478 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %476, i32 1
  %479 = load i32, i32* %478, align 8
  %480 = sitofp i32 %479 to double
  %481 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %476, i32 0
  %482 = load double, double* %481, align 8
  %483 = fdiv double %480, %482
  %484 = fptosi double %483 to i32
  %485 = sext i32 %484 to i64
  %486 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %476, i32 10
  %487 = load i64, i64* %486, align 8
  %488 = add nsw i64 %487, %485
  %489 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %476, i32 4
  %490 = load i64, i64* %489, align 8
  %491 = icmp sgt i64 %488, %490
  %492 = select i1 %491, i64 %490, i64 %488
  store i64 %492, i64* %486, align 8
  %493 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %476, i32 9
  store i64 %492, i64* %493, align 8
  %494 = add i32 %477, 1
  %495 = add nuw nsw i64 %476, 1
  %496 = icmp eq i32 %494, %468
  br i1 %496, label %497, label %475

497:                                              ; preds = %475, %470, %465, %447, %443, %438
  %498 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 45
  %499 = load i32, i32* %498, align 8
  %500 = icmp eq i32 %499, 0
  br i1 %500, label %501, label %739

501:                                              ; preds = %497
  %502 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 59
  %503 = load i32, i32* %502, align 4
  %504 = icmp eq i32 %503, 0
  br i1 %504, label %505, label %739

505:                                              ; preds = %501
  %506 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 100
  %507 = load i32, i32* %506, align 4
  %508 = icmp eq i32 %507, 0
  br i1 %508, label %509, label %739

509:                                              ; preds = %505
  %510 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 152
  %511 = load i32, i32* %510, align 32
  %512 = icmp eq i32 %511, 0
  br i1 %512, label %513, label %717

513:                                              ; preds = %509
  %514 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 25
  %515 = load i32, i32* %514, align 8
  %516 = icmp slt i32 %515, 0
  br i1 %516, label %517, label %520

517:                                              ; preds = %513
  %518 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 54, i64 1
  %519 = load i32, i32* %518, align 4
  br label %520

520:                                              ; preds = %517, %513
  %521 = phi i32 [ %519, %517 ], [ %515, %513 ]
  %522 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 126, i64 0
  %523 = load i32, i32* %522, align 4
  %524 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 126, i64 1
  %525 = load i32, i32* %524, align 4
  %526 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 126, i64 2
  %527 = load i32, i32* %526, align 4
  %528 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 126, i64 3
  %529 = load i32, i32* %528, align 4
  %530 = add i32 %529, %527
  %531 = add i32 %525, %523
  %532 = add i32 %531, %530
  %533 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 191
  %534 = load i32, i32* %533, align 8
  %535 = mul nsw i32 %534, 100
  %536 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 27
  %537 = load i32, i32* %536, align 4
  %538 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 28
  %539 = load i32, i32* %538, align 8
  %540 = mul nsw i32 %539, %537
  %541 = sdiv i32 %535, %540
  %542 = icmp eq i32 %532, 0
  br i1 %542, label %546, label %543

543:                                              ; preds = %520
  %544 = mul nsw i32 %530, 100
  %545 = sdiv i32 %544, %532
  br label %546

546:                                              ; preds = %543, %520
  %547 = phi i32 [ %545, %543 ], [ 0, %520 ]
  %548 = icmp sgt i32 %541, %547
  %549 = select i1 %548, i32 %541, i32 %547
  %550 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 115
  %551 = load i32, i32* %550, align 8
  %552 = icmp eq i32 %551, 0
  br i1 %552, label %565, label %553

553:                                              ; preds = %546
  br i1 %252, label %554, label %562

554:                                              ; preds = %553
  %555 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 127
  %556 = load i32, i32* %555, align 4
  %557 = icmp slt i32 %556, 15
  %558 = icmp sgt i32 %549, 4
  %559 = or i1 %558, %557
  br i1 %559, label %560, label %562

560:                                              ; preds = %554
  %561 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  store i32 1, i32* %561, align 16
  br label %565

562:                                              ; preds = %554, %553
  br i1 %138, label %563, label %565

563:                                              ; preds = %562
  %564 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  store i32 1, i32* %564, align 16
  br label %565

565:                                              ; preds = %563, %562, %560, %546
  %566 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  %567 = load i32, i32* %566, align 16
  %568 = icmp eq i32 %567, 1
  br i1 %568, label %569, label %739

569:                                              ; preds = %565
  %570 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 116
  %571 = load i32, i32* %570, align 4
  %572 = icmp eq i32 %571, 0
  br i1 %572, label %660, label %573

573:                                              ; preds = %569
  br i1 %516, label %574, label %577

574:                                              ; preds = %573
  %575 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 54, i64 1
  %576 = load i32, i32* %575, align 4
  br label %577

577:                                              ; preds = %574, %573
  %578 = phi i32 [ %576, %574 ], [ %515, %573 ]
  br i1 %542, label %582, label %579

579:                                              ; preds = %577
  %580 = mul nsw i32 %530, 100
  %581 = sdiv i32 %580, %532
  br label %582

582:                                              ; preds = %579, %577
  %583 = phi i32 [ %581, %579 ], [ 0, %577 ]
  %584 = icmp sgt i32 %541, %583
  %585 = select i1 %584, i32 %541, i32 %583
  br i1 %138, label %623, label %586

586:                                              ; preds = %582
  %587 = sext i32 %578 to i64
  %588 = getelementptr inbounds [128 x i32], [128 x i32]* @vp8_gf_boost_qadjustment, i64 0, i64 %587
  %589 = load i32, i32* %588, align 4
  %590 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 127
  %591 = load i32, i32* %590, align 4
  %592 = sext i32 %591 to i64
  %593 = icmp slt i64 %592, 14
  %594 = select i1 %593, i64 %592, i64 14
  %595 = getelementptr inbounds [20 x i32], [20 x i32]* @gf_intra_usage_adjustment, i64 0, i64 %594
  %596 = load i32, i32* %595, align 4
  %597 = mul nsw i32 %596, %589
  %598 = sdiv i32 %597, 100
  %599 = sext i32 %585 to i64
  %600 = getelementptr inbounds [101 x i32], [101 x i32]* @gf_adjust_table, i64 0, i64 %599
  %601 = load i32, i32* %600, align 4
  %602 = mul nsw i32 %598, %601
  %603 = sdiv i32 %602, 100
  %604 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 130, i32 5
  %605 = load i32, i32* %604, align 4
  %606 = icmp eq i32 %605, 0
  br i1 %606, label %607, label %613

607:                                              ; preds = %586
  %608 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 114
  %609 = load i32, i32* %608, align 4
  %610 = icmp eq i32 %609, 2
  br i1 %610, label %611, label %613

611:                                              ; preds = %607
  %612 = sdiv i32 %602, 200
  br label %613

613:                                              ; preds = %611, %607, %586
  %614 = phi i32 [ %603, %586 ], [ %612, %611 ], [ %603, %607 ]
  %615 = getelementptr inbounds [128 x i32], [128 x i32]* @kf_gf_boost_qlimits, i64 0, i64 %587
  %616 = load i32, i32* %615, align 4
  %617 = icmp sgt i32 %614, %616
  %618 = and i1 %252, %617
  %619 = icmp sgt i32 %614, 110
  %620 = select i1 %619, i32 %614, i32 110
  %621 = select i1 %618, i32 %616, i32 %620
  %622 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 106
  store i32 %621, i32* %622, align 16
  br label %623

623:                                              ; preds = %613, %582
  %624 = icmp eq i32 %515, -1
  %625 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 66
  %626 = load i32, i32* %625, align 8
  store i32 %626, i32* %502, align 4
  br i1 %624, label %627, label %656

627:                                              ; preds = %623
  br i1 %138, label %660, label %628

628:                                              ; preds = %627
  %629 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 106
  %630 = load i32, i32* %629, align 16
  %631 = icmp sgt i32 %630, 750
  br i1 %631, label %632, label %643

632:                                              ; preds = %628
  %633 = add nsw i32 %626, 1
  store i32 %633, i32* %502, align 4
  %634 = icmp sgt i32 %630, 1000
  br i1 %634, label %635, label %643

635:                                              ; preds = %632
  %636 = add nsw i32 %626, 2
  store i32 %636, i32* %502, align 4
  %637 = icmp sgt i32 %630, 1250
  br i1 %637, label %638, label %643

638:                                              ; preds = %635
  %639 = add nsw i32 %626, 3
  store i32 %639, i32* %502, align 4
  %640 = icmp sgt i32 %630, 1499
  br i1 %640, label %641, label %643

641:                                              ; preds = %638
  %642 = add nsw i32 %626, 4
  store i32 %642, i32* %502, align 4
  br label %643

643:                                              ; preds = %641, %638, %635, %632, %628
  %644 = phi i32 [ %626, %628 ], [ %633, %632 ], [ %636, %635 ], [ %642, %641 ], [ %639, %638 ]
  %645 = sext i32 %585 to i64
  %646 = getelementptr inbounds [101 x i32], [101 x i32]* @gf_interval_table, i64 0, i64 %645
  %647 = load i32, i32* %646, align 4
  %648 = icmp sgt i32 %647, %644
  br i1 %648, label %649, label %650

649:                                              ; preds = %643
  store i32 %647, i32* %502, align 4
  br label %650

650:                                              ; preds = %649, %643
  %651 = phi i32 [ %647, %649 ], [ %644, %643 ]
  %652 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 65
  %653 = load i32, i32* %652, align 4
  %654 = icmp sgt i32 %651, %653
  br i1 %654, label %655, label %657

655:                                              ; preds = %650
  store i32 %653, i32* %502, align 4
  br label %657

656:                                              ; preds = %623
  br i1 %138, label %660, label %657

657:                                              ; preds = %656, %655, %650
  %658 = phi i32 [ %626, %656 ], [ %653, %655 ], [ %651, %650 ]
  %659 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 31
  store i32 0, i32* %659, align 4
  br label %660

660:                                              ; preds = %657, %656, %627, %569
  %661 = phi i32 [ %658, %657 ], [ %626, %656 ], [ %626, %627 ], [ 0, %569 ]
  %662 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 32
  %663 = load i32, i32* %662, align 8
  %664 = icmp eq i32 %663, 0
  br i1 %664, label %665, label %714

665:                                              ; preds = %660
  br i1 %516, label %666, label %695

666:                                              ; preds = %665
  br i1 %138, label %714, label %667

667:                                              ; preds = %666
  %668 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 106
  %669 = load i32, i32* %668, align 16
  %670 = add nsw i32 %661, 1
  %671 = mul nsw i32 %670, 100
  %672 = add i32 %671, -100
  %673 = add i32 %672, %669
  %674 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 73
  %675 = load i32, i32* %674, align 8
  %676 = mul nsw i32 %675, %670
  %677 = icmp sgt i32 %669, 1000
  br i1 %677, label %678, label %684

678:                                              ; preds = %667, %678
  %679 = phi i32 [ %682, %678 ], [ %673, %667 ]
  %680 = phi i32 [ %681, %678 ], [ %669, %667 ]
  %681 = lshr i32 %680, 1
  %682 = sdiv i32 %679, 2
  %683 = icmp ugt i32 %680, 2001
  br i1 %683, label %678, label %684

684:                                              ; preds = %678, %667
  %685 = phi i32 [ %669, %667 ], [ %681, %678 ]
  %686 = phi i32 [ %673, %667 ], [ %682, %678 ]
  %687 = ashr i32 %676, 7
  %688 = icmp sgt i32 %687, %686
  br i1 %688, label %689, label %692

689:                                              ; preds = %684
  %690 = sdiv i32 %676, %686
  %691 = mul nsw i32 %690, %685
  br label %714

692:                                              ; preds = %684
  %693 = mul nsw i32 %685, %676
  %694 = sdiv i32 %693, %686
  br label %714

695:                                              ; preds = %665
  %696 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 26
  %697 = load i32, i32* %696, align 16
  %698 = sext i32 %521 to i64
  %699 = getelementptr inbounds [2 x [128 x i32]], [2 x [128 x i32]]* @vp8_bits_per_mb, i64 0, i64 1, i64 %698
  %700 = load i32, i32* %699, align 4
  %701 = sitofp i32 %700 to double
  %702 = fadd double %701, 5.000000e-01
  %703 = fptosi double %702 to i32
  %704 = icmp sgt i32 %697, 2048
  %705 = ashr i32 %703, 9
  %706 = mul nsw i32 %705, %697
  %707 = mul nsw i32 %697, %703
  %708 = ashr i32 %707, 9
  %709 = select i1 %704, i32 %706, i32 %708
  %710 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 106
  %711 = load i32, i32* %710, align 16
  %712 = mul nsw i32 %709, %711
  %713 = sdiv i32 %712, 100
  br label %714

714:                                              ; preds = %660, %689, %692, %666, %695
  %715 = phi i32 [ %713, %695 ], [ %242, %666 ], [ %694, %692 ], [ %691, %689 ], [ 0, %660 ]
  store i32 %715, i32* %244, align 16
  %716 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 60
  store i32 %661, i32* %716, align 32
  br label %739

717:                                              ; preds = %509
  %718 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 9
  %719 = load i32, i32* %718, align 8
  %720 = icmp ult i32 %719, 101
  %721 = zext i1 %720 to i32
  %722 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 154
  store i32 %721, i32* %722, align 8
  %723 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 153
  %724 = load i32, i32* %723, align 4
  %725 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 66
  store i32 %724, i32* %725, align 8
  %726 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 131
  %727 = load i32, i32* %726, align 4
  %728 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 26
  %729 = load i32, i32* %728, align 16
  %730 = ashr i32 %729, 1
  %731 = icmp sgt i32 %727, %730
  br i1 %731, label %732, label %737

732:                                              ; preds = %717
  %733 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 50
  store i32 1, i32* %733, align 16
  %734 = add i32 %719, 100
  %735 = mul i32 %734, %439
  %736 = udiv i32 %735, 100
  store i32 %736, i32* %244, align 16
  br label %737

737:                                              ; preds = %732, %717
  store i32 %724, i32* %502, align 4
  %738 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 60
  store i32 %724, i32* %738, align 32
  br label %739

739:                                              ; preds = %497, %501, %505, %565, %714, %737
  store i32 %126, i32* %125, align 4
  %740 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 100
  %741 = load i32, i32* %740, align 4
  %742 = icmp eq i32 %741, 0
  br i1 %742, label %744, label %743

743:                                              ; preds = %739
  store i32 0, i32* %740, align 4
  br label %744

744:                                              ; preds = %120, %113, %739, %743
  %745 = phi i32 [ 0, %743 ], [ 1, %739 ], [ 1, %113 ], [ 1, %120 ]
  ret i32 %745
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden i32 @vp8_drop_encodedframe_overshoot(%struct.VP8_COMP*, i32) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 60
  %4 = bitcast i8** %3 to %struct.LOWER_RES_FRAME_INFO**
  %5 = load %struct.LOWER_RES_FRAME_INFO*, %struct.LOWER_RES_FRAME_INFO** %4, align 8
  %6 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 57
  %7 = load i32, i32* %6, align 4
  %8 = icmp ugt i32 %7, 1
  br i1 %8, label %9, label %22

9:                                                ; preds = %2
  %10 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 58
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %22, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %5, i64 0, i32 2
  %15 = load i32, i32* %14, align 8
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %22

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 149
  store i32 0, i32* %18, align 4
  %19 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 150
  %20 = load i32, i32* %19, align 8
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 8
  br label %178

22:                                               ; preds = %13, %9, %2
  %23 = phi i32 [ %15, %13 ], [ 0, %9 ], [ 0, %2 ]
  %24 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 23
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %171, label %27

27:                                               ; preds = %22
  %28 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 10
  %29 = load i32, i32* %28, align 4
  %30 = icmp eq i32 %29, 2
  br i1 %30, label %48, label %31

31:                                               ; preds = %27
  %32 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 99
  %33 = load i32, i32* %32, align 32
  %34 = icmp eq i32 %33, 0
  br i1 %34, label %171, label %35

35:                                               ; preds = %31
  %36 = icmp eq i32 %23, 0
  br i1 %36, label %37, label %48

37:                                               ; preds = %35
  %38 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 55
  %39 = load double, double* %38, align 32
  %40 = fcmp olt double %39, 8.000000e-02
  br i1 %40, label %41, label %171

41:                                               ; preds = %37
  %42 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 150
  %43 = load i32, i32* %42, align 8
  %44 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 84
  %45 = load double, double* %44, align 16
  %46 = fptosi double %45 to i32
  %47 = icmp sgt i32 %43, %46
  br i1 %47, label %48, label %171

48:                                               ; preds = %35, %41, %27
  %49 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 94
  %50 = load i32, i32* %49, align 4
  %51 = mul nsw i32 %50, 3
  %52 = ashr i32 %51, 2
  %53 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 71
  %54 = load i32, i32* %53, align 32
  %55 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 18, i32 54
  %56 = load i64, i64* %55, align 8
  %57 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 26
  %58 = load i32, i32* %57, align 16
  %59 = sext i32 %58 to i64
  %60 = sdiv i64 %56, %59
  %61 = trunc i64 %60 to i32
  %62 = icmp sgt i32 %52, %1
  br i1 %62, label %63, label %85

63:                                               ; preds = %48
  %64 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 99
  %65 = load i32, i32* %64, align 32
  %66 = icmp ne i32 %65, 0
  %67 = icmp sgt i32 %61, 51200
  %68 = and i1 %67, %66
  %69 = ashr i32 %54, 5
  %70 = ashr i32 %54, 3
  %71 = shl nsw i32 %70, 1
  %72 = select i1 %68, i32 %69, i32 %71
  %73 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 53
  %74 = load i32, i32* %73, align 4
  %75 = icmp sgt i32 %74, %72
  %76 = icmp sgt i32 %61, 3200
  %77 = and i1 %76, %75
  br i1 %77, label %78, label %85

78:                                               ; preds = %63
  %79 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 151
  %80 = load i32, i32* %79, align 4
  %81 = shl nsw i32 %80, 1
  %82 = icmp sge i32 %81, %61
  %83 = icmp eq i32 %23, 0
  %84 = and i1 %83, %82
  br i1 %84, label %164, label %87

85:                                               ; preds = %63, %48
  %86 = icmp eq i32 %23, 0
  br i1 %86, label %164, label %87

87:                                               ; preds = %78, %85
  %88 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 149
  store i32 1, i32* %88, align 4
  %89 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 20
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 86
  store i64 %90, i64* %91, align 32
  %92 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 87
  store i64 %90, i64* %92, align 8
  %93 = icmp sgt i32 %54, 4194302
  br i1 %93, label %94, label %97

94:                                               ; preds = %87
  %95 = sdiv i32 %54, %58
  %96 = shl i32 %95, 9
  br label %100

97:                                               ; preds = %87
  %98 = shl i32 %54, 9
  %99 = sdiv i32 %98, %58
  br label %100

100:                                              ; preds = %97, %94
  %101 = phi i32 [ %96, %94 ], [ %99, %97 ]
  %102 = sitofp i32 %101 to double
  %103 = sext i32 %50 to i64
  %104 = getelementptr inbounds [2 x [128 x i32]], [2 x [128 x i32]]* @vp8_bits_per_mb, i64 0, i64 1, i64 %103
  %105 = load i32, i32* %104, align 4
  %106 = sitofp i32 %105 to double
  %107 = fdiv double %102, %106
  %108 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 55
  %109 = load double, double* %108, align 32
  %110 = fcmp ogt double %107, %109
  br i1 %110, label %111, label %115

111:                                              ; preds = %100
  %112 = fmul double %109, 2.000000e+00
  %113 = fcmp olt double %112, %107
  %114 = select i1 %113, double %112, double %107
  store double %114, double* %108, align 32
  br label %115

115:                                              ; preds = %111, %100
  %116 = phi double [ %114, %111 ], [ %109, %100 ]
  %117 = bitcast double %116 to i64
  %118 = fcmp ogt double %116, 5.000000e+01
  br i1 %118, label %119, label %120

119:                                              ; preds = %115
  store double 5.000000e+01, double* %108, align 32
  br label %120

120:                                              ; preds = %119, %115
  %121 = phi i64 [ 4632233691727265792, %119 ], [ %117, %115 ]
  %122 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 19, i32 60
  %123 = load i32, i32* %122, align 4
  %124 = add i32 %123, 1
  store i32 %124, i32* %122, align 4
  %125 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 40
  %126 = load i32, i32* %125, align 4
  %127 = add i32 %126, 1
  store i32 %127, i32* %125, align 4
  %128 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 146
  %129 = load i32, i32* %128, align 8
  %130 = add i32 %129, 1
  store i32 %130, i32* %128, align 8
  %131 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 150
  store i32 0, i32* %131, align 8
  %132 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 21, i32 52
  %133 = load i32, i32* %132, align 4
  %134 = icmp ugt i32 %133, 1
  br i1 %134, label %135, label %161

135:                                              ; preds = %120
  %136 = zext i32 %133 to i64
  %137 = and i64 %136, 1
  %138 = sub nsw i64 %136, %137
  br label %139

139:                                              ; preds = %139, %135
  %140 = phi i64 [ 0, %135 ], [ %151, %139 ]
  %141 = phi i64 [ %138, %135 ], [ %152, %139 ]
  %142 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %140, i32 29
  store i32 1, i32* %142, align 8
  %143 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %140, i32 28
  store i32 0, i32* %143, align 4
  %144 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %140, i32 21
  %145 = bitcast double* %144 to i64*
  store i64 %121, i64* %145, align 8
  %146 = or i64 %140, 1
  %147 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %146, i32 29
  store i32 1, i32* %147, align 8
  %148 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %146, i32 28
  store i32 0, i32* %148, align 4
  %149 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %146, i32 21
  %150 = bitcast double* %149 to i64*
  store i64 %121, i64* %150, align 8
  %151 = add nuw nsw i64 %140, 2
  %152 = add i64 %141, -2
  %153 = icmp eq i64 %152, 0
  br i1 %153, label %154, label %139

154:                                              ; preds = %139
  %155 = icmp eq i64 %137, 0
  br i1 %155, label %161, label %156

156:                                              ; preds = %154
  %157 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %151, i32 29
  store i32 1, i32* %157, align 8
  %158 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %151, i32 28
  store i32 0, i32* %158, align 4
  %159 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 202, i64 %151, i32 21
  %160 = bitcast double* %159 to i64*
  store i64 %121, i64* %160, align 8
  br label %161

161:                                              ; preds = %156, %154, %120
  br i1 %8, label %162, label %178

162:                                              ; preds = %161
  %163 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %5, i64 0, i32 2
  store i32 1, i32* %163, align 8
  br label %178

164:                                              ; preds = %78, %85
  %165 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 149
  store i32 0, i32* %165, align 4
  %166 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 150
  %167 = load i32, i32* %166, align 8
  %168 = add nsw i32 %167, 1
  store i32 %168, i32* %166, align 8
  br i1 %8, label %169, label %178

169:                                              ; preds = %164
  %170 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %5, i64 0, i32 2
  store i32 0, i32* %170, align 8
  br label %178

171:                                              ; preds = %31, %22, %41, %37
  %172 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 149
  store i32 0, i32* %172, align 4
  %173 = getelementptr inbounds %struct.VP8_COMP, %struct.VP8_COMP* %0, i64 0, i32 150
  %174 = load i32, i32* %173, align 8
  %175 = add nsw i32 %174, 1
  store i32 %175, i32* %173, align 8
  br i1 %8, label %176, label %178

176:                                              ; preds = %171
  %177 = getelementptr inbounds %struct.LOWER_RES_FRAME_INFO, %struct.LOWER_RES_FRAME_INFO* %5, i64 0, i32 2
  store i32 0, i32* %177, align 8
  br label %178

178:                                              ; preds = %171, %176, %162, %161, %169, %164, %17
  %179 = phi i32 [ 0, %17 ], [ 1, %162 ], [ 1, %161 ], [ 0, %169 ], [ 0, %164 ], [ 0, %176 ], [ 0, %171 ]
  ret i32 %179
}

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
