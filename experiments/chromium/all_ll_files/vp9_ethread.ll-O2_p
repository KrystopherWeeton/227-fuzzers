; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_ethread.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_ethread.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.Vp9LevelSpec = type { i32, i64, i32, i32, double, double, double, i8, i32, i8 }
%struct.VP9_COMP = type { %struct.FRAME_INFO, [8 x i8], %struct.QUANTS, %struct.ThreadData, %struct.MB_MODE_INFO_EXT*, [8 x i8], [256 x [8 x i16]], [256 x [8 x i16]], %struct.VP9Common, %struct.VP9EncoderConfig, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i8, [50 x %struct.TplDepFrame], [8 x %struct.yv12_buffer_config*], [8 x %struct.EncFrameBuf], %union.pthread_mutex_t, i32, %struct.KMEANS_DATA*, i32, i32, [8 x double], [8 x double], [8 x i32], i32, %struct.TileDataEnc*, i32, i32, [3 x i32], i32, i32, i32, [8 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64*, i32, i32, double*, %struct.yv12_buffer_config, [4 x [64 x %struct.TOKENEXTRA*]], [4 x [64 x %struct.TOKENLIST*]], i64, %struct.RD_OPT, %struct.CODING_CONTEXT, [2 x i32*], [2 x i32*], [2 x i32*], [2 x i32*], i64, i64, i64, %struct.RATE_CONTROL, double, [8 x [4 x i32]], %struct.vpx_codec_pkt_list*, [25 x %struct.MBGRAPH_FRAME_STATS], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i32, i32, i32, i8*, i8*, [8 x i32], %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)*, %struct.scale_factors, i32 (%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*)*, [13 x %struct.vp9_variance_vtable], i64, i64, i64, i64, %struct.TWO_PASS, i8, %struct.yv12_buffer_config, %struct.ALT_REF_AQ*, i32, i32, i32, i32, i32, i32, %struct.SVC, %struct.diff*, i32, i32, i32, %struct.search_site_config, [10 x i32], [7 x [4 x i32]], [2 x [10 x [10 x i32]]], [10 x [10 x [10 x i32]]], [4 x [3 x i32]], [16 x [4 x i32]], [3 x [2 x [4 x i32]]], %struct.vp9_denoiser, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.noise_estimate, i8*, [4 x i64], i64, i64, i64, i8, i32, %struct.VPxWorker*, %struct.EncWorkerData*, %struct.VP9LfSyncData, %struct.VP9BitstreamWorkerData*, i32, %struct.Vp9LevelInfo, %struct.MultiThreadHandle, void (%struct.VP9RowMTSyncData*, i32, i32)*, void (%struct.VP9RowMTSyncData*, i32, i32, i32)*, %struct.ARNRFilterData, i32, i32, i8*, i8*, i8*, i8*, i8, i8, i8*, i32, %struct.LevelConstraint, i8*, i8*, i32, %struct.vpx_roi_map, i32, %struct.EXT_RATECTRL, [8 x i8] }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PICK_MODE_CONTEXT*, %struct.PC_TREE*, %struct.PC_TREE*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], %struct.macroblockd, %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, [4 x i32], [4 x i32], i32, [4 x i32], [4 x i32], [4 x i32], [2 x i32*], [2 x i32*], i32**, [4 x i32], [2 x i32*], [2 x i32*], i32**, i32, i32, %struct.MvLimits, [4 x [256 x i8]], [4 x i32], i32, i32, [4 x [2 x [2 x [6 x [2 x [6 x [12 x i32]]]]]]], i32, i32, i32, i32, i32, [12 x i8], [12 x i64], [4 x %struct.mv], [2 x i8], i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, [25 x i8], i8, i8, void (i16*, i32*, i32)*, void (i32*, i8*, i32, i32)*, void (i32*, i16*, i32, i32, i32)*, [8 x i8], [4096 x i8], %struct.scale_factors*, [8 x i8] }
%struct.macroblock_plane = type { [4096 x i16], i32*, i32*, i16*, %struct.buf_2d, [8 x i8], [8 x i16], i16*, i16*, i16*, i16*, i16*, [2 x i64], [8 x i8] }
%struct.buf_2d = type { i8*, i32 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%union.int_mv = type { i32 }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.MvLimits = type { i32, i32, i32, i32 }
%struct.mv = type { i16, i16 }
%struct.RD_COUNTS = type { [4 x [2 x [2 x [6 x [6 x [12 x i32]]]]]], [3 x i64], [4 x i64] }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.PICK_MODE_CONTEXT = type { %struct.MODE_INFO, %struct.MB_MODE_INFO_EXT, i8*, [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], i32, i32, i32, i32, i32, [12 x i8], i32, i32, i32, i32, [4 x i64], i32, i64, i64, i32, i32, i32, i8, %union.int_mv, i8, i8, i32, [4 x %struct.mv], i8, i32, i8 }
%struct.MB_MODE_INFO_EXT = type { [4 x [2 x %union.int_mv]], [4 x i8] }
%struct.PC_TREE = type { i32, i32, i8, %struct.PICK_MODE_CONTEXT, [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT], %union.anon, %struct.mv }
%union.anon = type { [4 x %struct.PC_TREE*] }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.VP9EncoderConfig = type { i32, i32, i32, i32, i32, double, %struct.vpx_rational, %struct.vpx_rational64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [12 x i32], [5 x i32], [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_rational = type { i32, i32 }
%struct.vpx_rational64 = type { i64, i32 }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.lookahead_ctx = type { i32, i32, i32, i32, i32, %struct.lookahead_entry* }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, i32, i32, i32, i32, i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, i64, i32, %union.int_mv }
%struct.EncFrameBuf = type { i32, i32, %struct.yv12_buffer_config }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.KMEANS_DATA = type { double, i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [13 x [30 x i32]], [13 x [30 x i8]], %struct.FIRSTPASS_DATA, %struct.VP9RowMTSyncData, i32* }
%struct.FIRSTPASS_DATA = type { double, double, i64, i64, i64, i64, i32, i32, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32 }
%struct.VP9RowMTSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.0, %union.anon.1, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.0 = type { i64 }
%union.anon.1 = type { i64 }
%struct.TOKENEXTRA = type { i8*, i16, i32 }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA*, i32 }
%struct.RD_OPT = type { [30 x i32], [6 x i32], [8 x [13 x [30 x i32]]], [4 x [3 x i64]], [4 x [4 x i64]], i32, i32, double }
%struct.CODING_CONTEXT = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [3 x i8], i8*, [4 x i8], [2 x i8], %struct.frame_contexts }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, [2 x i32], i32, i32, i32, i32, i32, [5 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [2 x i32], [5 x i32], i32, i32, [25 x i64], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, [5 x i32], double, i32, i32, i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon.3 }
%union.anon.3 = type { %struct.anon.4, [40 x i8] }
%struct.anon.4 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.MBGRAPH_FRAME_STATS = type { %struct.MBGRAPH_MB_STATS* }
%struct.MBGRAPH_MB_STATS = type { [4 x %struct.anon.5] }
%struct.anon.5 = type { i32, %union.anon.6 }
%union.anon.6 = type { %union.int_mv }
%struct.SPEED_FEATURES = type { %struct.MV_SPEED_FEATURES, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i8, i32, i32, i8, i8, i8, i32, i32, i32, i32, i32, i32, [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], [4 x i32], [13 x i32], i32, i32, i32, i32, i32, [13 x i32], i32, i32, i32, i8, i32, i32, i32, i8, i32, i32, i32, %struct.PARTITION_SEARCH_BREAKOUT_THR, %struct.anon.7, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, %struct.ADAPT_SUBPEL_FORCE_STOP, i32 }
%struct.ADAPT_SUBPEL_FORCE_STOP = type { i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.PARTITION_SEARCH_BREAKOUT_THR = type { i64, i32 }
%struct.anon.7 = type { i32, [3 x float], i32, i32, [4 x i32] }
%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, double, [3 x i32], i32, double, i32, i32, i32 }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.vp9_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)* }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.TWO_PASS = type { i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRST_PASS_INFO, %struct.FIRSTPASS_STATS, i32, i64, double, double, double, double, %struct.FP_MB_FLOAT_STATS*, i32, i64, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x i32], %struct.GF_GROUP }
%struct.FIRST_PASS_INFO = type { %struct.FIRSTPASS_STATS*, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64 }
%struct.FP_MB_FLOAT_STATS = type { double, double, double }
%struct.GF_GROUP = type { i8, [252 x i32], [252 x i32], [252 x i8], [252 x i8], [252 x i8], [252 x i32], [252 x i32], i32, i32, [50 x i32], i32, i32, i32, i32, i32, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ALT_REF_AQ = type opaque
%struct.SVC = type { i32, i32, i32, i32, i32, i32, %struct.lookahead_entry, i32, [25 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, i32, i32, [12 x %struct.LAYER_CONTEXT], i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [2 x %struct.BUFFER_LONGTERM_REF], i32, i32, i32, i32, [5 x i8], [5 x i32], i8*, [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, i32, i32, [5 x i32], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i32], [8 x i8], [8 x i8], [5 x i32], i8, i8, i8, [8 x i8], i32, [5 x i32], i32, [5 x i64], i64, i64, [5 x i64], i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, %struct.TWO_PASS, %struct.vpx_fixed_buf, i32, i32, i32, i32, %struct.lookahead_entry*, i32, i32, i32, i64, i32, i8*, i8*, i8*, i32, i32, i32, i8, i32 }
%struct.BUFFER_LONGTERM_REF = type { i32, i32 }
%struct.diff = type { i32, i32, i32 }
%struct.search_site_config = type { [88 x %struct.mv], [88 x i64], i32, i32 }
%struct.vp9_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VPxWorker = type { %struct.VPxWorkerImpl*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VPxWorkerImpl = type opaque
%struct.EncWorkerData = type { %struct.VP9_COMP*, %struct.ThreadData*, i32, i32, [64 x i32] }
%struct.VP9LfSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, %struct.LoopFilterWorkerData*, i32, i32, %union.pthread_mutex_t*, %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.VP9Common*, [3 x %struct.macroblockd_plane], i32, i32, i32 }
%struct.VP9BitstreamWorkerData = type opaque
%struct.Vp9LevelInfo = type { %struct.Vp9LevelStats, %struct.Vp9LevelSpec }
%struct.Vp9LevelStats = type { i8, i32, i64, i64, double, %struct.FrameWindowBuffer, i32 }
%struct.FrameWindowBuffer = type { [128 x %struct.FrameRecord], i8, i8 }
%struct.FrameRecord = type { i64, i32, i32 }
%struct.MultiThreadHandle = type { i32, i32, i32, [4 x i32], %struct.JobQueue*, i32, [64 x %struct.RowMTInfo], [80 x i32] }
%struct.JobQueue = type { i8*, %struct.JobNode }
%struct.JobNode = type { i32, i32, i32 }
%struct.RowMTInfo = type { %struct.JobQueueHandle, %union.pthread_mutex_t }
%struct.JobQueueHandle = type { i8*, i32 }
%struct.ARNRFilterData = type { [25 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors }
%struct.LevelConstraint = type { i8, i8, i32, double }
%struct.vpx_roi_map = type { i8, i8*, i32, i32, [8 x i32], [8 x i32], [8 x i32], [8 x i32], [4 x i32] }
%struct.EXT_RATECTRL = type { i32, i8*, %struct.vpx_rc_funcs, %struct.vpx_rc_config, %struct.vpx_rc_firstpass_stats }
%struct.vpx_rc_funcs = type { i32 (i8*, %struct.vpx_rc_config*, i8**)*, i32 (i8*, %struct.vpx_rc_firstpass_stats*)*, i32 (i8*, %struct.vpx_rc_encodeframe_info*, %struct.vpx_rc_encodeframe_decision*)*, i32 (i8*, %struct.vpx_rc_encodeframe_result*)*, i32 (i8*)*, i8* }
%struct.vpx_rc_encodeframe_info = type { i32, i32, i32, i32, [3 x i32], [3 x i32] }
%struct.vpx_rc_encodeframe_decision = type { i32 }
%struct.vpx_rc_encodeframe_result = type { i64, i64, i64 }
%struct.vpx_rc_config = type { i32, i32, i32, i32, i32, i32 }
%struct.vpx_rc_firstpass_stats = type { %struct.vpx_rc_frame_stats*, i32 }
%struct.vpx_rc_frame_stats = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }
%struct.VPxWorkerInterface = type { void (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)*, void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)* }
%union.pthread_mutexattr_t = type { i32 }
%union.pthread_condattr_t = type { i32 }

@.str = private unnamed_addr constant [38 x i8] c"Failed to allocate row_mt_sync->mutex\00", align 1
@.str.1 = private unnamed_addr constant [37 x i8] c"Failed to allocate row_mt_sync->cond\00", align 1
@.str.2 = private unnamed_addr constant [40 x i8] c"Failed to allocate row_mt_sync->cur_col\00", align 1
@.str.3 = private unnamed_addr constant [32 x i8] c"Failed to allocate cpi->workers\00", align 1
@.str.4 = private unnamed_addr constant [38 x i8] c"Failed to allocate cpi->tile_thr_data\00", align 1
@.str.5 = private unnamed_addr constant [35 x i8] c"Failed to allocate thread_data->td\00", align 1
@.str.6 = private unnamed_addr constant [43 x i8] c"Failed to allocate thread_data->td->counts\00", align 1
@.str.7 = private unnamed_addr constant [36 x i8] c"Tile encoder thread creation failed\00", align 1
@vp9_level_defs = external local_unnamed_addr constant [14 x %struct.Vp9LevelSpec], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_encode_tiles_mt(%struct.VP9_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 85
  %3 = load i32, i32* %2, align 8
  %4 = shl i32 1, %3
  %5 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 58
  %6 = load i32, i32* %5, align 4
  %7 = icmp slt i32 %6, %4
  %8 = select i1 %7, i32 %6, i32 %4
  tail call void @vp9_init_tile_data(%struct.VP9_COMP* %0) #7
  tail call fastcc void @create_enc_workers(%struct.VP9_COMP* %0, i32 %8)
  %9 = icmp sgt i32 %8, 0
  br i1 %9, label %12, label %10

10:                                               ; preds = %1
  %11 = tail call %struct.VPxWorkerInterface* @vpx_get_worker_interface() #7
  br label %213

12:                                               ; preds = %1
  %13 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 137
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3
  %15 = bitcast %struct.ThreadData* %14 to i8*
  %16 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 1
  %17 = bitcast %struct.RD_COUNTS* %16 to i8*
  %18 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 76
  %19 = bitcast %struct.FRAME_COUNTS* %18 to i8*
  %20 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 61
  %21 = sext i32 %8 to i64
  br label %22

22:                                               ; preds = %12, %108
  %23 = phi i64 [ 0, %12 ], [ %109, %108 ]
  %24 = load %struct.EncWorkerData*, %struct.EncWorkerData** %13, align 16
  %25 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %24, i64 %23, i32 1
  %26 = load %struct.ThreadData*, %struct.ThreadData** %25, align 8
  %27 = icmp eq %struct.ThreadData* %26, %14
  br i1 %27, label %34, label %28

28:                                               ; preds = %22
  %29 = bitcast %struct.ThreadData* %26 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %29, i8* align 16 %15, i64 86592, i1 false)
  %30 = load %struct.ThreadData*, %struct.ThreadData** %25, align 8
  %31 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %30, i64 0, i32 1
  %32 = bitcast %struct.RD_COUNTS* %31 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %32, i8* align 16 %17, i64 27704, i1 false)
  %33 = load %struct.ThreadData*, %struct.ThreadData** %25, align 8
  br label %34

34:                                               ; preds = %22, %28
  %35 = phi %struct.ThreadData* [ %14, %22 ], [ %33, %28 ]
  %36 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %35, i64 0, i32 2
  %37 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %36, align 8
  %38 = icmp eq %struct.FRAME_COUNTS* %37, %18
  br i1 %38, label %41, label %39

39:                                               ; preds = %34
  %40 = bitcast %struct.FRAME_COUNTS* %37 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %40, i8* align 4 %19, i64 13224, i1 false)
  br label %41

41:                                               ; preds = %34, %39
  %42 = load i32, i32* %20, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %108, label %44

44:                                               ; preds = %41
  %45 = load %struct.ThreadData*, %struct.ThreadData** %25, align 8
  %46 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %45, i64 0, i32 5
  %47 = load %struct.PC_TREE*, %struct.PC_TREE** %46, align 16
  %48 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %47, i64 0, i32 3, i32 7, i64 0, i64 0
  %49 = bitcast i32** %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %45, i64 0, i32 0, i32 0, i64 0, i32 2
  %52 = bitcast i32** %51 to i64*
  store i64 %50, i64* %52, align 8
  %53 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %47, i64 0, i32 3, i32 8, i64 0, i64 0
  %54 = bitcast i32** %53 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %45, i64 0, i32 0, i32 0, i64 0, i32 1
  %57 = bitcast i32** %56 to i64*
  store i64 %55, i64* %57, align 16
  %58 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %47, i64 0, i32 3, i32 9, i64 0, i64 0
  %59 = bitcast i32** %58 to i64*
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %45, i64 0, i32 0, i32 1, i32 0, i64 0
  %62 = bitcast %struct.macroblockd_plane* %61 to i64*
  store i64 %60, i64* %62, align 8
  %63 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %47, i64 0, i32 3, i32 10, i64 0, i64 0
  %64 = bitcast i16** %63 to i64*
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %45, i64 0, i32 0, i32 0, i64 0, i32 3
  %67 = bitcast i16** %66 to i64*
  store i64 %65, i64* %67, align 16
  %68 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %47, i64 0, i32 3, i32 7, i64 1, i64 0
  %69 = bitcast i32** %68 to i64*
  %70 = load i64, i64* %69, align 8
  %71 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %45, i64 0, i32 0, i32 0, i64 1, i32 2
  %72 = bitcast i32** %71 to i64*
  store i64 %70, i64* %72, align 8
  %73 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %47, i64 0, i32 3, i32 8, i64 1, i64 0
  %74 = bitcast i32** %73 to i64*
  %75 = load i64, i64* %74, align 8
  %76 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %45, i64 0, i32 0, i32 0, i64 1, i32 1
  %77 = bitcast i32** %76 to i64*
  store i64 %75, i64* %77, align 16
  %78 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %47, i64 0, i32 3, i32 9, i64 1, i64 0
  %79 = bitcast i32** %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %45, i64 0, i32 0, i32 1, i32 0, i64 1
  %82 = bitcast %struct.macroblockd_plane* %81 to i64*
  store i64 %80, i64* %82, align 8
  %83 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %47, i64 0, i32 3, i32 10, i64 1, i64 0
  %84 = bitcast i16** %83 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %45, i64 0, i32 0, i32 0, i64 1, i32 3
  %87 = bitcast i16** %86 to i64*
  store i64 %85, i64* %87, align 16
  %88 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %47, i64 0, i32 3, i32 7, i64 2, i64 0
  %89 = bitcast i32** %88 to i64*
  %90 = load i64, i64* %89, align 8
  %91 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %45, i64 0, i32 0, i32 0, i64 2, i32 2
  %92 = bitcast i32** %91 to i64*
  store i64 %90, i64* %92, align 8
  %93 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %47, i64 0, i32 3, i32 8, i64 2, i64 0
  %94 = bitcast i32** %93 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %45, i64 0, i32 0, i32 0, i64 2, i32 1
  %97 = bitcast i32** %96 to i64*
  store i64 %95, i64* %97, align 16
  %98 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %47, i64 0, i32 3, i32 9, i64 2, i64 0
  %99 = bitcast i32** %98 to i64*
  %100 = load i64, i64* %99, align 8
  %101 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %45, i64 0, i32 0, i32 1, i32 0, i64 2
  %102 = bitcast %struct.macroblockd_plane* %101 to i64*
  store i64 %100, i64* %102, align 8
  %103 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %47, i64 0, i32 3, i32 10, i64 2, i64 0
  %104 = bitcast i16** %103 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %45, i64 0, i32 0, i32 0, i64 2, i32 3
  %107 = bitcast i16** %106 to i64*
  store i64 %105, i64* %107, align 16
  br label %108

108:                                              ; preds = %44, %41
  %109 = add nuw nsw i64 %23, 1
  %110 = icmp slt i64 %109, %21
  br i1 %110, label %22, label %111

111:                                              ; preds = %108
  %112 = tail call %struct.VPxWorkerInterface* @vpx_get_worker_interface() #7
  br i1 %9, label %113, label %213

113:                                              ; preds = %111
  %114 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 136
  %115 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 137
  %116 = zext i32 %8 to i64
  %117 = and i64 %116, 1
  %118 = icmp eq i32 %8, 1
  br i1 %118, label %121, label %119

119:                                              ; preds = %113
  %120 = sub nsw i64 %116, %117
  br label %136

121:                                              ; preds = %136, %113
  %122 = phi i64 [ 0, %113 ], [ %154, %136 ]
  %123 = icmp eq i64 %117, 0
  br i1 %123, label %132, label %124

124:                                              ; preds = %121
  %125 = load %struct.VPxWorker*, %struct.VPxWorker** %114, align 8
  %126 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %125, i64 %122, i32 2
  store i32 (i8*, i8*)* @enc_worker_hook, i32 (i8*, i8*)** %126, align 8
  %127 = load %struct.EncWorkerData*, %struct.EncWorkerData** %115, align 16
  %128 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %127, i64 %122
  %129 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %125, i64 %122, i32 3
  %130 = bitcast i8** %129 to %struct.EncWorkerData**
  store %struct.EncWorkerData* %128, %struct.EncWorkerData** %130, align 8
  %131 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %125, i64 %122, i32 4
  store i8* null, i8** %131, align 8
  br label %132

132:                                              ; preds = %121, %124
  %133 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 135
  %134 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %112, i64 0, i32 3
  %135 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %112, i64 0, i32 4
  br label %159

136:                                              ; preds = %136, %119
  %137 = phi i64 [ 0, %119 ], [ %154, %136 ]
  %138 = phi i64 [ %120, %119 ], [ %155, %136 ]
  %139 = load %struct.VPxWorker*, %struct.VPxWorker** %114, align 8
  %140 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %139, i64 %137, i32 2
  store i32 (i8*, i8*)* @enc_worker_hook, i32 (i8*, i8*)** %140, align 8
  %141 = load %struct.EncWorkerData*, %struct.EncWorkerData** %115, align 16
  %142 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %141, i64 %137
  %143 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %139, i64 %137, i32 3
  %144 = bitcast i8** %143 to %struct.EncWorkerData**
  store %struct.EncWorkerData* %142, %struct.EncWorkerData** %144, align 8
  %145 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %139, i64 %137, i32 4
  store i8* null, i8** %145, align 8
  %146 = or i64 %137, 1
  %147 = load %struct.VPxWorker*, %struct.VPxWorker** %114, align 8
  %148 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %147, i64 %146, i32 2
  store i32 (i8*, i8*)* @enc_worker_hook, i32 (i8*, i8*)** %148, align 8
  %149 = load %struct.EncWorkerData*, %struct.EncWorkerData** %115, align 16
  %150 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %149, i64 %146
  %151 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %147, i64 %146, i32 3
  %152 = bitcast i8** %151 to %struct.EncWorkerData**
  store %struct.EncWorkerData* %150, %struct.EncWorkerData** %152, align 8
  %153 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %147, i64 %146, i32 4
  store i8* null, i8** %153, align 8
  %154 = add nuw nsw i64 %137, 2
  %155 = add i64 %138, -2
  %156 = icmp eq i64 %155, 0
  br i1 %156, label %121, label %136

157:                                              ; preds = %176
  %158 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %112, i64 0, i32 2
  br label %179

159:                                              ; preds = %176, %132
  %160 = phi i64 [ 0, %132 ], [ %177, %176 ]
  %161 = load %struct.VPxWorker*, %struct.VPxWorker** %114, align 8
  %162 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %161, i64 %160
  %163 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %161, i64 %160, i32 3
  %164 = bitcast i8** %163 to %struct.EncWorkerData**
  %165 = load %struct.EncWorkerData*, %struct.EncWorkerData** %164, align 8
  %166 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %165, i64 0, i32 2
  %167 = trunc i64 %160 to i32
  store i32 %167, i32* %166, align 8
  %168 = load i32, i32* %133, align 4
  %169 = add nsw i32 %168, -1
  %170 = zext i32 %169 to i64
  %171 = icmp eq i64 %160, %170
  br i1 %171, label %172, label %174

172:                                              ; preds = %159
  %173 = load void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)** %135, align 8
  tail call void %173(%struct.VPxWorker* %162) #7
  br label %176

174:                                              ; preds = %159
  %175 = load void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)** %134, align 8
  tail call void %175(%struct.VPxWorker* %162) #7
  br label %176

176:                                              ; preds = %174, %172
  %177 = add nuw nsw i64 %160, 1
  %178 = icmp eq i64 %177, %116
  br i1 %178, label %157, label %159

179:                                              ; preds = %179, %157
  %180 = phi i64 [ 0, %157 ], [ %185, %179 ]
  %181 = load %struct.VPxWorker*, %struct.VPxWorker** %114, align 8
  %182 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %181, i64 %180
  %183 = load i32 (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)** %158, align 8
  %184 = tail call i32 %183(%struct.VPxWorker* %182) #7
  %185 = add nuw nsw i64 %180, 1
  %186 = icmp eq i64 %185, %116
  br i1 %186, label %187, label %179

187:                                              ; preds = %179
  br i1 %9, label %188, label %213

188:                                              ; preds = %187
  %189 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 135
  %190 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 136
  %191 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 76
  %192 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3
  %193 = sext i32 %8 to i64
  br label %194

194:                                              ; preds = %188, %210
  %195 = phi i64 [ 0, %188 ], [ %211, %210 ]
  %196 = load i32, i32* %189, align 4
  %197 = add nsw i32 %196, -1
  %198 = sext i32 %197 to i64
  %199 = icmp slt i64 %195, %198
  br i1 %199, label %200, label %210

200:                                              ; preds = %194
  %201 = load %struct.VPxWorker*, %struct.VPxWorker** %190, align 8
  %202 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %201, i64 %195, i32 3
  %203 = bitcast i8** %202 to %struct.EncWorkerData**
  %204 = load %struct.EncWorkerData*, %struct.EncWorkerData** %203, align 8
  %205 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %204, i64 0, i32 1
  %206 = load %struct.ThreadData*, %struct.ThreadData** %205, align 8
  %207 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %206, i64 0, i32 2
  %208 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %207, align 8
  tail call void @vp9_accumulate_frame_counts(%struct.FRAME_COUNTS* %191, %struct.FRAME_COUNTS* %208, i32 0) #7
  %209 = load %struct.ThreadData*, %struct.ThreadData** %205, align 8
  tail call fastcc void @accumulate_rd_opt(%struct.ThreadData* %192, %struct.ThreadData* %209)
  br label %210

210:                                              ; preds = %200, %194
  %211 = add nuw nsw i64 %195, 1
  %212 = icmp slt i64 %211, %193
  br i1 %212, label %194, label %213

213:                                              ; preds = %210, %111, %10, %187
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @vp9_init_tile_data(%struct.VP9_COMP*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @create_enc_workers(%struct.VP9_COMP*, i32) unnamed_addr #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8
  %6 = tail call %struct.VPxWorkerInterface* @vpx_get_worker_interface() #7
  %7 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 135
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %148

10:                                               ; preds = %2
  %11 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %12 = load i32, i32* %11, align 4
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %75, label %14

14:                                               ; preds = %10
  %15 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 146
  %16 = load i32, i32* %15, align 8
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %75

18:                                               ; preds = %14
  %19 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 2
  %20 = load i32, i32* %19, align 8
  %21 = add nsw i32 %20, 7
  %22 = ashr i32 %21, 3
  %23 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %23) #7
  store i32 -1431655766, i32* %3, align 4
  %24 = bitcast i32* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %24) #7
  store i32 -1431655766, i32* %4, align 4
  call void @vp9_get_tile_n_bits(i32 %22, i32* nonnull %3, i32* nonnull %4) #7
  %25 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 55
  %26 = load i32, i32* %25, align 16
  %27 = load i32, i32* %3, align 4
  %28 = load i32, i32* %4, align 4
  %29 = icmp slt i32 %26, %27
  %30 = icmp sgt i32 %26, %28
  %31 = select i1 %30, i32 %28, i32 %26
  %32 = select i1 %29, i32 %27, i32 %31
  %33 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 59
  %34 = load i32, i32* %33, align 16
  %35 = icmp eq i32 %34, 1
  br i1 %35, label %36, label %68

36:                                               ; preds = %18
  %37 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 3
  %38 = load i32, i32* %37, align 16
  %39 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %40 = load i32, i32* %39, align 4
  %41 = mul i32 %40, %38
  %42 = icmp ugt i32 %38, %40
  %43 = select i1 %42, i32 %38, i32 %40
  br label %44

44:                                               ; preds = %157, %36
  %45 = phi i64 [ 10, %36 ], [ %158, %157 ]
  %46 = getelementptr inbounds [14 x %struct.Vp9LevelSpec], [14 x %struct.Vp9LevelSpec]* @vp9_level_defs, i64 0, i64 %45, i32 2
  %47 = load i32, i32* %46, align 16
  %48 = icmp ult i32 %47, %41
  br i1 %48, label %53, label %49

49:                                               ; preds = %44
  %50 = getelementptr inbounds [14 x %struct.Vp9LevelSpec], [14 x %struct.Vp9LevelSpec]* @vp9_level_defs, i64 0, i64 %45, i32 3
  %51 = load i32, i32* %50, align 4
  %52 = icmp ult i32 %51, %43
  br i1 %52, label %53, label %56

53:                                               ; preds = %49, %44
  %54 = or i64 %45, 1
  %55 = icmp eq i64 %54, 255
  br i1 %55, label %68, label %149

56:                                               ; preds = %153, %49
  %57 = phi i64 [ %45, %49 ], [ %54, %153 ]
  %58 = and i64 %57, 4294967295
  %59 = getelementptr inbounds [14 x %struct.Vp9LevelSpec], [14 x %struct.Vp9LevelSpec]* @vp9_level_defs, i64 0, i64 %58, i32 7
  %60 = load i8, i8* %59, align 16
  %61 = zext i8 %60 to i32
  %62 = call i32 @llvm.ctlz.i32(i32 %61, i1 true) #7, !range !2
  %63 = xor i32 %62, 31
  %64 = icmp sgt i32 %32, %63
  br i1 %64, label %65, label %68

65:                                               ; preds = %56
  %66 = icmp sgt i32 %63, %27
  %67 = select i1 %66, i32 %63, i32 %27
  br label %68

68:                                               ; preds = %53, %18, %56, %65
  %69 = phi i32 [ %32, %18 ], [ %67, %65 ], [ %32, %56 ], [ %32, %53 ]
  %70 = shl i32 1, %69
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %24) #7
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %23) #7
  %71 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 58
  %72 = load i32, i32* %71, align 4
  %73 = icmp slt i32 %72, %70
  %74 = select i1 %73, i32 %72, i32 %70
  br label %75

75:                                               ; preds = %14, %10, %68
  %76 = phi i32 [ %1, %14 ], [ %74, %68 ], [ %1, %10 ]
  %77 = sext i32 %76 to i64
  %78 = mul nsw i64 %77, 48
  %79 = call i8* @vpx_malloc(i64 %78) #7
  %80 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 136
  %81 = bitcast %struct.VPxWorker** %80 to i8**
  store i8* %79, i8** %81, align 8
  %82 = icmp eq i8* %79, null
  br i1 %82, label %83, label %85

83:                                               ; preds = %75
  %84 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %5, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %84, i32 2, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0)) #7
  br label %85

85:                                               ; preds = %75, %83
  %86 = call i8* @vpx_calloc(i64 %77, i64 280) #7
  %87 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 137
  %88 = bitcast %struct.EncWorkerData** %87 to i8**
  store i8* %86, i8** %88, align 16
  %89 = icmp eq i8* %86, null
  br i1 %89, label %90, label %92

90:                                               ; preds = %85
  %91 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %5, i64 0, i32 0
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %91, i32 2, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0)) #7
  br label %92

92:                                               ; preds = %85, %90
  %93 = icmp sgt i32 %76, 0
  br i1 %93, label %94, label %148

94:                                               ; preds = %92
  %95 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %6, i64 0, i32 0
  %96 = add nsw i32 %76, -1
  %97 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3
  %98 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %5, i64 0, i32 0
  %99 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %6, i64 0, i32 1
  %100 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %6, i64 0, i32 2
  %101 = sext i32 %96 to i64
  %102 = zext i32 %76 to i64
  br label %103

103:                                              ; preds = %143, %94
  %104 = phi i64 [ 0, %94 ], [ %146, %143 ]
  %105 = load %struct.VPxWorker*, %struct.VPxWorker** %80, align 8
  %106 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %105, i64 %104
  %107 = load %struct.EncWorkerData*, %struct.EncWorkerData** %87, align 16
  %108 = load i32, i32* %7, align 4
  %109 = add nsw i32 %108, 1
  store i32 %109, i32* %7, align 4
  %110 = load void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)** %95, align 8
  call void %110(%struct.VPxWorker* %106) #7
  %111 = icmp slt i64 %104, %101
  %112 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %107, i64 %104, i32 0
  store %struct.VP9_COMP* %0, %struct.VP9_COMP** %112, align 8
  br i1 %111, label %113, label %141

113:                                              ; preds = %103
  %114 = call i8* @vpx_memalign(i64 32, i64 114336) #7
  %115 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %107, i64 %104, i32 1
  %116 = bitcast %struct.ThreadData** %115 to i8**
  store i8* %114, i8** %116, align 8
  %117 = icmp eq i8* %114, null
  br i1 %117, label %118, label %120

118:                                              ; preds = %113
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %98, i32 2, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5, i64 0, i64 0)) #7
  %119 = load i8*, i8** %116, align 8
  br label %120

120:                                              ; preds = %113, %118
  %121 = phi i8* [ %114, %113 ], [ %119, %118 ]
  call void @llvm.memset.p0i8.i64(i8* align 16 %121, i8 0, i64 114336, i1 false)
  %122 = load %struct.ThreadData*, %struct.ThreadData** %115, align 8
  %123 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %122, i64 0, i32 3
  store %struct.PICK_MODE_CONTEXT* null, %struct.PICK_MODE_CONTEXT** %123, align 16
  %124 = load %struct.ThreadData*, %struct.ThreadData** %115, align 8
  %125 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %124, i64 0, i32 4
  store %struct.PC_TREE* null, %struct.PC_TREE** %125, align 8
  %126 = load %struct.ThreadData*, %struct.ThreadData** %115, align 8
  call void @vp9_setup_pc_tree(%struct.VP9Common* %5, %struct.ThreadData* %126) #7
  %127 = call i8* @vpx_calloc(i64 1, i64 13224) #7
  %128 = load %struct.ThreadData*, %struct.ThreadData** %115, align 8
  %129 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %128, i64 0, i32 2
  %130 = bitcast %struct.FRAME_COUNTS** %129 to i8**
  store i8* %127, i8** %130, align 8
  %131 = load %struct.ThreadData*, %struct.ThreadData** %115, align 8
  %132 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %131, i64 0, i32 2
  %133 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %132, align 8
  %134 = icmp eq %struct.FRAME_COUNTS* %133, null
  br i1 %134, label %135, label %136

135:                                              ; preds = %120
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %98, i32 2, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.6, i64 0, i64 0)) #7
  br label %136

136:                                              ; preds = %120, %135
  %137 = load i32 (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)** %99, align 8
  %138 = call i32 %137(%struct.VPxWorker* %106) #7
  %139 = icmp eq i32 %138, 0
  br i1 %139, label %140, label %143

140:                                              ; preds = %136
  call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %98, i32 1, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.7, i64 0, i64 0)) #7
  br label %143

141:                                              ; preds = %103
  %142 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %107, i64 %104, i32 1
  store %struct.ThreadData* %97, %struct.ThreadData** %142, align 8
  br label %143

143:                                              ; preds = %136, %140, %141
  %144 = load i32 (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)** %100, align 8
  %145 = call i32 %144(%struct.VPxWorker* %106) #7
  %146 = add nuw nsw i64 %104, 1
  %147 = icmp eq i64 %146, %102
  br i1 %147, label %148, label %103

148:                                              ; preds = %143, %92, %2
  ret void

149:                                              ; preds = %53
  %150 = getelementptr inbounds [14 x %struct.Vp9LevelSpec], [14 x %struct.Vp9LevelSpec]* @vp9_level_defs, i64 0, i64 %54, i32 2
  %151 = load i32, i32* %150, align 16
  %152 = icmp ult i32 %151, %41
  br i1 %152, label %157, label %153

153:                                              ; preds = %149
  %154 = getelementptr inbounds [14 x %struct.Vp9LevelSpec], [14 x %struct.Vp9LevelSpec]* @vp9_level_defs, i64 0, i64 %54, i32 3
  %155 = load i32, i32* %154, align 4
  %156 = icmp ult i32 %155, %43
  br i1 %156, label %157, label %56

157:                                              ; preds = %153, %149
  %158 = add nuw nsw i64 %45, 2
  br label %44
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define internal i32 @enc_worker_hook(i8* nocapture readonly, i8* nocapture readnone) #0 {
  %3 = bitcast i8* %0 to %struct.VP9_COMP**
  %4 = load %struct.VP9_COMP*, %struct.VP9_COMP** %3, align 8
  %5 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 8, i32 85
  %6 = load i32, i32* %5, align 8
  %7 = shl i32 1, %6
  %8 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 8, i32 86
  %9 = load i32, i32* %8, align 4
  %10 = getelementptr inbounds i8, i8* %0, i64 16
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 8
  %13 = shl i32 %7, %9
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %15, label %27

15:                                               ; preds = %2
  %16 = getelementptr inbounds i8, i8* %0, i64 8
  %17 = bitcast i8* %16 to %struct.ThreadData**
  %18 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %4, i64 0, i32 135
  br label %19

19:                                               ; preds = %15, %19
  %20 = phi i32 [ %12, %15 ], [ %25, %19 ]
  %21 = sdiv i32 %20, %7
  %22 = srem i32 %20, %7
  %23 = load %struct.ThreadData*, %struct.ThreadData** %17, align 8
  tail call void @vp9_encode_tile(%struct.VP9_COMP* %4, %struct.ThreadData* %23, i32 %21, i32 %22) #7
  %24 = load i32, i32* %18, align 4
  %25 = add nsw i32 %24, %20
  %26 = icmp slt i32 %25, %13
  br i1 %26, label %19, label %27

27:                                               ; preds = %19, %2
  ret i32 0
}

declare void @vp9_accumulate_frame_counts(%struct.FRAME_COUNTS*, %struct.FRAME_COUNTS*, i32) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @accumulate_rd_opt(%struct.ThreadData* nocapture, %struct.ThreadData* nocapture readonly) unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 1, i32 1, i64 0
  %4 = load i64, i64* %3, align 8
  %5 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 1, i32 1, i64 0
  %6 = load i64, i64* %5, align 8
  %7 = add nsw i64 %6, %4
  store i64 %7, i64* %5, align 8
  %8 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 1, i32 1, i64 1
  %9 = load i64, i64* %8, align 8
  %10 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 1, i32 1, i64 1
  %11 = load i64, i64* %10, align 8
  %12 = add nsw i64 %11, %9
  store i64 %12, i64* %10, align 8
  %13 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 1, i32 1, i64 2
  %14 = load i64, i64* %13, align 8
  %15 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 1, i32 1, i64 2
  %16 = load i64, i64* %15, align 8
  %17 = add nsw i64 %16, %14
  store i64 %17, i64* %15, align 8
  %18 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 1, i32 2, i64 0
  %19 = load i64, i64* %18, align 8
  %20 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 1, i32 2, i64 0
  %21 = load i64, i64* %20, align 8
  %22 = add nsw i64 %21, %19
  store i64 %22, i64* %20, align 8
  %23 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 1, i32 2, i64 1
  %24 = load i64, i64* %23, align 8
  %25 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 1, i32 2, i64 1
  %26 = load i64, i64* %25, align 8
  %27 = add nsw i64 %26, %24
  store i64 %27, i64* %25, align 8
  %28 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 1, i32 2, i64 2
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 1, i32 2, i64 2
  %31 = load i64, i64* %30, align 8
  %32 = add nsw i64 %31, %29
  store i64 %32, i64* %30, align 8
  %33 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 1, i32 2, i64 3
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 1, i32 2, i64 3
  %36 = load i64, i64* %35, align 8
  %37 = add nsw i64 %36, %34
  store i64 %37, i64* %35, align 8
  br label %38

38:                                               ; preds = %119, %2
  %39 = phi i64 [ 0, %2 ], [ %120, %119 ]
  br label %40

40:                                               ; preds = %116, %38
  %41 = phi i64 [ 0, %38 ], [ %117, %116 ]
  br label %42

42:                                               ; preds = %113, %40
  %43 = phi i64 [ 0, %40 ], [ %114, %113 ]
  br label %44

44:                                               ; preds = %110, %42
  %45 = phi i64 [ 0, %42 ], [ %111, %110 ]
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi i64 [ 0, %44 ], [ %108, %46 ]
  %48 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 0
  %49 = load i32, i32* %48, align 4
  %50 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 0
  %51 = load i32, i32* %50, align 4
  %52 = add i32 %51, %49
  store i32 %52, i32* %50, align 4
  %53 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 1
  %54 = load i32, i32* %53, align 4
  %55 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 1
  %56 = load i32, i32* %55, align 4
  %57 = add i32 %56, %54
  store i32 %57, i32* %55, align 4
  %58 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 2
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 2
  %61 = load i32, i32* %60, align 4
  %62 = add i32 %61, %59
  store i32 %62, i32* %60, align 4
  %63 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 3
  %64 = load i32, i32* %63, align 4
  %65 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 3
  %66 = load i32, i32* %65, align 4
  %67 = add i32 %66, %64
  store i32 %67, i32* %65, align 4
  %68 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 4
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 4
  %71 = load i32, i32* %70, align 4
  %72 = add i32 %71, %69
  store i32 %72, i32* %70, align 4
  %73 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 5
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 5
  %76 = load i32, i32* %75, align 4
  %77 = add i32 %76, %74
  store i32 %77, i32* %75, align 4
  %78 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 6
  %79 = load i32, i32* %78, align 4
  %80 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 6
  %81 = load i32, i32* %80, align 4
  %82 = add i32 %81, %79
  store i32 %82, i32* %80, align 4
  %83 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 7
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 7
  %86 = load i32, i32* %85, align 4
  %87 = add i32 %86, %84
  store i32 %87, i32* %85, align 4
  %88 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 8
  %89 = load i32, i32* %88, align 4
  %90 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 8
  %91 = load i32, i32* %90, align 4
  %92 = add i32 %91, %89
  store i32 %92, i32* %90, align 4
  %93 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 9
  %94 = load i32, i32* %93, align 4
  %95 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 9
  %96 = load i32, i32* %95, align 4
  %97 = add i32 %96, %94
  store i32 %97, i32* %95, align 4
  %98 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 10
  %99 = load i32, i32* %98, align 4
  %100 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 10
  %101 = load i32, i32* %100, align 4
  %102 = add i32 %101, %99
  store i32 %102, i32* %100, align 4
  %103 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %1, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 11
  %104 = load i32, i32* %103, align 4
  %105 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %0, i64 0, i32 1, i32 0, i64 %39, i64 %41, i64 %43, i64 %45, i64 %47, i64 11
  %106 = load i32, i32* %105, align 4
  %107 = add i32 %106, %104
  store i32 %107, i32* %105, align 4
  %108 = add nuw nsw i64 %47, 1
  %109 = icmp eq i64 %108, 6
  br i1 %109, label %110, label %46

110:                                              ; preds = %46
  %111 = add nuw nsw i64 %45, 1
  %112 = icmp eq i64 %111, 6
  br i1 %112, label %113, label %44

113:                                              ; preds = %110
  %114 = add nuw nsw i64 %43, 1
  %115 = icmp eq i64 %114, 2
  br i1 %115, label %116, label %42

116:                                              ; preds = %113
  %117 = add nuw nsw i64 %41, 1
  %118 = icmp eq i64 %117, 2
  br i1 %118, label %119, label %40

119:                                              ; preds = %116
  %120 = add nuw nsw i64 %39, 1
  %121 = icmp eq i64 %120, 4
  br i1 %121, label %122, label %38

122:                                              ; preds = %119
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_row_mt_sync_mem_alloc(%struct.VP9RowMTSyncData* nocapture, %struct.VP9Common*, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.VP9RowMTSyncData, %struct.VP9RowMTSyncData* %0, i64 0, i32 4
  store i32 %2, i32* %4, align 4
  %5 = sext i32 %2 to i64
  %6 = mul nsw i64 %5, 40
  %7 = tail call i8* @vpx_malloc(i64 %6) #7
  %8 = getelementptr inbounds %struct.VP9RowMTSyncData, %struct.VP9RowMTSyncData* %0, i64 0, i32 0
  %9 = bitcast %struct.VP9RowMTSyncData* %0 to i8**
  store i8* %7, i8** %9, align 8
  %10 = icmp eq i8* %7, null
  %11 = bitcast i8* %7 to %union.pthread_mutex_t*
  br i1 %10, label %12, label %15

12:                                               ; preds = %3
  %13 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %1, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %13, i32 2, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i64 0, i64 0)) #7
  %14 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %8, align 8
  br label %15

15:                                               ; preds = %3, %12
  %16 = phi %union.pthread_mutex_t* [ %11, %3 ], [ %14, %12 ]
  %17 = icmp ne %union.pthread_mutex_t* %16, null
  %18 = icmp sgt i32 %2, 0
  %19 = and i1 %17, %18
  br i1 %19, label %20, label %31

20:                                               ; preds = %15
  %21 = zext i32 %2 to i64
  %22 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* nonnull %16, %union.pthread_mutexattr_t* null) #7
  %23 = icmp eq i32 %2, 1
  br i1 %23, label %31, label %24

24:                                               ; preds = %20, %24
  %25 = phi i64 [ %29, %24 ], [ 1, %20 ]
  %26 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %8, align 8
  %27 = getelementptr inbounds %union.pthread_mutex_t, %union.pthread_mutex_t* %26, i64 %25
  %28 = tail call i32 @pthread_mutex_init(%union.pthread_mutex_t* %27, %union.pthread_mutexattr_t* null) #7
  %29 = add nuw nsw i64 %25, 1
  %30 = icmp eq i64 %29, %21
  br i1 %30, label %31, label %24

31:                                               ; preds = %24, %20, %15
  %32 = mul nsw i64 %5, 48
  %33 = tail call i8* @vpx_malloc(i64 %32) #7
  %34 = getelementptr inbounds %struct.VP9RowMTSyncData, %struct.VP9RowMTSyncData* %0, i64 0, i32 1
  %35 = bitcast %union.pthread_cond_t** %34 to i8**
  store i8* %33, i8** %35, align 8
  %36 = icmp eq i8* %33, null
  %37 = bitcast i8* %33 to %union.pthread_cond_t*
  br i1 %36, label %38, label %41

38:                                               ; preds = %31
  %39 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %1, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %39, i32 2, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0)) #7
  %40 = load %union.pthread_cond_t*, %union.pthread_cond_t** %34, align 8
  br label %41

41:                                               ; preds = %31, %38
  %42 = phi %union.pthread_cond_t* [ %37, %31 ], [ %40, %38 ]
  %43 = icmp ne %union.pthread_cond_t* %42, null
  %44 = and i1 %43, %18
  br i1 %44, label %45, label %56

45:                                               ; preds = %41
  %46 = zext i32 %2 to i64
  %47 = tail call i32 @pthread_cond_init(%union.pthread_cond_t* nonnull %42, %union.pthread_condattr_t* null) #7
  %48 = icmp eq i32 %2, 1
  br i1 %48, label %56, label %49

49:                                               ; preds = %45, %49
  %50 = phi i64 [ %54, %49 ], [ 1, %45 ]
  %51 = load %union.pthread_cond_t*, %union.pthread_cond_t** %34, align 8
  %52 = getelementptr inbounds %union.pthread_cond_t, %union.pthread_cond_t* %51, i64 %50
  %53 = tail call i32 @pthread_cond_init(%union.pthread_cond_t* %52, %union.pthread_condattr_t* null) #7
  %54 = add nuw nsw i64 %50, 1
  %55 = icmp eq i64 %54, %46
  br i1 %55, label %56, label %49

56:                                               ; preds = %49, %45, %41
  %57 = shl nsw i64 %5, 2
  %58 = tail call i8* @vpx_malloc(i64 %57) #7
  %59 = getelementptr inbounds %struct.VP9RowMTSyncData, %struct.VP9RowMTSyncData* %0, i64 0, i32 2
  %60 = bitcast i32** %59 to i8**
  store i8* %58, i8** %60, align 8
  %61 = icmp eq i8* %58, null
  br i1 %61, label %62, label %64

62:                                               ; preds = %56
  %63 = getelementptr inbounds %struct.VP9Common, %struct.VP9Common* %1, i64 0, i32 0
  tail call void (%struct.vpx_internal_error_info*, i32, i8*, ...) @vpx_internal_error(%struct.vpx_internal_error_info* %63, i32 2, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2, i64 0, i64 0)) #7
  br label %64

64:                                               ; preds = %56, %62
  %65 = getelementptr inbounds %struct.VP9RowMTSyncData, %struct.VP9RowMTSyncData* %0, i64 0, i32 3
  store i32 1, i32* %65, align 8
  ret void
}

declare i8* @vpx_malloc(i64) local_unnamed_addr #2

declare void @vpx_internal_error(%struct.vpx_internal_error_info*, i32, i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_mutex_init(%union.pthread_mutex_t*, %union.pthread_mutexattr_t*) local_unnamed_addr #4

; Function Attrs: nounwind
declare i32 @pthread_cond_init(%union.pthread_cond_t*, %union.pthread_condattr_t*) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_row_mt_sync_mem_dealloc(%struct.VP9RowMTSyncData*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.VP9RowMTSyncData* %0, null
  br i1 %2, label %50, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.VP9RowMTSyncData, %struct.VP9RowMTSyncData* %0, i64 0, i32 0
  %5 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %4, align 8
  %6 = icmp eq %union.pthread_mutex_t* %5, null
  br i1 %6, label %24, label %7

7:                                                ; preds = %3
  %8 = getelementptr inbounds %struct.VP9RowMTSyncData, %struct.VP9RowMTSyncData* %0, i64 0, i32 4
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %21

11:                                               ; preds = %7, %11
  %12 = phi i64 [ %16, %11 ], [ 0, %7 ]
  %13 = phi %union.pthread_mutex_t* [ %20, %11 ], [ %5, %7 ]
  %14 = getelementptr inbounds %union.pthread_mutex_t, %union.pthread_mutex_t* %13, i64 %12
  %15 = tail call i32 @pthread_mutex_destroy(%union.pthread_mutex_t* %14) #7
  %16 = add nuw nsw i64 %12, 1
  %17 = load i32, i32* %8, align 4
  %18 = sext i32 %17 to i64
  %19 = icmp slt i64 %16, %18
  %20 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %4, align 8
  br i1 %19, label %11, label %21

21:                                               ; preds = %11, %7
  %22 = phi %union.pthread_mutex_t* [ %5, %7 ], [ %20, %11 ]
  %23 = bitcast %union.pthread_mutex_t* %22 to i8*
  tail call void @vpx_free(i8* %23) #7
  br label %24

24:                                               ; preds = %3, %21
  %25 = getelementptr inbounds %struct.VP9RowMTSyncData, %struct.VP9RowMTSyncData* %0, i64 0, i32 1
  %26 = load %union.pthread_cond_t*, %union.pthread_cond_t** %25, align 8
  %27 = icmp eq %union.pthread_cond_t* %26, null
  br i1 %27, label %45, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.VP9RowMTSyncData, %struct.VP9RowMTSyncData* %0, i64 0, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %32, label %42

32:                                               ; preds = %28, %32
  %33 = phi i64 [ %37, %32 ], [ 0, %28 ]
  %34 = phi %union.pthread_cond_t* [ %41, %32 ], [ %26, %28 ]
  %35 = getelementptr inbounds %union.pthread_cond_t, %union.pthread_cond_t* %34, i64 %33
  %36 = tail call i32 @pthread_cond_destroy(%union.pthread_cond_t* %35) #7
  %37 = add nuw nsw i64 %33, 1
  %38 = load i32, i32* %29, align 4
  %39 = sext i32 %38 to i64
  %40 = icmp slt i64 %37, %39
  %41 = load %union.pthread_cond_t*, %union.pthread_cond_t** %25, align 8
  br i1 %40, label %32, label %42

42:                                               ; preds = %32, %28
  %43 = phi %union.pthread_cond_t* [ %26, %28 ], [ %41, %32 ]
  %44 = bitcast %union.pthread_cond_t* %43 to i8*
  tail call void @vpx_free(i8* %44) #7
  br label %45

45:                                               ; preds = %24, %42
  %46 = getelementptr inbounds %struct.VP9RowMTSyncData, %struct.VP9RowMTSyncData* %0, i64 0, i32 2
  %47 = bitcast i32** %46 to i8**
  %48 = load i8*, i8** %47, align 8
  tail call void @vpx_free(i8* %48) #7
  %49 = bitcast %struct.VP9RowMTSyncData* %0 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %49, i8 0, i64 32, i1 false)
  br label %50

50:                                               ; preds = %1, %45
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_mutex_destroy(%union.pthread_mutex_t*) local_unnamed_addr #4

declare void @vpx_free(i8*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_cond_destroy(%union.pthread_cond_t*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_row_mt_sync_read(%struct.VP9RowMTSyncData* nocapture readonly, i32, i32) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.VP9RowMTSyncData, %struct.VP9RowMTSyncData* %0, i64 0, i32 3
  %5 = load i32, i32* %4, align 8
  %6 = icmp eq i32 %1, 0
  br i1 %6, label %38, label %7

7:                                                ; preds = %3
  %8 = add nsw i32 %5, -1
  %9 = and i32 %8, %2
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %38

11:                                               ; preds = %7
  %12 = getelementptr inbounds %struct.VP9RowMTSyncData, %struct.VP9RowMTSyncData* %0, i64 0, i32 0
  %13 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %12, align 8
  %14 = add nsw i32 %1, -1
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds %union.pthread_mutex_t, %union.pthread_mutex_t* %13, i64 %15
  %17 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %16) #7
  %18 = getelementptr inbounds %struct.VP9RowMTSyncData, %struct.VP9RowMTSyncData* %0, i64 0, i32 2
  %19 = load i32*, i32** %18, align 8
  %20 = getelementptr inbounds i32, i32* %19, i64 %15
  %21 = load i32, i32* %20, align 4
  %22 = sub i32 1, %5
  %23 = add i32 %22, %21
  %24 = icmp slt i32 %23, %2
  br i1 %24, label %25, label %36

25:                                               ; preds = %11
  %26 = getelementptr inbounds %struct.VP9RowMTSyncData, %struct.VP9RowMTSyncData* %0, i64 0, i32 1
  br label %27

27:                                               ; preds = %25, %27
  %28 = load %union.pthread_cond_t*, %union.pthread_cond_t** %26, align 8
  %29 = getelementptr inbounds %union.pthread_cond_t, %union.pthread_cond_t* %28, i64 %15
  %30 = tail call i32 @pthread_cond_wait(%union.pthread_cond_t* %29, %union.pthread_mutex_t* %16) #7
  %31 = load i32*, i32** %18, align 8
  %32 = getelementptr inbounds i32, i32* %31, i64 %15
  %33 = load i32, i32* %32, align 4
  %34 = add i32 %22, %33
  %35 = icmp slt i32 %34, %2
  br i1 %35, label %27, label %36

36:                                               ; preds = %27, %11
  %37 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %16) #7
  br label %38

38:                                               ; preds = %7, %3, %36
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_mutex_lock(%union.pthread_mutex_t*) local_unnamed_addr #4

declare i32 @pthread_cond_wait(%union.pthread_cond_t*, %union.pthread_mutex_t*) local_unnamed_addr #2

; Function Attrs: nounwind
declare i32 @pthread_mutex_unlock(%union.pthread_mutex_t*) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @vp9_row_mt_sync_read_dummy(%struct.VP9RowMTSyncData* nocapture, i32, i32) local_unnamed_addr #5 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_row_mt_sync_write(%struct.VP9RowMTSyncData* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 {
  %5 = getelementptr inbounds %struct.VP9RowMTSyncData, %struct.VP9RowMTSyncData* %0, i64 0, i32 3
  %6 = load i32, i32* %5, align 8
  %7 = add nsw i32 %3, -1
  %8 = icmp sgt i32 %7, %2
  br i1 %8, label %11, label %9

9:                                                ; preds = %4
  %10 = add nsw i32 %6, %3
  br label %15

11:                                               ; preds = %4
  %12 = srem i32 %2, %6
  %13 = add nsw i32 %6, -1
  %14 = icmp eq i32 %12, %13
  br i1 %14, label %15, label %32

15:                                               ; preds = %9, %11
  %16 = phi i32 [ %10, %9 ], [ %2, %11 ]
  %17 = getelementptr inbounds %struct.VP9RowMTSyncData, %struct.VP9RowMTSyncData* %0, i64 0, i32 0
  %18 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %17, align 8
  %19 = sext i32 %1 to i64
  %20 = getelementptr inbounds %union.pthread_mutex_t, %union.pthread_mutex_t* %18, i64 %19
  %21 = tail call i32 @pthread_mutex_lock(%union.pthread_mutex_t* %20) #7
  %22 = getelementptr inbounds %struct.VP9RowMTSyncData, %struct.VP9RowMTSyncData* %0, i64 0, i32 2
  %23 = load i32*, i32** %22, align 8
  %24 = getelementptr inbounds i32, i32* %23, i64 %19
  store i32 %16, i32* %24, align 4
  %25 = getelementptr inbounds %struct.VP9RowMTSyncData, %struct.VP9RowMTSyncData* %0, i64 0, i32 1
  %26 = load %union.pthread_cond_t*, %union.pthread_cond_t** %25, align 8
  %27 = getelementptr inbounds %union.pthread_cond_t, %union.pthread_cond_t* %26, i64 %19
  %28 = tail call i32 @pthread_cond_signal(%union.pthread_cond_t* %27) #7
  %29 = load %union.pthread_mutex_t*, %union.pthread_mutex_t** %17, align 8
  %30 = getelementptr inbounds %union.pthread_mutex_t, %union.pthread_mutex_t* %29, i64 %19
  %31 = tail call i32 @pthread_mutex_unlock(%union.pthread_mutex_t* %30) #7
  br label %32

32:                                               ; preds = %15, %11
  ret void
}

; Function Attrs: nounwind
declare i32 @pthread_cond_signal(%union.pthread_cond_t*) local_unnamed_addr #4

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden void @vp9_row_mt_sync_write_dummy(%struct.VP9RowMTSyncData* nocapture, i32, i32, i32) local_unnamed_addr #5 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_encode_tiles_row_mt(%struct.VP9_COMP*) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 85
  %3 = load i32, i32* %2, align 8
  %4 = shl i32 1, %3
  %5 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 142
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 58
  %7 = load i32, i32* %6, align 4
  %8 = icmp sgt i32 %7, 1
  %9 = select i1 %8, i32 %7, i32 1
  %10 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 142, i32 1
  %11 = load i32, i32* %10, align 4
  %12 = icmp slt i32 %11, %4
  br i1 %12, label %26, label %13

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 86
  %15 = load i32, i32* %14, align 4
  %16 = shl i32 1, %15
  %17 = getelementptr inbounds %struct.MultiThreadHandle, %struct.MultiThreadHandle* %5, i64 0, i32 0
  %18 = load i32, i32* %17, align 8
  %19 = icmp slt i32 %18, %16
  br i1 %19, label %26, label %20

20:                                               ; preds = %13
  %21 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 142, i32 2
  %22 = load i32, i32* %21, align 8
  %23 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 32
  %24 = load i32, i32* %23, align 4
  %25 = icmp slt i32 %22, %24
  br i1 %25, label %26, label %27

26:                                               ; preds = %20, %13, %1
  tail call void @vp9_row_mt_mem_dealloc(%struct.VP9_COMP* %0) #7
  tail call void @vp9_init_tile_data(%struct.VP9_COMP* %0) #7
  tail call void @vp9_row_mt_mem_alloc(%struct.VP9_COMP* %0) #7
  br label %28

27:                                               ; preds = %20
  tail call void @vp9_init_tile_data(%struct.VP9_COMP* %0) #7
  br label %28

28:                                               ; preds = %27, %26
  tail call fastcc void @create_enc_workers(%struct.VP9_COMP* %0, i32 %9)
  %29 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 135
  %30 = load i32, i32* %29, align 4
  tail call void @vp9_assign_tile_to_thread(%struct.MultiThreadHandle* %5, i32 %4, i32 %30) #7
  tail call void @vp9_prepare_job_queue(%struct.VP9_COMP* %0, i32 1) #7
  tail call void @vp9_multi_thread_tile_init(%struct.VP9_COMP* %0) #7
  %31 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 137
  %32 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3
  %33 = bitcast %struct.ThreadData* %32 to i8*
  %34 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 3, i32 1
  %35 = bitcast %struct.RD_COUNTS* %34 to i8*
  %36 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 76
  %37 = bitcast %struct.FRAME_COUNTS* %36 to i8*
  %38 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 61
  %39 = zext i32 %9 to i64
  br label %40

40:                                               ; preds = %28, %126
  %41 = phi i64 [ 0, %28 ], [ %127, %126 ]
  %42 = load %struct.EncWorkerData*, %struct.EncWorkerData** %31, align 16
  %43 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %42, i64 %41, i32 1
  %44 = load %struct.ThreadData*, %struct.ThreadData** %43, align 8
  %45 = icmp eq %struct.ThreadData* %44, %32
  br i1 %45, label %52, label %46

46:                                               ; preds = %40
  %47 = bitcast %struct.ThreadData* %44 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %47, i8* align 16 %33, i64 86592, i1 false)
  %48 = load %struct.ThreadData*, %struct.ThreadData** %43, align 8
  %49 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %48, i64 0, i32 1
  %50 = bitcast %struct.RD_COUNTS* %49 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %50, i8* align 16 %35, i64 27704, i1 false)
  %51 = load %struct.ThreadData*, %struct.ThreadData** %43, align 8
  br label %52

52:                                               ; preds = %40, %46
  %53 = phi %struct.ThreadData* [ %32, %40 ], [ %51, %46 ]
  %54 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %53, i64 0, i32 2
  %55 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %54, align 8
  %56 = icmp eq %struct.FRAME_COUNTS* %55, %36
  br i1 %56, label %59, label %57

57:                                               ; preds = %52
  %58 = bitcast %struct.FRAME_COUNTS* %55 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %58, i8* align 4 %37, i64 13224, i1 false)
  br label %59

59:                                               ; preds = %52, %57
  %60 = load i32, i32* %38, align 4
  %61 = icmp eq i32 %60, 0
  br i1 %61, label %126, label %62

62:                                               ; preds = %59
  %63 = load %struct.ThreadData*, %struct.ThreadData** %43, align 8
  %64 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %63, i64 0, i32 5
  %65 = load %struct.PC_TREE*, %struct.PC_TREE** %64, align 16
  %66 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %65, i64 0, i32 3, i32 7, i64 0, i64 0
  %67 = bitcast i32** %66 to i64*
  %68 = load i64, i64* %67, align 8
  %69 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %63, i64 0, i32 0, i32 0, i64 0, i32 2
  %70 = bitcast i32** %69 to i64*
  store i64 %68, i64* %70, align 8
  %71 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %65, i64 0, i32 3, i32 8, i64 0, i64 0
  %72 = bitcast i32** %71 to i64*
  %73 = load i64, i64* %72, align 8
  %74 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %63, i64 0, i32 0, i32 0, i64 0, i32 1
  %75 = bitcast i32** %74 to i64*
  store i64 %73, i64* %75, align 16
  %76 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %65, i64 0, i32 3, i32 9, i64 0, i64 0
  %77 = bitcast i32** %76 to i64*
  %78 = load i64, i64* %77, align 8
  %79 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %63, i64 0, i32 0, i32 1, i32 0, i64 0
  %80 = bitcast %struct.macroblockd_plane* %79 to i64*
  store i64 %78, i64* %80, align 8
  %81 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %65, i64 0, i32 3, i32 10, i64 0, i64 0
  %82 = bitcast i16** %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %63, i64 0, i32 0, i32 0, i64 0, i32 3
  %85 = bitcast i16** %84 to i64*
  store i64 %83, i64* %85, align 16
  %86 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %65, i64 0, i32 3, i32 7, i64 1, i64 0
  %87 = bitcast i32** %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %63, i64 0, i32 0, i32 0, i64 1, i32 2
  %90 = bitcast i32** %89 to i64*
  store i64 %88, i64* %90, align 8
  %91 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %65, i64 0, i32 3, i32 8, i64 1, i64 0
  %92 = bitcast i32** %91 to i64*
  %93 = load i64, i64* %92, align 8
  %94 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %63, i64 0, i32 0, i32 0, i64 1, i32 1
  %95 = bitcast i32** %94 to i64*
  store i64 %93, i64* %95, align 16
  %96 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %65, i64 0, i32 3, i32 9, i64 1, i64 0
  %97 = bitcast i32** %96 to i64*
  %98 = load i64, i64* %97, align 8
  %99 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %63, i64 0, i32 0, i32 1, i32 0, i64 1
  %100 = bitcast %struct.macroblockd_plane* %99 to i64*
  store i64 %98, i64* %100, align 8
  %101 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %65, i64 0, i32 3, i32 10, i64 1, i64 0
  %102 = bitcast i16** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %63, i64 0, i32 0, i32 0, i64 1, i32 3
  %105 = bitcast i16** %104 to i64*
  store i64 %103, i64* %105, align 16
  %106 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %65, i64 0, i32 3, i32 7, i64 2, i64 0
  %107 = bitcast i32** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %63, i64 0, i32 0, i32 0, i64 2, i32 2
  %110 = bitcast i32** %109 to i64*
  store i64 %108, i64* %110, align 8
  %111 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %65, i64 0, i32 3, i32 8, i64 2, i64 0
  %112 = bitcast i32** %111 to i64*
  %113 = load i64, i64* %112, align 8
  %114 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %63, i64 0, i32 0, i32 0, i64 2, i32 1
  %115 = bitcast i32** %114 to i64*
  store i64 %113, i64* %115, align 16
  %116 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %65, i64 0, i32 3, i32 9, i64 2, i64 0
  %117 = bitcast i32** %116 to i64*
  %118 = load i64, i64* %117, align 8
  %119 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %63, i64 0, i32 0, i32 1, i32 0, i64 2
  %120 = bitcast %struct.macroblockd_plane* %119 to i64*
  store i64 %118, i64* %120, align 8
  %121 = getelementptr inbounds %struct.PC_TREE, %struct.PC_TREE* %65, i64 0, i32 3, i32 10, i64 2, i64 0
  %122 = bitcast i16** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %63, i64 0, i32 0, i32 0, i64 2, i32 3
  %125 = bitcast i16** %124 to i64*
  store i64 %123, i64* %125, align 16
  br label %126

126:                                              ; preds = %62, %59
  %127 = add nuw nsw i64 %41, 1
  %128 = icmp ult i64 %127, %39
  br i1 %128, label %40, label %129

129:                                              ; preds = %126
  %130 = tail call %struct.VPxWorkerInterface* @vpx_get_worker_interface() #7
  %131 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 136
  %132 = and i64 %39, 1
  %133 = icmp slt i32 %7, 2
  br i1 %133, label %136, label %134

134:                                              ; preds = %129
  %135 = sub nsw i64 %39, %132
  br label %151

136:                                              ; preds = %151, %129
  %137 = phi i64 [ 0, %129 ], [ %171, %151 ]
  %138 = icmp eq i64 %132, 0
  br i1 %138, label %148, label %139

139:                                              ; preds = %136
  %140 = load %struct.VPxWorker*, %struct.VPxWorker** %131, align 8
  %141 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %140, i64 %137, i32 2
  store i32 (i8*, i8*)* @enc_row_mt_worker_hook, i32 (i8*, i8*)** %141, align 8
  %142 = load %struct.EncWorkerData*, %struct.EncWorkerData** %31, align 16
  %143 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %142, i64 %137
  %144 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %140, i64 %137, i32 3
  %145 = bitcast i8** %144 to %struct.EncWorkerData**
  store %struct.EncWorkerData* %143, %struct.EncWorkerData** %145, align 8
  %146 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %140, i64 %137, i32 4
  %147 = bitcast i8** %146 to %struct.MultiThreadHandle**
  store %struct.MultiThreadHandle* %5, %struct.MultiThreadHandle** %147, align 8
  br label %148

148:                                              ; preds = %136, %139
  %149 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %130, i64 0, i32 3
  %150 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %130, i64 0, i32 4
  br label %176

151:                                              ; preds = %151, %134
  %152 = phi i64 [ 0, %134 ], [ %171, %151 ]
  %153 = phi i64 [ %135, %134 ], [ %172, %151 ]
  %154 = load %struct.VPxWorker*, %struct.VPxWorker** %131, align 8
  %155 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %154, i64 %152, i32 2
  store i32 (i8*, i8*)* @enc_row_mt_worker_hook, i32 (i8*, i8*)** %155, align 8
  %156 = load %struct.EncWorkerData*, %struct.EncWorkerData** %31, align 16
  %157 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %156, i64 %152
  %158 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %154, i64 %152, i32 3
  %159 = bitcast i8** %158 to %struct.EncWorkerData**
  store %struct.EncWorkerData* %157, %struct.EncWorkerData** %159, align 8
  %160 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %154, i64 %152, i32 4
  %161 = bitcast i8** %160 to %struct.MultiThreadHandle**
  store %struct.MultiThreadHandle* %5, %struct.MultiThreadHandle** %161, align 8
  %162 = or i64 %152, 1
  %163 = load %struct.VPxWorker*, %struct.VPxWorker** %131, align 8
  %164 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %163, i64 %162, i32 2
  store i32 (i8*, i8*)* @enc_row_mt_worker_hook, i32 (i8*, i8*)** %164, align 8
  %165 = load %struct.EncWorkerData*, %struct.EncWorkerData** %31, align 16
  %166 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %165, i64 %162
  %167 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %163, i64 %162, i32 3
  %168 = bitcast i8** %167 to %struct.EncWorkerData**
  store %struct.EncWorkerData* %166, %struct.EncWorkerData** %168, align 8
  %169 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %163, i64 %162, i32 4
  %170 = bitcast i8** %169 to %struct.MultiThreadHandle**
  store %struct.MultiThreadHandle* %5, %struct.MultiThreadHandle** %170, align 8
  %171 = add nuw nsw i64 %152, 2
  %172 = add i64 %153, -2
  %173 = icmp eq i64 %172, 0
  br i1 %173, label %136, label %151

174:                                              ; preds = %193
  %175 = getelementptr inbounds %struct.VPxWorkerInterface, %struct.VPxWorkerInterface* %130, i64 0, i32 2
  br label %196

176:                                              ; preds = %193, %148
  %177 = phi i64 [ 0, %148 ], [ %194, %193 ]
  %178 = load %struct.VPxWorker*, %struct.VPxWorker** %131, align 8
  %179 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %178, i64 %177
  %180 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %178, i64 %177, i32 3
  %181 = bitcast i8** %180 to %struct.EncWorkerData**
  %182 = load %struct.EncWorkerData*, %struct.EncWorkerData** %181, align 8
  %183 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %182, i64 0, i32 2
  %184 = trunc i64 %177 to i32
  store i32 %184, i32* %183, align 8
  %185 = load i32, i32* %29, align 4
  %186 = add nsw i32 %185, -1
  %187 = zext i32 %186 to i64
  %188 = icmp eq i64 %177, %187
  br i1 %188, label %189, label %191

189:                                              ; preds = %176
  %190 = load void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)** %150, align 8
  tail call void %190(%struct.VPxWorker* %179) #7
  br label %193

191:                                              ; preds = %176
  %192 = load void (%struct.VPxWorker*)*, void (%struct.VPxWorker*)** %149, align 8
  tail call void %192(%struct.VPxWorker* %179) #7
  br label %193

193:                                              ; preds = %191, %189
  %194 = add nuw nsw i64 %177, 1
  %195 = icmp eq i64 %194, %39
  br i1 %195, label %174, label %176

196:                                              ; preds = %196, %174
  %197 = phi i64 [ 0, %174 ], [ %202, %196 ]
  %198 = load %struct.VPxWorker*, %struct.VPxWorker** %131, align 8
  %199 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %198, i64 %197
  %200 = load i32 (%struct.VPxWorker*)*, i32 (%struct.VPxWorker*)** %175, align 8
  %201 = tail call i32 %200(%struct.VPxWorker* %199) #7
  %202 = add nuw nsw i64 %197, 1
  %203 = icmp eq i64 %202, %39
  br i1 %203, label %204, label %196

204:                                              ; preds = %196, %220
  %205 = phi i64 [ %221, %220 ], [ 0, %196 ]
  %206 = load i32, i32* %29, align 4
  %207 = add nsw i32 %206, -1
  %208 = sext i32 %207 to i64
  %209 = icmp slt i64 %205, %208
  br i1 %209, label %210, label %220

210:                                              ; preds = %204
  %211 = load %struct.VPxWorker*, %struct.VPxWorker** %131, align 8
  %212 = getelementptr inbounds %struct.VPxWorker, %struct.VPxWorker* %211, i64 %205, i32 3
  %213 = bitcast i8** %212 to %struct.EncWorkerData**
  %214 = load %struct.EncWorkerData*, %struct.EncWorkerData** %213, align 8
  %215 = getelementptr inbounds %struct.EncWorkerData, %struct.EncWorkerData* %214, i64 0, i32 1
  %216 = load %struct.ThreadData*, %struct.ThreadData** %215, align 8
  %217 = getelementptr inbounds %struct.ThreadData, %struct.ThreadData* %216, i64 0, i32 2
  %218 = load %struct.FRAME_COUNTS*, %struct.FRAME_COUNTS** %217, align 8
  tail call void @vp9_accumulate_frame_counts(%struct.FRAME_COUNTS* %36, %struct.FRAME_COUNTS* %218, i32 0) #7
  %219 = load %struct.ThreadData*, %struct.ThreadData** %215, align 8
  tail call fastcc void @accumulate_rd_opt(%struct.ThreadData* %32, %struct.ThreadData* %219)
  br label %220

220:                                              ; preds = %210, %204
  %221 = add nuw nsw i64 %205, 1
  %222 = icmp ult i64 %221, %39
  br i1 %222, label %204, label %223

223:                                              ; preds = %220
  ret void
}

declare void @vp9_row_mt_mem_dealloc(%struct.VP9_COMP*) local_unnamed_addr #2

declare void @vp9_row_mt_mem_alloc(%struct.VP9_COMP*) local_unnamed_addr #2

declare void @vp9_assign_tile_to_thread(%struct.MultiThreadHandle*, i32, i32) local_unnamed_addr #2

declare void @vp9_prepare_job_queue(%struct.VP9_COMP*, i32) local_unnamed_addr #2

declare void @vp9_multi_thread_tile_init(%struct.VP9_COMP*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define internal i32 @enc_row_mt_worker_hook(i8*, i8*) #0 {
  %3 = alloca i32, align 4
  %4 = bitcast i8* %1 to %struct.MultiThreadHandle*
  %5 = bitcast i8* %0 to %struct.VP9_COMP**
  %6 = load %struct.VP9_COMP*, %struct.VP9_COMP** %5, align 8
  %7 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %6, i64 0, i32 8, i32 85
  %8 = load i32, i32* %7, align 8
  %9 = shl i32 1, %8
  %10 = getelementptr inbounds i8, i8* %0, i64 20
  %11 = bitcast i8* %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = bitcast i32* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %13) #7
  %14 = getelementptr inbounds i8, i8* %1, i64 3632
  %15 = bitcast i8* %14 to [80 x i32]*
  %16 = sext i32 %12 to i64
  %17 = getelementptr inbounds [80 x i32], [80 x i32]* %15, i64 0, i64 %16
  %18 = load i32, i32* %17, align 4
  store i32 %18, i32* %3, align 4
  %19 = getelementptr inbounds i8, i8* %0, i64 8
  %20 = bitcast i8* %19 to %struct.ThreadData**
  %21 = getelementptr inbounds i8, i8* %0, i64 24
  %22 = bitcast i8* %21 to i32*
  br label %23

23:                                               ; preds = %41, %2
  %24 = phi i32 [ %42, %41 ], [ %18, %2 ]
  %25 = call i8* @vp9_enc_grp_get_next_job(%struct.MultiThreadHandle* %4, i32 %24) #7
  %26 = icmp eq i8* %25, null
  br i1 %26, label %38, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds i8, i8* %25, i64 4
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 4
  %31 = getelementptr inbounds i8, i8* %25, i64 8
  %32 = bitcast i8* %31 to i32*
  %33 = load i32, i32* %32, align 4
  %34 = bitcast i8* %25 to i32*
  %35 = load i32, i32* %34, align 4
  %36 = shl nsw i32 %35, 3
  %37 = load %struct.ThreadData*, %struct.ThreadData** %20, align 8
  call void @vp9_encode_sb_row(%struct.VP9_COMP* %6, %struct.ThreadData* %37, i32 %33, i32 %30, i32 %36) #7
  br label %41

38:                                               ; preds = %23
  %39 = call i32 @vp9_get_tiles_proc_status(%struct.MultiThreadHandle* %4, i32* %22, i32* nonnull %3, i32 %9) #7
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %27, %38
  %42 = load i32, i32* %3, align 4
  br label %23

43:                                               ; preds = %38
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %13) #7
  ret i32 0
}

declare %struct.VPxWorkerInterface* @vpx_get_worker_interface() local_unnamed_addr #2

declare i8* @vpx_calloc(i64, i64) local_unnamed_addr #2

declare i8* @vpx_memalign(i64, i64) local_unnamed_addr #2

declare void @vp9_setup_pc_tree(%struct.VP9Common*, %struct.ThreadData*) local_unnamed_addr #2

declare void @vp9_get_tile_n_bits(i32, i32*, i32*) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #6

declare void @vp9_encode_tile(%struct.VP9_COMP*, %struct.ThreadData*, i32, i32) local_unnamed_addr #2

declare i8* @vp9_enc_grp_get_next_job(%struct.MultiThreadHandle*, i32) local_unnamed_addr #2

declare i32 @vp9_get_tiles_proc_status(%struct.MultiThreadHandle*, i32*, i32*, i32) local_unnamed_addr #2

declare void @vp9_encode_sb_row(%struct.VP9_COMP*, %struct.ThreadData*, i32, i32, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 0, i32 33}
