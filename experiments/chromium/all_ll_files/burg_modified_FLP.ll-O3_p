; ModuleID = '../../third_party/opus/src/silk/float/burg_modified_FLP.c'
source_filename = "../../third_party/opus/src/silk/float/burg_modified_FLP.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"
module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@.str = private unnamed_addr constant [60 x i8] c"assertion failed: subfr_length * nb_subfr <= MAX_FRAME_SIZE\00", align 1
@.str.1 = private unnamed_addr constant [58 x i8] c"../../third_party/opus/src/silk/float/burg_modified_FLP.c\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden float @silk_burg_modified_FLP(float* nocapture, float*, float, i32, i32, i32) local_unnamed_addr #0 {
  %7 = alloca [24 x double], align 16
  %8 = alloca [24 x double], align 16
  %9 = alloca [25 x double], align 16
  %10 = alloca [25 x double], align 16
  %11 = alloca [24 x double], align 16
  %12 = bitcast [24 x double]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %12) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 -1, i64 192, i1 false)
  %13 = bitcast [24 x double]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %13) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -1, i64 192, i1 false)
  %14 = bitcast [25 x double]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %14) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %14, i8 -1, i64 200, i1 false)
  %15 = bitcast [25 x double]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 200, i8* nonnull %15) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %15, i8 -1, i64 200, i1 false)
  %16 = bitcast [24 x double]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 192, i8* nonnull %16) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %16, i8 -1, i64 192, i1 false)
  %17 = mul nsw i32 %4, %3
  %18 = icmp slt i32 %17, 385
  br i1 %18, label %20, label %19

19:                                               ; preds = %6
  tail call void @celt_fatal(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.1, i64 0, i64 0), i32 55) #6
  unreachable

20:                                               ; preds = %6
  %21 = tail call double @silk_energy_FLP(float* %1, i32 %17) #5
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %12, i8 0, i64 192, i1 false)
  %22 = icmp sgt i32 %4, 0
  %23 = xor i1 %22, true
  %24 = icmp slt i32 %5, 1
  %25 = or i1 %24, %23
  br i1 %25, label %50, label %26

26:                                               ; preds = %20
  %27 = sext i32 %3 to i64
  %28 = add nuw i32 %5, 1
  %29 = zext i32 %4 to i64
  %30 = zext i32 %28 to i64
  br label %31

31:                                               ; preds = %47, %26
  %32 = phi i64 [ 0, %26 ], [ %48, %47 ]
  %33 = mul nsw i64 %32, %27
  %34 = getelementptr inbounds float, float* %1, i64 %33
  br label %35

35:                                               ; preds = %35, %31
  %36 = phi i64 [ %45, %35 ], [ 1, %31 ]
  %37 = getelementptr inbounds float, float* %34, i64 %36
  %38 = trunc i64 %36 to i32
  %39 = sub i32 %3, %38
  %40 = tail call double @silk_inner_product_FLP(float* %34, float* %37, i32 %39) #5
  %41 = add nsw i64 %36, -1
  %42 = getelementptr inbounds [24 x double], [24 x double]* %7, i64 0, i64 %41
  %43 = load double, double* %42, align 8
  %44 = fadd double %40, %43
  store double %44, double* %42, align 8
  %45 = add nuw nsw i64 %36, 1
  %46 = icmp eq i64 %45, %30
  br i1 %46, label %47, label %35

47:                                               ; preds = %35
  %48 = add nuw nsw i64 %32, 1
  %49 = icmp eq i64 %48, %29
  br i1 %49, label %50, label %31

50:                                               ; preds = %47, %20
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %13, i8* nonnull align 16 %12, i64 192, i1 false)
  %51 = fmul double %21, 0x3EE4F8B580000000
  %52 = fadd double %21, %51
  %53 = fadd double %52, 0x3E112E0BE0000000
  %54 = getelementptr inbounds [25 x double], [25 x double]* %9, i64 0, i64 0
  store double %53, double* %54, align 16
  %55 = getelementptr inbounds [25 x double], [25 x double]* %10, i64 0, i64 0
  store double %53, double* %55, align 16
  %56 = icmp sgt i32 %5, 0
  br i1 %56, label %59, label %57

57:                                               ; preds = %50
  %58 = load double, double* %54, align 16
  br label %774

59:                                               ; preds = %50
  %60 = fpext float %2 to double
  %61 = sext i32 %3 to i64
  %62 = zext i32 %5 to i64
  %63 = zext i32 %4 to i64
  %64 = zext i32 %4 to i64
  %65 = add i32 %3, -1
  %66 = getelementptr inbounds [25 x double], [25 x double]* %9, i64 0, i64 0
  br label %71

67:                                               ; preds = %606, %592
  %68 = add nuw nsw i64 %73, 1
  %69 = add nuw nsw i64 %74, 1
  %70 = icmp eq i64 %363, %62
  br i1 %70, label %715, label %71

71:                                               ; preds = %67, %59
  %72 = phi i64 [ 0, %59 ], [ %363, %67 ]
  %73 = phi i64 [ 1, %59 ], [ %68, %67 ]
  %74 = phi i64 [ 2, %59 ], [ %69, %67 ]
  %75 = phi double [ 1.000000e+00, %59 ], [ %459, %67 ]
  %76 = add nsw i64 %72, -1
  %77 = lshr i64 %76, 1
  %78 = add nuw i64 %77, 1
  %79 = add nuw i64 %72, 1
  %80 = lshr i64 %79, 1
  %81 = and i64 %80, 2147483647
  %82 = trunc i64 %72 to i32
  %83 = sub i32 %65, %82
  %84 = add nuw i64 %72, 1
  %85 = trunc i64 %72 to i32
  %86 = sub i32 %65, %85
  %87 = add nuw i64 %72, 1
  %88 = add nuw i64 %72, 1
  br i1 %22, label %89, label %296

89:                                               ; preds = %71
  %90 = trunc i64 %72 to i32
  %91 = sub nsw i32 %3, %90
  %92 = add i32 %91, -1
  %93 = sext i32 %92 to i64
  %94 = icmp eq i64 %72, 0
  br i1 %94, label %104, label %95

95:                                               ; preds = %89
  %96 = icmp ult i64 %84, 2
  %97 = trunc i64 %72 to i32
  %98 = add i32 %83, %97
  %99 = icmp slt i32 %98, %83
  %100 = icmp ugt i64 %72, 4294967295
  %101 = or i1 %99, %100
  %102 = and i64 %84, -2
  %103 = icmp eq i64 %84, %102
  br label %113

104:                                              ; preds = %89
  %105 = icmp ult i64 %87, 2
  %106 = trunc i64 %72 to i32
  %107 = add i32 %86, %106
  %108 = icmp slt i32 %107, %86
  %109 = icmp ugt i64 %72, 4294967295
  %110 = or i1 %108, %109
  %111 = and i64 %87, -2
  %112 = icmp eq i64 %87, %111
  br label %223

113:                                              ; preds = %95, %146
  %114 = phi i64 [ %147, %146 ], [ 0, %95 ]
  %115 = mul nsw i64 %114, %61
  %116 = getelementptr inbounds float, float* %1, i64 %115
  %117 = getelementptr inbounds float, float* %116, i64 %72
  %118 = load float, float* %117, align 4
  %119 = getelementptr inbounds float, float* %116, i64 %93
  %120 = load float, float* %119, align 4
  %121 = insertelement <2 x float> undef, float %120, i32 0
  %122 = insertelement <2 x float> %121, float %118, i32 1
  %123 = fpext <2 x float> %122 to <2 x double>
  br label %149

124:                                              ; preds = %185, %124
  %125 = phi i64 [ %144, %124 ], [ %186, %185 ]
  %126 = sub nsw i64 %72, %125
  %127 = getelementptr inbounds float, float* %116, i64 %126
  %128 = load float, float* %127, align 4
  %129 = fpext float %128 to double
  %130 = fmul double %187, %129
  %131 = getelementptr inbounds [25 x double], [25 x double]* %9, i64 0, i64 %125
  %132 = load double, double* %131, align 8
  %133 = fsub double %132, %130
  store double %133, double* %131, align 8
  %134 = trunc i64 %125 to i32
  %135 = add i32 %92, %134
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds float, float* %116, i64 %136
  %138 = load float, float* %137, align 4
  %139 = fpext float %138 to double
  %140 = fmul double %188, %139
  %141 = getelementptr inbounds [25 x double], [25 x double]* %10, i64 0, i64 %125
  %142 = load double, double* %141, align 8
  %143 = fsub double %142, %140
  store double %143, double* %141, align 8
  %144 = add nuw nsw i64 %125, 1
  %145 = icmp eq i64 %144, %73
  br i1 %145, label %146, label %124, !llvm.loop !2

146:                                              ; preds = %124, %222
  %147 = add nuw nsw i64 %114, 1
  %148 = icmp eq i64 %147, %63
  br i1 %148, label %296, label %113

149:                                              ; preds = %149, %113
  %150 = phi i64 [ 0, %113 ], [ %180, %149 ]
  %151 = phi i32 [ 0, %113 ], [ %181, %149 ]
  %152 = phi <2 x double> [ %123, %113 ], [ %179, %149 ]
  %153 = xor i64 %150, -1
  %154 = add nsw i64 %72, %153
  %155 = getelementptr inbounds float, float* %116, i64 %154
  %156 = load float, float* %155, align 4
  %157 = fmul float %118, %156
  %158 = fpext float %157 to double
  %159 = getelementptr inbounds [24 x double], [24 x double]* %7, i64 0, i64 %150
  %160 = load double, double* %159, align 8
  %161 = fsub double %160, %158
  store double %161, double* %159, align 8
  %162 = add nsw i32 %151, %91
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds float, float* %116, i64 %163
  %165 = load float, float* %164, align 4
  %166 = fmul float %120, %165
  %167 = fpext float %166 to double
  %168 = getelementptr inbounds [24 x double], [24 x double]* %8, i64 0, i64 %150
  %169 = load double, double* %168, align 8
  %170 = fsub double %169, %167
  store double %170, double* %168, align 8
  %171 = getelementptr inbounds [24 x double], [24 x double]* %11, i64 0, i64 %150
  %172 = load double, double* %171, align 8
  %173 = insertelement <2 x float> undef, float %165, i32 0
  %174 = insertelement <2 x float> %173, float %156, i32 1
  %175 = fpext <2 x float> %174 to <2 x double>
  %176 = insertelement <2 x double> undef, double %172, i32 0
  %177 = shufflevector <2 x double> %176, <2 x double> undef, <2 x i32> zeroinitializer
  %178 = fmul <2 x double> %177, %175
  %179 = fadd <2 x double> %152, %178
  %180 = add nuw nsw i64 %150, 1
  %181 = add nuw nsw i32 %151, 1
  %182 = icmp eq i64 %180, %72
  br i1 %182, label %183, label %149

183:                                              ; preds = %149
  %184 = or i1 %96, %101
  br i1 %184, label %185, label %189

185:                                              ; preds = %183, %222
  %186 = phi i64 [ 0, %183 ], [ %102, %222 ]
  %187 = extractelement <2 x double> %179, i32 1
  %188 = extractelement <2 x double> %179, i32 0
  br label %124

189:                                              ; preds = %183
  %190 = shufflevector <2 x double> %179, <2 x double> undef, <2 x i32> <i32 1, i32 1>
  %191 = shufflevector <2 x double> %179, <2 x double> undef, <2 x i32> zeroinitializer
  %192 = getelementptr inbounds float, float* %116, i64 -1
  br label %193

193:                                              ; preds = %193, %189
  %194 = phi i64 [ 0, %189 ], [ %220, %193 ]
  %195 = sub nsw i64 %72, %194
  %196 = getelementptr inbounds float, float* %192, i64 %195
  %197 = bitcast float* %196 to <2 x float>*
  %198 = load <2 x float>, <2 x float>* %197, align 4
  %199 = shufflevector <2 x float> %198, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %200 = fpext <2 x float> %199 to <2 x double>
  %201 = fmul <2 x double> %190, %200
  %202 = getelementptr inbounds [25 x double], [25 x double]* %9, i64 0, i64 %194
  %203 = bitcast double* %202 to <2 x double>*
  %204 = load <2 x double>, <2 x double>* %203, align 16
  %205 = fsub <2 x double> %204, %201
  %206 = bitcast double* %202 to <2 x double>*
  store <2 x double> %205, <2 x double>* %206, align 16
  %207 = trunc i64 %194 to i32
  %208 = add i32 %92, %207
  %209 = sext i32 %208 to i64
  %210 = getelementptr inbounds float, float* %116, i64 %209
  %211 = bitcast float* %210 to <2 x float>*
  %212 = load <2 x float>, <2 x float>* %211, align 4
  %213 = fpext <2 x float> %212 to <2 x double>
  %214 = fmul <2 x double> %191, %213
  %215 = getelementptr inbounds [25 x double], [25 x double]* %10, i64 0, i64 %194
  %216 = bitcast double* %215 to <2 x double>*
  %217 = load <2 x double>, <2 x double>* %216, align 16
  %218 = fsub <2 x double> %217, %214
  %219 = bitcast double* %215 to <2 x double>*
  store <2 x double> %218, <2 x double>* %219, align 16
  %220 = add i64 %194, 2
  %221 = icmp eq i64 %220, %102
  br i1 %221, label %222, label %193, !llvm.loop !4

222:                                              ; preds = %193
  br i1 %103, label %146, label %185

223:                                              ; preds = %104, %293
  %224 = phi i64 [ %294, %293 ], [ 0, %104 ]
  %225 = mul nsw i64 %224, %61
  %226 = getelementptr inbounds float, float* %1, i64 %225
  %227 = load float, float* %226, align 4
  %228 = fpext float %227 to double
  %229 = getelementptr inbounds float, float* %226, i64 %93
  %230 = load float, float* %229, align 4
  %231 = fpext float %230 to double
  %232 = or i1 %105, %110
  br i1 %232, label %269, label %233

233:                                              ; preds = %223
  %234 = insertelement <2 x double> undef, double %228, i32 0
  %235 = shufflevector <2 x double> %234, <2 x double> undef, <2 x i32> zeroinitializer
  %236 = insertelement <2 x double> undef, double %231, i32 0
  %237 = shufflevector <2 x double> %236, <2 x double> undef, <2 x i32> zeroinitializer
  %238 = getelementptr inbounds float, float* %226, i64 -1
  br label %239

239:                                              ; preds = %239, %233
  %240 = phi i64 [ 0, %233 ], [ %266, %239 ]
  %241 = sub nsw i64 0, %240
  %242 = getelementptr inbounds float, float* %238, i64 %241
  %243 = bitcast float* %242 to <2 x float>*
  %244 = load <2 x float>, <2 x float>* %243, align 4
  %245 = shufflevector <2 x float> %244, <2 x float> undef, <2 x i32> <i32 1, i32 0>
  %246 = fpext <2 x float> %245 to <2 x double>
  %247 = fmul <2 x double> %235, %246
  %248 = getelementptr inbounds [25 x double], [25 x double]* %9, i64 0, i64 %240
  %249 = bitcast double* %248 to <2 x double>*
  %250 = load <2 x double>, <2 x double>* %249, align 16
  %251 = fsub <2 x double> %250, %247
  %252 = bitcast double* %248 to <2 x double>*
  store <2 x double> %251, <2 x double>* %252, align 16
  %253 = trunc i64 %240 to i32
  %254 = add i32 %92, %253
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds float, float* %226, i64 %255
  %257 = bitcast float* %256 to <2 x float>*
  %258 = load <2 x float>, <2 x float>* %257, align 4
  %259 = fpext <2 x float> %258 to <2 x double>
  %260 = fmul <2 x double> %237, %259
  %261 = getelementptr inbounds [25 x double], [25 x double]* %10, i64 0, i64 %240
  %262 = bitcast double* %261 to <2 x double>*
  %263 = load <2 x double>, <2 x double>* %262, align 16
  %264 = fsub <2 x double> %263, %260
  %265 = bitcast double* %261 to <2 x double>*
  store <2 x double> %264, <2 x double>* %265, align 16
  %266 = add i64 %240, 2
  %267 = icmp eq i64 %266, %111
  br i1 %267, label %268, label %239, !llvm.loop !5

268:                                              ; preds = %239
  br i1 %112, label %293, label %269

269:                                              ; preds = %223, %268
  %270 = phi i64 [ 0, %223 ], [ %111, %268 ]
  br label %271

271:                                              ; preds = %269, %271
  %272 = phi i64 [ %291, %271 ], [ %270, %269 ]
  %273 = sub nsw i64 0, %272
  %274 = getelementptr inbounds float, float* %226, i64 %273
  %275 = load float, float* %274, align 4
  %276 = fpext float %275 to double
  %277 = fmul double %228, %276
  %278 = getelementptr inbounds [25 x double], [25 x double]* %9, i64 0, i64 %272
  %279 = load double, double* %278, align 8
  %280 = fsub double %279, %277
  store double %280, double* %278, align 8
  %281 = trunc i64 %272 to i32
  %282 = add i32 %92, %281
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds float, float* %226, i64 %283
  %285 = load float, float* %284, align 4
  %286 = fpext float %285 to double
  %287 = fmul double %231, %286
  %288 = getelementptr inbounds [25 x double], [25 x double]* %10, i64 0, i64 %272
  %289 = load double, double* %288, align 8
  %290 = fsub double %289, %287
  store double %290, double* %288, align 8
  %291 = add nuw nsw i64 %272, 1
  %292 = icmp eq i64 %291, %73
  br i1 %292, label %293, label %271, !llvm.loop !6

293:                                              ; preds = %271, %268
  %294 = add nuw nsw i64 %224, 1
  %295 = icmp eq i64 %294, %64
  br i1 %295, label %296, label %223

296:                                              ; preds = %146, %293, %71
  %297 = getelementptr inbounds [24 x double], [24 x double]* %7, i64 0, i64 %72
  %298 = load double, double* %297, align 8
  %299 = getelementptr inbounds [24 x double], [24 x double]* %8, i64 0, i64 %72
  %300 = load double, double* %299, align 8
  %301 = icmp eq i64 %72, 0
  br i1 %301, label %360, label %302

302:                                              ; preds = %296
  %303 = and i64 %72, 1
  %304 = icmp eq i64 %72, 1
  br i1 %304, label %340, label %305

305:                                              ; preds = %302
  %306 = sub nsw i64 %72, %303
  br label %307

307:                                              ; preds = %307, %305
  %308 = phi i64 [ 0, %305 ], [ %337, %307 ]
  %309 = phi double [ %300, %305 ], [ %336, %307 ]
  %310 = phi double [ %298, %305 ], [ %332, %307 ]
  %311 = phi i64 [ %306, %305 ], [ %338, %307 ]
  %312 = getelementptr inbounds [24 x double], [24 x double]* %11, i64 0, i64 %308
  %313 = load double, double* %312, align 16
  %314 = xor i64 %308, -1
  %315 = add nsw i64 %72, %314
  %316 = getelementptr inbounds [24 x double], [24 x double]* %8, i64 0, i64 %315
  %317 = load double, double* %316, align 8
  %318 = fmul double %313, %317
  %319 = fadd double %310, %318
  %320 = getelementptr inbounds [24 x double], [24 x double]* %7, i64 0, i64 %315
  %321 = load double, double* %320, align 8
  %322 = fmul double %313, %321
  %323 = fadd double %309, %322
  %324 = or i64 %308, 1
  %325 = getelementptr inbounds [24 x double], [24 x double]* %11, i64 0, i64 %324
  %326 = load double, double* %325, align 8
  %327 = sub nuw nsw i64 -2, %308
  %328 = add nsw i64 %72, %327
  %329 = getelementptr inbounds [24 x double], [24 x double]* %8, i64 0, i64 %328
  %330 = load double, double* %329, align 8
  %331 = fmul double %326, %330
  %332 = fadd double %319, %331
  %333 = getelementptr inbounds [24 x double], [24 x double]* %7, i64 0, i64 %328
  %334 = load double, double* %333, align 8
  %335 = fmul double %326, %334
  %336 = fadd double %323, %335
  %337 = add nuw nsw i64 %308, 2
  %338 = add i64 %311, -2
  %339 = icmp eq i64 %338, 0
  br i1 %339, label %340, label %307

340:                                              ; preds = %307, %302
  %341 = phi double [ undef, %302 ], [ %332, %307 ]
  %342 = phi double [ undef, %302 ], [ %336, %307 ]
  %343 = phi i64 [ 0, %302 ], [ %337, %307 ]
  %344 = phi double [ %300, %302 ], [ %336, %307 ]
  %345 = phi double [ %298, %302 ], [ %332, %307 ]
  %346 = icmp eq i64 %303, 0
  br i1 %346, label %360, label %347

347:                                              ; preds = %340
  %348 = getelementptr inbounds [24 x double], [24 x double]* %11, i64 0, i64 %343
  %349 = load double, double* %348, align 8
  %350 = xor i64 %343, -1
  %351 = add nsw i64 %72, %350
  %352 = getelementptr inbounds [24 x double], [24 x double]* %7, i64 0, i64 %351
  %353 = load double, double* %352, align 8
  %354 = fmul double %349, %353
  %355 = fadd double %344, %354
  %356 = getelementptr inbounds [24 x double], [24 x double]* %8, i64 0, i64 %351
  %357 = load double, double* %356, align 8
  %358 = fmul double %349, %357
  %359 = fadd double %345, %358
  br label %360

360:                                              ; preds = %347, %340, %296
  %361 = phi double [ %298, %296 ], [ %341, %340 ], [ %359, %347 ]
  %362 = phi double [ %300, %296 ], [ %342, %340 ], [ %355, %347 ]
  %363 = add nuw nsw i64 %72, 1
  %364 = getelementptr inbounds [25 x double], [25 x double]* %9, i64 0, i64 %363
  store double %361, double* %364, align 8
  %365 = getelementptr inbounds [25 x double], [25 x double]* %10, i64 0, i64 %363
  store double %362, double* %365, align 8
  %366 = load double, double* %55, align 16
  %367 = load double, double* %54, align 16
  br i1 %301, label %439, label %368

368:                                              ; preds = %360
  %369 = and i64 %72, 1
  %370 = icmp eq i64 %72, 1
  br i1 %370, label %413, label %371

371:                                              ; preds = %368
  %372 = sub nsw i64 %72, %369
  br label %373

373:                                              ; preds = %373, %371
  %374 = phi i64 [ 0, %371 ], [ %402, %373 ]
  %375 = phi double [ %366, %371 ], [ %406, %373 ]
  %376 = phi double [ %367, %371 ], [ %410, %373 ]
  %377 = phi double [ %362, %371 ], [ %401, %373 ]
  %378 = phi i64 [ %372, %371 ], [ %411, %373 ]
  %379 = getelementptr inbounds [24 x double], [24 x double]* %11, i64 0, i64 %374
  %380 = load double, double* %379, align 16
  %381 = sub nsw i64 %72, %374
  %382 = getelementptr inbounds [25 x double], [25 x double]* %10, i64 0, i64 %381
  %383 = load double, double* %382, align 8
  %384 = fmul double %380, %383
  %385 = fadd double %377, %384
  %386 = or i64 %374, 1
  %387 = getelementptr inbounds [25 x double], [25 x double]* %10, i64 0, i64 %386
  %388 = load double, double* %387, align 8
  %389 = fmul double %380, %388
  %390 = fadd double %375, %389
  %391 = getelementptr inbounds [25 x double], [25 x double]* %9, i64 0, i64 %386
  %392 = load double, double* %391, align 8
  %393 = fmul double %380, %392
  %394 = fadd double %376, %393
  %395 = getelementptr inbounds [24 x double], [24 x double]* %11, i64 0, i64 %386
  %396 = load double, double* %395, align 8
  %397 = sub nsw i64 %72, %386
  %398 = getelementptr inbounds [25 x double], [25 x double]* %10, i64 0, i64 %397
  %399 = load double, double* %398, align 8
  %400 = fmul double %396, %399
  %401 = fadd double %385, %400
  %402 = add nuw nsw i64 %374, 2
  %403 = getelementptr inbounds [25 x double], [25 x double]* %10, i64 0, i64 %402
  %404 = load double, double* %403, align 16
  %405 = fmul double %396, %404
  %406 = fadd double %390, %405
  %407 = getelementptr inbounds [25 x double], [25 x double]* %9, i64 0, i64 %402
  %408 = load double, double* %407, align 16
  %409 = fmul double %396, %408
  %410 = fadd double %394, %409
  %411 = add i64 %378, -2
  %412 = icmp eq i64 %411, 0
  br i1 %412, label %413, label %373

413:                                              ; preds = %373, %368
  %414 = phi double [ undef, %368 ], [ %401, %373 ]
  %415 = phi double [ undef, %368 ], [ %406, %373 ]
  %416 = phi double [ undef, %368 ], [ %410, %373 ]
  %417 = phi i64 [ 0, %368 ], [ %402, %373 ]
  %418 = phi double [ %366, %368 ], [ %406, %373 ]
  %419 = phi double [ %367, %368 ], [ %410, %373 ]
  %420 = phi double [ %362, %368 ], [ %401, %373 ]
  %421 = icmp eq i64 %369, 0
  br i1 %421, label %439, label %422

422:                                              ; preds = %413
  %423 = getelementptr inbounds [24 x double], [24 x double]* %11, i64 0, i64 %417
  %424 = load double, double* %423, align 8
  %425 = add nuw nsw i64 %417, 1
  %426 = getelementptr inbounds [25 x double], [25 x double]* %9, i64 0, i64 %425
  %427 = load double, double* %426, align 8
  %428 = fmul double %424, %427
  %429 = fadd double %419, %428
  %430 = getelementptr inbounds [25 x double], [25 x double]* %10, i64 0, i64 %425
  %431 = load double, double* %430, align 8
  %432 = fmul double %424, %431
  %433 = fadd double %418, %432
  %434 = sub nsw i64 %72, %417
  %435 = getelementptr inbounds [25 x double], [25 x double]* %10, i64 0, i64 %434
  %436 = load double, double* %435, align 8
  %437 = fmul double %424, %436
  %438 = fadd double %420, %437
  br label %439

439:                                              ; preds = %422, %413, %360
  %440 = phi double [ %362, %360 ], [ %414, %413 ], [ %438, %422 ]
  %441 = phi double [ %367, %360 ], [ %416, %413 ], [ %429, %422 ]
  %442 = phi double [ %366, %360 ], [ %415, %413 ], [ %433, %422 ]
  %443 = fmul double %440, -2.000000e+00
  %444 = fadd double %441, %442
  %445 = fdiv double %443, %444
  %446 = fmul double %445, %445
  %447 = fsub double 1.000000e+00, %446
  %448 = fmul double %75, %447
  %449 = fcmp ugt double %448, %60
  br i1 %449, label %457, label %450

450:                                              ; preds = %439
  %451 = fdiv double %60, %75
  %452 = fsub double 1.000000e+00, %451
  %453 = tail call double @sqrt(double %452) #5
  %454 = fcmp ogt double %440, 0.000000e+00
  %455 = fsub double -0.000000e+00, %453
  %456 = select i1 %454, double %455, double %453
  br label %457

457:                                              ; preds = %439, %450
  %458 = phi i32 [ 1, %450 ], [ 0, %439 ]
  %459 = phi double [ %60, %450 ], [ %448, %439 ]
  %460 = phi double [ %456, %450 ], [ %445, %439 ]
  %461 = trunc i64 %363 to i32
  %462 = icmp ult i32 %461, 2
  br i1 %462, label %509, label %463

463:                                              ; preds = %457
  %464 = and i64 %80, 1
  %465 = icmp eq i64 %81, 1
  br i1 %465, label %495, label %466

466:                                              ; preds = %463
  %467 = sub nsw i64 %81, %464
  br label %468

468:                                              ; preds = %468, %466
  %469 = phi i64 [ 0, %466 ], [ %492, %468 ]
  %470 = phi i64 [ %467, %466 ], [ %493, %468 ]
  %471 = getelementptr inbounds [24 x double], [24 x double]* %11, i64 0, i64 %469
  %472 = load double, double* %471, align 16
  %473 = xor i64 %469, -1
  %474 = add nsw i64 %72, %473
  %475 = getelementptr inbounds [24 x double], [24 x double]* %11, i64 0, i64 %474
  %476 = load double, double* %475, align 8
  %477 = fmul double %460, %476
  %478 = fadd double %472, %477
  store double %478, double* %471, align 16
  %479 = fmul double %460, %472
  %480 = fadd double %476, %479
  store double %480, double* %475, align 8
  %481 = or i64 %469, 1
  %482 = getelementptr inbounds [24 x double], [24 x double]* %11, i64 0, i64 %481
  %483 = load double, double* %482, align 8
  %484 = sub nuw nsw i64 -2, %469
  %485 = add nsw i64 %72, %484
  %486 = getelementptr inbounds [24 x double], [24 x double]* %11, i64 0, i64 %485
  %487 = load double, double* %486, align 8
  %488 = fmul double %460, %487
  %489 = fadd double %483, %488
  store double %489, double* %482, align 8
  %490 = fmul double %460, %483
  %491 = fadd double %487, %490
  store double %491, double* %486, align 8
  %492 = add nuw nsw i64 %469, 2
  %493 = add i64 %470, -2
  %494 = icmp eq i64 %493, 0
  br i1 %494, label %495, label %468

495:                                              ; preds = %468, %463
  %496 = phi i64 [ 0, %463 ], [ %492, %468 ]
  %497 = icmp eq i64 %464, 0
  br i1 %497, label %509, label %498

498:                                              ; preds = %495
  %499 = getelementptr inbounds [24 x double], [24 x double]* %11, i64 0, i64 %496
  %500 = load double, double* %499, align 8
  %501 = xor i64 %496, -1
  %502 = add nsw i64 %72, %501
  %503 = getelementptr inbounds [24 x double], [24 x double]* %11, i64 0, i64 %502
  %504 = load double, double* %503, align 8
  %505 = fmul double %460, %504
  %506 = fadd double %500, %505
  store double %506, double* %499, align 8
  %507 = fmul double %460, %500
  %508 = fadd double %504, %507
  store double %508, double* %503, align 8
  br label %509

509:                                              ; preds = %498, %495, %457
  %510 = getelementptr inbounds [24 x double], [24 x double]* %11, i64 0, i64 %72
  store double %460, double* %510, align 8
  %511 = icmp eq i32 %458, 0
  br i1 %511, label %512, label %594

512:                                              ; preds = %509
  %513 = getelementptr inbounds [25 x double], [25 x double]* %10, i64 0, i64 %363
  %514 = load double, double* %513, align 8
  %515 = fmul double %460, %514
  %516 = fadd double %367, %515
  store double %516, double* %66, align 16
  %517 = fmul double %460, %367
  %518 = fadd double %514, %517
  store double %518, double* %513, align 8
  %519 = icmp ult i64 %88, 2
  br i1 %519, label %520, label %522

520:                                              ; preds = %592, %512
  %521 = phi i64 [ 1, %512 ], [ %524, %592 ]
  br label %606

522:                                              ; preds = %512
  %523 = and i64 %88, -2
  %524 = or i64 %88, 1
  %525 = insertelement <2 x double> undef, double %460, i32 0
  %526 = shufflevector <2 x double> %525, <2 x double> undef, <2 x i32> zeroinitializer
  %527 = and i64 %78, 1
  %528 = icmp eq i64 %77, 0
  br i1 %528, label %571, label %529

529:                                              ; preds = %522
  %530 = sub nuw i64 %78, %527
  br label %531

531:                                              ; preds = %531, %529
  %532 = phi i64 [ 0, %529 ], [ %568, %531 ]
  %533 = phi i64 [ %530, %529 ], [ %569, %531 ]
  %534 = or i64 %532, 1
  %535 = getelementptr inbounds [25 x double], [25 x double]* %9, i64 0, i64 %534
  %536 = bitcast double* %535 to <2 x double>*
  %537 = load <2 x double>, <2 x double>* %536, align 8
  %538 = sub nsw i64 %363, %534
  %539 = getelementptr inbounds [25 x double], [25 x double]* %10, i64 0, i64 %538
  %540 = getelementptr inbounds double, double* %539, i64 -1
  %541 = bitcast double* %540 to <2 x double>*
  %542 = load <2 x double>, <2 x double>* %541, align 8
  %543 = shufflevector <2 x double> %542, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %544 = fmul <2 x double> %526, %543
  %545 = fadd <2 x double> %537, %544
  %546 = bitcast double* %535 to <2 x double>*
  store <2 x double> %545, <2 x double>* %546, align 8
  %547 = fmul <2 x double> %526, %537
  %548 = fadd <2 x double> %543, %547
  %549 = shufflevector <2 x double> %548, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %550 = bitcast double* %540 to <2 x double>*
  store <2 x double> %549, <2 x double>* %550, align 8
  %551 = or i64 %532, 3
  %552 = getelementptr inbounds [25 x double], [25 x double]* %9, i64 0, i64 %551
  %553 = bitcast double* %552 to <2 x double>*
  %554 = load <2 x double>, <2 x double>* %553, align 8
  %555 = sub nsw i64 %363, %551
  %556 = getelementptr inbounds [25 x double], [25 x double]* %10, i64 0, i64 %555
  %557 = getelementptr inbounds double, double* %556, i64 -1
  %558 = bitcast double* %557 to <2 x double>*
  %559 = load <2 x double>, <2 x double>* %558, align 8
  %560 = shufflevector <2 x double> %559, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %561 = fmul <2 x double> %526, %560
  %562 = fadd <2 x double> %554, %561
  %563 = bitcast double* %552 to <2 x double>*
  store <2 x double> %562, <2 x double>* %563, align 8
  %564 = fmul <2 x double> %526, %554
  %565 = fadd <2 x double> %560, %564
  %566 = shufflevector <2 x double> %565, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %567 = bitcast double* %557 to <2 x double>*
  store <2 x double> %566, <2 x double>* %567, align 8
  %568 = add i64 %532, 4
  %569 = add i64 %533, -2
  %570 = icmp eq i64 %569, 0
  br i1 %570, label %571, label %531, !llvm.loop !7

571:                                              ; preds = %531, %522
  %572 = phi i64 [ 0, %522 ], [ %568, %531 ]
  %573 = icmp eq i64 %527, 0
  br i1 %573, label %592, label %574

574:                                              ; preds = %571
  %575 = or i64 %572, 1
  %576 = getelementptr inbounds [25 x double], [25 x double]* %9, i64 0, i64 %575
  %577 = bitcast double* %576 to <2 x double>*
  %578 = load <2 x double>, <2 x double>* %577, align 8
  %579 = sub nsw i64 %363, %575
  %580 = getelementptr inbounds [25 x double], [25 x double]* %10, i64 0, i64 %579
  %581 = getelementptr inbounds double, double* %580, i64 -1
  %582 = bitcast double* %581 to <2 x double>*
  %583 = load <2 x double>, <2 x double>* %582, align 8
  %584 = shufflevector <2 x double> %583, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %585 = fmul <2 x double> %526, %584
  %586 = fadd <2 x double> %578, %585
  %587 = bitcast double* %576 to <2 x double>*
  store <2 x double> %586, <2 x double>* %587, align 8
  %588 = fmul <2 x double> %526, %578
  %589 = fadd <2 x double> %584, %588
  %590 = shufflevector <2 x double> %589, <2 x double> undef, <2 x i32> <i32 1, i32 0>
  %591 = bitcast double* %581 to <2 x double>*
  store <2 x double> %590, <2 x double>* %591, align 8
  br label %592

592:                                              ; preds = %571, %574
  %593 = icmp eq i64 %88, %523
  br i1 %593, label %67, label %520

594:                                              ; preds = %509
  %595 = trunc i64 %363 to i32
  %596 = icmp slt i32 %595, %5
  br i1 %596, label %597, label %620

597:                                              ; preds = %594
  %598 = and i64 %363, 4294967295
  %599 = getelementptr [24 x double], [24 x double]* %11, i64 0, i64 %598
  %600 = bitcast double* %599 to i8*
  %601 = xor i32 %595, -1
  %602 = add i32 %601, %5
  %603 = zext i32 %602 to i64
  %604 = shl nuw nsw i64 %603, 3
  %605 = add nuw nsw i64 %604, 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %600, i8 0, i64 %605, i1 false)
  br label %620

606:                                              ; preds = %520, %606
  %607 = phi i64 [ %618, %606 ], [ %521, %520 ]
  %608 = getelementptr inbounds [25 x double], [25 x double]* %9, i64 0, i64 %607
  %609 = load double, double* %608, align 8
  %610 = getelementptr inbounds [25 x double], [25 x double]* %9, i64 0, i64 %607
  %611 = sub nsw i64 %363, %607
  %612 = getelementptr inbounds [25 x double], [25 x double]* %10, i64 0, i64 %611
  %613 = load double, double* %612, align 8
  %614 = fmul double %460, %613
  %615 = fadd double %609, %614
  store double %615, double* %610, align 8
  %616 = fmul double %460, %609
  %617 = fadd double %613, %616
  store double %617, double* %612, align 8
  %618 = add nuw nsw i64 %607, 1
  %619 = icmp eq i64 %618, %74
  br i1 %619, label %67, label %606, !llvm.loop !8

620:                                              ; preds = %594, %597
  br i1 %56, label %621, label %690

621:                                              ; preds = %620
  %622 = zext i32 %5 to i64
  %623 = icmp ult i32 %5, 4
  br i1 %623, label %624, label %626

624:                                              ; preds = %688, %621
  %625 = phi i64 [ 0, %621 ], [ %627, %688 ]
  br label %694

626:                                              ; preds = %621
  %627 = and i64 %62, 4294967292
  %628 = add nsw i64 %627, -4
  %629 = lshr exact i64 %628, 2
  %630 = add nuw nsw i64 %629, 1
  %631 = and i64 %630, 1
  %632 = icmp eq i64 %628, 0
  br i1 %632, label %670, label %633

633:                                              ; preds = %626
  %634 = sub nuw nsw i64 %630, %631
  br label %635

635:                                              ; preds = %635, %633
  %636 = phi i64 [ 0, %633 ], [ %667, %635 ]
  %637 = phi i64 [ %634, %633 ], [ %668, %635 ]
  %638 = getelementptr inbounds [24 x double], [24 x double]* %11, i64 0, i64 %636
  %639 = bitcast double* %638 to <2 x double>*
  %640 = load <2 x double>, <2 x double>* %639, align 16
  %641 = getelementptr inbounds double, double* %638, i64 2
  %642 = bitcast double* %641 to <2 x double>*
  %643 = load <2 x double>, <2 x double>* %642, align 16
  %644 = fptrunc <2 x double> %640 to <2 x float>
  %645 = fptrunc <2 x double> %643 to <2 x float>
  %646 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %644
  %647 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %645
  %648 = getelementptr inbounds float, float* %0, i64 %636
  %649 = bitcast float* %648 to <2 x float>*
  store <2 x float> %646, <2 x float>* %649, align 4
  %650 = getelementptr inbounds float, float* %648, i64 2
  %651 = bitcast float* %650 to <2 x float>*
  store <2 x float> %647, <2 x float>* %651, align 4
  %652 = or i64 %636, 4
  %653 = getelementptr inbounds [24 x double], [24 x double]* %11, i64 0, i64 %652
  %654 = bitcast double* %653 to <2 x double>*
  %655 = load <2 x double>, <2 x double>* %654, align 16
  %656 = getelementptr inbounds double, double* %653, i64 2
  %657 = bitcast double* %656 to <2 x double>*
  %658 = load <2 x double>, <2 x double>* %657, align 16
  %659 = fptrunc <2 x double> %655 to <2 x float>
  %660 = fptrunc <2 x double> %658 to <2 x float>
  %661 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %659
  %662 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %660
  %663 = getelementptr inbounds float, float* %0, i64 %652
  %664 = bitcast float* %663 to <2 x float>*
  store <2 x float> %661, <2 x float>* %664, align 4
  %665 = getelementptr inbounds float, float* %663, i64 2
  %666 = bitcast float* %665 to <2 x float>*
  store <2 x float> %662, <2 x float>* %666, align 4
  %667 = add i64 %636, 8
  %668 = add i64 %637, -2
  %669 = icmp eq i64 %668, 0
  br i1 %669, label %670, label %635, !llvm.loop !10

670:                                              ; preds = %635, %626
  %671 = phi i64 [ 0, %626 ], [ %667, %635 ]
  %672 = icmp eq i64 %631, 0
  br i1 %672, label %688, label %673

673:                                              ; preds = %670
  %674 = getelementptr inbounds [24 x double], [24 x double]* %11, i64 0, i64 %671
  %675 = bitcast double* %674 to <2 x double>*
  %676 = load <2 x double>, <2 x double>* %675, align 16
  %677 = getelementptr inbounds double, double* %674, i64 2
  %678 = bitcast double* %677 to <2 x double>*
  %679 = load <2 x double>, <2 x double>* %678, align 16
  %680 = fptrunc <2 x double> %676 to <2 x float>
  %681 = fptrunc <2 x double> %679 to <2 x float>
  %682 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %680
  %683 = fsub <2 x float> <float -0.000000e+00, float -0.000000e+00>, %681
  %684 = getelementptr inbounds float, float* %0, i64 %671
  %685 = bitcast float* %684 to <2 x float>*
  store <2 x float> %682, <2 x float>* %685, align 4
  %686 = getelementptr inbounds float, float* %684, i64 2
  %687 = bitcast float* %686 to <2 x float>*
  store <2 x float> %683, <2 x float>* %687, align 4
  br label %688

688:                                              ; preds = %670, %673
  %689 = icmp eq i64 %627, %62
  br i1 %689, label %690, label %624

690:                                              ; preds = %694, %688, %620
  br i1 %22, label %691, label %712

691:                                              ; preds = %690
  %692 = sext i32 %3 to i64
  %693 = zext i32 %4 to i64
  br label %703

694:                                              ; preds = %624, %694
  %695 = phi i64 [ %701, %694 ], [ %625, %624 ]
  %696 = getelementptr inbounds [24 x double], [24 x double]* %11, i64 0, i64 %695
  %697 = load double, double* %696, align 8
  %698 = fptrunc double %697 to float
  %699 = fsub float -0.000000e+00, %698
  %700 = getelementptr inbounds float, float* %0, i64 %695
  store float %699, float* %700, align 4
  %701 = add nuw nsw i64 %695, 1
  %702 = icmp eq i64 %701, %622
  br i1 %702, label %690, label %694, !llvm.loop !11

703:                                              ; preds = %703, %691
  %704 = phi i64 [ 0, %691 ], [ %710, %703 ]
  %705 = phi double [ %21, %691 ], [ %709, %703 ]
  %706 = mul nsw i64 %704, %692
  %707 = getelementptr inbounds float, float* %1, i64 %706
  %708 = tail call double @silk_energy_FLP(float* %707, i32 %5) #5
  %709 = fsub double %705, %708
  %710 = add nuw nsw i64 %704, 1
  %711 = icmp eq i64 %710, %693
  br i1 %711, label %712, label %703

712:                                              ; preds = %703, %690
  %713 = phi double [ %21, %690 ], [ %709, %703 ]
  %714 = fmul double %459, %713
  br label %779

715:                                              ; preds = %67
  %716 = load double, double* %54, align 16
  br i1 %56, label %717, label %774

717:                                              ; preds = %715
  %718 = zext i32 %5 to i64
  %719 = and i64 %718, 1
  %720 = icmp eq i32 %5, 1
  br i1 %720, label %754, label %721

721:                                              ; preds = %717
  %722 = sub nsw i64 %718, %719
  br label %723

723:                                              ; preds = %723, %721
  %724 = phi i64 [ 0, %721 ], [ %742, %723 ]
  %725 = phi double [ 1.000000e+00, %721 ], [ %748, %723 ]
  %726 = phi double [ %716, %721 ], [ %746, %723 ]
  %727 = phi i64 [ %722, %721 ], [ %752, %723 ]
  %728 = getelementptr inbounds [24 x double], [24 x double]* %11, i64 0, i64 %724
  %729 = load double, double* %728, align 16
  %730 = or i64 %724, 1
  %731 = getelementptr inbounds [25 x double], [25 x double]* %9, i64 0, i64 %730
  %732 = load double, double* %731, align 8
  %733 = fmul double %729, %732
  %734 = fadd double %726, %733
  %735 = fmul double %729, %729
  %736 = fadd double %725, %735
  %737 = fptrunc double %729 to float
  %738 = fsub float -0.000000e+00, %737
  %739 = getelementptr inbounds float, float* %0, i64 %724
  store float %738, float* %739, align 4
  %740 = getelementptr inbounds [24 x double], [24 x double]* %11, i64 0, i64 %730
  %741 = load double, double* %740, align 8
  %742 = add nuw nsw i64 %724, 2
  %743 = getelementptr inbounds [25 x double], [25 x double]* %9, i64 0, i64 %742
  %744 = load double, double* %743, align 16
  %745 = fmul double %741, %744
  %746 = fadd double %734, %745
  %747 = fmul double %741, %741
  %748 = fadd double %736, %747
  %749 = fptrunc double %741 to float
  %750 = fsub float -0.000000e+00, %749
  %751 = getelementptr inbounds float, float* %0, i64 %730
  store float %750, float* %751, align 4
  %752 = add i64 %727, -2
  %753 = icmp eq i64 %752, 0
  br i1 %753, label %754, label %723

754:                                              ; preds = %723, %717
  %755 = phi double [ undef, %717 ], [ %746, %723 ]
  %756 = phi double [ undef, %717 ], [ %748, %723 ]
  %757 = phi i64 [ 0, %717 ], [ %742, %723 ]
  %758 = phi double [ 1.000000e+00, %717 ], [ %748, %723 ]
  %759 = phi double [ %716, %717 ], [ %746, %723 ]
  %760 = icmp eq i64 %719, 0
  br i1 %760, label %774, label %761

761:                                              ; preds = %754
  %762 = getelementptr inbounds [24 x double], [24 x double]* %11, i64 0, i64 %757
  %763 = load double, double* %762, align 8
  %764 = add nuw nsw i64 %757, 1
  %765 = getelementptr inbounds [25 x double], [25 x double]* %9, i64 0, i64 %764
  %766 = load double, double* %765, align 8
  %767 = fptrunc double %763 to float
  %768 = fsub float -0.000000e+00, %767
  %769 = getelementptr inbounds float, float* %0, i64 %757
  store float %768, float* %769, align 4
  %770 = fmul double %763, %763
  %771 = fadd double %758, %770
  %772 = fmul double %763, %766
  %773 = fadd double %759, %772
  br label %774

774:                                              ; preds = %761, %754, %57, %715
  %775 = phi double [ %716, %715 ], [ %58, %57 ], [ %755, %754 ], [ %773, %761 ]
  %776 = phi double [ 1.000000e+00, %715 ], [ 1.000000e+00, %57 ], [ %756, %754 ], [ %771, %761 ]
  %777 = fmul double %51, %776
  %778 = fsub double %775, %777
  br label %779

779:                                              ; preds = %774, %712
  %780 = phi double [ %714, %712 ], [ %778, %774 ]
  %781 = fptrunc double %780 to float
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %16) #5
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %15) #5
  call void @llvm.lifetime.end.p0i8(i64 200, i8* nonnull %14) #5
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %13) #5
  call void @llvm.lifetime.end.p0i8(i64 192, i8* nonnull %12) #5
  ret float %781
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #2

declare double @silk_energy_FLP(float*, i32) local_unnamed_addr #3

declare double @silk_inner_product_FLP(float*, float*, i32) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !9, !3}
!9 = !{!"llvm.loop.unroll.runtime.disable"}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !9, !3}
