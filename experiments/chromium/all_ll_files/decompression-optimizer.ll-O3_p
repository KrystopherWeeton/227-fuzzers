; ModuleID = '../../v8/src/compiler/decompression-optimizer.cc'
source_filename = "../../v8/src/compiler/decompression-optimizer.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::compiler::DecompressionOptimizer" = type { %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::MachineOperatorBuilder"*, %"class.v8::internal::compiler::NodeMarker", %"class.v8::internal::ZoneDeque", %"class.v8::internal::ZoneVector.21" }
%"class.v8::internal::compiler::NodeMarker" = type { %"class.v8::internal::compiler::NodeMarkerBase" }
%"class.v8::internal::compiler::NodeMarkerBase" = type { i32, i32 }
%"class.v8::internal::ZoneDeque" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.16" }
%"struct.std::__1::__split_buffer" = type { %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"***, %"class.std::__1::__compressed_pair.12" }
%"class.v8::internal::compiler::Node" = type { %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Type", i32, i32, %"struct.v8::internal::compiler::Node::Use"* }
%"class.v8::internal::compiler::Operator" = type <{ i32 (...)**, i8*, i16, %"class.v8::base::Flags", i8, i32, i32, i32, i32, i8, [3 x i8], i32, [4 x i8] }>
%"class.v8::base::Flags" = type { i8 }
%"class.v8::internal::compiler::Type" = type { i64 }
%"struct.v8::internal::compiler::Node::Use" = type { %"struct.v8::internal::compiler::Node::Use"*, %"struct.v8::internal::compiler::Node::Use"*, i32 }
%"class.std::__1::__compressed_pair.12" = type { %"struct.std::__1::__compressed_pair_elem.13", %"struct.std::__1::__compressed_pair_elem.14" }
%"struct.std::__1::__compressed_pair_elem.13" = type { %"class.v8::internal::compiler::Node"*** }
%"struct.std::__1::__compressed_pair_elem.14" = type { %"class.v8::internal::RecyclingZoneAllocator" }
%"class.v8::internal::RecyclingZoneAllocator" = type { %"class.v8::internal::ZoneAllocator.15", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* }
%"class.v8::internal::ZoneAllocator.15" = type { %"class.v8::internal::Zone"* }
%"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock" = type { %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, i64 }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.17", %"struct.std::__1::__compressed_pair_elem.18" }
%"struct.std::__1::__compressed_pair_elem.17" = type { i64 }
%"struct.std::__1::__compressed_pair_elem.18" = type { %"class.v8::internal::RecyclingZoneAllocator.19" }
%"class.v8::internal::RecyclingZoneAllocator.19" = type { %"class.v8::internal::ZoneAllocator.20", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* }
%"class.v8::internal::ZoneAllocator.20" = type { %"class.v8::internal::Zone"* }
%"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock" = type { %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"*, i64 }
%"class.v8::internal::ZoneVector.21" = type { %"class.std::__1::vector.22" }
%"class.std::__1::vector.22" = type { %"class.std::__1::__vector_base.23" }
%"class.std::__1::__vector_base.23" = type { %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"**, %"class.std::__1::__compressed_pair.24" }
%"class.std::__1::__compressed_pair.24" = type { %"struct.std::__1::__compressed_pair_elem.25", %"struct.std::__1::__compressed_pair_elem.26" }
%"struct.std::__1::__compressed_pair_elem.25" = type { %"class.v8::internal::compiler::Node"** }
%"struct.std::__1::__compressed_pair_elem.26" = type { %"class.v8::internal::ZoneAllocator.20" }
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic", %"struct.std::__1::atomic", %"class.std::__1::unique_ptr", %"class.std::__1::unique_ptr.2" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i64 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type opaque
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::compiler::Graph" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"*, i32, i32, %"class.v8::internal::ZoneVector" }
%"class.v8::internal::ZoneVector" = type { %"class.std::__1::vector" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.v8::internal::compiler::GraphDecorator"**, %"class.v8::internal::compiler::GraphDecorator"**, %"class.std::__1::__compressed_pair.8" }
%"class.v8::internal::compiler::GraphDecorator" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9", %"struct.std::__1::__compressed_pair_elem.10" }
%"struct.std::__1::__compressed_pair_elem.9" = type { %"class.v8::internal::compiler::GraphDecorator"** }
%"struct.std::__1::__compressed_pair_elem.10" = type { %"class.v8::internal::ZoneAllocator" }
%"class.v8::internal::ZoneAllocator" = type { %"class.v8::internal::Zone"* }
%"class.v8::internal::compiler::CommonOperatorBuilder" = type { %"struct.v8::internal::compiler::CommonOperatorGlobalCache"*, %"class.v8::internal::Zone"* }
%"struct.v8::internal::compiler::CommonOperatorGlobalCache" = type opaque
%"class.v8::internal::compiler::MachineOperatorBuilder" = type <{ %"class.v8::internal::Zone"*, %"struct.v8::internal::compiler::MachineOperatorGlobalCache"*, i8, [3 x i8], %"class.v8::base::Flags.11", %"class.v8::internal::compiler::MachineOperatorBuilder::AlignmentRequirements", [4 x i8] }>
%"struct.v8::internal::compiler::MachineOperatorGlobalCache" = type opaque
%"class.v8::base::Flags.11" = type { i32 }
%"class.v8::internal::compiler::MachineOperatorBuilder::AlignmentRequirements" = type { i32, %"class.v8::base::EnumSet", %"class.v8::base::EnumSet" }
%"class.v8::base::EnumSet" = type { i32 }
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.v8::internal::compiler::StoreRepresentation" = type { i8, i8 }
%"struct.v8::internal::compiler::Node::OutOfLineInputs" = type { %"class.v8::internal::compiler::Node"*, i32, i32 }
%"class.v8::internal::Handle" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"struct.std::__1::__split_buffer.27" = type { %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"***, %"class.std::__1::__compressed_pair.28" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.13", %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"class.v8::internal::RecyclingZoneAllocator"* }

$_ZNSt3__15dequeIPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS5_EEE19__add_back_capacityEv = comdat any

$_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS6_EEE9push_backERKS6_ = comdat any

$_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS6_EEE9push_backEOS6_ = comdat any

$_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS6_EEE10push_frontEOS6_ = comdat any

$_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeERNS2_22RecyclingZoneAllocatorIS6_EEE9push_backEOS6_ = comdat any

$_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeERNS2_22RecyclingZoneAllocatorIS6_EEE10push_frontERKS6_ = comdat any

@.str = private unnamed_addr constant [17 x i8] c"unreachable code\00", align 1

@_ZN2v88internal8compiler22DecompressionOptimizerC1EPNS0_4ZoneEPNS1_5GraphEPNS1_21CommonOperatorBuilderEPNS1_22MachineOperatorBuilderE = hidden unnamed_addr alias void (%"class.v8::internal::compiler::DecompressionOptimizer"*, %"class.v8::internal::Zone"*, %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::MachineOperatorBuilder"*), void (%"class.v8::internal::compiler::DecompressionOptimizer"*, %"class.v8::internal::Zone"*, %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::MachineOperatorBuilder"*)* @_ZN2v88internal8compiler22DecompressionOptimizerC2EPNS0_4ZoneEPNS1_5GraphEPNS1_21CommonOperatorBuilderEPNS1_22MachineOperatorBuilderE

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler22DecompressionOptimizerC2EPNS0_4ZoneEPNS1_5GraphEPNS1_21CommonOperatorBuilderEPNS1_22MachineOperatorBuilderE(%"class.v8::internal::compiler::DecompressionOptimizer"*, %"class.v8::internal::Zone"*, %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::MachineOperatorBuilder"*) unnamed_addr #0 align 2 {
  %6 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 0
  store %"class.v8::internal::compiler::Graph"* %2, %"class.v8::internal::compiler::Graph"** %6, align 8
  %7 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 1
  store %"class.v8::internal::compiler::CommonOperatorBuilder"* %3, %"class.v8::internal::compiler::CommonOperatorBuilder"** %7, align 8
  %8 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 2
  store %"class.v8::internal::compiler::MachineOperatorBuilder"* %4, %"class.v8::internal::compiler::MachineOperatorBuilder"** %8, align 8
  %9 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 3, i32 0
  tail call void @_ZN2v88internal8compiler14NodeMarkerBaseC2EPNS1_5GraphEj(%"class.v8::internal::compiler::NodeMarkerBase"* %9, %"class.v8::internal::compiler::Graph"* %2, i32 3) #6
  %10 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4
  %11 = ptrtoint %"class.v8::internal::Zone"* %1 to i64
  %12 = bitcast %"class.v8::internal::ZoneDeque"* %10 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 32, i1 false) #6
  %13 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 3, i32 1
  %14 = bitcast %"struct.std::__1::__compressed_pair_elem.14"* %13 to i64*
  store i64 %11, i64* %14, align 8
  %15 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 3, i32 1, i32 0, i32 1
  %16 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %15 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %16, i8 0, i64 24, i1 false) #6
  %17 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 1
  %18 = bitcast %"struct.std::__1::__compressed_pair_elem.18"* %17 to i64*
  store i64 %11, i64* %18, align 8
  %19 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 1, i32 0, i32 1
  %20 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1
  %21 = bitcast %"struct.std::__1::__compressed_pair_elem.26"* %20 to i64*
  %22 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %19 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %22, i8 0, i64 32, i1 false)
  store i64 %11, i64* %21, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler22DecompressionOptimizer9MarkNodesEv(%"class.v8::internal::compiler::DecompressionOptimizer"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 0
  %3 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::compiler::Graph", %"class.v8::internal::compiler::Graph"* %3, i64 0, i32 2
  %5 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4, align 8
  tail call void @_ZN2v88internal8compiler22DecompressionOptimizer27MaybeMarkAndQueueForRevisitEPNS1_4NodeENS2_5StateE(%"class.v8::internal::compiler::DecompressionOptimizer"* %0, %"class.v8::internal::compiler::Node"* %5, i8 zeroext 1)
  %6 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %51, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 1, i32 0, i32 1
  %13 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %12 to i64*
  %14 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %12 to %"class.v8::internal::compiler::Node"***
  br label %15

15:                                               ; preds = %9, %48
  %16 = phi i64 [ %7, %9 ], [ %49, %48 ]
  %17 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %10, align 8
  %18 = load i64, i64* %11, align 8
  %19 = lshr i64 %18, 9
  %20 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %17, i64 %19
  %21 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %20, align 8
  %22 = and i64 %18, 511
  %23 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %21, i64 %22
  %24 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %23, align 8
  %25 = add i64 %16, -1
  store i64 %25, i64* %6, align 8
  %26 = add i64 %18, 1
  store i64 %26, i64* %11, align 8
  %27 = icmp ult i64 %26, 1024
  br i1 %27, label %48, label %28

28:                                               ; preds = %15
  %29 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %17, align 8
  %30 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %12, align 8
  %31 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %30, null
  br i1 %31, label %36, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %30, i64 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = icmp ugt i64 %34, 512
  br i1 %35, label %43, label %36

36:                                               ; preds = %32, %28
  %37 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %29, i64 1
  %38 = bitcast %"class.v8::internal::compiler::Node"** %37 to i64*
  store i64 512, i64* %38, align 8
  %39 = load i64, i64* %13, align 8
  %40 = bitcast %"class.v8::internal::compiler::Node"** %29 to i64*
  store i64 %39, i64* %40, align 8
  store %"class.v8::internal::compiler::Node"** %29, %"class.v8::internal::compiler::Node"*** %14, align 8
  %41 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %10, align 8
  %42 = load i64, i64* %11, align 8
  br label %43

43:                                               ; preds = %36, %32
  %44 = phi i64 [ %26, %32 ], [ %42, %36 ]
  %45 = phi %"class.v8::internal::compiler::Node"*** [ %17, %32 ], [ %41, %36 ]
  %46 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %45, i64 1
  store %"class.v8::internal::compiler::Node"*** %46, %"class.v8::internal::compiler::Node"**** %10, align 8
  %47 = add i64 %44, -512
  store i64 %47, i64* %11, align 8
  br label %48

48:                                               ; preds = %15, %43
  tail call void @_ZN2v88internal8compiler22DecompressionOptimizer14MarkNodeInputsEPNS1_4NodeE(%"class.v8::internal::compiler::DecompressionOptimizer"* %0, %"class.v8::internal::compiler::Node"* %24)
  %49 = load i64, i64* %6, align 8
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %15

51:                                               ; preds = %48, %1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler22DecompressionOptimizer27MaybeMarkAndQueueForRevisitEPNS1_4NodeENS2_5StateE(%"class.v8::internal::compiler::DecompressionOptimizer"*, %"class.v8::internal::compiler::Node"*, i8 zeroext) local_unnamed_addr #0 align 2 {
  %4 = ptrtoint %"class.v8::internal::compiler::Node"* %1 to i64
  %5 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 3, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = tail call i32 @llvm.usub.sat.i32(i32 %6, i32 %8) #6
  %10 = trunc i32 %9 to i8
  %11 = icmp eq i8 %10, 0
  br i1 %11, label %16, label %12

12:                                               ; preds = %3
  %13 = icmp eq i8 %10, 1
  %14 = icmp eq i8 %2, 2
  %15 = and i1 %14, %13
  br i1 %15, label %16, label %318

16:                                               ; preds = %12, %3
  %17 = zext i8 %2 to i32
  %18 = add i32 %8, %17
  store i32 %18, i32* %5, align 8
  %19 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 2
  %20 = bitcast %"class.v8::internal::compiler::Node"**** %19 to i64*
  %21 = load i64, i64* %20, align 8
  %22 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1
  %23 = bitcast %"class.v8::internal::compiler::Node"**** %22 to i64*
  %24 = load i64, i64* %23, align 8
  %25 = sub i64 %21, %24
  %26 = icmp eq i64 %25, 0
  %27 = shl i64 %25, 6
  %28 = add i64 %27, -1
  %29 = select i1 %26, i64 0, i64 %28
  %30 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 0, i32 0
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %33, %31
  %35 = icmp eq i64 %29, %34
  %36 = inttoptr i64 %24 to %"class.v8::internal::compiler::Node"***
  %37 = inttoptr i64 %21 to %"class.v8::internal::compiler::Node"***
  br i1 %35, label %38, label %45

38:                                               ; preds = %16
  %39 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0
  tail call void @_ZNSt3__15dequeIPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS5_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %39) #6
  %40 = load i64, i64* %32, align 8
  %41 = load i64, i64* %30, align 8
  %42 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %22, align 8
  %43 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %19, align 8
  %44 = add i64 %41, %40
  br label %45

45:                                               ; preds = %38, %16
  %46 = phi i64 [ %44, %38 ], [ %34, %16 ]
  %47 = phi %"class.v8::internal::compiler::Node"*** [ %43, %38 ], [ %37, %16 ]
  %48 = phi %"class.v8::internal::compiler::Node"*** [ %42, %38 ], [ %36, %16 ]
  %49 = icmp eq %"class.v8::internal::compiler::Node"*** %47, %48
  br i1 %49, label %57, label %50

50:                                               ; preds = %45
  %51 = lshr i64 %46, 9
  %52 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %48, i64 %51
  %53 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %52, align 8
  %54 = and i64 %46, 511
  %55 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %53, i64 %54
  %56 = bitcast %"class.v8::internal::compiler::Node"** %55 to i64*
  br label %57

57:                                               ; preds = %45, %50
  %58 = phi i64* [ %56, %50 ], [ null, %45 ]
  store i64 %4, i64* %58, align 8
  %59 = load i64, i64* %32, align 8
  %60 = add i64 %59, 1
  store i64 %60, i64* %32, align 8
  %61 = icmp eq i8 %2, 1
  br i1 %61, label %62, label %318

62:                                               ; preds = %57
  %63 = getelementptr %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 0
  %64 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %63, align 8
  %65 = getelementptr %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %64, i64 0, i32 2
  %66 = load i16, i16* %65, align 8
  switch i16 %66, label %74 [
    i16 30, label %80
    i16 512, label %67
    i16 504, label %67
    i16 438, label %67
    i16 437, label %67
    i16 439, label %67
  ]

67:                                               ; preds = %62, %62, %62, %62, %62
  %68 = tail call i16 @_ZN2v88internal8compiler20LoadRepresentationOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %64) #6
  %69 = trunc i16 %68 to i8
  switch i8 %69, label %70 [
    i8 9, label %80
    i8 8, label %80
    i8 6, label %80
  ]

70:                                               ; preds = %67
  %71 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %63, align 8
  %72 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %71, i64 0, i32 2
  %73 = load i16, i16* %72, align 8
  br label %74

74:                                               ; preds = %70, %62
  %75 = phi i16 [ %73, %70 ], [ %66, %62 ]
  %76 = phi %"class.v8::internal::compiler::Operator"* [ %71, %70 ], [ %64, %62 ]
  %77 = icmp eq i16 %75, 35
  br i1 %77, label %78, label %318

78:                                               ; preds = %74
  %79 = tail call zeroext i8 @_ZN2v88internal8compiler19PhiRepresentationOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %76) #6
  switch i8 %79, label %318 [
    i8 9, label %80
    i8 8, label %80
    i8 6, label %80
  ]

80:                                               ; preds = %78, %78, %78, %62, %67, %67, %67
  %81 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 5, i32 0
  %82 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %83 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %82, align 8
  %84 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 0, i32 0
  %85 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %84, align 8
  %86 = icmp eq %"class.v8::internal::compiler::Node"** %83, %85
  %87 = ptrtoint %"class.v8::internal::compiler::Node"** %85 to i64
  br i1 %86, label %93, label %88

88:                                               ; preds = %80
  %89 = bitcast %"class.v8::internal::compiler::Node"** %83 to i64*
  store i64 %4, i64* %89, align 8
  %90 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %83, i64 1
  %91 = ptrtoint %"class.v8::internal::compiler::Node"** %90 to i64
  %92 = bitcast %"class.v8::internal::compiler::Node"*** %82 to i64*
  store i64 %91, i64* %92, align 8
  br label %318

93:                                               ; preds = %80
  %94 = ptrtoint %"class.v8::internal::compiler::Node"** %83 to i64
  %95 = bitcast %"class.v8::internal::compiler::Node"*** %82 to i64*
  %96 = bitcast %"class.std::__1::vector.22"* %81 to i64*
  %97 = load i64, i64* %96, align 8
  %98 = sub i64 %94, %97
  %99 = ashr exact i64 %98, 3
  %100 = add nsw i64 %99, 1
  %101 = icmp ugt i64 %100, 268435455
  br i1 %101, label %102, label %104

102:                                              ; preds = %93
  %103 = bitcast %"class.std::__1::vector.22"* %81 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %103) #7
  unreachable

104:                                              ; preds = %93
  %105 = bitcast %"class.v8::internal::compiler::Node"*** %84 to i64*
  %106 = sub i64 %87, %97
  %107 = ashr exact i64 %106, 3
  %108 = icmp ult i64 %107, 134217727
  br i1 %108, label %109, label %114

109:                                              ; preds = %104
  %110 = ashr exact i64 %106, 2
  %111 = icmp ult i64 %110, %100
  %112 = select i1 %111, i64 %100, i64 %110
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %132, label %114

114:                                              ; preds = %109, %104
  %115 = phi i64 [ %112, %109 ], [ 268435455, %104 ]
  %116 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 5, i32 0, i32 0, i32 2, i32 1, i32 0, i32 0
  %117 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %116, align 8
  %118 = shl i64 %115, 3
  %119 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %117, i64 0, i32 2
  %120 = load i64, i64* %119, align 8
  %121 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %117, i64 0, i32 3
  %122 = load i64, i64* %121, align 8
  %123 = sub i64 %122, %120
  %124 = icmp ugt i64 %118, %123
  br i1 %124, label %125, label %127, !prof !2

125:                                              ; preds = %114
  %126 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %117, i64 %118) #6
  br label %129

127:                                              ; preds = %114
  %128 = add i64 %120, %118
  store i64 %128, i64* %119, align 8
  br label %129

129:                                              ; preds = %127, %125
  %130 = phi i64 [ %126, %125 ], [ %120, %127 ]
  %131 = inttoptr i64 %130 to %"class.v8::internal::compiler::Node"**
  br label %132

132:                                              ; preds = %129, %109
  %133 = phi i64 [ %115, %129 ], [ 0, %109 ]
  %134 = phi %"class.v8::internal::compiler::Node"** [ %131, %129 ], [ null, %109 ]
  %135 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %134, i64 %99
  %136 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %134, i64 %133
  %137 = ptrtoint %"class.v8::internal::compiler::Node"** %136 to i64
  %138 = bitcast %"class.v8::internal::compiler::Node"** %135 to i64*
  store i64 %4, i64* %138, align 8
  %139 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %135, i64 1
  %140 = ptrtoint %"class.v8::internal::compiler::Node"** %139 to i64
  %141 = getelementptr inbounds %"class.std::__1::vector.22", %"class.std::__1::vector.22"* %81, i64 0, i32 0, i32 0
  %142 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %141, align 8
  %143 = ptrtoint %"class.v8::internal::compiler::Node"** %142 to i64
  %144 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %82, align 8
  %145 = icmp eq %"class.v8::internal::compiler::Node"** %144, %142
  br i1 %145, label %315, label %146

146:                                              ; preds = %132
  %147 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %144, i64 -1
  %148 = ptrtoint %"class.v8::internal::compiler::Node"** %147 to i64
  %149 = sub i64 %148, %143
  %150 = lshr i64 %149, 3
  %151 = add nuw nsw i64 %150, 1
  %152 = icmp ult i64 %151, 4
  br i1 %152, label %245, label %153

153:                                              ; preds = %146
  %154 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %144, i64 -1
  %155 = ptrtoint %"class.v8::internal::compiler::Node"** %154 to i64
  %156 = sub i64 %155, %143
  %157 = lshr i64 %156, 3
  %158 = xor i64 %157, -1
  %159 = add nsw i64 %99, %158
  %160 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %134, i64 %159
  %161 = xor i64 %157, -1
  %162 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %144, i64 %161
  %163 = icmp ult %"class.v8::internal::compiler::Node"** %160, %144
  %164 = icmp ult %"class.v8::internal::compiler::Node"** %162, %135
  %165 = and i1 %163, %164
  br i1 %165, label %245, label %166

166:                                              ; preds = %153
  %167 = and i64 %151, 4611686018427387900
  %168 = sub nsw i64 0, %167
  %169 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %135, i64 %168
  %170 = sub nsw i64 0, %167
  %171 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %144, i64 %170
  %172 = add nsw i64 %167, -4
  %173 = lshr exact i64 %172, 2
  %174 = add nuw nsw i64 %173, 1
  %175 = and i64 %174, 1
  %176 = icmp eq i64 %172, 0
  br i1 %176, label %223, label %177

177:                                              ; preds = %166
  %178 = sub nuw nsw i64 %174, %175
  %179 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %135, i64 -1
  %180 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %144, i64 -1
  %181 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %135, i64 -1
  %182 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %144, i64 -1
  br label %183

183:                                              ; preds = %183, %177
  %184 = phi i64 [ 0, %177 ], [ %218, %183 ]
  %185 = phi i64 [ %178, %177 ], [ %219, %183 ]
  %186 = sub i64 0, %184
  %187 = sub i64 0, %184
  %188 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %179, i64 %186
  %189 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %180, i64 %187
  %190 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %189, i64 -1
  %191 = bitcast %"class.v8::internal::compiler::Node"** %190 to <2 x i64>*
  %192 = load <2 x i64>, <2 x i64>* %191, align 8, !alias.scope !3
  %193 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %189, i64 -2
  %194 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %193, i64 -1
  %195 = bitcast %"class.v8::internal::compiler::Node"** %194 to <2 x i64>*
  %196 = load <2 x i64>, <2 x i64>* %195, align 8, !alias.scope !3
  %197 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %188, i64 -1
  %198 = bitcast %"class.v8::internal::compiler::Node"** %197 to <2 x i64>*
  store <2 x i64> %192, <2 x i64>* %198, align 8, !alias.scope !6, !noalias !3
  %199 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %188, i64 -2
  %200 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %199, i64 -1
  %201 = bitcast %"class.v8::internal::compiler::Node"** %200 to <2 x i64>*
  store <2 x i64> %196, <2 x i64>* %201, align 8, !alias.scope !6, !noalias !3
  %202 = sub nuw nsw i64 -4, %184
  %203 = sub nuw nsw i64 -4, %184
  %204 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %181, i64 %202
  %205 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %182, i64 %203
  %206 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %205, i64 -1
  %207 = bitcast %"class.v8::internal::compiler::Node"** %206 to <2 x i64>*
  %208 = load <2 x i64>, <2 x i64>* %207, align 8, !alias.scope !3
  %209 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %205, i64 -2
  %210 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %209, i64 -1
  %211 = bitcast %"class.v8::internal::compiler::Node"** %210 to <2 x i64>*
  %212 = load <2 x i64>, <2 x i64>* %211, align 8, !alias.scope !3
  %213 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %204, i64 -1
  %214 = bitcast %"class.v8::internal::compiler::Node"** %213 to <2 x i64>*
  store <2 x i64> %208, <2 x i64>* %214, align 8, !alias.scope !6, !noalias !3
  %215 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %204, i64 -2
  %216 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %215, i64 -1
  %217 = bitcast %"class.v8::internal::compiler::Node"** %216 to <2 x i64>*
  store <2 x i64> %212, <2 x i64>* %217, align 8, !alias.scope !6, !noalias !3
  %218 = add i64 %184, 8
  %219 = add i64 %185, -2
  %220 = icmp eq i64 %219, 0
  br i1 %220, label %221, label %183, !llvm.loop !8

221:                                              ; preds = %183
  %222 = sub nuw nsw i64 -8, %184
  br label %223

223:                                              ; preds = %221, %166
  %224 = phi i64 [ 0, %166 ], [ %222, %221 ]
  %225 = icmp eq i64 %175, 0
  br i1 %225, label %243, label %226

226:                                              ; preds = %223
  %227 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %135, i64 -1
  %228 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %144, i64 -1
  %229 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %227, i64 %224
  %230 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %228, i64 %224
  %231 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %230, i64 -1
  %232 = bitcast %"class.v8::internal::compiler::Node"** %231 to <2 x i64>*
  %233 = load <2 x i64>, <2 x i64>* %232, align 8, !alias.scope !3
  %234 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %230, i64 -2
  %235 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %234, i64 -1
  %236 = bitcast %"class.v8::internal::compiler::Node"** %235 to <2 x i64>*
  %237 = load <2 x i64>, <2 x i64>* %236, align 8, !alias.scope !3
  %238 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %229, i64 -1
  %239 = bitcast %"class.v8::internal::compiler::Node"** %238 to <2 x i64>*
  store <2 x i64> %233, <2 x i64>* %239, align 8, !alias.scope !6, !noalias !3
  %240 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %229, i64 -2
  %241 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %240, i64 -1
  %242 = bitcast %"class.v8::internal::compiler::Node"** %241 to <2 x i64>*
  store <2 x i64> %237, <2 x i64>* %242, align 8, !alias.scope !6, !noalias !3
  br label %243

243:                                              ; preds = %223, %226
  %244 = icmp eq i64 %151, %167
  br i1 %244, label %315, label %245

245:                                              ; preds = %243, %153, %146
  %246 = phi %"class.v8::internal::compiler::Node"** [ %135, %153 ], [ %135, %146 ], [ %169, %243 ]
  %247 = phi %"class.v8::internal::compiler::Node"** [ %144, %153 ], [ %144, %146 ], [ %171, %243 ]
  %248 = getelementptr %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %247, i64 -1
  %249 = ptrtoint %"class.v8::internal::compiler::Node"** %248 to i64
  %250 = sub i64 %249, %143
  %251 = lshr i64 %250, 3
  %252 = add nuw nsw i64 %251, 1
  %253 = and i64 %252, 7
  %254 = icmp eq i64 %253, 0
  br i1 %254, label %266, label %255

255:                                              ; preds = %245, %255
  %256 = phi %"class.v8::internal::compiler::Node"** [ %259, %255 ], [ %246, %245 ]
  %257 = phi %"class.v8::internal::compiler::Node"** [ %260, %255 ], [ %247, %245 ]
  %258 = phi i64 [ %264, %255 ], [ %253, %245 ]
  %259 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %256, i64 -1
  %260 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %257, i64 -1
  %261 = bitcast %"class.v8::internal::compiler::Node"** %260 to i64*
  %262 = load i64, i64* %261, align 8
  %263 = bitcast %"class.v8::internal::compiler::Node"** %259 to i64*
  store i64 %262, i64* %263, align 8
  %264 = add i64 %258, -1
  %265 = icmp eq i64 %264, 0
  br i1 %265, label %266, label %255, !llvm.loop !10

266:                                              ; preds = %255, %245
  %267 = phi %"class.v8::internal::compiler::Node"** [ undef, %245 ], [ %259, %255 ]
  %268 = phi %"class.v8::internal::compiler::Node"** [ %246, %245 ], [ %259, %255 ]
  %269 = phi %"class.v8::internal::compiler::Node"** [ %247, %245 ], [ %260, %255 ]
  %270 = icmp ult i64 %250, 56
  br i1 %270, label %315, label %271

271:                                              ; preds = %266, %271
  %272 = phi %"class.v8::internal::compiler::Node"** [ %309, %271 ], [ %268, %266 ]
  %273 = phi %"class.v8::internal::compiler::Node"** [ %310, %271 ], [ %269, %266 ]
  %274 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %272, i64 -1
  %275 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %273, i64 -1
  %276 = bitcast %"class.v8::internal::compiler::Node"** %275 to i64*
  %277 = load i64, i64* %276, align 8
  %278 = bitcast %"class.v8::internal::compiler::Node"** %274 to i64*
  store i64 %277, i64* %278, align 8
  %279 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %272, i64 -2
  %280 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %273, i64 -2
  %281 = bitcast %"class.v8::internal::compiler::Node"** %280 to i64*
  %282 = load i64, i64* %281, align 8
  %283 = bitcast %"class.v8::internal::compiler::Node"** %279 to i64*
  store i64 %282, i64* %283, align 8
  %284 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %272, i64 -3
  %285 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %273, i64 -3
  %286 = bitcast %"class.v8::internal::compiler::Node"** %285 to i64*
  %287 = load i64, i64* %286, align 8
  %288 = bitcast %"class.v8::internal::compiler::Node"** %284 to i64*
  store i64 %287, i64* %288, align 8
  %289 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %272, i64 -4
  %290 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %273, i64 -4
  %291 = bitcast %"class.v8::internal::compiler::Node"** %290 to i64*
  %292 = load i64, i64* %291, align 8
  %293 = bitcast %"class.v8::internal::compiler::Node"** %289 to i64*
  store i64 %292, i64* %293, align 8
  %294 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %272, i64 -5
  %295 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %273, i64 -5
  %296 = bitcast %"class.v8::internal::compiler::Node"** %295 to i64*
  %297 = load i64, i64* %296, align 8
  %298 = bitcast %"class.v8::internal::compiler::Node"** %294 to i64*
  store i64 %297, i64* %298, align 8
  %299 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %272, i64 -6
  %300 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %273, i64 -6
  %301 = bitcast %"class.v8::internal::compiler::Node"** %300 to i64*
  %302 = load i64, i64* %301, align 8
  %303 = bitcast %"class.v8::internal::compiler::Node"** %299 to i64*
  store i64 %302, i64* %303, align 8
  %304 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %272, i64 -7
  %305 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %273, i64 -7
  %306 = bitcast %"class.v8::internal::compiler::Node"** %305 to i64*
  %307 = load i64, i64* %306, align 8
  %308 = bitcast %"class.v8::internal::compiler::Node"** %304 to i64*
  store i64 %307, i64* %308, align 8
  %309 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %272, i64 -8
  %310 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %273, i64 -8
  %311 = bitcast %"class.v8::internal::compiler::Node"** %310 to i64*
  %312 = load i64, i64* %311, align 8
  %313 = bitcast %"class.v8::internal::compiler::Node"** %309 to i64*
  store i64 %312, i64* %313, align 8
  %314 = icmp eq %"class.v8::internal::compiler::Node"** %310, %142
  br i1 %314, label %315, label %271, !llvm.loop !12

315:                                              ; preds = %266, %271, %243, %132
  %316 = phi %"class.v8::internal::compiler::Node"** [ %135, %132 ], [ %169, %243 ], [ %267, %266 ], [ %309, %271 ]
  %317 = ptrtoint %"class.v8::internal::compiler::Node"** %316 to i64
  store i64 %317, i64* %96, align 8
  store i64 %140, i64* %95, align 8
  store i64 %137, i64* %105, align 8
  br label %318

318:                                              ; preds = %78, %74, %315, %88, %57, %12
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler22DecompressionOptimizer14MarkNodeInputsEPNS1_4NodeE(%"class.v8::internal::compiler::DecompressionOptimizer"*, %"class.v8::internal::compiler::Node"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 0
  %4 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %4, i64 0, i32 2
  %6 = load i16, i16* %5, align 8
  switch i16 %6, label %7 [
    i16 452, label %24
    i16 453, label %24
    i16 478, label %45
    i16 344, label %60
    i16 345, label %60
    i16 346, label %60
    i16 347, label %60
    i16 303, label %60
    i16 342, label %60
    i16 306, label %60
    i16 440, label %87
    i16 513, label %87
    i16 505, label %87
    i16 41, label %242
    i16 42, label %242
    i16 43, label %242
    i16 35, label %270
  ]

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %4, i64 0, i32 5
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %9, 0
  br i1 %10, label %11, label %370

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 3
  %13 = ptrtoint %"class.v8::internal::compiler::Node"* %1 to i64
  %14 = add i64 %13, 32
  %15 = inttoptr i64 %14 to i64*
  %16 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 3, i32 0, i32 0
  %17 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 2
  %18 = bitcast %"class.v8::internal::compiler::Node"**** %17 to i64*
  %19 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1
  %20 = bitcast %"class.v8::internal::compiler::Node"**** %19 to i64*
  %21 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %22 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 0, i32 0
  %23 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0
  br label %304

24:                                               ; preds = %2, %2
  %25 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 3
  %26 = load i32, i32* %25, align 4
  %27 = and i32 %26, 251658240
  %28 = icmp eq i32 %27, 251658240
  %29 = ptrtoint %"class.v8::internal::compiler::Node"* %1 to i64
  %30 = add i64 %29, 32
  br i1 %28, label %31, label %35

31:                                               ; preds = %24
  %32 = inttoptr i64 %30 to i64*
  %33 = load i64, i64* %32, align 8
  %34 = add i64 %33, 16
  br label %35

35:                                               ; preds = %24, %31
  %36 = phi i64 [ %34, %31 ], [ %30, %24 ]
  %37 = inttoptr i64 %36 to %"class.v8::internal::compiler::Node"**
  %38 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %37, align 8
  %39 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 2
  %40 = load i32, i32* %39, align 8
  %41 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 3, i32 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = tail call i32 @llvm.usub.sat.i32(i32 %40, i32 %42) #6
  %44 = trunc i32 %43 to i8
  tail call void @_ZN2v88internal8compiler22DecompressionOptimizer27MaybeMarkAndQueueForRevisitEPNS1_4NodeENS2_5StateE(%"class.v8::internal::compiler::DecompressionOptimizer"* %0, %"class.v8::internal::compiler::Node"* %38, i8 zeroext %44)
  br label %370

45:                                               ; preds = %2
  %46 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 3
  %47 = load i32, i32* %46, align 4
  %48 = and i32 %47, 251658240
  %49 = icmp eq i32 %48, 251658240
  %50 = ptrtoint %"class.v8::internal::compiler::Node"* %1 to i64
  %51 = add i64 %50, 32
  br i1 %49, label %52, label %56

52:                                               ; preds = %45
  %53 = inttoptr i64 %51 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = add i64 %54, 16
  br label %56

56:                                               ; preds = %45, %52
  %57 = phi i64 [ %55, %52 ], [ %51, %45 ]
  %58 = inttoptr i64 %57 to %"class.v8::internal::compiler::Node"**
  %59 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %58, align 8
  tail call void @_ZN2v88internal8compiler22DecompressionOptimizer27MaybeMarkAndQueueForRevisitEPNS1_4NodeENS2_5StateE(%"class.v8::internal::compiler::DecompressionOptimizer"* %0, %"class.v8::internal::compiler::Node"* %59, i8 zeroext 1)
  br label %370

60:                                               ; preds = %2, %2, %2, %2, %2, %2, %2
  %61 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 3
  %62 = load i32, i32* %61, align 4
  %63 = and i32 %62, 251658240
  %64 = icmp eq i32 %63, 251658240
  %65 = ptrtoint %"class.v8::internal::compiler::Node"* %1 to i64
  %66 = add i64 %65, 32
  br i1 %64, label %67, label %71

67:                                               ; preds = %60
  %68 = inttoptr i64 %66 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = add i64 %69, 16
  br label %71

71:                                               ; preds = %60, %67
  %72 = phi i64 [ %70, %67 ], [ %66, %60 ]
  %73 = inttoptr i64 %72 to %"class.v8::internal::compiler::Node"**
  %74 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %73, align 8
  tail call void @_ZN2v88internal8compiler22DecompressionOptimizer27MaybeMarkAndQueueForRevisitEPNS1_4NodeENS2_5StateE(%"class.v8::internal::compiler::DecompressionOptimizer"* %0, %"class.v8::internal::compiler::Node"* %74, i8 zeroext 1)
  %75 = load i32, i32* %61, align 4
  %76 = and i32 %75, 251658240
  %77 = icmp eq i32 %76, 251658240
  br i1 %77, label %78, label %82

78:                                               ; preds = %71
  %79 = inttoptr i64 %66 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = add i64 %80, 16
  br label %82

82:                                               ; preds = %71, %78
  %83 = phi i64 [ %81, %78 ], [ %66, %71 ]
  %84 = inttoptr i64 %83 to %"class.v8::internal::compiler::Node"**
  %85 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %84, i64 1
  %86 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %85, align 8
  tail call void @_ZN2v88internal8compiler22DecompressionOptimizer27MaybeMarkAndQueueForRevisitEPNS1_4NodeENS2_5StateE(%"class.v8::internal::compiler::DecompressionOptimizer"* %0, %"class.v8::internal::compiler::Node"* %86, i8 zeroext 1)
  br label %370

87:                                               ; preds = %2, %2, %2
  %88 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 3
  %89 = load i32, i32* %88, align 4
  %90 = and i32 %89, 251658240
  %91 = icmp eq i32 %90, 251658240
  %92 = ptrtoint %"class.v8::internal::compiler::Node"* %1 to i64
  %93 = add i64 %92, 32
  br i1 %91, label %94, label %98

94:                                               ; preds = %87
  %95 = inttoptr i64 %93 to i64*
  %96 = load i64, i64* %95, align 8
  %97 = add i64 %96, 16
  br label %98

98:                                               ; preds = %87, %94
  %99 = phi i64 [ %97, %94 ], [ %93, %87 ]
  %100 = inttoptr i64 %99 to %"class.v8::internal::compiler::Node"**
  %101 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %100, align 8
  %102 = ptrtoint %"class.v8::internal::compiler::Node"* %101 to i64
  %103 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %101, i64 0, i32 2
  %104 = load i32, i32* %103, align 8
  %105 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 3, i32 0, i32 0
  %106 = load i32, i32* %105, align 4
  %107 = tail call i32 @llvm.usub.sat.i32(i32 %104, i32 %106) #6
  %108 = trunc i32 %107 to i8
  %109 = icmp ult i8 %108, 2
  br i1 %109, label %110, label %155

110:                                              ; preds = %98
  %111 = add i32 %106, 2
  store i32 %111, i32* %103, align 8
  %112 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 2
  %113 = bitcast %"class.v8::internal::compiler::Node"**** %112 to i64*
  %114 = load i64, i64* %113, align 8
  %115 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1
  %116 = bitcast %"class.v8::internal::compiler::Node"**** %115 to i64*
  %117 = load i64, i64* %116, align 8
  %118 = sub i64 %114, %117
  %119 = icmp eq i64 %118, 0
  %120 = shl i64 %118, 6
  %121 = add i64 %120, -1
  %122 = select i1 %119, i64 0, i64 %121
  %123 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %124 = load i64, i64* %123, align 8
  %125 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 0, i32 0
  %126 = load i64, i64* %125, align 8
  %127 = add i64 %126, %124
  %128 = icmp eq i64 %122, %127
  %129 = inttoptr i64 %117 to %"class.v8::internal::compiler::Node"***
  %130 = inttoptr i64 %114 to %"class.v8::internal::compiler::Node"***
  br i1 %128, label %131, label %138

131:                                              ; preds = %110
  %132 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0
  tail call void @_ZNSt3__15dequeIPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS5_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %132) #6
  %133 = load i64, i64* %125, align 8
  %134 = load i64, i64* %123, align 8
  %135 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %115, align 8
  %136 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %112, align 8
  %137 = add i64 %134, %133
  br label %138

138:                                              ; preds = %131, %110
  %139 = phi i64 [ %137, %131 ], [ %127, %110 ]
  %140 = phi %"class.v8::internal::compiler::Node"*** [ %136, %131 ], [ %130, %110 ]
  %141 = phi %"class.v8::internal::compiler::Node"*** [ %135, %131 ], [ %129, %110 ]
  %142 = icmp eq %"class.v8::internal::compiler::Node"*** %140, %141
  br i1 %142, label %150, label %143

143:                                              ; preds = %138
  %144 = lshr i64 %139, 9
  %145 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %141, i64 %144
  %146 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %145, align 8
  %147 = and i64 %139, 511
  %148 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %146, i64 %147
  %149 = bitcast %"class.v8::internal::compiler::Node"** %148 to i64*
  br label %150

150:                                              ; preds = %143, %138
  %151 = phi i64* [ %149, %143 ], [ null, %138 ]
  store i64 %102, i64* %151, align 8
  %152 = load i64, i64* %125, align 8
  %153 = add i64 %152, 1
  store i64 %153, i64* %125, align 8
  %154 = load i32, i32* %88, align 4
  br label %155

155:                                              ; preds = %98, %150
  %156 = phi i32 [ %89, %98 ], [ %154, %150 ]
  %157 = and i32 %156, 251658240
  %158 = icmp eq i32 %157, 251658240
  br i1 %158, label %159, label %163

159:                                              ; preds = %155
  %160 = inttoptr i64 %93 to i64*
  %161 = load i64, i64* %160, align 8
  %162 = add i64 %161, 16
  br label %163

163:                                              ; preds = %155, %159
  %164 = phi i64 [ %162, %159 ], [ %93, %155 ]
  %165 = inttoptr i64 %164 to %"class.v8::internal::compiler::Node"**
  %166 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %165, i64 1
  %167 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %166, align 8
  %168 = ptrtoint %"class.v8::internal::compiler::Node"* %167 to i64
  %169 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %167, i64 0, i32 2
  %170 = load i32, i32* %169, align 8
  %171 = load i32, i32* %105, align 4
  %172 = tail call i32 @llvm.usub.sat.i32(i32 %170, i32 %171) #6
  %173 = trunc i32 %172 to i8
  %174 = icmp ult i8 %173, 2
  br i1 %174, label %175, label %220

175:                                              ; preds = %163
  %176 = add i32 %171, 2
  store i32 %176, i32* %169, align 8
  %177 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 2
  %178 = bitcast %"class.v8::internal::compiler::Node"**** %177 to i64*
  %179 = load i64, i64* %178, align 8
  %180 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1
  %181 = bitcast %"class.v8::internal::compiler::Node"**** %180 to i64*
  %182 = load i64, i64* %181, align 8
  %183 = sub i64 %179, %182
  %184 = icmp eq i64 %183, 0
  %185 = shl i64 %183, 6
  %186 = add i64 %185, -1
  %187 = select i1 %184, i64 0, i64 %186
  %188 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %189 = load i64, i64* %188, align 8
  %190 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 0, i32 0
  %191 = load i64, i64* %190, align 8
  %192 = add i64 %191, %189
  %193 = icmp eq i64 %187, %192
  %194 = inttoptr i64 %182 to %"class.v8::internal::compiler::Node"***
  %195 = inttoptr i64 %179 to %"class.v8::internal::compiler::Node"***
  br i1 %193, label %196, label %203

196:                                              ; preds = %175
  %197 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0
  tail call void @_ZNSt3__15dequeIPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS5_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %197) #6
  %198 = load i64, i64* %190, align 8
  %199 = load i64, i64* %188, align 8
  %200 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %180, align 8
  %201 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %177, align 8
  %202 = add i64 %199, %198
  br label %203

203:                                              ; preds = %196, %175
  %204 = phi i64 [ %202, %196 ], [ %192, %175 ]
  %205 = phi %"class.v8::internal::compiler::Node"*** [ %201, %196 ], [ %195, %175 ]
  %206 = phi %"class.v8::internal::compiler::Node"*** [ %200, %196 ], [ %194, %175 ]
  %207 = icmp eq %"class.v8::internal::compiler::Node"*** %205, %206
  br i1 %207, label %215, label %208

208:                                              ; preds = %203
  %209 = lshr i64 %204, 9
  %210 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %206, i64 %209
  %211 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %210, align 8
  %212 = and i64 %204, 511
  %213 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %211, i64 %212
  %214 = bitcast %"class.v8::internal::compiler::Node"** %213 to i64*
  br label %215

215:                                              ; preds = %208, %203
  %216 = phi i64* [ %214, %208 ], [ null, %203 ]
  store i64 %168, i64* %216, align 8
  %217 = load i64, i64* %190, align 8
  %218 = add i64 %217, 1
  store i64 %218, i64* %190, align 8
  %219 = load i32, i32* %88, align 4
  br label %220

220:                                              ; preds = %163, %215
  %221 = phi i32 [ %156, %163 ], [ %219, %215 ]
  %222 = and i32 %221, 251658240
  %223 = icmp eq i32 %222, 251658240
  br i1 %223, label %224, label %228

224:                                              ; preds = %220
  %225 = inttoptr i64 %93 to i64*
  %226 = load i64, i64* %225, align 8
  %227 = add i64 %226, 16
  br label %228

228:                                              ; preds = %220, %224
  %229 = phi i64 [ %227, %224 ], [ %93, %220 ]
  %230 = inttoptr i64 %229 to %"class.v8::internal::compiler::Node"**
  %231 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %230, i64 2
  %232 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %231, align 8
  %233 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %3, align 8
  %234 = tail call dereferenceable(2) %"class.v8::internal::compiler::StoreRepresentation"* @_ZN2v88internal8compiler21StoreRepresentationOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %233) #6
  %235 = getelementptr inbounds %"class.v8::internal::compiler::StoreRepresentation", %"class.v8::internal::compiler::StoreRepresentation"* %234, i64 0, i32 0
  %236 = load i8, i8* %235, align 1
  %237 = or i8 %236, 1
  %238 = icmp eq i8 %237, 9
  %239 = icmp eq i8 %237, 7
  %240 = or i1 %239, %238
  %241 = select i1 %240, i8 1, i8 2
  tail call void @_ZN2v88internal8compiler22DecompressionOptimizer27MaybeMarkAndQueueForRevisitEPNS1_4NodeENS2_5StateE(%"class.v8::internal::compiler::DecompressionOptimizer"* %0, %"class.v8::internal::compiler::Node"* %232, i8 zeroext %241)
  br label %370

242:                                              ; preds = %2, %2, %2
  %243 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %4, i64 0, i32 5
  %244 = load i32, i32* %243, align 4
  %245 = icmp sgt i32 %244, 0
  br i1 %245, label %246, label %370

246:                                              ; preds = %242
  %247 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 3
  %248 = ptrtoint %"class.v8::internal::compiler::Node"* %1 to i64
  %249 = add i64 %248, 32
  %250 = inttoptr i64 %249 to i64*
  br label %251

251:                                              ; preds = %246, %259
  %252 = phi i64 [ 0, %246 ], [ %264, %259 ]
  %253 = load i32, i32* %247, align 4
  %254 = and i32 %253, 251658240
  %255 = icmp eq i32 %254, 251658240
  br i1 %255, label %256, label %259

256:                                              ; preds = %251
  %257 = load i64, i64* %250, align 8
  %258 = add i64 %257, 16
  br label %259

259:                                              ; preds = %251, %256
  %260 = phi i64 [ %258, %256 ], [ %249, %251 ]
  %261 = inttoptr i64 %260 to %"class.v8::internal::compiler::Node"**
  %262 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %261, i64 %252
  %263 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %262, align 8
  tail call void @_ZN2v88internal8compiler22DecompressionOptimizer27MaybeMarkAndQueueForRevisitEPNS1_4NodeENS2_5StateE(%"class.v8::internal::compiler::DecompressionOptimizer"* %0, %"class.v8::internal::compiler::Node"* %263, i8 zeroext 1)
  %264 = add nuw nsw i64 %252, 1
  %265 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %3, align 8
  %266 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %265, i64 0, i32 5
  %267 = load i32, i32* %266, align 4
  %268 = sext i32 %267 to i64
  %269 = icmp slt i64 %264, %268
  br i1 %269, label %251, label %370

270:                                              ; preds = %2
  %271 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 2
  %272 = load i32, i32* %271, align 8
  %273 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 3, i32 0, i32 0
  %274 = load i32, i32* %273, align 4
  %275 = tail call i32 @llvm.usub.sat.i32(i32 %272, i32 %274) #6
  %276 = trunc i32 %275 to i8
  %277 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %4, i64 0, i32 5
  %278 = load i32, i32* %277, align 4
  %279 = icmp sgt i32 %278, 0
  br i1 %279, label %280, label %370

280:                                              ; preds = %270
  %281 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 3
  %282 = ptrtoint %"class.v8::internal::compiler::Node"* %1 to i64
  %283 = add i64 %282, 32
  %284 = inttoptr i64 %283 to i64*
  br label %285

285:                                              ; preds = %280, %293
  %286 = phi i64 [ 0, %280 ], [ %298, %293 ]
  %287 = load i32, i32* %281, align 4
  %288 = and i32 %287, 251658240
  %289 = icmp eq i32 %288, 251658240
  br i1 %289, label %290, label %293

290:                                              ; preds = %285
  %291 = load i64, i64* %284, align 8
  %292 = add i64 %291, 16
  br label %293

293:                                              ; preds = %285, %290
  %294 = phi i64 [ %292, %290 ], [ %283, %285 ]
  %295 = inttoptr i64 %294 to %"class.v8::internal::compiler::Node"**
  %296 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %295, i64 %286
  %297 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %296, align 8
  tail call void @_ZN2v88internal8compiler22DecompressionOptimizer27MaybeMarkAndQueueForRevisitEPNS1_4NodeENS2_5StateE(%"class.v8::internal::compiler::DecompressionOptimizer"* %0, %"class.v8::internal::compiler::Node"* %297, i8 zeroext %276)
  %298 = add nuw nsw i64 %286, 1
  %299 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %3, align 8
  %300 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %299, i64 0, i32 5
  %301 = load i32, i32* %300, align 4
  %302 = sext i32 %301 to i64
  %303 = icmp slt i64 %298, %302
  br i1 %303, label %285, label %370

304:                                              ; preds = %11, %363
  %305 = phi %"class.v8::internal::compiler::Operator"* [ %4, %11 ], [ %364, %363 ]
  %306 = phi i64 [ 0, %11 ], [ %365, %363 ]
  %307 = load i32, i32* %12, align 4
  %308 = and i32 %307, 251658240
  %309 = icmp eq i32 %308, 251658240
  br i1 %309, label %310, label %313

310:                                              ; preds = %304
  %311 = load i64, i64* %15, align 8
  %312 = add i64 %311, 16
  br label %313

313:                                              ; preds = %304, %310
  %314 = phi i64 [ %312, %310 ], [ %14, %304 ]
  %315 = inttoptr i64 %314 to %"class.v8::internal::compiler::Node"**
  %316 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %315, i64 %306
  %317 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %316, align 8
  %318 = ptrtoint %"class.v8::internal::compiler::Node"* %317 to i64
  %319 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %317, i64 0, i32 2
  %320 = load i32, i32* %319, align 8
  %321 = load i32, i32* %16, align 4
  %322 = tail call i32 @llvm.usub.sat.i32(i32 %320, i32 %321) #6
  %323 = trunc i32 %322 to i8
  %324 = icmp ult i8 %323, 2
  br i1 %324, label %325, label %363

325:                                              ; preds = %313
  %326 = add i32 %321, 2
  store i32 %326, i32* %319, align 8
  %327 = load i64, i64* %18, align 8
  %328 = load i64, i64* %20, align 8
  %329 = sub i64 %327, %328
  %330 = icmp eq i64 %329, 0
  %331 = shl i64 %329, 6
  %332 = add i64 %331, -1
  %333 = select i1 %330, i64 0, i64 %332
  %334 = load i64, i64* %21, align 8
  %335 = load i64, i64* %22, align 8
  %336 = add i64 %335, %334
  %337 = icmp eq i64 %333, %336
  %338 = inttoptr i64 %328 to %"class.v8::internal::compiler::Node"***
  %339 = inttoptr i64 %327 to %"class.v8::internal::compiler::Node"***
  br i1 %337, label %340, label %346

340:                                              ; preds = %325
  tail call void @_ZNSt3__15dequeIPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS5_EEE19__add_back_capacityEv(%"class.std::__1::deque"* %23) #6
  %341 = load i64, i64* %22, align 8
  %342 = load i64, i64* %21, align 8
  %343 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %19, align 8
  %344 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %17, align 8
  %345 = add i64 %342, %341
  br label %346

346:                                              ; preds = %340, %325
  %347 = phi i64 [ %345, %340 ], [ %336, %325 ]
  %348 = phi %"class.v8::internal::compiler::Node"*** [ %344, %340 ], [ %339, %325 ]
  %349 = phi %"class.v8::internal::compiler::Node"*** [ %343, %340 ], [ %338, %325 ]
  %350 = icmp eq %"class.v8::internal::compiler::Node"*** %348, %349
  br i1 %350, label %358, label %351

351:                                              ; preds = %346
  %352 = lshr i64 %347, 9
  %353 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %349, i64 %352
  %354 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %353, align 8
  %355 = and i64 %347, 511
  %356 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %354, i64 %355
  %357 = bitcast %"class.v8::internal::compiler::Node"** %356 to i64*
  br label %358

358:                                              ; preds = %351, %346
  %359 = phi i64* [ %357, %351 ], [ null, %346 ]
  store i64 %318, i64* %359, align 8
  %360 = load i64, i64* %22, align 8
  %361 = add i64 %360, 1
  store i64 %361, i64* %22, align 8
  %362 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %3, align 8
  br label %363

363:                                              ; preds = %313, %358
  %364 = phi %"class.v8::internal::compiler::Operator"* [ %305, %313 ], [ %362, %358 ]
  %365 = add nuw nsw i64 %306, 1
  %366 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %364, i64 0, i32 5
  %367 = load i32, i32* %366, align 4
  %368 = sext i32 %367 to i64
  %369 = icmp slt i64 %365, %368
  br i1 %369, label %304, label %370

370:                                              ; preds = %293, %259, %363, %270, %242, %7, %228, %82, %56, %35
  %371 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %3, align 8
  %372 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %371, i64 0, i32 5
  %373 = load i32, i32* %372, align 4
  %374 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 3
  %375 = ptrtoint %"class.v8::internal::compiler::Node"* %1 to i64
  %376 = add i64 %375, 32
  %377 = inttoptr i64 %376 to %"struct.v8::internal::compiler::Node::OutOfLineInputs"**
  %378 = inttoptr i64 %376 to i64*
  %379 = sext i32 %373 to i64
  br label %380

380:                                              ; preds = %401, %370
  %381 = phi i64 [ %406, %401 ], [ %379, %370 ]
  %382 = load i32, i32* %374, align 4
  %383 = and i32 %382, 251658240
  %384 = icmp eq i32 %383, 251658240
  br i1 %384, label %388, label %385

385:                                              ; preds = %380
  %386 = lshr i32 %382, 24
  %387 = and i32 %386, 15
  br label %392

388:                                              ; preds = %380
  %389 = load %"struct.v8::internal::compiler::Node::OutOfLineInputs"*, %"struct.v8::internal::compiler::Node::OutOfLineInputs"** %377, align 8
  %390 = getelementptr inbounds %"struct.v8::internal::compiler::Node::OutOfLineInputs", %"struct.v8::internal::compiler::Node::OutOfLineInputs"* %389, i64 0, i32 1
  %391 = load i32, i32* %390, align 8
  br label %392

392:                                              ; preds = %385, %388
  %393 = phi i32 [ %387, %385 ], [ %391, %388 ]
  %394 = sext i32 %393 to i64
  %395 = icmp slt i64 %381, %394
  br i1 %395, label %397, label %396

396:                                              ; preds = %392
  ret void

397:                                              ; preds = %392
  br i1 %384, label %398, label %401

398:                                              ; preds = %397
  %399 = load i64, i64* %378, align 8
  %400 = add i64 %399, 16
  br label %401

401:                                              ; preds = %397, %398
  %402 = phi i64 [ %400, %398 ], [ %376, %397 ]
  %403 = inttoptr i64 %402 to %"class.v8::internal::compiler::Node"**
  %404 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %403, i64 %381
  %405 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %404, align 8
  tail call void @_ZN2v88internal8compiler22DecompressionOptimizer27MaybeMarkAndQueueForRevisitEPNS1_4NodeENS2_5StateE(%"class.v8::internal::compiler::DecompressionOptimizer"* %0, %"class.v8::internal::compiler::Node"* %405, i8 zeroext 1)
  %406 = add nsw i64 %381, 1
  br label %380
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare dereferenceable(2) %"class.v8::internal::compiler::StoreRepresentation"* @_ZN2v88internal8compiler21StoreRepresentationOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler22DecompressionOptimizer18ChangeHeapConstantEPNS1_4NodeE(%"class.v8::internal::compiler::DecompressionOptimizer"* nocapture readonly, %"class.v8::internal::compiler::Node"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::Handle", align 8
  %4 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 1
  %5 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %4, align 8
  %6 = bitcast %"class.v8::internal::Handle"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #6
  %7 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 0
  %8 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %7, align 8
  %9 = tail call i64* @_ZN2v88internal8compiler14HeapConstantOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %8) #6
  %10 = getelementptr inbounds %"class.v8::internal::Handle", %"class.v8::internal::Handle"* %3, i64 0, i32 0, i32 0
  store i64* %9, i64** %10, align 8
  %11 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder22CompressedHeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %5, %"class.v8::internal::Handle"* nonnull dereferenceable(8) %3) #6
  call void @_ZN2v88internal8compiler14NodeProperties8ChangeOpEPNS1_4NodeEPKNS1_8OperatorE(%"class.v8::internal::compiler::Node"* %1, %"class.v8::internal::compiler::Operator"* %11) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #6
  ret void
}

declare void @_ZN2v88internal8compiler14NodeProperties8ChangeOpEPNS1_4NodeEPKNS1_8OperatorE(%"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Operator"*) local_unnamed_addr #2

declare %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder22CompressedHeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::Handle"* dereferenceable(8)) local_unnamed_addr #2

declare i64* @_ZN2v88internal8compiler14HeapConstantOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler22DecompressionOptimizer9ChangePhiEPNS1_4NodeE(%"class.v8::internal::compiler::DecompressionOptimizer"* nocapture readonly, %"class.v8::internal::compiler::Node"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 0
  %4 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %3, align 8
  %5 = tail call zeroext i8 @_ZN2v88internal8compiler19PhiRepresentationOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %4) #6
  %6 = icmp eq i8 %5, 9
  %7 = select i1 %6, i8 11, i8 10
  %8 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 1
  %9 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %8, align 8
  %10 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %3, align 8
  %11 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %10, i64 0, i32 5
  %12 = load i32, i32* %11, align 4
  %13 = tail call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder3PhiENS0_21MachineRepresentationEi(%"class.v8::internal::compiler::CommonOperatorBuilder"* %9, i8 zeroext %7, i32 %12) #6
  tail call void @_ZN2v88internal8compiler14NodeProperties8ChangeOpEPNS1_4NodeEPKNS1_8OperatorE(%"class.v8::internal::compiler::Node"* %1, %"class.v8::internal::compiler::Operator"* %13) #6
  ret void
}

declare zeroext i8 @_ZN2v88internal8compiler19PhiRepresentationOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"*) local_unnamed_addr #2

declare %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder3PhiENS0_21MachineRepresentationEi(%"class.v8::internal::compiler::CommonOperatorBuilder"*, i8 zeroext, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler22DecompressionOptimizer10ChangeLoadEPNS1_4NodeE(%"class.v8::internal::compiler::DecompressionOptimizer"* nocapture readonly, %"class.v8::internal::compiler::Node"*) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %1, i64 0, i32 0
  %4 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %3, align 8
  %5 = tail call i16 @_ZN2v88internal8compiler20LoadRepresentationOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %4) #6
  %6 = icmp eq i16 %5, 1801
  %7 = select i1 %6, i8 11, i8 10
  %8 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %3, align 8
  %9 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %8, i64 0, i32 2
  %10 = load i16, i16* %9, align 8
  switch i16 %10, label %41 [
    i16 437, label %11
    i16 439, label %17
    i16 438, label %23
    i16 512, label %29
    i16 504, label %35
  ]

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 2
  %13 = load %"class.v8::internal::compiler::MachineOperatorBuilder"*, %"class.v8::internal::compiler::MachineOperatorBuilder"** %12, align 8
  %14 = zext i8 %7 to i16
  %15 = or i16 %14, 1792
  %16 = tail call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler22MachineOperatorBuilder4LoadENS0_11MachineTypeE(%"class.v8::internal::compiler::MachineOperatorBuilder"* %13, i16 %15) #6
  br label %42

17:                                               ; preds = %2
  %18 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 2
  %19 = load %"class.v8::internal::compiler::MachineOperatorBuilder"*, %"class.v8::internal::compiler::MachineOperatorBuilder"** %18, align 8
  %20 = zext i8 %7 to i16
  %21 = or i16 %20, 1792
  %22 = tail call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler22MachineOperatorBuilder13LoadImmutableENS0_11MachineTypeE(%"class.v8::internal::compiler::MachineOperatorBuilder"* %19, i16 %21) #6
  br label %42

23:                                               ; preds = %2
  %24 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 2
  %25 = load %"class.v8::internal::compiler::MachineOperatorBuilder"*, %"class.v8::internal::compiler::MachineOperatorBuilder"** %24, align 8
  %26 = zext i8 %7 to i16
  %27 = or i16 %26, 1792
  %28 = tail call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler22MachineOperatorBuilder12PoisonedLoadENS0_11MachineTypeE(%"class.v8::internal::compiler::MachineOperatorBuilder"* %25, i16 %27) #6
  br label %42

29:                                               ; preds = %2
  %30 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 2
  %31 = load %"class.v8::internal::compiler::MachineOperatorBuilder"*, %"class.v8::internal::compiler::MachineOperatorBuilder"** %30, align 8
  %32 = zext i8 %7 to i16
  %33 = or i16 %32, 1792
  %34 = tail call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler22MachineOperatorBuilder13ProtectedLoadENS0_11MachineTypeE(%"class.v8::internal::compiler::MachineOperatorBuilder"* %31, i16 %33) #6
  br label %42

35:                                               ; preds = %2
  %36 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 2
  %37 = load %"class.v8::internal::compiler::MachineOperatorBuilder"*, %"class.v8::internal::compiler::MachineOperatorBuilder"** %36, align 8
  %38 = zext i8 %7 to i16
  %39 = or i16 %38, 1792
  %40 = tail call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler22MachineOperatorBuilder13UnalignedLoadENS0_11MachineTypeE(%"class.v8::internal::compiler::MachineOperatorBuilder"* %37, i16 %39) #6
  br label %42

41:                                               ; preds = %2
  tail call void (i8*, ...) @_Z8V8_FatalPKcz(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0)) #7
  unreachable

42:                                               ; preds = %35, %29, %23, %17, %11
  %43 = phi %"class.v8::internal::compiler::Operator"* [ %40, %35 ], [ %34, %29 ], [ %28, %23 ], [ %22, %17 ], [ %16, %11 ]
  tail call void @_ZN2v88internal8compiler14NodeProperties8ChangeOpEPNS1_4NodeEPKNS1_8OperatorE(%"class.v8::internal::compiler::Node"* %1, %"class.v8::internal::compiler::Operator"* %43) #6
  ret void
}

declare i16 @_ZN2v88internal8compiler20LoadRepresentationOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"*) local_unnamed_addr #2

declare %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler22MachineOperatorBuilder4LoadENS0_11MachineTypeE(%"class.v8::internal::compiler::MachineOperatorBuilder"*, i16) local_unnamed_addr #2

declare %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler22MachineOperatorBuilder13LoadImmutableENS0_11MachineTypeE(%"class.v8::internal::compiler::MachineOperatorBuilder"*, i16) local_unnamed_addr #2

declare %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler22MachineOperatorBuilder12PoisonedLoadENS0_11MachineTypeE(%"class.v8::internal::compiler::MachineOperatorBuilder"*, i16) local_unnamed_addr #2

declare %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler22MachineOperatorBuilder13ProtectedLoadENS0_11MachineTypeE(%"class.v8::internal::compiler::MachineOperatorBuilder"*, i16) local_unnamed_addr #2

declare %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler22MachineOperatorBuilder13UnalignedLoadENS0_11MachineTypeE(%"class.v8::internal::compiler::MachineOperatorBuilder"*, i16) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_Z8V8_FatalPKcz(i8*, ...) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler22DecompressionOptimizer11ChangeNodesEv(%"class.v8::internal::compiler::DecompressionOptimizer"* nocapture readonly) local_unnamed_addr #0 align 2 {
  %2 = alloca %"class.v8::internal::Handle", align 8
  %3 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 5, i32 0, i32 0, i32 0
  %4 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %3, align 8
  %5 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 5, i32 0, i32 0, i32 1
  %6 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %5, align 8
  %7 = icmp eq %"class.v8::internal::compiler::Node"** %4, %6
  br i1 %7, label %13, label %8

8:                                                ; preds = %1
  %9 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 3, i32 0, i32 0
  %10 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 1
  %11 = bitcast %"class.v8::internal::Handle"* %2 to i8*
  %12 = getelementptr inbounds %"class.v8::internal::Handle", %"class.v8::internal::Handle"* %2, i64 0, i32 0, i32 0
  br label %14

13:                                               ; preds = %42, %1
  ret void

14:                                               ; preds = %8, %42
  %15 = phi %"class.v8::internal::compiler::Node"** [ %4, %8 ], [ %43, %42 ]
  %16 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %15, align 8
  %17 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %16, i64 0, i32 2
  %18 = load i32, i32* %17, align 8
  %19 = load i32, i32* %9, align 4
  %20 = call i32 @llvm.usub.sat.i32(i32 %18, i32 %19) #6
  %21 = trunc i32 %20 to i8
  %22 = icmp eq i8 %21, 2
  br i1 %22, label %42, label %23

23:                                               ; preds = %14
  %24 = getelementptr inbounds %"class.v8::internal::compiler::Node", %"class.v8::internal::compiler::Node"* %16, i64 0, i32 0
  %25 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %24, align 8
  %26 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %25, i64 0, i32 2
  %27 = load i16, i16* %26, align 8
  switch i16 %27, label %41 [
    i16 30, label %28
    i16 35, label %32
  ]

28:                                               ; preds = %23
  %29 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %10, align 8
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #6
  %30 = call i64* @_ZN2v88internal8compiler14HeapConstantOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %25) #6
  store i64* %30, i64** %12, align 8
  %31 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder22CompressedHeapConstantERKNS0_6HandleINS0_10HeapObjectEEE(%"class.v8::internal::compiler::CommonOperatorBuilder"* %29, %"class.v8::internal::Handle"* nonnull dereferenceable(8) %2) #6
  call void @_ZN2v88internal8compiler14NodeProperties8ChangeOpEPNS1_4NodeEPKNS1_8OperatorE(%"class.v8::internal::compiler::Node"* %16, %"class.v8::internal::compiler::Operator"* %31) #6
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #6
  br label %42

32:                                               ; preds = %23
  %33 = call zeroext i8 @_ZN2v88internal8compiler19PhiRepresentationOfEPKNS1_8OperatorE(%"class.v8::internal::compiler::Operator"* %25) #6
  %34 = icmp eq i8 %33, 9
  %35 = select i1 %34, i8 11, i8 10
  %36 = load %"class.v8::internal::compiler::CommonOperatorBuilder"*, %"class.v8::internal::compiler::CommonOperatorBuilder"** %10, align 8
  %37 = load %"class.v8::internal::compiler::Operator"*, %"class.v8::internal::compiler::Operator"** %24, align 8
  %38 = getelementptr inbounds %"class.v8::internal::compiler::Operator", %"class.v8::internal::compiler::Operator"* %37, i64 0, i32 5
  %39 = load i32, i32* %38, align 4
  %40 = call %"class.v8::internal::compiler::Operator"* @_ZN2v88internal8compiler21CommonOperatorBuilder3PhiENS0_21MachineRepresentationEi(%"class.v8::internal::compiler::CommonOperatorBuilder"* %36, i8 zeroext %35, i32 %39) #6
  call void @_ZN2v88internal8compiler14NodeProperties8ChangeOpEPNS1_4NodeEPKNS1_8OperatorE(%"class.v8::internal::compiler::Node"* %16, %"class.v8::internal::compiler::Operator"* %40) #6
  br label %42

41:                                               ; preds = %23
  call void @_ZN2v88internal8compiler22DecompressionOptimizer10ChangeLoadEPNS1_4NodeE(%"class.v8::internal::compiler::DecompressionOptimizer"* %0, %"class.v8::internal::compiler::Node"* %16)
  br label %42

42:                                               ; preds = %28, %32, %41, %14
  %43 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %15, i64 1
  %44 = icmp eq %"class.v8::internal::compiler::Node"** %43, %6
  br i1 %44, label %13, label %14
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal8compiler22DecompressionOptimizer6ReduceEv(%"class.v8::internal::compiler::DecompressionOptimizer"*) local_unnamed_addr #0 align 2 {
  %2 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 0
  %3 = load %"class.v8::internal::compiler::Graph"*, %"class.v8::internal::compiler::Graph"** %2, align 8
  %4 = getelementptr inbounds %"class.v8::internal::compiler::Graph", %"class.v8::internal::compiler::Graph"* %3, i64 0, i32 2
  %5 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %4, align 8
  tail call void @_ZN2v88internal8compiler22DecompressionOptimizer27MaybeMarkAndQueueForRevisitEPNS1_4NodeENS2_5StateE(%"class.v8::internal::compiler::DecompressionOptimizer"* %0, %"class.v8::internal::compiler::Node"* %5, i8 zeroext 1) #6
  %6 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %51, label %9

9:                                                ; preds = %1
  %10 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 0, i32 1
  %11 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 1
  %12 = getelementptr inbounds %"class.v8::internal::compiler::DecompressionOptimizer", %"class.v8::internal::compiler::DecompressionOptimizer"* %0, i64 0, i32 4, i32 0, i32 0, i32 2, i32 1, i32 0, i32 1
  %13 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %12 to i64*
  %14 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %12 to %"class.v8::internal::compiler::Node"***
  br label %15

15:                                               ; preds = %48, %9
  %16 = phi i64 [ %7, %9 ], [ %49, %48 ]
  %17 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %10, align 8
  %18 = load i64, i64* %11, align 8
  %19 = lshr i64 %18, 9
  %20 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %17, i64 %19
  %21 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %20, align 8
  %22 = and i64 %18, 511
  %23 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %21, i64 %22
  %24 = load %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %23, align 8
  %25 = add i64 %16, -1
  store i64 %25, i64* %6, align 8
  %26 = add i64 %18, 1
  store i64 %26, i64* %11, align 8
  %27 = icmp ult i64 %26, 1024
  br i1 %27, label %48, label %28

28:                                               ; preds = %15
  %29 = load %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %17, align 8
  %30 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %12, align 8
  %31 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %30, null
  br i1 %31, label %36, label %32

32:                                               ; preds = %28
  %33 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %30, i64 0, i32 1
  %34 = load i64, i64* %33, align 8
  %35 = icmp ugt i64 %34, 512
  br i1 %35, label %43, label %36

36:                                               ; preds = %32, %28
  %37 = getelementptr inbounds %"class.v8::internal::compiler::Node"*, %"class.v8::internal::compiler::Node"** %29, i64 1
  %38 = bitcast %"class.v8::internal::compiler::Node"** %37 to i64*
  store i64 512, i64* %38, align 8
  %39 = load i64, i64* %13, align 8
  %40 = bitcast %"class.v8::internal::compiler::Node"** %29 to i64*
  store i64 %39, i64* %40, align 8
  store %"class.v8::internal::compiler::Node"** %29, %"class.v8::internal::compiler::Node"*** %14, align 8
  %41 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %10, align 8
  %42 = load i64, i64* %11, align 8
  br label %43

43:                                               ; preds = %36, %32
  %44 = phi i64 [ %26, %32 ], [ %42, %36 ]
  %45 = phi %"class.v8::internal::compiler::Node"*** [ %17, %32 ], [ %41, %36 ]
  %46 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %45, i64 1
  store %"class.v8::internal::compiler::Node"*** %46, %"class.v8::internal::compiler::Node"**** %10, align 8
  %47 = add i64 %44, -512
  store i64 %47, i64* %11, align 8
  br label %48

48:                                               ; preds = %43, %15
  tail call void @_ZN2v88internal8compiler22DecompressionOptimizer14MarkNodeInputsEPNS1_4NodeE(%"class.v8::internal::compiler::DecompressionOptimizer"* %0, %"class.v8::internal::compiler::Node"* %24) #6
  %49 = load i64, i64* %6, align 8
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %15

51:                                               ; preds = %48, %1
  tail call void @_ZN2v88internal8compiler22DecompressionOptimizer11ChangeNodesEv(%"class.v8::internal::compiler::DecompressionOptimizer"* %0)
  ret void
}

declare void @_ZN2v88internal8compiler14NodeMarkerBaseC2EPNS1_5GraphEj(%"class.v8::internal::compiler::NodeMarkerBase"*, %"class.v8::internal::compiler::Graph"*, i32) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__15dequeIPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS5_EEE19__add_back_capacityEv(%"class.std::__1::deque"*) local_unnamed_addr #0 comdat align 2 {
  %2 = alloca %"class.v8::internal::compiler::Node"**, align 8
  %3 = alloca %"class.v8::internal::compiler::Node"**, align 8
  %4 = alloca %"class.v8::internal::compiler::Node"**, align 8
  %5 = alloca %"class.v8::internal::compiler::Node"**, align 8
  %6 = alloca %"struct.std::__1::__split_buffer.27", align 16
  %7 = alloca %"class.v8::internal::compiler::Node"**, align 8
  %8 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 2, i32 1, i32 0
  %9 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = icmp ugt i64 %10, 511
  br i1 %11, label %12, label %22

12:                                               ; preds = %1
  %13 = add i64 %10, -512
  store i64 %13, i64* %9, align 8
  %14 = bitcast %"class.v8::internal::compiler::Node"*** %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #6
  %15 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %16 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %17 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %16, align 8
  %18 = bitcast %"class.v8::internal::compiler::Node"*** %17 to i64*
  %19 = load i64, i64* %18, align 8
  %20 = bitcast %"class.v8::internal::compiler::Node"*** %2 to i64*
  store i64 %19, i64* %20, align 8
  %21 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %17, i64 1
  store %"class.v8::internal::compiler::Node"*** %21, %"class.v8::internal::compiler::Node"**** %16, align 8
  call void @_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS6_EEE9push_backERKS6_(%"struct.std::__1::__split_buffer"* %15, %"class.v8::internal::compiler::Node"*** nonnull dereferenceable(8) %2)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #6
  br label %247

22:                                               ; preds = %1
  %23 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0
  %24 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 2
  %25 = bitcast %"class.v8::internal::compiler::Node"**** %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 1
  %28 = bitcast %"class.v8::internal::compiler::Node"**** %27 to i64*
  %29 = load i64, i64* %28, align 8
  %30 = sub i64 %26, %29
  %31 = ashr exact i64 %30, 3
  %32 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 0, i32 0
  %33 = bitcast %"class.v8::internal::compiler::Node"**** %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = bitcast %"class.std::__1::deque"* %0 to i64*
  %36 = load i64, i64* %35, align 8
  %37 = sub i64 %34, %36
  %38 = ashr exact i64 %37, 3
  %39 = icmp ult i64 %31, %38
  br i1 %39, label %40, label %112

40:                                               ; preds = %22
  %41 = icmp eq i64 %34, %26
  br i1 %41, label %74, label %42

42:                                               ; preds = %40
  %43 = bitcast %"class.v8::internal::compiler::Node"*** %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %43) #6
  %44 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 1
  %45 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %44, align 8
  %46 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %45, null
  br i1 %46, label %56, label %47

47:                                               ; preds = %42
  %48 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %45, i64 0, i32 1
  %49 = load i64, i64* %48, align 8
  %50 = icmp ult i64 %49, 512
  br i1 %50, label %56, label %51

51:                                               ; preds = %47
  %52 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %45 to %"class.v8::internal::compiler::Node"**
  %53 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %45 to i64*
  %54 = load i64, i64* %53, align 8
  %55 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %44 to i64*
  store i64 %54, i64* %55, align 8
  br label %72

56:                                               ; preds = %47, %42
  %57 = getelementptr inbounds %"class.v8::internal::RecyclingZoneAllocator.19", %"class.v8::internal::RecyclingZoneAllocator.19"* %8, i64 0, i32 0, i32 0
  %58 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %57, align 8
  %59 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %58, i64 0, i32 2
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %58, i64 0, i32 3
  %62 = load i64, i64* %61, align 8
  %63 = sub i64 %62, %60
  %64 = icmp ult i64 %63, 4096
  br i1 %64, label %65, label %67, !prof !2

65:                                               ; preds = %56
  %66 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %58, i64 4096) #6
  br label %69

67:                                               ; preds = %56
  %68 = add i64 %60, 4096
  store i64 %68, i64* %59, align 8
  br label %69

69:                                               ; preds = %67, %65
  %70 = phi i64 [ %66, %65 ], [ %60, %67 ]
  %71 = inttoptr i64 %70 to %"class.v8::internal::compiler::Node"**
  br label %72

72:                                               ; preds = %51, %69
  %73 = phi %"class.v8::internal::compiler::Node"** [ %52, %51 ], [ %71, %69 ]
  store %"class.v8::internal::compiler::Node"** %73, %"class.v8::internal::compiler::Node"*** %3, align 8
  call void @_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS6_EEE9push_backEOS6_(%"struct.std::__1::__split_buffer"* %23, %"class.v8::internal::compiler::Node"*** nonnull dereferenceable(8) %3)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %43) #6
  br label %247

74:                                               ; preds = %40
  %75 = bitcast %"class.v8::internal::compiler::Node"*** %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %75) #6
  %76 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 1
  %77 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %76, align 8
  %78 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %77, null
  br i1 %78, label %88, label %79

79:                                               ; preds = %74
  %80 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %77, i64 0, i32 1
  %81 = load i64, i64* %80, align 8
  %82 = icmp ult i64 %81, 512
  br i1 %82, label %88, label %83

83:                                               ; preds = %79
  %84 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %77 to %"class.v8::internal::compiler::Node"**
  %85 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %77 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %76 to i64*
  store i64 %86, i64* %87, align 8
  br label %104

88:                                               ; preds = %79, %74
  %89 = getelementptr inbounds %"class.v8::internal::RecyclingZoneAllocator.19", %"class.v8::internal::RecyclingZoneAllocator.19"* %8, i64 0, i32 0, i32 0
  %90 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %89, align 8
  %91 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %90, i64 0, i32 2
  %92 = load i64, i64* %91, align 8
  %93 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %90, i64 0, i32 3
  %94 = load i64, i64* %93, align 8
  %95 = sub i64 %94, %92
  %96 = icmp ult i64 %95, 4096
  br i1 %96, label %97, label %99, !prof !2

97:                                               ; preds = %88
  %98 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %90, i64 4096) #6
  br label %101

99:                                               ; preds = %88
  %100 = add i64 %92, 4096
  store i64 %100, i64* %91, align 8
  br label %101

101:                                              ; preds = %99, %97
  %102 = phi i64 [ %98, %97 ], [ %92, %99 ]
  %103 = inttoptr i64 %102 to %"class.v8::internal::compiler::Node"**
  br label %104

104:                                              ; preds = %83, %101
  %105 = phi %"class.v8::internal::compiler::Node"** [ %84, %83 ], [ %103, %101 ]
  store %"class.v8::internal::compiler::Node"** %105, %"class.v8::internal::compiler::Node"*** %4, align 8
  call void @_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS6_EEE10push_frontEOS6_(%"struct.std::__1::__split_buffer"* %23, %"class.v8::internal::compiler::Node"*** nonnull dereferenceable(8) %4)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %75) #6
  %106 = bitcast %"class.v8::internal::compiler::Node"*** %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %106) #6
  %107 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %27, align 8
  %108 = bitcast %"class.v8::internal::compiler::Node"*** %107 to i64*
  %109 = load i64, i64* %108, align 8
  %110 = bitcast %"class.v8::internal::compiler::Node"*** %5 to i64*
  store i64 %109, i64* %110, align 8
  %111 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %107, i64 1
  store %"class.v8::internal::compiler::Node"*** %111, %"class.v8::internal::compiler::Node"**** %27, align 8
  call void @_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS6_EEE9push_backERKS6_(%"struct.std::__1::__split_buffer"* %23, %"class.v8::internal::compiler::Node"*** nonnull dereferenceable(8) %5)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %106) #6
  br label %247

112:                                              ; preds = %22
  %113 = bitcast %"struct.std::__1::__split_buffer.27"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %113) #6
  %114 = ashr exact i64 %37, 2
  %115 = icmp eq i64 %37, 0
  %116 = select i1 %115, i64 1, i64 %114
  %117 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 1, i32 0
  %118 = getelementptr inbounds %"struct.std::__1::__split_buffer.27", %"struct.std::__1::__split_buffer.27"* %6, i64 0, i32 3, i32 0, i32 0
  store %"class.v8::internal::compiler::Node"*** null, %"class.v8::internal::compiler::Node"**** %118, align 8
  %119 = getelementptr inbounds %"struct.std::__1::__split_buffer.27", %"struct.std::__1::__split_buffer.27"* %6, i64 0, i32 3, i32 1, i32 0
  store %"class.v8::internal::RecyclingZoneAllocator"* %117, %"class.v8::internal::RecyclingZoneAllocator"** %119, align 8
  %120 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 0, i32 3, i32 1, i32 0, i32 1
  %121 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %120, align 8
  %122 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %121, null
  br i1 %122, label %132, label %123

123:                                              ; preds = %112
  %124 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %121, i64 0, i32 1
  %125 = load i64, i64* %124, align 8
  %126 = icmp ult i64 %125, %116
  br i1 %126, label %132, label %127

127:                                              ; preds = %123
  %128 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %121 to %"class.v8::internal::compiler::Node"***
  %129 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %121 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %120 to i64*
  store i64 %130, i64* %131, align 8
  br label %149

132:                                              ; preds = %123, %112
  %133 = getelementptr inbounds %"class.v8::internal::RecyclingZoneAllocator", %"class.v8::internal::RecyclingZoneAllocator"* %117, i64 0, i32 0, i32 0
  %134 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %133, align 8
  %135 = shl i64 %116, 3
  %136 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %134, i64 0, i32 2
  %137 = load i64, i64* %136, align 8
  %138 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %134, i64 0, i32 3
  %139 = load i64, i64* %138, align 8
  %140 = sub i64 %139, %137
  %141 = icmp ugt i64 %135, %140
  br i1 %141, label %142, label %144, !prof !2

142:                                              ; preds = %132
  %143 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %134, i64 %135) #6
  br label %146

144:                                              ; preds = %132
  %145 = add i64 %137, %135
  store i64 %145, i64* %136, align 8
  br label %146

146:                                              ; preds = %144, %142
  %147 = phi i64 [ %143, %142 ], [ %137, %144 ]
  %148 = inttoptr i64 %147 to %"class.v8::internal::compiler::Node"***
  br label %149

149:                                              ; preds = %127, %146
  %150 = phi %"class.v8::internal::compiler::Node"*** [ %128, %127 ], [ %148, %146 ]
  %151 = getelementptr inbounds %"struct.std::__1::__split_buffer.27", %"struct.std::__1::__split_buffer.27"* %6, i64 0, i32 0
  store %"class.v8::internal::compiler::Node"*** %150, %"class.v8::internal::compiler::Node"**** %151, align 16
  %152 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %150, i64 %31
  %153 = getelementptr inbounds %"struct.std::__1::__split_buffer.27", %"struct.std::__1::__split_buffer.27"* %6, i64 0, i32 2
  store %"class.v8::internal::compiler::Node"*** %152, %"class.v8::internal::compiler::Node"**** %153, align 16
  %154 = getelementptr inbounds %"struct.std::__1::__split_buffer.27", %"struct.std::__1::__split_buffer.27"* %6, i64 0, i32 1
  store %"class.v8::internal::compiler::Node"*** %152, %"class.v8::internal::compiler::Node"**** %154, align 8
  %155 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %150, i64 %116
  store %"class.v8::internal::compiler::Node"*** %155, %"class.v8::internal::compiler::Node"**** %118, align 8
  %156 = getelementptr inbounds %"class.std::__1::deque", %"class.std::__1::deque"* %0, i64 0, i32 0, i32 2, i32 1, i32 0, i32 1
  %157 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %156, align 8
  %158 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %157, null
  br i1 %158, label %168, label %159

159:                                              ; preds = %149
  %160 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %157, i64 0, i32 1
  %161 = load i64, i64* %160, align 8
  %162 = icmp ult i64 %161, 512
  br i1 %162, label %168, label %163

163:                                              ; preds = %159
  %164 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %157 to %"class.v8::internal::compiler::Node"**
  %165 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"* %157 to i64*
  %166 = load i64, i64* %165, align 8
  %167 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node *>::FreeBlock"** %156 to i64*
  store i64 %166, i64* %167, align 8
  br label %184

168:                                              ; preds = %159, %149
  %169 = getelementptr inbounds %"class.v8::internal::RecyclingZoneAllocator.19", %"class.v8::internal::RecyclingZoneAllocator.19"* %8, i64 0, i32 0, i32 0
  %170 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %169, align 8
  %171 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %170, i64 0, i32 2
  %172 = load i64, i64* %171, align 8
  %173 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %170, i64 0, i32 3
  %174 = load i64, i64* %173, align 8
  %175 = sub i64 %174, %172
  %176 = icmp ult i64 %175, 4096
  br i1 %176, label %177, label %179, !prof !2

177:                                              ; preds = %168
  %178 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %170, i64 4096) #6
  br label %181

179:                                              ; preds = %168
  %180 = add i64 %172, 4096
  store i64 %180, i64* %171, align 8
  br label %181

181:                                              ; preds = %179, %177
  %182 = phi i64 [ %178, %177 ], [ %172, %179 ]
  %183 = inttoptr i64 %182 to %"class.v8::internal::compiler::Node"**
  br label %184

184:                                              ; preds = %163, %181
  %185 = phi %"class.v8::internal::compiler::Node"** [ %164, %163 ], [ %183, %181 ]
  %186 = bitcast %"class.v8::internal::compiler::Node"*** %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %186) #6
  store %"class.v8::internal::compiler::Node"** %185, %"class.v8::internal::compiler::Node"*** %7, align 8
  call void @_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeERNS2_22RecyclingZoneAllocatorIS6_EEE9push_backEOS6_(%"struct.std::__1::__split_buffer.27"* nonnull %6, %"class.v8::internal::compiler::Node"*** nonnull dereferenceable(8) %7)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %186) #6
  %187 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %24, align 8
  %188 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %27, align 8
  %189 = icmp eq %"class.v8::internal::compiler::Node"*** %187, %188
  %190 = ptrtoint %"class.v8::internal::compiler::Node"*** %187 to i64
  br i1 %189, label %193, label %242

191:                                              ; preds = %242
  %192 = load i64, i64* %25, align 8
  br label %193

193:                                              ; preds = %191, %184
  %194 = phi i64 [ %192, %191 ], [ %190, %184 ]
  %195 = phi %"class.v8::internal::compiler::Node"*** [ %245, %191 ], [ %188, %184 ]
  %196 = ptrtoint %"class.v8::internal::compiler::Node"*** %195 to i64
  %197 = load i64, i64* %35, align 8
  %198 = bitcast %"struct.std::__1::__split_buffer.27"* %6 to i64*
  %199 = bitcast %"class.v8::internal::compiler::Node"**** %154 to i64*
  %200 = bitcast %"struct.std::__1::__split_buffer.27"* %6 to <2 x i64>*
  %201 = load <2 x i64>, <2 x i64>* %200, align 16
  store i64 %197, i64* %198, align 16
  %202 = bitcast %"class.std::__1::deque"* %0 to <2 x i64>*
  store <2 x i64> %201, <2 x i64>* %202, align 8
  store i64 %196, i64* %199, align 8
  %203 = bitcast %"class.v8::internal::compiler::Node"**** %153 to i64*
  %204 = bitcast %"class.v8::internal::compiler::Node"**** %118 to i64*
  %205 = bitcast %"class.v8::internal::compiler::Node"**** %153 to <2 x i64>*
  %206 = load <2 x i64>, <2 x i64>* %205, align 16
  store i64 %194, i64* %203, align 16
  %207 = load i64, i64* %33, align 8
  %208 = bitcast %"class.v8::internal::compiler::Node"**** %24 to <2 x i64>*
  store <2 x i64> %206, <2 x i64>* %208, align 8
  store i64 %207, i64* %204, align 8
  %209 = inttoptr i64 %194 to %"class.v8::internal::compiler::Node"***
  %210 = icmp eq %"class.v8::internal::compiler::Node"*** %195, %209
  %211 = inttoptr i64 %197 to %"class.v8::internal::compiler::Node"***
  br i1 %210, label %219, label %212

212:                                              ; preds = %193
  %213 = getelementptr %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %209, i64 -1
  %214 = ptrtoint %"class.v8::internal::compiler::Node"*** %213 to i64
  %215 = sub i64 %214, %196
  %216 = lshr i64 %215, 3
  %217 = xor i64 %216, -1
  %218 = getelementptr %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %209, i64 %217
  store %"class.v8::internal::compiler::Node"*** %218, %"class.v8::internal::compiler::Node"**** %153, align 16
  br label %219

219:                                              ; preds = %212, %193
  %220 = icmp eq i64 %197, 0
  br i1 %220, label %241, label %221

221:                                              ; preds = %219
  %222 = sub i64 %207, %197
  %223 = ashr exact i64 %222, 3
  %224 = icmp ult i64 %222, 16
  br i1 %224, label %241, label %225

225:                                              ; preds = %221
  %226 = load %"class.v8::internal::RecyclingZoneAllocator"*, %"class.v8::internal::RecyclingZoneAllocator"** %119, align 8
  %227 = getelementptr inbounds %"class.v8::internal::RecyclingZoneAllocator", %"class.v8::internal::RecyclingZoneAllocator"* %226, i64 0, i32 1
  %228 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %227, align 8
  %229 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %228, null
  br i1 %229, label %234, label %230

230:                                              ; preds = %225
  %231 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %228, i64 0, i32 1
  %232 = load i64, i64* %231, align 8
  %233 = icmp ugt i64 %232, %223
  br i1 %233, label %241, label %234

234:                                              ; preds = %230, %225
  %235 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %211, i64 1
  %236 = bitcast %"class.v8::internal::compiler::Node"*** %235 to i64*
  store i64 %223, i64* %236, align 8
  %237 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %227 to i64*
  %238 = load i64, i64* %237, align 8
  %239 = inttoptr i64 %197 to i64*
  store i64 %238, i64* %239, align 8
  %240 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %227 to %"class.v8::internal::compiler::Node"****
  store %"class.v8::internal::compiler::Node"*** %211, %"class.v8::internal::compiler::Node"**** %240, align 8
  br label %241

241:                                              ; preds = %219, %221, %230, %234
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %113) #6
  br label %247

242:                                              ; preds = %184, %242
  %243 = phi %"class.v8::internal::compiler::Node"*** [ %244, %242 ], [ %187, %184 ]
  %244 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %243, i64 -1
  call void @_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeERNS2_22RecyclingZoneAllocatorIS6_EEE10push_frontERKS6_(%"struct.std::__1::__split_buffer.27"* nonnull %6, %"class.v8::internal::compiler::Node"*** dereferenceable(8) %244)
  %245 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %27, align 8
  %246 = icmp eq %"class.v8::internal::compiler::Node"*** %244, %245
  br i1 %246, label %191, label %242

247:                                              ; preds = %241, %104, %72, %12
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS6_EEE9push_backERKS6_(%"struct.std::__1::__split_buffer"*, %"class.v8::internal::compiler::Node"*** dereferenceable(8)) local_unnamed_addr #4 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %5, align 8
  %7 = icmp eq %"class.v8::internal::compiler::Node"*** %4, %6
  %8 = ptrtoint %"class.v8::internal::compiler::Node"*** %6 to i64
  %9 = ptrtoint %"class.v8::internal::compiler::Node"*** %4 to i64
  %10 = bitcast %"class.v8::internal::compiler::Node"*** %4 to i64*
  br i1 %7, label %11, label %195

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %13 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %12, align 8
  %14 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %15 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %14, align 8
  %16 = icmp ugt %"class.v8::internal::compiler::Node"*** %13, %15
  %17 = ptrtoint %"class.v8::internal::compiler::Node"*** %15 to i64
  br i1 %16, label %18, label %37

18:                                               ; preds = %11
  %19 = ptrtoint %"class.v8::internal::compiler::Node"*** %13 to i64
  %20 = sub i64 %19, %17
  %21 = ashr exact i64 %20, 3
  %22 = add nsw i64 %21, 1
  %23 = sdiv i64 %22, -2
  %24 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %13, i64 %23
  %25 = sub i64 %9, %19
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %18
  %29 = bitcast %"class.v8::internal::compiler::Node"*** %24 to i8*
  %30 = bitcast %"class.v8::internal::compiler::Node"*** %13 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #6
  %31 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %12, align 8
  br label %32

32:                                               ; preds = %18, %28
  %33 = phi %"class.v8::internal::compiler::Node"*** [ %13, %18 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %24, i64 %26
  store %"class.v8::internal::compiler::Node"*** %34, %"class.v8::internal::compiler::Node"**** %3, align 8
  %35 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %33, i64 %23
  store %"class.v8::internal::compiler::Node"*** %35, %"class.v8::internal::compiler::Node"**** %12, align 8
  %36 = bitcast %"class.v8::internal::compiler::Node"*** %34 to i64*
  br label %195

37:                                               ; preds = %11
  %38 = bitcast %"class.v8::internal::compiler::Node"**** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %17
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = lshr i64 %43, 2
  %45 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 1, i32 0, i32 1
  %46 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %45, align 8
  %47 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %46, null
  br i1 %47, label %58, label %48

48:                                               ; preds = %37
  %49 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %46, i64 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = icmp ult i64 %50, %43
  br i1 %51, label %58, label %52

52:                                               ; preds = %48
  %53 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %46 to %"class.v8::internal::compiler::Node"***
  %54 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %46 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %45 to i64*
  store i64 %55, i64* %56, align 8
  %57 = bitcast %"class.v8::internal::compiler::Node"**** %3 to i64*
  br label %78

58:                                               ; preds = %48, %37
  %59 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %60 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %59, align 8
  %61 = shl i64 %43, 3
  %62 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %60, i64 0, i32 2
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %60, i64 0, i32 3
  %65 = load i64, i64* %64, align 8
  %66 = sub i64 %65, %63
  %67 = icmp ugt i64 %61, %66
  br i1 %67, label %68, label %70, !prof !2

68:                                               ; preds = %58
  %69 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %60, i64 %61) #6
  br label %72

70:                                               ; preds = %58
  %71 = add i64 %63, %61
  store i64 %71, i64* %62, align 8
  br label %72

72:                                               ; preds = %70, %68
  %73 = phi i64 [ %69, %68 ], [ %63, %70 ]
  %74 = inttoptr i64 %73 to %"class.v8::internal::compiler::Node"***
  %75 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %12, align 8
  %76 = bitcast %"class.v8::internal::compiler::Node"**** %3 to i64*
  %77 = load i64, i64* %76, align 8
  br label %78

78:                                               ; preds = %52, %72
  %79 = phi i64* [ %57, %52 ], [ %76, %72 ]
  %80 = phi i64 [ %9, %52 ], [ %77, %72 ]
  %81 = phi %"class.v8::internal::compiler::Node"*** [ %13, %52 ], [ %75, %72 ]
  %82 = phi %"class.v8::internal::compiler::Node"*** [ %53, %52 ], [ %74, %72 ]
  %83 = ptrtoint %"class.v8::internal::compiler::Node"*** %82 to i64
  %84 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %82, i64 %44
  %85 = ptrtoint %"class.v8::internal::compiler::Node"*** %84 to i64
  %86 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %82, i64 %43
  %87 = ptrtoint %"class.v8::internal::compiler::Node"*** %86 to i64
  %88 = ptrtoint %"class.v8::internal::compiler::Node"*** %81 to i64
  %89 = sub i64 %80, %88
  %90 = ashr exact i64 %89, 3
  %91 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %84, i64 %90
  %92 = icmp eq i64 %89, 0
  br i1 %92, label %167, label %93

93:                                               ; preds = %78
  %94 = add i64 %89, -8
  %95 = lshr i64 %94, 3
  %96 = add nuw nsw i64 %95, 1
  %97 = and i64 %96, 7
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %114, label %99

99:                                               ; preds = %93, %99
  %100 = phi %"class.v8::internal::compiler::Node"*** [ %107, %99 ], [ %84, %93 ]
  %101 = phi i64 [ %108, %99 ], [ %85, %93 ]
  %102 = phi %"class.v8::internal::compiler::Node"*** [ %109, %99 ], [ %81, %93 ]
  %103 = phi i64 [ %110, %99 ], [ %97, %93 ]
  %104 = bitcast %"class.v8::internal::compiler::Node"*** %102 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = inttoptr i64 %101 to i64*
  store i64 %105, i64* %106, align 8
  %107 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %100, i64 1
  %108 = ptrtoint %"class.v8::internal::compiler::Node"*** %107 to i64
  %109 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %102, i64 1
  %110 = add i64 %103, -1
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %112, label %99, !llvm.loop !13

112:                                              ; preds = %99
  %113 = ptrtoint %"class.v8::internal::compiler::Node"*** %107 to i64
  br label %114

114:                                              ; preds = %93, %112
  %115 = phi %"class.v8::internal::compiler::Node"*** [ %84, %93 ], [ %107, %112 ]
  %116 = phi i64 [ %85, %93 ], [ %113, %112 ]
  %117 = phi %"class.v8::internal::compiler::Node"*** [ %81, %93 ], [ %109, %112 ]
  %118 = icmp ult i64 %94, 56
  br i1 %118, label %165, label %119

119:                                              ; preds = %114, %119
  %120 = phi %"class.v8::internal::compiler::Node"*** [ %161, %119 ], [ %115, %114 ]
  %121 = phi i64 [ %162, %119 ], [ %116, %114 ]
  %122 = phi %"class.v8::internal::compiler::Node"*** [ %163, %119 ], [ %117, %114 ]
  %123 = bitcast %"class.v8::internal::compiler::Node"*** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = inttoptr i64 %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 1
  %127 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 1
  %128 = bitcast %"class.v8::internal::compiler::Node"*** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.v8::internal::compiler::Node"*** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 2
  %132 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 2
  %133 = bitcast %"class.v8::internal::compiler::Node"*** %132 to i64*
  %134 = load i64, i64* %133, align 8
  %135 = bitcast %"class.v8::internal::compiler::Node"*** %131 to i64*
  store i64 %134, i64* %135, align 8
  %136 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 3
  %137 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 3
  %138 = bitcast %"class.v8::internal::compiler::Node"*** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = bitcast %"class.v8::internal::compiler::Node"*** %136 to i64*
  store i64 %139, i64* %140, align 8
  %141 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 4
  %142 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 4
  %143 = bitcast %"class.v8::internal::compiler::Node"*** %142 to i64*
  %144 = load i64, i64* %143, align 8
  %145 = bitcast %"class.v8::internal::compiler::Node"*** %141 to i64*
  store i64 %144, i64* %145, align 8
  %146 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 5
  %147 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 5
  %148 = bitcast %"class.v8::internal::compiler::Node"*** %147 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = bitcast %"class.v8::internal::compiler::Node"*** %146 to i64*
  store i64 %149, i64* %150, align 8
  %151 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 6
  %152 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 6
  %153 = bitcast %"class.v8::internal::compiler::Node"*** %152 to i64*
  %154 = load i64, i64* %153, align 8
  %155 = bitcast %"class.v8::internal::compiler::Node"*** %151 to i64*
  store i64 %154, i64* %155, align 8
  %156 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 7
  %157 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 7
  %158 = bitcast %"class.v8::internal::compiler::Node"*** %157 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = bitcast %"class.v8::internal::compiler::Node"*** %156 to i64*
  store i64 %159, i64* %160, align 8
  %161 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 8
  %162 = ptrtoint %"class.v8::internal::compiler::Node"*** %161 to i64
  %163 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 8
  %164 = icmp eq %"class.v8::internal::compiler::Node"*** %91, %161
  br i1 %164, label %165, label %119

165:                                              ; preds = %119, %114
  %166 = ptrtoint %"class.v8::internal::compiler::Node"*** %91 to i64
  br label %167

167:                                              ; preds = %78, %165
  %168 = phi i64 [ %166, %165 ], [ %85, %78 ]
  %169 = load i64, i64* %39, align 8
  store i64 %83, i64* %39, align 8
  %170 = bitcast %"class.v8::internal::compiler::Node"**** %12 to i64*
  store i64 %85, i64* %170, align 8
  store i64 %168, i64* %79, align 8
  %171 = load i64, i64* %38, align 8
  store i64 %87, i64* %38, align 8
  %172 = inttoptr i64 %169 to %"class.v8::internal::compiler::Node"***
  %173 = icmp eq i64 %169, 0
  %174 = inttoptr i64 %168 to i64*
  br i1 %173, label %195, label %175

175:                                              ; preds = %167
  %176 = sub i64 %171, %169
  %177 = ashr exact i64 %176, 3
  %178 = icmp ult i64 %176, 16
  br i1 %178, label %195, label %179

179:                                              ; preds = %175
  %180 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %45, align 8
  %181 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %180, null
  br i1 %181, label %186, label %182

182:                                              ; preds = %179
  %183 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %180, i64 0, i32 1
  %184 = load i64, i64* %183, align 8
  %185 = icmp ugt i64 %184, %177
  br i1 %185, label %195, label %186

186:                                              ; preds = %182, %179
  %187 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %172, i64 1
  %188 = bitcast %"class.v8::internal::compiler::Node"*** %187 to i64*
  store i64 %177, i64* %188, align 8
  %189 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %45 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = inttoptr i64 %169 to i64*
  store i64 %190, i64* %191, align 8
  %192 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %45 to %"class.v8::internal::compiler::Node"****
  store %"class.v8::internal::compiler::Node"*** %172, %"class.v8::internal::compiler::Node"**** %192, align 8
  %193 = bitcast %"class.v8::internal::compiler::Node"**** %3 to i64**
  %194 = load i64*, i64** %193, align 8
  br label %195

195:                                              ; preds = %186, %182, %175, %167, %32, %2
  %196 = phi i64* [ %194, %186 ], [ %174, %182 ], [ %174, %175 ], [ %174, %167 ], [ %36, %32 ], [ %10, %2 ]
  %197 = bitcast %"class.v8::internal::compiler::Node"*** %1 to i64*
  %198 = load i64, i64* %197, align 8
  store i64 %198, i64* %196, align 8
  %199 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %200 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %199, i64 1
  store %"class.v8::internal::compiler::Node"*** %200, %"class.v8::internal::compiler::Node"**** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS6_EEE9push_backEOS6_(%"struct.std::__1::__split_buffer"*, %"class.v8::internal::compiler::Node"*** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %4 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %5, align 8
  %7 = icmp eq %"class.v8::internal::compiler::Node"*** %4, %6
  %8 = ptrtoint %"class.v8::internal::compiler::Node"*** %6 to i64
  %9 = ptrtoint %"class.v8::internal::compiler::Node"*** %4 to i64
  %10 = bitcast %"class.v8::internal::compiler::Node"*** %4 to i64*
  br i1 %7, label %11, label %195

11:                                               ; preds = %2
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %13 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %12, align 8
  %14 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %15 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %14, align 8
  %16 = icmp ugt %"class.v8::internal::compiler::Node"*** %13, %15
  %17 = ptrtoint %"class.v8::internal::compiler::Node"*** %15 to i64
  br i1 %16, label %18, label %37

18:                                               ; preds = %11
  %19 = ptrtoint %"class.v8::internal::compiler::Node"*** %13 to i64
  %20 = sub i64 %19, %17
  %21 = ashr exact i64 %20, 3
  %22 = add nsw i64 %21, 1
  %23 = sdiv i64 %22, -2
  %24 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %13, i64 %23
  %25 = sub i64 %9, %19
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %18
  %29 = bitcast %"class.v8::internal::compiler::Node"*** %24 to i8*
  %30 = bitcast %"class.v8::internal::compiler::Node"*** %13 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #6
  %31 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %12, align 8
  br label %32

32:                                               ; preds = %18, %28
  %33 = phi %"class.v8::internal::compiler::Node"*** [ %13, %18 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %24, i64 %26
  store %"class.v8::internal::compiler::Node"*** %34, %"class.v8::internal::compiler::Node"**** %3, align 8
  %35 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %33, i64 %23
  store %"class.v8::internal::compiler::Node"*** %35, %"class.v8::internal::compiler::Node"**** %12, align 8
  %36 = bitcast %"class.v8::internal::compiler::Node"*** %34 to i64*
  br label %195

37:                                               ; preds = %11
  %38 = bitcast %"class.v8::internal::compiler::Node"**** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %8, %17
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = lshr i64 %43, 2
  %45 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 1, i32 0, i32 1
  %46 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %45, align 8
  %47 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %46, null
  br i1 %47, label %58, label %48

48:                                               ; preds = %37
  %49 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %46, i64 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = icmp ult i64 %50, %43
  br i1 %51, label %58, label %52

52:                                               ; preds = %48
  %53 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %46 to %"class.v8::internal::compiler::Node"***
  %54 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %46 to i64*
  %55 = load i64, i64* %54, align 8
  %56 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %45 to i64*
  store i64 %55, i64* %56, align 8
  %57 = bitcast %"class.v8::internal::compiler::Node"**** %3 to i64*
  br label %78

58:                                               ; preds = %48, %37
  %59 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %60 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %59, align 8
  %61 = shl i64 %43, 3
  %62 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %60, i64 0, i32 2
  %63 = load i64, i64* %62, align 8
  %64 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %60, i64 0, i32 3
  %65 = load i64, i64* %64, align 8
  %66 = sub i64 %65, %63
  %67 = icmp ugt i64 %61, %66
  br i1 %67, label %68, label %70, !prof !2

68:                                               ; preds = %58
  %69 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %60, i64 %61) #6
  br label %72

70:                                               ; preds = %58
  %71 = add i64 %63, %61
  store i64 %71, i64* %62, align 8
  br label %72

72:                                               ; preds = %70, %68
  %73 = phi i64 [ %69, %68 ], [ %63, %70 ]
  %74 = inttoptr i64 %73 to %"class.v8::internal::compiler::Node"***
  %75 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %12, align 8
  %76 = bitcast %"class.v8::internal::compiler::Node"**** %3 to i64*
  %77 = load i64, i64* %76, align 8
  br label %78

78:                                               ; preds = %52, %72
  %79 = phi i64* [ %57, %52 ], [ %76, %72 ]
  %80 = phi i64 [ %9, %52 ], [ %77, %72 ]
  %81 = phi %"class.v8::internal::compiler::Node"*** [ %13, %52 ], [ %75, %72 ]
  %82 = phi %"class.v8::internal::compiler::Node"*** [ %53, %52 ], [ %74, %72 ]
  %83 = ptrtoint %"class.v8::internal::compiler::Node"*** %82 to i64
  %84 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %82, i64 %44
  %85 = ptrtoint %"class.v8::internal::compiler::Node"*** %84 to i64
  %86 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %82, i64 %43
  %87 = ptrtoint %"class.v8::internal::compiler::Node"*** %86 to i64
  %88 = ptrtoint %"class.v8::internal::compiler::Node"*** %81 to i64
  %89 = sub i64 %80, %88
  %90 = ashr exact i64 %89, 3
  %91 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %84, i64 %90
  %92 = icmp eq i64 %89, 0
  br i1 %92, label %167, label %93

93:                                               ; preds = %78
  %94 = add i64 %89, -8
  %95 = lshr i64 %94, 3
  %96 = add nuw nsw i64 %95, 1
  %97 = and i64 %96, 7
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %114, label %99

99:                                               ; preds = %93, %99
  %100 = phi %"class.v8::internal::compiler::Node"*** [ %107, %99 ], [ %84, %93 ]
  %101 = phi i64 [ %108, %99 ], [ %85, %93 ]
  %102 = phi %"class.v8::internal::compiler::Node"*** [ %109, %99 ], [ %81, %93 ]
  %103 = phi i64 [ %110, %99 ], [ %97, %93 ]
  %104 = bitcast %"class.v8::internal::compiler::Node"*** %102 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = inttoptr i64 %101 to i64*
  store i64 %105, i64* %106, align 8
  %107 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %100, i64 1
  %108 = ptrtoint %"class.v8::internal::compiler::Node"*** %107 to i64
  %109 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %102, i64 1
  %110 = add i64 %103, -1
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %112, label %99, !llvm.loop !14

112:                                              ; preds = %99
  %113 = ptrtoint %"class.v8::internal::compiler::Node"*** %107 to i64
  br label %114

114:                                              ; preds = %93, %112
  %115 = phi %"class.v8::internal::compiler::Node"*** [ %84, %93 ], [ %107, %112 ]
  %116 = phi i64 [ %85, %93 ], [ %113, %112 ]
  %117 = phi %"class.v8::internal::compiler::Node"*** [ %81, %93 ], [ %109, %112 ]
  %118 = icmp ult i64 %94, 56
  br i1 %118, label %165, label %119

119:                                              ; preds = %114, %119
  %120 = phi %"class.v8::internal::compiler::Node"*** [ %161, %119 ], [ %115, %114 ]
  %121 = phi i64 [ %162, %119 ], [ %116, %114 ]
  %122 = phi %"class.v8::internal::compiler::Node"*** [ %163, %119 ], [ %117, %114 ]
  %123 = bitcast %"class.v8::internal::compiler::Node"*** %122 to i64*
  %124 = load i64, i64* %123, align 8
  %125 = inttoptr i64 %121 to i64*
  store i64 %124, i64* %125, align 8
  %126 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 1
  %127 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 1
  %128 = bitcast %"class.v8::internal::compiler::Node"*** %127 to i64*
  %129 = load i64, i64* %128, align 8
  %130 = bitcast %"class.v8::internal::compiler::Node"*** %126 to i64*
  store i64 %129, i64* %130, align 8
  %131 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 2
  %132 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 2
  %133 = bitcast %"class.v8::internal::compiler::Node"*** %132 to i64*
  %134 = load i64, i64* %133, align 8
  %135 = bitcast %"class.v8::internal::compiler::Node"*** %131 to i64*
  store i64 %134, i64* %135, align 8
  %136 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 3
  %137 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 3
  %138 = bitcast %"class.v8::internal::compiler::Node"*** %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = bitcast %"class.v8::internal::compiler::Node"*** %136 to i64*
  store i64 %139, i64* %140, align 8
  %141 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 4
  %142 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 4
  %143 = bitcast %"class.v8::internal::compiler::Node"*** %142 to i64*
  %144 = load i64, i64* %143, align 8
  %145 = bitcast %"class.v8::internal::compiler::Node"*** %141 to i64*
  store i64 %144, i64* %145, align 8
  %146 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 5
  %147 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 5
  %148 = bitcast %"class.v8::internal::compiler::Node"*** %147 to i64*
  %149 = load i64, i64* %148, align 8
  %150 = bitcast %"class.v8::internal::compiler::Node"*** %146 to i64*
  store i64 %149, i64* %150, align 8
  %151 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 6
  %152 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 6
  %153 = bitcast %"class.v8::internal::compiler::Node"*** %152 to i64*
  %154 = load i64, i64* %153, align 8
  %155 = bitcast %"class.v8::internal::compiler::Node"*** %151 to i64*
  store i64 %154, i64* %155, align 8
  %156 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 7
  %157 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 7
  %158 = bitcast %"class.v8::internal::compiler::Node"*** %157 to i64*
  %159 = load i64, i64* %158, align 8
  %160 = bitcast %"class.v8::internal::compiler::Node"*** %156 to i64*
  store i64 %159, i64* %160, align 8
  %161 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 8
  %162 = ptrtoint %"class.v8::internal::compiler::Node"*** %161 to i64
  %163 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %122, i64 8
  %164 = icmp eq %"class.v8::internal::compiler::Node"*** %91, %161
  br i1 %164, label %165, label %119

165:                                              ; preds = %119, %114
  %166 = ptrtoint %"class.v8::internal::compiler::Node"*** %91 to i64
  br label %167

167:                                              ; preds = %78, %165
  %168 = phi i64 [ %166, %165 ], [ %85, %78 ]
  %169 = load i64, i64* %39, align 8
  store i64 %83, i64* %39, align 8
  %170 = bitcast %"class.v8::internal::compiler::Node"**** %12 to i64*
  store i64 %85, i64* %170, align 8
  store i64 %168, i64* %79, align 8
  %171 = load i64, i64* %38, align 8
  store i64 %87, i64* %38, align 8
  %172 = inttoptr i64 %169 to %"class.v8::internal::compiler::Node"***
  %173 = icmp eq i64 %169, 0
  %174 = inttoptr i64 %168 to i64*
  br i1 %173, label %195, label %175

175:                                              ; preds = %167
  %176 = sub i64 %171, %169
  %177 = ashr exact i64 %176, 3
  %178 = icmp ult i64 %176, 16
  br i1 %178, label %195, label %179

179:                                              ; preds = %175
  %180 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %45, align 8
  %181 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %180, null
  br i1 %181, label %186, label %182

182:                                              ; preds = %179
  %183 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %180, i64 0, i32 1
  %184 = load i64, i64* %183, align 8
  %185 = icmp ugt i64 %184, %177
  br i1 %185, label %195, label %186

186:                                              ; preds = %182, %179
  %187 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %172, i64 1
  %188 = bitcast %"class.v8::internal::compiler::Node"*** %187 to i64*
  store i64 %177, i64* %188, align 8
  %189 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %45 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = inttoptr i64 %169 to i64*
  store i64 %190, i64* %191, align 8
  %192 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %45 to %"class.v8::internal::compiler::Node"****
  store %"class.v8::internal::compiler::Node"*** %172, %"class.v8::internal::compiler::Node"**** %192, align 8
  %193 = bitcast %"class.v8::internal::compiler::Node"**** %3 to i64**
  %194 = load i64*, i64** %193, align 8
  br label %195

195:                                              ; preds = %186, %182, %175, %167, %32, %2
  %196 = phi i64* [ %194, %186 ], [ %174, %182 ], [ %174, %175 ], [ %174, %167 ], [ %36, %32 ], [ %10, %2 ]
  %197 = bitcast %"class.v8::internal::compiler::Node"*** %1 to i64*
  %198 = load i64, i64* %197, align 8
  store i64 %198, i64* %196, align 8
  %199 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %200 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %199, i64 1
  store %"class.v8::internal::compiler::Node"*** %200, %"class.v8::internal::compiler::Node"**** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeENS2_22RecyclingZoneAllocatorIS6_EEE10push_frontEOS6_(%"struct.std::__1::__split_buffer"*, %"class.v8::internal::compiler::Node"*** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 1
  %4 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 0
  %6 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %5, align 8
  %7 = icmp eq %"class.v8::internal::compiler::Node"*** %4, %6
  %8 = ptrtoint %"class.v8::internal::compiler::Node"*** %6 to i64
  br i1 %7, label %9, label %194

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 2
  %11 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %12, align 8
  %14 = icmp ult %"class.v8::internal::compiler::Node"*** %11, %13
  %15 = bitcast %"class.v8::internal::compiler::Node"**** %12 to i64*
  %16 = ptrtoint %"class.v8::internal::compiler::Node"*** %13 to i64
  %17 = ptrtoint %"class.v8::internal::compiler::Node"*** %11 to i64
  br i1 %14, label %18, label %38

18:                                               ; preds = %9
  %19 = sub i64 %16, %17
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %11, i64 %22
  %24 = ptrtoint %"class.v8::internal::compiler::Node"*** %4 to i64
  %25 = sub i64 %17, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %18
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %23, i64 %29
  %31 = bitcast %"class.v8::internal::compiler::Node"*** %30 to i8*
  %32 = bitcast %"class.v8::internal::compiler::Node"*** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #6
  %33 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %10, align 8
  br label %34

34:                                               ; preds = %18, %27
  %35 = phi %"class.v8::internal::compiler::Node"*** [ %33, %27 ], [ %11, %18 ]
  %36 = phi %"class.v8::internal::compiler::Node"*** [ %30, %27 ], [ %23, %18 ]
  store %"class.v8::internal::compiler::Node"*** %36, %"class.v8::internal::compiler::Node"**** %3, align 8
  %37 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %35, i64 %22
  store %"class.v8::internal::compiler::Node"*** %37, %"class.v8::internal::compiler::Node"**** %10, align 8
  br label %194

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = add nsw i64 %43, 3
  %45 = lshr i64 %44, 2
  %46 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 1, i32 0, i32 1
  %47 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %46, align 8
  %48 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %47, null
  br i1 %48, label %59, label %49

49:                                               ; preds = %38
  %50 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %47, i64 0, i32 1
  %51 = load i64, i64* %50, align 8
  %52 = icmp ult i64 %51, %43
  br i1 %52, label %59, label %53

53:                                               ; preds = %49
  %54 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %47 to %"class.v8::internal::compiler::Node"***
  %55 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %47 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %46 to i64*
  store i64 %56, i64* %57, align 8
  %58 = bitcast %"class.v8::internal::compiler::Node"**** %10 to i64*
  br label %79

59:                                               ; preds = %49, %38
  %60 = getelementptr inbounds %"struct.std::__1::__split_buffer", %"struct.std::__1::__split_buffer"* %0, i64 0, i32 3, i32 1, i32 0, i32 0, i32 0
  %61 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %60, align 8
  %62 = shl i64 %43, 3
  %63 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %61, i64 0, i32 2
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %61, i64 0, i32 3
  %66 = load i64, i64* %65, align 8
  %67 = sub i64 %66, %64
  %68 = icmp ugt i64 %62, %67
  br i1 %68, label %69, label %71, !prof !2

69:                                               ; preds = %59
  %70 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %61, i64 %62) #6
  br label %73

71:                                               ; preds = %59
  %72 = add i64 %64, %62
  store i64 %72, i64* %63, align 8
  br label %73

73:                                               ; preds = %71, %69
  %74 = phi i64 [ %70, %69 ], [ %64, %71 ]
  %75 = inttoptr i64 %74 to %"class.v8::internal::compiler::Node"***
  %76 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %77 = bitcast %"class.v8::internal::compiler::Node"**** %10 to i64*
  %78 = load i64, i64* %77, align 8
  br label %79

79:                                               ; preds = %53, %73
  %80 = phi i64* [ %58, %53 ], [ %77, %73 ]
  %81 = phi i64 [ %17, %53 ], [ %78, %73 ]
  %82 = phi %"class.v8::internal::compiler::Node"*** [ %4, %53 ], [ %76, %73 ]
  %83 = phi %"class.v8::internal::compiler::Node"*** [ %54, %53 ], [ %75, %73 ]
  %84 = ptrtoint %"class.v8::internal::compiler::Node"*** %83 to i64
  %85 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %83, i64 %45
  %86 = ptrtoint %"class.v8::internal::compiler::Node"*** %85 to i64
  %87 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %83, i64 %43
  %88 = ptrtoint %"class.v8::internal::compiler::Node"*** %87 to i64
  %89 = ptrtoint %"class.v8::internal::compiler::Node"*** %82 to i64
  %90 = sub i64 %81, %89
  %91 = ashr exact i64 %90, 3
  %92 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %85, i64 %91
  %93 = icmp eq i64 %90, 0
  br i1 %93, label %168, label %94

94:                                               ; preds = %79
  %95 = add i64 %90, -8
  %96 = lshr i64 %95, 3
  %97 = add nuw nsw i64 %96, 1
  %98 = and i64 %97, 7
  %99 = icmp eq i64 %98, 0
  br i1 %99, label %115, label %100

100:                                              ; preds = %94, %100
  %101 = phi %"class.v8::internal::compiler::Node"*** [ %108, %100 ], [ %85, %94 ]
  %102 = phi i64 [ %109, %100 ], [ %86, %94 ]
  %103 = phi %"class.v8::internal::compiler::Node"*** [ %110, %100 ], [ %82, %94 ]
  %104 = phi i64 [ %111, %100 ], [ %98, %94 ]
  %105 = bitcast %"class.v8::internal::compiler::Node"*** %103 to i64*
  %106 = load i64, i64* %105, align 8
  %107 = inttoptr i64 %102 to i64*
  store i64 %106, i64* %107, align 8
  %108 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %101, i64 1
  %109 = ptrtoint %"class.v8::internal::compiler::Node"*** %108 to i64
  %110 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %103, i64 1
  %111 = add i64 %104, -1
  %112 = icmp eq i64 %111, 0
  br i1 %112, label %113, label %100, !llvm.loop !15

113:                                              ; preds = %100
  %114 = ptrtoint %"class.v8::internal::compiler::Node"*** %108 to i64
  br label %115

115:                                              ; preds = %94, %113
  %116 = phi %"class.v8::internal::compiler::Node"*** [ %85, %94 ], [ %108, %113 ]
  %117 = phi i64 [ %86, %94 ], [ %114, %113 ]
  %118 = phi %"class.v8::internal::compiler::Node"*** [ %82, %94 ], [ %110, %113 ]
  %119 = icmp ult i64 %95, 56
  br i1 %119, label %166, label %120

120:                                              ; preds = %115, %120
  %121 = phi %"class.v8::internal::compiler::Node"*** [ %162, %120 ], [ %116, %115 ]
  %122 = phi i64 [ %163, %120 ], [ %117, %115 ]
  %123 = phi %"class.v8::internal::compiler::Node"*** [ %164, %120 ], [ %118, %115 ]
  %124 = bitcast %"class.v8::internal::compiler::Node"*** %123 to i64*
  %125 = load i64, i64* %124, align 8
  %126 = inttoptr i64 %122 to i64*
  store i64 %125, i64* %126, align 8
  %127 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 1
  %128 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %123, i64 1
  %129 = bitcast %"class.v8::internal::compiler::Node"*** %128 to i64*
  %130 = load i64, i64* %129, align 8
  %131 = bitcast %"class.v8::internal::compiler::Node"*** %127 to i64*
  store i64 %130, i64* %131, align 8
  %132 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 2
  %133 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %123, i64 2
  %134 = bitcast %"class.v8::internal::compiler::Node"*** %133 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = bitcast %"class.v8::internal::compiler::Node"*** %132 to i64*
  store i64 %135, i64* %136, align 8
  %137 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 3
  %138 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %123, i64 3
  %139 = bitcast %"class.v8::internal::compiler::Node"*** %138 to i64*
  %140 = load i64, i64* %139, align 8
  %141 = bitcast %"class.v8::internal::compiler::Node"*** %137 to i64*
  store i64 %140, i64* %141, align 8
  %142 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 4
  %143 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %123, i64 4
  %144 = bitcast %"class.v8::internal::compiler::Node"*** %143 to i64*
  %145 = load i64, i64* %144, align 8
  %146 = bitcast %"class.v8::internal::compiler::Node"*** %142 to i64*
  store i64 %145, i64* %146, align 8
  %147 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 5
  %148 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %123, i64 5
  %149 = bitcast %"class.v8::internal::compiler::Node"*** %148 to i64*
  %150 = load i64, i64* %149, align 8
  %151 = bitcast %"class.v8::internal::compiler::Node"*** %147 to i64*
  store i64 %150, i64* %151, align 8
  %152 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 6
  %153 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %123, i64 6
  %154 = bitcast %"class.v8::internal::compiler::Node"*** %153 to i64*
  %155 = load i64, i64* %154, align 8
  %156 = bitcast %"class.v8::internal::compiler::Node"*** %152 to i64*
  store i64 %155, i64* %156, align 8
  %157 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 7
  %158 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %123, i64 7
  %159 = bitcast %"class.v8::internal::compiler::Node"*** %158 to i64*
  %160 = load i64, i64* %159, align 8
  %161 = bitcast %"class.v8::internal::compiler::Node"*** %157 to i64*
  store i64 %160, i64* %161, align 8
  %162 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 8
  %163 = ptrtoint %"class.v8::internal::compiler::Node"*** %162 to i64
  %164 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %123, i64 8
  %165 = icmp eq %"class.v8::internal::compiler::Node"*** %92, %162
  br i1 %165, label %166, label %120

166:                                              ; preds = %120, %115
  %167 = ptrtoint %"class.v8::internal::compiler::Node"*** %92 to i64
  br label %168

168:                                              ; preds = %79, %166
  %169 = phi i64 [ %167, %166 ], [ %86, %79 ]
  %170 = load i64, i64* %39, align 8
  store i64 %84, i64* %39, align 8
  %171 = bitcast %"class.v8::internal::compiler::Node"**** %3 to i64*
  store i64 %86, i64* %171, align 8
  store i64 %169, i64* %80, align 8
  %172 = load i64, i64* %15, align 8
  store i64 %88, i64* %15, align 8
  %173 = inttoptr i64 %170 to %"class.v8::internal::compiler::Node"***
  %174 = icmp eq i64 %170, 0
  br i1 %174, label %194, label %175

175:                                              ; preds = %168
  %176 = sub i64 %172, %170
  %177 = ashr exact i64 %176, 3
  %178 = icmp ult i64 %176, 16
  br i1 %178, label %194, label %179

179:                                              ; preds = %175
  %180 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %46, align 8
  %181 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %180, null
  br i1 %181, label %186, label %182

182:                                              ; preds = %179
  %183 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %180, i64 0, i32 1
  %184 = load i64, i64* %183, align 8
  %185 = icmp ugt i64 %184, %177
  br i1 %185, label %194, label %186

186:                                              ; preds = %182, %179
  %187 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %173, i64 1
  %188 = bitcast %"class.v8::internal::compiler::Node"*** %187 to i64*
  store i64 %177, i64* %188, align 8
  %189 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %46 to i64*
  %190 = load i64, i64* %189, align 8
  %191 = inttoptr i64 %170 to i64*
  store i64 %190, i64* %191, align 8
  %192 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %46 to %"class.v8::internal::compiler::Node"****
  store %"class.v8::internal::compiler::Node"*** %173, %"class.v8::internal::compiler::Node"**** %192, align 8
  %193 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  br label %194

194:                                              ; preds = %186, %182, %175, %168, %34, %2
  %195 = phi %"class.v8::internal::compiler::Node"*** [ %193, %186 ], [ %85, %182 ], [ %85, %175 ], [ %85, %168 ], [ %36, %34 ], [ %4, %2 ]
  %196 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %195, i64 -1
  %197 = bitcast %"class.v8::internal::compiler::Node"*** %1 to i64*
  %198 = load i64, i64* %197, align 8
  %199 = bitcast %"class.v8::internal::compiler::Node"*** %196 to i64*
  store i64 %198, i64* %199, align 8
  %200 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %201 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %200, i64 -1
  store %"class.v8::internal::compiler::Node"*** %201, %"class.v8::internal::compiler::Node"**** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeERNS2_22RecyclingZoneAllocatorIS6_EEE9push_backEOS6_(%"struct.std::__1::__split_buffer.27"*, %"class.v8::internal::compiler::Node"*** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.27", %"struct.std::__1::__split_buffer.27"* %0, i64 0, i32 2
  %4 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.27", %"struct.std::__1::__split_buffer.27"* %0, i64 0, i32 3, i32 0, i32 0
  %6 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %5, align 8
  %7 = icmp eq %"class.v8::internal::compiler::Node"*** %4, %6
  %8 = ptrtoint %"class.v8::internal::compiler::Node"*** %6 to i64
  %9 = bitcast %"class.v8::internal::compiler::Node"*** %4 to i64*
  br i1 %7, label %10, label %193

10:                                               ; preds = %2
  %11 = getelementptr inbounds %"struct.std::__1::__split_buffer.27", %"struct.std::__1::__split_buffer.27"* %0, i64 0, i32 1
  %12 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %11, align 8
  %13 = getelementptr inbounds %"struct.std::__1::__split_buffer.27", %"struct.std::__1::__split_buffer.27"* %0, i64 0, i32 0
  %14 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %13, align 8
  %15 = icmp ugt %"class.v8::internal::compiler::Node"*** %12, %14
  %16 = ptrtoint %"class.v8::internal::compiler::Node"*** %14 to i64
  br i1 %15, label %17, label %37

17:                                               ; preds = %10
  %18 = ptrtoint %"class.v8::internal::compiler::Node"*** %12 to i64
  %19 = sub i64 %18, %16
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, -2
  %23 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %12, i64 %22
  %24 = ptrtoint %"class.v8::internal::compiler::Node"*** %4 to i64
  %25 = sub i64 %24, %18
  %26 = ashr exact i64 %25, 3
  %27 = icmp eq i64 %25, 0
  br i1 %27, label %32, label %28

28:                                               ; preds = %17
  %29 = bitcast %"class.v8::internal::compiler::Node"*** %23 to i8*
  %30 = bitcast %"class.v8::internal::compiler::Node"*** %12 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 %25, i1 false) #6
  %31 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %11, align 8
  br label %32

32:                                               ; preds = %17, %28
  %33 = phi %"class.v8::internal::compiler::Node"*** [ %12, %17 ], [ %31, %28 ]
  %34 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %23, i64 %26
  store %"class.v8::internal::compiler::Node"*** %34, %"class.v8::internal::compiler::Node"**** %3, align 8
  %35 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %33, i64 %22
  store %"class.v8::internal::compiler::Node"*** %35, %"class.v8::internal::compiler::Node"**** %11, align 8
  %36 = bitcast %"class.v8::internal::compiler::Node"*** %34 to i64*
  br label %193

37:                                               ; preds = %10
  %38 = bitcast %"class.v8::internal::compiler::Node"**** %5 to i64*
  %39 = bitcast %"struct.std::__1::__split_buffer.27"* %0 to i64*
  %40 = sub i64 %8, %16
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = lshr i64 %43, 2
  %45 = getelementptr inbounds %"struct.std::__1::__split_buffer.27", %"struct.std::__1::__split_buffer.27"* %0, i64 0, i32 3, i32 1, i32 0
  %46 = load %"class.v8::internal::RecyclingZoneAllocator"*, %"class.v8::internal::RecyclingZoneAllocator"** %45, align 8
  %47 = getelementptr inbounds %"class.v8::internal::RecyclingZoneAllocator", %"class.v8::internal::RecyclingZoneAllocator"* %46, i64 0, i32 1
  %48 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %47, align 8
  %49 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %48, null
  br i1 %49, label %59, label %50

50:                                               ; preds = %37
  %51 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %48, i64 0, i32 1
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %52, %43
  br i1 %53, label %59, label %54

54:                                               ; preds = %50
  %55 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %48 to %"class.v8::internal::compiler::Node"***
  %56 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %48 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %47 to i64*
  store i64 %57, i64* %58, align 8
  br label %76

59:                                               ; preds = %50, %37
  %60 = getelementptr inbounds %"class.v8::internal::RecyclingZoneAllocator", %"class.v8::internal::RecyclingZoneAllocator"* %46, i64 0, i32 0, i32 0
  %61 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %60, align 8
  %62 = shl i64 %43, 3
  %63 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %61, i64 0, i32 2
  %64 = load i64, i64* %63, align 8
  %65 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %61, i64 0, i32 3
  %66 = load i64, i64* %65, align 8
  %67 = sub i64 %66, %64
  %68 = icmp ugt i64 %62, %67
  br i1 %68, label %69, label %71, !prof !2

69:                                               ; preds = %59
  %70 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %61, i64 %62) #6
  br label %73

71:                                               ; preds = %59
  %72 = add i64 %64, %62
  store i64 %72, i64* %63, align 8
  br label %73

73:                                               ; preds = %71, %69
  %74 = phi i64 [ %70, %69 ], [ %64, %71 ]
  %75 = inttoptr i64 %74 to %"class.v8::internal::compiler::Node"***
  br label %76

76:                                               ; preds = %54, %73
  %77 = phi %"class.v8::internal::compiler::Node"*** [ %55, %54 ], [ %75, %73 ]
  %78 = ptrtoint %"class.v8::internal::compiler::Node"*** %77 to i64
  %79 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %77, i64 %44
  %80 = ptrtoint %"class.v8::internal::compiler::Node"*** %79 to i64
  %81 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %77, i64 %43
  %82 = ptrtoint %"class.v8::internal::compiler::Node"*** %81 to i64
  %83 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %11, align 8
  %84 = bitcast %"class.v8::internal::compiler::Node"**** %3 to i64*
  %85 = load i64, i64* %84, align 8
  %86 = ptrtoint %"class.v8::internal::compiler::Node"*** %83 to i64
  %87 = sub i64 %85, %86
  %88 = ashr exact i64 %87, 3
  %89 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %79, i64 %88
  %90 = icmp eq i64 %87, 0
  br i1 %90, label %165, label %91

91:                                               ; preds = %76
  %92 = add i64 %87, -8
  %93 = lshr i64 %92, 3
  %94 = add nuw nsw i64 %93, 1
  %95 = and i64 %94, 7
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %112, label %97

97:                                               ; preds = %91, %97
  %98 = phi %"class.v8::internal::compiler::Node"*** [ %105, %97 ], [ %79, %91 ]
  %99 = phi i64 [ %106, %97 ], [ %80, %91 ]
  %100 = phi %"class.v8::internal::compiler::Node"*** [ %107, %97 ], [ %83, %91 ]
  %101 = phi i64 [ %108, %97 ], [ %95, %91 ]
  %102 = bitcast %"class.v8::internal::compiler::Node"*** %100 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = inttoptr i64 %99 to i64*
  store i64 %103, i64* %104, align 8
  %105 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %98, i64 1
  %106 = ptrtoint %"class.v8::internal::compiler::Node"*** %105 to i64
  %107 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %100, i64 1
  %108 = add i64 %101, -1
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %97, !llvm.loop !16

110:                                              ; preds = %97
  %111 = ptrtoint %"class.v8::internal::compiler::Node"*** %105 to i64
  br label %112

112:                                              ; preds = %91, %110
  %113 = phi %"class.v8::internal::compiler::Node"*** [ %79, %91 ], [ %105, %110 ]
  %114 = phi i64 [ %80, %91 ], [ %111, %110 ]
  %115 = phi %"class.v8::internal::compiler::Node"*** [ %83, %91 ], [ %107, %110 ]
  %116 = icmp ult i64 %92, 56
  br i1 %116, label %163, label %117

117:                                              ; preds = %112, %117
  %118 = phi %"class.v8::internal::compiler::Node"*** [ %159, %117 ], [ %113, %112 ]
  %119 = phi i64 [ %160, %117 ], [ %114, %112 ]
  %120 = phi %"class.v8::internal::compiler::Node"*** [ %161, %117 ], [ %115, %112 ]
  %121 = bitcast %"class.v8::internal::compiler::Node"*** %120 to i64*
  %122 = load i64, i64* %121, align 8
  %123 = inttoptr i64 %119 to i64*
  store i64 %122, i64* %123, align 8
  %124 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %118, i64 1
  %125 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 1
  %126 = bitcast %"class.v8::internal::compiler::Node"*** %125 to i64*
  %127 = load i64, i64* %126, align 8
  %128 = bitcast %"class.v8::internal::compiler::Node"*** %124 to i64*
  store i64 %127, i64* %128, align 8
  %129 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %118, i64 2
  %130 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 2
  %131 = bitcast %"class.v8::internal::compiler::Node"*** %130 to i64*
  %132 = load i64, i64* %131, align 8
  %133 = bitcast %"class.v8::internal::compiler::Node"*** %129 to i64*
  store i64 %132, i64* %133, align 8
  %134 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %118, i64 3
  %135 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 3
  %136 = bitcast %"class.v8::internal::compiler::Node"*** %135 to i64*
  %137 = load i64, i64* %136, align 8
  %138 = bitcast %"class.v8::internal::compiler::Node"*** %134 to i64*
  store i64 %137, i64* %138, align 8
  %139 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %118, i64 4
  %140 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 4
  %141 = bitcast %"class.v8::internal::compiler::Node"*** %140 to i64*
  %142 = load i64, i64* %141, align 8
  %143 = bitcast %"class.v8::internal::compiler::Node"*** %139 to i64*
  store i64 %142, i64* %143, align 8
  %144 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %118, i64 5
  %145 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 5
  %146 = bitcast %"class.v8::internal::compiler::Node"*** %145 to i64*
  %147 = load i64, i64* %146, align 8
  %148 = bitcast %"class.v8::internal::compiler::Node"*** %144 to i64*
  store i64 %147, i64* %148, align 8
  %149 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %118, i64 6
  %150 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 6
  %151 = bitcast %"class.v8::internal::compiler::Node"*** %150 to i64*
  %152 = load i64, i64* %151, align 8
  %153 = bitcast %"class.v8::internal::compiler::Node"*** %149 to i64*
  store i64 %152, i64* %153, align 8
  %154 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %118, i64 7
  %155 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 7
  %156 = bitcast %"class.v8::internal::compiler::Node"*** %155 to i64*
  %157 = load i64, i64* %156, align 8
  %158 = bitcast %"class.v8::internal::compiler::Node"*** %154 to i64*
  store i64 %157, i64* %158, align 8
  %159 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %118, i64 8
  %160 = ptrtoint %"class.v8::internal::compiler::Node"*** %159 to i64
  %161 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %120, i64 8
  %162 = icmp eq %"class.v8::internal::compiler::Node"*** %89, %159
  br i1 %162, label %163, label %117

163:                                              ; preds = %117, %112
  %164 = ptrtoint %"class.v8::internal::compiler::Node"*** %89 to i64
  br label %165

165:                                              ; preds = %76, %163
  %166 = phi i64 [ %164, %163 ], [ %80, %76 ]
  %167 = load i64, i64* %39, align 8
  store i64 %78, i64* %39, align 8
  %168 = bitcast %"class.v8::internal::compiler::Node"**** %11 to i64*
  store i64 %80, i64* %168, align 8
  store i64 %166, i64* %84, align 8
  %169 = load i64, i64* %38, align 8
  store i64 %82, i64* %38, align 8
  %170 = inttoptr i64 %167 to %"class.v8::internal::compiler::Node"***
  %171 = icmp eq i64 %167, 0
  %172 = inttoptr i64 %166 to i64*
  br i1 %171, label %193, label %173

173:                                              ; preds = %165
  %174 = sub i64 %169, %167
  %175 = ashr exact i64 %174, 3
  %176 = icmp ult i64 %174, 16
  br i1 %176, label %193, label %177

177:                                              ; preds = %173
  %178 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %47, align 8
  %179 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %178, null
  br i1 %179, label %184, label %180

180:                                              ; preds = %177
  %181 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %178, i64 0, i32 1
  %182 = load i64, i64* %181, align 8
  %183 = icmp ugt i64 %182, %175
  br i1 %183, label %193, label %184

184:                                              ; preds = %180, %177
  %185 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %170, i64 1
  %186 = bitcast %"class.v8::internal::compiler::Node"*** %185 to i64*
  store i64 %175, i64* %186, align 8
  %187 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %47 to i64*
  %188 = load i64, i64* %187, align 8
  %189 = inttoptr i64 %167 to i64*
  store i64 %188, i64* %189, align 8
  %190 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %47 to %"class.v8::internal::compiler::Node"****
  store %"class.v8::internal::compiler::Node"*** %170, %"class.v8::internal::compiler::Node"**** %190, align 8
  %191 = bitcast %"class.v8::internal::compiler::Node"**** %3 to i64**
  %192 = load i64*, i64** %191, align 8
  br label %193

193:                                              ; preds = %184, %180, %173, %165, %32, %2
  %194 = phi i64* [ %192, %184 ], [ %172, %180 ], [ %172, %173 ], [ %172, %165 ], [ %36, %32 ], [ %9, %2 ]
  %195 = bitcast %"class.v8::internal::compiler::Node"*** %1 to i64*
  %196 = load i64, i64* %195, align 8
  store i64 %196, i64* %194, align 8
  %197 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %198 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %197, i64 1
  store %"class.v8::internal::compiler::Node"*** %198, %"class.v8::internal::compiler::Node"**** %3, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__114__split_bufferIPPN2v88internal8compiler4NodeERNS2_22RecyclingZoneAllocatorIS6_EEE10push_frontERKS6_(%"struct.std::__1::__split_buffer.27"*, %"class.v8::internal::compiler::Node"*** dereferenceable(8)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"struct.std::__1::__split_buffer.27", %"struct.std::__1::__split_buffer.27"* %0, i64 0, i32 1
  %4 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %5 = getelementptr inbounds %"struct.std::__1::__split_buffer.27", %"struct.std::__1::__split_buffer.27"* %0, i64 0, i32 0
  %6 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %5, align 8
  %7 = icmp eq %"class.v8::internal::compiler::Node"*** %4, %6
  %8 = ptrtoint %"class.v8::internal::compiler::Node"*** %6 to i64
  br i1 %7, label %9, label %192

9:                                                ; preds = %2
  %10 = getelementptr inbounds %"struct.std::__1::__split_buffer.27", %"struct.std::__1::__split_buffer.27"* %0, i64 0, i32 2
  %11 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %10, align 8
  %12 = getelementptr inbounds %"struct.std::__1::__split_buffer.27", %"struct.std::__1::__split_buffer.27"* %0, i64 0, i32 3, i32 0, i32 0
  %13 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %12, align 8
  %14 = icmp ult %"class.v8::internal::compiler::Node"*** %11, %13
  %15 = bitcast %"class.v8::internal::compiler::Node"**** %12 to i64*
  %16 = ptrtoint %"class.v8::internal::compiler::Node"*** %13 to i64
  br i1 %14, label %17, label %38

17:                                               ; preds = %9
  %18 = ptrtoint %"class.v8::internal::compiler::Node"*** %11 to i64
  %19 = sub i64 %16, %18
  %20 = ashr exact i64 %19, 3
  %21 = add nsw i64 %20, 1
  %22 = sdiv i64 %21, 2
  %23 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %11, i64 %22
  %24 = ptrtoint %"class.v8::internal::compiler::Node"*** %4 to i64
  %25 = sub i64 %18, %24
  %26 = icmp eq i64 %25, 0
  br i1 %26, label %34, label %27

27:                                               ; preds = %17
  %28 = ashr exact i64 %25, 3
  %29 = sub nsw i64 0, %28
  %30 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %23, i64 %29
  %31 = bitcast %"class.v8::internal::compiler::Node"*** %30 to i8*
  %32 = bitcast %"class.v8::internal::compiler::Node"*** %4 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 %25, i1 false) #6
  %33 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %10, align 8
  br label %34

34:                                               ; preds = %17, %27
  %35 = phi %"class.v8::internal::compiler::Node"*** [ %33, %27 ], [ %11, %17 ]
  %36 = phi %"class.v8::internal::compiler::Node"*** [ %30, %27 ], [ %23, %17 ]
  store %"class.v8::internal::compiler::Node"*** %36, %"class.v8::internal::compiler::Node"**** %3, align 8
  %37 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %35, i64 %22
  store %"class.v8::internal::compiler::Node"*** %37, %"class.v8::internal::compiler::Node"**** %10, align 8
  br label %192

38:                                               ; preds = %9
  %39 = bitcast %"struct.std::__1::__split_buffer.27"* %0 to i64*
  %40 = sub i64 %16, %8
  %41 = ashr exact i64 %40, 2
  %42 = icmp eq i64 %40, 0
  %43 = select i1 %42, i64 1, i64 %41
  %44 = add nsw i64 %43, 3
  %45 = lshr i64 %44, 2
  %46 = getelementptr inbounds %"struct.std::__1::__split_buffer.27", %"struct.std::__1::__split_buffer.27"* %0, i64 0, i32 3, i32 1, i32 0
  %47 = load %"class.v8::internal::RecyclingZoneAllocator"*, %"class.v8::internal::RecyclingZoneAllocator"** %46, align 8
  %48 = getelementptr inbounds %"class.v8::internal::RecyclingZoneAllocator", %"class.v8::internal::RecyclingZoneAllocator"* %47, i64 0, i32 1
  %49 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %48, align 8
  %50 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %49, null
  br i1 %50, label %60, label %51

51:                                               ; preds = %38
  %52 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %49, i64 0, i32 1
  %53 = load i64, i64* %52, align 8
  %54 = icmp ult i64 %53, %43
  br i1 %54, label %60, label %55

55:                                               ; preds = %51
  %56 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %49 to %"class.v8::internal::compiler::Node"***
  %57 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %49 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %48 to i64*
  store i64 %58, i64* %59, align 8
  br label %77

60:                                               ; preds = %51, %38
  %61 = getelementptr inbounds %"class.v8::internal::RecyclingZoneAllocator", %"class.v8::internal::RecyclingZoneAllocator"* %47, i64 0, i32 0, i32 0
  %62 = load %"class.v8::internal::Zone"*, %"class.v8::internal::Zone"** %61, align 8
  %63 = shl i64 %43, 3
  %64 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %62, i64 0, i32 2
  %65 = load i64, i64* %64, align 8
  %66 = getelementptr inbounds %"class.v8::internal::Zone", %"class.v8::internal::Zone"* %62, i64 0, i32 3
  %67 = load i64, i64* %66, align 8
  %68 = sub i64 %67, %65
  %69 = icmp ugt i64 %63, %68
  br i1 %69, label %70, label %72, !prof !2

70:                                               ; preds = %60
  %71 = tail call i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"* %62, i64 %63) #6
  br label %74

72:                                               ; preds = %60
  %73 = add i64 %65, %63
  store i64 %73, i64* %64, align 8
  br label %74

74:                                               ; preds = %72, %70
  %75 = phi i64 [ %71, %70 ], [ %65, %72 ]
  %76 = inttoptr i64 %75 to %"class.v8::internal::compiler::Node"***
  br label %77

77:                                               ; preds = %55, %74
  %78 = phi %"class.v8::internal::compiler::Node"*** [ %56, %55 ], [ %76, %74 ]
  %79 = ptrtoint %"class.v8::internal::compiler::Node"*** %78 to i64
  %80 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %78, i64 %45
  %81 = ptrtoint %"class.v8::internal::compiler::Node"*** %80 to i64
  %82 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %78, i64 %43
  %83 = ptrtoint %"class.v8::internal::compiler::Node"*** %82 to i64
  %84 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %85 = bitcast %"class.v8::internal::compiler::Node"**** %10 to i64*
  %86 = load i64, i64* %85, align 8
  %87 = ptrtoint %"class.v8::internal::compiler::Node"*** %84 to i64
  %88 = sub i64 %86, %87
  %89 = ashr exact i64 %88, 3
  %90 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %80, i64 %89
  %91 = icmp eq i64 %88, 0
  br i1 %91, label %166, label %92

92:                                               ; preds = %77
  %93 = add i64 %88, -8
  %94 = lshr i64 %93, 3
  %95 = add nuw nsw i64 %94, 1
  %96 = and i64 %95, 7
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %113, label %98

98:                                               ; preds = %92, %98
  %99 = phi %"class.v8::internal::compiler::Node"*** [ %106, %98 ], [ %80, %92 ]
  %100 = phi i64 [ %107, %98 ], [ %81, %92 ]
  %101 = phi %"class.v8::internal::compiler::Node"*** [ %108, %98 ], [ %84, %92 ]
  %102 = phi i64 [ %109, %98 ], [ %96, %92 ]
  %103 = bitcast %"class.v8::internal::compiler::Node"*** %101 to i64*
  %104 = load i64, i64* %103, align 8
  %105 = inttoptr i64 %100 to i64*
  store i64 %104, i64* %105, align 8
  %106 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %99, i64 1
  %107 = ptrtoint %"class.v8::internal::compiler::Node"*** %106 to i64
  %108 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %101, i64 1
  %109 = add i64 %102, -1
  %110 = icmp eq i64 %109, 0
  br i1 %110, label %111, label %98, !llvm.loop !17

111:                                              ; preds = %98
  %112 = ptrtoint %"class.v8::internal::compiler::Node"*** %106 to i64
  br label %113

113:                                              ; preds = %92, %111
  %114 = phi %"class.v8::internal::compiler::Node"*** [ %80, %92 ], [ %106, %111 ]
  %115 = phi i64 [ %81, %92 ], [ %112, %111 ]
  %116 = phi %"class.v8::internal::compiler::Node"*** [ %84, %92 ], [ %108, %111 ]
  %117 = icmp ult i64 %93, 56
  br i1 %117, label %164, label %118

118:                                              ; preds = %113, %118
  %119 = phi %"class.v8::internal::compiler::Node"*** [ %160, %118 ], [ %114, %113 ]
  %120 = phi i64 [ %161, %118 ], [ %115, %113 ]
  %121 = phi %"class.v8::internal::compiler::Node"*** [ %162, %118 ], [ %116, %113 ]
  %122 = bitcast %"class.v8::internal::compiler::Node"*** %121 to i64*
  %123 = load i64, i64* %122, align 8
  %124 = inttoptr i64 %120 to i64*
  store i64 %123, i64* %124, align 8
  %125 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %119, i64 1
  %126 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 1
  %127 = bitcast %"class.v8::internal::compiler::Node"*** %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = bitcast %"class.v8::internal::compiler::Node"*** %125 to i64*
  store i64 %128, i64* %129, align 8
  %130 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %119, i64 2
  %131 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 2
  %132 = bitcast %"class.v8::internal::compiler::Node"*** %131 to i64*
  %133 = load i64, i64* %132, align 8
  %134 = bitcast %"class.v8::internal::compiler::Node"*** %130 to i64*
  store i64 %133, i64* %134, align 8
  %135 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %119, i64 3
  %136 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 3
  %137 = bitcast %"class.v8::internal::compiler::Node"*** %136 to i64*
  %138 = load i64, i64* %137, align 8
  %139 = bitcast %"class.v8::internal::compiler::Node"*** %135 to i64*
  store i64 %138, i64* %139, align 8
  %140 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %119, i64 4
  %141 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 4
  %142 = bitcast %"class.v8::internal::compiler::Node"*** %141 to i64*
  %143 = load i64, i64* %142, align 8
  %144 = bitcast %"class.v8::internal::compiler::Node"*** %140 to i64*
  store i64 %143, i64* %144, align 8
  %145 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %119, i64 5
  %146 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 5
  %147 = bitcast %"class.v8::internal::compiler::Node"*** %146 to i64*
  %148 = load i64, i64* %147, align 8
  %149 = bitcast %"class.v8::internal::compiler::Node"*** %145 to i64*
  store i64 %148, i64* %149, align 8
  %150 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %119, i64 6
  %151 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 6
  %152 = bitcast %"class.v8::internal::compiler::Node"*** %151 to i64*
  %153 = load i64, i64* %152, align 8
  %154 = bitcast %"class.v8::internal::compiler::Node"*** %150 to i64*
  store i64 %153, i64* %154, align 8
  %155 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %119, i64 7
  %156 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 7
  %157 = bitcast %"class.v8::internal::compiler::Node"*** %156 to i64*
  %158 = load i64, i64* %157, align 8
  %159 = bitcast %"class.v8::internal::compiler::Node"*** %155 to i64*
  store i64 %158, i64* %159, align 8
  %160 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %119, i64 8
  %161 = ptrtoint %"class.v8::internal::compiler::Node"*** %160 to i64
  %162 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %121, i64 8
  %163 = icmp eq %"class.v8::internal::compiler::Node"*** %90, %160
  br i1 %163, label %164, label %118

164:                                              ; preds = %118, %113
  %165 = ptrtoint %"class.v8::internal::compiler::Node"*** %90 to i64
  br label %166

166:                                              ; preds = %77, %164
  %167 = phi i64 [ %165, %164 ], [ %81, %77 ]
  %168 = load i64, i64* %39, align 8
  store i64 %79, i64* %39, align 8
  %169 = bitcast %"class.v8::internal::compiler::Node"**** %3 to i64*
  store i64 %81, i64* %169, align 8
  store i64 %167, i64* %85, align 8
  %170 = load i64, i64* %15, align 8
  store i64 %83, i64* %15, align 8
  %171 = inttoptr i64 %168 to %"class.v8::internal::compiler::Node"***
  %172 = icmp eq i64 %168, 0
  br i1 %172, label %192, label %173

173:                                              ; preds = %166
  %174 = sub i64 %170, %168
  %175 = ashr exact i64 %174, 3
  %176 = icmp ult i64 %174, 16
  br i1 %176, label %192, label %177

177:                                              ; preds = %173
  %178 = load %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"*, %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %48, align 8
  %179 = icmp eq %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %178, null
  br i1 %179, label %184, label %180

180:                                              ; preds = %177
  %181 = getelementptr inbounds %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock", %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"* %178, i64 0, i32 1
  %182 = load i64, i64* %181, align 8
  %183 = icmp ugt i64 %182, %175
  br i1 %183, label %192, label %184

184:                                              ; preds = %180, %177
  %185 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %171, i64 1
  %186 = bitcast %"class.v8::internal::compiler::Node"*** %185 to i64*
  store i64 %175, i64* %186, align 8
  %187 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %48 to i64*
  %188 = load i64, i64* %187, align 8
  %189 = inttoptr i64 %168 to i64*
  store i64 %188, i64* %189, align 8
  %190 = bitcast %"struct.v8::internal::RecyclingZoneAllocator<v8::internal::compiler::Node **>::FreeBlock"** %48 to %"class.v8::internal::compiler::Node"****
  store %"class.v8::internal::compiler::Node"*** %171, %"class.v8::internal::compiler::Node"**** %190, align 8
  %191 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  br label %192

192:                                              ; preds = %184, %180, %173, %166, %34, %2
  %193 = phi %"class.v8::internal::compiler::Node"*** [ %191, %184 ], [ %80, %180 ], [ %80, %173 ], [ %80, %166 ], [ %36, %34 ], [ %4, %2 ]
  %194 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %193, i64 -1
  %195 = bitcast %"class.v8::internal::compiler::Node"*** %1 to i64*
  %196 = load i64, i64* %195, align 8
  %197 = bitcast %"class.v8::internal::compiler::Node"*** %194 to i64*
  store i64 %196, i64* %197, align 8
  %198 = load %"class.v8::internal::compiler::Node"***, %"class.v8::internal::compiler::Node"**** %3, align 8
  %199 = getelementptr inbounds %"class.v8::internal::compiler::Node"**, %"class.v8::internal::compiler::Node"*** %198, i64 -1
  store %"class.v8::internal::compiler::Node"*** %199, %"class.v8::internal::compiler::Node"**** %3, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

declare i64 @_ZN2v88internal4Zone9NewExpandEm(%"class.v8::internal::Zone"*, i64) local_unnamed_addr #2

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.usub.sat.i32(i32, i32) #5

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }
attributes #7 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 2000}
!3 = !{!4}
!4 = distinct !{!4, !5}
!5 = distinct !{!5, !"LVerDomain"}
!6 = !{!7}
!7 = distinct !{!7, !5}
!8 = distinct !{!8, !9}
!9 = !{!"llvm.loop.isvectorized", i32 1}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.unroll.disable"}
!12 = distinct !{!12, !9}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !11}
!15 = distinct !{!15, !11}
!16 = distinct !{!16, !11}
!17 = distinct !{!17, !11}
