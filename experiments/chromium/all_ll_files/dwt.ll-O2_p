; ModuleID = '../../third_party/pdfium/third_party/libopenjpeg20/dwt.c'
source_filename = "../../third_party/pdfium/third_party/libopenjpeg20/dwt.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.opj_tcd = type { i32, i32, i32, i32, i32, %struct.opj_tcd_image*, %struct.opj_image*, %struct.opj_cp*, %struct.opj_tcp*, i32, i8, %struct.opj_thread_pool_t*, i32, i32, i32, i32, i32, i32* }
%struct.opj_tcd_image = type { %struct.opj_tcd_tile* }
%struct.opj_tcd_tile = type { i32, i32, i32, i32, i32, %struct.opj_tcd_tilecomp*, i32, double, [100 x double], i32 }
%struct.opj_image = type { i32, i32, i32, i32, i32, i32, %struct.opj_image_comp*, i8*, i32 }
%struct.opj_image_comp = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32*, i16 }
%struct.opj_cp = type { i16, i32, i32, i32, i32, i8*, i32, i32, i32, %struct.opj_ppx_struct*, i8*, i32, i32, i8*, i8*, i8*, i32, i32, i32, %struct.opj_tcp*, %union.anon.0, i8 }
%struct.opj_ppx_struct = type { i8*, i32 }
%union.anon.0 = type { %struct.opj_encoding_param }
%struct.opj_encoding_param = type { i32, i32, i32*, i8, i8 }
%struct.opj_tcp = type { i32, i32, i32, i32, i32, [100 x float], i32, [32 x %struct.opj_poc], i32, %struct.opj_ppx_struct*, i8*, i8*, i32, i32, [100 x float], %struct.opj_tccp*, i32, i32, i8*, i32, double*, float*, float*, %struct.opj_mct_data*, i32, i32, %struct.opj_simple_mcc_decorrelation_data*, i32, i32, i8 }
%struct.opj_poc = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [5 x i8], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.opj_tccp = type { i32, i32, i32, i32, i32, i32, i32, [97 x %struct.opj_stepsize], i32, i32, [33 x i32], [33 x i32], i32 }
%struct.opj_stepsize = type { i32, i32 }
%struct.opj_mct_data = type { i32, i32, i32, i8*, i32 }
%struct.opj_simple_mcc_decorrelation_data = type { i32, i32, %struct.opj_mct_data*, %struct.opj_mct_data*, i8 }
%struct.opj_thread_pool_t = type opaque
%struct.opj_tcd_tilecomp = type { i32, i32, i32, i32, i32, i32, i32, %struct.opj_tcd_resolution*, i32, i32*, i32, i64, i64, i32*, i32, i32, i32, i32, i32 }
%struct.opj_tcd_resolution = type { i32, i32, i32, i32, i32, i32, i32, [3 x %struct.opj_tcd_band], i32, i32, i32, i32 }
%struct.opj_tcd_band = type { i32, i32, i32, i32, i32, %struct.opj_tcd_precinct*, i32, i32, float }
%struct.opj_tcd_precinct = type { i32, i32, i32, i32, i32, i32, %union.anon, i32, %struct.opj_tgt_tree*, %struct.opj_tgt_tree* }
%union.anon = type { %struct.opj_tcd_cblk_enc* }
%struct.opj_tcd_cblk_enc = type { i8*, %struct.opj_tcd_layer*, %struct.opj_tcd_pass*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.opj_tcd_layer = type { i32, i32, double, i8* }
%struct.opj_tcd_pass = type { i32, double, i32, i8 }
%struct.opj_tgt_tree = type { i32, i32, i32, %struct.opj_tgt_node*, i32 }
%struct.opj_tgt_node = type { %struct.opj_tgt_node*, i32, i32, i32 }
%struct.dwt_local = type { i32*, i64, i32, i32, i32 }
%struct.opj_sparse_array_int32 = type opaque
%struct.v8dwt_local = type { %union.opj_v8_t*, i32, i32, i32, i32, i32, i32, i32 }
%union.opj_v8_t = type { [8 x float] }
%struct.opj_tls_t = type opaque
%struct.opj_tcd_cblk_dec = type { %struct.opj_tcd_seg*, %struct.opj_tcd_seg_data_chunk*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32* }
%struct.opj_tcd_seg = type { i32, i32, i32, i32, i32, i32 }
%struct.opj_tcd_seg_data_chunk = type { i8*, i32 }

@opj_dwt_norms = internal unnamed_addr constant [4 x [10 x double]] [[10 x double] [double 1.000000e+00, double 1.500000e+00, double 2.750000e+00, double 5.375000e+00, double 1.068000e+01, double 2.134000e+01, double 4.267000e+01, double 0x4055551EB851EB85, double 1.707000e+02, double 3.413000e+02], [10 x double] [double 1.038000e+00, double 1.592000e+00, double 2.919000e+00, double 5.703000e+00, double 1.133000e+01, double 2.264000e+01, double 4.525000e+01, double 9.048000e+01, double 1.809000e+02, double 0.000000e+00], [10 x double] [double 1.038000e+00, double 1.592000e+00, double 2.919000e+00, double 5.703000e+00, double 1.133000e+01, double 2.264000e+01, double 4.525000e+01, double 9.048000e+01, double 1.809000e+02, double 0.000000e+00], [10 x double] [double 7.186000e-01, double 0x3FED7F62B6AE7D56, double 1.586000e+00, double 3.043000e+00, double 6.019000e+00, double 1.201000e+01, double 2.400000e+01, double 4.797000e+01, double 9.593000e+01, double 0.000000e+00]], align 16
@opj_dwt_norms_real = internal unnamed_addr constant [4 x [10 x double]] [[10 x double] [double 1.000000e+00, double 1.965000e+00, double 4.177000e+00, double 8.403000e+00, double 1.690000e+01, double 3.384000e+01, double 0x4050EC28F5C28F5C, double 1.353000e+02, double 2.706000e+02, double 5.409000e+02], [10 x double] [double 2.022000e+00, double 3.989000e+00, double 8.355000e+00, double 1.704000e+01, double 3.427000e+01, double 6.863000e+01, double 1.373000e+02, double 2.746000e+02, double 5.490000e+02, double 0.000000e+00], [10 x double] [double 2.022000e+00, double 3.989000e+00, double 8.355000e+00, double 1.704000e+01, double 3.427000e+01, double 6.863000e+01, double 1.373000e+02, double 2.746000e+02, double 5.490000e+02, double 0.000000e+00], [10 x double] [double 2.080000e+00, double 3.865000e+00, double 8.307000e+00, double 1.718000e+01, double 3.471000e+01, double 6.959000e+01, double 1.393000e+02, double 2.786000e+02, double 5.572000e+02, double 0.000000e+00]], align 16

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_dwt_encode(%struct.opj_tcd* nocapture readonly, %struct.opj_tcd_tilecomp* nocapture readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 11
  %4 = load %struct.opj_thread_pool_t*, %struct.opj_thread_pool_t** %3, align 8
  %5 = tail call fastcc i32 @opj_dwt_encode_procedure(%struct.opj_thread_pool_t* %4, %struct.opj_tcd_tilecomp* %1, void (i8*, i8*, i32, i32, i32, i32)* nonnull @opj_dwt_encode_and_deinterleave_v, void (i8*, i8*, i32, i32)* nonnull @opj_dwt_encode_and_deinterleave_h_one_row)
  ret i32 %5
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc i32 @opj_dwt_encode_procedure(%struct.opj_thread_pool_t*, %struct.opj_tcd_tilecomp* nocapture readonly, void (i8*, i8*, i32, i32, i32, i32)*, void (i8*, i8*, i32, i32)*) unnamed_addr #1 {
  %5 = tail call i32 @opj_thread_pool_get_thread_count(%struct.opj_thread_pool_t* %0) #10
  %6 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 9
  %7 = load i32*, i32** %6, align 8
  %8 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 2
  %9 = load i32, i32* %8, align 8
  %10 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 0
  %11 = load i32, i32* %10, align 8
  %12 = sub nsw i32 %9, %11
  %13 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 5
  %14 = load i32, i32* %13, align 4
  %15 = add i32 %14, -1
  %16 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 7
  %17 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %16, align 8
  %18 = sext i32 %15 to i64
  %19 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %17, i64 %18
  %20 = icmp eq i32 %15, 0
  br i1 %20, label %81, label %21

21:                                               ; preds = %4
  %22 = and i32 %15, 1
  %23 = icmp eq i32 %14, 2
  br i1 %23, label %61, label %24

24:                                               ; preds = %21
  %25 = sub i32 %15, %22
  br label %26

26:                                               ; preds = %26, %24
  %27 = phi i32 [ 0, %24 ], [ %58, %26 ]
  %28 = phi %struct.opj_tcd_resolution* [ %17, %24 ], [ %44, %26 ]
  %29 = phi i32 [ %25, %24 ], [ %59, %26 ]
  %30 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %28, i64 1, i32 2
  %31 = load i32, i32* %30, align 8, !alias.scope !2
  %32 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %28, i64 1, i32 0
  %33 = load i32, i32* %32, align 8, !alias.scope !2
  %34 = sub nsw i32 %31, %33
  %35 = icmp ult i32 %27, %34
  %36 = select i1 %35, i32 %34, i32 %27
  %37 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %28, i64 1, i32 3
  %38 = load i32, i32* %37, align 4, !alias.scope !2
  %39 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %28, i64 1, i32 1
  %40 = load i32, i32* %39, align 4, !alias.scope !2
  %41 = sub nsw i32 %38, %40
  %42 = icmp ult i32 %36, %41
  %43 = select i1 %42, i32 %41, i32 %36
  %44 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %28, i64 2
  %45 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %28, i64 2, i32 2
  %46 = load i32, i32* %45, align 8, !alias.scope !2
  %47 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %44, i64 0, i32 0
  %48 = load i32, i32* %47, align 8, !alias.scope !2
  %49 = sub nsw i32 %46, %48
  %50 = icmp ult i32 %43, %49
  %51 = select i1 %50, i32 %49, i32 %43
  %52 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %28, i64 2, i32 3
  %53 = load i32, i32* %52, align 4, !alias.scope !2
  %54 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %28, i64 2, i32 1
  %55 = load i32, i32* %54, align 4, !alias.scope !2
  %56 = sub nsw i32 %53, %55
  %57 = icmp ult i32 %51, %56
  %58 = select i1 %57, i32 %56, i32 %51
  %59 = add i32 %29, -2
  %60 = icmp eq i32 %59, 0
  br i1 %60, label %61, label %26

61:                                               ; preds = %26, %21
  %62 = phi i32 [ undef, %21 ], [ %58, %26 ]
  %63 = phi i32 [ 0, %21 ], [ %58, %26 ]
  %64 = phi %struct.opj_tcd_resolution* [ %17, %21 ], [ %44, %26 ]
  %65 = icmp eq i32 %22, 0
  br i1 %65, label %81, label %66

66:                                               ; preds = %61
  %67 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %64, i64 1, i32 2
  %68 = load i32, i32* %67, align 8, !alias.scope !2
  %69 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %64, i64 1, i32 0
  %70 = load i32, i32* %69, align 8, !alias.scope !2
  %71 = sub nsw i32 %68, %70
  %72 = icmp ult i32 %63, %71
  %73 = select i1 %72, i32 %71, i32 %63
  %74 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %64, i64 1, i32 3
  %75 = load i32, i32* %74, align 4, !alias.scope !2
  %76 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %64, i64 1, i32 1
  %77 = load i32, i32* %76, align 4, !alias.scope !2
  %78 = sub nsw i32 %75, %77
  %79 = icmp ult i32 %73, %78
  %80 = select i1 %79, i32 %78, i32 %73
  br label %81

81:                                               ; preds = %66, %61, %4
  %82 = phi i32 [ 0, %4 ], [ %62, %61 ], [ %80, %66 ]
  %83 = zext i32 %82 to i64
  %84 = shl nuw nsw i64 %83, 5
  %85 = tail call i8* @opj_aligned_32_malloc(i64 %84) #10
  %86 = icmp eq i32 %82, 0
  %87 = icmp ne i8* %85, null
  %88 = or i1 %86, %87
  br i1 %88, label %89, label %253

89:                                               ; preds = %81
  br i1 %20, label %251, label %90

90:                                               ; preds = %89
  %91 = add i32 %14, -2
  %92 = icmp slt i32 %5, 2
  br label %93

93:                                               ; preds = %90, %248
  %94 = phi i32 [ %91, %90 ], [ %249, %248 ]
  %95 = phi %struct.opj_tcd_resolution* [ %19, %90 ], [ %96, %248 ]
  %96 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %95, i64 -1
  %97 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %95, i64 0, i32 2
  %98 = load i32, i32* %97, align 8
  %99 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %95, i64 0, i32 0
  %100 = load i32, i32* %99, align 8
  %101 = sub nsw i32 %98, %100
  %102 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %95, i64 0, i32 3
  %103 = load i32, i32* %102, align 4
  %104 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %95, i64 0, i32 1
  %105 = load i32, i32* %104, align 4
  %106 = sub i32 %103, %105
  %107 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %95, i64 -1, i32 2
  %108 = load i32, i32* %107, align 8
  %109 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %96, i64 0, i32 0
  %110 = load i32, i32* %109, align 8
  %111 = sub nsw i32 %108, %110
  %112 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %95, i64 -1, i32 3
  %113 = load i32, i32* %112, align 4
  %114 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %95, i64 -1, i32 1
  %115 = load i32, i32* %114, align 4
  %116 = sub nsw i32 %113, %115
  %117 = and i32 %100, 1
  %118 = and i32 %105, 1
  %119 = sub i32 %106, %116
  %120 = icmp ult i32 %101, 16
  %121 = or i1 %92, %120
  br i1 %121, label %122, label %143

122:                                              ; preds = %93
  %123 = icmp ugt i32 %101, 7
  br i1 %123, label %124, label %134

124:                                              ; preds = %122
  %125 = xor i32 %118, 1
  br label %126

126:                                              ; preds = %124, %126
  %127 = phi i32 [ 0, %124 ], [ %128, %126 ]
  %128 = add i32 %127, 8
  %129 = zext i32 %127 to i64
  %130 = getelementptr inbounds i32, i32* %7, i64 %129
  %131 = bitcast i32* %130 to i8*
  tail call void %2(i8* %131, i8* %85, i32 %106, i32 %125, i32 %12, i32 8) #10, !callees !5
  %132 = or i32 %128, 7
  %133 = icmp ult i32 %132, %101
  br i1 %133, label %126, label %134

134:                                              ; preds = %126, %122
  %135 = phi i32 [ 0, %122 ], [ %128, %126 ]
  %136 = icmp ugt i32 %101, %135
  br i1 %136, label %137, label %186

137:                                              ; preds = %134
  %138 = zext i32 %135 to i64
  %139 = getelementptr inbounds i32, i32* %7, i64 %138
  %140 = bitcast i32* %139 to i8*
  %141 = xor i32 %118, 1
  %142 = sub i32 %101, %135
  tail call void %2(i8* %140, i8* %85, i32 %106, i32 %141, i32 %12, i32 %142) #10, !callees !5
  br label %186

143:                                              ; preds = %93
  %144 = icmp ult i32 %101, %5
  %145 = select i1 %144, i32 %101, i32 %5
  %146 = udiv i32 %101, %145
  %147 = and i32 %146, -8
  %148 = icmp eq i32 %145, 0
  br i1 %148, label %185, label %149

149:                                              ; preds = %143, %159
  %150 = phi i32 [ %175, %159 ], [ 0, %143 ]
  %151 = tail call i8* @opj_malloc(i64 64) #10
  %152 = icmp eq i8* %151, null
  br i1 %152, label %153, label %154

153:                                              ; preds = %149
  tail call void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t* %0, i32 0) #10
  br label %251

154:                                              ; preds = %149
  %155 = tail call i8* @opj_aligned_32_malloc(i64 %84) #10
  %156 = bitcast i8* %151 to i8**
  store i8* %155, i8** %156, align 8
  %157 = icmp eq i8* %155, null
  br i1 %157, label %158, label %159

158:                                              ; preds = %154
  tail call void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t* %0, i32 0) #10
  tail call void @opj_free(i8* nonnull %151) #10
  br label %251

159:                                              ; preds = %154
  %160 = getelementptr inbounds i8, i8* %151, i64 16
  %161 = bitcast i8* %160 to i32*
  store i32 %119, i32* %161, align 8
  %162 = getelementptr inbounds i8, i8* %151, i64 20
  %163 = bitcast i8* %162 to i32*
  store i32 %116, i32* %163, align 4
  %164 = getelementptr inbounds i8, i8* %151, i64 24
  %165 = bitcast i8* %164 to i32*
  store i32 %118, i32* %165, align 8
  %166 = getelementptr inbounds i8, i8* %151, i64 32
  %167 = bitcast i8* %166 to i32*
  store i32 %106, i32* %167, align 8
  %168 = getelementptr inbounds i8, i8* %151, i64 36
  %169 = bitcast i8* %168 to i32*
  store i32 %12, i32* %169, align 4
  %170 = getelementptr inbounds i8, i8* %151, i64 40
  %171 = bitcast i8* %170 to i32**
  store i32* %7, i32** %171, align 8
  %172 = mul i32 %150, %147
  %173 = getelementptr inbounds i8, i8* %151, i64 48
  %174 = bitcast i8* %173 to i32*
  store i32 %172, i32* %174, align 8
  %175 = add nuw i32 %150, 1
  %176 = icmp eq i32 %175, %145
  %177 = mul i32 %175, %147
  %178 = select i1 %176, i32 %101, i32 %177
  %179 = getelementptr inbounds i8, i8* %151, i64 52
  %180 = bitcast i8* %179 to i32*
  store i32 %178, i32* %180, align 4
  %181 = getelementptr inbounds i8, i8* %151, i64 56
  %182 = bitcast i8* %181 to void (i8*, i8*, i32, i32, i32, i32)**
  store void (i8*, i8*, i32, i32, i32, i32)* %2, void (i8*, i8*, i32, i32, i32, i32)** %182, align 8
  %183 = tail call i32 @opj_thread_pool_submit_job(%struct.opj_thread_pool_t* %0, void (i8*, %struct.opj_tls_t*)* nonnull @opj_dwt_encode_v_func, i8* nonnull %151) #10
  %184 = icmp ult i32 %175, %145
  br i1 %184, label %149, label %185

185:                                              ; preds = %159, %143
  tail call void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t* %0, i32 0) #10
  br label %186

186:                                              ; preds = %185, %134, %137
  %187 = sub i32 %101, %111
  %188 = icmp ult i32 %106, 2
  %189 = or i1 %92, %188
  br i1 %189, label %190, label %204

190:                                              ; preds = %186
  %191 = icmp eq i32 %106, 0
  br i1 %191, label %248, label %192

192:                                              ; preds = %190
  %193 = xor i32 %117, 1
  %194 = zext i32 %106 to i64
  br label %195

195:                                              ; preds = %195, %192
  %196 = phi i64 [ 0, %192 ], [ %202, %195 ]
  %197 = trunc i64 %196 to i32
  %198 = mul i32 %12, %197
  %199 = zext i32 %198 to i64
  %200 = getelementptr inbounds i32, i32* %7, i64 %199
  %201 = bitcast i32* %200 to i8*
  tail call void %3(i8* %201, i8* %85, i32 %101, i32 %193) #10, !callees !6
  %202 = add nuw nsw i64 %196, 1
  %203 = icmp eq i64 %202, %194
  br i1 %203, label %248, label %195

204:                                              ; preds = %186
  %205 = icmp ult i32 %106, %5
  %206 = select i1 %205, i32 %106, i32 %5
  %207 = udiv i32 %106, %206
  %208 = icmp eq i32 %206, 0
  br i1 %208, label %247, label %209

209:                                              ; preds = %204
  %210 = add nsw i32 %206, -1
  br label %211

211:                                              ; preds = %209, %221
  %212 = phi i32 [ 0, %209 ], [ %237, %221 ]
  %213 = tail call i8* @opj_malloc(i64 64) #10
  %214 = icmp eq i8* %213, null
  br i1 %214, label %215, label %216

215:                                              ; preds = %211
  tail call void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t* %0, i32 0) #10
  br label %251

216:                                              ; preds = %211
  %217 = tail call i8* @opj_aligned_32_malloc(i64 %84) #10
  %218 = bitcast i8* %213 to i8**
  store i8* %217, i8** %218, align 8
  %219 = icmp eq i8* %217, null
  br i1 %219, label %220, label %221

220:                                              ; preds = %216
  tail call void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t* %0, i32 0) #10
  tail call void @opj_free(i8* nonnull %213) #10
  br label %251

221:                                              ; preds = %216
  %222 = getelementptr inbounds i8, i8* %213, i64 16
  %223 = bitcast i8* %222 to i32*
  store i32 %187, i32* %223, align 8
  %224 = getelementptr inbounds i8, i8* %213, i64 20
  %225 = bitcast i8* %224 to i32*
  store i32 %111, i32* %225, align 4
  %226 = getelementptr inbounds i8, i8* %213, i64 24
  %227 = bitcast i8* %226 to i32*
  store i32 %117, i32* %227, align 8
  %228 = getelementptr inbounds i8, i8* %213, i64 32
  %229 = bitcast i8* %228 to i32*
  store i32 %101, i32* %229, align 8
  %230 = getelementptr inbounds i8, i8* %213, i64 36
  %231 = bitcast i8* %230 to i32*
  store i32 %12, i32* %231, align 4
  %232 = getelementptr inbounds i8, i8* %213, i64 40
  %233 = bitcast i8* %232 to i32**
  store i32* %7, i32** %233, align 8
  %234 = mul i32 %212, %207
  %235 = getelementptr inbounds i8, i8* %213, i64 48
  %236 = bitcast i8* %235 to i32*
  store i32 %234, i32* %236, align 8
  %237 = add nuw i32 %212, 1
  %238 = mul i32 %237, %207
  %239 = getelementptr inbounds i8, i8* %213, i64 52
  %240 = bitcast i8* %239 to i32*
  %241 = icmp eq i32 %212, %210
  %242 = select i1 %241, i32 %106, i32 %238
  store i32 %242, i32* %240, align 4
  %243 = getelementptr inbounds i8, i8* %213, i64 56
  %244 = bitcast i8* %243 to void (i8*, i8*, i32, i32)**
  store void (i8*, i8*, i32, i32)* %3, void (i8*, i8*, i32, i32)** %244, align 8
  %245 = tail call i32 @opj_thread_pool_submit_job(%struct.opj_thread_pool_t* %0, void (i8*, %struct.opj_tls_t*)* nonnull @opj_dwt_encode_h_func, i8* nonnull %213) #10
  %246 = icmp ult i32 %237, %206
  br i1 %246, label %211, label %247

247:                                              ; preds = %221, %204
  tail call void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t* %0, i32 0) #10
  br label %248

248:                                              ; preds = %195, %190, %247
  %249 = add nsw i32 %94, -1
  %250 = icmp eq i32 %94, 0
  br i1 %250, label %251, label %93

251:                                              ; preds = %248, %89, %158, %153, %220, %215
  %252 = phi i32 [ 0, %215 ], [ 0, %220 ], [ 0, %153 ], [ 0, %158 ], [ 1, %89 ], [ 1, %248 ]
  tail call void @opj_aligned_free(i8* %85) #10
  br label %253

253:                                              ; preds = %251, %81
  %254 = phi i32 [ 0, %81 ], [ %252, %251 ]
  ret i32 %254
}

; Function Attrs: nounwind ssp uwtable
define internal void @opj_dwt_encode_and_deinterleave_v(i8* nocapture, i8*, i32, i32, i32, i32) #2 {
  %7 = bitcast i8* %0 to i32*
  %8 = bitcast i8* %1 to i32*
  %9 = icmp ne i32 %3, 0
  %10 = zext i1 %9 to i32
  %11 = add i32 %10, %2
  %12 = lshr i32 %11, 1
  %13 = sub i32 %2, %12
  %14 = icmp eq i32 %5, 8
  %15 = icmp ne i32 %2, 0
  br i1 %14, label %57, label %16

16:                                               ; preds = %6
  br i1 %15, label %17, label %375

17:                                               ; preds = %16
  %18 = icmp eq i32 %5, 0
  %19 = zext i32 %5 to i64
  %20 = icmp ult i32 %5, 8
  %21 = sub nsw i64 8, %19
  %22 = sub nsw i64 7, %19
  %23 = add nsw i64 %19, -1
  %24 = shl nuw nsw i64 %19, 2
  %25 = getelementptr i8, i8* %1, i64 %24
  %26 = getelementptr i8, i8* %0, i64 %24
  %27 = and i64 %19, 4294967288
  %28 = add nsw i64 %27, -8
  %29 = lshr exact i64 %28, 3
  %30 = add nuw nsw i64 %29, 1
  %31 = sub nsw i64 0, %19
  %32 = lshr i64 %31, 3
  %33 = add nuw nsw i64 %32, 1
  %34 = icmp ult i32 %5, 8
  %35 = trunc i64 %23 to i32
  %36 = icmp ugt i64 %23, 4294967295
  %37 = trunc i64 %23 to i32
  %38 = icmp ugt i64 %23, 4294967295
  %39 = and i64 %19, 4294967288
  %40 = and i64 %30, 1
  %41 = icmp eq i64 %28, 0
  %42 = sub nuw nsw i64 %30, %40
  %43 = icmp eq i64 %40, 0
  %44 = icmp eq i64 %39, %19
  %45 = and i64 %19, 3
  %46 = icmp eq i64 %45, 0
  %47 = icmp ult i64 %21, 8
  %48 = trunc i64 %22 to i32
  %49 = icmp ugt i64 %22, 4294967295
  %50 = and i64 %21, -8
  %51 = add nsw i64 %50, %19
  %52 = and i64 %33, 3
  %53 = icmp ult i64 %31, 24
  %54 = sub nsw i64 %33, %52
  %55 = icmp eq i64 %52, 0
  %56 = icmp eq i64 %21, %50
  br label %89

57:                                               ; preds = %6
  br i1 %15, label %58, label %375

58:                                               ; preds = %57
  %59 = zext i32 %2 to i64
  %60 = and i64 %59, 1
  %61 = icmp eq i32 %2, 1
  br i1 %61, label %349, label %62

62:                                               ; preds = %58
  %63 = sub nsw i64 %59, %60
  br label %64

64:                                               ; preds = %64, %62
  %65 = phi i64 [ 0, %62 ], [ %86, %64 ]
  %66 = phi i64 [ %63, %62 ], [ %87, %64 ]
  %67 = trunc i64 %65 to i32
  %68 = shl i64 %65, 3
  %69 = and i64 %68, 4294967280
  %70 = getelementptr inbounds i32, i32* %8, i64 %69
  %71 = bitcast i32* %70 to i8*
  %72 = mul i32 %67, %4
  %73 = zext i32 %72 to i64
  %74 = getelementptr inbounds i32, i32* %7, i64 %73
  %75 = bitcast i32* %74 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %71, i8* align 4 %75, i64 32, i1 false) #10
  %76 = or i64 %65, 1
  %77 = trunc i64 %76 to i32
  %78 = shl i64 %76, 3
  %79 = and i64 %78, 4294967288
  %80 = getelementptr inbounds i32, i32* %8, i64 %79
  %81 = bitcast i32* %80 to i8*
  %82 = mul i32 %77, %4
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds i32, i32* %7, i64 %83
  %85 = bitcast i32* %84 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %81, i8* align 4 %85, i64 32, i1 false) #10
  %86 = add nuw nsw i64 %65, 2
  %87 = add i64 %66, -2
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %349, label %64

89:                                               ; preds = %346, %17
  %90 = phi i32 [ 0, %17 ], [ %347, %346 ]
  %91 = shl i32 %90, 3
  %92 = zext i32 %91 to i64
  %93 = shl nuw nsw i64 %92, 2
  %94 = getelementptr i8, i8* %1, i64 %93
  %95 = getelementptr i8, i8* %25, i64 %93
  %96 = mul i32 %90, %4
  %97 = zext i32 %96 to i64
  %98 = shl nuw nsw i64 %97, 2
  %99 = getelementptr i8, i8* %0, i64 %98
  %100 = getelementptr i8, i8* %26, i64 %98
  %101 = shl i32 %90, 3
  %102 = mul i32 %90, %4
  br i1 %18, label %103, label %105

103:                                              ; preds = %89
  %104 = shl i32 %90, 3
  br label %199

105:                                              ; preds = %89
  %106 = mul i32 %90, %4
  %107 = shl i32 %90, 3
  br i1 %34, label %108, label %129

108:                                              ; preds = %197, %137, %129, %105
  %109 = phi i64 [ 0, %137 ], [ 0, %129 ], [ 0, %105 ], [ %39, %197 ]
  %110 = xor i64 %109, -1
  %111 = add nsw i64 %110, %19
  br i1 %46, label %126, label %112

112:                                              ; preds = %108, %112
  %113 = phi i64 [ %123, %112 ], [ %109, %108 ]
  %114 = phi i64 [ %124, %112 ], [ %45, %108 ]
  %115 = trunc i64 %113 to i32
  %116 = add i32 %106, %115
  %117 = zext i32 %116 to i64
  %118 = getelementptr inbounds i32, i32* %7, i64 %117
  %119 = load i32, i32* %118, align 4
  %120 = add i32 %107, %115
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds i32, i32* %8, i64 %121
  store i32 %119, i32* %122, align 4
  %123 = add nuw nsw i64 %113, 1
  %124 = add i64 %114, -1
  %125 = icmp eq i64 %124, 0
  br i1 %125, label %126, label %112, !llvm.loop !7

126:                                              ; preds = %112, %108
  %127 = phi i64 [ %109, %108 ], [ %123, %112 ]
  %128 = icmp ult i64 %111, 3
  br i1 %128, label %198, label %284

129:                                              ; preds = %105
  %130 = xor i32 %101, -1
  %131 = icmp ult i32 %130, %35
  %132 = or i1 %131, %36
  %133 = xor i32 %102, -1
  %134 = icmp ult i32 %133, %37
  %135 = or i1 %134, %38
  %136 = or i1 %132, %135
  br i1 %136, label %108, label %137

137:                                              ; preds = %129
  %138 = icmp ult i8* %94, %100
  %139 = icmp ult i8* %99, %95
  %140 = and i1 %138, %139
  br i1 %140, label %108, label %141

141:                                              ; preds = %137
  br i1 %41, label %179, label %142

142:                                              ; preds = %141, %142
  %143 = phi i64 [ %176, %142 ], [ 0, %141 ]
  %144 = phi i64 [ %177, %142 ], [ %42, %141 ]
  %145 = trunc i64 %143 to i32
  %146 = add i32 %106, %145
  %147 = zext i32 %146 to i64
  %148 = getelementptr inbounds i32, i32* %7, i64 %147
  %149 = bitcast i32* %148 to <4 x i32>*
  %150 = load <4 x i32>, <4 x i32>* %149, align 4, !alias.scope !9
  %151 = getelementptr inbounds i32, i32* %148, i64 4
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 4, !alias.scope !9
  %154 = add i32 %107, %145
  %155 = zext i32 %154 to i64
  %156 = getelementptr inbounds i32, i32* %8, i64 %155
  %157 = bitcast i32* %156 to <4 x i32>*
  store <4 x i32> %150, <4 x i32>* %157, align 4, !alias.scope !12, !noalias !9
  %158 = getelementptr inbounds i32, i32* %156, i64 4
  %159 = bitcast i32* %158 to <4 x i32>*
  store <4 x i32> %153, <4 x i32>* %159, align 4, !alias.scope !12, !noalias !9
  %160 = trunc i64 %143 to i32
  %161 = or i32 %160, 8
  %162 = add i32 %106, %161
  %163 = zext i32 %162 to i64
  %164 = getelementptr inbounds i32, i32* %7, i64 %163
  %165 = bitcast i32* %164 to <4 x i32>*
  %166 = load <4 x i32>, <4 x i32>* %165, align 4, !alias.scope !9
  %167 = getelementptr inbounds i32, i32* %164, i64 4
  %168 = bitcast i32* %167 to <4 x i32>*
  %169 = load <4 x i32>, <4 x i32>* %168, align 4, !alias.scope !9
  %170 = add i32 %107, %161
  %171 = zext i32 %170 to i64
  %172 = getelementptr inbounds i32, i32* %8, i64 %171
  %173 = bitcast i32* %172 to <4 x i32>*
  store <4 x i32> %166, <4 x i32>* %173, align 4, !alias.scope !12, !noalias !9
  %174 = getelementptr inbounds i32, i32* %172, i64 4
  %175 = bitcast i32* %174 to <4 x i32>*
  store <4 x i32> %169, <4 x i32>* %175, align 4, !alias.scope !12, !noalias !9
  %176 = add i64 %143, 16
  %177 = add i64 %144, -2
  %178 = icmp eq i64 %177, 0
  br i1 %178, label %179, label %142, !llvm.loop !14

179:                                              ; preds = %142, %141
  %180 = phi i64 [ 0, %141 ], [ %176, %142 ]
  br i1 %43, label %197, label %181

181:                                              ; preds = %179
  %182 = trunc i64 %180 to i32
  %183 = add i32 %106, %182
  %184 = zext i32 %183 to i64
  %185 = getelementptr inbounds i32, i32* %7, i64 %184
  %186 = bitcast i32* %185 to <4 x i32>*
  %187 = load <4 x i32>, <4 x i32>* %186, align 4, !alias.scope !9
  %188 = getelementptr inbounds i32, i32* %185, i64 4
  %189 = bitcast i32* %188 to <4 x i32>*
  %190 = load <4 x i32>, <4 x i32>* %189, align 4, !alias.scope !9
  %191 = add i32 %107, %182
  %192 = zext i32 %191 to i64
  %193 = getelementptr inbounds i32, i32* %8, i64 %192
  %194 = bitcast i32* %193 to <4 x i32>*
  store <4 x i32> %187, <4 x i32>* %194, align 4, !alias.scope !12, !noalias !9
  %195 = getelementptr inbounds i32, i32* %193, i64 4
  %196 = bitcast i32* %195 to <4 x i32>*
  store <4 x i32> %190, <4 x i32>* %196, align 4, !alias.scope !12, !noalias !9
  br label %197

197:                                              ; preds = %179, %181
  br i1 %44, label %198, label %108

198:                                              ; preds = %126, %284, %197
  br i1 %20, label %199, label %346

199:                                              ; preds = %103, %198
  %200 = phi i32 [ %104, %103 ], [ %107, %198 ]
  br i1 %47, label %201, label %220

201:                                              ; preds = %283, %220, %199
  %202 = phi i64 [ %19, %220 ], [ %19, %199 ], [ %51, %283 ]
  %203 = sub nsw i64 0, %202
  %204 = sub nsw i64 7, %202
  %205 = and i64 %203, 3
  %206 = icmp eq i64 %205, 0
  br i1 %206, label %217, label %207

207:                                              ; preds = %201, %207
  %208 = phi i64 [ %214, %207 ], [ %202, %201 ]
  %209 = phi i64 [ %215, %207 ], [ %205, %201 ]
  %210 = trunc i64 %208 to i32
  %211 = add i32 %200, %210
  %212 = zext i32 %211 to i64
  %213 = getelementptr inbounds i32, i32* %8, i64 %212
  store i32 0, i32* %213, align 4
  %214 = add nuw nsw i64 %208, 1
  %215 = add i64 %209, -1
  %216 = icmp eq i64 %215, 0
  br i1 %216, label %217, label %207, !llvm.loop !16

217:                                              ; preds = %207, %201
  %218 = phi i64 [ %202, %201 ], [ %214, %207 ]
  %219 = icmp ult i64 %204, 3
  br i1 %219, label %346, label %323

220:                                              ; preds = %199
  %221 = add i32 %200, %5
  %222 = xor i32 %221, -1
  %223 = icmp ult i32 %222, %48
  %224 = or i1 %223, %49
  br i1 %224, label %201, label %225

225:                                              ; preds = %220
  br i1 %53, label %267, label %226

226:                                              ; preds = %225, %226
  %227 = phi i64 [ %264, %226 ], [ 0, %225 ]
  %228 = phi i64 [ %265, %226 ], [ %54, %225 ]
  %229 = trunc i64 %227 to i32
  %230 = add i32 %229, %5
  %231 = add i32 %200, %230
  %232 = zext i32 %231 to i64
  %233 = getelementptr inbounds i32, i32* %8, i64 %232
  %234 = bitcast i32* %233 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %234, align 4
  %235 = getelementptr inbounds i32, i32* %233, i64 4
  %236 = bitcast i32* %235 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %236, align 4
  %237 = trunc i64 %227 to i32
  %238 = or i32 %237, 8
  %239 = add i32 %238, %5
  %240 = add i32 %200, %239
  %241 = zext i32 %240 to i64
  %242 = getelementptr inbounds i32, i32* %8, i64 %241
  %243 = bitcast i32* %242 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %243, align 4
  %244 = getelementptr inbounds i32, i32* %242, i64 4
  %245 = bitcast i32* %244 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %245, align 4
  %246 = trunc i64 %227 to i32
  %247 = or i32 %246, 16
  %248 = add i32 %247, %5
  %249 = add i32 %200, %248
  %250 = zext i32 %249 to i64
  %251 = getelementptr inbounds i32, i32* %8, i64 %250
  %252 = bitcast i32* %251 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %252, align 4
  %253 = getelementptr inbounds i32, i32* %251, i64 4
  %254 = bitcast i32* %253 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %254, align 4
  %255 = trunc i64 %227 to i32
  %256 = or i32 %255, 24
  %257 = add i32 %256, %5
  %258 = add i32 %200, %257
  %259 = zext i32 %258 to i64
  %260 = getelementptr inbounds i32, i32* %8, i64 %259
  %261 = bitcast i32* %260 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %261, align 4
  %262 = getelementptr inbounds i32, i32* %260, i64 4
  %263 = bitcast i32* %262 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %263, align 4
  %264 = add i64 %227, 32
  %265 = add i64 %228, -4
  %266 = icmp eq i64 %265, 0
  br i1 %266, label %267, label %226, !llvm.loop !17

267:                                              ; preds = %226, %225
  %268 = phi i64 [ 0, %225 ], [ %264, %226 ]
  br i1 %55, label %283, label %269

269:                                              ; preds = %267, %269
  %270 = phi i64 [ %280, %269 ], [ %268, %267 ]
  %271 = phi i64 [ %281, %269 ], [ %52, %267 ]
  %272 = trunc i64 %270 to i32
  %273 = add i32 %272, %5
  %274 = add i32 %200, %273
  %275 = zext i32 %274 to i64
  %276 = getelementptr inbounds i32, i32* %8, i64 %275
  %277 = bitcast i32* %276 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %277, align 4
  %278 = getelementptr inbounds i32, i32* %276, i64 4
  %279 = bitcast i32* %278 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %279, align 4
  %280 = add i64 %270, 8
  %281 = add i64 %271, -1
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %283, label %269, !llvm.loop !18

283:                                              ; preds = %269, %267
  br i1 %56, label %346, label %201

284:                                              ; preds = %126, %284
  %285 = phi i64 [ %321, %284 ], [ %127, %126 ]
  %286 = trunc i64 %285 to i32
  %287 = add i32 %106, %286
  %288 = zext i32 %287 to i64
  %289 = getelementptr inbounds i32, i32* %7, i64 %288
  %290 = load i32, i32* %289, align 4
  %291 = add i32 %107, %286
  %292 = zext i32 %291 to i64
  %293 = getelementptr inbounds i32, i32* %8, i64 %292
  store i32 %290, i32* %293, align 4
  %294 = trunc i64 %285 to i32
  %295 = add i32 %294, 1
  %296 = add i32 %106, %295
  %297 = zext i32 %296 to i64
  %298 = getelementptr inbounds i32, i32* %7, i64 %297
  %299 = load i32, i32* %298, align 4
  %300 = add i32 %107, %295
  %301 = zext i32 %300 to i64
  %302 = getelementptr inbounds i32, i32* %8, i64 %301
  store i32 %299, i32* %302, align 4
  %303 = trunc i64 %285 to i32
  %304 = add i32 %303, 2
  %305 = add i32 %106, %304
  %306 = zext i32 %305 to i64
  %307 = getelementptr inbounds i32, i32* %7, i64 %306
  %308 = load i32, i32* %307, align 4
  %309 = add i32 %107, %304
  %310 = zext i32 %309 to i64
  %311 = getelementptr inbounds i32, i32* %8, i64 %310
  store i32 %308, i32* %311, align 4
  %312 = trunc i64 %285 to i32
  %313 = add i32 %312, 3
  %314 = add i32 %106, %313
  %315 = zext i32 %314 to i64
  %316 = getelementptr inbounds i32, i32* %7, i64 %315
  %317 = load i32, i32* %316, align 4
  %318 = add i32 %107, %313
  %319 = zext i32 %318 to i64
  %320 = getelementptr inbounds i32, i32* %8, i64 %319
  store i32 %317, i32* %320, align 4
  %321 = add nuw nsw i64 %285, 4
  %322 = icmp eq i64 %321, %19
  br i1 %322, label %198, label %284, !llvm.loop !19

323:                                              ; preds = %217, %323
  %324 = phi i64 [ %344, %323 ], [ %218, %217 ]
  %325 = trunc i64 %324 to i32
  %326 = add i32 %200, %325
  %327 = zext i32 %326 to i64
  %328 = getelementptr inbounds i32, i32* %8, i64 %327
  store i32 0, i32* %328, align 4
  %329 = trunc i64 %324 to i32
  %330 = add i32 %329, 1
  %331 = add i32 %200, %330
  %332 = zext i32 %331 to i64
  %333 = getelementptr inbounds i32, i32* %8, i64 %332
  store i32 0, i32* %333, align 4
  %334 = trunc i64 %324 to i32
  %335 = add i32 %334, 2
  %336 = add i32 %200, %335
  %337 = zext i32 %336 to i64
  %338 = getelementptr inbounds i32, i32* %8, i64 %337
  store i32 0, i32* %338, align 4
  %339 = trunc i64 %324 to i32
  %340 = add i32 %339, 3
  %341 = add i32 %200, %340
  %342 = zext i32 %341 to i64
  %343 = getelementptr inbounds i32, i32* %8, i64 %342
  store i32 0, i32* %343, align 4
  %344 = add nuw nsw i64 %324, 4
  %345 = icmp eq i64 %344, 8
  br i1 %345, label %346, label %323, !llvm.loop !20

346:                                              ; preds = %217, %323, %283, %198
  %347 = add nuw i32 %90, 1
  %348 = icmp eq i32 %347, %2
  br i1 %348, label %362, label %89

349:                                              ; preds = %64, %58
  %350 = phi i64 [ 0, %58 ], [ %86, %64 ]
  %351 = icmp eq i64 %60, 0
  br i1 %351, label %362, label %352

352:                                              ; preds = %349
  %353 = trunc i64 %350 to i32
  %354 = shl i64 %350, 3
  %355 = and i64 %354, 4294967288
  %356 = getelementptr inbounds i32, i32* %8, i64 %355
  %357 = bitcast i32* %356 to i8*
  %358 = mul i32 %353, %4
  %359 = zext i32 %358 to i64
  %360 = getelementptr inbounds i32, i32* %7, i64 %359
  %361 = bitcast i32* %360 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %357, i8* align 4 %361, i64 32, i1 false) #10
  br label %362

362:                                              ; preds = %346, %352, %349
  %363 = icmp eq i32 %2, 1
  br i1 %363, label %364, label %375

364:                                              ; preds = %362
  br i1 %9, label %776, label %365

365:                                              ; preds = %364
  %366 = bitcast i8* %1 to <4 x i32>*
  %367 = load <4 x i32>, <4 x i32>* %366, align 4
  %368 = shl nsw <4 x i32> %367, <i32 1, i32 1, i32 1, i32 1>
  %369 = bitcast i8* %1 to <4 x i32>*
  store <4 x i32> %368, <4 x i32>* %369, align 4
  %370 = getelementptr inbounds i8, i8* %1, i64 16
  %371 = bitcast i8* %370 to <4 x i32>*
  %372 = load <4 x i32>, <4 x i32>* %371, align 4
  %373 = shl nsw <4 x i32> %372, <i32 1, i32 1, i32 1, i32 1>
  %374 = bitcast i8* %370 to <4 x i32>*
  store <4 x i32> %373, <4 x i32>* %374, align 4
  br label %776

375:                                              ; preds = %57, %16, %362
  br i1 %9, label %393, label %376

376:                                              ; preds = %375
  %377 = getelementptr inbounds i8, i8* %1, i64 32
  %378 = bitcast i8* %377 to <4 x i32>*
  %379 = load <4 x i32>, <4 x i32>* %378, align 4
  %380 = bitcast i8* %1 to <4 x i32>*
  %381 = load <4 x i32>, <4 x i32>* %380, align 4
  %382 = sub nsw <4 x i32> %381, %379
  %383 = bitcast i8* %1 to <4 x i32>*
  store <4 x i32> %382, <4 x i32>* %383, align 4
  %384 = getelementptr inbounds i8, i8* %1, i64 48
  %385 = getelementptr inbounds i8, i8* %1, i64 16
  %386 = bitcast i8* %384 to <4 x i32>*
  %387 = load <4 x i32>, <4 x i32>* %386, align 4
  %388 = bitcast i8* %385 to <4 x i32>*
  %389 = load <4 x i32>, <4 x i32>* %388, align 4
  %390 = sub nsw <4 x i32> %389, %387
  %391 = bitcast i8* %385 to <4 x i32>*
  store <4 x i32> %390, <4 x i32>* %391, align 4
  %392 = icmp ugt i32 %11, 3
  br i1 %392, label %599, label %643

393:                                              ; preds = %375
  %394 = icmp ugt i32 %11, 3
  br i1 %394, label %395, label %440

395:                                              ; preds = %393
  %396 = getelementptr inbounds i8, i8* %1, i64 16
  %397 = bitcast i8* %396 to <2 x i64>*
  %398 = load <2 x i64>, <2 x i64>* %397, align 16
  %399 = bitcast i8* %1 to <2 x i64>*
  %400 = load <2 x i64>, <2 x i64>* %399, align 16
  %401 = zext i32 %12 to i64
  br label %402

402:                                              ; preds = %395, %402
  %403 = phi i64 [ 0, %395 ], [ %436, %402 ]
  %404 = phi i64 [ 1, %395 ], [ %434, %402 ]
  %405 = phi <2 x i64> [ %400, %395 ], [ %411, %402 ]
  %406 = phi <2 x i64> [ %398, %395 ], [ %414, %402 ]
  %407 = shl i64 %404, 4
  %408 = and i64 %407, 4294967280
  %409 = getelementptr inbounds i32, i32* %8, i64 %408
  %410 = bitcast i32* %409 to <2 x i64>*
  %411 = load <2 x i64>, <2 x i64>* %410, align 16
  %412 = getelementptr inbounds i32, i32* %409, i64 4
  %413 = bitcast i32* %412 to <2 x i64>*
  %414 = load <2 x i64>, <2 x i64>* %413, align 16
  %415 = shl i64 %403, 4
  %416 = and i64 %415, 4294967280
  %417 = or i64 %416, 8
  %418 = getelementptr inbounds i32, i32* %8, i64 %417
  %419 = bitcast i32* %418 to <4 x i32>*
  %420 = load <4 x i32>, <4 x i32>* %419, align 16
  %421 = getelementptr inbounds i32, i32* %418, i64 4
  %422 = bitcast i32* %421 to <4 x i32>*
  %423 = load <4 x i32>, <4 x i32>* %422, align 16
  %424 = bitcast <2 x i64> %405 to <4 x i32>
  %425 = bitcast <2 x i64> %411 to <4 x i32>
  %426 = add <4 x i32> %425, %424
  %427 = ashr <4 x i32> %426, <i32 1, i32 1, i32 1, i32 1>
  %428 = sub <4 x i32> %420, %427
  %429 = bitcast <2 x i64> %406 to <4 x i32>
  %430 = bitcast <2 x i64> %414 to <4 x i32>
  %431 = add <4 x i32> %430, %429
  %432 = ashr <4 x i32> %431, <i32 1, i32 1, i32 1, i32 1>
  %433 = sub <4 x i32> %423, %432
  store <4 x i32> %428, <4 x i32>* %419, align 16
  store <4 x i32> %433, <4 x i32>* %422, align 16
  %434 = add nuw nsw i64 %404, 1
  %435 = icmp ult i64 %434, %401
  %436 = add nuw nsw i64 %403, 1
  br i1 %435, label %402, label %437

437:                                              ; preds = %402
  %438 = trunc i64 %404 to i32
  %439 = shl i32 %438, 4
  br label %440

440:                                              ; preds = %437, %393
  %441 = phi i32 [ 0, %393 ], [ %439, %437 ]
  %442 = and i32 %2, 1
  %443 = icmp eq i32 %442, 0
  br i1 %443, label %444, label %466

444:                                              ; preds = %440
  %445 = or i32 %441, 8
  %446 = zext i32 %445 to i64
  %447 = zext i32 %441 to i64
  %448 = getelementptr inbounds i32, i32* %8, i64 %447
  %449 = getelementptr inbounds i32, i32* %8, i64 %446
  %450 = bitcast i32* %448 to <4 x i32>*
  %451 = load <4 x i32>, <4 x i32>* %450, align 4
  %452 = bitcast i32* %449 to <4 x i32>*
  %453 = load <4 x i32>, <4 x i32>* %452, align 4
  %454 = sub nsw <4 x i32> %453, %451
  %455 = bitcast i32* %449 to <4 x i32>*
  store <4 x i32> %454, <4 x i32>* %455, align 4
  %456 = or i64 %447, 4
  %457 = getelementptr inbounds i32, i32* %8, i64 %456
  %458 = or i64 %446, 4
  %459 = getelementptr inbounds i32, i32* %8, i64 %458
  %460 = bitcast i32* %457 to <4 x i32>*
  %461 = load <4 x i32>, <4 x i32>* %460, align 4
  %462 = bitcast i32* %459 to <4 x i32>*
  %463 = load <4 x i32>, <4 x i32>* %462, align 4
  %464 = sub nsw <4 x i32> %463, %461
  %465 = bitcast i32* %459 to <4 x i32>*
  store <4 x i32> %464, <4 x i32>* %465, align 4
  br label %466

466:                                              ; preds = %444, %440
  %467 = getelementptr inbounds i8, i8* %1, i64 32
  %468 = bitcast i8* %467 to <4 x i32>*
  %469 = load <4 x i32>, <4 x i32>* %468, align 4
  %470 = shl <4 x i32> %469, <i32 1, i32 1, i32 1, i32 1>
  %471 = add nsw <4 x i32> %470, <i32 2, i32 2, i32 2, i32 2>
  %472 = ashr <4 x i32> %471, <i32 2, i32 2, i32 2, i32 2>
  %473 = bitcast i8* %1 to <4 x i32>*
  %474 = load <4 x i32>, <4 x i32>* %473, align 4
  %475 = add nsw <4 x i32> %472, %474
  %476 = bitcast i8* %1 to <4 x i32>*
  store <4 x i32> %475, <4 x i32>* %476, align 4
  %477 = getelementptr inbounds i8, i8* %1, i64 48
  %478 = getelementptr inbounds i8, i8* %1, i64 16
  %479 = bitcast i8* %477 to <4 x i32>*
  %480 = load <4 x i32>, <4 x i32>* %479, align 4
  %481 = shl <4 x i32> %480, <i32 1, i32 1, i32 1, i32 1>
  %482 = add nsw <4 x i32> %481, <i32 2, i32 2, i32 2, i32 2>
  %483 = ashr <4 x i32> %482, <i32 2, i32 2, i32 2, i32 2>
  %484 = bitcast i8* %478 to <4 x i32>*
  %485 = load <4 x i32>, <4 x i32>* %484, align 4
  %486 = add nsw <4 x i32> %483, %485
  %487 = bitcast i8* %478 to <4 x i32>*
  store <4 x i32> %486, <4 x i32>* %487, align 4
  %488 = icmp ugt i32 %13, 1
  br i1 %488, label %489, label %534

489:                                              ; preds = %466
  %490 = getelementptr inbounds i8, i8* %1, i64 32
  %491 = bitcast i8* %490 to <2 x i64>*
  %492 = load <2 x i64>, <2 x i64>* %491, align 16
  %493 = getelementptr inbounds i8, i8* %1, i64 48
  %494 = bitcast i8* %493 to <2 x i64>*
  %495 = load <2 x i64>, <2 x i64>* %494, align 16
  %496 = zext i32 %13 to i64
  br label %497

497:                                              ; preds = %497, %489
  %498 = phi i64 [ 1, %489 ], [ %530, %497 ]
  %499 = phi <2 x i64> [ %492, %489 ], [ %507, %497 ]
  %500 = phi <2 x i64> [ %495, %489 ], [ %510, %497 ]
  %501 = trunc i64 %498 to i32
  %502 = shl i32 %501, 4
  %503 = or i32 %502, 8
  %504 = zext i32 %503 to i64
  %505 = getelementptr inbounds i32, i32* %8, i64 %504
  %506 = bitcast i32* %505 to <2 x i64>*
  %507 = load <2 x i64>, <2 x i64>* %506, align 16
  %508 = getelementptr inbounds i32, i32* %505, i64 4
  %509 = bitcast i32* %508 to <2 x i64>*
  %510 = load <2 x i64>, <2 x i64>* %509, align 16
  %511 = zext i32 %502 to i64
  %512 = getelementptr inbounds i32, i32* %8, i64 %511
  %513 = bitcast i32* %512 to <4 x i32>*
  %514 = load <4 x i32>, <4 x i32>* %513, align 16
  %515 = getelementptr inbounds i32, i32* %512, i64 4
  %516 = bitcast i32* %515 to <4 x i32>*
  %517 = load <4 x i32>, <4 x i32>* %516, align 16
  %518 = bitcast <2 x i64> %499 to <4 x i32>
  %519 = bitcast <2 x i64> %507 to <4 x i32>
  %520 = add <4 x i32> %518, <i32 2, i32 2, i32 2, i32 2>
  %521 = add <4 x i32> %520, %519
  %522 = ashr <4 x i32> %521, <i32 2, i32 2, i32 2, i32 2>
  %523 = add <4 x i32> %522, %514
  %524 = bitcast <2 x i64> %500 to <4 x i32>
  %525 = bitcast <2 x i64> %510 to <4 x i32>
  %526 = add <4 x i32> %524, <i32 2, i32 2, i32 2, i32 2>
  %527 = add <4 x i32> %526, %525
  %528 = ashr <4 x i32> %527, <i32 2, i32 2, i32 2, i32 2>
  %529 = add <4 x i32> %528, %517
  store <4 x i32> %523, <4 x i32>* %513, align 16
  store <4 x i32> %529, <4 x i32>* %516, align 16
  %530 = add nuw nsw i64 %498, 1
  %531 = icmp eq i64 %530, %496
  br i1 %531, label %532, label %497

532:                                              ; preds = %497
  %533 = shl i32 %13, 4
  br label %534

534:                                              ; preds = %532, %466
  %535 = phi i32 [ 16, %466 ], [ %533, %532 ]
  br i1 %443, label %776, label %536

536:                                              ; preds = %534
  %537 = zext i32 %535 to i64
  %538 = add i32 %535, -8
  %539 = zext i32 %538 to i64
  %540 = getelementptr inbounds i32, i32* %8, i64 %539
  %541 = getelementptr inbounds i32, i32* %8, i64 %537
  %542 = bitcast i32* %540 to <4 x i32>*
  %543 = load <4 x i32>, <4 x i32>* %542, align 4
  %544 = shl <4 x i32> %543, <i32 1, i32 1, i32 1, i32 1>
  %545 = add nsw <4 x i32> %544, <i32 2, i32 2, i32 2, i32 2>
  %546 = ashr <4 x i32> %545, <i32 2, i32 2, i32 2, i32 2>
  %547 = bitcast i32* %541 to <4 x i32>*
  %548 = load <4 x i32>, <4 x i32>* %547, align 4
  %549 = add nsw <4 x i32> %546, %548
  %550 = bitcast i32* %541 to <4 x i32>*
  store <4 x i32> %549, <4 x i32>* %550, align 4
  %551 = or i32 %535, 4
  %552 = add i32 %551, -8
  %553 = zext i32 %552 to i64
  %554 = getelementptr inbounds i32, i32* %8, i64 %553
  %555 = load i32, i32* %554, align 4
  %556 = shl i32 %555, 1
  %557 = add nsw i32 %556, 2
  %558 = ashr i32 %557, 2
  %559 = or i64 %537, 4
  %560 = getelementptr inbounds i32, i32* %8, i64 %559
  %561 = load i32, i32* %560, align 4
  %562 = add nsw i32 %558, %561
  store i32 %562, i32* %560, align 4
  %563 = or i32 %535, 5
  %564 = add i32 %563, -8
  %565 = zext i32 %564 to i64
  %566 = getelementptr inbounds i32, i32* %8, i64 %565
  %567 = load i32, i32* %566, align 4
  %568 = shl i32 %567, 1
  %569 = add nsw i32 %568, 2
  %570 = ashr i32 %569, 2
  %571 = or i64 %537, 5
  %572 = getelementptr inbounds i32, i32* %8, i64 %571
  %573 = load i32, i32* %572, align 4
  %574 = add nsw i32 %570, %573
  store i32 %574, i32* %572, align 4
  %575 = or i32 %535, 6
  %576 = add i32 %575, -8
  %577 = zext i32 %576 to i64
  %578 = getelementptr inbounds i32, i32* %8, i64 %577
  %579 = load i32, i32* %578, align 4
  %580 = shl i32 %579, 1
  %581 = add nsw i32 %580, 2
  %582 = ashr i32 %581, 2
  %583 = or i64 %537, 6
  %584 = getelementptr inbounds i32, i32* %8, i64 %583
  %585 = load i32, i32* %584, align 4
  %586 = add nsw i32 %582, %585
  store i32 %586, i32* %584, align 4
  %587 = or i32 %535, 7
  %588 = add i32 %587, -8
  %589 = zext i32 %588 to i64
  %590 = getelementptr inbounds i32, i32* %8, i64 %589
  %591 = load i32, i32* %590, align 4
  %592 = shl i32 %591, 1
  %593 = add nsw i32 %592, 2
  %594 = ashr i32 %593, 2
  %595 = or i64 %537, 7
  %596 = getelementptr inbounds i32, i32* %8, i64 %595
  %597 = load i32, i32* %596, align 4
  %598 = add nsw i32 %594, %597
  store i32 %598, i32* %596, align 4
  br label %776

599:                                              ; preds = %376
  %600 = getelementptr inbounds i8, i8* %1, i64 48
  %601 = bitcast i8* %600 to <2 x i64>*
  %602 = load <2 x i64>, <2 x i64>* %601, align 16
  %603 = getelementptr inbounds i8, i8* %1, i64 32
  %604 = bitcast i8* %603 to <2 x i64>*
  %605 = load <2 x i64>, <2 x i64>* %604, align 16
  %606 = zext i32 %12 to i64
  br label %607

607:                                              ; preds = %599, %607
  %608 = phi i64 [ 1, %599 ], [ %638, %607 ]
  %609 = phi <2 x i64> [ %602, %599 ], [ %620, %607 ]
  %610 = phi <2 x i64> [ %605, %599 ], [ %617, %607 ]
  %611 = trunc i64 %608 to i32
  %612 = shl i32 %611, 4
  %613 = or i32 %612, 8
  %614 = zext i32 %613 to i64
  %615 = getelementptr inbounds i32, i32* %8, i64 %614
  %616 = bitcast i32* %615 to <2 x i64>*
  %617 = load <2 x i64>, <2 x i64>* %616, align 16
  %618 = getelementptr inbounds i32, i32* %615, i64 4
  %619 = bitcast i32* %618 to <2 x i64>*
  %620 = load <2 x i64>, <2 x i64>* %619, align 16
  %621 = zext i32 %612 to i64
  %622 = getelementptr inbounds i32, i32* %8, i64 %621
  %623 = bitcast i32* %622 to <4 x i32>*
  %624 = load <4 x i32>, <4 x i32>* %623, align 16
  %625 = getelementptr inbounds i32, i32* %622, i64 4
  %626 = bitcast i32* %625 to <4 x i32>*
  %627 = load <4 x i32>, <4 x i32>* %626, align 16
  %628 = bitcast <2 x i64> %617 to <4 x i32>
  %629 = bitcast <2 x i64> %610 to <4 x i32>
  %630 = add <4 x i32> %628, %629
  %631 = ashr <4 x i32> %630, <i32 1, i32 1, i32 1, i32 1>
  %632 = sub <4 x i32> %624, %631
  %633 = bitcast <2 x i64> %620 to <4 x i32>
  %634 = bitcast <2 x i64> %609 to <4 x i32>
  %635 = add <4 x i32> %633, %634
  %636 = ashr <4 x i32> %635, <i32 1, i32 1, i32 1, i32 1>
  %637 = sub <4 x i32> %627, %636
  store <4 x i32> %632, <4 x i32>* %623, align 16
  store <4 x i32> %637, <4 x i32>* %626, align 16
  %638 = add nuw nsw i64 %608, 1
  %639 = icmp ult i64 %638, %606
  br i1 %639, label %607, label %640

640:                                              ; preds = %607
  %641 = trunc i64 %638 to i32
  %642 = shl i32 %641, 4
  br label %643

643:                                              ; preds = %640, %376
  %644 = phi i32 [ 16, %376 ], [ %642, %640 ]
  %645 = and i32 %2, 1
  %646 = icmp eq i32 %645, 0
  br i1 %646, label %695, label %647

647:                                              ; preds = %643
  %648 = zext i32 %644 to i64
  %649 = add i32 %644, -8
  %650 = zext i32 %649 to i64
  %651 = getelementptr inbounds i32, i32* %8, i64 %650
  %652 = getelementptr inbounds i32, i32* %8, i64 %648
  %653 = bitcast i32* %651 to <4 x i32>*
  %654 = load <4 x i32>, <4 x i32>* %653, align 4
  %655 = bitcast i32* %652 to <4 x i32>*
  %656 = load <4 x i32>, <4 x i32>* %655, align 4
  %657 = sub nsw <4 x i32> %656, %654
  %658 = bitcast i32* %652 to <4 x i32>*
  store <4 x i32> %657, <4 x i32>* %658, align 4
  %659 = or i32 %644, 4
  %660 = add i32 %659, -8
  %661 = zext i32 %660 to i64
  %662 = getelementptr inbounds i32, i32* %8, i64 %661
  %663 = load i32, i32* %662, align 4
  %664 = or i64 %648, 4
  %665 = getelementptr inbounds i32, i32* %8, i64 %664
  %666 = load i32, i32* %665, align 4
  %667 = sub nsw i32 %666, %663
  store i32 %667, i32* %665, align 4
  %668 = or i32 %644, 5
  %669 = add i32 %668, -8
  %670 = zext i32 %669 to i64
  %671 = getelementptr inbounds i32, i32* %8, i64 %670
  %672 = load i32, i32* %671, align 4
  %673 = or i64 %648, 5
  %674 = getelementptr inbounds i32, i32* %8, i64 %673
  %675 = load i32, i32* %674, align 4
  %676 = sub nsw i32 %675, %672
  store i32 %676, i32* %674, align 4
  %677 = or i32 %644, 6
  %678 = add i32 %677, -8
  %679 = zext i32 %678 to i64
  %680 = getelementptr inbounds i32, i32* %8, i64 %679
  %681 = load i32, i32* %680, align 4
  %682 = or i64 %648, 6
  %683 = getelementptr inbounds i32, i32* %8, i64 %682
  %684 = load i32, i32* %683, align 4
  %685 = sub nsw i32 %684, %681
  store i32 %685, i32* %683, align 4
  %686 = or i32 %644, 7
  %687 = add i32 %686, -8
  %688 = zext i32 %687 to i64
  %689 = getelementptr inbounds i32, i32* %8, i64 %688
  %690 = load i32, i32* %689, align 4
  %691 = or i64 %648, 7
  %692 = getelementptr inbounds i32, i32* %8, i64 %691
  %693 = load i32, i32* %692, align 4
  %694 = sub nsw i32 %693, %690
  store i32 %694, i32* %692, align 4
  br label %695

695:                                              ; preds = %647, %643
  %696 = icmp ugt i32 %13, 1
  br i1 %696, label %697, label %746

697:                                              ; preds = %695
  %698 = bitcast i8* %1 to <2 x i64>*
  %699 = load <2 x i64>, <2 x i64>* %698, align 16
  %700 = getelementptr inbounds i8, i8* %1, i64 16
  %701 = bitcast i8* %700 to <2 x i64>*
  %702 = load <2 x i64>, <2 x i64>* %701, align 16
  %703 = xor i32 %12, -1
  %704 = add i32 %703, %2
  %705 = zext i32 %704 to i64
  br label %706

706:                                              ; preds = %706, %697
  %707 = phi i64 [ 0, %697 ], [ %741, %706 ]
  %708 = phi i64 [ 1, %697 ], [ %740, %706 ]
  %709 = phi <2 x i64> [ %702, %697 ], [ %718, %706 ]
  %710 = phi <2 x i64> [ %699, %697 ], [ %715, %706 ]
  %711 = shl i64 %708, 4
  %712 = and i64 %711, 4294967280
  %713 = getelementptr inbounds i32, i32* %8, i64 %712
  %714 = bitcast i32* %713 to <2 x i64>*
  %715 = load <2 x i64>, <2 x i64>* %714, align 16
  %716 = getelementptr inbounds i32, i32* %713, i64 4
  %717 = bitcast i32* %716 to <2 x i64>*
  %718 = load <2 x i64>, <2 x i64>* %717, align 16
  %719 = shl i64 %707, 4
  %720 = and i64 %719, 4294967280
  %721 = or i64 %720, 8
  %722 = getelementptr inbounds i32, i32* %8, i64 %721
  %723 = bitcast i32* %722 to <4 x i32>*
  %724 = load <4 x i32>, <4 x i32>* %723, align 16
  %725 = getelementptr inbounds i32, i32* %722, i64 4
  %726 = bitcast i32* %725 to <4 x i32>*
  %727 = load <4 x i32>, <4 x i32>* %726, align 16
  %728 = bitcast <2 x i64> %710 to <4 x i32>
  %729 = bitcast <2 x i64> %715 to <4 x i32>
  %730 = add <4 x i32> %728, <i32 2, i32 2, i32 2, i32 2>
  %731 = add <4 x i32> %730, %729
  %732 = ashr <4 x i32> %731, <i32 2, i32 2, i32 2, i32 2>
  %733 = add <4 x i32> %732, %724
  %734 = bitcast <2 x i64> %709 to <4 x i32>
  %735 = bitcast <2 x i64> %718 to <4 x i32>
  %736 = add <4 x i32> %734, <i32 2, i32 2, i32 2, i32 2>
  %737 = add <4 x i32> %736, %735
  %738 = ashr <4 x i32> %737, <i32 2, i32 2, i32 2, i32 2>
  %739 = add <4 x i32> %738, %727
  store <4 x i32> %733, <4 x i32>* %723, align 16
  store <4 x i32> %739, <4 x i32>* %726, align 16
  %740 = add nuw nsw i64 %708, 1
  %741 = add nuw nsw i64 %707, 1
  %742 = icmp eq i64 %741, %705
  br i1 %742, label %743, label %706

743:                                              ; preds = %706
  %744 = trunc i64 %708 to i32
  %745 = shl i32 %744, 4
  br label %746

746:                                              ; preds = %743, %695
  %747 = phi i32 [ 0, %695 ], [ %745, %743 ]
  br i1 %646, label %748, label %776

748:                                              ; preds = %746
  %749 = or i32 %747, 8
  %750 = zext i32 %749 to i64
  %751 = zext i32 %747 to i64
  %752 = getelementptr inbounds i32, i32* %8, i64 %751
  %753 = getelementptr inbounds i32, i32* %8, i64 %750
  %754 = bitcast i32* %752 to <4 x i32>*
  %755 = load <4 x i32>, <4 x i32>* %754, align 4
  %756 = shl <4 x i32> %755, <i32 1, i32 1, i32 1, i32 1>
  %757 = add nsw <4 x i32> %756, <i32 2, i32 2, i32 2, i32 2>
  %758 = ashr <4 x i32> %757, <i32 2, i32 2, i32 2, i32 2>
  %759 = bitcast i32* %753 to <4 x i32>*
  %760 = load <4 x i32>, <4 x i32>* %759, align 4
  %761 = add nsw <4 x i32> %758, %760
  %762 = bitcast i32* %753 to <4 x i32>*
  store <4 x i32> %761, <4 x i32>* %762, align 4
  %763 = or i64 %751, 4
  %764 = getelementptr inbounds i32, i32* %8, i64 %763
  %765 = or i64 %750, 4
  %766 = getelementptr inbounds i32, i32* %8, i64 %765
  %767 = bitcast i32* %764 to <4 x i32>*
  %768 = load <4 x i32>, <4 x i32>* %767, align 4
  %769 = shl <4 x i32> %768, <i32 1, i32 1, i32 1, i32 1>
  %770 = add nsw <4 x i32> %769, <i32 2, i32 2, i32 2, i32 2>
  %771 = ashr <4 x i32> %770, <i32 2, i32 2, i32 2, i32 2>
  %772 = bitcast i32* %766 to <4 x i32>*
  %773 = load <4 x i32>, <4 x i32>* %772, align 4
  %774 = add nsw <4 x i32> %771, %773
  %775 = bitcast i32* %766 to <4 x i32>*
  store <4 x i32> %774, <4 x i32>* %775, align 4
  br label %776

776:                                              ; preds = %748, %536, %365, %746, %534, %364
  %777 = xor i1 %9, true
  %778 = zext i1 %777 to i32
  br i1 %14, label %779, label %880

779:                                              ; preds = %776
  %780 = shl nuw nsw i32 %778, 3
  %781 = zext i32 %4 to i64
  %782 = zext i32 %12 to i64
  %783 = mul nuw nsw i64 %782, %781
  %784 = getelementptr inbounds i32, i32* %7, i64 %783
  %785 = sub nuw nsw i32 8, %780
  %786 = icmp eq i32 %12, 0
  br i1 %786, label %832, label %787

787:                                              ; preds = %779
  %788 = zext i32 %780 to i64
  %789 = getelementptr inbounds i32, i32* %8, i64 %788
  %790 = add nsw i32 %12, -1
  %791 = and i32 %12, 3
  %792 = icmp eq i32 %791, 0
  br i1 %792, label %805, label %793

793:                                              ; preds = %787, %793
  %794 = phi i32 [ %798, %793 ], [ %12, %787 ]
  %795 = phi i32* [ %802, %793 ], [ %789, %787 ]
  %796 = phi i32* [ %801, %793 ], [ %7, %787 ]
  %797 = phi i32 [ %803, %793 ], [ %791, %787 ]
  %798 = add nsw i32 %794, -1
  %799 = bitcast i32* %796 to i8*
  %800 = bitcast i32* %795 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %799, i8* align 4 %800, i64 32, i1 false) #10, !alias.scope !21
  %801 = getelementptr inbounds i32, i32* %796, i64 %781
  %802 = getelementptr inbounds i32, i32* %795, i64 16
  %803 = add i32 %797, -1
  %804 = icmp eq i32 %803, 0
  br i1 %804, label %805, label %793, !llvm.loop !25

805:                                              ; preds = %793, %787
  %806 = phi i32 [ %12, %787 ], [ %798, %793 ]
  %807 = phi i32* [ %789, %787 ], [ %802, %793 ]
  %808 = phi i32* [ %7, %787 ], [ %801, %793 ]
  %809 = icmp ult i32 %790, 3
  br i1 %809, label %832, label %810

810:                                              ; preds = %805, %810
  %811 = phi i32 [ %826, %810 ], [ %806, %805 ]
  %812 = phi i32* [ %830, %810 ], [ %807, %805 ]
  %813 = phi i32* [ %829, %810 ], [ %808, %805 ]
  %814 = bitcast i32* %813 to i8*
  %815 = bitcast i32* %812 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %814, i8* align 4 %815, i64 32, i1 false) #10, !alias.scope !21
  %816 = getelementptr inbounds i32, i32* %813, i64 %781
  %817 = getelementptr inbounds i32, i32* %812, i64 16
  %818 = bitcast i32* %816 to i8*
  %819 = bitcast i32* %817 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %818, i8* align 4 %819, i64 32, i1 false) #10, !alias.scope !21
  %820 = getelementptr inbounds i32, i32* %816, i64 %781
  %821 = getelementptr inbounds i32, i32* %812, i64 32
  %822 = bitcast i32* %820 to i8*
  %823 = bitcast i32* %821 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %822, i8* align 4 %823, i64 32, i1 false) #10, !alias.scope !21
  %824 = getelementptr inbounds i32, i32* %820, i64 %781
  %825 = getelementptr inbounds i32, i32* %812, i64 48
  %826 = add nsw i32 %811, -4
  %827 = bitcast i32* %824 to i8*
  %828 = bitcast i32* %825 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %827, i8* align 4 %828, i64 32, i1 false) #10, !alias.scope !21
  %829 = getelementptr inbounds i32, i32* %824, i64 %781
  %830 = getelementptr inbounds i32, i32* %812, i64 64
  %831 = icmp eq i32 %826, 0
  br i1 %831, label %832, label %810

832:                                              ; preds = %805, %810, %779
  %833 = icmp eq i32 %13, 0
  br i1 %833, label %881, label %834

834:                                              ; preds = %832
  %835 = zext i32 %785 to i64
  %836 = getelementptr inbounds i32, i32* %8, i64 %835
  %837 = xor i32 %12, -1
  %838 = add i32 %837, %2
  %839 = and i32 %13, 3
  %840 = icmp eq i32 %839, 0
  br i1 %840, label %853, label %841

841:                                              ; preds = %834, %841
  %842 = phi i32 [ %846, %841 ], [ %13, %834 ]
  %843 = phi i32* [ %850, %841 ], [ %836, %834 ]
  %844 = phi i32* [ %849, %841 ], [ %784, %834 ]
  %845 = phi i32 [ %851, %841 ], [ %839, %834 ]
  %846 = add nsw i32 %842, -1
  %847 = bitcast i32* %844 to i8*
  %848 = bitcast i32* %843 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %847, i8* align 4 %848, i64 32, i1 false) #10, !alias.scope !21
  %849 = getelementptr inbounds i32, i32* %844, i64 %781
  %850 = getelementptr inbounds i32, i32* %843, i64 16
  %851 = add i32 %845, -1
  %852 = icmp eq i32 %851, 0
  br i1 %852, label %853, label %841, !llvm.loop !26

853:                                              ; preds = %841, %834
  %854 = phi i32 [ %13, %834 ], [ %846, %841 ]
  %855 = phi i32* [ %836, %834 ], [ %850, %841 ]
  %856 = phi i32* [ %784, %834 ], [ %849, %841 ]
  %857 = icmp ult i32 %838, 3
  br i1 %857, label %881, label %858

858:                                              ; preds = %853, %858
  %859 = phi i32 [ %874, %858 ], [ %854, %853 ]
  %860 = phi i32* [ %878, %858 ], [ %855, %853 ]
  %861 = phi i32* [ %877, %858 ], [ %856, %853 ]
  %862 = bitcast i32* %861 to i8*
  %863 = bitcast i32* %860 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %862, i8* align 4 %863, i64 32, i1 false) #10, !alias.scope !21
  %864 = getelementptr inbounds i32, i32* %861, i64 %781
  %865 = getelementptr inbounds i32, i32* %860, i64 16
  %866 = bitcast i32* %864 to i8*
  %867 = bitcast i32* %865 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %866, i8* align 4 %867, i64 32, i1 false) #10, !alias.scope !21
  %868 = getelementptr inbounds i32, i32* %864, i64 %781
  %869 = getelementptr inbounds i32, i32* %860, i64 32
  %870 = bitcast i32* %868 to i8*
  %871 = bitcast i32* %869 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %870, i8* align 4 %871, i64 32, i1 false) #10, !alias.scope !21
  %872 = getelementptr inbounds i32, i32* %868, i64 %781
  %873 = getelementptr inbounds i32, i32* %860, i64 48
  %874 = add nsw i32 %859, -4
  %875 = bitcast i32* %872 to i8*
  %876 = bitcast i32* %873 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %875, i8* align 4 %876, i64 32, i1 false) #10, !alias.scope !21
  %877 = getelementptr inbounds i32, i32* %872, i64 %781
  %878 = getelementptr inbounds i32, i32* %860, i64 64
  %879 = icmp eq i32 %874, 0
  br i1 %879, label %881, label %858

880:                                              ; preds = %776
  tail call fastcc void @opj_dwt_deinterleave_v_cols(i32* %8, i32* %7, i32 %13, i32 %12, i32 %4, i32 %778, i32 %5)
  br label %881

881:                                              ; preds = %853, %858, %832, %880
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @opj_dwt_encode_and_deinterleave_h_one_row(i8*, i8* nocapture, i32, i32) #0 {
  %5 = bitcast i8* %0 to i32*
  %6 = bitcast i8* %1 to i32*
  %7 = icmp ne i32 %3, 0
  %8 = zext i1 %7 to i32
  %9 = add i32 %8, %2
  %10 = lshr i32 %9, 1
  %11 = sub i32 %2, %10
  br i1 %7, label %12, label %192

12:                                               ; preds = %4
  %13 = icmp ugt i32 %2, 1
  br i1 %13, label %14, label %293

14:                                               ; preds = %12
  %15 = add nsw i32 %10, -1
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %17, label %118

17:                                               ; preds = %14
  %18 = zext i32 %10 to i64
  %19 = zext i32 %15 to i64
  %20 = icmp ult i32 %15, 5
  br i1 %20, label %59, label %21

21:                                               ; preds = %17
  %22 = shl nuw nsw i64 %18, 2
  %23 = getelementptr i8, i8* %1, i64 %22
  %24 = shl nuw nsw i64 %19, 2
  %25 = add nuw nsw i64 %22, %24
  %26 = getelementptr i8, i8* %1, i64 %25
  %27 = shl nuw nsw i64 %19, 3
  %28 = or i64 %27, 4
  %29 = getelementptr i8, i8* %0, i64 %28
  %30 = icmp ult i8* %23, %29
  %31 = icmp ugt i8* %26, %0
  %32 = and i1 %30, %31
  br i1 %32, label %59, label %33

33:                                               ; preds = %21
  %34 = and i64 %19, 3
  %35 = icmp eq i64 %34, 0
  %36 = select i1 %35, i64 4, i64 %34
  %37 = sub nsw i64 %19, %36
  br label %38

38:                                               ; preds = %38, %33
  %39 = phi i64 [ 0, %33 ], [ %57, %38 ]
  %40 = shl nuw nsw i64 %39, 1
  %41 = or i64 %40, 1
  %42 = getelementptr inbounds i32, i32* %5, i64 %41
  %43 = bitcast i32* %42 to <8 x i32>*
  %44 = load <8 x i32>, <8 x i32>* %43, align 4
  %45 = shufflevector <8 x i32> %44, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %46 = shufflevector <8 x i32> %44, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %47 = getelementptr inbounds i32, i32* %5, i64 %40
  %48 = bitcast i32* %47 to <8 x i32>*
  %49 = load <8 x i32>, <8 x i32>* %48, align 4
  %50 = shufflevector <8 x i32> %49, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %51 = add nsw <4 x i32> %46, %50
  %52 = ashr <4 x i32> %51, <i32 1, i32 1, i32 1, i32 1>
  %53 = sub nsw <4 x i32> %45, %52
  %54 = add nuw nsw i64 %39, %18
  %55 = getelementptr inbounds i32, i32* %6, i64 %54
  %56 = bitcast i32* %55 to <4 x i32>*
  store <4 x i32> %53, <4 x i32>* %56, align 4, !alias.scope !27, !noalias !30
  %57 = add i64 %39, 4
  %58 = icmp eq i64 %57, %37
  br i1 %58, label %59, label %38, !llvm.loop !32

59:                                               ; preds = %38, %21, %17
  %60 = phi i64 [ 0, %21 ], [ 0, %17 ], [ %37, %38 ]
  %61 = sub nsw i64 %19, %60
  %62 = xor i64 %60, -1
  %63 = and i64 %61, 1
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %81, label %65

65:                                               ; preds = %59
  %66 = shl nuw nsw i64 %60, 1
  %67 = or i64 %66, 1
  %68 = getelementptr inbounds i32, i32* %5, i64 %67
  %69 = load i32, i32* %68, align 4
  %70 = getelementptr inbounds i32, i32* %5, i64 %66
  %71 = load i32, i32* %70, align 4
  %72 = add nuw nsw i64 %60, 1
  %73 = shl nuw nsw i64 %72, 1
  %74 = getelementptr inbounds i32, i32* %5, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = add nsw i32 %75, %71
  %77 = ashr i32 %76, 1
  %78 = sub nsw i32 %69, %77
  %79 = add nuw nsw i64 %60, %18
  %80 = getelementptr inbounds i32, i32* %6, i64 %79
  store i32 %78, i32* %80, align 4
  br label %81

81:                                               ; preds = %59, %65
  %82 = phi i64 [ %60, %59 ], [ %72, %65 ]
  %83 = sub nsw i64 0, %19
  %84 = icmp eq i64 %62, %83
  br i1 %84, label %118, label %85

85:                                               ; preds = %81, %85
  %86 = phi i64 [ %108, %85 ], [ %82, %81 ]
  %87 = shl nuw nsw i64 %86, 1
  %88 = or i64 %87, 1
  %89 = getelementptr inbounds i32, i32* %5, i64 %88
  %90 = load i32, i32* %89, align 4
  %91 = getelementptr inbounds i32, i32* %5, i64 %87
  %92 = load i32, i32* %91, align 4
  %93 = add nuw nsw i64 %86, 1
  %94 = shl nuw nsw i64 %93, 1
  %95 = getelementptr inbounds i32, i32* %5, i64 %94
  %96 = load i32, i32* %95, align 4
  %97 = add nsw i32 %96, %92
  %98 = ashr i32 %97, 1
  %99 = sub nsw i32 %90, %98
  %100 = add nuw nsw i64 %86, %18
  %101 = getelementptr inbounds i32, i32* %6, i64 %100
  store i32 %99, i32* %101, align 4
  %102 = shl nuw nsw i64 %93, 1
  %103 = or i64 %102, 1
  %104 = getelementptr inbounds i32, i32* %5, i64 %103
  %105 = load i32, i32* %104, align 4
  %106 = getelementptr inbounds i32, i32* %5, i64 %102
  %107 = load i32, i32* %106, align 4
  %108 = add nuw nsw i64 %86, 2
  %109 = shl nuw nsw i64 %108, 1
  %110 = getelementptr inbounds i32, i32* %5, i64 %109
  %111 = load i32, i32* %110, align 4
  %112 = add nsw i32 %111, %107
  %113 = ashr i32 %112, 1
  %114 = sub nsw i32 %105, %113
  %115 = add nuw nsw i64 %93, %18
  %116 = getelementptr inbounds i32, i32* %6, i64 %115
  store i32 %114, i32* %116, align 4
  %117 = icmp eq i64 %108, %19
  br i1 %117, label %118, label %85, !llvm.loop !33

118:                                              ; preds = %81, %85, %14
  %119 = phi i32 [ 0, %14 ], [ %15, %85 ], [ %15, %81 ]
  %120 = and i32 %2, 1
  %121 = icmp eq i32 %120, 0
  br i1 %121, label %122, label %135

122:                                              ; preds = %118
  %123 = shl nuw nsw i32 %119, 1
  %124 = or i32 %123, 1
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds i32, i32* %5, i64 %125
  %127 = load i32, i32* %126, align 4
  %128 = zext i32 %123 to i64
  %129 = getelementptr inbounds i32, i32* %5, i64 %128
  %130 = load i32, i32* %129, align 4
  %131 = sub nsw i32 %127, %130
  %132 = add nuw nsw i32 %119, %10
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds i32, i32* %6, i64 %133
  store i32 %131, i32* %134, align 4
  br label %135

135:                                              ; preds = %122, %118
  %136 = zext i32 %10 to i64
  %137 = getelementptr inbounds i32, i32* %6, i64 %136
  %138 = load i32, i32* %137, align 4
  %139 = shl i32 %138, 1
  %140 = add nsw i32 %139, 2
  %141 = ashr i32 %140, 2
  %142 = load i32, i32* %5, align 4
  %143 = add nsw i32 %141, %142
  store i32 %143, i32* %5, align 4
  %144 = icmp sgt i32 %11, 1
  br i1 %144, label %145, label %169

145:                                              ; preds = %135
  %146 = zext i32 %11 to i64
  br label %147

147:                                              ; preds = %147, %145
  %148 = phi i64 [ 1, %145 ], [ %167, %147 ]
  %149 = shl nuw nsw i64 %148, 1
  %150 = getelementptr inbounds i32, i32* %5, i64 %149
  %151 = load i32, i32* %150, align 4
  %152 = trunc i64 %148 to i32
  %153 = add i32 %15, %152
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds i32, i32* %6, i64 %154
  %156 = load i32, i32* %155, align 4
  %157 = trunc i64 %148 to i32
  %158 = add i32 %10, %157
  %159 = zext i32 %158 to i64
  %160 = getelementptr inbounds i32, i32* %6, i64 %159
  %161 = load i32, i32* %160, align 4
  %162 = add i32 %156, 2
  %163 = add i32 %162, %161
  %164 = ashr i32 %163, 2
  %165 = add nsw i32 %164, %151
  %166 = getelementptr inbounds i32, i32* %5, i64 %148
  store i32 %165, i32* %166, align 4
  %167 = add nuw nsw i64 %148, 1
  %168 = icmp eq i64 %167, %146
  br i1 %168, label %169, label %147

169:                                              ; preds = %147, %135
  %170 = phi i32 [ 1, %135 ], [ %11, %147 ]
  br i1 %121, label %186, label %171

171:                                              ; preds = %169
  %172 = shl nuw nsw i32 %170, 1
  %173 = zext i32 %172 to i64
  %174 = getelementptr inbounds i32, i32* %5, i64 %173
  %175 = load i32, i32* %174, align 4
  %176 = add i32 %15, %170
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds i32, i32* %6, i64 %177
  %179 = load i32, i32* %178, align 4
  %180 = shl i32 %179, 1
  %181 = add nsw i32 %180, 2
  %182 = ashr i32 %181, 2
  %183 = add nsw i32 %182, %175
  %184 = zext i32 %170 to i64
  %185 = getelementptr inbounds i32, i32* %5, i64 %184
  store i32 %183, i32* %185, align 4
  br label %186

186:                                              ; preds = %169, %171
  %187 = getelementptr inbounds i32, i32* %5, i64 %136
  %188 = bitcast i32* %187 to i8*
  %189 = bitcast i32* %137 to i8*
  %190 = sext i32 %11 to i64
  %191 = shl nsw i64 %190, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %188, i8* align 4 %189, i64 %191, i1 false)
  br label %293

192:                                              ; preds = %4
  %193 = icmp eq i32 %2, 1
  %194 = load i32, i32* %5, align 4
  br i1 %193, label %195, label %197

195:                                              ; preds = %192
  %196 = shl nsw i32 %194, 1
  store i32 %196, i32* %5, align 4
  br label %293

197:                                              ; preds = %192
  %198 = getelementptr inbounds i8, i8* %0, i64 4
  %199 = bitcast i8* %198 to i32*
  %200 = load i32, i32* %199, align 4
  %201 = sub nsw i32 %194, %200
  %202 = zext i32 %10 to i64
  %203 = getelementptr inbounds i32, i32* %6, i64 %202
  store i32 %201, i32* %203, align 4
  %204 = icmp ugt i32 %9, 3
  br i1 %204, label %205, label %227

205:                                              ; preds = %197, %205
  %206 = phi i64 [ %223, %205 ], [ 1, %197 ]
  %207 = shl nuw i64 %206, 1
  %208 = getelementptr inbounds i32, i32* %5, i64 %207
  %209 = load i32, i32* %208, align 4
  %210 = or i64 %207, 1
  %211 = getelementptr inbounds i32, i32* %5, i64 %210
  %212 = load i32, i32* %211, align 4
  %213 = shl i64 %206, 33
  %214 = add i64 %213, -4294967296
  %215 = ashr exact i64 %214, 32
  %216 = getelementptr inbounds i32, i32* %5, i64 %215
  %217 = load i32, i32* %216, align 4
  %218 = add nsw i32 %217, %212
  %219 = ashr i32 %218, 1
  %220 = sub nsw i32 %209, %219
  %221 = add nuw nsw i64 %206, %202
  %222 = getelementptr inbounds i32, i32* %6, i64 %221
  store i32 %220, i32* %222, align 4
  %223 = add nuw nsw i64 %206, 1
  %224 = icmp ult i64 %223, %202
  br i1 %224, label %205, label %225

225:                                              ; preds = %205
  %226 = trunc i64 %223 to i32
  br label %227

227:                                              ; preds = %225, %197
  %228 = phi i32 [ 1, %197 ], [ %226, %225 ]
  %229 = and i32 %2, 1
  %230 = icmp eq i32 %229, 0
  br i1 %230, label %244, label %231

231:                                              ; preds = %227
  %232 = shl nuw i32 %228, 1
  %233 = zext i32 %232 to i64
  %234 = getelementptr inbounds i32, i32* %5, i64 %233
  %235 = load i32, i32* %234, align 4
  %236 = add i32 %232, -1
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds i32, i32* %5, i64 %237
  %239 = load i32, i32* %238, align 4
  %240 = sub nsw i32 %235, %239
  %241 = add nuw nsw i32 %228, %10
  %242 = zext i32 %241 to i64
  %243 = getelementptr inbounds i32, i32* %6, i64 %242
  store i32 %240, i32* %243, align 4
  br label %244

244:                                              ; preds = %227, %231
  %245 = icmp sgt i32 %11, 1
  br i1 %245, label %246, label %269

246:                                              ; preds = %244
  %247 = xor i32 %10, -1
  %248 = add i32 %247, %2
  %249 = zext i32 %248 to i64
  br label %250

250:                                              ; preds = %250, %246
  %251 = phi i64 [ 0, %246 ], [ %267, %250 ]
  %252 = shl nuw nsw i64 %251, 1
  %253 = or i64 %252, 1
  %254 = getelementptr inbounds i32, i32* %5, i64 %253
  %255 = load i32, i32* %254, align 4
  %256 = add nuw nsw i64 %251, %202
  %257 = getelementptr inbounds i32, i32* %6, i64 %256
  %258 = load i32, i32* %257, align 4
  %259 = add nuw nsw i64 %256, 1
  %260 = getelementptr inbounds i32, i32* %6, i64 %259
  %261 = load i32, i32* %260, align 4
  %262 = add i32 %258, 2
  %263 = add i32 %262, %261
  %264 = ashr i32 %263, 2
  %265 = add nsw i32 %264, %255
  %266 = getelementptr inbounds i32, i32* %5, i64 %251
  store i32 %265, i32* %266, align 4
  %267 = add nuw nsw i64 %251, 1
  %268 = icmp eq i64 %267, %249
  br i1 %268, label %269, label %250

269:                                              ; preds = %250, %244
  %270 = phi i32 [ 0, %244 ], [ %248, %250 ]
  br i1 %230, label %271, label %287

271:                                              ; preds = %269
  %272 = shl nuw nsw i32 %270, 1
  %273 = or i32 %272, 1
  %274 = zext i32 %273 to i64
  %275 = getelementptr inbounds i32, i32* %5, i64 %274
  %276 = load i32, i32* %275, align 4
  %277 = add nuw nsw i32 %270, %10
  %278 = zext i32 %277 to i64
  %279 = getelementptr inbounds i32, i32* %6, i64 %278
  %280 = load i32, i32* %279, align 4
  %281 = shl i32 %280, 1
  %282 = add nsw i32 %281, 2
  %283 = ashr i32 %282, 2
  %284 = add nsw i32 %283, %276
  %285 = zext i32 %270 to i64
  %286 = getelementptr inbounds i32, i32* %5, i64 %285
  store i32 %284, i32* %286, align 4
  br label %287

287:                                              ; preds = %271, %269
  %288 = getelementptr inbounds i32, i32* %5, i64 %202
  %289 = bitcast i32* %288 to i8*
  %290 = bitcast i32* %203 to i8*
  %291 = sext i32 %11 to i64
  %292 = shl nsw i64 %291, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %289, i8* align 4 %290, i64 %292, i1 false)
  br label %293

293:                                              ; preds = %195, %287, %12, %186
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_dwt_decode(%struct.opj_tcd* nocapture readonly, %struct.opj_tcd_tilecomp* nocapture readonly, i32) local_unnamed_addr #2 {
  %4 = alloca %struct.dwt_local, align 8
  %5 = alloca %struct.dwt_local, align 8
  %6 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 16
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %252, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 11
  %11 = load %struct.opj_thread_pool_t*, %struct.opj_thread_pool_t** %10, align 8
  %12 = bitcast %struct.dwt_local* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %12) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %12, i8 -86, i64 32, i1 false) #10
  %13 = bitcast %struct.dwt_local* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %13) #10
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %13, i8 -86, i64 32, i1 false) #10
  %14 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 7
  %15 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %14, align 8
  %16 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %15, i64 0, i32 2
  %17 = load i32, i32* %16, align 8
  %18 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %15, i64 0, i32 0
  %19 = load i32, i32* %18, align 8
  %20 = sub nsw i32 %17, %19
  %21 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %15, i64 0, i32 3
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %15, i64 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = sub nsw i32 %22, %24
  %26 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 6
  %27 = load i32, i32* %26, align 8
  %28 = add i32 %27, -1
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %15, i64 %29, i32 2
  %31 = load i32, i32* %30, align 8
  %32 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %15, i64 %29, i32 0
  %33 = load i32, i32* %32, align 8
  %34 = sub nsw i32 %31, %33
  %35 = icmp eq i32 %2, 1
  br i1 %35, label %250, label %36

36:                                               ; preds = %9
  %37 = tail call i32 @opj_thread_pool_get_thread_count(%struct.opj_thread_pool_t* %11) #10
  %38 = add i32 %2, -1
  %39 = and i32 %38, 1
  %40 = icmp eq i32 %2, 2
  br i1 %40, label %78, label %41

41:                                               ; preds = %36
  %42 = sub i32 %38, %39
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i32 [ 0, %41 ], [ %75, %43 ]
  %45 = phi %struct.opj_tcd_resolution* [ %15, %41 ], [ %61, %43 ]
  %46 = phi i32 [ %42, %41 ], [ %76, %43 ]
  %47 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %45, i64 1, i32 2
  %48 = load i32, i32* %47, align 8, !alias.scope !34
  %49 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %45, i64 1, i32 0
  %50 = load i32, i32* %49, align 8, !alias.scope !34
  %51 = sub nsw i32 %48, %50
  %52 = icmp ult i32 %44, %51
  %53 = select i1 %52, i32 %51, i32 %44
  %54 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %45, i64 1, i32 3
  %55 = load i32, i32* %54, align 4, !alias.scope !34
  %56 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %45, i64 1, i32 1
  %57 = load i32, i32* %56, align 4, !alias.scope !34
  %58 = sub nsw i32 %55, %57
  %59 = icmp ult i32 %53, %58
  %60 = select i1 %59, i32 %58, i32 %53
  %61 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %45, i64 2
  %62 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %45, i64 2, i32 2
  %63 = load i32, i32* %62, align 8, !alias.scope !34
  %64 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %61, i64 0, i32 0
  %65 = load i32, i32* %64, align 8, !alias.scope !34
  %66 = sub nsw i32 %63, %65
  %67 = icmp ult i32 %60, %66
  %68 = select i1 %67, i32 %66, i32 %60
  %69 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %45, i64 2, i32 3
  %70 = load i32, i32* %69, align 4, !alias.scope !34
  %71 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %45, i64 2, i32 1
  %72 = load i32, i32* %71, align 4, !alias.scope !34
  %73 = sub nsw i32 %70, %72
  %74 = icmp ult i32 %68, %73
  %75 = select i1 %74, i32 %73, i32 %68
  %76 = add i32 %46, -2
  %77 = icmp eq i32 %76, 0
  br i1 %77, label %78, label %43

78:                                               ; preds = %43, %36
  %79 = phi i32 [ undef, %36 ], [ %75, %43 ]
  %80 = phi i32 [ 0, %36 ], [ %75, %43 ]
  %81 = phi %struct.opj_tcd_resolution* [ %15, %36 ], [ %61, %43 ]
  %82 = icmp eq i32 %39, 0
  br i1 %82, label %98, label %83

83:                                               ; preds = %78
  %84 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %81, i64 1, i32 2
  %85 = load i32, i32* %84, align 8, !alias.scope !34
  %86 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %81, i64 1, i32 0
  %87 = load i32, i32* %86, align 8, !alias.scope !34
  %88 = sub nsw i32 %85, %87
  %89 = icmp ult i32 %80, %88
  %90 = select i1 %89, i32 %88, i32 %80
  %91 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %81, i64 1, i32 3
  %92 = load i32, i32* %91, align 4, !alias.scope !34
  %93 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %81, i64 1, i32 1
  %94 = load i32, i32* %93, align 4, !alias.scope !34
  %95 = sub nsw i32 %92, %94
  %96 = icmp ult i32 %90, %95
  %97 = select i1 %96, i32 %95, i32 %90
  br label %98

98:                                               ; preds = %78, %83
  %99 = phi i32 [ %79, %78 ], [ %97, %83 ]
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %4, i64 0, i32 1
  store i64 %100, i64* %101, align 8
  %102 = shl nuw nsw i64 %100, 5
  %103 = tail call i8* @opj_aligned_32_malloc(i64 %102) #10
  %104 = bitcast %struct.dwt_local* %4 to i8**
  store i8* %103, i8** %104, align 8
  %105 = icmp eq i8* %103, null
  br i1 %105, label %250, label %106

106:                                              ; preds = %98
  %107 = ptrtoint i8* %103 to i64
  %108 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %5, i64 0, i32 1
  store i64 %100, i64* %108, align 8
  %109 = bitcast %struct.dwt_local* %5 to i64*
  store i64 %107, i64* %109, align 8
  %110 = icmp eq i32 %38, 0
  br i1 %110, label %249, label %111

111:                                              ; preds = %106
  %112 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 9
  %113 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %4, i64 0, i32 3
  %114 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %5, i64 0, i32 3
  %115 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %4, i64 0, i32 2
  %116 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %4, i64 0, i32 4
  %117 = icmp slt i32 %37, 2
  %118 = zext i32 %34 to i64
  %119 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %5, i64 0, i32 2
  %120 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %5, i64 0, i32 4
  br label %121

121:                                              ; preds = %246, %111
  %122 = phi i32 [ %38, %111 ], [ %247, %246 ]
  %123 = phi i32 [ %25, %111 ], [ %137, %246 ]
  %124 = phi i32 [ %20, %111 ], [ %132, %246 ]
  %125 = phi %struct.opj_tcd_resolution* [ %15, %111 ], [ %127, %246 ]
  %126 = load i32*, i32** %112, align 8
  %127 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %125, i64 1
  store i32 %124, i32* %113, align 4
  store i32 %123, i32* %114, align 4
  %128 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %125, i64 1, i32 2
  %129 = load i32, i32* %128, align 8
  %130 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %127, i64 0, i32 0
  %131 = load i32, i32* %130, align 8
  %132 = sub nsw i32 %129, %131
  %133 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %125, i64 1, i32 3
  %134 = load i32, i32* %133, align 4
  %135 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %125, i64 1, i32 1
  %136 = load i32, i32* %135, align 4
  %137 = sub i32 %134, %136
  %138 = sub i32 %132, %124
  store i32 %138, i32* %115, align 8
  %139 = srem i32 %131, 2
  store i32 %139, i32* %116, align 8
  %140 = icmp ult i32 %137, 2
  %141 = or i1 %117, %140
  br i1 %141, label %142, label %152

142:                                              ; preds = %121
  %143 = icmp eq i32 %137, 0
  br i1 %143, label %188, label %144

144:                                              ; preds = %142
  %145 = zext i32 %137 to i64
  br label %146

146:                                              ; preds = %146, %144
  %147 = phi i64 [ 0, %144 ], [ %150, %146 ]
  %148 = mul nuw i64 %147, %118
  %149 = getelementptr inbounds i32, i32* %126, i64 %148
  call fastcc void @opj_idwt53_h(%struct.dwt_local* nonnull %4, i32* %149) #10
  %150 = add nuw nsw i64 %147, 1
  %151 = icmp eq i64 %150, %145
  br i1 %151, label %188, label %146

152:                                              ; preds = %121
  %153 = icmp ult i32 %137, %37
  %154 = select i1 %153, i32 %137, i32 %37
  %155 = udiv i32 %137, %154
  %156 = icmp eq i32 %154, 0
  br i1 %156, label %187, label %157

157:                                              ; preds = %152
  %158 = add nsw i32 %154, -1
  br label %159

159:                                              ; preds = %184, %157
  %160 = phi i32 [ 0, %157 ], [ %174, %184 ]
  %161 = tail call i8* @opj_malloc(i64 56) #10
  %162 = icmp eq i8* %161, null
  br i1 %162, label %163, label %164

163:                                              ; preds = %159
  tail call void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t* %11, i32 0) #10
  tail call void @opj_aligned_free(i8* nonnull %103) #10
  br label %250

164:                                              ; preds = %159
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %161, i8* nonnull align 8 %12, i64 32, i1 false) #10
  %165 = getelementptr inbounds i8, i8* %161, i64 32
  %166 = bitcast i8* %165 to i32*
  store i32 %132, i32* %166, align 8
  %167 = getelementptr inbounds i8, i8* %161, i64 36
  %168 = bitcast i8* %167 to i32*
  store i32 %34, i32* %168, align 4
  %169 = getelementptr inbounds i8, i8* %161, i64 40
  %170 = bitcast i8* %169 to i32**
  store i32* %126, i32** %170, align 8
  %171 = mul i32 %160, %155
  %172 = getelementptr inbounds i8, i8* %161, i64 48
  %173 = bitcast i8* %172 to i32*
  store i32 %171, i32* %173, align 8
  %174 = add nuw i32 %160, 1
  %175 = mul i32 %174, %155
  %176 = getelementptr inbounds i8, i8* %161, i64 52
  %177 = bitcast i8* %176 to i32*
  %178 = icmp eq i32 %160, %158
  %179 = select i1 %178, i32 %137, i32 %175
  store i32 %179, i32* %177, align 4
  %180 = tail call i8* @opj_aligned_32_malloc(i64 %102) #10
  %181 = bitcast i8* %161 to i8**
  store i8* %180, i8** %181, align 8
  %182 = icmp eq i8* %180, null
  br i1 %182, label %183, label %184

183:                                              ; preds = %164
  tail call void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t* %11, i32 0) #10
  tail call void @opj_free(i8* nonnull %161) #10
  tail call void @opj_aligned_free(i8* nonnull %103) #10
  br label %250

184:                                              ; preds = %164
  %185 = tail call i32 @opj_thread_pool_submit_job(%struct.opj_thread_pool_t* %11, void (i8*, %struct.opj_tls_t*)* nonnull @opj_dwt_decode_h_func, i8* nonnull %161) #10
  %186 = icmp ult i32 %174, %154
  br i1 %186, label %159, label %187

187:                                              ; preds = %184, %152
  tail call void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t* %11, i32 0) #10
  br label %188

188:                                              ; preds = %146, %187, %142
  %189 = sub i32 %137, %123
  store i32 %189, i32* %119, align 8
  %190 = load i32, i32* %135, align 4
  %191 = srem i32 %190, 2
  store i32 %191, i32* %120, align 8
  %192 = icmp ult i32 %132, 2
  %193 = or i1 %117, %192
  br i1 %193, label %194, label %210

194:                                              ; preds = %188
  %195 = icmp ult i32 %132, 8
  br i1 %195, label %203, label %196

196:                                              ; preds = %194, %196
  %197 = phi i32 [ %201, %196 ], [ 8, %194 ]
  %198 = phi i32 [ %197, %196 ], [ 0, %194 ]
  %199 = zext i32 %198 to i64
  %200 = getelementptr inbounds i32, i32* %126, i64 %199
  call fastcc void @opj_idwt53_v(%struct.dwt_local* nonnull %5, i32* %200, i64 %118, i32 8) #10
  %201 = add i32 %197, 8
  %202 = icmp ugt i32 %201, %132
  br i1 %202, label %203, label %196

203:                                              ; preds = %196, %194
  %204 = phi i32 [ 0, %194 ], [ %197, %196 ]
  %205 = icmp ugt i32 %132, %204
  br i1 %205, label %206, label %246

206:                                              ; preds = %203
  %207 = zext i32 %204 to i64
  %208 = getelementptr inbounds i32, i32* %126, i64 %207
  %209 = sub i32 %132, %204
  call fastcc void @opj_idwt53_v(%struct.dwt_local* nonnull %5, i32* %208, i64 %118, i32 %209) #10
  br label %246

210:                                              ; preds = %188
  %211 = icmp ult i32 %132, %37
  %212 = select i1 %211, i32 %132, i32 %37
  %213 = udiv i32 %132, %212
  %214 = icmp eq i32 %212, 0
  br i1 %214, label %245, label %215

215:                                              ; preds = %210
  %216 = add nsw i32 %212, -1
  br label %217

217:                                              ; preds = %242, %215
  %218 = phi i32 [ 0, %215 ], [ %232, %242 ]
  %219 = tail call i8* @opj_malloc(i64 56) #10
  %220 = icmp eq i8* %219, null
  br i1 %220, label %221, label %222

221:                                              ; preds = %217
  tail call void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t* %11, i32 0) #10
  tail call void @opj_aligned_free(i8* nonnull %103) #10
  br label %250

222:                                              ; preds = %217
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 %219, i8* nonnull align 8 %13, i64 32, i1 false) #10
  %223 = getelementptr inbounds i8, i8* %219, i64 32
  %224 = bitcast i8* %223 to i32*
  store i32 %137, i32* %224, align 8
  %225 = getelementptr inbounds i8, i8* %219, i64 36
  %226 = bitcast i8* %225 to i32*
  store i32 %34, i32* %226, align 4
  %227 = getelementptr inbounds i8, i8* %219, i64 40
  %228 = bitcast i8* %227 to i32**
  store i32* %126, i32** %228, align 8
  %229 = mul i32 %218, %213
  %230 = getelementptr inbounds i8, i8* %219, i64 48
  %231 = bitcast i8* %230 to i32*
  store i32 %229, i32* %231, align 8
  %232 = add nuw i32 %218, 1
  %233 = mul i32 %232, %213
  %234 = getelementptr inbounds i8, i8* %219, i64 52
  %235 = bitcast i8* %234 to i32*
  %236 = icmp eq i32 %218, %216
  %237 = select i1 %236, i32 %132, i32 %233
  store i32 %237, i32* %235, align 4
  %238 = tail call i8* @opj_aligned_32_malloc(i64 %102) #10
  %239 = bitcast i8* %219 to i8**
  store i8* %238, i8** %239, align 8
  %240 = icmp eq i8* %238, null
  br i1 %240, label %241, label %242

241:                                              ; preds = %222
  tail call void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t* %11, i32 0) #10
  tail call void @opj_free(i8* nonnull %219) #10
  tail call void @opj_aligned_free(i8* nonnull %103) #10
  br label %250

242:                                              ; preds = %222
  %243 = tail call i32 @opj_thread_pool_submit_job(%struct.opj_thread_pool_t* %11, void (i8*, %struct.opj_tls_t*)* nonnull @opj_dwt_decode_v_func, i8* nonnull %219) #10
  %244 = icmp ult i32 %232, %212
  br i1 %244, label %217, label %245

245:                                              ; preds = %242, %210
  tail call void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t* %11, i32 0) #10
  br label %246

246:                                              ; preds = %245, %206, %203
  %247 = add i32 %122, -1
  %248 = icmp eq i32 %247, 0
  br i1 %248, label %249, label %121

249:                                              ; preds = %246, %106
  tail call void @opj_aligned_free(i8* nonnull %103) #10
  br label %250

250:                                              ; preds = %9, %98, %163, %183, %221, %241, %249
  %251 = phi i32 [ 1, %249 ], [ 1, %9 ], [ 0, %98 ], [ 0, %183 ], [ 0, %163 ], [ 0, %241 ], [ 0, %221 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %13) #10
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %12) #10
  br label %1962

252:                                              ; preds = %3
  %253 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 7
  %254 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %253, align 8
  %255 = add i32 %2, -1
  %256 = zext i32 %255 to i64
  %257 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %254, i64 0, i32 2
  %258 = load i32, i32* %257, align 8
  %259 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %254, i64 0, i32 0
  %260 = load i32, i32* %259, align 8
  %261 = sub nsw i32 %258, %260
  %262 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %254, i64 0, i32 3
  %263 = load i32, i32* %262, align 4
  %264 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %254, i64 0, i32 1
  %265 = load i32, i32* %264, align 4
  %266 = sub nsw i32 %263, %265
  %267 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 14
  %268 = load i32, i32* %267, align 8
  %269 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 15
  %270 = load i32, i32* %269, align 4
  %271 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 16
  %272 = load i32, i32* %271, align 8
  %273 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 17
  %274 = load i32, i32* %273, align 4
  %275 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %254, i64 %256, i32 0
  %276 = load i32, i32* %275, align 8
  %277 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %254, i64 %256, i32 2
  %278 = load i32, i32* %277, align 8
  %279 = icmp eq i32 %276, %278
  br i1 %279, label %1962, label %280

280:                                              ; preds = %252
  %281 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %254, i64 %256, i32 1
  %282 = load i32, i32* %281, align 4
  %283 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %254, i64 %256, i32 3
  %284 = load i32, i32* %283, align 4
  %285 = icmp eq i32 %282, %284
  br i1 %285, label %1962, label %286

286:                                              ; preds = %280
  %287 = tail call fastcc %struct.opj_sparse_array_int32* @opj_dwt_init_sparse_array(%struct.opj_tcd_tilecomp* %1, i32 %2) #10
  %288 = icmp eq %struct.opj_sparse_array_int32* %287, null
  br i1 %288, label %1962, label %289

289:                                              ; preds = %286
  %290 = icmp eq i32 %2, 1
  br i1 %290, label %291, label %310

291:                                              ; preds = %289
  %292 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %254, i64 %256, i32 8
  %293 = load i32, i32* %292, align 8
  %294 = load i32, i32* %275, align 8
  %295 = sub i32 %293, %294
  %296 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %254, i64 %256, i32 9
  %297 = load i32, i32* %296, align 4
  %298 = load i32, i32* %281, align 4
  %299 = sub i32 %297, %298
  %300 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %254, i64 %256, i32 10
  %301 = load i32, i32* %300, align 8
  %302 = sub i32 %301, %294
  %303 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %254, i64 %256, i32 11
  %304 = load i32, i32* %303, align 4
  %305 = sub i32 %304, %298
  %306 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 13
  %307 = load i32*, i32** %306, align 8
  %308 = sub i32 %301, %293
  %309 = tail call i32 @opj_sparse_array_int32_read(%struct.opj_sparse_array_int32* nonnull %287, i32 %295, i32 %299, i32 %302, i32 %305, i32* %307, i32 1, i32 %308, i32 1) #10
  tail call void @opj_sparse_array_int32_free(%struct.opj_sparse_array_int32* nonnull %287) #10
  br label %1962

310:                                              ; preds = %289
  %311 = icmp eq i32 %255, 0
  br i1 %311, label %375, label %312

312:                                              ; preds = %310
  %313 = and i32 %255, 1
  %314 = icmp eq i32 %2, 2
  br i1 %314, label %352, label %315

315:                                              ; preds = %312
  %316 = sub i32 %255, %313
  br label %317

317:                                              ; preds = %317, %315
  %318 = phi i32 [ 0, %315 ], [ %349, %317 ]
  %319 = phi %struct.opj_tcd_resolution* [ %254, %315 ], [ %335, %317 ]
  %320 = phi i32 [ %316, %315 ], [ %350, %317 ]
  %321 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %319, i64 1, i32 2
  %322 = load i32, i32* %321, align 8, !alias.scope !37
  %323 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %319, i64 1, i32 0
  %324 = load i32, i32* %323, align 8, !alias.scope !37
  %325 = sub nsw i32 %322, %324
  %326 = icmp ult i32 %318, %325
  %327 = select i1 %326, i32 %325, i32 %318
  %328 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %319, i64 1, i32 3
  %329 = load i32, i32* %328, align 4, !alias.scope !37
  %330 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %319, i64 1, i32 1
  %331 = load i32, i32* %330, align 4, !alias.scope !37
  %332 = sub nsw i32 %329, %331
  %333 = icmp ult i32 %327, %332
  %334 = select i1 %333, i32 %332, i32 %327
  %335 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %319, i64 2
  %336 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %319, i64 2, i32 2
  %337 = load i32, i32* %336, align 8, !alias.scope !37
  %338 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %335, i64 0, i32 0
  %339 = load i32, i32* %338, align 8, !alias.scope !37
  %340 = sub nsw i32 %337, %339
  %341 = icmp ult i32 %334, %340
  %342 = select i1 %341, i32 %340, i32 %334
  %343 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %319, i64 2, i32 3
  %344 = load i32, i32* %343, align 4, !alias.scope !37
  %345 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %319, i64 2, i32 1
  %346 = load i32, i32* %345, align 4, !alias.scope !37
  %347 = sub nsw i32 %344, %346
  %348 = icmp ult i32 %342, %347
  %349 = select i1 %348, i32 %347, i32 %342
  %350 = add i32 %320, -2
  %351 = icmp eq i32 %350, 0
  br i1 %351, label %352, label %317

352:                                              ; preds = %317, %312
  %353 = phi i32 [ undef, %312 ], [ %349, %317 ]
  %354 = phi i32 [ 0, %312 ], [ %349, %317 ]
  %355 = phi %struct.opj_tcd_resolution* [ %254, %312 ], [ %335, %317 ]
  %356 = icmp eq i32 %313, 0
  br i1 %356, label %372, label %357

357:                                              ; preds = %352
  %358 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %355, i64 1, i32 2
  %359 = load i32, i32* %358, align 8, !alias.scope !37
  %360 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %355, i64 1, i32 0
  %361 = load i32, i32* %360, align 8, !alias.scope !37
  %362 = sub nsw i32 %359, %361
  %363 = icmp ult i32 %354, %362
  %364 = select i1 %363, i32 %362, i32 %354
  %365 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %355, i64 1, i32 3
  %366 = load i32, i32* %365, align 4, !alias.scope !37
  %367 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %355, i64 1, i32 1
  %368 = load i32, i32* %367, align 4, !alias.scope !37
  %369 = sub nsw i32 %366, %368
  %370 = icmp ult i32 %364, %369
  %371 = select i1 %370, i32 %369, i32 %364
  br label %372

372:                                              ; preds = %352, %357
  %373 = phi i32 [ %353, %352 ], [ %371, %357 ]
  %374 = zext i32 %373 to i64
  br label %375

375:                                              ; preds = %372, %310
  %376 = phi i64 [ 0, %310 ], [ %374, %372 ]
  %377 = shl nuw nsw i64 %376, 4
  %378 = tail call i8* @opj_aligned_32_malloc(i64 %377) #10
  %379 = bitcast i8* %378 to i32*
  %380 = icmp eq i8* %378, null
  br i1 %380, label %409, label %381

381:                                              ; preds = %375
  %382 = icmp ugt i32 %2, 1
  br i1 %382, label %383, label %1943

383:                                              ; preds = %381
  %384 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 5
  %385 = icmp eq i32 %268, 0
  %386 = zext i32 %268 to i64
  %387 = icmp eq i32 %270, 0
  %388 = zext i32 %270 to i64
  %389 = icmp eq i32 %272, 0
  %390 = zext i32 %272 to i64
  %391 = icmp eq i32 %274, 0
  %392 = zext i32 %274 to i64
  %393 = getelementptr inbounds i8, i8* %378, i64 4
  %394 = bitcast i8* %393 to i32*
  %395 = getelementptr inbounds i8, i8* %378, i64 8
  %396 = bitcast i8* %395 to i32*
  %397 = getelementptr inbounds i8, i8* %378, i64 12
  %398 = bitcast i8* %397 to i32*
  %399 = getelementptr inbounds i8, i8* %378, i64 16
  %400 = bitcast i8* %399 to i32*
  %401 = getelementptr inbounds i8, i8* %378, i64 20
  %402 = bitcast i8* %401 to i32*
  %403 = getelementptr inbounds i8, i8* %378, i64 24
  %404 = bitcast i8* %403 to i32*
  %405 = getelementptr inbounds i8, i8* %378, i64 28
  %406 = bitcast i8* %405 to i32*
  %407 = bitcast i8* %378 to <4 x i32>*
  %408 = bitcast i8* %378 to <4 x i32>*
  br label %410

409:                                              ; preds = %375
  tail call void @opj_sparse_array_int32_free(%struct.opj_sparse_array_int32* nonnull %287) #10
  br label %1962

410:                                              ; preds = %1940, %383
  %411 = phi i32 [ %266, %383 ], [ %425, %1940 ]
  %412 = phi i32 [ %261, %383 ], [ %420, %1940 ]
  %413 = phi %struct.opj_tcd_resolution* [ %254, %383 ], [ %415, %1940 ]
  %414 = phi i32 [ 1, %383 ], [ %1941, %1940 ]
  %415 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %413, i64 1
  %416 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %413, i64 1, i32 2
  %417 = load i32, i32* %416, align 8
  %418 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %415, i64 0, i32 0
  %419 = load i32, i32* %418, align 8
  %420 = sub nsw i32 %417, %419
  %421 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %413, i64 1, i32 3
  %422 = load i32, i32* %421, align 4
  %423 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %413, i64 1, i32 1
  %424 = load i32, i32* %423, align 4
  %425 = sub i32 %422, %424
  %426 = sub i32 %420, %412
  %427 = srem i32 %419, 2
  %428 = sub i32 %425, %411
  %429 = srem i32 %424, 2
  %430 = load i32, i32* %384, align 4
  %431 = sub i32 %430, %414
  %432 = icmp eq i32 %431, 0
  br i1 %432, label %518, label %433

433:                                              ; preds = %410
  br i1 %385, label %441, label %434

434:                                              ; preds = %433
  %435 = zext i32 %431 to i64
  %436 = shl nsw i64 -1, %435
  %437 = xor i64 %436, -1
  %438 = add i64 %437, %386
  %439 = lshr i64 %438, %435
  %440 = trunc i64 %439 to i32
  br label %441

441:                                              ; preds = %434, %433
  %442 = phi i32 [ 0, %433 ], [ %440, %434 ]
  br i1 %387, label %450, label %443

443:                                              ; preds = %441
  %444 = zext i32 %431 to i64
  %445 = shl nsw i64 -1, %444
  %446 = xor i64 %445, -1
  %447 = add i64 %446, %388
  %448 = lshr i64 %447, %444
  %449 = trunc i64 %448 to i32
  br label %450

450:                                              ; preds = %443, %441
  %451 = phi i32 [ 0, %441 ], [ %449, %443 ]
  br i1 %389, label %459, label %452

452:                                              ; preds = %450
  %453 = zext i32 %431 to i64
  %454 = shl nsw i64 -1, %453
  %455 = xor i64 %454, -1
  %456 = add i64 %455, %390
  %457 = lshr i64 %456, %453
  %458 = trunc i64 %457 to i32
  br label %459

459:                                              ; preds = %452, %450
  %460 = phi i32 [ 0, %450 ], [ %458, %452 ]
  br i1 %391, label %468, label %461

461:                                              ; preds = %459
  %462 = zext i32 %431 to i64
  %463 = shl nsw i64 -1, %462
  %464 = xor i64 %463, -1
  %465 = add i64 %464, %392
  %466 = lshr i64 %465, %462
  %467 = trunc i64 %466 to i32
  br label %468

468:                                              ; preds = %461, %459
  %469 = phi i32 [ 0, %459 ], [ %467, %461 ]
  %470 = add i32 %431, -1
  %471 = shl i32 1, %470
  %472 = icmp ugt i32 %268, %471
  br i1 %472, label %473, label %482

473:                                              ; preds = %468
  %474 = sub i32 %268, %471
  %475 = zext i32 %474 to i64
  %476 = zext i32 %431 to i64
  %477 = shl nsw i64 -1, %476
  %478 = xor i64 %477, -1
  %479 = add i64 %475, %478
  %480 = lshr i64 %479, %476
  %481 = trunc i64 %480 to i32
  br label %482

482:                                              ; preds = %473, %468
  %483 = phi i32 [ 0, %468 ], [ %481, %473 ]
  %484 = icmp ugt i32 %272, %471
  br i1 %484, label %485, label %494

485:                                              ; preds = %482
  %486 = sub i32 %272, %471
  %487 = zext i32 %486 to i64
  %488 = zext i32 %431 to i64
  %489 = shl nsw i64 -1, %488
  %490 = xor i64 %489, -1
  %491 = add i64 %487, %490
  %492 = lshr i64 %491, %488
  %493 = trunc i64 %492 to i32
  br label %494

494:                                              ; preds = %485, %482
  %495 = phi i32 [ 0, %482 ], [ %493, %485 ]
  %496 = icmp ugt i32 %270, %471
  br i1 %496, label %497, label %506

497:                                              ; preds = %494
  %498 = sub i32 %270, %471
  %499 = zext i32 %498 to i64
  %500 = zext i32 %431 to i64
  %501 = shl nsw i64 -1, %500
  %502 = xor i64 %501, -1
  %503 = add i64 %499, %502
  %504 = lshr i64 %503, %500
  %505 = trunc i64 %504 to i32
  br label %506

506:                                              ; preds = %497, %494
  %507 = phi i32 [ 0, %494 ], [ %505, %497 ]
  %508 = icmp ugt i32 %274, %471
  br i1 %508, label %509, label %518

509:                                              ; preds = %506
  %510 = sub i32 %274, %471
  %511 = zext i32 %510 to i64
  %512 = zext i32 %431 to i64
  %513 = shl nsw i64 -1, %512
  %514 = xor i64 %513, -1
  %515 = add i64 %511, %514
  %516 = lshr i64 %515, %512
  %517 = trunc i64 %516 to i32
  br label %518

518:                                              ; preds = %509, %506, %410
  %519 = phi i32 [ %507, %509 ], [ %507, %506 ], [ %270, %410 ]
  %520 = phi i32 [ %483, %509 ], [ %483, %506 ], [ %268, %410 ]
  %521 = phi i32 [ %460, %509 ], [ %460, %506 ], [ %272, %410 ]
  %522 = phi i32 [ %442, %509 ], [ %442, %506 ], [ %268, %410 ]
  %523 = phi i32 [ %451, %509 ], [ %451, %506 ], [ %270, %410 ]
  %524 = phi i32 [ %469, %509 ], [ %469, %506 ], [ %274, %410 ]
  %525 = phi i32 [ %495, %509 ], [ %495, %506 ], [ %272, %410 ]
  %526 = phi i32 [ %517, %509 ], [ 0, %506 ], [ %274, %410 ]
  %527 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %413, i64 1, i32 7, i64 1, i32 0
  %528 = load i32, i32* %527, align 8
  %529 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %413, i64 1, i32 7, i64 0, i32 1
  %530 = load i32, i32* %529, align 4
  %531 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %413, i64 1, i32 7, i64 0, i32 0
  %532 = load i32, i32* %531, align 8
  %533 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %413, i64 1, i32 7, i64 1, i32 1
  %534 = load i32, i32* %533, align 4
  %535 = tail call i32 @llvm.usub.sat.i32(i32 %522, i32 %528) #10
  %536 = tail call i32 @llvm.usub.sat.i32(i32 %523, i32 %530) #10
  %537 = tail call i32 @llvm.usub.sat.i32(i32 %521, i32 %528) #10
  %538 = tail call i32 @llvm.usub.sat.i32(i32 %524, i32 %530) #10
  %539 = tail call i32 @llvm.usub.sat.i32(i32 %520, i32 %532) #10
  %540 = tail call i32 @llvm.usub.sat.i32(i32 %525, i32 %532) #10
  %541 = tail call i32 @llvm.usub.sat.i32(i32 %519, i32 %534) #10
  %542 = tail call i32 @llvm.usub.sat.i32(i32 %526, i32 %534) #10
  %543 = tail call i32 @llvm.usub.sat.i32(i32 %535, i32 2) #10
  %544 = zext i32 %537 to i64
  %545 = add nuw nsw i64 %544, 2
  %546 = lshr i64 %545, 32
  %547 = trunc i64 %546 to i32
  %548 = sub nsw i32 0, %547
  %549 = trunc i64 %545 to i32
  %550 = or i32 %548, %549
  %551 = icmp ult i32 %550, %412
  %552 = select i1 %551, i32 %550, i32 %412
  %553 = tail call i32 @llvm.usub.sat.i32(i32 %539, i32 2) #10
  %554 = zext i32 %540 to i64
  %555 = add nuw nsw i64 %554, 2
  %556 = lshr i64 %555, 32
  %557 = trunc i64 %556 to i32
  %558 = sub nsw i32 0, %557
  %559 = trunc i64 %555 to i32
  %560 = or i32 %558, %559
  %561 = icmp ult i32 %560, %426
  %562 = select i1 %561, i32 %560, i32 %426
  %563 = tail call i32 @llvm.usub.sat.i32(i32 %536, i32 2) #10
  %564 = zext i32 %538 to i64
  %565 = add nuw nsw i64 %564, 2
  %566 = lshr i64 %565, 32
  %567 = trunc i64 %566 to i32
  %568 = sub nsw i32 0, %567
  %569 = trunc i64 %565 to i32
  %570 = or i32 %568, %569
  %571 = icmp ult i32 %570, %411
  %572 = select i1 %571, i32 %570, i32 %411
  %573 = tail call i32 @llvm.usub.sat.i32(i32 %541, i32 2) #10
  %574 = zext i32 %542 to i64
  %575 = add nuw nsw i64 %574, 2
  %576 = lshr i64 %575, 32
  %577 = trunc i64 %576 to i32
  %578 = sub nsw i32 0, %577
  %579 = trunc i64 %575 to i32
  %580 = or i32 %578, %579
  %581 = icmp ult i32 %580, %428
  %582 = select i1 %581, i32 %580, i32 %428
  %583 = icmp eq i32 %427, 0
  br i1 %583, label %584, label %595

584:                                              ; preds = %518
  %585 = shl i32 %543, 1
  %586 = shl i32 %553, 1
  %587 = or i32 %586, 1
  %588 = icmp ult i32 %585, %587
  %589 = select i1 %588, i32 %585, i32 %587
  %590 = shl i32 %552, 1
  %591 = shl i32 %562, 1
  %592 = or i32 %591, 1
  %593 = icmp ugt i32 %590, %592
  %594 = select i1 %593, i32 %590, i32 %592
  br label %606

595:                                              ; preds = %518
  %596 = shl i32 %553, 1
  %597 = shl i32 %543, 1
  %598 = or i32 %597, 1
  %599 = icmp ult i32 %596, %598
  %600 = select i1 %599, i32 %596, i32 %598
  %601 = shl i32 %562, 1
  %602 = shl i32 %552, 1
  %603 = or i32 %602, 1
  %604 = icmp ugt i32 %601, %603
  %605 = select i1 %604, i32 %601, i32 %603
  br label %606

606:                                              ; preds = %595, %584
  %607 = phi i32 [ %605, %595 ], [ %594, %584 ]
  %608 = phi i32 [ %600, %595 ], [ %589, %584 ]
  %609 = icmp ult i32 %607, %420
  %610 = select i1 %609, i32 %607, i32 %420
  %611 = icmp eq i32 %429, 0
  br i1 %611, label %612, label %623

612:                                              ; preds = %606
  %613 = shl i32 %563, 1
  %614 = shl i32 %573, 1
  %615 = or i32 %614, 1
  %616 = icmp ult i32 %613, %615
  %617 = select i1 %616, i32 %613, i32 %615
  %618 = shl i32 %572, 1
  %619 = shl i32 %582, 1
  %620 = or i32 %619, 1
  %621 = icmp ugt i32 %618, %620
  %622 = select i1 %621, i32 %618, i32 %620
  br label %634

623:                                              ; preds = %606
  %624 = shl i32 %573, 1
  %625 = shl i32 %563, 1
  %626 = or i32 %625, 1
  %627 = icmp ult i32 %624, %626
  %628 = select i1 %627, i32 %624, i32 %626
  %629 = shl i32 %582, 1
  %630 = shl i32 %572, 1
  %631 = or i32 %630, 1
  %632 = icmp ugt i32 %629, %631
  %633 = select i1 %632, i32 %629, i32 %631
  br label %634

634:                                              ; preds = %623, %612
  %635 = phi i32 [ %633, %623 ], [ %622, %612 ]
  %636 = phi i32 [ %628, %623 ], [ %617, %612 ]
  %637 = icmp ult i32 %635, %425
  %638 = select i1 %637, i32 %635, i32 %425
  %639 = icmp eq i32 %425, 0
  %640 = add i32 %573, %411
  %641 = add i32 %582, %411
  br i1 %639, label %726, label %642

642:                                              ; preds = %634
  %643 = icmp ne i32 %610, 0
  %644 = and i1 %643, %609
  %645 = add i32 %610, -1
  %646 = zext i32 %645 to i64
  %647 = getelementptr inbounds i32, i32* %379, i64 %646
  %648 = zext i32 %610 to i64
  %649 = getelementptr inbounds i32, i32* %379, i64 %648
  %650 = sext i32 %427 to i64
  %651 = getelementptr inbounds i32, i32* %379, i64 %650
  %652 = shl i32 %543, 1
  %653 = zext i32 %652 to i64
  %654 = getelementptr inbounds i32, i32* %651, i64 %653
  %655 = add i32 %553, %412
  %656 = add i32 %562, %412
  %657 = sub nsw i64 0, %650
  %658 = getelementptr inbounds i32, i32* %394, i64 %657
  %659 = shl i32 %553, 1
  %660 = zext i32 %659 to i64
  %661 = getelementptr inbounds i32, i32* %658, i64 %660
  %662 = icmp eq i32 %412, 0
  %663 = icmp eq i32 %426, 1
  %664 = and i1 %662, %663
  %665 = icmp slt i32 %543, %552
  %666 = icmp sgt i32 %426, 0
  %667 = shl i32 %426, 1
  %668 = add i32 %667, -2
  %669 = sext i32 %668 to i64
  %670 = getelementptr inbounds i32, i32* %379, i64 %669
  %671 = icmp slt i32 %553, %562
  %672 = icmp sgt i32 %412, 0
  %673 = shl i32 %412, 1
  %674 = add i32 %673, -1
  %675 = sext i32 %674 to i64
  %676 = getelementptr inbounds i32, i32* %379, i64 %675
  %677 = sext i32 %553 to i64
  %678 = sext i32 %412 to i64
  %679 = sext i32 %562 to i64
  %680 = icmp sgt i32 %412, 1
  %681 = or i1 %680, %666
  %682 = icmp slt i32 %543, 1
  %683 = icmp sgt i32 %543, %426
  %684 = and i1 %666, %683
  %685 = add i32 %652, -2
  %686 = or i32 %685, 1
  %687 = sext i32 %686 to i64
  %688 = icmp ugt i64 %376, %687
  %689 = add i32 %652, -3
  %690 = sext i32 %689 to i64
  %691 = add i32 %667, -1
  %692 = sext i32 %691 to i64
  %693 = icmp slt i32 %543, 0
  %694 = icmp sge i32 %543, %426
  %695 = and i1 %666, %694
  %696 = or i32 %652, 1
  %697 = sext i32 %696 to i64
  %698 = icmp ugt i64 %376, %697
  %699 = sext i32 %652 to i64
  %700 = getelementptr inbounds i32, i32* %379, i64 %699
  %701 = icmp sgt i32 %552, %426
  %702 = select i1 %701, i32 %426, i32 %552
  %703 = add nuw nsw i32 %543, 1
  %704 = icmp slt i32 %703, %702
  %705 = sext i32 %703 to i64
  %706 = sext i32 %702 to i64
  %707 = getelementptr inbounds i32, i32* %379, i64 %692
  %708 = sext i32 %426 to i64
  %709 = sext i32 %552 to i64
  %710 = icmp slt i32 %562, %412
  %711 = add nsw i32 %412, -1
  %712 = select i1 %710, i32 %562, i32 %711
  %713 = icmp sgt i32 %712, %553
  %714 = sext i32 %712 to i64
  %715 = add i32 %673, -2
  %716 = sext i32 %715 to i64
  %717 = getelementptr inbounds i32, i32* %379, i64 %716
  %718 = zext i32 %608 to i64
  %719 = getelementptr inbounds i32, i32* %379, i64 %718
  %720 = select i1 %688, i64 %687, i64 %690
  %721 = select i1 %684, i64 %692, i64 %720
  %722 = getelementptr inbounds i32, i32* %379, i64 %721
  %723 = select i1 %698, i64 %697, i64 %687
  %724 = select i1 %695, i64 %692, i64 %723
  %725 = getelementptr inbounds i32, i32* %379, i64 %724
  br label %861

726:                                              ; preds = %1187, %634
  %727 = shl nsw i32 %429, 2
  %728 = sext i32 %727 to i64
  %729 = getelementptr inbounds i32, i32* %379, i64 %728
  %730 = shl i32 %563, 3
  %731 = zext i32 %730 to i64
  %732 = getelementptr inbounds i32, i32* %729, i64 %731
  %733 = sub nsw i32 4, %727
  %734 = sext i32 %733 to i64
  %735 = getelementptr inbounds i32, i32* %379, i64 %734
  %736 = shl i32 %573, 3
  %737 = zext i32 %736 to i64
  %738 = getelementptr inbounds i32, i32* %735, i64 %737
  %739 = icmp eq i32 %411, 0
  %740 = icmp eq i32 %428, 1
  %741 = and i1 %739, %740
  %742 = icmp slt i32 %563, %572
  %743 = shl i32 %428, 3
  %744 = add i32 %743, -8
  %745 = zext i32 %744 to i64
  %746 = getelementptr inbounds i32, i32* %379, i64 %745
  %747 = add i32 %743, -7
  %748 = zext i32 %747 to i64
  %749 = getelementptr inbounds i32, i32* %379, i64 %748
  %750 = add i32 %743, -6
  %751 = zext i32 %750 to i64
  %752 = getelementptr inbounds i32, i32* %379, i64 %751
  %753 = add i32 %743, -5
  %754 = zext i32 %753 to i64
  %755 = getelementptr inbounds i32, i32* %379, i64 %754
  %756 = icmp slt i32 %573, %582
  %757 = shl i32 %411, 3
  %758 = add i32 %757, -4
  %759 = zext i32 %758 to i64
  %760 = getelementptr inbounds i32, i32* %379, i64 %759
  %761 = add i32 %757, -3
  %762 = zext i32 %761 to i64
  %763 = getelementptr inbounds i32, i32* %379, i64 %762
  %764 = add i32 %757, -2
  %765 = zext i32 %764 to i64
  %766 = getelementptr inbounds i32, i32* %379, i64 %765
  %767 = add i32 %757, -1
  %768 = zext i32 %767 to i64
  %769 = getelementptr inbounds i32, i32* %379, i64 %768
  %770 = icmp sgt i32 %428, 0
  %771 = icmp sgt i32 %411, 1
  %772 = or i1 %771, %770
  %773 = icmp slt i32 %563, 1
  %774 = icmp sgt i32 %563, %428
  %775 = select i1 %774, i32 %428, i32 %563
  %776 = shl i32 %775, 3
  %777 = icmp slt i32 %563, 0
  %778 = icmp slt i32 %563, %428
  %779 = or i32 %730, 4
  %780 = zext i32 %779 to i64
  %781 = add i32 %776, -4
  %782 = zext i32 %781 to i64
  %783 = getelementptr inbounds i32, i32* %379, i64 %782
  %784 = add i32 %743, -4
  %785 = zext i32 %784 to i64
  %786 = getelementptr inbounds i32, i32* %379, i64 %731
  %787 = add i32 %776, -3
  %788 = zext i32 %787 to i64
  %789 = getelementptr inbounds i32, i32* %379, i64 %788
  %790 = add i32 %743, -3
  %791 = zext i32 %790 to i64
  %792 = or i64 %780, 1
  %793 = or i64 %731, 1
  %794 = getelementptr inbounds i32, i32* %379, i64 %793
  %795 = add i32 %776, -2
  %796 = zext i32 %795 to i64
  %797 = getelementptr inbounds i32, i32* %379, i64 %796
  %798 = add i32 %743, -2
  %799 = zext i32 %798 to i64
  %800 = or i64 %780, 2
  %801 = or i64 %731, 2
  %802 = getelementptr inbounds i32, i32* %379, i64 %801
  %803 = add i32 %776, -1
  %804 = zext i32 %803 to i64
  %805 = getelementptr inbounds i32, i32* %379, i64 %804
  %806 = add i32 %743, -1
  %807 = zext i32 %806 to i64
  %808 = or i64 %780, 3
  %809 = or i64 %731, 3
  %810 = getelementptr inbounds i32, i32* %379, i64 %809
  %811 = add nuw nsw i32 %563, 1
  %812 = icmp sgt i32 %572, %428
  %813 = select i1 %812, i32 %428, i32 %572
  %814 = add nuw nsw i32 %563, 2
  %815 = icmp slt i32 %814, %813
  %816 = sext i32 %730 to i64
  %817 = getelementptr inbounds i32, i32* %400, i64 %816
  %818 = bitcast i32* %817 to <2 x i64>*
  %819 = sext i32 %811 to i64
  %820 = sext i32 %813 to i64
  %821 = getelementptr inbounds i32, i32* %379, i64 %785
  %822 = getelementptr inbounds i32, i32* %379, i64 %791
  %823 = getelementptr inbounds i32, i32* %379, i64 %799
  %824 = getelementptr inbounds i32, i32* %379, i64 %807
  %825 = icmp slt i32 %582, %411
  %826 = add nsw i32 %411, -1
  %827 = select i1 %825, i32 %582, i32 %826
  %828 = add nuw nsw i32 %573, 1
  %829 = icmp slt i32 %828, %827
  %830 = sext i32 %736 to i64
  %831 = getelementptr inbounds i32, i32* %379, i64 %830
  %832 = bitcast i32* %831 to <2 x i64>*
  %833 = sext i32 %573 to i64
  %834 = sext i32 %827 to i64
  %835 = add i32 %757, -8
  %836 = zext i32 %835 to i64
  %837 = getelementptr inbounds i32, i32* %379, i64 %836
  %838 = add i32 %757, -7
  %839 = zext i32 %838 to i64
  %840 = getelementptr inbounds i32, i32* %379, i64 %839
  %841 = add i32 %757, -6
  %842 = zext i32 %841 to i64
  %843 = getelementptr inbounds i32, i32* %379, i64 %842
  %844 = add i32 %757, -5
  %845 = zext i32 %844 to i64
  %846 = getelementptr inbounds i32, i32* %379, i64 %845
  %847 = shl i32 %636, 2
  %848 = zext i32 %847 to i64
  %849 = getelementptr inbounds i32, i32* %379, i64 %848
  %850 = select i1 %778, i64 %780, i64 %785
  %851 = getelementptr inbounds i32, i32* %379, i64 %850
  %852 = select i1 %778, i64 %792, i64 %791
  %853 = getelementptr inbounds i32, i32* %379, i64 %852
  %854 = select i1 %778, i64 %800, i64 %799
  %855 = getelementptr inbounds i32, i32* %379, i64 %854
  %856 = select i1 %778, i64 %808, i64 %807
  %857 = getelementptr inbounds i32, i32* %379, i64 %856
  %858 = select i1 %773, i32* %402, i32* %789
  %859 = select i1 %773, i32* %404, i32* %797
  %860 = select i1 %773, i32* %406, i32* %805
  br label %1190

861:                                              ; preds = %1187, %642
  %862 = phi i32 [ 0, %642 ], [ %1188, %1187 ]
  %863 = icmp uge i32 %862, %563
  %864 = icmp ult i32 %862, %572
  %865 = and i1 %863, %864
  br i1 %865, label %872, label %866

866:                                              ; preds = %861
  %867 = icmp uge i32 %862, %640
  %868 = icmp ult i32 %862, %641
  %869 = and i1 %867, %868
  br i1 %869, label %872, label %870

870:                                              ; preds = %866
  %871 = add nuw i32 %862, 1
  br label %1187

872:                                              ; preds = %866, %861
  br i1 %644, label %873, label %874

873:                                              ; preds = %872
  store i32 0, i32* %647, align 4
  br label %874

874:                                              ; preds = %873, %872
  br i1 %609, label %875, label %876

875:                                              ; preds = %874
  store i32 0, i32* %649, align 4
  br label %876

876:                                              ; preds = %875, %874
  %877 = add nuw i32 %862, 1
  %878 = tail call i32 @opj_sparse_array_int32_read(%struct.opj_sparse_array_int32* nonnull %287, i32 %543, i32 %862, i32 %552, i32 %877, i32* %654, i32 2, i32 0, i32 1) #10
  %879 = tail call i32 @opj_sparse_array_int32_read(%struct.opj_sparse_array_int32* nonnull %287, i32 %655, i32 %862, i32 %656, i32 %877, i32* %661, i32 2, i32 0, i32 1) #10
  br i1 %583, label %880, label %1069

880:                                              ; preds = %876
  br i1 %681, label %881, label %1183

881:                                              ; preds = %880
  br i1 %665, label %882, label %990

882:                                              ; preds = %881
  br i1 %682, label %885, label %883

883:                                              ; preds = %882
  %884 = load i32, i32* %722, align 4
  br label %887

885:                                              ; preds = %882
  %886 = load i32, i32* %394, align 4
  br i1 %693, label %890, label %887

887:                                              ; preds = %885, %883
  %888 = phi i32 [ %884, %883 ], [ %886, %885 ]
  %889 = load i32, i32* %725, align 4
  br label %890

890:                                              ; preds = %887, %885
  %891 = phi i32 [ %886, %885 ], [ %889, %887 ]
  %892 = phi i32 [ %886, %885 ], [ %888, %887 ]
  %893 = add i32 %891, 2
  %894 = add i32 %893, %892
  %895 = ashr i32 %894, 2
  %896 = load i32, i32* %700, align 4
  %897 = sub nsw i32 %896, %895
  store i32 %897, i32* %700, align 4
  br i1 %704, label %905, label %900

898:                                              ; preds = %905
  %899 = trunc i64 %926 to i32
  br label %900

900:                                              ; preds = %898, %890
  %901 = phi i32 [ %703, %890 ], [ %899, %898 ]
  %902 = icmp slt i32 %901, %552
  br i1 %902, label %903, label %990

903:                                              ; preds = %900
  %904 = sext i32 %901 to i64
  br label %930

905:                                              ; preds = %890, %905
  %906 = phi i64 [ %926, %905 ], [ %705, %890 ]
  %907 = phi i32 [ %927, %905 ], [ %703, %890 ]
  %908 = phi i32 [ %929, %905 ], [ %543, %890 ]
  %909 = shl nsw i32 %908, 1
  %910 = or i32 %909, 1
  %911 = sext i32 %910 to i64
  %912 = getelementptr inbounds i32, i32* %379, i64 %911
  %913 = load i32, i32* %912, align 4
  %914 = shl nsw i32 %907, 1
  %915 = or i32 %914, 1
  %916 = sext i32 %915 to i64
  %917 = getelementptr inbounds i32, i32* %379, i64 %916
  %918 = load i32, i32* %917, align 4
  %919 = add i32 %913, 2
  %920 = add i32 %919, %918
  %921 = ashr i32 %920, 2
  %922 = sext i32 %914 to i64
  %923 = getelementptr inbounds i32, i32* %379, i64 %922
  %924 = load i32, i32* %923, align 4
  %925 = sub nsw i32 %924, %921
  store i32 %925, i32* %923, align 4
  %926 = add nsw i64 %906, 1
  %927 = add nsw i32 %907, 1
  %928 = icmp slt i64 %926, %706
  %929 = trunc i64 %906 to i32
  br i1 %928, label %905, label %898

930:                                              ; preds = %975, %903
  %931 = phi i64 [ %904, %903 ], [ %988, %975 ]
  %932 = add nsw i64 %931, -1
  %933 = icmp slt i64 %931, 1
  br i1 %933, label %954, label %934

934:                                              ; preds = %930
  %935 = icmp sgt i64 %931, %708
  %936 = and i1 %666, %935
  br i1 %936, label %951, label %937

937:                                              ; preds = %934
  %938 = trunc i64 %932 to i32
  %939 = shl nsw i32 %938, 1
  %940 = or i32 %939, 1
  %941 = sext i32 %940 to i64
  %942 = icmp ugt i64 %376, %941
  br i1 %942, label %949, label %943

943:                                              ; preds = %937
  %944 = trunc i64 %931 to i32
  %945 = shl i32 %944, 1
  %946 = add i32 %945, -3
  %947 = sext i32 %946 to i64
  %948 = getelementptr inbounds i32, i32* %379, i64 %947
  br label %951

949:                                              ; preds = %937
  %950 = getelementptr inbounds i32, i32* %379, i64 %941
  br label %951

951:                                              ; preds = %949, %943, %934
  %952 = phi i32* [ %950, %949 ], [ %948, %943 ], [ %707, %934 ]
  %953 = load i32, i32* %952, align 4
  br label %957

954:                                              ; preds = %930
  %955 = load i32, i32* %394, align 4
  %956 = icmp slt i64 %931, 0
  br i1 %956, label %975, label %957

957:                                              ; preds = %954, %951
  %958 = phi i32 [ %953, %951 ], [ %955, %954 ]
  %959 = icmp sge i64 %931, %708
  %960 = and i1 %666, %959
  br i1 %960, label %975, label %961

961:                                              ; preds = %957
  %962 = trunc i64 %931 to i32
  %963 = shl nsw i32 %962, 1
  %964 = or i32 %963, 1
  %965 = sext i32 %964 to i64
  %966 = icmp ugt i64 %376, %965
  br i1 %966, label %973, label %967

967:                                              ; preds = %961
  %968 = trunc i64 %932 to i32
  %969 = shl nsw i32 %968, 1
  %970 = or i32 %969, 1
  %971 = sext i32 %970 to i64
  %972 = getelementptr inbounds i32, i32* %379, i64 %971
  br label %975

973:                                              ; preds = %961
  %974 = getelementptr inbounds i32, i32* %379, i64 %965
  br label %975

975:                                              ; preds = %973, %967, %957, %954
  %976 = phi i32 [ %958, %967 ], [ %958, %973 ], [ %955, %954 ], [ %958, %957 ]
  %977 = phi i32* [ %972, %967 ], [ %974, %973 ], [ %394, %954 ], [ %707, %957 ]
  %978 = load i32, i32* %977, align 4
  %979 = add i32 %976, 2
  %980 = add i32 %979, %978
  %981 = ashr i32 %980, 2
  %982 = trunc i64 %931 to i32
  %983 = shl nsw i32 %982, 1
  %984 = sext i32 %983 to i64
  %985 = getelementptr inbounds i32, i32* %379, i64 %984
  %986 = load i32, i32* %985, align 4
  %987 = sub nsw i32 %986, %981
  store i32 %987, i32* %985, align 4
  %988 = add nsw i64 %931, 1
  %989 = icmp eq i64 %988, %709
  br i1 %989, label %990, label %930

990:                                              ; preds = %975, %900, %881
  br i1 %671, label %991, label %1183

991:                                              ; preds = %990
  br i1 %713, label %995, label %992

992:                                              ; preds = %995, %991
  %993 = phi i32 [ %553, %991 ], [ %712, %995 ]
  %994 = icmp slt i32 %993, %562
  br i1 %994, label %1016, label %1183

995:                                              ; preds = %991, %995
  %996 = phi i64 [ %1002, %995 ], [ %677, %991 ]
  %997 = phi i32 [ %1003, %995 ], [ %553, %991 ]
  %998 = shl nsw i32 %997, 1
  %999 = sext i32 %998 to i64
  %1000 = getelementptr inbounds i32, i32* %379, i64 %999
  %1001 = load i32, i32* %1000, align 4
  %1002 = add nsw i64 %996, 1
  %1003 = add nsw i32 %997, 1
  %1004 = shl nsw i32 %1003, 1
  %1005 = sext i32 %1004 to i64
  %1006 = getelementptr inbounds i32, i32* %379, i64 %1005
  %1007 = load i32, i32* %1006, align 4
  %1008 = add nsw i32 %1007, %1001
  %1009 = ashr i32 %1008, 1
  %1010 = or i32 %998, 1
  %1011 = sext i32 %1010 to i64
  %1012 = getelementptr inbounds i32, i32* %379, i64 %1011
  %1013 = load i32, i32* %1012, align 4
  %1014 = add nsw i32 %1009, %1013
  store i32 %1014, i32* %1012, align 4
  %1015 = icmp eq i64 %1002, %714
  br i1 %1015, label %992, label %995

1016:                                             ; preds = %992, %1055
  %1017 = phi i32 [ %1056, %1055 ], [ %993, %992 ]
  %1018 = icmp slt i32 %1017, 0
  br i1 %1018, label %1036, label %1019

1019:                                             ; preds = %1016
  %1020 = icmp sge i32 %1017, %412
  %1021 = and i1 %672, %1020
  br i1 %1021, label %1032, label %1022

1022:                                             ; preds = %1019
  %1023 = shl i32 %1017, 1
  %1024 = sext i32 %1023 to i64
  %1025 = icmp ugt i64 %376, %1024
  br i1 %1025, label %1030, label %1026

1026:                                             ; preds = %1022
  %1027 = add i32 %1023, -2
  %1028 = sext i32 %1027 to i64
  %1029 = getelementptr inbounds i32, i32* %379, i64 %1028
  br label %1032

1030:                                             ; preds = %1022
  %1031 = getelementptr inbounds i32, i32* %379, i64 %1024
  br label %1032

1032:                                             ; preds = %1030, %1026, %1019
  %1033 = phi i32* [ %1031, %1030 ], [ %1029, %1026 ], [ %717, %1019 ]
  %1034 = load i32, i32* %1033, align 4
  %1035 = add nuw nsw i32 %1017, 1
  br label %1040

1036:                                             ; preds = %1016
  %1037 = load i32, i32* %379, align 4
  %1038 = add nsw i32 %1017, 1
  %1039 = icmp slt i32 %1038, 0
  br i1 %1039, label %1055, label %1040

1040:                                             ; preds = %1036, %1032
  %1041 = phi i32 [ %1035, %1032 ], [ 0, %1036 ]
  %1042 = phi i32 [ %1034, %1032 ], [ %1037, %1036 ]
  %1043 = icmp sge i32 %1041, %412
  %1044 = and i1 %672, %1043
  br i1 %1044, label %1055, label %1045

1045:                                             ; preds = %1040
  %1046 = shl nsw i32 %1041, 1
  %1047 = sext i32 %1046 to i64
  %1048 = icmp ugt i64 %376, %1047
  br i1 %1048, label %1053, label %1049

1049:                                             ; preds = %1045
  %1050 = shl nsw i32 %1017, 1
  %1051 = sext i32 %1050 to i64
  %1052 = getelementptr inbounds i32, i32* %379, i64 %1051
  br label %1055

1053:                                             ; preds = %1045
  %1054 = getelementptr inbounds i32, i32* %379, i64 %1047
  br label %1055

1055:                                             ; preds = %1053, %1049, %1040, %1036
  %1056 = phi i32 [ %1041, %1049 ], [ %1041, %1053 ], [ %1038, %1036 ], [ %1041, %1040 ]
  %1057 = phi i32 [ %1042, %1049 ], [ %1042, %1053 ], [ %1037, %1036 ], [ %1042, %1040 ]
  %1058 = phi i32* [ %1052, %1049 ], [ %1054, %1053 ], [ %379, %1036 ], [ %717, %1040 ]
  %1059 = load i32, i32* %1058, align 4
  %1060 = add nsw i32 %1059, %1057
  %1061 = ashr i32 %1060, 1
  %1062 = shl nsw i32 %1017, 1
  %1063 = or i32 %1062, 1
  %1064 = sext i32 %1063 to i64
  %1065 = getelementptr inbounds i32, i32* %379, i64 %1064
  %1066 = load i32, i32* %1065, align 4
  %1067 = add nsw i32 %1061, %1066
  store i32 %1067, i32* %1065, align 4
  %1068 = icmp slt i32 %1056, %562
  br i1 %1068, label %1016, label %1183

1069:                                             ; preds = %876
  br i1 %664, label %1071, label %1070

1070:                                             ; preds = %1069
  br i1 %665, label %1075, label %1074

1071:                                             ; preds = %1069
  %1072 = load i32, i32* %379, align 4
  %1073 = sdiv i32 %1072, 2
  store i32 %1073, i32* %379, align 4
  br label %1183

1074:                                             ; preds = %1114, %1070
  br i1 %671, label %1129, label %1183

1075:                                             ; preds = %1070, %1114
  %1076 = phi i32 [ %1115, %1114 ], [ %543, %1070 ]
  %1077 = icmp slt i32 %1076, 0
  br i1 %1077, label %1095, label %1078

1078:                                             ; preds = %1075
  %1079 = icmp sge i32 %1076, %426
  %1080 = and i1 %666, %1079
  br i1 %1080, label %1091, label %1081

1081:                                             ; preds = %1078
  %1082 = shl i32 %1076, 1
  %1083 = sext i32 %1082 to i64
  %1084 = icmp ugt i64 %376, %1083
  br i1 %1084, label %1089, label %1085

1085:                                             ; preds = %1081
  %1086 = add i32 %1082, -2
  %1087 = sext i32 %1086 to i64
  %1088 = getelementptr inbounds i32, i32* %379, i64 %1087
  br label %1091

1089:                                             ; preds = %1081
  %1090 = getelementptr inbounds i32, i32* %379, i64 %1083
  br label %1091

1091:                                             ; preds = %1089, %1085, %1078
  %1092 = phi i32* [ %1090, %1089 ], [ %1088, %1085 ], [ %670, %1078 ]
  %1093 = load i32, i32* %1092, align 4
  %1094 = add nuw nsw i32 %1076, 1
  br label %1099

1095:                                             ; preds = %1075
  %1096 = load i32, i32* %379, align 4
  %1097 = add nsw i32 %1076, 1
  %1098 = icmp slt i32 %1097, 0
  br i1 %1098, label %1114, label %1099

1099:                                             ; preds = %1095, %1091
  %1100 = phi i32 [ %1094, %1091 ], [ 0, %1095 ]
  %1101 = phi i32 [ %1093, %1091 ], [ %1096, %1095 ]
  %1102 = icmp sge i32 %1100, %426
  %1103 = and i1 %666, %1102
  br i1 %1103, label %1114, label %1104

1104:                                             ; preds = %1099
  %1105 = shl nsw i32 %1100, 1
  %1106 = sext i32 %1105 to i64
  %1107 = icmp ugt i64 %376, %1106
  br i1 %1107, label %1112, label %1108

1108:                                             ; preds = %1104
  %1109 = shl nsw i32 %1076, 1
  %1110 = sext i32 %1109 to i64
  %1111 = getelementptr inbounds i32, i32* %379, i64 %1110
  br label %1114

1112:                                             ; preds = %1104
  %1113 = getelementptr inbounds i32, i32* %379, i64 %1106
  br label %1114

1114:                                             ; preds = %1112, %1108, %1099, %1095
  %1115 = phi i32 [ %1100, %1108 ], [ %1100, %1112 ], [ %1097, %1095 ], [ %1100, %1099 ]
  %1116 = phi i32 [ %1101, %1108 ], [ %1101, %1112 ], [ %1096, %1095 ], [ %1101, %1099 ]
  %1117 = phi i32* [ %1111, %1108 ], [ %1113, %1112 ], [ %379, %1095 ], [ %670, %1099 ]
  %1118 = load i32, i32* %1117, align 4
  %1119 = add i32 %1116, 2
  %1120 = add i32 %1119, %1118
  %1121 = ashr i32 %1120, 2
  %1122 = shl nsw i32 %1076, 1
  %1123 = or i32 %1122, 1
  %1124 = sext i32 %1123 to i64
  %1125 = getelementptr inbounds i32, i32* %379, i64 %1124
  %1126 = load i32, i32* %1125, align 4
  %1127 = sub nsw i32 %1126, %1121
  store i32 %1127, i32* %1125, align 4
  %1128 = icmp slt i32 %1115, %552
  br i1 %1128, label %1075, label %1074

1129:                                             ; preds = %1074, %1169
  %1130 = phi i64 [ %1181, %1169 ], [ %677, %1074 ]
  %1131 = icmp slt i64 %1130, 0
  br i1 %1131, label %1132, label %1134

1132:                                             ; preds = %1129
  %1133 = load i32, i32* %394, align 4
  br label %1169

1134:                                             ; preds = %1129
  %1135 = icmp sge i64 %1130, %678
  %1136 = and i1 %672, %1135
  br i1 %1136, label %1149, label %1137

1137:                                             ; preds = %1134
  %1138 = trunc i64 %1130 to i32
  %1139 = shl i32 %1138, 1
  %1140 = or i32 %1139, 1
  %1141 = sext i32 %1140 to i64
  %1142 = icmp ugt i64 %376, %1141
  br i1 %1142, label %1147, label %1143

1143:                                             ; preds = %1137
  %1144 = add i32 %1139, -1
  %1145 = sext i32 %1144 to i64
  %1146 = getelementptr inbounds i32, i32* %379, i64 %1145
  br label %1149

1147:                                             ; preds = %1137
  %1148 = getelementptr inbounds i32, i32* %379, i64 %1141
  br label %1149

1149:                                             ; preds = %1147, %1143, %1134
  %1150 = phi i32* [ %1146, %1143 ], [ %1148, %1147 ], [ %676, %1134 ]
  %1151 = load i32, i32* %1150, align 4
  %1152 = icmp slt i64 %1130, 1
  br i1 %1152, label %1169, label %1153

1153:                                             ; preds = %1149
  %1154 = icmp sgt i64 %1130, %678
  %1155 = and i1 %672, %1154
  br i1 %1155, label %1169, label %1156

1156:                                             ; preds = %1153
  %1157 = trunc i64 %1130 to i32
  %1158 = shl i32 %1157, 1
  %1159 = add i32 %1158, -2
  %1160 = or i32 %1159, 1
  %1161 = sext i32 %1160 to i64
  %1162 = icmp ugt i64 %376, %1161
  br i1 %1162, label %1167, label %1163

1163:                                             ; preds = %1156
  %1164 = add i32 %1158, -3
  %1165 = sext i32 %1164 to i64
  %1166 = getelementptr inbounds i32, i32* %379, i64 %1165
  br label %1169

1167:                                             ; preds = %1156
  %1168 = getelementptr inbounds i32, i32* %379, i64 %1161
  br label %1169

1169:                                             ; preds = %1167, %1163, %1153, %1149, %1132
  %1170 = phi i32 [ %1151, %1163 ], [ %1151, %1167 ], [ %1133, %1132 ], [ %1151, %1149 ], [ %1151, %1153 ]
  %1171 = phi i32* [ %1166, %1163 ], [ %1168, %1167 ], [ %394, %1132 ], [ %394, %1149 ], [ %676, %1153 ]
  %1172 = load i32, i32* %1171, align 4
  %1173 = add nsw i32 %1172, %1170
  %1174 = ashr i32 %1173, 1
  %1175 = trunc i64 %1130 to i32
  %1176 = shl nsw i32 %1175, 1
  %1177 = sext i32 %1176 to i64
  %1178 = getelementptr inbounds i32, i32* %379, i64 %1177
  %1179 = load i32, i32* %1178, align 4
  %1180 = add nsw i32 %1174, %1179
  store i32 %1180, i32* %1178, align 4
  %1181 = add nsw i64 %1130, 1
  %1182 = icmp eq i64 %1181, %679
  br i1 %1182, label %1183, label %1129

1183:                                             ; preds = %1169, %1055, %1074, %1071, %992, %990, %880
  %1184 = tail call i32 @opj_sparse_array_int32_write(%struct.opj_sparse_array_int32* nonnull %287, i32 %608, i32 %862, i32 %610, i32 %877, i32* %719, i32 1, i32 0, i32 1) #10
  %1185 = icmp eq i32 %1184, 0
  br i1 %1185, label %1186, label %1187

1186:                                             ; preds = %1183
  tail call void @opj_sparse_array_int32_free(%struct.opj_sparse_array_int32* nonnull %287) #10
  tail call void @opj_aligned_free(i8* nonnull %378) #10
  br label %1962

1187:                                             ; preds = %1183, %870
  %1188 = phi i32 [ %871, %870 ], [ %877, %1183 ]
  %1189 = icmp eq i32 %1188, %425
  br i1 %1189, label %726, label %861

1190:                                             ; preds = %1936, %726
  %1191 = phi i32 [ %1197, %1936 ], [ %608, %726 ]
  %1192 = icmp ugt i32 %610, %1191
  br i1 %1192, label %1193, label %1940

1193:                                             ; preds = %1190
  %1194 = sub i32 %610, %1191
  %1195 = icmp ult i32 %1194, 4
  %1196 = select i1 %1195, i32 %1194, i32 4
  %1197 = add i32 %1196, %1191
  %1198 = tail call i32 @opj_sparse_array_int32_read(%struct.opj_sparse_array_int32* nonnull %287, i32 %1191, i32 %563, i32 %1197, i32 %572, i32* %732, i32 1, i32 8, i32 1) #10
  %1199 = tail call i32 @opj_sparse_array_int32_read(%struct.opj_sparse_array_int32* nonnull %287, i32 %1191, i32 %640, i32 %1197, i32 %641, i32* %738, i32 1, i32 8, i32 1) #10
  br i1 %611, label %1200, label %1540

1200:                                             ; preds = %1193
  br i1 %772, label %1201, label %1936

1201:                                             ; preds = %1200
  br i1 %742, label %1202, label %1393

1202:                                             ; preds = %1201
  br i1 %773, label %1205, label %1203

1203:                                             ; preds = %1202
  %1204 = load i32, i32* %783, align 4
  br label %1226

1205:                                             ; preds = %1202
  %1206 = load i32, i32* %400, align 4
  br i1 %777, label %1207, label %1226

1207:                                             ; preds = %1205
  %1208 = shl i32 %1206, 1
  %1209 = add i32 %1208, 2
  %1210 = ashr i32 %1209, 2
  %1211 = load i32, i32* %786, align 4
  %1212 = sub nsw i32 %1211, %1210
  store i32 %1212, i32* %786, align 4
  %1213 = load i32, i32* %402, align 4
  %1214 = shl i32 %1213, 1
  %1215 = add i32 %1214, 2
  %1216 = ashr i32 %1215, 2
  %1217 = load i32, i32* %794, align 4
  %1218 = sub nsw i32 %1217, %1216
  store i32 %1218, i32* %794, align 4
  %1219 = load i32, i32* %404, align 4
  %1220 = shl i32 %1219, 1
  %1221 = add i32 %1220, 2
  %1222 = ashr i32 %1221, 2
  %1223 = load i32, i32* %802, align 4
  %1224 = sub nsw i32 %1223, %1222
  store i32 %1224, i32* %802, align 4
  %1225 = load i32, i32* %406, align 4
  br label %1772

1226:                                             ; preds = %1205, %1203
  %1227 = phi i32 [ %1204, %1203 ], [ %1206, %1205 ]
  %1228 = load i32, i32* %851, align 4
  %1229 = add i32 %1227, 2
  %1230 = add i32 %1229, %1228
  %1231 = ashr i32 %1230, 2
  %1232 = load i32, i32* %786, align 4
  %1233 = sub nsw i32 %1232, %1231
  store i32 %1233, i32* %786, align 4
  %1234 = load i32, i32* %858, align 4
  %1235 = load i32, i32* %853, align 4
  %1236 = add i32 %1234, 2
  %1237 = add i32 %1236, %1235
  %1238 = ashr i32 %1237, 2
  %1239 = load i32, i32* %794, align 4
  %1240 = sub nsw i32 %1239, %1238
  store i32 %1240, i32* %794, align 4
  %1241 = load i32, i32* %859, align 4
  %1242 = load i32, i32* %855, align 4
  %1243 = add i32 %1241, 2
  %1244 = add i32 %1243, %1242
  %1245 = ashr i32 %1244, 2
  %1246 = load i32, i32* %802, align 4
  %1247 = sub nsw i32 %1246, %1245
  store i32 %1247, i32* %802, align 4
  %1248 = load i32, i32* %860, align 4
  %1249 = load i32, i32* %857, align 4
  br label %1772

1250:                                             ; preds = %1772
  %1251 = load <2 x i64>, <2 x i64>* %818, align 16
  br label %1252

1252:                                             ; preds = %1252, %1250
  %1253 = phi i64 [ %819, %1250 ], [ %1282, %1252 ]
  %1254 = phi i32 [ %814, %1250 ], [ %1286, %1252 ]
  %1255 = phi i32 [ %811, %1250 ], [ %1283, %1252 ]
  %1256 = phi <2 x i64> [ %1251, %1250 ], [ %1272, %1252 ]
  %1257 = shl nsw i32 %1255, 3
  %1258 = sext i32 %1257 to i64
  %1259 = getelementptr inbounds i32, i32* %379, i64 %1258
  %1260 = bitcast i32* %1259 to <4 x i32>*
  %1261 = load <4 x i32>, <4 x i32>* %1260, align 16
  %1262 = getelementptr inbounds i32, i32* %400, i64 %1258
  %1263 = bitcast i32* %1262 to <4 x i32>*
  %1264 = load <4 x i32>, <4 x i32>* %1263, align 16
  %1265 = shl nsw i32 %1254, 3
  %1266 = sext i32 %1265 to i64
  %1267 = getelementptr inbounds i32, i32* %379, i64 %1266
  %1268 = bitcast i32* %1267 to <4 x i32>*
  %1269 = load <4 x i32>, <4 x i32>* %1268, align 16
  %1270 = getelementptr inbounds i32, i32* %400, i64 %1266
  %1271 = bitcast i32* %1270 to <2 x i64>*
  %1272 = load <2 x i64>, <2 x i64>* %1271, align 16
  %1273 = bitcast <2 x i64> %1256 to <4 x i32>
  %1274 = add <4 x i32> %1264, <i32 2, i32 2, i32 2, i32 2>
  %1275 = add <4 x i32> %1274, %1273
  %1276 = ashr <4 x i32> %1275, <i32 2, i32 2, i32 2, i32 2>
  %1277 = sub <4 x i32> %1261, %1276
  %1278 = bitcast <2 x i64> %1272 to <4 x i32>
  %1279 = add <4 x i32> %1274, %1278
  %1280 = ashr <4 x i32> %1279, <i32 2, i32 2, i32 2, i32 2>
  %1281 = sub <4 x i32> %1269, %1280
  store <4 x i32> %1277, <4 x i32>* %1260, align 16
  store <4 x i32> %1281, <4 x i32>* %1268, align 16
  %1282 = add i64 %1253, 2
  %1283 = add nsw i32 %1255, 2
  %1284 = add nsw i64 %1253, 3
  %1285 = icmp slt i64 %1284, %820
  %1286 = trunc i64 %1284 to i32
  br i1 %1285, label %1252, label %1287

1287:                                             ; preds = %1252
  %1288 = trunc i64 %1282 to i32
  br label %1289

1289:                                             ; preds = %1772, %1287
  %1290 = phi i32 [ %811, %1772 ], [ %1288, %1287 ]
  %1291 = icmp slt i32 %1290, %813
  br i1 %1291, label %1292, label %1357

1292:                                             ; preds = %1289, %1292
  %1293 = phi i32 [ %1355, %1292 ], [ %1290, %1289 ]
  %1294 = shl i32 %1293, 3
  %1295 = or i32 %1294, 4
  %1296 = zext i32 %1294 to i64
  %1297 = add i32 %1294, -4
  %1298 = zext i32 %1297 to i64
  %1299 = getelementptr inbounds i32, i32* %379, i64 %1298
  %1300 = load i32, i32* %1299, align 4
  %1301 = zext i32 %1295 to i64
  %1302 = getelementptr inbounds i32, i32* %379, i64 %1301
  %1303 = load i32, i32* %1302, align 4
  %1304 = add i32 %1300, 2
  %1305 = add i32 %1304, %1303
  %1306 = ashr i32 %1305, 2
  %1307 = getelementptr inbounds i32, i32* %379, i64 %1296
  %1308 = load i32, i32* %1307, align 4
  %1309 = sub nsw i32 %1308, %1306
  store i32 %1309, i32* %1307, align 4
  %1310 = or i64 %1296, 1
  %1311 = add nuw nsw i64 %1310, 4294967292
  %1312 = and i64 %1311, 4294967293
  %1313 = getelementptr inbounds i32, i32* %379, i64 %1312
  %1314 = load i32, i32* %1313, align 4
  %1315 = or i32 %1294, 5
  %1316 = zext i32 %1315 to i64
  %1317 = getelementptr inbounds i32, i32* %379, i64 %1316
  %1318 = load i32, i32* %1317, align 4
  %1319 = add i32 %1314, 2
  %1320 = add i32 %1319, %1318
  %1321 = ashr i32 %1320, 2
  %1322 = getelementptr inbounds i32, i32* %379, i64 %1310
  %1323 = load i32, i32* %1322, align 4
  %1324 = sub nsw i32 %1323, %1321
  store i32 %1324, i32* %1322, align 4
  %1325 = or i64 %1296, 2
  %1326 = add nuw nsw i64 %1325, 4294967292
  %1327 = and i64 %1326, 4294967294
  %1328 = getelementptr inbounds i32, i32* %379, i64 %1327
  %1329 = load i32, i32* %1328, align 4
  %1330 = or i32 %1294, 6
  %1331 = zext i32 %1330 to i64
  %1332 = getelementptr inbounds i32, i32* %379, i64 %1331
  %1333 = load i32, i32* %1332, align 4
  %1334 = add i32 %1329, 2
  %1335 = add i32 %1334, %1333
  %1336 = ashr i32 %1335, 2
  %1337 = getelementptr inbounds i32, i32* %379, i64 %1325
  %1338 = load i32, i32* %1337, align 4
  %1339 = sub nsw i32 %1338, %1336
  store i32 %1339, i32* %1337, align 4
  %1340 = or i64 %1296, 3
  %1341 = add nuw nsw i64 %1340, 4294967292
  %1342 = and i64 %1341, 4294967295
  %1343 = getelementptr inbounds i32, i32* %379, i64 %1342
  %1344 = load i32, i32* %1343, align 4
  %1345 = or i32 %1294, 7
  %1346 = zext i32 %1345 to i64
  %1347 = getelementptr inbounds i32, i32* %379, i64 %1346
  %1348 = load i32, i32* %1347, align 4
  %1349 = add i32 %1344, 2
  %1350 = add i32 %1349, %1348
  %1351 = ashr i32 %1350, 2
  %1352 = getelementptr inbounds i32, i32* %379, i64 %1340
  %1353 = load i32, i32* %1352, align 4
  %1354 = sub nsw i32 %1353, %1351
  store i32 %1354, i32* %1352, align 4
  %1355 = add nsw i32 %1293, 1
  %1356 = icmp slt i32 %1355, %813
  br i1 %1356, label %1292, label %1357

1357:                                             ; preds = %1292, %1289
  %1358 = phi i32 [ %1290, %1289 ], [ %1355, %1292 ]
  %1359 = icmp slt i32 %1358, %572
  br i1 %1359, label %1360, label %1393

1360:                                             ; preds = %1357, %1759
  %1361 = phi i32 [ %1770, %1759 ], [ %1358, %1357 ]
  %1362 = icmp slt i32 %1361, 1
  %1363 = icmp sgt i32 %1361, %428
  %1364 = select i1 %1363, i32 %428, i32 %1361
  %1365 = shl i32 %1364, 3
  %1366 = icmp slt i32 %1361, 0
  %1367 = icmp slt i32 %1361, %428
  %1368 = shl i32 %1361, 3
  %1369 = or i32 %1368, 4
  %1370 = zext i32 %1368 to i64
  br i1 %1362, label %1376, label %1371

1371:                                             ; preds = %1360
  %1372 = add i32 %1365, -4
  %1373 = zext i32 %1372 to i64
  %1374 = getelementptr inbounds i32, i32* %379, i64 %1373
  %1375 = load i32, i32* %1374, align 4
  br label %1378

1376:                                             ; preds = %1360
  %1377 = load i32, i32* %400, align 4
  br i1 %1366, label %1383, label %1378

1378:                                             ; preds = %1376, %1371
  %1379 = phi i32 [ %1375, %1371 ], [ %1377, %1376 ]
  br i1 %1367, label %1380, label %1383

1380:                                             ; preds = %1378
  %1381 = zext i32 %1369 to i64
  %1382 = getelementptr inbounds i32, i32* %379, i64 %1381
  br label %1383

1383:                                             ; preds = %1380, %1378, %1376
  %1384 = phi i32 [ %1379, %1380 ], [ %1377, %1376 ], [ %1379, %1378 ]
  %1385 = phi i32* [ %1382, %1380 ], [ %400, %1376 ], [ %821, %1378 ]
  %1386 = load i32, i32* %1385, align 4
  %1387 = add i32 %1384, 2
  %1388 = add i32 %1387, %1386
  %1389 = ashr i32 %1388, 2
  %1390 = getelementptr inbounds i32, i32* %379, i64 %1370
  %1391 = load i32, i32* %1390, align 4
  %1392 = sub nsw i32 %1391, %1389
  store i32 %1392, i32* %1390, align 4
  br i1 %1362, label %1703, label %1698

1393:                                             ; preds = %1759, %1357, %1201
  br i1 %756, label %1394, label %1936

1394:                                             ; preds = %1393
  br i1 %829, label %1395, label %1435

1395:                                             ; preds = %1394
  %1396 = load <2 x i64>, <2 x i64>* %832, align 16
  br label %1397

1397:                                             ; preds = %1397, %1395
  %1398 = phi i64 [ %833, %1395 ], [ %1415, %1397 ]
  %1399 = phi i32 [ %828, %1395 ], [ %1432, %1397 ]
  %1400 = phi i32 [ %573, %1395 ], [ %1416, %1397 ]
  %1401 = phi <2 x i64> [ %1396, %1395 ], [ %1421, %1397 ]
  %1402 = shl nsw i32 %1400, 3
  %1403 = sext i32 %1402 to i64
  %1404 = getelementptr inbounds i32, i32* %400, i64 %1403
  %1405 = bitcast i32* %1404 to <4 x i32>*
  %1406 = load <4 x i32>, <4 x i32>* %1405, align 16
  %1407 = shl nsw i32 %1399, 3
  %1408 = sext i32 %1407 to i64
  %1409 = getelementptr inbounds i32, i32* %379, i64 %1408
  %1410 = bitcast i32* %1409 to <4 x i32>*
  %1411 = load <4 x i32>, <4 x i32>* %1410, align 16
  %1412 = getelementptr inbounds i32, i32* %400, i64 %1408
  %1413 = bitcast i32* %1412 to <4 x i32>*
  %1414 = load <4 x i32>, <4 x i32>* %1413, align 16
  %1415 = add nsw i64 %1398, 2
  %1416 = add nsw i32 %1400, 2
  %1417 = shl nsw i32 %1416, 3
  %1418 = sext i32 %1417 to i64
  %1419 = getelementptr inbounds i32, i32* %379, i64 %1418
  %1420 = bitcast i32* %1419 to <2 x i64>*
  %1421 = load <2 x i64>, <2 x i64>* %1420, align 16
  %1422 = bitcast <2 x i64> %1401 to <4 x i32>
  %1423 = add <4 x i32> %1411, %1422
  %1424 = ashr <4 x i32> %1423, <i32 1, i32 1, i32 1, i32 1>
  %1425 = add <4 x i32> %1424, %1406
  %1426 = bitcast <2 x i64> %1421 to <4 x i32>
  %1427 = add <4 x i32> %1411, %1426
  %1428 = ashr <4 x i32> %1427, <i32 1, i32 1, i32 1, i32 1>
  %1429 = add <4 x i32> %1428, %1414
  store <4 x i32> %1425, <4 x i32>* %1405, align 16
  store <4 x i32> %1429, <4 x i32>* %1413, align 16
  %1430 = add nsw i64 %1398, 3
  %1431 = icmp slt i64 %1430, %834
  %1432 = trunc i64 %1430 to i32
  br i1 %1431, label %1397, label %1433

1433:                                             ; preds = %1397
  %1434 = trunc i64 %1415 to i32
  br label %1435

1435:                                             ; preds = %1433, %1394
  %1436 = phi i32 [ %573, %1394 ], [ %1434, %1433 ]
  %1437 = icmp slt i32 %1436, %827
  br i1 %1437, label %1438, label %1502

1438:                                             ; preds = %1435, %1438
  %1439 = phi i32 [ %1500, %1438 ], [ %1436, %1435 ]
  %1440 = shl i32 %1439, 3
  %1441 = or i32 %1440, 4
  %1442 = zext i32 %1440 to i64
  %1443 = getelementptr inbounds i32, i32* %379, i64 %1442
  %1444 = load i32, i32* %1443, align 4
  %1445 = add i32 %1440, 8
  %1446 = zext i32 %1445 to i64
  %1447 = getelementptr inbounds i32, i32* %379, i64 %1446
  %1448 = load i32, i32* %1447, align 4
  %1449 = add nsw i32 %1448, %1444
  %1450 = ashr i32 %1449, 1
  %1451 = zext i32 %1441 to i64
  %1452 = getelementptr inbounds i32, i32* %379, i64 %1451
  %1453 = load i32, i32* %1452, align 4
  %1454 = add nsw i32 %1450, %1453
  store i32 %1454, i32* %1452, align 4
  %1455 = or i64 %1442, 1
  %1456 = getelementptr inbounds i32, i32* %379, i64 %1455
  %1457 = load i32, i32* %1456, align 4
  %1458 = or i32 %1440, 1
  %1459 = add i32 %1458, 8
  %1460 = zext i32 %1459 to i64
  %1461 = getelementptr inbounds i32, i32* %379, i64 %1460
  %1462 = load i32, i32* %1461, align 4
  %1463 = add nsw i32 %1462, %1457
  %1464 = ashr i32 %1463, 1
  %1465 = or i32 %1440, 5
  %1466 = zext i32 %1465 to i64
  %1467 = getelementptr inbounds i32, i32* %379, i64 %1466
  %1468 = load i32, i32* %1467, align 4
  %1469 = add nsw i32 %1464, %1468
  store i32 %1469, i32* %1467, align 4
  %1470 = or i64 %1442, 2
  %1471 = getelementptr inbounds i32, i32* %379, i64 %1470
  %1472 = load i32, i32* %1471, align 4
  %1473 = or i32 %1440, 2
  %1474 = add i32 %1473, 8
  %1475 = zext i32 %1474 to i64
  %1476 = getelementptr inbounds i32, i32* %379, i64 %1475
  %1477 = load i32, i32* %1476, align 4
  %1478 = add nsw i32 %1477, %1472
  %1479 = ashr i32 %1478, 1
  %1480 = or i32 %1440, 6
  %1481 = zext i32 %1480 to i64
  %1482 = getelementptr inbounds i32, i32* %379, i64 %1481
  %1483 = load i32, i32* %1482, align 4
  %1484 = add nsw i32 %1479, %1483
  store i32 %1484, i32* %1482, align 4
  %1485 = or i64 %1442, 3
  %1486 = getelementptr inbounds i32, i32* %379, i64 %1485
  %1487 = load i32, i32* %1486, align 4
  %1488 = or i32 %1440, 3
  %1489 = add i32 %1488, 8
  %1490 = zext i32 %1489 to i64
  %1491 = getelementptr inbounds i32, i32* %379, i64 %1490
  %1492 = load i32, i32* %1491, align 4
  %1493 = add nsw i32 %1492, %1487
  %1494 = ashr i32 %1493, 1
  %1495 = or i32 %1440, 7
  %1496 = zext i32 %1495 to i64
  %1497 = getelementptr inbounds i32, i32* %379, i64 %1496
  %1498 = load i32, i32* %1497, align 4
  %1499 = add nsw i32 %1494, %1498
  store i32 %1499, i32* %1497, align 4
  %1500 = add nsw i32 %1439, 1
  %1501 = icmp eq i32 %1500, %827
  br i1 %1501, label %1502, label %1438

1502:                                             ; preds = %1438, %1435
  %1503 = phi i32 [ %1436, %1435 ], [ %827, %1438 ]
  %1504 = icmp slt i32 %1503, %582
  br i1 %1504, label %1505, label %1936

1505:                                             ; preds = %1502, %1686
  %1506 = phi i32 [ %1510, %1686 ], [ %1503, %1502 ]
  %1507 = icmp slt i32 %1506, 0
  %1508 = icmp sge i32 %1506, %411
  %1509 = shl i32 %1506, 3
  %1510 = add nsw i32 %1506, 1
  %1511 = icmp slt i32 %1510, 0
  %1512 = or i32 %1509, 4
  %1513 = zext i32 %1509 to i64
  %1514 = or i1 %1507, %1508
  br i1 %1514, label %1518, label %1515

1515:                                             ; preds = %1505
  %1516 = getelementptr inbounds i32, i32* %379, i64 %1513
  %1517 = load i32, i32* %1516, align 4
  br label %1523

1518:                                             ; preds = %1505
  %1519 = select i1 %1507, i32 0, i32 %835
  %1520 = zext i32 %1519 to i64
  %1521 = getelementptr inbounds i32, i32* %379, i64 %1520
  %1522 = load i32, i32* %1521, align 4
  br i1 %1511, label %1530, label %1523

1523:                                             ; preds = %1518, %1515
  %1524 = phi i32 [ %1517, %1515 ], [ %1522, %1518 ]
  %1525 = icmp slt i32 %1510, %411
  br i1 %1525, label %1526, label %1530

1526:                                             ; preds = %1523
  %1527 = shl i32 %1510, 3
  %1528 = zext i32 %1527 to i64
  %1529 = getelementptr inbounds i32, i32* %379, i64 %1528
  br label %1530

1530:                                             ; preds = %1526, %1523, %1518
  %1531 = phi i32 [ %1524, %1526 ], [ %1522, %1518 ], [ %1524, %1523 ]
  %1532 = phi i32* [ %1529, %1526 ], [ %379, %1518 ], [ %837, %1523 ]
  %1533 = load i32, i32* %1532, align 4
  %1534 = add nsw i32 %1533, %1531
  %1535 = ashr i32 %1534, 1
  %1536 = zext i32 %1512 to i64
  %1537 = getelementptr inbounds i32, i32* %379, i64 %1536
  %1538 = load i32, i32* %1537, align 4
  %1539 = add nsw i32 %1535, %1538
  store i32 %1539, i32* %1537, align 4
  br i1 %1514, label %1617, label %1613

1540:                                             ; preds = %1193
  br i1 %741, label %1541, label %1544

1541:                                             ; preds = %1540
  %1542 = load <4 x i32>, <4 x i32>* %407, align 4
  %1543 = sdiv <4 x i32> %1542, <i32 2, i32 2, i32 2, i32 2>
  store <4 x i32> %1543, <4 x i32>* %408, align 4
  br label %1936

1544:                                             ; preds = %1540
  br i1 %742, label %1545, label %1555

1545:                                             ; preds = %1544, %1923
  %1546 = phi i32 [ %1550, %1923 ], [ %563, %1544 ]
  %1547 = icmp slt i32 %1546, 0
  %1548 = icmp sge i32 %1546, %428
  %1549 = shl i32 %1546, 3
  %1550 = add nsw i32 %1546, 1
  %1551 = icmp slt i32 %1550, 0
  %1552 = or i32 %1549, 4
  %1553 = zext i32 %1549 to i64
  %1554 = or i1 %1547, %1548
  br i1 %1554, label %1559, label %1556

1555:                                             ; preds = %1923, %1544
  br i1 %756, label %1582, label %1936

1556:                                             ; preds = %1545
  %1557 = getelementptr inbounds i32, i32* %379, i64 %1553
  %1558 = load i32, i32* %1557, align 4
  br label %1564

1559:                                             ; preds = %1545
  %1560 = select i1 %1547, i32 0, i32 %744
  %1561 = zext i32 %1560 to i64
  %1562 = getelementptr inbounds i32, i32* %379, i64 %1561
  %1563 = load i32, i32* %1562, align 4
  br i1 %1551, label %1571, label %1564

1564:                                             ; preds = %1559, %1556
  %1565 = phi i32 [ %1558, %1556 ], [ %1563, %1559 ]
  %1566 = icmp slt i32 %1550, %428
  br i1 %1566, label %1567, label %1571

1567:                                             ; preds = %1564
  %1568 = shl i32 %1550, 3
  %1569 = zext i32 %1568 to i64
  %1570 = getelementptr inbounds i32, i32* %379, i64 %1569
  br label %1571

1571:                                             ; preds = %1567, %1564, %1559
  %1572 = phi i32 [ %1565, %1567 ], [ %1563, %1559 ], [ %1565, %1564 ]
  %1573 = phi i32* [ %1570, %1567 ], [ %379, %1559 ], [ %746, %1564 ]
  %1574 = load i32, i32* %1573, align 4
  %1575 = add i32 %1572, 2
  %1576 = add i32 %1575, %1574
  %1577 = ashr i32 %1576, 2
  %1578 = zext i32 %1552 to i64
  %1579 = getelementptr inbounds i32, i32* %379, i64 %1578
  %1580 = load i32, i32* %1579, align 4
  %1581 = sub nsw i32 %1580, %1577
  store i32 %1581, i32* %1579, align 4
  br i1 %1554, label %1852, label %1848

1582:                                             ; preds = %1555, %1836
  %1583 = phi i32 [ %1846, %1836 ], [ %573, %1555 ]
  %1584 = icmp slt i32 %1583, 0
  %1585 = icmp slt i32 %1583, %411
  %1586 = shl i32 %1583, 3
  %1587 = or i32 %1586, 4
  %1588 = select i1 %1585, i32 %1587, i32 %758
  %1589 = icmp slt i32 %1583, 1
  %1590 = icmp sgt i32 %1583, %411
  %1591 = zext i32 %1586 to i64
  %1592 = zext i32 %1588 to i64
  br i1 %1584, label %1593, label %1595

1593:                                             ; preds = %1582
  %1594 = load i32, i32* %400, align 4
  br label %1604

1595:                                             ; preds = %1582
  %1596 = getelementptr inbounds i32, i32* %379, i64 %1592
  %1597 = load i32, i32* %1596, align 4
  %1598 = or i1 %1589, %1590
  %1599 = select i1 %1589, i32* %400, i32* %760
  br i1 %1598, label %1604, label %1600

1600:                                             ; preds = %1595
  %1601 = add i32 %1586, -4
  %1602 = zext i32 %1601 to i64
  %1603 = getelementptr inbounds i32, i32* %379, i64 %1602
  br label %1604

1604:                                             ; preds = %1600, %1595, %1593
  %1605 = phi i32 [ %1597, %1600 ], [ %1594, %1593 ], [ %1597, %1595 ]
  %1606 = phi i32* [ %1603, %1600 ], [ %400, %1593 ], [ %1599, %1595 ]
  %1607 = load i32, i32* %1606, align 4
  %1608 = add nsw i32 %1607, %1605
  %1609 = ashr i32 %1608, 1
  %1610 = getelementptr inbounds i32, i32* %379, i64 %1591
  %1611 = load i32, i32* %1610, align 4
  %1612 = add nsw i32 %1609, %1611
  store i32 %1612, i32* %1610, align 4
  br i1 %1584, label %1790, label %1780

1613:                                             ; preds = %1530
  %1614 = or i64 %1513, 1
  %1615 = getelementptr inbounds i32, i32* %379, i64 %1614
  %1616 = load i32, i32* %1615, align 4
  br label %1622

1617:                                             ; preds = %1530
  %1618 = select i1 %1507, i32 1, i32 %838
  %1619 = zext i32 %1618 to i64
  %1620 = getelementptr inbounds i32, i32* %379, i64 %1619
  %1621 = load i32, i32* %1620, align 4
  br i1 %1511, label %1630, label %1622

1622:                                             ; preds = %1617, %1613
  %1623 = phi i32 [ %1616, %1613 ], [ %1621, %1617 ]
  %1624 = icmp slt i32 %1510, %411
  br i1 %1624, label %1625, label %1630

1625:                                             ; preds = %1622
  %1626 = shl i32 %1510, 3
  %1627 = or i32 %1626, 1
  %1628 = zext i32 %1627 to i64
  %1629 = getelementptr inbounds i32, i32* %379, i64 %1628
  br label %1630

1630:                                             ; preds = %1625, %1622, %1617
  %1631 = phi i32 [ %1623, %1625 ], [ %1623, %1622 ], [ %1621, %1617 ]
  %1632 = phi i32* [ %1629, %1625 ], [ %840, %1622 ], [ %394, %1617 ]
  %1633 = load i32, i32* %1632, align 4
  %1634 = add nsw i32 %1633, %1631
  %1635 = ashr i32 %1634, 1
  %1636 = or i32 %1509, 5
  %1637 = zext i32 %1636 to i64
  %1638 = getelementptr inbounds i32, i32* %379, i64 %1637
  %1639 = load i32, i32* %1638, align 4
  %1640 = add nsw i32 %1635, %1639
  store i32 %1640, i32* %1638, align 4
  br i1 %1514, label %1645, label %1641

1641:                                             ; preds = %1630
  %1642 = or i64 %1513, 2
  %1643 = getelementptr inbounds i32, i32* %379, i64 %1642
  %1644 = load i32, i32* %1643, align 4
  br label %1650

1645:                                             ; preds = %1630
  %1646 = select i1 %1507, i32 2, i32 %841
  %1647 = zext i32 %1646 to i64
  %1648 = getelementptr inbounds i32, i32* %379, i64 %1647
  %1649 = load i32, i32* %1648, align 4
  br i1 %1511, label %1658, label %1650

1650:                                             ; preds = %1645, %1641
  %1651 = phi i32 [ %1644, %1641 ], [ %1649, %1645 ]
  %1652 = icmp slt i32 %1510, %411
  br i1 %1652, label %1653, label %1658

1653:                                             ; preds = %1650
  %1654 = shl i32 %1510, 3
  %1655 = or i32 %1654, 2
  %1656 = zext i32 %1655 to i64
  %1657 = getelementptr inbounds i32, i32* %379, i64 %1656
  br label %1658

1658:                                             ; preds = %1653, %1650, %1645
  %1659 = phi i32 [ %1651, %1653 ], [ %1651, %1650 ], [ %1649, %1645 ]
  %1660 = phi i32* [ %1657, %1653 ], [ %843, %1650 ], [ %396, %1645 ]
  %1661 = load i32, i32* %1660, align 4
  %1662 = add nsw i32 %1661, %1659
  %1663 = ashr i32 %1662, 1
  %1664 = or i32 %1509, 6
  %1665 = zext i32 %1664 to i64
  %1666 = getelementptr inbounds i32, i32* %379, i64 %1665
  %1667 = load i32, i32* %1666, align 4
  %1668 = add nsw i32 %1663, %1667
  store i32 %1668, i32* %1666, align 4
  br i1 %1514, label %1673, label %1669

1669:                                             ; preds = %1658
  %1670 = or i64 %1513, 3
  %1671 = getelementptr inbounds i32, i32* %379, i64 %1670
  %1672 = load i32, i32* %1671, align 4
  br label %1678

1673:                                             ; preds = %1658
  %1674 = select i1 %1507, i32 3, i32 %844
  %1675 = zext i32 %1674 to i64
  %1676 = getelementptr inbounds i32, i32* %379, i64 %1675
  %1677 = load i32, i32* %1676, align 4
  br i1 %1511, label %1686, label %1678

1678:                                             ; preds = %1673, %1669
  %1679 = phi i32 [ %1672, %1669 ], [ %1677, %1673 ]
  %1680 = icmp slt i32 %1510, %411
  br i1 %1680, label %1681, label %1686

1681:                                             ; preds = %1678
  %1682 = shl i32 %1510, 3
  %1683 = or i32 %1682, 3
  %1684 = zext i32 %1683 to i64
  %1685 = getelementptr inbounds i32, i32* %379, i64 %1684
  br label %1686

1686:                                             ; preds = %1681, %1678, %1673
  %1687 = phi i32 [ %1679, %1681 ], [ %1679, %1678 ], [ %1677, %1673 ]
  %1688 = phi i32* [ %1685, %1681 ], [ %846, %1678 ], [ %398, %1673 ]
  %1689 = load i32, i32* %1688, align 4
  %1690 = add nsw i32 %1689, %1687
  %1691 = ashr i32 %1690, 1
  %1692 = or i32 %1509, 7
  %1693 = zext i32 %1692 to i64
  %1694 = getelementptr inbounds i32, i32* %379, i64 %1693
  %1695 = load i32, i32* %1694, align 4
  %1696 = add nsw i32 %1691, %1695
  store i32 %1696, i32* %1694, align 4
  %1697 = icmp eq i32 %1510, %582
  br i1 %1697, label %1936, label %1505

1698:                                             ; preds = %1383
  %1699 = add i32 %1365, -3
  %1700 = zext i32 %1699 to i64
  %1701 = getelementptr inbounds i32, i32* %379, i64 %1700
  %1702 = load i32, i32* %1701, align 4
  br label %1705

1703:                                             ; preds = %1383
  %1704 = load i32, i32* %402, align 4
  br i1 %1366, label %1711, label %1705

1705:                                             ; preds = %1703, %1698
  %1706 = phi i32 [ %1702, %1698 ], [ %1704, %1703 ]
  br i1 %1367, label %1707, label %1711

1707:                                             ; preds = %1705
  %1708 = or i32 %1368, 5
  %1709 = zext i32 %1708 to i64
  %1710 = getelementptr inbounds i32, i32* %379, i64 %1709
  br label %1711

1711:                                             ; preds = %1707, %1705, %1703
  %1712 = phi i32 [ %1706, %1707 ], [ %1704, %1703 ], [ %1706, %1705 ]
  %1713 = phi i32* [ %1710, %1707 ], [ %402, %1703 ], [ %822, %1705 ]
  %1714 = load i32, i32* %1713, align 4
  %1715 = add i32 %1712, 2
  %1716 = add i32 %1715, %1714
  %1717 = ashr i32 %1716, 2
  %1718 = or i64 %1370, 1
  %1719 = getelementptr inbounds i32, i32* %379, i64 %1718
  %1720 = load i32, i32* %1719, align 4
  %1721 = sub nsw i32 %1720, %1717
  store i32 %1721, i32* %1719, align 4
  br i1 %1362, label %1727, label %1722

1722:                                             ; preds = %1711
  %1723 = add i32 %1365, -2
  %1724 = zext i32 %1723 to i64
  %1725 = getelementptr inbounds i32, i32* %379, i64 %1724
  %1726 = load i32, i32* %1725, align 4
  br label %1729

1727:                                             ; preds = %1711
  %1728 = load i32, i32* %404, align 4
  br i1 %1366, label %1735, label %1729

1729:                                             ; preds = %1727, %1722
  %1730 = phi i32 [ %1726, %1722 ], [ %1728, %1727 ]
  br i1 %1367, label %1731, label %1735

1731:                                             ; preds = %1729
  %1732 = or i32 %1368, 6
  %1733 = zext i32 %1732 to i64
  %1734 = getelementptr inbounds i32, i32* %379, i64 %1733
  br label %1735

1735:                                             ; preds = %1731, %1729, %1727
  %1736 = phi i32 [ %1730, %1731 ], [ %1728, %1727 ], [ %1730, %1729 ]
  %1737 = phi i32* [ %1734, %1731 ], [ %404, %1727 ], [ %823, %1729 ]
  %1738 = load i32, i32* %1737, align 4
  %1739 = add i32 %1736, 2
  %1740 = add i32 %1739, %1738
  %1741 = ashr i32 %1740, 2
  %1742 = or i64 %1370, 2
  %1743 = getelementptr inbounds i32, i32* %379, i64 %1742
  %1744 = load i32, i32* %1743, align 4
  %1745 = sub nsw i32 %1744, %1741
  store i32 %1745, i32* %1743, align 4
  br i1 %1362, label %1751, label %1746

1746:                                             ; preds = %1735
  %1747 = add i32 %1365, -1
  %1748 = zext i32 %1747 to i64
  %1749 = getelementptr inbounds i32, i32* %379, i64 %1748
  %1750 = load i32, i32* %1749, align 4
  br label %1753

1751:                                             ; preds = %1735
  %1752 = load i32, i32* %406, align 4
  br i1 %1366, label %1759, label %1753

1753:                                             ; preds = %1751, %1746
  %1754 = phi i32 [ %1750, %1746 ], [ %1752, %1751 ]
  br i1 %1367, label %1755, label %1759

1755:                                             ; preds = %1753
  %1756 = or i32 %1368, 7
  %1757 = zext i32 %1756 to i64
  %1758 = getelementptr inbounds i32, i32* %379, i64 %1757
  br label %1759

1759:                                             ; preds = %1755, %1753, %1751
  %1760 = phi i32 [ %1754, %1755 ], [ %1752, %1751 ], [ %1754, %1753 ]
  %1761 = phi i32* [ %1758, %1755 ], [ %406, %1751 ], [ %824, %1753 ]
  %1762 = load i32, i32* %1761, align 4
  %1763 = add i32 %1760, 2
  %1764 = add i32 %1763, %1762
  %1765 = ashr i32 %1764, 2
  %1766 = or i64 %1370, 3
  %1767 = getelementptr inbounds i32, i32* %379, i64 %1766
  %1768 = load i32, i32* %1767, align 4
  %1769 = sub nsw i32 %1768, %1765
  store i32 %1769, i32* %1767, align 4
  %1770 = add nsw i32 %1361, 1
  %1771 = icmp eq i32 %1770, %572
  br i1 %1771, label %1393, label %1360

1772:                                             ; preds = %1226, %1207
  %1773 = phi i32 [ %1249, %1226 ], [ %1225, %1207 ]
  %1774 = phi i32 [ %1248, %1226 ], [ %1225, %1207 ]
  %1775 = add i32 %1773, 2
  %1776 = add i32 %1775, %1774
  %1777 = ashr i32 %1776, 2
  %1778 = load i32, i32* %810, align 4
  %1779 = sub nsw i32 %1778, %1777
  store i32 %1779, i32* %810, align 4
  br i1 %815, label %1250, label %1289

1780:                                             ; preds = %1604
  %1781 = or i64 %1592, 1
  %1782 = getelementptr inbounds i32, i32* %379, i64 %1781
  %1783 = load i32, i32* %1782, align 4
  %1784 = or i1 %1589, %1590
  %1785 = select i1 %1589, i32* %402, i32* %763
  br i1 %1784, label %1792, label %1786

1786:                                             ; preds = %1780
  %1787 = add i32 %1586, -3
  %1788 = zext i32 %1787 to i64
  %1789 = getelementptr inbounds i32, i32* %379, i64 %1788
  br label %1792

1790:                                             ; preds = %1604
  %1791 = load i32, i32* %402, align 4
  br label %1792

1792:                                             ; preds = %1790, %1786, %1780
  %1793 = phi i32 [ %1783, %1786 ], [ %1791, %1790 ], [ %1783, %1780 ]
  %1794 = phi i32* [ %1789, %1786 ], [ %402, %1790 ], [ %1785, %1780 ]
  %1795 = load i32, i32* %1794, align 4
  %1796 = add nsw i32 %1795, %1793
  %1797 = ashr i32 %1796, 1
  %1798 = or i64 %1591, 1
  %1799 = getelementptr inbounds i32, i32* %379, i64 %1798
  %1800 = load i32, i32* %1799, align 4
  %1801 = add nsw i32 %1797, %1800
  store i32 %1801, i32* %1799, align 4
  br i1 %1584, label %1812, label %1802

1802:                                             ; preds = %1792
  %1803 = or i64 %1592, 2
  %1804 = getelementptr inbounds i32, i32* %379, i64 %1803
  %1805 = load i32, i32* %1804, align 4
  %1806 = or i1 %1589, %1590
  %1807 = select i1 %1589, i32* %404, i32* %766
  br i1 %1806, label %1814, label %1808

1808:                                             ; preds = %1802
  %1809 = add i32 %1586, -2
  %1810 = zext i32 %1809 to i64
  %1811 = getelementptr inbounds i32, i32* %379, i64 %1810
  br label %1814

1812:                                             ; preds = %1792
  %1813 = load i32, i32* %404, align 4
  br label %1814

1814:                                             ; preds = %1812, %1808, %1802
  %1815 = phi i32 [ %1805, %1808 ], [ %1813, %1812 ], [ %1805, %1802 ]
  %1816 = phi i32* [ %1811, %1808 ], [ %404, %1812 ], [ %1807, %1802 ]
  %1817 = load i32, i32* %1816, align 4
  %1818 = add nsw i32 %1817, %1815
  %1819 = ashr i32 %1818, 1
  %1820 = or i64 %1591, 2
  %1821 = getelementptr inbounds i32, i32* %379, i64 %1820
  %1822 = load i32, i32* %1821, align 4
  %1823 = add nsw i32 %1819, %1822
  store i32 %1823, i32* %1821, align 4
  br i1 %1584, label %1834, label %1824

1824:                                             ; preds = %1814
  %1825 = or i64 %1592, 3
  %1826 = getelementptr inbounds i32, i32* %379, i64 %1825
  %1827 = load i32, i32* %1826, align 4
  %1828 = or i1 %1589, %1590
  %1829 = select i1 %1589, i32* %406, i32* %769
  br i1 %1828, label %1836, label %1830

1830:                                             ; preds = %1824
  %1831 = add i32 %1586, -1
  %1832 = zext i32 %1831 to i64
  %1833 = getelementptr inbounds i32, i32* %379, i64 %1832
  br label %1836

1834:                                             ; preds = %1814
  %1835 = load i32, i32* %406, align 4
  br label %1836

1836:                                             ; preds = %1834, %1830, %1824
  %1837 = phi i32 [ %1827, %1830 ], [ %1835, %1834 ], [ %1827, %1824 ]
  %1838 = phi i32* [ %1833, %1830 ], [ %406, %1834 ], [ %1829, %1824 ]
  %1839 = load i32, i32* %1838, align 4
  %1840 = add nsw i32 %1839, %1837
  %1841 = ashr i32 %1840, 1
  %1842 = or i64 %1591, 3
  %1843 = getelementptr inbounds i32, i32* %379, i64 %1842
  %1844 = load i32, i32* %1843, align 4
  %1845 = add nsw i32 %1841, %1844
  store i32 %1845, i32* %1843, align 4
  %1846 = add nsw i32 %1583, 1
  %1847 = icmp eq i32 %1846, %582
  br i1 %1847, label %1936, label %1582

1848:                                             ; preds = %1571
  %1849 = or i64 %1553, 1
  %1850 = getelementptr inbounds i32, i32* %379, i64 %1849
  %1851 = load i32, i32* %1850, align 4
  br label %1857

1852:                                             ; preds = %1571
  %1853 = select i1 %1547, i32 1, i32 %747
  %1854 = zext i32 %1853 to i64
  %1855 = getelementptr inbounds i32, i32* %379, i64 %1854
  %1856 = load i32, i32* %1855, align 4
  br i1 %1551, label %1865, label %1857

1857:                                             ; preds = %1852, %1848
  %1858 = phi i32 [ %1851, %1848 ], [ %1856, %1852 ]
  %1859 = icmp slt i32 %1550, %428
  br i1 %1859, label %1860, label %1865

1860:                                             ; preds = %1857
  %1861 = shl i32 %1550, 3
  %1862 = or i32 %1861, 1
  %1863 = zext i32 %1862 to i64
  %1864 = getelementptr inbounds i32, i32* %379, i64 %1863
  br label %1865

1865:                                             ; preds = %1860, %1857, %1852
  %1866 = phi i32 [ %1858, %1860 ], [ %1858, %1857 ], [ %1856, %1852 ]
  %1867 = phi i32* [ %1864, %1860 ], [ %749, %1857 ], [ %394, %1852 ]
  %1868 = load i32, i32* %1867, align 4
  %1869 = add i32 %1866, 2
  %1870 = add i32 %1869, %1868
  %1871 = ashr i32 %1870, 2
  %1872 = or i32 %1549, 5
  %1873 = zext i32 %1872 to i64
  %1874 = getelementptr inbounds i32, i32* %379, i64 %1873
  %1875 = load i32, i32* %1874, align 4
  %1876 = sub nsw i32 %1875, %1871
  store i32 %1876, i32* %1874, align 4
  br i1 %1554, label %1881, label %1877

1877:                                             ; preds = %1865
  %1878 = or i64 %1553, 2
  %1879 = getelementptr inbounds i32, i32* %379, i64 %1878
  %1880 = load i32, i32* %1879, align 4
  br label %1886

1881:                                             ; preds = %1865
  %1882 = select i1 %1547, i32 2, i32 %750
  %1883 = zext i32 %1882 to i64
  %1884 = getelementptr inbounds i32, i32* %379, i64 %1883
  %1885 = load i32, i32* %1884, align 4
  br i1 %1551, label %1894, label %1886

1886:                                             ; preds = %1881, %1877
  %1887 = phi i32 [ %1880, %1877 ], [ %1885, %1881 ]
  %1888 = icmp slt i32 %1550, %428
  br i1 %1888, label %1889, label %1894

1889:                                             ; preds = %1886
  %1890 = shl i32 %1550, 3
  %1891 = or i32 %1890, 2
  %1892 = zext i32 %1891 to i64
  %1893 = getelementptr inbounds i32, i32* %379, i64 %1892
  br label %1894

1894:                                             ; preds = %1889, %1886, %1881
  %1895 = phi i32 [ %1887, %1889 ], [ %1887, %1886 ], [ %1885, %1881 ]
  %1896 = phi i32* [ %1893, %1889 ], [ %752, %1886 ], [ %396, %1881 ]
  %1897 = load i32, i32* %1896, align 4
  %1898 = add i32 %1895, 2
  %1899 = add i32 %1898, %1897
  %1900 = ashr i32 %1899, 2
  %1901 = or i32 %1549, 6
  %1902 = zext i32 %1901 to i64
  %1903 = getelementptr inbounds i32, i32* %379, i64 %1902
  %1904 = load i32, i32* %1903, align 4
  %1905 = sub nsw i32 %1904, %1900
  store i32 %1905, i32* %1903, align 4
  br i1 %1554, label %1910, label %1906

1906:                                             ; preds = %1894
  %1907 = or i64 %1553, 3
  %1908 = getelementptr inbounds i32, i32* %379, i64 %1907
  %1909 = load i32, i32* %1908, align 4
  br label %1915

1910:                                             ; preds = %1894
  %1911 = select i1 %1547, i32 3, i32 %753
  %1912 = zext i32 %1911 to i64
  %1913 = getelementptr inbounds i32, i32* %379, i64 %1912
  %1914 = load i32, i32* %1913, align 4
  br i1 %1551, label %1923, label %1915

1915:                                             ; preds = %1910, %1906
  %1916 = phi i32 [ %1909, %1906 ], [ %1914, %1910 ]
  %1917 = icmp slt i32 %1550, %428
  br i1 %1917, label %1918, label %1923

1918:                                             ; preds = %1915
  %1919 = shl i32 %1550, 3
  %1920 = or i32 %1919, 3
  %1921 = zext i32 %1920 to i64
  %1922 = getelementptr inbounds i32, i32* %379, i64 %1921
  br label %1923

1923:                                             ; preds = %1918, %1915, %1910
  %1924 = phi i32 [ %1916, %1918 ], [ %1916, %1915 ], [ %1914, %1910 ]
  %1925 = phi i32* [ %1922, %1918 ], [ %755, %1915 ], [ %398, %1910 ]
  %1926 = load i32, i32* %1925, align 4
  %1927 = add i32 %1924, 2
  %1928 = add i32 %1927, %1926
  %1929 = ashr i32 %1928, 2
  %1930 = or i32 %1549, 7
  %1931 = zext i32 %1930 to i64
  %1932 = getelementptr inbounds i32, i32* %379, i64 %1931
  %1933 = load i32, i32* %1932, align 4
  %1934 = sub nsw i32 %1933, %1929
  store i32 %1934, i32* %1932, align 4
  %1935 = icmp eq i32 %1550, %572
  br i1 %1935, label %1555, label %1545

1936:                                             ; preds = %1836, %1686, %1555, %1541, %1502, %1393, %1200
  %1937 = tail call i32 @opj_sparse_array_int32_write(%struct.opj_sparse_array_int32* nonnull %287, i32 %1191, i32 %636, i32 %1197, i32 %638, i32* %849, i32 1, i32 4, i32 1) #10
  %1938 = icmp eq i32 %1937, 0
  br i1 %1938, label %1939, label %1190

1939:                                             ; preds = %1936
  tail call void @opj_sparse_array_int32_free(%struct.opj_sparse_array_int32* nonnull %287) #10
  tail call void @opj_aligned_free(i8* nonnull %378) #10
  br label %1962

1940:                                             ; preds = %1190
  %1941 = add nuw i32 %414, 1
  %1942 = icmp eq i32 %1941, %2
  br i1 %1942, label %1943, label %410

1943:                                             ; preds = %1940, %381
  tail call void @opj_aligned_free(i8* nonnull %378) #10
  %1944 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %254, i64 %256, i32 8
  %1945 = load i32, i32* %1944, align 8
  %1946 = load i32, i32* %275, align 8
  %1947 = sub i32 %1945, %1946
  %1948 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %254, i64 %256, i32 9
  %1949 = load i32, i32* %1948, align 4
  %1950 = load i32, i32* %281, align 4
  %1951 = sub i32 %1949, %1950
  %1952 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %254, i64 %256, i32 10
  %1953 = load i32, i32* %1952, align 8
  %1954 = sub i32 %1953, %1946
  %1955 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %254, i64 %256, i32 11
  %1956 = load i32, i32* %1955, align 4
  %1957 = sub i32 %1956, %1950
  %1958 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 13
  %1959 = load i32*, i32** %1958, align 8
  %1960 = sub i32 %1953, %1945
  %1961 = tail call i32 @opj_sparse_array_int32_read(%struct.opj_sparse_array_int32* nonnull %287, i32 %1947, i32 %1951, i32 %1954, i32 %1957, i32* %1959, i32 1, i32 %1960, i32 1) #10
  tail call void @opj_sparse_array_int32_free(%struct.opj_sparse_array_int32* nonnull %287) #10
  br label %1962

1962:                                             ; preds = %1943, %1939, %1186, %409, %291, %286, %280, %252, %250
  %1963 = phi i32 [ %251, %250 ], [ 1, %291 ], [ 1, %1943 ], [ 0, %409 ], [ 1, %280 ], [ 1, %252 ], [ 0, %286 ], [ 0, %1186 ], [ 0, %1939 ]
  ret i32 %1963
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden double @opj_dwt_getnorm(i32, i32) local_unnamed_addr #3 {
  %3 = icmp eq i32 %1, 0
  %4 = icmp ugt i32 %0, 9
  %5 = and i1 %4, %3
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = icmp ne i32 %1, 0
  %8 = icmp ugt i32 %0, 8
  %9 = and i1 %8, %7
  %10 = zext i32 %0 to i64
  %11 = select i1 %9, i64 8, i64 %10
  br label %12

12:                                               ; preds = %6, %2
  %13 = phi i64 [ 9, %2 ], [ %11, %6 ]
  %14 = zext i32 %1 to i64
  %15 = getelementptr inbounds [4 x [10 x double]], [4 x [10 x double]]* @opj_dwt_norms, i64 0, i64 %14, i64 %13
  %16 = load double, double* %15, align 8
  ret double %16
}

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_dwt_encode_real(%struct.opj_tcd* nocapture readonly, %struct.opj_tcd_tilecomp* nocapture readonly) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 11
  %4 = load %struct.opj_thread_pool_t*, %struct.opj_thread_pool_t** %3, align 8
  %5 = tail call fastcc i32 @opj_dwt_encode_procedure(%struct.opj_thread_pool_t* %4, %struct.opj_tcd_tilecomp* %1, void (i8*, i8*, i32, i32, i32, i32)* nonnull @opj_dwt_encode_and_deinterleave_v_real, void (i8*, i8*, i32, i32)* nonnull @opj_dwt_encode_and_deinterleave_h_one_row_real)
  ret i32 %5
}

; Function Attrs: nounwind ssp uwtable
define internal void @opj_dwt_encode_and_deinterleave_v_real(i8* nocapture, i8* nocapture, i32, i32, i32, i32) #2 {
  %7 = bitcast i8* %1 to float*
  %8 = icmp ne i32 %3, 0
  %9 = zext i1 %8 to i32
  %10 = add i32 %9, %2
  %11 = lshr i32 %10, 1
  %12 = sub i32 %2, %11
  %13 = icmp eq i32 %2, 1
  br i1 %13, label %820, label %14

14:                                               ; preds = %6
  %15 = bitcast i8* %0 to i32*
  %16 = bitcast i8* %1 to i32*
  %17 = icmp eq i32 %5, 8
  %18 = icmp ne i32 %2, 0
  br i1 %17, label %60, label %19

19:                                               ; preds = %14
  br i1 %18, label %20, label %365

20:                                               ; preds = %19
  %21 = icmp eq i32 %5, 0
  %22 = zext i32 %5 to i64
  %23 = icmp ult i32 %5, 8
  %24 = sub nsw i64 8, %22
  %25 = sub nsw i64 7, %22
  %26 = add nsw i64 %22, -1
  %27 = shl nuw nsw i64 %22, 2
  %28 = getelementptr i8, i8* %1, i64 %27
  %29 = getelementptr i8, i8* %0, i64 %27
  %30 = and i64 %22, 4294967288
  %31 = add nsw i64 %30, -8
  %32 = lshr exact i64 %31, 3
  %33 = add nuw nsw i64 %32, 1
  %34 = sub nsw i64 0, %22
  %35 = lshr i64 %34, 3
  %36 = add nuw nsw i64 %35, 1
  %37 = icmp ult i32 %5, 8
  %38 = trunc i64 %26 to i32
  %39 = icmp ugt i64 %26, 4294967295
  %40 = trunc i64 %26 to i32
  %41 = icmp ugt i64 %26, 4294967295
  %42 = and i64 %22, 4294967288
  %43 = and i64 %33, 1
  %44 = icmp eq i64 %31, 0
  %45 = sub nuw nsw i64 %33, %43
  %46 = icmp eq i64 %43, 0
  %47 = icmp eq i64 %42, %22
  %48 = and i64 %22, 3
  %49 = icmp eq i64 %48, 0
  %50 = icmp ult i64 %24, 8
  %51 = trunc i64 %25 to i32
  %52 = icmp ugt i64 %25, 4294967295
  %53 = and i64 %24, -8
  %54 = add nsw i64 %53, %22
  %55 = and i64 %36, 3
  %56 = icmp ult i64 %34, 24
  %57 = sub nsw i64 %36, %55
  %58 = icmp eq i64 %55, 0
  %59 = icmp eq i64 %24, %53
  br label %92

60:                                               ; preds = %14
  br i1 %18, label %61, label %365

61:                                               ; preds = %60
  %62 = zext i32 %2 to i64
  %63 = and i64 %62, 1
  %64 = icmp eq i32 %2, 1
  br i1 %64, label %352, label %65

65:                                               ; preds = %61
  %66 = sub nsw i64 %62, %63
  br label %67

67:                                               ; preds = %67, %65
  %68 = phi i64 [ 0, %65 ], [ %89, %67 ]
  %69 = phi i64 [ %66, %65 ], [ %90, %67 ]
  %70 = trunc i64 %68 to i32
  %71 = shl i64 %68, 3
  %72 = and i64 %71, 4294967280
  %73 = getelementptr inbounds i32, i32* %16, i64 %72
  %74 = bitcast i32* %73 to i8*
  %75 = mul i32 %70, %4
  %76 = zext i32 %75 to i64
  %77 = getelementptr inbounds i32, i32* %15, i64 %76
  %78 = bitcast i32* %77 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %74, i8* align 4 %78, i64 32, i1 false) #10
  %79 = or i64 %68, 1
  %80 = trunc i64 %79 to i32
  %81 = shl i64 %79, 3
  %82 = and i64 %81, 4294967288
  %83 = getelementptr inbounds i32, i32* %16, i64 %82
  %84 = bitcast i32* %83 to i8*
  %85 = mul i32 %80, %4
  %86 = zext i32 %85 to i64
  %87 = getelementptr inbounds i32, i32* %15, i64 %86
  %88 = bitcast i32* %87 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %84, i8* align 4 %88, i64 32, i1 false) #10
  %89 = add nuw nsw i64 %68, 2
  %90 = add i64 %69, -2
  %91 = icmp eq i64 %90, 0
  br i1 %91, label %352, label %67

92:                                               ; preds = %349, %20
  %93 = phi i32 [ 0, %20 ], [ %350, %349 ]
  %94 = shl i32 %93, 3
  %95 = zext i32 %94 to i64
  %96 = shl nuw nsw i64 %95, 2
  %97 = getelementptr i8, i8* %1, i64 %96
  %98 = getelementptr i8, i8* %28, i64 %96
  %99 = mul i32 %93, %4
  %100 = zext i32 %99 to i64
  %101 = shl nuw nsw i64 %100, 2
  %102 = getelementptr i8, i8* %0, i64 %101
  %103 = getelementptr i8, i8* %29, i64 %101
  %104 = shl i32 %93, 3
  %105 = mul i32 %93, %4
  br i1 %21, label %106, label %108

106:                                              ; preds = %92
  %107 = shl i32 %93, 3
  br label %202

108:                                              ; preds = %92
  %109 = mul i32 %93, %4
  %110 = shl i32 %93, 3
  br i1 %37, label %111, label %132

111:                                              ; preds = %200, %140, %132, %108
  %112 = phi i64 [ 0, %140 ], [ 0, %132 ], [ 0, %108 ], [ %42, %200 ]
  %113 = xor i64 %112, -1
  %114 = add nsw i64 %113, %22
  br i1 %49, label %129, label %115

115:                                              ; preds = %111, %115
  %116 = phi i64 [ %126, %115 ], [ %112, %111 ]
  %117 = phi i64 [ %127, %115 ], [ %48, %111 ]
  %118 = trunc i64 %116 to i32
  %119 = add i32 %109, %118
  %120 = zext i32 %119 to i64
  %121 = getelementptr inbounds i32, i32* %15, i64 %120
  %122 = load i32, i32* %121, align 4
  %123 = add i32 %110, %118
  %124 = zext i32 %123 to i64
  %125 = getelementptr inbounds i32, i32* %16, i64 %124
  store i32 %122, i32* %125, align 4
  %126 = add nuw nsw i64 %116, 1
  %127 = add i64 %117, -1
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %129, label %115, !llvm.loop !40

129:                                              ; preds = %115, %111
  %130 = phi i64 [ %112, %111 ], [ %126, %115 ]
  %131 = icmp ult i64 %114, 3
  br i1 %131, label %201, label %287

132:                                              ; preds = %108
  %133 = xor i32 %104, -1
  %134 = icmp ult i32 %133, %38
  %135 = or i1 %134, %39
  %136 = xor i32 %105, -1
  %137 = icmp ult i32 %136, %40
  %138 = or i1 %137, %41
  %139 = or i1 %135, %138
  br i1 %139, label %111, label %140

140:                                              ; preds = %132
  %141 = icmp ult i8* %97, %103
  %142 = icmp ult i8* %102, %98
  %143 = and i1 %141, %142
  br i1 %143, label %111, label %144

144:                                              ; preds = %140
  br i1 %44, label %182, label %145

145:                                              ; preds = %144, %145
  %146 = phi i64 [ %179, %145 ], [ 0, %144 ]
  %147 = phi i64 [ %180, %145 ], [ %45, %144 ]
  %148 = trunc i64 %146 to i32
  %149 = add i32 %109, %148
  %150 = zext i32 %149 to i64
  %151 = getelementptr inbounds i32, i32* %15, i64 %150
  %152 = bitcast i32* %151 to <4 x i32>*
  %153 = load <4 x i32>, <4 x i32>* %152, align 4, !alias.scope !41
  %154 = getelementptr inbounds i32, i32* %151, i64 4
  %155 = bitcast i32* %154 to <4 x i32>*
  %156 = load <4 x i32>, <4 x i32>* %155, align 4, !alias.scope !41
  %157 = add i32 %110, %148
  %158 = zext i32 %157 to i64
  %159 = getelementptr inbounds i32, i32* %16, i64 %158
  %160 = bitcast i32* %159 to <4 x i32>*
  store <4 x i32> %153, <4 x i32>* %160, align 4, !alias.scope !44, !noalias !41
  %161 = getelementptr inbounds i32, i32* %159, i64 4
  %162 = bitcast i32* %161 to <4 x i32>*
  store <4 x i32> %156, <4 x i32>* %162, align 4, !alias.scope !44, !noalias !41
  %163 = trunc i64 %146 to i32
  %164 = or i32 %163, 8
  %165 = add i32 %109, %164
  %166 = zext i32 %165 to i64
  %167 = getelementptr inbounds i32, i32* %15, i64 %166
  %168 = bitcast i32* %167 to <4 x i32>*
  %169 = load <4 x i32>, <4 x i32>* %168, align 4, !alias.scope !41
  %170 = getelementptr inbounds i32, i32* %167, i64 4
  %171 = bitcast i32* %170 to <4 x i32>*
  %172 = load <4 x i32>, <4 x i32>* %171, align 4, !alias.scope !41
  %173 = add i32 %110, %164
  %174 = zext i32 %173 to i64
  %175 = getelementptr inbounds i32, i32* %16, i64 %174
  %176 = bitcast i32* %175 to <4 x i32>*
  store <4 x i32> %169, <4 x i32>* %176, align 4, !alias.scope !44, !noalias !41
  %177 = getelementptr inbounds i32, i32* %175, i64 4
  %178 = bitcast i32* %177 to <4 x i32>*
  store <4 x i32> %172, <4 x i32>* %178, align 4, !alias.scope !44, !noalias !41
  %179 = add i64 %146, 16
  %180 = add i64 %147, -2
  %181 = icmp eq i64 %180, 0
  br i1 %181, label %182, label %145, !llvm.loop !46

182:                                              ; preds = %145, %144
  %183 = phi i64 [ 0, %144 ], [ %179, %145 ]
  br i1 %46, label %200, label %184

184:                                              ; preds = %182
  %185 = trunc i64 %183 to i32
  %186 = add i32 %109, %185
  %187 = zext i32 %186 to i64
  %188 = getelementptr inbounds i32, i32* %15, i64 %187
  %189 = bitcast i32* %188 to <4 x i32>*
  %190 = load <4 x i32>, <4 x i32>* %189, align 4, !alias.scope !41
  %191 = getelementptr inbounds i32, i32* %188, i64 4
  %192 = bitcast i32* %191 to <4 x i32>*
  %193 = load <4 x i32>, <4 x i32>* %192, align 4, !alias.scope !41
  %194 = add i32 %110, %185
  %195 = zext i32 %194 to i64
  %196 = getelementptr inbounds i32, i32* %16, i64 %195
  %197 = bitcast i32* %196 to <4 x i32>*
  store <4 x i32> %190, <4 x i32>* %197, align 4, !alias.scope !44, !noalias !41
  %198 = getelementptr inbounds i32, i32* %196, i64 4
  %199 = bitcast i32* %198 to <4 x i32>*
  store <4 x i32> %193, <4 x i32>* %199, align 4, !alias.scope !44, !noalias !41
  br label %200

200:                                              ; preds = %182, %184
  br i1 %47, label %201, label %111

201:                                              ; preds = %129, %287, %200
  br i1 %23, label %202, label %349

202:                                              ; preds = %106, %201
  %203 = phi i32 [ %107, %106 ], [ %110, %201 ]
  br i1 %50, label %204, label %223

204:                                              ; preds = %286, %223, %202
  %205 = phi i64 [ %22, %223 ], [ %22, %202 ], [ %54, %286 ]
  %206 = sub nsw i64 0, %205
  %207 = sub nsw i64 7, %205
  %208 = and i64 %206, 3
  %209 = icmp eq i64 %208, 0
  br i1 %209, label %220, label %210

210:                                              ; preds = %204, %210
  %211 = phi i64 [ %217, %210 ], [ %205, %204 ]
  %212 = phi i64 [ %218, %210 ], [ %208, %204 ]
  %213 = trunc i64 %211 to i32
  %214 = add i32 %203, %213
  %215 = zext i32 %214 to i64
  %216 = getelementptr inbounds i32, i32* %16, i64 %215
  store i32 0, i32* %216, align 4
  %217 = add nuw nsw i64 %211, 1
  %218 = add i64 %212, -1
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %220, label %210, !llvm.loop !47

220:                                              ; preds = %210, %204
  %221 = phi i64 [ %205, %204 ], [ %217, %210 ]
  %222 = icmp ult i64 %207, 3
  br i1 %222, label %349, label %326

223:                                              ; preds = %202
  %224 = add i32 %203, %5
  %225 = xor i32 %224, -1
  %226 = icmp ult i32 %225, %51
  %227 = or i1 %226, %52
  br i1 %227, label %204, label %228

228:                                              ; preds = %223
  br i1 %56, label %270, label %229

229:                                              ; preds = %228, %229
  %230 = phi i64 [ %267, %229 ], [ 0, %228 ]
  %231 = phi i64 [ %268, %229 ], [ %57, %228 ]
  %232 = trunc i64 %230 to i32
  %233 = add i32 %232, %5
  %234 = add i32 %203, %233
  %235 = zext i32 %234 to i64
  %236 = getelementptr inbounds i32, i32* %16, i64 %235
  %237 = bitcast i32* %236 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %237, align 4
  %238 = getelementptr inbounds i32, i32* %236, i64 4
  %239 = bitcast i32* %238 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %239, align 4
  %240 = trunc i64 %230 to i32
  %241 = or i32 %240, 8
  %242 = add i32 %241, %5
  %243 = add i32 %203, %242
  %244 = zext i32 %243 to i64
  %245 = getelementptr inbounds i32, i32* %16, i64 %244
  %246 = bitcast i32* %245 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %246, align 4
  %247 = getelementptr inbounds i32, i32* %245, i64 4
  %248 = bitcast i32* %247 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %248, align 4
  %249 = trunc i64 %230 to i32
  %250 = or i32 %249, 16
  %251 = add i32 %250, %5
  %252 = add i32 %203, %251
  %253 = zext i32 %252 to i64
  %254 = getelementptr inbounds i32, i32* %16, i64 %253
  %255 = bitcast i32* %254 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %255, align 4
  %256 = getelementptr inbounds i32, i32* %254, i64 4
  %257 = bitcast i32* %256 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %257, align 4
  %258 = trunc i64 %230 to i32
  %259 = or i32 %258, 24
  %260 = add i32 %259, %5
  %261 = add i32 %203, %260
  %262 = zext i32 %261 to i64
  %263 = getelementptr inbounds i32, i32* %16, i64 %262
  %264 = bitcast i32* %263 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %264, align 4
  %265 = getelementptr inbounds i32, i32* %263, i64 4
  %266 = bitcast i32* %265 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %266, align 4
  %267 = add i64 %230, 32
  %268 = add i64 %231, -4
  %269 = icmp eq i64 %268, 0
  br i1 %269, label %270, label %229, !llvm.loop !48

270:                                              ; preds = %229, %228
  %271 = phi i64 [ 0, %228 ], [ %267, %229 ]
  br i1 %58, label %286, label %272

272:                                              ; preds = %270, %272
  %273 = phi i64 [ %283, %272 ], [ %271, %270 ]
  %274 = phi i64 [ %284, %272 ], [ %55, %270 ]
  %275 = trunc i64 %273 to i32
  %276 = add i32 %275, %5
  %277 = add i32 %203, %276
  %278 = zext i32 %277 to i64
  %279 = getelementptr inbounds i32, i32* %16, i64 %278
  %280 = bitcast i32* %279 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %280, align 4
  %281 = getelementptr inbounds i32, i32* %279, i64 4
  %282 = bitcast i32* %281 to <4 x i32>*
  store <4 x i32> zeroinitializer, <4 x i32>* %282, align 4
  %283 = add i64 %273, 8
  %284 = add i64 %274, -1
  %285 = icmp eq i64 %284, 0
  br i1 %285, label %286, label %272, !llvm.loop !49

286:                                              ; preds = %272, %270
  br i1 %59, label %349, label %204

287:                                              ; preds = %129, %287
  %288 = phi i64 [ %324, %287 ], [ %130, %129 ]
  %289 = trunc i64 %288 to i32
  %290 = add i32 %109, %289
  %291 = zext i32 %290 to i64
  %292 = getelementptr inbounds i32, i32* %15, i64 %291
  %293 = load i32, i32* %292, align 4
  %294 = add i32 %110, %289
  %295 = zext i32 %294 to i64
  %296 = getelementptr inbounds i32, i32* %16, i64 %295
  store i32 %293, i32* %296, align 4
  %297 = trunc i64 %288 to i32
  %298 = add i32 %297, 1
  %299 = add i32 %109, %298
  %300 = zext i32 %299 to i64
  %301 = getelementptr inbounds i32, i32* %15, i64 %300
  %302 = load i32, i32* %301, align 4
  %303 = add i32 %110, %298
  %304 = zext i32 %303 to i64
  %305 = getelementptr inbounds i32, i32* %16, i64 %304
  store i32 %302, i32* %305, align 4
  %306 = trunc i64 %288 to i32
  %307 = add i32 %306, 2
  %308 = add i32 %109, %307
  %309 = zext i32 %308 to i64
  %310 = getelementptr inbounds i32, i32* %15, i64 %309
  %311 = load i32, i32* %310, align 4
  %312 = add i32 %110, %307
  %313 = zext i32 %312 to i64
  %314 = getelementptr inbounds i32, i32* %16, i64 %313
  store i32 %311, i32* %314, align 4
  %315 = trunc i64 %288 to i32
  %316 = add i32 %315, 3
  %317 = add i32 %109, %316
  %318 = zext i32 %317 to i64
  %319 = getelementptr inbounds i32, i32* %15, i64 %318
  %320 = load i32, i32* %319, align 4
  %321 = add i32 %110, %316
  %322 = zext i32 %321 to i64
  %323 = getelementptr inbounds i32, i32* %16, i64 %322
  store i32 %320, i32* %323, align 4
  %324 = add nuw nsw i64 %288, 4
  %325 = icmp eq i64 %324, %22
  br i1 %325, label %201, label %287, !llvm.loop !50

326:                                              ; preds = %220, %326
  %327 = phi i64 [ %347, %326 ], [ %221, %220 ]
  %328 = trunc i64 %327 to i32
  %329 = add i32 %203, %328
  %330 = zext i32 %329 to i64
  %331 = getelementptr inbounds i32, i32* %16, i64 %330
  store i32 0, i32* %331, align 4
  %332 = trunc i64 %327 to i32
  %333 = add i32 %332, 1
  %334 = add i32 %203, %333
  %335 = zext i32 %334 to i64
  %336 = getelementptr inbounds i32, i32* %16, i64 %335
  store i32 0, i32* %336, align 4
  %337 = trunc i64 %327 to i32
  %338 = add i32 %337, 2
  %339 = add i32 %203, %338
  %340 = zext i32 %339 to i64
  %341 = getelementptr inbounds i32, i32* %16, i64 %340
  store i32 0, i32* %341, align 4
  %342 = trunc i64 %327 to i32
  %343 = add i32 %342, 3
  %344 = add i32 %203, %343
  %345 = zext i32 %344 to i64
  %346 = getelementptr inbounds i32, i32* %16, i64 %345
  store i32 0, i32* %346, align 4
  %347 = add nuw nsw i64 %327, 4
  %348 = icmp eq i64 %347, 8
  br i1 %348, label %349, label %326, !llvm.loop !51

349:                                              ; preds = %220, %326, %286, %201
  %350 = add nuw i32 %93, 1
  %351 = icmp eq i32 %350, %2
  br i1 %351, label %365, label %92

352:                                              ; preds = %67, %61
  %353 = phi i64 [ 0, %61 ], [ %89, %67 ]
  %354 = icmp eq i64 %63, 0
  br i1 %354, label %365, label %355

355:                                              ; preds = %352
  %356 = trunc i64 %353 to i32
  %357 = shl i64 %353, 3
  %358 = and i64 %357, 4294967288
  %359 = getelementptr inbounds i32, i32* %16, i64 %358
  %360 = bitcast i32* %359 to i8*
  %361 = mul i32 %356, %4
  %362 = zext i32 %361 to i64
  %363 = getelementptr inbounds i32, i32* %15, i64 %362
  %364 = bitcast i32* %363 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %360, i8* align 4 %364, i64 32, i1 false) #10
  br label %365

365:                                              ; preds = %349, %355, %352, %19, %60
  %366 = xor i1 %8, true
  %367 = zext i1 %366 to i32
  %368 = shl nuw nsw i32 %367, 3
  %369 = zext i32 %368 to i64
  %370 = getelementptr inbounds float, float* %7, i64 %369
  %371 = shl nuw nsw i32 %9, 3
  %372 = add nuw nsw i32 %371, 8
  %373 = zext i32 %372 to i64
  %374 = getelementptr inbounds float, float* %7, i64 %373
  %375 = sub nsw i32 %11, %9
  %376 = icmp slt i32 %12, %375
  %377 = select i1 %376, i32 %12, i32 %375
  %378 = icmp ult i32 %12, %377
  %379 = select i1 %378, i32 %12, i32 %377
  %380 = bitcast float* %374 to <4 x float>*
  %381 = icmp eq i32 %379, 0
  br i1 %381, label %430, label %382

382:                                              ; preds = %365
  %383 = bitcast float* %370 to <4 x float>*
  %384 = getelementptr inbounds float, float* %374, i64 -8
  %385 = bitcast float* %384 to <4 x float>*
  %386 = load <4 x float>, <4 x float>* %385, align 16
  %387 = load <4 x float>, <4 x float>* %383, align 16
  %388 = load <4 x float>, <4 x float>* %380, align 16
  %389 = fadd <4 x float> %387, %388
  %390 = fmul <4 x float> %389, <float 0xBFF960CE60000000, float 0xBFF960CE60000000, float 0xBFF960CE60000000, float 0xBFF960CE60000000>
  %391 = fadd <4 x float> %386, %390
  store <4 x float> %391, <4 x float>* %385, align 16
  %392 = getelementptr inbounds float, float* %374, i64 -4
  %393 = bitcast float* %392 to <4 x float>*
  %394 = load <4 x float>, <4 x float>* %393, align 16
  %395 = getelementptr inbounds float, float* %370, i64 4
  %396 = bitcast float* %395 to <4 x float>*
  %397 = load <4 x float>, <4 x float>* %396, align 16
  %398 = getelementptr inbounds float, float* %374, i64 4
  %399 = bitcast float* %398 to <4 x float>*
  %400 = load <4 x float>, <4 x float>* %399, align 16
  %401 = fadd <4 x float> %397, %400
  %402 = fmul <4 x float> %401, <float 0xBFF960CE60000000, float 0xBFF960CE60000000, float 0xBFF960CE60000000, float 0xBFF960CE60000000>
  %403 = fadd <4 x float> %394, %402
  store <4 x float> %403, <4 x float>* %393, align 16
  %404 = getelementptr inbounds float, float* %374, i64 16
  %405 = bitcast float* %404 to <4 x float>*
  %406 = icmp eq i32 %379, 1
  br i1 %406, label %430, label %407

407:                                              ; preds = %382, %407
  %408 = phi i32 [ %428, %407 ], [ 1, %382 ]
  %409 = phi <4 x float>* [ %427, %407 ], [ %405, %382 ]
  %410 = getelementptr inbounds <4 x float>, <4 x float>* %409, i64 -2
  %411 = load <4 x float>, <4 x float>* %410, align 16
  %412 = getelementptr inbounds <4 x float>, <4 x float>* %409, i64 -4
  %413 = load <4 x float>, <4 x float>* %412, align 16
  %414 = load <4 x float>, <4 x float>* %409, align 16
  %415 = fadd <4 x float> %413, %414
  %416 = fmul <4 x float> %415, <float 0xBFF960CE60000000, float 0xBFF960CE60000000, float 0xBFF960CE60000000, float 0xBFF960CE60000000>
  %417 = fadd <4 x float> %411, %416
  store <4 x float> %417, <4 x float>* %410, align 16
  %418 = getelementptr inbounds <4 x float>, <4 x float>* %409, i64 -1
  %419 = load <4 x float>, <4 x float>* %418, align 16
  %420 = getelementptr inbounds <4 x float>, <4 x float>* %409, i64 -3
  %421 = load <4 x float>, <4 x float>* %420, align 16
  %422 = getelementptr inbounds <4 x float>, <4 x float>* %409, i64 1
  %423 = load <4 x float>, <4 x float>* %422, align 16
  %424 = fadd <4 x float> %421, %423
  %425 = fmul <4 x float> %424, <float 0xBFF960CE60000000, float 0xBFF960CE60000000, float 0xBFF960CE60000000, float 0xBFF960CE60000000>
  %426 = fadd <4 x float> %419, %425
  store <4 x float> %426, <4 x float>* %418, align 16
  %427 = getelementptr inbounds <4 x float>, <4 x float>* %409, i64 4
  %428 = add nuw i32 %408, 1
  %429 = icmp ult i32 %428, %379
  br i1 %429, label %407, label %430

430:                                              ; preds = %407, %382, %365
  %431 = phi <4 x float>* [ %380, %365 ], [ %405, %382 ], [ %427, %407 ]
  %432 = icmp ult i32 %377, %12
  br i1 %432, label %433, label %446

433:                                              ; preds = %430
  %434 = getelementptr inbounds <4 x float>, <4 x float>* %431, i64 -2
  %435 = load <4 x float>, <4 x float>* %434, align 16
  %436 = getelementptr inbounds <4 x float>, <4 x float>* %431, i64 -4
  %437 = load <4 x float>, <4 x float>* %436, align 16
  %438 = fmul <4 x float> %437, <float 0xC00960CE60000000, float 0xC00960CE60000000, float 0xC00960CE60000000, float 0xC00960CE60000000>
  %439 = fadd <4 x float> %435, %438
  store <4 x float> %439, <4 x float>* %434, align 16
  %440 = getelementptr inbounds <4 x float>, <4 x float>* %431, i64 -1
  %441 = load <4 x float>, <4 x float>* %440, align 16
  %442 = getelementptr inbounds <4 x float>, <4 x float>* %431, i64 -3
  %443 = load <4 x float>, <4 x float>* %442, align 16
  %444 = fmul <4 x float> %443, <float 0xC00960CE60000000, float 0xC00960CE60000000, float 0xC00960CE60000000, float 0xC00960CE60000000>
  %445 = fadd <4 x float> %441, %444
  store <4 x float> %445, <4 x float>* %440, align 16
  br label %446

446:                                              ; preds = %430, %433
  %447 = zext i32 %371 to i64
  %448 = getelementptr inbounds float, float* %7, i64 %447
  %449 = add nuw nsw i32 %368, 8
  %450 = zext i32 %449 to i64
  %451 = getelementptr inbounds float, float* %7, i64 %450
  %452 = sub nsw i32 %12, %367
  %453 = icmp slt i32 %11, %452
  %454 = select i1 %453, i32 %11, i32 %452
  %455 = icmp ult i32 %11, %454
  %456 = select i1 %455, i32 %11, i32 %454
  %457 = bitcast float* %451 to <4 x float>*
  %458 = icmp eq i32 %456, 0
  br i1 %458, label %507, label %459

459:                                              ; preds = %446
  %460 = bitcast float* %448 to <4 x float>*
  %461 = getelementptr inbounds float, float* %451, i64 -8
  %462 = bitcast float* %461 to <4 x float>*
  %463 = load <4 x float>, <4 x float>* %462, align 16
  %464 = load <4 x float>, <4 x float>* %460, align 16
  %465 = load <4 x float>, <4 x float>* %457, align 16
  %466 = fadd <4 x float> %464, %465
  %467 = fmul <4 x float> %466, <float 0xBFAB2035C0000000, float 0xBFAB2035C0000000, float 0xBFAB2035C0000000, float 0xBFAB2035C0000000>
  %468 = fadd <4 x float> %463, %467
  store <4 x float> %468, <4 x float>* %462, align 16
  %469 = getelementptr inbounds float, float* %451, i64 -4
  %470 = bitcast float* %469 to <4 x float>*
  %471 = load <4 x float>, <4 x float>* %470, align 16
  %472 = getelementptr inbounds float, float* %448, i64 4
  %473 = bitcast float* %472 to <4 x float>*
  %474 = load <4 x float>, <4 x float>* %473, align 16
  %475 = getelementptr inbounds float, float* %451, i64 4
  %476 = bitcast float* %475 to <4 x float>*
  %477 = load <4 x float>, <4 x float>* %476, align 16
  %478 = fadd <4 x float> %474, %477
  %479 = fmul <4 x float> %478, <float 0xBFAB2035C0000000, float 0xBFAB2035C0000000, float 0xBFAB2035C0000000, float 0xBFAB2035C0000000>
  %480 = fadd <4 x float> %471, %479
  store <4 x float> %480, <4 x float>* %470, align 16
  %481 = getelementptr inbounds float, float* %451, i64 16
  %482 = bitcast float* %481 to <4 x float>*
  %483 = icmp eq i32 %456, 1
  br i1 %483, label %507, label %484

484:                                              ; preds = %459, %484
  %485 = phi i32 [ %505, %484 ], [ 1, %459 ]
  %486 = phi <4 x float>* [ %504, %484 ], [ %482, %459 ]
  %487 = getelementptr inbounds <4 x float>, <4 x float>* %486, i64 -2
  %488 = load <4 x float>, <4 x float>* %487, align 16
  %489 = getelementptr inbounds <4 x float>, <4 x float>* %486, i64 -4
  %490 = load <4 x float>, <4 x float>* %489, align 16
  %491 = load <4 x float>, <4 x float>* %486, align 16
  %492 = fadd <4 x float> %490, %491
  %493 = fmul <4 x float> %492, <float 0xBFAB2035C0000000, float 0xBFAB2035C0000000, float 0xBFAB2035C0000000, float 0xBFAB2035C0000000>
  %494 = fadd <4 x float> %488, %493
  store <4 x float> %494, <4 x float>* %487, align 16
  %495 = getelementptr inbounds <4 x float>, <4 x float>* %486, i64 -1
  %496 = load <4 x float>, <4 x float>* %495, align 16
  %497 = getelementptr inbounds <4 x float>, <4 x float>* %486, i64 -3
  %498 = load <4 x float>, <4 x float>* %497, align 16
  %499 = getelementptr inbounds <4 x float>, <4 x float>* %486, i64 1
  %500 = load <4 x float>, <4 x float>* %499, align 16
  %501 = fadd <4 x float> %498, %500
  %502 = fmul <4 x float> %501, <float 0xBFAB2035C0000000, float 0xBFAB2035C0000000, float 0xBFAB2035C0000000, float 0xBFAB2035C0000000>
  %503 = fadd <4 x float> %496, %502
  store <4 x float> %503, <4 x float>* %495, align 16
  %504 = getelementptr inbounds <4 x float>, <4 x float>* %486, i64 4
  %505 = add nuw i32 %485, 1
  %506 = icmp ult i32 %505, %456
  br i1 %506, label %484, label %507

507:                                              ; preds = %484, %459, %446
  %508 = phi <4 x float>* [ %457, %446 ], [ %482, %459 ], [ %504, %484 ]
  %509 = icmp ult i32 %454, %11
  br i1 %509, label %510, label %523

510:                                              ; preds = %507
  %511 = getelementptr inbounds <4 x float>, <4 x float>* %508, i64 -2
  %512 = load <4 x float>, <4 x float>* %511, align 16
  %513 = getelementptr inbounds <4 x float>, <4 x float>* %508, i64 -4
  %514 = load <4 x float>, <4 x float>* %513, align 16
  %515 = fmul <4 x float> %514, <float 0xBFBB2035C0000000, float 0xBFBB2035C0000000, float 0xBFBB2035C0000000, float 0xBFBB2035C0000000>
  %516 = fadd <4 x float> %512, %515
  store <4 x float> %516, <4 x float>* %511, align 16
  %517 = getelementptr inbounds <4 x float>, <4 x float>* %508, i64 -1
  %518 = load <4 x float>, <4 x float>* %517, align 16
  %519 = getelementptr inbounds <4 x float>, <4 x float>* %508, i64 -3
  %520 = load <4 x float>, <4 x float>* %519, align 16
  %521 = fmul <4 x float> %520, <float 0xBFBB2035C0000000, float 0xBFBB2035C0000000, float 0xBFBB2035C0000000, float 0xBFBB2035C0000000>
  %522 = fadd <4 x float> %518, %521
  store <4 x float> %522, <4 x float>* %517, align 16
  br label %523

523:                                              ; preds = %507, %510
  br i1 %381, label %572, label %524

524:                                              ; preds = %523
  %525 = bitcast float* %370 to <4 x float>*
  %526 = getelementptr inbounds float, float* %374, i64 -8
  %527 = bitcast float* %526 to <4 x float>*
  %528 = load <4 x float>, <4 x float>* %527, align 16
  %529 = load <4 x float>, <4 x float>* %525, align 16
  %530 = load <4 x float>, <4 x float>* %380, align 16
  %531 = fadd <4 x float> %529, %530
  %532 = fmul <4 x float> %531, <float 0x3FEC40CEC0000000, float 0x3FEC40CEC0000000, float 0x3FEC40CEC0000000, float 0x3FEC40CEC0000000>
  %533 = fadd <4 x float> %528, %532
  store <4 x float> %533, <4 x float>* %527, align 16
  %534 = getelementptr inbounds float, float* %374, i64 -4
  %535 = bitcast float* %534 to <4 x float>*
  %536 = load <4 x float>, <4 x float>* %535, align 16
  %537 = getelementptr inbounds float, float* %370, i64 4
  %538 = bitcast float* %537 to <4 x float>*
  %539 = load <4 x float>, <4 x float>* %538, align 16
  %540 = getelementptr inbounds float, float* %374, i64 4
  %541 = bitcast float* %540 to <4 x float>*
  %542 = load <4 x float>, <4 x float>* %541, align 16
  %543 = fadd <4 x float> %539, %542
  %544 = fmul <4 x float> %543, <float 0x3FEC40CEC0000000, float 0x3FEC40CEC0000000, float 0x3FEC40CEC0000000, float 0x3FEC40CEC0000000>
  %545 = fadd <4 x float> %536, %544
  store <4 x float> %545, <4 x float>* %535, align 16
  %546 = getelementptr inbounds float, float* %374, i64 16
  %547 = bitcast float* %546 to <4 x float>*
  %548 = icmp eq i32 %379, 1
  br i1 %548, label %572, label %549

549:                                              ; preds = %524, %549
  %550 = phi i32 [ %570, %549 ], [ 1, %524 ]
  %551 = phi <4 x float>* [ %569, %549 ], [ %547, %524 ]
  %552 = getelementptr inbounds <4 x float>, <4 x float>* %551, i64 -2
  %553 = load <4 x float>, <4 x float>* %552, align 16
  %554 = getelementptr inbounds <4 x float>, <4 x float>* %551, i64 -4
  %555 = load <4 x float>, <4 x float>* %554, align 16
  %556 = load <4 x float>, <4 x float>* %551, align 16
  %557 = fadd <4 x float> %555, %556
  %558 = fmul <4 x float> %557, <float 0x3FEC40CEC0000000, float 0x3FEC40CEC0000000, float 0x3FEC40CEC0000000, float 0x3FEC40CEC0000000>
  %559 = fadd <4 x float> %553, %558
  store <4 x float> %559, <4 x float>* %552, align 16
  %560 = getelementptr inbounds <4 x float>, <4 x float>* %551, i64 -1
  %561 = load <4 x float>, <4 x float>* %560, align 16
  %562 = getelementptr inbounds <4 x float>, <4 x float>* %551, i64 -3
  %563 = load <4 x float>, <4 x float>* %562, align 16
  %564 = getelementptr inbounds <4 x float>, <4 x float>* %551, i64 1
  %565 = load <4 x float>, <4 x float>* %564, align 16
  %566 = fadd <4 x float> %563, %565
  %567 = fmul <4 x float> %566, <float 0x3FEC40CEC0000000, float 0x3FEC40CEC0000000, float 0x3FEC40CEC0000000, float 0x3FEC40CEC0000000>
  %568 = fadd <4 x float> %561, %567
  store <4 x float> %568, <4 x float>* %560, align 16
  %569 = getelementptr inbounds <4 x float>, <4 x float>* %551, i64 4
  %570 = add nuw i32 %550, 1
  %571 = icmp ult i32 %570, %379
  br i1 %571, label %549, label %572

572:                                              ; preds = %549, %524, %523
  %573 = phi <4 x float>* [ %380, %523 ], [ %547, %524 ], [ %569, %549 ]
  br i1 %432, label %574, label %587

574:                                              ; preds = %572
  %575 = getelementptr inbounds <4 x float>, <4 x float>* %573, i64 -2
  %576 = load <4 x float>, <4 x float>* %575, align 16
  %577 = getelementptr inbounds <4 x float>, <4 x float>* %573, i64 -4
  %578 = load <4 x float>, <4 x float>* %577, align 16
  %579 = fmul <4 x float> %578, <float 0x3FFC40CEC0000000, float 0x3FFC40CEC0000000, float 0x3FFC40CEC0000000, float 0x3FFC40CEC0000000>
  %580 = fadd <4 x float> %576, %579
  store <4 x float> %580, <4 x float>* %575, align 16
  %581 = getelementptr inbounds <4 x float>, <4 x float>* %573, i64 -1
  %582 = load <4 x float>, <4 x float>* %581, align 16
  %583 = getelementptr inbounds <4 x float>, <4 x float>* %573, i64 -3
  %584 = load <4 x float>, <4 x float>* %583, align 16
  %585 = fmul <4 x float> %584, <float 0x3FFC40CEC0000000, float 0x3FFC40CEC0000000, float 0x3FFC40CEC0000000, float 0x3FFC40CEC0000000>
  %586 = fadd <4 x float> %582, %585
  store <4 x float> %586, <4 x float>* %581, align 16
  br label %587

587:                                              ; preds = %572, %574
  br i1 %458, label %636, label %588

588:                                              ; preds = %587
  %589 = bitcast float* %448 to <4 x float>*
  %590 = getelementptr inbounds float, float* %451, i64 -8
  %591 = bitcast float* %590 to <4 x float>*
  %592 = load <4 x float>, <4 x float>* %591, align 16
  %593 = load <4 x float>, <4 x float>* %589, align 16
  %594 = load <4 x float>, <4 x float>* %457, align 16
  %595 = fadd <4 x float> %593, %594
  %596 = fmul <4 x float> %595, <float 0x3FDC626AA0000000, float 0x3FDC626AA0000000, float 0x3FDC626AA0000000, float 0x3FDC626AA0000000>
  %597 = fadd <4 x float> %592, %596
  store <4 x float> %597, <4 x float>* %591, align 16
  %598 = getelementptr inbounds float, float* %451, i64 -4
  %599 = bitcast float* %598 to <4 x float>*
  %600 = load <4 x float>, <4 x float>* %599, align 16
  %601 = getelementptr inbounds float, float* %448, i64 4
  %602 = bitcast float* %601 to <4 x float>*
  %603 = load <4 x float>, <4 x float>* %602, align 16
  %604 = getelementptr inbounds float, float* %451, i64 4
  %605 = bitcast float* %604 to <4 x float>*
  %606 = load <4 x float>, <4 x float>* %605, align 16
  %607 = fadd <4 x float> %603, %606
  %608 = fmul <4 x float> %607, <float 0x3FDC626AA0000000, float 0x3FDC626AA0000000, float 0x3FDC626AA0000000, float 0x3FDC626AA0000000>
  %609 = fadd <4 x float> %600, %608
  store <4 x float> %609, <4 x float>* %599, align 16
  %610 = getelementptr inbounds float, float* %451, i64 16
  %611 = bitcast float* %610 to <4 x float>*
  %612 = icmp eq i32 %456, 1
  br i1 %612, label %636, label %613

613:                                              ; preds = %588, %613
  %614 = phi i32 [ %634, %613 ], [ 1, %588 ]
  %615 = phi <4 x float>* [ %633, %613 ], [ %611, %588 ]
  %616 = getelementptr inbounds <4 x float>, <4 x float>* %615, i64 -2
  %617 = load <4 x float>, <4 x float>* %616, align 16
  %618 = getelementptr inbounds <4 x float>, <4 x float>* %615, i64 -4
  %619 = load <4 x float>, <4 x float>* %618, align 16
  %620 = load <4 x float>, <4 x float>* %615, align 16
  %621 = fadd <4 x float> %619, %620
  %622 = fmul <4 x float> %621, <float 0x3FDC626AA0000000, float 0x3FDC626AA0000000, float 0x3FDC626AA0000000, float 0x3FDC626AA0000000>
  %623 = fadd <4 x float> %617, %622
  store <4 x float> %623, <4 x float>* %616, align 16
  %624 = getelementptr inbounds <4 x float>, <4 x float>* %615, i64 -1
  %625 = load <4 x float>, <4 x float>* %624, align 16
  %626 = getelementptr inbounds <4 x float>, <4 x float>* %615, i64 -3
  %627 = load <4 x float>, <4 x float>* %626, align 16
  %628 = getelementptr inbounds <4 x float>, <4 x float>* %615, i64 1
  %629 = load <4 x float>, <4 x float>* %628, align 16
  %630 = fadd <4 x float> %627, %629
  %631 = fmul <4 x float> %630, <float 0x3FDC626AA0000000, float 0x3FDC626AA0000000, float 0x3FDC626AA0000000, float 0x3FDC626AA0000000>
  %632 = fadd <4 x float> %625, %631
  store <4 x float> %632, <4 x float>* %624, align 16
  %633 = getelementptr inbounds <4 x float>, <4 x float>* %615, i64 4
  %634 = add nuw i32 %614, 1
  %635 = icmp ult i32 %634, %456
  br i1 %635, label %613, label %636

636:                                              ; preds = %613, %588, %587
  %637 = phi <4 x float>* [ %457, %587 ], [ %611, %588 ], [ %633, %613 ]
  br i1 %509, label %638, label %651

638:                                              ; preds = %636
  %639 = getelementptr inbounds <4 x float>, <4 x float>* %637, i64 -2
  %640 = load <4 x float>, <4 x float>* %639, align 16
  %641 = getelementptr inbounds <4 x float>, <4 x float>* %637, i64 -4
  %642 = load <4 x float>, <4 x float>* %641, align 16
  %643 = fmul <4 x float> %642, <float 0x3FEC626AA0000000, float 0x3FEC626AA0000000, float 0x3FEC626AA0000000, float 0x3FEC626AA0000000>
  %644 = fadd <4 x float> %640, %643
  store <4 x float> %644, <4 x float>* %639, align 16
  %645 = getelementptr inbounds <4 x float>, <4 x float>* %637, i64 -1
  %646 = load <4 x float>, <4 x float>* %645, align 16
  %647 = getelementptr inbounds <4 x float>, <4 x float>* %637, i64 -3
  %648 = load <4 x float>, <4 x float>* %647, align 16
  %649 = fmul <4 x float> %648, <float 0x3FEC626AA0000000, float 0x3FEC626AA0000000, float 0x3FEC626AA0000000, float 0x3FEC626AA0000000>
  %650 = fadd <4 x float> %646, %649
  store <4 x float> %650, <4 x float>* %645, align 16
  br label %651

651:                                              ; preds = %636, %638
  %652 = icmp eq i32 %12, 0
  br i1 %652, label %687, label %653

653:                                              ; preds = %651
  %654 = bitcast float* %448 to <4 x float>*
  %655 = xor i32 %11, -1
  %656 = and i32 %12, 1
  %657 = sub i32 0, %2
  %658 = icmp eq i32 %655, %657
  br i1 %658, label %678, label %659

659:                                              ; preds = %653
  %660 = sub i32 %12, %656
  br label %661

661:                                              ; preds = %661, %659
  %662 = phi <4 x float>* [ %654, %659 ], [ %675, %661 ]
  %663 = phi i32 [ %660, %659 ], [ %676, %661 ]
  %664 = load <4 x float>, <4 x float>* %662, align 16
  %665 = fmul <4 x float> %664, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  store <4 x float> %665, <4 x float>* %662, align 16
  %666 = getelementptr inbounds <4 x float>, <4 x float>* %662, i64 1
  %667 = load <4 x float>, <4 x float>* %666, align 16
  %668 = fmul <4 x float> %667, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  store <4 x float> %668, <4 x float>* %666, align 16
  %669 = getelementptr inbounds <4 x float>, <4 x float>* %662, i64 4
  %670 = load <4 x float>, <4 x float>* %669, align 16
  %671 = fmul <4 x float> %670, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  store <4 x float> %671, <4 x float>* %669, align 16
  %672 = getelementptr inbounds <4 x float>, <4 x float>* %662, i64 5
  %673 = load <4 x float>, <4 x float>* %672, align 16
  %674 = fmul <4 x float> %673, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  store <4 x float> %674, <4 x float>* %672, align 16
  %675 = getelementptr inbounds <4 x float>, <4 x float>* %662, i64 8
  %676 = add i32 %663, -2
  %677 = icmp eq i32 %676, 0
  br i1 %677, label %678, label %661

678:                                              ; preds = %661, %653
  %679 = phi <4 x float>* [ %654, %653 ], [ %675, %661 ]
  %680 = icmp eq i32 %656, 0
  br i1 %680, label %687, label %681

681:                                              ; preds = %678
  %682 = load <4 x float>, <4 x float>* %679, align 16
  %683 = fmul <4 x float> %682, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  store <4 x float> %683, <4 x float>* %679, align 16
  %684 = getelementptr inbounds <4 x float>, <4 x float>* %679, i64 1
  %685 = load <4 x float>, <4 x float>* %684, align 16
  %686 = fmul <4 x float> %685, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  store <4 x float> %686, <4 x float>* %684, align 16
  br label %687

687:                                              ; preds = %681, %678, %651
  %688 = icmp eq i32 %11, 0
  br i1 %688, label %721, label %689

689:                                              ; preds = %687
  %690 = bitcast float* %370 to <4 x float>*
  %691 = and i32 %11, 1
  %692 = icmp eq i32 %11, 1
  br i1 %692, label %712, label %693

693:                                              ; preds = %689
  %694 = sub nsw i32 %11, %691
  br label %695

695:                                              ; preds = %695, %693
  %696 = phi <4 x float>* [ %690, %693 ], [ %709, %695 ]
  %697 = phi i32 [ %694, %693 ], [ %710, %695 ]
  %698 = load <4 x float>, <4 x float>* %696, align 16
  %699 = fmul <4 x float> %698, <float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000>
  store <4 x float> %699, <4 x float>* %696, align 16
  %700 = getelementptr inbounds <4 x float>, <4 x float>* %696, i64 1
  %701 = load <4 x float>, <4 x float>* %700, align 16
  %702 = fmul <4 x float> %701, <float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000>
  store <4 x float> %702, <4 x float>* %700, align 16
  %703 = getelementptr inbounds <4 x float>, <4 x float>* %696, i64 4
  %704 = load <4 x float>, <4 x float>* %703, align 16
  %705 = fmul <4 x float> %704, <float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000>
  store <4 x float> %705, <4 x float>* %703, align 16
  %706 = getelementptr inbounds <4 x float>, <4 x float>* %696, i64 5
  %707 = load <4 x float>, <4 x float>* %706, align 16
  %708 = fmul <4 x float> %707, <float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000>
  store <4 x float> %708, <4 x float>* %706, align 16
  %709 = getelementptr inbounds <4 x float>, <4 x float>* %696, i64 8
  %710 = add i32 %697, -2
  %711 = icmp eq i32 %710, 0
  br i1 %711, label %712, label %695

712:                                              ; preds = %695, %689
  %713 = phi <4 x float>* [ %690, %689 ], [ %709, %695 ]
  %714 = icmp eq i32 %691, 0
  br i1 %714, label %721, label %715

715:                                              ; preds = %712
  %716 = load <4 x float>, <4 x float>* %713, align 16
  %717 = fmul <4 x float> %716, <float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000>
  store <4 x float> %717, <4 x float>* %713, align 16
  %718 = getelementptr inbounds <4 x float>, <4 x float>* %713, i64 1
  %719 = load <4 x float>, <4 x float>* %718, align 16
  %720 = fmul <4 x float> %719, <float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000>
  store <4 x float> %720, <4 x float>* %718, align 16
  br label %721

721:                                              ; preds = %715, %712, %687
  br i1 %17, label %722, label %819

722:                                              ; preds = %721
  %723 = zext i32 %4 to i64
  %724 = zext i32 %11 to i64
  %725 = mul nuw nsw i64 %724, %723
  %726 = getelementptr inbounds i32, i32* %15, i64 %725
  %727 = sub nuw nsw i32 8, %368
  br i1 %688, label %772, label %728

728:                                              ; preds = %722
  %729 = getelementptr inbounds i32, i32* %16, i64 %369
  %730 = add nsw i32 %11, -1
  %731 = and i32 %11, 3
  %732 = icmp eq i32 %731, 0
  br i1 %732, label %745, label %733

733:                                              ; preds = %728, %733
  %734 = phi i32 [ %738, %733 ], [ %11, %728 ]
  %735 = phi i32* [ %742, %733 ], [ %729, %728 ]
  %736 = phi i32* [ %741, %733 ], [ %15, %728 ]
  %737 = phi i32 [ %743, %733 ], [ %731, %728 ]
  %738 = add nsw i32 %734, -1
  %739 = bitcast i32* %736 to i8*
  %740 = bitcast i32* %735 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %739, i8* align 4 %740, i64 32, i1 false) #10, !alias.scope !52
  %741 = getelementptr inbounds i32, i32* %736, i64 %723
  %742 = getelementptr inbounds i32, i32* %735, i64 16
  %743 = add i32 %737, -1
  %744 = icmp eq i32 %743, 0
  br i1 %744, label %745, label %733, !llvm.loop !56

745:                                              ; preds = %733, %728
  %746 = phi i32 [ %11, %728 ], [ %738, %733 ]
  %747 = phi i32* [ %729, %728 ], [ %742, %733 ]
  %748 = phi i32* [ %15, %728 ], [ %741, %733 ]
  %749 = icmp ult i32 %730, 3
  br i1 %749, label %772, label %750

750:                                              ; preds = %745, %750
  %751 = phi i32 [ %766, %750 ], [ %746, %745 ]
  %752 = phi i32* [ %770, %750 ], [ %747, %745 ]
  %753 = phi i32* [ %769, %750 ], [ %748, %745 ]
  %754 = bitcast i32* %753 to i8*
  %755 = bitcast i32* %752 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %754, i8* align 4 %755, i64 32, i1 false) #10, !alias.scope !52
  %756 = getelementptr inbounds i32, i32* %753, i64 %723
  %757 = getelementptr inbounds i32, i32* %752, i64 16
  %758 = bitcast i32* %756 to i8*
  %759 = bitcast i32* %757 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %758, i8* align 4 %759, i64 32, i1 false) #10, !alias.scope !52
  %760 = getelementptr inbounds i32, i32* %756, i64 %723
  %761 = getelementptr inbounds i32, i32* %752, i64 32
  %762 = bitcast i32* %760 to i8*
  %763 = bitcast i32* %761 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %762, i8* align 4 %763, i64 32, i1 false) #10, !alias.scope !52
  %764 = getelementptr inbounds i32, i32* %760, i64 %723
  %765 = getelementptr inbounds i32, i32* %752, i64 48
  %766 = add nsw i32 %751, -4
  %767 = bitcast i32* %764 to i8*
  %768 = bitcast i32* %765 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %767, i8* align 4 %768, i64 32, i1 false) #10, !alias.scope !52
  %769 = getelementptr inbounds i32, i32* %764, i64 %723
  %770 = getelementptr inbounds i32, i32* %752, i64 64
  %771 = icmp eq i32 %766, 0
  br i1 %771, label %772, label %750

772:                                              ; preds = %745, %750, %722
  br i1 %652, label %820, label %773

773:                                              ; preds = %772
  %774 = zext i32 %727 to i64
  %775 = getelementptr inbounds i32, i32* %16, i64 %774
  %776 = xor i32 %11, -1
  %777 = add i32 %776, %2
  %778 = and i32 %12, 3
  %779 = icmp eq i32 %778, 0
  br i1 %779, label %792, label %780

780:                                              ; preds = %773, %780
  %781 = phi i32 [ %785, %780 ], [ %12, %773 ]
  %782 = phi i32* [ %789, %780 ], [ %775, %773 ]
  %783 = phi i32* [ %788, %780 ], [ %726, %773 ]
  %784 = phi i32 [ %790, %780 ], [ %778, %773 ]
  %785 = add nsw i32 %781, -1
  %786 = bitcast i32* %783 to i8*
  %787 = bitcast i32* %782 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %786, i8* align 4 %787, i64 32, i1 false) #10, !alias.scope !52
  %788 = getelementptr inbounds i32, i32* %783, i64 %723
  %789 = getelementptr inbounds i32, i32* %782, i64 16
  %790 = add i32 %784, -1
  %791 = icmp eq i32 %790, 0
  br i1 %791, label %792, label %780, !llvm.loop !57

792:                                              ; preds = %780, %773
  %793 = phi i32 [ %12, %773 ], [ %785, %780 ]
  %794 = phi i32* [ %775, %773 ], [ %789, %780 ]
  %795 = phi i32* [ %726, %773 ], [ %788, %780 ]
  %796 = icmp ult i32 %777, 3
  br i1 %796, label %820, label %797

797:                                              ; preds = %792, %797
  %798 = phi i32 [ %813, %797 ], [ %793, %792 ]
  %799 = phi i32* [ %817, %797 ], [ %794, %792 ]
  %800 = phi i32* [ %816, %797 ], [ %795, %792 ]
  %801 = bitcast i32* %800 to i8*
  %802 = bitcast i32* %799 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %801, i8* align 4 %802, i64 32, i1 false) #10, !alias.scope !52
  %803 = getelementptr inbounds i32, i32* %800, i64 %723
  %804 = getelementptr inbounds i32, i32* %799, i64 16
  %805 = bitcast i32* %803 to i8*
  %806 = bitcast i32* %804 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %805, i8* align 4 %806, i64 32, i1 false) #10, !alias.scope !52
  %807 = getelementptr inbounds i32, i32* %803, i64 %723
  %808 = getelementptr inbounds i32, i32* %799, i64 32
  %809 = bitcast i32* %807 to i8*
  %810 = bitcast i32* %808 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %809, i8* align 4 %810, i64 32, i1 false) #10, !alias.scope !52
  %811 = getelementptr inbounds i32, i32* %807, i64 %723
  %812 = getelementptr inbounds i32, i32* %799, i64 48
  %813 = add nsw i32 %798, -4
  %814 = bitcast i32* %811 to i8*
  %815 = bitcast i32* %812 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %814, i8* align 4 %815, i64 32, i1 false) #10, !alias.scope !52
  %816 = getelementptr inbounds i32, i32* %811, i64 %723
  %817 = getelementptr inbounds i32, i32* %799, i64 64
  %818 = icmp eq i32 %813, 0
  br i1 %818, label %820, label %797

819:                                              ; preds = %721
  tail call fastcc void @opj_dwt_deinterleave_v_cols(i32* %16, i32* %15, i32 %12, i32 %11, i32 %4, i32 %367, i32 %5)
  br label %820

820:                                              ; preds = %792, %797, %772, %819, %6
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @opj_dwt_encode_and_deinterleave_h_one_row_real(i8* nocapture, i8* nocapture, i32, i32) #2 {
  %5 = icmp ne i32 %3, 0
  %6 = zext i1 %5 to i32
  %7 = add i32 %6, %2
  %8 = lshr i32 %7, 1
  %9 = sub i32 %2, %8
  %10 = icmp eq i32 %2, 1
  br i1 %10, label %373, label %11

11:                                               ; preds = %4
  %12 = zext i32 %2 to i64
  %13 = shl nuw nsw i64 %12, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1, i8* align 4 %0, i64 %13, i1 false)
  %14 = xor i1 %5, true
  %15 = bitcast i8* %1 to float*
  %16 = zext i1 %14 to i32
  %17 = zext i1 %14 to i64
  %18 = getelementptr inbounds float, float* %15, i64 %17
  %19 = zext i1 %5 to i64
  %20 = getelementptr inbounds float, float* %15, i64 %19
  %21 = getelementptr inbounds float, float* %20, i64 1
  %22 = sub nsw i32 %8, %6
  %23 = icmp sgt i32 %22, %9
  %24 = select i1 %23, i32 %9, i32 %22
  tail call fastcc void @opj_dwt_encode_step2(float* %18, float* %21, i32 %9, i32 %24, float 0xBFF960CE60000000) #10
  %25 = getelementptr inbounds float, float* %18, i64 1
  %26 = sub nsw i32 %9, %16
  %27 = icmp sgt i32 %26, %8
  %28 = select i1 %27, i32 %8, i32 %26
  tail call fastcc void @opj_dwt_encode_step2(float* %20, float* %25, i32 %8, i32 %28, float 0xBFAB2035C0000000) #10
  tail call fastcc void @opj_dwt_encode_step2(float* %18, float* %21, i32 %9, i32 %24, float 0x3FEC40CEC0000000) #10
  tail call fastcc void @opj_dwt_encode_step2(float* %20, float* %25, i32 %8, i32 %28, float 0x3FDC626AA0000000) #10
  br i1 %5, label %29, label %144

29:                                               ; preds = %11
  %30 = icmp ult i32 %8, %9
  %31 = select i1 %30, i32 %8, i32 %9
  %32 = icmp ugt i32 %31, 3
  br i1 %32, label %109, label %33

33:                                               ; preds = %109, %29
  %34 = phi i32 [ 0, %29 ], [ %120, %109 ]
  %35 = phi float* [ %15, %29 ], [ %119, %109 ]
  %36 = icmp ult i32 %34, %31
  br i1 %36, label %37, label %134

37:                                               ; preds = %33
  %38 = xor i32 %34, -1
  %39 = add i32 %31, %38
  %40 = zext i32 %39 to i64
  %41 = add nuw nsw i64 %40, 1
  %42 = icmp ult i64 %41, 4
  br i1 %42, label %43, label %46

43:                                               ; preds = %107, %37
  %44 = phi float* [ %35, %37 ], [ %49, %107 ]
  %45 = phi i32 [ %34, %37 ], [ %51, %107 ]
  br label %123

46:                                               ; preds = %37
  %47 = and i64 %41, 8589934588
  %48 = shl nuw nsw i64 %47, 1
  %49 = getelementptr float, float* %35, i64 %48
  %50 = trunc i64 %47 to i32
  %51 = add i32 %34, %50
  %52 = add nsw i64 %47, -4
  %53 = lshr exact i64 %52, 2
  %54 = add nuw nsw i64 %53, 1
  %55 = and i64 %54, 1
  %56 = icmp eq i64 %52, 0
  br i1 %56, label %92, label %57

57:                                               ; preds = %46
  %58 = sub nuw nsw i64 %54, %55
  br label %59

59:                                               ; preds = %59, %57
  %60 = phi i64 [ 0, %57 ], [ %87, %59 ]
  %61 = phi i64 [ %58, %57 ], [ %88, %59 ]
  %62 = shl i64 %60, 1
  %63 = getelementptr float, float* %35, i64 %62
  %64 = bitcast float* %63 to <8 x float>*
  %65 = load <8 x float>, <8 x float>* %64, align 4
  %66 = shufflevector <8 x float> %65, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %67 = shufflevector <8 x float> %65, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %68 = fmul <4 x float> %66, <float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000>
  %69 = getelementptr inbounds float, float* %63, i64 1
  %70 = fmul <4 x float> %67, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  %71 = getelementptr inbounds float, float* %69, i64 -1
  %72 = bitcast float* %71 to <8 x float>*
  %73 = shufflevector <4 x float> %68, <4 x float> %70, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %73, <8 x float>* %72, align 4
  %74 = shl i64 %60, 1
  %75 = or i64 %74, 8
  %76 = getelementptr float, float* %35, i64 %75
  %77 = bitcast float* %76 to <8 x float>*
  %78 = load <8 x float>, <8 x float>* %77, align 4
  %79 = shufflevector <8 x float> %78, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %80 = shufflevector <8 x float> %78, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %81 = fmul <4 x float> %79, <float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000>
  %82 = getelementptr inbounds float, float* %76, i64 1
  %83 = fmul <4 x float> %80, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  %84 = getelementptr inbounds float, float* %82, i64 -1
  %85 = bitcast float* %84 to <8 x float>*
  %86 = shufflevector <4 x float> %81, <4 x float> %83, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %86, <8 x float>* %85, align 4
  %87 = add i64 %60, 8
  %88 = add i64 %61, -2
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %90, label %59, !llvm.loop !58

90:                                               ; preds = %59
  %91 = shl i64 %87, 1
  br label %92

92:                                               ; preds = %90, %46
  %93 = phi i64 [ 0, %46 ], [ %91, %90 ]
  %94 = icmp eq i64 %55, 0
  br i1 %94, label %107, label %95

95:                                               ; preds = %92
  %96 = getelementptr float, float* %35, i64 %93
  %97 = bitcast float* %96 to <8 x float>*
  %98 = load <8 x float>, <8 x float>* %97, align 4
  %99 = shufflevector <8 x float> %98, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %100 = shufflevector <8 x float> %98, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %101 = fmul <4 x float> %99, <float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000>
  %102 = getelementptr inbounds float, float* %96, i64 1
  %103 = fmul <4 x float> %100, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  %104 = getelementptr inbounds float, float* %102, i64 -1
  %105 = bitcast float* %104 to <8 x float>*
  %106 = shufflevector <4 x float> %101, <4 x float> %103, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %106, <8 x float>* %105, align 4
  br label %107

107:                                              ; preds = %92, %95
  %108 = icmp eq i64 %41, %47
  br i1 %108, label %134, label %43

109:                                              ; preds = %29, %109
  %110 = phi float* [ %119, %109 ], [ %15, %29 ]
  %111 = phi i32 [ %120, %109 ], [ 0, %29 ]
  %112 = bitcast float* %110 to <4 x float>*
  %113 = load <4 x float>, <4 x float>* %112, align 16
  %114 = fmul <4 x float> %113, <float 0x3FEA033860000000, float 0x3FF3AECB00000000, float 0x3FEA033860000000, float 0x3FF3AECB00000000>
  store <4 x float> %114, <4 x float>* %112, align 16
  %115 = getelementptr inbounds float, float* %110, i64 4
  %116 = bitcast float* %115 to <4 x float>*
  %117 = load <4 x float>, <4 x float>* %116, align 16
  %118 = fmul <4 x float> %117, <float 0x3FEA033860000000, float 0x3FF3AECB00000000, float 0x3FEA033860000000, float 0x3FF3AECB00000000>
  store <4 x float> %118, <4 x float>* %116, align 16
  %119 = getelementptr inbounds float, float* %110, i64 8
  %120 = add i32 %111, 4
  %121 = or i32 %120, 3
  %122 = icmp ult i32 %121, %31
  br i1 %122, label %109, label %33

123:                                              ; preds = %43, %123
  %124 = phi float* [ %131, %123 ], [ %44, %43 ]
  %125 = phi i32 [ %132, %123 ], [ %45, %43 ]
  %126 = load float, float* %124, align 4
  %127 = fmul float %126, 0x3FEA033860000000
  store float %127, float* %124, align 4
  %128 = getelementptr inbounds float, float* %124, i64 1
  %129 = load float, float* %128, align 4
  %130 = fmul float %129, 0x3FF3AECB00000000
  store float %130, float* %128, align 4
  %131 = getelementptr inbounds float, float* %124, i64 2
  %132 = add nuw i32 %125, 1
  %133 = icmp ult i32 %132, %31
  br i1 %133, label %123, label %134, !llvm.loop !59

134:                                              ; preds = %123, %107, %33
  %135 = phi i32 [ %34, %33 ], [ %31, %107 ], [ %31, %123 ]
  %136 = phi float* [ %35, %33 ], [ %49, %107 ], [ %131, %123 ]
  %137 = icmp ult i32 %135, %8
  br i1 %137, label %260, label %138

138:                                              ; preds = %134
  %139 = icmp ult i32 %135, %9
  br i1 %139, label %140, label %265

140:                                              ; preds = %138
  %141 = getelementptr inbounds float, float* %136, i64 1
  %142 = load float, float* %141, align 4
  %143 = fmul float %142, 0x3FF3AECB00000000
  store float %143, float* %141, align 4
  br label %265

144:                                              ; preds = %11
  %145 = icmp ult i32 %9, %8
  %146 = select i1 %145, i32 %9, i32 %8
  %147 = icmp ugt i32 %146, 3
  br i1 %147, label %224, label %148

148:                                              ; preds = %224, %144
  %149 = phi i32 [ 0, %144 ], [ %235, %224 ]
  %150 = phi float* [ %15, %144 ], [ %234, %224 ]
  %151 = icmp ult i32 %149, %146
  br i1 %151, label %152, label %249

152:                                              ; preds = %148
  %153 = xor i32 %149, -1
  %154 = add i32 %146, %153
  %155 = zext i32 %154 to i64
  %156 = add nuw nsw i64 %155, 1
  %157 = icmp ult i64 %156, 4
  br i1 %157, label %158, label %161

158:                                              ; preds = %222, %152
  %159 = phi float* [ %150, %152 ], [ %164, %222 ]
  %160 = phi i32 [ %149, %152 ], [ %166, %222 ]
  br label %238

161:                                              ; preds = %152
  %162 = and i64 %156, 8589934588
  %163 = shl nuw nsw i64 %162, 1
  %164 = getelementptr float, float* %150, i64 %163
  %165 = trunc i64 %162 to i32
  %166 = add i32 %149, %165
  %167 = add nsw i64 %162, -4
  %168 = lshr exact i64 %167, 2
  %169 = add nuw nsw i64 %168, 1
  %170 = and i64 %169, 1
  %171 = icmp eq i64 %167, 0
  br i1 %171, label %207, label %172

172:                                              ; preds = %161
  %173 = sub nuw nsw i64 %169, %170
  br label %174

174:                                              ; preds = %174, %172
  %175 = phi i64 [ 0, %172 ], [ %202, %174 ]
  %176 = phi i64 [ %173, %172 ], [ %203, %174 ]
  %177 = shl i64 %175, 1
  %178 = getelementptr float, float* %150, i64 %177
  %179 = bitcast float* %178 to <8 x float>*
  %180 = load <8 x float>, <8 x float>* %179, align 4
  %181 = shufflevector <8 x float> %180, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %182 = shufflevector <8 x float> %180, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %183 = fmul <4 x float> %181, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  %184 = getelementptr inbounds float, float* %178, i64 1
  %185 = fmul <4 x float> %182, <float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000>
  %186 = getelementptr inbounds float, float* %184, i64 -1
  %187 = bitcast float* %186 to <8 x float>*
  %188 = shufflevector <4 x float> %183, <4 x float> %185, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %188, <8 x float>* %187, align 4
  %189 = shl i64 %175, 1
  %190 = or i64 %189, 8
  %191 = getelementptr float, float* %150, i64 %190
  %192 = bitcast float* %191 to <8 x float>*
  %193 = load <8 x float>, <8 x float>* %192, align 4
  %194 = shufflevector <8 x float> %193, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %195 = shufflevector <8 x float> %193, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %196 = fmul <4 x float> %194, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  %197 = getelementptr inbounds float, float* %191, i64 1
  %198 = fmul <4 x float> %195, <float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000>
  %199 = getelementptr inbounds float, float* %197, i64 -1
  %200 = bitcast float* %199 to <8 x float>*
  %201 = shufflevector <4 x float> %196, <4 x float> %198, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %201, <8 x float>* %200, align 4
  %202 = add i64 %175, 8
  %203 = add i64 %176, -2
  %204 = icmp eq i64 %203, 0
  br i1 %204, label %205, label %174, !llvm.loop !61

205:                                              ; preds = %174
  %206 = shl i64 %202, 1
  br label %207

207:                                              ; preds = %205, %161
  %208 = phi i64 [ 0, %161 ], [ %206, %205 ]
  %209 = icmp eq i64 %170, 0
  br i1 %209, label %222, label %210

210:                                              ; preds = %207
  %211 = getelementptr float, float* %150, i64 %208
  %212 = bitcast float* %211 to <8 x float>*
  %213 = load <8 x float>, <8 x float>* %212, align 4
  %214 = shufflevector <8 x float> %213, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %215 = shufflevector <8 x float> %213, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %216 = fmul <4 x float> %214, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  %217 = getelementptr inbounds float, float* %211, i64 1
  %218 = fmul <4 x float> %215, <float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000, float 0x3FEA033860000000>
  %219 = getelementptr inbounds float, float* %217, i64 -1
  %220 = bitcast float* %219 to <8 x float>*
  %221 = shufflevector <4 x float> %216, <4 x float> %218, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x float> %221, <8 x float>* %220, align 4
  br label %222

222:                                              ; preds = %207, %210
  %223 = icmp eq i64 %156, %162
  br i1 %223, label %249, label %158

224:                                              ; preds = %144, %224
  %225 = phi float* [ %234, %224 ], [ %15, %144 ]
  %226 = phi i32 [ %235, %224 ], [ 0, %144 ]
  %227 = bitcast float* %225 to <4 x float>*
  %228 = load <4 x float>, <4 x float>* %227, align 16
  %229 = fmul <4 x float> %228, <float 0x3FF3AECB00000000, float 0x3FEA033860000000, float 0x3FF3AECB00000000, float 0x3FEA033860000000>
  store <4 x float> %229, <4 x float>* %227, align 16
  %230 = getelementptr inbounds float, float* %225, i64 4
  %231 = bitcast float* %230 to <4 x float>*
  %232 = load <4 x float>, <4 x float>* %231, align 16
  %233 = fmul <4 x float> %232, <float 0x3FF3AECB00000000, float 0x3FEA033860000000, float 0x3FF3AECB00000000, float 0x3FEA033860000000>
  store <4 x float> %233, <4 x float>* %231, align 16
  %234 = getelementptr inbounds float, float* %225, i64 8
  %235 = add i32 %226, 4
  %236 = or i32 %235, 3
  %237 = icmp ult i32 %236, %146
  br i1 %237, label %224, label %148

238:                                              ; preds = %158, %238
  %239 = phi float* [ %246, %238 ], [ %159, %158 ]
  %240 = phi i32 [ %247, %238 ], [ %160, %158 ]
  %241 = load float, float* %239, align 4
  %242 = fmul float %241, 0x3FF3AECB00000000
  store float %242, float* %239, align 4
  %243 = getelementptr inbounds float, float* %239, i64 1
  %244 = load float, float* %243, align 4
  %245 = fmul float %244, 0x3FEA033860000000
  store float %245, float* %243, align 4
  %246 = getelementptr inbounds float, float* %239, i64 2
  %247 = add nuw i32 %240, 1
  %248 = icmp ult i32 %247, %146
  br i1 %248, label %238, label %249, !llvm.loop !62

249:                                              ; preds = %238, %222, %148
  %250 = phi i32 [ %149, %148 ], [ %146, %222 ], [ %146, %238 ]
  %251 = phi float* [ %150, %148 ], [ %164, %222 ], [ %246, %238 ]
  %252 = icmp ult i32 %250, %9
  br i1 %252, label %253, label %256

253:                                              ; preds = %249
  %254 = load float, float* %251, align 4
  %255 = fmul float %254, 0x3FF3AECB00000000
  store float %255, float* %251, align 4
  br label %265

256:                                              ; preds = %249
  %257 = icmp ult i32 %250, %8
  br i1 %257, label %258, label %265

258:                                              ; preds = %256
  %259 = getelementptr inbounds float, float* %251, i64 1
  br label %260

260:                                              ; preds = %134, %258
  %261 = phi float* [ %259, %258 ], [ %136, %134 ]
  %262 = load float, float* %261, align 4
  %263 = fmul float %262, 0x3FEA033860000000
  store float %263, float* %261, align 4
  %264 = bitcast i8* %0 to i32*
  br label %268

265:                                              ; preds = %138, %140, %253, %256
  %266 = bitcast i8* %0 to i32*
  %267 = icmp eq i32 %8, 0
  br i1 %267, label %317, label %268

268:                                              ; preds = %260, %265
  %269 = phi i32* [ %264, %260 ], [ %266, %265 ]
  %270 = bitcast i8* %1 to i32*
  %271 = getelementptr inbounds i32, i32* %270, i64 %17
  %272 = add nsw i32 %8, -1
  %273 = zext i32 %272 to i64
  %274 = add nuw nsw i64 %273, 1
  %275 = icmp ult i64 %274, 9
  br i1 %275, label %304, label %276

276:                                              ; preds = %268
  %277 = and i64 %274, 7
  %278 = icmp eq i64 %277, 0
  %279 = select i1 %278, i64 8, i64 %277
  %280 = sub nsw i64 %274, %279
  %281 = shl nsw i64 %280, 1
  %282 = getelementptr i32, i32* %271, i64 %281
  %283 = getelementptr i32, i32* %269, i64 %280
  %284 = trunc i64 %280 to i32
  br label %285

285:                                              ; preds = %285, %276
  %286 = phi i64 [ 0, %276 ], [ %302, %285 ]
  %287 = shl i64 %286, 1
  %288 = getelementptr i32, i32* %271, i64 %287
  %289 = shl i64 %286, 1
  %290 = or i64 %289, 8
  %291 = getelementptr i32, i32* %271, i64 %290
  %292 = getelementptr i32, i32* %269, i64 %286
  %293 = bitcast i32* %288 to <8 x i32>*
  %294 = bitcast i32* %291 to <8 x i32>*
  %295 = load <8 x i32>, <8 x i32>* %293, align 4, !alias.scope !63, !noalias !66
  %296 = load <8 x i32>, <8 x i32>* %294, align 4, !alias.scope !63, !noalias !66
  %297 = shufflevector <8 x i32> %295, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %298 = shufflevector <8 x i32> %296, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %299 = bitcast i32* %292 to <4 x i32>*
  store <4 x i32> %297, <4 x i32>* %299, align 4, !alias.scope !66, !noalias !63
  %300 = getelementptr i32, i32* %292, i64 4
  %301 = bitcast i32* %300 to <4 x i32>*
  store <4 x i32> %298, <4 x i32>* %301, align 4, !alias.scope !66, !noalias !63
  %302 = add i64 %286, 8
  %303 = icmp eq i64 %302, %280
  br i1 %303, label %304, label %285, !llvm.loop !68

304:                                              ; preds = %285, %268
  %305 = phi i32* [ %271, %268 ], [ %282, %285 ]
  %306 = phi i32* [ %269, %268 ], [ %283, %285 ]
  %307 = phi i32 [ 0, %268 ], [ %284, %285 ]
  br label %308

308:                                              ; preds = %304, %308
  %309 = phi i32* [ %314, %308 ], [ %305, %304 ]
  %310 = phi i32* [ %313, %308 ], [ %306, %304 ]
  %311 = phi i32 [ %315, %308 ], [ %307, %304 ]
  %312 = load i32, i32* %309, align 4, !alias.scope !63, !noalias !66
  %313 = getelementptr inbounds i32, i32* %310, i64 1
  store i32 %312, i32* %310, align 4, !alias.scope !66, !noalias !63
  %314 = getelementptr inbounds i32, i32* %309, i64 2
  %315 = add nuw nsw i32 %311, 1
  %316 = icmp eq i32 %315, %8
  br i1 %316, label %317, label %308, !llvm.loop !69

317:                                              ; preds = %308, %265
  %318 = phi i32* [ %266, %265 ], [ %269, %308 ]
  %319 = icmp sgt i32 %9, 0
  br i1 %319, label %320, label %373

320:                                              ; preds = %317
  %321 = getelementptr inbounds i8, i8* %1, i64 4
  %322 = bitcast i8* %321 to i32*
  %323 = sext i1 %14 to i64
  %324 = getelementptr inbounds i32, i32* %322, i64 %323
  %325 = zext i32 %8 to i64
  %326 = getelementptr inbounds i32, i32* %318, i64 %325
  %327 = xor i32 %8, -1
  %328 = add i32 %327, %2
  %329 = zext i32 %328 to i64
  %330 = add nuw nsw i64 %329, 1
  %331 = icmp ult i64 %330, 9
  br i1 %331, label %360, label %332

332:                                              ; preds = %320
  %333 = and i64 %330, 7
  %334 = icmp eq i64 %333, 0
  %335 = select i1 %334, i64 8, i64 %333
  %336 = sub nsw i64 %330, %335
  %337 = shl nsw i64 %336, 1
  %338 = getelementptr i32, i32* %324, i64 %337
  %339 = getelementptr i32, i32* %326, i64 %336
  %340 = trunc i64 %336 to i32
  br label %341

341:                                              ; preds = %341, %332
  %342 = phi i64 [ 0, %332 ], [ %358, %341 ]
  %343 = shl i64 %342, 1
  %344 = getelementptr i32, i32* %324, i64 %343
  %345 = shl i64 %342, 1
  %346 = or i64 %345, 8
  %347 = getelementptr i32, i32* %324, i64 %346
  %348 = getelementptr i32, i32* %326, i64 %342
  %349 = bitcast i32* %344 to <8 x i32>*
  %350 = bitcast i32* %347 to <8 x i32>*
  %351 = load <8 x i32>, <8 x i32>* %349, align 4, !alias.scope !63, !noalias !66
  %352 = load <8 x i32>, <8 x i32>* %350, align 4, !alias.scope !63, !noalias !66
  %353 = shufflevector <8 x i32> %351, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %354 = shufflevector <8 x i32> %352, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %355 = bitcast i32* %348 to <4 x i32>*
  store <4 x i32> %353, <4 x i32>* %355, align 4, !alias.scope !66, !noalias !63
  %356 = getelementptr i32, i32* %348, i64 4
  %357 = bitcast i32* %356 to <4 x i32>*
  store <4 x i32> %354, <4 x i32>* %357, align 4, !alias.scope !66, !noalias !63
  %358 = add i64 %342, 8
  %359 = icmp eq i64 %358, %336
  br i1 %359, label %360, label %341, !llvm.loop !70

360:                                              ; preds = %341, %320
  %361 = phi i32* [ %324, %320 ], [ %338, %341 ]
  %362 = phi i32* [ %326, %320 ], [ %339, %341 ]
  %363 = phi i32 [ 0, %320 ], [ %340, %341 ]
  br label %364

364:                                              ; preds = %360, %364
  %365 = phi i32* [ %370, %364 ], [ %361, %360 ]
  %366 = phi i32* [ %369, %364 ], [ %362, %360 ]
  %367 = phi i32 [ %371, %364 ], [ %363, %360 ]
  %368 = load i32, i32* %365, align 4, !alias.scope !63, !noalias !66
  %369 = getelementptr inbounds i32, i32* %366, i64 1
  store i32 %368, i32* %366, align 4, !alias.scope !66, !noalias !63
  %370 = getelementptr inbounds i32, i32* %365, i64 2
  %371 = add nuw nsw i32 %367, 1
  %372 = icmp eq i32 %371, %9
  br i1 %372, label %373, label %364, !llvm.loop !71

373:                                              ; preds = %364, %317, %4
  ret void
}

; Function Attrs: norecurse nounwind readnone ssp uwtable
define hidden double @opj_dwt_getnorm_real(i32, i32) local_unnamed_addr #3 {
  %3 = icmp eq i32 %1, 0
  %4 = icmp ugt i32 %0, 9
  %5 = and i1 %4, %3
  br i1 %5, label %12, label %6

6:                                                ; preds = %2
  %7 = icmp ne i32 %1, 0
  %8 = icmp ugt i32 %0, 8
  %9 = and i1 %8, %7
  %10 = zext i32 %0 to i64
  %11 = select i1 %9, i64 8, i64 %10
  br label %12

12:                                               ; preds = %6, %2
  %13 = phi i64 [ 9, %2 ], [ %11, %6 ]
  %14 = zext i32 %1 to i64
  %15 = getelementptr inbounds [4 x [10 x double]], [4 x [10 x double]]* @opj_dwt_norms_real, i64 0, i64 %14, i64 %13
  %16 = load double, double* %15, align 8
  ret double %16
}

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @opj_dwt_calc_explicit_stepsizes(%struct.opj_tccp* nocapture, i32) local_unnamed_addr #4 {
  %3 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %0, i64 0, i32 1
  %4 = load i32, i32* %3, align 4
  %5 = mul i32 %4, 3
  %6 = add i32 %5, -2
  %7 = icmp eq i32 %6, 0
  br i1 %7, label %89, label %8

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %0, i64 0, i32 5
  %10 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %0, i64 0, i32 6
  %11 = zext i32 %6 to i64
  %12 = add i32 %4, -1
  br label %13

13:                                               ; preds = %81, %8
  %14 = phi i64 [ 0, %8 ], [ %87, %81 ]
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %29, label %16

16:                                               ; preds = %13
  %17 = trunc i64 %14 to i32
  %18 = add i32 %17, -1
  %19 = udiv i32 %18, 3
  %20 = urem i32 %18, 3
  %21 = add nuw nsw i32 %20, 1
  %22 = sub nuw nsw i32 -2, %19
  %23 = add i32 %4, %22
  %24 = load i32, i32* %9, align 4
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %29, label %26

26:                                               ; preds = %16
  %27 = icmp ult i32 %20, 2
  %28 = select i1 %27, i32 1, i32 2
  br label %29

29:                                               ; preds = %13, %26, %16
  %30 = phi i1 [ false, %16 ], [ false, %26 ], [ true, %13 ]
  %31 = phi i32 [ %23, %16 ], [ %23, %26 ], [ %12, %13 ]
  %32 = phi i32 [ %21, %16 ], [ %21, %26 ], [ 0, %13 ]
  %33 = phi i32 [ 0, %16 ], [ %28, %26 ], [ 0, %13 ]
  %34 = load i32, i32* %10, align 4
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %53, label %36

36:                                               ; preds = %29
  %37 = icmp ugt i32 %31, 9
  %38 = and i1 %37, %30
  br i1 %38, label %45, label %39

39:                                               ; preds = %36
  %40 = icmp ne i32 %32, 0
  %41 = icmp ugt i32 %31, 8
  %42 = and i1 %41, %40
  %43 = zext i32 %31 to i64
  %44 = select i1 %42, i64 8, i64 %43
  br label %45

45:                                               ; preds = %36, %39
  %46 = phi i64 [ 9, %36 ], [ %44, %39 ]
  %47 = zext i32 %32 to i64
  %48 = getelementptr inbounds [4 x [10 x double]], [4 x [10 x double]]* @opj_dwt_norms_real, i64 0, i64 %47, i64 %46
  %49 = load double, double* %48, align 8
  %50 = shl i32 1, %33
  %51 = sitofp i32 %50 to double
  %52 = fdiv double %51, %49
  br label %53

53:                                               ; preds = %29, %45
  %54 = phi double [ %52, %45 ], [ 1.000000e+00, %29 ]
  %55 = fmul double %54, 8.192000e+03
  %56 = tail call double @llvm.floor.f64(double %55)
  %57 = fptosi double %56 to i32
  %58 = add i32 %33, %1
  %59 = icmp sgt i32 %57, 1
  br i1 %59, label %60, label %81

60:                                               ; preds = %53, %60
  %61 = phi i32 [ %64, %60 ], [ 0, %53 ]
  %62 = phi i32 [ %63, %60 ], [ %57, %53 ]
  %63 = lshr i32 %62, 1
  %64 = add nuw nsw i32 %61, 1
  %65 = icmp ugt i32 %62, 3
  br i1 %65, label %60, label %66

66:                                               ; preds = %60, %66
  %67 = phi i32 [ %70, %66 ], [ 0, %60 ]
  %68 = phi i32 [ %69, %66 ], [ %57, %60 ]
  %69 = lshr i32 %68, 1
  %70 = add nuw nsw i32 %67, 1
  %71 = icmp ugt i32 %68, 3
  br i1 %71, label %66, label %72

72:                                               ; preds = %66
  %73 = add nsw i32 %61, -12
  %74 = sub nsw i32 10, %67
  %75 = icmp ugt i32 %67, 10
  %76 = add nsw i32 %67, -10
  %77 = ashr i32 %57, %76
  %78 = shl i32 %57, %74
  %79 = select i1 %75, i32 %77, i32 %78
  %80 = and i32 %79, 2047
  br label %81

81:                                               ; preds = %53, %72
  %82 = phi i32 [ %73, %72 ], [ -13, %53 ]
  %83 = phi i32 [ %80, %72 ], [ 0, %53 ]
  %84 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %0, i64 0, i32 7, i64 %14, i32 1
  store i32 %83, i32* %84, align 4
  %85 = sub i32 %58, %82
  %86 = getelementptr inbounds %struct.opj_tccp, %struct.opj_tccp* %0, i64 0, i32 7, i64 %14, i32 0
  store i32 %85, i32* %86, align 4
  %87 = add nuw nsw i64 %14, 1
  %88 = icmp eq i64 %87, %11
  br i1 %88, label %89, label %13

89:                                               ; preds = %81, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #5

; Function Attrs: nounwind readnone speculatable
declare double @llvm.floor.f64(double) #6

; Function Attrs: nounwind ssp uwtable
define hidden i32 @opj_dwt_decode_real(%struct.opj_tcd* nocapture readonly, %struct.opj_tcd_tilecomp* noalias nocapture readonly, i32) local_unnamed_addr #0 {
  %4 = alloca %struct.v8dwt_local, align 8
  %5 = alloca %struct.v8dwt_local, align 8
  %6 = alloca %struct.v8dwt_local, align 8
  %7 = alloca %struct.v8dwt_local, align 8
  %8 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 16
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %673, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds %struct.opj_tcd, %struct.opj_tcd* %0, i64 0, i32 11
  %13 = load %struct.opj_thread_pool_t*, %struct.opj_thread_pool_t** %12, align 8
  %14 = bitcast %struct.v8dwt_local* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %14) #10, !noalias !72
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %14, i8 -86, i64 40, i1 false) #10, !noalias !72
  %15 = bitcast %struct.v8dwt_local* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %15) #10, !noalias !72
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %15, i8 -86, i64 40, i1 false) #10, !noalias !72
  %16 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 7
  %17 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %16, align 8, !alias.scope !72
  %18 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %17, i64 0, i32 2
  %19 = load i32, i32* %18, align 8, !noalias !72
  %20 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %17, i64 0, i32 0
  %21 = load i32, i32* %20, align 8, !noalias !72
  %22 = sub nsw i32 %19, %21
  %23 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %17, i64 0, i32 3
  %24 = load i32, i32* %23, align 4, !noalias !72
  %25 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %17, i64 0, i32 1
  %26 = load i32, i32* %25, align 4, !noalias !72
  %27 = sub nsw i32 %24, %26
  %28 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 6
  %29 = load i32, i32* %28, align 8, !alias.scope !72
  %30 = add i32 %29, -1
  %31 = zext i32 %30 to i64
  %32 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %17, i64 %31, i32 2
  %33 = load i32, i32* %32, align 8, !noalias !72
  %34 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %17, i64 %31, i32 0
  %35 = load i32, i32* %34, align 8, !noalias !72
  %36 = sub nsw i32 %33, %35
  %37 = tail call i32 @opj_thread_pool_get_thread_count(%struct.opj_thread_pool_t* %13) #10, !noalias !72
  %38 = icmp eq i32 %2, 1
  br i1 %38, label %1234, label %39

39:                                               ; preds = %11
  %40 = add i32 %2, -1
  %41 = and i32 %40, 1
  %42 = icmp eq i32 %2, 2
  br i1 %42, label %80, label %43

43:                                               ; preds = %39
  %44 = sub i32 %40, %41
  br label %45

45:                                               ; preds = %45, %43
  %46 = phi i32 [ 0, %43 ], [ %77, %45 ]
  %47 = phi %struct.opj_tcd_resolution* [ %17, %43 ], [ %63, %45 ]
  %48 = phi i32 [ %44, %43 ], [ %78, %45 ]
  %49 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %47, i64 1, i32 2
  %50 = load i32, i32* %49, align 8, !alias.scope !75, !noalias !72
  %51 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %47, i64 1, i32 0
  %52 = load i32, i32* %51, align 8, !alias.scope !75, !noalias !72
  %53 = sub nsw i32 %50, %52
  %54 = icmp ult i32 %46, %53
  %55 = select i1 %54, i32 %53, i32 %46
  %56 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %47, i64 1, i32 3
  %57 = load i32, i32* %56, align 4, !alias.scope !75, !noalias !72
  %58 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %47, i64 1, i32 1
  %59 = load i32, i32* %58, align 4, !alias.scope !75, !noalias !72
  %60 = sub nsw i32 %57, %59
  %61 = icmp ult i32 %55, %60
  %62 = select i1 %61, i32 %60, i32 %55
  %63 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %47, i64 2
  %64 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %47, i64 2, i32 2
  %65 = load i32, i32* %64, align 8, !alias.scope !75, !noalias !72
  %66 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %63, i64 0, i32 0
  %67 = load i32, i32* %66, align 8, !alias.scope !75, !noalias !72
  %68 = sub nsw i32 %65, %67
  %69 = icmp ult i32 %62, %68
  %70 = select i1 %69, i32 %68, i32 %62
  %71 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %47, i64 2, i32 3
  %72 = load i32, i32* %71, align 4, !alias.scope !75, !noalias !72
  %73 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %47, i64 2, i32 1
  %74 = load i32, i32* %73, align 4, !alias.scope !75, !noalias !72
  %75 = sub nsw i32 %72, %74
  %76 = icmp ult i32 %70, %75
  %77 = select i1 %76, i32 %75, i32 %70
  %78 = add i32 %48, -2
  %79 = icmp eq i32 %78, 0
  br i1 %79, label %80, label %45

80:                                               ; preds = %45, %39
  %81 = phi i32 [ undef, %39 ], [ %77, %45 ]
  %82 = phi i32 [ 0, %39 ], [ %77, %45 ]
  %83 = phi %struct.opj_tcd_resolution* [ %17, %39 ], [ %63, %45 ]
  %84 = icmp eq i32 %41, 0
  br i1 %84, label %100, label %85

85:                                               ; preds = %80
  %86 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %83, i64 1, i32 2
  %87 = load i32, i32* %86, align 8, !alias.scope !75, !noalias !72
  %88 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %83, i64 1, i32 0
  %89 = load i32, i32* %88, align 8, !alias.scope !75, !noalias !72
  %90 = sub nsw i32 %87, %89
  %91 = icmp ult i32 %82, %90
  %92 = select i1 %91, i32 %90, i32 %82
  %93 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %83, i64 1, i32 3
  %94 = load i32, i32* %93, align 4, !alias.scope !75, !noalias !72
  %95 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %83, i64 1, i32 1
  %96 = load i32, i32* %95, align 4, !alias.scope !75, !noalias !72
  %97 = sub nsw i32 %94, %96
  %98 = icmp ult i32 %92, %97
  %99 = select i1 %98, i32 %97, i32 %92
  br label %100

100:                                              ; preds = %80, %85
  %101 = phi i32 [ %81, %80 ], [ %99, %85 ]
  %102 = zext i32 %101 to i64
  %103 = shl nuw nsw i64 %102, 5
  %104 = tail call i8* @opj_aligned_malloc(i64 %103) #10, !noalias !72
  %105 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %6, i64 0, i32 0
  %106 = bitcast %struct.v8dwt_local* %6 to i8**
  store i8* %104, i8** %106, align 8, !noalias !72
  %107 = icmp eq i8* %104, null
  br i1 %107, label %1234, label %108

108:                                              ; preds = %100
  %109 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %7, i64 0, i32 0
  %110 = bitcast %struct.v8dwt_local* %7 to i8**
  store i8* %104, i8** %110, align 8, !noalias !72
  %111 = icmp eq i32 %40, 0
  br i1 %111, label %671, label %112

112:                                              ; preds = %108
  %113 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 9
  %114 = bitcast i32** %113 to float**
  %115 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %6, i64 0, i32 2
  %116 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %7, i64 0, i32 2
  %117 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %6, i64 0, i32 1
  %118 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %6, i64 0, i32 3
  %119 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %6, i64 0, i32 4
  %120 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %6, i64 0, i32 5
  %121 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %6, i64 0, i32 6
  %122 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %6, i64 0, i32 7
  %123 = icmp slt i32 %37, 2
  %124 = zext i32 %36 to i64
  %125 = shl nuw nsw i64 %124, 1
  %126 = mul nuw nsw i64 %124, 3
  %127 = shl nuw nsw i64 %124, 2
  %128 = mul nuw nsw i64 %124, 5
  %129 = mul nuw nsw i64 %124, 6
  %130 = mul nuw nsw i64 %124, 7
  %131 = shl i32 %36, 3
  %132 = zext i32 %131 to i64
  %133 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %7, i64 0, i32 1
  %134 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %7, i64 0, i32 3
  %135 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %7, i64 0, i32 4
  %136 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %7, i64 0, i32 5
  %137 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %7, i64 0, i32 6
  %138 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %7, i64 0, i32 7
  %139 = lshr i32 %37, 1
  %140 = icmp ugt i32 %139, 2
  %141 = select i1 %140, i32 %139, i32 2
  %142 = load float*, float** %114, align 8, !alias.scope !72
  br label %143

143:                                              ; preds = %666, %112
  %144 = phi i32 [ %40, %112 ], [ %667, %666 ]
  %145 = phi i32 [ %27, %112 ], [ %158, %666 ]
  %146 = phi i32 [ %22, %112 ], [ %153, %666 ]
  %147 = phi %struct.opj_tcd_resolution* [ %17, %112 ], [ %148, %666 ]
  store i32 %146, i32* %115, align 4, !noalias !72
  store i32 %145, i32* %116, align 4, !noalias !72
  %148 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %147, i64 1
  %149 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %147, i64 1, i32 2
  %150 = load i32, i32* %149, align 8, !noalias !72
  %151 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %148, i64 0, i32 0
  %152 = load i32, i32* %151, align 8, !noalias !72
  %153 = sub i32 %150, %152
  %154 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %147, i64 1, i32 3
  %155 = load i32, i32* %154, align 4, !noalias !72
  %156 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %147, i64 1, i32 1
  %157 = load i32, i32* %156, align 4, !noalias !72
  %158 = sub i32 %155, %157
  %159 = sub i32 %153, %146
  store i32 %159, i32* %117, align 8, !noalias !72
  %160 = srem i32 %152, 2
  store i32 %160, i32* %118, align 8, !noalias !72
  store i32 0, i32* %119, align 4, !noalias !72
  store i32 %146, i32* %120, align 8, !noalias !72
  store i32 0, i32* %121, align 4, !noalias !72
  store i32 %159, i32* %122, align 8, !noalias !72
  %161 = icmp ult i32 %158, 16
  %162 = or i1 %123, %161
  br i1 %162, label %163, label %239

163:                                              ; preds = %143
  %164 = icmp ugt i32 %158, 7
  br i1 %164, label %165, label %295

165:                                              ; preds = %163
  %166 = icmp eq i32 %153, 0
  %167 = zext i32 %153 to i64
  br label %168

168:                                              ; preds = %234, %165
  %169 = phi i32 [ 0, %165 ], [ %236, %234 ]
  %170 = phi float* [ %142, %165 ], [ %235, %234 ]
  call fastcc void @opj_v8dwt_interleave_h(%struct.v8dwt_local* nonnull %6, float* %170, i32 %36, i32 8) #10, !noalias !72
  call fastcc void @opj_v8dwt_decode(%struct.v8dwt_local* nonnull %6) #10, !noalias !72
  br i1 %166, label %234, label %171

171:                                              ; preds = %168, %171
  %172 = phi i64 [ %200, %171 ], [ 0, %168 ]
  %173 = load %union.opj_v8_t*, %union.opj_v8_t** %105, align 8, !noalias !72
  %174 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %173, i64 %172, i32 0, i64 0
  %175 = bitcast float* %174 to i32*
  %176 = load i32, i32* %175, align 4, !noalias !72
  %177 = getelementptr inbounds float, float* %170, i64 %172
  %178 = bitcast float* %177 to i32*
  store i32 %176, i32* %178, align 4, !noalias !72
  %179 = load %union.opj_v8_t*, %union.opj_v8_t** %105, align 8, !noalias !72
  %180 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %179, i64 %172, i32 0, i64 1
  %181 = bitcast float* %180 to i32*
  %182 = load i32, i32* %181, align 4, !noalias !72
  %183 = add nuw nsw i64 %172, %124
  %184 = getelementptr inbounds float, float* %170, i64 %183
  %185 = bitcast float* %184 to i32*
  store i32 %182, i32* %185, align 4, !noalias !72
  %186 = load %union.opj_v8_t*, %union.opj_v8_t** %105, align 8, !noalias !72
  %187 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %186, i64 %172, i32 0, i64 2
  %188 = bitcast float* %187 to i32*
  %189 = load i32, i32* %188, align 4, !noalias !72
  %190 = add nuw nsw i64 %172, %125
  %191 = getelementptr inbounds float, float* %170, i64 %190
  %192 = bitcast float* %191 to i32*
  store i32 %189, i32* %192, align 4, !noalias !72
  %193 = load %union.opj_v8_t*, %union.opj_v8_t** %105, align 8, !noalias !72
  %194 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %193, i64 %172, i32 0, i64 3
  %195 = bitcast float* %194 to i32*
  %196 = load i32, i32* %195, align 4, !noalias !72
  %197 = add nuw nsw i64 %172, %126
  %198 = getelementptr inbounds float, float* %170, i64 %197
  %199 = bitcast float* %198 to i32*
  store i32 %196, i32* %199, align 4, !noalias !72
  %200 = add nuw nsw i64 %172, 1
  %201 = icmp eq i64 %200, %167
  br i1 %201, label %202, label %171

202:                                              ; preds = %171, %202
  %203 = phi i64 [ %232, %202 ], [ 0, %171 ]
  %204 = load %union.opj_v8_t*, %union.opj_v8_t** %105, align 8, !noalias !72
  %205 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %204, i64 %203, i32 0, i64 4
  %206 = bitcast float* %205 to i32*
  %207 = load i32, i32* %206, align 4, !noalias !72
  %208 = add nuw nsw i64 %203, %127
  %209 = getelementptr inbounds float, float* %170, i64 %208
  %210 = bitcast float* %209 to i32*
  store i32 %207, i32* %210, align 4, !noalias !72
  %211 = load %union.opj_v8_t*, %union.opj_v8_t** %105, align 8, !noalias !72
  %212 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %211, i64 %203, i32 0, i64 5
  %213 = bitcast float* %212 to i32*
  %214 = load i32, i32* %213, align 4, !noalias !72
  %215 = add nuw nsw i64 %203, %128
  %216 = getelementptr inbounds float, float* %170, i64 %215
  %217 = bitcast float* %216 to i32*
  store i32 %214, i32* %217, align 4, !noalias !72
  %218 = load %union.opj_v8_t*, %union.opj_v8_t** %105, align 8, !noalias !72
  %219 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %218, i64 %203, i32 0, i64 6
  %220 = bitcast float* %219 to i32*
  %221 = load i32, i32* %220, align 4, !noalias !72
  %222 = add nuw nsw i64 %203, %129
  %223 = getelementptr inbounds float, float* %170, i64 %222
  %224 = bitcast float* %223 to i32*
  store i32 %221, i32* %224, align 4, !noalias !72
  %225 = load %union.opj_v8_t*, %union.opj_v8_t** %105, align 8, !noalias !72
  %226 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %225, i64 %203, i32 0, i64 7
  %227 = bitcast float* %226 to i32*
  %228 = load i32, i32* %227, align 4, !noalias !72
  %229 = add nuw nsw i64 %203, %130
  %230 = getelementptr inbounds float, float* %170, i64 %229
  %231 = bitcast float* %230 to i32*
  store i32 %228, i32* %231, align 4, !noalias !72
  %232 = add nuw nsw i64 %203, 1
  %233 = icmp eq i64 %232, %167
  br i1 %233, label %234, label %202

234:                                              ; preds = %202, %168
  %235 = getelementptr inbounds float, float* %170, i64 %132
  %236 = add i32 %169, 8
  %237 = or i32 %236, 7
  %238 = icmp ult i32 %237, %158
  br i1 %238, label %168, label %295

239:                                              ; preds = %143
  %240 = lshr i32 %158, 3
  %241 = icmp ult i32 %240, %37
  %242 = select i1 %241, i32 %240, i32 %37
  %243 = udiv i32 %158, %242
  %244 = and i32 %243, -8
  %245 = icmp eq i32 %242, 0
  %246 = and i32 %158, -8
  br i1 %245, label %293, label %247

247:                                              ; preds = %239, %260
  %248 = phi i32 [ %281, %260 ], [ 0, %239 ]
  %249 = phi float* [ %290, %260 ], [ %142, %239 ]
  %250 = tail call i8* @opj_malloc(i64 64) #10, !noalias !72
  %251 = icmp eq i8* %250, null
  br i1 %251, label %252, label %254

252:                                              ; preds = %247
  tail call void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t* %13, i32 0) #10, !noalias !72
  %253 = load i8*, i8** %106, align 8, !noalias !72
  tail call void @opj_aligned_free(i8* %253) #10, !noalias !72
  br label %1234

254:                                              ; preds = %247
  %255 = tail call i8* @opj_aligned_malloc(i64 %103) #10, !noalias !72
  %256 = bitcast i8* %250 to i8**
  store i8* %255, i8** %256, align 8, !noalias !72
  %257 = icmp eq i8* %255, null
  br i1 %257, label %258, label %260

258:                                              ; preds = %254
  tail call void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t* %13, i32 0) #10, !noalias !72
  tail call void @opj_free(i8* nonnull %250) #10, !noalias !72
  %259 = load i8*, i8** %106, align 8, !noalias !72
  tail call void @opj_aligned_free(i8* %259) #10, !noalias !72
  br label %1234

260:                                              ; preds = %254
  %261 = getelementptr inbounds i8, i8* %250, i64 8
  %262 = bitcast i8* %261 to i32*
  store i32 %159, i32* %262, align 8, !noalias !72
  %263 = getelementptr inbounds i8, i8* %250, i64 12
  %264 = bitcast i8* %263 to i32*
  store i32 %146, i32* %264, align 4, !noalias !72
  %265 = getelementptr inbounds i8, i8* %250, i64 16
  %266 = bitcast i8* %265 to i32*
  store i32 %160, i32* %266, align 8, !noalias !72
  %267 = getelementptr inbounds i8, i8* %250, i64 20
  %268 = bitcast i8* %267 to i32*
  store i32 0, i32* %268, align 4, !noalias !72
  %269 = getelementptr inbounds i8, i8* %250, i64 24
  %270 = bitcast i8* %269 to i32*
  store i32 %146, i32* %270, align 8, !noalias !72
  %271 = getelementptr inbounds i8, i8* %250, i64 28
  %272 = bitcast i8* %271 to i32*
  store i32 0, i32* %272, align 4, !noalias !72
  %273 = getelementptr inbounds i8, i8* %250, i64 32
  %274 = bitcast i8* %273 to i32*
  store i32 %159, i32* %274, align 8, !noalias !72
  %275 = getelementptr inbounds i8, i8* %250, i64 40
  %276 = bitcast i8* %275 to i32*
  store i32 %153, i32* %276, align 8, !noalias !72
  %277 = getelementptr inbounds i8, i8* %250, i64 44
  %278 = bitcast i8* %277 to i32*
  store i32 %36, i32* %278, align 4, !noalias !72
  %279 = getelementptr inbounds i8, i8* %250, i64 48
  %280 = bitcast i8* %279 to float**
  store float* %249, float** %280, align 8, !noalias !72
  %281 = add nuw i32 %248, 1
  %282 = icmp eq i32 %281, %242
  %283 = mul i32 %248, %244
  %284 = sub i32 %246, %283
  %285 = select i1 %282, i32 %284, i32 %244
  %286 = getelementptr inbounds i8, i8* %250, i64 56
  %287 = bitcast i8* %286 to i32*
  store i32 %285, i32* %287, align 8, !noalias !72
  %288 = mul i32 %285, %36
  %289 = zext i32 %288 to i64
  %290 = getelementptr inbounds float, float* %249, i64 %289
  %291 = tail call i32 @opj_thread_pool_submit_job(%struct.opj_thread_pool_t* %13, void (i8*, %struct.opj_tls_t*)* nonnull @opj_dwt97_decode_h_func, i8* nonnull %250) #10, !noalias !72
  %292 = icmp ult i32 %281, %242
  br i1 %292, label %247, label %293

293:                                              ; preds = %260, %239
  %294 = phi float* [ %142, %239 ], [ %290, %260 ]
  tail call void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t* %13, i32 0) #10, !noalias !72
  br label %295

295:                                              ; preds = %234, %293, %163
  %296 = phi float* [ %294, %293 ], [ %142, %163 ], [ %235, %234 ]
  %297 = phi i32 [ %246, %293 ], [ 0, %163 ], [ %236, %234 ]
  %298 = icmp ugt i32 %158, %297
  br i1 %298, label %299, label %348

299:                                              ; preds = %295
  %300 = sub i32 %158, %297
  call fastcc void @opj_v8dwt_interleave_h(%struct.v8dwt_local* nonnull %6, float* %296, i32 %36, i32 %300) #10, !noalias !72
  call fastcc void @opj_v8dwt_decode(%struct.v8dwt_local* nonnull %6) #10, !noalias !72
  %301 = icmp eq i32 %153, 0
  br i1 %301, label %348, label %302

302:                                              ; preds = %299
  %303 = zext i32 %153 to i64
  %304 = zext i32 %300 to i64
  %305 = and i64 %304, 1
  %306 = icmp eq i32 %300, 1
  %307 = sub nsw i64 %304, %305
  %308 = icmp eq i64 %305, 0
  br label %309

309:                                              ; preds = %345, %302
  %310 = phi i64 [ 0, %302 ], [ %346, %345 ]
  switch i32 %300, label %311 [
    i32 0, label %345
    i32 1, label %334
  ]

311:                                              ; preds = %309, %311
  %312 = phi i64 [ %331, %311 ], [ 0, %309 ]
  %313 = phi i64 [ %332, %311 ], [ %307, %309 ]
  %314 = load %union.opj_v8_t*, %union.opj_v8_t** %105, align 8, !noalias !72
  %315 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %314, i64 %310, i32 0, i64 %312
  %316 = bitcast float* %315 to i32*
  %317 = load i32, i32* %316, align 4, !noalias !72
  %318 = mul nuw i64 %312, %124
  %319 = add nuw i64 %318, %310
  %320 = getelementptr inbounds float, float* %296, i64 %319
  %321 = bitcast float* %320 to i32*
  store i32 %317, i32* %321, align 4, !noalias !72
  %322 = or i64 %312, 1
  %323 = load %union.opj_v8_t*, %union.opj_v8_t** %105, align 8, !noalias !72
  %324 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %323, i64 %310, i32 0, i64 %322
  %325 = bitcast float* %324 to i32*
  %326 = load i32, i32* %325, align 4, !noalias !72
  %327 = mul nuw i64 %322, %124
  %328 = add nuw i64 %327, %310
  %329 = getelementptr inbounds float, float* %296, i64 %328
  %330 = bitcast float* %329 to i32*
  store i32 %326, i32* %330, align 4, !noalias !72
  %331 = add nuw nsw i64 %312, 2
  %332 = add i64 %313, -2
  %333 = icmp eq i64 %332, 0
  br i1 %333, label %334, label %311

334:                                              ; preds = %311, %309
  %335 = phi i64 [ 0, %309 ], [ %331, %311 ]
  br i1 %308, label %345, label %336

336:                                              ; preds = %334
  %337 = load %union.opj_v8_t*, %union.opj_v8_t** %105, align 8, !noalias !72
  %338 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %337, i64 %310, i32 0, i64 %335
  %339 = bitcast float* %338 to i32*
  %340 = load i32, i32* %339, align 4, !noalias !72
  %341 = mul nuw i64 %335, %124
  %342 = add nuw i64 %341, %310
  %343 = getelementptr inbounds float, float* %296, i64 %342
  %344 = bitcast float* %343 to i32*
  store i32 %340, i32* %344, align 4, !noalias !72
  br label %345

345:                                              ; preds = %336, %334, %309
  %346 = add nuw nsw i64 %310, 1
  %347 = icmp eq i64 %346, %303
  br i1 %347, label %348, label %309

348:                                              ; preds = %345, %299, %295
  %349 = load i32, i32* %116, align 4, !noalias !72
  %350 = sub i32 %158, %349
  store i32 %350, i32* %133, align 8, !noalias !72
  %351 = load i32, i32* %156, align 4, !noalias !72
  %352 = srem i32 %351, 2
  store i32 %352, i32* %134, align 8, !noalias !72
  store i32 0, i32* %135, align 4, !noalias !72
  store i32 %349, i32* %136, align 8, !noalias !72
  store i32 0, i32* %137, align 4, !noalias !72
  store i32 %350, i32* %138, align 8, !noalias !72
  %353 = icmp ult i32 %153, 16
  %354 = or i1 %123, %353
  br i1 %354, label %355, label %477

355:                                              ; preds = %348
  %356 = icmp ugt i32 %153, 7
  br i1 %356, label %357, label %533

357:                                              ; preds = %355
  %358 = load %union.opj_v8_t*, %union.opj_v8_t** %109, align 8, !alias.scope !78, !noalias !81
  %359 = sext i32 %352 to i64
  %360 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %358, i64 %359
  %361 = zext i32 %349 to i64
  %362 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %358, i64 1
  %363 = sub nsw i64 0, %359
  %364 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %362, i64 %363
  %365 = zext i32 %350 to i64
  %366 = zext i32 %158 to i64
  %367 = mul nuw i64 %361, %124
  %368 = and i64 %361, 1
  %369 = icmp eq i32 %349, 1
  %370 = sub nsw i64 %361, %368
  %371 = icmp eq i64 %368, 0
  %372 = and i64 %365, 1
  %373 = icmp eq i32 %350, 1
  %374 = sub nsw i64 %365, %372
  %375 = icmp eq i64 %372, 0
  %376 = and i64 %366, 1
  %377 = icmp eq i32 %158, 1
  %378 = sub nsw i64 %366, %376
  %379 = icmp eq i64 %376, 0
  br label %380

380:                                              ; preds = %473, %357
  %381 = phi i32 [ %153, %357 ], [ %475, %473 ]
  %382 = phi float* [ %142, %357 ], [ %474, %473 ]
  switch i32 %349, label %383 [
    i32 0, label %414
    i32 1, label %404
  ]

383:                                              ; preds = %380, %383
  %384 = phi i64 [ %401, %383 ], [ 0, %380 ]
  %385 = phi i64 [ %402, %383 ], [ %370, %380 ]
  %386 = shl nuw i64 %384, 1
  %387 = and i64 %386, 4294967292
  %388 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %360, i64 %387
  %389 = bitcast %union.opj_v8_t* %388 to i8*
  %390 = mul nuw i64 %384, %124
  %391 = getelementptr inbounds float, float* %382, i64 %390
  %392 = bitcast float* %391 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %389, i8* align 4 %392, i64 32, i1 false) #10, !noalias !83
  %393 = or i64 %384, 1
  %394 = shl nuw i64 %393, 1
  %395 = and i64 %394, 4294967294
  %396 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %360, i64 %395
  %397 = bitcast %union.opj_v8_t* %396 to i8*
  %398 = mul nuw i64 %393, %124
  %399 = getelementptr inbounds float, float* %382, i64 %398
  %400 = bitcast float* %399 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %397, i8* align 4 %400, i64 32, i1 false) #10, !noalias !83
  %401 = add nuw nsw i64 %384, 2
  %402 = add i64 %385, -2
  %403 = icmp eq i64 %402, 0
  br i1 %403, label %404, label %383

404:                                              ; preds = %383, %380
  %405 = phi i64 [ 0, %380 ], [ %401, %383 ]
  br i1 %371, label %414, label %406

406:                                              ; preds = %404
  %407 = shl nuw i64 %405, 1
  %408 = and i64 %407, 4294967294
  %409 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %360, i64 %408
  %410 = bitcast %union.opj_v8_t* %409 to i8*
  %411 = mul nuw i64 %405, %124
  %412 = getelementptr inbounds float, float* %382, i64 %411
  %413 = bitcast float* %412 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %410, i8* align 4 %413, i64 32, i1 false) #10, !noalias !83
  br label %414

414:                                              ; preds = %406, %404, %380
  %415 = getelementptr inbounds float, float* %382, i64 %367
  switch i32 %350, label %416 [
    i32 0, label %447
    i32 1, label %437
  ]

416:                                              ; preds = %414, %416
  %417 = phi i64 [ %434, %416 ], [ 0, %414 ]
  %418 = phi i64 [ %435, %416 ], [ %374, %414 ]
  %419 = shl nuw i64 %417, 1
  %420 = and i64 %419, 4294967292
  %421 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %364, i64 %420
  %422 = bitcast %union.opj_v8_t* %421 to i8*
  %423 = mul nuw i64 %417, %124
  %424 = getelementptr inbounds float, float* %415, i64 %423
  %425 = bitcast float* %424 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %422, i8* align 4 %425, i64 32, i1 false) #10, !noalias !83
  %426 = or i64 %417, 1
  %427 = shl nuw i64 %426, 1
  %428 = and i64 %427, 4294967294
  %429 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %364, i64 %428
  %430 = bitcast %union.opj_v8_t* %429 to i8*
  %431 = mul nuw i64 %426, %124
  %432 = getelementptr inbounds float, float* %415, i64 %431
  %433 = bitcast float* %432 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %430, i8* align 4 %433, i64 32, i1 false) #10, !noalias !83
  %434 = add nuw nsw i64 %417, 2
  %435 = add i64 %418, -2
  %436 = icmp eq i64 %435, 0
  br i1 %436, label %437, label %416

437:                                              ; preds = %416, %414
  %438 = phi i64 [ 0, %414 ], [ %434, %416 ]
  br i1 %375, label %447, label %439

439:                                              ; preds = %437
  %440 = shl nuw i64 %438, 1
  %441 = and i64 %440, 4294967294
  %442 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %364, i64 %441
  %443 = bitcast %union.opj_v8_t* %442 to i8*
  %444 = mul nuw i64 %438, %124
  %445 = getelementptr inbounds float, float* %415, i64 %444
  %446 = bitcast float* %445 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %443, i8* align 4 %446, i64 32, i1 false) #10, !noalias !83
  br label %447

447:                                              ; preds = %439, %437, %414
  call fastcc void @opj_v8dwt_decode(%struct.v8dwt_local* nonnull %7) #10, !noalias !72
  switch i32 %158, label %448 [
    i32 0, label %473
    i32 1, label %465
  ]

448:                                              ; preds = %447, %448
  %449 = phi i64 [ %462, %448 ], [ 0, %447 ]
  %450 = phi i64 [ %463, %448 ], [ %378, %447 ]
  %451 = mul nuw i64 %449, %124
  %452 = getelementptr inbounds float, float* %382, i64 %451
  %453 = bitcast float* %452 to i8*
  %454 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %358, i64 %449
  %455 = bitcast %union.opj_v8_t* %454 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %453, i8* align 4 %455, i64 32, i1 false) #10, !noalias !72
  %456 = or i64 %449, 1
  %457 = mul nuw i64 %456, %124
  %458 = getelementptr inbounds float, float* %382, i64 %457
  %459 = bitcast float* %458 to i8*
  %460 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %358, i64 %456
  %461 = bitcast %union.opj_v8_t* %460 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %459, i8* align 4 %461, i64 32, i1 false) #10, !noalias !72
  %462 = add nuw nsw i64 %449, 2
  %463 = add i64 %450, -2
  %464 = icmp eq i64 %463, 0
  br i1 %464, label %465, label %448

465:                                              ; preds = %448, %447
  %466 = phi i64 [ 0, %447 ], [ %462, %448 ]
  br i1 %379, label %473, label %467

467:                                              ; preds = %465
  %468 = mul nuw i64 %466, %124
  %469 = getelementptr inbounds float, float* %382, i64 %468
  %470 = bitcast float* %469 to i8*
  %471 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %358, i64 %466
  %472 = bitcast %union.opj_v8_t* %471 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %470, i8* align 4 %472, i64 32, i1 false) #10, !noalias !72
  br label %473

473:                                              ; preds = %467, %465, %447
  %474 = getelementptr inbounds float, float* %382, i64 8
  %475 = add i32 %381, -8
  %476 = icmp ugt i32 %475, 7
  br i1 %476, label %380, label %533

477:                                              ; preds = %348
  %478 = lshr i32 %153, 3
  %479 = icmp ult i32 %478, %141
  %480 = select i1 %479, i32 %478, i32 %141
  %481 = udiv i32 %153, %480
  %482 = and i32 %481, -8
  %483 = icmp eq i32 %480, 0
  br i1 %483, label %531, label %484

484:                                              ; preds = %477
  %485 = and i32 %153, -8
  br label %486

486:                                              ; preds = %499, %484
  %487 = phi i32 [ 0, %484 ], [ %520, %499 ]
  %488 = phi float* [ %142, %484 ], [ %528, %499 ]
  %489 = tail call i8* @opj_malloc(i64 64) #10, !noalias !72
  %490 = icmp eq i8* %489, null
  br i1 %490, label %491, label %493

491:                                              ; preds = %486
  tail call void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t* %13, i32 0) #10, !noalias !72
  %492 = load i8*, i8** %106, align 8, !noalias !72
  tail call void @opj_aligned_free(i8* %492) #10, !noalias !72
  br label %1234

493:                                              ; preds = %486
  %494 = tail call i8* @opj_aligned_malloc(i64 %103) #10, !noalias !72
  %495 = bitcast i8* %489 to i8**
  store i8* %494, i8** %495, align 8, !noalias !72
  %496 = icmp eq i8* %494, null
  br i1 %496, label %497, label %499

497:                                              ; preds = %493
  tail call void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t* %13, i32 0) #10, !noalias !72
  tail call void @opj_free(i8* nonnull %489) #10, !noalias !72
  %498 = load i8*, i8** %106, align 8, !noalias !72
  tail call void @opj_aligned_free(i8* %498) #10, !noalias !72
  br label %1234

499:                                              ; preds = %493
  %500 = getelementptr inbounds i8, i8* %489, i64 8
  %501 = bitcast i8* %500 to i32*
  store i32 %350, i32* %501, align 8, !noalias !72
  %502 = getelementptr inbounds i8, i8* %489, i64 12
  %503 = bitcast i8* %502 to i32*
  store i32 %349, i32* %503, align 4, !noalias !72
  %504 = getelementptr inbounds i8, i8* %489, i64 16
  %505 = bitcast i8* %504 to i32*
  store i32 %352, i32* %505, align 8, !noalias !72
  %506 = getelementptr inbounds i8, i8* %489, i64 20
  %507 = bitcast i8* %506 to i32*
  store i32 0, i32* %507, align 4, !noalias !72
  %508 = getelementptr inbounds i8, i8* %489, i64 24
  %509 = bitcast i8* %508 to i32*
  store i32 %349, i32* %509, align 8, !noalias !72
  %510 = getelementptr inbounds i8, i8* %489, i64 28
  %511 = bitcast i8* %510 to i32*
  store i32 0, i32* %511, align 4, !noalias !72
  %512 = getelementptr inbounds i8, i8* %489, i64 32
  %513 = bitcast i8* %512 to i32*
  store i32 %350, i32* %513, align 8, !noalias !72
  %514 = getelementptr inbounds i8, i8* %489, i64 40
  %515 = bitcast i8* %514 to i32*
  store i32 %158, i32* %515, align 8, !noalias !72
  %516 = getelementptr inbounds i8, i8* %489, i64 44
  %517 = bitcast i8* %516 to i32*
  store i32 %36, i32* %517, align 4, !noalias !72
  %518 = getelementptr inbounds i8, i8* %489, i64 48
  %519 = bitcast i8* %518 to float**
  store float* %488, float** %519, align 8, !noalias !72
  %520 = add nuw i32 %487, 1
  %521 = icmp eq i32 %520, %480
  %522 = mul i32 %487, %482
  %523 = sub i32 %485, %522
  %524 = select i1 %521, i32 %523, i32 %482
  %525 = getelementptr inbounds i8, i8* %489, i64 56
  %526 = bitcast i8* %525 to i32*
  store i32 %524, i32* %526, align 8, !noalias !72
  %527 = zext i32 %524 to i64
  %528 = getelementptr inbounds float, float* %488, i64 %527
  %529 = tail call i32 @opj_thread_pool_submit_job(%struct.opj_thread_pool_t* %13, void (i8*, %struct.opj_tls_t*)* nonnull @opj_dwt97_decode_v_func, i8* nonnull %489) #10, !noalias !72
  %530 = icmp ult i32 %520, %480
  br i1 %530, label %486, label %531

531:                                              ; preds = %499, %477
  %532 = phi float* [ %142, %477 ], [ %528, %499 ]
  tail call void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t* %13, i32 0) #10, !noalias !72
  br label %533

533:                                              ; preds = %473, %531, %355
  %534 = phi float* [ %532, %531 ], [ %142, %355 ], [ %474, %473 ]
  %535 = and i32 %153, 7
  %536 = icmp eq i32 %535, 0
  br i1 %536, label %666, label %537

537:                                              ; preds = %533
  %538 = load %union.opj_v8_t*, %union.opj_v8_t** %109, align 8, !alias.scope !84, !noalias !87
  %539 = sext i32 %352 to i64
  %540 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %538, i64 %539
  %541 = icmp eq i32 %349, 0
  br i1 %541, label %582, label %542

542:                                              ; preds = %537
  %543 = shl nuw nsw i32 %535, 2
  %544 = zext i32 %543 to i64
  %545 = zext i32 %349 to i64
  %546 = and i64 %545, 1
  %547 = icmp eq i32 %349, 1
  br i1 %547, label %571, label %548

548:                                              ; preds = %542
  %549 = sub nsw i64 %545, %546
  br label %550

550:                                              ; preds = %550, %548
  %551 = phi i64 [ 0, %548 ], [ %568, %550 ]
  %552 = phi i64 [ %549, %548 ], [ %569, %550 ]
  %553 = shl nuw i64 %551, 1
  %554 = and i64 %553, 4294967292
  %555 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %540, i64 %554
  %556 = bitcast %union.opj_v8_t* %555 to i8*
  %557 = mul nuw i64 %551, %124
  %558 = getelementptr inbounds float, float* %534, i64 %557
  %559 = bitcast float* %558 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %556, i8* align 4 %559, i64 %544, i1 false) #10, !noalias !89
  %560 = or i64 %551, 1
  %561 = shl nuw i64 %560, 1
  %562 = and i64 %561, 4294967294
  %563 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %540, i64 %562
  %564 = bitcast %union.opj_v8_t* %563 to i8*
  %565 = mul nuw i64 %560, %124
  %566 = getelementptr inbounds float, float* %534, i64 %565
  %567 = bitcast float* %566 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %564, i8* align 4 %567, i64 %544, i1 false) #10, !noalias !89
  %568 = add nuw nsw i64 %551, 2
  %569 = add i64 %552, -2
  %570 = icmp eq i64 %569, 0
  br i1 %570, label %571, label %550

571:                                              ; preds = %550, %542
  %572 = phi i64 [ 0, %542 ], [ %568, %550 ]
  %573 = icmp eq i64 %546, 0
  br i1 %573, label %582, label %574

574:                                              ; preds = %571
  %575 = shl nuw i64 %572, 1
  %576 = and i64 %575, 4294967294
  %577 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %540, i64 %576
  %578 = bitcast %union.opj_v8_t* %577 to i8*
  %579 = mul nuw i64 %572, %124
  %580 = getelementptr inbounds float, float* %534, i64 %579
  %581 = bitcast float* %580 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %578, i8* align 4 %581, i64 %544, i1 false) #10, !noalias !89
  br label %582

582:                                              ; preds = %574, %571, %537
  %583 = phi i64 [ 0, %537 ], [ %545, %571 ], [ %545, %574 ]
  %584 = mul nuw i64 %583, %124
  %585 = getelementptr inbounds float, float* %534, i64 %584
  %586 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %538, i64 1
  %587 = sub nsw i64 0, %539
  %588 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %586, i64 %587
  %589 = icmp eq i32 %350, 0
  br i1 %589, label %630, label %590

590:                                              ; preds = %582
  %591 = shl nuw nsw i32 %535, 2
  %592 = zext i32 %591 to i64
  %593 = zext i32 %350 to i64
  %594 = and i64 %593, 1
  %595 = icmp eq i32 %350, 1
  br i1 %595, label %619, label %596

596:                                              ; preds = %590
  %597 = sub nsw i64 %593, %594
  br label %598

598:                                              ; preds = %598, %596
  %599 = phi i64 [ 0, %596 ], [ %616, %598 ]
  %600 = phi i64 [ %597, %596 ], [ %617, %598 ]
  %601 = shl nuw i64 %599, 1
  %602 = and i64 %601, 4294967292
  %603 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %588, i64 %602
  %604 = bitcast %union.opj_v8_t* %603 to i8*
  %605 = mul nuw i64 %599, %124
  %606 = getelementptr inbounds float, float* %585, i64 %605
  %607 = bitcast float* %606 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %604, i8* align 4 %607, i64 %592, i1 false) #10, !noalias !89
  %608 = or i64 %599, 1
  %609 = shl nuw i64 %608, 1
  %610 = and i64 %609, 4294967294
  %611 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %588, i64 %610
  %612 = bitcast %union.opj_v8_t* %611 to i8*
  %613 = mul nuw i64 %608, %124
  %614 = getelementptr inbounds float, float* %585, i64 %613
  %615 = bitcast float* %614 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %612, i8* align 4 %615, i64 %592, i1 false) #10, !noalias !89
  %616 = add nuw nsw i64 %599, 2
  %617 = add i64 %600, -2
  %618 = icmp eq i64 %617, 0
  br i1 %618, label %619, label %598

619:                                              ; preds = %598, %590
  %620 = phi i64 [ 0, %590 ], [ %616, %598 ]
  %621 = icmp eq i64 %594, 0
  br i1 %621, label %630, label %622

622:                                              ; preds = %619
  %623 = shl nuw i64 %620, 1
  %624 = and i64 %623, 4294967294
  %625 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %588, i64 %624
  %626 = bitcast %union.opj_v8_t* %625 to i8*
  %627 = mul nuw i64 %620, %124
  %628 = getelementptr inbounds float, float* %585, i64 %627
  %629 = bitcast float* %628 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %626, i8* align 4 %629, i64 %592, i1 false) #10, !noalias !89
  br label %630

630:                                              ; preds = %622, %619, %582
  call fastcc void @opj_v8dwt_decode(%struct.v8dwt_local* nonnull %7) #10, !noalias !72
  %631 = icmp eq i32 %158, 0
  br i1 %631, label %666, label %632

632:                                              ; preds = %630
  %633 = shl nuw nsw i32 %535, 2
  %634 = zext i32 %633 to i64
  %635 = zext i32 %158 to i64
  %636 = and i64 %635, 1
  %637 = icmp eq i32 %158, 1
  br i1 %637, label %657, label %638

638:                                              ; preds = %632
  %639 = sub nsw i64 %635, %636
  br label %640

640:                                              ; preds = %640, %638
  %641 = phi i64 [ 0, %638 ], [ %654, %640 ]
  %642 = phi i64 [ %639, %638 ], [ %655, %640 ]
  %643 = mul nuw i64 %641, %124
  %644 = getelementptr inbounds float, float* %534, i64 %643
  %645 = bitcast float* %644 to i8*
  %646 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %538, i64 %641
  %647 = bitcast %union.opj_v8_t* %646 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %645, i8* align 4 %647, i64 %634, i1 false) #10, !noalias !72
  %648 = or i64 %641, 1
  %649 = mul nuw i64 %648, %124
  %650 = getelementptr inbounds float, float* %534, i64 %649
  %651 = bitcast float* %650 to i8*
  %652 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %538, i64 %648
  %653 = bitcast %union.opj_v8_t* %652 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %651, i8* align 4 %653, i64 %634, i1 false) #10, !noalias !72
  %654 = add nuw nsw i64 %641, 2
  %655 = add i64 %642, -2
  %656 = icmp eq i64 %655, 0
  br i1 %656, label %657, label %640

657:                                              ; preds = %640, %632
  %658 = phi i64 [ 0, %632 ], [ %654, %640 ]
  %659 = icmp eq i64 %636, 0
  br i1 %659, label %666, label %660

660:                                              ; preds = %657
  %661 = mul nuw i64 %658, %124
  %662 = getelementptr inbounds float, float* %534, i64 %661
  %663 = bitcast float* %662 to i8*
  %664 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %538, i64 %658
  %665 = bitcast %union.opj_v8_t* %664 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %663, i8* align 4 %665, i64 %634, i1 false) #10, !noalias !72
  br label %666

666:                                              ; preds = %660, %657, %630, %533
  %667 = add i32 %144, -1
  %668 = icmp eq i32 %667, 0
  br i1 %668, label %669, label %143

669:                                              ; preds = %666
  %670 = load i8*, i8** %106, align 8, !noalias !72
  br label %671

671:                                              ; preds = %669, %108
  %672 = phi i8* [ %670, %669 ], [ %104, %108 ]
  tail call void @opj_aligned_free(i8* %672) #10, !noalias !72
  br label %1234

673:                                              ; preds = %3
  %674 = bitcast %struct.v8dwt_local* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %674) #10, !noalias !90
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %674, i8 -86, i64 40, i1 false) #10, !noalias !90
  %675 = bitcast %struct.v8dwt_local* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %675) #10, !noalias !90
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %675, i8 -86, i64 40, i1 false) #10, !noalias !90
  %676 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 7
  %677 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %676, align 8, !alias.scope !90
  %678 = add i32 %2, -1
  %679 = zext i32 %678 to i64
  %680 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %677, i64 0, i32 2
  %681 = load i32, i32* %680, align 8, !noalias !90
  %682 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %677, i64 0, i32 0
  %683 = load i32, i32* %682, align 8, !noalias !90
  %684 = sub nsw i32 %681, %683
  %685 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %677, i64 0, i32 3
  %686 = load i32, i32* %685, align 4, !noalias !90
  %687 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %677, i64 0, i32 1
  %688 = load i32, i32* %687, align 4, !noalias !90
  %689 = sub nsw i32 %686, %688
  %690 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 14
  %691 = load i32, i32* %690, align 8, !alias.scope !90
  %692 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 15
  %693 = load i32, i32* %692, align 4, !alias.scope !90
  %694 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 16
  %695 = load i32, i32* %694, align 8, !alias.scope !90
  %696 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 17
  %697 = load i32, i32* %696, align 4, !alias.scope !90
  %698 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %677, i64 %679, i32 0
  %699 = load i32, i32* %698, align 8, !noalias !90
  %700 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %677, i64 %679, i32 2
  %701 = load i32, i32* %700, align 8, !noalias !90
  %702 = icmp eq i32 %699, %701
  br i1 %702, label %1234, label %703

703:                                              ; preds = %673
  %704 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %677, i64 %679, i32 1
  %705 = load i32, i32* %704, align 4, !noalias !90
  %706 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %677, i64 %679, i32 3
  %707 = load i32, i32* %706, align 4, !noalias !90
  %708 = icmp eq i32 %705, %707
  br i1 %708, label %1234, label %709

709:                                              ; preds = %703
  %710 = tail call fastcc %struct.opj_sparse_array_int32* @opj_dwt_init_sparse_array(%struct.opj_tcd_tilecomp* %1, i32 %2) #10
  %711 = icmp eq %struct.opj_sparse_array_int32* %710, null
  br i1 %711, label %1234, label %712

712:                                              ; preds = %709
  %713 = icmp eq i32 %2, 1
  br i1 %713, label %714, label %733

714:                                              ; preds = %712
  %715 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %677, i64 %679, i32 8
  %716 = load i32, i32* %715, align 8, !noalias !90
  %717 = load i32, i32* %698, align 8, !noalias !90
  %718 = sub i32 %716, %717
  %719 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %677, i64 %679, i32 9
  %720 = load i32, i32* %719, align 4, !noalias !90
  %721 = load i32, i32* %704, align 4, !noalias !90
  %722 = sub i32 %720, %721
  %723 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %677, i64 %679, i32 10
  %724 = load i32, i32* %723, align 8, !noalias !90
  %725 = sub i32 %724, %717
  %726 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %677, i64 %679, i32 11
  %727 = load i32, i32* %726, align 4, !noalias !90
  %728 = sub i32 %727, %721
  %729 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 13
  %730 = load i32*, i32** %729, align 8, !alias.scope !90
  %731 = sub i32 %724, %716
  %732 = tail call i32 @opj_sparse_array_int32_read(%struct.opj_sparse_array_int32* nonnull %710, i32 %718, i32 %722, i32 %725, i32 %728, i32* %730, i32 1, i32 %731, i32 1) #10, !noalias !90
  tail call void @opj_sparse_array_int32_free(%struct.opj_sparse_array_int32* nonnull %710) #10, !noalias !90
  br label %1234

733:                                              ; preds = %712
  %734 = icmp eq i32 %678, 0
  br i1 %734, label %799, label %735

735:                                              ; preds = %733
  %736 = and i32 %678, 1
  %737 = icmp eq i32 %2, 2
  br i1 %737, label %775, label %738

738:                                              ; preds = %735
  %739 = sub i32 %678, %736
  br label %740

740:                                              ; preds = %740, %738
  %741 = phi i32 [ 0, %738 ], [ %772, %740 ]
  %742 = phi %struct.opj_tcd_resolution* [ %677, %738 ], [ %758, %740 ]
  %743 = phi i32 [ %739, %738 ], [ %773, %740 ]
  %744 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %742, i64 1, i32 2
  %745 = load i32, i32* %744, align 8, !alias.scope !93, !noalias !90
  %746 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %742, i64 1, i32 0
  %747 = load i32, i32* %746, align 8, !alias.scope !93, !noalias !90
  %748 = sub nsw i32 %745, %747
  %749 = icmp ult i32 %741, %748
  %750 = select i1 %749, i32 %748, i32 %741
  %751 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %742, i64 1, i32 3
  %752 = load i32, i32* %751, align 4, !alias.scope !93, !noalias !90
  %753 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %742, i64 1, i32 1
  %754 = load i32, i32* %753, align 4, !alias.scope !93, !noalias !90
  %755 = sub nsw i32 %752, %754
  %756 = icmp ult i32 %750, %755
  %757 = select i1 %756, i32 %755, i32 %750
  %758 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %742, i64 2
  %759 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %742, i64 2, i32 2
  %760 = load i32, i32* %759, align 8, !alias.scope !93, !noalias !90
  %761 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %758, i64 0, i32 0
  %762 = load i32, i32* %761, align 8, !alias.scope !93, !noalias !90
  %763 = sub nsw i32 %760, %762
  %764 = icmp ult i32 %757, %763
  %765 = select i1 %764, i32 %763, i32 %757
  %766 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %742, i64 2, i32 3
  %767 = load i32, i32* %766, align 4, !alias.scope !93, !noalias !90
  %768 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %742, i64 2, i32 1
  %769 = load i32, i32* %768, align 4, !alias.scope !93, !noalias !90
  %770 = sub nsw i32 %767, %769
  %771 = icmp ult i32 %765, %770
  %772 = select i1 %771, i32 %770, i32 %765
  %773 = add i32 %743, -2
  %774 = icmp eq i32 %773, 0
  br i1 %774, label %775, label %740

775:                                              ; preds = %740, %735
  %776 = phi i32 [ undef, %735 ], [ %772, %740 ]
  %777 = phi i32 [ 0, %735 ], [ %772, %740 ]
  %778 = phi %struct.opj_tcd_resolution* [ %677, %735 ], [ %758, %740 ]
  %779 = icmp eq i32 %736, 0
  br i1 %779, label %795, label %780

780:                                              ; preds = %775
  %781 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %778, i64 1, i32 2
  %782 = load i32, i32* %781, align 8, !alias.scope !93, !noalias !90
  %783 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %778, i64 1, i32 0
  %784 = load i32, i32* %783, align 8, !alias.scope !93, !noalias !90
  %785 = sub nsw i32 %782, %784
  %786 = icmp ult i32 %777, %785
  %787 = select i1 %786, i32 %785, i32 %777
  %788 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %778, i64 1, i32 3
  %789 = load i32, i32* %788, align 4, !alias.scope !93, !noalias !90
  %790 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %778, i64 1, i32 1
  %791 = load i32, i32* %790, align 4, !alias.scope !93, !noalias !90
  %792 = sub nsw i32 %789, %791
  %793 = icmp ult i32 %787, %792
  %794 = select i1 %793, i32 %792, i32 %787
  br label %795

795:                                              ; preds = %775, %780
  %796 = phi i32 [ %776, %775 ], [ %794, %780 ]
  %797 = zext i32 %796 to i64
  %798 = shl nuw nsw i64 %797, 5
  br label %799

799:                                              ; preds = %795, %733
  %800 = phi i64 [ 0, %733 ], [ %798, %795 ]
  %801 = tail call i8* @opj_aligned_malloc(i64 %800) #10, !noalias !90
  %802 = bitcast %struct.v8dwt_local* %4 to i8**
  store i8* %801, i8** %802, align 8, !noalias !90
  %803 = icmp eq i8* %801, null
  %804 = bitcast i8* %801 to %union.opj_v8_t*
  br i1 %803, label %805, label %806

805:                                              ; preds = %799
  tail call void @opj_sparse_array_int32_free(%struct.opj_sparse_array_int32* nonnull %710) #10, !noalias !90
  br label %1234

806:                                              ; preds = %799
  %807 = bitcast %struct.v8dwt_local* %5 to i8**
  store i8* %801, i8** %807, align 8, !noalias !90
  %808 = icmp ugt i32 %2, 1
  br i1 %808, label %809, label %1215

809:                                              ; preds = %806
  %810 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %4, i64 0, i32 2
  %811 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %5, i64 0, i32 2
  %812 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %4, i64 0, i32 1
  %813 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %4, i64 0, i32 3
  %814 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %5, i64 0, i32 1
  %815 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %5, i64 0, i32 3
  %816 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 5
  %817 = icmp eq i32 %691, 0
  %818 = zext i32 %691 to i64
  %819 = icmp eq i32 %693, 0
  %820 = zext i32 %693 to i64
  %821 = icmp eq i32 %695, 0
  %822 = zext i32 %695 to i64
  %823 = icmp eq i32 %697, 0
  %824 = zext i32 %697 to i64
  %825 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %4, i64 0, i32 4
  %826 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %4, i64 0, i32 5
  %827 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %4, i64 0, i32 6
  %828 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %4, i64 0, i32 7
  %829 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %5, i64 0, i32 4
  %830 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %5, i64 0, i32 5
  %831 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %5, i64 0, i32 6
  %832 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %5, i64 0, i32 7
  %833 = load i32, i32* %816, align 4, !alias.scope !90
  %834 = getelementptr inbounds i8, i8* %801, i64 32
  %835 = bitcast i8* %834 to %union.opj_v8_t*
  %836 = zext i32 %2 to i64
  br label %837

837:                                              ; preds = %1212, %809
  %838 = phi i64 [ %1213, %1212 ], [ 1, %809 ]
  %839 = phi %struct.opj_tcd_resolution* [ %842, %1212 ], [ %677, %809 ]
  %840 = phi i32 [ %847, %1212 ], [ %684, %809 ]
  %841 = phi i32 [ %852, %1212 ], [ %689, %809 ]
  %842 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %839, i64 1
  store i32 %840, i32* %810, align 4, !noalias !90
  store i32 %841, i32* %811, align 4, !noalias !90
  %843 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %839, i64 1, i32 2
  %844 = load i32, i32* %843, align 8, !noalias !90
  %845 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %842, i64 0, i32 0
  %846 = load i32, i32* %845, align 8, !noalias !90
  %847 = sub nsw i32 %844, %846
  %848 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %839, i64 1, i32 3
  %849 = load i32, i32* %848, align 4, !noalias !90
  %850 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %839, i64 1, i32 1
  %851 = load i32, i32* %850, align 4, !noalias !90
  %852 = sub nsw i32 %849, %851
  %853 = sub i32 %847, %840
  store i32 %853, i32* %812, align 8, !noalias !90
  %854 = srem i32 %846, 2
  store i32 %854, i32* %813, align 8, !noalias !90
  %855 = sub i32 %852, %841
  store i32 %855, i32* %814, align 8, !noalias !90
  %856 = srem i32 %851, 2
  store i32 %856, i32* %815, align 8, !noalias !90
  %857 = trunc i64 %838 to i32
  %858 = sub i32 %833, %857
  %859 = icmp eq i32 %858, 0
  br i1 %859, label %945, label %860

860:                                              ; preds = %837
  br i1 %817, label %868, label %861

861:                                              ; preds = %860
  %862 = zext i32 %858 to i64
  %863 = shl nsw i64 -1, %862
  %864 = xor i64 %863, -1
  %865 = add i64 %864, %818
  %866 = lshr i64 %865, %862
  %867 = trunc i64 %866 to i32
  br label %868

868:                                              ; preds = %861, %860
  %869 = phi i32 [ 0, %860 ], [ %867, %861 ]
  br i1 %819, label %877, label %870

870:                                              ; preds = %868
  %871 = zext i32 %858 to i64
  %872 = shl nsw i64 -1, %871
  %873 = xor i64 %872, -1
  %874 = add i64 %873, %820
  %875 = lshr i64 %874, %871
  %876 = trunc i64 %875 to i32
  br label %877

877:                                              ; preds = %870, %868
  %878 = phi i32 [ 0, %868 ], [ %876, %870 ]
  br i1 %821, label %886, label %879

879:                                              ; preds = %877
  %880 = zext i32 %858 to i64
  %881 = shl nsw i64 -1, %880
  %882 = xor i64 %881, -1
  %883 = add i64 %882, %822
  %884 = lshr i64 %883, %880
  %885 = trunc i64 %884 to i32
  br label %886

886:                                              ; preds = %879, %877
  %887 = phi i32 [ 0, %877 ], [ %885, %879 ]
  br i1 %823, label %895, label %888

888:                                              ; preds = %886
  %889 = zext i32 %858 to i64
  %890 = shl nsw i64 -1, %889
  %891 = xor i64 %890, -1
  %892 = add i64 %891, %824
  %893 = lshr i64 %892, %889
  %894 = trunc i64 %893 to i32
  br label %895

895:                                              ; preds = %888, %886
  %896 = phi i32 [ 0, %886 ], [ %894, %888 ]
  %897 = add i32 %858, -1
  %898 = shl i32 1, %897
  %899 = icmp ugt i32 %691, %898
  br i1 %899, label %900, label %909

900:                                              ; preds = %895
  %901 = sub i32 %691, %898
  %902 = zext i32 %901 to i64
  %903 = zext i32 %858 to i64
  %904 = shl nsw i64 -1, %903
  %905 = xor i64 %904, -1
  %906 = add i64 %902, %905
  %907 = lshr i64 %906, %903
  %908 = trunc i64 %907 to i32
  br label %909

909:                                              ; preds = %900, %895
  %910 = phi i32 [ 0, %895 ], [ %908, %900 ]
  %911 = icmp ugt i32 %695, %898
  br i1 %911, label %912, label %921

912:                                              ; preds = %909
  %913 = sub i32 %695, %898
  %914 = zext i32 %913 to i64
  %915 = zext i32 %858 to i64
  %916 = shl nsw i64 -1, %915
  %917 = xor i64 %916, -1
  %918 = add i64 %914, %917
  %919 = lshr i64 %918, %915
  %920 = trunc i64 %919 to i32
  br label %921

921:                                              ; preds = %912, %909
  %922 = phi i32 [ 0, %909 ], [ %920, %912 ]
  %923 = icmp ugt i32 %693, %898
  br i1 %923, label %924, label %933

924:                                              ; preds = %921
  %925 = sub i32 %693, %898
  %926 = zext i32 %925 to i64
  %927 = zext i32 %858 to i64
  %928 = shl nsw i64 -1, %927
  %929 = xor i64 %928, -1
  %930 = add i64 %926, %929
  %931 = lshr i64 %930, %927
  %932 = trunc i64 %931 to i32
  br label %933

933:                                              ; preds = %924, %921
  %934 = phi i32 [ 0, %921 ], [ %932, %924 ]
  %935 = icmp ugt i32 %697, %898
  br i1 %935, label %936, label %945

936:                                              ; preds = %933
  %937 = sub i32 %697, %898
  %938 = zext i32 %937 to i64
  %939 = zext i32 %858 to i64
  %940 = shl nsw i64 -1, %939
  %941 = xor i64 %940, -1
  %942 = add i64 %938, %941
  %943 = lshr i64 %942, %939
  %944 = trunc i64 %943 to i32
  br label %945

945:                                              ; preds = %936, %933, %837
  %946 = phi i32 [ %934, %936 ], [ %934, %933 ], [ %693, %837 ]
  %947 = phi i32 [ %910, %936 ], [ %910, %933 ], [ %691, %837 ]
  %948 = phi i32 [ %887, %936 ], [ %887, %933 ], [ %695, %837 ]
  %949 = phi i32 [ %869, %936 ], [ %869, %933 ], [ %691, %837 ]
  %950 = phi i32 [ %878, %936 ], [ %878, %933 ], [ %693, %837 ]
  %951 = phi i32 [ %896, %936 ], [ %896, %933 ], [ %697, %837 ]
  %952 = phi i32 [ %922, %936 ], [ %922, %933 ], [ %695, %837 ]
  %953 = phi i32 [ %944, %936 ], [ 0, %933 ], [ %697, %837 ]
  %954 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %839, i64 1, i32 7, i64 1, i32 0
  %955 = load i32, i32* %954, align 8, !noalias !90
  %956 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %839, i64 1, i32 7, i64 0, i32 1
  %957 = load i32, i32* %956, align 4, !noalias !90
  %958 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %839, i64 1, i32 7, i64 0, i32 0
  %959 = load i32, i32* %958, align 8, !noalias !90
  %960 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %839, i64 1, i32 7, i64 1, i32 1
  %961 = load i32, i32* %960, align 4, !noalias !90
  %962 = tail call i32 @llvm.usub.sat.i32(i32 %949, i32 %955) #10
  %963 = tail call i32 @llvm.usub.sat.i32(i32 %950, i32 %957) #10
  %964 = tail call i32 @llvm.usub.sat.i32(i32 %948, i32 %955) #10
  %965 = tail call i32 @llvm.usub.sat.i32(i32 %951, i32 %957) #10
  %966 = tail call i32 @llvm.usub.sat.i32(i32 %947, i32 %959) #10
  %967 = tail call i32 @llvm.usub.sat.i32(i32 %952, i32 %959) #10
  %968 = tail call i32 @llvm.usub.sat.i32(i32 %946, i32 %961) #10
  %969 = tail call i32 @llvm.usub.sat.i32(i32 %953, i32 %961) #10
  %970 = tail call i32 @llvm.usub.sat.i32(i32 %962, i32 4) #10
  %971 = zext i32 %964 to i64
  %972 = add nuw nsw i64 %971, 4
  %973 = lshr i64 %972, 32
  %974 = trunc i64 %973 to i32
  %975 = sub nsw i32 0, %974
  %976 = trunc i64 %972 to i32
  %977 = or i32 %975, %976
  %978 = icmp ult i32 %977, %840
  %979 = select i1 %978, i32 %977, i32 %840
  %980 = tail call i32 @llvm.usub.sat.i32(i32 %966, i32 4) #10
  %981 = zext i32 %967 to i64
  %982 = add nuw nsw i64 %981, 4
  %983 = lshr i64 %982, 32
  %984 = trunc i64 %983 to i32
  %985 = sub nsw i32 0, %984
  %986 = trunc i64 %982 to i32
  %987 = or i32 %985, %986
  %988 = icmp ult i32 %987, %853
  %989 = select i1 %988, i32 %987, i32 %853
  %990 = tail call i32 @llvm.usub.sat.i32(i32 %963, i32 4) #10
  %991 = zext i32 %965 to i64
  %992 = add nuw nsw i64 %991, 4
  %993 = lshr i64 %992, 32
  %994 = trunc i64 %993 to i32
  %995 = sub nsw i32 0, %994
  %996 = trunc i64 %992 to i32
  %997 = or i32 %995, %996
  %998 = icmp ult i32 %997, %841
  %999 = select i1 %998, i32 %997, i32 %841
  %1000 = tail call i32 @llvm.usub.sat.i32(i32 %968, i32 4) #10
  %1001 = zext i32 %969 to i64
  %1002 = add nuw nsw i64 %1001, 4
  %1003 = lshr i64 %1002, 32
  %1004 = trunc i64 %1003 to i32
  %1005 = sub nsw i32 0, %1004
  %1006 = trunc i64 %1002 to i32
  %1007 = or i32 %1005, %1006
  %1008 = icmp ult i32 %1007, %855
  %1009 = select i1 %1008, i32 %1007, i32 %855
  %1010 = icmp eq i32 %854, 0
  br i1 %1010, label %1011, label %1022

1011:                                             ; preds = %945
  %1012 = shl i32 %970, 1
  %1013 = shl i32 %980, 1
  %1014 = or i32 %1013, 1
  %1015 = icmp ult i32 %1012, %1014
  %1016 = select i1 %1015, i32 %1012, i32 %1014
  %1017 = shl i32 %979, 1
  %1018 = shl i32 %989, 1
  %1019 = or i32 %1018, 1
  %1020 = icmp ugt i32 %1017, %1019
  %1021 = select i1 %1020, i32 %1017, i32 %1019
  br label %1033

1022:                                             ; preds = %945
  %1023 = shl i32 %980, 1
  %1024 = shl i32 %970, 1
  %1025 = or i32 %1024, 1
  %1026 = icmp ult i32 %1023, %1025
  %1027 = select i1 %1026, i32 %1023, i32 %1025
  %1028 = shl i32 %989, 1
  %1029 = shl i32 %979, 1
  %1030 = or i32 %1029, 1
  %1031 = icmp ugt i32 %1028, %1030
  %1032 = select i1 %1031, i32 %1028, i32 %1030
  br label %1033

1033:                                             ; preds = %1022, %1011
  %1034 = phi i32 [ %1032, %1022 ], [ %1021, %1011 ]
  %1035 = phi i32 [ %1027, %1022 ], [ %1016, %1011 ]
  %1036 = icmp ult i32 %1034, %847
  %1037 = select i1 %1036, i32 %1034, i32 %847
  %1038 = icmp eq i32 %856, 0
  br i1 %1038, label %1039, label %1050

1039:                                             ; preds = %1033
  %1040 = shl i32 %990, 1
  %1041 = shl i32 %1000, 1
  %1042 = or i32 %1041, 1
  %1043 = icmp ult i32 %1040, %1042
  %1044 = select i1 %1043, i32 %1040, i32 %1042
  %1045 = shl i32 %999, 1
  %1046 = shl i32 %1009, 1
  %1047 = or i32 %1046, 1
  %1048 = icmp ugt i32 %1045, %1047
  %1049 = select i1 %1048, i32 %1045, i32 %1047
  br label %1061

1050:                                             ; preds = %1033
  %1051 = shl i32 %1000, 1
  %1052 = shl i32 %990, 1
  %1053 = or i32 %1052, 1
  %1054 = icmp ult i32 %1051, %1053
  %1055 = select i1 %1054, i32 %1051, i32 %1053
  %1056 = shl i32 %1009, 1
  %1057 = shl i32 %999, 1
  %1058 = or i32 %1057, 1
  %1059 = icmp ugt i32 %1056, %1058
  %1060 = select i1 %1059, i32 %1056, i32 %1058
  br label %1061

1061:                                             ; preds = %1050, %1039
  %1062 = phi i32 [ %1060, %1050 ], [ %1049, %1039 ]
  %1063 = phi i32 [ %1055, %1050 ], [ %1044, %1039 ]
  %1064 = icmp ult i32 %1062, %852
  %1065 = select i1 %1064, i32 %1062, i32 %852
  store i32 %970, i32* %825, align 4, !noalias !90
  store i32 %979, i32* %826, align 8, !noalias !90
  store i32 %980, i32* %827, align 4, !noalias !90
  store i32 %989, i32* %828, align 8, !noalias !90
  %1066 = icmp ugt i32 %852, 7
  br i1 %1066, label %1067, label %1127

1067:                                             ; preds = %1061
  %1068 = add i32 %1000, %841
  %1069 = add i32 %1009, %841
  %1070 = zext i32 %1035 to i64
  %1071 = sext i32 %854 to i64
  %1072 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %804, i64 %1071
  %1073 = shl i32 %970, 1
  %1074 = zext i32 %1073 to i64
  %1075 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %1072, i64 %1074
  %1076 = bitcast %union.opj_v8_t* %1075 to i32*
  %1077 = add i32 %980, %840
  %1078 = add i32 %989, %840
  %1079 = sub nsw i32 0, %854
  %1080 = sext i32 %1079 to i64
  %1081 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %835, i64 %1080
  %1082 = shl i32 %980, 1
  %1083 = zext i32 %1082 to i64
  %1084 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %1081, i64 %1083
  %1085 = bitcast %union.opj_v8_t* %1084 to i32*
  %1086 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %804, i64 %1070, i32 0, i64 0
  %1087 = bitcast float* %1086 to i32*
  br label %1088

1088:                                             ; preds = %1123, %1067
  %1089 = phi i32 [ 7, %1067 ], [ %1125, %1123 ]
  %1090 = phi i32 [ 0, %1067 ], [ %1124, %1123 ]
  %1091 = icmp uge i32 %1089, %990
  %1092 = icmp ult i32 %1090, %999
  %1093 = and i1 %1091, %1092
  br i1 %1093, label %1100, label %1094

1094:                                             ; preds = %1088
  %1095 = icmp uge i32 %1089, %1068
  %1096 = icmp ult i32 %1090, %1069
  %1097 = and i1 %1095, %1096
  br i1 %1097, label %1100, label %1098

1098:                                             ; preds = %1094
  %1099 = add i32 %1090, 8
  br label %1123

1100:                                             ; preds = %1094, %1088
  %1101 = sub i32 %852, %1090
  %1102 = icmp ult i32 %1101, 8
  %1103 = select i1 %1102, i32 %1101, i32 8
  %1104 = icmp eq i32 %1103, 0
  br i1 %1104, label %1118, label %1105

1105:                                             ; preds = %1100
  %1106 = zext i32 %1103 to i64
  br label %1107

1107:                                             ; preds = %1107, %1105
  %1108 = phi i64 [ 0, %1105 ], [ %1116, %1107 ]
  %1109 = trunc i64 %1108 to i32
  %1110 = add i32 %1090, %1109
  %1111 = add i32 %1110, 1
  %1112 = getelementptr inbounds i32, i32* %1076, i64 %1108
  %1113 = tail call i32 @opj_sparse_array_int32_read(%struct.opj_sparse_array_int32* nonnull %710, i32 %970, i32 %1110, i32 %979, i32 %1111, i32* %1112, i32 16, i32 0, i32 1) #10, !noalias !90
  %1114 = getelementptr inbounds i32, i32* %1085, i64 %1108
  %1115 = tail call i32 @opj_sparse_array_int32_read(%struct.opj_sparse_array_int32* nonnull %710, i32 %1077, i32 %1110, i32 %1078, i32 %1111, i32* %1114, i32 16, i32 0, i32 1) #10, !noalias !90
  %1116 = add nuw nsw i64 %1108, 1
  %1117 = icmp eq i64 %1116, %1106
  br i1 %1117, label %1118, label %1107

1118:                                             ; preds = %1107, %1100
  call fastcc void @opj_v8dwt_decode(%struct.v8dwt_local* nonnull %4) #10, !noalias !90
  %1119 = add i32 %1090, 8
  %1120 = tail call i32 @opj_sparse_array_int32_write(%struct.opj_sparse_array_int32* nonnull %710, i32 %1035, i32 %1090, i32 %1037, i32 %1119, i32* %1087, i32 8, i32 1, i32 1) #10, !noalias !90
  %1121 = icmp eq i32 %1120, 0
  br i1 %1121, label %1122, label %1123

1122:                                             ; preds = %1118
  tail call void @opj_sparse_array_int32_free(%struct.opj_sparse_array_int32* nonnull %710) #10, !noalias !90
  tail call void @opj_aligned_free(i8* nonnull %801) #10, !noalias !90
  br label %1234

1123:                                             ; preds = %1118, %1098
  %1124 = phi i32 [ %1099, %1098 ], [ %1119, %1118 ]
  %1125 = or i32 %1124, 7
  %1126 = icmp ult i32 %1125, %852
  br i1 %1126, label %1088, label %1127

1127:                                             ; preds = %1123, %1061
  %1128 = phi i32 [ 0, %1061 ], [ %1124, %1123 ]
  %1129 = phi i32 [ 7, %1061 ], [ %1125, %1123 ]
  %1130 = icmp ugt i32 %852, %1128
  br i1 %1130, label %1131, label %1178

1131:                                             ; preds = %1127
  %1132 = icmp uge i32 %1129, %990
  %1133 = icmp ult i32 %1128, %999
  %1134 = and i1 %1133, %1132
  br i1 %1134, label %1141, label %1135

1135:                                             ; preds = %1131
  %1136 = add i32 %1000, %841
  %1137 = icmp uge i32 %1129, %1136
  %1138 = add i32 %1009, %841
  %1139 = icmp ult i32 %1128, %1138
  %1140 = and i1 %1139, %1137
  br i1 %1140, label %1141, label %1178

1141:                                             ; preds = %1135, %1131
  %1142 = sub i32 %852, %1128
  %1143 = icmp eq i32 %1142, 0
  br i1 %1143, label %1171, label %1144

1144:                                             ; preds = %1141
  %1145 = zext i32 %1142 to i64
  %1146 = sext i32 %854 to i64
  %1147 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %804, i64 %1146
  %1148 = shl i32 %970, 1
  %1149 = zext i32 %1148 to i64
  %1150 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %1147, i64 %1149
  %1151 = bitcast %union.opj_v8_t* %1150 to i32*
  %1152 = add i32 %980, %840
  %1153 = add i32 %989, %840
  %1154 = sub nsw i64 0, %1146
  %1155 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %835, i64 %1154
  %1156 = shl i32 %980, 1
  %1157 = zext i32 %1156 to i64
  %1158 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %1155, i64 %1157
  %1159 = bitcast %union.opj_v8_t* %1158 to i32*
  br label %1160

1160:                                             ; preds = %1160, %1144
  %1161 = phi i64 [ 0, %1144 ], [ %1169, %1160 ]
  %1162 = trunc i64 %1161 to i32
  %1163 = add i32 %1128, %1162
  %1164 = add i32 %1163, 1
  %1165 = getelementptr inbounds i32, i32* %1151, i64 %1161
  %1166 = tail call i32 @opj_sparse_array_int32_read(%struct.opj_sparse_array_int32* nonnull %710, i32 %970, i32 %1163, i32 %979, i32 %1164, i32* %1165, i32 16, i32 0, i32 1) #10, !noalias !90
  %1167 = getelementptr inbounds i32, i32* %1159, i64 %1161
  %1168 = tail call i32 @opj_sparse_array_int32_read(%struct.opj_sparse_array_int32* nonnull %710, i32 %1152, i32 %1163, i32 %1153, i32 %1164, i32* %1167, i32 16, i32 0, i32 1) #10, !noalias !90
  %1169 = add nuw nsw i64 %1161, 1
  %1170 = icmp eq i64 %1169, %1145
  br i1 %1170, label %1171, label %1160

1171:                                             ; preds = %1160, %1141
  call fastcc void @opj_v8dwt_decode(%struct.v8dwt_local* nonnull %4) #10, !noalias !90
  %1172 = zext i32 %1035 to i64
  %1173 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %804, i64 %1172, i32 0, i64 0
  %1174 = bitcast float* %1173 to i32*
  %1175 = tail call i32 @opj_sparse_array_int32_write(%struct.opj_sparse_array_int32* nonnull %710, i32 %1035, i32 %1128, i32 %1037, i32 %852, i32* %1174, i32 8, i32 1, i32 1) #10, !noalias !90
  %1176 = icmp eq i32 %1175, 0
  br i1 %1176, label %1177, label %1178

1177:                                             ; preds = %1171
  tail call void @opj_sparse_array_int32_free(%struct.opj_sparse_array_int32* nonnull %710) #10, !noalias !90
  tail call void @opj_aligned_free(i8* nonnull %801) #10, !noalias !90
  br label %1234

1178:                                             ; preds = %1171, %1135, %1127
  store i32 %990, i32* %829, align 4, !noalias !90
  store i32 %999, i32* %830, align 8, !noalias !90
  store i32 %1000, i32* %831, align 4, !noalias !90
  store i32 %1009, i32* %832, align 8, !noalias !90
  %1179 = icmp ugt i32 %1037, %1035
  br i1 %1179, label %1180, label %1212

1180:                                             ; preds = %1178
  %1181 = sext i32 %856 to i64
  %1182 = shl i32 %990, 1
  %1183 = zext i32 %1182 to i64
  %1184 = add i32 %1000, %841
  %1185 = add i32 %1009, %841
  %1186 = sub nsw i64 0, %1181
  %1187 = shl i32 %1000, 1
  %1188 = zext i32 %1187 to i64
  %1189 = zext i32 %1063 to i64
  %1190 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %804, i64 %1189, i32 0, i64 0
  %1191 = bitcast float* %1190 to i32*
  %1192 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %804, i64 %1181
  %1193 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %1192, i64 %1183
  %1194 = bitcast %union.opj_v8_t* %1193 to i32*
  %1195 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %835, i64 %1186
  %1196 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %1195, i64 %1188
  %1197 = bitcast %union.opj_v8_t* %1196 to i32*
  br label %1200

1198:                                             ; preds = %1200
  %1199 = icmp ugt i32 %1037, %1210
  br i1 %1199, label %1200, label %1212

1200:                                             ; preds = %1198, %1180
  %1201 = phi i32 [ %1035, %1180 ], [ %1210, %1198 ]
  %1202 = sub i32 %1037, %1201
  %1203 = icmp ult i32 %1202, 8
  %1204 = select i1 %1203, i32 %1202, i32 8
  %1205 = add i32 %1204, %1201
  %1206 = tail call i32 @opj_sparse_array_int32_read(%struct.opj_sparse_array_int32* nonnull %710, i32 %1201, i32 %990, i32 %1205, i32 %999, i32* %1194, i32 1, i32 16, i32 1) #10, !noalias !96
  %1207 = tail call i32 @opj_sparse_array_int32_read(%struct.opj_sparse_array_int32* nonnull %710, i32 %1201, i32 %1184, i32 %1205, i32 %1185, i32* %1197, i32 1, i32 16, i32 1) #10, !noalias !96
  call fastcc void @opj_v8dwt_decode(%struct.v8dwt_local* nonnull %5) #10, !noalias !90
  %1208 = tail call i32 @opj_sparse_array_int32_write(%struct.opj_sparse_array_int32* nonnull %710, i32 %1201, i32 %1063, i32 %1205, i32 %1065, i32* %1191, i32 1, i32 8, i32 1) #10, !noalias !90
  %1209 = icmp eq i32 %1208, 0
  %1210 = add i32 %1201, 8
  br i1 %1209, label %1211, label %1198

1211:                                             ; preds = %1200
  tail call void @opj_sparse_array_int32_free(%struct.opj_sparse_array_int32* nonnull %710) #10, !noalias !90
  tail call void @opj_aligned_free(i8* nonnull %801) #10, !noalias !90
  br label %1234

1212:                                             ; preds = %1198, %1178
  %1213 = add nuw nsw i64 %838, 1
  %1214 = icmp eq i64 %1213, %836
  br i1 %1214, label %1215, label %837

1215:                                             ; preds = %1212, %806
  %1216 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %677, i64 %679, i32 8
  %1217 = load i32, i32* %1216, align 8, !noalias !90
  %1218 = load i32, i32* %698, align 8, !noalias !90
  %1219 = sub i32 %1217, %1218
  %1220 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %677, i64 %679, i32 9
  %1221 = load i32, i32* %1220, align 4, !noalias !90
  %1222 = load i32, i32* %704, align 4, !noalias !90
  %1223 = sub i32 %1221, %1222
  %1224 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %677, i64 %679, i32 10
  %1225 = load i32, i32* %1224, align 8, !noalias !90
  %1226 = sub i32 %1225, %1218
  %1227 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %677, i64 %679, i32 11
  %1228 = load i32, i32* %1227, align 4, !noalias !90
  %1229 = sub i32 %1228, %1222
  %1230 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %1, i64 0, i32 13
  %1231 = load i32*, i32** %1230, align 8, !alias.scope !90
  %1232 = sub i32 %1225, %1217
  %1233 = tail call i32 @opj_sparse_array_int32_read(%struct.opj_sparse_array_int32* nonnull %710, i32 %1219, i32 %1223, i32 %1226, i32 %1229, i32* %1231, i32 1, i32 %1232, i32 1) #10, !noalias !90
  tail call void @opj_sparse_array_int32_free(%struct.opj_sparse_array_int32* nonnull %710) #10, !noalias !90
  tail call void @opj_aligned_free(i8* nonnull %801) #10, !noalias !90
  br label %1234

1234:                                             ; preds = %1215, %1211, %1177, %1122, %805, %714, %709, %703, %673, %671, %497, %491, %258, %252, %100, %11
  %1235 = phi i8* [ %15, %11 ], [ %15, %100 ], [ %15, %252 ], [ %15, %258 ], [ %15, %491 ], [ %15, %497 ], [ %15, %671 ], [ %675, %673 ], [ %675, %703 ], [ %675, %709 ], [ %675, %714 ], [ %675, %805 ], [ %675, %1122 ], [ %675, %1177 ], [ %675, %1211 ], [ %675, %1215 ]
  %1236 = phi i8* [ %14, %11 ], [ %14, %100 ], [ %14, %252 ], [ %14, %258 ], [ %14, %491 ], [ %14, %497 ], [ %14, %671 ], [ %674, %673 ], [ %674, %703 ], [ %674, %709 ], [ %674, %714 ], [ %674, %805 ], [ %674, %1122 ], [ %674, %1177 ], [ %674, %1211 ], [ %674, %1215 ]
  %1237 = phi i32 [ 1, %11 ], [ 0, %100 ], [ 0, %252 ], [ 0, %258 ], [ 0, %491 ], [ 0, %497 ], [ 1, %671 ], [ 1, %673 ], [ 1, %703 ], [ 0, %709 ], [ 1, %714 ], [ 0, %805 ], [ 0, %1122 ], [ 0, %1177 ], [ 0, %1211 ], [ 1, %1215 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %1235) #10, !noalias !99
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %1236) #10, !noalias !99
  ret i32 %1237
}

declare i32 @opj_thread_pool_get_thread_count(%struct.opj_thread_pool_t*) local_unnamed_addr #7

declare i8* @opj_aligned_32_malloc(i64) local_unnamed_addr #7

declare i8* @opj_malloc(i64) local_unnamed_addr #7

declare void @opj_thread_pool_wait_completion(%struct.opj_thread_pool_t*, i32) local_unnamed_addr #7

declare void @opj_aligned_free(i8*) local_unnamed_addr #7

declare void @opj_free(i8*) local_unnamed_addr #7

declare i32 @opj_thread_pool_submit_job(%struct.opj_thread_pool_t*, void (i8*, %struct.opj_tls_t*)*, i8*) local_unnamed_addr #7

; Function Attrs: nounwind ssp uwtable
define internal void @opj_dwt_encode_v_func(i8*, %struct.opj_tls_t* nocapture readnone) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 48
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = add i32 %5, 7
  %7 = getelementptr inbounds i8, i8* %0, i64 52
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = icmp ult i32 %6, %9
  br i1 %10, label %11, label %40

11:                                               ; preds = %2
  %12 = getelementptr inbounds i8, i8* %0, i64 56
  %13 = bitcast i8* %12 to void (i8*, i8*, i32, i32, i32, i32)**
  %14 = getelementptr inbounds i8, i8* %0, i64 40
  %15 = bitcast i8* %14 to i32**
  %16 = bitcast i8* %0 to i8**
  %17 = getelementptr inbounds i8, i8* %0, i64 32
  %18 = bitcast i8* %17 to i32*
  %19 = getelementptr inbounds i8, i8* %0, i64 24
  %20 = bitcast i8* %19 to i32*
  %21 = getelementptr inbounds i8, i8* %0, i64 36
  %22 = bitcast i8* %21 to i32*
  br label %23

23:                                               ; preds = %11, %23
  %24 = phi i32 [ %5, %11 ], [ %25, %23 ]
  %25 = add i32 %24, 8
  %26 = load void (i8*, i8*, i32, i32, i32, i32)*, void (i8*, i8*, i32, i32, i32, i32)** %13, align 8
  %27 = load i32*, i32** %15, align 8
  %28 = zext i32 %24 to i64
  %29 = getelementptr inbounds i32, i32* %27, i64 %28
  %30 = bitcast i32* %29 to i8*
  %31 = load i8*, i8** %16, align 8
  %32 = load i32, i32* %18, align 8
  %33 = load i32, i32* %20, align 8
  %34 = icmp eq i32 %33, 0
  %35 = zext i1 %34 to i32
  %36 = load i32, i32* %22, align 4
  tail call void %26(i8* %30, i8* %31, i32 %32, i32 %35, i32 %36, i32 8) #10
  %37 = add i32 %24, 15
  %38 = load i32, i32* %8, align 4
  %39 = icmp ult i32 %37, %38
  br i1 %39, label %23, label %40

40:                                               ; preds = %23, %2
  %41 = phi i32 [ %5, %2 ], [ %25, %23 ]
  %42 = phi i32 [ %9, %2 ], [ %38, %23 ]
  %43 = icmp ugt i32 %42, %41
  br i1 %43, label %46, label %44

44:                                               ; preds = %40
  %45 = bitcast i8* %0 to i8**
  br label %70

46:                                               ; preds = %40
  %47 = getelementptr inbounds i8, i8* %0, i64 56
  %48 = bitcast i8* %47 to void (i8*, i8*, i32, i32, i32, i32)**
  %49 = load void (i8*, i8*, i32, i32, i32, i32)*, void (i8*, i8*, i32, i32, i32, i32)** %48, align 8
  %50 = getelementptr inbounds i8, i8* %0, i64 40
  %51 = bitcast i8* %50 to i32**
  %52 = load i32*, i32** %51, align 8
  %53 = zext i32 %41 to i64
  %54 = getelementptr inbounds i32, i32* %52, i64 %53
  %55 = bitcast i32* %54 to i8*
  %56 = bitcast i8* %0 to i8**
  %57 = load i8*, i8** %56, align 8
  %58 = getelementptr inbounds i8, i8* %0, i64 32
  %59 = bitcast i8* %58 to i32*
  %60 = load i32, i32* %59, align 8
  %61 = getelementptr inbounds i8, i8* %0, i64 24
  %62 = bitcast i8* %61 to i32*
  %63 = load i32, i32* %62, align 8
  %64 = icmp eq i32 %63, 0
  %65 = zext i1 %64 to i32
  %66 = getelementptr inbounds i8, i8* %0, i64 36
  %67 = bitcast i8* %66 to i32*
  %68 = load i32, i32* %67, align 4
  %69 = sub i32 %42, %41
  tail call void %49(i8* %55, i8* %57, i32 %60, i32 %65, i32 %68, i32 %69) #10
  br label %70

70:                                               ; preds = %44, %46
  %71 = phi i8** [ %45, %44 ], [ %56, %46 ]
  %72 = load i8*, i8** %71, align 8
  tail call void @opj_aligned_free(i8* %72) #10
  tail call void @opj_free(i8* %0) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @opj_dwt_encode_h_func(i8*, %struct.opj_tls_t* nocapture readnone) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 48
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds i8, i8* %0, i64 52
  %7 = bitcast i8* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = icmp ult i32 %5, %8
  br i1 %9, label %12, label %10

10:                                               ; preds = %2
  %11 = bitcast i8* %0 to i8**
  br label %41

12:                                               ; preds = %2
  %13 = getelementptr inbounds i8, i8* %0, i64 40
  %14 = bitcast i8* %13 to i32**
  %15 = getelementptr inbounds i8, i8* %0, i64 36
  %16 = bitcast i8* %15 to i32*
  %17 = getelementptr inbounds i8, i8* %0, i64 56
  %18 = bitcast i8* %17 to void (i8*, i8*, i32, i32)**
  %19 = bitcast i8* %0 to i8**
  %20 = getelementptr inbounds i8, i8* %0, i64 32
  %21 = bitcast i8* %20 to i32*
  %22 = getelementptr inbounds i8, i8* %0, i64 24
  %23 = bitcast i8* %22 to i32*
  br label %24

24:                                               ; preds = %12, %24
  %25 = phi i32 [ %5, %12 ], [ %38, %24 ]
  %26 = load i32*, i32** %14, align 8
  %27 = load i32, i32* %16, align 4
  %28 = mul i32 %27, %25
  %29 = zext i32 %28 to i64
  %30 = getelementptr inbounds i32, i32* %26, i64 %29
  %31 = load void (i8*, i8*, i32, i32)*, void (i8*, i8*, i32, i32)** %18, align 8
  %32 = bitcast i32* %30 to i8*
  %33 = load i8*, i8** %19, align 8
  %34 = load i32, i32* %21, align 8
  %35 = load i32, i32* %23, align 8
  %36 = icmp eq i32 %35, 0
  %37 = zext i1 %36 to i32
  tail call void %31(i8* %32, i8* %33, i32 %34, i32 %37) #10
  %38 = add nuw i32 %25, 1
  %39 = load i32, i32* %7, align 4
  %40 = icmp ult i32 %38, %39
  br i1 %40, label %24, label %41

41:                                               ; preds = %24, %10
  %42 = phi i8** [ %11, %10 ], [ %19, %24 ]
  %43 = load i8*, i8** %42, align 8
  tail call void @opj_aligned_free(i8* %43) #10
  tail call void @opj_free(i8* %0) #10
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal fastcc void @opj_dwt_deinterleave_v_cols(i32* noalias nocapture readonly, i32* noalias nocapture, i32, i32, i32, i32, i32) unnamed_addr #1 {
  %8 = shl i32 %5, 3
  %9 = zext i32 %4 to i64
  %10 = sext i32 %3 to i64
  %11 = mul nsw i64 %9, %10
  %12 = getelementptr inbounds i32, i32* %1, i64 %11
  %13 = sub i32 8, %8
  %14 = icmp eq i32 %3, 0
  br i1 %14, label %73, label %15

15:                                               ; preds = %7
  %16 = sext i32 %8 to i64
  %17 = getelementptr inbounds i32, i32* %0, i64 %16
  br label %18

18:                                               ; preds = %15, %69
  %19 = phi i32 [ %22, %69 ], [ %3, %15 ]
  %20 = phi i32* [ %71, %69 ], [ %17, %15 ]
  %21 = phi i32* [ %70, %69 ], [ %1, %15 ]
  %22 = add nsw i32 %19, -1
  switch i32 %6, label %63 [
    i32 8, label %23
    i32 7, label %26
    i32 6, label %28
    i32 5, label %35
    i32 4, label %42
    i32 3, label %49
    i32 2, label %56
  ]

23:                                               ; preds = %18
  %24 = bitcast i32* %21 to i8*
  %25 = bitcast i32* %20 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %24, i8* align 4 %25, i64 32, i1 false)
  br label %69

26:                                               ; preds = %18
  %27 = load i32, i32* %20, align 4
  store i32 %27, i32* %21, align 4
  br label %28

28:                                               ; preds = %18, %26
  %29 = phi i32 [ 1, %26 ], [ 0, %18 ]
  %30 = zext i32 %29 to i64
  %31 = getelementptr inbounds i32, i32* %20, i64 %30
  %32 = load i32, i32* %31, align 4
  %33 = getelementptr inbounds i32, i32* %21, i64 %30
  store i32 %32, i32* %33, align 4
  %34 = add nuw nsw i32 %29, 1
  br label %35

35:                                               ; preds = %18, %28
  %36 = phi i32 [ %34, %28 ], [ 0, %18 ]
  %37 = zext i32 %36 to i64
  %38 = getelementptr inbounds i32, i32* %20, i64 %37
  %39 = load i32, i32* %38, align 4
  %40 = getelementptr inbounds i32, i32* %21, i64 %37
  store i32 %39, i32* %40, align 4
  %41 = add nuw nsw i32 %36, 1
  br label %42

42:                                               ; preds = %18, %35
  %43 = phi i32 [ %41, %35 ], [ 0, %18 ]
  %44 = zext i32 %43 to i64
  %45 = getelementptr inbounds i32, i32* %20, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = getelementptr inbounds i32, i32* %21, i64 %44
  store i32 %46, i32* %47, align 4
  %48 = add nuw nsw i32 %43, 1
  br label %49

49:                                               ; preds = %18, %42
  %50 = phi i32 [ %48, %42 ], [ 0, %18 ]
  %51 = zext i32 %50 to i64
  %52 = getelementptr inbounds i32, i32* %20, i64 %51
  %53 = load i32, i32* %52, align 4
  %54 = getelementptr inbounds i32, i32* %21, i64 %51
  store i32 %53, i32* %54, align 4
  %55 = add nuw nsw i32 %50, 1
  br label %56

56:                                               ; preds = %18, %49
  %57 = phi i32 [ %55, %49 ], [ 0, %18 ]
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i32, i32* %20, i64 %58
  %60 = load i32, i32* %59, align 4
  %61 = getelementptr inbounds i32, i32* %21, i64 %58
  store i32 %60, i32* %61, align 4
  %62 = add nuw nsw i32 %57, 1
  br label %63

63:                                               ; preds = %18, %56
  %64 = phi i32 [ %62, %56 ], [ 0, %18 ]
  %65 = zext i32 %64 to i64
  %66 = getelementptr inbounds i32, i32* %20, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = getelementptr inbounds i32, i32* %21, i64 %65
  store i32 %67, i32* %68, align 4
  br label %69

69:                                               ; preds = %63, %23
  %70 = getelementptr inbounds i32, i32* %21, i64 %9
  %71 = getelementptr inbounds i32, i32* %20, i64 16
  %72 = icmp eq i32 %22, 0
  br i1 %72, label %73, label %18

73:                                               ; preds = %69, %7
  %74 = icmp eq i32 %2, 0
  br i1 %74, label %133, label %75

75:                                               ; preds = %73
  %76 = sext i32 %13 to i64
  %77 = getelementptr inbounds i32, i32* %0, i64 %76
  br label %78

78:                                               ; preds = %129, %75
  %79 = phi i32 [ %82, %129 ], [ %2, %75 ]
  %80 = phi i32* [ %131, %129 ], [ %77, %75 ]
  %81 = phi i32* [ %130, %129 ], [ %12, %75 ]
  %82 = add nsw i32 %79, -1
  switch i32 %6, label %123 [
    i32 8, label %120
    i32 7, label %83
    i32 6, label %85
    i32 5, label %92
    i32 4, label %99
    i32 3, label %106
    i32 2, label %113
  ]

83:                                               ; preds = %78
  %84 = load i32, i32* %80, align 4
  store i32 %84, i32* %81, align 4
  br label %85

85:                                               ; preds = %83, %78
  %86 = phi i32 [ 1, %83 ], [ 0, %78 ]
  %87 = zext i32 %86 to i64
  %88 = getelementptr inbounds i32, i32* %80, i64 %87
  %89 = load i32, i32* %88, align 4
  %90 = getelementptr inbounds i32, i32* %81, i64 %87
  store i32 %89, i32* %90, align 4
  %91 = add nuw nsw i32 %86, 1
  br label %92

92:                                               ; preds = %85, %78
  %93 = phi i32 [ %91, %85 ], [ 0, %78 ]
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds i32, i32* %80, i64 %94
  %96 = load i32, i32* %95, align 4
  %97 = getelementptr inbounds i32, i32* %81, i64 %94
  store i32 %96, i32* %97, align 4
  %98 = add nuw nsw i32 %93, 1
  br label %99

99:                                               ; preds = %92, %78
  %100 = phi i32 [ %98, %92 ], [ 0, %78 ]
  %101 = zext i32 %100 to i64
  %102 = getelementptr inbounds i32, i32* %80, i64 %101
  %103 = load i32, i32* %102, align 4
  %104 = getelementptr inbounds i32, i32* %81, i64 %101
  store i32 %103, i32* %104, align 4
  %105 = add nuw nsw i32 %100, 1
  br label %106

106:                                              ; preds = %99, %78
  %107 = phi i32 [ %105, %99 ], [ 0, %78 ]
  %108 = zext i32 %107 to i64
  %109 = getelementptr inbounds i32, i32* %80, i64 %108
  %110 = load i32, i32* %109, align 4
  %111 = getelementptr inbounds i32, i32* %81, i64 %108
  store i32 %110, i32* %111, align 4
  %112 = add nuw nsw i32 %107, 1
  br label %113

113:                                              ; preds = %106, %78
  %114 = phi i32 [ %112, %106 ], [ 0, %78 ]
  %115 = zext i32 %114 to i64
  %116 = getelementptr inbounds i32, i32* %80, i64 %115
  %117 = load i32, i32* %116, align 4
  %118 = getelementptr inbounds i32, i32* %81, i64 %115
  store i32 %117, i32* %118, align 4
  %119 = add nuw nsw i32 %114, 1
  br label %123

120:                                              ; preds = %78
  %121 = bitcast i32* %81 to i8*
  %122 = bitcast i32* %80 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %121, i8* align 4 %122, i64 32, i1 false)
  br label %129

123:                                              ; preds = %113, %78
  %124 = phi i32 [ %119, %113 ], [ 0, %78 ]
  %125 = zext i32 %124 to i64
  %126 = getelementptr inbounds i32, i32* %80, i64 %125
  %127 = load i32, i32* %126, align 4
  %128 = getelementptr inbounds i32, i32* %81, i64 %125
  store i32 %127, i32* %128, align 4
  br label %129

129:                                              ; preds = %123, %120
  %130 = getelementptr inbounds i32, i32* %81, i64 %9
  %131 = getelementptr inbounds i32, i32* %80, i64 16
  %132 = icmp eq i32 %82, 0
  br i1 %132, label %133, label %78

133:                                              ; preds = %129, %73
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #5

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @opj_dwt_encode_step2(float* nocapture readonly, float* nocapture, i32, i32, float) unnamed_addr #8 {
  %6 = icmp ult i32 %2, %3
  %7 = select i1 %6, i32 %2, i32 %3
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %128, label %9

9:                                                ; preds = %5
  %10 = load float, float* %0, align 4
  %11 = load float, float* %1, align 4
  %12 = fadd float %10, %11
  %13 = fmul float %12, %4
  %14 = getelementptr inbounds float, float* %1, i64 -1
  %15 = load float, float* %14, align 4
  %16 = fadd float %15, %13
  store float %16, float* %14, align 4
  %17 = getelementptr inbounds float, float* %1, i64 2
  %18 = icmp ugt i32 %7, 4
  br i1 %18, label %78, label %19

19:                                               ; preds = %78, %9
  %20 = phi float* [ %17, %9 ], [ %110, %78 ]
  %21 = phi i32 [ 1, %9 ], [ %111, %78 ]
  %22 = icmp ult i32 %21, %7
  br i1 %22, label %23, label %128

23:                                               ; preds = %19
  %24 = xor i32 %21, -1
  %25 = add i32 %7, %24
  %26 = zext i32 %25 to i64
  %27 = add nuw nsw i64 %26, 1
  %28 = icmp ult i64 %27, 5
  br i1 %28, label %29, label %32

29:                                               ; preds = %46, %23
  %30 = phi i32 [ %21, %23 ], [ %38, %46 ]
  %31 = phi float* [ %20, %23 ], [ %40, %46 ]
  br label %114

32:                                               ; preds = %23
  %33 = and i64 %27, 3
  %34 = icmp eq i64 %33, 0
  %35 = select i1 %34, i64 4, i64 %33
  %36 = sub nsw i64 %27, %35
  %37 = trunc i64 %36 to i32
  %38 = add i32 %21, %37
  %39 = shl nsw i64 %36, 1
  %40 = getelementptr float, float* %20, i64 %39
  %41 = insertelement <4 x float> undef, float %4, i32 0
  %42 = shufflevector <4 x float> %41, <4 x float> undef, <4 x i32> zeroinitializer
  %43 = getelementptr float, float* %20, i64 -1
  %44 = getelementptr float, float* %20, i64 -1
  %45 = getelementptr float, float* %20, i64 -1
  br label %46

46:                                               ; preds = %46, %32
  %47 = phi i64 [ 0, %32 ], [ %76, %46 ]
  %48 = shl i64 %47, 1
  %49 = getelementptr float, float* %20, i64 %48
  %50 = shl i64 %47, 1
  %51 = or i64 %50, 2
  %52 = shl i64 %47, 1
  %53 = or i64 %52, 4
  %54 = shl i64 %47, 1
  %55 = or i64 %54, 6
  %56 = getelementptr inbounds float, float* %49, i64 -2
  %57 = bitcast float* %56 to <8 x float>*
  %58 = load <8 x float>, <8 x float>* %57, align 4
  %59 = shufflevector <8 x float> %58, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %60 = getelementptr float, float* %49, i64 -1
  %61 = bitcast float* %60 to <8 x float>*
  %62 = load <8 x float>, <8 x float>* %61, align 4
  %63 = shufflevector <8 x float> %62, <8 x float> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %64 = shufflevector <8 x float> %62, <8 x float> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %65 = fadd <4 x float> %59, %64
  %66 = fmul <4 x float> %65, %42
  %67 = getelementptr inbounds float, float* %49, i64 -1
  %68 = getelementptr inbounds float, float* %43, i64 %51
  %69 = getelementptr inbounds float, float* %44, i64 %53
  %70 = getelementptr inbounds float, float* %45, i64 %55
  %71 = fadd <4 x float> %63, %66
  %72 = extractelement <4 x float> %71, i32 0
  store float %72, float* %67, align 4
  %73 = extractelement <4 x float> %71, i32 1
  store float %73, float* %68, align 4
  %74 = extractelement <4 x float> %71, i32 2
  store float %74, float* %69, align 4
  %75 = extractelement <4 x float> %71, i32 3
  store float %75, float* %70, align 4
  %76 = add i64 %47, 4
  %77 = icmp eq i64 %76, %36
  br i1 %77, label %29, label %46, !llvm.loop !100

78:                                               ; preds = %9, %78
  %79 = phi i32 [ %111, %78 ], [ 1, %9 ]
  %80 = phi float* [ %110, %78 ], [ %17, %9 ]
  %81 = getelementptr inbounds float, float* %80, i64 -2
  %82 = load float, float* %81, align 4
  %83 = load float, float* %80, align 4
  %84 = fadd float %82, %83
  %85 = fmul float %84, %4
  %86 = getelementptr inbounds float, float* %80, i64 -1
  %87 = load float, float* %86, align 4
  %88 = fadd float %87, %85
  store float %88, float* %86, align 4
  %89 = getelementptr inbounds float, float* %80, i64 2
  %90 = load float, float* %89, align 4
  %91 = fadd float %83, %90
  %92 = fmul float %91, %4
  %93 = getelementptr inbounds float, float* %80, i64 1
  %94 = load float, float* %93, align 4
  %95 = fadd float %94, %92
  store float %95, float* %93, align 4
  %96 = getelementptr inbounds float, float* %80, i64 4
  %97 = load float, float* %96, align 4
  %98 = fadd float %90, %97
  %99 = fmul float %98, %4
  %100 = getelementptr inbounds float, float* %80, i64 3
  %101 = load float, float* %100, align 4
  %102 = fadd float %101, %99
  store float %102, float* %100, align 4
  %103 = getelementptr inbounds float, float* %80, i64 6
  %104 = load float, float* %103, align 4
  %105 = fadd float %97, %104
  %106 = fmul float %105, %4
  %107 = getelementptr inbounds float, float* %80, i64 5
  %108 = load float, float* %107, align 4
  %109 = fadd float %108, %106
  store float %109, float* %107, align 4
  %110 = getelementptr inbounds float, float* %80, i64 8
  %111 = add i32 %79, 4
  %112 = add i32 %79, 7
  %113 = icmp ult i32 %112, %7
  br i1 %113, label %78, label %19

114:                                              ; preds = %29, %114
  %115 = phi i32 [ %126, %114 ], [ %30, %29 ]
  %116 = phi float* [ %125, %114 ], [ %31, %29 ]
  %117 = getelementptr inbounds float, float* %116, i64 -2
  %118 = load float, float* %117, align 4
  %119 = load float, float* %116, align 4
  %120 = fadd float %118, %119
  %121 = fmul float %120, %4
  %122 = getelementptr inbounds float, float* %116, i64 -1
  %123 = load float, float* %122, align 4
  %124 = fadd float %123, %121
  store float %124, float* %122, align 4
  %125 = getelementptr inbounds float, float* %116, i64 2
  %126 = add nuw i32 %115, 1
  %127 = icmp ult i32 %126, %7
  br i1 %127, label %114, label %128, !llvm.loop !101

128:                                              ; preds = %114, %19, %5
  %129 = phi float* [ %1, %5 ], [ %20, %19 ], [ %125, %114 ]
  %130 = icmp ult i32 %3, %2
  br i1 %130, label %131, label %139

131:                                              ; preds = %128
  %132 = getelementptr inbounds float, float* %129, i64 -2
  %133 = load float, float* %132, align 4
  %134 = fmul float %133, 2.000000e+00
  %135 = fmul float %134, %4
  %136 = getelementptr inbounds float, float* %129, i64 -1
  %137 = load float, float* %136, align 4
  %138 = fadd float %137, %135
  store float %138, float* %136, align 4
  br label %139

139:                                              ; preds = %131, %128
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @opj_idwt53_h(%struct.dwt_local* nocapture readonly, i32* nocapture) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %0, i64 0, i32 3
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %0, i64 0, i32 2
  %6 = load i32, i32* %5, align 8
  %7 = add nsw i32 %6, %4
  %8 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %0, i64 0, i32 4
  %9 = load i32, i32* %8, align 8
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %152

11:                                               ; preds = %2
  %12 = icmp sgt i32 %7, 1
  br i1 %12, label %13, label %327

13:                                               ; preds = %11
  %14 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %0, i64 0, i32 0
  %15 = load i32*, i32** %14, align 8
  %16 = bitcast i32* %15 to i8*
  %17 = sext i32 %4 to i64
  %18 = getelementptr inbounds i32, i32* %1, i64 %17
  %19 = load i32, i32* %1, align 4
  %20 = load i32, i32* %18, align 4
  %21 = add nsw i32 %20, 1
  %22 = ashr i32 %21, 1
  %23 = sub nsw i32 %19, %22
  %24 = icmp sgt i32 %7, 3
  br i1 %24, label %25, label %122

25:                                               ; preds = %13
  %26 = add nsw i32 %7, -4
  %27 = lshr i32 %26, 1
  %28 = add nuw nsw i32 %27, 2
  %29 = zext i32 %28 to i64
  %30 = add nsw i64 %29, -1
  %31 = icmp ult i64 %30, 4
  br i1 %31, label %90, label %32

32:                                               ; preds = %25
  %33 = shl nuw i32 %28, 1
  %34 = zext i32 %33 to i64
  %35 = add nsw i64 %34, -2
  %36 = getelementptr i32, i32* %15, i64 %35
  %37 = add nsw i64 %17, 1
  %38 = getelementptr i32, i32* %1, i64 %37
  %39 = add nsw i64 %29, %17
  %40 = getelementptr i32, i32* %1, i64 %39
  %41 = getelementptr i32, i32* %1, i64 1
  %42 = getelementptr i32, i32* %1, i64 %29
  %43 = icmp ult i32* %15, %40
  %44 = icmp ult i32* %38, %36
  %45 = and i1 %43, %44
  %46 = icmp ult i32* %15, %42
  %47 = icmp ult i32* %41, %36
  %48 = and i1 %46, %47
  %49 = or i1 %45, %48
  br i1 %49, label %90, label %50

50:                                               ; preds = %32
  %51 = and i64 %30, -4
  %52 = shl nsw i64 %51, 1
  %53 = or i64 %51, 1
  %54 = insertelement <4 x i32> undef, i32 %23, i32 3
  %55 = insertelement <4 x i32> undef, i32 %20, i32 3
  %56 = getelementptr inbounds i32, i32* %15, i64 -1
  br label %57

57:                                               ; preds = %57, %50
  %58 = phi i64 [ 0, %50 ], [ %82, %57 ]
  %59 = phi <4 x i32> [ %54, %50 ], [ %73, %57 ]
  %60 = phi <4 x i32> [ %55, %50 ], [ %68, %57 ]
  %61 = shl i64 %58, 1
  %62 = or i64 %58, 1
  %63 = getelementptr inbounds i32, i32* %1, i64 %62
  %64 = bitcast i32* %63 to <4 x i32>*
  %65 = load <4 x i32>, <4 x i32>* %64, align 4, !alias.scope !102
  %66 = getelementptr inbounds i32, i32* %18, i64 %62
  %67 = bitcast i32* %66 to <4 x i32>*
  %68 = load <4 x i32>, <4 x i32>* %67, align 4, !alias.scope !105
  %69 = shufflevector <4 x i32> %60, <4 x i32> %68, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %70 = add <4 x i32> %69, <i32 2, i32 2, i32 2, i32 2>
  %71 = add <4 x i32> %70, %68
  %72 = ashr <4 x i32> %71, <i32 2, i32 2, i32 2, i32 2>
  %73 = sub nsw <4 x i32> %65, %72
  %74 = shufflevector <4 x i32> %59, <4 x i32> %73, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %75 = add nsw <4 x i32> %73, %74
  %76 = ashr <4 x i32> %75, <i32 1, i32 1, i32 1, i32 1>
  %77 = add nsw <4 x i32> %76, %69
  %78 = or i64 %61, 1
  %79 = getelementptr inbounds i32, i32* %56, i64 %78
  %80 = bitcast i32* %79 to <8 x i32>*
  %81 = shufflevector <4 x i32> %74, <4 x i32> %77, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x i32> %81, <8 x i32>* %80, align 4
  %82 = add i64 %58, 4
  %83 = icmp eq i64 %82, %51
  br i1 %83, label %84, label %57, !llvm.loop !107

84:                                               ; preds = %57
  %85 = icmp eq i64 %30, %51
  %86 = extractelement <4 x i32> %73, i32 3
  %87 = extractelement <4 x i32> %68, i32 3
  %88 = extractelement <4 x i32> %68, i32 3
  %89 = extractelement <4 x i32> %73, i32 3
  br i1 %85, label %117, label %90

90:                                               ; preds = %84, %32, %25
  %91 = phi i64 [ 0, %25 ], [ 0, %32 ], [ %52, %84 ]
  %92 = phi i64 [ 1, %25 ], [ 1, %32 ], [ %53, %84 ]
  %93 = phi i32 [ %23, %25 ], [ %23, %32 ], [ %86, %84 ]
  %94 = phi i32 [ %20, %25 ], [ %20, %32 ], [ %87, %84 ]
  br label %95

95:                                               ; preds = %90, %95
  %96 = phi i64 [ %114, %95 ], [ %91, %90 ]
  %97 = phi i64 [ %115, %95 ], [ %92, %90 ]
  %98 = phi i32 [ %107, %95 ], [ %93, %90 ]
  %99 = phi i32 [ %103, %95 ], [ %94, %90 ]
  %100 = getelementptr inbounds i32, i32* %1, i64 %97
  %101 = load i32, i32* %100, align 4
  %102 = getelementptr inbounds i32, i32* %18, i64 %97
  %103 = load i32, i32* %102, align 4
  %104 = add i32 %99, 2
  %105 = add i32 %104, %103
  %106 = ashr i32 %105, 2
  %107 = sub nsw i32 %101, %106
  %108 = getelementptr inbounds i32, i32* %15, i64 %96
  store i32 %98, i32* %108, align 4
  %109 = add nsw i32 %107, %98
  %110 = ashr i32 %109, 1
  %111 = add nsw i32 %110, %99
  %112 = or i64 %96, 1
  %113 = getelementptr inbounds i32, i32* %15, i64 %112
  store i32 %111, i32* %113, align 4
  %114 = add nuw nsw i64 %96, 2
  %115 = add nuw nsw i64 %97, 1
  %116 = icmp eq i64 %115, %29
  br i1 %116, label %117, label %95, !llvm.loop !108

117:                                              ; preds = %95, %84
  %118 = phi i32 [ %88, %84 ], [ %103, %95 ]
  %119 = phi i32 [ %89, %84 ], [ %107, %95 ]
  %120 = phi i64 [ %52, %84 ], [ %114, %95 ]
  %121 = and i64 %120, 4294967294
  br label %122

122:                                              ; preds = %117, %13
  %123 = phi i64 [ 0, %13 ], [ %121, %117 ]
  %124 = phi i32 [ %20, %13 ], [ %118, %117 ]
  %125 = phi i32 [ %23, %13 ], [ %119, %117 ]
  %126 = getelementptr inbounds i32, i32* %15, i64 %123
  store i32 %125, i32* %126, align 4
  %127 = and i32 %7, 1
  %128 = icmp eq i32 %127, 0
  br i1 %128, label %142, label %129

129:                                              ; preds = %122
  %130 = add nsw i32 %7, -1
  %131 = sdiv i32 %130, 2
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds i32, i32* %1, i64 %132
  %134 = load i32, i32* %133, align 4
  %135 = add nsw i32 %124, 1
  %136 = ashr i32 %135, 1
  %137 = sub nsw i32 %134, %136
  %138 = sext i32 %130 to i64
  %139 = getelementptr inbounds i32, i32* %15, i64 %138
  store i32 %137, i32* %139, align 4
  %140 = add nsw i32 %137, %125
  %141 = ashr i32 %140, 1
  br label %142

142:                                              ; preds = %122, %129
  %143 = phi i32 [ %141, %129 ], [ %125, %122 ]
  %144 = phi i32 [ -2, %129 ], [ -1, %122 ]
  %145 = add nsw i32 %143, %124
  %146 = add nsw i32 %7, %144
  %147 = sext i32 %146 to i64
  %148 = getelementptr inbounds i32, i32* %15, i64 %147
  store i32 %145, i32* %148, align 4
  %149 = bitcast i32* %1 to i8*
  %150 = zext i32 %7 to i64
  %151 = shl nuw nsw i64 %150, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %149, i8* align 4 %16, i64 %151, i1 false) #10
  br label %327

152:                                              ; preds = %2
  switch i32 %7, label %173 [
    i32 1, label %153
    i32 2, label %156
  ]

153:                                              ; preds = %152
  %154 = load i32, i32* %1, align 4
  %155 = sdiv i32 %154, 2
  store i32 %155, i32* %1, align 4
  br label %327

156:                                              ; preds = %152
  %157 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %0, i64 0, i32 0
  %158 = load i32*, i32** %157, align 8
  %159 = sext i32 %4 to i64
  %160 = getelementptr inbounds i32, i32* %1, i64 %159
  %161 = load i32, i32* %1, align 4
  %162 = load i32, i32* %160, align 4
  %163 = add nsw i32 %162, 1
  %164 = ashr i32 %163, 1
  %165 = sub nsw i32 %161, %164
  %166 = getelementptr inbounds i32, i32* %158, i64 1
  store i32 %165, i32* %166, align 4
  %167 = load i32, i32* %160, align 4
  %168 = add nsw i32 %165, %167
  store i32 %168, i32* %158, align 4
  %169 = bitcast %struct.dwt_local* %0 to i64**
  %170 = load i64*, i64** %169, align 8
  %171 = bitcast i32* %1 to i64*
  %172 = load i64, i64* %170, align 4
  store i64 %172, i64* %171, align 4
  br label %327

173:                                              ; preds = %152
  %174 = icmp sgt i32 %7, 2
  br i1 %174, label %175, label %327

175:                                              ; preds = %173
  %176 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %0, i64 0, i32 0
  %177 = load i32*, i32** %176, align 8
  %178 = sext i32 %4 to i64
  %179 = getelementptr inbounds i32, i32* %1, i64 %178
  %180 = getelementptr inbounds i32, i32* %179, i64 1
  %181 = load i32, i32* %180, align 4
  %182 = load i32, i32* %1, align 4
  %183 = load i32, i32* %179, align 4
  %184 = add i32 %181, 2
  %185 = add i32 %184, %183
  %186 = ashr i32 %185, 2
  %187 = sub nsw i32 %182, %186
  %188 = add nsw i32 %187, %183
  store i32 %188, i32* %177, align 4
  %189 = add nsw i32 %7, -2
  %190 = and i32 %7, 1
  %191 = icmp ne i32 %190, 0
  %192 = xor i1 %191, true
  %193 = zext i1 %192 to i32
  %194 = sub nuw nsw i32 %189, %193
  %195 = icmp sgt i32 %194, 1
  br i1 %195, label %196, label %297

196:                                              ; preds = %175
  %197 = add nsw i32 %7, -4
  %198 = sub nsw i32 %197, %193
  %199 = lshr i32 %198, 1
  %200 = add nuw i32 %199, 2
  %201 = zext i32 %200 to i64
  %202 = add nsw i64 %201, -1
  %203 = icmp ult i64 %202, 4
  br i1 %203, label %265, label %204

204:                                              ; preds = %196
  %205 = getelementptr i32, i32* %177, i64 1
  %206 = add nsw i64 %201, -2
  %207 = shl nuw nsw i64 %206, 1
  %208 = add nuw nsw i64 %207, 3
  %209 = getelementptr i32, i32* %177, i64 %208
  %210 = getelementptr i32, i32* %1, i64 1
  %211 = getelementptr i32, i32* %1, i64 %201
  %212 = add nsw i64 %178, 2
  %213 = getelementptr i32, i32* %1, i64 %212
  %214 = add nsw i64 %206, %178
  %215 = add nsw i64 %214, 3
  %216 = getelementptr i32, i32* %1, i64 %215
  %217 = icmp ult i32* %205, %211
  %218 = icmp ult i32* %210, %209
  %219 = and i1 %217, %218
  %220 = icmp ult i32* %205, %216
  %221 = icmp ult i32* %213, %209
  %222 = and i1 %220, %221
  %223 = or i1 %219, %222
  br i1 %223, label %265, label %224

224:                                              ; preds = %204
  %225 = and i64 %202, -4
  %226 = shl nsw i64 %225, 1
  %227 = or i64 %226, 1
  %228 = or i64 %225, 1
  %229 = insertelement <4 x i32> undef, i32 %187, i32 3
  %230 = insertelement <4 x i32> undef, i32 %181, i32 3
  br label %231

231:                                              ; preds = %231, %224
  %232 = phi i64 [ 0, %224 ], [ %257, %231 ]
  %233 = phi <4 x i32> [ %229, %224 ], [ %249, %231 ]
  %234 = phi <4 x i32> [ %230, %224 ], [ %241, %231 ]
  %235 = shl i64 %232, 1
  %236 = or i64 %235, 1
  %237 = or i64 %232, 1
  %238 = add nuw nsw i64 %237, 1
  %239 = getelementptr inbounds i32, i32* %179, i64 %238
  %240 = bitcast i32* %239 to <4 x i32>*
  %241 = load <4 x i32>, <4 x i32>* %240, align 4, !alias.scope !109
  %242 = shufflevector <4 x i32> %234, <4 x i32> %241, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %243 = getelementptr inbounds i32, i32* %1, i64 %237
  %244 = bitcast i32* %243 to <4 x i32>*
  %245 = load <4 x i32>, <4 x i32>* %244, align 4, !alias.scope !112
  %246 = add <4 x i32> %242, <i32 2, i32 2, i32 2, i32 2>
  %247 = add <4 x i32> %246, %241
  %248 = ashr <4 x i32> %247, <i32 2, i32 2, i32 2, i32 2>
  %249 = sub nsw <4 x i32> %245, %248
  %250 = shufflevector <4 x i32> %233, <4 x i32> %249, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %251 = add nsw <4 x i32> %249, %250
  %252 = ashr <4 x i32> %251, <i32 1, i32 1, i32 1, i32 1>
  %253 = add nsw <4 x i32> %252, %242
  %254 = getelementptr inbounds i32, i32* %177, i64 %236
  %255 = bitcast i32* %254 to <8 x i32>*
  %256 = shufflevector <4 x i32> %250, <4 x i32> %253, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x i32> %256, <8 x i32>* %255, align 4
  %257 = add i64 %232, 4
  %258 = icmp eq i64 %257, %225
  br i1 %258, label %259, label %231, !llvm.loop !114

259:                                              ; preds = %231
  %260 = icmp eq i64 %202, %225
  %261 = extractelement <4 x i32> %249, i32 3
  %262 = extractelement <4 x i32> %241, i32 3
  %263 = extractelement <4 x i32> %241, i32 3
  %264 = extractelement <4 x i32> %249, i32 3
  br i1 %260, label %292, label %265

265:                                              ; preds = %259, %204, %196
  %266 = phi i64 [ 1, %196 ], [ 1, %204 ], [ %227, %259 ]
  %267 = phi i64 [ 1, %196 ], [ 1, %204 ], [ %228, %259 ]
  %268 = phi i32 [ %187, %196 ], [ %187, %204 ], [ %261, %259 ]
  %269 = phi i32 [ %181, %196 ], [ %181, %204 ], [ %262, %259 ]
  br label %270

270:                                              ; preds = %265, %270
  %271 = phi i64 [ %290, %270 ], [ %266, %265 ]
  %272 = phi i64 [ %275, %270 ], [ %267, %265 ]
  %273 = phi i32 [ %283, %270 ], [ %268, %265 ]
  %274 = phi i32 [ %277, %270 ], [ %269, %265 ]
  %275 = add nuw nsw i64 %272, 1
  %276 = getelementptr inbounds i32, i32* %179, i64 %275
  %277 = load i32, i32* %276, align 4
  %278 = getelementptr inbounds i32, i32* %1, i64 %272
  %279 = load i32, i32* %278, align 4
  %280 = add i32 %274, 2
  %281 = add i32 %280, %277
  %282 = ashr i32 %281, 2
  %283 = sub nsw i32 %279, %282
  %284 = getelementptr inbounds i32, i32* %177, i64 %271
  store i32 %273, i32* %284, align 4
  %285 = add nsw i32 %283, %273
  %286 = ashr i32 %285, 1
  %287 = add nsw i32 %286, %274
  %288 = add nuw nsw i64 %271, 1
  %289 = getelementptr inbounds i32, i32* %177, i64 %288
  store i32 %287, i32* %289, align 4
  %290 = add nuw nsw i64 %271, 2
  %291 = icmp eq i64 %275, %201
  br i1 %291, label %292, label %270, !llvm.loop !115

292:                                              ; preds = %270, %259
  %293 = phi i32 [ %263, %259 ], [ %277, %270 ]
  %294 = phi i32 [ %264, %259 ], [ %283, %270 ]
  %295 = phi i64 [ %227, %259 ], [ %290, %270 ]
  %296 = and i64 %295, 4294967295
  br label %297

297:                                              ; preds = %292, %175
  %298 = phi i64 [ 1, %175 ], [ %296, %292 ]
  %299 = phi i32 [ %181, %175 ], [ %293, %292 ]
  %300 = phi i32 [ %187, %175 ], [ %294, %292 ]
  %301 = getelementptr inbounds i32, i32* %177, i64 %298
  store i32 %300, i32* %301, align 4
  br i1 %191, label %316, label %302

302:                                              ; preds = %297
  %303 = sdiv i32 %7, 2
  %304 = add nsw i32 %303, -1
  %305 = sext i32 %304 to i64
  %306 = getelementptr inbounds i32, i32* %1, i64 %305
  %307 = load i32, i32* %306, align 4
  %308 = add nsw i32 %299, 1
  %309 = ashr i32 %308, 1
  %310 = sub nsw i32 %307, %309
  %311 = add nsw i32 %310, %300
  %312 = ashr i32 %311, 1
  %313 = add nsw i32 %312, %299
  %314 = sext i32 %189 to i64
  %315 = getelementptr inbounds i32, i32* %177, i64 %314
  store i32 %313, i32* %315, align 4
  br label %318

316:                                              ; preds = %297
  %317 = add nsw i32 %300, %299
  br label %318

318:                                              ; preds = %302, %316
  %319 = phi i32 [ %310, %302 ], [ %317, %316 ]
  %320 = add nsw i32 %7, -1
  %321 = sext i32 %320 to i64
  %322 = getelementptr inbounds i32, i32* %177, i64 %321
  store i32 %319, i32* %322, align 4
  %323 = bitcast i32* %1 to i8*
  %324 = bitcast i32* %177 to i8*
  %325 = zext i32 %7 to i64
  %326 = shl nuw nsw i64 %325, 2
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %323, i8* align 4 %324, i64 %326, i1 false) #10
  br label %327

327:                                              ; preds = %153, %173, %318, %156, %142, %11
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @opj_dwt_decode_h_func(i8*, %struct.opj_tls_t* nocapture readnone) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 48
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = getelementptr inbounds i8, i8* %0, i64 52
  %7 = bitcast i8* %6 to i32*
  %8 = load i32, i32* %7, align 4
  %9 = icmp ult i32 %5, %8
  br i1 %9, label %10, label %26

10:                                               ; preds = %2
  %11 = bitcast i8* %0 to %struct.dwt_local*
  %12 = getelementptr inbounds i8, i8* %0, i64 40
  %13 = bitcast i8* %12 to i32**
  %14 = getelementptr inbounds i8, i8* %0, i64 36
  %15 = bitcast i8* %14 to i32*
  br label %16

16:                                               ; preds = %10, %16
  %17 = phi i32 [ %5, %10 ], [ %23, %16 ]
  %18 = load i32*, i32** %13, align 8
  %19 = load i32, i32* %15, align 4
  %20 = mul i32 %19, %17
  %21 = zext i32 %20 to i64
  %22 = getelementptr inbounds i32, i32* %18, i64 %21
  tail call fastcc void @opj_idwt53_h(%struct.dwt_local* %11, i32* %22)
  %23 = add nuw i32 %17, 1
  %24 = load i32, i32* %7, align 4
  %25 = icmp ult i32 %23, %24
  br i1 %25, label %16, label %26

26:                                               ; preds = %16, %2
  %27 = bitcast i8* %0 to i8**
  %28 = load i8*, i8** %27, align 8
  tail call void @opj_aligned_free(i8* %28) #10
  tail call void @opj_free(i8* %0) #10
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @opj_idwt53_v(%struct.dwt_local* nocapture readonly, i32* nocapture, i64, i32) unnamed_addr #9 {
  %5 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %0, i64 0, i32 3
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %0, i64 0, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = add nsw i32 %8, %6
  %10 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %0, i64 0, i32 4
  %11 = load i32, i32* %10, align 8
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %529

13:                                               ; preds = %4
  %14 = icmp sgt i32 %9, 1
  %15 = icmp eq i32 %3, 8
  %16 = and i1 %15, %14
  br i1 %16, label %17, label %220

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %0, i64 0, i32 0
  %19 = load i32*, i32** %18, align 8
  %20 = sext i32 %6 to i64
  %21 = mul i64 %20, %2
  %22 = getelementptr inbounds i32, i32* %1, i64 %21
  %23 = bitcast i32* %1 to <4 x i32>*
  %24 = load <4 x i32>, <4 x i32>* %23, align 1
  %25 = getelementptr inbounds i32, i32* %1, i64 4
  %26 = bitcast i32* %25 to <4 x i32>*
  %27 = load <4 x i32>, <4 x i32>* %26, align 1
  %28 = bitcast i32* %22 to <2 x i64>*
  %29 = load <2 x i64>, <2 x i64>* %28, align 1
  %30 = getelementptr inbounds i32, i32* %22, i64 4
  %31 = bitcast i32* %30 to <2 x i64>*
  %32 = load <2 x i64>, <2 x i64>* %31, align 1
  %33 = bitcast <2 x i64> %29 to <4 x i32>
  %34 = shl <4 x i32> %33, <i32 1, i32 1, i32 1, i32 1>
  %35 = add <4 x i32> %34, <i32 2, i32 2, i32 2, i32 2>
  %36 = ashr <4 x i32> %35, <i32 2, i32 2, i32 2, i32 2>
  %37 = sub <4 x i32> %24, %36
  %38 = bitcast <2 x i64> %32 to <4 x i32>
  %39 = shl <4 x i32> %38, <i32 1, i32 1, i32 1, i32 1>
  %40 = add <4 x i32> %39, <i32 2, i32 2, i32 2, i32 2>
  %41 = ashr <4 x i32> %40, <i32 2, i32 2, i32 2, i32 2>
  %42 = sub <4 x i32> %27, %41
  %43 = icmp sgt i32 %9, 3
  br i1 %43, label %44, label %106

44:                                               ; preds = %17
  %45 = add nsw i32 %9, -4
  %46 = lshr i32 %45, 1
  %47 = add nuw nsw i32 %46, 2
  %48 = zext i32 %47 to i64
  br label %49

49:                                               ; preds = %49, %44
  %50 = phi i64 [ 0, %44 ], [ %100, %49 ]
  %51 = phi <4 x i32> [ %42, %44 ], [ %80, %49 ]
  %52 = phi <2 x i64> [ %32, %44 ], [ %68, %49 ]
  %53 = phi <4 x i32> [ %37, %44 ], [ %74, %49 ]
  %54 = phi <2 x i64> [ %29, %44 ], [ %65, %49 ]
  %55 = phi i64 [ 1, %44 ], [ %101, %49 ]
  %56 = mul i64 %55, %2
  %57 = getelementptr inbounds i32, i32* %1, i64 %56
  %58 = bitcast i32* %57 to <4 x i32>*
  %59 = load <4 x i32>, <4 x i32>* %58, align 1
  %60 = getelementptr inbounds i32, i32* %57, i64 4
  %61 = bitcast i32* %60 to <4 x i32>*
  %62 = load <4 x i32>, <4 x i32>* %61, align 1
  %63 = getelementptr inbounds i32, i32* %22, i64 %56
  %64 = bitcast i32* %63 to <2 x i64>*
  %65 = load <2 x i64>, <2 x i64>* %64, align 1
  %66 = getelementptr inbounds i32, i32* %63, i64 4
  %67 = bitcast i32* %66 to <2 x i64>*
  %68 = load <2 x i64>, <2 x i64>* %67, align 1
  %69 = bitcast <2 x i64> %54 to <4 x i32>
  %70 = bitcast <2 x i64> %65 to <4 x i32>
  %71 = add <4 x i32> %69, <i32 2, i32 2, i32 2, i32 2>
  %72 = add <4 x i32> %71, %70
  %73 = ashr <4 x i32> %72, <i32 2, i32 2, i32 2, i32 2>
  %74 = sub <4 x i32> %59, %73
  %75 = bitcast <2 x i64> %52 to <4 x i32>
  %76 = bitcast <2 x i64> %68 to <4 x i32>
  %77 = add <4 x i32> %75, <i32 2, i32 2, i32 2, i32 2>
  %78 = add <4 x i32> %77, %76
  %79 = ashr <4 x i32> %78, <i32 2, i32 2, i32 2, i32 2>
  %80 = sub <4 x i32> %62, %79
  %81 = trunc i64 %50 to i32
  %82 = shl i32 %81, 3
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds i32, i32* %19, i64 %83
  %85 = bitcast i32* %84 to <4 x i32>*
  store <4 x i32> %53, <4 x i32>* %85, align 16
  %86 = getelementptr inbounds i32, i32* %84, i64 4
  %87 = bitcast i32* %86 to <4 x i32>*
  store <4 x i32> %51, <4 x i32>* %87, align 16
  %88 = or i32 %82, 8
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i32, i32* %19, i64 %89
  %91 = add <4 x i32> %74, %53
  %92 = ashr <4 x i32> %91, <i32 1, i32 1, i32 1, i32 1>
  %93 = add <4 x i32> %92, %69
  %94 = bitcast i32* %90 to <4 x i32>*
  store <4 x i32> %93, <4 x i32>* %94, align 16
  %95 = getelementptr inbounds i32, i32* %90, i64 4
  %96 = add <4 x i32> %80, %51
  %97 = ashr <4 x i32> %96, <i32 1, i32 1, i32 1, i32 1>
  %98 = add <4 x i32> %97, %75
  %99 = bitcast i32* %95 to <4 x i32>*
  store <4 x i32> %98, <4 x i32>* %99, align 16
  %100 = add nuw nsw i64 %50, 2
  %101 = add nuw nsw i64 %55, 1
  %102 = icmp eq i64 %101, %48
  br i1 %102, label %103, label %49

103:                                              ; preds = %49
  %104 = shl i64 %100, 3
  %105 = and i64 %104, 4294967280
  br label %106

106:                                              ; preds = %103, %17
  %107 = phi i64 [ 0, %17 ], [ %105, %103 ]
  %108 = phi <2 x i64> [ %29, %17 ], [ %65, %103 ]
  %109 = phi <4 x i32> [ %37, %17 ], [ %74, %103 ]
  %110 = phi <2 x i64> [ %32, %17 ], [ %68, %103 ]
  %111 = phi <4 x i32> [ %42, %17 ], [ %80, %103 ]
  %112 = getelementptr inbounds i32, i32* %19, i64 %107
  %113 = bitcast i32* %112 to <4 x i32>*
  store <4 x i32> %109, <4 x i32>* %113, align 16
  %114 = getelementptr inbounds i32, i32* %112, i64 4
  %115 = bitcast i32* %114 to <4 x i32>*
  store <4 x i32> %111, <4 x i32>* %115, align 16
  %116 = and i32 %9, 1
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %156, label %118

118:                                              ; preds = %106
  %119 = add nsw i32 %9, -1
  %120 = sdiv i32 %119, 2
  %121 = sext i32 %120 to i64
  %122 = mul i64 %121, %2
  %123 = getelementptr inbounds i32, i32* %1, i64 %122
  %124 = bitcast i32* %123 to <4 x i32>*
  %125 = load <4 x i32>, <4 x i32>* %124, align 1
  %126 = bitcast <2 x i64> %108 to <4 x i32>
  %127 = shl <4 x i32> %126, <i32 1, i32 1, i32 1, i32 1>
  %128 = add <4 x i32> %127, <i32 2, i32 2, i32 2, i32 2>
  %129 = ashr <4 x i32> %128, <i32 2, i32 2, i32 2, i32 2>
  %130 = sub <4 x i32> %125, %129
  %131 = shl nsw i32 %119, 3
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds i32, i32* %19, i64 %132
  %134 = bitcast i32* %133 to <4 x i32>*
  store <4 x i32> %130, <4 x i32>* %134, align 16
  %135 = shl i32 %9, 3
  %136 = add i32 %135, -16
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds i32, i32* %19, i64 %137
  %139 = add <4 x i32> %130, %109
  %140 = ashr <4 x i32> %139, <i32 1, i32 1, i32 1, i32 1>
  %141 = add <4 x i32> %140, %126
  %142 = bitcast i32* %138 to <4 x i32>*
  store <4 x i32> %141, <4 x i32>* %142, align 16
  %143 = getelementptr inbounds i32, i32* %123, i64 4
  %144 = bitcast i32* %143 to <4 x i32>*
  %145 = load <4 x i32>, <4 x i32>* %144, align 1
  %146 = bitcast <2 x i64> %110 to <4 x i32>
  %147 = shl <4 x i32> %146, <i32 1, i32 1, i32 1, i32 1>
  %148 = add <4 x i32> %147, <i32 2, i32 2, i32 2, i32 2>
  %149 = ashr <4 x i32> %148, <i32 2, i32 2, i32 2, i32 2>
  %150 = sub <4 x i32> %145, %149
  %151 = getelementptr inbounds i32, i32* %133, i64 4
  %152 = bitcast i32* %151 to <4 x i32>*
  store <4 x i32> %150, <4 x i32>* %152, align 16
  %153 = add <4 x i32> %150, %111
  %154 = ashr <4 x i32> %153, <i32 1, i32 1, i32 1, i32 1>
  %155 = add <4 x i32> %154, %146
  br label %166

156:                                              ; preds = %106
  %157 = shl i32 %9, 3
  %158 = add i32 %157, -8
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds i32, i32* %19, i64 %159
  %161 = bitcast <2 x i64> %108 to <4 x i32>
  %162 = add <4 x i32> %109, %161
  %163 = bitcast i32* %160 to <4 x i32>*
  store <4 x i32> %162, <4 x i32>* %163, align 16
  %164 = bitcast <2 x i64> %110 to <4 x i32>
  %165 = add <4 x i32> %111, %164
  br label %166

166:                                              ; preds = %156, %118
  %167 = phi i64 [ %159, %156 ], [ %137, %118 ]
  %168 = phi <4 x i32> [ %165, %156 ], [ %155, %118 ]
  %169 = getelementptr inbounds i32, i32* %19, i64 %167
  %170 = getelementptr inbounds i32, i32* %169, i64 4
  %171 = bitcast i32* %170 to <4 x i32>*
  store <4 x i32> %168, <4 x i32>* %171, align 16
  %172 = icmp sgt i32 %9, 0
  br i1 %172, label %173, label %1202

173:                                              ; preds = %166
  %174 = zext i32 %9 to i64
  %175 = and i64 %174, 1
  %176 = icmp eq i32 %9, 1
  br i1 %176, label %1160, label %177

177:                                              ; preds = %173
  %178 = sub nsw i64 %174, %175
  br label %179

179:                                              ; preds = %179, %177
  %180 = phi i64 [ 0, %177 ], [ %217, %179 ]
  %181 = phi i64 [ %178, %177 ], [ %218, %179 ]
  %182 = mul i64 %180, %2
  %183 = getelementptr inbounds i32, i32* %1, i64 %182
  %184 = bitcast i32* %183 to <2 x i64>*
  %185 = trunc i64 %180 to i32
  %186 = shl nsw i32 %185, 3
  %187 = zext i32 %186 to i64
  %188 = getelementptr inbounds i32, i32* %19, i64 %187
  %189 = bitcast i32* %188 to <2 x i64>*
  %190 = load <2 x i64>, <2 x i64>* %189, align 16
  store <2 x i64> %190, <2 x i64>* %184, align 1
  %191 = add i64 %182, 4
  %192 = getelementptr inbounds i32, i32* %1, i64 %191
  %193 = bitcast i32* %192 to <2 x i64>*
  %194 = or i32 %186, 4
  %195 = zext i32 %194 to i64
  %196 = getelementptr inbounds i32, i32* %19, i64 %195
  %197 = bitcast i32* %196 to <2 x i64>*
  %198 = load <2 x i64>, <2 x i64>* %197, align 16
  store <2 x i64> %198, <2 x i64>* %193, align 1
  %199 = or i64 %180, 1
  %200 = mul i64 %199, %2
  %201 = getelementptr inbounds i32, i32* %1, i64 %200
  %202 = bitcast i32* %201 to <2 x i64>*
  %203 = trunc i64 %199 to i32
  %204 = shl nsw i32 %203, 3
  %205 = zext i32 %204 to i64
  %206 = getelementptr inbounds i32, i32* %19, i64 %205
  %207 = bitcast i32* %206 to <2 x i64>*
  %208 = load <2 x i64>, <2 x i64>* %207, align 16
  store <2 x i64> %208, <2 x i64>* %202, align 1
  %209 = add i64 %200, 4
  %210 = getelementptr inbounds i32, i32* %1, i64 %209
  %211 = bitcast i32* %210 to <2 x i64>*
  %212 = or i32 %204, 4
  %213 = zext i32 %212 to i64
  %214 = getelementptr inbounds i32, i32* %19, i64 %213
  %215 = bitcast i32* %214 to <2 x i64>*
  %216 = load <2 x i64>, <2 x i64>* %215, align 16
  store <2 x i64> %216, <2 x i64>* %211, align 1
  %217 = add nuw nsw i64 %180, 2
  %218 = add i64 %181, -2
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %1160, label %179

220:                                              ; preds = %13
  %221 = icmp sgt i32 %3, 0
  %222 = and i1 %14, %221
  br i1 %222, label %223, label %1202

223:                                              ; preds = %220
  %224 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %0, i64 0, i32 0
  %225 = sext i32 %6 to i64
  %226 = mul i64 %225, %2
  %227 = icmp sgt i32 %9, 3
  %228 = add nsw i32 %9, -4
  %229 = lshr i32 %228, 1
  %230 = add nuw nsw i32 %229, 1
  %231 = zext i32 %230 to i64
  %232 = and i32 %9, 1
  %233 = icmp eq i32 %232, 0
  %234 = add nsw i32 %9, -1
  %235 = sdiv i32 %234, 2
  %236 = sext i32 %235 to i64
  %237 = mul i64 %236, %2
  %238 = sext i32 %234 to i64
  %239 = add nsw i32 %9, -2
  %240 = sext i32 %239 to i64
  %241 = zext i32 %9 to i64
  %242 = add nsw i64 %231, -1
  %243 = add i32 %6, 1
  %244 = shl nuw i32 %230, 1
  %245 = zext i32 %244 to i64
  %246 = sext i32 %243 to i64
  %247 = add nsw i64 %231, %246
  %248 = add nuw nsw i64 %231, 1
  %249 = and i64 %241, 4294967288
  %250 = add nsw i64 %249, -8
  %251 = lshr exact i64 %250, 3
  %252 = add nuw nsw i64 %251, 1
  %253 = icmp ult i32 %230, 4
  %254 = icmp ne i64 %2, 1
  %255 = trunc i64 %242 to i32
  %256 = add i32 %243, %255
  %257 = icmp slt i32 %256, %243
  %258 = icmp ugt i64 %242, 4294967295
  %259 = or i1 %257, %258
  %260 = or i1 %254, %259
  %261 = and i64 %231, 2147483644
  %262 = shl nuw nsw i64 %261, 1
  %263 = icmp eq i64 %261, %231
  %264 = icmp ugt i32 %9, 7
  %265 = icmp eq i64 %2, 1
  %266 = and i1 %264, %265
  %267 = and i64 %241, 4294967288
  %268 = and i64 %252, 3
  %269 = icmp ult i64 %250, 24
  %270 = sub nsw i64 %252, %268
  %271 = icmp eq i64 %268, 0
  %272 = icmp eq i64 %267, %241
  %273 = and i64 %241, 3
  %274 = icmp eq i64 %273, 0
  br label %275

275:                                              ; preds = %524, %223
  %276 = phi i64 [ %528, %524 ], [ 0, %223 ]
  %277 = phi i32* [ %526, %524 ], [ %1, %223 ]
  %278 = phi i32 [ %525, %524 ], [ 0, %223 ]
  %279 = add i64 %276, %246
  %280 = getelementptr i32, i32* %1, i64 %279
  %281 = add i64 %247, %276
  %282 = getelementptr i32, i32* %1, i64 %281
  %283 = add i64 %276, 1
  %284 = getelementptr i32, i32* %1, i64 %283
  %285 = add i64 %248, %276
  %286 = getelementptr i32, i32* %1, i64 %285
  %287 = getelementptr i32, i32* %1, i64 %276
  %288 = add i64 %276, %241
  %289 = getelementptr i32, i32* %1, i64 %288
  %290 = load i32*, i32** %224, align 8
  %291 = load i32, i32* %277, align 4
  %292 = getelementptr inbounds i32, i32* %277, i64 %226
  %293 = load i32, i32* %292, align 4
  %294 = add nsw i32 %293, 1
  %295 = ashr i32 %294, 1
  %296 = sub nsw i32 %291, %295
  br i1 %227, label %297, label %386

297:                                              ; preds = %275
  br i1 %253, label %349, label %298

298:                                              ; preds = %297
  br i1 %260, label %349, label %299

299:                                              ; preds = %298
  %300 = getelementptr i32, i32* %290, i64 %245
  %301 = icmp ult i32* %290, %282
  %302 = icmp ult i32* %280, %300
  %303 = and i1 %301, %302
  %304 = icmp ult i32* %290, %286
  %305 = icmp ult i32* %284, %300
  %306 = and i1 %304, %305
  %307 = or i1 %303, %306
  br i1 %307, label %349, label %308

308:                                              ; preds = %299
  %309 = insertelement <4 x i32> undef, i32 %296, i32 3
  %310 = insertelement <4 x i32> undef, i32 %293, i32 3
  %311 = getelementptr inbounds i32, i32* %290, i64 -1
  br label %312

312:                                              ; preds = %312, %308
  %313 = phi i64 [ 0, %308 ], [ %342, %312 ]
  %314 = phi <4 x i32> [ %309, %308 ], [ %333, %312 ]
  %315 = phi <4 x i32> [ %310, %308 ], [ %328, %312 ]
  %316 = shl i64 %313, 1
  %317 = or i64 %313, 1
  %318 = mul i64 %317, %2
  %319 = getelementptr inbounds i32, i32* %277, i64 %318
  %320 = bitcast i32* %319 to <4 x i32>*
  %321 = load <4 x i32>, <4 x i32>* %320, align 4, !alias.scope !116
  %322 = trunc i64 %317 to i32
  %323 = add i32 %6, %322
  %324 = sext i32 %323 to i64
  %325 = mul i64 %324, %2
  %326 = getelementptr inbounds i32, i32* %277, i64 %325
  %327 = bitcast i32* %326 to <4 x i32>*
  %328 = load <4 x i32>, <4 x i32>* %327, align 4, !alias.scope !119
  %329 = shufflevector <4 x i32> %315, <4 x i32> %328, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %330 = add <4 x i32> %329, <i32 2, i32 2, i32 2, i32 2>
  %331 = add <4 x i32> %330, %328
  %332 = ashr <4 x i32> %331, <i32 2, i32 2, i32 2, i32 2>
  %333 = sub nsw <4 x i32> %321, %332
  %334 = shufflevector <4 x i32> %314, <4 x i32> %333, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %335 = add nsw <4 x i32> %333, %334
  %336 = ashr <4 x i32> %335, <i32 1, i32 1, i32 1, i32 1>
  %337 = add nsw <4 x i32> %336, %329
  %338 = or i64 %316, 1
  %339 = getelementptr inbounds i32, i32* %311, i64 %338
  %340 = bitcast i32* %339 to <8 x i32>*
  %341 = shufflevector <4 x i32> %334, <4 x i32> %337, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x i32> %341, <8 x i32>* %340, align 4
  %342 = add i64 %313, 4
  %343 = icmp eq i64 %342, %261
  br i1 %343, label %344, label %312, !llvm.loop !121

344:                                              ; preds = %312
  %345 = extractelement <4 x i32> %333, i32 3
  %346 = extractelement <4 x i32> %328, i32 3
  %347 = extractelement <4 x i32> %328, i32 3
  %348 = extractelement <4 x i32> %333, i32 3
  br i1 %263, label %381, label %349

349:                                              ; preds = %344, %299, %298, %297
  %350 = phi i64 [ 0, %297 ], [ 0, %298 ], [ 0, %299 ], [ %262, %344 ]
  %351 = phi i64 [ 0, %297 ], [ 0, %298 ], [ 0, %299 ], [ %261, %344 ]
  %352 = phi i32 [ %296, %297 ], [ %296, %298 ], [ %296, %299 ], [ %345, %344 ]
  %353 = phi i32 [ %293, %297 ], [ %293, %298 ], [ %293, %299 ], [ %346, %344 ]
  br label %354

354:                                              ; preds = %349, %354
  %355 = phi i64 [ %379, %354 ], [ %350, %349 ]
  %356 = phi i64 [ %359, %354 ], [ %351, %349 ]
  %357 = phi i32 [ %372, %354 ], [ %352, %349 ]
  %358 = phi i32 [ %368, %354 ], [ %353, %349 ]
  %359 = add nuw nsw i64 %356, 1
  %360 = mul i64 %359, %2
  %361 = getelementptr inbounds i32, i32* %277, i64 %360
  %362 = load i32, i32* %361, align 4
  %363 = trunc i64 %359 to i32
  %364 = add i32 %6, %363
  %365 = sext i32 %364 to i64
  %366 = mul i64 %365, %2
  %367 = getelementptr inbounds i32, i32* %277, i64 %366
  %368 = load i32, i32* %367, align 4
  %369 = add i32 %358, 2
  %370 = add i32 %369, %368
  %371 = ashr i32 %370, 2
  %372 = sub nsw i32 %362, %371
  %373 = getelementptr inbounds i32, i32* %290, i64 %355
  store i32 %357, i32* %373, align 4
  %374 = add nsw i32 %372, %357
  %375 = ashr i32 %374, 1
  %376 = add nsw i32 %375, %358
  %377 = or i64 %355, 1
  %378 = getelementptr inbounds i32, i32* %290, i64 %377
  store i32 %376, i32* %378, align 4
  %379 = add nuw nsw i64 %355, 2
  %380 = icmp eq i64 %359, %231
  br i1 %380, label %381, label %354, !llvm.loop !122

381:                                              ; preds = %354, %344
  %382 = phi i32 [ %347, %344 ], [ %368, %354 ]
  %383 = phi i32 [ %348, %344 ], [ %372, %354 ]
  %384 = phi i64 [ %262, %344 ], [ %379, %354 ]
  %385 = and i64 %384, 4294967294
  br label %386

386:                                              ; preds = %381, %275
  %387 = phi i64 [ 0, %275 ], [ %385, %381 ]
  %388 = phi i32 [ %293, %275 ], [ %382, %381 ]
  %389 = phi i32 [ %296, %275 ], [ %383, %381 ]
  %390 = getelementptr inbounds i32, i32* %290, i64 %387
  store i32 %389, i32* %390, align 4
  br i1 %233, label %400, label %391

391:                                              ; preds = %386
  %392 = getelementptr inbounds i32, i32* %277, i64 %237
  %393 = load i32, i32* %392, align 4
  %394 = add nsw i32 %388, 1
  %395 = ashr i32 %394, 1
  %396 = sub nsw i32 %393, %395
  %397 = getelementptr inbounds i32, i32* %290, i64 %238
  store i32 %396, i32* %397, align 4
  %398 = add nsw i32 %396, %389
  %399 = ashr i32 %398, 1
  br label %400

400:                                              ; preds = %386, %391
  %401 = phi i32 [ %399, %391 ], [ %389, %386 ]
  %402 = phi i64 [ %240, %391 ], [ %238, %386 ]
  %403 = add nsw i32 %401, %388
  %404 = getelementptr inbounds i32, i32* %290, i64 %402
  store i32 %403, i32* %404, align 4
  br i1 %266, label %405, label %484

405:                                              ; preds = %400
  %406 = getelementptr i32, i32* %290, i64 %241
  %407 = icmp ult i32* %287, %406
  %408 = icmp ult i32* %290, %289
  %409 = and i1 %407, %408
  br i1 %409, label %484, label %410

410:                                              ; preds = %405
  br i1 %269, label %464, label %411

411:                                              ; preds = %410, %411
  %412 = phi i64 [ %461, %411 ], [ 0, %410 ]
  %413 = phi i64 [ %462, %411 ], [ %270, %410 ]
  %414 = getelementptr inbounds i32, i32* %290, i64 %412
  %415 = bitcast i32* %414 to <4 x i32>*
  %416 = load <4 x i32>, <4 x i32>* %415, align 4, !alias.scope !123
  %417 = getelementptr inbounds i32, i32* %414, i64 4
  %418 = bitcast i32* %417 to <4 x i32>*
  %419 = load <4 x i32>, <4 x i32>* %418, align 4, !alias.scope !123
  %420 = mul i64 %412, %2
  %421 = getelementptr inbounds i32, i32* %277, i64 %420
  %422 = bitcast i32* %421 to <4 x i32>*
  store <4 x i32> %416, <4 x i32>* %422, align 4, !alias.scope !126, !noalias !123
  %423 = getelementptr inbounds i32, i32* %421, i64 4
  %424 = bitcast i32* %423 to <4 x i32>*
  store <4 x i32> %419, <4 x i32>* %424, align 4, !alias.scope !126, !noalias !123
  %425 = or i64 %412, 8
  %426 = getelementptr inbounds i32, i32* %290, i64 %425
  %427 = bitcast i32* %426 to <4 x i32>*
  %428 = load <4 x i32>, <4 x i32>* %427, align 4, !alias.scope !123
  %429 = getelementptr inbounds i32, i32* %426, i64 4
  %430 = bitcast i32* %429 to <4 x i32>*
  %431 = load <4 x i32>, <4 x i32>* %430, align 4, !alias.scope !123
  %432 = mul i64 %425, %2
  %433 = getelementptr inbounds i32, i32* %277, i64 %432
  %434 = bitcast i32* %433 to <4 x i32>*
  store <4 x i32> %428, <4 x i32>* %434, align 4, !alias.scope !126, !noalias !123
  %435 = getelementptr inbounds i32, i32* %433, i64 4
  %436 = bitcast i32* %435 to <4 x i32>*
  store <4 x i32> %431, <4 x i32>* %436, align 4, !alias.scope !126, !noalias !123
  %437 = or i64 %412, 16
  %438 = getelementptr inbounds i32, i32* %290, i64 %437
  %439 = bitcast i32* %438 to <4 x i32>*
  %440 = load <4 x i32>, <4 x i32>* %439, align 4, !alias.scope !123
  %441 = getelementptr inbounds i32, i32* %438, i64 4
  %442 = bitcast i32* %441 to <4 x i32>*
  %443 = load <4 x i32>, <4 x i32>* %442, align 4, !alias.scope !123
  %444 = mul i64 %437, %2
  %445 = getelementptr inbounds i32, i32* %277, i64 %444
  %446 = bitcast i32* %445 to <4 x i32>*
  store <4 x i32> %440, <4 x i32>* %446, align 4, !alias.scope !126, !noalias !123
  %447 = getelementptr inbounds i32, i32* %445, i64 4
  %448 = bitcast i32* %447 to <4 x i32>*
  store <4 x i32> %443, <4 x i32>* %448, align 4, !alias.scope !126, !noalias !123
  %449 = or i64 %412, 24
  %450 = getelementptr inbounds i32, i32* %290, i64 %449
  %451 = bitcast i32* %450 to <4 x i32>*
  %452 = load <4 x i32>, <4 x i32>* %451, align 4, !alias.scope !123
  %453 = getelementptr inbounds i32, i32* %450, i64 4
  %454 = bitcast i32* %453 to <4 x i32>*
  %455 = load <4 x i32>, <4 x i32>* %454, align 4, !alias.scope !123
  %456 = mul i64 %449, %2
  %457 = getelementptr inbounds i32, i32* %277, i64 %456
  %458 = bitcast i32* %457 to <4 x i32>*
  store <4 x i32> %452, <4 x i32>* %458, align 4, !alias.scope !126, !noalias !123
  %459 = getelementptr inbounds i32, i32* %457, i64 4
  %460 = bitcast i32* %459 to <4 x i32>*
  store <4 x i32> %455, <4 x i32>* %460, align 4, !alias.scope !126, !noalias !123
  %461 = add i64 %412, 32
  %462 = add i64 %413, -4
  %463 = icmp eq i64 %462, 0
  br i1 %463, label %464, label %411, !llvm.loop !128

464:                                              ; preds = %411, %410
  %465 = phi i64 [ 0, %410 ], [ %461, %411 ]
  br i1 %271, label %483, label %466

466:                                              ; preds = %464, %466
  %467 = phi i64 [ %480, %466 ], [ %465, %464 ]
  %468 = phi i64 [ %481, %466 ], [ %268, %464 ]
  %469 = getelementptr inbounds i32, i32* %290, i64 %467
  %470 = bitcast i32* %469 to <4 x i32>*
  %471 = load <4 x i32>, <4 x i32>* %470, align 4, !alias.scope !123
  %472 = getelementptr inbounds i32, i32* %469, i64 4
  %473 = bitcast i32* %472 to <4 x i32>*
  %474 = load <4 x i32>, <4 x i32>* %473, align 4, !alias.scope !123
  %475 = mul i64 %467, %2
  %476 = getelementptr inbounds i32, i32* %277, i64 %475
  %477 = bitcast i32* %476 to <4 x i32>*
  store <4 x i32> %471, <4 x i32>* %477, align 4, !alias.scope !126, !noalias !123
  %478 = getelementptr inbounds i32, i32* %476, i64 4
  %479 = bitcast i32* %478 to <4 x i32>*
  store <4 x i32> %474, <4 x i32>* %479, align 4, !alias.scope !126, !noalias !123
  %480 = add i64 %467, 8
  %481 = add i64 %468, -1
  %482 = icmp eq i64 %481, 0
  br i1 %482, label %483, label %466, !llvm.loop !129

483:                                              ; preds = %466, %464
  br i1 %272, label %524, label %484

484:                                              ; preds = %400, %483, %405
  %485 = phi i64 [ 0, %405 ], [ 0, %400 ], [ %267, %483 ]
  %486 = xor i64 %485, -1
  %487 = add nsw i64 %486, %241
  br i1 %274, label %498, label %488

488:                                              ; preds = %484, %488
  %489 = phi i64 [ %495, %488 ], [ %485, %484 ]
  %490 = phi i64 [ %496, %488 ], [ %273, %484 ]
  %491 = getelementptr inbounds i32, i32* %290, i64 %489
  %492 = load i32, i32* %491, align 4
  %493 = mul i64 %489, %2
  %494 = getelementptr inbounds i32, i32* %277, i64 %493
  store i32 %492, i32* %494, align 4
  %495 = add nuw nsw i64 %489, 1
  %496 = add i64 %490, -1
  %497 = icmp eq i64 %496, 0
  br i1 %497, label %498, label %488, !llvm.loop !130

498:                                              ; preds = %488, %484
  %499 = phi i64 [ %485, %484 ], [ %495, %488 ]
  %500 = icmp ult i64 %487, 3
  br i1 %500, label %524, label %501

501:                                              ; preds = %498, %501
  %502 = phi i64 [ %522, %501 ], [ %499, %498 ]
  %503 = getelementptr inbounds i32, i32* %290, i64 %502
  %504 = load i32, i32* %503, align 4
  %505 = mul i64 %502, %2
  %506 = getelementptr inbounds i32, i32* %277, i64 %505
  store i32 %504, i32* %506, align 4
  %507 = add nuw nsw i64 %502, 1
  %508 = getelementptr inbounds i32, i32* %290, i64 %507
  %509 = load i32, i32* %508, align 4
  %510 = mul i64 %507, %2
  %511 = getelementptr inbounds i32, i32* %277, i64 %510
  store i32 %509, i32* %511, align 4
  %512 = add nuw nsw i64 %502, 2
  %513 = getelementptr inbounds i32, i32* %290, i64 %512
  %514 = load i32, i32* %513, align 4
  %515 = mul i64 %512, %2
  %516 = getelementptr inbounds i32, i32* %277, i64 %515
  store i32 %514, i32* %516, align 4
  %517 = add nuw nsw i64 %502, 3
  %518 = getelementptr inbounds i32, i32* %290, i64 %517
  %519 = load i32, i32* %518, align 4
  %520 = mul i64 %517, %2
  %521 = getelementptr inbounds i32, i32* %277, i64 %520
  store i32 %519, i32* %521, align 4
  %522 = add nuw nsw i64 %502, 4
  %523 = icmp eq i64 %522, %241
  br i1 %523, label %524, label %501, !llvm.loop !131

524:                                              ; preds = %498, %501, %483
  %525 = add nuw nsw i32 %278, 1
  %526 = getelementptr inbounds i32, i32* %277, i64 1
  %527 = icmp eq i32 %525, %3
  %528 = add i64 %276, 1
  br i1 %527, label %1202, label %275

529:                                              ; preds = %4
  switch i32 %9, label %626 [
    i32 1, label %530
    i32 2, label %602
  ]

530:                                              ; preds = %529
  %531 = icmp sgt i32 %3, 0
  br i1 %531, label %532, label %1202

532:                                              ; preds = %530
  %533 = add i32 %3, -1
  %534 = zext i32 %533 to i64
  %535 = add nuw nsw i64 %534, 1
  %536 = icmp ult i64 %535, 8
  br i1 %536, label %591, label %537

537:                                              ; preds = %532
  %538 = and i64 %535, 8589934584
  %539 = getelementptr i32, i32* %1, i64 %538
  %540 = trunc i64 %538 to i32
  %541 = add nsw i64 %538, -8
  %542 = lshr exact i64 %541, 3
  %543 = add nuw nsw i64 %542, 1
  %544 = and i64 %543, 1
  %545 = icmp eq i64 %541, 0
  br i1 %545, label %575, label %546

546:                                              ; preds = %537
  %547 = sub nuw nsw i64 %543, %544
  br label %548

548:                                              ; preds = %548, %546
  %549 = phi i64 [ 0, %546 ], [ %572, %548 ]
  %550 = phi i64 [ %547, %546 ], [ %573, %548 ]
  %551 = getelementptr i32, i32* %1, i64 %549
  %552 = bitcast i32* %551 to <4 x i32>*
  %553 = load <4 x i32>, <4 x i32>* %552, align 4
  %554 = getelementptr i32, i32* %551, i64 4
  %555 = bitcast i32* %554 to <4 x i32>*
  %556 = load <4 x i32>, <4 x i32>* %555, align 4
  %557 = sdiv <4 x i32> %553, <i32 2, i32 2, i32 2, i32 2>
  %558 = sdiv <4 x i32> %556, <i32 2, i32 2, i32 2, i32 2>
  %559 = bitcast i32* %551 to <4 x i32>*
  store <4 x i32> %557, <4 x i32>* %559, align 4
  %560 = bitcast i32* %554 to <4 x i32>*
  store <4 x i32> %558, <4 x i32>* %560, align 4
  %561 = or i64 %549, 8
  %562 = getelementptr i32, i32* %1, i64 %561
  %563 = bitcast i32* %562 to <4 x i32>*
  %564 = load <4 x i32>, <4 x i32>* %563, align 4
  %565 = getelementptr i32, i32* %562, i64 4
  %566 = bitcast i32* %565 to <4 x i32>*
  %567 = load <4 x i32>, <4 x i32>* %566, align 4
  %568 = sdiv <4 x i32> %564, <i32 2, i32 2, i32 2, i32 2>
  %569 = sdiv <4 x i32> %567, <i32 2, i32 2, i32 2, i32 2>
  %570 = bitcast i32* %562 to <4 x i32>*
  store <4 x i32> %568, <4 x i32>* %570, align 4
  %571 = bitcast i32* %565 to <4 x i32>*
  store <4 x i32> %569, <4 x i32>* %571, align 4
  %572 = add i64 %549, 16
  %573 = add i64 %550, -2
  %574 = icmp eq i64 %573, 0
  br i1 %574, label %575, label %548, !llvm.loop !132

575:                                              ; preds = %548, %537
  %576 = phi i64 [ 0, %537 ], [ %572, %548 ]
  %577 = icmp eq i64 %544, 0
  br i1 %577, label %589, label %578

578:                                              ; preds = %575
  %579 = getelementptr i32, i32* %1, i64 %576
  %580 = bitcast i32* %579 to <4 x i32>*
  %581 = load <4 x i32>, <4 x i32>* %580, align 4
  %582 = getelementptr i32, i32* %579, i64 4
  %583 = bitcast i32* %582 to <4 x i32>*
  %584 = load <4 x i32>, <4 x i32>* %583, align 4
  %585 = sdiv <4 x i32> %581, <i32 2, i32 2, i32 2, i32 2>
  %586 = sdiv <4 x i32> %584, <i32 2, i32 2, i32 2, i32 2>
  %587 = bitcast i32* %579 to <4 x i32>*
  store <4 x i32> %585, <4 x i32>* %587, align 4
  %588 = bitcast i32* %582 to <4 x i32>*
  store <4 x i32> %586, <4 x i32>* %588, align 4
  br label %589

589:                                              ; preds = %575, %578
  %590 = icmp eq i64 %535, %538
  br i1 %590, label %1202, label %591

591:                                              ; preds = %589, %532
  %592 = phi i32* [ %1, %532 ], [ %539, %589 ]
  %593 = phi i32 [ 0, %532 ], [ %540, %589 ]
  br label %594

594:                                              ; preds = %591, %594
  %595 = phi i32* [ %600, %594 ], [ %592, %591 ]
  %596 = phi i32 [ %599, %594 ], [ %593, %591 ]
  %597 = load i32, i32* %595, align 4
  %598 = sdiv i32 %597, 2
  store i32 %598, i32* %595, align 4
  %599 = add nuw nsw i32 %596, 1
  %600 = getelementptr inbounds i32, i32* %595, i64 1
  %601 = icmp eq i32 %599, %3
  br i1 %601, label %1202, label %594, !llvm.loop !133

602:                                              ; preds = %529
  %603 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %0, i64 0, i32 0
  %604 = load i32*, i32** %603, align 8
  %605 = icmp sgt i32 %3, 0
  br i1 %605, label %606, label %1202

606:                                              ; preds = %602
  %607 = sext i32 %6 to i64
  %608 = mul i64 %607, %2
  %609 = getelementptr inbounds i32, i32* %604, i64 1
  br label %610

610:                                              ; preds = %610, %606
  %611 = phi i32* [ %1, %606 ], [ %624, %610 ]
  %612 = phi i32 [ 0, %606 ], [ %623, %610 ]
  %613 = getelementptr inbounds i32, i32* %611, i64 %608
  %614 = load i32, i32* %611, align 4
  %615 = load i32, i32* %613, align 4
  %616 = add nsw i32 %615, 1
  %617 = ashr i32 %616, 1
  %618 = sub nsw i32 %614, %617
  store i32 %618, i32* %609, align 4
  %619 = load i32, i32* %613, align 4
  %620 = add nsw i32 %618, %619
  store i32 %620, i32* %604, align 4
  store i32 %620, i32* %611, align 4
  %621 = load i32, i32* %609, align 4
  %622 = getelementptr inbounds i32, i32* %611, i64 %2
  store i32 %621, i32* %622, align 4
  %623 = add nuw nsw i32 %612, 1
  %624 = getelementptr inbounds i32, i32* %611, i64 1
  %625 = icmp eq i32 %623, %3
  br i1 %625, label %1202, label %610

626:                                              ; preds = %529
  %627 = icmp sgt i32 %9, 2
  %628 = icmp eq i32 %3, 8
  %629 = and i1 %628, %627
  br i1 %629, label %630, label %850

630:                                              ; preds = %626
  %631 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %0, i64 0, i32 0
  %632 = load i32*, i32** %631, align 8
  %633 = sext i32 %6 to i64
  %634 = mul i64 %633, %2
  %635 = getelementptr inbounds i32, i32* %1, i64 %634
  %636 = getelementptr inbounds i32, i32* %635, i64 %2
  %637 = bitcast i32* %636 to <2 x i64>*
  %638 = load <2 x i64>, <2 x i64>* %637, align 1
  %639 = bitcast i32* %1 to <4 x i32>*
  %640 = load <4 x i32>, <4 x i32>* %639, align 1
  %641 = bitcast i32* %635 to <4 x i32>*
  %642 = load <4 x i32>, <4 x i32>* %641, align 1
  %643 = bitcast <2 x i64> %638 to <4 x i32>
  %644 = add <4 x i32> %643, <i32 2, i32 2, i32 2, i32 2>
  %645 = add <4 x i32> %644, %642
  %646 = ashr <4 x i32> %645, <i32 2, i32 2, i32 2, i32 2>
  %647 = sub <4 x i32> %640, %646
  %648 = add <4 x i32> %647, %642
  %649 = bitcast i32* %632 to <4 x i32>*
  store <4 x i32> %648, <4 x i32>* %649, align 16
  %650 = getelementptr inbounds i32, i32* %636, i64 4
  %651 = bitcast i32* %650 to <2 x i64>*
  %652 = load <2 x i64>, <2 x i64>* %651, align 1
  %653 = getelementptr inbounds i32, i32* %1, i64 4
  %654 = bitcast i32* %653 to <4 x i32>*
  %655 = load <4 x i32>, <4 x i32>* %654, align 1
  %656 = getelementptr inbounds i32, i32* %635, i64 4
  %657 = bitcast i32* %656 to <4 x i32>*
  %658 = load <4 x i32>, <4 x i32>* %657, align 1
  %659 = bitcast <2 x i64> %652 to <4 x i32>
  %660 = add <4 x i32> %659, <i32 2, i32 2, i32 2, i32 2>
  %661 = add <4 x i32> %660, %658
  %662 = ashr <4 x i32> %661, <i32 2, i32 2, i32 2, i32 2>
  %663 = sub <4 x i32> %655, %662
  %664 = getelementptr inbounds i32, i32* %632, i64 4
  %665 = add <4 x i32> %663, %658
  %666 = bitcast i32* %664 to <4 x i32>*
  store <4 x i32> %665, <4 x i32>* %666, align 16
  %667 = add nsw i32 %9, -2
  %668 = and i32 %9, 1
  %669 = icmp ne i32 %668, 0
  %670 = xor i1 %669, true
  %671 = zext i1 %670 to i32
  %672 = sub nuw nsw i32 %667, %671
  %673 = icmp sgt i32 %672, 1
  br i1 %673, label %674, label %738

674:                                              ; preds = %630
  %675 = add nsw i32 %9, -4
  %676 = sub nsw i32 %675, %671
  %677 = lshr i32 %676, 1
  %678 = add nuw i32 %677, 2
  %679 = zext i32 %678 to i64
  br label %680

680:                                              ; preds = %680, %674
  %681 = phi i64 [ 1, %674 ], [ %733, %680 ]
  %682 = phi <4 x i32> [ %663, %674 ], [ %713, %680 ]
  %683 = phi <2 x i64> [ %652, %674 ], [ %694, %680 ]
  %684 = phi <4 x i32> [ %647, %674 ], [ %704, %680 ]
  %685 = phi <2 x i64> [ %638, %674 ], [ %691, %680 ]
  %686 = phi i64 [ 1, %674 ], [ %687, %680 ]
  %687 = add nuw nsw i64 %686, 1
  %688 = mul i64 %687, %2
  %689 = getelementptr inbounds i32, i32* %635, i64 %688
  %690 = bitcast i32* %689 to <2 x i64>*
  %691 = load <2 x i64>, <2 x i64>* %690, align 1
  %692 = getelementptr inbounds i32, i32* %689, i64 4
  %693 = bitcast i32* %692 to <2 x i64>*
  %694 = load <2 x i64>, <2 x i64>* %693, align 1
  %695 = mul i64 %686, %2
  %696 = getelementptr inbounds i32, i32* %1, i64 %695
  %697 = bitcast i32* %696 to <4 x i32>*
  %698 = load <4 x i32>, <4 x i32>* %697, align 1
  %699 = bitcast <2 x i64> %685 to <4 x i32>
  %700 = bitcast <2 x i64> %691 to <4 x i32>
  %701 = add <4 x i32> %699, <i32 2, i32 2, i32 2, i32 2>
  %702 = add <4 x i32> %701, %700
  %703 = ashr <4 x i32> %702, <i32 2, i32 2, i32 2, i32 2>
  %704 = sub <4 x i32> %698, %703
  %705 = getelementptr inbounds i32, i32* %696, i64 4
  %706 = bitcast i32* %705 to <4 x i32>*
  %707 = load <4 x i32>, <4 x i32>* %706, align 1
  %708 = bitcast <2 x i64> %683 to <4 x i32>
  %709 = bitcast <2 x i64> %694 to <4 x i32>
  %710 = add <4 x i32> %708, <i32 2, i32 2, i32 2, i32 2>
  %711 = add <4 x i32> %710, %709
  %712 = ashr <4 x i32> %711, <i32 2, i32 2, i32 2, i32 2>
  %713 = sub <4 x i32> %707, %712
  %714 = trunc i64 %681 to i32
  %715 = shl i32 %714, 3
  %716 = zext i32 %715 to i64
  %717 = getelementptr inbounds i32, i32* %632, i64 %716
  %718 = bitcast i32* %717 to <4 x i32>*
  store <4 x i32> %684, <4 x i32>* %718, align 16
  %719 = getelementptr inbounds i32, i32* %717, i64 4
  %720 = bitcast i32* %719 to <4 x i32>*
  store <4 x i32> %682, <4 x i32>* %720, align 16
  %721 = add i32 %715, 8
  %722 = sext i32 %721 to i64
  %723 = getelementptr inbounds i32, i32* %632, i64 %722
  %724 = add <4 x i32> %704, %684
  %725 = ashr <4 x i32> %724, <i32 1, i32 1, i32 1, i32 1>
  %726 = add <4 x i32> %725, %699
  %727 = bitcast i32* %723 to <4 x i32>*
  store <4 x i32> %726, <4 x i32>* %727, align 16
  %728 = getelementptr inbounds i32, i32* %723, i64 4
  %729 = add <4 x i32> %713, %682
  %730 = ashr <4 x i32> %729, <i32 1, i32 1, i32 1, i32 1>
  %731 = add <4 x i32> %730, %708
  %732 = bitcast i32* %728 to <4 x i32>*
  store <4 x i32> %731, <4 x i32>* %732, align 16
  %733 = add nuw nsw i64 %681, 2
  %734 = icmp eq i64 %687, %679
  br i1 %734, label %735, label %680

735:                                              ; preds = %680
  %736 = shl i64 %733, 3
  %737 = and i64 %736, 4294967288
  br label %738

738:                                              ; preds = %735, %630
  %739 = phi i64 [ 8, %630 ], [ %737, %735 ]
  %740 = phi <2 x i64> [ %638, %630 ], [ %691, %735 ]
  %741 = phi <4 x i32> [ %647, %630 ], [ %704, %735 ]
  %742 = phi <2 x i64> [ %652, %630 ], [ %694, %735 ]
  %743 = phi <4 x i32> [ %663, %630 ], [ %713, %735 ]
  %744 = getelementptr inbounds i32, i32* %632, i64 %739
  %745 = bitcast i32* %744 to <4 x i32>*
  store <4 x i32> %741, <4 x i32>* %745, align 16
  %746 = getelementptr inbounds i32, i32* %744, i64 4
  %747 = bitcast i32* %746 to <4 x i32>*
  store <4 x i32> %743, <4 x i32>* %747, align 16
  br i1 %669, label %786, label %748

748:                                              ; preds = %738
  %749 = sdiv i32 %9, 2
  %750 = add nsw i32 %749, -1
  %751 = sext i32 %750 to i64
  %752 = mul i64 %751, %2
  %753 = getelementptr inbounds i32, i32* %1, i64 %752
  %754 = bitcast i32* %753 to <4 x i32>*
  %755 = load <4 x i32>, <4 x i32>* %754, align 1
  %756 = bitcast <2 x i64> %740 to <4 x i32>
  %757 = shl <4 x i32> %756, <i32 1, i32 1, i32 1, i32 1>
  %758 = add <4 x i32> %757, <i32 2, i32 2, i32 2, i32 2>
  %759 = ashr <4 x i32> %758, <i32 2, i32 2, i32 2, i32 2>
  %760 = sub <4 x i32> %755, %759
  %761 = getelementptr inbounds i32, i32* %753, i64 4
  %762 = bitcast i32* %761 to <4 x i32>*
  %763 = load <4 x i32>, <4 x i32>* %762, align 1
  %764 = bitcast <2 x i64> %742 to <4 x i32>
  %765 = shl <4 x i32> %764, <i32 1, i32 1, i32 1, i32 1>
  %766 = add <4 x i32> %765, <i32 2, i32 2, i32 2, i32 2>
  %767 = ashr <4 x i32> %766, <i32 2, i32 2, i32 2, i32 2>
  %768 = sub <4 x i32> %763, %767
  %769 = shl nsw i32 %667, 3
  %770 = sext i32 %769 to i64
  %771 = getelementptr inbounds i32, i32* %632, i64 %770
  %772 = add <4 x i32> %760, %741
  %773 = ashr <4 x i32> %772, <i32 1, i32 1, i32 1, i32 1>
  %774 = add <4 x i32> %773, %756
  %775 = bitcast i32* %771 to <4 x i32>*
  store <4 x i32> %774, <4 x i32>* %775, align 16
  %776 = getelementptr inbounds i32, i32* %771, i64 4
  %777 = add <4 x i32> %768, %743
  %778 = ashr <4 x i32> %777, <i32 1, i32 1, i32 1, i32 1>
  %779 = add <4 x i32> %778, %764
  %780 = bitcast i32* %776 to <4 x i32>*
  store <4 x i32> %779, <4 x i32>* %780, align 16
  %781 = shl i32 %9, 3
  %782 = add i32 %781, -8
  %783 = sext i32 %782 to i64
  %784 = getelementptr inbounds i32, i32* %632, i64 %783
  %785 = bitcast i32* %784 to <4 x i32>*
  store <4 x i32> %760, <4 x i32>* %785, align 16
  br label %796

786:                                              ; preds = %738
  %787 = shl i32 %9, 3
  %788 = add i32 %787, -8
  %789 = sext i32 %788 to i64
  %790 = getelementptr inbounds i32, i32* %632, i64 %789
  %791 = bitcast <2 x i64> %740 to <4 x i32>
  %792 = add <4 x i32> %741, %791
  %793 = bitcast i32* %790 to <4 x i32>*
  store <4 x i32> %792, <4 x i32>* %793, align 16
  %794 = bitcast <2 x i64> %742 to <4 x i32>
  %795 = add <4 x i32> %743, %794
  br label %796

796:                                              ; preds = %786, %748
  %797 = phi i64 [ %789, %786 ], [ %783, %748 ]
  %798 = phi <4 x i32> [ %795, %786 ], [ %768, %748 ]
  %799 = getelementptr inbounds i32, i32* %632, i64 %797
  %800 = getelementptr inbounds i32, i32* %799, i64 4
  %801 = bitcast i32* %800 to <4 x i32>*
  store <4 x i32> %798, <4 x i32>* %801, align 16
  %802 = icmp sgt i32 %9, 0
  br i1 %802, label %803, label %1202

803:                                              ; preds = %796
  %804 = zext i32 %9 to i64
  %805 = and i64 %804, 1
  %806 = icmp eq i32 %9, 1
  br i1 %806, label %1181, label %807

807:                                              ; preds = %803
  %808 = sub nsw i64 %804, %805
  br label %809

809:                                              ; preds = %809, %807
  %810 = phi i64 [ 0, %807 ], [ %847, %809 ]
  %811 = phi i64 [ %808, %807 ], [ %848, %809 ]
  %812 = mul i64 %810, %2
  %813 = getelementptr inbounds i32, i32* %1, i64 %812
  %814 = bitcast i32* %813 to <2 x i64>*
  %815 = trunc i64 %810 to i32
  %816 = shl nsw i32 %815, 3
  %817 = zext i32 %816 to i64
  %818 = getelementptr inbounds i32, i32* %632, i64 %817
  %819 = bitcast i32* %818 to <2 x i64>*
  %820 = load <2 x i64>, <2 x i64>* %819, align 16
  store <2 x i64> %820, <2 x i64>* %814, align 1
  %821 = add i64 %812, 4
  %822 = getelementptr inbounds i32, i32* %1, i64 %821
  %823 = bitcast i32* %822 to <2 x i64>*
  %824 = or i32 %816, 4
  %825 = zext i32 %824 to i64
  %826 = getelementptr inbounds i32, i32* %632, i64 %825
  %827 = bitcast i32* %826 to <2 x i64>*
  %828 = load <2 x i64>, <2 x i64>* %827, align 16
  store <2 x i64> %828, <2 x i64>* %823, align 1
  %829 = or i64 %810, 1
  %830 = mul i64 %829, %2
  %831 = getelementptr inbounds i32, i32* %1, i64 %830
  %832 = bitcast i32* %831 to <2 x i64>*
  %833 = trunc i64 %829 to i32
  %834 = shl nsw i32 %833, 3
  %835 = zext i32 %834 to i64
  %836 = getelementptr inbounds i32, i32* %632, i64 %835
  %837 = bitcast i32* %836 to <2 x i64>*
  %838 = load <2 x i64>, <2 x i64>* %837, align 16
  store <2 x i64> %838, <2 x i64>* %832, align 1
  %839 = add i64 %830, 4
  %840 = getelementptr inbounds i32, i32* %1, i64 %839
  %841 = bitcast i32* %840 to <2 x i64>*
  %842 = or i32 %834, 4
  %843 = zext i32 %842 to i64
  %844 = getelementptr inbounds i32, i32* %632, i64 %843
  %845 = bitcast i32* %844 to <2 x i64>*
  %846 = load <2 x i64>, <2 x i64>* %845, align 16
  store <2 x i64> %846, <2 x i64>* %841, align 1
  %847 = add nuw nsw i64 %810, 2
  %848 = add i64 %811, -2
  %849 = icmp eq i64 %848, 0
  br i1 %849, label %1181, label %809

850:                                              ; preds = %626
  %851 = icmp sgt i32 %3, 0
  %852 = and i1 %627, %851
  br i1 %852, label %853, label %1202

853:                                              ; preds = %850
  %854 = getelementptr inbounds %struct.dwt_local, %struct.dwt_local* %0, i64 0, i32 0
  %855 = sext i32 %6 to i64
  %856 = mul i64 %855, %2
  %857 = add nsw i32 %9, -2
  %858 = and i32 %9, 1
  %859 = icmp ne i32 %858, 0
  %860 = xor i1 %859, true
  %861 = zext i1 %860 to i32
  %862 = sub nuw nsw i32 %857, %861
  %863 = icmp sgt i32 %862, 1
  %864 = add nsw i32 %9, -4
  %865 = sub nsw i32 %864, %861
  %866 = lshr i32 %865, 1
  %867 = add nuw i32 %866, 2
  %868 = zext i32 %867 to i64
  %869 = lshr i32 %9, 1
  %870 = add nsw i32 %869, -1
  %871 = sext i32 %870 to i64
  %872 = mul i64 %871, %2
  %873 = sext i32 %857 to i64
  %874 = add nsw i32 %9, -1
  %875 = sext i32 %874 to i64
  %876 = zext i32 %9 to i64
  %877 = add nsw i64 %868, -1
  %878 = add nsw i64 %868, -2
  %879 = shl nuw nsw i64 %878, 1
  %880 = add nuw nsw i64 %879, 3
  %881 = add nsw i64 %855, 2
  %882 = add nsw i64 %878, %855
  %883 = add nsw i64 %882, 3
  %884 = and i64 %876, 4294967288
  %885 = add nsw i64 %884, -8
  %886 = lshr exact i64 %885, 3
  %887 = add nuw nsw i64 %886, 1
  %888 = icmp ugt i64 %877, 3
  %889 = icmp eq i64 %2, 1
  %890 = and i1 %888, %889
  %891 = and i64 %877, -4
  %892 = shl nsw i64 %891, 1
  %893 = or i64 %892, 1
  %894 = or i64 %891, 1
  %895 = icmp eq i64 %877, %891
  %896 = icmp ugt i32 %9, 7
  %897 = icmp eq i64 %2, 1
  %898 = and i1 %896, %897
  %899 = and i64 %876, 4294967288
  %900 = and i64 %887, 3
  %901 = icmp ult i64 %885, 24
  %902 = sub nsw i64 %887, %900
  %903 = icmp eq i64 %900, 0
  %904 = icmp eq i64 %899, %876
  %905 = and i64 %876, 3
  %906 = icmp eq i64 %905, 0
  br label %907

907:                                              ; preds = %1155, %853
  %908 = phi i64 [ %1159, %1155 ], [ 0, %853 ]
  %909 = phi i32 [ %1156, %1155 ], [ 0, %853 ]
  %910 = phi i32* [ %1157, %1155 ], [ %1, %853 ]
  %911 = add i64 %908, 1
  %912 = getelementptr i32, i32* %1, i64 %911
  %913 = add i64 %908, %868
  %914 = getelementptr i32, i32* %1, i64 %913
  %915 = add i64 %881, %908
  %916 = getelementptr i32, i32* %1, i64 %915
  %917 = add i64 %883, %908
  %918 = getelementptr i32, i32* %1, i64 %917
  %919 = getelementptr i32, i32* %1, i64 %908
  %920 = add i64 %908, %876
  %921 = getelementptr i32, i32* %1, i64 %920
  %922 = load i32*, i32** %854, align 8
  %923 = getelementptr inbounds i32, i32* %910, i64 %856
  %924 = getelementptr inbounds i32, i32* %923, i64 %2
  %925 = load i32, i32* %924, align 4
  %926 = load i32, i32* %910, align 4
  %927 = load i32, i32* %923, align 4
  %928 = add i32 %925, 2
  %929 = add i32 %928, %927
  %930 = ashr i32 %929, 2
  %931 = sub nsw i32 %926, %930
  %932 = add nsw i32 %931, %927
  store i32 %932, i32* %922, align 4
  br i1 %863, label %933, label %1016

933:                                              ; preds = %907
  br i1 %890, label %934, label %982

934:                                              ; preds = %933
  %935 = getelementptr i32, i32* %922, i64 1
  %936 = getelementptr i32, i32* %922, i64 %880
  %937 = icmp ult i32* %935, %914
  %938 = icmp ult i32* %912, %936
  %939 = and i1 %937, %938
  %940 = icmp ult i32* %935, %918
  %941 = icmp ult i32* %916, %936
  %942 = and i1 %940, %941
  %943 = or i1 %939, %942
  br i1 %943, label %982, label %944

944:                                              ; preds = %934
  %945 = insertelement <4 x i32> undef, i32 %931, i32 3
  %946 = insertelement <4 x i32> undef, i32 %925, i32 3
  br label %947

947:                                              ; preds = %947, %944
  %948 = phi i64 [ 0, %944 ], [ %975, %947 ]
  %949 = phi <4 x i32> [ %945, %944 ], [ %967, %947 ]
  %950 = phi <4 x i32> [ %946, %944 ], [ %958, %947 ]
  %951 = shl i64 %948, 1
  %952 = or i64 %951, 1
  %953 = or i64 %948, 1
  %954 = add nuw nsw i64 %953, 1
  %955 = mul i64 %954, %2
  %956 = getelementptr inbounds i32, i32* %923, i64 %955
  %957 = bitcast i32* %956 to <4 x i32>*
  %958 = load <4 x i32>, <4 x i32>* %957, align 4, !alias.scope !134
  %959 = shufflevector <4 x i32> %950, <4 x i32> %958, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %960 = mul i64 %953, %2
  %961 = getelementptr inbounds i32, i32* %910, i64 %960
  %962 = bitcast i32* %961 to <4 x i32>*
  %963 = load <4 x i32>, <4 x i32>* %962, align 4, !alias.scope !137
  %964 = add <4 x i32> %959, <i32 2, i32 2, i32 2, i32 2>
  %965 = add <4 x i32> %964, %958
  %966 = ashr <4 x i32> %965, <i32 2, i32 2, i32 2, i32 2>
  %967 = sub nsw <4 x i32> %963, %966
  %968 = shufflevector <4 x i32> %949, <4 x i32> %967, <4 x i32> <i32 3, i32 4, i32 5, i32 6>
  %969 = add nsw <4 x i32> %967, %968
  %970 = ashr <4 x i32> %969, <i32 1, i32 1, i32 1, i32 1>
  %971 = add nsw <4 x i32> %970, %959
  %972 = getelementptr inbounds i32, i32* %922, i64 %952
  %973 = bitcast i32* %972 to <8 x i32>*
  %974 = shufflevector <4 x i32> %968, <4 x i32> %971, <8 x i32> <i32 0, i32 4, i32 1, i32 5, i32 2, i32 6, i32 3, i32 7>
  store <8 x i32> %974, <8 x i32>* %973, align 4
  %975 = add i64 %948, 4
  %976 = icmp eq i64 %975, %891
  br i1 %976, label %977, label %947, !llvm.loop !139

977:                                              ; preds = %947
  %978 = extractelement <4 x i32> %967, i32 3
  %979 = extractelement <4 x i32> %958, i32 3
  %980 = extractelement <4 x i32> %958, i32 3
  %981 = extractelement <4 x i32> %967, i32 3
  br i1 %895, label %1011, label %982

982:                                              ; preds = %933, %977, %934
  %983 = phi i64 [ 1, %933 ], [ 1, %934 ], [ %893, %977 ]
  %984 = phi i64 [ 1, %933 ], [ 1, %934 ], [ %894, %977 ]
  %985 = phi i32 [ %931, %933 ], [ %931, %934 ], [ %978, %977 ]
  %986 = phi i32 [ %925, %933 ], [ %925, %934 ], [ %979, %977 ]
  br label %987

987:                                              ; preds = %982, %987
  %988 = phi i64 [ %1009, %987 ], [ %983, %982 ]
  %989 = phi i64 [ %992, %987 ], [ %984, %982 ]
  %990 = phi i32 [ %1002, %987 ], [ %985, %982 ]
  %991 = phi i32 [ %995, %987 ], [ %986, %982 ]
  %992 = add nuw nsw i64 %989, 1
  %993 = mul i64 %992, %2
  %994 = getelementptr inbounds i32, i32* %923, i64 %993
  %995 = load i32, i32* %994, align 4
  %996 = mul i64 %989, %2
  %997 = getelementptr inbounds i32, i32* %910, i64 %996
  %998 = load i32, i32* %997, align 4
  %999 = add i32 %991, 2
  %1000 = add i32 %999, %995
  %1001 = ashr i32 %1000, 2
  %1002 = sub nsw i32 %998, %1001
  %1003 = getelementptr inbounds i32, i32* %922, i64 %988
  store i32 %990, i32* %1003, align 4
  %1004 = add nsw i32 %1002, %990
  %1005 = ashr i32 %1004, 1
  %1006 = add nsw i32 %1005, %991
  %1007 = add nuw nsw i64 %988, 1
  %1008 = getelementptr inbounds i32, i32* %922, i64 %1007
  store i32 %1006, i32* %1008, align 4
  %1009 = add nuw nsw i64 %988, 2
  %1010 = icmp eq i64 %992, %868
  br i1 %1010, label %1011, label %987, !llvm.loop !140

1011:                                             ; preds = %987, %977
  %1012 = phi i32 [ %980, %977 ], [ %995, %987 ]
  %1013 = phi i32 [ %981, %977 ], [ %1002, %987 ]
  %1014 = phi i64 [ %893, %977 ], [ %1009, %987 ]
  %1015 = and i64 %1014, 4294967295
  br label %1016

1016:                                             ; preds = %1011, %907
  %1017 = phi i64 [ 1, %907 ], [ %1015, %1011 ]
  %1018 = phi i32 [ %925, %907 ], [ %1012, %1011 ]
  %1019 = phi i32 [ %931, %907 ], [ %1013, %1011 ]
  %1020 = getelementptr inbounds i32, i32* %922, i64 %1017
  store i32 %1019, i32* %1020, align 4
  br i1 %859, label %1031, label %1021

1021:                                             ; preds = %1016
  %1022 = getelementptr inbounds i32, i32* %910, i64 %872
  %1023 = load i32, i32* %1022, align 4
  %1024 = add nsw i32 %1018, 1
  %1025 = ashr i32 %1024, 1
  %1026 = sub nsw i32 %1023, %1025
  %1027 = add nsw i32 %1026, %1019
  %1028 = ashr i32 %1027, 1
  %1029 = add nsw i32 %1028, %1018
  %1030 = getelementptr inbounds i32, i32* %922, i64 %873
  store i32 %1029, i32* %1030, align 4
  br label %1033

1031:                                             ; preds = %1016
  %1032 = add nsw i32 %1019, %1018
  br label %1033

1033:                                             ; preds = %1021, %1031
  %1034 = phi i32 [ %1026, %1021 ], [ %1032, %1031 ]
  %1035 = getelementptr inbounds i32, i32* %922, i64 %875
  store i32 %1034, i32* %1035, align 4
  br i1 %898, label %1036, label %1115

1036:                                             ; preds = %1033
  %1037 = getelementptr i32, i32* %922, i64 %876
  %1038 = icmp ult i32* %919, %1037
  %1039 = icmp ult i32* %922, %921
  %1040 = and i1 %1038, %1039
  br i1 %1040, label %1115, label %1041

1041:                                             ; preds = %1036
  br i1 %901, label %1095, label %1042

1042:                                             ; preds = %1041, %1042
  %1043 = phi i64 [ %1092, %1042 ], [ 0, %1041 ]
  %1044 = phi i64 [ %1093, %1042 ], [ %902, %1041 ]
  %1045 = getelementptr inbounds i32, i32* %922, i64 %1043
  %1046 = bitcast i32* %1045 to <4 x i32>*
  %1047 = load <4 x i32>, <4 x i32>* %1046, align 4, !alias.scope !141
  %1048 = getelementptr inbounds i32, i32* %1045, i64 4
  %1049 = bitcast i32* %1048 to <4 x i32>*
  %1050 = load <4 x i32>, <4 x i32>* %1049, align 4, !alias.scope !141
  %1051 = mul i64 %1043, %2
  %1052 = getelementptr inbounds i32, i32* %910, i64 %1051
  %1053 = bitcast i32* %1052 to <4 x i32>*
  store <4 x i32> %1047, <4 x i32>* %1053, align 4, !alias.scope !144, !noalias !141
  %1054 = getelementptr inbounds i32, i32* %1052, i64 4
  %1055 = bitcast i32* %1054 to <4 x i32>*
  store <4 x i32> %1050, <4 x i32>* %1055, align 4, !alias.scope !144, !noalias !141
  %1056 = or i64 %1043, 8
  %1057 = getelementptr inbounds i32, i32* %922, i64 %1056
  %1058 = bitcast i32* %1057 to <4 x i32>*
  %1059 = load <4 x i32>, <4 x i32>* %1058, align 4, !alias.scope !141
  %1060 = getelementptr inbounds i32, i32* %1057, i64 4
  %1061 = bitcast i32* %1060 to <4 x i32>*
  %1062 = load <4 x i32>, <4 x i32>* %1061, align 4, !alias.scope !141
  %1063 = mul i64 %1056, %2
  %1064 = getelementptr inbounds i32, i32* %910, i64 %1063
  %1065 = bitcast i32* %1064 to <4 x i32>*
  store <4 x i32> %1059, <4 x i32>* %1065, align 4, !alias.scope !144, !noalias !141
  %1066 = getelementptr inbounds i32, i32* %1064, i64 4
  %1067 = bitcast i32* %1066 to <4 x i32>*
  store <4 x i32> %1062, <4 x i32>* %1067, align 4, !alias.scope !144, !noalias !141
  %1068 = or i64 %1043, 16
  %1069 = getelementptr inbounds i32, i32* %922, i64 %1068
  %1070 = bitcast i32* %1069 to <4 x i32>*
  %1071 = load <4 x i32>, <4 x i32>* %1070, align 4, !alias.scope !141
  %1072 = getelementptr inbounds i32, i32* %1069, i64 4
  %1073 = bitcast i32* %1072 to <4 x i32>*
  %1074 = load <4 x i32>, <4 x i32>* %1073, align 4, !alias.scope !141
  %1075 = mul i64 %1068, %2
  %1076 = getelementptr inbounds i32, i32* %910, i64 %1075
  %1077 = bitcast i32* %1076 to <4 x i32>*
  store <4 x i32> %1071, <4 x i32>* %1077, align 4, !alias.scope !144, !noalias !141
  %1078 = getelementptr inbounds i32, i32* %1076, i64 4
  %1079 = bitcast i32* %1078 to <4 x i32>*
  store <4 x i32> %1074, <4 x i32>* %1079, align 4, !alias.scope !144, !noalias !141
  %1080 = or i64 %1043, 24
  %1081 = getelementptr inbounds i32, i32* %922, i64 %1080
  %1082 = bitcast i32* %1081 to <4 x i32>*
  %1083 = load <4 x i32>, <4 x i32>* %1082, align 4, !alias.scope !141
  %1084 = getelementptr inbounds i32, i32* %1081, i64 4
  %1085 = bitcast i32* %1084 to <4 x i32>*
  %1086 = load <4 x i32>, <4 x i32>* %1085, align 4, !alias.scope !141
  %1087 = mul i64 %1080, %2
  %1088 = getelementptr inbounds i32, i32* %910, i64 %1087
  %1089 = bitcast i32* %1088 to <4 x i32>*
  store <4 x i32> %1083, <4 x i32>* %1089, align 4, !alias.scope !144, !noalias !141
  %1090 = getelementptr inbounds i32, i32* %1088, i64 4
  %1091 = bitcast i32* %1090 to <4 x i32>*
  store <4 x i32> %1086, <4 x i32>* %1091, align 4, !alias.scope !144, !noalias !141
  %1092 = add i64 %1043, 32
  %1093 = add i64 %1044, -4
  %1094 = icmp eq i64 %1093, 0
  br i1 %1094, label %1095, label %1042, !llvm.loop !146

1095:                                             ; preds = %1042, %1041
  %1096 = phi i64 [ 0, %1041 ], [ %1092, %1042 ]
  br i1 %903, label %1114, label %1097

1097:                                             ; preds = %1095, %1097
  %1098 = phi i64 [ %1111, %1097 ], [ %1096, %1095 ]
  %1099 = phi i64 [ %1112, %1097 ], [ %900, %1095 ]
  %1100 = getelementptr inbounds i32, i32* %922, i64 %1098
  %1101 = bitcast i32* %1100 to <4 x i32>*
  %1102 = load <4 x i32>, <4 x i32>* %1101, align 4, !alias.scope !141
  %1103 = getelementptr inbounds i32, i32* %1100, i64 4
  %1104 = bitcast i32* %1103 to <4 x i32>*
  %1105 = load <4 x i32>, <4 x i32>* %1104, align 4, !alias.scope !141
  %1106 = mul i64 %1098, %2
  %1107 = getelementptr inbounds i32, i32* %910, i64 %1106
  %1108 = bitcast i32* %1107 to <4 x i32>*
  store <4 x i32> %1102, <4 x i32>* %1108, align 4, !alias.scope !144, !noalias !141
  %1109 = getelementptr inbounds i32, i32* %1107, i64 4
  %1110 = bitcast i32* %1109 to <4 x i32>*
  store <4 x i32> %1105, <4 x i32>* %1110, align 4, !alias.scope !144, !noalias !141
  %1111 = add i64 %1098, 8
  %1112 = add i64 %1099, -1
  %1113 = icmp eq i64 %1112, 0
  br i1 %1113, label %1114, label %1097, !llvm.loop !147

1114:                                             ; preds = %1097, %1095
  br i1 %904, label %1155, label %1115

1115:                                             ; preds = %1033, %1114, %1036
  %1116 = phi i64 [ 0, %1036 ], [ 0, %1033 ], [ %899, %1114 ]
  %1117 = xor i64 %1116, -1
  %1118 = add nsw i64 %1117, %876
  br i1 %906, label %1129, label %1119

1119:                                             ; preds = %1115, %1119
  %1120 = phi i64 [ %1126, %1119 ], [ %1116, %1115 ]
  %1121 = phi i64 [ %1127, %1119 ], [ %905, %1115 ]
  %1122 = getelementptr inbounds i32, i32* %922, i64 %1120
  %1123 = load i32, i32* %1122, align 4
  %1124 = mul i64 %1120, %2
  %1125 = getelementptr inbounds i32, i32* %910, i64 %1124
  store i32 %1123, i32* %1125, align 4
  %1126 = add nuw nsw i64 %1120, 1
  %1127 = add i64 %1121, -1
  %1128 = icmp eq i64 %1127, 0
  br i1 %1128, label %1129, label %1119, !llvm.loop !148

1129:                                             ; preds = %1119, %1115
  %1130 = phi i64 [ %1116, %1115 ], [ %1126, %1119 ]
  %1131 = icmp ult i64 %1118, 3
  br i1 %1131, label %1155, label %1132

1132:                                             ; preds = %1129, %1132
  %1133 = phi i64 [ %1153, %1132 ], [ %1130, %1129 ]
  %1134 = getelementptr inbounds i32, i32* %922, i64 %1133
  %1135 = load i32, i32* %1134, align 4
  %1136 = mul i64 %1133, %2
  %1137 = getelementptr inbounds i32, i32* %910, i64 %1136
  store i32 %1135, i32* %1137, align 4
  %1138 = add nuw nsw i64 %1133, 1
  %1139 = getelementptr inbounds i32, i32* %922, i64 %1138
  %1140 = load i32, i32* %1139, align 4
  %1141 = mul i64 %1138, %2
  %1142 = getelementptr inbounds i32, i32* %910, i64 %1141
  store i32 %1140, i32* %1142, align 4
  %1143 = add nuw nsw i64 %1133, 2
  %1144 = getelementptr inbounds i32, i32* %922, i64 %1143
  %1145 = load i32, i32* %1144, align 4
  %1146 = mul i64 %1143, %2
  %1147 = getelementptr inbounds i32, i32* %910, i64 %1146
  store i32 %1145, i32* %1147, align 4
  %1148 = add nuw nsw i64 %1133, 3
  %1149 = getelementptr inbounds i32, i32* %922, i64 %1148
  %1150 = load i32, i32* %1149, align 4
  %1151 = mul i64 %1148, %2
  %1152 = getelementptr inbounds i32, i32* %910, i64 %1151
  store i32 %1150, i32* %1152, align 4
  %1153 = add nuw nsw i64 %1133, 4
  %1154 = icmp eq i64 %1153, %876
  br i1 %1154, label %1155, label %1132, !llvm.loop !149

1155:                                             ; preds = %1129, %1132, %1114
  %1156 = add nuw nsw i32 %909, 1
  %1157 = getelementptr inbounds i32, i32* %910, i64 1
  %1158 = icmp eq i32 %1156, %3
  %1159 = add i64 %908, 1
  br i1 %1158, label %1202, label %907

1160:                                             ; preds = %179, %173
  %1161 = phi i64 [ 0, %173 ], [ %217, %179 ]
  %1162 = icmp eq i64 %175, 0
  br i1 %1162, label %1202, label %1163

1163:                                             ; preds = %1160
  %1164 = mul i64 %1161, %2
  %1165 = getelementptr inbounds i32, i32* %1, i64 %1164
  %1166 = bitcast i32* %1165 to <2 x i64>*
  %1167 = trunc i64 %1161 to i32
  %1168 = shl nsw i32 %1167, 3
  %1169 = zext i32 %1168 to i64
  %1170 = getelementptr inbounds i32, i32* %19, i64 %1169
  %1171 = bitcast i32* %1170 to <2 x i64>*
  %1172 = load <2 x i64>, <2 x i64>* %1171, align 16
  store <2 x i64> %1172, <2 x i64>* %1166, align 1
  %1173 = add i64 %1164, 4
  %1174 = getelementptr inbounds i32, i32* %1, i64 %1173
  %1175 = bitcast i32* %1174 to <2 x i64>*
  %1176 = or i32 %1168, 4
  %1177 = zext i32 %1176 to i64
  %1178 = getelementptr inbounds i32, i32* %19, i64 %1177
  %1179 = bitcast i32* %1178 to <2 x i64>*
  %1180 = load <2 x i64>, <2 x i64>* %1179, align 16
  store <2 x i64> %1180, <2 x i64>* %1175, align 1
  br label %1202

1181:                                             ; preds = %809, %803
  %1182 = phi i64 [ 0, %803 ], [ %847, %809 ]
  %1183 = icmp eq i64 %805, 0
  br i1 %1183, label %1202, label %1184

1184:                                             ; preds = %1181
  %1185 = mul i64 %1182, %2
  %1186 = getelementptr inbounds i32, i32* %1, i64 %1185
  %1187 = bitcast i32* %1186 to <2 x i64>*
  %1188 = trunc i64 %1182 to i32
  %1189 = shl nsw i32 %1188, 3
  %1190 = zext i32 %1189 to i64
  %1191 = getelementptr inbounds i32, i32* %632, i64 %1190
  %1192 = bitcast i32* %1191 to <2 x i64>*
  %1193 = load <2 x i64>, <2 x i64>* %1192, align 16
  store <2 x i64> %1193, <2 x i64>* %1187, align 1
  %1194 = add i64 %1185, 4
  %1195 = getelementptr inbounds i32, i32* %1, i64 %1194
  %1196 = bitcast i32* %1195 to <2 x i64>*
  %1197 = or i32 %1189, 4
  %1198 = zext i32 %1197 to i64
  %1199 = getelementptr inbounds i32, i32* %632, i64 %1198
  %1200 = bitcast i32* %1199 to <2 x i64>*
  %1201 = load <2 x i64>, <2 x i64>* %1200, align 16
  store <2 x i64> %1201, <2 x i64>* %1196, align 1
  br label %1202

1202:                                             ; preds = %610, %594, %1155, %1184, %1181, %524, %1163, %1160, %589, %602, %530, %796, %166, %220, %850
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @opj_dwt_decode_v_func(i8*, %struct.opj_tls_t* nocapture readnone) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 48
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = add i32 %5, 8
  %7 = getelementptr inbounds i8, i8* %0, i64 52
  %8 = bitcast i8* %7 to i32*
  %9 = load i32, i32* %8, align 4
  %10 = icmp ugt i32 %6, %9
  br i1 %10, label %28, label %11

11:                                               ; preds = %2
  %12 = bitcast i8* %0 to %struct.dwt_local*
  %13 = getelementptr inbounds i8, i8* %0, i64 40
  %14 = bitcast i8* %13 to i32**
  %15 = getelementptr inbounds i8, i8* %0, i64 36
  %16 = bitcast i8* %15 to i32*
  br label %17

17:                                               ; preds = %11, %17
  %18 = phi i32 [ %6, %11 ], [ %25, %17 ]
  %19 = phi i32 [ %5, %11 ], [ %18, %17 ]
  %20 = load i32*, i32** %14, align 8
  %21 = zext i32 %19 to i64
  %22 = getelementptr inbounds i32, i32* %20, i64 %21
  %23 = load i32, i32* %16, align 4
  %24 = zext i32 %23 to i64
  tail call fastcc void @opj_idwt53_v(%struct.dwt_local* %12, i32* %22, i64 %24, i32 8)
  %25 = add i32 %18, 8
  %26 = load i32, i32* %8, align 4
  %27 = icmp ugt i32 %25, %26
  br i1 %27, label %28, label %17

28:                                               ; preds = %17, %2
  %29 = phi i32 [ %5, %2 ], [ %18, %17 ]
  %30 = phi i32 [ %9, %2 ], [ %26, %17 ]
  %31 = icmp ugt i32 %30, %29
  br i1 %31, label %32, label %44

32:                                               ; preds = %28
  %33 = bitcast i8* %0 to %struct.dwt_local*
  %34 = getelementptr inbounds i8, i8* %0, i64 40
  %35 = bitcast i8* %34 to i32**
  %36 = load i32*, i32** %35, align 8
  %37 = zext i32 %29 to i64
  %38 = getelementptr inbounds i32, i32* %36, i64 %37
  %39 = getelementptr inbounds i8, i8* %0, i64 36
  %40 = bitcast i8* %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = zext i32 %41 to i64
  %43 = sub i32 %30, %29
  tail call fastcc void @opj_idwt53_v(%struct.dwt_local* %33, i32* %38, i64 %42, i32 %43)
  br label %44

44:                                               ; preds = %32, %28
  %45 = bitcast i8* %0 to i8**
  %46 = load i8*, i8** %45, align 8
  tail call void @opj_aligned_free(i8* %46) #10
  tail call void @opj_free(i8* %0) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc %struct.opj_sparse_array_int32* @opj_dwt_init_sparse_array(%struct.opj_tcd_tilecomp* nocapture readonly, i32) unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.opj_tcd_tilecomp, %struct.opj_tcd_tilecomp* %0, i64 0, i32 7
  %4 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %3, align 8
  %5 = add i32 %1, -1
  %6 = zext i32 %5 to i64
  %7 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %4, i64 %6, i32 2
  %8 = load i32, i32* %7, align 8
  %9 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %4, i64 %6, i32 0
  %10 = load i32, i32* %9, align 8
  %11 = sub nsw i32 %8, %10
  %12 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %4, i64 %6, i32 3
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %4, i64 %6, i32 1
  %15 = load i32, i32* %14, align 4
  %16 = sub nsw i32 %13, %15
  %17 = icmp ult i32 %11, 64
  %18 = select i1 %17, i32 %11, i32 64
  %19 = icmp ult i32 %16, 64
  %20 = select i1 %19, i32 %16, i32 64
  %21 = tail call %struct.opj_sparse_array_int32* @opj_sparse_array_int32_create(i32 %11, i32 %16, i32 %18, i32 %20) #10
  %22 = icmp eq %struct.opj_sparse_array_int32* %21, null
  br i1 %22, label %155, label %23

23:                                               ; preds = %2
  %24 = icmp eq i32 %1, 0
  br i1 %24, label %155, label %25

25:                                               ; preds = %23
  %26 = zext i32 %1 to i64
  br label %27

27:                                               ; preds = %152, %25
  %28 = phi i64 [ 0, %25 ], [ %153, %152 ]
  %29 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %3, align 8
  %30 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %29, i64 %28, i32 6
  %31 = load i32, i32* %30, align 8
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %152, label %33

33:                                               ; preds = %27
  %34 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %29, i64 %28, i32 4
  %35 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %29, i64 %28, i32 5
  %36 = add nuw i64 %28, 4294967295
  %37 = and i64 %36, 4294967295
  %38 = load i32, i32* %34, align 8
  %39 = load i32, i32* %35, align 4
  br label %40

40:                                               ; preds = %33, %142
  %41 = phi i32 [ %31, %33 ], [ %143, %142 ]
  %42 = phi i32 [ %39, %33 ], [ %144, %142 ]
  %43 = phi i32 [ %38, %33 ], [ %145, %142 ]
  %44 = phi i32 [ %39, %33 ], [ %146, %142 ]
  %45 = phi i32 [ %38, %33 ], [ %147, %142 ]
  %46 = phi i64 [ 0, %33 ], [ %148, %142 ]
  %47 = mul i32 %44, %45
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %142, label %49

49:                                               ; preds = %40
  %50 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %29, i64 %28, i32 7, i64 %46, i32 5
  %51 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %29, i64 %28, i32 7, i64 %46, i32 0
  %52 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %29, i64 %28, i32 7, i64 %46, i32 1
  %53 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %29, i64 %28, i32 7, i64 %46, i32 4
  br label %54

54:                                               ; preds = %49, %133
  %55 = phi i32 [ %42, %49 ], [ %134, %133 ]
  %56 = phi i32 [ %43, %49 ], [ %135, %133 ]
  %57 = phi i64 [ 0, %49 ], [ %136, %133 ]
  %58 = load %struct.opj_tcd_precinct*, %struct.opj_tcd_precinct** %50, align 8
  %59 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %58, i64 %57, i32 4
  %60 = load i32, i32* %59, align 8
  %61 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %58, i64 %57, i32 5
  %62 = load i32, i32* %61, align 4
  %63 = mul i32 %62, %60
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %133, label %65

65:                                               ; preds = %54
  %66 = getelementptr inbounds %struct.opj_tcd_precinct, %struct.opj_tcd_precinct* %58, i64 %57, i32 6
  %67 = bitcast %union.anon* %66 to %struct.opj_tcd_cblk_dec**
  br label %68

68:                                               ; preds = %65, %123
  %69 = phi i32 [ %62, %65 ], [ %124, %123 ]
  %70 = phi i32 [ %60, %65 ], [ %125, %123 ]
  %71 = phi i64 [ 0, %65 ], [ %126, %123 ]
  %72 = load %struct.opj_tcd_cblk_dec*, %struct.opj_tcd_cblk_dec** %67, align 8
  %73 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %72, i64 %71, i32 14
  %74 = load i32*, i32** %73, align 8
  %75 = icmp eq i32* %74, null
  br i1 %75, label %123, label %76

76:                                               ; preds = %68
  %77 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %72, i64 %71, i32 2
  %78 = load i32, i32* %77, align 8
  %79 = load i32, i32* %51, align 8
  %80 = sub nsw i32 %78, %79
  %81 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %72, i64 %71, i32 3
  %82 = load i32, i32* %81, align 4
  %83 = load i32, i32* %52, align 4
  %84 = sub nsw i32 %82, %83
  %85 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %72, i64 %71, i32 4
  %86 = load i32, i32* %85, align 8
  %87 = sub nsw i32 %86, %78
  %88 = getelementptr inbounds %struct.opj_tcd_cblk_dec, %struct.opj_tcd_cblk_dec* %72, i64 %71, i32 5
  %89 = load i32, i32* %88, align 4
  %90 = sub i32 %89, %82
  %91 = load i32, i32* %53, align 8
  %92 = and i32 %91, 1
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %102, label %94

94:                                               ; preds = %76
  %95 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %3, align 8
  %96 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %95, i64 %37, i32 2
  %97 = load i32, i32* %96, align 8
  %98 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %95, i64 %37, i32 0
  %99 = load i32, i32* %98, align 8
  %100 = add i32 %97, %80
  %101 = sub i32 %100, %99
  br label %102

102:                                              ; preds = %76, %94
  %103 = phi i32 [ %101, %94 ], [ %80, %76 ]
  %104 = and i32 %91, 2
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %114, label %106

106:                                              ; preds = %102
  %107 = load %struct.opj_tcd_resolution*, %struct.opj_tcd_resolution** %3, align 8
  %108 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %107, i64 %37, i32 3
  %109 = load i32, i32* %108, align 4
  %110 = getelementptr inbounds %struct.opj_tcd_resolution, %struct.opj_tcd_resolution* %107, i64 %37, i32 1
  %111 = load i32, i32* %110, align 4
  %112 = add i32 %109, %84
  %113 = sub i32 %112, %111
  br label %114

114:                                              ; preds = %102, %106
  %115 = phi i32 [ %113, %106 ], [ %84, %102 ]
  %116 = add i32 %103, %87
  %117 = add i32 %90, %115
  %118 = tail call i32 @opj_sparse_array_int32_write(%struct.opj_sparse_array_int32* nonnull %21, i32 %103, i32 %115, i32 %116, i32 %117, i32* nonnull %74, i32 1, i32 %87, i32 1) #10
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %151, label %120

120:                                              ; preds = %114
  %121 = load i32, i32* %59, align 8
  %122 = load i32, i32* %61, align 4
  br label %123

123:                                              ; preds = %120, %68
  %124 = phi i32 [ %122, %120 ], [ %69, %68 ]
  %125 = phi i32 [ %121, %120 ], [ %70, %68 ]
  %126 = add nuw nsw i64 %71, 1
  %127 = mul i32 %124, %125
  %128 = zext i32 %127 to i64
  %129 = icmp ult i64 %126, %128
  br i1 %129, label %68, label %130

130:                                              ; preds = %123
  %131 = load i32, i32* %34, align 8
  %132 = load i32, i32* %35, align 4
  br label %133

133:                                              ; preds = %130, %54
  %134 = phi i32 [ %132, %130 ], [ %55, %54 ]
  %135 = phi i32 [ %131, %130 ], [ %56, %54 ]
  %136 = add nuw nsw i64 %57, 1
  %137 = mul i32 %134, %135
  %138 = zext i32 %137 to i64
  %139 = icmp ult i64 %136, %138
  br i1 %139, label %54, label %140

140:                                              ; preds = %133
  %141 = load i32, i32* %30, align 8
  br label %142

142:                                              ; preds = %140, %40
  %143 = phi i32 [ %141, %140 ], [ %41, %40 ]
  %144 = phi i32 [ %134, %140 ], [ %42, %40 ]
  %145 = phi i32 [ %135, %140 ], [ %43, %40 ]
  %146 = phi i32 [ %134, %140 ], [ %44, %40 ]
  %147 = phi i32 [ %135, %140 ], [ %45, %40 ]
  %148 = add nuw nsw i64 %46, 1
  %149 = zext i32 %143 to i64
  %150 = icmp ult i64 %148, %149
  br i1 %150, label %40, label %152

151:                                              ; preds = %114
  tail call void @opj_sparse_array_int32_free(%struct.opj_sparse_array_int32* nonnull %21) #10
  br label %155

152:                                              ; preds = %142, %27
  %153 = add nuw nsw i64 %28, 1
  %154 = icmp eq i64 %153, %26
  br i1 %154, label %155, label %27

155:                                              ; preds = %152, %23, %151, %2
  %156 = phi %struct.opj_sparse_array_int32* [ null, %151 ], [ null, %2 ], [ %21, %23 ], [ %21, %152 ]
  ret %struct.opj_sparse_array_int32* %156
}

declare i32 @opj_sparse_array_int32_read(%struct.opj_sparse_array_int32*, i32, i32, i32, i32, i32*, i32, i32, i32) local_unnamed_addr #7

declare void @opj_sparse_array_int32_free(%struct.opj_sparse_array_int32*) local_unnamed_addr #7

declare i32 @opj_sparse_array_int32_write(%struct.opj_sparse_array_int32*, i32, i32, i32, i32, i32*, i32, i32, i32) local_unnamed_addr #7

declare %struct.opj_sparse_array_int32* @opj_sparse_array_int32_create(i32, i32, i32, i32) local_unnamed_addr #7

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #5

declare i8* @opj_aligned_malloc(i64) local_unnamed_addr #7

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @opj_v8dwt_interleave_h(%struct.v8dwt_local* noalias nocapture readonly, float* noalias, i32, i32) unnamed_addr #8 {
  %5 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %0, i64 0, i32 0
  %6 = load %union.opj_v8_t*, %union.opj_v8_t** %5, align 8
  %7 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %0, i64 0, i32 3
  %8 = load i32, i32* %7, align 8
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %6, i64 %9, i32 0, i64 0
  %11 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %0, i64 0, i32 4
  %12 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %0, i64 0, i32 5
  %13 = icmp ugt i32 %3, 7
  %14 = icmp eq i32 %3, 1
  %15 = icmp eq i32 %3, 2
  %16 = icmp eq i32 %3, 3
  %17 = icmp eq i32 %3, 4
  %18 = icmp eq i32 %3, 5
  %19 = icmp eq i32 %3, 6
  %20 = icmp eq i32 %3, 7
  %21 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %6, i64 1
  %22 = sub nsw i64 0, %9
  %23 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %21, i64 %22
  %24 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %23, i64 0, i32 0, i64 0
  %25 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %0, i64 0, i32 2
  %26 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %0, i64 0, i32 6
  %27 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %0, i64 0, i32 7
  br label %28

28:                                               ; preds = %184, %4
  %29 = phi i32* [ %11, %4 ], [ %26, %184 ]
  %30 = phi i32* [ %12, %4 ], [ %27, %184 ]
  %31 = phi float* [ %1, %4 ], [ %187, %184 ]
  %32 = phi float* [ %10, %4 ], [ %24, %184 ]
  %33 = phi i32 [ 0, %4 ], [ %188, %184 ]
  %34 = load i32, i32* %30, align 8
  %35 = load i32, i32* %29, align 4
  br i1 %13, label %36, label %110

36:                                               ; preds = %28
  %37 = ptrtoint float* %31 to i64
  %38 = and i64 %37, 15
  %39 = icmp eq i64 %38, 0
  br i1 %39, label %40, label %110

40:                                               ; preds = %36
  %41 = ptrtoint float* %32 to i64
  %42 = and i64 %41, 15
  %43 = icmp eq i64 %42, 0
  br i1 %43, label %44, label %110

44:                                               ; preds = %40
  %45 = icmp ult i32 %35, %34
  br i1 %45, label %46, label %184

46:                                               ; preds = %44
  %47 = zext i32 %35 to i64
  %48 = zext i32 %34 to i64
  br label %49

49:                                               ; preds = %49, %46
  %50 = phi i64 [ %47, %46 ], [ %108, %49 ]
  %51 = trunc i64 %50 to i32
  %52 = shl i64 %50, 4
  %53 = and i64 %52, 4294967280
  %54 = getelementptr inbounds float, float* %32, i64 %53
  %55 = getelementptr inbounds float, float* %31, i64 %50
  %56 = bitcast float* %55 to i32*
  %57 = load i32, i32* %56, align 4
  %58 = bitcast float* %54 to i32*
  store i32 %57, i32* %58, align 4
  %59 = add i32 %51, %2
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds float, float* %31, i64 %60
  %62 = bitcast float* %61 to i32*
  %63 = load i32, i32* %62, align 4
  %64 = getelementptr inbounds float, float* %54, i64 1
  %65 = bitcast float* %64 to i32*
  store i32 %63, i32* %65, align 4
  %66 = add i32 %59, %2
  %67 = zext i32 %66 to i64
  %68 = getelementptr inbounds float, float* %31, i64 %67
  %69 = bitcast float* %68 to i32*
  %70 = load i32, i32* %69, align 4
  %71 = getelementptr inbounds float, float* %54, i64 2
  %72 = bitcast float* %71 to i32*
  store i32 %70, i32* %72, align 4
  %73 = add i32 %66, %2
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds float, float* %31, i64 %74
  %76 = bitcast float* %75 to i32*
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds float, float* %54, i64 3
  %79 = bitcast float* %78 to i32*
  store i32 %77, i32* %79, align 4
  %80 = add i32 %73, %2
  %81 = zext i32 %80 to i64
  %82 = getelementptr inbounds float, float* %31, i64 %81
  %83 = bitcast float* %82 to i32*
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds float, float* %54, i64 4
  %86 = bitcast float* %85 to i32*
  store i32 %84, i32* %86, align 4
  %87 = add i32 %80, %2
  %88 = zext i32 %87 to i64
  %89 = getelementptr inbounds float, float* %31, i64 %88
  %90 = bitcast float* %89 to i32*
  %91 = load i32, i32* %90, align 4
  %92 = getelementptr inbounds float, float* %54, i64 5
  %93 = bitcast float* %92 to i32*
  store i32 %91, i32* %93, align 4
  %94 = add i32 %87, %2
  %95 = zext i32 %94 to i64
  %96 = getelementptr inbounds float, float* %31, i64 %95
  %97 = bitcast float* %96 to i32*
  %98 = load i32, i32* %97, align 4
  %99 = getelementptr inbounds float, float* %54, i64 6
  %100 = bitcast float* %99 to i32*
  store i32 %98, i32* %100, align 4
  %101 = add i32 %94, %2
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds float, float* %31, i64 %102
  %104 = bitcast float* %103 to i32*
  %105 = load i32, i32* %104, align 4
  %106 = getelementptr inbounds float, float* %54, i64 7
  %107 = bitcast float* %106 to i32*
  store i32 %105, i32* %107, align 4
  %108 = add nuw nsw i64 %50, 1
  %109 = icmp eq i64 %108, %48
  br i1 %109, label %184, label %49

110:                                              ; preds = %40, %36, %28
  %111 = icmp ult i32 %35, %34
  br i1 %111, label %112, label %184

112:                                              ; preds = %110
  %113 = zext i32 %35 to i64
  %114 = zext i32 %34 to i64
  br label %115

115:                                              ; preds = %181, %112
  %116 = phi i64 [ %113, %112 ], [ %182, %181 ]
  %117 = trunc i64 %116 to i32
  %118 = shl i64 %116, 4
  %119 = and i64 %118, 4294967280
  %120 = getelementptr inbounds float, float* %32, i64 %119
  %121 = getelementptr inbounds float, float* %31, i64 %116
  %122 = bitcast float* %121 to i32*
  %123 = load i32, i32* %122, align 4
  %124 = bitcast float* %120 to i32*
  store i32 %123, i32* %124, align 4
  %125 = add i32 %117, %2
  br i1 %14, label %181, label %126

126:                                              ; preds = %115
  %127 = zext i32 %125 to i64
  %128 = getelementptr inbounds float, float* %31, i64 %127
  %129 = bitcast float* %128 to i32*
  %130 = load i32, i32* %129, align 4
  %131 = getelementptr inbounds float, float* %120, i64 1
  %132 = bitcast float* %131 to i32*
  store i32 %130, i32* %132, align 4
  %133 = add i32 %125, %2
  br i1 %15, label %181, label %134

134:                                              ; preds = %126
  %135 = zext i32 %133 to i64
  %136 = getelementptr inbounds float, float* %31, i64 %135
  %137 = bitcast float* %136 to i32*
  %138 = load i32, i32* %137, align 4
  %139 = getelementptr inbounds float, float* %120, i64 2
  %140 = bitcast float* %139 to i32*
  store i32 %138, i32* %140, align 4
  %141 = add i32 %133, %2
  br i1 %16, label %181, label %142

142:                                              ; preds = %134
  %143 = zext i32 %141 to i64
  %144 = getelementptr inbounds float, float* %31, i64 %143
  %145 = bitcast float* %144 to i32*
  %146 = load i32, i32* %145, align 4
  %147 = getelementptr inbounds float, float* %120, i64 3
  %148 = bitcast float* %147 to i32*
  store i32 %146, i32* %148, align 4
  %149 = add i32 %141, %2
  br i1 %17, label %181, label %150

150:                                              ; preds = %142
  %151 = zext i32 %149 to i64
  %152 = getelementptr inbounds float, float* %31, i64 %151
  %153 = bitcast float* %152 to i32*
  %154 = load i32, i32* %153, align 4
  %155 = getelementptr inbounds float, float* %120, i64 4
  %156 = bitcast float* %155 to i32*
  store i32 %154, i32* %156, align 4
  %157 = add i32 %149, %2
  br i1 %18, label %181, label %158

158:                                              ; preds = %150
  %159 = zext i32 %157 to i64
  %160 = getelementptr inbounds float, float* %31, i64 %159
  %161 = bitcast float* %160 to i32*
  %162 = load i32, i32* %161, align 4
  %163 = getelementptr inbounds float, float* %120, i64 5
  %164 = bitcast float* %163 to i32*
  store i32 %162, i32* %164, align 4
  %165 = add i32 %157, %2
  br i1 %19, label %181, label %166

166:                                              ; preds = %158
  %167 = zext i32 %165 to i64
  %168 = getelementptr inbounds float, float* %31, i64 %167
  %169 = bitcast float* %168 to i32*
  %170 = load i32, i32* %169, align 4
  %171 = getelementptr inbounds float, float* %120, i64 6
  %172 = bitcast float* %171 to i32*
  store i32 %170, i32* %172, align 4
  br i1 %20, label %181, label %173

173:                                              ; preds = %166
  %174 = add i32 %165, %2
  %175 = zext i32 %174 to i64
  %176 = getelementptr inbounds float, float* %31, i64 %175
  %177 = bitcast float* %176 to i32*
  %178 = load i32, i32* %177, align 4
  %179 = getelementptr inbounds float, float* %120, i64 7
  %180 = bitcast float* %179 to i32*
  store i32 %178, i32* %180, align 4
  br label %181

181:                                              ; preds = %166, %158, %150, %142, %134, %126, %115, %173
  %182 = add nuw nsw i64 %116, 1
  %183 = icmp eq i64 %182, %114
  br i1 %183, label %184, label %115

184:                                              ; preds = %181, %49, %110, %44
  %185 = load i32, i32* %25, align 4
  %186 = sext i32 %185 to i64
  %187 = getelementptr inbounds float, float* %31, i64 %186
  %188 = add nuw nsw i32 %33, 1
  %189 = icmp eq i32 %188, 2
  br i1 %189, label %190, label %28

190:                                              ; preds = %184
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define internal fastcc void @opj_v8dwt_decode(%struct.v8dwt_local* noalias nocapture readonly) unnamed_addr #9 {
  %2 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %0, i64 0, i32 3
  %3 = load i32, i32* %2, align 8
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %5, label %13

5:                                                ; preds = %1
  %6 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %0, i64 0, i32 1
  %7 = load i32, i32* %6, align 8
  %8 = icmp sgt i32 %7, 0
  br i1 %8, label %21, label %9

9:                                                ; preds = %5
  %10 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %0, i64 0, i32 2
  %11 = load i32, i32* %10, align 4
  %12 = icmp sgt i32 %11, 1
  br i1 %12, label %21, label %476

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %0, i64 0, i32 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp sgt i32 %15, 0
  br i1 %16, label %21, label %17

17:                                               ; preds = %13
  %18 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %0, i64 0, i32 1
  %19 = load i32, i32* %18, align 8
  %20 = icmp sgt i32 %19, 1
  br i1 %20, label %21, label %476

21:                                               ; preds = %13, %17, %5, %9
  %22 = phi i32 [ 1, %9 ], [ 1, %5 ], [ 0, %17 ], [ 0, %13 ]
  %23 = phi i32 [ 0, %9 ], [ 0, %5 ], [ 1, %17 ], [ 1, %13 ]
  %24 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %0, i64 0, i32 0
  %25 = zext i32 %23 to i64
  %26 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %0, i64 0, i32 4
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %0, i64 0, i32 5
  %29 = load i32, i32* %28, align 8
  %30 = icmp ugt i32 %29, %27
  br i1 %30, label %31, label %71

31:                                               ; preds = %21
  %32 = load %union.opj_v8_t*, %union.opj_v8_t** %24, align 8
  %33 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %32, i64 %25
  %34 = bitcast %union.opj_v8_t* %33 to <4 x float>*
  %35 = shl i32 %27, 2
  %36 = zext i32 %35 to i64
  %37 = getelementptr inbounds <4 x float>, <4 x float>* %34, i64 %36
  %38 = sub i32 %29, %27
  %39 = and i32 %38, 1
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %49, label %41

41:                                               ; preds = %31
  %42 = load <4 x float>, <4 x float>* %37, align 16
  %43 = fmul <4 x float> %42, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  store <4 x float> %43, <4 x float>* %37, align 16
  %44 = getelementptr inbounds <4 x float>, <4 x float>* %37, i64 1
  %45 = load <4 x float>, <4 x float>* %44, align 16
  %46 = fmul <4 x float> %45, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  store <4 x float> %46, <4 x float>* %44, align 16
  %47 = add nuw i32 %27, 1
  %48 = getelementptr inbounds <4 x float>, <4 x float>* %37, i64 4
  br label %49

49:                                               ; preds = %31, %41
  %50 = phi i32 [ %27, %31 ], [ %47, %41 ]
  %51 = phi <4 x float>* [ %37, %31 ], [ %48, %41 ]
  %52 = add i32 %27, 1
  %53 = icmp eq i32 %29, %52
  br i1 %53, label %71, label %54

54:                                               ; preds = %49, %54
  %55 = phi i32 [ %68, %54 ], [ %50, %49 ]
  %56 = phi <4 x float>* [ %69, %54 ], [ %51, %49 ]
  %57 = load <4 x float>, <4 x float>* %56, align 16
  %58 = fmul <4 x float> %57, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  store <4 x float> %58, <4 x float>* %56, align 16
  %59 = getelementptr inbounds <4 x float>, <4 x float>* %56, i64 1
  %60 = load <4 x float>, <4 x float>* %59, align 16
  %61 = fmul <4 x float> %60, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  store <4 x float> %61, <4 x float>* %59, align 16
  %62 = getelementptr inbounds <4 x float>, <4 x float>* %56, i64 4
  %63 = load <4 x float>, <4 x float>* %62, align 16
  %64 = fmul <4 x float> %63, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  store <4 x float> %64, <4 x float>* %62, align 16
  %65 = getelementptr inbounds <4 x float>, <4 x float>* %56, i64 5
  %66 = load <4 x float>, <4 x float>* %65, align 16
  %67 = fmul <4 x float> %66, <float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000, float 0x3FF3AECB00000000>
  store <4 x float> %67, <4 x float>* %65, align 16
  %68 = add nuw i32 %55, 2
  %69 = getelementptr inbounds <4 x float>, <4 x float>* %56, i64 8
  %70 = icmp eq i32 %68, %29
  br i1 %70, label %71, label %54

71:                                               ; preds = %49, %54, %21
  %72 = zext i32 %22 to i64
  %73 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %0, i64 0, i32 6
  %74 = load i32, i32* %73, align 4
  %75 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %0, i64 0, i32 7
  %76 = load i32, i32* %75, align 8
  %77 = icmp ugt i32 %76, %74
  br i1 %77, label %78, label %118

78:                                               ; preds = %71
  %79 = load %union.opj_v8_t*, %union.opj_v8_t** %24, align 8
  %80 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %79, i64 %72
  %81 = bitcast %union.opj_v8_t* %80 to <4 x float>*
  %82 = shl i32 %74, 2
  %83 = zext i32 %82 to i64
  %84 = getelementptr inbounds <4 x float>, <4 x float>* %81, i64 %83
  %85 = sub i32 %76, %74
  %86 = and i32 %85, 1
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %96, label %88

88:                                               ; preds = %78
  %89 = load <4 x float>, <4 x float>* %84, align 16
  %90 = fmul <4 x float> %89, <float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000>
  store <4 x float> %90, <4 x float>* %84, align 16
  %91 = getelementptr inbounds <4 x float>, <4 x float>* %84, i64 1
  %92 = load <4 x float>, <4 x float>* %91, align 16
  %93 = fmul <4 x float> %92, <float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000>
  store <4 x float> %93, <4 x float>* %91, align 16
  %94 = add nuw i32 %74, 1
  %95 = getelementptr inbounds <4 x float>, <4 x float>* %84, i64 4
  br label %96

96:                                               ; preds = %78, %88
  %97 = phi i32 [ %74, %78 ], [ %94, %88 ]
  %98 = phi <4 x float>* [ %84, %78 ], [ %95, %88 ]
  %99 = add i32 %74, 1
  %100 = icmp eq i32 %76, %99
  br i1 %100, label %118, label %101

101:                                              ; preds = %96, %101
  %102 = phi i32 [ %115, %101 ], [ %97, %96 ]
  %103 = phi <4 x float>* [ %116, %101 ], [ %98, %96 ]
  %104 = load <4 x float>, <4 x float>* %103, align 16
  %105 = fmul <4 x float> %104, <float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000>
  store <4 x float> %105, <4 x float>* %103, align 16
  %106 = getelementptr inbounds <4 x float>, <4 x float>* %103, i64 1
  %107 = load <4 x float>, <4 x float>* %106, align 16
  %108 = fmul <4 x float> %107, <float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000>
  store <4 x float> %108, <4 x float>* %106, align 16
  %109 = getelementptr inbounds <4 x float>, <4 x float>* %103, i64 4
  %110 = load <4 x float>, <4 x float>* %109, align 16
  %111 = fmul <4 x float> %110, <float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000>
  store <4 x float> %111, <4 x float>* %109, align 16
  %112 = getelementptr inbounds <4 x float>, <4 x float>* %103, i64 5
  %113 = load <4 x float>, <4 x float>* %112, align 16
  %114 = fmul <4 x float> %113, <float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000, float 0x3FFA030000000000>
  store <4 x float> %114, <4 x float>* %112, align 16
  %115 = add nuw i32 %102, 2
  %116 = getelementptr inbounds <4 x float>, <4 x float>* %103, i64 8
  %117 = icmp eq i32 %115, %76
  br i1 %117, label %118, label %101

118:                                              ; preds = %96, %101, %71
  %119 = load %union.opj_v8_t*, %union.opj_v8_t** %24, align 8
  %120 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %119, i64 %72
  %121 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %119, i64 %25
  %122 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %121, i64 1
  %123 = load i32, i32* %26, align 4
  %124 = load i32, i32* %28, align 8
  %125 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %0, i64 0, i32 2
  %126 = load i32, i32* %125, align 4
  %127 = getelementptr inbounds %struct.v8dwt_local, %struct.v8dwt_local* %0, i64 0, i32 1
  %128 = load i32, i32* %127, align 8
  %129 = sub nsw i32 %128, %23
  %130 = icmp slt i32 %126, %129
  %131 = select i1 %130, i32 %126, i32 %129
  %132 = bitcast %union.opj_v8_t* %120 to <4 x float>*
  %133 = bitcast %union.opj_v8_t* %122 to <4 x float>*
  %134 = icmp ult i32 %124, %131
  %135 = select i1 %134, i32 %124, i32 %131
  %136 = icmp eq i32 %123, 0
  br i1 %136, label %137, label %162

137:                                              ; preds = %118
  %138 = icmp eq i32 %135, 0
  br i1 %138, label %166, label %139

139:                                              ; preds = %137
  %140 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %122, i64 -1
  %141 = bitcast %union.opj_v8_t* %140 to <4 x float>*
  %142 = load <4 x float>, <4 x float>* %141, align 16
  %143 = load <4 x float>, <4 x float>* %132, align 16
  %144 = load <4 x float>, <4 x float>* %133, align 16
  %145 = fadd <4 x float> %143, %144
  %146 = fmul <4 x float> %145, <float 0xBFDC626AA0000000, float 0xBFDC626AA0000000, float 0xBFDC626AA0000000, float 0xBFDC626AA0000000>
  %147 = fadd <4 x float> %142, %146
  store <4 x float> %147, <4 x float>* %141, align 16
  %148 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %122, i64 -1, i32 0, i64 4
  %149 = bitcast float* %148 to <4 x float>*
  %150 = load <4 x float>, <4 x float>* %149, align 16
  %151 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %119, i64 %72, i32 0, i64 4
  %152 = bitcast float* %151 to <4 x float>*
  %153 = load <4 x float>, <4 x float>* %152, align 16
  %154 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %122, i64 0, i32 0, i64 4
  %155 = bitcast float* %154 to <4 x float>*
  %156 = load <4 x float>, <4 x float>* %155, align 16
  %157 = fadd <4 x float> %153, %156
  %158 = fmul <4 x float> %157, <float 0xBFDC626AA0000000, float 0xBFDC626AA0000000, float 0xBFDC626AA0000000, float 0xBFDC626AA0000000>
  %159 = fadd <4 x float> %150, %158
  store <4 x float> %159, <4 x float>* %149, align 16
  %160 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %122, i64 2
  %161 = bitcast %union.opj_v8_t* %160 to <4 x float>*
  br label %166

162:                                              ; preds = %118
  %163 = shl i32 %123, 2
  %164 = zext i32 %163 to i64
  %165 = getelementptr inbounds <4 x float>, <4 x float>* %133, i64 %164
  br label %166

166:                                              ; preds = %162, %139, %137
  %167 = phi i32 [ 1, %139 ], [ 0, %137 ], [ %123, %162 ]
  %168 = phi <4 x float>* [ %161, %139 ], [ %133, %137 ], [ %165, %162 ]
  %169 = icmp ult i32 %167, %135
  br i1 %169, label %170, label %193

170:                                              ; preds = %166, %170
  %171 = phi i32 [ %191, %170 ], [ %167, %166 ]
  %172 = phi <4 x float>* [ %190, %170 ], [ %168, %166 ]
  %173 = getelementptr inbounds <4 x float>, <4 x float>* %172, i64 -2
  %174 = load <4 x float>, <4 x float>* %173, align 16
  %175 = getelementptr inbounds <4 x float>, <4 x float>* %172, i64 -4
  %176 = load <4 x float>, <4 x float>* %175, align 16
  %177 = load <4 x float>, <4 x float>* %172, align 16
  %178 = fadd <4 x float> %176, %177
  %179 = fmul <4 x float> %178, <float 0xBFDC626AA0000000, float 0xBFDC626AA0000000, float 0xBFDC626AA0000000, float 0xBFDC626AA0000000>
  %180 = fadd <4 x float> %174, %179
  store <4 x float> %180, <4 x float>* %173, align 16
  %181 = getelementptr inbounds <4 x float>, <4 x float>* %172, i64 -1
  %182 = load <4 x float>, <4 x float>* %181, align 16
  %183 = getelementptr inbounds <4 x float>, <4 x float>* %172, i64 -3
  %184 = load <4 x float>, <4 x float>* %183, align 16
  %185 = getelementptr inbounds <4 x float>, <4 x float>* %172, i64 1
  %186 = load <4 x float>, <4 x float>* %185, align 16
  %187 = fadd <4 x float> %184, %186
  %188 = fmul <4 x float> %187, <float 0xBFDC626AA0000000, float 0xBFDC626AA0000000, float 0xBFDC626AA0000000, float 0xBFDC626AA0000000>
  %189 = fadd <4 x float> %182, %188
  store <4 x float> %189, <4 x float>* %181, align 16
  %190 = getelementptr inbounds <4 x float>, <4 x float>* %172, i64 4
  %191 = add nuw i32 %171, 1
  %192 = icmp ult i32 %191, %135
  br i1 %192, label %170, label %193

193:                                              ; preds = %170, %166
  %194 = phi <4 x float>* [ %168, %166 ], [ %190, %170 ]
  %195 = icmp ult i32 %131, %124
  br i1 %195, label %196, label %209

196:                                              ; preds = %193
  %197 = getelementptr inbounds <4 x float>, <4 x float>* %194, i64 -2
  %198 = load <4 x float>, <4 x float>* %197, align 16
  %199 = getelementptr inbounds <4 x float>, <4 x float>* %194, i64 -4
  %200 = load <4 x float>, <4 x float>* %199, align 16
  %201 = fmul <4 x float> %200, <float 0xBFEC626AA0000000, float 0xBFEC626AA0000000, float 0xBFEC626AA0000000, float 0xBFEC626AA0000000>
  %202 = fadd <4 x float> %198, %201
  store <4 x float> %202, <4 x float>* %197, align 16
  %203 = getelementptr inbounds <4 x float>, <4 x float>* %194, i64 -1
  %204 = load <4 x float>, <4 x float>* %203, align 16
  %205 = getelementptr inbounds <4 x float>, <4 x float>* %194, i64 -3
  %206 = load <4 x float>, <4 x float>* %205, align 16
  %207 = fmul <4 x float> %206, <float 0xBFEC626AA0000000, float 0xBFEC626AA0000000, float 0xBFEC626AA0000000, float 0xBFEC626AA0000000>
  %208 = fadd <4 x float> %204, %207
  store <4 x float> %208, <4 x float>* %203, align 16
  br label %209

209:                                              ; preds = %193, %196
  %210 = load %union.opj_v8_t*, %union.opj_v8_t** %24, align 8
  %211 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %210, i64 %25
  %212 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %210, i64 %72
  %213 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %212, i64 1
  %214 = load i32, i32* %73, align 4
  %215 = load i32, i32* %75, align 8
  %216 = load i32, i32* %127, align 8
  %217 = load i32, i32* %125, align 4
  %218 = sub nsw i32 %217, %22
  %219 = icmp slt i32 %216, %218
  %220 = select i1 %219, i32 %216, i32 %218
  %221 = bitcast %union.opj_v8_t* %211 to <4 x float>*
  %222 = bitcast %union.opj_v8_t* %213 to <4 x float>*
  %223 = icmp ult i32 %215, %220
  %224 = select i1 %223, i32 %215, i32 %220
  %225 = icmp eq i32 %214, 0
  br i1 %225, label %226, label %251

226:                                              ; preds = %209
  %227 = icmp eq i32 %224, 0
  br i1 %227, label %255, label %228

228:                                              ; preds = %226
  %229 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %213, i64 -1
  %230 = bitcast %union.opj_v8_t* %229 to <4 x float>*
  %231 = load <4 x float>, <4 x float>* %230, align 16
  %232 = load <4 x float>, <4 x float>* %221, align 16
  %233 = load <4 x float>, <4 x float>* %222, align 16
  %234 = fadd <4 x float> %232, %233
  %235 = fmul <4 x float> %234, <float 0xBFEC40CEC0000000, float 0xBFEC40CEC0000000, float 0xBFEC40CEC0000000, float 0xBFEC40CEC0000000>
  %236 = fadd <4 x float> %231, %235
  store <4 x float> %236, <4 x float>* %230, align 16
  %237 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %213, i64 -1, i32 0, i64 4
  %238 = bitcast float* %237 to <4 x float>*
  %239 = load <4 x float>, <4 x float>* %238, align 16
  %240 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %210, i64 %25, i32 0, i64 4
  %241 = bitcast float* %240 to <4 x float>*
  %242 = load <4 x float>, <4 x float>* %241, align 16
  %243 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %213, i64 0, i32 0, i64 4
  %244 = bitcast float* %243 to <4 x float>*
  %245 = load <4 x float>, <4 x float>* %244, align 16
  %246 = fadd <4 x float> %242, %245
  %247 = fmul <4 x float> %246, <float 0xBFEC40CEC0000000, float 0xBFEC40CEC0000000, float 0xBFEC40CEC0000000, float 0xBFEC40CEC0000000>
  %248 = fadd <4 x float> %239, %247
  store <4 x float> %248, <4 x float>* %238, align 16
  %249 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %213, i64 2
  %250 = bitcast %union.opj_v8_t* %249 to <4 x float>*
  br label %255

251:                                              ; preds = %209
  %252 = shl i32 %214, 2
  %253 = zext i32 %252 to i64
  %254 = getelementptr inbounds <4 x float>, <4 x float>* %222, i64 %253
  br label %255

255:                                              ; preds = %251, %228, %226
  %256 = phi i32 [ 1, %228 ], [ 0, %226 ], [ %214, %251 ]
  %257 = phi <4 x float>* [ %250, %228 ], [ %222, %226 ], [ %254, %251 ]
  %258 = icmp ult i32 %256, %224
  br i1 %258, label %259, label %282

259:                                              ; preds = %255, %259
  %260 = phi i32 [ %280, %259 ], [ %256, %255 ]
  %261 = phi <4 x float>* [ %279, %259 ], [ %257, %255 ]
  %262 = getelementptr inbounds <4 x float>, <4 x float>* %261, i64 -2
  %263 = load <4 x float>, <4 x float>* %262, align 16
  %264 = getelementptr inbounds <4 x float>, <4 x float>* %261, i64 -4
  %265 = load <4 x float>, <4 x float>* %264, align 16
  %266 = load <4 x float>, <4 x float>* %261, align 16
  %267 = fadd <4 x float> %265, %266
  %268 = fmul <4 x float> %267, <float 0xBFEC40CEC0000000, float 0xBFEC40CEC0000000, float 0xBFEC40CEC0000000, float 0xBFEC40CEC0000000>
  %269 = fadd <4 x float> %263, %268
  store <4 x float> %269, <4 x float>* %262, align 16
  %270 = getelementptr inbounds <4 x float>, <4 x float>* %261, i64 -1
  %271 = load <4 x float>, <4 x float>* %270, align 16
  %272 = getelementptr inbounds <4 x float>, <4 x float>* %261, i64 -3
  %273 = load <4 x float>, <4 x float>* %272, align 16
  %274 = getelementptr inbounds <4 x float>, <4 x float>* %261, i64 1
  %275 = load <4 x float>, <4 x float>* %274, align 16
  %276 = fadd <4 x float> %273, %275
  %277 = fmul <4 x float> %276, <float 0xBFEC40CEC0000000, float 0xBFEC40CEC0000000, float 0xBFEC40CEC0000000, float 0xBFEC40CEC0000000>
  %278 = fadd <4 x float> %271, %277
  store <4 x float> %278, <4 x float>* %270, align 16
  %279 = getelementptr inbounds <4 x float>, <4 x float>* %261, i64 4
  %280 = add nuw i32 %260, 1
  %281 = icmp ult i32 %280, %224
  br i1 %281, label %259, label %282

282:                                              ; preds = %259, %255
  %283 = phi <4 x float>* [ %257, %255 ], [ %279, %259 ]
  %284 = icmp ult i32 %220, %215
  br i1 %284, label %285, label %298

285:                                              ; preds = %282
  %286 = getelementptr inbounds <4 x float>, <4 x float>* %283, i64 -2
  %287 = load <4 x float>, <4 x float>* %286, align 16
  %288 = getelementptr inbounds <4 x float>, <4 x float>* %283, i64 -4
  %289 = load <4 x float>, <4 x float>* %288, align 16
  %290 = fmul <4 x float> %289, <float 0xBFFC40CEC0000000, float 0xBFFC40CEC0000000, float 0xBFFC40CEC0000000, float 0xBFFC40CEC0000000>
  %291 = fadd <4 x float> %287, %290
  store <4 x float> %291, <4 x float>* %286, align 16
  %292 = getelementptr inbounds <4 x float>, <4 x float>* %283, i64 -1
  %293 = load <4 x float>, <4 x float>* %292, align 16
  %294 = getelementptr inbounds <4 x float>, <4 x float>* %283, i64 -3
  %295 = load <4 x float>, <4 x float>* %294, align 16
  %296 = fmul <4 x float> %295, <float 0xBFFC40CEC0000000, float 0xBFFC40CEC0000000, float 0xBFFC40CEC0000000, float 0xBFFC40CEC0000000>
  %297 = fadd <4 x float> %293, %296
  store <4 x float> %297, <4 x float>* %292, align 16
  br label %298

298:                                              ; preds = %282, %285
  %299 = load %union.opj_v8_t*, %union.opj_v8_t** %24, align 8
  %300 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %299, i64 %72
  %301 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %299, i64 %25
  %302 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %301, i64 1
  %303 = load i32, i32* %26, align 4
  %304 = load i32, i32* %28, align 8
  %305 = load i32, i32* %125, align 4
  %306 = load i32, i32* %127, align 8
  %307 = sub nsw i32 %306, %23
  %308 = icmp slt i32 %305, %307
  %309 = select i1 %308, i32 %305, i32 %307
  %310 = bitcast %union.opj_v8_t* %300 to <4 x float>*
  %311 = bitcast %union.opj_v8_t* %302 to <4 x float>*
  %312 = icmp ult i32 %304, %309
  %313 = select i1 %312, i32 %304, i32 %309
  %314 = icmp eq i32 %303, 0
  br i1 %314, label %315, label %340

315:                                              ; preds = %298
  %316 = icmp eq i32 %313, 0
  br i1 %316, label %344, label %317

317:                                              ; preds = %315
  %318 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %302, i64 -1
  %319 = bitcast %union.opj_v8_t* %318 to <4 x float>*
  %320 = load <4 x float>, <4 x float>* %319, align 16
  %321 = load <4 x float>, <4 x float>* %310, align 16
  %322 = load <4 x float>, <4 x float>* %311, align 16
  %323 = fadd <4 x float> %321, %322
  %324 = fmul <4 x float> %323, <float 0x3FAB2035C0000000, float 0x3FAB2035C0000000, float 0x3FAB2035C0000000, float 0x3FAB2035C0000000>
  %325 = fadd <4 x float> %320, %324
  store <4 x float> %325, <4 x float>* %319, align 16
  %326 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %302, i64 -1, i32 0, i64 4
  %327 = bitcast float* %326 to <4 x float>*
  %328 = load <4 x float>, <4 x float>* %327, align 16
  %329 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %299, i64 %72, i32 0, i64 4
  %330 = bitcast float* %329 to <4 x float>*
  %331 = load <4 x float>, <4 x float>* %330, align 16
  %332 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %302, i64 0, i32 0, i64 4
  %333 = bitcast float* %332 to <4 x float>*
  %334 = load <4 x float>, <4 x float>* %333, align 16
  %335 = fadd <4 x float> %331, %334
  %336 = fmul <4 x float> %335, <float 0x3FAB2035C0000000, float 0x3FAB2035C0000000, float 0x3FAB2035C0000000, float 0x3FAB2035C0000000>
  %337 = fadd <4 x float> %328, %336
  store <4 x float> %337, <4 x float>* %327, align 16
  %338 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %302, i64 2
  %339 = bitcast %union.opj_v8_t* %338 to <4 x float>*
  br label %344

340:                                              ; preds = %298
  %341 = shl i32 %303, 2
  %342 = zext i32 %341 to i64
  %343 = getelementptr inbounds <4 x float>, <4 x float>* %311, i64 %342
  br label %344

344:                                              ; preds = %340, %317, %315
  %345 = phi i32 [ 1, %317 ], [ 0, %315 ], [ %303, %340 ]
  %346 = phi <4 x float>* [ %339, %317 ], [ %311, %315 ], [ %343, %340 ]
  %347 = icmp ult i32 %345, %313
  br i1 %347, label %348, label %371

348:                                              ; preds = %344, %348
  %349 = phi i32 [ %369, %348 ], [ %345, %344 ]
  %350 = phi <4 x float>* [ %368, %348 ], [ %346, %344 ]
  %351 = getelementptr inbounds <4 x float>, <4 x float>* %350, i64 -2
  %352 = load <4 x float>, <4 x float>* %351, align 16
  %353 = getelementptr inbounds <4 x float>, <4 x float>* %350, i64 -4
  %354 = load <4 x float>, <4 x float>* %353, align 16
  %355 = load <4 x float>, <4 x float>* %350, align 16
  %356 = fadd <4 x float> %354, %355
  %357 = fmul <4 x float> %356, <float 0x3FAB2035C0000000, float 0x3FAB2035C0000000, float 0x3FAB2035C0000000, float 0x3FAB2035C0000000>
  %358 = fadd <4 x float> %352, %357
  store <4 x float> %358, <4 x float>* %351, align 16
  %359 = getelementptr inbounds <4 x float>, <4 x float>* %350, i64 -1
  %360 = load <4 x float>, <4 x float>* %359, align 16
  %361 = getelementptr inbounds <4 x float>, <4 x float>* %350, i64 -3
  %362 = load <4 x float>, <4 x float>* %361, align 16
  %363 = getelementptr inbounds <4 x float>, <4 x float>* %350, i64 1
  %364 = load <4 x float>, <4 x float>* %363, align 16
  %365 = fadd <4 x float> %362, %364
  %366 = fmul <4 x float> %365, <float 0x3FAB2035C0000000, float 0x3FAB2035C0000000, float 0x3FAB2035C0000000, float 0x3FAB2035C0000000>
  %367 = fadd <4 x float> %360, %366
  store <4 x float> %367, <4 x float>* %359, align 16
  %368 = getelementptr inbounds <4 x float>, <4 x float>* %350, i64 4
  %369 = add nuw i32 %349, 1
  %370 = icmp ult i32 %369, %313
  br i1 %370, label %348, label %371

371:                                              ; preds = %348, %344
  %372 = phi <4 x float>* [ %346, %344 ], [ %368, %348 ]
  %373 = icmp ult i32 %309, %304
  br i1 %373, label %374, label %387

374:                                              ; preds = %371
  %375 = getelementptr inbounds <4 x float>, <4 x float>* %372, i64 -2
  %376 = load <4 x float>, <4 x float>* %375, align 16
  %377 = getelementptr inbounds <4 x float>, <4 x float>* %372, i64 -4
  %378 = load <4 x float>, <4 x float>* %377, align 16
  %379 = fmul <4 x float> %378, <float 0x3FBB2035C0000000, float 0x3FBB2035C0000000, float 0x3FBB2035C0000000, float 0x3FBB2035C0000000>
  %380 = fadd <4 x float> %376, %379
  store <4 x float> %380, <4 x float>* %375, align 16
  %381 = getelementptr inbounds <4 x float>, <4 x float>* %372, i64 -1
  %382 = load <4 x float>, <4 x float>* %381, align 16
  %383 = getelementptr inbounds <4 x float>, <4 x float>* %372, i64 -3
  %384 = load <4 x float>, <4 x float>* %383, align 16
  %385 = fmul <4 x float> %384, <float 0x3FBB2035C0000000, float 0x3FBB2035C0000000, float 0x3FBB2035C0000000, float 0x3FBB2035C0000000>
  %386 = fadd <4 x float> %382, %385
  store <4 x float> %386, <4 x float>* %381, align 16
  br label %387

387:                                              ; preds = %371, %374
  %388 = load %union.opj_v8_t*, %union.opj_v8_t** %24, align 8
  %389 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %388, i64 %25
  %390 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %388, i64 %72
  %391 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %390, i64 1
  %392 = load i32, i32* %73, align 4
  %393 = load i32, i32* %75, align 8
  %394 = load i32, i32* %127, align 8
  %395 = load i32, i32* %125, align 4
  %396 = sub nsw i32 %395, %22
  %397 = icmp slt i32 %394, %396
  %398 = select i1 %397, i32 %394, i32 %396
  %399 = bitcast %union.opj_v8_t* %389 to <4 x float>*
  %400 = bitcast %union.opj_v8_t* %391 to <4 x float>*
  %401 = icmp ult i32 %393, %398
  %402 = select i1 %401, i32 %393, i32 %398
  %403 = icmp eq i32 %392, 0
  br i1 %403, label %404, label %429

404:                                              ; preds = %387
  %405 = icmp eq i32 %402, 0
  br i1 %405, label %433, label %406

406:                                              ; preds = %404
  %407 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %391, i64 -1
  %408 = bitcast %union.opj_v8_t* %407 to <4 x float>*
  %409 = load <4 x float>, <4 x float>* %408, align 16
  %410 = load <4 x float>, <4 x float>* %399, align 16
  %411 = load <4 x float>, <4 x float>* %400, align 16
  %412 = fadd <4 x float> %410, %411
  %413 = fmul <4 x float> %412, <float 0x3FF960CE60000000, float 0x3FF960CE60000000, float 0x3FF960CE60000000, float 0x3FF960CE60000000>
  %414 = fadd <4 x float> %409, %413
  store <4 x float> %414, <4 x float>* %408, align 16
  %415 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %391, i64 -1, i32 0, i64 4
  %416 = bitcast float* %415 to <4 x float>*
  %417 = load <4 x float>, <4 x float>* %416, align 16
  %418 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %388, i64 %25, i32 0, i64 4
  %419 = bitcast float* %418 to <4 x float>*
  %420 = load <4 x float>, <4 x float>* %419, align 16
  %421 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %391, i64 0, i32 0, i64 4
  %422 = bitcast float* %421 to <4 x float>*
  %423 = load <4 x float>, <4 x float>* %422, align 16
  %424 = fadd <4 x float> %420, %423
  %425 = fmul <4 x float> %424, <float 0x3FF960CE60000000, float 0x3FF960CE60000000, float 0x3FF960CE60000000, float 0x3FF960CE60000000>
  %426 = fadd <4 x float> %417, %425
  store <4 x float> %426, <4 x float>* %416, align 16
  %427 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %391, i64 2
  %428 = bitcast %union.opj_v8_t* %427 to <4 x float>*
  br label %433

429:                                              ; preds = %387
  %430 = shl i32 %392, 2
  %431 = zext i32 %430 to i64
  %432 = getelementptr inbounds <4 x float>, <4 x float>* %400, i64 %431
  br label %433

433:                                              ; preds = %429, %406, %404
  %434 = phi i32 [ 1, %406 ], [ 0, %404 ], [ %392, %429 ]
  %435 = phi <4 x float>* [ %428, %406 ], [ %400, %404 ], [ %432, %429 ]
  %436 = icmp ult i32 %434, %402
  br i1 %436, label %437, label %460

437:                                              ; preds = %433, %437
  %438 = phi i32 [ %458, %437 ], [ %434, %433 ]
  %439 = phi <4 x float>* [ %457, %437 ], [ %435, %433 ]
  %440 = getelementptr inbounds <4 x float>, <4 x float>* %439, i64 -2
  %441 = load <4 x float>, <4 x float>* %440, align 16
  %442 = getelementptr inbounds <4 x float>, <4 x float>* %439, i64 -4
  %443 = load <4 x float>, <4 x float>* %442, align 16
  %444 = load <4 x float>, <4 x float>* %439, align 16
  %445 = fadd <4 x float> %443, %444
  %446 = fmul <4 x float> %445, <float 0x3FF960CE60000000, float 0x3FF960CE60000000, float 0x3FF960CE60000000, float 0x3FF960CE60000000>
  %447 = fadd <4 x float> %441, %446
  store <4 x float> %447, <4 x float>* %440, align 16
  %448 = getelementptr inbounds <4 x float>, <4 x float>* %439, i64 -1
  %449 = load <4 x float>, <4 x float>* %448, align 16
  %450 = getelementptr inbounds <4 x float>, <4 x float>* %439, i64 -3
  %451 = load <4 x float>, <4 x float>* %450, align 16
  %452 = getelementptr inbounds <4 x float>, <4 x float>* %439, i64 1
  %453 = load <4 x float>, <4 x float>* %452, align 16
  %454 = fadd <4 x float> %451, %453
  %455 = fmul <4 x float> %454, <float 0x3FF960CE60000000, float 0x3FF960CE60000000, float 0x3FF960CE60000000, float 0x3FF960CE60000000>
  %456 = fadd <4 x float> %449, %455
  store <4 x float> %456, <4 x float>* %448, align 16
  %457 = getelementptr inbounds <4 x float>, <4 x float>* %439, i64 4
  %458 = add nuw i32 %438, 1
  %459 = icmp ult i32 %458, %402
  br i1 %459, label %437, label %460

460:                                              ; preds = %437, %433
  %461 = phi <4 x float>* [ %435, %433 ], [ %457, %437 ]
  %462 = icmp ult i32 %398, %393
  br i1 %462, label %463, label %476

463:                                              ; preds = %460
  %464 = getelementptr inbounds <4 x float>, <4 x float>* %461, i64 -2
  %465 = load <4 x float>, <4 x float>* %464, align 16
  %466 = getelementptr inbounds <4 x float>, <4 x float>* %461, i64 -4
  %467 = load <4 x float>, <4 x float>* %466, align 16
  %468 = fmul <4 x float> %467, <float 0x400960CE60000000, float 0x400960CE60000000, float 0x400960CE60000000, float 0x400960CE60000000>
  %469 = fadd <4 x float> %465, %468
  store <4 x float> %469, <4 x float>* %464, align 16
  %470 = getelementptr inbounds <4 x float>, <4 x float>* %461, i64 -1
  %471 = load <4 x float>, <4 x float>* %470, align 16
  %472 = getelementptr inbounds <4 x float>, <4 x float>* %461, i64 -3
  %473 = load <4 x float>, <4 x float>* %472, align 16
  %474 = fmul <4 x float> %473, <float 0x400960CE60000000, float 0x400960CE60000000, float 0x400960CE60000000, float 0x400960CE60000000>
  %475 = fadd <4 x float> %471, %474
  store <4 x float> %475, <4 x float>* %470, align 16
  br label %476

476:                                              ; preds = %463, %460, %17, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @opj_dwt97_decode_h_func(i8*, %struct.opj_tls_t* nocapture readnone) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 44
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 4
  %6 = getelementptr inbounds i8, i8* %0, i64 56
  %7 = bitcast i8* %6 to i32*
  %8 = load i32, i32* %7, align 8
  %9 = icmp ult i32 %8, 8
  br i1 %9, label %109, label %10

10:                                               ; preds = %2
  %11 = getelementptr inbounds i8, i8* %0, i64 48
  %12 = bitcast i8* %11 to float**
  %13 = load float*, float** %12, align 8
  %14 = bitcast i8* %0 to %struct.v8dwt_local*
  %15 = getelementptr inbounds i8, i8* %0, i64 40
  %16 = bitcast i8* %15 to i32*
  %17 = bitcast i8* %0 to %union.opj_v8_t**
  %18 = zext i32 %5 to i64
  %19 = shl nuw nsw i64 %18, 1
  %20 = mul nuw nsw i64 %18, 3
  %21 = shl nuw nsw i64 %18, 2
  %22 = mul nuw nsw i64 %18, 5
  %23 = mul nuw nsw i64 %18, 6
  %24 = mul nuw nsw i64 %18, 7
  %25 = shl i32 %5, 3
  %26 = zext i32 %25 to i64
  br label %27

27:                                               ; preds = %106, %10
  %28 = phi i32 [ %5, %10 ], [ %108, %106 ]
  %29 = phi i32 [ 8, %10 ], [ %103, %106 ]
  %30 = phi float* [ %13, %10 ], [ %107, %106 ]
  tail call fastcc void @opj_v8dwt_interleave_h(%struct.v8dwt_local* %14, float* %30, i32 %28, i32 8)
  tail call fastcc void @opj_v8dwt_decode(%struct.v8dwt_local* %14)
  %31 = load i32, i32* %16, align 8
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %102, label %35

33:                                               ; preds = %35
  %34 = icmp eq i32 %65, 0
  br i1 %34, label %102, label %68

35:                                               ; preds = %27, %35
  %36 = phi i64 [ %64, %35 ], [ 0, %27 ]
  %37 = load %union.opj_v8_t*, %union.opj_v8_t** %17, align 8
  %38 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %37, i64 %36, i32 0, i64 0
  %39 = bitcast float* %38 to i32*
  %40 = load i32, i32* %39, align 4
  %41 = getelementptr inbounds float, float* %30, i64 %36
  %42 = bitcast float* %41 to i32*
  store i32 %40, i32* %42, align 4
  %43 = load %union.opj_v8_t*, %union.opj_v8_t** %17, align 8
  %44 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %43, i64 %36, i32 0, i64 1
  %45 = bitcast float* %44 to i32*
  %46 = load i32, i32* %45, align 4
  %47 = add nuw nsw i64 %36, %18
  %48 = getelementptr inbounds float, float* %30, i64 %47
  %49 = bitcast float* %48 to i32*
  store i32 %46, i32* %49, align 4
  %50 = load %union.opj_v8_t*, %union.opj_v8_t** %17, align 8
  %51 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %50, i64 %36, i32 0, i64 2
  %52 = bitcast float* %51 to i32*
  %53 = load i32, i32* %52, align 4
  %54 = add nuw nsw i64 %19, %36
  %55 = getelementptr inbounds float, float* %30, i64 %54
  %56 = bitcast float* %55 to i32*
  store i32 %53, i32* %56, align 4
  %57 = load %union.opj_v8_t*, %union.opj_v8_t** %17, align 8
  %58 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %57, i64 %36, i32 0, i64 3
  %59 = bitcast float* %58 to i32*
  %60 = load i32, i32* %59, align 4
  %61 = add nuw nsw i64 %20, %36
  %62 = getelementptr inbounds float, float* %30, i64 %61
  %63 = bitcast float* %62 to i32*
  store i32 %60, i32* %63, align 4
  %64 = add nuw nsw i64 %36, 1
  %65 = load i32, i32* %16, align 8
  %66 = zext i32 %65 to i64
  %67 = icmp ult i64 %64, %66
  br i1 %67, label %35, label %33

68:                                               ; preds = %33, %68
  %69 = phi i64 [ %98, %68 ], [ 0, %33 ]
  %70 = load %union.opj_v8_t*, %union.opj_v8_t** %17, align 8
  %71 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %70, i64 %69, i32 0, i64 4
  %72 = bitcast float* %71 to i32*
  %73 = load i32, i32* %72, align 4
  %74 = add nuw nsw i64 %21, %69
  %75 = getelementptr inbounds float, float* %30, i64 %74
  %76 = bitcast float* %75 to i32*
  store i32 %73, i32* %76, align 4
  %77 = load %union.opj_v8_t*, %union.opj_v8_t** %17, align 8
  %78 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %77, i64 %69, i32 0, i64 5
  %79 = bitcast float* %78 to i32*
  %80 = load i32, i32* %79, align 4
  %81 = add nuw nsw i64 %22, %69
  %82 = getelementptr inbounds float, float* %30, i64 %81
  %83 = bitcast float* %82 to i32*
  store i32 %80, i32* %83, align 4
  %84 = load %union.opj_v8_t*, %union.opj_v8_t** %17, align 8
  %85 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %84, i64 %69, i32 0, i64 6
  %86 = bitcast float* %85 to i32*
  %87 = load i32, i32* %86, align 4
  %88 = add nuw nsw i64 %23, %69
  %89 = getelementptr inbounds float, float* %30, i64 %88
  %90 = bitcast float* %89 to i32*
  store i32 %87, i32* %90, align 4
  %91 = load %union.opj_v8_t*, %union.opj_v8_t** %17, align 8
  %92 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %91, i64 %69, i32 0, i64 7
  %93 = bitcast float* %92 to i32*
  %94 = load i32, i32* %93, align 4
  %95 = add nuw nsw i64 %24, %69
  %96 = getelementptr inbounds float, float* %30, i64 %95
  %97 = bitcast float* %96 to i32*
  store i32 %94, i32* %97, align 4
  %98 = add nuw nsw i64 %69, 1
  %99 = load i32, i32* %16, align 8
  %100 = zext i32 %99 to i64
  %101 = icmp ult i64 %98, %100
  br i1 %101, label %68, label %102

102:                                              ; preds = %68, %27, %33
  %103 = add i32 %29, 8
  %104 = load i32, i32* %7, align 8
  %105 = icmp ugt i32 %103, %104
  br i1 %105, label %109, label %106

106:                                              ; preds = %102
  %107 = getelementptr inbounds float, float* %30, i64 %26
  %108 = load i32, i32* %4, align 4
  br label %27

109:                                              ; preds = %102, %2
  %110 = bitcast i8* %0 to i8**
  %111 = load i8*, i8** %110, align 8
  tail call void @opj_aligned_free(i8* %111) #10
  tail call void @opj_free(i8* %0) #10
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @opj_dwt97_decode_v_func(i8*, %struct.opj_tls_t* nocapture readnone) #0 {
  %3 = getelementptr inbounds i8, i8* %0, i64 56
  %4 = bitcast i8* %3 to i32*
  %5 = load i32, i32* %4, align 8
  %6 = icmp ult i32 %5, 8
  br i1 %6, label %152, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds i8, i8* %0, i64 48
  %9 = bitcast i8* %8 to float**
  %10 = load float*, float** %9, align 8
  %11 = bitcast i8* %0 to %struct.v8dwt_local*
  %12 = getelementptr inbounds i8, i8* %0, i64 44
  %13 = bitcast i8* %12 to i32*
  %14 = bitcast i8* %0 to %union.opj_v8_t**
  %15 = getelementptr inbounds i8, i8* %0, i64 16
  %16 = bitcast i8* %15 to i32*
  %17 = getelementptr inbounds i8, i8* %0, i64 20
  %18 = bitcast i8* %17 to i32*
  %19 = getelementptr inbounds i8, i8* %0, i64 24
  %20 = bitcast i8* %19 to i32*
  %21 = getelementptr inbounds i8, i8* %0, i64 12
  %22 = bitcast i8* %21 to i32*
  %23 = getelementptr inbounds i8, i8* %0, i64 28
  %24 = bitcast i8* %23 to i32*
  %25 = getelementptr inbounds i8, i8* %0, i64 32
  %26 = bitcast i8* %25 to i32*
  %27 = getelementptr inbounds i8, i8* %0, i64 40
  %28 = bitcast i8* %27 to i32*
  br label %29

29:                                               ; preds = %7, %147
  %30 = phi i32 [ 8, %7 ], [ %149, %147 ]
  %31 = phi float* [ %10, %7 ], [ %148, %147 ]
  %32 = load i32, i32* %13, align 4
  %33 = load %union.opj_v8_t*, %union.opj_v8_t** %14, align 8, !alias.scope !150, !noalias !153
  %34 = load i32, i32* %16, align 8, !alias.scope !150, !noalias !153
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %33, i64 %35
  %37 = load i32, i32* %18, align 4, !alias.scope !150, !noalias !153
  %38 = load i32, i32* %20, align 8, !alias.scope !150, !noalias !153
  %39 = icmp ult i32 %37, %38
  %40 = zext i32 %32 to i64
  br i1 %39, label %41, label %80

41:                                               ; preds = %29
  %42 = zext i32 %37 to i64
  %43 = zext i32 %38 to i64
  %44 = sub nsw i64 %43, %42
  %45 = xor i64 %42, -1
  %46 = and i64 %44, 1
  %47 = icmp eq i64 %46, 0
  br i1 %47, label %57, label %48

48:                                               ; preds = %41
  %49 = shl nuw nsw i64 %42, 1
  %50 = and i64 %49, 4294967294
  %51 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %36, i64 %50
  %52 = bitcast %union.opj_v8_t* %51 to i8*
  %53 = mul nuw i64 %42, %40
  %54 = getelementptr inbounds float, float* %31, i64 %53
  %55 = bitcast float* %54 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %52, i8* align 4 %55, i64 32, i1 false) #10, !noalias !150
  %56 = add nuw nsw i64 %42, 1
  br label %57

57:                                               ; preds = %48, %41
  %58 = phi i64 [ %56, %48 ], [ %42, %41 ]
  %59 = sub nsw i64 0, %43
  %60 = icmp eq i64 %45, %59
  br i1 %60, label %80, label %61

61:                                               ; preds = %57, %61
  %62 = phi i64 [ %78, %61 ], [ %58, %57 ]
  %63 = shl nuw i64 %62, 1
  %64 = and i64 %63, 4294967294
  %65 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %36, i64 %64
  %66 = bitcast %union.opj_v8_t* %65 to i8*
  %67 = mul nuw i64 %62, %40
  %68 = getelementptr inbounds float, float* %31, i64 %67
  %69 = bitcast float* %68 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %66, i8* align 4 %69, i64 32, i1 false) #10, !noalias !150
  %70 = add nuw nsw i64 %62, 1
  %71 = shl nuw i64 %70, 1
  %72 = and i64 %71, 4294967294
  %73 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %36, i64 %72
  %74 = bitcast %union.opj_v8_t* %73 to i8*
  %75 = mul nuw i64 %70, %40
  %76 = getelementptr inbounds float, float* %31, i64 %75
  %77 = bitcast float* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %74, i8* align 4 %77, i64 32, i1 false) #10, !noalias !150
  %78 = add nuw nsw i64 %62, 2
  %79 = icmp eq i64 %78, %43
  br i1 %79, label %80, label %61

80:                                               ; preds = %57, %61, %29
  %81 = load i32, i32* %22, align 4, !alias.scope !150, !noalias !153
  %82 = zext i32 %81 to i64
  %83 = mul nuw i64 %82, %40
  %84 = getelementptr inbounds float, float* %31, i64 %83
  %85 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %33, i64 1
  %86 = sub nsw i64 0, %35
  %87 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %85, i64 %86
  %88 = load i32, i32* %24, align 4, !alias.scope !150, !noalias !153
  %89 = load i32, i32* %26, align 8, !alias.scope !150, !noalias !153
  %90 = icmp ult i32 %88, %89
  br i1 %90, label %91, label %130

91:                                               ; preds = %80
  %92 = zext i32 %88 to i64
  %93 = zext i32 %89 to i64
  %94 = sub nsw i64 %93, %92
  %95 = xor i64 %92, -1
  %96 = and i64 %94, 1
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %107, label %98

98:                                               ; preds = %91
  %99 = shl nuw nsw i64 %92, 1
  %100 = and i64 %99, 4294967294
  %101 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %87, i64 %100
  %102 = bitcast %union.opj_v8_t* %101 to i8*
  %103 = mul nuw i64 %92, %40
  %104 = getelementptr inbounds float, float* %84, i64 %103
  %105 = bitcast float* %104 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %102, i8* align 4 %105, i64 32, i1 false) #10, !noalias !150
  %106 = add nuw nsw i64 %92, 1
  br label %107

107:                                              ; preds = %98, %91
  %108 = phi i64 [ %106, %98 ], [ %92, %91 ]
  %109 = sub nsw i64 0, %93
  %110 = icmp eq i64 %95, %109
  br i1 %110, label %130, label %111

111:                                              ; preds = %107, %111
  %112 = phi i64 [ %128, %111 ], [ %108, %107 ]
  %113 = shl nuw i64 %112, 1
  %114 = and i64 %113, 4294967294
  %115 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %87, i64 %114
  %116 = bitcast %union.opj_v8_t* %115 to i8*
  %117 = mul nuw i64 %112, %40
  %118 = getelementptr inbounds float, float* %84, i64 %117
  %119 = bitcast float* %118 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %116, i8* align 4 %119, i64 32, i1 false) #10, !noalias !150
  %120 = add nuw nsw i64 %112, 1
  %121 = shl nuw i64 %120, 1
  %122 = and i64 %121, 4294967294
  %123 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %87, i64 %122
  %124 = bitcast %union.opj_v8_t* %123 to i8*
  %125 = mul nuw i64 %120, %40
  %126 = getelementptr inbounds float, float* %84, i64 %125
  %127 = bitcast float* %126 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %124, i8* align 4 %127, i64 32, i1 false) #10, !noalias !150
  %128 = add nuw nsw i64 %112, 2
  %129 = icmp eq i64 %128, %93
  br i1 %129, label %130, label %111

130:                                              ; preds = %107, %111, %80
  tail call fastcc void @opj_v8dwt_decode(%struct.v8dwt_local* %11)
  %131 = load i32, i32* %28, align 8
  %132 = icmp eq i32 %131, 0
  br i1 %132, label %147, label %133

133:                                              ; preds = %130, %133
  %134 = phi i64 [ %143, %133 ], [ 0, %130 ]
  %135 = load i32, i32* %13, align 4
  %136 = zext i32 %135 to i64
  %137 = mul nuw i64 %134, %136
  %138 = getelementptr inbounds float, float* %31, i64 %137
  %139 = bitcast float* %138 to i8*
  %140 = load %union.opj_v8_t*, %union.opj_v8_t** %14, align 8
  %141 = getelementptr inbounds %union.opj_v8_t, %union.opj_v8_t* %140, i64 %134
  %142 = bitcast %union.opj_v8_t* %141 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %139, i8* align 4 %142, i64 32, i1 false)
  %143 = add nuw nsw i64 %134, 1
  %144 = load i32, i32* %28, align 8
  %145 = zext i32 %144 to i64
  %146 = icmp ult i64 %143, %145
  br i1 %146, label %133, label %147

147:                                              ; preds = %133, %130
  %148 = getelementptr inbounds float, float* %31, i64 8
  %149 = add i32 %30, 8
  %150 = load i32, i32* %4, align 8
  %151 = icmp ugt i32 %149, %150
  br i1 %151, label %152, label %29

152:                                              ; preds = %147, %2
  %153 = bitcast i8* %0 to i8**
  %154 = load i8*, i8** %153, align 8
  tail call void @opj_aligned_free(i8* %154) #10
  tail call void @opj_free(i8* %0) #10
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.usub.sat.i32(i32, i32) #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { norecurse nounwind readnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { argmemonly nounwind }
attributes #6 = { nounwind readnone speculatable }
attributes #7 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4, !"opj_dwt_max_resolution: argument 0"}
!4 = distinct !{!4, !"opj_dwt_max_resolution"}
!5 = !{void (i8*, i8*, i32, i32, i32, i32)* @opj_dwt_encode_and_deinterleave_v, void (i8*, i8*, i32, i32, i32, i32)* @opj_dwt_encode_and_deinterleave_v_real}
!6 = !{void (i8*, i8*, i32, i32)* @opj_dwt_encode_and_deinterleave_h_one_row, void (i8*, i8*, i32, i32)* @opj_dwt_encode_and_deinterleave_h_one_row_real}
!7 = distinct !{!7, !8}
!8 = !{!"llvm.loop.unroll.disable"}
!9 = !{!10}
!10 = distinct !{!10, !11}
!11 = distinct !{!11, !"LVerDomain"}
!12 = !{!13}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !15}
!15 = !{!"llvm.loop.isvectorized", i32 1}
!16 = distinct !{!16, !8}
!17 = distinct !{!17, !15}
!18 = distinct !{!18, !8}
!19 = distinct !{!19, !15}
!20 = distinct !{!20, !15}
!21 = !{!22, !24}
!22 = distinct !{!22, !23, !"opj_dwt_deinterleave_v_cols: argument 0"}
!23 = distinct !{!23, !"opj_dwt_deinterleave_v_cols"}
!24 = distinct !{!24, !23, !"opj_dwt_deinterleave_v_cols: argument 1"}
!25 = distinct !{!25, !8}
!26 = distinct !{!26, !8}
!27 = !{!28}
!28 = distinct !{!28, !29}
!29 = distinct !{!29, !"LVerDomain"}
!30 = !{!31}
!31 = distinct !{!31, !29}
!32 = distinct !{!32, !15}
!33 = distinct !{!33, !15}
!34 = !{!35}
!35 = distinct !{!35, !36, !"opj_dwt_max_resolution: argument 0"}
!36 = distinct !{!36, !"opj_dwt_max_resolution"}
!37 = !{!38}
!38 = distinct !{!38, !39, !"opj_dwt_max_resolution: argument 0"}
!39 = distinct !{!39, !"opj_dwt_max_resolution"}
!40 = distinct !{!40, !8}
!41 = !{!42}
!42 = distinct !{!42, !43}
!43 = distinct !{!43, !"LVerDomain"}
!44 = !{!45}
!45 = distinct !{!45, !43}
!46 = distinct !{!46, !15}
!47 = distinct !{!47, !8}
!48 = distinct !{!48, !15}
!49 = distinct !{!49, !8}
!50 = distinct !{!50, !15}
!51 = distinct !{!51, !15}
!52 = !{!53, !55}
!53 = distinct !{!53, !54, !"opj_dwt_deinterleave_v_cols: argument 0"}
!54 = distinct !{!54, !"opj_dwt_deinterleave_v_cols"}
!55 = distinct !{!55, !54, !"opj_dwt_deinterleave_v_cols: argument 1"}
!56 = distinct !{!56, !8}
!57 = distinct !{!57, !8}
!58 = distinct !{!58, !15}
!59 = distinct !{!59, !60, !15}
!60 = !{!"llvm.loop.unroll.runtime.disable"}
!61 = distinct !{!61, !15}
!62 = distinct !{!62, !60, !15}
!63 = !{!64}
!64 = distinct !{!64, !65, !"opj_dwt_deinterleave_h: argument 0"}
!65 = distinct !{!65, !"opj_dwt_deinterleave_h"}
!66 = !{!67}
!67 = distinct !{!67, !65, !"opj_dwt_deinterleave_h: argument 1"}
!68 = distinct !{!68, !15}
!69 = distinct !{!69, !60, !15}
!70 = distinct !{!70, !15}
!71 = distinct !{!71, !60, !15}
!72 = !{!73}
!73 = distinct !{!73, !74, !"opj_dwt_decode_tile_97: argument 0"}
!74 = distinct !{!74, !"opj_dwt_decode_tile_97"}
!75 = !{!76}
!76 = distinct !{!76, !77, !"opj_dwt_max_resolution: argument 0"}
!77 = distinct !{!77, !"opj_dwt_max_resolution"}
!78 = !{!79}
!79 = distinct !{!79, !80, !"opj_v8dwt_interleave_v: argument 0"}
!80 = distinct !{!80, !"opj_v8dwt_interleave_v"}
!81 = !{!82, !73}
!82 = distinct !{!82, !80, !"opj_v8dwt_interleave_v: argument 1"}
!83 = !{!79, !73}
!84 = !{!85}
!85 = distinct !{!85, !86, !"opj_v8dwt_interleave_v: argument 0"}
!86 = distinct !{!86, !"opj_v8dwt_interleave_v"}
!87 = !{!88, !73}
!88 = distinct !{!88, !86, !"opj_v8dwt_interleave_v: argument 1"}
!89 = !{!85, !73}
!90 = !{!91}
!91 = distinct !{!91, !92, !"opj_dwt_decode_partial_97: argument 0"}
!92 = distinct !{!92, !"opj_dwt_decode_partial_97"}
!93 = !{!94}
!94 = distinct !{!94, !95, !"opj_dwt_max_resolution: argument 0"}
!95 = distinct !{!95, !"opj_dwt_max_resolution"}
!96 = !{!97, !91}
!97 = distinct !{!97, !98, !"opj_v8dwt_interleave_partial_v: argument 0"}
!98 = distinct !{!98, !"opj_v8dwt_interleave_partial_v"}
!99 = !{}
!100 = distinct !{!100, !15}
!101 = distinct !{!101, !60, !15}
!102 = !{!103}
!103 = distinct !{!103, !104}
!104 = distinct !{!104, !"LVerDomain"}
!105 = !{!106}
!106 = distinct !{!106, !104}
!107 = distinct !{!107, !15}
!108 = distinct !{!108, !15}
!109 = !{!110}
!110 = distinct !{!110, !111}
!111 = distinct !{!111, !"LVerDomain"}
!112 = !{!113}
!113 = distinct !{!113, !111}
!114 = distinct !{!114, !15}
!115 = distinct !{!115, !15}
!116 = !{!117}
!117 = distinct !{!117, !118}
!118 = distinct !{!118, !"LVerDomain"}
!119 = !{!120}
!120 = distinct !{!120, !118}
!121 = distinct !{!121, !15}
!122 = distinct !{!122, !15}
!123 = !{!124}
!124 = distinct !{!124, !125}
!125 = distinct !{!125, !"LVerDomain"}
!126 = !{!127}
!127 = distinct !{!127, !125}
!128 = distinct !{!128, !15}
!129 = distinct !{!129, !8}
!130 = distinct !{!130, !8}
!131 = distinct !{!131, !15}
!132 = distinct !{!132, !15}
!133 = distinct !{!133, !60, !15}
!134 = !{!135}
!135 = distinct !{!135, !136}
!136 = distinct !{!136, !"LVerDomain"}
!137 = !{!138}
!138 = distinct !{!138, !136}
!139 = distinct !{!139, !15}
!140 = distinct !{!140, !15}
!141 = !{!142}
!142 = distinct !{!142, !143}
!143 = distinct !{!143, !"LVerDomain"}
!144 = !{!145}
!145 = distinct !{!145, !143}
!146 = distinct !{!146, !15}
!147 = distinct !{!147, !8}
!148 = distinct !{!148, !8}
!149 = distinct !{!149, !15}
!150 = !{!151}
!151 = distinct !{!151, !152, !"opj_v8dwt_interleave_v: argument 0"}
!152 = distinct !{!152, !"opj_v8dwt_interleave_v"}
!153 = !{!154}
!154 = distinct !{!154, !152, !"opj_v8dwt_interleave_v: argument 1"}
