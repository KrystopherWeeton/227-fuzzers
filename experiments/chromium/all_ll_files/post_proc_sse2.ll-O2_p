; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/x86/post_proc_sse2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/x86/post_proc_sse2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@vpx_rv = external local_unnamed_addr constant [0 x i16], align 2

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_mbpost_proc_down_sse2(i8* nocapture, i32, i32, i32, i32) local_unnamed_addr #0 {
  %6 = alloca [64 x i16], align 16
  %7 = insertelement <4 x i32> undef, i32 %4, i32 0
  %8 = sub <4 x i32> <i32 0, i32 undef, i32 undef, i32 undef>, %7
  %9 = shufflevector <4 x i32> %8, <4 x i32> undef, <4 x i32> zeroinitializer
  %10 = bitcast [64 x i16]* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %10) #3
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %10, i8 -86, i64 128, i1 false)
  %11 = icmp sgt i32 %3, 0
  br i1 %11, label %12, label %233

12:                                               ; preds = %5
  %13 = bitcast [64 x i16]* %6 to <2 x i64>*
  %14 = add i32 %2, 8
  %15 = icmp sgt i32 %14, 0
  %16 = sext i32 %1 to i64
  %17 = sext i32 %2 to i64
  %18 = bitcast [64 x i16]* %6 to <16 x i8>*
  %19 = getelementptr inbounds [64 x i16], [64 x i16]* %6, i64 0, i64 8
  %20 = bitcast i16* %19 to <16 x i8>*
  %21 = getelementptr inbounds [64 x i16], [64 x i16]* %6, i64 0, i64 16
  %22 = bitcast i16* %21 to <16 x i8>*
  %23 = getelementptr inbounds [64 x i16], [64 x i16]* %6, i64 0, i64 24
  %24 = bitcast i16* %23 to <16 x i8>*
  %25 = getelementptr inbounds [64 x i16], [64 x i16]* %6, i64 0, i64 32
  %26 = bitcast i16* %25 to <16 x i8>*
  %27 = getelementptr inbounds [64 x i16], [64 x i16]* %6, i64 0, i64 40
  %28 = bitcast i16* %27 to <16 x i8>*
  %29 = getelementptr inbounds [64 x i16], [64 x i16]* %6, i64 0, i64 48
  %30 = bitcast i16* %29 to <16 x i8>*
  %31 = getelementptr inbounds [64 x i16], [64 x i16]* %6, i64 0, i64 56
  %32 = bitcast i16* %31 to <16 x i8>*
  %33 = shl nsw i64 %16, 1
  %34 = mul nsw i64 %16, 3
  %35 = shl nsw i64 %16, 2
  %36 = mul nsw i64 %16, 5
  %37 = mul nsw i64 %16, 6
  %38 = zext i32 %14 to i64
  br label %39

39:                                               ; preds = %12, %229
  %40 = phi i8* [ %0, %12 ], [ %230, %229 ]
  %41 = phi i32 [ 0, %12 ], [ %231, %229 ]
  %42 = bitcast i8* %40 to i64*
  %43 = load i64, i64* %42, align 1
  %44 = insertelement <2 x i64> undef, i64 %43, i32 0
  %45 = bitcast <2 x i64> %44 to <16 x i8>
  %46 = shufflevector <16 x i8> %45, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  store <16 x i8> %46, <16 x i8>* %18, align 16
  store <16 x i8> %46, <16 x i8>* %20, align 16
  store <16 x i8> %46, <16 x i8>* %22, align 16
  store <16 x i8> %46, <16 x i8>* %24, align 16
  store <16 x i8> %46, <16 x i8>* %26, align 16
  store <16 x i8> %46, <16 x i8>* %28, align 16
  store <16 x i8> %46, <16 x i8>* %30, align 16
  store <16 x i8> %46, <16 x i8>* %32, align 16
  %47 = bitcast <16 x i8> %46 to <8 x i16>
  %48 = mul <8 x i16> %47, <i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9, i16 9>
  %49 = mul <8 x i16> %48, %47
  %50 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %48, <8 x i16> %47) #3
  %51 = getelementptr inbounds i8, i8* %40, i64 %16
  %52 = bitcast i8* %51 to i64*
  %53 = load i64, i64* %52, align 1
  %54 = insertelement <2 x i64> undef, i64 %53, i32 0
  %55 = bitcast <2 x i64> %54 to <16 x i8>
  %56 = shufflevector <16 x i8> %55, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %57 = bitcast <16 x i8> %56 to <8 x i16>
  %58 = mul <8 x i16> %57, %57
  %59 = getelementptr inbounds i8, i8* %40, i64 %33
  %60 = bitcast i8* %59 to i64*
  %61 = load i64, i64* %60, align 1
  %62 = insertelement <2 x i64> undef, i64 %61, i32 0
  %63 = bitcast <2 x i64> %62 to <16 x i8>
  %64 = shufflevector <16 x i8> %63, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %65 = bitcast <16 x i8> %64 to <8 x i16>
  %66 = mul <8 x i16> %65, %65
  %67 = getelementptr inbounds i8, i8* %40, i64 %34
  %68 = bitcast i8* %67 to i64*
  %69 = load i64, i64* %68, align 1
  %70 = insertelement <2 x i64> undef, i64 %69, i32 0
  %71 = bitcast <2 x i64> %70 to <16 x i8>
  %72 = shufflevector <16 x i8> %71, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %73 = bitcast <16 x i8> %72 to <8 x i16>
  %74 = mul <8 x i16> %73, %73
  %75 = getelementptr inbounds i8, i8* %40, i64 %35
  %76 = bitcast i8* %75 to i64*
  %77 = load i64, i64* %76, align 1
  %78 = insertelement <2 x i64> undef, i64 %77, i32 0
  %79 = bitcast <2 x i64> %78 to <16 x i8>
  %80 = shufflevector <16 x i8> %79, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %81 = bitcast <16 x i8> %80 to <8 x i16>
  %82 = mul <8 x i16> %81, %81
  %83 = getelementptr inbounds i8, i8* %40, i64 %36
  %84 = bitcast i8* %83 to i64*
  %85 = load i64, i64* %84, align 1
  %86 = insertelement <2 x i64> undef, i64 %85, i32 0
  %87 = bitcast <2 x i64> %86 to <16 x i8>
  %88 = shufflevector <16 x i8> %87, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %89 = bitcast <16 x i8> %88 to <8 x i16>
  %90 = mul <8 x i16> %89, %89
  %91 = getelementptr inbounds i8, i8* %40, i64 %37
  %92 = bitcast i8* %91 to i64*
  %93 = load i64, i64* %92, align 1
  %94 = insertelement <2 x i64> undef, i64 %93, i32 0
  %95 = bitcast <2 x i64> %94 to <16 x i8>
  %96 = shufflevector <16 x i8> %95, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %97 = bitcast <16 x i8> %96 to <8 x i16>
  %98 = mul <8 x i16> %97, %97
  br i1 %15, label %99, label %229

99:                                               ; preds = %39
  %100 = shufflevector <8 x i16> %98, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %101 = bitcast <8 x i16> %100 to <4 x i32>
  %102 = shufflevector <8 x i16> %58, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %103 = bitcast <8 x i16> %102 to <4 x i32>
  %104 = shufflevector <8 x i16> %49, <8 x i16> %50, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %105 = bitcast <8 x i16> %104 to <4 x i32>
  %106 = add <4 x i32> %103, %105
  %107 = shufflevector <8 x i16> %66, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %108 = bitcast <8 x i16> %107 to <4 x i32>
  %109 = add <4 x i32> %106, %108
  %110 = shufflevector <8 x i16> %74, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %111 = bitcast <8 x i16> %110 to <4 x i32>
  %112 = add <4 x i32> %109, %111
  %113 = shufflevector <8 x i16> %82, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %114 = bitcast <8 x i16> %113 to <4 x i32>
  %115 = add <4 x i32> %112, %114
  %116 = shufflevector <8 x i16> %90, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %117 = bitcast <8 x i16> %116 to <4 x i32>
  %118 = add <4 x i32> %115, %117
  %119 = add <4 x i32> %118, %101
  %120 = shufflevector <8 x i16> %98, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %121 = bitcast <8 x i16> %120 to <4 x i32>
  %122 = shufflevector <8 x i16> %58, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %123 = bitcast <8 x i16> %122 to <4 x i32>
  %124 = shufflevector <8 x i16> %49, <8 x i16> %50, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %125 = bitcast <8 x i16> %124 to <4 x i32>
  %126 = add <4 x i32> %123, %125
  %127 = shufflevector <8 x i16> %66, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %128 = bitcast <8 x i16> %127 to <4 x i32>
  %129 = add <4 x i32> %126, %128
  %130 = shufflevector <8 x i16> %74, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %131 = bitcast <8 x i16> %130 to <4 x i32>
  %132 = add <4 x i32> %129, %131
  %133 = shufflevector <8 x i16> %82, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %134 = bitcast <8 x i16> %133 to <4 x i32>
  %135 = add <4 x i32> %132, %134
  %136 = shufflevector <8 x i16> %90, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %137 = bitcast <8 x i16> %136 to <4 x i32>
  %138 = add <4 x i32> %135, %137
  %139 = add <4 x i32> %138, %121
  %140 = add <8 x i16> %48, %57
  %141 = add <8 x i16> %140, %65
  %142 = add <8 x i16> %141, %73
  %143 = add <8 x i16> %142, %81
  %144 = add <8 x i16> %143, %89
  %145 = add <8 x i16> %144, %97
  br label %146

146:                                              ; preds = %175, %99
  %147 = phi i64 [ 0, %99 ], [ %227, %175 ]
  %148 = phi <2 x i64> [ <i64 -6148914691236517206, i64 -6148914691236517206>, %99 ], [ %176, %175 ]
  %149 = phi <4 x i32> [ %119, %99 ], [ %193, %175 ]
  %150 = phi <4 x i32> [ %139, %99 ], [ %190, %175 ]
  %151 = phi <8 x i16> [ %145, %99 ], [ %179, %175 ]
  %152 = and i64 %147, 7
  %153 = getelementptr inbounds <2 x i64>, <2 x i64>* %13, i64 %152
  %154 = bitcast <2 x i64>* %153 to <8 x i16>*
  %155 = load <8 x i16>, <8 x i16>* %154, align 16
  %156 = mul nsw i64 %147, %16
  %157 = getelementptr inbounds i8, i8* %40, i64 %156
  %158 = bitcast i8* %157 to i64*
  %159 = load i64, i64* %158, align 1
  %160 = insertelement <2 x i64> undef, i64 %159, i32 0
  %161 = bitcast <2 x i64> %160 to <16 x i8>
  %162 = shufflevector <16 x i8> %161, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %163 = bitcast <16 x i8> %162 to <2 x i64>
  %164 = add nuw nsw i64 %147, 7
  %165 = icmp slt i64 %164, %17
  br i1 %165, label %166, label %175

166:                                              ; preds = %146
  %167 = mul nsw i64 %164, %16
  %168 = getelementptr inbounds i8, i8* %40, i64 %167
  %169 = bitcast i8* %168 to i64*
  %170 = load i64, i64* %169, align 1
  %171 = insertelement <2 x i64> undef, i64 %170, i32 0
  %172 = bitcast <2 x i64> %171 to <16 x i8>
  %173 = shufflevector <16 x i8> %172, <16 x i8> <i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 0, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef, i8 undef>, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23>
  %174 = bitcast <16 x i8> %173 to <2 x i64>
  br label %175

175:                                              ; preds = %166, %146
  %176 = phi <2 x i64> [ %174, %166 ], [ %148, %146 ]
  %177 = sub <8 x i16> %151, %155
  %178 = bitcast <2 x i64> %176 to <8 x i16>
  %179 = add <8 x i16> %177, %178
  %180 = mul <8 x i16> %155, %155
  %181 = shufflevector <8 x i16> %180, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %182 = bitcast <8 x i16> %181 to <4 x i32>
  %183 = sub <4 x i32> %150, %182
  %184 = shufflevector <8 x i16> %180, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %185 = bitcast <8 x i16> %184 to <4 x i32>
  %186 = sub <4 x i32> %149, %185
  %187 = mul <8 x i16> %178, %178
  %188 = shufflevector <8 x i16> %187, <8 x i16> <i16 0, i16 0, i16 0, i16 0, i16 undef, i16 undef, i16 undef, i16 undef>, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %189 = bitcast <8 x i16> %188 to <4 x i32>
  %190 = add <4 x i32> %183, %189
  %191 = shufflevector <8 x i16> %187, <8 x i16> <i16 undef, i16 undef, i16 undef, i16 undef, i16 0, i16 0, i16 0, i16 0>, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %192 = bitcast <8 x i16> %191 to <4 x i32>
  %193 = add <4 x i32> %186, %192
  %194 = mul <4 x i32> %190, <i32 15, i32 15, i32 15, i32 15>
  %195 = mul <4 x i32> %193, <i32 15, i32 15, i32 15, i32 15>
  %196 = mul <8 x i16> %179, %179
  %197 = tail call <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16> %179, <8 x i16> %179) #3
  %198 = shufflevector <8 x i16> %196, <8 x i16> %197, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %199 = bitcast <8 x i16> %198 to <4 x i32>
  %200 = shufflevector <8 x i16> %196, <8 x i16> %197, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %201 = bitcast <8 x i16> %200 to <4 x i32>
  %202 = sub <4 x i32> %9, %199
  %203 = add <4 x i32> %202, %194
  %204 = sub <4 x i32> %9, %201
  %205 = add <4 x i32> %204, %195
  %206 = ashr <4 x i32> %203, <i32 31, i32 31, i32 31, i32 31>
  %207 = ashr <4 x i32> %205, <i32 31, i32 31, i32 31, i32 31>
  %208 = tail call <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32> %206, <4 x i32> %207) #3
  %209 = bitcast <8 x i16> %208 to <2 x i64>
  %210 = and i64 %147, 127
  %211 = getelementptr inbounds [0 x i16], [0 x i16]* @vpx_rv, i64 0, i64 %210
  %212 = bitcast i16* %211 to <8 x i16>*
  %213 = load <8 x i16>, <8 x i16>* %212, align 2
  %214 = bitcast <16 x i8> %162 to <8 x i16>
  %215 = add <8 x i16> %179, %214
  %216 = add <8 x i16> %215, %213
  %217 = ashr <8 x i16> %216, <i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4, i16 4>
  %218 = and <8 x i16> %217, %208
  %219 = xor <2 x i64> %209, <i64 -1, i64 -1>
  %220 = and <2 x i64> %219, %163
  %221 = bitcast <2 x i64> %220 to <8 x i16>
  %222 = or <8 x i16> %218, %221
  %223 = tail call <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16> %222, <8 x i16> undef) #3
  %224 = bitcast <16 x i8> %223 to <2 x i64>
  %225 = extractelement <2 x i64> %224, i32 0
  store i64 %225, i64* %158, align 1
  %226 = bitcast <2 x i64>* %153 to <16 x i8>*
  store <16 x i8> %162, <16 x i8>* %226, align 16
  %227 = add nuw nsw i64 %147, 1
  %228 = icmp eq i64 %227, %38
  br i1 %228, label %229, label %146

229:                                              ; preds = %175, %39
  %230 = getelementptr inbounds i8, i8* %40, i64 8
  %231 = add nuw nsw i32 %41, 8
  %232 = icmp slt i32 %231, %3
  br i1 %232, label %39, label %233

233:                                              ; preds = %229, %5
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %10) #3
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pmulh.w(<8 x i16>, <8 x i16>) #2

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.packssdw.128(<4 x i32>, <4 x i32>) #2

; Function Attrs: nounwind readnone
declare <16 x i8> @llvm.x86.sse2.packuswb.128(<8 x i16>, <8 x i16>) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind readnone }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
