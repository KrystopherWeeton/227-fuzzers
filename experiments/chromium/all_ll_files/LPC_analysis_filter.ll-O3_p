; ModuleID = '../../third_party/opus/src/silk/LPC_analysis_filter.c'
source_filename = "../../third_party/opus/src/silk/LPC_analysis_filter.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

@.str = private unnamed_addr constant [25 x i8] c"assertion failed: d >= 6\00", align 1
@.str.1 = private unnamed_addr constant [54 x i8] c"../../third_party/opus/src/silk/LPC_analysis_filter.c\00", align 1
@.str.2 = private unnamed_addr constant [31 x i8] c"assertion failed: (d & 1) == 0\00", align 1
@.str.3 = private unnamed_addr constant [27 x i8] c"assertion failed: d <= len\00", align 1

; Function Attrs: nounwind ssp uwtable
define hidden void @silk_LPC_analysis_filter(i16* nocapture, i16* nocapture readonly, i16* nocapture readonly, i32, i32, i32) local_unnamed_addr #0 {
  %7 = icmp sgt i32 %4, 5
  br i1 %7, label %9, label %8

8:                                                ; preds = %6
  tail call void @celt_fatal(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0), i32 67) #3
  unreachable

9:                                                ; preds = %6
  %10 = and i32 %4, 1
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %13, label %12

12:                                               ; preds = %9
  tail call void @celt_fatal(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0), i32 68) #3
  unreachable

13:                                               ; preds = %9
  %14 = icmp sgt i32 %4, %3
  br i1 %14, label %274, label %15

15:                                               ; preds = %13
  %16 = icmp slt i32 %4, %3
  br i1 %16, label %19, label %17

17:                                               ; preds = %15
  %18 = sext i32 %4 to i64
  br label %335

19:                                               ; preds = %15
  %20 = getelementptr inbounds i16, i16* %2, i64 1
  %21 = getelementptr inbounds i16, i16* %2, i64 2
  %22 = getelementptr inbounds i16, i16* %2, i64 3
  %23 = getelementptr inbounds i16, i16* %2, i64 4
  %24 = getelementptr inbounds i16, i16* %2, i64 5
  %25 = icmp sgt i32 %4, 6
  %26 = sext i32 %4 to i64
  %27 = sext i32 %3 to i64
  br i1 %25, label %28, label %36

28:                                               ; preds = %19
  %29 = add nsw i64 %26, -7
  %30 = lshr i64 %29, 1
  %31 = add nuw i64 %30, 1
  %32 = and i64 %31, 1
  %33 = icmp eq i64 %30, 0
  %34 = sub nuw i64 %31, %32
  %35 = icmp eq i64 %32, 0
  br label %142

36:                                               ; preds = %19
  %37 = add nsw i64 %27, -6
  %38 = icmp ult i64 %37, 8
  br i1 %38, label %39, label %41

39:                                               ; preds = %140, %41, %36
  %40 = phi i64 [ 6, %41 ], [ 6, %36 ], [ %58, %140 ]
  br label %275

41:                                               ; preds = %36
  %42 = getelementptr i16, i16* %0, i64 6
  %43 = bitcast i16* %42 to i8*
  %44 = getelementptr i16, i16* %0, i64 %27
  %45 = getelementptr i16, i16* %1, i64 %27
  %46 = getelementptr i16, i16* %2, i64 5
  %47 = bitcast i16* %46 to i8*
  %48 = getelementptr i8, i8* %47, i64 1
  %49 = icmp ult i16* %42, %45
  %50 = icmp ugt i16* %44, %1
  %51 = and i1 %49, %50
  %52 = icmp ugt i8* %48, %43
  %53 = icmp ult i16* %24, %44
  %54 = and i1 %52, %53
  %55 = or i1 %51, %54
  br i1 %55, label %39, label %56

56:                                               ; preds = %41
  %57 = and i64 %37, -8
  %58 = or i64 %57, 6
  %59 = load i16, i16* %2, align 2, !alias.scope !2
  %60 = insertelement <8 x i16> undef, i16 %59, i32 0
  %61 = shufflevector <8 x i16> %60, <8 x i16> undef, <8 x i32> zeroinitializer
  %62 = sext <8 x i16> %61 to <8 x i32>
  %63 = load i16, i16* %20, align 2, !alias.scope !2
  %64 = insertelement <8 x i16> undef, i16 %63, i32 0
  %65 = shufflevector <8 x i16> %64, <8 x i16> undef, <8 x i32> zeroinitializer
  %66 = sext <8 x i16> %65 to <8 x i32>
  %67 = load i16, i16* %21, align 2, !alias.scope !2
  %68 = insertelement <8 x i16> undef, i16 %67, i32 0
  %69 = shufflevector <8 x i16> %68, <8 x i16> undef, <8 x i32> zeroinitializer
  %70 = sext <8 x i16> %69 to <8 x i32>
  %71 = load i16, i16* %22, align 2, !alias.scope !2
  %72 = insertelement <8 x i16> undef, i16 %71, i32 0
  %73 = shufflevector <8 x i16> %72, <8 x i16> undef, <8 x i32> zeroinitializer
  %74 = sext <8 x i16> %73 to <8 x i32>
  %75 = load i16, i16* %23, align 2, !alias.scope !2
  %76 = insertelement <8 x i16> undef, i16 %75, i32 0
  %77 = shufflevector <8 x i16> %76, <8 x i16> undef, <8 x i32> zeroinitializer
  %78 = sext <8 x i16> %77 to <8 x i32>
  %79 = load i16, i16* %24, align 2, !alias.scope !2
  %80 = insertelement <8 x i16> undef, i16 %79, i32 0
  %81 = shufflevector <8 x i16> %80, <8 x i16> undef, <8 x i32> zeroinitializer
  %82 = sext <8 x i16> %81 to <8 x i32>
  br label %83

83:                                               ; preds = %83, %56
  %84 = phi i64 [ 0, %56 ], [ %138, %83 ]
  %85 = or i64 %84, 6
  %86 = add nsw i64 %85, -1
  %87 = getelementptr inbounds i16, i16* %1, i64 %86
  %88 = bitcast i16* %87 to <8 x i16>*
  %89 = load <8 x i16>, <8 x i16>* %88, align 2, !alias.scope !5
  %90 = sext <8 x i16> %89 to <8 x i32>
  %91 = mul nsw <8 x i32> %62, %90
  %92 = getelementptr inbounds i16, i16* %87, i64 -1
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !5
  %95 = sext <8 x i16> %94 to <8 x i32>
  %96 = mul nsw <8 x i32> %66, %95
  %97 = add <8 x i32> %96, %91
  %98 = getelementptr inbounds i16, i16* %87, i64 -2
  %99 = bitcast i16* %98 to <8 x i16>*
  %100 = load <8 x i16>, <8 x i16>* %99, align 2, !alias.scope !5
  %101 = sext <8 x i16> %100 to <8 x i32>
  %102 = mul nsw <8 x i32> %70, %101
  %103 = add <8 x i32> %97, %102
  %104 = getelementptr inbounds i16, i16* %87, i64 -3
  %105 = bitcast i16* %104 to <8 x i16>*
  %106 = load <8 x i16>, <8 x i16>* %105, align 2, !alias.scope !5
  %107 = sext <8 x i16> %106 to <8 x i32>
  %108 = mul nsw <8 x i32> %74, %107
  %109 = add <8 x i32> %103, %108
  %110 = getelementptr inbounds i16, i16* %87, i64 -4
  %111 = bitcast i16* %110 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2, !alias.scope !5
  %113 = sext <8 x i16> %112 to <8 x i32>
  %114 = mul nsw <8 x i32> %78, %113
  %115 = add <8 x i32> %109, %114
  %116 = getelementptr inbounds i16, i16* %87, i64 -5
  %117 = bitcast i16* %116 to <8 x i16>*
  %118 = load <8 x i16>, <8 x i16>* %117, align 2, !alias.scope !5
  %119 = sext <8 x i16> %118 to <8 x i32>
  %120 = mul nsw <8 x i32> %82, %119
  %121 = add <8 x i32> %115, %120
  %122 = getelementptr inbounds i16, i16* %1, i64 %85
  %123 = bitcast i16* %122 to <8 x i16>*
  %124 = load <8 x i16>, <8 x i16>* %123, align 2, !alias.scope !5
  %125 = sext <8 x i16> %124 to <8 x i32>
  %126 = shl nsw <8 x i32> %125, <i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12, i32 12>
  %127 = sub <8 x i32> %126, %121
  %128 = ashr <8 x i32> %127, <i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11, i32 11>
  %129 = add nsw <8 x i32> %128, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %130 = ashr <8 x i32> %129, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %131 = icmp sgt <8 x i32> %127, <i32 134215679, i32 134215679, i32 134215679, i32 134215679, i32 134215679, i32 134215679, i32 134215679, i32 134215679>
  %132 = icmp sgt <8 x i32> %130, <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %133 = select <8 x i1> %132, <8 x i32> %130, <8 x i32> <i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768, i32 -32768>
  %134 = select <8 x i1> %131, <8 x i32> <i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767, i32 32767>, <8 x i32> %133
  %135 = trunc <8 x i32> %134 to <8 x i16>
  %136 = getelementptr inbounds i16, i16* %0, i64 %85
  %137 = bitcast i16* %136 to <8 x i16>*
  store <8 x i16> %135, <8 x i16>* %137, align 2, !alias.scope !7, !noalias !9
  %138 = add i64 %84, 8
  %139 = icmp eq i64 %138, %57
  br i1 %139, label %140, label %83, !llvm.loop !10

140:                                              ; preds = %83
  %141 = icmp eq i64 %37, %57
  br i1 %141, label %335, label %39

142:                                              ; preds = %28, %256
  %143 = phi i64 [ %272, %256 ], [ %26, %28 ]
  %144 = add nsw i64 %143, -1
  %145 = getelementptr inbounds i16, i16* %1, i64 %144
  %146 = load i16, i16* %145, align 2
  %147 = sext i16 %146 to i32
  %148 = load i16, i16* %2, align 2
  %149 = sext i16 %148 to i32
  %150 = mul nsw i32 %149, %147
  %151 = getelementptr inbounds i16, i16* %145, i64 -1
  %152 = load i16, i16* %151, align 2
  %153 = sext i16 %152 to i32
  %154 = load i16, i16* %20, align 2
  %155 = sext i16 %154 to i32
  %156 = mul nsw i32 %155, %153
  %157 = add i32 %156, %150
  %158 = getelementptr inbounds i16, i16* %145, i64 -2
  %159 = load i16, i16* %158, align 2
  %160 = sext i16 %159 to i32
  %161 = load i16, i16* %21, align 2
  %162 = sext i16 %161 to i32
  %163 = mul nsw i32 %162, %160
  %164 = add i32 %157, %163
  %165 = getelementptr inbounds i16, i16* %145, i64 -3
  %166 = load i16, i16* %165, align 2
  %167 = sext i16 %166 to i32
  %168 = load i16, i16* %22, align 2
  %169 = sext i16 %168 to i32
  %170 = mul nsw i32 %169, %167
  %171 = add i32 %164, %170
  %172 = getelementptr inbounds i16, i16* %145, i64 -4
  %173 = load i16, i16* %172, align 2
  %174 = sext i16 %173 to i32
  %175 = load i16, i16* %23, align 2
  %176 = sext i16 %175 to i32
  %177 = mul nsw i32 %176, %174
  %178 = add i32 %171, %177
  %179 = getelementptr inbounds i16, i16* %145, i64 -5
  %180 = load i16, i16* %179, align 2
  %181 = sext i16 %180 to i32
  %182 = load i16, i16* %24, align 2
  %183 = sext i16 %182 to i32
  %184 = mul nsw i32 %183, %181
  %185 = add i32 %178, %184
  br i1 %33, label %232, label %186

186:                                              ; preds = %142, %186
  %187 = phi i64 [ %229, %186 ], [ 6, %142 ]
  %188 = phi i32 [ %228, %186 ], [ %185, %142 ]
  %189 = phi i64 [ %230, %186 ], [ %34, %142 ]
  %190 = sub nsw i64 0, %187
  %191 = getelementptr inbounds i16, i16* %145, i64 %190
  %192 = load i16, i16* %191, align 2
  %193 = sext i16 %192 to i32
  %194 = getelementptr inbounds i16, i16* %2, i64 %187
  %195 = load i16, i16* %194, align 2
  %196 = sext i16 %195 to i32
  %197 = mul nsw i32 %196, %193
  %198 = add i32 %197, %188
  %199 = xor i64 %187, -1
  %200 = getelementptr inbounds i16, i16* %145, i64 %199
  %201 = load i16, i16* %200, align 2
  %202 = sext i16 %201 to i32
  %203 = or i64 %187, 1
  %204 = getelementptr inbounds i16, i16* %2, i64 %203
  %205 = load i16, i16* %204, align 2
  %206 = sext i16 %205 to i32
  %207 = mul nsw i32 %206, %202
  %208 = add i32 %198, %207
  %209 = add nuw nsw i64 %187, 2
  %210 = sub nuw nsw i64 -2, %187
  %211 = getelementptr inbounds i16, i16* %145, i64 %210
  %212 = load i16, i16* %211, align 2
  %213 = sext i16 %212 to i32
  %214 = getelementptr inbounds i16, i16* %2, i64 %209
  %215 = load i16, i16* %214, align 2
  %216 = sext i16 %215 to i32
  %217 = mul nsw i32 %216, %213
  %218 = add i32 %217, %208
  %219 = sub nuw i64 -3, %187
  %220 = getelementptr inbounds i16, i16* %145, i64 %219
  %221 = load i16, i16* %220, align 2
  %222 = sext i16 %221 to i32
  %223 = or i64 %209, 1
  %224 = getelementptr inbounds i16, i16* %2, i64 %223
  %225 = load i16, i16* %224, align 2
  %226 = sext i16 %225 to i32
  %227 = mul nsw i32 %226, %222
  %228 = add i32 %218, %227
  %229 = add nuw nsw i64 %187, 4
  %230 = add i64 %189, -2
  %231 = icmp eq i64 %230, 0
  br i1 %231, label %232, label %186

232:                                              ; preds = %186, %142
  %233 = phi i32 [ undef, %142 ], [ %228, %186 ]
  %234 = phi i64 [ 6, %142 ], [ %229, %186 ]
  %235 = phi i32 [ %185, %142 ], [ %228, %186 ]
  br i1 %35, label %256, label %236

236:                                              ; preds = %232
  %237 = getelementptr inbounds i16, i16* %2, i64 %234
  %238 = load i16, i16* %237, align 2
  %239 = sext i16 %238 to i32
  %240 = sub nsw i64 0, %234
  %241 = getelementptr inbounds i16, i16* %145, i64 %240
  %242 = load i16, i16* %241, align 2
  %243 = sext i16 %242 to i32
  %244 = mul nsw i32 %239, %243
  %245 = add i32 %244, %235
  %246 = or i64 %234, 1
  %247 = getelementptr inbounds i16, i16* %2, i64 %246
  %248 = load i16, i16* %247, align 2
  %249 = sext i16 %248 to i32
  %250 = xor i64 %234, -1
  %251 = getelementptr inbounds i16, i16* %145, i64 %250
  %252 = load i16, i16* %251, align 2
  %253 = sext i16 %252 to i32
  %254 = mul nsw i32 %249, %253
  %255 = add i32 %245, %254
  br label %256

256:                                              ; preds = %232, %236
  %257 = phi i32 [ %233, %232 ], [ %255, %236 ]
  %258 = getelementptr inbounds i16, i16* %1, i64 %143
  %259 = load i16, i16* %258, align 2
  %260 = sext i16 %259 to i32
  %261 = shl nsw i32 %260, 12
  %262 = sub i32 %261, %257
  %263 = ashr i32 %262, 11
  %264 = add nsw i32 %263, 1
  %265 = ashr i32 %264, 1
  %266 = icmp sgt i32 %262, 134215679
  %267 = icmp sgt i32 %265, -32768
  %268 = select i1 %267, i32 %265, i32 -32768
  %269 = select i1 %266, i32 32767, i32 %268
  %270 = trunc i32 %269 to i16
  %271 = getelementptr inbounds i16, i16* %0, i64 %143
  store i16 %270, i16* %271, align 2
  %272 = add nsw i64 %143, 1
  %273 = icmp eq i64 %272, %27
  br i1 %273, label %335, label %142

274:                                              ; preds = %13
  tail call void @celt_fatal(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0), i32 69) #3
  unreachable

275:                                              ; preds = %39, %275
  %276 = phi i64 [ %333, %275 ], [ %40, %39 ]
  %277 = add nsw i64 %276, -1
  %278 = getelementptr inbounds i16, i16* %1, i64 %277
  %279 = load i16, i16* %278, align 2
  %280 = sext i16 %279 to i32
  %281 = load i16, i16* %2, align 2
  %282 = sext i16 %281 to i32
  %283 = mul nsw i32 %282, %280
  %284 = getelementptr inbounds i16, i16* %278, i64 -1
  %285 = load i16, i16* %284, align 2
  %286 = sext i16 %285 to i32
  %287 = load i16, i16* %20, align 2
  %288 = sext i16 %287 to i32
  %289 = mul nsw i32 %288, %286
  %290 = add i32 %289, %283
  %291 = getelementptr inbounds i16, i16* %278, i64 -2
  %292 = load i16, i16* %291, align 2
  %293 = sext i16 %292 to i32
  %294 = load i16, i16* %21, align 2
  %295 = sext i16 %294 to i32
  %296 = mul nsw i32 %295, %293
  %297 = add i32 %290, %296
  %298 = getelementptr inbounds i16, i16* %278, i64 -3
  %299 = load i16, i16* %298, align 2
  %300 = sext i16 %299 to i32
  %301 = load i16, i16* %22, align 2
  %302 = sext i16 %301 to i32
  %303 = mul nsw i32 %302, %300
  %304 = add i32 %297, %303
  %305 = getelementptr inbounds i16, i16* %278, i64 -4
  %306 = load i16, i16* %305, align 2
  %307 = sext i16 %306 to i32
  %308 = load i16, i16* %23, align 2
  %309 = sext i16 %308 to i32
  %310 = mul nsw i32 %309, %307
  %311 = add i32 %304, %310
  %312 = getelementptr inbounds i16, i16* %278, i64 -5
  %313 = load i16, i16* %312, align 2
  %314 = sext i16 %313 to i32
  %315 = load i16, i16* %24, align 2
  %316 = sext i16 %315 to i32
  %317 = mul nsw i32 %316, %314
  %318 = add i32 %311, %317
  %319 = getelementptr inbounds i16, i16* %1, i64 %276
  %320 = load i16, i16* %319, align 2
  %321 = sext i16 %320 to i32
  %322 = shl nsw i32 %321, 12
  %323 = sub i32 %322, %318
  %324 = ashr i32 %323, 11
  %325 = add nsw i32 %324, 1
  %326 = ashr i32 %325, 1
  %327 = icmp sgt i32 %323, 134215679
  %328 = icmp sgt i32 %326, -32768
  %329 = select i1 %328, i32 %326, i32 -32768
  %330 = select i1 %327, i32 32767, i32 %329
  %331 = trunc i32 %330 to i16
  %332 = getelementptr inbounds i16, i16* %0, i64 %276
  store i16 %331, i16* %332, align 2
  %333 = add nuw nsw i64 %276, 1
  %334 = icmp eq i64 %333, %27
  br i1 %334, label %335, label %275, !llvm.loop !12

335:                                              ; preds = %275, %256, %140, %17
  %336 = phi i64 [ %18, %17 ], [ %26, %140 ], [ %26, %256 ], [ %26, %275 ]
  %337 = bitcast i16* %0 to i8*
  %338 = shl nsw i64 %336, 1
  tail call void @llvm.memset.p0i8.i64(i8* align 2 %337, i8 0, i64 %338, i1 false)
  ret void
}

; Function Attrs: noreturn
declare void @celt_fatal(i8*, i8*, i32) local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!3}
!3 = distinct !{!3, !4}
!4 = distinct !{!4, !"LVerDomain"}
!5 = !{!6}
!6 = distinct !{!6, !4}
!7 = !{!8}
!8 = distinct !{!8, !4}
!9 = !{!6, !3}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.isvectorized", i32 1}
!12 = distinct !{!12, !11}
