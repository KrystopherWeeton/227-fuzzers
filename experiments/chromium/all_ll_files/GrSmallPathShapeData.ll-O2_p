; ModuleID = '../../third_party/skia/src/gpu/ops/GrSmallPathShapeData.cpp'
source_filename = "../../third_party/skia/src/gpu/ops/GrSmallPathShapeData.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%class.GrSmallPathShapeDataKey = type { %class.SkAutoSTArray }
%class.SkAutoSTArray = type { i32, i32*, [96 x i8] }
%class.GrStyledShape = type { %class.GrShape, %class.GrStyle, i32, i8, i8, %class.SkTLazy, %class.SkAutoSTArray.15 }
%class.GrShape = type { %union.anon, i8, i8, i8, i8, [4 x i8] }
%union.anon = type { %class.SkRRect, [4 x i8] }
%class.SkRRect = type { %struct.SkRect, [4 x %struct.SkPoint], i32 }
%struct.SkRect = type { float, float, float, float }
%struct.SkPoint = type { float, float }
%class.GrStyle = type { %class.SkStrokeRec, %class.sk_sp.13, %"struct.GrStyle::DashInfo" }
%class.SkStrokeRec = type { float, float, float, i32 }
%class.sk_sp.13 = type { %class.SkPathEffect* }
%class.SkPathEffect = type { %class.SkFlattenable.base, [4 x i8] }
%class.SkFlattenable.base = type { %class.SkRefCnt.base }
%class.SkRefCnt.base = type { %class.SkRefCntBase.base }
%class.SkRefCntBase.base = type <{ i32 (...)**, %"struct.std::__1::atomic" }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.0" }
%"struct.std::__1::__atomic_base.0" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"struct.GrStyle::DashInfo" = type { i32, float, %class.SkAutoSTArray.14 }
%class.SkAutoSTArray.14 = type { i32, float*, [16 x i8] }
%class.SkTLazy = type { [16 x i8], %class.SkPath* }
%class.SkPath = type <{ %class.sk_sp, i32, %"struct.std::__1::atomic.3", %"struct.std::__1::atomic.3", i8, i8 }>
%class.sk_sp = type { %class.SkPathRef* }
%class.SkPathRef = type <{ %class.SkNVRefCnt, %struct.SkRect, [4 x i8], %class.SkTDArray, %class.SkTDArray.1, %class.SkTDArray.2, i32, [4 x i8], %"class.SkIDChangeListener::List", i8, i8, i8, i8, i8, i8, i8, i8 }>
%class.SkNVRefCnt = type { %"struct.std::__1::atomic" }
%class.SkTDArray = type { %struct.SkPoint*, i32, i32 }
%class.SkTDArray.1 = type { i8*, i32, i32 }
%class.SkTDArray.2 = type { float*, i32, i32 }
%"class.SkIDChangeListener::List" = type { %class.SkMutex, %class.SkTDArray.8 }
%class.SkMutex = type { %class.SkSemaphore }
%class.SkSemaphore = type { %"struct.std::__1::atomic", %class.SkOnce, %"struct.SkSemaphore::OSSemaphore"* }
%class.SkOnce = type { %"struct.std::__1::atomic.3" }
%"struct.SkSemaphore::OSSemaphore" = type opaque
%class.SkTDArray.8 = type { %class.SkIDChangeListener**, i32, i32 }
%class.SkIDChangeListener = type { %class.SkRefCnt.base, %"struct.std::__1::atomic.9", [3 x i8] }
%"struct.std::__1::atomic.9" = type { %"struct.std::__1::__atomic_base.10" }
%"struct.std::__1::__atomic_base.10" = type { %"struct.std::__1::__cxx_atomic_impl.11" }
%"struct.std::__1::__cxx_atomic_impl.11" = type { %"struct.std::__1::__cxx_atomic_base_impl.12" }
%"struct.std::__1::__cxx_atomic_base_impl.12" = type { i8 }
%"struct.std::__1::atomic.3" = type { %"struct.std::__1::__atomic_base.4" }
%"struct.std::__1::__atomic_base.4" = type { %"struct.std::__1::__atomic_base.5" }
%"struct.std::__1::__atomic_base.5" = type { %"struct.std::__1::__cxx_atomic_impl.6" }
%"struct.std::__1::__cxx_atomic_impl.6" = type { %"struct.std::__1::__cxx_atomic_base_impl.7" }
%"struct.std::__1::__cxx_atomic_base_impl.7" = type { i8 }
%class.SkAutoSTArray.15 = type { i32, i32*, [32 x i8] }
%class.SkMatrix = type { [9 x float], i32 }

@_ZN23GrSmallPathShapeDataKeyC1ERK13GrStyledShapej = hidden unnamed_addr alias void (%class.GrSmallPathShapeDataKey*, %class.GrStyledShape*, i32), void (%class.GrSmallPathShapeDataKey*, %class.GrStyledShape*, i32)* @_ZN23GrSmallPathShapeDataKeyC2ERK13GrStyledShapej
@_ZN23GrSmallPathShapeDataKeyC1ERK13GrStyledShapeRK8SkMatrix = hidden unnamed_addr alias void (%class.GrSmallPathShapeDataKey*, %class.GrStyledShape*, %class.SkMatrix*), void (%class.GrSmallPathShapeDataKey*, %class.GrStyledShape*, %class.SkMatrix*)* @_ZN23GrSmallPathShapeDataKeyC2ERK13GrStyledShapeRK8SkMatrix

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23GrSmallPathShapeDataKeyC2ERK13GrStyledShapej(%class.GrSmallPathShapeDataKey*, %class.GrStyledShape* dereferenceable(208), i32) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.GrSmallPathShapeDataKey, %class.GrSmallPathShapeDataKey* %0, i64 0, i32 0, i32 1
  store i32* null, i32** %4, align 8
  %5 = getelementptr inbounds %class.GrSmallPathShapeDataKey, %class.GrSmallPathShapeDataKey* %0, i64 0, i32 0, i32 0
  store i32 0, i32* %5, align 8
  %6 = tail call i32 @_ZNK13GrStyledShape15unstyledKeySizeEv(%class.GrStyledShape* %1) #3
  %7 = load i32*, i32** %4, align 8
  %8 = load i32, i32* %5, align 8
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds i32, i32* %7, i64 %9
  br label %11

11:                                               ; preds = %11, %3
  %12 = phi i32* [ %10, %3 ], [ %14, %11 ]
  %13 = icmp ugt i32* %12, %7
  %14 = getelementptr inbounds i32, i32* %12, i64 -1
  br i1 %13, label %11, label %15

15:                                               ; preds = %11
  %16 = add nsw i32 %6, 1
  %17 = bitcast i32* %7 to i8*
  %18 = icmp eq i32 %8, %16
  br i1 %18, label %38, label %19

19:                                               ; preds = %15
  %20 = icmp sgt i32 %8, 24
  br i1 %20, label %21, label %22

21:                                               ; preds = %19
  tail call void @_Z7sk_freePv(i8* %17) #3
  br label %22

22:                                               ; preds = %21, %19
  %23 = icmp sgt i32 %6, 23
  br i1 %23, label %24, label %29

24:                                               ; preds = %22
  %25 = sext i32 %16 to i64
  %26 = tail call i8* @_Z15sk_malloc_throwmm(i64 %25, i64 4) #3
  %27 = bitcast i32** %4 to i8**
  store i8* %26, i8** %27, align 8
  %28 = bitcast i8* %26 to i32*
  br label %36

29:                                               ; preds = %22
  %30 = icmp sgt i32 %6, -1
  br i1 %30, label %31, label %35

31:                                               ; preds = %29
  %32 = getelementptr inbounds %class.GrSmallPathShapeDataKey, %class.GrSmallPathShapeDataKey* %0, i64 0, i32 0, i32 2, i64 0
  %33 = bitcast i32** %4 to i8**
  store i8* %32, i8** %33, align 8
  %34 = bitcast i8* %32 to i32*
  br label %36

35:                                               ; preds = %29
  store i32* null, i32** %4, align 8
  br label %36

36:                                               ; preds = %35, %31, %24
  %37 = phi i32* [ null, %35 ], [ %34, %31 ], [ %28, %24 ]
  store i32 %16, i32* %5, align 8
  br label %38

38:                                               ; preds = %15, %36
  %39 = phi i32* [ %7, %15 ], [ %37, %36 ]
  store i32 %2, i32* %39, align 4
  %40 = load i32*, i32** %4, align 8
  %41 = getelementptr inbounds i32, i32* %40, i64 1
  tail call void @_ZNK13GrStyledShape16writeUnstyledKeyEPj(%class.GrStyledShape* %1, i32* %41) #3
  ret void
}

declare i32 @_ZNK13GrStyledShape15unstyledKeySizeEv(%class.GrStyledShape*) local_unnamed_addr #1

declare void @_ZNK13GrStyledShape16writeUnstyledKeyEPj(%class.GrStyledShape*, i32*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN23GrSmallPathShapeDataKeyC2ERK13GrStyledShapeRK8SkMatrix(%class.GrSmallPathShapeDataKey*, %class.GrStyledShape* dereferenceable(208), %class.SkMatrix* nocapture readonly dereferenceable(40)) unnamed_addr #0 align 2 {
  %4 = getelementptr inbounds %class.GrSmallPathShapeDataKey, %class.GrSmallPathShapeDataKey* %0, i64 0, i32 0, i32 1
  store i32* null, i32** %4, align 8
  %5 = getelementptr inbounds %class.GrSmallPathShapeDataKey, %class.GrSmallPathShapeDataKey* %0, i64 0, i32 0, i32 0
  store i32 0, i32* %5, align 8
  %6 = bitcast %class.SkMatrix* %2 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 4
  %9 = bitcast float* %8 to i32*
  %10 = load i32, i32* %9, align 4
  %11 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 1
  %12 = bitcast float* %11 to i32*
  %13 = load i32, i32* %12, align 4
  %14 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 3
  %15 = bitcast float* %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 2
  %18 = load float, float* %17, align 4
  %19 = getelementptr inbounds %class.SkMatrix, %class.SkMatrix* %2, i64 0, i32 0, i64 5
  %20 = load float, float* %19, align 4
  %21 = tail call float @llvm.floor.f32(float %18)
  %22 = fsub float %18, %21
  %23 = tail call float @llvm.floor.f32(float %20)
  %24 = fsub float %20, %23
  %25 = fmul float %22, 6.553600e+04
  %26 = fcmp olt float %25, 0x41DFFFFFE0000000
  %27 = select i1 %26, float %25, float 0x41DFFFFFE0000000
  %28 = fcmp ogt float %27, 0xC1DFFFFFE0000000
  %29 = select i1 %28, float %27, float 0xC1DFFFFFE0000000
  %30 = fptosi float %29 to i32
  %31 = fmul float %24, 6.553600e+04
  %32 = fcmp olt float %31, 0x41DFFFFFE0000000
  %33 = select i1 %32, float %31, float 0x41DFFFFFE0000000
  %34 = fcmp ogt float %33, 0xC1DFFFFFE0000000
  %35 = select i1 %34, float %33, float 0xC1DFFFFFE0000000
  %36 = tail call i32 @_ZNK13GrStyledShape15unstyledKeySizeEv(%class.GrStyledShape* %1) #3
  %37 = load i32*, i32** %4, align 8
  %38 = load i32, i32* %5, align 8
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i32, i32* %37, i64 %39
  br label %41

41:                                               ; preds = %41, %3
  %42 = phi i32* [ %40, %3 ], [ %44, %41 ]
  %43 = icmp ugt i32* %42, %37
  %44 = getelementptr inbounds i32, i32* %42, i64 -1
  br i1 %43, label %41, label %45

45:                                               ; preds = %41
  %46 = and i32 %30, 65280
  %47 = fptosi float %35 to i32
  %48 = add nsw i32 %36, 5
  %49 = bitcast i32* %37 to i8*
  %50 = icmp eq i32 %38, %48
  br i1 %50, label %70, label %51

51:                                               ; preds = %45
  %52 = icmp sgt i32 %38, 24
  br i1 %52, label %53, label %54

53:                                               ; preds = %51
  tail call void @_Z7sk_freePv(i8* %49) #3
  br label %54

54:                                               ; preds = %53, %51
  %55 = icmp sgt i32 %48, 24
  br i1 %55, label %56, label %61

56:                                               ; preds = %54
  %57 = sext i32 %48 to i64
  %58 = tail call i8* @_Z15sk_malloc_throwmm(i64 %57, i64 4) #3
  %59 = bitcast i32** %4 to i8**
  store i8* %58, i8** %59, align 8
  %60 = bitcast i8* %58 to i32*
  br label %68

61:                                               ; preds = %54
  %62 = icmp sgt i32 %48, 0
  br i1 %62, label %63, label %67

63:                                               ; preds = %61
  %64 = getelementptr inbounds %class.GrSmallPathShapeDataKey, %class.GrSmallPathShapeDataKey* %0, i64 0, i32 0, i32 2, i64 0
  %65 = bitcast i32** %4 to i8**
  store i8* %64, i8** %65, align 8
  %66 = bitcast i8* %64 to i32*
  br label %68

67:                                               ; preds = %61
  store i32* null, i32** %4, align 8
  br label %68

68:                                               ; preds = %67, %63, %56
  %69 = phi i32* [ null, %67 ], [ %66, %63 ], [ %60, %56 ]
  store i32 %48, i32* %5, align 8
  br label %70

70:                                               ; preds = %45, %68
  %71 = phi i32* [ %37, %45 ], [ %69, %68 ]
  store i32 %7, i32* %71, align 4
  %72 = load i32*, i32** %4, align 8
  %73 = getelementptr inbounds i32, i32* %72, i64 1
  store i32 %10, i32* %73, align 4
  %74 = load i32*, i32** %4, align 8
  %75 = getelementptr inbounds i32, i32* %74, i64 2
  store i32 %13, i32* %75, align 4
  %76 = load i32*, i32** %4, align 8
  %77 = getelementptr inbounds i32, i32* %76, i64 3
  store i32 %16, i32* %77, align 4
  %78 = lshr i32 %47, 8
  %79 = and i32 %78, 255
  %80 = or i32 %79, %46
  %81 = load i32*, i32** %4, align 8
  %82 = getelementptr inbounds i32, i32* %81, i64 4
  store i32 %80, i32* %82, align 4
  %83 = load i32*, i32** %4, align 8
  %84 = getelementptr inbounds i32, i32* %83, i64 5
  tail call void @_ZNK13GrStyledShape16writeUnstyledKeyEPj(%class.GrStyledShape* %1, i32* %84) #3
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare float @llvm.floor.f32(float) #2

declare void @_Z7sk_freePv(i8*) local_unnamed_addr #1

declare i8* @_Z15sk_malloc_throwmm(i64, i64) local_unnamed_addr #1

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
