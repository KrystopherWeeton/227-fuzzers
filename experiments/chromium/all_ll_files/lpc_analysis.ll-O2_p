; ModuleID = '../../third_party/webrtc/modules/audio_coding/codecs/isac/main/source/lpc_analysis.c'
source_filename = "../../third_party/webrtc/modules/audio_coding/codecs/isac/main/source/lpc_analysis.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.MaskFiltstr = type { [256 x double], [256 x double], [13 x double], [7 x double], [13 x float], [13 x float], [7 x float], [7 x float], [13 x float], [13 x float], [7 x float], [7 x float], double }

@kLpcCorrWindow = internal unnamed_addr constant [256 x double] [double 0.000000e+00, double 1.000000e-08, double 4.000000e-08, double 0x3E7AD7F29ABCAF48, double 2.000000e-07, double 3.500000e-07, double 5.500000e-07, double 0x3EABD9A54D56F5DB, double 1.180000e-06, double 1.630000e-06, double 2.180000e-06, double 2.830000e-06, double 3.610000e-06, double 4.530000e-06, double 0x3ED7677AB882E8D3, double 6.790000e-06, double 0x3EE1223C3FF73BE1, double 9.730000e-06, double 1.147000e-05, double 1.342000e-05, double 1.558000e-05, double 1.796000e-05, double 2.058000e-05, double 2.344000e-05, double 2.657000e-05, double 2.997000e-05, double 3.365000e-05, double 3.762000e-05, double 4.190000e-05, double 4.651000e-05, double 5.144000e-05, double 5.673000e-05, double 6.236000e-05, double 6.837000e-05, double 7.476000e-05, double 8.155000e-05, double 8.875000e-05, double 9.636000e-05, double 1.044100e-04, double 1.129000e-04, double 1.218600e-04, double 1.312800e-04, double 1.411900e-04, double 1.516000e-04, double 1.625200e-04, double 1.739600e-04, double 1.859400e-04, double 1.984600e-04, double 2.115500e-04, double 2.252100e-04, double 2.394600e-04, double 2.543200e-04, double 2.697800e-04, double 2.858700e-04, double 3.026000e-04, double 3.199800e-04, double 3.380200e-04, double 3.567400e-04, double 3.761500e-04, double 3.962600e-04, double 4.170800e-04, double 4.386300e-04, double 4.609200e-04, double 4.839600e-04, double 5.077500e-04, double 5.323300e-04, double 5.576800e-04, double 5.838400e-04, double 6.108000e-04, double 6.385800e-04, double 6.672000e-04, double 6.966500e-04, double 7.269600e-04, double 7.581300e-04, double 7.901700e-04, double 8.231000e-04, double 8.569200e-04, double 0x3F4D379E51E52508, double 9.272800e-04, double 0x3F4F9546A3A8663B, double 1.001330e-03, double 1.039760e-03, double 1.079140e-03, double 1.119470e-03, double 1.160770e-03, double 1.203040e-03, double 1.246300e-03, double 1.290530e-03, double 1.335770e-03, double 1.382000e-03, double 1.429240e-03, double 1.477490e-03, double 1.526760e-03, double 1.577050e-03, double 1.628360e-03, double 1.680700e-03, double 1.734080e-03, double 1.788500e-03, double 1.843950e-03, double 1.900450e-03, double 1.957990e-03, double 2.016580e-03, double 2.076210e-03, double 2.136880e-03, double 2.198600e-03, double 2.261370e-03, double 2.325180e-03, double 2.390030e-03, double 2.455910e-03, double 2.522840e-03, double 2.590790e-03, double 2.659770e-03, double 2.729770e-03, double 2.800780e-03, double 2.872800e-03, double 2.945820e-03, double 3.019840e-03, double 3.094840e-03, double 3.170810e-03, double 3.247740e-03, double 3.325630e-03, double 3.404460e-03, double 3.484210e-03, double 3.564880e-03, double 3.646440e-03, double 3.728890e-03, double 3.812200e-03, double 3.896360e-03, double 3.981350e-03, double 4.067150e-03, double 4.153740e-03, double 4.241090e-03, double 4.329200e-03, double 4.418020e-03, double 4.507540e-03, double 4.597730e-03, double 4.688570e-03, double 4.780010e-03, double 4.872050e-03, double 4.964640e-03, double 5.057750e-03, double 5.151360e-03, double 5.245420e-03, double 5.339900e-03, double 5.434760e-03, double 5.529970e-03, double 5.625480e-03, double 5.721250e-03, double 5.817250e-03, double 5.913420e-03, double 6.009730e-03, double 6.106120e-03, double 6.202540e-03, double 6.298950e-03, double 0x3F7A31F54591DA88, double 0x3F7A96DCD0D0E865, double 0x3F7AFB940A8E7955, double 0x3F7B601036031C3F, double 0x3F7BC43BD99FEEF3, double 0x3F7C280C389D8059, double 6.968910e-03, double 7.063220e-03, double 7.156990e-03, double 7.250160e-03, double 0x3F7E1356490CE43F, double 0x3F7E738B3D0A777D, double 7.525350e-03, double 7.615400e-03, double 7.704490e-03, double 0x3F7FEB12073E8DAF, double 7.879470e-03, double 7.965190e-03, double 8.049630e-03, double 0x3F80A7E08439B604, double 8.214310e-03, double 8.294370e-03, double 0x3F8125C2316857D8, double 8.449490e-03, double 0x3F8175383B5AC9FB, double 8.597300e-03, double 8.668220e-03, double 8.737010e-03, double 8.803580e-03, double 8.867810e-03, double 8.929600e-03, double 0x3F8268BDAEA1BE81, double 9.045420e-03, double 0x3F82A29DFA267738, double 0x3F82BD4F006E39EF, double 0x3F82D66D5F7EEB98, double 9.242830e-03, double 9.284360e-03, double 9.322520e-03, double 0x3F8329DB70A98B54, double 0x3F833A20375805FB, double 9.415500e-03, double 9.438900e-03, double 0x3F835EDCDA3616E8, double 0x3F8366D8FD06D155, double 9.484460e-03, double 9.490980e-03, double 9.492940e-03, double 9.490200e-03, double 9.482620e-03, double 9.470050e-03, double 0x3F835BC0F0F677C1, double 0x3F834FB5F5C5BF67, double 0x3F8340D384CCD8E1, double 9.367040e-03, double 9.327380e-03, double 9.281860e-03, double 9.230340e-03, double 9.172680e-03, double 9.108720e-03, double 9.038320e-03, double 0x3F825A52B1D3A229, double 0x3F822E6F5420BE91, double 0x3F81FEF33A9FB918, double 0x3F81CBCB9AF38BD3, double 8.584780e-03, double 8.472800e-03, double 8.353430e-03, double 8.226530e-03, double 8.091990e-03, double 7.949700e-03, double 0x3F7FF26E71F895D3, double 7.641450e-03, double 0x3F7E9E6B9071D2AB, double 7.301030e-03, double 7.118570e-03, double 6.927870e-03, double 0x3F7B8FBDF89E8CC8, double 0x3F7AB65F4D178AE1, double 6.305970e-03, double 6.082080e-03, double 5.849940e-03, double 5.609620e-03, double 5.361240e-03, double 5.104930e-03, double 4.840890e-03, double 4.569350e-03, double 4.290620e-03, double 4.005050e-03, double 3.713100e-03, double 3.415320e-03, double 3.112380e-03, double 2.805110e-03, double 2.494520e-03, double 2.181840e-03, double 1.868640e-03, double 1.556900e-03, double 1.249180e-03, double 9.489500e-04, double 6.611200e-04, double 3.932000e-04, double 1.588100e-04], align 16

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_GetLpcCoefLb(double* nocapture readonly, double* nocapture readonly, %struct.MaskFiltstr* nocapture, double, i16* nocapture readonly, double* nocapture, double* nocapture) local_unnamed_addr #0 {
  %8 = alloca [256 x double], align 16
  %9 = alloca [256 x double], align 16
  %10 = alloca [14 x double], align 16
  %11 = alloca [13 x double], align 16
  %12 = alloca [7 x double], align 16
  %13 = alloca [12 x double], align 16
  %14 = alloca [6 x double], align 16
  %15 = alloca [13 x double], align 16
  %16 = alloca [7 x double], align 16
  %17 = bitcast [256 x double]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %17) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -1, i64 2048, i1 false)
  %18 = bitcast [256 x double]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %18) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %18, i8 -1, i64 2048, i1 false)
  %19 = bitcast [14 x double]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 112, i8* nonnull %19) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %19, i8 -1, i64 112, i1 false)
  %20 = bitcast [13 x double]* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %20) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -1, i64 104, i1 false)
  %21 = bitcast [7 x double]* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %21) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %21, i8 -1, i64 56, i1 false)
  %22 = bitcast [12 x double]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %22) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %22, i8 -1, i64 96, i1 false)
  %23 = bitcast [6 x double]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %23) #6
  %24 = getelementptr inbounds [6 x double], [6 x double]* %14, i64 0, i64 0
  %25 = bitcast [13 x double]* %15 to i8*
  %26 = bitcast [6 x double]* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 -1, i64 48, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %25) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %25, i8 -1, i64 104, i1 false)
  %27 = bitcast [7 x double]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %27) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 -1, i64 56, i1 false)
  %28 = fmul double %3, 5.000000e-02
  %29 = tail call double @pow(double 1.000000e+01, double %28) #6
  %30 = fdiv double %29, 3.460000e+00
  br label %31

31:                                               ; preds = %31, %7
  %32 = phi i64 [ 12, %7 ], [ %63, %31 ]
  %33 = phi double [ 1.000000e-04, %7 ], [ %62, %31 ]
  %34 = getelementptr inbounds double, double* %0, i64 %32
  %35 = load double, double* %34, align 8
  %36 = fmul double %35, %35
  %37 = fadd double %33, %36
  %38 = or i64 %32, 1
  %39 = getelementptr inbounds double, double* %0, i64 %38
  %40 = load double, double* %39, align 8
  %41 = fmul double %40, %40
  %42 = fadd double %37, %41
  %43 = add nuw nsw i64 %32, 2
  %44 = getelementptr inbounds double, double* %0, i64 %43
  %45 = load double, double* %44, align 8
  %46 = fmul double %45, %45
  %47 = fadd double %42, %46
  %48 = add nuw nsw i64 %32, 3
  %49 = getelementptr inbounds double, double* %0, i64 %48
  %50 = load double, double* %49, align 8
  %51 = fmul double %50, %50
  %52 = fadd double %47, %51
  %53 = add nuw nsw i64 %32, 4
  %54 = getelementptr inbounds double, double* %0, i64 %53
  %55 = load double, double* %54, align 8
  %56 = fmul double %55, %55
  %57 = fadd double %52, %56
  %58 = add nuw nsw i64 %32, 5
  %59 = getelementptr inbounds double, double* %0, i64 %58
  %60 = load double, double* %59, align 8
  %61 = fmul double %60, %60
  %62 = fadd double %57, %61
  %63 = add nuw nsw i64 %32, 6
  %64 = icmp eq i64 %63, 72
  br i1 %64, label %65, label %31

65:                                               ; preds = %31
  %66 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 12
  br label %67

67:                                               ; preds = %67, %65
  %68 = phi i64 [ 72, %65 ], [ %99, %67 ]
  %69 = phi double [ 1.000000e-04, %65 ], [ %98, %67 ]
  %70 = getelementptr inbounds double, double* %0, i64 %68
  %71 = load double, double* %70, align 8
  %72 = fmul double %71, %71
  %73 = fadd double %69, %72
  %74 = or i64 %68, 1
  %75 = getelementptr inbounds double, double* %0, i64 %74
  %76 = load double, double* %75, align 8
  %77 = fmul double %76, %76
  %78 = fadd double %73, %77
  %79 = add nuw nsw i64 %68, 2
  %80 = getelementptr inbounds double, double* %0, i64 %79
  %81 = load double, double* %80, align 8
  %82 = fmul double %81, %81
  %83 = fadd double %78, %82
  %84 = add nuw nsw i64 %68, 3
  %85 = getelementptr inbounds double, double* %0, i64 %84
  %86 = load double, double* %85, align 8
  %87 = fmul double %86, %86
  %88 = fadd double %83, %87
  %89 = add nuw nsw i64 %68, 4
  %90 = getelementptr inbounds double, double* %0, i64 %89
  %91 = load double, double* %90, align 8
  %92 = fmul double %91, %91
  %93 = fadd double %88, %92
  %94 = add nuw nsw i64 %68, 5
  %95 = getelementptr inbounds double, double* %0, i64 %94
  %96 = load double, double* %95, align 8
  %97 = fmul double %96, %96
  %98 = fadd double %93, %97
  %99 = add nuw nsw i64 %68, 6
  %100 = icmp eq i64 %99, 132
  br i1 %100, label %101, label %67

101:                                              ; preds = %67, %101
  %102 = phi i64 [ %133, %101 ], [ 132, %67 ]
  %103 = phi double [ %132, %101 ], [ 1.000000e-04, %67 ]
  %104 = getelementptr inbounds double, double* %0, i64 %102
  %105 = load double, double* %104, align 8
  %106 = fmul double %105, %105
  %107 = fadd double %103, %106
  %108 = or i64 %102, 1
  %109 = getelementptr inbounds double, double* %0, i64 %108
  %110 = load double, double* %109, align 8
  %111 = fmul double %110, %110
  %112 = fadd double %107, %111
  %113 = add nuw nsw i64 %102, 2
  %114 = getelementptr inbounds double, double* %0, i64 %113
  %115 = load double, double* %114, align 8
  %116 = fmul double %115, %115
  %117 = fadd double %112, %116
  %118 = add nuw nsw i64 %102, 3
  %119 = getelementptr inbounds double, double* %0, i64 %118
  %120 = load double, double* %119, align 8
  %121 = fmul double %120, %120
  %122 = fadd double %117, %121
  %123 = add nuw nsw i64 %102, 4
  %124 = getelementptr inbounds double, double* %0, i64 %123
  %125 = load double, double* %124, align 8
  %126 = fmul double %125, %125
  %127 = fadd double %122, %126
  %128 = add nuw nsw i64 %102, 5
  %129 = getelementptr inbounds double, double* %0, i64 %128
  %130 = load double, double* %129, align 8
  %131 = fmul double %130, %130
  %132 = fadd double %127, %131
  %133 = add nuw nsw i64 %102, 6
  %134 = icmp eq i64 %133, 192
  br i1 %134, label %135, label %101

135:                                              ; preds = %101, %135
  %136 = phi i64 [ %167, %135 ], [ 192, %101 ]
  %137 = phi double [ %166, %135 ], [ 1.000000e-04, %101 ]
  %138 = getelementptr inbounds double, double* %0, i64 %136
  %139 = load double, double* %138, align 8
  %140 = fmul double %139, %139
  %141 = fadd double %137, %140
  %142 = or i64 %136, 1
  %143 = getelementptr inbounds double, double* %0, i64 %142
  %144 = load double, double* %143, align 8
  %145 = fmul double %144, %144
  %146 = fadd double %141, %145
  %147 = add nuw nsw i64 %136, 2
  %148 = getelementptr inbounds double, double* %0, i64 %147
  %149 = load double, double* %148, align 8
  %150 = fmul double %149, %149
  %151 = fadd double %146, %150
  %152 = add nuw nsw i64 %136, 3
  %153 = getelementptr inbounds double, double* %0, i64 %152
  %154 = load double, double* %153, align 8
  %155 = fmul double %154, %154
  %156 = fadd double %151, %155
  %157 = add nuw nsw i64 %136, 4
  %158 = getelementptr inbounds double, double* %0, i64 %157
  %159 = load double, double* %158, align 8
  %160 = fmul double %159, %159
  %161 = fadd double %156, %160
  %162 = add nuw nsw i64 %136, 5
  %163 = getelementptr inbounds double, double* %0, i64 %162
  %164 = load double, double* %163, align 8
  %165 = fmul double %164, %164
  %166 = fadd double %161, %165
  %167 = add nuw nsw i64 %136, 6
  %168 = icmp eq i64 %167, 252
  br i1 %168, label %169, label %135

169:                                              ; preds = %135
  %170 = fdiv double %166, %132
  %171 = tail call double @log10(double %170) #6
  %172 = fmul double %171, 1.000000e+01
  %173 = tail call double @llvm.fabs.f64(double %172) #6
  %174 = fdiv double %132, %98
  %175 = tail call double @log10(double %174) #6
  %176 = fmul double %175, 1.000000e+01
  %177 = tail call double @llvm.fabs.f64(double %176) #6
  %178 = fadd double %173, %177
  %179 = fdiv double %98, %62
  %180 = tail call double @log10(double %179) #6
  %181 = fmul double %180, 1.000000e+01
  %182 = tail call double @llvm.fabs.f64(double %181) #6
  %183 = fadd double %178, %182
  %184 = load double, double* %66, align 8
  %185 = fdiv double %62, %184
  %186 = tail call double @log10(double %185) #6
  %187 = fmul double %186, 1.000000e+01
  %188 = tail call double @llvm.fabs.f64(double %187) #6
  %189 = fadd double %183, %188
  %190 = load i16, i16* %4, align 2
  %191 = sitofp i16 %190 to float
  %192 = fmul float %191, 0x3F30000000000000
  %193 = fpext float %192 to double
  %194 = fadd double %193, 0.000000e+00
  %195 = getelementptr inbounds i16, i16* %4, i64 1
  %196 = load i16, i16* %195, align 2
  %197 = sitofp i16 %196 to float
  %198 = fmul float %197, 0x3F30000000000000
  %199 = fpext float %198 to double
  %200 = fadd double %194, %199
  %201 = getelementptr inbounds i16, i16* %4, i64 2
  %202 = load i16, i16* %201, align 2
  %203 = sitofp i16 %202 to float
  %204 = fmul float %203, 0x3F30000000000000
  %205 = fpext float %204 to double
  %206 = fadd double %200, %205
  %207 = getelementptr inbounds i16, i16* %4, i64 3
  %208 = load i16, i16* %207, align 2
  %209 = sitofp i16 %208 to float
  %210 = fmul float %209, 0x3F30000000000000
  %211 = fpext float %210 to double
  %212 = fadd double %206, %211
  %213 = fmul double %189, 2.500000e-01
  %214 = fmul double %212, 2.500000e-01
  %215 = fmul double %214, -2.000000e+02
  %216 = fmul double %214, %215
  %217 = fmul double %214, %216
  %218 = tail call double @exp(double %217) #6
  %219 = fmul double %218, -1.400000e+00
  %220 = fmul double %213, 4.000000e-01
  %221 = fadd double %220, 1.000000e+00
  %222 = fdiv double %219, %221
  %223 = tail call double @exp(double %222) #6
  %224 = fadd double %223, 0.000000e+00
  store double %166, double* %66, align 8
  %225 = fmul double %224, 5.000000e-01
  %226 = fadd double %225, 5.000000e-01
  %227 = bitcast double* %0 to i64*
  %228 = load i64, i64* %227, align 8
  %229 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 232
  %230 = bitcast double* %229 to i64*
  store i64 %228, i64* %230, align 8
  %231 = getelementptr inbounds double, double* %0, i64 1
  %232 = bitcast double* %231 to i64*
  %233 = load i64, i64* %232, align 8
  %234 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 233
  %235 = bitcast double* %234 to i64*
  store i64 %233, i64* %235, align 8
  %236 = getelementptr inbounds double, double* %0, i64 2
  %237 = bitcast double* %236 to i64*
  %238 = load i64, i64* %237, align 8
  %239 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 234
  %240 = bitcast double* %239 to i64*
  store i64 %238, i64* %240, align 8
  %241 = getelementptr inbounds double, double* %0, i64 3
  %242 = bitcast double* %241 to i64*
  %243 = load i64, i64* %242, align 8
  %244 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 235
  %245 = bitcast double* %244 to i64*
  store i64 %243, i64* %245, align 8
  %246 = getelementptr inbounds double, double* %0, i64 4
  %247 = bitcast double* %246 to i64*
  %248 = load i64, i64* %247, align 8
  %249 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 236
  %250 = bitcast double* %249 to i64*
  store i64 %248, i64* %250, align 8
  %251 = getelementptr inbounds double, double* %0, i64 5
  %252 = bitcast double* %251 to i64*
  %253 = load i64, i64* %252, align 8
  %254 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 237
  %255 = bitcast double* %254 to i64*
  store i64 %253, i64* %255, align 8
  %256 = getelementptr inbounds double, double* %0, i64 6
  %257 = bitcast double* %256 to i64*
  %258 = load i64, i64* %257, align 8
  %259 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 238
  %260 = bitcast double* %259 to i64*
  store i64 %258, i64* %260, align 8
  %261 = getelementptr inbounds double, double* %0, i64 7
  %262 = bitcast double* %261 to i64*
  %263 = load i64, i64* %262, align 8
  %264 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 239
  %265 = bitcast double* %264 to i64*
  store i64 %263, i64* %265, align 8
  %266 = getelementptr inbounds double, double* %0, i64 8
  %267 = bitcast double* %266 to i64*
  %268 = load i64, i64* %267, align 8
  %269 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 240
  %270 = bitcast double* %269 to i64*
  store i64 %268, i64* %270, align 8
  %271 = getelementptr inbounds double, double* %0, i64 9
  %272 = bitcast double* %271 to i64*
  %273 = load i64, i64* %272, align 8
  %274 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 241
  %275 = bitcast double* %274 to i64*
  store i64 %273, i64* %275, align 8
  %276 = getelementptr inbounds double, double* %0, i64 10
  %277 = bitcast double* %276 to i64*
  %278 = load i64, i64* %277, align 8
  %279 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 242
  %280 = bitcast double* %279 to i64*
  store i64 %278, i64* %280, align 8
  %281 = getelementptr inbounds double, double* %0, i64 11
  %282 = bitcast double* %281 to i64*
  %283 = load i64, i64* %282, align 8
  %284 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 243
  %285 = bitcast double* %284 to i64*
  store i64 %283, i64* %285, align 8
  %286 = getelementptr inbounds double, double* %0, i64 12
  %287 = bitcast double* %286 to i64*
  %288 = load i64, i64* %287, align 8
  %289 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 244
  %290 = bitcast double* %289 to i64*
  store i64 %288, i64* %290, align 8
  %291 = getelementptr inbounds double, double* %0, i64 13
  %292 = bitcast double* %291 to i64*
  %293 = load i64, i64* %292, align 8
  %294 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 245
  %295 = bitcast double* %294 to i64*
  store i64 %293, i64* %295, align 8
  %296 = getelementptr inbounds double, double* %0, i64 14
  %297 = bitcast double* %296 to i64*
  %298 = load i64, i64* %297, align 8
  %299 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 246
  %300 = bitcast double* %299 to i64*
  store i64 %298, i64* %300, align 8
  %301 = getelementptr inbounds double, double* %0, i64 15
  %302 = bitcast double* %301 to i64*
  %303 = load i64, i64* %302, align 8
  %304 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 247
  %305 = bitcast double* %304 to i64*
  store i64 %303, i64* %305, align 8
  %306 = getelementptr inbounds double, double* %0, i64 16
  %307 = bitcast double* %306 to i64*
  %308 = load i64, i64* %307, align 8
  %309 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 248
  %310 = bitcast double* %309 to i64*
  store i64 %308, i64* %310, align 8
  %311 = getelementptr inbounds double, double* %0, i64 17
  %312 = bitcast double* %311 to i64*
  %313 = load i64, i64* %312, align 8
  %314 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 249
  %315 = bitcast double* %314 to i64*
  store i64 %313, i64* %315, align 8
  %316 = getelementptr inbounds double, double* %0, i64 18
  %317 = bitcast double* %316 to i64*
  %318 = load i64, i64* %317, align 8
  %319 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 250
  %320 = bitcast double* %319 to i64*
  store i64 %318, i64* %320, align 8
  %321 = getelementptr inbounds double, double* %0, i64 19
  %322 = bitcast double* %321 to i64*
  %323 = load i64, i64* %322, align 8
  %324 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 251
  %325 = bitcast double* %324 to i64*
  store i64 %323, i64* %325, align 8
  %326 = getelementptr inbounds double, double* %0, i64 20
  %327 = bitcast double* %326 to i64*
  %328 = load i64, i64* %327, align 8
  %329 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 252
  %330 = bitcast double* %329 to i64*
  store i64 %328, i64* %330, align 8
  %331 = getelementptr inbounds double, double* %0, i64 21
  %332 = bitcast double* %331 to i64*
  %333 = load i64, i64* %332, align 8
  %334 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 253
  %335 = bitcast double* %334 to i64*
  store i64 %333, i64* %335, align 8
  %336 = getelementptr inbounds double, double* %0, i64 22
  %337 = bitcast double* %336 to i64*
  %338 = load i64, i64* %337, align 8
  %339 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 254
  %340 = bitcast double* %339 to i64*
  store i64 %338, i64* %340, align 8
  %341 = getelementptr inbounds double, double* %0, i64 23
  %342 = bitcast double* %341 to i64*
  %343 = load i64, i64* %342, align 8
  %344 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 255
  %345 = bitcast double* %344 to i64*
  store i64 %343, i64* %345, align 8
  %346 = fmul double %226, 3.500000e-01
  %347 = getelementptr inbounds [14 x double], [14 x double]* %10, i64 0, i64 0
  %348 = getelementptr inbounds [256 x double], [256 x double]* %8, i64 0, i64 0
  %349 = getelementptr inbounds [7 x double], [7 x double]* %12, i64 0, i64 0
  %350 = getelementptr inbounds [256 x double], [256 x double]* %9, i64 0, i64 0
  %351 = fmul double %346, %346
  %352 = fadd double %351, 1.000000e+00
  %353 = fmul double %346, 2.000000e+00
  %354 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 0
  %355 = fadd double %346, 1.000000e+00
  %356 = fmul double %355, %355
  %357 = getelementptr inbounds [13 x double], [13 x double]* %15, i64 0, i64 0
  %358 = getelementptr inbounds [12 x double], [12 x double]* %13, i64 0, i64 0
  %359 = getelementptr inbounds [7 x double], [7 x double]* %16, i64 0, i64 0
  %360 = getelementptr inbounds [7 x double], [7 x double]* %16, i64 0, i64 1
  %361 = bitcast double* %360 to i64*
  %362 = getelementptr inbounds [14 x double], [14 x double]* %10, i64 0, i64 2
  %363 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 2
  %364 = getelementptr inbounds [14 x double], [14 x double]* %10, i64 0, i64 4
  %365 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 4
  %366 = getelementptr inbounds [14 x double], [14 x double]* %10, i64 0, i64 6
  %367 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 6
  %368 = getelementptr inbounds [14 x double], [14 x double]* %10, i64 0, i64 8
  %369 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 8
  %370 = getelementptr inbounds [14 x double], [14 x double]* %10, i64 0, i64 10
  %371 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 10
  %372 = getelementptr inbounds [14 x double], [14 x double]* %10, i64 0, i64 12
  %373 = getelementptr inbounds [14 x double], [14 x double]* %10, i64 0, i64 13
  %374 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 12
  %375 = getelementptr inbounds [7 x double], [7 x double]* %12, i64 0, i64 1
  %376 = getelementptr inbounds [7 x double], [7 x double]* %12, i64 0, i64 2
  %377 = getelementptr inbounds [7 x double], [7 x double]* %12, i64 0, i64 4
  %378 = getelementptr inbounds [7 x double], [7 x double]* %12, i64 0, i64 6
  %379 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 3, i64 0
  %380 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 3, i64 2
  %381 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 3, i64 4
  %382 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 3, i64 6
  %383 = getelementptr inbounds [13 x double], [13 x double]* %15, i64 0, i64 1
  %384 = getelementptr inbounds [13 x double], [13 x double]* %15, i64 0, i64 2
  %385 = getelementptr inbounds [13 x double], [13 x double]* %15, i64 0, i64 3
  %386 = getelementptr inbounds [13 x double], [13 x double]* %15, i64 0, i64 4
  %387 = getelementptr inbounds [13 x double], [13 x double]* %15, i64 0, i64 5
  %388 = getelementptr inbounds [13 x double], [13 x double]* %15, i64 0, i64 6
  %389 = getelementptr inbounds [13 x double], [13 x double]* %15, i64 0, i64 7
  %390 = getelementptr inbounds [13 x double], [13 x double]* %15, i64 0, i64 8
  %391 = getelementptr inbounds [13 x double], [13 x double]* %15, i64 0, i64 9
  %392 = getelementptr inbounds [13 x double], [13 x double]* %15, i64 0, i64 10
  %393 = getelementptr inbounds [13 x double], [13 x double]* %15, i64 0, i64 11
  %394 = getelementptr inbounds [13 x double], [13 x double]* %15, i64 0, i64 12
  %395 = bitcast double* %383 to i64*
  %396 = bitcast double* %384 to i64*
  %397 = bitcast double* %385 to i64*
  %398 = bitcast double* %386 to i64*
  %399 = bitcast double* %387 to i64*
  %400 = bitcast double* %388 to i64*
  %401 = bitcast double* %389 to i64*
  %402 = bitcast double* %390 to i64*
  %403 = bitcast double* %391 to i64*
  %404 = bitcast double* %392 to i64*
  %405 = bitcast double* %393 to i64*
  %406 = bitcast double* %394 to i64*
  %407 = getelementptr inbounds [7 x double], [7 x double]* %16, i64 0, i64 2
  %408 = getelementptr inbounds [7 x double], [7 x double]* %16, i64 0, i64 3
  %409 = getelementptr inbounds [7 x double], [7 x double]* %16, i64 0, i64 4
  %410 = getelementptr inbounds [7 x double], [7 x double]* %16, i64 0, i64 5
  %411 = getelementptr inbounds [7 x double], [7 x double]* %16, i64 0, i64 6
  %412 = bitcast double* %407 to i64*
  %413 = bitcast double* %408 to i64*
  %414 = bitcast double* %409 to i64*
  %415 = bitcast double* %410 to i64*
  %416 = bitcast double* %411 to i64*
  %417 = getelementptr %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 216
  %418 = getelementptr %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 2, i64 0
  %419 = insertelement <2 x double> undef, double %356, i32 0
  %420 = shufflevector <2 x double> %419, <2 x double> undef, <2 x i32> zeroinitializer
  %421 = insertelement <2 x double> undef, double %356, i32 0
  %422 = shufflevector <2 x double> %421, <2 x double> undef, <2 x i32> zeroinitializer
  %423 = insertelement <2 x double> undef, double %352, i32 0
  %424 = shufflevector <2 x double> %423, <2 x double> undef, <2 x i32> zeroinitializer
  %425 = insertelement <2 x double> undef, double %353, i32 0
  %426 = insertelement <2 x double> %425, double %346, i32 1
  %427 = insertelement <2 x double> undef, double %352, i32 0
  %428 = shufflevector <2 x double> %427, <2 x double> undef, <2 x i32> zeroinitializer
  %429 = insertelement <2 x double> undef, double %346, i32 0
  %430 = shufflevector <2 x double> %429, <2 x double> undef, <2 x i32> zeroinitializer
  %431 = insertelement <2 x double> undef, double %352, i32 0
  %432 = shufflevector <2 x double> %431, <2 x double> undef, <2 x i32> zeroinitializer
  %433 = insertelement <2 x double> undef, double %346, i32 0
  %434 = shufflevector <2 x double> %433, <2 x double> undef, <2 x i32> zeroinitializer
  %435 = insertelement <2 x double> undef, double %352, i32 0
  %436 = shufflevector <2 x double> %435, <2 x double> undef, <2 x i32> zeroinitializer
  %437 = insertelement <2 x double> undef, double %346, i32 0
  %438 = shufflevector <2 x double> %437, <2 x double> undef, <2 x i32> zeroinitializer
  %439 = insertelement <2 x double> undef, double %352, i32 0
  %440 = shufflevector <2 x double> %439, <2 x double> undef, <2 x i32> zeroinitializer
  %441 = insertelement <2 x double> undef, double %346, i32 0
  %442 = shufflevector <2 x double> %441, <2 x double> undef, <2 x i32> zeroinitializer
  %443 = insertelement <2 x double> undef, double %352, i32 0
  %444 = shufflevector <2 x double> %443, <2 x double> undef, <2 x i32> zeroinitializer
  %445 = insertelement <2 x double> undef, double %346, i32 0
  %446 = shufflevector <2 x double> %445, <2 x double> undef, <2 x i32> zeroinitializer
  %447 = bitcast [14 x double]* %10 to <2 x double>*
  %448 = bitcast double* %362 to <2 x double>*
  %449 = bitcast [13 x double]* %11 to <2 x double>*
  %450 = bitcast double* %364 to <2 x double>*
  %451 = bitcast double* %363 to <2 x double>*
  %452 = bitcast double* %366 to <2 x double>*
  %453 = bitcast double* %365 to <2 x double>*
  %454 = bitcast double* %368 to <2 x double>*
  %455 = bitcast double* %367 to <2 x double>*
  %456 = bitcast double* %370 to <2 x double>*
  %457 = bitcast double* %369 to <2 x double>*
  %458 = bitcast double* %371 to <2 x double>*
  %459 = bitcast double* %376 to <2 x double>*
  %460 = bitcast double* %376 to <2 x double>*
  %461 = bitcast double* %377 to <2 x double>*
  %462 = bitcast double* %377 to <2 x double>*
  %463 = bitcast [7 x double]* %12 to <2 x double>*
  %464 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 2, i64 0
  %465 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 0
  %466 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 1
  %467 = bitcast double* %466 to <2 x double>*
  %468 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 2, i64 1
  %469 = bitcast double* %468 to <2 x double>*
  %470 = bitcast double* %468 to <2 x double>*
  %471 = bitcast double* %466 to <2 x double>*
  %472 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 3
  %473 = bitcast double* %472 to <2 x double>*
  %474 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 2, i64 3
  %475 = bitcast double* %474 to <2 x double>*
  %476 = bitcast double* %474 to <2 x double>*
  %477 = bitcast double* %472 to <2 x double>*
  %478 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 5
  %479 = bitcast double* %478 to <2 x double>*
  %480 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 2, i64 5
  %481 = bitcast double* %480 to <2 x double>*
  %482 = bitcast double* %480 to <2 x double>*
  %483 = bitcast double* %478 to <2 x double>*
  %484 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 7
  %485 = bitcast double* %484 to <2 x double>*
  %486 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 2, i64 7
  %487 = bitcast double* %486 to <2 x double>*
  %488 = bitcast double* %486 to <2 x double>*
  %489 = bitcast double* %484 to <2 x double>*
  %490 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 9
  %491 = bitcast double* %490 to <2 x double>*
  %492 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 2, i64 9
  %493 = bitcast double* %492 to <2 x double>*
  %494 = bitcast double* %492 to <2 x double>*
  %495 = bitcast double* %490 to <2 x double>*
  %496 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 11
  %497 = bitcast double* %496 to <2 x double>*
  %498 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 2, i64 11
  %499 = bitcast double* %498 to <2 x double>*
  %500 = bitcast double* %498 to <2 x double>*
  %501 = bitcast double* %496 to <2 x double>*
  %502 = bitcast double* %379 to <2 x double>*
  %503 = bitcast double* %379 to <2 x double>*
  %504 = bitcast [7 x double]* %12 to <2 x double>*
  %505 = bitcast double* %380 to <2 x double>*
  %506 = bitcast double* %380 to <2 x double>*
  %507 = bitcast double* %376 to <2 x double>*
  %508 = bitcast double* %381 to <2 x double>*
  %509 = bitcast double* %381 to <2 x double>*
  %510 = bitcast double* %377 to <2 x double>*
  %511 = bitcast double* %383 to <2 x double>*
  %512 = bitcast double* %383 to <2 x double>*
  %513 = bitcast double* %385 to <2 x double>*
  %514 = bitcast double* %385 to <2 x double>*
  %515 = bitcast double* %387 to <2 x double>*
  %516 = bitcast double* %387 to <2 x double>*
  %517 = bitcast double* %389 to <2 x double>*
  %518 = bitcast double* %389 to <2 x double>*
  %519 = bitcast double* %391 to <2 x double>*
  %520 = bitcast double* %391 to <2 x double>*
  %521 = bitcast double* %393 to <2 x double>*
  %522 = bitcast double* %393 to <2 x double>*
  %523 = bitcast double* %360 to <2 x double>*
  %524 = bitcast double* %360 to <2 x double>*
  %525 = bitcast double* %408 to <2 x double>*
  %526 = bitcast double* %408 to <2 x double>*
  %527 = bitcast double* %410 to <2 x double>*
  %528 = bitcast double* %410 to <2 x double>*
  %529 = getelementptr inbounds [7 x double], [7 x double]* %16, i64 0, i64 0
  %530 = getelementptr inbounds [7 x double], [7 x double]* %16, i64 0, i64 1
  %531 = getelementptr inbounds [7 x double], [7 x double]* %16, i64 0, i64 2
  %532 = getelementptr inbounds [7 x double], [7 x double]* %16, i64 0, i64 3
  %533 = getelementptr inbounds [7 x double], [7 x double]* %16, i64 0, i64 4
  %534 = getelementptr inbounds [7 x double], [7 x double]* %16, i64 0, i64 5
  %535 = getelementptr inbounds [7 x double], [7 x double]* %16, i64 0, i64 6
  br label %536

536:                                              ; preds = %1000, %169
  %537 = phi i64 [ %1028, %1000 ], [ 0, %169 ]
  %538 = phi i64 [ %1026, %1000 ], [ 0, %169 ]
  %539 = phi double* [ %1024, %1000 ], [ %5, %169 ]
  %540 = phi double* [ %1023, %1000 ], [ %6, %169 ]
  %541 = phi i32 [ %1025, %1000 ], [ 0, %169 ]
  %542 = mul nuw nsw i64 %537, 40
  %543 = add i64 %542, 24
  %544 = getelementptr double, double* %0, i64 %543
  %545 = add i64 %542, 64
  %546 = getelementptr double, double* %0, i64 %545
  %547 = getelementptr double, double* %1, i64 %542
  %548 = add i64 %542, 40
  %549 = getelementptr double, double* %1, i64 %548
  br label %550

550:                                              ; preds = %550, %536
  %551 = phi i64 [ 0, %536 ], [ %574, %550 ]
  %552 = add nuw nsw i64 %551, 40
  %553 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 %552
  %554 = bitcast double* %553 to <2 x i64>*
  %555 = load <2 x i64>, <2 x i64>* %554, align 8
  %556 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 %551
  %557 = bitcast double* %556 to <2 x i64>*
  store <2 x i64> %555, <2 x i64>* %557, align 8
  %558 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 1, i64 %552
  %559 = bitcast double* %558 to <2 x i64>*
  %560 = load <2 x i64>, <2 x i64>* %559, align 8
  %561 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 1, i64 %551
  %562 = bitcast double* %561 to <2 x i64>*
  store <2 x i64> %560, <2 x i64>* %562, align 8
  %563 = bitcast <2 x i64> %555 to <2 x double>
  %564 = getelementptr inbounds [256 x double], [256 x double]* @kLpcCorrWindow, i64 0, i64 %551
  %565 = bitcast double* %564 to <2 x double>*
  %566 = load <2 x double>, <2 x double>* %565, align 16
  %567 = fmul <2 x double> %566, %563
  %568 = getelementptr inbounds [256 x double], [256 x double]* %8, i64 0, i64 %551
  %569 = bitcast double* %568 to <2 x double>*
  store <2 x double> %567, <2 x double>* %569, align 16
  %570 = bitcast <2 x i64> %560 to <2 x double>
  %571 = fmul <2 x double> %566, %570
  %572 = getelementptr inbounds [256 x double], [256 x double]* %9, i64 0, i64 %551
  %573 = bitcast double* %572 to <2 x double>*
  store <2 x double> %571, <2 x double>* %573, align 16
  %574 = add i64 %551, 2
  %575 = icmp eq i64 %574, 216
  br i1 %575, label %576, label %550, !llvm.loop !2

576:                                              ; preds = %550
  %577 = icmp ult double* %417, %546
  %578 = icmp ult double* %544, %418
  %579 = and i1 %577, %578
  %580 = icmp ult double* %417, %549
  %581 = icmp ult double* %547, %418
  %582 = and i1 %580, %581
  %583 = or i1 %579, %582
  br i1 %583, label %612, label %584

584:                                              ; preds = %576, %584
  %585 = phi i64 [ %610, %584 ], [ 0, %576 ]
  %586 = add i64 %585, 216
  %587 = add i64 %538, %585
  %588 = add nuw nsw i64 %587, 24
  %589 = getelementptr inbounds double, double* %0, i64 %588
  %590 = bitcast double* %589 to <2 x i64>*
  %591 = load <2 x i64>, <2 x i64>* %590, align 8, !alias.scope !4
  %592 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 %586
  %593 = bitcast double* %592 to <2 x i64>*
  store <2 x i64> %591, <2 x i64>* %593, align 8, !alias.scope !7, !noalias !9
  %594 = getelementptr inbounds double, double* %1, i64 %587
  %595 = bitcast double* %594 to <2 x i64>*
  %596 = load <2 x i64>, <2 x i64>* %595, align 8, !alias.scope !11
  %597 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 1, i64 %586
  %598 = bitcast double* %597 to <2 x i64>*
  store <2 x i64> %596, <2 x i64>* %598, align 8, !alias.scope !7, !noalias !9
  %599 = bitcast <2 x i64> %591 to <2 x double>
  %600 = getelementptr inbounds [256 x double], [256 x double]* @kLpcCorrWindow, i64 0, i64 %586
  %601 = bitcast double* %600 to <2 x double>*
  %602 = load <2 x double>, <2 x double>* %601, align 16, !alias.scope !12
  %603 = fmul <2 x double> %602, %599
  %604 = getelementptr inbounds [256 x double], [256 x double]* %8, i64 0, i64 %586
  %605 = bitcast double* %604 to <2 x double>*
  store <2 x double> %603, <2 x double>* %605, align 16, !alias.scope !14
  %606 = bitcast <2 x i64> %596 to <2 x double>
  %607 = fmul <2 x double> %602, %606
  %608 = getelementptr inbounds [256 x double], [256 x double]* %9, i64 0, i64 %586
  %609 = bitcast double* %608 to <2 x double>*
  store <2 x double> %607, <2 x double>* %609, align 16, !alias.scope !16
  %610 = add i64 %585, 2
  %611 = icmp eq i64 %610, 40
  br i1 %611, label %637, label %584, !llvm.loop !18

612:                                              ; preds = %576, %612
  %613 = phi i64 [ %635, %612 ], [ 216, %576 ]
  %614 = phi i64 [ %621, %612 ], [ %538, %576 ]
  %615 = add nuw nsw i64 %614, 24
  %616 = getelementptr inbounds double, double* %0, i64 %615
  %617 = bitcast double* %616 to i64*
  %618 = load i64, i64* %617, align 8
  %619 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 0, i64 %613
  %620 = bitcast double* %619 to i64*
  store i64 %618, i64* %620, align 8
  %621 = add nuw nsw i64 %614, 1
  %622 = getelementptr inbounds double, double* %1, i64 %614
  %623 = bitcast double* %622 to i64*
  %624 = load i64, i64* %623, align 8
  %625 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %2, i64 0, i32 1, i64 %613
  %626 = bitcast double* %625 to i64*
  store i64 %624, i64* %626, align 8
  %627 = bitcast i64 %618 to double
  %628 = getelementptr inbounds [256 x double], [256 x double]* @kLpcCorrWindow, i64 0, i64 %613
  %629 = load double, double* %628, align 8
  %630 = fmul double %629, %627
  %631 = getelementptr inbounds [256 x double], [256 x double]* %8, i64 0, i64 %613
  store double %630, double* %631, align 8
  %632 = bitcast i64 %624 to double
  %633 = fmul double %629, %632
  %634 = getelementptr inbounds [256 x double], [256 x double]* %9, i64 0, i64 %613
  store double %633, double* %634, align 8
  %635 = add nuw nsw i64 %613, 1
  %636 = icmp eq i64 %635, 256
  br i1 %636, label %637, label %612, !llvm.loop !19

637:                                              ; preds = %584, %612
  call void @WebRtcIsac_AutoCorr(double* nonnull %347, double* nonnull %348, i64 256, i64 13) #6
  call void @WebRtcIsac_AutoCorr(double* nonnull %349, double* nonnull %350, i64 256, i64 6) #6
  %638 = load <2 x double>, <2 x double>* %447, align 16
  %639 = fmul <2 x double> %424, %638
  %640 = extractelement <2 x double> %638, i32 0
  %641 = load <2 x double>, <2 x double>* %448, align 16
  %642 = extractelement <2 x double> %641, i32 0
  %643 = fadd double %640, %642
  %644 = shufflevector <2 x double> %638, <2 x double> undef, <2 x i32> <i32 1, i32 undef>
  %645 = insertelement <2 x double> %644, double %643, i32 1
  %646 = fmul <2 x double> %426, %645
  %647 = fsub <2 x double> %639, %646
  store <2 x double> %647, <2 x double>* %449, align 16
  %648 = fmul <2 x double> %428, %641
  %649 = shufflevector <2 x double> %644, <2 x double> %641, <2 x i32> <i32 0, i32 2>
  %650 = load <2 x double>, <2 x double>* %450, align 16
  %651 = shufflevector <2 x double> %641, <2 x double> %650, <2 x i32> <i32 1, i32 2>
  %652 = fadd <2 x double> %649, %651
  %653 = fmul <2 x double> %430, %652
  %654 = fsub <2 x double> %648, %653
  store <2 x double> %654, <2 x double>* %451, align 16
  %655 = fmul <2 x double> %432, %650
  %656 = load <2 x double>, <2 x double>* %452, align 16
  %657 = shufflevector <2 x double> %650, <2 x double> %656, <2 x i32> <i32 1, i32 2>
  %658 = fadd <2 x double> %651, %657
  %659 = fmul <2 x double> %434, %658
  %660 = fsub <2 x double> %655, %659
  store <2 x double> %660, <2 x double>* %453, align 16
  %661 = fmul <2 x double> %436, %656
  %662 = load <2 x double>, <2 x double>* %454, align 16
  %663 = shufflevector <2 x double> %656, <2 x double> %662, <2 x i32> <i32 1, i32 2>
  %664 = fadd <2 x double> %657, %663
  %665 = fmul <2 x double> %438, %664
  %666 = fsub <2 x double> %661, %665
  store <2 x double> %666, <2 x double>* %455, align 16
  %667 = fmul <2 x double> %440, %662
  %668 = load <2 x double>, <2 x double>* %456, align 16
  %669 = shufflevector <2 x double> %662, <2 x double> %668, <2 x i32> <i32 1, i32 2>
  %670 = fadd <2 x double> %663, %669
  %671 = fmul <2 x double> %442, %670
  %672 = fsub <2 x double> %667, %671
  store <2 x double> %672, <2 x double>* %457, align 16
  %673 = fmul <2 x double> %444, %668
  %674 = load double, double* %372, align 16
  %675 = extractelement <2 x double> %668, i32 1
  %676 = insertelement <2 x double> undef, double %675, i32 0
  %677 = insertelement <2 x double> %676, double %674, i32 1
  %678 = fadd <2 x double> %669, %677
  %679 = fmul <2 x double> %446, %678
  %680 = fsub <2 x double> %673, %679
  store <2 x double> %680, <2 x double>* %458, align 16
  %681 = fmul double %352, %674
  %682 = load double, double* %373, align 8
  %683 = fadd double %675, %682
  %684 = fmul double %346, %683
  %685 = fsub double %681, %684
  store double %685, double* %374, align 16
  %686 = load double, double* %349, align 16
  %687 = fmul double %356, %686
  %688 = load double, double* %375, align 8
  %689 = insertelement <2 x double> undef, double %687, i32 0
  %690 = insertelement <2 x double> %689, double %356, i32 1
  %691 = insertelement <2 x double> <double 0x3EB0C6F7A0B5ED8D, double undef>, double %688, i32 1
  %692 = fadd <2 x double> %690, %691
  %693 = fmul <2 x double> %690, %691
  %694 = shufflevector <2 x double> %692, <2 x double> %693, <2 x i32> <i32 0, i32 3>
  %695 = load <2 x double>, <2 x double>* %459, align 16
  %696 = fmul <2 x double> %420, %695
  store <2 x double> %696, <2 x double>* %460, align 16
  %697 = load <2 x double>, <2 x double>* %461, align 16
  %698 = fmul <2 x double> %422, %697
  store <2 x double> %698, <2 x double>* %462, align 16
  %699 = load double, double* %378, align 16
  %700 = fmul double %356, %699
  store double %700, double* %378, align 16
  %701 = load double, double* %354, align 16
  %702 = fadd double %701, 0x3EB0C6F7A0B5ED8D
  store double %702, double* %354, align 16
  store <2 x double> %694, <2 x double>* %463, align 16
  %703 = load double, double* %464, align 8
  %704 = fmul double %703, 1.000000e-02
  %705 = fadd double %704, %702
  store double %705, double* %464, align 8
  %706 = fmul double %705, 9.900000e-03
  %707 = fmul double %702, 0x3FEFAE147AE147AE
  %708 = fadd double %707, %706
  store double %708, double* %465, align 16
  %709 = load <2 x double>, <2 x double>* %467, align 8
  %710 = load <2 x double>, <2 x double>* %469, align 8
  %711 = fmul <2 x double> %710, <double 1.000000e-02, double 1.000000e-02>
  %712 = fadd <2 x double> %711, %709
  store <2 x double> %712, <2 x double>* %470, align 8
  %713 = fmul <2 x double> %712, <double 9.900000e-03, double 9.900000e-03>
  %714 = fmul <2 x double> %709, <double 0x3FEFAE147AE147AE, double 0x3FEFAE147AE147AE>
  %715 = fadd <2 x double> %714, %713
  store <2 x double> %715, <2 x double>* %471, align 8
  %716 = load <2 x double>, <2 x double>* %473, align 8
  %717 = load <2 x double>, <2 x double>* %475, align 8
  %718 = fmul <2 x double> %717, <double 1.000000e-02, double 1.000000e-02>
  %719 = fadd <2 x double> %718, %716
  store <2 x double> %719, <2 x double>* %476, align 8
  %720 = fmul <2 x double> %719, <double 9.900000e-03, double 9.900000e-03>
  %721 = fmul <2 x double> %716, <double 0x3FEFAE147AE147AE, double 0x3FEFAE147AE147AE>
  %722 = fadd <2 x double> %721, %720
  store <2 x double> %722, <2 x double>* %477, align 8
  %723 = load <2 x double>, <2 x double>* %479, align 8
  %724 = load <2 x double>, <2 x double>* %481, align 8
  %725 = fmul <2 x double> %724, <double 1.000000e-02, double 1.000000e-02>
  %726 = fadd <2 x double> %725, %723
  store <2 x double> %726, <2 x double>* %482, align 8
  %727 = fmul <2 x double> %726, <double 9.900000e-03, double 9.900000e-03>
  %728 = fmul <2 x double> %723, <double 0x3FEFAE147AE147AE, double 0x3FEFAE147AE147AE>
  %729 = fadd <2 x double> %728, %727
  store <2 x double> %729, <2 x double>* %483, align 8
  %730 = load <2 x double>, <2 x double>* %485, align 8
  %731 = load <2 x double>, <2 x double>* %487, align 8
  %732 = fmul <2 x double> %731, <double 1.000000e-02, double 1.000000e-02>
  %733 = fadd <2 x double> %732, %730
  store <2 x double> %733, <2 x double>* %488, align 8
  %734 = fmul <2 x double> %733, <double 9.900000e-03, double 9.900000e-03>
  %735 = fmul <2 x double> %730, <double 0x3FEFAE147AE147AE, double 0x3FEFAE147AE147AE>
  %736 = fadd <2 x double> %735, %734
  store <2 x double> %736, <2 x double>* %489, align 8
  %737 = load <2 x double>, <2 x double>* %491, align 8
  %738 = load <2 x double>, <2 x double>* %493, align 8
  %739 = fmul <2 x double> %738, <double 1.000000e-02, double 1.000000e-02>
  %740 = fadd <2 x double> %739, %737
  store <2 x double> %740, <2 x double>* %494, align 8
  %741 = fmul <2 x double> %740, <double 9.900000e-03, double 9.900000e-03>
  %742 = fmul <2 x double> %737, <double 0x3FEFAE147AE147AE, double 0x3FEFAE147AE147AE>
  %743 = fadd <2 x double> %742, %741
  store <2 x double> %743, <2 x double>* %495, align 8
  %744 = load <2 x double>, <2 x double>* %497, align 8
  %745 = load <2 x double>, <2 x double>* %499, align 8
  %746 = fmul <2 x double> %745, <double 1.000000e-02, double 1.000000e-02>
  %747 = fadd <2 x double> %746, %744
  store <2 x double> %747, <2 x double>* %500, align 8
  %748 = fmul <2 x double> %747, <double 9.900000e-03, double 9.900000e-03>
  %749 = fmul <2 x double> %744, <double 0x3FEFAE147AE147AE, double 0x3FEFAE147AE147AE>
  %750 = fadd <2 x double> %749, %748
  store <2 x double> %750, <2 x double>* %501, align 8
  %751 = load <2 x double>, <2 x double>* %502, align 8
  %752 = fmul <2 x double> %751, <double 1.000000e-02, double 1.000000e-02>
  %753 = fadd <2 x double> %752, %694
  store <2 x double> %753, <2 x double>* %503, align 8
  %754 = fmul <2 x double> %753, <double 9.900000e-03, double 9.900000e-03>
  %755 = fmul <2 x double> %694, <double 0x3FEFAE147AE147AE, double 0x3FEFAE147AE147AE>
  %756 = fadd <2 x double> %755, %754
  store <2 x double> %756, <2 x double>* %504, align 16
  %757 = load <2 x double>, <2 x double>* %505, align 8
  %758 = fmul <2 x double> %757, <double 1.000000e-02, double 1.000000e-02>
  %759 = fadd <2 x double> %758, %696
  store <2 x double> %759, <2 x double>* %506, align 8
  %760 = fmul <2 x double> %759, <double 9.900000e-03, double 9.900000e-03>
  %761 = fmul <2 x double> %696, <double 0x3FEFAE147AE147AE, double 0x3FEFAE147AE147AE>
  %762 = fadd <2 x double> %761, %760
  store <2 x double> %762, <2 x double>* %507, align 16
  %763 = load <2 x double>, <2 x double>* %508, align 8
  %764 = fmul <2 x double> %763, <double 1.000000e-02, double 1.000000e-02>
  %765 = fadd <2 x double> %764, %698
  store <2 x double> %765, <2 x double>* %509, align 8
  %766 = fmul <2 x double> %765, <double 9.900000e-03, double 9.900000e-03>
  %767 = fmul <2 x double> %698, <double 0x3FEFAE147AE147AE, double 0x3FEFAE147AE147AE>
  %768 = fadd <2 x double> %767, %766
  store <2 x double> %768, <2 x double>* %510, align 16
  %769 = load double, double* %382, align 8
  %770 = fmul double %769, 1.000000e-02
  %771 = fadd double %770, %700
  store double %771, double* %382, align 8
  %772 = fmul double %771, 9.900000e-03
  %773 = fmul double %700, 0x3FEFAE147AE147AE
  %774 = fadd double %773, %772
  store double %774, double* %378, align 16
  %775 = call double @WebRtcIsac_LevDurb(double* nonnull %357, double* nonnull %358, double* nonnull %354, i64 12) #6
  %776 = call double @WebRtcIsac_LevDurb(double* nonnull %359, double* nonnull %24, double* nonnull %349, i64 6) #6
  %777 = load <2 x double>, <2 x double>* %511, align 8
  %778 = fmul <2 x double> %777, <double 9.000000e-01, double 8.100000e-01>
  store <2 x double> %778, <2 x double>* %512, align 8
  %779 = load <2 x double>, <2 x double>* %513, align 8
  %780 = fmul <2 x double> %779, <double 0x3FE753F7CED91688, double 0x3FE4FEC56D5CFAAE>
  store <2 x double> %780, <2 x double>* %514, align 8
  %781 = load <2 x double>, <2 x double>* %515, align 8
  %782 = fmul <2 x double> %781, <double 0x3FE2E54B48D3AE6A, double 0x3FE101908E581CF9>
  store <2 x double> %782, <2 x double>* %516, align 8
  %783 = load <2 x double>, <2 x double>* %517, align 8
  %784 = fmul <2 x double> %783, <double 0x3FDE9C6A99D1CDC0, double 0x3FDB8CC6573CD2C7>
  store <2 x double> %784, <2 x double>* %518, align 8
  %785 = load <2 x double>, <2 x double>* %519, align 8
  %786 = fmul <2 x double> %785, <double 0x3FD8CB7F4E838A80, double 0x3FD650BF60432FDA>
  store <2 x double> %786, <2 x double>* %520, align 8
  %787 = load <2 x double>, <2 x double>* %521, align 8
  %788 = fmul <2 x double> %787, <double 0x3FD4157909D61178, double 0x3FD2135355A70FB9>
  store <2 x double> %788, <2 x double>* %522, align 8
  br label %793

789:                                              ; preds = %859, %864, %842
  %790 = phi double [ %843, %842 ], [ %860, %859 ], [ %883, %864 ]
  %791 = add nuw nsw i64 %795, 1
  %792 = icmp eq i64 %844, 13
  br i1 %792, label %886, label %793

793:                                              ; preds = %789, %637
  %794 = phi i64 [ 0, %637 ], [ %844, %789 ]
  %795 = phi i64 [ 1, %637 ], [ %791, %789 ]
  %796 = phi double [ 0.000000e+00, %637 ], [ %790, %789 ]
  %797 = add nuw i64 %794, 1
  %798 = getelementptr inbounds [13 x double], [13 x double]* %15, i64 0, i64 %794
  %799 = load double, double* %798, align 8
  %800 = and i64 %797, 1
  %801 = icmp eq i64 %794, 0
  br i1 %801, label %828, label %802

802:                                              ; preds = %793
  %803 = sub nuw i64 %797, %800
  br label %804

804:                                              ; preds = %804, %802
  %805 = phi i64 [ 0, %802 ], [ %825, %804 ]
  %806 = phi double [ %796, %802 ], [ %824, %804 ]
  %807 = phi i64 [ %803, %802 ], [ %826, %804 ]
  %808 = sub nsw i64 %794, %805
  %809 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 %808
  %810 = load double, double* %809, align 8
  %811 = fmul double %799, %810
  %812 = getelementptr inbounds [13 x double], [13 x double]* %15, i64 0, i64 %805
  %813 = load double, double* %812, align 16
  %814 = fmul double %811, %813
  %815 = fadd double %806, %814
  %816 = or i64 %805, 1
  %817 = sub nsw i64 %794, %816
  %818 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 %817
  %819 = load double, double* %818, align 8
  %820 = fmul double %799, %819
  %821 = getelementptr inbounds [13 x double], [13 x double]* %15, i64 0, i64 %816
  %822 = load double, double* %821, align 8
  %823 = fmul double %820, %822
  %824 = fadd double %815, %823
  %825 = add nuw nsw i64 %805, 2
  %826 = add i64 %807, -2
  %827 = icmp eq i64 %826, 0
  br i1 %827, label %828, label %804

828:                                              ; preds = %804, %793
  %829 = phi double [ undef, %793 ], [ %824, %804 ]
  %830 = phi i64 [ 0, %793 ], [ %825, %804 ]
  %831 = phi double [ %796, %793 ], [ %824, %804 ]
  %832 = icmp eq i64 %800, 0
  br i1 %832, label %842, label %833

833:                                              ; preds = %828
  %834 = sub nsw i64 %794, %830
  %835 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 %834
  %836 = load double, double* %835, align 8
  %837 = fmul double %799, %836
  %838 = getelementptr inbounds [13 x double], [13 x double]* %15, i64 0, i64 %830
  %839 = load double, double* %838, align 8
  %840 = fmul double %837, %839
  %841 = fadd double %831, %840
  br label %842

842:                                              ; preds = %828, %833
  %843 = phi double [ %829, %828 ], [ %841, %833 ]
  %844 = add nuw nsw i64 %794, 1
  %845 = icmp ult i64 %844, 13
  br i1 %845, label %846, label %789

846:                                              ; preds = %842
  %847 = and i64 %794, 1
  %848 = icmp eq i64 %847, 0
  br i1 %848, label %859, label %849

849:                                              ; preds = %846
  %850 = sub nuw nsw i64 %795, %794
  %851 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 %850
  %852 = load double, double* %851, align 8
  %853 = fmul double %799, %852
  %854 = getelementptr inbounds [13 x double], [13 x double]* %15, i64 0, i64 %795
  %855 = load double, double* %854, align 8
  %856 = fmul double %853, %855
  %857 = fadd double %843, %856
  %858 = add nuw nsw i64 %795, 1
  br label %859

859:                                              ; preds = %849, %846
  %860 = phi double [ %857, %849 ], [ undef, %846 ]
  %861 = phi i64 [ %858, %849 ], [ %795, %846 ]
  %862 = phi double [ %857, %849 ], [ %843, %846 ]
  %863 = icmp eq i64 %794, 11
  br i1 %863, label %789, label %864

864:                                              ; preds = %859, %864
  %865 = phi i64 [ %884, %864 ], [ %861, %859 ]
  %866 = phi double [ %883, %864 ], [ %862, %859 ]
  %867 = sub nuw nsw i64 %865, %794
  %868 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 %867
  %869 = load double, double* %868, align 8
  %870 = fmul double %799, %869
  %871 = getelementptr inbounds [13 x double], [13 x double]* %15, i64 0, i64 %865
  %872 = load double, double* %871, align 8
  %873 = fmul double %870, %872
  %874 = fadd double %866, %873
  %875 = add nuw nsw i64 %865, 1
  %876 = sub nuw nsw i64 %875, %794
  %877 = getelementptr inbounds [13 x double], [13 x double]* %11, i64 0, i64 %876
  %878 = load double, double* %877, align 8
  %879 = fmul double %799, %878
  %880 = getelementptr inbounds [13 x double], [13 x double]* %15, i64 0, i64 %875
  %881 = load double, double* %880, align 8
  %882 = fmul double %879, %881
  %883 = fadd double %874, %882
  %884 = add nuw nsw i64 %865, 2
  %885 = icmp eq i64 %884, 13
  br i1 %885, label %789, label %864

886:                                              ; preds = %789
  %887 = call double @sqrt(double %790) #6
  %888 = fdiv double %887, %224
  %889 = fadd double %888, 0x3FA46211FF90EA27
  %890 = fdiv double %30, %889
  store double %890, double* %539, align 8
  %891 = getelementptr inbounds double, double* %539, i64 1
  %892 = load i64, i64* %395, align 8
  %893 = bitcast double* %891 to i64*
  store i64 %892, i64* %893, align 8
  %894 = getelementptr inbounds double, double* %539, i64 2
  %895 = load i64, i64* %396, align 16
  %896 = bitcast double* %894 to i64*
  store i64 %895, i64* %896, align 8
  %897 = getelementptr inbounds double, double* %539, i64 3
  %898 = load i64, i64* %397, align 8
  %899 = bitcast double* %897 to i64*
  store i64 %898, i64* %899, align 8
  %900 = getelementptr inbounds double, double* %539, i64 4
  %901 = load i64, i64* %398, align 16
  %902 = bitcast double* %900 to i64*
  store i64 %901, i64* %902, align 8
  %903 = getelementptr inbounds double, double* %539, i64 5
  %904 = load i64, i64* %399, align 8
  %905 = bitcast double* %903 to i64*
  store i64 %904, i64* %905, align 8
  %906 = getelementptr inbounds double, double* %539, i64 6
  %907 = load i64, i64* %400, align 16
  %908 = bitcast double* %906 to i64*
  store i64 %907, i64* %908, align 8
  %909 = getelementptr inbounds double, double* %539, i64 7
  %910 = load i64, i64* %401, align 8
  %911 = bitcast double* %909 to i64*
  store i64 %910, i64* %911, align 8
  %912 = getelementptr inbounds double, double* %539, i64 8
  %913 = load i64, i64* %402, align 16
  %914 = bitcast double* %912 to i64*
  store i64 %913, i64* %914, align 8
  %915 = getelementptr inbounds double, double* %539, i64 9
  %916 = load i64, i64* %403, align 8
  %917 = bitcast double* %915 to i64*
  store i64 %916, i64* %917, align 8
  %918 = getelementptr inbounds double, double* %539, i64 10
  %919 = load i64, i64* %404, align 16
  %920 = bitcast double* %918 to i64*
  store i64 %919, i64* %920, align 8
  %921 = getelementptr inbounds double, double* %539, i64 11
  %922 = load i64, i64* %405, align 8
  %923 = bitcast double* %921 to i64*
  store i64 %922, i64* %923, align 8
  %924 = getelementptr inbounds double, double* %539, i64 12
  %925 = load i64, i64* %406, align 16
  %926 = bitcast double* %924 to i64*
  store i64 %925, i64* %926, align 8
  %927 = load <2 x double>, <2 x double>* %523, align 8
  %928 = fmul <2 x double> %927, <double 8.000000e-01, double 0x3FE47AE147AE147C>
  store <2 x double> %928, <2 x double>* %524, align 8
  %929 = load <2 x double>, <2 x double>* %525, align 8
  %930 = fmul <2 x double> %929, <double 0x3FE0624DD2F1A9FD, double 0x3FDA36E2EB1C432F>
  store <2 x double> %930, <2 x double>* %526, align 8
  %931 = load <2 x double>, <2 x double>* %527, align 8
  %932 = fmul <2 x double> %931, <double 0x3FD4F8B588E368F3, double 0x3FD0C6F7A0B5ED8F>
  store <2 x double> %932, <2 x double>* %528, align 8
  %933 = load double, double* %529, align 16
  %934 = load double, double* %530, align 8
  %935 = load double, double* %531, align 16
  %936 = load double, double* %532, align 8
  %937 = load double, double* %533, align 16
  %938 = load double, double* %534, align 8
  %939 = load double, double* %535, align 16
  br label %944

940:                                              ; preds = %973, %978, %956
  %941 = phi double [ %957, %956 ], [ %974, %973 ], [ %997, %978 ]
  %942 = add nuw nsw i64 %946, 1
  %943 = icmp eq i64 %958, 7
  br i1 %943, label %1000, label %944

944:                                              ; preds = %940, %886
  %945 = phi i64 [ 0, %886 ], [ %958, %940 ]
  %946 = phi i64 [ 1, %886 ], [ %942, %940 ]
  %947 = phi double [ 0.000000e+00, %886 ], [ %941, %940 ]
  %948 = getelementptr inbounds [7 x double], [7 x double]* %16, i64 0, i64 %945
  %949 = load double, double* %948, align 8
  %950 = getelementptr inbounds [7 x double], [7 x double]* %12, i64 0, i64 %945
  %951 = load double, double* %950, align 8
  %952 = fmul double %949, %951
  %953 = fmul double %952, %933
  %954 = fadd double %947, %953
  %955 = icmp eq i64 %946, 1
  br i1 %955, label %956, label %1030

956:                                              ; preds = %1070, %1062, %1054, %1046, %1038, %1030, %944
  %957 = phi double [ %954, %944 ], [ %1036, %1030 ], [ %1044, %1038 ], [ %1052, %1046 ], [ %1060, %1054 ], [ %1068, %1062 ], [ %1076, %1070 ]
  %958 = add nuw nsw i64 %945, 1
  %959 = icmp ult i64 %958, 7
  br i1 %959, label %960, label %940

960:                                              ; preds = %956
  %961 = and i64 %945, 1
  %962 = icmp eq i64 %961, 0
  br i1 %962, label %973, label %963

963:                                              ; preds = %960
  %964 = sub nuw nsw i64 %946, %945
  %965 = getelementptr inbounds [7 x double], [7 x double]* %12, i64 0, i64 %964
  %966 = load double, double* %965, align 8
  %967 = fmul double %949, %966
  %968 = getelementptr inbounds [7 x double], [7 x double]* %16, i64 0, i64 %946
  %969 = load double, double* %968, align 8
  %970 = fmul double %967, %969
  %971 = fadd double %957, %970
  %972 = add nuw nsw i64 %946, 1
  br label %973

973:                                              ; preds = %963, %960
  %974 = phi double [ %971, %963 ], [ undef, %960 ]
  %975 = phi i64 [ %972, %963 ], [ %946, %960 ]
  %976 = phi double [ %971, %963 ], [ %957, %960 ]
  %977 = icmp eq i64 %945, 5
  br i1 %977, label %940, label %978

978:                                              ; preds = %973, %978
  %979 = phi i64 [ %998, %978 ], [ %975, %973 ]
  %980 = phi double [ %997, %978 ], [ %976, %973 ]
  %981 = sub nuw nsw i64 %979, %945
  %982 = getelementptr inbounds [7 x double], [7 x double]* %12, i64 0, i64 %981
  %983 = load double, double* %982, align 8
  %984 = fmul double %949, %983
  %985 = getelementptr inbounds [7 x double], [7 x double]* %16, i64 0, i64 %979
  %986 = load double, double* %985, align 8
  %987 = fmul double %984, %986
  %988 = fadd double %980, %987
  %989 = add nuw nsw i64 %979, 1
  %990 = sub nuw nsw i64 %989, %945
  %991 = getelementptr inbounds [7 x double], [7 x double]* %12, i64 0, i64 %990
  %992 = load double, double* %991, align 8
  %993 = fmul double %949, %992
  %994 = getelementptr inbounds [7 x double], [7 x double]* %16, i64 0, i64 %989
  %995 = load double, double* %994, align 8
  %996 = fmul double %993, %995
  %997 = fadd double %988, %996
  %998 = add nuw nsw i64 %979, 2
  %999 = icmp eq i64 %998, 7
  br i1 %999, label %940, label %978

1000:                                             ; preds = %940
  %1001 = call double @sqrt(double %941) #6
  %1002 = fdiv double %1001, %224
  %1003 = fadd double %1002, 0x3FA46211FF90EA27
  %1004 = fdiv double %30, %1003
  store double %1004, double* %540, align 8
  %1005 = getelementptr inbounds double, double* %540, i64 1
  %1006 = load i64, i64* %361, align 8
  %1007 = bitcast double* %1005 to i64*
  store i64 %1006, i64* %1007, align 8
  %1008 = getelementptr inbounds double, double* %540, i64 2
  %1009 = load i64, i64* %412, align 16
  %1010 = bitcast double* %1008 to i64*
  store i64 %1009, i64* %1010, align 8
  %1011 = getelementptr inbounds double, double* %540, i64 3
  %1012 = load i64, i64* %413, align 8
  %1013 = bitcast double* %1011 to i64*
  store i64 %1012, i64* %1013, align 8
  %1014 = getelementptr inbounds double, double* %540, i64 4
  %1015 = load i64, i64* %414, align 16
  %1016 = bitcast double* %1014 to i64*
  store i64 %1015, i64* %1016, align 8
  %1017 = getelementptr inbounds double, double* %540, i64 5
  %1018 = load i64, i64* %415, align 8
  %1019 = bitcast double* %1017 to i64*
  store i64 %1018, i64* %1019, align 8
  %1020 = getelementptr inbounds double, double* %540, i64 6
  %1021 = load i64, i64* %416, align 16
  %1022 = bitcast double* %1020 to i64*
  store i64 %1021, i64* %1022, align 8
  %1023 = getelementptr inbounds double, double* %540, i64 7
  %1024 = getelementptr inbounds double, double* %539, i64 13
  %1025 = add nuw nsw i32 %541, 1
  %1026 = add nuw nsw i64 %538, 40
  %1027 = icmp eq i32 %1025, 6
  %1028 = add i64 %537, 1
  br i1 %1027, label %1029, label %536

1029:                                             ; preds = %1000
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %27) #6
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %25) #6
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %23) #6
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %22) #6
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %21) #6
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %20) #6
  call void @llvm.lifetime.end.p0i8(i64 112, i8* nonnull %19) #6
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %18) #6
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %17) #6
  ret void

1030:                                             ; preds = %944
  %1031 = add nsw i64 %945, -1
  %1032 = getelementptr inbounds [7 x double], [7 x double]* %12, i64 0, i64 %1031
  %1033 = load double, double* %1032, align 8
  %1034 = fmul double %949, %1033
  %1035 = fmul double %1034, %934
  %1036 = fadd double %954, %1035
  %1037 = icmp eq i64 %946, 2
  br i1 %1037, label %956, label %1038

1038:                                             ; preds = %1030
  %1039 = add nsw i64 %945, -2
  %1040 = getelementptr inbounds [7 x double], [7 x double]* %12, i64 0, i64 %1039
  %1041 = load double, double* %1040, align 8
  %1042 = fmul double %949, %1041
  %1043 = fmul double %1042, %935
  %1044 = fadd double %1036, %1043
  %1045 = icmp eq i64 %946, 3
  br i1 %1045, label %956, label %1046

1046:                                             ; preds = %1038
  %1047 = add nsw i64 %945, -3
  %1048 = getelementptr inbounds [7 x double], [7 x double]* %12, i64 0, i64 %1047
  %1049 = load double, double* %1048, align 8
  %1050 = fmul double %949, %1049
  %1051 = fmul double %1050, %936
  %1052 = fadd double %1044, %1051
  %1053 = icmp eq i64 %946, 4
  br i1 %1053, label %956, label %1054

1054:                                             ; preds = %1046
  %1055 = add nsw i64 %945, -4
  %1056 = getelementptr inbounds [7 x double], [7 x double]* %12, i64 0, i64 %1055
  %1057 = load double, double* %1056, align 8
  %1058 = fmul double %949, %1057
  %1059 = fmul double %1058, %937
  %1060 = fadd double %1052, %1059
  %1061 = icmp eq i64 %946, 5
  br i1 %1061, label %956, label %1062

1062:                                             ; preds = %1054
  %1063 = add nsw i64 %945, -5
  %1064 = getelementptr inbounds [7 x double], [7 x double]* %12, i64 0, i64 %1063
  %1065 = load double, double* %1064, align 8
  %1066 = fmul double %949, %1065
  %1067 = fmul double %1066, %938
  %1068 = fadd double %1060, %1067
  %1069 = icmp eq i64 %946, 6
  br i1 %1069, label %956, label %1070

1070:                                             ; preds = %1062
  %1071 = add nsw i64 %945, -6
  %1072 = getelementptr inbounds [7 x double], [7 x double]* %12, i64 0, i64 %1071
  %1073 = load double, double* %1072, align 8
  %1074 = fmul double %949, %1073
  %1075 = fmul double %1074, %939
  %1076 = fadd double %1068, %1075
  br label %956
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare double @pow(double, double) local_unnamed_addr #2

declare void @WebRtcIsac_AutoCorr(double*, double*, i64, i64) local_unnamed_addr #3

declare double @WebRtcIsac_LevDurb(double*, double*, double*, i64) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare double @sqrt(double) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_GetLpcCoefUb(double* nocapture readonly, %struct.MaskFiltstr* nocapture, double* nocapture, [5 x double]* nocapture, double* nocapture, i16 signext) local_unnamed_addr #0 {
  %7 = alloca [256 x double], align 16
  %8 = alloca [6 x double], align 16
  %9 = alloca [4 x double], align 16
  %10 = alloca [5 x double], align 16
  %11 = icmp eq i16 %5, 16
  %12 = select i1 %11, i32 12, i32 6
  %13 = bitcast [256 x double]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2048, i8* nonnull %13) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %13, i8 -1, i64 2048, i1 false)
  %14 = bitcast [6 x double]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 48, i8* nonnull %14) #6
  %15 = getelementptr inbounds [6 x double], [6 x double]* %8, i64 0, i64 0
  %16 = bitcast [4 x double]* %9 to i8*
  %17 = bitcast [6 x double]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %17, i8 -1, i64 48, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #6
  %18 = getelementptr inbounds [4 x double], [4 x double]* %9, i64 0, i64 0
  %19 = bitcast [5 x double]* %10 to i8*
  %20 = bitcast [4 x double]* %9 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 -1, i64 32, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %19) #6
  %21 = getelementptr inbounds [5 x double], [5 x double]* %10, i64 0, i64 0
  %22 = getelementptr inbounds [5 x double], [5 x double]* %10, i64 0, i64 1
  %23 = getelementptr inbounds [5 x double], [5 x double]* %10, i64 0, i64 2
  %24 = getelementptr inbounds [5 x double], [5 x double]* %10, i64 0, i64 3
  %25 = getelementptr inbounds [5 x double], [5 x double]* %10, i64 0, i64 4
  %26 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %1, i64 0, i32 12
  %27 = bitcast [5 x double]* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %27, i8 -1, i64 40, i1 false)
  tail call fastcc void @WebRtcIsac_GetVarsUB(double* %0, double* %26, double* %4)
  %28 = getelementptr inbounds double, double* %0, i64 240
  %29 = getelementptr inbounds [256 x double], [256 x double]* %7, i64 0, i64 0
  %30 = icmp eq i16 %5, 12
  %31 = getelementptr %struct.MaskFiltstr, %struct.MaskFiltstr* %1, i64 0, i32 0, i64 216
  %32 = getelementptr %struct.MaskFiltstr, %struct.MaskFiltstr* %1, i64 0, i32 1, i64 0
  %33 = getelementptr double, double* %0, i64 40
  br label %34

34:                                               ; preds = %6, %185
  %35 = phi double* [ %2, %6 ], [ %187, %185 ]
  %36 = phi i32 [ 0, %6 ], [ %186, %185 ]
  %37 = phi double* [ %4, %6 ], [ %42, %185 ]
  %38 = icmp eq i32 %36, 6
  br i1 %38, label %39, label %41

39:                                               ; preds = %34
  %40 = getelementptr inbounds double, double* %37, i64 1
  call fastcc void @WebRtcIsac_GetVarsUB(double* %28, double* %26, double* %40)
  br label %41

41:                                               ; preds = %34, %39
  %42 = phi double* [ %40, %39 ], [ %37, %34 ]
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i64 [ 0, %41 ], [ %92, %43 ]
  %45 = add nuw nsw i64 %44, 40
  %46 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %1, i64 0, i32 0, i64 %45
  %47 = bitcast double* %46 to <2 x double>*
  %48 = load <2 x double>, <2 x double>* %47, align 8
  %49 = getelementptr inbounds double, double* %46, i64 2
  %50 = bitcast double* %49 to <2 x double>*
  %51 = load <2 x double>, <2 x double>* %50, align 8
  %52 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %1, i64 0, i32 0, i64 %44
  %53 = bitcast double* %52 to <2 x double>*
  store <2 x double> %48, <2 x double>* %53, align 8
  %54 = getelementptr inbounds double, double* %52, i64 2
  %55 = bitcast double* %54 to <2 x double>*
  store <2 x double> %51, <2 x double>* %55, align 8
  %56 = getelementptr inbounds [256 x double], [256 x double]* @kLpcCorrWindow, i64 0, i64 %44
  %57 = bitcast double* %56 to <2 x double>*
  %58 = load <2 x double>, <2 x double>* %57, align 16
  %59 = getelementptr inbounds double, double* %56, i64 2
  %60 = bitcast double* %59 to <2 x double>*
  %61 = load <2 x double>, <2 x double>* %60, align 16
  %62 = fmul <2 x double> %48, %58
  %63 = fmul <2 x double> %51, %61
  %64 = getelementptr inbounds [256 x double], [256 x double]* %7, i64 0, i64 %44
  %65 = bitcast double* %64 to <2 x double>*
  store <2 x double> %62, <2 x double>* %65, align 16
  %66 = getelementptr inbounds double, double* %64, i64 2
  %67 = bitcast double* %66 to <2 x double>*
  store <2 x double> %63, <2 x double>* %67, align 16
  %68 = or i64 %44, 4
  %69 = add nuw nsw i64 %44, 44
  %70 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %1, i64 0, i32 0, i64 %69
  %71 = bitcast double* %70 to <2 x double>*
  %72 = load <2 x double>, <2 x double>* %71, align 8
  %73 = getelementptr inbounds double, double* %70, i64 2
  %74 = bitcast double* %73 to <2 x double>*
  %75 = load <2 x double>, <2 x double>* %74, align 8
  %76 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %1, i64 0, i32 0, i64 %68
  %77 = bitcast double* %76 to <2 x double>*
  store <2 x double> %72, <2 x double>* %77, align 8
  %78 = getelementptr inbounds double, double* %76, i64 2
  %79 = bitcast double* %78 to <2 x double>*
  store <2 x double> %75, <2 x double>* %79, align 8
  %80 = getelementptr inbounds [256 x double], [256 x double]* @kLpcCorrWindow, i64 0, i64 %68
  %81 = bitcast double* %80 to <2 x double>*
  %82 = load <2 x double>, <2 x double>* %81, align 16
  %83 = getelementptr inbounds double, double* %80, i64 2
  %84 = bitcast double* %83 to <2 x double>*
  %85 = load <2 x double>, <2 x double>* %84, align 16
  %86 = fmul <2 x double> %72, %82
  %87 = fmul <2 x double> %75, %85
  %88 = getelementptr inbounds [256 x double], [256 x double]* %7, i64 0, i64 %68
  %89 = bitcast double* %88 to <2 x double>*
  store <2 x double> %86, <2 x double>* %89, align 16
  %90 = getelementptr inbounds double, double* %88, i64 2
  %91 = bitcast double* %90 to <2 x double>*
  store <2 x double> %87, <2 x double>* %91, align 16
  %92 = add nuw nsw i64 %44, 8
  %93 = icmp eq i64 %92, 216
  br i1 %93, label %94, label %43, !llvm.loop !20

94:                                               ; preds = %43
  %95 = mul i32 %36, 40
  %96 = sext i32 %95 to i64
  %97 = getelementptr double, double* %0, i64 %96
  %98 = getelementptr double, double* %33, i64 %96
  %99 = icmp ult double* %31, %98
  %100 = icmp ult double* %97, %32
  %101 = and i1 %99, %100
  br i1 %101, label %133, label %102

102:                                              ; preds = %94, %102
  %103 = phi i64 [ %131, %102 ], [ 0, %94 ]
  %104 = add nuw nsw i64 %103, 216
  %105 = add nsw i64 %103, %96
  %106 = getelementptr inbounds double, double* %0, i64 %105
  %107 = bitcast double* %106 to <2 x double>*
  %108 = load <2 x double>, <2 x double>* %107, align 8, !alias.scope !21
  %109 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %1, i64 0, i32 0, i64 %104
  %110 = bitcast double* %109 to <2 x double>*
  store <2 x double> %108, <2 x double>* %110, align 8, !alias.scope !24, !noalias !21
  %111 = getelementptr inbounds [256 x double], [256 x double]* @kLpcCorrWindow, i64 0, i64 %104
  %112 = bitcast double* %111 to <2 x double>*
  %113 = load <2 x double>, <2 x double>* %112, align 16, !alias.scope !26
  %114 = fmul <2 x double> %108, %113
  %115 = getelementptr inbounds [256 x double], [256 x double]* %7, i64 0, i64 %104
  %116 = bitcast double* %115 to <2 x double>*
  store <2 x double> %114, <2 x double>* %116, align 16, !alias.scope !28
  %117 = or i64 %103, 2
  %118 = add nuw nsw i64 %103, 218
  %119 = add nsw i64 %117, %96
  %120 = getelementptr inbounds double, double* %0, i64 %119
  %121 = bitcast double* %120 to <2 x double>*
  %122 = load <2 x double>, <2 x double>* %121, align 8, !alias.scope !21
  %123 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %1, i64 0, i32 0, i64 %118
  %124 = bitcast double* %123 to <2 x double>*
  store <2 x double> %122, <2 x double>* %124, align 8, !alias.scope !24, !noalias !21
  %125 = getelementptr inbounds [256 x double], [256 x double]* @kLpcCorrWindow, i64 0, i64 %118
  %126 = bitcast double* %125 to <2 x double>*
  %127 = load <2 x double>, <2 x double>* %126, align 16, !alias.scope !26
  %128 = fmul <2 x double> %122, %127
  %129 = getelementptr inbounds [256 x double], [256 x double]* %7, i64 0, i64 %118
  %130 = bitcast double* %129 to <2 x double>*
  store <2 x double> %128, <2 x double>* %130, align 16, !alias.scope !28
  %131 = add nuw nsw i64 %103, 4
  %132 = icmp eq i64 %131, 40
  br i1 %132, label %155, label %102, !llvm.loop !30

133:                                              ; preds = %94, %133
  %134 = phi i64 [ %152, %133 ], [ 216, %94 ]
  %135 = phi i64 [ %153, %133 ], [ %96, %94 ]
  %136 = getelementptr inbounds double, double* %0, i64 %135
  %137 = load double, double* %136, align 8
  %138 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %1, i64 0, i32 0, i64 %134
  store double %137, double* %138, align 8
  %139 = getelementptr inbounds [256 x double], [256 x double]* @kLpcCorrWindow, i64 0, i64 %134
  %140 = load double, double* %139, align 16
  %141 = fmul double %137, %140
  %142 = getelementptr inbounds [256 x double], [256 x double]* %7, i64 0, i64 %134
  store double %141, double* %142, align 16
  %143 = or i64 %134, 1
  %144 = or i64 %135, 1
  %145 = getelementptr inbounds double, double* %0, i64 %144
  %146 = load double, double* %145, align 8
  %147 = getelementptr inbounds %struct.MaskFiltstr, %struct.MaskFiltstr* %1, i64 0, i32 0, i64 %143
  store double %146, double* %147, align 8
  %148 = getelementptr inbounds [256 x double], [256 x double]* @kLpcCorrWindow, i64 0, i64 %143
  %149 = load double, double* %148, align 8
  %150 = fmul double %146, %149
  %151 = getelementptr inbounds [256 x double], [256 x double]* %7, i64 0, i64 %143
  store double %150, double* %151, align 8
  %152 = add nuw nsw i64 %134, 2
  %153 = add nsw i64 %135, 2
  %154 = icmp eq i64 %152, 256
  br i1 %154, label %155, label %133, !llvm.loop !31

155:                                              ; preds = %102, %133
  call void @WebRtcIsac_AutoCorr(double* nonnull %15, double* nonnull %29, i64 256, i64 5) #6
  %156 = zext i32 %36 to i64
  %157 = getelementptr inbounds [5 x double], [5 x double]* %3, i64 %156, i64 0
  %158 = bitcast double* %157 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %158, i8* nonnull align 16 %14, i64 40, i1 false)
  switch i32 %36, label %159 [
    i32 5, label %161
    i32 0, label %161
  ]

159:                                              ; preds = %155
  %160 = add nuw nsw i32 %36, 1
  br label %163

161:                                              ; preds = %155, %155
  %162 = add nuw nsw i32 %36, 1
  br i1 %30, label %168, label %163

163:                                              ; preds = %159, %161
  %164 = phi i32 [ %160, %159 ], [ %162, %161 ]
  %165 = and i32 %164, 3
  %166 = icmp eq i32 %165, 0
  %167 = and i1 %11, %166
  br i1 %167, label %168, label %185

168:                                              ; preds = %163, %161
  %169 = phi i32 [ %164, %163 ], [ %162, %161 ]
  %170 = load double, double* %15, align 16
  %171 = fadd double %170, 0x3EB0C6F7A0B5ED8D
  store double %171, double* %15, align 16
  %172 = call double @WebRtcIsac_LevDurb(double* nonnull %21, double* nonnull %18, double* nonnull %15, i64 4) #6
  %173 = load double, double* %22, align 8
  %174 = fmul double %173, 9.000000e-01
  %175 = getelementptr inbounds double, double* %35, i64 1
  store double %174, double* %35, align 8
  %176 = load double, double* %23, align 16
  %177 = fmul double %176, 8.100000e-01
  %178 = getelementptr inbounds double, double* %35, i64 2
  store double %177, double* %175, align 8
  %179 = load double, double* %24, align 8
  %180 = fmul double %179, 0x3FE753F7CED91688
  %181 = getelementptr inbounds double, double* %35, i64 3
  store double %180, double* %178, align 8
  %182 = load double, double* %25, align 16
  %183 = fmul double %182, 0x3FE4FEC56D5CFAAE
  %184 = getelementptr inbounds double, double* %35, i64 4
  store double %183, double* %181, align 8
  br label %185

185:                                              ; preds = %163, %168
  %186 = phi i32 [ %169, %168 ], [ %164, %163 ]
  %187 = phi double* [ %184, %168 ], [ %35, %163 ]
  %188 = icmp ult i32 %186, %12
  br i1 %188, label %34, label %189

189:                                              ; preds = %185
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %19) #6
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #6
  call void @llvm.lifetime.end.p0i8(i64 48, i8* nonnull %14) #6
  call void @llvm.lifetime.end.p0i8(i64 2048, i8* nonnull %13) #6
  ret void
}

; Function Attrs: nofree nounwind ssp uwtable
define internal fastcc void @WebRtcIsac_GetVarsUB(double* nocapture readonly, double* nocapture, double* nocapture) unnamed_addr #4 {
  br label %4

4:                                                ; preds = %4, %3
  %5 = phi i64 [ 0, %3 ], [ %36, %4 ]
  %6 = phi double [ 1.000000e-04, %3 ], [ %35, %4 ]
  %7 = getelementptr inbounds double, double* %0, i64 %5
  %8 = load double, double* %7, align 8
  %9 = fmul double %8, %8
  %10 = fadd double %6, %9
  %11 = or i64 %5, 1
  %12 = getelementptr inbounds double, double* %0, i64 %11
  %13 = load double, double* %12, align 8
  %14 = fmul double %13, %13
  %15 = fadd double %10, %14
  %16 = add nuw nsw i64 %5, 2
  %17 = getelementptr inbounds double, double* %0, i64 %16
  %18 = load double, double* %17, align 8
  %19 = fmul double %18, %18
  %20 = fadd double %15, %19
  %21 = add nuw nsw i64 %5, 3
  %22 = getelementptr inbounds double, double* %0, i64 %21
  %23 = load double, double* %22, align 8
  %24 = fmul double %23, %23
  %25 = fadd double %20, %24
  %26 = add nuw nsw i64 %5, 4
  %27 = getelementptr inbounds double, double* %0, i64 %26
  %28 = load double, double* %27, align 8
  %29 = fmul double %28, %28
  %30 = fadd double %25, %29
  %31 = add nuw nsw i64 %5, 5
  %32 = getelementptr inbounds double, double* %0, i64 %31
  %33 = load double, double* %32, align 8
  %34 = fmul double %33, %33
  %35 = fadd double %30, %34
  %36 = add nuw nsw i64 %5, 6
  %37 = icmp eq i64 %36, 60
  br i1 %37, label %38, label %4

38:                                               ; preds = %4, %38
  %39 = phi i64 [ %70, %38 ], [ 60, %4 ]
  %40 = phi double [ %69, %38 ], [ 1.000000e-04, %4 ]
  %41 = getelementptr inbounds double, double* %0, i64 %39
  %42 = load double, double* %41, align 8
  %43 = fmul double %42, %42
  %44 = fadd double %40, %43
  %45 = or i64 %39, 1
  %46 = getelementptr inbounds double, double* %0, i64 %45
  %47 = load double, double* %46, align 8
  %48 = fmul double %47, %47
  %49 = fadd double %44, %48
  %50 = add nuw nsw i64 %39, 2
  %51 = getelementptr inbounds double, double* %0, i64 %50
  %52 = load double, double* %51, align 8
  %53 = fmul double %52, %52
  %54 = fadd double %49, %53
  %55 = add nuw nsw i64 %39, 3
  %56 = getelementptr inbounds double, double* %0, i64 %55
  %57 = load double, double* %56, align 8
  %58 = fmul double %57, %57
  %59 = fadd double %54, %58
  %60 = add nuw nsw i64 %39, 4
  %61 = getelementptr inbounds double, double* %0, i64 %60
  %62 = load double, double* %61, align 8
  %63 = fmul double %62, %62
  %64 = fadd double %59, %63
  %65 = add nuw nsw i64 %39, 5
  %66 = getelementptr inbounds double, double* %0, i64 %65
  %67 = load double, double* %66, align 8
  %68 = fmul double %67, %67
  %69 = fadd double %64, %68
  %70 = add nuw nsw i64 %39, 6
  %71 = icmp eq i64 %70, 120
  br i1 %71, label %72, label %38

72:                                               ; preds = %38, %72
  %73 = phi i64 [ %104, %72 ], [ 120, %38 ]
  %74 = phi double [ %103, %72 ], [ 1.000000e-04, %38 ]
  %75 = getelementptr inbounds double, double* %0, i64 %73
  %76 = load double, double* %75, align 8
  %77 = fmul double %76, %76
  %78 = fadd double %74, %77
  %79 = or i64 %73, 1
  %80 = getelementptr inbounds double, double* %0, i64 %79
  %81 = load double, double* %80, align 8
  %82 = fmul double %81, %81
  %83 = fadd double %78, %82
  %84 = add nuw nsw i64 %73, 2
  %85 = getelementptr inbounds double, double* %0, i64 %84
  %86 = load double, double* %85, align 8
  %87 = fmul double %86, %86
  %88 = fadd double %83, %87
  %89 = add nuw nsw i64 %73, 3
  %90 = getelementptr inbounds double, double* %0, i64 %89
  %91 = load double, double* %90, align 8
  %92 = fmul double %91, %91
  %93 = fadd double %88, %92
  %94 = add nuw nsw i64 %73, 4
  %95 = getelementptr inbounds double, double* %0, i64 %94
  %96 = load double, double* %95, align 8
  %97 = fmul double %96, %96
  %98 = fadd double %93, %97
  %99 = add nuw nsw i64 %73, 5
  %100 = getelementptr inbounds double, double* %0, i64 %99
  %101 = load double, double* %100, align 8
  %102 = fmul double %101, %101
  %103 = fadd double %98, %102
  %104 = add nuw nsw i64 %73, 6
  %105 = icmp eq i64 %104, 180
  br i1 %105, label %106, label %72

106:                                              ; preds = %72, %106
  %107 = phi i64 [ %138, %106 ], [ 180, %72 ]
  %108 = phi double [ %137, %106 ], [ 1.000000e-04, %72 ]
  %109 = getelementptr inbounds double, double* %0, i64 %107
  %110 = load double, double* %109, align 8
  %111 = fmul double %110, %110
  %112 = fadd double %108, %111
  %113 = or i64 %107, 1
  %114 = getelementptr inbounds double, double* %0, i64 %113
  %115 = load double, double* %114, align 8
  %116 = fmul double %115, %115
  %117 = fadd double %112, %116
  %118 = add nuw nsw i64 %107, 2
  %119 = getelementptr inbounds double, double* %0, i64 %118
  %120 = load double, double* %119, align 8
  %121 = fmul double %120, %120
  %122 = fadd double %117, %121
  %123 = add nuw nsw i64 %107, 3
  %124 = getelementptr inbounds double, double* %0, i64 %123
  %125 = load double, double* %124, align 8
  %126 = fmul double %125, %125
  %127 = fadd double %122, %126
  %128 = add nuw nsw i64 %107, 4
  %129 = getelementptr inbounds double, double* %0, i64 %128
  %130 = load double, double* %129, align 8
  %131 = fmul double %130, %130
  %132 = fadd double %127, %131
  %133 = add nuw nsw i64 %107, 5
  %134 = getelementptr inbounds double, double* %0, i64 %133
  %135 = load double, double* %134, align 8
  %136 = fmul double %135, %135
  %137 = fadd double %132, %136
  %138 = add nuw nsw i64 %107, 6
  %139 = icmp eq i64 %138, 240
  br i1 %139, label %140, label %106

140:                                              ; preds = %106
  %141 = fdiv double %137, %103
  %142 = tail call double @log10(double %141) #6
  %143 = fmul double %142, 1.000000e+01
  %144 = tail call double @llvm.fabs.f64(double %143)
  %145 = fdiv double %103, %69
  %146 = tail call double @log10(double %145) #6
  %147 = fmul double %146, 1.000000e+01
  %148 = tail call double @llvm.fabs.f64(double %147)
  %149 = fadd double %144, %148
  %150 = fdiv double %69, %35
  %151 = tail call double @log10(double %150) #6
  %152 = fmul double %151, 1.000000e+01
  %153 = tail call double @llvm.fabs.f64(double %152)
  %154 = fadd double %149, %153
  %155 = load double, double* %1, align 8
  %156 = fdiv double %35, %155
  %157 = tail call double @log10(double %156) #6
  %158 = fmul double %157, 1.000000e+01
  %159 = tail call double @llvm.fabs.f64(double %158)
  %160 = fadd double %154, %159
  %161 = fmul double %160, 2.500000e-01
  %162 = fmul double %161, 4.000000e-01
  %163 = fadd double %162, 1.000000e+00
  %164 = fdiv double -1.400000e+00, %163
  %165 = tail call double @exp(double %164) #6
  store double %165, double* %2, align 8
  store double %137, double* %1, align 8
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define hidden void @WebRtcIsac_GetLpcGain(double, double* nocapture readonly, i32, double* nocapture, [5 x double]* nocapture readonly, double* nocapture readonly) local_unnamed_addr #0 {
  %7 = alloca [13 x double], align 16
  %8 = bitcast [13 x double]* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 104, i8* nonnull %8) #6
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %8, i8 -1, i64 104, i1 false)
  %9 = fmul double %0, 5.000000e-02
  %10 = tail call double @pow(double 1.000000e+01, double %9) #6
  %11 = fdiv double %10, 3.460000e+00
  %12 = getelementptr inbounds [13 x double], [13 x double]* %7, i64 0, i64 0
  store double 1.000000e+00, double* %12, align 16
  %13 = icmp sgt i32 %2, 0
  br i1 %13, label %14, label %121

14:                                               ; preds = %6
  %15 = getelementptr inbounds [13 x double], [13 x double]* %7, i64 0, i64 1
  %16 = bitcast double* %15 to i8*
  %17 = getelementptr inbounds [13 x double], [13 x double]* %7, i64 0, i64 0
  %18 = getelementptr inbounds [13 x double], [13 x double]* %7, i64 0, i64 1
  %19 = getelementptr inbounds [13 x double], [13 x double]* %7, i64 0, i64 2
  %20 = getelementptr inbounds [13 x double], [13 x double]* %7, i64 0, i64 3
  %21 = getelementptr inbounds [13 x double], [13 x double]* %7, i64 0, i64 4
  br label %22

22:                                               ; preds = %14, %109
  %23 = phi i32 [ 0, %14 ], [ %119, %109 ]
  %24 = phi double* [ %5, %14 ], [ %111, %109 ]
  %25 = phi i16 [ 0, %14 ], [ %118, %109 ]
  %26 = getelementptr inbounds double, double* %24, i64 1
  %27 = mul nsw i32 %23, 5
  %28 = add nsw i32 %27, 1
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds double, double* %1, i64 %29
  %31 = bitcast double* %30 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %31, i64 32, i1 false)
  %32 = sext i16 %25 to i64
  %33 = load double, double* %17, align 16
  %34 = load double, double* %18, align 8
  %35 = load double, double* %19, align 16
  %36 = load double, double* %20, align 8
  %37 = load double, double* %21, align 16
  br label %38

38:                                               ; preds = %22, %104
  %39 = phi i64 [ 0, %22 ], [ %54, %104 ]
  %40 = phi i64 [ 1, %22 ], [ %107, %104 ]
  %41 = phi i32 [ 0, %22 ], [ %106, %104 ]
  %42 = phi double [ 0.000000e+00, %22 ], [ %105, %104 ]
  %43 = getelementptr inbounds [13 x double], [13 x double]* %7, i64 0, i64 %39
  %44 = load double, double* %43, align 8
  %45 = sext i32 %41 to i64
  %46 = getelementptr inbounds [5 x double], [5 x double]* %4, i64 %32, i64 %45
  %47 = load double, double* %46, align 8
  %48 = fmul double %44, %47
  %49 = fmul double %48, %33
  %50 = fadd double %42, %49
  %51 = icmp eq i64 %40, 1
  br i1 %51, label %52, label %122

52:                                               ; preds = %149, %140, %131, %122, %38
  %53 = phi double [ %50, %38 ], [ %129, %122 ], [ %138, %131 ], [ %147, %140 ], [ %156, %149 ]
  %54 = add nuw nsw i64 %39, 1
  %55 = icmp ult i64 %54, 5
  br i1 %55, label %56, label %104

56:                                               ; preds = %52
  %57 = getelementptr inbounds [13 x double], [13 x double]* %7, i64 0, i64 %39
  %58 = load double, double* %57, align 8
  %59 = and i64 %39, 1
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %73, label %61

61:                                               ; preds = %56
  %62 = trunc i64 %40 to i32
  %63 = sub nuw nsw i32 %62, %41
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds [5 x double], [5 x double]* %4, i64 %32, i64 %64
  %66 = load double, double* %65, align 8
  %67 = fmul double %58, %66
  %68 = getelementptr inbounds [13 x double], [13 x double]* %7, i64 0, i64 %40
  %69 = load double, double* %68, align 8
  %70 = fmul double %67, %69
  %71 = fadd double %53, %70
  %72 = add nuw nsw i64 %40, 1
  br label %73

73:                                               ; preds = %61, %56
  %74 = phi double [ %71, %61 ], [ undef, %56 ]
  %75 = phi i64 [ %72, %61 ], [ %40, %56 ]
  %76 = phi double [ %71, %61 ], [ %53, %56 ]
  %77 = icmp eq i64 %39, 3
  br i1 %77, label %104, label %78

78:                                               ; preds = %73, %78
  %79 = phi i64 [ %102, %78 ], [ %75, %73 ]
  %80 = phi double [ %101, %78 ], [ %76, %73 ]
  %81 = trunc i64 %79 to i32
  %82 = sub nuw nsw i32 %81, %41
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds [5 x double], [5 x double]* %4, i64 %32, i64 %83
  %85 = load double, double* %84, align 8
  %86 = fmul double %58, %85
  %87 = getelementptr inbounds [13 x double], [13 x double]* %7, i64 0, i64 %79
  %88 = load double, double* %87, align 8
  %89 = fmul double %86, %88
  %90 = fadd double %80, %89
  %91 = add nuw nsw i64 %79, 1
  %92 = trunc i64 %91 to i32
  %93 = sub nuw nsw i32 %92, %41
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [5 x double], [5 x double]* %4, i64 %32, i64 %94
  %96 = load double, double* %95, align 8
  %97 = fmul double %58, %96
  %98 = getelementptr inbounds [13 x double], [13 x double]* %7, i64 0, i64 %91
  %99 = load double, double* %98, align 8
  %100 = fmul double %97, %99
  %101 = fadd double %90, %100
  %102 = add nuw nsw i64 %79, 2
  %103 = icmp eq i64 %102, 5
  br i1 %103, label %104, label %78

104:                                              ; preds = %73, %78, %52
  %105 = phi double [ %53, %52 ], [ %74, %73 ], [ %101, %78 ]
  %106 = trunc i64 %54 to i32
  %107 = add nuw nsw i64 %40, 1
  %108 = icmp eq i64 %54, 5
  br i1 %108, label %109, label %38

109:                                              ; preds = %104
  %110 = icmp eq i16 %25, 6
  %111 = select i1 %110, double* %26, double* %24
  %112 = tail call double @sqrt(double %105) #6
  %113 = load double, double* %111, align 8
  %114 = fdiv double %112, %113
  %115 = fadd double %114, 0x3FA46211FF90EA27
  %116 = fdiv double %11, %115
  %117 = getelementptr inbounds double, double* %3, i64 %32
  store double %116, double* %117, align 8
  %118 = add i16 %25, 1
  %119 = sext i16 %118 to i32
  %120 = icmp slt i32 %119, %2
  br i1 %120, label %22, label %121

121:                                              ; preds = %109, %6
  call void @llvm.lifetime.end.p0i8(i64 104, i8* nonnull %8) #6
  ret void

122:                                              ; preds = %38
  %123 = add nsw i32 %41, -1
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds [5 x double], [5 x double]* %4, i64 %32, i64 %124
  %126 = load double, double* %125, align 8
  %127 = fmul double %44, %126
  %128 = fmul double %127, %34
  %129 = fadd double %50, %128
  %130 = icmp eq i64 %40, 2
  br i1 %130, label %52, label %131

131:                                              ; preds = %122
  %132 = add nsw i32 %41, -2
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds [5 x double], [5 x double]* %4, i64 %32, i64 %133
  %135 = load double, double* %134, align 8
  %136 = fmul double %44, %135
  %137 = fmul double %136, %35
  %138 = fadd double %129, %137
  %139 = icmp eq i64 %40, 3
  br i1 %139, label %52, label %140

140:                                              ; preds = %131
  %141 = add nsw i32 %41, -3
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds [5 x double], [5 x double]* %4, i64 %32, i64 %142
  %144 = load double, double* %143, align 8
  %145 = fmul double %44, %144
  %146 = fmul double %145, %36
  %147 = fadd double %138, %146
  %148 = icmp eq i64 %40, 4
  br i1 %148, label %52, label %149

149:                                              ; preds = %140
  %150 = add nsw i32 %41, -4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds [5 x double], [5 x double]* %4, i64 %32, i64 %151
  %153 = load double, double* %152, align 8
  %154 = fmul double %44, %153
  %155 = fmul double %154, %37
  %156 = fadd double %147, %155
  br label %52
}

; Function Attrs: nofree nounwind
declare double @log10(double) local_unnamed_addr #2

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #5

; Function Attrs: nofree nounwind
declare double @exp(double) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone speculatable }
attributes #6 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.isvectorized", i32 1}
!4 = !{!5}
!5 = distinct !{!5, !6}
!6 = distinct !{!6, !"LVerDomain"}
!7 = !{!8}
!8 = distinct !{!8, !6}
!9 = !{!5, !10}
!10 = distinct !{!10, !6}
!11 = !{!10}
!12 = !{!13}
!13 = distinct !{!13, !6}
!14 = !{!15}
!15 = distinct !{!15, !6}
!16 = !{!17}
!17 = distinct !{!17, !6}
!18 = distinct !{!18, !3}
!19 = distinct !{!19, !3}
!20 = distinct !{!20, !3}
!21 = !{!22}
!22 = distinct !{!22, !23}
!23 = distinct !{!23, !"LVerDomain"}
!24 = !{!25}
!25 = distinct !{!25, !23}
!26 = !{!27}
!27 = distinct !{!27, !23}
!28 = !{!29}
!29 = distinct !{!29, !23}
!30 = distinct !{!30, !3}
!31 = distinct !{!31, !3}
