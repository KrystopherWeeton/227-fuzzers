; ModuleID = '../../content/public/common/url_utils.cc'
source_filename = "../../content/public/common/url_utils.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.base::NoDestructor" = type { [24 x i8] }
%class.GURL = type { %"class.std::__1::basic_string", i8, %"struct.url::Parsed", %"class.std::__1::unique_ptr" }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"struct.url::Parsed" = type { %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", %"struct.url::Component", i8, %"struct.url::Parsed"* }
%"struct.url::Component" = type { i32, i32 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { %class.GURL* }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"class.std::__1::basic_string"* }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.base::internal::flat_tree" = type { %"class.std::__1::vector.9" }
%"class.std::__1::vector.9" = type { %"class.std::__1::__vector_base.10" }
%"class.std::__1::__vector_base.10" = type { %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"*, %"class.std::__1::__compressed_pair.11" }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"class.base::BasicStringPiece"* }

$_ZNK4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_6vectorIS6_NS3_9allocatorIS6_EEEEE8containsIS6_EEbRKT_ = comdat any

@_ZN7content21kChromeDevToolsSchemeE = external constant [0 x i8], align 1
@_ZN7content15kChromeUISchemeE = external constant [0 x i8], align 1
@_ZN7content24kChromeUIUntrustedSchemeE = external constant [0 x i8], align 1
@_ZN3url17kJavaScriptSchemeE = external constant [0 x i8], align 1
@_ZZN7content20IsSafeRedirectTargetERK4GURLS2_E14kUnsafeSchemes = internal global %"class.base::NoDestructor" zeroinitializer, align 8
@_ZGVZN7content20IsSafeRedirectTargetERK4GURLS2_E14kUnsafeSchemes = internal global i64 0, align 8
@_ZN3url12kAboutSchemeE = external constant [0 x i8], align 1
@_ZN3url11kFileSchemeE = external constant [0 x i8], align 1
@_ZN3url17kFileSystemSchemeE = external constant [0 x i8], align 1
@_ZN3url11kBlobSchemeE = external constant [0 x i8], align 1
@_ZN3url11kDataSchemeE = external constant [0 x i8], align 1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7content14HasWebUISchemeERK4GURL(%class.GURL* dereferenceable(120)) local_unnamed_addr #0 {
  %2 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN7content21kChromeDevToolsSchemeE, i64 0, i64 0)) #7
  %3 = tail call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %0, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN7content21kChromeDevToolsSchemeE, i64 0, i64 0), i64 %2) #7
  br i1 %3, label %10, label %4

4:                                                ; preds = %1
  %5 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN7content15kChromeUISchemeE, i64 0, i64 0)) #7
  %6 = tail call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %0, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN7content15kChromeUISchemeE, i64 0, i64 0), i64 %5) #7
  br i1 %6, label %10, label %7

7:                                                ; preds = %4
  %8 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN7content24kChromeUIUntrustedSchemeE, i64 0, i64 0)) #7
  %9 = tail call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %0, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN7content24kChromeUIUntrustedSchemeE, i64 0, i64 0), i64 %8) #7
  br label %10

10:                                               ; preds = %7, %4, %1
  %11 = phi i1 [ true, %4 ], [ true, %1 ], [ %9, %7 ]
  ret i1 %11
}

declare zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL*, i8*, i64) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7content12IsSavableURLERK4GURL(%class.GURL* dereferenceable(120)) local_unnamed_addr #0 {
  %2 = tail call dereferenceable(24) %"class.std::__1::vector"* @_ZN7content17GetSavableSchemesEv() #7
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 0
  %4 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %3, align 8
  %5 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %2, i64 0, i32 0, i32 1
  %6 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %5, align 8
  %7 = icmp eq %"class.std::__1::basic_string"* %4, %6
  br i1 %7, label %26, label %10

8:                                                ; preds = %10
  %9 = icmp eq %"class.std::__1::basic_string"* %25, %6
  br i1 %9, label %26, label %10

10:                                               ; preds = %1, %8
  %11 = phi %"class.std::__1::basic_string"* [ %25, %8 ], [ %4, %1 ]
  %12 = bitcast %"class.std::__1::basic_string"* %11 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %13 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %12, i64 0, i32 1, i32 0
  %14 = load i8, i8* %13, align 1
  %15 = icmp slt i8 %14, 0
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = bitcast %"class.std::__1::basic_string"* %11 to i8*
  %19 = select i1 %15, i8* %17, i8* %18
  %20 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = zext i8 %14 to i64
  %23 = select i1 %15, i64 %21, i64 %22
  %24 = tail call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %0, i8* %19, i64 %23) #7
  %25 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %11, i64 1
  br i1 %24, label %26, label %8

26:                                               ; preds = %8, %10, %1
  %27 = phi i1 [ false, %1 ], [ true, %10 ], [ false, %8 ]
  ret i1 %27
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #2

declare dereferenceable(24) %"class.std::__1::vector"* @_ZN7content17GetSavableSchemesEv() local_unnamed_addr #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7content26IsURLHandledByNetworkStackERK4GURL(%class.GURL* dereferenceable(120)) local_unnamed_addr #0 {
  %2 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url17kJavaScriptSchemeE, i64 0, i64 0)) #7
  %3 = tail call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %0, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url17kJavaScriptSchemeE, i64 0, i64 0), i64 %2) #7
  br i1 %3, label %44, label %4

4:                                                ; preds = %1
  %5 = bitcast %class.GURL* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %6 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %5, i64 0, i32 1, i32 0
  %7 = load i8, i8* %6, align 1
  %8 = icmp slt i8 %7, 0
  %9 = getelementptr inbounds %class.GURL, %class.GURL* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = zext i8 %7 to i64
  %12 = select i1 %8, i64 %10, i64 %11
  %13 = icmp eq i64 %12, 0
  br i1 %13, label %44, label %14

14:                                               ; preds = %4
  %15 = tail call zeroext i1 @_ZNK4GURL13IsAboutSrcdocEv(%class.GURL* %0) #7
  br i1 %15, label %44, label %16

16:                                               ; preds = %14
  %17 = tail call dereferenceable(24) %"class.std::__1::vector"* @_ZN3url23GetEmptyDocumentSchemesEv() #7
  %18 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %17, i64 0, i32 0, i32 0
  %19 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %18, align 8
  %20 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %17, i64 0, i32 0, i32 1
  %21 = load %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"** %20, align 8
  %22 = icmp eq %"class.std::__1::basic_string"* %19, %21
  br i1 %22, label %41, label %25

23:                                               ; preds = %25
  %24 = icmp eq %"class.std::__1::basic_string"* %40, %21
  br i1 %24, label %41, label %25

25:                                               ; preds = %16, %23
  %26 = phi %"class.std::__1::basic_string"* [ %40, %23 ], [ %19, %16 ]
  %27 = bitcast %"class.std::__1::basic_string"* %26 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %28 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %27, i64 0, i32 1, i32 0
  %29 = load i8, i8* %28, align 1
  %30 = icmp slt i8 %29, 0
  %31 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = bitcast %"class.std::__1::basic_string"* %26 to i8*
  %34 = select i1 %30, i8* %32, i8* %33
  %35 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %26, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %36 = load i64, i64* %35, align 8
  %37 = zext i8 %29 to i64
  %38 = select i1 %30, i64 %36, i64 %37
  %39 = tail call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %0, i8* %34, i64 %38) #7
  %40 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %26, i64 1
  br i1 %39, label %44, label %23

41:                                               ; preds = %23, %16
  %42 = tail call zeroext i1 @_ZN5blink18IsRendererDebugURLERK4GURL(%class.GURL* dereferenceable(120) %0) #7
  %43 = xor i1 %42, true
  br label %44

44:                                               ; preds = %25, %41, %14, %4, %1
  %45 = phi i1 [ false, %1 ], [ false, %4 ], [ false, %14 ], [ %43, %41 ], [ false, %25 ]
  ret i1 %45
}

declare zeroext i1 @_ZNK4GURL13IsAboutSrcdocEv(%class.GURL*) local_unnamed_addr #1

declare dereferenceable(24) %"class.std::__1::vector"* @_ZN3url23GetEmptyDocumentSchemesEv() local_unnamed_addr #1

declare zeroext i1 @_ZN5blink18IsRendererDebugURLERK4GURL(%class.GURL* dereferenceable(120)) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN7content20IsSafeRedirectTargetERK4GURLS2_(%class.GURL* dereferenceable(120), %class.GURL* dereferenceable(120)) local_unnamed_addr #0 {
  %3 = alloca %"class.base::BasicStringPiece", align 8
  %4 = load atomic i8, i8* bitcast (i64* @_ZGVZN7content20IsSafeRedirectTargetERK4GURLS2_E14kUnsafeSchemes to i8*) acquire, align 8
  %5 = icmp eq i8 %4, 0
  br i1 %5, label %6, label %117, !prof !2

6:                                                ; preds = %2
  %7 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN7content20IsSafeRedirectTargetERK4GURLS2_E14kUnsafeSchemes) #7
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %117, label %9

9:                                                ; preds = %6
  %10 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url12kAboutSchemeE, i64 0, i64 0)) #7
  %11 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url11kFileSchemeE, i64 0, i64 0)) #7
  %12 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url17kFileSystemSchemeE, i64 0, i64 0)) #7
  %13 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url11kBlobSchemeE, i64 0, i64 0)) #7
  %14 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url11kDataSchemeE, i64 0, i64 0)) #7
  %15 = tail call i8* @_Znwm(i64 80) #8
  %16 = bitcast i8* %15 to %"class.base::BasicStringPiece"*
  %17 = getelementptr inbounds i8, i8* %15, i64 80
  %18 = bitcast i8* %17 to %"class.base::BasicStringPiece"*
  %19 = bitcast i8* %15 to i8**
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url12kAboutSchemeE, i64 0, i64 0), i8** %19, align 8
  %20 = getelementptr inbounds i8, i8* %15, i64 8
  %21 = bitcast i8* %20 to i64*
  store i64 %10, i64* %21, align 8
  %22 = getelementptr inbounds i8, i8* %15, i64 16
  %23 = bitcast i8* %22 to i8**
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url11kFileSchemeE, i64 0, i64 0), i8** %23, align 8
  %24 = getelementptr inbounds i8, i8* %15, i64 24
  %25 = bitcast i8* %24 to i64*
  store i64 %11, i64* %25, align 8
  %26 = getelementptr inbounds i8, i8* %15, i64 32
  %27 = bitcast i8* %26 to i8**
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url17kFileSystemSchemeE, i64 0, i64 0), i8** %27, align 8
  %28 = getelementptr inbounds i8, i8* %15, i64 40
  %29 = bitcast i8* %28 to i64*
  store i64 %12, i64* %29, align 8
  %30 = getelementptr inbounds i8, i8* %15, i64 48
  %31 = bitcast i8* %30 to i8**
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url11kBlobSchemeE, i64 0, i64 0), i8** %31, align 8
  %32 = getelementptr inbounds i8, i8* %15, i64 56
  %33 = bitcast i8* %32 to i64*
  store i64 %13, i64* %33, align 8
  %34 = getelementptr inbounds i8, i8* %15, i64 64
  %35 = bitcast i8* %34 to i8**
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url11kDataSchemeE, i64 0, i64 0), i8** %35, align 8
  %36 = getelementptr inbounds i8, i8* %15, i64 72
  %37 = bitcast i8* %36 to i64*
  store i64 %14, i64* %37, align 8
  %38 = bitcast i8* %22 to %"class.base::BasicStringPiece"*
  %39 = bitcast i8* %22 to i8**
  %40 = getelementptr inbounds i8, i8* %15, i64 24
  %41 = bitcast i8* %40 to i64*
  %42 = bitcast i8* %15 to i8**
  %43 = load i8*, i8** %42, align 8
  %44 = getelementptr inbounds i8, i8* %15, i64 8
  %45 = bitcast i8* %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = icmp ugt i64 %11, %46
  %48 = select i1 %47, i64 %46, i64 %11
  %49 = tail call i32 @memcmp(i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url11kFileSchemeE, i64 0, i64 0), i8* %43, i64 %48) #7
  %50 = icmp eq i32 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %9
  %52 = icmp ult i64 %11, %46
  br i1 %52, label %55, label %202

53:                                               ; preds = %9
  %54 = icmp slt i32 %49, 0
  br i1 %54, label %55, label %202

55:                                               ; preds = %53, %51
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %22, i8* nonnull align 8 %15, i64 16, i1 false) #7
  br label %202

56:                                               ; preds = %314
  %57 = icmp ult i64 %323, %325
  br i1 %57, label %60, label %67

58:                                               ; preds = %314
  %59 = icmp sgt i32 %328, -1
  br i1 %59, label %67, label %60

60:                                               ; preds = %58, %56
  %61 = load i8*, i8** %208, align 8
  %62 = load i64, i64* %211, align 8
  %63 = icmp ugt i64 %325, %62
  %64 = select i1 %63, i64 %62, i64 %325
  %65 = tail call i32 @memcmp(i8* %324, i8* %61, i64 %64) #7
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %178, label %176

67:                                               ; preds = %56, %58, %176, %178, %187, %189, %198, %200
  %68 = phi %"class.base::BasicStringPiece"* [ %16, %58 ], [ %16, %56 ], [ %38, %176 ], [ %38, %178 ], [ %207, %187 ], [ %207, %189 ], [ %243, %198 ], [ %243, %200 ]
  %69 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %68, i64 2
  %70 = icmp eq %"class.base::BasicStringPiece"* %69, %18
  br i1 %70, label %107, label %71

71:                                               ; preds = %67
  %72 = ptrtoint %"class.base::BasicStringPiece"* %68 to i64
  %73 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %68, i64 1
  br label %74

74:                                               ; preds = %100, %71
  %75 = phi %"class.base::BasicStringPiece"* [ %104, %100 ], [ %68, %71 ]
  %76 = phi %"class.base::BasicStringPiece"* [ %102, %100 ], [ %69, %71 ]
  %77 = phi %"class.base::BasicStringPiece"* [ %76, %100 ], [ %73, %71 ]
  %78 = phi i64 [ %101, %100 ], [ %72, %71 ]
  %79 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %75, i64 0, i32 0
  %80 = load i8*, i8** %79, align 8
  %81 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %75, i64 0, i32 1
  %82 = load i64, i64* %81, align 8
  %83 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %76, i64 0, i32 0
  %84 = load i8*, i8** %83, align 8
  %85 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %77, i64 1, i32 1
  %86 = load i64, i64* %85, align 8
  %87 = icmp ugt i64 %82, %86
  %88 = select i1 %87, i64 %86, i64 %82
  %89 = tail call i32 @memcmp(i8* %80, i8* %84, i64 %88) #7
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %93

91:                                               ; preds = %74
  %92 = icmp ult i64 %82, %86
  br i1 %92, label %95, label %100

93:                                               ; preds = %74
  %94 = icmp sgt i32 %89, -1
  br i1 %94, label %100, label %95

95:                                               ; preds = %93, %91
  %96 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %75, i64 1
  %97 = ptrtoint %"class.base::BasicStringPiece"* %96 to i64
  %98 = bitcast %"class.base::BasicStringPiece"* %96 to i8*
  %99 = bitcast %"class.base::BasicStringPiece"* %76 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %98, i8* align 8 %99, i64 16, i1 false) #7
  br label %100

100:                                              ; preds = %95, %93, %91
  %101 = phi i64 [ %78, %93 ], [ %97, %95 ], [ %78, %91 ]
  %102 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %76, i64 1
  %103 = icmp eq %"class.base::BasicStringPiece"* %102, %18
  %104 = inttoptr i64 %101 to %"class.base::BasicStringPiece"*
  br i1 %103, label %105, label %74

105:                                              ; preds = %100
  %106 = inttoptr i64 %101 to %"class.base::BasicStringPiece"*
  br label %107

107:                                              ; preds = %105, %67
  %108 = phi %"class.base::BasicStringPiece"* [ %68, %67 ], [ %106, %105 ]
  %109 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %108, i64 1
  %110 = ptrtoint %"class.base::BasicStringPiece"* %109 to i64
  br label %111

111:                                              ; preds = %198, %200, %107
  %112 = phi i64 [ %110, %107 ], [ %319, %200 ], [ %319, %198 ]
  %113 = inttoptr i64 %112 to %"class.base::BasicStringPiece"*
  %114 = icmp eq %"class.base::BasicStringPiece"* %113, %18
  %115 = select i1 %114, i64 %319, i64 %112
  store i64 %318, i64* bitcast (%"class.base::NoDestructor"* @_ZZN7content20IsSafeRedirectTargetERK4GURLS2_E14kUnsafeSchemes to i64*), align 8
  store i64 %115, i64* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN7content20IsSafeRedirectTargetERK4GURLS2_E14kUnsafeSchemes, i64 0, i32 0, i64 8) to i64*), align 8
  store i64 %319, i64* bitcast (i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN7content20IsSafeRedirectTargetERK4GURLS2_E14kUnsafeSchemes, i64 0, i32 0, i64 16) to i64*), align 8
  %116 = tail call {}* @llvm.invariant.start.p0i8(i64 24, i8* getelementptr inbounds (%"class.base::NoDestructor", %"class.base::NoDestructor"* @_ZZN7content20IsSafeRedirectTargetERK4GURLS2_E14kUnsafeSchemes, i64 0, i32 0, i64 0))
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN7content20IsSafeRedirectTargetERK4GURLS2_E14kUnsafeSchemes) #7
  br label %117

117:                                              ; preds = %6, %111, %2
  %118 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN7content21kChromeDevToolsSchemeE, i64 0, i64 0)) #7
  %119 = tail call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN7content21kChromeDevToolsSchemeE, i64 0, i64 0), i64 %118) #7
  br i1 %119, label %174, label %120

120:                                              ; preds = %117
  %121 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN7content15kChromeUISchemeE, i64 0, i64 0)) #7
  %122 = tail call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN7content15kChromeUISchemeE, i64 0, i64 0), i64 %121) #7
  br i1 %122, label %174, label %123

123:                                              ; preds = %120
  %124 = tail call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN7content24kChromeUIUntrustedSchemeE, i64 0, i64 0)) #7
  %125 = tail call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN7content24kChromeUIUntrustedSchemeE, i64 0, i64 0), i64 %124) #7
  br i1 %125, label %174, label %126

126:                                              ; preds = %123
  %127 = bitcast %"class.base::BasicStringPiece"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %127) #7
  %128 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 0, i32 1
  %129 = load i32, i32* %128, align 4
  %130 = icmp slt i32 %129, 1
  br i1 %130, label %145, label %131

131:                                              ; preds = %126
  %132 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 2, i32 0, i32 0
  %133 = load i32, i32* %132, align 4
  %134 = sext i32 %133 to i64
  %135 = bitcast %class.GURL* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %136 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %135, i64 0, i32 1, i32 0
  %137 = load i8, i8* %136, align 1
  %138 = icmp slt i8 %137, 0
  %139 = getelementptr inbounds %class.GURL, %class.GURL* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %140 = load i8*, i8** %139, align 8
  %141 = bitcast %class.GURL* %1 to i8*
  %142 = select i1 %138, i8* %140, i8* %141
  %143 = getelementptr inbounds i8, i8* %142, i64 %134
  %144 = sext i32 %129 to i64
  br label %145

145:                                              ; preds = %126, %131
  %146 = phi i8* [ %143, %131 ], [ null, %126 ]
  %147 = phi i64 [ %144, %131 ], [ 0, %126 ]
  %148 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %3, i64 0, i32 0
  store i8* %146, i8** %148, align 8
  %149 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %3, i64 0, i32 1
  store i64 %147, i64* %149, align 8
  %150 = call zeroext i1 @_ZNK4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_6vectorIS6_NS3_9allocatorIS6_EEEEE8containsIS6_EEbRKT_(%"class.base::internal::flat_tree"* bitcast (%"class.base::NoDestructor"* @_ZZN7content20IsSafeRedirectTargetERK4GURLS2_E14kUnsafeSchemes to %"class.base::internal::flat_tree"*), %"class.base::BasicStringPiece"* nonnull dereferenceable(16) %3)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %127) #7
  br i1 %150, label %151, label %174

151:                                              ; preds = %145
  %152 = bitcast %class.GURL* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %153 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %152, i64 0, i32 1, i32 0
  %154 = load i8, i8* %153, align 1
  %155 = icmp slt i8 %154, 0
  %156 = getelementptr inbounds %class.GURL, %class.GURL* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %157 = load i64, i64* %156, align 8
  %158 = zext i8 %154 to i64
  %159 = select i1 %155, i64 %157, i64 %158
  %160 = icmp eq i64 %159, 0
  br i1 %160, label %174, label %161

161:                                              ; preds = %151
  %162 = call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url11kFileSchemeE, i64 0, i64 0)) #7
  %163 = call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %0, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url11kFileSchemeE, i64 0, i64 0), i64 %162) #7
  br i1 %163, label %164, label %167

164:                                              ; preds = %161
  %165 = call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url11kFileSchemeE, i64 0, i64 0)) #7
  %166 = call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url11kFileSchemeE, i64 0, i64 0), i64 %165) #7
  br i1 %166, label %174, label %167

167:                                              ; preds = %164, %161
  %168 = call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url17kFileSystemSchemeE, i64 0, i64 0)) #7
  %169 = call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %0, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url17kFileSystemSchemeE, i64 0, i64 0), i64 %168) #7
  br i1 %169, label %170, label %173

170:                                              ; preds = %167
  %171 = call i64 @strlen(i8* nonnull getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url17kFileSystemSchemeE, i64 0, i64 0)) #7
  %172 = call zeroext i1 @_ZNK4GURL8SchemeIsEN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEE(%class.GURL* %1, i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url17kFileSystemSchemeE, i64 0, i64 0), i64 %171) #7
  br i1 %172, label %174, label %173

173:                                              ; preds = %170, %167
  br label %174

174:                                              ; preds = %117, %120, %170, %164, %151, %145, %123, %173
  %175 = phi i1 [ false, %173 ], [ false, %123 ], [ true, %145 ], [ false, %151 ], [ true, %164 ], [ true, %170 ], [ false, %120 ], [ false, %117 ]
  ret i1 %175

176:                                              ; preds = %60
  %177 = icmp sgt i32 %65, -1
  br i1 %177, label %67, label %180

178:                                              ; preds = %60
  %179 = icmp ult i64 %325, %62
  br i1 %179, label %180, label %67

180:                                              ; preds = %178, %176
  %181 = load i8*, i8** %244, align 8
  %182 = load i64, i64* %247, align 8
  %183 = icmp ugt i64 %62, %182
  %184 = select i1 %183, i64 %182, i64 %62
  %185 = tail call i32 @memcmp(i8* %61, i8* %181, i64 %184) #7
  %186 = icmp eq i32 %185, 0
  br i1 %186, label %189, label %187

187:                                              ; preds = %180
  %188 = icmp sgt i32 %185, -1
  br i1 %188, label %67, label %191

189:                                              ; preds = %180
  %190 = icmp ult i64 %62, %182
  br i1 %190, label %191, label %67

191:                                              ; preds = %189, %187
  %192 = load i8*, i8** %281, align 8
  %193 = load i64, i64* %284, align 8
  %194 = icmp ugt i64 %182, %193
  %195 = select i1 %194, i64 %193, i64 %182
  %196 = tail call i32 @memcmp(i8* %181, i8* %192, i64 %195) #7
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %200, label %198

198:                                              ; preds = %191
  %199 = icmp sgt i32 %196, -1
  br i1 %199, label %67, label %111

200:                                              ; preds = %191
  %201 = icmp ult i64 %182, %193
  br i1 %201, label %111, label %67

202:                                              ; preds = %55, %51, %53
  %203 = phi %"class.base::BasicStringPiece"* [ %38, %53 ], [ %38, %51 ], [ %16, %55 ]
  %204 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %203, i64 0, i32 0
  store i8* getelementptr inbounds ([0 x i8], [0 x i8]* @_ZN3url11kFileSchemeE, i64 0, i64 0), i8** %204, align 8
  %205 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %203, i64 0, i32 1
  store i64 %11, i64* %205, align 8
  %206 = getelementptr inbounds i8, i8* %15, i64 32
  %207 = bitcast i8* %206 to %"class.base::BasicStringPiece"*
  %208 = bitcast i8* %206 to i8**
  %209 = load i8*, i8** %208, align 8
  %210 = getelementptr inbounds i8, i8* %15, i64 40
  %211 = bitcast i8* %210 to i64*
  %212 = load i64, i64* %211, align 8
  %213 = getelementptr inbounds i8, i8* %15, i64 16
  %214 = bitcast i8* %213 to %"class.base::BasicStringPiece"*
  %215 = bitcast i8* %213 to i8**
  %216 = load i8*, i8** %215, align 8
  %217 = getelementptr inbounds i8, i8* %15, i64 24
  %218 = bitcast i8* %217 to i64*
  %219 = load i64, i64* %218, align 8
  %220 = icmp ugt i64 %212, %219
  %221 = select i1 %220, i64 %219, i64 %212
  %222 = tail call i32 @memcmp(i8* %209, i8* %216, i64 %221) #7
  %223 = icmp eq i32 %222, 0
  br i1 %223, label %226, label %224

224:                                              ; preds = %202
  %225 = icmp slt i32 %222, 0
  br i1 %225, label %228, label %238

226:                                              ; preds = %202
  %227 = icmp ult i64 %212, %219
  br i1 %227, label %228, label %238

228:                                              ; preds = %226, %224
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %206, i8* align 8 %213, i64 16, i1 false) #7
  %229 = bitcast i8* %15 to i8**
  %230 = load i8*, i8** %229, align 8
  %231 = getelementptr inbounds i8, i8* %15, i64 8
  %232 = bitcast i8* %231 to i64*
  %233 = load i64, i64* %232, align 8
  %234 = icmp ugt i64 %212, %233
  %235 = select i1 %234, i64 %233, i64 %212
  %236 = tail call i32 @memcmp(i8* %209, i8* %230, i64 %235) #7
  %237 = icmp eq i32 %236, 0
  br i1 %237, label %386, label %384

238:                                              ; preds = %388, %386, %384, %226, %224
  %239 = phi %"class.base::BasicStringPiece"* [ %207, %224 ], [ %207, %226 ], [ %214, %384 ], [ %214, %386 ], [ %16, %388 ]
  %240 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %239, i64 0, i32 0
  store i8* %209, i8** %240, align 8
  %241 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %239, i64 0, i32 1
  store i64 %212, i64* %241, align 8
  %242 = getelementptr inbounds i8, i8* %15, i64 48
  %243 = bitcast i8* %242 to %"class.base::BasicStringPiece"*
  %244 = bitcast i8* %242 to i8**
  %245 = load i8*, i8** %244, align 8
  %246 = getelementptr inbounds i8, i8* %15, i64 56
  %247 = bitcast i8* %246 to i64*
  %248 = load i64, i64* %247, align 8
  %249 = getelementptr inbounds i8, i8* %15, i64 32
  %250 = bitcast i8* %249 to %"class.base::BasicStringPiece"*
  %251 = bitcast i8* %249 to i8**
  %252 = load i8*, i8** %251, align 8
  %253 = getelementptr inbounds i8, i8* %15, i64 40
  %254 = bitcast i8* %253 to i64*
  %255 = load i64, i64* %254, align 8
  %256 = icmp ugt i64 %248, %255
  %257 = select i1 %256, i64 %255, i64 %248
  %258 = tail call i32 @memcmp(i8* %245, i8* %252, i64 %257) #7
  %259 = icmp eq i32 %258, 0
  br i1 %259, label %262, label %260

260:                                              ; preds = %238
  %261 = icmp slt i32 %258, 0
  br i1 %261, label %264, label %276

262:                                              ; preds = %238
  %263 = icmp ult i64 %248, %255
  br i1 %263, label %264, label %276

264:                                              ; preds = %262, %260
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %242, i8* align 8 %249, i64 16, i1 false) #7
  %265 = getelementptr inbounds i8, i8* %15, i64 16
  %266 = bitcast i8* %265 to %"class.base::BasicStringPiece"*
  %267 = bitcast i8* %265 to i8**
  %268 = load i8*, i8** %267, align 8
  %269 = getelementptr inbounds i8, i8* %15, i64 24
  %270 = bitcast i8* %269 to i64*
  %271 = load i64, i64* %270, align 8
  %272 = icmp ugt i64 %248, %271
  %273 = select i1 %272, i64 %271, i64 %248
  %274 = tail call i32 @memcmp(i8* %245, i8* %268, i64 %273) #7
  %275 = icmp eq i32 %274, 0
  br i1 %275, label %367, label %365

276:                                              ; preds = %383, %381, %379, %367, %365, %262, %260
  %277 = phi %"class.base::BasicStringPiece"* [ %243, %260 ], [ %243, %262 ], [ %250, %365 ], [ %250, %367 ], [ %266, %379 ], [ %266, %381 ], [ %16, %383 ]
  %278 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %277, i64 0, i32 0
  store i8* %245, i8** %278, align 8
  %279 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %277, i64 0, i32 1
  store i64 %248, i64* %279, align 8
  %280 = getelementptr inbounds i8, i8* %15, i64 64
  %281 = bitcast i8* %280 to i8**
  %282 = load i8*, i8** %281, align 8
  %283 = getelementptr inbounds i8, i8* %15, i64 72
  %284 = bitcast i8* %283 to i64*
  %285 = load i64, i64* %284, align 8
  %286 = bitcast i8* %280 to %"class.base::BasicStringPiece"*
  %287 = getelementptr inbounds i8, i8* %15, i64 48
  %288 = bitcast i8* %287 to %"class.base::BasicStringPiece"*
  %289 = bitcast i8* %287 to i8**
  %290 = load i8*, i8** %289, align 8
  %291 = getelementptr inbounds i8, i8* %15, i64 56
  %292 = bitcast i8* %291 to i64*
  %293 = load i64, i64* %292, align 8
  %294 = icmp ugt i64 %285, %293
  %295 = select i1 %294, i64 %293, i64 %285
  %296 = tail call i32 @memcmp(i8* %282, i8* %290, i64 %295) #7
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %300, label %298

298:                                              ; preds = %276
  %299 = icmp slt i32 %296, 0
  br i1 %299, label %302, label %314

300:                                              ; preds = %276
  %301 = icmp ult i64 %285, %293
  br i1 %301, label %302, label %314

302:                                              ; preds = %300, %298
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %280, i8* align 8 %287, i64 16, i1 false) #7
  %303 = getelementptr inbounds i8, i8* %15, i64 32
  %304 = bitcast i8* %303 to %"class.base::BasicStringPiece"*
  %305 = bitcast i8* %303 to i8**
  %306 = load i8*, i8** %305, align 8
  %307 = getelementptr inbounds i8, i8* %15, i64 40
  %308 = bitcast i8* %307 to i64*
  %309 = load i64, i64* %308, align 8
  %310 = icmp ugt i64 %285, %309
  %311 = select i1 %310, i64 %309, i64 %285
  %312 = tail call i32 @memcmp(i8* %282, i8* %306, i64 %311) #7
  %313 = icmp eq i32 %312, 0
  br i1 %313, label %332, label %330

314:                                              ; preds = %364, %362, %360, %348, %346, %332, %330, %298, %300
  %315 = phi %"class.base::BasicStringPiece"* [ %286, %298 ], [ %286, %300 ], [ %288, %330 ], [ %288, %332 ], [ %304, %346 ], [ %304, %348 ], [ %336, %360 ], [ %336, %362 ], [ %16, %364 ]
  %316 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %315, i64 0, i32 0
  store i8* %282, i8** %316, align 8
  %317 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %315, i64 0, i32 1
  store i64 %285, i64* %317, align 8
  %318 = ptrtoint i8* %15 to i64
  %319 = ptrtoint i8* %17 to i64
  %320 = load i8*, i8** %19, align 8
  %321 = getelementptr inbounds i8, i8* %15, i64 8
  %322 = bitcast i8* %321 to i64*
  %323 = load i64, i64* %322, align 8
  %324 = load i8*, i8** %39, align 8
  %325 = load i64, i64* %41, align 8
  %326 = icmp ugt i64 %323, %325
  %327 = select i1 %326, i64 %325, i64 %323
  %328 = tail call i32 @memcmp(i8* %320, i8* %324, i64 %327) #7
  %329 = icmp eq i32 %328, 0
  br i1 %329, label %56, label %58

330:                                              ; preds = %302
  %331 = icmp slt i32 %312, 0
  br i1 %331, label %334, label %314

332:                                              ; preds = %302
  %333 = icmp ult i64 %285, %309
  br i1 %333, label %334, label %314

334:                                              ; preds = %332, %330
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %287, i8* align 8 %303, i64 16, i1 false) #7
  %335 = getelementptr inbounds i8, i8* %15, i64 16
  %336 = bitcast i8* %335 to %"class.base::BasicStringPiece"*
  %337 = bitcast i8* %335 to i8**
  %338 = load i8*, i8** %337, align 8
  %339 = getelementptr inbounds i8, i8* %15, i64 24
  %340 = bitcast i8* %339 to i64*
  %341 = load i64, i64* %340, align 8
  %342 = icmp ugt i64 %285, %341
  %343 = select i1 %342, i64 %341, i64 %285
  %344 = tail call i32 @memcmp(i8* %282, i8* %338, i64 %343) #7
  %345 = icmp eq i32 %344, 0
  br i1 %345, label %348, label %346

346:                                              ; preds = %334
  %347 = icmp slt i32 %344, 0
  br i1 %347, label %350, label %314

348:                                              ; preds = %334
  %349 = icmp ult i64 %285, %341
  br i1 %349, label %350, label %314

350:                                              ; preds = %348, %346
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %303, i8* align 8 %335, i64 16, i1 false) #7
  %351 = bitcast i8* %15 to i8**
  %352 = load i8*, i8** %351, align 8
  %353 = getelementptr inbounds i8, i8* %15, i64 8
  %354 = bitcast i8* %353 to i64*
  %355 = load i64, i64* %354, align 8
  %356 = icmp ugt i64 %285, %355
  %357 = select i1 %356, i64 %355, i64 %285
  %358 = tail call i32 @memcmp(i8* %282, i8* %352, i64 %357) #7
  %359 = icmp eq i32 %358, 0
  br i1 %359, label %362, label %360

360:                                              ; preds = %350
  %361 = icmp slt i32 %358, 0
  br i1 %361, label %364, label %314

362:                                              ; preds = %350
  %363 = icmp ult i64 %285, %355
  br i1 %363, label %364, label %314

364:                                              ; preds = %362, %360
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %335, i8* nonnull align 8 %15, i64 16, i1 false) #7
  br label %314

365:                                              ; preds = %264
  %366 = icmp slt i32 %274, 0
  br i1 %366, label %369, label %276

367:                                              ; preds = %264
  %368 = icmp ult i64 %248, %271
  br i1 %368, label %369, label %276

369:                                              ; preds = %367, %365
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %249, i8* align 8 %265, i64 16, i1 false) #7
  %370 = bitcast i8* %15 to i8**
  %371 = load i8*, i8** %370, align 8
  %372 = getelementptr inbounds i8, i8* %15, i64 8
  %373 = bitcast i8* %372 to i64*
  %374 = load i64, i64* %373, align 8
  %375 = icmp ugt i64 %248, %374
  %376 = select i1 %375, i64 %374, i64 %248
  %377 = tail call i32 @memcmp(i8* %245, i8* %371, i64 %376) #7
  %378 = icmp eq i32 %377, 0
  br i1 %378, label %381, label %379

379:                                              ; preds = %369
  %380 = icmp slt i32 %377, 0
  br i1 %380, label %383, label %276

381:                                              ; preds = %369
  %382 = icmp ult i64 %248, %374
  br i1 %382, label %383, label %276

383:                                              ; preds = %381, %379
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %265, i8* nonnull align 8 %15, i64 16, i1 false) #7
  br label %276

384:                                              ; preds = %228
  %385 = icmp slt i32 %236, 0
  br i1 %385, label %388, label %238

386:                                              ; preds = %228
  %387 = icmp ult i64 %212, %233
  br i1 %387, label %388, label %238

388:                                              ; preds = %386, %384
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %213, i8* nonnull align 8 %15, i64 16, i1 false) #7
  br label %238
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare {}* @llvm.invariant.start.p0i8(i64 immarg, i8* nocapture) #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden zeroext i1 @_ZNK4base8internal9flat_treeINS_16BasicStringPieceIcNSt3__111char_traitsIcEEEENS_8identityENS3_4lessIvEENS3_6vectorIS6_NS3_9allocatorIS6_EEEEE8containsIS6_EEbRKT_(%"class.base::internal::flat_tree"*, %"class.base::BasicStringPiece"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %0, i64 0, i32 0, i32 0, i32 0
  %4 = load %"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"** %3, align 8
  %5 = getelementptr inbounds %"class.base::internal::flat_tree", %"class.base::internal::flat_tree"* %0, i64 0, i32 0, i32 0, i32 1
  %6 = bitcast %"class.base::BasicStringPiece"** %5 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = ptrtoint %"class.base::BasicStringPiece"* %4 to i64
  %9 = sub i64 %7, %8
  %10 = icmp eq i64 %9, 0
  %11 = inttoptr i64 %7 to %"class.base::BasicStringPiece"*
  br i1 %10, label %43, label %12

12:                                               ; preds = %2
  %13 = ashr exact i64 %9, 4
  %14 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  br label %18

18:                                               ; preds = %39, %12
  %19 = phi %"class.base::BasicStringPiece"* [ %4, %12 ], [ %41, %39 ]
  %20 = phi i64 [ %13, %12 ], [ %40, %39 ]
  %21 = lshr i64 %20, 1
  %22 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %19, i64 %21
  %23 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %22, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %19, i64 %21, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = icmp ugt i64 %26, %17
  %28 = select i1 %27, i64 %17, i64 %26
  %29 = tail call i32 @memcmp(i8* %24, i8* %15, i64 %28) #7
  %30 = icmp eq i32 %29, 0
  br i1 %30, label %31, label %33

31:                                               ; preds = %18
  %32 = icmp ult i64 %26, %17
  br i1 %32, label %35, label %39

33:                                               ; preds = %18
  %34 = icmp slt i32 %29, 0
  br i1 %34, label %35, label %39

35:                                               ; preds = %33, %31
  %36 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %22, i64 1
  %37 = xor i64 %21, -1
  %38 = add i64 %20, %37
  br label %39

39:                                               ; preds = %35, %33, %31
  %40 = phi i64 [ %38, %35 ], [ %21, %33 ], [ %21, %31 ]
  %41 = phi %"class.base::BasicStringPiece"* [ %36, %35 ], [ %19, %33 ], [ %19, %31 ]
  %42 = icmp eq i64 %40, 0
  br i1 %42, label %43, label %18

43:                                               ; preds = %39, %2
  %44 = phi %"class.base::BasicStringPiece"* [ %4, %2 ], [ %41, %39 ]
  %45 = icmp eq %"class.base::BasicStringPiece"* %44, %11
  br i1 %45, label %67, label %46

46:                                               ; preds = %43
  %47 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 0
  %48 = load i8*, i8** %47, align 8
  %49 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 1
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %44, i64 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %44, i64 0, i32 1
  %54 = load i64, i64* %53, align 8
  %55 = icmp ugt i64 %50, %54
  %56 = select i1 %55, i64 %54, i64 %50
  %57 = tail call i32 @memcmp(i8* %48, i8* %52, i64 %56) #7
  %58 = icmp eq i32 %57, 0
  br i1 %58, label %59, label %64

59:                                               ; preds = %46
  %60 = icmp eq i64 %50, %54
  br i1 %60, label %64, label %61

61:                                               ; preds = %59
  %62 = icmp ult i64 %50, %54
  %63 = select i1 %62, i32 -1, i32 1
  br label %64

64:                                               ; preds = %46, %59, %61
  %65 = phi i32 [ %63, %61 ], [ %57, %46 ], [ 0, %59 ]
  %66 = icmp sgt i32 %65, -1
  br label %67

67:                                               ; preds = %43, %64
  %68 = phi i1 [ false, %43 ], [ %66, %64 ]
  ret i1 %68
}

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #2

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #5

; Function Attrs: nofree nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #6

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind }
attributes #3 = { nofree nounwind }
attributes #4 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
