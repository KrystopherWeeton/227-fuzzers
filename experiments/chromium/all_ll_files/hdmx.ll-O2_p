; ModuleID = '../../third_party/ots/src/src/hdmx.cc'
source_filename = "../../third_party/ots/src/src/hdmx.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.ots::OpenTypeHDMX" = type { %"class.ots::Table.base", i16, i32, i32, %"class.std::__1::vector" }
%"class.ots::Table.base" = type <{ i32 (...)**, i32, i32, %"struct.ots::Font"*, i8 }>
%"struct.ots::Font" = type { %"struct.ots::FontFile"*, i32, i16, i16, i16, i16, %"class.std::__1::map.15" }
%"struct.ots::FontFile" = type { %"class.ots::OTSContext"*, %"class.std::__1::map", %"class.std::__1::map.4" }
%"class.ots::OTSContext" = type { i32 (...)** }
%"class.std::__1::map" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair", %"class.std::__1::__compressed_pair.1" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.1" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"struct.std::__1::__compressed_pair_elem.2" = type { i64 }
%"class.std::__1::map.4" = type { %"class.std::__1::__tree.5" }
%"class.std::__1::__tree.5" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.6", %"class.std::__1::__compressed_pair.10" }
%"class.std::__1::__compressed_pair.6" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.10" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::map.15" = type { %"class.std::__1::__tree.16" }
%"class.std::__1::__tree.16" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.17", %"class.std::__1::__compressed_pair.21" }
%"class.std::__1::__compressed_pair.17" = type { %"struct.std::__1::__compressed_pair_elem" }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.2" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.ots::OpenTypeHDMXDeviceRecord"*, %"struct.ots::OpenTypeHDMXDeviceRecord"*, %"class.std::__1::__compressed_pair.31" }
%"struct.ots::OpenTypeHDMXDeviceRecord" = type { i8, i8, %"class.std::__1::vector.24" }
%"class.std::__1::vector.24" = type { %"class.std::__1::__vector_base.25" }
%"class.std::__1::__vector_base.25" = type { i8*, i8*, %"class.std::__1::__compressed_pair.26" }
%"class.std::__1::__compressed_pair.26" = type { %"struct.std::__1::__compressed_pair_elem.27" }
%"struct.std::__1::__compressed_pair_elem.27" = type { i8* }
%"class.std::__1::__compressed_pair.31" = type { %"struct.std::__1::__compressed_pair_elem.32" }
%"struct.std::__1::__compressed_pair_elem.32" = type { %"struct.ots::OpenTypeHDMXDeviceRecord"* }
%"class.ots::Table" = type <{ i32 (...)**, i32, i32, %"struct.ots::Font"*, i8, [7 x i8] }>
%"class.std::__1::__vector_base_common" = type { i8 }
%"class.ots::OTSStream" = type <{ i32 (...)**, i32, [4 x i8] }>

$_ZNSt3__16vectorIN3ots24OpenTypeHDMXDeviceRecordENS_9allocatorIS2_EEE7reserveEm = comdat any

$_ZN3ots12OpenTypeHDMXD2Ev = comdat any

$_ZN3ots12OpenTypeHDMXD0Ev = comdat any

$_ZNSt3__16vectorIN3ots24OpenTypeHDMXDeviceRecordENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_ = comdat any

@.str = private unnamed_addr constant [52 x i8] c"Missing maxp or head tables in font, needed by hdmx\00", align 1
@.str.1 = private unnamed_addr constant [80 x i8] c"the table should not be present when bit 2 and 4 of the head->flags are not set\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"Failed to read table header\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"Unsupported version: %u\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"Bad numRecords: %d\00", align 1
@.str.5 = private unnamed_addr constant [25 x i8] c"Bad sizeDeviceRecord: %d\00", align 1
@.str.6 = private unnamed_addr constant [28 x i8] c"Bad DeviceRecord padding %d\00", align 1
@.str.7 = private unnamed_addr constant [31 x i8] c"Failed to read DeviceRecord %d\00", align 1
@.str.8 = private unnamed_addr constant [30 x i8] c"DeviceRecord's are not sorted\00", align 1
@.str.9 = private unnamed_addr constant [49 x i8] c"Failed to read glyph width %d in DeviceRecord %d\00", align 1
@.str.10 = private unnamed_addr constant [39 x i8] c"DeviceRecord %d should be padded by %d\00", align 1
@.str.11 = private unnamed_addr constant [29 x i8] c"Failed to write table header\00", align 1
@.str.12 = private unnamed_addr constant [32 x i8] c"Failed to write DeviceRecord %d\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] zeroinitializer, align 1
@.str.14 = private unnamed_addr constant [37 x i8] c"Failed to write padding of length %d\00", align 1
@_ZTVN3ots12OpenTypeHDMXE = hidden unnamed_addr constant { [7 x i8*] } { [7 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.ots::OpenTypeHDMX"*)* @_ZN3ots12OpenTypeHDMXD2Ev to i8*), i8* bitcast (void (%"class.ots::OpenTypeHDMX"*)* @_ZN3ots12OpenTypeHDMXD0Ev to i8*), i8* bitcast (i1 (%"class.ots::OpenTypeHDMX"*, i8*, i64)* @_ZN3ots12OpenTypeHDMX5ParseEPKhm to i8*), i8* bitcast (i1 (%"class.ots::OpenTypeHDMX"*, %"class.ots::OTSStream"*)* @_ZN3ots12OpenTypeHDMX9SerializeEPNS_9OTSStreamE to i8*), i8* bitcast (i1 (%"class.ots::OpenTypeHDMX"*)* @_ZN3ots12OpenTypeHDMX15ShouldSerializeEv to i8*)] }, align 8

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3ots12OpenTypeHDMX5ParseEPKhm(%"class.ots::OpenTypeHDMX"*, i8*, i64) unnamed_addr #0 align 2 {
  %4 = alloca %"struct.ots::OpenTypeHDMXDeviceRecord", align 8
  %5 = bitcast %"class.ots::OpenTypeHDMX"* %0 to %"class.ots::Table"*
  %6 = getelementptr inbounds %"class.ots::OpenTypeHDMX", %"class.ots::OpenTypeHDMX"* %0, i64 0, i32 0, i32 3
  %7 = load %"struct.ots::Font"*, %"struct.ots::Font"** %6, align 8
  %8 = tail call %"class.ots::Table"* @_ZNK3ots4Font13GetTypedTableEj(%"struct.ots::Font"* %7, i32 1835104368) #9
  %9 = load %"struct.ots::Font"*, %"struct.ots::Font"** %6, align 8
  %10 = tail call %"class.ots::Table"* @_ZNK3ots4Font13GetTypedTableEj(%"struct.ots::Font"* %9, i32 1751474532) #9
  %11 = icmp ne %"class.ots::Table"* %10, null
  %12 = icmp ne %"class.ots::Table"* %8, null
  %13 = and i1 %12, %11
  br i1 %13, label %16, label %14

14:                                               ; preds = %3
  %15 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %5, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0)) #9
  br label %248

16:                                               ; preds = %3
  %17 = getelementptr inbounds %"class.ots::Table", %"class.ots::Table"* %10, i64 1
  %18 = bitcast %"class.ots::Table"* %17 to i16*
  %19 = load i16, i16* %18, align 8
  %20 = and i16 %19, 20
  %21 = icmp eq i16 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %16
  %23 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table4DropEPKcz(%"class.ots::Table"* %5, i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.1, i64 0, i64 0)) #9
  br label %248

24:                                               ; preds = %16
  %25 = icmp ult i64 %2, 2
  br i1 %25, label %38, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds %"class.ots::OpenTypeHDMX", %"class.ots::OpenTypeHDMX"* %0, i64 0, i32 1
  %28 = bitcast i8* %1 to i16*
  %29 = load i16, i16* %28, align 1
  %30 = tail call i16 @llvm.bswap.i16(i16 %29) #9
  store i16 %30, i16* %27, align 2
  %31 = icmp ult i64 %2, 4
  br i1 %31, label %38, label %32

32:                                               ; preds = %26
  %33 = getelementptr inbounds i8, i8* %1, i64 2
  %34 = bitcast i8* %33 to i16*
  %35 = load i16, i16* %34, align 1
  %36 = tail call i16 @llvm.bswap.i16(i16 %35) #9
  %37 = icmp ult i64 %2, 8
  br i1 %37, label %38, label %40

38:                                               ; preds = %32, %26, %24
  %39 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %5, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0)) #9
  br label %248

40:                                               ; preds = %32
  %41 = getelementptr inbounds %"class.ots::OpenTypeHDMX", %"class.ots::OpenTypeHDMX"* %0, i64 0, i32 2
  %42 = getelementptr inbounds i8, i8* %1, i64 4
  %43 = bitcast i8* %42 to i32*
  %44 = load i32, i32* %43, align 1
  %45 = tail call i32 @llvm.bswap.i32(i32 %44) #9
  store i32 %45, i32* %41, align 4
  %46 = icmp eq i16 %29, 0
  br i1 %46, label %50, label %47

47:                                               ; preds = %40
  %48 = zext i16 %30 to i32
  %49 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table4DropEPKcz(%"class.ots::Table"* %5, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0), i32 %48) #9
  br label %248

50:                                               ; preds = %40
  %51 = icmp slt i16 %36, 1
  br i1 %51, label %52, label %55

52:                                               ; preds = %50
  %53 = sext i16 %36 to i32
  %54 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table4DropEPKcz(%"class.ots::Table"* %5, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0), i32 %53) #9
  br label %248

55:                                               ; preds = %50
  %56 = getelementptr inbounds %"class.ots::Table", %"class.ots::Table"* %8, i64 0, i32 5, i64 1
  %57 = bitcast i8* %56 to i16*
  %58 = load i16, i16* %57, align 2
  %59 = zext i16 %58 to i32
  %60 = add nuw nsw i32 %59, 2
  %61 = icmp slt i32 %45, %60
  br i1 %61, label %62, label %64

62:                                               ; preds = %55
  %63 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table4DropEPKcz(%"class.ots::Table"* %5, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0), i32 %45) #9
  br label %248

64:                                               ; preds = %55
  %65 = sub nsw i32 %45, %60
  %66 = getelementptr inbounds %"class.ots::OpenTypeHDMX", %"class.ots::OpenTypeHDMX"* %0, i64 0, i32 3
  store i32 %65, i32* %66, align 8
  %67 = icmp sgt i32 %65, 3
  br i1 %67, label %68, label %70

68:                                               ; preds = %64
  %69 = tail call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %5, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6, i64 0, i64 0), i32 %65) #9
  br label %248

70:                                               ; preds = %64
  %71 = getelementptr inbounds %"class.ots::OpenTypeHDMX", %"class.ots::OpenTypeHDMX"* %0, i64 0, i32 4
  %72 = sext i16 %36 to i64
  tail call void @_ZNSt3__16vectorIN3ots24OpenTypeHDMXDeviceRecordENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector"* %71, i64 %72)
  %73 = sext i16 %36 to i32
  %74 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %4, i64 0, i32 0
  %75 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %4, i64 0, i32 2
  %76 = bitcast %"class.std::__1::vector.24"* %75 to i8*
  %77 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %4, i64 0, i32 1
  %78 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %4, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  %79 = bitcast i8** %78 to i64*
  %80 = bitcast %"class.std::__1::vector.24"* %75 to i64*
  %81 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %4, i64 0, i32 2, i32 0, i32 1
  %82 = bitcast i8** %81 to i64*
  %83 = getelementptr inbounds %"class.std::__1::vector.24", %"class.std::__1::vector.24"* %75, i64 0, i32 0, i32 0
  %84 = getelementptr inbounds %"class.ots::OpenTypeHDMX", %"class.ots::OpenTypeHDMX"* %0, i64 0, i32 4, i32 0, i32 1
  %85 = getelementptr inbounds %"class.ots::OpenTypeHDMX", %"class.ots::OpenTypeHDMX"* %0, i64 0, i32 4, i32 0, i32 2, i32 0, i32 0
  %86 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"* %4 to i16*
  %87 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"** %84 to i64*
  %88 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %4, i64 0, i32 2, i32 0, i32 0
  %89 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"* %4 to i64*
  br label %92

90:                                               ; preds = %245
  %91 = icmp eq i32 %247, %73
  br i1 %91, label %248, label %92

92:                                               ; preds = %90, %70
  %93 = phi i32 [ 0, %70 ], [ %247, %90 ]
  %94 = phi i8 [ 0, %70 ], [ %240, %90 ]
  %95 = phi i1 [ undef, %70 ], [ %238, %90 ]
  %96 = phi i64 [ 8, %70 ], [ %237, %90 ]
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %74) #9
  store i64 -6148914691236517206, i64* %89, align 8
  call void @llvm.memset.p0i8.i64(i8* align 8 %76, i8 0, i64 24, i1 false) #9
  %97 = add i64 %96, 1
  %98 = icmp ugt i64 %97, %2
  br i1 %98, label %104, label %99

99:                                               ; preds = %92
  %100 = getelementptr inbounds i8, i8* %1, i64 %96
  %101 = load i8, i8* %100, align 1
  store i8 %101, i8* %74, align 8
  %102 = add i64 %96, 2
  %103 = icmp ugt i64 %102, %2
  br i1 %103, label %104, label %107

104:                                              ; preds = %99, %92
  %105 = phi i64 [ %96, %92 ], [ %97, %99 ]
  %106 = call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %5, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.7, i64 0, i64 0), i32 %93) #9
  br label %236

107:                                              ; preds = %99
  %108 = getelementptr inbounds i8, i8* %1, i64 %97
  %109 = load i8, i8* %108, align 1
  store i8 %109, i8* %77, align 1
  %110 = icmp eq i32 %93, 0
  %111 = icmp ugt i8 %101, %94
  %112 = or i1 %110, %111
  br i1 %112, label %115, label %113

113:                                              ; preds = %107
  %114 = call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table4DropEPKcz(%"class.ots::Table"* %5, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i64 0, i64 0)) #9
  br label %236

115:                                              ; preds = %107
  %116 = load i16, i16* %57, align 2
  %117 = zext i16 %116 to i64
  %118 = icmp eq i16 %116, 0
  br i1 %118, label %182, label %119

119:                                              ; preds = %115
  %120 = call i8* @_Znwm(i64 %117) #10
  %121 = ptrtoint i8* %120 to i64
  %122 = getelementptr inbounds i8, i8* %120, i64 %117
  %123 = ptrtoint i8* %122 to i64
  store i64 %121, i64* %80, align 8
  store i64 %121, i64* %82, align 8
  store i64 %123, i64* %79, align 8
  %124 = load i16, i16* %57, align 2
  %125 = icmp eq i16 %124, 0
  br i1 %125, label %182, label %126

126:                                              ; preds = %119, %175
  %127 = phi i32 [ %176, %175 ], [ 0, %119 ]
  %128 = phi i64 [ %129, %175 ], [ %102, %119 ]
  %129 = add i64 %128, 1
  %130 = icmp ugt i64 %129, %2
  br i1 %130, label %180, label %131

131:                                              ; preds = %126
  %132 = getelementptr inbounds i8, i8* %1, i64 %128
  %133 = load i8, i8* %132, align 1
  %134 = load i8*, i8** %81, align 8
  %135 = load i8*, i8** %78, align 8
  %136 = icmp eq i8* %134, %135
  %137 = ptrtoint i8* %135 to i64
  br i1 %136, label %141, label %138

138:                                              ; preds = %131
  store i8 %133, i8* %134, align 1
  %139 = getelementptr inbounds i8, i8* %134, i64 1
  %140 = ptrtoint i8* %139 to i64
  store i64 %140, i64* %82, align 8
  br label %175

141:                                              ; preds = %131
  %142 = ptrtoint i8* %134 to i64
  %143 = load i64, i64* %80, align 8
  %144 = sub i64 %142, %143
  %145 = add i64 %144, 1
  %146 = icmp slt i64 %145, 0
  %147 = inttoptr i64 %143 to i8*
  br i1 %146, label %148, label %150

148:                                              ; preds = %141
  %149 = bitcast %"class.std::__1::vector.24"* %75 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %149) #11
  unreachable

150:                                              ; preds = %141
  %151 = sub i64 %137, %143
  %152 = icmp ult i64 %151, 4611686018427387903
  br i1 %152, label %153, label %158

153:                                              ; preds = %150
  %154 = shl i64 %151, 1
  %155 = icmp ult i64 %154, %145
  %156 = select i1 %155, i64 %145, i64 %154
  %157 = icmp eq i64 %156, 0
  br i1 %157, label %161, label %158

158:                                              ; preds = %153, %150
  %159 = phi i64 [ %156, %153 ], [ 9223372036854775807, %150 ]
  %160 = call i8* @_Znwm(i64 %159) #10
  br label %161

161:                                              ; preds = %158, %153
  %162 = phi i64 [ %159, %158 ], [ 0, %153 ]
  %163 = phi i8* [ %160, %158 ], [ null, %153 ]
  %164 = getelementptr inbounds i8, i8* %163, i64 %144
  %165 = getelementptr inbounds i8, i8* %163, i64 %162
  %166 = ptrtoint i8* %165 to i64
  store i8 %133, i8* %164, align 1
  %167 = getelementptr inbounds i8, i8* %164, i64 1
  %168 = ptrtoint i8* %167 to i64
  %169 = ptrtoint i8* %163 to i64
  %170 = icmp sgt i64 %144, 0
  br i1 %170, label %171, label %172

171:                                              ; preds = %161
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %163, i8* align 1 %147, i64 %144, i1 false) #9
  br label %172

172:                                              ; preds = %171, %161
  store i64 %169, i64* %80, align 8
  store i64 %168, i64* %82, align 8
  store i64 %166, i64* %79, align 8
  %173 = icmp eq i64 %143, 0
  br i1 %173, label %175, label %174

174:                                              ; preds = %172
  call void @_ZdlPv(i8* nonnull %147) #10
  br label %175

175:                                              ; preds = %138, %172, %174
  %176 = add nuw nsw i32 %127, 1
  %177 = load i16, i16* %57, align 2
  %178 = zext i16 %177 to i32
  %179 = icmp ult i32 %176, %178
  br i1 %179, label %126, label %182

180:                                              ; preds = %126
  %181 = call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %5, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.9, i64 0, i64 0), i32 %127, i32 %93) #9
  br label %236

182:                                              ; preds = %175, %115, %119
  %183 = phi i64 [ %102, %119 ], [ %102, %115 ], [ %129, %175 ]
  %184 = load i32, i32* %66, align 8
  %185 = icmp sgt i32 %184, 0
  br i1 %185, label %186, label %197

186:                                              ; preds = %182
  %187 = sext i32 %184 to i64
  %188 = icmp ugt i32 %184, 1073741824
  br i1 %188, label %195, label %189

189:                                              ; preds = %186
  %190 = add i64 %183, %187
  %191 = icmp ugt i64 %190, %2
  %192 = sub i64 %2, %187
  %193 = icmp ugt i64 %183, %192
  %194 = or i1 %191, %193
  br i1 %194, label %195, label %197

195:                                              ; preds = %186, %189
  %196 = call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %5, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.10, i64 0, i64 0), i32 %93, i32 %184) #9
  br label %236

197:                                              ; preds = %189, %182
  %198 = phi i64 [ %183, %182 ], [ %190, %189 ]
  %199 = load %"struct.ots::OpenTypeHDMXDeviceRecord"*, %"struct.ots::OpenTypeHDMXDeviceRecord"** %84, align 8
  %200 = load %"struct.ots::OpenTypeHDMXDeviceRecord"*, %"struct.ots::OpenTypeHDMXDeviceRecord"** %85, align 8
  %201 = icmp eq %"struct.ots::OpenTypeHDMXDeviceRecord"* %199, %200
  br i1 %201, label %235, label %202

202:                                              ; preds = %197
  %203 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"* %199 to i16*
  %204 = load i16, i16* %86, align 8
  store i16 %204, i16* %203, align 8
  %205 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %199, i64 0, i32 2
  %206 = bitcast %"class.std::__1::vector.24"* %205 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %206, i8 0, i64 24, i1 false) #9
  %207 = load i64, i64* %82, align 8
  %208 = load i64, i64* %80, align 8
  %209 = sub i64 %207, %208
  %210 = icmp eq i64 %209, 0
  br i1 %210, label %232, label %211

211:                                              ; preds = %202
  %212 = icmp slt i64 %209, 0
  br i1 %212, label %213, label %215

213:                                              ; preds = %211
  %214 = bitcast %"class.std::__1::vector.24"* %205 to %"class.std::__1::__vector_base_common"*
  call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %214) #11
  unreachable

215:                                              ; preds = %211
  %216 = call i8* @_Znwm(i64 %209) #10
  %217 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %199, i64 0, i32 2, i32 0, i32 1
  store i8* %216, i8** %217, align 8
  %218 = getelementptr inbounds %"class.std::__1::vector.24", %"class.std::__1::vector.24"* %205, i64 0, i32 0, i32 0
  store i8* %216, i8** %218, align 8
  %219 = getelementptr inbounds i8, i8* %216, i64 %209
  %220 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %199, i64 0, i32 2, i32 0, i32 2, i32 0, i32 0
  store i8* %219, i8** %220, align 8
  %221 = load i8*, i8** %83, align 8
  %222 = load i64, i64* %82, align 8
  %223 = bitcast i8** %217 to i64*
  %224 = ptrtoint i8* %221 to i64
  %225 = sub i64 %222, %224
  %226 = icmp sgt i64 %225, 0
  br i1 %226, label %227, label %229

227:                                              ; preds = %215
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %216, i8* align 1 %221, i64 %225, i1 false) #9
  %228 = getelementptr inbounds i8, i8* %216, i64 %225
  br label %229

229:                                              ; preds = %227, %215
  %230 = phi i8* [ %228, %227 ], [ %216, %215 ]
  %231 = ptrtoint i8* %230 to i64
  store i64 %231, i64* %223, align 8
  br label %232

232:                                              ; preds = %229, %202
  %233 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %199, i64 1
  %234 = ptrtoint %"struct.ots::OpenTypeHDMXDeviceRecord"* %233 to i64
  store i64 %234, i64* %87, align 8
  br label %236

235:                                              ; preds = %197
  call void @_ZNSt3__16vectorIN3ots24OpenTypeHDMXDeviceRecordENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector"* %71, %"struct.ots::OpenTypeHDMXDeviceRecord"* nonnull dereferenceable(32) %4) #9
  br label %236

236:                                              ; preds = %235, %232, %180, %195, %113, %104
  %237 = phi i64 [ %183, %195 ], [ %128, %180 ], [ %102, %113 ], [ %105, %104 ], [ %198, %232 ], [ %198, %235 ]
  %238 = phi i1 [ %196, %195 ], [ %181, %180 ], [ %114, %113 ], [ %106, %104 ], [ %95, %232 ], [ %95, %235 ]
  %239 = phi i32 [ 1, %195 ], [ 1, %180 ], [ 1, %113 ], [ 1, %104 ], [ 0, %232 ], [ 0, %235 ]
  %240 = phi i8 [ %101, %195 ], [ %101, %180 ], [ %94, %113 ], [ %94, %104 ], [ %101, %232 ], [ %101, %235 ]
  %241 = load i8*, i8** %88, align 8
  %242 = icmp eq i8* %241, null
  br i1 %242, label %245, label %243

243:                                              ; preds = %236
  %244 = ptrtoint i8* %241 to i64
  store i64 %244, i64* %82, align 8
  call void @_ZdlPv(i8* nonnull %241) #10
  br label %245

245:                                              ; preds = %236, %243
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %74) #9
  %246 = icmp eq i32 %239, 0
  %247 = add nuw nsw i32 %93, 1
  br i1 %246, label %90, label %248

248:                                              ; preds = %245, %90, %38, %47, %52, %68, %62, %22, %14
  %249 = phi i1 [ %23, %22 ], [ %15, %14 ], [ %49, %47 ], [ %54, %52 ], [ %39, %38 ], [ %63, %62 ], [ %69, %68 ], [ %238, %245 ], [ true, %90 ]
  ret i1 %249
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare %"class.ots::Table"* @_ZNK3ots4Font13GetTypedTableEj(%"struct.ots::Font"*, i32) local_unnamed_addr #2

declare zeroext i1 @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"*, i8*, ...) local_unnamed_addr #2

declare zeroext i1 @_ZN3ots5Table4DropEPKcz(%"class.ots::Table"*, i8*, ...) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3ots24OpenTypeHDMXDeviceRecordENS_9allocatorIS2_EEE7reserveEm(%"class.std::__1::vector"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %4 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = icmp ult i64 %9, %1
  %11 = inttoptr i64 %7 to %"struct.ots::OpenTypeHDMXDeviceRecord"*
  br i1 %10, label %12, label %138

12:                                               ; preds = %2
  %13 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %14 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"** %13 to i64*
  %15 = icmp ugt i64 %1, 576460752303423487
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #11
  unreachable

17:                                               ; preds = %12
  %18 = load i64, i64* %14, align 8
  %19 = sub i64 %18, %7
  %20 = ashr exact i64 %19, 5
  %21 = shl i64 %1, 5
  %22 = tail call i8* @_Znwm(i64 %21) #10
  %23 = bitcast i8* %22 to %"struct.ots::OpenTypeHDMXDeviceRecord"*
  %24 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %23, i64 %20
  %25 = ptrtoint %"struct.ots::OpenTypeHDMXDeviceRecord"* %24 to i64
  %26 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %23, i64 %1
  %27 = ptrtoint %"struct.ots::OpenTypeHDMXDeviceRecord"* %26 to i64
  %28 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %29 = inttoptr i64 %18 to %"struct.ots::OpenTypeHDMXDeviceRecord"*
  %30 = icmp eq %"struct.ots::OpenTypeHDMXDeviceRecord"* %29, %11
  br i1 %30, label %66, label %31

31:                                               ; preds = %17
  %32 = getelementptr %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %29, i64 -1, i32 0
  %33 = sub i64 0, %7
  %34 = getelementptr i8, i8* %32, i64 %33
  %35 = ptrtoint i8* %34 to i64
  %36 = and i64 %35, 32
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %61

38:                                               ; preds = %31
  %39 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %24, i64 -1
  %40 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %29, i64 -1
  %41 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"* %40 to i16*
  %42 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"* %39 to i16*
  %43 = load i16, i16* %41, align 8
  store i16 %43, i16* %42, align 8
  %44 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %24, i64 -1, i32 2
  %45 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %29, i64 -1, i32 2
  %46 = bitcast %"class.std::__1::vector.24"* %44 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %46, i8 0, i64 24, i1 false) #9
  %47 = bitcast %"class.std::__1::vector.24"* %45 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = bitcast %"class.std::__1::vector.24"* %44 to i64*
  store i64 %48, i64* %49, align 8
  %50 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %29, i64 -1, i32 2, i32 0, i32 1
  %51 = bitcast i8** %50 to i64*
  %52 = load i64, i64* %51, align 8
  %53 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %24, i64 -1, i32 2, i32 0, i32 1
  %54 = bitcast i8** %53 to i64*
  store i64 %52, i64* %54, align 8
  %55 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %29, i64 -1, i32 2, i32 0, i32 2, i32 0, i32 0
  %56 = bitcast i8** %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %24, i64 -1, i32 2, i32 0, i32 2, i32 0, i32 0
  %59 = bitcast i8** %58 to i64*
  store i64 %57, i64* %59, align 8
  %60 = bitcast %"class.std::__1::vector.24"* %45 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 24, i1 false) #9
  br label %61

61:                                               ; preds = %38, %31
  %62 = phi %"struct.ots::OpenTypeHDMXDeviceRecord"* [ undef, %31 ], [ %39, %38 ]
  %63 = phi %"struct.ots::OpenTypeHDMXDeviceRecord"* [ %24, %31 ], [ %39, %38 ]
  %64 = phi %"struct.ots::OpenTypeHDMXDeviceRecord"* [ %29, %31 ], [ %40, %38 ]
  %65 = icmp ult i8* %34, inttoptr (i64 32 to i8*)
  br i1 %65, label %115, label %67

66:                                               ; preds = %17
  store i64 %25, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  br label %133

67:                                               ; preds = %61, %67
  %68 = phi %"struct.ots::OpenTypeHDMXDeviceRecord"* [ %92, %67 ], [ %63, %61 ]
  %69 = phi %"struct.ots::OpenTypeHDMXDeviceRecord"* [ %93, %67 ], [ %64, %61 ]
  %70 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %68, i64 -1
  %71 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %69, i64 -1
  %72 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"* %71 to i16*
  %73 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"* %70 to i16*
  %74 = load i16, i16* %72, align 8
  store i16 %74, i16* %73, align 8
  %75 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %68, i64 -1, i32 2
  %76 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %69, i64 -1, i32 2
  %77 = bitcast %"class.std::__1::vector.24"* %75 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %77, i8 0, i64 24, i1 false) #9
  %78 = bitcast %"class.std::__1::vector.24"* %76 to i64*
  %79 = load i64, i64* %78, align 8
  %80 = bitcast %"class.std::__1::vector.24"* %75 to i64*
  store i64 %79, i64* %80, align 8
  %81 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %69, i64 -1, i32 2, i32 0, i32 1
  %82 = bitcast i8** %81 to i64*
  %83 = load i64, i64* %82, align 8
  %84 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %68, i64 -1, i32 2, i32 0, i32 1
  %85 = bitcast i8** %84 to i64*
  store i64 %83, i64* %85, align 8
  %86 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %69, i64 -1, i32 2, i32 0, i32 2, i32 0, i32 0
  %87 = bitcast i8** %86 to i64*
  %88 = load i64, i64* %87, align 8
  %89 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %68, i64 -1, i32 2, i32 0, i32 2, i32 0, i32 0
  %90 = bitcast i8** %89 to i64*
  store i64 %88, i64* %90, align 8
  %91 = bitcast %"class.std::__1::vector.24"* %76 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %91, i8 0, i64 24, i1 false) #9
  %92 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %68, i64 -2
  %93 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %69, i64 -2
  %94 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"* %93 to i16*
  %95 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"* %92 to i16*
  %96 = load i16, i16* %94, align 8
  store i16 %96, i16* %95, align 8
  %97 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %68, i64 -2, i32 2
  %98 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %69, i64 -2, i32 2
  %99 = bitcast %"class.std::__1::vector.24"* %97 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %99, i8 0, i64 24, i1 false) #9
  %100 = bitcast %"class.std::__1::vector.24"* %98 to i64*
  %101 = load i64, i64* %100, align 8
  %102 = bitcast %"class.std::__1::vector.24"* %97 to i64*
  store i64 %101, i64* %102, align 8
  %103 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %69, i64 -2, i32 2, i32 0, i32 1
  %104 = bitcast i8** %103 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %68, i64 -2, i32 2, i32 0, i32 1
  %107 = bitcast i8** %106 to i64*
  store i64 %105, i64* %107, align 8
  %108 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %69, i64 -2, i32 2, i32 0, i32 2, i32 0, i32 0
  %109 = bitcast i8** %108 to i64*
  %110 = load i64, i64* %109, align 8
  %111 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %68, i64 -2, i32 2, i32 0, i32 2, i32 0, i32 0
  %112 = bitcast i8** %111 to i64*
  store i64 %110, i64* %112, align 8
  %113 = bitcast %"class.std::__1::vector.24"* %98 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %113, i8 0, i64 24, i1 false) #9
  %114 = icmp eq %"struct.ots::OpenTypeHDMXDeviceRecord"* %93, %11
  br i1 %114, label %115, label %67

115:                                              ; preds = %67, %61
  %116 = phi %"struct.ots::OpenTypeHDMXDeviceRecord"* [ %62, %61 ], [ %92, %67 ]
  %117 = ptrtoint %"struct.ots::OpenTypeHDMXDeviceRecord"* %116 to i64
  %118 = load %"struct.ots::OpenTypeHDMXDeviceRecord"*, %"struct.ots::OpenTypeHDMXDeviceRecord"** %28, align 8
  %119 = load %"struct.ots::OpenTypeHDMXDeviceRecord"*, %"struct.ots::OpenTypeHDMXDeviceRecord"** %13, align 8
  store i64 %117, i64* %6, align 8
  store i64 %25, i64* %14, align 8
  store i64 %27, i64* %4, align 8
  %120 = icmp eq %"struct.ots::OpenTypeHDMXDeviceRecord"* %119, %118
  br i1 %120, label %133, label %121

121:                                              ; preds = %115, %131
  %122 = phi %"struct.ots::OpenTypeHDMXDeviceRecord"* [ %123, %131 ], [ %119, %115 ]
  %123 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %122, i64 -1
  %124 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %122, i64 -1, i32 2, i32 0, i32 0
  %125 = load i8*, i8** %124, align 8
  %126 = icmp eq i8* %125, null
  br i1 %126, label %131, label %127

127:                                              ; preds = %121
  %128 = ptrtoint i8* %125 to i64
  %129 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %122, i64 -1, i32 2, i32 0, i32 1
  %130 = bitcast i8** %129 to i64*
  store i64 %128, i64* %130, align 8
  tail call void @_ZdlPv(i8* nonnull %125) #10
  br label %131

131:                                              ; preds = %127, %121
  %132 = icmp eq %"struct.ots::OpenTypeHDMXDeviceRecord"* %123, %118
  br i1 %132, label %133, label %121

133:                                              ; preds = %131, %66, %115
  %134 = phi %"struct.ots::OpenTypeHDMXDeviceRecord"* [ %11, %66 ], [ %118, %115 ], [ %118, %131 ]
  %135 = icmp eq %"struct.ots::OpenTypeHDMXDeviceRecord"* %134, null
  br i1 %135, label %138, label %136

136:                                              ; preds = %133
  %137 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %134, i64 0, i32 0
  tail call void @_ZdlPv(i8* %137) #10
  br label %138

138:                                              ; preds = %136, %133, %2
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3ots12OpenTypeHDMX15ShouldSerializeEv(%"class.ots::OpenTypeHDMX"*) unnamed_addr #0 align 2 {
  %2 = bitcast %"class.ots::OpenTypeHDMX"* %0 to %"class.ots::Table"*
  %3 = tail call zeroext i1 @_ZN3ots5Table15ShouldSerializeEv(%"class.ots::Table"* %2) #9
  br i1 %3, label %4, label %9

4:                                                ; preds = %1
  %5 = getelementptr inbounds %"class.ots::OpenTypeHDMX", %"class.ots::OpenTypeHDMX"* %0, i64 0, i32 0, i32 3
  %6 = load %"struct.ots::Font"*, %"struct.ots::Font"** %5, align 8
  %7 = tail call %"class.ots::Table"* @_ZNK3ots4Font8GetTableEj(%"struct.ots::Font"* %6, i32 1735162214) #9
  %8 = icmp ne %"class.ots::Table"* %7, null
  br label %9

9:                                                ; preds = %4, %1
  %10 = phi i1 [ false, %1 ], [ %8, %4 ]
  ret i1 %10
}

declare zeroext i1 @_ZN3ots5Table15ShouldSerializeEv(%"class.ots::Table"*) unnamed_addr #2

declare %"class.ots::Table"* @_ZNK3ots4Font8GetTableEj(%"struct.ots::Font"*, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN3ots12OpenTypeHDMX9SerializeEPNS_9OTSStreamE(%"class.ots::OpenTypeHDMX"*, %"class.ots::OTSStream"*) unnamed_addr #0 align 2 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i16, align 2
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i16, align 2
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = getelementptr inbounds %"class.ots::OpenTypeHDMX", %"class.ots::OpenTypeHDMX"* %0, i64 0, i32 4
  %21 = getelementptr inbounds %"class.ots::OpenTypeHDMX", %"class.ots::OpenTypeHDMX"* %0, i64 0, i32 4, i32 0, i32 1
  %22 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"** %21 to i64*
  %23 = load i64, i64* %22, align 8
  %24 = bitcast %"class.std::__1::vector"* %20 to i64*
  %25 = load i64, i64* %24, align 8
  %26 = sub i64 %23, %25
  %27 = ashr exact i64 %26, 5
  %28 = trunc i64 %27 to i16
  %29 = icmp ugt i64 %27, 32767
  br i1 %29, label %173, label %30

30:                                               ; preds = %2
  %31 = getelementptr inbounds %"class.ots::OpenTypeHDMX", %"class.ots::OpenTypeHDMX"* %0, i64 0, i32 1
  %32 = load i16, i16* %31, align 2
  %33 = bitcast i16* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %33)
  %34 = tail call i16 @llvm.bswap.i16(i16 %32) #9
  store i16 %34, i16* %15, align 2
  %35 = bitcast %"class.ots::OTSStream"* %1 to i64 (%"class.ots::OTSStream"*)***
  %36 = load i64 (%"class.ots::OTSStream"*)**, i64 (%"class.ots::OTSStream"*)*** %35, align 8
  %37 = getelementptr inbounds i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %36, i64 4
  %38 = load i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %37, align 8
  %39 = tail call i64 %38(%"class.ots::OTSStream"* %1) #9
  %40 = and i64 %39, 3
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %45

42:                                               ; preds = %30
  %43 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %44 = load i32, i32* %43, align 8
  br label %57

45:                                               ; preds = %30
  %46 = sub nuw nsw i64 4, %40
  %47 = icmp ult i64 %46, 2
  %48 = select i1 %47, i64 %46, i64 2
  %49 = bitcast i32* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %49) #9
  store i32 0, i32* %13, align 4
  %50 = getelementptr inbounds i8, i8* %49, i64 %40
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %50, i8* nonnull align 2 %33, i64 %48, i1 false) #9
  %51 = load i32, i32* %13, align 4
  %52 = tail call i32 @llvm.bswap.i32(i32 %51) #9
  %53 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %54 = load i32, i32* %53, align 8
  %55 = add i32 %54, %52
  store i32 %55, i32* %53, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %49) #9
  %56 = icmp eq i64 %40, 3
  br i1 %56, label %57, label %67

57:                                               ; preds = %45, %42
  %58 = phi i32 [ %55, %45 ], [ %44, %42 ]
  %59 = phi i64 [ %48, %45 ], [ 0, %42 ]
  %60 = phi i64 [ 1, %45 ], [ 2, %42 ]
  %61 = bitcast i32* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %61)
  store i32 0, i32* %14, align 4
  %62 = getelementptr inbounds i8, i8* %33, i64 %59
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %61, i8* align 1 %62, i64 %60, i1 false) #9
  %63 = load i32, i32* %14, align 4
  %64 = tail call i32 @llvm.bswap.i32(i32 %63) #9
  %65 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %66 = add i32 %64, %58
  store i32 %66, i32* %65, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %61)
  br label %67

67:                                               ; preds = %45, %57
  %68 = bitcast %"class.ots::OTSStream"* %1 to i1 (%"class.ots::OTSStream"*, i8*, i64)***
  %69 = load i1 (%"class.ots::OTSStream"*, i8*, i64)**, i1 (%"class.ots::OTSStream"*, i8*, i64)*** %68, align 8
  %70 = getelementptr inbounds i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %69, i64 2
  %71 = load i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %70, align 8
  %72 = call zeroext i1 %71(%"class.ots::OTSStream"* %1, i8* nonnull %33, i64 2) #9
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %33)
  br i1 %72, label %73, label %173

73:                                               ; preds = %67
  %74 = bitcast i16* %12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 2, i8* nonnull %74)
  %75 = call i16 @llvm.bswap.i16(i16 %28) #9
  store i16 %75, i16* %12, align 2
  %76 = load i64 (%"class.ots::OTSStream"*)**, i64 (%"class.ots::OTSStream"*)*** %35, align 8
  %77 = getelementptr inbounds i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %76, i64 4
  %78 = load i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %77, align 8
  %79 = call i64 %78(%"class.ots::OTSStream"* %1) #9
  %80 = and i64 %79, 3
  %81 = icmp eq i64 %80, 0
  br i1 %81, label %82, label %85

82:                                               ; preds = %73
  %83 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %84 = load i32, i32* %83, align 8
  br label %97

85:                                               ; preds = %73
  %86 = sub nuw nsw i64 4, %80
  %87 = icmp ult i64 %86, 2
  %88 = select i1 %87, i64 %86, i64 2
  %89 = bitcast i32* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %89) #9
  store i32 0, i32* %10, align 4
  %90 = getelementptr inbounds i8, i8* %89, i64 %80
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %90, i8* nonnull align 2 %74, i64 %88, i1 false) #9
  %91 = load i32, i32* %10, align 4
  %92 = call i32 @llvm.bswap.i32(i32 %91) #9
  %93 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %94 = load i32, i32* %93, align 8
  %95 = add i32 %94, %92
  store i32 %95, i32* %93, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %89) #9
  %96 = icmp eq i64 %80, 3
  br i1 %96, label %97, label %107

97:                                               ; preds = %85, %82
  %98 = phi i32 [ %95, %85 ], [ %84, %82 ]
  %99 = phi i64 [ %88, %85 ], [ 0, %82 ]
  %100 = phi i64 [ 1, %85 ], [ 2, %82 ]
  %101 = bitcast i32* %11 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %101)
  store i32 0, i32* %11, align 4
  %102 = getelementptr inbounds i8, i8* %74, i64 %99
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %101, i8* align 1 %102, i64 %100, i1 false) #9
  %103 = load i32, i32* %11, align 4
  %104 = call i32 @llvm.bswap.i32(i32 %103) #9
  %105 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %106 = add i32 %104, %98
  store i32 %106, i32* %105, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %101)
  br label %107

107:                                              ; preds = %85, %97
  %108 = load i1 (%"class.ots::OTSStream"*, i8*, i64)**, i1 (%"class.ots::OTSStream"*, i8*, i64)*** %68, align 8
  %109 = getelementptr inbounds i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %108, i64 2
  %110 = load i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %109, align 8
  %111 = call zeroext i1 %110(%"class.ots::OTSStream"* %1, i8* nonnull %74, i64 2) #9
  call void @llvm.lifetime.end.p0i8(i64 2, i8* nonnull %74)
  br i1 %111, label %112, label %173

112:                                              ; preds = %107
  %113 = getelementptr inbounds %"class.ots::OpenTypeHDMX", %"class.ots::OpenTypeHDMX"* %0, i64 0, i32 2
  %114 = load i32, i32* %113, align 4
  %115 = bitcast i32* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %115)
  %116 = call i32 @llvm.bswap.i32(i32 %114) #9
  store i32 %116, i32* %9, align 4
  %117 = load i64 (%"class.ots::OTSStream"*)**, i64 (%"class.ots::OTSStream"*)*** %35, align 8
  %118 = getelementptr inbounds i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %117, i64 4
  %119 = load i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %118, align 8
  %120 = call i64 %119(%"class.ots::OTSStream"* %1) #9
  %121 = and i64 %120, 3
  %122 = icmp eq i64 %121, 0
  br i1 %122, label %123, label %126

123:                                              ; preds = %112
  %124 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %125 = load i32, i32* %124, align 8
  br label %138

126:                                              ; preds = %112
  %127 = sub nuw nsw i64 4, %121
  %128 = icmp ult i64 %127, 4
  %129 = select i1 %128, i64 %127, i64 4
  %130 = bitcast i32* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %130) #9
  store i32 0, i32* %7, align 4
  %131 = getelementptr inbounds i8, i8* %130, i64 %121
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %131, i8* nonnull align 4 %115, i64 %129, i1 false) #9
  %132 = load i32, i32* %7, align 4
  %133 = call i32 @llvm.bswap.i32(i32 %132) #9
  %134 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %135 = load i32, i32* %134, align 8
  %136 = add i32 %135, %133
  store i32 %136, i32* %134, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %130) #9
  %137 = icmp eq i64 %129, 0
  br i1 %137, label %138, label %147

138:                                              ; preds = %126, %123
  %139 = phi i32 [ %136, %126 ], [ %125, %123 ]
  %140 = phi i64 [ %127, %126 ], [ 0, %123 ]
  %141 = getelementptr inbounds i8, i8* %115, i64 %140
  %142 = bitcast i8* %141 to i32*
  %143 = load i32, i32* %142, align 1
  %144 = call i32 @llvm.bswap.i32(i32 %143) #9
  %145 = add i32 %144, %139
  %146 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  store i32 %145, i32* %146, align 8
  br label %154

147:                                              ; preds = %126
  %148 = sub nuw nsw i64 4, %129
  %149 = bitcast i32* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %149)
  store i32 0, i32* %8, align 4
  %150 = getelementptr inbounds i8, i8* %115, i64 %127
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %149, i8* align 1 %150, i64 %148, i1 false) #9
  %151 = load i32, i32* %8, align 4
  %152 = call i32 @llvm.bswap.i32(i32 %151) #9
  %153 = add i32 %152, %136
  store i32 %153, i32* %134, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %149)
  br label %154

154:                                              ; preds = %138, %147
  %155 = load i1 (%"class.ots::OTSStream"*, i8*, i64)**, i1 (%"class.ots::OTSStream"*, i8*, i64)*** %68, align 8
  %156 = getelementptr inbounds i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %155, i64 2
  %157 = load i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %156, align 8
  %158 = call zeroext i1 %157(%"class.ots::OTSStream"* %1, i8* nonnull %115, i64 4) #9
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %115)
  br i1 %158, label %159, label %173

159:                                              ; preds = %154
  %160 = icmp sgt i16 %28, 0
  br i1 %160, label %161, label %448

161:                                              ; preds = %159
  %162 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %20, i64 0, i32 0, i32 0
  %163 = bitcast i32* %5 to i8*
  %164 = getelementptr inbounds %"class.ots::OTSStream", %"class.ots::OTSStream"* %1, i64 0, i32 1
  %165 = bitcast i32* %6 to i8*
  %166 = bitcast i32* %3 to i8*
  %167 = bitcast i32* %4 to i8*
  %168 = bitcast i32* %16 to i8*
  %169 = bitcast i32* %17 to i8*
  %170 = getelementptr inbounds %"class.ots::OpenTypeHDMX", %"class.ots::OpenTypeHDMX"* %0, i64 0, i32 3
  %171 = bitcast i32* %18 to i8*
  %172 = bitcast i32* %19 to i8*
  br label %176

173:                                              ; preds = %154, %107, %67, %2
  %174 = bitcast %"class.ots::OpenTypeHDMX"* %0 to %"class.ots::Table"*
  %175 = call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %174, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.11, i64 0, i64 0)) #9
  ret i1 %175

176:                                              ; preds = %444, %161
  %177 = phi i32 [ 0, %161 ], [ %446, %444 ]
  %178 = phi i16 [ 0, %161 ], [ %445, %444 ]
  %179 = zext i16 %178 to i64
  %180 = load %"struct.ots::OpenTypeHDMXDeviceRecord"*, %"struct.ots::OpenTypeHDMXDeviceRecord"** %162, align 8
  %181 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %180, i64 %179, i32 0
  %182 = load i64 (%"class.ots::OTSStream"*)**, i64 (%"class.ots::OTSStream"*)*** %35, align 8
  %183 = getelementptr inbounds i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %182, i64 4
  %184 = load i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %183, align 8
  %185 = call i64 %184(%"class.ots::OTSStream"* %1) #9
  %186 = and i64 %185, 3
  %187 = icmp eq i64 %186, 0
  br i1 %187, label %195, label %188

188:                                              ; preds = %176
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %163) #9
  store i32 0, i32* %5, align 4
  %189 = getelementptr inbounds i8, i8* %163, i64 %186
  %190 = load i8, i8* %181, align 1
  store i8 %190, i8* %189, align 1
  %191 = load i32, i32* %5, align 4
  %192 = call i32 @llvm.bswap.i32(i32 %191) #9
  %193 = load i32, i32* %164, align 8
  %194 = add i32 %193, %192
  store i32 %194, i32* %164, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %163) #9
  br label %201

195:                                              ; preds = %176
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %165)
  store i32 0, i32* %6, align 4
  %196 = load i8, i8* %181, align 1
  store i8 %196, i8* %165, align 4
  %197 = load i32, i32* %6, align 4
  %198 = call i32 @llvm.bswap.i32(i32 %197) #9
  %199 = load i32, i32* %164, align 8
  %200 = add i32 %199, %198
  store i32 %200, i32* %164, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %165)
  br label %201

201:                                              ; preds = %188, %195
  %202 = load i1 (%"class.ots::OTSStream"*, i8*, i64)**, i1 (%"class.ots::OTSStream"*, i8*, i64)*** %68, align 8
  %203 = getelementptr inbounds i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %202, i64 2
  %204 = load i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %203, align 8
  %205 = call zeroext i1 %204(%"class.ots::OTSStream"* %1, i8* %181, i64 1) #9
  br i1 %205, label %206, label %337

206:                                              ; preds = %201
  %207 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %180, i64 %179, i32 1
  %208 = load i64 (%"class.ots::OTSStream"*)**, i64 (%"class.ots::OTSStream"*)*** %35, align 8
  %209 = getelementptr inbounds i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %208, i64 4
  %210 = load i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %209, align 8
  %211 = call i64 %210(%"class.ots::OTSStream"* %1) #9
  %212 = and i64 %211, 3
  %213 = icmp eq i64 %212, 0
  br i1 %213, label %221, label %214

214:                                              ; preds = %206
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %166) #9
  store i32 0, i32* %3, align 4
  %215 = getelementptr inbounds i8, i8* %166, i64 %212
  %216 = load i8, i8* %207, align 1
  store i8 %216, i8* %215, align 1
  %217 = load i32, i32* %3, align 4
  %218 = call i32 @llvm.bswap.i32(i32 %217) #9
  %219 = load i32, i32* %164, align 8
  %220 = add i32 %219, %218
  store i32 %220, i32* %164, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %166) #9
  br label %227

221:                                              ; preds = %206
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %167)
  store i32 0, i32* %4, align 4
  %222 = load i8, i8* %207, align 1
  store i8 %222, i8* %167, align 4
  %223 = load i32, i32* %4, align 4
  %224 = call i32 @llvm.bswap.i32(i32 %223) #9
  %225 = load i32, i32* %164, align 8
  %226 = add i32 %225, %224
  store i32 %226, i32* %164, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %167)
  br label %227

227:                                              ; preds = %214, %221
  %228 = load i1 (%"class.ots::OTSStream"*, i8*, i64)**, i1 (%"class.ots::OTSStream"*, i8*, i64)*** %68, align 8
  %229 = getelementptr inbounds i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %228, i64 2
  %230 = load i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %229, align 8
  %231 = call zeroext i1 %230(%"class.ots::OTSStream"* %1, i8* %207, i64 1) #9
  br i1 %231, label %232, label %337

232:                                              ; preds = %227
  %233 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %180, i64 %179, i32 2, i32 0, i32 0
  %234 = load i8*, i8** %233, align 8
  %235 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %180, i64 %179, i32 2, i32 0, i32 1
  %236 = bitcast i8** %235 to i64*
  %237 = load i64, i64* %236, align 8
  %238 = ptrtoint i8* %234 to i64
  %239 = sub i64 %237, %238
  %240 = icmp eq i64 %239, 0
  br i1 %240, label %337, label %241

241:                                              ; preds = %232
  %242 = load i64 (%"class.ots::OTSStream"*)**, i64 (%"class.ots::OTSStream"*)*** %35, align 8
  %243 = getelementptr inbounds i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %242, i64 4
  %244 = load i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %243, align 8
  %245 = call i64 %244(%"class.ots::OTSStream"* %1) #9
  %246 = and i64 %245, 3
  %247 = icmp eq i64 %246, 0
  br i1 %247, label %258, label %248

248:                                              ; preds = %241
  %249 = sub nuw nsw i64 4, %246
  %250 = icmp ult i64 %249, %239
  %251 = select i1 %250, i64 %249, i64 %239
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %168) #9
  store i32 0, i32* %16, align 4
  %252 = getelementptr inbounds i8, i8* %168, i64 %246
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %252, i8* align 1 %234, i64 %251, i1 false) #9
  %253 = load i32, i32* %16, align 4
  %254 = call i32 @llvm.bswap.i32(i32 %253) #9
  %255 = load i32, i32* %164, align 8
  %256 = add i32 %255, %254
  store i32 %256, i32* %164, align 8
  %257 = sub i64 %239, %251
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %168) #9
  br label %258

258:                                              ; preds = %248, %241
  %259 = phi i64 [ %239, %241 ], [ %257, %248 ]
  %260 = phi i64 [ 0, %241 ], [ %251, %248 ]
  %261 = icmp ugt i64 %259, 3
  br i1 %261, label %262, label %322

262:                                              ; preds = %258
  %263 = load i32, i32* %164, align 8
  %264 = add i64 %259, -4
  %265 = lshr i64 %264, 2
  %266 = add nuw nsw i64 %265, 1
  %267 = and i64 %266, 3
  %268 = icmp eq i64 %267, 0
  br i1 %268, label %283, label %269

269:                                              ; preds = %262, %269
  %270 = phi i32 [ %278, %269 ], [ %263, %262 ]
  %271 = phi i64 [ %280, %269 ], [ %260, %262 ]
  %272 = phi i64 [ %279, %269 ], [ %259, %262 ]
  %273 = phi i64 [ %281, %269 ], [ %267, %262 ]
  %274 = getelementptr inbounds i8, i8* %234, i64 %271
  %275 = bitcast i8* %274 to i32*
  %276 = load i32, i32* %275, align 1
  %277 = call i32 @llvm.bswap.i32(i32 %276) #9
  %278 = add i32 %277, %270
  store i32 %278, i32* %164, align 8
  %279 = add i64 %272, -4
  %280 = add i64 %271, 4
  %281 = add i64 %273, -1
  %282 = icmp eq i64 %281, 0
  br i1 %282, label %283, label %269, !llvm.loop !2

283:                                              ; preds = %269, %262
  %284 = phi i32 [ %263, %262 ], [ %278, %269 ]
  %285 = phi i64 [ %260, %262 ], [ %280, %269 ]
  %286 = phi i64 [ %259, %262 ], [ %279, %269 ]
  %287 = phi i64 [ undef, %262 ], [ %280, %269 ]
  %288 = icmp ult i64 %264, 12
  br i1 %288, label %319, label %289

289:                                              ; preds = %283, %289
  %290 = phi i32 [ %315, %289 ], [ %284, %283 ]
  %291 = phi i64 [ %317, %289 ], [ %285, %283 ]
  %292 = phi i64 [ %316, %289 ], [ %286, %283 ]
  %293 = getelementptr inbounds i8, i8* %234, i64 %291
  %294 = bitcast i8* %293 to i32*
  %295 = load i32, i32* %294, align 1
  %296 = call i32 @llvm.bswap.i32(i32 %295) #9
  %297 = add i32 %296, %290
  store i32 %297, i32* %164, align 8
  %298 = add i64 %291, 4
  %299 = getelementptr inbounds i8, i8* %234, i64 %298
  %300 = bitcast i8* %299 to i32*
  %301 = load i32, i32* %300, align 1
  %302 = call i32 @llvm.bswap.i32(i32 %301) #9
  %303 = add i32 %302, %297
  store i32 %303, i32* %164, align 8
  %304 = add i64 %291, 8
  %305 = getelementptr inbounds i8, i8* %234, i64 %304
  %306 = bitcast i8* %305 to i32*
  %307 = load i32, i32* %306, align 1
  %308 = call i32 @llvm.bswap.i32(i32 %307) #9
  %309 = add i32 %308, %303
  store i32 %309, i32* %164, align 8
  %310 = add i64 %291, 12
  %311 = getelementptr inbounds i8, i8* %234, i64 %310
  %312 = bitcast i8* %311 to i32*
  %313 = load i32, i32* %312, align 1
  %314 = call i32 @llvm.bswap.i32(i32 %313) #9
  %315 = add i32 %314, %309
  store i32 %315, i32* %164, align 8
  %316 = add i64 %292, -16
  %317 = add i64 %291, 16
  %318 = icmp ugt i64 %316, 3
  br i1 %318, label %289, label %319

319:                                              ; preds = %289, %283
  %320 = phi i64 [ %287, %283 ], [ %317, %289 ]
  %321 = and i64 %259, 3
  br label %322

322:                                              ; preds = %319, %258
  %323 = phi i64 [ %259, %258 ], [ %321, %319 ]
  %324 = phi i64 [ %260, %258 ], [ %320, %319 ]
  %325 = icmp eq i64 %323, 0
  br i1 %325, label %332, label %326

326:                                              ; preds = %322
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %169)
  store i32 0, i32* %17, align 4
  %327 = getelementptr inbounds i8, i8* %234, i64 %324
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %169, i8* align 1 %327, i64 %323, i1 false) #9
  %328 = load i32, i32* %17, align 4
  %329 = call i32 @llvm.bswap.i32(i32 %328) #9
  %330 = load i32, i32* %164, align 8
  %331 = add i32 %330, %329
  store i32 %331, i32* %164, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %169)
  br label %332

332:                                              ; preds = %322, %326
  %333 = load i1 (%"class.ots::OTSStream"*, i8*, i64)**, i1 (%"class.ots::OTSStream"*, i8*, i64)*** %68, align 8
  %334 = getelementptr inbounds i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %333, i64 2
  %335 = load i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %334, align 8
  %336 = call zeroext i1 %335(%"class.ots::OTSStream"* %1, i8* %234, i64 %239) #9
  br i1 %336, label %340, label %337

337:                                              ; preds = %232, %332, %227, %201
  %338 = bitcast %"class.ots::OpenTypeHDMX"* %0 to %"class.ots::Table"*
  %339 = call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %338, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.12, i64 0, i64 0), i32 %177) #9
  br label %448

340:                                              ; preds = %332
  %341 = load i32, i32* %170, align 8
  %342 = icmp sgt i32 %341, 0
  br i1 %342, label %343, label %444

343:                                              ; preds = %340
  %344 = sext i32 %341 to i64
  %345 = load i64 (%"class.ots::OTSStream"*)**, i64 (%"class.ots::OTSStream"*)*** %35, align 8
  %346 = getelementptr inbounds i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %345, i64 4
  %347 = load i64 (%"class.ots::OTSStream"*)*, i64 (%"class.ots::OTSStream"*)** %346, align 8
  %348 = call i64 %347(%"class.ots::OTSStream"* %1) #9
  %349 = and i64 %348, 3
  %350 = icmp eq i64 %349, 0
  br i1 %350, label %361, label %351

351:                                              ; preds = %343
  %352 = sub nuw nsw i64 4, %349
  %353 = icmp ult i64 %352, %344
  %354 = select i1 %353, i64 %352, i64 %344
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %171) #9
  store i32 0, i32* %18, align 4
  %355 = getelementptr inbounds i8, i8* %171, i64 %349
  call void @llvm.memset.p0i8.i64(i8* align 1 %355, i8 0, i64 %354, i1 false)
  %356 = load i32, i32* %18, align 4
  %357 = call i32 @llvm.bswap.i32(i32 %356) #9
  %358 = load i32, i32* %164, align 8
  %359 = add i32 %358, %357
  store i32 %359, i32* %164, align 8
  %360 = sub nsw i64 %344, %354
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %171) #9
  br label %361

361:                                              ; preds = %351, %343
  %362 = phi i64 [ %344, %343 ], [ %360, %351 ]
  %363 = phi i64 [ 0, %343 ], [ %354, %351 ]
  %364 = icmp ugt i64 %362, 3
  br i1 %364, label %365, label %425

365:                                              ; preds = %361
  %366 = load i32, i32* %164, align 8
  %367 = add nsw i64 %362, -4
  %368 = lshr i64 %367, 2
  %369 = add nuw nsw i64 %368, 1
  %370 = and i64 %369, 3
  %371 = icmp eq i64 %370, 0
  br i1 %371, label %386, label %372

372:                                              ; preds = %365, %372
  %373 = phi i32 [ %381, %372 ], [ %366, %365 ]
  %374 = phi i64 [ %383, %372 ], [ %363, %365 ]
  %375 = phi i64 [ %382, %372 ], [ %362, %365 ]
  %376 = phi i64 [ %384, %372 ], [ %370, %365 ]
  %377 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.13, i64 0, i64 %374
  %378 = bitcast i8* %377 to i32*
  %379 = load i32, i32* %378, align 1
  %380 = call i32 @llvm.bswap.i32(i32 %379) #9
  %381 = add i32 %380, %373
  store i32 %381, i32* %164, align 8
  %382 = add i64 %375, -4
  %383 = add i64 %374, 4
  %384 = add i64 %376, -1
  %385 = icmp eq i64 %384, 0
  br i1 %385, label %386, label %372, !llvm.loop !4

386:                                              ; preds = %372, %365
  %387 = phi i32 [ %366, %365 ], [ %381, %372 ]
  %388 = phi i64 [ %363, %365 ], [ %383, %372 ]
  %389 = phi i64 [ %362, %365 ], [ %382, %372 ]
  %390 = phi i64 [ undef, %365 ], [ %383, %372 ]
  %391 = icmp ult i64 %367, 12
  br i1 %391, label %422, label %392

392:                                              ; preds = %386, %392
  %393 = phi i32 [ %418, %392 ], [ %387, %386 ]
  %394 = phi i64 [ %420, %392 ], [ %388, %386 ]
  %395 = phi i64 [ %419, %392 ], [ %389, %386 ]
  %396 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.13, i64 0, i64 %394
  %397 = bitcast i8* %396 to i32*
  %398 = load i32, i32* %397, align 1
  %399 = call i32 @llvm.bswap.i32(i32 %398) #9
  %400 = add i32 %399, %393
  store i32 %400, i32* %164, align 8
  %401 = add i64 %394, 4
  %402 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.13, i64 0, i64 %401
  %403 = bitcast i8* %402 to i32*
  %404 = load i32, i32* %403, align 1
  %405 = call i32 @llvm.bswap.i32(i32 %404) #9
  %406 = add i32 %405, %400
  store i32 %406, i32* %164, align 8
  %407 = add i64 %394, 8
  %408 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.13, i64 0, i64 %407
  %409 = bitcast i8* %408 to i32*
  %410 = load i32, i32* %409, align 1
  %411 = call i32 @llvm.bswap.i32(i32 %410) #9
  %412 = add i32 %411, %406
  store i32 %412, i32* %164, align 8
  %413 = add i64 %394, 12
  %414 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.13, i64 0, i64 %413
  %415 = bitcast i8* %414 to i32*
  %416 = load i32, i32* %415, align 1
  %417 = call i32 @llvm.bswap.i32(i32 %416) #9
  %418 = add i32 %417, %412
  store i32 %418, i32* %164, align 8
  %419 = add i64 %395, -16
  %420 = add i64 %394, 16
  %421 = icmp ugt i64 %419, 3
  br i1 %421, label %392, label %422

422:                                              ; preds = %392, %386
  %423 = phi i64 [ %390, %386 ], [ %420, %392 ]
  %424 = and i64 %362, 3
  br label %425

425:                                              ; preds = %422, %361
  %426 = phi i64 [ %362, %361 ], [ %424, %422 ]
  %427 = phi i64 [ %363, %361 ], [ %423, %422 ]
  %428 = icmp eq i64 %426, 0
  br i1 %428, label %435, label %429

429:                                              ; preds = %425
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %172)
  store i32 0, i32* %19, align 4
  %430 = getelementptr inbounds [4 x i8], [4 x i8]* @.str.13, i64 0, i64 %427
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %172, i8* align 1 %430, i64 %426, i1 false) #9
  %431 = load i32, i32* %19, align 4
  %432 = call i32 @llvm.bswap.i32(i32 %431) #9
  %433 = load i32, i32* %164, align 8
  %434 = add i32 %433, %432
  store i32 %434, i32* %164, align 8
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %172)
  br label %435

435:                                              ; preds = %425, %429
  %436 = load i1 (%"class.ots::OTSStream"*, i8*, i64)**, i1 (%"class.ots::OTSStream"*, i8*, i64)*** %68, align 8
  %437 = getelementptr inbounds i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %436, i64 2
  %438 = load i1 (%"class.ots::OTSStream"*, i8*, i64)*, i1 (%"class.ots::OTSStream"*, i8*, i64)** %437, align 8
  %439 = call zeroext i1 %438(%"class.ots::OTSStream"* %1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i64 %344) #9
  br i1 %439, label %444, label %440

440:                                              ; preds = %435
  %441 = bitcast %"class.ots::OpenTypeHDMX"* %0 to %"class.ots::Table"*
  %442 = load i32, i32* %170, align 8
  %443 = call zeroext i1 (%"class.ots::Table"*, i8*, ...) @_ZN3ots5Table5ErrorEPKcz(%"class.ots::Table"* %441, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.14, i64 0, i64 0), i32 %442) #9
  br label %448

444:                                              ; preds = %435, %340
  %445 = add nuw nsw i16 %178, 1
  %446 = zext i16 %445 to i32
  %447 = icmp eq i16 %445, %28
  br i1 %447, label %448, label %176

448:                                              ; preds = %444, %159, %337, %440
  %449 = phi i1 [ %339, %337 ], [ %443, %440 ], [ true, %159 ], [ true, %444 ]
  ret i1 %449
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3ots12OpenTypeHDMXD2Ev(%"class.ots::OpenTypeHDMX"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.ots::OpenTypeHDMX", %"class.ots::OpenTypeHDMX"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3ots12OpenTypeHDMXE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.ots::OpenTypeHDMX", %"class.ots::OpenTypeHDMX"* %0, i64 0, i32 4, i32 0, i32 0
  %4 = load %"struct.ots::OpenTypeHDMXDeviceRecord"*, %"struct.ots::OpenTypeHDMXDeviceRecord"** %3, align 8
  %5 = icmp eq %"struct.ots::OpenTypeHDMXDeviceRecord"* %4, null
  br i1 %5, label %27, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.ots::OpenTypeHDMX", %"class.ots::OpenTypeHDMX"* %0, i64 0, i32 4, i32 0, i32 1
  %8 = load %"struct.ots::OpenTypeHDMXDeviceRecord"*, %"struct.ots::OpenTypeHDMXDeviceRecord"** %7, align 8
  %9 = icmp eq %"struct.ots::OpenTypeHDMXDeviceRecord"* %8, %4
  br i1 %9, label %24, label %10

10:                                               ; preds = %6, %20
  %11 = phi %"struct.ots::OpenTypeHDMXDeviceRecord"* [ %12, %20 ], [ %8, %6 ]
  %12 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %11, i64 -1
  %13 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %11, i64 -1, i32 2, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %20, label %16

16:                                               ; preds = %10
  %17 = ptrtoint i8* %14 to i64
  %18 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %11, i64 -1, i32 2, i32 0, i32 1
  %19 = bitcast i8** %18 to i64*
  store i64 %17, i64* %19, align 8
  tail call void @_ZdlPv(i8* nonnull %14) #10
  br label %20

20:                                               ; preds = %16, %10
  %21 = icmp eq %"struct.ots::OpenTypeHDMXDeviceRecord"* %12, %4
  br i1 %21, label %22, label %10

22:                                               ; preds = %20
  %23 = load %"struct.ots::OpenTypeHDMXDeviceRecord"*, %"struct.ots::OpenTypeHDMXDeviceRecord"** %3, align 8
  br label %24

24:                                               ; preds = %22, %6
  %25 = phi %"struct.ots::OpenTypeHDMXDeviceRecord"* [ %23, %22 ], [ %4, %6 ]
  store %"struct.ots::OpenTypeHDMXDeviceRecord"* %4, %"struct.ots::OpenTypeHDMXDeviceRecord"** %7, align 8
  %26 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %25, i64 0, i32 0
  tail call void @_ZdlPv(i8* %26) #10
  br label %27

27:                                               ; preds = %1, %24
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN3ots12OpenTypeHDMXD0Ev(%"class.ots::OpenTypeHDMX"*) unnamed_addr #3 comdat align 2 {
  %2 = getelementptr inbounds %"class.ots::OpenTypeHDMX", %"class.ots::OpenTypeHDMX"* %0, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [7 x i8*] }, { [7 x i8*] }* @_ZTVN3ots12OpenTypeHDMXE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %2, align 8
  %3 = getelementptr inbounds %"class.ots::OpenTypeHDMX", %"class.ots::OpenTypeHDMX"* %0, i64 0, i32 4, i32 0, i32 0
  %4 = load %"struct.ots::OpenTypeHDMXDeviceRecord"*, %"struct.ots::OpenTypeHDMXDeviceRecord"** %3, align 8
  %5 = icmp eq %"struct.ots::OpenTypeHDMXDeviceRecord"* %4, null
  br i1 %5, label %27, label %6

6:                                                ; preds = %1
  %7 = getelementptr inbounds %"class.ots::OpenTypeHDMX", %"class.ots::OpenTypeHDMX"* %0, i64 0, i32 4, i32 0, i32 1
  %8 = load %"struct.ots::OpenTypeHDMXDeviceRecord"*, %"struct.ots::OpenTypeHDMXDeviceRecord"** %7, align 8
  %9 = icmp eq %"struct.ots::OpenTypeHDMXDeviceRecord"* %8, %4
  br i1 %9, label %24, label %10

10:                                               ; preds = %6, %20
  %11 = phi %"struct.ots::OpenTypeHDMXDeviceRecord"* [ %12, %20 ], [ %8, %6 ]
  %12 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %11, i64 -1
  %13 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %11, i64 -1, i32 2, i32 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %20, label %16

16:                                               ; preds = %10
  %17 = ptrtoint i8* %14 to i64
  %18 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %11, i64 -1, i32 2, i32 0, i32 1
  %19 = bitcast i8** %18 to i64*
  store i64 %17, i64* %19, align 8
  tail call void @_ZdlPv(i8* nonnull %14) #10
  br label %20

20:                                               ; preds = %16, %10
  %21 = icmp eq %"struct.ots::OpenTypeHDMXDeviceRecord"* %12, %4
  br i1 %21, label %22, label %10

22:                                               ; preds = %20
  %23 = load %"struct.ots::OpenTypeHDMXDeviceRecord"*, %"struct.ots::OpenTypeHDMXDeviceRecord"** %3, align 8
  br label %24

24:                                               ; preds = %22, %6
  %25 = phi %"struct.ots::OpenTypeHDMXDeviceRecord"* [ %23, %22 ], [ %4, %6 ]
  store %"struct.ots::OpenTypeHDMXDeviceRecord"* %4, %"struct.ots::OpenTypeHDMXDeviceRecord"** %7, align 8
  %26 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %25, i64 0, i32 0
  tail call void @_ZdlPv(i8* %26) #10
  br label %27

27:                                               ; preds = %1, %24
  %28 = bitcast %"class.ots::OpenTypeHDMX"* %0 to i8*
  tail call void @_ZdlPv(i8* %28) #10
  ret void
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #5

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #6

; Function Attrs: noreturn
declare void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"*) local_unnamed_addr #7

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZNSt3__16vectorIN3ots24OpenTypeHDMXDeviceRecordENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_(%"class.std::__1::vector"*, %"struct.ots::OpenTypeHDMXDeviceRecord"* dereferenceable(32)) local_unnamed_addr #3 comdat align 2 {
  %3 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 1
  %4 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"** %3 to i64*
  %5 = load i64, i64* %4, align 8
  %6 = bitcast %"class.std::__1::vector"* %0 to i64*
  %7 = load i64, i64* %6, align 8
  %8 = sub i64 %5, %7
  %9 = ashr exact i64 %8, 5
  %10 = add nsw i64 %9, 1
  %11 = icmp ugt i64 %10, 576460752303423487
  br i1 %11, label %12, label %14

12:                                               ; preds = %2
  %13 = bitcast %"class.std::__1::vector"* %0 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %13) #11
  unreachable

14:                                               ; preds = %2
  %15 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 2, i32 0, i32 0
  %16 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"** %15 to i64*
  %17 = load i64, i64* %16, align 8
  %18 = sub i64 %17, %7
  %19 = ashr exact i64 %18, 5
  %20 = icmp ult i64 %19, 288230376151711743
  br i1 %20, label %21, label %29

21:                                               ; preds = %14
  %22 = ashr exact i64 %18, 4
  %23 = icmp ult i64 %22, %10
  %24 = select i1 %23, i64 %10, i64 %22
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %34, label %26

26:                                               ; preds = %21
  %27 = icmp ugt i64 %24, 576460752303423487
  br i1 %27, label %28, label %29

28:                                               ; preds = %26
  tail call void @abort() #11
  unreachable

29:                                               ; preds = %14, %26
  %30 = phi i64 [ %24, %26 ], [ 576460752303423487, %14 ]
  %31 = shl i64 %30, 5
  %32 = tail call i8* @_Znwm(i64 %31) #10
  %33 = bitcast i8* %32 to %"struct.ots::OpenTypeHDMXDeviceRecord"*
  br label %34

34:                                               ; preds = %21, %29
  %35 = phi i64 [ %30, %29 ], [ 0, %21 ]
  %36 = phi %"struct.ots::OpenTypeHDMXDeviceRecord"* [ %33, %29 ], [ null, %21 ]
  %37 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %36, i64 %9
  %38 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %36, i64 %35
  %39 = ptrtoint %"struct.ots::OpenTypeHDMXDeviceRecord"* %38 to i64
  %40 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"* %1 to i16*
  %41 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"* %37 to i16*
  %42 = load i16, i16* %40, align 8
  store i16 %42, i16* %41, align 8
  %43 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %36, i64 %9, i32 2
  %44 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %1, i64 0, i32 2
  %45 = bitcast %"class.std::__1::vector.24"* %43 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %45, i8 0, i64 24, i1 false) #9
  %46 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %1, i64 0, i32 2, i32 0, i32 1
  %47 = bitcast i8** %46 to i64*
  %48 = load i64, i64* %47, align 8
  %49 = bitcast %"class.std::__1::vector.24"* %44 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = sub i64 %48, %50
  %52 = icmp eq i64 %51, 0
  br i1 %52, label %75, label %53

53:                                               ; preds = %34
  %54 = icmp slt i64 %51, 0
  br i1 %54, label %55, label %57

55:                                               ; preds = %53
  %56 = bitcast %"class.std::__1::vector.24"* %43 to %"class.std::__1::__vector_base_common"*
  tail call void @_ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__vector_base_common"* %56) #11
  unreachable

57:                                               ; preds = %53
  %58 = tail call i8* @_Znwm(i64 %51) #10
  %59 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %36, i64 %9, i32 2, i32 0, i32 1
  store i8* %58, i8** %59, align 8
  %60 = getelementptr inbounds %"class.std::__1::vector.24", %"class.std::__1::vector.24"* %43, i64 0, i32 0, i32 0
  store i8* %58, i8** %60, align 8
  %61 = getelementptr inbounds i8, i8* %58, i64 %51
  %62 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %36, i64 %9, i32 2, i32 0, i32 2, i32 0, i32 0
  store i8* %61, i8** %62, align 8
  %63 = getelementptr inbounds %"class.std::__1::vector.24", %"class.std::__1::vector.24"* %44, i64 0, i32 0, i32 0
  %64 = load i8*, i8** %63, align 8
  %65 = load i64, i64* %47, align 8
  %66 = bitcast i8** %59 to i64*
  %67 = ptrtoint i8* %64 to i64
  %68 = sub i64 %65, %67
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %72

70:                                               ; preds = %57
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 %58, i8* align 1 %64, i64 %68, i1 false) #9
  %71 = getelementptr inbounds i8, i8* %58, i64 %68
  br label %72

72:                                               ; preds = %70, %57
  %73 = phi i8* [ %71, %70 ], [ %58, %57 ]
  %74 = ptrtoint i8* %73 to i64
  store i64 %74, i64* %66, align 8
  br label %75

75:                                               ; preds = %34, %72
  %76 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %37, i64 1
  %77 = ptrtoint %"struct.ots::OpenTypeHDMXDeviceRecord"* %76 to i64
  %78 = getelementptr inbounds %"class.std::__1::vector", %"class.std::__1::vector"* %0, i64 0, i32 0, i32 0
  %79 = load %"struct.ots::OpenTypeHDMXDeviceRecord"*, %"struct.ots::OpenTypeHDMXDeviceRecord"** %78, align 8
  %80 = load %"struct.ots::OpenTypeHDMXDeviceRecord"*, %"struct.ots::OpenTypeHDMXDeviceRecord"** %3, align 8
  %81 = icmp eq %"struct.ots::OpenTypeHDMXDeviceRecord"* %80, %79
  br i1 %81, label %117, label %82

82:                                               ; preds = %75
  %83 = ptrtoint %"struct.ots::OpenTypeHDMXDeviceRecord"* %79 to i64
  %84 = getelementptr %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %80, i64 -1, i32 0
  %85 = ptrtoint i8* %84 to i64
  %86 = sub i64 %85, %83
  %87 = and i64 %86, 32
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %89, label %112

89:                                               ; preds = %82
  %90 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %37, i64 -1
  %91 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %80, i64 -1
  %92 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"* %91 to i16*
  %93 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"* %90 to i16*
  %94 = load i16, i16* %92, align 8
  store i16 %94, i16* %93, align 8
  %95 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %37, i64 -1, i32 2
  %96 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %80, i64 -1, i32 2
  %97 = bitcast %"class.std::__1::vector.24"* %95 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %97, i8 0, i64 24, i1 false) #9
  %98 = bitcast %"class.std::__1::vector.24"* %96 to i64*
  %99 = load i64, i64* %98, align 8
  %100 = bitcast %"class.std::__1::vector.24"* %95 to i64*
  store i64 %99, i64* %100, align 8
  %101 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %80, i64 -1, i32 2, i32 0, i32 1
  %102 = bitcast i8** %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %37, i64 -1, i32 2, i32 0, i32 1
  %105 = bitcast i8** %104 to i64*
  store i64 %103, i64* %105, align 8
  %106 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %80, i64 -1, i32 2, i32 0, i32 2, i32 0, i32 0
  %107 = bitcast i8** %106 to i64*
  %108 = load i64, i64* %107, align 8
  %109 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %37, i64 -1, i32 2, i32 0, i32 2, i32 0, i32 0
  %110 = bitcast i8** %109 to i64*
  store i64 %108, i64* %110, align 8
  %111 = bitcast %"class.std::__1::vector.24"* %96 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %111, i8 0, i64 24, i1 false) #9
  br label %112

112:                                              ; preds = %89, %82
  %113 = phi %"struct.ots::OpenTypeHDMXDeviceRecord"* [ undef, %82 ], [ %90, %89 ]
  %114 = phi %"struct.ots::OpenTypeHDMXDeviceRecord"* [ %37, %82 ], [ %90, %89 ]
  %115 = phi %"struct.ots::OpenTypeHDMXDeviceRecord"* [ %80, %82 ], [ %91, %89 ]
  %116 = icmp ult i64 %86, 32
  br i1 %116, label %167, label %119

117:                                              ; preds = %75
  %118 = ptrtoint %"struct.ots::OpenTypeHDMXDeviceRecord"* %37 to i64
  store i64 %118, i64* %6, align 8
  store i64 %77, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  br label %185

119:                                              ; preds = %112, %119
  %120 = phi %"struct.ots::OpenTypeHDMXDeviceRecord"* [ %144, %119 ], [ %114, %112 ]
  %121 = phi %"struct.ots::OpenTypeHDMXDeviceRecord"* [ %145, %119 ], [ %115, %112 ]
  %122 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %120, i64 -1
  %123 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %121, i64 -1
  %124 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"* %123 to i16*
  %125 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"* %122 to i16*
  %126 = load i16, i16* %124, align 8
  store i16 %126, i16* %125, align 8
  %127 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %120, i64 -1, i32 2
  %128 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %121, i64 -1, i32 2
  %129 = bitcast %"class.std::__1::vector.24"* %127 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %129, i8 0, i64 24, i1 false) #9
  %130 = bitcast %"class.std::__1::vector.24"* %128 to i64*
  %131 = load i64, i64* %130, align 8
  %132 = bitcast %"class.std::__1::vector.24"* %127 to i64*
  store i64 %131, i64* %132, align 8
  %133 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %121, i64 -1, i32 2, i32 0, i32 1
  %134 = bitcast i8** %133 to i64*
  %135 = load i64, i64* %134, align 8
  %136 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %120, i64 -1, i32 2, i32 0, i32 1
  %137 = bitcast i8** %136 to i64*
  store i64 %135, i64* %137, align 8
  %138 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %121, i64 -1, i32 2, i32 0, i32 2, i32 0, i32 0
  %139 = bitcast i8** %138 to i64*
  %140 = load i64, i64* %139, align 8
  %141 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %120, i64 -1, i32 2, i32 0, i32 2, i32 0, i32 0
  %142 = bitcast i8** %141 to i64*
  store i64 %140, i64* %142, align 8
  %143 = bitcast %"class.std::__1::vector.24"* %128 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %143, i8 0, i64 24, i1 false) #9
  %144 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %120, i64 -2
  %145 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %121, i64 -2
  %146 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"* %145 to i16*
  %147 = bitcast %"struct.ots::OpenTypeHDMXDeviceRecord"* %144 to i16*
  %148 = load i16, i16* %146, align 8
  store i16 %148, i16* %147, align 8
  %149 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %120, i64 -2, i32 2
  %150 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %121, i64 -2, i32 2
  %151 = bitcast %"class.std::__1::vector.24"* %149 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %151, i8 0, i64 24, i1 false) #9
  %152 = bitcast %"class.std::__1::vector.24"* %150 to i64*
  %153 = load i64, i64* %152, align 8
  %154 = bitcast %"class.std::__1::vector.24"* %149 to i64*
  store i64 %153, i64* %154, align 8
  %155 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %121, i64 -2, i32 2, i32 0, i32 1
  %156 = bitcast i8** %155 to i64*
  %157 = load i64, i64* %156, align 8
  %158 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %120, i64 -2, i32 2, i32 0, i32 1
  %159 = bitcast i8** %158 to i64*
  store i64 %157, i64* %159, align 8
  %160 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %121, i64 -2, i32 2, i32 0, i32 2, i32 0, i32 0
  %161 = bitcast i8** %160 to i64*
  %162 = load i64, i64* %161, align 8
  %163 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %120, i64 -2, i32 2, i32 0, i32 2, i32 0, i32 0
  %164 = bitcast i8** %163 to i64*
  store i64 %162, i64* %164, align 8
  %165 = bitcast %"class.std::__1::vector.24"* %150 to i8*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %165, i8 0, i64 24, i1 false) #9
  %166 = icmp eq %"struct.ots::OpenTypeHDMXDeviceRecord"* %145, %79
  br i1 %166, label %167, label %119

167:                                              ; preds = %119, %112
  %168 = phi %"struct.ots::OpenTypeHDMXDeviceRecord"* [ %113, %112 ], [ %144, %119 ]
  %169 = load %"struct.ots::OpenTypeHDMXDeviceRecord"*, %"struct.ots::OpenTypeHDMXDeviceRecord"** %78, align 8
  %170 = load %"struct.ots::OpenTypeHDMXDeviceRecord"*, %"struct.ots::OpenTypeHDMXDeviceRecord"** %3, align 8
  %171 = ptrtoint %"struct.ots::OpenTypeHDMXDeviceRecord"* %168 to i64
  store i64 %171, i64* %6, align 8
  store i64 %77, i64* %4, align 8
  store i64 %39, i64* %16, align 8
  %172 = icmp eq %"struct.ots::OpenTypeHDMXDeviceRecord"* %170, %169
  br i1 %172, label %185, label %173

173:                                              ; preds = %167, %183
  %174 = phi %"struct.ots::OpenTypeHDMXDeviceRecord"* [ %175, %183 ], [ %170, %167 ]
  %175 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %174, i64 -1
  %176 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %174, i64 -1, i32 2, i32 0, i32 0
  %177 = load i8*, i8** %176, align 8
  %178 = icmp eq i8* %177, null
  br i1 %178, label %183, label %179

179:                                              ; preds = %173
  %180 = ptrtoint i8* %177 to i64
  %181 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %174, i64 -1, i32 2, i32 0, i32 1
  %182 = bitcast i8** %181 to i64*
  store i64 %180, i64* %182, align 8
  tail call void @_ZdlPv(i8* nonnull %177) #10
  br label %183

183:                                              ; preds = %179, %173
  %184 = icmp eq %"struct.ots::OpenTypeHDMXDeviceRecord"* %175, %169
  br i1 %184, label %185, label %173

185:                                              ; preds = %183, %117, %167
  %186 = phi %"struct.ots::OpenTypeHDMXDeviceRecord"* [ %79, %117 ], [ %169, %167 ], [ %169, %183 ]
  %187 = icmp eq %"struct.ots::OpenTypeHDMXDeviceRecord"* %186, null
  br i1 %187, label %190, label %188

188:                                              ; preds = %185
  %189 = getelementptr inbounds %"struct.ots::OpenTypeHDMXDeviceRecord", %"struct.ots::OpenTypeHDMXDeviceRecord"* %186, i64 0, i32 0
  tail call void @_ZdlPv(i8* %189) #10
  br label %190

190:                                              ; preds = %185, %188
  ret void
}

; Function Attrs: nounwind readnone speculatable
declare i16 @llvm.bswap.i16(i16) #8

; Function Attrs: nounwind readnone speculatable
declare i32 @llvm.bswap.i32(i32) #8

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone speculatable }
attributes #9 = { nounwind }
attributes #10 = { builtin nounwind }
attributes #11 = { noreturn nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
