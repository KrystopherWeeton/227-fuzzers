; ModuleID = '../../cc/paint/clear_for_opaque_raster.cc'
source_filename = "../../cc/paint/clear_for_opaque_raster.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.gfx::Vector2dF" = type { float, float }
%"class.gfx::Size" = type { i32, i32 }
%"class.gfx::Rect" = type { %"class.gfx::Point", %"class.gfx::Size" }
%"class.gfx::Point" = type { i32, i32 }

; Function Attrs: nounwind ssp uwtable
define hidden zeroext i1 @_ZN2cc34CalculateClearForOpaqueRasterRectsERKN3gfx9Vector2dFES3_RKNS0_4SizeERKNS0_4RectES9_RS7_SA_(%"class.gfx::Vector2dF"* nocapture readonly dereferenceable(8), %"class.gfx::Vector2dF"* nocapture readonly dereferenceable(8), %"class.gfx::Size"* nocapture readonly dereferenceable(8), %"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.gfx::Rect"* nocapture readonly dereferenceable(16), %"class.gfx::Rect"* dereferenceable(16), %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #0 {
  %8 = alloca %"class.gfx::Rect", align 4
  %9 = getelementptr inbounds %"class.gfx::Vector2dF", %"class.gfx::Vector2dF"* %0, i64 0, i32 0
  %10 = load float, float* %9, align 4
  %11 = fcmp oeq float %10, 0.000000e+00
  %12 = getelementptr inbounds %"class.gfx::Vector2dF", %"class.gfx::Vector2dF"* %0, i64 0, i32 1
  %13 = load float, float* %12, align 4
  %14 = fcmp oeq float %13, 0.000000e+00
  %15 = getelementptr inbounds %"class.gfx::Vector2dF", %"class.gfx::Vector2dF"* %1, i64 0, i32 0
  %16 = load float, float* %15, align 4
  %17 = fcmp oeq float %16, 1.000000e+00
  %18 = getelementptr inbounds %"class.gfx::Vector2dF", %"class.gfx::Vector2dF"* %1, i64 0, i32 1
  %19 = load float, float* %18, align 4
  %20 = fcmp oeq float %19, 1.000000e+00
  %21 = xor i1 %11, true
  %22 = xor i1 %14, true
  %23 = or i1 %21, %22
  %24 = xor i1 %17, true
  %25 = or i1 %23, %24
  %26 = xor i1 %20, true
  %27 = or i1 %25, %26
  br i1 %27, label %28, label %118

28:                                               ; preds = %7
  %29 = bitcast %"class.gfx::Size"* %2 to i64*
  %30 = load i64, i64* %29, align 4
  %31 = bitcast %"class.gfx::Rect"* %5 to i8*
  %32 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %5, i64 0, i32 0, i32 0
  store i32 0, i32* %32, align 4
  %33 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %5, i64 0, i32 0, i32 1
  store i32 0, i32* %33, align 4
  %34 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %5, i64 0, i32 1
  %35 = bitcast %"class.gfx::Size"* %34 to i64*
  store i64 %30, i64* %35, align 4
  %36 = bitcast %"class.gfx::Rect"* %6 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %31, i64 16, i1 false)
  %37 = sext i1 %24 to i32
  %38 = sext i1 %26 to i32
  tail call void @_ZN3gfx4Rect5InsetEiiii(%"class.gfx::Rect"* %5, i32 0, i32 0, i32 %37, i32 %38) #3
  %39 = zext i1 %21 to i32
  %40 = zext i1 %22 to i32
  %41 = zext i1 %24 to i32
  %42 = zext i1 %26 to i32
  tail call void @_ZN3gfx4Rect5InsetEiiii(%"class.gfx::Rect"* %6, i32 %39, i32 %40, i32 %41, i32 %42) #3
  br i1 %11, label %48, label %43

43:                                               ; preds = %28
  %44 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %4, i64 0, i32 0, i32 0
  %45 = load i32, i32* %44, align 4
  %46 = icmp eq i32 %45, 0
  %47 = sext i1 %46 to i32
  br label %48

48:                                               ; preds = %43, %28
  %49 = phi i32 [ 0, %28 ], [ %47, %43 ]
  br i1 %14, label %55, label %50

50:                                               ; preds = %48
  %51 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %4, i64 0, i32 0, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = icmp eq i32 %52, 0
  %54 = sext i1 %53 to i32
  br label %55

55:                                               ; preds = %50, %48
  %56 = phi i32 [ 0, %48 ], [ %54, %50 ]
  br i1 %17, label %67, label %57

57:                                               ; preds = %55
  %58 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %2, i64 0, i32 0
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %4, i64 0, i32 0, i32 0
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %4, i64 0, i32 1, i32 0
  %63 = load i32, i32* %62, align 4
  %64 = add nsw i32 %63, %61
  %65 = icmp eq i32 %59, %64
  %66 = sext i1 %65 to i32
  br label %67

67:                                               ; preds = %57, %55
  %68 = phi i32 [ 0, %55 ], [ %66, %57 ]
  br i1 %20, label %79, label %69

69:                                               ; preds = %67
  %70 = getelementptr inbounds %"class.gfx::Size", %"class.gfx::Size"* %2, i64 0, i32 1
  %71 = load i32, i32* %70, align 4
  %72 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %4, i64 0, i32 0, i32 1
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %4, i64 0, i32 1, i32 1
  %75 = load i32, i32* %74, align 4
  %76 = add nsw i32 %75, %73
  %77 = icmp eq i32 %71, %76
  %78 = sext i1 %77 to i32
  br label %79

79:                                               ; preds = %69, %67
  %80 = phi i32 [ 0, %67 ], [ %78, %69 ]
  %81 = bitcast %"class.gfx::Rect"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %81) #3
  %82 = bitcast %"class.gfx::Rect"* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 %81, i8* align 4 %82, i64 16, i1 false)
  call void @_ZN3gfx4Rect5InsetEiiii(%"class.gfx::Rect"* nonnull %8, i32 %49, i32 %56, i32 %68, i32 %80) #3
  %83 = call zeroext i1 @_ZNK3gfx4Rect8ContainsERKS0_(%"class.gfx::Rect"* %6, %"class.gfx::Rect"* nonnull dereferenceable(16) %8) #3
  br i1 %83, label %116, label %84

84:                                               ; preds = %79
  call void @_ZN3gfx4Rect9IntersectERKS0_(%"class.gfx::Rect"* %5, %"class.gfx::Rect"* nonnull dereferenceable(16) %8) #3
  call void @_ZN3gfx4Rect9IntersectERKS0_(%"class.gfx::Rect"* %6, %"class.gfx::Rect"* nonnull dereferenceable(16) %8) #3
  %85 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 0, i32 0
  %86 = load i32, i32* %85, align 4
  %87 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %3, i64 0, i32 0, i32 1
  %88 = load i32, i32* %87, align 4
  %89 = sub nsw i32 0, %86
  %90 = sub nsw i32 0, %88
  call void @_ZN3gfx4Rect6OffsetEii(%"class.gfx::Rect"* %5, i32 %89, i32 %90) #3
  %91 = load i32, i32* %85, align 4
  %92 = load i32, i32* %87, align 4
  %93 = sub nsw i32 0, %91
  %94 = sub nsw i32 0, %92
  call void @_ZN3gfx4Rect6OffsetEii(%"class.gfx::Rect"* %6, i32 %93, i32 %94) #3
  %95 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %6, i64 0, i32 0, i32 0
  %96 = load i32, i32* %95, align 4
  %97 = load i32, i32* %32, align 4
  %98 = icmp eq i32 %96, %97
  br i1 %98, label %99, label %116

99:                                               ; preds = %84
  %100 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %6, i64 0, i32 0, i32 1
  %101 = load i32, i32* %100, align 4
  %102 = load i32, i32* %33, align 4
  %103 = icmp eq i32 %101, %102
  br i1 %103, label %104, label %116

104:                                              ; preds = %99
  %105 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %6, i64 0, i32 1, i32 0
  %106 = load i32, i32* %105, align 4
  %107 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %5, i64 0, i32 1, i32 0
  %108 = load i32, i32* %107, align 4
  %109 = icmp eq i32 %106, %108
  br i1 %109, label %110, label %116

110:                                              ; preds = %104
  %111 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %6, i64 0, i32 1, i32 1
  %112 = load i32, i32* %111, align 4
  %113 = getelementptr inbounds %"class.gfx::Rect", %"class.gfx::Rect"* %5, i64 0, i32 1, i32 1
  %114 = load i32, i32* %113, align 4
  %115 = icmp ne i32 %112, %114
  br label %116

116:                                              ; preds = %110, %104, %99, %84, %79
  %117 = phi i1 [ false, %79 ], [ true, %99 ], [ true, %104 ], [ %115, %110 ], [ true, %84 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %81) #3
  br label %118

118:                                              ; preds = %7, %116
  %119 = phi i1 [ %117, %116 ], [ false, %7 ]
  ret i1 %119
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN3gfx4Rect5InsetEiiii(%"class.gfx::Rect"*, i32, i32, i32, i32) local_unnamed_addr #2

declare zeroext i1 @_ZNK3gfx4Rect8ContainsERKS0_(%"class.gfx::Rect"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN3gfx4Rect9IntersectERKS0_(%"class.gfx::Rect"*, %"class.gfx::Rect"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZN3gfx4Rect6OffsetEii(%"class.gfx::Rect"*, i32, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
