; ModuleID = '../../base/strings/string_piece.cc'
source_filename = "../../base/strings/string_piece.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::__1::locale::id" = type <{ %"struct.std::__1::once_flag", i32, [4 x i8] }>
%"struct.std::__1::once_flag" = type { i64 }
%"class.base::BasicStringPiece" = type { i8*, i64 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.base::BasicStringPiece.1" = type { i16*, i64 }
%"class.std::__1::basic_string.2" = type { %"class.std::__1::__compressed_pair.3" }
%"class.std::__1::__compressed_pair.3" = type { %"struct.std::__1::__compressed_pair_elem.4" }
%"struct.std::__1::__compressed_pair_elem.4" = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__rep" = type { %union.anon.5 }
%union.anon.5 = type { %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__long" = type { i16*, i64, i64 }
%"class.base::BasicStringPiece.13" = type { i32*, i64 }
%"class.std::__1::basic_string.14" = type { %"class.std::__1::__compressed_pair.15" }
%"class.std::__1::__compressed_pair.15" = type { %"struct.std::__1::__compressed_pair_elem.16" }
%"struct.std::__1::__compressed_pair_elem.16" = type { %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__rep" }
%"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__rep" = type { %union.anon.17 }
%union.anon.17 = type { %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__long" }
%"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__long" = type { i32*, i64, i64 }
%"class.logging::CheckError" = type { %"class.logging::LogMessage"* }
%"class.logging::LogMessage" = type opaque
%"class.std::__1::basic_ostream" = type { i32 (...)**, %"class.std::__1::basic_ios.base" }
%"class.std::__1::basic_ios.base" = type <{ %"class.std::__1::ios_base", %"class.std::__1::basic_ostream"*, i32 }>
%"class.std::__1::ios_base" = type { i32 (...)**, i32, i64, i64, i32, i32, i8*, i8*, void (i32, %"class.std::__1::ios_base"*, i32)**, i32*, i64, i64, i64*, i64, i64, i8**, i64, i64 }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short" = type { [23 x i8], %struct.anon }
%struct.anon = type { i8 }
%"class.std::__1::__basic_string_common" = type { i8 }
%"class.logging::CheckOpResult" = type { i8* }
%"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short" = type { [11 x i16], %struct.anon.6 }
%struct.anon.6 = type { %"struct.std::__1::__padding.7", i8 }
%"struct.std::__1::__padding.7" = type { [1 x i8] }
%"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__short" = type { [5 x i32], %struct.anon.18 }
%struct.anon.18 = type { %"struct.std::__1::__padding.19", i8 }
%"struct.std::__1::__padding.19" = type { [3 x i8] }
%"class.std::__1::locale" = type { %"class.std::__1::locale::__imp"* }
%"class.std::__1::locale::__imp" = type opaque
%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry" = type { i8, %"class.std::__1::basic_ostream"* }
%"class.std::__1::basic_streambuf" = type { i32 (...)**, %"class.std::__1::locale", i8*, i8*, i8*, i8*, i8*, i8* }
%"class.std::__1::locale::facet" = type { %"class.std::__1::__shared_count" }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::ctype" = type <{ %"class.std::__1::locale::facet", i16*, i8, [7 x i8] }>

$_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEC5Ev = comdat any

$_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEC5EPKcm = comdat any

$_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEC5EPKc = comdat any

$_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEC5ERKNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEEcvNS1_12basic_stringIcS3_NS1_9allocatorIcEEEEEv = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4dataEv = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4sizeEv = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE5beginEv = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6cbeginEv = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE3endEv = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4cendEv = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6rbeginEv = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE7crbeginEv = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4rendEv = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE5crendEv = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEEixEm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE2atEm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE5frontEv = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4backEv = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6lengthEv = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE8max_sizeEv = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE5emptyEv = comdat any

$_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEE13remove_prefixEm = comdat any

$_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEE13remove_suffixEm = comdat any

$_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4swapERS4_ = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4copyEPcmm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6substrEmm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE7compareES4_ = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE7compareEmmS4_ = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE7compareEmmS4_mm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE7compareEPKc = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE7compareEmmPKc = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE7compareEmmPKcm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4findES4_m = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4findEcm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4findEPKcmm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4findEPKcm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE5rfindES4_m = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE5rfindEcm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE5rfindEPKcmm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE5rfindEPKcm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE13find_first_ofES4_m = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE13find_first_ofEcm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE13find_first_ofEPKcmm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE13find_first_ofEPKcm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE12find_last_ofES4_m = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE12find_last_ofEcm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE12find_last_ofEPKcmm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE12find_last_ofEPKcm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE17find_first_not_ofES4_m = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE17find_first_not_ofEcm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE17find_first_not_ofEPKcmm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE17find_first_not_ofEPKcm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE16find_last_not_ofES4_m = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE16find_last_not_ofEcm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE16find_last_not_ofEPKcmm = comdat any

$_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE16find_last_not_ofEPKcm = comdat any

$_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEC5Ev = comdat any

$_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEC5EPKDsm = comdat any

$_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEC5EPKDs = comdat any

$_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEC5ERKNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEE = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEcvNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEEEv = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4dataEv = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4sizeEv = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE5beginEv = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6cbeginEv = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE3endEv = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4cendEv = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6rbeginEv = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE7crbeginEv = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4rendEv = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE5crendEv = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEixEm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE5frontEv = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4backEv = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6lengthEv = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE8max_sizeEv = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE5emptyEv = comdat any

$_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE13remove_prefixEm = comdat any

$_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE13remove_suffixEm = comdat any

$_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4swapERS4_ = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4copyEPDsmm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6substrEmm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE7compareES4_ = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE7compareEmmS4_ = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE7compareEmmS4_mm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE7compareEPKDs = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE7compareEmmPKDs = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE7compareEmmPKDsm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4findES4_m = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4findEDsm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4findEPKDsmm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4findEPKDsm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE5rfindES4_m = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE5rfindEDsm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE5rfindEPKDsmm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE5rfindEPKDsm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE13find_first_ofES4_m = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE13find_first_ofEDsm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE13find_first_ofEPKDsmm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE13find_first_ofEPKDsm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE12find_last_ofES4_m = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE12find_last_ofEDsm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE12find_last_ofEPKDsmm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE12find_last_ofEPKDsm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE17find_first_not_ofES4_m = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE17find_first_not_ofEDsm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE17find_first_not_ofEPKDsmm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE17find_first_not_ofEPKDsm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE16find_last_not_ofES4_m = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE16find_last_not_ofEDsm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE16find_last_not_ofEPKDsmm = comdat any

$_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE16find_last_not_ofEPKDsm = comdat any

$_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEEC5Ev = comdat any

$_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEEC5EPKwm = comdat any

$_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEEC5EPKw = comdat any

$_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEEC5ERKNS1_12basic_stringIwS3_NS1_9allocatorIwEEEE = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEEcvNS1_12basic_stringIwS3_NS1_9allocatorIwEEEEEv = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4dataEv = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4sizeEv = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE5beginEv = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE6cbeginEv = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE3endEv = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4cendEv = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE6rbeginEv = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE7crbeginEv = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4rendEv = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE5crendEv = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEEixEm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE2atEm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE5frontEv = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4backEv = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE6lengthEv = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE8max_sizeEv = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE5emptyEv = comdat any

$_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEE13remove_prefixEm = comdat any

$_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEE13remove_suffixEm = comdat any

$_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4swapERS4_ = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4copyEPwmm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE6substrEmm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE7compareES4_ = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE7compareEmmS4_ = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE7compareEmmS4_mm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE7compareEPKw = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE7compareEmmPKw = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE7compareEmmPKwm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4findES4_m = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4findEwm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4findEPKwmm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4findEPKwm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE5rfindES4_m = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE5rfindEwm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE5rfindEPKwmm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE5rfindEPKwm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE13find_first_ofES4_m = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE13find_first_ofEwm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE13find_first_ofEPKwmm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE13find_first_ofEPKwm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE12find_last_ofES4_m = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE12find_last_ofEwm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE12find_last_ofEPKwmm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE12find_last_ofEPKwm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE17find_first_not_ofES4_m = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE17find_first_not_ofEwm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE17find_first_not_ofEPKwmm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE17find_first_not_ofEPKwm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE16find_last_not_ofES4_m = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE16find_last_not_ofEwm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE16find_last_not_ofEPKwmm = comdat any

$_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE16find_last_not_ofEPKwm = comdat any

$_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m = comdat any

$_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = comdat any

$_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4nposE = comdat any

$_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4nposE = comdat any

$_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4nposE = comdat any

@.str = private unnamed_addr constant [34 x i8] c"../../base/strings/string_piece.h\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"pos < size()\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"n <= size()\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"pos <= size()\00", align 1
@_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4nposE = weak_odr hidden local_unnamed_addr constant i64 -1, comdat, align 8
@_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4nposE = weak_odr hidden local_unnamed_addr constant i64 -1, comdat, align 8
@_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4nposE = weak_odr hidden local_unnamed_addr constant i64 -1, comdat, align 8
@_ZNSt3__15ctypeIcE2idE = external global %"class.std::__1::locale::id", align 8

@_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEC1Ev = weak_odr hidden unnamed_addr alias void (%"class.base::BasicStringPiece"*), void (%"class.base::BasicStringPiece"*)* @_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEC2Ev
@_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEC1EPKcm = weak_odr hidden unnamed_addr alias void (%"class.base::BasicStringPiece"*, i8*, i64), void (%"class.base::BasicStringPiece"*, i8*, i64)* @_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEC2EPKcm
@_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEC1EPKc = weak_odr hidden unnamed_addr alias void (%"class.base::BasicStringPiece"*, i8*), void (%"class.base::BasicStringPiece"*, i8*)* @_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEC2EPKc
@_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEC1ERKNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE = weak_odr hidden unnamed_addr alias void (%"class.base::BasicStringPiece"*, %"class.std::__1::basic_string"*), void (%"class.base::BasicStringPiece"*, %"class.std::__1::basic_string"*)* @_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEC2ERKNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE
@_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEC1Ev = weak_odr hidden unnamed_addr alias void (%"class.base::BasicStringPiece.1"*), void (%"class.base::BasicStringPiece.1"*)* @_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEC2Ev
@_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEC1EPKDsm = weak_odr hidden unnamed_addr alias void (%"class.base::BasicStringPiece.1"*, i16*, i64), void (%"class.base::BasicStringPiece.1"*, i16*, i64)* @_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEC2EPKDsm
@_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEC1EPKDs = weak_odr hidden unnamed_addr alias void (%"class.base::BasicStringPiece.1"*, i16*), void (%"class.base::BasicStringPiece.1"*, i16*)* @_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEC2EPKDs
@_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEC1ERKNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEE = weak_odr hidden unnamed_addr alias void (%"class.base::BasicStringPiece.1"*, %"class.std::__1::basic_string.2"*), void (%"class.base::BasicStringPiece.1"*, %"class.std::__1::basic_string.2"*)* @_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEC2ERKNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEE
@_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEEC1Ev = weak_odr hidden unnamed_addr alias void (%"class.base::BasicStringPiece.13"*), void (%"class.base::BasicStringPiece.13"*)* @_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEEC2Ev
@_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEEC1EPKwm = weak_odr hidden unnamed_addr alias void (%"class.base::BasicStringPiece.13"*, i32*, i64), void (%"class.base::BasicStringPiece.13"*, i32*, i64)* @_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEEC2EPKwm
@_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEEC1EPKw = weak_odr hidden unnamed_addr alias void (%"class.base::BasicStringPiece.13"*, i32*), void (%"class.base::BasicStringPiece.13"*, i32*)* @_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEEC2EPKw
@_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEEC1ERKNS1_12basic_stringIwS3_NS1_9allocatorIwEEEE = weak_odr hidden unnamed_addr alias void (%"class.base::BasicStringPiece.13"*, %"class.std::__1::basic_string.14"*), void (%"class.base::BasicStringPiece.13"*, %"class.std::__1::basic_string.14"*)* @_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEEC2ERKNS1_12basic_stringIwS3_NS1_9allocatorIwEEEE

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEC2Ev(%"class.base::BasicStringPiece"*) unnamed_addr #0 comdat($_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEC5Ev) align 2 {
  %2 = bitcast %"class.base::BasicStringPiece"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEC2EPKcm(%"class.base::BasicStringPiece"*, i8*, i64) unnamed_addr #0 comdat($_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEC5EPKcm) align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  store i8* %1, i8** %4, align 8
  %5 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  store i64 %2, i64* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEC2EPKc(%"class.base::BasicStringPiece"*, i8*) unnamed_addr #0 comdat($_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEC5EPKc) align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  store i8* %1, i8** %4, align 8
  %5 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %6 = icmp eq i8* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %2
  %8 = tail call i64 @strlen(i8* nonnull %1) #12
  store i64 %8, i64* %5, align 8
  br label %12

9:                                                ; preds = %2
  store i64 0, i64* %5, align 8
  %10 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %11 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #12
  br label %12

12:                                               ; preds = %7, %9
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* sret, i8*, i32, i8*) local_unnamed_addr #2

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"*) unnamed_addr #3

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEC2ERKNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE(%"class.base::BasicStringPiece"*, %"class.std::__1::basic_string"* dereferenceable(24)) unnamed_addr #0 comdat($_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEEC5ERKNS1_12basic_stringIcS3_NS1_9allocatorIcEEEE) align 2 {
  %3 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %4 = bitcast %"class.std::__1::basic_string"* %1 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %4, i64 0, i32 1, i32 0
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  %8 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = bitcast %"class.std::__1::basic_string"* %1 to i8*
  %11 = select i1 %7, i8* %9, i8* %10
  store i8* %11, i8** %3, align 8
  %12 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %13 = load i8, i8* %5, align 1
  %14 = icmp slt i8 %13, 0
  %15 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = zext i8 %13 to i64
  %18 = select i1 %14, i64 %16, i64 %17
  store i64 %18, i64* %12, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEEcvNS1_12basic_stringIcS3_NS1_9allocatorIcEEEEEv(%"class.std::__1::basic_string"* noalias sret, %"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 0
  %4 = load i8*, i8** %3, align 8
  %5 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, -17
  br i1 %7, label %8, label %10

8:                                                ; preds = %2
  %9 = bitcast %"class.std::__1::basic_string"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %9) #13
  unreachable

10:                                               ; preds = %2
  %11 = icmp ult i64 %6, 23
  br i1 %11, label %20, label %12

12:                                               ; preds = %10
  %13 = add nuw i64 %6, 16
  %14 = and i64 %13, -16
  %15 = tail call i8* @_Znwm(i64 %14) #14
  %16 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i8* %15, i8** %16, align 8
  %17 = or i64 %14, -9223372036854775808
  %18 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %17, i64* %18, align 8
  %19 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %6, i64* %19, align 8
  br label %26

20:                                               ; preds = %10
  %21 = trunc i64 %6 to i8
  %22 = bitcast %"class.std::__1::basic_string"* %0 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %23 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %22, i64 0, i32 1, i32 0
  store i8 %21, i8* %23, align 1
  %24 = bitcast %"class.std::__1::basic_string"* %0 to i8*
  %25 = icmp eq i64 %6, 0
  br i1 %25, label %28, label %26

26:                                               ; preds = %20, %12
  %27 = phi i8* [ %15, %12 ], [ %24, %20 ]
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %27, i8* align 1 %4, i64 %6, i1 false) #12
  br label %28

28:                                               ; preds = %20, %26
  %29 = phi i8* [ %24, %20 ], [ %27, %26 ]
  %30 = getelementptr inbounds i8, i8* %29, i64 %6
  store i8 0, i8* %30, align 1
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i8* @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4dataEv(%"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4sizeEv(%"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i8* @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE5beginEv(%"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i8* @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6cbeginEv(%"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  ret i8* %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i8* @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE3endEv(%"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %3, i64 %5
  ret i8* %6
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i8* @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4cendEv(%"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %3, i64 %5
  ret i8* %6
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden { i8*, i8* } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6rbeginEv(%"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %3, i64 %5
  %7 = insertvalue { i8*, i8* } undef, i8* %6, 0
  %8 = insertvalue { i8*, i8* } %7, i8* %6, 1
  ret { i8*, i8* } %8
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden { i8*, i8* } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE7crbeginEv(%"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i8, i8* %3, i64 %5
  %7 = insertvalue { i8*, i8* } undef, i8* %6, 0
  %8 = insertvalue { i8*, i8* } %7, i8* %6, 1
  ret { i8*, i8* } %8
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden { i8*, i8* } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4rendEv(%"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = insertvalue { i8*, i8* } undef, i8* %3, 0
  %5 = insertvalue { i8*, i8* } %4, i8* %3, 1
  ret { i8*, i8* } %5
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden { i8*, i8* } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE5crendEv(%"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %3 = load i8*, i8** %2, align 8
  %4 = insertvalue { i8*, i8* } undef, i8* %3, 0
  %5 = insertvalue { i8*, i8* } %4, i8* %3, 1
  ret { i8*, i8* } %5
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden dereferenceable(1) i8* @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEEixEm(%"class.base::BasicStringPiece"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = tail call dereferenceable(1) i8* @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE2atEm(%"class.base::BasicStringPiece"* %0, i64 %1)
  ret i8* %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden dereferenceable(1) i8* @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE2atEm(%"class.base::BasicStringPiece"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i64 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #12
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %9) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i8* %14, i8* %15) #12
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 171, %"class.logging::CheckOpResult"* nonnull %4) #12
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #12
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  %23 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  ret i8* %25
}

declare void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* sret, i8*, i32, %"class.logging::CheckOpResult"*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden dereferenceable(1) i8* @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE5frontEv(%"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat align 2 {
  %2 = tail call dereferenceable(1) i8* @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE2atEm(%"class.base::BasicStringPiece"* %0, i64 0) #12
  ret i8* %2
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden dereferenceable(1) i8* @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4backEv(%"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, -1
  %5 = tail call dereferenceable(1) i8* @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE2atEm(%"class.base::BasicStringPiece"* %0, i64 %4) #12
  ret i8* %5
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6lengthEv(%"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE8max_sizeEv(%"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat align 2 {
  ret i64 -1
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE5emptyEv(%"class.base::BasicStringPiece"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEE13remove_prefixEm(%"class.base::BasicStringPiece"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ult i64 %9, %1
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #12
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %9) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), i8* %14, i8* %15) #12
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 194, %"class.logging::CheckOpResult"* nonnull %4) #12
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #12
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  %23 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %24 = load i8*, i8** %23, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 %1
  store i8* %25, i8** %23, align 8
  %26 = load i64, i64* %8, align 8
  %27 = sub i64 %26, %1
  store i64 %27, i64* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEE13remove_suffixEm(%"class.base::BasicStringPiece"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ult i64 %9, %1
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #12
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %9) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), i8* %14, i8* %15) #12
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 201, %"class.logging::CheckOpResult"* nonnull %4) #12
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #12
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  %23 = load i64, i64* %8, align 8
  %24 = sub i64 %23, %1
  store i64 %24, i64* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4swapERS4_(%"class.base::BasicStringPiece"*, %"class.base::BasicStringPiece"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.base::BasicStringPiece"* %0 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"class.base::BasicStringPiece"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  store i64 %6, i64* %3, align 8
  store i64 %4, i64* %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %7, align 8
  store i64 %8, i64* %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4copyEPcmm(%"class.base::BasicStringPiece"*, i8*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #12
  %9 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %9, align 8
  %10 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = icmp ult i64 %11, %3
  br i1 %13, label %15, label %14

14:                                               ; preds = %4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store i8* null, i8** %9, align 8
  br label %24

15:                                               ; preds = %4
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %3) #12
  %17 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %11) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %5, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i8* %16, i8* %17) #12
  %18 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store i8* %19, i8** %9, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %24, label %21

21:                                               ; preds = %15
  %22 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 218, %"class.logging::CheckOpResult"* nonnull %6) #12
  %23 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #12
  br label %24

24:                                               ; preds = %14, %15, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #12
  %25 = load i64, i64* %10, align 8
  %26 = sub i64 %25, %3
  %27 = icmp ult i64 %26, %2
  %28 = select i1 %27, i64 %26, i64 %2
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %34, label %30

30:                                               ; preds = %24
  %31 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = getelementptr inbounds i8, i8* %32, i64 %3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %1, i8* align 1 %33, i64 %28, i1 false) #12
  br label %34

34:                                               ; preds = %24, %30
  ret i64 %28
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden { i8*, i64 } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6substrEmm(%"class.base::BasicStringPiece"*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #12
  %8 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %8, align 8
  %9 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ult i64 %10, %1
  br i1 %12, label %14, label %13

13:                                               ; preds = %3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %8, align 8
  br label %23

14:                                               ; preds = %3
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #12
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %10) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i8* %15, i8* %16) #12
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %8, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 226, %"class.logging::CheckOpResult"* nonnull %5) #12
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #12
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #12
  %24 = load i64, i64* %9, align 8
  %25 = sub i64 %24, %1
  %26 = icmp ult i64 %25, %2
  %27 = select i1 %26, i64 %25, i64 %2
  %28 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds i8, i8* %29, i64 %1
  %31 = insertvalue { i8*, i64 } undef, i8* %30, 0
  %32 = insertvalue { i8*, i64 } %31, i64 %27, 1
  ret { i8*, i64 } %32
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE7compareES4_(%"class.base::BasicStringPiece"*, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, %2
  %7 = select i1 %6, i64 %2, i64 %5
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = tail call i32 @memcmp(i8* %9, i8* %1, i64 %7) #12
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %17

12:                                               ; preds = %3
  %13 = icmp eq i64 %5, %2
  br i1 %13, label %17, label %14

14:                                               ; preds = %12
  %15 = icmp ult i64 %5, %2
  %16 = select i1 %15, i32 -1, i32 1
  br label %17

17:                                               ; preds = %12, %3, %14
  %18 = phi i32 [ %16, %14 ], [ %10, %3 ], [ 0, %12 ]
  ret i32 %18
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE7compareEmmS4_(%"class.base::BasicStringPiece"*, i64, i64, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %6 = tail call { i8*, i64 } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6substrEmm(%"class.base::BasicStringPiece"* %0, i64 %1, i64 %2)
  %7 = extractvalue { i8*, i64 } %6, 0
  %8 = extractvalue { i8*, i64 } %6, 1
  %9 = icmp ugt i64 %8, %4
  %10 = select i1 %9, i64 %4, i64 %8
  %11 = tail call i32 @memcmp(i8* %7, i8* %3, i64 %10) #12
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %18

13:                                               ; preds = %5
  %14 = icmp eq i64 %8, %4
  br i1 %14, label %18, label %15

15:                                               ; preds = %13
  %16 = icmp ult i64 %8, %4
  %17 = select i1 %16, i32 -1, i32 1
  br label %18

18:                                               ; preds = %5, %13, %15
  %19 = phi i32 [ %17, %15 ], [ %11, %5 ], [ 0, %13 ]
  ret i32 %19
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE7compareEmmS4_mm(%"class.base::BasicStringPiece"*, i64, i64, i8*, i64, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %8 = alloca %"class.base::BasicStringPiece", align 8
  %9 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %8, i64 0, i32 0
  store i8* %3, i8** %9, align 8
  %10 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %8, i64 0, i32 1
  store i64 %4, i64* %10, align 8
  %11 = tail call { i8*, i64 } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6substrEmm(%"class.base::BasicStringPiece"* %0, i64 %1, i64 %2)
  %12 = extractvalue { i8*, i64 } %11, 0
  %13 = extractvalue { i8*, i64 } %11, 1
  %14 = call { i8*, i64 } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6substrEmm(%"class.base::BasicStringPiece"* nonnull %8, i64 %5, i64 %6)
  %15 = extractvalue { i8*, i64 } %14, 0
  %16 = extractvalue { i8*, i64 } %14, 1
  %17 = icmp ugt i64 %13, %16
  %18 = select i1 %17, i64 %16, i64 %13
  %19 = call i32 @memcmp(i8* %12, i8* %15, i64 %18) #12
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %26

21:                                               ; preds = %7
  %22 = icmp eq i64 %13, %16
  br i1 %22, label %26, label %23

23:                                               ; preds = %21
  %24 = icmp ult i64 %13, %16
  %25 = select i1 %24, i32 -1, i32 1
  br label %26

26:                                               ; preds = %7, %21, %23
  %27 = phi i32 [ %25, %23 ], [ %19, %7 ], [ 0, %21 ]
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE7compareEPKc(%"class.base::BasicStringPiece"*, i8*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = icmp eq i8* %1, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %2
  %6 = tail call i64 @strlen(i8* nonnull %1) #12
  br label %10

7:                                                ; preds = %2
  %8 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %9 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #12
  br label %10

10:                                               ; preds = %5, %7
  %11 = phi i64 [ 0, %7 ], [ %6, %5 ]
  %12 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp ugt i64 %13, %11
  %15 = select i1 %14, i64 %11, i64 %13
  %16 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  %18 = call i32 @memcmp(i8* %17, i8* %1, i64 %15) #12
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %25

20:                                               ; preds = %10
  %21 = icmp eq i64 %13, %11
  br i1 %21, label %25, label %22

22:                                               ; preds = %20
  %23 = icmp ult i64 %13, %11
  %24 = select i1 %23, i32 -1, i32 1
  br label %25

25:                                               ; preds = %10, %20, %22
  %26 = phi i32 [ %24, %22 ], [ %18, %10 ], [ 0, %20 ]
  ret i32 %26
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE7compareEmmPKc(%"class.base::BasicStringPiece"*, i64, i64, i8*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = tail call { i8*, i64 } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6substrEmm(%"class.base::BasicStringPiece"* %0, i64 %1, i64 %2)
  %7 = extractvalue { i8*, i64 } %6, 0
  %8 = extractvalue { i8*, i64 } %6, 1
  %9 = icmp eq i8* %3, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %4
  %11 = tail call i64 @strlen(i8* nonnull %3) #12
  br label %15

12:                                               ; preds = %4
  %13 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %14 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #12
  br label %15

15:                                               ; preds = %10, %12
  %16 = phi i64 [ 0, %12 ], [ %11, %10 ]
  %17 = icmp ugt i64 %8, %16
  %18 = select i1 %17, i64 %16, i64 %8
  %19 = call i32 @memcmp(i8* %7, i8* %3, i64 %18) #12
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %26

21:                                               ; preds = %15
  %22 = icmp eq i64 %8, %16
  br i1 %22, label %26, label %23

23:                                               ; preds = %21
  %24 = icmp ult i64 %8, %16
  %25 = select i1 %24, i32 -1, i32 1
  br label %26

26:                                               ; preds = %15, %21, %23
  %27 = phi i32 [ %25, %23 ], [ %19, %15 ], [ 0, %21 ]
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE7compareEmmPKcm(%"class.base::BasicStringPiece"*, i64, i64, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %6 = tail call { i8*, i64 } @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE6substrEmm(%"class.base::BasicStringPiece"* %0, i64 %1, i64 %2)
  %7 = extractvalue { i8*, i64 } %6, 0
  %8 = extractvalue { i8*, i64 } %6, 1
  %9 = icmp ugt i64 %8, %4
  %10 = select i1 %9, i64 %4, i64 %8
  %11 = tail call i32 @memcmp(i8* %7, i8* %3, i64 %10) #12
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %18

13:                                               ; preds = %5
  %14 = icmp eq i64 %8, %4
  br i1 %14, label %18, label %15

15:                                               ; preds = %13
  %16 = icmp ult i64 %8, %4
  %17 = select i1 %16, i32 -1, i32 1
  br label %18

18:                                               ; preds = %5, %13, %15
  %19 = phi i32 [ %17, %15 ], [ %11, %5 ], [ 0, %13 ]
  ret i32 %19
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4findES4_m(%"class.base::BasicStringPiece"*, i8*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, %3
  br i1 %9, label %56, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds i8, i8* %6, i64 %3
  %12 = getelementptr inbounds i8, i8* %6, i64 %8
  %13 = getelementptr inbounds i8, i8* %1, i64 %2
  %14 = icmp eq i64 %2, 0
  br i1 %14, label %48, label %15

15:                                               ; preds = %10
  %16 = ptrtoint i8* %11 to i64
  %17 = ptrtoint i8* %12 to i64
  %18 = sub i64 %17, %16
  %19 = icmp slt i64 %18, %2
  br i1 %19, label %48, label %20

20:                                               ; preds = %15
  %21 = sub i64 1, %2
  %22 = getelementptr inbounds i8, i8* %12, i64 %21
  %23 = icmp eq i8* %22, %11
  br i1 %23, label %48, label %24

24:                                               ; preds = %20
  %25 = load i8, i8* %1, align 1
  br label %26

26:                                               ; preds = %33, %24
  %27 = phi i8* [ %11, %24 ], [ %34, %33 ]
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, %25
  br i1 %29, label %35, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds i8, i8* %27, i64 1
  %32 = icmp eq i8* %31, %22
  br i1 %32, label %48, label %33

33:                                               ; preds = %30, %45
  %34 = phi i8* [ %31, %30 ], [ %46, %45 ]
  br label %26

35:                                               ; preds = %26, %40
  %36 = phi i8* [ %41, %40 ], [ %27, %26 ]
  %37 = phi i8* [ %38, %40 ], [ %1, %26 ]
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  %39 = icmp eq i8* %38, %13
  br i1 %39, label %48, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds i8, i8* %36, i64 1
  %42 = load i8, i8* %41, align 1
  %43 = load i8, i8* %38, align 1
  %44 = icmp eq i8 %42, %43
  br i1 %44, label %35, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds i8, i8* %27, i64 1
  %47 = icmp eq i8* %46, %22
  br i1 %47, label %48, label %33

48:                                               ; preds = %45, %30, %35, %20, %15, %10
  %49 = phi i8* [ %11, %10 ], [ %12, %15 ], [ %12, %20 ], [ %27, %35 ], [ %12, %30 ], [ %12, %45 ]
  %50 = ptrtoint i8* %49 to i64
  %51 = ptrtoint i8* %6 to i64
  %52 = sub i64 %50, %51
  %53 = add i64 %52, %2
  %54 = icmp ugt i64 %53, %8
  %55 = select i1 %54, i64 -1, i64 %52
  br label %56

56:                                               ; preds = %4, %48
  %57 = phi i64 [ %55, %48 ], [ -1, %4 ]
  ret i64 %57
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN4base8internal4findENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES5_m(i8*, i64, i8* readonly, i64, i64) local_unnamed_addr #4 {
  %6 = icmp ult i64 %1, %4
  br i1 %6, label %53, label %7

7:                                                ; preds = %5
  %8 = getelementptr inbounds i8, i8* %0, i64 %4
  %9 = getelementptr inbounds i8, i8* %0, i64 %1
  %10 = getelementptr inbounds i8, i8* %2, i64 %3
  %11 = icmp eq i64 %3, 0
  br i1 %11, label %45, label %12

12:                                               ; preds = %7
  %13 = ptrtoint i8* %8 to i64
  %14 = ptrtoint i8* %9 to i64
  %15 = sub i64 %14, %13
  %16 = icmp slt i64 %15, %3
  br i1 %16, label %45, label %17

17:                                               ; preds = %12
  %18 = sub i64 1, %3
  %19 = getelementptr inbounds i8, i8* %9, i64 %18
  %20 = icmp eq i8* %19, %8
  br i1 %20, label %45, label %21

21:                                               ; preds = %17
  %22 = load i8, i8* %2, align 1
  br label %23

23:                                               ; preds = %30, %21
  %24 = phi i8* [ %8, %21 ], [ %31, %30 ]
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, %22
  br i1 %26, label %32, label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds i8, i8* %24, i64 1
  %29 = icmp eq i8* %28, %19
  br i1 %29, label %45, label %30

30:                                               ; preds = %27, %42
  %31 = phi i8* [ %28, %27 ], [ %43, %42 ]
  br label %23

32:                                               ; preds = %23, %37
  %33 = phi i8* [ %38, %37 ], [ %24, %23 ]
  %34 = phi i8* [ %35, %37 ], [ %2, %23 ]
  %35 = getelementptr inbounds i8, i8* %34, i64 1
  %36 = icmp eq i8* %35, %10
  br i1 %36, label %45, label %37

37:                                               ; preds = %32
  %38 = getelementptr inbounds i8, i8* %33, i64 1
  %39 = load i8, i8* %38, align 1
  %40 = load i8, i8* %35, align 1
  %41 = icmp eq i8 %39, %40
  br i1 %41, label %32, label %42

42:                                               ; preds = %37
  %43 = getelementptr inbounds i8, i8* %24, i64 1
  %44 = icmp eq i8* %43, %19
  br i1 %44, label %45, label %30

45:                                               ; preds = %42, %27, %32, %17, %12, %7
  %46 = phi i8* [ %8, %7 ], [ %9, %12 ], [ %9, %17 ], [ %24, %32 ], [ %9, %27 ], [ %9, %42 ]
  %47 = ptrtoint i8* %46 to i64
  %48 = ptrtoint i8* %0 to i64
  %49 = sub i64 %47, %48
  %50 = add i64 %49, %3
  %51 = icmp ugt i64 %50, %1
  %52 = select i1 %51, i64 -1, i64 %49
  br label %53

53:                                               ; preds = %5, %45
  %54 = phi i64 [ %52, %45 ], [ -1, %5 ]
  ret i64 %54
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4findEcm(%"class.base::BasicStringPiece"*, i8 signext, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, %2
  br i1 %6, label %7, label %19

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 %2
  %11 = sub i64 %5, %2
  %12 = sext i8 %1 to i32
  %13 = tail call i8* @memchr(i8* %10, i32 %12, i64 %11) #12
  %14 = icmp eq i8* %13, null
  br i1 %14, label %19, label %15

15:                                               ; preds = %7
  %16 = ptrtoint i8* %13 to i64
  %17 = ptrtoint i8* %9 to i64
  %18 = sub i64 %16, %17
  br label %19

19:                                               ; preds = %15, %7, %3
  %20 = phi i64 [ -1, %3 ], [ %18, %15 ], [ -1, %7 ]
  ret i64 %20
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4findEPKcmm(%"class.base::BasicStringPiece"*, i8*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, %2
  br i1 %9, label %56, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds i8, i8* %6, i64 %2
  %12 = getelementptr inbounds i8, i8* %6, i64 %8
  %13 = getelementptr inbounds i8, i8* %1, i64 %3
  %14 = icmp eq i64 %3, 0
  br i1 %14, label %48, label %15

15:                                               ; preds = %10
  %16 = ptrtoint i8* %11 to i64
  %17 = ptrtoint i8* %12 to i64
  %18 = sub i64 %17, %16
  %19 = icmp slt i64 %18, %3
  br i1 %19, label %48, label %20

20:                                               ; preds = %15
  %21 = sub i64 1, %3
  %22 = getelementptr inbounds i8, i8* %12, i64 %21
  %23 = icmp eq i8* %22, %11
  br i1 %23, label %48, label %24

24:                                               ; preds = %20
  %25 = load i8, i8* %1, align 1
  br label %26

26:                                               ; preds = %33, %24
  %27 = phi i8* [ %11, %24 ], [ %34, %33 ]
  %28 = load i8, i8* %27, align 1
  %29 = icmp eq i8 %28, %25
  br i1 %29, label %35, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds i8, i8* %27, i64 1
  %32 = icmp eq i8* %31, %22
  br i1 %32, label %48, label %33

33:                                               ; preds = %30, %45
  %34 = phi i8* [ %31, %30 ], [ %46, %45 ]
  br label %26

35:                                               ; preds = %26, %40
  %36 = phi i8* [ %41, %40 ], [ %27, %26 ]
  %37 = phi i8* [ %38, %40 ], [ %1, %26 ]
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  %39 = icmp eq i8* %38, %13
  br i1 %39, label %48, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds i8, i8* %36, i64 1
  %42 = load i8, i8* %41, align 1
  %43 = load i8, i8* %38, align 1
  %44 = icmp eq i8 %42, %43
  br i1 %44, label %35, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds i8, i8* %27, i64 1
  %47 = icmp eq i8* %46, %22
  br i1 %47, label %48, label %33

48:                                               ; preds = %45, %30, %35, %20, %15, %10
  %49 = phi i8* [ %11, %10 ], [ %12, %15 ], [ %12, %20 ], [ %27, %35 ], [ %12, %30 ], [ %12, %45 ]
  %50 = ptrtoint i8* %49 to i64
  %51 = ptrtoint i8* %6 to i64
  %52 = sub i64 %50, %51
  %53 = add i64 %52, %3
  %54 = icmp ugt i64 %53, %8
  %55 = select i1 %54, i64 -1, i64 %52
  br label %56

56:                                               ; preds = %4, %48
  %57 = phi i64 [ %55, %48 ], [ -1, %4 ]
  ret i64 %57
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE4findEPKcm(%"class.base::BasicStringPiece"*, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = icmp eq i8* %1, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %3
  %7 = tail call i64 @strlen(i8* nonnull %1) #12
  br label %11

8:                                                ; preds = %3
  %9 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %10 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #12
  br label %11

11:                                               ; preds = %6, %8
  %12 = phi i64 [ 0, %8 ], [ %7, %6 ]
  %13 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ult i64 %16, %2
  br i1 %17, label %64, label %18

18:                                               ; preds = %11
  %19 = getelementptr inbounds i8, i8* %14, i64 %2
  %20 = getelementptr inbounds i8, i8* %14, i64 %16
  %21 = getelementptr inbounds i8, i8* %1, i64 %12
  %22 = icmp eq i64 %12, 0
  br i1 %22, label %56, label %23

23:                                               ; preds = %18
  %24 = ptrtoint i8* %19 to i64
  %25 = ptrtoint i8* %20 to i64
  %26 = sub i64 %25, %24
  %27 = icmp slt i64 %26, %12
  br i1 %27, label %56, label %28

28:                                               ; preds = %23
  %29 = sub i64 1, %12
  %30 = getelementptr inbounds i8, i8* %20, i64 %29
  %31 = icmp eq i8* %30, %19
  br i1 %31, label %56, label %32

32:                                               ; preds = %28
  %33 = load i8, i8* %1, align 1
  br label %34

34:                                               ; preds = %41, %32
  %35 = phi i8* [ %19, %32 ], [ %42, %41 ]
  %36 = load i8, i8* %35, align 1
  %37 = icmp eq i8 %36, %33
  br i1 %37, label %43, label %38

38:                                               ; preds = %34
  %39 = getelementptr inbounds i8, i8* %35, i64 1
  %40 = icmp eq i8* %39, %30
  br i1 %40, label %56, label %41

41:                                               ; preds = %38, %53
  %42 = phi i8* [ %39, %38 ], [ %54, %53 ]
  br label %34

43:                                               ; preds = %34, %48
  %44 = phi i8* [ %49, %48 ], [ %35, %34 ]
  %45 = phi i8* [ %46, %48 ], [ %1, %34 ]
  %46 = getelementptr inbounds i8, i8* %45, i64 1
  %47 = icmp eq i8* %46, %21
  br i1 %47, label %56, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds i8, i8* %44, i64 1
  %50 = load i8, i8* %49, align 1
  %51 = load i8, i8* %46, align 1
  %52 = icmp eq i8 %50, %51
  br i1 %52, label %43, label %53

53:                                               ; preds = %48
  %54 = getelementptr inbounds i8, i8* %35, i64 1
  %55 = icmp eq i8* %54, %30
  br i1 %55, label %56, label %41

56:                                               ; preds = %53, %38, %43, %28, %23, %18
  %57 = phi i8* [ %19, %18 ], [ %20, %23 ], [ %20, %28 ], [ %35, %43 ], [ %20, %38 ], [ %20, %53 ]
  %58 = ptrtoint i8* %57 to i64
  %59 = ptrtoint i8* %14 to i64
  %60 = sub i64 %58, %59
  %61 = add i64 %60, %12
  %62 = icmp ugt i64 %61, %16
  %63 = select i1 %62, i64 -1, i64 %60
  br label %64

64:                                               ; preds = %11, %56
  %65 = phi i64 [ %63, %56 ], [ -1, %11 ]
  ret i64 %65
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE5rfindES4_m(%"class.base::BasicStringPiece"*, i8*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, %2
  br i1 %9, label %54, label %10

10:                                               ; preds = %4
  %11 = icmp eq i64 %2, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %10
  %13 = icmp ugt i64 %8, %3
  %14 = select i1 %13, i64 %3, i64 %8
  br label %54

15:                                               ; preds = %10
  %16 = sub i64 %8, %2
  %17 = icmp ugt i64 %16, %3
  %18 = select i1 %17, i64 %3, i64 %16
  %19 = getelementptr inbounds i8, i8* %6, i64 %18
  %20 = getelementptr inbounds i8, i8* %19, i64 %2
  %21 = ptrtoint i8* %20 to i64
  %22 = ptrtoint i8* %6 to i64
  %23 = sub i64 %21, %22
  %24 = icmp slt i64 %23, %2
  br i1 %24, label %54, label %25

25:                                               ; preds = %15
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = add nsw i64 %2, -1
  %28 = getelementptr inbounds i8, i8* %6, i64 %27
  %29 = getelementptr inbounds i8, i8* %26, i64 -1
  br label %30

30:                                               ; preds = %38, %25
  %31 = phi i8* [ %20, %25 ], [ %34, %38 ]
  %32 = icmp eq i8* %28, %31
  br i1 %32, label %54, label %33

33:                                               ; preds = %30
  %34 = getelementptr inbounds i8, i8* %31, i64 -1
  %35 = load i8, i8* %34, align 1
  %36 = load i8, i8* %29, align 1
  %37 = icmp eq i8 %35, %36
  br i1 %37, label %39, label %38

38:                                               ; preds = %43, %33
  br label %30

39:                                               ; preds = %33, %43
  %40 = phi i8* [ %44, %43 ], [ %34, %33 ]
  %41 = phi i8* [ %45, %43 ], [ %29, %33 ]
  %42 = icmp eq i8* %41, %1
  br i1 %42, label %49, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds i8, i8* %40, i64 -1
  %45 = getelementptr inbounds i8, i8* %41, i64 -1
  %46 = load i8, i8* %44, align 1
  %47 = load i8, i8* %45, align 1
  %48 = icmp eq i8 %46, %47
  br i1 %48, label %39, label %38

49:                                               ; preds = %39
  %50 = icmp eq i8* %40, %20
  br i1 %50, label %54, label %51

51:                                               ; preds = %49
  %52 = ptrtoint i8* %40 to i64
  %53 = sub i64 %52, %22
  br label %54

54:                                               ; preds = %30, %4, %12, %15, %49, %51
  %55 = phi i64 [ %14, %12 ], [ -1, %4 ], [ %53, %51 ], [ -1, %49 ], [ -1, %15 ], [ -1, %30 ]
  ret i64 %55
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN4base8internal5rfindENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES5_m(i8*, i64, i8* readonly, i64, i64) local_unnamed_addr #4 {
  %6 = icmp ult i64 %1, %3
  br i1 %6, label %51, label %7

7:                                                ; preds = %5
  %8 = icmp eq i64 %3, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %7
  %10 = icmp ult i64 %4, %1
  %11 = select i1 %10, i64 %4, i64 %1
  br label %51

12:                                               ; preds = %7
  %13 = sub i64 %1, %3
  %14 = icmp ugt i64 %13, %4
  %15 = select i1 %14, i64 %4, i64 %13
  %16 = getelementptr inbounds i8, i8* %0, i64 %15
  %17 = getelementptr inbounds i8, i8* %16, i64 %3
  %18 = ptrtoint i8* %17 to i64
  %19 = ptrtoint i8* %0 to i64
  %20 = sub i64 %18, %19
  %21 = icmp slt i64 %20, %3
  br i1 %21, label %51, label %22

22:                                               ; preds = %12
  %23 = getelementptr inbounds i8, i8* %2, i64 %3
  %24 = add nsw i64 %3, -1
  %25 = getelementptr inbounds i8, i8* %0, i64 %24
  %26 = getelementptr inbounds i8, i8* %23, i64 -1
  br label %27

27:                                               ; preds = %35, %22
  %28 = phi i8* [ %17, %22 ], [ %31, %35 ]
  %29 = icmp eq i8* %25, %28
  br i1 %29, label %51, label %30

30:                                               ; preds = %27
  %31 = getelementptr inbounds i8, i8* %28, i64 -1
  %32 = load i8, i8* %31, align 1
  %33 = load i8, i8* %26, align 1
  %34 = icmp eq i8 %32, %33
  br i1 %34, label %36, label %35

35:                                               ; preds = %40, %30
  br label %27

36:                                               ; preds = %30, %40
  %37 = phi i8* [ %41, %40 ], [ %31, %30 ]
  %38 = phi i8* [ %42, %40 ], [ %26, %30 ]
  %39 = icmp eq i8* %38, %2
  br i1 %39, label %46, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds i8, i8* %37, i64 -1
  %42 = getelementptr inbounds i8, i8* %38, i64 -1
  %43 = load i8, i8* %41, align 1
  %44 = load i8, i8* %42, align 1
  %45 = icmp eq i8 %43, %44
  br i1 %45, label %36, label %35

46:                                               ; preds = %36
  %47 = icmp eq i8* %37, %17
  br i1 %47, label %51, label %48

48:                                               ; preds = %46
  %49 = ptrtoint i8* %37 to i64
  %50 = sub i64 %49, %19
  br label %51

51:                                               ; preds = %27, %5, %9, %12, %46, %48
  %52 = phi i64 [ %11, %9 ], [ -1, %5 ], [ %50, %48 ], [ -1, %46 ], [ -1, %12 ], [ -1, %27 ]
  ret i64 %52
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE5rfindEcm(%"class.base::BasicStringPiece"*, i8 signext, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %24, label %7

7:                                                ; preds = %3
  %8 = add i64 %5, -1
  %9 = icmp ult i64 %8, %2
  %10 = select i1 %9, i64 %8, i64 %2
  %11 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %10
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i8 %14, %1
  br i1 %15, label %24, label %16

16:                                               ; preds = %7, %19
  %17 = phi i64 [ %20, %19 ], [ %10, %7 ]
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %16
  %20 = add i64 %17, -1
  %21 = getelementptr inbounds i8, i8* %12, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = icmp eq i8 %22, %1
  br i1 %23, label %24, label %16

24:                                               ; preds = %16, %19, %7, %3
  %25 = phi i64 [ -1, %3 ], [ %10, %7 ], [ -1, %16 ], [ %20, %19 ]
  ret i64 %25
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE5rfindEPKcmm(%"class.base::BasicStringPiece"*, i8*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %6 = load i8*, i8** %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, %3
  br i1 %9, label %54, label %10

10:                                               ; preds = %4
  %11 = icmp eq i64 %3, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %10
  %13 = icmp ugt i64 %8, %2
  %14 = select i1 %13, i64 %2, i64 %8
  br label %54

15:                                               ; preds = %10
  %16 = sub i64 %8, %3
  %17 = icmp ugt i64 %16, %2
  %18 = select i1 %17, i64 %2, i64 %16
  %19 = getelementptr inbounds i8, i8* %6, i64 %18
  %20 = getelementptr inbounds i8, i8* %19, i64 %3
  %21 = ptrtoint i8* %20 to i64
  %22 = ptrtoint i8* %6 to i64
  %23 = sub i64 %21, %22
  %24 = icmp slt i64 %23, %3
  br i1 %24, label %54, label %25

25:                                               ; preds = %15
  %26 = getelementptr inbounds i8, i8* %1, i64 %3
  %27 = add nsw i64 %3, -1
  %28 = getelementptr inbounds i8, i8* %6, i64 %27
  %29 = getelementptr inbounds i8, i8* %26, i64 -1
  br label %30

30:                                               ; preds = %38, %25
  %31 = phi i8* [ %20, %25 ], [ %34, %38 ]
  %32 = icmp eq i8* %28, %31
  br i1 %32, label %54, label %33

33:                                               ; preds = %30
  %34 = getelementptr inbounds i8, i8* %31, i64 -1
  %35 = load i8, i8* %34, align 1
  %36 = load i8, i8* %29, align 1
  %37 = icmp eq i8 %35, %36
  br i1 %37, label %39, label %38

38:                                               ; preds = %43, %33
  br label %30

39:                                               ; preds = %33, %43
  %40 = phi i8* [ %44, %43 ], [ %34, %33 ]
  %41 = phi i8* [ %45, %43 ], [ %29, %33 ]
  %42 = icmp eq i8* %41, %1
  br i1 %42, label %49, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds i8, i8* %40, i64 -1
  %45 = getelementptr inbounds i8, i8* %41, i64 -1
  %46 = load i8, i8* %44, align 1
  %47 = load i8, i8* %45, align 1
  %48 = icmp eq i8 %46, %47
  br i1 %48, label %39, label %38

49:                                               ; preds = %39
  %50 = icmp eq i8* %40, %20
  br i1 %50, label %54, label %51

51:                                               ; preds = %49
  %52 = ptrtoint i8* %40 to i64
  %53 = sub i64 %52, %22
  br label %54

54:                                               ; preds = %30, %4, %12, %15, %49, %51
  %55 = phi i64 [ %14, %12 ], [ -1, %4 ], [ %53, %51 ], [ -1, %49 ], [ -1, %15 ], [ -1, %30 ]
  ret i64 %55
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE5rfindEPKcm(%"class.base::BasicStringPiece"*, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = icmp eq i8* %1, null
  br i1 %5, label %6, label %11

6:                                                ; preds = %3
  %7 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %8 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #12
  %9 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %10 = load i64, i64* %9, align 8
  br label %20

11:                                               ; preds = %3
  %12 = tail call i64 @strlen(i8* nonnull %1) #12
  %13 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %14 = load i8*, i8** %13, align 8
  %15 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ult i64 %16, %12
  br i1 %17, label %63, label %18

18:                                               ; preds = %11
  %19 = icmp eq i64 %12, 0
  br i1 %19, label %20, label %24

20:                                               ; preds = %6, %18
  %21 = phi i64 [ %10, %6 ], [ %16, %18 ]
  %22 = icmp ugt i64 %21, %2
  %23 = select i1 %22, i64 %2, i64 %21
  br label %63

24:                                               ; preds = %18
  %25 = sub i64 %16, %12
  %26 = icmp ugt i64 %25, %2
  %27 = select i1 %26, i64 %2, i64 %25
  %28 = getelementptr inbounds i8, i8* %14, i64 %27
  %29 = getelementptr inbounds i8, i8* %28, i64 %12
  %30 = ptrtoint i8* %29 to i64
  %31 = ptrtoint i8* %14 to i64
  %32 = sub i64 %30, %31
  %33 = icmp slt i64 %32, %12
  br i1 %33, label %63, label %34

34:                                               ; preds = %24
  %35 = getelementptr inbounds i8, i8* %1, i64 %12
  %36 = add nsw i64 %12, -1
  %37 = getelementptr inbounds i8, i8* %14, i64 %36
  %38 = getelementptr inbounds i8, i8* %35, i64 -1
  br label %39

39:                                               ; preds = %47, %34
  %40 = phi i8* [ %29, %34 ], [ %43, %47 ]
  %41 = icmp eq i8* %37, %40
  br i1 %41, label %63, label %42

42:                                               ; preds = %39
  %43 = getelementptr inbounds i8, i8* %40, i64 -1
  %44 = load i8, i8* %43, align 1
  %45 = load i8, i8* %38, align 1
  %46 = icmp eq i8 %44, %45
  br i1 %46, label %48, label %47

47:                                               ; preds = %52, %42
  br label %39

48:                                               ; preds = %42, %52
  %49 = phi i8* [ %53, %52 ], [ %43, %42 ]
  %50 = phi i8* [ %54, %52 ], [ %38, %42 ]
  %51 = icmp eq i8* %50, %1
  br i1 %51, label %58, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds i8, i8* %49, i64 -1
  %54 = getelementptr inbounds i8, i8* %50, i64 -1
  %55 = load i8, i8* %53, align 1
  %56 = load i8, i8* %54, align 1
  %57 = icmp eq i8 %55, %56
  br i1 %57, label %48, label %47

58:                                               ; preds = %48
  %59 = icmp eq i8* %49, %29
  br i1 %59, label %63, label %60

60:                                               ; preds = %58
  %61 = ptrtoint i8* %49 to i64
  %62 = sub i64 %61, %31
  br label %63

63:                                               ; preds = %39, %11, %20, %24, %58, %60
  %64 = phi i64 [ %23, %20 ], [ -1, %11 ], [ %62, %60 ], [ -1, %58 ], [ -1, %24 ], [ -1, %39 ]
  ret i64 %64
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE13find_first_ofES4_m(%"class.base::BasicStringPiece"*, i8*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca [256 x i8], align 16
  %6 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  %11 = icmp eq i64 %2, 0
  %12 = or i1 %11, %10
  br i1 %12, label %88, label %13

13:                                               ; preds = %4
  %14 = icmp eq i64 %2, 1
  br i1 %14, label %15, label %28

15:                                               ; preds = %13
  %16 = icmp ugt i64 %9, %3
  br i1 %16, label %17, label %88

17:                                               ; preds = %15
  %18 = load i8, i8* %1, align 1
  %19 = getelementptr inbounds i8, i8* %7, i64 %3
  %20 = sub i64 %9, %3
  %21 = sext i8 %18 to i32
  %22 = tail call i8* @memchr(i8* %19, i32 %21, i64 %20) #12
  %23 = icmp eq i8* %22, null
  br i1 %23, label %88, label %24

24:                                               ; preds = %17
  %25 = ptrtoint i8* %22 to i64
  %26 = ptrtoint i8* %7 to i64
  %27 = sub i64 %25, %26
  br label %88

28:                                               ; preds = %13
  %29 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %29) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %29, i8 0, i64 256, i1 false) #12
  %30 = add i64 %2, -1
  %31 = and i64 %2, 3
  %32 = icmp ult i64 %30, 3
  br i1 %32, label %60, label %33

33:                                               ; preds = %28
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %57, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %58, %35 ]
  %38 = getelementptr inbounds i8, i8* %1, i64 %36
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i64
  %41 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %40
  store i8 1, i8* %41, align 1
  %42 = or i64 %36, 1
  %43 = getelementptr inbounds i8, i8* %1, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i64
  %46 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %45
  store i8 1, i8* %46, align 1
  %47 = or i64 %36, 2
  %48 = getelementptr inbounds i8, i8* %1, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i64
  %51 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %50
  store i8 1, i8* %51, align 1
  %52 = or i64 %36, 3
  %53 = getelementptr inbounds i8, i8* %1, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i64
  %56 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %55
  store i8 1, i8* %56, align 1
  %57 = add nuw i64 %36, 4
  %58 = add i64 %37, -4
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %35

60:                                               ; preds = %35, %28
  %61 = phi i64 [ 0, %28 ], [ %57, %35 ]
  %62 = icmp eq i64 %31, 0
  br i1 %62, label %73, label %63

63:                                               ; preds = %60, %63
  %64 = phi i64 [ %70, %63 ], [ %61, %60 ]
  %65 = phi i64 [ %71, %63 ], [ %31, %60 ]
  %66 = getelementptr inbounds i8, i8* %1, i64 %64
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i64
  %69 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %68
  store i8 1, i8* %69, align 1
  %70 = add nuw i64 %64, 1
  %71 = add i64 %65, -1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %63, !llvm.loop !2

73:                                               ; preds = %63, %60
  %74 = icmp ugt i64 %9, %3
  br i1 %74, label %75, label %86

75:                                               ; preds = %73, %83
  %76 = phi i64 [ %84, %83 ], [ %3, %73 ]
  %77 = getelementptr inbounds i8, i8* %7, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i64
  %80 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %79
  %81 = load i8, i8* %80, align 1, !range !4
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %83, label %86

83:                                               ; preds = %75
  %84 = add i64 %76, 1
  %85 = icmp eq i64 %84, %9
  br i1 %85, label %86, label %75

86:                                               ; preds = %83, %75, %73
  %87 = phi i64 [ -1, %73 ], [ %76, %75 ], [ -1, %83 ]
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %29) #12
  br label %88

88:                                               ; preds = %4, %15, %17, %24, %86
  %89 = phi i64 [ %87, %86 ], [ -1, %4 ], [ -1, %15 ], [ %27, %24 ], [ -1, %17 ]
  ret i64 %89
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN4base8internal13find_first_ofENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES5_m(i8*, i64, i8*, i64, i64) local_unnamed_addr #5 {
  %6 = alloca [256 x i8], align 16
  %7 = icmp eq i64 %1, 0
  %8 = icmp eq i64 %3, 0
  %9 = or i1 %7, %8
  br i1 %9, label %85, label %10

10:                                               ; preds = %5
  %11 = icmp eq i64 %3, 1
  br i1 %11, label %12, label %25

12:                                               ; preds = %10
  %13 = icmp ugt i64 %1, %4
  br i1 %13, label %14, label %85

14:                                               ; preds = %12
  %15 = load i8, i8* %2, align 1
  %16 = getelementptr inbounds i8, i8* %0, i64 %4
  %17 = sub i64 %1, %4
  %18 = sext i8 %15 to i32
  %19 = tail call i8* @memchr(i8* %16, i32 %18, i64 %17) #12
  %20 = icmp eq i8* %19, null
  br i1 %20, label %85, label %21

21:                                               ; preds = %14
  %22 = ptrtoint i8* %19 to i64
  %23 = ptrtoint i8* %0 to i64
  %24 = sub i64 %22, %23
  br label %85

25:                                               ; preds = %10
  %26 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %26) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 0, i64 256, i1 false)
  %27 = add i64 %3, -1
  %28 = and i64 %3, 3
  %29 = icmp ult i64 %27, 3
  br i1 %29, label %57, label %30

30:                                               ; preds = %25
  %31 = sub i64 %3, %28
  br label %32

32:                                               ; preds = %32, %30
  %33 = phi i64 [ 0, %30 ], [ %54, %32 ]
  %34 = phi i64 [ %31, %30 ], [ %55, %32 ]
  %35 = getelementptr inbounds i8, i8* %2, i64 %33
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %37
  store i8 1, i8* %38, align 1
  %39 = or i64 %33, 1
  %40 = getelementptr inbounds i8, i8* %2, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i64
  %43 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %42
  store i8 1, i8* %43, align 1
  %44 = or i64 %33, 2
  %45 = getelementptr inbounds i8, i8* %2, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i64
  %48 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %47
  store i8 1, i8* %48, align 1
  %49 = or i64 %33, 3
  %50 = getelementptr inbounds i8, i8* %2, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i64
  %53 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %52
  store i8 1, i8* %53, align 1
  %54 = add nuw i64 %33, 4
  %55 = add i64 %34, -4
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %32

57:                                               ; preds = %32, %25
  %58 = phi i64 [ 0, %25 ], [ %54, %32 ]
  %59 = icmp eq i64 %28, 0
  br i1 %59, label %70, label %60

60:                                               ; preds = %57, %60
  %61 = phi i64 [ %67, %60 ], [ %58, %57 ]
  %62 = phi i64 [ %68, %60 ], [ %28, %57 ]
  %63 = getelementptr inbounds i8, i8* %2, i64 %61
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i64
  %66 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %65
  store i8 1, i8* %66, align 1
  %67 = add nuw i64 %61, 1
  %68 = add i64 %62, -1
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %70, label %60, !llvm.loop !5

70:                                               ; preds = %60, %57
  %71 = icmp ugt i64 %1, %4
  br i1 %71, label %72, label %83

72:                                               ; preds = %70, %80
  %73 = phi i64 [ %81, %80 ], [ %4, %70 ]
  %74 = getelementptr inbounds i8, i8* %0, i64 %73
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i64
  %77 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %76
  %78 = load i8, i8* %77, align 1, !range !4
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %80, label %83

80:                                               ; preds = %72
  %81 = add i64 %73, 1
  %82 = icmp eq i64 %81, %1
  br i1 %82, label %83, label %72

83:                                               ; preds = %72, %80, %70
  %84 = phi i64 [ -1, %70 ], [ -1, %80 ], [ %73, %72 ]
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %26) #12
  br label %85

85:                                               ; preds = %21, %14, %12, %5, %83
  %86 = phi i64 [ %84, %83 ], [ -1, %5 ], [ -1, %12 ], [ %24, %21 ], [ -1, %14 ]
  ret i64 %86
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE13find_first_ofEcm(%"class.base::BasicStringPiece"*, i8 signext, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, %2
  br i1 %6, label %7, label %19

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 %2
  %11 = sub i64 %5, %2
  %12 = sext i8 %1 to i32
  %13 = tail call i8* @memchr(i8* %10, i32 %12, i64 %11) #12
  %14 = icmp eq i8* %13, null
  br i1 %14, label %19, label %15

15:                                               ; preds = %7
  %16 = ptrtoint i8* %13 to i64
  %17 = ptrtoint i8* %9 to i64
  %18 = sub i64 %16, %17
  br label %19

19:                                               ; preds = %3, %7, %15
  %20 = phi i64 [ -1, %3 ], [ %18, %15 ], [ -1, %7 ]
  ret i64 %20
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE13find_first_ofEPKcmm(%"class.base::BasicStringPiece"*, i8*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca [256 x i8], align 16
  %6 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  %11 = icmp eq i64 %3, 0
  %12 = or i1 %11, %10
  br i1 %12, label %88, label %13

13:                                               ; preds = %4
  %14 = icmp eq i64 %3, 1
  br i1 %14, label %15, label %28

15:                                               ; preds = %13
  %16 = icmp ugt i64 %9, %2
  br i1 %16, label %17, label %88

17:                                               ; preds = %15
  %18 = load i8, i8* %1, align 1
  %19 = getelementptr inbounds i8, i8* %7, i64 %2
  %20 = sub i64 %9, %2
  %21 = sext i8 %18 to i32
  %22 = tail call i8* @memchr(i8* %19, i32 %21, i64 %20) #12
  %23 = icmp eq i8* %22, null
  br i1 %23, label %88, label %24

24:                                               ; preds = %17
  %25 = ptrtoint i8* %22 to i64
  %26 = ptrtoint i8* %7 to i64
  %27 = sub i64 %25, %26
  br label %88

28:                                               ; preds = %13
  %29 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %29) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %29, i8 0, i64 256, i1 false) #12
  %30 = add i64 %3, -1
  %31 = and i64 %3, 3
  %32 = icmp ult i64 %30, 3
  br i1 %32, label %60, label %33

33:                                               ; preds = %28
  %34 = sub i64 %3, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %57, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %58, %35 ]
  %38 = getelementptr inbounds i8, i8* %1, i64 %36
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i64
  %41 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %40
  store i8 1, i8* %41, align 1
  %42 = or i64 %36, 1
  %43 = getelementptr inbounds i8, i8* %1, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i64
  %46 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %45
  store i8 1, i8* %46, align 1
  %47 = or i64 %36, 2
  %48 = getelementptr inbounds i8, i8* %1, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i64
  %51 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %50
  store i8 1, i8* %51, align 1
  %52 = or i64 %36, 3
  %53 = getelementptr inbounds i8, i8* %1, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i64
  %56 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %55
  store i8 1, i8* %56, align 1
  %57 = add nuw i64 %36, 4
  %58 = add i64 %37, -4
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %35

60:                                               ; preds = %35, %28
  %61 = phi i64 [ 0, %28 ], [ %57, %35 ]
  %62 = icmp eq i64 %31, 0
  br i1 %62, label %73, label %63

63:                                               ; preds = %60, %63
  %64 = phi i64 [ %70, %63 ], [ %61, %60 ]
  %65 = phi i64 [ %71, %63 ], [ %31, %60 ]
  %66 = getelementptr inbounds i8, i8* %1, i64 %64
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i64
  %69 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %68
  store i8 1, i8* %69, align 1
  %70 = add nuw i64 %64, 1
  %71 = add i64 %65, -1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %63, !llvm.loop !6

73:                                               ; preds = %63, %60
  %74 = icmp ugt i64 %9, %2
  br i1 %74, label %75, label %86

75:                                               ; preds = %73, %83
  %76 = phi i64 [ %84, %83 ], [ %2, %73 ]
  %77 = getelementptr inbounds i8, i8* %7, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i64
  %80 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %79
  %81 = load i8, i8* %80, align 1, !range !4
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %83, label %86

83:                                               ; preds = %75
  %84 = add i64 %76, 1
  %85 = icmp eq i64 %84, %9
  br i1 %85, label %86, label %75

86:                                               ; preds = %83, %75, %73
  %87 = phi i64 [ -1, %73 ], [ -1, %83 ], [ %76, %75 ]
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %29) #12
  br label %88

88:                                               ; preds = %4, %15, %17, %24, %86
  %89 = phi i64 [ %87, %86 ], [ -1, %4 ], [ -1, %15 ], [ %27, %24 ], [ -1, %17 ]
  ret i64 %89
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE13find_first_ofEPKcm(%"class.base::BasicStringPiece"*, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca [256 x i8], align 16
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = icmp eq i8* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %1) #12
  br label %12

9:                                                ; preds = %3
  %10 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %11 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #12
  br label %12

12:                                               ; preds = %7, %9
  %13 = phi i64 [ 0, %9 ], [ %8, %7 ]
  %14 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %17, 0
  %19 = icmp eq i64 %13, 0
  %20 = or i1 %19, %18
  br i1 %20, label %96, label %21

21:                                               ; preds = %12
  %22 = icmp eq i64 %13, 1
  br i1 %22, label %23, label %36

23:                                               ; preds = %21
  %24 = icmp ugt i64 %17, %2
  br i1 %24, label %25, label %96

25:                                               ; preds = %23
  %26 = load i8, i8* %1, align 1
  %27 = getelementptr inbounds i8, i8* %15, i64 %2
  %28 = sub i64 %17, %2
  %29 = sext i8 %26 to i32
  %30 = call i8* @memchr(i8* %27, i32 %29, i64 %28) #12
  %31 = icmp eq i8* %30, null
  br i1 %31, label %96, label %32

32:                                               ; preds = %25
  %33 = ptrtoint i8* %30 to i64
  %34 = ptrtoint i8* %15 to i64
  %35 = sub i64 %33, %34
  br label %96

36:                                               ; preds = %21
  %37 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %37) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 256, i1 false) #12
  %38 = add i64 %13, -1
  %39 = and i64 %13, 3
  %40 = icmp ult i64 %38, 3
  br i1 %40, label %68, label %41

41:                                               ; preds = %36
  %42 = sub i64 %13, %39
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i64 [ 0, %41 ], [ %65, %43 ]
  %45 = phi i64 [ %42, %41 ], [ %66, %43 ]
  %46 = getelementptr inbounds i8, i8* %1, i64 %44
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i64
  %49 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %48
  store i8 1, i8* %49, align 1
  %50 = or i64 %44, 1
  %51 = getelementptr inbounds i8, i8* %1, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i64
  %54 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %53
  store i8 1, i8* %54, align 1
  %55 = or i64 %44, 2
  %56 = getelementptr inbounds i8, i8* %1, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %58
  store i8 1, i8* %59, align 1
  %60 = or i64 %44, 3
  %61 = getelementptr inbounds i8, i8* %1, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i64
  %64 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %63
  store i8 1, i8* %64, align 1
  %65 = add nuw i64 %44, 4
  %66 = add i64 %45, -4
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %43

68:                                               ; preds = %43, %36
  %69 = phi i64 [ 0, %36 ], [ %65, %43 ]
  %70 = icmp eq i64 %39, 0
  br i1 %70, label %81, label %71

71:                                               ; preds = %68, %71
  %72 = phi i64 [ %78, %71 ], [ %69, %68 ]
  %73 = phi i64 [ %79, %71 ], [ %39, %68 ]
  %74 = getelementptr inbounds i8, i8* %1, i64 %72
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i64
  %77 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %76
  store i8 1, i8* %77, align 1
  %78 = add nuw i64 %72, 1
  %79 = add i64 %73, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %71, !llvm.loop !7

81:                                               ; preds = %71, %68
  %82 = icmp ugt i64 %17, %2
  br i1 %82, label %83, label %94

83:                                               ; preds = %81, %91
  %84 = phi i64 [ %92, %91 ], [ %2, %81 ]
  %85 = getelementptr inbounds i8, i8* %15, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i64
  %88 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %87
  %89 = load i8, i8* %88, align 1, !range !4
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %91, label %94

91:                                               ; preds = %83
  %92 = add i64 %84, 1
  %93 = icmp eq i64 %92, %17
  br i1 %93, label %94, label %83

94:                                               ; preds = %91, %83, %81
  %95 = phi i64 [ -1, %81 ], [ -1, %91 ], [ %84, %83 ]
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %37) #12
  br label %96

96:                                               ; preds = %12, %23, %25, %32, %94
  %97 = phi i64 [ %95, %94 ], [ -1, %12 ], [ -1, %23 ], [ %35, %32 ], [ -1, %25 ]
  ret i64 %97
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE12find_last_ofES4_m(%"class.base::BasicStringPiece"*, i8*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca [256 x i8], align 16
  %6 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  %11 = icmp eq i64 %2, 0
  %12 = or i1 %11, %10
  br i1 %12, label %99, label %13

13:                                               ; preds = %4
  %14 = icmp eq i64 %2, 1
  br i1 %14, label %15, label %31

15:                                               ; preds = %13
  %16 = load i8, i8* %1, align 1
  %17 = add i64 %9, -1
  %18 = icmp ult i64 %17, %3
  %19 = select i1 %18, i64 %17, i64 %3
  %20 = getelementptr inbounds i8, i8* %7, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = icmp eq i8 %21, %16
  br i1 %22, label %99, label %23

23:                                               ; preds = %15, %26
  %24 = phi i64 [ %27, %26 ], [ %19, %15 ]
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %99, label %26

26:                                               ; preds = %23
  %27 = add i64 %24, -1
  %28 = getelementptr inbounds i8, i8* %7, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = icmp eq i8 %29, %16
  br i1 %30, label %99, label %23

31:                                               ; preds = %13
  %32 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %32) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %32, i8 0, i64 256, i1 false) #12
  %33 = add i64 %2, -1
  %34 = and i64 %2, 3
  %35 = icmp ult i64 %33, 3
  br i1 %35, label %63, label %36

36:                                               ; preds = %31
  %37 = sub i64 %2, %34
  br label %38

38:                                               ; preds = %38, %36
  %39 = phi i64 [ 0, %36 ], [ %60, %38 ]
  %40 = phi i64 [ %37, %36 ], [ %61, %38 ]
  %41 = getelementptr inbounds i8, i8* %1, i64 %39
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i64
  %44 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %43
  store i8 1, i8* %44, align 1
  %45 = or i64 %39, 1
  %46 = getelementptr inbounds i8, i8* %1, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i64
  %49 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %48
  store i8 1, i8* %49, align 1
  %50 = or i64 %39, 2
  %51 = getelementptr inbounds i8, i8* %1, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i64
  %54 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %53
  store i8 1, i8* %54, align 1
  %55 = or i64 %39, 3
  %56 = getelementptr inbounds i8, i8* %1, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %58
  store i8 1, i8* %59, align 1
  %60 = add nuw i64 %39, 4
  %61 = add i64 %40, -4
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %38

63:                                               ; preds = %38, %31
  %64 = phi i64 [ 0, %31 ], [ %60, %38 ]
  %65 = icmp eq i64 %34, 0
  br i1 %65, label %76, label %66

66:                                               ; preds = %63, %66
  %67 = phi i64 [ %73, %66 ], [ %64, %63 ]
  %68 = phi i64 [ %74, %66 ], [ %34, %63 ]
  %69 = getelementptr inbounds i8, i8* %1, i64 %67
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i64
  %72 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %71
  store i8 1, i8* %72, align 1
  %73 = add nuw i64 %67, 1
  %74 = add i64 %68, -1
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %66, !llvm.loop !8

76:                                               ; preds = %66, %63
  %77 = add i64 %9, -1
  %78 = icmp ult i64 %77, %3
  %79 = select i1 %78, i64 %77, i64 %3
  %80 = getelementptr inbounds i8, i8* %7, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i64
  %83 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %82
  %84 = load i8, i8* %83, align 1, !range !4
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %86, label %97

86:                                               ; preds = %76, %89
  %87 = phi i64 [ %90, %89 ], [ %79, %76 ]
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %97, label %89

89:                                               ; preds = %86
  %90 = add i64 %87, -1
  %91 = getelementptr inbounds i8, i8* %7, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i64
  %94 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %93
  %95 = load i8, i8* %94, align 1, !range !4
  %96 = icmp eq i8 %95, 0
  br i1 %96, label %86, label %97

97:                                               ; preds = %89, %86, %76
  %98 = phi i64 [ %79, %76 ], [ %90, %89 ], [ -1, %86 ]
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %32) #12
  br label %99

99:                                               ; preds = %23, %26, %4, %15, %97
  %100 = phi i64 [ %98, %97 ], [ -1, %4 ], [ %19, %15 ], [ -1, %23 ], [ %27, %26 ]
  ret i64 %100
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN4base8internal12find_last_ofENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES5_m(i8*, i64, i8*, i64, i64) local_unnamed_addr #5 {
  %6 = alloca [256 x i8], align 16
  %7 = icmp eq i64 %1, 0
  %8 = icmp eq i64 %3, 0
  %9 = or i1 %7, %8
  br i1 %9, label %96, label %10

10:                                               ; preds = %5
  %11 = icmp eq i64 %3, 1
  br i1 %11, label %12, label %28

12:                                               ; preds = %10
  %13 = load i8, i8* %2, align 1
  %14 = add i64 %1, -1
  %15 = icmp ult i64 %14, %4
  %16 = select i1 %15, i64 %14, i64 %4
  %17 = getelementptr inbounds i8, i8* %0, i64 %16
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, %13
  br i1 %19, label %96, label %20

20:                                               ; preds = %12, %23
  %21 = phi i64 [ %24, %23 ], [ %16, %12 ]
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %96, label %23

23:                                               ; preds = %20
  %24 = add i64 %21, -1
  %25 = getelementptr inbounds i8, i8* %0, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = icmp eq i8 %26, %13
  br i1 %27, label %96, label %20

28:                                               ; preds = %10
  %29 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %29) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %29, i8 0, i64 256, i1 false)
  %30 = add i64 %3, -1
  %31 = and i64 %3, 3
  %32 = icmp ult i64 %30, 3
  br i1 %32, label %60, label %33

33:                                               ; preds = %28
  %34 = sub i64 %3, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %57, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %58, %35 ]
  %38 = getelementptr inbounds i8, i8* %2, i64 %36
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i64
  %41 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %40
  store i8 1, i8* %41, align 1
  %42 = or i64 %36, 1
  %43 = getelementptr inbounds i8, i8* %2, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i64
  %46 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %45
  store i8 1, i8* %46, align 1
  %47 = or i64 %36, 2
  %48 = getelementptr inbounds i8, i8* %2, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i64
  %51 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %50
  store i8 1, i8* %51, align 1
  %52 = or i64 %36, 3
  %53 = getelementptr inbounds i8, i8* %2, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i64
  %56 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %55
  store i8 1, i8* %56, align 1
  %57 = add nuw i64 %36, 4
  %58 = add i64 %37, -4
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %35

60:                                               ; preds = %35, %28
  %61 = phi i64 [ 0, %28 ], [ %57, %35 ]
  %62 = icmp eq i64 %31, 0
  br i1 %62, label %73, label %63

63:                                               ; preds = %60, %63
  %64 = phi i64 [ %70, %63 ], [ %61, %60 ]
  %65 = phi i64 [ %71, %63 ], [ %31, %60 ]
  %66 = getelementptr inbounds i8, i8* %2, i64 %64
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i64
  %69 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %68
  store i8 1, i8* %69, align 1
  %70 = add nuw i64 %64, 1
  %71 = add i64 %65, -1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %63, !llvm.loop !9

73:                                               ; preds = %63, %60
  %74 = add i64 %1, -1
  %75 = icmp ult i64 %74, %4
  %76 = select i1 %75, i64 %74, i64 %4
  %77 = getelementptr inbounds i8, i8* %0, i64 %76
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i64
  %80 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %79
  %81 = load i8, i8* %80, align 1, !range !4
  %82 = icmp eq i8 %81, 0
  br i1 %82, label %83, label %94

83:                                               ; preds = %73, %86
  %84 = phi i64 [ %87, %86 ], [ %76, %73 ]
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %94, label %86

86:                                               ; preds = %83
  %87 = add i64 %84, -1
  %88 = getelementptr inbounds i8, i8* %0, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i64
  %91 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %90
  %92 = load i8, i8* %91, align 1, !range !4
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %83, label %94

94:                                               ; preds = %86, %83, %73
  %95 = phi i64 [ %76, %73 ], [ -1, %83 ], [ %87, %86 ]
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %29) #12
  br label %96

96:                                               ; preds = %23, %20, %12, %5, %94
  %97 = phi i64 [ %95, %94 ], [ -1, %5 ], [ %16, %12 ], [ %24, %23 ], [ -1, %20 ]
  ret i64 %97
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE12find_last_ofEcm(%"class.base::BasicStringPiece"*, i8 signext, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %24, label %7

7:                                                ; preds = %3
  %8 = add i64 %5, -1
  %9 = icmp ult i64 %8, %2
  %10 = select i1 %9, i64 %8, i64 %2
  %11 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %10
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i8 %14, %1
  br i1 %15, label %24, label %16

16:                                               ; preds = %7, %19
  %17 = phi i64 [ %20, %19 ], [ %10, %7 ]
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %16
  %20 = add i64 %17, -1
  %21 = getelementptr inbounds i8, i8* %12, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = icmp eq i8 %22, %1
  br i1 %23, label %24, label %16

24:                                               ; preds = %16, %19, %3, %7
  %25 = phi i64 [ -1, %3 ], [ %10, %7 ], [ %20, %19 ], [ -1, %16 ]
  ret i64 %25
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE12find_last_ofEPKcmm(%"class.base::BasicStringPiece"*, i8*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca [256 x i8], align 16
  %6 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  %11 = icmp eq i64 %3, 0
  %12 = or i1 %11, %10
  br i1 %12, label %99, label %13

13:                                               ; preds = %4
  %14 = icmp eq i64 %3, 1
  br i1 %14, label %15, label %31

15:                                               ; preds = %13
  %16 = load i8, i8* %1, align 1
  %17 = add i64 %9, -1
  %18 = icmp ult i64 %17, %2
  %19 = select i1 %18, i64 %17, i64 %2
  %20 = getelementptr inbounds i8, i8* %7, i64 %19
  %21 = load i8, i8* %20, align 1
  %22 = icmp eq i8 %21, %16
  br i1 %22, label %99, label %23

23:                                               ; preds = %15, %26
  %24 = phi i64 [ %27, %26 ], [ %19, %15 ]
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %99, label %26

26:                                               ; preds = %23
  %27 = add i64 %24, -1
  %28 = getelementptr inbounds i8, i8* %7, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = icmp eq i8 %29, %16
  br i1 %30, label %99, label %23

31:                                               ; preds = %13
  %32 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %32) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %32, i8 0, i64 256, i1 false) #12
  %33 = add i64 %3, -1
  %34 = and i64 %3, 3
  %35 = icmp ult i64 %33, 3
  br i1 %35, label %63, label %36

36:                                               ; preds = %31
  %37 = sub i64 %3, %34
  br label %38

38:                                               ; preds = %38, %36
  %39 = phi i64 [ 0, %36 ], [ %60, %38 ]
  %40 = phi i64 [ %37, %36 ], [ %61, %38 ]
  %41 = getelementptr inbounds i8, i8* %1, i64 %39
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i64
  %44 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %43
  store i8 1, i8* %44, align 1
  %45 = or i64 %39, 1
  %46 = getelementptr inbounds i8, i8* %1, i64 %45
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i64
  %49 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %48
  store i8 1, i8* %49, align 1
  %50 = or i64 %39, 2
  %51 = getelementptr inbounds i8, i8* %1, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i64
  %54 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %53
  store i8 1, i8* %54, align 1
  %55 = or i64 %39, 3
  %56 = getelementptr inbounds i8, i8* %1, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %58
  store i8 1, i8* %59, align 1
  %60 = add nuw i64 %39, 4
  %61 = add i64 %40, -4
  %62 = icmp eq i64 %61, 0
  br i1 %62, label %63, label %38

63:                                               ; preds = %38, %31
  %64 = phi i64 [ 0, %31 ], [ %60, %38 ]
  %65 = icmp eq i64 %34, 0
  br i1 %65, label %76, label %66

66:                                               ; preds = %63, %66
  %67 = phi i64 [ %73, %66 ], [ %64, %63 ]
  %68 = phi i64 [ %74, %66 ], [ %34, %63 ]
  %69 = getelementptr inbounds i8, i8* %1, i64 %67
  %70 = load i8, i8* %69, align 1
  %71 = zext i8 %70 to i64
  %72 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %71
  store i8 1, i8* %72, align 1
  %73 = add nuw i64 %67, 1
  %74 = add i64 %68, -1
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %66, !llvm.loop !10

76:                                               ; preds = %66, %63
  %77 = add i64 %9, -1
  %78 = icmp ult i64 %77, %2
  %79 = select i1 %78, i64 %77, i64 %2
  %80 = getelementptr inbounds i8, i8* %7, i64 %79
  %81 = load i8, i8* %80, align 1
  %82 = zext i8 %81 to i64
  %83 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %82
  %84 = load i8, i8* %83, align 1, !range !4
  %85 = icmp eq i8 %84, 0
  br i1 %85, label %86, label %97

86:                                               ; preds = %76, %89
  %87 = phi i64 [ %90, %89 ], [ %79, %76 ]
  %88 = icmp eq i64 %87, 0
  br i1 %88, label %97, label %89

89:                                               ; preds = %86
  %90 = add i64 %87, -1
  %91 = getelementptr inbounds i8, i8* %7, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = zext i8 %92 to i64
  %94 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %93
  %95 = load i8, i8* %94, align 1, !range !4
  %96 = icmp eq i8 %95, 0
  br i1 %96, label %86, label %97

97:                                               ; preds = %89, %86, %76
  %98 = phi i64 [ %79, %76 ], [ -1, %86 ], [ %90, %89 ]
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %32) #12
  br label %99

99:                                               ; preds = %23, %26, %4, %15, %97
  %100 = phi i64 [ %98, %97 ], [ -1, %4 ], [ %19, %15 ], [ %27, %26 ], [ -1, %23 ]
  ret i64 %100
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE12find_last_ofEPKcm(%"class.base::BasicStringPiece"*, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca [256 x i8], align 16
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = icmp eq i8* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %1) #12
  br label %12

9:                                                ; preds = %3
  %10 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %11 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #12
  br label %12

12:                                               ; preds = %7, %9
  %13 = phi i64 [ 0, %9 ], [ %8, %7 ]
  %14 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %17, 0
  %19 = icmp eq i64 %13, 0
  %20 = or i1 %19, %18
  br i1 %20, label %107, label %21

21:                                               ; preds = %12
  %22 = icmp eq i64 %13, 1
  br i1 %22, label %23, label %39

23:                                               ; preds = %21
  %24 = load i8, i8* %1, align 1
  %25 = add i64 %17, -1
  %26 = icmp ult i64 %25, %2
  %27 = select i1 %26, i64 %25, i64 %2
  %28 = getelementptr inbounds i8, i8* %15, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = icmp eq i8 %29, %24
  br i1 %30, label %107, label %31

31:                                               ; preds = %23, %34
  %32 = phi i64 [ %35, %34 ], [ %27, %23 ]
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %107, label %34

34:                                               ; preds = %31
  %35 = add i64 %32, -1
  %36 = getelementptr inbounds i8, i8* %15, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = icmp eq i8 %37, %24
  br i1 %38, label %107, label %31

39:                                               ; preds = %21
  %40 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %40) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %40, i8 0, i64 256, i1 false) #12
  %41 = add i64 %13, -1
  %42 = and i64 %13, 3
  %43 = icmp ult i64 %41, 3
  br i1 %43, label %71, label %44

44:                                               ; preds = %39
  %45 = sub i64 %13, %42
  br label %46

46:                                               ; preds = %46, %44
  %47 = phi i64 [ 0, %44 ], [ %68, %46 ]
  %48 = phi i64 [ %45, %44 ], [ %69, %46 ]
  %49 = getelementptr inbounds i8, i8* %1, i64 %47
  %50 = load i8, i8* %49, align 1
  %51 = zext i8 %50 to i64
  %52 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %51
  store i8 1, i8* %52, align 1
  %53 = or i64 %47, 1
  %54 = getelementptr inbounds i8, i8* %1, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = zext i8 %55 to i64
  %57 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %56
  store i8 1, i8* %57, align 1
  %58 = or i64 %47, 2
  %59 = getelementptr inbounds i8, i8* %1, i64 %58
  %60 = load i8, i8* %59, align 1
  %61 = zext i8 %60 to i64
  %62 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %61
  store i8 1, i8* %62, align 1
  %63 = or i64 %47, 3
  %64 = getelementptr inbounds i8, i8* %1, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = zext i8 %65 to i64
  %67 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %66
  store i8 1, i8* %67, align 1
  %68 = add nuw i64 %47, 4
  %69 = add i64 %48, -4
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %46

71:                                               ; preds = %46, %39
  %72 = phi i64 [ 0, %39 ], [ %68, %46 ]
  %73 = icmp eq i64 %42, 0
  br i1 %73, label %84, label %74

74:                                               ; preds = %71, %74
  %75 = phi i64 [ %81, %74 ], [ %72, %71 ]
  %76 = phi i64 [ %82, %74 ], [ %42, %71 ]
  %77 = getelementptr inbounds i8, i8* %1, i64 %75
  %78 = load i8, i8* %77, align 1
  %79 = zext i8 %78 to i64
  %80 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %79
  store i8 1, i8* %80, align 1
  %81 = add nuw i64 %75, 1
  %82 = add i64 %76, -1
  %83 = icmp eq i64 %82, 0
  br i1 %83, label %84, label %74, !llvm.loop !11

84:                                               ; preds = %74, %71
  %85 = add i64 %17, -1
  %86 = icmp ult i64 %85, %2
  %87 = select i1 %86, i64 %85, i64 %2
  %88 = getelementptr inbounds i8, i8* %15, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = zext i8 %89 to i64
  %91 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %90
  %92 = load i8, i8* %91, align 1, !range !4
  %93 = icmp eq i8 %92, 0
  br i1 %93, label %94, label %105

94:                                               ; preds = %84, %97
  %95 = phi i64 [ %98, %97 ], [ %87, %84 ]
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %105, label %97

97:                                               ; preds = %94
  %98 = add i64 %95, -1
  %99 = getelementptr inbounds i8, i8* %15, i64 %98
  %100 = load i8, i8* %99, align 1
  %101 = zext i8 %100 to i64
  %102 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %101
  %103 = load i8, i8* %102, align 1, !range !4
  %104 = icmp eq i8 %103, 0
  br i1 %104, label %94, label %105

105:                                              ; preds = %97, %94, %84
  %106 = phi i64 [ %87, %84 ], [ -1, %94 ], [ %98, %97 ]
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %40) #12
  br label %107

107:                                              ; preds = %31, %34, %12, %23, %105
  %108 = phi i64 [ %106, %105 ], [ -1, %12 ], [ %27, %23 ], [ %35, %34 ], [ -1, %31 ]
  ret i64 %108
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE17find_first_not_ofES4_m(%"class.base::BasicStringPiece"*, i8*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca [256 x i8], align 16
  %6 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp ugt i64 %9, %3
  br i1 %10, label %11, label %81

11:                                               ; preds = %4
  switch i64 %2, label %22 [
    i64 0, label %81
    i64 1, label %12
  ]

12:                                               ; preds = %11
  %13 = load i8, i8* %1, align 1
  br label %14

14:                                               ; preds = %19, %12
  %15 = phi i64 [ %3, %12 ], [ %20, %19 ]
  %16 = getelementptr inbounds i8, i8* %7, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, %13
  br i1 %18, label %19, label %81

19:                                               ; preds = %14
  %20 = add i64 %15, 1
  %21 = icmp eq i64 %20, %9
  br i1 %21, label %81, label %14

22:                                               ; preds = %11
  %23 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %23) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 256, i1 false) #12
  %24 = add i64 %2, -1
  %25 = and i64 %2, 3
  %26 = icmp ult i64 %24, 3
  br i1 %26, label %54, label %27

27:                                               ; preds = %22
  %28 = sub i64 %2, %25
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %51, %29 ]
  %31 = phi i64 [ %28, %27 ], [ %52, %29 ]
  %32 = getelementptr inbounds i8, i8* %1, i64 %30
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i64
  %35 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %34
  store i8 1, i8* %35, align 1
  %36 = or i64 %30, 1
  %37 = getelementptr inbounds i8, i8* %1, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i64
  %40 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %39
  store i8 1, i8* %40, align 1
  %41 = or i64 %30, 2
  %42 = getelementptr inbounds i8, i8* %1, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i64
  %45 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %44
  store i8 1, i8* %45, align 1
  %46 = or i64 %30, 3
  %47 = getelementptr inbounds i8, i8* %1, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i64
  %50 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %49
  store i8 1, i8* %50, align 1
  %51 = add nuw i64 %30, 4
  %52 = add i64 %31, -4
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %29

54:                                               ; preds = %29, %22
  %55 = phi i64 [ 0, %22 ], [ %51, %29 ]
  %56 = icmp eq i64 %25, 0
  br i1 %56, label %67, label %57

57:                                               ; preds = %54, %57
  %58 = phi i64 [ %64, %57 ], [ %55, %54 ]
  %59 = phi i64 [ %65, %57 ], [ %25, %54 ]
  %60 = getelementptr inbounds i8, i8* %1, i64 %58
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i64
  %63 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %62
  store i8 1, i8* %63, align 1
  %64 = add nuw i64 %58, 1
  %65 = add i64 %59, -1
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %57, !llvm.loop !12

67:                                               ; preds = %57, %54
  br label %68

68:                                               ; preds = %67, %76
  %69 = phi i64 [ %77, %76 ], [ %3, %67 ]
  %70 = getelementptr inbounds i8, i8* %7, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i64
  %73 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %72
  %74 = load i8, i8* %73, align 1, !range !4
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %79, label %76

76:                                               ; preds = %68
  %77 = add i64 %69, 1
  %78 = icmp eq i64 %77, %9
  br i1 %78, label %79, label %68

79:                                               ; preds = %76, %68
  %80 = phi i64 [ %69, %68 ], [ -1, %76 ]
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %23) #12
  br label %81

81:                                               ; preds = %14, %19, %4, %11, %79
  %82 = phi i64 [ %80, %79 ], [ -1, %4 ], [ %3, %11 ], [ %15, %14 ], [ -1, %19 ]
  ret i64 %82
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN4base8internal17find_first_not_ofENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES5_m(i8*, i64, i8*, i64, i64) local_unnamed_addr #5 {
  %6 = alloca [256 x i8], align 16
  %7 = icmp ugt i64 %1, %4
  br i1 %7, label %8, label %78

8:                                                ; preds = %5
  switch i64 %3, label %19 [
    i64 0, label %78
    i64 1, label %9
  ]

9:                                                ; preds = %8
  %10 = load i8, i8* %2, align 1
  br label %11

11:                                               ; preds = %16, %9
  %12 = phi i64 [ %4, %9 ], [ %17, %16 ]
  %13 = getelementptr inbounds i8, i8* %0, i64 %12
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i8 %14, %10
  br i1 %15, label %16, label %78

16:                                               ; preds = %11
  %17 = add i64 %12, 1
  %18 = icmp eq i64 %17, %1
  br i1 %18, label %78, label %11

19:                                               ; preds = %8
  %20 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %20) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %20, i8 0, i64 256, i1 false)
  %21 = add i64 %3, -1
  %22 = and i64 %3, 3
  %23 = icmp ult i64 %21, 3
  br i1 %23, label %51, label %24

24:                                               ; preds = %19
  %25 = sub i64 %3, %22
  br label %26

26:                                               ; preds = %26, %24
  %27 = phi i64 [ 0, %24 ], [ %48, %26 ]
  %28 = phi i64 [ %25, %24 ], [ %49, %26 ]
  %29 = getelementptr inbounds i8, i8* %2, i64 %27
  %30 = load i8, i8* %29, align 1
  %31 = zext i8 %30 to i64
  %32 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %31
  store i8 1, i8* %32, align 1
  %33 = or i64 %27, 1
  %34 = getelementptr inbounds i8, i8* %2, i64 %33
  %35 = load i8, i8* %34, align 1
  %36 = zext i8 %35 to i64
  %37 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %36
  store i8 1, i8* %37, align 1
  %38 = or i64 %27, 2
  %39 = getelementptr inbounds i8, i8* %2, i64 %38
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i64
  %42 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %41
  store i8 1, i8* %42, align 1
  %43 = or i64 %27, 3
  %44 = getelementptr inbounds i8, i8* %2, i64 %43
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i64
  %47 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %46
  store i8 1, i8* %47, align 1
  %48 = add nuw i64 %27, 4
  %49 = add i64 %28, -4
  %50 = icmp eq i64 %49, 0
  br i1 %50, label %51, label %26

51:                                               ; preds = %26, %19
  %52 = phi i64 [ 0, %19 ], [ %48, %26 ]
  %53 = icmp eq i64 %22, 0
  br i1 %53, label %64, label %54

54:                                               ; preds = %51, %54
  %55 = phi i64 [ %61, %54 ], [ %52, %51 ]
  %56 = phi i64 [ %62, %54 ], [ %22, %51 ]
  %57 = getelementptr inbounds i8, i8* %2, i64 %55
  %58 = load i8, i8* %57, align 1
  %59 = zext i8 %58 to i64
  %60 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %59
  store i8 1, i8* %60, align 1
  %61 = add nuw i64 %55, 1
  %62 = add i64 %56, -1
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %54, !llvm.loop !13

64:                                               ; preds = %54, %51
  br label %65

65:                                               ; preds = %64, %73
  %66 = phi i64 [ %74, %73 ], [ %4, %64 ]
  %67 = getelementptr inbounds i8, i8* %0, i64 %66
  %68 = load i8, i8* %67, align 1
  %69 = zext i8 %68 to i64
  %70 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %69
  %71 = load i8, i8* %70, align 1, !range !4
  %72 = icmp eq i8 %71, 0
  br i1 %72, label %76, label %73

73:                                               ; preds = %65
  %74 = add i64 %66, 1
  %75 = icmp eq i64 %74, %1
  br i1 %75, label %76, label %65

76:                                               ; preds = %65, %73
  %77 = phi i64 [ %66, %65 ], [ -1, %73 ]
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %20) #12
  br label %78

78:                                               ; preds = %16, %11, %8, %5, %76
  %79 = phi i64 [ %77, %76 ], [ -1, %5 ], [ %4, %8 ], [ -1, %16 ], [ %12, %11 ]
  ret i64 %79
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE17find_first_not_ofEcm(%"class.base::BasicStringPiece"*, i8 signext, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, %2
  br i1 %6, label %7, label %18

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %9 = load i8*, i8** %8, align 8
  br label %10

10:                                               ; preds = %15, %7
  %11 = phi i64 [ %2, %7 ], [ %16, %15 ]
  %12 = getelementptr inbounds i8, i8* %9, i64 %11
  %13 = load i8, i8* %12, align 1
  %14 = icmp eq i8 %13, %1
  br i1 %14, label %15, label %18

15:                                               ; preds = %10
  %16 = add i64 %11, 1
  %17 = icmp eq i64 %16, %5
  br i1 %17, label %18, label %10

18:                                               ; preds = %10, %15, %3
  %19 = phi i64 [ -1, %3 ], [ %11, %10 ], [ -1, %15 ]
  ret i64 %19
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE17find_first_not_ofEPKcmm(%"class.base::BasicStringPiece"*, i8*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca [256 x i8], align 16
  %6 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp ugt i64 %9, %2
  br i1 %10, label %11, label %81

11:                                               ; preds = %4
  switch i64 %3, label %22 [
    i64 0, label %81
    i64 1, label %12
  ]

12:                                               ; preds = %11
  %13 = load i8, i8* %1, align 1
  br label %14

14:                                               ; preds = %19, %12
  %15 = phi i64 [ %2, %12 ], [ %20, %19 ]
  %16 = getelementptr inbounds i8, i8* %7, i64 %15
  %17 = load i8, i8* %16, align 1
  %18 = icmp eq i8 %17, %13
  br i1 %18, label %19, label %81

19:                                               ; preds = %14
  %20 = add i64 %15, 1
  %21 = icmp eq i64 %20, %9
  br i1 %21, label %81, label %14

22:                                               ; preds = %11
  %23 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %23) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %23, i8 0, i64 256, i1 false) #12
  %24 = add i64 %3, -1
  %25 = and i64 %3, 3
  %26 = icmp ult i64 %24, 3
  br i1 %26, label %54, label %27

27:                                               ; preds = %22
  %28 = sub i64 %3, %25
  br label %29

29:                                               ; preds = %29, %27
  %30 = phi i64 [ 0, %27 ], [ %51, %29 ]
  %31 = phi i64 [ %28, %27 ], [ %52, %29 ]
  %32 = getelementptr inbounds i8, i8* %1, i64 %30
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i64
  %35 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %34
  store i8 1, i8* %35, align 1
  %36 = or i64 %30, 1
  %37 = getelementptr inbounds i8, i8* %1, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = zext i8 %38 to i64
  %40 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %39
  store i8 1, i8* %40, align 1
  %41 = or i64 %30, 2
  %42 = getelementptr inbounds i8, i8* %1, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i64
  %45 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %44
  store i8 1, i8* %45, align 1
  %46 = or i64 %30, 3
  %47 = getelementptr inbounds i8, i8* %1, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = zext i8 %48 to i64
  %50 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %49
  store i8 1, i8* %50, align 1
  %51 = add nuw i64 %30, 4
  %52 = add i64 %31, -4
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %29

54:                                               ; preds = %29, %22
  %55 = phi i64 [ 0, %22 ], [ %51, %29 ]
  %56 = icmp eq i64 %25, 0
  br i1 %56, label %67, label %57

57:                                               ; preds = %54, %57
  %58 = phi i64 [ %64, %57 ], [ %55, %54 ]
  %59 = phi i64 [ %65, %57 ], [ %25, %54 ]
  %60 = getelementptr inbounds i8, i8* %1, i64 %58
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i64
  %63 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %62
  store i8 1, i8* %63, align 1
  %64 = add nuw i64 %58, 1
  %65 = add i64 %59, -1
  %66 = icmp eq i64 %65, 0
  br i1 %66, label %67, label %57, !llvm.loop !14

67:                                               ; preds = %57, %54
  br label %68

68:                                               ; preds = %67, %76
  %69 = phi i64 [ %77, %76 ], [ %2, %67 ]
  %70 = getelementptr inbounds i8, i8* %7, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i64
  %73 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %72
  %74 = load i8, i8* %73, align 1, !range !4
  %75 = icmp eq i8 %74, 0
  br i1 %75, label %79, label %76

76:                                               ; preds = %68
  %77 = add i64 %69, 1
  %78 = icmp eq i64 %77, %9
  br i1 %78, label %79, label %68

79:                                               ; preds = %76, %68
  %80 = phi i64 [ %69, %68 ], [ -1, %76 ]
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %23) #12
  br label %81

81:                                               ; preds = %14, %19, %4, %11, %79
  %82 = phi i64 [ %80, %79 ], [ -1, %4 ], [ %2, %11 ], [ -1, %19 ], [ %15, %14 ]
  ret i64 %82
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE17find_first_not_ofEPKcm(%"class.base::BasicStringPiece"*, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca [256 x i8], align 16
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = icmp eq i8* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %1) #12
  br label %12

9:                                                ; preds = %3
  %10 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %11 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #12
  br label %12

12:                                               ; preds = %7, %9
  %13 = phi i64 [ 0, %9 ], [ %8, %7 ]
  %14 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = icmp ugt i64 %17, %2
  br i1 %18, label %19, label %89

19:                                               ; preds = %12
  switch i64 %13, label %30 [
    i64 0, label %89
    i64 1, label %20
  ]

20:                                               ; preds = %19
  %21 = load i8, i8* %1, align 1
  br label %22

22:                                               ; preds = %27, %20
  %23 = phi i64 [ %2, %20 ], [ %28, %27 ]
  %24 = getelementptr inbounds i8, i8* %15, i64 %23
  %25 = load i8, i8* %24, align 1
  %26 = icmp eq i8 %25, %21
  br i1 %26, label %27, label %89

27:                                               ; preds = %22
  %28 = add i64 %23, 1
  %29 = icmp eq i64 %28, %17
  br i1 %29, label %89, label %22

30:                                               ; preds = %19
  %31 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %31) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %31, i8 0, i64 256, i1 false) #12
  %32 = add i64 %13, -1
  %33 = and i64 %13, 3
  %34 = icmp ult i64 %32, 3
  br i1 %34, label %62, label %35

35:                                               ; preds = %30
  %36 = sub i64 %13, %33
  br label %37

37:                                               ; preds = %37, %35
  %38 = phi i64 [ 0, %35 ], [ %59, %37 ]
  %39 = phi i64 [ %36, %35 ], [ %60, %37 ]
  %40 = getelementptr inbounds i8, i8* %1, i64 %38
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i64
  %43 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %42
  store i8 1, i8* %43, align 1
  %44 = or i64 %38, 1
  %45 = getelementptr inbounds i8, i8* %1, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i64
  %48 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %47
  store i8 1, i8* %48, align 1
  %49 = or i64 %38, 2
  %50 = getelementptr inbounds i8, i8* %1, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i64
  %53 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %52
  store i8 1, i8* %53, align 1
  %54 = or i64 %38, 3
  %55 = getelementptr inbounds i8, i8* %1, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = zext i8 %56 to i64
  %58 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %57
  store i8 1, i8* %58, align 1
  %59 = add nuw i64 %38, 4
  %60 = add i64 %39, -4
  %61 = icmp eq i64 %60, 0
  br i1 %61, label %62, label %37

62:                                               ; preds = %37, %30
  %63 = phi i64 [ 0, %30 ], [ %59, %37 ]
  %64 = icmp eq i64 %33, 0
  br i1 %64, label %75, label %65

65:                                               ; preds = %62, %65
  %66 = phi i64 [ %72, %65 ], [ %63, %62 ]
  %67 = phi i64 [ %73, %65 ], [ %33, %62 ]
  %68 = getelementptr inbounds i8, i8* %1, i64 %66
  %69 = load i8, i8* %68, align 1
  %70 = zext i8 %69 to i64
  %71 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %70
  store i8 1, i8* %71, align 1
  %72 = add nuw i64 %66, 1
  %73 = add i64 %67, -1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %75, label %65, !llvm.loop !15

75:                                               ; preds = %65, %62
  br label %76

76:                                               ; preds = %75, %84
  %77 = phi i64 [ %85, %84 ], [ %2, %75 ]
  %78 = getelementptr inbounds i8, i8* %15, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i64
  %81 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %80
  %82 = load i8, i8* %81, align 1, !range !4
  %83 = icmp eq i8 %82, 0
  br i1 %83, label %87, label %84

84:                                               ; preds = %76
  %85 = add i64 %77, 1
  %86 = icmp eq i64 %85, %17
  br i1 %86, label %87, label %76

87:                                               ; preds = %84, %76
  %88 = phi i64 [ %77, %76 ], [ -1, %84 ]
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %31) #12
  br label %89

89:                                               ; preds = %22, %27, %12, %19, %87
  %90 = phi i64 [ %88, %87 ], [ -1, %12 ], [ %2, %19 ], [ -1, %27 ], [ %23, %22 ]
  ret i64 %90
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE16find_last_not_ofES4_m(%"class.base::BasicStringPiece"*, i8*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca [256 x i8], align 16
  %6 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %93, label %11

11:                                               ; preds = %4
  %12 = add i64 %9, -1
  %13 = icmp ult i64 %12, %3
  %14 = select i1 %13, i64 %12, i64 %3
  switch i64 %2, label %28 [
    i64 0, label %93
    i64 1, label %15
  ]

15:                                               ; preds = %11
  %16 = load i8, i8* %1, align 1
  %17 = getelementptr inbounds i8, i8* %7, i64 %14
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, %16
  br i1 %19, label %20, label %93

20:                                               ; preds = %15, %23
  %21 = phi i64 [ %24, %23 ], [ %14, %15 ]
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %93, label %23

23:                                               ; preds = %20
  %24 = add i64 %21, -1
  %25 = getelementptr inbounds i8, i8* %7, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = icmp eq i8 %26, %16
  br i1 %27, label %20, label %93

28:                                               ; preds = %11
  %29 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %29) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %29, i8 0, i64 256, i1 false) #12
  %30 = add i64 %2, -1
  %31 = and i64 %2, 3
  %32 = icmp ult i64 %30, 3
  br i1 %32, label %60, label %33

33:                                               ; preds = %28
  %34 = sub i64 %2, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %57, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %58, %35 ]
  %38 = getelementptr inbounds i8, i8* %1, i64 %36
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i64
  %41 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %40
  store i8 1, i8* %41, align 1
  %42 = or i64 %36, 1
  %43 = getelementptr inbounds i8, i8* %1, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i64
  %46 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %45
  store i8 1, i8* %46, align 1
  %47 = or i64 %36, 2
  %48 = getelementptr inbounds i8, i8* %1, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i64
  %51 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %50
  store i8 1, i8* %51, align 1
  %52 = or i64 %36, 3
  %53 = getelementptr inbounds i8, i8* %1, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i64
  %56 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %55
  store i8 1, i8* %56, align 1
  %57 = add nuw i64 %36, 4
  %58 = add i64 %37, -4
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %35

60:                                               ; preds = %35, %28
  %61 = phi i64 [ 0, %28 ], [ %57, %35 ]
  %62 = icmp eq i64 %31, 0
  br i1 %62, label %73, label %63

63:                                               ; preds = %60, %63
  %64 = phi i64 [ %70, %63 ], [ %61, %60 ]
  %65 = phi i64 [ %71, %63 ], [ %31, %60 ]
  %66 = getelementptr inbounds i8, i8* %1, i64 %64
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i64
  %69 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %68
  store i8 1, i8* %69, align 1
  %70 = add nuw i64 %64, 1
  %71 = add i64 %65, -1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %63, !llvm.loop !16

73:                                               ; preds = %63, %60
  %74 = getelementptr inbounds i8, i8* %7, i64 %14
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i64
  %77 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %76
  %78 = load i8, i8* %77, align 1, !range !4
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %91, label %80

80:                                               ; preds = %73, %83
  %81 = phi i64 [ %84, %83 ], [ %14, %73 ]
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %91, label %83

83:                                               ; preds = %80
  %84 = add i64 %81, -1
  %85 = getelementptr inbounds i8, i8* %7, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i64
  %88 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %87
  %89 = load i8, i8* %88, align 1, !range !4
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %91, label %80

91:                                               ; preds = %83, %80, %73
  %92 = phi i64 [ %14, %73 ], [ %84, %83 ], [ -1, %80 ]
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %29) #12
  br label %93

93:                                               ; preds = %20, %23, %4, %11, %15, %91
  %94 = phi i64 [ -1, %4 ], [ %92, %91 ], [ %14, %11 ], [ %14, %15 ], [ -1, %20 ], [ %24, %23 ]
  ret i64 %94
}

; Function Attrs: nounwind readonly ssp uwtable
define hidden i64 @_ZN4base8internal16find_last_not_ofENS_16BasicStringPieceIcNSt3__111char_traitsIcEEEES5_m(i8*, i64, i8*, i64, i64) local_unnamed_addr #5 {
  %6 = alloca [256 x i8], align 16
  %7 = icmp eq i64 %1, 0
  br i1 %7, label %90, label %8

8:                                                ; preds = %5
  %9 = add i64 %1, -1
  %10 = icmp ult i64 %9, %4
  %11 = select i1 %10, i64 %9, i64 %4
  switch i64 %3, label %25 [
    i64 0, label %90
    i64 1, label %12
  ]

12:                                               ; preds = %8
  %13 = load i8, i8* %2, align 1
  %14 = getelementptr inbounds i8, i8* %0, i64 %11
  %15 = load i8, i8* %14, align 1
  %16 = icmp eq i8 %15, %13
  br i1 %16, label %17, label %90

17:                                               ; preds = %12, %20
  %18 = phi i64 [ %21, %20 ], [ %11, %12 ]
  %19 = icmp eq i64 %18, 0
  br i1 %19, label %90, label %20

20:                                               ; preds = %17
  %21 = add i64 %18, -1
  %22 = getelementptr inbounds i8, i8* %0, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = icmp eq i8 %23, %13
  br i1 %24, label %17, label %90

25:                                               ; preds = %8
  %26 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %26) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %26, i8 0, i64 256, i1 false)
  %27 = add i64 %3, -1
  %28 = and i64 %3, 3
  %29 = icmp ult i64 %27, 3
  br i1 %29, label %57, label %30

30:                                               ; preds = %25
  %31 = sub i64 %3, %28
  br label %32

32:                                               ; preds = %32, %30
  %33 = phi i64 [ 0, %30 ], [ %54, %32 ]
  %34 = phi i64 [ %31, %30 ], [ %55, %32 ]
  %35 = getelementptr inbounds i8, i8* %2, i64 %33
  %36 = load i8, i8* %35, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %37
  store i8 1, i8* %38, align 1
  %39 = or i64 %33, 1
  %40 = getelementptr inbounds i8, i8* %2, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = zext i8 %41 to i64
  %43 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %42
  store i8 1, i8* %43, align 1
  %44 = or i64 %33, 2
  %45 = getelementptr inbounds i8, i8* %2, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i64
  %48 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %47
  store i8 1, i8* %48, align 1
  %49 = or i64 %33, 3
  %50 = getelementptr inbounds i8, i8* %2, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = zext i8 %51 to i64
  %53 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %52
  store i8 1, i8* %53, align 1
  %54 = add nuw i64 %33, 4
  %55 = add i64 %34, -4
  %56 = icmp eq i64 %55, 0
  br i1 %56, label %57, label %32

57:                                               ; preds = %32, %25
  %58 = phi i64 [ 0, %25 ], [ %54, %32 ]
  %59 = icmp eq i64 %28, 0
  br i1 %59, label %70, label %60

60:                                               ; preds = %57, %60
  %61 = phi i64 [ %67, %60 ], [ %58, %57 ]
  %62 = phi i64 [ %68, %60 ], [ %28, %57 ]
  %63 = getelementptr inbounds i8, i8* %2, i64 %61
  %64 = load i8, i8* %63, align 1
  %65 = zext i8 %64 to i64
  %66 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %65
  store i8 1, i8* %66, align 1
  %67 = add nuw i64 %61, 1
  %68 = add i64 %62, -1
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %70, label %60, !llvm.loop !17

70:                                               ; preds = %60, %57
  %71 = getelementptr inbounds i8, i8* %0, i64 %11
  %72 = load i8, i8* %71, align 1
  %73 = zext i8 %72 to i64
  %74 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %73
  %75 = load i8, i8* %74, align 1, !range !4
  %76 = icmp eq i8 %75, 0
  br i1 %76, label %88, label %77

77:                                               ; preds = %70, %80
  %78 = phi i64 [ %81, %80 ], [ %11, %70 ]
  %79 = icmp eq i64 %78, 0
  br i1 %79, label %88, label %80

80:                                               ; preds = %77
  %81 = add i64 %78, -1
  %82 = getelementptr inbounds i8, i8* %0, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i64
  %85 = getelementptr inbounds [256 x i8], [256 x i8]* %6, i64 0, i64 %84
  %86 = load i8, i8* %85, align 1, !range !4
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %88, label %77

88:                                               ; preds = %80, %77, %70
  %89 = phi i64 [ %11, %70 ], [ -1, %77 ], [ %81, %80 ]
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %26) #12
  br label %90

90:                                               ; preds = %20, %17, %8, %12, %88, %5
  %91 = phi i64 [ -1, %5 ], [ %89, %88 ], [ %11, %8 ], [ %11, %12 ], [ %21, %20 ], [ -1, %17 ]
  ret i64 %91
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE16find_last_not_ofEcm(%"class.base::BasicStringPiece"*, i8 signext, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %24, label %7

7:                                                ; preds = %3
  %8 = add i64 %5, -1
  %9 = icmp ult i64 %8, %2
  %10 = select i1 %9, i64 %8, i64 %2
  %11 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %12 = load i8*, i8** %11, align 8
  %13 = getelementptr inbounds i8, i8* %12, i64 %10
  %14 = load i8, i8* %13, align 1
  %15 = icmp eq i8 %14, %1
  br i1 %15, label %16, label %24

16:                                               ; preds = %7, %19
  %17 = phi i64 [ %20, %19 ], [ %10, %7 ]
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %16
  %20 = add i64 %17, -1
  %21 = getelementptr inbounds i8, i8* %12, i64 %20
  %22 = load i8, i8* %21, align 1
  %23 = icmp eq i8 %22, %1
  br i1 %23, label %16, label %24

24:                                               ; preds = %16, %19, %7, %3
  %25 = phi i64 [ -1, %3 ], [ %10, %7 ], [ -1, %16 ], [ %20, %19 ]
  ret i64 %25
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE16find_last_not_ofEPKcmm(%"class.base::BasicStringPiece"*, i8*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca [256 x i8], align 16
  %6 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %93, label %11

11:                                               ; preds = %4
  %12 = add i64 %9, -1
  %13 = icmp ult i64 %12, %2
  %14 = select i1 %13, i64 %12, i64 %2
  switch i64 %3, label %28 [
    i64 0, label %93
    i64 1, label %15
  ]

15:                                               ; preds = %11
  %16 = load i8, i8* %1, align 1
  %17 = getelementptr inbounds i8, i8* %7, i64 %14
  %18 = load i8, i8* %17, align 1
  %19 = icmp eq i8 %18, %16
  br i1 %19, label %20, label %93

20:                                               ; preds = %15, %23
  %21 = phi i64 [ %24, %23 ], [ %14, %15 ]
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %93, label %23

23:                                               ; preds = %20
  %24 = add i64 %21, -1
  %25 = getelementptr inbounds i8, i8* %7, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = icmp eq i8 %26, %16
  br i1 %27, label %20, label %93

28:                                               ; preds = %11
  %29 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %29) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %29, i8 0, i64 256, i1 false) #12
  %30 = add i64 %3, -1
  %31 = and i64 %3, 3
  %32 = icmp ult i64 %30, 3
  br i1 %32, label %60, label %33

33:                                               ; preds = %28
  %34 = sub i64 %3, %31
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ 0, %33 ], [ %57, %35 ]
  %37 = phi i64 [ %34, %33 ], [ %58, %35 ]
  %38 = getelementptr inbounds i8, i8* %1, i64 %36
  %39 = load i8, i8* %38, align 1
  %40 = zext i8 %39 to i64
  %41 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %40
  store i8 1, i8* %41, align 1
  %42 = or i64 %36, 1
  %43 = getelementptr inbounds i8, i8* %1, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i64
  %46 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %45
  store i8 1, i8* %46, align 1
  %47 = or i64 %36, 2
  %48 = getelementptr inbounds i8, i8* %1, i64 %47
  %49 = load i8, i8* %48, align 1
  %50 = zext i8 %49 to i64
  %51 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %50
  store i8 1, i8* %51, align 1
  %52 = or i64 %36, 3
  %53 = getelementptr inbounds i8, i8* %1, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = zext i8 %54 to i64
  %56 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %55
  store i8 1, i8* %56, align 1
  %57 = add nuw i64 %36, 4
  %58 = add i64 %37, -4
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %35

60:                                               ; preds = %35, %28
  %61 = phi i64 [ 0, %28 ], [ %57, %35 ]
  %62 = icmp eq i64 %31, 0
  br i1 %62, label %73, label %63

63:                                               ; preds = %60, %63
  %64 = phi i64 [ %70, %63 ], [ %61, %60 ]
  %65 = phi i64 [ %71, %63 ], [ %31, %60 ]
  %66 = getelementptr inbounds i8, i8* %1, i64 %64
  %67 = load i8, i8* %66, align 1
  %68 = zext i8 %67 to i64
  %69 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %68
  store i8 1, i8* %69, align 1
  %70 = add nuw i64 %64, 1
  %71 = add i64 %65, -1
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %63, !llvm.loop !18

73:                                               ; preds = %63, %60
  %74 = getelementptr inbounds i8, i8* %7, i64 %14
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i64
  %77 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %76
  %78 = load i8, i8* %77, align 1, !range !4
  %79 = icmp eq i8 %78, 0
  br i1 %79, label %91, label %80

80:                                               ; preds = %73, %83
  %81 = phi i64 [ %84, %83 ], [ %14, %73 ]
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %91, label %83

83:                                               ; preds = %80
  %84 = add i64 %81, -1
  %85 = getelementptr inbounds i8, i8* %7, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i64
  %88 = getelementptr inbounds [256 x i8], [256 x i8]* %5, i64 0, i64 %87
  %89 = load i8, i8* %88, align 1, !range !4
  %90 = icmp eq i8 %89, 0
  br i1 %90, label %91, label %80

91:                                               ; preds = %83, %80, %73
  %92 = phi i64 [ %14, %73 ], [ -1, %80 ], [ %84, %83 ]
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %29) #12
  br label %93

93:                                               ; preds = %20, %23, %4, %11, %15, %91
  %94 = phi i64 [ -1, %4 ], [ %92, %91 ], [ %14, %11 ], [ %14, %15 ], [ %24, %23 ], [ -1, %20 ]
  ret i64 %94
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIcNSt3__111char_traitsIcEEE16find_last_not_ofEPKcm(%"class.base::BasicStringPiece"*, i8*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca [256 x i8], align 16
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = icmp eq i8* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @strlen(i8* nonnull %1) #12
  br label %12

9:                                                ; preds = %3
  %10 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %11 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #12
  br label %12

12:                                               ; preds = %7, %9
  %13 = phi i64 [ 0, %9 ], [ %8, %7 ]
  %14 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 0
  %15 = load i8*, i8** %14, align 8
  %16 = getelementptr inbounds %"class.base::BasicStringPiece", %"class.base::BasicStringPiece"* %0, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %101, label %19

19:                                               ; preds = %12
  %20 = add i64 %17, -1
  %21 = icmp ult i64 %20, %2
  %22 = select i1 %21, i64 %20, i64 %2
  switch i64 %13, label %36 [
    i64 0, label %101
    i64 1, label %23
  ]

23:                                               ; preds = %19
  %24 = load i8, i8* %1, align 1
  %25 = getelementptr inbounds i8, i8* %15, i64 %22
  %26 = load i8, i8* %25, align 1
  %27 = icmp eq i8 %26, %24
  br i1 %27, label %28, label %101

28:                                               ; preds = %23, %31
  %29 = phi i64 [ %32, %31 ], [ %22, %23 ]
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %101, label %31

31:                                               ; preds = %28
  %32 = add i64 %29, -1
  %33 = getelementptr inbounds i8, i8* %15, i64 %32
  %34 = load i8, i8* %33, align 1
  %35 = icmp eq i8 %34, %24
  br i1 %35, label %28, label %101

36:                                               ; preds = %19
  %37 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 0
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %37) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %37, i8 0, i64 256, i1 false) #12
  %38 = add i64 %13, -1
  %39 = and i64 %13, 3
  %40 = icmp ult i64 %38, 3
  br i1 %40, label %68, label %41

41:                                               ; preds = %36
  %42 = sub i64 %13, %39
  br label %43

43:                                               ; preds = %43, %41
  %44 = phi i64 [ 0, %41 ], [ %65, %43 ]
  %45 = phi i64 [ %42, %41 ], [ %66, %43 ]
  %46 = getelementptr inbounds i8, i8* %1, i64 %44
  %47 = load i8, i8* %46, align 1
  %48 = zext i8 %47 to i64
  %49 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %48
  store i8 1, i8* %49, align 1
  %50 = or i64 %44, 1
  %51 = getelementptr inbounds i8, i8* %1, i64 %50
  %52 = load i8, i8* %51, align 1
  %53 = zext i8 %52 to i64
  %54 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %53
  store i8 1, i8* %54, align 1
  %55 = or i64 %44, 2
  %56 = getelementptr inbounds i8, i8* %1, i64 %55
  %57 = load i8, i8* %56, align 1
  %58 = zext i8 %57 to i64
  %59 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %58
  store i8 1, i8* %59, align 1
  %60 = or i64 %44, 3
  %61 = getelementptr inbounds i8, i8* %1, i64 %60
  %62 = load i8, i8* %61, align 1
  %63 = zext i8 %62 to i64
  %64 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %63
  store i8 1, i8* %64, align 1
  %65 = add nuw i64 %44, 4
  %66 = add i64 %45, -4
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %43

68:                                               ; preds = %43, %36
  %69 = phi i64 [ 0, %36 ], [ %65, %43 ]
  %70 = icmp eq i64 %39, 0
  br i1 %70, label %81, label %71

71:                                               ; preds = %68, %71
  %72 = phi i64 [ %78, %71 ], [ %69, %68 ]
  %73 = phi i64 [ %79, %71 ], [ %39, %68 ]
  %74 = getelementptr inbounds i8, i8* %1, i64 %72
  %75 = load i8, i8* %74, align 1
  %76 = zext i8 %75 to i64
  %77 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %76
  store i8 1, i8* %77, align 1
  %78 = add nuw i64 %72, 1
  %79 = add i64 %73, -1
  %80 = icmp eq i64 %79, 0
  br i1 %80, label %81, label %71, !llvm.loop !19

81:                                               ; preds = %71, %68
  %82 = getelementptr inbounds i8, i8* %15, i64 %22
  %83 = load i8, i8* %82, align 1
  %84 = zext i8 %83 to i64
  %85 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %84
  %86 = load i8, i8* %85, align 1, !range !4
  %87 = icmp eq i8 %86, 0
  br i1 %87, label %99, label %88

88:                                               ; preds = %81, %91
  %89 = phi i64 [ %92, %91 ], [ %22, %81 ]
  %90 = icmp eq i64 %89, 0
  br i1 %90, label %99, label %91

91:                                               ; preds = %88
  %92 = add i64 %89, -1
  %93 = getelementptr inbounds i8, i8* %15, i64 %92
  %94 = load i8, i8* %93, align 1
  %95 = zext i8 %94 to i64
  %96 = getelementptr inbounds [256 x i8], [256 x i8]* %4, i64 0, i64 %95
  %97 = load i8, i8* %96, align 1, !range !4
  %98 = icmp eq i8 %97, 0
  br i1 %98, label %99, label %88

99:                                               ; preds = %91, %88, %81
  %100 = phi i64 [ %22, %81 ], [ -1, %88 ], [ %92, %91 ]
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %37) #12
  br label %101

101:                                              ; preds = %28, %31, %12, %19, %23, %99
  %102 = phi i64 [ -1, %12 ], [ %100, %99 ], [ %22, %19 ], [ %22, %23 ], [ %32, %31 ], [ -1, %28 ]
  ret i64 %102
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEC2Ev(%"class.base::BasicStringPiece.1"*) unnamed_addr #0 comdat($_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEC5Ev) align 2 {
  %2 = bitcast %"class.base::BasicStringPiece.1"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEC2EPKDsm(%"class.base::BasicStringPiece.1"*, i16*, i64) unnamed_addr #0 comdat($_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEC5EPKDsm) align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  store i16* %1, i16** %4, align 8
  %5 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  store i64 %2, i64* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEC2EPKDs(%"class.base::BasicStringPiece.1"*, i16*) unnamed_addr #0 comdat($_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEC5EPKDs) align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  store i16* %1, i16** %4, align 8
  %5 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %6 = icmp eq i16* %1, null
  br i1 %6, label %19, label %7

7:                                                ; preds = %2
  %8 = load i16, i16* %1, align 2
  %9 = icmp eq i16 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %7
  store i64 0, i64* %5, align 8
  br label %22

11:                                               ; preds = %7, %11
  %12 = phi i64 [ %14, %11 ], [ 0, %7 ]
  %13 = phi i16* [ %15, %11 ], [ %1, %7 ]
  %14 = add i64 %12, 1
  %15 = getelementptr inbounds i16, i16* %13, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %18, label %11

18:                                               ; preds = %11
  store i64 %14, i64* %5, align 8
  br label %22

19:                                               ; preds = %2
  store i64 0, i64* %5, align 8
  %20 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #12
  br label %22

22:                                               ; preds = %18, %10, %19
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEC2ERKNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEE(%"class.base::BasicStringPiece.1"*, %"class.std::__1::basic_string.2"* dereferenceable(24)) unnamed_addr #0 comdat($_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEC5ERKNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEE) align 2 {
  %3 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %4 = bitcast %"class.std::__1::basic_string.2"* %1 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %4, i64 0, i32 1, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  %8 = getelementptr inbounds %"class.std::__1::basic_string.2", %"class.std::__1::basic_string.2"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i16*, i16** %8, align 8
  %10 = bitcast %"class.std::__1::basic_string.2"* %1 to i16*
  %11 = select i1 %7, i16* %9, i16* %10
  store i16* %11, i16** %3, align 8
  %12 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %13 = load i8, i8* %5, align 1
  %14 = icmp slt i8 %13, 0
  %15 = getelementptr inbounds %"class.std::__1::basic_string.2", %"class.std::__1::basic_string.2"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = zext i8 %13 to i64
  %18 = select i1 %14, i64 %16, i64 %17
  store i64 %18, i64* %12, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEcvNS1_12basic_stringIDsS3_NS1_9allocatorIDsEEEEEv(%"class.std::__1::basic_string.2"* noalias sret, %"class.base::BasicStringPiece.1"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %1, i64 0, i32 0
  %4 = load i16*, i16** %3, align 8
  %5 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %1, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, 9223372036854775791
  br i1 %7, label %8, label %10

8:                                                ; preds = %2
  %9 = bitcast %"class.std::__1::basic_string.2"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %9) #13
  unreachable

10:                                               ; preds = %2
  %11 = icmp ult i64 %6, 11
  br i1 %11, label %25, label %12

12:                                               ; preds = %10
  %13 = add nuw nsw i64 %6, 8
  %14 = and i64 %13, -8
  %15 = icmp slt i64 %14, 0
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #13
  unreachable

17:                                               ; preds = %12
  %18 = shl i64 %14, 1
  %19 = tail call i8* @_Znwm(i64 %18) #14
  %20 = bitcast i8* %19 to i16*
  %21 = bitcast %"class.std::__1::basic_string.2"* %0 to i8**
  store i8* %19, i8** %21, align 8
  %22 = or i64 %14, -9223372036854775808
  %23 = getelementptr inbounds %"class.std::__1::basic_string.2", %"class.std::__1::basic_string.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %22, i64* %23, align 8
  %24 = getelementptr inbounds %"class.std::__1::basic_string.2", %"class.std::__1::basic_string.2"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %6, i64* %24, align 8
  br label %31

25:                                               ; preds = %10
  %26 = trunc i64 %6 to i8
  %27 = bitcast %"class.std::__1::basic_string.2"* %0 to %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"*
  %28 = getelementptr inbounds %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short", %"struct.std::__1::basic_string<char16_t, std::__1::char_traits<char16_t>, std::__1::allocator<char16_t> >::__short"* %27, i64 0, i32 1, i32 1
  store i8 %26, i8* %28, align 1
  %29 = bitcast %"class.std::__1::basic_string.2"* %0 to i16*
  %30 = icmp eq i64 %6, 0
  br i1 %30, label %175, label %31

31:                                               ; preds = %25, %17
  %32 = phi i16* [ %20, %17 ], [ %29, %25 ]
  %33 = icmp ult i64 %6, 16
  br i1 %33, label %122, label %34

34:                                               ; preds = %31
  %35 = getelementptr i16, i16* %32, i64 %6
  %36 = getelementptr i16, i16* %4, i64 %6
  %37 = icmp ult i16* %32, %36
  %38 = icmp ult i16* %4, %35
  %39 = and i1 %37, %38
  br i1 %39, label %122, label %40

40:                                               ; preds = %34
  %41 = and i64 %6, -16
  %42 = sub i64 %6, %41
  %43 = getelementptr i16, i16* %4, i64 %41
  %44 = getelementptr i16, i16* %32, i64 %41
  %45 = add i64 %41, -16
  %46 = lshr exact i64 %45, 4
  %47 = add nuw nsw i64 %46, 1
  %48 = and i64 %47, 3
  %49 = icmp ult i64 %45, 48
  br i1 %49, label %101, label %50

50:                                               ; preds = %40
  %51 = sub nsw i64 %47, %48
  br label %52

52:                                               ; preds = %52, %50
  %53 = phi i64 [ 0, %50 ], [ %98, %52 ]
  %54 = phi i64 [ %51, %50 ], [ %99, %52 ]
  %55 = getelementptr i16, i16* %4, i64 %53
  %56 = getelementptr i16, i16* %32, i64 %53
  %57 = bitcast i16* %55 to <8 x i16>*
  %58 = load <8 x i16>, <8 x i16>* %57, align 2, !alias.scope !20
  %59 = getelementptr i16, i16* %55, i64 8
  %60 = bitcast i16* %59 to <8 x i16>*
  %61 = load <8 x i16>, <8 x i16>* %60, align 2, !alias.scope !20
  %62 = bitcast i16* %56 to <8 x i16>*
  store <8 x i16> %58, <8 x i16>* %62, align 2, !alias.scope !23, !noalias !20
  %63 = getelementptr i16, i16* %56, i64 8
  %64 = bitcast i16* %63 to <8 x i16>*
  store <8 x i16> %61, <8 x i16>* %64, align 2, !alias.scope !23, !noalias !20
  %65 = or i64 %53, 16
  %66 = getelementptr i16, i16* %4, i64 %65
  %67 = getelementptr i16, i16* %32, i64 %65
  %68 = bitcast i16* %66 to <8 x i16>*
  %69 = load <8 x i16>, <8 x i16>* %68, align 2, !alias.scope !20
  %70 = getelementptr i16, i16* %66, i64 8
  %71 = bitcast i16* %70 to <8 x i16>*
  %72 = load <8 x i16>, <8 x i16>* %71, align 2, !alias.scope !20
  %73 = bitcast i16* %67 to <8 x i16>*
  store <8 x i16> %69, <8 x i16>* %73, align 2, !alias.scope !23, !noalias !20
  %74 = getelementptr i16, i16* %67, i64 8
  %75 = bitcast i16* %74 to <8 x i16>*
  store <8 x i16> %72, <8 x i16>* %75, align 2, !alias.scope !23, !noalias !20
  %76 = or i64 %53, 32
  %77 = getelementptr i16, i16* %4, i64 %76
  %78 = getelementptr i16, i16* %32, i64 %76
  %79 = bitcast i16* %77 to <8 x i16>*
  %80 = load <8 x i16>, <8 x i16>* %79, align 2, !alias.scope !20
  %81 = getelementptr i16, i16* %77, i64 8
  %82 = bitcast i16* %81 to <8 x i16>*
  %83 = load <8 x i16>, <8 x i16>* %82, align 2, !alias.scope !20
  %84 = bitcast i16* %78 to <8 x i16>*
  store <8 x i16> %80, <8 x i16>* %84, align 2, !alias.scope !23, !noalias !20
  %85 = getelementptr i16, i16* %78, i64 8
  %86 = bitcast i16* %85 to <8 x i16>*
  store <8 x i16> %83, <8 x i16>* %86, align 2, !alias.scope !23, !noalias !20
  %87 = or i64 %53, 48
  %88 = getelementptr i16, i16* %4, i64 %87
  %89 = getelementptr i16, i16* %32, i64 %87
  %90 = bitcast i16* %88 to <8 x i16>*
  %91 = load <8 x i16>, <8 x i16>* %90, align 2, !alias.scope !20
  %92 = getelementptr i16, i16* %88, i64 8
  %93 = bitcast i16* %92 to <8 x i16>*
  %94 = load <8 x i16>, <8 x i16>* %93, align 2, !alias.scope !20
  %95 = bitcast i16* %89 to <8 x i16>*
  store <8 x i16> %91, <8 x i16>* %95, align 2, !alias.scope !23, !noalias !20
  %96 = getelementptr i16, i16* %89, i64 8
  %97 = bitcast i16* %96 to <8 x i16>*
  store <8 x i16> %94, <8 x i16>* %97, align 2, !alias.scope !23, !noalias !20
  %98 = add i64 %53, 64
  %99 = add i64 %54, -4
  %100 = icmp eq i64 %99, 0
  br i1 %100, label %101, label %52, !llvm.loop !25

101:                                              ; preds = %52, %40
  %102 = phi i64 [ 0, %40 ], [ %98, %52 ]
  %103 = icmp eq i64 %48, 0
  br i1 %103, label %120, label %104

104:                                              ; preds = %101, %104
  %105 = phi i64 [ %117, %104 ], [ %102, %101 ]
  %106 = phi i64 [ %118, %104 ], [ %48, %101 ]
  %107 = getelementptr i16, i16* %4, i64 %105
  %108 = getelementptr i16, i16* %32, i64 %105
  %109 = bitcast i16* %107 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 2, !alias.scope !20
  %111 = getelementptr i16, i16* %107, i64 8
  %112 = bitcast i16* %111 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 2, !alias.scope !20
  %114 = bitcast i16* %108 to <8 x i16>*
  store <8 x i16> %110, <8 x i16>* %114, align 2, !alias.scope !23, !noalias !20
  %115 = getelementptr i16, i16* %108, i64 8
  %116 = bitcast i16* %115 to <8 x i16>*
  store <8 x i16> %113, <8 x i16>* %116, align 2, !alias.scope !23, !noalias !20
  %117 = add i64 %105, 16
  %118 = add i64 %106, -1
  %119 = icmp eq i64 %118, 0
  br i1 %119, label %120, label %104, !llvm.loop !27

120:                                              ; preds = %104, %101
  %121 = icmp eq i64 %6, %41
  br i1 %121, label %175, label %122

122:                                              ; preds = %120, %34, %31
  %123 = phi i64 [ %6, %34 ], [ %6, %31 ], [ %42, %120 ]
  %124 = phi i16* [ %4, %34 ], [ %4, %31 ], [ %43, %120 ]
  %125 = phi i16* [ %32, %34 ], [ %32, %31 ], [ %44, %120 ]
  %126 = add i64 %123, -1
  %127 = and i64 %123, 7
  %128 = icmp eq i64 %127, 0
  br i1 %128, label %140, label %129

129:                                              ; preds = %122, %129
  %130 = phi i64 [ %135, %129 ], [ %123, %122 ]
  %131 = phi i16* [ %137, %129 ], [ %124, %122 ]
  %132 = phi i16* [ %136, %129 ], [ %125, %122 ]
  %133 = phi i64 [ %138, %129 ], [ %127, %122 ]
  %134 = load i16, i16* %131, align 2
  store i16 %134, i16* %132, align 2
  %135 = add i64 %130, -1
  %136 = getelementptr inbounds i16, i16* %132, i64 1
  %137 = getelementptr inbounds i16, i16* %131, i64 1
  %138 = add i64 %133, -1
  %139 = icmp eq i64 %138, 0
  br i1 %139, label %140, label %129, !llvm.loop !28

140:                                              ; preds = %129, %122
  %141 = phi i64 [ %123, %122 ], [ %135, %129 ]
  %142 = phi i16* [ %124, %122 ], [ %137, %129 ]
  %143 = phi i16* [ %125, %122 ], [ %136, %129 ]
  %144 = icmp ult i64 %126, 7
  br i1 %144, label %175, label %145

145:                                              ; preds = %140, %145
  %146 = phi i64 [ %171, %145 ], [ %141, %140 ]
  %147 = phi i16* [ %173, %145 ], [ %142, %140 ]
  %148 = phi i16* [ %172, %145 ], [ %143, %140 ]
  %149 = load i16, i16* %147, align 2
  store i16 %149, i16* %148, align 2
  %150 = getelementptr inbounds i16, i16* %148, i64 1
  %151 = getelementptr inbounds i16, i16* %147, i64 1
  %152 = load i16, i16* %151, align 2
  store i16 %152, i16* %150, align 2
  %153 = getelementptr inbounds i16, i16* %148, i64 2
  %154 = getelementptr inbounds i16, i16* %147, i64 2
  %155 = load i16, i16* %154, align 2
  store i16 %155, i16* %153, align 2
  %156 = getelementptr inbounds i16, i16* %148, i64 3
  %157 = getelementptr inbounds i16, i16* %147, i64 3
  %158 = load i16, i16* %157, align 2
  store i16 %158, i16* %156, align 2
  %159 = getelementptr inbounds i16, i16* %148, i64 4
  %160 = getelementptr inbounds i16, i16* %147, i64 4
  %161 = load i16, i16* %160, align 2
  store i16 %161, i16* %159, align 2
  %162 = getelementptr inbounds i16, i16* %148, i64 5
  %163 = getelementptr inbounds i16, i16* %147, i64 5
  %164 = load i16, i16* %163, align 2
  store i16 %164, i16* %162, align 2
  %165 = getelementptr inbounds i16, i16* %148, i64 6
  %166 = getelementptr inbounds i16, i16* %147, i64 6
  %167 = load i16, i16* %166, align 2
  store i16 %167, i16* %165, align 2
  %168 = getelementptr inbounds i16, i16* %148, i64 7
  %169 = getelementptr inbounds i16, i16* %147, i64 7
  %170 = load i16, i16* %169, align 2
  store i16 %170, i16* %168, align 2
  %171 = add i64 %146, -8
  %172 = getelementptr inbounds i16, i16* %148, i64 8
  %173 = getelementptr inbounds i16, i16* %147, i64 8
  %174 = icmp eq i64 %171, 0
  br i1 %174, label %175, label %145, !llvm.loop !29

175:                                              ; preds = %140, %145, %120, %25
  %176 = phi i16* [ %29, %25 ], [ %32, %120 ], [ %32, %145 ], [ %32, %140 ]
  %177 = getelementptr inbounds i16, i16* %176, i64 %6
  store i16 0, i16* %177, align 2
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4dataEv(%"class.base::BasicStringPiece.1"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %3 = load i16*, i16** %2, align 8
  ret i16* %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4sizeEv(%"class.base::BasicStringPiece.1"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE5beginEv(%"class.base::BasicStringPiece.1"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %3 = load i16*, i16** %2, align 8
  ret i16* %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6cbeginEv(%"class.base::BasicStringPiece.1"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %3 = load i16*, i16** %2, align 8
  ret i16* %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE3endEv(%"class.base::BasicStringPiece.1"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %3 = load i16*, i16** %2, align 8
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i16, i16* %3, i64 %5
  ret i16* %6
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4cendEv(%"class.base::BasicStringPiece.1"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %3 = load i16*, i16** %2, align 8
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i16, i16* %3, i64 %5
  ret i16* %6
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden { i16*, i16* } @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6rbeginEv(%"class.base::BasicStringPiece.1"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %3 = load i16*, i16** %2, align 8
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i16, i16* %3, i64 %5
  %7 = insertvalue { i16*, i16* } undef, i16* %6, 0
  %8 = insertvalue { i16*, i16* } %7, i16* %6, 1
  ret { i16*, i16* } %8
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden { i16*, i16* } @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE7crbeginEv(%"class.base::BasicStringPiece.1"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %3 = load i16*, i16** %2, align 8
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i16, i16* %3, i64 %5
  %7 = insertvalue { i16*, i16* } undef, i16* %6, 0
  %8 = insertvalue { i16*, i16* } %7, i16* %6, 1
  ret { i16*, i16* } %8
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden { i16*, i16* } @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4rendEv(%"class.base::BasicStringPiece.1"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %3 = load i16*, i16** %2, align 8
  %4 = insertvalue { i16*, i16* } undef, i16* %3, 0
  %5 = insertvalue { i16*, i16* } %4, i16* %3, 1
  ret { i16*, i16* } %5
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden { i16*, i16* } @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE5crendEv(%"class.base::BasicStringPiece.1"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %3 = load i16*, i16** %2, align 8
  %4 = insertvalue { i16*, i16* } undef, i16* %3, 0
  %5 = insertvalue { i16*, i16* } %4, i16* %3, 1
  ret { i16*, i16* } %5
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEEixEm(%"class.base::BasicStringPiece.1"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = tail call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece.1"* %0, i64 %1)
  ret i16* %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece.1"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i64 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #12
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %9) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i8* %14, i8* %15) #12
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 171, %"class.logging::CheckOpResult"* nonnull %4) #12
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #12
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  %23 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %24 = load i16*, i16** %23, align 8
  %25 = getelementptr inbounds i16, i16* %24, i64 %1
  ret i16* %25
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE5frontEv(%"class.base::BasicStringPiece.1"*) local_unnamed_addr #0 comdat align 2 {
  %2 = tail call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece.1"* %0, i64 0) #12
  ret i16* %2
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4backEv(%"class.base::BasicStringPiece.1"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, -1
  %5 = tail call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece.1"* %0, i64 %4) #12
  ret i16* %5
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6lengthEv(%"class.base::BasicStringPiece.1"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE8max_sizeEv(%"class.base::BasicStringPiece.1"*) local_unnamed_addr #0 comdat align 2 {
  ret i64 9223372036854775807
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE5emptyEv(%"class.base::BasicStringPiece.1"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE13remove_prefixEm(%"class.base::BasicStringPiece.1"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ult i64 %9, %1
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #12
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %9) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), i8* %14, i8* %15) #12
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 194, %"class.logging::CheckOpResult"* nonnull %4) #12
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #12
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  %23 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %24 = load i16*, i16** %23, align 8
  %25 = getelementptr inbounds i16, i16* %24, i64 %1
  store i16* %25, i16** %23, align 8
  %26 = load i64, i64* %8, align 8
  %27 = sub i64 %26, %1
  store i64 %27, i64* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE13remove_suffixEm(%"class.base::BasicStringPiece.1"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ult i64 %9, %1
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #12
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %9) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), i8* %14, i8* %15) #12
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 201, %"class.logging::CheckOpResult"* nonnull %4) #12
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #12
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  %23 = load i64, i64* %8, align 8
  %24 = sub i64 %23, %1
  store i64 %24, i64* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4swapERS4_(%"class.base::BasicStringPiece.1"*, %"class.base::BasicStringPiece.1"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.base::BasicStringPiece.1"* %0 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"class.base::BasicStringPiece.1"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  store i64 %6, i64* %3, align 8
  store i64 %4, i64* %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %7, align 8
  store i64 %8, i64* %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4copyEPDsmm(%"class.base::BasicStringPiece.1"*, i16*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #12
  %9 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %9, align 8
  %10 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = icmp ult i64 %11, %3
  br i1 %13, label %15, label %14

14:                                               ; preds = %4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store i8* null, i8** %9, align 8
  br label %24

15:                                               ; preds = %4
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %3) #12
  %17 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %11) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %5, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i8* %16, i8* %17) #12
  %18 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store i8* %19, i8** %9, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %24, label %21

21:                                               ; preds = %15
  %22 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 218, %"class.logging::CheckOpResult"* nonnull %6) #12
  %23 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #12
  br label %24

24:                                               ; preds = %14, %15, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #12
  %25 = load i64, i64* %10, align 8
  %26 = sub i64 %25, %3
  %27 = icmp ult i64 %26, %2
  %28 = select i1 %27, i64 %26, i64 %2
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %177, label %30

30:                                               ; preds = %24
  %31 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %32 = load i16*, i16** %31, align 8
  %33 = getelementptr inbounds i16, i16* %32, i64 %3
  %34 = icmp ult i64 %28, 16
  br i1 %34, label %124, label %35

35:                                               ; preds = %30
  %36 = getelementptr i16, i16* %1, i64 %28
  %37 = add i64 %28, %3
  %38 = getelementptr i16, i16* %32, i64 %37
  %39 = icmp ugt i16* %38, %1
  %40 = icmp ult i16* %33, %36
  %41 = and i1 %39, %40
  br i1 %41, label %124, label %42

42:                                               ; preds = %35
  %43 = and i64 %28, -16
  %44 = sub i64 %28, %43
  %45 = getelementptr i16, i16* %33, i64 %43
  %46 = getelementptr i16, i16* %1, i64 %43
  %47 = add i64 %43, -16
  %48 = lshr exact i64 %47, 4
  %49 = add nuw nsw i64 %48, 1
  %50 = and i64 %49, 3
  %51 = icmp ult i64 %47, 48
  br i1 %51, label %103, label %52

52:                                               ; preds = %42
  %53 = sub nsw i64 %49, %50
  br label %54

54:                                               ; preds = %54, %52
  %55 = phi i64 [ 0, %52 ], [ %100, %54 ]
  %56 = phi i64 [ %53, %52 ], [ %101, %54 ]
  %57 = getelementptr i16, i16* %33, i64 %55
  %58 = getelementptr i16, i16* %1, i64 %55
  %59 = bitcast i16* %57 to <8 x i16>*
  %60 = load <8 x i16>, <8 x i16>* %59, align 2, !alias.scope !30
  %61 = getelementptr i16, i16* %57, i64 8
  %62 = bitcast i16* %61 to <8 x i16>*
  %63 = load <8 x i16>, <8 x i16>* %62, align 2, !alias.scope !30
  %64 = bitcast i16* %58 to <8 x i16>*
  store <8 x i16> %60, <8 x i16>* %64, align 2, !alias.scope !33, !noalias !30
  %65 = getelementptr i16, i16* %58, i64 8
  %66 = bitcast i16* %65 to <8 x i16>*
  store <8 x i16> %63, <8 x i16>* %66, align 2, !alias.scope !33, !noalias !30
  %67 = or i64 %55, 16
  %68 = getelementptr i16, i16* %33, i64 %67
  %69 = getelementptr i16, i16* %1, i64 %67
  %70 = bitcast i16* %68 to <8 x i16>*
  %71 = load <8 x i16>, <8 x i16>* %70, align 2, !alias.scope !30
  %72 = getelementptr i16, i16* %68, i64 8
  %73 = bitcast i16* %72 to <8 x i16>*
  %74 = load <8 x i16>, <8 x i16>* %73, align 2, !alias.scope !30
  %75 = bitcast i16* %69 to <8 x i16>*
  store <8 x i16> %71, <8 x i16>* %75, align 2, !alias.scope !33, !noalias !30
  %76 = getelementptr i16, i16* %69, i64 8
  %77 = bitcast i16* %76 to <8 x i16>*
  store <8 x i16> %74, <8 x i16>* %77, align 2, !alias.scope !33, !noalias !30
  %78 = or i64 %55, 32
  %79 = getelementptr i16, i16* %33, i64 %78
  %80 = getelementptr i16, i16* %1, i64 %78
  %81 = bitcast i16* %79 to <8 x i16>*
  %82 = load <8 x i16>, <8 x i16>* %81, align 2, !alias.scope !30
  %83 = getelementptr i16, i16* %79, i64 8
  %84 = bitcast i16* %83 to <8 x i16>*
  %85 = load <8 x i16>, <8 x i16>* %84, align 2, !alias.scope !30
  %86 = bitcast i16* %80 to <8 x i16>*
  store <8 x i16> %82, <8 x i16>* %86, align 2, !alias.scope !33, !noalias !30
  %87 = getelementptr i16, i16* %80, i64 8
  %88 = bitcast i16* %87 to <8 x i16>*
  store <8 x i16> %85, <8 x i16>* %88, align 2, !alias.scope !33, !noalias !30
  %89 = or i64 %55, 48
  %90 = getelementptr i16, i16* %33, i64 %89
  %91 = getelementptr i16, i16* %1, i64 %89
  %92 = bitcast i16* %90 to <8 x i16>*
  %93 = load <8 x i16>, <8 x i16>* %92, align 2, !alias.scope !30
  %94 = getelementptr i16, i16* %90, i64 8
  %95 = bitcast i16* %94 to <8 x i16>*
  %96 = load <8 x i16>, <8 x i16>* %95, align 2, !alias.scope !30
  %97 = bitcast i16* %91 to <8 x i16>*
  store <8 x i16> %93, <8 x i16>* %97, align 2, !alias.scope !33, !noalias !30
  %98 = getelementptr i16, i16* %91, i64 8
  %99 = bitcast i16* %98 to <8 x i16>*
  store <8 x i16> %96, <8 x i16>* %99, align 2, !alias.scope !33, !noalias !30
  %100 = add i64 %55, 64
  %101 = add i64 %56, -4
  %102 = icmp eq i64 %101, 0
  br i1 %102, label %103, label %54, !llvm.loop !35

103:                                              ; preds = %54, %42
  %104 = phi i64 [ 0, %42 ], [ %100, %54 ]
  %105 = icmp eq i64 %50, 0
  br i1 %105, label %122, label %106

106:                                              ; preds = %103, %106
  %107 = phi i64 [ %119, %106 ], [ %104, %103 ]
  %108 = phi i64 [ %120, %106 ], [ %50, %103 ]
  %109 = getelementptr i16, i16* %33, i64 %107
  %110 = getelementptr i16, i16* %1, i64 %107
  %111 = bitcast i16* %109 to <8 x i16>*
  %112 = load <8 x i16>, <8 x i16>* %111, align 2, !alias.scope !30
  %113 = getelementptr i16, i16* %109, i64 8
  %114 = bitcast i16* %113 to <8 x i16>*
  %115 = load <8 x i16>, <8 x i16>* %114, align 2, !alias.scope !30
  %116 = bitcast i16* %110 to <8 x i16>*
  store <8 x i16> %112, <8 x i16>* %116, align 2, !alias.scope !33, !noalias !30
  %117 = getelementptr i16, i16* %110, i64 8
  %118 = bitcast i16* %117 to <8 x i16>*
  store <8 x i16> %115, <8 x i16>* %118, align 2, !alias.scope !33, !noalias !30
  %119 = add i64 %107, 16
  %120 = add i64 %108, -1
  %121 = icmp eq i64 %120, 0
  br i1 %121, label %122, label %106, !llvm.loop !36

122:                                              ; preds = %106, %103
  %123 = icmp eq i64 %28, %43
  br i1 %123, label %177, label %124

124:                                              ; preds = %122, %35, %30
  %125 = phi i64 [ %28, %35 ], [ %28, %30 ], [ %44, %122 ]
  %126 = phi i16* [ %33, %35 ], [ %33, %30 ], [ %45, %122 ]
  %127 = phi i16* [ %1, %35 ], [ %1, %30 ], [ %46, %122 ]
  %128 = add i64 %125, -1
  %129 = and i64 %125, 7
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %142, label %131

131:                                              ; preds = %124, %131
  %132 = phi i64 [ %137, %131 ], [ %125, %124 ]
  %133 = phi i16* [ %139, %131 ], [ %126, %124 ]
  %134 = phi i16* [ %138, %131 ], [ %127, %124 ]
  %135 = phi i64 [ %140, %131 ], [ %129, %124 ]
  %136 = load i16, i16* %133, align 2
  store i16 %136, i16* %134, align 2
  %137 = add i64 %132, -1
  %138 = getelementptr inbounds i16, i16* %134, i64 1
  %139 = getelementptr inbounds i16, i16* %133, i64 1
  %140 = add i64 %135, -1
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %142, label %131, !llvm.loop !37

142:                                              ; preds = %131, %124
  %143 = phi i64 [ %125, %124 ], [ %137, %131 ]
  %144 = phi i16* [ %126, %124 ], [ %139, %131 ]
  %145 = phi i16* [ %127, %124 ], [ %138, %131 ]
  %146 = icmp ult i64 %128, 7
  br i1 %146, label %177, label %147

147:                                              ; preds = %142, %147
  %148 = phi i64 [ %173, %147 ], [ %143, %142 ]
  %149 = phi i16* [ %175, %147 ], [ %144, %142 ]
  %150 = phi i16* [ %174, %147 ], [ %145, %142 ]
  %151 = load i16, i16* %149, align 2
  store i16 %151, i16* %150, align 2
  %152 = getelementptr inbounds i16, i16* %150, i64 1
  %153 = getelementptr inbounds i16, i16* %149, i64 1
  %154 = load i16, i16* %153, align 2
  store i16 %154, i16* %152, align 2
  %155 = getelementptr inbounds i16, i16* %150, i64 2
  %156 = getelementptr inbounds i16, i16* %149, i64 2
  %157 = load i16, i16* %156, align 2
  store i16 %157, i16* %155, align 2
  %158 = getelementptr inbounds i16, i16* %150, i64 3
  %159 = getelementptr inbounds i16, i16* %149, i64 3
  %160 = load i16, i16* %159, align 2
  store i16 %160, i16* %158, align 2
  %161 = getelementptr inbounds i16, i16* %150, i64 4
  %162 = getelementptr inbounds i16, i16* %149, i64 4
  %163 = load i16, i16* %162, align 2
  store i16 %163, i16* %161, align 2
  %164 = getelementptr inbounds i16, i16* %150, i64 5
  %165 = getelementptr inbounds i16, i16* %149, i64 5
  %166 = load i16, i16* %165, align 2
  store i16 %166, i16* %164, align 2
  %167 = getelementptr inbounds i16, i16* %150, i64 6
  %168 = getelementptr inbounds i16, i16* %149, i64 6
  %169 = load i16, i16* %168, align 2
  store i16 %169, i16* %167, align 2
  %170 = getelementptr inbounds i16, i16* %150, i64 7
  %171 = getelementptr inbounds i16, i16* %149, i64 7
  %172 = load i16, i16* %171, align 2
  store i16 %172, i16* %170, align 2
  %173 = add i64 %148, -8
  %174 = getelementptr inbounds i16, i16* %150, i64 8
  %175 = getelementptr inbounds i16, i16* %149, i64 8
  %176 = icmp eq i64 %173, 0
  br i1 %176, label %177, label %147, !llvm.loop !38

177:                                              ; preds = %142, %147, %122, %24
  ret i64 %28
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden { i16*, i64 } @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6substrEmm(%"class.base::BasicStringPiece.1"*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #12
  %8 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %8, align 8
  %9 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ult i64 %10, %1
  br i1 %12, label %14, label %13

13:                                               ; preds = %3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %8, align 8
  br label %23

14:                                               ; preds = %3
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #12
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %10) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i8* %15, i8* %16) #12
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %8, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 226, %"class.logging::CheckOpResult"* nonnull %5) #12
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #12
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #12
  %24 = load i64, i64* %9, align 8
  %25 = sub i64 %24, %1
  %26 = icmp ult i64 %25, %2
  %27 = select i1 %26, i64 %25, i64 %2
  %28 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %29 = load i16*, i16** %28, align 8
  %30 = getelementptr inbounds i16, i16* %29, i64 %1
  %31 = insertvalue { i16*, i64 } undef, i16* %30, 0
  %32 = insertvalue { i16*, i64 } %31, i64 %27, 1
  ret { i16*, i64 } %32
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE7compareES4_(%"class.base::BasicStringPiece.1"*, i16*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, %2
  %7 = select i1 %6, i64 %2, i64 %5
  %8 = icmp eq i64 %7, 0
  br i1 %8, label %26, label %9

9:                                                ; preds = %3
  %10 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %11 = load i16*, i16** %10, align 8
  br label %12

12:                                               ; preds = %9, %21
  %13 = phi i64 [ %22, %21 ], [ %7, %9 ]
  %14 = phi i16* [ %24, %21 ], [ %1, %9 ]
  %15 = phi i16* [ %23, %21 ], [ %11, %9 ]
  %16 = load i16, i16* %15, align 2
  %17 = load i16, i16* %14, align 2
  %18 = icmp ult i16 %16, %17
  br i1 %18, label %31, label %19

19:                                               ; preds = %12
  %20 = icmp ult i16 %17, %16
  br i1 %20, label %31, label %21

21:                                               ; preds = %19
  %22 = add i64 %13, -1
  %23 = getelementptr inbounds i16, i16* %15, i64 1
  %24 = getelementptr inbounds i16, i16* %14, i64 1
  %25 = icmp eq i64 %22, 0
  br i1 %25, label %26, label %12

26:                                               ; preds = %21, %3
  %27 = icmp eq i64 %5, %2
  br i1 %27, label %31, label %28

28:                                               ; preds = %26
  %29 = icmp ult i64 %5, %2
  %30 = select i1 %29, i32 -1, i32 1
  br label %31

31:                                               ; preds = %19, %12, %26, %28
  %32 = phi i32 [ %30, %28 ], [ 0, %26 ], [ -1, %12 ], [ 1, %19 ]
  ret i32 %32
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE7compareEmmS4_(%"class.base::BasicStringPiece.1"*, i64, i64, i16*, i64) local_unnamed_addr #0 comdat align 2 {
  %6 = tail call { i16*, i64 } @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6substrEmm(%"class.base::BasicStringPiece.1"* %0, i64 %1, i64 %2)
  %7 = extractvalue { i16*, i64 } %6, 1
  %8 = icmp ugt i64 %7, %4
  %9 = select i1 %8, i64 %4, i64 %7
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %27, label %11

11:                                               ; preds = %5
  %12 = extractvalue { i16*, i64 } %6, 0
  br label %13

13:                                               ; preds = %11, %22
  %14 = phi i64 [ %23, %22 ], [ %9, %11 ]
  %15 = phi i16* [ %25, %22 ], [ %3, %11 ]
  %16 = phi i16* [ %24, %22 ], [ %12, %11 ]
  %17 = load i16, i16* %16, align 2
  %18 = load i16, i16* %15, align 2
  %19 = icmp ult i16 %17, %18
  br i1 %19, label %32, label %20

20:                                               ; preds = %13
  %21 = icmp ult i16 %18, %17
  br i1 %21, label %32, label %22

22:                                               ; preds = %20
  %23 = add i64 %14, -1
  %24 = getelementptr inbounds i16, i16* %16, i64 1
  %25 = getelementptr inbounds i16, i16* %15, i64 1
  %26 = icmp eq i64 %23, 0
  br i1 %26, label %27, label %13

27:                                               ; preds = %22, %5
  %28 = icmp eq i64 %7, %4
  br i1 %28, label %32, label %29

29:                                               ; preds = %27
  %30 = icmp ult i64 %7, %4
  %31 = select i1 %30, i32 -1, i32 1
  br label %32

32:                                               ; preds = %13, %20, %27, %29
  %33 = phi i32 [ %31, %29 ], [ 0, %27 ], [ 1, %20 ], [ -1, %13 ]
  ret i32 %33
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE7compareEmmS4_mm(%"class.base::BasicStringPiece.1"*, i64, i64, i16*, i64, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %8 = alloca %"class.base::BasicStringPiece.1", align 8
  %9 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %8, i64 0, i32 0
  store i16* %3, i16** %9, align 8
  %10 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %8, i64 0, i32 1
  store i64 %4, i64* %10, align 8
  %11 = tail call { i16*, i64 } @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6substrEmm(%"class.base::BasicStringPiece.1"* %0, i64 %1, i64 %2)
  %12 = extractvalue { i16*, i64 } %11, 1
  %13 = call { i16*, i64 } @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6substrEmm(%"class.base::BasicStringPiece.1"* nonnull %8, i64 %5, i64 %6)
  %14 = extractvalue { i16*, i64 } %13, 1
  %15 = icmp ugt i64 %12, %14
  %16 = select i1 %15, i64 %14, i64 %12
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %35, label %18

18:                                               ; preds = %7
  %19 = extractvalue { i16*, i64 } %13, 0
  %20 = extractvalue { i16*, i64 } %11, 0
  br label %21

21:                                               ; preds = %18, %30
  %22 = phi i64 [ %31, %30 ], [ %16, %18 ]
  %23 = phi i16* [ %33, %30 ], [ %19, %18 ]
  %24 = phi i16* [ %32, %30 ], [ %20, %18 ]
  %25 = load i16, i16* %24, align 2
  %26 = load i16, i16* %23, align 2
  %27 = icmp ult i16 %25, %26
  br i1 %27, label %40, label %28

28:                                               ; preds = %21
  %29 = icmp ult i16 %26, %25
  br i1 %29, label %40, label %30

30:                                               ; preds = %28
  %31 = add i64 %22, -1
  %32 = getelementptr inbounds i16, i16* %24, i64 1
  %33 = getelementptr inbounds i16, i16* %23, i64 1
  %34 = icmp eq i64 %31, 0
  br i1 %34, label %35, label %21

35:                                               ; preds = %30, %7
  %36 = icmp eq i64 %12, %14
  br i1 %36, label %40, label %37

37:                                               ; preds = %35
  %38 = icmp ult i64 %12, %14
  %39 = select i1 %38, i32 -1, i32 1
  br label %40

40:                                               ; preds = %21, %28, %35, %37
  %41 = phi i32 [ %39, %37 ], [ 0, %35 ], [ 1, %28 ], [ -1, %21 ]
  ret i32 %41
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE7compareEPKDs(%"class.base::BasicStringPiece.1"*, i16*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = icmp eq i16* %1, null
  br i1 %4, label %15, label %5

5:                                                ; preds = %2
  %6 = load i16, i16* %1, align 2
  %7 = icmp eq i16 %6, 0
  br i1 %7, label %18, label %8

8:                                                ; preds = %5, %8
  %9 = phi i64 [ %11, %8 ], [ 0, %5 ]
  %10 = phi i16* [ %12, %8 ], [ %1, %5 ]
  %11 = add i64 %9, 1
  %12 = getelementptr inbounds i16, i16* %10, i64 1
  %13 = load i16, i16* %12, align 2
  %14 = icmp eq i16 %13, 0
  br i1 %14, label %18, label %8

15:                                               ; preds = %2
  %16 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %17 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #12
  br label %18

18:                                               ; preds = %8, %5, %15
  %19 = phi i64 [ 0, %15 ], [ 0, %5 ], [ %11, %8 ]
  %20 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %21 = load i64, i64* %20, align 8
  %22 = icmp ugt i64 %21, %19
  %23 = select i1 %22, i64 %19, i64 %21
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %42, label %25

25:                                               ; preds = %18
  %26 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %27 = load i16*, i16** %26, align 8
  br label %28

28:                                               ; preds = %37, %25
  %29 = phi i64 [ %38, %37 ], [ %23, %25 ]
  %30 = phi i16* [ %40, %37 ], [ %1, %25 ]
  %31 = phi i16* [ %39, %37 ], [ %27, %25 ]
  %32 = load i16, i16* %31, align 2
  %33 = load i16, i16* %30, align 2
  %34 = icmp ult i16 %32, %33
  br i1 %34, label %47, label %35

35:                                               ; preds = %28
  %36 = icmp ult i16 %33, %32
  br i1 %36, label %47, label %37

37:                                               ; preds = %35
  %38 = add i64 %29, -1
  %39 = getelementptr inbounds i16, i16* %31, i64 1
  %40 = getelementptr inbounds i16, i16* %30, i64 1
  %41 = icmp eq i64 %38, 0
  br i1 %41, label %42, label %28

42:                                               ; preds = %37, %18
  %43 = icmp eq i64 %21, %19
  br i1 %43, label %47, label %44

44:                                               ; preds = %42
  %45 = icmp ult i64 %21, %19
  %46 = select i1 %45, i32 -1, i32 1
  br label %47

47:                                               ; preds = %28, %35, %42, %44
  %48 = phi i32 [ %46, %44 ], [ 0, %42 ], [ 1, %35 ], [ -1, %28 ]
  ret i32 %48
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE7compareEmmPKDs(%"class.base::BasicStringPiece.1"*, i64, i64, i16*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = tail call { i16*, i64 } @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6substrEmm(%"class.base::BasicStringPiece.1"* %0, i64 %1, i64 %2)
  %7 = extractvalue { i16*, i64 } %6, 0
  %8 = extractvalue { i16*, i64 } %6, 1
  %9 = icmp eq i16* %3, null
  br i1 %9, label %20, label %10

10:                                               ; preds = %4
  %11 = load i16, i16* %3, align 2
  %12 = icmp eq i16 %11, 0
  br i1 %12, label %23, label %13

13:                                               ; preds = %10, %13
  %14 = phi i64 [ %16, %13 ], [ 0, %10 ]
  %15 = phi i16* [ %17, %13 ], [ %3, %10 ]
  %16 = add i64 %14, 1
  %17 = getelementptr inbounds i16, i16* %15, i64 1
  %18 = load i16, i16* %17, align 2
  %19 = icmp eq i16 %18, 0
  br i1 %19, label %23, label %13

20:                                               ; preds = %4
  %21 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #12
  br label %23

23:                                               ; preds = %13, %10, %20
  %24 = phi i64 [ 0, %20 ], [ 0, %10 ], [ %16, %13 ]
  %25 = icmp ugt i64 %8, %24
  %26 = select i1 %25, i64 %24, i64 %8
  %27 = icmp eq i64 %26, 0
  br i1 %27, label %42, label %28

28:                                               ; preds = %23, %37
  %29 = phi i64 [ %38, %37 ], [ %26, %23 ]
  %30 = phi i16* [ %40, %37 ], [ %3, %23 ]
  %31 = phi i16* [ %39, %37 ], [ %7, %23 ]
  %32 = load i16, i16* %31, align 2
  %33 = load i16, i16* %30, align 2
  %34 = icmp ult i16 %32, %33
  br i1 %34, label %47, label %35

35:                                               ; preds = %28
  %36 = icmp ult i16 %33, %32
  br i1 %36, label %47, label %37

37:                                               ; preds = %35
  %38 = add i64 %29, -1
  %39 = getelementptr inbounds i16, i16* %31, i64 1
  %40 = getelementptr inbounds i16, i16* %30, i64 1
  %41 = icmp eq i64 %38, 0
  br i1 %41, label %42, label %28

42:                                               ; preds = %37, %23
  %43 = icmp eq i64 %8, %24
  br i1 %43, label %47, label %44

44:                                               ; preds = %42
  %45 = icmp ult i64 %8, %24
  %46 = select i1 %45, i32 -1, i32 1
  br label %47

47:                                               ; preds = %28, %35, %42, %44
  %48 = phi i32 [ %46, %44 ], [ 0, %42 ], [ 1, %35 ], [ -1, %28 ]
  ret i32 %48
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE7compareEmmPKDsm(%"class.base::BasicStringPiece.1"*, i64, i64, i16*, i64) local_unnamed_addr #0 comdat align 2 {
  %6 = tail call { i16*, i64 } @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE6substrEmm(%"class.base::BasicStringPiece.1"* %0, i64 %1, i64 %2)
  %7 = extractvalue { i16*, i64 } %6, 1
  %8 = icmp ugt i64 %7, %4
  %9 = select i1 %8, i64 %4, i64 %7
  %10 = icmp eq i64 %9, 0
  br i1 %10, label %27, label %11

11:                                               ; preds = %5
  %12 = extractvalue { i16*, i64 } %6, 0
  br label %13

13:                                               ; preds = %11, %22
  %14 = phi i64 [ %23, %22 ], [ %9, %11 ]
  %15 = phi i16* [ %25, %22 ], [ %3, %11 ]
  %16 = phi i16* [ %24, %22 ], [ %12, %11 ]
  %17 = load i16, i16* %16, align 2
  %18 = load i16, i16* %15, align 2
  %19 = icmp ult i16 %17, %18
  br i1 %19, label %32, label %20

20:                                               ; preds = %13
  %21 = icmp ult i16 %18, %17
  br i1 %21, label %32, label %22

22:                                               ; preds = %20
  %23 = add i64 %14, -1
  %24 = getelementptr inbounds i16, i16* %16, i64 1
  %25 = getelementptr inbounds i16, i16* %15, i64 1
  %26 = icmp eq i64 %23, 0
  br i1 %26, label %27, label %13

27:                                               ; preds = %22, %5
  %28 = icmp eq i64 %7, %4
  br i1 %28, label %32, label %29

29:                                               ; preds = %27
  %30 = icmp ult i64 %7, %4
  %31 = select i1 %30, i32 -1, i32 1
  br label %32

32:                                               ; preds = %13, %20, %27, %29
  %33 = phi i32 [ %31, %29 ], [ 0, %27 ], [ 1, %20 ], [ -1, %13 ]
  ret i32 %33
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4findES4_m(%"class.base::BasicStringPiece.1"*, i16*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %6 = load i16*, i16** %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, %3
  br i1 %9, label %60, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds i16, i16* %6, i64 %3
  %12 = getelementptr inbounds i16, i16* %6, i64 %8
  %13 = getelementptr inbounds i16, i16* %1, i64 %2
  %14 = shl nuw i64 %2, 1
  %15 = ashr exact i64 %14, 1
  %16 = icmp eq i64 %2, 0
  br i1 %16, label %51, label %17

17:                                               ; preds = %10
  %18 = ptrtoint i16* %11 to i64
  %19 = ptrtoint i16* %12 to i64
  %20 = sub i64 %19, %18
  %21 = ashr exact i64 %20, 1
  %22 = icmp slt i64 %21, %15
  br i1 %22, label %51, label %23

23:                                               ; preds = %17
  %24 = sub nsw i64 1, %15
  %25 = getelementptr inbounds i16, i16* %12, i64 %24
  %26 = icmp eq i16* %25, %11
  br i1 %26, label %51, label %27

27:                                               ; preds = %23
  %28 = load i16, i16* %1, align 2
  br label %29

29:                                               ; preds = %36, %27
  %30 = phi i16* [ %11, %27 ], [ %37, %36 ]
  %31 = load i16, i16* %30, align 2
  %32 = icmp eq i16 %31, %28
  br i1 %32, label %38, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds i16, i16* %30, i64 1
  %35 = icmp eq i16* %34, %25
  br i1 %35, label %51, label %36

36:                                               ; preds = %33, %48
  %37 = phi i16* [ %34, %33 ], [ %49, %48 ]
  br label %29

38:                                               ; preds = %29, %43
  %39 = phi i16* [ %44, %43 ], [ %30, %29 ]
  %40 = phi i16* [ %41, %43 ], [ %1, %29 ]
  %41 = getelementptr inbounds i16, i16* %40, i64 1
  %42 = icmp eq i16* %41, %13
  br i1 %42, label %51, label %43

43:                                               ; preds = %38
  %44 = getelementptr inbounds i16, i16* %39, i64 1
  %45 = load i16, i16* %44, align 2
  %46 = load i16, i16* %41, align 2
  %47 = icmp eq i16 %45, %46
  br i1 %47, label %38, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds i16, i16* %30, i64 1
  %50 = icmp eq i16* %49, %25
  br i1 %50, label %51, label %36

51:                                               ; preds = %48, %33, %38, %23, %17, %10
  %52 = phi i16* [ %11, %10 ], [ %12, %17 ], [ %12, %23 ], [ %30, %38 ], [ %12, %33 ], [ %12, %48 ]
  %53 = ptrtoint i16* %52 to i64
  %54 = ptrtoint i16* %6 to i64
  %55 = sub i64 %53, %54
  %56 = ashr exact i64 %55, 1
  %57 = add i64 %56, %2
  %58 = icmp ugt i64 %57, %8
  %59 = select i1 %58, i64 -1, i64 %56
  br label %60

60:                                               ; preds = %4, %51
  %61 = phi i64 [ %59, %51 ], [ -1, %4 ]
  ret i64 %61
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN4base8internal4findENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES5_m(i16*, i64, i16* readonly, i64, i64) local_unnamed_addr #4 {
  %6 = icmp ult i64 %1, %4
  br i1 %6, label %57, label %7

7:                                                ; preds = %5
  %8 = getelementptr inbounds i16, i16* %0, i64 %4
  %9 = getelementptr inbounds i16, i16* %0, i64 %1
  %10 = getelementptr inbounds i16, i16* %2, i64 %3
  %11 = shl nuw i64 %3, 1
  %12 = ashr exact i64 %11, 1
  %13 = icmp eq i64 %3, 0
  br i1 %13, label %48, label %14

14:                                               ; preds = %7
  %15 = ptrtoint i16* %8 to i64
  %16 = ptrtoint i16* %9 to i64
  %17 = sub i64 %16, %15
  %18 = ashr exact i64 %17, 1
  %19 = icmp slt i64 %18, %12
  br i1 %19, label %48, label %20

20:                                               ; preds = %14
  %21 = sub nsw i64 1, %12
  %22 = getelementptr inbounds i16, i16* %9, i64 %21
  %23 = icmp eq i16* %22, %8
  br i1 %23, label %48, label %24

24:                                               ; preds = %20
  %25 = load i16, i16* %2, align 2
  br label %26

26:                                               ; preds = %33, %24
  %27 = phi i16* [ %8, %24 ], [ %34, %33 ]
  %28 = load i16, i16* %27, align 2
  %29 = icmp eq i16 %28, %25
  br i1 %29, label %35, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds i16, i16* %27, i64 1
  %32 = icmp eq i16* %31, %22
  br i1 %32, label %48, label %33

33:                                               ; preds = %30, %45
  %34 = phi i16* [ %31, %30 ], [ %46, %45 ]
  br label %26

35:                                               ; preds = %26, %40
  %36 = phi i16* [ %41, %40 ], [ %27, %26 ]
  %37 = phi i16* [ %38, %40 ], [ %2, %26 ]
  %38 = getelementptr inbounds i16, i16* %37, i64 1
  %39 = icmp eq i16* %38, %10
  br i1 %39, label %48, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds i16, i16* %36, i64 1
  %42 = load i16, i16* %41, align 2
  %43 = load i16, i16* %38, align 2
  %44 = icmp eq i16 %42, %43
  br i1 %44, label %35, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds i16, i16* %27, i64 1
  %47 = icmp eq i16* %46, %22
  br i1 %47, label %48, label %33

48:                                               ; preds = %45, %30, %35, %20, %14, %7
  %49 = phi i16* [ %8, %7 ], [ %9, %14 ], [ %9, %20 ], [ %27, %35 ], [ %9, %30 ], [ %9, %45 ]
  %50 = ptrtoint i16* %49 to i64
  %51 = ptrtoint i16* %0 to i64
  %52 = sub i64 %50, %51
  %53 = ashr exact i64 %52, 1
  %54 = add i64 %53, %3
  %55 = icmp ugt i64 %54, %1
  %56 = select i1 %55, i64 -1, i64 %53
  br label %57

57:                                               ; preds = %5, %48
  %58 = phi i64 [ %56, %48 ], [ -1, %5 ]
  ret i64 %58
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4findEDsm(%"class.base::BasicStringPiece.1"*, i16 zeroext, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, %2
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %9 = load i16*, i16** %8, align 8
  %10 = sub i64 %5, %2
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %30, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds i16, i16* %9, i64 %2
  br label %14

14:                                               ; preds = %12, %19
  %15 = phi i64 [ %20, %19 ], [ %10, %12 ]
  %16 = phi i16* [ %21, %19 ], [ %13, %12 ]
  %17 = load i16, i16* %16, align 2
  %18 = icmp eq i16 %17, %1
  br i1 %18, label %23, label %19

19:                                               ; preds = %14
  %20 = add i64 %15, -1
  %21 = getelementptr inbounds i16, i16* %16, i64 1
  %22 = icmp eq i64 %20, 0
  br i1 %22, label %30, label %14

23:                                               ; preds = %14
  %24 = icmp eq i16* %16, null
  br i1 %24, label %30, label %25

25:                                               ; preds = %23
  %26 = ptrtoint i16* %16 to i64
  %27 = ptrtoint i16* %9 to i64
  %28 = sub i64 %26, %27
  %29 = ashr exact i64 %28, 1
  br label %30

30:                                               ; preds = %19, %7, %25, %23, %3
  %31 = phi i64 [ -1, %3 ], [ %29, %25 ], [ -1, %23 ], [ -1, %7 ], [ -1, %19 ]
  ret i64 %31
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4findEPKDsmm(%"class.base::BasicStringPiece.1"*, i16*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %6 = load i16*, i16** %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, %2
  br i1 %9, label %60, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds i16, i16* %6, i64 %2
  %12 = getelementptr inbounds i16, i16* %6, i64 %8
  %13 = getelementptr inbounds i16, i16* %1, i64 %3
  %14 = shl nuw i64 %3, 1
  %15 = ashr exact i64 %14, 1
  %16 = icmp eq i64 %3, 0
  br i1 %16, label %51, label %17

17:                                               ; preds = %10
  %18 = ptrtoint i16* %11 to i64
  %19 = ptrtoint i16* %12 to i64
  %20 = sub i64 %19, %18
  %21 = ashr exact i64 %20, 1
  %22 = icmp slt i64 %21, %15
  br i1 %22, label %51, label %23

23:                                               ; preds = %17
  %24 = sub nsw i64 1, %15
  %25 = getelementptr inbounds i16, i16* %12, i64 %24
  %26 = icmp eq i16* %25, %11
  br i1 %26, label %51, label %27

27:                                               ; preds = %23
  %28 = load i16, i16* %1, align 2
  br label %29

29:                                               ; preds = %36, %27
  %30 = phi i16* [ %11, %27 ], [ %37, %36 ]
  %31 = load i16, i16* %30, align 2
  %32 = icmp eq i16 %31, %28
  br i1 %32, label %38, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds i16, i16* %30, i64 1
  %35 = icmp eq i16* %34, %25
  br i1 %35, label %51, label %36

36:                                               ; preds = %33, %48
  %37 = phi i16* [ %34, %33 ], [ %49, %48 ]
  br label %29

38:                                               ; preds = %29, %43
  %39 = phi i16* [ %44, %43 ], [ %30, %29 ]
  %40 = phi i16* [ %41, %43 ], [ %1, %29 ]
  %41 = getelementptr inbounds i16, i16* %40, i64 1
  %42 = icmp eq i16* %41, %13
  br i1 %42, label %51, label %43

43:                                               ; preds = %38
  %44 = getelementptr inbounds i16, i16* %39, i64 1
  %45 = load i16, i16* %44, align 2
  %46 = load i16, i16* %41, align 2
  %47 = icmp eq i16 %45, %46
  br i1 %47, label %38, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds i16, i16* %30, i64 1
  %50 = icmp eq i16* %49, %25
  br i1 %50, label %51, label %36

51:                                               ; preds = %48, %33, %38, %23, %17, %10
  %52 = phi i16* [ %11, %10 ], [ %12, %17 ], [ %12, %23 ], [ %30, %38 ], [ %12, %33 ], [ %12, %48 ]
  %53 = ptrtoint i16* %52 to i64
  %54 = ptrtoint i16* %6 to i64
  %55 = sub i64 %53, %54
  %56 = ashr exact i64 %55, 1
  %57 = add i64 %56, %3
  %58 = icmp ugt i64 %57, %8
  %59 = select i1 %58, i64 -1, i64 %56
  br label %60

60:                                               ; preds = %4, %51
  %61 = phi i64 [ %59, %51 ], [ -1, %4 ]
  ret i64 %61
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE4findEPKDsm(%"class.base::BasicStringPiece.1"*, i16*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = icmp eq i16* %1, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %3
  %7 = load i16, i16* %1, align 2
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %19, label %9

9:                                                ; preds = %6, %9
  %10 = phi i64 [ %12, %9 ], [ 0, %6 ]
  %11 = phi i16* [ %13, %9 ], [ %1, %6 ]
  %12 = add i64 %10, 1
  %13 = getelementptr inbounds i16, i16* %11, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp eq i16 %14, 0
  br i1 %15, label %19, label %9

16:                                               ; preds = %3
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #12
  br label %19

19:                                               ; preds = %9, %6, %16
  %20 = phi i64 [ 0, %16 ], [ 0, %6 ], [ %12, %9 ]
  %21 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %22 = load i16*, i16** %21, align 8
  %23 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = icmp ult i64 %24, %2
  br i1 %25, label %76, label %26

26:                                               ; preds = %19
  %27 = getelementptr inbounds i16, i16* %22, i64 %2
  %28 = getelementptr inbounds i16, i16* %22, i64 %24
  %29 = getelementptr inbounds i16, i16* %1, i64 %20
  %30 = shl nuw i64 %20, 1
  %31 = ashr exact i64 %30, 1
  %32 = icmp eq i64 %20, 0
  br i1 %32, label %67, label %33

33:                                               ; preds = %26
  %34 = ptrtoint i16* %27 to i64
  %35 = ptrtoint i16* %28 to i64
  %36 = sub i64 %35, %34
  %37 = ashr exact i64 %36, 1
  %38 = icmp slt i64 %37, %31
  br i1 %38, label %67, label %39

39:                                               ; preds = %33
  %40 = sub nsw i64 1, %31
  %41 = getelementptr inbounds i16, i16* %28, i64 %40
  %42 = icmp eq i16* %41, %27
  br i1 %42, label %67, label %43

43:                                               ; preds = %39
  %44 = load i16, i16* %1, align 2
  br label %45

45:                                               ; preds = %52, %43
  %46 = phi i16* [ %27, %43 ], [ %53, %52 ]
  %47 = load i16, i16* %46, align 2
  %48 = icmp eq i16 %47, %44
  br i1 %48, label %54, label %49

49:                                               ; preds = %45
  %50 = getelementptr inbounds i16, i16* %46, i64 1
  %51 = icmp eq i16* %50, %41
  br i1 %51, label %67, label %52

52:                                               ; preds = %49, %64
  %53 = phi i16* [ %50, %49 ], [ %65, %64 ]
  br label %45

54:                                               ; preds = %45, %59
  %55 = phi i16* [ %60, %59 ], [ %46, %45 ]
  %56 = phi i16* [ %57, %59 ], [ %1, %45 ]
  %57 = getelementptr inbounds i16, i16* %56, i64 1
  %58 = icmp eq i16* %57, %29
  br i1 %58, label %67, label %59

59:                                               ; preds = %54
  %60 = getelementptr inbounds i16, i16* %55, i64 1
  %61 = load i16, i16* %60, align 2
  %62 = load i16, i16* %57, align 2
  %63 = icmp eq i16 %61, %62
  br i1 %63, label %54, label %64

64:                                               ; preds = %59
  %65 = getelementptr inbounds i16, i16* %46, i64 1
  %66 = icmp eq i16* %65, %41
  br i1 %66, label %67, label %52

67:                                               ; preds = %64, %49, %54, %39, %33, %26
  %68 = phi i16* [ %27, %26 ], [ %28, %33 ], [ %28, %39 ], [ %46, %54 ], [ %28, %49 ], [ %28, %64 ]
  %69 = ptrtoint i16* %68 to i64
  %70 = ptrtoint i16* %22 to i64
  %71 = sub i64 %69, %70
  %72 = ashr exact i64 %71, 1
  %73 = add i64 %72, %20
  %74 = icmp ugt i64 %73, %24
  %75 = select i1 %74, i64 -1, i64 %72
  br label %76

76:                                               ; preds = %19, %67
  %77 = phi i64 [ %75, %67 ], [ -1, %19 ]
  ret i64 %77
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE5rfindES4_m(%"class.base::BasicStringPiece.1"*, i16*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %6 = load i16*, i16** %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, %2
  br i1 %9, label %58, label %10

10:                                               ; preds = %4
  %11 = icmp eq i64 %2, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %10
  %13 = icmp ugt i64 %8, %3
  %14 = select i1 %13, i64 %3, i64 %8
  br label %58

15:                                               ; preds = %10
  %16 = sub i64 %8, %2
  %17 = icmp ugt i64 %16, %3
  %18 = select i1 %17, i64 %3, i64 %16
  %19 = getelementptr inbounds i16, i16* %6, i64 %18
  %20 = getelementptr inbounds i16, i16* %19, i64 %2
  %21 = shl nuw i64 %2, 1
  %22 = ashr exact i64 %21, 1
  %23 = ptrtoint i16* %20 to i64
  %24 = ptrtoint i16* %6 to i64
  %25 = sub i64 %23, %24
  %26 = ashr exact i64 %25, 1
  %27 = icmp slt i64 %26, %22
  br i1 %27, label %58, label %28

28:                                               ; preds = %15
  %29 = getelementptr inbounds i16, i16* %1, i64 %2
  %30 = add nsw i64 %22, -1
  %31 = getelementptr inbounds i16, i16* %6, i64 %30
  %32 = getelementptr inbounds i16, i16* %29, i64 -1
  br label %33

33:                                               ; preds = %41, %28
  %34 = phi i16* [ %20, %28 ], [ %37, %41 ]
  %35 = icmp eq i16* %31, %34
  br i1 %35, label %58, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds i16, i16* %34, i64 -1
  %38 = load i16, i16* %37, align 2
  %39 = load i16, i16* %32, align 2
  %40 = icmp eq i16 %38, %39
  br i1 %40, label %42, label %41

41:                                               ; preds = %46, %36
  br label %33

42:                                               ; preds = %36, %46
  %43 = phi i16* [ %47, %46 ], [ %37, %36 ]
  %44 = phi i16* [ %48, %46 ], [ %32, %36 ]
  %45 = icmp eq i16* %44, %1
  br i1 %45, label %52, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds i16, i16* %43, i64 -1
  %48 = getelementptr inbounds i16, i16* %44, i64 -1
  %49 = load i16, i16* %47, align 2
  %50 = load i16, i16* %48, align 2
  %51 = icmp eq i16 %49, %50
  br i1 %51, label %42, label %41

52:                                               ; preds = %42
  %53 = icmp eq i16* %43, %20
  br i1 %53, label %58, label %54

54:                                               ; preds = %52
  %55 = ptrtoint i16* %43 to i64
  %56 = sub i64 %55, %24
  %57 = ashr exact i64 %56, 1
  br label %58

58:                                               ; preds = %33, %4, %12, %15, %52, %54
  %59 = phi i64 [ %14, %12 ], [ -1, %4 ], [ %57, %54 ], [ -1, %52 ], [ -1, %15 ], [ -1, %33 ]
  ret i64 %59
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN4base8internal5rfindENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES5_m(i16*, i64, i16* readonly, i64, i64) local_unnamed_addr #4 {
  %6 = icmp ult i64 %1, %3
  br i1 %6, label %55, label %7

7:                                                ; preds = %5
  %8 = icmp eq i64 %3, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %7
  %10 = icmp ult i64 %4, %1
  %11 = select i1 %10, i64 %4, i64 %1
  br label %55

12:                                               ; preds = %7
  %13 = sub i64 %1, %3
  %14 = icmp ugt i64 %13, %4
  %15 = select i1 %14, i64 %4, i64 %13
  %16 = getelementptr inbounds i16, i16* %0, i64 %15
  %17 = getelementptr inbounds i16, i16* %16, i64 %3
  %18 = shl nuw i64 %3, 1
  %19 = ashr exact i64 %18, 1
  %20 = ptrtoint i16* %17 to i64
  %21 = ptrtoint i16* %0 to i64
  %22 = sub i64 %20, %21
  %23 = ashr exact i64 %22, 1
  %24 = icmp slt i64 %23, %19
  br i1 %24, label %55, label %25

25:                                               ; preds = %12
  %26 = getelementptr inbounds i16, i16* %2, i64 %3
  %27 = add nsw i64 %19, -1
  %28 = getelementptr inbounds i16, i16* %0, i64 %27
  %29 = getelementptr inbounds i16, i16* %26, i64 -1
  br label %30

30:                                               ; preds = %38, %25
  %31 = phi i16* [ %17, %25 ], [ %34, %38 ]
  %32 = icmp eq i16* %28, %31
  br i1 %32, label %55, label %33

33:                                               ; preds = %30
  %34 = getelementptr inbounds i16, i16* %31, i64 -1
  %35 = load i16, i16* %34, align 2
  %36 = load i16, i16* %29, align 2
  %37 = icmp eq i16 %35, %36
  br i1 %37, label %39, label %38

38:                                               ; preds = %43, %33
  br label %30

39:                                               ; preds = %33, %43
  %40 = phi i16* [ %44, %43 ], [ %34, %33 ]
  %41 = phi i16* [ %45, %43 ], [ %29, %33 ]
  %42 = icmp eq i16* %41, %2
  br i1 %42, label %49, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds i16, i16* %40, i64 -1
  %45 = getelementptr inbounds i16, i16* %41, i64 -1
  %46 = load i16, i16* %44, align 2
  %47 = load i16, i16* %45, align 2
  %48 = icmp eq i16 %46, %47
  br i1 %48, label %39, label %38

49:                                               ; preds = %39
  %50 = icmp eq i16* %40, %17
  br i1 %50, label %55, label %51

51:                                               ; preds = %49
  %52 = ptrtoint i16* %40 to i64
  %53 = sub i64 %52, %21
  %54 = ashr exact i64 %53, 1
  br label %55

55:                                               ; preds = %30, %5, %9, %12, %49, %51
  %56 = phi i64 [ %11, %9 ], [ -1, %5 ], [ %54, %51 ], [ -1, %49 ], [ -1, %12 ], [ -1, %30 ]
  ret i64 %56
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE5rfindEDsm(%"class.base::BasicStringPiece.1"*, i16 zeroext, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %24, label %7

7:                                                ; preds = %3
  %8 = add i64 %5, -1
  %9 = icmp ult i64 %8, %2
  %10 = select i1 %9, i64 %8, i64 %2
  %11 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %12 = load i16*, i16** %11, align 8
  %13 = getelementptr inbounds i16, i16* %12, i64 %10
  %14 = load i16, i16* %13, align 2
  %15 = icmp eq i16 %14, %1
  br i1 %15, label %24, label %16

16:                                               ; preds = %7, %19
  %17 = phi i64 [ %20, %19 ], [ %10, %7 ]
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %16
  %20 = add i64 %17, -1
  %21 = getelementptr inbounds i16, i16* %12, i64 %20
  %22 = load i16, i16* %21, align 2
  %23 = icmp eq i16 %22, %1
  br i1 %23, label %24, label %16

24:                                               ; preds = %16, %19, %7, %3
  %25 = phi i64 [ -1, %3 ], [ %10, %7 ], [ -1, %16 ], [ %20, %19 ]
  ret i64 %25
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE5rfindEPKDsmm(%"class.base::BasicStringPiece.1"*, i16*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %6 = load i16*, i16** %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, %3
  br i1 %9, label %58, label %10

10:                                               ; preds = %4
  %11 = icmp eq i64 %3, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %10
  %13 = icmp ugt i64 %8, %2
  %14 = select i1 %13, i64 %2, i64 %8
  br label %58

15:                                               ; preds = %10
  %16 = sub i64 %8, %3
  %17 = icmp ugt i64 %16, %2
  %18 = select i1 %17, i64 %2, i64 %16
  %19 = getelementptr inbounds i16, i16* %6, i64 %18
  %20 = getelementptr inbounds i16, i16* %19, i64 %3
  %21 = shl nuw i64 %3, 1
  %22 = ashr exact i64 %21, 1
  %23 = ptrtoint i16* %20 to i64
  %24 = ptrtoint i16* %6 to i64
  %25 = sub i64 %23, %24
  %26 = ashr exact i64 %25, 1
  %27 = icmp slt i64 %26, %22
  br i1 %27, label %58, label %28

28:                                               ; preds = %15
  %29 = getelementptr inbounds i16, i16* %1, i64 %3
  %30 = add nsw i64 %22, -1
  %31 = getelementptr inbounds i16, i16* %6, i64 %30
  %32 = getelementptr inbounds i16, i16* %29, i64 -1
  br label %33

33:                                               ; preds = %41, %28
  %34 = phi i16* [ %20, %28 ], [ %37, %41 ]
  %35 = icmp eq i16* %31, %34
  br i1 %35, label %58, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds i16, i16* %34, i64 -1
  %38 = load i16, i16* %37, align 2
  %39 = load i16, i16* %32, align 2
  %40 = icmp eq i16 %38, %39
  br i1 %40, label %42, label %41

41:                                               ; preds = %46, %36
  br label %33

42:                                               ; preds = %36, %46
  %43 = phi i16* [ %47, %46 ], [ %37, %36 ]
  %44 = phi i16* [ %48, %46 ], [ %32, %36 ]
  %45 = icmp eq i16* %44, %1
  br i1 %45, label %52, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds i16, i16* %43, i64 -1
  %48 = getelementptr inbounds i16, i16* %44, i64 -1
  %49 = load i16, i16* %47, align 2
  %50 = load i16, i16* %48, align 2
  %51 = icmp eq i16 %49, %50
  br i1 %51, label %42, label %41

52:                                               ; preds = %42
  %53 = icmp eq i16* %43, %20
  br i1 %53, label %58, label %54

54:                                               ; preds = %52
  %55 = ptrtoint i16* %43 to i64
  %56 = sub i64 %55, %24
  %57 = ashr exact i64 %56, 1
  br label %58

58:                                               ; preds = %33, %4, %12, %15, %52, %54
  %59 = phi i64 [ %14, %12 ], [ -1, %4 ], [ %57, %54 ], [ -1, %52 ], [ -1, %15 ], [ -1, %33 ]
  ret i64 %59
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE5rfindEPKDsm(%"class.base::BasicStringPiece.1"*, i16*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = icmp eq i16* %1, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %3
  %7 = load i16, i16* %1, align 2
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %19, label %9

9:                                                ; preds = %6, %9
  %10 = phi i64 [ %12, %9 ], [ 0, %6 ]
  %11 = phi i16* [ %13, %9 ], [ %1, %6 ]
  %12 = add i64 %10, 1
  %13 = getelementptr inbounds i16, i16* %11, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp eq i16 %14, 0
  br i1 %15, label %22, label %9

16:                                               ; preds = %3
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #12
  br label %19

19:                                               ; preds = %6, %16
  %20 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %21 = load i64, i64* %20, align 8
  br label %30

22:                                               ; preds = %9
  %23 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %24 = load i16*, i16** %23, align 8
  %25 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %26 = load i64, i64* %25, align 8
  %27 = icmp ult i64 %26, %12
  br i1 %27, label %76, label %28

28:                                               ; preds = %22
  %29 = icmp eq i64 %12, 0
  br i1 %29, label %30, label %34

30:                                               ; preds = %19, %28
  %31 = phi i64 [ %21, %19 ], [ %26, %28 ]
  %32 = icmp ugt i64 %31, %2
  %33 = select i1 %32, i64 %2, i64 %31
  br label %76

34:                                               ; preds = %28
  %35 = sub i64 %26, %12
  %36 = icmp ugt i64 %35, %2
  %37 = select i1 %36, i64 %2, i64 %35
  %38 = getelementptr inbounds i16, i16* %24, i64 %37
  %39 = getelementptr inbounds i16, i16* %38, i64 %12
  %40 = shl nuw i64 %12, 1
  %41 = ashr exact i64 %40, 1
  %42 = ptrtoint i16* %39 to i64
  %43 = ptrtoint i16* %24 to i64
  %44 = sub i64 %42, %43
  %45 = ashr exact i64 %44, 1
  %46 = icmp slt i64 %45, %41
  br i1 %46, label %76, label %47

47:                                               ; preds = %34
  %48 = add nsw i64 %41, -1
  %49 = getelementptr inbounds i16, i16* %24, i64 %48
  %50 = getelementptr inbounds i16, i16* %1, i64 %10
  br label %51

51:                                               ; preds = %59, %47
  %52 = phi i16* [ %39, %47 ], [ %55, %59 ]
  %53 = icmp eq i16* %49, %52
  br i1 %53, label %76, label %54

54:                                               ; preds = %51
  %55 = getelementptr inbounds i16, i16* %52, i64 -1
  %56 = load i16, i16* %55, align 2
  %57 = load i16, i16* %50, align 2
  %58 = icmp eq i16 %56, %57
  br i1 %58, label %60, label %59

59:                                               ; preds = %64, %54
  br label %51

60:                                               ; preds = %54, %64
  %61 = phi i16* [ %65, %64 ], [ %55, %54 ]
  %62 = phi i16* [ %66, %64 ], [ %50, %54 ]
  %63 = icmp eq i16* %62, %1
  br i1 %63, label %70, label %64

64:                                               ; preds = %60
  %65 = getelementptr inbounds i16, i16* %61, i64 -1
  %66 = getelementptr inbounds i16, i16* %62, i64 -1
  %67 = load i16, i16* %65, align 2
  %68 = load i16, i16* %66, align 2
  %69 = icmp eq i16 %67, %68
  br i1 %69, label %60, label %59

70:                                               ; preds = %60
  %71 = icmp eq i16* %61, %39
  br i1 %71, label %76, label %72

72:                                               ; preds = %70
  %73 = ptrtoint i16* %61 to i64
  %74 = sub i64 %73, %43
  %75 = ashr exact i64 %74, 1
  br label %76

76:                                               ; preds = %51, %22, %30, %34, %70, %72
  %77 = phi i64 [ %33, %30 ], [ -1, %22 ], [ %75, %72 ], [ -1, %70 ], [ -1, %34 ], [ -1, %51 ]
  ret i64 %77
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE13find_first_ofES4_m(%"class.base::BasicStringPiece.1"*, i16*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.base::BasicStringPiece.1", align 8
  %6 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %7 = load i16*, i16** %6, align 8
  %8 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.base::BasicStringPiece.1"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #12
  %11 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %5, i64 0, i32 0
  store i16* %1, i16** %11, align 8
  %12 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %5, i64 0, i32 1
  store i64 %2, i64* %12, align 8
  %13 = icmp eq i64 %2, 1
  %14 = getelementptr inbounds i16, i16* %7, i64 %3
  %15 = getelementptr inbounds i16, i16* %7, i64 %9
  br i1 %13, label %16, label %28

16:                                               ; preds = %4
  %17 = call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece.1"* nonnull %5, i64 0) #12
  %18 = icmp eq i64 %9, %3
  br i1 %18, label %47, label %19

19:                                               ; preds = %16
  %20 = load i16, i16* %17, align 2
  br label %21

21:                                               ; preds = %25, %19
  %22 = phi i16* [ %14, %19 ], [ %26, %25 ]
  %23 = load i16, i16* %22, align 2
  %24 = icmp eq i16 %23, %20
  br i1 %24, label %47, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds i16, i16* %22, i64 1
  %27 = icmp eq i16* %26, %15
  br i1 %27, label %55, label %21

28:                                               ; preds = %4
  %29 = getelementptr inbounds i16, i16* %1, i64 %2
  %30 = icmp eq i64 %9, %3
  br i1 %30, label %47, label %31

31:                                               ; preds = %28
  %32 = icmp eq i64 %2, 0
  br label %33

33:                                               ; preds = %44, %31
  %34 = phi i16* [ %14, %31 ], [ %45, %44 ]
  br i1 %32, label %44, label %35

35:                                               ; preds = %33
  %36 = load i16, i16* %34, align 2
  br label %39

37:                                               ; preds = %39
  %38 = icmp eq i16* %43, %29
  br i1 %38, label %44, label %39

39:                                               ; preds = %37, %35
  %40 = phi i16* [ %1, %35 ], [ %43, %37 ]
  %41 = load i16, i16* %40, align 2
  %42 = icmp eq i16 %36, %41
  %43 = getelementptr inbounds i16, i16* %40, i64 1
  br i1 %42, label %47, label %37

44:                                               ; preds = %37, %33
  %45 = getelementptr inbounds i16, i16* %34, i64 1
  %46 = icmp eq i16* %45, %15
  br i1 %46, label %55, label %33

47:                                               ; preds = %39, %21, %28, %16
  %48 = phi i16* [ %14, %16 ], [ %14, %28 ], [ %22, %21 ], [ %34, %39 ]
  %49 = icmp eq i16* %48, %15
  br i1 %49, label %55, label %50

50:                                               ; preds = %47
  %51 = ptrtoint i16* %48 to i64
  %52 = ptrtoint i16* %7 to i64
  %53 = sub i64 %51, %52
  %54 = ashr exact i64 %53, 1
  br label %55

55:                                               ; preds = %44, %25, %47, %50
  %56 = phi i64 [ %54, %50 ], [ -1, %47 ], [ -1, %25 ], [ -1, %44 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #12
  ret i64 %56
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4base8internal13find_first_ofENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES5_m(i16*, i64, i16*, i64, i64) local_unnamed_addr #0 {
  %6 = alloca %"class.base::BasicStringPiece.1", align 8
  %7 = bitcast %"class.base::BasicStringPiece.1"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7)
  %8 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %6, i64 0, i32 0
  store i16* %2, i16** %8, align 8
  %9 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %6, i64 0, i32 1
  store i64 %3, i64* %9, align 8
  %10 = icmp eq i64 %3, 1
  %11 = getelementptr inbounds i16, i16* %0, i64 %4
  %12 = getelementptr inbounds i16, i16* %0, i64 %1
  br i1 %10, label %13, label %25

13:                                               ; preds = %5
  %14 = call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece.1"* nonnull %6, i64 0) #12
  %15 = icmp eq i64 %4, %1
  br i1 %15, label %44, label %16

16:                                               ; preds = %13
  %17 = load i16, i16* %14, align 2
  br label %18

18:                                               ; preds = %22, %16
  %19 = phi i16* [ %11, %16 ], [ %23, %22 ]
  %20 = load i16, i16* %19, align 2
  %21 = icmp eq i16 %20, %17
  br i1 %21, label %44, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds i16, i16* %19, i64 1
  %24 = icmp eq i16* %23, %12
  br i1 %24, label %52, label %18

25:                                               ; preds = %5
  %26 = getelementptr inbounds i16, i16* %2, i64 %3
  %27 = icmp eq i64 %4, %1
  br i1 %27, label %44, label %28

28:                                               ; preds = %25
  %29 = icmp eq i64 %3, 0
  br label %30

30:                                               ; preds = %41, %28
  %31 = phi i16* [ %11, %28 ], [ %42, %41 ]
  br i1 %29, label %41, label %32

32:                                               ; preds = %30
  %33 = load i16, i16* %31, align 2
  br label %36

34:                                               ; preds = %36
  %35 = icmp eq i16* %40, %26
  br i1 %35, label %41, label %36

36:                                               ; preds = %34, %32
  %37 = phi i16* [ %2, %32 ], [ %40, %34 ]
  %38 = load i16, i16* %37, align 2
  %39 = icmp eq i16 %33, %38
  %40 = getelementptr inbounds i16, i16* %37, i64 1
  br i1 %39, label %44, label %34

41:                                               ; preds = %34, %30
  %42 = getelementptr inbounds i16, i16* %31, i64 1
  %43 = icmp eq i16* %42, %12
  br i1 %43, label %52, label %30

44:                                               ; preds = %36, %18, %25, %13
  %45 = phi i16* [ %11, %13 ], [ %11, %25 ], [ %19, %18 ], [ %31, %36 ]
  %46 = icmp eq i16* %45, %12
  br i1 %46, label %52, label %47

47:                                               ; preds = %44
  %48 = ptrtoint i16* %45 to i64
  %49 = ptrtoint i16* %0 to i64
  %50 = sub i64 %48, %49
  %51 = ashr exact i64 %50, 1
  br label %52

52:                                               ; preds = %41, %22, %44, %47
  %53 = phi i64 [ %51, %47 ], [ -1, %44 ], [ -1, %22 ], [ -1, %41 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7)
  ret i64 %53
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE13find_first_ofEDsm(%"class.base::BasicStringPiece.1"*, i16 zeroext, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, %2
  br i1 %6, label %7, label %30

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %9 = load i16*, i16** %8, align 8
  %10 = sub i64 %5, %2
  %11 = icmp eq i64 %10, 0
  br i1 %11, label %30, label %12

12:                                               ; preds = %7
  %13 = getelementptr inbounds i16, i16* %9, i64 %2
  br label %14

14:                                               ; preds = %19, %12
  %15 = phi i64 [ %20, %19 ], [ %10, %12 ]
  %16 = phi i16* [ %21, %19 ], [ %13, %12 ]
  %17 = load i16, i16* %16, align 2
  %18 = icmp eq i16 %17, %1
  br i1 %18, label %23, label %19

19:                                               ; preds = %14
  %20 = add i64 %15, -1
  %21 = getelementptr inbounds i16, i16* %16, i64 1
  %22 = icmp eq i64 %20, 0
  br i1 %22, label %30, label %14

23:                                               ; preds = %14
  %24 = icmp eq i16* %16, null
  br i1 %24, label %30, label %25

25:                                               ; preds = %23
  %26 = ptrtoint i16* %16 to i64
  %27 = ptrtoint i16* %9 to i64
  %28 = sub i64 %26, %27
  %29 = ashr exact i64 %28, 1
  br label %30

30:                                               ; preds = %19, %3, %7, %23, %25
  %31 = phi i64 [ -1, %3 ], [ %29, %25 ], [ -1, %23 ], [ -1, %7 ], [ -1, %19 ]
  ret i64 %31
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE13find_first_ofEPKDsmm(%"class.base::BasicStringPiece.1"*, i16*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.base::BasicStringPiece.1", align 8
  %6 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %7 = load i16*, i16** %6, align 8
  %8 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.base::BasicStringPiece.1"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #12
  %11 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %5, i64 0, i32 0
  store i16* %1, i16** %11, align 8
  %12 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %5, i64 0, i32 1
  store i64 %3, i64* %12, align 8
  %13 = icmp eq i64 %3, 1
  %14 = getelementptr inbounds i16, i16* %7, i64 %2
  %15 = getelementptr inbounds i16, i16* %7, i64 %9
  br i1 %13, label %16, label %28

16:                                               ; preds = %4
  %17 = call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece.1"* nonnull %5, i64 0) #12
  %18 = icmp eq i64 %9, %2
  br i1 %18, label %47, label %19

19:                                               ; preds = %16
  %20 = load i16, i16* %17, align 2
  br label %21

21:                                               ; preds = %25, %19
  %22 = phi i16* [ %14, %19 ], [ %26, %25 ]
  %23 = load i16, i16* %22, align 2
  %24 = icmp eq i16 %23, %20
  br i1 %24, label %47, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds i16, i16* %22, i64 1
  %27 = icmp eq i16* %26, %15
  br i1 %27, label %55, label %21

28:                                               ; preds = %4
  %29 = getelementptr inbounds i16, i16* %1, i64 %3
  %30 = icmp eq i64 %9, %2
  br i1 %30, label %47, label %31

31:                                               ; preds = %28
  %32 = icmp eq i64 %3, 0
  br label %33

33:                                               ; preds = %44, %31
  %34 = phi i16* [ %14, %31 ], [ %45, %44 ]
  br i1 %32, label %44, label %35

35:                                               ; preds = %33
  %36 = load i16, i16* %34, align 2
  br label %39

37:                                               ; preds = %39
  %38 = icmp eq i16* %43, %29
  br i1 %38, label %44, label %39

39:                                               ; preds = %37, %35
  %40 = phi i16* [ %1, %35 ], [ %43, %37 ]
  %41 = load i16, i16* %40, align 2
  %42 = icmp eq i16 %36, %41
  %43 = getelementptr inbounds i16, i16* %40, i64 1
  br i1 %42, label %47, label %37

44:                                               ; preds = %37, %33
  %45 = getelementptr inbounds i16, i16* %34, i64 1
  %46 = icmp eq i16* %45, %15
  br i1 %46, label %55, label %33

47:                                               ; preds = %39, %21, %28, %16
  %48 = phi i16* [ %14, %16 ], [ %14, %28 ], [ %22, %21 ], [ %34, %39 ]
  %49 = icmp eq i16* %48, %15
  br i1 %49, label %55, label %50

50:                                               ; preds = %47
  %51 = ptrtoint i16* %48 to i64
  %52 = ptrtoint i16* %7 to i64
  %53 = sub i64 %51, %52
  %54 = ashr exact i64 %53, 1
  br label %55

55:                                               ; preds = %44, %25, %47, %50
  %56 = phi i64 [ %54, %50 ], [ -1, %47 ], [ -1, %25 ], [ -1, %44 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #12
  ret i64 %56
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE13find_first_ofEPKDsm(%"class.base::BasicStringPiece.1"*, i16*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.base::BasicStringPiece.1", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = icmp eq i16* %1, null
  br i1 %6, label %17, label %7

7:                                                ; preds = %3
  %8 = load i16, i16* %1, align 2
  %9 = icmp eq i16 %8, 0
  br i1 %9, label %20, label %10

10:                                               ; preds = %7, %10
  %11 = phi i64 [ %13, %10 ], [ 0, %7 ]
  %12 = phi i16* [ %14, %10 ], [ %1, %7 ]
  %13 = add i64 %11, 1
  %14 = getelementptr inbounds i16, i16* %12, i64 1
  %15 = load i16, i16* %14, align 2
  %16 = icmp eq i16 %15, 0
  br i1 %16, label %20, label %10

17:                                               ; preds = %3
  %18 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %19 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #12
  br label %20

20:                                               ; preds = %10, %7, %17
  %21 = phi i64 [ 0, %17 ], [ 0, %7 ], [ %13, %10 ]
  %22 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %23 = load i16*, i16** %22, align 8
  %24 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = bitcast %"class.base::BasicStringPiece.1"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %26) #12
  %27 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %4, i64 0, i32 0
  store i16* %1, i16** %27, align 8
  %28 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %4, i64 0, i32 1
  store i64 %21, i64* %28, align 8
  %29 = icmp eq i64 %21, 1
  %30 = getelementptr inbounds i16, i16* %23, i64 %2
  %31 = getelementptr inbounds i16, i16* %23, i64 %25
  br i1 %29, label %32, label %44

32:                                               ; preds = %20
  %33 = call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece.1"* nonnull %4, i64 0) #12
  %34 = icmp eq i64 %25, %2
  br i1 %34, label %63, label %35

35:                                               ; preds = %32
  %36 = load i16, i16* %33, align 2
  br label %37

37:                                               ; preds = %41, %35
  %38 = phi i16* [ %30, %35 ], [ %42, %41 ]
  %39 = load i16, i16* %38, align 2
  %40 = icmp eq i16 %39, %36
  br i1 %40, label %63, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds i16, i16* %38, i64 1
  %43 = icmp eq i16* %42, %31
  br i1 %43, label %71, label %37

44:                                               ; preds = %20
  %45 = getelementptr inbounds i16, i16* %1, i64 %21
  %46 = icmp eq i64 %25, %2
  br i1 %46, label %63, label %47

47:                                               ; preds = %44
  %48 = icmp eq i64 %21, 0
  br label %49

49:                                               ; preds = %60, %47
  %50 = phi i16* [ %30, %47 ], [ %61, %60 ]
  br i1 %48, label %60, label %51

51:                                               ; preds = %49
  %52 = load i16, i16* %50, align 2
  br label %55

53:                                               ; preds = %55
  %54 = icmp eq i16* %59, %45
  br i1 %54, label %60, label %55

55:                                               ; preds = %53, %51
  %56 = phi i16* [ %1, %51 ], [ %59, %53 ]
  %57 = load i16, i16* %56, align 2
  %58 = icmp eq i16 %52, %57
  %59 = getelementptr inbounds i16, i16* %56, i64 1
  br i1 %58, label %63, label %53

60:                                               ; preds = %53, %49
  %61 = getelementptr inbounds i16, i16* %50, i64 1
  %62 = icmp eq i16* %61, %31
  br i1 %62, label %71, label %49

63:                                               ; preds = %55, %37, %44, %32
  %64 = phi i16* [ %30, %32 ], [ %30, %44 ], [ %38, %37 ], [ %50, %55 ]
  %65 = icmp eq i16* %64, %31
  br i1 %65, label %71, label %66

66:                                               ; preds = %63
  %67 = ptrtoint i16* %64 to i64
  %68 = ptrtoint i16* %23 to i64
  %69 = sub i64 %67, %68
  %70 = ashr exact i64 %69, 1
  br label %71

71:                                               ; preds = %60, %41, %63, %66
  %72 = phi i64 [ %70, %66 ], [ -1, %63 ], [ -1, %41 ], [ -1, %60 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %26) #12
  ret i64 %72
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE12find_last_ofES4_m(%"class.base::BasicStringPiece.1"*, i16*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %6 = load i16*, i16** %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %31, label %10

10:                                               ; preds = %4
  %11 = add i64 %8, -1
  %12 = icmp ult i64 %11, %3
  %13 = select i1 %12, i64 %11, i64 %3
  %14 = getelementptr inbounds i16, i16* %1, i64 %2
  %15 = icmp eq i64 %2, 0
  br label %16

16:                                               ; preds = %28, %10
  %17 = phi i64 [ %13, %10 ], [ %30, %28 ]
  br i1 %15, label %28, label %18

18:                                               ; preds = %16
  %19 = getelementptr inbounds i16, i16* %6, i64 %17
  %20 = load i16, i16* %19, align 2
  br label %23

21:                                               ; preds = %23
  %22 = icmp eq i16* %27, %14
  br i1 %22, label %28, label %23

23:                                               ; preds = %21, %18
  %24 = phi i16* [ %1, %18 ], [ %27, %21 ]
  %25 = load i16, i16* %24, align 2
  %26 = icmp eq i16 %20, %25
  %27 = getelementptr inbounds i16, i16* %24, i64 1
  br i1 %26, label %31, label %21

28:                                               ; preds = %21, %16
  %29 = icmp eq i64 %17, 0
  %30 = add i64 %17, -1
  br i1 %29, label %31, label %16

31:                                               ; preds = %28, %23, %4
  %32 = phi i64 [ -1, %4 ], [ %17, %23 ], [ -1, %28 ]
  ret i64 %32
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN4base8internal12find_last_ofENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES5_m(i16* nocapture readonly, i64, i16* readonly, i64, i64) local_unnamed_addr #4 {
  %6 = icmp eq i64 %1, 0
  br i1 %6, label %28, label %7

7:                                                ; preds = %5
  %8 = add i64 %1, -1
  %9 = icmp ult i64 %8, %4
  %10 = select i1 %9, i64 %8, i64 %4
  %11 = getelementptr inbounds i16, i16* %2, i64 %3
  %12 = icmp eq i64 %3, 0
  br label %13

13:                                               ; preds = %25, %7
  %14 = phi i64 [ %10, %7 ], [ %27, %25 ]
  br i1 %12, label %25, label %15

15:                                               ; preds = %13
  %16 = getelementptr inbounds i16, i16* %0, i64 %14
  %17 = load i16, i16* %16, align 2
  br label %20

18:                                               ; preds = %20
  %19 = icmp eq i16* %24, %11
  br i1 %19, label %25, label %20

20:                                               ; preds = %18, %15
  %21 = phi i16* [ %2, %15 ], [ %24, %18 ]
  %22 = load i16, i16* %21, align 2
  %23 = icmp eq i16 %17, %22
  %24 = getelementptr inbounds i16, i16* %21, i64 1
  br i1 %23, label %28, label %18

25:                                               ; preds = %18, %13
  %26 = icmp eq i64 %14, 0
  %27 = add i64 %14, -1
  br i1 %26, label %28, label %13

28:                                               ; preds = %25, %20, %5
  %29 = phi i64 [ -1, %5 ], [ %14, %20 ], [ -1, %25 ]
  ret i64 %29
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE12find_last_ofEDsm(%"class.base::BasicStringPiece.1"*, i16 zeroext, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %24, label %7

7:                                                ; preds = %3
  %8 = add i64 %5, -1
  %9 = icmp ult i64 %8, %2
  %10 = select i1 %9, i64 %8, i64 %2
  %11 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %12 = load i16*, i16** %11, align 8
  %13 = getelementptr inbounds i16, i16* %12, i64 %10
  %14 = load i16, i16* %13, align 2
  %15 = icmp eq i16 %14, %1
  br i1 %15, label %24, label %16

16:                                               ; preds = %7, %19
  %17 = phi i64 [ %20, %19 ], [ %10, %7 ]
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %16
  %20 = add i64 %17, -1
  %21 = getelementptr inbounds i16, i16* %12, i64 %20
  %22 = load i16, i16* %21, align 2
  %23 = icmp eq i16 %22, %1
  br i1 %23, label %24, label %16

24:                                               ; preds = %16, %19, %3, %7
  %25 = phi i64 [ -1, %3 ], [ %10, %7 ], [ %20, %19 ], [ -1, %16 ]
  ret i64 %25
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE12find_last_ofEPKDsmm(%"class.base::BasicStringPiece.1"*, i16*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %6 = load i16*, i16** %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %31, label %10

10:                                               ; preds = %4
  %11 = add i64 %8, -1
  %12 = icmp ult i64 %11, %2
  %13 = select i1 %12, i64 %11, i64 %2
  %14 = getelementptr inbounds i16, i16* %1, i64 %3
  %15 = icmp eq i64 %3, 0
  br label %16

16:                                               ; preds = %28, %10
  %17 = phi i64 [ %13, %10 ], [ %30, %28 ]
  br i1 %15, label %28, label %18

18:                                               ; preds = %16
  %19 = getelementptr inbounds i16, i16* %6, i64 %17
  %20 = load i16, i16* %19, align 2
  br label %23

21:                                               ; preds = %23
  %22 = icmp eq i16* %27, %14
  br i1 %22, label %28, label %23

23:                                               ; preds = %21, %18
  %24 = phi i16* [ %1, %18 ], [ %27, %21 ]
  %25 = load i16, i16* %24, align 2
  %26 = icmp eq i16 %20, %25
  %27 = getelementptr inbounds i16, i16* %24, i64 1
  br i1 %26, label %31, label %21

28:                                               ; preds = %21, %16
  %29 = icmp eq i64 %17, 0
  %30 = add i64 %17, -1
  br i1 %29, label %31, label %16

31:                                               ; preds = %28, %23, %4
  %32 = phi i64 [ -1, %4 ], [ %17, %23 ], [ -1, %28 ]
  ret i64 %32
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE12find_last_ofEPKDsm(%"class.base::BasicStringPiece.1"*, i16*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = icmp eq i16* %1, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %3
  %7 = load i16, i16* %1, align 2
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %19, label %9

9:                                                ; preds = %6, %9
  %10 = phi i64 [ %12, %9 ], [ 0, %6 ]
  %11 = phi i16* [ %13, %9 ], [ %1, %6 ]
  %12 = add i64 %10, 1
  %13 = getelementptr inbounds i16, i16* %11, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp eq i16 %14, 0
  br i1 %15, label %19, label %9

16:                                               ; preds = %3
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #12
  br label %19

19:                                               ; preds = %9, %6, %16
  %20 = phi i64 [ 0, %16 ], [ 0, %6 ], [ %12, %9 ]
  %21 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %22 = load i16*, i16** %21, align 8
  %23 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %47, label %26

26:                                               ; preds = %19
  %27 = add i64 %24, -1
  %28 = icmp ult i64 %27, %2
  %29 = select i1 %28, i64 %27, i64 %2
  %30 = getelementptr inbounds i16, i16* %1, i64 %20
  %31 = icmp eq i64 %20, 0
  br label %32

32:                                               ; preds = %44, %26
  %33 = phi i64 [ %29, %26 ], [ %46, %44 ]
  br i1 %31, label %44, label %34

34:                                               ; preds = %32
  %35 = getelementptr inbounds i16, i16* %22, i64 %33
  %36 = load i16, i16* %35, align 2
  br label %39

37:                                               ; preds = %39
  %38 = icmp eq i16* %43, %30
  br i1 %38, label %44, label %39

39:                                               ; preds = %37, %34
  %40 = phi i16* [ %1, %34 ], [ %43, %37 ]
  %41 = load i16, i16* %40, align 2
  %42 = icmp eq i16 %36, %41
  %43 = getelementptr inbounds i16, i16* %40, i64 1
  br i1 %42, label %47, label %37

44:                                               ; preds = %37, %32
  %45 = icmp eq i64 %33, 0
  %46 = add i64 %33, -1
  br i1 %45, label %47, label %32

47:                                               ; preds = %44, %39, %19
  %48 = phi i64 [ -1, %19 ], [ %33, %39 ], [ -1, %44 ]
  ret i64 %48
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE17find_first_not_ofES4_m(%"class.base::BasicStringPiece.1"*, i16*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to %"class.base::BasicStringPiece.1"*
  %7 = bitcast %"class.base::BasicStringPiece.1"* %0 to <2 x i64>*
  %8 = load <2 x i64>, <2 x i64>* %7, align 8
  %9 = bitcast <2 x i64>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #12
  %10 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %6, i64 0, i32 1
  store <2 x i64> %8, <2 x i64>* %5, align 16
  %11 = extractelement <2 x i64> %8, i32 1
  %12 = icmp ugt i64 %11, %3
  br i1 %12, label %13, label %36

13:                                               ; preds = %4
  %14 = getelementptr inbounds i16, i16* %1, i64 %2
  %15 = icmp eq i64 %2, 0
  br label %19

16:                                               ; preds = %32
  %17 = load i64, i64* %10, align 8
  %18 = icmp ult i64 %35, %17
  br i1 %18, label %19, label %36

19:                                               ; preds = %16, %13
  %20 = phi i64 [ %3, %13 ], [ %35, %16 ]
  br i1 %15, label %36, label %21

21:                                               ; preds = %19, %21
  %22 = phi i16* [ %29, %21 ], [ %1, %19 ]
  %23 = phi i8 [ %28, %21 ], [ 0, %19 ]
  %24 = load i16, i16* %22, align 2
  %25 = call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece.1"* nonnull %6, i64 %20) #12
  %26 = load i16, i16* %25, align 2
  %27 = icmp eq i16 %26, %24
  %28 = select i1 %27, i8 1, i8 %23
  %29 = getelementptr inbounds i16, i16* %22, i64 1
  %30 = icmp eq i16* %29, %14
  %31 = or i1 %30, %27
  br i1 %31, label %32, label %21

32:                                               ; preds = %21
  %33 = and i8 %28, 1
  %34 = icmp eq i8 %33, 0
  %35 = add nuw i64 %20, 1
  br i1 %34, label %36, label %16

36:                                               ; preds = %16, %19, %32, %4
  %37 = phi i64 [ -1, %4 ], [ %3, %19 ], [ -1, %16 ], [ %20, %32 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #12
  ret i64 %37
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4base8internal17find_first_not_ofENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES5_m(i16*, i64, i16* readonly, i64, i64) local_unnamed_addr #0 {
  %6 = alloca %"class.base::BasicStringPiece.1", align 8
  %7 = bitcast %"class.base::BasicStringPiece.1"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7)
  %8 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %6, i64 0, i32 0
  store i16* %0, i16** %8, align 8
  %9 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %6, i64 0, i32 1
  store i64 %1, i64* %9, align 8
  %10 = icmp ult i64 %4, %1
  br i1 %10, label %11, label %34

11:                                               ; preds = %5
  %12 = getelementptr inbounds i16, i16* %2, i64 %3
  %13 = icmp eq i64 %3, 0
  br label %17

14:                                               ; preds = %30
  %15 = load i64, i64* %9, align 8
  %16 = icmp ult i64 %33, %15
  br i1 %16, label %17, label %34

17:                                               ; preds = %14, %11
  %18 = phi i64 [ %4, %11 ], [ %33, %14 ]
  br i1 %13, label %34, label %19

19:                                               ; preds = %17, %19
  %20 = phi i16* [ %27, %19 ], [ %2, %17 ]
  %21 = phi i8 [ %26, %19 ], [ 0, %17 ]
  %22 = load i16, i16* %20, align 2
  %23 = call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece.1"* nonnull %6, i64 %18) #12
  %24 = load i16, i16* %23, align 2
  %25 = icmp eq i16 %24, %22
  %26 = select i1 %25, i8 1, i8 %21
  %27 = getelementptr inbounds i16, i16* %20, i64 1
  %28 = icmp eq i16* %27, %12
  %29 = or i1 %28, %25
  br i1 %29, label %30, label %19

30:                                               ; preds = %19
  %31 = and i8 %26, 1
  %32 = icmp eq i8 %31, 0
  %33 = add nuw i64 %18, 1
  br i1 %32, label %34, label %14

34:                                               ; preds = %14, %17, %30, %5
  %35 = phi i64 [ -1, %5 ], [ %18, %30 ], [ -1, %14 ], [ %4, %17 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7)
  ret i64 %35
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE17find_first_not_ofEDsm(%"class.base::BasicStringPiece.1"*, i16 zeroext, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, %2
  br i1 %6, label %7, label %18

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %9 = load i16*, i16** %8, align 8
  br label %10

10:                                               ; preds = %15, %7
  %11 = phi i64 [ %2, %7 ], [ %16, %15 ]
  %12 = getelementptr inbounds i16, i16* %9, i64 %11
  %13 = load i16, i16* %12, align 2
  %14 = icmp eq i16 %13, %1
  br i1 %14, label %15, label %18

15:                                               ; preds = %10
  %16 = add i64 %11, 1
  %17 = icmp eq i64 %16, %5
  br i1 %17, label %18, label %10

18:                                               ; preds = %10, %15, %3
  %19 = phi i64 [ -1, %3 ], [ %11, %10 ], [ -1, %15 ]
  ret i64 %19
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE17find_first_not_ofEPKDsmm(%"class.base::BasicStringPiece.1"*, i16*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to %"class.base::BasicStringPiece.1"*
  %7 = bitcast %"class.base::BasicStringPiece.1"* %0 to <2 x i64>*
  %8 = load <2 x i64>, <2 x i64>* %7, align 8
  %9 = bitcast <2 x i64>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #12
  %10 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %6, i64 0, i32 1
  store <2 x i64> %8, <2 x i64>* %5, align 16
  %11 = extractelement <2 x i64> %8, i32 1
  %12 = icmp ugt i64 %11, %2
  br i1 %12, label %13, label %36

13:                                               ; preds = %4
  %14 = getelementptr inbounds i16, i16* %1, i64 %3
  %15 = icmp eq i64 %3, 0
  br label %19

16:                                               ; preds = %32
  %17 = load i64, i64* %10, align 8
  %18 = icmp ult i64 %35, %17
  br i1 %18, label %19, label %36

19:                                               ; preds = %16, %13
  %20 = phi i64 [ %2, %13 ], [ %35, %16 ]
  br i1 %15, label %36, label %21

21:                                               ; preds = %19, %21
  %22 = phi i16* [ %29, %21 ], [ %1, %19 ]
  %23 = phi i8 [ %28, %21 ], [ 0, %19 ]
  %24 = load i16, i16* %22, align 2
  %25 = call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece.1"* nonnull %6, i64 %20) #12
  %26 = load i16, i16* %25, align 2
  %27 = icmp eq i16 %26, %24
  %28 = select i1 %27, i8 1, i8 %23
  %29 = getelementptr inbounds i16, i16* %22, i64 1
  %30 = icmp eq i16* %29, %14
  %31 = or i1 %30, %27
  br i1 %31, label %32, label %21

32:                                               ; preds = %21
  %33 = and i8 %28, 1
  %34 = icmp eq i8 %33, 0
  %35 = add nuw i64 %20, 1
  br i1 %34, label %36, label %16

36:                                               ; preds = %16, %19, %32, %4
  %37 = phi i64 [ -1, %4 ], [ %20, %32 ], [ -1, %16 ], [ %2, %19 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #12
  ret i64 %37
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE17find_first_not_ofEPKDsm(%"class.base::BasicStringPiece.1"*, i16*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca <2 x i64>, align 16
  %5 = bitcast <2 x i64>* %4 to %"class.base::BasicStringPiece.1"*
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = icmp eq i16* %1, null
  br i1 %7, label %18, label %8

8:                                                ; preds = %3
  %9 = load i16, i16* %1, align 2
  %10 = icmp eq i16 %9, 0
  br i1 %10, label %21, label %11

11:                                               ; preds = %8, %11
  %12 = phi i64 [ %14, %11 ], [ 0, %8 ]
  %13 = phi i16* [ %15, %11 ], [ %1, %8 ]
  %14 = add i64 %12, 1
  %15 = getelementptr inbounds i16, i16* %13, i64 1
  %16 = load i16, i16* %15, align 2
  %17 = icmp eq i16 %16, 0
  br i1 %17, label %21, label %11

18:                                               ; preds = %3
  %19 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %20 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #12
  br label %21

21:                                               ; preds = %11, %8, %18
  %22 = phi i64 [ 0, %18 ], [ 0, %8 ], [ %14, %11 ]
  %23 = bitcast %"class.base::BasicStringPiece.1"* %0 to <2 x i64>*
  %24 = load <2 x i64>, <2 x i64>* %23, align 8
  %25 = bitcast <2 x i64>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %25) #12
  %26 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %5, i64 0, i32 1
  store <2 x i64> %24, <2 x i64>* %4, align 16
  %27 = extractelement <2 x i64> %24, i32 1
  %28 = icmp ugt i64 %27, %2
  br i1 %28, label %29, label %52

29:                                               ; preds = %21
  %30 = getelementptr inbounds i16, i16* %1, i64 %22
  %31 = icmp eq i64 %22, 0
  br label %35

32:                                               ; preds = %48
  %33 = load i64, i64* %26, align 8
  %34 = icmp ult i64 %51, %33
  br i1 %34, label %35, label %52

35:                                               ; preds = %32, %29
  %36 = phi i64 [ %2, %29 ], [ %51, %32 ]
  br i1 %31, label %52, label %37

37:                                               ; preds = %35, %37
  %38 = phi i16* [ %45, %37 ], [ %1, %35 ]
  %39 = phi i8 [ %44, %37 ], [ 0, %35 ]
  %40 = load i16, i16* %38, align 2
  %41 = call dereferenceable(2) i16* @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE2atEm(%"class.base::BasicStringPiece.1"* nonnull %5, i64 %36) #12
  %42 = load i16, i16* %41, align 2
  %43 = icmp eq i16 %42, %40
  %44 = select i1 %43, i8 1, i8 %39
  %45 = getelementptr inbounds i16, i16* %38, i64 1
  %46 = icmp eq i16* %45, %30
  %47 = or i1 %46, %43
  br i1 %47, label %48, label %37

48:                                               ; preds = %37
  %49 = and i8 %44, 1
  %50 = icmp eq i8 %49, 0
  %51 = add nuw i64 %36, 1
  br i1 %50, label %52, label %32

52:                                               ; preds = %32, %35, %48, %21
  %53 = phi i64 [ -1, %21 ], [ %36, %48 ], [ -1, %32 ], [ %2, %35 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %25) #12
  ret i64 %53
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE16find_last_not_ofES4_m(%"class.base::BasicStringPiece.1"*, i16*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %6 = load i16*, i16** %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %40, label %10

10:                                               ; preds = %4
  %11 = add i64 %8, -1
  %12 = icmp ult i64 %11, %3
  %13 = select i1 %12, i64 %11, i64 %3
  %14 = getelementptr inbounds i16, i16* %1, i64 %2
  %15 = icmp eq i64 %2, 0
  br i1 %15, label %40, label %16

16:                                               ; preds = %10, %37
  %17 = phi i64 [ %36, %37 ], [ undef, %10 ]
  %18 = phi i64 [ %38, %37 ], [ %13, %10 ]
  %19 = getelementptr inbounds i16, i16* %6, i64 %18
  %20 = load i16, i16* %19, align 2
  br label %21

21:                                               ; preds = %21, %16
  %22 = phi i16* [ %1, %16 ], [ %27, %21 ]
  %23 = phi i8 [ 0, %16 ], [ %26, %21 ]
  %24 = load i16, i16* %22, align 2
  %25 = icmp eq i16 %20, %24
  %26 = select i1 %25, i8 1, i8 %23
  %27 = getelementptr inbounds i16, i16* %22, i64 1
  %28 = icmp eq i16* %27, %14
  %29 = or i1 %28, %25
  br i1 %29, label %30, label %21

30:                                               ; preds = %21
  %31 = and i8 %26, 1
  %32 = icmp eq i8 %31, 0
  %33 = icmp eq i64 %18, 0
  %34 = select i1 %33, i32 2, i32 0
  %35 = select i1 %32, i32 1, i32 %34
  %36 = select i1 %32, i64 %18, i64 %17
  switch i32 %35, label %40 [
    i32 0, label %37
    i32 1, label %39
  ]

37:                                               ; preds = %30
  %38 = add i64 %18, -1
  br label %16

39:                                               ; preds = %30
  br label %40

40:                                               ; preds = %30, %39, %4, %10
  %41 = phi i64 [ -1, %4 ], [ %13, %10 ], [ %36, %39 ], [ -1, %30 ]
  ret i64 %41
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN4base8internal16find_last_not_ofENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEES5_m(i16* nocapture readonly, i64, i16* readonly, i64, i64) local_unnamed_addr #4 {
  %6 = icmp eq i64 %1, 0
  br i1 %6, label %37, label %7

7:                                                ; preds = %5
  %8 = add i64 %1, -1
  %9 = icmp ult i64 %8, %4
  %10 = select i1 %9, i64 %8, i64 %4
  %11 = getelementptr inbounds i16, i16* %2, i64 %3
  %12 = icmp eq i64 %3, 0
  br i1 %12, label %37, label %13

13:                                               ; preds = %7, %34
  %14 = phi i64 [ %33, %34 ], [ undef, %7 ]
  %15 = phi i64 [ %35, %34 ], [ %10, %7 ]
  %16 = getelementptr inbounds i16, i16* %0, i64 %15
  %17 = load i16, i16* %16, align 2
  br label %18

18:                                               ; preds = %18, %13
  %19 = phi i16* [ %2, %13 ], [ %24, %18 ]
  %20 = phi i8 [ 0, %13 ], [ %23, %18 ]
  %21 = load i16, i16* %19, align 2
  %22 = icmp eq i16 %17, %21
  %23 = select i1 %22, i8 1, i8 %20
  %24 = getelementptr inbounds i16, i16* %19, i64 1
  %25 = icmp eq i16* %24, %11
  %26 = or i1 %25, %22
  br i1 %26, label %27, label %18

27:                                               ; preds = %18
  %28 = and i8 %23, 1
  %29 = icmp eq i8 %28, 0
  %30 = icmp eq i64 %15, 0
  %31 = select i1 %30, i32 2, i32 0
  %32 = select i1 %29, i32 1, i32 %31
  %33 = select i1 %29, i64 %15, i64 %14
  switch i32 %32, label %36 [
    i32 0, label %34
    i32 1, label %37
  ]

34:                                               ; preds = %27
  %35 = add i64 %15, -1
  br label %13

36:                                               ; preds = %27
  br label %37

37:                                               ; preds = %27, %36, %7, %5
  %38 = phi i64 [ -1, %5 ], [ %10, %7 ], [ -1, %36 ], [ %33, %27 ]
  ret i64 %38
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE16find_last_not_ofEDsm(%"class.base::BasicStringPiece.1"*, i16 zeroext, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %24, label %7

7:                                                ; preds = %3
  %8 = add i64 %5, -1
  %9 = icmp ult i64 %8, %2
  %10 = select i1 %9, i64 %8, i64 %2
  %11 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %12 = load i16*, i16** %11, align 8
  %13 = getelementptr inbounds i16, i16* %12, i64 %10
  %14 = load i16, i16* %13, align 2
  %15 = icmp eq i16 %14, %1
  br i1 %15, label %16, label %24

16:                                               ; preds = %7, %19
  %17 = phi i64 [ %20, %19 ], [ %10, %7 ]
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %16
  %20 = add i64 %17, -1
  %21 = getelementptr inbounds i16, i16* %12, i64 %20
  %22 = load i16, i16* %21, align 2
  %23 = icmp eq i16 %22, %1
  br i1 %23, label %16, label %24

24:                                               ; preds = %16, %19, %7, %3
  %25 = phi i64 [ -1, %3 ], [ %10, %7 ], [ -1, %16 ], [ %20, %19 ]
  ret i64 %25
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE16find_last_not_ofEPKDsmm(%"class.base::BasicStringPiece.1"*, i16*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %6 = load i16*, i16** %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %40, label %10

10:                                               ; preds = %4
  %11 = add i64 %8, -1
  %12 = icmp ult i64 %11, %2
  %13 = select i1 %12, i64 %11, i64 %2
  %14 = getelementptr inbounds i16, i16* %1, i64 %3
  %15 = icmp eq i64 %3, 0
  br i1 %15, label %40, label %16

16:                                               ; preds = %10, %37
  %17 = phi i64 [ %36, %37 ], [ undef, %10 ]
  %18 = phi i64 [ %38, %37 ], [ %13, %10 ]
  %19 = getelementptr inbounds i16, i16* %6, i64 %18
  %20 = load i16, i16* %19, align 2
  br label %21

21:                                               ; preds = %21, %16
  %22 = phi i16* [ %1, %16 ], [ %27, %21 ]
  %23 = phi i8 [ 0, %16 ], [ %26, %21 ]
  %24 = load i16, i16* %22, align 2
  %25 = icmp eq i16 %20, %24
  %26 = select i1 %25, i8 1, i8 %23
  %27 = getelementptr inbounds i16, i16* %22, i64 1
  %28 = icmp eq i16* %27, %14
  %29 = or i1 %28, %25
  br i1 %29, label %30, label %21

30:                                               ; preds = %21
  %31 = and i8 %26, 1
  %32 = icmp eq i8 %31, 0
  %33 = icmp eq i64 %18, 0
  %34 = select i1 %33, i32 2, i32 0
  %35 = select i1 %32, i32 1, i32 %34
  %36 = select i1 %32, i64 %18, i64 %17
  switch i32 %35, label %39 [
    i32 0, label %37
    i32 1, label %40
  ]

37:                                               ; preds = %30
  %38 = add i64 %18, -1
  br label %16

39:                                               ; preds = %30
  br label %40

40:                                               ; preds = %30, %39, %4, %10
  %41 = phi i64 [ -1, %4 ], [ %13, %10 ], [ -1, %39 ], [ %36, %30 ]
  ret i64 %41
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIDsNSt3__111char_traitsIDsEEE16find_last_not_ofEPKDsm(%"class.base::BasicStringPiece.1"*, i16*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = icmp eq i16* %1, null
  br i1 %5, label %16, label %6

6:                                                ; preds = %3
  %7 = load i16, i16* %1, align 2
  %8 = icmp eq i16 %7, 0
  br i1 %8, label %19, label %9

9:                                                ; preds = %6, %9
  %10 = phi i64 [ %12, %9 ], [ 0, %6 ]
  %11 = phi i16* [ %13, %9 ], [ %1, %6 ]
  %12 = add i64 %10, 1
  %13 = getelementptr inbounds i16, i16* %11, i64 1
  %14 = load i16, i16* %13, align 2
  %15 = icmp eq i16 %14, 0
  br i1 %15, label %19, label %9

16:                                               ; preds = %3
  %17 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %18 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #12
  br label %19

19:                                               ; preds = %9, %6, %16
  %20 = phi i64 [ 0, %16 ], [ 0, %6 ], [ %12, %9 ]
  %21 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 0
  %22 = load i16*, i16** %21, align 8
  %23 = getelementptr inbounds %"class.base::BasicStringPiece.1", %"class.base::BasicStringPiece.1"* %0, i64 0, i32 1
  %24 = load i64, i64* %23, align 8
  %25 = icmp eq i64 %24, 0
  br i1 %25, label %56, label %26

26:                                               ; preds = %19
  %27 = add i64 %24, -1
  %28 = icmp ult i64 %27, %2
  %29 = select i1 %28, i64 %27, i64 %2
  %30 = getelementptr inbounds i16, i16* %1, i64 %20
  %31 = icmp eq i64 %20, 0
  br i1 %31, label %56, label %32

32:                                               ; preds = %26, %53
  %33 = phi i64 [ %52, %53 ], [ undef, %26 ]
  %34 = phi i64 [ %54, %53 ], [ %29, %26 ]
  %35 = getelementptr inbounds i16, i16* %22, i64 %34
  %36 = load i16, i16* %35, align 2
  br label %37

37:                                               ; preds = %37, %32
  %38 = phi i16* [ %1, %32 ], [ %43, %37 ]
  %39 = phi i8 [ 0, %32 ], [ %42, %37 ]
  %40 = load i16, i16* %38, align 2
  %41 = icmp eq i16 %36, %40
  %42 = select i1 %41, i8 1, i8 %39
  %43 = getelementptr inbounds i16, i16* %38, i64 1
  %44 = icmp eq i16* %43, %30
  %45 = or i1 %44, %41
  br i1 %45, label %46, label %37

46:                                               ; preds = %37
  %47 = and i8 %42, 1
  %48 = icmp eq i8 %47, 0
  %49 = icmp eq i64 %34, 0
  %50 = select i1 %49, i32 2, i32 0
  %51 = select i1 %48, i32 1, i32 %50
  %52 = select i1 %48, i64 %34, i64 %33
  switch i32 %51, label %55 [
    i32 0, label %53
    i32 1, label %56
  ]

53:                                               ; preds = %46
  %54 = add i64 %34, -1
  br label %32

55:                                               ; preds = %46
  br label %56

56:                                               ; preds = %46, %55, %19, %26
  %57 = phi i64 [ -1, %19 ], [ %29, %26 ], [ -1, %55 ], [ %52, %46 ]
  ret i64 %57
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEEC2Ev(%"class.base::BasicStringPiece.13"*) unnamed_addr #0 comdat($_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEEC5Ev) align 2 {
  %2 = bitcast %"class.base::BasicStringPiece.13"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 16, i1 false)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEEC2EPKwm(%"class.base::BasicStringPiece.13"*, i32*, i64) unnamed_addr #0 comdat($_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEEC5EPKwm) align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  store i32* %1, i32** %4, align 8
  %5 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  store i64 %2, i64* %5, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEEC2EPKw(%"class.base::BasicStringPiece.13"*, i32*) unnamed_addr #0 comdat($_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEEC5EPKw) align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  store i32* %1, i32** %4, align 8
  %5 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %6 = icmp eq i32* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %2
  %8 = tail call i64 @wcslen(i32* nonnull %1) #12
  store i64 %8, i64* %5, align 8
  br label %12

9:                                                ; preds = %2
  store i64 0, i64* %5, align 8
  %10 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %11 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #12
  br label %12

12:                                               ; preds = %7, %9
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEEC2ERKNS1_12basic_stringIwS3_NS1_9allocatorIwEEEE(%"class.base::BasicStringPiece.13"*, %"class.std::__1::basic_string.14"* dereferenceable(24)) unnamed_addr #0 comdat($_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEEC5ERKNS1_12basic_stringIwS3_NS1_9allocatorIwEEEE) align 2 {
  %3 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %4 = bitcast %"class.std::__1::basic_string.14"* %1 to %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__short"*
  %5 = getelementptr inbounds %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__short", %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__short"* %4, i64 0, i32 1, i32 1
  %6 = load i8, i8* %5, align 1
  %7 = icmp slt i8 %6, 0
  %8 = getelementptr inbounds %"class.std::__1::basic_string.14", %"class.std::__1::basic_string.14"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %9 = load i32*, i32** %8, align 8
  %10 = bitcast %"class.std::__1::basic_string.14"* %1 to i32*
  %11 = select i1 %7, i32* %9, i32* %10
  store i32* %11, i32** %3, align 8
  %12 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %13 = load i8, i8* %5, align 1
  %14 = icmp slt i8 %13, 0
  %15 = getelementptr inbounds %"class.std::__1::basic_string.14", %"class.std::__1::basic_string.14"* %1, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = zext i8 %13 to i64
  %18 = select i1 %14, i64 %16, i64 %17
  store i64 %18, i64* %12, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEEcvNS1_12basic_stringIwS3_NS1_9allocatorIwEEEEEv(%"class.std::__1::basic_string.14"* noalias sret, %"class.base::BasicStringPiece.13"*) local_unnamed_addr #0 comdat align 2 {
  %3 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %1, i64 0, i32 0
  %4 = load i32*, i32** %3, align 8
  %5 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %1, i64 0, i32 1
  %6 = load i64, i64* %5, align 8
  %7 = icmp ugt i64 %6, 4611686018427387887
  br i1 %7, label %8, label %10

8:                                                ; preds = %2
  %9 = bitcast %"class.std::__1::basic_string.14"* %0 to %"class.std::__1::__basic_string_common"*
  tail call void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"* %9) #13
  unreachable

10:                                               ; preds = %2
  %11 = icmp ult i64 %6, 5
  br i1 %11, label %25, label %12

12:                                               ; preds = %10
  %13 = add nuw nsw i64 %6, 4
  %14 = and i64 %13, -4
  %15 = icmp ugt i64 %14, 4611686018427387903
  br i1 %15, label %16, label %17

16:                                               ; preds = %12
  tail call void @abort() #13
  unreachable

17:                                               ; preds = %12
  %18 = shl i64 %14, 2
  %19 = tail call i8* @_Znwm(i64 %18) #14
  %20 = bitcast i8* %19 to i32*
  %21 = bitcast %"class.std::__1::basic_string.14"* %0 to i8**
  store i8* %19, i8** %21, align 8
  %22 = or i64 %14, -9223372036854775808
  %23 = getelementptr inbounds %"class.std::__1::basic_string.14", %"class.std::__1::basic_string.14"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  store i64 %22, i64* %23, align 8
  %24 = getelementptr inbounds %"class.std::__1::basic_string.14", %"class.std::__1::basic_string.14"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  store i64 %6, i64* %24, align 8
  br label %31

25:                                               ; preds = %10
  %26 = trunc i64 %6 to i8
  %27 = bitcast %"class.std::__1::basic_string.14"* %0 to %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__short"*
  %28 = getelementptr inbounds %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__short", %"struct.std::__1::basic_string<wchar_t, std::__1::char_traits<wchar_t>, std::__1::allocator<wchar_t> >::__short"* %27, i64 0, i32 1, i32 1
  store i8 %26, i8* %28, align 1
  %29 = bitcast %"class.std::__1::basic_string.14"* %0 to i32*
  %30 = icmp eq i64 %6, 0
  br i1 %30, label %34, label %31

31:                                               ; preds = %25, %17
  %32 = phi i32* [ %20, %17 ], [ %29, %25 ]
  %33 = tail call i32* @wmemcpy(i32* %32, i32* %4, i64 %6) #12
  br label %34

34:                                               ; preds = %25, %31
  %35 = phi i32* [ %29, %25 ], [ %32, %31 ]
  %36 = getelementptr inbounds i32, i32* %35, i64 %6
  store i32 0, i32* %36, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32* @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4dataEv(%"class.base::BasicStringPiece.13"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %3 = load i32*, i32** %2, align 8
  ret i32* %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4sizeEv(%"class.base::BasicStringPiece.13"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32* @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE5beginEv(%"class.base::BasicStringPiece.13"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %3 = load i32*, i32** %2, align 8
  ret i32* %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32* @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE6cbeginEv(%"class.base::BasicStringPiece.13"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %3 = load i32*, i32** %2, align 8
  ret i32* %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32* @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE3endEv(%"class.base::BasicStringPiece.13"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i32, i32* %3, i64 %5
  ret i32* %6
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32* @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4cendEv(%"class.base::BasicStringPiece.13"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i32, i32* %3, i64 %5
  ret i32* %6
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden { i32*, i32* } @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE6rbeginEv(%"class.base::BasicStringPiece.13"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i32, i32* %3, i64 %5
  %7 = insertvalue { i32*, i32* } undef, i32* %6, 0
  %8 = insertvalue { i32*, i32* } %7, i32* %6, 1
  ret { i32*, i32* } %8
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden { i32*, i32* } @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE7crbeginEv(%"class.base::BasicStringPiece.13"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = getelementptr inbounds i32, i32* %3, i64 %5
  %7 = insertvalue { i32*, i32* } undef, i32* %6, 0
  %8 = insertvalue { i32*, i32* } %7, i32* %6, 1
  ret { i32*, i32* } %8
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden { i32*, i32* } @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4rendEv(%"class.base::BasicStringPiece.13"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = insertvalue { i32*, i32* } undef, i32* %3, 0
  %5 = insertvalue { i32*, i32* } %4, i32* %3, 1
  ret { i32*, i32* } %5
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden { i32*, i32* } @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE5crendEv(%"class.base::BasicStringPiece.13"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %3 = load i32*, i32** %2, align 8
  %4 = insertvalue { i32*, i32* } undef, i32* %3, 0
  %5 = insertvalue { i32*, i32* } %4, i32* %3, 1
  ret { i32*, i32* } %5
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden dereferenceable(4) i32* @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEEixEm(%"class.base::BasicStringPiece.13"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = tail call dereferenceable(4) i32* @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE2atEm(%"class.base::BasicStringPiece.13"* %0, i64 %1)
  ret i32* %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden dereferenceable(4) i32* @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE2atEm(%"class.base::BasicStringPiece.13"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ugt i64 %9, %1
  br i1 %11, label %12, label %13

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #12
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %9) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i8* %14, i8* %15) #12
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 171, %"class.logging::CheckOpResult"* nonnull %4) #12
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #12
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  %23 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %24 = load i32*, i32** %23, align 8
  %25 = getelementptr inbounds i32, i32* %24, i64 %1
  ret i32* %25
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden dereferenceable(4) i32* @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE5frontEv(%"class.base::BasicStringPiece.13"*) local_unnamed_addr #0 comdat align 2 {
  %2 = tail call dereferenceable(4) i32* @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE2atEm(%"class.base::BasicStringPiece.13"* %0, i64 0) #12
  ret i32* %2
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden dereferenceable(4) i32* @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4backEv(%"class.base::BasicStringPiece.13"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = add i64 %3, -1
  %5 = tail call dereferenceable(4) i32* @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE2atEm(%"class.base::BasicStringPiece.13"* %0, i64 %4) #12
  ret i32* %5
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE6lengthEv(%"class.base::BasicStringPiece.13"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  ret i64 %3
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE8max_sizeEv(%"class.base::BasicStringPiece.13"*) local_unnamed_addr #0 comdat align 2 {
  ret i64 4611686018427387903
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden zeroext i1 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE5emptyEv(%"class.base::BasicStringPiece.13"*) local_unnamed_addr #0 comdat align 2 {
  %2 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %3 = load i64, i64* %2, align 8
  %4 = icmp eq i64 %3, 0
  ret i1 %4
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEE13remove_prefixEm(%"class.base::BasicStringPiece.13"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ult i64 %9, %1
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #12
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %9) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), i8* %14, i8* %15) #12
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 194, %"class.logging::CheckOpResult"* nonnull %4) #12
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #12
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  %23 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %24 = load i32*, i32** %23, align 8
  %25 = getelementptr inbounds i32, i32* %24, i64 %1
  store i32* %25, i32** %23, align 8
  %26 = load i64, i64* %8, align 8
  %27 = sub i64 %26, %1
  store i64 %27, i64* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEE13remove_suffixEm(%"class.base::BasicStringPiece.13"*, i64) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckOpResult", align 8
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #12
  %7 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %7, align 8
  %8 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.logging::CheckOpResult"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10)
  %11 = icmp ult i64 %9, %1
  br i1 %11, label %13, label %12

12:                                               ; preds = %2
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* null, i8** %7, align 8
  br label %22

13:                                               ; preds = %2
  %14 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #12
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %9) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %3, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), i8* %14, i8* %15) #12
  %16 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %3, i64 0, i32 0
  %17 = load i8*, i8** %16, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10)
  store i8* %17, i8** %7, align 8
  %18 = icmp eq i8* %17, null
  br i1 %18, label %22, label %19

19:                                               ; preds = %13
  %20 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 201, %"class.logging::CheckOpResult"* nonnull %4) #12
  %21 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #12
  br label %22

22:                                               ; preds = %12, %13, %19
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #12
  %23 = load i64, i64* %8, align 8
  %24 = sub i64 %23, %1
  store i64 %24, i64* %8, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden void @_ZN4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4swapERS4_(%"class.base::BasicStringPiece.13"*, %"class.base::BasicStringPiece.13"* dereferenceable(16)) local_unnamed_addr #0 comdat align 2 {
  %3 = bitcast %"class.base::BasicStringPiece.13"* %0 to i64*
  %4 = load i64, i64* %3, align 8
  %5 = bitcast %"class.base::BasicStringPiece.13"* %1 to i64*
  %6 = load i64, i64* %5, align 8
  store i64 %6, i64* %3, align 8
  store i64 %4, i64* %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %1, i64 0, i32 1
  %10 = load i64, i64* %9, align 8
  store i64 %10, i64* %7, align 8
  store i64 %8, i64* %9, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4copyEPwmm(%"class.base::BasicStringPiece.13"*, i32*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckOpResult", align 8
  %7 = alloca %"class.logging::CheckError", align 8
  %8 = bitcast %"class.logging::CheckOpResult"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #12
  %9 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %6, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %9, align 8
  %10 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %11 = load i64, i64* %10, align 8
  %12 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %12)
  %13 = icmp ult i64 %11, %3
  br i1 %13, label %15, label %14

14:                                               ; preds = %4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store i8* null, i8** %9, align 8
  br label %24

15:                                               ; preds = %4
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %3) #12
  %17 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %11) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %5, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i8* %16, i8* %17) #12
  %18 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  %19 = load i8*, i8** %18, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %12)
  store i8* %19, i8** %9, align 8
  %20 = icmp eq i8* %19, null
  br i1 %20, label %24, label %21

21:                                               ; preds = %15
  %22 = bitcast %"class.logging::CheckError"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %7, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 218, %"class.logging::CheckOpResult"* nonnull %6) #12
  %23 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %7) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %7) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #12
  br label %24

24:                                               ; preds = %14, %15, %21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #12
  %25 = load i64, i64* %10, align 8
  %26 = sub i64 %25, %3
  %27 = icmp ult i64 %26, %2
  %28 = select i1 %27, i64 %26, i64 %2
  %29 = icmp eq i64 %28, 0
  br i1 %29, label %35, label %30

30:                                               ; preds = %24
  %31 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %32 = load i32*, i32** %31, align 8
  %33 = getelementptr inbounds i32, i32* %32, i64 %3
  %34 = call i32* @wmemcpy(i32* %1, i32* %33, i64 %28) #12
  br label %35

35:                                               ; preds = %24, %30
  ret i64 %28
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden { i32*, i64 } @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE6substrEmm(%"class.base::BasicStringPiece.13"*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckOpResult", align 8
  %5 = alloca %"class.logging::CheckOpResult", align 8
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = bitcast %"class.logging::CheckOpResult"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #12
  %8 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %5, i64 0, i32 0
  store i8* inttoptr (i64 -6148914691236517206 to i8*), i8** %8, align 8
  %9 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %10 = load i64, i64* %9, align 8
  %11 = bitcast %"class.logging::CheckOpResult"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11)
  %12 = icmp ult i64 %10, %1
  br i1 %12, label %14, label %13

13:                                               ; preds = %3
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* null, i8** %8, align 8
  br label %23

14:                                               ; preds = %3
  %15 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %1) #12
  %16 = tail call i8* @_ZN7logging15CheckOpValueStrEm(i64 %10) #12
  call void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"* nonnull %4, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0), i8* %15, i8* %16) #12
  %17 = getelementptr inbounds %"class.logging::CheckOpResult", %"class.logging::CheckOpResult"* %4, i64 0, i32 0
  %18 = load i8*, i8** %17, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11)
  store i8* %18, i8** %8, align 8
  %19 = icmp eq i8* %18, null
  br i1 %19, label %23, label %20

20:                                               ; preds = %14
  %21 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %21) #12
  call void @_ZN7logging10CheckError7CheckOpEPKciPNS_13CheckOpResultE(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 226, %"class.logging::CheckOpResult"* nonnull %5) #12
  %22 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %21) #12
  br label %23

23:                                               ; preds = %13, %14, %20
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #12
  %24 = load i64, i64* %9, align 8
  %25 = sub i64 %24, %1
  %26 = icmp ult i64 %25, %2
  %27 = select i1 %26, i64 %25, i64 %2
  %28 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %29 = load i32*, i32** %28, align 8
  %30 = getelementptr inbounds i32, i32* %29, i64 %1
  %31 = insertvalue { i32*, i64 } undef, i32* %30, 0
  %32 = insertvalue { i32*, i64 } %31, i64 %27, 1
  ret { i32*, i64 } %32
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE7compareES4_(%"class.base::BasicStringPiece.13"*, i32*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, %2
  %7 = select i1 %6, i64 %2, i64 %5
  %8 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %9 = load i32*, i32** %8, align 8
  %10 = tail call i32 @wmemcmp(i32* %9, i32* %1, i64 %7) #12
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %18

12:                                               ; preds = %3
  %13 = load i64, i64* %4, align 8
  %14 = icmp eq i64 %13, %2
  br i1 %14, label %18, label %15

15:                                               ; preds = %12
  %16 = icmp ult i64 %13, %2
  %17 = select i1 %16, i32 -1, i32 1
  br label %18

18:                                               ; preds = %12, %3, %15
  %19 = phi i32 [ %17, %15 ], [ %10, %3 ], [ 0, %12 ]
  ret i32 %19
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE7compareEmmS4_(%"class.base::BasicStringPiece.13"*, i64, i64, i32*, i64) local_unnamed_addr #0 comdat align 2 {
  %6 = tail call { i32*, i64 } @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE6substrEmm(%"class.base::BasicStringPiece.13"* %0, i64 %1, i64 %2)
  %7 = extractvalue { i32*, i64 } %6, 0
  %8 = extractvalue { i32*, i64 } %6, 1
  %9 = icmp ugt i64 %8, %4
  %10 = select i1 %9, i64 %4, i64 %8
  %11 = tail call i32 @wmemcmp(i32* %7, i32* %3, i64 %10) #12
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %18

13:                                               ; preds = %5
  %14 = icmp eq i64 %8, %4
  br i1 %14, label %18, label %15

15:                                               ; preds = %13
  %16 = icmp ult i64 %8, %4
  %17 = select i1 %16, i32 -1, i32 1
  br label %18

18:                                               ; preds = %5, %13, %15
  %19 = phi i32 [ %17, %15 ], [ %11, %5 ], [ 0, %13 ]
  ret i32 %19
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE7compareEmmS4_mm(%"class.base::BasicStringPiece.13"*, i64, i64, i32*, i64, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %8 = alloca %"class.base::BasicStringPiece.13", align 8
  %9 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %8, i64 0, i32 0
  store i32* %3, i32** %9, align 8
  %10 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %8, i64 0, i32 1
  store i64 %4, i64* %10, align 8
  %11 = tail call { i32*, i64 } @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE6substrEmm(%"class.base::BasicStringPiece.13"* %0, i64 %1, i64 %2)
  %12 = extractvalue { i32*, i64 } %11, 0
  %13 = extractvalue { i32*, i64 } %11, 1
  %14 = call { i32*, i64 } @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE6substrEmm(%"class.base::BasicStringPiece.13"* nonnull %8, i64 %5, i64 %6)
  %15 = extractvalue { i32*, i64 } %14, 0
  %16 = extractvalue { i32*, i64 } %14, 1
  %17 = icmp ugt i64 %13, %16
  %18 = select i1 %17, i64 %16, i64 %13
  %19 = call i32 @wmemcmp(i32* %12, i32* %15, i64 %18) #12
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %26

21:                                               ; preds = %7
  %22 = icmp eq i64 %13, %16
  br i1 %22, label %26, label %23

23:                                               ; preds = %21
  %24 = icmp ult i64 %13, %16
  %25 = select i1 %24, i32 -1, i32 1
  br label %26

26:                                               ; preds = %7, %21, %23
  %27 = phi i32 [ %25, %23 ], [ %19, %7 ], [ 0, %21 ]
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE7compareEPKw(%"class.base::BasicStringPiece.13"*, i32*) local_unnamed_addr #0 comdat align 2 {
  %3 = alloca %"class.logging::CheckError", align 8
  %4 = icmp eq i32* %1, null
  br i1 %4, label %7, label %5

5:                                                ; preds = %2
  %6 = tail call i64 @wcslen(i32* nonnull %1) #12
  br label %10

7:                                                ; preds = %2
  %8 = bitcast %"class.logging::CheckError"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %3, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %9 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %3) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %3) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #12
  br label %10

10:                                               ; preds = %5, %7
  %11 = phi i64 [ 0, %7 ], [ %6, %5 ]
  %12 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = icmp ugt i64 %13, %11
  %15 = select i1 %14, i64 %11, i64 %13
  %16 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %17 = load i32*, i32** %16, align 8
  %18 = call i32 @wmemcmp(i32* %17, i32* %1, i64 %15) #12
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %26

20:                                               ; preds = %10
  %21 = load i64, i64* %12, align 8
  %22 = icmp eq i64 %21, %11
  br i1 %22, label %26, label %23

23:                                               ; preds = %20
  %24 = icmp ult i64 %21, %11
  %25 = select i1 %24, i32 -1, i32 1
  br label %26

26:                                               ; preds = %10, %20, %23
  %27 = phi i32 [ %25, %23 ], [ %18, %10 ], [ 0, %20 ]
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE7compareEmmPKw(%"class.base::BasicStringPiece.13"*, i64, i64, i32*) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = tail call { i32*, i64 } @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE6substrEmm(%"class.base::BasicStringPiece.13"* %0, i64 %1, i64 %2)
  %7 = extractvalue { i32*, i64 } %6, 0
  %8 = extractvalue { i32*, i64 } %6, 1
  %9 = icmp eq i32* %3, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %4
  %11 = tail call i64 @wcslen(i32* nonnull %3) #12
  br label %15

12:                                               ; preds = %4
  %13 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %14 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #12
  br label %15

15:                                               ; preds = %10, %12
  %16 = phi i64 [ 0, %12 ], [ %11, %10 ]
  %17 = icmp ugt i64 %8, %16
  %18 = select i1 %17, i64 %16, i64 %8
  %19 = call i32 @wmemcmp(i32* %7, i32* %3, i64 %18) #12
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %26

21:                                               ; preds = %15
  %22 = icmp eq i64 %8, %16
  br i1 %22, label %26, label %23

23:                                               ; preds = %21
  %24 = icmp ult i64 %8, %16
  %25 = select i1 %24, i32 -1, i32 1
  br label %26

26:                                               ; preds = %15, %21, %23
  %27 = phi i32 [ %25, %23 ], [ %19, %15 ], [ 0, %21 ]
  ret i32 %27
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i32 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE7compareEmmPKwm(%"class.base::BasicStringPiece.13"*, i64, i64, i32*, i64) local_unnamed_addr #0 comdat align 2 {
  %6 = tail call { i32*, i64 } @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE6substrEmm(%"class.base::BasicStringPiece.13"* %0, i64 %1, i64 %2)
  %7 = extractvalue { i32*, i64 } %6, 0
  %8 = extractvalue { i32*, i64 } %6, 1
  %9 = icmp ugt i64 %8, %4
  %10 = select i1 %9, i64 %4, i64 %8
  %11 = tail call i32 @wmemcmp(i32* %7, i32* %3, i64 %10) #12
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %18

13:                                               ; preds = %5
  %14 = icmp eq i64 %8, %4
  br i1 %14, label %18, label %15

15:                                               ; preds = %13
  %16 = icmp ult i64 %8, %4
  %17 = select i1 %16, i32 -1, i32 1
  br label %18

18:                                               ; preds = %5, %13, %15
  %19 = phi i32 [ %17, %15 ], [ %11, %5 ], [ 0, %13 ]
  ret i32 %19
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4findES4_m(%"class.base::BasicStringPiece.13"*, i32*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, %3
  br i1 %9, label %60, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds i32, i32* %6, i64 %3
  %12 = getelementptr inbounds i32, i32* %6, i64 %8
  %13 = getelementptr inbounds i32, i32* %1, i64 %2
  %14 = shl nuw i64 %2, 2
  %15 = ashr exact i64 %14, 2
  %16 = icmp eq i64 %2, 0
  br i1 %16, label %51, label %17

17:                                               ; preds = %10
  %18 = ptrtoint i32* %11 to i64
  %19 = ptrtoint i32* %12 to i64
  %20 = sub i64 %19, %18
  %21 = ashr exact i64 %20, 2
  %22 = icmp slt i64 %21, %15
  br i1 %22, label %51, label %23

23:                                               ; preds = %17
  %24 = sub nsw i64 1, %15
  %25 = getelementptr inbounds i32, i32* %12, i64 %24
  %26 = icmp eq i32* %25, %11
  br i1 %26, label %51, label %27

27:                                               ; preds = %23
  %28 = load i32, i32* %1, align 4
  br label %29

29:                                               ; preds = %36, %27
  %30 = phi i32* [ %11, %27 ], [ %37, %36 ]
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, %28
  br i1 %32, label %38, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds i32, i32* %30, i64 1
  %35 = icmp eq i32* %34, %25
  br i1 %35, label %51, label %36

36:                                               ; preds = %33, %48
  %37 = phi i32* [ %34, %33 ], [ %49, %48 ]
  br label %29

38:                                               ; preds = %29, %43
  %39 = phi i32* [ %44, %43 ], [ %30, %29 ]
  %40 = phi i32* [ %41, %43 ], [ %1, %29 ]
  %41 = getelementptr inbounds i32, i32* %40, i64 1
  %42 = icmp eq i32* %41, %13
  br i1 %42, label %51, label %43

43:                                               ; preds = %38
  %44 = getelementptr inbounds i32, i32* %39, i64 1
  %45 = load i32, i32* %44, align 4
  %46 = load i32, i32* %41, align 4
  %47 = icmp eq i32 %45, %46
  br i1 %47, label %38, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds i32, i32* %30, i64 1
  %50 = icmp eq i32* %49, %25
  br i1 %50, label %51, label %36

51:                                               ; preds = %48, %33, %38, %23, %17, %10
  %52 = phi i32* [ %11, %10 ], [ %12, %17 ], [ %12, %23 ], [ %30, %38 ], [ %12, %33 ], [ %12, %48 ]
  %53 = ptrtoint i32* %52 to i64
  %54 = ptrtoint i32* %6 to i64
  %55 = sub i64 %53, %54
  %56 = ashr exact i64 %55, 2
  %57 = add i64 %56, %2
  %58 = icmp ugt i64 %57, %8
  %59 = select i1 %58, i64 -1, i64 %56
  br label %60

60:                                               ; preds = %4, %51
  %61 = phi i64 [ %59, %51 ], [ -1, %4 ]
  ret i64 %61
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN4base8internal4findENS_16BasicStringPieceIwNSt3__111char_traitsIwEEEES5_m(i32*, i64, i32* readonly, i64, i64) local_unnamed_addr #4 {
  %6 = icmp ult i64 %1, %4
  br i1 %6, label %57, label %7

7:                                                ; preds = %5
  %8 = getelementptr inbounds i32, i32* %0, i64 %4
  %9 = getelementptr inbounds i32, i32* %0, i64 %1
  %10 = getelementptr inbounds i32, i32* %2, i64 %3
  %11 = shl nuw i64 %3, 2
  %12 = ashr exact i64 %11, 2
  %13 = icmp eq i64 %3, 0
  br i1 %13, label %48, label %14

14:                                               ; preds = %7
  %15 = ptrtoint i32* %8 to i64
  %16 = ptrtoint i32* %9 to i64
  %17 = sub i64 %16, %15
  %18 = ashr exact i64 %17, 2
  %19 = icmp slt i64 %18, %12
  br i1 %19, label %48, label %20

20:                                               ; preds = %14
  %21 = sub nsw i64 1, %12
  %22 = getelementptr inbounds i32, i32* %9, i64 %21
  %23 = icmp eq i32* %22, %8
  br i1 %23, label %48, label %24

24:                                               ; preds = %20
  %25 = load i32, i32* %2, align 4
  br label %26

26:                                               ; preds = %33, %24
  %27 = phi i32* [ %8, %24 ], [ %34, %33 ]
  %28 = load i32, i32* %27, align 4
  %29 = icmp eq i32 %28, %25
  br i1 %29, label %35, label %30

30:                                               ; preds = %26
  %31 = getelementptr inbounds i32, i32* %27, i64 1
  %32 = icmp eq i32* %31, %22
  br i1 %32, label %48, label %33

33:                                               ; preds = %30, %45
  %34 = phi i32* [ %31, %30 ], [ %46, %45 ]
  br label %26

35:                                               ; preds = %26, %40
  %36 = phi i32* [ %41, %40 ], [ %27, %26 ]
  %37 = phi i32* [ %38, %40 ], [ %2, %26 ]
  %38 = getelementptr inbounds i32, i32* %37, i64 1
  %39 = icmp eq i32* %38, %10
  br i1 %39, label %48, label %40

40:                                               ; preds = %35
  %41 = getelementptr inbounds i32, i32* %36, i64 1
  %42 = load i32, i32* %41, align 4
  %43 = load i32, i32* %38, align 4
  %44 = icmp eq i32 %42, %43
  br i1 %44, label %35, label %45

45:                                               ; preds = %40
  %46 = getelementptr inbounds i32, i32* %27, i64 1
  %47 = icmp eq i32* %46, %22
  br i1 %47, label %48, label %33

48:                                               ; preds = %45, %30, %35, %20, %14, %7
  %49 = phi i32* [ %8, %7 ], [ %9, %14 ], [ %9, %20 ], [ %27, %35 ], [ %9, %30 ], [ %9, %45 ]
  %50 = ptrtoint i32* %49 to i64
  %51 = ptrtoint i32* %0 to i64
  %52 = sub i64 %50, %51
  %53 = ashr exact i64 %52, 2
  %54 = add i64 %53, %3
  %55 = icmp ugt i64 %54, %1
  %56 = select i1 %55, i64 -1, i64 %53
  br label %57

57:                                               ; preds = %5, %48
  %58 = phi i64 [ %56, %48 ], [ -1, %5 ]
  ret i64 %58
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4findEwm(%"class.base::BasicStringPiece.13"*, i32 signext, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, %2
  br i1 %6, label %7, label %20

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds i32, i32* %9, i64 %2
  %11 = sub i64 %5, %2
  %12 = tail call i32* @wmemchr(i32* %10, i32 signext %1, i64 %11) #12
  %13 = icmp eq i32* %12, null
  br i1 %13, label %20, label %14

14:                                               ; preds = %7
  %15 = bitcast %"class.base::BasicStringPiece.13"* %0 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = ptrtoint i32* %12 to i64
  %18 = sub i64 %17, %16
  %19 = ashr exact i64 %18, 2
  br label %20

20:                                               ; preds = %14, %7, %3
  %21 = phi i64 [ -1, %3 ], [ %19, %14 ], [ -1, %7 ]
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4findEPKwmm(%"class.base::BasicStringPiece.13"*, i32*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, %2
  br i1 %9, label %60, label %10

10:                                               ; preds = %4
  %11 = getelementptr inbounds i32, i32* %6, i64 %2
  %12 = getelementptr inbounds i32, i32* %6, i64 %8
  %13 = getelementptr inbounds i32, i32* %1, i64 %3
  %14 = shl nuw i64 %3, 2
  %15 = ashr exact i64 %14, 2
  %16 = icmp eq i64 %3, 0
  br i1 %16, label %51, label %17

17:                                               ; preds = %10
  %18 = ptrtoint i32* %11 to i64
  %19 = ptrtoint i32* %12 to i64
  %20 = sub i64 %19, %18
  %21 = ashr exact i64 %20, 2
  %22 = icmp slt i64 %21, %15
  br i1 %22, label %51, label %23

23:                                               ; preds = %17
  %24 = sub nsw i64 1, %15
  %25 = getelementptr inbounds i32, i32* %12, i64 %24
  %26 = icmp eq i32* %25, %11
  br i1 %26, label %51, label %27

27:                                               ; preds = %23
  %28 = load i32, i32* %1, align 4
  br label %29

29:                                               ; preds = %36, %27
  %30 = phi i32* [ %11, %27 ], [ %37, %36 ]
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, %28
  br i1 %32, label %38, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds i32, i32* %30, i64 1
  %35 = icmp eq i32* %34, %25
  br i1 %35, label %51, label %36

36:                                               ; preds = %33, %48
  %37 = phi i32* [ %34, %33 ], [ %49, %48 ]
  br label %29

38:                                               ; preds = %29, %43
  %39 = phi i32* [ %44, %43 ], [ %30, %29 ]
  %40 = phi i32* [ %41, %43 ], [ %1, %29 ]
  %41 = getelementptr inbounds i32, i32* %40, i64 1
  %42 = icmp eq i32* %41, %13
  br i1 %42, label %51, label %43

43:                                               ; preds = %38
  %44 = getelementptr inbounds i32, i32* %39, i64 1
  %45 = load i32, i32* %44, align 4
  %46 = load i32, i32* %41, align 4
  %47 = icmp eq i32 %45, %46
  br i1 %47, label %38, label %48

48:                                               ; preds = %43
  %49 = getelementptr inbounds i32, i32* %30, i64 1
  %50 = icmp eq i32* %49, %25
  br i1 %50, label %51, label %36

51:                                               ; preds = %48, %33, %38, %23, %17, %10
  %52 = phi i32* [ %11, %10 ], [ %12, %17 ], [ %12, %23 ], [ %30, %38 ], [ %12, %33 ], [ %12, %48 ]
  %53 = ptrtoint i32* %52 to i64
  %54 = ptrtoint i32* %6 to i64
  %55 = sub i64 %53, %54
  %56 = ashr exact i64 %55, 2
  %57 = add i64 %56, %3
  %58 = icmp ugt i64 %57, %8
  %59 = select i1 %58, i64 -1, i64 %56
  br label %60

60:                                               ; preds = %4, %51
  %61 = phi i64 [ %59, %51 ], [ -1, %4 ]
  ret i64 %61
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE4findEPKwm(%"class.base::BasicStringPiece.13"*, i32*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = icmp eq i32* %1, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %3
  %7 = tail call i64 @wcslen(i32* nonnull %1) #12
  br label %11

8:                                                ; preds = %3
  %9 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %10 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #12
  br label %11

11:                                               ; preds = %6, %8
  %12 = phi i64 [ 0, %8 ], [ %7, %6 ]
  %13 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %14 = load i32*, i32** %13, align 8
  %15 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ult i64 %16, %2
  br i1 %17, label %68, label %18

18:                                               ; preds = %11
  %19 = getelementptr inbounds i32, i32* %14, i64 %2
  %20 = getelementptr inbounds i32, i32* %14, i64 %16
  %21 = getelementptr inbounds i32, i32* %1, i64 %12
  %22 = shl nuw i64 %12, 2
  %23 = ashr exact i64 %22, 2
  %24 = icmp eq i64 %12, 0
  br i1 %24, label %59, label %25

25:                                               ; preds = %18
  %26 = ptrtoint i32* %19 to i64
  %27 = ptrtoint i32* %20 to i64
  %28 = sub i64 %27, %26
  %29 = ashr exact i64 %28, 2
  %30 = icmp slt i64 %29, %23
  br i1 %30, label %59, label %31

31:                                               ; preds = %25
  %32 = sub nsw i64 1, %23
  %33 = getelementptr inbounds i32, i32* %20, i64 %32
  %34 = icmp eq i32* %33, %19
  br i1 %34, label %59, label %35

35:                                               ; preds = %31
  %36 = load i32, i32* %1, align 4
  br label %37

37:                                               ; preds = %44, %35
  %38 = phi i32* [ %19, %35 ], [ %45, %44 ]
  %39 = load i32, i32* %38, align 4
  %40 = icmp eq i32 %39, %36
  br i1 %40, label %46, label %41

41:                                               ; preds = %37
  %42 = getelementptr inbounds i32, i32* %38, i64 1
  %43 = icmp eq i32* %42, %33
  br i1 %43, label %59, label %44

44:                                               ; preds = %41, %56
  %45 = phi i32* [ %42, %41 ], [ %57, %56 ]
  br label %37

46:                                               ; preds = %37, %51
  %47 = phi i32* [ %52, %51 ], [ %38, %37 ]
  %48 = phi i32* [ %49, %51 ], [ %1, %37 ]
  %49 = getelementptr inbounds i32, i32* %48, i64 1
  %50 = icmp eq i32* %49, %21
  br i1 %50, label %59, label %51

51:                                               ; preds = %46
  %52 = getelementptr inbounds i32, i32* %47, i64 1
  %53 = load i32, i32* %52, align 4
  %54 = load i32, i32* %49, align 4
  %55 = icmp eq i32 %53, %54
  br i1 %55, label %46, label %56

56:                                               ; preds = %51
  %57 = getelementptr inbounds i32, i32* %38, i64 1
  %58 = icmp eq i32* %57, %33
  br i1 %58, label %59, label %44

59:                                               ; preds = %56, %41, %46, %31, %25, %18
  %60 = phi i32* [ %19, %18 ], [ %20, %25 ], [ %20, %31 ], [ %38, %46 ], [ %20, %41 ], [ %20, %56 ]
  %61 = ptrtoint i32* %60 to i64
  %62 = ptrtoint i32* %14 to i64
  %63 = sub i64 %61, %62
  %64 = ashr exact i64 %63, 2
  %65 = add i64 %64, %12
  %66 = icmp ugt i64 %65, %16
  %67 = select i1 %66, i64 -1, i64 %64
  br label %68

68:                                               ; preds = %11, %59
  %69 = phi i64 [ %67, %59 ], [ -1, %11 ]
  ret i64 %69
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE5rfindES4_m(%"class.base::BasicStringPiece.13"*, i32*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, %2
  br i1 %9, label %58, label %10

10:                                               ; preds = %4
  %11 = icmp eq i64 %2, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %10
  %13 = icmp ugt i64 %8, %3
  %14 = select i1 %13, i64 %3, i64 %8
  br label %58

15:                                               ; preds = %10
  %16 = sub i64 %8, %2
  %17 = icmp ugt i64 %16, %3
  %18 = select i1 %17, i64 %3, i64 %16
  %19 = getelementptr inbounds i32, i32* %6, i64 %18
  %20 = getelementptr inbounds i32, i32* %19, i64 %2
  %21 = shl nuw i64 %2, 2
  %22 = ashr exact i64 %21, 2
  %23 = ptrtoint i32* %20 to i64
  %24 = ptrtoint i32* %6 to i64
  %25 = sub i64 %23, %24
  %26 = ashr exact i64 %25, 2
  %27 = icmp slt i64 %26, %22
  br i1 %27, label %58, label %28

28:                                               ; preds = %15
  %29 = getelementptr inbounds i32, i32* %1, i64 %2
  %30 = add nsw i64 %22, -1
  %31 = getelementptr inbounds i32, i32* %6, i64 %30
  %32 = getelementptr inbounds i32, i32* %29, i64 -1
  br label %33

33:                                               ; preds = %41, %28
  %34 = phi i32* [ %20, %28 ], [ %37, %41 ]
  %35 = icmp eq i32* %31, %34
  br i1 %35, label %58, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds i32, i32* %34, i64 -1
  %38 = load i32, i32* %37, align 4
  %39 = load i32, i32* %32, align 4
  %40 = icmp eq i32 %38, %39
  br i1 %40, label %42, label %41

41:                                               ; preds = %46, %36
  br label %33

42:                                               ; preds = %36, %46
  %43 = phi i32* [ %47, %46 ], [ %37, %36 ]
  %44 = phi i32* [ %48, %46 ], [ %32, %36 ]
  %45 = icmp eq i32* %44, %1
  br i1 %45, label %52, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds i32, i32* %43, i64 -1
  %48 = getelementptr inbounds i32, i32* %44, i64 -1
  %49 = load i32, i32* %47, align 4
  %50 = load i32, i32* %48, align 4
  %51 = icmp eq i32 %49, %50
  br i1 %51, label %42, label %41

52:                                               ; preds = %42
  %53 = icmp eq i32* %43, %20
  br i1 %53, label %58, label %54

54:                                               ; preds = %52
  %55 = ptrtoint i32* %43 to i64
  %56 = sub i64 %55, %24
  %57 = ashr exact i64 %56, 2
  br label %58

58:                                               ; preds = %33, %4, %12, %15, %52, %54
  %59 = phi i64 [ %14, %12 ], [ -1, %4 ], [ %57, %54 ], [ -1, %52 ], [ -1, %15 ], [ -1, %33 ]
  ret i64 %59
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN4base8internal5rfindENS_16BasicStringPieceIwNSt3__111char_traitsIwEEEES5_m(i32*, i64, i32* readonly, i64, i64) local_unnamed_addr #4 {
  %6 = icmp ult i64 %1, %3
  br i1 %6, label %55, label %7

7:                                                ; preds = %5
  %8 = icmp eq i64 %3, 0
  br i1 %8, label %9, label %12

9:                                                ; preds = %7
  %10 = icmp ult i64 %4, %1
  %11 = select i1 %10, i64 %4, i64 %1
  br label %55

12:                                               ; preds = %7
  %13 = sub i64 %1, %3
  %14 = icmp ugt i64 %13, %4
  %15 = select i1 %14, i64 %4, i64 %13
  %16 = getelementptr inbounds i32, i32* %0, i64 %15
  %17 = getelementptr inbounds i32, i32* %16, i64 %3
  %18 = shl nuw i64 %3, 2
  %19 = ashr exact i64 %18, 2
  %20 = ptrtoint i32* %17 to i64
  %21 = ptrtoint i32* %0 to i64
  %22 = sub i64 %20, %21
  %23 = ashr exact i64 %22, 2
  %24 = icmp slt i64 %23, %19
  br i1 %24, label %55, label %25

25:                                               ; preds = %12
  %26 = getelementptr inbounds i32, i32* %2, i64 %3
  %27 = add nsw i64 %19, -1
  %28 = getelementptr inbounds i32, i32* %0, i64 %27
  %29 = getelementptr inbounds i32, i32* %26, i64 -1
  br label %30

30:                                               ; preds = %38, %25
  %31 = phi i32* [ %17, %25 ], [ %34, %38 ]
  %32 = icmp eq i32* %28, %31
  br i1 %32, label %55, label %33

33:                                               ; preds = %30
  %34 = getelementptr inbounds i32, i32* %31, i64 -1
  %35 = load i32, i32* %34, align 4
  %36 = load i32, i32* %29, align 4
  %37 = icmp eq i32 %35, %36
  br i1 %37, label %39, label %38

38:                                               ; preds = %43, %33
  br label %30

39:                                               ; preds = %33, %43
  %40 = phi i32* [ %44, %43 ], [ %34, %33 ]
  %41 = phi i32* [ %45, %43 ], [ %29, %33 ]
  %42 = icmp eq i32* %41, %2
  br i1 %42, label %49, label %43

43:                                               ; preds = %39
  %44 = getelementptr inbounds i32, i32* %40, i64 -1
  %45 = getelementptr inbounds i32, i32* %41, i64 -1
  %46 = load i32, i32* %44, align 4
  %47 = load i32, i32* %45, align 4
  %48 = icmp eq i32 %46, %47
  br i1 %48, label %39, label %38

49:                                               ; preds = %39
  %50 = icmp eq i32* %40, %17
  br i1 %50, label %55, label %51

51:                                               ; preds = %49
  %52 = ptrtoint i32* %40 to i64
  %53 = sub i64 %52, %21
  %54 = ashr exact i64 %53, 2
  br label %55

55:                                               ; preds = %30, %5, %9, %12, %49, %51
  %56 = phi i64 [ %11, %9 ], [ -1, %5 ], [ %54, %51 ], [ -1, %49 ], [ -1, %12 ], [ -1, %30 ]
  ret i64 %56
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE5rfindEwm(%"class.base::BasicStringPiece.13"*, i32 signext, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %24, label %7

7:                                                ; preds = %3
  %8 = add i64 %5, -1
  %9 = icmp ult i64 %8, %2
  %10 = select i1 %9, i64 %8, i64 %2
  %11 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %12 = load i32*, i32** %11, align 8
  %13 = getelementptr inbounds i32, i32* %12, i64 %10
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, %1
  br i1 %15, label %24, label %16

16:                                               ; preds = %7, %19
  %17 = phi i64 [ %20, %19 ], [ %10, %7 ]
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %16
  %20 = add i64 %17, -1
  %21 = getelementptr inbounds i32, i32* %12, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, %1
  br i1 %23, label %24, label %16

24:                                               ; preds = %16, %19, %7, %3
  %25 = phi i64 [ -1, %3 ], [ %10, %7 ], [ -1, %16 ], [ %20, %19 ]
  ret i64 %25
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE5rfindEPKwmm(%"class.base::BasicStringPiece.13"*, i32*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp ult i64 %8, %3
  br i1 %9, label %58, label %10

10:                                               ; preds = %4
  %11 = icmp eq i64 %3, 0
  br i1 %11, label %12, label %15

12:                                               ; preds = %10
  %13 = icmp ugt i64 %8, %2
  %14 = select i1 %13, i64 %2, i64 %8
  br label %58

15:                                               ; preds = %10
  %16 = sub i64 %8, %3
  %17 = icmp ugt i64 %16, %2
  %18 = select i1 %17, i64 %2, i64 %16
  %19 = getelementptr inbounds i32, i32* %6, i64 %18
  %20 = getelementptr inbounds i32, i32* %19, i64 %3
  %21 = shl nuw i64 %3, 2
  %22 = ashr exact i64 %21, 2
  %23 = ptrtoint i32* %20 to i64
  %24 = ptrtoint i32* %6 to i64
  %25 = sub i64 %23, %24
  %26 = ashr exact i64 %25, 2
  %27 = icmp slt i64 %26, %22
  br i1 %27, label %58, label %28

28:                                               ; preds = %15
  %29 = getelementptr inbounds i32, i32* %1, i64 %3
  %30 = add nsw i64 %22, -1
  %31 = getelementptr inbounds i32, i32* %6, i64 %30
  %32 = getelementptr inbounds i32, i32* %29, i64 -1
  br label %33

33:                                               ; preds = %41, %28
  %34 = phi i32* [ %20, %28 ], [ %37, %41 ]
  %35 = icmp eq i32* %31, %34
  br i1 %35, label %58, label %36

36:                                               ; preds = %33
  %37 = getelementptr inbounds i32, i32* %34, i64 -1
  %38 = load i32, i32* %37, align 4
  %39 = load i32, i32* %32, align 4
  %40 = icmp eq i32 %38, %39
  br i1 %40, label %42, label %41

41:                                               ; preds = %46, %36
  br label %33

42:                                               ; preds = %36, %46
  %43 = phi i32* [ %47, %46 ], [ %37, %36 ]
  %44 = phi i32* [ %48, %46 ], [ %32, %36 ]
  %45 = icmp eq i32* %44, %1
  br i1 %45, label %52, label %46

46:                                               ; preds = %42
  %47 = getelementptr inbounds i32, i32* %43, i64 -1
  %48 = getelementptr inbounds i32, i32* %44, i64 -1
  %49 = load i32, i32* %47, align 4
  %50 = load i32, i32* %48, align 4
  %51 = icmp eq i32 %49, %50
  br i1 %51, label %42, label %41

52:                                               ; preds = %42
  %53 = icmp eq i32* %43, %20
  br i1 %53, label %58, label %54

54:                                               ; preds = %52
  %55 = ptrtoint i32* %43 to i64
  %56 = sub i64 %55, %24
  %57 = ashr exact i64 %56, 2
  br label %58

58:                                               ; preds = %33, %4, %12, %15, %52, %54
  %59 = phi i64 [ %14, %12 ], [ -1, %4 ], [ %57, %54 ], [ -1, %52 ], [ -1, %15 ], [ -1, %33 ]
  ret i64 %59
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE5rfindEPKwm(%"class.base::BasicStringPiece.13"*, i32*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = icmp eq i32* %1, null
  br i1 %5, label %6, label %11

6:                                                ; preds = %3
  %7 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %8 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #12
  %9 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %10 = load i64, i64* %9, align 8
  br label %20

11:                                               ; preds = %3
  %12 = tail call i64 @wcslen(i32* nonnull %1) #12
  %13 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %14 = load i32*, i32** %13, align 8
  %15 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp ult i64 %16, %12
  br i1 %17, label %67, label %18

18:                                               ; preds = %11
  %19 = icmp eq i64 %12, 0
  br i1 %19, label %20, label %24

20:                                               ; preds = %6, %18
  %21 = phi i64 [ %10, %6 ], [ %16, %18 ]
  %22 = icmp ugt i64 %21, %2
  %23 = select i1 %22, i64 %2, i64 %21
  br label %67

24:                                               ; preds = %18
  %25 = sub i64 %16, %12
  %26 = icmp ugt i64 %25, %2
  %27 = select i1 %26, i64 %2, i64 %25
  %28 = getelementptr inbounds i32, i32* %14, i64 %27
  %29 = getelementptr inbounds i32, i32* %28, i64 %12
  %30 = shl nuw i64 %12, 2
  %31 = ashr exact i64 %30, 2
  %32 = ptrtoint i32* %29 to i64
  %33 = ptrtoint i32* %14 to i64
  %34 = sub i64 %32, %33
  %35 = ashr exact i64 %34, 2
  %36 = icmp slt i64 %35, %31
  br i1 %36, label %67, label %37

37:                                               ; preds = %24
  %38 = getelementptr inbounds i32, i32* %1, i64 %12
  %39 = add nsw i64 %31, -1
  %40 = getelementptr inbounds i32, i32* %14, i64 %39
  %41 = getelementptr inbounds i32, i32* %38, i64 -1
  br label %42

42:                                               ; preds = %50, %37
  %43 = phi i32* [ %29, %37 ], [ %46, %50 ]
  %44 = icmp eq i32* %40, %43
  br i1 %44, label %67, label %45

45:                                               ; preds = %42
  %46 = getelementptr inbounds i32, i32* %43, i64 -1
  %47 = load i32, i32* %46, align 4
  %48 = load i32, i32* %41, align 4
  %49 = icmp eq i32 %47, %48
  br i1 %49, label %51, label %50

50:                                               ; preds = %55, %45
  br label %42

51:                                               ; preds = %45, %55
  %52 = phi i32* [ %56, %55 ], [ %46, %45 ]
  %53 = phi i32* [ %57, %55 ], [ %41, %45 ]
  %54 = icmp eq i32* %53, %1
  br i1 %54, label %61, label %55

55:                                               ; preds = %51
  %56 = getelementptr inbounds i32, i32* %52, i64 -1
  %57 = getelementptr inbounds i32, i32* %53, i64 -1
  %58 = load i32, i32* %56, align 4
  %59 = load i32, i32* %57, align 4
  %60 = icmp eq i32 %58, %59
  br i1 %60, label %51, label %50

61:                                               ; preds = %51
  %62 = icmp eq i32* %52, %29
  br i1 %62, label %67, label %63

63:                                               ; preds = %61
  %64 = ptrtoint i32* %52 to i64
  %65 = sub i64 %64, %33
  %66 = ashr exact i64 %65, 2
  br label %67

67:                                               ; preds = %42, %11, %20, %24, %61, %63
  %68 = phi i64 [ %23, %20 ], [ -1, %11 ], [ %66, %63 ], [ -1, %61 ], [ -1, %24 ], [ -1, %42 ]
  ret i64 %68
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE13find_first_ofES4_m(%"class.base::BasicStringPiece.13"*, i32*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.base::BasicStringPiece.13", align 8
  %6 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.base::BasicStringPiece.13"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #12
  %11 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %5, i64 0, i32 0
  store i32* %1, i32** %11, align 8
  %12 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %5, i64 0, i32 1
  store i64 %2, i64* %12, align 8
  %13 = icmp eq i64 %2, 1
  %14 = getelementptr inbounds i32, i32* %7, i64 %3
  %15 = getelementptr inbounds i32, i32* %7, i64 %9
  br i1 %13, label %16, label %28

16:                                               ; preds = %4
  %17 = call dereferenceable(4) i32* @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE2atEm(%"class.base::BasicStringPiece.13"* nonnull %5, i64 0) #12
  %18 = icmp eq i64 %9, %3
  br i1 %18, label %47, label %19

19:                                               ; preds = %16
  %20 = load i32, i32* %17, align 4
  br label %21

21:                                               ; preds = %25, %19
  %22 = phi i32* [ %14, %19 ], [ %26, %25 ]
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, %20
  br i1 %24, label %47, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds i32, i32* %22, i64 1
  %27 = icmp eq i32* %26, %15
  br i1 %27, label %55, label %21

28:                                               ; preds = %4
  %29 = getelementptr inbounds i32, i32* %1, i64 %2
  %30 = icmp eq i64 %9, %3
  br i1 %30, label %47, label %31

31:                                               ; preds = %28
  %32 = icmp eq i64 %2, 0
  br label %33

33:                                               ; preds = %44, %31
  %34 = phi i32* [ %14, %31 ], [ %45, %44 ]
  br i1 %32, label %44, label %35

35:                                               ; preds = %33
  %36 = load i32, i32* %34, align 4
  br label %39

37:                                               ; preds = %39
  %38 = icmp eq i32* %43, %29
  br i1 %38, label %44, label %39

39:                                               ; preds = %37, %35
  %40 = phi i32* [ %1, %35 ], [ %43, %37 ]
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %36, %41
  %43 = getelementptr inbounds i32, i32* %40, i64 1
  br i1 %42, label %47, label %37

44:                                               ; preds = %37, %33
  %45 = getelementptr inbounds i32, i32* %34, i64 1
  %46 = icmp eq i32* %45, %15
  br i1 %46, label %55, label %33

47:                                               ; preds = %39, %21, %28, %16
  %48 = phi i32* [ %14, %16 ], [ %14, %28 ], [ %22, %21 ], [ %34, %39 ]
  %49 = icmp eq i32* %48, %15
  br i1 %49, label %55, label %50

50:                                               ; preds = %47
  %51 = ptrtoint i32* %48 to i64
  %52 = ptrtoint i32* %7 to i64
  %53 = sub i64 %51, %52
  %54 = ashr exact i64 %53, 2
  br label %55

55:                                               ; preds = %44, %25, %47, %50
  %56 = phi i64 [ %54, %50 ], [ -1, %47 ], [ -1, %25 ], [ -1, %44 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #12
  ret i64 %56
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4base8internal13find_first_ofENS_16BasicStringPieceIwNSt3__111char_traitsIwEEEES5_m(i32*, i64, i32*, i64, i64) local_unnamed_addr #0 {
  %6 = alloca %"class.base::BasicStringPiece.13", align 8
  %7 = bitcast %"class.base::BasicStringPiece.13"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7)
  %8 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %6, i64 0, i32 0
  store i32* %2, i32** %8, align 8
  %9 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %6, i64 0, i32 1
  store i64 %3, i64* %9, align 8
  %10 = icmp eq i64 %3, 1
  %11 = getelementptr inbounds i32, i32* %0, i64 %4
  %12 = getelementptr inbounds i32, i32* %0, i64 %1
  br i1 %10, label %13, label %25

13:                                               ; preds = %5
  %14 = call dereferenceable(4) i32* @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE2atEm(%"class.base::BasicStringPiece.13"* nonnull %6, i64 0) #12
  %15 = icmp eq i64 %4, %1
  br i1 %15, label %44, label %16

16:                                               ; preds = %13
  %17 = load i32, i32* %14, align 4
  br label %18

18:                                               ; preds = %22, %16
  %19 = phi i32* [ %11, %16 ], [ %23, %22 ]
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, %17
  br i1 %21, label %44, label %22

22:                                               ; preds = %18
  %23 = getelementptr inbounds i32, i32* %19, i64 1
  %24 = icmp eq i32* %23, %12
  br i1 %24, label %52, label %18

25:                                               ; preds = %5
  %26 = getelementptr inbounds i32, i32* %2, i64 %3
  %27 = icmp eq i64 %4, %1
  br i1 %27, label %44, label %28

28:                                               ; preds = %25
  %29 = icmp eq i64 %3, 0
  br label %30

30:                                               ; preds = %41, %28
  %31 = phi i32* [ %11, %28 ], [ %42, %41 ]
  br i1 %29, label %41, label %32

32:                                               ; preds = %30
  %33 = load i32, i32* %31, align 4
  br label %36

34:                                               ; preds = %36
  %35 = icmp eq i32* %40, %26
  br i1 %35, label %41, label %36

36:                                               ; preds = %34, %32
  %37 = phi i32* [ %2, %32 ], [ %40, %34 ]
  %38 = load i32, i32* %37, align 4
  %39 = icmp eq i32 %33, %38
  %40 = getelementptr inbounds i32, i32* %37, i64 1
  br i1 %39, label %44, label %34

41:                                               ; preds = %34, %30
  %42 = getelementptr inbounds i32, i32* %31, i64 1
  %43 = icmp eq i32* %42, %12
  br i1 %43, label %52, label %30

44:                                               ; preds = %36, %18, %25, %13
  %45 = phi i32* [ %11, %13 ], [ %11, %25 ], [ %19, %18 ], [ %31, %36 ]
  %46 = icmp eq i32* %45, %12
  br i1 %46, label %52, label %47

47:                                               ; preds = %44
  %48 = ptrtoint i32* %45 to i64
  %49 = ptrtoint i32* %0 to i64
  %50 = sub i64 %48, %49
  %51 = ashr exact i64 %50, 2
  br label %52

52:                                               ; preds = %41, %22, %44, %47
  %53 = phi i64 [ %51, %47 ], [ -1, %44 ], [ -1, %22 ], [ -1, %41 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7)
  ret i64 %53
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE13find_first_ofEwm(%"class.base::BasicStringPiece.13"*, i32 signext, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, %2
  br i1 %6, label %7, label %20

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %9 = load i32*, i32** %8, align 8
  %10 = getelementptr inbounds i32, i32* %9, i64 %2
  %11 = sub i64 %5, %2
  %12 = tail call i32* @wmemchr(i32* %10, i32 signext %1, i64 %11) #12
  %13 = icmp eq i32* %12, null
  br i1 %13, label %20, label %14

14:                                               ; preds = %7
  %15 = bitcast %"class.base::BasicStringPiece.13"* %0 to i64*
  %16 = load i64, i64* %15, align 8
  %17 = ptrtoint i32* %12 to i64
  %18 = sub i64 %17, %16
  %19 = ashr exact i64 %18, 2
  br label %20

20:                                               ; preds = %3, %7, %14
  %21 = phi i64 [ -1, %3 ], [ %19, %14 ], [ -1, %7 ]
  ret i64 %21
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE13find_first_ofEPKwmm(%"class.base::BasicStringPiece.13"*, i32*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca %"class.base::BasicStringPiece.13", align 8
  %6 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %7 = load i32*, i32** %6, align 8
  %8 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %9 = load i64, i64* %8, align 8
  %10 = bitcast %"class.base::BasicStringPiece.13"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %10) #12
  %11 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %5, i64 0, i32 0
  store i32* %1, i32** %11, align 8
  %12 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %5, i64 0, i32 1
  store i64 %3, i64* %12, align 8
  %13 = icmp eq i64 %3, 1
  %14 = getelementptr inbounds i32, i32* %7, i64 %2
  %15 = getelementptr inbounds i32, i32* %7, i64 %9
  br i1 %13, label %16, label %28

16:                                               ; preds = %4
  %17 = call dereferenceable(4) i32* @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE2atEm(%"class.base::BasicStringPiece.13"* nonnull %5, i64 0) #12
  %18 = icmp eq i64 %9, %2
  br i1 %18, label %47, label %19

19:                                               ; preds = %16
  %20 = load i32, i32* %17, align 4
  br label %21

21:                                               ; preds = %25, %19
  %22 = phi i32* [ %14, %19 ], [ %26, %25 ]
  %23 = load i32, i32* %22, align 4
  %24 = icmp eq i32 %23, %20
  br i1 %24, label %47, label %25

25:                                               ; preds = %21
  %26 = getelementptr inbounds i32, i32* %22, i64 1
  %27 = icmp eq i32* %26, %15
  br i1 %27, label %55, label %21

28:                                               ; preds = %4
  %29 = getelementptr inbounds i32, i32* %1, i64 %3
  %30 = icmp eq i64 %9, %2
  br i1 %30, label %47, label %31

31:                                               ; preds = %28
  %32 = icmp eq i64 %3, 0
  br label %33

33:                                               ; preds = %44, %31
  %34 = phi i32* [ %14, %31 ], [ %45, %44 ]
  br i1 %32, label %44, label %35

35:                                               ; preds = %33
  %36 = load i32, i32* %34, align 4
  br label %39

37:                                               ; preds = %39
  %38 = icmp eq i32* %43, %29
  br i1 %38, label %44, label %39

39:                                               ; preds = %37, %35
  %40 = phi i32* [ %1, %35 ], [ %43, %37 ]
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %36, %41
  %43 = getelementptr inbounds i32, i32* %40, i64 1
  br i1 %42, label %47, label %37

44:                                               ; preds = %37, %33
  %45 = getelementptr inbounds i32, i32* %34, i64 1
  %46 = icmp eq i32* %45, %15
  br i1 %46, label %55, label %33

47:                                               ; preds = %39, %21, %28, %16
  %48 = phi i32* [ %14, %16 ], [ %14, %28 ], [ %22, %21 ], [ %34, %39 ]
  %49 = icmp eq i32* %48, %15
  br i1 %49, label %55, label %50

50:                                               ; preds = %47
  %51 = ptrtoint i32* %48 to i64
  %52 = ptrtoint i32* %7 to i64
  %53 = sub i64 %51, %52
  %54 = ashr exact i64 %53, 2
  br label %55

55:                                               ; preds = %44, %25, %47, %50
  %56 = phi i64 [ %54, %50 ], [ -1, %47 ], [ -1, %25 ], [ -1, %44 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %10) #12
  ret i64 %56
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE13find_first_ofEPKwm(%"class.base::BasicStringPiece.13"*, i32*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.base::BasicStringPiece.13", align 8
  %5 = alloca %"class.logging::CheckError", align 8
  %6 = icmp eq i32* %1, null
  br i1 %6, label %9, label %7

7:                                                ; preds = %3
  %8 = tail call i64 @wcslen(i32* nonnull %1) #12
  br label %12

9:                                                ; preds = %3
  %10 = bitcast %"class.logging::CheckError"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %10) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %5, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %11 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %5) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %10) #12
  br label %12

12:                                               ; preds = %7, %9
  %13 = phi i64 [ 0, %9 ], [ %8, %7 ]
  %14 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %15 = load i32*, i32** %14, align 8
  %16 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %17 = load i64, i64* %16, align 8
  %18 = bitcast %"class.base::BasicStringPiece.13"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %18) #12
  %19 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %4, i64 0, i32 0
  store i32* %1, i32** %19, align 8
  %20 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %4, i64 0, i32 1
  store i64 %13, i64* %20, align 8
  %21 = icmp eq i64 %13, 1
  %22 = getelementptr inbounds i32, i32* %15, i64 %2
  %23 = getelementptr inbounds i32, i32* %15, i64 %17
  br i1 %21, label %24, label %36

24:                                               ; preds = %12
  %25 = call dereferenceable(4) i32* @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE2atEm(%"class.base::BasicStringPiece.13"* nonnull %4, i64 0) #12
  %26 = icmp eq i64 %17, %2
  br i1 %26, label %55, label %27

27:                                               ; preds = %24
  %28 = load i32, i32* %25, align 4
  br label %29

29:                                               ; preds = %33, %27
  %30 = phi i32* [ %22, %27 ], [ %34, %33 ]
  %31 = load i32, i32* %30, align 4
  %32 = icmp eq i32 %31, %28
  br i1 %32, label %55, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds i32, i32* %30, i64 1
  %35 = icmp eq i32* %34, %23
  br i1 %35, label %63, label %29

36:                                               ; preds = %12
  %37 = getelementptr inbounds i32, i32* %1, i64 %13
  %38 = icmp eq i64 %17, %2
  br i1 %38, label %55, label %39

39:                                               ; preds = %36
  %40 = icmp eq i64 %13, 0
  br label %41

41:                                               ; preds = %52, %39
  %42 = phi i32* [ %22, %39 ], [ %53, %52 ]
  br i1 %40, label %52, label %43

43:                                               ; preds = %41
  %44 = load i32, i32* %42, align 4
  br label %47

45:                                               ; preds = %47
  %46 = icmp eq i32* %51, %37
  br i1 %46, label %52, label %47

47:                                               ; preds = %45, %43
  %48 = phi i32* [ %1, %43 ], [ %51, %45 ]
  %49 = load i32, i32* %48, align 4
  %50 = icmp eq i32 %44, %49
  %51 = getelementptr inbounds i32, i32* %48, i64 1
  br i1 %50, label %55, label %45

52:                                               ; preds = %45, %41
  %53 = getelementptr inbounds i32, i32* %42, i64 1
  %54 = icmp eq i32* %53, %23
  br i1 %54, label %63, label %41

55:                                               ; preds = %47, %29, %36, %24
  %56 = phi i32* [ %22, %24 ], [ %22, %36 ], [ %30, %29 ], [ %42, %47 ]
  %57 = icmp eq i32* %56, %23
  br i1 %57, label %63, label %58

58:                                               ; preds = %55
  %59 = ptrtoint i32* %56 to i64
  %60 = ptrtoint i32* %15 to i64
  %61 = sub i64 %59, %60
  %62 = ashr exact i64 %61, 2
  br label %63

63:                                               ; preds = %52, %33, %55, %58
  %64 = phi i64 [ %62, %58 ], [ -1, %55 ], [ -1, %33 ], [ -1, %52 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %18) #12
  ret i64 %64
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE12find_last_ofES4_m(%"class.base::BasicStringPiece.13"*, i32*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %31, label %10

10:                                               ; preds = %4
  %11 = add i64 %8, -1
  %12 = icmp ult i64 %11, %3
  %13 = select i1 %12, i64 %11, i64 %3
  %14 = getelementptr inbounds i32, i32* %1, i64 %2
  %15 = icmp eq i64 %2, 0
  br label %16

16:                                               ; preds = %28, %10
  %17 = phi i64 [ %13, %10 ], [ %30, %28 ]
  br i1 %15, label %28, label %18

18:                                               ; preds = %16
  %19 = getelementptr inbounds i32, i32* %6, i64 %17
  %20 = load i32, i32* %19, align 4
  br label %23

21:                                               ; preds = %23
  %22 = icmp eq i32* %27, %14
  br i1 %22, label %28, label %23

23:                                               ; preds = %21, %18
  %24 = phi i32* [ %1, %18 ], [ %27, %21 ]
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %20, %25
  %27 = getelementptr inbounds i32, i32* %24, i64 1
  br i1 %26, label %31, label %21

28:                                               ; preds = %21, %16
  %29 = icmp eq i64 %17, 0
  %30 = add i64 %17, -1
  br i1 %29, label %31, label %16

31:                                               ; preds = %28, %23, %4
  %32 = phi i64 [ -1, %4 ], [ %17, %23 ], [ -1, %28 ]
  ret i64 %32
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN4base8internal12find_last_ofENS_16BasicStringPieceIwNSt3__111char_traitsIwEEEES5_m(i32* nocapture readonly, i64, i32* readonly, i64, i64) local_unnamed_addr #4 {
  %6 = icmp eq i64 %1, 0
  br i1 %6, label %28, label %7

7:                                                ; preds = %5
  %8 = add i64 %1, -1
  %9 = icmp ult i64 %8, %4
  %10 = select i1 %9, i64 %8, i64 %4
  %11 = getelementptr inbounds i32, i32* %2, i64 %3
  %12 = icmp eq i64 %3, 0
  br label %13

13:                                               ; preds = %25, %7
  %14 = phi i64 [ %10, %7 ], [ %27, %25 ]
  br i1 %12, label %25, label %15

15:                                               ; preds = %13
  %16 = getelementptr inbounds i32, i32* %0, i64 %14
  %17 = load i32, i32* %16, align 4
  br label %20

18:                                               ; preds = %20
  %19 = icmp eq i32* %24, %11
  br i1 %19, label %25, label %20

20:                                               ; preds = %18, %15
  %21 = phi i32* [ %2, %15 ], [ %24, %18 ]
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %17, %22
  %24 = getelementptr inbounds i32, i32* %21, i64 1
  br i1 %23, label %28, label %18

25:                                               ; preds = %18, %13
  %26 = icmp eq i64 %14, 0
  %27 = add i64 %14, -1
  br i1 %26, label %28, label %13

28:                                               ; preds = %25, %20, %5
  %29 = phi i64 [ -1, %5 ], [ %14, %20 ], [ -1, %25 ]
  ret i64 %29
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE12find_last_ofEwm(%"class.base::BasicStringPiece.13"*, i32 signext, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %24, label %7

7:                                                ; preds = %3
  %8 = add i64 %5, -1
  %9 = icmp ult i64 %8, %2
  %10 = select i1 %9, i64 %8, i64 %2
  %11 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %12 = load i32*, i32** %11, align 8
  %13 = getelementptr inbounds i32, i32* %12, i64 %10
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, %1
  br i1 %15, label %24, label %16

16:                                               ; preds = %7, %19
  %17 = phi i64 [ %20, %19 ], [ %10, %7 ]
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %16
  %20 = add i64 %17, -1
  %21 = getelementptr inbounds i32, i32* %12, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, %1
  br i1 %23, label %24, label %16

24:                                               ; preds = %16, %19, %3, %7
  %25 = phi i64 [ -1, %3 ], [ %10, %7 ], [ %20, %19 ], [ -1, %16 ]
  ret i64 %25
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE12find_last_ofEPKwmm(%"class.base::BasicStringPiece.13"*, i32*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %31, label %10

10:                                               ; preds = %4
  %11 = add i64 %8, -1
  %12 = icmp ult i64 %11, %2
  %13 = select i1 %12, i64 %11, i64 %2
  %14 = getelementptr inbounds i32, i32* %1, i64 %3
  %15 = icmp eq i64 %3, 0
  br label %16

16:                                               ; preds = %28, %10
  %17 = phi i64 [ %13, %10 ], [ %30, %28 ]
  br i1 %15, label %28, label %18

18:                                               ; preds = %16
  %19 = getelementptr inbounds i32, i32* %6, i64 %17
  %20 = load i32, i32* %19, align 4
  br label %23

21:                                               ; preds = %23
  %22 = icmp eq i32* %27, %14
  br i1 %22, label %28, label %23

23:                                               ; preds = %21, %18
  %24 = phi i32* [ %1, %18 ], [ %27, %21 ]
  %25 = load i32, i32* %24, align 4
  %26 = icmp eq i32 %20, %25
  %27 = getelementptr inbounds i32, i32* %24, i64 1
  br i1 %26, label %31, label %21

28:                                               ; preds = %21, %16
  %29 = icmp eq i64 %17, 0
  %30 = add i64 %17, -1
  br i1 %29, label %31, label %16

31:                                               ; preds = %28, %23, %4
  %32 = phi i64 [ -1, %4 ], [ %17, %23 ], [ -1, %28 ]
  ret i64 %32
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE12find_last_ofEPKwm(%"class.base::BasicStringPiece.13"*, i32*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = icmp eq i32* %1, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %3
  %7 = tail call i64 @wcslen(i32* nonnull %1) #12
  br label %11

8:                                                ; preds = %3
  %9 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %10 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #12
  br label %11

11:                                               ; preds = %6, %8
  %12 = phi i64 [ 0, %8 ], [ %7, %6 ]
  %13 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %14 = load i32*, i32** %13, align 8
  %15 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %39, label %18

18:                                               ; preds = %11
  %19 = add i64 %16, -1
  %20 = icmp ult i64 %19, %2
  %21 = select i1 %20, i64 %19, i64 %2
  %22 = getelementptr inbounds i32, i32* %1, i64 %12
  %23 = icmp eq i64 %12, 0
  br label %24

24:                                               ; preds = %36, %18
  %25 = phi i64 [ %21, %18 ], [ %38, %36 ]
  br i1 %23, label %36, label %26

26:                                               ; preds = %24
  %27 = getelementptr inbounds i32, i32* %14, i64 %25
  %28 = load i32, i32* %27, align 4
  br label %31

29:                                               ; preds = %31
  %30 = icmp eq i32* %35, %22
  br i1 %30, label %36, label %31

31:                                               ; preds = %29, %26
  %32 = phi i32* [ %1, %26 ], [ %35, %29 ]
  %33 = load i32, i32* %32, align 4
  %34 = icmp eq i32 %28, %33
  %35 = getelementptr inbounds i32, i32* %32, i64 1
  br i1 %34, label %39, label %29

36:                                               ; preds = %29, %24
  %37 = icmp eq i64 %25, 0
  %38 = add i64 %25, -1
  br i1 %37, label %39, label %24

39:                                               ; preds = %36, %31, %11
  %40 = phi i64 [ -1, %11 ], [ %25, %31 ], [ -1, %36 ]
  ret i64 %40
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE17find_first_not_ofES4_m(%"class.base::BasicStringPiece.13"*, i32*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to %"class.base::BasicStringPiece.13"*
  %7 = bitcast %"class.base::BasicStringPiece.13"* %0 to <2 x i64>*
  %8 = load <2 x i64>, <2 x i64>* %7, align 8
  %9 = bitcast <2 x i64>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #12
  %10 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %6, i64 0, i32 1
  store <2 x i64> %8, <2 x i64>* %5, align 16
  %11 = extractelement <2 x i64> %8, i32 1
  %12 = icmp ugt i64 %11, %3
  br i1 %12, label %13, label %36

13:                                               ; preds = %4
  %14 = getelementptr inbounds i32, i32* %1, i64 %2
  %15 = icmp eq i64 %2, 0
  br label %19

16:                                               ; preds = %32
  %17 = load i64, i64* %10, align 8
  %18 = icmp ult i64 %35, %17
  br i1 %18, label %19, label %36

19:                                               ; preds = %16, %13
  %20 = phi i64 [ %3, %13 ], [ %35, %16 ]
  br i1 %15, label %36, label %21

21:                                               ; preds = %19, %21
  %22 = phi i32* [ %29, %21 ], [ %1, %19 ]
  %23 = phi i8 [ %28, %21 ], [ 0, %19 ]
  %24 = load i32, i32* %22, align 4
  %25 = call dereferenceable(4) i32* @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE2atEm(%"class.base::BasicStringPiece.13"* nonnull %6, i64 %20) #12
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, %24
  %28 = select i1 %27, i8 1, i8 %23
  %29 = getelementptr inbounds i32, i32* %22, i64 1
  %30 = icmp eq i32* %29, %14
  %31 = or i1 %30, %27
  br i1 %31, label %32, label %21

32:                                               ; preds = %21
  %33 = and i8 %28, 1
  %34 = icmp eq i8 %33, 0
  %35 = add nuw i64 %20, 1
  br i1 %34, label %36, label %16

36:                                               ; preds = %16, %19, %32, %4
  %37 = phi i64 [ -1, %4 ], [ %3, %19 ], [ -1, %16 ], [ %20, %32 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #12
  ret i64 %37
}

; Function Attrs: nounwind ssp uwtable
define hidden i64 @_ZN4base8internal17find_first_not_ofENS_16BasicStringPieceIwNSt3__111char_traitsIwEEEES5_m(i32*, i64, i32* readonly, i64, i64) local_unnamed_addr #0 {
  %6 = alloca %"class.base::BasicStringPiece.13", align 8
  %7 = bitcast %"class.base::BasicStringPiece.13"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %7)
  %8 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %6, i64 0, i32 0
  store i32* %0, i32** %8, align 8
  %9 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %6, i64 0, i32 1
  store i64 %1, i64* %9, align 8
  %10 = icmp ult i64 %4, %1
  br i1 %10, label %11, label %34

11:                                               ; preds = %5
  %12 = getelementptr inbounds i32, i32* %2, i64 %3
  %13 = icmp eq i64 %3, 0
  br label %17

14:                                               ; preds = %30
  %15 = load i64, i64* %9, align 8
  %16 = icmp ult i64 %33, %15
  br i1 %16, label %17, label %34

17:                                               ; preds = %14, %11
  %18 = phi i64 [ %4, %11 ], [ %33, %14 ]
  br i1 %13, label %34, label %19

19:                                               ; preds = %17, %19
  %20 = phi i32* [ %27, %19 ], [ %2, %17 ]
  %21 = phi i8 [ %26, %19 ], [ 0, %17 ]
  %22 = load i32, i32* %20, align 4
  %23 = call dereferenceable(4) i32* @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE2atEm(%"class.base::BasicStringPiece.13"* nonnull %6, i64 %18) #12
  %24 = load i32, i32* %23, align 4
  %25 = icmp eq i32 %24, %22
  %26 = select i1 %25, i8 1, i8 %21
  %27 = getelementptr inbounds i32, i32* %20, i64 1
  %28 = icmp eq i32* %27, %12
  %29 = or i1 %28, %25
  br i1 %29, label %30, label %19

30:                                               ; preds = %19
  %31 = and i8 %26, 1
  %32 = icmp eq i8 %31, 0
  %33 = add nuw i64 %18, 1
  br i1 %32, label %34, label %14

34:                                               ; preds = %14, %17, %30, %5
  %35 = phi i64 [ -1, %5 ], [ %18, %30 ], [ -1, %14 ], [ %4, %17 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %7)
  ret i64 %35
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE17find_first_not_ofEwm(%"class.base::BasicStringPiece.13"*, i32 signext, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp ugt i64 %5, %2
  br i1 %6, label %7, label %18

7:                                                ; preds = %3
  %8 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %9 = load i32*, i32** %8, align 8
  br label %10

10:                                               ; preds = %15, %7
  %11 = phi i64 [ %2, %7 ], [ %16, %15 ]
  %12 = getelementptr inbounds i32, i32* %9, i64 %11
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %13, %1
  br i1 %14, label %15, label %18

15:                                               ; preds = %10
  %16 = add i64 %11, 1
  %17 = icmp eq i64 %16, %5
  br i1 %17, label %18, label %10

18:                                               ; preds = %10, %15, %3
  %19 = phi i64 [ -1, %3 ], [ %11, %10 ], [ -1, %15 ]
  ret i64 %19
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE17find_first_not_ofEPKwmm(%"class.base::BasicStringPiece.13"*, i32*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = alloca <2 x i64>, align 16
  %6 = bitcast <2 x i64>* %5 to %"class.base::BasicStringPiece.13"*
  %7 = bitcast %"class.base::BasicStringPiece.13"* %0 to <2 x i64>*
  %8 = load <2 x i64>, <2 x i64>* %7, align 8
  %9 = bitcast <2 x i64>* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %9) #12
  %10 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %6, i64 0, i32 1
  store <2 x i64> %8, <2 x i64>* %5, align 16
  %11 = extractelement <2 x i64> %8, i32 1
  %12 = icmp ugt i64 %11, %2
  br i1 %12, label %13, label %36

13:                                               ; preds = %4
  %14 = getelementptr inbounds i32, i32* %1, i64 %3
  %15 = icmp eq i64 %3, 0
  br label %19

16:                                               ; preds = %32
  %17 = load i64, i64* %10, align 8
  %18 = icmp ult i64 %35, %17
  br i1 %18, label %19, label %36

19:                                               ; preds = %16, %13
  %20 = phi i64 [ %2, %13 ], [ %35, %16 ]
  br i1 %15, label %36, label %21

21:                                               ; preds = %19, %21
  %22 = phi i32* [ %29, %21 ], [ %1, %19 ]
  %23 = phi i8 [ %28, %21 ], [ 0, %19 ]
  %24 = load i32, i32* %22, align 4
  %25 = call dereferenceable(4) i32* @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE2atEm(%"class.base::BasicStringPiece.13"* nonnull %6, i64 %20) #12
  %26 = load i32, i32* %25, align 4
  %27 = icmp eq i32 %26, %24
  %28 = select i1 %27, i8 1, i8 %23
  %29 = getelementptr inbounds i32, i32* %22, i64 1
  %30 = icmp eq i32* %29, %14
  %31 = or i1 %30, %27
  br i1 %31, label %32, label %21

32:                                               ; preds = %21
  %33 = and i8 %28, 1
  %34 = icmp eq i8 %33, 0
  %35 = add nuw i64 %20, 1
  br i1 %34, label %36, label %16

36:                                               ; preds = %16, %19, %32, %4
  %37 = phi i64 [ -1, %4 ], [ %20, %32 ], [ -1, %16 ], [ %2, %19 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %9) #12
  ret i64 %37
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE17find_first_not_ofEPKwm(%"class.base::BasicStringPiece.13"*, i32*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca <2 x i64>, align 16
  %5 = bitcast <2 x i64>* %4 to %"class.base::BasicStringPiece.13"*
  %6 = alloca %"class.logging::CheckError", align 8
  %7 = icmp eq i32* %1, null
  br i1 %7, label %10, label %8

8:                                                ; preds = %3
  %9 = tail call i64 @wcslen(i32* nonnull %1) #12
  br label %13

10:                                               ; preds = %3
  %11 = bitcast %"class.logging::CheckError"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %11) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %6, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %12 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %6) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %6) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %11) #12
  br label %13

13:                                               ; preds = %8, %10
  %14 = phi i64 [ 0, %10 ], [ %9, %8 ]
  %15 = bitcast %"class.base::BasicStringPiece.13"* %0 to <2 x i64>*
  %16 = load <2 x i64>, <2 x i64>* %15, align 8
  %17 = bitcast <2 x i64>* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %17) #12
  %18 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %5, i64 0, i32 1
  store <2 x i64> %16, <2 x i64>* %4, align 16
  %19 = extractelement <2 x i64> %16, i32 1
  %20 = icmp ugt i64 %19, %2
  br i1 %20, label %21, label %44

21:                                               ; preds = %13
  %22 = getelementptr inbounds i32, i32* %1, i64 %14
  %23 = icmp eq i64 %14, 0
  br label %27

24:                                               ; preds = %40
  %25 = load i64, i64* %18, align 8
  %26 = icmp ult i64 %43, %25
  br i1 %26, label %27, label %44

27:                                               ; preds = %24, %21
  %28 = phi i64 [ %2, %21 ], [ %43, %24 ]
  br i1 %23, label %44, label %29

29:                                               ; preds = %27, %29
  %30 = phi i32* [ %37, %29 ], [ %1, %27 ]
  %31 = phi i8 [ %36, %29 ], [ 0, %27 ]
  %32 = load i32, i32* %30, align 4
  %33 = call dereferenceable(4) i32* @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE2atEm(%"class.base::BasicStringPiece.13"* nonnull %5, i64 %28) #12
  %34 = load i32, i32* %33, align 4
  %35 = icmp eq i32 %34, %32
  %36 = select i1 %35, i8 1, i8 %31
  %37 = getelementptr inbounds i32, i32* %30, i64 1
  %38 = icmp eq i32* %37, %22
  %39 = or i1 %38, %35
  br i1 %39, label %40, label %29

40:                                               ; preds = %29
  %41 = and i8 %36, 1
  %42 = icmp eq i8 %41, 0
  %43 = add nuw i64 %28, 1
  br i1 %42, label %44, label %24

44:                                               ; preds = %24, %27, %40, %13
  %45 = phi i64 [ -1, %13 ], [ %28, %40 ], [ -1, %24 ], [ %2, %27 ]
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %17) #12
  ret i64 %45
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE16find_last_not_ofES4_m(%"class.base::BasicStringPiece.13"*, i32*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %40, label %10

10:                                               ; preds = %4
  %11 = add i64 %8, -1
  %12 = icmp ult i64 %11, %3
  %13 = select i1 %12, i64 %11, i64 %3
  %14 = getelementptr inbounds i32, i32* %1, i64 %2
  %15 = icmp eq i64 %2, 0
  br i1 %15, label %40, label %16

16:                                               ; preds = %10, %37
  %17 = phi i64 [ %36, %37 ], [ undef, %10 ]
  %18 = phi i64 [ %38, %37 ], [ %13, %10 ]
  %19 = getelementptr inbounds i32, i32* %6, i64 %18
  %20 = load i32, i32* %19, align 4
  br label %21

21:                                               ; preds = %21, %16
  %22 = phi i32* [ %1, %16 ], [ %27, %21 ]
  %23 = phi i8 [ 0, %16 ], [ %26, %21 ]
  %24 = load i32, i32* %22, align 4
  %25 = icmp eq i32 %20, %24
  %26 = select i1 %25, i8 1, i8 %23
  %27 = getelementptr inbounds i32, i32* %22, i64 1
  %28 = icmp eq i32* %27, %14
  %29 = or i1 %28, %25
  br i1 %29, label %30, label %21

30:                                               ; preds = %21
  %31 = and i8 %26, 1
  %32 = icmp eq i8 %31, 0
  %33 = icmp eq i64 %18, 0
  %34 = select i1 %33, i32 2, i32 0
  %35 = select i1 %32, i32 1, i32 %34
  %36 = select i1 %32, i64 %18, i64 %17
  switch i32 %35, label %40 [
    i32 0, label %37
    i32 1, label %39
  ]

37:                                               ; preds = %30
  %38 = add i64 %18, -1
  br label %16

39:                                               ; preds = %30
  br label %40

40:                                               ; preds = %30, %39, %4, %10
  %41 = phi i64 [ -1, %4 ], [ %13, %10 ], [ %36, %39 ], [ -1, %30 ]
  ret i64 %41
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i64 @_ZN4base8internal16find_last_not_ofENS_16BasicStringPieceIwNSt3__111char_traitsIwEEEES5_m(i32* nocapture readonly, i64, i32* readonly, i64, i64) local_unnamed_addr #4 {
  %6 = icmp eq i64 %1, 0
  br i1 %6, label %37, label %7

7:                                                ; preds = %5
  %8 = add i64 %1, -1
  %9 = icmp ult i64 %8, %4
  %10 = select i1 %9, i64 %8, i64 %4
  %11 = getelementptr inbounds i32, i32* %2, i64 %3
  %12 = icmp eq i64 %3, 0
  br i1 %12, label %37, label %13

13:                                               ; preds = %7, %34
  %14 = phi i64 [ %33, %34 ], [ undef, %7 ]
  %15 = phi i64 [ %35, %34 ], [ %10, %7 ]
  %16 = getelementptr inbounds i32, i32* %0, i64 %15
  %17 = load i32, i32* %16, align 4
  br label %18

18:                                               ; preds = %18, %13
  %19 = phi i32* [ %2, %13 ], [ %24, %18 ]
  %20 = phi i8 [ 0, %13 ], [ %23, %18 ]
  %21 = load i32, i32* %19, align 4
  %22 = icmp eq i32 %17, %21
  %23 = select i1 %22, i8 1, i8 %20
  %24 = getelementptr inbounds i32, i32* %19, i64 1
  %25 = icmp eq i32* %24, %11
  %26 = or i1 %25, %22
  br i1 %26, label %27, label %18

27:                                               ; preds = %18
  %28 = and i8 %23, 1
  %29 = icmp eq i8 %28, 0
  %30 = icmp eq i64 %15, 0
  %31 = select i1 %30, i32 2, i32 0
  %32 = select i1 %29, i32 1, i32 %31
  %33 = select i1 %29, i64 %15, i64 %14
  switch i32 %32, label %36 [
    i32 0, label %34
    i32 1, label %37
  ]

34:                                               ; preds = %27
  %35 = add i64 %15, -1
  br label %13

36:                                               ; preds = %27
  br label %37

37:                                               ; preds = %27, %36, %7, %5
  %38 = phi i64 [ -1, %5 ], [ %10, %7 ], [ -1, %36 ], [ %33, %27 ]
  ret i64 %38
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE16find_last_not_ofEwm(%"class.base::BasicStringPiece.13"*, i32 signext, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %5 = load i64, i64* %4, align 8
  %6 = icmp eq i64 %5, 0
  br i1 %6, label %24, label %7

7:                                                ; preds = %3
  %8 = add i64 %5, -1
  %9 = icmp ult i64 %8, %2
  %10 = select i1 %9, i64 %8, i64 %2
  %11 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %12 = load i32*, i32** %11, align 8
  %13 = getelementptr inbounds i32, i32* %12, i64 %10
  %14 = load i32, i32* %13, align 4
  %15 = icmp eq i32 %14, %1
  br i1 %15, label %16, label %24

16:                                               ; preds = %7, %19
  %17 = phi i64 [ %20, %19 ], [ %10, %7 ]
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %24, label %19

19:                                               ; preds = %16
  %20 = add i64 %17, -1
  %21 = getelementptr inbounds i32, i32* %12, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = icmp eq i32 %22, %1
  br i1 %23, label %16, label %24

24:                                               ; preds = %16, %19, %7, %3
  %25 = phi i64 [ -1, %3 ], [ %10, %7 ], [ -1, %16 ], [ %20, %19 ]
  ret i64 %25
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE16find_last_not_ofEPKwmm(%"class.base::BasicStringPiece.13"*, i32*, i64, i64) local_unnamed_addr #0 comdat align 2 {
  %5 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %8 = load i64, i64* %7, align 8
  %9 = icmp eq i64 %8, 0
  br i1 %9, label %40, label %10

10:                                               ; preds = %4
  %11 = add i64 %8, -1
  %12 = icmp ult i64 %11, %2
  %13 = select i1 %12, i64 %11, i64 %2
  %14 = getelementptr inbounds i32, i32* %1, i64 %3
  %15 = icmp eq i64 %3, 0
  br i1 %15, label %40, label %16

16:                                               ; preds = %10, %37
  %17 = phi i64 [ %36, %37 ], [ undef, %10 ]
  %18 = phi i64 [ %38, %37 ], [ %13, %10 ]
  %19 = getelementptr inbounds i32, i32* %6, i64 %18
  %20 = load i32, i32* %19, align 4
  br label %21

21:                                               ; preds = %21, %16
  %22 = phi i32* [ %1, %16 ], [ %27, %21 ]
  %23 = phi i8 [ 0, %16 ], [ %26, %21 ]
  %24 = load i32, i32* %22, align 4
  %25 = icmp eq i32 %20, %24
  %26 = select i1 %25, i8 1, i8 %23
  %27 = getelementptr inbounds i32, i32* %22, i64 1
  %28 = icmp eq i32* %27, %14
  %29 = or i1 %28, %25
  br i1 %29, label %30, label %21

30:                                               ; preds = %21
  %31 = and i8 %26, 1
  %32 = icmp eq i8 %31, 0
  %33 = icmp eq i64 %18, 0
  %34 = select i1 %33, i32 2, i32 0
  %35 = select i1 %32, i32 1, i32 %34
  %36 = select i1 %32, i64 %18, i64 %17
  switch i32 %35, label %39 [
    i32 0, label %37
    i32 1, label %40
  ]

37:                                               ; preds = %30
  %38 = add i64 %18, -1
  br label %16

39:                                               ; preds = %30
  br label %40

40:                                               ; preds = %30, %39, %4, %10
  %41 = phi i64 [ -1, %4 ], [ %13, %10 ], [ -1, %39 ], [ %36, %30 ]
  ret i64 %41
}

; Function Attrs: nounwind ssp uwtable
define weak_odr hidden i64 @_ZNK4base16BasicStringPieceIwNSt3__111char_traitsIwEEE16find_last_not_ofEPKwm(%"class.base::BasicStringPiece.13"*, i32*, i64) local_unnamed_addr #0 comdat align 2 {
  %4 = alloca %"class.logging::CheckError", align 8
  %5 = icmp eq i32* %1, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %3
  %7 = tail call i64 @wcslen(i32* nonnull %1) #12
  br label %11

8:                                                ; preds = %3
  %9 = bitcast %"class.logging::CheckError"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %9) #12
  call void @_ZN7logging10CheckError5CheckEPKciS2_(%"class.logging::CheckError"* nonnull sret %4, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i32 125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)) #12
  %10 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN7logging10CheckError6streamEv(%"class.logging::CheckError"* nonnull %4) #12
  call void @_ZN7logging10CheckErrorD1Ev(%"class.logging::CheckError"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %9) #12
  br label %11

11:                                               ; preds = %6, %8
  %12 = phi i64 [ 0, %8 ], [ %7, %6 ]
  %13 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 0
  %14 = load i32*, i32** %13, align 8
  %15 = getelementptr inbounds %"class.base::BasicStringPiece.13", %"class.base::BasicStringPiece.13"* %0, i64 0, i32 1
  %16 = load i64, i64* %15, align 8
  %17 = icmp eq i64 %16, 0
  br i1 %17, label %48, label %18

18:                                               ; preds = %11
  %19 = add i64 %16, -1
  %20 = icmp ult i64 %19, %2
  %21 = select i1 %20, i64 %19, i64 %2
  %22 = getelementptr inbounds i32, i32* %1, i64 %12
  %23 = icmp eq i64 %12, 0
  br i1 %23, label %48, label %24

24:                                               ; preds = %18, %45
  %25 = phi i64 [ %44, %45 ], [ undef, %18 ]
  %26 = phi i64 [ %46, %45 ], [ %21, %18 ]
  %27 = getelementptr inbounds i32, i32* %14, i64 %26
  %28 = load i32, i32* %27, align 4
  br label %29

29:                                               ; preds = %29, %24
  %30 = phi i32* [ %1, %24 ], [ %35, %29 ]
  %31 = phi i8 [ 0, %24 ], [ %34, %29 ]
  %32 = load i32, i32* %30, align 4
  %33 = icmp eq i32 %28, %32
  %34 = select i1 %33, i8 1, i8 %31
  %35 = getelementptr inbounds i32, i32* %30, i64 1
  %36 = icmp eq i32* %35, %22
  %37 = or i1 %36, %33
  br i1 %37, label %38, label %29

38:                                               ; preds = %29
  %39 = and i8 %34, 1
  %40 = icmp eq i8 %39, 0
  %41 = icmp eq i64 %26, 0
  %42 = select i1 %41, i32 2, i32 0
  %43 = select i1 %40, i32 1, i32 %42
  %44 = select i1 %40, i64 %26, i64 %25
  switch i32 %43, label %47 [
    i32 0, label %45
    i32 1, label %48
  ]

45:                                               ; preds = %38
  %46 = add i64 %26, -1
  br label %24

47:                                               ; preds = %38
  br label %48

48:                                               ; preds = %38, %47, %11, %18
  %49 = phi i64 [ -1, %11 ], [ %21, %18 ], [ -1, %47 ], [ %44, %38 ]
  ret i64 %49
}

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN4baselsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEENS_16BasicStringPieceIcS3_EE(%"class.std::__1::basic_ostream"* returned dereferenceable(160), i8*, i64) local_unnamed_addr #0 {
  %4 = tail call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5writeEPKcl(%"class.std::__1::basic_ostream"* %0, i8* %1, i64 %2) #12
  ret %"class.std::__1::basic_ostream"* %0
}

declare dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5writeEPKcl(%"class.std::__1::basic_ostream"*, i8*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN4baselsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEENS_16BasicStringPieceIDsNS2_IDsEEEE(%"class.std::__1::basic_ostream"* dereferenceable(160), i16*, i64) local_unnamed_addr #0 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #12
  call void @_ZN4base11UTF16ToUTF8ENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string"* nonnull sret %4, i16* %1, i64 %2) #12
  %6 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %6, i64 0, i32 1, i32 0
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = zext i8 %8 to i64
  %15 = select i1 %9, i8* %11, i8* %5
  %16 = select i1 %9, i64 %13, i64 %14
  %17 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* %15, i64 %16) #12
  %18 = load i8, i8* %7, align 1
  %19 = icmp slt i8 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %3
  %21 = load i8*, i8** %10, align 8
  call void @_ZdlPv(i8* %21) #14
  br label %22

22:                                               ; preds = %3, %20
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #12
  ret %"class.std::__1::basic_ostream"* %17
}

declare void @_ZN4base11UTF16ToUTF8ENS_16BasicStringPieceIDsNSt3__111char_traitsIDsEEEE(%"class.std::__1::basic_string"* sret, i16*, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZN4baselsERNSt3__113basic_ostreamIcNS0_11char_traitsIcEEEENS_16BasicStringPieceIwNS2_IwEEEE(%"class.std::__1::basic_ostream"* dereferenceable(160), i32*, i64) local_unnamed_addr #0 {
  %4 = alloca %"class.std::__1::basic_string", align 8
  %5 = bitcast %"class.std::__1::basic_string"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %5) #12
  call void @_ZN4base10WideToUTF8ENS_16BasicStringPieceIwNSt3__111char_traitsIwEEEE(%"class.std::__1::basic_string"* nonnull sret %4, i32* %1, i64 %2) #12
  %6 = bitcast %"class.std::__1::basic_string"* %4 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %7 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %6, i64 0, i32 1, i32 0
  %8 = load i8, i8* %7, align 1
  %9 = icmp slt i8 %8, 0
  %10 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %13 = load i64, i64* %12, align 8
  %14 = zext i8 %8 to i64
  %15 = select i1 %9, i8* %11, i8* %5
  %16 = select i1 %9, i64 %13, i64 %14
  %17 = call dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160) %0, i8* %15, i64 %16) #12
  %18 = load i8, i8* %7, align 1
  %19 = icmp slt i8 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %3
  %21 = load i8*, i8** %10, align 8
  call void @_ZdlPv(i8* %21) #14
  br label %22

22:                                               ; preds = %3, %20
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %5) #12
  ret %"class.std::__1::basic_ostream"* %17
}

declare void @_ZN4base10WideToUTF8ENS_16BasicStringPieceIwNSt3__111char_traitsIwEEEE(%"class.std::__1::basic_string"* sret, i32*, i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @strlen(i8* nocapture) local_unnamed_addr #6

declare i8* @_ZN7logging15CheckOpValueStrEm(i64) local_unnamed_addr #2

declare void @_ZN7logging13CheckOpResultC1EPKcPcS3_(%"class.logging::CheckOpResult"*, i8*, i8*, i8*) unnamed_addr #2

; Function Attrs: nofree nounwind readonly
declare i32 @memcmp(i8* nocapture, i8* nocapture, i64) local_unnamed_addr #7

; Function Attrs: nofree nounwind readonly
declare i8* @memchr(i8*, i32, i64) local_unnamed_addr #7

; Function Attrs: argmemonly nofree nounwind readonly
declare i64 @wcslen(i32* nocapture) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32* @wmemcpy(i32*, i32*, i64) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32 @wmemcmp(i32*, i32*, i64) local_unnamed_addr #3

; Function Attrs: nounwind
declare i32* @wmemchr(i32*, i32 signext, i64) local_unnamed_addr #3

; Function Attrs: noreturn
declare void @_ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(%"class.std::__1::__basic_string_common"*) local_unnamed_addr #8

; Function Attrs: noreturn nounwind
declare void @abort() local_unnamed_addr #9

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #11

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden dereferenceable(160) %"class.std::__1::basic_ostream"* @_ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(%"class.std::__1::basic_ostream"* dereferenceable(160), i8*, i64) local_unnamed_addr #0 comdat {
  %4 = alloca %"class.std::__1::locale", align 8
  %5 = alloca %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", align 8
  %6 = getelementptr inbounds %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry", %"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* %5, i64 0, i32 0
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %6) #12
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %6, i8 -86, i64 16, i1 false)
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5, %"class.std::__1::basic_ostream"* dereferenceable(160) %0) #12
  %7 = load i8, i8* %6, align 8, !range !4
  %8 = icmp eq i8 %7, 0
  br i1 %8, label %58, label %9

9:                                                ; preds = %3
  %10 = bitcast %"class.std::__1::basic_ostream"* %0 to i8**
  %11 = load i8*, i8** %10, align 8
  %12 = getelementptr i8, i8* %11, i64 -24
  %13 = bitcast i8* %12 to i64*
  %14 = load i64, i64* %13, align 8
  %15 = bitcast %"class.std::__1::basic_ostream"* %0 to i8*
  %16 = getelementptr inbounds i8, i8* %15, i64 %14
  %17 = getelementptr inbounds i8, i8* %16, i64 40
  %18 = bitcast i8* %17 to %"class.std::__1::basic_streambuf"**
  %19 = load %"class.std::__1::basic_streambuf"*, %"class.std::__1::basic_streambuf"** %18, align 8
  %20 = bitcast i8* %16 to %"class.std::__1::ios_base"*
  %21 = getelementptr inbounds i8, i8* %16, i64 8
  %22 = bitcast i8* %21 to i32*
  %23 = load i32, i32* %22, align 8
  %24 = and i32 %23, 176
  %25 = icmp eq i32 %24, 32
  %26 = getelementptr inbounds i8, i8* %1, i64 %2
  %27 = select i1 %25, i8* %26, i8* %1
  %28 = getelementptr inbounds i8, i8* %16, i64 144
  %29 = bitcast i8* %28 to i32*
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, -1
  br i1 %31, label %32, label %42

32:                                               ; preds = %9
  %33 = bitcast %"class.std::__1::locale"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %33) #12
  call void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* nonnull sret %4, %"class.std::__1::ios_base"* %20) #12
  %34 = call %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"* nonnull %4, %"class.std::__1::locale::id"* nonnull dereferenceable(16) @_ZNSt3__15ctypeIcE2idE) #12
  %35 = bitcast %"class.std::__1::locale::facet"* %34 to %"class.std::__1::ctype"*
  %36 = bitcast %"class.std::__1::locale::facet"* %34 to i8 (%"class.std::__1::ctype"*, i8)***
  %37 = load i8 (%"class.std::__1::ctype"*, i8)**, i8 (%"class.std::__1::ctype"*, i8)*** %36, align 8
  %38 = getelementptr inbounds i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %37, i64 7
  %39 = load i8 (%"class.std::__1::ctype"*, i8)*, i8 (%"class.std::__1::ctype"*, i8)** %38, align 8
  %40 = call signext i8 %39(%"class.std::__1::ctype"* %35, i8 signext 32) #12
  call void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"* nonnull %4) #12
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %33) #12
  %41 = sext i8 %40 to i32
  store i32 %41, i32* %29, align 8
  br label %42

42:                                               ; preds = %9, %32
  %43 = phi i32 [ %41, %32 ], [ %30, %9 ]
  %44 = trunc i32 %43 to i8
  %45 = call %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"* %19, i8* %1, i8* %27, i8* %26, %"class.std::__1::ios_base"* dereferenceable(136) %20, i8 signext %44)
  %46 = icmp eq %"class.std::__1::basic_streambuf"* %45, null
  br i1 %46, label %47, label %58

47:                                               ; preds = %42
  %48 = load i8*, i8** %10, align 8
  %49 = getelementptr i8, i8* %48, i64 -24
  %50 = bitcast i8* %49 to i64*
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = bitcast i8* %52 to %"class.std::__1::ios_base"*
  %54 = getelementptr inbounds i8, i8* %52, i64 32
  %55 = bitcast i8* %54 to i32*
  %56 = load i32, i32* %55, align 8
  %57 = or i32 %56, 5
  call void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"* %53, i32 %57) #12
  br label %58

58:                                               ; preds = %3, %42, %47
  call void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"* nonnull %5) #12
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %6) #12
  ret %"class.std::__1::basic_ostream"* %0
}

declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*, %"class.std::__1::basic_ostream"* dereferenceable(160)) unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden %"class.std::__1::basic_streambuf"* @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_(%"class.std::__1::basic_streambuf"*, i8*, i8*, i8*, %"class.std::__1::ios_base"* dereferenceable(136), i8 signext) local_unnamed_addr #0 comdat {
  %7 = alloca %"class.std::__1::basic_string", align 8
  %8 = icmp eq %"class.std::__1::basic_streambuf"* %0, null
  br i1 %8, label %78, label %9

9:                                                ; preds = %6
  %10 = ptrtoint i8* %3 to i64
  %11 = ptrtoint i8* %1 to i64
  %12 = sub i64 %10, %11
  %13 = getelementptr inbounds %"class.std::__1::ios_base", %"class.std::__1::ios_base"* %4, i64 0, i32 3
  %14 = load i64, i64* %13, align 8
  %15 = icmp sgt i64 %14, %12
  %16 = sub nsw i64 %14, %12
  %17 = select i1 %15, i64 %16, i64 0
  %18 = ptrtoint i8* %2 to i64
  %19 = sub i64 %18, %11
  %20 = icmp sgt i64 %19, 0
  br i1 %20, label %21, label %28

21:                                               ; preds = %9
  %22 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %23 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %22, align 8
  %24 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %23, i64 12
  %25 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %24, align 8
  %26 = tail call i64 %25(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %1, i64 %19) #12
  %27 = icmp eq i64 %26, %19
  br i1 %27, label %28, label %78

28:                                               ; preds = %21, %9
  %29 = icmp sgt i64 %17, 0
  br i1 %29, label %30, label %67

30:                                               ; preds = %28
  %31 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 24, i8* nonnull %31) #12
  %32 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %33 = icmp ult i64 %17, 23
  %34 = bitcast %"class.std::__1::basic_string"* %7 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %34, i8 -86, i64 24, i1 false)
  br i1 %33, label %43, label %35

35:                                               ; preds = %30
  %36 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %37 = getelementptr inbounds %"class.std::__1::basic_string", %"class.std::__1::basic_string"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %38 = add nuw i64 %17, 16
  %39 = and i64 %38, -16
  %40 = tail call i8* @_Znwm(i64 %39) #14
  store i8* %40, i8** %32, align 8
  %41 = or i64 %39, -9223372036854775808
  store i64 %41, i64* %36, align 8
  store i64 %17, i64* %37, align 8
  %42 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  br label %47

43:                                               ; preds = %30
  %44 = trunc i64 %17 to i8
  %45 = bitcast %"class.std::__1::basic_string"* %7 to %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"*
  %46 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %45, i64 0, i32 1, i32 0
  store i8 %44, i8* %46, align 1
  br label %47

47:                                               ; preds = %35, %43
  %48 = phi %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* [ %42, %35 ], [ %45, %43 ]
  %49 = phi i8* [ %40, %35 ], [ %31, %43 ]
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %49, i8 %5, i64 %17, i1 false) #12
  %50 = getelementptr inbounds i8, i8* %49, i64 %17
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short", %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__short"* %48, i64 0, i32 1, i32 0
  %52 = load i8, i8* %51, align 1
  %53 = icmp slt i8 %52, 0
  %54 = load i8*, i8** %32, align 8
  %55 = select i1 %53, i8* %54, i8* %31
  %56 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %57 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %56, align 8
  %58 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %57, i64 12
  %59 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %58, align 8
  %60 = call i64 %59(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %55, i64 %17) #12
  %61 = icmp eq i64 %60, %17
  %62 = load i8, i8* %51, align 1
  %63 = icmp slt i8 %62, 0
  br i1 %63, label %64, label %66

64:                                               ; preds = %47
  %65 = load i8*, i8** %32, align 8
  call void @_ZdlPv(i8* %65) #14
  br label %66

66:                                               ; preds = %47, %64
  call void @llvm.lifetime.end.p0i8(i64 24, i8* nonnull %31) #12
  br i1 %61, label %67, label %78

67:                                               ; preds = %66, %28
  %68 = sub i64 %10, %18
  %69 = icmp sgt i64 %68, 0
  br i1 %69, label %70, label %77

70:                                               ; preds = %67
  %71 = bitcast %"class.std::__1::basic_streambuf"* %0 to i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)***
  %72 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)**, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*** %71, align 8
  %73 = getelementptr inbounds i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %72, i64 12
  %74 = load i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)*, i64 (%"class.std::__1::basic_streambuf"*, i8*, i64)** %73, align 8
  %75 = call i64 %74(%"class.std::__1::basic_streambuf"* nonnull %0, i8* %2, i64 %68) #12
  %76 = icmp eq i64 %75, %68
  br i1 %76, label %77, label %78

77:                                               ; preds = %70, %67
  store i64 0, i64* %13, align 8
  br label %78

78:                                               ; preds = %77, %66, %21, %70, %6
  %79 = phi %"class.std::__1::basic_streambuf"* [ null, %6 ], [ %0, %77 ], [ null, %66 ], [ null, %21 ], [ null, %70 ]
  ret %"class.std::__1::basic_streambuf"* %79
}

; Function Attrs: nounwind
declare void @_ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev(%"class.std::__1::basic_ostream<char, std::__1::char_traits<char> >::sentry"*) unnamed_addr #3

declare void @_ZNKSt3__18ios_base6getlocEv(%"class.std::__1::locale"* sret, %"class.std::__1::ios_base"*) local_unnamed_addr #2

; Function Attrs: nounwind
declare void @_ZNSt3__16localeD1Ev(%"class.std::__1::locale"*) unnamed_addr #3

declare %"class.std::__1::locale::facet"* @_ZNKSt3__16locale9use_facetERNS0_2idE(%"class.std::__1::locale"*, %"class.std::__1::locale::id"* dereferenceable(16)) local_unnamed_addr #2

declare void @_ZNSt3__18ios_base5clearEj(%"class.std::__1::ios_base"*, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nofree nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #11 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { nounwind }
attributes #13 = { noreturn nounwind }
attributes #14 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = !{i8 0, i8 2}
!5 = distinct !{!5, !3}
!6 = distinct !{!6, !3}
!7 = distinct !{!7, !3}
!8 = distinct !{!8, !3}
!9 = distinct !{!9, !3}
!10 = distinct !{!10, !3}
!11 = distinct !{!11, !3}
!12 = distinct !{!12, !3}
!13 = distinct !{!13, !3}
!14 = distinct !{!14, !3}
!15 = distinct !{!15, !3}
!16 = distinct !{!16, !3}
!17 = distinct !{!17, !3}
!18 = distinct !{!18, !3}
!19 = distinct !{!19, !3}
!20 = !{!21}
!21 = distinct !{!21, !22}
!22 = distinct !{!22, !"LVerDomain"}
!23 = !{!24}
!24 = distinct !{!24, !22}
!25 = distinct !{!25, !26}
!26 = !{!"llvm.loop.isvectorized", i32 1}
!27 = distinct !{!27, !3}
!28 = distinct !{!28, !3}
!29 = distinct !{!29, !26}
!30 = !{!31}
!31 = distinct !{!31, !32}
!32 = distinct !{!32, !"LVerDomain"}
!33 = !{!34}
!34 = distinct !{!34, !32}
!35 = distinct !{!35, !26}
!36 = distinct !{!36, !3}
!37 = distinct !{!37, !3}
!38 = distinct !{!38, !26}
