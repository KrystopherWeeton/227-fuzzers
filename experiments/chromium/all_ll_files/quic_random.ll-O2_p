; ModuleID = '../../net/third_party/quiche/src/quic/core/crypto/quic_random.cc'
source_filename = "../../net/third_party/quiche/src/quic/core/crypto/quic_random.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.quic::(anonymous namespace)::DefaultRandom" = type { %"class.quic::QuicRandom" }
%"class.quic::QuicRandom" = type { i32 (...)** }

$_ZN4quic10QuicRandomD2Ev = comdat any

@_ZZN4quic10QuicRandom11GetInstanceEvE6random = internal unnamed_addr global %"class.quic::(anonymous namespace)::DefaultRandom"* null, align 8
@_ZGVZN4quic10QuicRandom11GetInstanceEvE6random = internal global i64 0, align 8
@_ZTVN4quic12_GLOBAL__N_113DefaultRandomE = internal unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* null, i8* bitcast (void (%"class.quic::QuicRandom"*)* @_ZN4quic10QuicRandomD2Ev to i8*), i8* bitcast (void (%"class.quic::(anonymous namespace)::DefaultRandom"*)* @_ZN4quic12_GLOBAL__N_113DefaultRandomD0Ev to i8*), i8* bitcast (void (%"class.quic::(anonymous namespace)::DefaultRandom"*, i8*, i64)* @_ZN4quic12_GLOBAL__N_113DefaultRandom9RandBytesEPvm to i8*), i8* bitcast (i64 (%"class.quic::(anonymous namespace)::DefaultRandom"*)* @_ZN4quic12_GLOBAL__N_113DefaultRandom10RandUint64Ev to i8*), i8* bitcast (void (%"class.quic::(anonymous namespace)::DefaultRandom"*, i8*, i64)* @_ZN4quic12_GLOBAL__N_113DefaultRandom17InsecureRandBytesEPvm to i8*), i8* bitcast (i64 (%"class.quic::(anonymous namespace)::DefaultRandom"*)* @_ZN4quic12_GLOBAL__N_113DefaultRandom18InsecureRandUint64Ev to i8*)] }, align 8
@_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state = internal thread_local global [4 x i64] zeroinitializer, align 16
@_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE21rng_state_initialized = internal thread_local unnamed_addr global i1 false, align 1

; Function Attrs: nofree nounwind ssp uwtable
define hidden %"class.quic::QuicRandom"* @_ZN4quic10QuicRandom11GetInstanceEv() local_unnamed_addr #0 align 2 {
  %1 = load atomic i8, i8* bitcast (i64* @_ZGVZN4quic10QuicRandom11GetInstanceEvE6random to i8*) acquire, align 8
  %2 = icmp eq i8 %1, 0
  br i1 %2, label %3, label %9, !prof !2

3:                                                ; preds = %0
  %4 = tail call i32 @__cxa_guard_acquire(i64* nonnull @_ZGVZN4quic10QuicRandom11GetInstanceEvE6random) #7
  %5 = icmp eq i32 %4, 0
  br i1 %5, label %9, label %6

6:                                                ; preds = %3
  %7 = tail call i8* @_Znwm(i64 8) #8
  %8 = bitcast i8* %7 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTVN4quic12_GLOBAL__N_113DefaultRandomE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %8, align 8
  store i8* %7, i8** bitcast (%"class.quic::(anonymous namespace)::DefaultRandom"** @_ZZN4quic10QuicRandom11GetInstanceEvE6random to i8**), align 8
  tail call void @__cxa_guard_release(i64* nonnull @_ZGVZN4quic10QuicRandom11GetInstanceEvE6random) #7
  br label %9

9:                                                ; preds = %3, %6, %0
  %10 = load %"class.quic::QuicRandom"*, %"class.quic::QuicRandom"** bitcast (%"class.quic::(anonymous namespace)::DefaultRandom"** @_ZZN4quic10QuicRandom11GetInstanceEvE6random to %"class.quic::QuicRandom"**), align 8
  ret %"class.quic::QuicRandom"* %10
}

; Function Attrs: nofree nounwind
declare i32 @__cxa_guard_acquire(i64*) local_unnamed_addr #1

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare void @__cxa_guard_release(i64*) local_unnamed_addr #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN4quic10QuicRandomD2Ev(%"class.quic::QuicRandom"*) unnamed_addr #3 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4quic12_GLOBAL__N_113DefaultRandomD0Ev(%"class.quic::(anonymous namespace)::DefaultRandom"*) unnamed_addr #3 align 2 {
  %2 = bitcast %"class.quic::(anonymous namespace)::DefaultRandom"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4quic12_GLOBAL__N_113DefaultRandom9RandBytesEPvm(%"class.quic::(anonymous namespace)::DefaultRandom"* nocapture readnone, i8*, i64) unnamed_addr #3 align 2 {
  %4 = tail call i32 @RAND_bytes(i8* %1, i64 %2) #7
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @_ZN4quic12_GLOBAL__N_113DefaultRandom10RandUint64Ev(%"class.quic::(anonymous namespace)::DefaultRandom"*) unnamed_addr #3 align 2 {
  %2 = alloca i64, align 8
  %3 = bitcast i64* %2 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #7
  store i64 -6148914691236517206, i64* %2, align 8
  %4 = bitcast %"class.quic::(anonymous namespace)::DefaultRandom"* %0 to void (%"class.quic::(anonymous namespace)::DefaultRandom"*, i8*, i64)***
  %5 = load void (%"class.quic::(anonymous namespace)::DefaultRandom"*, i8*, i64)**, void (%"class.quic::(anonymous namespace)::DefaultRandom"*, i8*, i64)*** %4, align 8
  %6 = getelementptr inbounds void (%"class.quic::(anonymous namespace)::DefaultRandom"*, i8*, i64)*, void (%"class.quic::(anonymous namespace)::DefaultRandom"*, i8*, i64)** %5, i64 2
  %7 = load void (%"class.quic::(anonymous namespace)::DefaultRandom"*, i8*, i64)*, void (%"class.quic::(anonymous namespace)::DefaultRandom"*, i8*, i64)** %6, align 8
  call void %7(%"class.quic::(anonymous namespace)::DefaultRandom"* %0, i8* nonnull %3, i64 8) #7
  %8 = load i64, i64* %2, align 8
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #7
  ret i64 %8
}

; Function Attrs: nounwind ssp uwtable
define internal void @_ZN4quic12_GLOBAL__N_113DefaultRandom17InsecureRandBytesEPvm(%"class.quic::(anonymous namespace)::DefaultRandom"* nocapture readnone, i8* nocapture, i64) unnamed_addr #3 align 2 {
  %4 = alloca i64, align 8
  %5 = icmp ugt i64 %2, 7
  br i1 %5, label %6, label %64

6:                                                ; preds = %3
  %7 = load i1, i1* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE21rng_state_initialized, align 1
  br i1 %7, label %10, label %8

8:                                                ; preds = %6
  %9 = tail call i32 @RAND_bytes(i8* bitcast ([4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state to i8*), i64 32) #7
  store i1 true, i1* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE21rng_state_initialized, align 1
  br label %10

10:                                               ; preds = %8, %6
  %11 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 0), align 16
  %12 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 3), align 8
  %13 = add i64 %12, %11
  %14 = shl i64 %13, 23
  %15 = lshr i64 %13, 41
  %16 = or i64 %15, %14
  %17 = add i64 %16, %11
  %18 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 1), align 8
  %19 = shl i64 %18, 17
  %20 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 2), align 16
  %21 = xor i64 %20, %11
  %22 = xor i64 %18, %12
  %23 = xor i64 %21, %18
  store i64 %23, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 1), align 8
  %24 = xor i64 %22, %11
  store i64 %24, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 0), align 16
  %25 = xor i64 %21, %19
  store i64 %25, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 2), align 16
  %26 = shl i64 %22, 45
  %27 = lshr i64 %22, 19
  %28 = or i64 %27, %26
  store i64 %28, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 3), align 8
  %29 = bitcast i8* %1 to i64*
  store i64 %17, i64* %29, align 1
  %30 = getelementptr inbounds i8, i8* %1, i64 8
  %31 = add i64 %2, -8
  %32 = icmp ugt i64 %31, 7
  br i1 %32, label %33, label %61

33:                                               ; preds = %10
  %34 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 0), align 16
  br label %35

35:                                               ; preds = %35, %33
  %36 = phi i64 [ %51, %35 ], [ %34, %33 ]
  %37 = phi i8* [ %57, %35 ], [ %30, %33 ]
  %38 = phi i64 [ %58, %35 ], [ %31, %33 ]
  %39 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 3), align 8
  %40 = add i64 %39, %36
  %41 = shl i64 %40, 23
  %42 = lshr i64 %40, 41
  %43 = or i64 %42, %41
  %44 = add i64 %43, %36
  %45 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 1), align 8
  %46 = shl i64 %45, 17
  %47 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 2), align 16
  %48 = xor i64 %47, %36
  %49 = xor i64 %45, %39
  %50 = xor i64 %48, %45
  store i64 %50, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 1), align 8
  %51 = xor i64 %49, %36
  %52 = xor i64 %48, %46
  store i64 %52, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 2), align 16
  %53 = shl i64 %49, 45
  %54 = lshr i64 %49, 19
  %55 = or i64 %54, %53
  store i64 %55, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 3), align 8
  %56 = bitcast i8* %37 to i64*
  store i64 %44, i64* %56, align 1
  %57 = getelementptr inbounds i8, i8* %37, i64 8
  %58 = add i64 %38, -8
  %59 = icmp ugt i64 %58, 7
  br i1 %59, label %35, label %60, !llvm.loop !3

60:                                               ; preds = %35
  store i64 %51, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 0), align 16
  br label %61

61:                                               ; preds = %60, %10
  %62 = phi i8* [ %30, %10 ], [ %57, %60 ]
  %63 = and i64 %2, 7
  br label %64

64:                                               ; preds = %61, %3
  %65 = phi i64 [ %2, %3 ], [ %63, %61 ]
  %66 = phi i8* [ %1, %3 ], [ %62, %61 ]
  %67 = icmp eq i64 %65, 0
  br i1 %67, label %92, label %68

68:                                               ; preds = %64
  %69 = bitcast i64* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %69)
  store i64 -6148914691236517206, i64* %4, align 8
  %70 = load i1, i1* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE21rng_state_initialized, align 1
  br i1 %70, label %73, label %71

71:                                               ; preds = %68
  %72 = tail call i32 @RAND_bytes(i8* bitcast ([4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state to i8*), i64 32) #7
  store i1 true, i1* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE21rng_state_initialized, align 1
  br label %73

73:                                               ; preds = %68, %71
  %74 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 0), align 16
  %75 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 3), align 8
  %76 = add i64 %75, %74
  %77 = shl i64 %76, 23
  %78 = lshr i64 %76, 41
  %79 = or i64 %78, %77
  %80 = add i64 %79, %74
  %81 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 1), align 8
  %82 = shl i64 %81, 17
  %83 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 2), align 16
  %84 = xor i64 %83, %74
  %85 = xor i64 %81, %75
  %86 = xor i64 %84, %81
  store i64 %86, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 1), align 8
  %87 = xor i64 %85, %74
  store i64 %87, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 0), align 16
  %88 = xor i64 %84, %82
  store i64 %88, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 2), align 16
  %89 = shl i64 %85, 45
  %90 = lshr i64 %85, 19
  %91 = or i64 %90, %89
  store i64 %91, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 3), align 8
  store i64 %80, i64* %4, align 8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %66, i8* nonnull align 8 %69, i64 %65, i1 false)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %69)
  br label %92

92:                                               ; preds = %64, %73
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal i64 @_ZN4quic12_GLOBAL__N_113DefaultRandom18InsecureRandUint64Ev(%"class.quic::(anonymous namespace)::DefaultRandom"* nocapture readnone) unnamed_addr #3 align 2 {
  %2 = load i1, i1* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE21rng_state_initialized, align 1
  br i1 %2, label %5, label %3

3:                                                ; preds = %1
  %4 = tail call i32 @RAND_bytes(i8* bitcast ([4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state to i8*), i64 32) #7
  store i1 true, i1* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE21rng_state_initialized, align 1
  br label %5

5:                                                ; preds = %1, %3
  %6 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 0), align 16
  %7 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 3), align 8
  %8 = add i64 %7, %6
  %9 = shl i64 %8, 23
  %10 = lshr i64 %8, 41
  %11 = or i64 %10, %9
  %12 = add i64 %11, %6
  %13 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 1), align 8
  %14 = shl i64 %13, 17
  %15 = load i64, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 2), align 16
  %16 = xor i64 %15, %6
  %17 = xor i64 %13, %7
  %18 = xor i64 %16, %13
  store i64 %18, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 1), align 8
  %19 = xor i64 %17, %6
  store i64 %19, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 0), align 16
  %20 = xor i64 %16, %14
  store i64 %20, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 2), align 16
  %21 = shl i64 %17, 45
  %22 = lshr i64 %17, 19
  %23 = or i64 %22, %21
  store i64 %23, i64* getelementptr inbounds ([4 x i64], [4 x i64]* @_ZZN4quic12_GLOBAL__N_118Xoshiro256PlusPlusEvE9rng_state, i64 0, i64 3), align 8
  ret i64 %12
}

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

declare i32 @RAND_bytes(i8*, i64) local_unnamed_addr #5

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #6

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

attributes #0 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nofree nounwind }
attributes #2 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind }
attributes #8 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"branch_weights", i32 1, i32 1048575}
!3 = distinct !{!3, !4}
!4 = !{!"llvm.loop.unroll.disable"}
