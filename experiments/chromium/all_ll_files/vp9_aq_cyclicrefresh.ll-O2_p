; ModuleID = '../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_aq_cyclicrefresh.c'
source_filename = "../../third_party/libvpx/source/libvpx/vp9/encoder/vp9_aq_cyclicrefresh.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.CYCLIC_REFRESH = type { i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i64, i64, i16, double, i32, double, [3 x i32], i32, double, i32, i32, i32 }
%struct.VP9_COMP = type { %struct.FRAME_INFO, [8 x i8], %struct.QUANTS, %struct.ThreadData, %struct.MB_MODE_INFO_EXT*, [8 x i8], [256 x [8 x i16]], [256 x [8 x i16]], %struct.VP9Common, %struct.VP9EncoderConfig, %struct.lookahead_ctx*, %struct.lookahead_entry*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, %struct.yv12_buffer_config*, i8, [50 x %struct.TplDepFrame], [8 x %struct.yv12_buffer_config*], [8 x %struct.EncFrameBuf], %union.pthread_mutex_t, i32, %struct.KMEANS_DATA*, i32, i32, [8 x double], [8 x double], [8 x i32], i32, %struct.TileDataEnc*, i32, i32, [3 x i32], i32, i32, i32, [8 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64*, i32, i32, double*, %struct.yv12_buffer_config, [4 x [64 x %struct.TOKENEXTRA*]], [4 x [64 x %struct.TOKENLIST*]], i64, %struct.RD_OPT, %struct.CODING_CONTEXT, [2 x i32*], [2 x i32*], [2 x i32*], [2 x i32*], i64, i64, i64, %struct.RATE_CONTROL, double, [8 x [4 x i32]], %struct.vpx_codec_pkt_list*, [25 x %struct.MBGRAPH_FRAME_STATS], i32, i32, i32, %struct.SPEED_FEATURES, i32, i32, i32, i32, i32, i8*, i8*, [8 x i32], %struct.CYCLIC_REFRESH*, %struct.ActiveMap, i32 (%struct.macroblock*, %struct.mv*, %struct.mv*, i32, i32, %struct.vp9_variance_vtable*, i32, i32, i32*, i32*, i32**, i32*, i32*, i8*, i32, i32, i32)*, %struct.scale_factors, i32 (%struct.macroblock*, %struct.search_site_config*, %struct.mv*, %struct.mv*, i32, i32, i32*, %struct.vp9_variance_vtable*, %struct.mv*)*, [13 x %struct.vp9_variance_vtable], i64, i64, i64, i64, %struct.TWO_PASS, i8, %struct.yv12_buffer_config, %struct.ALT_REF_AQ*, i32, i32, i32, i32, i32, i32, %struct.SVC, %struct.diff*, i32, i32, i32, %struct.search_site_config, [10 x i32], [7 x [4 x i32]], [2 x [10 x [10 x i32]]], [10 x [10 x [10 x i32]]], [4 x [3 x i32]], [16 x [4 x i32]], [3 x [2 x [4 x i32]]], %struct.vp9_denoiser, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.noise_estimate, i8*, [4 x i64], i64, i64, i64, i8, i32, %struct.VPxWorker*, %struct.EncWorkerData*, %struct.VP9LfSyncData, %struct.VP9BitstreamWorkerData*, i32, %struct.Vp9LevelInfo, %struct.MultiThreadHandle, void (%struct.VP9RowMTSyncData*, i32, i32)*, void (%struct.VP9RowMTSyncData*, i32, i32, i32)*, %struct.ARNRFilterData, i32, i32, i8*, i8*, i8*, i8*, i8, i8, i8*, i32, %struct.LevelConstraint, i8*, i8*, i32, %struct.vpx_roi_map, i32, %struct.EXT_RATECTRL, [8 x i8] }
%struct.FRAME_INFO = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.QUANTS = type { [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]], [256 x [8 x i16]] }
%struct.ThreadData = type { %struct.macroblock, %struct.RD_COUNTS, %struct.FRAME_COUNTS*, %struct.PICK_MODE_CONTEXT*, %struct.PC_TREE*, %struct.PC_TREE*, [8 x i8] }
%struct.macroblock = type { [3 x %struct.macroblock_plane], %struct.macroblockd, %struct.MB_MODE_INFO_EXT*, %struct.MB_MODE_INFO_EXT*, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8, i8, [4 x i32], [4 x i32], i32, [4 x i32], [4 x i32], [4 x i32], [2 x i32*], [2 x i32*], i32**, [4 x i32], [2 x i32*], [2 x i32*], i32**, i32, i32, %struct.MvLimits, [4 x [256 x i8]], [4 x i32], i32, i32, [4 x [2 x [2 x [6 x [2 x [6 x [12 x i32]]]]]]], i32, i32, i32, i32, i32, [12 x i8], [12 x i64], [4 x %struct.mv], [2 x i8], i8, i8, i8, i8, i32, i32, i32, i32, i32, i8, [25 x i8], i8, i8, void (i16*, i32*, i32)*, void (i32*, i8*, i32, i32)*, void (i32*, i16*, i32, i32, i32)*, [8 x i8], [4096 x i8], %struct.scale_factors*, [8 x i8] }
%struct.macroblock_plane = type { [4096 x i16], i32*, i32*, i16*, %struct.buf_2d, [8 x i8], [8 x i16], i16*, i16*, i16*, i16*, i16*, [2 x i64], [8 x i8] }
%struct.buf_2d = type { i8*, i32 }
%struct.macroblockd = type { [3 x %struct.macroblockd_plane], i8, i8, %struct.FRAME_COUNTS*, %struct.TileInfo, i32, %struct.MODE_INFO**, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i32, [3 x i8]*, i32, i32, i32, i32, %struct.frame_contexts*, [2 x %struct.RefBuffer*], %struct.yv12_buffer_config*, [3 x i8*], [3 x [16 x i8]], i8*, [8 x i8], i32, i32, i32, %struct.vpx_internal_error_info*, i32* }
%struct.macroblockd_plane = type { i32*, i32, i32, %struct.buf_2d, [2 x %struct.buf_2d], i8*, i8*, [8 x [2 x i16]], i16, i16, i8, i8, i16*, i32* }
%struct.TileInfo = type { i32, i32, i32, i32 }
%struct.MODE_INFO = type { i8, i8, i8, i8, i8, i8, i8, i8, [2 x i8], [2 x %union.int_mv], [4 x %struct.b_mode_info] }
%union.int_mv = type { i32 }
%struct.b_mode_info = type { i8, [2 x %union.int_mv] }
%struct.frame_contexts = type { [4 x [9 x i8]], [10 x [9 x i8]], [16 x [3 x i8]], [4 x [2 x [2 x [6 x [6 x [3 x i8]]]]]], [4 x [2 x i8]], [7 x [3 x i8]], [4 x i8], [5 x i8], [5 x [2 x i8]], [5 x i8], %struct.tx_probs, [3 x i8], %struct.nmv_context, i32 }
%struct.tx_probs = type { [2 x [3 x i8]], [2 x [2 x i8]], [2 x [1 x i8]] }
%struct.nmv_context = type { [3 x i8], [2 x %struct.nmv_component] }
%struct.nmv_component = type { i8, [10 x i8], [1 x i8], [10 x i8], [2 x [3 x i8]], [3 x i8], i8, i8 }
%struct.RefBuffer = type { i32, %struct.yv12_buffer_config*, %struct.scale_factors }
%struct.vpx_internal_error_info = type { i32, i32, [80 x i8], i32, [1 x %struct.__jmp_buf_tag] }
%struct.__jmp_buf_tag = type { [8 x i64], i32, %struct.__sigset_t }
%struct.__sigset_t = type { [16 x i64] }
%struct.MvLimits = type { i32, i32, i32, i32 }
%struct.mv = type { i16, i16 }
%struct.RD_COUNTS = type { [4 x [2 x [2 x [6 x [6 x [12 x i32]]]]]], [3 x i64], [4 x i64] }
%struct.FRAME_COUNTS = type { [4 x [10 x i32]], [10 x [10 x i32]], [16 x [4 x i32]], [4 x [2 x [2 x [6 x [6 x [4 x i32]]]]]], [4 x [2 x [2 x [6 x [6 x i32]]]]], [4 x [3 x i32]], [7 x [4 x i32]], [4 x [2 x i32]], [5 x [2 x i32]], [5 x [2 x [2 x i32]]], [5 x [2 x i32]], %struct.tx_counts, [3 x [2 x i32]], %struct.nmv_context_counts }
%struct.tx_counts = type { [2 x [4 x i32]], [2 x [3 x i32]], [2 x [2 x i32]], [4 x i32] }
%struct.nmv_context_counts = type { [4 x i32], [2 x %struct.nmv_component_counts] }
%struct.nmv_component_counts = type { [2 x i32], [11 x i32], [2 x i32], [10 x [2 x i32]], [2 x [4 x i32]], [4 x i32], [2 x i32], [2 x i32] }
%struct.PICK_MODE_CONTEXT = type { %struct.MODE_INFO, %struct.MB_MODE_INFO_EXT, i8*, [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i32*]], [3 x [3 x i16*]], i32, i32, i32, i32, i32, [12 x i8], i32, i32, i32, i32, [4 x i64], i32, i64, i64, i32, i32, i32, i8, %union.int_mv, i8, i8, i32, [4 x %struct.mv], i8, i32, i8 }
%struct.MB_MODE_INFO_EXT = type { [4 x [2 x %union.int_mv]], [4 x i8] }
%struct.PC_TREE = type { i32, i32, i8, %struct.PICK_MODE_CONTEXT, [2 x %struct.PICK_MODE_CONTEXT], [2 x %struct.PICK_MODE_CONTEXT], %union.anon, %struct.mv }
%union.anon = type { [4 x %struct.PC_TREE*] }
%struct.VP9Common = type { %struct.vpx_internal_error_info, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.yv12_buffer_config*, %struct.RefCntBuffer*, %struct.RefCntBuffer*, [8 x i32], [8 x i32], [3 x %struct.RefBuffer], i32, i32, %struct.yv12_buffer_config, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i8, i8, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [8 x [2 x i16]], [8 x [2 x i16]], i32, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, %struct.MODE_INFO*, i32 (%struct.VP9Common*, i32)*, void (%struct.VP9Common*)*, void (%struct.VP9Common*)*, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, %struct.MODE_INFO**, i32, i32, i32, [2 x i8*], i8*, i8*, i32, i8, [11 x i8], %struct.loop_filter_info_n, i32, [4 x i32], %struct.loopfilter, %struct.segmentation, i8, [2 x i8], i32, %struct.frame_contexts*, %struct.frame_contexts*, i32, %struct.FRAME_COUNTS, i32, i32, i32, i32, i32, %struct.postproc_state, i32, i32, i32, i32, i32, i32, %struct.BufferPool*, i8*, i8*, i32, i32, [8 x i8] }
%struct.RefCntBuffer = type { i32, %struct.MV_REF*, i32, i32, i8, i32, i32, %struct.vpx_codec_frame_buffer, %struct.yv12_buffer_config }
%struct.MV_REF = type { [2 x %union.int_mv], [2 x i8] }
%struct.vpx_codec_frame_buffer = type { i8*, i64, i8* }
%struct.loop_filter_info_n = type { [64 x %struct.loop_filter_thresh], [8 x [4 x [2 x i8]]] }
%struct.loop_filter_thresh = type { [16 x i8], [16 x i8], [16 x i8] }
%struct.loopfilter = type { i32, i32, i32, i32, i8, i8, [4 x i8], [4 x i8], [2 x i8], [2 x i8], %struct.LOOP_FILTER_MASK*, i32 }
%struct.LOOP_FILTER_MASK = type { [4 x i64], [4 x i64], i64, [4 x i16], [4 x i16], i16, [64 x i8] }
%struct.segmentation = type { i8, i8, i8, i8, i8, [7 x i8], [3 x i8], [8 x [4 x i16]], [8 x i32], i32 }
%struct.postproc_state = type { i32, i32, i32, i32, %struct.MODE_INFO*, %struct.MODE_INFO*, i32, i8*, i8* }
%struct.BufferPool = type { i8*, i32 (i8*, i64, %struct.vpx_codec_frame_buffer*)*, i32 (i8*, %struct.vpx_codec_frame_buffer*)*, [12 x %struct.RefCntBuffer], %struct.InternalFrameBufferList }
%struct.InternalFrameBufferList = type { i32, %struct.InternalFrameBuffer* }
%struct.InternalFrameBuffer = type { i8*, i64, i32 }
%struct.VP9EncoderConfig = type { i32, i32, i32, i32, i32, double, %struct.vpx_rational, %struct.vpx_rational64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [12 x i32], [5 x i32], [5 x i32], [5 x i32], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.vpx_fixed_buf, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.vpx_rational = type { i32, i32 }
%struct.vpx_rational64 = type { i64, i32 }
%struct.vpx_fixed_buf = type { i8*, i64 }
%struct.lookahead_ctx = type { i32, i32, i32, i32, i32, %struct.lookahead_entry* }
%struct.lookahead_entry = type { %struct.yv12_buffer_config, i64, i64, i32, i64 }
%struct.TplDepFrame = type { i8, %struct.TplDepStats*, i32, i32, i32, i32, i32, i32 }
%struct.TplDepStats = type { i64, i64, i64, i64, i64, i32, %union.int_mv }
%struct.EncFrameBuf = type { i32, i32, %struct.yv12_buffer_config }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%struct.KMEANS_DATA = type { double, i32, i32 }
%struct.TileDataEnc = type { %struct.TileInfo, [13 x [30 x i32]], [13 x [30 x i8]], %struct.FIRSTPASS_DATA, %struct.VP9RowMTSyncData, i32* }
%struct.FIRSTPASS_DATA = type { double, double, i64, i64, i64, i64, i32, i32, double, double, double, i32, i32, i32, i32, i32, i32, i32, i64, i64, i32, i32 }
%struct.VP9RowMTSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32 }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.0, %union.anon.1, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.0 = type { i64 }
%union.anon.1 = type { i64 }
%struct.TOKENEXTRA = type { i8*, i16, i32 }
%struct.TOKENLIST = type { %struct.TOKENEXTRA*, %struct.TOKENEXTRA*, i32 }
%struct.RD_OPT = type { [30 x i32], [6 x i32], [8 x [13 x [30 x i32]]], [4 x [3 x i64]], [4 x [4 x i64]], i32, i32, double }
%struct.CODING_CONTEXT = type { [4 x i32], [2 x [32767 x i32]], [2 x [32767 x i32]], [3 x i8], i8*, [4 x i8], [2 x i8], %struct.frame_contexts }
%struct.RATE_CONTROL = type { i32, i32, i32, i32, [2 x i32], i32, i32, i32, i32, i32, [5 x double], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [2 x i32], double, double, i64, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, i64, i64, i64, i32, i32, i64, i64, i64, i32, i32, i32, i32, i32, i32, i32, [2 x i32], [2 x i32], [5 x i32], i32, i32, [25 x i64], i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, i32, i32, [5 x i32], double, i32, i32, i32, i32 }
%struct.vpx_codec_pkt_list = type { i32, i32, [1 x %struct.vpx_codec_cx_pkt] }
%struct.vpx_codec_cx_pkt = type { i32, %union.anon.3 }
%union.anon.3 = type { %struct.anon.4, [40 x i8] }
%struct.anon.4 = type { i8*, i64, i64, i64, i32, i32, [5 x i32], [5 x i32], [5 x i8] }
%struct.MBGRAPH_FRAME_STATS = type { %struct.MBGRAPH_MB_STATS* }
%struct.MBGRAPH_MB_STATS = type { [4 x %struct.anon.5] }
%struct.anon.5 = type { i32, %union.anon.6 }
%union.anon.6 = type { %union.int_mv }
%struct.SPEED_FEATURES = type { %struct.MV_SPEED_FEATURES, i32, i32, i32, i32, i8, i32, i32, i32, i32, i32, i32, i32, double, i32, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, i8, i32, i32, i8, i8, i32, i32, i8, i8, i8, i32, i32, i32, i32, i32, i32, [4 x %struct.MESH_PATTERN], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [4 x i32], [4 x i32], [13 x i32], i32, i32, i32, i32, i32, [13 x i32], i32, i32, i32, i8, i32, i32, i32, i8, i32, i32, i32, %struct.PARTITION_SEARCH_BREAKOUT_THR, %struct.anon.7, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.MV_SPEED_FEATURES = type { i32, i32, i32, i32, i32, i32, i32, %struct.ADAPT_SUBPEL_FORCE_STOP, i32 }
%struct.ADAPT_SUBPEL_FORCE_STOP = type { i32, i32, i32 }
%struct.MESH_PATTERN = type { i32, i32 }
%struct.PARTITION_SEARCH_BREAKOUT_THR = type { i64, i32 }
%struct.anon.7 = type { i32, [3 x float], i32, i32, [4 x i32] }
%struct.ActiveMap = type { i32, i32, i8* }
%struct.vp9_variance_vtable = type { i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32, i8*)*, i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*)*, i32 (i8*, i32, i32, i32, i8*, i32, i32*, i8*)*, void (i8*, i32, i8**, i32, i32*)*, void (i8*, i32, i8*, i32, i32*)* }
%struct.scale_factors = type { i32, i32, i32, i32, i32 (i32, %struct.scale_factors*)*, i32 (i32, %struct.scale_factors*)*, [2 x [2 x [2 x void (i8*, i64, i8*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32)*]]], [2 x [2 x [2 x void (i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32)*]]] }
%struct.TWO_PASS = type { i32, i32, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRSTPASS_STATS*, %struct.FIRST_PASS_INFO, %struct.FIRSTPASS_STATS, i32, i64, double, double, double, double, %struct.FP_MB_FLOAT_STATS*, i32, i64, double, double, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, [6 x i32], %struct.GF_GROUP }
%struct.FIRST_PASS_INFO = type { %struct.FIRSTPASS_STATS*, i32 }
%struct.FIRSTPASS_STATS = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, i64 }
%struct.FP_MB_FLOAT_STATS = type { double, double, double }
%struct.GF_GROUP = type { i8, [252 x i32], [252 x i32], [252 x i8], [252 x i8], [252 x i8], [252 x i32], [252 x i32], i32, i32, [50 x i32], i32, i32, i32, i32, i32, i32 }
%struct.yv12_buffer_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8*, i8*, i64, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.ALT_REF_AQ = type opaque
%struct.SVC = type { i32, i32, i32, i32, i32, i32, %struct.lookahead_entry, i32, [25 x %struct.yv12_buffer_config], %struct.yv12_buffer_config, i32, i32, [12 x %struct.LAYER_CONTEXT], i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [2 x %struct.BUFFER_LONGTERM_REF], i32, i32, i32, i32, [5 x i8], [5 x i32], i8*, [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, [12 x i32], [12 x i32], [12 x i32], [12 x i32], [12 x i32], i32, i32, i32, i32, i32, [5 x i32], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i8], [5 x i32], [8 x i8], [8 x i8], [5 x i32], i8, i8, i8, [8 x i8], i32, [5 x i32], i32, [5 x i64], i64, i64, [5 x i64], i32, i32, i32, i32 }
%struct.LAYER_CONTEXT = type { %struct.RATE_CONTROL, i32, i32, double, i32, i32, i32, i32, i32, i32, i32, %struct.TWO_PASS, %struct.vpx_fixed_buf, i32, i32, i32, i32, %struct.lookahead_entry*, i32, i32, i32, i64, i32, i8*, i8*, i8*, i32, i32, i32, i8, i32 }
%struct.BUFFER_LONGTERM_REF = type { i32, i32 }
%struct.diff = type { i32, i32, i32 }
%struct.search_site_config = type { [88 x %struct.mv], [88 x i64], i32, i32 }
%struct.vp9_denoiser = type { %struct.yv12_buffer_config*, %struct.yv12_buffer_config*, %struct.yv12_buffer_config, i32, i32, i32, i32, i32, i32, i32 }
%struct.noise_estimate = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.VPxWorker = type { %struct.VPxWorkerImpl*, i32, i32 (i8*, i8*)*, i8*, i8*, i32 }
%struct.VPxWorkerImpl = type opaque
%struct.EncWorkerData = type { %struct.VP9_COMP*, %struct.ThreadData*, i32, i32, [64 x i32] }
%struct.VP9LfSyncData = type { %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32, i32, %struct.LoopFilterWorkerData*, i32, i32, %union.pthread_mutex_t*, %union.pthread_mutex_t*, %union.pthread_cond_t*, i32*, i32 }
%struct.LoopFilterWorkerData = type { %struct.yv12_buffer_config*, %struct.VP9Common*, [3 x %struct.macroblockd_plane], i32, i32, i32 }
%struct.VP9BitstreamWorkerData = type opaque
%struct.Vp9LevelInfo = type { %struct.Vp9LevelStats, %struct.Vp9LevelSpec }
%struct.Vp9LevelStats = type { i8, i32, i64, i64, double, %struct.FrameWindowBuffer, i32 }
%struct.FrameWindowBuffer = type { [128 x %struct.FrameRecord], i8, i8 }
%struct.FrameRecord = type { i64, i32, i32 }
%struct.Vp9LevelSpec = type { i32, i64, i32, i32, double, double, double, i8, i32, i8 }
%struct.MultiThreadHandle = type { i32, i32, i32, [4 x i32], %struct.JobQueue*, i32, [64 x %struct.RowMTInfo], [80 x i32] }
%struct.JobQueue = type { i8*, %struct.JobNode }
%struct.JobNode = type { i32, i32, i32 }
%struct.RowMTInfo = type { %struct.JobQueueHandle, %union.pthread_mutex_t }
%struct.JobQueueHandle = type { i8*, i32 }
%struct.ARNRFilterData = type { [25 x %struct.yv12_buffer_config*], i32, i32, i32, %struct.scale_factors }
%struct.LevelConstraint = type { i8, i8, i32, double }
%struct.vpx_roi_map = type { i8, i8*, i32, i32, [8 x i32], [8 x i32], [8 x i32], [8 x i32], [4 x i32] }
%struct.EXT_RATECTRL = type { i32, i8*, %struct.vpx_rc_funcs, %struct.vpx_rc_config, %struct.vpx_rc_firstpass_stats }
%struct.vpx_rc_funcs = type { i32 (i8*, %struct.vpx_rc_config*, i8**)*, i32 (i8*, %struct.vpx_rc_firstpass_stats*)*, i32 (i8*, %struct.vpx_rc_encodeframe_info*, %struct.vpx_rc_encodeframe_decision*)*, i32 (i8*, %struct.vpx_rc_encodeframe_result*)*, i32 (i8*)*, i8* }
%struct.vpx_rc_encodeframe_info = type { i32, i32, i32, i32, [3 x i32], [3 x i32] }
%struct.vpx_rc_encodeframe_decision = type { i32 }
%struct.vpx_rc_encodeframe_result = type { i64, i64, i64 }
%struct.vpx_rc_config = type { i32, i32, i32, i32, i32, i32 }
%struct.vpx_rc_firstpass_stats = type { %struct.vpx_rc_frame_stats*, i32 }
%struct.vpx_rc_frame_stats = type { double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double }

@num_8x8_blocks_wide_lookup = external local_unnamed_addr constant [13 x i8], align 1
@num_8x8_blocks_high_lookup = external local_unnamed_addr constant [13 x i8], align 1
@VP9_VAR_OFFS = internal constant [64 x i8] c"\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80\80", align 16

; Function Attrs: nounwind ssp uwtable
define hidden %struct.CYCLIC_REFRESH* @vp9_cyclic_refresh_alloc(i32, i32) local_unnamed_addr #0 {
  %3 = tail call i8* @vpx_calloc(i64 1, i64 136) #5
  %4 = bitcast i8* %3 to %struct.CYCLIC_REFRESH*
  %5 = icmp eq i8* %3, null
  br i1 %5, label %28, label %6

6:                                                ; preds = %2
  %7 = mul nsw i32 %1, %0
  %8 = sext i32 %7 to i64
  %9 = tail call i8* @vpx_calloc(i64 %8, i64 1) #5
  %10 = getelementptr inbounds i8, i8* %3, i64 32
  %11 = bitcast i8* %10 to i8**
  store i8* %9, i8** %11, align 8
  %12 = icmp eq i8* %9, null
  br i1 %12, label %13, label %17

13:                                               ; preds = %6
  tail call void @vpx_free(i8* null) #5
  %14 = getelementptr inbounds i8, i8* %3, i64 40
  %15 = bitcast i8* %14 to i8**
  %16 = load i8*, i8** %15, align 8
  tail call void @vpx_free(i8* %16) #5
  tail call void @vpx_free(i8* nonnull %3) #5
  br label %28

17:                                               ; preds = %6
  %18 = tail call i8* @vpx_malloc(i64 %8) #5
  %19 = getelementptr inbounds i8, i8* %3, i64 40
  %20 = bitcast i8* %19 to i8**
  store i8* %18, i8** %20, align 8
  %21 = icmp eq i8* %18, null
  br i1 %21, label %22, label %25

22:                                               ; preds = %17
  %23 = load i8*, i8** %11, align 8
  tail call void @vpx_free(i8* %23) #5
  %24 = load i8*, i8** %20, align 8
  tail call void @vpx_free(i8* %24) #5
  tail call void @vpx_free(i8* nonnull %3) #5
  br label %28

25:                                               ; preds = %17
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %18, i8 -1, i64 %8, i1 false)
  %26 = getelementptr inbounds i8, i8* %3, i64 124
  %27 = bitcast i8* %26 to i32*
  store i32 0, i32* %27, align 4
  br label %28

28:                                               ; preds = %2, %25, %22, %13
  %29 = phi %struct.CYCLIC_REFRESH* [ null, %13 ], [ null, %22 ], [ %4, %25 ], [ null, %2 ]
  ret %struct.CYCLIC_REFRESH* %29
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

declare i8* @vpx_calloc(i64, i64) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_cyclic_refresh_free(%struct.CYCLIC_REFRESH*) local_unnamed_addr #0 {
  %2 = icmp eq %struct.CYCLIC_REFRESH* %0, null
  br i1 %2, label %9, label %3

3:                                                ; preds = %1
  %4 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %0, i64 0, i32 8
  %5 = load i8*, i8** %4, align 8
  tail call void @vpx_free(i8* %5) #5
  %6 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %0, i64 0, i32 9
  %7 = load i8*, i8** %6, align 8
  tail call void @vpx_free(i8* %7) #5
  %8 = bitcast %struct.CYCLIC_REFRESH* %0 to i8*
  tail call void @vpx_free(i8* nonnull %8) #5
  br label %9

9:                                                ; preds = %1, %3
  ret void
}

declare i8* @vpx_malloc(i64) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

declare void @vpx_free(i8*) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_cyclic_refresh_estimate_bits_at_q(%struct.VP9_COMP* nocapture readonly, double) local_unnamed_addr #0 {
  %3 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 84
  %4 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %3, align 8
  %5 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 31
  %6 = load i32, i32* %5, align 8
  %7 = shl i32 %6, 2
  %8 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %4, i64 0, i32 5
  %9 = load i32, i32* %8, align 4
  %10 = sitofp i32 %9 to double
  %11 = sitofp i32 %7 to double
  %12 = fdiv double %10, %11
  %13 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %4, i64 0, i32 6
  %14 = load i32, i32* %13, align 8
  %15 = sitofp i32 %14 to double
  %16 = fdiv double %15, %11
  %17 = fsub double 1.000000e+00, %12
  %18 = fsub double %17, %16
  %19 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %20 = load i32, i32* %19, align 4
  %21 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 38
  %22 = load i32, i32* %21, align 4
  %23 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 80
  %24 = load i32, i32* %23, align 16
  %25 = tail call i32 @vp9_estimate_bits_at_q(i32 %20, i32 %22, i32 %6, double %1, i32 %24) #5
  %26 = sitofp i32 %25 to double
  %27 = fmul double %18, %26
  %28 = load i32, i32* %19, align 4
  %29 = load i32, i32* %21, align 4
  %30 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %4, i64 0, i32 16, i64 1
  %31 = load i32, i32* %30, align 4
  %32 = add nsw i32 %31, %29
  %33 = load i32, i32* %23, align 16
  %34 = tail call i32 @vp9_estimate_bits_at_q(i32 %28, i32 %32, i32 %6, double %1, i32 %33) #5
  %35 = sitofp i32 %34 to double
  %36 = fmul double %12, %35
  %37 = fadd double %27, %36
  %38 = load i32, i32* %19, align 4
  %39 = load i32, i32* %21, align 4
  %40 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %4, i64 0, i32 16, i64 2
  %41 = load i32, i32* %40, align 8
  %42 = add nsw i32 %41, %39
  %43 = load i32, i32* %23, align 16
  %44 = tail call i32 @vp9_estimate_bits_at_q(i32 %38, i32 %42, i32 %6, double %1, i32 %43) #5
  %45 = sitofp i32 %44 to double
  %46 = fmul double %16, %45
  %47 = fadd double %37, %46
  %48 = fptosi double %47 to i32
  ret i32 %48
}

declare i32 @vp9_estimate_bits_at_q(i32, i32, i32, double, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden i32 @vp9_cyclic_refresh_rc_bits_per_mb(%struct.VP9_COMP*, i32, double) local_unnamed_addr #0 {
  %4 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 84
  %5 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %4, align 8
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 11
  %7 = load i32, i32* %6, align 8
  %8 = icmp slt i32 %7, 8
  br i1 %8, label %9, label %27

9:                                                ; preds = %3
  %10 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %5, i64 0, i32 13
  %11 = load double, double* %10, align 8
  %12 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67
  %13 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %14 = load i32, i32* %13, align 4
  %15 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 80
  %16 = load i32, i32* %15, align 16
  %17 = tail call i32 @vp9_compute_qdelta_by_rate(%struct.RATE_CONTROL* %12, i32 %14, i32 %1, double %11, i32 %16) #5
  %18 = sub nsw i32 0, %17
  %19 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %5, i64 0, i32 1
  %20 = load i32, i32* %19, align 4
  %21 = mul i32 %20, %1
  %22 = sdiv i32 %21, 100
  %23 = icmp slt i32 %22, %18
  br i1 %23, label %24, label %32

24:                                               ; preds = %9
  %25 = sub i32 0, %21
  %26 = sdiv i32 %25, 100
  br label %32

27:                                               ; preds = %3
  %28 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %5, i64 0, i32 1
  %29 = load i32, i32* %28, align 4
  %30 = mul nsw i32 %29, %1
  %31 = sdiv i32 %30, -200
  br label %32

32:                                               ; preds = %24, %9, %27
  %33 = phi i32 [ %31, %27 ], [ %26, %24 ], [ %17, %9 ]
  %34 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %5, i64 0, i32 18
  %35 = load double, double* %34, align 8
  %36 = fsub double 1.000000e+00, %35
  %37 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %38 = load i32, i32* %37, align 4
  %39 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 80
  %40 = load i32, i32* %39, align 16
  %41 = tail call i32 @vp9_rc_bits_per_mb(i32 %38, i32 %1, double %2, i32 %40) #5
  %42 = sitofp i32 %41 to double
  %43 = fmul double %36, %42
  %44 = load double, double* %34, align 8
  %45 = load i32, i32* %37, align 4
  %46 = add nsw i32 %33, %1
  %47 = load i32, i32* %39, align 16
  %48 = tail call i32 @vp9_rc_bits_per_mb(i32 %45, i32 %46, double %2, i32 %47) #5
  %49 = sitofp i32 %48 to double
  %50 = fmul double %44, %49
  %51 = fadd double %43, %50
  %52 = fptosi double %51 to i32
  ret i32 %52
}

declare i32 @vp9_rc_bits_per_mb(i32, i32, double, i32) local_unnamed_addr #2

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_cyclic_refresh_update_segment(%struct.VP9_COMP* nocapture readonly, %struct.MODE_INFO* nocapture, i32, i32, i8 zeroext, i64, i64, i32, %struct.macroblock_plane* nocapture readonly) local_unnamed_addr #0 {
  %10 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 84
  %11 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %10, align 8
  %12 = zext i8 %4 to i64
  %13 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %12
  %14 = load i8, i8* %13, align 1
  %15 = zext i8 %14 to i32
  %16 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %12
  %17 = load i8, i8* %16, align 1
  %18 = zext i8 %17 to i32
  %19 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %20 = load i32, i32* %19, align 8
  %21 = sub nsw i32 %20, %3
  %22 = icmp slt i32 %21, %15
  %23 = select i1 %22, i32 %21, i32 %15
  %24 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %25 = load i32, i32* %24, align 16
  %26 = sub nsw i32 %25, %2
  %27 = icmp slt i32 %26, %18
  %28 = select i1 %27, i32 %26, i32 %18
  %29 = mul nsw i32 %20, %2
  %30 = add nsw i32 %29, %3
  %31 = zext i8 %4 to i32
  %32 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 9, i64 0
  %33 = bitcast %union.int_mv* %32 to %struct.mv*
  %34 = getelementptr inbounds %struct.mv, %struct.mv* %33, i64 0, i32 1
  %35 = load i16, i16* %34, align 2
  %36 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %11, i64 0, i32 11
  %37 = load i64, i64* %36, align 8
  %38 = icmp slt i64 %37, %6
  br i1 %38, label %39, label %59

39:                                               ; preds = %9
  %40 = bitcast %union.int_mv* %32 to i16*
  %41 = load i16, i16* %40, align 4
  %42 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %11, i64 0, i32 12
  %43 = load i16, i16* %42, align 8
  %44 = icmp sgt i16 %41, %43
  br i1 %44, label %85, label %45

45:                                               ; preds = %39
  %46 = sext i16 %43 to i32
  %47 = sext i16 %41 to i32
  %48 = sub nsw i32 0, %46
  %49 = icmp slt i32 %47, %48
  %50 = icmp sgt i16 %35, %43
  %51 = or i1 %50, %49
  %52 = sext i16 %35 to i32
  %53 = icmp slt i32 %52, %48
  %54 = or i1 %53, %51
  br i1 %54, label %85, label %55

55:                                               ; preds = %45
  %56 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 8, i64 0
  %57 = load i8, i8* %56, align 4
  %58 = icmp slt i8 %57, 1
  br i1 %58, label %85, label %59

59:                                               ; preds = %55, %9
  %60 = icmp ugt i8 %4, 5
  br i1 %60, label %61, label %77

61:                                               ; preds = %59
  %62 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %11, i64 0, i32 10
  %63 = load i64, i64* %62, align 8
  %64 = icmp sgt i64 %63, %5
  br i1 %64, label %65, label %77

65:                                               ; preds = %61
  %66 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 8, i64 0
  %67 = load i8, i8* %66, align 4
  %68 = icmp slt i8 %67, 1
  br i1 %68, label %77, label %69

69:                                               ; preds = %65
  %70 = getelementptr inbounds %union.int_mv, %union.int_mv* %32, i64 0, i32 0
  %71 = load i32, i32* %70, align 4
  %72 = icmp eq i32 %71, 0
  br i1 %72, label %73, label %77

73:                                               ; preds = %69
  %74 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %11, i64 0, i32 14
  %75 = load i32, i32* %74, align 8
  %76 = icmp sgt i32 %75, 10
  br i1 %76, label %78, label %77

77:                                               ; preds = %73, %69, %65, %61, %59
  br label %78

78:                                               ; preds = %73, %77
  %79 = phi i32 [ 1, %77 ], [ 2, %73 ]
  %80 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %11, i64 0, i32 8
  %81 = load i8*, i8** %80, align 8
  %82 = sext i32 %30 to i64
  %83 = getelementptr inbounds i8, i8* %81, i64 %82
  %84 = load i8, i8* %83, align 1
  br label %110

85:                                               ; preds = %55, %45, %39
  %86 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %11, i64 0, i32 8
  %87 = load i8*, i8** %86, align 8
  %88 = sext i32 %30 to i64
  %89 = getelementptr inbounds i8, i8* %87, i64 %88
  %90 = load i8, i8* %89, align 1
  %91 = icmp ult i8 %4, 7
  br i1 %91, label %92, label %110

92:                                               ; preds = %85
  %93 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 126
  %94 = load i32, i32* %93, align 16
  %95 = icmp eq i32 %94, 0
  br i1 %95, label %110, label %96

96:                                               ; preds = %92
  %97 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %8, i64 0, i32 4, i32 0
  %98 = load i8*, i8** %97, align 8
  %99 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %8, i64 1, i32 4, i32 0
  %100 = load i8*, i8** %99, align 8
  %101 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %8, i64 2, i32 4, i32 0
  %102 = load i8*, i8** %101, align 8
  %103 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %8, i64 0, i32 4, i32 1
  %104 = load i32, i32* %103, align 8
  %105 = getelementptr inbounds %struct.macroblock_plane, %struct.macroblock_plane* %8, i64 1, i32 4, i32 1
  %106 = load i32, i32* %105, align 8
  %107 = tail call i32 @vp9_compute_skin_block(i8* %98, i8* %100, i8* %102, i32 %104, i32 %106, i32 %31, i32 0, i32 0) #5
  %108 = icmp ne i32 %107, 0
  %109 = zext i1 %108 to i32
  br label %110

110:                                              ; preds = %78, %96, %92, %85
  %111 = phi i8 [ %90, %92 ], [ %90, %85 ], [ %84, %78 ], [ %90, %96 ]
  %112 = phi i64 [ %88, %92 ], [ %88, %85 ], [ %82, %78 ], [ %88, %96 ]
  %113 = phi i8** [ %86, %92 ], [ %86, %85 ], [ %80, %78 ], [ %86, %96 ]
  %114 = phi i32 [ 0, %92 ], [ 0, %85 ], [ %79, %78 ], [ %109, %96 ]
  %115 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 20
  %116 = load i32, i32* %115, align 4
  %117 = icmp eq i32 %116, 0
  br i1 %117, label %118, label %123

118:                                              ; preds = %110
  %119 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 8, i64 0
  %120 = load i8, i8* %119, align 4
  %121 = icmp eq i8 %120, 2
  %122 = select i1 %121, i32 0, i32 %114
  br label %123

123:                                              ; preds = %118, %110
  %124 = phi i32 [ %114, %110 ], [ %122, %118 ]
  %125 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 75, i32 61
  %126 = load i32, i32* %125, align 4
  %127 = icmp eq i32 %126, 0
  %128 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 4
  %129 = load i8, i8* %128, align 4
  br i1 %127, label %138, label %130

130:                                              ; preds = %123
  %131 = sext i8 %129 to i32
  %132 = add nsw i32 %131, -1
  %133 = icmp ugt i32 %132, 1
  br i1 %133, label %138, label %134

134:                                              ; preds = %130
  %135 = trunc i32 %124 to i8
  %136 = icmp eq i32 %7, 0
  %137 = select i1 %136, i8 %135, i8 0
  store i8 %137, i8* %128, align 4
  br label %138

138:                                              ; preds = %123, %134, %130
  %139 = phi i8 [ %137, %134 ], [ %129, %130 ], [ %129, %123 ]
  %140 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 4
  %141 = sext i8 %139 to i32
  %142 = add nsw i32 %141, -1
  %143 = icmp ugt i32 %142, 1
  br i1 %143, label %148, label %144

144:                                              ; preds = %138
  %145 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %11, i64 0, i32 3
  %146 = load i32, i32* %145, align 4
  %147 = sub nsw i32 0, %146
  br label %157

148:                                              ; preds = %138
  %149 = icmp eq i32 %124, 0
  br i1 %149, label %157, label %150

150:                                              ; preds = %148
  %151 = load i8*, i8** %113, align 8
  %152 = getelementptr inbounds i8, i8* %151, i64 %112
  %153 = load i8, i8* %152, align 1
  %154 = icmp eq i8 %153, 1
  %155 = select i1 %154, i8 0, i8 %111
  %156 = sext i8 %155 to i32
  br label %157

157:                                              ; preds = %150, %148, %144
  %158 = phi i32 [ %147, %144 ], [ %156, %150 ], [ 1, %148 ]
  %159 = icmp sgt i32 %28, 0
  br i1 %159, label %160, label %214

160:                                              ; preds = %157
  %161 = icmp sgt i32 %23, 0
  %162 = trunc i32 %158 to i8
  %163 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 81
  %164 = and i32 %23, 1
  %165 = icmp eq i32 %23, 1
  %166 = sub i32 %23, %164
  %167 = icmp eq i32 %164, 0
  br label %168

168:                                              ; preds = %160, %211
  %169 = phi i32 [ 0, %160 ], [ %212, %211 ]
  br i1 %161, label %170, label %211

170:                                              ; preds = %168
  br i1 %165, label %198, label %171

171:                                              ; preds = %170, %171
  %172 = phi i32 [ %195, %171 ], [ 0, %170 ]
  %173 = phi i32 [ %196, %171 ], [ %166, %170 ]
  %174 = load i32, i32* %19, align 8
  %175 = mul nsw i32 %174, %169
  %176 = add i32 %172, %30
  %177 = add i32 %176, %175
  %178 = load i8*, i8** %113, align 8
  %179 = sext i32 %177 to i64
  %180 = getelementptr inbounds i8, i8* %178, i64 %179
  store i8 %162, i8* %180, align 1
  %181 = load i8, i8* %140, align 4
  %182 = load i8*, i8** %163, align 8
  %183 = getelementptr inbounds i8, i8* %182, i64 %179
  store i8 %181, i8* %183, align 1
  %184 = or i32 %172, 1
  %185 = load i32, i32* %19, align 8
  %186 = mul nsw i32 %185, %169
  %187 = add i32 %184, %30
  %188 = add i32 %187, %186
  %189 = load i8*, i8** %113, align 8
  %190 = sext i32 %188 to i64
  %191 = getelementptr inbounds i8, i8* %189, i64 %190
  store i8 %162, i8* %191, align 1
  %192 = load i8, i8* %140, align 4
  %193 = load i8*, i8** %163, align 8
  %194 = getelementptr inbounds i8, i8* %193, i64 %190
  store i8 %192, i8* %194, align 1
  %195 = add nuw nsw i32 %172, 2
  %196 = add i32 %173, -2
  %197 = icmp eq i32 %196, 0
  br i1 %197, label %198, label %171

198:                                              ; preds = %171, %170
  %199 = phi i32 [ 0, %170 ], [ %195, %171 ]
  br i1 %167, label %211, label %200

200:                                              ; preds = %198
  %201 = load i32, i32* %19, align 8
  %202 = mul nsw i32 %201, %169
  %203 = add i32 %199, %30
  %204 = add i32 %203, %202
  %205 = load i8*, i8** %113, align 8
  %206 = sext i32 %204 to i64
  %207 = getelementptr inbounds i8, i8* %205, i64 %206
  store i8 %162, i8* %207, align 1
  %208 = load i8, i8* %140, align 4
  %209 = load i8*, i8** %163, align 8
  %210 = getelementptr inbounds i8, i8* %209, i64 %206
  store i8 %208, i8* %210, align 1
  br label %211

211:                                              ; preds = %200, %198, %168
  %212 = add nuw nsw i32 %169, 1
  %213 = icmp slt i32 %212, %28
  br i1 %213, label %168, label %214

214:                                              ; preds = %211, %157
  ret void
}

declare i32 @vp9_compute_skin_block(i8*, i8*, i8*, i32, i32, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp9_cyclic_refresh_update_sb_postencode(%struct.VP9_COMP* nocapture readonly, %struct.MODE_INFO* nocapture readonly, i32, i32, i8 zeroext) local_unnamed_addr #3 {
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 84
  %7 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %6, align 8
  %8 = zext i8 %4 to i64
  %9 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 %8
  %10 = load i8, i8* %9, align 1
  %11 = zext i8 %10 to i32
  %12 = getelementptr inbounds [13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 %8
  %13 = load i8, i8* %12, align 1
  %14 = zext i8 %13 to i32
  %15 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %16 = load i32, i32* %15, align 8
  %17 = sub nsw i32 %16, %3
  %18 = icmp slt i32 %17, %11
  %19 = select i1 %18, i32 %17, i32 %11
  %20 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %21 = load i32, i32* %20, align 16
  %22 = sub nsw i32 %21, %2
  %23 = icmp slt i32 %22, %14
  %24 = select i1 %23, i32 %22, i32 %14
  %25 = mul nsw i32 %16, %2
  %26 = add nsw i32 %25, %3
  %27 = icmp sgt i32 %24, 0
  br i1 %27, label %28, label %96

28:                                               ; preds = %5
  %29 = icmp sgt i32 %19, 0
  %30 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 8, i64 0
  %31 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 3
  %32 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %1, i64 0, i32 4
  %33 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 38
  %34 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %7, i64 0, i32 9
  br label %35

35:                                               ; preds = %28, %93
  %36 = phi i32 [ 0, %28 ], [ %94, %93 ]
  br i1 %29, label %37, label %93

37:                                               ; preds = %35, %90
  %38 = phi i32 [ %91, %90 ], [ 0, %35 ]
  %39 = load i32, i32* %15, align 8
  %40 = mul nsw i32 %39, %36
  %41 = add i32 %26, %38
  %42 = add i32 %41, %40
  %43 = load i8, i8* %30, align 4
  %44 = icmp slt i8 %43, 1
  br i1 %44, label %48, label %45

45:                                               ; preds = %37
  %46 = load i8, i8* %31, align 1
  %47 = icmp eq i8 %46, 0
  br i1 %47, label %48, label %69

48:                                               ; preds = %45, %37
  %49 = load i8, i8* %32, align 4
  %50 = icmp slt i8 %49, 3
  br i1 %50, label %51, label %65

51:                                               ; preds = %48
  %52 = load i32, i32* %33, align 4
  %53 = sext i8 %49 to i64
  %54 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %7, i64 0, i32 16, i64 %53
  %55 = load i32, i32* %54, align 4
  %56 = add nsw i32 %55, %52
  %57 = icmp slt i32 %56, 255
  %58 = select i1 %57, i32 %56, i32 255
  %59 = icmp sgt i32 %58, 0
  %60 = select i1 %59, i32 %58, i32 0
  %61 = trunc i32 %60 to i8
  %62 = load i8*, i8** %34, align 8
  %63 = sext i32 %42 to i64
  %64 = getelementptr inbounds i8, i8* %62, i64 %63
  store i8 %61, i8* %64, align 1
  br label %90

65:                                               ; preds = %48
  br i1 %44, label %90, label %66

66:                                               ; preds = %65
  %67 = load i8, i8* %31, align 1
  %68 = icmp eq i8 %67, 0
  br i1 %68, label %90, label %69

69:                                               ; preds = %45, %66
  %70 = load i8, i8* %32, align 4
  %71 = icmp slt i8 %70, 3
  br i1 %71, label %72, label %90

72:                                               ; preds = %69
  %73 = load i32, i32* %33, align 4
  %74 = sext i8 %70 to i64
  %75 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %7, i64 0, i32 16, i64 %74
  %76 = load i32, i32* %75, align 4
  %77 = add nsw i32 %76, %73
  %78 = icmp slt i32 %77, 255
  %79 = select i1 %78, i32 %77, i32 255
  %80 = icmp sgt i32 %79, 0
  %81 = select i1 %80, i32 %79, i32 0
  %82 = load i8*, i8** %34, align 8
  %83 = sext i32 %42 to i64
  %84 = getelementptr inbounds i8, i8* %82, i64 %83
  %85 = load i8, i8* %84, align 1
  %86 = zext i8 %85 to i32
  %87 = icmp slt i32 %81, %86
  %88 = select i1 %87, i32 %81, i32 %86
  %89 = trunc i32 %88 to i8
  store i8 %89, i8* %84, align 1
  br label %90

90:                                               ; preds = %66, %65, %69, %72, %51
  %91 = add nuw nsw i32 %38, 1
  %92 = icmp slt i32 %91, %19
  br i1 %92, label %37, label %93

93:                                               ; preds = %90, %35
  %94 = add nuw nsw i32 %36, 1
  %95 = icmp slt i32 %94, %24
  br i1 %95, label %35, label %96

96:                                               ; preds = %93, %5
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp9_cyclic_refresh_postencode(%struct.VP9_COMP*) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 53
  %3 = load %struct.MODE_INFO**, %struct.MODE_INFO*** %2, align 8
  %4 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 84
  %5 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %4, align 8
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 81
  %7 = load i8*, i8** %6, align 8
  %8 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %5, i64 0, i32 5
  store i32 0, i32* %8, align 4
  %9 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %5, i64 0, i32 6
  store i32 0, i32* %9, align 8
  %10 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %11 = load i32, i32* %10, align 16
  %12 = icmp sgt i32 %11, 0
  br i1 %12, label %13, label %84

13:                                               ; preds = %1
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %15 = load i32, i32* %14, align 8
  br label %16

16:                                               ; preds = %13, %74
  %17 = phi i32 [ 0, %13 ], [ %75, %74 ]
  %18 = phi i32 [ 0, %13 ], [ %76, %74 ]
  %19 = phi i32 [ %15, %13 ], [ %77, %74 ]
  %20 = phi i32 [ 0, %13 ], [ %81, %74 ]
  %21 = phi i32 [ 0, %13 ], [ %79, %74 ]
  %22 = phi %struct.MODE_INFO** [ %3, %13 ], [ %80, %74 ]
  %23 = icmp sgt i32 %19, 0
  br i1 %23, label %24, label %74

24:                                               ; preds = %16, %68
  %25 = phi i32 [ %48, %68 ], [ %17, %16 ]
  %26 = phi i32 [ %49, %68 ], [ %18, %16 ]
  %27 = phi i32 [ %72, %68 ], [ %19, %16 ]
  %28 = phi i32 [ %71, %68 ], [ 0, %16 ]
  %29 = phi i32 [ %69, %68 ], [ %21, %16 ]
  %30 = phi %struct.MODE_INFO** [ %70, %68 ], [ %22, %16 ]
  %31 = load %struct.MODE_INFO*, %struct.MODE_INFO** %30, align 8
  %32 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %31, i64 0, i32 9, i64 0
  %33 = bitcast %union.int_mv* %32 to %struct.mv*
  %34 = bitcast %union.int_mv* %32 to i16*
  %35 = load i16, i16* %34, align 4
  %36 = getelementptr inbounds %struct.mv, %struct.mv* %33, i64 0, i32 1
  %37 = load i16, i16* %36, align 2
  %38 = mul nsw i32 %27, %20
  %39 = add nsw i32 %38, %28
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %7, i64 %40
  %42 = load i8, i8* %41, align 1
  switch i8 %42, label %47 [
    i8 1, label %43
    i8 2, label %45
  ]

43:                                               ; preds = %24
  %44 = add nsw i32 %25, 1
  store i32 %44, i32* %8, align 4
  br label %47

45:                                               ; preds = %24
  %46 = add nsw i32 %26, 1
  store i32 %46, i32* %9, align 8
  br label %47

47:                                               ; preds = %24, %45, %43
  %48 = phi i32 [ %25, %24 ], [ %25, %45 ], [ %44, %43 ]
  %49 = phi i32 [ %26, %24 ], [ %46, %45 ], [ %26, %43 ]
  %50 = load %struct.MODE_INFO*, %struct.MODE_INFO** %30, align 8
  %51 = getelementptr inbounds %struct.MODE_INFO, %struct.MODE_INFO* %50, i64 0, i32 8, i64 0
  %52 = load i8, i8* %51, align 4
  %53 = icmp slt i8 %52, 1
  br i1 %53, label %68, label %54

54:                                               ; preds = %47
  %55 = sext i16 %35 to i32
  %56 = icmp slt i32 %55, 0
  %57 = sub nsw i32 0, %55
  %58 = select i1 %56, i32 %57, i32 %55
  %59 = icmp slt i32 %58, 16
  br i1 %59, label %60, label %68

60:                                               ; preds = %54
  %61 = sext i16 %37 to i32
  %62 = icmp slt i32 %61, 0
  %63 = sub nsw i32 0, %61
  %64 = select i1 %62, i32 %63, i32 %61
  %65 = icmp slt i32 %64, 16
  %66 = zext i1 %65 to i32
  %67 = add nsw i32 %29, %66
  br label %68

68:                                               ; preds = %60, %47, %54
  %69 = phi i32 [ %29, %54 ], [ %29, %47 ], [ %67, %60 ]
  %70 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %30, i64 1
  %71 = add nuw nsw i32 %28, 1
  %72 = load i32, i32* %14, align 8
  %73 = icmp slt i32 %71, %72
  br i1 %73, label %24, label %74

74:                                               ; preds = %68, %16
  %75 = phi i32 [ %17, %16 ], [ %48, %68 ]
  %76 = phi i32 [ %18, %16 ], [ %49, %68 ]
  %77 = phi i32 [ %19, %16 ], [ %72, %68 ]
  %78 = phi %struct.MODE_INFO** [ %22, %16 ], [ %70, %68 ]
  %79 = phi i32 [ %21, %16 ], [ %69, %68 ]
  %80 = getelementptr inbounds %struct.MODE_INFO*, %struct.MODE_INFO** %78, i64 8
  %81 = add nuw nsw i32 %20, 1
  %82 = load i32, i32* %10, align 16
  %83 = icmp slt i32 %81, %82
  br i1 %83, label %16, label %84

84:                                               ; preds = %74, %1
  %85 = phi i32 [ 0, %1 ], [ %79, %74 ]
  %86 = phi i32 [ %11, %1 ], [ %82, %74 ]
  %87 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %88 = load i32, i32* %87, align 4
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %165

90:                                               ; preds = %84
  %91 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 43
  %92 = load i32, i32* %91, align 4
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %165

94:                                               ; preds = %90
  %95 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 14
  %96 = load i32, i32* %95, align 4
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %165

98:                                               ; preds = %94
  %99 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 118
  %100 = load i32, i32* %99, align 16
  %101 = icmp eq i32 %100, 0
  br i1 %101, label %135, label %102

102:                                              ; preds = %98
  %103 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %4, align 8
  %104 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %103, i64 0, i32 0
  %105 = load i32, i32* %104, align 8
  %106 = icmp sgt i32 %105, 0
  br i1 %106, label %107, label %112

107:                                              ; preds = %102
  %108 = udiv i32 100, %105
  %109 = icmp slt i32 %108, 10
  %110 = shl nuw nsw i32 %108, 2
  %111 = select i1 %109, i32 %110, i32 40
  br label %112

112:                                              ; preds = %107, %102
  %113 = phi i32 [ %111, %107 ], [ 40, %102 ]
  %114 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 16
  %115 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 20
  %116 = load i32, i32* %115, align 4
  %117 = icmp eq i32 %116, 0
  %118 = select i1 %117, i32 20, i32 %113
  store i32 %118, i32* %114, align 4
  %119 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 75
  %120 = load i32, i32* %119, align 8
  %121 = icmp slt i32 %120, 50
  br i1 %121, label %122, label %127

122:                                              ; preds = %112
  %123 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 19
  %124 = load i32, i32* %123, align 8
  %125 = icmp sgt i32 %124, 40
  br i1 %125, label %126, label %127

126:                                              ; preds = %122
  store i32 10, i32* %114, align 4
  br label %127

127:                                              ; preds = %112, %122, %126
  %128 = phi i32 [ %118, %112 ], [ %118, %122 ], [ 10, %126 ]
  %129 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 12
  %130 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 18
  %131 = load i32, i32* %130, align 4
  %132 = icmp sgt i32 %128, %131
  %133 = select i1 %132, i32 %131, i32 %128
  store i32 %133, i32* %129, align 4
  %134 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 41
  store i32 1, i32* %134, align 4
  br label %135

135:                                              ; preds = %98, %127
  %136 = phi i1 [ true, %127 ], [ false, %98 ]
  %137 = sitofp i32 %85 to double
  %138 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %139 = load i32, i32* %138, align 8
  %140 = mul nsw i32 %139, %86
  %141 = sitofp i32 %140 to double
  %142 = fdiv double %137, %141
  %143 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %5, i64 0, i32 15
  %144 = load double, double* %143, align 8
  %145 = fmul double %144, 3.000000e+00
  %146 = fadd double %145, %142
  %147 = fmul double %146, 2.500000e-01
  store double %147, double* %143, align 8
  br i1 %136, label %165, label %148

148:                                              ; preds = %135
  %149 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 41
  %150 = load i32, i32* %149, align 4
  %151 = icmp eq i32 %150, 1
  br i1 %151, label %152, label %165

152:                                              ; preds = %148
  %153 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 19
  %154 = load i32, i32* %153, align 8
  %155 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 11
  %156 = load i32, i32* %155, align 8
  %157 = add nsw i32 %156, 1
  %158 = icmp sgt i32 %154, %157
  br i1 %158, label %159, label %165

159:                                              ; preds = %152
  %160 = fcmp olt double %142, 6.500000e-01
  %161 = fcmp olt double %147, 6.000000e-01
  %162 = or i1 %160, %161
  br i1 %162, label %163, label %164

163:                                              ; preds = %159
  store i32 0, i32* %149, align 4
  br label %164

164:                                              ; preds = %159, %163
  store double %142, double* %143, align 8
  br label %165

165:                                              ; preds = %94, %84, %135, %148, %152, %164, %90
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp9_cyclic_refresh_set_golden_update(%struct.VP9_COMP* nocapture) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 84
  %3 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %2, align 8
  %4 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 0
  %5 = load i32, i32* %4, align 8
  %6 = icmp sgt i32 %5, 0
  br i1 %6, label %7, label %12

7:                                                ; preds = %1
  %8 = udiv i32 100, %5
  %9 = icmp slt i32 %8, 10
  %10 = shl nuw nsw i32 %8, 2
  %11 = select i1 %9, i32 %10, i32 40
  br label %12

12:                                               ; preds = %1, %7
  %13 = phi i32 [ %11, %7 ], [ 40, %1 ]
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 16
  store i32 %13, i32* %14, align 4
  %15 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 20
  %16 = load i32, i32* %15, align 4
  %17 = icmp eq i32 %16, 0
  %18 = select i1 %17, i32 20, i32 %13
  store i32 %18, i32* %14, align 4
  %19 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 75
  %20 = load i32, i32* %19, align 8
  %21 = icmp slt i32 %20, 50
  br i1 %21, label %22, label %27

22:                                               ; preds = %12
  %23 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 19
  %24 = load i32, i32* %23, align 8
  %25 = icmp sgt i32 %24, 40
  br i1 %25, label %26, label %27

26:                                               ; preds = %22
  store i32 10, i32* %14, align 4
  br label %27

27:                                               ; preds = %26, %22, %12
  ret void
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp9_cyclic_refresh_update_parameters(%struct.VP9_COMP* readonly) local_unnamed_addr #3 {
  %2 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 84
  %3 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %2, align 8
  %4 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 31
  %5 = load i32, i32* %4, align 8
  %6 = shl i32 %5, 2
  %7 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 62
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 %8, 1
  %10 = select i1 %9, i32 35, i32 20
  %11 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 49
  %12 = load i32, i32* %11, align 4
  %13 = shl i32 %12, 1
  %14 = icmp slt i32 %10, %13
  %15 = select i1 %14, i32 %10, i32 %13
  %16 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 19
  store i32 1, i32* %16, align 8
  %17 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %18 = load i32, i32* %17, align 4
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %63, label %20

20:                                               ; preds = %1
  %21 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 27
  %22 = load i8, i8* %21, align 4
  %23 = icmp eq i8 %22, 0
  br i1 %23, label %24, label %63

24:                                               ; preds = %20
  %25 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 1
  %26 = load i32, i32* %25, align 4
  %27 = icmp sgt i32 %26, 0
  br i1 %27, label %63, label %28

28:                                               ; preds = %24
  %29 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 29
  %30 = load i32, i32* %29, align 4
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %36

32:                                               ; preds = %28
  %33 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 28
  %34 = load i32, i32* %33, align 8
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %63, label %36

36:                                               ; preds = %32, %28
  %37 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 31, i64 1
  %38 = load i32, i32* %37, align 4
  %39 = icmp slt i32 %38, %15
  br i1 %39, label %63, label %40

40:                                               ; preds = %36
  %41 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %42 = load i32, i32* %41, align 4
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %49, label %44

44:                                               ; preds = %40
  %45 = sext i32 %26 to i64
  %46 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 12, i64 %45, i32 14
  %47 = load i32, i32* %46, align 4
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %64, label %63

49:                                               ; preds = %40
  %50 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 75
  %51 = load i32, i32* %50, align 8
  %52 = icmp slt i32 %51, 20
  br i1 %52, label %53, label %57

53:                                               ; preds = %49
  %54 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 19
  %55 = load i32, i32* %54, align 8
  %56 = icmp sgt i32 %55, 40
  br i1 %56, label %63, label %57

57:                                               ; preds = %53, %49
  %58 = icmp sgt i32 %38, 233
  br i1 %58, label %59, label %64

59:                                               ; preds = %57
  %60 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 19
  %61 = load i32, i32* %60, align 8
  %62 = icmp sgt i32 %61, 20
  br i1 %62, label %63, label %64

63:                                               ; preds = %32, %1, %44, %20, %59, %53, %36, %24
  store i32 0, i32* %16, align 8
  br label %180

64:                                               ; preds = %57, %59, %44
  %65 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 0
  %66 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 17
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %67, 0
  %69 = select i1 %68, i32 10, i32 5
  store i32 %69, i32* %65, align 8
  %70 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 1
  store i32 60, i32* %70, align 4
  %71 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 3
  store i32 0, i32* %71, align 4
  %72 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 12
  store i16 32, i16* %72, align 8
  %73 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 14
  store i32 15, i32* %73, align 8
  %74 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 19
  %75 = load i32, i32* %74, align 8
  %76 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 3
  %77 = load i32, i32* %76, align 4
  %78 = shl i32 %77, 2
  %79 = trunc i32 %69 to i8
  %80 = udiv i8 100, %79
  %81 = zext i8 %80 to i32
  %82 = mul nsw i32 %78, %81
  %83 = icmp slt i32 %75, %82
  %84 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 13
  br i1 %83, label %85, label %86

85:                                               ; preds = %64
  store double 3.000000e+00, double* %84, align 8
  br label %95

86:                                               ; preds = %64
  store double 2.000000e+00, double* %84, align 8
  %87 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 0
  %88 = load i32, i32* %87, align 8
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %95, label %90

90:                                               ; preds = %86
  %91 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 1
  %92 = load i32, i32* %91, align 4
  %93 = icmp ugt i32 %92, 1
  br i1 %93, label %94, label %95

94:                                               ; preds = %90
  store double 1.700000e+00, double* %84, align 8
  store i32 13, i32* %73, align 8
  br label %95

95:                                               ; preds = %86, %90, %94, %85
  %96 = phi double [ 2.000000e+00, %86 ], [ 2.000000e+00, %90 ], [ 1.700000e+00, %94 ], [ 3.000000e+00, %85 ]
  %97 = load i32, i32* %7, align 4
  %98 = icmp eq i32 %97, 1
  br i1 %98, label %99, label %121

99:                                               ; preds = %95
  %100 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 0
  %101 = load i32, i32* %100, align 16
  %102 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 2
  %103 = load i32, i32* %102, align 8
  %104 = add nsw i32 %103, -1
  %105 = icmp eq i32 %101, %104
  %106 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 21
  br i1 %105, label %107, label %108

107:                                              ; preds = %99
  store i32 1, i32* %106, align 8
  br label %113

108:                                              ; preds = %99
  %109 = load i32, i32* %106, align 8
  %110 = icmp eq i32 %109, 0
  %111 = select i1 %110, i32 10, i32 5
  %112 = select i1 %110, i32 15, i32 10
  br label %113

113:                                              ; preds = %108, %107
  %114 = phi i32 [ 10, %107 ], [ %112, %108 ]
  %115 = phi i32 [ 5, %107 ], [ %111, %108 ]
  store i32 %115, i32* %65, align 8
  %116 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 20
  %117 = load i32, i32* %116, align 4
  %118 = icmp slt i32 %117, 30
  %119 = select i1 %118, i32 %114, i32 %115
  store i32 %119, i32* %65, align 8
  %120 = select i1 %118, i32 %114, i32 %115
  store double 2.000000e+00, double* %84, align 8
  store i32 10, i32* %73, align 8
  br label %121

121:                                              ; preds = %113, %95
  %122 = phi i32 [ %120, %113 ], [ %69, %95 ]
  %123 = phi double [ 2.000000e+00, %113 ], [ %96, %95 ]
  %124 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 3
  %125 = load i32, i32* %124, align 16
  %126 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 4
  %127 = load i32, i32* %126, align 4
  %128 = mul nsw i32 %127, %125
  %129 = icmp slt i32 %128, 101377
  br i1 %129, label %130, label %138

130:                                              ; preds = %121
  %131 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 25
  %132 = load i32, i32* %131, align 8
  %133 = icmp slt i32 %132, 3000
  br i1 %133, label %134, label %135

134:                                              ; preds = %130
  store i16 64, i16* %72, align 8
  store i32 13, i32* %73, align 8
  br label %138

135:                                              ; preds = %130
  store i32 70, i32* %70, align 4
  %136 = fcmp ogt double %123, 2.500000e+00
  %137 = select i1 %136, double %123, double 2.500000e+00
  store double %137, double* %84, align 8
  br label %138

138:                                              ; preds = %134, %135, %121
  %139 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 20
  %140 = load i32, i32* %139, align 4
  %141 = icmp eq i32 %140, 0
  br i1 %141, label %142, label %147

142:                                              ; preds = %138
  store i32 10, i32* %65, align 8
  store double 1.500000e+00, double* %84, align 8
  store i32 10, i32* %73, align 8
  %143 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 41
  %144 = load i32, i32* %143, align 4
  %145 = icmp eq i32 %144, 1
  br i1 %145, label %146, label %147

146:                                              ; preds = %142
  store i32 0, i32* %65, align 8
  store double 1.000000e+00, double* %84, align 8
  br label %147

147:                                              ; preds = %142, %146, %138
  %148 = phi i32 [ 10, %142 ], [ 0, %146 ], [ %122, %138 ]
  %149 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %150 = load i32, i32* %149, align 16
  %151 = mul nsw i32 %150, %148
  %152 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %153 = load i32, i32* %152, align 8
  %154 = mul nsw i32 %151, %153
  %155 = sdiv i32 %154, 100
  %156 = sitofp i32 %155 to double
  %157 = sitofp i32 %6 to double
  %158 = fdiv double %156, %157
  %159 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 5
  %160 = load i32, i32* %159, align 4
  %161 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 6
  %162 = load i32, i32* %161, align 8
  %163 = add i32 %162, %160
  %164 = add i32 %163, %155
  %165 = ashr i32 %164, 1
  %166 = sitofp i32 %165 to double
  %167 = fdiv double %166, %157
  %168 = fmul double %167, 7.000000e+00
  %169 = fmul double %168, 1.250000e-01
  %170 = fcmp olt double %158, %169
  %171 = select i1 %170, double %158, double %167
  %172 = load i32, i32* %7, align 4
  %173 = icmp eq i32 %172, 1
  br i1 %173, label %174, label %177

174:                                              ; preds = %147
  %175 = sitofp i32 %163 to double
  %176 = fdiv double %175, %157
  br label %177

177:                                              ; preds = %174, %147
  %178 = phi double [ %176, %174 ], [ %171, %147 ]
  %179 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 18
  store double %178, double* %179, align 8
  br label %180

180:                                              ; preds = %177, %63
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_cyclic_refresh_setup(%struct.VP9_COMP*) local_unnamed_addr #0 {
  %2 = alloca i32, align 4
  %3 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 84
  %4 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %3, align 8
  %5 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 71
  %7 = load i32, i32* %6, align 8
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %9, label %17

9:                                                ; preds = %1
  %10 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 103
  %11 = load i32, i32* %10, align 4
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %17, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 104, i32 43
  %15 = load i32, i32* %14, align 8
  %16 = icmp ne i32 %15, 0
  br label %17

17:                                               ; preds = %9, %1, %13
  %18 = phi i1 [ true, %1 ], [ false, %9 ], [ %16, %13 ]
  %19 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 77
  %20 = load i32, i32* %19, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %17
  %23 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %4, i64 0, i32 15
  store double 0.000000e+00, double* %23, align 8
  br label %24

24:                                               ; preds = %22, %17
  %25 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 118
  %26 = load i32, i32* %25, align 16
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %48, label %28

28:                                               ; preds = %24
  %29 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %3, align 8
  %30 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %29, i64 0, i32 8
  %31 = load i8*, i8** %30, align 8
  %32 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %33 = load i32, i32* %32, align 16
  %34 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %35 = load i32, i32* %34, align 8
  %36 = mul nsw i32 %35, %33
  %37 = sext i32 %36 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %31, i8 0, i64 %37, i1 false) #5
  %38 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %29, i64 0, i32 9
  %39 = load i8*, i8** %38, align 8
  %40 = load i32, i32* %32, align 16
  %41 = load i32, i32* %34, align 8
  %42 = mul nsw i32 %41, %40
  %43 = sext i32 %42 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %39, i8 -1, i64 %43, i1 false) #5
  %44 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %29, i64 0, i32 2
  store i32 0, i32* %44, align 8
  %45 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 41
  store i32 1, i32* %45, align 4
  %46 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 42
  store i32 1, i32* %46, align 16
  %47 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %29, i64 0, i32 20
  store i32 0, i32* %47, align 4
  br label %48

48:                                               ; preds = %24, %28
  %49 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %4, i64 0, i32 19
  %50 = load i32, i32* %49, align 8
  %51 = icmp eq i32 %50, 0
  br i1 %51, label %57, label %52

52:                                               ; preds = %48
  %53 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 95
  %54 = load i8, i8* %53, align 8
  %55 = icmp ne i8 %54, 0
  %56 = or i1 %18, %55
  br i1 %56, label %57, label %80

57:                                               ; preds = %48, %52
  %58 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 81
  %59 = load i8*, i8** %58, align 8
  %60 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %61 = load i32, i32* %60, align 16
  %62 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %63 = load i32, i32* %62, align 8
  %64 = mul nsw i32 %63, %61
  %65 = sext i32 %64 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %59, i8 0, i64 %65, i1 false)
  tail call void @vp9_disable_segmentation(%struct.segmentation* %5) #5
  %66 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %67 = load i32, i32* %66, align 4
  %68 = icmp eq i32 %67, 0
  %69 = or i1 %18, %68
  br i1 %69, label %70, label %425

70:                                               ; preds = %57
  %71 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %4, i64 0, i32 9
  %72 = load i8*, i8** %71, align 8
  %73 = load i32, i32* %60, align 16
  %74 = load i32, i32* %62, align 8
  %75 = mul nsw i32 %74, %73
  %76 = sext i32 %75 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %72, i8 -1, i64 %76, i1 false)
  %77 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %4, i64 0, i32 2
  store i32 0, i32* %77, align 8
  %78 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %4, i64 0, i32 17
  store i32 0, i32* %78, align 4
  %79 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %4, i64 0, i32 20
  store i32 0, i32* %79, align 4
  br label %425

80:                                               ; preds = %52
  %81 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 38
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 80
  %84 = load i32, i32* %83, align 16
  %85 = tail call double @vp9_convert_qindex_to_q(i32 %82, i32 %84) #5
  %86 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %4, i64 0, i32 20
  %87 = load i32, i32* %86, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %86, align 4
  tail call void @vpx_clear_system_state() #5
  %89 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 3
  %90 = load i32, i32* %89, align 4
  %91 = sext i32 %90 to i64
  %92 = shl nsw i64 %91, 10
  %93 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %4, i64 0, i32 10
  store i64 %92, i64* %93, align 8
  %94 = fmul double %85, %85
  %95 = fptosi double %94 to i64
  %96 = shl i64 %95, 2
  %97 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %4, i64 0, i32 11
  store i64 %96, i64* %97, align 8
  tail call void @vp9_enable_segmentation(%struct.segmentation* %5) #5
  tail call void @vp9_clearall_segfeatures(%struct.segmentation* %5) #5
  %98 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 69, i32 3
  store i8 0, i8* %98, align 1
  tail call void @vp9_disable_segfeature(%struct.segmentation* %5, i32 0, i32 0) #5
  tail call void @vp9_enable_segfeature(%struct.segmentation* %5, i32 1, i32 0) #5
  tail call void @vp9_enable_segfeature(%struct.segmentation* %5, i32 2, i32 0) #5
  %99 = load i32, i32* %81, align 4
  %100 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %4, i64 0, i32 13
  %101 = load double, double* %100, align 8
  %102 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %3, align 8
  %103 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67
  %104 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 23
  %105 = load i32, i32* %104, align 4
  %106 = load i32, i32* %83, align 16
  %107 = tail call i32 @vp9_compute_qdelta_by_rate(%struct.RATE_CONTROL* %103, i32 %105, i32 %99, double %101, i32 %106) #5
  %108 = sub nsw i32 0, %107
  %109 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %102, i64 0, i32 1
  %110 = load i32, i32* %109, align 4
  %111 = mul i32 %110, %99
  %112 = sdiv i32 %111, 100
  %113 = icmp slt i32 %112, %108
  br i1 %113, label %114, label %117

114:                                              ; preds = %80
  %115 = sub i32 0, %111
  %116 = sdiv i32 %115, 100
  br label %117

117:                                              ; preds = %80, %114
  %118 = phi i32 [ %116, %114 ], [ %107, %80 ]
  %119 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %4, i64 0, i32 16, i64 1
  store i32 %118, i32* %119, align 4
  %120 = load i32, i32* %81, align 4
  %121 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 39
  %122 = load i32, i32* %121, align 8
  %123 = add i32 %120, %118
  %124 = add i32 %123, %122
  %125 = icmp slt i32 %124, 255
  %126 = select i1 %125, i32 %124, i32 255
  %127 = icmp sgt i32 %126, 0
  %128 = select i1 %127, i32 %126, i32 0
  %129 = tail call i32 @vp9_compute_rd_mult(%struct.VP9_COMP* %0, i32 %128) #5
  %130 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %4, i64 0, i32 7
  store i32 %129, i32* %130, align 4
  tail call void @vp9_set_segdata(%struct.segmentation* %5, i32 1, i32 0, i32 %118) #5
  %131 = load i32, i32* %81, align 4
  %132 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %4, i64 0, i32 14
  %133 = load i32, i32* %132, align 8
  %134 = sitofp i32 %133 to double
  %135 = fmul double %134, 1.000000e-01
  %136 = load double, double* %100, align 8
  %137 = fmul double %136, %135
  %138 = fcmp ogt double %137, 4.000000e+00
  %139 = select i1 %138, double 4.000000e+00, double %137
  %140 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %3, align 8
  %141 = load i32, i32* %104, align 4
  %142 = load i32, i32* %83, align 16
  %143 = tail call i32 @vp9_compute_qdelta_by_rate(%struct.RATE_CONTROL* %103, i32 %141, i32 %131, double %139, i32 %142) #5
  %144 = sub nsw i32 0, %143
  %145 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %140, i64 0, i32 1
  %146 = load i32, i32* %145, align 4
  %147 = mul i32 %146, %131
  %148 = sdiv i32 %147, 100
  %149 = icmp slt i32 %148, %144
  br i1 %149, label %150, label %153

150:                                              ; preds = %117
  %151 = sub i32 0, %147
  %152 = sdiv i32 %151, 100
  br label %153

153:                                              ; preds = %117, %150
  %154 = phi i32 [ %152, %150 ], [ %143, %117 ]
  %155 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %4, i64 0, i32 16, i64 2
  store i32 %154, i32* %155, align 8
  tail call void @vp9_set_segdata(%struct.segmentation* %5, i32 2, i32 0, i32 %154) #5
  %156 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %3, align 8
  %157 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 81
  %158 = load i8*, i8** %157, align 8
  %159 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %160 = load i32, i32* %159, align 16
  %161 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %162 = load i32, i32* %161, align 8
  %163 = mul nsw i32 %162, %160
  %164 = sext i32 %163 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %158, i8 0, i64 %164, i1 false) #5
  %165 = load i32, i32* %161, align 8
  %166 = add nsw i32 %165, 7
  %167 = sdiv i32 %166, 8
  %168 = load i32, i32* %159, align 16
  %169 = add nsw i32 %168, 7
  %170 = sdiv i32 %169, 8
  %171 = mul nsw i32 %170, %167
  %172 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %156, i64 0, i32 0
  %173 = load i32, i32* %172, align 8
  %174 = mul i32 %168, %165
  %175 = mul i32 %174, %173
  %176 = sdiv i32 %175, 100
  %177 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %156, i64 0, i32 2
  %178 = load i32, i32* %177, align 8
  %179 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %156, i64 0, i32 4
  store i32 0, i32* %179, align 8
  %180 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 9, i32 62
  %181 = load i32, i32* %180, align 4
  %182 = icmp eq i32 %181, 1
  %183 = select i1 %182, i32 0, i32 100
  %184 = load i32, i32* %81, align 4
  %185 = select i1 %182, i32 2, i32 1
  %186 = tail call i32 @vp9_get_qindex(%struct.segmentation* %5, i32 %185, i32 %184) #5
  %187 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 0
  %188 = load i32, i32* %187, align 8
  %189 = icmp eq i32 %188, 0
  br i1 %189, label %201, label %190

190:                                              ; preds = %153
  %191 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 1
  %192 = load i32, i32* %191, align 4
  %193 = icmp ugt i32 %192, 1
  br i1 %193, label %194, label %201

194:                                              ; preds = %190
  %195 = load i32, i32* %81, align 4
  %196 = tail call i32 @vp9_get_qindex(%struct.segmentation* %5, i32 1, i32 %195) #5
  %197 = load i32, i32* %81, align 4
  %198 = icmp sgt i32 %196, %197
  br i1 %198, label %199, label %201

199:                                              ; preds = %194
  %200 = tail call i32 @vp9_get_qindex(%struct.segmentation* %5, i32 1, i32 %197) #5
  br label %201

201:                                              ; preds = %199, %194, %190, %153
  %202 = phi i32 [ %183, %190 ], [ %183, %153 ], [ 60, %194 ], [ 60, %199 ]
  %203 = phi i32 [ %186, %190 ], [ %186, %153 ], [ %197, %194 ], [ %200, %199 ]
  %204 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 11
  %205 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 13
  %206 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 12
  %207 = load i8, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @num_8x8_blocks_wide_lookup, i64 0, i64 12), align 1
  %208 = zext i8 %207 to i32
  %209 = load i8, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @num_8x8_blocks_high_lookup, i64 0, i64 12), align 1
  %210 = zext i8 %209 to i32
  %211 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 128, i32 1
  %212 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %156, i64 0, i32 8
  %213 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %156, i64 0, i32 9
  %214 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 129
  %215 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %156, i64 0, i32 21
  %216 = bitcast i32* %2 to i8*
  %217 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 12, i32 2
  %218 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 89, i64 12, i32 0
  br label %219

219:                                              ; preds = %413, %201
  %220 = phi i32 [ %178, %201 ], [ %410, %413 ]
  %221 = phi i32 [ 0, %201 ], [ %326, %413 ]
  %222 = phi i32 [ 0, %201 ], [ %327, %413 ]
  %223 = sdiv i32 %220, %167
  %224 = mul nsw i32 %223, %167
  %225 = sub nsw i32 %220, %224
  %226 = shl nsw i32 %223, 3
  %227 = shl nsw i32 %225, 3
  %228 = load i32, i32* %204, align 16
  %229 = icmp eq i32 %228, 0
  %230 = zext i1 %229 to i32
  %231 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %205, align 16
  %232 = icmp eq %struct.yv12_buffer_config* %231, null
  br i1 %232, label %246, label %233

233:                                              ; preds = %219
  %234 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %231, i64 0, i32 0
  %235 = load i32, i32* %234, align 8
  %236 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %206, align 8
  %237 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %236, i64 0, i32 0
  %238 = load i32, i32* %237, align 8
  %239 = icmp eq i32 %235, %238
  br i1 %239, label %240, label %246

240:                                              ; preds = %233
  %241 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %231, i64 0, i32 1
  %242 = load i32, i32* %241, align 4
  %243 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %236, i64 0, i32 1
  %244 = load i32, i32* %243, align 4
  %245 = icmp eq i32 %242, %244
  br i1 %245, label %247, label %246

246:                                              ; preds = %240, %233, %219
  br label %247

247:                                              ; preds = %246, %240
  %248 = phi i32 [ 0, %246 ], [ %230, %240 ]
  %249 = load i32, i32* %161, align 8
  %250 = mul nsw i32 %249, %226
  %251 = add nsw i32 %250, %227
  %252 = sub nsw i32 %249, %227
  %253 = icmp slt i32 %252, %208
  %254 = select i1 %253, i32 %252, i32 %208
  %255 = load i32, i32* %159, align 16
  %256 = sub nsw i32 %255, %226
  %257 = icmp slt i32 %256, %210
  %258 = select i1 %257, i32 %256, i32 %210
  %259 = load i32, i32* %187, align 8
  %260 = icmp eq i32 %259, 0
  br i1 %260, label %269, label %261

261:                                              ; preds = %247
  %262 = load i32, i32* %211, align 4
  %263 = icmp ugt i32 %262, 1
  br i1 %263, label %264, label %269

264:                                              ; preds = %261
  %265 = icmp slt i32 %254, 3
  %266 = icmp slt i32 %258, 3
  %267 = or i1 %265, %266
  %268 = select i1 %267, i32 4, i32 %202
  br label %269

269:                                              ; preds = %264, %261, %247
  %270 = phi i32 [ %202, %261 ], [ %202, %247 ], [ %268, %264 ]
  %271 = icmp sgt i32 %258, 0
  br i1 %271, label %272, label %325

272:                                              ; preds = %269
  %273 = icmp sgt i32 %254, 0
  br label %274

274:                                              ; preds = %319, %272
  %275 = phi i32 [ 0, %272 ], [ %322, %319 ]
  %276 = phi i32 [ %222, %272 ], [ %321, %319 ]
  %277 = phi i32 [ %221, %272 ], [ %320, %319 ]
  %278 = phi i32 [ 0, %272 ], [ %323, %319 ]
  br i1 %273, label %279, label %319

279:                                              ; preds = %274, %313
  %280 = phi i32 [ %316, %313 ], [ %275, %274 ]
  %281 = phi i32 [ %315, %313 ], [ %276, %274 ]
  %282 = phi i32 [ %314, %313 ], [ %277, %274 ]
  %283 = phi i32 [ %317, %313 ], [ 0, %274 ]
  %284 = load i32, i32* %161, align 8
  %285 = mul nsw i32 %284, %278
  %286 = add i32 %283, %251
  %287 = add i32 %286, %285
  %288 = load i8*, i8** %212, align 8
  %289 = sext i32 %287 to i64
  %290 = getelementptr inbounds i8, i8* %288, i64 %289
  %291 = load i8, i8* %290, align 1
  %292 = icmp eq i8 %291, 0
  br i1 %292, label %293, label %309

293:                                              ; preds = %279
  %294 = add nsw i32 %281, 1
  %295 = load i8*, i8** %213, align 8
  %296 = getelementptr inbounds i8, i8* %295, i64 %289
  %297 = load i8, i8* %296, align 1
  %298 = zext i8 %297 to i32
  %299 = icmp slt i32 %203, %298
  br i1 %299, label %306, label %300

300:                                              ; preds = %293
  %301 = load i8*, i8** %214, align 16
  %302 = getelementptr inbounds i8, i8* %301, i64 %289
  %303 = load i8, i8* %302, align 1
  %304 = zext i8 %303 to i32
  %305 = icmp sgt i32 %270, %304
  br i1 %305, label %306, label %313

306:                                              ; preds = %300, %293
  %307 = add nsw i32 %280, 1
  %308 = add nsw i32 %282, 1
  br label %313

309:                                              ; preds = %279
  %310 = icmp slt i8 %291, 0
  br i1 %310, label %311, label %313

311:                                              ; preds = %309
  %312 = add nsw i8 %291, 1
  store i8 %312, i8* %290, align 1
  br label %313

313:                                              ; preds = %311, %309, %306, %300
  %314 = phi i32 [ %308, %306 ], [ %282, %300 ], [ %282, %311 ], [ %282, %309 ]
  %315 = phi i32 [ %294, %306 ], [ %294, %300 ], [ %281, %311 ], [ %281, %309 ]
  %316 = phi i32 [ %307, %306 ], [ %280, %300 ], [ %280, %311 ], [ %280, %309 ]
  %317 = add nuw nsw i32 %283, 1
  %318 = icmp slt i32 %317, %254
  br i1 %318, label %279, label %319

319:                                              ; preds = %313, %274
  %320 = phi i32 [ %277, %274 ], [ %314, %313 ]
  %321 = phi i32 [ %276, %274 ], [ %315, %313 ]
  %322 = phi i32 [ %275, %274 ], [ %316, %313 ]
  %323 = add nuw nsw i32 %278, 1
  %324 = icmp slt i32 %323, %258
  br i1 %324, label %274, label %325

325:                                              ; preds = %319, %269
  %326 = phi i32 [ %221, %269 ], [ %320, %319 ]
  %327 = phi i32 [ %222, %269 ], [ %321, %319 ]
  %328 = phi i32 [ 0, %269 ], [ %322, %319 ]
  %329 = mul nsw i32 %258, %254
  %330 = sdiv i32 %329, 2
  %331 = icmp slt i32 %328, %330
  br i1 %331, label %407, label %332

332:                                              ; preds = %325
  %333 = icmp eq i32 %248, 0
  br i1 %333, label %363, label %334

334:                                              ; preds = %332
  %335 = load i32, i32* %215, align 8
  %336 = icmp eq i32 %335, 0
  br i1 %336, label %363, label %337

337:                                              ; preds = %334
  %338 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %206, align 8
  %339 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %338, i64 0, i32 13
  %340 = load i8*, i8** %339, align 8
  %341 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %338, i64 0, i32 4
  %342 = load i32, i32* %341, align 8
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %216) #5
  store i32 -1431655766, i32* %2, align 4
  %343 = mul i32 %342, %223
  %344 = add i32 %343, %225
  %345 = shl i32 %344, 6
  %346 = sext i32 %345 to i64
  %347 = getelementptr inbounds i8, i8* %340, i64 %346
  %348 = load i32 (i8*, i32, i8*, i32, i32*)*, i32 (i8*, i32, i8*, i32, i32*)** %217, align 16
  %349 = call i32 %348(i8* %347, i32 %342, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @VP9_VAR_OFFS, i64 0, i64 0), i32 0, i32* nonnull %2) #5
  %350 = icmp eq i32 %349, 0
  br i1 %350, label %351, label %361

351:                                              ; preds = %337
  %352 = load %struct.yv12_buffer_config*, %struct.yv12_buffer_config** %205, align 16
  %353 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %352, i64 0, i32 13
  %354 = load i8*, i8** %353, align 8
  %355 = getelementptr inbounds %struct.yv12_buffer_config, %struct.yv12_buffer_config* %352, i64 0, i32 4
  %356 = load i32, i32* %355, align 8
  %357 = getelementptr inbounds i8, i8* %354, i64 %346
  %358 = load i32 (i8*, i32, i8*, i32)*, i32 (i8*, i32, i8*, i32)** %218, align 16
  %359 = call i32 %358(i8* %347, i32 %342, i8* %357, i32 %356) #5
  %360 = icmp eq i32 %359, 0
  br i1 %360, label %362, label %361

361:                                              ; preds = %351, %337
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %216) #5
  br label %363

362:                                              ; preds = %351
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %216) #5
  br label %407

363:                                              ; preds = %361, %334, %332
  br i1 %271, label %364, label %404

364:                                              ; preds = %363
  %365 = icmp sgt i32 %254, 0
  %366 = and i32 %254, 1
  %367 = icmp eq i32 %254, 1
  %368 = sub i32 %254, %366
  %369 = icmp eq i32 %366, 0
  br label %370

370:                                              ; preds = %401, %364
  %371 = phi i32 [ 0, %364 ], [ %402, %401 ]
  br i1 %365, label %372, label %401

372:                                              ; preds = %370
  br i1 %367, label %392, label %373

373:                                              ; preds = %372, %373
  %374 = phi i32 [ %389, %373 ], [ 0, %372 ]
  %375 = phi i32 [ %390, %373 ], [ %368, %372 ]
  %376 = load i32, i32* %161, align 8
  %377 = mul nsw i32 %376, %371
  %378 = add i32 %374, %251
  %379 = add i32 %378, %377
  %380 = sext i32 %379 to i64
  %381 = getelementptr inbounds i8, i8* %158, i64 %380
  store i8 1, i8* %381, align 1
  %382 = or i32 %374, 1
  %383 = load i32, i32* %161, align 8
  %384 = mul nsw i32 %383, %371
  %385 = add i32 %382, %251
  %386 = add i32 %385, %384
  %387 = sext i32 %386 to i64
  %388 = getelementptr inbounds i8, i8* %158, i64 %387
  store i8 1, i8* %388, align 1
  %389 = add nuw nsw i32 %374, 2
  %390 = add i32 %375, -2
  %391 = icmp eq i32 %390, 0
  br i1 %391, label %392, label %373

392:                                              ; preds = %373, %372
  %393 = phi i32 [ 0, %372 ], [ %389, %373 ]
  br i1 %369, label %401, label %394

394:                                              ; preds = %392
  %395 = load i32, i32* %161, align 8
  %396 = mul nsw i32 %395, %371
  %397 = add i32 %393, %251
  %398 = add i32 %397, %396
  %399 = sext i32 %398 to i64
  %400 = getelementptr inbounds i8, i8* %158, i64 %399
  store i8 1, i8* %400, align 1
  br label %401

401:                                              ; preds = %394, %392, %370
  %402 = add nuw nsw i32 %371, 1
  %403 = icmp slt i32 %402, %258
  br i1 %403, label %370, label %404

404:                                              ; preds = %401, %363
  %405 = load i32, i32* %179, align 8
  %406 = add nsw i32 %405, %329
  store i32 %406, i32* %179, align 8
  br label %407

407:                                              ; preds = %404, %362, %325
  %408 = add nsw i32 %220, 1
  %409 = icmp eq i32 %408, %171
  %410 = select i1 %409, i32 0, i32 %408
  %411 = load i32, i32* %179, align 8
  %412 = icmp slt i32 %411, %176
  br i1 %412, label %413, label %416

413:                                              ; preds = %407
  %414 = load i32, i32* %177, align 8
  %415 = icmp eq i32 %410, %414
  br i1 %415, label %416, label %219

416:                                              ; preds = %413, %407
  store i32 %410, i32* %177, align 8
  %417 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %156, i64 0, i32 17
  store i32 0, i32* %417, align 4
  %418 = load i32, i32* %180, align 4
  %419 = icmp eq i32 %418, 1
  br i1 %419, label %425, label %420

420:                                              ; preds = %416
  %421 = mul nsw i32 %327, 3
  %422 = ashr i32 %421, 2
  %423 = icmp slt i32 %326, %422
  br i1 %423, label %424, label %425

424:                                              ; preds = %420
  store i32 1, i32* %417, align 4
  br label %425

425:                                              ; preds = %424, %420, %416, %70, %57
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vp9_cyclic_refresh_reset_resize(%struct.VP9_COMP* nocapture) local_unnamed_addr #0 {
  %2 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 84
  %3 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %2, align 8
  %4 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 8
  %5 = load i8*, i8** %4, align 8
  %6 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 33
  %7 = load i32, i32* %6, align 16
  %8 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 8, i32 35
  %9 = load i32, i32* %8, align 8
  %10 = mul nsw i32 %9, %7
  %11 = sext i32 %10 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %5, i8 0, i64 %11, i1 false)
  %12 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 9
  %13 = load i8*, i8** %12, align 8
  %14 = load i32, i32* %6, align 16
  %15 = load i32, i32* %8, align 8
  %16 = mul nsw i32 %15, %14
  %17 = sext i32 %16 to i64
  tail call void @llvm.memset.p0i8.i64(i8* align 1 %13, i8 -1, i64 %17, i1 false)
  %18 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 2
  store i32 0, i32* %18, align 8
  %19 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 41
  store i32 1, i32* %19, align 4
  %20 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 42
  store i32 1, i32* %20, align 16
  %21 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %3, i64 0, i32 20
  store i32 0, i32* %21, align 4
  ret void
}

declare void @vp9_disable_segmentation(%struct.segmentation*) local_unnamed_addr #2

declare double @vp9_convert_qindex_to_q(i32, i32) local_unnamed_addr #2

declare void @vpx_clear_system_state() local_unnamed_addr #2

declare void @vp9_enable_segmentation(%struct.segmentation*) local_unnamed_addr #2

declare void @vp9_clearall_segfeatures(%struct.segmentation*) local_unnamed_addr #2

declare void @vp9_disable_segfeature(%struct.segmentation*, i32, i32) local_unnamed_addr #2

declare void @vp9_enable_segfeature(%struct.segmentation*, i32, i32) local_unnamed_addr #2

declare i32 @vp9_compute_rd_mult(%struct.VP9_COMP*, i32) local_unnamed_addr #2

declare void @vp9_set_segdata(%struct.segmentation*, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @vp9_cyclic_refresh_get_rdmult(%struct.CYCLIC_REFRESH* nocapture readonly) local_unnamed_addr #4 {
  %2 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %0, i64 0, i32 7
  %3 = load i32, i32* %2, align 4
  ret i32 %3
}

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vp9_cyclic_refresh_limit_q(%struct.VP9_COMP* nocapture readonly, i32* nocapture) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 84
  %4 = load %struct.CYCLIC_REFRESH*, %struct.CYCLIC_REFRESH** %3, align 8
  %5 = getelementptr inbounds %struct.CYCLIC_REFRESH, %struct.CYCLIC_REFRESH* %4, i64 0, i32 0
  %6 = load i32, i32* %5, align 8
  %7 = icmp sgt i32 %6, 0
  br i1 %7, label %8, label %16

8:                                                ; preds = %2
  %9 = getelementptr inbounds %struct.VP9_COMP, %struct.VP9_COMP* %0, i64 0, i32 67, i32 55
  %10 = load i32, i32* %9, align 8
  %11 = load i32, i32* %1, align 4
  %12 = sub nsw i32 %10, %11
  %13 = icmp sgt i32 %12, 8
  br i1 %13, label %14, label %16

14:                                               ; preds = %8
  %15 = add nsw i32 %10, -8
  store i32 %15, i32* %1, align 4
  br label %16

16:                                               ; preds = %14, %8, %2
  ret void
}

declare i32 @vp9_compute_qdelta_by_rate(%struct.RATE_CONTROL*, i32, i32, double, i32) local_unnamed_addr #2

declare i32 @vp9_get_qindex(%struct.segmentation*, i32, i32) local_unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
