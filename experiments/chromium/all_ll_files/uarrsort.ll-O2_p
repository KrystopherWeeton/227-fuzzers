; ModuleID = '../../third_party/icu/source/common/uarrsort.cpp'
source_filename = "../../third_party/icu/source/common/uarrsort.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.max_align_t = type { i64, x86_fp80 }
%"class.icu_69::MaybeStackArray" = type { %struct.max_align_t*, i32, i8, [7 x %struct.max_align_t] }
%"class.icu_69::MaybeStackArray.0" = type { %struct.max_align_t*, i32, i8, [14 x %struct.max_align_t] }

@__const._ZL13insertionSortPciiPFiPKvS1_S1_ES1_P10UErrorCode.v = private unnamed_addr constant { %struct.max_align_t*, i32, i8, [3 x i8], [7 x { i64, [8 x i8], x86_fp80 }] } { %struct.max_align_t* inttoptr (i64 -6148914691236517206 to %struct.max_align_t*), i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", [7 x { i64, [8 x i8], x86_fp80 }] [{ i64, [8 x i8], x86_fp80 } { i64 -6148914691236517206, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", x86_fp80 0xKFFFFFFFFFFFFFFFFFFFF }, { i64, [8 x i8], x86_fp80 } { i64 -6148914691236517206, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", x86_fp80 0xKFFFFFFFFFFFFFFFFFFFF }, { i64, [8 x i8], x86_fp80 } { i64 -6148914691236517206, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", x86_fp80 0xKFFFFFFFFFFFFFFFFFFFF }, { i64, [8 x i8], x86_fp80 } { i64 -6148914691236517206, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", x86_fp80 0xKFFFFFFFFFFFFFFFFFFFF }, { i64, [8 x i8], x86_fp80 } { i64 -6148914691236517206, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", x86_fp80 0xKFFFFFFFFFFFFFFFFFFFF }, { i64, [8 x i8], x86_fp80 } { i64 -6148914691236517206, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", x86_fp80 0xKFFFFFFFFFFFFFFFFFFFF }, { i64, [8 x i8], x86_fp80 } { i64 -6148914691236517206, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", x86_fp80 0xKFFFFFFFFFFFFFFFFFFFF }] }, align 16
@__const._ZL9quickSortPciiPFiPKvS1_S1_ES1_P10UErrorCode.xw = private unnamed_addr constant { %struct.max_align_t*, i32, i8, [3 x i8], [14 x { i64, [8 x i8], x86_fp80 }] } { %struct.max_align_t* inttoptr (i64 -6148914691236517206 to %struct.max_align_t*), i32 -1431655766, i8 -86, [3 x i8] c"\AA\AA\AA", [14 x { i64, [8 x i8], x86_fp80 }] [{ i64, [8 x i8], x86_fp80 } { i64 -6148914691236517206, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", x86_fp80 0xKFFFFFFFFFFFFFFFFFFFF }, { i64, [8 x i8], x86_fp80 } { i64 -6148914691236517206, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", x86_fp80 0xKFFFFFFFFFFFFFFFFFFFF }, { i64, [8 x i8], x86_fp80 } { i64 -6148914691236517206, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", x86_fp80 0xKFFFFFFFFFFFFFFFFFFFF }, { i64, [8 x i8], x86_fp80 } { i64 -6148914691236517206, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", x86_fp80 0xKFFFFFFFFFFFFFFFFFFFF }, { i64, [8 x i8], x86_fp80 } { i64 -6148914691236517206, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", x86_fp80 0xKFFFFFFFFFFFFFFFFFFFF }, { i64, [8 x i8], x86_fp80 } { i64 -6148914691236517206, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", x86_fp80 0xKFFFFFFFFFFFFFFFFFFFF }, { i64, [8 x i8], x86_fp80 } { i64 -6148914691236517206, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", x86_fp80 0xKFFFFFFFFFFFFFFFFFFFF }, { i64, [8 x i8], x86_fp80 } { i64 -6148914691236517206, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", x86_fp80 0xKFFFFFFFFFFFFFFFFFFFF }, { i64, [8 x i8], x86_fp80 } { i64 -6148914691236517206, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", x86_fp80 0xKFFFFFFFFFFFFFFFFFFFF }, { i64, [8 x i8], x86_fp80 } { i64 -6148914691236517206, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", x86_fp80 0xKFFFFFFFFFFFFFFFFFFFF }, { i64, [8 x i8], x86_fp80 } { i64 -6148914691236517206, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", x86_fp80 0xKFFFFFFFFFFFFFFFFFFFF }, { i64, [8 x i8], x86_fp80 } { i64 -6148914691236517206, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", x86_fp80 0xKFFFFFFFFFFFFFFFFFFFF }, { i64, [8 x i8], x86_fp80 } { i64 -6148914691236517206, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", x86_fp80 0xKFFFFFFFFFFFFFFFFFFFF }, { i64, [8 x i8], x86_fp80 } { i64 -6148914691236517206, [8 x i8] c"\AA\AA\AA\AA\AA\AA\AA\AA", x86_fp80 0xKFFFFFFFFFFFFFFFFFFFF }] }, align 16

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @uprv_uint16Comparator_69(i8* nocapture readnone, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %4 = bitcast i8* %1 to i16*
  %5 = load i16, i16* %4, align 2
  %6 = zext i16 %5 to i32
  %7 = bitcast i8* %2 to i16*
  %8 = load i16, i16* %7, align 2
  %9 = zext i16 %8 to i32
  %10 = sub nsw i32 %6, %9
  ret i32 %10
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @uprv_int32Comparator_69(i8* nocapture readnone, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %4 = bitcast i8* %1 to i32*
  %5 = load i32, i32* %4, align 4
  %6 = bitcast i8* %2 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = sub nsw i32 %5, %7
  ret i32 %8
}

; Function Attrs: norecurse nounwind readonly ssp uwtable
define hidden i32 @uprv_uint32Comparator_69(i8* nocapture readnone, i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #0 {
  %4 = bitcast i8* %1 to i32*
  %5 = load i32, i32* %4, align 4
  %6 = bitcast i8* %2 to i32*
  %7 = load i32, i32* %6, align 4
  %8 = icmp ult i32 %5, %7
  %9 = icmp ne i32 %5, %7
  %10 = zext i1 %9 to i32
  %11 = select i1 %8, i32 -1, i32 %10
  ret i32 %11
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind ssp uwtable
define hidden i32 @uprv_stableBinarySearch_69(i8*, i32, i8*, i32, i32 (i8*, i8*, i8*)* nocapture, i8*) local_unnamed_addr #2 {
  %7 = icmp sgt i32 %1, 8
  br i1 %7, label %16, label %8

8:                                                ; preds = %33, %6
  %9 = phi i32 [ %1, %6 ], [ %34, %33 ]
  %10 = phi i32 [ 0, %6 ], [ %35, %33 ]
  %11 = phi i8 [ 0, %6 ], [ %36, %33 ]
  %12 = icmp slt i32 %10, %9
  br i1 %12, label %13, label %57

13:                                               ; preds = %8
  %14 = sext i32 %10 to i64
  %15 = sext i32 %3 to i64
  br label %39

16:                                               ; preds = %6, %33
  %17 = phi i8 [ %36, %33 ], [ 0, %6 ]
  %18 = phi i32 [ %35, %33 ], [ 0, %6 ]
  %19 = phi i32 [ %34, %33 ], [ %1, %6 ]
  %20 = add nsw i32 %18, %19
  %21 = sdiv i32 %20, 2
  %22 = mul nsw i32 %21, %3
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds i8, i8* %0, i64 %23
  %25 = tail call i32 %4(i8* %5, i8* %2, i8* %24) #5
  %26 = icmp eq i32 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %16
  %28 = add nsw i32 %21, 1
  br label %33

29:                                               ; preds = %16
  %30 = icmp slt i32 %25, 0
  %31 = select i1 %30, i32 %21, i32 %19
  %32 = select i1 %30, i32 %18, i32 %21
  br label %33

33:                                               ; preds = %29, %27
  %34 = phi i32 [ %19, %27 ], [ %31, %29 ]
  %35 = phi i32 [ %28, %27 ], [ %32, %29 ]
  %36 = phi i8 [ 1, %27 ], [ %17, %29 ]
  %37 = sub nsw i32 %34, %35
  %38 = icmp sgt i32 %37, 8
  br i1 %38, label %16, label %8

39:                                               ; preds = %49, %13
  %40 = phi i64 [ %14, %13 ], [ %51, %49 ]
  %41 = phi i8 [ %11, %13 ], [ %50, %49 ]
  %42 = phi i32 [ %10, %13 ], [ %52, %49 ]
  %43 = mul nsw i64 %40, %15
  %44 = getelementptr inbounds i8, i8* %0, i64 %43
  %45 = tail call i32 %4(i8* %5, i8* %2, i8* %44) #5
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %49, label %47

47:                                               ; preds = %39
  %48 = icmp slt i32 %45, 0
  br i1 %48, label %55, label %49

49:                                               ; preds = %47, %39
  %50 = phi i8 [ %41, %47 ], [ 1, %39 ]
  %51 = add nsw i64 %40, 1
  %52 = add nsw i32 %42, 1
  %53 = trunc i64 %51 to i32
  %54 = icmp eq i32 %9, %53
  br i1 %54, label %57, label %39

55:                                               ; preds = %47
  %56 = trunc i64 %40 to i32
  br label %57

57:                                               ; preds = %49, %55, %8
  %58 = phi i32 [ %10, %8 ], [ %56, %55 ], [ %52, %49 ]
  %59 = phi i8 [ %11, %8 ], [ %41, %55 ], [ %50, %49 ]
  %60 = icmp eq i8 %59, 0
  %61 = add nsw i32 %58, -1
  %62 = xor i32 %58, -1
  %63 = select i1 %60, i32 %62, i32 %61
  ret i32 %63
}

; Function Attrs: nounwind ssp uwtable
define hidden void @uprv_sortArray_69(i8*, i32, i32, i32 (i8*, i8*, i8*)*, i8*, i8 signext, i32*) local_unnamed_addr #2 {
  %8 = alloca %"class.icu_69::MaybeStackArray", align 16
  %9 = alloca %"class.icu_69::MaybeStackArray.0", align 16
  %10 = icmp eq i32* %6, null
  br i1 %10, label %185, label %11

11:                                               ; preds = %7
  %12 = load i32, i32* %6, align 4
  %13 = icmp slt i32 %12, 1
  br i1 %13, label %14, label %185

14:                                               ; preds = %11
  %15 = icmp sgt i32 %1, 0
  %16 = icmp eq i8* %0, null
  %17 = and i1 %16, %15
  %18 = icmp slt i32 %1, 0
  %19 = or i1 %18, %17
  %20 = icmp slt i32 %2, 1
  %21 = or i1 %20, %19
  %22 = icmp eq i32 (i8*, i8*, i8*)* %3, null
  %23 = or i1 %22, %21
  br i1 %23, label %24, label %25

24:                                               ; preds = %14
  store i32 1, i32* %6, align 4
  br label %185

25:                                               ; preds = %14
  %26 = icmp slt i32 %1, 2
  br i1 %26, label %185, label %27

27:                                               ; preds = %25
  %28 = icmp slt i32 %1, 9
  %29 = icmp ne i8 %5, 0
  %30 = or i1 %28, %29
  br i1 %30, label %31, label %145

31:                                               ; preds = %27
  %32 = bitcast %"class.icu_69::MaybeStackArray"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 240, i8* nonnull %32) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %32, i8* align 16 bitcast ({ %struct.max_align_t*, i32, i8, [3 x i8], [7 x { i64, [8 x i8], x86_fp80 }] }* @__const._ZL13insertionSortPciiPFiPKvS1_S1_ES1_P10UErrorCode.v to i8*), i64 240, i1 false) #5
  %33 = getelementptr inbounds %"class.icu_69::MaybeStackArray", %"class.icu_69::MaybeStackArray"* %8, i64 0, i32 0
  %34 = getelementptr inbounds %"class.icu_69::MaybeStackArray", %"class.icu_69::MaybeStackArray"* %8, i64 0, i32 3, i64 0
  store %struct.max_align_t* %34, %struct.max_align_t** %33, align 16
  %35 = getelementptr inbounds %"class.icu_69::MaybeStackArray", %"class.icu_69::MaybeStackArray"* %8, i64 0, i32 1
  store i32 7, i32* %35, align 8
  %36 = getelementptr inbounds %"class.icu_69::MaybeStackArray", %"class.icu_69::MaybeStackArray"* %8, i64 0, i32 2
  store i8 0, i8* %36, align 4
  %37 = sext i32 %2 to i64
  %38 = add nuw nsw i64 %37, 31
  %39 = lshr i64 %38, 5
  %40 = trunc i64 %39 to i32
  %41 = icmp sgt i32 %40, 7
  br i1 %41, label %44, label %42

42:                                               ; preds = %31
  %43 = bitcast %struct.max_align_t* %34 to i8*
  br label %57

44:                                               ; preds = %31
  %45 = shl i64 %39, 32
  %46 = ashr exact i64 %45, 27
  %47 = call noalias i8* @uprv_malloc_69(i64 %46) #6
  %48 = icmp eq i8* %47, null
  br i1 %48, label %56, label %49

49:                                               ; preds = %44
  %50 = load i8, i8* %36, align 4
  %51 = icmp eq i8 %50, 0
  %52 = bitcast %"class.icu_69::MaybeStackArray"* %8 to i8**
  br i1 %51, label %55, label %53

53:                                               ; preds = %49
  %54 = load i8*, i8** %52, align 16
  call void @uprv_free_69(i8* %54) #5
  br label %55

55:                                               ; preds = %53, %49
  store i8* %47, i8** %52, align 16
  store i32 %40, i32* %35, align 8
  store i8 1, i8* %36, align 4
  br label %57

56:                                               ; preds = %44
  store i32 7, i32* %6, align 4
  br label %138

57:                                               ; preds = %42, %55
  %58 = phi i8* [ %47, %55 ], [ %43, %42 ]
  %59 = zext i32 %1 to i64
  br label %60

60:                                               ; preds = %135, %57
  %61 = phi i64 [ 1, %57 ], [ %136, %135 ]
  %62 = mul nsw i64 %61, %37
  %63 = getelementptr inbounds i8, i8* %0, i64 %62
  %64 = trunc i64 %61 to i32
  %65 = icmp sgt i32 %64, 8
  br i1 %65, label %73, label %66

66:                                               ; preds = %90, %60
  %67 = phi i32 [ %64, %60 ], [ %91, %90 ]
  %68 = phi i32 [ 0, %60 ], [ %92, %90 ]
  %69 = phi i8 [ 0, %60 ], [ %93, %90 ]
  %70 = icmp slt i32 %68, %67
  br i1 %70, label %71, label %114

71:                                               ; preds = %66
  %72 = sext i32 %68 to i64
  br label %96

73:                                               ; preds = %60, %90
  %74 = phi i8 [ %93, %90 ], [ 0, %60 ]
  %75 = phi i32 [ %92, %90 ], [ 0, %60 ]
  %76 = phi i32 [ %91, %90 ], [ %64, %60 ]
  %77 = add nsw i32 %76, %75
  %78 = sdiv i32 %77, 2
  %79 = mul nsw i32 %78, %2
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i8, i8* %0, i64 %80
  %82 = call i32 %3(i8* %4, i8* %63, i8* %81) #5
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %86

84:                                               ; preds = %73
  %85 = add nsw i32 %78, 1
  br label %90

86:                                               ; preds = %73
  %87 = icmp slt i32 %82, 0
  %88 = select i1 %87, i32 %78, i32 %76
  %89 = select i1 %87, i32 %75, i32 %78
  br label %90

90:                                               ; preds = %86, %84
  %91 = phi i32 [ %76, %84 ], [ %88, %86 ]
  %92 = phi i32 [ %85, %84 ], [ %89, %86 ]
  %93 = phi i8 [ 1, %84 ], [ %74, %86 ]
  %94 = sub nsw i32 %91, %92
  %95 = icmp sgt i32 %94, 8
  br i1 %95, label %73, label %66

96:                                               ; preds = %106, %71
  %97 = phi i64 [ %72, %71 ], [ %108, %106 ]
  %98 = phi i8 [ %69, %71 ], [ %107, %106 ]
  %99 = phi i32 [ %68, %71 ], [ %109, %106 ]
  %100 = mul nsw i64 %97, %37
  %101 = getelementptr inbounds i8, i8* %0, i64 %100
  %102 = call i32 %3(i8* %4, i8* %63, i8* %101) #5
  %103 = icmp eq i32 %102, 0
  br i1 %103, label %106, label %104

104:                                              ; preds = %96
  %105 = icmp slt i32 %102, 0
  br i1 %105, label %112, label %106

106:                                              ; preds = %104, %96
  %107 = phi i8 [ %98, %104 ], [ 1, %96 ]
  %108 = add nsw i64 %97, 1
  %109 = add nsw i32 %99, 1
  %110 = trunc i64 %108 to i32
  %111 = icmp eq i32 %67, %110
  br i1 %111, label %114, label %96

112:                                              ; preds = %104
  %113 = trunc i64 %97 to i32
  br label %114

114:                                              ; preds = %106, %112, %66
  %115 = phi i32 [ %68, %66 ], [ %113, %112 ], [ %109, %106 ]
  %116 = phi i8 [ %69, %66 ], [ %98, %112 ], [ %107, %106 ]
  %117 = icmp eq i8 %116, 0
  %118 = add nsw i32 %115, -1
  %119 = xor i32 %115, -1
  %120 = select i1 %117, i32 %119, i32 %118
  %121 = icmp slt i32 %120, 0
  %122 = xor i32 %120, -1
  %123 = add nsw i32 %120, 1
  %124 = select i1 %121, i32 %122, i32 %123
  %125 = sext i32 %124 to i64
  %126 = icmp sgt i64 %61, %125
  br i1 %126, label %127, label %135

127:                                              ; preds = %114
  %128 = mul nsw i32 %124, %2
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds i8, i8* %0, i64 %129
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %58, i8* align 1 %63, i64 %37, i1 false) #5
  %131 = getelementptr inbounds i8, i8* %130, i64 %37
  %132 = sub nsw i32 %64, %124
  %133 = sext i32 %132 to i64
  %134 = mul nsw i64 %133, %37
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %131, i8* align 1 %130, i64 %134, i1 false) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %130, i8* align 1 %58, i64 %37, i1 false) #5
  br label %135

135:                                              ; preds = %127, %114
  %136 = add nuw nsw i64 %61, 1
  %137 = icmp eq i64 %136, %59
  br i1 %137, label %138, label %60

138:                                              ; preds = %135, %56
  %139 = load i8, i8* %36, align 4
  %140 = icmp eq i8 %139, 0
  br i1 %140, label %144, label %141

141:                                              ; preds = %138
  %142 = bitcast %"class.icu_69::MaybeStackArray"* %8 to i8**
  %143 = load i8*, i8** %142, align 16
  call void @uprv_free_69(i8* %143) #5
  br label %144

144:                                              ; preds = %138, %141
  call void @llvm.lifetime.end.p0i8(i64 240, i8* nonnull %32) #5
  br label %185

145:                                              ; preds = %27
  %146 = bitcast %"class.icu_69::MaybeStackArray.0"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 464, i8* nonnull %146) #5
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 16 %146, i8* align 16 bitcast ({ %struct.max_align_t*, i32, i8, [3 x i8], [14 x { i64, [8 x i8], x86_fp80 }] }* @__const._ZL9quickSortPciiPFiPKvS1_S1_ES1_P10UErrorCode.xw to i8*), i64 464, i1 false) #5
  %147 = getelementptr inbounds %"class.icu_69::MaybeStackArray.0", %"class.icu_69::MaybeStackArray.0"* %9, i64 0, i32 0
  %148 = getelementptr inbounds %"class.icu_69::MaybeStackArray.0", %"class.icu_69::MaybeStackArray.0"* %9, i64 0, i32 3, i64 0
  store %struct.max_align_t* %148, %struct.max_align_t** %147, align 16
  %149 = getelementptr inbounds %"class.icu_69::MaybeStackArray.0", %"class.icu_69::MaybeStackArray.0"* %9, i64 0, i32 1
  store i32 14, i32* %149, align 8
  %150 = getelementptr inbounds %"class.icu_69::MaybeStackArray.0", %"class.icu_69::MaybeStackArray.0"* %9, i64 0, i32 2
  store i8 0, i8* %150, align 4
  %151 = sext i32 %2 to i64
  %152 = add nuw nsw i64 %151, 31
  %153 = lshr i64 %152, 5
  %154 = shl nuw nsw i64 %153, 1
  %155 = trunc i64 %154 to i32
  %156 = icmp sgt i32 %155, 14
  br i1 %156, label %157, label %171

157:                                              ; preds = %145
  %158 = shl i64 %153, 33
  %159 = ashr exact i64 %158, 27
  %160 = call noalias i8* @uprv_malloc_69(i64 %159) #6
  %161 = icmp eq i8* %160, null
  br i1 %161, label %170, label %162

162:                                              ; preds = %157
  %163 = load i8, i8* %150, align 4
  %164 = icmp eq i8 %163, 0
  %165 = bitcast %"class.icu_69::MaybeStackArray.0"* %9 to i8**
  br i1 %164, label %168, label %166

166:                                              ; preds = %162
  %167 = load i8*, i8** %165, align 16
  call void @uprv_free_69(i8* %167) #5
  br label %168

168:                                              ; preds = %166, %162
  store i8* %160, i8** %165, align 16
  store i32 %155, i32* %149, align 8
  store i8 1, i8* %150, align 4
  %169 = bitcast i8* %160 to %struct.max_align_t*
  br label %171

170:                                              ; preds = %157
  store i32 7, i32* %6, align 4
  br label %178

171:                                              ; preds = %168, %145
  %172 = phi %struct.max_align_t* [ %169, %168 ], [ %148, %145 ]
  %173 = bitcast %struct.max_align_t* %172 to i8*
  %174 = shl i64 %153, 32
  %175 = ashr exact i64 %174, 32
  %176 = getelementptr inbounds %struct.max_align_t, %struct.max_align_t* %172, i64 %175
  %177 = bitcast %struct.max_align_t* %176 to i8*
  call fastcc void @_ZL12subQuickSortPciiiPFiPKvS1_S1_ES1_PvS4_(i8* %0, i32 0, i32 %1, i32 %2, i32 (i8*, i8*, i8*)* nonnull %3, i8* %4, i8* %173, i8* %177) #5
  br label %178

178:                                              ; preds = %171, %170
  %179 = load i8, i8* %150, align 4
  %180 = icmp eq i8 %179, 0
  br i1 %180, label %184, label %181

181:                                              ; preds = %178
  %182 = bitcast %"class.icu_69::MaybeStackArray.0"* %9 to i8**
  %183 = load i8*, i8** %182, align 16
  call void @uprv_free_69(i8* %183) #5
  br label %184

184:                                              ; preds = %178, %181
  call void @llvm.lifetime.end.p0i8(i64 464, i8* nonnull %146) #5
  br label %185

185:                                              ; preds = %11, %144, %184, %25, %7, %24
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: allocsize(0)
declare noalias i8* @uprv_malloc_69(i64) local_unnamed_addr #3

declare void @uprv_free_69(i8*) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZL12subQuickSortPciiiPFiPKvS1_S1_ES1_PvS4_(i8*, i32, i32, i32, i32 (i8*, i8*, i8*)*, i8*, i8*, i8*) unnamed_addr #2 {
  %9 = sext i32 %3 to i64
  br label %10

10:                                               ; preds = %161, %8
  %11 = phi i32 [ %2, %8 ], [ %162, %161 ]
  %12 = phi i32 [ %1, %8 ], [ %163, %161 ]
  %13 = add nsw i32 %12, 9
  %14 = icmp slt i32 %13, %11
  br i1 %14, label %101, label %15

15:                                               ; preds = %10
  %16 = mul nsw i32 %12, %3
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i8, i8* %0, i64 %17
  %19 = sub nsw i32 %11, %12
  %20 = icmp sgt i32 %19, 1
  br i1 %20, label %21, label %166

21:                                               ; preds = %15
  %22 = zext i32 %19 to i64
  br label %23

23:                                               ; preds = %98, %21
  %24 = phi i64 [ 1, %21 ], [ %99, %98 ]
  %25 = mul nsw i64 %24, %9
  %26 = getelementptr inbounds i8, i8* %18, i64 %25
  %27 = trunc i64 %24 to i32
  %28 = icmp sgt i32 %27, 8
  br i1 %28, label %36, label %29

29:                                               ; preds = %53, %23
  %30 = phi i32 [ %27, %23 ], [ %54, %53 ]
  %31 = phi i32 [ 0, %23 ], [ %55, %53 ]
  %32 = phi i8 [ 0, %23 ], [ %56, %53 ]
  %33 = icmp slt i32 %31, %30
  br i1 %33, label %34, label %77

34:                                               ; preds = %29
  %35 = sext i32 %31 to i64
  br label %59

36:                                               ; preds = %23, %53
  %37 = phi i8 [ %56, %53 ], [ 0, %23 ]
  %38 = phi i32 [ %55, %53 ], [ 0, %23 ]
  %39 = phi i32 [ %54, %53 ], [ %27, %23 ]
  %40 = add nsw i32 %39, %38
  %41 = sdiv i32 %40, 2
  %42 = mul nsw i32 %41, %3
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i8, i8* %18, i64 %43
  %45 = tail call i32 %4(i8* %5, i8* %26, i8* %44) #5
  %46 = icmp eq i32 %45, 0
  br i1 %46, label %47, label %49

47:                                               ; preds = %36
  %48 = add nsw i32 %41, 1
  br label %53

49:                                               ; preds = %36
  %50 = icmp slt i32 %45, 0
  %51 = select i1 %50, i32 %41, i32 %39
  %52 = select i1 %50, i32 %38, i32 %41
  br label %53

53:                                               ; preds = %49, %47
  %54 = phi i32 [ %39, %47 ], [ %51, %49 ]
  %55 = phi i32 [ %48, %47 ], [ %52, %49 ]
  %56 = phi i8 [ 1, %47 ], [ %37, %49 ]
  %57 = sub nsw i32 %54, %55
  %58 = icmp sgt i32 %57, 8
  br i1 %58, label %36, label %29

59:                                               ; preds = %69, %34
  %60 = phi i64 [ %35, %34 ], [ %71, %69 ]
  %61 = phi i8 [ %32, %34 ], [ %70, %69 ]
  %62 = phi i32 [ %31, %34 ], [ %72, %69 ]
  %63 = mul nsw i64 %60, %9
  %64 = getelementptr inbounds i8, i8* %18, i64 %63
  %65 = tail call i32 %4(i8* %5, i8* %26, i8* %64) #5
  %66 = icmp eq i32 %65, 0
  br i1 %66, label %69, label %67

67:                                               ; preds = %59
  %68 = icmp slt i32 %65, 0
  br i1 %68, label %75, label %69

69:                                               ; preds = %67, %59
  %70 = phi i8 [ %61, %67 ], [ 1, %59 ]
  %71 = add nsw i64 %60, 1
  %72 = add nsw i32 %62, 1
  %73 = trunc i64 %71 to i32
  %74 = icmp eq i32 %30, %73
  br i1 %74, label %77, label %59

75:                                               ; preds = %67
  %76 = trunc i64 %60 to i32
  br label %77

77:                                               ; preds = %69, %29, %75
  %78 = phi i32 [ %31, %29 ], [ %76, %75 ], [ %72, %69 ]
  %79 = phi i8 [ %32, %29 ], [ %61, %75 ], [ %70, %69 ]
  %80 = icmp eq i8 %79, 0
  %81 = add nsw i32 %78, -1
  %82 = xor i32 %78, -1
  %83 = select i1 %80, i32 %82, i32 %81
  %84 = icmp slt i32 %83, 0
  %85 = xor i32 %83, -1
  %86 = add nsw i32 %83, 1
  %87 = select i1 %84, i32 %85, i32 %86
  %88 = sext i32 %87 to i64
  %89 = icmp sgt i64 %24, %88
  br i1 %89, label %90, label %98

90:                                               ; preds = %77
  %91 = mul nsw i32 %87, %3
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %18, i64 %92
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %26, i64 %9, i1 false) #5
  %94 = getelementptr inbounds i8, i8* %93, i64 %9
  %95 = sub nsw i32 %27, %87
  %96 = sext i32 %95 to i64
  %97 = mul nsw i64 %96, %9
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 1 %94, i8* align 1 %93, i64 %97, i1 false) #5
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %93, i8* align 1 %6, i64 %9, i1 false) #5
  br label %98

98:                                               ; preds = %90, %77
  %99 = add nuw nsw i64 %24, 1
  %100 = icmp eq i64 %99, %22
  br i1 %100, label %166, label %23

101:                                              ; preds = %10
  %102 = add nsw i32 %12, %11
  %103 = sdiv i32 %102, 2
  %104 = sext i32 %103 to i64
  %105 = mul nsw i64 %104, %9
  %106 = getelementptr inbounds i8, i8* %0, i64 %105
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 %106, i64 %9, i1 false)
  br label %107

107:                                              ; preds = %145, %101
  %108 = phi i32 [ %12, %101 ], [ %146, %145 ]
  %109 = phi i32 [ %11, %101 ], [ %147, %145 ]
  %110 = sext i32 %108 to i64
  br label %111

111:                                              ; preds = %111, %107
  %112 = phi i64 [ %117, %111 ], [ %110, %107 ]
  %113 = mul nsw i64 %112, %9
  %114 = getelementptr inbounds i8, i8* %0, i64 %113
  %115 = tail call i32 %4(i8* %5, i8* %114, i8* %6) #5
  %116 = icmp slt i32 %115, 0
  %117 = add i64 %112, 1
  br i1 %116, label %111, label %118

118:                                              ; preds = %111
  %119 = sext i32 %109 to i64
  br label %120

120:                                              ; preds = %118, %120
  %121 = phi i64 [ %119, %118 ], [ %122, %120 ]
  %122 = add i64 %121, -1
  %123 = mul nsw i64 %122, %9
  %124 = getelementptr inbounds i8, i8* %0, i64 %123
  %125 = tail call i32 %4(i8* %5, i8* %6, i8* %124) #5
  %126 = icmp slt i32 %125, 0
  br i1 %126, label %120, label %127

127:                                              ; preds = %120
  %128 = trunc i64 %112 to i32
  %129 = trunc i64 %121 to i32
  %130 = trunc i64 %122 to i32
  %131 = icmp slt i32 %128, %129
  br i1 %131, label %132, label %145

132:                                              ; preds = %127
  %133 = icmp slt i32 %128, %130
  br i1 %133, label %134, label %143

134:                                              ; preds = %132
  %135 = shl i64 %112, 32
  %136 = ashr exact i64 %135, 32
  %137 = mul nsw i64 %136, %9
  %138 = getelementptr inbounds i8, i8* %0, i64 %137
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %7, i8* align 1 %138, i64 %9, i1 false)
  %139 = shl i64 %122, 32
  %140 = ashr exact i64 %139, 32
  %141 = mul nsw i64 %140, %9
  %142 = getelementptr inbounds i8, i8* %0, i64 %141
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %138, i8* align 1 %142, i64 %9, i1 false)
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %142, i8* align 1 %7, i64 %9, i1 false)
  br label %143

143:                                              ; preds = %134, %132
  %144 = add nsw i32 %128, 1
  br label %145

145:                                              ; preds = %127, %143
  %146 = phi i32 [ %144, %143 ], [ %128, %127 ]
  %147 = phi i32 [ %130, %143 ], [ %129, %127 ]
  %148 = icmp slt i32 %146, %147
  br i1 %148, label %107, label %149

149:                                              ; preds = %145
  %150 = sub nsw i32 %147, %12
  %151 = sub nsw i32 %11, %146
  %152 = icmp slt i32 %150, %151
  br i1 %152, label %153, label %157

153:                                              ; preds = %149
  %154 = add nsw i32 %147, -1
  %155 = icmp slt i32 %12, %154
  br i1 %155, label %156, label %161

156:                                              ; preds = %153
  tail call fastcc void @_ZL12subQuickSortPciiiPFiPKvS1_S1_ES1_PvS4_(i8* %0, i32 %12, i32 %147, i32 %3, i32 (i8*, i8*, i8*)* %4, i8* %5, i8* %6, i8* %7)
  br label %161

157:                                              ; preds = %149
  %158 = add nsw i32 %11, -1
  %159 = icmp slt i32 %146, %158
  br i1 %159, label %160, label %161

160:                                              ; preds = %157
  tail call fastcc void @_ZL12subQuickSortPciiiPFiPKvS1_S1_ES1_PvS4_(i8* %0, i32 %146, i32 %11, i32 %3, i32 (i8*, i8*, i8*)* %4, i8* %5, i8* %6, i8* %7)
  br label %161

161:                                              ; preds = %157, %160, %153, %156
  %162 = phi i32 [ %11, %156 ], [ %11, %153 ], [ %147, %160 ], [ %147, %157 ]
  %163 = phi i32 [ %146, %156 ], [ %146, %153 ], [ %12, %160 ], [ %12, %157 ]
  %164 = add nsw i32 %162, -1
  %165 = icmp slt i32 %163, %164
  br i1 %165, label %10, label %166

166:                                              ; preds = %161, %98, %15
  ret void
}

attributes #0 = { norecurse nounwind readonly ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { allocsize(0) "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { nounwind allocsize(0) }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
