; ModuleID = '../../third_party/swiftshader/third_party/astc-encoder/Source/astc_decompress_symbolic.cpp'
source_filename = "../../third_party/swiftshader/third_party/astc-encoder/Source/astc_decompress_symbolic.cpp"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%struct.quantization_and_transfer_table = type { [32 x i8] }
%struct.block_size_descriptor = type { i32, i32, i32, i32, i32, [87 x %struct.decimation_table*], [2048 x %struct.block_mode], [3073 x %struct.partition_info] }
%struct.decimation_table = type { i32, [216 x i8], [216 x [4 x i8]], [216 x [4 x i8]] }
%struct.block_mode = type { i8, i8, i8, i8 }
%struct.partition_info = type { i32, [216 x i8] }
%struct.symbolic_compressed_block = type { i32, i32, i32, i32, [4 x i32], i32, [4 x [12 x i32]], i32, [64 x i8], [64 x i8], i32, [4 x i32] }
%struct.imageblock = type { [864 x float], [216 x float], [216 x float], [216 x float], [216 x float], [216 x i8], [216 x i8], [216 x i8], float, float, float, float, float, float, float, float, i32, i32, i32, i32 }
%class.vtype4 = type { i32, i32, i32, i32 }

@quant_and_xfer_tables = external local_unnamed_addr global [12 x %struct.quantization_and_transfer_table], align 16

; Function Attrs: nounwind optsize ssp uwtable
define hidden void @_Z25decompress_symbolic_block16astc_decode_modePK21block_size_descriptoriiiPK25symbolic_compressed_blockP10imageblock(i32, %struct.block_size_descriptor* nocapture readonly, i32, i32, i32, %struct.symbolic_compressed_block*, %struct.imageblock*) local_unnamed_addr #0 {
  %8 = alloca [4 x %class.vtype4], align 16
  %9 = alloca [4 x %class.vtype4], align 16
  %10 = alloca [4 x i32], align 16
  %11 = alloca [4 x i32], align 16
  %12 = alloca [4 x i32], align 16
  %13 = alloca [64 x i32], align 16
  %14 = alloca [64 x i32], align 16
  %15 = alloca [216 x i32], align 16
  %16 = alloca [216 x i32], align 16
  %17 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 17
  store i32 %2, i32* %17, align 4
  %18 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 18
  store i32 %3, i32* %18, align 4
  %19 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 19
  store i32 %4, i32* %19, align 4
  %20 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %5, i64 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %64, label %23

23:                                               ; preds = %7
  %24 = icmp eq i32 %0, 0
  %25 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %1, i64 0, i32 3
  %26 = load i32, i32* %25, align 4
  %27 = icmp sgt i32 %26, 0
  br i1 %24, label %29, label %28

28:                                               ; preds = %23
  br i1 %27, label %43, label %56

29:                                               ; preds = %23
  br i1 %27, label %30, label %56

30:                                               ; preds = %29, %30
  %31 = phi i64 [ %39, %30 ], [ 0, %29 ]
  %32 = shl i64 %31, 2
  %33 = and i64 %32, 4294967292
  %34 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 0, i64 %33
  %35 = bitcast float* %34 to <4 x float>*
  store <4 x float> <float 1.000000e+00, float 0.000000e+00, float 1.000000e+00, float 1.000000e+00>, <4 x float>* %35, align 4
  %36 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 5, i64 %31
  store i8 0, i8* %36, align 1
  %37 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 6, i64 %31
  store i8 0, i8* %37, align 1
  %38 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 7, i64 %31
  store i8 0, i8* %38, align 1
  %39 = add nuw nsw i64 %31, 1
  %40 = load i32, i32* %25, align 4
  %41 = sext i32 %40 to i64
  %42 = icmp slt i64 %39, %41
  br i1 %42, label %30, label %56

43:                                               ; preds = %28, %43
  %44 = phi i64 [ %52, %43 ], [ 0, %28 ]
  %45 = shl i64 %44, 2
  %46 = and i64 %45, 4294967292
  %47 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 0, i64 %46
  %48 = bitcast float* %47 to <4 x float>*
  store <4 x float> zeroinitializer, <4 x float>* %48, align 4
  %49 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 5, i64 %44
  store i8 0, i8* %49, align 1
  %50 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 6, i64 %44
  store i8 0, i8* %50, align 1
  %51 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 7, i64 %44
  store i8 1, i8* %51, align 1
  %52 = add nuw nsw i64 %44, 1
  %53 = load i32, i32* %25, align 4
  %54 = sext i32 %53 to i64
  %55 = icmp slt i64 %52, %54
  br i1 %55, label %43, label %56

56:                                               ; preds = %43, %30, %28, %29
  %57 = phi i32 [ %26, %28 ], [ %26, %29 ], [ %40, %30 ], [ %53, %43 ]
  tail call void @_Z36imageblock_initialize_work_from_origP10imageblocki(%struct.imageblock* %6, i32 %57) #3
  %58 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %1, i64 0, i32 0
  %59 = load i32, i32* %58, align 8
  %60 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %1, i64 0, i32 1
  %61 = load i32, i32* %60, align 4
  %62 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %1, i64 0, i32 2
  %63 = load i32, i32* %62, align 8
  tail call void @_Z23update_imageblock_flagsP10imageblockiii(%struct.imageblock* %6, i32 %59, i32 %61, i32 %63) #3
  br label %402

64:                                               ; preds = %7
  %65 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %5, i64 0, i32 1
  %66 = load i32, i32* %65, align 4
  %67 = icmp slt i32 %66, 0
  br i1 %67, label %68, label %157

68:                                               ; preds = %64
  %69 = icmp eq i32 %66, -2
  br i1 %69, label %70, label %97

70:                                               ; preds = %68
  %71 = icmp eq i32 %0, 0
  %72 = select i1 %71, i32 65280, i32 65535
  %73 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %5, i64 0, i32 11, i64 0
  %74 = load i32, i32* %73, align 4
  %75 = and i32 %74, %72
  %76 = trunc i32 %75 to i16
  %77 = tail call zeroext i16 @_Z15unorm16_to_sf16t(i16 zeroext %76) #3
  %78 = tail call float @_Z13sf16_to_floatt(i16 zeroext %77) #3
  %79 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %5, i64 0, i32 11, i64 1
  %80 = load i32, i32* %79, align 4
  %81 = and i32 %80, %72
  %82 = trunc i32 %81 to i16
  %83 = tail call zeroext i16 @_Z15unorm16_to_sf16t(i16 zeroext %82) #3
  %84 = tail call float @_Z13sf16_to_floatt(i16 zeroext %83) #3
  %85 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %5, i64 0, i32 11, i64 2
  %86 = load i32, i32* %85, align 4
  %87 = and i32 %86, %72
  %88 = trunc i32 %87 to i16
  %89 = tail call zeroext i16 @_Z15unorm16_to_sf16t(i16 zeroext %88) #3
  %90 = tail call float @_Z13sf16_to_floatt(i16 zeroext %89) #3
  %91 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %5, i64 0, i32 11, i64 3
  %92 = load i32, i32* %91, align 4
  %93 = and i32 %92, %72
  %94 = trunc i32 %93 to i16
  %95 = tail call zeroext i16 @_Z15unorm16_to_sf16t(i16 zeroext %94) #3
  %96 = tail call float @_Z13sf16_to_floatt(i16 zeroext %95) #3
  br label %117

97:                                               ; preds = %68
  switch i32 %0, label %117 [
    i32 0, label %98
    i32 1, label %99
    i32 2, label %100
  ]

98:                                               ; preds = %97
  br label %117

99:                                               ; preds = %97
  br label %117

100:                                              ; preds = %97
  %101 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %5, i64 0, i32 11, i64 0
  %102 = load i32, i32* %101, align 4
  %103 = trunc i32 %102 to i16
  %104 = tail call float @_Z13sf16_to_floatt(i16 zeroext %103) #3
  %105 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %5, i64 0, i32 11, i64 1
  %106 = load i32, i32* %105, align 4
  %107 = trunc i32 %106 to i16
  %108 = tail call float @_Z13sf16_to_floatt(i16 zeroext %107) #3
  %109 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %5, i64 0, i32 11, i64 2
  %110 = load i32, i32* %109, align 4
  %111 = trunc i32 %110 to i16
  %112 = tail call float @_Z13sf16_to_floatt(i16 zeroext %111) #3
  %113 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %5, i64 0, i32 11, i64 3
  %114 = load i32, i32* %113, align 4
  %115 = trunc i32 %114 to i16
  %116 = tail call float @_Z13sf16_to_floatt(i16 zeroext %115) #3
  br label %117

117:                                              ; preds = %98, %99, %100, %97, %70
  %118 = phi float [ %84, %70 ], [ 0.000000e+00, %97 ], [ %108, %100 ], [ 0.000000e+00, %99 ], [ 0.000000e+00, %98 ]
  %119 = phi float [ %90, %70 ], [ 0.000000e+00, %97 ], [ %112, %100 ], [ 0.000000e+00, %99 ], [ 1.000000e+00, %98 ]
  %120 = phi float [ %96, %70 ], [ 0.000000e+00, %97 ], [ %116, %100 ], [ 0.000000e+00, %99 ], [ 1.000000e+00, %98 ]
  %121 = phi i8 [ 0, %70 ], [ 0, %97 ], [ 1, %100 ], [ 0, %99 ], [ 0, %98 ]
  %122 = phi i8 [ 0, %70 ], [ 0, %97 ], [ 0, %100 ], [ 1, %99 ], [ 0, %98 ]
  %123 = phi float [ %78, %70 ], [ 0.000000e+00, %97 ], [ %104, %100 ], [ 0.000000e+00, %99 ], [ 1.000000e+00, %98 ]
  %124 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %1, i64 0, i32 3
  %125 = load i32, i32* %124, align 4
  %126 = icmp sgt i32 %125, 0
  br i1 %126, label %127, label %149

127:                                              ; preds = %117, %127
  %128 = phi i64 [ %145, %127 ], [ 0, %117 ]
  %129 = trunc i64 %128 to i32
  %130 = shl nsw i32 %129, 2
  %131 = zext i32 %130 to i64
  %132 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 0, i64 %131
  store float %123, float* %132, align 4
  %133 = or i32 %130, 1
  %134 = zext i32 %133 to i64
  %135 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 0, i64 %134
  store float %118, float* %135, align 4
  %136 = or i32 %130, 2
  %137 = zext i32 %136 to i64
  %138 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 0, i64 %137
  store float %119, float* %138, align 4
  %139 = or i32 %130, 3
  %140 = zext i32 %139 to i64
  %141 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 0, i64 %140
  store float %120, float* %141, align 4
  %142 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 5, i64 %128
  store i8 %121, i8* %142, align 1
  %143 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 6, i64 %128
  store i8 %121, i8* %143, align 1
  %144 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 7, i64 %128
  store i8 %122, i8* %144, align 1
  %145 = add nuw nsw i64 %128, 1
  %146 = load i32, i32* %124, align 4
  %147 = sext i32 %146 to i64
  %148 = icmp slt i64 %145, %147
  br i1 %148, label %127, label %149

149:                                              ; preds = %127, %117
  %150 = phi i32 [ %125, %117 ], [ %146, %127 ]
  tail call void @_Z36imageblock_initialize_work_from_origP10imageblocki(%struct.imageblock* %6, i32 %150) #3
  %151 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %1, i64 0, i32 0
  %152 = load i32, i32* %151, align 8
  %153 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %1, i64 0, i32 1
  %154 = load i32, i32* %153, align 4
  %155 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %1, i64 0, i32 2
  %156 = load i32, i32* %155, align 8
  tail call void @_Z23update_imageblock_flagsP10imageblockiii(%struct.imageblock* %6, i32 %152, i32 %154, i32 %156) #3
  br label %402

157:                                              ; preds = %64
  %158 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %5, i64 0, i32 2
  %159 = load i32, i32* %158, align 4
  %160 = icmp eq i32 %159, 1
  %161 = shl i32 %159, 10
  %162 = add i32 %161, -2048
  %163 = select i1 %160, i32 3072, i32 %162
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %5, i64 0, i32 3
  %166 = load i32, i32* %165, align 4
  %167 = sext i32 %66 to i64
  %168 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %1, i64 0, i32 6, i64 %167, i32 0
  %169 = load i8, i8* %168, align 4
  %170 = sext i8 %169 to i64
  %171 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %1, i64 0, i32 5, i64 %170
  %172 = load %struct.decimation_table*, %struct.decimation_table** %171, align 8
  %173 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %1, i64 0, i32 6, i64 %167, i32 2
  %174 = load i8, i8* %173, align 2
  %175 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %1, i64 0, i32 6, i64 %167, i32 1
  %176 = load i8, i8* %175, align 1
  %177 = bitcast [4 x %class.vtype4]* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %177) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %177, i8 -86, i64 64, i1 false)
  %178 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %1, i64 0, i32 7, i64 %164
  %179 = sext i32 %166 to i64
  %180 = bitcast [4 x %class.vtype4]* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 64, i8* nonnull %180) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %180, i8 -86, i64 64, i1 false)
  %181 = bitcast [4 x i32]* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %181) #4
  %182 = bitcast [4 x i32]* %11 to i8*
  %183 = bitcast [4 x i32]* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %183, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %182) #4
  %184 = bitcast [4 x i32]* %12 to i8*
  %185 = bitcast [4 x i32]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %185, i8 -86, i64 16, i1 false)
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %184) #4
  %186 = icmp sgt i32 %159, 0
  %187 = bitcast [4 x i32]* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %187, i8 -86, i64 16, i1 false)
  br i1 %186, label %188, label %204

188:                                              ; preds = %157
  %189 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %5, i64 0, i32 7
  %190 = zext i32 %159 to i64
  br label %191

191:                                              ; preds = %191, %188
  %192 = phi i64 [ 0, %188 ], [ %202, %191 ]
  %193 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %5, i64 0, i32 4, i64 %192
  %194 = load i32, i32* %193, align 4
  %195 = load i32, i32* %189, align 4
  %196 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %5, i64 0, i32 6, i64 %192, i64 0
  %197 = getelementptr inbounds [4 x i32], [4 x i32]* %10, i64 0, i64 %192
  %198 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %192
  %199 = getelementptr inbounds [4 x i32], [4 x i32]* %12, i64 0, i64 %192
  %200 = getelementptr inbounds [4 x %class.vtype4], [4 x %class.vtype4]* %8, i64 0, i64 %192
  %201 = getelementptr inbounds [4 x %class.vtype4], [4 x %class.vtype4]* %9, i64 0, i64 %192
  call void @_Z22unpack_color_endpoints16astc_decode_modeiiPKiPiS2_S2_P6vtype4IjES5_(i32 %0, i32 %194, i32 %195, i32* %196, i32* %197, i32* %198, i32* %199, %class.vtype4* %200, %class.vtype4* %201) #3
  %202 = add nuw nsw i64 %192, 1
  %203 = icmp eq i64 %202, %190
  br i1 %203, label %204, label %191

204:                                              ; preds = %191, %157
  %205 = bitcast [64 x i32]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %205) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %205, i8 -86, i64 256, i1 false)
  %206 = bitcast [64 x i32]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 256, i8* nonnull %206) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %206, i8 -86, i64 256, i1 false)
  %207 = getelementptr inbounds %struct.decimation_table, %struct.decimation_table* %172, i64 0, i32 0
  %208 = load i32, i32* %207, align 4
  %209 = sext i8 %176 to i64
  %210 = icmp sgt i32 %208, 0
  br i1 %210, label %213, label %211

211:                                              ; preds = %204
  %212 = icmp ne i8 %174, 0
  br label %242

213:                                              ; preds = %204
  %214 = zext i32 %208 to i64
  br label %215

215:                                              ; preds = %215, %213
  %216 = phi i64 [ 0, %213 ], [ %224, %215 ]
  %217 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %5, i64 0, i32 8, i64 %216
  %218 = load i8, i8* %217, align 1
  %219 = zext i8 %218 to i64
  %220 = getelementptr inbounds [12 x %struct.quantization_and_transfer_table], [12 x %struct.quantization_and_transfer_table]* @quant_and_xfer_tables, i64 0, i64 %209, i32 0, i64 %219
  %221 = load i8, i8* %220, align 1
  %222 = zext i8 %221 to i32
  %223 = getelementptr inbounds [64 x i32], [64 x i32]* %13, i64 0, i64 %216
  store i32 %222, i32* %223, align 4
  %224 = add nuw nsw i64 %216, 1
  %225 = icmp eq i64 %224, %214
  br i1 %225, label %226, label %215

226:                                              ; preds = %215
  %227 = icmp ne i8 %174, 0
  %228 = and i1 %227, %210
  br i1 %228, label %229, label %242

229:                                              ; preds = %226
  %230 = zext i32 %208 to i64
  br label %231

231:                                              ; preds = %231, %229
  %232 = phi i64 [ 0, %229 ], [ %240, %231 ]
  %233 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %5, i64 0, i32 9, i64 %232
  %234 = load i8, i8* %233, align 1
  %235 = zext i8 %234 to i64
  %236 = getelementptr inbounds [12 x %struct.quantization_and_transfer_table], [12 x %struct.quantization_and_transfer_table]* @quant_and_xfer_tables, i64 0, i64 %209, i32 0, i64 %235
  %237 = load i8, i8* %236, align 1
  %238 = zext i8 %237 to i32
  %239 = getelementptr inbounds [64 x i32], [64 x i32]* %14, i64 0, i64 %232
  store i32 %238, i32* %239, align 4
  %240 = add nuw nsw i64 %232, 1
  %241 = icmp eq i64 %240, %230
  br i1 %241, label %242, label %231

242:                                              ; preds = %231, %211, %226
  %243 = phi i1 [ %212, %211 ], [ %227, %226 ], [ %227, %231 ]
  %244 = bitcast [216 x i32]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 864, i8* nonnull %244) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %244, i8 -86, i64 864, i1 false)
  %245 = bitcast [216 x i32]* %16 to i8*
  call void @llvm.lifetime.start.p0i8(i64 864, i8* nonnull %245) #4
  call void @llvm.memset.p0i8.i64(i8* nonnull align 16 %245, i8 -86, i64 864, i1 false)
  %246 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %1, i64 0, i32 3
  %247 = load i32, i32* %246, align 4
  %248 = icmp sgt i32 %247, 0
  br i1 %248, label %249, label %394

249:                                              ; preds = %242
  %250 = sext i32 %247 to i64
  br label %251

251:                                              ; preds = %249, %275
  %252 = phi i64 [ 0, %249 ], [ %278, %275 ]
  %253 = getelementptr inbounds %struct.decimation_table, %struct.decimation_table* %172, i64 0, i32 1, i64 %252
  %254 = load i8, i8* %253, align 1
  %255 = icmp eq i8 %254, 0
  br i1 %255, label %275, label %256

256:                                              ; preds = %251
  %257 = zext i8 %254 to i64
  br label %258

258:                                              ; preds = %258, %256
  %259 = phi i64 [ 0, %256 ], [ %271, %258 ]
  %260 = phi i32 [ 8, %256 ], [ %270, %258 ]
  %261 = getelementptr inbounds %struct.decimation_table, %struct.decimation_table* %172, i64 0, i32 3, i64 %252, i64 %259
  %262 = load i8, i8* %261, align 1
  %263 = zext i8 %262 to i64
  %264 = getelementptr inbounds [64 x i32], [64 x i32]* %13, i64 0, i64 %263
  %265 = load i32, i32* %264, align 4
  %266 = getelementptr inbounds %struct.decimation_table, %struct.decimation_table* %172, i64 0, i32 2, i64 %252, i64 %259
  %267 = load i8, i8* %266, align 1
  %268 = zext i8 %267 to i32
  %269 = mul nsw i32 %265, %268
  %270 = add nsw i32 %269, %260
  %271 = add nuw nsw i64 %259, 1
  %272 = icmp eq i64 %271, %257
  br i1 %272, label %273, label %258

273:                                              ; preds = %258
  %274 = ashr i32 %270, 4
  br label %275

275:                                              ; preds = %251, %273
  %276 = phi i32 [ 0, %251 ], [ %274, %273 ]
  %277 = getelementptr inbounds [216 x i32], [216 x i32]* %15, i64 0, i64 %252
  store i32 %276, i32* %277, align 4
  %278 = add nuw nsw i64 %252, 1
  %279 = icmp slt i64 %278, %250
  br i1 %279, label %251, label %280

280:                                              ; preds = %275
  %281 = and i1 %243, %248
  br i1 %281, label %282, label %313

282:                                              ; preds = %280
  %283 = zext i32 %247 to i64
  br label %284

284:                                              ; preds = %308, %282
  %285 = phi i64 [ 0, %282 ], [ %311, %308 ]
  %286 = getelementptr inbounds %struct.decimation_table, %struct.decimation_table* %172, i64 0, i32 1, i64 %285
  %287 = load i8, i8* %286, align 1
  %288 = icmp eq i8 %287, 0
  br i1 %288, label %308, label %289

289:                                              ; preds = %284
  %290 = zext i8 %287 to i64
  br label %291

291:                                              ; preds = %291, %289
  %292 = phi i64 [ 0, %289 ], [ %304, %291 ]
  %293 = phi i32 [ 8, %289 ], [ %303, %291 ]
  %294 = getelementptr inbounds %struct.decimation_table, %struct.decimation_table* %172, i64 0, i32 3, i64 %285, i64 %292
  %295 = load i8, i8* %294, align 1
  %296 = zext i8 %295 to i64
  %297 = getelementptr inbounds [64 x i32], [64 x i32]* %14, i64 0, i64 %296
  %298 = load i32, i32* %297, align 4
  %299 = getelementptr inbounds %struct.decimation_table, %struct.decimation_table* %172, i64 0, i32 2, i64 %285, i64 %292
  %300 = load i8, i8* %299, align 1
  %301 = zext i8 %300 to i32
  %302 = mul nsw i32 %298, %301
  %303 = add nsw i32 %302, %293
  %304 = add nuw nsw i64 %292, 1
  %305 = icmp eq i64 %304, %290
  br i1 %305, label %306, label %291

306:                                              ; preds = %291
  %307 = ashr i32 %303, 4
  br label %308

308:                                              ; preds = %284, %306
  %309 = phi i32 [ 0, %284 ], [ %307, %306 ]
  %310 = getelementptr inbounds [216 x i32], [216 x i32]* %16, i64 0, i64 %285
  store i32 %309, i32* %310, align 4
  %311 = add nuw nsw i64 %285, 1
  %312 = icmp eq i64 %311, %283
  br i1 %312, label %313, label %284

313:                                              ; preds = %308, %280
  br i1 %248, label %314, label %394

314:                                              ; preds = %313
  %315 = getelementptr inbounds %struct.symbolic_compressed_block, %struct.symbolic_compressed_block* %5, i64 0, i32 10
  %316 = load i32, i32* %315, align 4
  %317 = select i1 %243, i32 %316, i32 -1
  %318 = icmp eq i32 %0, 0
  br label %319

319:                                              ; preds = %314, %352
  %320 = phi i64 [ 0, %314 ], [ %390, %352 ]
  %321 = getelementptr inbounds %struct.partition_info, %struct.partition_info* %178, i64 %179, i32 1, i64 %320
  %322 = load i8, i8* %321, align 1
  %323 = zext i8 %322 to i64
  %324 = getelementptr inbounds [4 x %class.vtype4], [4 x %class.vtype4]* %8, i64 0, i64 %323, i32 0
  %325 = bitcast i32* %324 to <4 x i32>*
  %326 = load <4 x i32>, <4 x i32>* %325, align 16
  %327 = getelementptr inbounds [4 x %class.vtype4], [4 x %class.vtype4]* %9, i64 0, i64 %323, i32 0
  %328 = bitcast i32* %327 to <4 x i32>*
  %329 = load <4 x i32>, <4 x i32>* %328, align 16
  %330 = getelementptr inbounds [216 x i32], [216 x i32]* %15, i64 0, i64 %320
  %331 = load i32, i32* %330, align 4
  %332 = getelementptr inbounds [216 x i32], [216 x i32]* %16, i64 0, i64 %320
  %333 = load i32, i32* %332, align 4
  %334 = insertelement <4 x i32> undef, i32 %331, i32 0
  %335 = shufflevector <4 x i32> %334, <4 x i32> undef, <4 x i32> zeroinitializer
  switch i32 %317, label %352 [
    i32 0, label %336
    i32 1, label %340
    i32 2, label %344
    i32 3, label %348
  ]

336:                                              ; preds = %319
  %337 = insertelement <2 x i32> undef, i32 %333, i32 0
  %338 = insertelement <2 x i32> %337, i32 %331, i32 1
  %339 = shufflevector <2 x i32> %338, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 1, i32 1>
  br label %352

340:                                              ; preds = %319
  %341 = insertelement <2 x i32> undef, i32 %331, i32 0
  %342 = insertelement <2 x i32> %341, i32 %333, i32 1
  %343 = shufflevector <2 x i32> %342, <2 x i32> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 0>
  br label %352

344:                                              ; preds = %319
  %345 = insertelement <2 x i32> undef, i32 %331, i32 0
  %346 = insertelement <2 x i32> %345, i32 %333, i32 1
  %347 = shufflevector <2 x i32> %346, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 1, i32 0>
  br label %352

348:                                              ; preds = %319
  %349 = insertelement <2 x i32> undef, i32 %331, i32 0
  %350 = insertelement <2 x i32> %349, i32 %333, i32 1
  %351 = shufflevector <2 x i32> %350, <2 x i32> undef, <4 x i32> <i32 0, i32 0, i32 0, i32 1>
  br label %352

352:                                              ; preds = %348, %344, %340, %336, %319
  %353 = phi <4 x i32> [ %335, %319 ], [ %351, %348 ], [ %347, %344 ], [ %343, %340 ], [ %339, %336 ]
  %354 = sub nsw <4 x i32> <i32 64, i32 64, i32 64, i32 64>, %353
  %355 = ashr <4 x i32> %326, <i32 8, i32 8, i32 8, i32 8>
  %356 = ashr <4 x i32> %329, <i32 8, i32 8, i32 8, i32 8>
  %357 = select i1 %318, <4 x i32> %356, <4 x i32> %329
  %358 = select i1 %318, <4 x i32> %355, <4 x i32> %326
  %359 = mul nsw <4 x i32> %358, %354
  %360 = mul nsw <4 x i32> %357, %353
  %361 = add <4 x i32> %360, <i32 32, i32 32, i32 32, i32 32>
  %362 = add <4 x i32> %361, %359
  %363 = ashr <4 x i32> %362, <i32 6, i32 6, i32 6, i32 6>
  %364 = mul nsw <4 x i32> %363, <i32 257, i32 257, i32 257, i32 257>
  %365 = select i1 %318, <4 x i32> %364, <4 x i32> %363
  %366 = getelementptr inbounds [4 x i32], [4 x i32]* %10, i64 0, i64 %323
  %367 = load i32, i32* %366, align 4
  %368 = trunc i32 %367 to i8
  %369 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 5, i64 %320
  store i8 %368, i8* %369, align 1
  %370 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %323
  %371 = load i32, i32* %370, align 4
  %372 = trunc i32 %371 to i8
  %373 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 6, i64 %320
  store i8 %372, i8* %373, align 1
  %374 = getelementptr inbounds [4 x i32], [4 x i32]* %12, i64 0, i64 %323
  %375 = load i32, i32* %374, align 4
  %376 = trunc i32 %375 to i8
  %377 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 7, i64 %320
  store i8 %376, i8* %377, align 1
  %378 = extractelement <4 x i32> %365, i32 0
  %379 = uitofp i32 %378 to float
  %380 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 1, i64 %320
  store float %379, float* %380, align 4
  %381 = extractelement <4 x i32> %365, i32 1
  %382 = uitofp i32 %381 to float
  %383 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 2, i64 %320
  store float %382, float* %383, align 4
  %384 = extractelement <4 x i32> %365, i32 2
  %385 = uitofp i32 %384 to float
  %386 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 3, i64 %320
  store float %385, float* %386, align 4
  %387 = extractelement <4 x i32> %365, i32 3
  %388 = uitofp i32 %387 to float
  %389 = getelementptr inbounds %struct.imageblock, %struct.imageblock* %6, i64 0, i32 4, i64 %320
  store float %388, float* %389, align 4
  %390 = add nuw nsw i64 %320, 1
  %391 = load i32, i32* %246, align 4
  %392 = sext i32 %391 to i64
  %393 = icmp slt i64 %390, %392
  br i1 %393, label %319, label %394

394:                                              ; preds = %352, %242, %313
  %395 = phi i32 [ %247, %313 ], [ %247, %242 ], [ %391, %352 ]
  call void @_Z36imageblock_initialize_orig_from_workP10imageblocki(%struct.imageblock* %6, i32 %395) #3
  %396 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %1, i64 0, i32 0
  %397 = load i32, i32* %396, align 8
  %398 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %1, i64 0, i32 1
  %399 = load i32, i32* %398, align 4
  %400 = getelementptr inbounds %struct.block_size_descriptor, %struct.block_size_descriptor* %1, i64 0, i32 2
  %401 = load i32, i32* %400, align 8
  call void @_Z23update_imageblock_flagsP10imageblockiii(%struct.imageblock* %6, i32 %397, i32 %399, i32 %401) #3
  call void @llvm.lifetime.end.p0i8(i64 864, i8* nonnull %245) #4
  call void @llvm.lifetime.end.p0i8(i64 864, i8* nonnull %244) #4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %206) #4
  call void @llvm.lifetime.end.p0i8(i64 256, i8* nonnull %205) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %184) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %182) #4
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %181) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %180) #4
  call void @llvm.lifetime.end.p0i8(i64 64, i8* nonnull %177) #4
  br label %402

402:                                              ; preds = %394, %149, %56
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: optsize
declare void @_Z36imageblock_initialize_work_from_origP10imageblocki(%struct.imageblock*, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_Z23update_imageblock_flagsP10imageblockiii(%struct.imageblock*, i32, i32, i32) local_unnamed_addr #2

; Function Attrs: optsize
declare float @_Z13sf16_to_floatt(i16 zeroext) local_unnamed_addr #2

; Function Attrs: optsize
declare zeroext i16 @_Z15unorm16_to_sf16t(i16 zeroext) local_unnamed_addr #2

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: optsize
declare void @_Z22unpack_color_endpoints16astc_decode_modeiiPKiPiS2_S2_P6vtype4IjES5_(i32, i32, i32, i32*, i32*, i32*, i32*, %class.vtype4*, %class.vtype4*) local_unnamed_addr #2

; Function Attrs: optsize
declare void @_Z36imageblock_initialize_orig_from_workP10imageblocki(%struct.imageblock*, i32) local_unnamed_addr #2

attributes #0 = { nounwind optsize ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { optsize "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind optsize }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
