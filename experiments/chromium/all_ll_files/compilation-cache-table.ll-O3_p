; ModuleID = '../../v8/src/objects/compilation-cache-table.cc'
source_filename = "../../v8/src/objects/compilation-cache-table.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.v8::internal::SoleReadOnlyHeap" = type { %"class.v8::internal::ReadOnlyHeap", [587 x i64] }
%"class.v8::internal::ReadOnlyHeap" = type { i32 (...)**, i8, %"class.v8::internal::ReadOnlySpace"*, %"class.std::__1::vector.543" }
%"class.v8::internal::ReadOnlySpace" = type { %"class.v8::internal::BaseSpace", i8, %"class.v8::internal::AllocationStats", %"class.std::__1::vector.141", i64, i64, i8, i64, i64 }
%"class.v8::internal::BaseSpace" = type { i32 (...)**, %"class.v8::internal::Heap"*, i32, %"struct.std::__1::atomic.21", i64 }
%"class.v8::internal::Heap" = type { %"class.std::__1::unordered_map", %"struct.std::__1::atomic.21", %"class.v8::internal::Heap::ExternalMemoryAccounting", %"class.v8::internal::Isolate"*, i64, i64, i64, i64, %"struct.std::__1::atomic.21", i64, i64, i64, i64, i64, i8, i64, i64, %"struct.std::__1::atomic.21", i64, i64, %"struct.std::__1::atomic.21", %"struct.std::__1::atomic.31", %"class.std::__1::vector", i32, %"class.v8::internal::NewSpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::CodeSpace"*, %"class.v8::internal::MapSpace"*, %"class.v8::internal::OldLargeObjectSpace"*, %"class.v8::internal::CodeLargeObjectSpace"*, %"class.v8::internal::NewLargeObjectSpace"*, %"class.v8::internal::ReadOnlySpace"*, %"class.v8::internal::OldSpace"*, %"class.v8::internal::MapSpace"*, %"class.std::__1::unique_ptr.148", %"class.std::__1::unique_ptr.148", [8 x %"class.v8::internal::Space"*], %"class.v8::internal::LocalHeap"*, %"class.v8::internal::ArrayBufferExtension"*, %"class.v8::internal::ArrayBufferExtension"*, i8, i64, %"struct.std::__1::atomic.163", i32, i32, i32, i32, %"class.v8::internal::AllocationObserver"*, %"class.v8::internal::StressScavengeObserver"*, double, i32, i32, i32, i64, i32, [128 x i64], %"struct.std::__1::atomic.21", i64, i8, %"struct.std::__1::atomic.21", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.v8::internal::Object", %"class.std::__1::vector.167", %"class.std::__1::vector.167", i64 ()*, [113 x i32], i64, double, double, i64, i64, double, i32, i32, i32, i32, double, double, double, %"class.std::__1::unique_ptr.174", %"class.std::__1::unique_ptr.180", %"class.v8::internal::MinorMarkCompactCollector"*, %"class.std::__1::unique_ptr.310", %"class.std::__1::unique_ptr.316", %"class.std::__1::unique_ptr.322", %"class.std::__1::unique_ptr.361", %"class.std::__1::unique_ptr.400", %"class.std::__1::unique_ptr.430", %"class.std::__1::unique_ptr.436", %"class.std::__1::unique_ptr.446", %"class.std::__1::unique_ptr.452", %"class.std::__1::unique_ptr.452", %"class.std::__1::unique_ptr.458", %"class.std::__1::unique_ptr.464", %"class.std::__1::unique_ptr.464", %"class.std::__1::unique_ptr.470", %"class.std::__1::unique_ptr.476", %"class.std::__1::shared_ptr.482", %"class.v8::CppHeap"*, %"class.v8::EmbedderRootsHandler"*, %"class.v8::internal::StrongRootsEntry"*, %"class.v8::base::Mutex", i8, i64, i64, i64, i64, %"class.std::__1::unordered_map.505", %"class.std::__1::unique_ptr.531", [512 x i8], i8, i8, i64, i8, i32, i32, %"class.std::__1::unique_ptr.537", i8, %"class.v8::internal::Heap::ExternalStringTable", %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.550", i32, i8, i8, i8, i8, i8, %"class.v8::internal::HeapObject", %"class.v8::base::SharedMutex", %"class.v8::base::Mutex", %"class.std::__1::unordered_set.332", i8, [7 x i8], %"class.std::__1::unordered_map.556", %"class.std::__1::unordered_map.582", %"class.std::__1::unordered_map.556", %"class.std::__1::unordered_map.606", %"class.std::__1::vector.634", i8, %"class.std::__1::unique_ptr.641", i32, i32 }
%"class.std::__1::unordered_map" = type { %"class.std::__1::__hash_table" }
%"class.std::__1::__hash_table" = type <{ %"class.std::__1::unique_ptr.4", %"class.std::__1::__compressed_pair.11", %"class.std::__1::__compressed_pair.16", %"class.std::__1::__compressed_pair.18", [4 x i8] }>
%"class.std::__1::unique_ptr.4" = type { %"class.std::__1::__compressed_pair.5" }
%"class.std::__1::__compressed_pair.5" = type { %"struct.std::__1::__compressed_pair_elem.6", %"struct.std::__1::__compressed_pair_elem.7" }
%"struct.std::__1::__compressed_pair_elem.6" = type { %"struct.std::__1::__hash_node_base"** }
%"struct.std::__1::__hash_node_base" = type { %"struct.std::__1::__hash_node_base"* }
%"struct.std::__1::__compressed_pair_elem.7" = type { %"class.std::__1::__bucket_list_deallocator" }
%"class.std::__1::__bucket_list_deallocator" = type { %"class.std::__1::__compressed_pair.8" }
%"class.std::__1::__compressed_pair.8" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::__compressed_pair_elem.9" = type { i64 }
%"class.std::__1::__compressed_pair.11" = type { %"struct.std::__1::__compressed_pair_elem.12" }
%"struct.std::__1::__compressed_pair_elem.12" = type { %"struct.std::__1::__hash_node_base" }
%"class.std::__1::__compressed_pair.16" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.18" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::__compressed_pair_elem.19" = type { float }
%"class.v8::internal::Heap::ExternalMemoryAccounting" = type { %"struct.std::__1::atomic.26", %"struct.std::__1::atomic.26", %"struct.std::__1::atomic.26" }
%"struct.std::__1::atomic.26" = type { %"struct.std::__1::__atomic_base.27" }
%"struct.std::__1::__atomic_base.27" = type { %"struct.std::__1::__atomic_base.28" }
%"struct.std::__1::__atomic_base.28" = type { %"struct.std::__1::__cxx_atomic_impl.29" }
%"struct.std::__1::__cxx_atomic_impl.29" = type { %"struct.std::__1::__cxx_atomic_base_impl.30" }
%"struct.std::__1::__cxx_atomic_base_impl.30" = type { i64 }
%"class.v8::internal::Isolate" = type { %"class.v8::internal::IsolateData", %"class.std::__1::unique_ptr", %"class.v8::internal::Heap", %"class.v8::internal::ReadOnlyHeap"*, %"class.std::__1::shared_ptr.647", %"class.std::__1::unique_ptr.668", i32, %"class.v8::internal::Isolate::EntryStackItem"*, i32, %"class.v8::internal::StringStream"*, [13 x i64], %"class.v8::internal::Bootstrapper"*, %"class.v8::internal::RuntimeProfiler"*, %"class.v8::internal::CompilationCache"*, %"class.std::__1::shared_ptr.678", %"class.v8::base::RecursiveMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::base::SharedMutex", %"class.v8::internal::Logger"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::StubCache"*, %"class.v8::internal::Deoptimizer"*, i8, %"class.v8::internal::MaterializedObjectStore"*, i8, i32, i32, %"class.v8::internal::DescriptorLookupCache"*, %"struct.v8::internal::HandleScopeData", %"class.v8::internal::HandleScopeImplementer"*, %"class.v8::internal::UnicodeCache"*, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::InnerPointerToCodeCache"*, %"class.v8::internal::GlobalHandles"*, %"class.v8::internal::EternalHandles"*, %"class.v8::internal::ThreadManager"*, %"class.v8::bigint::Processor"*, %"class.v8::internal::RuntimeState", %"class.v8::internal::Builtins", %"class.v8::internal::SetupIsolateDelegate"*, %"class.v8::internal::RegExpStack"*, %"class.std::__1::vector.817", %"class.v8::internal::DateCache"*, %"class.v8::base::RandomNumberGenerator"*, %"class.v8::base::RandomNumberGenerator"*, %"struct.std::__1::atomic.830", {}*, i8*, void (i32, %"class.v8::Promise"*, %"class.v8::Value"*)*, {}*, {}*, %"struct.std::__1::atomic.840", {}*, %"class.v8::base::Mutex", double, %"class.std::__1::basic_string", %"class.std::__1::unordered_map.851", %"struct.std::__1::atomic.154", i8, i8, i8, i8, i8, i8, double, %"class.v8::internal::Debug"*, %"class.v8::internal::HeapProfiler"*, %"class.std::__1::unique_ptr.926", %"class.v8::internal::AstStringConstants"*, %"class.v8::internal::interpreter::Interpreter"*, %"class.v8::internal::compiler::PerIsolateCompilerCache"*, %"class.v8::internal::Zone"*, %"class.v8::internal::CompilerDispatcher"*, %"class.std::__1::queue", void (i8*, i8*)*, void (i8*, i1)*, void (i8*, i32)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*)*, { i8, %"class.v8::String"* } (%"class.v8::Context"*, %"class.v8::Value"*, i1)*, i1 (%"class.v8::Context"*, %"class.v8::String"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::FunctionCallbackInfo"*)*, i1 (%"class.v8::Context"*)*, void (%"class.v8::FunctionCallbackInfo"*)*, %"class.v8::String"* (%"class.v8::Isolate"*, i8*)*, i1 (%"class.v8::Context"*)*, i1 (%"class.v8::Context"*)*, %"class.v8::internal::Relocatable"*, %"class.std::__1::vector.969"*, %"class.v8::internal::Object", i64*, %"class.v8::internal::AddressToIndexHashMap"*, %"class.v8::internal::HeapObjectToIndexHashMap"*, %"class.v8::internal::MicrotaskQueue"*, %"class.v8::internal::CompilationStatistics"*, %"class.v8::internal::CodeTracer"*, i32, void (%"class.v8::PromiseRejectMessage"*)*, %"class.v8::StartupData"*, i32, i32, i32, i64, i8, i8, i32, i8, i32, %"class.v8_inspector::V8Inspector"*, i8, i8, i8, i32, i32, %"class.v8::internal::compiler::NodeObserver"*, i8, [128 x i32], [256 x i32], [251 x i32], [251 x i32], %"class.v8::internal::OptimizingCompileDispatcher"*, %"class.std::__1::unique_ptr.977", i32, i8, i8, i32, i32, %"class.std::__1::vector.983", %"class.std::__1::vector.983", void (%"class.v8::Isolate"*, i32)*, %"class.std::__1::shared_ptr.990", i64, %"class.std::__1::unordered_map.991", i64, %"struct.v8::metrics::LongTaskStats", %"class.std::__1::vector.543", %"class.v8::internal::BuiltinsConstantsTableBuilder"*, i8*, i32, i8*, i32, %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::shared_ptr.162", %"class.v8::internal::FutexWaitListNode", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::debug::ConsoleDelegate"*, %"class.v8::debug::AsyncEventDelegate"*, i32, i32, %"class.std::__1::unique_ptr.1047", i1 (%"class.v8::Isolate"*)*, i8, %"class.v8::base::Mutex", %"struct.v8::internal::ManagedPtrDestructor"*, i64, i64, %"class.v8::internal::wasm::WasmEngine"*, %"class.std::__1::unique_ptr.1085", %"class.v8::internal::EmbeddedFileWriterInterface"*, %"class.v8::Context::BackupIncumbentScope"*, {}*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate::ThreadDataTable", i8, %"class.v8::internal::Isolate"*, %"class.v8::base::Mutex", %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate"*, %"struct.std::__1::atomic.1119", %"class.std::__1::vector.1123", %"class.std::__1::vector.1123", void (i32, %"class.std::__1::basic_string"*)* }
%"class.v8::internal::IsolateData" = type { [4 x i8*], i64, i64, i64, i64, i64, %"class.v8::internal::StackGuard", %"class.v8::internal::RootsTable", %"class.v8::internal::ExternalReferenceTable", %"class.v8::internal::ThreadLocalTop", [1711 x i64], [1711 x i64], i8, [15 x i8] }
%"class.v8::internal::StackGuard" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::StackGuard::ThreadLocal" }
%"class.v8::internal::StackGuard::ThreadLocal" = type { i64, i64, i64, i64, %"class.v8::internal::InterruptsScope"*, i64 }
%"class.v8::internal::InterruptsScope" = type { i32 (...)**, %"class.v8::internal::StackGuard"*, i64, i64, i32, %"class.v8::internal::InterruptsScope"* }
%"class.v8::internal::RootsTable" = type { [669 x i64] }
%"class.v8::internal::ExternalReferenceTable" = type { [1042 x i64], i32, i32 }
%"class.v8::internal::ThreadLocalTop" = type { %"class.v8::TryCatch"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Context", %"struct.std::__1::atomic", %"class.v8::internal::Object", %"class.v8::internal::Context", i64, i64, i64, i64, i64, %"class.v8::internal::Object", i8, i8, %"class.v8::internal::Object", i64, i64, i64, %"class.v8::internal::PromiseOnStack"*, %"class.v8::internal::Simulator"*, i64, %"class.v8::internal::ExternalCallbackScope"*, i32, void (%"class.v8::Object"*, i32, %"class.v8::Value"*)*, i64 }
%"class.v8::TryCatch" = type <{ %"class.v8::internal::Isolate"*, %"class.v8::TryCatch"*, i8*, i8*, i8*, i8, [7 x i8] }>
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { %"class.v8::internal::ThreadId" }
%"class.v8::internal::ThreadId" = type { i32 }
%"class.v8::internal::Context" = type { %"class.v8::internal::TorqueGeneratedContext" }
%"class.v8::internal::TorqueGeneratedContext" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::PromiseOnStack" = type { %"class.v8::internal::Handle.1", %"class.v8::internal::PromiseOnStack"* }
%"class.v8::internal::Handle.1" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HandleBase" = type { i64* }
%"class.v8::internal::Simulator" = type opaque
%"class.v8::internal::ExternalCallbackScope" = type opaque
%"class.v8::Object" = type { i8 }
%"class.v8::Value" = type { i8 }
%"class.std::__1::unique_ptr" = type { %"class.std::__1::__compressed_pair" }
%"class.std::__1::__compressed_pair" = type { %"struct.std::__1::__compressed_pair_elem" }
%"struct.std::__1::__compressed_pair_elem" = type { %"class.v8::internal::IsolateAllocator"* }
%"class.v8::internal::IsolateAllocator" = type { i8*, %"class.v8::PageAllocator"* }
%"class.v8::PageAllocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.647" = type { %"class.v8::internal::ReadOnlyArtifacts"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::ReadOnlyArtifacts" = type { i32 (...)**, %"class.std::__1::vector.141", %"class.v8::internal::AllocationStats", %"class.std::__1::unique_ptr.648", %"class.std::__1::unique_ptr.662" }
%"class.std::__1::unique_ptr.648" = type { %"class.std::__1::__compressed_pair.649" }
%"class.std::__1::__compressed_pair.649" = type { %"struct.std::__1::__compressed_pair_elem.650" }
%"struct.std::__1::__compressed_pair_elem.650" = type { %"class.v8::internal::SharedReadOnlySpace"* }
%"class.v8::internal::SharedReadOnlySpace" = type { %"class.v8::internal::ReadOnlySpace", %"class.std::__1::vector.651" }
%"class.std::__1::vector.651" = type { %"class.std::__1::__vector_base.652" }
%"class.std::__1::__vector_base.652" = type { %"class.std::__1::unique_ptr.653"*, %"class.std::__1::unique_ptr.653"*, %"class.std::__1::__compressed_pair.654" }
%"class.std::__1::unique_ptr.653" = type { %"class.std::__1::__compressed_pair.1140" }
%"class.std::__1::__compressed_pair.1140" = type { %"struct.std::__1::__compressed_pair_elem.1141" }
%"struct.std::__1::__compressed_pair_elem.1141" = type { %"class.v8::PageAllocator::SharedMemoryMapping"* }
%"class.v8::PageAllocator::SharedMemoryMapping" = type { i32 (...)** }
%"class.std::__1::__compressed_pair.654" = type { %"struct.std::__1::__compressed_pair_elem.655" }
%"struct.std::__1::__compressed_pair_elem.655" = type { %"class.std::__1::unique_ptr.653"* }
%"class.std::__1::unique_ptr.662" = type { %"class.std::__1::__compressed_pair.663" }
%"class.std::__1::__compressed_pair.663" = type { %"struct.std::__1::__compressed_pair_elem.664" }
%"struct.std::__1::__compressed_pair_elem.664" = type { %"class.v8::internal::ReadOnlyHeap"* }
%"class.std::__1::__shared_weak_count" = type { %"class.std::__1::__shared_count", i64 }
%"class.std::__1::__shared_count" = type { i32 (...)**, i64 }
%"class.std::__1::unique_ptr.668" = type { %"class.std::__1::__compressed_pair.669" }
%"class.std::__1::__compressed_pair.669" = type { %"struct.std::__1::__compressed_pair_elem.670" }
%"struct.std::__1::__compressed_pair_elem.670" = type { %"class.v8::internal::StringTable"* }
%"class.v8::internal::StringTable" = type { %"struct.std::__1::atomic.671", %"class.v8::base::Mutex" }
%"struct.std::__1::atomic.671" = type { %"struct.std::__1::__atomic_base.672" }
%"struct.std::__1::__atomic_base.672" = type { %"struct.std::__1::__cxx_atomic_impl.673" }
%"struct.std::__1::__cxx_atomic_impl.673" = type { %"struct.std::__1::__cxx_atomic_base_impl.674" }
%"struct.std::__1::__cxx_atomic_base_impl.674" = type { %"class.v8::internal::StringTable::Data"* }
%"class.v8::internal::StringTable::Data" = type opaque
%"class.v8::internal::Isolate::EntryStackItem" = type { i32, %"class.v8::internal::Isolate::PerIsolateThreadData"*, %"class.v8::internal::Isolate"*, %"class.v8::internal::Isolate::EntryStackItem"* }
%"class.v8::internal::Isolate::PerIsolateThreadData" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::ThreadId", i64, %"class.v8::internal::ThreadState"* }
%"class.v8::internal::ThreadState" = type opaque
%"class.v8::internal::StringStream" = type opaque
%"class.v8::internal::Bootstrapper" = type { %"class.v8::internal::Isolate"*, i32, %"class.v8::internal::SourceCodeCache" }
%"class.v8::internal::SourceCodeCache" = type { i32, %"class.v8::internal::FixedArray" }
%"class.v8::internal::FixedArray" = type { %"class.v8::internal::TorqueGeneratedFixedArray" }
%"class.v8::internal::TorqueGeneratedFixedArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::FixedArrayBase" = type { %"class.v8::internal::TorqueGeneratedFixedArrayBase" }
%"class.v8::internal::TorqueGeneratedFixedArrayBase" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::RuntimeProfiler" = type opaque
%"class.v8::internal::CompilationCache" = type opaque
%"class.std::__1::shared_ptr.678" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::Counters" = type { %"class.std::__1::enable_shared_from_this", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::HistogramTimer", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::TimedHistogram", %"class.v8::internal::AggregatableHistogramTimer", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::Histogram", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounterThreadSafe", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::StatsCounter", %"class.v8::internal::RuntimeCallStats", %"class.v8::internal::WorkerThreadRuntimeCallStats", %"class.v8::internal::Isolate"*, %"class.v8::internal::StatsTable" }
%"class.std::__1::enable_shared_from_this" = type { %"class.std::__1::weak_ptr" }
%"class.std::__1::weak_ptr" = type { %"class.v8::internal::Counters"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::HistogramTimer" = type { %"class.v8::internal::TimedHistogram.base", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::TimedHistogram.base" = type <{ %"class.v8::internal::Histogram", i32 }>
%"class.v8::base::ElapsedTimer" = type { %"class.v8::base::TimeTicks" }
%"class.v8::base::TimeTicks" = type { %"class.v8::base::time_internal::TimeBase" }
%"class.v8::base::time_internal::TimeBase" = type { i64 }
%"class.v8::internal::TimedHistogram" = type <{ %"class.v8::internal::Histogram", i32, [4 x i8] }>
%"class.v8::internal::AggregatableHistogramTimer" = type { %"class.v8::internal::Histogram", %"class.v8::base::TimeDelta" }
%"class.v8::base::TimeDelta" = type { i64 }
%"class.v8::internal::Histogram" = type { i8*, i32, i32, i32, i8*, %"class.v8::internal::Counters"* }
%"class.v8::internal::StatsCounterThreadSafe" = type { %"class.v8::internal::StatsCounterBase", %"class.v8::base::Mutex" }
%"class.v8::internal::StatsCounterBase" = type { %"class.v8::internal::Counters"*, i8*, i32* }
%"class.v8::internal::StatsCounter" = type <{ %"class.v8::internal::StatsCounterBase", i8, [7 x i8] }>
%"class.v8::internal::RuntimeCallStats" = type { %"class.v8::base::AtomicValue", %"class.v8::base::AtomicValue.679", i8, i32, %"class.v8::internal::ThreadId", [1370 x %"class.v8::internal::RuntimeCallCounter"] }
%"class.v8::base::AtomicValue" = type { i64 }
%"class.v8::base::AtomicValue.679" = type { i64 }
%"class.v8::internal::RuntimeCallCounter" = type { i8*, i64, i64 }
%"class.v8::internal::WorkerThreadRuntimeCallStats" = type <{ %"class.v8::base::Mutex", %"class.std::__1::vector.680", %"class.v8::base::Optional", %"class.v8::internal::ThreadId", [4 x i8] }>
%"class.std::__1::vector.680" = type { %"class.std::__1::__vector_base.681" }
%"class.std::__1::__vector_base.681" = type { %"class.std::__1::unique_ptr.682"*, %"class.std::__1::unique_ptr.682"*, %"class.std::__1::__compressed_pair.683" }
%"class.std::__1::unique_ptr.682" = type opaque
%"class.std::__1::__compressed_pair.683" = type { %"struct.std::__1::__compressed_pair_elem.684" }
%"struct.std::__1::__compressed_pair_elem.684" = type { %"class.std::__1::unique_ptr.682"* }
%"class.v8::base::Optional" = type { %"class.v8::base::internal::OptionalBase" }
%"class.v8::base::internal::OptionalBase" = type { %"struct.v8::base::internal::OptionalStorage" }
%"struct.v8::base::internal::OptionalStorage" = type { %"struct.v8::base::internal::OptionalStorageBase" }
%"struct.v8::base::internal::OptionalStorageBase" = type { i8, %union.anon }
%union.anon = type { i32 }
%"class.v8::internal::StatsTable" = type { i32* (i8*)*, i8* (i8*, i32, i32, i64)*, void (i8*, i32)* }
%"class.v8::base::RecursiveMutex" = type { %union.pthread_mutex_t }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.v8::internal::Logger" = type { %"class.v8::internal::CodeEventListener", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.688", %"class.std::__1::unique_ptr.694", %"struct.std::__1::atomic.154", %"class.std::__1::unique_ptr.700", %"class.std::__1::unique_ptr.706", %"class.std::__1::unique_ptr.712", %"class.std::__1::unique_ptr.718", %"class.std::__1::unique_ptr.724", %"class.std::__1::set.730", i32, i8, %"class.v8::internal::ExistingCodeLogger", %"class.v8::base::ElapsedTimer" }
%"class.v8::internal::CodeEventListener" = type { i32 (...)** }
%"class.std::__1::unique_ptr.688" = type { %"class.std::__1::__compressed_pair.689" }
%"class.std::__1::__compressed_pair.689" = type { %"struct.std::__1::__compressed_pair_elem.690" }
%"struct.std::__1::__compressed_pair_elem.690" = type { %"class.v8::internal::Ticker"* }
%"class.v8::internal::Ticker" = type opaque
%"class.std::__1::unique_ptr.694" = type { %"class.std::__1::__compressed_pair.695" }
%"class.std::__1::__compressed_pair.695" = type { %"struct.std::__1::__compressed_pair_elem.696" }
%"struct.std::__1::__compressed_pair_elem.696" = type { %"class.v8::internal::Profiler"* }
%"class.v8::internal::Profiler" = type opaque
%"class.std::__1::unique_ptr.700" = type { %"class.std::__1::__compressed_pair.701" }
%"class.std::__1::__compressed_pair.701" = type { %"struct.std::__1::__compressed_pair_elem.702" }
%"struct.std::__1::__compressed_pair_elem.702" = type { %"class.v8::internal::Log"* }
%"class.v8::internal::Log" = type opaque
%"class.std::__1::unique_ptr.706" = type { %"class.std::__1::__compressed_pair.707" }
%"class.std::__1::__compressed_pair.707" = type { %"struct.std::__1::__compressed_pair_elem.708" }
%"struct.std::__1::__compressed_pair_elem.708" = type { %"class.v8::internal::PerfBasicLogger"* }
%"class.v8::internal::PerfBasicLogger" = type opaque
%"class.std::__1::unique_ptr.712" = type { %"class.std::__1::__compressed_pair.713" }
%"class.std::__1::__compressed_pair.713" = type { %"struct.std::__1::__compressed_pair_elem.714" }
%"struct.std::__1::__compressed_pair_elem.714" = type { %"class.v8::internal::PerfJitLogger"* }
%"class.v8::internal::PerfJitLogger" = type opaque
%"class.std::__1::unique_ptr.718" = type { %"class.std::__1::__compressed_pair.719" }
%"class.std::__1::__compressed_pair.719" = type { %"struct.std::__1::__compressed_pair_elem.720" }
%"struct.std::__1::__compressed_pair_elem.720" = type { %"class.v8::internal::LowLevelLogger"* }
%"class.v8::internal::LowLevelLogger" = type opaque
%"class.std::__1::unique_ptr.724" = type { %"class.std::__1::__compressed_pair.725" }
%"class.std::__1::__compressed_pair.725" = type { %"struct.std::__1::__compressed_pair_elem.726" }
%"struct.std::__1::__compressed_pair_elem.726" = type { %"class.v8::internal::JitLogger"* }
%"class.v8::internal::JitLogger" = type opaque
%"class.std::__1::set.730" = type { %"class.std::__1::__tree.731" }
%"class.std::__1::__tree.731" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.732", %"class.std::__1::__compressed_pair.736" }
%"class.std::__1::__tree_end_node" = type { %"class.std::__1::__tree_node_base"* }
%"class.std::__1::__tree_node_base" = type <{ %"class.std::__1::__tree_end_node", %"class.std::__1::__tree_node_base"*, %"class.std::__1::__tree_end_node"*, i8, [7 x i8] }>
%"class.std::__1::__compressed_pair.732" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"struct.std::__1::__compressed_pair_elem.82" = type { %"class.std::__1::__tree_end_node" }
%"class.std::__1::__compressed_pair.736" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.v8::internal::ExistingCodeLogger" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::CodeEventListener"* }
%"class.v8::internal::StubCache" = type { [2048 x %"struct.v8::internal::StubCache::Entry"], [512 x %"struct.v8::internal::StubCache::Entry"], %"class.v8::internal::Isolate"* }
%"struct.v8::internal::StubCache::Entry" = type { %"class.v8::internal::StrongTaggedValue", %"class.v8::internal::TaggedValue", %"class.v8::internal::StrongTaggedValue" }
%"class.v8::internal::TaggedValue" = type { %"class.v8::internal::TaggedImpl.739" }
%"class.v8::internal::TaggedImpl.739" = type { i32 }
%"class.v8::internal::StrongTaggedValue" = type { %"class.v8::internal::TaggedImpl.738" }
%"class.v8::internal::TaggedImpl.738" = type { i32 }
%"class.v8::internal::Deoptimizer" = type opaque
%"class.v8::internal::MaterializedObjectStore" = type opaque
%"class.v8::internal::DescriptorLookupCache" = type { [64 x %"struct.v8::internal::DescriptorLookupCache::Key"], [64 x i32] }
%"struct.v8::internal::DescriptorLookupCache::Key" = type { %"class.v8::internal::Map", %"class.v8::internal::Name" }
%"class.v8::internal::Map" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Name" = type { %"class.v8::internal::TorqueGeneratedName" }
%"class.v8::internal::TorqueGeneratedName" = type { %"class.v8::internal::PrimitiveHeapObject" }
%"class.v8::internal::PrimitiveHeapObject" = type { %"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" }
%"class.v8::internal::TorqueGeneratedPrimitiveHeapObject" = type { %"class.v8::internal::HeapObject" }
%"struct.v8::internal::HandleScopeData" = type { i64*, i64*, i32, i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::CanonicalHandleScope" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::OptimizedCompilationInfo"*, %"class.v8::internal::Zone"*, %"class.v8::internal::RootIndexMap"*, %"class.std::__1::unique_ptr.746", i32, %"class.v8::internal::CanonicalHandleScope"* }
%"class.v8::internal::OptimizedCompilationInfo" = type opaque
%"class.v8::internal::RootIndexMap" = type opaque
%"class.std::__1::unique_ptr.746" = type { %"class.std::__1::__compressed_pair.747" }
%"class.std::__1::__compressed_pair.747" = type { %"struct.std::__1::__compressed_pair_elem.748" }
%"struct.std::__1::__compressed_pair_elem.748" = type { %"class.v8::internal::IdentityMap"* }
%"class.v8::internal::IdentityMap" = type opaque
%"class.v8::internal::HandleScopeImplementer" = type { %"class.v8::internal::Isolate"*, %"class.v8::internal::DetachableVector", %"class.v8::internal::DetachableVector.752", %"class.v8::internal::DetachableVector.753", %"class.v8::internal::DetachableVector.752", i64*, i64*, %"struct.v8::internal::HandleScopeData" }
%"class.v8::internal::DetachableVector" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVectorBase" = type { i8*, i64, i64 }
%"class.v8::internal::DetachableVector.753" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::DetachableVector.752" = type { %"class.v8::internal::DetachableVectorBase" }
%"class.v8::internal::UnicodeCache" = type opaque
%"class.v8::internal::AccountingAllocator" = type { i32 (...)**, %"struct.std::__1::atomic.21", %"struct.std::__1::atomic.21", %"class.std::__1::unique_ptr.740", %"class.std::__1::unique_ptr.483" }
%"class.std::__1::unique_ptr.740" = type { %"class.std::__1::__compressed_pair.741" }
%"class.std::__1::__compressed_pair.741" = type { %"struct.std::__1::__compressed_pair_elem.742" }
%"struct.std::__1::__compressed_pair_elem.742" = type { %"class.v8::internal::VirtualMemory"* }
%"class.v8::internal::VirtualMemory" = type { %"class.v8::PageAllocator"*, %"class.v8::base::AddressRegion" }
%"class.v8::base::AddressRegion" = type { i64, i64 }
%"class.std::__1::unique_ptr.483" = type { %"class.std::__1::__compressed_pair.484" }
%"class.std::__1::__compressed_pair.484" = type { %"struct.std::__1::__compressed_pair_elem.485" }
%"struct.std::__1::__compressed_pair_elem.485" = type { %"class.v8::base::BoundedPageAllocator"* }
%"class.v8::base::BoundedPageAllocator" = type { %"class.v8::PageAllocator", %"class.v8::base::Mutex", i64, i64, %"class.v8::PageAllocator"*, %"class.v8::base::RegionAllocator" }
%"class.v8::base::RegionAllocator" = type { %"class.v8::base::RegionAllocator::Region", i64, i64, i64, i64, %"class.std::__1::set.486", %"class.std::__1::set.494" }
%"class.v8::base::RegionAllocator::Region" = type <{ %"class.v8::base::AddressRegion", i32, [4 x i8] }>
%"class.std::__1::set.486" = type { %"class.std::__1::__tree.487" }
%"class.std::__1::__tree.487" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.488", %"class.std::__1::__compressed_pair.492" }
%"class.std::__1::__compressed_pair.488" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::__compressed_pair.492" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::set.494" = type { %"class.std::__1::__tree.495" }
%"class.std::__1::__tree.495" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.488", %"class.std::__1::__compressed_pair.496" }
%"class.std::__1::__compressed_pair.496" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.v8::internal::InnerPointerToCodeCache" = type opaque
%"class.v8::internal::GlobalHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.754", %"class.std::__1::vector.760", %"class.std::__1::unique_ptr.767", %"class.std::__1::vector.774", %"class.std::__1::unique_ptr.781", i64, %"class.std::__1::vector.787", %"class.std::__1::vector.795", %"class.std::__1::vector.803", i8, i8, i32 }
%"class.std::__1::unique_ptr.754" = type { %"class.std::__1::__compressed_pair.755" }
%"class.std::__1::__compressed_pair.755" = type { %"struct.std::__1::__compressed_pair_elem.756" }
%"struct.std::__1::__compressed_pair_elem.756" = type { %"class.v8::internal::GlobalHandles::NodeSpace"* }
%"class.v8::internal::GlobalHandles::NodeSpace" = type opaque
%"class.std::__1::vector.760" = type { %"class.std::__1::__vector_base.761" }
%"class.std::__1::__vector_base.761" = type { %"class.v8::internal::GlobalHandles::Node"**, %"class.v8::internal::GlobalHandles::Node"**, %"class.std::__1::__compressed_pair.762" }
%"class.v8::internal::GlobalHandles::Node" = type opaque
%"class.std::__1::__compressed_pair.762" = type { %"struct.std::__1::__compressed_pair_elem.763" }
%"struct.std::__1::__compressed_pair_elem.763" = type { %"class.v8::internal::GlobalHandles::Node"** }
%"class.std::__1::unique_ptr.767" = type { %"class.std::__1::__compressed_pair.768" }
%"class.std::__1::__compressed_pair.768" = type { %"struct.std::__1::__compressed_pair_elem.769" }
%"struct.std::__1::__compressed_pair_elem.769" = type { %"class.v8::internal::GlobalHandles::NodeSpace.770"* }
%"class.v8::internal::GlobalHandles::NodeSpace.770" = type opaque
%"class.std::__1::vector.774" = type { %"class.std::__1::__vector_base.775" }
%"class.std::__1::__vector_base.775" = type { %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.v8::internal::GlobalHandles::TracedNode"**, %"class.std::__1::__compressed_pair.776" }
%"class.v8::internal::GlobalHandles::TracedNode" = type opaque
%"class.std::__1::__compressed_pair.776" = type { %"struct.std::__1::__compressed_pair_elem.777" }
%"struct.std::__1::__compressed_pair_elem.777" = type { %"class.v8::internal::GlobalHandles::TracedNode"** }
%"class.std::__1::unique_ptr.781" = type { %"class.std::__1::__compressed_pair.782" }
%"class.std::__1::__compressed_pair.782" = type { %"struct.std::__1::__compressed_pair_elem.783" }
%"struct.std::__1::__compressed_pair_elem.783" = type { %"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace"* }
%"class.v8::internal::GlobalHandles::OnStackTracedNodeSpace" = type opaque
%"class.std::__1::vector.787" = type { %"class.std::__1::__vector_base.788" }
%"class.std::__1::__vector_base.788" = type { %"struct.std::__1::pair.789"*, %"struct.std::__1::pair.789"*, %"class.std::__1::__compressed_pair.790" }
%"struct.std::__1::pair.789" = type opaque
%"class.std::__1::__compressed_pair.790" = type { %"struct.std::__1::__compressed_pair_elem.791" }
%"struct.std::__1::__compressed_pair_elem.791" = type { %"struct.std::__1::pair.789"* }
%"class.std::__1::vector.795" = type { %"class.std::__1::__vector_base.796" }
%"class.std::__1::__vector_base.796" = type { %"struct.std::__1::pair.797"*, %"struct.std::__1::pair.797"*, %"class.std::__1::__compressed_pair.798" }
%"struct.std::__1::pair.797" = type opaque
%"class.std::__1::__compressed_pair.798" = type { %"struct.std::__1::__compressed_pair_elem.799" }
%"struct.std::__1::__compressed_pair_elem.799" = type { %"struct.std::__1::pair.797"* }
%"class.std::__1::vector.803" = type { %"class.std::__1::__vector_base.804" }
%"class.std::__1::__vector_base.804" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.v8::internal::GlobalHandles::PendingPhantomCallback"*, %"class.std::__1::__compressed_pair.805" }
%"class.v8::internal::GlobalHandles::PendingPhantomCallback" = type { void (%"class.v8::WeakCallbackInfo"*)*, i8*, [2 x i8*] }
%"class.v8::WeakCallbackInfo" = type { %"class.v8::Isolate"*, i8*, {}**, [2 x i8*] }
%"class.v8::Isolate" = type { i8 }
%"class.std::__1::__compressed_pair.805" = type { %"struct.std::__1::__compressed_pair_elem.806" }
%"struct.std::__1::__compressed_pair_elem.806" = type { %"class.v8::internal::GlobalHandles::PendingPhantomCallback"* }
%"class.v8::internal::EternalHandles" = type { i32, %"class.std::__1::vector.810", %"class.std::__1::vector.817" }
%"class.std::__1::vector.810" = type { %"class.std::__1::__vector_base.811" }
%"class.std::__1::__vector_base.811" = type { i64**, i64**, %"class.std::__1::__compressed_pair.812" }
%"class.std::__1::__compressed_pair.812" = type { %"struct.std::__1::__compressed_pair_elem.813" }
%"struct.std::__1::__compressed_pair_elem.813" = type { i64** }
%"class.v8::internal::ThreadManager" = type opaque
%"class.v8::bigint::Processor" = type opaque
%"class.v8::internal::RuntimeState" = type { %"class.std::__1::unique_ptr.824" }
%"class.std::__1::unique_ptr.824" = type { %"class.std::__1::__compressed_pair.825" }
%"class.std::__1::__compressed_pair.825" = type { %"struct.std::__1::__compressed_pair_elem.826" }
%"struct.std::__1::__compressed_pair_elem.826" = type { %"struct.v8::internal::Runtime::Function"* }
%"struct.v8::internal::Runtime::Function" = type { i32, i32, i8*, i64, i8, i8 }
%"class.v8::internal::Builtins" = type { %"class.v8::internal::Isolate"*, i8, i32 }
%"class.v8::internal::SetupIsolateDelegate" = type opaque
%"class.v8::internal::RegExpStack" = type opaque
%"class.std::__1::vector.817" = type { %"class.std::__1::__vector_base.818" }
%"class.std::__1::__vector_base.818" = type { i32*, i32*, %"class.std::__1::__compressed_pair.819" }
%"class.std::__1::__compressed_pair.819" = type { %"struct.std::__1::__compressed_pair_elem.820" }
%"struct.std::__1::__compressed_pair_elem.820" = type { i32* }
%"class.v8::internal::DateCache" = type opaque
%"class.v8::base::RandomNumberGenerator" = type { i64, i64, i64 }
%"struct.std::__1::atomic.830" = type { %"struct.std::__1::__atomic_base.831" }
%"struct.std::__1::__atomic_base.831" = type { %"struct.std::__1::__cxx_atomic_impl.832" }
%"struct.std::__1::__cxx_atomic_impl.832" = type { %"struct.std::__1::__cxx_atomic_base_impl.833" }
%"struct.std::__1::__cxx_atomic_base_impl.833" = type { i32 }
%"class.v8::Promise" = type { i8 }
%"struct.std::__1::atomic.840" = type { %"struct.std::__1::__atomic_base.841" }
%"struct.std::__1::__atomic_base.841" = type { %"struct.std::__1::__cxx_atomic_impl.842" }
%"struct.std::__1::__cxx_atomic_impl.842" = type { %"struct.std::__1::__cxx_atomic_base_impl.843" }
%"struct.std::__1::__cxx_atomic_base_impl.843" = type { i32 }
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.845" }
%"class.std::__1::__compressed_pair.845" = type { %"struct.std::__1::__compressed_pair_elem.846" }
%"struct.std::__1::__compressed_pair_elem.846" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon.847 }
%union.anon.847 = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::unordered_map.851" = type { %"class.std::__1::__hash_table.852" }
%"class.std::__1::__hash_table.852" = type <{ %"class.std::__1::unique_ptr.853", %"class.std::__1::__compressed_pair.863", %"class.std::__1::__compressed_pair.868", %"class.std::__1::__compressed_pair.871", [4 x i8] }>
%"class.std::__1::unique_ptr.853" = type { %"class.std::__1::__compressed_pair.854" }
%"class.std::__1::__compressed_pair.854" = type { %"struct.std::__1::__compressed_pair_elem.855", %"struct.std::__1::__compressed_pair_elem.857" }
%"struct.std::__1::__compressed_pair_elem.855" = type { %"struct.std::__1::__hash_node_base.856"** }
%"struct.std::__1::__hash_node_base.856" = type { %"struct.std::__1::__hash_node_base.856"* }
%"struct.std::__1::__compressed_pair_elem.857" = type { %"class.std::__1::__bucket_list_deallocator.858" }
%"class.std::__1::__bucket_list_deallocator.858" = type { %"class.std::__1::__compressed_pair.859" }
%"class.std::__1::__compressed_pair.859" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.863" = type { %"struct.std::__1::__compressed_pair_elem.864" }
%"struct.std::__1::__compressed_pair_elem.864" = type { %"struct.std::__1::__hash_node_base.856" }
%"class.std::__1::__compressed_pair.868" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.871" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::atomic.154" = type { %"struct.std::__1::__atomic_base.155" }
%"struct.std::__1::__atomic_base.155" = type { %"struct.std::__1::__cxx_atomic_impl.156" }
%"struct.std::__1::__cxx_atomic_impl.156" = type { %"struct.std::__1::__cxx_atomic_base_impl.157" }
%"struct.std::__1::__cxx_atomic_base_impl.157" = type { i8 }
%"class.v8::internal::Debug" = type { %"class.v8::debug::DebugDelegate"*, i8, i8, i8, i8, i8, i8, i8, i8, i8, %"class.v8::internal::DebugInfoListNode"*, %"class.std::__1::unique_ptr.877", %"class.v8::internal::Handle.883", %"class.v8::internal::DebugFeatureTracker", %"class.v8::internal::Debug::ThreadLocal", %"class.v8::internal::Handle.884", %"class.v8::internal::Isolate"* }
%"class.v8::debug::DebugDelegate" = type { i32 (...)** }
%"class.v8::internal::DebugInfoListNode" = type { i64*, %"class.v8::internal::DebugInfoListNode"* }
%"class.std::__1::unique_ptr.877" = type { %"class.std::__1::__compressed_pair.878" }
%"class.std::__1::__compressed_pair.878" = type { %"struct.std::__1::__compressed_pair_elem.879" }
%"struct.std::__1::__compressed_pair_elem.879" = type { %"class.v8::internal::Debug::TemporaryObjectsTracker"* }
%"class.v8::internal::Debug::TemporaryObjectsTracker" = type opaque
%"class.v8::internal::Handle.883" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::DebugFeatureTracker" = type <{ %"class.v8::internal::Isolate"*, i32, [4 x i8] }>
%"class.v8::internal::Debug::ThreadLocal" = type <{ i64, i32, i8, [3 x i8], %"class.v8::internal::Object", i8, [3 x i8], i32, i32, i32, %"class.v8::internal::Object", %"class.v8::internal::Object", i32, i8, [3 x i8] }>
%"class.v8::internal::Handle.884" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::HeapProfiler" = type { %"class.v8::internal::HeapObjectAllocationTracker", %"class.std::__1::unique_ptr.885", %"class.std::__1::vector.891", %"class.std::__1::unique_ptr.899", %"class.std::__1::unique_ptr.905", i8, i8, %"class.v8::base::Mutex", %"class.std::__1::unique_ptr.911", %"class.std::__1::vector.917", %"struct.std::__1::pair.925" }
%"class.v8::internal::HeapObjectAllocationTracker" = type { i32 (...)** }
%"class.std::__1::unique_ptr.885" = type { %"class.std::__1::__compressed_pair.886" }
%"class.std::__1::__compressed_pair.886" = type { %"struct.std::__1::__compressed_pair_elem.887" }
%"struct.std::__1::__compressed_pair_elem.887" = type { %"class.v8::internal::HeapObjectsMap"* }
%"class.v8::internal::HeapObjectsMap" = type opaque
%"class.std::__1::vector.891" = type { %"class.std::__1::__vector_base.892" }
%"class.std::__1::__vector_base.892" = type { %"class.std::__1::unique_ptr.893"*, %"class.std::__1::unique_ptr.893"*, %"class.std::__1::__compressed_pair.894" }
%"class.std::__1::unique_ptr.893" = type opaque
%"class.std::__1::__compressed_pair.894" = type { %"struct.std::__1::__compressed_pair_elem.895" }
%"struct.std::__1::__compressed_pair_elem.895" = type { %"class.std::__1::unique_ptr.893"* }
%"class.std::__1::unique_ptr.899" = type { %"class.std::__1::__compressed_pair.900" }
%"class.std::__1::__compressed_pair.900" = type { %"struct.std::__1::__compressed_pair_elem.901" }
%"struct.std::__1::__compressed_pair_elem.901" = type { %"class.v8::internal::StringsStorage"* }
%"class.v8::internal::StringsStorage" = type opaque
%"class.std::__1::unique_ptr.905" = type { %"class.std::__1::__compressed_pair.906" }
%"class.std::__1::__compressed_pair.906" = type { %"struct.std::__1::__compressed_pair_elem.907" }
%"struct.std::__1::__compressed_pair_elem.907" = type { %"class.v8::internal::AllocationTracker"* }
%"class.v8::internal::AllocationTracker" = type opaque
%"class.std::__1::unique_ptr.911" = type { %"class.std::__1::__compressed_pair.912" }
%"class.std::__1::__compressed_pair.912" = type { %"struct.std::__1::__compressed_pair_elem.913" }
%"struct.std::__1::__compressed_pair_elem.913" = type { %"class.v8::internal::SamplingHeapProfiler"* }
%"class.v8::internal::SamplingHeapProfiler" = type opaque
%"class.std::__1::vector.917" = type { %"class.std::__1::__vector_base.918" }
%"class.std::__1::__vector_base.918" = type { %"struct.std::__1::pair.919"*, %"struct.std::__1::pair.919"*, %"class.std::__1::__compressed_pair.920" }
%"struct.std::__1::pair.919" = type opaque
%"class.std::__1::__compressed_pair.920" = type { %"struct.std::__1::__compressed_pair_elem.921" }
%"struct.std::__1::__compressed_pair_elem.921" = type { %"struct.std::__1::pair.919"* }
%"struct.std::__1::pair.925" = type { i8 (%"class.v8::Isolate"*, %"class.v8::Local.2"*, i16, i8*)*, i8* }
%"class.v8::Local.2" = type { %"class.v8::Value"* }
%"class.std::__1::unique_ptr.926" = type { %"class.std::__1::__compressed_pair.927" }
%"class.std::__1::__compressed_pair.927" = type { %"struct.std::__1::__compressed_pair_elem.928" }
%"struct.std::__1::__compressed_pair_elem.928" = type { %"class.v8::internal::CodeEventDispatcher"* }
%"class.v8::internal::CodeEventDispatcher" = type { %"class.v8::internal::CodeEventListener", %"class.std::__1::unordered_set.929", %"class.v8::base::Mutex" }
%"class.std::__1::unordered_set.929" = type { %"class.std::__1::__hash_table.930" }
%"class.std::__1::__hash_table.930" = type <{ %"class.std::__1::unique_ptr.931", %"class.std::__1::__compressed_pair.941", %"class.std::__1::__compressed_pair.946", %"class.std::__1::__compressed_pair.950", [4 x i8] }>
%"class.std::__1::unique_ptr.931" = type { %"class.std::__1::__compressed_pair.932" }
%"class.std::__1::__compressed_pair.932" = type { %"struct.std::__1::__compressed_pair_elem.933", %"struct.std::__1::__compressed_pair_elem.935" }
%"struct.std::__1::__compressed_pair_elem.933" = type { %"struct.std::__1::__hash_node_base.934"** }
%"struct.std::__1::__hash_node_base.934" = type { %"struct.std::__1::__hash_node_base.934"* }
%"struct.std::__1::__compressed_pair_elem.935" = type { %"class.std::__1::__bucket_list_deallocator.936" }
%"class.std::__1::__bucket_list_deallocator.936" = type { %"class.std::__1::__compressed_pair.937" }
%"class.std::__1::__compressed_pair.937" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.941" = type { %"struct.std::__1::__compressed_pair_elem.942" }
%"struct.std::__1::__compressed_pair_elem.942" = type { %"struct.std::__1::__hash_node_base.934" }
%"class.std::__1::__compressed_pair.946" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.950" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.v8::internal::AstStringConstants" = type opaque
%"class.v8::internal::interpreter::Interpreter" = type opaque
%"class.v8::internal::compiler::PerIsolateCompilerCache" = type opaque
%"class.v8::internal::Zone" = type <{ i64, i64, i64, i64, %"class.v8::internal::AccountingAllocator"*, %"class.v8::internal::Segment"*, i8*, i8, i8, [6 x i8] }>
%"class.v8::internal::Segment" = type { %"class.v8::internal::Zone"*, %"class.v8::internal::Segment"*, i64 }
%"class.v8::internal::CompilerDispatcher" = type opaque
%"class.std::__1::queue" = type { %"class.std::__1::deque" }
%"class.std::__1::deque" = type { %"class.std::__1::__deque_base" }
%"class.std::__1::__deque_base" = type { %"struct.std::__1::__split_buffer", i64, %"class.std::__1::__compressed_pair.964" }
%"struct.std::__1::__split_buffer" = type { %"struct.std::__1::pair.958"**, %"struct.std::__1::pair.958"**, %"struct.std::__1::pair.958"**, %"class.std::__1::__compressed_pair.959" }
%"struct.std::__1::pair.958" = type opaque
%"class.std::__1::__compressed_pair.959" = type { %"struct.std::__1::__compressed_pair_elem.960" }
%"struct.std::__1::__compressed_pair_elem.960" = type { %"struct.std::__1::pair.958"** }
%"class.std::__1::__compressed_pair.964" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.v8::String" = type { i8 }
%"class.v8::Context" = type { i8 }
%"class.v8::FunctionCallbackInfo" = type <{ i64*, i64*, i32, [4 x i8] }>
%"class.v8::internal::Relocatable" = type { i32 (...)**, %"class.v8::internal::Isolate"*, %"class.v8::internal::Relocatable"* }
%"class.std::__1::vector.969" = type { %"class.std::__1::__vector_base.970" }
%"class.std::__1::__vector_base.970" = type { %"class.v8::internal::Handle.971"*, %"class.v8::internal::Handle.971"*, %"class.std::__1::__compressed_pair.972" }
%"class.v8::internal::Handle.971" = type { %"class.v8::internal::HandleBase" }
%"class.std::__1::__compressed_pair.972" = type { %"struct.std::__1::__compressed_pair_elem.973" }
%"struct.std::__1::__compressed_pair_elem.973" = type { %"class.v8::internal::Handle.971"* }
%"class.v8::internal::AddressToIndexHashMap" = type opaque
%"class.v8::internal::HeapObjectToIndexHashMap" = type opaque
%"class.v8::internal::MicrotaskQueue" = type opaque
%"class.v8::internal::CompilationStatistics" = type opaque
%"class.v8::internal::CodeTracer" = type <{ %"class.v8::internal::EmbeddedVector", %struct._IO_FILE*, i32, [4 x i8] }>
%"class.v8::internal::EmbeddedVector" = type { %"class.v8::internal::Vector", [128 x i8] }
%"class.v8::internal::Vector" = type { i8*, i64 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%"class.v8::PromiseRejectMessage" = type { %"class.v8::Local.835", i32, %"class.v8::Local.2" }
%"class.v8::Local.835" = type { %"class.v8::Promise"* }
%"class.v8::StartupData" = type { i8*, i32 }
%"class.v8_inspector::V8Inspector" = type opaque
%"class.v8::internal::compiler::NodeObserver" = type opaque
%"class.v8::internal::OptimizingCompileDispatcher" = type opaque
%"class.std::__1::unique_ptr.977" = type { %"class.std::__1::__compressed_pair.978" }
%"class.std::__1::__compressed_pair.978" = type { %"struct.std::__1::__compressed_pair_elem.979" }
%"struct.std::__1::__compressed_pair_elem.979" = type { %"class.v8::internal::PersistentHandlesList"* }
%"class.v8::internal::PersistentHandlesList" = type { %"class.v8::base::Mutex", %"class.v8::internal::PersistentHandles"* }
%"class.v8::internal::PersistentHandles" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::vector.810", i64*, i64*, %"class.v8::internal::PersistentHandles"*, %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.983" = type { %"class.std::__1::__vector_base.984" }
%"class.std::__1::__vector_base.984" = type { void (%"class.v8::Isolate"*)**, void (%"class.v8::Isolate"*)**, %"class.std::__1::__compressed_pair.985" }
%"class.std::__1::__compressed_pair.985" = type { %"struct.std::__1::__compressed_pair_elem.986" }
%"struct.std::__1::__compressed_pair_elem.986" = type { void (%"class.v8::Isolate"*)** }
%"class.std::__1::shared_ptr.990" = type { %"class.v8::internal::metrics::Recorder"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::metrics::Recorder" = type opaque
%"class.std::__1::unordered_map.991" = type { %"class.std::__1::__hash_table.992" }
%"class.std::__1::__hash_table.992" = type <{ %"class.std::__1::unique_ptr.993", %"class.std::__1::__compressed_pair.1003", %"class.std::__1::__compressed_pair.1008", %"class.std::__1::__compressed_pair.1011", [4 x i8] }>
%"class.std::__1::unique_ptr.993" = type { %"class.std::__1::__compressed_pair.994" }
%"class.std::__1::__compressed_pair.994" = type { %"struct.std::__1::__compressed_pair_elem.995", %"struct.std::__1::__compressed_pair_elem.997" }
%"struct.std::__1::__compressed_pair_elem.995" = type { %"struct.std::__1::__hash_node_base.996"** }
%"struct.std::__1::__hash_node_base.996" = type { %"struct.std::__1::__hash_node_base.996"* }
%"struct.std::__1::__compressed_pair_elem.997" = type { %"class.std::__1::__bucket_list_deallocator.998" }
%"class.std::__1::__bucket_list_deallocator.998" = type { %"class.std::__1::__compressed_pair.999" }
%"class.std::__1::__compressed_pair.999" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1003" = type { %"struct.std::__1::__compressed_pair_elem.1004" }
%"struct.std::__1::__compressed_pair_elem.1004" = type { %"struct.std::__1::__hash_node_base.996" }
%"class.std::__1::__compressed_pair.1008" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1011" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.v8::metrics::LongTaskStats" = type { i64, i64, i64 }
%"class.v8::internal::BuiltinsConstantsTableBuilder" = type opaque
%"class.v8::ArrayBuffer::Allocator" = type { i32 (...)** }
%"class.std::__1::shared_ptr.162" = type { %"class.v8::ArrayBuffer::Allocator"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::FutexWaitListNode" = type { %"class.v8::internal::Isolate"*, %"class.std::__1::shared_ptr.1015", %"class.v8::internal::CancelableTaskManager"*, %"class.v8::base::ConditionVariable", %"class.v8::internal::FutexWaitListNode"*, %"class.v8::internal::FutexWaitListNode"*, %"class.std::__1::weak_ptr.1044", i64, i8*, i8, i8, %"class.v8::Global", %"class.v8::Global.1045", %"class.v8::base::TimeTicks", i64 }
%"class.std::__1::shared_ptr.1015" = type { %"class.v8::TaskRunner"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::TaskRunner" = type { i32 (...)** }
%"class.v8::base::ConditionVariable" = type { %union.pthread_cond_t }
%union.pthread_cond_t = type { %struct.__pthread_cond_s }
%struct.__pthread_cond_s = type { %union.anon.1040, %union.anon.1042, [2 x i32], [2 x i32], i32, i32, [2 x i32] }
%union.anon.1040 = type { i64 }
%union.anon.1042 = type { i64 }
%"class.std::__1::weak_ptr.1044" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::BackingStore" = type <{ i8*, %"struct.std::__1::atomic.21", i64, %"union.v8::internal::BackingStore::TypeSpecificData", i16, [6 x i8] }>
%"union.v8::internal::BackingStore::TypeSpecificData" = type { %"class.std::__1::shared_ptr.162" }
%"class.v8::Global" = type { %"class.v8::PersistentBase" }
%"class.v8::PersistentBase" = type { %"class.v8::Promise"* }
%"class.v8::Global.1045" = type { %"class.v8::PersistentBase.1046" }
%"class.v8::PersistentBase.1046" = type { %"class.v8::Context"* }
%"class.v8::internal::CancelableTaskManager" = type <{ i64, %"class.std::__1::unordered_map.1016", %"class.v8::base::ConditionVariable", %"class.v8::base::Mutex", i8, [7 x i8] }>
%"class.std::__1::unordered_map.1016" = type { %"class.std::__1::__hash_table.1017" }
%"class.std::__1::__hash_table.1017" = type <{ %"class.std::__1::unique_ptr.1018", %"class.std::__1::__compressed_pair.1028", %"class.std::__1::__compressed_pair.1033", %"class.std::__1::__compressed_pair.1036", [4 x i8] }>
%"class.std::__1::unique_ptr.1018" = type { %"class.std::__1::__compressed_pair.1019" }
%"class.std::__1::__compressed_pair.1019" = type { %"struct.std::__1::__compressed_pair_elem.1020", %"struct.std::__1::__compressed_pair_elem.1022" }
%"struct.std::__1::__compressed_pair_elem.1020" = type { %"struct.std::__1::__hash_node_base.1021"** }
%"struct.std::__1::__hash_node_base.1021" = type { %"struct.std::__1::__hash_node_base.1021"* }
%"struct.std::__1::__compressed_pair_elem.1022" = type { %"class.std::__1::__bucket_list_deallocator.1023" }
%"class.std::__1::__bucket_list_deallocator.1023" = type { %"class.std::__1::__compressed_pair.1024" }
%"class.std::__1::__compressed_pair.1024" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1028" = type { %"struct.std::__1::__compressed_pair_elem.1029" }
%"struct.std::__1::__compressed_pair_elem.1029" = type { %"struct.std::__1::__hash_node_base.1021" }
%"class.std::__1::__compressed_pair.1033" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1036" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.v8::debug::ConsoleDelegate" = type { i32 (...)** }
%"class.v8::debug::AsyncEventDelegate" = type { i32 (...)** }
%"class.std::__1::unique_ptr.1047" = type { %"class.std::__1::__compressed_pair.1048" }
%"class.std::__1::__compressed_pair.1048" = type { %"struct.std::__1::__compressed_pair_elem.1049" }
%"struct.std::__1::__compressed_pair_elem.1049" = type { %"class.v8::internal::LocalIsolate"* }
%"class.v8::internal::LocalIsolate" = type { %"class.v8::internal::HiddenLocalFactory", %"class.v8::internal::LocalHeap", %"class.v8::internal::Isolate"*, %"class.std::__1::unique_ptr.1076", %"class.v8::internal::ThreadId", i64, %"class.v8::internal::RuntimeCallStats"* }
%"class.v8::internal::HiddenLocalFactory" = type { %"class.v8::internal::LocalFactory" }
%"class.v8::internal::LocalFactory" = type { %"class.v8::internal::ReadOnlyRoots" }
%"class.v8::internal::ReadOnlyRoots" = type { i64* }
%"class.v8::internal::LocalHeap" = type { %"class.v8::internal::Heap"*, i8, %"struct.std::__1::atomic.1052", i8, i8, %"class.v8::internal::LocalHeap"*, %"class.v8::internal::LocalHeap"*, %"class.std::__1::unique_ptr.1056", %"class.std::__1::unique_ptr.1062", %"class.std::__1::unique_ptr.476", %"class.std::__1::vector.1068", %"class.v8::internal::ConcurrentAllocator" }
%"struct.std::__1::atomic.1052" = type { %"struct.std::__1::__atomic_base.1053" }
%"struct.std::__1::__atomic_base.1053" = type { %"struct.std::__1::__cxx_atomic_impl.1054" }
%"struct.std::__1::__cxx_atomic_impl.1054" = type { %"struct.std::__1::__cxx_atomic_base_impl.1055" }
%"struct.std::__1::__cxx_atomic_base_impl.1055" = type { i32 }
%"class.std::__1::unique_ptr.1056" = type { %"class.std::__1::__compressed_pair.1057" }
%"class.std::__1::__compressed_pair.1057" = type { %"struct.std::__1::__compressed_pair_elem.1058" }
%"struct.std::__1::__compressed_pair_elem.1058" = type { %"class.v8::internal::LocalHandles"* }
%"class.v8::internal::LocalHandles" = type { %"struct.v8::internal::HandleScopeData", %"class.std::__1::vector.810" }
%"class.std::__1::unique_ptr.1062" = type { %"class.std::__1::__compressed_pair.1063" }
%"class.std::__1::__compressed_pair.1063" = type { %"struct.std::__1::__compressed_pair_elem.1064" }
%"struct.std::__1::__compressed_pair_elem.1064" = type { %"class.v8::internal::PersistentHandles"* }
%"class.std::__1::vector.1068" = type { %"class.std::__1::__vector_base.1069" }
%"class.std::__1::__vector_base.1069" = type { %"struct.std::__1::pair.1070"*, %"struct.std::__1::pair.1070"*, %"class.std::__1::__compressed_pair.1071" }
%"struct.std::__1::pair.1070" = type opaque
%"class.std::__1::__compressed_pair.1071" = type { %"struct.std::__1::__compressed_pair_elem.1072" }
%"struct.std::__1::__compressed_pair_elem.1072" = type { %"struct.std::__1::pair.1070"* }
%"class.v8::internal::ConcurrentAllocator" = type { %"class.v8::internal::LocalHeap"*, %"class.v8::internal::PagedSpace"*, %"class.v8::internal::LocalAllocationBuffer" }
%"class.v8::internal::PagedSpace" = type { %"class.v8::internal::SpaceWithLinearArea", i32, i32, i64, %"class.v8::internal::AllocationStats", %"class.v8::base::Mutex", i64, i64 }
%"class.v8::internal::SpaceWithLinearArea" = type { %"class.v8::internal::Space", %"class.v8::internal::LinearAllocationArea", [3 x i64] }
%"class.v8::internal::Space" = type { %"class.v8::internal::BaseSpace", %"class.v8::internal::AllocationCounter", %"class.v8::internal::heap::List", %"struct.std::__1::atomic.21"*, %"class.std::__1::unique_ptr.99" }
%"class.v8::internal::AllocationCounter" = type <{ %"class.std::__1::vector.40", %"class.std::__1::vector.40", %"class.std::__1::unordered_set", i8, [7 x i8], i64, i64, i8, [7 x i8] }>
%"class.std::__1::vector.40" = type { %"class.std::__1::__vector_base.41" }
%"class.std::__1::__vector_base.41" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"*, %"class.std::__1::__compressed_pair.42" }
%"struct.v8::internal::AllocationCounter::AllocationObserverCounter" = type { %"class.v8::internal::AllocationObserver"*, i64, i64 }
%"class.std::__1::__compressed_pair.42" = type { %"struct.std::__1::__compressed_pair_elem.43" }
%"struct.std::__1::__compressed_pair_elem.43" = type { %"struct.v8::internal::AllocationCounter::AllocationObserverCounter"* }
%"class.std::__1::unordered_set" = type { %"class.std::__1::__hash_table.47" }
%"class.std::__1::__hash_table.47" = type <{ %"class.std::__1::unique_ptr.48", %"class.std::__1::__compressed_pair.58", %"class.std::__1::__compressed_pair.63", %"class.std::__1::__compressed_pair.65", [4 x i8] }>
%"class.std::__1::unique_ptr.48" = type { %"class.std::__1::__compressed_pair.49" }
%"class.std::__1::__compressed_pair.49" = type { %"struct.std::__1::__compressed_pair_elem.50", %"struct.std::__1::__compressed_pair_elem.52" }
%"struct.std::__1::__compressed_pair_elem.50" = type { %"struct.std::__1::__hash_node_base.51"** }
%"struct.std::__1::__hash_node_base.51" = type { %"struct.std::__1::__hash_node_base.51"* }
%"struct.std::__1::__compressed_pair_elem.52" = type { %"class.std::__1::__bucket_list_deallocator.53" }
%"class.std::__1::__bucket_list_deallocator.53" = type { %"class.std::__1::__compressed_pair.54" }
%"class.std::__1::__compressed_pair.54" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.58" = type { %"struct.std::__1::__compressed_pair_elem.59" }
%"struct.std::__1::__compressed_pair_elem.59" = type { %"struct.std::__1::__hash_node_base.51" }
%"class.std::__1::__compressed_pair.63" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.65" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.v8::internal::heap::List" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::MemoryChunk" = type { %"class.v8::internal::BasicMemoryChunk", [2 x %"class.v8::internal::SlotSet"*], %"struct.std::__1::atomic.21", %"struct.std::__1::atomic.26", %"class.v8::internal::SlotSet"*, [2 x %"class.v8::internal::TypedSlotSet"*], [2 x %"class.std::__1::set"*], %"class.v8::base::Mutex"*, %"struct.std::__1::atomic.88", %"class.v8::base::Mutex"*, i64, [2 x %"struct.std::__1::atomic.21"], %"class.v8::internal::heap::ListNode", %"class.v8::internal::FreeListCategory"**, %"struct.std::__1::atomic.26", %"class.v8::internal::Bitmap"*, %"class.v8::internal::CodeObjectRegistry"*, %"class.v8::internal::PossiblyEmptyBuckets" }
%"class.v8::internal::BasicMemoryChunk" = type { i64, i64, %"class.v8::internal::Heap"*, i64, i64, i64, i64, %"struct.std::__1::atomic.26", %"struct.std::__1::atomic.70", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.70" = type { %"struct.std::__1::__atomic_base.71" }
%"struct.std::__1::__atomic_base.71" = type { %"struct.std::__1::__cxx_atomic_impl.72" }
%"struct.std::__1::__cxx_atomic_impl.72" = type { %"struct.std::__1::__cxx_atomic_base_impl.73" }
%"struct.std::__1::__cxx_atomic_base_impl.73" = type { %"class.v8::internal::BaseSpace"* }
%"class.v8::internal::SlotSet" = type { i8 }
%"class.v8::internal::TypedSlotSet" = type { %"class.v8::internal::TypedSlots", i64 }
%"class.v8::internal::TypedSlots" = type { i32 (...)**, %"struct.v8::internal::TypedSlots::Chunk"*, %"struct.v8::internal::TypedSlots::Chunk"* }
%"struct.v8::internal::TypedSlots::Chunk" = type { %"struct.v8::internal::TypedSlots::Chunk"*, %"class.std::__1::vector.74" }
%"class.std::__1::vector.74" = type { %"class.std::__1::__vector_base.75" }
%"class.std::__1::__vector_base.75" = type { %"struct.v8::internal::TypedSlots::TypedSlot"*, %"struct.v8::internal::TypedSlots::TypedSlot"*, %"class.std::__1::__compressed_pair.76" }
%"struct.v8::internal::TypedSlots::TypedSlot" = type { i32 }
%"class.std::__1::__compressed_pair.76" = type { %"struct.std::__1::__compressed_pair_elem.77" }
%"struct.std::__1::__compressed_pair_elem.77" = type { %"struct.v8::internal::TypedSlots::TypedSlot"* }
%"class.std::__1::set" = type { %"class.std::__1::__tree" }
%"class.std::__1::__tree" = type { %"class.std::__1::__tree_end_node"*, %"class.std::__1::__compressed_pair.81", %"class.std::__1::__compressed_pair.86" }
%"class.std::__1::__compressed_pair.81" = type { %"struct.std::__1::__compressed_pair_elem.82" }
%"class.std::__1::__compressed_pair.86" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"struct.std::__1::atomic.88" = type { %"struct.std::__1::__atomic_base.89" }
%"struct.std::__1::__atomic_base.89" = type { %"struct.std::__1::__cxx_atomic_impl.90" }
%"struct.std::__1::__cxx_atomic_impl.90" = type { %"struct.std::__1::__cxx_atomic_base_impl.91" }
%"struct.std::__1::__cxx_atomic_base_impl.91" = type { i64 }
%"class.v8::internal::heap::ListNode" = type { %"class.v8::internal::MemoryChunk"*, %"class.v8::internal::MemoryChunk"* }
%"class.v8::internal::FreeListCategory" = type { i32, i32, %"class.v8::internal::FreeSpace", %"class.v8::internal::FreeListCategory"*, %"class.v8::internal::FreeListCategory"* }
%"class.v8::internal::FreeSpace" = type { %"class.v8::internal::TorqueGeneratedFreeSpace" }
%"class.v8::internal::TorqueGeneratedFreeSpace" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::Bitmap" = type { i8 }
%"class.v8::internal::CodeObjectRegistry" = type <{ %"class.std::__1::vector.92", i8, [7 x i8] }>
%"class.std::__1::vector.92" = type { %"class.std::__1::__vector_base.93" }
%"class.std::__1::__vector_base.93" = type { i64*, i64*, %"class.std::__1::__compressed_pair.94" }
%"class.std::__1::__compressed_pair.94" = type { %"struct.std::__1::__compressed_pair_elem.95" }
%"struct.std::__1::__compressed_pair_elem.95" = type { i64* }
%"class.v8::internal::PossiblyEmptyBuckets" = type { i64 }
%"class.std::__1::unique_ptr.99" = type { %"class.std::__1::__compressed_pair.100" }
%"class.std::__1::__compressed_pair.100" = type { %"struct.std::__1::__compressed_pair_elem.101" }
%"struct.std::__1::__compressed_pair_elem.101" = type { %"class.v8::internal::FreeList"* }
%"class.v8::internal::FreeList" = type { i32 (...)**, i32, i32, i64, %"struct.std::__1::atomic.21", %"class.v8::internal::FreeListCategory"**, i64 }
%"class.v8::internal::LinearAllocationArea" = type { i64, i64, i64 }
%"class.v8::internal::LocalAllocationBuffer" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::LinearAllocationArea" }
%"class.std::__1::unique_ptr.1076" = type { %"class.std::__1::__compressed_pair.1077" }
%"class.std::__1::__compressed_pair.1077" = type { %"struct.std::__1::__compressed_pair_elem.1078" }
%"struct.std::__1::__compressed_pair_elem.1078" = type { %"class.v8::internal::LocalLogger"* }
%"class.v8::internal::LocalLogger" = type opaque
%"struct.v8::internal::ManagedPtrDestructor" = type { i64, %"struct.v8::internal::ManagedPtrDestructor"*, %"struct.v8::internal::ManagedPtrDestructor"*, i8*, void (i8*)*, i64* }
%"class.v8::internal::wasm::WasmEngine" = type opaque
%"class.std::__1::unique_ptr.1085" = type { %"class.std::__1::__compressed_pair.1086" }
%"class.std::__1::__compressed_pair.1086" = type { %"struct.std::__1::__compressed_pair_elem.1087" }
%"struct.std::__1::__compressed_pair_elem.1087" = type { %"class.v8::internal::TracingCpuProfilerImpl"* }
%"class.v8::internal::TracingCpuProfilerImpl" = type opaque
%"class.v8::internal::EmbeddedFileWriterInterface" = type opaque
%"class.v8::Context::BackupIncumbentScope" = type { %"class.v8::Local.836", i64, %"class.v8::Context::BackupIncumbentScope"* }
%"class.v8::Local.836" = type { %"class.v8::Context"* }
%"class.v8::internal::Isolate::ThreadDataTable" = type { %"class.std::__1::unordered_map.1093" }
%"class.std::__1::unordered_map.1093" = type { %"class.std::__1::__hash_table.1094" }
%"class.std::__1::__hash_table.1094" = type <{ %"class.std::__1::unique_ptr.1095", %"class.std::__1::__compressed_pair.1105", %"class.std::__1::__compressed_pair.1110", %"class.std::__1::__compressed_pair.1113", [4 x i8] }>
%"class.std::__1::unique_ptr.1095" = type { %"class.std::__1::__compressed_pair.1096" }
%"class.std::__1::__compressed_pair.1096" = type { %"struct.std::__1::__compressed_pair_elem.1097", %"struct.std::__1::__compressed_pair_elem.1099" }
%"struct.std::__1::__compressed_pair_elem.1097" = type { %"struct.std::__1::__hash_node_base.1098"** }
%"struct.std::__1::__hash_node_base.1098" = type { %"struct.std::__1::__hash_node_base.1098"* }
%"struct.std::__1::__compressed_pair_elem.1099" = type { %"class.std::__1::__bucket_list_deallocator.1100" }
%"class.std::__1::__bucket_list_deallocator.1100" = type { %"class.std::__1::__compressed_pair.1101" }
%"class.std::__1::__compressed_pair.1101" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1105" = type { %"struct.std::__1::__compressed_pair_elem.1106" }
%"struct.std::__1::__compressed_pair_elem.1106" = type { %"struct.std::__1::__hash_node_base.1098" }
%"class.std::__1::__compressed_pair.1110" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.1113" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"struct.std::__1::atomic.1119" = type { %"struct.std::__1::__atomic_base.1120" }
%"struct.std::__1::__atomic_base.1120" = type { %"struct.std::__1::__cxx_atomic_impl.1121" }
%"struct.std::__1::__cxx_atomic_impl.1121" = type { %"struct.std::__1::__cxx_atomic_base_impl.1122" }
%"struct.std::__1::__cxx_atomic_base_impl.1122" = type { %"class.std::__1::vector.1123"* }
%"class.std::__1::vector.1123" = type { %"class.std::__1::__vector_base.1124" }
%"class.std::__1::__vector_base.1124" = type { %"struct.v8::MemoryRange"*, %"struct.v8::MemoryRange"*, %"class.std::__1::__compressed_pair.1125" }
%"struct.v8::MemoryRange" = type { i8*, i64 }
%"class.std::__1::__compressed_pair.1125" = type { %"struct.std::__1::__compressed_pair_elem.1126" }
%"struct.std::__1::__compressed_pair_elem.1126" = type { %"struct.v8::MemoryRange"* }
%"struct.std::__1::atomic.31" = type { %"struct.std::__1::__atomic_base.32" }
%"struct.std::__1::__atomic_base.32" = type { %"struct.std::__1::__cxx_atomic_impl.33" }
%"struct.std::__1::__cxx_atomic_impl.33" = type { %"struct.std::__1::__cxx_atomic_base_impl.34" }
%"struct.std::__1::__cxx_atomic_base_impl.34" = type { i32 }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"struct.std::__1::pair"*, %"struct.std::__1::pair"*, %"class.std::__1::__compressed_pair.35" }
%"struct.std::__1::pair" = type opaque
%"class.std::__1::__compressed_pair.35" = type { %"struct.std::__1::__compressed_pair_elem.36" }
%"struct.std::__1::__compressed_pair_elem.36" = type { %"struct.std::__1::pair"* }
%"class.v8::internal::NewSpace" = type { %"class.v8::internal::SpaceWithLinearArea", %"class.v8::base::Mutex", %"struct.std::__1::atomic.21", %"struct.std::__1::atomic.21", %"class.v8::internal::SemiSpace", %"class.v8::internal::SemiSpace", %"class.v8::internal::VirtualMemory", %"class.std::__1::vector.105" }
%"class.v8::internal::SemiSpace" = type { %"class.v8::internal::Space", i64, i64, i64, i64, i64, i32, %"class.v8::internal::Page"* }
%"class.v8::internal::Page" = type { %"class.v8::internal::MemoryChunk" }
%"class.std::__1::vector.105" = type { %"class.std::__1::__vector_base.106" }
%"class.std::__1::__vector_base.106" = type { %"struct.std::__1::pair.107"*, %"struct.std::__1::pair.107"*, %"class.std::__1::__compressed_pair.108" }
%"struct.std::__1::pair.107" = type { i32, i64 }
%"class.std::__1::__compressed_pair.108" = type { %"struct.std::__1::__compressed_pair_elem.109" }
%"struct.std::__1::__compressed_pair_elem.109" = type { %"struct.std::__1::pair.107"* }
%"class.v8::internal::CodeSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::OldLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace" }
%"class.v8::internal::LargeObjectSpace" = type { %"class.v8::internal::Space", %"struct.std::__1::atomic.21", i32, %"struct.std::__1::atomic.21", %"class.v8::base::Mutex", %"struct.std::__1::atomic.21" }
%"class.v8::internal::CodeLargeObjectSpace" = type { %"class.v8::internal::OldLargeObjectSpace", %"class.std::__1::unordered_map.113" }
%"class.std::__1::unordered_map.113" = type { %"class.std::__1::__hash_table.114" }
%"class.std::__1::__hash_table.114" = type <{ %"class.std::__1::unique_ptr.115", %"class.std::__1::__compressed_pair.125", %"class.std::__1::__compressed_pair.130", %"class.std::__1::__compressed_pair.135", [4 x i8] }>
%"class.std::__1::unique_ptr.115" = type { %"class.std::__1::__compressed_pair.116" }
%"class.std::__1::__compressed_pair.116" = type { %"struct.std::__1::__compressed_pair_elem.117", %"struct.std::__1::__compressed_pair_elem.119" }
%"struct.std::__1::__compressed_pair_elem.117" = type { %"struct.std::__1::__hash_node_base.118"** }
%"struct.std::__1::__hash_node_base.118" = type { %"struct.std::__1::__hash_node_base.118"* }
%"struct.std::__1::__compressed_pair_elem.119" = type { %"class.std::__1::__bucket_list_deallocator.120" }
%"class.std::__1::__bucket_list_deallocator.120" = type { %"class.std::__1::__compressed_pair.121" }
%"class.std::__1::__compressed_pair.121" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.125" = type { %"struct.std::__1::__compressed_pair_elem.126" }
%"struct.std::__1::__compressed_pair_elem.126" = type { %"struct.std::__1::__hash_node_base.118" }
%"class.std::__1::__compressed_pair.130" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.135" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.v8::internal::NewLargeObjectSpace" = type { %"class.v8::internal::LargeObjectSpace", i64 }
%"class.v8::internal::OldSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.v8::internal::MapSpace" = type { %"class.v8::internal::PagedSpace" }
%"class.std::__1::unique_ptr.148" = type { %"class.std::__1::__compressed_pair.149" }
%"class.std::__1::__compressed_pair.149" = type { %"struct.std::__1::__compressed_pair_elem.150" }
%"struct.std::__1::__compressed_pair_elem.150" = type { %"class.v8::internal::ConcurrentAllocator"* }
%"class.v8::internal::ArrayBufferExtension" = type { %"struct.std::__1::atomic.154", %"struct.std::__1::atomic.158", %"class.std::__1::shared_ptr", %"class.v8::internal::ArrayBufferExtension"*, %"struct.std::__1::atomic.21" }
%"struct.std::__1::atomic.158" = type { %"struct.std::__1::__atomic_base.159" }
%"struct.std::__1::__atomic_base.159" = type { %"struct.std::__1::__cxx_atomic_impl.160" }
%"struct.std::__1::__cxx_atomic_impl.160" = type { %"struct.std::__1::__cxx_atomic_base_impl.161" }
%"struct.std::__1::__cxx_atomic_base_impl.161" = type { i8 }
%"class.std::__1::shared_ptr" = type { %"class.v8::internal::BackingStore"*, %"class.std::__1::__shared_weak_count"* }
%"struct.std::__1::atomic.163" = type { %"struct.std::__1::__atomic_base.164" }
%"struct.std::__1::__atomic_base.164" = type { %"struct.std::__1::__cxx_atomic_impl.165" }
%"struct.std::__1::__cxx_atomic_impl.165" = type { %"struct.std::__1::__cxx_atomic_base_impl.166" }
%"struct.std::__1::__cxx_atomic_base_impl.166" = type { i32 }
%"class.v8::internal::AllocationObserver" = type { i32 (...)**, i64 }
%"class.v8::internal::StressScavengeObserver" = type opaque
%"class.v8::internal::Object" = type { %"class.v8::internal::TaggedImpl" }
%"class.v8::internal::TaggedImpl" = type { i64 }
%"class.std::__1::vector.167" = type { %"class.std::__1::__vector_base.168" }
%"class.std::__1::__vector_base.168" = type { %"struct.v8::internal::Heap::GCCallbackTuple"*, %"struct.v8::internal::Heap::GCCallbackTuple"*, %"class.std::__1::__compressed_pair.169" }
%"struct.v8::internal::Heap::GCCallbackTuple" = type { void (%"class.v8::Isolate"*, i32, i32, i8*)*, i32, i8* }
%"class.std::__1::__compressed_pair.169" = type { %"struct.std::__1::__compressed_pair_elem.170" }
%"struct.std::__1::__compressed_pair_elem.170" = type { %"struct.v8::internal::Heap::GCCallbackTuple"* }
%"class.std::__1::unique_ptr.174" = type { %"class.std::__1::__compressed_pair.175" }
%"class.std::__1::__compressed_pair.175" = type { %"struct.std::__1::__compressed_pair_elem.176" }
%"struct.std::__1::__compressed_pair_elem.176" = type { %"class.v8::internal::GCTracer"* }
%"class.v8::internal::GCTracer" = type opaque
%"class.std::__1::unique_ptr.180" = type { %"class.std::__1::__compressed_pair.181" }
%"class.std::__1::__compressed_pair.181" = type { %"struct.std::__1::__compressed_pair_elem.182" }
%"struct.std::__1::__compressed_pair_elem.182" = type { %"class.v8::internal::MarkCompactCollector"* }
%"class.v8::internal::MarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::base::Mutex", %"class.v8::base::Semaphore", i8, i8, i8, i8, i8, i8, [2 x i8], %"class.v8::internal::MarkingWorklists", %"class.v8::internal::WeakObjects", %"struct.v8::internal::EphemeronMarking", %"class.std::__1::unique_ptr.222", %"class.std::__1::unique_ptr.228", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", %"class.std::__1::vector.282", %"class.std::__1::vector.282", %"class.std::__1::vector.282", %"class.std::__1::vector.289", %"class.v8::internal::Sweeper"*, %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", [2 x i8], i32, i32, [4 x i8] }>
%"class.v8::internal::MarkCompactCollectorBase" = type { i32 (...)**, %"class.v8::internal::Heap"* }
%"class.v8::base::Semaphore" = type { %union.sem_t }
%union.sem_t = type { i64, [24 x i8] }
%"class.v8::internal::MarkingWorklists" = type { %"class.heap::base::Worklist", %"class.heap::base::Worklist", %"class.heap::base::Worklist.183", %"class.std::__1::vector.184", %"class.std::__1::vector.191", %"class.heap::base::Worklist" }
%"class.heap::base::Worklist.183" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment"*, %"struct.std::__1::atomic.21" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Segment" = type opaque
%"class.std::__1::vector.184" = type { %"class.std::__1::__vector_base.185" }
%"class.std::__1::__vector_base.185" = type { %"struct.v8::internal::ContextWorklistPair"*, %"struct.v8::internal::ContextWorklistPair"*, %"class.std::__1::__compressed_pair.186" }
%"struct.v8::internal::ContextWorklistPair" = type { i64, %"class.heap::base::Worklist"* }
%"class.std::__1::__compressed_pair.186" = type { %"struct.std::__1::__compressed_pair_elem.187" }
%"struct.std::__1::__compressed_pair_elem.187" = type { %"struct.v8::internal::ContextWorklistPair"* }
%"class.std::__1::vector.191" = type { %"class.std::__1::__vector_base.192" }
%"class.std::__1::__vector_base.192" = type { %"class.std::__1::unique_ptr.193"*, %"class.std::__1::unique_ptr.193"*, %"class.std::__1::__compressed_pair.194" }
%"class.std::__1::unique_ptr.193" = type opaque
%"class.std::__1::__compressed_pair.194" = type { %"struct.std::__1::__compressed_pair_elem.195" }
%"struct.std::__1::__compressed_pair_elem.195" = type { %"class.std::__1::unique_ptr.193"* }
%"class.heap::base::Worklist" = type { %"class.v8::base::Mutex", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment"*, %"struct.std::__1::atomic.21" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Segment" = type opaque
%"class.v8::internal::WeakObjects" = type { %"class.v8::internal::Worklist", %"class.v8::internal::Worklist.199", %"class.v8::internal::Worklist.201", %"class.v8::internal::Worklist.201", %"class.v8::internal::Worklist.201", %"class.v8::internal::Worklist.203", %"class.v8::internal::Worklist.205", %"class.v8::internal::Worklist.207", %"class.v8::internal::Worklist.209", %"class.v8::internal::Worklist.211", %"class.v8::internal::Worklist.213" }
%"class.v8::internal::Worklist" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::TransitionArray, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::TransitionArray, 64>::Segment"*, %"struct.std::__1::atomic.21" }
%"class.v8::internal::Worklist.199" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::EphemeronHashTable, 64>::Segment"*, %"struct.std::__1::atomic.21" }
%"class.v8::internal::Worklist.201" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::Ephemeron, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::Ephemeron, 64>::Segment"*, %"struct.std::__1::atomic.21" }
%"class.v8::internal::Worklist.203" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::CompressedHeapObjectSlot>, 64>::Segment"*, %"struct.std::__1::atomic.21" }
%"class.v8::internal::Worklist.205" = type <{ [8 x %"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<std::__1::pair<v8::internal::HeapObject, v8::internal::Code>, 64>::Segment"*, %"struct.std::__1::atomic.21" }
%"class.v8::internal::Worklist.207" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSWeakRef, 64>::Segment"*, %"struct.std::__1::atomic.21" }
%"class.v8::internal::Worklist.209" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::WeakCell, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::WeakCell, 64>::Segment"*, %"struct.std::__1::atomic.21" }
%"class.v8::internal::Worklist.211" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::SharedFunctionInfo, 64>::Segment"*, %"struct.std::__1::atomic.21" }
%"class.v8::internal::Worklist.213" = type <{ [8 x %"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder"], %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool", i32, [4 x i8] }>
%"struct.v8::internal::Worklist<v8::internal::JSFunction, 64>::PrivateSegmentHolder" = type { %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, [64 x i8] }
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment" = type opaque
%"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::GlobalPool" = type { %"class.v8::base::Mutex", %"class.v8::internal::Worklist<v8::internal::JSFunction, 64>::Segment"*, %"struct.std::__1::atomic.21" }
%"struct.v8::internal::EphemeronMarking" = type { %"class.std::__1::vector.215", i8, i64 }
%"class.std::__1::vector.215" = type { %"class.std::__1::__vector_base.216" }
%"class.std::__1::__vector_base.216" = type { %"class.v8::internal::HeapObject"*, %"class.v8::internal::HeapObject"*, %"class.std::__1::__compressed_pair.217" }
%"class.std::__1::__compressed_pair.217" = type { %"struct.std::__1::__compressed_pair_elem.218" }
%"struct.std::__1::__compressed_pair_elem.218" = type { %"class.v8::internal::HeapObject"* }
%"class.std::__1::unique_ptr.222" = type { %"class.std::__1::__compressed_pair.223" }
%"class.std::__1::__compressed_pair.223" = type { %"struct.std::__1::__compressed_pair_elem.224" }
%"struct.std::__1::__compressed_pair_elem.224" = type { %"class.v8::internal::MainMarkingVisitor"* }
%"class.v8::internal::MainMarkingVisitor" = type opaque
%"class.std::__1::unique_ptr.228" = type { %"class.std::__1::__compressed_pair.229" }
%"class.std::__1::__compressed_pair.229" = type { %"struct.std::__1::__compressed_pair_elem.230" }
%"struct.std::__1::__compressed_pair_elem.230" = type { %"class.v8::internal::MarkingWorklists::Local"* }
%"class.v8::internal::MarkingWorklists::Local" = type { %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local", %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local", i64, %"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local"*, i8, [7 x i8], %"class.std::__1::unordered_map.231" }
%"class.heap::base::Worklist<v8::internal::HeapObject, 16>::Local" = type { %"class.heap::base::Worklist.183"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.heap::base::internal::SegmentBase" = type { i16, i16 }
%"class.heap::base::Worklist<v8::internal::HeapObject, 64>::Local" = type { %"class.heap::base::Worklist"*, %"class.heap::base::internal::SegmentBase"*, %"class.heap::base::internal::SegmentBase"* }
%"class.std::__1::unordered_map.231" = type { %"class.std::__1::__hash_table.232" }
%"class.std::__1::__hash_table.232" = type <{ %"class.std::__1::unique_ptr.233", %"class.std::__1::__compressed_pair.243", %"class.std::__1::__compressed_pair.248", %"class.std::__1::__compressed_pair.251", [4 x i8] }>
%"class.std::__1::unique_ptr.233" = type { %"class.std::__1::__compressed_pair.234" }
%"class.std::__1::__compressed_pair.234" = type { %"struct.std::__1::__compressed_pair_elem.235", %"struct.std::__1::__compressed_pair_elem.237" }
%"struct.std::__1::__compressed_pair_elem.235" = type { %"struct.std::__1::__hash_node_base.236"** }
%"struct.std::__1::__hash_node_base.236" = type { %"struct.std::__1::__hash_node_base.236"* }
%"struct.std::__1::__compressed_pair_elem.237" = type { %"class.std::__1::__bucket_list_deallocator.238" }
%"class.std::__1::__bucket_list_deallocator.238" = type { %"class.std::__1::__compressed_pair.239" }
%"class.std::__1::__compressed_pair.239" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.243" = type { %"struct.std::__1::__compressed_pair_elem.244" }
%"struct.std::__1::__compressed_pair_elem.244" = type { %"struct.std::__1::__hash_node_base.236" }
%"class.std::__1::__compressed_pair.248" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.251" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.v8::internal::NativeContextInferrer" = type { i8 }
%"class.v8::internal::NativeContextStats" = type { %"class.std::__1::unordered_map.258" }
%"class.std::__1::unordered_map.258" = type { %"class.std::__1::__hash_table.259" }
%"class.std::__1::__hash_table.259" = type <{ %"class.std::__1::unique_ptr.260", %"class.std::__1::__compressed_pair.270", %"class.std::__1::__compressed_pair.275", %"class.std::__1::__compressed_pair.278", [4 x i8] }>
%"class.std::__1::unique_ptr.260" = type { %"class.std::__1::__compressed_pair.261" }
%"class.std::__1::__compressed_pair.261" = type { %"struct.std::__1::__compressed_pair_elem.262", %"struct.std::__1::__compressed_pair_elem.264" }
%"struct.std::__1::__compressed_pair_elem.262" = type { %"struct.std::__1::__hash_node_base.263"** }
%"struct.std::__1::__hash_node_base.263" = type { %"struct.std::__1::__hash_node_base.263"* }
%"struct.std::__1::__compressed_pair_elem.264" = type { %"class.std::__1::__bucket_list_deallocator.265" }
%"class.std::__1::__bucket_list_deallocator.265" = type { %"class.std::__1::__compressed_pair.266" }
%"class.std::__1::__compressed_pair.266" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.270" = type { %"struct.std::__1::__compressed_pair_elem.271" }
%"struct.std::__1::__compressed_pair_elem.271" = type { %"struct.std::__1::__hash_node_base.263" }
%"class.std::__1::__compressed_pair.275" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.278" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::vector.282" = type { %"class.std::__1::__vector_base.283" }
%"class.std::__1::__vector_base.283" = type { %"class.v8::internal::Page"**, %"class.v8::internal::Page"**, %"class.std::__1::__compressed_pair.284" }
%"class.std::__1::__compressed_pair.284" = type { %"struct.std::__1::__compressed_pair_elem.285" }
%"struct.std::__1::__compressed_pair_elem.285" = type { %"class.v8::internal::Page"** }
%"class.std::__1::vector.289" = type { %"class.std::__1::__vector_base.290" }
%"class.std::__1::__vector_base.290" = type { %"struct.std::__1::pair.291"*, %"struct.std::__1::pair.291"*, %"class.std::__1::__compressed_pair.292" }
%"struct.std::__1::pair.291" = type opaque
%"class.std::__1::__compressed_pair.292" = type { %"struct.std::__1::__compressed_pair_elem.293" }
%"struct.std::__1::__compressed_pair_elem.293" = type { %"struct.std::__1::pair.291"* }
%"class.v8::internal::Sweeper" = type <{ %"class.v8::internal::Heap"*, %"class.v8::internal::MajorNonAtomicMarkingState"*, %"class.std::__1::unique_ptr.297", %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.282"], [3 x %"class.std::__1::vector.282"], i8, %"struct.std::__1::atomic.154", [6 x i8], %"class.std::__1::vector.282", i64, %"class.v8::base::Semaphore", i8, i8, i8, [5 x i8] }>
%"class.std::__1::unique_ptr.297" = type { %"class.std::__1::__compressed_pair.298" }
%"class.std::__1::__compressed_pair.298" = type { %"struct.std::__1::__compressed_pair_elem.299" }
%"struct.std::__1::__compressed_pair_elem.299" = type { %"class.v8::JobHandle"* }
%"class.v8::JobHandle" = type { i32 (...)** }
%"class.v8::internal::MajorMarkingState" = type { i8 }
%"class.v8::internal::MajorNonAtomicMarkingState" = type { i8 }
%"class.v8::internal::MinorMarkCompactCollector" = type <{ %"class.v8::internal::MarkCompactCollectorBase", %"class.v8::internal::Worklist.307"*, %"class.v8::internal::YoungGenerationMarkingVisitor"*, %"class.v8::base::Semaphore", %"class.std::__1::vector.282", %"class.std::__1::vector.282", %"class.v8::internal::MinorMarkingState", %"class.v8::internal::MinorNonAtomicMarkingState", [6 x i8] }>
%"class.v8::internal::Worklist.307" = type opaque
%"class.v8::internal::YoungGenerationMarkingVisitor" = type opaque
%"class.v8::internal::MinorMarkingState" = type { i8 }
%"class.v8::internal::MinorNonAtomicMarkingState" = type { i8 }
%"class.std::__1::unique_ptr.310" = type { %"class.std::__1::__compressed_pair.311" }
%"class.std::__1::__compressed_pair.311" = type { %"struct.std::__1::__compressed_pair_elem.312" }
%"struct.std::__1::__compressed_pair_elem.312" = type { %"class.v8::internal::ScavengerCollector"* }
%"class.v8::internal::ScavengerCollector" = type opaque
%"class.std::__1::unique_ptr.316" = type { %"class.std::__1::__compressed_pair.317" }
%"class.std::__1::__compressed_pair.317" = type { %"struct.std::__1::__compressed_pair_elem.318" }
%"struct.std::__1::__compressed_pair_elem.318" = type { %"class.v8::internal::ArrayBufferSweeper"* }
%"class.v8::internal::ArrayBufferSweeper" = type opaque
%"class.std::__1::unique_ptr.322" = type { %"class.std::__1::__compressed_pair.323" }
%"class.std::__1::__compressed_pair.323" = type { %"struct.std::__1::__compressed_pair_elem.324" }
%"struct.std::__1::__compressed_pair_elem.324" = type { %"class.v8::internal::MemoryAllocator"* }
%"class.v8::internal::MemoryAllocator" = type { %"class.v8::internal::Isolate"*, %"class.v8::PageAllocator"*, %"class.v8::PageAllocator"*, i64, %"struct.std::__1::atomic.21", %"struct.std::__1::atomic.21", %"struct.std::__1::atomic.21", %"struct.std::__1::atomic.21", %"class.v8::internal::VirtualMemory", %"class.v8::internal::MemoryAllocator::Unmapper", %"class.std::__1::unordered_set.332", %"class.v8::base::Mutex" }
%"class.v8::internal::MemoryAllocator::Unmapper" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MemoryAllocator"*, %"class.v8::base::Mutex", [3 x %"class.std::__1::vector.325"], %"class.std::__1::unique_ptr.297" }
%"class.std::__1::vector.325" = type { %"class.std::__1::__vector_base.326" }
%"class.std::__1::__vector_base.326" = type { %"class.v8::internal::MemoryChunk"**, %"class.v8::internal::MemoryChunk"**, %"class.std::__1::__compressed_pair.327" }
%"class.std::__1::__compressed_pair.327" = type { %"struct.std::__1::__compressed_pair_elem.328" }
%"struct.std::__1::__compressed_pair_elem.328" = type { %"class.v8::internal::MemoryChunk"** }
%"class.std::__1::unique_ptr.361" = type { %"class.std::__1::__compressed_pair.362" }
%"class.std::__1::__compressed_pair.362" = type { %"struct.std::__1::__compressed_pair_elem.363" }
%"struct.std::__1::__compressed_pair_elem.363" = type { %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::IncrementalMarking" = type { %"class.v8::internal::Heap"*, %"class.v8::internal::MarkCompactCollector"*, %"class.v8::internal::WeakObjects"*, double, double, i64, i64, i64, i64, double, i64, %"struct.std::__1::atomic.364", i8, i8, i8, i8, [3 x i8], %"class.v8::internal::IncrementalMarkingJob", %"struct.std::__1::atomic.368", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::IncrementalMarking::Observer", %"class.v8::internal::MajorMarkingState", %"class.v8::internal::MajorAtomicMarkingState", %"class.v8::internal::MajorNonAtomicMarkingState", %"class.v8::base::Mutex", %"class.std::__1::unordered_map.373" }
%"struct.std::__1::atomic.364" = type { %"struct.std::__1::__atomic_base.365" }
%"struct.std::__1::__atomic_base.365" = type { %"struct.std::__1::__cxx_atomic_impl.366" }
%"struct.std::__1::__cxx_atomic_impl.366" = type { %"struct.std::__1::__cxx_atomic_base_impl.367" }
%"struct.std::__1::__cxx_atomic_base_impl.367" = type { i8 }
%"class.v8::internal::IncrementalMarkingJob" = type <{ %"class.v8::base::Mutex", double, i8, i8, [6 x i8] }>
%"struct.std::__1::atomic.368" = type { %"struct.std::__1::__atomic_base.369" }
%"struct.std::__1::__atomic_base.369" = type { %"struct.std::__1::__cxx_atomic_impl.370" }
%"struct.std::__1::__cxx_atomic_impl.370" = type { %"struct.std::__1::__cxx_atomic_base_impl.371" }
%"struct.std::__1::__cxx_atomic_base_impl.371" = type { i32 }
%"class.v8::internal::IncrementalMarking::Observer" = type { %"class.v8::internal::AllocationObserver", %"class.v8::internal::IncrementalMarking"* }
%"class.v8::internal::MajorAtomicMarkingState" = type { i8 }
%"class.std::__1::unordered_map.373" = type { %"class.std::__1::__hash_table.374" }
%"class.std::__1::__hash_table.374" = type <{ %"class.std::__1::unique_ptr.375", %"class.std::__1::__compressed_pair.385", %"class.std::__1::__compressed_pair.390", %"class.std::__1::__compressed_pair.393", [4 x i8] }>
%"class.std::__1::unique_ptr.375" = type { %"class.std::__1::__compressed_pair.376" }
%"class.std::__1::__compressed_pair.376" = type { %"struct.std::__1::__compressed_pair_elem.377", %"struct.std::__1::__compressed_pair_elem.379" }
%"struct.std::__1::__compressed_pair_elem.377" = type { %"struct.std::__1::__hash_node_base.378"** }
%"struct.std::__1::__hash_node_base.378" = type { %"struct.std::__1::__hash_node_base.378"* }
%"struct.std::__1::__compressed_pair_elem.379" = type { %"class.std::__1::__bucket_list_deallocator.380" }
%"class.std::__1::__bucket_list_deallocator.380" = type { %"class.std::__1::__compressed_pair.381" }
%"class.std::__1::__compressed_pair.381" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.385" = type { %"struct.std::__1::__compressed_pair_elem.386" }
%"struct.std::__1::__compressed_pair_elem.386" = type { %"struct.std::__1::__hash_node_base.378" }
%"class.std::__1::__compressed_pair.390" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.393" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::unique_ptr.400" = type { %"class.std::__1::__compressed_pair.401" }
%"class.std::__1::__compressed_pair.401" = type { %"struct.std::__1::__compressed_pair_elem.402" }
%"struct.std::__1::__compressed_pair_elem.402" = type { %"class.v8::internal::ConcurrentMarking"* }
%"class.v8::internal::ConcurrentMarking" = type <{ %"class.std::__1::unique_ptr.297", %"class.v8::internal::Heap"*, %"class.v8::internal::MarkingWorklists"*, %"class.v8::internal::WeakObjects"*, [8 x %"struct.v8::internal::ConcurrentMarking::TaskState"], %"struct.std::__1::atomic.21", %"struct.std::__1::atomic.154", [7 x i8] }>
%"struct.v8::internal::ConcurrentMarking::TaskState" = type { i64, %"class.std::__1::unordered_map.403", %"class.v8::internal::NativeContextInferrer", [7 x i8], %"class.v8::internal::NativeContextStats", [64 x i8] }
%"class.std::__1::unordered_map.403" = type { %"class.std::__1::__hash_table.404" }
%"class.std::__1::__hash_table.404" = type <{ %"class.std::__1::unique_ptr.405", %"class.std::__1::__compressed_pair.415", %"class.std::__1::__compressed_pair.420", %"class.std::__1::__compressed_pair.423", [4 x i8] }>
%"class.std::__1::unique_ptr.405" = type { %"class.std::__1::__compressed_pair.406" }
%"class.std::__1::__compressed_pair.406" = type { %"struct.std::__1::__compressed_pair_elem.407", %"struct.std::__1::__compressed_pair_elem.409" }
%"struct.std::__1::__compressed_pair_elem.407" = type { %"struct.std::__1::__hash_node_base.408"** }
%"struct.std::__1::__hash_node_base.408" = type { %"struct.std::__1::__hash_node_base.408"* }
%"struct.std::__1::__compressed_pair_elem.409" = type { %"class.std::__1::__bucket_list_deallocator.410" }
%"class.std::__1::__bucket_list_deallocator.410" = type { %"class.std::__1::__compressed_pair.411" }
%"class.std::__1::__compressed_pair.411" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.415" = type { %"struct.std::__1::__compressed_pair_elem.416" }
%"struct.std::__1::__compressed_pair_elem.416" = type { %"struct.std::__1::__hash_node_base.408" }
%"class.std::__1::__compressed_pair.420" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.423" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::unique_ptr.430" = type { %"class.std::__1::__compressed_pair.431" }
%"class.std::__1::__compressed_pair.431" = type { %"struct.std::__1::__compressed_pair_elem.432" }
%"struct.std::__1::__compressed_pair_elem.432" = type { %"class.v8::internal::GCIdleTimeHandler"* }
%"class.v8::internal::GCIdleTimeHandler" = type opaque
%"class.std::__1::unique_ptr.436" = type { %"class.std::__1::__compressed_pair.437" }
%"class.std::__1::__compressed_pair.437" = type { %"struct.std::__1::__compressed_pair_elem.438" }
%"struct.std::__1::__compressed_pair_elem.438" = type { %"class.v8::internal::MemoryMeasurement"* }
%"class.v8::internal::MemoryMeasurement" = type { %"class.std::__1::list", %"class.std::__1::list", %"class.std::__1::list", %"class.v8::internal::Isolate"*, i8, i8, i8, %"class.v8::base::RandomNumberGenerator" }
%"class.std::__1::list" = type { %"class.std::__1::__list_imp" }
%"class.std::__1::__list_imp" = type { %"struct.std::__1::__list_node_base", %"class.std::__1::__compressed_pair.439" }
%"struct.std::__1::__list_node_base" = type { %"struct.std::__1::__list_node_base"*, %"struct.std::__1::__list_node_base"* }
%"class.std::__1::__compressed_pair.439" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::unique_ptr.446" = type { %"class.std::__1::__compressed_pair.447" }
%"class.std::__1::__compressed_pair.447" = type { %"struct.std::__1::__compressed_pair_elem.448" }
%"struct.std::__1::__compressed_pair_elem.448" = type { %"class.v8::internal::MemoryReducer"* }
%"class.v8::internal::MemoryReducer" = type opaque
%"class.std::__1::unique_ptr.452" = type { %"class.std::__1::__compressed_pair.453" }
%"class.std::__1::__compressed_pair.453" = type { %"struct.std::__1::__compressed_pair_elem.454" }
%"struct.std::__1::__compressed_pair_elem.454" = type { %"class.v8::internal::ObjectStats"* }
%"class.v8::internal::ObjectStats" = type opaque
%"class.std::__1::unique_ptr.458" = type { %"class.std::__1::__compressed_pair.459" }
%"class.std::__1::__compressed_pair.459" = type { %"struct.std::__1::__compressed_pair_elem.460" }
%"struct.std::__1::__compressed_pair_elem.460" = type { %"class.v8::internal::ScavengeJob"* }
%"class.v8::internal::ScavengeJob" = type opaque
%"class.std::__1::unique_ptr.464" = type { %"class.std::__1::__compressed_pair.465" }
%"class.std::__1::__compressed_pair.465" = type { %"struct.std::__1::__compressed_pair_elem.466" }
%"struct.std::__1::__compressed_pair_elem.466" = type { %"class.v8::internal::AllocationObserver"* }
%"class.std::__1::unique_ptr.470" = type { %"class.std::__1::__compressed_pair.471" }
%"class.std::__1::__compressed_pair.471" = type { %"struct.std::__1::__compressed_pair_elem.472" }
%"struct.std::__1::__compressed_pair_elem.472" = type { %"class.v8::internal::LocalEmbedderHeapTracer"* }
%"class.v8::internal::LocalEmbedderHeapTracer" = type opaque
%"class.std::__1::unique_ptr.476" = type { %"class.std::__1::__compressed_pair.477" }
%"class.std::__1::__compressed_pair.477" = type { %"struct.std::__1::__compressed_pair_elem.478" }
%"struct.std::__1::__compressed_pair_elem.478" = type { %"class.v8::internal::MarkingBarrier"* }
%"class.v8::internal::MarkingBarrier" = type opaque
%"class.std::__1::shared_ptr.482" = type { %"class.v8::internal::CodeRange"*, %"class.std::__1::__shared_weak_count"* }
%"class.v8::internal::CodeRange" = type { %"class.v8::internal::VirtualMemoryCage", %"struct.std::__1::atomic.501", %"class.v8::base::Mutex" }
%"class.v8::internal::VirtualMemoryCage" = type { i32 (...)**, i64, %"class.std::__1::unique_ptr.483", %"class.v8::internal::VirtualMemory" }
%"struct.std::__1::atomic.501" = type { %"struct.std::__1::__atomic_base.502" }
%"struct.std::__1::__atomic_base.502" = type { %"struct.std::__1::__cxx_atomic_impl.503" }
%"struct.std::__1::__cxx_atomic_impl.503" = type { %"struct.std::__1::__cxx_atomic_base_impl.504" }
%"struct.std::__1::__cxx_atomic_base_impl.504" = type { i8* }
%"class.v8::CppHeap" = type opaque
%"class.v8::EmbedderRootsHandler" = type { i32 (...)** }
%"class.v8::internal::StrongRootsEntry" = type { %"class.v8::internal::FullObjectSlot", %"class.v8::internal::FullObjectSlot", %"class.v8::internal::StrongRootsEntry"*, %"class.v8::internal::StrongRootsEntry"* }
%"class.v8::internal::FullObjectSlot" = type { %"class.v8::internal::SlotBase" }
%"class.v8::internal::SlotBase" = type { i64 }
%"class.std::__1::unordered_map.505" = type { %"class.std::__1::__hash_table.506" }
%"class.std::__1::__hash_table.506" = type <{ %"class.std::__1::unique_ptr.507", %"class.std::__1::__compressed_pair.517", %"class.std::__1::__compressed_pair.522", %"class.std::__1::__compressed_pair.525", [4 x i8] }>
%"class.std::__1::unique_ptr.507" = type { %"class.std::__1::__compressed_pair.508" }
%"class.std::__1::__compressed_pair.508" = type { %"struct.std::__1::__compressed_pair_elem.509", %"struct.std::__1::__compressed_pair_elem.511" }
%"struct.std::__1::__compressed_pair_elem.509" = type { %"struct.std::__1::__hash_node_base.510"** }
%"struct.std::__1::__hash_node_base.510" = type { %"struct.std::__1::__hash_node_base.510"* }
%"struct.std::__1::__compressed_pair_elem.511" = type { %"class.std::__1::__bucket_list_deallocator.512" }
%"class.std::__1::__bucket_list_deallocator.512" = type { %"class.std::__1::__compressed_pair.513" }
%"class.std::__1::__compressed_pair.513" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.517" = type { %"struct.std::__1::__compressed_pair_elem.518" }
%"struct.std::__1::__compressed_pair_elem.518" = type { %"struct.std::__1::__hash_node_base.510" }
%"class.std::__1::__compressed_pair.522" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.525" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::unique_ptr.531" = type { %"class.std::__1::__compressed_pair.532" }
%"class.std::__1::__compressed_pair.532" = type { %"struct.std::__1::__compressed_pair_elem.533" }
%"struct.std::__1::__compressed_pair_elem.533" = type { %"class.v8::internal::GlobalHandleVector"* }
%"class.v8::internal::GlobalHandleVector" = type opaque
%"class.std::__1::unique_ptr.537" = type { %"class.std::__1::__compressed_pair.538" }
%"class.std::__1::__compressed_pair.538" = type { %"struct.std::__1::__compressed_pair_elem.539" }
%"struct.std::__1::__compressed_pair_elem.539" = type { %"class.v8::internal::GlobalSafepoint"* }
%"class.v8::internal::GlobalSafepoint" = type opaque
%"class.v8::internal::Heap::ExternalStringTable" = type { %"class.v8::internal::Heap"*, %"class.std::__1::vector.543", %"class.std::__1::vector.543" }
%"class.std::__1::unique_ptr.550" = type { %"class.std::__1::__compressed_pair.551" }
%"class.std::__1::__compressed_pair.551" = type { %"struct.std::__1::__compressed_pair_elem.552" }
%"struct.std::__1::__compressed_pair_elem.552" = type { %"class.v8::internal::CollectionBarrier"* }
%"class.v8::internal::CollectionBarrier" = type opaque
%"class.v8::internal::HeapObject" = type { %"class.v8::internal::Object" }
%"class.v8::base::SharedMutex" = type { %union.pthread_rwlock_t }
%union.pthread_rwlock_t = type { %struct.__pthread_rwlock_arch_t }
%struct.__pthread_rwlock_arch_t = type { i32, i32, i32, i32, i32, i32, i32, i32, i8, [7 x i8], i64, i32 }
%"class.v8::base::Mutex" = type { %union.pthread_mutex_t }
%"class.std::__1::unordered_set.332" = type { %"class.std::__1::__hash_table.333" }
%"class.std::__1::__hash_table.333" = type <{ %"class.std::__1::unique_ptr.334", %"class.std::__1::__compressed_pair.344", %"class.std::__1::__compressed_pair.349", %"class.std::__1::__compressed_pair.353", [4 x i8] }>
%"class.std::__1::unique_ptr.334" = type { %"class.std::__1::__compressed_pair.335" }
%"class.std::__1::__compressed_pair.335" = type { %"struct.std::__1::__compressed_pair_elem.336", %"struct.std::__1::__compressed_pair_elem.338" }
%"struct.std::__1::__compressed_pair_elem.336" = type { %"struct.std::__1::__hash_node_base.337"** }
%"struct.std::__1::__hash_node_base.337" = type { %"struct.std::__1::__hash_node_base.337"* }
%"struct.std::__1::__compressed_pair_elem.338" = type { %"class.std::__1::__bucket_list_deallocator.339" }
%"class.std::__1::__bucket_list_deallocator.339" = type { %"class.std::__1::__compressed_pair.340" }
%"class.std::__1::__compressed_pair.340" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.344" = type { %"struct.std::__1::__compressed_pair_elem.345" }
%"struct.std::__1::__compressed_pair_elem.345" = type { %"struct.std::__1::__hash_node_base.337" }
%"class.std::__1::__compressed_pair.349" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.353" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::unordered_map.582" = type { %"class.std::__1::__hash_table.583" }
%"class.std::__1::__hash_table.583" = type <{ %"class.std::__1::unique_ptr.584", %"class.std::__1::__compressed_pair.594", %"class.std::__1::__compressed_pair.599", %"class.std::__1::__compressed_pair.602", [4 x i8] }>
%"class.std::__1::unique_ptr.584" = type { %"class.std::__1::__compressed_pair.585" }
%"class.std::__1::__compressed_pair.585" = type { %"struct.std::__1::__compressed_pair_elem.586", %"struct.std::__1::__compressed_pair_elem.588" }
%"struct.std::__1::__compressed_pair_elem.586" = type { %"struct.std::__1::__hash_node_base.587"** }
%"struct.std::__1::__hash_node_base.587" = type { %"struct.std::__1::__hash_node_base.587"* }
%"struct.std::__1::__compressed_pair_elem.588" = type { %"class.std::__1::__bucket_list_deallocator.589" }
%"class.std::__1::__bucket_list_deallocator.589" = type { %"class.std::__1::__compressed_pair.590" }
%"class.std::__1::__compressed_pair.590" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.594" = type { %"struct.std::__1::__compressed_pair_elem.595" }
%"struct.std::__1::__compressed_pair_elem.595" = type { %"struct.std::__1::__hash_node_base.587" }
%"class.std::__1::__compressed_pair.599" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.602" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::unordered_map.556" = type { %"class.std::__1::__hash_table.557" }
%"class.std::__1::__hash_table.557" = type <{ %"class.std::__1::unique_ptr.558", %"class.std::__1::__compressed_pair.568", %"class.std::__1::__compressed_pair.573", %"class.std::__1::__compressed_pair.576", [4 x i8] }>
%"class.std::__1::unique_ptr.558" = type { %"class.std::__1::__compressed_pair.559" }
%"class.std::__1::__compressed_pair.559" = type { %"struct.std::__1::__compressed_pair_elem.560", %"struct.std::__1::__compressed_pair_elem.562" }
%"struct.std::__1::__compressed_pair_elem.560" = type { %"struct.std::__1::__hash_node_base.561"** }
%"struct.std::__1::__hash_node_base.561" = type { %"struct.std::__1::__hash_node_base.561"* }
%"struct.std::__1::__compressed_pair_elem.562" = type { %"class.std::__1::__bucket_list_deallocator.563" }
%"class.std::__1::__bucket_list_deallocator.563" = type { %"class.std::__1::__compressed_pair.564" }
%"class.std::__1::__compressed_pair.564" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.568" = type { %"struct.std::__1::__compressed_pair_elem.569" }
%"struct.std::__1::__compressed_pair_elem.569" = type { %"struct.std::__1::__hash_node_base.561" }
%"class.std::__1::__compressed_pair.573" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.576" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::unordered_map.606" = type { %"class.std::__1::__hash_table.607" }
%"class.std::__1::__hash_table.607" = type <{ %"class.std::__1::unique_ptr.608", %"class.std::__1::__compressed_pair.618", %"class.std::__1::__compressed_pair.623", %"class.std::__1::__compressed_pair.628", [4 x i8] }>
%"class.std::__1::unique_ptr.608" = type { %"class.std::__1::__compressed_pair.609" }
%"class.std::__1::__compressed_pair.609" = type { %"struct.std::__1::__compressed_pair_elem.610", %"struct.std::__1::__compressed_pair_elem.612" }
%"struct.std::__1::__compressed_pair_elem.610" = type { %"struct.std::__1::__hash_node_base.611"** }
%"struct.std::__1::__hash_node_base.611" = type { %"struct.std::__1::__hash_node_base.611"* }
%"struct.std::__1::__compressed_pair_elem.612" = type { %"class.std::__1::__bucket_list_deallocator.613" }
%"class.std::__1::__bucket_list_deallocator.613" = type { %"class.std::__1::__compressed_pair.614" }
%"class.std::__1::__compressed_pair.614" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.618" = type { %"struct.std::__1::__compressed_pair_elem.619" }
%"struct.std::__1::__compressed_pair_elem.619" = type { %"struct.std::__1::__hash_node_base.611" }
%"class.std::__1::__compressed_pair.623" = type { %"struct.std::__1::__compressed_pair_elem.9" }
%"class.std::__1::__compressed_pair.628" = type { %"struct.std::__1::__compressed_pair_elem.19" }
%"class.std::__1::vector.634" = type { %"class.std::__1::__vector_base.635" }
%"class.std::__1::__vector_base.635" = type { %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.v8::internal::HeapObjectAllocationTracker"**, %"class.std::__1::__compressed_pair.636" }
%"class.std::__1::__compressed_pair.636" = type { %"struct.std::__1::__compressed_pair_elem.637" }
%"struct.std::__1::__compressed_pair_elem.637" = type { %"class.v8::internal::HeapObjectAllocationTracker"** }
%"class.std::__1::unique_ptr.641" = type { %"class.std::__1::__compressed_pair.642" }
%"class.std::__1::__compressed_pair.642" = type { %"struct.std::__1::__compressed_pair_elem.643" }
%"struct.std::__1::__compressed_pair_elem.643" = type { %"class.v8::internal::third_party_heap::Heap"* }
%"class.v8::internal::third_party_heap::Heap" = type { i8 }
%"struct.std::__1::atomic.21" = type { %"struct.std::__1::__atomic_base.22" }
%"struct.std::__1::__atomic_base.22" = type { %"struct.std::__1::__atomic_base.23" }
%"struct.std::__1::__atomic_base.23" = type { %"struct.std::__1::__cxx_atomic_impl.24" }
%"struct.std::__1::__cxx_atomic_impl.24" = type { %"struct.std::__1::__cxx_atomic_base_impl.25" }
%"struct.std::__1::__cxx_atomic_base_impl.25" = type { i64 }
%"class.v8::internal::AllocationStats" = type { %"struct.std::__1::atomic.21", i64, %"struct.std::__1::atomic.21" }
%"class.std::__1::vector.141" = type { %"class.std::__1::__vector_base.142" }
%"class.std::__1::__vector_base.142" = type { %"class.v8::internal::ReadOnlyPage"**, %"class.v8::internal::ReadOnlyPage"**, %"class.std::__1::__compressed_pair.143" }
%"class.v8::internal::ReadOnlyPage" = type { %"class.v8::internal::BasicMemoryChunk" }
%"class.std::__1::__compressed_pair.143" = type { %"struct.std::__1::__compressed_pair_elem.144" }
%"struct.std::__1::__compressed_pair_elem.144" = type { %"class.v8::internal::ReadOnlyPage"** }
%"class.std::__1::vector.543" = type { %"class.std::__1::__vector_base.544" }
%"class.std::__1::__vector_base.544" = type { %"class.v8::internal::Object"*, %"class.v8::internal::Object"*, %"class.std::__1::__compressed_pair.545" }
%"class.std::__1::__compressed_pair.545" = type { %"struct.std::__1::__compressed_pair_elem.546" }
%"struct.std::__1::__compressed_pair_elem.546" = type { %"class.v8::internal::Object"* }
%"class.v8::internal::String" = type { %"class.v8::internal::TorqueGeneratedString" }
%"class.v8::internal::TorqueGeneratedString" = type { %"class.v8::internal::Name" }
%"class.v8::internal::(anonymous namespace)::StringSharedKey" = type { %"class.v8::internal::HashTableKey.base", %"class.v8::internal::Handle.0", %"class.v8::internal::MaybeHandle", i8, i32 }
%"class.v8::internal::HashTableKey.base" = type <{ i32 (...)**, i32 }>
%"class.v8::internal::Handle.0" = type { %"class.v8::internal::HandleBase" }
%"class.v8::internal::MaybeHandle" = type { i64* }
%"class.v8::internal::HashTableKey" = type <{ i32 (...)**, i32, [4 x i8] }>
%"class.v8::internal::InfoCellPair" = type { %"class.v8::internal::IsCompiledScope", %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::FeedbackCell" }
%"class.v8::internal::IsCompiledScope" = type <{ %"class.v8::internal::MaybeHandle.1132", i8, [7 x i8] }>
%"class.v8::internal::MaybeHandle.1132" = type { i64* }
%"class.v8::internal::SharedFunctionInfo" = type { %"class.v8::internal::TorqueGeneratedSharedFunctionInfo" }
%"class.v8::internal::TorqueGeneratedSharedFunctionInfo" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::FeedbackCell" = type { %"class.v8::internal::TorqueGeneratedFeedbackCell" }
%"class.v8::internal::TorqueGeneratedFeedbackCell" = type { %"class.v8::internal::Struct" }
%"class.v8::internal::Struct" = type { %"class.v8::internal::TorqueGeneratedStruct" }
%"class.v8::internal::TorqueGeneratedStruct" = type { %"class.v8::internal::HeapObject" }
%"class.v8::internal::CompilationCacheTable" = type { %"class.v8::internal::HashTable" }
%"class.v8::internal::HashTable" = type { %"class.v8::internal::HashTableBase" }
%"class.v8::internal::HashTableBase" = type { %"class.v8::internal::FixedArray" }
%"class.v8::internal::(anonymous namespace)::RegExpKey" = type { %"class.v8::internal::HashTableKey.base", %"class.v8::internal::Handle.0", %"class.v8::internal::Smi" }
%"class.v8::internal::Smi" = type { %"class.v8::internal::Object" }
%"class.v8::internal::Factory" = type { i8 }
%"class.v8::internal::Handle<v8::internal::CompilationCacheTable>::ObjectRef" = type { %"class.v8::internal::CompilationCacheTable" }
%"class.v8::internal::FactoryBase" = type { i8 }
%"class.v8::internal::BytecodeArray" = type { %"class.v8::internal::FixedArrayBase" }
%"class.v8::internal::Handle<v8::internal::String>::ObjectRef" = type { %"class.v8::internal::String" }

$_ZN2v88internal6String7FlattenEPNS0_7IsolateENS0_6HandleIS1_EENS0_14AllocationTypeE = comdat any

$_ZN2v88internal12HashTableKeyD2Ev = comdat any

$_ZNK2v88internal18SharedFunctionInfo16GetBytecodeArrayINS0_7IsolateEEENS0_13BytecodeArrayEPT_ = comdat any

$_ZN2v88internal15IsCompiledScopeC2ENS0_18SharedFunctionInfoEPNS0_7IsolateE = comdat any

@_ZTVN2v88internal12_GLOBAL__N_115StringSharedKeyE = internal unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"class.v8::internal::(anonymous namespace)::StringSharedKey"*, i64)* @_ZN2v88internal12_GLOBAL__N_115StringSharedKey7IsMatchENS0_6ObjectE to i8*), i8* bitcast (void (%"class.v8::internal::HashTableKey"*)* @_ZN2v88internal12HashTableKeyD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::(anonymous namespace)::StringSharedKey"*)* @_ZN2v88internal12_GLOBAL__N_115StringSharedKeyD0Ev to i8*)] }, align 8
@_ZTVN2v88internal12_GLOBAL__N_19RegExpKeyE = internal unnamed_addr constant { [5 x i8*] } { [5 x i8*] [i8* null, i8* null, i8* bitcast (i1 (%"class.v8::internal::(anonymous namespace)::RegExpKey"*, i64)* @_ZN2v88internal12_GLOBAL__N_19RegExpKey7IsMatchENS0_6ObjectE to i8*), i8* bitcast (void (%"class.v8::internal::HashTableKey"*)* @_ZN2v88internal12HashTableKeyD2Ev to i8*), i8* bitcast (void (%"class.v8::internal::(anonymous namespace)::RegExpKey"*)* @_ZN2v88internal12_GLOBAL__N_19RegExpKeyD0Ev to i8*)] }, align 8
@_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E = external local_unnamed_addr global %"class.v8::internal::SoleReadOnlyHeap"*, align 8

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal21CompilationCacheTable12LookupScriptENS0_6HandleIS1_EENS2_INS0_6StringEEENS0_12LanguageModeEPNS0_7IsolateE(i64*, i64*, i1 zeroext, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  %5 = alloca %"class.v8::internal::String", align 8
  %6 = alloca %"class.v8::internal::(anonymous namespace)::StringSharedKey", align 8
  %7 = tail call i64* @_ZN2v88internal6String7FlattenEPNS0_7IsolateENS0_6HandleIS1_EENS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %3, i64* %1, i8 zeroext 0)
  %8 = bitcast %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %8) #5
  %9 = ptrtoint i64* %7 to i64
  %10 = zext i1 %2 to i8
  %11 = load i64, i64* %7, align 8
  %12 = add i64 %11, 3
  %13 = inttoptr i64 %12 to i32*
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, 1
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %4
  %18 = lshr i32 %14, 2
  br label %23

19:                                               ; preds = %4
  %20 = bitcast %"class.v8::internal::String"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %20) #5
  %21 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %5, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %11, i64* %21, align 8
  %22 = call i32 @_ZN2v88internal6String17ComputeAndSetHashEv(%"class.v8::internal::String"* nonnull %5) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %20) #5
  br label %23

23:                                               ; preds = %17, %19
  %24 = phi i32 [ %18, %17 ], [ %22, %19 ]
  %25 = xor i32 %24, 32768
  %26 = select i1 %2, i32 %25, i32 %24
  %27 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %6, i64 0, i32 0, i32 0
  %28 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %6, i64 0, i32 0, i32 1
  store i32 %26, i32* %28, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2v88internal12_GLOBAL__N_115StringSharedKeyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %27, align 8
  %29 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %6, i64 0, i32 1
  %30 = bitcast %"class.v8::internal::Handle.0"* %29 to i64*
  store i64 %9, i64* %30, align 8
  %31 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %6, i64 0, i32 2, i32 0
  store i64* null, i64** %31, align 8
  %32 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %6, i64 0, i32 3
  store i8 %10, i8* %32, align 8
  %33 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %6, i64 0, i32 4
  store i32 -1, i32* %33, align 4
  %34 = load i64, i64* %0, align 8
  %35 = bitcast %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %6 to %"class.v8::internal::HashTableKey"*
  %36 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %3, i64 0, i32 0, i32 4
  %37 = load i64, i64* %36, align 8
  %38 = add i64 %34, 15
  %39 = inttoptr i64 %38 to i32*
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = ashr i32 %40, 1
  %42 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %3, i64 0, i32 0, i32 7, i32 0, i64 4
  %43 = load i64, i64* %42, align 8
  %44 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %3, i64 0, i32 0, i32 7, i32 0, i64 5
  %45 = load i64, i64* %44, align 8
  %46 = add nsw i32 %41, -1
  %47 = and i32 %46, %26
  %48 = zext i32 %47 to i64
  %49 = mul i64 %48, 51539607552
  %50 = add i64 %49, 51539607552
  %51 = ashr exact i64 %50, 32
  %52 = add i64 %34, 7
  %53 = add i64 %52, %51
  %54 = inttoptr i64 %53 to i32*
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = trunc i64 %43 to i32
  %57 = icmp eq i32 %55, %56
  br i1 %57, label %148, label %58

58:                                               ; preds = %23
  %59 = trunc i64 %45 to i32
  %60 = bitcast %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %6 to i1 (%"class.v8::internal::HashTableKey"*, i64)***
  br label %61

61:                                               ; preds = %72, %58
  %62 = phi i32 [ %55, %58 ], [ %82, %72 ]
  %63 = phi i32 [ %47, %58 ], [ %75, %72 ]
  %64 = phi i32 [ 1, %58 ], [ %73, %72 ]
  %65 = icmp eq i32 %62, %59
  br i1 %65, label %72, label %66

66:                                               ; preds = %61
  %67 = zext i32 %62 to i64
  %68 = or i64 %37, %67
  %69 = load i1 (%"class.v8::internal::HashTableKey"*, i64)**, i1 (%"class.v8::internal::HashTableKey"*, i64)*** %60, align 8
  %70 = load i1 (%"class.v8::internal::HashTableKey"*, i64)*, i1 (%"class.v8::internal::HashTableKey"*, i64)** %69, align 8
  %71 = call zeroext i1 %70(%"class.v8::internal::HashTableKey"* nonnull %35, i64 %68) #5
  br i1 %71, label %84, label %72

72:                                               ; preds = %66, %61
  %73 = add i32 %64, 1
  %74 = add i32 %64, %63
  %75 = and i32 %74, %46
  %76 = zext i32 %75 to i64
  %77 = mul i64 %76, 51539607552
  %78 = add i64 %77, 51539607552
  %79 = ashr exact i64 %78, 32
  %80 = add i64 %52, %79
  %81 = inttoptr i64 %80 to i32*
  %82 = load atomic i32, i32* %81 monotonic, align 4
  %83 = icmp eq i32 %82, %56
  br i1 %83, label %148, label %61

84:                                               ; preds = %66
  %85 = load i64, i64* %0, align 8
  %86 = and i64 %85, -4294967296
  %87 = mul i32 %63, 12
  %88 = add i32 %87, 12
  %89 = sext i32 %88 to i64
  %90 = add i64 %85, 7
  %91 = add i64 %90, %89
  %92 = inttoptr i64 %91 to i32*
  %93 = load atomic i32, i32* %92 monotonic, align 4
  %94 = zext i32 %93 to i64
  %95 = and i64 %94, 1
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %148, label %97

97:                                               ; preds = %84
  %98 = or i64 %86, %94
  %99 = add i64 %98, -1
  %100 = inttoptr i64 %99 to i32*
  %101 = load atomic i32, i32* %100 monotonic, align 4
  %102 = zext i32 %101 to i64
  %103 = or i64 %86, %102
  %104 = add i64 %103, 7
  %105 = inttoptr i64 %104 to i16*
  %106 = load atomic i16, i16* %105 monotonic, align 2
  %107 = add i16 %106, -119
  %108 = icmp ult i16 %107, 13
  br i1 %108, label %109, label %148

109:                                              ; preds = %97
  %110 = add i32 %87, 16
  %111 = sext i32 %110 to i64
  %112 = add i64 %90, %111
  %113 = inttoptr i64 %112 to i32*
  %114 = load atomic i32, i32* %113 monotonic, align 4
  %115 = zext i32 %114 to i64
  %116 = or i64 %86, %115
  %117 = and i64 %115, 1
  %118 = icmp eq i64 %117, 0
  br i1 %118, label %148, label %119

119:                                              ; preds = %109
  %120 = add i64 %116, -1
  %121 = inttoptr i64 %120 to i32*
  %122 = load atomic i32, i32* %121 monotonic, align 4
  %123 = zext i32 %122 to i64
  %124 = or i64 %86, %123
  %125 = add i64 %124, 7
  %126 = inttoptr i64 %125 to i16*
  %127 = load atomic i16, i16* %126 monotonic, align 2
  %128 = icmp eq i16 %127, 179
  br i1 %128, label %129, label %148

129:                                              ; preds = %119
  %130 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %3, i64 0, i32 31, i32 4
  %131 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %130, align 8
  %132 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %131, null
  br i1 %132, label %135, label %133

133:                                              ; preds = %129
  %134 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %131, i64 %116) #5
  br label %148

135:                                              ; preds = %129
  %136 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %3, i64 0, i32 31, i32 0
  %137 = load i64*, i64** %136, align 8
  %138 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %3, i64 0, i32 31, i32 1
  %139 = load i64*, i64** %138, align 8
  %140 = icmp eq i64* %137, %139
  br i1 %140, label %141, label %143

141:                                              ; preds = %135
  %142 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %3) #5
  br label %143

143:                                              ; preds = %141, %135
  %144 = phi i64* [ %142, %141 ], [ %137, %135 ]
  %145 = ptrtoint i64* %144 to i64
  %146 = add i64 %145, 8
  %147 = inttoptr i64 %146 to i64*
  store i64* %147, i64** %136, align 8
  store i64 %116, i64* %144, align 8
  br label %148

148:                                              ; preds = %72, %143, %133, %109, %84, %119, %97, %23
  %149 = phi i64* [ null, %23 ], [ null, %97 ], [ null, %119 ], [ null, %84 ], [ null, %109 ], [ %134, %133 ], [ %144, %143 ], [ null, %72 ]
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %8) #5
  ret i64* %149
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64* @_ZN2v88internal6String7FlattenEPNS0_7IsolateENS0_6HandleIS1_EENS0_14AllocationTypeE(%"class.v8::internal::Isolate"*, i64*, i8 zeroext) local_unnamed_addr #2 comdat align 2 {
  %4 = load i64, i64* %1, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, -1
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 monotonic, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = add i64 %10, 7
  %12 = inttoptr i64 %11 to i16*
  %13 = load atomic i16, i16* %12 monotonic, align 2
  %14 = icmp ult i16 %13, 64
  br i1 %14, label %15, label %72

15:                                               ; preds = %3
  %16 = load atomic i32, i32* %7 monotonic, align 4
  %17 = zext i32 %16 to i64
  %18 = or i64 %5, %17
  %19 = add i64 %18, 7
  %20 = inttoptr i64 %19 to i16*
  %21 = load atomic i16, i16* %20 monotonic, align 2
  %22 = and i16 %21, 7
  %23 = icmp eq i16 %22, 1
  br i1 %23, label %24, label %72

24:                                               ; preds = %15
  %25 = load atomic i32, i32* %7 acquire, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %5, %26
  %28 = add i64 %27, 7
  %29 = inttoptr i64 %28 to i16*
  %30 = load atomic i16, i16* %29 monotonic, align 2
  %31 = and i16 %30, 7
  %32 = icmp eq i16 %31, 1
  br i1 %32, label %33, label %43

33:                                               ; preds = %24
  %34 = add i64 %4, 15
  %35 = inttoptr i64 %34 to i32*
  %36 = load i32, i32* %35, align 4
  %37 = zext i32 %36 to i64
  %38 = or i64 %5, %37
  %39 = add i64 %38, 7
  %40 = inttoptr i64 %39 to i32*
  %41 = load i32, i32* %40, align 4
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %43, label %70

43:                                               ; preds = %24, %33
  %44 = load i64, i64* %1, align 8
  %45 = and i64 %44, -4294967296
  %46 = add i64 %44, 11
  %47 = inttoptr i64 %46 to i32*
  %48 = load i32, i32* %47, align 4
  %49 = zext i32 %48 to i64
  %50 = or i64 %45, %49
  %51 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %52 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %51, align 8
  %53 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %52, null
  br i1 %53, label %57, label %54

54:                                               ; preds = %43
  %55 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %52, i64 %50) #5
  %56 = load i64, i64* %55, align 8
  br label %72

57:                                               ; preds = %43
  %58 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %59 = load i64*, i64** %58, align 8
  %60 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %61 = load i64*, i64** %60, align 8
  %62 = icmp eq i64* %59, %61
  br i1 %62, label %63, label %65

63:                                               ; preds = %57
  %64 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #5
  br label %65

65:                                               ; preds = %63, %57
  %66 = phi i64* [ %64, %63 ], [ %59, %57 ]
  %67 = ptrtoint i64* %66 to i64
  %68 = add i64 %67, 8
  %69 = inttoptr i64 %68 to i64*
  store i64* %69, i64** %58, align 8
  store i64 %50, i64* %66, align 8
  br label %72

70:                                               ; preds = %33
  %71 = tail call i64* @_ZN2v88internal6String11SlowFlattenEPNS0_7IsolateENS0_6HandleINS0_10ConsStringEEENS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i64* %1, i8 zeroext %2) #5
  br label %118

72:                                               ; preds = %65, %54, %3, %15
  %73 = phi i64 [ %4, %15 ], [ %4, %3 ], [ %50, %65 ], [ %56, %54 ]
  %74 = phi i64* [ %1, %15 ], [ %1, %3 ], [ %66, %65 ], [ %55, %54 ]
  %75 = and i64 %73, -4294967296
  %76 = add i64 %73, -1
  %77 = inttoptr i64 %76 to i32*
  %78 = load atomic i32, i32* %77 monotonic, align 4
  %79 = zext i32 %78 to i64
  %80 = or i64 %75, %79
  %81 = add i64 %80, 7
  %82 = inttoptr i64 %81 to i16*
  %83 = load atomic i16, i16* %82 monotonic, align 2
  %84 = icmp ult i16 %83, 64
  br i1 %84, label %85, label %118

85:                                               ; preds = %72
  %86 = load atomic i32, i32* %77 monotonic, align 4
  %87 = zext i32 %86 to i64
  %88 = or i64 %75, %87
  %89 = add i64 %88, 7
  %90 = inttoptr i64 %89 to i16*
  %91 = load atomic i16, i16* %90 monotonic, align 2
  %92 = and i16 %91, 7
  %93 = icmp eq i16 %92, 5
  br i1 %93, label %94, label %118

94:                                               ; preds = %85
  %95 = add i64 %73, 11
  %96 = inttoptr i64 %95 to i32*
  %97 = load i32, i32* %96, align 4
  %98 = zext i32 %97 to i64
  %99 = or i64 %75, %98
  %100 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 4
  %101 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %100, align 8
  %102 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %101, null
  br i1 %102, label %105, label %103

103:                                              ; preds = %94
  %104 = tail call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %101, i64 %99) #5
  br label %118

105:                                              ; preds = %94
  %106 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 0
  %107 = load i64*, i64** %106, align 8
  %108 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %0, i64 0, i32 31, i32 1
  %109 = load i64*, i64** %108, align 8
  %110 = icmp eq i64* %107, %109
  br i1 %110, label %111, label %113

111:                                              ; preds = %105
  %112 = tail call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %0) #5
  br label %113

113:                                              ; preds = %111, %105
  %114 = phi i64* [ %112, %111 ], [ %107, %105 ]
  %115 = ptrtoint i64* %114 to i64
  %116 = add i64 %115, 8
  %117 = inttoptr i64 %116 to i64*
  store i64* %117, i64** %106, align 8
  store i64 %99, i64* %114, align 8
  br label %118

118:                                              ; preds = %72, %85, %103, %113, %70
  %119 = phi i64* [ %71, %70 ], [ %74, %85 ], [ %104, %103 ], [ %114, %113 ], [ %74, %72 ]
  ret i64* %119
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal12HashTableKeyD2Ev(%"class.v8::internal::HashTableKey"*) unnamed_addr #0 comdat align 2 {
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal21CompilationCacheTable10LookupEvalENS0_6HandleIS1_EENS2_INS0_6StringEEENS2_INS0_18SharedFunctionInfoEEENS2_INS0_7ContextEEENS0_12LanguageModeEi(%"class.v8::internal::InfoCellPair"* noalias nocapture sret, i64*, i64*, i64*, i64*, i1 zeroext, i32) local_unnamed_addr #0 align 2 {
  %8 = alloca { i64*, i8 }, align 8
  %9 = alloca %"class.v8::internal::InfoCellPair", align 8
  %10 = alloca %"class.v8::internal::(anonymous namespace)::StringSharedKey", align 8
  %11 = bitcast %"class.v8::internal::InfoCellPair"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %11)
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %11, i8 0, i64 9, i1 false)
  %12 = getelementptr inbounds %"class.v8::internal::InfoCellPair", %"class.v8::internal::InfoCellPair"* %9, i64 0, i32 1
  %13 = bitcast %"class.v8::internal::SharedFunctionInfo"* %12 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 16, i1 false)
  %14 = load i64, i64* %4, align 8
  %15 = and i64 %14, -262144
  %16 = or i64 %15, 16
  %17 = inttoptr i64 %16 to i64*
  %18 = load i64, i64* %17, align 16
  %19 = add i64 %18, -41416
  %20 = inttoptr i64 %19 to %"class.v8::internal::Isolate"*
  %21 = tail call i64* @_ZN2v88internal6String7FlattenEPNS0_7IsolateENS0_6HandleIS1_EENS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %20, i64* %2, i8 zeroext 0)
  %22 = bitcast %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %10 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %22) #5
  call fastcc void @_ZN2v88internal12_GLOBAL__N_115StringSharedKeyC2ENS0_6HandleINS0_6StringEEENS3_INS0_18SharedFunctionInfoEEENS0_12LanguageModeEi(%"class.v8::internal::(anonymous namespace)::StringSharedKey"* nonnull %10, i64* %21, i64* %3, i1 zeroext %5, i32 %6)
  %23 = load i64, i64* %1, align 8
  %24 = bitcast %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %10 to %"class.v8::internal::HashTableKey"*
  %25 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %20, i64 0, i32 0, i32 4
  %26 = load i64, i64* %25, align 8
  %27 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %10, i64 0, i32 0, i32 1
  %28 = load i32, i32* %27, align 8
  %29 = add i64 %23, 15
  %30 = inttoptr i64 %29 to i32*
  %31 = load atomic i32, i32* %30 monotonic, align 4
  %32 = ashr i32 %31, 1
  %33 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %20, i64 0, i32 0, i32 7, i32 0, i64 4
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %20, i64 0, i32 0, i32 7, i32 0, i64 5
  %36 = load i64, i64* %35, align 8
  %37 = add nsw i32 %32, -1
  %38 = and i32 %37, %28
  %39 = zext i32 %38 to i64
  %40 = mul i64 %39, 51539607552
  %41 = add i64 %40, 51539607552
  %42 = ashr exact i64 %41, 32
  %43 = add i64 %23, 7
  %44 = add i64 %43, %42
  %45 = inttoptr i64 %44 to i32*
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = trunc i64 %34 to i32
  %48 = icmp eq i32 %46, %47
  br i1 %48, label %75, label %49

49:                                               ; preds = %7
  %50 = trunc i64 %36 to i32
  %51 = bitcast %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %10 to i1 (%"class.v8::internal::HashTableKey"*, i64)***
  br label %52

52:                                               ; preds = %63, %49
  %53 = phi i32 [ %46, %49 ], [ %73, %63 ]
  %54 = phi i32 [ %38, %49 ], [ %66, %63 ]
  %55 = phi i32 [ 1, %49 ], [ %64, %63 ]
  %56 = icmp eq i32 %53, %50
  br i1 %56, label %63, label %57

57:                                               ; preds = %52
  %58 = zext i32 %53 to i64
  %59 = or i64 %26, %58
  %60 = load i1 (%"class.v8::internal::HashTableKey"*, i64)**, i1 (%"class.v8::internal::HashTableKey"*, i64)*** %51, align 8
  %61 = load i1 (%"class.v8::internal::HashTableKey"*, i64)*, i1 (%"class.v8::internal::HashTableKey"*, i64)** %60, align 8
  %62 = call zeroext i1 %61(%"class.v8::internal::HashTableKey"* nonnull %24, i64 %59) #5
  br i1 %62, label %77, label %63

63:                                               ; preds = %57, %52
  %64 = add i32 %55, 1
  %65 = add i32 %55, %54
  %66 = and i32 %65, %37
  %67 = zext i32 %66 to i64
  %68 = mul i64 %67, 51539607552
  %69 = add i64 %68, 51539607552
  %70 = ashr exact i64 %69, 32
  %71 = add i64 %43, %70
  %72 = inttoptr i64 %71 to i32*
  %73 = load atomic i32, i32* %72 monotonic, align 4
  %74 = icmp eq i32 %73, %47
  br i1 %74, label %75, label %52

75:                                               ; preds = %63, %7
  %76 = bitcast %"class.v8::internal::InfoCellPair"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %76, i8* nonnull align 8 %11, i64 32, i1 false)
  br label %206

77:                                               ; preds = %57
  %78 = load i64, i64* %1, align 8
  %79 = and i64 %78, -4294967296
  %80 = mul i32 %54, 12
  %81 = add i32 %80, 12
  %82 = sext i32 %81 to i64
  %83 = add i64 %78, 7
  %84 = add i64 %83, %82
  %85 = inttoptr i64 %84 to i32*
  %86 = load atomic i32, i32* %85 monotonic, align 4
  %87 = zext i32 %86 to i64
  %88 = and i64 %87, 1
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %102, label %90

90:                                               ; preds = %77
  %91 = or i64 %79, %87
  %92 = add i64 %91, -1
  %93 = inttoptr i64 %92 to i32*
  %94 = load atomic i32, i32* %93 monotonic, align 4
  %95 = zext i32 %94 to i64
  %96 = or i64 %79, %95
  %97 = add i64 %96, 7
  %98 = inttoptr i64 %97 to i16*
  %99 = load atomic i16, i16* %98 monotonic, align 2
  %100 = add i16 %99, -119
  %101 = icmp ult i16 %100, 13
  br i1 %101, label %104, label %102

102:                                              ; preds = %77, %90
  %103 = bitcast %"class.v8::internal::InfoCellPair"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %103, i8* nonnull align 8 %11, i64 32, i1 false)
  br label %206

104:                                              ; preds = %90
  %105 = add i32 %80, 16
  %106 = sext i32 %105 to i64
  %107 = add i64 %83, %106
  %108 = inttoptr i64 %107 to i32*
  %109 = load atomic i32, i32* %108 monotonic, align 4
  %110 = zext i32 %109 to i64
  %111 = or i64 %79, %110
  %112 = and i64 %110, 1
  %113 = icmp eq i64 %112, 0
  br i1 %113, label %124, label %114

114:                                              ; preds = %104
  %115 = add i64 %111, -1
  %116 = inttoptr i64 %115 to i32*
  %117 = load atomic i32, i32* %116 monotonic, align 4
  %118 = zext i32 %117 to i64
  %119 = or i64 %79, %118
  %120 = add i64 %119, 7
  %121 = inttoptr i64 %120 to i16*
  %122 = load atomic i16, i16* %121 monotonic, align 2
  %123 = icmp eq i16 %122, 179
  br i1 %123, label %126, label %124

124:                                              ; preds = %104, %114
  %125 = bitcast %"class.v8::internal::InfoCellPair"* %0 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %125, i8* nonnull align 8 %11, i64 32, i1 false)
  br label %206

126:                                              ; preds = %114
  %127 = load i64, i64* %4, align 8
  %128 = add i32 %80, 20
  %129 = sext i32 %128 to i64
  %130 = add i64 %83, %129
  %131 = inttoptr i64 %130 to i32*
  %132 = load atomic i32, i32* %131 monotonic, align 4
  %133 = zext i32 %132 to i64
  %134 = or i64 %79, %133
  %135 = and i64 %133, 1
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %189, label %137

137:                                              ; preds = %126
  %138 = add i64 %134, -1
  %139 = inttoptr i64 %138 to i32*
  %140 = load atomic i32, i32* %139 monotonic, align 4
  %141 = zext i32 %140 to i64
  %142 = or i64 %79, %141
  %143 = add i64 %142, 7
  %144 = inttoptr i64 %143 to i16*
  %145 = load atomic i16, i16* %144 monotonic, align 2
  %146 = add i16 %145, -159
  %147 = icmp ult i16 %146, 2
  br i1 %147, label %148, label %189

148:                                              ; preds = %137
  %149 = add i64 %134, 3
  %150 = inttoptr i64 %149 to i32*
  %151 = load i32, i32* %150, align 4
  %152 = icmp sgt i32 %151, 1
  br i1 %152, label %153, label %189

153:                                              ; preds = %148
  %154 = lshr i32 %151, 1
  %155 = trunc i64 %127 to i32
  %156 = or i32 %155, 2
  %157 = zext i32 %154 to i64
  br label %158

158:                                              ; preds = %168, %153
  %159 = phi i64 [ 0, %153 ], [ %169, %168 ]
  %160 = trunc i64 %159 to i32
  %161 = shl i32 %160, 2
  %162 = or i32 %161, 7
  %163 = sext i32 %162 to i64
  %164 = add i64 %134, %163
  %165 = inttoptr i64 %164 to i32*
  %166 = load atomic i32, i32* %165 monotonic, align 4
  %167 = icmp eq i32 %166, %156
  br i1 %167, label %171, label %168

168:                                              ; preds = %158
  %169 = add nuw nsw i64 %159, 2
  %170 = icmp ult i64 %169, %157
  br i1 %170, label %158, label %189

171:                                              ; preds = %158
  %172 = trunc i64 %159 to i32
  %173 = icmp sgt i32 %172, -1
  br i1 %173, label %174, label %189

174:                                              ; preds = %171
  %175 = load atomic i32, i32* %131 monotonic, align 4
  %176 = zext i32 %175 to i64
  %177 = or i64 %79, %176
  %178 = or i32 %161, 4
  %179 = sext i32 %178 to i64
  %180 = add nsw i64 %179, 7
  %181 = add i64 %180, %177
  %182 = inttoptr i64 %181 to i32*
  %183 = load atomic i32, i32* %182 monotonic, align 4
  %184 = icmp eq i32 %183, 3
  %185 = and i32 %183, -3
  %186 = zext i32 %185 to i64
  %187 = or i64 %79, %186
  %188 = select i1 %184, i64 0, i64 %187
  br label %189

189:                                              ; preds = %168, %126, %137, %148, %171, %174
  %190 = phi i64 [ %188, %174 ], [ 0, %171 ], [ 0, %148 ], [ 0, %137 ], [ 0, %126 ], [ 0, %168 ]
  %191 = icmp eq i32 %109, 0
  br i1 %191, label %201, label %192

192:                                              ; preds = %189
  %193 = bitcast { i64*, i8 }* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %193) #5
  %194 = bitcast { i64*, i8 }* %8 to %"class.v8::internal::IsCompiledScope"*
  call void @_ZN2v88internal15IsCompiledScopeC2ENS0_18SharedFunctionInfoEPNS0_7IsolateE(%"class.v8::internal::IsCompiledScope"* nonnull %194, i64 %111, %"class.v8::internal::Isolate"* %20) #5
  %195 = bitcast { i64*, i8 }* %8 to i64*
  %196 = load i64, i64* %195, align 8
  %197 = getelementptr inbounds { i64*, i8 }, { i64*, i8 }* %8, i64 0, i32 1
  %198 = load i8, i8* %197, align 8
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %193) #5
  %199 = bitcast %"class.v8::internal::InfoCellPair"* %0 to i64*
  store i64 %196, i64* %199, align 8
  %200 = getelementptr inbounds %"class.v8::internal::InfoCellPair", %"class.v8::internal::InfoCellPair"* %0, i64 0, i32 0, i32 1
  store i8 %198, i8* %200, align 8
  br label %203

201:                                              ; preds = %189
  %202 = bitcast %"class.v8::internal::InfoCellPair"* %0 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %202, i8 0, i64 9, i1 false) #5
  br label %203

203:                                              ; preds = %192, %201
  %204 = getelementptr inbounds %"class.v8::internal::InfoCellPair", %"class.v8::internal::InfoCellPair"* %0, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %111, i64* %204, align 8
  %205 = getelementptr inbounds %"class.v8::internal::InfoCellPair", %"class.v8::internal::InfoCellPair"* %0, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %190, i64* %205, align 8
  br label %206

206:                                              ; preds = %124, %203, %102, %75
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %22) #5
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %11)
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @_ZN2v88internal12_GLOBAL__N_115StringSharedKeyC2ENS0_6HandleINS0_6StringEEENS3_INS0_18SharedFunctionInfoEEENS0_12LanguageModeEi(%"class.v8::internal::(anonymous namespace)::StringSharedKey"* nocapture, i64*, i64*, i1 zeroext, i32) unnamed_addr #0 align 2 {
  %6 = alloca %"class.v8::internal::String", align 8
  %7 = alloca %"class.v8::internal::String", align 8
  %8 = alloca %"class.v8::internal::SharedFunctionInfo", align 8
  %9 = ptrtoint i64* %1 to i64
  %10 = zext i1 %3 to i8
  %11 = load i64, i64* %1, align 8
  %12 = load i64, i64* %2, align 8
  %13 = bitcast %"class.v8::internal::SharedFunctionInfo"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13)
  %14 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %12, i64* %14, align 8
  %15 = add i64 %11, 3
  %16 = inttoptr i64 %15 to i32*
  %17 = load i32, i32* %16, align 4
  %18 = and i32 %17, 1
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %20, label %22

20:                                               ; preds = %5
  %21 = lshr i32 %17, 2
  br label %26

22:                                               ; preds = %5
  %23 = bitcast %"class.v8::internal::String"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #5
  %24 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %11, i64* %24, align 8
  %25 = call i32 @_ZN2v88internal6String17ComputeAndSetHashEv(%"class.v8::internal::String"* nonnull %7) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #5
  br label %26

26:                                               ; preds = %22, %20
  %27 = phi i32 [ %21, %20 ], [ %25, %22 ]
  %28 = call zeroext i1 @_ZNK2v88internal18SharedFunctionInfo13HasSourceCodeEv(%"class.v8::internal::SharedFunctionInfo"* nonnull %8) #5
  br i1 %28, label %29, label %74

29:                                               ; preds = %26
  %30 = load i64, i64* %14, align 8
  %31 = and i64 %30, -4294967296
  %32 = add i64 %30, 15
  %33 = inttoptr i64 %32 to i32*
  %34 = load atomic i32, i32* %33 acquire, align 4
  %35 = zext i32 %34 to i64
  %36 = or i64 %31, %35
  %37 = add i64 %36, -1
  %38 = inttoptr i64 %37 to i32*
  %39 = load atomic i32, i32* %38 monotonic, align 4
  %40 = zext i32 %39 to i64
  %41 = or i64 %31, %40
  %42 = add i64 %41, 7
  %43 = inttoptr i64 %42 to i16*
  %44 = load atomic i16, i16* %43 monotonic, align 2
  %45 = icmp eq i16 %44, 100
  br i1 %45, label %46, label %52

46:                                               ; preds = %29
  %47 = add i64 %36, 11
  %48 = inttoptr i64 %47 to i32*
  %49 = load i32, i32* %48, align 4
  %50 = zext i32 %49 to i64
  %51 = or i64 %31, %50
  br label %52

52:                                               ; preds = %46, %29
  %53 = phi i64 [ %51, %46 ], [ %36, %29 ]
  %54 = and i64 %53, -4294967296
  %55 = add i64 %53, 3
  %56 = inttoptr i64 %55 to i32*
  %57 = load i32, i32* %56, align 4
  %58 = zext i32 %57 to i64
  %59 = or i64 %54, %58
  %60 = add i64 %59, 3
  %61 = inttoptr i64 %60 to i32*
  %62 = load i32, i32* %61, align 4
  %63 = and i32 %62, 1
  %64 = icmp eq i32 %63, 0
  br i1 %64, label %65, label %67

65:                                               ; preds = %52
  %66 = lshr i32 %62, 2
  br label %71

67:                                               ; preds = %52
  %68 = bitcast %"class.v8::internal::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %68) #5
  %69 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %59, i64* %69, align 8
  %70 = call i32 @_ZN2v88internal6String17ComputeAndSetHashEv(%"class.v8::internal::String"* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %68) #5
  br label %71

71:                                               ; preds = %67, %65
  %72 = phi i32 [ %66, %65 ], [ %70, %67 ]
  %73 = xor i32 %72, %27
  br label %74

74:                                               ; preds = %26, %71
  %75 = phi i32 [ %73, %71 ], [ %27, %26 ]
  %76 = xor i32 %75, 32768
  %77 = select i1 %3, i32 %76, i32 %75
  %78 = add i32 %77, %4
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13)
  %79 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %0, i64 0, i32 0, i32 0
  %80 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %0, i64 0, i32 0, i32 1
  store i32 %78, i32* %80, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2v88internal12_GLOBAL__N_115StringSharedKeyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %79, align 8
  %81 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %0, i64 0, i32 1
  %82 = bitcast %"class.v8::internal::Handle.0"* %81 to i64*
  store i64 %9, i64* %82, align 8
  %83 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %0, i64 0, i32 2, i32 0
  store i64* %2, i64** %83, align 8
  %84 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %0, i64 0, i32 3
  store i8 %10, i8* %84, align 8
  %85 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %0, i64 0, i32 4
  store i32 %4, i32* %85, align 4
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal21CompilationCacheTable12LookupRegExpENS0_6HandleINS0_6StringEEENS_4base5FlagsINS0_8JSRegExp4FlagEiEE(%"class.v8::internal::CompilationCacheTable"* nocapture readonly, i64*, i32) local_unnamed_addr #0 align 2 {
  %4 = alloca %"class.v8::internal::String", align 8
  %5 = alloca %"class.v8::internal::(anonymous namespace)::RegExpKey", align 8
  %6 = getelementptr inbounds %"class.v8::internal::CompilationCacheTable", %"class.v8::internal::CompilationCacheTable"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %7 = load i64, i64* %6, align 8
  %8 = and i64 %7, -262144
  %9 = or i64 %8, 16
  %10 = inttoptr i64 %9 to i64*
  %11 = load i64, i64* %10, align 16
  %12 = add i64 %11, -41416
  %13 = inttoptr i64 %12 to %"class.v8::internal::Isolate"*
  %14 = bitcast %"class.v8::internal::(anonymous namespace)::RegExpKey"* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %14) #5
  %15 = ptrtoint i64* %1 to i64
  %16 = load i64, i64* %1, align 8
  %17 = sext i32 %2 to i64
  %18 = shl nsw i64 %17, 1
  %19 = add i64 %16, 3
  %20 = inttoptr i64 %19 to i32*
  %21 = load i32, i32* %20, align 4
  %22 = and i32 %21, 1
  %23 = icmp eq i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %3
  %25 = lshr i32 %21, 2
  br label %31

26:                                               ; preds = %3
  %27 = bitcast %"class.v8::internal::String"* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #5
  %28 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %16, i64* %28, align 8
  %29 = call i32 @_ZN2v88internal6String17ComputeAndSetHashEv(%"class.v8::internal::String"* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #5
  %30 = load i64, i64* %6, align 8
  br label %31

31:                                               ; preds = %24, %26
  %32 = phi i64 [ %7, %24 ], [ %30, %26 ]
  %33 = phi i32 [ %25, %24 ], [ %29, %26 ]
  %34 = trunc i64 %18 to i32
  %35 = ashr exact i32 %34, 1
  %36 = add i32 %33, %35
  %37 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::RegExpKey", %"class.v8::internal::(anonymous namespace)::RegExpKey"* %5, i64 0, i32 0, i32 0
  %38 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::RegExpKey", %"class.v8::internal::(anonymous namespace)::RegExpKey"* %5, i64 0, i32 0, i32 1
  store i32 %36, i32* %38, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2v88internal12_GLOBAL__N_19RegExpKeyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %37, align 8
  %39 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::RegExpKey", %"class.v8::internal::(anonymous namespace)::RegExpKey"* %5, i64 0, i32 1
  %40 = bitcast %"class.v8::internal::Handle.0"* %39 to i64*
  store i64 %15, i64* %40, align 8
  %41 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::RegExpKey", %"class.v8::internal::(anonymous namespace)::RegExpKey"* %5, i64 0, i32 2, i32 0, i32 0, i32 0
  store i64 %18, i64* %41, align 8
  %42 = bitcast %"class.v8::internal::(anonymous namespace)::RegExpKey"* %5 to %"class.v8::internal::HashTableKey"*
  %43 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 0, i32 4
  %44 = load i64, i64* %43, align 8
  %45 = add i64 %32, 15
  %46 = inttoptr i64 %45 to i32*
  %47 = load atomic i32, i32* %46 monotonic, align 4
  %48 = ashr i32 %47, 1
  %49 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 0, i32 7, i32 0, i64 4
  %50 = load i64, i64* %49, align 8
  %51 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 0, i32 7, i32 0, i64 5
  %52 = load i64, i64* %51, align 8
  %53 = add nsw i32 %48, -1
  %54 = and i32 %53, %36
  %55 = zext i32 %54 to i64
  %56 = mul i64 %55, 51539607552
  %57 = add i64 %56, 51539607552
  %58 = ashr exact i64 %57, 32
  %59 = add i64 %32, 7
  %60 = add i64 %59, %58
  %61 = inttoptr i64 %60 to i32*
  %62 = load atomic i32, i32* %61 monotonic, align 4
  %63 = trunc i64 %50 to i32
  %64 = icmp eq i32 %62, %63
  br i1 %64, label %95, label %65

65:                                               ; preds = %31
  %66 = trunc i64 %52 to i32
  %67 = bitcast %"class.v8::internal::(anonymous namespace)::RegExpKey"* %5 to i1 (%"class.v8::internal::HashTableKey"*, i64)***
  br label %68

68:                                               ; preds = %81, %65
  %69 = phi i64 [ %32, %65 ], [ %82, %81 ]
  %70 = phi i32 [ %62, %65 ], [ %93, %81 ]
  %71 = phi i32 [ %54, %65 ], [ %85, %81 ]
  %72 = phi i32 [ 1, %65 ], [ %83, %81 ]
  %73 = icmp eq i32 %70, %66
  br i1 %73, label %81, label %74

74:                                               ; preds = %68
  %75 = zext i32 %70 to i64
  %76 = or i64 %44, %75
  %77 = load i1 (%"class.v8::internal::HashTableKey"*, i64)**, i1 (%"class.v8::internal::HashTableKey"*, i64)*** %67, align 8
  %78 = load i1 (%"class.v8::internal::HashTableKey"*, i64)*, i1 (%"class.v8::internal::HashTableKey"*, i64)** %77, align 8
  %79 = call zeroext i1 %78(%"class.v8::internal::HashTableKey"* nonnull %42, i64 %76) #5
  %80 = load i64, i64* %6, align 8
  br i1 %79, label %99, label %81

81:                                               ; preds = %74, %68
  %82 = phi i64 [ %69, %68 ], [ %80, %74 ]
  %83 = add i32 %72, 1
  %84 = add i32 %72, %71
  %85 = and i32 %84, %53
  %86 = zext i32 %85 to i64
  %87 = mul i64 %86, 51539607552
  %88 = add i64 %87, 51539607552
  %89 = ashr exact i64 %88, 32
  %90 = add nsw i64 %89, 7
  %91 = add i64 %90, %82
  %92 = inttoptr i64 %91 to i32*
  %93 = load atomic i32, i32* %92 monotonic, align 4
  %94 = icmp eq i32 %93, %63
  br i1 %94, label %95, label %68

95:                                               ; preds = %81, %31
  %96 = inttoptr i64 %12 to %"class.v8::internal::Factory"*
  %97 = getelementptr inbounds %"class.v8::internal::Factory", %"class.v8::internal::Factory"* %96, i64 160
  %98 = bitcast %"class.v8::internal::Factory"* %97 to i64*
  br label %128

99:                                               ; preds = %74
  %100 = and i64 %80, -4294967296
  %101 = mul i32 %71, 12
  %102 = add i32 %101, 16
  %103 = sext i32 %102 to i64
  %104 = add nsw i64 %103, 7
  %105 = add i64 %104, %80
  %106 = inttoptr i64 %105 to i32*
  %107 = load atomic i32, i32* %106 monotonic, align 4
  %108 = zext i32 %107 to i64
  %109 = or i64 %100, %108
  %110 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 31, i32 4
  %111 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %110, align 8
  %112 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %111, null
  br i1 %112, label %115, label %113

113:                                              ; preds = %99
  %114 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %111, i64 %109) #5
  br label %128

115:                                              ; preds = %99
  %116 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 31, i32 0
  %117 = load i64*, i64** %116, align 8
  %118 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %13, i64 0, i32 31, i32 1
  %119 = load i64*, i64** %118, align 8
  %120 = icmp eq i64* %117, %119
  br i1 %120, label %121, label %123

121:                                              ; preds = %115
  %122 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %13) #5
  br label %123

123:                                              ; preds = %121, %115
  %124 = phi i64* [ %122, %121 ], [ %117, %115 ]
  %125 = ptrtoint i64* %124 to i64
  %126 = add i64 %125, 8
  %127 = inttoptr i64 %126 to i64*
  store i64* %127, i64** %116, align 8
  store i64 %109, i64* %124, align 8
  br label %128

128:                                              ; preds = %123, %113, %95
  %129 = phi i64* [ %98, %95 ], [ %114, %113 ], [ %124, %123 ]
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %14) #5
  ret i64* %129
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal21CompilationCacheTable9PutScriptENS0_6HandleIS1_EENS2_INS0_6StringEEENS0_12LanguageModeENS2_INS0_18SharedFunctionInfoEEEPNS0_7IsolateE(i64*, i64*, i1 zeroext, i64*, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.v8::internal::String", align 8
  %7 = alloca %"class.v8::internal::(anonymous namespace)::StringSharedKey", align 8
  %8 = alloca %"class.v8::internal::Handle<v8::internal::CompilationCacheTable>::ObjectRef", align 8
  %9 = tail call i64* @_ZN2v88internal6String7FlattenEPNS0_7IsolateENS0_6HandleIS1_EENS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %4, i64* %1, i8 zeroext 0)
  %10 = bitcast %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %10) #5
  %11 = ptrtoint i64* %9 to i64
  %12 = zext i1 %2 to i8
  %13 = load i64, i64* %9, align 8
  %14 = add i64 %13, 3
  %15 = inttoptr i64 %14 to i32*
  %16 = load i32, i32* %15, align 4
  %17 = and i32 %16, 1
  %18 = icmp eq i32 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %5
  %20 = lshr i32 %16, 2
  br label %25

21:                                               ; preds = %5
  %22 = bitcast %"class.v8::internal::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %22) #5
  %23 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %13, i64* %23, align 8
  %24 = call i32 @_ZN2v88internal6String17ComputeAndSetHashEv(%"class.v8::internal::String"* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %22) #5
  br label %25

25:                                               ; preds = %19, %21
  %26 = phi i32 [ %20, %19 ], [ %24, %21 ]
  %27 = xor i32 %26, 32768
  %28 = select i1 %2, i32 %27, i32 %26
  %29 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %7, i64 0, i32 0, i32 0
  %30 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %7, i64 0, i32 0, i32 1
  store i32 %28, i32* %30, align 8
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [5 x i8*] }, { [5 x i8*] }* @_ZTVN2v88internal12_GLOBAL__N_115StringSharedKeyE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %29, align 8
  %31 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %7, i64 0, i32 1
  %32 = bitcast %"class.v8::internal::Handle.0"* %31 to i64*
  store i64 %11, i64* %32, align 8
  %33 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %7, i64 0, i32 2, i32 0
  store i64* null, i64** %33, align 8
  %34 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %7, i64 0, i32 3
  store i8 %12, i8* %34, align 8
  %35 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %7, i64 0, i32 4
  store i32 -1, i32* %35, align 4
  %36 = call fastcc i64* @_ZN2v88internal12_GLOBAL__N_115StringSharedKey8AsHandleEPNS0_7IsolateE(%"class.v8::internal::(anonymous namespace)::StringSharedKey"* nonnull %7, %"class.v8::internal::Isolate"* %4)
  %37 = call i64* @_ZN2v88internal9HashTableINS0_21CompilationCacheTableENS0_21CompilationCacheShapeEE14EnsureCapacityINS0_7IsolateEEENS0_6HandleIS2_EEPT_S8_iNS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %4, i64* %0, i32 1, i8 zeroext 0) #5
  %38 = bitcast %"class.v8::internal::Handle<v8::internal::CompilationCacheTable>::ObjectRef"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %38) #5
  %39 = load i64, i64* %37, align 8
  %40 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::CompilationCacheTable>::ObjectRef", %"class.v8::internal::Handle<v8::internal::CompilationCacheTable>::ObjectRef"* %8, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %39, i64* %40, align 8
  %41 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::CompilationCacheTable>::ObjectRef", %"class.v8::internal::Handle<v8::internal::CompilationCacheTable>::ObjectRef"* %8, i64 0, i32 0, i32 0
  %42 = call i64 @_ZN2v88internal9HashTableINS0_21CompilationCacheTableENS0_21CompilationCacheShapeEE18FindInsertionEntryEPNS0_7IsolateEj(%"class.v8::internal::HashTable"* nonnull %41, %"class.v8::internal::Isolate"* %4, i32 %28) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %38) #5
  %43 = load i64, i64* %37, align 8
  %44 = load i64, i64* %36, align 8
  %45 = mul i64 %42, 51539607552
  %46 = add i64 %45, 51539607552
  %47 = ashr exact i64 %46, 32
  %48 = add i64 %43, 7
  %49 = add i64 %48, %47
  %50 = inttoptr i64 %49 to i32*
  %51 = trunc i64 %44 to i32
  store atomic volatile i32 %51, i32* %50 monotonic, align 4
  %52 = and i64 %44, 1
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %77, label %54

54:                                               ; preds = %25
  %55 = and i64 %43, -262144
  %56 = or i64 %55, 8
  %57 = inttoptr i64 %56 to i64*
  %58 = load i64, i64* %57, align 8
  %59 = and i64 %58, 262144
  %60 = icmp eq i64 %59, 0
  br i1 %60, label %65, label %61

61:                                               ; preds = %54
  %62 = or i64 %55, 16
  %63 = inttoptr i64 %62 to %"class.v8::internal::Heap"**
  %64 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %63, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %64, i64 %43, i64 %49, i64 %44) #5
  br label %65

65:                                               ; preds = %61, %54
  %66 = and i64 %44, -262144
  %67 = or i64 %66, 8
  %68 = inttoptr i64 %67 to i64*
  %69 = load i64, i64* %68, align 8
  %70 = and i64 %69, 24
  %71 = icmp eq i64 %70, 0
  br i1 %71, label %77, label %72

72:                                               ; preds = %65
  %73 = load i64, i64* %57, align 8
  %74 = and i64 %73, 24
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %76, label %77

76:                                               ; preds = %72
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %43, i64 %49, i64 %44) #5
  br label %77

77:                                               ; preds = %25, %65, %72, %76
  %78 = load i64, i64* %37, align 8
  %79 = load i64, i64* %3, align 8
  %80 = add i64 %45, 68719476736
  %81 = ashr exact i64 %80, 32
  %82 = add nsw i64 %81, 7
  %83 = add i64 %82, %78
  %84 = inttoptr i64 %83 to i32*
  %85 = trunc i64 %79 to i32
  store atomic volatile i32 %85, i32* %84 monotonic, align 4
  %86 = and i64 %79, 1
  %87 = icmp eq i64 %86, 0
  br i1 %87, label %111, label %88

88:                                               ; preds = %77
  %89 = and i64 %78, -262144
  %90 = or i64 %89, 8
  %91 = inttoptr i64 %90 to i64*
  %92 = load i64, i64* %91, align 8
  %93 = and i64 %92, 262144
  %94 = icmp eq i64 %93, 0
  br i1 %94, label %99, label %95

95:                                               ; preds = %88
  %96 = or i64 %89, 16
  %97 = inttoptr i64 %96 to %"class.v8::internal::Heap"**
  %98 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %97, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %98, i64 %78, i64 %83, i64 %79) #5
  br label %99

99:                                               ; preds = %95, %88
  %100 = and i64 %79, -262144
  %101 = or i64 %100, 8
  %102 = inttoptr i64 %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = and i64 %103, 24
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %111, label %106

106:                                              ; preds = %99
  %107 = load i64, i64* %91, align 8
  %108 = and i64 %107, 24
  %109 = icmp eq i64 %108, 0
  br i1 %109, label %110, label %111

110:                                              ; preds = %106
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %78, i64 %83, i64 %79) #5
  br label %111

111:                                              ; preds = %77, %99, %106, %110
  %112 = load i64, i64* %37, align 8
  %113 = add i64 %112, 7
  %114 = inttoptr i64 %113 to i32*
  %115 = load atomic i32, i32* %114 monotonic, align 4
  %116 = add i32 %115, 2
  %117 = and i32 %116, -2
  store atomic volatile i32 %117, i32* %114 monotonic, align 4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %10) #5
  ret i64* %37
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc i64* @_ZN2v88internal12_GLOBAL__N_115StringSharedKey8AsHandleEPNS0_7IsolateE(%"class.v8::internal::(anonymous namespace)::StringSharedKey"* nocapture readonly, %"class.v8::internal::Isolate"*) unnamed_addr #0 align 2 {
  %3 = bitcast %"class.v8::internal::Isolate"* %1 to %"class.v8::internal::FactoryBase"*
  %4 = tail call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %3, i32 4, i8 zeroext 0) #5
  %5 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %0, i64 0, i32 2, i32 0
  %6 = load i64*, i64** %5, align 8
  %7 = icmp eq i64* %6, null
  %8 = load i64, i64* %4, align 8
  br i1 %7, label %39, label %9

9:                                                ; preds = %2
  %10 = load i64, i64* %6, align 8
  %11 = add i64 %8, 7
  %12 = inttoptr i64 %11 to i32*
  %13 = trunc i64 %10 to i32
  store atomic volatile i32 %13, i32* %12 monotonic, align 4
  %14 = and i64 %10, 1
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %42, label %16

16:                                               ; preds = %9
  %17 = and i64 %8, -262144
  %18 = or i64 %17, 8
  %19 = inttoptr i64 %18 to i64*
  %20 = load i64, i64* %19, align 8
  %21 = and i64 %20, 262144
  %22 = icmp eq i64 %21, 0
  br i1 %22, label %27, label %23

23:                                               ; preds = %16
  %24 = or i64 %17, 16
  %25 = inttoptr i64 %24 to %"class.v8::internal::Heap"**
  %26 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %25, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %26, i64 %8, i64 %11, i64 %10) #5
  br label %27

27:                                               ; preds = %23, %16
  %28 = and i64 %10, -262144
  %29 = or i64 %28, 8
  %30 = inttoptr i64 %29 to i64*
  %31 = load i64, i64* %30, align 8
  %32 = and i64 %31, 24
  %33 = icmp eq i64 %32, 0
  br i1 %33, label %42, label %34

34:                                               ; preds = %27
  %35 = load i64, i64* %19, align 8
  %36 = and i64 %35, 24
  %37 = icmp eq i64 %36, 0
  br i1 %37, label %38, label %42

38:                                               ; preds = %34
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %8, i64 %11, i64 %10) #5
  br label %42

39:                                               ; preds = %2
  %40 = add i64 %8, 7
  %41 = inttoptr i64 %40 to i32*
  store atomic volatile i32 0, i32* %41 monotonic, align 4
  br label %42

42:                                               ; preds = %38, %34, %27, %9, %39
  %43 = load i64, i64* %4, align 8
  %44 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %0, i64 0, i32 1, i32 0, i32 0
  %45 = load i64*, i64** %44, align 8
  %46 = load i64, i64* %45, align 8
  %47 = add i64 %43, 11
  %48 = inttoptr i64 %47 to i32*
  %49 = trunc i64 %46 to i32
  store atomic volatile i32 %49, i32* %48 monotonic, align 4
  %50 = and i64 %46, 1
  %51 = icmp eq i64 %50, 0
  br i1 %51, label %75, label %52

52:                                               ; preds = %42
  %53 = and i64 %43, -262144
  %54 = or i64 %53, 8
  %55 = inttoptr i64 %54 to i64*
  %56 = load i64, i64* %55, align 8
  %57 = and i64 %56, 262144
  %58 = icmp eq i64 %57, 0
  br i1 %58, label %63, label %59

59:                                               ; preds = %52
  %60 = or i64 %53, 16
  %61 = inttoptr i64 %60 to %"class.v8::internal::Heap"**
  %62 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %61, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %62, i64 %43, i64 %47, i64 %46) #5
  br label %63

63:                                               ; preds = %59, %52
  %64 = and i64 %46, -262144
  %65 = or i64 %64, 8
  %66 = inttoptr i64 %65 to i64*
  %67 = load i64, i64* %66, align 8
  %68 = and i64 %67, 24
  %69 = icmp eq i64 %68, 0
  br i1 %69, label %75, label %70

70:                                               ; preds = %63
  %71 = load i64, i64* %55, align 8
  %72 = and i64 %71, 24
  %73 = icmp eq i64 %72, 0
  br i1 %73, label %74, label %75

74:                                               ; preds = %70
  tail call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %43, i64 %47, i64 %46) #5
  br label %75

75:                                               ; preds = %42, %63, %70, %74
  %76 = load i64, i64* %4, align 8
  %77 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %0, i64 0, i32 3
  %78 = load i8, i8* %77, align 8, !range !2
  %79 = shl nuw nsw i8 %78, 1
  %80 = add i64 %76, 15
  %81 = inttoptr i64 %80 to i32*
  %82 = zext i8 %79 to i32
  store atomic volatile i32 %82, i32* %81 monotonic, align 4
  %83 = load i64, i64* %4, align 8
  %84 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %0, i64 0, i32 4
  %85 = load i32, i32* %84, align 4
  %86 = shl i32 %85, 1
  %87 = add i64 %83, 19
  %88 = inttoptr i64 %87 to i32*
  store atomic volatile i32 %86, i32* %88 monotonic, align 4
  %89 = load i64, i64* %4, align 8
  %90 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %1, i64 0, i32 0, i32 7, i32 0, i64 13
  %91 = load i64, i64* %90, align 8
  %92 = add i64 %89, -1
  %93 = inttoptr i64 %92 to i32*
  %94 = trunc i64 %91 to i32
  store atomic volatile i32 %94, i32* %93 monotonic, align 4
  %95 = icmp eq i32 %94, 0
  %96 = and i64 %91, 1
  %97 = icmp eq i64 %96, 0
  %98 = or i1 %95, %97
  br i1 %98, label %110, label %99

99:                                               ; preds = %75
  %100 = and i64 %89, -262144
  %101 = or i64 %100, 8
  %102 = inttoptr i64 %101 to i64*
  %103 = load i64, i64* %102, align 8
  %104 = and i64 %103, 262144
  %105 = icmp eq i64 %104, 0
  br i1 %105, label %110, label %106

106:                                              ; preds = %99
  %107 = or i64 %100, 16
  %108 = inttoptr i64 %107 to %"class.v8::internal::Heap"**
  %109 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %108, align 16
  tail call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %109, i64 %89, i64 0, i64 %91) #5
  br label %110

110:                                              ; preds = %75, %99, %106
  ret i64* %4
}

declare i64* @_ZN2v88internal9HashTableINS0_21CompilationCacheTableENS0_21CompilationCacheShapeEE14EnsureCapacityINS0_7IsolateEEENS0_6HandleIS2_EEPT_S8_iNS0_14AllocationTypeE(%"class.v8::internal::Isolate"*, i64*, i32, i8 zeroext) local_unnamed_addr #3

declare i64 @_ZN2v88internal9HashTableINS0_21CompilationCacheTableENS0_21CompilationCacheShapeEE18FindInsertionEntryEPNS0_7IsolateEj(%"class.v8::internal::HashTable"*, %"class.v8::internal::Isolate"*, i32) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal21CompilationCacheTable7PutEvalENS0_6HandleIS1_EENS2_INS0_6StringEEENS2_INS0_18SharedFunctionInfoEEES7_NS2_INS0_7ContextEEENS2_INS0_12FeedbackCellEEEi(i64*, i64*, i64*, i64*, i64*, i64* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %8 = alloca %"class.v8::internal::(anonymous namespace)::StringSharedKey", align 8
  %9 = alloca %"class.v8::internal::Handle<v8::internal::CompilationCacheTable>::ObjectRef", align 8
  %10 = load i64, i64* %4, align 8
  %11 = and i64 %10, -262144
  %12 = or i64 %11, 16
  %13 = inttoptr i64 %12 to i64*
  %14 = load i64, i64* %13, align 16
  %15 = add i64 %14, -41416
  %16 = inttoptr i64 %15 to %"class.v8::internal::Isolate"*
  %17 = tail call i64* @_ZN2v88internal6String7FlattenEPNS0_7IsolateENS0_6HandleIS1_EENS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %16, i64* %1, i8 zeroext 0)
  %18 = bitcast %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %8 to i8*
  call void @llvm.lifetime.start.p0i8(i64 40, i8* nonnull %18) #5
  %19 = load i64, i64* %3, align 8
  %20 = add i64 %19, 27
  %21 = inttoptr i64 %20 to i32*
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = and i32 %22, 64
  %24 = icmp ne i32 %23, 0
  call fastcc void @_ZN2v88internal12_GLOBAL__N_115StringSharedKeyC2ENS0_6HandleINS0_6StringEEENS3_INS0_18SharedFunctionInfoEEENS0_12LanguageModeEi(%"class.v8::internal::(anonymous namespace)::StringSharedKey"* nonnull %8, i64* %17, i64* %2, i1 zeroext %24, i32 %6)
  %25 = call fastcc i64* @_ZN2v88internal12_GLOBAL__N_115StringSharedKey8AsHandleEPNS0_7IsolateE(%"class.v8::internal::(anonymous namespace)::StringSharedKey"* nonnull %8, %"class.v8::internal::Isolate"* %16)
  %26 = load i64, i64* %0, align 8
  %27 = bitcast %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %8 to %"class.v8::internal::HashTableKey"*
  %28 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %16, i64 0, i32 0, i32 4
  %29 = load i64, i64* %28, align 8
  %30 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %8, i64 0, i32 0, i32 1
  %31 = load i32, i32* %30, align 8
  %32 = add i64 %26, 15
  %33 = inttoptr i64 %32 to i32*
  %34 = load atomic i32, i32* %33 monotonic, align 4
  %35 = ashr i32 %34, 1
  %36 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %16, i64 0, i32 0, i32 7, i32 0, i64 4
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %16, i64 0, i32 0, i32 7, i32 0, i64 5
  %39 = load i64, i64* %38, align 8
  %40 = add nsw i32 %35, -1
  %41 = and i32 %40, %31
  %42 = zext i32 %41 to i64
  %43 = mul i64 %42, 51539607552
  %44 = add i64 %43, 51539607552
  %45 = ashr exact i64 %44, 32
  %46 = add i64 %26, 7
  %47 = add i64 %46, %45
  %48 = inttoptr i64 %47 to i32*
  %49 = load atomic i32, i32* %48 monotonic, align 4
  %50 = trunc i64 %37 to i32
  %51 = icmp eq i32 %49, %50
  br i1 %51, label %444, label %52

52:                                               ; preds = %7
  %53 = trunc i64 %39 to i32
  %54 = bitcast %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %8 to i1 (%"class.v8::internal::HashTableKey"*, i64)***
  br label %55

55:                                               ; preds = %66, %52
  %56 = phi i32 [ %49, %52 ], [ %76, %66 ]
  %57 = phi i32 [ %41, %52 ], [ %69, %66 ]
  %58 = phi i32 [ 1, %52 ], [ %67, %66 ]
  %59 = icmp eq i32 %56, %53
  br i1 %59, label %66, label %60

60:                                               ; preds = %55
  %61 = zext i32 %56 to i64
  %62 = or i64 %29, %61
  %63 = load i1 (%"class.v8::internal::HashTableKey"*, i64)**, i1 (%"class.v8::internal::HashTableKey"*, i64)*** %54, align 8
  %64 = load i1 (%"class.v8::internal::HashTableKey"*, i64)*, i1 (%"class.v8::internal::HashTableKey"*, i64)** %63, align 8
  %65 = call zeroext i1 %64(%"class.v8::internal::HashTableKey"* nonnull %27, i64 %62) #5
  br i1 %65, label %78, label %66

66:                                               ; preds = %60, %55
  %67 = add i32 %58, 1
  %68 = add i32 %58, %57
  %69 = and i32 %68, %40
  %70 = zext i32 %69 to i64
  %71 = mul i64 %70, 51539607552
  %72 = add i64 %71, 51539607552
  %73 = ashr exact i64 %72, 32
  %74 = add i64 %46, %73
  %75 = inttoptr i64 %74 to i32*
  %76 = load atomic i32, i32* %75 monotonic, align 4
  %77 = icmp eq i32 %76, %50
  br i1 %77, label %444, label %55

78:                                               ; preds = %60
  %79 = load i64, i64* %0, align 8
  %80 = load i64, i64* %25, align 8
  %81 = mul i32 %57, 12
  %82 = add i32 %81, 12
  %83 = sext i32 %82 to i64
  %84 = add nsw i64 %83, 7
  %85 = add i64 %84, %79
  %86 = inttoptr i64 %85 to i32*
  %87 = trunc i64 %80 to i32
  store atomic volatile i32 %87, i32* %86 monotonic, align 4
  %88 = and i64 %80, 1
  %89 = icmp eq i64 %88, 0
  br i1 %89, label %113, label %90

90:                                               ; preds = %78
  %91 = and i64 %79, -262144
  %92 = or i64 %91, 8
  %93 = inttoptr i64 %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = and i64 %94, 262144
  %96 = icmp eq i64 %95, 0
  br i1 %96, label %101, label %97

97:                                               ; preds = %90
  %98 = or i64 %91, 16
  %99 = inttoptr i64 %98 to %"class.v8::internal::Heap"**
  %100 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %99, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %100, i64 %79, i64 %85, i64 %80) #5
  br label %101

101:                                              ; preds = %97, %90
  %102 = and i64 %80, -262144
  %103 = or i64 %102, 8
  %104 = inttoptr i64 %103 to i64*
  %105 = load i64, i64* %104, align 8
  %106 = and i64 %105, 24
  %107 = icmp eq i64 %106, 0
  br i1 %107, label %113, label %108

108:                                              ; preds = %101
  %109 = load i64, i64* %93, align 8
  %110 = and i64 %109, 24
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %112, label %113

112:                                              ; preds = %108
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %79, i64 %85, i64 %80) #5
  br label %113

113:                                              ; preds = %78, %101, %108, %112
  %114 = load i64, i64* %0, align 8
  %115 = load i64, i64* %3, align 8
  %116 = add i32 %81, 16
  %117 = sext i32 %116 to i64
  %118 = add nsw i64 %117, 7
  %119 = add i64 %118, %114
  %120 = inttoptr i64 %119 to i32*
  %121 = trunc i64 %115 to i32
  store atomic volatile i32 %121, i32* %120 monotonic, align 4
  %122 = and i64 %115, 1
  %123 = icmp eq i64 %122, 0
  br i1 %123, label %147, label %124

124:                                              ; preds = %113
  %125 = and i64 %114, -262144
  %126 = or i64 %125, 8
  %127 = inttoptr i64 %126 to i64*
  %128 = load i64, i64* %127, align 8
  %129 = and i64 %128, 262144
  %130 = icmp eq i64 %129, 0
  br i1 %130, label %135, label %131

131:                                              ; preds = %124
  %132 = or i64 %125, 16
  %133 = inttoptr i64 %132 to %"class.v8::internal::Heap"**
  %134 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %133, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %134, i64 %114, i64 %119, i64 %115) #5
  br label %135

135:                                              ; preds = %131, %124
  %136 = and i64 %115, -262144
  %137 = or i64 %136, 8
  %138 = inttoptr i64 %137 to i64*
  %139 = load i64, i64* %138, align 8
  %140 = and i64 %139, 24
  %141 = icmp eq i64 %140, 0
  br i1 %141, label %147, label %142

142:                                              ; preds = %135
  %143 = load i64, i64* %127, align 8
  %144 = and i64 %143, 24
  %145 = icmp eq i64 %144, 0
  br i1 %145, label %146, label %147

146:                                              ; preds = %142
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %114, i64 %119, i64 %115) #5
  br label %147

147:                                              ; preds = %113, %135, %142, %146
  %148 = load i64, i64* %4, align 8
  %149 = and i64 %148, -262144
  %150 = or i64 %149, 16
  %151 = inttoptr i64 %150 to i64*
  %152 = load i64, i64* %151, align 16
  %153 = add i64 %152, -41416
  %154 = inttoptr i64 %153 to %"class.v8::internal::Isolate"*
  %155 = load i64, i64* %0, align 8
  %156 = and i64 %155, -4294967296
  %157 = add i32 %81, 20
  %158 = sext i32 %157 to i64
  %159 = add nsw i64 %158, 7
  %160 = add i64 %155, %159
  %161 = inttoptr i64 %160 to i32*
  %162 = load atomic i32, i32* %161 monotonic, align 4
  %163 = zext i32 %162 to i64
  %164 = or i64 %156, %163
  %165 = and i64 %163, 1
  %166 = icmp eq i64 %165, 0
  br i1 %166, label %183, label %167

167:                                              ; preds = %147
  %168 = add i64 %164, -1
  %169 = inttoptr i64 %168 to i32*
  %170 = load atomic i32, i32* %169 monotonic, align 4
  %171 = zext i32 %170 to i64
  %172 = or i64 %156, %171
  %173 = add i64 %172, 7
  %174 = inttoptr i64 %173 to i16*
  %175 = load atomic i16, i16* %174 monotonic, align 2
  %176 = add i16 %175, -159
  %177 = icmp ult i16 %176, 2
  br i1 %177, label %178, label %183

178:                                              ; preds = %167
  %179 = add i64 %164, 3
  %180 = inttoptr i64 %179 to i32*
  %181 = load i32, i32* %180, align 4
  %182 = icmp ult i32 %181, 2
  br i1 %182, label %183, label %187

183:                                              ; preds = %178, %167, %147
  %184 = inttoptr i64 %153 to %"class.v8::internal::FactoryBase"*
  %185 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE17NewWeakFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"* %184, i32 2, i8 zeroext 1) #5
  %186 = ptrtoint i64* %185 to i64
  br label %331

187:                                              ; preds = %178
  %188 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %154, i64 0, i32 31, i32 4
  %189 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %188, align 8
  %190 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %189, null
  br i1 %190, label %194, label %191

191:                                              ; preds = %187
  %192 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %189, i64 %164) #5
  %193 = ptrtoint i64* %192 to i64
  br label %207

194:                                              ; preds = %187
  %195 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %154, i64 0, i32 31, i32 0
  %196 = load i64*, i64** %195, align 8
  %197 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %154, i64 0, i32 31, i32 1
  %198 = load i64*, i64** %197, align 8
  %199 = icmp eq i64* %196, %198
  br i1 %199, label %200, label %202

200:                                              ; preds = %194
  %201 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %154) #5
  br label %202

202:                                              ; preds = %200, %194
  %203 = phi i64* [ %201, %200 ], [ %196, %194 ]
  %204 = ptrtoint i64* %203 to i64
  %205 = add i64 %204, 8
  %206 = inttoptr i64 %205 to i64*
  store i64* %206, i64** %195, align 8
  store i64 %164, i64* %203, align 8
  br label %207

207:                                              ; preds = %202, %191
  %208 = phi i64 [ %193, %191 ], [ %204, %202 ]
  %209 = phi i64* [ %192, %191 ], [ %203, %202 ]
  %210 = load i64, i64* %0, align 8
  %211 = load i64, i64* %4, align 8
  %212 = and i64 %210, -4294967296
  %213 = add i64 %210, %159
  %214 = inttoptr i64 %213 to i32*
  %215 = load atomic i32, i32* %214 monotonic, align 4
  %216 = zext i32 %215 to i64
  %217 = or i64 %212, %216
  %218 = and i64 %216, 1
  %219 = icmp eq i64 %218, 0
  br i1 %219, label %295, label %220

220:                                              ; preds = %207
  %221 = add i64 %217, -1
  %222 = inttoptr i64 %221 to i32*
  %223 = load atomic i32, i32* %222 monotonic, align 4
  %224 = zext i32 %223 to i64
  %225 = or i64 %212, %224
  %226 = add i64 %225, 7
  %227 = inttoptr i64 %226 to i16*
  %228 = load atomic i16, i16* %227 monotonic, align 2
  %229 = add i16 %228, -159
  %230 = icmp ult i16 %229, 2
  br i1 %230, label %231, label %295

231:                                              ; preds = %220
  %232 = add i64 %217, 3
  %233 = inttoptr i64 %232 to i32*
  %234 = load i32, i32* %233, align 4
  %235 = icmp sgt i32 %234, 1
  br i1 %235, label %236, label %295

236:                                              ; preds = %231
  %237 = lshr i32 %234, 1
  %238 = trunc i64 %211 to i32
  %239 = or i32 %238, 2
  %240 = zext i32 %237 to i64
  br label %241

241:                                              ; preds = %251, %236
  %242 = phi i64 [ 0, %236 ], [ %252, %251 ]
  %243 = trunc i64 %242 to i32
  %244 = shl i32 %243, 2
  %245 = or i32 %244, 7
  %246 = sext i32 %245 to i64
  %247 = add i64 %217, %246
  %248 = inttoptr i64 %247 to i32*
  %249 = load atomic i32, i32* %248 monotonic, align 4
  %250 = icmp eq i32 %249, %239
  br i1 %250, label %254, label %251

251:                                              ; preds = %241
  %252 = add nuw nsw i64 %242, 2
  %253 = icmp ult i64 %252, %240
  br i1 %253, label %241, label %295

254:                                              ; preds = %241
  %255 = trunc i64 %242 to i32
  %256 = icmp sgt i32 %255, -1
  br i1 %256, label %257, label %295

257:                                              ; preds = %254
  %258 = load i64, i64* %209, align 8
  %259 = load i64, i64* %5, align 8
  %260 = or i32 %244, 4
  %261 = sext i32 %260 to i64
  %262 = add nsw i64 %261, 7
  %263 = add i64 %262, %258
  %264 = inttoptr i64 %263 to i32*
  %265 = trunc i64 %259 to i32
  %266 = or i32 %265, 2
  store atomic volatile i32 %266, i32* %264 monotonic, align 4
  %267 = and i64 %259, 1
  %268 = icmp ne i64 %267, 0
  %269 = icmp ne i32 %266, 3
  %270 = and i1 %268, %269
  br i1 %270, label %271, label %444

271:                                              ; preds = %257
  %272 = and i64 %258, -262144
  %273 = or i64 %272, 8
  %274 = inttoptr i64 %273 to i64*
  %275 = load i64, i64* %274, align 8
  %276 = and i64 %275, 262144
  %277 = icmp eq i64 %276, 0
  %278 = and i64 %259, -3
  br i1 %277, label %283, label %279

279:                                              ; preds = %271
  %280 = or i64 %272, 16
  %281 = inttoptr i64 %280 to %"class.v8::internal::Heap"**
  %282 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %281, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %282, i64 %258, i64 %263, i64 %278) #5
  br label %283

283:                                              ; preds = %271, %279
  %284 = and i64 %259, -262144
  %285 = or i64 %284, 8
  %286 = inttoptr i64 %285 to i64*
  %287 = load i64, i64* %286, align 8
  %288 = and i64 %287, 24
  %289 = icmp eq i64 %288, 0
  br i1 %289, label %444, label %290

290:                                              ; preds = %283
  %291 = load i64, i64* %274, align 8
  %292 = and i64 %291, 24
  %293 = icmp eq i64 %292, 0
  br i1 %293, label %294, label %444

294:                                              ; preds = %290
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %258, i64 %263, i64 %278) #5
  br label %444

295:                                              ; preds = %251, %254, %231, %220, %207
  %296 = phi i32 [ %255, %254 ], [ -1, %220 ], [ -1, %207 ], [ -1, %231 ], [ -1, %251 ]
  %297 = load i64, i64* %209, align 8
  %298 = add i64 %297, 3
  %299 = inttoptr i64 %298 to i32*
  %300 = load i32, i32* %299, align 4
  %301 = icmp sgt i32 %300, 1
  br i1 %301, label %302, label %320

302:                                              ; preds = %295
  %303 = lshr i32 %300, 1
  %304 = zext i32 %303 to i64
  br label %305

305:                                              ; preds = %315, %302
  %306 = phi i64 [ 0, %302 ], [ %316, %315 ]
  %307 = trunc i64 %306 to i32
  %308 = shl i32 %307, 2
  %309 = or i32 %308, 7
  %310 = sext i32 %309 to i64
  %311 = add i64 %297, %310
  %312 = inttoptr i64 %311 to i32*
  %313 = load atomic i32, i32* %312 monotonic, align 4
  %314 = icmp eq i32 %313, 3
  br i1 %314, label %329, label %315

315:                                              ; preds = %305
  %316 = add nuw nsw i64 %306, 2
  %317 = icmp ult i64 %316, %304
  br i1 %317, label %305, label %318

318:                                              ; preds = %315
  %319 = icmp slt i32 %296, 0
  br i1 %319, label %320, label %331

320:                                              ; preds = %318, %295
  %321 = inttoptr i64 %153 to %"class.v8::internal::Factory"*
  %322 = call i64* @_ZN2v88internal7Factory25CopyWeakFixedArrayAndGrowENS0_6HandleINS0_14WeakFixedArrayEEEi(%"class.v8::internal::Factory"* %321, i64* %209, i32 2) #5
  %323 = ptrtoint i64* %322 to i64
  %324 = load i64, i64* %209, align 8
  %325 = add i64 %324, 3
  %326 = inttoptr i64 %325 to i32*
  %327 = load i32, i32* %326, align 4
  %328 = ashr i32 %327, 1
  br label %331

329:                                              ; preds = %305
  %330 = trunc i64 %306 to i32
  br label %331

331:                                              ; preds = %329, %320, %318, %183
  %332 = phi i64 [ %186, %183 ], [ %323, %320 ], [ 0, %318 ], [ %208, %329 ]
  %333 = phi i32 [ 0, %183 ], [ %328, %320 ], [ %296, %318 ], [ %330, %329 ]
  %334 = inttoptr i64 %332 to i64*
  %335 = load i64, i64* %334, align 8
  %336 = load i64, i64* %4, align 8
  %337 = shl i32 %333, 2
  %338 = sext i32 %337 to i64
  %339 = add i64 %335, 7
  %340 = add i64 %339, %338
  %341 = inttoptr i64 %340 to i32*
  %342 = trunc i64 %336 to i32
  %343 = or i32 %342, 2
  store atomic volatile i32 %343, i32* %341 monotonic, align 4
  %344 = and i64 %336, 1
  %345 = icmp ne i64 %344, 0
  %346 = icmp ne i32 %343, 3
  %347 = and i1 %345, %346
  br i1 %347, label %348, label %372

348:                                              ; preds = %331
  %349 = and i64 %335, -262144
  %350 = or i64 %349, 8
  %351 = inttoptr i64 %350 to i64*
  %352 = load i64, i64* %351, align 8
  %353 = and i64 %352, 262144
  %354 = icmp eq i64 %353, 0
  %355 = and i64 %336, -3
  br i1 %354, label %360, label %356

356:                                              ; preds = %348
  %357 = or i64 %349, 16
  %358 = inttoptr i64 %357 to %"class.v8::internal::Heap"**
  %359 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %358, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %359, i64 %335, i64 %340, i64 %355) #5
  br label %360

360:                                              ; preds = %348, %356
  %361 = and i64 %336, -262144
  %362 = or i64 %361, 8
  %363 = inttoptr i64 %362 to i64*
  %364 = load i64, i64* %363, align 8
  %365 = and i64 %364, 24
  %366 = icmp eq i64 %365, 0
  br i1 %366, label %372, label %367

367:                                              ; preds = %360
  %368 = load i64, i64* %351, align 8
  %369 = and i64 %368, 24
  %370 = icmp eq i64 %369, 0
  br i1 %370, label %371, label %372

371:                                              ; preds = %367
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %335, i64 %340, i64 %355) #5
  br label %372

372:                                              ; preds = %371, %367, %360, %331
  %373 = load i64, i64* %334, align 8
  %374 = load i64, i64* %5, align 8
  %375 = add i32 %337, 4
  %376 = sext i32 %375 to i64
  %377 = add nsw i64 %376, 7
  %378 = add i64 %377, %373
  %379 = inttoptr i64 %378 to i32*
  %380 = trunc i64 %374 to i32
  %381 = or i32 %380, 2
  store atomic volatile i32 %381, i32* %379 monotonic, align 4
  %382 = and i64 %374, 1
  %383 = icmp ne i64 %382, 0
  %384 = icmp ne i32 %381, 3
  %385 = and i1 %383, %384
  br i1 %385, label %386, label %410

386:                                              ; preds = %372
  %387 = and i64 %373, -262144
  %388 = or i64 %387, 8
  %389 = inttoptr i64 %388 to i64*
  %390 = load i64, i64* %389, align 8
  %391 = and i64 %390, 262144
  %392 = icmp eq i64 %391, 0
  %393 = and i64 %374, -3
  br i1 %392, label %398, label %394

394:                                              ; preds = %386
  %395 = or i64 %387, 16
  %396 = inttoptr i64 %395 to %"class.v8::internal::Heap"**
  %397 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %396, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %397, i64 %373, i64 %378, i64 %393) #5
  br label %398

398:                                              ; preds = %386, %394
  %399 = and i64 %374, -262144
  %400 = or i64 %399, 8
  %401 = inttoptr i64 %400 to i64*
  %402 = load i64, i64* %401, align 8
  %403 = and i64 %402, 24
  %404 = icmp eq i64 %403, 0
  br i1 %404, label %410, label %405

405:                                              ; preds = %398
  %406 = load i64, i64* %389, align 8
  %407 = and i64 %406, 24
  %408 = icmp eq i64 %407, 0
  br i1 %408, label %409, label %410

409:                                              ; preds = %405
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %373, i64 %378, i64 %393) #5
  br label %410

410:                                              ; preds = %409, %405, %398, %372
  %411 = load i64, i64* %0, align 8
  %412 = add i64 %411, %159
  %413 = inttoptr i64 %412 to i32*
  %414 = load atomic i32, i32* %413 monotonic, align 4
  %415 = load i64, i64* %334, align 8
  %416 = trunc i64 %415 to i32
  %417 = icmp eq i32 %414, %416
  br i1 %417, label %444, label %418

418:                                              ; preds = %410
  store atomic volatile i32 %416, i32* %413 monotonic, align 4
  %419 = and i64 %415, 1
  %420 = icmp eq i64 %419, 0
  br i1 %420, label %444, label %421

421:                                              ; preds = %418
  %422 = and i64 %411, -262144
  %423 = or i64 %422, 8
  %424 = inttoptr i64 %423 to i64*
  %425 = load i64, i64* %424, align 8
  %426 = and i64 %425, 262144
  %427 = icmp eq i64 %426, 0
  br i1 %427, label %432, label %428

428:                                              ; preds = %421
  %429 = or i64 %422, 16
  %430 = inttoptr i64 %429 to %"class.v8::internal::Heap"**
  %431 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %430, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %431, i64 %411, i64 %412, i64 %415) #5
  br label %432

432:                                              ; preds = %428, %421
  %433 = and i64 %415, -262144
  %434 = or i64 %433, 8
  %435 = inttoptr i64 %434 to i64*
  %436 = load i64, i64* %435, align 8
  %437 = and i64 %436, 24
  %438 = icmp eq i64 %437, 0
  br i1 %438, label %444, label %439

439:                                              ; preds = %432
  %440 = load i64, i64* %424, align 8
  %441 = and i64 %440, 24
  %442 = icmp eq i64 %441, 0
  br i1 %442, label %443, label %444

443:                                              ; preds = %439
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %411, i64 %412, i64 %415) #5
  br label %444

444:                                              ; preds = %66, %7, %443, %439, %432, %418, %410, %294, %290, %283, %257
  %445 = call i64* @_ZN2v88internal9HashTableINS0_21CompilationCacheTableENS0_21CompilationCacheShapeEE14EnsureCapacityINS0_7IsolateEEENS0_6HandleIS2_EEPT_S8_iNS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %16, i64* %0, i32 1, i8 zeroext 0) #5
  %446 = bitcast %"class.v8::internal::Handle<v8::internal::CompilationCacheTable>::ObjectRef"* %9 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %446) #5
  %447 = load i64, i64* %445, align 8
  %448 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::CompilationCacheTable>::ObjectRef", %"class.v8::internal::Handle<v8::internal::CompilationCacheTable>::ObjectRef"* %9, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %447, i64* %448, align 8
  %449 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::CompilationCacheTable>::ObjectRef", %"class.v8::internal::Handle<v8::internal::CompilationCacheTable>::ObjectRef"* %9, i64 0, i32 0, i32 0
  %450 = load i32, i32* %30, align 8
  %451 = call i64 @_ZN2v88internal9HashTableINS0_21CompilationCacheTableENS0_21CompilationCacheShapeEE18FindInsertionEntryEPNS0_7IsolateEj(%"class.v8::internal::HashTable"* nonnull %449, %"class.v8::internal::Isolate"* %16, i32 %450) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %446) #5
  %452 = inttoptr i64 %15 to %"class.v8::internal::FactoryBase"*
  %453 = load i32, i32* %30, align 8
  %454 = uitofp i32 %453 to double
  %455 = icmp ult i32 %453, 1073741824
  %456 = bitcast double %454 to i64
  %457 = icmp ne i64 %456, -9223372036854775808
  %458 = and i1 %457, %455
  %459 = sitofp i32 %453 to double
  %460 = fcmp oeq double %459, %454
  %461 = and i1 %460, %458
  br i1 %461, label %462, label %486

462:                                              ; preds = %444
  %463 = sext i32 %453 to i64
  %464 = shl nsw i64 %463, 1
  %465 = getelementptr inbounds %"class.v8::internal::FactoryBase", %"class.v8::internal::FactoryBase"* %452, i64 45608
  %466 = bitcast %"class.v8::internal::FactoryBase"* %465 to %"class.v8::internal::CanonicalHandleScope"**
  %467 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %466, align 8
  %468 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %467, null
  br i1 %468, label %471, label %469

469:                                              ; preds = %462
  %470 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %467, i64 %464) #5
  br label %491

471:                                              ; preds = %462
  %472 = getelementptr inbounds %"class.v8::internal::FactoryBase", %"class.v8::internal::FactoryBase"* %452, i64 45584
  %473 = bitcast %"class.v8::internal::FactoryBase"* %472 to i64**
  %474 = load i64*, i64** %473, align 8
  %475 = getelementptr inbounds %"class.v8::internal::FactoryBase", %"class.v8::internal::FactoryBase"* %452, i64 45592
  %476 = bitcast %"class.v8::internal::FactoryBase"* %475 to i64**
  %477 = load i64*, i64** %476, align 8
  %478 = icmp eq i64* %474, %477
  br i1 %478, label %479, label %481

479:                                              ; preds = %471
  %480 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %16) #5
  br label %481

481:                                              ; preds = %479, %471
  %482 = phi i64* [ %480, %479 ], [ %474, %471 ]
  %483 = ptrtoint i64* %482 to i64
  %484 = add i64 %483, 8
  %485 = inttoptr i64 %484 to i64*
  store i64* %485, i64** %473, align 8
  store i64 %464, i64* %482, align 8
  br label %491

486:                                              ; preds = %444
  %487 = call i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewHeapNumberILNS0_14AllocationTypeE0EEENS0_6HandleINS0_10HeapNumberEEEv(%"class.v8::internal::FactoryBase"* %452) #5
  %488 = load i64, i64* %487, align 8
  %489 = add i64 %488, 3
  %490 = inttoptr i64 %489 to double*
  store double %454, double* %490, align 1
  br label %491

491:                                              ; preds = %469, %481, %486
  %492 = phi i64* [ %487, %486 ], [ %470, %469 ], [ %482, %481 ]
  %493 = load i64, i64* %445, align 8
  %494 = load i64, i64* %492, align 8
  %495 = mul i64 %451, 51539607552
  %496 = add i64 %495, 51539607552
  %497 = ashr exact i64 %496, 32
  %498 = add nsw i64 %497, 7
  %499 = add i64 %498, %493
  %500 = inttoptr i64 %499 to i32*
  %501 = trunc i64 %494 to i32
  store atomic volatile i32 %501, i32* %500 monotonic, align 4
  %502 = and i64 %494, 1
  %503 = icmp eq i64 %502, 0
  br i1 %503, label %527, label %504

504:                                              ; preds = %491
  %505 = and i64 %493, -262144
  %506 = or i64 %505, 8
  %507 = inttoptr i64 %506 to i64*
  %508 = load i64, i64* %507, align 8
  %509 = and i64 %508, 262144
  %510 = icmp eq i64 %509, 0
  br i1 %510, label %515, label %511

511:                                              ; preds = %504
  %512 = or i64 %505, 16
  %513 = inttoptr i64 %512 to %"class.v8::internal::Heap"**
  %514 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %513, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %514, i64 %493, i64 %499, i64 %494) #5
  br label %515

515:                                              ; preds = %511, %504
  %516 = and i64 %494, -262144
  %517 = or i64 %516, 8
  %518 = inttoptr i64 %517 to i64*
  %519 = load i64, i64* %518, align 8
  %520 = and i64 %519, 24
  %521 = icmp eq i64 %520, 0
  br i1 %521, label %527, label %522

522:                                              ; preds = %515
  %523 = load i64, i64* %507, align 8
  %524 = and i64 %523, 24
  %525 = icmp eq i64 %524, 0
  br i1 %525, label %526, label %527

526:                                              ; preds = %522
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %493, i64 %499, i64 %494) #5
  br label %527

527:                                              ; preds = %491, %515, %522, %526
  %528 = load i64, i64* %445, align 8
  %529 = add i64 %495, 68719476736
  %530 = ashr exact i64 %529, 32
  %531 = add nsw i64 %530, 7
  %532 = add i64 %531, %528
  %533 = inttoptr i64 %532 to i32*
  store atomic volatile i32 20, i32* %533 monotonic, align 4
  %534 = load i64, i64* %445, align 8
  %535 = add i64 %534, 7
  %536 = inttoptr i64 %535 to i32*
  %537 = load atomic i32, i32* %536 monotonic, align 4
  %538 = add i32 %537, 2
  %539 = and i32 %538, -2
  store atomic volatile i32 %539, i32* %536 monotonic, align 4
  call void @llvm.lifetime.end.p0i8(i64 40, i8* nonnull %18) #5
  ret i64* %445
}

; Function Attrs: nounwind ssp uwtable
define hidden i64* @_ZN2v88internal21CompilationCacheTable9PutRegExpEPNS0_7IsolateENS0_6HandleIS1_EENS4_INS0_6StringEEENS_4base5FlagsINS0_8JSRegExp4FlagEiEENS4_INS0_10FixedArrayEEE(%"class.v8::internal::Isolate"*, i64*, i64*, i32, i64*) local_unnamed_addr #0 align 2 {
  %6 = alloca %"class.v8::internal::String", align 8
  %7 = alloca %"class.v8::internal::Handle<v8::internal::CompilationCacheTable>::ObjectRef", align 8
  %8 = load i64, i64* %2, align 8
  %9 = shl i32 %3, 1
  %10 = add i64 %8, 3
  %11 = inttoptr i64 %10 to i32*
  %12 = load i32, i32* %11, align 4
  %13 = and i32 %12, 1
  %14 = icmp eq i32 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %5
  %16 = lshr i32 %12, 2
  br label %21

17:                                               ; preds = %5
  %18 = bitcast %"class.v8::internal::String"* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %18) #5
  %19 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %6, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %8, i64* %19, align 8
  %20 = call i32 @_ZN2v88internal6String17ComputeAndSetHashEv(%"class.v8::internal::String"* nonnull %6) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %18) #5
  br label %21

21:                                               ; preds = %15, %17
  %22 = phi i32 [ %16, %15 ], [ %20, %17 ]
  %23 = ashr exact i32 %9, 1
  %24 = add i32 %22, %23
  %25 = call i64* @_ZN2v88internal9HashTableINS0_21CompilationCacheTableENS0_21CompilationCacheShapeEE14EnsureCapacityINS0_7IsolateEEENS0_6HandleIS2_EEPT_S8_iNS0_14AllocationTypeE(%"class.v8::internal::Isolate"* %0, i64* %1, i32 1, i8 zeroext 0) #5
  %26 = bitcast %"class.v8::internal::Handle<v8::internal::CompilationCacheTable>::ObjectRef"* %7 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #5
  %27 = load i64, i64* %25, align 8
  %28 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::CompilationCacheTable>::ObjectRef", %"class.v8::internal::Handle<v8::internal::CompilationCacheTable>::ObjectRef"* %7, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %27, i64* %28, align 8
  %29 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::CompilationCacheTable>::ObjectRef", %"class.v8::internal::Handle<v8::internal::CompilationCacheTable>::ObjectRef"* %7, i64 0, i32 0, i32 0
  %30 = call i64 @_ZN2v88internal9HashTableINS0_21CompilationCacheTableENS0_21CompilationCacheShapeEE18FindInsertionEntryEPNS0_7IsolateEj(%"class.v8::internal::HashTable"* nonnull %29, %"class.v8::internal::Isolate"* %0, i32 %24) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #5
  %31 = load i64, i64* %25, align 8
  %32 = load i64, i64* %4, align 8
  %33 = mul i64 %30, 51539607552
  %34 = add i64 %33, 51539607552
  %35 = ashr exact i64 %34, 32
  %36 = add i64 %31, 7
  %37 = add i64 %36, %35
  %38 = inttoptr i64 %37 to i32*
  %39 = trunc i64 %32 to i32
  store atomic volatile i32 %39, i32* %38 monotonic, align 4
  %40 = and i64 %32, 1
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %65, label %42

42:                                               ; preds = %21
  %43 = and i64 %31, -262144
  %44 = or i64 %43, 8
  %45 = inttoptr i64 %44 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = and i64 %46, 262144
  %48 = icmp eq i64 %47, 0
  br i1 %48, label %53, label %49

49:                                               ; preds = %42
  %50 = or i64 %43, 16
  %51 = inttoptr i64 %50 to %"class.v8::internal::Heap"**
  %52 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %51, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %52, i64 %31, i64 %37, i64 %32) #5
  br label %53

53:                                               ; preds = %49, %42
  %54 = and i64 %32, -262144
  %55 = or i64 %54, 8
  %56 = inttoptr i64 %55 to i64*
  %57 = load i64, i64* %56, align 8
  %58 = and i64 %57, 24
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %65, label %60

60:                                               ; preds = %53
  %61 = load i64, i64* %45, align 8
  %62 = and i64 %61, 24
  %63 = icmp eq i64 %62, 0
  br i1 %63, label %64, label %65

64:                                               ; preds = %60
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %31, i64 %37, i64 %32) #5
  br label %65

65:                                               ; preds = %21, %53, %60, %64
  %66 = load i64, i64* %25, align 8
  %67 = load i64, i64* %4, align 8
  %68 = add i64 %33, 68719476736
  %69 = ashr exact i64 %68, 32
  %70 = add nsw i64 %69, 7
  %71 = add i64 %70, %66
  %72 = inttoptr i64 %71 to i32*
  %73 = trunc i64 %67 to i32
  store atomic volatile i32 %73, i32* %72 monotonic, align 4
  %74 = and i64 %67, 1
  %75 = icmp eq i64 %74, 0
  br i1 %75, label %99, label %76

76:                                               ; preds = %65
  %77 = and i64 %66, -262144
  %78 = or i64 %77, 8
  %79 = inttoptr i64 %78 to i64*
  %80 = load i64, i64* %79, align 8
  %81 = and i64 %80, 262144
  %82 = icmp eq i64 %81, 0
  br i1 %82, label %87, label %83

83:                                               ; preds = %76
  %84 = or i64 %77, 16
  %85 = inttoptr i64 %84 to %"class.v8::internal::Heap"**
  %86 = load %"class.v8::internal::Heap"*, %"class.v8::internal::Heap"** %85, align 16
  call void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"* %86, i64 %66, i64 %71, i64 %67) #5
  br label %87

87:                                               ; preds = %83, %76
  %88 = and i64 %67, -262144
  %89 = or i64 %88, 8
  %90 = inttoptr i64 %89 to i64*
  %91 = load i64, i64* %90, align 8
  %92 = and i64 %91, 24
  %93 = icmp eq i64 %92, 0
  br i1 %93, label %99, label %94

94:                                               ; preds = %87
  %95 = load i64, i64* %79, align 8
  %96 = and i64 %95, 24
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %98, label %99

98:                                               ; preds = %94
  call void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64 %66, i64 %71, i64 %67) #5
  br label %99

99:                                               ; preds = %65, %87, %94, %98
  %100 = load i64, i64* %25, align 8
  %101 = add i64 %100, 7
  %102 = inttoptr i64 %101 to i32*
  %103 = load atomic i32, i32* %102 monotonic, align 4
  %104 = add i32 %103, 2
  %105 = and i32 %104, -2
  store atomic volatile i32 %105, i32* %102 monotonic, align 4
  ret i64* %25
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal21CompilationCacheTable3AgeEPNS0_7IsolateE(%"class.v8::internal::CompilationCacheTable"* nocapture readonly, %"class.v8::internal::Isolate"*) local_unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::SharedFunctionInfo", align 8
  %4 = alloca %"class.v8::internal::BytecodeArray", align 8
  %5 = getelementptr inbounds %"class.v8::internal::CompilationCacheTable", %"class.v8::internal::CompilationCacheTable"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i64, i64* %5, align 8
  %7 = add i64 %6, 15
  %8 = inttoptr i64 %7 to i32*
  %9 = load atomic i32, i32* %8 monotonic, align 4
  %10 = ashr i32 %9, 1
  %11 = sext i32 %10 to i64
  %12 = icmp eq i32 %10, 0
  br i1 %12, label %18, label %13

13:                                               ; preds = %2
  %14 = bitcast %"class.v8::internal::SharedFunctionInfo"* %3 to i8*
  %15 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %16 = bitcast %"class.v8::internal::BytecodeArray"* %4 to i8*
  %17 = getelementptr inbounds %"class.v8::internal::BytecodeArray", %"class.v8::internal::BytecodeArray"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  br label %19

18:                                               ; preds = %223, %2
  ret void

19:                                               ; preds = %226, %13
  %20 = phi i64 [ %6, %13 ], [ %227, %226 ]
  %21 = phi i64 [ 0, %13 ], [ %224, %226 ]
  %22 = trunc i64 %21 to i32
  %23 = mul nsw i32 %22, 3
  %24 = add nsw i32 %23, 4
  %25 = and i64 %20, -4294967296
  %26 = mul i32 %22, 12
  %27 = add i32 %26, 12
  %28 = sext i32 %27 to i64
  %29 = add i64 %20, 7
  %30 = add i64 %29, %28
  %31 = inttoptr i64 %30 to i32*
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = zext i32 %32 to i64
  %34 = and i64 %33, 1
  %35 = icmp eq i64 %34, 0
  br i1 %35, label %47, label %36

36:                                               ; preds = %19
  %37 = or i64 %25, %33
  %38 = add i64 %37, -1
  %39 = inttoptr i64 %38 to i32*
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = zext i32 %40 to i64
  %42 = or i64 %25, %41
  %43 = add i64 %42, 7
  %44 = inttoptr i64 %43 to i16*
  %45 = load atomic i16, i16* %44 monotonic, align 2
  %46 = icmp eq i16 %45, 66
  br i1 %46, label %47, label %114

47:                                               ; preds = %19, %36
  %48 = shl i32 %24, 2
  %49 = sext i32 %48 to i64
  %50 = add i64 %29, %49
  %51 = inttoptr i64 %50 to i32*
  %52 = load atomic i32, i32* %51 monotonic, align 4
  %53 = ashr i32 %52, 1
  %54 = add nsw i32 %53, -1
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %107

56:                                               ; preds = %47
  %57 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %58 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %57, null
  br i1 %58, label %65, label %59

59:                                               ; preds = %56
  %60 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %57, i64 0, i32 0, i32 1
  %61 = load i8, i8* %60, align 8, !range !2
  %62 = icmp eq i8 %61, 0
  br i1 %62, label %65, label %63

63:                                               ; preds = %59
  %64 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %57, i64 0, i32 1, i64 0
  br label %73

65:                                               ; preds = %59, %56
  %66 = and i64 %20, -262144
  %67 = or i64 %66, 16
  %68 = inttoptr i64 %67 to i64*
  %69 = load i64, i64* %68, align 16
  %70 = add i64 %69, -41416
  %71 = inttoptr i64 %70 to %"class.v8::internal::Isolate"*
  %72 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %71, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %73

73:                                               ; preds = %63, %65
  %74 = phi i64* [ %72, %65 ], [ %64, %63 ]
  %75 = getelementptr inbounds i64, i64* %74, i64 5
  %76 = load i64, i64* %75, align 8
  %77 = trunc i64 %76 to i32
  %78 = add i32 %26, 20
  %79 = add i64 %20, -1
  %80 = sext i32 %78 to i64
  %81 = add i64 %79, %80
  %82 = inttoptr i64 %81 to i32*
  store atomic volatile i32 %77, i32* %82 monotonic, align 4
  %83 = load i64, i64* %5, align 8
  %84 = add i32 %26, 24
  %85 = sext i32 %84 to i64
  %86 = add nsw i64 %85, -1
  %87 = add i64 %86, %83
  %88 = inttoptr i64 %87 to i32*
  store atomic volatile i32 %77, i32* %88 monotonic, align 4
  %89 = load i64, i64* %5, align 8
  %90 = add i32 %26, 28
  %91 = sext i32 %90 to i64
  %92 = add nsw i64 %91, -1
  %93 = add i64 %92, %89
  %94 = inttoptr i64 %93 to i32*
  store atomic volatile i32 %77, i32* %94 monotonic, align 4
  %95 = load i64, i64* %5, align 8
  %96 = add i64 %95, 7
  %97 = inttoptr i64 %96 to i32*
  %98 = load atomic i32, i32* %97 monotonic, align 4
  %99 = add i32 %98, -2
  %100 = and i32 %99, -2
  store atomic volatile i32 %100, i32* %97 monotonic, align 4
  %101 = load i64, i64* %5, align 8
  %102 = add i64 %101, 11
  %103 = inttoptr i64 %102 to i32*
  %104 = load atomic i32, i32* %103 monotonic, align 4
  %105 = add i32 %104, 2
  %106 = and i32 %105, -2
  store atomic volatile i32 %106, i32* %103 monotonic, align 4
  br label %223

107:                                              ; preds = %47
  %108 = shl i32 %54, 1
  %109 = add nsw i32 %48, 8
  %110 = add i64 %20, -1
  %111 = sext i32 %109 to i64
  %112 = add i64 %110, %111
  %113 = inttoptr i64 %112 to i32*
  store atomic volatile i32 %108, i32* %113 monotonic, align 4
  br label %223

114:                                              ; preds = %36
  %115 = load atomic i32, i32* %39 monotonic, align 4
  %116 = zext i32 %115 to i64
  %117 = or i64 %25, %116
  %118 = add i64 %117, 7
  %119 = inttoptr i64 %118 to i16*
  %120 = load atomic i16, i16* %119 monotonic, align 2
  %121 = add i16 %120, -119
  %122 = icmp ult i16 %121, 13
  br i1 %122, label %123, label %223

123:                                              ; preds = %114
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %14) #5
  %124 = shl i32 %24, 2
  %125 = sext i32 %124 to i64
  %126 = add i64 %29, %125
  %127 = inttoptr i64 %126 to i32*
  %128 = load atomic i32, i32* %127 monotonic, align 4
  %129 = zext i32 %128 to i64
  %130 = or i64 %25, %129
  store i64 %130, i64* %15, align 8
  %131 = add i64 %130, 3
  %132 = inttoptr i64 %131 to i32*
  %133 = load atomic i32, i32* %132 acquire, align 4
  %134 = zext i32 %133 to i64
  %135 = and i64 %134, 1
  %136 = icmp eq i64 %135, 0
  br i1 %136, label %137, label %138

137:                                              ; preds = %123
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #5
  br label %221

138:                                              ; preds = %123
  %139 = or i64 %25, %134
  %140 = add i64 %139, -1
  %141 = inttoptr i64 %140 to i32*
  %142 = load atomic i32, i32* %141 monotonic, align 4
  %143 = zext i32 %142 to i64
  %144 = or i64 %25, %143
  %145 = add i64 %144, 7
  %146 = inttoptr i64 %145 to i16*
  %147 = load atomic i16, i16* %146 monotonic, align 2
  %148 = icmp eq i16 %147, 133
  br i1 %148, label %157, label %149

149:                                              ; preds = %138
  %150 = load atomic i32, i32* %141 monotonic, align 4
  %151 = zext i32 %150 to i64
  %152 = or i64 %25, %151
  %153 = add i64 %152, 7
  %154 = inttoptr i64 %153 to i16*
  %155 = load atomic i16, i16* %154 monotonic, align 2
  %156 = icmp eq i16 %155, 105
  br i1 %156, label %157, label %158

157:                                              ; preds = %149, %138
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #5
  br label %166

158:                                              ; preds = %149
  %159 = load atomic i32, i32* %141 monotonic, align 4
  %160 = zext i32 %159 to i64
  %161 = or i64 %25, %160
  %162 = add i64 %161, 7
  %163 = inttoptr i64 %162 to i16*
  %164 = load atomic i16, i16* %163 monotonic, align 2
  %165 = icmp eq i16 %164, 94
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %16) #5
  br i1 %165, label %166, label %221

166:                                              ; preds = %157, %158
  %167 = call i64 @_ZNK2v88internal18SharedFunctionInfo16GetBytecodeArrayINS0_7IsolateEEENS0_13BytecodeArrayEPT_(%"class.v8::internal::SharedFunctionInfo"* nonnull %3, %"class.v8::internal::Isolate"* %1)
  store i64 %167, i64* %17, align 8
  %168 = call zeroext i1 @_ZNK2v88internal13BytecodeArray5IsOldEv(%"class.v8::internal::BytecodeArray"* nonnull %4) #5
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #5
  br i1 %168, label %169, label %222

169:                                              ; preds = %166
  %170 = load i64, i64* %5, align 8
  %171 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %172 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %171, null
  br i1 %172, label %179, label %173

173:                                              ; preds = %169
  %174 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %171, i64 0, i32 0, i32 1
  %175 = load i8, i8* %174, align 8, !range !2
  %176 = icmp eq i8 %175, 0
  br i1 %176, label %179, label %177

177:                                              ; preds = %173
  %178 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %171, i64 0, i32 1, i64 0
  br label %187

179:                                              ; preds = %173, %169
  %180 = and i64 %170, -262144
  %181 = or i64 %180, 16
  %182 = inttoptr i64 %181 to i64*
  %183 = load i64, i64* %182, align 16
  %184 = add i64 %183, -41416
  %185 = inttoptr i64 %184 to %"class.v8::internal::Isolate"*
  %186 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %185, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %187

187:                                              ; preds = %177, %179
  %188 = phi i64* [ %186, %179 ], [ %178, %177 ]
  %189 = getelementptr inbounds i64, i64* %188, i64 5
  %190 = load i64, i64* %189, align 8
  %191 = trunc i64 %190 to i32
  %192 = add i32 %26, 20
  %193 = sext i32 %192 to i64
  %194 = add nsw i64 %193, -1
  %195 = add i64 %194, %170
  %196 = inttoptr i64 %195 to i32*
  store atomic volatile i32 %191, i32* %196 monotonic, align 4
  %197 = load i64, i64* %5, align 8
  %198 = add i32 %26, 24
  %199 = sext i32 %198 to i64
  %200 = add nsw i64 %199, -1
  %201 = add i64 %200, %197
  %202 = inttoptr i64 %201 to i32*
  store atomic volatile i32 %191, i32* %202 monotonic, align 4
  %203 = load i64, i64* %5, align 8
  %204 = add i32 %26, 28
  %205 = sext i32 %204 to i64
  %206 = add nsw i64 %205, -1
  %207 = add i64 %206, %203
  %208 = inttoptr i64 %207 to i32*
  store atomic volatile i32 %191, i32* %208 monotonic, align 4
  %209 = load i64, i64* %5, align 8
  %210 = add i64 %209, 7
  %211 = inttoptr i64 %210 to i32*
  %212 = load atomic i32, i32* %211 monotonic, align 4
  %213 = add i32 %212, -2
  %214 = and i32 %213, -2
  store atomic volatile i32 %214, i32* %211 monotonic, align 4
  %215 = load i64, i64* %5, align 8
  %216 = add i64 %215, 11
  %217 = inttoptr i64 %216 to i32*
  %218 = load atomic i32, i32* %217 monotonic, align 4
  %219 = add i32 %218, 2
  %220 = and i32 %219, -2
  store atomic volatile i32 %220, i32* %217 monotonic, align 4
  br label %222

221:                                              ; preds = %137, %158
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %16) #5
  br label %222

222:                                              ; preds = %221, %187, %166
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %14) #5
  br label %223

223:                                              ; preds = %73, %107, %114, %222
  %224 = add i64 %21, 1
  %225 = icmp eq i64 %224, %11
  br i1 %225, label %18, label %226

226:                                              ; preds = %223
  %227 = load i64, i64* %5, align 8
  br label %19
}

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal21CompilationCacheTable11RemoveEntryEi(%"class.v8::internal::CompilationCacheTable"* nocapture readonly, i32) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::CompilationCacheTable", %"class.v8::internal::CompilationCacheTable"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %6 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %5, null
  br i1 %6, label %13, label %7

7:                                                ; preds = %2
  %8 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %5, i64 0, i32 0, i32 1
  %9 = load i8, i8* %8, align 8, !range !2
  %10 = icmp eq i8 %9, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %7
  %12 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %5, i64 0, i32 1, i64 0
  br label %21

13:                                               ; preds = %7, %2
  %14 = and i64 %4, -262144
  %15 = or i64 %14, 16
  %16 = inttoptr i64 %15 to i64*
  %17 = load i64, i64* %16, align 16
  %18 = add i64 %17, -41416
  %19 = inttoptr i64 %18 to %"class.v8::internal::Isolate"*
  %20 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %19, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %21

21:                                               ; preds = %11, %13
  %22 = phi i64* [ %20, %13 ], [ %12, %11 ]
  %23 = getelementptr inbounds i64, i64* %22, i64 5
  %24 = load i64, i64* %23, align 8
  %25 = trunc i64 %24 to i32
  %26 = shl i32 %1, 2
  %27 = add nsw i32 %26, 8
  %28 = add i64 %4, -1
  %29 = sext i32 %27 to i64
  %30 = add i64 %28, %29
  %31 = inttoptr i64 %30 to i32*
  store atomic volatile i32 %25, i32* %31 monotonic, align 4
  %32 = load i64, i64* %3, align 8
  %33 = shl i32 %1, 2
  %34 = add i32 %33, 12
  %35 = add i64 %32, -1
  %36 = sext i32 %34 to i64
  %37 = add i64 %35, %36
  %38 = inttoptr i64 %37 to i32*
  store atomic volatile i32 %25, i32* %38 monotonic, align 4
  %39 = load i64, i64* %3, align 8
  %40 = shl i32 %1, 2
  %41 = add i32 %40, 16
  %42 = add i64 %39, -1
  %43 = sext i32 %41 to i64
  %44 = add i64 %42, %43
  %45 = inttoptr i64 %44 to i32*
  store atomic volatile i32 %25, i32* %45 monotonic, align 4
  %46 = load i64, i64* %3, align 8
  %47 = add i64 %46, 7
  %48 = inttoptr i64 %47 to i32*
  %49 = load atomic i32, i32* %48 monotonic, align 4
  %50 = add i32 %49, -2
  %51 = and i32 %50, -2
  store atomic volatile i32 %51, i32* %48 monotonic, align 4
  %52 = load i64, i64* %3, align 8
  %53 = add i64 %52, 11
  %54 = inttoptr i64 %53 to i32*
  %55 = load atomic i32, i32* %54 monotonic, align 4
  %56 = add i32 %55, 2
  %57 = and i32 %56, -2
  store atomic volatile i32 %57, i32* %54 monotonic, align 4
  ret void
}

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden i64 @_ZNK2v88internal18SharedFunctionInfo16GetBytecodeArrayINS0_7IsolateEEENS0_13BytecodeArrayEPT_(%"class.v8::internal::SharedFunctionInfo"*, %"class.v8::internal::Isolate"*) local_unnamed_addr #2 comdat align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = and i64 %4, -4294967296
  %6 = add i64 %4, 15
  %7 = inttoptr i64 %6 to i32*
  %8 = load atomic i32, i32* %7 acquire, align 4
  %9 = zext i32 %8 to i64
  %10 = or i64 %5, %9
  %11 = add i64 %10, -1
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %5, %14
  %16 = add i64 %15, 7
  %17 = inttoptr i64 %16 to i16*
  %18 = load atomic i16, i16* %17 monotonic, align 2
  %19 = icmp eq i16 %18, 100
  br i1 %19, label %20, label %55

20:                                               ; preds = %2
  %21 = load i64, i64* %3, align 8
  %22 = and i64 %21, -4294967296
  %23 = add i64 %21, 15
  %24 = inttoptr i64 %23 to i32*
  %25 = load atomic i32, i32* %24 acquire, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %22, %26
  %28 = add i64 %27, 19
  %29 = inttoptr i64 %28 to i32*
  %30 = load atomic i32, i32* %29 acquire, align 4
  %31 = zext i32 %30 to i64
  %32 = or i64 %22, %31
  %33 = add i64 %32, -1
  %34 = inttoptr i64 %33 to i32*
  %35 = load atomic i32, i32* %34 monotonic, align 4
  %36 = zext i32 %35 to i64
  %37 = or i64 %22, %36
  %38 = add i64 %37, 7
  %39 = inttoptr i64 %38 to i16*
  %40 = load atomic i16, i16* %39 monotonic, align 2
  %41 = icmp eq i16 %40, 133
  br i1 %41, label %42, label %55

42:                                               ; preds = %20
  %43 = load i64, i64* %3, align 8
  %44 = and i64 %43, -4294967296
  %45 = add i64 %43, 15
  %46 = inttoptr i64 %45 to i32*
  %47 = load atomic i32, i32* %46 acquire, align 4
  %48 = zext i32 %47 to i64
  %49 = or i64 %44, %48
  %50 = add i64 %49, 15
  %51 = inttoptr i64 %50 to i32*
  %52 = load atomic i32, i32* %51 acquire, align 4
  %53 = zext i32 %52 to i64
  %54 = or i64 %44, %53
  br label %120

55:                                               ; preds = %2, %20
  %56 = load i64, i64* %3, align 8
  %57 = and i64 %56, -4294967296
  %58 = add i64 %56, 3
  %59 = inttoptr i64 %58 to i32*
  %60 = load atomic i32, i32* %59 acquire, align 4
  %61 = zext i32 %60 to i64
  %62 = or i64 %57, %61
  %63 = and i64 %61, 1
  %64 = icmp eq i64 %63, 0
  br i1 %64, label %114, label %65

65:                                               ; preds = %55
  %66 = add i64 %62, -1
  %67 = inttoptr i64 %66 to i32*
  %68 = load atomic i32, i32* %67 monotonic, align 4
  %69 = zext i32 %68 to i64
  %70 = or i64 %57, %69
  %71 = add i64 %70, 7
  %72 = inttoptr i64 %71 to i16*
  %73 = load atomic i16, i16* %72 monotonic, align 2
  %74 = icmp eq i16 %73, 133
  br i1 %74, label %120, label %75

75:                                               ; preds = %65
  %76 = load atomic i32, i32* %67 monotonic, align 4
  %77 = zext i32 %76 to i64
  %78 = or i64 %57, %77
  %79 = add i64 %78, 7
  %80 = inttoptr i64 %79 to i16*
  %81 = load atomic i16, i16* %80 monotonic, align 2
  %82 = icmp eq i16 %81, 94
  br i1 %82, label %83, label %114

83:                                               ; preds = %75
  %84 = load i64, i64* %3, align 8
  %85 = and i64 %84, -4294967296
  %86 = add i64 %84, 3
  %87 = inttoptr i64 %86 to i32*
  %88 = load atomic i32, i32* %87 acquire, align 4
  %89 = zext i32 %88 to i64
  %90 = or i64 %85, %89
  %91 = add i64 %90, 7
  %92 = inttoptr i64 %91 to i32*
  %93 = load i32, i32* %92, align 4
  %94 = zext i32 %93 to i64
  %95 = or i64 %85, %94
  %96 = and i64 %94, 1
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %108, label %98

98:                                               ; preds = %83
  %99 = add i64 %95, -1
  %100 = inttoptr i64 %99 to i32*
  %101 = load atomic i32, i32* %100 monotonic, align 4
  %102 = zext i32 %101 to i64
  %103 = or i64 %85, %102
  %104 = add i64 %103, 7
  %105 = inttoptr i64 %104 to i16*
  %106 = load atomic i16, i16* %105 monotonic, align 2
  %107 = icmp eq i16 %106, 133
  br i1 %107, label %120, label %108

108:                                              ; preds = %98, %83
  %109 = add i64 %95, 3
  %110 = inttoptr i64 %109 to i32*
  %111 = load i32, i32* %110, align 4
  %112 = zext i32 %111 to i64
  %113 = or i64 %85, %112
  br label %120

114:                                              ; preds = %75, %55
  %115 = add i64 %62, 3
  %116 = inttoptr i64 %115 to i32*
  %117 = load i32, i32* %116, align 4
  %118 = zext i32 %117 to i64
  %119 = or i64 %57, %118
  br label %120

120:                                              ; preds = %114, %108, %98, %65, %42
  %121 = phi i64 [ %54, %42 ], [ %119, %114 ], [ %62, %65 ], [ %113, %108 ], [ %95, %98 ]
  ret i64 %121
}

declare zeroext i1 @_ZNK2v88internal13BytecodeArray5IsOldEv(%"class.v8::internal::BytecodeArray"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define hidden void @_ZN2v88internal21CompilationCacheTable6RemoveENS0_6ObjectE(%"class.v8::internal::CompilationCacheTable"* nocapture readonly, i64) local_unnamed_addr #0 align 2 {
  %3 = getelementptr inbounds %"class.v8::internal::CompilationCacheTable", %"class.v8::internal::CompilationCacheTable"* %0, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %4 = load i64, i64* %3, align 8
  %5 = add i64 %4, 15
  %6 = inttoptr i64 %5 to i32*
  %7 = load atomic i32, i32* %6 monotonic, align 4
  %8 = ashr i32 %7, 1
  %9 = sext i32 %8 to i64
  %10 = icmp eq i32 %8, 0
  br i1 %10, label %13, label %11

11:                                               ; preds = %2
  %12 = trunc i64 %1 to i32
  br label %14

13:                                               ; preds = %78, %2
  ret void

14:                                               ; preds = %81, %11
  %15 = phi i64 [ %4, %11 ], [ %82, %81 ]
  %16 = phi i64 [ 0, %11 ], [ %79, %81 ]
  %17 = trunc i64 %16 to i32
  %18 = mul i64 %16, 51539607552
  %19 = add i64 %18, 68719476736
  %20 = ashr exact i64 %19, 32
  %21 = add nsw i64 %20, 7
  %22 = add i64 %21, %15
  %23 = inttoptr i64 %22 to i32*
  %24 = load atomic i32, i32* %23 monotonic, align 4
  %25 = icmp eq i32 %24, %12
  br i1 %25, label %26, label %78

26:                                               ; preds = %14
  %27 = load %"class.v8::internal::SoleReadOnlyHeap"*, %"class.v8::internal::SoleReadOnlyHeap"** @_ZN2v88internal16SoleReadOnlyHeap15shared_ro_heap_E, align 8
  %28 = icmp eq %"class.v8::internal::SoleReadOnlyHeap"* %27, null
  br i1 %28, label %35, label %29

29:                                               ; preds = %26
  %30 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %27, i64 0, i32 0, i32 1
  %31 = load i8, i8* %30, align 8, !range !2
  %32 = icmp eq i8 %31, 0
  br i1 %32, label %35, label %33

33:                                               ; preds = %29
  %34 = getelementptr inbounds %"class.v8::internal::SoleReadOnlyHeap", %"class.v8::internal::SoleReadOnlyHeap"* %27, i64 0, i32 1, i64 0
  br label %43

35:                                               ; preds = %29, %26
  %36 = and i64 %15, -262144
  %37 = or i64 %36, 16
  %38 = inttoptr i64 %37 to i64*
  %39 = load i64, i64* %38, align 16
  %40 = add i64 %39, -41416
  %41 = inttoptr i64 %40 to %"class.v8::internal::Isolate"*
  %42 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %41, i64 0, i32 0, i32 7, i32 0, i64 0
  br label %43

43:                                               ; preds = %33, %35
  %44 = phi i64* [ %42, %35 ], [ %34, %33 ]
  %45 = getelementptr inbounds i64, i64* %44, i64 5
  %46 = load i64, i64* %45, align 8
  %47 = trunc i64 %46 to i32
  %48 = mul i32 %17, 12
  %49 = add i32 %48, 20
  %50 = sext i32 %49 to i64
  %51 = add nsw i64 %50, -1
  %52 = add i64 %51, %15
  %53 = inttoptr i64 %52 to i32*
  store atomic volatile i32 %47, i32* %53 monotonic, align 4
  %54 = load i64, i64* %3, align 8
  %55 = add i32 %48, 24
  %56 = sext i32 %55 to i64
  %57 = add nsw i64 %56, -1
  %58 = add i64 %57, %54
  %59 = inttoptr i64 %58 to i32*
  store atomic volatile i32 %47, i32* %59 monotonic, align 4
  %60 = load i64, i64* %3, align 8
  %61 = add i32 %48, 28
  %62 = sext i32 %61 to i64
  %63 = add nsw i64 %62, -1
  %64 = add i64 %63, %60
  %65 = inttoptr i64 %64 to i32*
  store atomic volatile i32 %47, i32* %65 monotonic, align 4
  %66 = load i64, i64* %3, align 8
  %67 = add i64 %66, 7
  %68 = inttoptr i64 %67 to i32*
  %69 = load atomic i32, i32* %68 monotonic, align 4
  %70 = add i32 %69, -2
  %71 = and i32 %70, -2
  store atomic volatile i32 %71, i32* %68 monotonic, align 4
  %72 = load i64, i64* %3, align 8
  %73 = add i64 %72, 11
  %74 = inttoptr i64 %73 to i32*
  %75 = load atomic i32, i32* %74 monotonic, align 4
  %76 = add i32 %75, 2
  %77 = and i32 %76, -2
  store atomic volatile i32 %77, i32* %74 monotonic, align 4
  br label %78

78:                                               ; preds = %43, %14
  %79 = add i64 %16, 1
  %80 = icmp eq i64 %79, %9
  br i1 %80, label %13, label %81

81:                                               ; preds = %78
  %82 = load i64, i64* %3, align 8
  br label %14
}

declare i64* @_ZN2v88internal6String11SlowFlattenEPNS0_7IsolateENS0_6HandleINS0_10ConsStringEEENS0_14AllocationTypeE(%"class.v8::internal::Isolate"*, i64*, i8 zeroext) local_unnamed_addr #3

declare i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"*, i64) local_unnamed_addr #3

declare i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"*) local_unnamed_addr #3

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2v88internal12_GLOBAL__N_115StringSharedKey7IsMatchENS0_6ObjectE(%"class.v8::internal::(anonymous namespace)::StringSharedKey"* nocapture readonly, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::String", align 8
  %4 = and i64 %1, 1
  %5 = icmp eq i64 %4, 0
  br i1 %5, label %18, label %6

6:                                                ; preds = %2
  %7 = and i64 %1, -4294967296
  %8 = add i64 %1, -1
  %9 = inttoptr i64 %8 to i32*
  %10 = load atomic i32, i32* %9 monotonic, align 4
  %11 = zext i32 %10 to i64
  %12 = or i64 %7, %11
  %13 = add i64 %12, 7
  %14 = inttoptr i64 %13 to i16*
  %15 = load atomic i16, i16* %14 monotonic, align 2
  %16 = add i16 %15, -119
  %17 = icmp ult i16 %16, 13
  br i1 %17, label %32, label %22

18:                                               ; preds = %2
  %19 = trunc i64 %1 to i32
  %20 = ashr i32 %19, 1
  %21 = sitofp i32 %20 to double
  br label %26

22:                                               ; preds = %6
  %23 = add i64 %1, 3
  %24 = inttoptr i64 %23 to double*
  %25 = load double, double* %24, align 1
  br label %26

26:                                               ; preds = %18, %22
  %27 = phi double [ %21, %18 ], [ %25, %22 ]
  %28 = fptoui double %27 to i32
  %29 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %0, i64 0, i32 0, i32 1
  %30 = load i32, i32* %29, align 8
  %31 = icmp eq i32 %30, %28
  br label %104

32:                                               ; preds = %6
  %33 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %0, i64 0, i32 2, i32 0
  %34 = load i64*, i64** %33, align 8
  %35 = icmp eq i64* %34, null
  br i1 %35, label %43, label %36

36:                                               ; preds = %32
  %37 = load i64, i64* %34, align 8
  %38 = add i64 %1, 7
  %39 = inttoptr i64 %38 to i32*
  %40 = load atomic i32, i32* %39 monotonic, align 4
  %41 = trunc i64 %37 to i32
  %42 = icmp eq i32 %40, %41
  br i1 %42, label %48, label %104

43:                                               ; preds = %32
  %44 = add i64 %1, 7
  %45 = inttoptr i64 %44 to i32*
  %46 = load atomic i32, i32* %45 monotonic, align 4
  %47 = icmp eq i32 %46, 0
  br i1 %47, label %48, label %104

48:                                               ; preds = %43, %36
  %49 = add i64 %1, 15
  %50 = inttoptr i64 %49 to i32*
  %51 = load atomic i32, i32* %50 monotonic, align 4
  %52 = and i32 %51, 2
  %53 = icmp ne i32 %52, 0
  %54 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %0, i64 0, i32 3
  %55 = load i8, i8* %54, align 8, !range !2
  %56 = icmp ne i8 %55, 0
  %57 = xor i1 %53, %56
  br i1 %57, label %104, label %58

58:                                               ; preds = %48
  %59 = add i64 %1, 19
  %60 = inttoptr i64 %59 to i32*
  %61 = load atomic i32, i32* %60 monotonic, align 4
  %62 = ashr i32 %61, 1
  %63 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %0, i64 0, i32 4
  %64 = load i32, i32* %63, align 4
  %65 = icmp eq i32 %62, %64
  br i1 %65, label %66, label %104

66:                                               ; preds = %58
  %67 = bitcast %"class.v8::internal::String"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %67) #5
  %68 = add i64 %1, 11
  %69 = inttoptr i64 %68 to i32*
  %70 = load atomic i32, i32* %69 monotonic, align 4
  %71 = zext i32 %70 to i64
  %72 = or i64 %7, %71
  %73 = getelementptr inbounds %"class.v8::internal::String", %"class.v8::internal::String"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %72, i64* %73, align 8
  %74 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::StringSharedKey", %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %0, i64 0, i32 1, i32 0, i32 0
  %75 = load i64*, i64** %74, align 8
  %76 = load i64, i64* %75, align 8
  %77 = trunc i64 %76 to i32
  %78 = icmp eq i32 %70, %77
  br i1 %78, label %102, label %79

79:                                               ; preds = %66
  %80 = add i64 %72, -1
  %81 = inttoptr i64 %80 to i32*
  %82 = load atomic i32, i32* %81 monotonic, align 4
  %83 = zext i32 %82 to i64
  %84 = or i64 %7, %83
  %85 = add i64 %84, 7
  %86 = inttoptr i64 %85 to i16*
  %87 = load atomic i16, i16* %86 monotonic, align 2
  %88 = icmp ult i16 %87, 32
  br i1 %88, label %89, label %100

89:                                               ; preds = %79
  %90 = and i64 %76, -4294967296
  %91 = add i64 %76, -1
  %92 = inttoptr i64 %91 to i32*
  %93 = load atomic i32, i32* %92 monotonic, align 4
  %94 = zext i32 %93 to i64
  %95 = or i64 %90, %94
  %96 = add i64 %95, 7
  %97 = inttoptr i64 %96 to i16*
  %98 = load atomic i16, i16* %97 monotonic, align 2
  %99 = icmp ult i16 %98, 32
  br i1 %99, label %102, label %100

100:                                              ; preds = %89, %79
  %101 = call zeroext i1 @_ZNK2v88internal6String10SlowEqualsES1_(%"class.v8::internal::String"* nonnull %3, i64 %76) #5
  br label %102

102:                                              ; preds = %66, %89, %100
  %103 = phi i1 [ %101, %100 ], [ true, %66 ], [ false, %89 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %67) #5
  br label %104

104:                                              ; preds = %43, %36, %102, %58, %48, %26
  %105 = phi i1 [ %31, %26 ], [ false, %36 ], [ false, %43 ], [ false, %48 ], [ %103, %102 ], [ false, %58 ]
  ret i1 %105
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2v88internal12_GLOBAL__N_115StringSharedKeyD0Ev(%"class.v8::internal::(anonymous namespace)::StringSharedKey"*) unnamed_addr #2 align 2 {
  %2 = bitcast %"class.v8::internal::(anonymous namespace)::StringSharedKey"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #6
  ret void
}

declare i32 @_ZN2v88internal6String17ComputeAndSetHashEv(%"class.v8::internal::String"*) local_unnamed_addr #3

declare zeroext i1 @_ZNK2v88internal6String10SlowEqualsES1_(%"class.v8::internal::String"*, i64) local_unnamed_addr #3

; Function Attrs: nobuiltin nounwind
declare void @_ZdlPv(i8*) local_unnamed_addr #4

declare zeroext i1 @_ZNK2v88internal18SharedFunctionInfo13HasSourceCodeEv(%"class.v8::internal::SharedFunctionInfo"*) local_unnamed_addr #3

; Function Attrs: inlinehint nounwind ssp uwtable
define linkonce_odr hidden void @_ZN2v88internal15IsCompiledScopeC2ENS0_18SharedFunctionInfoEPNS0_7IsolateE(%"class.v8::internal::IsCompiledScope"*, i64, %"class.v8::internal::Isolate"*) unnamed_addr #2 comdat align 2 {
  %4 = alloca %"class.v8::internal::SharedFunctionInfo", align 8
  %5 = getelementptr inbounds %"class.v8::internal::SharedFunctionInfo", %"class.v8::internal::SharedFunctionInfo"* %4, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %1, i64* %5, align 8
  %6 = and i64 %1, -4294967296
  %7 = add i64 %1, 3
  %8 = inttoptr i64 %7 to i32*
  %9 = load atomic i32, i32* %8 acquire, align 4
  %10 = zext i32 %9 to i64
  %11 = and i64 %10, 1
  %12 = icmp eq i64 %11, 0
  br i1 %12, label %60, label %13

13:                                               ; preds = %3
  %14 = or i64 %6, %10
  %15 = add i64 %14, -1
  %16 = inttoptr i64 %15 to i32*
  %17 = load atomic i32, i32* %16 monotonic, align 4
  %18 = zext i32 %17 to i64
  %19 = or i64 %6, %18
  %20 = add i64 %19, 7
  %21 = inttoptr i64 %20 to i16*
  %22 = load atomic i16, i16* %21 monotonic, align 2
  %23 = icmp eq i16 %22, 133
  br i1 %23, label %40, label %24

24:                                               ; preds = %13
  %25 = load atomic i32, i32* %16 monotonic, align 4
  %26 = zext i32 %25 to i64
  %27 = or i64 %6, %26
  %28 = add i64 %27, 7
  %29 = inttoptr i64 %28 to i16*
  %30 = load atomic i16, i16* %29 monotonic, align 2
  %31 = icmp eq i16 %30, 105
  br i1 %31, label %40, label %32

32:                                               ; preds = %24
  %33 = load atomic i32, i32* %16 monotonic, align 4
  %34 = zext i32 %33 to i64
  %35 = or i64 %6, %34
  %36 = add i64 %35, 7
  %37 = inttoptr i64 %36 to i16*
  %38 = load atomic i16, i16* %37 monotonic, align 2
  %39 = icmp eq i16 %38, 94
  br i1 %39, label %40, label %60

40:                                               ; preds = %13, %24, %32
  %41 = call i64 @_ZNK2v88internal18SharedFunctionInfo16GetBytecodeArrayINS0_7IsolateEEENS0_13BytecodeArrayEPT_(%"class.v8::internal::SharedFunctionInfo"* nonnull %4, %"class.v8::internal::Isolate"* %2)
  %42 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 4
  %43 = load %"class.v8::internal::CanonicalHandleScope"*, %"class.v8::internal::CanonicalHandleScope"** %42, align 8
  %44 = icmp eq %"class.v8::internal::CanonicalHandleScope"* %43, null
  br i1 %44, label %47, label %45

45:                                               ; preds = %40
  %46 = call i64* @_ZN2v88internal20CanonicalHandleScope6LookupEm(%"class.v8::internal::CanonicalHandleScope"* nonnull %43, i64 %41) #5
  br label %60

47:                                               ; preds = %40
  %48 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 0
  %49 = load i64*, i64** %48, align 8
  %50 = getelementptr inbounds %"class.v8::internal::Isolate", %"class.v8::internal::Isolate"* %2, i64 0, i32 31, i32 1
  %51 = load i64*, i64** %50, align 8
  %52 = icmp eq i64* %49, %51
  br i1 %52, label %53, label %55

53:                                               ; preds = %47
  %54 = call i64* @_ZN2v88internal11HandleScope6ExtendEPNS0_7IsolateE(%"class.v8::internal::Isolate"* %2) #5
  br label %55

55:                                               ; preds = %53, %47
  %56 = phi i64* [ %54, %53 ], [ %49, %47 ]
  %57 = ptrtoint i64* %56 to i64
  %58 = add i64 %57, 8
  %59 = inttoptr i64 %58 to i64*
  store i64* %59, i64** %48, align 8
  store i64 %41, i64* %56, align 8
  br label %60

60:                                               ; preds = %32, %3, %55, %45
  %61 = phi i64* [ %46, %45 ], [ %56, %55 ], [ null, %3 ], [ null, %32 ]
  %62 = getelementptr inbounds %"class.v8::internal::IsCompiledScope", %"class.v8::internal::IsCompiledScope"* %0, i64 0, i32 0, i32 0
  store i64* %61, i64** %62, align 8
  %63 = getelementptr inbounds %"class.v8::internal::IsCompiledScope", %"class.v8::internal::IsCompiledScope"* %0, i64 0, i32 1
  %64 = load i64, i64* %5, align 8
  %65 = and i64 %64, -4294967296
  %66 = add i64 %64, 3
  %67 = inttoptr i64 %66 to i32*
  %68 = load atomic i32, i32* %67 acquire, align 4
  %69 = zext i32 %68 to i64
  %70 = or i64 %65, %69
  %71 = icmp eq i32 %68, 170
  br i1 %71, label %87, label %72

72:                                               ; preds = %60
  %73 = and i64 %69, 1
  %74 = icmp eq i64 %73, 0
  br i1 %74, label %87, label %75

75:                                               ; preds = %72
  %76 = add i64 %70, -1
  %77 = inttoptr i64 %76 to i32*
  %78 = load atomic i32, i32* %77 monotonic, align 4
  %79 = zext i32 %78 to i64
  %80 = or i64 %65, %79
  %81 = add i64 %80, 7
  %82 = inttoptr i64 %81 to i16*
  %83 = load atomic i16, i16* %82 monotonic, align 2
  %84 = add i16 %83, -157
  %85 = icmp ugt i16 %84, 1
  %86 = zext i1 %85 to i8
  br label %87

87:                                               ; preds = %60, %72, %75
  %88 = phi i8 [ 0, %60 ], [ 1, %72 ], [ %86, %75 ]
  store i8 %88, i8* %63, align 8
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal zeroext i1 @_ZN2v88internal12_GLOBAL__N_19RegExpKey7IsMatchENS0_6ObjectE(%"class.v8::internal::(anonymous namespace)::RegExpKey"* nocapture readonly, i64) unnamed_addr #0 align 2 {
  %3 = alloca %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", align 8
  %4 = bitcast %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %3 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #5
  %5 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::RegExpKey", %"class.v8::internal::(anonymous namespace)::RegExpKey"* %0, i64 0, i32 1, i32 0, i32 0
  %6 = load i64*, i64** %5, align 8
  %7 = load i64, i64* %6, align 8
  %8 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %3, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  store i64 %7, i64* %8, align 8
  %9 = getelementptr inbounds %"class.v8::internal::Handle<v8::internal::String>::ObjectRef", %"class.v8::internal::Handle<v8::internal::String>::ObjectRef"* %3, i64 0, i32 0
  %10 = and i64 %1, -4294967296
  %11 = add i64 %1, 11
  %12 = inttoptr i64 %11 to i32*
  %13 = load atomic i32, i32* %12 monotonic, align 4
  %14 = zext i32 %13 to i64
  %15 = or i64 %10, %14
  %16 = trunc i64 %7 to i32
  %17 = icmp eq i32 %13, %16
  br i1 %17, label %41, label %18

18:                                               ; preds = %2
  %19 = and i64 %7, -4294967296
  %20 = add i64 %7, -1
  %21 = inttoptr i64 %20 to i32*
  %22 = load atomic i32, i32* %21 monotonic, align 4
  %23 = zext i32 %22 to i64
  %24 = or i64 %19, %23
  %25 = add i64 %24, 7
  %26 = inttoptr i64 %25 to i16*
  %27 = load atomic i16, i16* %26 monotonic, align 2
  %28 = icmp ult i16 %27, 32
  br i1 %28, label %29, label %39

29:                                               ; preds = %18
  %30 = add i64 %15, -1
  %31 = inttoptr i64 %30 to i32*
  %32 = load atomic i32, i32* %31 monotonic, align 4
  %33 = zext i32 %32 to i64
  %34 = or i64 %10, %33
  %35 = add i64 %34, 7
  %36 = inttoptr i64 %35 to i16*
  %37 = load atomic i16, i16* %36 monotonic, align 2
  %38 = icmp ult i16 %37, 32
  br i1 %38, label %49, label %39

39:                                               ; preds = %18, %29
  %40 = call zeroext i1 @_ZNK2v88internal6String10SlowEqualsES1_(%"class.v8::internal::String"* nonnull %9, i64 %15) #5
  br i1 %40, label %41, label %49

41:                                               ; preds = %2, %39
  %42 = add i64 %1, 15
  %43 = inttoptr i64 %42 to i32*
  %44 = load atomic i32, i32* %43 monotonic, align 4
  %45 = getelementptr inbounds %"class.v8::internal::(anonymous namespace)::RegExpKey", %"class.v8::internal::(anonymous namespace)::RegExpKey"* %0, i64 0, i32 2, i32 0, i32 0, i32 0
  %46 = load i64, i64* %45, align 8
  %47 = trunc i64 %46 to i32
  %48 = icmp eq i32 %44, %47
  br label %49

49:                                               ; preds = %29, %41, %39
  %50 = phi i1 [ false, %39 ], [ %48, %41 ], [ false, %29 ]
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #5
  ret i1 %50
}

; Function Attrs: inlinehint nounwind ssp uwtable
define internal void @_ZN2v88internal12_GLOBAL__N_19RegExpKeyD0Ev(%"class.v8::internal::(anonymous namespace)::RegExpKey"*) unnamed_addr #2 align 2 {
  %2 = bitcast %"class.v8::internal::(anonymous namespace)::RegExpKey"* %0 to i8*
  tail call void @_ZdlPv(i8* %2) #6
  ret void
}

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"*, i32, i8 zeroext) local_unnamed_addr #3

declare void @_ZN2v88internal12WriteBarrier11MarkingSlowEPNS0_4HeapENS0_10HeapObjectENS0_24CompressedHeapObjectSlotES4_(%"class.v8::internal::Heap"*, i64, i64, i64) local_unnamed_addr #3

declare void @_ZN2v88internal28Heap_GenerationalBarrierSlowENS0_10HeapObjectEmS1_(i64, i64, i64) local_unnamed_addr #3

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE17NewWeakFixedArrayEiNS0_14AllocationTypeE(%"class.v8::internal::FactoryBase"*, i32, i8 zeroext) local_unnamed_addr #3

declare i64* @_ZN2v88internal7Factory25CopyWeakFixedArrayAndGrowENS0_6HandleINS0_14WeakFixedArrayEEEi(%"class.v8::internal::Factory"*, i64*, i32) local_unnamed_addr #3

declare i64* @_ZN2v88internal11FactoryBaseINS0_7FactoryEE13NewHeapNumberILNS0_14AllocationTypeE0EEENS0_6HandleINS0_10HeapNumberEEEv(%"class.v8::internal::FactoryBase"*) local_unnamed_addr #3

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { inlinehint nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind }
attributes #6 = { builtin nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i8 0, i8 2}
