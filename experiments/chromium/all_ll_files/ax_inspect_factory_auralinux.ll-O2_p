; ModuleID = '../../content/public/browser/ax_inspect_factory_auralinux.cc'
source_filename = "../../content/public/browser/ax_inspect_factory_auralinux.cc"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

module asm ".symver exp, exp@GLIBC_2.2.5"
module asm ".symver exp2, exp2@GLIBC_2.2.5"
module asm ".symver exp2f, exp2f@GLIBC_2.2.5"
module asm ".symver expf, expf@GLIBC_2.2.5"
module asm ".symver lgamma, lgamma@GLIBC_2.2.5"
module asm ".symver lgammaf, lgammaf@GLIBC_2.2.5"
module asm ".symver lgammal, lgammal@GLIBC_2.2.5"
module asm ".symver log, log@GLIBC_2.2.5"
module asm ".symver log2, log2@GLIBC_2.2.5"
module asm ".symver log2f, log2f@GLIBC_2.2.5"
module asm ".symver logf, logf@GLIBC_2.2.5"
module asm ".symver pow, pow@GLIBC_2.2.5"
module asm ".symver powf, powf@GLIBC_2.2.5"

%"class.ui::AXTreeFormatter" = type { i32 (...)** }
%"class.content::AccessibilityTreeFormatterAuraLinux" = type { %"class.ui::AXTreeFormatterBase.base", [7 x i8] }
%"class.ui::AXTreeFormatterBase.base" = type <{ %"class.ui::AXTreeFormatter", %"class.std::__1::vector.19", %"class.std::__1::vector.26", i8 }>
%"class.std::__1::vector.19" = type { %"class.std::__1::__vector_base.20" }
%"class.std::__1::__vector_base.20" = type { %"struct.ui::AXPropertyFilter"*, %"struct.ui::AXPropertyFilter"*, %"class.std::__1::__compressed_pair.21" }
%"struct.ui::AXPropertyFilter" = type <{ %"class.std::__1::basic_string", %"class.std::__1::basic_string", %"class.std::__1::basic_string", i32, [4 x i8] }>
%"class.std::__1::basic_string" = type { %"class.std::__1::__compressed_pair.4" }
%"class.std::__1::__compressed_pair.4" = type { %"struct.std::__1::__compressed_pair_elem.5" }
%"struct.std::__1::__compressed_pair_elem.5" = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep" = type { %union.anon }
%union.anon = type { %"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" }
%"struct.std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__long" = type { i8*, i64, i64 }
%"class.std::__1::__compressed_pair.21" = type { %"struct.std::__1::__compressed_pair_elem.22" }
%"struct.std::__1::__compressed_pair_elem.22" = type { %"struct.ui::AXPropertyFilter"* }
%"class.std::__1::vector.26" = type { %"class.std::__1::__vector_base.27" }
%"class.std::__1::__vector_base.27" = type { %"struct.ui::AXNodeFilter"*, %"struct.ui::AXNodeFilter"*, %"class.std::__1::__compressed_pair.28" }
%"struct.ui::AXNodeFilter" = type { %"class.std::__1::basic_string", %"class.std::__1::basic_string" }
%"class.std::__1::__compressed_pair.28" = type { %"struct.std::__1::__compressed_pair_elem.29" }
%"struct.std::__1::__compressed_pair_elem.29" = type { %"struct.ui::AXNodeFilter"* }
%"class.content::AccessibilityTreeFormatterBlink" = type { %"class.ui::AXTreeFormatterBase.base", [7 x i8] }
%"class.ui::AXEventRecorder" = type { i32 (...)**, i8, %"class.std::__1::vector", %"class.base::RepeatingCallback" }
%"class.std::__1::vector" = type { %"class.std::__1::__vector_base" }
%"class.std::__1::__vector_base" = type { %"class.std::__1::basic_string"*, %"class.std::__1::basic_string"*, %"class.std::__1::__compressed_pair.7" }
%"class.std::__1::__compressed_pair.7" = type { %"struct.std::__1::__compressed_pair_elem.8" }
%"struct.std::__1::__compressed_pair_elem.8" = type { %"class.std::__1::basic_string"* }
%"class.base::RepeatingCallback" = type { %"class.base::internal::CallbackBaseCopyable" }
%"class.base::internal::CallbackBaseCopyable" = type { %"class.base::internal::CallbackBase" }
%"class.base::internal::CallbackBase" = type { %class.scoped_refptr }
%class.scoped_refptr = type { %"class.base::internal::BindStateBase"* }
%"class.base::internal::BindStateBase" = type { %"class.base::RefCountedThreadSafe", void ()*, void (%"class.base::internal::BindStateBase"*)*, i1 (%"class.base::internal::BindStateBase"*, i32)* }
%"class.base::RefCountedThreadSafe" = type { %"class.base::subtle::RefCountedThreadSafeBase" }
%"class.base::subtle::RefCountedThreadSafeBase" = type { %"class.base::AtomicRefCount" }
%"class.base::AtomicRefCount" = type { %"struct.std::__1::atomic" }
%"struct.std::__1::atomic" = type { %"struct.std::__1::__atomic_base" }
%"struct.std::__1::__atomic_base" = type { %"struct.std::__1::__atomic_base.12" }
%"struct.std::__1::__atomic_base.12" = type { %"struct.std::__1::__cxx_atomic_impl" }
%"struct.std::__1::__cxx_atomic_impl" = type { %"struct.std::__1::__cxx_atomic_base_impl" }
%"struct.std::__1::__cxx_atomic_base_impl" = type { i32 }
%"class.content::BrowserAccessibilityManager" = type opaque
%"struct.ui::AXTreeSelector" = type { i32, %"class.std::__1::basic_string" }
%"class.content::AccessibilityEventRecorderAuraLinux" = type { %"class.content::AccessibilityEventRecorder", %struct._AtspiEventListener*, i32, %"struct.ui::AXTreeSelector" }
%"class.content::AccessibilityEventRecorder" = type { %"class.ui::AXEventRecorder", %"class.content::BrowserAccessibilityManager"* }
%struct._AtspiEventListener = type { %struct._GObject, void (%struct._AtspiEvent*, i8*)*, i8*, void (i8*)* }
%struct._GObject = type { %struct._GTypeInstance, i32, %struct._GData* }
%struct._GTypeInstance = type { %struct._GTypeClass* }
%struct._GTypeClass = type { i64 }
%struct._GData = type opaque
%struct._AtspiEvent = type { i8*, %struct._AtspiAccessible*, i32, i32, %struct._GValue, %struct._AtspiAccessible* }
%struct._GValue = type { i64, [2 x %union.anon.45] }
%union.anon.45 = type { i64 }
%struct._AtspiAccessible = type { %struct._AtspiObject, %struct._AtspiAccessible*, %struct._GPtrArray*, i32, i32, i8*, i8*, %struct._AtspiStateSet*, %struct._GHashTable*, i32, %struct._AtspiAccessiblePrivate* }
%struct._AtspiObject = type { %struct._GObject, %struct._AtspiApplication*, i8* }
%struct._AtspiApplication = type { %struct._GObject, %struct._GHashTable*, i8*, %struct.DBusConnection*, %struct._AtspiAccessible*, i32, i8*, i8*, i8*, %struct.timeval }
%struct.DBusConnection = type opaque
%struct.timeval = type { i64, i64 }
%struct._GPtrArray = type { i8**, i32 }
%struct._AtspiStateSet = type { %struct._GObject, %struct._AtspiAccessible*, i64 }
%struct._GHashTable = type opaque
%struct._AtspiAccessiblePrivate = type opaque

; Function Attrs: nounwind ssp uwtable
define hidden %"class.ui::AXTreeFormatter"* @_ZN7content16AXInspectFactory23CreatePlatformFormatterEv() local_unnamed_addr #0 align 2 {
  %1 = tail call i8* @_Znwm(i64 64) #3
  %2 = bitcast i8* %1 to %"class.content::AccessibilityTreeFormatterAuraLinux"*
  tail call void @_ZN7content35AccessibilityTreeFormatterAuraLinuxC1Ev(%"class.content::AccessibilityTreeFormatterAuraLinux"* nonnull %2) #4
  %3 = bitcast i8* %1 to %"class.ui::AXTreeFormatter"*
  ret %"class.ui::AXTreeFormatter"* %3
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.ui::AXTreeFormatter"* @_ZN7content16AXInspectFactory15CreateFormatterENS0_4TypeE(i32) local_unnamed_addr #0 align 2 {
  switch i32 %0, label %10 [
    i32 1, label %2
    i32 3, label %6
  ]

2:                                                ; preds = %1
  %3 = tail call i8* @_Znwm(i64 64) #3
  %4 = bitcast i8* %3 to %"class.content::AccessibilityTreeFormatterBlink"*
  tail call void @_ZN7content31AccessibilityTreeFormatterBlinkC1Ev(%"class.content::AccessibilityTreeFormatterBlink"* nonnull %4) #4
  %5 = ptrtoint i8* %3 to i64
  br label %10

6:                                                ; preds = %1
  %7 = tail call i8* @_Znwm(i64 64) #3
  %8 = bitcast i8* %7 to %"class.content::AccessibilityTreeFormatterAuraLinux"*
  tail call void @_ZN7content35AccessibilityTreeFormatterAuraLinuxC1Ev(%"class.content::AccessibilityTreeFormatterAuraLinux"* nonnull %8) #4
  %9 = ptrtoint i8* %7 to i64
  br label %10

10:                                               ; preds = %1, %6, %2
  %11 = phi i64 [ %9, %6 ], [ %5, %2 ], [ 0, %1 ]
  %12 = inttoptr i64 %11 to %"class.ui::AXTreeFormatter"*
  ret %"class.ui::AXTreeFormatter"* %12
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.ui::AXEventRecorder"* @_ZN7content16AXInspectFactory22CreatePlatformRecorderEPNS_27BrowserAccessibilityManagerEiRKN2ui14AXTreeSelectorE(%"class.content::BrowserAccessibilityManager"*, i32, %"struct.ui::AXTreeSelector"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %4 = tail call i8* @_Znwm(i64 104) #3
  %5 = bitcast i8* %4 to %"class.content::AccessibilityEventRecorderAuraLinux"*
  tail call void @_ZN7content35AccessibilityEventRecorderAuraLinuxC1EPNS_27BrowserAccessibilityManagerEiRKN2ui14AXTreeSelectorE(%"class.content::AccessibilityEventRecorderAuraLinux"* nonnull %5, %"class.content::BrowserAccessibilityManager"* %0, i32 %1, %"struct.ui::AXTreeSelector"* dereferenceable(32) %2) #4
  %6 = bitcast i8* %4 to %"class.ui::AXEventRecorder"*
  ret %"class.ui::AXEventRecorder"* %6
}

; Function Attrs: nounwind ssp uwtable
define hidden %"class.ui::AXEventRecorder"* @_ZN7content16AXInspectFactory14CreateRecorderENS0_4TypeEPNS_27BrowserAccessibilityManagerEiRKN2ui14AXTreeSelectorE(i32, %"class.content::BrowserAccessibilityManager"*, i32, %"struct.ui::AXTreeSelector"* dereferenceable(32)) local_unnamed_addr #0 align 2 {
  %5 = icmp eq i32 %0, 3
  br i1 %5, label %6, label %10

6:                                                ; preds = %4
  %7 = tail call i8* @_Znwm(i64 104) #3
  %8 = bitcast i8* %7 to %"class.content::AccessibilityEventRecorderAuraLinux"*
  tail call void @_ZN7content35AccessibilityEventRecorderAuraLinuxC1EPNS_27BrowserAccessibilityManagerEiRKN2ui14AXTreeSelectorE(%"class.content::AccessibilityEventRecorderAuraLinux"* nonnull %8, %"class.content::BrowserAccessibilityManager"* %1, i32 %2, %"struct.ui::AXTreeSelector"* dereferenceable(32) %3) #4
  %9 = bitcast i8* %7 to %"class.ui::AXEventRecorder"*
  br label %10

10:                                               ; preds = %4, %6
  %11 = phi %"class.ui::AXEventRecorder"* [ %9, %6 ], [ null, %4 ]
  ret %"class.ui::AXEventRecorder"* %11
}

; Function Attrs: nobuiltin nofree
declare noalias nonnull i8* @_Znwm(i64) local_unnamed_addr #1

declare void @_ZN7content31AccessibilityTreeFormatterBlinkC1Ev(%"class.content::AccessibilityTreeFormatterBlink"*) unnamed_addr #2

declare void @_ZN7content35AccessibilityTreeFormatterAuraLinuxC1Ev(%"class.content::AccessibilityTreeFormatterAuraLinux"*) unnamed_addr #2

declare void @_ZN7content35AccessibilityEventRecorderAuraLinuxC1EPNS_27BrowserAccessibilityManagerEiRKN2ui14AXTreeSelectorE(%"class.content::AccessibilityEventRecorderAuraLinux"*, %"class.content::BrowserAccessibilityManager"*, i32, %"struct.ui::AXTreeSelector"* dereferenceable(32)) unnamed_addr #2

attributes #0 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nobuiltin nofree "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+sse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { builtin nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
