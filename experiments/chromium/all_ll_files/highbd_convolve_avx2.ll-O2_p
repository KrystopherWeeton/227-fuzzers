; ModuleID = '../../third_party/libvpx/source/libvpx/vpx_dsp/x86/highbd_convolve_avx2.c'
source_filename = "../../third_party/libvpx/source/libvpx/vpx_dsp/x86/highbd_convolve_avx2.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: nofree norecurse nounwind ssp uwtable
define hidden void @vpx_highbd_convolve_copy_avx2(i16* nocapture readonly, i64, i16* nocapture, i64, [8 x i16]* nocapture readnone, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #0 {
  %13 = icmp sgt i32 %9, 32
  br i1 %13, label %14, label %40

14:                                               ; preds = %12, %14
  %15 = phi i32 [ %38, %14 ], [ %10, %12 ]
  %16 = phi i16* [ %37, %14 ], [ %2, %12 ]
  %17 = phi i16* [ %29, %14 ], [ %0, %12 ]
  %18 = bitcast i16* %17 to <4 x i64>*
  %19 = load <4 x i64>, <4 x i64>* %18, align 1
  %20 = getelementptr inbounds i16, i16* %17, i64 16
  %21 = bitcast i16* %20 to <4 x i64>*
  %22 = load <4 x i64>, <4 x i64>* %21, align 1
  %23 = getelementptr inbounds i16, i16* %17, i64 32
  %24 = bitcast i16* %23 to <4 x i64>*
  %25 = load <4 x i64>, <4 x i64>* %24, align 1
  %26 = getelementptr inbounds i16, i16* %17, i64 48
  %27 = bitcast i16* %26 to <4 x i64>*
  %28 = load <4 x i64>, <4 x i64>* %27, align 1
  %29 = getelementptr inbounds i16, i16* %17, i64 %1
  %30 = bitcast i16* %16 to <4 x i64>*
  store <4 x i64> %19, <4 x i64>* %30, align 1
  %31 = getelementptr inbounds i16, i16* %16, i64 16
  %32 = bitcast i16* %31 to <4 x i64>*
  store <4 x i64> %22, <4 x i64>* %32, align 1
  %33 = getelementptr inbounds i16, i16* %16, i64 32
  %34 = bitcast i16* %33 to <4 x i64>*
  store <4 x i64> %25, <4 x i64>* %34, align 1
  %35 = getelementptr inbounds i16, i16* %16, i64 48
  %36 = bitcast i16* %35 to <4 x i64>*
  store <4 x i64> %28, <4 x i64>* %36, align 1
  %37 = getelementptr inbounds i16, i16* %16, i64 %3
  %38 = add nsw i32 %15, -1
  %39 = icmp sgt i32 %38, 0
  br i1 %39, label %14, label %110

40:                                               ; preds = %12
  %41 = icmp sgt i32 %9, 16
  br i1 %41, label %42, label %58

42:                                               ; preds = %40, %42
  %43 = phi i32 [ %56, %42 ], [ %10, %40 ]
  %44 = phi i16* [ %55, %42 ], [ %2, %40 ]
  %45 = phi i16* [ %51, %42 ], [ %0, %40 ]
  %46 = bitcast i16* %45 to <4 x i64>*
  %47 = load <4 x i64>, <4 x i64>* %46, align 1
  %48 = getelementptr inbounds i16, i16* %45, i64 16
  %49 = bitcast i16* %48 to <4 x i64>*
  %50 = load <4 x i64>, <4 x i64>* %49, align 1
  %51 = getelementptr inbounds i16, i16* %45, i64 %1
  %52 = bitcast i16* %44 to <4 x i64>*
  store <4 x i64> %47, <4 x i64>* %52, align 1
  %53 = getelementptr inbounds i16, i16* %44, i64 16
  %54 = bitcast i16* %53 to <4 x i64>*
  store <4 x i64> %50, <4 x i64>* %54, align 1
  %55 = getelementptr inbounds i16, i16* %44, i64 %3
  %56 = add nsw i32 %43, -1
  %57 = icmp sgt i32 %56, 0
  br i1 %57, label %42, label %110

58:                                               ; preds = %40
  %59 = icmp sgt i32 %9, 8
  br i1 %59, label %60, label %76

60:                                               ; preds = %58, %60
  %61 = phi i32 [ %74, %60 ], [ %10, %58 ]
  %62 = phi i16* [ %73, %60 ], [ %2, %58 ]
  %63 = phi i16* [ %69, %60 ], [ %0, %58 ]
  %64 = bitcast i16* %63 to <4 x i64>*
  %65 = load <4 x i64>, <4 x i64>* %64, align 1
  %66 = getelementptr inbounds i16, i16* %63, i64 %1
  %67 = bitcast i16* %66 to <4 x i64>*
  %68 = load <4 x i64>, <4 x i64>* %67, align 1
  %69 = getelementptr inbounds i16, i16* %66, i64 %1
  %70 = bitcast i16* %62 to <4 x i64>*
  store <4 x i64> %65, <4 x i64>* %70, align 1
  %71 = getelementptr inbounds i16, i16* %62, i64 %3
  %72 = bitcast i16* %71 to <4 x i64>*
  store <4 x i64> %68, <4 x i64>* %72, align 1
  %73 = getelementptr inbounds i16, i16* %71, i64 %3
  %74 = add nsw i32 %61, -2
  %75 = icmp sgt i32 %74, 0
  br i1 %75, label %60, label %110

76:                                               ; preds = %58
  %77 = icmp sgt i32 %9, 4
  br i1 %77, label %78, label %94

78:                                               ; preds = %76, %78
  %79 = phi i32 [ %92, %78 ], [ %10, %76 ]
  %80 = phi i16* [ %91, %78 ], [ %2, %76 ]
  %81 = phi i16* [ %87, %78 ], [ %0, %76 ]
  %82 = bitcast i16* %81 to <2 x i64>*
  %83 = load <2 x i64>, <2 x i64>* %82, align 1
  %84 = getelementptr inbounds i16, i16* %81, i64 %1
  %85 = bitcast i16* %84 to <2 x i64>*
  %86 = load <2 x i64>, <2 x i64>* %85, align 1
  %87 = getelementptr inbounds i16, i16* %84, i64 %1
  %88 = bitcast i16* %80 to <2 x i64>*
  store <2 x i64> %83, <2 x i64>* %88, align 1
  %89 = getelementptr inbounds i16, i16* %80, i64 %3
  %90 = bitcast i16* %89 to <2 x i64>*
  store <2 x i64> %86, <2 x i64>* %90, align 1
  %91 = getelementptr inbounds i16, i16* %89, i64 %3
  %92 = add nsw i32 %79, -2
  %93 = icmp sgt i32 %92, 0
  br i1 %93, label %78, label %110

94:                                               ; preds = %76, %94
  %95 = phi i32 [ %108, %94 ], [ %10, %76 ]
  %96 = phi i16* [ %107, %94 ], [ %2, %76 ]
  %97 = phi i16* [ %103, %94 ], [ %0, %76 ]
  %98 = bitcast i16* %97 to i64*
  %99 = load i64, i64* %98, align 1
  %100 = getelementptr inbounds i16, i16* %97, i64 %1
  %101 = bitcast i16* %100 to i64*
  %102 = load i64, i64* %101, align 1
  %103 = getelementptr inbounds i16, i16* %100, i64 %1
  %104 = bitcast i16* %96 to i64*
  store i64 %99, i64* %104, align 1
  %105 = getelementptr inbounds i16, i16* %96, i64 %3
  %106 = bitcast i16* %105 to i64*
  store i64 %102, i64* %106, align 1
  %107 = getelementptr inbounds i16, i16* %105, i64 %3
  %108 = add nsw i32 %95, -2
  %109 = icmp sgt i32 %108, 0
  br i1 %109, label %94, label %110

110:                                              ; preds = %94, %78, %60, %42, %14
  ret void
}

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: argmemonly nounwind
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind ssp uwtable
define hidden void @vpx_highbd_convolve_avg_avx2(i16* nocapture readonly, i64, i16* nocapture, i64, [8 x i16]* nocapture readnone, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #2 {
  %13 = icmp sgt i32 %9, 32
  br i1 %13, label %14, label %48

14:                                               ; preds = %12, %14
  %15 = phi i16* [ %45, %14 ], [ %2, %12 ]
  %16 = phi i32 [ %46, %14 ], [ %10, %12 ]
  %17 = phi i16* [ %29, %14 ], [ %0, %12 ]
  %18 = bitcast i16* %17 to <16 x i16>*
  %19 = load <16 x i16>, <16 x i16>* %18, align 1
  %20 = getelementptr inbounds i16, i16* %17, i64 16
  %21 = bitcast i16* %20 to <16 x i16>*
  %22 = load <16 x i16>, <16 x i16>* %21, align 1
  %23 = getelementptr inbounds i16, i16* %17, i64 32
  %24 = bitcast i16* %23 to <16 x i16>*
  %25 = load <16 x i16>, <16 x i16>* %24, align 1
  %26 = getelementptr inbounds i16, i16* %17, i64 48
  %27 = bitcast i16* %26 to <16 x i16>*
  %28 = load <16 x i16>, <16 x i16>* %27, align 1
  %29 = getelementptr inbounds i16, i16* %17, i64 %1
  %30 = bitcast i16* %15 to <16 x i16>*
  %31 = load <16 x i16>, <16 x i16>* %30, align 1
  %32 = getelementptr inbounds i16, i16* %15, i64 16
  %33 = bitcast i16* %32 to <16 x i16>*
  %34 = load <16 x i16>, <16 x i16>* %33, align 1
  %35 = getelementptr inbounds i16, i16* %15, i64 32
  %36 = bitcast i16* %35 to <16 x i16>*
  %37 = load <16 x i16>, <16 x i16>* %36, align 1
  %38 = getelementptr inbounds i16, i16* %15, i64 48
  %39 = bitcast i16* %38 to <16 x i16>*
  %40 = load <16 x i16>, <16 x i16>* %39, align 1
  %41 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %19, <16 x i16> %31) #7
  store <16 x i16> %41, <16 x i16>* %30, align 1
  %42 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %22, <16 x i16> %34) #7
  store <16 x i16> %42, <16 x i16>* %33, align 1
  %43 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %25, <16 x i16> %37) #7
  store <16 x i16> %43, <16 x i16>* %36, align 1
  %44 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %28, <16 x i16> %40) #7
  store <16 x i16> %44, <16 x i16>* %39, align 1
  %45 = getelementptr inbounds i16, i16* %15, i64 %3
  %46 = add nsw i32 %16, -1
  %47 = icmp sgt i32 %46, 0
  br i1 %47, label %14, label %151

48:                                               ; preds = %12
  %49 = icmp sgt i32 %9, 16
  br i1 %49, label %50, label %70

50:                                               ; preds = %48, %50
  %51 = phi i16* [ %67, %50 ], [ %2, %48 ]
  %52 = phi i32 [ %68, %50 ], [ %10, %48 ]
  %53 = phi i16* [ %59, %50 ], [ %0, %48 ]
  %54 = bitcast i16* %53 to <16 x i16>*
  %55 = load <16 x i16>, <16 x i16>* %54, align 1
  %56 = getelementptr inbounds i16, i16* %53, i64 16
  %57 = bitcast i16* %56 to <16 x i16>*
  %58 = load <16 x i16>, <16 x i16>* %57, align 1
  %59 = getelementptr inbounds i16, i16* %53, i64 %1
  %60 = bitcast i16* %51 to <16 x i16>*
  %61 = load <16 x i16>, <16 x i16>* %60, align 1
  %62 = getelementptr inbounds i16, i16* %51, i64 16
  %63 = bitcast i16* %62 to <16 x i16>*
  %64 = load <16 x i16>, <16 x i16>* %63, align 1
  %65 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %55, <16 x i16> %61) #7
  store <16 x i16> %65, <16 x i16>* %60, align 1
  %66 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %58, <16 x i16> %64) #7
  store <16 x i16> %66, <16 x i16>* %63, align 1
  %67 = getelementptr inbounds i16, i16* %51, i64 %3
  %68 = add nsw i32 %52, -1
  %69 = icmp sgt i32 %68, 0
  br i1 %69, label %50, label %151

70:                                               ; preds = %48
  %71 = icmp sgt i32 %9, 8
  br i1 %71, label %72, label %95

72:                                               ; preds = %70
  %73 = shl i64 %1, 1
  %74 = shl i64 %3, 1
  br label %75

75:                                               ; preds = %72, %75
  %76 = phi i16* [ %92, %75 ], [ %2, %72 ]
  %77 = phi i32 [ %93, %75 ], [ %10, %72 ]
  %78 = phi i16* [ %84, %75 ], [ %0, %72 ]
  %79 = bitcast i16* %78 to <16 x i16>*
  %80 = load <16 x i16>, <16 x i16>* %79, align 1
  %81 = getelementptr inbounds i16, i16* %78, i64 %1
  %82 = bitcast i16* %81 to <16 x i16>*
  %83 = load <16 x i16>, <16 x i16>* %82, align 1
  %84 = getelementptr inbounds i16, i16* %78, i64 %73
  %85 = bitcast i16* %76 to <16 x i16>*
  %86 = load <16 x i16>, <16 x i16>* %85, align 1
  %87 = getelementptr inbounds i16, i16* %76, i64 %3
  %88 = bitcast i16* %87 to <16 x i16>*
  %89 = load <16 x i16>, <16 x i16>* %88, align 1
  %90 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %80, <16 x i16> %86) #7
  store <16 x i16> %90, <16 x i16>* %85, align 1
  %91 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %83, <16 x i16> %89) #7
  store <16 x i16> %91, <16 x i16>* %88, align 1
  %92 = getelementptr inbounds i16, i16* %76, i64 %74
  %93 = add nsw i32 %77, -2
  %94 = icmp sgt i32 %93, 0
  br i1 %94, label %75, label %151

95:                                               ; preds = %70
  %96 = icmp sgt i32 %9, 4
  %97 = shl i64 %1, 1
  %98 = shl i64 %3, 1
  br i1 %96, label %99, label %119

99:                                               ; preds = %95, %99
  %100 = phi i16* [ %116, %99 ], [ %2, %95 ]
  %101 = phi i32 [ %117, %99 ], [ %10, %95 ]
  %102 = phi i16* [ %108, %99 ], [ %0, %95 ]
  %103 = bitcast i16* %102 to <8 x i16>*
  %104 = load <8 x i16>, <8 x i16>* %103, align 1
  %105 = getelementptr inbounds i16, i16* %102, i64 %1
  %106 = bitcast i16* %105 to <8 x i16>*
  %107 = load <8 x i16>, <8 x i16>* %106, align 1
  %108 = getelementptr inbounds i16, i16* %102, i64 %97
  %109 = bitcast i16* %100 to <8 x i16>*
  %110 = load <8 x i16>, <8 x i16>* %109, align 1
  %111 = getelementptr inbounds i16, i16* %100, i64 %3
  %112 = bitcast i16* %111 to <8 x i16>*
  %113 = load <8 x i16>, <8 x i16>* %112, align 1
  %114 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %104, <8 x i16> %110) #7
  store <8 x i16> %114, <8 x i16>* %109, align 1
  %115 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %107, <8 x i16> %113) #7
  store <8 x i16> %115, <8 x i16>* %112, align 1
  %116 = getelementptr inbounds i16, i16* %100, i64 %98
  %117 = add nsw i32 %101, -2
  %118 = icmp sgt i32 %117, 0
  br i1 %118, label %99, label %151

119:                                              ; preds = %95, %119
  %120 = phi i16* [ %148, %119 ], [ %2, %95 ]
  %121 = phi i32 [ %149, %119 ], [ %10, %95 ]
  %122 = phi i16* [ %130, %119 ], [ %0, %95 ]
  %123 = bitcast i16* %122 to i64*
  %124 = load i64, i64* %123, align 1
  %125 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %124, i32 0
  %126 = getelementptr inbounds i16, i16* %122, i64 %1
  %127 = bitcast i16* %126 to i64*
  %128 = load i64, i64* %127, align 1
  %129 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %128, i32 0
  %130 = getelementptr inbounds i16, i16* %122, i64 %97
  %131 = bitcast i16* %120 to i64*
  %132 = load i64, i64* %131, align 1
  %133 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %132, i32 0
  %134 = getelementptr inbounds i16, i16* %120, i64 %3
  %135 = bitcast i16* %134 to i64*
  %136 = load i64, i64* %135, align 1
  %137 = insertelement <2 x i64> <i64 undef, i64 0>, i64 %136, i32 0
  %138 = bitcast <2 x i64> %133 to <8 x i16>
  %139 = bitcast <2 x i64> %125 to <8 x i16>
  %140 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %138, <8 x i16> %139) #7
  %141 = bitcast <8 x i16> %140 to <2 x i64>
  %142 = extractelement <2 x i64> %141, i32 0
  store i64 %142, i64* %131, align 1
  %143 = bitcast <2 x i64> %137 to <8 x i16>
  %144 = bitcast <2 x i64> %129 to <8 x i16>
  %145 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %143, <8 x i16> %144) #7
  %146 = bitcast <8 x i16> %145 to <2 x i64>
  %147 = extractelement <2 x i64> %146, i32 0
  store i64 %147, i64* %135, align 1
  %148 = getelementptr inbounds i16, i16* %120, i64 %98
  %149 = add nsw i32 %121, -2
  %150 = icmp sgt i32 %149, 0
  br i1 %150, label %119, label %151

151:                                              ; preds = %119, %99, %75, %50, %14
  ret void
}

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_convolve8_horiz_avx2(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #3 {
  %13 = sext i32 %5 to i64
  %14 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 0
  %15 = icmp eq i32 %6, 16
  br i1 %15, label %16, label %987

16:                                               ; preds = %12
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 3
  %18 = load i16, i16* %17, align 2
  %19 = icmp eq i16 %18, 128
  br i1 %19, label %987, label %20

20:                                               ; preds = %16
  %21 = load i16, i16* %14, align 2
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 1
  %23 = load i16, i16* %22, align 2
  %24 = or i16 %23, %21
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 6
  %26 = load i16, i16* %25, align 2
  %27 = or i16 %24, %26
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 7
  %29 = load i16, i16* %28, align 2
  %30 = or i16 %27, %29
  %31 = icmp eq i16 %30, 0
  br i1 %31, label %335, label %32

32:                                               ; preds = %20
  %33 = icmp sgt i32 %9, 15
  br i1 %33, label %34, label %43

34:                                               ; preds = %32
  %35 = shl nsw i32 -1, %11
  %36 = trunc i32 %35 to i16
  %37 = xor i16 %36, -1
  %38 = insertelement <16 x i16> undef, i16 %37, i32 0
  %39 = shufflevector <16 x i16> %38, <16 x i16> undef, <16 x i32> zeroinitializer
  %40 = bitcast i16* %14 to <2 x i64>*
  br label %60

41:                                               ; preds = %159
  %42 = and i32 %9, 15
  br label %43

43:                                               ; preds = %41, %32
  %44 = phi i32 [ %9, %32 ], [ %42, %41 ]
  %45 = phi i16* [ %2, %32 ], [ %161, %41 ]
  %46 = phi i16* [ %0, %32 ], [ %160, %41 ]
  %47 = icmp sgt i32 %44, 7
  br i1 %47, label %48, label %166

48:                                               ; preds = %43
  %49 = shl nsw i32 -1, %11
  %50 = trunc i32 %49 to i16
  %51 = xor i16 %50, -1
  %52 = insertelement <16 x i16> undef, i16 %51, i32 0
  %53 = shufflevector <16 x i16> %52, <16 x i16> undef, <16 x i32> zeroinitializer
  %54 = bitcast i16* %14 to <2 x i64>*
  %55 = shl i64 %1, 1
  %56 = shl i64 %3, 1
  %57 = bitcast <16 x i16> %53 to <4 x i64>
  %58 = shufflevector <4 x i64> %57, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %59 = bitcast <2 x i64> %58 to <8 x i16>
  br label %171

60:                                               ; preds = %34, %159
  %61 = phi i16* [ %0, %34 ], [ %160, %159 ]
  %62 = phi i16* [ %2, %34 ], [ %161, %159 ]
  %63 = phi i32 [ %9, %34 ], [ %162, %159 ]
  %64 = load <2 x i64>, <2 x i64>* %40, align 1
  %65 = shufflevector <2 x i64> %64, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %66 = bitcast <4 x i64> %65 to <8 x i32>
  %67 = bitcast <2 x i64> %64 to <4 x i32>
  %68 = shufflevector <4 x i32> %67, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %69 = shufflevector <8 x i32> %66, <8 x i32> %68, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %70 = bitcast <8 x i32> %69 to <32 x i8>
  %71 = shufflevector <32 x i8> %70, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19>
  %72 = bitcast <32 x i8> %71 to <16 x i16>
  %73 = shufflevector <32 x i8> %70, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23>
  %74 = bitcast <32 x i8> %73 to <16 x i16>
  %75 = shufflevector <32 x i8> %70, <32 x i8> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27>
  %76 = bitcast <32 x i8> %75 to <16 x i16>
  %77 = shufflevector <32 x i8> %70, <32 x i8> undef, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31>
  %78 = bitcast <32 x i8> %77 to <16 x i16>
  %79 = getelementptr inbounds i16, i16* %61, i64 -3
  br label %80

80:                                               ; preds = %80, %60
  %81 = phi i32 [ %10, %60 ], [ %155, %80 ]
  %82 = phi i16* [ %62, %60 ], [ %157, %80 ]
  %83 = phi i16* [ %79, %60 ], [ %156, %80 ]
  %84 = bitcast i16* %83 to <4 x i64>*
  %85 = load <4 x i64>, <4 x i64>* %84, align 1
  %86 = getelementptr inbounds i16, i16* %83, i64 8
  %87 = bitcast i16* %86 to <4 x i64>*
  %88 = load <4 x i64>, <4 x i64>* %87, align 1
  %89 = bitcast <4 x i64> %85 to <8 x i32>
  %90 = shufflevector <8 x i32> %89, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5>
  %91 = bitcast <4 x i64> %85 to <32 x i8>
  %92 = shufflevector <32 x i8> %91, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %93 = bitcast <32 x i8> %92 to <4 x i64>
  %94 = shufflevector <32 x i8> %91, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %95 = bitcast <32 x i8> %94 to <4 x i64>
  %96 = bitcast <8 x i32> %90 to <32 x i8>
  %97 = shufflevector <32 x i8> %96, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = bitcast <32 x i8> %97 to <4 x i64>
  %99 = shufflevector <32 x i8> %96, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %100 = bitcast <32 x i8> %99 to <4 x i64>
  %101 = bitcast <4 x i64> %88 to <8 x i32>
  %102 = shufflevector <8 x i32> %101, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5>
  %103 = bitcast <4 x i64> %88 to <32 x i8>
  %104 = shufflevector <32 x i8> %103, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %105 = bitcast <32 x i8> %104 to <4 x i64>
  %106 = shufflevector <32 x i8> %103, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %107 = bitcast <32 x i8> %106 to <4 x i64>
  %108 = bitcast <8 x i32> %102 to <32 x i8>
  %109 = shufflevector <32 x i8> %108, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %110 = bitcast <32 x i8> %109 to <4 x i64>
  %111 = shufflevector <32 x i8> %108, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %112 = bitcast <32 x i8> %111 to <4 x i64>
  %113 = shufflevector <4 x i64> %93, <4 x i64> %105, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %114 = shufflevector <4 x i64> %95, <4 x i64> %107, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %115 = shufflevector <4 x i64> %98, <4 x i64> %110, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %116 = shufflevector <4 x i64> %100, <4 x i64> %112, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %117 = shufflevector <4 x i64> %93, <4 x i64> %105, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %118 = shufflevector <4 x i64> %95, <4 x i64> %107, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %119 = bitcast <4 x i64> %113 to <16 x i16>
  %120 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %72, <16 x i16> %119) #7
  %121 = bitcast <4 x i64> %116 to <16 x i16>
  %122 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %78, <16 x i16> %121) #7
  %123 = bitcast <4 x i64> %114 to <16 x i16>
  %124 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %74, <16 x i16> %123) #7
  %125 = bitcast <4 x i64> %115 to <16 x i16>
  %126 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %76, <16 x i16> %125) #7
  %127 = icmp slt <8 x i32> %124, %126
  %128 = select <8 x i1> %127, <8 x i32> %124, <8 x i32> %126
  %129 = icmp sgt <8 x i32> %124, %126
  %130 = select <8 x i1> %129, <8 x i32> %124, <8 x i32> %126
  %131 = add <8 x i32> %120, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %132 = add <8 x i32> %131, %122
  %133 = add <8 x i32> %132, %128
  %134 = add <8 x i32> %133, %130
  %135 = ashr <8 x i32> %134, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %136 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %72, <16 x i16> %125) #7
  %137 = bitcast <4 x i64> %118 to <16 x i16>
  %138 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %78, <16 x i16> %137) #7
  %139 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %74, <16 x i16> %121) #7
  %140 = bitcast <4 x i64> %117 to <16 x i16>
  %141 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %76, <16 x i16> %140) #7
  %142 = icmp slt <8 x i32> %139, %141
  %143 = select <8 x i1> %142, <8 x i32> %139, <8 x i32> %141
  %144 = icmp sgt <8 x i32> %139, %141
  %145 = select <8 x i1> %144, <8 x i32> %139, <8 x i32> %141
  %146 = add <8 x i32> %136, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %147 = add <8 x i32> %146, %138
  %148 = add <8 x i32> %147, %143
  %149 = add <8 x i32> %148, %145
  %150 = ashr <8 x i32> %149, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %151 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %135, <8 x i32> %150) #7
  %152 = icmp slt <16 x i16> %151, %39
  %153 = select <16 x i1> %152, <16 x i16> %151, <16 x i16> %39
  %154 = bitcast i16* %82 to <16 x i16>*
  store <16 x i16> %153, <16 x i16>* %154, align 1
  %155 = add i32 %81, -1
  %156 = getelementptr inbounds i16, i16* %83, i64 %1
  %157 = getelementptr inbounds i16, i16* %82, i64 %3
  %158 = icmp eq i32 %155, 0
  br i1 %158, label %159, label %80

159:                                              ; preds = %80
  %160 = getelementptr inbounds i16, i16* %61, i64 16
  %161 = getelementptr inbounds i16, i16* %62, i64 16
  %162 = add nsw i32 %63, -16
  %163 = icmp sgt i32 %162, 15
  br i1 %163, label %60, label %41

164:                                              ; preds = %322
  %165 = and i32 %44, 7
  br label %166

166:                                              ; preds = %164, %43
  %167 = phi i32 [ %44, %43 ], [ %165, %164 ]
  %168 = phi i16* [ %45, %43 ], [ %324, %164 ]
  %169 = phi i16* [ %46, %43 ], [ %323, %164 ]
  %170 = icmp sgt i32 %167, 3
  br i1 %170, label %327, label %987

171:                                              ; preds = %48, %322
  %172 = phi i16* [ %46, %48 ], [ %323, %322 ]
  %173 = phi i16* [ %45, %48 ], [ %324, %322 ]
  %174 = phi i32 [ %44, %48 ], [ %325, %322 ]
  %175 = load <2 x i64>, <2 x i64>* %54, align 1
  %176 = shufflevector <2 x i64> %175, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %177 = bitcast <4 x i64> %176 to <8 x i32>
  %178 = bitcast <2 x i64> %175 to <4 x i32>
  %179 = shufflevector <4 x i32> %178, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %180 = shufflevector <8 x i32> %177, <8 x i32> %179, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %181 = bitcast <8 x i32> %180 to <32 x i8>
  %182 = shufflevector <32 x i8> %181, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19>
  %183 = bitcast <32 x i8> %182 to <16 x i16>
  %184 = shufflevector <32 x i8> %181, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23>
  %185 = bitcast <32 x i8> %184 to <16 x i16>
  %186 = shufflevector <32 x i8> %181, <32 x i8> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27>
  %187 = bitcast <32 x i8> %186 to <16 x i16>
  %188 = shufflevector <32 x i8> %181, <32 x i8> undef, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31>
  %189 = bitcast <32 x i8> %188 to <16 x i16>
  %190 = getelementptr inbounds i16, i16* %172, i64 -3
  br label %191

191:                                              ; preds = %191, %171
  %192 = phi i32 [ %10, %171 ], [ %272, %191 ]
  %193 = phi i16* [ %173, %171 ], [ %274, %191 ]
  %194 = phi i16* [ %190, %171 ], [ %273, %191 ]
  %195 = bitcast i16* %194 to <4 x i64>*
  %196 = load <4 x i64>, <4 x i64>* %195, align 1
  %197 = getelementptr inbounds i16, i16* %194, i64 %1
  %198 = bitcast i16* %197 to <4 x i64>*
  %199 = load <4 x i64>, <4 x i64>* %198, align 1
  %200 = bitcast <4 x i64> %196 to <8 x i32>
  %201 = shufflevector <8 x i32> %200, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5>
  %202 = bitcast <4 x i64> %196 to <32 x i8>
  %203 = shufflevector <32 x i8> %202, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %204 = bitcast <32 x i8> %203 to <4 x i64>
  %205 = shufflevector <32 x i8> %202, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %206 = bitcast <32 x i8> %205 to <4 x i64>
  %207 = bitcast <8 x i32> %201 to <32 x i8>
  %208 = shufflevector <32 x i8> %207, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %209 = bitcast <32 x i8> %208 to <4 x i64>
  %210 = shufflevector <32 x i8> %207, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %211 = bitcast <32 x i8> %210 to <4 x i64>
  %212 = bitcast <4 x i64> %199 to <8 x i32>
  %213 = shufflevector <8 x i32> %212, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5>
  %214 = bitcast <4 x i64> %199 to <32 x i8>
  %215 = shufflevector <32 x i8> %214, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %216 = bitcast <32 x i8> %215 to <4 x i64>
  %217 = shufflevector <32 x i8> %214, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %218 = bitcast <32 x i8> %217 to <4 x i64>
  %219 = bitcast <8 x i32> %213 to <32 x i8>
  %220 = shufflevector <32 x i8> %219, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %221 = bitcast <32 x i8> %220 to <4 x i64>
  %222 = shufflevector <32 x i8> %219, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %223 = bitcast <32 x i8> %222 to <4 x i64>
  %224 = shufflevector <4 x i64> %204, <4 x i64> %216, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %225 = shufflevector <4 x i64> %206, <4 x i64> %218, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %226 = shufflevector <4 x i64> %209, <4 x i64> %221, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %227 = shufflevector <4 x i64> %211, <4 x i64> %223, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %228 = shufflevector <4 x i64> %204, <4 x i64> %216, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %229 = shufflevector <4 x i64> %206, <4 x i64> %218, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %230 = bitcast <4 x i64> %224 to <16 x i16>
  %231 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %183, <16 x i16> %230) #7
  %232 = bitcast <4 x i64> %227 to <16 x i16>
  %233 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %189, <16 x i16> %232) #7
  %234 = bitcast <4 x i64> %225 to <16 x i16>
  %235 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %185, <16 x i16> %234) #7
  %236 = bitcast <4 x i64> %226 to <16 x i16>
  %237 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %187, <16 x i16> %236) #7
  %238 = icmp slt <8 x i32> %235, %237
  %239 = select <8 x i1> %238, <8 x i32> %235, <8 x i32> %237
  %240 = icmp sgt <8 x i32> %235, %237
  %241 = select <8 x i1> %240, <8 x i32> %235, <8 x i32> %237
  %242 = add <8 x i32> %231, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %243 = add <8 x i32> %242, %233
  %244 = add <8 x i32> %243, %239
  %245 = add <8 x i32> %244, %241
  %246 = ashr <8 x i32> %245, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %247 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %183, <16 x i16> %236) #7
  %248 = bitcast <4 x i64> %229 to <16 x i16>
  %249 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %189, <16 x i16> %248) #7
  %250 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %185, <16 x i16> %232) #7
  %251 = bitcast <4 x i64> %228 to <16 x i16>
  %252 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %187, <16 x i16> %251) #7
  %253 = icmp slt <8 x i32> %250, %252
  %254 = select <8 x i1> %253, <8 x i32> %250, <8 x i32> %252
  %255 = icmp sgt <8 x i32> %250, %252
  %256 = select <8 x i1> %255, <8 x i32> %250, <8 x i32> %252
  %257 = add <8 x i32> %247, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %258 = add <8 x i32> %257, %249
  %259 = add <8 x i32> %258, %254
  %260 = add <8 x i32> %259, %256
  %261 = ashr <8 x i32> %260, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %262 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %246, <8 x i32> %261) #7
  %263 = icmp slt <16 x i16> %262, %53
  %264 = select <16 x i1> %263, <16 x i16> %262, <16 x i16> %53
  %265 = bitcast <16 x i16> %264 to <4 x i64>
  %266 = bitcast i16* %193 to <2 x i64>*
  %267 = shufflevector <4 x i64> %265, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %267, <2 x i64>* %266, align 1
  %268 = getelementptr inbounds i16, i16* %193, i64 %3
  %269 = bitcast <16 x i16> %264 to <8 x i32>
  %270 = shufflevector <8 x i32> %269, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %271 = bitcast i16* %268 to <4 x i32>*
  store <4 x i32> %270, <4 x i32>* %271, align 1
  %272 = add i32 %192, -2
  %273 = getelementptr inbounds i16, i16* %194, i64 %55
  %274 = getelementptr inbounds i16, i16* %193, i64 %56
  %275 = icmp ugt i32 %272, 1
  br i1 %275, label %191, label %276

276:                                              ; preds = %191
  %277 = icmp eq i32 %272, 1
  br i1 %277, label %278, label %322

278:                                              ; preds = %276
  %279 = bitcast i16* %273 to <4 x i64>*
  %280 = load <4 x i64>, <4 x i64>* %279, align 1
  %281 = bitcast <4 x i64> %280 to <8 x i32>
  %282 = shufflevector <8 x i32> %281, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5>
  %283 = bitcast <4 x i64> %280 to <32 x i8>
  %284 = shufflevector <32 x i8> %283, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %285 = bitcast <32 x i8> %284 to <4 x i64>
  %286 = shufflevector <32 x i8> %283, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %287 = bitcast <32 x i8> %286 to <4 x i64>
  %288 = bitcast <8 x i32> %282 to <32 x i8>
  %289 = shufflevector <32 x i8> %288, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %290 = bitcast <32 x i8> %289 to <4 x i64>
  %291 = shufflevector <32 x i8> %288, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %292 = bitcast <32 x i8> %291 to <4 x i64>
  %293 = shufflevector <4 x i64> %285, <4 x i64> %290, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %294 = shufflevector <4 x i64> %287, <4 x i64> %292, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %295 = shufflevector <4 x i64> %290, <4 x i64> %285, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %296 = shufflevector <4 x i64> %292, <4 x i64> %287, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %297 = bitcast <4 x i64> %293 to <16 x i16>
  %298 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %183, <16 x i16> %297) #7
  %299 = bitcast <4 x i64> %296 to <16 x i16>
  %300 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %189, <16 x i16> %299) #7
  %301 = bitcast <4 x i64> %294 to <16 x i16>
  %302 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %185, <16 x i16> %301) #7
  %303 = bitcast <4 x i64> %295 to <16 x i16>
  %304 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %187, <16 x i16> %303) #7
  %305 = icmp slt <8 x i32> %302, %304
  %306 = select <8 x i1> %305, <8 x i32> %302, <8 x i32> %304
  %307 = icmp sgt <8 x i32> %302, %304
  %308 = select <8 x i1> %307, <8 x i32> %302, <8 x i32> %304
  %309 = add <8 x i32> %298, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %310 = add <8 x i32> %309, %300
  %311 = add <8 x i32> %310, %306
  %312 = add <8 x i32> %311, %308
  %313 = ashr <8 x i32> %312, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %314 = bitcast <8 x i32> %313 to <4 x i64>
  %315 = shufflevector <4 x i64> %314, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %316 = shufflevector <8 x i32> %313, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %317 = bitcast <2 x i64> %315 to <4 x i32>
  %318 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %317, <4 x i32> %316) #7
  %319 = icmp slt <8 x i16> %318, %59
  %320 = select <8 x i1> %319, <8 x i16> %318, <8 x i16> %59
  %321 = bitcast i16* %274 to <8 x i16>*
  store <8 x i16> %320, <8 x i16>* %321, align 1
  br label %322

322:                                              ; preds = %276, %278
  %323 = getelementptr inbounds i16, i16* %172, i64 8
  %324 = getelementptr inbounds i16, i16* %173, i64 8
  %325 = add nsw i32 %174, -8
  %326 = icmp sgt i32 %325, 7
  br i1 %326, label %171, label %164

327:                                              ; preds = %166, %327
  %328 = phi i16* [ %331, %327 ], [ %169, %166 ]
  %329 = phi i16* [ %332, %327 ], [ %168, %166 ]
  %330 = phi i32 [ %333, %327 ], [ %167, %166 ]
  tail call void @vpx_highbd_filter_block1d4_h8_sse2(i16* %328, i64 %1, i16* %329, i64 %3, i32 %10, i16* %14, i32 %11) #7
  %331 = getelementptr inbounds i16, i16* %328, i64 4
  %332 = getelementptr inbounds i16, i16* %329, i64 4
  %333 = add nsw i32 %330, -4
  %334 = icmp sgt i32 %333, 3
  br i1 %334, label %327, label %985

335:                                              ; preds = %20
  %336 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 2
  %337 = load i16, i16* %336, align 2
  %338 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 5
  %339 = load i16, i16* %338, align 2
  %340 = or i16 %339, %337
  %341 = icmp eq i16 %340, 0
  %342 = icmp sgt i32 %9, 15
  br i1 %341, label %355, label %343

343:                                              ; preds = %335
  br i1 %342, label %344, label %365

344:                                              ; preds = %343
  %345 = shl nsw i32 -1, %11
  %346 = trunc i32 %345 to i16
  %347 = xor i16 %346, -1
  %348 = insertelement <16 x i16> undef, i16 %347, i32 0
  %349 = shufflevector <16 x i16> %348, <16 x i16> undef, <16 x i32> zeroinitializer
  %350 = shl i64 %1, 1
  %351 = shl i64 %3, 1
  %352 = bitcast i16* %14 to <2 x i64>*
  %353 = icmp sgt i32 %10, 1
  %354 = and i32 %10, 1
  br label %381

355:                                              ; preds = %335
  br i1 %342, label %356, label %793

356:                                              ; preds = %355
  %357 = shl nsw i32 -1, %11
  %358 = trunc i32 %357 to i16
  %359 = xor i16 %358, -1
  %360 = insertelement <16 x i16> undef, i16 %359, i32 0
  %361 = shufflevector <16 x i16> %360, <16 x i16> undef, <16 x i32> zeroinitializer
  %362 = bitcast i16* %14 to <2 x i64>*
  br label %810

363:                                              ; preds = %579
  %364 = and i32 %9, 15
  br label %365

365:                                              ; preds = %363, %343
  %366 = phi i32 [ %9, %343 ], [ %364, %363 ]
  %367 = phi i16* [ %2, %343 ], [ %581, %363 ]
  %368 = phi i16* [ %0, %343 ], [ %580, %363 ]
  %369 = icmp sgt i32 %366, 7
  br i1 %369, label %370, label %586

370:                                              ; preds = %365
  %371 = shl nsw i32 -1, %11
  %372 = trunc i32 %371 to i16
  %373 = xor i16 %372, -1
  %374 = insertelement <16 x i16> undef, i16 %373, i32 0
  %375 = shufflevector <16 x i16> %374, <16 x i16> undef, <16 x i32> zeroinitializer
  %376 = shl i64 %1, 1
  %377 = shl i64 %3, 1
  %378 = bitcast i16* %14 to <2 x i64>*
  %379 = icmp sgt i32 %10, 1
  %380 = and i32 %10, 1
  br label %602

381:                                              ; preds = %344, %579
  %382 = phi i16* [ %0, %344 ], [ %580, %579 ]
  %383 = phi i16* [ %2, %344 ], [ %581, %579 ]
  %384 = phi i32 [ %9, %344 ], [ %582, %579 ]
  %385 = getelementptr inbounds i16, i16* %382, i64 -1
  %386 = load <2 x i64>, <2 x i64>* %352, align 1
  %387 = shufflevector <2 x i64> %386, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %388 = bitcast <4 x i64> %387 to <8 x i32>
  %389 = shufflevector <8 x i32> %388, <8 x i32> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 5, i32 5, i32 5, i32 5>
  %390 = shufflevector <8 x i32> %388, <8 x i32> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 6, i32 6, i32 6, i32 6>
  br i1 %353, label %391, label %445

391:                                              ; preds = %381
  %392 = bitcast <8 x i32> %389 to <16 x i16>
  %393 = bitcast <8 x i32> %390 to <16 x i16>
  br label %394

394:                                              ; preds = %394, %391
  %395 = phi i32 [ %10, %391 ], [ %443, %394 ]
  %396 = phi i16* [ %385, %391 ], [ %441, %394 ]
  %397 = phi i16* [ %383, %391 ], [ %442, %394 ]
  %398 = getelementptr inbounds i16, i16* %396, i64 %1
  %399 = bitcast i16* %396 to <2 x i64>*
  %400 = load <2 x i64>, <2 x i64>* %399, align 1
  %401 = bitcast i16* %398 to <2 x i64>*
  %402 = load <2 x i64>, <2 x i64>* %401, align 1
  %403 = shufflevector <2 x i64> %400, <2 x i64> %402, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %404 = bitcast <4 x i64> %403 to <32 x i8>
  %405 = shufflevector <32 x i8> %404, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %406 = shufflevector <32 x i8> %404, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %407 = bitcast <32 x i8> %405 to <16 x i16>
  %408 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %407, <16 x i16> %392) #7
  %409 = bitcast <32 x i8> %406 to <16 x i16>
  %410 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %409, <16 x i16> %393) #7
  %411 = getelementptr inbounds i16, i16* %396, i64 4
  %412 = getelementptr inbounds i16, i16* %398, i64 4
  %413 = bitcast i16* %411 to <2 x i64>*
  %414 = load <2 x i64>, <2 x i64>* %413, align 1
  %415 = bitcast i16* %412 to <2 x i64>*
  %416 = load <2 x i64>, <2 x i64>* %415, align 1
  %417 = shufflevector <2 x i64> %414, <2 x i64> %416, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %418 = bitcast <4 x i64> %417 to <32 x i8>
  %419 = shufflevector <32 x i8> %418, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %420 = shufflevector <32 x i8> %418, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %421 = bitcast <32 x i8> %419 to <16 x i16>
  %422 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %421, <16 x i16> %392) #7
  %423 = bitcast <32 x i8> %420 to <16 x i16>
  %424 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %423, <16 x i16> %393) #7
  %425 = add <8 x i32> %408, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %426 = add <8 x i32> %425, %410
  %427 = ashr <8 x i32> %426, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %428 = add <8 x i32> %422, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %429 = add <8 x i32> %428, %424
  %430 = ashr <8 x i32> %429, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %431 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %427, <8 x i32> %430) #7
  %432 = icmp slt <16 x i16> %431, %349
  %433 = select <16 x i1> %432, <16 x i16> %431, <16 x i16> %349
  %434 = bitcast <16 x i16> %433 to <4 x i64>
  %435 = bitcast i16* %397 to <2 x i64>*
  %436 = getelementptr inbounds i16, i16* %397, i64 %3
  %437 = shufflevector <4 x i64> %434, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %437, <2 x i64>* %435, align 16
  %438 = bitcast <16 x i16> %433 to <8 x i32>
  %439 = shufflevector <8 x i32> %438, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %440 = bitcast i16* %436 to <4 x i32>*
  store <4 x i32> %439, <4 x i32>* %440, align 16
  %441 = getelementptr inbounds i16, i16* %396, i64 %350
  %442 = getelementptr inbounds i16, i16* %397, i64 %351
  %443 = add nsw i32 %395, -2
  %444 = icmp sgt i32 %443, 1
  br i1 %444, label %394, label %445

445:                                              ; preds = %394, %381
  %446 = phi i16* [ %383, %381 ], [ %442, %394 ]
  %447 = phi i16* [ %385, %381 ], [ %441, %394 ]
  %448 = phi i32 [ %10, %381 ], [ %354, %394 ]
  %449 = icmp eq i32 %448, 1
  br i1 %449, label %450, label %481

450:                                              ; preds = %445
  %451 = getelementptr inbounds i16, i16* %447, i64 4
  %452 = bitcast i16* %447 to <2 x i64>*
  %453 = load <2 x i64>, <2 x i64>* %452, align 1
  %454 = bitcast i16* %451 to <2 x i64>*
  %455 = load <2 x i64>, <2 x i64>* %454, align 1
  %456 = shufflevector <2 x i64> %453, <2 x i64> %455, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %457 = bitcast <4 x i64> %456 to <32 x i8>
  %458 = shufflevector <32 x i8> %457, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %459 = shufflevector <32 x i8> %457, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %460 = bitcast <32 x i8> %458 to <16 x i16>
  %461 = bitcast <8 x i32> %389 to <16 x i16>
  %462 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %460, <16 x i16> %461) #7
  %463 = bitcast <32 x i8> %459 to <16 x i16>
  %464 = bitcast <8 x i32> %390 to <16 x i16>
  %465 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %463, <16 x i16> %464) #7
  %466 = add <8 x i32> %462, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %467 = add <8 x i32> %466, %465
  %468 = ashr <8 x i32> %467, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %469 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %468, <8 x i32> %468) #7
  %470 = icmp slt <16 x i16> %469, %349
  %471 = select <16 x i1> %470, <16 x i16> %469, <16 x i16> %349
  %472 = bitcast <16 x i16> %471 to <4 x i64>
  %473 = getelementptr inbounds i16, i16* %446, i64 4
  %474 = extractelement <4 x i64> %472, i32 0
  %475 = bitcast i16* %446 to i64*
  store i64 %474, i64* %475, align 1
  %476 = bitcast <16 x i16> %471 to <8 x i32>
  %477 = shufflevector <8 x i32> %476, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 undef, i32 undef>
  %478 = bitcast <4 x i32> %477 to <2 x i64>
  %479 = extractelement <2 x i64> %478, i32 0
  %480 = bitcast i16* %473 to i64*
  store i64 %479, i64* %480, align 1
  br label %481

481:                                              ; preds = %450, %445
  %482 = getelementptr inbounds i16, i16* %383, i64 8
  %483 = getelementptr inbounds i16, i16* %382, i64 7
  %484 = load <2 x i64>, <2 x i64>* %352, align 1
  %485 = shufflevector <2 x i64> %484, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %486 = bitcast <4 x i64> %485 to <8 x i32>
  %487 = shufflevector <8 x i32> %486, <8 x i32> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 5, i32 5, i32 5, i32 5>
  %488 = shufflevector <8 x i32> %486, <8 x i32> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 6, i32 6, i32 6, i32 6>
  br i1 %353, label %489, label %543

489:                                              ; preds = %481
  %490 = bitcast <8 x i32> %487 to <16 x i16>
  %491 = bitcast <8 x i32> %488 to <16 x i16>
  br label %492

492:                                              ; preds = %492, %489
  %493 = phi i32 [ %10, %489 ], [ %541, %492 ]
  %494 = phi i16* [ %483, %489 ], [ %539, %492 ]
  %495 = phi i16* [ %482, %489 ], [ %540, %492 ]
  %496 = getelementptr inbounds i16, i16* %494, i64 %1
  %497 = bitcast i16* %494 to <2 x i64>*
  %498 = load <2 x i64>, <2 x i64>* %497, align 1
  %499 = bitcast i16* %496 to <2 x i64>*
  %500 = load <2 x i64>, <2 x i64>* %499, align 1
  %501 = shufflevector <2 x i64> %498, <2 x i64> %500, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %502 = bitcast <4 x i64> %501 to <32 x i8>
  %503 = shufflevector <32 x i8> %502, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %504 = shufflevector <32 x i8> %502, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %505 = bitcast <32 x i8> %503 to <16 x i16>
  %506 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %505, <16 x i16> %490) #7
  %507 = bitcast <32 x i8> %504 to <16 x i16>
  %508 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %507, <16 x i16> %491) #7
  %509 = getelementptr inbounds i16, i16* %494, i64 4
  %510 = getelementptr inbounds i16, i16* %496, i64 4
  %511 = bitcast i16* %509 to <2 x i64>*
  %512 = load <2 x i64>, <2 x i64>* %511, align 1
  %513 = bitcast i16* %510 to <2 x i64>*
  %514 = load <2 x i64>, <2 x i64>* %513, align 1
  %515 = shufflevector <2 x i64> %512, <2 x i64> %514, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %516 = bitcast <4 x i64> %515 to <32 x i8>
  %517 = shufflevector <32 x i8> %516, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %518 = shufflevector <32 x i8> %516, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %519 = bitcast <32 x i8> %517 to <16 x i16>
  %520 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %519, <16 x i16> %490) #7
  %521 = bitcast <32 x i8> %518 to <16 x i16>
  %522 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %521, <16 x i16> %491) #7
  %523 = add <8 x i32> %506, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %524 = add <8 x i32> %523, %508
  %525 = ashr <8 x i32> %524, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %526 = add <8 x i32> %520, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %527 = add <8 x i32> %526, %522
  %528 = ashr <8 x i32> %527, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %529 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %525, <8 x i32> %528) #7
  %530 = icmp slt <16 x i16> %529, %349
  %531 = select <16 x i1> %530, <16 x i16> %529, <16 x i16> %349
  %532 = bitcast <16 x i16> %531 to <4 x i64>
  %533 = bitcast i16* %495 to <2 x i64>*
  %534 = getelementptr inbounds i16, i16* %495, i64 %3
  %535 = shufflevector <4 x i64> %532, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %535, <2 x i64>* %533, align 16
  %536 = bitcast <16 x i16> %531 to <8 x i32>
  %537 = shufflevector <8 x i32> %536, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %538 = bitcast i16* %534 to <4 x i32>*
  store <4 x i32> %537, <4 x i32>* %538, align 16
  %539 = getelementptr inbounds i16, i16* %494, i64 %350
  %540 = getelementptr inbounds i16, i16* %495, i64 %351
  %541 = add nsw i32 %493, -2
  %542 = icmp sgt i32 %541, 1
  br i1 %542, label %492, label %543

543:                                              ; preds = %492, %481
  %544 = phi i16* [ %482, %481 ], [ %540, %492 ]
  %545 = phi i16* [ %483, %481 ], [ %539, %492 ]
  %546 = phi i32 [ %10, %481 ], [ %354, %492 ]
  %547 = icmp eq i32 %546, 1
  br i1 %547, label %548, label %579

548:                                              ; preds = %543
  %549 = getelementptr inbounds i16, i16* %545, i64 4
  %550 = bitcast i16* %545 to <2 x i64>*
  %551 = load <2 x i64>, <2 x i64>* %550, align 1
  %552 = bitcast i16* %549 to <2 x i64>*
  %553 = load <2 x i64>, <2 x i64>* %552, align 1
  %554 = shufflevector <2 x i64> %551, <2 x i64> %553, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %555 = bitcast <4 x i64> %554 to <32 x i8>
  %556 = shufflevector <32 x i8> %555, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %557 = shufflevector <32 x i8> %555, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %558 = bitcast <32 x i8> %556 to <16 x i16>
  %559 = bitcast <8 x i32> %487 to <16 x i16>
  %560 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %558, <16 x i16> %559) #7
  %561 = bitcast <32 x i8> %557 to <16 x i16>
  %562 = bitcast <8 x i32> %488 to <16 x i16>
  %563 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %561, <16 x i16> %562) #7
  %564 = add <8 x i32> %560, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %565 = add <8 x i32> %564, %563
  %566 = ashr <8 x i32> %565, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %567 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %566, <8 x i32> %566) #7
  %568 = icmp slt <16 x i16> %567, %349
  %569 = select <16 x i1> %568, <16 x i16> %567, <16 x i16> %349
  %570 = bitcast <16 x i16> %569 to <4 x i64>
  %571 = getelementptr inbounds i16, i16* %544, i64 4
  %572 = extractelement <4 x i64> %570, i32 0
  %573 = bitcast i16* %544 to i64*
  store i64 %572, i64* %573, align 1
  %574 = bitcast <16 x i16> %569 to <8 x i32>
  %575 = shufflevector <8 x i32> %574, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 undef, i32 undef>
  %576 = bitcast <4 x i32> %575 to <2 x i64>
  %577 = extractelement <2 x i64> %576, i32 0
  %578 = bitcast i16* %571 to i64*
  store i64 %577, i64* %578, align 1
  br label %579

579:                                              ; preds = %543, %548
  %580 = getelementptr inbounds i16, i16* %382, i64 16
  %581 = getelementptr inbounds i16, i16* %383, i64 16
  %582 = add nsw i32 %384, -16
  %583 = icmp sgt i32 %582, 15
  br i1 %583, label %381, label %363

584:                                              ; preds = %702
  %585 = and i32 %366, 7
  br label %586

586:                                              ; preds = %584, %365
  %587 = phi i32 [ %366, %365 ], [ %585, %584 ]
  %588 = phi i16* [ %367, %365 ], [ %704, %584 ]
  %589 = phi i16* [ %368, %365 ], [ %703, %584 ]
  %590 = icmp sgt i32 %587, 3
  br i1 %590, label %591, label %987

591:                                              ; preds = %586
  %592 = shl nsw i32 -1, %11
  %593 = trunc i32 %592 to i16
  %594 = xor i16 %593, -1
  %595 = insertelement <16 x i16> undef, i16 %594, i32 0
  %596 = shufflevector <16 x i16> %595, <16 x i16> undef, <16 x i32> zeroinitializer
  %597 = shl i64 %1, 1
  %598 = shl i64 %3, 1
  %599 = bitcast i16* %14 to <2 x i64>*
  %600 = icmp sgt i32 %10, 1
  %601 = and i32 %10, 1
  br label %707

602:                                              ; preds = %370, %702
  %603 = phi i16* [ %368, %370 ], [ %703, %702 ]
  %604 = phi i16* [ %367, %370 ], [ %704, %702 ]
  %605 = phi i32 [ %366, %370 ], [ %705, %702 ]
  %606 = getelementptr inbounds i16, i16* %603, i64 -1
  %607 = load <2 x i64>, <2 x i64>* %378, align 1
  %608 = shufflevector <2 x i64> %607, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %609 = bitcast <4 x i64> %608 to <8 x i32>
  %610 = shufflevector <8 x i32> %609, <8 x i32> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 5, i32 5, i32 5, i32 5>
  %611 = shufflevector <8 x i32> %609, <8 x i32> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 6, i32 6, i32 6, i32 6>
  br i1 %379, label %612, label %666

612:                                              ; preds = %602
  %613 = bitcast <8 x i32> %610 to <16 x i16>
  %614 = bitcast <8 x i32> %611 to <16 x i16>
  br label %615

615:                                              ; preds = %615, %612
  %616 = phi i32 [ %10, %612 ], [ %664, %615 ]
  %617 = phi i16* [ %606, %612 ], [ %662, %615 ]
  %618 = phi i16* [ %604, %612 ], [ %663, %615 ]
  %619 = getelementptr inbounds i16, i16* %617, i64 %1
  %620 = bitcast i16* %617 to <2 x i64>*
  %621 = load <2 x i64>, <2 x i64>* %620, align 1
  %622 = bitcast i16* %619 to <2 x i64>*
  %623 = load <2 x i64>, <2 x i64>* %622, align 1
  %624 = shufflevector <2 x i64> %621, <2 x i64> %623, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %625 = bitcast <4 x i64> %624 to <32 x i8>
  %626 = shufflevector <32 x i8> %625, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %627 = shufflevector <32 x i8> %625, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %628 = bitcast <32 x i8> %626 to <16 x i16>
  %629 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %628, <16 x i16> %613) #7
  %630 = bitcast <32 x i8> %627 to <16 x i16>
  %631 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %630, <16 x i16> %614) #7
  %632 = getelementptr inbounds i16, i16* %617, i64 4
  %633 = getelementptr inbounds i16, i16* %619, i64 4
  %634 = bitcast i16* %632 to <2 x i64>*
  %635 = load <2 x i64>, <2 x i64>* %634, align 1
  %636 = bitcast i16* %633 to <2 x i64>*
  %637 = load <2 x i64>, <2 x i64>* %636, align 1
  %638 = shufflevector <2 x i64> %635, <2 x i64> %637, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %639 = bitcast <4 x i64> %638 to <32 x i8>
  %640 = shufflevector <32 x i8> %639, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %641 = shufflevector <32 x i8> %639, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %642 = bitcast <32 x i8> %640 to <16 x i16>
  %643 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %642, <16 x i16> %613) #7
  %644 = bitcast <32 x i8> %641 to <16 x i16>
  %645 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %644, <16 x i16> %614) #7
  %646 = add <8 x i32> %629, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %647 = add <8 x i32> %646, %631
  %648 = ashr <8 x i32> %647, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %649 = add <8 x i32> %643, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %650 = add <8 x i32> %649, %645
  %651 = ashr <8 x i32> %650, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %652 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %648, <8 x i32> %651) #7
  %653 = icmp slt <16 x i16> %652, %375
  %654 = select <16 x i1> %653, <16 x i16> %652, <16 x i16> %375
  %655 = bitcast <16 x i16> %654 to <4 x i64>
  %656 = bitcast i16* %618 to <2 x i64>*
  %657 = getelementptr inbounds i16, i16* %618, i64 %3
  %658 = shufflevector <4 x i64> %655, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %658, <2 x i64>* %656, align 16
  %659 = bitcast <16 x i16> %654 to <8 x i32>
  %660 = shufflevector <8 x i32> %659, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %661 = bitcast i16* %657 to <4 x i32>*
  store <4 x i32> %660, <4 x i32>* %661, align 16
  %662 = getelementptr inbounds i16, i16* %617, i64 %376
  %663 = getelementptr inbounds i16, i16* %618, i64 %377
  %664 = add nsw i32 %616, -2
  %665 = icmp sgt i32 %664, 1
  br i1 %665, label %615, label %666

666:                                              ; preds = %615, %602
  %667 = phi i16* [ %604, %602 ], [ %663, %615 ]
  %668 = phi i16* [ %606, %602 ], [ %662, %615 ]
  %669 = phi i32 [ %10, %602 ], [ %380, %615 ]
  %670 = icmp eq i32 %669, 1
  br i1 %670, label %671, label %702

671:                                              ; preds = %666
  %672 = getelementptr inbounds i16, i16* %668, i64 4
  %673 = bitcast i16* %668 to <2 x i64>*
  %674 = load <2 x i64>, <2 x i64>* %673, align 1
  %675 = bitcast i16* %672 to <2 x i64>*
  %676 = load <2 x i64>, <2 x i64>* %675, align 1
  %677 = shufflevector <2 x i64> %674, <2 x i64> %676, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %678 = bitcast <4 x i64> %677 to <32 x i8>
  %679 = shufflevector <32 x i8> %678, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %680 = shufflevector <32 x i8> %678, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %681 = bitcast <32 x i8> %679 to <16 x i16>
  %682 = bitcast <8 x i32> %610 to <16 x i16>
  %683 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %681, <16 x i16> %682) #7
  %684 = bitcast <32 x i8> %680 to <16 x i16>
  %685 = bitcast <8 x i32> %611 to <16 x i16>
  %686 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %684, <16 x i16> %685) #7
  %687 = add <8 x i32> %683, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %688 = add <8 x i32> %687, %686
  %689 = ashr <8 x i32> %688, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %690 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %689, <8 x i32> %689) #7
  %691 = icmp slt <16 x i16> %690, %375
  %692 = select <16 x i1> %691, <16 x i16> %690, <16 x i16> %375
  %693 = bitcast <16 x i16> %692 to <4 x i64>
  %694 = getelementptr inbounds i16, i16* %667, i64 4
  %695 = extractelement <4 x i64> %693, i32 0
  %696 = bitcast i16* %667 to i64*
  store i64 %695, i64* %696, align 1
  %697 = bitcast <16 x i16> %692 to <8 x i32>
  %698 = shufflevector <8 x i32> %697, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 undef, i32 undef>
  %699 = bitcast <4 x i32> %698 to <2 x i64>
  %700 = extractelement <2 x i64> %699, i32 0
  %701 = bitcast i16* %694 to i64*
  store i64 %700, i64* %701, align 1
  br label %702

702:                                              ; preds = %666, %671
  %703 = getelementptr inbounds i16, i16* %603, i64 8
  %704 = getelementptr inbounds i16, i16* %604, i64 8
  %705 = add nsw i32 %605, -8
  %706 = icmp sgt i32 %705, 7
  br i1 %706, label %602, label %584

707:                                              ; preds = %591, %786
  %708 = phi i16* [ %589, %591 ], [ %787, %786 ]
  %709 = phi i16* [ %588, %591 ], [ %788, %786 ]
  %710 = phi i32 [ %587, %591 ], [ %789, %786 ]
  %711 = getelementptr inbounds i16, i16* %708, i64 -1
  %712 = load <2 x i64>, <2 x i64>* %599, align 1
  %713 = shufflevector <2 x i64> %712, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %714 = bitcast <4 x i64> %713 to <8 x i32>
  %715 = shufflevector <8 x i32> %714, <8 x i32> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 5, i32 5, i32 5, i32 5>
  %716 = shufflevector <8 x i32> %714, <8 x i32> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 6, i32 6, i32 6, i32 6>
  br i1 %600, label %717, label %756

717:                                              ; preds = %707
  %718 = bitcast <8 x i32> %715 to <16 x i16>
  %719 = bitcast <8 x i32> %716 to <16 x i16>
  br label %720

720:                                              ; preds = %720, %717
  %721 = phi i32 [ %10, %717 ], [ %754, %720 ]
  %722 = phi i16* [ %711, %717 ], [ %752, %720 ]
  %723 = phi i16* [ %709, %717 ], [ %753, %720 ]
  %724 = getelementptr inbounds i16, i16* %722, i64 %1
  %725 = bitcast i16* %722 to <2 x i64>*
  %726 = load <2 x i64>, <2 x i64>* %725, align 1
  %727 = bitcast i16* %724 to <2 x i64>*
  %728 = load <2 x i64>, <2 x i64>* %727, align 1
  %729 = shufflevector <2 x i64> %726, <2 x i64> %728, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %730 = bitcast <4 x i64> %729 to <32 x i8>
  %731 = shufflevector <32 x i8> %730, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %732 = shufflevector <32 x i8> %730, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %733 = bitcast <32 x i8> %731 to <16 x i16>
  %734 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %733, <16 x i16> %718) #7
  %735 = bitcast <32 x i8> %732 to <16 x i16>
  %736 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %735, <16 x i16> %719) #7
  %737 = add <8 x i32> %734, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %738 = add <8 x i32> %737, %736
  %739 = ashr <8 x i32> %738, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %740 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %739, <8 x i32> %739) #7
  %741 = icmp slt <16 x i16> %740, %596
  %742 = select <16 x i1> %741, <16 x i16> %740, <16 x i16> %596
  %743 = bitcast <16 x i16> %742 to <4 x i64>
  %744 = getelementptr inbounds i16, i16* %723, i64 %3
  %745 = extractelement <4 x i64> %743, i32 0
  %746 = bitcast i16* %723 to i64*
  store i64 %745, i64* %746, align 1
  %747 = bitcast <16 x i16> %742 to <8 x i32>
  %748 = shufflevector <8 x i32> %747, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 undef, i32 undef>
  %749 = bitcast <4 x i32> %748 to <2 x i64>
  %750 = extractelement <2 x i64> %749, i32 0
  %751 = bitcast i16* %744 to i64*
  store i64 %750, i64* %751, align 1
  %752 = getelementptr inbounds i16, i16* %722, i64 %597
  %753 = getelementptr inbounds i16, i16* %723, i64 %598
  %754 = add nsw i32 %721, -2
  %755 = icmp sgt i32 %754, 1
  br i1 %755, label %720, label %756

756:                                              ; preds = %720, %707
  %757 = phi i16* [ %709, %707 ], [ %753, %720 ]
  %758 = phi i16* [ %711, %707 ], [ %752, %720 ]
  %759 = phi i32 [ %10, %707 ], [ %601, %720 ]
  %760 = icmp eq i32 %759, 1
  br i1 %760, label %761, label %786

761:                                              ; preds = %756
  %762 = getelementptr inbounds i16, i16* %758, i64 4
  %763 = bitcast i16* %758 to <2 x i64>*
  %764 = load <2 x i64>, <2 x i64>* %763, align 1
  %765 = bitcast i16* %762 to <2 x i64>*
  %766 = load <2 x i64>, <2 x i64>* %765, align 1
  %767 = shufflevector <2 x i64> %764, <2 x i64> %766, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %768 = bitcast <4 x i64> %767 to <32 x i8>
  %769 = shufflevector <32 x i8> %768, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %770 = shufflevector <32 x i8> %768, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %771 = bitcast <32 x i8> %769 to <16 x i16>
  %772 = bitcast <8 x i32> %715 to <16 x i16>
  %773 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %771, <16 x i16> %772) #7
  %774 = bitcast <32 x i8> %770 to <16 x i16>
  %775 = bitcast <8 x i32> %716 to <16 x i16>
  %776 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %774, <16 x i16> %775) #7
  %777 = add <8 x i32> %773, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %778 = add <8 x i32> %777, %776
  %779 = ashr <8 x i32> %778, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %780 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %779, <8 x i32> %779) #7
  %781 = icmp slt <16 x i16> %780, %596
  %782 = select <16 x i1> %781, <16 x i16> %780, <16 x i16> %596
  %783 = bitcast <16 x i16> %782 to <4 x i64>
  %784 = extractelement <4 x i64> %783, i32 0
  %785 = bitcast i16* %757 to i64*
  store i64 %784, i64* %785, align 1
  br label %786

786:                                              ; preds = %756, %761
  %787 = getelementptr inbounds i16, i16* %708, i64 4
  %788 = getelementptr inbounds i16, i16* %709, i64 4
  %789 = add nsw i32 %710, -4
  %790 = icmp sgt i32 %789, 3
  br i1 %790, label %707, label %983

791:                                              ; preds = %867
  %792 = and i32 %9, 15
  br label %793

793:                                              ; preds = %791, %355
  %794 = phi i32 [ %9, %355 ], [ %792, %791 ]
  %795 = phi i16* [ %2, %355 ], [ %869, %791 ]
  %796 = phi i16* [ %0, %355 ], [ %868, %791 ]
  %797 = icmp sgt i32 %794, 7
  br i1 %797, label %798, label %874

798:                                              ; preds = %793
  %799 = shl nsw i32 -1, %11
  %800 = trunc i32 %799 to i16
  %801 = xor i16 %800, -1
  %802 = insertelement <16 x i16> undef, i16 %801, i32 0
  %803 = shufflevector <16 x i16> %802, <16 x i16> undef, <16 x i32> zeroinitializer
  %804 = bitcast i16* %14 to <2 x i64>*
  %805 = shl i64 %1, 1
  %806 = shl i64 %3, 1
  %807 = bitcast <16 x i16> %803 to <4 x i64>
  %808 = shufflevector <4 x i64> %807, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %809 = bitcast <2 x i64> %808 to <8 x i16>
  br label %879

810:                                              ; preds = %356, %867
  %811 = phi i16* [ %0, %356 ], [ %868, %867 ]
  %812 = phi i16* [ %2, %356 ], [ %869, %867 ]
  %813 = phi i32 [ %9, %356 ], [ %870, %867 ]
  %814 = load <2 x i64>, <2 x i64>* %362, align 1
  %815 = shufflevector <2 x i64> %814, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %816 = bitcast <4 x i64> %815 to <8 x i32>
  %817 = bitcast <2 x i64> %814 to <4 x i32>
  %818 = shufflevector <4 x i32> %817, <4 x i32> undef, <8 x i32> <i32 undef, i32 1, i32 2, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %819 = shufflevector <8 x i32> %816, <8 x i32> %818, <8 x i32> <i32 undef, i32 1, i32 2, i32 undef, i32 undef, i32 9, i32 10, i32 undef>
  %820 = bitcast <8 x i32> %819 to <32 x i8>
  %821 = shufflevector <32 x i8> %820, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9, i32 22, i32 23, i32 24, i32 25, i32 22, i32 23, i32 24, i32 25, i32 22, i32 23, i32 24, i32 25, i32 22, i32 23, i32 24, i32 25>
  %822 = getelementptr inbounds i16, i16* %811, i64 -3
  %823 = bitcast <32 x i8> %821 to <16 x i16>
  br label %824

824:                                              ; preds = %824, %810
  %825 = phi i32 [ %10, %810 ], [ %863, %824 ]
  %826 = phi i16* [ %812, %810 ], [ %865, %824 ]
  %827 = phi i16* [ %822, %810 ], [ %864, %824 ]
  %828 = bitcast i16* %827 to <4 x i64>*
  %829 = load <4 x i64>, <4 x i64>* %828, align 1
  %830 = getelementptr inbounds i16, i16* %827, i64 8
  %831 = bitcast i16* %830 to <4 x i64>*
  %832 = load <4 x i64>, <4 x i64>* %831, align 1
  %833 = bitcast <4 x i64> %829 to <32 x i8>
  %834 = shufflevector <32 x i8> %833, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %835 = bitcast <32 x i8> %834 to <4 x i64>
  %836 = bitcast <4 x i64> %832 to <32 x i8>
  %837 = shufflevector <32 x i8> %836, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %838 = bitcast <32 x i8> %837 to <4 x i64>
  %839 = bitcast <4 x i64> %829 to <8 x i32>
  %840 = shufflevector <8 x i32> %839, <8 x i32> undef, <8 x i32> <i32 undef, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef>
  %841 = bitcast <4 x i64> %832 to <8 x i32>
  %842 = shufflevector <8 x i32> %841, <8 x i32> undef, <8 x i32> <i32 undef, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef>
  %843 = bitcast <8 x i32> %840 to <32 x i8>
  %844 = shufflevector <32 x i8> %843, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %845 = bitcast <32 x i8> %844 to <4 x i64>
  %846 = bitcast <8 x i32> %842 to <32 x i8>
  %847 = shufflevector <32 x i8> %846, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %848 = bitcast <32 x i8> %847 to <4 x i64>
  %849 = shufflevector <4 x i64> %835, <4 x i64> %838, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %850 = shufflevector <4 x i64> %845, <4 x i64> %848, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %851 = bitcast <4 x i64> %849 to <16 x i16>
  %852 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %851, <16 x i16> %823) #7
  %853 = bitcast <4 x i64> %850 to <16 x i16>
  %854 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %853, <16 x i16> %823) #7
  %855 = add <8 x i32> %852, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %856 = add <8 x i32> %854, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %857 = ashr <8 x i32> %855, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %858 = ashr <8 x i32> %856, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %859 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %857, <8 x i32> %858) #7
  %860 = icmp slt <16 x i16> %859, %361
  %861 = select <16 x i1> %860, <16 x i16> %859, <16 x i16> %361
  %862 = bitcast i16* %826 to <16 x i16>*
  store <16 x i16> %861, <16 x i16>* %862, align 1
  %863 = add i32 %825, -1
  %864 = getelementptr inbounds i16, i16* %827, i64 %1
  %865 = getelementptr inbounds i16, i16* %826, i64 %3
  %866 = icmp eq i32 %863, 0
  br i1 %866, label %867, label %824

867:                                              ; preds = %824
  %868 = getelementptr inbounds i16, i16* %811, i64 16
  %869 = getelementptr inbounds i16, i16* %812, i64 16
  %870 = add nsw i32 %813, -16
  %871 = icmp sgt i32 %870, 15
  br i1 %871, label %810, label %791

872:                                              ; preds = %968
  %873 = and i32 %794, 7
  br label %874

874:                                              ; preds = %872, %793
  %875 = phi i32 [ %794, %793 ], [ %873, %872 ]
  %876 = phi i16* [ %795, %793 ], [ %970, %872 ]
  %877 = phi i16* [ %796, %793 ], [ %969, %872 ]
  %878 = icmp sgt i32 %875, 3
  br i1 %878, label %973, label %987

879:                                              ; preds = %798, %968
  %880 = phi i16* [ %796, %798 ], [ %969, %968 ]
  %881 = phi i16* [ %795, %798 ], [ %970, %968 ]
  %882 = phi i32 [ %794, %798 ], [ %971, %968 ]
  %883 = load <2 x i64>, <2 x i64>* %804, align 1
  %884 = shufflevector <2 x i64> %883, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %885 = bitcast <4 x i64> %884 to <8 x i32>
  %886 = bitcast <2 x i64> %883 to <4 x i32>
  %887 = shufflevector <4 x i32> %886, <4 x i32> undef, <8 x i32> <i32 undef, i32 1, i32 2, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %888 = shufflevector <8 x i32> %885, <8 x i32> %887, <8 x i32> <i32 undef, i32 1, i32 2, i32 undef, i32 undef, i32 9, i32 10, i32 undef>
  %889 = bitcast <8 x i32> %888 to <32 x i8>
  %890 = shufflevector <32 x i8> %889, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9, i32 22, i32 23, i32 24, i32 25, i32 22, i32 23, i32 24, i32 25, i32 22, i32 23, i32 24, i32 25, i32 22, i32 23, i32 24, i32 25>
  %891 = getelementptr inbounds i16, i16* %880, i64 -3
  %892 = bitcast <32 x i8> %890 to <16 x i16>
  br label %893

893:                                              ; preds = %893, %879
  %894 = phi i32 [ %10, %879 ], [ %938, %893 ]
  %895 = phi i16* [ %881, %879 ], [ %940, %893 ]
  %896 = phi i16* [ %891, %879 ], [ %939, %893 ]
  %897 = bitcast i16* %896 to <4 x i64>*
  %898 = load <4 x i64>, <4 x i64>* %897, align 1
  %899 = getelementptr inbounds i16, i16* %896, i64 %1
  %900 = bitcast i16* %899 to <4 x i64>*
  %901 = load <4 x i64>, <4 x i64>* %900, align 1
  %902 = bitcast <4 x i64> %898 to <32 x i8>
  %903 = shufflevector <32 x i8> %902, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %904 = bitcast <32 x i8> %903 to <4 x i64>
  %905 = bitcast <4 x i64> %901 to <32 x i8>
  %906 = shufflevector <32 x i8> %905, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %907 = bitcast <32 x i8> %906 to <4 x i64>
  %908 = bitcast <4 x i64> %898 to <8 x i32>
  %909 = shufflevector <8 x i32> %908, <8 x i32> undef, <8 x i32> <i32 undef, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef>
  %910 = bitcast <4 x i64> %901 to <8 x i32>
  %911 = shufflevector <8 x i32> %910, <8 x i32> undef, <8 x i32> <i32 undef, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef>
  %912 = bitcast <8 x i32> %909 to <32 x i8>
  %913 = shufflevector <32 x i8> %912, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %914 = bitcast <32 x i8> %913 to <4 x i64>
  %915 = bitcast <8 x i32> %911 to <32 x i8>
  %916 = shufflevector <32 x i8> %915, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %917 = bitcast <32 x i8> %916 to <4 x i64>
  %918 = shufflevector <4 x i64> %904, <4 x i64> %907, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %919 = shufflevector <4 x i64> %914, <4 x i64> %917, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %920 = bitcast <4 x i64> %918 to <16 x i16>
  %921 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %920, <16 x i16> %892) #7
  %922 = bitcast <4 x i64> %919 to <16 x i16>
  %923 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %922, <16 x i16> %892) #7
  %924 = add <8 x i32> %921, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %925 = add <8 x i32> %923, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %926 = ashr <8 x i32> %924, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %927 = ashr <8 x i32> %925, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %928 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %926, <8 x i32> %927) #7
  %929 = icmp slt <16 x i16> %928, %803
  %930 = select <16 x i1> %929, <16 x i16> %928, <16 x i16> %803
  %931 = bitcast <16 x i16> %930 to <4 x i64>
  %932 = bitcast i16* %895 to <2 x i64>*
  %933 = shufflevector <4 x i64> %931, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %933, <2 x i64>* %932, align 1
  %934 = getelementptr inbounds i16, i16* %895, i64 %3
  %935 = bitcast <16 x i16> %930 to <8 x i32>
  %936 = shufflevector <8 x i32> %935, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %937 = bitcast i16* %934 to <4 x i32>*
  store <4 x i32> %936, <4 x i32>* %937, align 1
  %938 = add i32 %894, -2
  %939 = getelementptr inbounds i16, i16* %896, i64 %805
  %940 = getelementptr inbounds i16, i16* %895, i64 %806
  %941 = icmp ugt i32 %938, 1
  br i1 %941, label %893, label %942

942:                                              ; preds = %893
  %943 = icmp eq i32 %938, 1
  br i1 %943, label %944, label %968

944:                                              ; preds = %942
  %945 = bitcast i16* %939 to <4 x i64>*
  %946 = load <4 x i64>, <4 x i64>* %945, align 1
  %947 = bitcast <4 x i64> %946 to <32 x i8>
  %948 = shufflevector <32 x i8> %947, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %949 = bitcast <32 x i8> %948 to <4 x i64>
  %950 = bitcast <4 x i64> %946 to <8 x i32>
  %951 = shufflevector <8 x i32> %950, <8 x i32> undef, <8 x i32> <i32 undef, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef>
  %952 = bitcast <8 x i32> %951 to <32 x i8>
  %953 = shufflevector <32 x i8> %952, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %954 = bitcast <32 x i8> %953 to <4 x i64>
  %955 = shufflevector <4 x i64> %949, <4 x i64> %954, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %956 = bitcast <4 x i64> %955 to <16 x i16>
  %957 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %956, <16 x i16> %892) #7
  %958 = add <8 x i32> %957, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %959 = ashr <8 x i32> %958, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %960 = bitcast <8 x i32> %959 to <4 x i64>
  %961 = shufflevector <4 x i64> %960, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %962 = shufflevector <8 x i32> %959, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %963 = bitcast <2 x i64> %961 to <4 x i32>
  %964 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %963, <4 x i32> %962) #7
  %965 = icmp slt <8 x i16> %964, %809
  %966 = select <8 x i1> %965, <8 x i16> %964, <8 x i16> %809
  %967 = bitcast i16* %940 to <8 x i16>*
  store <8 x i16> %966, <8 x i16>* %967, align 1
  br label %968

968:                                              ; preds = %942, %944
  %969 = getelementptr inbounds i16, i16* %880, i64 8
  %970 = getelementptr inbounds i16, i16* %881, i64 8
  %971 = add nsw i32 %882, -8
  %972 = icmp sgt i32 %971, 7
  br i1 %972, label %879, label %872

973:                                              ; preds = %874, %973
  %974 = phi i16* [ %977, %973 ], [ %877, %874 ]
  %975 = phi i16* [ %978, %973 ], [ %876, %874 ]
  %976 = phi i32 [ %979, %973 ], [ %875, %874 ]
  tail call void @vpx_highbd_filter_block1d4_h2_sse2(i16* %974, i64 %1, i16* %975, i64 %3, i32 %10, i16* %14, i32 %11) #7
  %977 = getelementptr inbounds i16, i16* %974, i64 4
  %978 = getelementptr inbounds i16, i16* %975, i64 4
  %979 = add nsw i32 %976, -4
  %980 = icmp sgt i32 %979, 3
  br i1 %980, label %973, label %981

981:                                              ; preds = %973
  %982 = and i32 %875, 3
  br label %987

983:                                              ; preds = %786
  %984 = and i32 %587, 3
  br label %987

985:                                              ; preds = %327
  %986 = and i32 %167, 3
  br label %987

987:                                              ; preds = %985, %983, %981, %166, %586, %874, %16, %12
  %988 = phi i32 [ %9, %16 ], [ %9, %12 ], [ %875, %874 ], [ %587, %586 ], [ %167, %166 ], [ %982, %981 ], [ %984, %983 ], [ %986, %985 ]
  %989 = phi i16* [ %2, %16 ], [ %2, %12 ], [ %876, %874 ], [ %588, %586 ], [ %168, %166 ], [ %978, %981 ], [ %788, %983 ], [ %332, %985 ]
  %990 = phi i16* [ %0, %16 ], [ %0, %12 ], [ %877, %874 ], [ %589, %586 ], [ %169, %166 ], [ %977, %981 ], [ %787, %983 ], [ %331, %985 ]
  %991 = icmp eq i32 %988, 0
  br i1 %991, label %993, label %992

992:                                              ; preds = %987
  tail call void @vpx_highbd_convolve8_horiz_c(i16* %990, i64 %1, i16* %989, i64 %3, [8 x i16]* %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %988, i32 %10, i32 %11) #7
  br label %993

993:                                              ; preds = %987, %992
  ret void
}

declare void @vpx_highbd_filter_block1d4_h8_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #4

declare void @vpx_highbd_filter_block1d4_h2_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #4

declare void @vpx_highbd_convolve8_horiz_c(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_convolve8_vert_avx2(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #3 {
  %13 = sext i32 %7 to i64
  %14 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 0
  %15 = icmp eq i32 %8, 16
  br i1 %15, label %16, label %896

16:                                               ; preds = %12
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 3
  %18 = load i16, i16* %17, align 2
  %19 = icmp eq i16 %18, 128
  br i1 %19, label %896, label %20

20:                                               ; preds = %16
  %21 = load i16, i16* %14, align 2
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 1
  %23 = load i16, i16* %22, align 2
  %24 = or i16 %23, %21
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 6
  %26 = load i16, i16* %25, align 2
  %27 = or i16 %24, %26
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 7
  %29 = load i16, i16* %28, align 2
  %30 = or i16 %27, %29
  %31 = icmp eq i16 %30, 0
  br i1 %31, label %407, label %32

32:                                               ; preds = %20
  %33 = icmp sgt i32 %9, 15
  br i1 %33, label %34, label %52

34:                                               ; preds = %32
  %35 = mul i64 %1, -3
  %36 = shl nsw i32 -1, %11
  %37 = trunc i32 %36 to i16
  %38 = xor i16 %37, -1
  %39 = insertelement <16 x i16> undef, i16 %38, i32 0
  %40 = shufflevector <16 x i16> %39, <16 x i16> undef, <16 x i32> zeroinitializer
  %41 = bitcast i16* %14 to <2 x i64>*
  %42 = shl i64 %1, 1
  %43 = mul nsw i64 %1, 3
  %44 = shl nsw i64 %1, 2
  %45 = mul nsw i64 %1, 5
  %46 = mul nsw i64 %1, 6
  %47 = mul nsw i64 %1, 7
  %48 = shl nsw i64 %1, 3
  %49 = shl i64 %3, 1
  br label %73

50:                                               ; preds = %255
  %51 = and i32 %9, 15
  br label %52

52:                                               ; preds = %50, %32
  %53 = phi i32 [ %9, %32 ], [ %51, %50 ]
  %54 = phi i16* [ %2, %32 ], [ %257, %50 ]
  %55 = phi i16* [ %0, %32 ], [ %256, %50 ]
  %56 = icmp sgt i32 %53, 7
  br i1 %56, label %57, label %262

57:                                               ; preds = %52
  %58 = mul i64 %1, -3
  %59 = shl nsw i32 -1, %11
  %60 = trunc i32 %59 to i16
  %61 = xor i16 %60, -1
  %62 = insertelement <16 x i16> undef, i16 %61, i32 0
  %63 = shufflevector <16 x i16> %62, <16 x i16> undef, <16 x i32> zeroinitializer
  %64 = bitcast i16* %14 to <2 x i64>*
  %65 = shl i64 %1, 1
  %66 = mul nsw i64 %1, 3
  %67 = shl nsw i64 %1, 2
  %68 = mul nsw i64 %1, 5
  %69 = mul nsw i64 %1, 6
  %70 = mul nsw i64 %1, 7
  %71 = shl nsw i64 %1, 3
  %72 = shl i64 %3, 1
  br label %269

73:                                               ; preds = %34, %255
  %74 = phi i16* [ %0, %34 ], [ %256, %255 ]
  %75 = phi i16* [ %2, %34 ], [ %257, %255 ]
  %76 = phi i32 [ %9, %34 ], [ %258, %255 ]
  %77 = getelementptr inbounds i16, i16* %74, i64 %35
  %78 = load <2 x i64>, <2 x i64>* %41, align 1
  %79 = shufflevector <2 x i64> %78, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %80 = bitcast <4 x i64> %79 to <8 x i32>
  %81 = bitcast <2 x i64> %78 to <4 x i32>
  %82 = shufflevector <4 x i32> %81, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %83 = shufflevector <8 x i32> %80, <8 x i32> %82, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %84 = bitcast <8 x i32> %83 to <32 x i8>
  %85 = shufflevector <32 x i8> %84, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19>
  %86 = bitcast <32 x i8> %85 to <16 x i16>
  %87 = shufflevector <32 x i8> %84, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23>
  %88 = bitcast <32 x i8> %87 to <16 x i16>
  %89 = shufflevector <32 x i8> %84, <32 x i8> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27>
  %90 = bitcast <32 x i8> %89 to <16 x i16>
  %91 = shufflevector <32 x i8> %84, <32 x i8> undef, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31>
  %92 = bitcast <32 x i8> %91 to <16 x i16>
  %93 = bitcast i16* %77 to <4 x i64>*
  %94 = load <4 x i64>, <4 x i64>* %93, align 1
  %95 = getelementptr inbounds i16, i16* %77, i64 %1
  %96 = bitcast i16* %95 to <4 x i64>*
  %97 = load <4 x i64>, <4 x i64>* %96, align 1
  %98 = getelementptr inbounds i16, i16* %77, i64 %42
  %99 = bitcast i16* %98 to <4 x i64>*
  %100 = load <4 x i64>, <4 x i64>* %99, align 1
  %101 = getelementptr inbounds i16, i16* %77, i64 %43
  %102 = bitcast i16* %101 to <4 x i64>*
  %103 = load <4 x i64>, <4 x i64>* %102, align 1
  %104 = getelementptr inbounds i16, i16* %77, i64 %44
  %105 = bitcast i16* %104 to <4 x i64>*
  %106 = load <4 x i64>, <4 x i64>* %105, align 1
  %107 = getelementptr inbounds i16, i16* %77, i64 %45
  %108 = bitcast i16* %107 to <4 x i64>*
  %109 = load <4 x i64>, <4 x i64>* %108, align 1
  %110 = getelementptr inbounds i16, i16* %77, i64 %46
  %111 = bitcast i16* %110 to <4 x i64>*
  %112 = load <4 x i64>, <4 x i64>* %111, align 1
  %113 = shufflevector <4 x i64> %94, <4 x i64> %97, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %114 = shufflevector <4 x i64> %94, <4 x i64> %97, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %115 = shufflevector <4 x i64> %97, <4 x i64> %100, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %116 = shufflevector <4 x i64> %97, <4 x i64> %100, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %117 = bitcast <4 x i64> %113 to <16 x i16>
  %118 = bitcast <4 x i64> %115 to <16 x i16>
  %119 = shufflevector <16 x i16> %117, <16 x i16> %118, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %120 = shufflevector <16 x i16> %117, <16 x i16> %118, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %121 = bitcast <4 x i64> %114 to <16 x i16>
  %122 = bitcast <4 x i64> %116 to <16 x i16>
  %123 = shufflevector <16 x i16> %121, <16 x i16> %122, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %124 = shufflevector <16 x i16> %121, <16 x i16> %122, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %125 = shufflevector <4 x i64> %100, <4 x i64> %103, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %126 = shufflevector <4 x i64> %100, <4 x i64> %103, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %127 = shufflevector <4 x i64> %103, <4 x i64> %106, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %128 = shufflevector <4 x i64> %103, <4 x i64> %106, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %129 = bitcast <4 x i64> %125 to <16 x i16>
  %130 = bitcast <4 x i64> %127 to <16 x i16>
  %131 = shufflevector <16 x i16> %129, <16 x i16> %130, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %132 = shufflevector <16 x i16> %129, <16 x i16> %130, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %133 = bitcast <4 x i64> %126 to <16 x i16>
  %134 = bitcast <4 x i64> %128 to <16 x i16>
  %135 = shufflevector <16 x i16> %133, <16 x i16> %134, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %136 = shufflevector <16 x i16> %133, <16 x i16> %134, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %137 = shufflevector <4 x i64> %106, <4 x i64> %109, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %138 = shufflevector <4 x i64> %106, <4 x i64> %109, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %139 = shufflevector <4 x i64> %109, <4 x i64> %112, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %140 = shufflevector <4 x i64> %109, <4 x i64> %112, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %141 = bitcast <4 x i64> %137 to <16 x i16>
  %142 = bitcast <4 x i64> %139 to <16 x i16>
  %143 = shufflevector <16 x i16> %141, <16 x i16> %142, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %144 = shufflevector <16 x i16> %141, <16 x i16> %142, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %145 = bitcast <4 x i64> %138 to <16 x i16>
  %146 = bitcast <4 x i64> %140 to <16 x i16>
  %147 = shufflevector <16 x i16> %145, <16 x i16> %146, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %148 = shufflevector <16 x i16> %145, <16 x i16> %146, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  br label %149

149:                                              ; preds = %149, %73
  %150 = phi <4 x i64> [ %112, %73 ], [ %171, %149 ]
  %151 = phi <16 x i16> [ %148, %73 ], [ %183, %149 ]
  %152 = phi <16 x i16> [ %136, %73 ], [ %151, %149 ]
  %153 = phi <16 x i16> [ %124, %73 ], [ %152, %149 ]
  %154 = phi <16 x i16> [ %147, %73 ], [ %182, %149 ]
  %155 = phi <16 x i16> [ %135, %73 ], [ %154, %149 ]
  %156 = phi <16 x i16> [ %123, %73 ], [ %155, %149 ]
  %157 = phi <16 x i16> [ %144, %73 ], [ %179, %149 ]
  %158 = phi <16 x i16> [ %132, %73 ], [ %157, %149 ]
  %159 = phi <16 x i16> [ %120, %73 ], [ %158, %149 ]
  %160 = phi <16 x i16> [ %143, %73 ], [ %178, %149 ]
  %161 = phi <16 x i16> [ %131, %73 ], [ %160, %149 ]
  %162 = phi <16 x i16> [ %119, %73 ], [ %161, %149 ]
  %163 = phi i32 [ %10, %73 ], [ %253, %149 ]
  %164 = phi i16* [ %75, %73 ], [ %252, %149 ]
  %165 = phi i16* [ %77, %73 ], [ %251, %149 ]
  %166 = getelementptr inbounds i16, i16* %165, i64 %47
  %167 = bitcast i16* %166 to <4 x i64>*
  %168 = load <4 x i64>, <4 x i64>* %167, align 1
  %169 = getelementptr inbounds i16, i16* %165, i64 %48
  %170 = bitcast i16* %169 to <4 x i64>*
  %171 = load <4 x i64>, <4 x i64>* %170, align 1
  %172 = shufflevector <4 x i64> %150, <4 x i64> %168, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %173 = shufflevector <4 x i64> %150, <4 x i64> %168, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %174 = shufflevector <4 x i64> %168, <4 x i64> %171, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %175 = shufflevector <4 x i64> %168, <4 x i64> %171, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %176 = bitcast <4 x i64> %172 to <16 x i16>
  %177 = bitcast <4 x i64> %174 to <16 x i16>
  %178 = shufflevector <16 x i16> %176, <16 x i16> %177, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %179 = shufflevector <16 x i16> %176, <16 x i16> %177, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %180 = bitcast <4 x i64> %173 to <16 x i16>
  %181 = bitcast <4 x i64> %175 to <16 x i16>
  %182 = shufflevector <16 x i16> %180, <16 x i16> %181, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %183 = shufflevector <16 x i16> %180, <16 x i16> %181, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %184 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %86, <16 x i16> %162) #7
  %185 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %92, <16 x i16> %178) #7
  %186 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %88, <16 x i16> %161) #7
  %187 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %90, <16 x i16> %160) #7
  %188 = icmp slt <8 x i32> %186, %187
  %189 = select <8 x i1> %188, <8 x i32> %186, <8 x i32> %187
  %190 = icmp sgt <8 x i32> %186, %187
  %191 = select <8 x i1> %190, <8 x i32> %186, <8 x i32> %187
  %192 = add <8 x i32> %184, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %193 = add <8 x i32> %192, %185
  %194 = add <8 x i32> %193, %189
  %195 = add <8 x i32> %194, %191
  %196 = ashr <8 x i32> %195, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %197 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %86, <16 x i16> %159) #7
  %198 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %92, <16 x i16> %179) #7
  %199 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %88, <16 x i16> %158) #7
  %200 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %90, <16 x i16> %157) #7
  %201 = icmp slt <8 x i32> %199, %200
  %202 = select <8 x i1> %201, <8 x i32> %199, <8 x i32> %200
  %203 = icmp sgt <8 x i32> %199, %200
  %204 = select <8 x i1> %203, <8 x i32> %199, <8 x i32> %200
  %205 = add <8 x i32> %197, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %206 = add <8 x i32> %205, %198
  %207 = add <8 x i32> %206, %202
  %208 = add <8 x i32> %207, %204
  %209 = ashr <8 x i32> %208, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %210 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %86, <16 x i16> %156) #7
  %211 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %92, <16 x i16> %182) #7
  %212 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %88, <16 x i16> %155) #7
  %213 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %90, <16 x i16> %154) #7
  %214 = icmp slt <8 x i32> %212, %213
  %215 = select <8 x i1> %214, <8 x i32> %212, <8 x i32> %213
  %216 = icmp sgt <8 x i32> %212, %213
  %217 = select <8 x i1> %216, <8 x i32> %212, <8 x i32> %213
  %218 = add <8 x i32> %210, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %219 = add <8 x i32> %218, %211
  %220 = add <8 x i32> %219, %215
  %221 = add <8 x i32> %220, %217
  %222 = ashr <8 x i32> %221, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %223 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %86, <16 x i16> %153) #7
  %224 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %92, <16 x i16> %183) #7
  %225 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %88, <16 x i16> %152) #7
  %226 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %90, <16 x i16> %151) #7
  %227 = icmp slt <8 x i32> %225, %226
  %228 = select <8 x i1> %227, <8 x i32> %225, <8 x i32> %226
  %229 = icmp sgt <8 x i32> %225, %226
  %230 = select <8 x i1> %229, <8 x i32> %225, <8 x i32> %226
  %231 = add <8 x i32> %223, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %232 = add <8 x i32> %231, %224
  %233 = add <8 x i32> %232, %228
  %234 = add <8 x i32> %233, %230
  %235 = ashr <8 x i32> %234, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %236 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %196, <8 x i32> %209) #7
  %237 = bitcast <16 x i16> %236 to <4 x i64>
  %238 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %222, <8 x i32> %235) #7
  %239 = bitcast <16 x i16> %238 to <4 x i64>
  %240 = shufflevector <4 x i64> %237, <4 x i64> %239, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %241 = shufflevector <4 x i64> %237, <4 x i64> %239, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %242 = bitcast <4 x i64> %240 to <16 x i16>
  %243 = icmp sgt <16 x i16> %40, %242
  %244 = select <16 x i1> %243, <16 x i16> %242, <16 x i16> %40
  %245 = bitcast i16* %164 to <16 x i16>*
  store <16 x i16> %244, <16 x i16>* %245, align 1
  %246 = bitcast <4 x i64> %241 to <16 x i16>
  %247 = icmp sgt <16 x i16> %40, %246
  %248 = select <16 x i1> %247, <16 x i16> %246, <16 x i16> %40
  %249 = getelementptr inbounds i16, i16* %164, i64 %3
  %250 = bitcast i16* %249 to <16 x i16>*
  store <16 x i16> %248, <16 x i16>* %250, align 1
  %251 = getelementptr inbounds i16, i16* %165, i64 %42
  %252 = getelementptr inbounds i16, i16* %164, i64 %49
  %253 = add i32 %163, -2
  %254 = icmp eq i32 %253, 0
  br i1 %254, label %255, label %149

255:                                              ; preds = %149
  %256 = getelementptr inbounds i16, i16* %74, i64 16
  %257 = getelementptr inbounds i16, i16* %75, i64 16
  %258 = add nsw i32 %76, -16
  %259 = icmp sgt i32 %258, 15
  br i1 %259, label %73, label %50

260:                                              ; preds = %393
  %261 = and i32 %53, 7
  br label %262

262:                                              ; preds = %260, %52
  %263 = phi i32 [ %53, %52 ], [ %261, %260 ]
  %264 = phi i16* [ %54, %52 ], [ %395, %260 ]
  %265 = phi i16* [ %55, %52 ], [ %394, %260 ]
  %266 = icmp sgt i32 %263, 3
  br i1 %266, label %267, label %896

267:                                              ; preds = %262
  %268 = mul i64 %1, -3
  br label %398

269:                                              ; preds = %57, %393
  %270 = phi i16* [ %55, %57 ], [ %394, %393 ]
  %271 = phi i16* [ %54, %57 ], [ %395, %393 ]
  %272 = phi i32 [ %53, %57 ], [ %396, %393 ]
  %273 = getelementptr inbounds i16, i16* %270, i64 %58
  %274 = load <2 x i64>, <2 x i64>* %64, align 1
  %275 = shufflevector <2 x i64> %274, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %276 = bitcast <4 x i64> %275 to <8 x i32>
  %277 = bitcast <2 x i64> %274 to <4 x i32>
  %278 = shufflevector <4 x i32> %277, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %279 = shufflevector <8 x i32> %276, <8 x i32> %278, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %280 = bitcast <8 x i32> %279 to <32 x i8>
  %281 = shufflevector <32 x i8> %280, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19>
  %282 = bitcast <32 x i8> %281 to <16 x i16>
  %283 = shufflevector <32 x i8> %280, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23>
  %284 = bitcast <32 x i8> %283 to <16 x i16>
  %285 = shufflevector <32 x i8> %280, <32 x i8> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27>
  %286 = bitcast <32 x i8> %285 to <16 x i16>
  %287 = shufflevector <32 x i8> %280, <32 x i8> undef, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31>
  %288 = bitcast <32 x i8> %287 to <16 x i16>
  %289 = bitcast i16* %273 to <2 x i64>*
  %290 = load <2 x i64>, <2 x i64>* %289, align 1
  %291 = getelementptr inbounds i16, i16* %273, i64 %1
  %292 = bitcast i16* %291 to <2 x i64>*
  %293 = load <2 x i64>, <2 x i64>* %292, align 1
  %294 = getelementptr inbounds i16, i16* %273, i64 %65
  %295 = bitcast i16* %294 to <2 x i64>*
  %296 = load <2 x i64>, <2 x i64>* %295, align 1
  %297 = getelementptr inbounds i16, i16* %273, i64 %66
  %298 = bitcast i16* %297 to <2 x i64>*
  %299 = load <2 x i64>, <2 x i64>* %298, align 1
  %300 = getelementptr inbounds i16, i16* %273, i64 %67
  %301 = bitcast i16* %300 to <2 x i64>*
  %302 = load <2 x i64>, <2 x i64>* %301, align 1
  %303 = getelementptr inbounds i16, i16* %273, i64 %68
  %304 = bitcast i16* %303 to <2 x i64>*
  %305 = load <2 x i64>, <2 x i64>* %304, align 1
  %306 = getelementptr inbounds i16, i16* %273, i64 %69
  %307 = bitcast i16* %306 to <2 x i64>*
  %308 = load <2 x i64>, <2 x i64>* %307, align 1
  %309 = shufflevector <2 x i64> %308, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %310 = shufflevector <2 x i64> %290, <2 x i64> %293, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %311 = shufflevector <2 x i64> %293, <2 x i64> %296, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %312 = shufflevector <2 x i64> %296, <2 x i64> %299, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %313 = shufflevector <2 x i64> %299, <2 x i64> %302, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %314 = shufflevector <2 x i64> %302, <2 x i64> %305, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %315 = shufflevector <2 x i64> %305, <2 x i64> %308, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %316 = bitcast <4 x i64> %310 to <16 x i16>
  %317 = bitcast <4 x i64> %311 to <16 x i16>
  %318 = shufflevector <16 x i16> %316, <16 x i16> %317, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %319 = shufflevector <16 x i16> %316, <16 x i16> %317, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %320 = bitcast <4 x i64> %312 to <16 x i16>
  %321 = bitcast <4 x i64> %313 to <16 x i16>
  %322 = shufflevector <16 x i16> %320, <16 x i16> %321, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %323 = shufflevector <16 x i16> %320, <16 x i16> %321, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %324 = bitcast <4 x i64> %314 to <16 x i16>
  %325 = bitcast <4 x i64> %315 to <16 x i16>
  %326 = shufflevector <16 x i16> %324, <16 x i16> %325, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %327 = shufflevector <16 x i16> %324, <16 x i16> %325, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  br label %328

328:                                              ; preds = %328, %269
  %329 = phi <4 x i64> [ %309, %269 ], [ %346, %328 ]
  %330 = phi <16 x i16> [ %327, %269 ], [ %352, %328 ]
  %331 = phi <16 x i16> [ %323, %269 ], [ %330, %328 ]
  %332 = phi <16 x i16> [ %319, %269 ], [ %331, %328 ]
  %333 = phi <16 x i16> [ %326, %269 ], [ %351, %328 ]
  %334 = phi <16 x i16> [ %322, %269 ], [ %333, %328 ]
  %335 = phi <16 x i16> [ %318, %269 ], [ %334, %328 ]
  %336 = phi i32 [ %10, %269 ], [ %391, %328 ]
  %337 = phi i16* [ %271, %269 ], [ %390, %328 ]
  %338 = phi i16* [ %273, %269 ], [ %389, %328 ]
  %339 = getelementptr inbounds i16, i16* %338, i64 %70
  %340 = bitcast i16* %339 to <2 x i64>*
  %341 = load <2 x i64>, <2 x i64>* %340, align 1
  %342 = shufflevector <2 x i64> %341, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %343 = getelementptr inbounds i16, i16* %338, i64 %71
  %344 = bitcast i16* %343 to <2 x i64>*
  %345 = load <2 x i64>, <2 x i64>* %344, align 1
  %346 = shufflevector <2 x i64> %345, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %347 = shufflevector <4 x i64> %329, <4 x i64> %342, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %348 = shufflevector <2 x i64> %341, <2 x i64> %345, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %349 = bitcast <4 x i64> %347 to <16 x i16>
  %350 = bitcast <4 x i64> %348 to <16 x i16>
  %351 = shufflevector <16 x i16> %349, <16 x i16> %350, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %352 = shufflevector <16 x i16> %349, <16 x i16> %350, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %353 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %282, <16 x i16> %335) #7
  %354 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %288, <16 x i16> %351) #7
  %355 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %284, <16 x i16> %334) #7
  %356 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %286, <16 x i16> %333) #7
  %357 = icmp slt <8 x i32> %355, %356
  %358 = select <8 x i1> %357, <8 x i32> %355, <8 x i32> %356
  %359 = icmp sgt <8 x i32> %355, %356
  %360 = select <8 x i1> %359, <8 x i32> %355, <8 x i32> %356
  %361 = add <8 x i32> %353, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %362 = add <8 x i32> %361, %354
  %363 = add <8 x i32> %362, %358
  %364 = add <8 x i32> %363, %360
  %365 = ashr <8 x i32> %364, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %366 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %282, <16 x i16> %332) #7
  %367 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %288, <16 x i16> %352) #7
  %368 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %284, <16 x i16> %331) #7
  %369 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %286, <16 x i16> %330) #7
  %370 = icmp slt <8 x i32> %368, %369
  %371 = select <8 x i1> %370, <8 x i32> %368, <8 x i32> %369
  %372 = icmp sgt <8 x i32> %368, %369
  %373 = select <8 x i1> %372, <8 x i32> %368, <8 x i32> %369
  %374 = add <8 x i32> %366, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %375 = add <8 x i32> %374, %367
  %376 = add <8 x i32> %375, %371
  %377 = add <8 x i32> %376, %373
  %378 = ashr <8 x i32> %377, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %379 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %365, <8 x i32> %378) #7
  %380 = icmp slt <16 x i16> %379, %63
  %381 = select <16 x i1> %380, <16 x i16> %379, <16 x i16> %63
  %382 = bitcast <16 x i16> %381 to <4 x i64>
  %383 = bitcast i16* %337 to <2 x i64>*
  %384 = shufflevector <4 x i64> %382, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %384, <2 x i64>* %383, align 1
  %385 = getelementptr inbounds i16, i16* %337, i64 %3
  %386 = bitcast <16 x i16> %381 to <8 x i32>
  %387 = shufflevector <8 x i32> %386, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %388 = bitcast i16* %385 to <4 x i32>*
  store <4 x i32> %387, <4 x i32>* %388, align 1
  %389 = getelementptr inbounds i16, i16* %338, i64 %65
  %390 = getelementptr inbounds i16, i16* %337, i64 %72
  %391 = add i32 %336, -2
  %392 = icmp eq i32 %391, 0
  br i1 %392, label %393, label %328

393:                                              ; preds = %328
  %394 = getelementptr inbounds i16, i16* %270, i64 8
  %395 = getelementptr inbounds i16, i16* %271, i64 8
  %396 = add nsw i32 %272, -8
  %397 = icmp sgt i32 %396, 7
  br i1 %397, label %269, label %260

398:                                              ; preds = %267, %398
  %399 = phi i16* [ %265, %267 ], [ %403, %398 ]
  %400 = phi i16* [ %264, %267 ], [ %404, %398 ]
  %401 = phi i32 [ %263, %267 ], [ %405, %398 ]
  %402 = getelementptr inbounds i16, i16* %399, i64 %268
  tail call void @vpx_highbd_filter_block1d4_v8_sse2(i16* %402, i64 %1, i16* %400, i64 %3, i32 %10, i16* %14, i32 %11) #7
  %403 = getelementptr inbounds i16, i16* %399, i64 4
  %404 = getelementptr inbounds i16, i16* %400, i64 4
  %405 = add nsw i32 %401, -4
  %406 = icmp sgt i32 %405, 3
  br i1 %406, label %398, label %894

407:                                              ; preds = %20
  %408 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 2
  %409 = load i16, i16* %408, align 2
  %410 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 5
  %411 = load i16, i16* %410, align 2
  %412 = or i16 %411, %409
  %413 = icmp eq i16 %412, 0
  %414 = icmp sgt i32 %9, 15
  br i1 %413, label %429, label %415

415:                                              ; preds = %407
  br i1 %414, label %416, label %439

416:                                              ; preds = %415
  %417 = sub i64 0, %1
  %418 = shl nsw i32 -1, %11
  %419 = trunc i32 %418 to i16
  %420 = xor i16 %419, -1
  %421 = insertelement <16 x i16> undef, i16 %420, i32 0
  %422 = shufflevector <16 x i16> %421, <16 x i16> undef, <16 x i32> zeroinitializer
  %423 = shl i64 %1, 1
  %424 = shl i64 %3, 1
  %425 = bitcast i16* %14 to <2 x i64>*
  %426 = icmp sgt i32 %10, 1
  %427 = mul nsw i64 %1, 3
  %428 = shl nsw i64 %1, 2
  br label %457

429:                                              ; preds = %407
  br i1 %414, label %430, label %779

430:                                              ; preds = %429
  %431 = shl nsw i32 -1, %11
  %432 = trunc i32 %431 to i16
  %433 = xor i16 %432, -1
  %434 = insertelement <16 x i16> undef, i16 %433, i32 0
  %435 = shufflevector <16 x i16> %434, <16 x i16> undef, <16 x i32> zeroinitializer
  %436 = bitcast i16* %14 to <2 x i64>*
  br label %791

437:                                              ; preds = %602
  %438 = and i32 %9, 15
  br label %439

439:                                              ; preds = %437, %415
  %440 = phi i32 [ %9, %415 ], [ %438, %437 ]
  %441 = phi i16* [ %2, %415 ], [ %604, %437 ]
  %442 = phi i16* [ %0, %415 ], [ %603, %437 ]
  %443 = icmp sgt i32 %440, 7
  br i1 %443, label %444, label %609

444:                                              ; preds = %439
  %445 = sub i64 0, %1
  %446 = shl nsw i32 -1, %11
  %447 = trunc i32 %446 to i16
  %448 = xor i16 %447, -1
  %449 = insertelement <16 x i16> undef, i16 %448, i32 0
  %450 = shufflevector <16 x i16> %449, <16 x i16> undef, <16 x i32> zeroinitializer
  %451 = shl i64 %1, 1
  %452 = shl i64 %3, 1
  %453 = bitcast i16* %14 to <2 x i64>*
  %454 = icmp sgt i32 %10, 1
  %455 = mul nsw i64 %1, 3
  %456 = shl nsw i64 %1, 2
  br label %627

457:                                              ; preds = %416, %602
  %458 = phi i16* [ %0, %416 ], [ %603, %602 ]
  %459 = phi i16* [ %2, %416 ], [ %604, %602 ]
  %460 = phi i32 [ %9, %416 ], [ %605, %602 ]
  %461 = getelementptr inbounds i16, i16* %458, i64 %417
  %462 = load <2 x i64>, <2 x i64>* %425, align 1
  %463 = shufflevector <2 x i64> %462, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %464 = bitcast <4 x i64> %463 to <8 x i32>
  %465 = bitcast i16* %461 to <2 x i64>*
  %466 = load <2 x i64>, <2 x i64>* %465, align 1
  %467 = bitcast i16* %458 to <2 x i64>*
  %468 = load <2 x i64>, <2 x i64>* %467, align 1
  %469 = shufflevector <2 x i64> %466, <2 x i64> %468, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %470 = getelementptr inbounds i16, i16* %461, i64 %423
  %471 = bitcast i16* %470 to <2 x i64>*
  %472 = load <2 x i64>, <2 x i64>* %471, align 1
  %473 = shufflevector <2 x i64> %472, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %474 = shufflevector <4 x i64> %469, <4 x i64> %473, <4 x i32> <i32 2, i32 3, i32 4, i32 5>
  %475 = bitcast <4 x i64> %469 to <16 x i16>
  %476 = bitcast <4 x i64> %474 to <16 x i16>
  br i1 %426, label %477, label %533

477:                                              ; preds = %457
  %478 = shufflevector <16 x i16> %475, <16 x i16> %476, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %479 = shufflevector <16 x i16> %475, <16 x i16> %476, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %480 = shufflevector <8 x i32> %464, <8 x i32> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 6, i32 6, i32 6, i32 6>
  %481 = shufflevector <8 x i32> %464, <8 x i32> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 5, i32 5, i32 5, i32 5>
  %482 = bitcast <8 x i32> %481 to <16 x i16>
  %483 = bitcast <8 x i32> %480 to <16 x i16>
  br label %484

484:                                              ; preds = %484, %477
  %485 = phi i32 [ %10, %477 ], [ %527, %484 ]
  %486 = phi i16* [ %461, %477 ], [ %525, %484 ]
  %487 = phi i16* [ %459, %477 ], [ %526, %484 ]
  %488 = phi <4 x i64> [ %473, %477 ], [ %499, %484 ]
  %489 = phi <16 x i16> [ %478, %477 ], [ %504, %484 ]
  %490 = phi <16 x i16> [ %479, %477 ], [ %503, %484 ]
  %491 = getelementptr inbounds i16, i16* %486, i64 %427
  %492 = bitcast i16* %491 to <2 x i64>*
  %493 = load <2 x i64>, <2 x i64>* %492, align 1
  %494 = shufflevector <2 x i64> %493, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %495 = shufflevector <4 x i64> %488, <4 x i64> %494, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %496 = getelementptr inbounds i16, i16* %486, i64 %428
  %497 = bitcast i16* %496 to <2 x i64>*
  %498 = load <2 x i64>, <2 x i64>* %497, align 1
  %499 = shufflevector <2 x i64> %498, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %500 = shufflevector <2 x i64> %493, <2 x i64> %498, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %501 = bitcast <4 x i64> %495 to <16 x i16>
  %502 = bitcast <4 x i64> %500 to <16 x i16>
  %503 = shufflevector <16 x i16> %501, <16 x i16> %502, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %504 = shufflevector <16 x i16> %501, <16 x i16> %502, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %505 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %490, <16 x i16> %482) #7
  %506 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %503, <16 x i16> %483) #7
  %507 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %489, <16 x i16> %482) #7
  %508 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %504, <16 x i16> %483) #7
  %509 = add <8 x i32> %505, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %510 = add <8 x i32> %509, %506
  %511 = ashr <8 x i32> %510, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %512 = add <8 x i32> %507, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %513 = add <8 x i32> %512, %508
  %514 = ashr <8 x i32> %513, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %515 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %511, <8 x i32> %514) #7
  %516 = icmp slt <16 x i16> %515, %422
  %517 = select <16 x i1> %516, <16 x i16> %515, <16 x i16> %422
  %518 = bitcast <16 x i16> %517 to <4 x i64>
  %519 = bitcast i16* %487 to <2 x i64>*
  %520 = getelementptr inbounds i16, i16* %487, i64 %3
  %521 = shufflevector <4 x i64> %518, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %521, <2 x i64>* %519, align 16
  %522 = bitcast <16 x i16> %517 to <8 x i32>
  %523 = shufflevector <8 x i32> %522, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %524 = bitcast i16* %520 to <4 x i32>*
  store <4 x i32> %523, <4 x i32>* %524, align 16
  %525 = getelementptr inbounds i16, i16* %486, i64 %423
  %526 = getelementptr inbounds i16, i16* %487, i64 %424
  %527 = add nsw i32 %485, -2
  %528 = icmp sgt i32 %527, 1
  br i1 %528, label %484, label %529

529:                                              ; preds = %484
  %530 = load <2 x i64>, <2 x i64>* %425, align 1
  %531 = shufflevector <2 x i64> %530, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %532 = bitcast <4 x i64> %531 to <8 x i32>
  br label %533

533:                                              ; preds = %529, %457
  %534 = phi <8 x i32> [ %532, %529 ], [ %464, %457 ]
  %535 = getelementptr inbounds i16, i16* %461, i64 8
  %536 = getelementptr inbounds i16, i16* %535, i64 %1
  %537 = bitcast i16* %535 to <2 x i64>*
  %538 = load <2 x i64>, <2 x i64>* %537, align 1
  %539 = bitcast i16* %536 to <2 x i64>*
  %540 = load <2 x i64>, <2 x i64>* %539, align 1
  %541 = shufflevector <2 x i64> %538, <2 x i64> %540, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %542 = getelementptr inbounds i16, i16* %535, i64 %423
  %543 = bitcast i16* %542 to <2 x i64>*
  %544 = load <2 x i64>, <2 x i64>* %543, align 1
  %545 = shufflevector <2 x i64> %544, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %546 = shufflevector <4 x i64> %541, <4 x i64> %545, <4 x i32> <i32 2, i32 3, i32 4, i32 5>
  %547 = bitcast <4 x i64> %541 to <16 x i16>
  %548 = bitcast <4 x i64> %546 to <16 x i16>
  br i1 %426, label %549, label %602

549:                                              ; preds = %533
  %550 = getelementptr inbounds i16, i16* %459, i64 8
  %551 = shufflevector <16 x i16> %547, <16 x i16> %548, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %552 = shufflevector <16 x i16> %547, <16 x i16> %548, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %553 = shufflevector <8 x i32> %534, <8 x i32> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 6, i32 6, i32 6, i32 6>
  %554 = shufflevector <8 x i32> %534, <8 x i32> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 5, i32 5, i32 5, i32 5>
  %555 = bitcast <8 x i32> %554 to <16 x i16>
  %556 = bitcast <8 x i32> %553 to <16 x i16>
  br label %557

557:                                              ; preds = %557, %549
  %558 = phi i32 [ %10, %549 ], [ %600, %557 ]
  %559 = phi i16* [ %535, %549 ], [ %598, %557 ]
  %560 = phi i16* [ %550, %549 ], [ %599, %557 ]
  %561 = phi <4 x i64> [ %545, %549 ], [ %572, %557 ]
  %562 = phi <16 x i16> [ %551, %549 ], [ %577, %557 ]
  %563 = phi <16 x i16> [ %552, %549 ], [ %576, %557 ]
  %564 = getelementptr inbounds i16, i16* %559, i64 %427
  %565 = bitcast i16* %564 to <2 x i64>*
  %566 = load <2 x i64>, <2 x i64>* %565, align 1
  %567 = shufflevector <2 x i64> %566, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %568 = shufflevector <4 x i64> %561, <4 x i64> %567, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %569 = getelementptr inbounds i16, i16* %559, i64 %428
  %570 = bitcast i16* %569 to <2 x i64>*
  %571 = load <2 x i64>, <2 x i64>* %570, align 1
  %572 = shufflevector <2 x i64> %571, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %573 = shufflevector <2 x i64> %566, <2 x i64> %571, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %574 = bitcast <4 x i64> %568 to <16 x i16>
  %575 = bitcast <4 x i64> %573 to <16 x i16>
  %576 = shufflevector <16 x i16> %574, <16 x i16> %575, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %577 = shufflevector <16 x i16> %574, <16 x i16> %575, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %578 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %563, <16 x i16> %555) #7
  %579 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %576, <16 x i16> %556) #7
  %580 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %562, <16 x i16> %555) #7
  %581 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %577, <16 x i16> %556) #7
  %582 = add <8 x i32> %578, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %583 = add <8 x i32> %582, %579
  %584 = ashr <8 x i32> %583, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %585 = add <8 x i32> %580, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %586 = add <8 x i32> %585, %581
  %587 = ashr <8 x i32> %586, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %588 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %584, <8 x i32> %587) #7
  %589 = icmp slt <16 x i16> %588, %422
  %590 = select <16 x i1> %589, <16 x i16> %588, <16 x i16> %422
  %591 = bitcast <16 x i16> %590 to <4 x i64>
  %592 = bitcast i16* %560 to <2 x i64>*
  %593 = getelementptr inbounds i16, i16* %560, i64 %3
  %594 = shufflevector <4 x i64> %591, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %594, <2 x i64>* %592, align 16
  %595 = bitcast <16 x i16> %590 to <8 x i32>
  %596 = shufflevector <8 x i32> %595, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %597 = bitcast i16* %593 to <4 x i32>*
  store <4 x i32> %596, <4 x i32>* %597, align 16
  %598 = getelementptr inbounds i16, i16* %559, i64 %423
  %599 = getelementptr inbounds i16, i16* %560, i64 %424
  %600 = add nsw i32 %558, -2
  %601 = icmp sgt i32 %600, 1
  br i1 %601, label %557, label %602

602:                                              ; preds = %557, %533
  %603 = getelementptr inbounds i16, i16* %458, i64 16
  %604 = getelementptr inbounds i16, i16* %459, i64 16
  %605 = add nsw i32 %460, -16
  %606 = icmp sgt i32 %605, 15
  br i1 %606, label %457, label %437

607:                                              ; preds = %699
  %608 = and i32 %440, 7
  br label %609

609:                                              ; preds = %607, %439
  %610 = phi i32 [ %440, %439 ], [ %608, %607 ]
  %611 = phi i16* [ %441, %439 ], [ %701, %607 ]
  %612 = phi i16* [ %442, %439 ], [ %700, %607 ]
  %613 = icmp sgt i32 %610, 3
  br i1 %613, label %614, label %896

614:                                              ; preds = %609
  %615 = sub i64 0, %1
  %616 = shl nsw i32 -1, %11
  %617 = trunc i32 %616 to i16
  %618 = xor i16 %617, -1
  %619 = insertelement <16 x i16> undef, i16 %618, i32 0
  %620 = shufflevector <16 x i16> %619, <16 x i16> undef, <16 x i32> zeroinitializer
  %621 = shl i64 %1, 1
  %622 = shl i64 %3, 1
  %623 = bitcast i16* %14 to <2 x i64>*
  %624 = icmp sgt i32 %10, 1
  %625 = mul nsw i64 %1, 3
  %626 = shl nsw i64 %1, 2
  br label %704

627:                                              ; preds = %444, %699
  %628 = phi i16* [ %442, %444 ], [ %700, %699 ]
  %629 = phi i16* [ %441, %444 ], [ %701, %699 ]
  %630 = phi i32 [ %440, %444 ], [ %702, %699 ]
  %631 = getelementptr inbounds i16, i16* %628, i64 %445
  %632 = load <2 x i64>, <2 x i64>* %453, align 1
  %633 = shufflevector <2 x i64> %632, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %634 = bitcast <4 x i64> %633 to <8 x i32>
  %635 = bitcast i16* %631 to <2 x i64>*
  %636 = load <2 x i64>, <2 x i64>* %635, align 1
  %637 = bitcast i16* %628 to <2 x i64>*
  %638 = load <2 x i64>, <2 x i64>* %637, align 1
  %639 = shufflevector <2 x i64> %636, <2 x i64> %638, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %640 = getelementptr inbounds i16, i16* %631, i64 %451
  %641 = bitcast i16* %640 to <2 x i64>*
  %642 = load <2 x i64>, <2 x i64>* %641, align 1
  %643 = shufflevector <2 x i64> %642, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %644 = shufflevector <4 x i64> %639, <4 x i64> %643, <4 x i32> <i32 2, i32 3, i32 4, i32 5>
  %645 = bitcast <4 x i64> %639 to <16 x i16>
  %646 = bitcast <4 x i64> %644 to <16 x i16>
  br i1 %454, label %647, label %699

647:                                              ; preds = %627
  %648 = shufflevector <16 x i16> %645, <16 x i16> %646, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %649 = shufflevector <16 x i16> %645, <16 x i16> %646, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %650 = shufflevector <8 x i32> %634, <8 x i32> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 6, i32 6, i32 6, i32 6>
  %651 = shufflevector <8 x i32> %634, <8 x i32> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 5, i32 5, i32 5, i32 5>
  %652 = bitcast <8 x i32> %651 to <16 x i16>
  %653 = bitcast <8 x i32> %650 to <16 x i16>
  br label %654

654:                                              ; preds = %654, %647
  %655 = phi i32 [ %10, %647 ], [ %697, %654 ]
  %656 = phi i16* [ %631, %647 ], [ %695, %654 ]
  %657 = phi i16* [ %629, %647 ], [ %696, %654 ]
  %658 = phi <4 x i64> [ %643, %647 ], [ %669, %654 ]
  %659 = phi <16 x i16> [ %648, %647 ], [ %674, %654 ]
  %660 = phi <16 x i16> [ %649, %647 ], [ %673, %654 ]
  %661 = getelementptr inbounds i16, i16* %656, i64 %455
  %662 = bitcast i16* %661 to <2 x i64>*
  %663 = load <2 x i64>, <2 x i64>* %662, align 1
  %664 = shufflevector <2 x i64> %663, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %665 = shufflevector <4 x i64> %658, <4 x i64> %664, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %666 = getelementptr inbounds i16, i16* %656, i64 %456
  %667 = bitcast i16* %666 to <2 x i64>*
  %668 = load <2 x i64>, <2 x i64>* %667, align 1
  %669 = shufflevector <2 x i64> %668, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %670 = shufflevector <2 x i64> %663, <2 x i64> %668, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %671 = bitcast <4 x i64> %665 to <16 x i16>
  %672 = bitcast <4 x i64> %670 to <16 x i16>
  %673 = shufflevector <16 x i16> %671, <16 x i16> %672, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %674 = shufflevector <16 x i16> %671, <16 x i16> %672, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %675 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %660, <16 x i16> %652) #7
  %676 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %673, <16 x i16> %653) #7
  %677 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %659, <16 x i16> %652) #7
  %678 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %674, <16 x i16> %653) #7
  %679 = add <8 x i32> %675, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %680 = add <8 x i32> %679, %676
  %681 = ashr <8 x i32> %680, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %682 = add <8 x i32> %677, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %683 = add <8 x i32> %682, %678
  %684 = ashr <8 x i32> %683, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %685 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %681, <8 x i32> %684) #7
  %686 = icmp slt <16 x i16> %685, %450
  %687 = select <16 x i1> %686, <16 x i16> %685, <16 x i16> %450
  %688 = bitcast <16 x i16> %687 to <4 x i64>
  %689 = bitcast i16* %657 to <2 x i64>*
  %690 = getelementptr inbounds i16, i16* %657, i64 %3
  %691 = shufflevector <4 x i64> %688, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %691, <2 x i64>* %689, align 16
  %692 = bitcast <16 x i16> %687 to <8 x i32>
  %693 = shufflevector <8 x i32> %692, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %694 = bitcast i16* %690 to <4 x i32>*
  store <4 x i32> %693, <4 x i32>* %694, align 16
  %695 = getelementptr inbounds i16, i16* %656, i64 %451
  %696 = getelementptr inbounds i16, i16* %657, i64 %452
  %697 = add nsw i32 %655, -2
  %698 = icmp sgt i32 %697, 1
  br i1 %698, label %654, label %699

699:                                              ; preds = %654, %627
  %700 = getelementptr inbounds i16, i16* %628, i64 8
  %701 = getelementptr inbounds i16, i16* %629, i64 8
  %702 = add nsw i32 %630, -8
  %703 = icmp sgt i32 %702, 7
  br i1 %703, label %627, label %607

704:                                              ; preds = %614, %772
  %705 = phi i16* [ %612, %614 ], [ %773, %772 ]
  %706 = phi i16* [ %611, %614 ], [ %774, %772 ]
  %707 = phi i32 [ %610, %614 ], [ %775, %772 ]
  %708 = getelementptr inbounds i16, i16* %705, i64 %615
  %709 = load <2 x i64>, <2 x i64>* %623, align 1
  %710 = shufflevector <2 x i64> %709, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 0, i32 1>
  %711 = bitcast <4 x i64> %710 to <8 x i32>
  %712 = bitcast i16* %708 to i64*
  %713 = load i64, i64* %712, align 1
  %714 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %713, i32 0
  %715 = bitcast i16* %705 to i64*
  %716 = load i64, i64* %715, align 1
  %717 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %716, i32 0
  %718 = shufflevector <4 x i64> %714, <4 x i64> %717, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %719 = getelementptr inbounds i16, i16* %708, i64 %621
  %720 = bitcast i16* %719 to <2 x i64>*
  %721 = load <2 x i64>, <2 x i64>* %720, align 1
  %722 = shufflevector <2 x i64> %721, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  br i1 %624, label %723, label %772

723:                                              ; preds = %704
  %724 = bitcast <4 x i64> %718 to <16 x i16>
  %725 = shufflevector <4 x i64> %718, <4 x i64> %722, <4 x i32> <i32 2, i32 undef, i32 4, i32 undef>
  %726 = bitcast <4 x i64> %725 to <16 x i16>
  %727 = shufflevector <16 x i16> %724, <16 x i16> %726, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %728 = shufflevector <8 x i32> %711, <8 x i32> undef, <8 x i32> <i32 2, i32 2, i32 2, i32 2, i32 6, i32 6, i32 6, i32 6>
  %729 = shufflevector <8 x i32> %711, <8 x i32> undef, <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 5, i32 5, i32 5, i32 5>
  %730 = bitcast <8 x i32> %729 to <16 x i16>
  %731 = bitcast <8 x i32> %728 to <16 x i16>
  br label %732

732:                                              ; preds = %732, %723
  %733 = phi i32 [ %10, %723 ], [ %770, %732 ]
  %734 = phi i16* [ %708, %723 ], [ %768, %732 ]
  %735 = phi i16* [ %706, %723 ], [ %769, %732 ]
  %736 = phi <4 x i64> [ %722, %723 ], [ %746, %732 ]
  %737 = phi <16 x i16> [ %727, %723 ], [ %750, %732 ]
  %738 = getelementptr inbounds i16, i16* %734, i64 %625
  %739 = bitcast i16* %738 to i64*
  %740 = load i64, i64* %739, align 1
  %741 = insertelement <4 x i64> undef, i64 %740, i32 0
  %742 = insertelement <4 x i64> %736, i64 %740, i32 2
  %743 = getelementptr inbounds i16, i16* %734, i64 %626
  %744 = bitcast i16* %743 to i64*
  %745 = load i64, i64* %744, align 1
  %746 = insertelement <4 x i64> <i64 undef, i64 0, i64 undef, i64 undef>, i64 %745, i32 0
  %747 = insertelement <4 x i64> %741, i64 %745, i32 2
  %748 = bitcast <4 x i64> %742 to <16 x i16>
  %749 = bitcast <4 x i64> %747 to <16 x i16>
  %750 = shufflevector <16 x i16> %748, <16 x i16> %749, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %751 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %737, <16 x i16> %730) #7
  %752 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %750, <16 x i16> %731) #7
  %753 = add <8 x i32> %751, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %754 = add <8 x i32> %753, %752
  %755 = ashr <8 x i32> %754, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %756 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %755, <8 x i32> %755) #7
  %757 = icmp slt <16 x i16> %756, %620
  %758 = select <16 x i1> %757, <16 x i16> %756, <16 x i16> %620
  %759 = bitcast <16 x i16> %758 to <4 x i64>
  %760 = getelementptr inbounds i16, i16* %735, i64 %3
  %761 = extractelement <4 x i64> %759, i32 0
  %762 = bitcast i16* %735 to i64*
  store i64 %761, i64* %762, align 1
  %763 = bitcast <16 x i16> %758 to <8 x i32>
  %764 = shufflevector <8 x i32> %763, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 undef, i32 undef>
  %765 = bitcast <4 x i32> %764 to <2 x i64>
  %766 = extractelement <2 x i64> %765, i32 0
  %767 = bitcast i16* %760 to i64*
  store i64 %766, i64* %767, align 1
  %768 = getelementptr inbounds i16, i16* %734, i64 %621
  %769 = getelementptr inbounds i16, i16* %735, i64 %622
  %770 = add nsw i32 %733, -2
  %771 = icmp sgt i32 %770, 1
  br i1 %771, label %732, label %772

772:                                              ; preds = %732, %704
  %773 = getelementptr inbounds i16, i16* %705, i64 4
  %774 = getelementptr inbounds i16, i16* %706, i64 4
  %775 = add nsw i32 %707, -4
  %776 = icmp sgt i32 %775, 3
  br i1 %776, label %704, label %892

777:                                              ; preds = %831
  %778 = and i32 %9, 15
  br label %779

779:                                              ; preds = %777, %429
  %780 = phi i32 [ %9, %429 ], [ %778, %777 ]
  %781 = phi i16* [ %2, %429 ], [ %833, %777 ]
  %782 = phi i16* [ %0, %429 ], [ %832, %777 ]
  %783 = icmp sgt i32 %780, 7
  br i1 %783, label %784, label %838

784:                                              ; preds = %779
  %785 = shl nsw i32 -1, %11
  %786 = trunc i32 %785 to i16
  %787 = xor i16 %786, -1
  %788 = insertelement <8 x i16> undef, i16 %787, i32 0
  %789 = shufflevector <8 x i16> %788, <8 x i16> undef, <8 x i32> zeroinitializer
  %790 = bitcast i16* %14 to <16 x i8>*
  br label %843

791:                                              ; preds = %430, %831
  %792 = phi i16* [ %0, %430 ], [ %832, %831 ]
  %793 = phi i16* [ %2, %430 ], [ %833, %831 ]
  %794 = phi i32 [ %9, %430 ], [ %834, %831 ]
  %795 = load <2 x i64>, <2 x i64>* %436, align 1
  %796 = shufflevector <2 x i64> %795, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %797 = bitcast <4 x i64> %796 to <8 x i32>
  %798 = bitcast <2 x i64> %795 to <4 x i32>
  %799 = shufflevector <4 x i32> %798, <4 x i32> undef, <8 x i32> <i32 undef, i32 1, i32 2, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %800 = shufflevector <8 x i32> %797, <8 x i32> %799, <8 x i32> <i32 undef, i32 1, i32 2, i32 undef, i32 undef, i32 9, i32 10, i32 undef>
  %801 = bitcast <8 x i32> %800 to <32 x i8>
  %802 = shufflevector <32 x i8> %801, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9, i32 22, i32 23, i32 24, i32 25, i32 22, i32 23, i32 24, i32 25, i32 22, i32 23, i32 24, i32 25, i32 22, i32 23, i32 24, i32 25>
  %803 = bitcast i16* %792 to <4 x i64>*
  %804 = load <4 x i64>, <4 x i64>* %803, align 1
  %805 = bitcast <32 x i8> %802 to <16 x i16>
  br label %806

806:                                              ; preds = %806, %791
  %807 = phi <4 x i64> [ %804, %791 ], [ %813, %806 ]
  %808 = phi i32 [ %10, %791 ], [ %829, %806 ]
  %809 = phi i16* [ %793, %791 ], [ %828, %806 ]
  %810 = phi i16* [ %792, %791 ], [ %811, %806 ]
  %811 = getelementptr inbounds i16, i16* %810, i64 %1
  %812 = bitcast i16* %811 to <4 x i64>*
  %813 = load <4 x i64>, <4 x i64>* %812, align 1
  %814 = bitcast <4 x i64> %807 to <16 x i16>
  %815 = bitcast <4 x i64> %813 to <16 x i16>
  %816 = shufflevector <16 x i16> %814, <16 x i16> %815, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %817 = shufflevector <16 x i16> %814, <16 x i16> %815, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %818 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %816, <16 x i16> %805) #7
  %819 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %817, <16 x i16> %805) #7
  %820 = add <8 x i32> %818, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %821 = add <8 x i32> %819, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %822 = ashr <8 x i32> %820, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %823 = ashr <8 x i32> %821, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %824 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %822, <8 x i32> %823) #7
  %825 = icmp slt <16 x i16> %824, %435
  %826 = select <16 x i1> %825, <16 x i16> %824, <16 x i16> %435
  %827 = bitcast i16* %809 to <16 x i16>*
  store <16 x i16> %826, <16 x i16>* %827, align 1
  %828 = getelementptr inbounds i16, i16* %809, i64 %3
  %829 = add i32 %808, -1
  %830 = icmp eq i32 %829, 0
  br i1 %830, label %831, label %806

831:                                              ; preds = %806
  %832 = getelementptr inbounds i16, i16* %792, i64 16
  %833 = getelementptr inbounds i16, i16* %793, i64 16
  %834 = add nsw i32 %794, -16
  %835 = icmp sgt i32 %834, 15
  br i1 %835, label %791, label %777

836:                                              ; preds = %877
  %837 = and i32 %780, 7
  br label %838

838:                                              ; preds = %836, %779
  %839 = phi i32 [ %780, %779 ], [ %837, %836 ]
  %840 = phi i16* [ %781, %779 ], [ %879, %836 ]
  %841 = phi i16* [ %782, %779 ], [ %878, %836 ]
  %842 = icmp sgt i32 %839, 3
  br i1 %842, label %882, label %896

843:                                              ; preds = %784, %877
  %844 = phi i16* [ %782, %784 ], [ %878, %877 ]
  %845 = phi i16* [ %781, %784 ], [ %879, %877 ]
  %846 = phi i32 [ %780, %784 ], [ %880, %877 ]
  %847 = load <16 x i8>, <16 x i8>* %790, align 1
  %848 = shufflevector <16 x i8> %847, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9>
  %849 = bitcast i16* %844 to <2 x i64>*
  %850 = load <2 x i64>, <2 x i64>* %849, align 1
  %851 = bitcast <16 x i8> %848 to <8 x i16>
  br label %852

852:                                              ; preds = %852, %843
  %853 = phi <2 x i64> [ %850, %843 ], [ %859, %852 ]
  %854 = phi i32 [ %10, %843 ], [ %875, %852 ]
  %855 = phi i16* [ %845, %843 ], [ %874, %852 ]
  %856 = phi i16* [ %844, %843 ], [ %857, %852 ]
  %857 = getelementptr inbounds i16, i16* %856, i64 %1
  %858 = bitcast i16* %857 to <2 x i64>*
  %859 = load <2 x i64>, <2 x i64>* %858, align 1
  %860 = bitcast <2 x i64> %853 to <8 x i16>
  %861 = bitcast <2 x i64> %859 to <8 x i16>
  %862 = shufflevector <8 x i16> %860, <8 x i16> %861, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %863 = shufflevector <8 x i16> %860, <8 x i16> %861, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %864 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %862, <8 x i16> %851) #7
  %865 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %863, <8 x i16> %851) #7
  %866 = add <4 x i32> %864, <i32 64, i32 64, i32 64, i32 64>
  %867 = add <4 x i32> %865, <i32 64, i32 64, i32 64, i32 64>
  %868 = ashr <4 x i32> %866, <i32 7, i32 7, i32 7, i32 7>
  %869 = ashr <4 x i32> %867, <i32 7, i32 7, i32 7, i32 7>
  %870 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %868, <4 x i32> %869) #7
  %871 = icmp slt <8 x i16> %870, %789
  %872 = select <8 x i1> %871, <8 x i16> %870, <8 x i16> %789
  %873 = bitcast i16* %855 to <8 x i16>*
  store <8 x i16> %872, <8 x i16>* %873, align 1
  %874 = getelementptr inbounds i16, i16* %855, i64 %3
  %875 = add i32 %854, -1
  %876 = icmp eq i32 %875, 0
  br i1 %876, label %877, label %852

877:                                              ; preds = %852
  %878 = getelementptr inbounds i16, i16* %844, i64 8
  %879 = getelementptr inbounds i16, i16* %845, i64 8
  %880 = add nsw i32 %846, -8
  %881 = icmp sgt i32 %880, 7
  br i1 %881, label %843, label %836

882:                                              ; preds = %838, %882
  %883 = phi i16* [ %886, %882 ], [ %841, %838 ]
  %884 = phi i16* [ %887, %882 ], [ %840, %838 ]
  %885 = phi i32 [ %888, %882 ], [ %839, %838 ]
  tail call void @vpx_highbd_filter_block1d4_v2_sse2(i16* %883, i64 %1, i16* %884, i64 %3, i32 %10, i16* %14, i32 %11) #7
  %886 = getelementptr inbounds i16, i16* %883, i64 4
  %887 = getelementptr inbounds i16, i16* %884, i64 4
  %888 = add nsw i32 %885, -4
  %889 = icmp sgt i32 %888, 3
  br i1 %889, label %882, label %890

890:                                              ; preds = %882
  %891 = and i32 %839, 3
  br label %896

892:                                              ; preds = %772
  %893 = and i32 %610, 3
  br label %896

894:                                              ; preds = %398
  %895 = and i32 %263, 3
  br label %896

896:                                              ; preds = %894, %892, %890, %262, %609, %838, %16, %12
  %897 = phi i32 [ %9, %16 ], [ %9, %12 ], [ %839, %838 ], [ %610, %609 ], [ %263, %262 ], [ %891, %890 ], [ %893, %892 ], [ %895, %894 ]
  %898 = phi i16* [ %2, %16 ], [ %2, %12 ], [ %840, %838 ], [ %611, %609 ], [ %264, %262 ], [ %887, %890 ], [ %774, %892 ], [ %404, %894 ]
  %899 = phi i16* [ %0, %16 ], [ %0, %12 ], [ %841, %838 ], [ %612, %609 ], [ %265, %262 ], [ %886, %890 ], [ %773, %892 ], [ %403, %894 ]
  %900 = icmp eq i32 %897, 0
  br i1 %900, label %902, label %901

901:                                              ; preds = %896
  tail call void @vpx_highbd_convolve8_vert_c(i16* %899, i64 %1, i16* %898, i64 %3, [8 x i16]* %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %897, i32 %10, i32 %11) #7
  br label %902

902:                                              ; preds = %896, %901
  ret void
}

declare void @vpx_highbd_filter_block1d4_v8_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #4

declare void @vpx_highbd_filter_block1d4_v2_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #4

declare void @vpx_highbd_convolve8_vert_c(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_convolve8_avx2(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #5 {
  %13 = alloca [4544 x i16], align 16
  %14 = alloca [4544 x i16], align 16
  %15 = alloca [4160 x i16], align 16
  %16 = sext i32 %5 to i64
  %17 = icmp eq i32 %6, 16
  %18 = icmp eq i32 %8, 16
  %19 = and i1 %17, %18
  br i1 %19, label %20, label %62

20:                                               ; preds = %12
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 0
  %22 = load i16, i16* %21, align 2
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 1
  %24 = load i16, i16* %23, align 2
  %25 = or i16 %24, %22
  %26 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 6
  %27 = load i16, i16* %26, align 2
  %28 = or i16 %25, %27
  %29 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 7
  %30 = load i16, i16* %29, align 2
  %31 = or i16 %28, %30
  %32 = icmp eq i16 %31, 0
  br i1 %32, label %33, label %37

33:                                               ; preds = %20
  %34 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 3
  %35 = load i16, i16* %34, align 2
  %36 = icmp eq i16 %35, 128
  br i1 %36, label %37, label %44

37:                                               ; preds = %20, %33
  %38 = bitcast [4544 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 9088, i8* nonnull %38) #7
  %39 = mul i64 %1, -3
  %40 = getelementptr inbounds i16, i16* %0, i64 %39
  %41 = getelementptr inbounds [4544 x i16], [4544 x i16]* %13, i64 0, i64 0
  %42 = add nsw i32 %10, 7
  call void @vpx_highbd_convolve8_horiz_avx2(i16* %40, i64 %1, i16* nonnull %41, i64 64, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %42, i32 %11)
  %43 = getelementptr inbounds [4544 x i16], [4544 x i16]* %13, i64 0, i64 192
  call void @vpx_highbd_convolve8_vert_avx2(i16* %43, i64 64, i16* %2, i64 %3, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %10, i32 %11)
  call void @llvm.lifetime.end.p0i8(i64 9088, i8* nonnull %38) #7
  br label %63

44:                                               ; preds = %33
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 2
  %46 = load i16, i16* %45, align 2
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 5
  %48 = load i16, i16* %47, align 2
  %49 = or i16 %48, %46
  %50 = icmp eq i16 %49, 0
  br i1 %50, label %58, label %51

51:                                               ; preds = %44
  %52 = bitcast [4544 x i16]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 9088, i8* nonnull %52) #7
  %53 = sub i64 0, %1
  %54 = getelementptr inbounds i16, i16* %0, i64 %53
  %55 = getelementptr inbounds [4544 x i16], [4544 x i16]* %14, i64 0, i64 0
  %56 = add nsw i32 %10, 3
  call void @vpx_highbd_convolve8_horiz_avx2(i16* %54, i64 %1, i16* nonnull %55, i64 64, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %56, i32 %11)
  %57 = getelementptr inbounds [4544 x i16], [4544 x i16]* %14, i64 0, i64 64
  call void @vpx_highbd_convolve8_vert_avx2(i16* %57, i64 64, i16* %2, i64 %3, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %10, i32 %11)
  call void @llvm.lifetime.end.p0i8(i64 9088, i8* nonnull %52) #7
  br label %63

58:                                               ; preds = %44
  %59 = bitcast [4160 x i16]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8320, i8* nonnull %59) #7
  %60 = getelementptr inbounds [4160 x i16], [4160 x i16]* %15, i64 0, i64 0
  %61 = add nsw i32 %10, 1
  call void @vpx_highbd_convolve8_horiz_avx2(i16* %0, i64 %1, i16* nonnull %60, i64 64, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %61, i32 %11)
  call void @vpx_highbd_convolve8_vert_avx2(i16* nonnull %60, i64 64, i16* %2, i64 %3, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %10, i32 %11)
  call void @llvm.lifetime.end.p0i8(i64 8320, i8* nonnull %59) #7
  br label %63

62:                                               ; preds = %12
  tail call void @vpx_highbd_convolve8_c(i16* %0, i64 %1, i16* %2, i64 %3, [8 x i16]* %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11) #7
  br label %63

63:                                               ; preds = %37, %58, %51, %62
  ret void
}

declare void @vpx_highbd_convolve8_c(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_convolve8_avg_horiz_avx2(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #3 {
  %13 = sext i32 %5 to i64
  %14 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 0
  %15 = icmp eq i32 %6, 16
  br i1 %15, label %16, label %885

16:                                               ; preds = %12
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 3
  %18 = load i16, i16* %17, align 2
  %19 = icmp eq i16 %18, 128
  br i1 %19, label %885, label %20

20:                                               ; preds = %16
  %21 = load i16, i16* %14, align 2
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 1
  %23 = load i16, i16* %22, align 2
  %24 = or i16 %23, %21
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 6
  %26 = load i16, i16* %25, align 2
  %27 = or i16 %24, %26
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 7
  %29 = load i16, i16* %28, align 2
  %30 = or i16 %27, %29
  %31 = icmp eq i16 %30, 0
  br i1 %31, label %347, label %32

32:                                               ; preds = %20
  %33 = icmp sgt i32 %9, 15
  br i1 %33, label %34, label %43

34:                                               ; preds = %32
  %35 = shl nsw i32 -1, %11
  %36 = trunc i32 %35 to i16
  %37 = xor i16 %36, -1
  %38 = insertelement <16 x i16> undef, i16 %37, i32 0
  %39 = shufflevector <16 x i16> %38, <16 x i16> undef, <16 x i32> zeroinitializer
  %40 = bitcast i16* %14 to <2 x i64>*
  br label %60

41:                                               ; preds = %161
  %42 = and i32 %9, 15
  br label %43

43:                                               ; preds = %41, %32
  %44 = phi i32 [ %9, %32 ], [ %42, %41 ]
  %45 = phi i16* [ %2, %32 ], [ %163, %41 ]
  %46 = phi i16* [ %0, %32 ], [ %162, %41 ]
  %47 = icmp sgt i32 %44, 7
  br i1 %47, label %48, label %168

48:                                               ; preds = %43
  %49 = shl nsw i32 -1, %11
  %50 = trunc i32 %49 to i16
  %51 = xor i16 %50, -1
  %52 = insertelement <16 x i16> undef, i16 %51, i32 0
  %53 = shufflevector <16 x i16> %52, <16 x i16> undef, <16 x i32> zeroinitializer
  %54 = bitcast i16* %14 to <2 x i64>*
  %55 = shl i64 %1, 1
  %56 = shl i64 %3, 1
  %57 = bitcast <16 x i16> %53 to <4 x i64>
  %58 = shufflevector <4 x i64> %57, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %59 = bitcast <2 x i64> %58 to <8 x i16>
  br label %173

60:                                               ; preds = %34, %161
  %61 = phi i16* [ %0, %34 ], [ %162, %161 ]
  %62 = phi i16* [ %2, %34 ], [ %163, %161 ]
  %63 = phi i32 [ %9, %34 ], [ %164, %161 ]
  %64 = load <2 x i64>, <2 x i64>* %40, align 1
  %65 = shufflevector <2 x i64> %64, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %66 = bitcast <4 x i64> %65 to <8 x i32>
  %67 = bitcast <2 x i64> %64 to <4 x i32>
  %68 = shufflevector <4 x i32> %67, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %69 = shufflevector <8 x i32> %66, <8 x i32> %68, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %70 = bitcast <8 x i32> %69 to <32 x i8>
  %71 = shufflevector <32 x i8> %70, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19>
  %72 = bitcast <32 x i8> %71 to <16 x i16>
  %73 = shufflevector <32 x i8> %70, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23>
  %74 = bitcast <32 x i8> %73 to <16 x i16>
  %75 = shufflevector <32 x i8> %70, <32 x i8> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27>
  %76 = bitcast <32 x i8> %75 to <16 x i16>
  %77 = shufflevector <32 x i8> %70, <32 x i8> undef, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31>
  %78 = bitcast <32 x i8> %77 to <16 x i16>
  %79 = getelementptr inbounds i16, i16* %61, i64 -3
  br label %80

80:                                               ; preds = %80, %60
  %81 = phi i32 [ %10, %60 ], [ %157, %80 ]
  %82 = phi i16* [ %62, %60 ], [ %159, %80 ]
  %83 = phi i16* [ %79, %60 ], [ %158, %80 ]
  %84 = bitcast i16* %83 to <4 x i64>*
  %85 = load <4 x i64>, <4 x i64>* %84, align 1
  %86 = getelementptr inbounds i16, i16* %83, i64 8
  %87 = bitcast i16* %86 to <4 x i64>*
  %88 = load <4 x i64>, <4 x i64>* %87, align 1
  %89 = bitcast <4 x i64> %85 to <8 x i32>
  %90 = shufflevector <8 x i32> %89, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5>
  %91 = bitcast <4 x i64> %85 to <32 x i8>
  %92 = shufflevector <32 x i8> %91, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %93 = bitcast <32 x i8> %92 to <4 x i64>
  %94 = shufflevector <32 x i8> %91, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %95 = bitcast <32 x i8> %94 to <4 x i64>
  %96 = bitcast <8 x i32> %90 to <32 x i8>
  %97 = shufflevector <32 x i8> %96, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %98 = bitcast <32 x i8> %97 to <4 x i64>
  %99 = shufflevector <32 x i8> %96, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %100 = bitcast <32 x i8> %99 to <4 x i64>
  %101 = bitcast <4 x i64> %88 to <8 x i32>
  %102 = shufflevector <8 x i32> %101, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5>
  %103 = bitcast <4 x i64> %88 to <32 x i8>
  %104 = shufflevector <32 x i8> %103, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %105 = bitcast <32 x i8> %104 to <4 x i64>
  %106 = shufflevector <32 x i8> %103, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %107 = bitcast <32 x i8> %106 to <4 x i64>
  %108 = bitcast <8 x i32> %102 to <32 x i8>
  %109 = shufflevector <32 x i8> %108, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %110 = bitcast <32 x i8> %109 to <4 x i64>
  %111 = shufflevector <32 x i8> %108, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %112 = bitcast <32 x i8> %111 to <4 x i64>
  %113 = shufflevector <4 x i64> %93, <4 x i64> %105, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %114 = shufflevector <4 x i64> %95, <4 x i64> %107, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %115 = shufflevector <4 x i64> %98, <4 x i64> %110, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %116 = shufflevector <4 x i64> %100, <4 x i64> %112, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %117 = shufflevector <4 x i64> %93, <4 x i64> %105, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %118 = shufflevector <4 x i64> %95, <4 x i64> %107, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %119 = bitcast <4 x i64> %113 to <16 x i16>
  %120 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %72, <16 x i16> %119) #7
  %121 = bitcast <4 x i64> %116 to <16 x i16>
  %122 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %78, <16 x i16> %121) #7
  %123 = bitcast <4 x i64> %114 to <16 x i16>
  %124 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %74, <16 x i16> %123) #7
  %125 = bitcast <4 x i64> %115 to <16 x i16>
  %126 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %76, <16 x i16> %125) #7
  %127 = icmp slt <8 x i32> %124, %126
  %128 = select <8 x i1> %127, <8 x i32> %124, <8 x i32> %126
  %129 = icmp sgt <8 x i32> %124, %126
  %130 = select <8 x i1> %129, <8 x i32> %124, <8 x i32> %126
  %131 = add <8 x i32> %120, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %132 = add <8 x i32> %131, %122
  %133 = add <8 x i32> %132, %128
  %134 = add <8 x i32> %133, %130
  %135 = ashr <8 x i32> %134, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %136 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %72, <16 x i16> %125) #7
  %137 = bitcast <4 x i64> %118 to <16 x i16>
  %138 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %78, <16 x i16> %137) #7
  %139 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %74, <16 x i16> %121) #7
  %140 = bitcast <4 x i64> %117 to <16 x i16>
  %141 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %76, <16 x i16> %140) #7
  %142 = icmp slt <8 x i32> %139, %141
  %143 = select <8 x i1> %142, <8 x i32> %139, <8 x i32> %141
  %144 = icmp sgt <8 x i32> %139, %141
  %145 = select <8 x i1> %144, <8 x i32> %139, <8 x i32> %141
  %146 = add <8 x i32> %136, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %147 = add <8 x i32> %146, %138
  %148 = add <8 x i32> %147, %143
  %149 = add <8 x i32> %148, %145
  %150 = ashr <8 x i32> %149, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %151 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %135, <8 x i32> %150) #7
  %152 = bitcast i16* %82 to <16 x i16>*
  %153 = load <16 x i16>, <16 x i16>* %152, align 1
  %154 = icmp slt <16 x i16> %151, %39
  %155 = select <16 x i1> %154, <16 x i16> %151, <16 x i16> %39
  %156 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %155, <16 x i16> %153) #7
  store <16 x i16> %156, <16 x i16>* %152, align 1
  %157 = add i32 %81, -1
  %158 = getelementptr inbounds i16, i16* %83, i64 %1
  %159 = getelementptr inbounds i16, i16* %82, i64 %3
  %160 = icmp eq i32 %157, 0
  br i1 %160, label %161, label %80

161:                                              ; preds = %80
  %162 = getelementptr inbounds i16, i16* %61, i64 16
  %163 = getelementptr inbounds i16, i16* %62, i64 16
  %164 = add nsw i32 %63, -16
  %165 = icmp sgt i32 %164, 15
  br i1 %165, label %60, label %41

166:                                              ; preds = %334
  %167 = and i32 %44, 7
  br label %168

168:                                              ; preds = %166, %43
  %169 = phi i32 [ %44, %43 ], [ %167, %166 ]
  %170 = phi i16* [ %45, %43 ], [ %336, %166 ]
  %171 = phi i16* [ %46, %43 ], [ %335, %166 ]
  %172 = icmp sgt i32 %169, 3
  br i1 %172, label %339, label %885

173:                                              ; preds = %48, %334
  %174 = phi i16* [ %46, %48 ], [ %335, %334 ]
  %175 = phi i16* [ %45, %48 ], [ %336, %334 ]
  %176 = phi i32 [ %44, %48 ], [ %337, %334 ]
  %177 = load <2 x i64>, <2 x i64>* %54, align 1
  %178 = shufflevector <2 x i64> %177, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %179 = bitcast <4 x i64> %178 to <8 x i32>
  %180 = bitcast <2 x i64> %177 to <4 x i32>
  %181 = shufflevector <4 x i32> %180, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %182 = shufflevector <8 x i32> %179, <8 x i32> %181, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %183 = bitcast <8 x i32> %182 to <32 x i8>
  %184 = shufflevector <32 x i8> %183, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19>
  %185 = bitcast <32 x i8> %184 to <16 x i16>
  %186 = shufflevector <32 x i8> %183, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23>
  %187 = bitcast <32 x i8> %186 to <16 x i16>
  %188 = shufflevector <32 x i8> %183, <32 x i8> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27>
  %189 = bitcast <32 x i8> %188 to <16 x i16>
  %190 = shufflevector <32 x i8> %183, <32 x i8> undef, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31>
  %191 = bitcast <32 x i8> %190 to <16 x i16>
  %192 = getelementptr inbounds i16, i16* %174, i64 -3
  br label %193

193:                                              ; preds = %193, %173
  %194 = phi i32 [ %10, %173 ], [ %282, %193 ]
  %195 = phi i16* [ %175, %173 ], [ %284, %193 ]
  %196 = phi i16* [ %192, %173 ], [ %283, %193 ]
  %197 = bitcast i16* %196 to <4 x i64>*
  %198 = load <4 x i64>, <4 x i64>* %197, align 1
  %199 = getelementptr inbounds i16, i16* %196, i64 %1
  %200 = bitcast i16* %199 to <4 x i64>*
  %201 = load <4 x i64>, <4 x i64>* %200, align 1
  %202 = bitcast <4 x i64> %198 to <8 x i32>
  %203 = shufflevector <8 x i32> %202, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5>
  %204 = bitcast <4 x i64> %198 to <32 x i8>
  %205 = shufflevector <32 x i8> %204, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %206 = bitcast <32 x i8> %205 to <4 x i64>
  %207 = shufflevector <32 x i8> %204, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %208 = bitcast <32 x i8> %207 to <4 x i64>
  %209 = bitcast <8 x i32> %203 to <32 x i8>
  %210 = shufflevector <32 x i8> %209, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %211 = bitcast <32 x i8> %210 to <4 x i64>
  %212 = shufflevector <32 x i8> %209, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %213 = bitcast <32 x i8> %212 to <4 x i64>
  %214 = bitcast <4 x i64> %201 to <8 x i32>
  %215 = shufflevector <8 x i32> %214, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5>
  %216 = bitcast <4 x i64> %201 to <32 x i8>
  %217 = shufflevector <32 x i8> %216, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %218 = bitcast <32 x i8> %217 to <4 x i64>
  %219 = shufflevector <32 x i8> %216, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %220 = bitcast <32 x i8> %219 to <4 x i64>
  %221 = bitcast <8 x i32> %215 to <32 x i8>
  %222 = shufflevector <32 x i8> %221, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %223 = bitcast <32 x i8> %222 to <4 x i64>
  %224 = shufflevector <32 x i8> %221, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %225 = bitcast <32 x i8> %224 to <4 x i64>
  %226 = shufflevector <4 x i64> %206, <4 x i64> %218, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %227 = shufflevector <4 x i64> %208, <4 x i64> %220, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %228 = shufflevector <4 x i64> %211, <4 x i64> %223, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %229 = shufflevector <4 x i64> %213, <4 x i64> %225, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %230 = shufflevector <4 x i64> %206, <4 x i64> %218, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %231 = shufflevector <4 x i64> %208, <4 x i64> %220, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %232 = bitcast <4 x i64> %226 to <16 x i16>
  %233 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %185, <16 x i16> %232) #7
  %234 = bitcast <4 x i64> %229 to <16 x i16>
  %235 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %191, <16 x i16> %234) #7
  %236 = bitcast <4 x i64> %227 to <16 x i16>
  %237 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %187, <16 x i16> %236) #7
  %238 = bitcast <4 x i64> %228 to <16 x i16>
  %239 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %189, <16 x i16> %238) #7
  %240 = icmp slt <8 x i32> %237, %239
  %241 = select <8 x i1> %240, <8 x i32> %237, <8 x i32> %239
  %242 = icmp sgt <8 x i32> %237, %239
  %243 = select <8 x i1> %242, <8 x i32> %237, <8 x i32> %239
  %244 = add <8 x i32> %233, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %245 = add <8 x i32> %244, %235
  %246 = add <8 x i32> %245, %241
  %247 = add <8 x i32> %246, %243
  %248 = ashr <8 x i32> %247, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %249 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %185, <16 x i16> %238) #7
  %250 = bitcast <4 x i64> %231 to <16 x i16>
  %251 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %191, <16 x i16> %250) #7
  %252 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %187, <16 x i16> %234) #7
  %253 = bitcast <4 x i64> %230 to <16 x i16>
  %254 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %189, <16 x i16> %253) #7
  %255 = icmp slt <8 x i32> %252, %254
  %256 = select <8 x i1> %255, <8 x i32> %252, <8 x i32> %254
  %257 = icmp sgt <8 x i32> %252, %254
  %258 = select <8 x i1> %257, <8 x i32> %252, <8 x i32> %254
  %259 = add <8 x i32> %249, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %260 = add <8 x i32> %259, %251
  %261 = add <8 x i32> %260, %256
  %262 = add <8 x i32> %261, %258
  %263 = ashr <8 x i32> %262, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %264 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %248, <8 x i32> %263) #7
  %265 = bitcast i16* %195 to <2 x i64>*
  %266 = load <2 x i64>, <2 x i64>* %265, align 1
  %267 = getelementptr inbounds i16, i16* %195, i64 %3
  %268 = bitcast i16* %267 to <4 x i32>*
  %269 = load <4 x i32>, <4 x i32>* %268, align 1
  %270 = shufflevector <2 x i64> %266, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %271 = bitcast <4 x i64> %270 to <8 x i32>
  %272 = shufflevector <4 x i32> %269, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %273 = shufflevector <8 x i32> %271, <8 x i32> %272, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %274 = icmp slt <16 x i16> %264, %53
  %275 = select <16 x i1> %274, <16 x i16> %264, <16 x i16> %53
  %276 = bitcast <8 x i32> %273 to <16 x i16>
  %277 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %275, <16 x i16> %276) #7
  %278 = bitcast <16 x i16> %277 to <4 x i64>
  %279 = shufflevector <4 x i64> %278, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %279, <2 x i64>* %265, align 1
  %280 = bitcast <16 x i16> %277 to <8 x i32>
  %281 = shufflevector <8 x i32> %280, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i32> %281, <4 x i32>* %268, align 1
  %282 = add i32 %194, -2
  %283 = getelementptr inbounds i16, i16* %196, i64 %55
  %284 = getelementptr inbounds i16, i16* %195, i64 %56
  %285 = icmp ugt i32 %282, 1
  br i1 %285, label %193, label %286

286:                                              ; preds = %193
  %287 = icmp eq i32 %282, 1
  br i1 %287, label %288, label %334

288:                                              ; preds = %286
  %289 = bitcast i16* %283 to <4 x i64>*
  %290 = load <4 x i64>, <4 x i64>* %289, align 1
  %291 = bitcast <4 x i64> %290 to <8 x i32>
  %292 = shufflevector <8 x i32> %291, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5>
  %293 = bitcast <4 x i64> %290 to <32 x i8>
  %294 = shufflevector <32 x i8> %293, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %295 = bitcast <32 x i8> %294 to <4 x i64>
  %296 = shufflevector <32 x i8> %293, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %297 = bitcast <32 x i8> %296 to <4 x i64>
  %298 = bitcast <8 x i32> %292 to <32 x i8>
  %299 = shufflevector <32 x i8> %298, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %300 = bitcast <32 x i8> %299 to <4 x i64>
  %301 = shufflevector <32 x i8> %298, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %302 = bitcast <32 x i8> %301 to <4 x i64>
  %303 = shufflevector <4 x i64> %295, <4 x i64> %300, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %304 = shufflevector <4 x i64> %297, <4 x i64> %302, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %305 = shufflevector <4 x i64> %300, <4 x i64> %295, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %306 = shufflevector <4 x i64> %302, <4 x i64> %297, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %307 = bitcast <4 x i64> %303 to <16 x i16>
  %308 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %185, <16 x i16> %307) #7
  %309 = bitcast <4 x i64> %306 to <16 x i16>
  %310 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %191, <16 x i16> %309) #7
  %311 = bitcast <4 x i64> %304 to <16 x i16>
  %312 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %187, <16 x i16> %311) #7
  %313 = bitcast <4 x i64> %305 to <16 x i16>
  %314 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %189, <16 x i16> %313) #7
  %315 = icmp slt <8 x i32> %312, %314
  %316 = select <8 x i1> %315, <8 x i32> %312, <8 x i32> %314
  %317 = icmp sgt <8 x i32> %312, %314
  %318 = select <8 x i1> %317, <8 x i32> %312, <8 x i32> %314
  %319 = add <8 x i32> %308, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %320 = add <8 x i32> %319, %310
  %321 = add <8 x i32> %320, %316
  %322 = add <8 x i32> %321, %318
  %323 = ashr <8 x i32> %322, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %324 = bitcast <8 x i32> %323 to <4 x i64>
  %325 = shufflevector <4 x i64> %324, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %326 = shufflevector <8 x i32> %323, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %327 = bitcast <2 x i64> %325 to <4 x i32>
  %328 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %327, <4 x i32> %326) #7
  %329 = bitcast i16* %284 to <8 x i16>*
  %330 = load <8 x i16>, <8 x i16>* %329, align 1
  %331 = icmp slt <8 x i16> %328, %59
  %332 = select <8 x i1> %331, <8 x i16> %328, <8 x i16> %59
  %333 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %332, <8 x i16> %330) #7
  store <8 x i16> %333, <8 x i16>* %329, align 1
  br label %334

334:                                              ; preds = %286, %288
  %335 = getelementptr inbounds i16, i16* %174, i64 8
  %336 = getelementptr inbounds i16, i16* %175, i64 8
  %337 = add nsw i32 %176, -8
  %338 = icmp sgt i32 %337, 7
  br i1 %338, label %173, label %166

339:                                              ; preds = %168, %339
  %340 = phi i16* [ %343, %339 ], [ %171, %168 ]
  %341 = phi i16* [ %344, %339 ], [ %170, %168 ]
  %342 = phi i32 [ %345, %339 ], [ %169, %168 ]
  tail call void @vpx_highbd_filter_block1d4_h8_avg_sse2(i16* %340, i64 %1, i16* %341, i64 %3, i32 %10, i16* %14, i32 %11) #7
  %343 = getelementptr inbounds i16, i16* %340, i64 4
  %344 = getelementptr inbounds i16, i16* %341, i64 4
  %345 = add nsw i32 %342, -4
  %346 = icmp sgt i32 %345, 3
  br i1 %346, label %339, label %883

347:                                              ; preds = %20
  %348 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 2
  %349 = load i16, i16* %348, align 2
  %350 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 5
  %351 = load i16, i16* %350, align 2
  %352 = or i16 %351, %349
  %353 = icmp eq i16 %352, 0
  %354 = icmp sgt i32 %9, 15
  br i1 %353, label %363, label %355

355:                                              ; preds = %347
  br i1 %354, label %356, label %373

356:                                              ; preds = %355
  %357 = shl nsw i32 -1, %11
  %358 = trunc i32 %357 to i16
  %359 = xor i16 %358, -1
  %360 = insertelement <16 x i16> undef, i16 %359, i32 0
  %361 = shufflevector <16 x i16> %360, <16 x i16> undef, <16 x i32> zeroinitializer
  %362 = bitcast i16* %14 to <2 x i64>*
  br label %390

363:                                              ; preds = %347
  br i1 %354, label %364, label %679

364:                                              ; preds = %363
  %365 = shl nsw i32 -1, %11
  %366 = trunc i32 %365 to i16
  %367 = xor i16 %366, -1
  %368 = insertelement <16 x i16> undef, i16 %367, i32 0
  %369 = shufflevector <16 x i16> %368, <16 x i16> undef, <16 x i32> zeroinitializer
  %370 = bitcast i16* %14 to <2 x i64>*
  br label %696

371:                                              ; preds = %491
  %372 = and i32 %9, 15
  br label %373

373:                                              ; preds = %371, %355
  %374 = phi i32 [ %9, %355 ], [ %372, %371 ]
  %375 = phi i16* [ %2, %355 ], [ %493, %371 ]
  %376 = phi i16* [ %0, %355 ], [ %492, %371 ]
  %377 = icmp sgt i32 %374, 7
  br i1 %377, label %378, label %498

378:                                              ; preds = %373
  %379 = shl nsw i32 -1, %11
  %380 = trunc i32 %379 to i16
  %381 = xor i16 %380, -1
  %382 = insertelement <16 x i16> undef, i16 %381, i32 0
  %383 = shufflevector <16 x i16> %382, <16 x i16> undef, <16 x i32> zeroinitializer
  %384 = bitcast i16* %14 to <2 x i64>*
  %385 = shl i64 %1, 1
  %386 = shl i64 %3, 1
  %387 = bitcast <16 x i16> %383 to <4 x i64>
  %388 = shufflevector <4 x i64> %387, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %389 = bitcast <2 x i64> %388 to <8 x i16>
  br label %503

390:                                              ; preds = %356, %491
  %391 = phi i16* [ %0, %356 ], [ %492, %491 ]
  %392 = phi i16* [ %2, %356 ], [ %493, %491 ]
  %393 = phi i32 [ %9, %356 ], [ %494, %491 ]
  %394 = load <2 x i64>, <2 x i64>* %362, align 1
  %395 = shufflevector <2 x i64> %394, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %396 = bitcast <4 x i64> %395 to <8 x i32>
  %397 = bitcast <2 x i64> %394 to <4 x i32>
  %398 = shufflevector <4 x i32> %397, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %399 = shufflevector <8 x i32> %396, <8 x i32> %398, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %400 = bitcast <8 x i32> %399 to <32 x i8>
  %401 = shufflevector <32 x i8> %400, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19>
  %402 = bitcast <32 x i8> %401 to <16 x i16>
  %403 = shufflevector <32 x i8> %400, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23>
  %404 = bitcast <32 x i8> %403 to <16 x i16>
  %405 = shufflevector <32 x i8> %400, <32 x i8> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27>
  %406 = bitcast <32 x i8> %405 to <16 x i16>
  %407 = shufflevector <32 x i8> %400, <32 x i8> undef, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31>
  %408 = bitcast <32 x i8> %407 to <16 x i16>
  %409 = getelementptr inbounds i16, i16* %391, i64 -3
  br label %410

410:                                              ; preds = %410, %390
  %411 = phi i32 [ %10, %390 ], [ %487, %410 ]
  %412 = phi i16* [ %392, %390 ], [ %489, %410 ]
  %413 = phi i16* [ %409, %390 ], [ %488, %410 ]
  %414 = bitcast i16* %413 to <4 x i64>*
  %415 = load <4 x i64>, <4 x i64>* %414, align 1
  %416 = getelementptr inbounds i16, i16* %413, i64 8
  %417 = bitcast i16* %416 to <4 x i64>*
  %418 = load <4 x i64>, <4 x i64>* %417, align 1
  %419 = bitcast <4 x i64> %415 to <8 x i32>
  %420 = shufflevector <8 x i32> %419, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5>
  %421 = bitcast <4 x i64> %415 to <32 x i8>
  %422 = shufflevector <32 x i8> %421, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %423 = bitcast <32 x i8> %422 to <4 x i64>
  %424 = shufflevector <32 x i8> %421, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %425 = bitcast <32 x i8> %424 to <4 x i64>
  %426 = bitcast <8 x i32> %420 to <32 x i8>
  %427 = shufflevector <32 x i8> %426, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %428 = bitcast <32 x i8> %427 to <4 x i64>
  %429 = shufflevector <32 x i8> %426, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %430 = bitcast <32 x i8> %429 to <4 x i64>
  %431 = bitcast <4 x i64> %418 to <8 x i32>
  %432 = shufflevector <8 x i32> %431, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5>
  %433 = bitcast <4 x i64> %418 to <32 x i8>
  %434 = shufflevector <32 x i8> %433, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %435 = bitcast <32 x i8> %434 to <4 x i64>
  %436 = shufflevector <32 x i8> %433, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %437 = bitcast <32 x i8> %436 to <4 x i64>
  %438 = bitcast <8 x i32> %432 to <32 x i8>
  %439 = shufflevector <32 x i8> %438, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %440 = bitcast <32 x i8> %439 to <4 x i64>
  %441 = shufflevector <32 x i8> %438, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %442 = bitcast <32 x i8> %441 to <4 x i64>
  %443 = shufflevector <4 x i64> %423, <4 x i64> %435, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %444 = shufflevector <4 x i64> %425, <4 x i64> %437, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %445 = shufflevector <4 x i64> %428, <4 x i64> %440, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %446 = shufflevector <4 x i64> %430, <4 x i64> %442, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %447 = shufflevector <4 x i64> %423, <4 x i64> %435, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %448 = shufflevector <4 x i64> %425, <4 x i64> %437, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %449 = bitcast <4 x i64> %443 to <16 x i16>
  %450 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %402, <16 x i16> %449) #7
  %451 = bitcast <4 x i64> %446 to <16 x i16>
  %452 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %408, <16 x i16> %451) #7
  %453 = bitcast <4 x i64> %444 to <16 x i16>
  %454 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %404, <16 x i16> %453) #7
  %455 = bitcast <4 x i64> %445 to <16 x i16>
  %456 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %406, <16 x i16> %455) #7
  %457 = icmp slt <8 x i32> %454, %456
  %458 = select <8 x i1> %457, <8 x i32> %454, <8 x i32> %456
  %459 = icmp sgt <8 x i32> %454, %456
  %460 = select <8 x i1> %459, <8 x i32> %454, <8 x i32> %456
  %461 = add <8 x i32> %450, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %462 = add <8 x i32> %461, %452
  %463 = add <8 x i32> %462, %458
  %464 = add <8 x i32> %463, %460
  %465 = ashr <8 x i32> %464, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %466 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %402, <16 x i16> %455) #7
  %467 = bitcast <4 x i64> %448 to <16 x i16>
  %468 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %408, <16 x i16> %467) #7
  %469 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %404, <16 x i16> %451) #7
  %470 = bitcast <4 x i64> %447 to <16 x i16>
  %471 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %406, <16 x i16> %470) #7
  %472 = icmp slt <8 x i32> %469, %471
  %473 = select <8 x i1> %472, <8 x i32> %469, <8 x i32> %471
  %474 = icmp sgt <8 x i32> %469, %471
  %475 = select <8 x i1> %474, <8 x i32> %469, <8 x i32> %471
  %476 = add <8 x i32> %466, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %477 = add <8 x i32> %476, %468
  %478 = add <8 x i32> %477, %473
  %479 = add <8 x i32> %478, %475
  %480 = ashr <8 x i32> %479, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %481 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %465, <8 x i32> %480) #7
  %482 = bitcast i16* %412 to <16 x i16>*
  %483 = load <16 x i16>, <16 x i16>* %482, align 1
  %484 = icmp slt <16 x i16> %481, %361
  %485 = select <16 x i1> %484, <16 x i16> %481, <16 x i16> %361
  %486 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %485, <16 x i16> %483) #7
  store <16 x i16> %486, <16 x i16>* %482, align 1
  %487 = add i32 %411, -1
  %488 = getelementptr inbounds i16, i16* %413, i64 %1
  %489 = getelementptr inbounds i16, i16* %412, i64 %3
  %490 = icmp eq i32 %487, 0
  br i1 %490, label %491, label %410

491:                                              ; preds = %410
  %492 = getelementptr inbounds i16, i16* %391, i64 16
  %493 = getelementptr inbounds i16, i16* %392, i64 16
  %494 = add nsw i32 %393, -16
  %495 = icmp sgt i32 %494, 15
  br i1 %495, label %390, label %371

496:                                              ; preds = %664
  %497 = and i32 %374, 7
  br label %498

498:                                              ; preds = %496, %373
  %499 = phi i32 [ %374, %373 ], [ %497, %496 ]
  %500 = phi i16* [ %375, %373 ], [ %666, %496 ]
  %501 = phi i16* [ %376, %373 ], [ %665, %496 ]
  %502 = icmp sgt i32 %499, 3
  br i1 %502, label %669, label %885

503:                                              ; preds = %378, %664
  %504 = phi i16* [ %376, %378 ], [ %665, %664 ]
  %505 = phi i16* [ %375, %378 ], [ %666, %664 ]
  %506 = phi i32 [ %374, %378 ], [ %667, %664 ]
  %507 = load <2 x i64>, <2 x i64>* %384, align 1
  %508 = shufflevector <2 x i64> %507, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %509 = bitcast <4 x i64> %508 to <8 x i32>
  %510 = bitcast <2 x i64> %507 to <4 x i32>
  %511 = shufflevector <4 x i32> %510, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %512 = shufflevector <8 x i32> %509, <8 x i32> %511, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %513 = bitcast <8 x i32> %512 to <32 x i8>
  %514 = shufflevector <32 x i8> %513, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19>
  %515 = bitcast <32 x i8> %514 to <16 x i16>
  %516 = shufflevector <32 x i8> %513, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23>
  %517 = bitcast <32 x i8> %516 to <16 x i16>
  %518 = shufflevector <32 x i8> %513, <32 x i8> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27>
  %519 = bitcast <32 x i8> %518 to <16 x i16>
  %520 = shufflevector <32 x i8> %513, <32 x i8> undef, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31>
  %521 = bitcast <32 x i8> %520 to <16 x i16>
  %522 = getelementptr inbounds i16, i16* %504, i64 -3
  br label %523

523:                                              ; preds = %523, %503
  %524 = phi i32 [ %10, %503 ], [ %612, %523 ]
  %525 = phi i16* [ %505, %503 ], [ %614, %523 ]
  %526 = phi i16* [ %522, %503 ], [ %613, %523 ]
  %527 = bitcast i16* %526 to <4 x i64>*
  %528 = load <4 x i64>, <4 x i64>* %527, align 1
  %529 = getelementptr inbounds i16, i16* %526, i64 %1
  %530 = bitcast i16* %529 to <4 x i64>*
  %531 = load <4 x i64>, <4 x i64>* %530, align 1
  %532 = bitcast <4 x i64> %528 to <8 x i32>
  %533 = shufflevector <8 x i32> %532, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5>
  %534 = bitcast <4 x i64> %528 to <32 x i8>
  %535 = shufflevector <32 x i8> %534, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %536 = bitcast <32 x i8> %535 to <4 x i64>
  %537 = shufflevector <32 x i8> %534, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %538 = bitcast <32 x i8> %537 to <4 x i64>
  %539 = bitcast <8 x i32> %533 to <32 x i8>
  %540 = shufflevector <32 x i8> %539, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %541 = bitcast <32 x i8> %540 to <4 x i64>
  %542 = shufflevector <32 x i8> %539, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %543 = bitcast <32 x i8> %542 to <4 x i64>
  %544 = bitcast <4 x i64> %531 to <8 x i32>
  %545 = shufflevector <8 x i32> %544, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5>
  %546 = bitcast <4 x i64> %531 to <32 x i8>
  %547 = shufflevector <32 x i8> %546, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %548 = bitcast <32 x i8> %547 to <4 x i64>
  %549 = shufflevector <32 x i8> %546, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %550 = bitcast <32 x i8> %549 to <4 x i64>
  %551 = bitcast <8 x i32> %545 to <32 x i8>
  %552 = shufflevector <32 x i8> %551, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %553 = bitcast <32 x i8> %552 to <4 x i64>
  %554 = shufflevector <32 x i8> %551, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %555 = bitcast <32 x i8> %554 to <4 x i64>
  %556 = shufflevector <4 x i64> %536, <4 x i64> %548, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %557 = shufflevector <4 x i64> %538, <4 x i64> %550, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %558 = shufflevector <4 x i64> %541, <4 x i64> %553, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %559 = shufflevector <4 x i64> %543, <4 x i64> %555, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %560 = shufflevector <4 x i64> %536, <4 x i64> %548, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %561 = shufflevector <4 x i64> %538, <4 x i64> %550, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %562 = bitcast <4 x i64> %556 to <16 x i16>
  %563 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %515, <16 x i16> %562) #7
  %564 = bitcast <4 x i64> %559 to <16 x i16>
  %565 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %521, <16 x i16> %564) #7
  %566 = bitcast <4 x i64> %557 to <16 x i16>
  %567 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %517, <16 x i16> %566) #7
  %568 = bitcast <4 x i64> %558 to <16 x i16>
  %569 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %519, <16 x i16> %568) #7
  %570 = icmp slt <8 x i32> %567, %569
  %571 = select <8 x i1> %570, <8 x i32> %567, <8 x i32> %569
  %572 = icmp sgt <8 x i32> %567, %569
  %573 = select <8 x i1> %572, <8 x i32> %567, <8 x i32> %569
  %574 = add <8 x i32> %563, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %575 = add <8 x i32> %574, %565
  %576 = add <8 x i32> %575, %571
  %577 = add <8 x i32> %576, %573
  %578 = ashr <8 x i32> %577, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %579 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %515, <16 x i16> %568) #7
  %580 = bitcast <4 x i64> %561 to <16 x i16>
  %581 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %521, <16 x i16> %580) #7
  %582 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %517, <16 x i16> %564) #7
  %583 = bitcast <4 x i64> %560 to <16 x i16>
  %584 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %519, <16 x i16> %583) #7
  %585 = icmp slt <8 x i32> %582, %584
  %586 = select <8 x i1> %585, <8 x i32> %582, <8 x i32> %584
  %587 = icmp sgt <8 x i32> %582, %584
  %588 = select <8 x i1> %587, <8 x i32> %582, <8 x i32> %584
  %589 = add <8 x i32> %579, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %590 = add <8 x i32> %589, %581
  %591 = add <8 x i32> %590, %586
  %592 = add <8 x i32> %591, %588
  %593 = ashr <8 x i32> %592, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %594 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %578, <8 x i32> %593) #7
  %595 = bitcast i16* %525 to <2 x i64>*
  %596 = load <2 x i64>, <2 x i64>* %595, align 1
  %597 = getelementptr inbounds i16, i16* %525, i64 %3
  %598 = bitcast i16* %597 to <4 x i32>*
  %599 = load <4 x i32>, <4 x i32>* %598, align 1
  %600 = shufflevector <2 x i64> %596, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %601 = bitcast <4 x i64> %600 to <8 x i32>
  %602 = shufflevector <4 x i32> %599, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %603 = shufflevector <8 x i32> %601, <8 x i32> %602, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %604 = icmp slt <16 x i16> %594, %383
  %605 = select <16 x i1> %604, <16 x i16> %594, <16 x i16> %383
  %606 = bitcast <8 x i32> %603 to <16 x i16>
  %607 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %605, <16 x i16> %606) #7
  %608 = bitcast <16 x i16> %607 to <4 x i64>
  %609 = shufflevector <4 x i64> %608, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %609, <2 x i64>* %595, align 1
  %610 = bitcast <16 x i16> %607 to <8 x i32>
  %611 = shufflevector <8 x i32> %610, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i32> %611, <4 x i32>* %598, align 1
  %612 = add i32 %524, -2
  %613 = getelementptr inbounds i16, i16* %526, i64 %385
  %614 = getelementptr inbounds i16, i16* %525, i64 %386
  %615 = icmp ugt i32 %612, 1
  br i1 %615, label %523, label %616

616:                                              ; preds = %523
  %617 = icmp eq i32 %612, 1
  br i1 %617, label %618, label %664

618:                                              ; preds = %616
  %619 = bitcast i16* %613 to <4 x i64>*
  %620 = load <4 x i64>, <4 x i64>* %619, align 1
  %621 = bitcast <4 x i64> %620 to <8 x i32>
  %622 = shufflevector <8 x i32> %621, <8 x i32> undef, <8 x i32> <i32 2, i32 3, i32 4, i32 5, i32 2, i32 3, i32 4, i32 5>
  %623 = bitcast <4 x i64> %620 to <32 x i8>
  %624 = shufflevector <32 x i8> %623, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %625 = bitcast <32 x i8> %624 to <4 x i64>
  %626 = shufflevector <32 x i8> %623, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %627 = bitcast <32 x i8> %626 to <4 x i64>
  %628 = bitcast <8 x i32> %622 to <32 x i8>
  %629 = shufflevector <32 x i8> %628, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 2, i32 3, i32 4, i32 5, i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 16, i32 17, i32 18, i32 19, i32 18, i32 19, i32 20, i32 21, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25>
  %630 = bitcast <32 x i8> %629 to <4 x i64>
  %631 = shufflevector <32 x i8> %628, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 20, i32 21, i32 22, i32 23, i32 22, i32 23, i32 24, i32 25, i32 24, i32 25, i32 26, i32 27, i32 26, i32 27, i32 28, i32 29>
  %632 = bitcast <32 x i8> %631 to <4 x i64>
  %633 = shufflevector <4 x i64> %625, <4 x i64> %630, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %634 = shufflevector <4 x i64> %627, <4 x i64> %632, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %635 = shufflevector <4 x i64> %630, <4 x i64> %625, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %636 = shufflevector <4 x i64> %632, <4 x i64> %627, <4 x i32> <i32 0, i32 1, i32 6, i32 7>
  %637 = bitcast <4 x i64> %633 to <16 x i16>
  %638 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %515, <16 x i16> %637) #7
  %639 = bitcast <4 x i64> %636 to <16 x i16>
  %640 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %521, <16 x i16> %639) #7
  %641 = bitcast <4 x i64> %634 to <16 x i16>
  %642 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %517, <16 x i16> %641) #7
  %643 = bitcast <4 x i64> %635 to <16 x i16>
  %644 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %519, <16 x i16> %643) #7
  %645 = icmp slt <8 x i32> %642, %644
  %646 = select <8 x i1> %645, <8 x i32> %642, <8 x i32> %644
  %647 = icmp sgt <8 x i32> %642, %644
  %648 = select <8 x i1> %647, <8 x i32> %642, <8 x i32> %644
  %649 = add <8 x i32> %638, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %650 = add <8 x i32> %649, %640
  %651 = add <8 x i32> %650, %646
  %652 = add <8 x i32> %651, %648
  %653 = ashr <8 x i32> %652, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %654 = bitcast <8 x i32> %653 to <4 x i64>
  %655 = shufflevector <4 x i64> %654, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %656 = shufflevector <8 x i32> %653, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %657 = bitcast <2 x i64> %655 to <4 x i32>
  %658 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %657, <4 x i32> %656) #7
  %659 = bitcast i16* %614 to <8 x i16>*
  %660 = load <8 x i16>, <8 x i16>* %659, align 1
  %661 = icmp slt <8 x i16> %658, %389
  %662 = select <8 x i1> %661, <8 x i16> %658, <8 x i16> %389
  %663 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %662, <8 x i16> %660) #7
  store <8 x i16> %663, <8 x i16>* %659, align 1
  br label %664

664:                                              ; preds = %616, %618
  %665 = getelementptr inbounds i16, i16* %504, i64 8
  %666 = getelementptr inbounds i16, i16* %505, i64 8
  %667 = add nsw i32 %506, -8
  %668 = icmp sgt i32 %667, 7
  br i1 %668, label %503, label %496

669:                                              ; preds = %498, %669
  %670 = phi i16* [ %673, %669 ], [ %501, %498 ]
  %671 = phi i16* [ %674, %669 ], [ %500, %498 ]
  %672 = phi i32 [ %675, %669 ], [ %499, %498 ]
  tail call void @vpx_highbd_filter_block1d4_h8_avg_sse2(i16* %670, i64 %1, i16* %671, i64 %3, i32 %10, i16* %14, i32 %11) #7
  %673 = getelementptr inbounds i16, i16* %670, i64 4
  %674 = getelementptr inbounds i16, i16* %671, i64 4
  %675 = add nsw i32 %672, -4
  %676 = icmp sgt i32 %675, 3
  br i1 %676, label %669, label %881

677:                                              ; preds = %755
  %678 = and i32 %9, 15
  br label %679

679:                                              ; preds = %677, %363
  %680 = phi i32 [ %9, %363 ], [ %678, %677 ]
  %681 = phi i16* [ %2, %363 ], [ %757, %677 ]
  %682 = phi i16* [ %0, %363 ], [ %756, %677 ]
  %683 = icmp sgt i32 %680, 7
  br i1 %683, label %684, label %762

684:                                              ; preds = %679
  %685 = shl nsw i32 -1, %11
  %686 = trunc i32 %685 to i16
  %687 = xor i16 %686, -1
  %688 = insertelement <16 x i16> undef, i16 %687, i32 0
  %689 = shufflevector <16 x i16> %688, <16 x i16> undef, <16 x i32> zeroinitializer
  %690 = bitcast i16* %14 to <2 x i64>*
  %691 = shl i64 %1, 1
  %692 = shl i64 %3, 1
  %693 = bitcast <16 x i16> %689 to <4 x i64>
  %694 = shufflevector <4 x i64> %693, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %695 = bitcast <2 x i64> %694 to <8 x i16>
  br label %767

696:                                              ; preds = %364, %755
  %697 = phi i16* [ %0, %364 ], [ %756, %755 ]
  %698 = phi i16* [ %2, %364 ], [ %757, %755 ]
  %699 = phi i32 [ %9, %364 ], [ %758, %755 ]
  %700 = load <2 x i64>, <2 x i64>* %370, align 1
  %701 = shufflevector <2 x i64> %700, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %702 = bitcast <4 x i64> %701 to <8 x i32>
  %703 = bitcast <2 x i64> %700 to <4 x i32>
  %704 = shufflevector <4 x i32> %703, <4 x i32> undef, <8 x i32> <i32 undef, i32 1, i32 2, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %705 = shufflevector <8 x i32> %702, <8 x i32> %704, <8 x i32> <i32 undef, i32 1, i32 2, i32 undef, i32 undef, i32 9, i32 10, i32 undef>
  %706 = bitcast <8 x i32> %705 to <32 x i8>
  %707 = shufflevector <32 x i8> %706, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9, i32 22, i32 23, i32 24, i32 25, i32 22, i32 23, i32 24, i32 25, i32 22, i32 23, i32 24, i32 25, i32 22, i32 23, i32 24, i32 25>
  %708 = getelementptr inbounds i16, i16* %697, i64 -3
  %709 = bitcast <32 x i8> %707 to <16 x i16>
  br label %710

710:                                              ; preds = %710, %696
  %711 = phi i32 [ %10, %696 ], [ %751, %710 ]
  %712 = phi i16* [ %698, %696 ], [ %753, %710 ]
  %713 = phi i16* [ %708, %696 ], [ %752, %710 ]
  %714 = bitcast i16* %713 to <4 x i64>*
  %715 = load <4 x i64>, <4 x i64>* %714, align 1
  %716 = getelementptr inbounds i16, i16* %713, i64 8
  %717 = bitcast i16* %716 to <4 x i64>*
  %718 = load <4 x i64>, <4 x i64>* %717, align 1
  %719 = bitcast <4 x i64> %715 to <32 x i8>
  %720 = shufflevector <32 x i8> %719, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %721 = bitcast <32 x i8> %720 to <4 x i64>
  %722 = bitcast <4 x i64> %718 to <32 x i8>
  %723 = shufflevector <32 x i8> %722, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %724 = bitcast <32 x i8> %723 to <4 x i64>
  %725 = bitcast <4 x i64> %715 to <8 x i32>
  %726 = shufflevector <8 x i32> %725, <8 x i32> undef, <8 x i32> <i32 undef, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef>
  %727 = bitcast <4 x i64> %718 to <8 x i32>
  %728 = shufflevector <8 x i32> %727, <8 x i32> undef, <8 x i32> <i32 undef, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef>
  %729 = bitcast <8 x i32> %726 to <32 x i8>
  %730 = shufflevector <32 x i8> %729, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %731 = bitcast <32 x i8> %730 to <4 x i64>
  %732 = bitcast <8 x i32> %728 to <32 x i8>
  %733 = shufflevector <32 x i8> %732, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %734 = bitcast <32 x i8> %733 to <4 x i64>
  %735 = shufflevector <4 x i64> %721, <4 x i64> %724, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %736 = shufflevector <4 x i64> %731, <4 x i64> %734, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %737 = bitcast <4 x i64> %735 to <16 x i16>
  %738 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %737, <16 x i16> %709) #7
  %739 = bitcast <4 x i64> %736 to <16 x i16>
  %740 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %739, <16 x i16> %709) #7
  %741 = add <8 x i32> %738, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %742 = add <8 x i32> %740, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %743 = ashr <8 x i32> %741, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %744 = ashr <8 x i32> %742, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %745 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %743, <8 x i32> %744) #7
  %746 = bitcast i16* %712 to <16 x i16>*
  %747 = load <16 x i16>, <16 x i16>* %746, align 1
  %748 = icmp slt <16 x i16> %745, %369
  %749 = select <16 x i1> %748, <16 x i16> %745, <16 x i16> %369
  %750 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %749, <16 x i16> %747) #7
  store <16 x i16> %750, <16 x i16>* %746, align 1
  %751 = add i32 %711, -1
  %752 = getelementptr inbounds i16, i16* %713, i64 %1
  %753 = getelementptr inbounds i16, i16* %712, i64 %3
  %754 = icmp eq i32 %751, 0
  br i1 %754, label %755, label %710

755:                                              ; preds = %710
  %756 = getelementptr inbounds i16, i16* %697, i64 16
  %757 = getelementptr inbounds i16, i16* %698, i64 16
  %758 = add nsw i32 %699, -16
  %759 = icmp sgt i32 %758, 15
  br i1 %759, label %696, label %677

760:                                              ; preds = %866
  %761 = and i32 %680, 7
  br label %762

762:                                              ; preds = %760, %679
  %763 = phi i32 [ %680, %679 ], [ %761, %760 ]
  %764 = phi i16* [ %681, %679 ], [ %868, %760 ]
  %765 = phi i16* [ %682, %679 ], [ %867, %760 ]
  %766 = icmp sgt i32 %763, 3
  br i1 %766, label %871, label %885

767:                                              ; preds = %684, %866
  %768 = phi i16* [ %682, %684 ], [ %867, %866 ]
  %769 = phi i16* [ %681, %684 ], [ %868, %866 ]
  %770 = phi i32 [ %680, %684 ], [ %869, %866 ]
  %771 = load <2 x i64>, <2 x i64>* %690, align 1
  %772 = shufflevector <2 x i64> %771, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %773 = bitcast <4 x i64> %772 to <8 x i32>
  %774 = bitcast <2 x i64> %771 to <4 x i32>
  %775 = shufflevector <4 x i32> %774, <4 x i32> undef, <8 x i32> <i32 undef, i32 1, i32 2, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %776 = shufflevector <8 x i32> %773, <8 x i32> %775, <8 x i32> <i32 undef, i32 1, i32 2, i32 undef, i32 undef, i32 9, i32 10, i32 undef>
  %777 = bitcast <8 x i32> %776 to <32 x i8>
  %778 = shufflevector <32 x i8> %777, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9, i32 22, i32 23, i32 24, i32 25, i32 22, i32 23, i32 24, i32 25, i32 22, i32 23, i32 24, i32 25, i32 22, i32 23, i32 24, i32 25>
  %779 = getelementptr inbounds i16, i16* %768, i64 -3
  %780 = bitcast <32 x i8> %778 to <16 x i16>
  br label %781

781:                                              ; preds = %781, %767
  %782 = phi i32 [ %10, %767 ], [ %834, %781 ]
  %783 = phi i16* [ %769, %767 ], [ %836, %781 ]
  %784 = phi i16* [ %779, %767 ], [ %835, %781 ]
  %785 = bitcast i16* %784 to <4 x i64>*
  %786 = load <4 x i64>, <4 x i64>* %785, align 1
  %787 = getelementptr inbounds i16, i16* %784, i64 %1
  %788 = bitcast i16* %787 to <4 x i64>*
  %789 = load <4 x i64>, <4 x i64>* %788, align 1
  %790 = bitcast <4 x i64> %786 to <32 x i8>
  %791 = shufflevector <32 x i8> %790, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %792 = bitcast <32 x i8> %791 to <4 x i64>
  %793 = bitcast <4 x i64> %789 to <32 x i8>
  %794 = shufflevector <32 x i8> %793, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %795 = bitcast <32 x i8> %794 to <4 x i64>
  %796 = bitcast <4 x i64> %786 to <8 x i32>
  %797 = shufflevector <8 x i32> %796, <8 x i32> undef, <8 x i32> <i32 undef, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef>
  %798 = bitcast <4 x i64> %789 to <8 x i32>
  %799 = shufflevector <8 x i32> %798, <8 x i32> undef, <8 x i32> <i32 undef, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef>
  %800 = bitcast <8 x i32> %797 to <32 x i8>
  %801 = shufflevector <32 x i8> %800, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %802 = bitcast <32 x i8> %801 to <4 x i64>
  %803 = bitcast <8 x i32> %799 to <32 x i8>
  %804 = shufflevector <32 x i8> %803, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %805 = bitcast <32 x i8> %804 to <4 x i64>
  %806 = shufflevector <4 x i64> %792, <4 x i64> %795, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %807 = shufflevector <4 x i64> %802, <4 x i64> %805, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %808 = bitcast <4 x i64> %806 to <16 x i16>
  %809 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %808, <16 x i16> %780) #7
  %810 = bitcast <4 x i64> %807 to <16 x i16>
  %811 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %810, <16 x i16> %780) #7
  %812 = add <8 x i32> %809, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %813 = add <8 x i32> %811, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %814 = ashr <8 x i32> %812, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %815 = ashr <8 x i32> %813, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %816 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %814, <8 x i32> %815) #7
  %817 = bitcast i16* %783 to <2 x i64>*
  %818 = load <2 x i64>, <2 x i64>* %817, align 1
  %819 = getelementptr inbounds i16, i16* %783, i64 %3
  %820 = bitcast i16* %819 to <4 x i32>*
  %821 = load <4 x i32>, <4 x i32>* %820, align 1
  %822 = shufflevector <2 x i64> %818, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %823 = bitcast <4 x i64> %822 to <8 x i32>
  %824 = shufflevector <4 x i32> %821, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %825 = shufflevector <8 x i32> %823, <8 x i32> %824, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %826 = icmp slt <16 x i16> %816, %689
  %827 = select <16 x i1> %826, <16 x i16> %816, <16 x i16> %689
  %828 = bitcast <8 x i32> %825 to <16 x i16>
  %829 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %827, <16 x i16> %828) #7
  %830 = bitcast <16 x i16> %829 to <4 x i64>
  %831 = shufflevector <4 x i64> %830, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %831, <2 x i64>* %817, align 1
  %832 = bitcast <16 x i16> %829 to <8 x i32>
  %833 = shufflevector <8 x i32> %832, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i32> %833, <4 x i32>* %820, align 1
  %834 = add i32 %782, -2
  %835 = getelementptr inbounds i16, i16* %784, i64 %691
  %836 = getelementptr inbounds i16, i16* %783, i64 %692
  %837 = icmp ugt i32 %834, 1
  br i1 %837, label %781, label %838

838:                                              ; preds = %781
  %839 = icmp eq i32 %834, 1
  br i1 %839, label %840, label %866

840:                                              ; preds = %838
  %841 = bitcast i16* %835 to <4 x i64>*
  %842 = load <4 x i64>, <4 x i64>* %841, align 1
  %843 = bitcast <4 x i64> %842 to <32 x i8>
  %844 = shufflevector <32 x i8> %843, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %845 = bitcast <32 x i8> %844 to <4 x i64>
  %846 = bitcast <4 x i64> %842 to <8 x i32>
  %847 = shufflevector <8 x i32> %846, <8 x i32> undef, <8 x i32> <i32 undef, i32 3, i32 4, i32 5, i32 undef, i32 undef, i32 undef, i32 undef>
  %848 = bitcast <8 x i32> %847 to <32 x i8>
  %849 = shufflevector <32 x i8> %848, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 8, i32 9, i32 10, i32 11, i32 10, i32 11, i32 12, i32 13, i32 12, i32 13, i32 14, i32 15, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %850 = bitcast <32 x i8> %849 to <4 x i64>
  %851 = shufflevector <4 x i64> %845, <4 x i64> %850, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %852 = bitcast <4 x i64> %851 to <16 x i16>
  %853 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %852, <16 x i16> %780) #7
  %854 = add <8 x i32> %853, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %855 = ashr <8 x i32> %854, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %856 = bitcast <8 x i32> %855 to <4 x i64>
  %857 = shufflevector <4 x i64> %856, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  %858 = shufflevector <8 x i32> %855, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  %859 = bitcast <2 x i64> %857 to <4 x i32>
  %860 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %859, <4 x i32> %858) #7
  %861 = bitcast i16* %836 to <8 x i16>*
  %862 = load <8 x i16>, <8 x i16>* %861, align 1
  %863 = icmp slt <8 x i16> %860, %695
  %864 = select <8 x i1> %863, <8 x i16> %860, <8 x i16> %695
  %865 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %864, <8 x i16> %862) #7
  store <8 x i16> %865, <8 x i16>* %861, align 1
  br label %866

866:                                              ; preds = %838, %840
  %867 = getelementptr inbounds i16, i16* %768, i64 8
  %868 = getelementptr inbounds i16, i16* %769, i64 8
  %869 = add nsw i32 %770, -8
  %870 = icmp sgt i32 %869, 7
  br i1 %870, label %767, label %760

871:                                              ; preds = %762, %871
  %872 = phi i16* [ %875, %871 ], [ %765, %762 ]
  %873 = phi i16* [ %876, %871 ], [ %764, %762 ]
  %874 = phi i32 [ %877, %871 ], [ %763, %762 ]
  tail call void @vpx_highbd_filter_block1d4_h2_avg_sse2(i16* %872, i64 %1, i16* %873, i64 %3, i32 %10, i16* %14, i32 %11) #7
  %875 = getelementptr inbounds i16, i16* %872, i64 4
  %876 = getelementptr inbounds i16, i16* %873, i64 4
  %877 = add nsw i32 %874, -4
  %878 = icmp sgt i32 %877, 3
  br i1 %878, label %871, label %879

879:                                              ; preds = %871
  %880 = and i32 %763, 3
  br label %885

881:                                              ; preds = %669
  %882 = and i32 %499, 3
  br label %885

883:                                              ; preds = %339
  %884 = and i32 %169, 3
  br label %885

885:                                              ; preds = %883, %881, %879, %168, %498, %762, %16, %12
  %886 = phi i32 [ %9, %16 ], [ %9, %12 ], [ %763, %762 ], [ %499, %498 ], [ %169, %168 ], [ %880, %879 ], [ %882, %881 ], [ %884, %883 ]
  %887 = phi i16* [ %2, %16 ], [ %2, %12 ], [ %764, %762 ], [ %500, %498 ], [ %170, %168 ], [ %876, %879 ], [ %674, %881 ], [ %344, %883 ]
  %888 = phi i16* [ %0, %16 ], [ %0, %12 ], [ %765, %762 ], [ %501, %498 ], [ %171, %168 ], [ %875, %879 ], [ %673, %881 ], [ %343, %883 ]
  %889 = icmp eq i32 %886, 0
  br i1 %889, label %891, label %890

890:                                              ; preds = %885
  tail call void @vpx_highbd_convolve8_avg_horiz_c(i16* %888, i64 %1, i16* %887, i64 %3, [8 x i16]* %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %886, i32 %10, i32 %11) #7
  br label %891

891:                                              ; preds = %885, %890
  ret void
}

declare void @vpx_highbd_filter_block1d4_h8_avg_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #4

declare void @vpx_highbd_filter_block1d4_h2_avg_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #4

declare void @vpx_highbd_convolve8_avg_horiz_c(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_convolve8_avg_vert_avx2(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #3 {
  %13 = sext i32 %7 to i64
  %14 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 0
  %15 = icmp eq i32 %8, 16
  br i1 %15, label %16, label %552

16:                                               ; preds = %12
  %17 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 3
  %18 = load i16, i16* %17, align 2
  %19 = icmp eq i16 %18, 128
  br i1 %19, label %552, label %20

20:                                               ; preds = %16
  %21 = load i16, i16* %14, align 2
  %22 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 1
  %23 = load i16, i16* %22, align 2
  %24 = or i16 %23, %21
  %25 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 6
  %26 = load i16, i16* %25, align 2
  %27 = or i16 %24, %26
  %28 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 7
  %29 = load i16, i16* %28, align 2
  %30 = or i16 %27, %29
  %31 = icmp eq i16 %30, 0
  br i1 %31, label %223, label %32

32:                                               ; preds = %20
  %33 = icmp sgt i32 %9, 15
  br i1 %33, label %34, label %38

34:                                               ; preds = %32
  %35 = mul i64 %1, -3
  br label %59

36:                                               ; preds = %59
  %37 = and i32 %9, 15
  br label %38

38:                                               ; preds = %36, %32
  %39 = phi i32 [ %9, %32 ], [ %37, %36 ]
  %40 = phi i16* [ %2, %32 ], [ %65, %36 ]
  %41 = phi i16* [ %0, %32 ], [ %64, %36 ]
  %42 = icmp sgt i32 %39, 7
  br i1 %42, label %43, label %70

43:                                               ; preds = %38
  %44 = mul i64 %1, -3
  %45 = shl nsw i32 -1, %11
  %46 = trunc i32 %45 to i16
  %47 = xor i16 %46, -1
  %48 = insertelement <16 x i16> undef, i16 %47, i32 0
  %49 = shufflevector <16 x i16> %48, <16 x i16> undef, <16 x i32> zeroinitializer
  %50 = bitcast i16* %14 to <2 x i64>*
  %51 = shl i64 %1, 1
  %52 = mul nsw i64 %1, 3
  %53 = shl nsw i64 %1, 2
  %54 = mul nsw i64 %1, 5
  %55 = mul nsw i64 %1, 6
  %56 = mul nsw i64 %1, 7
  %57 = shl nsw i64 %1, 3
  %58 = shl i64 %3, 1
  br label %77

59:                                               ; preds = %34, %59
  %60 = phi i16* [ %0, %34 ], [ %64, %59 ]
  %61 = phi i16* [ %2, %34 ], [ %65, %59 ]
  %62 = phi i32 [ %9, %34 ], [ %66, %59 ]
  %63 = getelementptr inbounds i16, i16* %60, i64 %35
  tail call fastcc void @vpx_highbd_filter_block1d16_v8_avg_avx2(i16* %63, i64 %1, i16* %61, i64 %3, i32 %10, i16* %14, i32 %11)
  %64 = getelementptr inbounds i16, i16* %60, i64 16
  %65 = getelementptr inbounds i16, i16* %61, i64 16
  %66 = add nsw i32 %62, -16
  %67 = icmp sgt i32 %66, 15
  br i1 %67, label %59, label %36

68:                                               ; preds = %209
  %69 = and i32 %39, 7
  br label %70

70:                                               ; preds = %68, %38
  %71 = phi i32 [ %39, %38 ], [ %69, %68 ]
  %72 = phi i16* [ %40, %38 ], [ %211, %68 ]
  %73 = phi i16* [ %41, %38 ], [ %210, %68 ]
  %74 = icmp sgt i32 %71, 3
  br i1 %74, label %75, label %552

75:                                               ; preds = %70
  %76 = mul i64 %1, -3
  br label %214

77:                                               ; preds = %43, %209
  %78 = phi i16* [ %41, %43 ], [ %210, %209 ]
  %79 = phi i16* [ %40, %43 ], [ %211, %209 ]
  %80 = phi i32 [ %39, %43 ], [ %212, %209 ]
  %81 = getelementptr inbounds i16, i16* %78, i64 %44
  %82 = load <2 x i64>, <2 x i64>* %50, align 1
  %83 = shufflevector <2 x i64> %82, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %84 = bitcast <4 x i64> %83 to <8 x i32>
  %85 = bitcast <2 x i64> %82 to <4 x i32>
  %86 = shufflevector <4 x i32> %85, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %87 = shufflevector <8 x i32> %84, <8 x i32> %86, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %88 = bitcast <8 x i32> %87 to <32 x i8>
  %89 = shufflevector <32 x i8> %88, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19>
  %90 = bitcast <32 x i8> %89 to <16 x i16>
  %91 = shufflevector <32 x i8> %88, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23>
  %92 = bitcast <32 x i8> %91 to <16 x i16>
  %93 = shufflevector <32 x i8> %88, <32 x i8> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27>
  %94 = bitcast <32 x i8> %93 to <16 x i16>
  %95 = shufflevector <32 x i8> %88, <32 x i8> undef, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31>
  %96 = bitcast <32 x i8> %95 to <16 x i16>
  %97 = bitcast i16* %81 to <2 x i64>*
  %98 = load <2 x i64>, <2 x i64>* %97, align 1
  %99 = getelementptr inbounds i16, i16* %81, i64 %1
  %100 = bitcast i16* %99 to <2 x i64>*
  %101 = load <2 x i64>, <2 x i64>* %100, align 1
  %102 = getelementptr inbounds i16, i16* %81, i64 %51
  %103 = bitcast i16* %102 to <2 x i64>*
  %104 = load <2 x i64>, <2 x i64>* %103, align 1
  %105 = getelementptr inbounds i16, i16* %81, i64 %52
  %106 = bitcast i16* %105 to <2 x i64>*
  %107 = load <2 x i64>, <2 x i64>* %106, align 1
  %108 = getelementptr inbounds i16, i16* %81, i64 %53
  %109 = bitcast i16* %108 to <2 x i64>*
  %110 = load <2 x i64>, <2 x i64>* %109, align 1
  %111 = getelementptr inbounds i16, i16* %81, i64 %54
  %112 = bitcast i16* %111 to <2 x i64>*
  %113 = load <2 x i64>, <2 x i64>* %112, align 1
  %114 = getelementptr inbounds i16, i16* %81, i64 %55
  %115 = bitcast i16* %114 to <2 x i64>*
  %116 = load <2 x i64>, <2 x i64>* %115, align 1
  %117 = shufflevector <2 x i64> %116, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %118 = shufflevector <2 x i64> %98, <2 x i64> %101, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %119 = shufflevector <2 x i64> %101, <2 x i64> %104, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %120 = shufflevector <2 x i64> %104, <2 x i64> %107, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %121 = shufflevector <2 x i64> %107, <2 x i64> %110, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %122 = shufflevector <2 x i64> %110, <2 x i64> %113, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %123 = shufflevector <2 x i64> %113, <2 x i64> %116, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %124 = bitcast <4 x i64> %118 to <16 x i16>
  %125 = bitcast <4 x i64> %119 to <16 x i16>
  %126 = shufflevector <16 x i16> %124, <16 x i16> %125, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %127 = shufflevector <16 x i16> %124, <16 x i16> %125, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %128 = bitcast <4 x i64> %120 to <16 x i16>
  %129 = bitcast <4 x i64> %121 to <16 x i16>
  %130 = shufflevector <16 x i16> %128, <16 x i16> %129, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %131 = shufflevector <16 x i16> %128, <16 x i16> %129, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %132 = bitcast <4 x i64> %122 to <16 x i16>
  %133 = bitcast <4 x i64> %123 to <16 x i16>
  %134 = shufflevector <16 x i16> %132, <16 x i16> %133, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %135 = shufflevector <16 x i16> %132, <16 x i16> %133, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  br label %136

136:                                              ; preds = %136, %77
  %137 = phi <4 x i64> [ %117, %77 ], [ %154, %136 ]
  %138 = phi <16 x i16> [ %135, %77 ], [ %160, %136 ]
  %139 = phi <16 x i16> [ %131, %77 ], [ %138, %136 ]
  %140 = phi <16 x i16> [ %127, %77 ], [ %139, %136 ]
  %141 = phi <16 x i16> [ %134, %77 ], [ %159, %136 ]
  %142 = phi <16 x i16> [ %130, %77 ], [ %141, %136 ]
  %143 = phi <16 x i16> [ %126, %77 ], [ %142, %136 ]
  %144 = phi i32 [ %10, %77 ], [ %207, %136 ]
  %145 = phi i16* [ %79, %77 ], [ %206, %136 ]
  %146 = phi i16* [ %81, %77 ], [ %205, %136 ]
  %147 = getelementptr inbounds i16, i16* %146, i64 %56
  %148 = bitcast i16* %147 to <2 x i64>*
  %149 = load <2 x i64>, <2 x i64>* %148, align 1
  %150 = shufflevector <2 x i64> %149, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %151 = getelementptr inbounds i16, i16* %146, i64 %57
  %152 = bitcast i16* %151 to <2 x i64>*
  %153 = load <2 x i64>, <2 x i64>* %152, align 1
  %154 = shufflevector <2 x i64> %153, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %155 = shufflevector <4 x i64> %137, <4 x i64> %150, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %156 = shufflevector <2 x i64> %149, <2 x i64> %153, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %157 = bitcast <4 x i64> %155 to <16 x i16>
  %158 = bitcast <4 x i64> %156 to <16 x i16>
  %159 = shufflevector <16 x i16> %157, <16 x i16> %158, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %160 = shufflevector <16 x i16> %157, <16 x i16> %158, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %161 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %90, <16 x i16> %143) #7
  %162 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %96, <16 x i16> %159) #7
  %163 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %92, <16 x i16> %142) #7
  %164 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %94, <16 x i16> %141) #7
  %165 = icmp slt <8 x i32> %163, %164
  %166 = select <8 x i1> %165, <8 x i32> %163, <8 x i32> %164
  %167 = icmp sgt <8 x i32> %163, %164
  %168 = select <8 x i1> %167, <8 x i32> %163, <8 x i32> %164
  %169 = add <8 x i32> %161, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %170 = add <8 x i32> %169, %162
  %171 = add <8 x i32> %170, %166
  %172 = add <8 x i32> %171, %168
  %173 = ashr <8 x i32> %172, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %174 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %90, <16 x i16> %140) #7
  %175 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %96, <16 x i16> %160) #7
  %176 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %92, <16 x i16> %139) #7
  %177 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %94, <16 x i16> %138) #7
  %178 = icmp slt <8 x i32> %176, %177
  %179 = select <8 x i1> %178, <8 x i32> %176, <8 x i32> %177
  %180 = icmp sgt <8 x i32> %176, %177
  %181 = select <8 x i1> %180, <8 x i32> %176, <8 x i32> %177
  %182 = add <8 x i32> %174, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %183 = add <8 x i32> %182, %175
  %184 = add <8 x i32> %183, %179
  %185 = add <8 x i32> %184, %181
  %186 = ashr <8 x i32> %185, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %187 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %173, <8 x i32> %186) #7
  %188 = bitcast i16* %145 to <2 x i64>*
  %189 = load <2 x i64>, <2 x i64>* %188, align 1
  %190 = getelementptr inbounds i16, i16* %145, i64 %3
  %191 = bitcast i16* %190 to <4 x i32>*
  %192 = load <4 x i32>, <4 x i32>* %191, align 1
  %193 = shufflevector <2 x i64> %189, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %194 = bitcast <4 x i64> %193 to <8 x i32>
  %195 = shufflevector <4 x i32> %192, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %196 = shufflevector <8 x i32> %194, <8 x i32> %195, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %197 = icmp slt <16 x i16> %187, %49
  %198 = select <16 x i1> %197, <16 x i16> %187, <16 x i16> %49
  %199 = bitcast <8 x i32> %196 to <16 x i16>
  %200 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %198, <16 x i16> %199) #7
  %201 = bitcast <16 x i16> %200 to <4 x i64>
  %202 = shufflevector <4 x i64> %201, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %202, <2 x i64>* %188, align 1
  %203 = bitcast <16 x i16> %200 to <8 x i32>
  %204 = shufflevector <8 x i32> %203, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i32> %204, <4 x i32>* %191, align 1
  %205 = getelementptr inbounds i16, i16* %146, i64 %51
  %206 = getelementptr inbounds i16, i16* %145, i64 %58
  %207 = add i32 %144, -2
  %208 = icmp eq i32 %207, 0
  br i1 %208, label %209, label %136

209:                                              ; preds = %136
  %210 = getelementptr inbounds i16, i16* %78, i64 8
  %211 = getelementptr inbounds i16, i16* %79, i64 8
  %212 = add nsw i32 %80, -8
  %213 = icmp sgt i32 %212, 7
  br i1 %213, label %77, label %68

214:                                              ; preds = %75, %214
  %215 = phi i16* [ %73, %75 ], [ %219, %214 ]
  %216 = phi i16* [ %72, %75 ], [ %220, %214 ]
  %217 = phi i32 [ %71, %75 ], [ %221, %214 ]
  %218 = getelementptr inbounds i16, i16* %215, i64 %76
  tail call void @vpx_highbd_filter_block1d4_v8_avg_sse2(i16* %218, i64 %1, i16* %216, i64 %3, i32 %10, i16* %14, i32 %11) #7
  %219 = getelementptr inbounds i16, i16* %215, i64 4
  %220 = getelementptr inbounds i16, i16* %216, i64 4
  %221 = add nsw i32 %217, -4
  %222 = icmp sgt i32 %221, 3
  br i1 %222, label %214, label %550

223:                                              ; preds = %20
  %224 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 2
  %225 = load i16, i16* %224, align 2
  %226 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %13, i64 5
  %227 = load i16, i16* %226, align 2
  %228 = or i16 %227, %225
  %229 = icmp eq i16 %228, 0
  %230 = icmp sgt i32 %9, 15
  br i1 %229, label %234, label %231

231:                                              ; preds = %223
  br i1 %230, label %232, label %244

232:                                              ; preds = %231
  %233 = mul i64 %1, -3
  br label %265

234:                                              ; preds = %223
  br i1 %230, label %235, label %431

235:                                              ; preds = %234
  %236 = shl nsw i32 -1, %11
  %237 = trunc i32 %236 to i16
  %238 = xor i16 %237, -1
  %239 = insertelement <16 x i16> undef, i16 %238, i32 0
  %240 = shufflevector <16 x i16> %239, <16 x i16> undef, <16 x i32> zeroinitializer
  %241 = bitcast i16* %14 to <2 x i64>*
  br label %443

242:                                              ; preds = %265
  %243 = and i32 %9, 15
  br label %244

244:                                              ; preds = %242, %231
  %245 = phi i32 [ %9, %231 ], [ %243, %242 ]
  %246 = phi i16* [ %2, %231 ], [ %271, %242 ]
  %247 = phi i16* [ %0, %231 ], [ %270, %242 ]
  %248 = icmp sgt i32 %245, 7
  br i1 %248, label %249, label %276

249:                                              ; preds = %244
  %250 = mul i64 %1, -3
  %251 = shl nsw i32 -1, %11
  %252 = trunc i32 %251 to i16
  %253 = xor i16 %252, -1
  %254 = insertelement <16 x i16> undef, i16 %253, i32 0
  %255 = shufflevector <16 x i16> %254, <16 x i16> undef, <16 x i32> zeroinitializer
  %256 = bitcast i16* %14 to <2 x i64>*
  %257 = shl i64 %1, 1
  %258 = mul nsw i64 %1, 3
  %259 = shl nsw i64 %1, 2
  %260 = mul nsw i64 %1, 5
  %261 = mul nsw i64 %1, 6
  %262 = mul nsw i64 %1, 7
  %263 = shl nsw i64 %1, 3
  %264 = shl i64 %3, 1
  br label %283

265:                                              ; preds = %232, %265
  %266 = phi i16* [ %0, %232 ], [ %270, %265 ]
  %267 = phi i16* [ %2, %232 ], [ %271, %265 ]
  %268 = phi i32 [ %9, %232 ], [ %272, %265 ]
  %269 = getelementptr inbounds i16, i16* %266, i64 %233
  tail call fastcc void @vpx_highbd_filter_block1d16_v8_avg_avx2(i16* %269, i64 %1, i16* %267, i64 %3, i32 %10, i16* %14, i32 %11)
  %270 = getelementptr inbounds i16, i16* %266, i64 16
  %271 = getelementptr inbounds i16, i16* %267, i64 16
  %272 = add nsw i32 %268, -16
  %273 = icmp sgt i32 %272, 15
  br i1 %273, label %265, label %242

274:                                              ; preds = %415
  %275 = and i32 %245, 7
  br label %276

276:                                              ; preds = %274, %244
  %277 = phi i32 [ %245, %244 ], [ %275, %274 ]
  %278 = phi i16* [ %246, %244 ], [ %417, %274 ]
  %279 = phi i16* [ %247, %244 ], [ %416, %274 ]
  %280 = icmp sgt i32 %277, 3
  br i1 %280, label %281, label %552

281:                                              ; preds = %276
  %282 = mul i64 %1, -3
  br label %420

283:                                              ; preds = %249, %415
  %284 = phi i16* [ %247, %249 ], [ %416, %415 ]
  %285 = phi i16* [ %246, %249 ], [ %417, %415 ]
  %286 = phi i32 [ %245, %249 ], [ %418, %415 ]
  %287 = getelementptr inbounds i16, i16* %284, i64 %250
  %288 = load <2 x i64>, <2 x i64>* %256, align 1
  %289 = shufflevector <2 x i64> %288, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %290 = bitcast <4 x i64> %289 to <8 x i32>
  %291 = bitcast <2 x i64> %288 to <4 x i32>
  %292 = shufflevector <4 x i32> %291, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %293 = shufflevector <8 x i32> %290, <8 x i32> %292, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %294 = bitcast <8 x i32> %293 to <32 x i8>
  %295 = shufflevector <32 x i8> %294, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19>
  %296 = bitcast <32 x i8> %295 to <16 x i16>
  %297 = shufflevector <32 x i8> %294, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23>
  %298 = bitcast <32 x i8> %297 to <16 x i16>
  %299 = shufflevector <32 x i8> %294, <32 x i8> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27>
  %300 = bitcast <32 x i8> %299 to <16 x i16>
  %301 = shufflevector <32 x i8> %294, <32 x i8> undef, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31>
  %302 = bitcast <32 x i8> %301 to <16 x i16>
  %303 = bitcast i16* %287 to <2 x i64>*
  %304 = load <2 x i64>, <2 x i64>* %303, align 1
  %305 = getelementptr inbounds i16, i16* %287, i64 %1
  %306 = bitcast i16* %305 to <2 x i64>*
  %307 = load <2 x i64>, <2 x i64>* %306, align 1
  %308 = getelementptr inbounds i16, i16* %287, i64 %257
  %309 = bitcast i16* %308 to <2 x i64>*
  %310 = load <2 x i64>, <2 x i64>* %309, align 1
  %311 = getelementptr inbounds i16, i16* %287, i64 %258
  %312 = bitcast i16* %311 to <2 x i64>*
  %313 = load <2 x i64>, <2 x i64>* %312, align 1
  %314 = getelementptr inbounds i16, i16* %287, i64 %259
  %315 = bitcast i16* %314 to <2 x i64>*
  %316 = load <2 x i64>, <2 x i64>* %315, align 1
  %317 = getelementptr inbounds i16, i16* %287, i64 %260
  %318 = bitcast i16* %317 to <2 x i64>*
  %319 = load <2 x i64>, <2 x i64>* %318, align 1
  %320 = getelementptr inbounds i16, i16* %287, i64 %261
  %321 = bitcast i16* %320 to <2 x i64>*
  %322 = load <2 x i64>, <2 x i64>* %321, align 1
  %323 = shufflevector <2 x i64> %322, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %324 = shufflevector <2 x i64> %304, <2 x i64> %307, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %325 = shufflevector <2 x i64> %307, <2 x i64> %310, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %326 = shufflevector <2 x i64> %310, <2 x i64> %313, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %327 = shufflevector <2 x i64> %313, <2 x i64> %316, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %328 = shufflevector <2 x i64> %316, <2 x i64> %319, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %329 = shufflevector <2 x i64> %319, <2 x i64> %322, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %330 = bitcast <4 x i64> %324 to <16 x i16>
  %331 = bitcast <4 x i64> %325 to <16 x i16>
  %332 = shufflevector <16 x i16> %330, <16 x i16> %331, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %333 = shufflevector <16 x i16> %330, <16 x i16> %331, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %334 = bitcast <4 x i64> %326 to <16 x i16>
  %335 = bitcast <4 x i64> %327 to <16 x i16>
  %336 = shufflevector <16 x i16> %334, <16 x i16> %335, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %337 = shufflevector <16 x i16> %334, <16 x i16> %335, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %338 = bitcast <4 x i64> %328 to <16 x i16>
  %339 = bitcast <4 x i64> %329 to <16 x i16>
  %340 = shufflevector <16 x i16> %338, <16 x i16> %339, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %341 = shufflevector <16 x i16> %338, <16 x i16> %339, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  br label %342

342:                                              ; preds = %342, %283
  %343 = phi <4 x i64> [ %323, %283 ], [ %360, %342 ]
  %344 = phi <16 x i16> [ %341, %283 ], [ %366, %342 ]
  %345 = phi <16 x i16> [ %337, %283 ], [ %344, %342 ]
  %346 = phi <16 x i16> [ %333, %283 ], [ %345, %342 ]
  %347 = phi <16 x i16> [ %340, %283 ], [ %365, %342 ]
  %348 = phi <16 x i16> [ %336, %283 ], [ %347, %342 ]
  %349 = phi <16 x i16> [ %332, %283 ], [ %348, %342 ]
  %350 = phi i32 [ %10, %283 ], [ %413, %342 ]
  %351 = phi i16* [ %285, %283 ], [ %412, %342 ]
  %352 = phi i16* [ %287, %283 ], [ %411, %342 ]
  %353 = getelementptr inbounds i16, i16* %352, i64 %262
  %354 = bitcast i16* %353 to <2 x i64>*
  %355 = load <2 x i64>, <2 x i64>* %354, align 1
  %356 = shufflevector <2 x i64> %355, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %357 = getelementptr inbounds i16, i16* %352, i64 %263
  %358 = bitcast i16* %357 to <2 x i64>*
  %359 = load <2 x i64>, <2 x i64>* %358, align 1
  %360 = shufflevector <2 x i64> %359, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %361 = shufflevector <4 x i64> %343, <4 x i64> %356, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %362 = shufflevector <2 x i64> %355, <2 x i64> %359, <4 x i32> <i32 0, i32 1, i32 2, i32 3>
  %363 = bitcast <4 x i64> %361 to <16 x i16>
  %364 = bitcast <4 x i64> %362 to <16 x i16>
  %365 = shufflevector <16 x i16> %363, <16 x i16> %364, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %366 = shufflevector <16 x i16> %363, <16 x i16> %364, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %367 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %296, <16 x i16> %349) #7
  %368 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %302, <16 x i16> %365) #7
  %369 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %298, <16 x i16> %348) #7
  %370 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %300, <16 x i16> %347) #7
  %371 = icmp slt <8 x i32> %369, %370
  %372 = select <8 x i1> %371, <8 x i32> %369, <8 x i32> %370
  %373 = icmp sgt <8 x i32> %369, %370
  %374 = select <8 x i1> %373, <8 x i32> %369, <8 x i32> %370
  %375 = add <8 x i32> %367, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %376 = add <8 x i32> %375, %368
  %377 = add <8 x i32> %376, %372
  %378 = add <8 x i32> %377, %374
  %379 = ashr <8 x i32> %378, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %380 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %296, <16 x i16> %346) #7
  %381 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %302, <16 x i16> %366) #7
  %382 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %298, <16 x i16> %345) #7
  %383 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %300, <16 x i16> %344) #7
  %384 = icmp slt <8 x i32> %382, %383
  %385 = select <8 x i1> %384, <8 x i32> %382, <8 x i32> %383
  %386 = icmp sgt <8 x i32> %382, %383
  %387 = select <8 x i1> %386, <8 x i32> %382, <8 x i32> %383
  %388 = add <8 x i32> %380, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %389 = add <8 x i32> %388, %381
  %390 = add <8 x i32> %389, %385
  %391 = add <8 x i32> %390, %387
  %392 = ashr <8 x i32> %391, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %393 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %379, <8 x i32> %392) #7
  %394 = bitcast i16* %351 to <2 x i64>*
  %395 = load <2 x i64>, <2 x i64>* %394, align 1
  %396 = getelementptr inbounds i16, i16* %351, i64 %3
  %397 = bitcast i16* %396 to <4 x i32>*
  %398 = load <4 x i32>, <4 x i32>* %397, align 1
  %399 = shufflevector <2 x i64> %395, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %400 = bitcast <4 x i64> %399 to <8 x i32>
  %401 = shufflevector <4 x i32> %398, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %402 = shufflevector <8 x i32> %400, <8 x i32> %401, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %403 = icmp slt <16 x i16> %393, %255
  %404 = select <16 x i1> %403, <16 x i16> %393, <16 x i16> %255
  %405 = bitcast <8 x i32> %402 to <16 x i16>
  %406 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %404, <16 x i16> %405) #7
  %407 = bitcast <16 x i16> %406 to <4 x i64>
  %408 = shufflevector <4 x i64> %407, <4 x i64> undef, <2 x i32> <i32 0, i32 1>
  store <2 x i64> %408, <2 x i64>* %394, align 1
  %409 = bitcast <16 x i16> %406 to <8 x i32>
  %410 = shufflevector <8 x i32> %409, <8 x i32> undef, <4 x i32> <i32 4, i32 5, i32 6, i32 7>
  store <4 x i32> %410, <4 x i32>* %397, align 1
  %411 = getelementptr inbounds i16, i16* %352, i64 %257
  %412 = getelementptr inbounds i16, i16* %351, i64 %264
  %413 = add i32 %350, -2
  %414 = icmp eq i32 %413, 0
  br i1 %414, label %415, label %342

415:                                              ; preds = %342
  %416 = getelementptr inbounds i16, i16* %284, i64 8
  %417 = getelementptr inbounds i16, i16* %285, i64 8
  %418 = add nsw i32 %286, -8
  %419 = icmp sgt i32 %418, 7
  br i1 %419, label %283, label %274

420:                                              ; preds = %281, %420
  %421 = phi i16* [ %279, %281 ], [ %425, %420 ]
  %422 = phi i16* [ %278, %281 ], [ %426, %420 ]
  %423 = phi i32 [ %277, %281 ], [ %427, %420 ]
  %424 = getelementptr inbounds i16, i16* %421, i64 %282
  tail call void @vpx_highbd_filter_block1d4_v8_avg_sse2(i16* %424, i64 %1, i16* %422, i64 %3, i32 %10, i16* %14, i32 %11) #7
  %425 = getelementptr inbounds i16, i16* %421, i64 4
  %426 = getelementptr inbounds i16, i16* %422, i64 4
  %427 = add nsw i32 %423, -4
  %428 = icmp sgt i32 %427, 3
  br i1 %428, label %420, label %548

429:                                              ; preds = %485
  %430 = and i32 %9, 15
  br label %431

431:                                              ; preds = %429, %234
  %432 = phi i32 [ %9, %234 ], [ %430, %429 ]
  %433 = phi i16* [ %2, %234 ], [ %487, %429 ]
  %434 = phi i16* [ %0, %234 ], [ %486, %429 ]
  %435 = icmp sgt i32 %432, 7
  br i1 %435, label %436, label %492

436:                                              ; preds = %431
  %437 = shl nsw i32 -1, %11
  %438 = trunc i32 %437 to i16
  %439 = xor i16 %438, -1
  %440 = insertelement <8 x i16> undef, i16 %439, i32 0
  %441 = shufflevector <8 x i16> %440, <8 x i16> undef, <8 x i32> zeroinitializer
  %442 = bitcast i16* %14 to <16 x i8>*
  br label %497

443:                                              ; preds = %235, %485
  %444 = phi i16* [ %0, %235 ], [ %486, %485 ]
  %445 = phi i16* [ %2, %235 ], [ %487, %485 ]
  %446 = phi i32 [ %9, %235 ], [ %488, %485 ]
  %447 = load <2 x i64>, <2 x i64>* %241, align 1
  %448 = shufflevector <2 x i64> %447, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %449 = bitcast <4 x i64> %448 to <8 x i32>
  %450 = bitcast <2 x i64> %447 to <4 x i32>
  %451 = shufflevector <4 x i32> %450, <4 x i32> undef, <8 x i32> <i32 undef, i32 1, i32 2, i32 undef, i32 undef, i32 undef, i32 undef, i32 undef>
  %452 = shufflevector <8 x i32> %449, <8 x i32> %451, <8 x i32> <i32 undef, i32 1, i32 2, i32 undef, i32 undef, i32 9, i32 10, i32 undef>
  %453 = bitcast <8 x i32> %452 to <32 x i8>
  %454 = shufflevector <32 x i8> %453, <32 x i8> undef, <32 x i32> <i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9, i32 22, i32 23, i32 24, i32 25, i32 22, i32 23, i32 24, i32 25, i32 22, i32 23, i32 24, i32 25, i32 22, i32 23, i32 24, i32 25>
  %455 = bitcast i16* %444 to <4 x i64>*
  %456 = load <4 x i64>, <4 x i64>* %455, align 1
  %457 = bitcast <32 x i8> %454 to <16 x i16>
  br label %458

458:                                              ; preds = %458, %443
  %459 = phi <4 x i64> [ %456, %443 ], [ %465, %458 ]
  %460 = phi i32 [ %10, %443 ], [ %483, %458 ]
  %461 = phi i16* [ %445, %443 ], [ %482, %458 ]
  %462 = phi i16* [ %444, %443 ], [ %463, %458 ]
  %463 = getelementptr inbounds i16, i16* %462, i64 %1
  %464 = bitcast i16* %463 to <4 x i64>*
  %465 = load <4 x i64>, <4 x i64>* %464, align 1
  %466 = bitcast <4 x i64> %459 to <16 x i16>
  %467 = bitcast <4 x i64> %465 to <16 x i16>
  %468 = shufflevector <16 x i16> %466, <16 x i16> %467, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %469 = shufflevector <16 x i16> %466, <16 x i16> %467, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %470 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %468, <16 x i16> %457) #7
  %471 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %469, <16 x i16> %457) #7
  %472 = add <8 x i32> %470, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %473 = add <8 x i32> %471, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %474 = ashr <8 x i32> %472, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %475 = ashr <8 x i32> %473, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %476 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %474, <8 x i32> %475) #7
  %477 = bitcast i16* %461 to <16 x i16>*
  %478 = load <16 x i16>, <16 x i16>* %477, align 1
  %479 = icmp slt <16 x i16> %476, %240
  %480 = select <16 x i1> %479, <16 x i16> %476, <16 x i16> %240
  %481 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %480, <16 x i16> %478) #7
  store <16 x i16> %481, <16 x i16>* %477, align 1
  %482 = getelementptr inbounds i16, i16* %461, i64 %3
  %483 = add i32 %460, -1
  %484 = icmp eq i32 %483, 0
  br i1 %484, label %485, label %458

485:                                              ; preds = %458
  %486 = getelementptr inbounds i16, i16* %444, i64 16
  %487 = getelementptr inbounds i16, i16* %445, i64 16
  %488 = add nsw i32 %446, -16
  %489 = icmp sgt i32 %488, 15
  br i1 %489, label %443, label %429

490:                                              ; preds = %533
  %491 = and i32 %432, 7
  br label %492

492:                                              ; preds = %490, %431
  %493 = phi i32 [ %432, %431 ], [ %491, %490 ]
  %494 = phi i16* [ %433, %431 ], [ %535, %490 ]
  %495 = phi i16* [ %434, %431 ], [ %534, %490 ]
  %496 = icmp sgt i32 %493, 3
  br i1 %496, label %538, label %552

497:                                              ; preds = %436, %533
  %498 = phi i16* [ %434, %436 ], [ %534, %533 ]
  %499 = phi i16* [ %433, %436 ], [ %535, %533 ]
  %500 = phi i32 [ %432, %436 ], [ %536, %533 ]
  %501 = load <16 x i8>, <16 x i8>* %442, align 1
  %502 = shufflevector <16 x i8> %501, <16 x i8> undef, <16 x i32> <i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9, i32 6, i32 7, i32 8, i32 9>
  %503 = bitcast i16* %498 to <2 x i64>*
  %504 = load <2 x i64>, <2 x i64>* %503, align 1
  %505 = bitcast <16 x i8> %502 to <8 x i16>
  br label %506

506:                                              ; preds = %506, %497
  %507 = phi <2 x i64> [ %504, %497 ], [ %513, %506 ]
  %508 = phi i32 [ %10, %497 ], [ %531, %506 ]
  %509 = phi i16* [ %499, %497 ], [ %530, %506 ]
  %510 = phi i16* [ %498, %497 ], [ %511, %506 ]
  %511 = getelementptr inbounds i16, i16* %510, i64 %1
  %512 = bitcast i16* %511 to <2 x i64>*
  %513 = load <2 x i64>, <2 x i64>* %512, align 1
  %514 = bitcast <2 x i64> %507 to <8 x i16>
  %515 = bitcast <2 x i64> %513 to <8 x i16>
  %516 = shufflevector <8 x i16> %514, <8 x i16> %515, <8 x i32> <i32 0, i32 8, i32 1, i32 9, i32 2, i32 10, i32 3, i32 11>
  %517 = shufflevector <8 x i16> %514, <8 x i16> %515, <8 x i32> <i32 4, i32 12, i32 5, i32 13, i32 6, i32 14, i32 7, i32 15>
  %518 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %516, <8 x i16> %505) #7
  %519 = tail call <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16> %517, <8 x i16> %505) #7
  %520 = add <4 x i32> %518, <i32 64, i32 64, i32 64, i32 64>
  %521 = add <4 x i32> %519, <i32 64, i32 64, i32 64, i32 64>
  %522 = ashr <4 x i32> %520, <i32 7, i32 7, i32 7, i32 7>
  %523 = ashr <4 x i32> %521, <i32 7, i32 7, i32 7, i32 7>
  %524 = tail call <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32> %522, <4 x i32> %523) #7
  %525 = bitcast i16* %509 to <8 x i16>*
  %526 = load <8 x i16>, <8 x i16>* %525, align 1
  %527 = icmp slt <8 x i16> %524, %441
  %528 = select <8 x i1> %527, <8 x i16> %524, <8 x i16> %441
  %529 = tail call <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16> %528, <8 x i16> %526) #7
  store <8 x i16> %529, <8 x i16>* %525, align 1
  %530 = getelementptr inbounds i16, i16* %509, i64 %3
  %531 = add i32 %508, -1
  %532 = icmp eq i32 %531, 0
  br i1 %532, label %533, label %506

533:                                              ; preds = %506
  %534 = getelementptr inbounds i16, i16* %498, i64 8
  %535 = getelementptr inbounds i16, i16* %499, i64 8
  %536 = add nsw i32 %500, -8
  %537 = icmp sgt i32 %536, 7
  br i1 %537, label %497, label %490

538:                                              ; preds = %492, %538
  %539 = phi i16* [ %542, %538 ], [ %495, %492 ]
  %540 = phi i16* [ %543, %538 ], [ %494, %492 ]
  %541 = phi i32 [ %544, %538 ], [ %493, %492 ]
  tail call void @vpx_highbd_filter_block1d4_v2_avg_sse2(i16* %539, i64 %1, i16* %540, i64 %3, i32 %10, i16* %14, i32 %11) #7
  %542 = getelementptr inbounds i16, i16* %539, i64 4
  %543 = getelementptr inbounds i16, i16* %540, i64 4
  %544 = add nsw i32 %541, -4
  %545 = icmp sgt i32 %544, 3
  br i1 %545, label %538, label %546

546:                                              ; preds = %538
  %547 = and i32 %493, 3
  br label %552

548:                                              ; preds = %420
  %549 = and i32 %277, 3
  br label %552

550:                                              ; preds = %214
  %551 = and i32 %71, 3
  br label %552

552:                                              ; preds = %550, %548, %546, %70, %276, %492, %16, %12
  %553 = phi i32 [ %9, %16 ], [ %9, %12 ], [ %493, %492 ], [ %277, %276 ], [ %71, %70 ], [ %547, %546 ], [ %549, %548 ], [ %551, %550 ]
  %554 = phi i16* [ %2, %16 ], [ %2, %12 ], [ %494, %492 ], [ %278, %276 ], [ %72, %70 ], [ %543, %546 ], [ %426, %548 ], [ %220, %550 ]
  %555 = phi i16* [ %0, %16 ], [ %0, %12 ], [ %495, %492 ], [ %279, %276 ], [ %73, %70 ], [ %542, %546 ], [ %425, %548 ], [ %219, %550 ]
  %556 = icmp eq i32 %553, 0
  br i1 %556, label %558, label %557

557:                                              ; preds = %552
  tail call void @vpx_highbd_convolve8_avg_vert_c(i16* %555, i64 %1, i16* %554, i64 %3, [8 x i16]* %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %553, i32 %10, i32 %11) #7
  br label %558

558:                                              ; preds = %552, %557
  ret void
}

; Function Attrs: nounwind ssp uwtable
define internal fastcc void @vpx_highbd_filter_block1d16_v8_avg_avx2(i16* nocapture readonly, i64, i16* nocapture, i64, i32, i16* nocapture readonly, i32) unnamed_addr #3 {
  %8 = shl nsw i32 -1, %6
  %9 = trunc i32 %8 to i16
  %10 = xor i16 %9, -1
  %11 = insertelement <16 x i16> undef, i16 %10, i32 0
  %12 = shufflevector <16 x i16> %11, <16 x i16> undef, <16 x i32> zeroinitializer
  %13 = bitcast i16* %5 to <2 x i64>*
  %14 = load <2 x i64>, <2 x i64>* %13, align 1
  %15 = shufflevector <2 x i64> %14, <2 x i64> undef, <4 x i32> <i32 0, i32 1, i32 undef, i32 undef>
  %16 = bitcast <4 x i64> %15 to <8 x i32>
  %17 = bitcast <2 x i64> %14 to <4 x i32>
  %18 = shufflevector <4 x i32> %17, <4 x i32> undef, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 undef, i32 undef, i32 undef, i32 undef>
  %19 = shufflevector <8 x i32> %16, <8 x i32> %18, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>
  %20 = bitcast <8 x i32> %19 to <32 x i8>
  %21 = shufflevector <32 x i8> %20, <32 x i8> undef, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19, i32 16, i32 17, i32 18, i32 19>
  %22 = bitcast <32 x i8> %21 to <16 x i16>
  %23 = shufflevector <32 x i8> %20, <32 x i8> undef, <32 x i32> <i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 4, i32 5, i32 6, i32 7, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23, i32 20, i32 21, i32 22, i32 23>
  %24 = bitcast <32 x i8> %23 to <16 x i16>
  %25 = shufflevector <32 x i8> %20, <32 x i8> undef, <32 x i32> <i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 8, i32 9, i32 10, i32 11, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27, i32 24, i32 25, i32 26, i32 27>
  %26 = bitcast <32 x i8> %25 to <16 x i16>
  %27 = shufflevector <32 x i8> %20, <32 x i8> undef, <32 x i32> <i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 12, i32 13, i32 14, i32 15, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31, i32 28, i32 29, i32 30, i32 31>
  %28 = bitcast <32 x i8> %27 to <16 x i16>
  %29 = bitcast i16* %0 to <4 x i64>*
  %30 = load <4 x i64>, <4 x i64>* %29, align 1
  %31 = getelementptr inbounds i16, i16* %0, i64 %1
  %32 = bitcast i16* %31 to <4 x i64>*
  %33 = load <4 x i64>, <4 x i64>* %32, align 1
  %34 = shl i64 %1, 1
  %35 = getelementptr inbounds i16, i16* %0, i64 %34
  %36 = bitcast i16* %35 to <4 x i64>*
  %37 = load <4 x i64>, <4 x i64>* %36, align 1
  %38 = mul nsw i64 %1, 3
  %39 = getelementptr inbounds i16, i16* %0, i64 %38
  %40 = bitcast i16* %39 to <4 x i64>*
  %41 = load <4 x i64>, <4 x i64>* %40, align 1
  %42 = shl nsw i64 %1, 2
  %43 = getelementptr inbounds i16, i16* %0, i64 %42
  %44 = bitcast i16* %43 to <4 x i64>*
  %45 = load <4 x i64>, <4 x i64>* %44, align 1
  %46 = mul nsw i64 %1, 5
  %47 = getelementptr inbounds i16, i16* %0, i64 %46
  %48 = bitcast i16* %47 to <4 x i64>*
  %49 = load <4 x i64>, <4 x i64>* %48, align 1
  %50 = mul nsw i64 %1, 6
  %51 = getelementptr inbounds i16, i16* %0, i64 %50
  %52 = bitcast i16* %51 to <4 x i64>*
  %53 = load <4 x i64>, <4 x i64>* %52, align 1
  %54 = shufflevector <4 x i64> %30, <4 x i64> %33, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %55 = shufflevector <4 x i64> %30, <4 x i64> %33, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %56 = shufflevector <4 x i64> %33, <4 x i64> %37, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %57 = shufflevector <4 x i64> %33, <4 x i64> %37, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %58 = bitcast <4 x i64> %54 to <16 x i16>
  %59 = bitcast <4 x i64> %56 to <16 x i16>
  %60 = shufflevector <16 x i16> %58, <16 x i16> %59, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %61 = shufflevector <16 x i16> %58, <16 x i16> %59, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %62 = bitcast <4 x i64> %55 to <16 x i16>
  %63 = bitcast <4 x i64> %57 to <16 x i16>
  %64 = shufflevector <16 x i16> %62, <16 x i16> %63, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %65 = shufflevector <16 x i16> %62, <16 x i16> %63, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %66 = shufflevector <4 x i64> %37, <4 x i64> %41, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %67 = shufflevector <4 x i64> %37, <4 x i64> %41, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %68 = shufflevector <4 x i64> %41, <4 x i64> %45, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %69 = shufflevector <4 x i64> %41, <4 x i64> %45, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %70 = bitcast <4 x i64> %66 to <16 x i16>
  %71 = bitcast <4 x i64> %68 to <16 x i16>
  %72 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %73 = shufflevector <16 x i16> %70, <16 x i16> %71, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %74 = bitcast <4 x i64> %67 to <16 x i16>
  %75 = bitcast <4 x i64> %69 to <16 x i16>
  %76 = shufflevector <16 x i16> %74, <16 x i16> %75, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %77 = shufflevector <16 x i16> %74, <16 x i16> %75, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %78 = shufflevector <4 x i64> %45, <4 x i64> %49, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %79 = shufflevector <4 x i64> %45, <4 x i64> %49, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %80 = shufflevector <4 x i64> %49, <4 x i64> %53, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %81 = shufflevector <4 x i64> %49, <4 x i64> %53, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %82 = bitcast <4 x i64> %78 to <16 x i16>
  %83 = bitcast <4 x i64> %80 to <16 x i16>
  %84 = shufflevector <16 x i16> %82, <16 x i16> %83, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %85 = shufflevector <16 x i16> %82, <16 x i16> %83, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %86 = bitcast <4 x i64> %79 to <16 x i16>
  %87 = bitcast <4 x i64> %81 to <16 x i16>
  %88 = shufflevector <16 x i16> %86, <16 x i16> %87, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %89 = shufflevector <16 x i16> %86, <16 x i16> %87, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %90 = mul nsw i64 %1, 7
  %91 = shl nsw i64 %1, 3
  %92 = shl i64 %3, 1
  br label %93

93:                                               ; preds = %93, %7
  %94 = phi <4 x i64> [ %53, %7 ], [ %115, %93 ]
  %95 = phi <16 x i16> [ %89, %7 ], [ %127, %93 ]
  %96 = phi <16 x i16> [ %77, %7 ], [ %95, %93 ]
  %97 = phi <16 x i16> [ %65, %7 ], [ %96, %93 ]
  %98 = phi <16 x i16> [ %88, %7 ], [ %126, %93 ]
  %99 = phi <16 x i16> [ %76, %7 ], [ %98, %93 ]
  %100 = phi <16 x i16> [ %64, %7 ], [ %99, %93 ]
  %101 = phi <16 x i16> [ %85, %7 ], [ %123, %93 ]
  %102 = phi <16 x i16> [ %73, %7 ], [ %101, %93 ]
  %103 = phi <16 x i16> [ %61, %7 ], [ %102, %93 ]
  %104 = phi <16 x i16> [ %84, %7 ], [ %122, %93 ]
  %105 = phi <16 x i16> [ %72, %7 ], [ %104, %93 ]
  %106 = phi <16 x i16> [ %60, %7 ], [ %105, %93 ]
  %107 = phi i32 [ %4, %7 ], [ %201, %93 ]
  %108 = phi i16* [ %2, %7 ], [ %200, %93 ]
  %109 = phi i16* [ %0, %7 ], [ %199, %93 ]
  %110 = getelementptr inbounds i16, i16* %109, i64 %90
  %111 = bitcast i16* %110 to <4 x i64>*
  %112 = load <4 x i64>, <4 x i64>* %111, align 1
  %113 = getelementptr inbounds i16, i16* %109, i64 %91
  %114 = bitcast i16* %113 to <4 x i64>*
  %115 = load <4 x i64>, <4 x i64>* %114, align 1
  %116 = shufflevector <4 x i64> %94, <4 x i64> %112, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %117 = shufflevector <4 x i64> %94, <4 x i64> %112, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %118 = shufflevector <4 x i64> %112, <4 x i64> %115, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %119 = shufflevector <4 x i64> %112, <4 x i64> %115, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %120 = bitcast <4 x i64> %116 to <16 x i16>
  %121 = bitcast <4 x i64> %118 to <16 x i16>
  %122 = shufflevector <16 x i16> %120, <16 x i16> %121, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %123 = shufflevector <16 x i16> %120, <16 x i16> %121, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %124 = bitcast <4 x i64> %117 to <16 x i16>
  %125 = bitcast <4 x i64> %119 to <16 x i16>
  %126 = shufflevector <16 x i16> %124, <16 x i16> %125, <16 x i32> <i32 0, i32 16, i32 1, i32 17, i32 2, i32 18, i32 3, i32 19, i32 8, i32 24, i32 9, i32 25, i32 10, i32 26, i32 11, i32 27>
  %127 = shufflevector <16 x i16> %124, <16 x i16> %125, <16 x i32> <i32 4, i32 20, i32 5, i32 21, i32 6, i32 22, i32 7, i32 23, i32 12, i32 28, i32 13, i32 29, i32 14, i32 30, i32 15, i32 31>
  %128 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %22, <16 x i16> %106) #7
  %129 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %28, <16 x i16> %122) #7
  %130 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %24, <16 x i16> %105) #7
  %131 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %26, <16 x i16> %104) #7
  %132 = icmp slt <8 x i32> %130, %131
  %133 = select <8 x i1> %132, <8 x i32> %130, <8 x i32> %131
  %134 = icmp sgt <8 x i32> %130, %131
  %135 = select <8 x i1> %134, <8 x i32> %130, <8 x i32> %131
  %136 = add <8 x i32> %128, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %137 = add <8 x i32> %136, %129
  %138 = add <8 x i32> %137, %133
  %139 = add <8 x i32> %138, %135
  %140 = ashr <8 x i32> %139, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %141 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %22, <16 x i16> %103) #7
  %142 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %28, <16 x i16> %123) #7
  %143 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %24, <16 x i16> %102) #7
  %144 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %26, <16 x i16> %101) #7
  %145 = icmp slt <8 x i32> %143, %144
  %146 = select <8 x i1> %145, <8 x i32> %143, <8 x i32> %144
  %147 = icmp sgt <8 x i32> %143, %144
  %148 = select <8 x i1> %147, <8 x i32> %143, <8 x i32> %144
  %149 = add <8 x i32> %141, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %150 = add <8 x i32> %149, %142
  %151 = add <8 x i32> %150, %146
  %152 = add <8 x i32> %151, %148
  %153 = ashr <8 x i32> %152, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %154 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %22, <16 x i16> %100) #7
  %155 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %28, <16 x i16> %126) #7
  %156 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %24, <16 x i16> %99) #7
  %157 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %26, <16 x i16> %98) #7
  %158 = icmp slt <8 x i32> %156, %157
  %159 = select <8 x i1> %158, <8 x i32> %156, <8 x i32> %157
  %160 = icmp sgt <8 x i32> %156, %157
  %161 = select <8 x i1> %160, <8 x i32> %156, <8 x i32> %157
  %162 = add <8 x i32> %154, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %163 = add <8 x i32> %162, %155
  %164 = add <8 x i32> %163, %159
  %165 = add <8 x i32> %164, %161
  %166 = ashr <8 x i32> %165, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %167 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %22, <16 x i16> %97) #7
  %168 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %28, <16 x i16> %127) #7
  %169 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %24, <16 x i16> %96) #7
  %170 = tail call <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16> %26, <16 x i16> %95) #7
  %171 = icmp slt <8 x i32> %169, %170
  %172 = select <8 x i1> %171, <8 x i32> %169, <8 x i32> %170
  %173 = icmp sgt <8 x i32> %169, %170
  %174 = select <8 x i1> %173, <8 x i32> %169, <8 x i32> %170
  %175 = add <8 x i32> %167, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  %176 = add <8 x i32> %175, %168
  %177 = add <8 x i32> %176, %172
  %178 = add <8 x i32> %177, %174
  %179 = ashr <8 x i32> %178, <i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7>
  %180 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %140, <8 x i32> %153) #7
  %181 = bitcast <16 x i16> %180 to <4 x i64>
  %182 = tail call <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32> %166, <8 x i32> %179) #7
  %183 = bitcast <16 x i16> %182 to <4 x i64>
  %184 = shufflevector <4 x i64> %181, <4 x i64> %183, <4 x i32> <i32 0, i32 1, i32 4, i32 5>
  %185 = shufflevector <4 x i64> %181, <4 x i64> %183, <4 x i32> <i32 2, i32 3, i32 6, i32 7>
  %186 = bitcast i16* %108 to <16 x i16>*
  %187 = load <16 x i16>, <16 x i16>* %186, align 1
  %188 = getelementptr inbounds i16, i16* %108, i64 %3
  %189 = bitcast i16* %188 to <16 x i16>*
  %190 = load <16 x i16>, <16 x i16>* %189, align 1
  %191 = bitcast <4 x i64> %184 to <16 x i16>
  %192 = icmp sgt <16 x i16> %12, %191
  %193 = select <16 x i1> %192, <16 x i16> %191, <16 x i16> %12
  %194 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %193, <16 x i16> %187) #7
  store <16 x i16> %194, <16 x i16>* %186, align 1
  %195 = bitcast <4 x i64> %185 to <16 x i16>
  %196 = icmp sgt <16 x i16> %12, %195
  %197 = select <16 x i1> %196, <16 x i16> %195, <16 x i16> %12
  %198 = tail call <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16> %197, <16 x i16> %190) #7
  store <16 x i16> %198, <16 x i16>* %189, align 1
  %199 = getelementptr inbounds i16, i16* %109, i64 %34
  %200 = getelementptr inbounds i16, i16* %108, i64 %92
  %201 = add i32 %107, -2
  %202 = icmp eq i32 %201, 0
  br i1 %202, label %203, label %93

203:                                              ; preds = %93
  ret void
}

declare void @vpx_highbd_filter_block1d4_v8_avg_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #4

declare void @vpx_highbd_filter_block1d4_v2_avg_sse2(i16*, i64, i16*, i64, i32, i16*, i32) local_unnamed_addr #4

declare void @vpx_highbd_convolve8_avg_vert_c(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #4

; Function Attrs: nounwind ssp uwtable
define hidden void @vpx_highbd_convolve8_avg_avx2(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #5 {
  %13 = alloca [4544 x i16], align 16
  %14 = alloca [4544 x i16], align 16
  %15 = alloca [4160 x i16], align 16
  %16 = sext i32 %5 to i64
  %17 = icmp eq i32 %6, 16
  %18 = icmp eq i32 %8, 16
  %19 = and i1 %17, %18
  br i1 %19, label %20, label %62

20:                                               ; preds = %12
  %21 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 0
  %22 = load i16, i16* %21, align 2
  %23 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 1
  %24 = load i16, i16* %23, align 2
  %25 = or i16 %24, %22
  %26 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 6
  %27 = load i16, i16* %26, align 2
  %28 = or i16 %25, %27
  %29 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 7
  %30 = load i16, i16* %29, align 2
  %31 = or i16 %28, %30
  %32 = icmp eq i16 %31, 0
  br i1 %32, label %33, label %37

33:                                               ; preds = %20
  %34 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 3
  %35 = load i16, i16* %34, align 2
  %36 = icmp eq i16 %35, 128
  br i1 %36, label %37, label %44

37:                                               ; preds = %20, %33
  %38 = bitcast [4544 x i16]* %13 to i8*
  call void @llvm.lifetime.start.p0i8(i64 9088, i8* nonnull %38) #7
  %39 = mul i64 %1, -3
  %40 = getelementptr inbounds i16, i16* %0, i64 %39
  %41 = getelementptr inbounds [4544 x i16], [4544 x i16]* %13, i64 0, i64 0
  %42 = add nsw i32 %10, 7
  call void @vpx_highbd_convolve8_horiz_avx2(i16* %40, i64 %1, i16* nonnull %41, i64 64, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %42, i32 %11)
  %43 = getelementptr inbounds [4544 x i16], [4544 x i16]* %13, i64 0, i64 192
  call void @vpx_highbd_convolve8_avg_vert_avx2(i16* %43, i64 64, i16* %2, i64 %3, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %10, i32 %11)
  call void @llvm.lifetime.end.p0i8(i64 9088, i8* nonnull %38) #7
  br label %63

44:                                               ; preds = %33
  %45 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 2
  %46 = load i16, i16* %45, align 2
  %47 = getelementptr inbounds [8 x i16], [8 x i16]* %4, i64 %16, i64 5
  %48 = load i16, i16* %47, align 2
  %49 = or i16 %48, %46
  %50 = icmp eq i16 %49, 0
  br i1 %50, label %58, label %51

51:                                               ; preds = %44
  %52 = bitcast [4544 x i16]* %14 to i8*
  call void @llvm.lifetime.start.p0i8(i64 9088, i8* nonnull %52) #7
  %53 = mul i64 %1, -3
  %54 = getelementptr inbounds i16, i16* %0, i64 %53
  %55 = getelementptr inbounds [4544 x i16], [4544 x i16]* %14, i64 0, i64 0
  %56 = add nsw i32 %10, 7
  call void @vpx_highbd_convolve8_horiz_avx2(i16* %54, i64 %1, i16* nonnull %55, i64 64, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %56, i32 %11)
  %57 = getelementptr inbounds [4544 x i16], [4544 x i16]* %14, i64 0, i64 192
  call void @vpx_highbd_convolve8_avg_vert_avx2(i16* %57, i64 64, i16* %2, i64 %3, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %10, i32 %11)
  call void @llvm.lifetime.end.p0i8(i64 9088, i8* nonnull %52) #7
  br label %63

58:                                               ; preds = %44
  %59 = bitcast [4160 x i16]* %15 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8320, i8* nonnull %59) #7
  %60 = getelementptr inbounds [4160 x i16], [4160 x i16]* %15, i64 0, i64 0
  %61 = add nsw i32 %10, 1
  call void @vpx_highbd_convolve8_horiz_avx2(i16* %0, i64 %1, i16* nonnull %60, i64 64, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %61, i32 %11)
  call void @vpx_highbd_convolve8_avg_vert_avx2(i16* nonnull %60, i64 64, i16* %2, i64 %3, [8 x i16]* %4, i32 %5, i32 16, i32 %7, i32 16, i32 %9, i32 %10, i32 %11)
  call void @llvm.lifetime.end.p0i8(i64 8320, i8* nonnull %59) #7
  br label %63

62:                                               ; preds = %12
  tail call void @vpx_highbd_convolve8_avg_c(i16* %0, i64 %1, i16* %2, i64 %3, [8 x i16]* %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11) #7
  br label %63

63:                                               ; preds = %37, %58, %51, %62
  ret void
}

declare void @vpx_highbd_convolve8_avg_c(i16*, i64, i16*, i64, [8 x i16]*, i32, i32, i32, i32, i32, i32, i32) local_unnamed_addr #4

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.pavg.w(<16 x i16>, <16 x i16>) #6

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse2.pavg.w(<8 x i16>, <8 x i16>) #6

; Function Attrs: nounwind readnone
declare <8 x i32> @llvm.x86.avx2.pmadd.wd(<16 x i16>, <16 x i16>) #6

; Function Attrs: nounwind readnone
declare <16 x i16> @llvm.x86.avx2.packusdw(<8 x i32>, <8 x i32>) #6

; Function Attrs: nounwind readnone
declare <8 x i16> @llvm.x86.sse41.packusdw(<4 x i32>, <4 x i32>) #6

; Function Attrs: nounwind readnone
declare <4 x i32> @llvm.x86.sse2.pmadd.wd(<8 x i16>, <8 x i16>) #6

attributes #0 = { nofree norecurse nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind }
attributes #2 = { nofree nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="256" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="false" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="4" "target-cpu"="x86-64" "target-features"="+avx,+avx2,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0, !1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
